{"pr_number": 1117, "pr_title": "Fix parent/child issues with inferred spans", "pr_createdAt": "2020-04-02T09:56:29Z", "pr_url": "https://github.com/elastic/apm-agent-java/pull/1117", "timeline": [{"oid": "05d3fe6a6d60efbbe5d0e05fece486ce080322d8", "url": "https://github.com/elastic/apm-agent-java/commit/05d3fe6a6d60efbbe5d0e05fece486ce080322d8", "message": "Fix parent/child issues with inferred spans\n\nInferred spans can track a list of child or successor ids\nWith transitive reduction, the UI can then make regular spans a child of inferred spans", "committedDate": "2020-04-02T09:53:31Z", "type": "commit"}, {"oid": "f0f9ecc92eddc9d47105e172165c28c5b798662e", "url": "https://github.com/elastic/apm-agent-java/commit/f0f9ecc92eddc9d47105e172165c28c5b798662e", "message": "Reduce allocations and improve performance", "committedDate": "2020-04-02T15:14:07Z", "type": "commit"}, {"oid": "9d68d2c8b8a2545152d4f03552d21dfe74cd2571", "url": "https://github.com/elastic/apm-agent-java/commit/9d68d2c8b8a2545152d4f03552d21dfe74cd2571", "message": "Further reducing allocations", "committedDate": "2020-04-02T20:40:48Z", "type": "commit"}, {"oid": "2a458f4c90e04e01c616905441fda760f0181acb", "url": "https://github.com/elastic/apm-agent-java/commit/2a458f4c90e04e01c616905441fda760f0181acb", "message": "Add tests, set default capacity to 16\n\nThis capacity seems to be the most effective in the benchmarks\nBut it's going to depend a lot on the application\n16 still seems like a good default.\nIt grows much quicker if the actual capacity is high\nbut still does not seem wasteful for lower capacity needs.\nIt's also the default for lists in the JDK", "committedDate": "2020-04-03T06:52:56Z", "type": "commit"}, {"oid": "d38f1f110d49297266ab9f45e62e5b190c594329", "url": "https://github.com/elastic/apm-agent-java/commit/d38f1f110d49297266ab9f45e62e5b190c594329", "message": "Serialize successor_ids", "committedDate": "2020-04-03T07:17:05Z", "type": "commit"}, {"oid": "17e0bbeb47ba8abc6fdcdda92ede133ff95f546d", "url": "https://github.com/elastic/apm-agent-java/commit/17e0bbeb47ba8abc6fdcdda92ede133ff95f546d", "message": "Add docs", "committedDate": "2020-04-03T07:49:54Z", "type": "commit"}, {"oid": "243e2d3b2894f975da5ddca5fb350ac59bb2cba3", "url": "https://github.com/elastic/apm-agent-java/commit/243e2d3b2894f975da5ddca5fb350ac59bb2cba3", "message": "Serialize successor_ids as hex string as opposed to a long", "committedDate": "2020-04-03T10:30:17Z", "type": "commit"}, {"oid": "1693c583e22e50b1c80b3ac660fb28c58f2b53ea", "url": "https://github.com/elastic/apm-agent-java/commit/1693c583e22e50b1c80b3ac660fb28c58f2b53ea", "message": "Merge remote-tracking branch 'origin/master' into inferred-spans-successor-ids", "committedDate": "2020-04-24T14:09:22Z", "type": "commit"}, {"oid": "13f01b121806fa09e33003b90df2eb4c7f1d8338", "url": "https://github.com/elastic/apm-agent-java/commit/13f01b121806fa09e33003b90df2eb4c7f1d8338", "message": "Rename successor_ids to child_ids\n\n- Add changelog\n- Adjust known issues documentation", "committedDate": "2020-04-24T15:09:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI4NjI3OA==", "url": "https://github.com/elastic/apm-agent-java/pull/1117#discussion_r415286278", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @see co.elastic.apm.agent.impl.transaction.Span#childIds\n          \n          \n            \n                 * @see co.elastic.apm.agent.impl.transaction.AbstractSpan#childIds", "author": "eyalkoren", "createdAt": "2020-04-26T11:22:08Z", "path": "apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/CallTree.java", "diffHunk": "@@ -73,12 +73,17 @@\n     private long activationTimestamp = -1;\n     /**\n      * The context of the transaction or span which is the direct parent of this call tree node.\n-     * Used in {@link #spanify(Root, TraceContext)} to override the parent.\n+     * Used in {@link #spanify} to override the parent.\n      */\n     @Nullable\n     private TraceContext activeContextOfDirectParent;\n     private long deactivationTimestamp = -1;\n     private boolean isSpan;\n+    /**\n+     * @see co.elastic.apm.agent.impl.transaction.Span#childIds", "originalCommit": "13f01b121806fa09e33003b90df2eb4c7f1d8338", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f40721206b8420474d25b7af0a600253835f5ffb", "chunk": "diff --git a/apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/CallTree.java b/apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/CallTree.java\nindex 6b1a01b7c..28c837f10 100644\n--- a/apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/CallTree.java\n+++ b/apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/CallTree.java\n\n@@ -79,8 +79,9 @@ public class CallTree implements Recyclable {\n     private TraceContext activeContextOfDirectParent;\n     private long deactivationTimestamp = -1;\n     private boolean isSpan;\n+    private int depth;\n     /**\n-     * @see co.elastic.apm.agent.impl.transaction.Span#childIds\n+     * @see co.elastic.apm.agent.impl.transaction.AbstractSpan#childIds\n      */\n     @Nullable\n     private LongList childIds;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI5NjQ2Nw==", "url": "https://github.com/elastic/apm-agent-java/pull/1117#discussion_r415296467", "bodyText": "Doesn't worth pooling?", "author": "eyalkoren", "createdAt": "2020-04-26T12:15:57Z", "path": "apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/CallTree.java", "diffHunk": "@@ -391,6 +414,25 @@ public void resetState() {\n         }\n     }\n \n+    public void addChildId(long id) {\n+        if (childIds == null) {\n+            childIds = new LongList();", "originalCommit": "13f01b121806fa09e33003b90df2eb4c7f1d8338", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU2MTQzMg==", "url": "https://github.com/elastic/apm-agent-java/pull/1117#discussion_r415561432", "bodyText": "Not really. Lists are quite tricky to pool as they can have vastly different sizes. The danger is that over time, all lists in the pool will be quite large even though there are only few that actually contain a lot of elements.\nJudging from the benchmarks, the allocations caused by the inferred spans processing increase by 10%. That seems reasonable and it's definitely not the major source of allocations.", "author": "felixbarny", "createdAt": "2020-04-27T07:04:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI5NjQ2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "f40721206b8420474d25b7af0a600253835f5ffb", "chunk": "diff --git a/apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/CallTree.java b/apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/CallTree.java\nindex 6b1a01b7c..28c837f10 100644\n--- a/apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/CallTree.java\n+++ b/apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/CallTree.java\n\n@@ -433,6 +457,10 @@ public class CallTree implements Recyclable {\n         other.childIds = null;\n     }\n \n+    public int getDepth() {\n+        return depth;\n+    }\n+\n     /**\n      * A special kind of a {@link CallTree} node which represents the root of the call tree.\n      * This acts as the interface to the outside to add new nodes to the tree or to update existing ones by\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI5OTUwOQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1117#discussion_r415299509", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"   bbbb b      \",\n          \n          \n            \n                        \" a aaaa aa a a \",\n          \n          \n            \n                        \"1 2    2  3 3 1\"\n          \n          \n            \n                        \"   bbbb b      \",\n          \n          \n            \n                        \" a aaaa a a a \",\n          \n          \n            \n                        \"1 2    2 3 3 1\"\n          \n      \n    \n    \n  \n\nJust to make sure that one measurement is enough", "author": "eyalkoren", "createdAt": "2020-04-26T12:30:58Z", "path": "apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/CallTreeTest.java", "diffHunk": "@@ -262,6 +265,30 @@ void testDectivationBeforeEnd() throws Exception {\n         });\n     }\n \n+    /*\n+     * [1            ]    [1            ]\n+     *  [a          ]      [a          ]\n+     *   [2   ]  [3]        [b    ] [3]   <- b is supposed to stealChildIdsFom(a)\n+     *    [b   ]            [2   ]           however, it should only steal 2, not 3\n+     */\n+    @Test\n+    void testDectivationBeforeEnd2() throws Exception {\n+        assertCallTree(new String[]{\n+            \"   bbbb b      \",\n+            \" a aaaa aa a a \",\n+            \"1 2    2  3 3 1\"", "originalCommit": "13f01b121806fa09e33003b90df2eb4c7f1d8338", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU2MTQ1Mw==", "url": "https://github.com/elastic/apm-agent-java/pull/1117#discussion_r415561453", "bodyText": "Hm, that doesn't work because b is still considered the top of the stack at the time 3 gets activated.", "author": "felixbarny", "createdAt": "2020-04-27T07:04:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI5OTUwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU3ODg3Mw==", "url": "https://github.com/elastic/apm-agent-java/pull/1117#discussion_r415578873", "bodyText": "Why isn't that enough, if you know that activation of 3 happens after deactivation of 2 and you know that b cannot be a (direct or indirect) child of 3?", "author": "eyalkoren", "createdAt": "2020-04-27T07:34:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI5OTUwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU5MDQwNQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1117#discussion_r415590405", "bodyText": "Because of situations like these:\n aa  aa \n1  22  1\n\nWe have to add each activation to the childIds of the current top of the stack.\nHowever, it leads to errors in situations like these:\n bbb      \n aaa aa a \n1   2  2 1\n\nAs 2 is falsely declared a child of b when it's actually a child of a. Currently not sure how to fix it without introducing regressions.", "author": "felixbarny", "createdAt": "2020-04-27T07:52:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI5OTUwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk3NjAxNA==", "url": "https://github.com/elastic/apm-agent-java/pull/1117#discussion_r415976014", "bodyText": "I think I've managed to fix it", "author": "felixbarny", "createdAt": "2020-04-27T16:45:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI5OTUwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "f40721206b8420474d25b7af0a600253835f5ffb", "chunk": "diff --git a/apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/CallTreeTest.java b/apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/CallTreeTest.java\nindex 92a1e6f89..c0607011f 100644\n--- a/apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/CallTreeTest.java\n+++ b/apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/CallTreeTest.java\n\n@@ -266,29 +272,181 @@ class CallTreeTest {\n     }\n \n     /*\n-     * [1            ]    [1            ]\n-     *  [a          ]      [a          ]\n-     *   [2   ]  [3]        [b    ] [3]   <- b is supposed to stealChildIdsFom(a)\n-     *    [b   ]            [2   ]           however, it should only steal 2, not 3\n+     * [1           ]    [1           ]\n+     *  [a         ]      [a         ]\n+     *   [2   ] [3]        [b    ][3]   <- b is supposed to stealChildIdsFom(a)\n+     *    [b   ]           [2   ]          however, it should only steal 2, not 3\n      */\n     @Test\n     void testDectivationBeforeEnd2() throws Exception {\n         assertCallTree(new String[]{\n-            \"   bbbb b      \",\n-            \" a aaaa aa a a \",\n-            \"1 2    2  3 3 1\"\n+            \"   bbbb b     \",\n+            \" a aaaa a a a \",\n+            \"1 2    2 3 3 1\"\n         }, new Object[][] {\n-            {\"a\",       9},\n+            {\"a\",       8},\n             {\"  b\",     5},\n         }, new Object[][] {\n-            {\"1\",       14},\n-            {\"  a\",     12},\n+            {\"1\",       13},\n+            {\"  a\",     11},\n             {\"    b\",    6},\n             {\"      2\",  5},\n             {\"    3\",    2},\n         });\n     }\n \n+    /*\n+     * [1       ]\n+     *  [a     ]\n+     *   [b][2]\n+     */\n+    @Test\n+    void testActivationAfterMethodEnds() throws Exception {\n+        assertCallTree(new String[]{\n+            \" bbb      \",\n+            \" aaa aa a \",\n+            \"1   2  2 1\"\n+        }, new Object[][] {\n+            {\"a\",       6},\n+            {\"  b\",     3},\n+        }, new Object[][] {\n+            {\"1\",       9},\n+            {\"  a\",     7},\n+            {\"    b\",   2},\n+            {\"    2\",   3}\n+        });\n+    }\n+\n+    /*\n+     * [1         ]\n+     *  [a][2    ]\n+     *  [b] [3  ]\n+     *       [c]\n+     */\n+    @Test\n+    void testNestedActivationAfterMethodEnds() throws Exception {\n+        Map<String, AbstractSpan<?>> spans = assertCallTree(new String[]{\n+            \" bbb        \",\n+            \" aaa  ccc   \",\n+            \"1   23   321\"\n+        }, new Object[][] {\n+            {\"a\",        3},\n+            {\"  b\",      3},\n+            {\"c\",        3},\n+        }, new Object[][] {\n+            {\"1\",       11},\n+            {\"  b\",      2, List.of(\"a\")},\n+            {\"  2\",      6},\n+            {\"    3\",    4},\n+            {\"      c\",  2}\n+        });\n+        assertThat(spans.get(\"b\").getChildIds().getSize()).isEqualTo(0);\n+    }\n+\n+    /*\n+     * [1           ]\n+     *  [a  ][3    ]\n+     *  [b  ] [4  ]\n+     *   [2]   [c]\n+     */\n+    @Test\n+    void testRegularActivationFollowedByNestedActivationAfterMethodEnds() throws Exception {\n+        assertCallTree(new String[]{\n+            \"   d          \",\n+            \" b b b        \",\n+            \" a a a  ccc   \",\n+            \"1 2 2 34   431\"\n+        }, new Object[][] {\n+            {\"a\",        3},\n+            {\"  b\",      3},\n+            {\"c\",        3},\n+        }, new Object[][] {\n+            {\"1\",       13},\n+            {\"  b\",      4, List.of(\"a\")},\n+            {\"    2\",    2},\n+            {\"  3\",      6},\n+            {\"    4\",    4},\n+            {\"      c\",  2}\n+        });\n+    }\n+\n+    /*\n+     * [1           ]\n+     *  [a         ]\n+     *   [b][2    ]\n+     *       [3  ]\n+     *        [c]\n+     */\n+    @Test\n+    void testNestedActivationAfterMethodEnds2() throws Exception {\n+        Map<String, AbstractSpan<?>> spans = assertCallTree(new String[]{\n+            \"  bbb  ccc    \",\n+            \" aaaa  aaa  a \",\n+            \"1    23   32 1\"\n+        }, new Object[][]{\n+            {\"a\", 8},\n+            {\"  b\", 3},\n+            {\"  c\", 3},\n+        }, new Object[][]{\n+            {\"1\", 13},\n+            {\"  a\", 11},\n+            {\"    b\", 2},\n+            {\"  2\", 6},\n+            {\"    3\", 4},\n+            {\"      c\", 2}\n+        });\n+\n+        assertThat(spans.get(\"b\").getChildIds().getSize()).isEqualTo(0);\n+    }\n+\n+    /*\n+     * [1       ]\n+     *  [a]\n+     *     [2  ]\n+     *      [b]\n+     *      [c]\n+     */\n+    @Test\n+    void testActivationAfterMethodEnds2() throws Exception {\n+        assertCallTree(new String[]{\n+            \"     ccc  \",\n+            \" aaa bbb  \",\n+            \"1   2   21\"\n+        }, new Object[][] {\n+            {\"a\",     3},\n+            {\"b\",     3},\n+            {\"  c\",   3},\n+        }, new Object[][] {\n+            {\"1\",     9},\n+            {\"  a\",   2},\n+            {\"  2\",   4},\n+            {\"    c\", 2, List.of(\"b\")}\n+        });\n+    }\n+\n+    /*\n+     * [1     ]\n+     *  [a   ]\n+     *   [2 ]\n+     *    [b]\n+     */\n+    @Test\n+    void testActivationBeforeMethodStarts() throws Exception {\n+        assertCallTree(new String[]{\n+            \"   bbb   \",\n+            \" a aaa a \",\n+            \"1 2   2 1\"\n+        }, new Object[][] {\n+            {\"a\",       5},\n+            {\"  b\",     3},\n+        }, new Object[][] {\n+            {\"1\",       8},\n+            {\"  a\",     6},\n+            {\"    2\",   4},\n+            {\"      b\", 2}\n+        });\n+    }\n+\n     /*\n      * [1        ]    [1        ]\n      *  [a      ]      [a      ]\n"}}, {"oid": "f40721206b8420474d25b7af0a600253835f5ffb", "url": "https://github.com/elastic/apm-agent-java/commit/f40721206b8420474d25b7af0a600253835f5ffb", "message": "Fix another edge case", "committedDate": "2020-04-27T16:45:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA1ODY4Mg==", "url": "https://github.com/elastic/apm-agent-java/pull/1117#discussion_r420058682", "bodyText": "\ud83d\udcaa", "author": "eyalkoren", "createdAt": "2020-05-05T12:07:53Z", "path": "apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/CallTreeTest.java", "diffHunk": "@@ -266,29 +272,181 @@ void testDeactivationBeforeEnd() throws Exception {\n     }\n \n     /*\n-     * [1            ]    [1            ]\n-     *  [a          ]      [a          ]\n-     *   [2   ]  [3]        [b    ] [3]   <- b is supposed to stealChildIdsFom(a)\n-     *    [b   ]            [2   ]           however, it should only steal 2, not 3\n+     * [1           ]    [1           ]\n+     *  [a         ]      [a         ]\n+     *   [2   ] [3]        [b    ][3]   <- b is supposed to stealChildIdsFom(a)\n+     *    [b   ]           [2   ]          however, it should only steal 2, not 3\n      */\n     @Test\n     void testDectivationBeforeEnd2() throws Exception {\n         assertCallTree(new String[]{\n-            \"   bbbb b      \",\n-            \" a aaaa aa a a \",\n-            \"1 2    2  3 3 1\"\n+            \"   bbbb b     \",\n+            \" a aaaa a a a \",", "originalCommit": "f40721206b8420474d25b7af0a600253835f5ffb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c399c57957854319b92b95060210adc77741c653", "chunk": "diff --git a/apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/CallTreeTest.java b/apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/CallTreeTest.java\nindex c0607011f..5070f831d 100644\n--- a/apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/CallTreeTest.java\n+++ b/apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/CallTreeTest.java\n\n@@ -324,7 +324,7 @@ class CallTreeTest {\n      *       [c]\n      */\n     @Test\n-    void testNestedActivationAfterMethodEnds() throws Exception {\n+    void testNestedActivationAfterMethodEnds_RootChangesToC() throws Exception {\n         Map<String, AbstractSpan<?>> spans = assertCallTree(new String[]{\n             \" bbb        \",\n             \" aaa  ccc   \",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA3MDE2Mw==", "url": "https://github.com/elastic/apm-agent-java/pull/1117#discussion_r420070163", "bodyText": "How come 2 is not a child of a?", "author": "eyalkoren", "createdAt": "2020-05-05T12:28:51Z", "path": "apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/CallTreeTest.java", "diffHunk": "@@ -266,29 +272,181 @@ void testDeactivationBeforeEnd() throws Exception {\n     }\n \n     /*\n-     * [1            ]    [1            ]\n-     *  [a          ]      [a          ]\n-     *   [2   ]  [3]        [b    ] [3]   <- b is supposed to stealChildIdsFom(a)\n-     *    [b   ]            [2   ]           however, it should only steal 2, not 3\n+     * [1           ]    [1           ]\n+     *  [a         ]      [a         ]\n+     *   [2   ] [3]        [b    ][3]   <- b is supposed to stealChildIdsFom(a)\n+     *    [b   ]           [2   ]          however, it should only steal 2, not 3\n      */\n     @Test\n     void testDectivationBeforeEnd2() throws Exception {\n         assertCallTree(new String[]{\n-            \"   bbbb b      \",\n-            \" a aaaa aa a a \",\n-            \"1 2    2  3 3 1\"\n+            \"   bbbb b     \",\n+            \" a aaaa a a a \",\n+            \"1 2    2 3 3 1\"\n         }, new Object[][] {\n-            {\"a\",       9},\n+            {\"a\",       8},\n             {\"  b\",     5},\n         }, new Object[][] {\n-            {\"1\",       14},\n-            {\"  a\",     12},\n+            {\"1\",       13},\n+            {\"  a\",     11},\n             {\"    b\",    6},\n             {\"      2\",  5},\n             {\"    3\",    2},\n         });\n     }\n \n+    /*\n+     * [1       ]\n+     *  [a     ]\n+     *   [b][2]\n+     */\n+    @Test\n+    void testActivationAfterMethodEnds() throws Exception {\n+        assertCallTree(new String[]{\n+            \" bbb      \",\n+            \" aaa aa a \",\n+            \"1   2  2 1\"\n+        }, new Object[][] {\n+            {\"a\",       6},\n+            {\"  b\",     3},\n+        }, new Object[][] {\n+            {\"1\",       9},\n+            {\"  a\",     7},\n+            {\"    b\",   2},\n+            {\"    2\",   3}\n+        });\n+    }\n+\n+    /*\n+     * [1         ]\n+     *  [a][2    ]\n+     *  [b] [3  ]\n+     *       [c]\n+     */\n+    @Test\n+    void testNestedActivationAfterMethodEnds() throws Exception {\n+        Map<String, AbstractSpan<?>> spans = assertCallTree(new String[]{\n+            \" bbb        \",\n+            \" aaa  ccc   \",\n+            \"1   23   321\"\n+        }, new Object[][] {\n+            {\"a\",        3},\n+            {\"  b\",      3},\n+            {\"c\",        3},\n+        }, new Object[][] {\n+            {\"1\",       11},\n+            {\"  b\",      2, List.of(\"a\")},\n+            {\"  2\",      6},\n+            {\"    3\",    4},\n+            {\"      c\",  2}\n+        });\n+        assertThat(spans.get(\"b\").getChildIds().getSize()).isEqualTo(0);\n+    }\n+\n+    /*\n+     * [1           ]\n+     *  [a  ][3    ]\n+     *  [b  ] [4  ]\n+     *   [2]   [c]\n+     */\n+    @Test\n+    void testRegularActivationFollowedByNestedActivationAfterMethodEnds() throws Exception {\n+        assertCallTree(new String[]{\n+            \"   d          \",\n+            \" b b b        \",\n+            \" a a a  ccc   \",\n+            \"1 2 2 34   431\"\n+        }, new Object[][] {\n+            {\"a\",        3},\n+            {\"  b\",      3},\n+            {\"c\",        3},\n+        }, new Object[][] {\n+            {\"1\",       13},\n+            {\"  b\",      4, List.of(\"a\")},\n+            {\"    2\",    2},\n+            {\"  3\",      6},\n+            {\"    4\",    4},\n+            {\"      c\",  2}\n+        });\n+    }\n+\n+    /*\n+     * [1           ]\n+     *  [a         ]\n+     *   [b][2    ]\n+     *       [3  ]\n+     *        [c]\n+     */\n+    @Test\n+    void testNestedActivationAfterMethodEnds2() throws Exception {\n+        Map<String, AbstractSpan<?>> spans = assertCallTree(new String[]{\n+            \"  bbb  ccc    \",\n+            \" aaaa  aaa  a \",\n+            \"1    23   32 1\"\n+        }, new Object[][]{\n+            {\"a\", 8},\n+            {\"  b\", 3},\n+            {\"  c\", 3},\n+        }, new Object[][]{\n+            {\"1\", 13},\n+            {\"  a\", 11},\n+            {\"    b\", 2},\n+            {\"  2\", 6},", "originalCommit": "f40721206b8420474d25b7af0a600253835f5ffb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU3Mjg0Nw==", "url": "https://github.com/elastic/apm-agent-java/pull/1117#discussion_r420572847", "bodyText": "Wow, good catch! From now on, I call you the eagle eye. Or maybe Eyeal \ud83e\udd14\nSubmitting fix shortly that searches for common ancestors, instead of always adding the child_ids on the top of the stack", "author": "felixbarny", "createdAt": "2020-05-06T06:37:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA3MDE2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "c399c57957854319b92b95060210adc77741c653", "chunk": "diff --git a/apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/CallTreeTest.java b/apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/CallTreeTest.java\nindex c0607011f..5070f831d 100644\n--- a/apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/CallTreeTest.java\n+++ b/apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/CallTreeTest.java\n\n@@ -324,7 +324,7 @@ class CallTreeTest {\n      *       [c]\n      */\n     @Test\n-    void testNestedActivationAfterMethodEnds() throws Exception {\n+    void testNestedActivationAfterMethodEnds_RootChangesToC() throws Exception {\n         Map<String, AbstractSpan<?>> spans = assertCallTree(new String[]{\n             \" bbb        \",\n             \" aaa  ccc   \",\n"}}, {"oid": "c399c57957854319b92b95060210adc77741c653", "url": "https://github.com/elastic/apm-agent-java/commit/c399c57957854319b92b95060210adc77741c653", "message": "Search for common ancestors instead of adding to top of stack", "committedDate": "2020-05-06T06:59:08Z", "type": "commit"}, {"oid": "1d73f9381295d6d754ef229169d96ec86ef894dc", "url": "https://github.com/elastic/apm-agent-java/commit/1d73f9381295d6d754ef229169d96ec86ef894dc", "message": "Merge remote-tracking branch 'origin/master' into inferred-spans-successor-ids", "committedDate": "2020-05-06T07:00:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYyODk0Ng==", "url": "https://github.com/elastic/apm-agent-java/pull/1117#discussion_r420628946", "bodyText": "This might be problematic for the UI: elastic/kibana#62952 (comment)", "author": "felixbarny", "createdAt": "2020-05-06T08:36:36Z", "path": "apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/CallTreeTest.java", "diffHunk": "@@ -262,6 +271,210 @@ void testDectivationBeforeEnd() throws Exception {\n         });\n     }\n \n+    /*\n+     * [1           ]    [1           ]\n+     *  [a         ]      [a         ]\n+     *   [2   ] [3]        [b    ][3]   <- b is supposed to stealChildIdsFom(a)\n+     *    [b   ]           [2   ]          however, it should only steal 2, not 3\n+     */\n+    @Test\n+    void testDectivationBeforeEnd2() throws Exception {\n+        assertCallTree(new String[]{\n+            \"   bbbb b     \",\n+            \" a aaaa a a a \",\n+            \"1 2    2 3 3 1\"\n+        }, new Object[][] {\n+            {\"a\",       8},\n+            {\"  b\",     5},\n+        }, new Object[][] {\n+            {\"1\",       13},\n+            {\"  a\",     11},\n+            {\"    b\",    6},\n+            {\"      2\",  5},\n+            {\"    3\",    2},\n+        });\n+    }\n+\n+    /*\n+     * [1       ]\n+     *  [a     ]\n+     *   [b][2]\n+     */\n+    @Test\n+    void testActivationAfterMethodEnds() throws Exception {\n+        assertCallTree(new String[]{\n+            \" bbb      \",\n+            \" aaa aa a \",\n+            \"1   2  2 1\"\n+        }, new Object[][] {\n+            {\"a\",       6},\n+            {\"  b\",     3},\n+        }, new Object[][] {\n+            {\"1\",       9},\n+            {\"  a\",     7},\n+            {\"    b\",   2},\n+            {\"    2\",   3}\n+        });\n+    }\n+\n+    /*\n+     * [1         ]\n+     *  [a][2    ]\n+     *  [b] [3  ]\n+     *       [c]\n+     */\n+    @Test\n+    void testNestedActivationAfterMethodEnds_RootChangesToC() throws Exception {\n+        Map<String, AbstractSpan<?>> spans = assertCallTree(new String[]{\n+            \" bbb        \",\n+            \" aaa  ccc   \",\n+            \"1   23   321\"\n+        }, new Object[][] {\n+            {\"a\",        3},\n+            {\"  b\",      3},\n+            {\"c\",        3},\n+        }, new Object[][] {\n+            {\"1\",       11},\n+            {\"  b\",      2, List.of(\"a\")},\n+            {\"  2\",      6},\n+            {\"    3\",    4},\n+            {\"      c\",  2}\n+        });\n+        assertThat(spans.get(\"b\").getChildIds().getSize()).isEqualTo(0);\n+    }\n+\n+    /*\n+     * [1           ]\n+     *  [a  ][3    ]\n+     *  [b  ] [4  ]\n+     *   [2]   [c]\n+     */\n+    @Test\n+    void testRegularActivationFollowedByNestedActivationAfterMethodEnds() throws Exception {\n+        assertCallTree(new String[]{\n+            \"   d          \",\n+            \" b b b        \",\n+            \" a a a  ccc   \",\n+            \"1 2 2 34   431\"\n+        }, new Object[][] {\n+            {\"a\",        3},\n+            {\"  b\",      3},\n+            {\"c\",        3},\n+        }, new Object[][] {\n+            {\"1\",       13},\n+            {\"  b\",      4, List.of(\"a\")},\n+            {\"    2\",    2},\n+            {\"  3\",      6},\n+            {\"    4\",    4},\n+            {\"      c\",  2}\n+        });\n+    }\n+\n+    /*\n+     * [1           ]\n+     *  [a         ]\n+     *   [b][2    ]\n+     *       [3  ]\n+     *        [c]\n+     */\n+    @Test\n+    void testNestedActivationAfterMethodEnds_CommonAncestorA() throws Exception {\n+        Map<String, AbstractSpan<?>> spans = assertCallTree(new String[]{\n+            \"  bbb  ccc    \",\n+            \" aaaa  aaa  a \",\n+            \"1    23   32 1\"\n+        }, new Object[][]{\n+            {\"a\",   8},\n+            {\"  b\", 3},\n+            {\"  c\", 3},\n+        }, new Object[][]{\n+            {\"1\",        13},\n+            {\"  a\",      11},\n+            {\"    b\",     2},\n+            {\"    2\",     6},\n+            {\"      3\",   4},\n+            {\"        c\", 2}\n+        });\n+\n+        // this is empty but not null because a has stolen the child ids from b\n+        assertThat(spans.get(\"b\").getChildIds().getSize()).isEqualTo(0);\n+        assertThat(spans.get(\"c\").getChildIds()).isNull();\n+        // has both 2 and 3 as child_ids, even though only 2 is a direct child", "originalCommit": "1d73f9381295d6d754ef229169d96ec86ef894dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5ODE4Mw==", "url": "https://github.com/elastic/apm-agent-java/pull/1117#discussion_r423498183", "bodyText": "Fixed it", "author": "felixbarny", "createdAt": "2020-05-12T06:46:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYyODk0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "5b4ff72ee80558c5af456b642cff87ec42c2a0ab", "chunk": "diff --git a/apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/CallTreeTest.java b/apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/CallTreeTest.java\nindex 5070f831d..74fbb6e29 100644\n--- a/apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/CallTreeTest.java\n+++ b/apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/CallTreeTest.java\n\n@@ -371,36 +371,36 @@ class CallTreeTest {\n     }\n \n     /*\n-     * [1           ]\n-     *  [a         ]\n-     *   [b][2    ]\n-     *       [3  ]\n-     *        [c]\n+     * [1             ]\n+     *  [a           ]\n+     *   [b  ][3    ]\n+     *    [2]  [4  ]\n+     *          [c]\n      */\n     @Test\n     void testNestedActivationAfterMethodEnds_CommonAncestorA() throws Exception {\n         Map<String, AbstractSpan<?>> spans = assertCallTree(new String[]{\n-            \"  bbb  ccc    \",\n-            \" aaaa  aaa  a \",\n-            \"1    23   32 1\"\n+            \"  b b b  ccc    \",\n+            \" aa a a  aaa  a \",\n+            \"1  2 2 34   43 1\"\n         }, new Object[][]{\n             {\"a\",   8},\n             {\"  b\", 3},\n             {\"  c\", 3},\n         }, new Object[][]{\n-            {\"1\",        13},\n-            {\"  a\",      11},\n-            {\"    b\",     2},\n-            {\"    2\",     6},\n-            {\"      3\",   4},\n+            {\"1\",        15},\n+            {\"  a\",      13},\n+            {\"    b\",     4},\n+            {\"      2\",   2},\n+            {\"    3\",     6},\n+            {\"      4\",   4},\n             {\"        c\", 2}\n         });\n \n-        // this is empty but not null because a has stolen the child ids from b\n-        assertThat(spans.get(\"b\").getChildIds().getSize()).isEqualTo(0);\n+        assertThat(spans.get(\"b\").getChildIds().toArray()).containsExactly(spans.get(\"2\").getTraceContext().getId().readLong(0));\n         assertThat(spans.get(\"c\").getChildIds()).isNull();\n-        // has both 2 and 3 as child_ids, even though only 2 is a direct child\n-        assertThat(spans.get(\"a\").getChildIds().getSize()).isEqualTo(2);\n+        // only has 3 as a child as 4 is a nested activation\n+        assertThat(spans.get(\"a\").getChildIds().toArray()).containsExactly(spans.get(\"3\").getTraceContext().getId().readLong(0));\n     }\n \n     /*\n"}}, {"oid": "dbba7b99755cdc73e3f64978b53ca5b7918522b9", "url": "https://github.com/elastic/apm-agent-java/commit/dbba7b99755cdc73e3f64978b53ca5b7918522b9", "message": "Merge remote-tracking branch 'origin/master' into inferred-spans-successor-ids", "committedDate": "2020-05-07T07:30:38Z", "type": "commit"}, {"oid": "5b4ff72ee80558c5af456b642cff87ec42c2a0ab", "url": "https://github.com/elastic/apm-agent-java/commit/5b4ff72ee80558c5af456b642cff87ec42c2a0ab", "message": "Exclude nested activations in child_ids", "committedDate": "2020-05-07T08:04:59Z", "type": "commit"}, {"oid": "11e4acef691c69c8b2c863fbd6ab2fa5f3546180", "url": "https://github.com/elastic/apm-agent-java/commit/11e4acef691c69c8b2c863fbd6ab2fa5f3546180", "message": "Fix test\n\n- speed up stealActiveChildIds by adding a set of active spans", "committedDate": "2020-05-07T10:20:40Z", "type": "commit"}, {"oid": "4fa34a46acac3373fd4cbee05971dff54ba08c92", "url": "https://github.com/elastic/apm-agent-java/commit/4fa34a46acac3373fd4cbee05971dff54ba08c92", "message": "Merge remote-tracking branch 'origin/master' into inferred-spans-successor-ids", "committedDate": "2020-05-07T11:19:50Z", "type": "commit"}, {"oid": "9a388c36e695566aa6fb79a2113d30161f1c0b5e", "url": "https://github.com/elastic/apm-agent-java/commit/9a388c36e695566aa6fb79a2113d30161f1c0b5e", "message": "Avoid calling Java 8 APIs", "committedDate": "2020-05-07T11:29:04Z", "type": "commit"}, {"oid": "ca6f7aeb09753a56b3c151448bac9903dcc50b09", "url": "https://github.com/elastic/apm-agent-java/commit/ca6f7aeb09753a56b3c151448bac9903dcc50b09", "message": "Delete TraceContextHolder (glitch while merging master)", "committedDate": "2020-05-07T11:42:06Z", "type": "commit"}, {"oid": "47f10f8b48dcb7d6bb0282eb5f506d93746f2e70", "url": "https://github.com/elastic/apm-agent-java/commit/47f10f8b48dcb7d6bb0282eb5f506d93746f2e70", "message": "Fix more edge cases\n\n- Adds internal profiling_inferred_spans_backup_diagnostic_files option\n- Adds SamplingProfilerReplay to diagnose issues when creating inferred spans", "committedDate": "2020-05-11T10:38:08Z", "type": "commit"}, {"oid": "d62f441ad932a127e1c831ef67c553d2ecc2cfb0", "url": "https://github.com/elastic/apm-agent-java/commit/d62f441ad932a127e1c831ef67c553d2ecc2cfb0", "message": "Fix Javadoc error", "committedDate": "2020-05-11T12:26:08Z", "type": "commit"}, {"oid": "91597feeba856c58129a19c7997d6089f2ef48dc", "url": "https://github.com/elastic/apm-agent-java/commit/91597feeba856c58129a19c7997d6089f2ef48dc", "message": "Merge remote-tracking branch 'origin/master' into inferred-spans-successor-ids", "committedDate": "2020-05-12T08:21:06Z", "type": "commit"}]}