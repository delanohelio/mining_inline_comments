{"pr_number": 1150, "pr_title": "Add span_min_duration flag", "pr_createdAt": "2020-04-21T12:48:41Z", "pr_url": "https://github.com/elastic/apm-agent-java/pull/1150", "timeline": [{"oid": "692592c41790cd3bfa2b205a37fcce9c897d0999", "url": "https://github.com/elastic/apm-agent-java/commit/692592c41790cd3bfa2b205a37fcce9c897d0999", "message": "Add span_min_duration flag\n\ncloses #1094", "committedDate": "2020-04-21T12:47:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY5Nzc0Mw==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r412697743", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public <C> void setOutgoingTraceContextHeaders(C carrier, TextHeaderSetter<C> headerSetter) {\n          \n          \n            \n                public <C> void propagateTraceContext (C carrier, TextHeaderSetter<C> headerSetter) {\n          \n      \n    \n    \n  \n\n[minor] - Just a thought - not only the technical action of setting headers, but making it clear that this span is doing context propagation (hence the side effect of making the entire call stack non-discardable).", "author": "eyalkoren", "createdAt": "2020-04-22T06:13:11Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java", "diffHunk": "@@ -435,4 +460,31 @@ public void decrementReferences() {\n \n     protected abstract void recycle();\n \n+    /**\n+     * Sets Trace context text headers, using this context as parent, on the provided carrier using the provided setter\n+     *\n+     * @param carrier      the text headers carrier\n+     * @param headerSetter a setter implementing the actual addition of headers to the headers carrier\n+     * @param <C>          the header carrier type, for example - an HTTP request\n+     */\n+    public <C> void setOutgoingTraceContextHeaders(C carrier, TextHeaderSetter<C> headerSetter) {", "originalCommit": "692592c41790cd3bfa2b205a37fcce9c897d0999", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "75160feaf475a467ec347b32a98b24767d70cc52", "chunk": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java\nindex 61215e604..f1b8a7489 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java\n\n@@ -487,4 +562,26 @@ public abstract class AbstractSpan<T extends AbstractSpan<T>> extends TraceConte\n         return getTraceContext().setOutgoingTraceContextHeaders(carrier, headerSetter);\n     }\n \n+    /**\n+     * Sets this context as non-discardable,\n+     * meaning that {@link AbstractSpan#isDiscarded()} will return {@code false},\n+     * even if {@link AbstractSpan#requestDiscarding()} has been called.\n+     */\n+    public void setNonDiscardable() {\n+        getTraceContext().setNonDiscardable();\n+    }\n+\n+    /**\n+     * Returns whether it's possible to discard this span.\n+     *\n+     * @return {@code true}, if it's safe to discard the span, {@code false} otherwise.\n+     */\n+    public boolean isDiscardable() {\n+        return getTraceContext().isDiscardable();\n+    }\n+\n+    public boolean isSampled() {\n+        return getTraceContext().isSampled();\n+    }\n+\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcwMjAwOA==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r412702008", "bodyText": "[major] if possible, we should only expose this on AbstractSpan and make the TraceContext implementation package private (meaning - removing it from this interface). Now that we allow discarding spans, if there's anything that uses the TraceContext implementation directly, our traces will break once spans leading to them are discarded and it will be very difficult to debug.", "author": "eyalkoren", "createdAt": "2020-04-22T06:22:50Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContextHolder.java", "diffHunk": "@@ -147,14 +146,43 @@ public boolean isExit() {\n         return isExit;\n     }\n \n-    public void setDiscard(boolean discard) {\n-        getTraceContext().setDiscard(discard);\n+    /**\n+     * Sets this context as non-discardable,\n+     * meaning that {@link AbstractSpan#isDiscard()} will return {@code false},\n+     * even if {@link AbstractSpan#requestDiscarding()} has been called.\n+     */\n+    public void setNonDiscardable() {\n+        getTraceContext().setNonDiscardable();\n     }\n \n-    public boolean isDiscard() {\n-        return getTraceContext().isDiscard();\n+    /**\n+     * Returns whether it's possible to discard this span.\n+     *\n+     * @return {@code true}, if it's safe to discard the span, {@code false} otherwise.\n+     */\n+    public boolean isDiscardable() {\n+        return getTraceContext().isDiscardable();\n     }\n \n+    /**\n+     * Sets Trace context text headers, using this context as parent, on the provided carrier using the provided setter\n+     *\n+     * @param carrier      the text headers carrier\n+     * @param headerSetter a setter implementing the actual addition of headers to the headers carrier\n+     * @param <C>          the header carrier type, for example - an HTTP request\n+     */\n+    public abstract <C> void setOutgoingTraceContextHeaders(C carrier, TextHeaderSetter<C> headerSetter);", "originalCommit": "692592c41790cd3bfa2b205a37fcce9c897d0999", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc1MTY4MA==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r412751680", "bodyText": "I've tried that but it doesn't seem feasible as we allow to activate a TraceContextHolder and we want to be able to do tracer.getActive().setOutgoingTraceContextHeaders. This is needed for the public API and the OpenTracing API bridge, currently.", "author": "felixbarny", "createdAt": "2020-04-22T07:48:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcwMjAwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU1MTgwMQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r413551801", "bodyText": "Do you think it is problematic to allow that it OP and API only if trace.getActive is instanceof AbstractSpan?\nIf you don't want to introduce this restriction, I would at least add a very clear javadoc warning saying that implementations are not equal and the AbstractSpan overload should be preferred whenever possible.", "author": "eyalkoren", "createdAt": "2020-04-23T06:46:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcwMjAwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg1OTE5MA==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r413859190", "bodyText": "It required some refactoring but I've managed to remove TraceContextHolder. Now TraceContext#setOutgoingTraceContextHeaders is package private.", "author": "felixbarny", "createdAt": "2020-04-23T14:45:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcwMjAwOA=="}], "type": "inlineReview", "revised_code": {"commit": "f5d695f69cc9860ef429711ca7225d796cd973ca", "chunk": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContextHolder.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContextHolder.java\nindex b6781e0af..202ec053e 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContextHolder.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContextHolder.java\n\n@@ -148,7 +148,7 @@ public abstract class TraceContextHolder<T extends TraceContextHolder> implement\n \n     /**\n      * Sets this context as non-discardable,\n-     * meaning that {@link AbstractSpan#isDiscard()} will return {@code false},\n+     * meaning that {@link AbstractSpan#isDiscarded()} will return {@code false},\n      * even if {@link AbstractSpan#requestDiscarding()} has been called.\n      */\n     public void setNonDiscardable() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcyMTk4MQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r412721981", "bodyText": "It will be great to get rid of this state, just make sure that the combination of discardRequested, discardable  and sampled provide the same meaning as noop.", "author": "eyalkoren", "createdAt": "2020-04-22T07:01:21Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Transaction.java", "diffHunk": "@@ -79,11 +79,6 @@\n     @Nullable\n     private String result;\n \n-    /**\n-     * Noop transactions won't be reported at all, in contrast to non-sampled transactions.\n-     */\n-    private boolean noop;", "originalCommit": "692592c41790cd3bfa2b205a37fcce9c897d0999", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg2MDQ4MQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r413860481", "bodyText": "It wasn't equivalent. I've reverted the removal of the noop flag. It's also something only needed for the OT API... So maybe remove in a dedicated PR but this one changes too much already.", "author": "felixbarny", "createdAt": "2020-04-23T14:46:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcyMTk4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "f5d695f69cc9860ef429711ca7225d796cd973ca", "chunk": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Transaction.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Transaction.java\nindex 51e1a4f99..6c07912ff 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Transaction.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Transaction.java\n\n@@ -79,6 +80,11 @@ public class Transaction extends AbstractSpan<Transaction> {\n     @Nullable\n     private String result;\n \n+    /**\n+     * Noop transactions won't be reported at all, in contrast to non-sampled transactions.\n+     */\n+    private boolean noop;\n+\n     /**\n      * Keyword of specific relevance in the service's domain (eg:  'request', 'backgroundjob')\n      * (Required)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcyMzI1NA==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r412723254", "bodyText": "Add tests for Errors and for non-sampled transactions", "author": "eyalkoren", "createdAt": "2020-04-22T07:03:36Z", "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.impl;\n+\n+import co.elastic.apm.agent.MockReporter;\n+import co.elastic.apm.agent.MockTracer;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.HashMap;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class DiscardSpanTest {", "originalCommit": "692592c41790cd3bfa2b205a37fcce9c897d0999", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f5d695f69cc9860ef429711ca7225d796cd973ca", "chunk": "diff --git a/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java b/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java\nindex e9115102d..f32edd0d3 100644\n--- a/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java\n+++ b/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java\n\n@@ -26,6 +26,7 @@ package co.elastic.apm.agent.impl;\n \n import co.elastic.apm.agent.MockReporter;\n import co.elastic.apm.agent.MockTracer;\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n import co.elastic.apm.agent.impl.transaction.Span;\n import co.elastic.apm.agent.impl.transaction.Transaction;\n import org.junit.jupiter.api.AfterEach;\n"}}, {"oid": "f5d695f69cc9860ef429711ca7225d796cd973ca", "url": "https://github.com/elastic/apm-agent-java/commit/f5d695f69cc9860ef429711ca7225d796cd973ca", "message": "Track number of dropped fast spans\n\n- More testing\n- Fixes for interactions of transaction_max_spans and span_min_duration\n- Revert removing noop", "committedDate": "2020-04-22T17:15:06Z", "type": "commit"}, {"oid": "8a44c86fa42a158ffedd69d699e69029ea2c7ccc", "url": "https://github.com/elastic/apm-agent-java/commit/8a44c86fa42a158ffedd69d699e69029ea2c7ccc", "message": "Make only AbstractSpan de/activate-able\n\n- TraceContext can't be de/activated anymore, only AbstractSpans\n  - Removes lots of baggage in the internal API\n  - This was only used to reduce (but not avoid) allocations when using the OpenTracing API bridge\n  - Historically, activating a TraceContext was also needed when activating an ended span.\n    Nowadays, we use reference counting to determine whether it's safe to recycle a span rather than recycling after it's ended and serialized.\n- Avoids context propagation directly via TraceContext which would not mark the span as non-discardable\n- Makes Spans used in OT API bridge non-recyclable\n  - Previously, TraceContext has been used for finished spans\n  - Now, TraceContext can't be activated anymore,\n    thus spans are GC'd rather than recycled so that OT spans can be activated after they have been finished", "committedDate": "2020-04-23T09:18:51Z", "type": "commit"}, {"oid": "75160feaf475a467ec347b32a98b24767d70cc52", "url": "https://github.com/elastic/apm-agent-java/commit/75160feaf475a467ec347b32a98b24767d70cc52", "message": "Remove TraceContextHolder", "committedDate": "2020-04-23T14:15:03Z", "type": "commit"}, {"oid": "87bea92089c81fc2c3befdb9aeec1c0cf5e34707", "url": "https://github.com/elastic/apm-agent-java/commit/87bea92089c81fc2c3befdb9aeec1c0cf5e34707", "message": "Add docs for OT reference count handling", "committedDate": "2020-04-23T14:28:49Z", "type": "commit"}, {"oid": "2097ca46b793cb9ffa49a92e44b1c399a2223f2f", "url": "https://github.com/elastic/apm-agent-java/commit/2097ca46b793cb9ffa49a92e44b1c399a2223f2f", "message": "Merge remote-tracking branch 'origin/master' into span-duration-threshold", "committedDate": "2020-04-23T14:34:16Z", "type": "commit"}, {"oid": "b8970f4ef33df4e97283e98c49e6f9bf714fcce5", "url": "https://github.com/elastic/apm-agent-java/commit/b8970f4ef33df4e97283e98c49e6f9bf714fcce5", "message": "Fix JMS tests", "committedDate": "2020-04-23T15:01:56Z", "type": "commit"}, {"oid": "accc953bb3f819e1be35a48aff5bec702c67effa", "url": "https://github.com/elastic/apm-agent-java/commit/accc953bb3f819e1be35a48aff5bec702c67effa", "message": "Fix and test span_count", "committedDate": "2020-04-24T11:04:41Z", "type": "commit"}, {"oid": "c5ca34851a16e99ef4497d2677fbbd77f153c66f", "url": "https://github.com/elastic/apm-agent-java/commit/c5ca34851a16e99ef4497d2677fbbd77f153c66f", "message": "Fix tests", "committedDate": "2020-04-27T09:19:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcwNTQzNA==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r415705434", "bodyText": "If traceMethodThresholdMicros > 0 - log info about using a deprecated configuration, suggesting the switch to the new one.\nIf traceMethodThresholdMicros == 0 - check the span_min_duration config.\nThat is - if we decide to deprecate...", "author": "eyalkoren", "createdAt": "2020-04-27T10:43:36Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/methodmatching/TraceMethodInstrumentation.java", "diffHunk": "@@ -97,8 +93,8 @@ public static void onMethodExit(@Advice.Local(\"span\") @Nullable AbstractSpan<?>\n             final long endTime = span.getTraceContext().getClock().getEpochMicros();\n             if (span instanceof Span) {\n                 long durationMicros = endTime - span.getTimestamp();\n-                if (traceMethodThresholdMicros <= 0 || durationMicros >= traceMethodThresholdMicros || t != null) {\n-                    span.setDiscard(false);\n+                if (traceMethodThresholdMicros > 0 && durationMicros < traceMethodThresholdMicros && t == null) {", "originalCommit": "c5ca34851a16e99ef4497d2677fbbd77f153c66f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk5OTEzMw==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r417999133", "bodyText": "Removed the deprecated flag (see #1150 (comment)). The span_min_duration flag is checked in ElasticApmTracer#endSpan", "author": "felixbarny", "createdAt": "2020-04-30T13:13:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcwNTQzNA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcyODczMg==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r415728732", "bodyText": "[minor]\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                void beforeActivate(ErrorCapture error) throws Throwable;\n          \n          \n            \n                void onActivate(ErrorCapture error) throws Throwable;\n          \n      \n    \n    \n  \n\nThere is no meaning for before and after in case of errors, as they are not added/removed to/from a stack, right?", "author": "eyalkoren", "createdAt": "2020-04-27T11:22:09Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ActivationListener.java", "diffHunk": "@@ -24,34 +24,50 @@\n  */\n package co.elastic.apm.agent.impl;\n \n+import co.elastic.apm.agent.impl.error.ErrorCapture;\n import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n-import co.elastic.apm.agent.impl.transaction.TraceContextHolder;\n \n /**\n- * A callback for {@link TraceContextHolder} activation and deactivaiton events\n+ * A callback for {@link AbstractSpan} and {@link ErrorCapture} activation and deactivaiton events\n  * <p>\n  * The constructor can optionally have a {@link ElasticApmTracer} parameter.\n  * </p>\n  */\n public interface ActivationListener {\n \n     /**\n-     * A callback for {@link TraceContextHolder#activate()}\n+     * A callback for {@link AbstractSpan#activate()}\n      *\n-     * @param context the {@link TraceContextHolder} which is being activated\n+     * @param span the {@link AbstractSpan} that is being activated\n      * @throws Throwable if there was an error while calling this method\n      */\n-    void beforeActivate(TraceContextHolder<?> context) throws Throwable;\n+    void beforeActivate(AbstractSpan<?> span) throws Throwable;\n \n     /**\n-     * A callback for {@link TraceContextHolder#deactivate()}\n+     * A callback for {@link ErrorCapture#activate()}\n+     *\n+     * @param error the {@link ErrorCapture} that is being activated\n+     * @throws Throwable if there was an error while calling this method\n+     */\n+    void beforeActivate(ErrorCapture error) throws Throwable;", "originalCommit": "c5ca34851a16e99ef4497d2677fbbd77f153c66f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk5OTcyNw==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r417999727", "bodyText": "Yes, that's true. I chose this name to be consistent with spans, but I don't have a strong option about it.", "author": "felixbarny", "createdAt": "2020-04-30T13:14:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcyODczMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcyODk2Nw==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r415728967", "bodyText": "[minor]\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                void afterDeactivate(ErrorCapture deactivatedError) throws Throwable;\n          \n          \n            \n                void onDeactivate(ErrorCapture deactivatedError) throws Throwable;", "author": "eyalkoren", "createdAt": "2020-04-27T11:22:36Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ActivationListener.java", "diffHunk": "@@ -24,34 +24,50 @@\n  */\n package co.elastic.apm.agent.impl;\n \n+import co.elastic.apm.agent.impl.error.ErrorCapture;\n import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n-import co.elastic.apm.agent.impl.transaction.TraceContextHolder;\n \n /**\n- * A callback for {@link TraceContextHolder} activation and deactivaiton events\n+ * A callback for {@link AbstractSpan} and {@link ErrorCapture} activation and deactivaiton events\n  * <p>\n  * The constructor can optionally have a {@link ElasticApmTracer} parameter.\n  * </p>\n  */\n public interface ActivationListener {\n \n     /**\n-     * A callback for {@link TraceContextHolder#activate()}\n+     * A callback for {@link AbstractSpan#activate()}\n      *\n-     * @param context the {@link TraceContextHolder} which is being activated\n+     * @param span the {@link AbstractSpan} that is being activated\n      * @throws Throwable if there was an error while calling this method\n      */\n-    void beforeActivate(TraceContextHolder<?> context) throws Throwable;\n+    void beforeActivate(AbstractSpan<?> span) throws Throwable;\n \n     /**\n-     * A callback for {@link TraceContextHolder#deactivate()}\n+     * A callback for {@link ErrorCapture#activate()}\n+     *\n+     * @param error the {@link ErrorCapture} that is being activated\n+     * @throws Throwable if there was an error while calling this method\n+     */\n+    void beforeActivate(ErrorCapture error) throws Throwable;\n+\n+    /**\n+     * A callback for {@link AbstractSpan#deactivate()}\n      * <p>\n      * Note: the corresponding span may already be {@link AbstractSpan#end() ended} and {@link AbstractSpan#resetState() recycled}.\n-     * That's why there is no {@link TraceContextHolder} parameter.\n+     * That's why there is no {@link AbstractSpan} parameter.\n      * </p>\n      *\n-     * @param deactivatedContext the context which has just been deactivated\n+     * @param deactivatedSpan the context that has just been deactivated\n+     * @throws Throwable if there was an error while calling this method\n+     */\n+    void afterDeactivate(AbstractSpan<?> deactivatedSpan) throws Throwable;\n+\n+    /**\n+     * A callback for {@link ErrorCapture#deactivate()}\n+     *\n+     * @param deactivatedError the error that has just been deactivated\n      * @throws Throwable if there was an error while calling this method\n      */\n-    void afterDeactivate(TraceContextHolder<?> deactivatedContext) throws Throwable;\n+    void afterDeactivate(ErrorCapture deactivatedError) throws Throwable;", "originalCommit": "c5ca34851a16e99ef4497d2677fbbd77f153c66f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTczMzgzOA==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r415733838", "bodyText": "[minor] same - moving the listeners iteration", "author": "eyalkoren", "createdAt": "2020-04-27T11:30:36Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java", "diffHunk": "@@ -334,26 +406,56 @@ public final void end(long epochMicros) {\n \n     protected abstract void afterEnd();\n \n-    @Override\n-    public boolean isChildOf(TraceContextHolder other) {\n-        return getTraceContext().isChildOf(other);\n-    }\n-\n-    @Override\n     public T activate() {\n         incrementReferences();\n-        return super.activate();\n+        List<ActivationListener> activationListeners = tracer.getActivationListeners();\n+        for (int i = 0; i < activationListeners.size(); i++) {\n+            try {\n+                activationListeners.get(i).beforeActivate(this);\n+            } catch (Error e) {\n+                throw e;\n+            } catch (Throwable t) {\n+                logger.warn(\"Exception while calling {}#beforeActivate\", activationListeners.get(i).getClass().getSimpleName(), t);\n+            }\n+        }\n+        tracer.activate(this);\n+        return (T) this;\n     }\n \n-    @Override\n     public T deactivate() {\n         try {\n-            return super.deactivate();\n+            tracer.deactivate(this);\n+            List<ActivationListener> activationListeners = tracer.getActivationListeners();", "originalCommit": "c5ca34851a16e99ef4497d2677fbbd77f153c66f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "94c92159d99f57d67d6f2ca0aa16e373082f1684", "chunk": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java\nindex f1b8a7489..c18605146 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java\n\n@@ -407,39 +405,13 @@ public abstract class AbstractSpan<T extends AbstractSpan<T>> implements Recycla\n     protected abstract void afterEnd();\n \n     public T activate() {\n-        incrementReferences();\n-        List<ActivationListener> activationListeners = tracer.getActivationListeners();\n-        for (int i = 0; i < activationListeners.size(); i++) {\n-            try {\n-                activationListeners.get(i).beforeActivate(this);\n-            } catch (Error e) {\n-                throw e;\n-            } catch (Throwable t) {\n-                logger.warn(\"Exception while calling {}#beforeActivate\", activationListeners.get(i).getClass().getSimpleName(), t);\n-            }\n-        }\n         tracer.activate(this);\n         return (T) this;\n     }\n \n     public T deactivate() {\n-        try {\n-            tracer.deactivate(this);\n-            List<ActivationListener> activationListeners = tracer.getActivationListeners();\n-            for (int i = 0; i < activationListeners.size(); i++) {\n-                try {\n-                    // `this` is guaranteed to not be recycled yet as the reference count is only decremented after this method has executed\n-                    activationListeners.get(i).afterDeactivate(this);\n-                } catch (Error e) {\n-                    throw e;\n-                } catch (Throwable t) {\n-                    logger.warn(\"Exception while calling {}#afterDeactivate\", activationListeners.get(i).getClass().getSimpleName(), t);\n-                }\n-            }\n-            return (T) this;\n-        } finally {\n-            decrementReferences();\n-        }\n+        tracer.deactivate(this);\n+        return (T) this;\n     }\n \n     public Scope activateInScope() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTczNDQxOQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r415734419", "bodyText": "[minor] Wouldn't this iteration over listeners make more sense if done at the beginning of ElasticApmTracer#activate?", "author": "eyalkoren", "createdAt": "2020-04-27T11:31:31Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java", "diffHunk": "@@ -334,26 +406,56 @@ public final void end(long epochMicros) {\n \n     protected abstract void afterEnd();\n \n-    @Override\n-    public boolean isChildOf(TraceContextHolder other) {\n-        return getTraceContext().isChildOf(other);\n-    }\n-\n-    @Override\n     public T activate() {\n         incrementReferences();\n-        return super.activate();\n+        List<ActivationListener> activationListeners = tracer.getActivationListeners();", "originalCommit": "c5ca34851a16e99ef4497d2677fbbd77f153c66f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODAwMDU1NQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r418000555", "bodyText": "Yes, this way there's no chance to skip activation listeners by directly calling ElasticApmTracer#endSpan", "author": "felixbarny", "createdAt": "2020-04-30T13:16:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTczNDQxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "94c92159d99f57d67d6f2ca0aa16e373082f1684", "chunk": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java\nindex f1b8a7489..c18605146 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java\n\n@@ -407,39 +405,13 @@ public abstract class AbstractSpan<T extends AbstractSpan<T>> implements Recycla\n     protected abstract void afterEnd();\n \n     public T activate() {\n-        incrementReferences();\n-        List<ActivationListener> activationListeners = tracer.getActivationListeners();\n-        for (int i = 0; i < activationListeners.size(); i++) {\n-            try {\n-                activationListeners.get(i).beforeActivate(this);\n-            } catch (Error e) {\n-                throw e;\n-            } catch (Throwable t) {\n-                logger.warn(\"Exception while calling {}#beforeActivate\", activationListeners.get(i).getClass().getSimpleName(), t);\n-            }\n-        }\n         tracer.activate(this);\n         return (T) this;\n     }\n \n     public T deactivate() {\n-        try {\n-            tracer.deactivate(this);\n-            List<ActivationListener> activationListeners = tracer.getActivationListeners();\n-            for (int i = 0; i < activationListeners.size(); i++) {\n-                try {\n-                    // `this` is guaranteed to not be recycled yet as the reference count is only decremented after this method has executed\n-                    activationListeners.get(i).afterDeactivate(this);\n-                } catch (Error e) {\n-                    throw e;\n-                } catch (Throwable t) {\n-                    logger.warn(\"Exception while calling {}#afterDeactivate\", activationListeners.get(i).getClass().getSimpleName(), t);\n-                }\n-            }\n-            return (T) this;\n-        } finally {\n-            decrementReferences();\n-        }\n+        tracer.deactivate(this);\n+        return (T) this;\n     }\n \n     public Scope activateInScope() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTczNjM4MQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r415736381", "bodyText": "\ud83d\udc4d \ud83d\ude47\u200d\u2642\ufe0f", "author": "eyalkoren", "createdAt": "2020-04-27T11:35:00Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java", "diffHunk": "@@ -516,7 +527,7 @@ String getIncomingTraceParentHeader() {\n      * @param headerSetter a setter implementing the actual addition of headers to the headers carrier\n      * @param <C>          the header carrier type, for example - an HTTP request\n      */\n-    public <C> void setOutgoingTraceContextHeaders(C carrier, TextHeaderSetter<C> headerSetter) {\n+    <C> void setOutgoingTraceContextHeaders(C carrier, TextHeaderSetter<C> headerSetter) {", "originalCommit": "c5ca34851a16e99ef4497d2677fbbd77f153c66f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "94c92159d99f57d67d6f2ca0aa16e373082f1684", "chunk": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java\nindex 5f259a743..f182c67db 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java\n\n@@ -527,7 +527,7 @@ public class TraceContext implements Recyclable {\n      * @param headerSetter a setter implementing the actual addition of headers to the headers carrier\n      * @param <C>          the header carrier type, for example - an HTTP request\n      */\n-    <C> void setOutgoingTraceContextHeaders(C carrier, TextHeaderSetter<C> headerSetter) {\n+    <C> void propagateTraceContext(C carrier, TextHeaderSetter<C> headerSetter) {\n         headerSetter.setHeader(W3C_TRACE_PARENT_TEXTUAL_HEADER_NAME, getOutgoingTraceParentTextHeader().toString(), carrier);\n         if (coreConfiguration.isElasticTraceparentHeaderEnabled()) {\n             headerSetter.setHeader(ELASTIC_TRACE_PARENT_TEXTUAL_HEADER_NAME, getOutgoingTraceParentTextHeader().toString(), carrier);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTczNjc2Mw==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r415736763", "bodyText": "\ud83d\ude4f", "author": "eyalkoren", "createdAt": "2020-04-27T11:35:41Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java", "diffHunk": "@@ -537,7 +548,7 @@ String getIncomingTraceParentHeader() {\n      * @param <C>          the header carrier type, for example - a Kafka record\n      * @return true if Trace Context headers were set; false otherwise\n      */\n-    public <C> boolean setOutgoingTraceContextHeaders(C carrier, BinaryHeaderSetter<C> headerSetter) {\n+    <C> boolean setOutgoingTraceContextHeaders(C carrier, BinaryHeaderSetter<C> headerSetter) {", "originalCommit": "c5ca34851a16e99ef4497d2677fbbd77f153c66f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "94c92159d99f57d67d6f2ca0aa16e373082f1684", "chunk": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java\nindex 5f259a743..f182c67db 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java\n\n@@ -548,7 +548,7 @@ public class TraceContext implements Recyclable {\n      * @param <C>          the header carrier type, for example - a Kafka record\n      * @return true if Trace Context headers were set; false otherwise\n      */\n-    <C> boolean setOutgoingTraceContextHeaders(C carrier, BinaryHeaderSetter<C> headerSetter) {\n+    <C> boolean propagateTraceContext(C carrier, BinaryHeaderSetter<C> headerSetter) {\n         byte[] buffer = headerSetter.getFixedLengthByteArray(TRACE_PARENT_BINARY_HEADER_NAME, BINARY_FORMAT_EXPECTED_LENGTH);\n         if (buffer == null || buffer.length != BINARY_FORMAT_EXPECTED_LENGTH) {\n             logger.warn(\"Header setter {} failed to provide a byte buffer with the proper length. Allocating a buffer for each header.\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc0NDU2Nw==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r415744567", "bodyText": "?", "author": "eyalkoren", "createdAt": "2020-04-27T11:48:43Z", "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.impl;\n+\n+import co.elastic.apm.agent.MockReporter;\n+import co.elastic.apm.agent.MockTracer;\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.HashMap;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+public class DiscardSpanTest {\n+    private ElasticApmTracer tracer;\n+    private MockReporter reporter;\n+\n+    @BeforeEach\n+    void setUp() {\n+        reporter = new MockReporter();\n+        tracer = MockTracer.createRealTracer(reporter);\n+    }\n+\n+    @AfterEach\n+    void cleanupAndCheck() {\n+        reporter.assertRecycledAfterDecrementingReferences();\n+        tracer.stop();\n+    }\n+\n+    @Test\n+    void testContextPropagatingSpansAreNonDiscardable() {\n+        Transaction transaction = tracer.startRootTransaction(null);\n+        assertThat(transaction).isNotNull();\n+        try {\n+            Span span = transaction.createSpan();\n+            try {\n+                span.setOutgoingTraceContextHeaders(new HashMap<>(), TextHeaderMapAccessor.INSTANCE);\n+                assertThat(span.isDiscardable()).isFalse();\n+            } finally {\n+                span.end();\n+            }\n+        } finally {\n+            transaction.end();\n+        }\n+\n+        assertThat(transaction.getSpanCount().getTotal()).hasValue(1);\n+        assertThat(transaction.getSpanCount().getDropped()).hasValue(0);\n+        assertThat(transaction.getSpanCount().getReported()).hasValue(1);\n+    }\n+\n+    @Test\n+    void testErrorCapturingMakesSpansNonDiscardable() {\n+        when(tracer.getConfigurationRegistry().getConfig(CoreConfiguration.class).getTransactionMaxSpans()).thenReturn(2);", "originalCommit": "c5ca34851a16e99ef4497d2677fbbd77f153c66f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODAwMDcyMQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r418000721", "bodyText": "!", "author": "felixbarny", "createdAt": "2020-04-30T13:16:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc0NDU2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "94c92159d99f57d67d6f2ca0aa16e373082f1684", "chunk": "diff --git a/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java b/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java\nindex 729a3eeff..9af52dd32 100644\n--- a/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java\n+++ b/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java\n\n@@ -59,9 +59,9 @@ public class DiscardSpanTest {\n         Transaction transaction = tracer.startRootTransaction(null);\n         assertThat(transaction).isNotNull();\n         try {\n-            Span span = transaction.createSpan();\n+            Span span = transaction.createSpan().requestDiscarding();\n             try {\n-                span.setOutgoingTraceContextHeaders(new HashMap<>(), TextHeaderMapAccessor.INSTANCE);\n+                span.propagateTraceContext(new HashMap<>(), TextHeaderMapAccessor.INSTANCE);\n                 assertThat(span.isDiscardable()).isFalse();\n             } finally {\n                 span.end();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc0ODU1OA==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r415748558", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Span span = transaction.createSpan();\n          \n          \n            \n                        Span span = transaction.createSpan().requestDiscarding();", "author": "eyalkoren", "createdAt": "2020-04-27T11:54:54Z", "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.impl;\n+\n+import co.elastic.apm.agent.MockReporter;\n+import co.elastic.apm.agent.MockTracer;\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.HashMap;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+public class DiscardSpanTest {\n+    private ElasticApmTracer tracer;\n+    private MockReporter reporter;\n+\n+    @BeforeEach\n+    void setUp() {\n+        reporter = new MockReporter();\n+        tracer = MockTracer.createRealTracer(reporter);\n+    }\n+\n+    @AfterEach\n+    void cleanupAndCheck() {\n+        reporter.assertRecycledAfterDecrementingReferences();\n+        tracer.stop();\n+    }\n+\n+    @Test\n+    void testContextPropagatingSpansAreNonDiscardable() {\n+        Transaction transaction = tracer.startRootTransaction(null);\n+        assertThat(transaction).isNotNull();\n+        try {\n+            Span span = transaction.createSpan();", "originalCommit": "c5ca34851a16e99ef4497d2677fbbd77f153c66f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "94c92159d99f57d67d6f2ca0aa16e373082f1684", "chunk": "diff --git a/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java b/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java\nindex 729a3eeff..9af52dd32 100644\n--- a/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java\n+++ b/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java\n\n@@ -59,9 +59,9 @@ public class DiscardSpanTest {\n         Transaction transaction = tracer.startRootTransaction(null);\n         assertThat(transaction).isNotNull();\n         try {\n-            Span span = transaction.createSpan();\n+            Span span = transaction.createSpan().requestDiscarding();\n             try {\n-                span.setOutgoingTraceContextHeaders(new HashMap<>(), TextHeaderMapAccessor.INSTANCE);\n+                span.propagateTraceContext(new HashMap<>(), TextHeaderMapAccessor.INSTANCE);\n                 assertThat(span.isDiscardable()).isFalse();\n             } finally {\n                 span.end();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc0ODk5NQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r415748995", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Span parentSpan = transaction.createSpan();\n          \n          \n            \n                        Span parentSpan = transaction.createSpan().requestDiscarding();", "author": "eyalkoren", "createdAt": "2020-04-27T11:55:40Z", "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.impl;\n+\n+import co.elastic.apm.agent.MockReporter;\n+import co.elastic.apm.agent.MockTracer;\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.HashMap;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+public class DiscardSpanTest {\n+    private ElasticApmTracer tracer;\n+    private MockReporter reporter;\n+\n+    @BeforeEach\n+    void setUp() {\n+        reporter = new MockReporter();\n+        tracer = MockTracer.createRealTracer(reporter);\n+    }\n+\n+    @AfterEach\n+    void cleanupAndCheck() {\n+        reporter.assertRecycledAfterDecrementingReferences();\n+        tracer.stop();\n+    }\n+\n+    @Test\n+    void testContextPropagatingSpansAreNonDiscardable() {\n+        Transaction transaction = tracer.startRootTransaction(null);\n+        assertThat(transaction).isNotNull();\n+        try {\n+            Span span = transaction.createSpan();\n+            try {\n+                span.setOutgoingTraceContextHeaders(new HashMap<>(), TextHeaderMapAccessor.INSTANCE);\n+                assertThat(span.isDiscardable()).isFalse();\n+            } finally {\n+                span.end();\n+            }\n+        } finally {\n+            transaction.end();\n+        }\n+\n+        assertThat(transaction.getSpanCount().getTotal()).hasValue(1);\n+        assertThat(transaction.getSpanCount().getDropped()).hasValue(0);\n+        assertThat(transaction.getSpanCount().getReported()).hasValue(1);\n+    }\n+\n+    @Test\n+    void testErrorCapturingMakesSpansNonDiscardable() {\n+        when(tracer.getConfigurationRegistry().getConfig(CoreConfiguration.class).getTransactionMaxSpans()).thenReturn(2);\n+        Transaction transaction = tracer.startRootTransaction(null);\n+        assertThat(transaction).isNotNull();\n+        try {\n+            Span span = transaction.createSpan();\n+            try {\n+                span.requestDiscarding().appendToName(\"non-discardable\").captureException(new Exception());\n+                assertThat(span.isDiscardable()).isFalse();\n+            } finally {\n+                span.end();\n+            }\n+        } finally {\n+            transaction.end();\n+        }\n+        assertThat(reporter.getSpans().stream().map(Span::getNameAsString)).containsExactly(\"non-discardable\");\n+\n+        assertThat(transaction.getSpanCount().getTotal()).hasValue(1);\n+        assertThat(transaction.getSpanCount().getDropped()).hasValue(0);\n+        assertThat(transaction.getSpanCount().getReported()).hasValue(1);\n+    }\n+\n+    @Test\n+    void testParentsOfContextPropagatingSpansAreNonDiscardable() {\n+        Transaction transaction = tracer.startRootTransaction(null);\n+        assertThat(transaction).isNotNull();\n+        try {\n+            Span parentSpan = transaction.createSpan();", "originalCommit": "c5ca34851a16e99ef4497d2677fbbd77f153c66f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "94c92159d99f57d67d6f2ca0aa16e373082f1684", "chunk": "diff --git a/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java b/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java\nindex 729a3eeff..9af52dd32 100644\n--- a/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java\n+++ b/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java\n\n@@ -59,9 +59,9 @@ public class DiscardSpanTest {\n         Transaction transaction = tracer.startRootTransaction(null);\n         assertThat(transaction).isNotNull();\n         try {\n-            Span span = transaction.createSpan();\n+            Span span = transaction.createSpan().requestDiscarding();\n             try {\n-                span.setOutgoingTraceContextHeaders(new HashMap<>(), TextHeaderMapAccessor.INSTANCE);\n+                span.propagateTraceContext(new HashMap<>(), TextHeaderMapAccessor.INSTANCE);\n                 assertThat(span.isDiscardable()).isFalse();\n             } finally {\n                 span.end();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc1MDcyMA==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r415750720", "bodyText": "\ud83d\udc4f", "author": "eyalkoren", "createdAt": "2020-04-27T11:58:21Z", "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.impl;\n+\n+import co.elastic.apm.agent.MockReporter;\n+import co.elastic.apm.agent.MockTracer;\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.HashMap;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+public class DiscardSpanTest {\n+    private ElasticApmTracer tracer;\n+    private MockReporter reporter;\n+\n+    @BeforeEach\n+    void setUp() {\n+        reporter = new MockReporter();\n+        tracer = MockTracer.createRealTracer(reporter);\n+    }\n+\n+    @AfterEach\n+    void cleanupAndCheck() {\n+        reporter.assertRecycledAfterDecrementingReferences();\n+        tracer.stop();\n+    }\n+\n+    @Test\n+    void testContextPropagatingSpansAreNonDiscardable() {\n+        Transaction transaction = tracer.startRootTransaction(null);\n+        assertThat(transaction).isNotNull();\n+        try {\n+            Span span = transaction.createSpan();\n+            try {\n+                span.setOutgoingTraceContextHeaders(new HashMap<>(), TextHeaderMapAccessor.INSTANCE);\n+                assertThat(span.isDiscardable()).isFalse();\n+            } finally {\n+                span.end();\n+            }\n+        } finally {\n+            transaction.end();\n+        }\n+\n+        assertThat(transaction.getSpanCount().getTotal()).hasValue(1);\n+        assertThat(transaction.getSpanCount().getDropped()).hasValue(0);\n+        assertThat(transaction.getSpanCount().getReported()).hasValue(1);\n+    }\n+\n+    @Test\n+    void testErrorCapturingMakesSpansNonDiscardable() {\n+        when(tracer.getConfigurationRegistry().getConfig(CoreConfiguration.class).getTransactionMaxSpans()).thenReturn(2);\n+        Transaction transaction = tracer.startRootTransaction(null);\n+        assertThat(transaction).isNotNull();\n+        try {\n+            Span span = transaction.createSpan();\n+            try {\n+                span.requestDiscarding().appendToName(\"non-discardable\").captureException(new Exception());\n+                assertThat(span.isDiscardable()).isFalse();\n+            } finally {\n+                span.end();\n+            }\n+        } finally {\n+            transaction.end();\n+        }\n+        assertThat(reporter.getSpans().stream().map(Span::getNameAsString)).containsExactly(\"non-discardable\");\n+\n+        assertThat(transaction.getSpanCount().getTotal()).hasValue(1);\n+        assertThat(transaction.getSpanCount().getDropped()).hasValue(0);\n+        assertThat(transaction.getSpanCount().getReported()).hasValue(1);\n+    }\n+\n+    @Test\n+    void testParentsOfContextPropagatingSpansAreNonDiscardable() {\n+        Transaction transaction = tracer.startRootTransaction(null);\n+        assertThat(transaction).isNotNull();\n+        try {\n+            Span parentSpan = transaction.createSpan();\n+            try {\n+                Span contextPropagatingSpan = parentSpan.createSpan();\n+                try {\n+                    contextPropagatingSpan.setOutgoingTraceContextHeaders(new HashMap<>(), TextHeaderMapAccessor.INSTANCE);\n+                    assertThat(contextPropagatingSpan.isDiscardable()).isFalse();\n+                    assertThat(parentSpan.isDiscardable()).isFalse();\n+                } finally {\n+                    contextPropagatingSpan.end();\n+                }\n+            } finally {\n+                parentSpan.end();\n+            }\n+        } finally {\n+            transaction.end();\n+        }\n+\n+        assertThat(transaction.getSpanCount().getTotal()).hasValue(2);\n+        assertThat(transaction.getSpanCount().getDropped()).hasValue(0);\n+        assertThat(transaction.getSpanCount().getReported()).hasValue(2);\n+    }\n+\n+    @Test\n+    void testDiscardSpanLimit() {\n+        when(tracer.getConfigurationRegistry().getConfig(CoreConfiguration.class).getTransactionMaxSpans()).thenReturn(2);\n+        Transaction transaction = tracer.startRootTransaction(null);\n+        assertThat(transaction).isNotNull();\n+        try {\n+            transaction.createSpan().appendToName(\"1st\").end();\n+            transaction.createSpan().appendToName(\"discarded\").requestDiscarding().end();\n+            transaction.createSpan().appendToName(\"2nd\").end();\n+            transaction.createSpan().appendToName(\"exceeds limit\").end();\n+        } finally {\n+            transaction.end();\n+        }\n+        assertThat(reporter.getSpans().stream().map(Span::getNameAsString)).containsExactly(\"1st\", \"2nd\");\n+        assertThat(transaction.getSpanCount().getTotal()).hasValue(4);\n+        assertThat(transaction.getSpanCount().getDropped()).hasValue(2);\n+        assertThat(transaction.getSpanCount().getReported()).hasValue(2);\n+    }\n+\n+    @Test\n+    void testDiscardSpanLimitNesting() {\n+        when(tracer.getConfigurationRegistry().getConfig(CoreConfiguration.class).getTransactionMaxSpans()).thenReturn(2);\n+        Transaction transaction = tracer.startRootTransaction(null);\n+        assertThat(transaction).isNotNull();\n+        try {\n+            Span first = transaction.createSpan().appendToName(\"1st\");\n+            try {\n+                Span second = first.createSpan().appendToName(\"2nd\");\n+                try {\n+                    second.createSpan().appendToName(\"exceeds limit\").end();\n+                } finally {\n+                    second.end();\n+                }\n+            } finally {\n+                first.end();\n+            }\n+        } finally {\n+            transaction.end();\n+        }\n+        assertThat(reporter.getSpans().stream().map(Span::getNameAsString)).containsExactly(\"2nd\", \"1st\");\n+        assertThat(transaction.getSpanCount().getTotal()).hasValue(3);\n+        assertThat(transaction.getSpanCount().getDropped()).hasValue(1);\n+        assertThat(transaction.getSpanCount().getReported()).hasValue(2);\n+    }\n+\n+    @Test\n+    void testDiscardSpanLimitNesting2() {", "originalCommit": "c5ca34851a16e99ef4497d2677fbbd77f153c66f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "94c92159d99f57d67d6f2ca0aa16e373082f1684", "chunk": "diff --git a/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java b/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java\nindex 729a3eeff..9af52dd32 100644\n--- a/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java\n+++ b/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java\n\n@@ -59,9 +59,9 @@ public class DiscardSpanTest {\n         Transaction transaction = tracer.startRootTransaction(null);\n         assertThat(transaction).isNotNull();\n         try {\n-            Span span = transaction.createSpan();\n+            Span span = transaction.createSpan().requestDiscarding();\n             try {\n-                span.setOutgoingTraceContextHeaders(new HashMap<>(), TextHeaderMapAccessor.INSTANCE);\n+                span.propagateTraceContext(new HashMap<>(), TextHeaderMapAccessor.INSTANCE);\n                 assertThat(span.isDiscardable()).isFalse();\n             } finally {\n                 span.end();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc1MjE5Mg==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r415752192", "bodyText": "This leftover is what fails the test now..", "author": "eyalkoren", "createdAt": "2020-04-27T12:00:47Z", "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/impl/ElasticApmTracerTest.java", "diffHunk": "@@ -286,8 +286,10 @@ void testEnableDropSpans() {\n             transaction.end();\n         }\n         assertThat(reporter.getFirstTransaction().isSampled()).isTrue();\n-        assertThat(reporter.getFirstTransaction().getSpanCount().getDropped().get()).isEqualTo(1);\n-        assertThat(reporter.getFirstTransaction().getSpanCount().getStarted().get()).isEqualTo(1);\n+        assertThat(reporter.getFirstTransaction().getSpanCount().getDropped()).hasValue(0);", "originalCommit": "c5ca34851a16e99ef4497d2677fbbd77f153c66f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "94c92159d99f57d67d6f2ca0aa16e373082f1684", "chunk": "diff --git a/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/ElasticApmTracerTest.java b/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/ElasticApmTracerTest.java\nindex 0e71a2669..488c2a61a 100644\n--- a/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/ElasticApmTracerTest.java\n+++ b/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/ElasticApmTracerTest.java\n\n@@ -286,7 +286,6 @@ class ElasticApmTracerTest {\n             transaction.end();\n         }\n         assertThat(reporter.getFirstTransaction().isSampled()).isTrue();\n-        assertThat(reporter.getFirstTransaction().getSpanCount().getDropped()).hasValue(0);\n         assertThat(reporter.getFirstTransaction().getSpanCount().getDropped()).hasValue(1);\n         assertThat(reporter.getFirstTransaction().getSpanCount().getReported()).hasValue(1);\n         assertThat(reporter.getFirstTransaction().getSpanCount().getTotal()).hasValue(2);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc1Njc5MQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r415756791", "bodyText": "\ud83d\udc4d", "author": "eyalkoren", "createdAt": "2020-04-27T12:08:31Z", "path": "apm-agent-plugins/apm-opentracing-plugin/src/main/java/co/elastic/apm/agent/opentracing/impl/ApmSpanBuilderInstrumentation.java", "diffHunk": "@@ -82,22 +82,34 @@ public static void createSpan(@Advice.Argument(value = 0, typing = Assigner.Typi\n \n         @Nullable\n         @VisibleForAdvice\n-        public static AbstractSpan<?> doCreateTransactionOrSpan(@Nullable TraceContext parentContext,\n+        public static AbstractSpan<?> doCreateTransactionOrSpan(@Nullable AbstractSpan<?> parentContext,\n                                                                 Map<String, Object> tags,\n                                                                 String operationName, long microseconds,\n                                                                 @Nullable Iterable<Map.Entry<String, String>> baggage, ClassLoader applicationClassLoader) {\n+            AbstractSpan<?> result = null;\n             if (tracer != null) {\n                 if (parentContext == null) {\n-                    return createTransaction(tags, operationName, microseconds, baggage, tracer, applicationClassLoader);\n+                    result = createTransaction(tags, operationName, microseconds, baggage, tracer, applicationClassLoader);\n                 } else {\n                     if (microseconds >= 0) {\n-                        return tracer.startSpan(TraceContext.fromParent(), parentContext, microseconds);\n+                        result = tracer.startSpan(TraceContext.fromParent(), parentContext, microseconds);\n                     } else {\n-                        return tracer.startSpan(TraceContext.fromParent(), parentContext);\n+                        result = tracer.startSpan(TraceContext.fromParent(), parentContext);\n                     }\n                 }\n             }\n-            return null;\n+            if (result != null) {\n+                // This reference count never gets decremented, which means it will be handled by GC rather than being recycled.\n+                // The OpenTracing API allows interactions with the span, such as span.getTraceContext even after the span has finished\n+                // This makes it hard to recycle the span as the life cycle is unclear.\n+                // See also https://github.com/opentracing/opentracing-java/issues/312\n+                // Previously, we kept a permanent copy of the trace context around and recycled the span on finish.\n+                // But that meant lots of complexity in the internal API,\n+                // as it had to deal with the fact that a TraceContext might be returned by ElasticApmTracer.getActive.\n+                // The complexity doesn't seem worth the OT specific optimization that a bit less memory gets allocated.", "originalCommit": "c5ca34851a16e99ef4497d2677fbbd77f153c66f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc2MTA3NQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r415761075", "bodyText": "\ud83d\udc4d", "author": "eyalkoren", "createdAt": "2020-04-27T12:15:32Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java", "diffHunk": "@@ -543,28 +531,6 @@ public void recycle(SpanInScopeCallableWrapper<?> wrapper) {\n         callableSpanWrapperObjectPool.recycle(wrapper);\n     }\n \n-    public Runnable wrapRunnable(Runnable delegate, TraceContext traceContext) {", "originalCommit": "c5ca34851a16e99ef4497d2677fbbd77f153c66f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "94c92159d99f57d67d6f2ca0aa16e373082f1684", "url": "https://github.com/elastic/apm-agent-java/commit/94c92159d99f57d67d6f2ca0aa16e373082f1684", "message": "Apply suggestions from review", "committedDate": "2020-04-28T09:40:34Z", "type": "commit"}, {"oid": "868e3849aec975f3d0a828699939262d8d690e14", "url": "https://github.com/elastic/apm-agent-java/commit/868e3849aec975f3d0a828699939262d8d690e14", "message": "Merge remote-tracking branch 'origin/master' into span-duration-threshold", "committedDate": "2020-04-28T09:40:51Z", "type": "commit"}, {"oid": "a0e2ab3c384074643cb886b80438b84554030d42", "url": "https://github.com/elastic/apm-agent-java/commit/a0e2ab3c384074643cb886b80438b84554030d42", "message": "Restore specific min duration flags", "committedDate": "2020-04-30T13:12:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIyMTk5MA==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r419221990", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"NOTE: This option is deprecated in favor of <<config-span-min-duration,`span_min_duration`>>.\")\n          \n          \n            \n                        \"NOTE: If this option and <<config-span-min-duration,`span_min_duration`>> are both configured, the higher of both thresholds will determine which spans will be discarded.\")", "author": "eyalkoren", "createdAt": "2020-05-04T05:44:10Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/configuration/CoreConfiguration.java", "diffHunk": "@@ -448,7 +448,9 @@\n             \"This configuration affects only spans.\\n\" +\n             \"In order not to break span references,\\n\" +\n             \"all spans leading to an async operation or an exit span (such as a HTTP request or a DB query) are never discarded,\\n\" +\n-            \"regardless of their duration.\\n\")\n+            \"regardless of their duration.\\n\" +\n+            \"\\n\" +\n+            \"NOTE: This option is deprecated in favor of <<config-span-min-duration,`span_min_duration`>>.\")", "originalCommit": "a0e2ab3c384074643cb886b80438b84554030d42", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b9d6f2d364d65ee001dd48bcc43cba8fde76d03e", "chunk": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/configuration/CoreConfiguration.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/configuration/CoreConfiguration.java\nindex d8237d1c5..3df0614a6 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/configuration/CoreConfiguration.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/configuration/CoreConfiguration.java\n\n@@ -450,7 +450,8 @@ public class CoreConfiguration extends ConfigurationOptionProvider {\n             \"all spans leading to an async operation or an exit span (such as a HTTP request or a DB query) are never discarded,\\n\" +\n             \"regardless of their duration.\\n\" +\n             \"\\n\" +\n-            \"NOTE: This option is deprecated in favor of <<config-span-min-duration,`span_min_duration`>>.\")\n+            \"NOTE: If this option and <<config-span-min-duration,`span_min_duration`>> are both configured,\\n\" +\n+            \"the higher of both thresholds will determine which spans will be discarded.\")\n         .buildWithDefault(TimeDuration.of(\"0ms\"));\n \n     private final ConfigurationOption<String> appendPackagesToBootDelagationProperty = ConfigurationOption.stringOption()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIyNDYxMA==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r419224610", "bodyText": "We need to test also this config:\n\nwhen the general one is not set\nwhen the general one is set - the higher of both wins", "author": "eyalkoren", "createdAt": "2020-05-04T05:56:12Z", "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/bci/methodmatching/TraceMethodInstrumentationTest.java", "diffHunk": "@@ -82,7 +84,7 @@ void setUp(TestInfo testInfo) {\n \n         Set<String> tags = testInfo.getTags();\n         if (!tags.isEmpty()) {\n-            when(coreConfiguration.getTraceMethodsDurationThreshold()).thenReturn(TimeDuration.of(tags.iterator().next()));", "originalCommit": "a0e2ab3c384074643cb886b80438b84554030d42", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b9d6f2d364d65ee001dd48bcc43cba8fde76d03e", "chunk": "diff --git a/apm-agent-core/src/test/java/co/elastic/apm/agent/bci/methodmatching/TraceMethodInstrumentationTest.java b/apm-agent-core/src/test/java/co/elastic/apm/agent/bci/methodmatching/TraceMethodInstrumentationTest.java\nindex f150dc860..98ddde930 100644\n--- a/apm-agent-core/src/test/java/co/elastic/apm/agent/bci/methodmatching/TraceMethodInstrumentationTest.java\n+++ b/apm-agent-core/src/test/java/co/elastic/apm/agent/bci/methodmatching/TraceMethodInstrumentationTest.java\n\n@@ -82,9 +82,14 @@ class TraceMethodInstrumentationTest {\n             WildcardMatcher.valueOf(\"*exclude*\"),\n             WildcardMatcher.valueOf(\"manuallyTraced\")));\n \n-        Set<String> tags = testInfo.getTags();\n-        if (!tags.isEmpty()) {\n-            when(coreConfiguration.getSpanMinDuration()).thenReturn(TimeDuration.of(tags.iterator().next()));\n+        for (String tag : testInfo.getTags()) {\n+            TimeDuration duration = TimeDuration.of(tag.split(\"=\")[1]);\n+            if (tag.startsWith(\"span_min_duration=\")) {\n+                doReturn(duration).when(coreConfiguration).getSpanMinDuration();\n+            }\n+            if (tag.startsWith(\"trace_methods_duration_threshold=\")) {\n+                doReturn(duration).when(coreConfiguration).getTraceMethodsDurationThreshold();\n+            }\n         }\n \n         tracer = mockInstrumentationSetup.getTracer();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIyNTgwMQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r419225801", "bodyText": "Currently, this means that the higher of both thresholds (this one and span_min_duration) will determine what to discard. I think this makes sense.", "author": "eyalkoren", "createdAt": "2020-05-04T06:01:29Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/methodmatching/TraceMethodInstrumentation.java", "diffHunk": "@@ -97,8 +93,8 @@ public static void onMethodExit(@Advice.Local(\"span\") @Nullable AbstractSpan<?>\n             final long endTime = span.getTraceContext().getClock().getEpochMicros();\n             if (span instanceof Span) {\n                 long durationMicros = endTime - span.getTimestamp();\n-                if (traceMethodThresholdMicros <= 0 || durationMicros >= traceMethodThresholdMicros || t != null) {\n-                    span.setDiscard(false);\n+                if (traceMethodThresholdMicros > 0 && durationMicros < traceMethodThresholdMicros && t == null) {", "originalCommit": "a0e2ab3c384074643cb886b80438b84554030d42", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI2NTk0Ng==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r419265946", "bodyText": "The greater between them?", "author": "eyalkoren", "createdAt": "2020-05-04T07:54:57Z", "path": "apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/SamplingProfiler.java", "diffHunk": "@@ -733,7 +735,7 @@ private void stopProfiling(SamplingProfiler samplingProfiler) {\n                     logger.debug(\"End call tree ({}) for thread {}\", deserialize(samplingProfiler, traceContextBuffer), threadId);\n                 }\n                 samplingProfiler.profiledThreads.remove(threadId);\n-                callTree.end(samplingProfiler.callTreePool, samplingProfiler.config.getInferredSpansMinDuration().getMillis() * 1_000_000);\n+                callTree.end(samplingProfiler.callTreePool, samplingProfiler.coreConfig.getSpanMinDuration().getMillis() * 1_000_000);", "originalCommit": "a0e2ab3c384074643cb886b80438b84554030d42", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b9d6f2d364d65ee001dd48bcc43cba8fde76d03e", "chunk": "diff --git a/apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/SamplingProfiler.java b/apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/SamplingProfiler.java\nindex 24f6304a7..e1a3f0970 100644\n--- a/apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/SamplingProfiler.java\n+++ b/apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/SamplingProfiler.java\n\n@@ -735,7 +736,7 @@ public class SamplingProfiler extends AbstractLifecycleListener implements Runna\n                     logger.debug(\"End call tree ({}) for thread {}\", deserialize(samplingProfiler, traceContextBuffer), threadId);\n                 }\n                 samplingProfiler.profiledThreads.remove(threadId);\n-                callTree.end(samplingProfiler.callTreePool, samplingProfiler.coreConfig.getSpanMinDuration().getMillis() * 1_000_000);\n+                callTree.end(samplingProfiler.callTreePool, samplingProfiler.getInferredSpansMinDurationNs());\n                 int createdSpans = callTree.spanify();\n                 if (logger.isDebugEnabled()) {\n                     if (createdSpans > 0) {\n"}}, {"oid": "39c6379829da7553f2f5523dfced8cfbadeb0550", "url": "https://github.com/elastic/apm-agent-java/commit/39c6379829da7553f2f5523dfced8cfbadeb0550", "message": "Merge remote-tracking branch 'origin/master' into span-duration-threshold", "committedDate": "2020-05-04T11:24:40Z", "type": "commit"}, {"oid": "b9d6f2d364d65ee001dd48bcc43cba8fde76d03e", "url": "https://github.com/elastic/apm-agent-java/commit/b9d6f2d364d65ee001dd48bcc43cba8fde76d03e", "message": "Apply suggestions from review", "committedDate": "2020-05-04T16:32:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA3NDMyMA==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r420074320", "bodyText": "\ud83d\ude0d", "author": "eyalkoren", "createdAt": "2020-05-05T12:36:10Z", "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/bci/methodmatching/TraceMethodInstrumentationTest.java", "diffHunk": "@@ -184,24 +189,50 @@ void testAgentPaused() {\n     }\n \n     @Test\n-    @Tag(\"200ms\")\n+    @Tag(\"span_min_duration=200ms\")\n     void testDiscardMethods_DiscardAll() {\n         new TestDiscardableMethods(tracer).root(false);\n         assertThat(reporter.getTransactions()).hasSize(1);\n         assertThat(reporter.getSpans()).hasSize(0);\n     }\n \n     @Test\n-    @Tag(\"200ms\")\n+    @Tag(\"span_min_duration=50ms\")\n+    @Tag(\"trace_methods_duration_threshold=200ms\")", "originalCommit": "b9d6f2d364d65ee001dd48bcc43cba8fde76d03e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA4MDY1MQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r420080651", "bodyText": "I'd add another test with only @Tag(\"trace_methods_duration_threshold=50ms\")", "author": "eyalkoren", "createdAt": "2020-05-05T12:46:38Z", "path": "apm-agent-plugins/apm-java-concurrent-plugin/src/test/java/co/elastic/apm/agent/concurrent/AsyncTraceMethodInstrumentationTest.java", "diffHunk": "@@ -85,15 +90,24 @@ void testWithDefaultConfig() {\n     }\n \n     @Test\n-    @Tag(\"200ms\")\n+    @Tag(\"span_min_duration=200ms\")\n     void testWithHighThreshold() {\n         new TestAsyncTraceMethodsClass().invokeAsync();\n         assertThat(reporter.getTransactions()).hasSize(1);\n         assertThat(reporter.getSpans()).hasSize(2);\n     }\n \n     @Test\n-    @Tag(\"50ms\")\n+    @Tag(\"span_min_duration=50ms\")\n+    @Tag(\"trace_methods_duration_threshold=200ms\")\n+    void testWithHigherSpecificThreshold() {\n+        new TestAsyncTraceMethodsClass().invokeAsync();\n+        assertThat(reporter.getTransactions()).hasSize(1);\n+        assertThat(reporter.getSpans()).hasSize(2);\n+    }\n+\n+    @Test\n+    @Tag(\"span_min_duration=50ms\")", "originalCommit": "b9d6f2d364d65ee001dd48bcc43cba8fde76d03e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a6ff8ad3837b2d127989df0a4522d0c957f0f87c", "chunk": "diff --git a/apm-agent-plugins/apm-java-concurrent-plugin/src/test/java/co/elastic/apm/agent/concurrent/AsyncTraceMethodInstrumentationTest.java b/apm-agent-plugins/apm-java-concurrent-plugin/src/test/java/co/elastic/apm/agent/concurrent/AsyncTraceMethodInstrumentationTest.java\nindex 9ddfded6a..ed164c4b3 100644\n--- a/apm-agent-plugins/apm-java-concurrent-plugin/src/test/java/co/elastic/apm/agent/concurrent/AsyncTraceMethodInstrumentationTest.java\n+++ b/apm-agent-plugins/apm-java-concurrent-plugin/src/test/java/co/elastic/apm/agent/concurrent/AsyncTraceMethodInstrumentationTest.java\n\n@@ -108,7 +108,15 @@ class AsyncTraceMethodInstrumentationTest {\n \n     @Test\n     @Tag(\"span_min_duration=50ms\")\n-    void testWithCrossedThreshold() {\n+    void testWithCrossedThreshold_Generic() {\n+        new TestAsyncTraceMethodsClass().invokeAsync();\n+        assertThat(reporter.getTransactions()).hasSize(1);\n+        assertThat(reporter.getSpans()).hasSize(4);\n+    }\n+\n+    @Test\n+    @Tag(\"trace_methods_duration_threshold=50ms\")\n+    void testWithCrossedThreshold_Specific() {\n         new TestAsyncTraceMethodsClass().invokeAsync();\n         assertThat(reporter.getTransactions()).hasSize(1);\n         assertThat(reporter.getSpans()).hasSize(4);\n"}}, {"oid": "a6ff8ad3837b2d127989df0a4522d0c957f0f87c", "url": "https://github.com/elastic/apm-agent-java/commit/a6ff8ad3837b2d127989df0a4522d0c957f0f87c", "message": "Apply suggestions from review", "committedDate": "2020-05-06T07:06:17Z", "type": "commit"}]}