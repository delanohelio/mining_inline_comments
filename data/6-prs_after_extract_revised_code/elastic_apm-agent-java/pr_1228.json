{"pr_number": 1228, "pr_title": "Issue 575 heap pool memory metrics", "pr_createdAt": "2020-06-10T10:38:51Z", "pr_url": "https://github.com/elastic/apm-agent-java/pull/1228", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODExNDQ4Mg==", "url": "https://github.com/elastic/apm-agent-java/pull/1228#discussion_r438114482", "bodyText": "Calling platformMXBean.getHeapMemoryUsage() returns a snapshot of the current usage. Calling java.lang.management.MemoryUsage#getUsed, for example, on the same instance will always return the same value.", "author": "felixbarny", "createdAt": "2020-06-10T13:18:51Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/metrics/builtin/JvmMemoryMetrics.java", "diffHunk": "@@ -26,56 +26,91 @@\n \n import co.elastic.apm.agent.context.AbstractLifecycleListener;\n import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.matcher.WildcardMatcher;\n import co.elastic.apm.agent.metrics.DoubleSupplier;\n import co.elastic.apm.agent.metrics.Labels;\n import co.elastic.apm.agent.metrics.MetricRegistry;\n \n import java.lang.management.ManagementFactory;\n import java.lang.management.MemoryMXBean;\n+import java.lang.management.MemoryPoolMXBean;\n+import java.lang.management.MemoryType;\n+import java.lang.management.MemoryUsage;\n+import java.util.Arrays;\n+import java.util.List;\n \n public class JvmMemoryMetrics extends AbstractLifecycleListener {\n \n+    public static final List<WildcardMatcher> TENURED_POOL_WILDCARDS = Arrays.asList(\n+        WildcardMatcher.valueOf(\"CMS Old Gen\"),\n+        WildcardMatcher.valueOf(\"PS Old Gen\"),\n+        WildcardMatcher.valueOf(\"G1 Old Gen\"),\n+        WildcardMatcher.valueOf(\"Old Space\"),\n+        WildcardMatcher.valueOf(\"Tenured Gen\"),\n+        WildcardMatcher.valueOf(\"Java heap\"),\n+        WildcardMatcher.valueOf(\"GenPauseless Old Gen\"));\n+\n     @Override\n     public void start(ElasticApmTracer tracer) {\n         bindTo(tracer.getMetricRegistry());\n     }\n \n     void bindTo(final MetricRegistry registry) {\n         final MemoryMXBean platformMXBean = ManagementFactory.getPlatformMXBean(MemoryMXBean.class);\n-        registry.add(\"jvm.memory.heap.used\", Labels.EMPTY, new DoubleSupplier() {\n-            @Override\n-            public double get() {\n-                return platformMXBean.getHeapMemoryUsage().getUsed();\n-            }\n-        });\n-        registry.add(\"jvm.memory.heap.committed\", Labels.EMPTY, new DoubleSupplier() {\n-            @Override\n-            public double get() {\n-                return platformMXBean.getHeapMemoryUsage().getCommitted();\n+\n+        addUsedMetric(\"jvm.memory.heap.used\", registry, platformMXBean.getHeapMemoryUsage());", "originalCommit": "05f3635f6f16bbd40ccd53794bdf4acac9602d58", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAwNjAyMQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1228#discussion_r441006021", "bodyText": "fixed", "author": "kananindzya", "createdAt": "2020-06-16T17:02:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODExNDQ4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "94616fd3e28b08f27a389fb4c30e6ca903e1fbd7", "chunk": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/metrics/builtin/JvmMemoryMetrics.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/metrics/builtin/JvmMemoryMetrics.java\nindex f0839ef27..7c934bf07 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/metrics/builtin/JvmMemoryMetrics.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/metrics/builtin/JvmMemoryMetrics.java\n\n@@ -26,29 +26,20 @@ package co.elastic.apm.agent.metrics.builtin;\n \n import co.elastic.apm.agent.context.AbstractLifecycleListener;\n import co.elastic.apm.agent.impl.ElasticApmTracer;\n-import co.elastic.apm.agent.matcher.WildcardMatcher;\n import co.elastic.apm.agent.metrics.DoubleSupplier;\n import co.elastic.apm.agent.metrics.Labels;\n import co.elastic.apm.agent.metrics.MetricRegistry;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import java.lang.management.ManagementFactory;\n import java.lang.management.MemoryMXBean;\n import java.lang.management.MemoryPoolMXBean;\n import java.lang.management.MemoryType;\n-import java.lang.management.MemoryUsage;\n-import java.util.Arrays;\n import java.util.List;\n \n public class JvmMemoryMetrics extends AbstractLifecycleListener {\n-\n-    public static final List<WildcardMatcher> TENURED_POOL_WILDCARDS = Arrays.asList(\n-        WildcardMatcher.valueOf(\"CMS Old Gen\"),\n-        WildcardMatcher.valueOf(\"PS Old Gen\"),\n-        WildcardMatcher.valueOf(\"G1 Old Gen\"),\n-        WildcardMatcher.valueOf(\"Old Space\"),\n-        WildcardMatcher.valueOf(\"Tenured Gen\"),\n-        WildcardMatcher.valueOf(\"Java heap\"),\n-        WildcardMatcher.valueOf(\"GenPauseless Old Gen\"));\n+    private static final Logger logger = LoggerFactory.getLogger(JvmMemoryMetrics.class);\n \n     @Override\n     public void start(ElasticApmTracer tracer) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODExNzA2MA==", "url": "https://github.com/elastic/apm-agent-java/pull/1228#discussion_r438117060", "bodyText": "What's the rationale behind splitting by eden/survivor/tenured?\nIt also looks like this adds multiple heap metrics with the same name and same labels which will override the previous metric. Did you mean to accumulate the values of all survivor spaces, for example? Or would they be reported separately but with different labels for the name?", "author": "felixbarny", "createdAt": "2020-06-10T13:22:35Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/metrics/builtin/JvmMemoryMetrics.java", "diffHunk": "@@ -26,56 +26,91 @@\n \n import co.elastic.apm.agent.context.AbstractLifecycleListener;\n import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.matcher.WildcardMatcher;\n import co.elastic.apm.agent.metrics.DoubleSupplier;\n import co.elastic.apm.agent.metrics.Labels;\n import co.elastic.apm.agent.metrics.MetricRegistry;\n \n import java.lang.management.ManagementFactory;\n import java.lang.management.MemoryMXBean;\n+import java.lang.management.MemoryPoolMXBean;\n+import java.lang.management.MemoryType;\n+import java.lang.management.MemoryUsage;\n+import java.util.Arrays;\n+import java.util.List;\n \n public class JvmMemoryMetrics extends AbstractLifecycleListener {\n \n+    public static final List<WildcardMatcher> TENURED_POOL_WILDCARDS = Arrays.asList(\n+        WildcardMatcher.valueOf(\"CMS Old Gen\"),\n+        WildcardMatcher.valueOf(\"PS Old Gen\"),\n+        WildcardMatcher.valueOf(\"G1 Old Gen\"),\n+        WildcardMatcher.valueOf(\"Old Space\"),\n+        WildcardMatcher.valueOf(\"Tenured Gen\"),\n+        WildcardMatcher.valueOf(\"Java heap\"),\n+        WildcardMatcher.valueOf(\"GenPauseless Old Gen\"));\n+\n     @Override\n     public void start(ElasticApmTracer tracer) {\n         bindTo(tracer.getMetricRegistry());\n     }\n \n     void bindTo(final MetricRegistry registry) {\n         final MemoryMXBean platformMXBean = ManagementFactory.getPlatformMXBean(MemoryMXBean.class);\n-        registry.add(\"jvm.memory.heap.used\", Labels.EMPTY, new DoubleSupplier() {\n-            @Override\n-            public double get() {\n-                return platformMXBean.getHeapMemoryUsage().getUsed();\n-            }\n-        });\n-        registry.add(\"jvm.memory.heap.committed\", Labels.EMPTY, new DoubleSupplier() {\n-            @Override\n-            public double get() {\n-                return platformMXBean.getHeapMemoryUsage().getCommitted();\n+\n+        addUsedMetric(\"jvm.memory.heap.used\", registry, platformMXBean.getHeapMemoryUsage());\n+        addCommittedMetric(\"jvm.memory.heap.committed\", registry, platformMXBean.getHeapMemoryUsage());\n+        addMaxMetric(\"jvm.memory.heap.max\", registry, platformMXBean.getHeapMemoryUsage());\n+        addUsedMetric(\"jvm.memory.non_heap.used\", registry, platformMXBean.getNonHeapMemoryUsage());\n+        addCommittedMetric(\"jvm.memory.non_heap.committed\", registry, platformMXBean.getNonHeapMemoryUsage());\n+        addMaxMetric(\"jvm.memory.non_heap.max\", registry, platformMXBean.getNonHeapMemoryUsage());\n+\n+        List<MemoryPoolMXBean> memoryPoolMXBeans = ManagementFactory.getMemoryPoolMXBeans();\n+\n+        for (MemoryPoolMXBean memoryPoolMXBean : memoryPoolMXBeans) {\n+            if (memoryPoolMXBean.getType() != MemoryType.HEAP) {\n+                continue;\n             }\n-        });\n-        registry.add(\"jvm.memory.heap.max\", Labels.EMPTY, new DoubleSupplier() {\n-            @Override\n-            public double get() {\n-                return platformMXBean.getHeapMemoryUsage().getMax();\n+            if (memoryPoolMXBean.getName().contains(\"Eden\")) {", "originalCommit": "05f3635f6f16bbd40ccd53794bdf4acac9602d58", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg2MzkyNg==", "url": "https://github.com/elastic/apm-agent-java/pull/1228#discussion_r439863926", "bodyText": "I think it will be more informative. And this detailed information can help to add specific alerts.\nYes, I mean that they will be reported separately but with different lables(I fixed it with last commit)", "author": "kananindzya", "createdAt": "2020-06-14T20:17:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODExNzA2MA=="}], "type": "inlineReview", "revised_code": {"commit": "94616fd3e28b08f27a389fb4c30e6ca903e1fbd7", "chunk": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/metrics/builtin/JvmMemoryMetrics.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/metrics/builtin/JvmMemoryMetrics.java\nindex f0839ef27..7c934bf07 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/metrics/builtin/JvmMemoryMetrics.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/metrics/builtin/JvmMemoryMetrics.java\n\n@@ -26,29 +26,20 @@ package co.elastic.apm.agent.metrics.builtin;\n \n import co.elastic.apm.agent.context.AbstractLifecycleListener;\n import co.elastic.apm.agent.impl.ElasticApmTracer;\n-import co.elastic.apm.agent.matcher.WildcardMatcher;\n import co.elastic.apm.agent.metrics.DoubleSupplier;\n import co.elastic.apm.agent.metrics.Labels;\n import co.elastic.apm.agent.metrics.MetricRegistry;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import java.lang.management.ManagementFactory;\n import java.lang.management.MemoryMXBean;\n import java.lang.management.MemoryPoolMXBean;\n import java.lang.management.MemoryType;\n-import java.lang.management.MemoryUsage;\n-import java.util.Arrays;\n import java.util.List;\n \n public class JvmMemoryMetrics extends AbstractLifecycleListener {\n-\n-    public static final List<WildcardMatcher> TENURED_POOL_WILDCARDS = Arrays.asList(\n-        WildcardMatcher.valueOf(\"CMS Old Gen\"),\n-        WildcardMatcher.valueOf(\"PS Old Gen\"),\n-        WildcardMatcher.valueOf(\"G1 Old Gen\"),\n-        WildcardMatcher.valueOf(\"Old Space\"),\n-        WildcardMatcher.valueOf(\"Tenured Gen\"),\n-        WildcardMatcher.valueOf(\"Java heap\"),\n-        WildcardMatcher.valueOf(\"GenPauseless Old Gen\"));\n+    private static final Logger logger = LoggerFactory.getLogger(JvmMemoryMetrics.class);\n \n     @Override\n     public void start(ElasticApmTracer tracer) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE3NTcxNA==", "url": "https://github.com/elastic/apm-agent-java/pull/1228#discussion_r442175714", "bodyText": "Why is that related?", "author": "eyalkoren", "createdAt": "2020-06-18T12:05:39Z", "path": "apm-agent-plugins/apm-grpc/apm-grpc-test-latest/src/test/java/co/elastic/apm/agent/grpc/latest/testapp/generated/HelloGrpc.java", "diffHunk": "@@ -42,7 +42,7 @@\n /**\n  */\n @javax.annotation.Generated(\n-    value = \"by gRPC proto compiler (version 1.29.0)\",\n+    value = \"by gRPC proto compiler (version 1.30.0)\",", "originalCommit": "cbdecc0ef4595f393ba31a14a12e9db11b327b78", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQxODU2NQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1228#discussion_r442418565", "bodyText": "It's changed after running tests, I think. Now in the master branch the value is already \"1.30.0\"", "author": "kananindzya", "createdAt": "2020-06-18T18:22:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE3NTcxNA=="}], "type": "inlineReview", "revised_code": {"commit": "94616fd3e28b08f27a389fb4c30e6ca903e1fbd7", "chunk": "diff --git a/apm-agent-plugins/apm-grpc/apm-grpc-test-latest/src/test/java/co/elastic/apm/agent/grpc/latest/testapp/generated/HelloGrpc.java b/apm-agent-plugins/apm-grpc/apm-grpc-test-latest/src/test/java/co/elastic/apm/agent/grpc/latest/testapp/generated/HelloGrpc.java\nindex 682a0c4b7..ec410def3 100644\n--- a/apm-agent-plugins/apm-grpc/apm-grpc-test-latest/src/test/java/co/elastic/apm/agent/grpc/latest/testapp/generated/HelloGrpc.java\n+++ b/apm-agent-plugins/apm-grpc/apm-grpc-test-latest/src/test/java/co/elastic/apm/agent/grpc/latest/testapp/generated/HelloGrpc.java\n\n@@ -42,7 +42,7 @@ import static io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall;\n /**\n  */\n @javax.annotation.Generated(\n-    value = \"by gRPC proto compiler (version 1.30.0)\",\n+    value = \"by gRPC proto compiler (version 1.29.0)\",\n     comments = \"Source: rpc.proto\")\n public final class HelloGrpc {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE4MDU3Mg==", "url": "https://github.com/elastic/apm-agent-java/pull/1228#discussion_r442180572", "bodyText": "As these metrics nice-to-have, please surround with try/catch, and either log error on failure or debug on success. It will help us test that we don't break anything on all JVMs we use in the integration tests (including J9)", "author": "eyalkoren", "createdAt": "2020-06-18T12:15:12Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/metrics/builtin/JvmMemoryMetrics.java", "diffHunk": "@@ -78,5 +81,32 @@ public double get() {\n                 return platformMXBean.getNonHeapMemoryUsage().getMax();\n             }\n         });\n+\n+        List<MemoryPoolMXBean> memoryPoolMXBeans = ManagementFactory.getMemoryPoolMXBeans();\n+\n+        for (final MemoryPoolMXBean memoryPoolMXBean : memoryPoolMXBeans) {\n+            if (memoryPoolMXBean.getType() != MemoryType.HEAP) {\n+                continue;\n+            }\n+            final Labels memoryPoolTags = Labels.Mutable.of(\"type\", memoryPoolMXBean.getName());\n+            registry.add(\"jvm.memory.heap.used\", memoryPoolTags, new DoubleSupplier() {\n+                @Override\n+                public double get() {\n+                    return memoryPoolMXBean.getUsage().getUsed();\n+                }\n+            });\n+            registry.add(\"jvm.memory.heap.committed\", memoryPoolTags, new DoubleSupplier() {\n+                @Override\n+                public double get() {\n+                    return memoryPoolMXBean.getUsage().getCommitted();\n+                }\n+            });\n+            registry.add(\"jvm.memory.heap.max\", memoryPoolTags, new DoubleSupplier() {\n+                @Override\n+                public double get() {\n+                    return memoryPoolMXBean.getUsage().getMax();\n+                }\n+            });\n+        }", "originalCommit": "cbdecc0ef4595f393ba31a14a12e9db11b327b78", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQxODcxOQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1228#discussion_r442418719", "bodyText": "added try/catch", "author": "kananindzya", "createdAt": "2020-06-18T18:23:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE4MDU3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "94616fd3e28b08f27a389fb4c30e6ca903e1fbd7", "chunk": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/metrics/builtin/JvmMemoryMetrics.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/metrics/builtin/JvmMemoryMetrics.java\nindex 1de741a3b..7c934bf07 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/metrics/builtin/JvmMemoryMetrics.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/metrics/builtin/JvmMemoryMetrics.java\n\n@@ -88,25 +91,29 @@ public class JvmMemoryMetrics extends AbstractLifecycleListener {\n             if (memoryPoolMXBean.getType() != MemoryType.HEAP) {\n                 continue;\n             }\n-            final Labels memoryPoolTags = Labels.Mutable.of(\"type\", memoryPoolMXBean.getName());\n-            registry.add(\"jvm.memory.heap.used\", memoryPoolTags, new DoubleSupplier() {\n-                @Override\n-                public double get() {\n-                    return memoryPoolMXBean.getUsage().getUsed();\n-                }\n-            });\n-            registry.add(\"jvm.memory.heap.committed\", memoryPoolTags, new DoubleSupplier() {\n-                @Override\n-                public double get() {\n-                    return memoryPoolMXBean.getUsage().getCommitted();\n-                }\n-            });\n-            registry.add(\"jvm.memory.heap.max\", memoryPoolTags, new DoubleSupplier() {\n-                @Override\n-                public double get() {\n-                    return memoryPoolMXBean.getUsage().getMax();\n-                }\n-            });\n+            final Labels memoryPoolTags = Labels.Mutable.of(\"name\", memoryPoolMXBean.getName());\n+            try {\n+                registry.add(\"jvm.memory.heap.pool.used\", memoryPoolTags, new DoubleSupplier() {\n+                    @Override\n+                    public double get() {\n+                        return memoryPoolMXBean.getUsage().getUsed();\n+                    }\n+                });\n+                registry.add(\"jvm.memory.heap.pool.committed\", memoryPoolTags, new DoubleSupplier() {\n+                    @Override\n+                    public double get() {\n+                        return memoryPoolMXBean.getUsage().getCommitted();\n+                    }\n+                });\n+                registry.add(\"jvm.memory.heap.pool.max\", memoryPoolTags, new DoubleSupplier() {\n+                    @Override\n+                    public double get() {\n+                        return memoryPoolMXBean.getUsage().getMax();\n+                    }\n+                });\n+            } catch (Exception e) {\n+                logger.error(\"Cannot fetch memory metrics of memory pool \" + memoryPoolMXBean.getName(), e);\n+            }\n         }\n     }\n }\n"}}, {"oid": "94616fd3e28b08f27a389fb4c30e6ca903e1fbd7", "url": "https://github.com/elastic/apm-agent-java/commit/94616fd3e28b08f27a389fb4c30e6ca903e1fbd7", "message": "added heap-pool and non-heap-pool metrics\n\ndeleted non-heap-pool metrics\n\nignore non heap pools\n\nminor fixes for determine tenured space metrics\n\nfixed metrics for memory pool\n\nadded exception catching, added tests.\n\nRevert \"added exception catching, added tests.\"\n\nThis reverts commit 5d019c40\n\nRevert \"fixed metrics for memory pool\"\n\nThis reverts commit cbdecc0e", "committedDate": "2020-06-18T17:55:29Z", "type": "forcePushed"}, {"oid": "fe2c3bf3868bb773c439b570d82d3bb0a6080b95", "url": "https://github.com/elastic/apm-agent-java/commit/fe2c3bf3868bb773c439b570d82d3bb0a6080b95", "message": "added heap memory pools metrics\nrun tests", "committedDate": "2020-06-18T18:10:49Z", "type": "forcePushed"}, {"oid": "5baca696f427d27f309a73804d55ae7f5aff42d1", "url": "https://github.com/elastic/apm-agent-java/commit/5baca696f427d27f309a73804d55ae7f5aff42d1", "message": "added heap memory pools metrics\nrun tests", "committedDate": "2020-07-05T17:08:26Z", "type": "commit"}, {"oid": "111f1b5520dede056de835509141a950b9beef74", "url": "https://github.com/elastic/apm-agent-java/commit/111f1b5520dede056de835509141a950b9beef74", "message": "added changelog", "committedDate": "2020-07-05T17:09:35Z", "type": "commit"}, {"oid": "620008aafc9e16516e3960ae299579781551ee51", "url": "https://github.com/elastic/apm-agent-java/commit/620008aafc9e16516e3960ae299579781551ee51", "message": "fixed test", "committedDate": "2020-07-05T17:09:36Z", "type": "commit"}, {"oid": "620008aafc9e16516e3960ae299579781551ee51", "url": "https://github.com/elastic/apm-agent-java/commit/620008aafc9e16516e3960ae299579781551ee51", "message": "fixed test", "committedDate": "2020-07-05T17:09:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk3MDg5OQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1228#discussion_r449970899", "bodyText": "Not added by you, but please remove", "author": "eyalkoren", "createdAt": "2020-07-06T03:53:13Z", "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/metrics/builtin/JvmMemoryMetricsTest.java", "diffHunk": "@@ -47,7 +53,23 @@ void testMetrics() {\n         assertThat(registry.getGaugeValue(\"jvm.memory.non_heap.used\", Labels.EMPTY)).isNotZero();\n         assertThat(registry.getGaugeValue(\"jvm.memory.non_heap.committed\", Labels.EMPTY)).isNotZero();\n         assertThat(registry.getGaugeValue(\"jvm.memory.non_heap.max\", Labels.EMPTY)).isNotZero();\n+\n+        List<String> memoryPoolNames = getMemoryPoolNames();\n+        for (String memoryPoolName : memoryPoolNames) {\n+            final Labels spaceLabel = Labels.Mutable.of(\"name\", memoryPoolName);\n+            assertThat(registry.getGaugeValue(\"jvm.memory.heap.pool.used\", spaceLabel)).isNotZero();\n+            assertThat(registry.getGaugeValue(\"jvm.memory.heap.pool.used\", spaceLabel)).isNotNaN();\n+            assertThat(registry.getGaugeValue(\"jvm.memory.heap.pool.committed\", spaceLabel)).isNotZero();\n+            assertThat(registry.getGaugeValue(\"jvm.memory.heap.pool.committed\", spaceLabel)).isNotNaN();\n+            assertThat(registry.getGaugeValue(\"jvm.memory.heap.pool.max\", spaceLabel)).isNotZero();\n+            assertThat(registry.getGaugeValue(\"jvm.memory.heap.pool.max\", spaceLabel)).isNotNaN();\n+        }\n         final long[] longs = new long[1000000];\n         System.out.println(registry.toString());", "originalCommit": "620008aafc9e16516e3960ae299579781551ee51", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAxOTY2Ng==", "url": "https://github.com/elastic/apm-agent-java/pull/1228#discussion_r450019666", "bodyText": "removed", "author": "kananindzya", "createdAt": "2020-07-06T06:59:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk3MDg5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "50d02559f1c3312e3b12ebfe605a35f8696df57d", "chunk": "diff --git a/apm-agent-core/src/test/java/co/elastic/apm/agent/metrics/builtin/JvmMemoryMetricsTest.java b/apm-agent-core/src/test/java/co/elastic/apm/agent/metrics/builtin/JvmMemoryMetricsTest.java\nindex 88718f476..40ace6c6f 100644\n--- a/apm-agent-core/src/test/java/co/elastic/apm/agent/metrics/builtin/JvmMemoryMetricsTest.java\n+++ b/apm-agent-core/src/test/java/co/elastic/apm/agent/metrics/builtin/JvmMemoryMetricsTest.java\n\n@@ -46,7 +46,7 @@ class JvmMemoryMetricsTest {\n     void testMetrics() {\n         final MetricRegistry registry = new MetricRegistry(mock(ReporterConfiguration.class));\n         jvmMemoryMetrics.bindTo(registry);\n-        System.out.println(registry.toString());\n+\n         assertThat(registry.getGaugeValue(\"jvm.memory.heap.used\", Labels.EMPTY)).isNotZero();\n         assertThat(registry.getGaugeValue(\"jvm.memory.heap.committed\", Labels.EMPTY)).isNotZero();\n         assertThat(registry.getGaugeValue(\"jvm.memory.heap.max\", Labels.EMPTY)).isNotZero();\n"}}, {"oid": "50d02559f1c3312e3b12ebfe605a35f8696df57d", "url": "https://github.com/elastic/apm-agent-java/commit/50d02559f1c3312e3b12ebfe605a35f8696df57d", "message": "deleted sout", "committedDate": "2020-07-06T06:58:46Z", "type": "commit"}, {"oid": "012bc07a877a48a0fbac9e4e059946bb93dd2b8c", "url": "https://github.com/elastic/apm-agent-java/commit/012bc07a877a48a0fbac9e4e059946bb93dd2b8c", "message": "slightly improve test", "committedDate": "2020-07-06T13:31:33Z", "type": "commit"}]}