{"pr_number": 1235, "pr_title": "implement scheduled instrumentation for TimerTask", "pr_createdAt": "2020-06-15T19:54:41Z", "pr_url": "https://github.com/elastic/apm-agent-java/pull/1235", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM5MDY0Nw==", "url": "https://github.com/elastic/apm-agent-java/pull/1235#discussion_r441390647", "bodyText": "Use await() or awaitUntilAsserted() instead of sleep.", "author": "felixbarny", "createdAt": "2020-06-17T08:55:59Z", "path": "apm-agent-plugins/apm-scheduled-annotation-plugin/src/test/java/co/elastic/apm/agent/spring/scheduled/TimerTaskInstrumentationTest.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package co.elastic.apm.agent.spring.scheduled;\n+\n+import co.elastic.apm.agent.AbstractInstrumentationTest;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TimerTaskInstrumentationTest extends AbstractInstrumentationTest {\n+\n+    @Test\n+    void testTimerTaskWithScheduleAtFixedRate() throws InterruptedException {\n+        reporter.reset();\n+        TestTimerTask timerTask = new TestTimerTask();\n+        Timer timer = new Timer(true);\n+        timer.scheduleAtFixedRate(timerTask, 0, 5);\n+        Thread.sleep(100);", "originalCommit": "a161a5033b3664da8c85f92072c0ee2f071ab2ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY3NDM4Mw==", "url": "https://github.com/elastic/apm-agent-java/pull/1235#discussion_r441674383", "bodyText": "replaced", "author": "kananindzya", "createdAt": "2020-06-17T16:29:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM5MDY0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "8629775213857d9196fe3605600c0db2c8086d99", "chunk": "diff --git a/apm-agent-plugins/apm-scheduled-annotation-plugin/src/test/java/co/elastic/apm/agent/spring/scheduled/TimerTaskInstrumentationTest.java b/apm-agent-plugins/apm-scheduled-annotation-plugin/src/test/java/co/elastic/apm/agent/spring/scheduled/TimerTaskInstrumentationTest.java\nindex 0c742dc07..594bfd166 100644\n--- a/apm-agent-plugins/apm-scheduled-annotation-plugin/src/test/java/co/elastic/apm/agent/spring/scheduled/TimerTaskInstrumentationTest.java\n+++ b/apm-agent-plugins/apm-scheduled-annotation-plugin/src/test/java/co/elastic/apm/agent/spring/scheduled/TimerTaskInstrumentationTest.java\n\n@@ -12,31 +12,68 @@ import static org.assertj.core.api.Assertions.assertThat;\n public class TimerTaskInstrumentationTest extends AbstractInstrumentationTest {\n \n     @Test\n-    void testTimerTaskWithScheduleAtFixedRate() throws InterruptedException {\n+    void testTimerTask_scheduleWithFixedRate() throws InterruptedException {\n         reporter.reset();\n         TestTimerTask timerTask = new TestTimerTask();\n         Timer timer = new Timer(true);\n-        timer.scheduleAtFixedRate(timerTask, 0, 5);\n-        Thread.sleep(100);\n+        timer.scheduleAtFixedRate(timerTask, 0, 10L);\n+\n+        Thread.sleep(100L);\n         timer.cancel();\n+        Thread.sleep(100L);\n \n         assertThat(reporter.getTransactions().size()).isEqualTo(timerTask.getInvocationCount());\n         assertThat(reporter.getTransactions().get(0).getNameAsString()).isEqualTo(\"TestTimerTask#run\");\n     }\n \n     @Test\n-    void testTimerTaskWithSchedule() throws InterruptedException {\n+    void testTimerTask_scheduleWithFixedDelay() throws InterruptedException {\n         reporter.reset();\n         TestTimerTask timerTask = new TestTimerTask();\n-        Timer timer = new Timer(true);\n-        timer.schedule(timerTask, 0, 5);\n-        Thread.sleep(100);\n+        Timer timer = new Timer(\"Timer\");\n+        timer.schedule(timerTask, 1L, 10L);\n+\n+        Thread.sleep(100L);\n         timer.cancel();\n+        Thread.sleep(100L);\n \n         assertThat(reporter.getTransactions().size()).isEqualTo(timerTask.getInvocationCount());\n         assertThat(reporter.getTransactions().get(0).getNameAsString()).isEqualTo(\"TestTimerTask#run\");\n     }\n \n+    @Test\n+    void testTimerTask_scheduleOnce() throws InterruptedException {\n+        reporter.reset();\n+        TestTimerTask timerTask = new TestTimerTask();\n+        Timer timer = new Timer(\"Timer\");\n+        long delay = 50L;\n+        timer.schedule(timerTask, delay);\n+\n+        Thread.sleep(2 * delay);\n+\n+        assertThat(reporter.getTransactions().size()).isEqualTo(1);\n+        assertThat(reporter.getTransactions().get(0).getNameAsString()).isEqualTo(\"TestTimerTask#run\");\n+    }\n+\n+    @Test\n+    void testTimerTask_withAnonymousClass() throws InterruptedException {\n+        reporter.reset();\n+        AtomicInteger count = new AtomicInteger(0);\n+\n+        TimerTask repeatedTask = new TimerTask() {\n+            public void run() {\n+                count.incrementAndGet();\n+            }\n+        };\n+        Timer timer = new Timer(\"Timer\");\n+        long delay = 50L;\n+        timer.schedule(repeatedTask, delay);\n+\n+        Thread.sleep(2 * delay);\n+\n+        assertThat(reporter.getTransactions().size()).isEqualTo(1);\n+        assertThat(reporter.getTransactions().get(0).getNameAsString()).isEqualTo(\"1#run\");\n+    }\n \n     public static class TestTimerTask extends TimerTask {\n         private AtomicInteger count = new AtomicInteger(0);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM5MjAwMA==", "url": "https://github.com/elastic/apm-agent-java/pull/1235#discussion_r441392000", "bodyText": "Add framework information", "author": "felixbarny", "createdAt": "2020-06-17T08:58:07Z", "path": "apm-agent-plugins/apm-scheduled-annotation-plugin/src/main/java/co/elastic/apm/agent/spring/scheduled/TimerTaskInstrumentation.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package co.elastic.apm.agent.spring.scheduled;\n+\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.bci.bytebuddy.SimpleMethodSignatureOffsetMappingFactory;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.stacktrace.StacktraceConfiguration;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.NamedElement;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import net.bytebuddy.matcher.ElementMatchers;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n+import static co.elastic.apm.agent.bci.bytebuddy.CustomElementMatchers.isInAnyPackage;\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperClass;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+public class TimerTaskInstrumentation extends ElasticApmInstrumentation {\n+\n+    @VisibleForAdvice\n+    public static final Logger logger = LoggerFactory.getLogger(TimerTaskInstrumentation.class);\n+\n+    private final Collection<String> applicationPackages;\n+\n+    public TimerTaskInstrumentation(ElasticApmTracer tracer) {\n+        applicationPackages = tracer.getConfig(StacktraceConfiguration.class).getApplicationPackages();\n+    }\n+\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    private static void setTransactionName(@SimpleMethodSignatureOffsetMappingFactory.SimpleMethodSignature String signature, @Advice.Origin Class<?> clazz, @Advice.Local(\"transaction\") Transaction transaction) {\n+        if (tracer != null) {\n+            AbstractSpan<?> active = tracer.getActive();\n+            if (active == null) {\n+                transaction = tracer.startRootTransaction(clazz.getClassLoader());\n+                if (transaction != null) {\n+                    transaction.withName(signature)", "originalCommit": "a161a5033b3664da8c85f92072c0ee2f071ab2ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2MDI3NQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1235#discussion_r441660275", "bodyText": "added changelog, and supproted technologies", "author": "kananindzya", "createdAt": "2020-06-17T16:06:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM5MjAwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2NjI3NA==", "url": "https://github.com/elastic/apm-agent-java/pull/1235#discussion_r441666274", "bodyText": "added framework name information", "author": "kananindzya", "createdAt": "2020-06-17T16:16:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM5MjAwMA=="}], "type": "inlineReview", "revised_code": {"commit": "cd3087b5ebf4cbaa4edbb650fd173451258aa9f3", "chunk": "diff --git a/apm-agent-plugins/apm-scheduled-annotation-plugin/src/main/java/co/elastic/apm/agent/spring/scheduled/TimerTaskInstrumentation.java b/apm-agent-plugins/apm-scheduled-annotation-plugin/src/main/java/co/elastic/apm/agent/spring/scheduled/TimerTaskInstrumentation.java\nindex 73ed3ffe0..70c974a56 100644\n--- a/apm-agent-plugins/apm-scheduled-annotation-plugin/src/main/java/co/elastic/apm/agent/spring/scheduled/TimerTaskInstrumentation.java\n+++ b/apm-agent-plugins/apm-scheduled-annotation-plugin/src/main/java/co/elastic/apm/agent/spring/scheduled/TimerTaskInstrumentation.java\n\n@@ -1,3 +1,27 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n package co.elastic.apm.agent.spring.scheduled;\n \n import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n"}}, {"oid": "d6030528c574482664764c0c51e8de51ad935c88", "url": "https://github.com/elastic/apm-agent-java/commit/d6030528c574482664764c0c51e8de51ad935c88", "message": "implement scheduled instrumentation for TimerTask", "committedDate": "2020-06-17T14:50:53Z", "type": "commit"}, {"oid": "8629775213857d9196fe3605600c0db2c8086d99", "url": "https://github.com/elastic/apm-agent-java/commit/8629775213857d9196fe3605600c0db2c8086d99", "message": "fixed tests", "committedDate": "2020-06-17T14:50:53Z", "type": "commit"}, {"oid": "6c0daaea9245c8c23589538269ff5fe817340cbe", "url": "https://github.com/elastic/apm-agent-java/commit/6c0daaea9245c8c23589538269ff5fe817340cbe", "message": "added entries for changelog and supported technologies", "committedDate": "2020-06-17T15:15:24Z", "type": "commit"}, {"oid": "cd3087b5ebf4cbaa4edbb650fd173451258aa9f3", "url": "https://github.com/elastic/apm-agent-java/commit/cd3087b5ebf4cbaa4edbb650fd173451258aa9f3", "message": "fixed tests. run tests", "committedDate": "2020-06-17T16:04:09Z", "type": "commit"}, {"oid": "cd3087b5ebf4cbaa4edbb650fd173451258aa9f3", "url": "https://github.com/elastic/apm-agent-java/commit/cd3087b5ebf4cbaa4edbb650fd173451258aa9f3", "message": "fixed tests. run tests", "committedDate": "2020-06-17T16:04:09Z", "type": "forcePushed"}, {"oid": "f7c572433a17189238040ea4aaa588e00a12837f", "url": "https://github.com/elastic/apm-agent-java/commit/f7c572433a17189238040ea4aaa588e00a12837f", "message": "added frameworkName", "committedDate": "2020-06-17T16:15:45Z", "type": "commit"}, {"oid": "40933c1e78903c2d010ef1beef835a70e2085cea", "url": "https://github.com/elastic/apm-agent-java/commit/40933c1e78903c2d010ef1beef835a70e2085cea", "message": "replaced sleep with awaitUntilAsserted", "committedDate": "2020-06-17T16:29:31Z", "type": "commit"}, {"oid": "2777cfc3569db19a45292f8bcbf5e25d5ebdef64", "url": "https://github.com/elastic/apm-agent-java/commit/2777cfc3569db19a45292f8bcbf5e25d5ebdef64", "message": "Use backticks", "committedDate": "2020-06-18T09:48:03Z", "type": "commit"}, {"oid": "d080064daffd10c006fc7f364e31727bbf916a26", "url": "https://github.com/elastic/apm-agent-java/commit/d080064daffd10c006fc7f364e31727bbf916a26", "message": "change timeout in tests to 1s", "committedDate": "2020-06-18T17:09:17Z", "type": "commit"}]}