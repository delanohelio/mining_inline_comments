{"pr_number": 1222, "pr_title": "added capturing of request body in Elasticsearch queries", "pr_createdAt": "2020-06-09T12:12:34Z", "pr_url": "https://github.com/elastic/apm-agent-java/pull/1222", "timeline": [{"oid": "70833403e0e78a3e22339989fe5a238836c7cf7c", "url": "https://github.com/elastic/apm-agent-java/commit/70833403e0e78a3e22339989fe5a238836c7cf7c", "message": "added capturing of request body in Elasticsearch queries: _msesarch, _count, _rollup_search, _msearch/tempalte, _search/template", "committedDate": "2020-06-09T19:09:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg3Njg4Ng==", "url": "https://github.com/elastic/apm-agent-java/pull/1222#discussion_r437876886", "bodyText": "Regex is rather expensive. Better use WildcardMatchers instead. Arrays.asList(WildcardMatcher.valueOf(\"*_search\", ...).\nTo match all, use WildcardMatcher::isAnyMatch", "author": "felixbarny", "createdAt": "2020-06-10T05:57:48Z", "path": "apm-agent-plugins/apm-es-restclient-plugin/apm-es-restclient-plugin-common/src/main/java/co/elastic/apm/agent/es/restclient/ElasticsearchRestClientInstrumentationHelperImpl.java", "diffHunk": "@@ -49,7 +49,7 @@\n \n     private static final Logger logger = LoggerFactory.getLogger(ElasticsearchRestClientInstrumentationHelperImpl.class);\n \n-    public static final String SEARCH_QUERY_PATH_SUFFIX = \"_search\";\n+    public static final String QUERY_REGEXP = \".*_((search|msearch)(\\\\/template)?|count)$\";", "originalCommit": "70833403e0e78a3e22339989fe5a238836c7cf7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk2NDYwMg==", "url": "https://github.com/elastic/apm-agent-java/pull/1222#discussion_r437964602", "bodyText": "done", "author": "kananindzya", "createdAt": "2020-06-10T08:49:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg3Njg4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "9d29fc4b2eeaac5c603c227f8c0667e32c897074", "chunk": "diff --git a/apm-agent-plugins/apm-es-restclient-plugin/apm-es-restclient-plugin-common/src/main/java/co/elastic/apm/agent/es/restclient/ElasticsearchRestClientInstrumentationHelperImpl.java b/apm-agent-plugins/apm-es-restclient-plugin/apm-es-restclient-plugin-common/src/main/java/co/elastic/apm/agent/es/restclient/ElasticsearchRestClientInstrumentationHelperImpl.java\nindex 89260c7a8..92666520b 100644\n--- a/apm-agent-plugins/apm-es-restclient-plugin/apm-es-restclient-plugin-common/src/main/java/co/elastic/apm/agent/es/restclient/ElasticsearchRestClientInstrumentationHelperImpl.java\n+++ b/apm-agent-plugins/apm-es-restclient-plugin/apm-es-restclient-plugin-common/src/main/java/co/elastic/apm/agent/es/restclient/ElasticsearchRestClientInstrumentationHelperImpl.java\n\n@@ -42,6 +43,8 @@ import org.slf4j.LoggerFactory;\n \n import javax.annotation.Nullable;\n import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n \n import static org.jctools.queues.spec.ConcurrentQueueSpec.createBoundedMpmc;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg3NzQ5Ng==", "url": "https://github.com/elastic/apm-agent-java/pull/1222#discussion_r437877496", "bodyText": "Please test the different endpoints in different test methods.", "author": "felixbarny", "createdAt": "2020-06-10T05:59:50Z", "path": "apm-agent-plugins/apm-es-restclient-plugin/apm-es-restclient-plugin-6_4/src/test/java/co/elastic/apm/agent/es/restclient/v6_4/AbstractEs6_4ClientInstrumentationTest.java", "diffHunk": "@@ -134,6 +143,99 @@ public void testDocumentScenario() throws Exception {\n         validateDbContextContent(searchSpan, \"{\\\"from\\\":0,\\\"size\\\":5,\\\"query\\\":{\\\"term\\\":{\\\"foo\\\":{\\\"value\\\":\\\"bar\\\",\\\"boost\\\":1.0}}}}\");\n \n         // Now update and re-search\n+        reporter.reset();\n+        // Do CountRequest", "originalCommit": "70833403e0e78a3e22339989fe5a238836c7cf7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk2NDcwNA==", "url": "https://github.com/elastic/apm-agent-java/pull/1222#discussion_r437964704", "bodyText": "done", "author": "kananindzya", "createdAt": "2020-06-10T08:50:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg3NzQ5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA3OTkzMQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1222#discussion_r438079931", "bodyText": "What I meant was to create multiple @Test annotated methods for each type of query. Better to have multiple simple test cases than one big complex one so that the tests can be executed individually.", "author": "felixbarny", "createdAt": "2020-06-10T12:23:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg3NzQ5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU2MzQzNQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1222#discussion_r438563435", "bodyText": "fixed", "author": "kananindzya", "createdAt": "2020-06-11T06:12:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg3NzQ5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "9d29fc4b2eeaac5c603c227f8c0667e32c897074", "chunk": "diff --git a/apm-agent-plugins/apm-es-restclient-plugin/apm-es-restclient-plugin-6_4/src/test/java/co/elastic/apm/agent/es/restclient/v6_4/AbstractEs6_4ClientInstrumentationTest.java b/apm-agent-plugins/apm-es-restclient-plugin/apm-es-restclient-plugin-6_4/src/test/java/co/elastic/apm/agent/es/restclient/v6_4/AbstractEs6_4ClientInstrumentationTest.java\nindex 94505dcd5..6236a6ef0 100644\n--- a/apm-agent-plugins/apm-es-restclient-plugin/apm-es-restclient-plugin-6_4/src/test/java/co/elastic/apm/agent/es/restclient/v6_4/AbstractEs6_4ClientInstrumentationTest.java\n+++ b/apm-agent-plugins/apm-es-restclient-plugin/apm-es-restclient-plugin-6_4/src/test/java/co/elastic/apm/agent/es/restclient/v6_4/AbstractEs6_4ClientInstrumentationTest.java\n\n@@ -112,54 +112,83 @@ public abstract class AbstractEs6_4ClientInstrumentationTest extends AbstractEsC\n     @Test\n     public void testDocumentScenario() throws Exception {\n         // Index a document\n-        IndexResponse ir = doIndex(new IndexRequest(INDEX, DOC_TYPE, DOC_ID).source(\n-            jsonBuilder()\n-                .startObject()\n-                .field(FOO, BAR)\n-                .endObject()\n-        ).setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE));\n-        assertThat(ir.status().getStatus()).isEqualTo(201);\n+        createDocument();\n \n         List<Span> spans = reporter.getSpans();\n         assertThat(spans).hasSize(1);\n         validateSpanContent(spans.get(0), String.format(\"Elasticsearch: PUT /%s/%s/%s\", INDEX, DOC_TYPE, DOC_ID), 201, \"PUT\");\n-\n-        // Search the index\n         reporter.reset();\n \n+        // do search request\n         SearchRequest searchRequest = new SearchRequest(INDEX);\n         SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();\n         sourceBuilder.query(QueryBuilders.termQuery(FOO, BAR));\n         sourceBuilder.from(0);\n         sourceBuilder.size(5);\n         searchRequest.source(sourceBuilder);\n-        SearchResponse sr = doSearch(searchRequest);\n-        verifyTotalHits(sr.getHits());\n \n+        SearchResponse response = doSearch(searchRequest);\n+\n+        verifyTotalHits(response.getHits());\n         spans = reporter.getSpans();\n         assertThat(spans).hasSize(1);\n         Span searchSpan = spans.get(0);\n         validateSpanContent(searchSpan, String.format(\"Elasticsearch: POST /%s/_search\", INDEX), 200, \"POST\");\n         validateDbContextContent(searchSpan, \"{\\\"from\\\":0,\\\"size\\\":5,\\\"query\\\":{\\\"term\\\":{\\\"foo\\\":{\\\"value\\\":\\\"bar\\\",\\\"boost\\\":1.0}}}}\");\n+        reporter.reset();\n+\n+        Map<String, Object> jsonMap = new HashMap<>();\n+        jsonMap.put(FOO, BAZ);\n+        UpdateRequest updateRequest = new UpdateRequest(INDEX, DOC_TYPE, DOC_ID).doc(jsonMap).setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE);\n+        UpdateResponse ur = doUpdate(updateRequest);\n+        assertThat(ur.status().getStatus()).isEqualTo(200);\n+        SearchResponse sr = doSearch(new SearchRequest(INDEX));\n+        assertThat(sr.getHits().getAt(0).getSourceAsMap().get(FOO)).isEqualTo(BAZ);\n \n-        // Now update and re-search\n+        spans = reporter.getSpans();\n+        assertThat(spans).hasSize(2);\n+        boolean updateSpanFound = false;\n+        for (Span span : spans) {\n+            if (span.getNameAsString().contains(\"_update\")) {\n+                updateSpanFound = true;\n+                break;\n+            }\n+        }\n+        assertThat(updateSpanFound).isTrue();\n+\n+        // Finally - delete the document\n         reporter.reset();\n-        // Do CountRequest\n+        DeleteResponse dr = deleteDocument();\n+        assertThat(dr.status().getStatus()).isEqualTo(200);\n+        validateSpanContent(spans.get(0), String.format(\"Elasticsearch: DELETE /%s/%s/%s\", INDEX, DOC_TYPE, DOC_ID), 200, \"DELETE\");\n+    }\n+\n+    @Test\n+    public void testCountRequest_validateSpanContentAndDbContext() throws Exception {\n+        createDocument();\n+        reporter.reset();\n+\n         CountRequest countRequest = new CountRequest(INDEX);\n         SearchSourceBuilder countSourceBuilder = new SearchSourceBuilder();\n         countSourceBuilder.query(QueryBuilders.termQuery(FOO, BAR));\n         countRequest.source(countSourceBuilder);\n-        CountResponse cr = doCount(countRequest);\n-        assertThat(cr.getCount()).isEqualTo(1);\n \n-        spans = reporter.getSpans();\n+        CountResponse responses = doCount(countRequest);\n+\n+        assertThat(responses.getCount()).isEqualTo(1);\n+        List<Span> spans = reporter.getSpans();\n         assertThat(spans).hasSize(1);\n-        searchSpan = spans.get(0);\n-        validateSpanContent(searchSpan, String.format(\"Elasticsearch: POST /%s/_count\", INDEX), 200, \"POST\");\n-        validateDbContextContent(searchSpan, \"{\\\"query\\\":{\\\"term\\\":{\\\"foo\\\":{\\\"value\\\":\\\"bar\\\",\\\"boost\\\":1.0}}}}\");\n+        Span span = spans.get(0);\n+        validateSpanContent(span, String.format(\"Elasticsearch: POST /%s/_count\", INDEX), 200, \"POST\");\n+        validateDbContextContent(span, \"{\\\"query\\\":{\\\"term\\\":{\\\"foo\\\":{\\\"value\\\":\\\"bar\\\",\\\"boost\\\":1.0}}}}\");\n \n+        deleteDocument();\n+    }\n+\n+    @Test\n+    public void testMultiSearchRequest_validateSpanContentAndDbContext() throws InterruptedException, ExecutionException, IOException {\n+        createDocument();\n         reporter.reset();\n-        // Do MultisearchRequest\n \n         MultiSearchRequest multiSearchRequest = new MultiSearchRequest();\n         SearchRequest firstSearchRequest = new SearchRequest(INDEX);\n"}}, {"oid": "9d29fc4b2eeaac5c603c227f8c0667e32c897074", "url": "https://github.com/elastic/apm-agent-java/commit/9d29fc4b2eeaac5c603c227f8c0667e32c897074", "message": "fixed according to comments", "committedDate": "2020-06-14T19:13:32Z", "type": "forcePushed"}, {"oid": "4b78b8202c8c2417381a7dbc90412fff00e40210", "url": "https://github.com/elastic/apm-agent-java/commit/4b78b8202c8c2417381a7dbc90412fff00e40210", "message": "fixed according to comments", "committedDate": "2020-06-17T11:51:45Z", "type": "forcePushed"}, {"oid": "442960c0f9c094bb9a38ed4f83eddbf6e6bd7257", "url": "https://github.com/elastic/apm-agent-java/commit/442960c0f9c094bb9a38ed4f83eddbf6e6bd7257", "message": "added capturing of request body in Elasticsearch queries: _msesarch, _count, _rollup_search, _msearch/tempalte, _search/template", "committedDate": "2020-06-17T15:19:39Z", "type": "commit"}, {"oid": "2a46761908991c8f5f4a68e56371b69a8210612c", "url": "https://github.com/elastic/apm-agent-java/commit/2a46761908991c8f5f4a68e56371b69a8210612c", "message": "fixed according to comments", "committedDate": "2020-06-17T15:19:39Z", "type": "commit"}, {"oid": "b5dc648b49ad047f819c55a83f307d734be371b9", "url": "https://github.com/elastic/apm-agent-java/commit/b5dc648b49ad047f819c55a83f307d734be371b9", "message": "fixed according to comments", "committedDate": "2020-06-17T15:19:39Z", "type": "commit"}, {"oid": "9b4448541b009c3c3ae55e676411f7fe2cff75d7", "url": "https://github.com/elastic/apm-agent-java/commit/9b4448541b009c3c3ae55e676411f7fe2cff75d7", "message": "fixed changelog", "committedDate": "2020-06-17T15:20:19Z", "type": "commit"}, {"oid": "9b4448541b009c3c3ae55e676411f7fe2cff75d7", "url": "https://github.com/elastic/apm-agent-java/commit/9b4448541b009c3c3ae55e676411f7fe2cff75d7", "message": "fixed changelog", "committedDate": "2020-06-17T15:20:19Z", "type": "forcePushed"}, {"oid": "257ea283a52bcd86cb6f3ec2b044f284229194a4", "url": "https://github.com/elastic/apm-agent-java/commit/257ea283a52bcd86cb6f3ec2b044f284229194a4", "message": "Merge branch 'master' into issue-519-capture-elasticsearch-apis", "committedDate": "2020-06-25T08:30:06Z", "type": "commit"}]}