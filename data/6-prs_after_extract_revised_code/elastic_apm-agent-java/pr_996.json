{"pr_number": 996, "pr_title": "deleted deprecated classes from intake v1 protocol", "pr_createdAt": "2020-01-16T12:19:11Z", "pr_url": "https://github.com/elastic/apm-agent-java/pull/996", "timeline": [{"oid": "2785bc5889e48b66cdd0a038cc64846ade9b3993", "url": "https://github.com/elastic/apm-agent-java/commit/2785bc5889e48b66cdd0a038cc64846ade9b3993", "message": "deleted deprecated classes from intake v1 protocol", "committedDate": "2020-01-16T12:17:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ0NjA3NA==", "url": "https://github.com/elastic/apm-agent-java/pull/996#discussion_r367446074", "bodyText": "Please also create a new test for this", "author": "felixbarny", "createdAt": "2020-01-16T14:26:56Z", "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/impl/payload/TransactionPayloadJsonSchemaTest.java", "diffHunk": "@@ -1,293 +0,0 @@\n-/*-\n- * #%L\n- * Elastic APM Java agent\n- * %%\n- * Copyright (C) 2018 - 2019 Elastic and contributors\n- * %%\n- * Licensed to Elasticsearch B.V. under one or more contributor\n- * license agreements. See the NOTICE file distributed with\n- * this work for additional information regarding copyright\n- * ownership. Elasticsearch B.V. licenses this file to you under\n- * the Apache License, Version 2.0 (the \"License\"); you may\n- * not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- * \n- *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- * #L%\n- */\n-package co.elastic.apm.agent.impl.payload;\n-\n-import co.elastic.apm.agent.MockTracer;\n-import co.elastic.apm.agent.TransactionUtils;\n-import co.elastic.apm.agent.impl.sampling.ConstantSampler;\n-import co.elastic.apm.agent.impl.stacktrace.StacktraceConfiguration;\n-import co.elastic.apm.agent.impl.transaction.Span;\n-import co.elastic.apm.agent.impl.transaction.TraceContext;\n-import co.elastic.apm.agent.impl.transaction.Transaction;\n-import co.elastic.apm.agent.report.ApmServerClient;\n-import co.elastic.apm.agent.report.serialize.DslJsonSerializer;\n-import co.elastic.apm.agent.util.IOUtils;\n-import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.networknt.schema.JsonSchema;\n-import com.networknt.schema.JsonSchemaFactory;\n-import com.networknt.schema.ValidationMessage;\n-import org.apache.commons.lang3.RandomStringUtils;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n-\n-import java.io.IOException;\n-import java.nio.CharBuffer;\n-import java.nio.charset.StandardCharsets;\n-import java.util.Set;\n-\n-import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Mockito.mock;\n-\n-class TransactionPayloadJsonSchemaTest {\n-\n-    private JsonSchema schema;\n-    private ObjectMapper objectMapper;\n-    private DslJsonSerializer serializer;\n-\n-    @BeforeEach\n-    void setUp() {\n-        schema = JsonSchemaFactory.getInstance().getSchema(getClass().getResourceAsStream(\"/schema/transactions/payload.json\"));\n-        objectMapper = new ObjectMapper();\n-        serializer = new DslJsonSerializer(mock(StacktraceConfiguration.class), mock(ApmServerClient.class));\n-    }\n-\n-    private TransactionPayload createPayloadWithRequiredValues() {\n-        final TransactionPayload payload = createPayload();\n-        final Transaction transaction = createTransactionWithRequiredValues();\n-        payload.getTransactions().add(transaction);\n-        Span span = new Span(MockTracer.create());\n-        span.start(TraceContext.fromParent(), transaction, -1, false)\n-            .withType(\"type\")\n-            .withSubtype(\"subtype\")\n-            .withAction(\"action\")\n-            .withName(\"name\");\n-        payload.getSpans().add(span);\n-        return payload;\n-    }\n-\n-    private Transaction createTransactionWithRequiredValues() {\n-        Transaction t = new Transaction(MockTracer.create());\n-        t.start(TraceContext.asRoot(), null, (long) 0, ConstantSampler.of(true), getClass().getClassLoader());\n-        t.withType(\"type\");\n-        t.getContext().getRequest().withMethod(\"GET\");\n-        t.getContext().getRequest().getUrl().appendToFull(\"http://localhost:8080/foo/bar\");\n-        return t;\n-    }\n-\n-    private TransactionPayload createPayloadWithAllValues() {\n-        final Transaction transaction = new Transaction(MockTracer.create());\n-        TransactionUtils.fillTransaction(transaction);\n-        final TransactionPayload payload = createPayload();\n-        payload.getTransactions().add(transaction);\n-        payload.getSpans().addAll(TransactionUtils.getSpans(transaction));\n-        return payload;\n-    }\n-\n-    private TransactionPayload createPayload() {\n-        return createPayload(SystemInfo.create());\n-    }\n-\n-    private TransactionPayload createPayload(SystemInfo system) {\n-        Service service = new Service().withAgent(new Agent(\"name\", \"version\")).withName(\"name\");\n-        final ProcessInfo processInfo = new ProcessInfo(\"title\");\n-        processInfo.getArgv().add(\"test\");\n-        return new TransactionPayload(processInfo, service, system);\n-    }\n-\n-    @Test\n-    void testJsonSchemaDslJsonEmptyValues() throws IOException {", "originalCommit": "2785bc5889e48b66cdd0a038cc64846ade9b3993", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU4NjY1NQ==", "url": "https://github.com/elastic/apm-agent-java/pull/996#discussion_r367586655", "bodyText": "added", "author": "kananindzya", "createdAt": "2020-01-16T18:44:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ0NjA3NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ0NjEyMA==", "url": "https://github.com/elastic/apm-agent-java/pull/996#discussion_r367446120", "bodyText": "Please also create a replacement for this", "author": "felixbarny", "createdAt": "2020-01-16T14:27:02Z", "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/impl/payload/TransactionPayloadJsonSchemaTest.java", "diffHunk": "@@ -1,293 +0,0 @@\n-/*-\n- * #%L\n- * Elastic APM Java agent\n- * %%\n- * Copyright (C) 2018 - 2019 Elastic and contributors\n- * %%\n- * Licensed to Elasticsearch B.V. under one or more contributor\n- * license agreements. See the NOTICE file distributed with\n- * this work for additional information regarding copyright\n- * ownership. Elasticsearch B.V. licenses this file to you under\n- * the Apache License, Version 2.0 (the \"License\"); you may\n- * not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- * \n- *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- * #L%\n- */\n-package co.elastic.apm.agent.impl.payload;\n-\n-import co.elastic.apm.agent.MockTracer;\n-import co.elastic.apm.agent.TransactionUtils;\n-import co.elastic.apm.agent.impl.sampling.ConstantSampler;\n-import co.elastic.apm.agent.impl.stacktrace.StacktraceConfiguration;\n-import co.elastic.apm.agent.impl.transaction.Span;\n-import co.elastic.apm.agent.impl.transaction.TraceContext;\n-import co.elastic.apm.agent.impl.transaction.Transaction;\n-import co.elastic.apm.agent.report.ApmServerClient;\n-import co.elastic.apm.agent.report.serialize.DslJsonSerializer;\n-import co.elastic.apm.agent.util.IOUtils;\n-import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.networknt.schema.JsonSchema;\n-import com.networknt.schema.JsonSchemaFactory;\n-import com.networknt.schema.ValidationMessage;\n-import org.apache.commons.lang3.RandomStringUtils;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n-\n-import java.io.IOException;\n-import java.nio.CharBuffer;\n-import java.nio.charset.StandardCharsets;\n-import java.util.Set;\n-\n-import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Mockito.mock;\n-\n-class TransactionPayloadJsonSchemaTest {\n-\n-    private JsonSchema schema;\n-    private ObjectMapper objectMapper;\n-    private DslJsonSerializer serializer;\n-\n-    @BeforeEach\n-    void setUp() {\n-        schema = JsonSchemaFactory.getInstance().getSchema(getClass().getResourceAsStream(\"/schema/transactions/payload.json\"));\n-        objectMapper = new ObjectMapper();\n-        serializer = new DslJsonSerializer(mock(StacktraceConfiguration.class), mock(ApmServerClient.class));\n-    }\n-\n-    private TransactionPayload createPayloadWithRequiredValues() {\n-        final TransactionPayload payload = createPayload();\n-        final Transaction transaction = createTransactionWithRequiredValues();\n-        payload.getTransactions().add(transaction);\n-        Span span = new Span(MockTracer.create());\n-        span.start(TraceContext.fromParent(), transaction, -1, false)\n-            .withType(\"type\")\n-            .withSubtype(\"subtype\")\n-            .withAction(\"action\")\n-            .withName(\"name\");\n-        payload.getSpans().add(span);\n-        return payload;\n-    }\n-\n-    private Transaction createTransactionWithRequiredValues() {\n-        Transaction t = new Transaction(MockTracer.create());\n-        t.start(TraceContext.asRoot(), null, (long) 0, ConstantSampler.of(true), getClass().getClassLoader());\n-        t.withType(\"type\");\n-        t.getContext().getRequest().withMethod(\"GET\");\n-        t.getContext().getRequest().getUrl().appendToFull(\"http://localhost:8080/foo/bar\");\n-        return t;\n-    }\n-\n-    private TransactionPayload createPayloadWithAllValues() {\n-        final Transaction transaction = new Transaction(MockTracer.create());\n-        TransactionUtils.fillTransaction(transaction);\n-        final TransactionPayload payload = createPayload();\n-        payload.getTransactions().add(transaction);\n-        payload.getSpans().addAll(TransactionUtils.getSpans(transaction));\n-        return payload;\n-    }\n-\n-    private TransactionPayload createPayload() {\n-        return createPayload(SystemInfo.create());\n-    }\n-\n-    private TransactionPayload createPayload(SystemInfo system) {\n-        Service service = new Service().withAgent(new Agent(\"name\", \"version\")).withName(\"name\");\n-        final ProcessInfo processInfo = new ProcessInfo(\"title\");\n-        processInfo.getArgv().add(\"test\");\n-        return new TransactionPayload(processInfo, service, system);\n-    }\n-\n-    @Test\n-    void testJsonSchemaDslJsonEmptyValues() throws IOException {\n-        final TransactionPayload payload = createPayload();\n-        payload.getTransactions().add(new Transaction(MockTracer.create()));\n-        final String content = new DslJsonSerializer(mock(StacktraceConfiguration.class), mock(ApmServerClient.class)).toJsonString(payload);\n-        System.out.println(content);\n-        objectMapper.readTree(content);\n-    }\n-\n-    @Test\n-    void testSystemInfo() throws IOException {", "originalCommit": "2785bc5889e48b66cdd0a038cc64846ade9b3993", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU4NjcwNA==", "url": "https://github.com/elastic/apm-agent-java/pull/996#discussion_r367586704", "bodyText": "added", "author": "kananindzya", "createdAt": "2020-01-16T18:45:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ0NjEyMA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "3360c3a4101b6c467fedd9b088fa860d3bd69132", "url": "https://github.com/elastic/apm-agent-java/commit/3360c3a4101b6c467fedd9b088fa860d3bd69132", "message": "fixed according to comments. moved test from deleted test class.", "committedDate": "2020-01-16T18:44:33Z", "type": "commit"}]}