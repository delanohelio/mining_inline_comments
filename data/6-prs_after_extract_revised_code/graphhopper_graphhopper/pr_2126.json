{"pr_number": 2126, "pr_title": "Add tolerance for Isochrones", "pr_createdAt": "2020-09-09T16:00:41Z", "pr_url": "https://github.com/graphhopper/graphhopper/pull/2126", "timeline": [{"oid": "c64dd648eb537b086081f896fa26d2e43094f04c", "url": "https://github.com/graphhopper/graphhopper/commit/c64dd648eb537b086081f896fa26d2e43094f04c", "message": "Add tolerance for Isochrones", "committedDate": "2020-09-09T15:45:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTczODQ0OQ==", "url": "https://github.com/graphhopper/graphhopper/pull/2126#discussion_r485738449", "bodyText": "For empty isochrones there was a null pointer exception here", "author": "boldtrn", "createdAt": "2020-09-09T16:13:57Z", "path": "web-bundle/src/main/java/com/graphhopper/resources/IsochroneResource.java", "diffHunk": "@@ -141,18 +142,20 @@ public Response doGet(\n             fz = l -> l.time;\n         }\n \n-        Triangulator.Result result = triangulator.triangulate(qr, queryGraph, shortestPathTree, fz);\n+        Triangulator.Result result = triangulator.triangulate(qr, queryGraph, shortestPathTree, fz, tolerance);\n \n         ContourBuilder contourBuilder = new ContourBuilder(result.triangulation);\n         ArrayList<Geometry> isochrones = new ArrayList<>();\n         for (Double z : zs) {\n             logger.info(\"Building contour z={}\", z);\n             MultiPolygon isochrone = contourBuilder.computeIsoline(z, result.seedEdges);\n-            if (fullGeometry) {\n-                isochrones.add(isochrone);\n-            } else {\n-                Polygon maxPolygon = heuristicallyFindMainConnectedComponent(isochrone, geometryFactory.createPoint(new Coordinate(point.get().lon, point.get().lat)));\n-                isochrones.add(geometryFactory.createPolygon(((LinearRing) maxPolygon.getExteriorRing())));\n+            if(!isochrone.isEmpty()){\n+                if (fullGeometry) {\n+                    isochrones.add(isochrone);\n+                } else {\n+                    Polygon maxPolygon = heuristicallyFindMainConnectedComponent(isochrone, geometryFactory.createPoint(new Coordinate(point.get().lon, point.get().lat)));\n+                    isochrones.add(geometryFactory.createPolygon(((LinearRing) maxPolygon.getExteriorRing())));", "originalCommit": "c64dd648eb537b086081f896fa26d2e43094f04c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "64b6d7a761a264b4ebadbcc2cff54d69a7789c05", "chunk": "diff --git a/web-bundle/src/main/java/com/graphhopper/resources/IsochroneResource.java b/web-bundle/src/main/java/com/graphhopper/resources/IsochroneResource.java\nindex 7da0e35a3..bd45acf6f 100644\n--- a/web-bundle/src/main/java/com/graphhopper/resources/IsochroneResource.java\n+++ b/web-bundle/src/main/java/com/graphhopper/resources/IsochroneResource.java\n\n@@ -142,19 +141,19 @@ public class IsochroneResource {\n             fz = l -> l.time;\n         }\n \n-        Triangulator.Result result = triangulator.triangulate(qr, queryGraph, shortestPathTree, fz, tolerance);\n+        Triangulator.Result result = triangulator.triangulate(snap, queryGraph, shortestPathTree, fz, tolerance);\n \n         ContourBuilder contourBuilder = new ContourBuilder(result.triangulation);\n         ArrayList<Geometry> isochrones = new ArrayList<>();\n         for (Double z : zs) {\n             logger.info(\"Building contour z={}\", z);\n             MultiPolygon isochrone = contourBuilder.computeIsoline(z, result.seedEdges);\n-            if(!isochrone.isEmpty()){\n+            if(!isochrone.isEmpty()) {\n                 if (fullGeometry) {\n                     isochrones.add(isochrone);\n                 } else {\n-                    Polygon maxPolygon = heuristicallyFindMainConnectedComponent(isochrone, geometryFactory.createPoint(new Coordinate(point.get().lon, point.get().lat)));\n-                    isochrones.add(geometryFactory.createPolygon(((LinearRing) maxPolygon.getExteriorRing())));\n+                    Polygon maxPolygon = heuristicallyFindMainConnectedComponent(isochrone, isochrone.getFactory().createPoint(new Coordinate(point.get().lon, point.get().lat)));\n+                    isochrones.add(isochrone.getFactory().createPolygon(((LinearRing) maxPolygon.getExteriorRing())));\n                 }\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTczODkzMQ==", "url": "https://github.com/graphhopper/graphhopper/pull/2126#discussion_r485738931", "bodyText": "Took was always zero, because the sw wasn't stopped before reading it on line 183.", "author": "boldtrn", "createdAt": "2020-09-09T16:14:29Z", "path": "web-bundle/src/main/java/com/graphhopper/resources/IsochroneResource.java", "diffHunk": "@@ -169,6 +172,7 @@ public Response doGet(\n         }\n         ObjectNode json = JsonNodeFactory.instance.objectNode();\n \n+        sw.stop();", "originalCommit": "c64dd648eb537b086081f896fa26d2e43094f04c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "64b6d7a761a264b4ebadbcc2cff54d69a7789c05", "url": "https://github.com/graphhopper/graphhopper/commit/64b6d7a761a264b4ebadbcc2cff54d69a7789c05", "message": "Merge remote-tracking branch 'remotes/gh/master' into isochrone_tolerance\n\n# Conflicts:\n#\tisochrone/src/main/java/com/graphhopper/isochrone/algorithm/JTSTriangulator.java\n#\tisochrone/src/main/java/com/graphhopper/isochrone/algorithm/Triangulator.java\n#\tweb-bundle/src/main/java/com/graphhopper/resources/IsochroneResource.java", "committedDate": "2020-10-06T07:09:36Z", "type": "commit"}, {"oid": "05dd89f7a0b05459ac04b0321cbebd1b89a53ebb", "url": "https://github.com/graphhopper/graphhopper/commit/05dd89f7a0b05459ac04b0321cbebd1b89a53ebb", "message": "Use tolerance in meter", "committedDate": "2020-10-06T07:31:04Z", "type": "commit"}, {"oid": "24f636fdf12f5fe30016ac8b0e7c1df791c131e5", "url": "https://github.com/graphhopper/graphhopper/commit/24f636fdf12f5fe30016ac8b0e7c1df791c131e5", "message": "Use larger test tolerance", "committedDate": "2020-10-06T11:18:36Z", "type": "commit"}, {"oid": "bc3fd9285010784fbe0ace0292166b4c9317ba82", "url": "https://github.com/graphhopper/graphhopper/commit/bc3fd9285010784fbe0ace0292166b4c9317ba82", "message": "Use larger test tolerance", "committedDate": "2020-10-06T15:41:33Z", "type": "commit"}, {"oid": "affe5ec37e4f648b711ac921fc89e71235e2dd69", "url": "https://github.com/graphhopper/graphhopper/commit/affe5ec37e4f648b711ac921fc89e71235e2dd69", "message": "Use larger test tolerance", "committedDate": "2020-10-06T16:04:53Z", "type": "commit"}, {"oid": "e9e319cc460ccd112b1faaa36803b7d2a1f227e9", "url": "https://github.com/graphhopper/graphhopper/commit/e9e319cc460ccd112b1faaa36803b7d2a1f227e9", "message": "Merge branch 'master' into isochrone_tolerance", "committedDate": "2020-10-12T09:57:51Z", "type": "commit"}]}