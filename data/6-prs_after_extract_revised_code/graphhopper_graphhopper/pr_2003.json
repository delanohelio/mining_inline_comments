{"pr_number": 2003, "pr_title": "test client-hc routing without internet requirement", "pr_createdAt": "2020-04-18T13:56:23Z", "pr_url": "https://github.com/graphhopper/graphhopper/pull/2003", "timeline": [{"oid": "5accd17654d762b0e8d0f71133ec5bdf0e5a783b", "url": "https://github.com/graphhopper/graphhopper/commit/5accd17654d762b0e8d0f71133ec5bdf0e5a783b", "message": "test client-hc routing without internet requirement", "committedDate": "2020-04-18T13:52:50Z", "type": "commit"}, {"oid": "c3de533ff13fb55eb34326b2cad264b55d192d70", "url": "https://github.com/graphhopper/graphhopper/commit/c3de533ff13fb55eb34326b2cad264b55d192d70", "message": "improved alternative route example", "committedDate": "2020-04-18T14:06:48Z", "type": "commit"}, {"oid": "e87aebf132a79081689efb3349e6415227812cbb", "url": "https://github.com/graphhopper/graphhopper/commit/e87aebf132a79081689efb3349e6415227812cbb", "message": "parametrized test", "committedDate": "2020-04-20T11:27:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMxMTI5MQ==", "url": "https://github.com/graphhopper/graphhopper/pull/2003#discussion_r411311291", "bodyText": "You need to use setProfile() here. For POST putHint also seems to work (because of json serialization/deserialization probably). Ugh this is a bit ugly. Ah and now I understand what you meant with the missing vehicle: Now that the requests are running against localhost we do not get the default vehicle used in graphhopper.com anymore so we have to adjust the tests.", "author": "easbar", "createdAt": "2020-04-20T11:44:37Z", "path": "web/src/test/java/com/graphhopper/http/resources/RouteResourceClientHCTest.java", "diffHunk": "@@ -0,0 +1,370 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package com.graphhopper.http.resources;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.graphhopper.GHRequest;\n+import com.graphhopper.GHResponse;\n+import com.graphhopper.PathWrapper;\n+import com.graphhopper.api.GraphHopperWeb;\n+import com.graphhopper.config.CHProfileConfig;\n+import com.graphhopper.config.ProfileConfig;\n+import com.graphhopper.http.GraphHopperApplication;\n+import com.graphhopper.http.GraphHopperServerConfiguration;\n+import com.graphhopper.http.util.GraphHopperServerTestConfiguration;\n+import com.graphhopper.http.util.TestUtils;\n+import com.graphhopper.jackson.Jackson;\n+import com.graphhopper.jackson.PathWrapperDeserializer;\n+import com.graphhopper.util.Helper;\n+import com.graphhopper.util.Instruction;\n+import com.graphhopper.util.InstructionList;\n+import com.graphhopper.util.RoundaboutInstruction;\n+import com.graphhopper.util.details.PathDetail;\n+import com.graphhopper.util.exceptions.PointNotFoundException;\n+import com.graphhopper.util.exceptions.PointOutOfBoundsException;\n+import com.graphhopper.util.shapes.GHPoint;\n+import io.dropwizard.testing.junit5.DropwizardAppExtension;\n+import io.dropwizard.testing.junit5.DropwizardExtensionsSupport;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.CsvSource;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.SocketTimeoutException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+/**\n+ * @author Peter Karich\n+ */\n+@ExtendWith(DropwizardExtensionsSupport.class)\n+public class RouteResourceClientHCTest {\n+    private static final String DIR = \"./target/andorra-gh/\";\n+    private static final DropwizardAppExtension<GraphHopperServerConfiguration> app = new DropwizardAppExtension<>(GraphHopperApplication.class, createConfig());\n+\n+    private static GraphHopperServerConfiguration createConfig() {\n+        GraphHopperServerConfiguration config = new GraphHopperServerTestConfiguration();\n+        config.getGraphHopperConfiguration().\n+                putObject(\"graph.flag_encoders\", \"car,bike\").\n+                putObject(\"routing.ch.disabling_allowed\", true).\n+                putObject(\"prepare.min_network_size\", 0).\n+                putObject(\"prepare.min_one_way_network_size\", 0).\n+                putObject(\"graph.elevation.provider\", \"srtm\").\n+                putObject(\"graph.elevation.cachedir\", \"../core/files/\").\n+                putObject(\"datareader.file\", \"../core/files/andorra.osm.pbf\").\n+                putObject(\"graph.encoded_values\", \"road_class,surface,road_environment,max_speed\").\n+                putObject(\"graph.location\", DIR)\n+                .setProfiles(Arrays.asList(new ProfileConfig(\"my_car\").setVehicle(\"car\").setWeighting(\"fastest\"),\n+                        new ProfileConfig(\"my_bike\").setVehicle(\"bike\").setWeighting(\"fastest\")))\n+                .setCHProfiles(Arrays.asList(new CHProfileConfig(\"my_car\"), new CHProfileConfig(\"my_bike\")));\n+        return config;\n+    }\n+\n+    // dropwizard extension does not work with @RunWith(Parameterized.class), see https://github.com/graphhopper/graphhopper/pull/2003\n+    private static final String DISPLAY_NAME = \"POST={0},maxUnzippedLength={1}\";\n+\n+    GraphHopperWeb createGH(boolean usePost, int maxUnzippedLength) {\n+        return new GraphHopperWeb(TestUtils.clientUrl(app, \"/route\")).setPostRequest(usePost).setMaxUnzippedLength(maxUnzippedLength);\n+    }\n+\n+    @BeforeAll\n+    @AfterAll\n+    public static void cleanUp() {\n+        Helper.removeDir(new File(DIR));\n+    }\n+\n+    @ParameterizedTest(name = DISPLAY_NAME)\n+    @CsvSource({\"true,0\", \"true,1000\", \"false,-1\"})\n+    public void testSimpleRoute(boolean usePost, int maxUnzippedLength) {\n+        GraphHopperWeb gh = createGH(usePost, maxUnzippedLength);\n+        GHRequest req = new GHRequest().\n+                addPoint(new GHPoint(42.5093, 1.5274)).\n+                addPoint(new GHPoint(42.5126, 1.5410)).\n+                putHint(\"vehicle\", \"car\").\n+                putHint(\"elevation\", false).\n+                putHint(\"instructions\", true).\n+                putHint(\"calc_points\", true);\n+        GHResponse res = gh.route(req);\n+        assertFalse(res.hasErrors(), \"errors:\" + res.getErrors().toString());\n+        PathWrapper alt = res.getBest();\n+        isBetween(60, 70, alt.getPoints().size());\n+        isBetween(2900, 3000, alt.getDistance());\n+        isBetween(110, 120, alt.getAscend());\n+        isBetween(70, 80, alt.getDescend());\n+        isBetween(190, 200, alt.getRouteWeight());\n+\n+        // change vehicle\n+        res = gh.route(new GHRequest(42.5093, 1.5274, 42.5126, 1.5410).\n+                putHint(\"vehicle\", \"bike\"));\n+        alt = res.getBest();\n+        assertFalse(res.hasErrors(), \"errors:\" + res.getErrors().toString());\n+        isBetween(2500, 2600, alt.getDistance());\n+\n+        assertEquals(\"[0, 1]\", alt.getPointsOrder().toString());\n+    }\n+\n+    @Test\n+    public void testPutPOJO() {\n+        ObjectNode requestJson = new ObjectMapper().createObjectNode();\n+        requestJson.putPOJO(\"double\", 1.0);\n+        requestJson.putPOJO(\"int\", 1);\n+        requestJson.putPOJO(\"boolean\", true);\n+        // does not work requestJson.putPOJO(\"string\", \"test\");\n+        assertEquals(\"{\\\"double\\\":1.0,\\\"int\\\":1,\\\"boolean\\\":true}\", requestJson.toString());\n+    }\n+\n+    @ParameterizedTest(name = DISPLAY_NAME)\n+    @CsvSource({\"true,0\", \"true,1000\", \"false,-1\"})\n+    public void testAlternativeRoute(boolean usePost, int maxUnzippedLength) {\n+        GraphHopperWeb gh = createGH(usePost, maxUnzippedLength);\n+        GHRequest req = new GHRequest().\n+                addPoint(new GHPoint(42.505041, 1.521864)).\n+                addPoint(new GHPoint(42.509074, 1.537936)).\n+                putHint(\"vehicle\", \"car\").\n+                setAlgorithm(\"alternative_route\").\n+                putHint(\"instructions\", true).\n+                putHint(\"calc_points\", true).\n+                putHint(\"ch.disable\", true);\n+        GHResponse res = gh.route(req);\n+        assertFalse(res.hasErrors(), \"errors:\" + res.getErrors().toString());\n+        List<PathWrapper> paths = res.getAll();\n+        assertEquals(2, paths.size());\n+\n+        PathWrapper path = paths.get(0);\n+        isBetween(31, 37, path.getPoints().size());\n+        isBetween(1670, 1710, path.getDistance());\n+        assertTrue(\"Avinguda Carlemany\".contains(path.getDescription().get(0)), \"expected: \" + path.getDescription().get(0));\n+\n+        path = paths.get(1);\n+        isBetween(26, 31, path.getPoints().size());\n+        isBetween(1740, 1790, path.getDistance());\n+        assertTrue(\"Carrer Doctor Vilanova\".contains(path.getDescription().get(0)), \"expected: \" + path.getDescription().get(0));\n+    }\n+\n+    @ParameterizedTest(name = DISPLAY_NAME)\n+    @CsvSource({\"true,0\", \"true,1000\", \"false,-1\"})\n+    public void testTimeout(boolean usePost, int maxUnzippedLength) {\n+        GraphHopperWeb gh = createGH(usePost, maxUnzippedLength);\n+        GHRequest req = new GHRequest().\n+                addPoint(new GHPoint(42.509225, 1.534728)).\n+                addPoint(new GHPoint(42.512602, 1.551558)).\n+                putHint(\"vehicle\", \"car\");\n+        GHResponse res = gh.route(req);\n+        assertFalse(res.hasErrors(), \"errors:\" + res.getErrors().toString());\n+\n+        req.putHint(GraphHopperWeb.TIMEOUT, 1);\n+        try {\n+            gh.route(req);\n+            fail();\n+        } catch (RuntimeException e) {\n+            assertEquals(SocketTimeoutException.class, e.getCause().getClass());\n+        }\n+    }\n+\n+    @ParameterizedTest(name = DISPLAY_NAME)\n+    @CsvSource({\"true,0\", \"true,1000\", \"false,-1\"})\n+    public void testNoPoints(boolean usePost, int maxUnzippedLength) {\n+        GraphHopperWeb gh = createGH(usePost, maxUnzippedLength);\n+        GHRequest req = new GHRequest().\n+                addPoint(new GHPoint(42.509225, 1.534728)).\n+                addPoint(new GHPoint(42.512602, 1.551558)).\n+                putHint(\"vehicle\", \"car\");\n+\n+        req.putHint(\"instructions\", false);\n+        req.putHint(\"calc_points\", false);\n+        GHResponse res = gh.route(req);\n+        assertFalse(res.hasErrors(), \"errors:\" + res.getErrors().toString());\n+        PathWrapper alt = res.getBest();\n+        assertEquals(0, alt.getPoints().size());\n+        isBetween(1750, 1800, alt.getDistance());\n+    }\n+\n+    @ParameterizedTest(name = DISPLAY_NAME)\n+    @CsvSource({\"true,0\", \"true,1000\", \"false,-1\"})\n+    public void readRoundabout(boolean usePost, int maxUnzippedLength) {\n+        GraphHopperWeb gh = createGH(usePost, maxUnzippedLength);\n+        GHRequest req = new GHRequest().\n+                addPoint(new GHPoint(42.509644, 1.532958)).\n+                addPoint(new GHPoint(42.510383, 1.533392)).\n+                putHint(\"vehicle\", \"car\");\n+\n+        GHResponse res = gh.route(req);\n+        int counter = 0;\n+        for (Instruction i : res.getBest().getInstructions()) {\n+            if (i instanceof RoundaboutInstruction) {\n+                counter++;\n+                RoundaboutInstruction ri = (RoundaboutInstruction) i;\n+                assertEquals(-5, ri.getTurnAngle(), 0.1, \"turn_angle was incorrect:\" + ri.getTurnAngle());\n+                // This route contains only one roundabout and no (via) point in a roundabout\n+                assertTrue(ri.isExited(), \"exited was incorrect:\" + ri.isExited());\n+            }\n+        }\n+        assertTrue(counter > 0, \"no roundabout in route?\");\n+    }\n+\n+    @ParameterizedTest(name = DISPLAY_NAME)\n+    @CsvSource({\"true,0\", \"true,1000\", \"false,-1\"})\n+    public void testRetrieveOnlyStreetname(boolean usePost, int maxUnzippedLength) {\n+        GraphHopperWeb gh = createGH(usePost, maxUnzippedLength);\n+        GHRequest req = new GHRequest().\n+                addPoint(new GHPoint(42.507065, 1.529846)).\n+                addPoint(new GHPoint(42.510383, 1.533392)).\n+                putHint(\"vehicle\", \"car\");\n+\n+        GHResponse res = gh.route(req);\n+        List<String> given = extractInstructionNames(res.getBest(), 5);\n+        assertEquals(Arrays.asList(\"Continue onto Carrer de l'Aig\u00fceta\", \"Turn right onto Carrer Pere d'Urg\",\n+                \"Turn right onto Carrer Bonaventura Armengol\", \"Keep right onto Avinguda Consell d'Europa\", \"At roundabout, take exit 4\"\n+        ), given);\n+\n+        req.putHint(\"turn_description\", false);\n+        res = gh.route(req);\n+        given = extractInstructionNames(res.getBest(), 5);\n+        assertEquals(Arrays.asList(\"Carrer de l'Aig\u00fceta\", \"Carrer Pere d'Urg\", \"Carrer Bonaventura Armengol\", \"Avinguda Consell d'Europa\", \"\"), given);\n+    }\n+\n+    private List<String> extractInstructionNames(PathWrapper path, int count) {\n+        List<String> result = new ArrayList<>();\n+        for (Instruction instruction : path.getInstructions()) {\n+            result.add(instruction.getName());\n+            if (result.size() >= count) {\n+                return result;\n+            }\n+        }\n+        return result;\n+    }\n+\n+    @ParameterizedTest(name = DISPLAY_NAME)\n+    @CsvSource({\"true,0\", \"true,1000\", \"false,-1\"})\n+    public void testCannotFindPointException(boolean usePost, int maxUnzippedLength) {\n+        GraphHopperWeb gh = createGH(usePost, maxUnzippedLength);\n+        GHRequest req = new GHRequest().\n+                addPoint(new GHPoint(42.49058, 1.602974)).\n+                addPoint(new GHPoint(42.510383, 1.533392)).\n+                putHint(\"vehicle\", \"car\");\n+\n+        GHResponse res = gh.route(req);\n+        assertTrue(res.hasErrors(), \"no errors found?\");\n+        assertTrue(res.getErrors().get(0) instanceof PointNotFoundException);\n+    }\n+\n+    @ParameterizedTest(name = DISPLAY_NAME)\n+    @CsvSource({\"true,0\", \"true,1000\", \"false,-1\"})\n+    public void testOutOfBoundsException(boolean usePost, int maxUnzippedLength) {\n+        GraphHopperWeb gh = createGH(usePost, maxUnzippedLength);\n+        GHRequest req = new GHRequest().\n+                addPoint(new GHPoint(-400.214943, -130.078125)).\n+                addPoint(new GHPoint(39.909736, -91.054687)).\n+                putHint(\"vehicle\", \"car\");\n+\n+        GHResponse res = gh.route(req);\n+        assertTrue(res.hasErrors(), \"no errors found?\");\n+        assertTrue(res.getErrors().get(0) instanceof PointOutOfBoundsException);\n+    }\n+\n+    @ParameterizedTest(name = DISPLAY_NAME)\n+    @CsvSource({\"true,0\", \"true,1000\", \"false,-1\"})\n+    public void readFinishInstruction(boolean usePost, int maxUnzippedLength) {\n+        GraphHopperWeb gh = createGH(usePost, maxUnzippedLength);\n+        GHRequest req = new GHRequest().\n+                addPoint(new GHPoint(42.507065, 1.529846)).\n+                addPoint(new GHPoint(42.510383, 1.533392)).\n+                putHint(\"vehicle\", \"car\");\n+\n+        GHResponse res = gh.route(req);\n+        InstructionList instructions = res.getBest().getInstructions();\n+        String finishInstructionName = instructions.get(instructions.size() - 1).getName();\n+        assertEquals(\"Arrive at destination\", finishInstructionName);\n+    }\n+\n+    @ParameterizedTest(name = DISPLAY_NAME)\n+    @CsvSource({\"true,0\", \"true,1000\", \"false,-1\"})\n+    public void doNotReadFinishInstruction(boolean usePost, int maxUnzippedLength) {\n+        GraphHopperWeb gh = createGH(usePost, maxUnzippedLength);\n+        GHRequest req = new GHRequest().\n+                addPoint(new GHPoint(42.507065, 1.529846)).\n+                addPoint(new GHPoint(42.510383, 1.533392)).\n+                putHint(\"vehicle\", \"car\").\n+                putHint(\"turn_description\", false);\n+        GHResponse res = gh.route(req);\n+        InstructionList instructions = res.getBest().getInstructions();\n+        String finishInstructionName = instructions.get(instructions.size() - 1).getName();\n+        assertEquals(\"\", finishInstructionName);\n+    }\n+\n+    void isBetween(double from, double to, double expected) {\n+        assertTrue(expected >= from, \"expected value \" + expected + \" was smaller than limit \" + from);\n+        assertTrue(expected <= to, \"expected value \" + expected + \" was bigger than limit \" + to);\n+    }\n+\n+    @Test\n+    public void testUnknownInstructionSign() throws IOException {\n+        // Modified the sign though\n+        ObjectMapper objectMapper = Jackson.newObjectMapper();\n+        JsonNode json = objectMapper.readTree(\"{\\\"instructions\\\":[{\\\"distance\\\":1.073,\\\"sign\\\":741,\\\"interval\\\":[0,1],\\\"text\\\":\\\"Continue onto A 81\\\",\\\"time\\\":32,\\\"street_name\\\":\\\"A 81\\\"},{\\\"distance\\\":0,\\\"sign\\\":4,\\\"interval\\\":[1,1],\\\"text\\\":\\\"Finish!\\\",\\\"time\\\":0,\\\"street_name\\\":\\\"\\\"}],\\\"descend\\\":0,\\\"ascend\\\":0,\\\"distance\\\":1.073,\\\"bbox\\\":[8.676286,48.354446,8.676297,48.354453],\\\"weight\\\":0.032179,\\\"time\\\":32,\\\"points_encoded\\\":true,\\\"points\\\":\\\"gfcfHwq}s@}c~AAA?\\\",\\\"snapped_waypoints\\\":\\\"gfcfHwq}s@}c~AAA?\\\"}\");\n+        PathWrapper wrapper = PathWrapperDeserializer.createPathWrapper(objectMapper, json, true, true);\n+\n+        assertEquals(741, wrapper.getInstructions().get(0).getSign());\n+        assertEquals(\"Continue onto A 81\", wrapper.getInstructions().get(0).getName());\n+    }\n+\n+    @ParameterizedTest(name = DISPLAY_NAME)\n+    @CsvSource({\"true,0\", \"true,1000\", \"false,-1\"})\n+    public void testPathDetails(boolean usePost, int maxUnzippedLength) {\n+        GraphHopperWeb gh = createGH(usePost, maxUnzippedLength);\n+        GHRequest req = new GHRequest().\n+                addPoint(new GHPoint(42.507065, 1.529846)).\n+                addPoint(new GHPoint(42.510383, 1.533392)).\n+                putHint(\"profile\", \"my_car\");", "originalCommit": "e87aebf132a79081689efb3349e6415227812cbb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMyMDUxMw==", "url": "https://github.com/graphhopper/graphhopper/pull/2003#discussion_r411320513", "bodyText": "Ah, yeah.", "author": "karussell", "createdAt": "2020-04-20T12:01:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMxMTI5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMyMjEwNA==", "url": "https://github.com/graphhopper/graphhopper/pull/2003#discussion_r411322104", "bodyText": "We could fix this when we internally use the hints Map for \"profile\". (btw: we would have the same problem with \"algorithm\" and probably all the other properties)", "author": "karussell", "createdAt": "2020-04-20T12:03:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMxMTI5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMyNjk1MA==", "url": "https://github.com/graphhopper/graphhopper/pull/2003#discussion_r411326950", "bodyText": "Why is there a problem with \"algorithm\" and the others? The problem here seems that we are calling putHint instead of setProfile? Or do you think its better to be able to use both putHint and setProfile? Or do you want to remove setProfile altogether? I have no strong opinion so far, but since profile is even more or less required it seems to deserve its own setter? And if it has a setter it should also have its own field (because Jackson expects this by convention).", "author": "easbar", "createdAt": "2020-04-20T12:12:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMxMTI5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM4MTM3NQ==", "url": "https://github.com/graphhopper/graphhopper/pull/2003#discussion_r411381375", "bodyText": "The problem here seems that we are calling putHint instead of setProfile?\n\nBut for GET this approach works and so people might do it? (not sure)\n\nOr do you want to remove setProfile altogether?\n\nNo, just put the profile string into hints under the hood like\n... setProfile(String profile) {\nhints.put(\"profile\", profile);\nreturn this;\n}\nNot sure if this is nice ...", "author": "karussell", "createdAt": "2020-04-20T13:35:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMxMTI5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM4OTA4OQ==", "url": "https://github.com/graphhopper/graphhopper/pull/2003#discussion_r411389089", "bodyText": "But for GET this approach works and so people might do it? (not sure)\n\nI think it only works for POST, but you are right it should better work the same way for both. If this is our only concern we could also adjust GraphHopperWeb#putHint to set the profile if the given key is profile? Or the other way around throw an error \"use setProfile to set the profile\" in case putHint is used for key \"profile\"? Btw what do you think of removing GET from client-hc altogether? I do not see how it can be useful (except for writing tests that cover both GET and POST maybe but that is not really the purpose of client-hc :)).\n\nNot sure if this is nice ...\n\nYes me neither. I think when there is setProfile Jackson assumes there is a profile field, but not sure if we need to care about this here...", "author": "easbar", "createdAt": "2020-04-20T13:44:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMxMTI5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ0ODgzNw==", "url": "https://github.com/graphhopper/graphhopper/pull/2003#discussion_r411448837", "bodyText": "Btw what do you think of removing GET from client-hc altogether?\n\nHmmh, sounds good. Initially I tought we need a certain transition time to make the POST request more stable, but now everything seems to work already.", "author": "karussell", "createdAt": "2020-04-20T14:59:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMxMTI5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ0OTI4MA==", "url": "https://github.com/graphhopper/graphhopper/pull/2003#discussion_r411449280", "bodyText": "Let's do this, but in another issue :) ?", "author": "karussell", "createdAt": "2020-04-20T15:00:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMxMTI5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ1NDAwNw==", "url": "https://github.com/graphhopper/graphhopper/pull/2003#discussion_r411454007", "bodyText": "but now everything seems to work already\n\nWe should also fix #1996 first then (for example we still have #1995). The only thing I am wondering is if we give POST the higher priority why would you remove gpx export (#2006)? Is this feature somehow not useful anymore or replaced by something else or only supported for GH maps?", "author": "easbar", "createdAt": "2020-04-20T15:05:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMxMTI5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ1NjY4Mw==", "url": "https://github.com/graphhopper/graphhopper/pull/2003#discussion_r411456683", "bodyText": "While the purpose of client-hc is certainly not testing GET&POST /route we still need some way to do this efficiently, it is quite annoying to test both endpoints separately and having bugs in one but not the other endpoint and so on. Or we manage to do very little in the Resource such that there is not much room for errors...", "author": "easbar", "createdAt": "2020-04-20T15:09:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMxMTI5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "31458130f615fa2a39190f9bb0e9f480c6943553", "chunk": "diff --git a/web/src/test/java/com/graphhopper/http/resources/RouteResourceClientHCTest.java b/web/src/test/java/com/graphhopper/http/resources/RouteResourceClientHCTest.java\nindex 887388b13..fd15e889c 100644\n--- a/web/src/test/java/com/graphhopper/http/resources/RouteResourceClientHCTest.java\n+++ b/web/src/test/java/com/graphhopper/http/resources/RouteResourceClientHCTest.java\n\n@@ -339,7 +339,7 @@ public class RouteResourceClientHCTest {\n         GHRequest req = new GHRequest().\n                 addPoint(new GHPoint(42.507065, 1.529846)).\n                 addPoint(new GHPoint(42.510383, 1.533392)).\n-                putHint(\"profile\", \"my_car\");\n+                setProfile( \"my_car\");\n         req.getPathDetails().add(\"average_speed\");\n         GHResponse res = gh.route(req);\n         assertFalse(res.hasErrors(), \"errors:\" + res.getErrors().toString());\n"}}, {"oid": "31458130f615fa2a39190f9bb0e9f480c6943553", "url": "https://github.com/graphhopper/graphhopper/commit/31458130f615fa2a39190f9bb0e9f480c6943553", "message": "use setProfile", "committedDate": "2020-04-20T12:00:11Z", "type": "commit"}, {"oid": "0b13dae9431839c3b4a65dc2e8ccb7d69fa9933e", "url": "https://github.com/graphhopper/graphhopper/commit/0b13dae9431839c3b4a65dc2e8ccb7d69fa9933e", "message": "Merge branch 'master' into offline_it\n\n# Conflicts:\n#\tclient-hc/src/main/java/com/graphhopper/api/GraphHopperWeb.java\n#\tclient-hc/src/test/java/com/graphhopper/api/GraphHopperWebIT.java", "committedDate": "2020-04-21T10:53:54Z", "type": "commit"}, {"oid": "be627ad30a7c1374974ed67fe9d7c9ca28feced0", "url": "https://github.com/graphhopper/graphhopper/commit/be627ad30a7c1374974ed67fe9d7c9ca28feced0", "message": "Use @EnumSource", "committedDate": "2020-04-21T11:03:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE0NzcwMg==", "url": "https://github.com/graphhopper/graphhopper/pull/2003#discussion_r412147702", "bodyText": "Nice!", "author": "karussell", "createdAt": "2020-04-21T12:39:11Z", "path": "web/src/test/java/com/graphhopper/http/resources/RouteResourceClientHCTest.java", "diffHunk": "@@ -0,0 +1,383 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package com.graphhopper.http.resources;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.graphhopper.GHRequest;\n+import com.graphhopper.GHResponse;\n+import com.graphhopper.PathWrapper;\n+import com.graphhopper.api.GraphHopperWeb;\n+import com.graphhopper.config.CHProfileConfig;\n+import com.graphhopper.config.ProfileConfig;\n+import com.graphhopper.http.GraphHopperApplication;\n+import com.graphhopper.http.GraphHopperServerConfiguration;\n+import com.graphhopper.http.util.GraphHopperServerTestConfiguration;\n+import com.graphhopper.http.util.TestUtils;\n+import com.graphhopper.jackson.Jackson;\n+import com.graphhopper.jackson.PathWrapperDeserializer;\n+import com.graphhopper.util.Helper;\n+import com.graphhopper.util.Instruction;\n+import com.graphhopper.util.InstructionList;\n+import com.graphhopper.util.RoundaboutInstruction;\n+import com.graphhopper.util.details.PathDetail;\n+import com.graphhopper.util.exceptions.PointNotFoundException;\n+import com.graphhopper.util.exceptions.PointOutOfBoundsException;\n+import com.graphhopper.util.shapes.GHPoint;\n+import io.dropwizard.testing.junit5.DropwizardAppExtension;\n+import io.dropwizard.testing.junit5.DropwizardExtensionsSupport;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.EnumSource;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.SocketTimeoutException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+/**\n+ * @author Peter Karich\n+ */\n+@ExtendWith(DropwizardExtensionsSupport.class)\n+public class RouteResourceClientHCTest {\n+    private static final String DIR = \"./target/andorra-gh/\";\n+    private static final DropwizardAppExtension<GraphHopperServerConfiguration> app = new DropwizardAppExtension<>(GraphHopperApplication.class, createConfig());\n+\n+    private static GraphHopperServerConfiguration createConfig() {\n+        GraphHopperServerConfiguration config = new GraphHopperServerTestConfiguration();\n+        config.getGraphHopperConfiguration().\n+                putObject(\"graph.flag_encoders\", \"car,bike\").\n+                putObject(\"routing.ch.disabling_allowed\", true).\n+                putObject(\"prepare.min_network_size\", 0).\n+                putObject(\"prepare.min_one_way_network_size\", 0).\n+                putObject(\"graph.elevation.provider\", \"srtm\").\n+                putObject(\"graph.elevation.cachedir\", \"../core/files/\").\n+                putObject(\"datareader.file\", \"../core/files/andorra.osm.pbf\").\n+                putObject(\"graph.encoded_values\", \"road_class,surface,road_environment,max_speed\").\n+                putObject(\"graph.location\", DIR)\n+                .setProfiles(Arrays.asList(new ProfileConfig(\"my_car\").setVehicle(\"car\").setWeighting(\"fastest\"),\n+                        new ProfileConfig(\"my_bike\").setVehicle(\"bike\").setWeighting(\"fastest\")))\n+                .setCHProfiles(Arrays.asList(new CHProfileConfig(\"my_car\"), new CHProfileConfig(\"my_bike\")));\n+        return config;\n+    }\n+\n+    // dropwizard extension does not work with @RunWith(Parameterized.class), but we can use an @EnumSource or similar\n+    // and on each test method. see https://github.com/graphhopper/graphhopper/pull/2003", "originalCommit": "be627ad30a7c1374974ed67fe9d7c9ca28feced0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}