{"pr_number": 1962, "pr_title": "more PMap refactoring", "pr_createdAt": "2020-03-19T10:52:03Z", "pr_url": "https://github.com/graphhopper/graphhopper/pull/1962", "timeline": [{"oid": "cf8ef8fb3e905e93f5c13592d64b68d34f4c12d6", "url": "https://github.com/graphhopper/graphhopper/commit/cf8ef8fb3e905e93f5c13592d64b68d34f4c12d6", "message": "more PMap refactoring", "committedDate": "2020-03-19T10:51:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk0MjA5Ng==", "url": "https://github.com/graphhopper/graphhopper/pull/1962#discussion_r394942096", "bodyText": "I think we need putObject(Routing.EDGE_BASED, Helper.toObject(edgeBasedParam)) here (previously this code relied on the string being converted to boolean... This is a bit ugly code, and will be gone in #1958 :)", "author": "easbar", "createdAt": "2020-03-19T10:56:30Z", "path": "reader-osm/src/test/java/com/graphhopper/GraphHopperIT.java", "diffHunk": "@@ -1549,7 +1549,7 @@ private GHResponse assertMoscowEdgeBased(GraphHopper hopper, String edgeBasedPar\n     private GHResponse runMoscow(GraphHopper hopper, String edgeBasedParam, boolean ch) {\n         GHRequest req = new GHRequest(55.813357, 37.5958585, 55.811042, 37.594689);\n         if (edgeBasedParam.equals(\"true\") || edgeBasedParam.equals(\"false\")) {\n-            req.getHints().put(Routing.EDGE_BASED, edgeBasedParam);\n+            req.getHints().putObject(Routing.EDGE_BASED, edgeBasedParam);", "originalCommit": "cf8ef8fb3e905e93f5c13592d64b68d34f4c12d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk0ODYxMQ==", "url": "https://github.com/graphhopper/graphhopper/pull/1962#discussion_r394948611", "bodyText": "Ah, ok.", "author": "karussell", "createdAt": "2020-03-19T11:09:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk0MjA5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "690a4920d0402af665202a14c28defc0e43876e3", "chunk": "diff --git a/reader-osm/src/test/java/com/graphhopper/GraphHopperIT.java b/reader-osm/src/test/java/com/graphhopper/GraphHopperIT.java\nindex 4f4959a27..e346ff3c4 100644\n--- a/reader-osm/src/test/java/com/graphhopper/GraphHopperIT.java\n+++ b/reader-osm/src/test/java/com/graphhopper/GraphHopperIT.java\n\n@@ -1549,7 +1549,7 @@ public class GraphHopperIT {\n     private GHResponse runMoscow(GraphHopper hopper, String edgeBasedParam, boolean ch) {\n         GHRequest req = new GHRequest(55.813357, 37.5958585, 55.811042, 37.594689);\n         if (edgeBasedParam.equals(\"true\") || edgeBasedParam.equals(\"false\")) {\n-            req.getHints().putObject(Routing.EDGE_BASED, edgeBasedParam);\n+            req.getHints().putObject(Routing.EDGE_BASED, Helper.toObject(edgeBasedParam));\n         } else {\n             req.getHints().remove(Routing.EDGE_BASED);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk0Mjc4Mg==", "url": "https://github.com/graphhopper/graphhopper/pull/1962#discussion_r394942782", "bodyText": "This is dangerous, I think if we pass \"1\" here, e.g. getInt(\"prepare.min_network_size\", 102) will return 102.", "author": "easbar", "createdAt": "2020-03-19T10:57:48Z", "path": "reader-osm/src/test/java/com/graphhopper/reader/osm/GraphHopperOSMTest.java", "diffHunk": "@@ -668,9 +668,9 @@ public void testVia() {\n         final String weighting = \"fastest\";\n         instance = new GraphHopperOSM().setStoreOnFlush(true).\n                 init(new GraphHopperConfig().\n-                        put(\"datareader.file\", testOsm3).\n-                        put(\"prepare.min_network_size\", \"1\").\n-                        put(\"graph.flag_encoders\", vehicle)\n+                        putObject(\"datareader.file\", testOsm3).\n+                        putObject(\"prepare.min_network_size\", \"1\").", "originalCommit": "cf8ef8fb3e905e93f5c13592d64b68d34f4c12d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk0ODM4NA==", "url": "https://github.com/graphhopper/graphhopper/pull/1962#discussion_r394948384", "bodyText": "Oops, thanks!", "author": "karussell", "createdAt": "2020-03-19T11:08:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk0Mjc4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "690a4920d0402af665202a14c28defc0e43876e3", "chunk": "diff --git a/reader-osm/src/test/java/com/graphhopper/reader/osm/GraphHopperOSMTest.java b/reader-osm/src/test/java/com/graphhopper/reader/osm/GraphHopperOSMTest.java\nindex b767c00e1..ef679c90d 100644\n--- a/reader-osm/src/test/java/com/graphhopper/reader/osm/GraphHopperOSMTest.java\n+++ b/reader-osm/src/test/java/com/graphhopper/reader/osm/GraphHopperOSMTest.java\n\n@@ -669,7 +669,7 @@ public class GraphHopperOSMTest {\n         instance = new GraphHopperOSM().setStoreOnFlush(true).\n                 init(new GraphHopperConfig().\n                         putObject(\"datareader.file\", testOsm3).\n-                        putObject(\"prepare.min_network_size\", \"1\").\n+                        putObject(\"prepare.min_network_size\", 1).\n                         putObject(\"graph.flag_encoders\", vehicle)\n                         .setProfiles(Collections.singletonList(new ProfileConfig(\"profile\").setVehicle(vehicle).setWeighting(weighting)))\n                         .setCHProfiles(Collections.singletonList(new CHProfileConfig(\"profile\")))\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk0NDI0Ng==", "url": "https://github.com/graphhopper/graphhopper/pull/1962#discussion_r394944246", "bodyText": "Here we need Helper.toObject(turnCosts.get(0)), as mentioned here (in case you missed this): #1956 (comment)", "author": "easbar", "createdAt": "2020-03-19T11:00:34Z", "path": "web-bundle/src/main/java/com/graphhopper/resources/RouteResource.java", "diffHunk": "@@ -233,7 +233,7 @@ private void translateTurnCostsParamToEdgeBased(GHRequest request, MultivaluedMa\n             if (turnCosts.size() != 1) {\n                 throw new IllegalArgumentException(\"You may only specify the turn_costs parameter once\");\n             }\n-            request.getHints().put(EDGE_BASED, turnCosts.get(0));\n+            request.putHint(EDGE_BASED, turnCosts.get(0));", "originalCommit": "cf8ef8fb3e905e93f5c13592d64b68d34f4c12d6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "690a4920d0402af665202a14c28defc0e43876e3", "chunk": "diff --git a/web-bundle/src/main/java/com/graphhopper/resources/RouteResource.java b/web-bundle/src/main/java/com/graphhopper/resources/RouteResource.java\nindex 37e00d43e..e183187b1 100644\n--- a/web-bundle/src/main/java/com/graphhopper/resources/RouteResource.java\n+++ b/web-bundle/src/main/java/com/graphhopper/resources/RouteResource.java\n\n@@ -233,7 +233,7 @@ public class RouteResource {\n             if (turnCosts.size() != 1) {\n                 throw new IllegalArgumentException(\"You may only specify the turn_costs parameter once\");\n             }\n-            request.putHint(EDGE_BASED, turnCosts.get(0));\n+            request.putHint(EDGE_BASED, Helper.toObject(turnCosts.get(0)));\n         }\n     }\n \n"}}, {"oid": "690a4920d0402af665202a14c28defc0e43876e3", "url": "https://github.com/graphhopper/graphhopper/commit/690a4920d0402af665202a14c28defc0e43876e3", "message": "include review suggestions", "committedDate": "2020-03-19T14:56:02Z", "type": "commit"}]}