{"pr_number": 1956, "pr_title": "refactor PMap to use string,object instead of string,string", "pr_createdAt": "2020-03-14T22:40:05Z", "pr_url": "https://github.com/graphhopper/graphhopper/pull/1956", "timeline": [{"oid": "e46c8223c5597d750a03b03ae9ee8ca65bb911a7", "url": "https://github.com/graphhopper/graphhopper/commit/e46c8223c5597d750a03b03ae9ee8ca65bb911a7", "message": "refactor PMap to use string,object instead string,string", "committedDate": "2020-03-14T22:36:15Z", "type": "commit"}, {"oid": "5b9e2bdc37e5196a5d72d2f01675ae8a4ddfb1a8", "url": "https://github.com/graphhopper/graphhopper/commit/5b9e2bdc37e5196a5d72d2f01675ae8a4ddfb1a8", "message": "cleaner toJson conversion", "committedDate": "2020-03-14T22:50:22Z", "type": "commit"}, {"oid": "7adb35fcf084a59dcba2689d29ab95f0eab420e8", "url": "https://github.com/graphhopper/graphhopper/commit/7adb35fcf084a59dcba2689d29ab95f0eab420e8", "message": "command line parameter reading requires toObject conversion", "committedDate": "2020-03-15T18:22:15Z", "type": "commit"}, {"oid": "dfb96d06d1fa210e6e652f1c4c01015ba6762d4a", "url": "https://github.com/graphhopper/graphhopper/commit/dfb96d06d1fa210e6e652f1c4c01015ba6762d4a", "message": "add changelog entry", "committedDate": "2020-03-15T18:32:44Z", "type": "commit"}, {"oid": "41b71999b3e9ff6752ab349e30049828f4773b90", "url": "https://github.com/graphhopper/graphhopper/commit/41b71999b3e9ff6752ab349e30049828f4773b90", "message": "Merge branch 'master' into pmap_refactoring", "committedDate": "2020-03-17T21:50:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk5NTkyMA==", "url": "https://github.com/graphhopper/graphhopper/pull/1956#discussion_r393995920", "bodyText": "Why do we have to turn this into a string here? Can we not just keep the object? Aren't there possible cases where we want to add the actual object to the json tree instead of converting it into a string? Hm, but this requires object-to-json serialization to create a (sub)JsonNode?", "author": "easbar", "createdAt": "2020-03-17T22:01:09Z", "path": "client-hc/src/main/java/com/graphhopper/api/GHMatrixAbstractRequester.java", "diffHunk": "@@ -106,13 +106,13 @@ protected JsonNode createPostRequest(GHMRequest ghRequest, Collection<String> ou\n         // requestJson.put(\"elevation\", ghRequest.getHints().getBool(\"elevation\", false));\n         requestJson.put(\"fail_fast\", ghRequest.getFailFast());\n \n-        Map<String, String> hintsMap = ghRequest.getHints().toMap();\n+        Map<String, Object> hintsMap = ghRequest.getHints().toMap();\n         for (String hintKey : hintsMap.keySet()) {\n             if (ignoreSet.contains(hintKey))\n                 continue;\n \n-            String hint = hintsMap.get(hintKey);\n-            requestJson.put(hintKey, hint);\n+            Object hint = hintsMap.get(hintKey);\n+            requestJson.put(hintKey, hint.toString());", "originalCommit": "dfb96d06d1fa210e6e652f1c4c01015ba6762d4a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9e3d04ed88f9d18d4c31a80f9137e61028fd8280", "chunk": "diff --git a/client-hc/src/main/java/com/graphhopper/api/GHMatrixAbstractRequester.java b/client-hc/src/main/java/com/graphhopper/api/GHMatrixAbstractRequester.java\nindex 7a82a9ec8..e96009ed9 100644\n--- a/client-hc/src/main/java/com/graphhopper/api/GHMatrixAbstractRequester.java\n+++ b/client-hc/src/main/java/com/graphhopper/api/GHMatrixAbstractRequester.java\n\n@@ -112,7 +112,10 @@ public abstract class GHMatrixAbstractRequester {\n                 continue;\n \n             Object hint = hintsMap.get(hintKey);\n-            requestJson.put(hintKey, hint.toString());\n+            if (hint instanceof String)\n+                requestJson.put(hintKey, (String) hint);\n+            else\n+                requestJson.putPOJO(hintKey, hint);\n         }\n         return requestJson;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk5NzM3MA==", "url": "https://github.com/graphhopper/graphhopper/pull/1956#discussion_r393997370", "bodyText": "Similar to AbstractMatrixRequester: Can we keep the actual object instead of turning into a string here? But we can probably add this when we really need it. I just wonder in which case the toString() implementation will be of actual use (if it cannot be parsed later its useless or might even break the json format (?)).", "author": "easbar", "createdAt": "2020-03-17T22:04:41Z", "path": "client-hc/src/main/java/com/graphhopper/api/GraphHopperWeb.java", "diffHunk": "@@ -258,13 +258,26 @@ private Request createPostRequest(GHRequest ghRequest) {\n         requestJson.put(\"elevation\", ghRequest.getHints().getBool(\"elevation\", elevation));\n         requestJson.put(\"optimize\", ghRequest.getHints().get(\"optimize\", optimize));\n \n-        Map<String, String> hintsMap = ghRequest.getHints().toMap();\n-        for (String hintKey : hintsMap.keySet()) {\n+        Map<String, Object> hintsMap = ghRequest.getHints().toMap();\n+        for (Map.Entry<String, Object> entry : hintsMap.entrySet()) {\n+            String hintKey = entry.getKey();\n             if (ignoreSetForPost.contains(hintKey))\n                 continue;\n \n-            String hint = hintsMap.get(hintKey);\n-            requestJson.put(hintKey, hint);\n+            // try proper JSON conversion at least for numbers and booleans\n+            Object hint = entry.getValue();\n+            if (hint instanceof Boolean)\n+                requestJson.put(hintKey, (Boolean) hint);\n+            else if (hint instanceof Integer)\n+                requestJson.put(hintKey, (Integer) hint);\n+            else if (hint instanceof Long)\n+                requestJson.put(hintKey, (Long) hint);\n+            else if (hint instanceof Float)\n+                requestJson.put(hintKey, (Float) hint);\n+            else if (hint instanceof Double)\n+                requestJson.put(hintKey, (Double) hint);\n+            else\n+                requestJson.put(hintKey, hint.toString());", "originalCommit": "dfb96d06d1fa210e6e652f1c4c01015ba6762d4a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIzMzA4OA==", "url": "https://github.com/graphhopper/graphhopper/pull/1956#discussion_r394233088", "bodyText": "Ah, you mean with putPOJO ... will try.", "author": "karussell", "createdAt": "2020-03-18T10:09:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk5NzM3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI1MjgzNA==", "url": "https://github.com/graphhopper/graphhopper/pull/1956#discussion_r394252834", "bodyText": "Yes, maybe, does this use Jackson internally (when it is finally serialized)?", "author": "easbar", "createdAt": "2020-03-18T10:42:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk5NzM3MA=="}], "type": "inlineReview", "revised_code": {"commit": "9e3d04ed88f9d18d4c31a80f9137e61028fd8280", "chunk": "diff --git a/client-hc/src/main/java/com/graphhopper/api/GraphHopperWeb.java b/client-hc/src/main/java/com/graphhopper/api/GraphHopperWeb.java\nindex 0cae016ad..dbe3ab87e 100644\n--- a/client-hc/src/main/java/com/graphhopper/api/GraphHopperWeb.java\n+++ b/client-hc/src/main/java/com/graphhopper/api/GraphHopperWeb.java\n\n@@ -264,20 +264,11 @@ public class GraphHopperWeb implements GraphHopperAPI {\n             if (ignoreSetForPost.contains(hintKey))\n                 continue;\n \n-            // try proper JSON conversion at least for numbers and booleans\n-            Object hint = entry.getValue();\n-            if (hint instanceof Boolean)\n-                requestJson.put(hintKey, (Boolean) hint);\n-            else if (hint instanceof Integer)\n-                requestJson.put(hintKey, (Integer) hint);\n-            else if (hint instanceof Long)\n-                requestJson.put(hintKey, (Long) hint);\n-            else if (hint instanceof Float)\n-                requestJson.put(hintKey, (Float) hint);\n-            else if (hint instanceof Double)\n-                requestJson.put(hintKey, (Double) hint);\n+            // special case for String required, see testPutPOJO\n+            if (entry.getValue() instanceof String)\n+                requestJson.put(hintKey, (String) entry.getValue());\n             else\n-                requestJson.put(hintKey, hint.toString());\n+                requestJson.putPOJO(hintKey, entry.getValue());\n         }\n         String stringData = requestJson.toString();\n         Request.Builder builder = new Request.Builder().url(url).post(RequestBody.create(MT_JSON, stringData));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk5ODM3MA==", "url": "https://github.com/graphhopper/graphhopper/pull/1956#discussion_r393998370", "bodyText": "Here I also wonder in which cases the toString() method really produces something useful. (In this case it must be valid to use as url parameter).", "author": "easbar", "createdAt": "2020-03-17T22:07:07Z", "path": "client-hc/src/main/java/com/graphhopper/api/GraphHopperWeb.java", "diffHunk": "@@ -341,9 +354,9 @@ private Request createGetRequest(GHRequest ghRequest) {\n             url += \"&key=\" + WebHelper.encodeURL(key);\n         }\n \n-        for (Map.Entry<String, String> entry : ghRequest.getHints().toMap().entrySet()) {\n+        for (Map.Entry<String, Object> entry : ghRequest.getHints().toMap().entrySet()) {\n             String urlKey = entry.getKey();\n-            String urlValue = entry.getValue();\n+            String urlValue = entry.getValue().toString();", "originalCommit": "dfb96d06d1fa210e6e652f1c4c01015ba6762d4a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIzNDgyMw==", "url": "https://github.com/graphhopper/graphhopper/pull/1956#discussion_r394234823", "bodyText": "As we use WebHelper.encodeURL this should be fine (?)", "author": "karussell", "createdAt": "2020-03-18T10:12:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk5ODM3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI1NDk2Mw==", "url": "https://github.com/graphhopper/graphhopper/pull/1956#discussion_r394254963", "bodyText": "Hm, yeah encoding the url probably replaces invalid characters, but the real question is will this ever be useful on the server side? Sure toString() might produce something that can be parsed later, but that entirely depends on the object we put in (which seems a bit fragile and forces one to implement toString() in a certain way (which I do not like so much)). Then again I do not have a much better idea :) But maybe we can throw an error if the value is not a number and not a string (are there any actual use cases where we want to toString() an object into a url parameter?)", "author": "easbar", "createdAt": "2020-03-18T10:46:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk5ODM3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI1OTEyNQ==", "url": "https://github.com/graphhopper/graphhopper/pull/1956#discussion_r394259125", "bodyText": "As we use by default a POST request this should not make a problem IMO. Throwing an error is a bit clumsy as we need to check for boolean, short, byte, int, double, ...", "author": "karussell", "createdAt": "2020-03-18T10:53:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk5ODM3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI2MzAzNg==", "url": "https://github.com/graphhopper/graphhopper/pull/1956#discussion_r394263036", "bodyText": "Hm, but this whole method is about creating the url parameters for a GET request. If we do not use it and only use POST we should rather remove the entire method. Checking for 'number, boolean, string or something else' might take a few lines to do but that should not be a problem. Then again if you think using toString() is fine we can just as well keep it :) (I just do not really know in which case it would be useful and do not want to encourage people to adjust their toString() implementation to make it work with this url creation code).", "author": "easbar", "createdAt": "2020-03-18T11:00:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk5ODM3MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwMDY1MQ==", "url": "https://github.com/graphhopper/graphhopper/pull/1956#discussion_r394000651", "bodyText": "Why not just name this put as well (overload the existing put method)? Because of the camelcase/underscore conversion?", "author": "easbar", "createdAt": "2020-03-17T22:13:08Z", "path": "api/src/main/java/com/graphhopper/util/PMap.java", "diffHunk": "@@ -83,145 +80,93 @@ public static PMap read(String[] args) {\n             }\n \n             String value = arg.substring(index + 1);\n-            String old = map.put(toLowerCase(key), value);\n+            Object old = map.map.put(Helper.camelCaseToUnderScore(key), Helper.toObject(value));\n             if (old != null)\n-                throw new IllegalArgumentException(\"Pair '\" + toLowerCase(key) + \"'='\" + value + \"' not possible to \" +\n+                throw new IllegalArgumentException(\"Pair '\" + Helper.camelCaseToUnderScore(key) + \"'='\" + value + \"' not possible to \" +\n                         \"add to the PMap-object as the key already exists with '\" + old + \"'\");\n         }\n-        return new PMap(map);\n+        return map;\n     }\n \n     public PMap put(PMap map) {\n         this.map.putAll(map.map);\n         return this;\n     }\n \n-    public PMap put(String key, Object str) {\n+    /**\n+     * @deprecated use {@link #putObject(String, Object)} instead\n+     */\n+    public PMap put(String key, String str) {\n         if (str == null)\n             throw new NullPointerException(\"Value cannot be null. Use remove instead.\");\n-\n-        // store in under_score\n-        map.put(Helper.camelCaseToUnderScore(key), str.toString());\n+        map.put(Helper.camelCaseToUnderScore(key), Helper.toObject(str));\n         return this;\n     }\n \n     public PMap remove(String key) {\n         // query accepts camelCase and under_score\n-        map.remove(Helper.camelCaseToUnderScore(key));\n+        map.remove(key);\n         return this;\n     }\n \n     public boolean has(String key) {\n         // query accepts camelCase and under_score\n-        return map.containsKey(Helper.camelCaseToUnderScore(key));\n+        return map.containsKey(key);\n     }\n \n-    public long getLong(String key, long _default) {\n-        String str = get(key);\n-        if (!Helper.isEmpty(str)) {\n-            try {\n-                return Long.parseLong(str);\n-            } catch (Exception ex) {\n-            }\n-        }\n-        return _default;\n+    public boolean getBool(String key, boolean _default) {\n+        Object object = map.get(key);\n+        return object instanceof Boolean ? (Boolean) object : _default;\n     }\n \n     public int getInt(String key, int _default) {\n-        String str = get(key);\n-        if (!Helper.isEmpty(str)) {\n-            try {\n-                return Integer.parseInt(str);\n-            } catch (Exception ex) {\n-            }\n-        }\n-        return _default;\n+        Object object = map.get(key);\n+        return object instanceof Number ? ((Number) object).intValue() : _default;\n     }\n \n-    public boolean getBool(String key, boolean _default) {\n-        String str = get(key);\n-        if (!Helper.isEmpty(str)) {\n-            try {\n-                return Boolean.parseBoolean(str);\n-            } catch (Exception ex) {\n-            }\n-        }\n-        return _default;\n+    public long getLong(String key, long _default) {\n+        Object object = map.get(key);\n+        return object instanceof Number ? ((Number) object).longValue() : _default;\n     }\n \n-    public double getDouble(String key, double _default) {\n-        String str = get(key);\n-        if (!Helper.isEmpty(str)) {\n-            try {\n-                return Double.parseDouble(str);\n-            } catch (Exception ex) {\n-            }\n-        }\n-        return _default;\n+    public float getFloat(String key, float _default) {\n+        Object object = map.get(key);\n+        return object instanceof Number ? ((Number) object).floatValue() : _default;\n     }\n \n-    public float getFloat(String key, float _default) {\n-        String str = get(key);\n-        if (!Helper.isEmpty(str)) {\n-            try {\n-                return Float.parseFloat(str);\n-            } catch (Exception ex) {\n-            }\n-        }\n-        return _default;\n+    public double getDouble(String key, double _default) {\n+        Object object = map.get(key);\n+        return object instanceof Number ? ((Number) object).doubleValue() : _default;\n     }\n \n     public String get(String key, String _default) {\n-        String str = get(key);\n-        if (Helper.isEmpty(str))\n-            return _default;\n-\n-        return str;\n+        Object object = map.get(key);\n+        return object instanceof String ? (String) object : _default;\n     }\n \n-    String get(String key) {\n-        if (Helper.isEmpty(key))\n-            return \"\";\n-\n-        // query accepts camelCase and under_score\n-        String val = map.get(Helper.camelCaseToUnderScore(key));\n-        if (val == null)\n-            return \"\";\n+    public Object getObject(String key, Object _default) {\n+        Object object = map.get(key);\n+        return object == null ? _default : object;\n+    }\n \n-        return val;\n+    public PMap putObject(String key, Object object) {", "originalCommit": "dfb96d06d1fa210e6e652f1c4c01015ba6762d4a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "59a932d525b79e0483f5b5ceae8329f6318d92cc", "chunk": "diff --git a/api/src/main/java/com/graphhopper/util/PMap.java b/api/src/main/java/com/graphhopper/util/PMap.java\nindex 523833a2a..34e99c455 100644\n--- a/api/src/main/java/com/graphhopper/util/PMap.java\n+++ b/api/src/main/java/com/graphhopper/util/PMap.java\n\n@@ -104,13 +104,11 @@ public class PMap {\n     }\n \n     public PMap remove(String key) {\n-        // query accepts camelCase and under_score\n         map.remove(key);\n         return this;\n     }\n \n     public boolean has(String key) {\n-        // query accepts camelCase and under_score\n         return map.containsKey(key);\n     }\n \n"}}, {"oid": "1d3e4eae5508b51ef7088e189da6af40b9a9cbf1", "url": "https://github.com/graphhopper/graphhopper/commit/1d3e4eae5508b51ef7088e189da6af40b9a9cbf1", "message": "Minor", "committedDate": "2020-03-17T22:15:51Z", "type": "commit"}, {"oid": "59a932d525b79e0483f5b5ceae8329f6318d92cc", "url": "https://github.com/graphhopper/graphhopper/commit/59a932d525b79e0483f5b5ceae8329f6318d92cc", "message": "minor simplification", "committedDate": "2020-03-18T10:42:57Z", "type": "commit"}, {"oid": "9e3d04ed88f9d18d4c31a80f9137e61028fd8280", "url": "https://github.com/graphhopper/graphhopper/commit/9e3d04ed88f9d18d4c31a80f9137e61028fd8280", "message": "avoid value.toString for POST", "committedDate": "2020-03-18T10:42:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI1ODgxNA==", "url": "https://github.com/graphhopper/graphhopper/pull/1956#discussion_r394258814", "bodyText": "Does this not give a NPE in case there is no u_turn_costs entry?", "author": "easbar", "createdAt": "2020-03-18T10:53:10Z", "path": "core/src/main/java/com/graphhopper/routing/ProfileResolver.java", "diffHunk": "@@ -200,10 +198,10 @@ private String getCHRequestAsString(HintsMap hintsMap, Boolean edgeBased, Intege\n     }\n \n     private Boolean getEdgeBased(HintsMap hintsMap) {\n-        return hintsMap.has(Parameters.Routing.EDGE_BASED) ? hintsMap.getBool(Parameters.Routing.EDGE_BASED, false) : null;\n+        return (Boolean) hintsMap.getObject(Parameters.Routing.EDGE_BASED, null);\n     }\n \n     private Integer getUTurnCosts(HintsMap hintsMap) {\n-        return hintsMap.has(Parameters.Routing.U_TURN_COSTS) ? hintsMap.getInt(Parameters.Routing.U_TURN_COSTS, INFINITE_U_TURN_COSTS) : null;\n+        return (Integer) hintsMap.getObject(Parameters.Routing.U_TURN_COSTS, null);", "originalCommit": "9e3d04ed88f9d18d4c31a80f9137e61028fd8280", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI2MTYyNA==", "url": "https://github.com/graphhopper/graphhopper/pull/1956#discussion_r394261624", "bodyText": "If there is no u_turn_cost entry it will return null and casting this to Integer is possible without NPE. So it should return null like before.", "author": "karussell", "createdAt": "2020-03-18T10:58:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI1ODgxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI3NDE2OQ==", "url": "https://github.com/graphhopper/graphhopper/pull/1956#discussion_r394274169", "bodyText": "I thought casting null gives NPE, but you are right. Ah casting to int gives NPE, well that makes sense :)", "author": "easbar", "createdAt": "2020-03-18T11:21:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI1ODgxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg0ODIxOQ==", "url": "https://github.com/graphhopper/graphhopper/pull/1956#discussion_r394848219", "bodyText": "There is another problem with this approach: If the value in hintsMap is a String (like \"true\") this will lead to a ClassCastException.", "author": "easbar", "createdAt": "2020-03-19T08:05:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI1ODgxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg1ODU1OQ==", "url": "https://github.com/graphhopper/graphhopper/pull/1956#discussion_r394858559", "bodyText": "... and the reason I ran into this is that RouteResource#translateTurnCostsParamToEdgeBased is not using Helper.toObject... This of course can be fixed, but I still think the old approach is better (because it avoids the ClassCastException). wdyt?", "author": "easbar", "createdAt": "2020-03-19T08:27:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI1ODgxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk2NDMxNg==", "url": "https://github.com/graphhopper/graphhopper/pull/1956#discussion_r394964316", "bodyText": "For example I could do a query with edge_based=chocolate and this will yield a ClassCastException (a 500 error)", "author": "easbar", "createdAt": "2020-03-19T11:39:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI1ODgxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk2ODQzNA==", "url": "https://github.com/graphhopper/graphhopper/pull/1956#discussion_r394968434", "bodyText": "Oh, this is very ugly. And this is a problem we now have for all methods. E.g. short_fastest.distance_factor=blup will cause the same ClassCastException.\nShould we modify the getter methods and if not the expected class we return the default?", "author": "karussell", "createdAt": "2020-03-19T11:47:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI1ODgxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk3MzQ2MQ==", "url": "https://github.com/graphhopper/graphhopper/pull/1956#discussion_r394973461", "bodyText": "Are you sure? hints.getFloat(\"short_fastest.distance_factor\", 3.6) should just work. The problem here is only that we use getObject and then cast to Boolean?", "author": "easbar", "createdAt": "2020-03-19T11:57:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI1ODgxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk3NDI5NQ==", "url": "https://github.com/graphhopper/graphhopper/pull/1956#discussion_r394974295", "bodyText": "Should we modify the getter methods and if not the expected class we return the default?\n\nIsn't this exactly what we do (in `getFloat/Bool/Double etc)?", "author": "easbar", "createdAt": "2020-03-19T11:59:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI1ODgxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk3NjM2Mg==", "url": "https://github.com/graphhopper/graphhopper/pull/1956#discussion_r394976362", "bodyText": "Oh, sorry. Again a stale-state in my mind. I had a cast approach for PMap before I realized that instanceof is better...", "author": "karussell", "createdAt": "2020-03-19T12:03:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI1ODgxNA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "a00ac1bd67bc4b2baaeea459644be0dd3c38abf8", "url": "https://github.com/graphhopper/graphhopper/commit/a00ac1bd67bc4b2baaeea459644be0dd3c38abf8", "message": "avoid silent errors and rename get to getString", "committedDate": "2020-03-18T11:11:20Z", "type": "commit"}]}