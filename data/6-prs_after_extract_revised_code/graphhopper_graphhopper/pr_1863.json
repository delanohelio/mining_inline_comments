{"pr_number": 1863, "pr_title": "Remove TurnWeighting and handle turn weights within Weighting instead", "pr_createdAt": "2020-01-23T17:01:28Z", "pr_url": "https://github.com/graphhopper/graphhopper/pull/1863", "timeline": [{"oid": "84b72329cfff7ce4f1fedebad3fee64c202fcdde", "url": "https://github.com/graphhopper/graphhopper/commit/84b72329cfff7ce4f1fedebad3fee64c202fcdde", "message": "Calculate turn costs via TurnCostProvider within AbstractWeighting", "committedDate": "2020-01-19T20:38:17Z", "type": "commit"}, {"oid": "d98c46df55e7ef8748adf0ee446f2a31e0d9b12b", "url": "https://github.com/graphhopper/graphhopper/commit/d98c46df55e7ef8748adf0ee446f2a31e0d9b12b", "message": "Add constructor with TurnCostProvider argument to the other weightings as well", "committedDate": "2020-01-19T21:31:35Z", "type": "commit"}, {"oid": "ce94a7ddfef9224a059e3d1b53631ce5105313d0", "url": "https://github.com/graphhopper/graphhopper/commit/ce94a7ddfef9224a059e3d1b53631ce5105313d0", "message": "Remove Weighting#calcWeight/Millis", "committedDate": "2020-01-19T22:53:00Z", "type": "commit"}, {"oid": "d0f81009b9016c092224047e696da4696498339e", "url": "https://github.com/graphhopper/graphhopper/commit/d0f81009b9016c092224047e696da4696498339e", "message": "Start removing usages of TurnWeighting, 29 left", "committedDate": "2020-01-20T08:07:32Z", "type": "commit"}, {"oid": "fac108000d1b13317b2f6439532a95f37c52ada8", "url": "https://github.com/graphhopper/graphhopper/commit/fac108000d1b13317b2f6439532a95f37c52ada8", "message": "Remove TurnWeighting and QueryGraphTurnCostStorage, add QueryGraphWeighting", "committedDate": "2020-01-20T16:35:35Z", "type": "commit"}, {"oid": "c5ecfec34d8560d646ae7eb30e8bd81064fb4881", "url": "https://github.com/graphhopper/graphhopper/commit/c5ecfec34d8560d646ae7eb30e8bd81064fb4881", "message": "Set up turn cost providers when creating weightings for edge-based CH profiles", "committedDate": "2020-01-21T21:40:21Z", "type": "commit"}, {"oid": "0fdab427ea530721a8ed299550de7dd90fcbaee2", "url": "https://github.com/graphhopper/graphhopper/commit/0fdab427ea530721a8ed299550de7dd90fcbaee2", "message": "Move u_turn_costs parameter from CHProfile into (default) turn cost provider", "committedDate": "2020-01-22T09:16:30Z", "type": "commit"}, {"oid": "fe9204411f871c1e6a0ae0c326c06201ac6ad18a", "url": "https://github.com/graphhopper/graphhopper/commit/fe9204411f871c1e6a0ae0c326c06201ac6ad18a", "message": "Merge branch 'master' into remove_turn_weighting\n\n# Conflicts:\n#\tcore/src/test/java/com/graphhopper/routing/weighting/RandomizedRoutingTest.java", "committedDate": "2020-01-23T07:59:36Z", "type": "commit"}, {"oid": "fccada71af4b3dd3c32436a2753c68508d8b8c9e", "url": "https://github.com/graphhopper/graphhopper/commit/fccada71af4b3dd3c32436a2753c68508d8b8c9e", "message": "Use Strings to add CH profiles to GraphBuilder", "committedDate": "2020-01-23T09:00:09Z", "type": "commit"}, {"oid": "aad8fde907f419364b70fdcd4523e00c8b71ce54", "url": "https://github.com/graphhopper/graphhopper/commit/aad8fde907f419364b70fdcd4523e00c8b71ce54", "message": "Merge branch 'master' into graph_builder_ch_strings", "committedDate": "2020-01-23T09:01:33Z", "type": "commit"}, {"oid": "570d592770bd74fc81c79063e46aee3e46f65a74", "url": "https://github.com/graphhopper/graphhopper/commit/570d592770bd74fc81c79063e46aee3e46f65a74", "message": "Fix test", "committedDate": "2020-01-23T09:39:15Z", "type": "commit"}, {"oid": "c164f8107aa49b4aa00b1b480f6bef29e9a23d27", "url": "https://github.com/graphhopper/graphhopper/commit/c164f8107aa49b4aa00b1b480f6bef29e9a23d27", "message": "Merge branch 'master' into remove_turn_weighting", "committedDate": "2020-01-23T12:49:04Z", "type": "commit"}, {"oid": "1b76189b1cfa445d8c0ae5a2d7d2d70ec7278cf2", "url": "https://github.com/graphhopper/graphhopper/commit/1b76189b1cfa445d8c0ae5a2d7d2d70ec7278cf2", "message": "Merge branch 'graph_builder_ch_strings' into remove_turn_weighting\n\n# Conflicts:\n#\tcore/src/main/java/com/graphhopper/storage/GraphBuilder.java\n#\tcore/src/test/java/com/graphhopper/routing/CHQueryWithTurnCostsTest.java\n#\tcore/src/test/java/com/graphhopper/routing/RandomCHRoutingTest.java\n#\tcore/src/test/java/com/graphhopper/routing/ch/EdgeBasedNodeContractorTest.java\n#\tcore/src/test/java/com/graphhopper/routing/ch/EdgeBasedWitnessPathSearcherTest.java\n#\tcore/src/test/java/com/graphhopper/storage/ShortcutUnpackerTest.java", "committedDate": "2020-01-23T12:51:47Z", "type": "commit"}, {"oid": "44a712bf9bbba28848d48e77688ee5b63e199eb8", "url": "https://github.com/graphhopper/graphhopper/commit/44a712bf9bbba28848d48e77688ee5b63e199eb8", "message": "Merge branch 'master' into remove_turn_weighting\n\n# Conflicts:\n#\tcore/src/main/java/com/graphhopper/storage/GraphBuilder.java\n#\tcore/src/test/java/com/graphhopper/routing/CHQueryWithTurnCostsTest.java\n#\tcore/src/test/java/com/graphhopper/routing/RandomCHRoutingTest.java\n#\tcore/src/test/java/com/graphhopper/routing/ch/EdgeBasedNodeContractorTest.java\n#\tcore/src/test/java/com/graphhopper/routing/ch/EdgeBasedWitnessPathSearcherTest.java\n#\tcore/src/test/java/com/graphhopper/storage/ShortcutUnpackerTest.java", "committedDate": "2020-01-23T12:53:36Z", "type": "commit"}, {"oid": "4ac888889191480766b609aaf511dd13909b339d", "url": "https://github.com/graphhopper/graphhopper/commit/4ac888889191480766b609aaf511dd13909b339d", "message": "Fix imports", "committedDate": "2020-01-23T13:04:25Z", "type": "commit"}, {"oid": "4ff7f2cb013d1baef522a78648c4db2243f7e8da", "url": "https://github.com/graphhopper/graphhopper/commit/4ff7f2cb013d1baef522a78648c4db2243f7e8da", "message": "Fix tests", "committedDate": "2020-01-23T15:45:14Z", "type": "commit"}, {"oid": "903d7ed6ead6d470d25e636d137ae644784a0bba", "url": "https://github.com/graphhopper/graphhopper/commit/903d7ed6ead6d470d25e636d137ae644784a0bba", "message": "Fix or downgrade some of the remaining todos", "committedDate": "2020-01-23T16:27:53Z", "type": "commit"}, {"oid": "2fc0bcf031e2e7eb53ad796e6386d843c04446e1", "url": "https://github.com/graphhopper/graphhopper/commit/2fc0bcf031e2e7eb53ad796e6386d843c04446e1", "message": "minor", "committedDate": "2020-01-23T16:50:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcxNDQ3Ng==", "url": "https://github.com/graphhopper/graphhopper/pull/1863#discussion_r370714476", "bodyText": "Yes, this is intended. In a separate issue we could try if this would have any negative consequences.", "author": "karussell", "createdAt": "2020-01-24T16:10:16Z", "path": "core/src/main/java/com/graphhopper/GraphHopper.java", "diffHunk": "@@ -847,7 +847,8 @@ private void initLMAlgoFactoryDecorator() {\n \n         for (FlagEncoder encoder : encodingManager.fetchEdgeEncoders()) {\n             for (String lmWeightingStr : lmFactoryDecorator.getWeightingsAsStrings()) {\n-                Weighting weighting = createWeighting(new HintsMap(lmWeightingStr), encoder, null);\n+                // note that we do not consider turn costs during LM preparation?\n+                Weighting weighting = createWeighting(new HintsMap(lmWeightingStr), encoder, null, new NoTurnCostProvider());", "originalCommit": "2fc0bcf031e2e7eb53ad796e6386d843c04446e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "48ecab3325ea4b7adf3b29dff1766ec036e39814", "chunk": "diff --git a/core/src/main/java/com/graphhopper/GraphHopper.java b/core/src/main/java/com/graphhopper/GraphHopper.java\nindex 1f20e7e4f..37b3215a9 100644\n--- a/core/src/main/java/com/graphhopper/GraphHopper.java\n+++ b/core/src/main/java/com/graphhopper/GraphHopper.java\n\n@@ -848,7 +849,7 @@ public class GraphHopper implements GraphHopperAPI {\n         for (FlagEncoder encoder : encodingManager.fetchEdgeEncoders()) {\n             for (String lmWeightingStr : lmFactoryDecorator.getWeightingsAsStrings()) {\n                 // note that we do not consider turn costs during LM preparation?\n-                Weighting weighting = createWeighting(new HintsMap(lmWeightingStr), encoder, null, new NoTurnCostProvider());\n+                Weighting weighting = createWeighting(new HintsMap(lmWeightingStr), encoder, null, NO_TURN_COST_PROVIDER);\n                 lmFactoryDecorator.addWeighting(weighting);\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcxNjA2OQ==", "url": "https://github.com/graphhopper/graphhopper/pull/1863#discussion_r370716069", "bodyText": "Should we create an issue as reminder for this?", "author": "karussell", "createdAt": "2020-01-24T16:13:24Z", "path": "core/src/main/java/com/graphhopper/routing/InstructionsFromEdges.java", "diffHunk": "@@ -508,7 +508,7 @@ private void updatePointsAndInstruction(EdgeIteratorState edge, PointList pl) {\n         }\n         double newDist = edge.getDistance();\n         prevInstruction.setDistance(newDist + prevInstruction.getDistance());\n-        // todonow: why do we not account for turn times here ?\n+        // todo: why do we not account for turn times here ?", "originalCommit": "2fc0bcf031e2e7eb53ad796e6386d843c04446e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk4MzgwNg==", "url": "https://github.com/graphhopper/graphhopper/pull/1863#discussion_r370983806", "bodyText": "#1867", "author": "easbar", "createdAt": "2020-01-26T09:09:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcxNjA2OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcyMTIyMg==", "url": "https://github.com/graphhopper/graphhopper/pull/1863#discussion_r370721222", "bodyText": "Shouldn't it include the FlagEncoder too? Because without it, then different providers will have the same name.\n(and in weighting.matches we could adapt the equals)", "author": "karussell", "createdAt": "2020-01-24T16:23:40Z", "path": "core/src/main/java/com/graphhopper/routing/weighting/DefaultTurnCostProvider.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package com.graphhopper.routing.weighting;\n+\n+import com.graphhopper.routing.profiles.DecimalEncodedValue;\n+import com.graphhopper.routing.profiles.TurnCost;\n+import com.graphhopper.routing.util.FlagEncoder;\n+import com.graphhopper.storage.IntsRef;\n+import com.graphhopper.storage.TurnCostStorage;\n+import com.graphhopper.util.EdgeIterator;\n+\n+import static com.graphhopper.routing.profiles.TurnCost.EV_SUFFIX;\n+import static com.graphhopper.routing.util.EncodingManager.getKey;\n+import static com.graphhopper.routing.weighting.Weighting.INFINITE_U_TURN_COSTS;\n+\n+public class DefaultTurnCostProvider implements TurnCostProvider {\n+    private final DecimalEncodedValue turnCostEnc;\n+    private final TurnCostStorage turnCostStorage;\n+    private final int uTurnCostsInt;\n+    private final double uTurnCosts;\n+    private final IntsRef tcFlags = TurnCost.createFlags();\n+\n+    public DefaultTurnCostProvider(FlagEncoder encoder, TurnCostStorage turnCostStorage) {\n+        this(encoder, turnCostStorage, Weighting.INFINITE_U_TURN_COSTS);\n+    }\n+\n+    /**\n+     * @param uTurnCosts the costs of a u-turn in seconds, for {@link Weighting#INFINITE_U_TURN_COSTS} the u-turn costs\n+     *                   will be infinite\n+     */\n+    public DefaultTurnCostProvider(FlagEncoder encoder, TurnCostStorage turnCostStorage, int uTurnCosts) {\n+        if (uTurnCosts < 0 && uTurnCosts != INFINITE_U_TURN_COSTS) {\n+            throw new IllegalArgumentException(\"u-turn costs must be positive, or equal to \" + INFINITE_U_TURN_COSTS + \" (=infinite costs)\");\n+        }\n+        this.uTurnCostsInt = uTurnCosts;\n+        this.uTurnCosts = uTurnCosts < 0 ? Double.POSITIVE_INFINITY : uTurnCosts;\n+        if (turnCostStorage == null) {\n+            throw new IllegalArgumentException(\"No storage set to calculate turn weight\");\n+        }\n+        String key = getKey(encoder.toString(), EV_SUFFIX);\n+        // if null the TurnCostProvider can be still useful for edge-based routing\n+        this.turnCostEnc = encoder.hasEncodedValue(key) ? encoder.getDecimalEncodedValue(key) : null;\n+        this.turnCostStorage = turnCostStorage;\n+    }\n+\n+    @Override\n+    public double calcTurnWeight(int edgeFrom, int nodeVia, int edgeTo) {\n+        if (!EdgeIterator.Edge.isValid(edgeFrom) || !EdgeIterator.Edge.isValid(edgeTo)) {\n+            return 0;\n+        }\n+        double tCost = 0;\n+        if (turnCostStorage.isUTurn(edgeFrom, edgeTo)) {\n+            // note that the u-turn costs overwrite any turn costs set in TurnCostStorage\n+            tCost = turnCostStorage.isUTurnAllowed(nodeVia) ? uTurnCosts : Double.POSITIVE_INFINITY;\n+        } else {\n+            if (turnCostEnc != null)\n+                tCost = turnCostStorage.get(turnCostEnc, tcFlags, edgeFrom, nodeVia, edgeTo);\n+        }\n+        return tCost;\n+    }\n+\n+    @Override\n+    public long calcTurnMillis(int inEdge, int viaNode, int outEdge) {\n+        return (long) (1000 * calcTurnWeight(inEdge, viaNode, outEdge));\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return toString();\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"\" + uTurnCostsInt;", "originalCommit": "2fc0bcf031e2e7eb53ad796e6386d843c04446e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk4MTgxNg==", "url": "https://github.com/graphhopper/graphhopper/pull/1863#discussion_r370981816", "bodyText": "Hmm, the FlagEncoder belongs to the Weighting and the DefaultTurnCostProvider in a way.. Right now its included in the Weighting name only (and it probably always has to be the same).", "author": "easbar", "createdAt": "2020-01-26T08:33:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcyMTIyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI4MjM3Mg==", "url": "https://github.com/graphhopper/graphhopper/pull/1863#discussion_r371282372", "bodyText": "I see, this would be a bit of a circular dependency then. Still it feels strange that there will be different turn cost providers with the same name as soon as multiple vehicles are imported.", "author": "karussell", "createdAt": "2020-01-27T14:48:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcyMTIyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTcwMzY2OA==", "url": "https://github.com/graphhopper/graphhopper/pull/1863#discussion_r371703668", "bodyText": "Hmm yes this is not ideal. DefaultTurnCostProvider and AbstractWeighting are both using a FlagEncoder (and it most likely always has to be the same), so maybe the most correct way to assign the names would be using the FlagEncoder name for both? But then the weighting name would be something like car|fastest|car|40, which seems bad as well.\n\nhere will be different turn cost providers with the same name\n\nMaybe the question here is a turn cost provider is something that can exist without a weighting?", "author": "easbar", "createdAt": "2020-01-28T09:56:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcyMTIyMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcyMjI3Nw==", "url": "https://github.com/graphhopper/graphhopper/pull/1863#discussion_r370722277", "bodyText": "Maybe we should avoid instantiating this provider and create a singleton from it? Or even remove this class and create a variable \"NO_TURN_COST\" in TurnCostProvider?", "author": "karussell", "createdAt": "2020-01-24T16:25:50Z", "path": "core/src/main/java/com/graphhopper/routing/weighting/NoTurnCostProvider.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package com.graphhopper.routing.weighting;\n+\n+public class NoTurnCostProvider implements TurnCostProvider {", "originalCommit": "2fc0bcf031e2e7eb53ad796e6386d843c04446e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk4MTY5Ng==", "url": "https://github.com/graphhopper/graphhopper/pull/1863#discussion_r370981696", "bodyText": "Ok, done.", "author": "easbar", "createdAt": "2020-01-26T08:31:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcyMjI3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "48ecab3325ea4b7adf3b29dff1766ec036e39814", "chunk": "diff --git a/core/src/main/java/com/graphhopper/routing/weighting/NoTurnCostProvider.java b/core/src/main/java/com/graphhopper/routing/weighting/NoTurnCostProvider.java\ndeleted file mode 100644\nindex acb245ef2..000000000\n--- a/core/src/main/java/com/graphhopper/routing/weighting/NoTurnCostProvider.java\n+++ /dev/null\n\n@@ -1,36 +0,0 @@\n-/*\n- *  Licensed to GraphHopper GmbH under one or more contributor\n- *  license agreements. See the NOTICE file distributed with this work for\n- *  additional information regarding copyright ownership.\n- *\n- *  GraphHopper GmbH licenses this file to you under the Apache License,\n- *  Version 2.0 (the \"License\"); you may not use this file except in\n- *  compliance with the License. You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- */\n-\n-package com.graphhopper.routing.weighting;\n-\n-public class NoTurnCostProvider implements TurnCostProvider {\n-    @Override\n-    public double calcTurnWeight(int inEdge, int viaNode, int outEdge) {\n-        return 0;\n-    }\n-\n-    @Override\n-    public long calcTurnMillis(int inEdge, int viaNode, int outEdge) {\n-        return 0;\n-    }\n-\n-    @Override\n-    public String getName() {\n-        return \"\";\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcyNDg5Ng==", "url": "https://github.com/graphhopper/graphhopper/pull/1863#discussion_r370724896", "bodyText": "Do you think this is required? (similar question applies to the method where you kept the CH file names compatible)\nWe never kept backward compatibility for our files as they are recreated due to every OSM data update. I do not see value until we officially support offline routing support (maybe something for 3.0 ;) )", "author": "karussell", "createdAt": "2020-01-24T16:30:53Z", "path": "core/src/main/java/com/graphhopper/util/Constants.java", "diffHunk": "@@ -66,6 +66,7 @@\n     private static final int JVM_MAJOR_VERSION;\n     private static final int JVM_MINOR_VERSION;\n \n+    // todonow: make sure this version is compatible also for older imports!", "originalCommit": "2fc0bcf031e2e7eb53ad796e6386d843c04446e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk4MTYyMg==", "url": "https://github.com/graphhopper/graphhopper/pull/1863#discussion_r370981622", "bodyText": "Its probably not required because (?) I kept the old file names. I thought it would be ugly to change the filenames now and then change them again soon in #1708. Do you want to remove this complexity and just change the filenames now also? Otherwise we probably do not need to change the data versions, but I left this comment to double check.", "author": "easbar", "createdAt": "2020-01-26T08:30:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcyNDg5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAyOTM4Mw==", "url": "https://github.com/graphhopper/graphhopper/pull/1863#discussion_r371029383", "bodyText": "With my most recent commits this PR should be compatible with current master. On the other hand there is string manipulation logic to achieve this. I think its ok like this and this will be changed with #1708 again. If you prefer removing the string manipulation and not being compatible this is also totally fine for me.", "author": "easbar", "createdAt": "2020-01-26T21:07:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcyNDg5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI4NDExOQ==", "url": "https://github.com/graphhopper/graphhopper/pull/1863#discussion_r371284119", "bodyText": "\ud83d\udc4d I have no strong opinion here :)", "author": "karussell", "createdAt": "2020-01-27T14:51:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcyNDg5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "634bed7b02b0985af20951a554e5bc209f7f4433", "chunk": "diff --git a/core/src/main/java/com/graphhopper/util/Constants.java b/core/src/main/java/com/graphhopper/util/Constants.java\nindex 8e3e24cbf..dfb83fc32 100644\n--- a/core/src/main/java/com/graphhopper/util/Constants.java\n+++ b/core/src/main/java/com/graphhopper/util/Constants.java\n\n@@ -66,7 +66,6 @@ public class Constants {\n     private static final int JVM_MAJOR_VERSION;\n     private static final int JVM_MINOR_VERSION;\n \n-    // todonow: make sure this version is compatible also for older imports!\n     public static final int VERSION_NODE = 5;\n     public static final int VERSION_EDGE = 15;\n     public static final int VERSION_SHORTCUT = 5;\n"}}, {"oid": "48ecab3325ea4b7adf3b29dff1766ec036e39814", "url": "https://github.com/graphhopper/graphhopper/commit/48ecab3325ea4b7adf3b29dff1766ec036e39814", "message": "Use a static constant for NoTurnCostProviders", "committedDate": "2020-01-26T08:51:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk4MzI4OQ==", "url": "https://github.com/graphhopper/graphhopper/pull/1863#discussion_r370983289", "bodyText": "Any opinion here? Its no longer easy to do this check, we would need something like weighting.hasTurnCosts() (and maybe check if TurnCostProvider is a NoTurnCostProvider. But that doesn't seem very clean. Also using a TurnCostProvider and then choosing nodeBased is not necessarily an error (but might be useful to receive a warning...).", "author": "easbar", "createdAt": "2020-01-26T09:00:58Z", "path": "core/src/main/java/com/graphhopper/storage/CHProfile.java", "diffHunk": "@@ -20,14 +20,18 @@\n public class CHProfile {\n     private final Weighting weighting;\n     private final boolean edgeBased;\n-    private final int uTurnCosts;\n \n     public static CHProfile nodeBased(Weighting weighting) {\n-        return new CHProfile(weighting, TraversalMode.NODE_BASED, INFINITE_U_TURN_COSTS);\n+        // todonow: should we do such a check (check if the weighting has turn costs ?)", "originalCommit": "2fc0bcf031e2e7eb53ad796e6386d843c04446e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAyOTQyNg==", "url": "https://github.com/graphhopper/graphhopper/pull/1863#discussion_r371029426", "bodyText": "I removed the check, it would be nice to have, but not really important either imo.", "author": "easbar", "createdAt": "2020-01-26T21:08:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk4MzI4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "8a0372285e8f02c92352df21f618ce07d0a19272", "chunk": "diff --git a/core/src/main/java/com/graphhopper/storage/CHProfile.java b/core/src/main/java/com/graphhopper/storage/CHProfile.java\nindex bdd88746b..a41647b22 100644\n--- a/core/src/main/java/com/graphhopper/storage/CHProfile.java\n+++ b/core/src/main/java/com/graphhopper/storage/CHProfile.java\n\n@@ -22,15 +22,10 @@ public class CHProfile {\n     private final boolean edgeBased;\n \n     public static CHProfile nodeBased(Weighting weighting) {\n-        // todonow: should we do such a check (check if the weighting has turn costs ?)\n-//        if (!edgeBased && uTurnCosts != INFINITE_U_TURN_COSTS) {\n-//            throw new IllegalArgumentException(\"Finite u-turn costs are only allowed for edge-based CH\");\n-//        }\n         return new CHProfile(weighting, TraversalMode.NODE_BASED);\n     }\n \n     public static CHProfile edgeBased(Weighting weighting) {\n-        // todonow: should we check/assure that the weighting must have some valid turn costs ?\n         return new CHProfile(weighting, TraversalMode.EDGE_BASED);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk4MzM1MA==", "url": "https://github.com/graphhopper/graphhopper/pull/1863#discussion_r370983350", "bodyText": "Similar question here. But maybe we even want edge-based without turn costs for some(?) reason. #1702", "author": "easbar", "createdAt": "2020-01-26T09:01:45Z", "path": "core/src/main/java/com/graphhopper/storage/CHProfile.java", "diffHunk": "@@ -20,14 +20,18 @@\n public class CHProfile {\n     private final Weighting weighting;\n     private final boolean edgeBased;\n-    private final int uTurnCosts;\n \n     public static CHProfile nodeBased(Weighting weighting) {\n-        return new CHProfile(weighting, TraversalMode.NODE_BASED, INFINITE_U_TURN_COSTS);\n+        // todonow: should we do such a check (check if the weighting has turn costs ?)\n+//        if (!edgeBased && uTurnCosts != INFINITE_U_TURN_COSTS) {\n+//            throw new IllegalArgumentException(\"Finite u-turn costs are only allowed for edge-based CH\");\n+//        }\n+        return new CHProfile(weighting, TraversalMode.NODE_BASED);\n     }\n \n-    public static CHProfile edgeBased(Weighting weighting, int uTurnCosts) {\n-        return new CHProfile(weighting, TraversalMode.EDGE_BASED, uTurnCosts);\n+    public static CHProfile edgeBased(Weighting weighting) {\n+        // todonow: should we check/assure that the weighting must have some valid turn costs ?", "originalCommit": "2fc0bcf031e2e7eb53ad796e6386d843c04446e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAyOTQ0OQ==", "url": "https://github.com/graphhopper/graphhopper/pull/1863#discussion_r371029449", "bodyText": "I removed the check, here I actually think it'd be bad to do it because of #1702.", "author": "easbar", "createdAt": "2020-01-26T21:08:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk4MzM1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI4NTc3Ng==", "url": "https://github.com/graphhopper/graphhopper/pull/1863#discussion_r371285776", "bodyText": "Ok", "author": "karussell", "createdAt": "2020-01-27T14:54:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk4MzM1MA=="}], "type": "inlineReview", "revised_code": {"commit": "8a0372285e8f02c92352df21f618ce07d0a19272", "chunk": "diff --git a/core/src/main/java/com/graphhopper/storage/CHProfile.java b/core/src/main/java/com/graphhopper/storage/CHProfile.java\nindex bdd88746b..a41647b22 100644\n--- a/core/src/main/java/com/graphhopper/storage/CHProfile.java\n+++ b/core/src/main/java/com/graphhopper/storage/CHProfile.java\n\n@@ -22,15 +22,10 @@ public class CHProfile {\n     private final boolean edgeBased;\n \n     public static CHProfile nodeBased(Weighting weighting) {\n-        // todonow: should we do such a check (check if the weighting has turn costs ?)\n-//        if (!edgeBased && uTurnCosts != INFINITE_U_TURN_COSTS) {\n-//            throw new IllegalArgumentException(\"Finite u-turn costs are only allowed for edge-based CH\");\n-//        }\n         return new CHProfile(weighting, TraversalMode.NODE_BASED);\n     }\n \n     public static CHProfile edgeBased(Weighting weighting) {\n-        // todonow: should we check/assure that the weighting must have some valid turn costs ?\n         return new CHProfile(weighting, TraversalMode.EDGE_BASED);\n     }\n \n"}}, {"oid": "b6ae3b49badbe430dd09487046fe0c7a1a4f0e20", "url": "https://github.com/graphhopper/graphhopper/commit/b6ae3b49badbe430dd09487046fe0c7a1a4f0e20", "message": "Merge branch 'master' into remove_turn_weighting", "committedDate": "2020-01-26T13:19:38Z", "type": "commit"}, {"oid": "8a0372285e8f02c92352df21f618ce07d0a19272", "url": "https://github.com/graphhopper/graphhopper/commit/8a0372285e8f02c92352df21f618ce07d0a19272", "message": "Remove todo about checking edge/node based", "committedDate": "2020-01-26T21:04:51Z", "type": "commit"}, {"oid": "63fbe32195304e74957697cca1a97d76be6509ac", "url": "https://github.com/graphhopper/graphhopper/commit/63fbe32195304e74957697cca1a97d76be6509ac", "message": "Make CHProfile#toString backward compatible", "committedDate": "2020-01-26T21:04:52Z", "type": "commit"}, {"oid": "634bed7b02b0985af20951a554e5bc209f7f4433", "url": "https://github.com/graphhopper/graphhopper/commit/634bed7b02b0985af20951a554e5bc209f7f4433", "message": "Remove todo about version upgrade", "committedDate": "2020-01-26T21:04:52Z", "type": "commit"}, {"oid": "641c5eac96b97f85cfe8df8ddc4a04f6b3d354e9", "url": "https://github.com/graphhopper/graphhopper/commit/641c5eac96b97f85cfe8df8ddc4a04f6b3d354e9", "message": "Move calcWeight to GHUtility", "committedDate": "2020-01-26T21:04:53Z", "type": "commit"}, {"oid": "bc0a9c7927c1d389b788646fe38fba75fd03f68c", "url": "https://github.com/graphhopper/graphhopper/commit/bc0a9c7927c1d389b788646fe38fba75fd03f68c", "message": "Merge branch 'master' into remove_turn_weighting\n\n# Conflicts:\n#\tcore/src/main/java/com/graphhopper/GraphHopper.java\n#\tcore/src/main/java/com/graphhopper/storage/CHProfile.java", "committedDate": "2020-01-28T09:51:50Z", "type": "commit"}]}