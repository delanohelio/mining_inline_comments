{"pr_number": 1949, "pr_title": "Extract profile selection", "pr_createdAt": "2020-03-08T22:51:14Z", "pr_url": "https://github.com/graphhopper/graphhopper/pull/1949", "timeline": [{"oid": "bdc73460710db1b2c8c745c9285a7c9066f1df03", "url": "https://github.com/graphhopper/graphhopper/commit/bdc73460710db1b2c8c745c9285a7c9066f1df03", "message": "Separate LM/CH profile selection from routing algo factory selection", "committedDate": "2020-03-05T11:09:30Z", "type": "commit"}, {"oid": "d4fccf6b00e6d168c87a24ed9c9da81eebde5e92", "url": "https://github.com/graphhopper/graphhopper/commit/d4fccf6b00e6d168c87a24ed9c9da81eebde5e92", "message": "Obtain routing algo factory by profile name", "committedDate": "2020-03-05T11:09:31Z", "type": "commit"}, {"oid": "185bacaf6db52c120c05a2e025ccfbf92f18846d", "url": "https://github.com/graphhopper/graphhopper/commit/185bacaf6db52c120c05a2e025ccfbf92f18846d", "message": "Limit scope of uTurnCostsInt and TurnCostProvider", "committedDate": "2020-03-05T11:09:31Z", "type": "commit"}, {"oid": "cb34b17d055e762bb38059bb02253ab656a5bacd", "url": "https://github.com/graphhopper/graphhopper/commit/cb34b17d055e762bb38059bb02253ab656a5bacd", "message": "Add some tests and cleanup", "committedDate": "2020-03-05T11:09:31Z", "type": "commit"}, {"oid": "30eae8de9f797e56e48fbe84f98d5624ec330c9f", "url": "https://github.com/graphhopper/graphhopper/commit/30eae8de9f797e56e48fbe84f98d5624ec330c9f", "message": "Encapsulate profile resolving", "committedDate": "2020-03-05T11:09:32Z", "type": "commit"}, {"oid": "c13ca2e6bd55159600d9bf4a7796df6f48141a16", "url": "https://github.com/graphhopper/graphhopper/commit/c13ca2e6bd55159600d9bf4a7796df6f48141a16", "message": "Add comment", "committedDate": "2020-03-05T11:09:32Z", "type": "commit"}, {"oid": "5e4c930ed463096b8b2021bcf50fce3a074438d2", "url": "https://github.com/graphhopper/graphhopper/commit/5e4c930ed463096b8b2021bcf50fce3a074438d2", "message": "Put everything related to profile resolving into one class so it can be modified", "committedDate": "2020-03-06T13:49:30Z", "type": "commit"}, {"oid": "a0f368d32fe0607e962c9df100beee07d55cae8b", "url": "https://github.com/graphhopper/graphhopper/commit/a0f368d32fe0607e962c9df100beee07d55cae8b", "message": "Remove Weighting#matches", "committedDate": "2020-03-06T14:54:19Z", "type": "commit"}, {"oid": "6c024c8ecafb0571c3fbb1faf41127d6605a2a72", "url": "https://github.com/graphhopper/graphhopper/commit/6c024c8ecafb0571c3fbb1faf41127d6605a2a72", "message": "Remove odd LM profile selection rule", "committedDate": "2020-03-06T15:38:23Z", "type": "commit"}, {"oid": "a6c7af96ba37ecd4d5b02bd916d27078065585b2", "url": "https://github.com/graphhopper/graphhopper/commit/a6c7af96ba37ecd4d5b02bd916d27078065585b2", "message": "Cleanup", "committedDate": "2020-03-06T15:56:10Z", "type": "commit"}, {"oid": "b05a913a23eaaf1ee3fa0dc3f28194863acc105d", "url": "https://github.com/graphhopper/graphhopper/commit/b05a913a23eaaf1ee3fa0dc3f28194863acc105d", "message": "Update docs and change HintsMap to PMap in createWeighting()", "committedDate": "2020-03-06T16:59:17Z", "type": "commit"}, {"oid": "0f48eb086e9c21aca0e34553e7ca56c4889584d9", "url": "https://github.com/graphhopper/graphhopper/commit/0f48eb086e9c21aca0e34553e7ca56c4889584d9", "message": "Move turn cost provider creation into createWeighting", "committedDate": "2020-03-06T18:27:59Z", "type": "commit"}, {"oid": "20f22cd93071d2b7cac13b84a8402d97ce65ef24", "url": "https://github.com/graphhopper/graphhopper/commit/20f22cd93071d2b7cac13b84a8402d97ce65ef24", "message": "Make profile resolver hook public", "committedDate": "2020-03-08T14:27:26Z", "type": "commit"}, {"oid": "f2304bb1142b04bb04af38461d1bceae4fc08143", "url": "https://github.com/graphhopper/graphhopper/commit/f2304bb1142b04bb04af38461d1bceae4fc08143", "message": "Merge branch 'master' into profile_resolver", "committedDate": "2020-03-08T14:28:12Z", "type": "commit"}, {"oid": "c59c686f988f8de49c2c5228c20b766a08635887", "url": "https://github.com/graphhopper/graphhopper/commit/c59c686f988f8de49c2c5228c20b766a08635887", "message": "Merge branch 'master' into profile_resolver\n\n# Conflicts:\n#\tcore/src/main/java/com/graphhopper/GraphHopper.java\n#\tcore/src/main/java/com/graphhopper/routing/lm/LMPreparationHandler.java", "committedDate": "2020-03-08T20:49:26Z", "type": "commit"}, {"oid": "8a9f090b2fb8e05691043fa428077a046251557e", "url": "https://github.com/graphhopper/graphhopper/commit/8a9f090b2fb8e05691043fa428077a046251557e", "message": "Minor", "committedDate": "2020-03-08T22:34:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2MzA5MA==", "url": "https://github.com/graphhopper/graphhopper/pull/1949#discussion_r390163090", "bodyText": "Any opinion here? createWeighting normally uses a DefaultTurnCostProvider if profile.isTurnCosts()==true. But for LM we always want to enforce not using turn costs for the preparation, but to me it seemed like this does not justify adding an extra parameter, so I am using the pmap workaround here...", "author": "easbar", "createdAt": "2020-03-10T08:45:53Z", "path": "core/src/main/java/com/graphhopper/GraphHopper.java", "diffHunk": "@@ -913,9 +922,11 @@ private void initLMPreparationHandler() {\n \n         for (LMProfileConfig lmConfig : lmPreparationHandler.getLMProfileConfigs()) {\n             ProfileConfig profile = profilesByName.get(lmConfig.getProfile());\n-            FlagEncoder encoder = encodingManager.getEncoder(profile.getVehicle());\n-            // note that we do not consider turn costs during LM preparation?\n-            Weighting weighting = createWeighting(new HintsMap(profile.getWeighting()), encoder, NO_TURN_COST_PROVIDER);\n+            // note that we do not consider turn costs during LM preparation. this is important if we want\n+            // to allow e.g. changing the u_turn_costs per request (we have to use the minimum weight settings (\n+            // = no turn costs) for the preparation)\n+            // todonow: is it too ugly this way?\n+            Weighting weighting = createWeighting(profile, new PMap().put(\"__disable_turn_costs\", true));", "originalCommit": "8a9f090b2fb8e05691043fa428077a046251557e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1MTAwNQ==", "url": "https://github.com/graphhopper/graphhopper/pull/1949#discussion_r390251005", "bodyText": "I would not do this here and just force the usage of no turn cost provider in LM. IMO this is something implementation specific?", "author": "karussell", "createdAt": "2020-03-10T11:30:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2MzA5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1MTU2OA==", "url": "https://github.com/graphhopper/graphhopper/pull/1949#discussion_r390251568", "bodyText": "What do you mean? You mean we should always set turn_costs: false for all profiles with LM? But then we cannot use turn costs with LM...", "author": "easbar", "createdAt": "2020-03-10T11:32:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2MzA5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1MjIwMg==", "url": "https://github.com/graphhopper/graphhopper/pull/1949#discussion_r390252202", "bodyText": "Ah you mean somehow disabling the turn costs in PrepareLandmarks? Yes that would be the right thing to do, but how? PrepareLandmarks just gets a Weighting, but how would it disable the turn costs then?", "author": "easbar", "createdAt": "2020-03-10T11:33:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2MzA5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1NTEwOQ==", "url": "https://github.com/graphhopper/graphhopper/pull/1949#discussion_r390255109", "bodyText": "Ah you mean somehow disabling the turn costs in PrepareLandmarks?\n\nYes. Isn't it already ignored when we do traversalMode = TraversalMode.NODE_BASED in LandmarkStorage?", "author": "karussell", "createdAt": "2020-03-10T11:39:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2MzA5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1NzA0Nw==", "url": "https://github.com/graphhopper/graphhopper/pull/1949#discussion_r390257047", "bodyText": "Ah yes thats a good point. Yes that should fix it \ud83d\udc4d -> done", "author": "easbar", "createdAt": "2020-03-10T11:43:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2MzA5MA=="}], "type": "inlineReview", "revised_code": {"commit": "0cd11bf9e3f96f5890e557a6a86fac45bbb3a6f1", "chunk": "diff --git a/core/src/main/java/com/graphhopper/GraphHopper.java b/core/src/main/java/com/graphhopper/GraphHopper.java\nindex ae08734bc..3f04c7e79 100644\n--- a/core/src/main/java/com/graphhopper/GraphHopper.java\n+++ b/core/src/main/java/com/graphhopper/GraphHopper.java\n\n@@ -922,11 +922,11 @@ public class GraphHopper implements GraphHopperAPI {\n \n         for (LMProfileConfig lmConfig : lmPreparationHandler.getLMProfileConfigs()) {\n             ProfileConfig profile = profilesByName.get(lmConfig.getProfile());\n-            // note that we do not consider turn costs during LM preparation. this is important if we want\n-            // to allow e.g. changing the u_turn_costs per request (we have to use the minimum weight settings (\n-            // = no turn costs) for the preparation)\n-            // todonow: is it too ugly this way?\n-            Weighting weighting = createWeighting(profile, new PMap().put(\"__disable_turn_costs\", true));\n+            // Note that turn costs will be ignored during LM preparation even when the created weighting includes\n+            // turn costs, because the preparation is running node-based. This is important if we want to allow e.g.\n+            // changing the u_turn_costs per request (we have to use the minimum weight settings (= no turn costs) for\n+            // the preparation)\n+            Weighting weighting = createWeighting(profile, new PMap());\n             lmPreparationHandler.addLMProfile(new LMProfile(profile.getName(), weighting));\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2NDY5Mg==", "url": "https://github.com/graphhopper/graphhopper/pull/1949#discussion_r390164692", "bodyText": "Is it fine to overwrite ch/lm.disable here or should we throw an error?", "author": "easbar", "createdAt": "2020-03-10T08:49:06Z", "path": "web-bundle/src/main/java/com/graphhopper/resources/SPTResource.java", "diffHunk": "@@ -62,11 +60,15 @@ public Response doGet(\n             throw new IllegalArgumentException(\"point parameter cannot be null\");\n \n         StopWatch sw = new StopWatch().start();\n-\n-        if (!encodingManager.hasEncoder(vehicle))\n-            throw new IllegalArgumentException(\"vehicle not supported:\" + vehicle);\n-\n-        FlagEncoder encoder = encodingManager.getEncoder(vehicle);\n+        HintsMap hintsMap = new HintsMap();\n+        RouteResource.initHints(hintsMap, uriInfo.getQueryParameters());\n+        hintsMap.put(Parameters.CH.DISABLE, true);", "originalCommit": "8a9f090b2fb8e05691043fa428077a046251557e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1MTk2OQ==", "url": "https://github.com/graphhopper/graphhopper/pull/1949#discussion_r390251969", "bodyText": "Isn't the none-CH case the default now? But yeah, I think I had to do this for the /custom endpoint too.", "author": "karussell", "createdAt": "2020-03-10T11:32:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2NDY5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1MzY3MQ==", "url": "https://github.com/graphhopper/graphhopper/pull/1949#discussion_r390253671", "bodyText": "Hm, no graphHopper.resolveProfile(hintsMap) will give us a CH profile or error if it does not exist, so we have to explicitly disable CH/LM to obtain the profile no matter whether a CH/LM profile for these hints exists or not.", "author": "easbar", "createdAt": "2020-03-10T11:36:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2NDY5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI3NTAxNQ==", "url": "https://github.com/graphhopper/graphhopper/pull/1949#discussion_r390275015", "bodyText": "So, if there is a profile without CH, then this will work without the parameter, but if the profile is listed in profiles_ch then we need the disabling parameter?\nThe problem is, what if we add a new algorithm xy? Then in theory I would expect that the profile selection remains unchanged and we only specify profiles_xy: [car_xy], i.e. an existing profile car will still work without the algorithm xy. Not sure if this is good as it increases the profile count further.", "author": "karussell", "createdAt": "2020-03-10T12:21:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2NDY5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMxNzg2Mw==", "url": "https://github.com/graphhopper/graphhopper/pull/1949#discussion_r390317863", "bodyText": "So, if there is a profile without CH, then this will work without the parameter, but if the profile is listed in profiles_ch then we need the disabling parameter?\n\nYes, or to put it differently if we put ch.disable=true as we do here we get the profile matching our hints no matter what LM/CH preparations there are (and for isochrones we are not even using them). But you are right the profile selection depends on the available LM/CH preparations (it always did).\n\nThe problem is, what if we add a new algorithm xy? Then in theory I would expect that the profile selection remains unchanged\n\nBut why? If there is a new algorithm we likely want to use it? If the selection remained unchanged what would the new algorithm be good for? In this sense I think its better not to expose the algorithm selection such that it can always be changed internally. As a user of the API I am generally not interested which algorithm is used to solve my problem. What I think is problematic though, that sometimes it can be hard to figure out which algorithm needs to be used, because for certain parameters only certain algorithms work (for example blocked areas etc.).", "author": "easbar", "createdAt": "2020-03-10T13:38:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2NDY5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEwMjQxOA==", "url": "https://github.com/graphhopper/graphhopper/pull/1949#discussion_r391102418", "bodyText": "Ok, regarding the parameter setting and I think I better understand this now: we have to do it here to avoid a failure if LM or CH is configured.", "author": "karussell", "createdAt": "2020-03-11T16:31:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2NDY5Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2ODA0NQ==", "url": "https://github.com/graphhopper/graphhopper/pull/1949#discussion_r390168045", "bodyText": "I do not like how we rely on the turn cost provider name to contain the u-turn costs here, but so far I do not have a better idea to do this. Also this is only needed to cover a (probably exotic) case: Multiple edge-based profiles with different u-turn costs. Once we have the profile request parameter we 'only' need to support this u-turn costs comparison here for legacy reasons, so this makes me even more want to get rid of it.", "author": "easbar", "createdAt": "2020-03-10T08:55:30Z", "path": "core/src/main/java/com/graphhopper/routing/ProfileResolver.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package com.graphhopper.routing;\n+\n+import com.graphhopper.config.ProfileConfig;\n+import com.graphhopper.routing.lm.LMProfile;\n+import com.graphhopper.routing.util.EncodingManager;\n+import com.graphhopper.routing.util.FlagEncoder;\n+import com.graphhopper.routing.util.HintsMap;\n+import com.graphhopper.storage.CHProfile;\n+import com.graphhopper.util.Parameters;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.graphhopper.routing.weighting.Weighting.INFINITE_U_TURN_COSTS;\n+\n+public class ProfileResolver {\n+\n+    public ProfileConfig resolveProfile(EncodingManager encodingManager, List<CHProfile> chProfiles, List<LMProfile> lmProfiles, HintsMap hints) {\n+        // default handling\n+        String vehicle = hints.getVehicle();\n+        if (vehicle.isEmpty()) {\n+            vehicle = getDefaultVehicle(encodingManager).toString();\n+        }\n+        String weighting = hints.getWeighting();\n+        if (weighting.isEmpty()) {\n+            weighting = \"fastest\";\n+        }\n+        if (!encodingManager.hasEncoder(vehicle))\n+            throw new IllegalArgumentException(\"Vehicle not supported: \" + vehicle + \". Supported are: \" + encodingManager.toString());\n+\n+        FlagEncoder encoder = encodingManager.getEncoder(vehicle);\n+        // we use turn costs if the encoder supports it *unless* the edge_based parameter is set explicitly\n+        boolean turnCosts = encoder.supportsTurnCosts();\n+        if (hints.has(Parameters.Routing.EDGE_BASED))\n+            turnCosts = hints.getBool(Parameters.Routing.EDGE_BASED, false);\n+        if (turnCosts && !encoder.supportsTurnCosts())\n+            throw new IllegalArgumentException(\"You need to set up a turn cost storage to make use of edge_based=true, e.g. use car|turn_costs=true\");\n+\n+        String profileName = resolveProfileName(chProfiles, lmProfiles, hints);\n+\n+        return new ProfileConfig(profileName)\n+                .setVehicle(vehicle)\n+                .setWeighting(weighting)\n+                .setTurnCosts(turnCosts);\n+    }\n+\n+    private String resolveProfileName(List<CHProfile> chProfiles, List<LMProfile> lmProfiles, HintsMap hints) {\n+        boolean disableCH = hints.getBool(Parameters.CH.DISABLE, false);\n+        boolean disableLM = hints.getBool(Parameters.Landmark.DISABLE, false);\n+\n+        String profileName;\n+        if (!chProfiles.isEmpty() && !disableCH) {\n+            profileName = selectCHProfile(chProfiles, hints).getName();\n+        } else if (!lmProfiles.isEmpty() && !disableLM) {\n+            profileName = selectLMProfile(lmProfiles, hints).getName();\n+        } else {\n+            // todonow: here we will instead select one of the existing profiles\n+            profileName = \"unprepared_profile\";\n+        }\n+        return profileName;\n+    }\n+\n+    /**\n+     * @param chProfiles the CH profiles to choose from\n+     * @param hintsMap   a map used to describe the CH profile that shall be selected\n+     * @throws IllegalArgumentException if no CH profile could be selected for the given parameters\n+     */\n+    public CHProfile selectCHProfile(List<CHProfile> chProfiles, HintsMap hintsMap) {\n+        List<CHProfile> matchingProfiles = new ArrayList<>();\n+        for (CHProfile p : chProfiles) {\n+            if (!chProfileMatchesHints(p, hintsMap))\n+                continue;\n+            matchingProfiles.add(p);\n+        }\n+\n+        Boolean edgeBased = getEdgeBased(hintsMap);\n+        Integer uTurnCosts = getUTurnCosts(hintsMap);\n+        if (matchingProfiles.isEmpty()) {\n+            throw new IllegalArgumentException(\"Cannot find matching CH profile for your request. Please check your parameters.\" +\n+                    \"\\nYou can try disabling CH using \" + Parameters.CH.DISABLE + \"=true\" +\n+                    \"\\nrequested:  \" + getCHRequestAsString(hintsMap, edgeBased, uTurnCosts) + \"\\navailable: \" + chProfiles);\n+        } else if (matchingProfiles.size() == 1) {\n+            return matchingProfiles.get(0);\n+        } else {\n+            // special case: prefer edge-based over node-based if these are the only two options\n+            CHProfile match1 = matchingProfiles.get(0);\n+            CHProfile match2 = matchingProfiles.get(1);\n+            if (edgeBased == null && matchingProfiles.size() == 2 &&\n+                    match1.getWeighting().getName().equals(match2.getWeighting().getName()) &&\n+                    match1.getWeighting().getFlagEncoder().toString().equals(match2.getWeighting().getFlagEncoder().toString()) &&\n+                    match1.isEdgeBased() != match2.isEdgeBased()) {\n+                return match1.isEdgeBased() ? match1 : match2;\n+            }\n+            throw new IllegalArgumentException(\"There are multiple CH profiles matching your request. Use the `weighting`,`vehicle`,`edge_based` and/or `u_turn_costs` parameters to be more specific.\" +\n+                    \"\\nYou can also try disabling CH altogether using \" + Parameters.CH.DISABLE + \"=true\" +\n+                    \"\\nrequested:  \" + getCHRequestAsString(hintsMap, edgeBased, uTurnCosts) + \"\\nmatched:   \" + matchingProfiles + \"\\navailable: \" + chProfiles);\n+        }\n+    }\n+\n+    public LMProfile selectLMProfile(List<LMProfile> lmProfiles, HintsMap hintsMap) {\n+        List<LMProfile> matchingProfiles = new ArrayList<>();\n+        for (LMProfile p : lmProfiles) {\n+            if (!lmProfileMatchesHints(p, hintsMap))\n+                continue;\n+            matchingProfiles.add(p);\n+        }\n+        // Note:\n+        // There are situations where we can use the requested encoder/weighting with an existing LM preparation, even\n+        // though the preparation was done with a different weighting. For example this works when the new weighting\n+        // only yields higher (but never lower) weights than the one that was used for the preparation. However, its not\n+        // trivial to check whether or not this is the case so we do not allow this for now.\n+        if (matchingProfiles.isEmpty()) {\n+            throw new IllegalArgumentException(\"Cannot find matching LM profile for your request. Please check your parameters.\" +\n+                    \"\\nYou can try disabling LM by setting \" + Parameters.Landmark.DISABLE + \"=true\" +\n+                    \"\\nrequested: \" + getLMRequestAsString(hintsMap) + \"\\navailable: \" + lmProfilesAsStrings(lmProfiles));\n+        } else if (matchingProfiles.size() == 1) {\n+            return matchingProfiles.get(0);\n+        } else {\n+            throw new IllegalArgumentException(\"There are multiple LM profiles matching your request. Use the `weighting` and `vehicle` parameters to be more specific.\" +\n+                    \"\\nYou can also try disabling LM altogether using \" + Parameters.CH.DISABLE + \"=true\" +\n+                    \"\\nrequested:  \" + getLMRequestAsString(hintsMap) + \"\\nmatched:   \" + lmProfilesAsStrings(matchingProfiles) + \"\\navailable: \" + lmProfilesAsStrings(lmProfiles));\n+        }\n+    }\n+\n+    protected boolean chProfileMatchesHints(CHProfile p, HintsMap hintsMap) {\n+        Boolean edgeBased = getEdgeBased(hintsMap);\n+        Integer uTurnCosts = getUTurnCosts(hintsMap);\n+        return (edgeBased == null || p.isEdgeBased() == edgeBased) &&\n+                (uTurnCosts == null || p.getWeighting().getTurnCostProvider().getName().equals(uTurnCosts.toString())) &&", "originalCommit": "8a9f090b2fb8e05691043fa428077a046251557e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1MzAxMA==", "url": "https://github.com/graphhopper/graphhopper/pull/1949#discussion_r390253010", "bodyText": "Yes, probably we have to accept that ProfileResolver is mainly for backward compatibility? The bigger problem is the new getTurnCostProvider method, which I would prefer to be private. But I also do not see how.", "author": "karussell", "createdAt": "2020-03-10T11:35:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2ODA0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1NDkwOA==", "url": "https://github.com/graphhopper/graphhopper/pull/1949#discussion_r390254908", "bodyText": "Yes, I would like to remove/not add getTurnCostProvider as well. But how else can we check what u-turn costs a weighting is using? Maybe we can skip this selection rule and throw an error if there are multiple edge-based weightings for the given weighting and vehicle. In this case one would have to use the profile parameter when using multiple edge-based CH preparations with different u-turn costs.", "author": "easbar", "createdAt": "2020-03-10T11:39:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2ODA0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1NTMwOQ==", "url": "https://github.com/graphhopper/graphhopper/pull/1949#discussion_r390255309", "bodyText": "Yes, probably we have to accept that ProfileResolver is mainly for backward compatibility?\n\nYes absolutely, maybe not yet in this PR but ProfileResolver only exists for backward-compatibility.", "author": "easbar", "createdAt": "2020-03-10T11:39:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2ODA0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1Njk2Mw==", "url": "https://github.com/graphhopper/graphhopper/pull/1949#discussion_r390256963", "bodyText": "In this case one would have to use the profile parameter when using multiple edge-based CH preparations with different u-turn costs.\n\nThis sounds not too bad.", "author": "karussell", "createdAt": "2020-03-10T11:43:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2ODA0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMyMzA3OQ==", "url": "https://github.com/graphhopper/graphhopper/pull/1949#discussion_r390323079", "bodyText": "Done", "author": "easbar", "createdAt": "2020-03-10T13:45:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2ODA0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "2b02a178e644b0f9e959af5739af2064ec094340", "chunk": "diff --git a/core/src/main/java/com/graphhopper/routing/ProfileResolver.java b/core/src/main/java/com/graphhopper/routing/ProfileResolver.java\nindex f7c90df58..b503b774f 100644\n--- a/core/src/main/java/com/graphhopper/routing/ProfileResolver.java\n+++ b/core/src/main/java/com/graphhopper/routing/ProfileResolver.java\n\n@@ -84,11 +84,15 @@ public class ProfileResolver {\n      * @throws IllegalArgumentException if no CH profile could be selected for the given parameters\n      */\n     public CHProfile selectCHProfile(List<CHProfile> chProfiles, HintsMap hintsMap) {\n+        int numMatchingEdgeBased = 0;\n         List<CHProfile> matchingProfiles = new ArrayList<>();\n         for (CHProfile p : chProfiles) {\n             if (!chProfileMatchesHints(p, hintsMap))\n                 continue;\n             matchingProfiles.add(p);\n+            if (p.isEdgeBased()) {\n+                numMatchingEdgeBased++;\n+            }\n         }\n \n         Boolean edgeBased = getEdgeBased(hintsMap);\n"}}, {"oid": "4ec4bb4080b7237d2127fb4faaf4637ebcd85a01", "url": "https://github.com/graphhopper/graphhopper/commit/4ec4bb4080b7237d2127fb4faaf4637ebcd85a01", "message": "Merge branch 'master' into profile_resolver", "committedDate": "2020-03-10T09:20:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzMDAyMw==", "url": "https://github.com/graphhopper/graphhopper/pull/1949#discussion_r390230023", "bodyText": "In #1776 I stumbled over this check as I wanted to inject the graph into the Weighting but at this time graph is null.\nBut with #1950 I found a good solution so that I kept this method here :)", "author": "karussell", "createdAt": "2020-03-10T10:47:34Z", "path": "core/src/main/java/com/graphhopper/GraphHopper.java", "diffHunk": "@@ -833,8 +840,9 @@ private void checkProfilesConsistency() {\n                         \"\\nYou need to add `|turn_costs=true` to the vehicle in `graph.flag_encoders`\");\n             }\n             try {\n-                createWeighting(new HintsMap(profile.getWeighting()), encoder, NO_TURN_COST_PROVIDER);\n+                createWeighting(profile, new PMap());\n             } catch (IllegalArgumentException e) {\n+                // todonow: update, what are we really checking here?\n                 throw new IllegalArgumentException(\"The profile '\" + profile.getName() + \"' was configured with an unknown weighting '\" + profile.getWeighting() + \"'\");", "originalCommit": "8a9f090b2fb8e05691043fa428077a046251557e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzMTcxNg==", "url": "https://github.com/graphhopper/graphhopper/pull/1949#discussion_r390231716", "bodyText": "Ah ok. The graph being null problem when running this check should also be already fixed with this: 639bd9a", "author": "easbar", "createdAt": "2020-03-10T10:50:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzMDAyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI0MjM3MA==", "url": "https://github.com/graphhopper/graphhopper/pull/1949#discussion_r390242370", "bodyText": "Aha, where did you stumble over this?", "author": "karussell", "createdAt": "2020-03-10T11:11:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzMDAyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1MDMyMw==", "url": "https://github.com/graphhopper/graphhopper/pull/1949#discussion_r390250323", "bodyText": "Well its required for this branch because the turn cost provider is created in createWeighting now (and thus there is a call to ghStorage.getTurnCostStorage()).", "author": "easbar", "createdAt": "2020-03-10T11:29:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzMDAyMw=="}], "type": "inlineReview", "revised_code": {"commit": "a6e8cee9590d8dcc4af93454a15adc457dc4c2dd", "chunk": "diff --git a/core/src/main/java/com/graphhopper/GraphHopper.java b/core/src/main/java/com/graphhopper/GraphHopper.java\nindex ae08734bc..facc916e5 100644\n--- a/core/src/main/java/com/graphhopper/GraphHopper.java\n+++ b/core/src/main/java/com/graphhopper/GraphHopper.java\n\n@@ -842,8 +833,9 @@ public class GraphHopper implements GraphHopperAPI {\n             try {\n                 createWeighting(profile, new PMap());\n             } catch (IllegalArgumentException e) {\n-                // todonow: update, what are we really checking here?\n-                throw new IllegalArgumentException(\"The profile '\" + profile.getName() + \"' was configured with an unknown weighting '\" + profile.getWeighting() + \"'\");\n+                throw new IllegalArgumentException(\"Could not create weighting for profile: '\" + profile.getName() + \"'.\\n\" +\n+                        \"Profile: \" + profile + \"\\n\" +\n+                        \"Error: \" + e.getMessage());\n             }\n         }\n         Set<String> chProfileSet = new LinkedHashSet<>(chPreparationHandler.getCHProfileConfigs().size());\n"}}, {"oid": "0cd11bf9e3f96f5890e557a6a86fac45bbb3a6f1", "url": "https://github.com/graphhopper/graphhopper/commit/0cd11bf9e3f96f5890e557a6a86fac45bbb3a6f1", "message": "Remove extra flag to disable turn costs when creating weighting for LM", "committedDate": "2020-03-10T11:56:58Z", "type": "commit"}, {"oid": "2b02a178e644b0f9e959af5739af2064ec094340", "url": "https://github.com/graphhopper/graphhopper/commit/2b02a178e644b0f9e959af5739af2064ec094340", "message": "No longer allow selecting between multiple edge-based CH profiles using u_turn_costs parameter.", "committedDate": "2020-03-10T13:22:56Z", "type": "commit"}, {"oid": "b94c2e13c6d9ea571daa30aabdbe7f21fbadb1f3", "url": "https://github.com/graphhopper/graphhopper/commit/b94c2e13c6d9ea571daa30aabdbe7f21fbadb1f3", "message": "Merge branch 'master' into profile_resolver", "committedDate": "2020-03-10T21:46:10Z", "type": "commit"}, {"oid": "a6e8cee9590d8dcc4af93454a15adc457dc4c2dd", "url": "https://github.com/graphhopper/graphhopper/commit/a6e8cee9590d8dcc4af93454a15adc457dc4c2dd", "message": "Improve error message", "committedDate": "2020-03-11T06:46:09Z", "type": "commit"}, {"oid": "a1681342844e9619ae6d27b4b35f2fd4dde7894d", "url": "https://github.com/graphhopper/graphhopper/commit/a1681342844e9619ae6d27b4b35f2fd4dde7894d", "message": "Fix test", "committedDate": "2020-03-11T07:06:56Z", "type": "commit"}, {"oid": "f893703e4d6ef8f8b0cb40a02c590050fbf98159", "url": "https://github.com/graphhopper/graphhopper/commit/f893703e4d6ef8f8b0cb40a02c590050fbf98159", "message": "Merge branch 'master' into profile_resolver", "committedDate": "2020-03-12T07:21:52Z", "type": "commit"}]}