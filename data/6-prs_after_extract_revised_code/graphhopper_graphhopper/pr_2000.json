{"pr_number": 2000, "pr_title": "Move gpx test from GraphHopperWebIT to RouteResourceTest", "pr_createdAt": "2020-04-18T08:41:12Z", "pr_url": "https://github.com/graphhopper/graphhopper/pull/2000", "timeline": [{"oid": "b76ff3960c1029136a207a5bb1d0fac76b2c0cc5", "url": "https://github.com/graphhopper/graphhopper/commit/b76ff3960c1029136a207a5bb1d0fac76b2c0cc5", "message": "Make GH#export work for POST requests", "committedDate": "2020-04-18T08:38:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY2OTEzNA==", "url": "https://github.com/graphhopper/graphhopper/pull/2000#discussion_r410669134", "bodyText": "This wasn't private before but should be now problem to do so as there is a setter anyway", "author": "easbar", "createdAt": "2020-04-18T08:41:41Z", "path": "client-hc/src/main/java/com/graphhopper/api/GraphHopperWeb.java", "diffHunk": "@@ -64,8 +64,8 @@\n     private boolean calcPoints = true;\n     private boolean elevation = false;\n     private String optimize = \"false\";\n-    boolean postRequest = true;\n-    int maxUnzippedLength = 1000;\n+    private boolean postRequest = true;", "originalCommit": "b76ff3960c1029136a207a5bb1d0fac76b2c0cc5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1aa4e79b9aa53abb04362f33ee163cc4e0612dd3", "chunk": "diff --git a/client-hc/src/main/java/com/graphhopper/api/GraphHopperWeb.java b/client-hc/src/main/java/com/graphhopper/api/GraphHopperWeb.java\nindex b079e4203..9e9e4c7df 100644\n--- a/client-hc/src/main/java/com/graphhopper/api/GraphHopperWeb.java\n+++ b/client-hc/src/main/java/com/graphhopper/api/GraphHopperWeb.java\n\n@@ -65,7 +65,7 @@ public class GraphHopperWeb implements GraphHopperAPI {\n     private boolean elevation = false;\n     private String optimize = \"false\";\n     private boolean postRequest = true;\n-    private int maxUnzippedLength = 1000;\n+    int maxUnzippedLength = 1000;\n     private final Set<String> ignoreSet;\n     private final Set<String> ignoreSetForPost;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY2OTE2Nw==", "url": "https://github.com/graphhopper/graphhopper/pull/2000#discussion_r410669167", "bodyText": "Had to add a setter here, since we are now no longer testing this in the same package, do you think thats ok?", "author": "easbar", "createdAt": "2020-04-18T08:42:09Z", "path": "client-hc/src/main/java/com/graphhopper/api/GraphHopperWeb.java", "diffHunk": "@@ -64,8 +64,8 @@\n     private boolean calcPoints = true;\n     private boolean elevation = false;\n     private String optimize = \"false\";\n-    boolean postRequest = true;\n-    int maxUnzippedLength = 1000;\n+    private boolean postRequest = true;\n+    private int maxUnzippedLength = 1000;", "originalCommit": "b76ff3960c1029136a207a5bb1d0fac76b2c0cc5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1aa4e79b9aa53abb04362f33ee163cc4e0612dd3", "chunk": "diff --git a/client-hc/src/main/java/com/graphhopper/api/GraphHopperWeb.java b/client-hc/src/main/java/com/graphhopper/api/GraphHopperWeb.java\nindex b079e4203..9e9e4c7df 100644\n--- a/client-hc/src/main/java/com/graphhopper/api/GraphHopperWeb.java\n+++ b/client-hc/src/main/java/com/graphhopper/api/GraphHopperWeb.java\n\n@@ -65,7 +65,7 @@ public class GraphHopperWeb implements GraphHopperAPI {\n     private boolean elevation = false;\n     private String optimize = \"false\";\n     private boolean postRequest = true;\n-    private int maxUnzippedLength = 1000;\n+    int maxUnzippedLength = 1000;\n     private final Set<String> ignoreSet;\n     private final Set<String> ignoreSetForPost;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY2OTE4OA==", "url": "https://github.com/graphhopper/graphhopper/pull/2000#discussion_r410669188", "bodyText": "WDYT?", "author": "easbar", "createdAt": "2020-04-18T08:42:17Z", "path": "client-hc/src/main/java/com/graphhopper/api/GraphHopperWeb.java", "diffHunk": "@@ -138,6 +138,14 @@ public GraphHopperWeb setKey(String key) {\n         return this;\n     }\n \n+    /**\n+     * Only use this if you know what you are doing\n+     */\n+    public GraphHopperWeb _setMaxUnzippedLength(int maxUnzippedLength) {\n+        this.maxUnzippedLength = maxUnzippedLength;\n+        return this;\n+    }\n+", "originalCommit": "b76ff3960c1029136a207a5bb1d0fac76b2c0cc5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1aa4e79b9aa53abb04362f33ee163cc4e0612dd3", "chunk": "diff --git a/client-hc/src/main/java/com/graphhopper/api/GraphHopperWeb.java b/client-hc/src/main/java/com/graphhopper/api/GraphHopperWeb.java\nindex b079e4203..9e9e4c7df 100644\n--- a/client-hc/src/main/java/com/graphhopper/api/GraphHopperWeb.java\n+++ b/client-hc/src/main/java/com/graphhopper/api/GraphHopperWeb.java\n\n@@ -138,14 +138,6 @@ public class GraphHopperWeb implements GraphHopperAPI {\n         return this;\n     }\n \n-    /**\n-     * Only use this if you know what you are doing\n-     */\n-    public GraphHopperWeb _setMaxUnzippedLength(int maxUnzippedLength) {\n-        this.maxUnzippedLength = maxUnzippedLength;\n-        return this;\n-    }\n-\n     /**\n      * Use new endpoint 'POST /route' instead of 'GET /route'\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY2OTI5OQ==", "url": "https://github.com/graphhopper/graphhopper/pull/2000#discussion_r410669299", "bodyText": "I'm happy about every test we can remove here, see #1986.", "author": "easbar", "createdAt": "2020-04-18T08:43:17Z", "path": "client-hc/src/test/java/com/graphhopper/api/GraphHopperWebIT.java", "diffHunk": "@@ -245,39 +246,6 @@ public void doNotReadFinishInstruction() {\n         assertEquals(\"\", finishInstructionName);\n     }\n \n-    @Test", "originalCommit": "b76ff3960c1029136a207a5bb1d0fac76b2c0cc5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY2OTQxNQ==", "url": "https://github.com/graphhopper/graphhopper/pull/2000#discussion_r410669415", "bodyText": "This was Bug2: For GET a missing gpx.millis would give null, but for POST it would be an empty String.", "author": "easbar", "createdAt": "2020-04-18T08:43:57Z", "path": "web-bundle/src/main/java/com/graphhopper/resources/RouteResource.java", "diffHunk": "@@ -273,7 +273,14 @@ private void removeLegacyParameters(GHRequest request) {\n             throw new IllegalArgumentException(\"Alternatives are currently not yet supported for GPX\");\n         }\n \n-        long time = timeString != null ? Long.parseLong(timeString) : System.currentTimeMillis();", "originalCommit": "b76ff3960c1029136a207a5bb1d0fac76b2c0cc5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1aa4e79b9aa53abb04362f33ee163cc4e0612dd3", "chunk": "diff --git a/web-bundle/src/main/java/com/graphhopper/resources/RouteResource.java b/web-bundle/src/main/java/com/graphhopper/resources/RouteResource.java\nindex 2864038a9..888eabe96 100644\n--- a/web-bundle/src/main/java/com/graphhopper/resources/RouteResource.java\n+++ b/web-bundle/src/main/java/com/graphhopper/resources/RouteResource.java\n\n@@ -273,14 +260,7 @@ public class RouteResource {\n             throw new IllegalArgumentException(\"Alternatives are currently not yet supported for GPX\");\n         }\n \n-        long time = System.currentTimeMillis();\n-        if (!Helper.isEmpty(timeString)) {\n-            try {\n-                time = Long.parseLong(timeString);\n-            } catch (NumberFormatException e) {\n-                throw new IllegalArgumentException(\"Invalid value for 'gpx.millis': \" + timeString);\n-            }\n-        }\n+        long time = timeString != null ? Long.parseLong(timeString) : System.currentTimeMillis();\n         InstructionList instructions = ghRsp.getBest().getInstructions();\n         return Response.ok(GpxFromInstructions.createGPX(instructions, trackName, time, enableElevation, withRoute, withTrack, withWayPoints, version, instructions.getTr()), \"application/gpx+xml\").\n                 header(\"Content-Disposition\", \"attachment;filename=\" + \"GraphHopper.gpx\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY2OTQ1MQ==", "url": "https://github.com/graphhopper/graphhopper/pull/2000#discussion_r410669451", "bodyText": "Not handling NumberFormatException gave a misleading error message.", "author": "easbar", "createdAt": "2020-04-18T08:44:22Z", "path": "web-bundle/src/main/java/com/graphhopper/resources/RouteResource.java", "diffHunk": "@@ -273,7 +273,14 @@ private void removeLegacyParameters(GHRequest request) {\n             throw new IllegalArgumentException(\"Alternatives are currently not yet supported for GPX\");\n         }\n \n-        long time = timeString != null ? Long.parseLong(timeString) : System.currentTimeMillis();\n+        long time = System.currentTimeMillis();\n+        if (!Helper.isEmpty(timeString)) {\n+            try {\n+                time = Long.parseLong(timeString);\n+            } catch (NumberFormatException e) {\n+                throw new IllegalArgumentException(\"Invalid value for 'gpx.millis': \" + timeString);", "originalCommit": "b76ff3960c1029136a207a5bb1d0fac76b2c0cc5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1aa4e79b9aa53abb04362f33ee163cc4e0612dd3", "chunk": "diff --git a/web-bundle/src/main/java/com/graphhopper/resources/RouteResource.java b/web-bundle/src/main/java/com/graphhopper/resources/RouteResource.java\nindex 2864038a9..888eabe96 100644\n--- a/web-bundle/src/main/java/com/graphhopper/resources/RouteResource.java\n+++ b/web-bundle/src/main/java/com/graphhopper/resources/RouteResource.java\n\n@@ -273,14 +260,7 @@ public class RouteResource {\n             throw new IllegalArgumentException(\"Alternatives are currently not yet supported for GPX\");\n         }\n \n-        long time = System.currentTimeMillis();\n-        if (!Helper.isEmpty(timeString)) {\n-            try {\n-                time = Long.parseLong(timeString);\n-            } catch (NumberFormatException e) {\n-                throw new IllegalArgumentException(\"Invalid value for 'gpx.millis': \" + timeString);\n-            }\n-        }\n+        long time = timeString != null ? Long.parseLong(timeString) : System.currentTimeMillis();\n         InstructionList instructions = ghRsp.getBest().getInstructions();\n         return Response.ok(GpxFromInstructions.createGPX(instructions, trackName, time, enableElevation, withRoute, withTrack, withWayPoints, version, instructions.getTr()), \"application/gpx+xml\").\n                 header(\"Content-Disposition\", \"attachment;filename=\" + \"GraphHopper.gpx\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3MDI1OQ==", "url": "https://github.com/graphhopper/graphhopper/pull/2000#discussion_r410670259", "bodyText": "This was 'bug' Bug1", "author": "easbar", "createdAt": "2020-04-18T08:51:14Z", "path": "client-hc/src/main/java/com/graphhopper/api/GraphHopperWeb.java", "diffHunk": "@@ -368,7 +376,7 @@ private Request createGetRequest(GHRequest ghRequest) {\n     public String export(GHRequest ghRequest) {\n         String str = \"Creating request failed\";\n         try {\n-            Request okRequest = createGetRequest(ghRequest);\n+            Request okRequest = postRequest ? createPostRequest(ghRequest) : createGetRequest(ghRequest);", "originalCommit": "b76ff3960c1029136a207a5bb1d0fac76b2c0cc5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1aa4e79b9aa53abb04362f33ee163cc4e0612dd3", "chunk": "diff --git a/client-hc/src/main/java/com/graphhopper/api/GraphHopperWeb.java b/client-hc/src/main/java/com/graphhopper/api/GraphHopperWeb.java\nindex b079e4203..9e9e4c7df 100644\n--- a/client-hc/src/main/java/com/graphhopper/api/GraphHopperWeb.java\n+++ b/client-hc/src/main/java/com/graphhopper/api/GraphHopperWeb.java\n\n@@ -376,7 +368,8 @@ public class GraphHopperWeb implements GraphHopperAPI {\n     public String export(GHRequest ghRequest) {\n         String str = \"Creating request failed\";\n         try {\n-            Request okRequest = postRequest ? createPostRequest(ghRequest) : createGetRequest(ghRequest);\n+            // todonow: should there be an error if usePost=true (because it is not supported)\n+            Request okRequest = createGetRequest(ghRequest);\n             str = getClientForRequest(ghRequest).newCall(okRequest).execute().body().string();\n \n             return str;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3MDQ5Mw==", "url": "https://github.com/graphhopper/graphhopper/pull/2000#discussion_r410670493", "bodyText": "We could also remove maxunzipped length here since we are not testing it anyway, but we might need it for some other tests in GraphHopperWebIT (but then we can still add it -> removed it here :))", "author": "easbar", "createdAt": "2020-04-18T08:53:11Z", "path": "web/src/test/java/com/graphhopper/http/resources/RouteResourceTest.java", "diffHunk": "@@ -502,6 +504,54 @@ public void testGPXWithError() {\n         assertTrue(str.contains(\"<hints><error details=\\\"java\"), \"Expected error but was: \" + str);\n     }\n \n+    @ParameterizedTest\n+    @CsvSource({\n+            \"false, -1\",\n+            \"true,0\",\n+            \"true,1000\",\n+    })\n+    public void testGPXExport(boolean usePost, int maxUnzippedLength) {\n+        GHRequest req = new GHRequest(42.554851, 1.536198, 42.510071, 1.548128);\n+        req.putHint(\"elevation\", false);\n+        req.putHint(\"instructions\", true);\n+        req.putHint(\"calc_points\", true);\n+        req.putHint(\"gpx.millis\", \"300000000\");\n+        req.putHint(\"type\", \"gpx\");\n+        GraphHopperWeb gh = new GraphHopperWeb(clientUrl(app, \"/route\"))\n+                .setPostRequest(usePost)\n+                ._setMaxUnzippedLength(maxUnzippedLength);", "originalCommit": "b76ff3960c1029136a207a5bb1d0fac76b2c0cc5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2e385f43987a1b8b7925b314b27d4585d2392753", "chunk": "diff --git a/web/src/test/java/com/graphhopper/http/resources/RouteResourceTest.java b/web/src/test/java/com/graphhopper/http/resources/RouteResourceTest.java\nindex b9166699f..30b4c77fd 100644\n--- a/web/src/test/java/com/graphhopper/http/resources/RouteResourceTest.java\n+++ b/web/src/test/java/com/graphhopper/http/resources/RouteResourceTest.java\n\n@@ -505,12 +505,8 @@ public class RouteResourceTest {\n     }\n \n     @ParameterizedTest\n-    @CsvSource({\n-            \"false, -1\",\n-            \"true,0\",\n-            \"true,1000\",\n-    })\n-    public void testGPXExport(boolean usePost, int maxUnzippedLength) {\n+    @CsvSource({\"false, true\"})\n+    public void testGPXExport(boolean usePost) {\n         GHRequest req = new GHRequest(42.554851, 1.536198, 42.510071, 1.548128);\n         req.putHint(\"elevation\", false);\n         req.putHint(\"instructions\", true);\n"}}, {"oid": "2e385f43987a1b8b7925b314b27d4585d2392753", "url": "https://github.com/graphhopper/graphhopper/commit/2e385f43987a1b8b7925b314b27d4585d2392753", "message": "Remove max unzipped length from test", "committedDate": "2020-04-18T08:55:22Z", "type": "commit"}, {"oid": "47c20f78dd44320c42084cebd45426fe9bcfd74d", "url": "https://github.com/graphhopper/graphhopper/commit/47c20f78dd44320c42084cebd45426fe9bcfd74d", "message": "Minor", "committedDate": "2020-04-18T08:56:41Z", "type": "commit"}, {"oid": "2855db85095dd0c2038cf9562f7cd36f67502316", "url": "https://github.com/graphhopper/graphhopper/commit/2855db85095dd0c2038cf9562f7cd36f67502316", "message": "Fix", "committedDate": "2020-04-20T07:22:44Z", "type": "commit"}, {"oid": "928c7528e3912a83ea9572d9ace1378c20ee5ae1", "url": "https://github.com/graphhopper/graphhopper/commit/928c7528e3912a83ea9572d9ace1378c20ee5ae1", "message": "Merge branch 'master' into issue_1994", "committedDate": "2020-04-20T07:22:50Z", "type": "commit"}, {"oid": "50a7324b5289b20ab44bf893781700f0a7469e52", "url": "https://github.com/graphhopper/graphhopper/commit/50a7324b5289b20ab44bf893781700f0a7469e52", "message": "Merge branch 'master' into issue_1994", "committedDate": "2020-04-20T21:59:29Z", "type": "commit"}, {"oid": "1aa4e79b9aa53abb04362f33ee163cc4e0612dd3", "url": "https://github.com/graphhopper/graphhopper/commit/1aa4e79b9aa53abb04362f33ee163cc4e0612dd3", "message": "Update now that gpx for post is gone", "committedDate": "2020-04-21T09:51:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA2NTE2NQ==", "url": "https://github.com/graphhopper/graphhopper/pull/2000#discussion_r412065165", "bodyText": "Yes, this would be probably a good idea.", "author": "karussell", "createdAt": "2020-04-21T10:27:22Z", "path": "client-hc/src/main/java/com/graphhopper/api/GraphHopperWeb.java", "diffHunk": "@@ -376,7 +368,8 @@ private Request createGetRequest(GHRequest ghRequest) {\n     public String export(GHRequest ghRequest) {\n         String str = \"Creating request failed\";\n         try {\n-            Request okRequest = postRequest ? createPostRequest(ghRequest) : createGetRequest(ghRequest);\n+            // todonow: should there be an error if usePost=true (because it is not supported)", "originalCommit": "1aa4e79b9aa53abb04362f33ee163cc4e0612dd3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}