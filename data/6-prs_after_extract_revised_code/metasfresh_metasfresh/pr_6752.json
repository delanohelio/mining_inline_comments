{"pr_number": 6752, "pr_title": "Window Distribution Order enhancements", "pr_createdAt": "2020-05-28T12:52:45Z", "pr_url": "https://github.com/metasfresh/metasfresh/pull/6752", "timeline": [{"oid": "649bcdc7863768bb2fa0d7f1b6890894bd7e00ca", "url": "https://github.com/metasfresh/metasfresh/commit/649bcdc7863768bb2fa0d7f1b6890894bd7e00ca", "message": "Window Distribution Order enhancements\nrefs: https://github.com/metasfresh/metasfresh/issues/6713", "committedDate": "2020-05-28T12:50:16Z", "type": "commit"}, {"oid": "7515233e608694db118cdc30277f74da262ff942", "url": "https://github.com/metasfresh/metasfresh/commit/7515233e608694db118cdc30277f74da262ff942", "message": "Window Distribution Order enhancements\nrefs: https://github.com/metasfresh/metasfresh/issues/6713", "committedDate": "2020-05-29T15:26:58Z", "type": "commit"}, {"oid": "82afdbb69c44d78d652692271bf22b3e29a8963e", "url": "https://github.com/metasfresh/metasfresh/commit/82afdbb69c44d78d652692271bf22b3e29a8963e", "message": "Window Distribution Order enhancements\nrefs: https://github.com/metasfresh/metasfresh/issues/6713", "committedDate": "2020-05-29T15:29:09Z", "type": "commit"}, {"oid": "c49a6301b8f35a793f8f294dffa501b4784147a7", "url": "https://github.com/metasfresh/metasfresh/commit/c49a6301b8f35a793f8f294dffa501b4784147a7", "message": "removed code from old approach\nrefs: https://github.com/metasfresh/metasfresh/issues/6713", "committedDate": "2020-05-29T17:19:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyNDgyOA==", "url": "https://github.com/metasfresh/metasfresh/pull/6752#discussion_r432924828", "bodyText": "pls introduce I_DD_OrderLine IDDOrderDAO.getLineById(int ddOrderLineId) and use it here.\nAvoid direct InterfaceWrapperHelper.load calls outside of repository/DAO.", "author": "teosarca", "createdAt": "2020-05-31T08:51:06Z", "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/ddorder/process/WEBUI_DD_OrderLine_MoveSelected_HU.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.ddorder.process;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.handlingunits.ddorder.api.IHUDDOrderBL;\n+import de.metas.handlingunits.model.I_DD_OrderLine;\n+import de.metas.handlingunits.model.I_M_HU;\n+import de.metas.process.IProcessDefaultParameter;\n+import de.metas.process.IProcessDefaultParametersProvider;\n+import de.metas.process.IProcessPrecondition;\n+import de.metas.process.Param;\n+import de.metas.process.ProcessPreconditionsResolution;\n+import de.metas.ui.web.handlingunits.HUEditorRow;\n+import de.metas.ui.web.handlingunits.HUEditorView;\n+import de.metas.ui.web.handlingunits.WEBUI_HU_Constants;\n+import de.metas.ui.web.process.adprocess.ViewBasedProcessTemplate;\n+import de.metas.ui.web.view.IViewsRepository;\n+import de.metas.ui.web.view.ViewId;\n+import de.metas.ui.web.window.datatypes.DocumentIdsSelection;\n+import de.metas.util.Services;\n+import org.adempiere.exceptions.AdempiereException;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.compiere.SpringContextHolder;\n+\n+public class WEBUI_DD_OrderLine_MoveSelected_HU extends ViewBasedProcessTemplate implements IProcessPrecondition, IProcessDefaultParametersProvider\n+{\n+\tprivate final IViewsRepository viewsRepository = SpringContextHolder.instance.getBean(IViewsRepository.class);\n+\tprivate final IHUDDOrderBL huDDOrderBL = Services.get(IHUDDOrderBL.class);\n+\n+\tprivate static final String PARAM_M_HU_ID = I_M_HU.COLUMNNAME_M_HU_ID;\n+\t@Param(parameterName = PARAM_M_HU_ID, mandatory = true)\n+\tprivate int mHuID;\n+\n+\tprivate static final String PARAM_DD_ORDER_LINE_ID = I_DD_OrderLine.COLUMNNAME_DD_OrderLine_ID;\n+\t@Param(parameterName = PARAM_DD_ORDER_LINE_ID, mandatory = true)\n+\tprivate int ddOrderLineId;\n+\n+\tprivate static final String PARAM_LOCATOR_TO_ID = I_DD_OrderLine.COLUMNNAME_M_LocatorTo_ID;\n+\t@Param(parameterName = PARAM_LOCATOR_TO_ID, mandatory = true)\n+\tprivate int paramLocatorToId;\n+\n+\n+\n+\tpublic ProcessPreconditionsResolution checkPreconditionsApplicable()\n+\t{\n+\t\tif (getSelectedRowIds().isEmpty())\n+\t\t{\n+\t\t\treturn ProcessPreconditionsResolution.rejectBecauseNoSelection();\n+\t\t}\n+\t\telse if (getSelectedRowIds().isMoreThanOneDocumentId())\n+\t\t{\n+\t\t\treturn ProcessPreconditionsResolution.rejectBecauseNotSingleSelection();\n+\t\t}\n+\t\telse if (huEditorWasNotOpenedFromADDOrderLine())\n+\t\t{\n+\t\t\treturn ProcessPreconditionsResolution\n+\t\t\t\t\t.rejectWithInternalReason(\"The process should only be available when the HUEditor was opened from a DD_OrderLine window!\");\n+\t\t}\n+\t\telse if (selectedRowIsNotATopHU())\n+\t\t{\n+\t\t\treturn ProcessPreconditionsResolution\n+\t\t\t\t\t.reject(msgBL.getTranslatableMsgText(WEBUI_HU_Constants.MSG_WEBUI_ONLY_TOP_LEVEL_HU));\n+\t\t}\n+\n+\t\treturn ProcessPreconditionsResolution.accept();\n+\t}\n+\n+\t@Override\n+\tprotected String doIt() throws Exception\n+\t{\n+\n+\t\tfinal I_DD_OrderLine selectedDDOrderLine = InterfaceWrapperHelper.load(ddOrderLineId, I_DD_OrderLine.class);", "originalCommit": "c49a6301b8f35a793f8f294dffa501b4784147a7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6257d7302f809694c9a7f76a745fc64ccebe8b4b", "chunk": "diff --git a/backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/ddorder/process/WEBUI_DD_OrderLine_MoveSelected_HU.java b/backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/ddorder/process/WEBUI_DD_OrderLine_MoveSelected_HU.java\nindex b9f6d9bb9a..e8ff1d4f1b 100644\n--- a/backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/ddorder/process/WEBUI_DD_OrderLine_MoveSelected_HU.java\n+++ b/backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/ddorder/process/WEBUI_DD_OrderLine_MoveSelected_HU.java\n\n@@ -23,8 +23,9 @@\n package de.metas.ui.web.ddorder.process;\n \n import com.google.common.collect.ImmutableList;\n+import de.metas.handlingunits.HuId;\n+import de.metas.handlingunits.IHandlingUnitsDAO;\n import de.metas.handlingunits.ddorder.api.IHUDDOrderBL;\n-import de.metas.handlingunits.model.I_DD_OrderLine;\n import de.metas.handlingunits.model.I_M_HU;\n import de.metas.process.IProcessDefaultParameter;\n import de.metas.process.IProcessDefaultParametersProvider;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyNDkzOQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6752#discussion_r432924939", "bodyText": "use IDDOrderDAO.getLineById\n(see above)", "author": "teosarca", "createdAt": "2020-05-31T08:52:49Z", "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/ddorder/process/WEBUI_DD_OrderLine_MoveSelected_HU.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.ddorder.process;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.handlingunits.ddorder.api.IHUDDOrderBL;\n+import de.metas.handlingunits.model.I_DD_OrderLine;\n+import de.metas.handlingunits.model.I_M_HU;\n+import de.metas.process.IProcessDefaultParameter;\n+import de.metas.process.IProcessDefaultParametersProvider;\n+import de.metas.process.IProcessPrecondition;\n+import de.metas.process.Param;\n+import de.metas.process.ProcessPreconditionsResolution;\n+import de.metas.ui.web.handlingunits.HUEditorRow;\n+import de.metas.ui.web.handlingunits.HUEditorView;\n+import de.metas.ui.web.handlingunits.WEBUI_HU_Constants;\n+import de.metas.ui.web.process.adprocess.ViewBasedProcessTemplate;\n+import de.metas.ui.web.view.IViewsRepository;\n+import de.metas.ui.web.view.ViewId;\n+import de.metas.ui.web.window.datatypes.DocumentIdsSelection;\n+import de.metas.util.Services;\n+import org.adempiere.exceptions.AdempiereException;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.compiere.SpringContextHolder;\n+\n+public class WEBUI_DD_OrderLine_MoveSelected_HU extends ViewBasedProcessTemplate implements IProcessPrecondition, IProcessDefaultParametersProvider\n+{\n+\tprivate final IViewsRepository viewsRepository = SpringContextHolder.instance.getBean(IViewsRepository.class);\n+\tprivate final IHUDDOrderBL huDDOrderBL = Services.get(IHUDDOrderBL.class);\n+\n+\tprivate static final String PARAM_M_HU_ID = I_M_HU.COLUMNNAME_M_HU_ID;\n+\t@Param(parameterName = PARAM_M_HU_ID, mandatory = true)\n+\tprivate int mHuID;\n+\n+\tprivate static final String PARAM_DD_ORDER_LINE_ID = I_DD_OrderLine.COLUMNNAME_DD_OrderLine_ID;\n+\t@Param(parameterName = PARAM_DD_ORDER_LINE_ID, mandatory = true)\n+\tprivate int ddOrderLineId;\n+\n+\tprivate static final String PARAM_LOCATOR_TO_ID = I_DD_OrderLine.COLUMNNAME_M_LocatorTo_ID;\n+\t@Param(parameterName = PARAM_LOCATOR_TO_ID, mandatory = true)\n+\tprivate int paramLocatorToId;\n+\n+\n+\n+\tpublic ProcessPreconditionsResolution checkPreconditionsApplicable()\n+\t{\n+\t\tif (getSelectedRowIds().isEmpty())\n+\t\t{\n+\t\t\treturn ProcessPreconditionsResolution.rejectBecauseNoSelection();\n+\t\t}\n+\t\telse if (getSelectedRowIds().isMoreThanOneDocumentId())\n+\t\t{\n+\t\t\treturn ProcessPreconditionsResolution.rejectBecauseNotSingleSelection();\n+\t\t}\n+\t\telse if (huEditorWasNotOpenedFromADDOrderLine())\n+\t\t{\n+\t\t\treturn ProcessPreconditionsResolution\n+\t\t\t\t\t.rejectWithInternalReason(\"The process should only be available when the HUEditor was opened from a DD_OrderLine window!\");\n+\t\t}\n+\t\telse if (selectedRowIsNotATopHU())\n+\t\t{\n+\t\t\treturn ProcessPreconditionsResolution\n+\t\t\t\t\t.reject(msgBL.getTranslatableMsgText(WEBUI_HU_Constants.MSG_WEBUI_ONLY_TOP_LEVEL_HU));\n+\t\t}\n+\n+\t\treturn ProcessPreconditionsResolution.accept();\n+\t}\n+\n+\t@Override\n+\tprotected String doIt() throws Exception\n+\t{\n+\n+\t\tfinal I_DD_OrderLine selectedDDOrderLine = InterfaceWrapperHelper.load(ddOrderLineId, I_DD_OrderLine.class);\n+\n+\t\tfinal I_M_HU huToMove = InterfaceWrapperHelper.load(mHuID, I_M_HU.class);\n+\n+\t\thuDDOrderBL.createMovements()\n+\t\t\t\t.setDDOrderLines(ImmutableList.of(selectedDDOrderLine))\n+\t\t\t\t.setLocatorToIdOverride(paramLocatorToId)\n+\t\t\t\t.setDoDirectMovements(true)\n+\t\t\t\t.setFailIfCannotAllocate(true)\n+\t\t\t\t.allocateHU(huToMove)\n+\t\t\t\t.processWithinOwnTrx();\n+\n+\t\treturn MSG_OK;\n+\t}\n+\n+\tprivate boolean huEditorWasNotOpenedFromADDOrderLine()\n+\t{\n+\t\tfinal ViewId parentViewId = getView().getParentViewId();\n+\n+\t\tif (parentViewId == null || getView().getParentRowId() == null)\n+\t\t{\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\tfinal String parentViewTableName = viewsRepository.getView(parentViewId).getTableNameOrNull();\n+\n+\t\treturn !I_DD_OrderLine.Table_Name.equals(parentViewTableName);\n+\t}\n+\n+\tprivate boolean selectedRowIsNotATopHU()\n+\t{\n+\t\treturn getView(HUEditorView.class)\n+\t\t\t\t.streamByIds(getSelectedRowIds())\n+\t\t\t\t.noneMatch(HUEditorRow::isTopLevel);\n+\t}\n+\n+\t@Override\n+\tpublic Object getParameterDefaultValue(final IProcessDefaultParameter parameter)\n+\t{\n+\t\tfinal I_DD_OrderLine ddOrderLine = getSelectedDDOrderLine();\n+\n+\t\tfinal String parameterName = parameter.getColumnName();\n+\t\tif (PARAM_M_HU_ID.equals(parameterName))\n+\t\t{\n+\t\t\treturn getRecord_ID();\n+\t\t}\n+\t\telse if (PARAM_DD_ORDER_LINE_ID.equals(parameterName))\n+\t\t{\n+\t\t\treturn ddOrderLine.getDD_OrderLine_ID();\n+\t\t}\n+\t\telse if (PARAM_LOCATOR_TO_ID.equals(parameterName))\n+\t\t{\n+\t\t\treturn ddOrderLine.getM_LocatorTo_ID();\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\treturn IProcessDefaultParametersProvider.DEFAULT_VALUE_NOTAVAILABLE;\n+\t\t}\n+\t}\n+\n+\tprivate I_DD_OrderLine getSelectedDDOrderLine()\n+\t{\n+\t\tfinal ViewId parentViewId = getView().getParentViewId();\n+\t\tfinal DocumentIdsSelection selectedParentRow = DocumentIdsSelection.of(ImmutableList.of(getView().getParentRowId()));\n+\n+\t\tfinal int selectedOrderLineId = viewsRepository.getView(parentViewId)\n+\t\t\t\t.streamByIds(selectedParentRow)\n+\t\t\t\t.findFirst()\n+\t\t\t\t.orElseThrow(() -> new AdempiereException(\"No DD_OrderLine was selected!\"))\n+\t\t\t\t.getFieldValueAsInt(I_DD_OrderLine.COLUMNNAME_DD_OrderLine_ID, -1);\n+\n+\t\treturn InterfaceWrapperHelper.load(selectedOrderLineId, I_DD_OrderLine.class);", "originalCommit": "c49a6301b8f35a793f8f294dffa501b4784147a7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6257d7302f809694c9a7f76a745fc64ccebe8b4b", "chunk": "diff --git a/backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/ddorder/process/WEBUI_DD_OrderLine_MoveSelected_HU.java b/backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/ddorder/process/WEBUI_DD_OrderLine_MoveSelected_HU.java\nindex b9f6d9bb9a..e8ff1d4f1b 100644\n--- a/backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/ddorder/process/WEBUI_DD_OrderLine_MoveSelected_HU.java\n+++ b/backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/ddorder/process/WEBUI_DD_OrderLine_MoveSelected_HU.java\n\n@@ -23,8 +23,9 @@\n package de.metas.ui.web.ddorder.process;\n \n import com.google.common.collect.ImmutableList;\n+import de.metas.handlingunits.HuId;\n+import de.metas.handlingunits.IHandlingUnitsDAO;\n import de.metas.handlingunits.ddorder.api.IHUDDOrderBL;\n-import de.metas.handlingunits.model.I_DD_OrderLine;\n import de.metas.handlingunits.model.I_M_HU;\n import de.metas.process.IProcessDefaultParameter;\n import de.metas.process.IProcessDefaultParametersProvider;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyNTA1Mg==", "url": "https://github.com/metasfresh/metasfresh/pull/6752#discussion_r432925052", "bodyText": "createHUEditorView would be  better than openHUEditor because it's not opening the view.", "author": "teosarca", "createdAt": "2020-05-31T08:54:17Z", "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/ddorder/process/WEBUI_MoveHUs_HUEditor_Launcher.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.ddorder.process;\n+\n+import de.metas.handlingunits.IHUQueryBuilder;\n+import de.metas.handlingunits.IHandlingUnitsDAO;\n+import de.metas.handlingunits.model.I_DD_OrderLine;\n+import de.metas.handlingunits.model.X_M_HU;\n+import de.metas.process.IProcessPrecondition;\n+import de.metas.process.ProcessExecutionResult;\n+import de.metas.process.ProcessPreconditionsResolution;\n+import de.metas.product.ProductId;\n+import de.metas.ui.web.handlingunits.HUIdsFilterHelper;\n+import de.metas.ui.web.process.adprocess.ViewBasedProcessTemplate;\n+import de.metas.ui.web.view.CreateViewRequest;\n+import de.metas.ui.web.view.IView;\n+import de.metas.ui.web.view.IViewsRepository;\n+import de.metas.ui.web.view.json.JSONViewDataType;\n+import de.metas.util.Services;\n+import org.compiere.SpringContextHolder;\n+\n+import static de.metas.ui.web.ddorder.HUsToMoveViewFactory.WINDOW_ID;\n+import static de.metas.ui.web.ddorder.HUsToMoveViewFactory.WINDOW_ID_STRING;\n+\n+public class WEBUI_MoveHUs_HUEditor_Launcher extends ViewBasedProcessTemplate implements IProcessPrecondition\n+{\n+\n+\tpublic ProcessPreconditionsResolution checkPreconditionsApplicable()\n+\t{\n+\t\tif (getSelectedRowIds().isEmpty())\n+\t\t{\n+\t\t\treturn ProcessPreconditionsResolution.rejectBecauseNoSelection();\n+\t\t}\n+\t\telse if (getSelectedRowIds().isMoreThanOneDocumentId())\n+\t\t{\n+\t\t\treturn ProcessPreconditionsResolution.rejectBecauseNotSingleSelection();\n+\t\t}\n+\n+\t\treturn ProcessPreconditionsResolution.accept();\n+\t}\n+\n+\tprivate final IViewsRepository viewsRepo = SpringContextHolder.instance.getBean(IViewsRepository.class);\n+\n+\t@Override protected String doIt() throws Exception\n+\t{\n+\t\tfinal I_DD_OrderLine ddOrderLine = getRecord(I_DD_OrderLine.class);\n+\n+\t\tfinal IView husToMove = openHUEditor(ddOrderLine);\n+\n+\t\tgetResult().setWebuiViewToOpen(ProcessExecutionResult.WebuiViewToOpen.builder()\n+\t\t\t\t.viewId(husToMove.getViewId().getViewId())\n+\t\t\t\t.profileId(WINDOW_ID_STRING)\n+\t\t\t\t.target(ProcessExecutionResult.ViewOpenTarget.ModalOverlay)\n+\t\t\t\t.build());\n+\n+\t\treturn MSG_OK;\n+\t}\n+\n+\tprivate IView openHUEditor(final I_DD_OrderLine orderLine)", "originalCommit": "c49a6301b8f35a793f8f294dffa501b4784147a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkzMzI2OA==", "url": "https://github.com/metasfresh/metasfresh/pull/6752#discussion_r432933268", "bodyText": "agree", "author": "pvpurcarcosmin", "createdAt": "2020-05-31T10:41:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyNTA1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "6257d7302f809694c9a7f76a745fc64ccebe8b4b", "chunk": "diff --git a/backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/ddorder/process/WEBUI_MoveHUs_HUEditor_Launcher.java b/backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/ddorder/process/WEBUI_MoveHUs_HUEditor_Launcher.java\nindex dbdd5dffd8..f97eb5aec5 100644\n--- a/backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/ddorder/process/WEBUI_MoveHUs_HUEditor_Launcher.java\n+++ b/backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/ddorder/process/WEBUI_MoveHUs_HUEditor_Launcher.java\n\n@@ -24,7 +24,6 @@ package de.metas.ui.web.ddorder.process;\n \n import de.metas.handlingunits.IHUQueryBuilder;\n import de.metas.handlingunits.IHandlingUnitsDAO;\n-import de.metas.handlingunits.model.I_DD_OrderLine;\n import de.metas.handlingunits.model.X_M_HU;\n import de.metas.process.IProcessPrecondition;\n import de.metas.process.ProcessExecutionResult;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyNTEwOA==", "url": "https://github.com/metasfresh/metasfresh/pull/6752#discussion_r432925108", "bodyText": "use IDDOrderDAO.getLineById", "author": "teosarca", "createdAt": "2020-05-31T08:54:54Z", "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/ddorder/process/WEBUI_MoveHUs_HUEditor_Launcher.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.ddorder.process;\n+\n+import de.metas.handlingunits.IHUQueryBuilder;\n+import de.metas.handlingunits.IHandlingUnitsDAO;\n+import de.metas.handlingunits.model.I_DD_OrderLine;\n+import de.metas.handlingunits.model.X_M_HU;\n+import de.metas.process.IProcessPrecondition;\n+import de.metas.process.ProcessExecutionResult;\n+import de.metas.process.ProcessPreconditionsResolution;\n+import de.metas.product.ProductId;\n+import de.metas.ui.web.handlingunits.HUIdsFilterHelper;\n+import de.metas.ui.web.process.adprocess.ViewBasedProcessTemplate;\n+import de.metas.ui.web.view.CreateViewRequest;\n+import de.metas.ui.web.view.IView;\n+import de.metas.ui.web.view.IViewsRepository;\n+import de.metas.ui.web.view.json.JSONViewDataType;\n+import de.metas.util.Services;\n+import org.compiere.SpringContextHolder;\n+\n+import static de.metas.ui.web.ddorder.HUsToMoveViewFactory.WINDOW_ID;\n+import static de.metas.ui.web.ddorder.HUsToMoveViewFactory.WINDOW_ID_STRING;\n+\n+public class WEBUI_MoveHUs_HUEditor_Launcher extends ViewBasedProcessTemplate implements IProcessPrecondition\n+{\n+\n+\tpublic ProcessPreconditionsResolution checkPreconditionsApplicable()\n+\t{\n+\t\tif (getSelectedRowIds().isEmpty())\n+\t\t{\n+\t\t\treturn ProcessPreconditionsResolution.rejectBecauseNoSelection();\n+\t\t}\n+\t\telse if (getSelectedRowIds().isMoreThanOneDocumentId())\n+\t\t{\n+\t\t\treturn ProcessPreconditionsResolution.rejectBecauseNotSingleSelection();\n+\t\t}\n+\n+\t\treturn ProcessPreconditionsResolution.accept();\n+\t}\n+\n+\tprivate final IViewsRepository viewsRepo = SpringContextHolder.instance.getBean(IViewsRepository.class);\n+\n+\t@Override protected String doIt() throws Exception\n+\t{\n+\t\tfinal I_DD_OrderLine ddOrderLine = getRecord(I_DD_OrderLine.class);", "originalCommit": "c49a6301b8f35a793f8f294dffa501b4784147a7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6257d7302f809694c9a7f76a745fc64ccebe8b4b", "chunk": "diff --git a/backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/ddorder/process/WEBUI_MoveHUs_HUEditor_Launcher.java b/backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/ddorder/process/WEBUI_MoveHUs_HUEditor_Launcher.java\nindex dbdd5dffd8..f97eb5aec5 100644\n--- a/backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/ddorder/process/WEBUI_MoveHUs_HUEditor_Launcher.java\n+++ b/backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/ddorder/process/WEBUI_MoveHUs_HUEditor_Launcher.java\n\n@@ -24,7 +24,6 @@ package de.metas.ui.web.ddorder.process;\n \n import de.metas.handlingunits.IHUQueryBuilder;\n import de.metas.handlingunits.IHandlingUnitsDAO;\n-import de.metas.handlingunits.model.I_DD_OrderLine;\n import de.metas.handlingunits.model.X_M_HU;\n import de.metas.process.IProcessPrecondition;\n import de.metas.process.ProcessExecutionResult;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyNTIwNQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6752#discussion_r432925205", "bodyText": "extract Services.get(IHandlingUnitsDAO.class) as a class field (i.e. handlingUnitsDAO)", "author": "teosarca", "createdAt": "2020-05-31T08:55:52Z", "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/ddorder/process/WEBUI_MoveHUs_HUEditor_Launcher.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.ddorder.process;\n+\n+import de.metas.handlingunits.IHUQueryBuilder;\n+import de.metas.handlingunits.IHandlingUnitsDAO;\n+import de.metas.handlingunits.model.I_DD_OrderLine;\n+import de.metas.handlingunits.model.X_M_HU;\n+import de.metas.process.IProcessPrecondition;\n+import de.metas.process.ProcessExecutionResult;\n+import de.metas.process.ProcessPreconditionsResolution;\n+import de.metas.product.ProductId;\n+import de.metas.ui.web.handlingunits.HUIdsFilterHelper;\n+import de.metas.ui.web.process.adprocess.ViewBasedProcessTemplate;\n+import de.metas.ui.web.view.CreateViewRequest;\n+import de.metas.ui.web.view.IView;\n+import de.metas.ui.web.view.IViewsRepository;\n+import de.metas.ui.web.view.json.JSONViewDataType;\n+import de.metas.util.Services;\n+import org.compiere.SpringContextHolder;\n+\n+import static de.metas.ui.web.ddorder.HUsToMoveViewFactory.WINDOW_ID;\n+import static de.metas.ui.web.ddorder.HUsToMoveViewFactory.WINDOW_ID_STRING;\n+\n+public class WEBUI_MoveHUs_HUEditor_Launcher extends ViewBasedProcessTemplate implements IProcessPrecondition\n+{\n+\n+\tpublic ProcessPreconditionsResolution checkPreconditionsApplicable()\n+\t{\n+\t\tif (getSelectedRowIds().isEmpty())\n+\t\t{\n+\t\t\treturn ProcessPreconditionsResolution.rejectBecauseNoSelection();\n+\t\t}\n+\t\telse if (getSelectedRowIds().isMoreThanOneDocumentId())\n+\t\t{\n+\t\t\treturn ProcessPreconditionsResolution.rejectBecauseNotSingleSelection();\n+\t\t}\n+\n+\t\treturn ProcessPreconditionsResolution.accept();\n+\t}\n+\n+\tprivate final IViewsRepository viewsRepo = SpringContextHolder.instance.getBean(IViewsRepository.class);\n+\n+\t@Override protected String doIt() throws Exception\n+\t{\n+\t\tfinal I_DD_OrderLine ddOrderLine = getRecord(I_DD_OrderLine.class);\n+\n+\t\tfinal IView husToMove = openHUEditor(ddOrderLine);\n+\n+\t\tgetResult().setWebuiViewToOpen(ProcessExecutionResult.WebuiViewToOpen.builder()\n+\t\t\t\t.viewId(husToMove.getViewId().getViewId())\n+\t\t\t\t.profileId(WINDOW_ID_STRING)\n+\t\t\t\t.target(ProcessExecutionResult.ViewOpenTarget.ModalOverlay)\n+\t\t\t\t.build());\n+\n+\t\treturn MSG_OK;\n+\t}\n+\n+\tprivate IView openHUEditor(final I_DD_OrderLine orderLine)\n+\t{\n+\t\tfinal IHUQueryBuilder huQuery = createHUQuery(orderLine);\n+\n+\t\tfinal CreateViewRequest request = CreateViewRequest.builder(WINDOW_ID, JSONViewDataType.includedView)\n+\t\t\t\t.addStickyFilters(HUIdsFilterHelper.createFilter(huQuery))\n+\t\t\t\t.setParentViewId(getView().getViewId())\n+\t\t\t\t.setParentRowId(getSelectedRowIds().getSingleDocumentId())\n+\t\t\t\t.build();\n+\n+\t\treturn viewsRepo.createView(request);\n+\t}\n+\n+\tprivate IHUQueryBuilder createHUQuery(final I_DD_OrderLine orderLine)\n+\t{\n+\t\treturn Services.get(IHandlingUnitsDAO.class)", "originalCommit": "c49a6301b8f35a793f8f294dffa501b4784147a7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6257d7302f809694c9a7f76a745fc64ccebe8b4b", "chunk": "diff --git a/backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/ddorder/process/WEBUI_MoveHUs_HUEditor_Launcher.java b/backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/ddorder/process/WEBUI_MoveHUs_HUEditor_Launcher.java\nindex dbdd5dffd8..f97eb5aec5 100644\n--- a/backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/ddorder/process/WEBUI_MoveHUs_HUEditor_Launcher.java\n+++ b/backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/ddorder/process/WEBUI_MoveHUs_HUEditor_Launcher.java\n\n@@ -24,7 +24,6 @@ package de.metas.ui.web.ddorder.process;\n \n import de.metas.handlingunits.IHUQueryBuilder;\n import de.metas.handlingunits.IHandlingUnitsDAO;\n-import de.metas.handlingunits.model.I_DD_OrderLine;\n import de.metas.handlingunits.model.X_M_HU;\n import de.metas.process.IProcessPrecondition;\n import de.metas.process.ProcessExecutionResult;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyNTI5MQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6752#discussion_r432925291", "bodyText": "use HUPIItemProductId instead of int.", "author": "teosarca", "createdAt": "2020-05-31T08:57:15Z", "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/quickinput/ddorderline/DDOrderLineQuickInputDescriptorFactory.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.quickinput.ddorderline;\n+\n+import com.google.common.collect.ImmutableSet;\n+import de.metas.i18n.IMsgBL;\n+import de.metas.lang.SOTrx;\n+import de.metas.ui.web.quickinput.IQuickInputDescriptorFactory;\n+import de.metas.ui.web.quickinput.QuickInputConstants;\n+import de.metas.ui.web.quickinput.QuickInputDescriptor;\n+import de.metas.ui.web.quickinput.QuickInputLayoutDescriptor;\n+import de.metas.ui.web.window.datatypes.DocumentId;\n+import de.metas.ui.web.window.datatypes.DocumentType;\n+import de.metas.ui.web.window.datatypes.LookupValue;\n+import de.metas.ui.web.window.descriptor.DetailId;\n+import de.metas.ui.web.window.descriptor.DocumentEntityDescriptor;\n+import de.metas.ui.web.window.descriptor.DocumentFieldDescriptor;\n+import de.metas.ui.web.window.descriptor.DocumentFieldWidgetType;\n+import de.metas.ui.web.window.descriptor.sql.SqlLookupDescriptor;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.expression.api.ConstantLogicExpression;\n+import org.compiere.util.DisplayType;\n+import org.eevolution.model.I_DD_OrderLine;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+@Component\n+public class DDOrderLineQuickInputDescriptorFactory implements IQuickInputDescriptorFactory\n+{\n+\tprivate final IMsgBL msgBL = Services.get(IMsgBL.class);\n+\n+\tprivate final DDOrderLineQuickInputCallout ddOrderLineQuickInputCallout;\n+\n+\tprivate static final int M_PRODUCT_STOCKED_AD_REFERENCE_ID = 171;\n+\tprivate static final int DD_OrderLine_M_HU_PI_Item_Product = 540299;", "originalCommit": "c49a6301b8f35a793f8f294dffa501b4784147a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyNTMzMg==", "url": "https://github.com/metasfresh/metasfresh/pull/6752#discussion_r432925332", "bodyText": "also can we use a sysconfig instead of hardconding it?", "author": "teosarca", "createdAt": "2020-05-31T08:57:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyNTI5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyNTgxNw==", "url": "https://github.com/metasfresh/metasfresh/pull/6752#discussion_r432925817", "bodyText": "that's not a HUPIItemProductId, is an ad_val_rule_id, I know, bad naming \ud83e\udd26", "author": "pvpurcarcosmin", "createdAt": "2020-05-31T09:03:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyNTI5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "6257d7302f809694c9a7f76a745fc64ccebe8b4b", "chunk": "diff --git a/backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/quickinput/ddorderline/DDOrderLineQuickInputDescriptorFactory.java b/backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/quickinput/ddorderline/DDOrderLineQuickInputDescriptorFactory.java\nindex cc11979ac2..b0b15548f4 100644\n--- a/backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/quickinput/ddorderline/DDOrderLineQuickInputDescriptorFactory.java\n+++ b/backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/quickinput/ddorderline/DDOrderLineQuickInputDescriptorFactory.java\n\n@@ -55,7 +55,7 @@ public class DDOrderLineQuickInputDescriptorFactory implements IQuickInputDescri\n \tprivate final DDOrderLineQuickInputCallout ddOrderLineQuickInputCallout;\n \n \tprivate static final int M_PRODUCT_STOCKED_AD_REFERENCE_ID = 171;\n-\tprivate static final int DD_OrderLine_M_HU_PI_Item_Product = 540299;\n+\tprivate static final int DD_ORDERLINE_M_HU_PI_ITEM_PRODUCT_AD_VAL_RULE_ID = 540299;\n \n \tpublic DDOrderLineQuickInputDescriptorFactory(final DDOrderLineQuickInputCallout ddOrderLineQuickInputCallout)\n \t{\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyNTYwNA==", "url": "https://github.com/metasfresh/metasfresh/pull/6752#discussion_r432925604", "bodyText": "use one of IProductBL.getStockingUOM..  methods", "author": "teosarca", "createdAt": "2020-05-31T09:00:47Z", "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/quickinput/ddorderline/DDOrderLineQuickInputProcessor.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.quickinput.ddorderline;\n+\n+import com.google.common.collect.ImmutableSet;\n+import de.metas.adempiere.gui.search.IHUPackingAware;\n+import de.metas.adempiere.gui.search.IHUPackingAwareBL;\n+import de.metas.adempiere.gui.search.impl.DDOrderLineHUPackingAware;\n+import de.metas.handlingunits.model.I_DD_OrderLine;\n+import de.metas.product.ProductId;\n+import de.metas.ui.web.quickinput.IQuickInputProcessor;\n+import de.metas.ui.web.quickinput.QuickInput;\n+import de.metas.ui.web.window.datatypes.DocumentId;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.exceptions.AdempiereException;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.adempiere.warehouse.LocatorId;\n+import org.adempiere.warehouse.WarehouseId;\n+import org.adempiere.warehouse.api.IWarehouseBL;\n+import org.eevolution.model.I_DD_Order;\n+\n+import java.math.BigDecimal;\n+import java.util.Set;\n+\n+public class DDOrderLineQuickInputProcessor implements IQuickInputProcessor\n+{\n+\tprivate final IWarehouseBL warehouseBL = Services.get(IWarehouseBL.class);\n+\tprivate final IHUPackingAwareBL huPackingAwareBL = Services.get(IHUPackingAwareBL .class);\n+\n+\t@Override\n+\tpublic Set<DocumentId> process(final QuickInput quickInput)\n+\t{\n+\t\tfinal IDDOrderLineQuickInput ddOrderQuickInput = quickInput.getQuickInputDocumentAs(IDDOrderLineQuickInput.class);\n+\n+\t\tfinal ProductId productId = ProductId.ofRepoId(ddOrderQuickInput.getM_Product_ID());\n+\t\tfinal int mHUPIProductID = ddOrderQuickInput.getM_HU_PI_Item_Product_ID();\n+\t\tfinal BigDecimal qty = ddOrderQuickInput.getQty();\n+\n+\t\tfinal I_DD_Order ddOrder = quickInput.getRootDocumentAs(I_DD_Order.class);\n+\t\tfinal I_DD_OrderLine ddOrderLine = InterfaceWrapperHelper.newInstance(I_DD_OrderLine.class, ddOrder);\n+\t\tddOrderLine.setIsInvoiced(false);\n+\t\tddOrderLine.setDD_Order_ID(ddOrder.getDD_Order_ID());\n+\n+\t\tddOrderLine.setM_Product_ID(productId.getRepoId());\n+\t\tddOrderLine.setC_UOM_ID(ddOrderQuickInput.getM_Product().getC_UOM_ID());", "originalCommit": "c49a6301b8f35a793f8f294dffa501b4784147a7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6257d7302f809694c9a7f76a745fc64ccebe8b4b", "chunk": "diff --git a/backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/quickinput/ddorderline/DDOrderLineQuickInputProcessor.java b/backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/quickinput/ddorderline/DDOrderLineQuickInputProcessor.java\nindex 614fe5af0b..36fe6b5bdd 100644\n--- a/backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/quickinput/ddorderline/DDOrderLineQuickInputProcessor.java\n+++ b/backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/quickinput/ddorderline/DDOrderLineQuickInputProcessor.java\n\n@@ -23,21 +23,15 @@\n package de.metas.ui.web.quickinput.ddorderline;\n \n import com.google.common.collect.ImmutableSet;\n-import de.metas.adempiere.gui.search.IHUPackingAware;\n-import de.metas.adempiere.gui.search.IHUPackingAwareBL;\n-import de.metas.adempiere.gui.search.impl.DDOrderLineHUPackingAware;\n-import de.metas.handlingunits.model.I_DD_OrderLine;\n+import de.metas.handlingunits.HUPIItemProductId;\n+import de.metas.handlingunits.ddorder.api.DDOrderLineCreateRequest;\n+import de.metas.handlingunits.ddorder.api.IHUDDOrderBL;\n import de.metas.product.ProductId;\n import de.metas.ui.web.quickinput.IQuickInputProcessor;\n import de.metas.ui.web.quickinput.QuickInput;\n import de.metas.ui.web.window.datatypes.DocumentId;\n import de.metas.util.Services;\n-import lombok.NonNull;\n-import org.adempiere.exceptions.AdempiereException;\n-import org.adempiere.model.InterfaceWrapperHelper;\n-import org.adempiere.warehouse.LocatorId;\n-import org.adempiere.warehouse.WarehouseId;\n-import org.adempiere.warehouse.api.IWarehouseBL;\n+import org.eevolution.api.DDOrderLineId;\n import org.eevolution.model.I_DD_Order;\n \n import java.math.BigDecimal;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyNTY1Mw==", "url": "https://github.com/metasfresh/metasfresh/pull/6752#discussion_r432925653", "bodyText": "use HUPIItemProductId instead of int", "author": "teosarca", "createdAt": "2020-05-31T09:01:25Z", "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/quickinput/ddorderline/DDOrderLineQuickInputProcessor.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.quickinput.ddorderline;\n+\n+import com.google.common.collect.ImmutableSet;\n+import de.metas.adempiere.gui.search.IHUPackingAware;\n+import de.metas.adempiere.gui.search.IHUPackingAwareBL;\n+import de.metas.adempiere.gui.search.impl.DDOrderLineHUPackingAware;\n+import de.metas.handlingunits.model.I_DD_OrderLine;\n+import de.metas.product.ProductId;\n+import de.metas.ui.web.quickinput.IQuickInputProcessor;\n+import de.metas.ui.web.quickinput.QuickInput;\n+import de.metas.ui.web.window.datatypes.DocumentId;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.exceptions.AdempiereException;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.adempiere.warehouse.LocatorId;\n+import org.adempiere.warehouse.WarehouseId;\n+import org.adempiere.warehouse.api.IWarehouseBL;\n+import org.eevolution.model.I_DD_Order;\n+\n+import java.math.BigDecimal;\n+import java.util.Set;\n+\n+public class DDOrderLineQuickInputProcessor implements IQuickInputProcessor\n+{\n+\tprivate final IWarehouseBL warehouseBL = Services.get(IWarehouseBL.class);\n+\tprivate final IHUPackingAwareBL huPackingAwareBL = Services.get(IHUPackingAwareBL .class);\n+\n+\t@Override\n+\tpublic Set<DocumentId> process(final QuickInput quickInput)\n+\t{\n+\t\tfinal IDDOrderLineQuickInput ddOrderQuickInput = quickInput.getQuickInputDocumentAs(IDDOrderLineQuickInput.class);\n+\n+\t\tfinal ProductId productId = ProductId.ofRepoId(ddOrderQuickInput.getM_Product_ID());\n+\t\tfinal int mHUPIProductID = ddOrderQuickInput.getM_HU_PI_Item_Product_ID();", "originalCommit": "c49a6301b8f35a793f8f294dffa501b4784147a7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6257d7302f809694c9a7f76a745fc64ccebe8b4b", "chunk": "diff --git a/backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/quickinput/ddorderline/DDOrderLineQuickInputProcessor.java b/backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/quickinput/ddorderline/DDOrderLineQuickInputProcessor.java\nindex 614fe5af0b..36fe6b5bdd 100644\n--- a/backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/quickinput/ddorderline/DDOrderLineQuickInputProcessor.java\n+++ b/backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/quickinput/ddorderline/DDOrderLineQuickInputProcessor.java\n\n@@ -23,21 +23,15 @@\n package de.metas.ui.web.quickinput.ddorderline;\n \n import com.google.common.collect.ImmutableSet;\n-import de.metas.adempiere.gui.search.IHUPackingAware;\n-import de.metas.adempiere.gui.search.IHUPackingAwareBL;\n-import de.metas.adempiere.gui.search.impl.DDOrderLineHUPackingAware;\n-import de.metas.handlingunits.model.I_DD_OrderLine;\n+import de.metas.handlingunits.HUPIItemProductId;\n+import de.metas.handlingunits.ddorder.api.DDOrderLineCreateRequest;\n+import de.metas.handlingunits.ddorder.api.IHUDDOrderBL;\n import de.metas.product.ProductId;\n import de.metas.ui.web.quickinput.IQuickInputProcessor;\n import de.metas.ui.web.quickinput.QuickInput;\n import de.metas.ui.web.window.datatypes.DocumentId;\n import de.metas.util.Services;\n-import lombok.NonNull;\n-import org.adempiere.exceptions.AdempiereException;\n-import org.adempiere.model.InterfaceWrapperHelper;\n-import org.adempiere.warehouse.LocatorId;\n-import org.adempiere.warehouse.WarehouseId;\n-import org.adempiere.warehouse.api.IWarehouseBL;\n+import org.eevolution.api.DDOrderLineId;\n import org.eevolution.model.I_DD_Order;\n \n import java.math.BigDecimal;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyNTg3OQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6752#discussion_r432925879", "bodyText": "pls consider extracting the logic from this method and introduce\nint IDDOrderBL.addLine(DDOrderLineCreateRequest request)\nwhich basically creates the dd order line and returns the DD_OrderLine_ID.\nIdeally, DDOrderLineQuickInputProcessor shall contain glue code.... as much as possbile.", "author": "teosarca", "createdAt": "2020-05-31T09:04:45Z", "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/quickinput/ddorderline/DDOrderLineQuickInputProcessor.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.quickinput.ddorderline;\n+\n+import com.google.common.collect.ImmutableSet;\n+import de.metas.adempiere.gui.search.IHUPackingAware;\n+import de.metas.adempiere.gui.search.IHUPackingAwareBL;\n+import de.metas.adempiere.gui.search.impl.DDOrderLineHUPackingAware;\n+import de.metas.handlingunits.model.I_DD_OrderLine;\n+import de.metas.product.ProductId;\n+import de.metas.ui.web.quickinput.IQuickInputProcessor;\n+import de.metas.ui.web.quickinput.QuickInput;\n+import de.metas.ui.web.window.datatypes.DocumentId;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.exceptions.AdempiereException;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.adempiere.warehouse.LocatorId;\n+import org.adempiere.warehouse.WarehouseId;\n+import org.adempiere.warehouse.api.IWarehouseBL;\n+import org.eevolution.model.I_DD_Order;\n+\n+import java.math.BigDecimal;\n+import java.util.Set;\n+\n+public class DDOrderLineQuickInputProcessor implements IQuickInputProcessor\n+{\n+\tprivate final IWarehouseBL warehouseBL = Services.get(IWarehouseBL.class);\n+\tprivate final IHUPackingAwareBL huPackingAwareBL = Services.get(IHUPackingAwareBL .class);\n+\n+\t@Override\n+\tpublic Set<DocumentId> process(final QuickInput quickInput)", "originalCommit": "c49a6301b8f35a793f8f294dffa501b4784147a7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6257d7302f809694c9a7f76a745fc64ccebe8b4b", "chunk": "diff --git a/backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/quickinput/ddorderline/DDOrderLineQuickInputProcessor.java b/backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/quickinput/ddorderline/DDOrderLineQuickInputProcessor.java\nindex 614fe5af0b..36fe6b5bdd 100644\n--- a/backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/quickinput/ddorderline/DDOrderLineQuickInputProcessor.java\n+++ b/backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/quickinput/ddorderline/DDOrderLineQuickInputProcessor.java\n\n@@ -23,21 +23,15 @@\n package de.metas.ui.web.quickinput.ddorderline;\n \n import com.google.common.collect.ImmutableSet;\n-import de.metas.adempiere.gui.search.IHUPackingAware;\n-import de.metas.adempiere.gui.search.IHUPackingAwareBL;\n-import de.metas.adempiere.gui.search.impl.DDOrderLineHUPackingAware;\n-import de.metas.handlingunits.model.I_DD_OrderLine;\n+import de.metas.handlingunits.HUPIItemProductId;\n+import de.metas.handlingunits.ddorder.api.DDOrderLineCreateRequest;\n+import de.metas.handlingunits.ddorder.api.IHUDDOrderBL;\n import de.metas.product.ProductId;\n import de.metas.ui.web.quickinput.IQuickInputProcessor;\n import de.metas.ui.web.quickinput.QuickInput;\n import de.metas.ui.web.window.datatypes.DocumentId;\n import de.metas.util.Services;\n-import lombok.NonNull;\n-import org.adempiere.exceptions.AdempiereException;\n-import org.adempiere.model.InterfaceWrapperHelper;\n-import org.adempiere.warehouse.LocatorId;\n-import org.adempiere.warehouse.WarehouseId;\n-import org.adempiere.warehouse.api.IWarehouseBL;\n+import org.eevolution.api.DDOrderLineId;\n import org.eevolution.model.I_DD_Order;\n \n import java.math.BigDecimal;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyNjA1Nw==", "url": "https://github.com/metasfresh/metasfresh/pull/6752#discussion_r432926057", "bodyText": "this method is pointless because warehouseBL.getDefaultLocatorId(warehouseId) never returns null.\nbetter, let's annotate warehouseBL.getDefaultLocatorId(warehouseId) with @NonNull\nsee org.adempiere.warehouse.api.impl.WarehouseBL.getDefaultLocatorId(WarehouseId) which is creating the locator if missing.", "author": "teosarca", "createdAt": "2020-05-31T09:06:55Z", "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/quickinput/ddorderline/DDOrderLineQuickInputProcessor.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.quickinput.ddorderline;\n+\n+import com.google.common.collect.ImmutableSet;\n+import de.metas.adempiere.gui.search.IHUPackingAware;\n+import de.metas.adempiere.gui.search.IHUPackingAwareBL;\n+import de.metas.adempiere.gui.search.impl.DDOrderLineHUPackingAware;\n+import de.metas.handlingunits.model.I_DD_OrderLine;\n+import de.metas.product.ProductId;\n+import de.metas.ui.web.quickinput.IQuickInputProcessor;\n+import de.metas.ui.web.quickinput.QuickInput;\n+import de.metas.ui.web.window.datatypes.DocumentId;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.exceptions.AdempiereException;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.adempiere.warehouse.LocatorId;\n+import org.adempiere.warehouse.WarehouseId;\n+import org.adempiere.warehouse.api.IWarehouseBL;\n+import org.eevolution.model.I_DD_Order;\n+\n+import java.math.BigDecimal;\n+import java.util.Set;\n+\n+public class DDOrderLineQuickInputProcessor implements IQuickInputProcessor\n+{\n+\tprivate final IWarehouseBL warehouseBL = Services.get(IWarehouseBL.class);\n+\tprivate final IHUPackingAwareBL huPackingAwareBL = Services.get(IHUPackingAwareBL .class);\n+\n+\t@Override\n+\tpublic Set<DocumentId> process(final QuickInput quickInput)\n+\t{\n+\t\tfinal IDDOrderLineQuickInput ddOrderQuickInput = quickInput.getQuickInputDocumentAs(IDDOrderLineQuickInput.class);\n+\n+\t\tfinal ProductId productId = ProductId.ofRepoId(ddOrderQuickInput.getM_Product_ID());\n+\t\tfinal int mHUPIProductID = ddOrderQuickInput.getM_HU_PI_Item_Product_ID();\n+\t\tfinal BigDecimal qty = ddOrderQuickInput.getQty();\n+\n+\t\tfinal I_DD_Order ddOrder = quickInput.getRootDocumentAs(I_DD_Order.class);\n+\t\tfinal I_DD_OrderLine ddOrderLine = InterfaceWrapperHelper.newInstance(I_DD_OrderLine.class, ddOrder);\n+\t\tddOrderLine.setIsInvoiced(false);\n+\t\tddOrderLine.setDD_Order_ID(ddOrder.getDD_Order_ID());\n+\n+\t\tddOrderLine.setM_Product_ID(productId.getRepoId());\n+\t\tddOrderLine.setC_UOM_ID(ddOrderQuickInput.getM_Product().getC_UOM_ID());\n+\n+\t\tfinal WarehouseId warehouseIdFrom = WarehouseId.ofRepoId(ddOrder.getM_Warehouse_From_ID());\n+\t\tfinal LocatorId locatorFromId = getDefaultLocatorID(warehouseIdFrom, \"DD_Order.M_Warehouse_From_ID\");\n+\t\tddOrderLine.setM_Locator_ID(locatorFromId.getRepoId());\n+\n+\t\tfinal WarehouseId warehouseToId = WarehouseId.ofRepoId(ddOrder.getM_Warehouse_To_ID());\n+\t\tfinal LocatorId locatorToId = getDefaultLocatorID(warehouseToId, \"DD_Order.M_Warehouse_To_ID\");\n+\t\tddOrderLine.setM_LocatorTo_ID(locatorToId.getRepoId());\n+\n+\t\tif (mHUPIProductID > 0)\n+\t\t{\n+\t\t\tddOrderLine.setM_HU_PI_Item_Product_ID(mHUPIProductID);\n+\t\t\tddOrderLine.setQtyEnteredTU(qty);\n+\n+\t\t\tfinal IHUPackingAware packingAware = new DDOrderLineHUPackingAware(ddOrderLine);\n+\n+\t\t\thuPackingAwareBL.setQtyCUFromQtyTU(packingAware, qty.intValue());\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\tddOrderLine.setQtyEntered(qty);\n+\t\t}\n+\n+\t\tInterfaceWrapperHelper.saveRecord(ddOrderLine);\n+\n+\t\tfinal DocumentId documentId = DocumentId.of(ddOrderLine.getDD_OrderLine_ID());\n+\t\treturn ImmutableSet.of(documentId);\n+\t}\n+\n+\t@NonNull\n+\tprivate LocatorId getDefaultLocatorID(@NonNull final WarehouseId warehouseId, @NonNull final String warehouseIDColumn)", "originalCommit": "c49a6301b8f35a793f8f294dffa501b4784147a7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6257d7302f809694c9a7f76a745fc64ccebe8b4b", "chunk": "diff --git a/backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/quickinput/ddorderline/DDOrderLineQuickInputProcessor.java b/backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/quickinput/ddorderline/DDOrderLineQuickInputProcessor.java\nindex 614fe5af0b..36fe6b5bdd 100644\n--- a/backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/quickinput/ddorderline/DDOrderLineQuickInputProcessor.java\n+++ b/backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/quickinput/ddorderline/DDOrderLineQuickInputProcessor.java\n\n@@ -23,21 +23,15 @@\n package de.metas.ui.web.quickinput.ddorderline;\n \n import com.google.common.collect.ImmutableSet;\n-import de.metas.adempiere.gui.search.IHUPackingAware;\n-import de.metas.adempiere.gui.search.IHUPackingAwareBL;\n-import de.metas.adempiere.gui.search.impl.DDOrderLineHUPackingAware;\n-import de.metas.handlingunits.model.I_DD_OrderLine;\n+import de.metas.handlingunits.HUPIItemProductId;\n+import de.metas.handlingunits.ddorder.api.DDOrderLineCreateRequest;\n+import de.metas.handlingunits.ddorder.api.IHUDDOrderBL;\n import de.metas.product.ProductId;\n import de.metas.ui.web.quickinput.IQuickInputProcessor;\n import de.metas.ui.web.quickinput.QuickInput;\n import de.metas.ui.web.window.datatypes.DocumentId;\n import de.metas.util.Services;\n-import lombok.NonNull;\n-import org.adempiere.exceptions.AdempiereException;\n-import org.adempiere.model.InterfaceWrapperHelper;\n-import org.adempiere.warehouse.LocatorId;\n-import org.adempiere.warehouse.WarehouseId;\n-import org.adempiere.warehouse.api.IWarehouseBL;\n+import org.eevolution.api.DDOrderLineId;\n import org.eevolution.model.I_DD_Order;\n \n import java.math.BigDecimal;\n"}}, {"oid": "6257d7302f809694c9a7f76a745fc64ccebe8b4b", "url": "https://github.com/metasfresh/metasfresh/commit/6257d7302f809694c9a7f76a745fc64ccebe8b4b", "message": "req changes\nrefs: https://github.com/metasfresh/metasfresh/issues/6713", "committedDate": "2020-05-31T12:21:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk0NzE5Nw==", "url": "https://github.com/metasfresh/metasfresh/pull/6752#discussion_r432947197", "bodyText": "also @NonNull param", "author": "teosarca", "createdAt": "2020-05-31T13:27:54Z", "path": "backend/de.metas.adempiere.libero.libero/src/main/java/org/eevolution/api/impl/DDOrderDAO.java", "diffHunk": "@@ -242,4 +246,20 @@ public void save(@NonNull final I_DD_OrderLine_Or_Alternative ddOrderLineOrAlter\n \t{\n \t\tsaveRecord(ddOrderLineOrAlternative);\n \t}\n+\n+\n+\t@NonNull\n+\tpublic I_DD_OrderLine getLineById(final DDOrderLineId ddOrderLineID)", "originalCommit": "6257d7302f809694c9a7f76a745fc64ccebe8b4b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7892a56787252cf9cf589b082e1c97873b17136b", "chunk": "diff --git a/backend/de.metas.adempiere.libero.libero/src/main/java/org/eevolution/api/impl/DDOrderDAO.java b/backend/de.metas.adempiere.libero.libero/src/main/java/org/eevolution/api/impl/DDOrderDAO.java\nindex 5745dc9d4f..d27561c319 100644\n--- a/backend/de.metas.adempiere.libero.libero/src/main/java/org/eevolution/api/impl/DDOrderDAO.java\n+++ b/backend/de.metas.adempiere.libero.libero/src/main/java/org/eevolution/api/impl/DDOrderDAO.java\n\n@@ -249,7 +249,7 @@ public class DDOrderDAO implements IDDOrderDAO\n \n \n \t@NonNull\n-\tpublic I_DD_OrderLine getLineById(final DDOrderLineId ddOrderLineID)\n+\tpublic I_DD_OrderLine getLineById(@NonNull final DDOrderLineId ddOrderLineID)\n \t{\n \t\tfinal I_DD_OrderLine record = InterfaceWrapperHelper.load(ddOrderLineID, I_DD_OrderLine.class);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk0NzIzNw==", "url": "https://github.com/metasfresh/metasfresh/pull/6752#discussion_r432947237", "bodyText": "nice!", "author": "teosarca", "createdAt": "2020-05-31T13:28:22Z", "path": "backend/de.metas.adempiere.libero.libero/src/main/java/org/eevolution/api/impl/DDOrderDAO.java", "diffHunk": "@@ -24,42 +52,18 @@\n  * #L%\n  */\n \n-import java.util.List;\n-\n-import org.adempiere.ad.dao.ConstantQueryFilter;\n-import org.adempiere.ad.dao.IQueryBL;\n-import org.adempiere.ad.dao.IQueryBuilder;\n-import org.adempiere.ad.dao.IQueryFilter;\n-import org.compiere.model.I_M_Forecast;\n-import org.compiere.model.I_M_MovementLine;\n-import org.eevolution.api.IDDOrderDAO;\n-import org.eevolution.model.I_DD_Order;\n-import org.eevolution.model.I_DD_OrderLine;\n-import org.eevolution.model.I_DD_OrderLine_Alternative;\n-import org.eevolution.model.I_DD_OrderLine_Or_Alternative;\n-import org.eevolution.model.I_PP_MRP;\n-import org.eevolution.model.I_PP_MRP_Alloc;\n-import org.eevolution.model.I_PP_Order;\n-import org.eevolution.model.X_PP_MRP;\n-import org.eevolution.mrp.api.IMRPDAO;\n-import org.slf4j.Logger;\n-\n-import de.metas.logging.LogManager;\n-import de.metas.material.planning.pporder.LiberoException;\n-import de.metas.util.Check;\n-import de.metas.util.Services;\n-import lombok.NonNull;\n-\n public class DDOrderDAO implements IDDOrderDAO\n {\n \tprivate final transient Logger logger = LogManager.getLogger(getClass());\n \n+\tprivate final  IQueryBL queryBL = Services.get(IQueryBL.class);", "originalCommit": "6257d7302f809694c9a7f76a745fc64ccebe8b4b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "7892a56787252cf9cf589b082e1c97873b17136b", "url": "https://github.com/metasfresh/metasfresh/commit/7892a56787252cf9cf589b082e1c97873b17136b", "message": "req changes 2\nrefs: https://github.com/metasfresh/metasfresh/issues/6713", "committedDate": "2020-06-02T06:01:43Z", "type": "commit"}]}