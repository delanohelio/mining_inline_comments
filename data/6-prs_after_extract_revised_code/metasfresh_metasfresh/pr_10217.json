{"pr_number": 10217, "pr_title": "Gh10197 2", "pr_createdAt": "2020-11-11T17:16:00Z", "pr_url": "https://github.com/metasfresh/metasfresh/pull/10217", "timeline": [{"oid": "dada0fe3da8e94c90a3cbb609f752a23404466e0", "url": "https://github.com/metasfresh/metasfresh/commit/dada0fe3da8e94c90a3cbb609f752a23404466e0", "message": "#10197\n - Initial commit", "committedDate": "2020-11-11T17:14:46Z", "type": "commit"}, {"oid": "6443ed249b8ef6c5e35aa3f2c6556f340783816b", "url": "https://github.com/metasfresh/metasfresh/commit/6443ed249b8ef6c5e35aa3f2c6556f340783816b", "message": "#10197\n - Fix test", "committedDate": "2020-11-12T07:58:44Z", "type": "commit"}, {"oid": "b288e8f5c26ee621ad7f20b994681bb2b134e210", "url": "https://github.com/metasfresh/metasfresh/commit/b288e8f5c26ee621ad7f20b994681bb2b134e210", "message": "#10197\n - Final Modifications.", "committedDate": "2020-11-12T16:32:25Z", "type": "commit"}, {"oid": "b07e6096e52ca0598af562d772bfde6a87deed08", "url": "https://github.com/metasfresh/metasfresh/commit/b07e6096e52ca0598af562d772bfde6a87deed08", "message": "#10197\n - Adjusted SqlForFetchingLookupById to take into consideration validation rules.", "committedDate": "2020-11-13T13:09:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc4MzEwMg==", "url": "https://github.com/metasfresh/metasfresh/pull/10217#discussion_r526783102", "bodyText": "avoid manually changing the generated classes", "author": "teosarca", "createdAt": "2020-11-19T11:17:15Z", "path": "backend/de.metas.adempiere.adempiere/base/src/main/java-gen/org/compiere/model/X_C_DocType.java", "diffHunk": "@@ -1,11 +1,15 @@\n-/** Generated Model - DO NOT CHANGE */\n+/**\n+ * Generated Model - DO NOT CHANGE", "originalCommit": "b07e6096e52ca0598af562d772bfde6a87deed08", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d0195cf014036f51ca2db6c6b794d977d15a65af", "chunk": "diff --git a/backend/de.metas.adempiere.adempiere/base/src/main/java-gen/org/compiere/model/X_C_DocType.java b/backend/de.metas.adempiere.adempiere/base/src/main/java-gen/org/compiere/model/X_C_DocType.java\nindex 0ce5b9c497..0ad3bd6e1a 100644\n--- a/backend/de.metas.adempiere.adempiere/base/src/main/java-gen/org/compiere/model/X_C_DocType.java\n+++ b/backend/de.metas.adempiere.adempiere/base/src/main/java-gen/org/compiere/model/X_C_DocType.java\n\n@@ -1,59 +1,32 @@\n-/**\n- * Generated Model - DO NOT CHANGE\n- */\n+// Generated Model - DO NOT CHANGE\n package org.compiere.model;\n \n+import javax.annotation.Nullable;\n import java.sql.ResultSet;\n import java.util.Properties;\n \n /**\n  * Generated Model for C_DocType\n  *\n- * @author Adempiere (generated)\n+ * @author metasfresh (generated)\n  */\n-@SuppressWarnings(\"javadoc\")\n public class X_C_DocType extends org.compiere.model.PO implements I_C_DocType, org.compiere.model.I_Persistent\n {\n \n-\t/**\n-\t *\n-\t */\n-\tprivate static final long serialVersionUID = -1772531968L;\n+\tprivate static final long serialVersionUID = 1116429568L;\n \n \t/**\n \t * Standard Constructor\n \t */\n-\tpublic X_C_DocType(Properties ctx, int C_DocType_ID, String trxName)\n+\tpublic X_C_DocType(final Properties ctx, final int C_DocType_ID, @Nullable final String trxName)\n \t{\n \t\tsuper(ctx, C_DocType_ID, trxName);\n-\t\t/** if (C_DocType_ID == 0)\n-\t\t {\n-\t\t setC_DocType_ID (0);\n-\t\t setDocBaseType (null);\n-\t\t setDocumentCopies (0); // 1\n-\t\t setEntityType (null);\n-\t\t setGL_Category_ID (0);\n-\t\t setHasCharges (false);\n-\t\t setIsCopyDescriptionToDocument (true); // Y\n-\t\t setIsCreateCounter (true); // Y\n-\t\t setIsDefault (false);\n-\t\t setIsDefaultCounterDoc (false);\n-\t\t setIsDocNoControlled (true); // Y\n-\t\t setIsIndexed (false);\n-\t\t setIsInTransit (false);\n-\t\t setIsPickQAConfirm (false);\n-\t\t setIsShipConfirm (false);\n-\t\t setIsSOTrx (false);\n-\t\t setIsSplitWhenDifference (false); // N\n-\t\t setName (null);\n-\t\t setPrintName (null);\n-\t\t } */\n \t}\n \n \t/**\n \t * Load Constructor\n \t */\n-\tpublic X_C_DocType(Properties ctx, ResultSet rs, String trxName)\n+\tpublic X_C_DocType(final Properties ctx, final ResultSet rs, @Nullable final String trxName)\n \t{\n \t\tsuper(ctx, rs, trxName);\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc5MjU2MQ==", "url": "https://github.com/metasfresh/metasfresh/pull/10217#discussion_r526792561", "bodyText": "remove it and introduce and use C_DocType.R_RequestType_ID", "author": "teosarca", "createdAt": "2020-11-19T11:25:24Z", "path": "backend/de.metas.business/src/main/java/de/metas/request/api/IRequestTypeDAO.java", "diffHunk": "@@ -31,5 +31,7 @@\n \n \tRequestTypeId retrieveCustomerRequestTypeId();\n \n+\tRequestTypeId retrieveTestApplianceRequestTypeId();", "originalCommit": "b07e6096e52ca0598af562d772bfde6a87deed08", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3333acb2990759ae83b9f9c1a427c8c579f941d0", "chunk": "diff --git a/backend/de.metas.business/src/main/java/de/metas/request/api/IRequestTypeDAO.java b/backend/de.metas.business/src/main/java/de/metas/request/api/IRequestTypeDAO.java\nindex 5997ce2272..c0349f537a 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/request/api/IRequestTypeDAO.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/request/api/IRequestTypeDAO.java\n\n@@ -31,7 +31,5 @@ public interface IRequestTypeDAO extends ISingletonService\n \n \tRequestTypeId retrieveCustomerRequestTypeId();\n \n-\tRequestTypeId retrieveTestApplianceRequestTypeId();\n-\n \tRequestTypeId retrieveDefaultRequestTypeIdOrFirstActive();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc5MzA4MQ==", "url": "https://github.com/metasfresh/metasfresh/pull/10217#discussion_r526793081", "bodyText": "IMHO not needed. You can extract it from recordRef when applies. see below.", "author": "teosarca", "createdAt": "2020-11-19T11:26:15Z", "path": "backend/de.metas.business/src/main/java/de/metas/request/api/RequestCandidate.java", "diffHunk": "@@ -53,6 +52,8 @@\n \n \tTableRecordReference recordRef;\n \n+\tOrderId orderId;", "originalCommit": "b07e6096e52ca0598af562d772bfde6a87deed08", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3333acb2990759ae83b9f9c1a427c8c579f941d0", "chunk": "diff --git a/backend/de.metas.business/src/main/java/de/metas/request/api/RequestCandidate.java b/backend/de.metas.business/src/main/java/de/metas/request/api/RequestCandidate.java\nindex 282cba98dc..04e030d802 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/request/api/RequestCandidate.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/request/api/RequestCandidate.java\n\n@@ -52,8 +51,6 @@ public class RequestCandidate\n \n \tTableRecordReference recordRef;\n \n-\tOrderId orderId;\n-\n \t@NonNull\n \tZonedDateTime dateDelivered;\n \t@NonNull\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc5MzU5Ng==", "url": "https://github.com/metasfresh/metasfresh/pull/10217#discussion_r526793596", "bodyText": "check if canddiate.getRecordRef().getTableName() equals C_Order => if yes, setC_Order_ID(recordRef's record_ID)", "author": "teosarca", "createdAt": "2020-11-19T11:27:09Z", "path": "backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestDAO.java", "diffHunk": "@@ -47,14 +46,15 @@\n \tpublic I_R_Request createRequest(@NonNull final RequestCandidate candidate)\n \t{\n \t\tfinal I_R_Request request = newInstance(I_R_Request.class);\n-\n+;\n \t\trequest.setSummary(candidate.getSummary());\n \t\trequest.setConfidentialType(candidate.getConfidentialType());\n \t\trequest.setAD_Org_ID(candidate.getOrgId().getRepoId());\n \t\trequest.setM_Product_ID(ProductId.toRepoId(candidate.getProductId()));\n \t\trequest.setAD_Table_ID(candidate.getRecordRef() != null ? candidate.getRecordRef().getAD_Table_ID() : -1);\n \t\trequest.setRecord_ID(candidate.getRecordRef() != null ? candidate.getRecordRef().getRecord_ID() : -1);\n \t\trequest.setC_BPartner_ID(BPartnerId.toRepoId(candidate.getPartnerId()));\n+\t\trequest.setC_Order_ID(candidate.getOrderId() != null ? candidate.getOrderId().getRepoId() : 0);", "originalCommit": "b07e6096e52ca0598af562d772bfde6a87deed08", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3333acb2990759ae83b9f9c1a427c8c579f941d0", "chunk": "diff --git a/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestDAO.java b/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestDAO.java\nindex 29988388c7..b0423bed1c 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestDAO.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestDAO.java\n\n@@ -46,7 +47,7 @@ public class RequestDAO implements IRequestDAO\n \tpublic I_R_Request createRequest(@NonNull final RequestCandidate candidate)\n \t{\n \t\tfinal I_R_Request request = newInstance(I_R_Request.class);\n-;\n+\t\t;\n \t\trequest.setSummary(candidate.getSummary());\n \t\trequest.setConfidentialType(candidate.getConfidentialType());\n \t\trequest.setAD_Org_ID(candidate.getOrgId().getRepoId());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc5Mzk1MA==", "url": "https://github.com/metasfresh/metasfresh/pull/10217#discussion_r526793950", "bodyText": "remove it, not needed. use C_DocType.R_RequestType_ID.", "author": "teosarca", "createdAt": "2020-11-19T11:27:42Z", "path": "backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestTypeDAO.java", "diffHunk": "@@ -41,6 +41,8 @@\n \tstatic final String InternalName_CustomerComplaint = \"A_CustomerComplaint\";\n \t@VisibleForTesting\n \tstatic final String InternalName_VendorComplaint = \"B_VendorComplaint\";\n+\t@VisibleForTesting\n+\tstatic final String InternalName_TestAppliance = \"T_TestAppliance\";", "originalCommit": "b07e6096e52ca0598af562d772bfde6a87deed08", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3333acb2990759ae83b9f9c1a427c8c579f941d0", "chunk": "diff --git a/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestTypeDAO.java b/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestTypeDAO.java\nindex f13baa6d5d..484bf27ef5 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestTypeDAO.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestTypeDAO.java\n\n@@ -41,8 +39,6 @@ public class RequestTypeDAO implements IRequestTypeDAO\n \tstatic final String InternalName_CustomerComplaint = \"A_CustomerComplaint\";\n \t@VisibleForTesting\n \tstatic final String InternalName_VendorComplaint = \"B_VendorComplaint\";\n-\t@VisibleForTesting\n-\tstatic final String InternalName_TestAppliance = \"T_TestAppliance\";\n \n \tfinal IQueryBL queryBL = Services.get(IQueryBL.class);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc5NDQ5Mw==", "url": "https://github.com/metasfresh/metasfresh/pull/10217#discussion_r526794493", "bodyText": "remove it", "author": "teosarca", "createdAt": "2020-11-19T11:28:39Z", "path": "backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestTypeDAO.java", "diffHunk": "@@ -56,6 +58,12 @@ public RequestTypeId retrieveCustomerRequestTypeId()\n \t\treturn retrieveRequestTypeIdByInternalName(InternalName_CustomerComplaint);\n \t}\n \n+\t@Override\n+\tpublic RequestTypeId retrieveTestApplianceRequestTypeId()", "originalCommit": "b07e6096e52ca0598af562d772bfde6a87deed08", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3333acb2990759ae83b9f9c1a427c8c579f941d0", "chunk": "diff --git a/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestTypeDAO.java b/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestTypeDAO.java\nindex f13baa6d5d..484bf27ef5 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestTypeDAO.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestTypeDAO.java\n\n@@ -58,12 +54,6 @@ public class RequestTypeDAO implements IRequestTypeDAO\n \t\treturn retrieveRequestTypeIdByInternalName(InternalName_CustomerComplaint);\n \t}\n \n-\t@Override\n-\tpublic RequestTypeId retrieveTestApplianceRequestTypeId()\n-\t{\n-\t\treturn retrieveRequestTypeIdByInternalName(InternalName_TestAppliance);\n-\t}\n-\n \tprivate RequestTypeId retrieveRequestTypeIdByInternalName(final String internalName)\n \t{\n \t\tfinal RequestTypeId requestTypeId = queryBL.createQueryBuilderOutOfTrx(I_R_RequestType.class)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc5NjQ4Mg==", "url": "https://github.com/metasfresh/metasfresh/pull/10217#discussion_r526796482", "bodyText": "remote this method. no need to register user notifications topics.", "author": "teosarca", "createdAt": "2020-11-19T11:32:07Z", "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package de.metas.order.model.validator;\n+\n+import de.metas.event.IEventBusFactory;\n+import de.metas.inout.event.InOutUserNotificationsProducer;\n+import de.metas.inout.event.ReturnInOutUserNotificationsProducer;\n+import de.metas.request.service.async.spi.impl.R_Request_CreateFromOrder_Async;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.modelvalidator.annotations.DocValidate;\n+import org.adempiere.ad.modelvalidator.annotations.Init;\n+import org.adempiere.ad.modelvalidator.annotations.Interceptor;\n+import org.compiere.model.I_C_Order;\n+import org.compiere.model.ModelValidator;\n+import org.compiere.model.X_C_DocType;\n+\n+@Interceptor(I_C_Order.class)\n+public class C_Order\n+{\n+\t@Init\n+\tpublic void onInit()", "originalCommit": "b07e6096e52ca0598af562d772bfde6a87deed08", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3333acb2990759ae83b9f9c1a427c8c579f941d0", "chunk": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java\nindex d168d5f488..9eada13fcc 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java\n\n@@ -1,35 +1,27 @@\n package de.metas.order.model.validator;\n \n-import de.metas.event.IEventBusFactory;\n-import de.metas.inout.event.InOutUserNotificationsProducer;\n-import de.metas.inout.event.ReturnInOutUserNotificationsProducer;\n+import de.metas.document.IDocTypeDAO;\n import de.metas.request.service.async.spi.impl.R_Request_CreateFromOrder_Async;\n import de.metas.util.Services;\n import lombok.NonNull;\n import org.adempiere.ad.modelvalidator.annotations.DocValidate;\n-import org.adempiere.ad.modelvalidator.annotations.Init;\n import org.adempiere.ad.modelvalidator.annotations.Interceptor;\n+import org.compiere.model.I_C_DocType;\n import org.compiere.model.I_C_Order;\n import org.compiere.model.ModelValidator;\n-import org.compiere.model.X_C_DocType;\n \n @Interceptor(I_C_Order.class)\n public class C_Order\n {\n-\t@Init\n-\tpublic void onInit()\n-\t{\n-\t\t// Setup event bus topics on which swing client notification listener shall subscribe\n-\t\tServices.get(IEventBusFactory.class).addAvailableUserNotificationsTopic(InOutUserNotificationsProducer.EVENTBUS_TOPIC);\n-\t\tServices.get(IEventBusFactory.class).addAvailableUserNotificationsTopic(ReturnInOutUserNotificationsProducer.EVENTBUS_TOPIC);\n-\t}\n+\tprivate final IDocTypeDAO docTypeDAO = Services.get(IDocTypeDAO.class);\n \n \t@DocValidate(timings = ModelValidator.TIMING_AFTER_COMPLETE)\n \tpublic void createRequest(@NonNull final de.metas.adempiere.model.I_C_Order order)\n \t{\n-\t\tif (order.getC_DocTypeTarget_ID() == X_C_DocType.DOCTYPE_TEST_APPLIANCE)\n+\t\tfinal I_C_DocType docType = docTypeDAO.getById(order.getC_DocTypeTarget_ID());\n+\t\tif (docType.getR_RequestType_ID() != 0)\n \t\t{\n-\t\t\tR_Request_CreateFromOrder_Async.createWorkpackage(order.getC_Order_ID());\n+\t\t\tR_Request_CreateFromOrder_Async.createWorkpackage(order);\n \t\t}\n \n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc5NjgzNA==", "url": "https://github.com/metasfresh/metasfresh/pull/10217#discussion_r526796834", "bodyText": "use/check C_DocType.R_RequestType_ID to decide if we are going to generate a request.", "author": "teosarca", "createdAt": "2020-11-19T11:32:44Z", "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package de.metas.order.model.validator;\n+\n+import de.metas.event.IEventBusFactory;\n+import de.metas.inout.event.InOutUserNotificationsProducer;\n+import de.metas.inout.event.ReturnInOutUserNotificationsProducer;\n+import de.metas.request.service.async.spi.impl.R_Request_CreateFromOrder_Async;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.modelvalidator.annotations.DocValidate;\n+import org.adempiere.ad.modelvalidator.annotations.Init;\n+import org.adempiere.ad.modelvalidator.annotations.Interceptor;\n+import org.compiere.model.I_C_Order;\n+import org.compiere.model.ModelValidator;\n+import org.compiere.model.X_C_DocType;\n+\n+@Interceptor(I_C_Order.class)\n+public class C_Order\n+{\n+\t@Init\n+\tpublic void onInit()\n+\t{\n+\t\t// Setup event bus topics on which swing client notification listener shall subscribe\n+\t\tServices.get(IEventBusFactory.class).addAvailableUserNotificationsTopic(InOutUserNotificationsProducer.EVENTBUS_TOPIC);\n+\t\tServices.get(IEventBusFactory.class).addAvailableUserNotificationsTopic(ReturnInOutUserNotificationsProducer.EVENTBUS_TOPIC);\n+\t}\n+\n+\t@DocValidate(timings = ModelValidator.TIMING_AFTER_COMPLETE)\n+\tpublic void createRequest(@NonNull final de.metas.adempiere.model.I_C_Order order)\n+\t{\n+\t\tif (order.getC_DocTypeTarget_ID() == X_C_DocType.DOCTYPE_TEST_APPLIANCE)", "originalCommit": "b07e6096e52ca0598af562d772bfde6a87deed08", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3333acb2990759ae83b9f9c1a427c8c579f941d0", "chunk": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java\nindex d168d5f488..9eada13fcc 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java\n\n@@ -1,35 +1,27 @@\n package de.metas.order.model.validator;\n \n-import de.metas.event.IEventBusFactory;\n-import de.metas.inout.event.InOutUserNotificationsProducer;\n-import de.metas.inout.event.ReturnInOutUserNotificationsProducer;\n+import de.metas.document.IDocTypeDAO;\n import de.metas.request.service.async.spi.impl.R_Request_CreateFromOrder_Async;\n import de.metas.util.Services;\n import lombok.NonNull;\n import org.adempiere.ad.modelvalidator.annotations.DocValidate;\n-import org.adempiere.ad.modelvalidator.annotations.Init;\n import org.adempiere.ad.modelvalidator.annotations.Interceptor;\n+import org.compiere.model.I_C_DocType;\n import org.compiere.model.I_C_Order;\n import org.compiere.model.ModelValidator;\n-import org.compiere.model.X_C_DocType;\n \n @Interceptor(I_C_Order.class)\n public class C_Order\n {\n-\t@Init\n-\tpublic void onInit()\n-\t{\n-\t\t// Setup event bus topics on which swing client notification listener shall subscribe\n-\t\tServices.get(IEventBusFactory.class).addAvailableUserNotificationsTopic(InOutUserNotificationsProducer.EVENTBUS_TOPIC);\n-\t\tServices.get(IEventBusFactory.class).addAvailableUserNotificationsTopic(ReturnInOutUserNotificationsProducer.EVENTBUS_TOPIC);\n-\t}\n+\tprivate final IDocTypeDAO docTypeDAO = Services.get(IDocTypeDAO.class);\n \n \t@DocValidate(timings = ModelValidator.TIMING_AFTER_COMPLETE)\n \tpublic void createRequest(@NonNull final de.metas.adempiere.model.I_C_Order order)\n \t{\n-\t\tif (order.getC_DocTypeTarget_ID() == X_C_DocType.DOCTYPE_TEST_APPLIANCE)\n+\t\tfinal I_C_DocType docType = docTypeDAO.getById(order.getC_DocTypeTarget_ID());\n+\t\tif (docType.getR_RequestType_ID() != 0)\n \t\t{\n-\t\t\tR_Request_CreateFromOrder_Async.createWorkpackage(order.getC_Order_ID());\n+\t\t\tR_Request_CreateFromOrder_Async.createWorkpackage(order);\n \t\t}\n \n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc5ODM4Nw==", "url": "https://github.com/metasfresh/metasfresh/pull/10217#discussion_r526798387", "bodyText": "rename it to createRequestFromOrder", "author": "teosarca", "createdAt": "2020-11-19T11:35:19Z", "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/IRequestBL.java", "diffHunk": "@@ -41,13 +41,15 @@\n \t * <li>qualityNotice\n \t * <li>org\n \t * <li>linked salesrep of the org, etc.\n-\t * \n+\t * <p>\n \t * Note that the quantities are not relevant in the requests. Therefore, the qualityDiscountPercent is not even set in the request.\n \t * We can have requests with no quality notices, in case the base inout line was created with qualityDiscountPercent but with no quality notice.\n-\t * \n+\t *\n \t * @param line\n \t */\n \tI_R_Request createRequestFromInOutLine(I_M_InOutLine line);\n \n \tI_R_Request createRequestFromDDOrderLine(I_DD_OrderLine line);\n+\n+\tI_R_Request createTestApplianceRequestFromOrder(I_C_Order order);", "originalCommit": "b07e6096e52ca0598af562d772bfde6a87deed08", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3333acb2990759ae83b9f9c1a427c8c579f941d0", "chunk": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/IRequestBL.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/IRequestBL.java\nindex d3a2d596d0..c1c119ee6a 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/IRequestBL.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/IRequestBL.java\n\n@@ -51,5 +51,5 @@ public interface IRequestBL extends ISingletonService\n \n \tI_R_Request createRequestFromDDOrderLine(I_DD_OrderLine line);\n \n-\tI_R_Request createTestApplianceRequestFromOrder(I_C_Order order);\n+\tI_R_Request createRequestFromOrder(I_C_Order order);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc5ODk3NA==", "url": "https://github.com/metasfresh/metasfresh/pull/10217#discussion_r526798974", "bodyText": "get the request type from C_DocType.R_RequestType_ID.", "author": "teosarca", "createdAt": "2020-11-19T11:36:11Z", "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java", "diffHunk": "@@ -166,6 +167,25 @@ public I_R_Request createRequestFromDDOrderLine(@NonNull final I_DD_OrderLine dd\n \t\treturn createRequest(requestCandidate);\n \t}\n \n+\t@Override\n+\tpublic I_R_Request createTestApplianceRequestFromOrder(@NonNull final I_C_Order order)\n+\t{\n+\t\tfinal RequestTypeId requestTypeId = requestTypeDAO.retrieveTestApplianceRequestTypeId();", "originalCommit": "b07e6096e52ca0598af562d772bfde6a87deed08", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3333acb2990759ae83b9f9c1a427c8c579f941d0", "chunk": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java\nindex a460e1a6c3..7fcd7b063f 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java\n\n@@ -168,16 +169,16 @@ public class RequestBL implements IRequestBL\n \t}\n \n \t@Override\n-\tpublic I_R_Request createTestApplianceRequestFromOrder(@NonNull final I_C_Order order)\n+\tpublic I_R_Request createRequestFromOrder(@NonNull final I_C_Order order)\n \t{\n-\t\tfinal RequestTypeId requestTypeId = requestTypeDAO.retrieveTestApplianceRequestTypeId();\n+\t\tfinal int requestTypeId = docTypeDAO.getById(order.getC_DocTypeTarget_ID()).getR_RequestType_ID();\n \n \t\tfinal RequestCandidate requestCandidate = RequestCandidate.builder()\n-\t\t\t\t.summary(order.getDescription()) // TODO: Decide what to put here\n+\t\t\t\t.summary(order.getDescription() != null ? order.getDescription() : \" \")\n \t\t\t\t.confidentialType(X_R_Request.CONFIDENTIALTYPE_Internal)\n \t\t\t\t.orgId(OrgId.ofRepoId(order.getAD_Org_ID()))\n \t\t\t\t.recordRef(TableRecordReference.of(order))\n-\t\t\t\t.requestTypeId(requestTypeId)\n+\t\t\t\t.requestTypeId(requestTypeId > 0 ? RequestTypeId.ofRepoId(requestTypeId) : getRequestTypeId(SOTrx.ofBoolean(order.isSOTrx())))\n \t\t\t\t.partnerId(BPartnerId.ofRepoId(order.getC_BPartner_ID()))\n \t\t\t\t.userId(UserId.ofRepoIdOrNull(order.getAD_User_ID()))\n \t\t\t\t.dateDelivered(TimeUtil.asZonedDateTime(order.getDatePromised()))\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc5OTQwNg==", "url": "https://github.com/metasfresh/metasfresh/pull/10217#discussion_r526799406", "bodyText": "use I_C_Order as param (you already have it in caller method.\nAnnotate with @NonNull.", "author": "teosarca", "createdAt": "2020-11-19T11:36:53Z", "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * #%L\n+ * de.metas.swat.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.request.service.async.spi.impl;\n+\n+import de.metas.async.api.IQueueDAO;\n+import de.metas.async.model.I_C_Queue_WorkPackage;\n+import de.metas.async.spi.WorkpackageProcessorAdapter;\n+import de.metas.async.spi.WorkpackagesOnCommitSchedulerTemplate;\n+import de.metas.order.IOrderDAO;\n+import de.metas.request.api.IRequestBL;\n+import de.metas.util.Services;\n+import org.adempiere.ad.trx.api.ITrx;\n+import org.adempiere.util.lang.impl.TableRecordReference;\n+import org.compiere.model.I_C_Order;\n+import org.compiere.util.Env;\n+\n+import java.util.Properties;\n+\n+import static org.adempiere.model.InterfaceWrapperHelper.load;\n+\n+public class R_Request_CreateFromOrder_Async extends WorkpackageProcessorAdapter\n+{\n+\tprivate final IOrderDAO orderDAO = Services.get(IOrderDAO.class);\n+\n+\t/**\n+\t * Schedule the request creation based on the given order id\n+\t * <p>\n+\t * The request will contain information taken from the order\n+\t */\n+\tpublic static void createWorkpackage(final int orderId)", "originalCommit": "b07e6096e52ca0598af562d772bfde6a87deed08", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3333acb2990759ae83b9f9c1a427c8c579f941d0", "chunk": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java\nindex 19412e194a..77a4cb4495 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java\n\n@@ -26,7 +26,6 @@ import de.metas.async.api.IQueueDAO;\n import de.metas.async.model.I_C_Queue_WorkPackage;\n import de.metas.async.spi.WorkpackageProcessorAdapter;\n import de.metas.async.spi.WorkpackagesOnCommitSchedulerTemplate;\n-import de.metas.order.IOrderDAO;\n import de.metas.request.api.IRequestBL;\n import de.metas.util.Services;\n import org.adempiere.ad.trx.api.ITrx;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgwMDA0OQ==", "url": "https://github.com/metasfresh/metasfresh/pull/10217#discussion_r526800049", "bodyText": "not needed", "author": "teosarca", "createdAt": "2020-11-19T11:38:00Z", "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * #%L\n+ * de.metas.swat.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.request.service.async.spi.impl;\n+\n+import de.metas.async.api.IQueueDAO;\n+import de.metas.async.model.I_C_Queue_WorkPackage;\n+import de.metas.async.spi.WorkpackageProcessorAdapter;\n+import de.metas.async.spi.WorkpackagesOnCommitSchedulerTemplate;\n+import de.metas.order.IOrderDAO;\n+import de.metas.request.api.IRequestBL;\n+import de.metas.util.Services;\n+import org.adempiere.ad.trx.api.ITrx;\n+import org.adempiere.util.lang.impl.TableRecordReference;\n+import org.compiere.model.I_C_Order;\n+import org.compiere.util.Env;\n+\n+import java.util.Properties;\n+\n+import static org.adempiere.model.InterfaceWrapperHelper.load;\n+\n+public class R_Request_CreateFromOrder_Async extends WorkpackageProcessorAdapter\n+{\n+\tprivate final IOrderDAO orderDAO = Services.get(IOrderDAO.class);\n+\n+\t/**\n+\t * Schedule the request creation based on the given order id\n+\t * <p>\n+\t * The request will contain information taken from the order\n+\t */\n+\tpublic static void createWorkpackage(final int orderId)\n+\t{\n+\t\tif (orderId == 0)", "originalCommit": "b07e6096e52ca0598af562d772bfde6a87deed08", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3333acb2990759ae83b9f9c1a427c8c579f941d0", "chunk": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java\nindex 19412e194a..77a4cb4495 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java\n\n@@ -26,7 +26,6 @@ import de.metas.async.api.IQueueDAO;\n import de.metas.async.model.I_C_Queue_WorkPackage;\n import de.metas.async.spi.WorkpackageProcessorAdapter;\n import de.metas.async.spi.WorkpackagesOnCommitSchedulerTemplate;\n-import de.metas.order.IOrderDAO;\n import de.metas.request.api.IRequestBL;\n import de.metas.util.Services;\n import org.adempiere.ad.trx.api.ITrx;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgwMDczOA==", "url": "https://github.com/metasfresh/metasfresh/pull/10217#discussion_r526800738", "bodyText": "not needed", "author": "teosarca", "createdAt": "2020-11-19T11:39:19Z", "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * #%L\n+ * de.metas.swat.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.request.service.async.spi.impl;\n+\n+import de.metas.async.api.IQueueDAO;\n+import de.metas.async.model.I_C_Queue_WorkPackage;\n+import de.metas.async.spi.WorkpackageProcessorAdapter;\n+import de.metas.async.spi.WorkpackagesOnCommitSchedulerTemplate;\n+import de.metas.order.IOrderDAO;\n+import de.metas.request.api.IRequestBL;\n+import de.metas.util.Services;\n+import org.adempiere.ad.trx.api.ITrx;\n+import org.adempiere.util.lang.impl.TableRecordReference;\n+import org.compiere.model.I_C_Order;\n+import org.compiere.util.Env;\n+\n+import java.util.Properties;\n+\n+import static org.adempiere.model.InterfaceWrapperHelper.load;\n+\n+public class R_Request_CreateFromOrder_Async extends WorkpackageProcessorAdapter\n+{\n+\tprivate final IOrderDAO orderDAO = Services.get(IOrderDAO.class);\n+\n+\t/**\n+\t * Schedule the request creation based on the given order id\n+\t * <p>\n+\t * The request will contain information taken from the order\n+\t */\n+\tpublic static void createWorkpackage(final int orderId)\n+\t{\n+\t\tif (orderId == 0)\n+\t\t{\n+\t\t\t// no order to process\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tfinal I_C_Order order = load(orderId, I_C_Order.class);", "originalCommit": "b07e6096e52ca0598af562d772bfde6a87deed08", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3333acb2990759ae83b9f9c1a427c8c579f941d0", "chunk": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java\nindex 19412e194a..77a4cb4495 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java\n\n@@ -26,7 +26,6 @@ import de.metas.async.api.IQueueDAO;\n import de.metas.async.model.I_C_Queue_WorkPackage;\n import de.metas.async.spi.WorkpackageProcessorAdapter;\n import de.metas.async.spi.WorkpackagesOnCommitSchedulerTemplate;\n-import de.metas.order.IOrderDAO;\n import de.metas.request.api.IRequestBL;\n import de.metas.util.Services;\n import org.adempiere.ad.trx.api.ITrx;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgwMjI3MQ==", "url": "https://github.com/metasfresh/metasfresh/pull/10217#discussion_r526802271", "bodyText": "extract those as fields", "author": "teosarca", "createdAt": "2020-11-19T11:41:56Z", "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * #%L\n+ * de.metas.swat.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.request.service.async.spi.impl;\n+\n+import de.metas.async.api.IQueueDAO;\n+import de.metas.async.model.I_C_Queue_WorkPackage;\n+import de.metas.async.spi.WorkpackageProcessorAdapter;\n+import de.metas.async.spi.WorkpackagesOnCommitSchedulerTemplate;\n+import de.metas.order.IOrderDAO;\n+import de.metas.request.api.IRequestBL;\n+import de.metas.util.Services;\n+import org.adempiere.ad.trx.api.ITrx;\n+import org.adempiere.util.lang.impl.TableRecordReference;\n+import org.compiere.model.I_C_Order;\n+import org.compiere.util.Env;\n+\n+import java.util.Properties;\n+\n+import static org.adempiere.model.InterfaceWrapperHelper.load;\n+\n+public class R_Request_CreateFromOrder_Async extends WorkpackageProcessorAdapter\n+{\n+\tprivate final IOrderDAO orderDAO = Services.get(IOrderDAO.class);\n+\n+\t/**\n+\t * Schedule the request creation based on the given order id\n+\t * <p>\n+\t * The request will contain information taken from the order\n+\t */\n+\tpublic static void createWorkpackage(final int orderId)\n+\t{\n+\t\tif (orderId == 0)\n+\t\t{\n+\t\t\t// no order to process\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tfinal I_C_Order order = load(orderId, I_C_Order.class);\n+\n+\t\tSCHEDULER.schedule(order);\n+\t}\n+\n+\tprivate static final WorkpackagesOnCommitSchedulerTemplate<I_C_Order> SCHEDULER = new WorkpackagesOnCommitSchedulerTemplate<I_C_Order>(R_Request_CreateFromOrder_Async.class)\n+\t{\n+\t\t@Override\n+\t\tprotected boolean isEligibleForScheduling(final I_C_Order model)\n+\t\t{\n+\t\t\treturn model != null && model.getC_Order_ID() > 0;\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected Properties extractCtxFromItem(final I_C_Order item)\n+\t\t{\n+\t\t\treturn Env.getCtx();\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected String extractTrxNameFromItem(final I_C_Order item)\n+\t\t{\n+\t\t\treturn ITrx.TRXNAME_ThreadInherited;\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected Object extractModelToEnqueueFromItem(final Collector collector, final I_C_Order item)\n+\t\t{\n+\t\t\treturn TableRecordReference.of(I_C_Order.Table_Name, item.getC_Order_ID());\n+\t\t}\n+\t};\n+\n+\t@Override\n+\tpublic Result processWorkPackage(final I_C_Queue_WorkPackage workPackage, final String localTrxName)\n+\t{\n+\t\t// Services\n+\t\tfinal IQueueDAO queueDAO = Services.get(IQueueDAO.class);\n+\t\tfinal IRequestBL requestBL = Services.get(IRequestBL.class);", "originalCommit": "b07e6096e52ca0598af562d772bfde6a87deed08", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3333acb2990759ae83b9f9c1a427c8c579f941d0", "chunk": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java\nindex 19412e194a..77a4cb4495 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java\n\n@@ -26,7 +26,6 @@ import de.metas.async.api.IQueueDAO;\n import de.metas.async.model.I_C_Queue_WorkPackage;\n import de.metas.async.spi.WorkpackageProcessorAdapter;\n import de.metas.async.spi.WorkpackagesOnCommitSchedulerTemplate;\n-import de.metas.order.IOrderDAO;\n import de.metas.request.api.IRequestBL;\n import de.metas.util.Services;\n import org.adempiere.ad.trx.api.ITrx;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgwMjY4NA==", "url": "https://github.com/metasfresh/metasfresh/pull/10217#discussion_r526802684", "bodyText": "use can get all orders and do a for to iterate them and create requests for each of them", "author": "teosarca", "createdAt": "2020-11-19T11:42:36Z", "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * #%L\n+ * de.metas.swat.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.request.service.async.spi.impl;\n+\n+import de.metas.async.api.IQueueDAO;\n+import de.metas.async.model.I_C_Queue_WorkPackage;\n+import de.metas.async.spi.WorkpackageProcessorAdapter;\n+import de.metas.async.spi.WorkpackagesOnCommitSchedulerTemplate;\n+import de.metas.order.IOrderDAO;\n+import de.metas.request.api.IRequestBL;\n+import de.metas.util.Services;\n+import org.adempiere.ad.trx.api.ITrx;\n+import org.adempiere.util.lang.impl.TableRecordReference;\n+import org.compiere.model.I_C_Order;\n+import org.compiere.util.Env;\n+\n+import java.util.Properties;\n+\n+import static org.adempiere.model.InterfaceWrapperHelper.load;\n+\n+public class R_Request_CreateFromOrder_Async extends WorkpackageProcessorAdapter\n+{\n+\tprivate final IOrderDAO orderDAO = Services.get(IOrderDAO.class);\n+\n+\t/**\n+\t * Schedule the request creation based on the given order id\n+\t * <p>\n+\t * The request will contain information taken from the order\n+\t */\n+\tpublic static void createWorkpackage(final int orderId)\n+\t{\n+\t\tif (orderId == 0)\n+\t\t{\n+\t\t\t// no order to process\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tfinal I_C_Order order = load(orderId, I_C_Order.class);\n+\n+\t\tSCHEDULER.schedule(order);\n+\t}\n+\n+\tprivate static final WorkpackagesOnCommitSchedulerTemplate<I_C_Order> SCHEDULER = new WorkpackagesOnCommitSchedulerTemplate<I_C_Order>(R_Request_CreateFromOrder_Async.class)\n+\t{\n+\t\t@Override\n+\t\tprotected boolean isEligibleForScheduling(final I_C_Order model)\n+\t\t{\n+\t\t\treturn model != null && model.getC_Order_ID() > 0;\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected Properties extractCtxFromItem(final I_C_Order item)\n+\t\t{\n+\t\t\treturn Env.getCtx();\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected String extractTrxNameFromItem(final I_C_Order item)\n+\t\t{\n+\t\t\treturn ITrx.TRXNAME_ThreadInherited;\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected Object extractModelToEnqueueFromItem(final Collector collector, final I_C_Order item)\n+\t\t{\n+\t\t\treturn TableRecordReference.of(I_C_Order.Table_Name, item.getC_Order_ID());\n+\t\t}\n+\t};\n+\n+\t@Override\n+\tpublic Result processWorkPackage(final I_C_Queue_WorkPackage workPackage, final String localTrxName)\n+\t{\n+\t\t// Services\n+\t\tfinal IQueueDAO queueDAO = Services.get(IQueueDAO.class);\n+\t\tfinal IRequestBL requestBL = Services.get(IRequestBL.class);\n+\n+\t\t// retrieve the order\n+\t\tfinal I_C_Order order = queueDAO.retrieveItems(workPackage, I_C_Order.class, localTrxName).get(0);", "originalCommit": "b07e6096e52ca0598af562d772bfde6a87deed08", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3333acb2990759ae83b9f9c1a427c8c579f941d0", "chunk": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java\nindex 19412e194a..77a4cb4495 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java\n\n@@ -26,7 +26,6 @@ import de.metas.async.api.IQueueDAO;\n import de.metas.async.model.I_C_Queue_WorkPackage;\n import de.metas.async.spi.WorkpackageProcessorAdapter;\n import de.metas.async.spi.WorkpackagesOnCommitSchedulerTemplate;\n-import de.metas.order.IOrderDAO;\n import de.metas.request.api.IRequestBL;\n import de.metas.util.Services;\n import org.adempiere.ad.trx.api.ITrx;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgwMzIxOA==", "url": "https://github.com/metasfresh/metasfresh/pull/10217#discussion_r526803218", "bodyText": "fix/rename the test", "author": "teosarca", "createdAt": "2020-11-19T11:43:33Z", "path": "backend/de.metas.swat/de.metas.swat.base/src/test/java/de/metas/request/api/impl/RequestBLTest.java", "diffHunk": "@@ -115,6 +118,28 @@ public void createRequestForDDOrderLine()\n \n \t}\n \n+\t@Test\n+\tpublic void createTestApplianceRequestFromOrder()", "originalCommit": "b07e6096e52ca0598af562d772bfde6a87deed08", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3333acb2990759ae83b9f9c1a427c8c579f941d0", "chunk": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/test/java/de/metas/request/api/impl/RequestBLTest.java b/backend/de.metas.swat/de.metas.swat.base/src/test/java/de/metas/request/api/impl/RequestBLTest.java\nindex 80daa2a804..2b83f6ff43 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/test/java/de/metas/request/api/impl/RequestBLTest.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/test/java/de/metas/request/api/impl/RequestBLTest.java\n\n@@ -119,23 +123,24 @@ public class RequestBLTest\n \t}\n \n \t@Test\n-\tpublic void createTestApplianceRequestFromOrder()\n+\tpublic void createRequestFromOrder()\n \t{\n \t\tfinal I_C_Order order = createOrder();\n+\t\tfinal I_R_RequestType soRequestType = createRequestType(\"RequestType\");\n \n-\t\tfinal I_R_Request request = requestBL.createTestApplianceRequestFromOrder(order);\n+\t\tfinal I_R_Request request = requestBL.createRequestFromOrder(order);\n \n \t\tassertThat(request.getAD_Org_ID()).isEqualTo(order.getAD_Org_ID());\n-\t\tassertThat(request.getM_Product_ID()).isEqualTo(order.getM_Product_ID());\n-\t\tassertThat(request.getR_RequestType_ID()).isEqualTo(requestTypeDAO.retrieveTestApplianceRequestTypeId());\n+\t\tassertThat(request.getM_Product_ID()).isEqualTo(-1);\n+\t\tassertThat(request.getR_RequestType_ID()).isEqualTo(soRequestType.getR_RequestType_ID());\n \t\tassertThat(request.getAD_Table_ID()).isEqualTo(getTableId(I_C_Order.class));\n \t\tassertThat(request.getRecord_ID()).isEqualTo(order.getC_Order_ID());\n \t\tassertThat(request.getC_BPartner_ID()).isEqualTo(order.getC_BPartner_ID());\n \t\tassertThat(request.getAD_User_ID()).isEqualTo(order.getAD_User_ID());\n \t\tassertThat(request.getDateDelivered()).isEqualTo(order.getDatePromised());\n-\t\tassertThat(request.getSummary()).isEqualTo(order.getDescription());\n+\t\tassertThat(request.getSummary()).isEqualTo(\" \");\n \t\tassertThat(request.getConfidentialType()).isEqualTo(X_R_Request.CONFIDENTIALTYPE_Internal);\n-\t\tassertThat(request.getM_QualityNote_ID()).isLessThanOrEqualTo(0);\n+\t\tassertThat(request.getM_QualityNote_ID()).isLessThanOrEqualTo(-1);\n \t\tassertThat(request.getPerformanceType()).isNullOrEmpty();\n \n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgwODE1Mw==", "url": "https://github.com/metasfresh/metasfresh/pull/10217#discussion_r526808153", "bodyText": "pls revert this file. as discussed.", "author": "teosarca", "createdAt": "2020-11-19T11:52:17Z", "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/window/descriptor/sql/SqlForFetchingLookupById.java", "diffHunk": "@@ -64,6 +64,7 @@ public IStringExpression toStringExpression(@NonNull final String joinOnColumnNa\n \t{\n \t\treturn sql.resolvePartial(Evaluatees\n \t\t\t\t.mapBuilder()\n+\t\t\t\t.put(SQL_PARAM_FilterSql, joinOnColumnNameFQ)", "originalCommit": "b07e6096e52ca0598af562d772bfde6a87deed08", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d0195cf014036f51ca2db6c6b794d977d15a65af", "chunk": "diff --git a/backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/window/descriptor/sql/SqlForFetchingLookupById.java b/backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/window/descriptor/sql/SqlForFetchingLookupById.java\nindex 8b73c79dac..c161e29e68 100644\n--- a/backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/window/descriptor/sql/SqlForFetchingLookupById.java\n+++ b/backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/window/descriptor/sql/SqlForFetchingLookupById.java\n\n@@ -64,7 +63,6 @@ public class SqlForFetchingLookupById\n \t{\n \t\treturn sql.resolvePartial(Evaluatees\n \t\t\t\t.mapBuilder()\n-\t\t\t\t.put(SQL_PARAM_FilterSql, joinOnColumnNameFQ)\n \t\t\t\t.put(SQL_PARAM_KeyId, joinOnColumnNameFQ)\n \t\t\t\t.put(SQL_PARAM_ShowInactive, SQL_PARAM_VALUE_ShowInactive_Yes)\n \t\t\t\t.build());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgwOTY1NQ==", "url": "https://github.com/metasfresh/metasfresh/pull/10217#discussion_r526809655", "bodyText": "fallback to <space>. remove the TODO.", "author": "teosarca", "createdAt": "2020-11-19T11:54:52Z", "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java", "diffHunk": "@@ -166,6 +167,25 @@ public I_R_Request createRequestFromDDOrderLine(@NonNull final I_DD_OrderLine dd\n \t\treturn createRequest(requestCandidate);\n \t}\n \n+\t@Override\n+\tpublic I_R_Request createTestApplianceRequestFromOrder(@NonNull final I_C_Order order)\n+\t{\n+\t\tfinal RequestTypeId requestTypeId = requestTypeDAO.retrieveTestApplianceRequestTypeId();\n+\n+\t\tfinal RequestCandidate requestCandidate = RequestCandidate.builder()\n+\t\t\t\t.summary(order.getDescription()) // TODO: Decide what to put here", "originalCommit": "b07e6096e52ca0598af562d772bfde6a87deed08", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3333acb2990759ae83b9f9c1a427c8c579f941d0", "chunk": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java\nindex a460e1a6c3..7fcd7b063f 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java\n\n@@ -168,16 +169,16 @@ public class RequestBL implements IRequestBL\n \t}\n \n \t@Override\n-\tpublic I_R_Request createTestApplianceRequestFromOrder(@NonNull final I_C_Order order)\n+\tpublic I_R_Request createRequestFromOrder(@NonNull final I_C_Order order)\n \t{\n-\t\tfinal RequestTypeId requestTypeId = requestTypeDAO.retrieveTestApplianceRequestTypeId();\n+\t\tfinal int requestTypeId = docTypeDAO.getById(order.getC_DocTypeTarget_ID()).getR_RequestType_ID();\n \n \t\tfinal RequestCandidate requestCandidate = RequestCandidate.builder()\n-\t\t\t\t.summary(order.getDescription()) // TODO: Decide what to put here\n+\t\t\t\t.summary(order.getDescription() != null ? order.getDescription() : \" \")\n \t\t\t\t.confidentialType(X_R_Request.CONFIDENTIALTYPE_Internal)\n \t\t\t\t.orgId(OrgId.ofRepoId(order.getAD_Org_ID()))\n \t\t\t\t.recordRef(TableRecordReference.of(order))\n-\t\t\t\t.requestTypeId(requestTypeId)\n+\t\t\t\t.requestTypeId(requestTypeId > 0 ? RequestTypeId.ofRepoId(requestTypeId) : getRequestTypeId(SOTrx.ofBoolean(order.isSOTrx())))\n \t\t\t\t.partnerId(BPartnerId.ofRepoId(order.getC_BPartner_ID()))\n \t\t\t\t.userId(UserId.ofRepoIdOrNull(order.getAD_User_ID()))\n \t\t\t\t.dateDelivered(TimeUtil.asZonedDateTime(order.getDatePromised()))\n"}}, {"oid": "3333acb2990759ae83b9f9c1a427c8c579f941d0", "url": "https://github.com/metasfresh/metasfresh/commit/3333acb2990759ae83b9f9c1a427c8c579f941d0", "message": "#10197\n - Implemented review notes.", "committedDate": "2020-11-19T15:22:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk5MjYzNQ==", "url": "https://github.com/metasfresh/metasfresh/pull/10217#discussion_r526992635", "bodyText": "use > 0 instead of != 0", "author": "teosarca", "createdAt": "2020-11-19T15:48:28Z", "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package de.metas.order.model.validator;\n+\n+import de.metas.document.IDocTypeDAO;\n+import de.metas.request.service.async.spi.impl.R_Request_CreateFromOrder_Async;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.modelvalidator.annotations.DocValidate;\n+import org.adempiere.ad.modelvalidator.annotations.Interceptor;\n+import org.compiere.model.I_C_DocType;\n+import org.compiere.model.I_C_Order;\n+import org.compiere.model.ModelValidator;\n+\n+@Interceptor(I_C_Order.class)\n+public class C_Order\n+{\n+\tprivate final IDocTypeDAO docTypeDAO = Services.get(IDocTypeDAO.class);\n+\n+\t@DocValidate(timings = ModelValidator.TIMING_AFTER_COMPLETE)\n+\tpublic void createRequest(@NonNull final de.metas.adempiere.model.I_C_Order order)\n+\t{\n+\t\tfinal I_C_DocType docType = docTypeDAO.getById(order.getC_DocTypeTarget_ID());\n+\t\tif (docType.getR_RequestType_ID() != 0)", "originalCommit": "3333acb2990759ae83b9f9c1a427c8c579f941d0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d0195cf014036f51ca2db6c6b794d977d15a65af", "chunk": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java\nindex 9eada13fcc..31499c73d6 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java\n\n@@ -1,25 +1,27 @@\n package de.metas.order.model.validator;\n \n-import de.metas.document.IDocTypeDAO;\n+import de.metas.order.IOrderBL;\n+import de.metas.request.RequestTypeId;\n import de.metas.request.service.async.spi.impl.R_Request_CreateFromOrder_Async;\n import de.metas.util.Services;\n import lombok.NonNull;\n import org.adempiere.ad.modelvalidator.annotations.DocValidate;\n import org.adempiere.ad.modelvalidator.annotations.Interceptor;\n-import org.compiere.model.I_C_DocType;\n import org.compiere.model.I_C_Order;\n import org.compiere.model.ModelValidator;\n \n+import java.util.Optional;\n+\n @Interceptor(I_C_Order.class)\n public class C_Order\n {\n-\tprivate final IDocTypeDAO docTypeDAO = Services.get(IDocTypeDAO.class);\n+\tprivate final IOrderBL orderBL = Services.get(IOrderBL.class);\n \n \t@DocValidate(timings = ModelValidator.TIMING_AFTER_COMPLETE)\n \tpublic void createRequest(@NonNull final de.metas.adempiere.model.I_C_Order order)\n \t{\n-\t\tfinal I_C_DocType docType = docTypeDAO.getById(order.getC_DocTypeTarget_ID());\n-\t\tif (docType.getR_RequestType_ID() != 0)\n+\t\tfinal Optional<RequestTypeId> requestType = orderBL.getRequestTypeForCreatingNewRequestsAfterComplete(order);\n+\t\tif (requestType.isPresent())\n \t\t{\n \t\t\tR_Request_CreateFromOrder_Async.createWorkpackage(order);\n \t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAwNjg2MA==", "url": "https://github.com/metasfresh/metasfresh/pull/10217#discussion_r527006860", "bodyText": "use order.getC_DocType_ID() in case of completed orders.", "author": "teosarca", "createdAt": "2020-11-19T16:06:02Z", "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package de.metas.order.model.validator;\n+\n+import de.metas.document.IDocTypeDAO;\n+import de.metas.request.service.async.spi.impl.R_Request_CreateFromOrder_Async;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.modelvalidator.annotations.DocValidate;\n+import org.adempiere.ad.modelvalidator.annotations.Interceptor;\n+import org.compiere.model.I_C_DocType;\n+import org.compiere.model.I_C_Order;\n+import org.compiere.model.ModelValidator;\n+\n+@Interceptor(I_C_Order.class)\n+public class C_Order\n+{\n+\tprivate final IDocTypeDAO docTypeDAO = Services.get(IDocTypeDAO.class);\n+\n+\t@DocValidate(timings = ModelValidator.TIMING_AFTER_COMPLETE)\n+\tpublic void createRequest(@NonNull final de.metas.adempiere.model.I_C_Order order)\n+\t{\n+\t\tfinal I_C_DocType docType = docTypeDAO.getById(order.getC_DocTypeTarget_ID());", "originalCommit": "3333acb2990759ae83b9f9c1a427c8c579f941d0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d0195cf014036f51ca2db6c6b794d977d15a65af", "chunk": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java\nindex 9eada13fcc..31499c73d6 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java\n\n@@ -1,25 +1,27 @@\n package de.metas.order.model.validator;\n \n-import de.metas.document.IDocTypeDAO;\n+import de.metas.order.IOrderBL;\n+import de.metas.request.RequestTypeId;\n import de.metas.request.service.async.spi.impl.R_Request_CreateFromOrder_Async;\n import de.metas.util.Services;\n import lombok.NonNull;\n import org.adempiere.ad.modelvalidator.annotations.DocValidate;\n import org.adempiere.ad.modelvalidator.annotations.Interceptor;\n-import org.compiere.model.I_C_DocType;\n import org.compiere.model.I_C_Order;\n import org.compiere.model.ModelValidator;\n \n+import java.util.Optional;\n+\n @Interceptor(I_C_Order.class)\n public class C_Order\n {\n-\tprivate final IDocTypeDAO docTypeDAO = Services.get(IDocTypeDAO.class);\n+\tprivate final IOrderBL orderBL = Services.get(IOrderBL.class);\n \n \t@DocValidate(timings = ModelValidator.TIMING_AFTER_COMPLETE)\n \tpublic void createRequest(@NonNull final de.metas.adempiere.model.I_C_Order order)\n \t{\n-\t\tfinal I_C_DocType docType = docTypeDAO.getById(order.getC_DocTypeTarget_ID());\n-\t\tif (docType.getR_RequestType_ID() != 0)\n+\t\tfinal Optional<RequestTypeId> requestType = orderBL.getRequestTypeForCreatingNewRequestsAfterComplete(order);\n+\t\tif (requestType.isPresent())\n \t\t{\n \t\t\tR_Request_CreateFromOrder_Async.createWorkpackage(order);\n \t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAwNzcwNQ==", "url": "https://github.com/metasfresh/metasfresh/pull/10217#discussion_r527007705", "bodyText": "use order.getC_DocType_ID()", "author": "teosarca", "createdAt": "2020-11-19T16:07:13Z", "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java", "diffHunk": "@@ -166,6 +168,25 @@ public I_R_Request createRequestFromDDOrderLine(@NonNull final I_DD_OrderLine dd\n \t\treturn createRequest(requestCandidate);\n \t}\n \n+\t@Override\n+\tpublic I_R_Request createRequestFromOrder(@NonNull final I_C_Order order)\n+\t{\n+\t\tfinal int requestTypeId = docTypeDAO.getById(order.getC_DocTypeTarget_ID()).getR_RequestType_ID();", "originalCommit": "3333acb2990759ae83b9f9c1a427c8c579f941d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAwOTEyNQ==", "url": "https://github.com/metasfresh/metasfresh/pull/10217#discussion_r527009125", "bodyText": "and because we have 2 places with same issue... i suggest introducing a new method in OrderBL:\nOptional getRequestTypeForCreatingNewRequestsAfterComplete(I_C_Order order)", "author": "teosarca", "createdAt": "2020-11-19T16:09:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAwNzcwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "d0195cf014036f51ca2db6c6b794d977d15a65af", "chunk": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java\nindex 7fcd7b063f..9587cd91d4 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java\n\n@@ -171,14 +173,14 @@ public class RequestBL implements IRequestBL\n \t@Override\n \tpublic I_R_Request createRequestFromOrder(@NonNull final I_C_Order order)\n \t{\n-\t\tfinal int requestTypeId = docTypeDAO.getById(order.getC_DocTypeTarget_ID()).getR_RequestType_ID();\n+\t\tfinal Optional<RequestTypeId> requestType = orderBL.getRequestTypeForCreatingNewRequestsAfterComplete(order);\n \n \t\tfinal RequestCandidate requestCandidate = RequestCandidate.builder()\n \t\t\t\t.summary(order.getDescription() != null ? order.getDescription() : \" \")\n \t\t\t\t.confidentialType(X_R_Request.CONFIDENTIALTYPE_Internal)\n \t\t\t\t.orgId(OrgId.ofRepoId(order.getAD_Org_ID()))\n \t\t\t\t.recordRef(TableRecordReference.of(order))\n-\t\t\t\t.requestTypeId(requestTypeId > 0 ? RequestTypeId.ofRepoId(requestTypeId) : getRequestTypeId(SOTrx.ofBoolean(order.isSOTrx())))\n+\t\t\t\t.requestTypeId(requestType.orElseGet(() -> getRequestTypeId(SOTrx.ofBoolean(order.isSOTrx()))))\n \t\t\t\t.partnerId(BPartnerId.ofRepoId(order.getC_BPartner_ID()))\n \t\t\t\t.userId(UserId.ofRepoIdOrNull(order.getAD_User_ID()))\n \t\t\t\t.dateDelivered(TimeUtil.asZonedDateTime(order.getDatePromised()))\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAxMTE1Mg==", "url": "https://github.com/metasfresh/metasfresh/pull/10217#discussion_r527011152", "bodyText": "... u will have to setC_DocType_ID here", "author": "teosarca", "createdAt": "2020-11-19T16:11:46Z", "path": "backend/de.metas.swat/de.metas.swat.base/src/test/java/de/metas/request/api/impl/RequestBLTest.java", "diffHunk": "@@ -131,6 +161,27 @@ private I_DD_Order createDDOrder()\n \t\treturn ddOrder;\n \t}\n \n+\tprivate I_C_Order createOrder()\n+\t{\n+\t\tfinal I_C_Order order = newInstance(I_C_Order.class);\n+\n+\t\torder.setIsSOTrx(true);\n+\t\torder.setC_BPartner_ID(createPartner(\"Partner 3\").getC_BPartner_ID());\n+\t\torder.setAD_User_ID(createUser(\"User 3\").getAD_User_ID());\n+\t\torder.setDatePromised(de.metas.common.util.time.SystemTime.asDayTimestamp());\n+\t\torder.setC_DocTypeTarget_ID(createDocType().getC_DocType_ID());", "originalCommit": "3333acb2990759ae83b9f9c1a427c8c579f941d0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d0195cf014036f51ca2db6c6b794d977d15a65af", "chunk": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/test/java/de/metas/request/api/impl/RequestBLTest.java b/backend/de.metas.swat/de.metas.swat.base/src/test/java/de/metas/request/api/impl/RequestBLTest.java\nindex 2b83f6ff43..1cc2461809 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/test/java/de/metas/request/api/impl/RequestBLTest.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/test/java/de/metas/request/api/impl/RequestBLTest.java\n\n@@ -169,7 +169,7 @@ public class RequestBLTest\n \t\torder.setC_BPartner_ID(createPartner(\"Partner 3\").getC_BPartner_ID());\n \t\torder.setAD_User_ID(createUser(\"User 3\").getAD_User_ID());\n \t\torder.setDatePromised(de.metas.common.util.time.SystemTime.asDayTimestamp());\n-\t\torder.setC_DocTypeTarget_ID(createDocType().getC_DocType_ID());\n+\t\torder.setC_DocType_ID(createDocType().getC_DocType_ID());\n \t\tsave(order);\n \t\treturn order;\n \t}\n"}}, {"oid": "d0195cf014036f51ca2db6c6b794d977d15a65af", "url": "https://github.com/metasfresh/metasfresh/commit/d0195cf014036f51ca2db6c6b794d977d15a65af", "message": "#10197\n - Implemented Review Notes", "committedDate": "2020-11-19T23:15:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ4MzUzMw==", "url": "https://github.com/metasfresh/metasfresh/pull/10217#discussion_r527483533", "bodyText": "pls use <= 0", "author": "teosarca", "createdAt": "2020-11-20T07:14:40Z", "path": "backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java", "diffHunk": "@@ -1026,6 +1029,19 @@ public ProjectId getProjectIdOrNull(@NonNull final OrderLineId orderLineId)\n \t\treturn orderProjectId;\n \t}\n \n+\t@Override\n+\tpublic Optional<RequestTypeId> getRequestTypeForCreatingNewRequestsAfterComplete(@NonNull final I_C_Order order)\n+\t{\n+\t\tfinal I_C_DocType docType = docTypeDAO.getById(order.getC_DocType_ID());\n+\n+\t\tif (docType.getR_RequestType_ID() == 0)", "originalCommit": "d0195cf014036f51ca2db6c6b794d977d15a65af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ4Mzk1MQ==", "url": "https://github.com/metasfresh/metasfresh/pull/10217#discussion_r527483951", "bodyText": "or even better, just return\nreturn Optional.ofNullable(RequestTypeId.ofRepoIdOrNull(docType.getR_RequestType_ID()));", "author": "teosarca", "createdAt": "2020-11-20T07:15:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ4MzUzMw=="}], "type": "inlineReview", "revised_code": {"commit": "40e299f142b3b0902f197f1bf4197fb7129652b3", "chunk": "diff --git a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\nindex fddbed4ac6..7f8777ebe7 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n\n@@ -1034,12 +1034,12 @@ public class OrderBL implements IOrderBL\n \t{\n \t\tfinal I_C_DocType docType = docTypeDAO.getById(order.getC_DocType_ID());\n \n-\t\tif (docType.getR_RequestType_ID() == 0)\n+\t\tif (docType.getR_RequestType_ID() <= 0)\n \t\t{\n \t\t\treturn Optional.empty();\n \t\t}\n \n-\t\treturn Optional.of(RequestTypeId.ofRepoId(docType.getR_RequestType_ID()));\n+\t\treturn Optional.ofNullable(RequestTypeId.ofRepoIdOrNull(docType.getR_RequestType_ID()));\n \t}\n \n \t@Override\n"}}, {"oid": "40e299f142b3b0902f197f1bf4197fb7129652b3", "url": "https://github.com/metasfresh/metasfresh/commit/40e299f142b3b0902f197f1bf4197fb7129652b3", "message": "#10197\n - Implemented review notes.", "committedDate": "2020-11-20T08:19:00Z", "type": "commit"}]}