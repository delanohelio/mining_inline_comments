{"pr_number": 6564, "pr_title": "import GitHub labels as mf labels. Ref:", "pr_createdAt": "2020-05-05T09:47:50Z", "pr_url": "https://github.com/metasfresh/metasfresh/pull/6564", "timeline": [{"oid": "e0f464708c3f0dd3a483543e1a1fbb79a501c859", "url": "https://github.com/metasfresh/metasfresh/commit/e0f464708c3f0dd3a483543e1a1fbb79a501c859", "message": "import GitHub labels as mf labels. Ref:\nhttps://github.com/metasfresh/metasfresh/issues/5816", "committedDate": "2020-05-05T09:26:59Z", "type": "commit"}, {"oid": "d06baf0066ae83c4f28d187247171f2c8884a26c", "url": "https://github.com/metasfresh/metasfresh/commit/d06baf0066ae83c4f28d187247171f2c8884a26c", "message": "import GitHub labels as mf labels. Ref:\nhttps://github.com/metasfresh/metasfresh/issues/5816", "committedDate": "2020-05-05T11:25:50Z", "type": "commit"}, {"oid": "e376ae4e2487bcded0dd510987838d79640a8c22", "url": "https://github.com/metasfresh/metasfresh/commit/e376ae4e2487bcded0dd510987838d79640a8c22", "message": "refresh cache after importing issues, fix latestActivity filter, order time bookings\nhttps://github.com/metasfresh/metasfresh/issues/5816", "committedDate": "2020-05-06T05:57:22Z", "type": "commit"}, {"oid": "75a724c987dc53c7f94ce035b4c4907236e92a7d", "url": "https://github.com/metasfresh/metasfresh/commit/75a724c987dc53c7f94ce035b4c4907236e92a7d", "message": "convert ExternalIssueNo column to numeric and order desc by it\nhttps://github.com/metasfresh/metasfresh/issues/5816", "committedDate": "2020-05-06T09:34:27Z", "type": "commit"}, {"oid": "1f231baf075541e78209c3746b335fe6ef9c33e6", "url": "https://github.com/metasfresh/metasfresh/commit/1f231baf075541e78209c3746b335fe6ef9c33e6", "message": "convert ExternalIssueNo column to numeric and order desc by it\nhttps://github.com/metasfresh/metasfresh/issues/5816", "committedDate": "2020-05-06T12:55:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc3NTQ2MA==", "url": "https://github.com/metasfresh/metasfresh/pull/6564#discussion_r420775460", "bodyText": "can't this be immutable (=> @Value)?", "author": "metas-ts", "createdAt": "2020-05-06T13:08:11Z", "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/reflist/GetRefListRequest.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * #%L\n+ * de.metas.adempiere.adempiere.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.reflist;\n+\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.NonNull;\n+\n+@Data\n+@Builder\n+public class GetRefListRequest", "originalCommit": "1f231baf075541e78209c3746b335fe6ef9c33e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc5MDcwMg==", "url": "https://github.com/metasfresh/metasfresh/pull/6564#discussion_r420790702", "bodyText": "my bad, I had @Value in mind when I typed @Data", "author": "pvpurcarcosmin", "createdAt": "2020-05-06T13:29:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc3NTQ2MA=="}], "type": "inlineReview", "revised_code": {"commit": "af59e565a73994ed24d38f984a2abb244ca5cc24", "chunk": "diff --git a/backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/reflist/GetRefListRequest.java b/backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/reflist/GetRefListRequest.java\nindex c9b104bb95..9589e18af4 100644\n--- a/backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/reflist/GetRefListRequest.java\n+++ b/backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/reflist/GetRefListRequest.java\n\n@@ -23,19 +23,16 @@\n package de.metas.reflist;\n \n import lombok.Builder;\n-import lombok.Data;\n import lombok.NonNull;\n+import lombok.Value;\n \n-@Data\n+@Value\n @Builder\n public class GetRefListRequest\n {\n \t@NonNull\n \tReferenceId referenceId;\n \n-\t@NonNull\n-\tString name;\n-\n \t@NonNull\n \tString value;\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc3Njc3OA==", "url": "https://github.com/metasfresh/metasfresh/pull/6564#discussion_r420776778", "bodyText": "we have a unique constraint on AD_Reference_ID and Value ..\ni think for that reason, the lookup should be only by AD_Reference_ID and Value AFAIS. and \"name\" should not be part of the key.", "author": "metas-ts", "createdAt": "2020-05-06T13:10:11Z", "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/reflist/RefListRepository.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * #%L\n+ * de.metas.adempiere.adempiere.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.reflist;\n+\n+import de.metas.organization.OrgId;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.compiere.model.I_AD_Ref_List;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.Optional;\n+\n+import static org.adempiere.model.InterfaceWrapperHelper.loadOrNew;\n+import static org.adempiere.model.InterfaceWrapperHelper.saveRecord;\n+\n+@Repository\n+public class RefListRepository\n+{\n+\tprivate final IQueryBL queryBL = Services.get(IQueryBL.class);\n+\n+\tpublic RefListId save(@NonNull final RefList refList)\n+\t{\n+\t\tfinal I_AD_Ref_List record = loadOrNew(refList.getRefListId(), I_AD_Ref_List.class);\n+\n+\t\trecord.setAD_Org_ID(refList.getOrgId().getRepoId());\n+\t\trecord.setAD_Reference_ID(refList.getReferenceId().getRepoId());\n+\n+\t\trecord.setName(refList.getName());\n+\t\trecord.setValue(refList.getValue());\n+\n+\t\tsaveRecord(record);\n+\n+\t\treturn RefListId.ofRepoId(record.getAD_Ref_List_ID());\n+\t}\n+\n+\tpublic Optional<RefList> getByRequest(@NonNull final GetRefListRequest getRefListRequest)\n+\t{\n+\t\treturn queryBL.createQueryBuilder(I_AD_Ref_List.class)", "originalCommit": "1f231baf075541e78209c3746b335fe6ef9c33e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc5NjA2MA==", "url": "https://github.com/metasfresh/metasfresh/pull/6564#discussion_r420796060", "bodyText": "didn't saw it, as it is not in the AD_Index_Table, I'll drop mine and query only after Reference_ID and Value.", "author": "pvpurcarcosmin", "createdAt": "2020-05-06T13:37:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc3Njc3OA=="}], "type": "inlineReview", "revised_code": {"commit": "af59e565a73994ed24d38f984a2abb244ca5cc24", "chunk": "diff --git a/backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/reflist/RefListRepository.java b/backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/reflist/RefListRepository.java\nindex 7045b93bcf..a96247b72f 100644\n--- a/backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/reflist/RefListRepository.java\n+++ b/backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/reflist/RefListRepository.java\n\n@@ -59,7 +59,6 @@ public class RefListRepository\n \t\treturn queryBL.createQueryBuilder(I_AD_Ref_List.class)\n \t\t\t\t.addOnlyActiveRecordsFilter()\n \t\t\t\t.addEqualsFilter(I_AD_Ref_List.COLUMNNAME_AD_Reference_ID, getRefListRequest.getReferenceId().getRepoId())\n-\t\t\t\t.addEqualsFilter(I_AD_Ref_List.COLUMNNAME_Name, getRefListRequest.getName())\n \t\t\t\t.addEqualsFilter(I_AD_Ref_List.COLUMNNAME_Value, getRefListRequest.getValue())\n \t\t\t\t.create()\n \t\t\t\t.firstOnlyOptional(I_AD_Ref_List.class)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc4MDY0Mw==", "url": "https://github.com/metasfresh/metasfresh/pull/6564#discussion_r420780643", "bodyText": "can we still have multiple bookings per day? or don't we (currently) need/want this?", "author": "metas-ts", "createdAt": "2020-05-06T13:15:50Z", "path": "backend/de.metas.serviceprovider/src/main/java-gen/de/metas/serviceprovider/model/I_S_TimeBooking.java", "diffHunk": "@@ -82,7 +82,7 @@\n \t/**\n \t * Set Booked date.\n \t *\n-\t * <br>Type: DateTime\n+\t * <br>Type: Date", "originalCommit": "1f231baf075541e78209c3746b335fe6ef9c33e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc5MjMxMQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6564#discussion_r420792311", "bodyText": "we can, we dropped the unique constraint when we moved from the exportTime endpoint to the getTeamBookedTime  one ( the one that provides also ids for the time records ) .", "author": "pvpurcarcosmin", "createdAt": "2020-05-06T13:32:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc4MDY0Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc4MTg3Mg==", "url": "https://github.com/metasfresh/metasfresh/pull/6564#discussion_r420781872", "bodyText": "do you have an index on S_IssueLabel.S_Issue_ID ?", "author": "metas-ts", "createdAt": "2020-05-06T13:17:39Z", "path": "backend/de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/external/label/IssueLabelRepository.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.external.label;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.organization.OrgId;\n+import de.metas.serviceprovider.issue.IssueId;\n+import de.metas.serviceprovider.model.I_S_IssueLabel;\n+import de.metas.util.Check;\n+import lombok.NonNull;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@Repository\n+public class IssueLabelRepository\n+{\n+\tprivate final IQueryBL queryBL;\n+\n+\tpublic IssueLabelRepository(final IQueryBL queryBL)\n+\t{\n+\t\tthis.queryBL = queryBL;\n+\t}\n+\n+\tpublic ImmutableList<IssueLabel> getByIssueId(@NonNull final IssueId issueId)\n+\t{\n+\t\treturn getRecordsByIssueId(issueId)\n+\t\t\t\t.stream()\n+\t\t\t\t.map(this::of)\n+\t\t\t\t.collect(ImmutableList.toImmutableList());\n+\t}\n+\n+\tpublic void persistLabels(@NonNull final IssueId issueId,\n+\t\t\t\t\t\t\t  @NonNull final ImmutableList<IssueLabel> issueLabels)\n+\t{\n+\t\tfinal ImmutableList<I_S_IssueLabel> newLabels =\n+\t\t\t\tissueLabels\n+\t\t\t\t\t\t.stream()\n+\t\t\t\t\t\t.map(label -> of(issueId, label))\n+\t\t\t\t\t\t.collect(ImmutableList.toImmutableList());\n+\n+\t\tfinal ImmutableList<I_S_IssueLabel> existingLabels = getRecordsByIssueId(issueId);\n+\n+\t\tpersistLabels(newLabels, existingLabels);\n+\t}\n+\n+\t@NonNull\n+\tprivate ImmutableList<I_S_IssueLabel> getRecordsByIssueId(@NonNull final IssueId issueId)\n+\t{\n+\t\treturn queryBL.createQueryBuilder(I_S_IssueLabel.class)\n+\t\t\t\t.addOnlyActiveRecordsFilter()\n+\t\t\t\t.addEqualsFilter(I_S_IssueLabel.COLUMNNAME_S_Issue_ID, issueId.getRepoId())", "originalCommit": "1f231baf075541e78209c3746b335fe6ef9c33e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc5MzQ4Ng==", "url": "https://github.com/metasfresh/metasfresh/pull/6564#discussion_r420793486", "bodyText": "yep", "author": "pvpurcarcosmin", "createdAt": "2020-05-06T13:33:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc4MTg3Mg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "af59e565a73994ed24d38f984a2abb244ca5cc24", "url": "https://github.com/metasfresh/metasfresh/commit/af59e565a73994ed24d38f984a2abb244ca5cc24", "message": "remove IDX_AD_REF_LIST_AD_REFERENCE_ID_NAME_VALUE\nhttps://github.com/metasfresh/metasfresh/issues/5816", "committedDate": "2020-05-06T13:55:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgyMDI0MA==", "url": "https://github.com/metasfresh/metasfresh/pull/6564#discussion_r420820240", "bodyText": "see org.adempiere.ad.service.IADReferenceDAO.ADRefListItem.\nmight be what u want.\nalso pls note that usually, for names we use ITranslatableString instead of plain Strings.", "author": "teosarca", "createdAt": "2020-05-06T14:07:51Z", "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/reflist/RefList.java", "diffHunk": "@@ -20,29 +20,31 @@\n  * #L%\n  */\n \n-package de.metas.serviceprovider.external.issuedetails;\n+package de.metas.reflist;\n \n-import lombok.AllArgsConstructor;\n-import lombok.Getter;\n+import de.metas.organization.OrgId;\n+import lombok.Builder;\n import lombok.NonNull;\n+import lombok.Value;\n \n-import java.util.Optional;\n-import java.util.stream.Stream;\n+import javax.annotation.Nullable;\n \n-@AllArgsConstructor\n-@Getter\n-public enum ExternalIssueDetailType\n+@Value\n+@Builder\n+public class RefList", "originalCommit": "af59e565a73994ed24d38f984a2abb244ca5cc24", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "46bcf39ab044c9d07500b6c9260608f90f391aef", "chunk": "diff --git a/backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/reflist/RefList.java b/backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/reflist/RefList.java\ndeleted file mode 100644\nindex db508cede9..0000000000\n--- a/backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/reflist/RefList.java\n+++ /dev/null\n\n@@ -1,50 +0,0 @@\n-/*\n- * #%L\n- * de.metas.adempiere.adempiere.base\n- * %%\n- * Copyright (C) 2020 metas GmbH\n- * %%\n- * This program is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU General Public License as\n- * published by the Free Software Foundation, either version 2 of the\n- * License, or (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n- * GNU General Public License for more details.\n- *\n- * You should have received a copy of the GNU General Public\n- * License along with this program. If not, see\n- * <http://www.gnu.org/licenses/gpl-2.0.html>.\n- * #L%\n- */\n-\n-package de.metas.reflist;\n-\n-import de.metas.organization.OrgId;\n-import lombok.Builder;\n-import lombok.NonNull;\n-import lombok.Value;\n-\n-import javax.annotation.Nullable;\n-\n-@Value\n-@Builder\n-public class RefList\n-{\n-\t@Nullable\n-\tRefListId refListId;\n-\n-\t@NonNull\n-\tReferenceId referenceId;\n-\n-\t@NonNull\n-\tOrgId orgId;\n-\n-\t@NonNull\n-\tString name;\n-\n-\t@NonNull\n-\tString value;\n-}\n"}}, {"oid": "46bcf39ab044c9d07500b6c9260608f90f391aef", "url": "https://github.com/metasfresh/metasfresh/commit/46bcf39ab044c9d07500b6c9260608f90f391aef", "message": "use ADRefListItem instead of RefList\nhttps://github.com/metasfresh/metasfresh/issues/5816", "committedDate": "2020-05-07T07:21:40Z", "type": "commit"}, {"oid": "8565326fe1f30105d36c4f18933adaca41681152", "url": "https://github.com/metasfresh/metasfresh/commit/8565326fe1f30105d36c4f18933adaca41681152", "message": "drop misspelled column invoicableeffort;\nhttps://github.com/metasfresh/metasfresh/issues/5816", "committedDate": "2020-05-07T07:29:50Z", "type": "commit"}, {"oid": "a32e06c35f7f14e25a1cbb9501f1d183af2bdea3", "url": "https://github.com/metasfresh/metasfresh/commit/a32e06c35f7f14e25a1cbb9501f1d183af2bdea3", "message": "update retrieveListValuesMap to use CCache instead of `@Cached`\nhttps://github.com/metasfresh/metasfresh/issues/5816", "committedDate": "2020-05-07T11:12:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQyNzM0OA==", "url": "https://github.com/metasfresh/metasfresh/pull/6564#discussion_r421427348", "bodyText": "ImmutableMap", "author": "teosarca", "createdAt": "2020-05-07T11:16:54Z", "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/org/adempiere/ad/service/impl/ADReferenceDAO.java", "diffHunk": "@@ -26,11 +25,16 @@\n import java.util.Properties;\n import java.util.Set;\n \n-import static org.adempiere.model.InterfaceWrapperHelper.loadOrNew;\n+import static org.adempiere.model.InterfaceWrapperHelper.newInstanceOutOfTrx;\n import static org.adempiere.model.InterfaceWrapperHelper.saveRecord;\n \n public class ADReferenceDAO implements IADReferenceDAO\n {\n+\tprivate final CCache<ReferenceId, Map<String,ADRefListItem>> cache = CCache.<ReferenceId, Map<String,ADRefListItem>>", "originalCommit": "a32e06c35f7f14e25a1cbb9501f1d183af2bdea3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e1a401fc544e4321371ec1337b91d805a36414db", "chunk": "diff --git a/backend/de.metas.adempiere.adempiere/base/src/main/java/org/adempiere/ad/service/impl/ADReferenceDAO.java b/backend/de.metas.adempiere.adempiere/base/src/main/java/org/adempiere/ad/service/impl/ADReferenceDAO.java\nindex 698a13b090..c1bcc362c4 100644\n--- a/backend/de.metas.adempiere.adempiere/base/src/main/java/org/adempiere/ad/service/impl/ADReferenceDAO.java\n+++ b/backend/de.metas.adempiere.adempiere/base/src/main/java/org/adempiere/ad/service/impl/ADReferenceDAO.java\n\n@@ -30,7 +30,7 @@ import static org.adempiere.model.InterfaceWrapperHelper.saveRecord;\n \n public class ADReferenceDAO implements IADReferenceDAO\n {\n-\tprivate final CCache<ReferenceId, Map<String,ADRefListItem>> cache = CCache.<ReferenceId, Map<String,ADRefListItem>>\n+\tprivate final CCache<ReferenceId, ImmutableMap<String,ADRefListItem>> cache = CCache.<ReferenceId, ImmutableMap<String,ADRefListItem>>\n \t\t\tbuilder()\n \t\t\t.tableName(I_AD_Ref_List.Table_Name)\n \t\t\t.build();\n"}}, {"oid": "e1a401fc544e4321371ec1337b91d805a36414db", "url": "https://github.com/metasfresh/metasfresh/commit/e1a401fc544e4321371ec1337b91d805a36414db", "message": "ImmutableMap\nhttps://github.com/metasfresh/metasfresh/issues/5816", "committedDate": "2020-05-07T11:21:45Z", "type": "commit"}]}