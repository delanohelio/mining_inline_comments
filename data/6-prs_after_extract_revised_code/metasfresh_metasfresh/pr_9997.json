{"pr_number": 9997, "pr_title": "#9987 Enable a discount for ESR payments ", "pr_createdAt": "2020-09-23T08:39:39Z", "pr_url": "https://github.com/metasfresh/metasfresh/pull/9997", "timeline": [{"oid": "514b10ee7aeb472f629c34169398d3d1b5015369", "url": "https://github.com/metasfresh/metasfresh/commit/514b10ee7aeb472f629c34169398d3d1b5015369", "message": "#9987 Enable ESR Payment discounts\n\n#9987 Enable ESR Payment discounts", "committedDate": "2020-09-22T12:20:56Z", "type": "commit"}, {"oid": "8c08c0a235c242a16c9e2e2a33fc761f3b84b9cc", "url": "https://github.com/metasfresh/metasfresh/commit/8c08c0a235c242a16c9e2e2a33fc761f3b84b9cc", "message": "#9987 Register disocunt handler", "committedDate": "2020-09-23T05:36:49Z", "type": "commit"}, {"oid": "e14de8e5d2823f13e85744b1cdc608a2a845f31a", "url": "https://github.com/metasfresh/metasfresh/commit/e14de8e5d2823f13e85744b1cdc608a2a845f31a", "message": "#9987 Fix test", "committedDate": "2020-09-23T05:48:44Z", "type": "commit"}, {"oid": "29f58e800651f8db077bc7e82de4768fd45dc1b8", "url": "https://github.com/metasfresh/metasfresh/commit/29f58e800651f8db077bc7e82de4768fd45dc1b8", "message": "#9987 Aloowe Discount when selecting actions", "committedDate": "2020-09-23T07:24:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM0MzU1Nw==", "url": "https://github.com/metasfresh/metasfresh/pull/9997#discussion_r493343557", "bodyText": "i guess u can simply use runInThreadInheritedTrx", "author": "teosarca", "createdAt": "2020-09-23T09:05:19Z", "path": "backend/de.metas.payment.esr/src/main/java/de/metas/payment/esr/actionhandler/impl/DiscountESRActionHandler.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package de.metas.payment.esr.actionhandler.impl;\n+\n+import org.adempiere.ad.trx.api.ITrxManager;\n+import org.adempiere.ad.trx.api.OnTrxMissingPolicy;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.compiere.model.I_C_Invoice;\n+import org.compiere.model.I_C_Payment;\n+import org.compiere.util.TrxRunnable;\n+\n+import de.metas.currency.Amount;\n+import de.metas.invoice.InvoiceId;\n+import de.metas.invoice.service.IInvoiceBL;\n+import de.metas.invoice.service.IInvoiceDAO;\n+import de.metas.payment.PaymentId;\n+import de.metas.payment.esr.ESRConstants;\n+import de.metas.payment.esr.model.I_ESR_ImportLine;\n+import de.metas.util.Check;\n+import de.metas.util.Services;\n+\n+/**\n+ * Handler for {@link de.metas.payment.esr.model.X_ESR_ImportLine#EESR_PAYMENT_ACTION_Discount}. This handler discounts the open amount of the line's invoice. For lines that don't have an\n+ * invoice, the handler does nothing.\n+ * \n+ */\n+public class DiscountESRActionHandler extends AbstractESRActionHandler\n+{\n+\tfinal IInvoiceBL invoiceBL = Services.get(IInvoiceBL.class);\n+\tfinal IInvoiceDAO invoiceDAO = Services.get(IInvoiceDAO.class);\n+\tfinal ITrxManager trxManager = Services.get(ITrxManager.class);\n+\n+\t@Override\n+\tpublic boolean process(final I_ESR_ImportLine line, final String message)\n+\t{\n+\t\tsuper.process(line, message);\n+\n+\t\tCheck.assumeNotNull(line.getESR_Payment_Action(), \"@\" + ESRConstants.ERR_ESR_LINE_WITH_NO_PAYMENT_ACTION + \"@\");\n+\n+\t\tfinal I_C_Invoice invoice = line.getC_Invoice();\n+\t\tif (invoice == null)\n+\t\t{\n+\t\t\t// We have nothing to do, but the line should still be flagged as processed.\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\t// sanity check: there must be an payment with a negative OverUnderAmt\n+\n+\t\tfinal PaymentId esrImportLinePaymentId = PaymentId.ofRepoIdOrNull(line.getC_Payment_ID());\n+\t\tfinal I_C_Payment payment = esrImportLinePaymentId == null ? null\n+\t\t\t\t: paymentDAO.getById(esrImportLinePaymentId);\n+\n+\t\tfinal String trxName = trxManager.getThreadInheritedTrxName(OnTrxMissingPolicy.ReturnTrxNone);\n+\n+//\t\tInterfaceWrapperHelper.refresh(payment, trxName); // refresh the payment : very important; otherwise the over amount is not seen\n+//\t\tInterfaceWrapperHelper.refresh(invoice, trxName); // refresh the payment : very important; otherwise the over amount is not seen\n+\t\tCheck.assumeNotNull(payment, \"Null payment for line {}\", line.getESR_ImportLine_ID());\n+\t\tCheck.errorIf(payment.getOverUnderAmt().signum() > 0, \"Exces payment for line {}. Can't discount this\", line.getESR_ImportLine_ID());\n+\n+\t\tfinal Amount discount = invoiceDAO.retrieveOpenAmt(InvoiceId.ofRepoId(invoice.getC_Invoice_ID()));\n+\n+\t\ttrxManager.run(trxName, new TrxRunnable()", "originalCommit": "29f58e800651f8db077bc7e82de4768fd45dc1b8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "091d2df7684046b96b64f0df76caf2aee8e5e198", "chunk": "diff --git a/backend/de.metas.payment.esr/src/main/java/de/metas/payment/esr/actionhandler/impl/DiscountESRActionHandler.java b/backend/de.metas.payment.esr/src/main/java/de/metas/payment/esr/actionhandler/impl/DiscountESRActionHandler.java\nindex 2ebf268027..4437174617 100644\n--- a/backend/de.metas.payment.esr/src/main/java/de/metas/payment/esr/actionhandler/impl/DiscountESRActionHandler.java\n+++ b/backend/de.metas.payment.esr/src/main/java/de/metas/payment/esr/actionhandler/impl/DiscountESRActionHandler.java\n\n@@ -48,27 +48,21 @@ public class DiscountESRActionHandler extends AbstractESRActionHandler\n \t\tfinal I_C_Payment payment = esrImportLinePaymentId == null ? null\n \t\t\t\t: paymentDAO.getById(esrImportLinePaymentId);\n \n-\t\tfinal String trxName = trxManager.getThreadInheritedTrxName(OnTrxMissingPolicy.ReturnTrxNone);\n-\n-//\t\tInterfaceWrapperHelper.refresh(payment, trxName); // refresh the payment : very important; otherwise the over amount is not seen\n-//\t\tInterfaceWrapperHelper.refresh(invoice, trxName); // refresh the payment : very important; otherwise the over amount is not seen\n \t\tCheck.assumeNotNull(payment, \"Null payment for line {}\", line.getESR_ImportLine_ID());\n \t\tCheck.errorIf(payment.getOverUnderAmt().signum() > 0, \"Exces payment for line {}. Can't discount this\", line.getESR_ImportLine_ID());\n \n \t\tfinal Amount discount = invoiceDAO.retrieveOpenAmt(InvoiceId.ofRepoId(invoice.getC_Invoice_ID()));\n \n-\t\ttrxManager.run(trxName, new TrxRunnable()\n+\t\ttrxManager.runInThreadInheritedTrx(new TrxRunnable()\n \t\t{\n \t\t\t@Override\n \t\t\tpublic void run(String trxName) throws Exception\n \t\t\t{\n-\t\t\t\t// must assure that the invoice has transaction\n-\t\t\t\tInterfaceWrapperHelper.refresh(invoice, trxName);\n-\t\t\t\tinvoiceBL.discountInvoice(invoice, discount.getAsBigDecimal(), message);\n+\t\t\t\tinvoiceBL.discountInvoice(invoice, discount, message);\n \t\t\t}\n \t\t});\n+\t\t\n \t\treturn true;\n-\n \t}\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM0NDU1Nw==", "url": "https://github.com/metasfresh/metasfresh/pull/9997#discussion_r493344557", "bodyText": "discount shall be Amount.\nPls avoid using BigDecimal for amounts and quantities.", "author": "teosarca", "createdAt": "2020-09-23T09:06:17Z", "path": "backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/AbstractInvoiceBL.java", "diffHunk": "@@ -1746,4 +1746,40 @@ public PaymentRule getDefaultPaymentRule()\n \t\treturn sysconfigs.getReferenceListAware(SYSCONFIG_C_Invoice_PaymentRule, PaymentRule.OnCredit, PaymentRule.class);\n \t}\n \n+\t@Override\n+\tpublic final void discountInvoice(final org.compiere.model.I_C_Invoice invoice, final BigDecimal discountAmt, final String description)", "originalCommit": "29f58e800651f8db077bc7e82de4768fd45dc1b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM0ODAxNA==", "url": "https://github.com/metasfresh/metasfresh/pull/9997#discussion_r493348014", "bodyText": "also document that discountAmt is not AP corrected.\ni.e. \"10 EUR discount\" means \"-10 EUR\" in case of Sales Invoice and \"+10 EUR\" in case of Vendor invoice.", "author": "teosarca", "createdAt": "2020-09-23T09:10:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM0NDU1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "091d2df7684046b96b64f0df76caf2aee8e5e198", "chunk": "diff --git a/backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/AbstractInvoiceBL.java b/backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/AbstractInvoiceBL.java\nindex 42f3486dab..da5c5c88ca 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/AbstractInvoiceBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/AbstractInvoiceBL.java\n\n@@ -1747,9 +1748,9 @@ public abstract class AbstractInvoiceBL implements IInvoiceBL\n \t}\n \n \t@Override\n-\tpublic final void discountInvoice(final org.compiere.model.I_C_Invoice invoice, final BigDecimal discountAmt, final String description)\n+\tpublic final void discountInvoice(final @NonNull org.compiere.model.I_C_Invoice invoice, final @NonNull Amount discountAmt , final String description)\n \t{\n-\t\tif (discountAmt.signum() == 0)\n+\t\tif (discountAmt .signum() == 0)\n \t\t{\n \t\t\treturn;\n \t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM0NjA3MA==", "url": "https://github.com/metasfresh/metasfresh/pull/9997#discussion_r493346070", "bodyText": "not sure if using invoice's DateAcct/DateInvoiced is correct.", "author": "teosarca", "createdAt": "2020-09-23T09:07:53Z", "path": "backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/AbstractInvoiceBL.java", "diffHunk": "@@ -1746,4 +1746,40 @@ public PaymentRule getDefaultPaymentRule()\n \t\treturn sysconfigs.getReferenceListAware(SYSCONFIG_C_Invoice_PaymentRule, PaymentRule.OnCredit, PaymentRule.class);\n \t}\n \n+\t@Override\n+\tpublic final void discountInvoice(final org.compiere.model.I_C_Invoice invoice, final BigDecimal discountAmt, final String description)\n+\t{\n+\t\tif (discountAmt.signum() == 0)\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tfinal BigDecimal discountAmtAbs;\n+\t\tif (!invoice.isSOTrx())\n+\t\t{\n+\t\t\t// API\n+\t\t\tdiscountAmtAbs = discountAmt.negate();\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\t// ARI\n+\t\t\tdiscountAmtAbs = discountAmt;\n+\t\t}\n+\n+\t\t// @formatter:off\n+\t\tServices.get(IAllocationBL.class).newBuilder()\n+\t\t\t.orgId(invoice.getAD_Org_ID())\n+\t\t\t.currencyId(invoice.getC_Currency_ID())\n+\t\t\t.dateAcct(invoice.getDateAcct())\n+\t\t\t.dateTrx(invoice.getDateInvoiced())", "originalCommit": "29f58e800651f8db077bc7e82de4768fd45dc1b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQwNTMwMA==", "url": "https://github.com/metasfresh/metasfresh/pull/9997#discussion_r493405300", "bodyText": "Need to clear it with Mark", "author": "cristinamghita", "createdAt": "2020-09-23T10:08:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM0NjA3MA=="}], "type": "inlineReview", "revised_code": {"commit": "091d2df7684046b96b64f0df76caf2aee8e5e198", "chunk": "diff --git a/backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/AbstractInvoiceBL.java b/backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/AbstractInvoiceBL.java\nindex 42f3486dab..da5c5c88ca 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/AbstractInvoiceBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/AbstractInvoiceBL.java\n\n@@ -1747,9 +1748,9 @@ public abstract class AbstractInvoiceBL implements IInvoiceBL\n \t}\n \n \t@Override\n-\tpublic final void discountInvoice(final org.compiere.model.I_C_Invoice invoice, final BigDecimal discountAmt, final String description)\n+\tpublic final void discountInvoice(final @NonNull org.compiere.model.I_C_Invoice invoice, final @NonNull Amount discountAmt , final String description)\n \t{\n-\t\tif (discountAmt.signum() == 0)\n+\t\tif (discountAmt .signum() == 0)\n \t\t{\n \t\t\treturn;\n \t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM0ODY0OA==", "url": "https://github.com/metasfresh/metasfresh/pull/9997#discussion_r493348648", "bodyText": "why is that needed?", "author": "teosarca", "createdAt": "2020-09-23T09:10:49Z", "path": "backend/de.metas.payment.esr/src/main/java/de/metas/payment/esr/actionhandler/impl/DiscountESRActionHandler.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package de.metas.payment.esr.actionhandler.impl;\n+\n+import org.adempiere.ad.trx.api.ITrxManager;\n+import org.adempiere.ad.trx.api.OnTrxMissingPolicy;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.compiere.model.I_C_Invoice;\n+import org.compiere.model.I_C_Payment;\n+import org.compiere.util.TrxRunnable;\n+\n+import de.metas.currency.Amount;\n+import de.metas.invoice.InvoiceId;\n+import de.metas.invoice.service.IInvoiceBL;\n+import de.metas.invoice.service.IInvoiceDAO;\n+import de.metas.payment.PaymentId;\n+import de.metas.payment.esr.ESRConstants;\n+import de.metas.payment.esr.model.I_ESR_ImportLine;\n+import de.metas.util.Check;\n+import de.metas.util.Services;\n+\n+/**\n+ * Handler for {@link de.metas.payment.esr.model.X_ESR_ImportLine#EESR_PAYMENT_ACTION_Discount}. This handler discounts the open amount of the line's invoice. For lines that don't have an\n+ * invoice, the handler does nothing.\n+ * \n+ */\n+public class DiscountESRActionHandler extends AbstractESRActionHandler\n+{\n+\tfinal IInvoiceBL invoiceBL = Services.get(IInvoiceBL.class);\n+\tfinal IInvoiceDAO invoiceDAO = Services.get(IInvoiceDAO.class);\n+\tfinal ITrxManager trxManager = Services.get(ITrxManager.class);\n+\n+\t@Override\n+\tpublic boolean process(final I_ESR_ImportLine line, final String message)\n+\t{\n+\t\tsuper.process(line, message);\n+\n+\t\tCheck.assumeNotNull(line.getESR_Payment_Action(), \"@\" + ESRConstants.ERR_ESR_LINE_WITH_NO_PAYMENT_ACTION + \"@\");\n+\n+\t\tfinal I_C_Invoice invoice = line.getC_Invoice();\n+\t\tif (invoice == null)\n+\t\t{\n+\t\t\t// We have nothing to do, but the line should still be flagged as processed.\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\t// sanity check: there must be an payment with a negative OverUnderAmt\n+\n+\t\tfinal PaymentId esrImportLinePaymentId = PaymentId.ofRepoIdOrNull(line.getC_Payment_ID());\n+\t\tfinal I_C_Payment payment = esrImportLinePaymentId == null ? null\n+\t\t\t\t: paymentDAO.getById(esrImportLinePaymentId);\n+\n+\t\tfinal String trxName = trxManager.getThreadInheritedTrxName(OnTrxMissingPolicy.ReturnTrxNone);\n+\n+//\t\tInterfaceWrapperHelper.refresh(payment, trxName); // refresh the payment : very important; otherwise the over amount is not seen\n+//\t\tInterfaceWrapperHelper.refresh(invoice, trxName); // refresh the payment : very important; otherwise the over amount is not seen\n+\t\tCheck.assumeNotNull(payment, \"Null payment for line {}\", line.getESR_ImportLine_ID());\n+\t\tCheck.errorIf(payment.getOverUnderAmt().signum() > 0, \"Exces payment for line {}. Can't discount this\", line.getESR_ImportLine_ID());\n+\n+\t\tfinal Amount discount = invoiceDAO.retrieveOpenAmt(InvoiceId.ofRepoId(invoice.getC_Invoice_ID()));\n+\n+\t\ttrxManager.run(trxName, new TrxRunnable()\n+\t\t{\n+\t\t\t@Override\n+\t\t\tpublic void run(String trxName) throws Exception\n+\t\t\t{\n+\t\t\t\t// must assure that the invoice has transaction\n+\t\t\t\tInterfaceWrapperHelper.refresh(invoice, trxName);", "originalCommit": "29f58e800651f8db077bc7e82de4768fd45dc1b8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "091d2df7684046b96b64f0df76caf2aee8e5e198", "chunk": "diff --git a/backend/de.metas.payment.esr/src/main/java/de/metas/payment/esr/actionhandler/impl/DiscountESRActionHandler.java b/backend/de.metas.payment.esr/src/main/java/de/metas/payment/esr/actionhandler/impl/DiscountESRActionHandler.java\nindex 2ebf268027..4437174617 100644\n--- a/backend/de.metas.payment.esr/src/main/java/de/metas/payment/esr/actionhandler/impl/DiscountESRActionHandler.java\n+++ b/backend/de.metas.payment.esr/src/main/java/de/metas/payment/esr/actionhandler/impl/DiscountESRActionHandler.java\n\n@@ -48,27 +48,21 @@ public class DiscountESRActionHandler extends AbstractESRActionHandler\n \t\tfinal I_C_Payment payment = esrImportLinePaymentId == null ? null\n \t\t\t\t: paymentDAO.getById(esrImportLinePaymentId);\n \n-\t\tfinal String trxName = trxManager.getThreadInheritedTrxName(OnTrxMissingPolicy.ReturnTrxNone);\n-\n-//\t\tInterfaceWrapperHelper.refresh(payment, trxName); // refresh the payment : very important; otherwise the over amount is not seen\n-//\t\tInterfaceWrapperHelper.refresh(invoice, trxName); // refresh the payment : very important; otherwise the over amount is not seen\n \t\tCheck.assumeNotNull(payment, \"Null payment for line {}\", line.getESR_ImportLine_ID());\n \t\tCheck.errorIf(payment.getOverUnderAmt().signum() > 0, \"Exces payment for line {}. Can't discount this\", line.getESR_ImportLine_ID());\n \n \t\tfinal Amount discount = invoiceDAO.retrieveOpenAmt(InvoiceId.ofRepoId(invoice.getC_Invoice_ID()));\n \n-\t\ttrxManager.run(trxName, new TrxRunnable()\n+\t\ttrxManager.runInThreadInheritedTrx(new TrxRunnable()\n \t\t{\n \t\t\t@Override\n \t\t\tpublic void run(String trxName) throws Exception\n \t\t\t{\n-\t\t\t\t// must assure that the invoice has transaction\n-\t\t\t\tInterfaceWrapperHelper.refresh(invoice, trxName);\n-\t\t\t\tinvoiceBL.discountInvoice(invoice, discount.getAsBigDecimal(), message);\n+\t\t\t\tinvoiceBL.discountInvoice(invoice, discount, message);\n \t\t\t}\n \t\t});\n+\t\t\n \t\treturn true;\n-\n \t}\n \n }\n"}}, {"oid": "091d2df7684046b96b64f0df76caf2aee8e5e198", "url": "https://github.com/metasfresh/metasfresh/commit/091d2df7684046b96b64f0df76caf2aee8e5e198", "message": "#9987 Minor changes", "committedDate": "2020-09-23T09:58:19Z", "type": "commit"}, {"oid": "b218932053ce355e2fc28b5de728434fe55d52e0", "url": "https://github.com/metasfresh/metasfresh/commit/b218932053ce355e2fc28b5de728434fe55d52e0", "message": "#9987 Imports", "committedDate": "2020-09-23T09:58:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQ1NTA3Mg==", "url": "https://github.com/metasfresh/metasfresh/pull/9997#discussion_r493455072", "bodyText": "use the discountAmt's currency", "author": "teosarca", "createdAt": "2020-09-23T11:03:52Z", "path": "backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/AbstractInvoiceBL.java", "diffHunk": "@@ -1746,4 +1747,40 @@ public PaymentRule getDefaultPaymentRule()\n \t\treturn sysconfigs.getReferenceListAware(SYSCONFIG_C_Invoice_PaymentRule, PaymentRule.OnCredit, PaymentRule.class);\n \t}\n \n+\t@Override\n+\tpublic final void discountInvoice(final @NonNull org.compiere.model.I_C_Invoice invoice, final @NonNull Amount discountAmt , final String description)\n+\t{\n+\t\tif (discountAmt .signum() == 0)\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tfinal BigDecimal discountAmtAbs;\n+\t\tif (!invoice.isSOTrx())\n+\t\t{\n+\t\t\t// API\n+\t\t\tdiscountAmtAbs = discountAmt.getAsBigDecimal().negate();\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\t// ARI\n+\t\t\tdiscountAmtAbs = discountAmt.getAsBigDecimal();\n+\t\t}\n+\n+\t\t// @formatter:off\n+\t\tServices.get(IAllocationBL.class).newBuilder()\n+\t\t\t.orgId(invoice.getAD_Org_ID())\n+\t\t\t.currencyId(invoice.getC_Currency_ID())", "originalCommit": "091d2df7684046b96b64f0df76caf2aee8e5e198", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ba2322e394d330077101b0b52141398f147d456", "chunk": "diff --git a/backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/AbstractInvoiceBL.java b/backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/AbstractInvoiceBL.java\nindex da5c5c88ca..1e9bb8d165 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/AbstractInvoiceBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/AbstractInvoiceBL.java\n\n@@ -1755,22 +1760,13 @@ public abstract class AbstractInvoiceBL implements IInvoiceBL\n \t\t\treturn;\n \t\t}\n \n-\t\tfinal BigDecimal discountAmtAbs;\n-\t\tif (!invoice.isSOTrx())\n-\t\t{\n-\t\t\t// API\n-\t\t\tdiscountAmtAbs = discountAmt.getAsBigDecimal().negate();\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\t// ARI\n-\t\t\tdiscountAmtAbs = discountAmt.getAsBigDecimal();\n-\t\t}\n-\n+\t\tfinal Amount discountAmtAbs = discountAmt.negateIfNot(invoice.isSOTrx());\n+\t\tfinal CurrencyId currencyId = currenciesRepo.getCurrencyIdByCurrencyCode(discountAmt.getCurrencyCode());\n+\t\t\n \t\t// @formatter:off\n \t\tServices.get(IAllocationBL.class).newBuilder()\n \t\t\t.orgId(invoice.getAD_Org_ID())\n-\t\t\t.currencyId(invoice.getC_Currency_ID())\n+\t\t\t.currencyId(currencyId)\n \t\t\t.dateAcct(invoice.getDateAcct())\n \t\t\t.dateTrx(invoice.getDateInvoiced())\n \t\t\t.addLine()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQ1NTI3MA==", "url": "https://github.com/metasfresh/metasfresh/pull/9997#discussion_r493455270", "bodyText": "avoid BigDecimal at all. Use Amount type", "author": "teosarca", "createdAt": "2020-09-23T11:04:09Z", "path": "backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/AbstractInvoiceBL.java", "diffHunk": "@@ -1746,4 +1747,40 @@ public PaymentRule getDefaultPaymentRule()\n \t\treturn sysconfigs.getReferenceListAware(SYSCONFIG_C_Invoice_PaymentRule, PaymentRule.OnCredit, PaymentRule.class);\n \t}\n \n+\t@Override\n+\tpublic final void discountInvoice(final @NonNull org.compiere.model.I_C_Invoice invoice, final @NonNull Amount discountAmt , final String description)\n+\t{\n+\t\tif (discountAmt .signum() == 0)\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tfinal BigDecimal discountAmtAbs;", "originalCommit": "091d2df7684046b96b64f0df76caf2aee8e5e198", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ba2322e394d330077101b0b52141398f147d456", "chunk": "diff --git a/backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/AbstractInvoiceBL.java b/backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/AbstractInvoiceBL.java\nindex da5c5c88ca..1e9bb8d165 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/AbstractInvoiceBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/AbstractInvoiceBL.java\n\n@@ -1755,22 +1760,13 @@ public abstract class AbstractInvoiceBL implements IInvoiceBL\n \t\t\treturn;\n \t\t}\n \n-\t\tfinal BigDecimal discountAmtAbs;\n-\t\tif (!invoice.isSOTrx())\n-\t\t{\n-\t\t\t// API\n-\t\t\tdiscountAmtAbs = discountAmt.getAsBigDecimal().negate();\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\t// ARI\n-\t\t\tdiscountAmtAbs = discountAmt.getAsBigDecimal();\n-\t\t}\n-\n+\t\tfinal Amount discountAmtAbs = discountAmt.negateIfNot(invoice.isSOTrx());\n+\t\tfinal CurrencyId currencyId = currenciesRepo.getCurrencyIdByCurrencyCode(discountAmt.getCurrencyCode());\n+\t\t\n \t\t// @formatter:off\n \t\tServices.get(IAllocationBL.class).newBuilder()\n \t\t\t.orgId(invoice.getAD_Org_ID())\n-\t\t\t.currencyId(invoice.getC_Currency_ID())\n+\t\t\t.currencyId(currencyId)\n \t\t\t.dateAcct(invoice.getDateAcct())\n \t\t\t.dateTrx(invoice.getDateInvoiced())\n \t\t\t.addLine()\n"}}, {"oid": "8ba2322e394d330077101b0b52141398f147d456", "url": "https://github.com/metasfresh/metasfresh/commit/8ba2322e394d330077101b0b52141398f147d456", "message": "#9987 Use amount", "committedDate": "2020-09-23T14:06:50Z", "type": "commit"}, {"oid": "fdb3d7ffcac8c5a44f7bb4c2a3d02ed00abda9f7", "url": "https://github.com/metasfresh/metasfresh/commit/fdb3d7ffcac8c5a44f7bb4c2a3d02ed00abda9f7", "message": "#9987 Use payment date for the new allocation", "committedDate": "2020-09-23T14:27:25Z", "type": "commit"}, {"oid": "7010c952f4a45e9fa0279538add145cae204b84b", "url": "https://github.com/metasfresh/metasfresh/commit/7010c952f4a45e9fa0279538add145cae204b84b", "message": "#9987 Trying to fix test", "committedDate": "2020-09-23T15:16:47Z", "type": "commit"}, {"oid": "9dd64fcf82ecfa872e6362a48ec0b5dbfbd37051", "url": "https://github.com/metasfresh/metasfresh/commit/9dd64fcf82ecfa872e6362a48ec0b5dbfbd37051", "message": "#9987 Register CurrencyRepository for testing", "committedDate": "2020-09-24T07:35:42Z", "type": "commit"}, {"oid": "29ce89382fed4759e9098c63d89835281c67b1ce", "url": "https://github.com/metasfresh/metasfresh/commit/29ce89382fed4759e9098c63d89835281c67b1ce", "message": "#9987 Update trl", "committedDate": "2020-09-24T07:47:50Z", "type": "commit"}, {"oid": "19a015a83b8ae391d52693b15239021de180666c", "url": "https://github.com/metasfresh/metasfresh/commit/19a015a83b8ae391d52693b15239021de180666c", "message": "#9987 Fix tests", "committedDate": "2020-09-24T08:26:22Z", "type": "commit"}, {"oid": "415cfab56362df295e02a6b6fbd76ef3fd414561", "url": "https://github.com/metasfresh/metasfresh/commit/415cfab56362df295e02a6b6fbd76ef3fd414561", "message": "#9987 Final fixes for tests", "committedDate": "2020-09-24T08:36:42Z", "type": "commit"}, {"oid": "4546b212e92689153bee2d171e9224be9e61b80e", "url": "https://github.com/metasfresh/metasfresh/commit/4546b212e92689153bee2d171e9224be9e61b80e", "message": "#9987 Final fixes for tests", "committedDate": "2020-09-24T12:31:58Z", "type": "commit"}, {"oid": "479951f303b41a19b3e859149ae5ccd79df916ec", "url": "https://github.com/metasfresh/metasfresh/commit/479951f303b41a19b3e859149ae5ccd79df916ec", "message": "Merge branch 'intensive_care_uat' into gh9987", "committedDate": "2020-09-24T13:27:13Z", "type": "commit"}]}