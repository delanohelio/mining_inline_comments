{"pr_number": 10427, "pr_title": "Don't generate `SerialNo` attribute for anything except the MainProduct during Manufacturing", "pr_createdAt": "2020-12-14T13:07:59Z", "pr_url": "https://github.com/metasfresh/metasfresh/pull/10427", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ3ODA4Nw==", "url": "https://github.com/metasfresh/metasfresh/pull/10427#discussion_r543478087", "bodyText": "consider removing createReceiptCandidatesFromPlanningHU() at all.\nin some branches, I've already removed.\nso u don't have to bother fixing this TODO", "author": "teosarca", "createdAt": "2020-12-15T16:08:32Z", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/pporder/api/impl/AbstractPPOrderReceiptHUProducer.java", "diffHunk": "@@ -310,7 +310,7 @@ public final void createReceiptCandidatesFromPlanningHU(@NonNull final I_M_HU pl\n \t\t\t}\n \n \t\t\t//\n-\t\t\tupdateReceivedHUs(huContext, ImmutableSet.of(planningHU));\n+\t\t\tupdateReceivedHUs(huContext, ImmutableSet.of(planningHU), null);  // TODO tbp: not sure if this should be null", "originalCommit": "bc4fc914fa1757f86235ce188a430c9c80c4bcc6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA3Mzk1MQ==", "url": "https://github.com/metasfresh/metasfresh/pull/10427#discussion_r544073951", "bodyText": "removed the method from interface and implementation.", "author": "TheBestPessimist", "createdAt": "2020-12-16T07:34:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ3ODA4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDExNTY1Mw==", "url": "https://github.com/metasfresh/metasfresh/pull/10427#discussion_r544115653", "bodyText": "done", "author": "TheBestPessimist", "createdAt": "2020-12-16T08:48:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ3ODA4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "195b3790e3e245151a315dceb681cc318ffb9d36", "chunk": "diff --git a/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/pporder/api/impl/AbstractPPOrderReceiptHUProducer.java b/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/pporder/api/impl/AbstractPPOrderReceiptHUProducer.java\nindex f63260b31c..53883f985d 100644\n--- a/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/pporder/api/impl/AbstractPPOrderReceiptHUProducer.java\n+++ b/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/pporder/api/impl/AbstractPPOrderReceiptHUProducer.java\n\n@@ -265,55 +265,6 @@ import java.util.Map;\n \n \tprotected abstract ReceiptCandidateRequestProducer newReceiptCandidateRequestProducer();\n \n-\t@Override\n-\tpublic final void createReceiptCandidatesFromPlanningHU(@NonNull final I_M_HU planningHU)\n-\t{\n-\t\tprocessReceiptCandidates = true;\n-\n-\t\tif (!X_M_HU.HUSTATUS_Planning.equals(planningHU.getHUStatus()))\n-\t\t{\n-\t\t\tthrow new HUException(\"HU \" + planningHU + \" shall have status Planning but it has \" + planningHU.getHUStatus());\n-\t\t}\n-\n-\t\thuTrxBL.process(huContext -> {\n-\t\t\tInterfaceWrapperHelper.setThreadInheritedTrxName(planningHU); // just to be sure\n-\n-\t\t\t//\n-\t\t\t// Delete previously created candidates\n-\t\t\t// Assume there are no processed one, and even if it would be it would fail on DAO level\n-\t\t\thuPPOrderQtyDAO.streamOrderQtys(getPpOrderId())\n-\t\t\t\t\t.filter(candidate -> candidate.getM_HU_ID() == planningHU.getM_HU_ID())\n-\t\t\t\t\t.forEach(huPPOrderQtyDAO::delete);\n-\n-\t\t\t// Extract it if not top level\n-\t\t\thuTrxBL.setParentHU(huContext,\n-\t\t\t\t\tnull,\n-\t\t\t\t\tplanningHU,\n-\t\t\t\t\ttrue // destroyOldParentIfEmptyStorage\n-\t\t\t);\n-\n-\t\t\tfinal HuId topLevelHUId = HuId.ofRepoId(planningHU.getM_HU_ID());\n-\t\t\tfinal LocatorId locatorId = warehousesRepo.getLocatorIdByRepoIdOrNull(planningHU.getM_Locator_ID());\n-\n-\t\t\t// Stream all product storages\n-\t\t\t// ... and create planning receipt candidates\n-\t\t\t{\n-\t\t\t\tfinal ImmutableList<CreateReceiptCandidateRequest> requests = huContext.getHUStorageFactory()\n-\t\t\t\t\t\t.getStorage(planningHU)\n-\t\t\t\t\t\t.getProductStorages()\n-\t\t\t\t\t\t.stream()\n-\t\t\t\t\t\t// FIXME: validate if the storage product is accepted\n-\t\t\t\t\t\t.map(productStorage -> toCreateReceiptCandidateRequest(productStorage, topLevelHUId, locatorId))\n-\t\t\t\t\t\t.collect(ImmutableList.toImmutableList());\n-\n-\t\t\t\tcreateAndProcessReceiptCandidatesIfRequested(requests);\n-\t\t\t}\n-\n-\t\t\t//\n-\t\t\tupdateReceivedHUs(huContext, ImmutableSet.of(planningHU), null);  // TODO tbp: not sure if this should be null\n-\t\t});\n-\t}\n-\n \tprivate static CreateReceiptCandidateRequest toCreateReceiptCandidateRequest(final IHUProductStorage productStorage, final HuId topLevelHUId, final LocatorId locatorId)\n \t{\n \t\treturn CreateReceiptCandidateRequest.builder()\n"}}, {"oid": "f0d6d5a714cf27956c0fb7b369cce2f636059fa7", "url": "https://github.com/metasfresh/metasfresh/commit/f0d6d5a714cf27956c0fb7b369cce2f636059fa7", "message": "Don't generate `SerialNo` attribute for anything except the MainProduct during Manufacturing", "committedDate": "2020-12-16T08:08:29Z", "type": "commit"}, {"oid": "0b5512d52908f49500b43276c18bb6dba1a0e21d", "url": "https://github.com/metasfresh/metasfresh/commit/0b5512d52908f49500b43276c18bb6dba1a0e21d", "message": "Javadoc", "committedDate": "2020-12-16T08:08:29Z", "type": "commit"}, {"oid": "195b3790e3e245151a315dceb681cc318ffb9d36", "url": "https://github.com/metasfresh/metasfresh/commit/195b3790e3e245151a315dceb681cc318ffb9d36", "message": "Cleanup deprecated method used only in swing", "committedDate": "2020-12-16T08:08:44Z", "type": "commit"}, {"oid": "195b3790e3e245151a315dceb681cc318ffb9d36", "url": "https://github.com/metasfresh/metasfresh/commit/195b3790e3e245151a315dceb681cc318ffb9d36", "message": "Cleanup deprecated method used only in swing", "committedDate": "2020-12-16T08:08:44Z", "type": "forcePushed"}, {"oid": "3eb687335569db48a167c6472eced639d0b470ca", "url": "https://github.com/metasfresh/metasfresh/commit/3eb687335569db48a167c6472eced639d0b470ca", "message": "Cleanup after rebase", "committedDate": "2020-12-16T08:52:31Z", "type": "commit"}]}