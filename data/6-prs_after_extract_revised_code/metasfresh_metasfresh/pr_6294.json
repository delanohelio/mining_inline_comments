{"pr_number": 6294, "pr_title": "Gh6291 improve UpdateLocationAndContact on invoice generation", "pr_createdAt": "2020-03-02T17:13:48Z", "pr_url": "https://github.com/metasfresh/metasfresh/pull/6294", "timeline": [{"oid": "a63eb71f628efd26ffae7707ec8dce35ea1ddbea", "url": "https://github.com/metasfresh/metasfresh/commit/a63eb71f628efd26ffae7707ec8dce35ea1ddbea", "message": "#6291 Possibility to retrieve a certain type of user with no fallback on the defaultContact\n\nhttps://github.com/metasfresh/metasfresh/issues/6291", "committedDate": "2020-03-02T16:57:07Z", "type": "commit"}, {"oid": "239b9c16b00eac0a8cdd96a49d69b0dbf2505369", "url": "https://github.com/metasfresh/metasfresh/commit/239b9c16b00eac0a8cdd96a49d69b0dbf2505369", "message": "#6291 take user from invoice candidate if no better one was found\n\nhttps://github.com/metasfresh/metasfresh/issues/6291", "committedDate": "2020-03-02T17:07:54Z", "type": "commit"}, {"oid": "4528b147bcf61067460b08b9c24da4c67784014d", "url": "https://github.com/metasfresh/metasfresh/commit/4528b147bcf61067460b08b9c24da4c67784014d", "message": "Merge branch 'master' into gh6291", "committedDate": "2020-03-02T17:13:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU2Mzc1OA==", "url": "https://github.com/metasfresh/metasfresh/pull/6294#discussion_r386563758", "bodyText": "instead of forceActive i would call it onlyActive", "author": "teosarca", "createdAt": "2020-03-02T18:17:49Z", "path": "de.metas.adempiere.adempiere/base/src/main/java/de/metas/bpartner/service/IBPartnerBL.java", "diffHunk": "@@ -206,6 +206,10 @@\n \t\t@Default\n \t\t@NonNull\n \t\tComparator<User> comparator = Comparator.comparing(User::getName);\n+\n+\t\tboolean forceActive;", "originalCommit": "4528b147bcf61067460b08b9c24da4c67784014d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk1MDQzMA==", "url": "https://github.com/metasfresh/metasfresh/pull/6294#discussion_r386950430", "bodyText": "done", "author": "metas-rc", "createdAt": "2020-03-03T11:11:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU2Mzc1OA=="}], "type": "inlineReview", "revised_code": {"commit": "29e512d5b24f519e94dc4a78afbb258dc21d51c4", "chunk": "diff --git a/de.metas.adempiere.adempiere/base/src/main/java/de/metas/bpartner/service/IBPartnerBL.java b/de.metas.adempiere.adempiere/base/src/main/java/de/metas/bpartner/service/IBPartnerBL.java\nindex 2c0202a83c..e68dc5e6e5 100644\n--- a/de.metas.adempiere.adempiere/base/src/main/java/de/metas/bpartner/service/IBPartnerBL.java\n+++ b/de.metas.adempiere.adempiere/base/src/main/java/de/metas/bpartner/service/IBPartnerBL.java\n\n@@ -207,9 +212,10 @@ public interface IBPartnerBL extends ISingletonService\n \t\t@NonNull\n \t\tComparator<User> comparator = Comparator.comparing(User::getName);\n \n-\t\tboolean forceActive;\n+\t\tboolean onlyActive;\n \n-\t\tboolean forceType;\n+\t\t@Default\n+\t\tIfNotFound ifNotFound = IfNotFound.RETURN_DEFAULT_CONTACT;\n \t}\n \n \tint getFreightCostIdByBPartnerId(BPartnerId bpartnerId);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU2NDI4NA==", "url": "https://github.com/metasfresh/metasfresh/pull/6294#discussion_r386564284", "bodyText": "i am not sure this is a intention revealing name.\nFor me is not clear what's it's purpose.", "author": "teosarca", "createdAt": "2020-03-02T18:18:53Z", "path": "de.metas.adempiere.adempiere/base/src/main/java/de/metas/bpartner/service/IBPartnerBL.java", "diffHunk": "@@ -206,6 +206,10 @@\n \t\t@Default\n \t\t@NonNull\n \t\tComparator<User> comparator = Comparator.comparing(User::getName);\n+\n+\t\tboolean forceActive;\n+\n+\t\tboolean forceType;", "originalCommit": "4528b147bcf61067460b08b9c24da4c67784014d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk1MDk4Mg==", "url": "https://github.com/metasfresh/metasfresh/pull/6294#discussion_r386950982", "bodyText": "Added\npublic enum IfNotFound\n{\nRETURN_DEFAULT_CONTACT, RETURN_NULL\n};", "author": "metas-rc", "createdAt": "2020-03-03T11:12:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU2NDI4NA=="}], "type": "inlineReview", "revised_code": {"commit": "29e512d5b24f519e94dc4a78afbb258dc21d51c4", "chunk": "diff --git a/de.metas.adempiere.adempiere/base/src/main/java/de/metas/bpartner/service/IBPartnerBL.java b/de.metas.adempiere.adempiere/base/src/main/java/de/metas/bpartner/service/IBPartnerBL.java\nindex 2c0202a83c..e68dc5e6e5 100644\n--- a/de.metas.adempiere.adempiere/base/src/main/java/de/metas/bpartner/service/IBPartnerBL.java\n+++ b/de.metas.adempiere.adempiere/base/src/main/java/de/metas/bpartner/service/IBPartnerBL.java\n\n@@ -207,9 +212,10 @@ public interface IBPartnerBL extends ISingletonService\n \t\t@NonNull\n \t\tComparator<User> comparator = Comparator.comparing(User::getName);\n \n-\t\tboolean forceActive;\n+\t\tboolean onlyActive;\n \n-\t\tboolean forceType;\n+\t\t@Default\n+\t\tIfNotFound ifNotFound = IfNotFound.RETURN_DEFAULT_CONTACT;\n \t}\n \n \tint getFreightCostIdByBPartnerId(BPartnerId bpartnerId);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU2NjAzMw==", "url": "https://github.com/metasfresh/metasfresh/pull/6294#discussion_r386566033", "bodyText": "btw, isUpdateLocationAndContactForInvoice is not the right name....", "author": "teosarca", "createdAt": "2020-03-02T18:22:15Z", "path": "de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/api/impl/AggregationEngine.java", "diffHunk": "@@ -540,12 +541,15 @@ private int getBill_User_ID(@NonNull final I_C_Invoice_Candidate ic, final boole\n \n \t\tfinal RetrieveContactRequest request = RetrieveContactRequest\n \t\t\t\t.builder()\n+\t\t\t\t.forceActive(true)\n+\t\t\t\t.contactType(ContactType.BILL_TO_DEFAULT)\n+\t\t\t\t.forceType(true)", "originalCommit": "4528b147bcf61067460b08b9c24da4c67784014d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU2NjQ0OA==", "url": "https://github.com/metasfresh/metasfresh/pull/6294#discussion_r386566448", "bodyText": "also some unit tests would be very nice", "author": "teosarca", "createdAt": "2020-03-02T18:23:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU2NjAzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk1MTk4Mg==", "url": "https://github.com/metasfresh/metasfresh/pull/6294#discussion_r386951982", "bodyText": "Used useDefaultBillLocationAndContactIfNotOverride.\nThere already were some unit tests on this functionality but they did not cover the cases in this issue. Added them: de.metas.invoicecandidate.api.impl.aggregationEngine.TestUpdatedLocationAndUser", "author": "metas-rc", "createdAt": "2020-03-03T11:14:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU2NjAzMw=="}], "type": "inlineReview", "revised_code": {"commit": "29e512d5b24f519e94dc4a78afbb258dc21d51c4", "chunk": "diff --git a/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/api/impl/AggregationEngine.java b/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/api/impl/AggregationEngine.java\nindex a3be4bb496..bdae7f92f0 100644\n--- a/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/api/impl/AggregationEngine.java\n+++ b/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/api/impl/AggregationEngine.java\n\n@@ -504,52 +510,55 @@ public final class AggregationEngine\n \t\t\t\t});\n \t}\n \n-\tprivate int getBill_Location_ID(@NonNull final I_C_Invoice_Candidate ic, final boolean isUpdateLocationAndContactForInvoice)\n+\t@NonNull\n+\tprivate BPartnerLocationId getBillLocationId(@NonNull final I_C_Invoice_Candidate ic)\n \t{\n-\t\tfinal int bill_Location_Override_ID = ic.getBill_Location_Override_ID();\n-\t\tif (bill_Location_Override_ID > 0)\n+\t\tfinal BPartnerId bpartnerId = BPartnerId.ofRepoId(ic.getBill_BPartner_ID());\n+\t\tfinal BPartnerLocationId billBPLocationOverrideId = BPartnerLocationId.ofRepoIdOrNull(bpartnerId, ic.getBill_Location_Override_ID());\n+\t\tif (billBPLocationOverrideId != null)\n \t\t{\n-\t\t\treturn bill_Location_Override_ID;\n+\t\t\treturn billBPLocationOverrideId;\n \t\t}\n \n-\t\tif (!isUpdateLocationAndContactForInvoice)\n+\t\tif (useDefaultBillLocationAndContactIfNotOverride)\n \t\t{\n-\t\t\treturn ic.getBill_Location_ID();\n+\t\t\tfinal BPartnerLocationId defaulBillLocationId = bpartnerDAO.retrieveCurrentBillLocationOrNull(bpartnerId);\n+\t\t\tif (defaulBillLocationId != null)\n+\t\t\t{\n+\t\t\t\treturn defaulBillLocationId;\n+\t\t\t}\n \t\t}\n-\t\tfinal de.metas.bpartner.BPartnerId bpartnerId = de.metas.bpartner.BPartnerId.ofRepoId(ic.getBill_BPartner_ID());\n-\n-\t\tfinal BPartnerLocationId currentBillLocation = bpartnerDAO.retrieveCurrentBillLocationOrNull(bpartnerId);\n-\n-\t\treturn currentBillLocation == null ? -1 : currentBillLocation.getRepoId();\n \n+\t\treturn BPartnerLocationId.ofRepoId(bpartnerId, ic.getBill_Location_ID());\n \t}\n \n-\tprivate int getBill_User_ID(@NonNull final I_C_Invoice_Candidate ic, final boolean isUpdateLocationAndContactForInvoice)\n+\tprivate BPartnerContactId getBillContactId(\n+\t\t\t@NonNull final I_C_Invoice_Candidate ic,\n+\t\t\tfinal BPartnerLocationId billBPLocationId)\n \t{\n-\t\tfinal int bill_User_ID_Override_ID = ic.getBill_User_ID_Override_ID();\n-\t\tif (bill_User_ID_Override_ID > 0)\n+\t\tfinal BPartnerId bpartnerId = BPartnerId.ofRepoId(ic.getBill_BPartner_ID());\n+\t\tfinal BPartnerContactId billContactOverrideId = BPartnerContactId.ofRepoIdOrNull(bpartnerId, ic.getBill_User_ID_Override_ID());\n+\t\tif (billContactOverrideId != null)\n \t\t{\n-\t\t\treturn bill_User_ID_Override_ID;\n+\t\t\treturn billContactOverrideId;\n \t\t}\n \n-\t\tif (!isUpdateLocationAndContactForInvoice)\n+\t\tif (useDefaultBillLocationAndContactIfNotOverride)\n \t\t{\n-\t\t\treturn ic.getBill_User_ID();\n+\t\t\tfinal User defaultBillContact = bpartnerBL.retrieveContactOrNull(RetrieveContactRequest.builder()\n+\t\t\t\t\t.onlyActive(true)\n+\t\t\t\t\t.contactType(ContactType.BILL_TO_DEFAULT)\n+\t\t\t\t\t.bpartnerId(billBPLocationId.getBpartnerId())\n+\t\t\t\t\t.bPartnerLocationId(billBPLocationId)\n+\t\t\t\t\t.ifNotFound(IfNotFound.RETURN_NULL)\n+\t\t\t\t\t.build());\n+\t\t\tif(defaultBillContact != null)\n+\t\t\t{\n+\t\t\t\treturn BPartnerContactId.ofRepoId(defaultBillContact.getBpartnerId(), defaultBillContact.getId().getRepoId());\n+\t\t\t}\n \t\t}\n \n-\t\tfinal BPartnerLocationId partnerLocationId = BPartnerLocationId.ofRepoId(ic.getBill_BPartner_ID(), getBill_Location_ID(ic, isUpdateLocationAndContactForInvoice));\n-\n-\t\tfinal RetrieveContactRequest request = RetrieveContactRequest\n-\t\t\t\t.builder()\n-\t\t\t\t.forceActive(true)\n-\t\t\t\t.contactType(ContactType.BILL_TO_DEFAULT)\n-\t\t\t\t.forceType(true)\n-\t\t\t\t.bpartnerId(partnerLocationId.getBpartnerId())\n-\t\t\t\t.bPartnerLocationId(partnerLocationId)\n-\t\t\t\t.build();\n-\n-\t\tfinal User billContact = bpartnerBL.retrieveContactOrNull(request);\n-\t\treturn billContact == null ? ic.getBill_User_ID() : billContact.getId().getRepoId();\n+\t\treturn BPartnerContactId.ofRepoIdOrNull(bpartnerId, ic.getBill_User_ID());\n \t}\n \n \tpublic List<IInvoiceHeader> aggregate()\n"}}, {"oid": "29e512d5b24f519e94dc4a78afbb258dc21d51c4", "url": "https://github.com/metasfresh/metasfresh/commit/29e512d5b24f519e94dc4a78afbb258dc21d51c4", "message": "#6291  refactoring\n\nhttps://github.com/metasfresh/metasfresh/issues/6291", "committedDate": "2020-03-03T11:08:46Z", "type": "commit"}, {"oid": "d3ec14ed5f09d83e1b8d6251b0d4f3450ea2d358", "url": "https://github.com/metasfresh/metasfresh/commit/d3ec14ed5f09d83e1b8d6251b0d4f3450ea2d358", "message": "#6291 unit tests\n\nhttps://github.com/metasfresh/metasfresh/issues/6291", "committedDate": "2020-03-03T11:09:02Z", "type": "commit"}, {"oid": "7c10fd10876280e91c2846d80a109094e278dcef", "url": "https://github.com/metasfresh/metasfresh/commit/7c10fd10876280e91c2846d80a109094e278dcef", "message": "Merge branch 'master' into gh6291", "committedDate": "2020-03-03T11:09:18Z", "type": "commit"}, {"oid": "bdacdb89282875d51de4853291bfc2947074a590", "url": "https://github.com/metasfresh/metasfresh/commit/bdacdb89282875d51de4853291bfc2947074a590", "message": "#6291 get rid of SpringBoot in unit test\n\nhttps://github.com/metasfresh/metasfresh/issues/6291", "committedDate": "2020-03-03T11:21:44Z", "type": "commit"}]}