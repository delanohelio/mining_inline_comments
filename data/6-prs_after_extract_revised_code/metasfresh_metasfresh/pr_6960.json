{"pr_number": 6960, "pr_title": "add PostgREST process type", "pr_createdAt": "2020-07-06T06:25:24Z", "pr_url": "https://github.com/metasfresh/metasfresh/pull/6960", "timeline": [{"oid": "2b2684d36b24511bd80e7c3197bed5bdb426759f", "url": "https://github.com/metasfresh/metasfresh/commit/2b2684d36b24511bd80e7c3197bed5bdb426759f", "message": "add PostgREST process type\nhttps://github.com/metasfresh/metasfresh/issues/6957", "committedDate": "2020-07-06T06:23:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE0NjUzOA==", "url": "https://github.com/metasfresh/metasfresh/pull/6960#discussion_r450146538", "bodyText": "AFAIU the postgrest-config is not very org-specific, although it might be good to have the ability for org-specific tweaks..\nHowever, i juggest to rather filter for inArray(I_S_PostgREST_Config.COLUMNNAME_AD_Org_ID, orgId, OrgID.ANY) (the filter method's real name is different) and then sort by AD_Org_ID descending", "author": "metas-ts", "createdAt": "2020-07-06T11:03:04Z", "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/postgrest/config/PostgRESTConfigRepository.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * #%L\n+ * de.metas.adempiere.adempiere.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.postgrest.config;\n+\n+import de.metas.cache.CCache;\n+import de.metas.organization.OrgId;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.exceptions.AdempiereException;\n+import org.compiere.model.I_S_PostgREST_Config;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.Optional;\n+\n+@Repository\n+public class PostgRESTConfigRepository\n+{\n+\tprivate final IQueryBL queryBL = Services.get(IQueryBL.class);\n+\n+\tprivate final CCache<OrgId, Optional<I_S_PostgREST_Config>> cache = CCache.<OrgId, Optional<I_S_PostgREST_Config>> builder()\n+\t\t\t.tableName(I_S_PostgREST_Config.Table_Name)\n+\t\t\t.build();\n+\n+\t@NonNull\n+\tpublic PostgRESTConfig getConfigFor(@NonNull final OrgId orgId)\n+\t{\n+\t\tfinal Optional<I_S_PostgREST_Config> config = getOptionalConfigFor(orgId);\n+\n+\t\tfinal boolean missingMandatoryConfigs = !config.isPresent();\n+\n+\t\tif (missingMandatoryConfigs)\n+\t\t{\n+\t\t\tthrow new AdempiereException(\"Missing PostgREST configs for the given orgID!\")\n+\t\t\t\t\t.appendParametersToMessage()\n+\t\t\t\t\t.setParameter(\"OrgId\", orgId);\n+\t\t}\n+\n+\n+\t\treturn PostgRESTConfig.builder()\n+\t\t\t\t.readTimeout(config.get().getRead_timeout())\n+\t\t\t\t.connectionTimeout(config.get().getConnection_timeout())\n+\t\t\t\t.baseURL(config.get().getBase_url())\n+\t\t\t\t.build();\n+\t}\n+\n+\t@NonNull\n+\tprivate Optional<I_S_PostgREST_Config> getOptionalConfigFor(@NonNull final OrgId orgId)\n+\t{\n+\t\treturn cache.getOrLoad(orgId, this::retrieveConfigFor);\n+\t}\n+\n+\tprivate Optional<I_S_PostgREST_Config> retrieveConfigFor(@NonNull final OrgId orgId)\n+\t{\n+\t\treturn queryBL\n+\t\t\t\t.createQueryBuilder(I_S_PostgREST_Config.class)\n+\t\t\t\t.addOnlyActiveRecordsFilter()\n+\t\t\t\t.addEqualsFilter(I_S_PostgREST_Config.COLUMNNAME_AD_Org_ID, orgId)", "originalCommit": "2b2684d36b24511bd80e7c3197bed5bdb426759f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "89be1c10d583ead751c02552d4d3a2e389683178", "chunk": "diff --git a/backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/postgrest/config/PostgRESTConfigRepository.java b/backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/postgrest/config/PostgRESTConfigRepository.java\nindex bf3fada0d4..78346e4042 100644\n--- a/backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/postgrest/config/PostgRESTConfigRepository.java\n+++ b/backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/postgrest/config/PostgRESTConfigRepository.java\n\n@@ -75,8 +75,9 @@ public class PostgRESTConfigRepository\n \t\treturn queryBL\n \t\t\t\t.createQueryBuilder(I_S_PostgREST_Config.class)\n \t\t\t\t.addOnlyActiveRecordsFilter()\n-\t\t\t\t.addEqualsFilter(I_S_PostgREST_Config.COLUMNNAME_AD_Org_ID, orgId)\n+\t\t\t\t.addInArrayFilter(I_S_PostgREST_Config.COLUMNNAME_AD_Org_ID, orgId, OrgId.ANY)\n+\t\t\t\t.orderBy(I_S_PostgREST_Config.COLUMNNAME_AD_Org_ID)\n \t\t\t\t.create()\n-\t\t\t\t.firstOnlyOptional(I_S_PostgREST_Config.class);\n+\t\t\t\t.firstOptional(I_S_PostgREST_Config.class);\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE1MDQ4NQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6960#discussion_r450150485", "bodyText": "i'm not sure its great to send the whole stacktrace or if that's too much..\nbut on the other hand, here i think at least the exception class and message should be shown..and maybe, also the whole stacktrace after all (check e.g. the olcand-record).", "author": "metas-ts", "createdAt": "2020-07-06T11:11:54Z", "path": "backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/process/impl/ProcessRestController.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/*\n+ * #%L\n+ * de.metas.business.rest-api-impl\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.rest_api.process.impl;\n+\n+import de.metas.Profiles;\n+import de.metas.logging.LogManager;\n+import de.metas.process.AdProcessId;\n+import de.metas.process.IADProcessDAO;\n+import de.metas.process.ProcessBasicInfo;\n+import de.metas.process.ProcessExecutionResult;\n+import de.metas.process.ProcessInfo;\n+import de.metas.process.ProcessType;\n+import de.metas.process.impl.ADProcessDAO;\n+import de.metas.rest_api.process.request.RunProcessRequest;\n+import de.metas.rest_api.process.response.GetAvailableProcessesResponse;\n+import de.metas.rest_api.process.response.JSONProcessBasicInfo;\n+import de.metas.rest_api.process.response.JSONProcessParamBasicInfo;\n+import de.metas.rest_api.process.response.Message;\n+import de.metas.security.PermissionServiceFactories;\n+import de.metas.security.PermissionServiceFactory;\n+import de.metas.util.Check;\n+import de.metas.util.Services;\n+import de.metas.util.web.MetasfreshRestAPIConstants;\n+import lombok.NonNull;\n+import org.adempiere.exceptions.AdempiereException;\n+import org.compiere.model.I_AD_Process;\n+import org.compiere.util.Env;\n+import org.slf4j.Logger;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import javax.annotation.Nullable;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+@RestController\n+@RequestMapping(ProcessRestController.ENDPOINT)\n+@Profile(Profiles.PROFILE_App)\n+public class ProcessRestController\n+{\n+\tprivate static final transient Logger logger = LogManager.getLogger(ADProcessDAO.class);\n+\n+\tpublic static final String ENDPOINT = MetasfreshRestAPIConstants.ENDPOINT_API + \"/process\";\n+\n+\tprivate final IADProcessDAO adProcessDAO = Services.get(IADProcessDAO.class);\n+\tprivate final PermissionServiceFactory permissionServiceFactory = PermissionServiceFactories.currentContext();\n+\n+\tprivate final ProcessService processService;\n+\n+\tpublic ProcessRestController(final ProcessService processService)\n+\t{\n+\t\tthis.processService = processService;\n+\t}\n+\n+\t@PostMapping(\"{value}/invoke\")\n+\tpublic ResponseEntity<?> invokeProcess(\n+\t\t\t@NonNull @PathVariable(\"value\") final String processValue,\n+\t\t\t@Nullable @RequestBody final RunProcessRequest request)\n+\t{\n+\n+\t\tfinal Optional<AdProcessId> processId = getProcessIdIfRunnable(processValue);\n+\n+\t\tif (!processId.isPresent())\n+\t\t{\n+\t\t\treturn ResponseEntity.badRequest().body(Message.of(\"The requested process is not runnable or it doesn't exist!\"));\n+\t\t}\n+\n+\t\tfinal boolean cannotRunProcess = !permissionServiceFactory.createPermissionService().canRunProcess(processId.get());\n+\n+\t\tif (cannotRunProcess)\n+\t\t{\n+\t\t\treturn ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();\n+\t\t}\n+\n+\t\tfinal ProcessInfo.ProcessInfoBuilder processInfoBuilder = ProcessInfo.builder();\n+\t\tprocessInfoBuilder.setAD_Process_ID(processId.get());\n+\n+\t\tfinal boolean parametersPresent = request != null && !Check.isEmpty(request.getProcessParameters());\n+\n+\t\tif (parametersPresent)\n+\t\t{\n+\t\t\trequest.getProcessParameters().forEach(param -> processInfoBuilder.addParameter(param.getName(), param.getValue()));\n+\t\t}\n+\n+\t\tfinal ProcessExecutionResult processExecutionResult = processInfoBuilder\n+\t\t\t\t.buildAndPrepareExecution()\n+\t\t\t\t.executeSync()\n+\t\t\t\t.getResult();\n+\n+\t\treturn getResponse(processExecutionResult);\n+\t}\n+\n+\t@GetMapping(\"/available\")\n+\tpublic ResponseEntity<GetAvailableProcessesResponse> getAllProcesses()\n+\t{\n+\t\tfinal List<ProcessBasicInfo> processList = processService.getProcessesByType(ProcessType.getTypesRunnableFromAppRestController());\n+\n+\t\tfinal List<JSONProcessBasicInfo> jsonProcessList = processList\n+\t\t\t\t.stream()\n+\t\t\t\t.map(this::buildJSONProcessBasicInfo)\n+\t\t\t\t.collect(Collectors.toList());\n+\n+\t\tfinal GetAvailableProcessesResponse response = GetAvailableProcessesResponse\n+\t\t\t\t.builder()\n+\t\t\t\t.availableProcesses(jsonProcessList)\n+\t\t\t\t.build();\n+\n+\t\treturn ResponseEntity\n+\t\t\t\t.ok()\n+\t\t\t\t.contentType(MediaType.APPLICATION_JSON_UTF8)\n+\t\t\t\t.body(response);\n+\t}\n+\n+\tprivate ResponseEntity<?> getResponse(@NonNull final ProcessExecutionResult processExecutionResult)\n+\t{\n+\t\tif (processExecutionResult.isError())\n+\t\t{\n+\t\t\treturn ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(Message.of(\"Ups! Looks like something went wrong on our end...\"));", "originalCommit": "2b2684d36b24511bd80e7c3197bed5bdb426759f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "89be1c10d583ead751c02552d4d3a2e389683178", "chunk": "diff --git a/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/process/impl/ProcessRestController.java b/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/process/impl/ProcessRestController.java\nindex 50ca80c954..3feae6a1b0 100644\n--- a/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/process/impl/ProcessRestController.java\n+++ b/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/process/impl/ProcessRestController.java\n\n@@ -36,6 +36,7 @@ import de.metas.rest_api.process.response.GetAvailableProcessesResponse;\n import de.metas.rest_api.process.response.JSONProcessBasicInfo;\n import de.metas.rest_api.process.response.JSONProcessParamBasicInfo;\n import de.metas.rest_api.process.response.Message;\n+import de.metas.rest_api.process.response.RunProcessResponse;\n import de.metas.security.PermissionServiceFactories;\n import de.metas.security.PermissionServiceFactory;\n import de.metas.util.Check;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE1NDc4MQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6960#discussion_r450154781", "bodyText": "if it should never happen, i suggest you throw an exception or do Check.fail(...)", "author": "metas-ts", "createdAt": "2020-07-06T11:21:52Z", "path": "backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/process/impl/ProcessRestController.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/*\n+ * #%L\n+ * de.metas.business.rest-api-impl\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.rest_api.process.impl;\n+\n+import de.metas.Profiles;\n+import de.metas.logging.LogManager;\n+import de.metas.process.AdProcessId;\n+import de.metas.process.IADProcessDAO;\n+import de.metas.process.ProcessBasicInfo;\n+import de.metas.process.ProcessExecutionResult;\n+import de.metas.process.ProcessInfo;\n+import de.metas.process.ProcessType;\n+import de.metas.process.impl.ADProcessDAO;\n+import de.metas.rest_api.process.request.RunProcessRequest;\n+import de.metas.rest_api.process.response.GetAvailableProcessesResponse;\n+import de.metas.rest_api.process.response.JSONProcessBasicInfo;\n+import de.metas.rest_api.process.response.JSONProcessParamBasicInfo;\n+import de.metas.rest_api.process.response.Message;\n+import de.metas.security.PermissionServiceFactories;\n+import de.metas.security.PermissionServiceFactory;\n+import de.metas.util.Check;\n+import de.metas.util.Services;\n+import de.metas.util.web.MetasfreshRestAPIConstants;\n+import lombok.NonNull;\n+import org.adempiere.exceptions.AdempiereException;\n+import org.compiere.model.I_AD_Process;\n+import org.compiere.util.Env;\n+import org.slf4j.Logger;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import javax.annotation.Nullable;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+@RestController\n+@RequestMapping(ProcessRestController.ENDPOINT)\n+@Profile(Profiles.PROFILE_App)\n+public class ProcessRestController\n+{\n+\tprivate static final transient Logger logger = LogManager.getLogger(ADProcessDAO.class);\n+\n+\tpublic static final String ENDPOINT = MetasfreshRestAPIConstants.ENDPOINT_API + \"/process\";\n+\n+\tprivate final IADProcessDAO adProcessDAO = Services.get(IADProcessDAO.class);\n+\tprivate final PermissionServiceFactory permissionServiceFactory = PermissionServiceFactories.currentContext();\n+\n+\tprivate final ProcessService processService;\n+\n+\tpublic ProcessRestController(final ProcessService processService)\n+\t{\n+\t\tthis.processService = processService;\n+\t}\n+\n+\t@PostMapping(\"{value}/invoke\")\n+\tpublic ResponseEntity<?> invokeProcess(\n+\t\t\t@NonNull @PathVariable(\"value\") final String processValue,\n+\t\t\t@Nullable @RequestBody final RunProcessRequest request)\n+\t{\n+\n+\t\tfinal Optional<AdProcessId> processId = getProcessIdIfRunnable(processValue);\n+\n+\t\tif (!processId.isPresent())\n+\t\t{\n+\t\t\treturn ResponseEntity.badRequest().body(Message.of(\"The requested process is not runnable or it doesn't exist!\"));\n+\t\t}\n+\n+\t\tfinal boolean cannotRunProcess = !permissionServiceFactory.createPermissionService().canRunProcess(processId.get());\n+\n+\t\tif (cannotRunProcess)\n+\t\t{\n+\t\t\treturn ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();\n+\t\t}\n+\n+\t\tfinal ProcessInfo.ProcessInfoBuilder processInfoBuilder = ProcessInfo.builder();\n+\t\tprocessInfoBuilder.setAD_Process_ID(processId.get());\n+\n+\t\tfinal boolean parametersPresent = request != null && !Check.isEmpty(request.getProcessParameters());\n+\n+\t\tif (parametersPresent)\n+\t\t{\n+\t\t\trequest.getProcessParameters().forEach(param -> processInfoBuilder.addParameter(param.getName(), param.getValue()));\n+\t\t}\n+\n+\t\tfinal ProcessExecutionResult processExecutionResult = processInfoBuilder\n+\t\t\t\t.buildAndPrepareExecution()\n+\t\t\t\t.executeSync()\n+\t\t\t\t.getResult();\n+\n+\t\treturn getResponse(processExecutionResult);\n+\t}\n+\n+\t@GetMapping(\"/available\")\n+\tpublic ResponseEntity<GetAvailableProcessesResponse> getAllProcesses()\n+\t{\n+\t\tfinal List<ProcessBasicInfo> processList = processService.getProcessesByType(ProcessType.getTypesRunnableFromAppRestController());\n+\n+\t\tfinal List<JSONProcessBasicInfo> jsonProcessList = processList\n+\t\t\t\t.stream()\n+\t\t\t\t.map(this::buildJSONProcessBasicInfo)\n+\t\t\t\t.collect(Collectors.toList());\n+\n+\t\tfinal GetAvailableProcessesResponse response = GetAvailableProcessesResponse\n+\t\t\t\t.builder()\n+\t\t\t\t.availableProcesses(jsonProcessList)\n+\t\t\t\t.build();\n+\n+\t\treturn ResponseEntity\n+\t\t\t\t.ok()\n+\t\t\t\t.contentType(MediaType.APPLICATION_JSON_UTF8)\n+\t\t\t\t.body(response);\n+\t}\n+\n+\tprivate ResponseEntity<?> getResponse(@NonNull final ProcessExecutionResult processExecutionResult)\n+\t{\n+\t\tif (processExecutionResult.isError())\n+\t\t{\n+\t\t\treturn ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(Message.of(\"Ups! Looks like something went wrong on our end...\"));\n+\t\t}\n+\t\telse if (Check.isNotBlank(processExecutionResult.getJsonResult()))\n+\t\t{\n+\t\t\treturn ResponseEntity\n+\t\t\t\t\t.ok()\n+\t\t\t\t\t.contentType(MediaType.APPLICATION_JSON_UTF8)\n+\t\t\t\t\t.body(processExecutionResult.getJsonResult());\n+\t\t}\n+\t\telse if (Check.isNotBlank(processExecutionResult.getReportFilename()))\n+\t\t{\n+\t\t\tfinal String contentType = Check.isNotBlank(processExecutionResult.getReportContentType())\n+\t\t\t\t\t? processExecutionResult.getReportContentType()\n+\t\t\t\t\t: MediaType.APPLICATION_OCTET_STREAM_VALUE;\n+\n+\t\t\treturn ResponseEntity.ok()\n+\t\t\t\t\t.contentType(MediaType.parseMediaType(contentType))\n+\t\t\t\t\t.header(HttpHeaders.CONTENT_DISPOSITION,\"attachment; filename=\\\"\" + processExecutionResult.getReportFilename() + \"\\\"\")\n+\t\t\t\t\t.body(processExecutionResult.getReportData());\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\t//this should never happen\n+\t\t\treturn ResponseEntity.noContent().build();", "originalCommit": "2b2684d36b24511bd80e7c3197bed5bdb426759f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "89be1c10d583ead751c02552d4d3a2e389683178", "chunk": "diff --git a/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/process/impl/ProcessRestController.java b/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/process/impl/ProcessRestController.java\nindex 50ca80c954..3feae6a1b0 100644\n--- a/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/process/impl/ProcessRestController.java\n+++ b/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/process/impl/ProcessRestController.java\n\n@@ -36,6 +36,7 @@ import de.metas.rest_api.process.response.GetAvailableProcessesResponse;\n import de.metas.rest_api.process.response.JSONProcessBasicInfo;\n import de.metas.rest_api.process.response.JSONProcessParamBasicInfo;\n import de.metas.rest_api.process.response.Message;\n+import de.metas.rest_api.process.response.RunProcessResponse;\n import de.metas.security.PermissionServiceFactories;\n import de.metas.security.PermissionServiceFactory;\n import de.metas.util.Check;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE1ODM2NQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6960#discussion_r450158365", "bodyText": "might turn out that we also need the type (integer, date, date+time, string) amd ColumnName in this class", "author": "metas-ts", "createdAt": "2020-07-06T11:29:44Z", "path": "backend/de.metas.business.rest-api/src/main/java/de/metas/rest_api/process/response/JSONProcessParamBasicInfo.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * #%L\n+ * de.metas.business.rest-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.rest_api.process.response;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import lombok.Builder;\n+import lombok.Value;\n+\n+@Value\n+@Builder\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonDeserialize(builder = JSONProcessParamBasicInfo.JSONProcessParamBasicInfoBuilder.class)\n+public class JSONProcessParamBasicInfo\n+{\n+\t@JsonProperty(\"name\")\n+\tString name;\n+\n+\t@JsonProperty(\"description\")\n+\tString description;", "originalCommit": "2b2684d36b24511bd80e7c3197bed5bdb426759f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "89be1c10d583ead751c02552d4d3a2e389683178", "chunk": "diff --git a/backend/de.metas.business.rest-api/src/main/java/de/metas/rest_api/process/response/JSONProcessParamBasicInfo.java b/backend/de.metas.business.rest-api/src/main/java/de/metas/rest_api/process/response/JSONProcessParamBasicInfo.java\nindex f2fb75b49c..fe8d671269 100644\n--- a/backend/de.metas.business.rest-api/src/main/java/de/metas/rest_api/process/response/JSONProcessParamBasicInfo.java\n+++ b/backend/de.metas.business.rest-api/src/main/java/de/metas/rest_api/process/response/JSONProcessParamBasicInfo.java\n\n@@ -37,6 +37,12 @@ public class JSONProcessParamBasicInfo\n \t@JsonProperty(\"name\")\n \tString name;\n \n+\t@JsonProperty(\"columnName\")\n+\tString columnName;\n+\n+\t@JsonProperty(\"type\")\n+\tString type;\n+\n \t@JsonProperty(\"description\")\n \tString description;\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE2MTQ3OQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6960#discussion_r450161479", "bodyText": "pls move this class to a more \"generic\" module&package..or if that's not feasilbe, another possibility might be to create one for jasper and one for postgrest and write comments to mae sure future devs don't change them to interfere with each other", "author": "metas-ts", "createdAt": "2020-07-06T11:36:36Z", "path": "backend/de.metas.report/de.metas.report.jasper.client/src/main/java/de/metas/report/jasper/client/interceptor/AD_Process.java", "diffHunk": "@@ -1,5 +1,11 @@\n package de.metas.report.jasper.client.interceptor;", "originalCommit": "2b2684d36b24511bd80e7c3197bed5bdb426759f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "89be1c10d583ead751c02552d4d3a2e389683178", "chunk": "diff --git a/backend/de.metas.report/de.metas.report.jasper.client/src/main/java/de/metas/report/jasper/client/interceptor/AD_Process.java b/backend/de.metas.report/de.metas.report.jasper.client/src/main/java/de/metas/report/jasper/client/interceptor/AD_Process.java\nindex 7eab90986f..0e193103ec 100644\n--- a/backend/de.metas.report/de.metas.report.jasper.client/src/main/java/de/metas/report/jasper/client/interceptor/AD_Process.java\n+++ b/backend/de.metas.report/de.metas.report.jasper.client/src/main/java/de/metas/report/jasper/client/interceptor/AD_Process.java\n\n@@ -1,6 +1,5 @@\n package de.metas.report.jasper.client.interceptor;\n \n-import de.metas.postgrest.process.PostgRESTProcessExecutor;\n import de.metas.process.ProcessType;\n import de.metas.report.jasper.client.process.JasperReportStarter;\n import de.metas.util.Check;\n"}}, {"oid": "89be1c10d583ead751c02552d4d3a2e389683178", "url": "https://github.com/metasfresh/metasfresh/commit/89be1c10d583ead751c02552d4d3a2e389683178", "message": "Include column_name & type in ProcessParamBasicInfo\nhttps://github.com/metasfresh/metasfresh/issues/6957", "committedDate": "2020-07-07T09:53:09Z", "type": "commit"}]}