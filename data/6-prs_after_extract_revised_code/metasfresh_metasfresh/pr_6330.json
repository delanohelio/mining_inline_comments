{"pr_number": 6330, "pr_title": "Gh6328", "pr_createdAt": "2020-03-10T15:14:21Z", "pr_url": "https://github.com/metasfresh/metasfresh/pull/6330", "timeline": [{"oid": "e3aa9e0deccb6c44ab2befd0813279a8704d9393", "url": "https://github.com/metasfresh/metasfresh/commit/e3aa9e0deccb6c44ab2befd0813279a8704d9393", "message": "ESR Import + processing autom. after upload via drag&drop\nhttps://github.com/metasfresh/metasfresh/issues/6328", "committedDate": "2020-03-10T14:21:47Z", "type": "commit"}, {"oid": "98cc4c406dd2ee9a08c128d2c03327f6dc845181", "url": "https://github.com/metasfresh/metasfresh/commit/98cc4c406dd2ee9a08c128d2c03327f6dc845181", "message": "edit a translation\nhttps://github.com/metasfresh/metasfresh/issues/6328", "committedDate": "2020-03-10T15:13:59Z", "type": "commit"}, {"oid": "223d2bc46787132330d6486019efd9c99497b207", "url": "https://github.com/metasfresh/metasfresh/commit/223d2bc46787132330d6486019efd9c99497b207", "message": "fixed unused fields and imports\nhttps://github.com/metasfresh/metasfresh/issues/6328", "committedDate": "2020-03-10T16:19:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQyODAyOA==", "url": "https://github.com/metasfresh/metasfresh/pull/6330#discussion_r390428028", "bodyText": "pls move this method to TableAttachementListenerRepository because we want to  avoid using I_AD_Table_AttachmentListener outside repos.", "author": "teosarca", "createdAt": "2020-03-10T16:03:41Z", "path": "de.metas.adempiere.adempiere/base/src/main/java/de/metas/attachments/listener/AttachmentListenerSettings.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * #%L\n+ * de.metas.adempiere.adempiere.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.attachments.listener;\n+\n+import de.metas.i18n.AdMessageId;\n+import de.metas.javaclasses.JavaClassId;\n+import lombok.NonNull;\n+import lombok.Value;\n+import org.compiere.model.I_AD_Table_AttachmentListener;\n+\n+import javax.annotation.Nullable;\n+\n+@Value\n+public class AttachmentListenerSettings\n+{\n+\t@NonNull\n+\tJavaClassId listenerJavaClassId;\n+\n+\tboolean isSendNotification;\n+\n+\t@Nullable\n+\tAdMessageId adMessageId;\n+\n+\tpublic static AttachmentListenerSettings of(final I_AD_Table_AttachmentListener record)", "originalCommit": "98cc4c406dd2ee9a08c128d2c03327f6dc845181", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1fd70ce2feda716b3bb6ff4eff767b618905c5f1", "chunk": "diff --git a/de.metas.adempiere.adempiere/base/src/main/java/de/metas/attachments/listener/AttachmentListenerSettings.java b/de.metas.adempiere.adempiere/base/src/main/java/de/metas/attachments/listener/AttachmentListenerSettings.java\nindex 62a2d40046..003a4a3e12 100644\n--- a/de.metas.adempiere.adempiere/base/src/main/java/de/metas/attachments/listener/AttachmentListenerSettings.java\n+++ b/de.metas.adempiere.adempiere/base/src/main/java/de/metas/attachments/listener/AttachmentListenerSettings.java\n\n@@ -24,9 +24,10 @@ package de.metas.attachments.listener;\n \n import de.metas.i18n.AdMessageId;\n import de.metas.javaclasses.JavaClassId;\n+import lombok.Builder;\n import lombok.NonNull;\n import lombok.Value;\n-import org.compiere.model.I_AD_Table_AttachmentListener;\n+import org.adempiere.exceptions.AdempiereException;\n \n import javax.annotation.Nullable;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQyODY0MQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6330#discussion_r390428641", "bodyText": "by convention we use getById", "author": "teosarca", "createdAt": "2020-03-10T16:04:37Z", "path": "de.metas.adempiere.adempiere/base/src/main/java/de/metas/attachments/listener/TableAttachmentListenerRepository.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * #%L\n+ * de.metas.adempiere.adempiere.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.attachments.listener;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.cache.CCache;\n+import de.metas.util.Services;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.ad.table.api.AdTableId;\n+import org.adempiere.ad.trx.api.ITrx;\n+import org.compiere.model.I_AD_Table_AttachmentListener;\n+import org.compiere.util.Env;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public class TableAttachmentListenerRepository\n+{\n+\tprivate final CCache<AdTableId, ImmutableList<AttachmentListenerSettings>> cache = CCache.<AdTableId, ImmutableList<AttachmentListenerSettings>> builder()\n+\t\t\t.cacheName(\"listenersByAdTableId\")\n+\t\t\t.cacheMapType(CCache.CacheMapType.LRU)\n+\t\t\t.initialCapacity(100)\n+\t\t\t.tableName(I_AD_Table_AttachmentListener.Table_Name)\n+\t\t\t.build();\n+\n+\tpublic ImmutableList<AttachmentListenerSettings> findForId(final AdTableId adTableId)", "originalCommit": "98cc4c406dd2ee9a08c128d2c03327f6dc845181", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1fd70ce2feda716b3bb6ff4eff767b618905c5f1", "chunk": "diff --git a/de.metas.adempiere.adempiere/base/src/main/java/de/metas/attachments/listener/TableAttachmentListenerRepository.java b/de.metas.adempiere.adempiere/base/src/main/java/de/metas/attachments/listener/TableAttachmentListenerRepository.java\nindex cbb4a8d7bc..99d452b8f1 100644\n--- a/de.metas.adempiere.adempiere/base/src/main/java/de/metas/attachments/listener/TableAttachmentListenerRepository.java\n+++ b/de.metas.adempiere.adempiere/base/src/main/java/de/metas/attachments/listener/TableAttachmentListenerRepository.java\n\n@@ -24,6 +24,8 @@ package de.metas.attachments.listener;\n \n import com.google.common.collect.ImmutableList;\n import de.metas.cache.CCache;\n+import de.metas.i18n.AdMessageId;\n+import de.metas.javaclasses.JavaClassId;\n import de.metas.util.Services;\n import org.adempiere.ad.dao.IQueryBL;\n import org.adempiere.ad.table.api.AdTableId;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQzMDg3NQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6330#discussion_r390430875", "bodyText": "avoid ctors with a lot of params. Use lombok's @Builder", "author": "teosarca", "createdAt": "2020-03-10T16:07:39Z", "path": "de.metas.payment.esr/src/main/java/de/metas/payment/esr/api/RunESRImportCriteria.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * #%L\n+ * de.metas.payment.esr\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.payment.esr.api;\n+\n+import de.metas.attachments.AttachmentEntryId;\n+import de.metas.payment.esr.model.I_ESR_Import;\n+import de.metas.process.PInstanceId;\n+import de.metas.util.ILoggable;\n+import lombok.NonNull;\n+import lombok.Value;\n+\n+import javax.annotation.Nullable;\n+\n+@Value\n+public class RunESRImportCriteria", "originalCommit": "98cc4c406dd2ee9a08c128d2c03327f6dc845181", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1NzQ3NA==", "url": "https://github.com/metasfresh/metasfresh/pull/6330#discussion_r390457474", "bodyText": "also, we usually call this kind of classes Requests. In this case the name would be RunESRImportRequest.\nNot sure if it's the best name, but so far that's what we use.", "author": "teosarca", "createdAt": "2020-03-10T16:45:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQzMDg3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "1fd70ce2feda716b3bb6ff4eff767b618905c5f1", "chunk": "diff --git a/de.metas.payment.esr/src/main/java/de/metas/payment/esr/api/RunESRImportCriteria.java b/de.metas.payment.esr/src/main/java/de/metas/payment/esr/api/RunESRImportRequest.java\nsimilarity index 91%\nrename from de.metas.payment.esr/src/main/java/de/metas/payment/esr/api/RunESRImportCriteria.java\nrename to de.metas.payment.esr/src/main/java/de/metas/payment/esr/api/RunESRImportRequest.java\nindex be8889ece6..734ec95396 100644\n--- a/de.metas.payment.esr/src/main/java/de/metas/payment/esr/api/RunESRImportCriteria.java\n+++ b/de.metas.payment.esr/src/main/java/de/metas/payment/esr/api/RunESRImportRequest.java\n\n@@ -26,13 +26,15 @@ import de.metas.attachments.AttachmentEntryId;\n import de.metas.payment.esr.model.I_ESR_Import;\n import de.metas.process.PInstanceId;\n import de.metas.util.ILoggable;\n+import lombok.Builder;\n import lombok.NonNull;\n import lombok.Value;\n \n import javax.annotation.Nullable;\n \n @Value\n-public class RunESRImportCriteria\n+@Builder\n+public class RunESRImportRequest\n {\n \t@NonNull\n \tI_ESR_Import esrImport;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ0OTgxOQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6330#discussion_r390449819", "bodyText": "We use to call this methods something like 'retrieveAttachmentListenerSettings`.\nBasically we call it retrieve because they are retrieving (aka loading) from database.\ngetOrLoad is also misleading because we are always retrieving (aka loading).", "author": "teosarca", "createdAt": "2020-03-10T16:34:21Z", "path": "de.metas.adempiere.adempiere/base/src/main/java/de/metas/attachments/listener/TableAttachmentListenerRepository.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * #%L\n+ * de.metas.adempiere.adempiere.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.attachments.listener;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.cache.CCache;\n+import de.metas.util.Services;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.ad.table.api.AdTableId;\n+import org.adempiere.ad.trx.api.ITrx;\n+import org.compiere.model.I_AD_Table_AttachmentListener;\n+import org.compiere.util.Env;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public class TableAttachmentListenerRepository\n+{\n+\tprivate final CCache<AdTableId, ImmutableList<AttachmentListenerSettings>> cache = CCache.<AdTableId, ImmutableList<AttachmentListenerSettings>> builder()\n+\t\t\t.cacheName(\"listenersByAdTableId\")\n+\t\t\t.cacheMapType(CCache.CacheMapType.LRU)\n+\t\t\t.initialCapacity(100)\n+\t\t\t.tableName(I_AD_Table_AttachmentListener.Table_Name)\n+\t\t\t.build();\n+\n+\tpublic ImmutableList<AttachmentListenerSettings> findForId(final AdTableId adTableId)\n+\t{\n+\t\treturn cache.getOrLoad(adTableId, this::getOrLoad);\n+\t}\n+\n+\t/**\n+\t * Queries {@link I_AD_Table_AttachmentListener} for listeners linked to the given {@link AdTableId}.\n+\t *\n+\t * @param adTableId DB identifier of the table.\n+\t * @return list of {@link AttachmentListenerSettings} ordered by {@link I_AD_Table_AttachmentListener#getSeqNo()}.\n+\t */\n+\tprivate ImmutableList<AttachmentListenerSettings> getOrLoad(final AdTableId adTableId )", "originalCommit": "223d2bc46787132330d6486019efd9c99497b207", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1fd70ce2feda716b3bb6ff4eff767b618905c5f1", "chunk": "diff --git a/de.metas.adempiere.adempiere/base/src/main/java/de/metas/attachments/listener/TableAttachmentListenerRepository.java b/de.metas.adempiere.adempiere/base/src/main/java/de/metas/attachments/listener/TableAttachmentListenerRepository.java\nindex cbb4a8d7bc..99d452b8f1 100644\n--- a/de.metas.adempiere.adempiere/base/src/main/java/de/metas/attachments/listener/TableAttachmentListenerRepository.java\n+++ b/de.metas.adempiere.adempiere/base/src/main/java/de/metas/attachments/listener/TableAttachmentListenerRepository.java\n\n@@ -24,6 +24,8 @@ package de.metas.attachments.listener;\n \n import com.google.common.collect.ImmutableList;\n import de.metas.cache.CCache;\n+import de.metas.i18n.AdMessageId;\n+import de.metas.javaclasses.JavaClassId;\n import de.metas.util.Services;\n import org.adempiere.ad.dao.IQueryBL;\n import org.adempiere.ad.table.api.AdTableId;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1MTgyMg==", "url": "https://github.com/metasfresh/metasfresh/pull/6330#discussion_r390451822", "bodyText": "pls use @Interceptor (sorry, i have to deprecate @Validator)", "author": "teosarca", "createdAt": "2020-03-10T16:37:16Z", "path": "de.metas.adempiere.adempiere/base/src/main/java/org/adempiere/model/validator/AD_Table_AttachmentListener.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * #%L\n+ * de.metas.adempiere.adempiere.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package org.adempiere.model.validator;\n+\n+import org.adempiere.ad.modelvalidator.annotations.ModelChange;\n+import org.adempiere.ad.modelvalidator.annotations.Validator;\n+import org.adempiere.exceptions.AdempiereException;\n+import org.compiere.model.I_AD_Table_AttachmentListener;\n+import org.compiere.model.ModelValidator;\n+\n+@Validator(I_AD_Table_AttachmentListener.class)\n+public class AD_Table_AttachmentListener", "originalCommit": "223d2bc46787132330d6486019efd9c99497b207", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1fd70ce2feda716b3bb6ff4eff767b618905c5f1", "chunk": "diff --git a/de.metas.adempiere.adempiere/base/src/main/java/org/adempiere/model/validator/AD_Table_AttachmentListener.java b/de.metas.adempiere.adempiere/base/src/main/java/org/adempiere/model/validator/AD_Table_AttachmentListener.java\nindex 020c2eb457..28ae9f59ec 100644\n--- a/de.metas.adempiere.adempiere/base/src/main/java/org/adempiere/model/validator/AD_Table_AttachmentListener.java\n+++ b/de.metas.adempiere.adempiere/base/src/main/java/org/adempiere/model/validator/AD_Table_AttachmentListener.java\n\n@@ -22,13 +22,13 @@\n \n package org.adempiere.model.validator;\n \n+import org.adempiere.ad.modelvalidator.annotations.Interceptor;\n import org.adempiere.ad.modelvalidator.annotations.ModelChange;\n-import org.adempiere.ad.modelvalidator.annotations.Validator;\n import org.adempiere.exceptions.AdempiereException;\n import org.compiere.model.I_AD_Table_AttachmentListener;\n import org.compiere.model.ModelValidator;\n \n-@Validator(I_AD_Table_AttachmentListener.class)\n+@Interceptor(I_AD_Table_AttachmentListener.class)\n public class AD_Table_AttachmentListener\n {\n \t@ModelChange(timings = { ModelValidator.TYPE_BEFORE_NEW, ModelValidator.TYPE_BEFORE_CHANGE })\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1MzUwMw==", "url": "https://github.com/metasfresh/metasfresh/pull/6330#discussion_r390453503", "bodyText": "declare the Services.get(IESRImportBL.class) service as a class field", "author": "teosarca", "createdAt": "2020-03-10T16:39:42Z", "path": "de.metas.payment.esr/src/main/java/de/metas/payment/esr/listener/ESRImportAttachmentListener.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * #%L\n+ * de.metas.payment.esr\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.payment.esr.listener;\n+\n+import ch.qos.logback.classic.Level;\n+import de.metas.attachments.AttachmentEntry;\n+import de.metas.attachments.listener.AttachmentListener;\n+import de.metas.attachments.listener.AttachmentListenerSettings;\n+import de.metas.i18n.IADMessageDAO;\n+import de.metas.logging.LogManager;\n+import de.metas.notification.INotificationBL;\n+import de.metas.notification.UserNotificationRequest;\n+import de.metas.payment.esr.api.IESRImportBL;\n+import de.metas.payment.esr.api.RunESRImportCriteria;\n+import de.metas.payment.esr.model.I_ESR_Import;\n+import de.metas.util.Check;\n+import de.metas.util.Loggables;\n+import de.metas.util.Services;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.adempiere.util.lang.impl.TableRecordReference;\n+import org.compiere.model.I_AD_Table_AttachmentListener;\n+import org.compiere.util.Env;\n+import org.slf4j.Logger;\n+\n+import static de.metas.payment.esr.ESRConstants.ESR_ASYNC_BATCH_DESC;\n+import static de.metas.payment.esr.ESRConstants.ESR_ASYNC_BATCH_NAME;\n+\n+public class ESRImportAttachmentListener implements AttachmentListener\n+{\n+\tprivate static final Logger logger = LogManager.getLogger(ESRImportAttachmentListener.class);\n+\n+\t@Override\n+\tpublic void afterPersist(final AttachmentListenerSettings attachmentListenerSettings,\n+\t\t\t\t\t\t\tfinal AttachmentEntry attachmentEntry,\n+\t\t\t\t\t\t\tfinal TableRecordReference tableRecordReference)\n+\t{\n+\t\tfinal I_ESR_Import esrImport = InterfaceWrapperHelper.load(tableRecordReference.getRecord_ID(), I_ESR_Import.class);\n+\n+\t\tfinal RunESRImportCriteria runESRImportCriteria = new RunESRImportCriteria(esrImport,\n+\t\t\t\tattachmentEntry.getId(),\n+\t\t\t\tESR_ASYNC_BATCH_NAME,\n+\t\t\t\tESR_ASYNC_BATCH_DESC,\n+\t\t\t\tLoggables.withLogger(logger, Level.DEBUG),\n+\t\t\t\tnull);\n+\n+\t\tServices.get(IESRImportBL.class).runESRImportFor(runESRImportCriteria);", "originalCommit": "223d2bc46787132330d6486019efd9c99497b207", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1fd70ce2feda716b3bb6ff4eff767b618905c5f1", "chunk": "diff --git a/de.metas.payment.esr/src/main/java/de/metas/payment/esr/listener/ESRImportAttachmentListener.java b/de.metas.payment.esr/src/main/java/de/metas/payment/esr/listener/ESRImportAttachmentListener.java\nindex 2f438b27d9..eeb222e418 100644\n--- a/de.metas.payment.esr/src/main/java/de/metas/payment/esr/listener/ESRImportAttachmentListener.java\n+++ b/de.metas.payment.esr/src/main/java/de/metas/payment/esr/listener/ESRImportAttachmentListener.java\n\n@@ -25,21 +25,14 @@ package de.metas.payment.esr.listener;\n import ch.qos.logback.classic.Level;\n import de.metas.attachments.AttachmentEntry;\n import de.metas.attachments.listener.AttachmentListener;\n-import de.metas.attachments.listener.AttachmentListenerSettings;\n-import de.metas.i18n.IADMessageDAO;\n import de.metas.logging.LogManager;\n-import de.metas.notification.INotificationBL;\n-import de.metas.notification.UserNotificationRequest;\n import de.metas.payment.esr.api.IESRImportBL;\n-import de.metas.payment.esr.api.RunESRImportCriteria;\n+import de.metas.payment.esr.api.RunESRImportRequest;\n import de.metas.payment.esr.model.I_ESR_Import;\n-import de.metas.util.Check;\n import de.metas.util.Loggables;\n import de.metas.util.Services;\n import org.adempiere.model.InterfaceWrapperHelper;\n import org.adempiere.util.lang.impl.TableRecordReference;\n-import org.compiere.model.I_AD_Table_AttachmentListener;\n-import org.compiere.util.Env;\n import org.slf4j.Logger;\n \n import static de.metas.payment.esr.ESRConstants.ESR_ASYNC_BATCH_DESC;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1NDYyMw==", "url": "https://github.com/metasfresh/metasfresh/pull/6330#discussion_r390454623", "bodyText": "objects shall be valid when u construct them.\nPls do this calidation when u construct AttachmentListenerSettings.\nHere i expect to be valid.", "author": "teosarca", "createdAt": "2020-03-10T16:41:22Z", "path": "de.metas.payment.esr/src/main/java/de/metas/payment/esr/listener/ESRImportAttachmentListener.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * #%L\n+ * de.metas.payment.esr\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.payment.esr.listener;\n+\n+import ch.qos.logback.classic.Level;\n+import de.metas.attachments.AttachmentEntry;\n+import de.metas.attachments.listener.AttachmentListener;\n+import de.metas.attachments.listener.AttachmentListenerSettings;\n+import de.metas.i18n.IADMessageDAO;\n+import de.metas.logging.LogManager;\n+import de.metas.notification.INotificationBL;\n+import de.metas.notification.UserNotificationRequest;\n+import de.metas.payment.esr.api.IESRImportBL;\n+import de.metas.payment.esr.api.RunESRImportCriteria;\n+import de.metas.payment.esr.model.I_ESR_Import;\n+import de.metas.util.Check;\n+import de.metas.util.Loggables;\n+import de.metas.util.Services;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.adempiere.util.lang.impl.TableRecordReference;\n+import org.compiere.model.I_AD_Table_AttachmentListener;\n+import org.compiere.util.Env;\n+import org.slf4j.Logger;\n+\n+import static de.metas.payment.esr.ESRConstants.ESR_ASYNC_BATCH_DESC;\n+import static de.metas.payment.esr.ESRConstants.ESR_ASYNC_BATCH_NAME;\n+\n+public class ESRImportAttachmentListener implements AttachmentListener\n+{\n+\tprivate static final Logger logger = LogManager.getLogger(ESRImportAttachmentListener.class);\n+\n+\t@Override\n+\tpublic void afterPersist(final AttachmentListenerSettings attachmentListenerSettings,\n+\t\t\t\t\t\t\tfinal AttachmentEntry attachmentEntry,\n+\t\t\t\t\t\t\tfinal TableRecordReference tableRecordReference)\n+\t{\n+\t\tfinal I_ESR_Import esrImport = InterfaceWrapperHelper.load(tableRecordReference.getRecord_ID(), I_ESR_Import.class);\n+\n+\t\tfinal RunESRImportCriteria runESRImportCriteria = new RunESRImportCriteria(esrImport,\n+\t\t\t\tattachmentEntry.getId(),\n+\t\t\t\tESR_ASYNC_BATCH_NAME,\n+\t\t\t\tESR_ASYNC_BATCH_DESC,\n+\t\t\t\tLoggables.withLogger(logger, Level.DEBUG),\n+\t\t\t\tnull);\n+\n+\t\tServices.get(IESRImportBL.class).runESRImportFor(runESRImportCriteria);\n+\n+\t\tnotifyUser(attachmentListenerSettings, tableRecordReference);\n+\t}\n+\n+\t/**\n+\t *  Notifies the user about the process finalizing work if {@link AttachmentListenerSettings#isSendNotification()}\n+\t *\n+\t * @param attachmentListenerSettings\tdata from {@link I_AD_Table_AttachmentListener}\n+\t * @param tableRecordReference\t\t\treference of the table\n+\t */\n+\tprivate void notifyUser(final AttachmentListenerSettings attachmentListenerSettings,\n+\t\t\t\t\t\t\tfinal TableRecordReference tableRecordReference)\n+\t{\n+\t\tif ( attachmentListenerSettings.isSendNotification() )\n+\t\t{\n+\n+\t\t\t //see org.adempiere.model.validator.AD_Table_AttachmentListener#beforeSave(I_AD_Table_AttachmentListener)\n+\t\t\tCheck.assumeNotNull(attachmentListenerSettings.getAdMessageId(),", "originalCommit": "223d2bc46787132330d6486019efd9c99497b207", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1fd70ce2feda716b3bb6ff4eff767b618905c5f1", "chunk": "diff --git a/de.metas.payment.esr/src/main/java/de/metas/payment/esr/listener/ESRImportAttachmentListener.java b/de.metas.payment.esr/src/main/java/de/metas/payment/esr/listener/ESRImportAttachmentListener.java\nindex 2f438b27d9..eeb222e418 100644\n--- a/de.metas.payment.esr/src/main/java/de/metas/payment/esr/listener/ESRImportAttachmentListener.java\n+++ b/de.metas.payment.esr/src/main/java/de/metas/payment/esr/listener/ESRImportAttachmentListener.java\n\n@@ -25,21 +25,14 @@ package de.metas.payment.esr.listener;\n import ch.qos.logback.classic.Level;\n import de.metas.attachments.AttachmentEntry;\n import de.metas.attachments.listener.AttachmentListener;\n-import de.metas.attachments.listener.AttachmentListenerSettings;\n-import de.metas.i18n.IADMessageDAO;\n import de.metas.logging.LogManager;\n-import de.metas.notification.INotificationBL;\n-import de.metas.notification.UserNotificationRequest;\n import de.metas.payment.esr.api.IESRImportBL;\n-import de.metas.payment.esr.api.RunESRImportCriteria;\n+import de.metas.payment.esr.api.RunESRImportRequest;\n import de.metas.payment.esr.model.I_ESR_Import;\n-import de.metas.util.Check;\n import de.metas.util.Loggables;\n import de.metas.util.Services;\n import org.adempiere.model.InterfaceWrapperHelper;\n import org.adempiere.util.lang.impl.TableRecordReference;\n-import org.compiere.model.I_AD_Table_AttachmentListener;\n-import org.compiere.util.Env;\n import org.slf4j.Logger;\n \n import static de.metas.payment.esr.ESRConstants.ESR_ASYNC_BATCH_DESC;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1NjEzMA==", "url": "https://github.com/metasfresh/metasfresh/pull/6330#discussion_r390456130", "bodyText": "wondering why not  having the adMessageContentValue in AttachmentListenerSettings instead of AdMessageId?\nI know it's a bit in the gray zone....\nBtw, in that case, u could use AdMessageKey (was newly introduced).", "author": "teosarca", "createdAt": "2020-03-10T16:43:32Z", "path": "de.metas.payment.esr/src/main/java/de/metas/payment/esr/listener/ESRImportAttachmentListener.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * #%L\n+ * de.metas.payment.esr\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.payment.esr.listener;\n+\n+import ch.qos.logback.classic.Level;\n+import de.metas.attachments.AttachmentEntry;\n+import de.metas.attachments.listener.AttachmentListener;\n+import de.metas.attachments.listener.AttachmentListenerSettings;\n+import de.metas.i18n.IADMessageDAO;\n+import de.metas.logging.LogManager;\n+import de.metas.notification.INotificationBL;\n+import de.metas.notification.UserNotificationRequest;\n+import de.metas.payment.esr.api.IESRImportBL;\n+import de.metas.payment.esr.api.RunESRImportCriteria;\n+import de.metas.payment.esr.model.I_ESR_Import;\n+import de.metas.util.Check;\n+import de.metas.util.Loggables;\n+import de.metas.util.Services;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.adempiere.util.lang.impl.TableRecordReference;\n+import org.compiere.model.I_AD_Table_AttachmentListener;\n+import org.compiere.util.Env;\n+import org.slf4j.Logger;\n+\n+import static de.metas.payment.esr.ESRConstants.ESR_ASYNC_BATCH_DESC;\n+import static de.metas.payment.esr.ESRConstants.ESR_ASYNC_BATCH_NAME;\n+\n+public class ESRImportAttachmentListener implements AttachmentListener\n+{\n+\tprivate static final Logger logger = LogManager.getLogger(ESRImportAttachmentListener.class);\n+\n+\t@Override\n+\tpublic void afterPersist(final AttachmentListenerSettings attachmentListenerSettings,\n+\t\t\t\t\t\t\tfinal AttachmentEntry attachmentEntry,\n+\t\t\t\t\t\t\tfinal TableRecordReference tableRecordReference)\n+\t{\n+\t\tfinal I_ESR_Import esrImport = InterfaceWrapperHelper.load(tableRecordReference.getRecord_ID(), I_ESR_Import.class);\n+\n+\t\tfinal RunESRImportCriteria runESRImportCriteria = new RunESRImportCriteria(esrImport,\n+\t\t\t\tattachmentEntry.getId(),\n+\t\t\t\tESR_ASYNC_BATCH_NAME,\n+\t\t\t\tESR_ASYNC_BATCH_DESC,\n+\t\t\t\tLoggables.withLogger(logger, Level.DEBUG),\n+\t\t\t\tnull);\n+\n+\t\tServices.get(IESRImportBL.class).runESRImportFor(runESRImportCriteria);\n+\n+\t\tnotifyUser(attachmentListenerSettings, tableRecordReference);\n+\t}\n+\n+\t/**\n+\t *  Notifies the user about the process finalizing work if {@link AttachmentListenerSettings#isSendNotification()}\n+\t *\n+\t * @param attachmentListenerSettings\tdata from {@link I_AD_Table_AttachmentListener}\n+\t * @param tableRecordReference\t\t\treference of the table\n+\t */\n+\tprivate void notifyUser(final AttachmentListenerSettings attachmentListenerSettings,\n+\t\t\t\t\t\t\tfinal TableRecordReference tableRecordReference)\n+\t{\n+\t\tif ( attachmentListenerSettings.isSendNotification() )\n+\t\t{\n+\n+\t\t\t //see org.adempiere.model.validator.AD_Table_AttachmentListener#beforeSave(I_AD_Table_AttachmentListener)\n+\t\t\tCheck.assumeNotNull(attachmentListenerSettings.getAdMessageId(),\n+\t\t\t\t\t\"An AD_Message_ID must be present when notifications are enabled.\");\n+\n+\t\t\tfinal String adMessageContent = Services.get(IADMessageDAO.class)\n+\t\t\t\t\t.retrieveValueById( attachmentListenerSettings.getAdMessageId().getRepoId() );", "originalCommit": "223d2bc46787132330d6486019efd9c99497b207", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1fd70ce2feda716b3bb6ff4eff767b618905c5f1", "chunk": "diff --git a/de.metas.payment.esr/src/main/java/de/metas/payment/esr/listener/ESRImportAttachmentListener.java b/de.metas.payment.esr/src/main/java/de/metas/payment/esr/listener/ESRImportAttachmentListener.java\nindex 2f438b27d9..eeb222e418 100644\n--- a/de.metas.payment.esr/src/main/java/de/metas/payment/esr/listener/ESRImportAttachmentListener.java\n+++ b/de.metas.payment.esr/src/main/java/de/metas/payment/esr/listener/ESRImportAttachmentListener.java\n\n@@ -25,21 +25,14 @@ package de.metas.payment.esr.listener;\n import ch.qos.logback.classic.Level;\n import de.metas.attachments.AttachmentEntry;\n import de.metas.attachments.listener.AttachmentListener;\n-import de.metas.attachments.listener.AttachmentListenerSettings;\n-import de.metas.i18n.IADMessageDAO;\n import de.metas.logging.LogManager;\n-import de.metas.notification.INotificationBL;\n-import de.metas.notification.UserNotificationRequest;\n import de.metas.payment.esr.api.IESRImportBL;\n-import de.metas.payment.esr.api.RunESRImportCriteria;\n+import de.metas.payment.esr.api.RunESRImportRequest;\n import de.metas.payment.esr.model.I_ESR_Import;\n-import de.metas.util.Check;\n import de.metas.util.Loggables;\n import de.metas.util.Services;\n import org.adempiere.model.InterfaceWrapperHelper;\n import org.adempiere.util.lang.impl.TableRecordReference;\n-import org.compiere.model.I_AD_Table_AttachmentListener;\n-import org.compiere.util.Env;\n import org.slf4j.Logger;\n \n import static de.metas.payment.esr.ESRConstants.ESR_ASYNC_BATCH_DESC;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1NjMzNA==", "url": "https://github.com/metasfresh/metasfresh/pull/6330#discussion_r390456334", "bodyText": "extract service as a field", "author": "teosarca", "createdAt": "2020-03-10T16:43:47Z", "path": "de.metas.payment.esr/src/main/java/de/metas/payment/esr/listener/ESRImportAttachmentListener.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * #%L\n+ * de.metas.payment.esr\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.payment.esr.listener;\n+\n+import ch.qos.logback.classic.Level;\n+import de.metas.attachments.AttachmentEntry;\n+import de.metas.attachments.listener.AttachmentListener;\n+import de.metas.attachments.listener.AttachmentListenerSettings;\n+import de.metas.i18n.IADMessageDAO;\n+import de.metas.logging.LogManager;\n+import de.metas.notification.INotificationBL;\n+import de.metas.notification.UserNotificationRequest;\n+import de.metas.payment.esr.api.IESRImportBL;\n+import de.metas.payment.esr.api.RunESRImportCriteria;\n+import de.metas.payment.esr.model.I_ESR_Import;\n+import de.metas.util.Check;\n+import de.metas.util.Loggables;\n+import de.metas.util.Services;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.adempiere.util.lang.impl.TableRecordReference;\n+import org.compiere.model.I_AD_Table_AttachmentListener;\n+import org.compiere.util.Env;\n+import org.slf4j.Logger;\n+\n+import static de.metas.payment.esr.ESRConstants.ESR_ASYNC_BATCH_DESC;\n+import static de.metas.payment.esr.ESRConstants.ESR_ASYNC_BATCH_NAME;\n+\n+public class ESRImportAttachmentListener implements AttachmentListener\n+{\n+\tprivate static final Logger logger = LogManager.getLogger(ESRImportAttachmentListener.class);\n+\n+\t@Override\n+\tpublic void afterPersist(final AttachmentListenerSettings attachmentListenerSettings,\n+\t\t\t\t\t\t\tfinal AttachmentEntry attachmentEntry,\n+\t\t\t\t\t\t\tfinal TableRecordReference tableRecordReference)\n+\t{\n+\t\tfinal I_ESR_Import esrImport = InterfaceWrapperHelper.load(tableRecordReference.getRecord_ID(), I_ESR_Import.class);\n+\n+\t\tfinal RunESRImportCriteria runESRImportCriteria = new RunESRImportCriteria(esrImport,\n+\t\t\t\tattachmentEntry.getId(),\n+\t\t\t\tESR_ASYNC_BATCH_NAME,\n+\t\t\t\tESR_ASYNC_BATCH_DESC,\n+\t\t\t\tLoggables.withLogger(logger, Level.DEBUG),\n+\t\t\t\tnull);\n+\n+\t\tServices.get(IESRImportBL.class).runESRImportFor(runESRImportCriteria);\n+\n+\t\tnotifyUser(attachmentListenerSettings, tableRecordReference);\n+\t}\n+\n+\t/**\n+\t *  Notifies the user about the process finalizing work if {@link AttachmentListenerSettings#isSendNotification()}\n+\t *\n+\t * @param attachmentListenerSettings\tdata from {@link I_AD_Table_AttachmentListener}\n+\t * @param tableRecordReference\t\t\treference of the table\n+\t */\n+\tprivate void notifyUser(final AttachmentListenerSettings attachmentListenerSettings,\n+\t\t\t\t\t\t\tfinal TableRecordReference tableRecordReference)\n+\t{\n+\t\tif ( attachmentListenerSettings.isSendNotification() )\n+\t\t{\n+\n+\t\t\t //see org.adempiere.model.validator.AD_Table_AttachmentListener#beforeSave(I_AD_Table_AttachmentListener)\n+\t\t\tCheck.assumeNotNull(attachmentListenerSettings.getAdMessageId(),\n+\t\t\t\t\t\"An AD_Message_ID must be present when notifications are enabled.\");\n+\n+\t\t\tfinal String adMessageContent = Services.get(IADMessageDAO.class)\n+\t\t\t\t\t.retrieveValueById( attachmentListenerSettings.getAdMessageId().getRepoId() );\n+\n+\t\t\tfinal UserNotificationRequest userNotificationRequest = UserNotificationRequest.builder()\n+\t\t\t\t\t.contentADMessage(adMessageContent)\n+\t\t\t\t\t.recipientUserId( Env.getLoggedUserId() )\n+\t\t\t\t\t.targetAction( UserNotificationRequest.TargetRecordAction.of(tableRecordReference) )\n+\t\t\t\t\t.build();\n+\t\t\tServices.get(INotificationBL.class).send(userNotificationRequest);", "originalCommit": "223d2bc46787132330d6486019efd9c99497b207", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1fd70ce2feda716b3bb6ff4eff767b618905c5f1", "chunk": "diff --git a/de.metas.payment.esr/src/main/java/de/metas/payment/esr/listener/ESRImportAttachmentListener.java b/de.metas.payment.esr/src/main/java/de/metas/payment/esr/listener/ESRImportAttachmentListener.java\nindex 2f438b27d9..eeb222e418 100644\n--- a/de.metas.payment.esr/src/main/java/de/metas/payment/esr/listener/ESRImportAttachmentListener.java\n+++ b/de.metas.payment.esr/src/main/java/de/metas/payment/esr/listener/ESRImportAttachmentListener.java\n\n@@ -25,21 +25,14 @@ package de.metas.payment.esr.listener;\n import ch.qos.logback.classic.Level;\n import de.metas.attachments.AttachmentEntry;\n import de.metas.attachments.listener.AttachmentListener;\n-import de.metas.attachments.listener.AttachmentListenerSettings;\n-import de.metas.i18n.IADMessageDAO;\n import de.metas.logging.LogManager;\n-import de.metas.notification.INotificationBL;\n-import de.metas.notification.UserNotificationRequest;\n import de.metas.payment.esr.api.IESRImportBL;\n-import de.metas.payment.esr.api.RunESRImportCriteria;\n+import de.metas.payment.esr.api.RunESRImportRequest;\n import de.metas.payment.esr.model.I_ESR_Import;\n-import de.metas.util.Check;\n import de.metas.util.Loggables;\n import de.metas.util.Services;\n import org.adempiere.model.InterfaceWrapperHelper;\n import org.adempiere.util.lang.impl.TableRecordReference;\n-import org.compiere.model.I_AD_Table_AttachmentListener;\n-import org.compiere.util.Env;\n import org.slf4j.Logger;\n \n import static de.metas.payment.esr.ESRConstants.ESR_ASYNC_BATCH_DESC;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1ODEyNw==", "url": "https://github.com/metasfresh/metasfresh/pull/6330#discussion_r390458127", "bodyText": "Instead of runESRImportFor woundering if it wouldn't be better to call it scheduleESRImport.\nschedule because it's gonna happen async.", "author": "teosarca", "createdAt": "2020-03-10T16:46:24Z", "path": "de.metas.payment.esr/src/main/java/de/metas/payment/esr/api/impl/ESRImportBL.java", "diffHunk": "@@ -1248,6 +1232,26 @@ public void unlinkESRImportLinesFor(final I_C_BankStatementLine_Ref bankStatemen\n \t\t}\n \t}\n \n+\tpublic void runESRImportFor(final RunESRImportCriteria runESRImportCriteria)", "originalCommit": "223d2bc46787132330d6486019efd9c99497b207", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1fd70ce2feda716b3bb6ff4eff767b618905c5f1", "chunk": "diff --git a/de.metas.payment.esr/src/main/java/de/metas/payment/esr/api/impl/ESRImportBL.java b/de.metas.payment.esr/src/main/java/de/metas/payment/esr/api/impl/ESRImportBL.java\nindex ee196623f4..abf70beacd 100644\n--- a/de.metas.payment.esr/src/main/java/de/metas/payment/esr/api/impl/ESRImportBL.java\n+++ b/de.metas.payment.esr/src/main/java/de/metas/payment/esr/api/impl/ESRImportBL.java\n\n@@ -1232,22 +1251,22 @@ public class ESRImportBL implements IESRImportBL\n \t\t}\n \t}\n \n-\tpublic void runESRImportFor(final RunESRImportCriteria runESRImportCriteria)\n+\tpublic void scheduleESRImportFor(final RunESRImportRequest runESRImportRequest)\n \t{\n-\t\tfinal AttachmentEntry fromAttachmentEntry = attachmentEntryService.getById(runESRImportCriteria.getAttachmentEntryId());\n+\t\tfinal AttachmentEntry fromAttachmentEntry = attachmentEntryService.getById(runESRImportRequest.getAttachmentEntryId());\n \n \t\tESRImportEnqueuer.newInstance()\n-\t\t\t\t.esrImport(runESRImportCriteria.getEsrImport())\n+\t\t\t\t.esrImport(runESRImportRequest.getEsrImport())\n \t\t\t\t.fromDataSource(\n \t\t\t\t\t\tESRImportEnqueuerDataSource.builder()\n \t\t\t\t\t\t\t\t.filename(fromAttachmentEntry.getFilename())\n \t\t\t\t\t\t\t\t.content(attachmentEntryService.retrieveData(fromAttachmentEntry.getId()))\n \t\t\t\t\t\t\t\t.attachmentEntryId(fromAttachmentEntry.getId())\n \t\t\t\t\t\t\t\t.build())\n-\t\t\t\t.asyncBatchName(runESRImportCriteria.getAsyncBatchName())\n-\t\t\t\t.asyncBatchDesc(runESRImportCriteria.getAsyncBatchDesc())\n-\t\t\t\t.pinstanceId(runESRImportCriteria.getPInstanceId())\n-\t\t\t\t.loggable(runESRImportCriteria.getLoggableClass())\n+\t\t\t\t.asyncBatchName(runESRImportRequest.getAsyncBatchName())\n+\t\t\t\t.asyncBatchDesc(runESRImportRequest.getAsyncBatchDescription())\n+\t\t\t\t.pinstanceId(runESRImportRequest.getPInstanceId())\n+\t\t\t\t.loggable(runESRImportRequest.getLoggable())\n \t\t\t\t.duplicateFilePolicy(ESRImportEnqueuerDuplicateFilePolicy.NEVER)\n \t\t\t\t.execute();\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1ODU1OQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6330#discussion_r390458559", "bodyText": "avoid star imports.", "author": "teosarca", "createdAt": "2020-03-10T16:47:00Z", "path": "de.metas.payment.esr/src/main/java/de/metas/payment/esr/api/impl/ESRImportBL.java", "diffHunk": "@@ -86,6 +35,41 @@\n import de.metas.util.Check;\n import de.metas.util.Services;\n import lombok.NonNull;\n+import org.adempiere.ad.trx.api.ITrx;\n+import org.adempiere.ad.trx.api.ITrxManager;\n+import org.adempiere.ad.trx.api.OnTrxMissingPolicy;\n+import org.adempiere.exceptions.AdempiereException;\n+import org.adempiere.exceptions.PeriodClosedException;\n+import org.adempiere.invoice.service.IInvoiceBL;\n+import org.adempiere.invoice.service.IInvoiceDAO;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.adempiere.service.ISysConfigBL;\n+import org.adempiere.util.lang.IMutable;\n+import org.adempiere.util.lang.Mutable;\n+import org.compiere.acct.Doc;\n+import org.compiere.model.I_C_BPartner;\n+import org.compiere.model.I_C_Invoice;\n+import org.compiere.model.I_C_Payment;\n+import org.compiere.model.MAllocationHdr;\n+import org.compiere.util.Env;\n+import org.compiere.util.TimeUtil;\n+import org.compiere.util.TrxRunnable;\n+import org.compiere.util.Util;\n+import org.compiere.util.Util.ArrayKey;\n+import org.slf4j.Logger;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.math.BigDecimal;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.*;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import static org.adempiere.model.InterfaceWrapperHelper.*;", "originalCommit": "223d2bc46787132330d6486019efd9c99497b207", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1fd70ce2feda716b3bb6ff4eff767b618905c5f1", "chunk": "diff --git a/de.metas.payment.esr/src/main/java/de/metas/payment/esr/api/impl/ESRImportBL.java b/de.metas.payment.esr/src/main/java/de/metas/payment/esr/api/impl/ESRImportBL.java\nindex ee196623f4..abf70beacd 100644\n--- a/de.metas.payment.esr/src/main/java/de/metas/payment/esr/api/impl/ESRImportBL.java\n+++ b/de.metas.payment.esr/src/main/java/de/metas/payment/esr/api/impl/ESRImportBL.java\n\n@@ -66,10 +73,22 @@ import java.io.InputStream;\n import java.math.BigDecimal;\n import java.security.MessageDigest;\n import java.security.NoSuchAlgorithmException;\n-import java.util.*;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Properties;\n+import java.util.Set;\n import java.util.concurrent.ConcurrentHashMap;\n \n-import static org.adempiere.model.InterfaceWrapperHelper.*;\n+import static org.adempiere.model.InterfaceWrapperHelper.create;\n+import static org.adempiere.model.InterfaceWrapperHelper.getCtx;\n+import static org.adempiere.model.InterfaceWrapperHelper.getTrxName;\n+import static org.adempiere.model.InterfaceWrapperHelper.loadOutOfTrx;\n+import static org.adempiere.model.InterfaceWrapperHelper.refresh;\n+import static org.adempiere.model.InterfaceWrapperHelper.save;\n \n @Service\n public class ESRImportBL implements IESRImportBL\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1OTIyNw==", "url": "https://github.com/metasfresh/metasfresh/pull/6330#discussion_r390459227", "bodyText": "call it loggable. The Class is misleading.", "author": "teosarca", "createdAt": "2020-03-10T16:48:04Z", "path": "de.metas.payment.esr/src/main/java/de/metas/payment/esr/api/RunESRImportCriteria.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * #%L\n+ * de.metas.payment.esr\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.payment.esr.api;\n+\n+import de.metas.attachments.AttachmentEntryId;\n+import de.metas.payment.esr.model.I_ESR_Import;\n+import de.metas.process.PInstanceId;\n+import de.metas.util.ILoggable;\n+import lombok.NonNull;\n+import lombok.Value;\n+\n+import javax.annotation.Nullable;\n+\n+@Value\n+public class RunESRImportCriteria\n+{\n+\t@NonNull\n+\tI_ESR_Import esrImport;\n+\n+\t@NonNull\n+\tAttachmentEntryId attachmentEntryId;\n+\n+\t@NonNull\n+\tString asyncBatchName;\n+\n+\t@NonNull\n+\tString asyncBatchDesc;\n+\n+\t@NonNull\n+\tILoggable loggableClass;", "originalCommit": "223d2bc46787132330d6486019efd9c99497b207", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1fd70ce2feda716b3bb6ff4eff767b618905c5f1", "chunk": "diff --git a/de.metas.payment.esr/src/main/java/de/metas/payment/esr/api/RunESRImportCriteria.java b/de.metas.payment.esr/src/main/java/de/metas/payment/esr/api/RunESRImportRequest.java\nsimilarity index 91%\nrename from de.metas.payment.esr/src/main/java/de/metas/payment/esr/api/RunESRImportCriteria.java\nrename to de.metas.payment.esr/src/main/java/de/metas/payment/esr/api/RunESRImportRequest.java\nindex be8889ece6..734ec95396 100644\n--- a/de.metas.payment.esr/src/main/java/de/metas/payment/esr/api/RunESRImportCriteria.java\n+++ b/de.metas.payment.esr/src/main/java/de/metas/payment/esr/api/RunESRImportRequest.java\n\n@@ -26,13 +26,15 @@ import de.metas.attachments.AttachmentEntryId;\n import de.metas.payment.esr.model.I_ESR_Import;\n import de.metas.process.PInstanceId;\n import de.metas.util.ILoggable;\n+import lombok.Builder;\n import lombok.NonNull;\n import lombok.Value;\n \n import javax.annotation.Nullable;\n \n @Value\n-public class RunESRImportCriteria\n+@Builder\n+public class RunESRImportRequest\n {\n \t@NonNull\n \tI_ESR_Import esrImport;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1OTk2MQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6330#discussion_r390459961", "bodyText": "my ODD would like to call it asyncBatchDescription", "author": "teosarca", "createdAt": "2020-03-10T16:49:06Z", "path": "de.metas.payment.esr/src/main/java/de/metas/payment/esr/api/RunESRImportCriteria.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * #%L\n+ * de.metas.payment.esr\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.payment.esr.api;\n+\n+import de.metas.attachments.AttachmentEntryId;\n+import de.metas.payment.esr.model.I_ESR_Import;\n+import de.metas.process.PInstanceId;\n+import de.metas.util.ILoggable;\n+import lombok.NonNull;\n+import lombok.Value;\n+\n+import javax.annotation.Nullable;\n+\n+@Value\n+public class RunESRImportCriteria\n+{\n+\t@NonNull\n+\tI_ESR_Import esrImport;\n+\n+\t@NonNull\n+\tAttachmentEntryId attachmentEntryId;\n+\n+\t@NonNull\n+\tString asyncBatchName;\n+\n+\t@NonNull\n+\tString asyncBatchDesc;", "originalCommit": "223d2bc46787132330d6486019efd9c99497b207", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ2MDA5NA==", "url": "https://github.com/metasfresh/metasfresh/pull/6330#discussion_r390460094", "bodyText": ":)", "author": "teosarca", "createdAt": "2020-03-10T16:49:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1OTk2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "1fd70ce2feda716b3bb6ff4eff767b618905c5f1", "chunk": "diff --git a/de.metas.payment.esr/src/main/java/de/metas/payment/esr/api/RunESRImportCriteria.java b/de.metas.payment.esr/src/main/java/de/metas/payment/esr/api/RunESRImportRequest.java\nsimilarity index 91%\nrename from de.metas.payment.esr/src/main/java/de/metas/payment/esr/api/RunESRImportCriteria.java\nrename to de.metas.payment.esr/src/main/java/de/metas/payment/esr/api/RunESRImportRequest.java\nindex be8889ece6..734ec95396 100644\n--- a/de.metas.payment.esr/src/main/java/de/metas/payment/esr/api/RunESRImportCriteria.java\n+++ b/de.metas.payment.esr/src/main/java/de/metas/payment/esr/api/RunESRImportRequest.java\n\n@@ -26,13 +26,15 @@ import de.metas.attachments.AttachmentEntryId;\n import de.metas.payment.esr.model.I_ESR_Import;\n import de.metas.process.PInstanceId;\n import de.metas.util.ILoggable;\n+import lombok.Builder;\n import lombok.NonNull;\n import lombok.Value;\n \n import javax.annotation.Nullable;\n \n @Value\n-public class RunESRImportCriteria\n+@Builder\n+public class RunESRImportRequest\n {\n \t@NonNull\n \tI_ESR_Import esrImport;\n"}}, {"oid": "1fd70ce2feda716b3bb6ff4eff767b618905c5f1", "url": "https://github.com/metasfresh/metasfresh/commit/1fd70ce2feda716b3bb6ff4eff767b618905c5f1", "message": "applied suggested changes\nhttps://github.com/metasfresh/metasfresh/issues/6223", "committedDate": "2020-03-11T10:04:08Z", "type": "commit"}, {"oid": "df58128d439b678343bed39dab5d38a26b555952", "url": "https://github.com/metasfresh/metasfresh/commit/df58128d439b678343bed39dab5d38a26b555952", "message": "unit tests + refactor\nhttps://github.com/metasfresh/metasfresh/issues/6328", "committedDate": "2020-03-12T15:25:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU1MjY3OQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6330#discussion_r391552679", "bodyText": "pls annotate with @NonNull; makes for much more helpful NPEs", "author": "metas-ts", "createdAt": "2020-03-12T11:16:28Z", "path": "de.metas.adempiere.adempiere/base/src/main/java/de/metas/attachments/listener/TableAttachmentListenerRepository.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * #%L\n+ * de.metas.adempiere.adempiere.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.attachments.listener;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.cache.CCache;\n+import de.metas.i18n.AdMessageId;\n+import de.metas.javaclasses.JavaClassId;\n+import de.metas.util.Services;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.ad.table.api.AdTableId;\n+import org.adempiere.ad.trx.api.ITrx;\n+import org.compiere.model.I_AD_Table_AttachmentListener;\n+import org.compiere.util.Env;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public class TableAttachmentListenerRepository\n+{\n+\tprivate final CCache<AdTableId, ImmutableList<AttachmentListenerSettings>> cache = CCache.<AdTableId, ImmutableList<AttachmentListenerSettings>> builder()\n+\t\t\t.cacheName(\"listenersByAdTableId\")\n+\t\t\t.cacheMapType(CCache.CacheMapType.LRU)\n+\t\t\t.initialCapacity(100)\n+\t\t\t.tableName(I_AD_Table_AttachmentListener.Table_Name)\n+\t\t\t.build();\n+\n+\tpublic ImmutableList<AttachmentListenerSettings> getById(final AdTableId adTableId)", "originalCommit": "1fd70ce2feda716b3bb6ff4eff767b618905c5f1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8c518bd408472d41ccb3aa488a01a0361f736ee7", "chunk": "diff --git a/de.metas.adempiere.adempiere/base/src/main/java/de/metas/attachments/listener/TableAttachmentListenerRepository.java b/de.metas.adempiere.adempiere/base/src/main/java/de/metas/attachments/listener/TableAttachmentListenerRepository.java\nindex 99d452b8f1..1909184277 100644\n--- a/de.metas.adempiere.adempiere/base/src/main/java/de/metas/attachments/listener/TableAttachmentListenerRepository.java\n+++ b/de.metas.adempiere.adempiere/base/src/main/java/de/metas/attachments/listener/TableAttachmentListenerRepository.java\n\n@@ -27,6 +27,7 @@ import de.metas.cache.CCache;\n import de.metas.i18n.AdMessageId;\n import de.metas.javaclasses.JavaClassId;\n import de.metas.util.Services;\n+import lombok.NonNull;\n import org.adempiere.ad.dao.IQueryBL;\n import org.adempiere.ad.table.api.AdTableId;\n import org.adempiere.ad.trx.api.ITrx;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcxMjUzNQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6330#discussion_r391712535", "bodyText": "\ud83d\udc4d", "author": "metas-ts", "createdAt": "2020-03-12T15:45:29Z", "path": "de.metas.business/src/main/java/org/adempiere/model/validator/AdempiereBaseValidator.java", "diffHunk": "@@ -140,7 +138,6 @@ protected void registerInterceptors(final IModelValidationEngine engine, final I\n \n \t\tengine.addModelValidator(de.metas.system.interceptor.AD_System.INSTANCE, client);\n \n-\t\tengine.addModelValidator(new org.adempiere.model.validator.AD_Table_AttachmentListener(), client);", "originalCommit": "df58128d439b678343bed39dab5d38a26b555952", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcxMzk0Ng==", "url": "https://github.com/metasfresh/metasfresh/pull/6330#discussion_r391713946", "bodyText": "pls move to test/main/java..or even add it to the test as inner class if you want", "author": "metas-ts", "createdAt": "2020-03-12T15:47:33Z", "path": "de.metas.adempiere.adempiere/base/src/main/java/de/metas/attachments/listener/DumbAttachmentListener.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * #%L\n+ * de.metas.adempiere.adempiere.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.attachments.listener;\n+\n+import de.metas.attachments.AttachmentEntry;\n+import org.adempiere.util.lang.impl.TableRecordReference;\n+\n+import static de.metas.attachments.listener.AttachmentListenerConstants.ListenerWorkStatus.SUCCESS;\n+\n+/**\n+ *  Dumb attachment listener; created only for test purposes.\n+ */\n+public class DumbAttachmentListener implements AttachmentListener", "originalCommit": "df58128d439b678343bed39dab5d38a26b555952", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcxNDcyMw==", "url": "https://github.com/metasfresh/metasfresh/pull/6330#discussion_r391714723", "bodyText": "annotate with @NonNull", "author": "metas-ts", "createdAt": "2020-03-12T15:48:42Z", "path": "de.metas.adempiere.adempiere/base/src/main/java/de/metas/attachments/listener/TableAttachmentListenerService.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * #%L\n+ * de.metas.adempiere.adempiere.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.attachments.listener;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableList;\n+import de.metas.attachments.AttachmentEntry;\n+import de.metas.i18n.IADMessageDAO;\n+import de.metas.javaclasses.IJavaClassBL;\n+import de.metas.notification.INotificationBL;\n+import de.metas.notification.UserNotificationRequest;\n+import de.metas.util.Services;\n+import org.adempiere.util.lang.impl.TableRecordReference;\n+import org.compiere.model.I_AD_Table_AttachmentListener;\n+import org.compiere.util.Env;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.Collection;\n+\n+@Service\n+public class TableAttachmentListenerService\n+{\n+\tprivate final INotificationBL notificationBL = Services.get(INotificationBL.class);\n+\tprivate final IJavaClassBL javaClassBL = Services.get(IJavaClassBL.class);\n+\tprivate final IADMessageDAO adMessageDAO = Services.get(IADMessageDAO.class);\n+\tprivate final TableAttachmentListenerRepository tableAttachmentListenerRepository;\n+\n+\tpublic TableAttachmentListenerService(final TableAttachmentListenerRepository tableAttachmentListenerRepository)\n+\t{\n+\t\tthis.tableAttachmentListenerRepository = tableAttachmentListenerRepository;\n+\t}\n+\n+\tpublic ImmutableList<AttachmentListenerActionResult> notifyAttachmentListeners(final AttachmentEntry attachmentEntry)", "originalCommit": "df58128d439b678343bed39dab5d38a26b555952", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8c518bd408472d41ccb3aa488a01a0361f736ee7", "chunk": "diff --git a/de.metas.adempiere.adempiere/base/src/main/java/de/metas/attachments/listener/TableAttachmentListenerService.java b/de.metas.adempiere.adempiere/base/src/main/java/de/metas/attachments/listener/TableAttachmentListenerService.java\nindex 5f28ce2f99..00aa61e20c 100644\n--- a/de.metas.adempiere.adempiere/base/src/main/java/de/metas/attachments/listener/TableAttachmentListenerService.java\n+++ b/de.metas.adempiere.adempiere/base/src/main/java/de/metas/attachments/listener/TableAttachmentListenerService.java\n\n@@ -30,6 +30,7 @@ import de.metas.javaclasses.IJavaClassBL;\n import de.metas.notification.INotificationBL;\n import de.metas.notification.UserNotificationRequest;\n import de.metas.util.Services;\n+import lombok.NonNull;\n import org.adempiere.util.lang.impl.TableRecordReference;\n import org.compiere.model.I_AD_Table_AttachmentListener;\n import org.compiere.util.Env;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcxODk3NQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6330#discussion_r391718975", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t/**\n          \n          \n            \n            \t *\n          \n          \n            \n            \t * @param runESRImportRequest\n          \n          \n            \n            \t */\n          \n          \n            \n            \tpublic void scheduleESRImportFor(final RunESRImportRequest runESRImportRequest);\n          \n          \n            \n            \tpublic void scheduleESRImportFor(RunESRImportRequest runESRImportRequest);\n          \n      \n    \n    \n  \n\n\navoid useless javadocs\nfinal makes no sense in this interface method", "author": "metas-ts", "createdAt": "2020-03-12T15:55:00Z", "path": "de.metas.payment.esr/src/main/java/de/metas/payment/esr/api/IESRImportBL.java", "diffHunk": "@@ -122,4 +121,10 @@\n \t * @param bankStatementLineRef\n \t */\n \tvoid unlinkESRImportLinesFor(I_C_BankStatementLine_Ref bankStatementLineRef);\n+\n+\t/**\n+\t *\n+\t * @param runESRImportRequest\n+\t */\n+\tpublic void scheduleESRImportFor(final RunESRImportRequest runESRImportRequest);", "originalCommit": "df58128d439b678343bed39dab5d38a26b555952", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8c518bd408472d41ccb3aa488a01a0361f736ee7", "chunk": "diff --git a/de.metas.payment.esr/src/main/java/de/metas/payment/esr/api/IESRImportBL.java b/de.metas.payment.esr/src/main/java/de/metas/payment/esr/api/IESRImportBL.java\nindex 76f9a83abf..cfef336a3b 100644\n--- a/de.metas.payment.esr/src/main/java/de/metas/payment/esr/api/IESRImportBL.java\n+++ b/de.metas.payment.esr/src/main/java/de/metas/payment/esr/api/IESRImportBL.java\n\n@@ -122,9 +122,5 @@ public interface IESRImportBL extends ISingletonService\n \t */\n \tvoid unlinkESRImportLinesFor(I_C_BankStatementLine_Ref bankStatementLineRef);\n \n-\t/**\n-\t *\n-\t * @param runESRImportRequest\n-\t */\n-\tpublic void scheduleESRImportFor(final RunESRImportRequest runESRImportRequest);\n+\tvoid scheduleESRImportFor(RunESRImportRequest runESRImportRequest);\n }\n"}}, {"oid": "8c518bd408472d41ccb3aa488a01a0361f736ee7", "url": "https://github.com/metasfresh/metasfresh/commit/8c518bd408472d41ccb3aa488a01a0361f736ee7", "message": "more refactoring\nhttps://github.com/metasfresh/metasfresh/issues/6328", "committedDate": "2020-03-12T16:05:08Z", "type": "commit"}]}