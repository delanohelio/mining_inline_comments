{"pr_number": 9864, "pr_title": "# Allow creating credit memo for paid invoice", "pr_createdAt": "2020-08-31T10:04:30Z", "pr_url": "https://github.com/metasfresh/metasfresh/pull/9864", "timeline": [{"oid": "09d6dddba75ca26b07a76b6e6c1582412ed766ea", "url": "https://github.com/metasfresh/metasfresh/commit/09d6dddba75ca26b07a76b6e6c1582412ed766ea", "message": "# Allow creating credit memo for paid invoice\n\n* Ony if the invoice is not referenced\nhttps://github.com/metasfresh/metasfresh/issues/9863", "committedDate": "2020-08-31T10:02:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA0MjU5OA==", "url": "https://github.com/metasfresh/metasfresh/pull/9864#discussion_r480042598", "bodyText": "are we sure this should be isCreditedInvoiceReinvoicable() and not referenceInvoice()", "author": "metas-ts", "createdAt": "2020-08-31T10:43:20Z", "path": "backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/AbstractInvoiceBL.java", "diffHunk": "@@ -161,18 +161,23 @@\n \tpublic final I_C_Invoice creditInvoice(@NonNull final I_C_Invoice invoice, final InvoiceCreditContext creditCtx)\n \t{\n \t\tCheck.errorIf(isCreditMemo(invoice), \"Param 'invoice'={} may not be a credit memo\");\n-\t\tCheck.errorIf(invoice.isPaid(), \"Param 'invoice'={} may not yet be paid\");\n-\n \t\tCheck.assume(invoice.getGrandTotal().signum() != 0, \"GrandTotal!=0 for {}\", invoice);\n \n-\t\tfinal Properties ctx = InterfaceWrapperHelper.getCtx(invoice);\n-\t\t//\n-\t\t// 'openAmt is the amount that shall end up in the credit memo's GrandTotal\n-\t\tfinal BigDecimal openAmt = Services.get(IAllocationDAO.class).retrieveOpenAmt(invoice,\n-\t\t\t\tfalse); // creditMemoAdjusted = false\n+\t\tif (creditCtx.isCreditedInvoiceReinvoicable())", "originalCommit": "09d6dddba75ca26b07a76b6e6c1582412ed766ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d99b855bf0576ccb0b67eb6f11c3e46a3f3848ec", "chunk": "diff --git a/backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/AbstractInvoiceBL.java b/backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/AbstractInvoiceBL.java\nindex 6fbef7fa4d..d3870fbc80 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/AbstractInvoiceBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/AbstractInvoiceBL.java\n\n@@ -163,7 +163,7 @@ public abstract class AbstractInvoiceBL implements IInvoiceBL\n \t\tCheck.errorIf(isCreditMemo(invoice), \"Param 'invoice'={} may not be a credit memo\");\n \t\tCheck.assume(invoice.getGrandTotal().signum() != 0, \"GrandTotal!=0 for {}\", invoice);\n \n-\t\tif (creditCtx.isCreditedInvoiceReinvoicable())\n+\t\tif (creditCtx.isReferenceInvoice())\n \t\t{\n \t\t\tCheck.errorIf(invoice.isPaid(), \"Param 'invoice'={} may not yet be paid\");\n \n"}}, {"oid": "d99b855bf0576ccb0b67eb6f11c3e46a3f3848ec", "url": "https://github.com/metasfresh/metasfresh/commit/d99b855bf0576ccb0b67eb6f11c3e46a3f3848ec", "message": "#9863 repair condition flag\n\nhttps://github.com/metasfresh/metasfresh/issues/9863", "committedDate": "2020-08-31T10:46:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA0NjkwNA==", "url": "https://github.com/metasfresh/metasfresh/pull/9864#discussion_r480046904", "bodyText": "please change this error a bit. e.g. throw an AdempiereException with text\n\"If the credit memo shall reference the credited invoice, then that invoice may not yet be paid\");\nand append the C_Invoice_ID as exception parameter", "author": "metas-ts", "createdAt": "2020-08-31T10:50:20Z", "path": "backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/AbstractInvoiceBL.java", "diffHunk": "@@ -163,7 +163,7 @@ public final I_C_Invoice creditInvoice(@NonNull final I_C_Invoice invoice, final\n \t\tCheck.errorIf(isCreditMemo(invoice), \"Param 'invoice'={} may not be a credit memo\");\n \t\tCheck.assume(invoice.getGrandTotal().signum() != 0, \"GrandTotal!=0 for {}\", invoice);\n \n-\t\tif (creditCtx.isCreditedInvoiceReinvoicable())\n+\t\tif (creditCtx.isReferenceInvoice())\n \t\t{\n \t\t\tCheck.errorIf(invoice.isPaid(), \"Param 'invoice'={} may not yet be paid\");", "originalCommit": "d99b855bf0576ccb0b67eb6f11c3e46a3f3848ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b441299c7f252ec7398eaee02c403ed295a27fd", "chunk": "diff --git a/backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/AbstractInvoiceBL.java b/backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/AbstractInvoiceBL.java\nindex d3870fbc80..3e5c8520a7 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/AbstractInvoiceBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/AbstractInvoiceBL.java\n\n@@ -157,15 +159,28 @@ public abstract class AbstractInvoiceBL implements IInvoiceBL\n \t// FRESH-488: Payment rule from sys config\n \tpublic static final String SYSCONFIG_C_Invoice_PaymentRule = \"de.metas.invoice.C_Invoice_PaymentRule\";\n \n+\tprivate static final AdMessageKey MSG_InvoiceMayNotBePaid = AdMessageKey.of(\"de.metas.invoice.service.impl.AbstractInvoiceBL_InvoiceMayNotBePaid\");\n+\n+\tprivate static final AdMessageKey MSG_InvoiceMayNotHaveOpenAmtZero = AdMessageKey.of(\"de.metas.invoice.service.impl.AbstractInvoiceBL_InvoiceMayNotHaveOpenAmtZero\");\n+\n \t@Override\n \tpublic final I_C_Invoice creditInvoice(@NonNull final I_C_Invoice invoice, final InvoiceCreditContext creditCtx)\n \t{\n+\n \t\tCheck.errorIf(isCreditMemo(invoice), \"Param 'invoice'={} may not be a credit memo\");\n \t\tCheck.assume(invoice.getGrandTotal().signum() != 0, \"GrandTotal!=0 for {}\", invoice);\n \n \t\tif (creditCtx.isReferenceInvoice())\n \t\t{\n-\t\t\tCheck.errorIf(invoice.isPaid(), \"Param 'invoice'={} may not yet be paid\");\n+\n+\t\t\tif (invoice.isPaid())\n+\t\t\t{\n+\t\t\t\tthrow new AdempiereException(\n+\t\t\t\t\t\tMSG_InvoiceMayNotBePaid,\n+\t\t\t\t\t\tnew Object[] {\n+\t\t\t\t\t\t\t\tinvoice.getDocumentNo()\n+\t\t\t\t\t\t});\n+\t\t\t}\n \n \t\t\t//\n \t\t\t// 'openAmt is the amount that shall end up in the credit memo's GrandTotal\n"}}, {"oid": "1b441299c7f252ec7398eaee02c403ed295a27fd", "url": "https://github.com/metasfresh/metasfresh/commit/1b441299c7f252ec7398eaee02c403ed295a27fd", "message": "#9863 use AD_Messages when throwing crediting errors\n\nhttps://github.com/metasfresh/metasfresh/issues/9863", "committedDate": "2020-08-31T11:46:02Z", "type": "commit"}, {"oid": "f9cfe30c32e6e777034be0138602976f900229d8", "url": "https://github.com/metasfresh/metasfresh/commit/f9cfe30c32e6e777034be0138602976f900229d8", "message": "Update backend/de.metas.adempiere.adempiere/migration/src/main/sql/postgresql/system/10-de.metas.adempiere/5565960_sys_gh9863_CreditMemo_For_Paid_Invoice_Messages.sql\r\n\r\n#9863", "committedDate": "2020-08-31T11:51:24Z", "type": "commit"}]}