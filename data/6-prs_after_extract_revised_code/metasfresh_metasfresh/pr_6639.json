{"pr_number": 6639, "pr_title": "#6566 refactoring and improvements", "pr_createdAt": "2020-05-12T17:48:52Z", "pr_url": "https://github.com/metasfresh/metasfresh/pull/6639", "timeline": [{"oid": "4404cbcf60557136271343afded929f63e0a65cd", "url": "https://github.com/metasfresh/metasfresh/commit/4404cbcf60557136271343afded929f63e0a65cd", "message": "#6566 refactoring and improvements\n\nhttps://github.com/metasfresh/metasfresh/issues/6566", "committedDate": "2020-05-12T17:29:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3NTcyOA==", "url": "https://github.com/metasfresh/metasfresh/pull/6639#discussion_r424175728", "bodyText": "now i'm wondering, what about e.g. in-progress terms. i think you need to filter only for completed and closed ones", "author": "metas-ts", "createdAt": "2020-05-13T05:10:06Z", "path": "backend/de.metas.contracts/src/main/java/de/metas/contracts/bpartner/ContractPartnerRepository.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package de.metas.contracts.bpartner;\n+\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.compiere.model.IQuery;\n+import org.compiere.model.I_C_BPartner;\n+import org.springframework.stereotype.Repository;\n+\n+import com.google.common.collect.ImmutableSet;\n+\n+import de.metas.bpartner.BPartnerId;\n+import de.metas.contracts.model.I_C_Flatrate_Term;\n+import de.metas.util.Services;\n+\n+@Repository\n+public class ContractPartnerRepository\n+{\n+\tpublic ImmutableSet<BPartnerId> retrieveAllPartnersWithContracts()\n+\t{\n+\t\tIQueryBL queryBL = Services.get(IQueryBL.class);\n+\n+\t\tfinal IQuery<I_C_Flatrate_Term> contractsFilter = queryBL.createQueryBuilder(I_C_Flatrate_Term.class)\n+\t\t\t\t.addOnlyActiveRecordsFilter()", "originalCommit": "4404cbcf60557136271343afded929f63e0a65cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIyNTY0MA==", "url": "https://github.com/metasfresh/metasfresh/pull/6639#discussion_r424225640", "bodyText": "Right. Done.", "author": "metas-rc", "createdAt": "2020-05-13T07:25:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3NTcyOA=="}], "type": "inlineReview", "revised_code": {"commit": "01e99316f96a4cb0d22c8f8bad269472958882d8", "chunk": "diff --git a/backend/de.metas.contracts/src/main/java/de/metas/contracts/bpartner/ContractPartnerRepository.java b/backend/de.metas.contracts/src/main/java/de/metas/contracts/bpartner/ContractPartnerRepository.java\nindex e4f567e0e0..2f126e87e1 100644\n--- a/backend/de.metas.contracts/src/main/java/de/metas/contracts/bpartner/ContractPartnerRepository.java\n+++ b/backend/de.metas.contracts/src/main/java/de/metas/contracts/bpartner/ContractPartnerRepository.java\n\n@@ -1,25 +1,27 @@\n package de.metas.contracts.bpartner;\n \n+import java.util.Iterator;\n+\n import org.adempiere.ad.dao.IQueryBL;\n import org.compiere.model.IQuery;\n import org.compiere.model.I_C_BPartner;\n import org.springframework.stereotype.Repository;\n \n-import com.google.common.collect.ImmutableSet;\n-\n import de.metas.bpartner.BPartnerId;\n import de.metas.contracts.model.I_C_Flatrate_Term;\n+import de.metas.document.engine.DocStatus;\n import de.metas.util.Services;\n \n @Repository\n public class ContractPartnerRepository\n {\n-\tpublic ImmutableSet<BPartnerId> retrieveAllPartnersWithContracts()\n+\tpublic Iterator<BPartnerId> retrieveAllPartnersWithContracts()\n \t{\n-\t\tIQueryBL queryBL = Services.get(IQueryBL.class);\n+\t\tfinal IQueryBL queryBL = Services.get(IQueryBL.class);\n \n \t\tfinal IQuery<I_C_Flatrate_Term> contractsFilter = queryBL.createQueryBuilder(I_C_Flatrate_Term.class)\n \t\t\t\t.addOnlyActiveRecordsFilter()\n+\t\t\t\t.addInArrayFilter(I_C_Flatrate_Term.COLUMNNAME_DocStatus, DocStatus.completedOrClosedStatuses())\n \t\t\t\t.create();\n \n \t\treturn queryBL\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3NTgwNg==", "url": "https://github.com/metasfresh/metasfresh/pull/6639#discussion_r424175806", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic ImmutableSet<BPartnerId> retrieveAllPartnersWithContracts()\n          \n          \n            \n            \tpublic ImmutableSet<BPartnerId> retrieveIdsOfPartnerWithContracts()\n          \n      \n    \n    \n  \n\n\ninclude the \"Ids\" in the name\nin other mf places, \"All\" implies also inactive, which is not the case here", "author": "metas-ts", "createdAt": "2020-05-13T05:10:23Z", "path": "backend/de.metas.contracts/src/main/java/de/metas/contracts/bpartner/ContractPartnerRepository.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package de.metas.contracts.bpartner;\n+\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.compiere.model.IQuery;\n+import org.compiere.model.I_C_BPartner;\n+import org.springframework.stereotype.Repository;\n+\n+import com.google.common.collect.ImmutableSet;\n+\n+import de.metas.bpartner.BPartnerId;\n+import de.metas.contracts.model.I_C_Flatrate_Term;\n+import de.metas.util.Services;\n+\n+@Repository\n+public class ContractPartnerRepository\n+{\n+\tpublic ImmutableSet<BPartnerId> retrieveAllPartnersWithContracts()", "originalCommit": "4404cbcf60557136271343afded929f63e0a65cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3NjY5Nw==", "url": "https://github.com/metasfresh/metasfresh/pull/6639#discussion_r424176697", "bodyText": "There might be 500k bpartners; please return an iterator\n(not sure if i approved the set in a previous PR, but i think it's wrong and we have IQuery.iterateIds(...))", "author": "metas-ts", "createdAt": "2020-05-13T05:13:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3NTgwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIyODg4Nw==", "url": "https://github.com/metasfresh/metasfresh/pull/6639#discussion_r424228887", "bodyText": "Agree. Making it an iterator.", "author": "metas-rc", "createdAt": "2020-05-13T07:31:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3NTgwNg=="}], "type": "inlineReview", "revised_code": {"commit": "01e99316f96a4cb0d22c8f8bad269472958882d8", "chunk": "diff --git a/backend/de.metas.contracts/src/main/java/de/metas/contracts/bpartner/ContractPartnerRepository.java b/backend/de.metas.contracts/src/main/java/de/metas/contracts/bpartner/ContractPartnerRepository.java\nindex e4f567e0e0..2f126e87e1 100644\n--- a/backend/de.metas.contracts/src/main/java/de/metas/contracts/bpartner/ContractPartnerRepository.java\n+++ b/backend/de.metas.contracts/src/main/java/de/metas/contracts/bpartner/ContractPartnerRepository.java\n\n@@ -1,25 +1,27 @@\n package de.metas.contracts.bpartner;\n \n+import java.util.Iterator;\n+\n import org.adempiere.ad.dao.IQueryBL;\n import org.compiere.model.IQuery;\n import org.compiere.model.I_C_BPartner;\n import org.springframework.stereotype.Repository;\n \n-import com.google.common.collect.ImmutableSet;\n-\n import de.metas.bpartner.BPartnerId;\n import de.metas.contracts.model.I_C_Flatrate_Term;\n+import de.metas.document.engine.DocStatus;\n import de.metas.util.Services;\n \n @Repository\n public class ContractPartnerRepository\n {\n-\tpublic ImmutableSet<BPartnerId> retrieveAllPartnersWithContracts()\n+\tpublic Iterator<BPartnerId> retrieveAllPartnersWithContracts()\n \t{\n-\t\tIQueryBL queryBL = Services.get(IQueryBL.class);\n+\t\tfinal IQueryBL queryBL = Services.get(IQueryBL.class);\n \n \t\tfinal IQuery<I_C_Flatrate_Term> contractsFilter = queryBL.createQueryBuilder(I_C_Flatrate_Term.class)\n \t\t\t\t.addOnlyActiveRecordsFilter()\n+\t\t\t\t.addInArrayFilter(I_C_Flatrate_Term.COLUMNNAME_DocStatus, DocStatus.completedOrClosedStatuses())\n \t\t\t\t.create();\n \n \t\treturn queryBL\n"}}, {"oid": "d86541a62c6b94d109b660342b6e282bacf2947e", "url": "https://github.com/metasfresh/metasfresh/commit/d86541a62c6b94d109b660342b6e282bacf2947e", "message": "Merge branch 'yeast_overgrowth' into gh6566_6", "committedDate": "2020-05-13T06:55:50Z", "type": "commit"}, {"oid": "01e99316f96a4cb0d22c8f8bad269472958882d8", "url": "https://github.com/metasfresh/metasfresh/commit/01e99316f96a4cb0d22c8f8bad269472958882d8", "message": "#6566 improvements\n\n* use iterator when retrieving partners;\n* only retrieve completed or closed contracts\nhttps://github.com/metasfresh/metasfresh/issues/6566", "committedDate": "2020-05-13T07:43:30Z", "type": "commit"}, {"oid": "ac61f73b25c8e7b7ac82d9ae630fb2991a29fc3b", "url": "https://github.com/metasfresh/metasfresh/commit/ac61f73b25c8e7b7ac82d9ae630fb2991a29fc3b", "message": "Merge branch 'gh6566_6' of https://github.com/metasfresh/metasfresh into gh6566_6", "committedDate": "2020-05-13T07:43:36Z", "type": "commit"}]}