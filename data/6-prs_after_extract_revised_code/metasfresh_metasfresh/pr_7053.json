{"pr_number": 7053, "pr_title": "- initial commit", "pr_createdAt": "2020-07-23T15:12:39Z", "pr_url": "https://github.com/metasfresh/metasfresh/pull/7053", "timeline": [{"oid": "64ab0df551151fb8a89da8311e1aac7672b816f4", "url": "https://github.com/metasfresh/metasfresh/commit/64ab0df551151fb8a89da8311e1aac7672b816f4", "message": "- initial commit\nrefs: https://github.com/metasfresh/metasfresh/issues/7052", "committedDate": "2020-07-23T15:11:12Z", "type": "commit"}, {"oid": "6f7df332b065b225090a502de716f4193955cadf", "url": "https://github.com/metasfresh/metasfresh/commit/6f7df332b065b225090a502de716f4193955cadf", "message": "- de-comment\nrefs: https://github.com/metasfresh/metasfresh/issues/7052", "committedDate": "2020-07-23T15:19:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU2OTIxMg==", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r459569212", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /*\n          \n          \n            \n             * #%L\n          \n          \n            \n             * de.metas.swat.base\n          \n          \n            \n             * %%\n          \n          \n            \n             * Copyright (C) 2015 metas GmbH\n          \n          \n            \n             * %%\n          \n          \n            \n             * This program is free software: you can redistribute it and/or modify\n          \n          \n            \n             * it under the terms of the GNU General Public License as\n          \n          \n            \n             * published by the Free Software Foundation, either version 2 of the\n          \n          \n            \n             * License, or (at your option) any later version.\n          \n          \n            \n             *\n          \n          \n            \n             * This program is distributed in the hope that it will be useful,\n          \n          \n            \n             * but WITHOUT ANY WARRANTY; without even the implied warranty of\n          \n          \n            \n             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n          \n          \n            \n             * GNU General Public License for more details.\n          \n          \n            \n             *\n          \n          \n            \n             * You should have received a copy of the GNU General Public\n          \n          \n            \n             * License along with this program. If not, see\n          \n          \n            \n             * <http://www.gnu.org/licenses/gpl-2.0.html>.\n          \n          \n            \n             * #L%\n          \n          \n            \n             */", "author": "metas-ts", "createdAt": "2020-07-23T16:17:01Z", "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/inoutcandidate/api/impl/ShipmentScheduleBL.java", "diffHunk": "@@ -116,6 +44,102 @@\n import de.metas.util.Check;\n import de.metas.util.Services;\n import lombok.NonNull;\n+import org.adempiere.ad.dao.ICompositeQueryUpdater;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.ad.trx.api.ITrxManager;\n+import org.adempiere.exceptions.AdempiereException;\n+import org.adempiere.mm.attributes.AttributeSetInstanceId;\n+import org.adempiere.mm.attributes.api.ASICopy;\n+import org.adempiere.mm.attributes.api.AttributeConstants;\n+import org.adempiere.mm.attributes.api.CreateAttributeInstanceReq;\n+import org.adempiere.mm.attributes.api.IAttributeSet;\n+import org.adempiere.mm.attributes.api.IAttributeSetInstanceAware;\n+import org.adempiere.mm.attributes.api.IAttributeSetInstanceBL;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.adempiere.model.PlainContextAware;\n+import org.adempiere.service.ClientId;\n+import org.adempiere.service.ISysConfigBL;\n+import org.adempiere.util.lang.IAutoCloseable;\n+import org.adempiere.util.lang.NullAutoCloseable;\n+import org.adempiere.util.lang.impl.TableRecordReference;\n+import org.adempiere.warehouse.WarehouseId;\n+import org.adempiere.warehouse.api.IWarehouseDAO;\n+import org.compiere.model.I_C_BPartner;\n+import org.compiere.model.I_C_BPartner_Location;\n+import org.compiere.model.I_C_Order;\n+import org.compiere.model.I_C_OrderLine;\n+import org.compiere.model.I_C_UOM;\n+import org.compiere.model.I_M_AttributeSetInstance;\n+import org.compiere.model.I_M_InOut;\n+import org.compiere.model.I_M_InOutLine;\n+import org.compiere.model.X_C_OrderLine;\n+import org.compiere.util.Env;\n+import org.compiere.util.TimeUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.MDC.MDCCloseable;\n+import org.springframework.stereotype.Service;\n+\n+import java.math.BigDecimal;\n+import java.sql.Timestamp;\n+import java.time.Instant;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.adempiere.model.InterfaceWrapperHelper.createOld;\n+import static org.adempiere.model.InterfaceWrapperHelper.isNull;\n+import static org.adempiere.model.InterfaceWrapperHelper.save;\n+import static org.adempiere.model.InterfaceWrapperHelper.saveRecord;\n+\n+/*\n+ * #%L\n+ * de.metas.swat.base\n+ * %%\n+ * Copyright (C) 2015 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */", "originalCommit": "6f7df332b065b225090a502de716f4193955cadf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f4ed1ea62a1e4b285870c986d725682c09c9fe20", "chunk": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/inoutcandidate/api/impl/ShipmentScheduleBL.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/inoutcandidate/api/impl/ShipmentScheduleBL.java\nindex 6eb05cba78..8a67c47985 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/inoutcandidate/api/impl/ShipmentScheduleBL.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/inoutcandidate/api/impl/ShipmentScheduleBL.java\n\n@@ -97,27 +97,6 @@ import static org.adempiere.model.InterfaceWrapperHelper.isNull;\n import static org.adempiere.model.InterfaceWrapperHelper.save;\n import static org.adempiere.model.InterfaceWrapperHelper.saveRecord;\n \n-/*\n- * #%L\n- * de.metas.swat.base\n- * %%\n- * Copyright (C) 2015 metas GmbH\n- * %%\n- * This program is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU General Public License as\n- * published by the Free Software Foundation, either version 2 of the\n- * License, or (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n- * GNU General Public License for more details.\n- *\n- * You should have received a copy of the GNU General Public\n- * License along with this program. If not, see\n- * <http://www.gnu.org/licenses/gpl-2.0.html>.\n- * #L%\n- */\n \n /*\n  * #%L\n"}}, {"oid": "9d394f375964f7ca5d1a49e7cb53f78b0813326d", "url": "https://github.com/metasfresh/metasfresh/commit/9d394f375964f7ca5d1a49e7cb53f78b0813326d", "message": "- fixes and improvements\nrefs: https://github.com/metasfresh/metasfresh/issues/7052", "committedDate": "2020-07-24T15:51:07Z", "type": "commit"}, {"oid": "f4ed1ea62a1e4b285870c986d725682c09c9fe20", "url": "https://github.com/metasfresh/metasfresh/commit/f4ed1ea62a1e4b285870c986d725682c09c9fe20", "message": "Update backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/inoutcandidate/api/impl/ShipmentScheduleBL.java\n\nCo-authored-by: Tobias Sch\u00f6neberg <metas-ts@users.noreply.github.com>", "committedDate": "2020-07-27T07:19:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwMzIzNw==", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460703237", "bodyText": "use addInSubQueryFilter instead", "author": "teosarca", "createdAt": "2020-07-27T07:42:23Z", "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/bpartner/service/impl/BPartnerDAO.java", "diffHunk": "@@ -1155,6 +1157,34 @@ public BPartnerLocationId retrieveBPartnerLocationId(@NonNull final BPartnerLoca\n \t\treturn createLocationIdOrNull(bpartnerId, ownToLocation);\n \t}\n \n+\tprivate void appendLocationChecks(@NonNull final BPartnerLocationQuery query, @NonNull final IQueryBuilder<I_C_BPartner_Location> bpLocationQueryBuilder)\n+\t{\n+\t\tfinal boolean skipLocationChecks = !query.applyLocationChecks();\n+\n+\t\tif (skipLocationChecks)\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tfinal IQueryBuilder<I_C_Location> locationIQueryBuilder = queryBL.createQueryBuilder(I_C_Location.class)\n+\t\t\t\t.addOnlyActiveRecordsFilter()\n+\t\t\t\t.addEqualsFilter(I_C_Location.COLUMNNAME_C_Country_ID, query.getCountryId());\n+\n+\t\tif (Check.isNotBlank(query.getCity()))\n+\t\t{\n+\t\t\tlocationIQueryBuilder.addEqualsFilter(I_C_Location.COLUMNNAME_City, query.getCity());\n+\t\t}\n+\n+\t\tif (Check.isNotBlank(query.getPostalCode()))\n+\t\t{\n+\t\t\tlocationIQueryBuilder.addEqualsFilter(I_C_Location.COLUMNNAME_Postal, query.getPostalCode());\n+\t\t}\n+\n+\t\tfinal List<Integer> ids = locationIQueryBuilder.create().listIds();\n+\n+\t\tbpLocationQueryBuilder.addInArrayFilter(I_C_BPartner_Location.COLUMNNAME_C_Location_ID, ids);", "originalCommit": "f4ed1ea62a1e4b285870c986d725682c09c9fe20", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9c56f44fef5b4fc89497786e31fb3ccb214592f7", "chunk": "diff --git a/backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/bpartner/service/impl/BPartnerDAO.java b/backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/bpartner/service/impl/BPartnerDAO.java\nindex 27ce235d2a..353cc513c5 100644\n--- a/backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/bpartner/service/impl/BPartnerDAO.java\n+++ b/backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/bpartner/service/impl/BPartnerDAO.java\n\n@@ -1180,9 +1180,8 @@ public class BPartnerDAO implements IBPartnerDAO\n \t\t\tlocationIQueryBuilder.addEqualsFilter(I_C_Location.COLUMNNAME_Postal, query.getPostalCode());\n \t\t}\n \n-\t\tfinal List<Integer> ids = locationIQueryBuilder.create().listIds();\n-\n-\t\tbpLocationQueryBuilder.addInArrayFilter(I_C_BPartner_Location.COLUMNNAME_C_Location_ID, ids);\n+\t\tbpLocationQueryBuilder.addInSubQueryFilter(I_C_BPartner_Location.COLUMN_C_Location_ID,\n+\t\t\t\tI_C_Location.COLUMN_C_Location_ID, locationIQueryBuilder.create());\n \t}\n \n \tprivate BPartnerLocationId createLocationIdOrNull(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwNjE4Nw==", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460706187", "bodyText": "return JsonError. u can use JsonErrors utility class", "author": "teosarca", "createdAt": "2020-07-27T07:48:13Z", "path": "backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/ShipmentRestController.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * #%L\n+ * de.metas.business.rest-api-impl\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.rest_api.shipping;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.Profiles;\n+import de.metas.common.rest_api.JsonMetasfreshId;\n+import de.metas.common.shipment.JsonCreateShipmentRequest;\n+import de.metas.common.shipment.JsonCreateShipmentResponse;\n+import de.metas.inout.model.I_M_InOut;\n+import de.metas.inoutcandidate.api.InOutGenerateResult;\n+import de.metas.logging.LogManager;\n+import de.metas.rest_api.shipping.info.GenerateShipmentsRequest;\n+import de.metas.util.web.MetasfreshRestAPIConstants;\n+import org.slf4j.Logger;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RequestMapping(ShipmentRestController.ENDPOINT)\n+@RestController\n+@Profile(Profiles.PROFILE_App)\n+public class ShipmentRestController\n+{\n+\tpublic static final String ENDPOINT = MetasfreshRestAPIConstants.ENDPOINT_API + \"/shipment\";\n+\n+\tprivate static final Logger log = LogManager.getLogger(ShipmentRestController.class);\n+\n+\tprivate final de.metas.rest_api.shipping.ShipmentService shipmentService;\n+\n+\tpublic ShipmentRestController(final de.metas.rest_api.shipping.ShipmentService shipmentService)\n+\t{\n+\t\tthis.shipmentService = shipmentService;\n+\t}\n+\n+\t@PostMapping\n+\tpublic ResponseEntity<?> createShipments(@RequestBody final JsonCreateShipmentRequest request)\n+\t{\n+\t\tlog.debug(\"*** createShipments: Started with request: {}\", request);\n+\n+\t\ttry\n+\t\t{\n+\t\t\tshipmentService.validateRequest(request);\n+\t\t}\n+\t\tcatch (final Exception e)\n+\t\t{\n+\t\t\treturn ResponseEntity.badRequest().body(e.getMessage());", "originalCommit": "f4ed1ea62a1e4b285870c986d725682c09c9fe20", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9c56f44fef5b4fc89497786e31fb3ccb214592f7", "chunk": "diff --git a/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/ShipmentRestController.java b/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/ShipmentRestController.java\nindex 47534c28e7..8bc43ea26c 100644\n--- a/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/ShipmentRestController.java\n+++ b/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/ShipmentRestController.java\n\n@@ -31,7 +31,9 @@ import de.metas.inout.model.I_M_InOut;\n import de.metas.inoutcandidate.api.InOutGenerateResult;\n import de.metas.logging.LogManager;\n import de.metas.rest_api.shipping.info.GenerateShipmentsRequest;\n+import de.metas.rest_api.utils.JsonErrors;\n import de.metas.util.web.MetasfreshRestAPIConstants;\n+import org.compiere.util.Env;\n import org.slf4j.Logger;\n import org.springframework.context.annotation.Profile;\n import org.springframework.http.ResponseEntity;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwNzMyNQ==", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460707325", "bodyText": "why not using with \"is\" ?", "author": "teosarca", "createdAt": "2020-07-27T07:50:21Z", "path": "backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/info/UpdateShipmentScheduleRequest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * #%L\n+ * de.metas.business.rest-api-impl\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.rest_api.shipping.info;\n+\n+import de.metas.common.rest_api.JsonAttributeInstance;\n+import de.metas.inoutcandidate.ShipmentScheduleId;\n+import de.metas.util.Check;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import lombok.Value;\n+import org.adempiere.exceptions.AdempiereException;\n+\n+import javax.annotation.Nullable;\n+import java.math.BigDecimal;\n+import java.time.LocalDateTime;\n+import java.util.List;\n+\n+@Value\n+public class UpdateShipmentScheduleRequest\n+{\n+\t@NonNull\n+\tShipmentScheduleId shipmentScheduleId;\n+\n+\t@Nullable\n+\tLocalDateTime deliveryDate;\n+\n+\t@Nullable\n+\tBigDecimal qtyToDeliver;\n+\n+\t@Nullable\n+\tLocationBasicInfo bPartnerLocation;\n+\n+\t@Nullable\n+\tString bPartnerCode;\n+\n+\t@Nullable\n+\tList<JsonAttributeInstance> attributes;\n+\n+\t@Nullable\n+\tString deliveryRuleCode;\n+\n+\t@Builder\n+\tpublic UpdateShipmentScheduleRequest(@NonNull final ShipmentScheduleId shipmentScheduleId,\n+\t\t\t@Nullable final LocalDateTime deliveryDate,\n+\t\t\t@Nullable final BigDecimal qtyToDeliver,\n+\t\t\t@Nullable final LocationBasicInfo bPartnerLocation,\n+\t\t\t@Nullable final String bPartnerCode,\n+\t\t\t@Nullable final String deliveryRuleCode,\n+\t\t\t@Nullable final List<JsonAttributeInstance> attributes)\n+\t{\n+\t\tif (Check.isNotBlank(bPartnerCode) && bPartnerLocation == null)\n+\t\t{\n+\t\t\tthrow new AdempiereException(\"Invalid request!\");\n+\t\t}\n+\n+\t\tthis.shipmentScheduleId = shipmentScheduleId;\n+\t\tthis.deliveryDate = deliveryDate;\n+\t\tthis.qtyToDeliver = qtyToDeliver;\n+\t\tthis.bPartnerLocation = bPartnerLocation;\n+\t\tthis.bPartnerCode = bPartnerCode;\n+\t\tthis.attributes = attributes;\n+\t\tthis.deliveryRuleCode = deliveryRuleCode;\n+\t}\n+\n+\tpublic boolean emptyRequest()", "originalCommit": "f4ed1ea62a1e4b285870c986d725682c09c9fe20", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9c56f44fef5b4fc89497786e31fb3ccb214592f7", "chunk": "diff --git a/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/info/UpdateShipmentScheduleRequest.java b/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/info/UpdateShipmentScheduleRequest.java\nindex 300bea26dd..a250666296 100644\n--- a/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/info/UpdateShipmentScheduleRequest.java\n+++ b/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/info/UpdateShipmentScheduleRequest.java\n\n@@ -32,7 +32,7 @@ import org.adempiere.exceptions.AdempiereException;\n \n import javax.annotation.Nullable;\n import java.math.BigDecimal;\n-import java.time.LocalDateTime;\n+import java.time.ZonedDateTime;\n import java.util.List;\n \n @Value\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwODEzMg==", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460708132", "bodyText": "Please improve the error message. e.g. \"When bPartnerLocation shall be set when bpartnerCode is set\".", "author": "teosarca", "createdAt": "2020-07-27T07:51:51Z", "path": "backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/info/UpdateShipmentScheduleRequest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * #%L\n+ * de.metas.business.rest-api-impl\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.rest_api.shipping.info;\n+\n+import de.metas.common.rest_api.JsonAttributeInstance;\n+import de.metas.inoutcandidate.ShipmentScheduleId;\n+import de.metas.util.Check;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import lombok.Value;\n+import org.adempiere.exceptions.AdempiereException;\n+\n+import javax.annotation.Nullable;\n+import java.math.BigDecimal;\n+import java.time.LocalDateTime;\n+import java.util.List;\n+\n+@Value\n+public class UpdateShipmentScheduleRequest\n+{\n+\t@NonNull\n+\tShipmentScheduleId shipmentScheduleId;\n+\n+\t@Nullable\n+\tLocalDateTime deliveryDate;\n+\n+\t@Nullable\n+\tBigDecimal qtyToDeliver;\n+\n+\t@Nullable\n+\tLocationBasicInfo bPartnerLocation;\n+\n+\t@Nullable\n+\tString bPartnerCode;\n+\n+\t@Nullable\n+\tList<JsonAttributeInstance> attributes;\n+\n+\t@Nullable\n+\tString deliveryRuleCode;\n+\n+\t@Builder\n+\tpublic UpdateShipmentScheduleRequest(@NonNull final ShipmentScheduleId shipmentScheduleId,\n+\t\t\t@Nullable final LocalDateTime deliveryDate,\n+\t\t\t@Nullable final BigDecimal qtyToDeliver,\n+\t\t\t@Nullable final LocationBasicInfo bPartnerLocation,\n+\t\t\t@Nullable final String bPartnerCode,\n+\t\t\t@Nullable final String deliveryRuleCode,\n+\t\t\t@Nullable final List<JsonAttributeInstance> attributes)\n+\t{\n+\t\tif (Check.isNotBlank(bPartnerCode) && bPartnerLocation == null)\n+\t\t{\n+\t\t\tthrow new AdempiereException(\"Invalid request!\");", "originalCommit": "f4ed1ea62a1e4b285870c986d725682c09c9fe20", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9c56f44fef5b4fc89497786e31fb3ccb214592f7", "chunk": "diff --git a/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/info/UpdateShipmentScheduleRequest.java b/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/info/UpdateShipmentScheduleRequest.java\nindex 300bea26dd..a250666296 100644\n--- a/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/info/UpdateShipmentScheduleRequest.java\n+++ b/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/info/UpdateShipmentScheduleRequest.java\n\n@@ -32,7 +32,7 @@ import org.adempiere.exceptions.AdempiereException;\n \n import javax.annotation.Nullable;\n import java.math.BigDecimal;\n-import java.time.LocalDateTime;\n+import java.time.ZonedDateTime;\n import java.util.List;\n \n @Value\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwODY2Mg==", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460708662", "bodyText": "consider using Optional instead of returning null.", "author": "teosarca", "createdAt": "2020-07-27T07:52:48Z", "path": "backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/info/LocationBasicInfo.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * #%L\n+ * de.metas.business.rest-api-impl\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.rest_api.shipping.info;\n+\n+import com.google.common.base.Joiner;\n+import de.metas.common.shipment.JsonLocation;\n+import de.metas.util.Check;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import lombok.Value;\n+\n+import javax.annotation.Nullable;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+@Value\n+@Builder\n+public class LocationBasicInfo\n+{\n+\t@NonNull\n+\tString countryCode;\n+\n+\t@NonNull\n+\tString city;\n+\n+\t@NonNull\n+\tString postalCode;\n+\n+\t@Nullable\n+\tString streetAndNumber;\n+\n+\t@Nullable\n+\tpublic static LocationBasicInfo of(@NonNull final JsonLocation location)", "originalCommit": "f4ed1ea62a1e4b285870c986d725682c09c9fe20", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9c56f44fef5b4fc89497786e31fb3ccb214592f7", "chunk": "diff --git a/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/info/LocationBasicInfo.java b/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/info/LocationBasicInfo.java\nindex 59f613c608..08dead46bb 100644\n--- a/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/info/LocationBasicInfo.java\n+++ b/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/info/LocationBasicInfo.java\n\n@@ -31,6 +31,7 @@ import lombok.Value;\n \n import javax.annotation.Nullable;\n import java.util.List;\n+import java.util.Optional;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxMDgxNw==", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460710817", "bodyText": "why not ZonedDateTime?", "author": "teosarca", "createdAt": "2020-07-27T07:56:56Z", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/AddTrackingCodesForInOutWithoutHUReq.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * #%L\n+ * de.metas.handlingunits.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.handlingunits.impl;\n+\n+import de.metas.inout.InOutId;\n+import de.metas.shipping.ShipperId;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import lombok.Value;\n+\n+import java.time.LocalDateTime;\n+import java.util.List;\n+\n+@Value\n+@Builder\n+public class AddTrackingCodesForInOutWithoutHUReq\n+{\n+\t@NonNull\n+\tInOutId inOutId;\n+\n+\t@NonNull\n+\tShipperId shipperId;\n+\n+\t@NonNull\n+\tLocalDateTime shipDate;", "originalCommit": "f4ed1ea62a1e4b285870c986d725682c09c9fe20", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg4OTgzNw==", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460889837", "bodyText": "mainly bc there is no timezone info coming from Siro, but I guess I could manually set Europe/Berlin as zone id when reading the date from the Siro xmls, in order to have ZonedDateTime in our api.", "author": "pvpurcarcosmin", "createdAt": "2020-07-27T13:29:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxMDgxNw=="}], "type": "inlineReview", "revised_code": {"commit": "9c56f44fef5b4fc89497786e31fb3ccb214592f7", "chunk": "diff --git a/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/AddTrackingCodesForInOutWithoutHUReq.java b/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/AddTrackingCodesForInOutWithoutHUReq.java\nindex b5598c2281..68763d90f7 100644\n--- a/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/AddTrackingCodesForInOutWithoutHUReq.java\n+++ b/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/AddTrackingCodesForInOutWithoutHUReq.java\n\n@@ -28,7 +28,7 @@ import lombok.Builder;\n import lombok.NonNull;\n import lombok.Value;\n \n-import java.time.LocalDateTime;\n+import java.time.ZonedDateTime;\n import java.util.List;\n \n @Value\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxMTE3OQ==", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460711179", "bodyText": "consider using the builder()", "author": "teosarca", "createdAt": "2020-07-27T07:57:38Z", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/CreatePackagesForInOutRequest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * #%L\n+ * de.metas.handlingunits.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.handlingunits.impl;\n+\n+import de.metas.inout.model.I_M_InOut;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import lombok.Value;\n+\n+import javax.annotation.Nullable;\n+import java.util.List;\n+\n+@Value\n+@Builder\n+public class CreatePackagesForInOutRequest\n+{\n+\t@NonNull\n+\tI_M_InOut inOut;\n+\n+\tboolean processed;\n+\n+\t@Nullable\n+\tList<String> trackingNumbers;\n+\n+\tpublic static CreatePackagesForInOutRequest of(@NonNull final I_M_InOut inOut)\n+\t{\n+\t\treturn new CreatePackagesForInOutRequest(inOut, false, null);", "originalCommit": "f4ed1ea62a1e4b285870c986d725682c09c9fe20", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9c56f44fef5b4fc89497786e31fb3ccb214592f7", "chunk": "diff --git a/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/CreatePackagesForInOutRequest.java b/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/CreatePackagesForInOutRequest.java\nindex 6831c830fb..6e2cfc4427 100644\n--- a/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/CreatePackagesForInOutRequest.java\n+++ b/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/CreatePackagesForInOutRequest.java\n\n@@ -44,6 +44,10 @@ public class CreatePackagesForInOutRequest\n \n \tpublic static CreatePackagesForInOutRequest of(@NonNull final I_M_InOut inOut)\n \t{\n-\t\treturn new CreatePackagesForInOutRequest(inOut, false, null);\n+\t\treturn CreatePackagesForInOutRequest.builder()\n+\t\t\t\t.processed(false)\n+\t\t\t\t.trackingNumbers(null)\n+\t\t\t\t.inOut(inOut)\n+\t\t\t\t.build();\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxMTQyNg==", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460711426", "bodyText": "why not ZonedDateTime?", "author": "teosarca", "createdAt": "2020-07-27T07:58:06Z", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/CreateShipperTransportationRequest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * #%L\n+ * de.metas.handlingunits.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.handlingunits.impl;\n+\n+import de.metas.bpartner.BPartnerLocationId;\n+import de.metas.organization.OrgId;\n+import de.metas.shipping.ShipperId;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import lombok.Value;\n+\n+import java.time.LocalDateTime;\n+\n+@Value\n+@Builder\n+public class CreateShipperTransportationRequest\n+{\n+\t@NonNull\n+\tOrgId orgId;\n+\n+\t@NonNull\n+\tShipperId shipperId;\n+\n+\t@NonNull\n+\tBPartnerLocationId bPartnerLocationId;\n+\n+\t@NonNull\n+\tLocalDateTime shipDate;", "originalCommit": "f4ed1ea62a1e4b285870c986d725682c09c9fe20", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg5MDg4Ng==", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460890886", "bodyText": "same as above, will update", "author": "pvpurcarcosmin", "createdAt": "2020-07-27T13:31:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxMTQyNg=="}], "type": "inlineReview", "revised_code": {"commit": "9c56f44fef5b4fc89497786e31fb3ccb214592f7", "chunk": "diff --git a/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/CreateShipperTransportationRequest.java b/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/CreateShipperTransportationRequest.java\nindex 3f065f2bd6..2efc7dc0d9 100644\n--- a/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/CreateShipperTransportationRequest.java\n+++ b/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/CreateShipperTransportationRequest.java\n\n@@ -29,11 +29,11 @@ import lombok.Builder;\n import lombok.NonNull;\n import lombok.Value;\n \n-import java.time.LocalDateTime;\n+import java.time.ZonedDateTime;\n \n @Value\n @Builder\n-public class CreateShipperTransportationRequest\n+class CreateShipperTransportationRequest\n {\n \t@NonNull\n \tOrgId orgId;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxMzQ4MA==", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460713480", "bodyText": "better call it warehouseBPLocationId", "author": "teosarca", "createdAt": "2020-07-27T08:02:02Z", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java", "diffHunk": "@@ -327,4 +346,59 @@ public I_M_ShipperTransportation getCommonM_ShipperTransportationOrNull(final Co\n \t\tfinal I_M_ShippingPackage firstPackage = shippingPackages.iterator().next();\n \t\treturn firstPackage.getM_ShipperTransportation();\n \t}\n+\n+\t@NonNull\n+\tpublic I_M_ShipperTransportation getById(@NonNull final ShipperTransportationId shipperTransportationId)\n+\t{\n+\t\treturn load(shipperTransportationId, I_M_ShipperTransportation.class);\n+\t}\n+\n+\t@NonNull\n+\tpublic ShipperTransportationId addTrackingCodesForInOutWithoutHU(@NonNull final AddTrackingCodesForInOutWithoutHUReq req)\n+\t{\n+\t\tfinal I_M_InOut inOut = inOutDAO.getById(req.getInOutId());\n+\n+\t\tfinal WarehouseId warehouseId =  WarehouseId.ofRepoId(inOut.getM_Warehouse_ID());\n+\n+\t\tfinal I_M_Warehouse warehouse = warehouseDAO.getById(warehouseId);\n+\n+\t\tfinal int bPartnerLocationId = warehouse.getC_BPartner_Location_ID();", "originalCommit": "f4ed1ea62a1e4b285870c986d725682c09c9fe20", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9c56f44fef5b4fc89497786e31fb3ccb214592f7", "chunk": "diff --git a/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java b/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java\nindex 1120ba4a5a..4d66c08e0b 100644\n--- a/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java\n+++ b/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java\n\n@@ -362,19 +360,19 @@ public class HUShipperTransportationBL implements IHUShipperTransportationBL\n \n \t\tfinal I_M_Warehouse warehouse = warehouseDAO.getById(warehouseId);\n \n-\t\tfinal int bPartnerLocationId = warehouse.getC_BPartner_Location_ID();\n+\t\tfinal int warehouseBPLocationId = warehouse.getC_BPartner_Location_ID();\n \n-\t\tfinal BPartnerLocationInfo bPartnerLocationInfo = bPartnerLocationInfoRepository.getById(bPartnerLocationId);\n+\t\tfinal BPartnerLocationInfo warehouseBPLocationInfo = bPartnerLocationInfoRepository.getById(warehouseBPLocationId);\n \n \t\tfinal CreateShipperTransportationRequest createShipperTransportationRequest = CreateShipperTransportationRequest\n \t\t\t\t.builder()\n \t\t\t\t.shipperId(req.getShipperId())\n-\t\t\t\t.bPartnerLocationId(bPartnerLocationInfo.getId())\n+\t\t\t\t.shipperBPartnerAndLocationId(warehouseBPLocationInfo.getId())\n \t\t\t\t.orgId(OrgId.ofRepoId(inOut.getAD_Org_ID()))\n \t\t\t\t.shipDate(req.getShipDate())\n \t\t\t\t.build();\n \n-\t\tfinal ShipperTransportationId shipperTransportationId = createHUShipperTransportation(createShipperTransportationRequest);\n+\t\tfinal ShipperTransportationId shipperTransportationId = shipperTransportationRepository.create(createShipperTransportationRequest);\n \n \t\tfinal CreatePackagesForInOutRequest createPackagesForInOutRequest = CreatePackagesForInOutRequest.builder()\n \t\t\t\t.inOut(InterfaceWrapperHelper.create(inOut, de.metas.inout.model.I_M_InOut.class))\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxMzYyOA==", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460713628", "bodyText": "better call it warehouseBPLocationInfo", "author": "teosarca", "createdAt": "2020-07-27T08:02:18Z", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java", "diffHunk": "@@ -327,4 +346,59 @@ public I_M_ShipperTransportation getCommonM_ShipperTransportationOrNull(final Co\n \t\tfinal I_M_ShippingPackage firstPackage = shippingPackages.iterator().next();\n \t\treturn firstPackage.getM_ShipperTransportation();\n \t}\n+\n+\t@NonNull\n+\tpublic I_M_ShipperTransportation getById(@NonNull final ShipperTransportationId shipperTransportationId)\n+\t{\n+\t\treturn load(shipperTransportationId, I_M_ShipperTransportation.class);\n+\t}\n+\n+\t@NonNull\n+\tpublic ShipperTransportationId addTrackingCodesForInOutWithoutHU(@NonNull final AddTrackingCodesForInOutWithoutHUReq req)\n+\t{\n+\t\tfinal I_M_InOut inOut = inOutDAO.getById(req.getInOutId());\n+\n+\t\tfinal WarehouseId warehouseId =  WarehouseId.ofRepoId(inOut.getM_Warehouse_ID());\n+\n+\t\tfinal I_M_Warehouse warehouse = warehouseDAO.getById(warehouseId);\n+\n+\t\tfinal int bPartnerLocationId = warehouse.getC_BPartner_Location_ID();\n+\n+\t\tfinal BPartnerLocationInfo bPartnerLocationInfo = bPartnerLocationInfoRepository.getById(bPartnerLocationId);", "originalCommit": "f4ed1ea62a1e4b285870c986d725682c09c9fe20", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9c56f44fef5b4fc89497786e31fb3ccb214592f7", "chunk": "diff --git a/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java b/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java\nindex 1120ba4a5a..4d66c08e0b 100644\n--- a/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java\n+++ b/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java\n\n@@ -362,19 +360,19 @@ public class HUShipperTransportationBL implements IHUShipperTransportationBL\n \n \t\tfinal I_M_Warehouse warehouse = warehouseDAO.getById(warehouseId);\n \n-\t\tfinal int bPartnerLocationId = warehouse.getC_BPartner_Location_ID();\n+\t\tfinal int warehouseBPLocationId = warehouse.getC_BPartner_Location_ID();\n \n-\t\tfinal BPartnerLocationInfo bPartnerLocationInfo = bPartnerLocationInfoRepository.getById(bPartnerLocationId);\n+\t\tfinal BPartnerLocationInfo warehouseBPLocationInfo = bPartnerLocationInfoRepository.getById(warehouseBPLocationId);\n \n \t\tfinal CreateShipperTransportationRequest createShipperTransportationRequest = CreateShipperTransportationRequest\n \t\t\t\t.builder()\n \t\t\t\t.shipperId(req.getShipperId())\n-\t\t\t\t.bPartnerLocationId(bPartnerLocationInfo.getId())\n+\t\t\t\t.shipperBPartnerAndLocationId(warehouseBPLocationInfo.getId())\n \t\t\t\t.orgId(OrgId.ofRepoId(inOut.getAD_Org_ID()))\n \t\t\t\t.shipDate(req.getShipDate())\n \t\t\t\t.build();\n \n-\t\tfinal ShipperTransportationId shipperTransportationId = createHUShipperTransportation(createShipperTransportationRequest);\n+\t\tfinal ShipperTransportationId shipperTransportationId = shipperTransportationRepository.create(createShipperTransportationRequest);\n \n \t\tfinal CreatePackagesForInOutRequest createPackagesForInOutRequest = CreatePackagesForInOutRequest.builder()\n \t\t\t\t.inOut(InterfaceWrapperHelper.create(inOut, de.metas.inout.model.I_M_InOut.class))\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxNDQwMg==", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460714402", "bodyText": "introduce and use IShipperTransportationDAO.save(I_M_ShipperTransportation)", "author": "teosarca", "createdAt": "2020-07-27T08:03:47Z", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java", "diffHunk": "@@ -327,4 +346,59 @@ public I_M_ShipperTransportation getCommonM_ShipperTransportationOrNull(final Co\n \t\tfinal I_M_ShippingPackage firstPackage = shippingPackages.iterator().next();\n \t\treturn firstPackage.getM_ShipperTransportation();\n \t}\n+\n+\t@NonNull\n+\tpublic I_M_ShipperTransportation getById(@NonNull final ShipperTransportationId shipperTransportationId)\n+\t{\n+\t\treturn load(shipperTransportationId, I_M_ShipperTransportation.class);\n+\t}\n+\n+\t@NonNull\n+\tpublic ShipperTransportationId addTrackingCodesForInOutWithoutHU(@NonNull final AddTrackingCodesForInOutWithoutHUReq req)\n+\t{\n+\t\tfinal I_M_InOut inOut = inOutDAO.getById(req.getInOutId());\n+\n+\t\tfinal WarehouseId warehouseId =  WarehouseId.ofRepoId(inOut.getM_Warehouse_ID());\n+\n+\t\tfinal I_M_Warehouse warehouse = warehouseDAO.getById(warehouseId);\n+\n+\t\tfinal int bPartnerLocationId = warehouse.getC_BPartner_Location_ID();\n+\n+\t\tfinal BPartnerLocationInfo bPartnerLocationInfo = bPartnerLocationInfoRepository.getById(bPartnerLocationId);\n+\n+\t\tfinal CreateShipperTransportationRequest createShipperTransportationRequest = CreateShipperTransportationRequest\n+\t\t\t\t.builder()\n+\t\t\t\t.shipperId(req.getShipperId())\n+\t\t\t\t.bPartnerLocationId(bPartnerLocationInfo.getId())\n+\t\t\t\t.orgId(OrgId.ofRepoId(inOut.getAD_Org_ID()))\n+\t\t\t\t.shipDate(req.getShipDate())\n+\t\t\t\t.build();\n+\n+\t\tfinal ShipperTransportationId shipperTransportationId = createHUShipperTransportation(createShipperTransportationRequest);\n+\n+\t\tfinal CreatePackagesForInOutRequest createPackagesForInOutRequest = CreatePackagesForInOutRequest.builder()\n+\t\t\t\t.inOut(InterfaceWrapperHelper.create(inOut, de.metas.inout.model.I_M_InOut.class))\n+\t\t\t\t.trackingNumbers(req.getTrackingCodes())\n+\t\t\t\t.processed(true)//mark the M_Package records as processed\n+\t\t\t\t.build();\n+\n+\t\taddInOutWithoutHUToShipperTransportation(shipperTransportationId, ImmutableList.of(createPackagesForInOutRequest));\n+\n+\t\treturn shipperTransportationId;\n+\t}\n+\n+\tprivate ShipperTransportationId createHUShipperTransportation(@NonNull final CreateShipperTransportationRequest request)\n+\t{\n+\t\tfinal I_M_ShipperTransportation shipperTransportation = newInstance(I_M_ShipperTransportation.class);\n+\n+\t\tshipperTransportation.setAD_Org_ID(request.getOrgId().getRepoId());\n+\t\tshipperTransportation.setM_Shipper_ID(request.getShipperId().getRepoId());\n+\t\tshipperTransportation.setShipper_BPartner_ID(request.getBPartnerLocationId().getBpartnerId().getRepoId());\n+\t\tshipperTransportation.setShipper_Location_ID(request.getBPartnerLocationId().getRepoId());\n+\t\tshipperTransportation.setDateDoc(Timestamp.valueOf(request.getShipDate()));\n+\n+\t\tsaveRecord(shipperTransportation);", "originalCommit": "f4ed1ea62a1e4b285870c986d725682c09c9fe20", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg5NDA4Mg==", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460894082", "bodyText": "why not ShipperTransportationRepository spring component?", "author": "pvpurcarcosmin", "createdAt": "2020-07-27T13:36:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxNDQwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg5ODA4OA==", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460898088", "bodyText": "even better :)", "author": "teosarca", "createdAt": "2020-07-27T13:42:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxNDQwMg=="}], "type": "inlineReview", "revised_code": {"commit": "9c56f44fef5b4fc89497786e31fb3ccb214592f7", "chunk": "diff --git a/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java b/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java\nindex 1120ba4a5a..4d66c08e0b 100644\n--- a/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java\n+++ b/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java\n\n@@ -362,19 +360,19 @@ public class HUShipperTransportationBL implements IHUShipperTransportationBL\n \n \t\tfinal I_M_Warehouse warehouse = warehouseDAO.getById(warehouseId);\n \n-\t\tfinal int bPartnerLocationId = warehouse.getC_BPartner_Location_ID();\n+\t\tfinal int warehouseBPLocationId = warehouse.getC_BPartner_Location_ID();\n \n-\t\tfinal BPartnerLocationInfo bPartnerLocationInfo = bPartnerLocationInfoRepository.getById(bPartnerLocationId);\n+\t\tfinal BPartnerLocationInfo warehouseBPLocationInfo = bPartnerLocationInfoRepository.getById(warehouseBPLocationId);\n \n \t\tfinal CreateShipperTransportationRequest createShipperTransportationRequest = CreateShipperTransportationRequest\n \t\t\t\t.builder()\n \t\t\t\t.shipperId(req.getShipperId())\n-\t\t\t\t.bPartnerLocationId(bPartnerLocationInfo.getId())\n+\t\t\t\t.shipperBPartnerAndLocationId(warehouseBPLocationInfo.getId())\n \t\t\t\t.orgId(OrgId.ofRepoId(inOut.getAD_Org_ID()))\n \t\t\t\t.shipDate(req.getShipDate())\n \t\t\t\t.build();\n \n-\t\tfinal ShipperTransportationId shipperTransportationId = createHUShipperTransportation(createShipperTransportationRequest);\n+\t\tfinal ShipperTransportationId shipperTransportationId = shipperTransportationRepository.create(createShipperTransportationRequest);\n \n \t\tfinal CreatePackagesForInOutRequest createPackagesForInOutRequest = CreatePackagesForInOutRequest.builder()\n \t\t\t\t.inOut(InterfaceWrapperHelper.create(inOut, de.metas.inout.model.I_M_InOut.class))\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxNDY0MQ==", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460714641", "bodyText": "use TimeUtil", "author": "teosarca", "createdAt": "2020-07-27T08:04:16Z", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java", "diffHunk": "@@ -327,4 +346,59 @@ public I_M_ShipperTransportation getCommonM_ShipperTransportationOrNull(final Co\n \t\tfinal I_M_ShippingPackage firstPackage = shippingPackages.iterator().next();\n \t\treturn firstPackage.getM_ShipperTransportation();\n \t}\n+\n+\t@NonNull\n+\tpublic I_M_ShipperTransportation getById(@NonNull final ShipperTransportationId shipperTransportationId)\n+\t{\n+\t\treturn load(shipperTransportationId, I_M_ShipperTransportation.class);\n+\t}\n+\n+\t@NonNull\n+\tpublic ShipperTransportationId addTrackingCodesForInOutWithoutHU(@NonNull final AddTrackingCodesForInOutWithoutHUReq req)\n+\t{\n+\t\tfinal I_M_InOut inOut = inOutDAO.getById(req.getInOutId());\n+\n+\t\tfinal WarehouseId warehouseId =  WarehouseId.ofRepoId(inOut.getM_Warehouse_ID());\n+\n+\t\tfinal I_M_Warehouse warehouse = warehouseDAO.getById(warehouseId);\n+\n+\t\tfinal int bPartnerLocationId = warehouse.getC_BPartner_Location_ID();\n+\n+\t\tfinal BPartnerLocationInfo bPartnerLocationInfo = bPartnerLocationInfoRepository.getById(bPartnerLocationId);\n+\n+\t\tfinal CreateShipperTransportationRequest createShipperTransportationRequest = CreateShipperTransportationRequest\n+\t\t\t\t.builder()\n+\t\t\t\t.shipperId(req.getShipperId())\n+\t\t\t\t.bPartnerLocationId(bPartnerLocationInfo.getId())\n+\t\t\t\t.orgId(OrgId.ofRepoId(inOut.getAD_Org_ID()))\n+\t\t\t\t.shipDate(req.getShipDate())\n+\t\t\t\t.build();\n+\n+\t\tfinal ShipperTransportationId shipperTransportationId = createHUShipperTransportation(createShipperTransportationRequest);\n+\n+\t\tfinal CreatePackagesForInOutRequest createPackagesForInOutRequest = CreatePackagesForInOutRequest.builder()\n+\t\t\t\t.inOut(InterfaceWrapperHelper.create(inOut, de.metas.inout.model.I_M_InOut.class))\n+\t\t\t\t.trackingNumbers(req.getTrackingCodes())\n+\t\t\t\t.processed(true)//mark the M_Package records as processed\n+\t\t\t\t.build();\n+\n+\t\taddInOutWithoutHUToShipperTransportation(shipperTransportationId, ImmutableList.of(createPackagesForInOutRequest));\n+\n+\t\treturn shipperTransportationId;\n+\t}\n+\n+\tprivate ShipperTransportationId createHUShipperTransportation(@NonNull final CreateShipperTransportationRequest request)\n+\t{\n+\t\tfinal I_M_ShipperTransportation shipperTransportation = newInstance(I_M_ShipperTransportation.class);\n+\n+\t\tshipperTransportation.setAD_Org_ID(request.getOrgId().getRepoId());\n+\t\tshipperTransportation.setM_Shipper_ID(request.getShipperId().getRepoId());\n+\t\tshipperTransportation.setShipper_BPartner_ID(request.getBPartnerLocationId().getBpartnerId().getRepoId());\n+\t\tshipperTransportation.setShipper_Location_ID(request.getBPartnerLocationId().getRepoId());\n+\t\tshipperTransportation.setDateDoc(Timestamp.valueOf(request.getShipDate()));", "originalCommit": "f4ed1ea62a1e4b285870c986d725682c09c9fe20", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9c56f44fef5b4fc89497786e31fb3ccb214592f7", "chunk": "diff --git a/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java b/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java\nindex 1120ba4a5a..4d66c08e0b 100644\n--- a/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java\n+++ b/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java\n\n@@ -362,19 +360,19 @@ public class HUShipperTransportationBL implements IHUShipperTransportationBL\n \n \t\tfinal I_M_Warehouse warehouse = warehouseDAO.getById(warehouseId);\n \n-\t\tfinal int bPartnerLocationId = warehouse.getC_BPartner_Location_ID();\n+\t\tfinal int warehouseBPLocationId = warehouse.getC_BPartner_Location_ID();\n \n-\t\tfinal BPartnerLocationInfo bPartnerLocationInfo = bPartnerLocationInfoRepository.getById(bPartnerLocationId);\n+\t\tfinal BPartnerLocationInfo warehouseBPLocationInfo = bPartnerLocationInfoRepository.getById(warehouseBPLocationId);\n \n \t\tfinal CreateShipperTransportationRequest createShipperTransportationRequest = CreateShipperTransportationRequest\n \t\t\t\t.builder()\n \t\t\t\t.shipperId(req.getShipperId())\n-\t\t\t\t.bPartnerLocationId(bPartnerLocationInfo.getId())\n+\t\t\t\t.shipperBPartnerAndLocationId(warehouseBPLocationInfo.getId())\n \t\t\t\t.orgId(OrgId.ofRepoId(inOut.getAD_Org_ID()))\n \t\t\t\t.shipDate(req.getShipDate())\n \t\t\t\t.build();\n \n-\t\tfinal ShipperTransportationId shipperTransportationId = createHUShipperTransportation(createShipperTransportationRequest);\n+\t\tfinal ShipperTransportationId shipperTransportationId = shipperTransportationRepository.create(createShipperTransportationRequest);\n \n \t\tfinal CreatePackagesForInOutRequest createPackagesForInOutRequest = CreatePackagesForInOutRequest.builder()\n \t\t\t\t.inOut(InterfaceWrapperHelper.create(inOut, de.metas.inout.model.I_M_InOut.class))\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxNTAyOQ==", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460715029", "bodyText": "better call it shipperBPartnerAndLocationId", "author": "teosarca", "createdAt": "2020-07-27T08:05:02Z", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/CreateShipperTransportationRequest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * #%L\n+ * de.metas.handlingunits.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.handlingunits.impl;\n+\n+import de.metas.bpartner.BPartnerLocationId;\n+import de.metas.organization.OrgId;\n+import de.metas.shipping.ShipperId;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import lombok.Value;\n+\n+import java.time.LocalDateTime;\n+\n+@Value\n+@Builder\n+public class CreateShipperTransportationRequest\n+{\n+\t@NonNull\n+\tOrgId orgId;\n+\n+\t@NonNull\n+\tShipperId shipperId;\n+\n+\t@NonNull\n+\tBPartnerLocationId bPartnerLocationId;", "originalCommit": "f4ed1ea62a1e4b285870c986d725682c09c9fe20", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9c56f44fef5b4fc89497786e31fb3ccb214592f7", "chunk": "diff --git a/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/CreateShipperTransportationRequest.java b/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/CreateShipperTransportationRequest.java\nindex 3f065f2bd6..2efc7dc0d9 100644\n--- a/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/CreateShipperTransportationRequest.java\n+++ b/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/CreateShipperTransportationRequest.java\n\n@@ -29,11 +29,11 @@ import lombok.Builder;\n import lombok.NonNull;\n import lombok.Value;\n \n-import java.time.LocalDateTime;\n+import java.time.ZonedDateTime;\n \n @Value\n @Builder\n-public class CreateShipperTransportationRequest\n+class CreateShipperTransportationRequest\n {\n \t@NonNull\n \tOrgId orgId;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxNTM3Nw==", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460715377", "bodyText": "consider changing to package level access", "author": "teosarca", "createdAt": "2020-07-27T08:05:41Z", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/CreateShipperTransportationRequest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * #%L\n+ * de.metas.handlingunits.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.handlingunits.impl;\n+\n+import de.metas.bpartner.BPartnerLocationId;\n+import de.metas.organization.OrgId;\n+import de.metas.shipping.ShipperId;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import lombok.Value;\n+\n+import java.time.LocalDateTime;\n+\n+@Value\n+@Builder\n+public class CreateShipperTransportationRequest", "originalCommit": "f4ed1ea62a1e4b285870c986d725682c09c9fe20", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9c56f44fef5b4fc89497786e31fb3ccb214592f7", "chunk": "diff --git a/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/CreateShipperTransportationRequest.java b/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/CreateShipperTransportationRequest.java\nindex 3f065f2bd6..2efc7dc0d9 100644\n--- a/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/CreateShipperTransportationRequest.java\n+++ b/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/CreateShipperTransportationRequest.java\n\n@@ -29,11 +29,11 @@ import lombok.Builder;\n import lombok.NonNull;\n import lombok.Value;\n \n-import java.time.LocalDateTime;\n+import java.time.ZonedDateTime;\n \n @Value\n @Builder\n-public class CreateShipperTransportationRequest\n+class CreateShipperTransportationRequest\n {\n \t@NonNull\n \tOrgId orgId;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxNzMzMA==", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460717330", "bodyText": "why not ZonedDateTime?", "author": "teosarca", "createdAt": "2020-07-27T08:09:44Z", "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/inoutcandidate/api/ApplyShipmentScheduleChangesRequest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * #%L\n+ * de.metas.swat.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.inoutcandidate.api;\n+\n+import de.metas.bpartner.BPartnerLocationId;\n+import de.metas.inoutcandidate.ShipmentScheduleId;\n+import de.metas.order.DeliveryRule;\n+import de.metas.util.Check;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import lombok.Value;\n+import org.adempiere.mm.attributes.api.CreateAttributeInstanceReq;\n+\n+import javax.annotation.Nullable;\n+import java.math.BigDecimal;\n+import java.time.LocalDateTime;\n+import java.util.List;\n+\n+@Value\n+@Builder\n+public class ApplyShipmentScheduleChangesRequest\n+{\n+\t@NonNull\n+\tShipmentScheduleId shipmentScheduleId;\n+\n+\t@Nullable\n+\tBPartnerLocationId bPartnerLocationIdOverride;\n+\n+\t@Nullable\n+\tBigDecimal qtyToDeliverStockingUOM;\n+\n+\t@Nullable\n+\tList<CreateAttributeInstanceReq> attributes;\n+\n+\t@Nullable\n+\tLocalDateTime deliveryDate;", "originalCommit": "f4ed1ea62a1e4b285870c986d725682c09c9fe20", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9c56f44fef5b4fc89497786e31fb3ccb214592f7", "chunk": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/inoutcandidate/api/ApplyShipmentScheduleChangesRequest.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/inoutcandidate/api/ApplyShipmentScheduleChangesRequest.java\nindex 4e568d290b..11b8c54464 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/inoutcandidate/api/ApplyShipmentScheduleChangesRequest.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/inoutcandidate/api/ApplyShipmentScheduleChangesRequest.java\n\n@@ -33,7 +33,7 @@ import org.adempiere.mm.attributes.api.CreateAttributeInstanceReq;\n \n import javax.annotation.Nullable;\n import java.math.BigDecimal;\n-import java.time.LocalDateTime;\n+import java.time.ZonedDateTime;\n import java.util.List;\n \n @Value\n"}}, {"oid": "9c56f44fef5b4fc89497786e31fb3ccb214592f7", "url": "https://github.com/metasfresh/metasfresh/commit/9c56f44fef5b4fc89497786e31fb3ccb214592f7", "message": "requested changes\nrefs: https://github.com/metasfresh/metasfresh/issues/7052", "committedDate": "2020-07-27T14:23:25Z", "type": "commit"}, {"oid": "46145f0fb57d1d396997049317a242f897dbc224", "url": "https://github.com/metasfresh/metasfresh/commit/46145f0fb57d1d396997049317a242f897dbc224", "message": "Merge remote-tracking branch 'origin/gh7052' into gh7052", "committedDate": "2020-07-27T14:25:47Z", "type": "commit"}, {"oid": "49fdde20bb0772ea706aa897324d92d58914431f", "url": "https://github.com/metasfresh/metasfresh/commit/49fdde20bb0772ea706aa897324d92d58914431f", "message": "QA", "committedDate": "2020-07-28T11:32:03Z", "type": "commit"}, {"oid": "282a86270d54f94ec89145ae226b803592203fbf", "url": "https://github.com/metasfresh/metasfresh/commit/282a86270d54f94ec89145ae226b803592203fbf", "message": "fix compile error", "committedDate": "2020-07-29T05:58:08Z", "type": "commit"}, {"oid": "7c45fc7f2f48fcf2748aa17fe016f3daf939b144", "url": "https://github.com/metasfresh/metasfresh/commit/7c45fc7f2f48fcf2748aa17fe016f3daf939b144", "message": "small fixes\nrefs: https://github.com/metasfresh/metasfresh/issues/7052", "committedDate": "2020-07-29T09:31:37Z", "type": "commit"}, {"oid": "4e28c8291e3d2a74daf8da5a5e4b4496224e6af2", "url": "https://github.com/metasfresh/metasfresh/commit/4e28c8291e3d2a74daf8da5a5e4b4496224e6af2", "message": "small fixes 2\nrefs: https://github.com/metasfresh/metasfresh/issues/7052", "committedDate": "2020-07-29T11:05:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM2NjEzMA==", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r461366130", "bodyText": "IMHO this method is not needed.\nIn tests, you can simply register the service using SpringContextHolder.registerJUnitBean(...) methods.", "author": "teosarca", "createdAt": "2020-07-28T07:12:11Z", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/ShipperTransportationRepository.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * #%L\n+ * de.metas.handlingunits.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.handlingunits.impl;\n+\n+import de.metas.shipping.model.I_M_ShipperTransportation;\n+import de.metas.shipping.model.ShipperTransportationId;\n+import lombok.NonNull;\n+import org.compiere.Adempiere;\n+import org.compiere.SpringContextHolder;\n+import org.compiere.util.TimeUtil;\n+import org.springframework.stereotype.Repository;\n+\n+import static org.adempiere.model.InterfaceWrapperHelper.newInstance;\n+import static org.adempiere.model.InterfaceWrapperHelper.saveRecord;\n+\n+@Repository\n+public class ShipperTransportationRepository\n+{\n+\tpublic static ShipperTransportationRepository get()", "originalCommit": "46145f0fb57d1d396997049317a242f897dbc224", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f2f565da7485115872f1142da3a0979f036c46f", "chunk": "diff --git a/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/ShipperTransportationRepository.java b/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/ShipperTransportationRepository.java\nindex adbccd3e15..77b010b220 100644\n--- a/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/ShipperTransportationRepository.java\n+++ b/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/ShipperTransportationRepository.java\n\n@@ -25,8 +25,6 @@ package de.metas.handlingunits.impl;\n import de.metas.shipping.model.I_M_ShipperTransportation;\n import de.metas.shipping.model.ShipperTransportationId;\n import lombok.NonNull;\n-import org.compiere.Adempiere;\n-import org.compiere.SpringContextHolder;\n import org.compiere.util.TimeUtil;\n import org.springframework.stereotype.Repository;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM2NjI2MQ==", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r461366261", "bodyText": "IMHO this method is not needed.\nIn tests, you can simply register the service using SpringContextHolder.registerJUnitBean(...) methods.", "author": "teosarca", "createdAt": "2020-07-28T07:12:30Z", "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/bpartner/service/BPartnerLocationInfoRepository.java", "diffHunk": "@@ -35,6 +36,15 @@\n @Repository\n public class BPartnerLocationInfoRepository\n {\n+\tpublic static BPartnerLocationInfoRepository get()", "originalCommit": "46145f0fb57d1d396997049317a242f897dbc224", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "49fdde20bb0772ea706aa897324d92d58914431f", "chunk": "diff --git a/backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/bpartner/service/BPartnerLocationInfoRepository.java b/backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/bpartner/service/BPartnerLocationInfoRepository.java\nindex c6cfd8b58d..040312f0a1 100644\n--- a/backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/bpartner/service/BPartnerLocationInfoRepository.java\n+++ b/backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/bpartner/service/BPartnerLocationInfoRepository.java\n\n@@ -36,18 +34,16 @@ import static org.adempiere.model.InterfaceWrapperHelper.load;\n @Repository\n public class BPartnerLocationInfoRepository\n {\n-\tpublic static BPartnerLocationInfoRepository get()\n+\tprivate final IBPartnerDAO bpartnerDAO = Services.get(IBPartnerDAO.class);\n+\n+\tpublic BPartnerLocationInfo getByBPartnerLocationId(@NonNull final BPartnerLocationId bplocationId)\n \t{\n-\t\tif (Adempiere.isUnitTestMode())\n-\t\t{\n-\t\t\treturn new BPartnerLocationInfoRepository();\n-\t\t}\n-\t\treturn SpringContextHolder.instance.getBean(BPartnerLocationInfoRepository.class);\n+\t\tfinal I_C_BPartner_Location bpLocation = bpartnerDAO.getBPartnerLocationByIdInTrx(bplocationId);\n+\t\treturn toBPartnerLocation(bpLocation);\n \t}\n \n-\tprivate BPartnerLocationInfo toBPartnerLocation(@NonNull final I_C_BPartner_Location bpartnerLocationRecord)\n+\tprivate static BPartnerLocationInfo toBPartnerLocation(@NonNull final I_C_BPartner_Location bpartnerLocationRecord)\n \t{\n-\n \t\treturn BPartnerLocationInfo.builder()\n \t\t\t\t.id(BPartnerLocationId.ofRepoId(BPartnerId.ofRepoId(bpartnerLocationRecord.getC_BPartner_ID()), bpartnerLocationRecord.getC_BPartner_Location_ID()))\n \t\t\t\t.bpartnerId(BPartnerId.ofRepoId(bpartnerLocationRecord.getC_BPartner_ID()))\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM2ODY0MA==", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r461368640", "bodyText": "why not wrapping the whole thing in a try/catch block?", "author": "teosarca", "createdAt": "2020-07-28T07:17:10Z", "path": "backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/ShipmentRestController.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * #%L\n+ * de.metas.business.rest-api-impl\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.rest_api.shipping;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.Profiles;\n+import de.metas.common.rest_api.JsonMetasfreshId;\n+import de.metas.common.shipment.JsonCreateShipmentRequest;\n+import de.metas.common.shipment.JsonCreateShipmentResponse;\n+import de.metas.inout.model.I_M_InOut;\n+import de.metas.inoutcandidate.api.InOutGenerateResult;\n+import de.metas.logging.LogManager;\n+import de.metas.rest_api.shipping.info.GenerateShipmentsRequest;\n+import de.metas.rest_api.utils.JsonErrors;\n+import de.metas.util.web.MetasfreshRestAPIConstants;\n+import org.compiere.util.Env;\n+import org.slf4j.Logger;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RequestMapping(ShipmentRestController.ENDPOINT)\n+@RestController\n+@Profile(Profiles.PROFILE_App)\n+public class ShipmentRestController\n+{\n+\tpublic static final String ENDPOINT = MetasfreshRestAPIConstants.ENDPOINT_API + \"/shipment\";\n+\n+\tprivate static final Logger log = LogManager.getLogger(ShipmentRestController.class);\n+\n+\tprivate final de.metas.rest_api.shipping.ShipmentService shipmentService;\n+\n+\tpublic ShipmentRestController(final de.metas.rest_api.shipping.ShipmentService shipmentService)\n+\t{\n+\t\tthis.shipmentService = shipmentService;\n+\t}\n+\n+\t@PostMapping\n+\tpublic ResponseEntity<?> createShipments(@RequestBody final JsonCreateShipmentRequest request)\n+\t{\n+\t\tlog.debug(\"*** createShipments: Started with request: {}\", request);\n+\n+\t\ttry\n+\t\t{\n+\t\t\tshipmentService.validateRequest(request);\n+\t\t}\n+\t\tcatch (final Exception e)\n+\t\t{\n+\t\t\tfinal String adLanguage = Env.getADLanguageOrBaseLanguage();\n+\t\t\treturn ResponseEntity.badRequest()\n+\t\t\t\t\t.body(JsonErrors.ofThrowable(e, adLanguage));\n+\t\t}\n+\n+\t\trequest.getCreateShipmentInfoList()", "originalCommit": "46145f0fb57d1d396997049317a242f897dbc224", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI3ODkwNg==", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r462278906", "bodyText": "initially I had some logic for that, but after the latest changes it doesn't make sense anymore.", "author": "pvpurcarcosmin", "createdAt": "2020-07-29T13:00:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM2ODY0MA=="}], "type": "inlineReview", "revised_code": {"commit": "49fdde20bb0772ea706aa897324d92d58914431f", "chunk": "diff --git a/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/ShipmentRestController.java b/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/ShipmentRestController.java\nindex 8bc43ea26c..f089ab8974 100644\n--- a/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/ShipmentRestController.java\n+++ b/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/ShipmentRestController.java\n\n@@ -22,7 +22,17 @@\n \n package de.metas.rest_api.shipping;\n \n+import org.compiere.util.Env;\n+import org.slf4j.Logger;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n import com.google.common.collect.ImmutableList;\n+\n import de.metas.Profiles;\n import de.metas.common.rest_api.JsonMetasfreshId;\n import de.metas.common.shipment.JsonCreateShipmentRequest;\n"}}, {"oid": "9f2f565da7485115872f1142da3a0979f036c46f", "url": "https://github.com/metasfresh/metasfresh/commit/9f2f565da7485115872f1142da3a0979f036c46f", "message": "requested changes\nrefs: https://github.com/metasfresh/metasfresh/issues/7052", "committedDate": "2020-07-29T13:20:01Z", "type": "commit"}, {"oid": "508e816f856da122391b2dd8490fc8ce489be402", "url": "https://github.com/metasfresh/metasfresh/commit/508e816f856da122391b2dd8490fc8ce489be402", "message": "small fix\nrefs: https://github.com/metasfresh/metasfresh/issues/7052", "committedDate": "2020-07-29T14:15:16Z", "type": "commit"}, {"oid": "4182393b619c66a7b2553f6c953a3c4c8dc04057", "url": "https://github.com/metasfresh/metasfresh/commit/4182393b619c66a7b2553f6c953a3c4c8dc04057", "message": "unit test fix\nrefs: https://github.com/metasfresh/metasfresh/issues/7052", "committedDate": "2020-07-29T22:20:25Z", "type": "commit"}]}