{"pr_number": 9851, "pr_title": "#9850 - Jasper Document of voided Invoices not correct", "pr_createdAt": "2020-08-26T15:07:03Z", "pr_url": "https://github.com/metasfresh/metasfresh/pull/9851", "timeline": [{"oid": "6c850535cf58cb907ad93ae681c5dc65baa1a9e0", "url": "https://github.com/metasfresh/metasfresh/commit/6c850535cf58cb907ad93ae681c5dc65baa1a9e0", "message": "#9850 - WIP First commit.\n - functionality working.\n - still need to refractor code and write unit tests", "committedDate": "2020-08-26T15:06:14Z", "type": "commit"}, {"oid": "d1fd07089aa1291a3a5859405d4934e2b1ca46a8", "url": "https://github.com/metasfresh/metasfresh/commit/d1fd07089aa1291a3a5859405d4934e2b1ca46a8", "message": "#9850 Refractored code and added test.", "committedDate": "2020-08-26T22:48:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODA3OTUyOQ==", "url": "https://github.com/metasfresh/metasfresh/pull/9851#discussion_r478079529", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t// ModelValidationEngine.get().fireDocValidate(this, ModelValidator.TIMING_AFTER_REVERSEACCRUAL);", "author": "metas-ts", "createdAt": "2020-08-27T04:08:49Z", "path": "backend/de.metas.business/src/main/java-legacy/org/compiere/model/MInvoice.java", "diffHunk": "@@ -1629,9 +1626,10 @@ public boolean reverseCorrectIt()\n \n \t\t// After reverseCorrect\n \t\tModelValidationEngine.get().fireDocValidate(this, ModelValidator.TIMING_AFTER_REVERSECORRECT);\n+\t\t// ModelValidationEngine.get().fireDocValidate(this, ModelValidator.TIMING_AFTER_REVERSEACCRUAL);", "originalCommit": "d1fd07089aa1291a3a5859405d4934e2b1ca46a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "749747144da6c4e0333370856aeaa47b72ab0ae7", "chunk": "diff --git a/backend/de.metas.business/src/main/java-legacy/org/compiere/model/MInvoice.java b/backend/de.metas.business/src/main/java-legacy/org/compiere/model/MInvoice.java\nindex 4a6cae48ab..b8cd670444 100644\n--- a/backend/de.metas.business/src/main/java-legacy/org/compiere/model/MInvoice.java\n+++ b/backend/de.metas.business/src/main/java-legacy/org/compiere/model/MInvoice.java\n\n@@ -1626,7 +1626,6 @@ public class MInvoice extends X_C_Invoice implements IDocument\n \n \t\t// After reverseCorrect\n \t\tModelValidationEngine.get().fireDocValidate(this, ModelValidator.TIMING_AFTER_REVERSECORRECT);\n-\t\t// ModelValidationEngine.get().fireDocValidate(this, ModelValidator.TIMING_AFTER_REVERSEACCRUAL);\n \n \t\treturn true;\n \t}    // reverseCorrectIt\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODA5Mjg2NA==", "url": "https://github.com/metasfresh/metasfresh/pull/9851#discussion_r478092864", "bodyText": "invoiceDAO already has invoice line related methods. please move this method there if it's still needed in the end", "author": "metas-ts", "createdAt": "2020-08-27T04:23:03Z", "path": "backend/de.metas.business/src/main/java/de/metas/invoice/service/IInvoiceLineDAO.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * #%L\n+ * de.metas.business\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.invoice.service;\n+\n+import de.metas.adempiere.model.I_C_InvoiceLine;\n+import de.metas.invoice.InvoiceLineId;\n+import de.metas.util.ISingletonService;\n+\n+public interface IInvoiceLineDAO extends ISingletonService", "originalCommit": "d1fd07089aa1291a3a5859405d4934e2b1ca46a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "749747144da6c4e0333370856aeaa47b72ab0ae7", "chunk": "diff --git a/backend/de.metas.business/src/main/java/de/metas/invoice/service/IInvoiceLineDAO.java b/backend/de.metas.business/src/main/java/de/metas/invoice/service/IInvoiceLineDAO.java\ndeleted file mode 100644\nindex 28aba063cc..0000000000\n--- a/backend/de.metas.business/src/main/java/de/metas/invoice/service/IInvoiceLineDAO.java\n+++ /dev/null\n\n@@ -1,32 +0,0 @@\n-/*\n- * #%L\n- * de.metas.business\n- * %%\n- * Copyright (C) 2020 metas GmbH\n- * %%\n- * This program is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU General Public License as\n- * published by the Free Software Foundation, either version 2 of the\n- * License, or (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n- * GNU General Public License for more details.\n- *\n- * You should have received a copy of the GNU General Public\n- * License along with this program. If not, see\n- * <http://www.gnu.org/licenses/gpl-2.0.html>.\n- * #L%\n- */\n-\n-package de.metas.invoice.service;\n-\n-import de.metas.adempiere.model.I_C_InvoiceLine;\n-import de.metas.invoice.InvoiceLineId;\n-import de.metas.util.ISingletonService;\n-\n-public interface IInvoiceLineDAO extends ISingletonService\n-{\n-\tI_C_InvoiceLine retrieveById(InvoiceLineId invoiceLineId);\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODEwMjc2NA==", "url": "https://github.com/metasfresh/metasfresh/pull/9851#discussion_r478102764", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t// @DocValidate(timings = { ModelValidator.TIMING_AFTER_REVERSEACCRUAL })\n          \n          \n            \n            \t// public void handleReversalDetails(final I_C_Invoice invoice)\n          \n          \n            \n            \t// {\n          \n          \n            \n            \t// \tif (invoice.getReversal_ID() > 0)\n          \n          \n            \n            \t// \t{\n          \n          \n            \n            \t// \t\tInvoiceWithDetailsRepository invoiceWithDetailsRepository = new InvoiceWithDetailsRepository();\n          \n          \n            \n            \t// \t\tinvoiceWithDetailsRepository.saveReversalDetails(InvoiceId.ofRepoId(invoice.getC_Invoice_ID()), InvoiceId.ofRepoId(invoice.getReversal_ID()));\n          \n          \n            \n            \t// \t}\n          \n          \n            \n            \t// }\n          \n      \n    \n    \n  \n\ncleanup", "author": "metas-ts", "createdAt": "2020-08-27T04:33:28Z", "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/modelvalidator/C_Invoice.java", "diffHunk": "@@ -55,8 +60,23 @@ public void handleReversalForInvoice(final I_C_Invoice invoice)\n \t\t{\n \t\t\tServices.get(IInvoiceCandBL.class).handleReversalForInvoice(invoice);\n \t\t}\n+\t\tif (invoice.getReversal_ID() > 0)\n+\t\t{\n+\t\t\tInvoiceWithDetailsRepository invoiceWithDetailsRepository = new InvoiceWithDetailsRepository();\n+\t\t\tinvoiceWithDetailsRepository.saveReversalDetails(InvoiceId.ofRepoId(invoice.getC_Invoice_ID()), InvoiceId.ofRepoId(invoice.getReversal_ID()));\n+\t\t}\n \t}\n \n+\t// @DocValidate(timings = { ModelValidator.TIMING_AFTER_REVERSEACCRUAL })\n+\t// public void handleReversalDetails(final I_C_Invoice invoice)\n+\t// {\n+\t// \tif (invoice.getReversal_ID() > 0)\n+\t// \t{\n+\t// \t\tInvoiceWithDetailsRepository invoiceWithDetailsRepository = new InvoiceWithDetailsRepository();\n+\t// \t\tinvoiceWithDetailsRepository.saveReversalDetails(InvoiceId.ofRepoId(invoice.getC_Invoice_ID()), InvoiceId.ofRepoId(invoice.getReversal_ID()));\n+\t// \t}\n+\t// }", "originalCommit": "d1fd07089aa1291a3a5859405d4934e2b1ca46a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODIwMzE2MQ==", "url": "https://github.com/metasfresh/metasfresh/pull/9851#discussion_r478203161", "bodyText": "sorry, thought I cleaned them.", "author": "dragospodariu96", "createdAt": "2020-08-27T07:08:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODEwMjc2NA=="}], "type": "inlineReview", "revised_code": {"commit": "749747144da6c4e0333370856aeaa47b72ab0ae7", "chunk": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/modelvalidator/C_Invoice.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/modelvalidator/C_Invoice.java\nindex 43d46d47fd..c383c5ecb4 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/modelvalidator/C_Invoice.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/modelvalidator/C_Invoice.java\n\n@@ -62,21 +66,10 @@ public class C_Invoice\n \t\t}\n \t\tif (invoice.getReversal_ID() > 0)\n \t\t{\n-\t\t\tInvoiceWithDetailsRepository invoiceWithDetailsRepository = new InvoiceWithDetailsRepository();\n-\t\t\tinvoiceWithDetailsRepository.saveReversalDetails(InvoiceId.ofRepoId(invoice.getC_Invoice_ID()), InvoiceId.ofRepoId(invoice.getReversal_ID()));\n+\t\t\tinvoiceWithDetailsService.copyDetailsToReversal(InvoiceId.ofRepoId(invoice.getC_Invoice_ID()), InvoiceId.ofRepoId(invoice.getReversal_ID()));\n \t\t}\n \t}\n \n-\t// @DocValidate(timings = { ModelValidator.TIMING_AFTER_REVERSEACCRUAL })\n-\t// public void handleReversalDetails(final I_C_Invoice invoice)\n-\t// {\n-\t// \tif (invoice.getReversal_ID() > 0)\n-\t// \t{\n-\t// \t\tInvoiceWithDetailsRepository invoiceWithDetailsRepository = new InvoiceWithDetailsRepository();\n-\t// \t\tinvoiceWithDetailsRepository.saveReversalDetails(InvoiceId.ofRepoId(invoice.getC_Invoice_ID()), InvoiceId.ofRepoId(invoice.getReversal_ID()));\n-\t// \t}\n-\t// }\n-\n \t@DocValidate(timings = { ModelValidator.TIMING_AFTER_COMPLETE })\n \tpublic void closePartiallyInvoiced_InvoiceCandidates(final I_C_Invoice invoice)\n \t{\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODEwMzIzMw==", "url": "https://github.com/metasfresh/metasfresh/pull/9851#discussion_r478103233", "bodyText": "Suggested change", "author": "metas-ts", "createdAt": "2020-08-27T04:33:59Z", "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/modelvalidator/C_Invoice.java", "diffHunk": "@@ -73,5 +93,7 @@ public void candidatesUnProcess(final I_C_Invoice invoice)\n \t\t{\n \t\t\tServices.get(IInvoiceCandBL.class).candidates_unProcess(invoice);\n \t\t}\n+\n+", "originalCommit": "d1fd07089aa1291a3a5859405d4934e2b1ca46a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "749747144da6c4e0333370856aeaa47b72ab0ae7", "chunk": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/modelvalidator/C_Invoice.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/modelvalidator/C_Invoice.java\nindex 43d46d47fd..c383c5ecb4 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/modelvalidator/C_Invoice.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/modelvalidator/C_Invoice.java\n\n@@ -94,6 +87,5 @@ public class C_Invoice\n \t\t\tServices.get(IInvoiceCandBL.class).candidates_unProcess(invoice);\n \t\t}\n \n-\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODEwNTA5MA==", "url": "https://github.com/metasfresh/metasfresh/pull/9851#discussion_r478105090", "bodyText": "InvoiceWithDetailsRepository is a spring @Service component, like this model interceptor;\ntherefore, please create a constructor for C_Invoice with InvoiceWithDetailsRepository as parameter and inject it.", "author": "metas-ts", "createdAt": "2020-08-27T04:36:19Z", "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/modelvalidator/C_Invoice.java", "diffHunk": "@@ -55,8 +60,23 @@ public void handleReversalForInvoice(final I_C_Invoice invoice)\n \t\t{\n \t\t\tServices.get(IInvoiceCandBL.class).handleReversalForInvoice(invoice);\n \t\t}\n+\t\tif (invoice.getReversal_ID() > 0)\n+\t\t{\n+\t\t\tInvoiceWithDetailsRepository invoiceWithDetailsRepository = new InvoiceWithDetailsRepository();", "originalCommit": "d1fd07089aa1291a3a5859405d4934e2b1ca46a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "749747144da6c4e0333370856aeaa47b72ab0ae7", "chunk": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/modelvalidator/C_Invoice.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/modelvalidator/C_Invoice.java\nindex 43d46d47fd..c383c5ecb4 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/modelvalidator/C_Invoice.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/modelvalidator/C_Invoice.java\n\n@@ -62,21 +66,10 @@ public class C_Invoice\n \t\t}\n \t\tif (invoice.getReversal_ID() > 0)\n \t\t{\n-\t\t\tInvoiceWithDetailsRepository invoiceWithDetailsRepository = new InvoiceWithDetailsRepository();\n-\t\t\tinvoiceWithDetailsRepository.saveReversalDetails(InvoiceId.ofRepoId(invoice.getC_Invoice_ID()), InvoiceId.ofRepoId(invoice.getReversal_ID()));\n+\t\t\tinvoiceWithDetailsService.copyDetailsToReversal(InvoiceId.ofRepoId(invoice.getC_Invoice_ID()), InvoiceId.ofRepoId(invoice.getReversal_ID()));\n \t\t}\n \t}\n \n-\t// @DocValidate(timings = { ModelValidator.TIMING_AFTER_REVERSEACCRUAL })\n-\t// public void handleReversalDetails(final I_C_Invoice invoice)\n-\t// {\n-\t// \tif (invoice.getReversal_ID() > 0)\n-\t// \t{\n-\t// \t\tInvoiceWithDetailsRepository invoiceWithDetailsRepository = new InvoiceWithDetailsRepository();\n-\t// \t\tinvoiceWithDetailsRepository.saveReversalDetails(InvoiceId.ofRepoId(invoice.getC_Invoice_ID()), InvoiceId.ofRepoId(invoice.getReversal_ID()));\n-\t// \t}\n-\t// }\n-\n \t@DocValidate(timings = { ModelValidator.TIMING_AFTER_COMPLETE })\n \tpublic void closePartiallyInvoiced_InvoiceCandidates(final I_C_Invoice invoice)\n \t{\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODEwNTQ1Ng==", "url": "https://github.com/metasfresh/metasfresh/pull/9851#discussion_r478105456", "bodyText": "it looks like you don't use this", "author": "metas-ts", "createdAt": "2020-08-27T04:36:59Z", "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/modelvalidator/C_Invoice.java", "diffHunk": "@@ -36,6 +39,8 @@\n @Interceptor(I_C_Invoice.class)\n public class C_Invoice\n {\n+\tprivate final IInvoiceBL invoiceBL = Services.get(IInvoiceBL.class);", "originalCommit": "d1fd07089aa1291a3a5859405d4934e2b1ca46a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "749747144da6c4e0333370856aeaa47b72ab0ae7", "chunk": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/modelvalidator/C_Invoice.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/modelvalidator/C_Invoice.java\nindex 43d46d47fd..c383c5ecb4 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/modelvalidator/C_Invoice.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/modelvalidator/C_Invoice.java\n\n@@ -22,24 +22,28 @@ package de.metas.invoicecandidate.modelvalidator;\n  * #L%\n  */\n \n-import de.metas.invoice.InvoiceId;\n-import de.metas.invoice.detail.InvoiceWithDetailsRepository;\n-import de.metas.invoice.service.IInvoiceBL;\n-import org.adempiere.ad.modelvalidator.annotations.DocValidate;\n-import org.adempiere.ad.modelvalidator.annotations.Interceptor;\n-import org.compiere.model.ModelValidator;\n-import org.slf4j.MDC.MDCCloseable;\n-\n import de.metas.adempiere.model.I_C_Invoice;\n+import de.metas.invoice.InvoiceId;\n+import de.metas.invoice.detail.InvoiceWithDetailsService;\n import de.metas.invoice.service.IInvoiceDAO;\n import de.metas.invoicecandidate.api.IInvoiceCandBL;\n import de.metas.logging.TableRecordMDC;\n import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.modelvalidator.annotations.DocValidate;\n+import org.adempiere.ad.modelvalidator.annotations.Interceptor;\n+import org.compiere.model.ModelValidator;\n+import org.slf4j.MDC.MDCCloseable;\n \n @Interceptor(I_C_Invoice.class)\n public class C_Invoice\n {\n-\tprivate final IInvoiceBL invoiceBL = Services.get(IInvoiceBL.class);\n+\tprivate final InvoiceWithDetailsService invoiceWithDetailsService;\n+\n+\tpublic C_Invoice(@NonNull InvoiceWithDetailsService invoiceWithDetailsService)\n+\t{\n+\t\tthis.invoiceWithDetailsService = invoiceWithDetailsService;\n+\t}\n \n \t@DocValidate(timings = { ModelValidator.TIMING_AFTER_COMPLETE, ModelValidator.TIMING_AFTER_VOID, ModelValidator.TIMING_AFTER_CLOSE })\n \tpublic void handleCompleteForInvoice(final I_C_Invoice invoice)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODExMTQ1MA==", "url": "https://github.com/metasfresh/metasfresh/pull/9851#discussion_r478111450", "bodyText": "I modernized this test a bit, according to our guidelines and following the save() test above it (going to push it after this review).\nI found that you don't copy the details, but just update the existing ones.\nThen looked again at your pgAdmin-Screenshots and saw it there as well.", "author": "metas-ts", "createdAt": "2020-08-27T04:46:36Z", "path": "backend/de.metas.business/src/test/java/de/metas/invoice/detail/InvoiceWithDetailsRepositoryTest.java", "diffHunk": "@@ -95,4 +102,82 @@ void save()\n \t\t\t\t\t\ttuple(orgId, 10, 20, null, expectedTimestamp)\n \t\t\t\t);\n \t}\n+\n+\t@Test\n+\tvoid saveReversalDetails()", "originalCommit": "d1fd07089aa1291a3a5859405d4934e2b1ca46a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8a420da0e13f3b9a005c06fb54b21cdf2dac7ee4", "chunk": "diff --git a/backend/de.metas.business/src/test/java/de/metas/invoice/detail/InvoiceWithDetailsRepositoryTest.java b/backend/de.metas.business/src/test/java/de/metas/invoice/detail/InvoiceWithDetailsRepositoryTest.java\nindex f4b9fe415f..59cdc9d593 100644\n--- a/backend/de.metas.business/src/test/java/de/metas/invoice/detail/InvoiceWithDetailsRepositoryTest.java\n+++ b/backend/de.metas.business/src/test/java/de/metas/invoice/detail/InvoiceWithDetailsRepositoryTest.java\n\n@@ -108,76 +108,66 @@ public class InvoiceWithDetailsRepositoryTest\n \t{\n \t\tfinal IInvoiceDAO invoiceDAO = Services.get(IInvoiceDAO.class);\n \n-\t\tI_C_Invoice invoice = InterfaceWrapperHelper.newInstance(I_C_Invoice.class);\n-\t\tInterfaceWrapperHelper.create(invoice, I_C_Invoice.class);\n+\t\tI_C_Invoice invoice = newInstance(I_C_Invoice.class);\n \t\tinvoice.setC_Invoice_ID(24);\n \t\tinvoice.setReversal_ID(42);\n \t\tinvoice.setC_BPartner_Location_ID(10);\n-\t\tInterfaceWrapperHelper.save(invoice);\n+\t\tsaveRecord(invoice);\n \n-\t\tI_C_InvoiceLine invoiceLine = InterfaceWrapperHelper.newInstance(I_C_InvoiceLine.class);\n+\t\tI_C_InvoiceLine invoiceLine = newInstance(I_C_InvoiceLine.class);\n \t\tinvoiceLine.setC_Invoice_ID(24);\n \t\tinvoiceLine.setC_InvoiceLine_ID(241);\n \t\tinvoiceLine.setLine(1);\n-\t\tInterfaceWrapperHelper.save(invoiceLine);\n+\t\tsaveRecord(invoiceLine);\n \n-\t\tI_C_Invoice_Detail invoice_detail = InterfaceWrapperHelper.newInstance(I_C_Invoice_Detail.class);\n+\t\tI_C_Invoice_Detail invoice_detail = newInstance(I_C_Invoice_Detail.class);\n \t\tinvoice_detail.setC_Invoice_Detail_ID(1001);\n \t\tinvoice_detail.setC_Invoice_ID(24);\n \t\tinvoice_detail.setSeqNo(25);\n \t\tinvoice_detail.setLabel(\"TestLabel\");\n \t\tinvoice_detail.setDescription(\"Test Description\");\n-\t\tInterfaceWrapperHelper.save(invoice_detail);\n+\t\tsaveRecord(invoice_detail);\n \n-\t\tI_C_Invoice_Detail invoice_detailLine = InterfaceWrapperHelper.newInstance(I_C_Invoice_Detail.class);\n+\t\tI_C_Invoice_Detail invoice_detailLine = newInstance(I_C_Invoice_Detail.class);\n \t\tinvoice_detailLine.setC_Invoice_Detail_ID(1002);\n \t\tinvoice_detailLine.setC_Invoice_ID(24);\n \t\tinvoice_detailLine.setC_InvoiceLine_ID(241);\n \t\tinvoice_detailLine.setSeqNo(26);\n \t\tinvoice_detailLine.setLabel(\"TestLabel for Line\");\n \t\tinvoice_detailLine.setDescription(\"Test Description for Line\");\n-\t\tInterfaceWrapperHelper.save(invoice_detailLine);\n-\n+\t\tsaveRecord(invoice_detailLine);\n \n-\t\tI_C_Invoice reversalInvoice = InterfaceWrapperHelper.newInstance(I_C_Invoice.class);\n+\t\tI_C_Invoice reversalInvoice = newInstance(I_C_Invoice.class);\n \t\tInterfaceWrapperHelper.create(invoice, I_C_Invoice.class);\n \t\treversalInvoice.setC_Invoice_ID(42);\n \t\treversalInvoice.setReversal_ID(24);\n \t\treversalInvoice.setC_BPartner_Location_ID(10);\n-\t\tInterfaceWrapperHelper.save(reversalInvoice);\n+\t\tsaveRecord(reversalInvoice);\n \n-\t\tI_C_InvoiceLine reversalInvoiceLine = InterfaceWrapperHelper.newInstance(I_C_InvoiceLine.class);\n+\t\tI_C_InvoiceLine reversalInvoiceLine = newInstance(I_C_InvoiceLine.class);\n \t\treversalInvoiceLine.setC_InvoiceLine_ID(421);\n \t\treversalInvoiceLine.setC_Invoice_ID(42);\n \t\treversalInvoiceLine.setLine(1);\n-\t\tInterfaceWrapperHelper.save(reversalInvoiceLine);\n-\n-\t\tfinal List<I_C_Invoice_Detail> detailRecords = Services.get(IQueryBL.class)\n-\t\t\t\t.createQueryBuilder(I_C_Invoice_Detail.class)\n-\t\t\t\t.addOnlyActiveRecordsFilter()\n-\t\t\t\t.addEqualsFilter(I_C_Invoice_Detail.COLUMNNAME_C_Invoice_ID, 24)\n-\t\t\t\t.create()\n-\t\t\t\t.list();\n-\n-\t\tassertThat(detailRecords.size() == 2);\n-\t\tassertThat(detailRecords.get(0).getC_Invoice_ID() == 24);\n-\t\tassertThat(detailRecords.get(1).getC_Invoice_ID() == 24);\n-\t\tassertThat(detailRecords.get(1).getC_InvoiceLine_ID() == 241);\n+\t\tsaveRecord(reversalInvoiceLine);\n \n+\t\t// guard\n+\t\tfinal List<I_C_Invoice_Detail> invoiceDetailRecordsBefore = POJOLookupMap.get().getRecords(I_C_Invoice_Detail.class);\n+\t\tassertThat(invoiceDetailRecordsBefore).extracting(\"C_Invoice_ID\", \"C_InvoiceLine_ID\")\n+\t\t\t\t.containsExactlyInAnyOrder(\n+\t\t\t\t\t\ttuple(24, 0),\n+\t\t\t\t\t\ttuple(24, 241));\n \n+\t\t// when\n \t\tInvoiceWithDetailsRepository invoiceWithDetailsRepository = new InvoiceWithDetailsRepository();\n \t\tinvoiceWithDetailsRepository.saveReversalDetails(InvoiceId.ofRepoId(24), InvoiceId.ofRepoId(42));\n \n-\t\tfinal List<I_C_Invoice_Detail> reversedDetailRecords = Services.get(IQueryBL.class)\n-\t\t\t\t.createQueryBuilder(I_C_Invoice_Detail.class)\n-\t\t\t\t.addOnlyActiveRecordsFilter()\n-\t\t\t\t.addEqualsFilter(I_C_Invoice_Detail.COLUMNNAME_C_Invoice_ID, 42)\n-\t\t\t\t.create()\n-\t\t\t\t.list();\n-\n-\t\tassertThat(reversedDetailRecords.size() == 2);\n-\t\tassertThat(reversedDetailRecords.get(0).getC_Invoice_ID() == 42);\n-\t\tassertThat(reversedDetailRecords.get(1).getC_Invoice_ID() == 42);\n-\t\tassertThat(reversedDetailRecords.get(1).getC_InvoiceLine_ID() == 421);\n+\t\t// then\n+\t\tfinal List<I_C_Invoice_Detail> invoiceDetailRecords = POJOLookupMap.get().getRecords(I_C_Invoice_Detail.class);\n+\t\tassertThat(invoiceDetailRecords).extracting(\"C_Invoice_ID\", \"C_InvoiceLine_ID\").hasSize(4)\n+\t\t\t\t.containsExactlyInAnyOrder(\n+\t\t\t\t\t\ttuple(24, 0),\n+\t\t\t\t\t\ttuple(24, 241),\n+\t\t\t\t\t\ttuple(42, 0),\n+\t\t\t\t\t\ttuple(42, 421));\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODExMjUyMg==", "url": "https://github.com/metasfresh/metasfresh/pull/9851#discussion_r478112522", "bodyText": "I can't see a difference between this InvoiceDetailItem and the duplicated code starting at line 172\nAlso, note that using the builder like this covers almost none of the various \"data\"-columns that C_Invoice_Detail sports. That was the deeper meaning when i wrote in the concept review\n\nAs talked, also please add all the C_Invoice_Detail's \"data\" columns as properties to that details-pojo\n\nIn case implementing like this is not practical, and you move over to a class called InvoiceWithDetailsService: as briefly mentioned, there is also a class to copy comlumns tfrom one record (e.g. C_Invoice_Detail) to another; i just looked, it's InterfaceWrapperHelper.copyValues()", "author": "metas-ts", "createdAt": "2020-08-27T04:48:19Z", "path": "backend/de.metas.business/src/main/java/de/metas/invoice/detail/InvoiceWithDetailsRepository.java", "diffHunk": "@@ -122,6 +120,67 @@ private void createOrUpdateDetailItem(\n \t\tInterfaceWrapperHelper.saveRecord(recordToSave);\n \t}\n \n+\tpublic void saveReversalDetails(@NonNull final InvoiceId originalInvoiceId, @NonNull final InvoiceId reversalInvoiceId)\n+\t{\n+\t\tfinal List<I_C_Invoice_Detail> detailRecords = getInvoiceDetailsListForInvoiceId(originalInvoiceId);\n+\n+\t\tfor (final I_C_Invoice_Detail detail : detailRecords)\n+\t\t{\n+\t\t\tif (detail.getC_InvoiceLine_ID() > 0)\n+\t\t\t{\n+\t\t\t\tdetail.setC_InvoiceLine_ID(invoiceDAO\n+\t\t\t\t\t\t.retrieveReversalLine(invoiceLineDAO\n+\t\t\t\t\t\t\t\t\t\t.retrieveById(InvoiceLineId.ofRepoId(detail.getC_Invoice_ID(),\n+\t\t\t\t\t\t\t\t\t\t\t\tdetail.getC_InvoiceLine_ID())),\n+\t\t\t\t\t\t\t\treversalInvoiceId.getRepoId()).getC_InvoiceLine_ID());\n+\t\t\t}\n+\t\t\tdetail.setC_Invoice_ID(reversalInvoiceId.getRepoId());\n+\t\t}\n+\n+\t\tfinal ImmutableMap.Builder<StagingRecordKey, I_C_Invoice_Detail> invoiceId2Record = ImmutableMap.builder();\n+\n+\t\tfor (final I_C_Invoice_Detail detailRecord : detailRecords)\n+\t\t{\n+\t\t\tfinal StagingRecordKey key = StagingRecordKey.forRecordOrNull(detailRecord);\n+\t\t\tif (key == null)\n+\t\t\t{\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\tinvoiceId2Record.put(key, detailRecord);\n+\t\t}\n+\t\tfinal ImmutableMap<StagingRecordKey, I_C_Invoice_Detail> reversedInvoiceDetailRecords = invoiceId2Record.build();\n+\n+\t\tfor (final I_C_Invoice_Detail detailItem : detailRecords)\n+\t\t{\n+\t\t\tif (!(detailItem.getC_InvoiceLine_ID() > 0))\n+\t\t\t{\n+\t\t\t\tcreateOrUpdateDetailItem(OrgId.ofRepoId(detailItem.getAD_Org_ID()),\n+\t\t\t\t\t\tInvoiceId.ofRepoId(detailItem.getC_Invoice_ID()),\n+\t\t\t\t\t\tInvoiceDetailItem", "originalCommit": "d1fd07089aa1291a3a5859405d4934e2b1ca46a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "749747144da6c4e0333370856aeaa47b72ab0ae7", "chunk": "diff --git a/backend/de.metas.business/src/main/java/de/metas/invoice/detail/InvoiceWithDetailsRepository.java b/backend/de.metas.business/src/main/java/de/metas/invoice/detail/InvoiceWithDetailsRepository.java\nindex 78918638b4..718160450c 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/invoice/detail/InvoiceWithDetailsRepository.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/invoice/detail/InvoiceWithDetailsRepository.java\n\n@@ -120,67 +116,6 @@ public class InvoiceWithDetailsRepository\n \t\tInterfaceWrapperHelper.saveRecord(recordToSave);\n \t}\n \n-\tpublic void saveReversalDetails(@NonNull final InvoiceId originalInvoiceId, @NonNull final InvoiceId reversalInvoiceId)\n-\t{\n-\t\tfinal List<I_C_Invoice_Detail> detailRecords = getInvoiceDetailsListForInvoiceId(originalInvoiceId);\n-\n-\t\tfor (final I_C_Invoice_Detail detail : detailRecords)\n-\t\t{\n-\t\t\tif (detail.getC_InvoiceLine_ID() > 0)\n-\t\t\t{\n-\t\t\t\tdetail.setC_InvoiceLine_ID(invoiceDAO\n-\t\t\t\t\t\t.retrieveReversalLine(invoiceLineDAO\n-\t\t\t\t\t\t\t\t\t\t.retrieveById(InvoiceLineId.ofRepoId(detail.getC_Invoice_ID(),\n-\t\t\t\t\t\t\t\t\t\t\t\tdetail.getC_InvoiceLine_ID())),\n-\t\t\t\t\t\t\t\treversalInvoiceId.getRepoId()).getC_InvoiceLine_ID());\n-\t\t\t}\n-\t\t\tdetail.setC_Invoice_ID(reversalInvoiceId.getRepoId());\n-\t\t}\n-\n-\t\tfinal ImmutableMap.Builder<StagingRecordKey, I_C_Invoice_Detail> invoiceId2Record = ImmutableMap.builder();\n-\n-\t\tfor (final I_C_Invoice_Detail detailRecord : detailRecords)\n-\t\t{\n-\t\t\tfinal StagingRecordKey key = StagingRecordKey.forRecordOrNull(detailRecord);\n-\t\t\tif (key == null)\n-\t\t\t{\n-\t\t\t\tcontinue;\n-\t\t\t}\n-\t\t\tinvoiceId2Record.put(key, detailRecord);\n-\t\t}\n-\t\tfinal ImmutableMap<StagingRecordKey, I_C_Invoice_Detail> reversedInvoiceDetailRecords = invoiceId2Record.build();\n-\n-\t\tfor (final I_C_Invoice_Detail detailItem : detailRecords)\n-\t\t{\n-\t\t\tif (!(detailItem.getC_InvoiceLine_ID() > 0))\n-\t\t\t{\n-\t\t\t\tcreateOrUpdateDetailItem(OrgId.ofRepoId(detailItem.getAD_Org_ID()),\n-\t\t\t\t\t\tInvoiceId.ofRepoId(detailItem.getC_Invoice_ID()),\n-\t\t\t\t\t\tInvoiceDetailItem\n-\t\t\t\t\t\t\t\t.builder()\n-\t\t\t\t\t\t\t\t.seqNo(detailItem.getSeqNo())\n-\t\t\t\t\t\t\t\t.label(detailItem.getLabel())\n-\t\t\t\t\t\t\t\t.description(detailItem.getDescription())\n-\t\t\t\t\t\t\t\t.date(detailItem.getDate() != null ? detailItem.getDate().toLocalDateTime().toLocalDate() : null)\n-\t\t\t\t\t\t\t\t.build(),\n-\t\t\t\t\t\treversedInvoiceDetailRecords);\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\tcreateOrUpdateDetailItem(OrgId.ofRepoId(detailItem.getAD_Org_ID()),\n-\t\t\t\t\t\tInvoiceLineId.ofRepoId(detailItem.getC_Invoice_ID(), detailItem.getC_InvoiceLine_ID()),\n-\t\t\t\t\t\tInvoiceDetailItem\n-\t\t\t\t\t\t\t\t.builder()\n-\t\t\t\t\t\t\t\t.seqNo(detailItem.getSeqNo())\n-\t\t\t\t\t\t\t\t.label(detailItem.getLabel())\n-\t\t\t\t\t\t\t\t.description(detailItem.getDescription())\n-\t\t\t\t\t\t\t\t.date(detailItem.getDate() != null ? detailItem.getDate().toLocalDateTime().toLocalDate() : null)\n-\t\t\t\t\t\t\t\t.build(),\n-\t\t\t\t\t\treversedInvoiceDetailRecords);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n \t@NonNull\n \tprivate I_C_Invoice_Detail syncToRecord(\n \t\t\t@NonNull final OrgId orgId,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODExNjI2Ng==", "url": "https://github.com/metasfresh/metasfresh/pull/9851#discussion_r478116266", "bodyText": "IMO such a method doesn't belong into a repository; a repository should AFAIU ideally just load and save objects.\nThere is a greay area, but this example is far too way out. It's also not what we discussed in the technical concept.\nIf it's not practical to implement what we discussed, it's OK for me if you move this method - along with its unit tests - to a class InvoiceWithDetailsService.\nAnd plrease rename it to something like copyDetailsToReversal()", "author": "metas-ts", "createdAt": "2020-08-27T04:54:10Z", "path": "backend/de.metas.business/src/main/java/de/metas/invoice/detail/InvoiceWithDetailsRepository.java", "diffHunk": "@@ -122,6 +120,67 @@ private void createOrUpdateDetailItem(\n \t\tInterfaceWrapperHelper.saveRecord(recordToSave);\n \t}\n \n+\tpublic void saveReversalDetails(@NonNull final InvoiceId originalInvoiceId, @NonNull final InvoiceId reversalInvoiceId)", "originalCommit": "d1fd07089aa1291a3a5859405d4934e2b1ca46a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "749747144da6c4e0333370856aeaa47b72ab0ae7", "chunk": "diff --git a/backend/de.metas.business/src/main/java/de/metas/invoice/detail/InvoiceWithDetailsRepository.java b/backend/de.metas.business/src/main/java/de/metas/invoice/detail/InvoiceWithDetailsRepository.java\nindex 78918638b4..718160450c 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/invoice/detail/InvoiceWithDetailsRepository.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/invoice/detail/InvoiceWithDetailsRepository.java\n\n@@ -120,67 +116,6 @@ public class InvoiceWithDetailsRepository\n \t\tInterfaceWrapperHelper.saveRecord(recordToSave);\n \t}\n \n-\tpublic void saveReversalDetails(@NonNull final InvoiceId originalInvoiceId, @NonNull final InvoiceId reversalInvoiceId)\n-\t{\n-\t\tfinal List<I_C_Invoice_Detail> detailRecords = getInvoiceDetailsListForInvoiceId(originalInvoiceId);\n-\n-\t\tfor (final I_C_Invoice_Detail detail : detailRecords)\n-\t\t{\n-\t\t\tif (detail.getC_InvoiceLine_ID() > 0)\n-\t\t\t{\n-\t\t\t\tdetail.setC_InvoiceLine_ID(invoiceDAO\n-\t\t\t\t\t\t.retrieveReversalLine(invoiceLineDAO\n-\t\t\t\t\t\t\t\t\t\t.retrieveById(InvoiceLineId.ofRepoId(detail.getC_Invoice_ID(),\n-\t\t\t\t\t\t\t\t\t\t\t\tdetail.getC_InvoiceLine_ID())),\n-\t\t\t\t\t\t\t\treversalInvoiceId.getRepoId()).getC_InvoiceLine_ID());\n-\t\t\t}\n-\t\t\tdetail.setC_Invoice_ID(reversalInvoiceId.getRepoId());\n-\t\t}\n-\n-\t\tfinal ImmutableMap.Builder<StagingRecordKey, I_C_Invoice_Detail> invoiceId2Record = ImmutableMap.builder();\n-\n-\t\tfor (final I_C_Invoice_Detail detailRecord : detailRecords)\n-\t\t{\n-\t\t\tfinal StagingRecordKey key = StagingRecordKey.forRecordOrNull(detailRecord);\n-\t\t\tif (key == null)\n-\t\t\t{\n-\t\t\t\tcontinue;\n-\t\t\t}\n-\t\t\tinvoiceId2Record.put(key, detailRecord);\n-\t\t}\n-\t\tfinal ImmutableMap<StagingRecordKey, I_C_Invoice_Detail> reversedInvoiceDetailRecords = invoiceId2Record.build();\n-\n-\t\tfor (final I_C_Invoice_Detail detailItem : detailRecords)\n-\t\t{\n-\t\t\tif (!(detailItem.getC_InvoiceLine_ID() > 0))\n-\t\t\t{\n-\t\t\t\tcreateOrUpdateDetailItem(OrgId.ofRepoId(detailItem.getAD_Org_ID()),\n-\t\t\t\t\t\tInvoiceId.ofRepoId(detailItem.getC_Invoice_ID()),\n-\t\t\t\t\t\tInvoiceDetailItem\n-\t\t\t\t\t\t\t\t.builder()\n-\t\t\t\t\t\t\t\t.seqNo(detailItem.getSeqNo())\n-\t\t\t\t\t\t\t\t.label(detailItem.getLabel())\n-\t\t\t\t\t\t\t\t.description(detailItem.getDescription())\n-\t\t\t\t\t\t\t\t.date(detailItem.getDate() != null ? detailItem.getDate().toLocalDateTime().toLocalDate() : null)\n-\t\t\t\t\t\t\t\t.build(),\n-\t\t\t\t\t\treversedInvoiceDetailRecords);\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\tcreateOrUpdateDetailItem(OrgId.ofRepoId(detailItem.getAD_Org_ID()),\n-\t\t\t\t\t\tInvoiceLineId.ofRepoId(detailItem.getC_Invoice_ID(), detailItem.getC_InvoiceLine_ID()),\n-\t\t\t\t\t\tInvoiceDetailItem\n-\t\t\t\t\t\t\t\t.builder()\n-\t\t\t\t\t\t\t\t.seqNo(detailItem.getSeqNo())\n-\t\t\t\t\t\t\t\t.label(detailItem.getLabel())\n-\t\t\t\t\t\t\t\t.description(detailItem.getDescription())\n-\t\t\t\t\t\t\t\t.date(detailItem.getDate() != null ? detailItem.getDate().toLocalDateTime().toLocalDate() : null)\n-\t\t\t\t\t\t\t\t.build(),\n-\t\t\t\t\t\treversedInvoiceDetailRecords);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n \t@NonNull\n \tprivate I_C_Invoice_Detail syncToRecord(\n \t\t\t@NonNull final OrgId orgId,\n"}}, {"oid": "8a420da0e13f3b9a005c06fb54b21cdf2dac7ee4", "url": "https://github.com/metasfresh/metasfresh/commit/8a420da0e13f3b9a005c06fb54b21cdf2dac7ee4", "message": "Fix the unit test.\n\nnow if shows the bug in the code under test\nhttps://github.com/metasfresh/metasfresh/issues/9850", "committedDate": "2020-08-27T05:05:50Z", "type": "commit"}, {"oid": "749747144da6c4e0333370856aeaa47b72ab0ae7", "url": "https://github.com/metasfresh/metasfresh/commit/749747144da6c4e0333370856aeaa47b72ab0ae7", "message": "#9850 - Implemented review notes", "committedDate": "2020-08-27T10:26:42Z", "type": "commit"}, {"oid": "50f13a2ac0d3ec5da15849d900b4d294831aaaf8", "url": "https://github.com/metasfresh/metasfresh/commit/50f13a2ac0d3ec5da15849d900b4d294831aaaf8", "message": "Fix InvoiceWithDetailsServiceTest and more minor fixes\n\nnow if shows the bug in the code under test\nhttps://github.com/metasfresh/metasfresh/issues/9850", "committedDate": "2020-08-27T11:44:17Z", "type": "commit"}, {"oid": "5d9f9aece751685ef423578fed4a3f9b68f18371", "url": "https://github.com/metasfresh/metasfresh/commit/5d9f9aece751685ef423578fed4a3f9b68f18371", "message": "#9840 update packages (#9841)\n\n(cherry picked from commit 32f29060843f9a30233dc5a5083f264d925c2a55)", "committedDate": "2020-08-27T12:47:39Z", "type": "commit"}, {"oid": "4ef3bc3f89cc3112511c12e5557d02ea66a065e7", "url": "https://github.com/metasfresh/metasfresh/commit/4ef3bc3f89cc3112511c12e5557d02ea66a065e7", "message": "Updated MasterWindow.test with the one from master branch", "committedDate": "2020-08-27T12:59:39Z", "type": "commit"}]}