{"pr_number": 10272, "pr_title": "Bank Statement Import improvements", "pr_createdAt": "2020-11-20T14:15:41Z", "pr_url": "https://github.com/metasfresh/metasfresh/pull/10272", "timeline": [{"oid": "99a0fb1a95f5e51817225cd20787f1874b7b3448", "url": "https://github.com/metasfresh/metasfresh/commit/99a0fb1a95f5e51817225cd20787f1874b7b3448", "message": "Add multiple columns to I_BankStatement\n\nhttps://github.com/metasfresh/metasfresh/issues/10270\nSigned-off-by: TheBestPessimist <cristian@tbp.land>", "committedDate": "2020-11-20T13:01:24Z", "type": "commit"}, {"oid": "6774a41125a40a6755bbfedc66b42019eff0a9b3", "url": "https://github.com/metasfresh/metasfresh/commit/6774a41125a40a6755bbfedc66b42019eff0a9b3", "message": "Import Format: `SkipFirstNRows` and `FileCharset`\n\nhttps://github.com/metasfresh/metasfresh/issues/10270\nSigned-off-by: TheBestPessimist <cristian@tbp.land>", "committedDate": "2020-11-20T13:50:11Z", "type": "commit"}, {"oid": "0b3c12e3e0631e2237161e190f2888753c1ddc88", "url": "https://github.com/metasfresh/metasfresh/commit/0b3c12e3e0631e2237161e190f2888753c1ddc88", "message": "Handle multiple formats for receiving TrxAmt in the csv file\n\nhttps://github.com/metasfresh/metasfresh/issues/10270\n\nSigned-off-by: TheBestPessimist <cristian@tbp.land>", "committedDate": "2020-11-20T13:52:11Z", "type": "commit"}, {"oid": "049c41cea485dbc8cec3dc13caa24dadac2766a0", "url": "https://github.com/metasfresh/metasfresh/commit/049c41cea485dbc8cec3dc13caa24dadac2766a0", "message": "Add autodetection for I_BankStatement.AmtFormat\n\nhttps://github.com/metasfresh/metasfresh/issues/10270\n\nSigned-off-by: TheBestPessimist <cristian@tbp.land>", "committedDate": "2020-11-20T14:03:12Z", "type": "commit"}, {"oid": "050cf8d40137394763ae1258ef526025948a5d83", "url": "https://github.com/metasfresh/metasfresh/commit/050cf8d40137394763ae1258ef526025948a5d83", "message": "Skip nulls when updating Description\n\nSigned-off-by: TheBestPessimist <cristian@tbp.land>", "committedDate": "2020-11-20T14:10:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzczMDcxNg==", "url": "https://github.com/metasfresh/metasfresh/pull/10272#discussion_r527730716", "bodyText": "consider java.nio.charset.Charset (or some other immutable alternative) instead of String", "author": "teosarca", "createdAt": "2020-11-20T14:31:59Z", "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/impexp/format/ImpFormat.java", "diffHunk": "@@ -42,7 +47,9 @@ private ImpFormat(\n \t\t\tfinal boolean multiLine,\n \t\t\tfinal boolean manualImport,\n \t\t\t@NonNull final ImportTableDescriptor importTableDescriptor,\n-\t\t\t@NonNull @Singular final List<ImpFormatColumn> columns)\n+\t\t\t@NonNull @Singular final List<ImpFormatColumn> columns,\n+\t\t\t@NonNull final String charset,", "originalCommit": "050cf8d40137394763ae1258ef526025948a5d83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ4Nzk0OA==", "url": "https://github.com/metasfresh/metasfresh/pull/10272#discussion_r528487948", "bodyText": "Done", "author": "TheBestPessimist", "createdAt": "2020-11-23T06:16:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzczMDcxNg=="}], "type": "inlineReview", "revised_code": {"commit": "533186afdcdfd7fe7c6fd267951d3b7eeb3990fa", "chunk": "diff --git a/backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/impexp/format/ImpFormat.java b/backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/impexp/format/ImpFormat.java\nindex f0a17398e6..3f0094cab0 100644\n--- a/backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/impexp/format/ImpFormat.java\n+++ b/backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/impexp/format/ImpFormat.java\n\n@@ -48,7 +55,7 @@ public final class ImpFormat\n \t\t\tfinal boolean manualImport,\n \t\t\t@NonNull final ImportTableDescriptor importTableDescriptor,\n \t\t\t@NonNull @Singular final List<ImpFormatColumn> columns,\n-\t\t\t@NonNull final String charset,\n+\t\t\t@NonNull final Charset charset,\n \t\t\tfinal int skipFirstNRows)\n \t{\n \t\tCheck.assumeNotEmpty(name, \"name is not empty\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzczMTMxNA==", "url": "https://github.com/metasfresh/metasfresh/pull/10272#discussion_r527731314", "bodyText": "pls validate/normalize this parameter\ne.g.\nskipFirstNRows = skipFirstNRows > 0 ? skipFirstNRows : 0;", "author": "teosarca", "createdAt": "2020-11-20T14:32:55Z", "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/impexp/format/ImpFormat.java", "diffHunk": "@@ -54,6 +61,8 @@ private ImpFormat(\n \t\tthis.manualImport = manualImport;\n \t\tthis.importTableDescriptor = importTableDescriptor;\n \t\tthis.columns = ImmutableList.copyOf(columns);\n+\t\tthis.charset = charset;\n+\t\tthis.skipFirstNRows = skipFirstNRows;", "originalCommit": "050cf8d40137394763ae1258ef526025948a5d83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ4ODI1NQ==", "url": "https://github.com/metasfresh/metasfresh/pull/10272#discussion_r528488255", "bodyText": "as in \"don't allow negative values\".\nBetter suggestion: Math.max(skipFirstNRows, 0)\nDone", "author": "TheBestPessimist", "createdAt": "2020-11-23T06:17:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzczMTMxNA=="}], "type": "inlineReview", "revised_code": {"commit": "533186afdcdfd7fe7c6fd267951d3b7eeb3990fa", "chunk": "diff --git a/backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/impexp/format/ImpFormat.java b/backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/impexp/format/ImpFormat.java\nindex f0a17398e6..3f0094cab0 100644\n--- a/backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/impexp/format/ImpFormat.java\n+++ b/backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/impexp/format/ImpFormat.java\n\n@@ -62,7 +69,7 @@ public final class ImpFormat\n \t\tthis.importTableDescriptor = importTableDescriptor;\n \t\tthis.columns = ImmutableList.copyOf(columns);\n \t\tthis.charset = charset;\n-\t\tthis.skipFirstNRows = skipFirstNRows;\n+\t\tthis.skipFirstNRows = Math.max(skipFirstNRows, 0);\n \t}\n \n \tpublic String getImportTableName()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzczMTkwMw==", "url": "https://github.com/metasfresh/metasfresh/pull/10272#discussion_r527731903", "bodyText": "same as above.\n\nconsider using Charset\nnormalize/validate skipFirstNRows", "author": "teosarca", "createdAt": "2020-11-20T14:33:54Z", "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/impexp/parser/ImpDataParser.java", "diffHunk": "@@ -39,25 +37,31 @@\n @ToString\n public final class ImpDataParser\n {\n-\tprivate static final Charset CHARSET = StandardCharsets.UTF_8;\n-\n \tprivate final boolean multiline;\n \tprivate final ImpDataLineParser lineParser;\n+\tprivate final String charset;\n+\tprivate final int skipFirstNRows;\n \n \t@Builder\n \tprivate ImpDataParser(\n \t\t\tfinal boolean multiline,\n-\t\t\t@NonNull final ImpDataLineParser lineParser)\n+\t\t\t@NonNull final ImpDataLineParser lineParser,\n+\t\t\t@NonNull final String charset,\n+\t\t\tfinal int skipFirstNRows\n+\t)\n \t{\n \t\tthis.multiline = multiline;\n \t\tthis.lineParser = lineParser;\n+\t\tthis.charset = charset;\n+\t\tthis.skipFirstNRows = skipFirstNRows;", "originalCommit": "050cf8d40137394763ae1258ef526025948a5d83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ5MDc4Ng==", "url": "https://github.com/metasfresh/metasfresh/pull/10272#discussion_r528490786", "bodyText": "done", "author": "TheBestPessimist", "createdAt": "2020-11-23T06:28:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzczMTkwMw=="}], "type": "inlineReview", "revised_code": {"commit": "533186afdcdfd7fe7c6fd267951d3b7eeb3990fa", "chunk": "diff --git a/backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/impexp/parser/ImpDataParser.java b/backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/impexp/parser/ImpDataParser.java\nindex 6bfa44a6f1..3e78b74a2d 100644\n--- a/backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/impexp/parser/ImpDataParser.java\n+++ b/backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/impexp/parser/ImpDataParser.java\n\n@@ -38,22 +38,22 @@ import java.util.stream.Stream;\n public final class ImpDataParser\n {\n \tprivate final boolean multiline;\n-\tprivate final ImpDataLineParser lineParser;\n-\tprivate final String charset;\n+\tprivate final @NonNull ImpDataLineParser lineParser;\n+\tprivate final @NonNull Charset charset;\n \tprivate final int skipFirstNRows;\n \n \t@Builder\n \tprivate ImpDataParser(\n \t\t\tfinal boolean multiline,\n \t\t\t@NonNull final ImpDataLineParser lineParser,\n-\t\t\t@NonNull final String charset,\n+\t\t\t@NonNull final Charset charset,\n \t\t\tfinal int skipFirstNRows\n \t)\n \t{\n \t\tthis.multiline = multiline;\n \t\tthis.lineParser = lineParser;\n \t\tthis.charset = charset;\n-\t\tthis.skipFirstNRows = skipFirstNRows;\n+\t\tthis.skipFirstNRows = Math.max(skipFirstNRows,0);\n \t}\n \n \tpublic Stream<ImpDataLine> streamDataLines(final Resource resource)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzczMzc2Nw==", "url": "https://github.com/metasfresh/metasfresh/pull/10272#discussion_r527733767", "bodyText": "avoid hardcoded \"S\".\nPls use X_I_BankStatement.AMOUNTPLUSINDICATOR_Debit or X_I_BankStatement.AMOUNTPLUSINDICATOR_Credit", "author": "teosarca", "createdAt": "2020-11-20T14:36:40Z", "path": "backend/de.metas.banking/de.metas.banking.base/src/main/java/de/metas/banking/impexp/BankStatementImportProcess.java", "diffHunk": "@@ -175,62 +180,147 @@ private void createBankStatementLine(final I_I_BankStatement importRecord)\n \n \t\tfinal CurrencyId currencyId = CurrencyId.ofRepoId(importRecord.getC_Currency_ID());\n \n-\t\tfinal BankStatementLineId bankStatementLineId = bankStatementDAO.createBankStatementLine(BankStatementLineCreateRequest.builder()\n-\t\t\t\t.bankStatementId(BankStatementId.ofRepoId(importRecord.getC_BankStatement_ID()))\n-\t\t\t\t.orgId(OrgId.ofRepoId(importRecord.getAD_Org_ID()))\n-\t\t\t\t.lineNo(importRecord.getLine())\n-\t\t\t\t//\n-\t\t\t\t.bpartnerId(BPartnerId.ofRepoIdOrNull(importRecord.getC_BPartner_ID()))\n-\t\t\t\t.importedBillPartnerName(importRecord.getBill_BPartner_Name())\n-\t\t\t\t.importedBillPartnerIBAN(importRecord.getIBAN_To())\n-\t\t\t\t//\n-\t\t\t\t.referenceNo(importRecord.getReferenceNo())\n-\t\t\t\t.lineDescription(importRecord.getLineDescription())\n-\t\t\t\t.memo(importRecord.getMemo())\n-\t\t\t\t//\n-\t\t\t\t.statementLineDate(TimeUtil.asLocalDate(CoalesceUtil.coalesce(importRecord.getStatementLineDate(), importRecord.getStatementDate())))\n-\t\t\t\t.dateAcct(TimeUtil.asLocalDate(CoalesceUtil.coalesce(importRecord.getDateAcct(), importRecord.getStatementDate())))\n-\t\t\t\t.valutaDate(TimeUtil.asLocalDate(importRecord.getValutaDate()))\n-\t\t\t\t//\n-\t\t\t\t.statementAmt(Money.of(importRecord.getStmtAmt(), currencyId))\n-\t\t\t\t.trxAmt(Money.of(importRecord.getTrxAmt(), currencyId))\n-\t\t\t\t.chargeAmt(Money.of(importRecord.getChargeAmt(), currencyId))\n-\t\t\t\t.interestAmt(Money.of(importRecord.getInterestAmt(), currencyId))\n-\t\t\t\t.chargeId(ChargeId.ofRepoIdOrNull(importRecord.getC_Charge_ID()))\n-\t\t\t\t//\n-\t\t\t\t.eft(ElectronicFundsTransfer.builder()\n-\t\t\t\t\t\t.trxId(importRecord.getEftTrxID())\n-\t\t\t\t\t\t.trxType(importRecord.getEftTrxType())\n-\t\t\t\t\t\t.checkNo(importRecord.getEftCheckNo())\n-\t\t\t\t\t\t.reference(importRecord.getEftReference())\n-\t\t\t\t\t\t.memo(importRecord.getEftMemo())\n-\t\t\t\t\t\t.payee(importRecord.getEftPayee())\n-\t\t\t\t\t\t.payeeAccount(importRecord.getEftPayeeAccount())\n-\t\t\t\t\t\t.statementLineDate(TimeUtil.asLocalDate(importRecord.getEftStatementLineDate()))\n-\t\t\t\t\t\t.valutaDate(TimeUtil.asLocalDate(importRecord.getEftValutaDate()))\n-\t\t\t\t\t\t.currency(importRecord.getEftCurrency())\n-\t\t\t\t\t\t.amt(importRecord.getEftAmt())\n-\t\t\t\t\t\t.build())\n-\t\t\t\t//\n-\t\t\t\t.build());\n+\t\tfinal BankStatementLineId bankStatementLineId = bankStatementDAO.createBankStatementLine(\n+\t\t\t\tBankStatementLineCreateRequest.builder()\n+\t\t\t\t\t\t.bankStatementId(BankStatementId.ofRepoId(importRecord.getC_BankStatement_ID()))\n+\t\t\t\t\t\t.orgId(OrgId.ofRepoId(importRecord.getAD_Org_ID()))\n+\t\t\t\t\t\t.lineNo(importRecord.getLine())\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.bpartnerId(BPartnerId.ofRepoIdOrNull(importRecord.getC_BPartner_ID()))\n+\t\t\t\t\t\t.importedBillPartnerName(importRecord.getBill_BPartner_Name())\n+\t\t\t\t\t\t.importedBillPartnerIBAN(importRecord.getIBAN_To())\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.referenceNo(importRecord.getReferenceNo())\n+\t\t\t\t\t\t.lineDescription(importRecord.getLineDescription())\n+\t\t\t\t\t\t.memo(importRecord.getMemo())\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.statementLineDate(TimeUtil.asLocalDate(CoalesceUtil.coalesce(importRecord.getStatementLineDate(), importRecord.getStatementDate())))\n+\t\t\t\t\t\t.dateAcct(TimeUtil.asLocalDate(CoalesceUtil.coalesce(importRecord.getDateAcct(), importRecord.getStatementDate())))\n+\t\t\t\t\t\t.valutaDate(TimeUtil.asLocalDate(importRecord.getValutaDate()))\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.statementAmt(Money.of(importRecord.getStmtAmt(), currencyId))\n+\t\t\t\t\t\t.trxAmt(Money.of(importRecord.getTrxAmt(), currencyId))\n+\t\t\t\t\t\t.chargeAmt(Money.of(importRecord.getChargeAmt(), currencyId))\n+\t\t\t\t\t\t.interestAmt(Money.of(importRecord.getInterestAmt(), currencyId))\n+\t\t\t\t\t\t.chargeId(ChargeId.ofRepoIdOrNull(importRecord.getC_Charge_ID()))\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.eft(ElectronicFundsTransfer.builder()\n+\t\t\t\t\t\t\t\t\t .trxId(importRecord.getEftTrxID())\n+\t\t\t\t\t\t\t\t\t .trxType(importRecord.getEftTrxType())\n+\t\t\t\t\t\t\t\t\t .checkNo(importRecord.getEftCheckNo())\n+\t\t\t\t\t\t\t\t\t .reference(importRecord.getEftReference())\n+\t\t\t\t\t\t\t\t\t .memo(importRecord.getEftMemo())\n+\t\t\t\t\t\t\t\t\t .payee(importRecord.getEftPayee())\n+\t\t\t\t\t\t\t\t\t .payeeAccount(importRecord.getEftPayeeAccount())\n+\t\t\t\t\t\t\t\t\t .statementLineDate(TimeUtil.asLocalDate(importRecord.getEftStatementLineDate()))\n+\t\t\t\t\t\t\t\t\t .valutaDate(TimeUtil.asLocalDate(importRecord.getEftValutaDate()))\n+\t\t\t\t\t\t\t\t\t .currency(importRecord.getEftCurrency())\n+\t\t\t\t\t\t\t\t\t .amt(importRecord.getEftAmt())\n+\t\t\t\t\t\t\t\t\t .build())\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.build());\n \n \t\timportRecord.setC_BankStatementLine_ID(bankStatementLineId.getRepoId());\n \t}\n \n \tprivate BankStatementId createBankStatement(@NonNull final I_I_BankStatement importBankStatement)\n \t{\n \t\treturn bankStatementDAO.createBankStatement(BankStatementCreateRequest.builder()\n-\t\t\t\t.orgId(OrgId.ofRepoId(importBankStatement.getAD_Org_ID()))\n-\t\t\t\t.orgBankAccountId(BankAccountId.ofRepoId(importBankStatement.getC_BP_BankAccount_ID()))\n-\t\t\t\t// TODO add documentNo to import\n-\t\t\t\t.statementDate(TimeUtil.asLocalDate(importBankStatement.getStatementDate()))\n-\t\t\t\t.name(importBankStatement.getName())\n-\t\t\t\t.description(importBankStatement.getDescription())\n-\t\t\t\t.eft(BankStatementCreateRequest.ElectronicFundsTransfer.builder()\n-\t\t\t\t\t\t.statementDate(TimeUtil.asLocalDate(importBankStatement.getEftStatementDate()))\n-\t\t\t\t\t\t.statementReference(importBankStatement.getEftStatementReference())\n-\t\t\t\t\t\t.build())\n-\t\t\t\t.build());\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.orgId(OrgId.ofRepoId(importBankStatement.getAD_Org_ID()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.orgBankAccountId(BankAccountId.ofRepoId(importBankStatement.getC_BP_BankAccount_ID()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// TODO add documentNo to import\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.statementDate(TimeUtil.asLocalDate(importBankStatement.getStatementDate()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.name(importBankStatement.getName())\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(importBankStatement.getDescription())\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.eft(BankStatementCreateRequest.ElectronicFundsTransfer.builder()\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t .statementDate(TimeUtil.asLocalDate(importBankStatement.getEftStatementDate()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t .statementReference(importBankStatement.getEftStatementReference())\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t .build())\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.build());\n+\t}\n+\n+\t@VisibleForTesting\n+\tstatic void computeUpdateLineAmts(@NonNull final I_I_BankStatement importRecord)\n+\t{\n+\t\tfinal String amtFormat = getAmtFormat(importRecord);\n+\n+\t\tif (X_I_BankStatement.AMTFORMAT_AmountPlusIndicator.equals(amtFormat))\n+\t\t{\n+\t\t\tfinal BigDecimal trxAmt;\n+\t\t\tfinal boolean isDebit = \"S\".equals(importRecord.getDebitOrCreditIndicator());", "originalCommit": "050cf8d40137394763ae1258ef526025948a5d83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ5Mzk2Mw==", "url": "https://github.com/metasfresh/metasfresh/pull/10272#discussion_r528493963", "bodyText": "done", "author": "TheBestPessimist", "createdAt": "2020-11-23T06:41:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzczMzc2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "ab59b48d4ed7115f53336c6334f0986ba4537cc6", "chunk": "diff --git a/backend/de.metas.banking/de.metas.banking.base/src/main/java/de/metas/banking/impexp/BankStatementImportProcess.java b/backend/de.metas.banking/de.metas.banking.base/src/main/java/de/metas/banking/impexp/BankStatementImportProcess.java\nindex 4e6c3913d1..4136fec4b5 100644\n--- a/backend/de.metas.banking/de.metas.banking.base/src/main/java/de/metas/banking/impexp/BankStatementImportProcess.java\n+++ b/backend/de.metas.banking/de.metas.banking.base/src/main/java/de/metas/banking/impexp/BankStatementImportProcess.java\n\n@@ -286,11 +287,11 @@ public class BankStatementImportProcess extends SimpleImportProcessTemplate<I_I_\n \t{\n \t\tfinal String lineDescription = Joiner.on(\" / \")\n \t\t\t\t.skipNulls()\n-\t\t\t\t.join(importRecord.getLineDescription(),\n-\t\t\t\t\t  importRecord.getLineDescriptionExtra_1(),\n-\t\t\t\t\t  importRecord.getLineDescriptionExtra_2(),\n-\t\t\t\t\t  importRecord.getLineDescriptionExtra_3(),\n-\t\t\t\t\t  importRecord.getLineDescriptionExtra_4());\n+\t\t\t\t.join(StringUtils.trimBlankToNull(importRecord.getLineDescription()),\n+\t\t\t\t\t  StringUtils.trimBlankToNull(importRecord.getLineDescriptionExtra_1()),\n+\t\t\t\t\t  StringUtils.trimBlankToNull(importRecord.getLineDescriptionExtra_2()),\n+\t\t\t\t\t  StringUtils.trimBlankToNull(importRecord.getLineDescriptionExtra_3()),\n+\t\t\t\t\t  StringUtils.trimBlankToNull(importRecord.getLineDescriptionExtra_4()));\n \n \t\timportRecord.setLineDescription(lineDescription);\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzczNDg4Nw==", "url": "https://github.com/metasfresh/metasfresh/pull/10272#discussion_r527734887", "bodyText": "IMHO here the stmtAmt shall be trxAmt + chargeAmt + interestAmt", "author": "teosarca", "createdAt": "2020-11-20T14:38:23Z", "path": "backend/de.metas.banking/de.metas.banking.base/src/main/java/de/metas/banking/impexp/BankStatementImportProcess.java", "diffHunk": "@@ -175,62 +180,147 @@ private void createBankStatementLine(final I_I_BankStatement importRecord)\n \n \t\tfinal CurrencyId currencyId = CurrencyId.ofRepoId(importRecord.getC_Currency_ID());\n \n-\t\tfinal BankStatementLineId bankStatementLineId = bankStatementDAO.createBankStatementLine(BankStatementLineCreateRequest.builder()\n-\t\t\t\t.bankStatementId(BankStatementId.ofRepoId(importRecord.getC_BankStatement_ID()))\n-\t\t\t\t.orgId(OrgId.ofRepoId(importRecord.getAD_Org_ID()))\n-\t\t\t\t.lineNo(importRecord.getLine())\n-\t\t\t\t//\n-\t\t\t\t.bpartnerId(BPartnerId.ofRepoIdOrNull(importRecord.getC_BPartner_ID()))\n-\t\t\t\t.importedBillPartnerName(importRecord.getBill_BPartner_Name())\n-\t\t\t\t.importedBillPartnerIBAN(importRecord.getIBAN_To())\n-\t\t\t\t//\n-\t\t\t\t.referenceNo(importRecord.getReferenceNo())\n-\t\t\t\t.lineDescription(importRecord.getLineDescription())\n-\t\t\t\t.memo(importRecord.getMemo())\n-\t\t\t\t//\n-\t\t\t\t.statementLineDate(TimeUtil.asLocalDate(CoalesceUtil.coalesce(importRecord.getStatementLineDate(), importRecord.getStatementDate())))\n-\t\t\t\t.dateAcct(TimeUtil.asLocalDate(CoalesceUtil.coalesce(importRecord.getDateAcct(), importRecord.getStatementDate())))\n-\t\t\t\t.valutaDate(TimeUtil.asLocalDate(importRecord.getValutaDate()))\n-\t\t\t\t//\n-\t\t\t\t.statementAmt(Money.of(importRecord.getStmtAmt(), currencyId))\n-\t\t\t\t.trxAmt(Money.of(importRecord.getTrxAmt(), currencyId))\n-\t\t\t\t.chargeAmt(Money.of(importRecord.getChargeAmt(), currencyId))\n-\t\t\t\t.interestAmt(Money.of(importRecord.getInterestAmt(), currencyId))\n-\t\t\t\t.chargeId(ChargeId.ofRepoIdOrNull(importRecord.getC_Charge_ID()))\n-\t\t\t\t//\n-\t\t\t\t.eft(ElectronicFundsTransfer.builder()\n-\t\t\t\t\t\t.trxId(importRecord.getEftTrxID())\n-\t\t\t\t\t\t.trxType(importRecord.getEftTrxType())\n-\t\t\t\t\t\t.checkNo(importRecord.getEftCheckNo())\n-\t\t\t\t\t\t.reference(importRecord.getEftReference())\n-\t\t\t\t\t\t.memo(importRecord.getEftMemo())\n-\t\t\t\t\t\t.payee(importRecord.getEftPayee())\n-\t\t\t\t\t\t.payeeAccount(importRecord.getEftPayeeAccount())\n-\t\t\t\t\t\t.statementLineDate(TimeUtil.asLocalDate(importRecord.getEftStatementLineDate()))\n-\t\t\t\t\t\t.valutaDate(TimeUtil.asLocalDate(importRecord.getEftValutaDate()))\n-\t\t\t\t\t\t.currency(importRecord.getEftCurrency())\n-\t\t\t\t\t\t.amt(importRecord.getEftAmt())\n-\t\t\t\t\t\t.build())\n-\t\t\t\t//\n-\t\t\t\t.build());\n+\t\tfinal BankStatementLineId bankStatementLineId = bankStatementDAO.createBankStatementLine(\n+\t\t\t\tBankStatementLineCreateRequest.builder()\n+\t\t\t\t\t\t.bankStatementId(BankStatementId.ofRepoId(importRecord.getC_BankStatement_ID()))\n+\t\t\t\t\t\t.orgId(OrgId.ofRepoId(importRecord.getAD_Org_ID()))\n+\t\t\t\t\t\t.lineNo(importRecord.getLine())\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.bpartnerId(BPartnerId.ofRepoIdOrNull(importRecord.getC_BPartner_ID()))\n+\t\t\t\t\t\t.importedBillPartnerName(importRecord.getBill_BPartner_Name())\n+\t\t\t\t\t\t.importedBillPartnerIBAN(importRecord.getIBAN_To())\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.referenceNo(importRecord.getReferenceNo())\n+\t\t\t\t\t\t.lineDescription(importRecord.getLineDescription())\n+\t\t\t\t\t\t.memo(importRecord.getMemo())\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.statementLineDate(TimeUtil.asLocalDate(CoalesceUtil.coalesce(importRecord.getStatementLineDate(), importRecord.getStatementDate())))\n+\t\t\t\t\t\t.dateAcct(TimeUtil.asLocalDate(CoalesceUtil.coalesce(importRecord.getDateAcct(), importRecord.getStatementDate())))\n+\t\t\t\t\t\t.valutaDate(TimeUtil.asLocalDate(importRecord.getValutaDate()))\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.statementAmt(Money.of(importRecord.getStmtAmt(), currencyId))\n+\t\t\t\t\t\t.trxAmt(Money.of(importRecord.getTrxAmt(), currencyId))\n+\t\t\t\t\t\t.chargeAmt(Money.of(importRecord.getChargeAmt(), currencyId))\n+\t\t\t\t\t\t.interestAmt(Money.of(importRecord.getInterestAmt(), currencyId))\n+\t\t\t\t\t\t.chargeId(ChargeId.ofRepoIdOrNull(importRecord.getC_Charge_ID()))\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.eft(ElectronicFundsTransfer.builder()\n+\t\t\t\t\t\t\t\t\t .trxId(importRecord.getEftTrxID())\n+\t\t\t\t\t\t\t\t\t .trxType(importRecord.getEftTrxType())\n+\t\t\t\t\t\t\t\t\t .checkNo(importRecord.getEftCheckNo())\n+\t\t\t\t\t\t\t\t\t .reference(importRecord.getEftReference())\n+\t\t\t\t\t\t\t\t\t .memo(importRecord.getEftMemo())\n+\t\t\t\t\t\t\t\t\t .payee(importRecord.getEftPayee())\n+\t\t\t\t\t\t\t\t\t .payeeAccount(importRecord.getEftPayeeAccount())\n+\t\t\t\t\t\t\t\t\t .statementLineDate(TimeUtil.asLocalDate(importRecord.getEftStatementLineDate()))\n+\t\t\t\t\t\t\t\t\t .valutaDate(TimeUtil.asLocalDate(importRecord.getEftValutaDate()))\n+\t\t\t\t\t\t\t\t\t .currency(importRecord.getEftCurrency())\n+\t\t\t\t\t\t\t\t\t .amt(importRecord.getEftAmt())\n+\t\t\t\t\t\t\t\t\t .build())\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.build());\n \n \t\timportRecord.setC_BankStatementLine_ID(bankStatementLineId.getRepoId());\n \t}\n \n \tprivate BankStatementId createBankStatement(@NonNull final I_I_BankStatement importBankStatement)\n \t{\n \t\treturn bankStatementDAO.createBankStatement(BankStatementCreateRequest.builder()\n-\t\t\t\t.orgId(OrgId.ofRepoId(importBankStatement.getAD_Org_ID()))\n-\t\t\t\t.orgBankAccountId(BankAccountId.ofRepoId(importBankStatement.getC_BP_BankAccount_ID()))\n-\t\t\t\t// TODO add documentNo to import\n-\t\t\t\t.statementDate(TimeUtil.asLocalDate(importBankStatement.getStatementDate()))\n-\t\t\t\t.name(importBankStatement.getName())\n-\t\t\t\t.description(importBankStatement.getDescription())\n-\t\t\t\t.eft(BankStatementCreateRequest.ElectronicFundsTransfer.builder()\n-\t\t\t\t\t\t.statementDate(TimeUtil.asLocalDate(importBankStatement.getEftStatementDate()))\n-\t\t\t\t\t\t.statementReference(importBankStatement.getEftStatementReference())\n-\t\t\t\t\t\t.build())\n-\t\t\t\t.build());\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.orgId(OrgId.ofRepoId(importBankStatement.getAD_Org_ID()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.orgBankAccountId(BankAccountId.ofRepoId(importBankStatement.getC_BP_BankAccount_ID()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// TODO add documentNo to import\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.statementDate(TimeUtil.asLocalDate(importBankStatement.getStatementDate()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.name(importBankStatement.getName())\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(importBankStatement.getDescription())\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.eft(BankStatementCreateRequest.ElectronicFundsTransfer.builder()\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t .statementDate(TimeUtil.asLocalDate(importBankStatement.getEftStatementDate()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t .statementReference(importBankStatement.getEftStatementReference())\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t .build())\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.build());\n+\t}\n+\n+\t@VisibleForTesting\n+\tstatic void computeUpdateLineAmts(@NonNull final I_I_BankStatement importRecord)\n+\t{\n+\t\tfinal String amtFormat = getAmtFormat(importRecord);\n+\n+\t\tif (X_I_BankStatement.AMTFORMAT_AmountPlusIndicator.equals(amtFormat))\n+\t\t{\n+\t\t\tfinal BigDecimal trxAmt;\n+\t\t\tfinal boolean isDebit = \"S\".equals(importRecord.getDebitOrCreditIndicator());\n+\t\t\tif (isDebit)\n+\t\t\t{\n+\t\t\t\ttrxAmt = importRecord.getDebitOrCreditAmt().negate();\n+\t\t\t}\n+\t\t\telse\n+\t\t\t{\n+\t\t\t\ttrxAmt = importRecord.getDebitOrCreditAmt();\n+\t\t\t}\n+\n+\t\t\timportRecord.setTrxAmt(trxAmt);\n+\t\t\tfinal BigDecimal stmtAmt = trxAmt.add(importRecord.getChargeAmt()).add(importRecord.getInterestAmt());\n+\t\t\timportRecord.setStmtAmt(stmtAmt);\n+\t\t}\n+\t\telse if (X_I_BankStatement.AMTFORMAT_DebitPlusCredit.equals(amtFormat))\n+\t\t{\n+\t\t\tfinal BigDecimal stmtAmt = importRecord.getCreditStmtAmt().subtract(importRecord.getDebitStmtAmt());\n+\t\t\timportRecord.setStmtAmt(stmtAmt);\n+\t\t\tfinal BigDecimal trxAmt = stmtAmt.subtract(importRecord.getInterestAmt()).subtract(importRecord.getChargeAmt());\n+\t\t\timportRecord.setTrxAmt(trxAmt);\n+\t\t}\n+\t\telse if (X_I_BankStatement.AMTFORMAT_Straight.equals(amtFormat))\n+\t\t{\n+\t\t\timportRecord.setStmtAmt(importRecord.getTrxAmt());", "originalCommit": "050cf8d40137394763ae1258ef526025948a5d83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ5NDUwOQ==", "url": "https://github.com/metasfresh/metasfresh/pull/10272#discussion_r528494509", "bodyText": "done", "author": "TheBestPessimist", "createdAt": "2020-11-23T06:43:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzczNDg4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "ab59b48d4ed7115f53336c6334f0986ba4537cc6", "chunk": "diff --git a/backend/de.metas.banking/de.metas.banking.base/src/main/java/de/metas/banking/impexp/BankStatementImportProcess.java b/backend/de.metas.banking/de.metas.banking.base/src/main/java/de/metas/banking/impexp/BankStatementImportProcess.java\nindex 4e6c3913d1..4136fec4b5 100644\n--- a/backend/de.metas.banking/de.metas.banking.base/src/main/java/de/metas/banking/impexp/BankStatementImportProcess.java\n+++ b/backend/de.metas.banking/de.metas.banking.base/src/main/java/de/metas/banking/impexp/BankStatementImportProcess.java\n\n@@ -286,11 +287,11 @@ public class BankStatementImportProcess extends SimpleImportProcessTemplate<I_I_\n \t{\n \t\tfinal String lineDescription = Joiner.on(\" / \")\n \t\t\t\t.skipNulls()\n-\t\t\t\t.join(importRecord.getLineDescription(),\n-\t\t\t\t\t  importRecord.getLineDescriptionExtra_1(),\n-\t\t\t\t\t  importRecord.getLineDescriptionExtra_2(),\n-\t\t\t\t\t  importRecord.getLineDescriptionExtra_3(),\n-\t\t\t\t\t  importRecord.getLineDescriptionExtra_4());\n+\t\t\t\t.join(StringUtils.trimBlankToNull(importRecord.getLineDescription()),\n+\t\t\t\t\t  StringUtils.trimBlankToNull(importRecord.getLineDescriptionExtra_1()),\n+\t\t\t\t\t  StringUtils.trimBlankToNull(importRecord.getLineDescriptionExtra_2()),\n+\t\t\t\t\t  StringUtils.trimBlankToNull(importRecord.getLineDescriptionExtra_3()),\n+\t\t\t\t\t  StringUtils.trimBlankToNull(importRecord.getLineDescriptionExtra_4()));\n \n \t\timportRecord.setLineDescription(lineDescription);\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzczNTIwMA==", "url": "https://github.com/metasfresh/metasfresh/pull/10272#discussion_r527735200", "bodyText": "what case is this?\nShouldn't we throw exception for this case?", "author": "teosarca", "createdAt": "2020-11-20T14:38:55Z", "path": "backend/de.metas.banking/de.metas.banking.base/src/main/java/de/metas/banking/impexp/BankStatementImportProcess.java", "diffHunk": "@@ -175,62 +180,147 @@ private void createBankStatementLine(final I_I_BankStatement importRecord)\n \n \t\tfinal CurrencyId currencyId = CurrencyId.ofRepoId(importRecord.getC_Currency_ID());\n \n-\t\tfinal BankStatementLineId bankStatementLineId = bankStatementDAO.createBankStatementLine(BankStatementLineCreateRequest.builder()\n-\t\t\t\t.bankStatementId(BankStatementId.ofRepoId(importRecord.getC_BankStatement_ID()))\n-\t\t\t\t.orgId(OrgId.ofRepoId(importRecord.getAD_Org_ID()))\n-\t\t\t\t.lineNo(importRecord.getLine())\n-\t\t\t\t//\n-\t\t\t\t.bpartnerId(BPartnerId.ofRepoIdOrNull(importRecord.getC_BPartner_ID()))\n-\t\t\t\t.importedBillPartnerName(importRecord.getBill_BPartner_Name())\n-\t\t\t\t.importedBillPartnerIBAN(importRecord.getIBAN_To())\n-\t\t\t\t//\n-\t\t\t\t.referenceNo(importRecord.getReferenceNo())\n-\t\t\t\t.lineDescription(importRecord.getLineDescription())\n-\t\t\t\t.memo(importRecord.getMemo())\n-\t\t\t\t//\n-\t\t\t\t.statementLineDate(TimeUtil.asLocalDate(CoalesceUtil.coalesce(importRecord.getStatementLineDate(), importRecord.getStatementDate())))\n-\t\t\t\t.dateAcct(TimeUtil.asLocalDate(CoalesceUtil.coalesce(importRecord.getDateAcct(), importRecord.getStatementDate())))\n-\t\t\t\t.valutaDate(TimeUtil.asLocalDate(importRecord.getValutaDate()))\n-\t\t\t\t//\n-\t\t\t\t.statementAmt(Money.of(importRecord.getStmtAmt(), currencyId))\n-\t\t\t\t.trxAmt(Money.of(importRecord.getTrxAmt(), currencyId))\n-\t\t\t\t.chargeAmt(Money.of(importRecord.getChargeAmt(), currencyId))\n-\t\t\t\t.interestAmt(Money.of(importRecord.getInterestAmt(), currencyId))\n-\t\t\t\t.chargeId(ChargeId.ofRepoIdOrNull(importRecord.getC_Charge_ID()))\n-\t\t\t\t//\n-\t\t\t\t.eft(ElectronicFundsTransfer.builder()\n-\t\t\t\t\t\t.trxId(importRecord.getEftTrxID())\n-\t\t\t\t\t\t.trxType(importRecord.getEftTrxType())\n-\t\t\t\t\t\t.checkNo(importRecord.getEftCheckNo())\n-\t\t\t\t\t\t.reference(importRecord.getEftReference())\n-\t\t\t\t\t\t.memo(importRecord.getEftMemo())\n-\t\t\t\t\t\t.payee(importRecord.getEftPayee())\n-\t\t\t\t\t\t.payeeAccount(importRecord.getEftPayeeAccount())\n-\t\t\t\t\t\t.statementLineDate(TimeUtil.asLocalDate(importRecord.getEftStatementLineDate()))\n-\t\t\t\t\t\t.valutaDate(TimeUtil.asLocalDate(importRecord.getEftValutaDate()))\n-\t\t\t\t\t\t.currency(importRecord.getEftCurrency())\n-\t\t\t\t\t\t.amt(importRecord.getEftAmt())\n-\t\t\t\t\t\t.build())\n-\t\t\t\t//\n-\t\t\t\t.build());\n+\t\tfinal BankStatementLineId bankStatementLineId = bankStatementDAO.createBankStatementLine(\n+\t\t\t\tBankStatementLineCreateRequest.builder()\n+\t\t\t\t\t\t.bankStatementId(BankStatementId.ofRepoId(importRecord.getC_BankStatement_ID()))\n+\t\t\t\t\t\t.orgId(OrgId.ofRepoId(importRecord.getAD_Org_ID()))\n+\t\t\t\t\t\t.lineNo(importRecord.getLine())\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.bpartnerId(BPartnerId.ofRepoIdOrNull(importRecord.getC_BPartner_ID()))\n+\t\t\t\t\t\t.importedBillPartnerName(importRecord.getBill_BPartner_Name())\n+\t\t\t\t\t\t.importedBillPartnerIBAN(importRecord.getIBAN_To())\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.referenceNo(importRecord.getReferenceNo())\n+\t\t\t\t\t\t.lineDescription(importRecord.getLineDescription())\n+\t\t\t\t\t\t.memo(importRecord.getMemo())\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.statementLineDate(TimeUtil.asLocalDate(CoalesceUtil.coalesce(importRecord.getStatementLineDate(), importRecord.getStatementDate())))\n+\t\t\t\t\t\t.dateAcct(TimeUtil.asLocalDate(CoalesceUtil.coalesce(importRecord.getDateAcct(), importRecord.getStatementDate())))\n+\t\t\t\t\t\t.valutaDate(TimeUtil.asLocalDate(importRecord.getValutaDate()))\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.statementAmt(Money.of(importRecord.getStmtAmt(), currencyId))\n+\t\t\t\t\t\t.trxAmt(Money.of(importRecord.getTrxAmt(), currencyId))\n+\t\t\t\t\t\t.chargeAmt(Money.of(importRecord.getChargeAmt(), currencyId))\n+\t\t\t\t\t\t.interestAmt(Money.of(importRecord.getInterestAmt(), currencyId))\n+\t\t\t\t\t\t.chargeId(ChargeId.ofRepoIdOrNull(importRecord.getC_Charge_ID()))\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.eft(ElectronicFundsTransfer.builder()\n+\t\t\t\t\t\t\t\t\t .trxId(importRecord.getEftTrxID())\n+\t\t\t\t\t\t\t\t\t .trxType(importRecord.getEftTrxType())\n+\t\t\t\t\t\t\t\t\t .checkNo(importRecord.getEftCheckNo())\n+\t\t\t\t\t\t\t\t\t .reference(importRecord.getEftReference())\n+\t\t\t\t\t\t\t\t\t .memo(importRecord.getEftMemo())\n+\t\t\t\t\t\t\t\t\t .payee(importRecord.getEftPayee())\n+\t\t\t\t\t\t\t\t\t .payeeAccount(importRecord.getEftPayeeAccount())\n+\t\t\t\t\t\t\t\t\t .statementLineDate(TimeUtil.asLocalDate(importRecord.getEftStatementLineDate()))\n+\t\t\t\t\t\t\t\t\t .valutaDate(TimeUtil.asLocalDate(importRecord.getEftValutaDate()))\n+\t\t\t\t\t\t\t\t\t .currency(importRecord.getEftCurrency())\n+\t\t\t\t\t\t\t\t\t .amt(importRecord.getEftAmt())\n+\t\t\t\t\t\t\t\t\t .build())\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.build());\n \n \t\timportRecord.setC_BankStatementLine_ID(bankStatementLineId.getRepoId());\n \t}\n \n \tprivate BankStatementId createBankStatement(@NonNull final I_I_BankStatement importBankStatement)\n \t{\n \t\treturn bankStatementDAO.createBankStatement(BankStatementCreateRequest.builder()\n-\t\t\t\t.orgId(OrgId.ofRepoId(importBankStatement.getAD_Org_ID()))\n-\t\t\t\t.orgBankAccountId(BankAccountId.ofRepoId(importBankStatement.getC_BP_BankAccount_ID()))\n-\t\t\t\t// TODO add documentNo to import\n-\t\t\t\t.statementDate(TimeUtil.asLocalDate(importBankStatement.getStatementDate()))\n-\t\t\t\t.name(importBankStatement.getName())\n-\t\t\t\t.description(importBankStatement.getDescription())\n-\t\t\t\t.eft(BankStatementCreateRequest.ElectronicFundsTransfer.builder()\n-\t\t\t\t\t\t.statementDate(TimeUtil.asLocalDate(importBankStatement.getEftStatementDate()))\n-\t\t\t\t\t\t.statementReference(importBankStatement.getEftStatementReference())\n-\t\t\t\t\t\t.build())\n-\t\t\t\t.build());\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.orgId(OrgId.ofRepoId(importBankStatement.getAD_Org_ID()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.orgBankAccountId(BankAccountId.ofRepoId(importBankStatement.getC_BP_BankAccount_ID()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// TODO add documentNo to import\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.statementDate(TimeUtil.asLocalDate(importBankStatement.getStatementDate()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.name(importBankStatement.getName())\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(importBankStatement.getDescription())\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.eft(BankStatementCreateRequest.ElectronicFundsTransfer.builder()\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t .statementDate(TimeUtil.asLocalDate(importBankStatement.getEftStatementDate()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t .statementReference(importBankStatement.getEftStatementReference())\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t .build())\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.build());\n+\t}\n+\n+\t@VisibleForTesting\n+\tstatic void computeUpdateLineAmts(@NonNull final I_I_BankStatement importRecord)\n+\t{\n+\t\tfinal String amtFormat = getAmtFormat(importRecord);\n+\n+\t\tif (X_I_BankStatement.AMTFORMAT_AmountPlusIndicator.equals(amtFormat))\n+\t\t{\n+\t\t\tfinal BigDecimal trxAmt;\n+\t\t\tfinal boolean isDebit = \"S\".equals(importRecord.getDebitOrCreditIndicator());\n+\t\t\tif (isDebit)\n+\t\t\t{\n+\t\t\t\ttrxAmt = importRecord.getDebitOrCreditAmt().negate();\n+\t\t\t}\n+\t\t\telse\n+\t\t\t{\n+\t\t\t\ttrxAmt = importRecord.getDebitOrCreditAmt();\n+\t\t\t}\n+\n+\t\t\timportRecord.setTrxAmt(trxAmt);\n+\t\t\tfinal BigDecimal stmtAmt = trxAmt.add(importRecord.getChargeAmt()).add(importRecord.getInterestAmt());\n+\t\t\timportRecord.setStmtAmt(stmtAmt);\n+\t\t}\n+\t\telse if (X_I_BankStatement.AMTFORMAT_DebitPlusCredit.equals(amtFormat))\n+\t\t{\n+\t\t\tfinal BigDecimal stmtAmt = importRecord.getCreditStmtAmt().subtract(importRecord.getDebitStmtAmt());\n+\t\t\timportRecord.setStmtAmt(stmtAmt);\n+\t\t\tfinal BigDecimal trxAmt = stmtAmt.subtract(importRecord.getInterestAmt()).subtract(importRecord.getChargeAmt());\n+\t\t\timportRecord.setTrxAmt(trxAmt);\n+\t\t}\n+\t\telse if (X_I_BankStatement.AMTFORMAT_Straight.equals(amtFormat))\n+\t\t{\n+\t\t\timportRecord.setStmtAmt(importRecord.getTrxAmt());\n+\t\t}\n+\n+\t\t{\n+\t\t\tfinal BigDecimal sum = importRecord.getTrxAmt().add(importRecord.getInterestAmt()).add(importRecord.getChargeAmt());", "originalCommit": "050cf8d40137394763ae1258ef526025948a5d83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ5NDgzNw==", "url": "https://github.com/metasfresh/metasfresh/pull/10272#discussion_r528494837", "bodyText": "This is the case where our amt calculations are wrong, and we are throwing an error:\nif StmtAmt != TrxAmt + ChargeAmt + InterestAmt then throw exception.", "author": "TheBestPessimist", "createdAt": "2020-11-23T06:44:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzczNTIwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU0Mzk3Nw==", "url": "https://github.com/metasfresh/metasfresh/pull/10272#discussion_r528543977", "bodyText": "ahh, got it. thx for explaining.\nit's fine!", "author": "teosarca", "createdAt": "2020-11-23T08:48:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzczNTIwMA=="}], "type": "inlineReview", "revised_code": {"commit": "ab59b48d4ed7115f53336c6334f0986ba4537cc6", "chunk": "diff --git a/backend/de.metas.banking/de.metas.banking.base/src/main/java/de/metas/banking/impexp/BankStatementImportProcess.java b/backend/de.metas.banking/de.metas.banking.base/src/main/java/de/metas/banking/impexp/BankStatementImportProcess.java\nindex 4e6c3913d1..4136fec4b5 100644\n--- a/backend/de.metas.banking/de.metas.banking.base/src/main/java/de/metas/banking/impexp/BankStatementImportProcess.java\n+++ b/backend/de.metas.banking/de.metas.banking.base/src/main/java/de/metas/banking/impexp/BankStatementImportProcess.java\n\n@@ -286,11 +287,11 @@ public class BankStatementImportProcess extends SimpleImportProcessTemplate<I_I_\n \t{\n \t\tfinal String lineDescription = Joiner.on(\" / \")\n \t\t\t\t.skipNulls()\n-\t\t\t\t.join(importRecord.getLineDescription(),\n-\t\t\t\t\t  importRecord.getLineDescriptionExtra_1(),\n-\t\t\t\t\t  importRecord.getLineDescriptionExtra_2(),\n-\t\t\t\t\t  importRecord.getLineDescriptionExtra_3(),\n-\t\t\t\t\t  importRecord.getLineDescriptionExtra_4());\n+\t\t\t\t.join(StringUtils.trimBlankToNull(importRecord.getLineDescription()),\n+\t\t\t\t\t  StringUtils.trimBlankToNull(importRecord.getLineDescriptionExtra_1()),\n+\t\t\t\t\t  StringUtils.trimBlankToNull(importRecord.getLineDescriptionExtra_2()),\n+\t\t\t\t\t  StringUtils.trimBlankToNull(importRecord.getLineDescriptionExtra_3()),\n+\t\t\t\t\t  StringUtils.trimBlankToNull(importRecord.getLineDescriptionExtra_4()));\n \n \t\timportRecord.setLineDescription(lineDescription);\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzczNzAyOQ==", "url": "https://github.com/metasfresh/metasfresh/pull/10272#discussion_r527737029", "bodyText": "use de.metas.util.StringUtils#trimBlankToNull on of of the list descriptions parts.\ni.e.\n.join(\nStringUtils.trimBlankToNull(importRecord.getLineDescription()),\nStringUtils.trimBlankToNull(importRecord.getLineDescriptionExtra_1()),\n....\n);", "author": "teosarca", "createdAt": "2020-11-20T14:41:40Z", "path": "backend/de.metas.banking/de.metas.banking.base/src/main/java/de/metas/banking/impexp/BankStatementImportProcess.java", "diffHunk": "@@ -175,62 +180,147 @@ private void createBankStatementLine(final I_I_BankStatement importRecord)\n \n \t\tfinal CurrencyId currencyId = CurrencyId.ofRepoId(importRecord.getC_Currency_ID());\n \n-\t\tfinal BankStatementLineId bankStatementLineId = bankStatementDAO.createBankStatementLine(BankStatementLineCreateRequest.builder()\n-\t\t\t\t.bankStatementId(BankStatementId.ofRepoId(importRecord.getC_BankStatement_ID()))\n-\t\t\t\t.orgId(OrgId.ofRepoId(importRecord.getAD_Org_ID()))\n-\t\t\t\t.lineNo(importRecord.getLine())\n-\t\t\t\t//\n-\t\t\t\t.bpartnerId(BPartnerId.ofRepoIdOrNull(importRecord.getC_BPartner_ID()))\n-\t\t\t\t.importedBillPartnerName(importRecord.getBill_BPartner_Name())\n-\t\t\t\t.importedBillPartnerIBAN(importRecord.getIBAN_To())\n-\t\t\t\t//\n-\t\t\t\t.referenceNo(importRecord.getReferenceNo())\n-\t\t\t\t.lineDescription(importRecord.getLineDescription())\n-\t\t\t\t.memo(importRecord.getMemo())\n-\t\t\t\t//\n-\t\t\t\t.statementLineDate(TimeUtil.asLocalDate(CoalesceUtil.coalesce(importRecord.getStatementLineDate(), importRecord.getStatementDate())))\n-\t\t\t\t.dateAcct(TimeUtil.asLocalDate(CoalesceUtil.coalesce(importRecord.getDateAcct(), importRecord.getStatementDate())))\n-\t\t\t\t.valutaDate(TimeUtil.asLocalDate(importRecord.getValutaDate()))\n-\t\t\t\t//\n-\t\t\t\t.statementAmt(Money.of(importRecord.getStmtAmt(), currencyId))\n-\t\t\t\t.trxAmt(Money.of(importRecord.getTrxAmt(), currencyId))\n-\t\t\t\t.chargeAmt(Money.of(importRecord.getChargeAmt(), currencyId))\n-\t\t\t\t.interestAmt(Money.of(importRecord.getInterestAmt(), currencyId))\n-\t\t\t\t.chargeId(ChargeId.ofRepoIdOrNull(importRecord.getC_Charge_ID()))\n-\t\t\t\t//\n-\t\t\t\t.eft(ElectronicFundsTransfer.builder()\n-\t\t\t\t\t\t.trxId(importRecord.getEftTrxID())\n-\t\t\t\t\t\t.trxType(importRecord.getEftTrxType())\n-\t\t\t\t\t\t.checkNo(importRecord.getEftCheckNo())\n-\t\t\t\t\t\t.reference(importRecord.getEftReference())\n-\t\t\t\t\t\t.memo(importRecord.getEftMemo())\n-\t\t\t\t\t\t.payee(importRecord.getEftPayee())\n-\t\t\t\t\t\t.payeeAccount(importRecord.getEftPayeeAccount())\n-\t\t\t\t\t\t.statementLineDate(TimeUtil.asLocalDate(importRecord.getEftStatementLineDate()))\n-\t\t\t\t\t\t.valutaDate(TimeUtil.asLocalDate(importRecord.getEftValutaDate()))\n-\t\t\t\t\t\t.currency(importRecord.getEftCurrency())\n-\t\t\t\t\t\t.amt(importRecord.getEftAmt())\n-\t\t\t\t\t\t.build())\n-\t\t\t\t//\n-\t\t\t\t.build());\n+\t\tfinal BankStatementLineId bankStatementLineId = bankStatementDAO.createBankStatementLine(\n+\t\t\t\tBankStatementLineCreateRequest.builder()\n+\t\t\t\t\t\t.bankStatementId(BankStatementId.ofRepoId(importRecord.getC_BankStatement_ID()))\n+\t\t\t\t\t\t.orgId(OrgId.ofRepoId(importRecord.getAD_Org_ID()))\n+\t\t\t\t\t\t.lineNo(importRecord.getLine())\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.bpartnerId(BPartnerId.ofRepoIdOrNull(importRecord.getC_BPartner_ID()))\n+\t\t\t\t\t\t.importedBillPartnerName(importRecord.getBill_BPartner_Name())\n+\t\t\t\t\t\t.importedBillPartnerIBAN(importRecord.getIBAN_To())\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.referenceNo(importRecord.getReferenceNo())\n+\t\t\t\t\t\t.lineDescription(importRecord.getLineDescription())\n+\t\t\t\t\t\t.memo(importRecord.getMemo())\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.statementLineDate(TimeUtil.asLocalDate(CoalesceUtil.coalesce(importRecord.getStatementLineDate(), importRecord.getStatementDate())))\n+\t\t\t\t\t\t.dateAcct(TimeUtil.asLocalDate(CoalesceUtil.coalesce(importRecord.getDateAcct(), importRecord.getStatementDate())))\n+\t\t\t\t\t\t.valutaDate(TimeUtil.asLocalDate(importRecord.getValutaDate()))\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.statementAmt(Money.of(importRecord.getStmtAmt(), currencyId))\n+\t\t\t\t\t\t.trxAmt(Money.of(importRecord.getTrxAmt(), currencyId))\n+\t\t\t\t\t\t.chargeAmt(Money.of(importRecord.getChargeAmt(), currencyId))\n+\t\t\t\t\t\t.interestAmt(Money.of(importRecord.getInterestAmt(), currencyId))\n+\t\t\t\t\t\t.chargeId(ChargeId.ofRepoIdOrNull(importRecord.getC_Charge_ID()))\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.eft(ElectronicFundsTransfer.builder()\n+\t\t\t\t\t\t\t\t\t .trxId(importRecord.getEftTrxID())\n+\t\t\t\t\t\t\t\t\t .trxType(importRecord.getEftTrxType())\n+\t\t\t\t\t\t\t\t\t .checkNo(importRecord.getEftCheckNo())\n+\t\t\t\t\t\t\t\t\t .reference(importRecord.getEftReference())\n+\t\t\t\t\t\t\t\t\t .memo(importRecord.getEftMemo())\n+\t\t\t\t\t\t\t\t\t .payee(importRecord.getEftPayee())\n+\t\t\t\t\t\t\t\t\t .payeeAccount(importRecord.getEftPayeeAccount())\n+\t\t\t\t\t\t\t\t\t .statementLineDate(TimeUtil.asLocalDate(importRecord.getEftStatementLineDate()))\n+\t\t\t\t\t\t\t\t\t .valutaDate(TimeUtil.asLocalDate(importRecord.getEftValutaDate()))\n+\t\t\t\t\t\t\t\t\t .currency(importRecord.getEftCurrency())\n+\t\t\t\t\t\t\t\t\t .amt(importRecord.getEftAmt())\n+\t\t\t\t\t\t\t\t\t .build())\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.build());\n \n \t\timportRecord.setC_BankStatementLine_ID(bankStatementLineId.getRepoId());\n \t}\n \n \tprivate BankStatementId createBankStatement(@NonNull final I_I_BankStatement importBankStatement)\n \t{\n \t\treturn bankStatementDAO.createBankStatement(BankStatementCreateRequest.builder()\n-\t\t\t\t.orgId(OrgId.ofRepoId(importBankStatement.getAD_Org_ID()))\n-\t\t\t\t.orgBankAccountId(BankAccountId.ofRepoId(importBankStatement.getC_BP_BankAccount_ID()))\n-\t\t\t\t// TODO add documentNo to import\n-\t\t\t\t.statementDate(TimeUtil.asLocalDate(importBankStatement.getStatementDate()))\n-\t\t\t\t.name(importBankStatement.getName())\n-\t\t\t\t.description(importBankStatement.getDescription())\n-\t\t\t\t.eft(BankStatementCreateRequest.ElectronicFundsTransfer.builder()\n-\t\t\t\t\t\t.statementDate(TimeUtil.asLocalDate(importBankStatement.getEftStatementDate()))\n-\t\t\t\t\t\t.statementReference(importBankStatement.getEftStatementReference())\n-\t\t\t\t\t\t.build())\n-\t\t\t\t.build());\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.orgId(OrgId.ofRepoId(importBankStatement.getAD_Org_ID()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.orgBankAccountId(BankAccountId.ofRepoId(importBankStatement.getC_BP_BankAccount_ID()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// TODO add documentNo to import\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.statementDate(TimeUtil.asLocalDate(importBankStatement.getStatementDate()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.name(importBankStatement.getName())\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(importBankStatement.getDescription())\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.eft(BankStatementCreateRequest.ElectronicFundsTransfer.builder()\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t .statementDate(TimeUtil.asLocalDate(importBankStatement.getEftStatementDate()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t .statementReference(importBankStatement.getEftStatementReference())\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t .build())\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.build());\n+\t}\n+\n+\t@VisibleForTesting\n+\tstatic void computeUpdateLineAmts(@NonNull final I_I_BankStatement importRecord)\n+\t{\n+\t\tfinal String amtFormat = getAmtFormat(importRecord);\n+\n+\t\tif (X_I_BankStatement.AMTFORMAT_AmountPlusIndicator.equals(amtFormat))\n+\t\t{\n+\t\t\tfinal BigDecimal trxAmt;\n+\t\t\tfinal boolean isDebit = \"S\".equals(importRecord.getDebitOrCreditIndicator());\n+\t\t\tif (isDebit)\n+\t\t\t{\n+\t\t\t\ttrxAmt = importRecord.getDebitOrCreditAmt().negate();\n+\t\t\t}\n+\t\t\telse\n+\t\t\t{\n+\t\t\t\ttrxAmt = importRecord.getDebitOrCreditAmt();\n+\t\t\t}\n+\n+\t\t\timportRecord.setTrxAmt(trxAmt);\n+\t\t\tfinal BigDecimal stmtAmt = trxAmt.add(importRecord.getChargeAmt()).add(importRecord.getInterestAmt());\n+\t\t\timportRecord.setStmtAmt(stmtAmt);\n+\t\t}\n+\t\telse if (X_I_BankStatement.AMTFORMAT_DebitPlusCredit.equals(amtFormat))\n+\t\t{\n+\t\t\tfinal BigDecimal stmtAmt = importRecord.getCreditStmtAmt().subtract(importRecord.getDebitStmtAmt());\n+\t\t\timportRecord.setStmtAmt(stmtAmt);\n+\t\t\tfinal BigDecimal trxAmt = stmtAmt.subtract(importRecord.getInterestAmt()).subtract(importRecord.getChargeAmt());\n+\t\t\timportRecord.setTrxAmt(trxAmt);\n+\t\t}\n+\t\telse if (X_I_BankStatement.AMTFORMAT_Straight.equals(amtFormat))\n+\t\t{\n+\t\t\timportRecord.setStmtAmt(importRecord.getTrxAmt());\n+\t\t}\n+\n+\t\t{\n+\t\t\tfinal BigDecimal sum = importRecord.getTrxAmt().add(importRecord.getInterestAmt()).add(importRecord.getChargeAmt());\n+\t\t\tif (importRecord.getStmtAmt().compareTo(sum) != 0)\n+\t\t\t{\n+\t\t\t\tthrow new AdempiereException(\"Invalid amount\");\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate static void updateDescription(@NonNull final I_I_BankStatement importRecord)\n+\t{\n+\t\tfinal String lineDescription = Joiner.on(\" / \")\n+\t\t\t\t.skipNulls()\n+\t\t\t\t.join(importRecord.getLineDescription(),", "originalCommit": "050cf8d40137394763ae1258ef526025948a5d83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ4NzAzMg==", "url": "https://github.com/metasfresh/metasfresh/pull/10272#discussion_r528487032", "bodyText": "done", "author": "TheBestPessimist", "createdAt": "2020-11-23T06:12:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzczNzAyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "ab59b48d4ed7115f53336c6334f0986ba4537cc6", "chunk": "diff --git a/backend/de.metas.banking/de.metas.banking.base/src/main/java/de/metas/banking/impexp/BankStatementImportProcess.java b/backend/de.metas.banking/de.metas.banking.base/src/main/java/de/metas/banking/impexp/BankStatementImportProcess.java\nindex 4e6c3913d1..4136fec4b5 100644\n--- a/backend/de.metas.banking/de.metas.banking.base/src/main/java/de/metas/banking/impexp/BankStatementImportProcess.java\n+++ b/backend/de.metas.banking/de.metas.banking.base/src/main/java/de/metas/banking/impexp/BankStatementImportProcess.java\n\n@@ -286,11 +287,11 @@ public class BankStatementImportProcess extends SimpleImportProcessTemplate<I_I_\n \t{\n \t\tfinal String lineDescription = Joiner.on(\" / \")\n \t\t\t\t.skipNulls()\n-\t\t\t\t.join(importRecord.getLineDescription(),\n-\t\t\t\t\t  importRecord.getLineDescriptionExtra_1(),\n-\t\t\t\t\t  importRecord.getLineDescriptionExtra_2(),\n-\t\t\t\t\t  importRecord.getLineDescriptionExtra_3(),\n-\t\t\t\t\t  importRecord.getLineDescriptionExtra_4());\n+\t\t\t\t.join(StringUtils.trimBlankToNull(importRecord.getLineDescription()),\n+\t\t\t\t\t  StringUtils.trimBlankToNull(importRecord.getLineDescriptionExtra_1()),\n+\t\t\t\t\t  StringUtils.trimBlankToNull(importRecord.getLineDescriptionExtra_2()),\n+\t\t\t\t\t  StringUtils.trimBlankToNull(importRecord.getLineDescriptionExtra_3()),\n+\t\t\t\t\t  StringUtils.trimBlankToNull(importRecord.getLineDescriptionExtra_4()));\n \n \t\timportRecord.setLineDescription(lineDescription);\n \t}\n"}}, {"oid": "ab59b48d4ed7115f53336c6334f0986ba4537cc6", "url": "https://github.com/metasfresh/metasfresh/commit/ab59b48d4ed7115f53336c6334f0986ba4537cc6", "message": "Trim blank strings to null, so they can be properly skipped\n\nhttps://github.com/metasfresh/metasfresh/issues/10270\n\nSigned-off-by: TheBestPessimist <cristian@tbp.land>", "committedDate": "2020-11-23T06:12:23Z", "type": "commit"}, {"oid": "533186afdcdfd7fe7c6fd267951d3b7eeb3990fa", "url": "https://github.com/metasfresh/metasfresh/commit/533186afdcdfd7fe7c6fd267951d3b7eeb3990fa", "message": "Validate `charset` and `skipFirstNRows`\n\nhttps://github.com/metasfresh/metasfresh/issues/10270\n\nSigned-off-by: TheBestPessimist <cristian@tbp.land>", "committedDate": "2020-11-23T06:33:47Z", "type": "commit"}, {"oid": "10259281bb5c910560374803e17d4b9e8cab9a5e", "url": "https://github.com/metasfresh/metasfresh/commit/10259281bb5c910560374803e17d4b9e8cab9a5e", "message": "Don't hardcode strings, use constants\n\nhttps://github.com/metasfresh/metasfresh/issues/10270\nSigned-off-by: TheBestPessimist <cristian@tbp.land>", "committedDate": "2020-11-23T06:40:44Z", "type": "commit"}, {"oid": "08821934fb4ab529d7ef52dd0f1d934229827374", "url": "https://github.com/metasfresh/metasfresh/commit/08821934fb4ab529d7ef52dd0f1d934229827374", "message": "Possible fix, unsure.\n\nhttps://github.com/metasfresh/metasfresh/issues/10270\nSigned-off-by: TheBestPessimist <cristian@tbp.land>", "committedDate": "2020-11-23T06:47:07Z", "type": "commit"}, {"oid": "a1736f42bfcfeb5057cb3f174daeec8c00c02c71", "url": "https://github.com/metasfresh/metasfresh/commit/a1736f42bfcfeb5057cb3f174daeec8c00c02c71", "message": "Fix tests\n\nhttps://github.com/metasfresh/metasfresh/issues/10270\nSigned-off-by: TheBestPessimist <cristian@tbp.land>", "committedDate": "2020-11-23T07:02:16Z", "type": "commit"}, {"oid": "de84db6b8b0aec23c34d27bf41445dec6ba2799c", "url": "https://github.com/metasfresh/metasfresh/commit/de84db6b8b0aec23c34d27bf41445dec6ba2799c", "message": "Add nullability annotations, fix warnings\n\nhttps://github.com/metasfresh/metasfresh/issues/10270\nSigned-off-by: TheBestPessimist <cristian@tbp.land>", "committedDate": "2020-11-23T08:29:45Z", "type": "commit"}, {"oid": "88265fd3b8be168390f9df10c380b0179788606d", "url": "https://github.com/metasfresh/metasfresh/commit/88265fd3b8be168390f9df10c380b0179788606d", "message": "Add test for `AmtFormat`\n\nhttps://github.com/metasfresh/metasfresh/issues/10270\nSigned-off-by: TheBestPessimist <cristian@tbp.land>", "committedDate": "2020-11-23T08:30:27Z", "type": "commit"}, {"oid": "32b4411463d9fcc2f6f7f756dbb3e691a5a3d15e", "url": "https://github.com/metasfresh/metasfresh/commit/32b4411463d9fcc2f6f7f756dbb3e691a5a3d15e", "message": "Add migration files\n\nhttps://github.com/metasfresh/metasfresh/issues/10270\nSigned-off-by: TheBestPessimist <cristian@tbp.land>", "committedDate": "2020-11-23T09:44:01Z", "type": "commit"}, {"oid": "4e1ebd6740fa190a5268c9426cb1153af454df62", "url": "https://github.com/metasfresh/metasfresh/commit/4e1ebd6740fa190a5268c9426cb1153af454df62", "message": "Herpa derpa\n\nhttps://github.com/metasfresh/metasfresh/issues/10270\nSigned-off-by: TheBestPessimist <cristian@tbp.land>", "committedDate": "2020-11-23T10:43:39Z", "type": "commit"}, {"oid": "4e1ebd6740fa190a5268c9426cb1153af454df62", "url": "https://github.com/metasfresh/metasfresh/commit/4e1ebd6740fa190a5268c9426cb1153af454df62", "message": "Herpa derpa\n\nhttps://github.com/metasfresh/metasfresh/issues/10270\nSigned-off-by: TheBestPessimist <cristian@tbp.land>", "committedDate": "2020-11-23T10:43:39Z", "type": "forcePushed"}]}