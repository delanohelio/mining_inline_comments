{"pr_number": 7118, "pr_title": "#7109 Initial commit.", "pr_createdAt": "2020-08-10T21:38:44Z", "pr_url": "https://github.com/metasfresh/metasfresh/pull/7118", "timeline": [{"oid": "d26ee9bb70876e87cd4194a3214951d371f9cf0a", "url": "https://github.com/metasfresh/metasfresh/commit/d26ee9bb70876e87cd4194a3214951d371f9cf0a", "message": "#7109 Initial commit.", "committedDate": "2020-08-10T21:36:46Z", "type": "commit"}, {"oid": "6a5e3c1e6601c2600d17e15420b110bd2f7a9c73", "url": "https://github.com/metasfresh/metasfresh/commit/6a5e3c1e6601c2600d17e15420b110bd2f7a9c73", "message": "#7109 Second commit - WIP.", "committedDate": "2020-08-10T21:47:09Z", "type": "commit"}, {"oid": "af3c64d083856558d051ca5a55daffbc94efbea7", "url": "https://github.com/metasfresh/metasfresh/commit/af3c64d083856558d051ca5a55daffbc94efbea7", "message": "#7109 Third commit - WIP", "committedDate": "2020-08-11T11:36:31Z", "type": "commit"}, {"oid": "333f32ead8aeda34f98ed2f0af0fdfe7cb891cf5", "url": "https://github.com/metasfresh/metasfresh/commit/333f32ead8aeda34f98ed2f0af0fdfe7cb891cf5", "message": "#7109 Fix querying for selected records.", "committedDate": "2020-08-11T12:59:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ1ODIwNw==", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r471458207", "bodyText": "Instead of having this method, you can use de.metas.util.collections.CollectionUtils#extractDistinctElements", "author": "metas-ts", "createdAt": "2020-08-17T12:54:44Z", "path": "backend/de.metas.business/src/main/java/de/metas/payment/api/impl/PaymentBL.java", "diffHunk": "@@ -419,6 +429,66 @@ public boolean isMatchInvoice(final I_C_Payment payment, final I_C_Invoice invoi\n \t\treturn false;\n \t}\n \n+\t@Override\n+\tpublic String isPaypalOrCreditCardPayment(final I_C_Payment payment, final int paypalDataSourceId, final int creditCardDataSourceId)\n+\t{\n+\n+\t\tfinal I_C_Order order = orderBL.getByExternalId(ExternalId.of(payment.getExternalOrderId()));\n+\t\tif (order.getAD_InputDataSource_ID() == paypalDataSourceId)\n+\t\t{\n+\t\t\treturn \"L\";\n+\t\t}\n+\n+\t\tif (order.getAD_InputDataSource_ID() == creditCardDataSourceId)\n+\t\t{\n+\t\t\treturn \"K\";\n+\t\t}\n+\n+\t\treturn \"P\";\n+\t}\n+\n+\t@Override\n+\tpublic List<ExternalId> getExternalIdsList(List<I_C_Payment> payments)", "originalCommit": "333f32ead8aeda34f98ed2f0af0fdfe7cb891cf5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9c7fe55902eaa2aca9c5fdbadaddb0698eb0652", "chunk": "diff --git a/backend/de.metas.business/src/main/java/de/metas/payment/api/impl/PaymentBL.java b/backend/de.metas.business/src/main/java/de/metas/payment/api/impl/PaymentBL.java\nindex a9106afaa1..f1e86003ca 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/payment/api/impl/PaymentBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/payment/api/impl/PaymentBL.java\n\n@@ -433,7 +429,18 @@ public class PaymentBL implements IPaymentBL\n \tpublic String isPaypalOrCreditCardPayment(final I_C_Payment payment, final int paypalDataSourceId, final int creditCardDataSourceId)\n \t{\n \n+\t\tif (payment.getExternalOrderId() == null)\n+\t\t{\n+\t\t\treturn \"\";\n+\t\t}\n+\n \t\tfinal I_C_Order order = orderBL.getByExternalId(ExternalId.of(payment.getExternalOrderId()));\n+\n+\t\tif (order == null)\n+\t\t{\n+\t\t\treturn \"\";\n+\t\t}\n+\n \t\tif (order.getAD_InputDataSource_ID() == paypalDataSourceId)\n \t\t{\n \t\t\treturn \"L\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ1ODY0Nw==", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r471458647", "bodyText": "same here (de.metas.util.collections.CollectionUtils#extractDistinctElements)", "author": "metas-ts", "createdAt": "2020-08-17T12:55:29Z", "path": "backend/de.metas.business/src/main/java/de/metas/payment/api/impl/PaymentBL.java", "diffHunk": "@@ -419,6 +429,66 @@ public boolean isMatchInvoice(final I_C_Payment payment, final I_C_Invoice invoi\n \t\treturn false;\n \t}\n \n+\t@Override\n+\tpublic String isPaypalOrCreditCardPayment(final I_C_Payment payment, final int paypalDataSourceId, final int creditCardDataSourceId)\n+\t{\n+\n+\t\tfinal I_C_Order order = orderBL.getByExternalId(ExternalId.of(payment.getExternalOrderId()));\n+\t\tif (order.getAD_InputDataSource_ID() == paypalDataSourceId)\n+\t\t{\n+\t\t\treturn \"L\";\n+\t\t}\n+\n+\t\tif (order.getAD_InputDataSource_ID() == creditCardDataSourceId)\n+\t\t{\n+\t\t\treturn \"K\";\n+\t\t}\n+\n+\t\treturn \"P\";\n+\t}\n+\n+\t@Override\n+\tpublic List<ExternalId> getExternalIdsList(List<I_C_Payment> payments)\n+\t{\n+\t\tfinal List<ExternalId> externalIds = new ArrayList<ExternalId>();\n+\t\tfor (final I_C_Payment payment : payments)\n+\t\t{\n+\t\t\texternalIds.add(ExternalId.of(payment.getExternalOrderId()));\n+\t\t}\n+\t\treturn externalIds;\n+\t}\n+\n+\t@Override\n+\tpublic List<OrderId> getOrderIdsList(List<I_C_Payment> payments)", "originalCommit": "333f32ead8aeda34f98ed2f0af0fdfe7cb891cf5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9c7fe55902eaa2aca9c5fdbadaddb0698eb0652", "chunk": "diff --git a/backend/de.metas.business/src/main/java/de/metas/payment/api/impl/PaymentBL.java b/backend/de.metas.business/src/main/java/de/metas/payment/api/impl/PaymentBL.java\nindex a9106afaa1..f1e86003ca 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/payment/api/impl/PaymentBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/payment/api/impl/PaymentBL.java\n\n@@ -433,7 +429,18 @@ public class PaymentBL implements IPaymentBL\n \tpublic String isPaypalOrCreditCardPayment(final I_C_Payment payment, final int paypalDataSourceId, final int creditCardDataSourceId)\n \t{\n \n+\t\tif (payment.getExternalOrderId() == null)\n+\t\t{\n+\t\t\treturn \"\";\n+\t\t}\n+\n \t\tfinal I_C_Order order = orderBL.getByExternalId(ExternalId.of(payment.getExternalOrderId()));\n+\n+\t\tif (order == null)\n+\t\t{\n+\t\t\treturn \"\";\n+\t\t}\n+\n \t\tif (order.getAD_InputDataSource_ID() == paypalDataSourceId)\n \t\t{\n \t\t\treturn \"L\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ1OTEzMA==", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r471459130", "bodyText": "payment can be final", "author": "metas-ts", "createdAt": "2020-08-17T12:56:19Z", "path": "backend/de.metas.business/src/main/java/de/metas/payment/api/impl/PaymentBL.java", "diffHunk": "@@ -419,6 +429,66 @@ public boolean isMatchInvoice(final I_C_Payment payment, final I_C_Invoice invoi\n \t\treturn false;\n \t}\n \n+\t@Override\n+\tpublic String isPaypalOrCreditCardPayment(final I_C_Payment payment, final int paypalDataSourceId, final int creditCardDataSourceId)\n+\t{\n+\n+\t\tfinal I_C_Order order = orderBL.getByExternalId(ExternalId.of(payment.getExternalOrderId()));\n+\t\tif (order.getAD_InputDataSource_ID() == paypalDataSourceId)\n+\t\t{\n+\t\t\treturn \"L\";\n+\t\t}\n+\n+\t\tif (order.getAD_InputDataSource_ID() == creditCardDataSourceId)\n+\t\t{\n+\t\t\treturn \"K\";\n+\t\t}\n+\n+\t\treturn \"P\";\n+\t}\n+\n+\t@Override\n+\tpublic List<ExternalId> getExternalIdsList(List<I_C_Payment> payments)\n+\t{\n+\t\tfinal List<ExternalId> externalIds = new ArrayList<ExternalId>();\n+\t\tfor (final I_C_Payment payment : payments)\n+\t\t{\n+\t\t\texternalIds.add(ExternalId.of(payment.getExternalOrderId()));\n+\t\t}\n+\t\treturn externalIds;\n+\t}\n+\n+\t@Override\n+\tpublic List<OrderId> getOrderIdsList(List<I_C_Payment> payments)\n+\t{\n+\t\tfinal List<OrderId> orderIds = new ArrayList<OrderId>();\n+\t\tfor (final I_C_Payment payment : payments)\n+\t\t{\n+\t\t\torderIds.add(OrderId.ofRepoId(payment.getC_Order_ID()));\n+\t\t}\n+\t\treturn orderIds;\n+\t}\n+\n+\t@Override\n+\tpublic void setPaymentOrderIds(List<I_C_Payment> payments, Map<ExternalId, OrderId> ids)\n+\t{\n+\t\tfor (I_C_Payment payment : payments)", "originalCommit": "333f32ead8aeda34f98ed2f0af0fdfe7cb891cf5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9c7fe55902eaa2aca9c5fdbadaddb0698eb0652", "chunk": "diff --git a/backend/de.metas.business/src/main/java/de/metas/payment/api/impl/PaymentBL.java b/backend/de.metas.business/src/main/java/de/metas/payment/api/impl/PaymentBL.java\nindex a9106afaa1..f1e86003ca 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/payment/api/impl/PaymentBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/payment/api/impl/PaymentBL.java\n\n@@ -433,7 +429,18 @@ public class PaymentBL implements IPaymentBL\n \tpublic String isPaypalOrCreditCardPayment(final I_C_Payment payment, final int paypalDataSourceId, final int creditCardDataSourceId)\n \t{\n \n+\t\tif (payment.getExternalOrderId() == null)\n+\t\t{\n+\t\t\treturn \"\";\n+\t\t}\n+\n \t\tfinal I_C_Order order = orderBL.getByExternalId(ExternalId.of(payment.getExternalOrderId()));\n+\n+\t\tif (order == null)\n+\t\t{\n+\t\t\treturn \"\";\n+\t\t}\n+\n \t\tif (order.getAD_InputDataSource_ID() == paypalDataSourceId)\n \t\t{\n \t\t\treturn \"L\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ1OTcyMw==", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r471459723", "bodyText": "make sure to avoid an NPE if ids doesn't contain the current payment.getExternalOrderId()", "author": "metas-ts", "createdAt": "2020-08-17T12:57:18Z", "path": "backend/de.metas.business/src/main/java/de/metas/payment/api/impl/PaymentBL.java", "diffHunk": "@@ -419,6 +429,66 @@ public boolean isMatchInvoice(final I_C_Payment payment, final I_C_Invoice invoi\n \t\treturn false;\n \t}\n \n+\t@Override\n+\tpublic String isPaypalOrCreditCardPayment(final I_C_Payment payment, final int paypalDataSourceId, final int creditCardDataSourceId)\n+\t{\n+\n+\t\tfinal I_C_Order order = orderBL.getByExternalId(ExternalId.of(payment.getExternalOrderId()));\n+\t\tif (order.getAD_InputDataSource_ID() == paypalDataSourceId)\n+\t\t{\n+\t\t\treturn \"L\";\n+\t\t}\n+\n+\t\tif (order.getAD_InputDataSource_ID() == creditCardDataSourceId)\n+\t\t{\n+\t\t\treturn \"K\";\n+\t\t}\n+\n+\t\treturn \"P\";\n+\t}\n+\n+\t@Override\n+\tpublic List<ExternalId> getExternalIdsList(List<I_C_Payment> payments)\n+\t{\n+\t\tfinal List<ExternalId> externalIds = new ArrayList<ExternalId>();\n+\t\tfor (final I_C_Payment payment : payments)\n+\t\t{\n+\t\t\texternalIds.add(ExternalId.of(payment.getExternalOrderId()));\n+\t\t}\n+\t\treturn externalIds;\n+\t}\n+\n+\t@Override\n+\tpublic List<OrderId> getOrderIdsList(List<I_C_Payment> payments)\n+\t{\n+\t\tfinal List<OrderId> orderIds = new ArrayList<OrderId>();\n+\t\tfor (final I_C_Payment payment : payments)\n+\t\t{\n+\t\t\torderIds.add(OrderId.ofRepoId(payment.getC_Order_ID()));\n+\t\t}\n+\t\treturn orderIds;\n+\t}\n+\n+\t@Override\n+\tpublic void setPaymentOrderIds(List<I_C_Payment> payments, Map<ExternalId, OrderId> ids)\n+\t{\n+\t\tfor (I_C_Payment payment : payments)\n+\t\t{\n+\t\t\tpayment.setC_Order_ID(ids.get(ExternalId.of(payment.getExternalOrderId())).getRepoId());", "originalCommit": "333f32ead8aeda34f98ed2f0af0fdfe7cb891cf5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9c7fe55902eaa2aca9c5fdbadaddb0698eb0652", "chunk": "diff --git a/backend/de.metas.business/src/main/java/de/metas/payment/api/impl/PaymentBL.java b/backend/de.metas.business/src/main/java/de/metas/payment/api/impl/PaymentBL.java\nindex a9106afaa1..f1e86003ca 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/payment/api/impl/PaymentBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/payment/api/impl/PaymentBL.java\n\n@@ -433,7 +429,18 @@ public class PaymentBL implements IPaymentBL\n \tpublic String isPaypalOrCreditCardPayment(final I_C_Payment payment, final int paypalDataSourceId, final int creditCardDataSourceId)\n \t{\n \n+\t\tif (payment.getExternalOrderId() == null)\n+\t\t{\n+\t\t\treturn \"\";\n+\t\t}\n+\n \t\tfinal I_C_Order order = orderBL.getByExternalId(ExternalId.of(payment.getExternalOrderId()));\n+\n+\t\tif (order == null)\n+\t\t{\n+\t\t\treturn \"\";\n+\t\t}\n+\n \t\tif (order.getAD_InputDataSource_ID() == paypalDataSourceId)\n \t\t{\n \t\t\treturn \"L\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ1OTgyNA==", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r471459824", "bodyText": "same (avoid NPE)", "author": "metas-ts", "createdAt": "2020-08-17T12:57:30Z", "path": "backend/de.metas.business/src/main/java/de/metas/payment/api/impl/PaymentBL.java", "diffHunk": "@@ -419,6 +429,66 @@ public boolean isMatchInvoice(final I_C_Payment payment, final I_C_Invoice invoi\n \t\treturn false;\n \t}\n \n+\t@Override\n+\tpublic String isPaypalOrCreditCardPayment(final I_C_Payment payment, final int paypalDataSourceId, final int creditCardDataSourceId)\n+\t{\n+\n+\t\tfinal I_C_Order order = orderBL.getByExternalId(ExternalId.of(payment.getExternalOrderId()));\n+\t\tif (order.getAD_InputDataSource_ID() == paypalDataSourceId)\n+\t\t{\n+\t\t\treturn \"L\";\n+\t\t}\n+\n+\t\tif (order.getAD_InputDataSource_ID() == creditCardDataSourceId)\n+\t\t{\n+\t\t\treturn \"K\";\n+\t\t}\n+\n+\t\treturn \"P\";\n+\t}\n+\n+\t@Override\n+\tpublic List<ExternalId> getExternalIdsList(List<I_C_Payment> payments)\n+\t{\n+\t\tfinal List<ExternalId> externalIds = new ArrayList<ExternalId>();\n+\t\tfor (final I_C_Payment payment : payments)\n+\t\t{\n+\t\t\texternalIds.add(ExternalId.of(payment.getExternalOrderId()));\n+\t\t}\n+\t\treturn externalIds;\n+\t}\n+\n+\t@Override\n+\tpublic List<OrderId> getOrderIdsList(List<I_C_Payment> payments)\n+\t{\n+\t\tfinal List<OrderId> orderIds = new ArrayList<OrderId>();\n+\t\tfor (final I_C_Payment payment : payments)\n+\t\t{\n+\t\t\torderIds.add(OrderId.ofRepoId(payment.getC_Order_ID()));\n+\t\t}\n+\t\treturn orderIds;\n+\t}\n+\n+\t@Override\n+\tpublic void setPaymentOrderIds(List<I_C_Payment> payments, Map<ExternalId, OrderId> ids)\n+\t{\n+\t\tfor (I_C_Payment payment : payments)\n+\t\t{\n+\t\t\tpayment.setC_Order_ID(ids.get(ExternalId.of(payment.getExternalOrderId())).getRepoId());\n+\t\t\tsave(payment);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void setPaymentInvoiceIds(List<I_C_Payment> payments, Map<OrderId, InvoiceId> ids)\n+\t{\n+\t\tfor (I_C_Payment payment : payments)", "originalCommit": "333f32ead8aeda34f98ed2f0af0fdfe7cb891cf5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9c7fe55902eaa2aca9c5fdbadaddb0698eb0652", "chunk": "diff --git a/backend/de.metas.business/src/main/java/de/metas/payment/api/impl/PaymentBL.java b/backend/de.metas.business/src/main/java/de/metas/payment/api/impl/PaymentBL.java\nindex a9106afaa1..f1e86003ca 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/payment/api/impl/PaymentBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/payment/api/impl/PaymentBL.java\n\n@@ -433,7 +429,18 @@ public class PaymentBL implements IPaymentBL\n \tpublic String isPaypalOrCreditCardPayment(final I_C_Payment payment, final int paypalDataSourceId, final int creditCardDataSourceId)\n \t{\n \n+\t\tif (payment.getExternalOrderId() == null)\n+\t\t{\n+\t\t\treturn \"\";\n+\t\t}\n+\n \t\tfinal I_C_Order order = orderBL.getByExternalId(ExternalId.of(payment.getExternalOrderId()));\n+\n+\t\tif (order == null)\n+\t\t{\n+\t\t\treturn \"\";\n+\t\t}\n+\n \t\tif (order.getAD_InputDataSource_ID() == paypalDataSourceId)\n \t\t{\n \t\t\treturn \"L\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ2NDIwNw==", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r471464207", "bodyText": "that's OK, but then please remove this stuff from de.metas.order.model.I_C_Order", "author": "metas-ts", "createdAt": "2020-08-17T13:04:58Z", "path": "backend/de.metas.adempiere.adempiere/base/src/main/java-gen/org/compiere/model/I_C_Order.java", "diffHunk": "@@ -8,6 +8,10 @@\n public interface I_C_Order \n {\n \n+\tString COLUMNNAME_AD_InputDataSource_ID = \"AD_InputDataSource_ID\";", "originalCommit": "333f32ead8aeda34f98ed2f0af0fdfe7cb891cf5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4ed0541af2342d5a9806b3307d7d2173b75d5be2", "chunk": "diff --git a/backend/de.metas.adempiere.adempiere/base/src/main/java-gen/org/compiere/model/I_C_Order.java b/backend/de.metas.adempiere.adempiere/base/src/main/java-gen/org/compiere/model/I_C_Order.java\nindex 8b61cb4cfc..af62ea4759 100644\n--- a/backend/de.metas.adempiere.adempiere/base/src/main/java-gen/org/compiere/model/I_C_Order.java\n+++ b/backend/de.metas.adempiere.adempiere/base/src/main/java-gen/org/compiere/model/I_C_Order.java\n\n@@ -1,30 +1,28 @@\n package org.compiere.model;\n \n-\n-/** Generated Interface for C_Order\n- *  @author Adempiere (generated) \n+/**\n+ * Generated Interface for C_Order\n+ *\n+ * @author Adempiere (generated)\n  */\n @SuppressWarnings(\"javadoc\")\n-public interface I_C_Order \n+public interface I_C_Order\n {\n+\t/**\n+\t * TableName=C_Order\n+\t */\n+\tpublic static final String Table_Name = \"C_Order\";\n \n-\tString COLUMNNAME_AD_InputDataSource_ID = \"AD_InputDataSource_ID\";\n-\tint getAD_InputDataSource_ID();\n-\tvoid setAD_InputDataSource_ID(int AD_InputDataSource_ID);\n-\n-    /** TableName=C_Order */\n-    public static final String Table_Name = \"C_Order\";\n-\n-    /** AD_Table_ID=259 */\n-//    public static final int Table_ID = org.compiere.model.MTable.getTable_ID(Table_Name);\n+\t/** AD_Table_ID=259 */\n+\t//    public static final int Table_ID = org.compiere.model.MTable.getTable_ID(Table_Name);\n \n-//    org.compiere.util.KeyNamePair Model = new org.compiere.util.KeyNamePair(Table_ID, Table_Name);\n+\t//    org.compiere.util.KeyNamePair Model = new org.compiere.util.KeyNamePair(Table_ID, Table_Name);\n \n-    /** AccessLevel = 1 - Org\n-     */\n-//    java.math.BigDecimal accessLevel = java.math.BigDecimal.valueOf(1);\n+\t/** AccessLevel = 1 - Org\n+\t */\n+\t//    java.math.BigDecimal accessLevel = java.math.BigDecimal.valueOf(1);\n \n-    /** Load Meta Data */\n+\t/** Load Meta Data */\n \n \t/**\n \t * Get Mandant.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ2NTA0OQ==", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r471465049", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tMap<OrderId, InvoiceId> getInvoiceIdsForOrderIds(final List<OrderId> orderIds);\n          \n          \n            \n            \tMap<OrderId, InvoiceId> getInvoiceIdsForOrderIds(List<OrderId> orderIds);", "author": "metas-ts", "createdAt": "2020-08-17T13:06:27Z", "path": "backend/de.metas.business/src/main/java/de/metas/invoice/service/IInvoiceDAO.java", "diffHunk": "@@ -57,6 +58,10 @@\n \n \tvoid save(org.compiere.model.I_C_InvoiceLine invoiceLine);\n \n+\tMap<OrderId, InvoiceId> getInvoiceIdsForOrderIds(final List<OrderId> orderIds);", "originalCommit": "333f32ead8aeda34f98ed2f0af0fdfe7cb891cf5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9c7fe55902eaa2aca9c5fdbadaddb0698eb0652", "chunk": "diff --git a/backend/de.metas.business/src/main/java/de/metas/invoice/service/IInvoiceDAO.java b/backend/de.metas.business/src/main/java/de/metas/invoice/service/IInvoiceDAO.java\nindex f65ca21db7..f79d5f885a 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/invoice/service/IInvoiceDAO.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/invoice/service/IInvoiceDAO.java\n\n@@ -58,9 +57,9 @@ public interface IInvoiceDAO extends ISingletonService\n \n \tvoid save(org.compiere.model.I_C_InvoiceLine invoiceLine);\n \n-\tMap<OrderId, InvoiceId> getInvoiceIdsForOrderIds(final List<OrderId> orderIds);\n+\tMap<OrderId, InvoiceId> getInvoiceIdsForOrderIds(List<OrderId> orderIds);\n \n-\tI_C_Invoice getByOrderId(final OrderId orderId);\n+\tI_C_Invoice getByOrderId(OrderId orderId);\n \n \t/**\n \t * @throws IllegalArgumentException if invoice is not an {@link MInvoice}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ2NTEwOQ==", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r471465109", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tI_C_Invoice getByOrderId(final OrderId orderId);\n          \n          \n            \n            \tI_C_Invoice getByOrderId(OrderId orderId);", "author": "metas-ts", "createdAt": "2020-08-17T13:06:36Z", "path": "backend/de.metas.business/src/main/java/de/metas/invoice/service/IInvoiceDAO.java", "diffHunk": "@@ -57,6 +58,10 @@\n \n \tvoid save(org.compiere.model.I_C_InvoiceLine invoiceLine);\n \n+\tMap<OrderId, InvoiceId> getInvoiceIdsForOrderIds(final List<OrderId> orderIds);\n+\n+\tI_C_Invoice getByOrderId(final OrderId orderId);", "originalCommit": "333f32ead8aeda34f98ed2f0af0fdfe7cb891cf5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9c7fe55902eaa2aca9c5fdbadaddb0698eb0652", "chunk": "diff --git a/backend/de.metas.business/src/main/java/de/metas/invoice/service/IInvoiceDAO.java b/backend/de.metas.business/src/main/java/de/metas/invoice/service/IInvoiceDAO.java\nindex f65ca21db7..f79d5f885a 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/invoice/service/IInvoiceDAO.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/invoice/service/IInvoiceDAO.java\n\n@@ -58,9 +57,9 @@ public interface IInvoiceDAO extends ISingletonService\n \n \tvoid save(org.compiere.model.I_C_InvoiceLine invoiceLine);\n \n-\tMap<OrderId, InvoiceId> getInvoiceIdsForOrderIds(final List<OrderId> orderIds);\n+\tMap<OrderId, InvoiceId> getInvoiceIdsForOrderIds(List<OrderId> orderIds);\n \n-\tI_C_Invoice getByOrderId(final OrderId orderId);\n+\tI_C_Invoice getByOrderId(OrderId orderId);\n \n \t/**\n \t * @throws IllegalArgumentException if invoice is not an {@link MInvoice}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ2ODA5Nw==", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r471468097", "bodyText": "i think there is no point loading them one-by-one.\nyou can use IQueryBuilder.addInArrayFilter()", "author": "metas-ts", "createdAt": "2020-08-17T13:12:04Z", "path": "backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/InvoiceDAO.java", "diffHunk": "@@ -53,6 +62,33 @@ public I_C_Invoice createInvoice(String trxName)\n \t\treturn InterfaceWrapperHelper.create(Env.getCtx(), I_C_Invoice.class, trxName);\n \t}\n \n+\t@Override\n+\tpublic Map<OrderId, InvoiceId> getInvoiceIdsForOrderIds(final List<OrderId> orderIds)\n+\t{\n+\t\tMap<OrderId, InvoiceId> orderIdInvoiceIdMap = new HashMap<OrderId, InvoiceId>();\n+\n+\t\tfor (OrderId orderId : orderIds)\n+\t\t{\n+\t\t\torderIdInvoiceIdMap.put(orderId, InvoiceId.ofRepoId(getByOrderId(orderId).getC_Order_ID()));", "originalCommit": "333f32ead8aeda34f98ed2f0af0fdfe7cb891cf5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9c7fe55902eaa2aca9c5fdbadaddb0698eb0652", "chunk": "diff --git a/backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/InvoiceDAO.java b/backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/InvoiceDAO.java\nindex 5ef7c3b24e..b52468d067 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/InvoiceDAO.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/InvoiceDAO.java\n\n@@ -62,18 +57,6 @@ public class InvoiceDAO extends AbstractInvoiceDAO\n \t\treturn InterfaceWrapperHelper.create(Env.getCtx(), I_C_Invoice.class, trxName);\n \t}\n \n-\t@Override\n-\tpublic Map<OrderId, InvoiceId> getInvoiceIdsForOrderIds(final List<OrderId> orderIds)\n-\t{\n-\t\tMap<OrderId, InvoiceId> orderIdInvoiceIdMap = new HashMap<OrderId, InvoiceId>();\n-\n-\t\tfor (OrderId orderId : orderIds)\n-\t\t{\n-\t\t\torderIdInvoiceIdMap.put(orderId, InvoiceId.ofRepoId(getByOrderId(orderId).getC_Order_ID()));\n-\t\t}\n-\t\treturn orderIdInvoiceIdMap;\n-\t}\n-\n \t@Override\n \tpublic I_C_Invoice getByOrderId(@NonNull final OrderId orderId)\n \t{\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ2ODM5Mg==", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r471468392", "bodyText": "i think the method is never used. can be removed or made private", "author": "metas-ts", "createdAt": "2020-08-17T13:12:35Z", "path": "backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/InvoiceDAO.java", "diffHunk": "@@ -53,6 +62,33 @@ public I_C_Invoice createInvoice(String trxName)\n \t\treturn InterfaceWrapperHelper.create(Env.getCtx(), I_C_Invoice.class, trxName);\n \t}\n \n+\t@Override\n+\tpublic Map<OrderId, InvoiceId> getInvoiceIdsForOrderIds(final List<OrderId> orderIds)\n+\t{\n+\t\tMap<OrderId, InvoiceId> orderIdInvoiceIdMap = new HashMap<OrderId, InvoiceId>();\n+\n+\t\tfor (OrderId orderId : orderIds)\n+\t\t{\n+\t\t\torderIdInvoiceIdMap.put(orderId, InvoiceId.ofRepoId(getByOrderId(orderId).getC_Order_ID()));\n+\t\t}\n+\t\treturn orderIdInvoiceIdMap;\n+\t}\n+\n+\t@Override\n+\tpublic I_C_Invoice getByOrderId(@NonNull final OrderId orderId)\n+\t{\n+\t\tfinal I_C_Invoice invoice = Services.get(IQueryBL.class)", "originalCommit": "333f32ead8aeda34f98ed2f0af0fdfe7cb891cf5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9c7fe55902eaa2aca9c5fdbadaddb0698eb0652", "chunk": "diff --git a/backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/InvoiceDAO.java b/backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/InvoiceDAO.java\nindex 5ef7c3b24e..b52468d067 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/InvoiceDAO.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/InvoiceDAO.java\n\n@@ -62,18 +57,6 @@ public class InvoiceDAO extends AbstractInvoiceDAO\n \t\treturn InterfaceWrapperHelper.create(Env.getCtx(), I_C_Invoice.class, trxName);\n \t}\n \n-\t@Override\n-\tpublic Map<OrderId, InvoiceId> getInvoiceIdsForOrderIds(final List<OrderId> orderIds)\n-\t{\n-\t\tMap<OrderId, InvoiceId> orderIdInvoiceIdMap = new HashMap<OrderId, InvoiceId>();\n-\n-\t\tfor (OrderId orderId : orderIds)\n-\t\t{\n-\t\t\torderIdInvoiceIdMap.put(orderId, InvoiceId.ofRepoId(getByOrderId(orderId).getC_Order_ID()));\n-\t\t}\n-\t\treturn orderIdInvoiceIdMap;\n-\t}\n-\n \t@Override\n \tpublic I_C_Invoice getByOrderId(@NonNull final OrderId orderId)\n \t{\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ2OTUzMw==", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r471469533", "bodyText": "move this method into AbstractInvoiceDAO. Is has no hardcoded SQL-stuff, so we don't need a dedicated PlainInvoiceDAO.java implementation", "author": "metas-ts", "createdAt": "2020-08-17T13:14:30Z", "path": "backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/InvoiceDAO.java", "diffHunk": "@@ -53,6 +62,33 @@ public I_C_Invoice createInvoice(String trxName)\n \t\treturn InterfaceWrapperHelper.create(Env.getCtx(), I_C_Invoice.class, trxName);\n \t}\n \n+\t@Override\n+\tpublic Map<OrderId, InvoiceId> getInvoiceIdsForOrderIds(final List<OrderId> orderIds)", "originalCommit": "333f32ead8aeda34f98ed2f0af0fdfe7cb891cf5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9c7fe55902eaa2aca9c5fdbadaddb0698eb0652", "chunk": "diff --git a/backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/InvoiceDAO.java b/backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/InvoiceDAO.java\nindex 5ef7c3b24e..b52468d067 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/InvoiceDAO.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/InvoiceDAO.java\n\n@@ -62,18 +57,6 @@ public class InvoiceDAO extends AbstractInvoiceDAO\n \t\treturn InterfaceWrapperHelper.create(Env.getCtx(), I_C_Invoice.class, trxName);\n \t}\n \n-\t@Override\n-\tpublic Map<OrderId, InvoiceId> getInvoiceIdsForOrderIds(final List<OrderId> orderIds)\n-\t{\n-\t\tMap<OrderId, InvoiceId> orderIdInvoiceIdMap = new HashMap<OrderId, InvoiceId>();\n-\n-\t\tfor (OrderId orderId : orderIds)\n-\t\t{\n-\t\t\torderIdInvoiceIdMap.put(orderId, InvoiceId.ofRepoId(getByOrderId(orderId).getC_Order_ID()));\n-\t\t}\n-\t\treturn orderIdInvoiceIdMap;\n-\t}\n-\n \t@Override\n \tpublic I_C_Invoice getByOrderId(@NonNull final OrderId orderId)\n \t{\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ3MDEyNA==", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r471470124", "bodyText": "the same comments as in IInvoiceDAO", "author": "metas-ts", "createdAt": "2020-08-17T13:15:28Z", "path": "backend/de.metas.business/src/main/java/de/metas/order/impl/AbstractOrderDAO.java", "diffHunk": "@@ -73,6 +77,34 @@ public I_C_Order getById(@NonNull final OrderId orderId)\n \t\treturn order;\n \t}\n \n+\t@Override\n+\tpublic I_C_Order getByExternalId(@NonNull final ExternalId externalId)\n+\t{", "originalCommit": "333f32ead8aeda34f98ed2f0af0fdfe7cb891cf5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIxOTE0Mg==", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r476219142", "bodyText": "made it private", "author": "dragospodariu96", "createdAt": "2020-08-25T06:57:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ3MDEyNA=="}], "type": "inlineReview", "revised_code": {"commit": "a9c7fe55902eaa2aca9c5fdbadaddb0698eb0652", "chunk": "diff --git a/backend/de.metas.business/src/main/java/de/metas/order/impl/AbstractOrderDAO.java b/backend/de.metas.business/src/main/java/de/metas/order/impl/AbstractOrderDAO.java\nindex cbce777f92..e26c5fb6bc 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/order/impl/AbstractOrderDAO.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/order/impl/AbstractOrderDAO.java\n\n@@ -77,18 +75,16 @@ public abstract class AbstractOrderDAO implements IOrderDAO\n \t\treturn order;\n \t}\n \n+\t@Nullable\n \t@Override\n-\tpublic I_C_Order getByExternalId(@NonNull final ExternalId externalId)\n+\tpublic I_C_Order getByExternalId(@Nullable final ExternalId externalId)\n \t{\n-\t\tfinal I_C_Order order = Services.get(IQueryBL.class)\n+\t\tfinal I_C_Order order = queryBL\n \t\t\t\t.createQueryBuilder(I_C_Order.class)\n \t\t\t\t.addEqualsFilter(I_C_Order.COLUMNNAME_ExternalId, externalId.getValue())\n \t\t\t\t.create()\n-\t\t\t\t.firstOnlyOrNull(I_C_Order.class);\n-\t\tif (order == null)\n-\t\t{\n-\t\t\tthrow new AdempiereException(\"@NotFound@: \" + externalId.getValue());\n-\t\t}\n+\t\t\t\t.first();\n+\n \t\treturn order;\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ3MDQ0MA==", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r471470440", "bodyText": "why this method in OrderBL?", "author": "metas-ts", "createdAt": "2020-08-17T13:16:02Z", "path": "backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java", "diffHunk": "@@ -113,6 +114,12 @@ public I_C_Order getById(@NonNull final OrderId orderId)\n \t\treturn Services.get(IOrderDAO.class).getById(orderId);\n \t}\n \n+\t@Override", "originalCommit": "333f32ead8aeda34f98ed2f0af0fdfe7cb891cf5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIyMDIyNg==", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r476220226", "bodyText": "not used, removed method", "author": "dragospodariu96", "createdAt": "2020-08-25T07:00:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ3MDQ0MA=="}], "type": "inlineReview", "revised_code": {"commit": "6b94c8291f60ac3256cf55c0930eadc5a28cab25", "chunk": "diff --git a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\nindex 42f6200e75..b215549169 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n\n@@ -114,12 +114,6 @@ public class OrderBL implements IOrderBL\n \t\treturn Services.get(IOrderDAO.class).getById(orderId);\n \t}\n \n-\t@Override\n-\tpublic I_C_Order getByExternalId(@NonNull final ExternalId externalId)\n-\t{\n-\t\treturn Services.get(IOrderDAO.class).getByExternalId(externalId);\n-\t}\n-\n \t@Override\n \tpublic void setM_PricingSystem_ID(final I_C_Order order, final boolean overridePricingSystemAndDontThrowExIfNotFound)\n \t{\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ3Nzk4MQ==", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r471477981", "bodyText": "this method and it's invocation in de.metas.banking.process.C_Payment_UpdateOrderAndInvoiceId#doIt is unneccesary complex.\nAlso:\n\nif it starts with is it should return a boolean\ndon't return a String constant, but (if this method is not removed), an enum", "author": "metas-ts", "createdAt": "2020-08-17T13:27:59Z", "path": "backend/de.metas.business/src/main/java/de/metas/payment/api/impl/PaymentBL.java", "diffHunk": "@@ -419,6 +429,66 @@ public boolean isMatchInvoice(final I_C_Payment payment, final I_C_Invoice invoi\n \t\treturn false;\n \t}\n \n+\t@Override\n+\tpublic String isPaypalOrCreditCardPayment(final I_C_Payment payment, final int paypalDataSourceId, final int creditCardDataSourceId)", "originalCommit": "333f32ead8aeda34f98ed2f0af0fdfe7cb891cf5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9c7fe55902eaa2aca9c5fdbadaddb0698eb0652", "chunk": "diff --git a/backend/de.metas.business/src/main/java/de/metas/payment/api/impl/PaymentBL.java b/backend/de.metas.business/src/main/java/de/metas/payment/api/impl/PaymentBL.java\nindex a9106afaa1..f1e86003ca 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/payment/api/impl/PaymentBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/payment/api/impl/PaymentBL.java\n\n@@ -433,7 +429,18 @@ public class PaymentBL implements IPaymentBL\n \tpublic String isPaypalOrCreditCardPayment(final I_C_Payment payment, final int paypalDataSourceId, final int creditCardDataSourceId)\n \t{\n \n+\t\tif (payment.getExternalOrderId() == null)\n+\t\t{\n+\t\t\treturn \"\";\n+\t\t}\n+\n \t\tfinal I_C_Order order = orderBL.getByExternalId(ExternalId.of(payment.getExternalOrderId()));\n+\n+\t\tif (order == null)\n+\t\t{\n+\t\t\treturn \"\";\n+\t\t}\n+\n \t\tif (order.getAD_InputDataSource_ID() == paypalDataSourceId)\n \t\t{\n \t\t\treturn \"L\";\n"}}, {"oid": "a9c7fe55902eaa2aca9c5fdbadaddb0698eb0652", "url": "https://github.com/metasfresh/metasfresh/commit/a9c7fe55902eaa2aca9c5fdbadaddb0698eb0652", "message": "#7109 - WIP - process now sets the c_order_id and  c_invoice_id for selected payments, if they are available.\n\nJust Need to add call to the payment allocation process after setting invoice and order ids.", "committedDate": "2020-08-23T20:15:12Z", "type": "commit"}, {"oid": "a59155f71444838f26cceaf309474921176a1fa6", "url": "https://github.com/metasfresh/metasfresh/commit/a59155f71444838f26cceaf309474921176a1fa6", "message": "#7109 - Function name refractoring.", "committedDate": "2020-08-23T20:23:36Z", "type": "commit"}, {"oid": "ee040d87d1461e870486db1d51d7ab04c7d79a47", "url": "https://github.com/metasfresh/metasfresh/commit/ee040d87d1461e870486db1d51d7ab04c7d79a47", "message": "#7109 - Also setting payment rule column.", "committedDate": "2020-08-23T21:27:21Z", "type": "commit"}, {"oid": "9f0e8c4d6d8cbe0d3347376c21b1dede63cb98d9", "url": "https://github.com/metasfresh/metasfresh/commit/9f0e8c4d6d8cbe0d3347376c21b1dede63cb98d9", "message": "#7109 - Also displaying newly added payment rule column.", "committedDate": "2020-08-23T21:43:26Z", "type": "commit"}, {"oid": "a5520a32c4228018a56eecc0a9e4f7a307ff8134", "url": "https://github.com/metasfresh/metasfresh/commit/a5520a32c4228018a56eecc0a9e4f7a307ff8134", "message": "Merge remote-tracking branch 'origin/blonde_monkey_uat' into gh7109", "committedDate": "2020-08-24T21:34:22Z", "type": "commit"}, {"oid": "6b94c8291f60ac3256cf55c0930eadc5a28cab25", "url": "https://github.com/metasfresh/metasfresh/commit/6b94c8291f60ac3256cf55c0930eadc5a28cab25", "message": "#7109 - Refractored code", "committedDate": "2020-08-25T10:15:54Z", "type": "commit"}, {"oid": "49d899762e25ef1393bc73019b29f2c48fba8143", "url": "https://github.com/metasfresh/metasfresh/commit/49d899762e25ef1393bc73019b29f2c48fba8143", "message": "#7109 - Avoiding NPE", "committedDate": "2020-08-25T10:34:52Z", "type": "commit"}, {"oid": "7f9150bceb91da663e6509fff69ffd2e89eeeb08", "url": "https://github.com/metasfresh/metasfresh/commit/7f9150bceb91da663e6509fff69ffd2e89eeeb08", "message": "#7109 - Added payment interceptor to make allocations.", "committedDate": "2020-08-25T12:25:53Z", "type": "commit"}, {"oid": "4ed0541af2342d5a9806b3307d7d2173b75d5be2", "url": "https://github.com/metasfresh/metasfresh/commit/4ed0541af2342d5a9806b3307d7d2173b75d5be2", "message": "#7109 - Reverted Input Data Source Modifications since we no longer need them.", "committedDate": "2020-08-25T12:40:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA1ODcyNA==", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r477058724", "bodyText": "this import is probably not needed..", "author": "metas-ts", "createdAt": "2020-08-26T06:17:24Z", "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/payment/PaymentRule.java", "diffHunk": "@@ -5,6 +5,7 @@\n \n import javax.annotation.Nullable;\n \n+import com.google.common.collect.ImmutableSet;", "originalCommit": "4ed0541af2342d5a9806b3307d7d2173b75d5be2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fcfd5892fd229c9314336893a0b290a9102b3a96", "chunk": "diff --git a/backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/payment/PaymentRule.java b/backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/payment/PaymentRule.java\nindex 68e0257d2b..b92502c74b 100644\n--- a/backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/payment/PaymentRule.java\n+++ b/backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/payment/PaymentRule.java\n\n@@ -1,20 +1,16 @@\n package de.metas.payment;\n \n-import java.util.Arrays;\n-import java.util.Optional;\n-\n-import javax.annotation.Nullable;\n-\n-import com.google.common.collect.ImmutableSet;\n-import org.adempiere.exceptions.AdempiereException;\n-import org.compiere.model.X_C_Order;\n-\n import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.Maps;\n-\n import de.metas.util.lang.ReferenceListAwareEnum;\n import lombok.Getter;\n import lombok.NonNull;\n+import org.adempiere.exceptions.AdempiereException;\n+import org.compiere.model.X_C_Order;\n+\n+import javax.annotation.Nullable;\n+import java.util.Arrays;\n+import java.util.Optional;\n \n /*\n  * #%L\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA3ODU0Ng==", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r477078546", "bodyText": "here i think you also need to filter for document status; see de.metas.document.engine.DocStatus#isCompleted", "author": "metas-ts", "createdAt": "2020-08-26T07:03:22Z", "path": "backend/de.metas.banking/de.metas.banking.base/src/main/java/de/metas/banking/process/C_Payment_UpdateOrderAndInvoiceId.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * #%L\n+ * de.metas.banking.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.banking.process;\n+\n+import com.google.common.collect.ImmutableSet;\n+import de.metas.impex.InputDataSourceId;\n+import de.metas.impex.api.IInputDataSourceDAO;\n+import de.metas.invoice.InvoiceId;\n+import de.metas.invoice.service.IInvoiceDAO;\n+import de.metas.order.IOrderBL;\n+import de.metas.order.IOrderDAO;\n+import de.metas.order.OrderId;\n+import de.metas.payment.PaymentRule;\n+import de.metas.payment.api.IPaymentBL;\n+import de.metas.process.IProcessPrecondition;\n+import de.metas.process.IProcessPreconditionsContext;\n+import de.metas.process.JavaProcess;\n+import de.metas.process.Param;\n+import de.metas.process.ProcessInfo;\n+import de.metas.process.ProcessPreconditionsResolution;\n+import de.metas.util.Services;\n+import de.metas.util.lang.ExternalId;\n+import lombok.NonNull;\n+import org.apache.commons.lang3.EnumUtils;\n+import org.compiere.model.I_C_Payment;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static de.metas.payment.PaymentRule.CreditCard;\n+import static de.metas.payment.PaymentRule.PayPal;\n+\n+public class C_Payment_UpdateOrderAndInvoiceId extends JavaProcess implements IProcessPrecondition\n+{\n+\n+\tprivate final IPaymentBL paymentBL = Services.get(IPaymentBL.class);\n+\tprivate final IOrderDAO orderDAO = Services.get(IOrderDAO.class);\n+\tprivate final IInvoiceDAO invoiceDAO = Services.get(IInvoiceDAO.class);\n+\tprivate final IInputDataSourceDAO inputDataSourceDAO = Services.get(IInputDataSourceDAO.class);\n+\n+\t@Override\n+\tpublic ProcessPreconditionsResolution checkPreconditionsApplicable(@NonNull final IProcessPreconditionsContext context)\n+\t{\n+\t\tif (context.isNoSelection())\n+\t\t{\n+\t\t\treturn ProcessPreconditionsResolution.rejectWithInternalReason(\"No Selection\");\n+\t\t}\n+\n+\t\treturn ProcessPreconditionsResolution.accept();\n+\t}\n+\n+\t@Override\n+\tprotected String doIt() throws Exception\n+\t{\n+\t\tList<I_C_Payment> payments = getSelectedPayments();\n+\n+\t\tList<I_C_Payment> filteredPayments = payments\n+\t\t\t\t.stream()\n+\t\t\t\t.filter(p -> !p.isAllocated())", "originalCommit": "4ed0541af2342d5a9806b3307d7d2173b75d5be2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fcfd5892fd229c9314336893a0b290a9102b3a96", "chunk": "diff --git a/backend/de.metas.banking/de.metas.banking.base/src/main/java/de/metas/banking/process/C_Payment_UpdateOrderAndInvoiceId.java b/backend/de.metas.banking/de.metas.banking.base/src/main/java/de/metas/banking/process/C_Payment_UpdateOrderAndInvoiceId.java\nindex aac6769c8e..8f550281cb 100644\n--- a/backend/de.metas.banking/de.metas.banking.base/src/main/java/de/metas/banking/process/C_Payment_UpdateOrderAndInvoiceId.java\n+++ b/backend/de.metas.banking/de.metas.banking.base/src/main/java/de/metas/banking/process/C_Payment_UpdateOrderAndInvoiceId.java\n\n@@ -22,42 +22,23 @@\n \n package de.metas.banking.process;\n \n-import com.google.common.collect.ImmutableSet;\n-import de.metas.impex.InputDataSourceId;\n-import de.metas.impex.api.IInputDataSourceDAO;\n-import de.metas.invoice.InvoiceId;\n-import de.metas.invoice.service.IInvoiceDAO;\n-import de.metas.order.IOrderBL;\n-import de.metas.order.IOrderDAO;\n-import de.metas.order.OrderId;\n-import de.metas.payment.PaymentRule;\n+import de.metas.document.engine.DocStatus;\n import de.metas.payment.api.IPaymentBL;\n import de.metas.process.IProcessPrecondition;\n import de.metas.process.IProcessPreconditionsContext;\n import de.metas.process.JavaProcess;\n-import de.metas.process.Param;\n-import de.metas.process.ProcessInfo;\n import de.metas.process.ProcessPreconditionsResolution;\n import de.metas.util.Services;\n-import de.metas.util.lang.ExternalId;\n import lombok.NonNull;\n-import org.apache.commons.lang3.EnumUtils;\n import org.compiere.model.I_C_Payment;\n \n import java.util.List;\n-import java.util.Map;\n import java.util.stream.Collectors;\n \n-import static de.metas.payment.PaymentRule.CreditCard;\n-import static de.metas.payment.PaymentRule.PayPal;\n-\n public class C_Payment_UpdateOrderAndInvoiceId extends JavaProcess implements IProcessPrecondition\n {\n \n \tprivate final IPaymentBL paymentBL = Services.get(IPaymentBL.class);\n-\tprivate final IOrderDAO orderDAO = Services.get(IOrderDAO.class);\n-\tprivate final IInvoiceDAO invoiceDAO = Services.get(IInvoiceDAO.class);\n-\tprivate final IInputDataSourceDAO inputDataSourceDAO = Services.get(IInputDataSourceDAO.class);\n \n \t@Override\n \tpublic ProcessPreconditionsResolution checkPreconditionsApplicable(@NonNull final IProcessPreconditionsContext context)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA4MDMxNw==", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r477080317", "bodyText": "avoid the n+1 problem by loading all I_C_Invoices at once. Consider using org.compiere.model.IQuery#listDistinct(java.lang.String...) or listIds", "author": "metas-ts", "createdAt": "2020-08-26T07:07:16Z", "path": "backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/AbstractInvoiceDAO.java", "diffHunk": "@@ -78,6 +79,23 @@ public void save(@NonNull final org.compiere.model.I_C_InvoiceLine invoiceLine)\n \t\tsaveRecord(invoiceLine);\n \t}\n \n+\t@Override\n+\tpublic Map<OrderId, InvoiceId> getInvoiceIdsForOrderIds(final List<OrderId> orderIds)\n+\t{\n+\t\tMap<OrderId, InvoiceId> orderIdInvoiceIdMap = new HashMap<OrderId, InvoiceId>();\n+\n+\t\tfor (OrderId orderId : orderIds)", "originalCommit": "4ed0541af2342d5a9806b3307d7d2173b75d5be2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fcfd5892fd229c9314336893a0b290a9102b3a96", "chunk": "diff --git a/backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/AbstractInvoiceDAO.java b/backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/AbstractInvoiceDAO.java\nindex 31825acaf4..e293bb22e8 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/AbstractInvoiceDAO.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/AbstractInvoiceDAO.java\n\n@@ -83,14 +83,12 @@ public abstract class AbstractInvoiceDAO implements IInvoiceDAO\n \tpublic Map<OrderId, InvoiceId> getInvoiceIdsForOrderIds(final List<OrderId> orderIds)\n \t{\n \t\tMap<OrderId, InvoiceId> orderIdInvoiceIdMap = new HashMap<OrderId, InvoiceId>();\n-\n-\t\tfor (OrderId orderId : orderIds)\n+\t\tfinal List<I_C_Invoice> invoices = getInvoicesForOrderIds(orderIds);\n+\t\tfor (final I_C_Invoice invoice : invoices)\n \t\t{\n-\t\t\tfinal I_C_Invoice invoice = getByOrderId(orderId);\n-\n-\t\t\tif (invoice != null)\n+\t\t\tif (invoice != null && invoice.getC_Order_ID() > 0)\n \t\t\t{\n-\t\t\t\torderIdInvoiceIdMap.put(orderId, InvoiceId.ofRepoId(invoice.getC_Invoice_ID()));\n+\t\t\t\torderIdInvoiceIdMap.put(OrderId.ofRepoId(invoice.getC_Order_ID()), InvoiceId.ofRepoId(invoice.getC_Invoice_ID()));\n \t\t\t}\n \t\t}\n \t\treturn orderIdInvoiceIdMap;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA4MTM5NQ==", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r477081395", "bodyText": "Avoid the n+1 problem; load all records..see that other \"n+1\" comment of this review", "author": "metas-ts", "createdAt": "2020-08-26T07:09:41Z", "path": "backend/de.metas.business/src/main/java/de/metas/order/impl/AbstractOrderDAO.java", "diffHunk": "@@ -73,6 +73,36 @@ public I_C_Order getById(@NonNull final OrderId orderId)\n \t\treturn order;\n \t}\n \n+\t@Nullable\n+\tprivate I_C_Order getByExternalId(@Nullable final ExternalId externalId)\n+\t{\n+\t\tfinal I_C_Order order = Services.get(IQueryBL.class)\n+\t\t\t\t.createQueryBuilder(I_C_Order.class)\n+\t\t\t\t.addEqualsFilter(I_C_Order.COLUMNNAME_ExternalId, externalId.getValue())\n+\t\t\t\t.create()\n+\t\t\t\t.first();\n+\n+\t\treturn order;\n+\t}\n+\n+\t@Override\n+\tpublic Map<ExternalId, OrderId> getOrderIdsForExternalIds(final List<ExternalId> externalIds)\n+\t{\n+\t\tMap<ExternalId, OrderId> externalIdOrderIdMap = new HashMap<ExternalId, OrderId>();\n+\n+\t\tfor (final ExternalId externalId : externalIds)", "originalCommit": "4ed0541af2342d5a9806b3307d7d2173b75d5be2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fcfd5892fd229c9314336893a0b290a9102b3a96", "chunk": "diff --git a/backend/de.metas.business/src/main/java/de/metas/order/impl/AbstractOrderDAO.java b/backend/de.metas.business/src/main/java/de/metas/order/impl/AbstractOrderDAO.java\nindex afb3bbe72f..779f1b1747 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/order/impl/AbstractOrderDAO.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/order/impl/AbstractOrderDAO.java\n\n@@ -85,20 +86,28 @@ public abstract class AbstractOrderDAO implements IOrderDAO\n \t\treturn order;\n \t}\n \n+\tprivate List<I_C_Order> getOrdersByExternalIds(@NonNull List<ExternalId> externalIds)\n+\t{\n+\t\tList<String> externalIdsAsStrings = externalIds.stream().map(ExternalId::getValue).collect(Collectors.toList());\n+\n+\t\treturn Services.get(IQueryBL.class)\n+\t\t\t\t.createQueryBuilder(I_C_Order.class)\n+\t\t\t\t.addInArrayFilter(I_C_Order.COLUMNNAME_ExternalId, externalIdsAsStrings)\n+\t\t\t\t.create()\n+\t\t\t\t.list();\n+\t}\n+\n \t@Override\n \tpublic Map<ExternalId, OrderId> getOrderIdsForExternalIds(final List<ExternalId> externalIds)\n \t{\n \t\tMap<ExternalId, OrderId> externalIdOrderIdMap = new HashMap<ExternalId, OrderId>();\n-\n-\t\tfor (final ExternalId externalId : externalIds)\n+\t\tfinal List<I_C_Order> ordersWithExternalIds = getOrdersByExternalIds(externalIds);\n+\t\tfor (final I_C_Order order : ordersWithExternalIds)\n \t\t{\n-\t\t\tfinal I_C_Order order = getByExternalId(externalId);\n-\n-\t\t\tif (order != null)\n+\t\t\tif (order != null && order.getExternalId() != null)\n \t\t\t{\n-\t\t\t\texternalIdOrderIdMap.put(externalId, OrderId.ofRepoId(order.getC_Order_ID()));\n+\t\t\t\texternalIdOrderIdMap.put(ExternalId.of(order.getExternalId()), OrderId.ofRepoId(order.getC_Order_ID()));\n \t\t\t}\n-\n \t\t}\n \t\treturn externalIdOrderIdMap;\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA4NDQzNg==", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r477084436", "bodyText": "I understand that this is aiming at completed payments that get their respective invoice from your process.\nSo here as well (if i understand it right), you need to check if the payment is even completed.\nPS: that check is done in autoAllocateSpecificPayment still i would like the check also in here, to avoid FUD about this method", "author": "metas-ts", "createdAt": "2020-08-26T07:16:01Z", "path": "backend/de.metas.business/src/main/java/de/metas/payment/interceptor/C_Payment.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * #%L\n+ * de.metas.business\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.payment.interceptor;\n+\n+import de.metas.adempiere.model.I_C_Invoice;\n+import de.metas.allocation.api.IAllocationBL;\n+import de.metas.document.DocTypeId;\n+import de.metas.document.IDocTypeBL;\n+import de.metas.invoice.service.IInvoiceDAO;\n+import de.metas.order.IOrderDAO;\n+import de.metas.order.OrderId;\n+import de.metas.payment.PaymentId;\n+import de.metas.payment.api.IPaymentDAO;\n+import de.metas.util.Services;\n+import org.adempiere.ad.modelvalidator.annotations.Interceptor;\n+import org.adempiere.ad.modelvalidator.annotations.ModelChange;\n+import org.compiere.model.I_C_Order;\n+import org.compiere.model.I_C_Payment;\n+import org.compiere.model.ModelValidator;\n+import org.springframework.stereotype.Component;\n+\n+@Interceptor(I_C_Payment.class)\n+@Component\n+public class C_Payment\n+{\n+\tpublic static final C_Payment INSTANCE = new C_Payment();\n+\n+\tprivate final IDocTypeBL docTypeBL = Services.get(IDocTypeBL.class);\n+\tprivate final IPaymentDAO paymentDAO = Services.get(IPaymentDAO.class);\n+\tprivate final IAllocationBL allocationBL = Services.get(IAllocationBL.class);\n+\tprivate final IInvoiceDAO invoiceDAO = Services.get(IInvoiceDAO.class);\n+\tprivate final IOrderDAO orderDAO = Services.get(IOrderDAO.class);\n+\n+\tboolean canAllocateOrderPaymentToInvoice(final I_C_Order order)\n+\t{\n+\t\tif (order == null)\n+\t\t{\n+\t\t\treturn false;\n+\t\t}\n+\t\tif (order.getC_Payment_ID() <= 0)\n+\t\t{\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tfinal boolean isPrepayOrder = docTypeBL.isPrepay(DocTypeId.ofRepoId(order.getC_DocType_ID()));\n+\t\tif (isPrepayOrder)\n+\t\t{\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\tfinal I_C_Payment payment = paymentDAO.getById(PaymentId.ofRepoId(order.getC_Payment_ID()));\n+\t\treturn payment.getC_Order_ID() == order.getC_Order_ID();\n+\t}\n+\n+\t@ModelChange(timings = { ModelValidator.TYPE_AFTER_CHANGE }, ifColumnsChanged = { I_C_Payment.COLUMNNAME_C_Invoice_ID })\n+\tpublic void allocateInvoiceAgainstPaymentIfNecessary(final I_C_Payment payment)\n+\t{\n+\t\tfinal I_C_Invoice invoice;\n+\t\tfinal I_C_Order order;\n+\t\tif (payment.getC_Order_ID() > 0)\n+\t\t{\n+\t\t\torder = orderDAO.getById(OrderId.ofRepoId(payment.getC_Order_ID()));", "originalCommit": "4ed0541af2342d5a9806b3307d7d2173b75d5be2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fcfd5892fd229c9314336893a0b290a9102b3a96", "chunk": "diff --git a/backend/de.metas.business/src/main/java/de/metas/payment/interceptor/C_Payment.java b/backend/de.metas.business/src/main/java/de/metas/payment/interceptor/C_Payment.java\ndeleted file mode 100644\nindex a1e1f411e8..0000000000\n--- a/backend/de.metas.business/src/main/java/de/metas/payment/interceptor/C_Payment.java\n+++ /dev/null\n\n@@ -1,94 +0,0 @@\n-/*\n- * #%L\n- * de.metas.business\n- * %%\n- * Copyright (C) 2020 metas GmbH\n- * %%\n- * This program is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU General Public License as\n- * published by the Free Software Foundation, either version 2 of the\n- * License, or (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n- * GNU General Public License for more details.\n- *\n- * You should have received a copy of the GNU General Public\n- * License along with this program. If not, see\n- * <http://www.gnu.org/licenses/gpl-2.0.html>.\n- * #L%\n- */\n-\n-package de.metas.payment.interceptor;\n-\n-import de.metas.adempiere.model.I_C_Invoice;\n-import de.metas.allocation.api.IAllocationBL;\n-import de.metas.document.DocTypeId;\n-import de.metas.document.IDocTypeBL;\n-import de.metas.invoice.service.IInvoiceDAO;\n-import de.metas.order.IOrderDAO;\n-import de.metas.order.OrderId;\n-import de.metas.payment.PaymentId;\n-import de.metas.payment.api.IPaymentDAO;\n-import de.metas.util.Services;\n-import org.adempiere.ad.modelvalidator.annotations.Interceptor;\n-import org.adempiere.ad.modelvalidator.annotations.ModelChange;\n-import org.compiere.model.I_C_Order;\n-import org.compiere.model.I_C_Payment;\n-import org.compiere.model.ModelValidator;\n-import org.springframework.stereotype.Component;\n-\n-@Interceptor(I_C_Payment.class)\n-@Component\n-public class C_Payment\n-{\n-\tpublic static final C_Payment INSTANCE = new C_Payment();\n-\n-\tprivate final IDocTypeBL docTypeBL = Services.get(IDocTypeBL.class);\n-\tprivate final IPaymentDAO paymentDAO = Services.get(IPaymentDAO.class);\n-\tprivate final IAllocationBL allocationBL = Services.get(IAllocationBL.class);\n-\tprivate final IInvoiceDAO invoiceDAO = Services.get(IInvoiceDAO.class);\n-\tprivate final IOrderDAO orderDAO = Services.get(IOrderDAO.class);\n-\n-\tboolean canAllocateOrderPaymentToInvoice(final I_C_Order order)\n-\t{\n-\t\tif (order == null)\n-\t\t{\n-\t\t\treturn false;\n-\t\t}\n-\t\tif (order.getC_Payment_ID() <= 0)\n-\t\t{\n-\t\t\treturn false;\n-\t\t}\n-\n-\t\tfinal boolean isPrepayOrder = docTypeBL.isPrepay(DocTypeId.ofRepoId(order.getC_DocType_ID()));\n-\t\tif (isPrepayOrder)\n-\t\t{\n-\t\t\treturn true;\n-\t\t}\n-\n-\t\tfinal I_C_Payment payment = paymentDAO.getById(PaymentId.ofRepoId(order.getC_Payment_ID()));\n-\t\treturn payment.getC_Order_ID() == order.getC_Order_ID();\n-\t}\n-\n-\t@ModelChange(timings = { ModelValidator.TYPE_AFTER_CHANGE }, ifColumnsChanged = { I_C_Payment.COLUMNNAME_C_Invoice_ID })\n-\tpublic void allocateInvoiceAgainstPaymentIfNecessary(final I_C_Payment payment)\n-\t{\n-\t\tfinal I_C_Invoice invoice;\n-\t\tfinal I_C_Order order;\n-\t\tif (payment.getC_Order_ID() > 0)\n-\t\t{\n-\t\t\torder = orderDAO.getById(OrderId.ofRepoId(payment.getC_Order_ID()));\n-\t\t\tinvoice = invoiceDAO.getByOrderId(OrderId.ofRepoId(payment.getC_Order_ID()));\n-\n-\t\t\tif (canAllocateOrderPaymentToInvoice(order))\n-\t\t\t{\n-\t\t\t\tif (invoice != null)\n-\t\t\t\t{\n-\t\t\t\t\tallocationBL.autoAllocateSpecificPayment(invoice, payment, true);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA4NTYzMg==", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r477085632", "bodyText": "This method and also allocateInvoiceAgainstPaymentIfNecessary seems to me very similar to the one i recently saw in a PR from @TheBestPessimist (AFAIR).\nDo we have two versions of it now? If yes, please make sure to consolidate it.", "author": "metas-ts", "createdAt": "2020-08-26T07:18:34Z", "path": "backend/de.metas.business/src/main/java/de/metas/payment/interceptor/C_Payment.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * #%L\n+ * de.metas.business\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.payment.interceptor;\n+\n+import de.metas.adempiere.model.I_C_Invoice;\n+import de.metas.allocation.api.IAllocationBL;\n+import de.metas.document.DocTypeId;\n+import de.metas.document.IDocTypeBL;\n+import de.metas.invoice.service.IInvoiceDAO;\n+import de.metas.order.IOrderDAO;\n+import de.metas.order.OrderId;\n+import de.metas.payment.PaymentId;\n+import de.metas.payment.api.IPaymentDAO;\n+import de.metas.util.Services;\n+import org.adempiere.ad.modelvalidator.annotations.Interceptor;\n+import org.adempiere.ad.modelvalidator.annotations.ModelChange;\n+import org.compiere.model.I_C_Order;\n+import org.compiere.model.I_C_Payment;\n+import org.compiere.model.ModelValidator;\n+import org.springframework.stereotype.Component;\n+\n+@Interceptor(I_C_Payment.class)\n+@Component\n+public class C_Payment\n+{\n+\tpublic static final C_Payment INSTANCE = new C_Payment();\n+\n+\tprivate final IDocTypeBL docTypeBL = Services.get(IDocTypeBL.class);\n+\tprivate final IPaymentDAO paymentDAO = Services.get(IPaymentDAO.class);\n+\tprivate final IAllocationBL allocationBL = Services.get(IAllocationBL.class);\n+\tprivate final IInvoiceDAO invoiceDAO = Services.get(IInvoiceDAO.class);\n+\tprivate final IOrderDAO orderDAO = Services.get(IOrderDAO.class);\n+\n+\tboolean canAllocateOrderPaymentToInvoice(final I_C_Order order)", "originalCommit": "4ed0541af2342d5a9806b3307d7d2173b75d5be2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fcfd5892fd229c9314336893a0b290a9102b3a96", "chunk": "diff --git a/backend/de.metas.business/src/main/java/de/metas/payment/interceptor/C_Payment.java b/backend/de.metas.business/src/main/java/de/metas/payment/interceptor/C_Payment.java\ndeleted file mode 100644\nindex a1e1f411e8..0000000000\n--- a/backend/de.metas.business/src/main/java/de/metas/payment/interceptor/C_Payment.java\n+++ /dev/null\n\n@@ -1,94 +0,0 @@\n-/*\n- * #%L\n- * de.metas.business\n- * %%\n- * Copyright (C) 2020 metas GmbH\n- * %%\n- * This program is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU General Public License as\n- * published by the Free Software Foundation, either version 2 of the\n- * License, or (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n- * GNU General Public License for more details.\n- *\n- * You should have received a copy of the GNU General Public\n- * License along with this program. If not, see\n- * <http://www.gnu.org/licenses/gpl-2.0.html>.\n- * #L%\n- */\n-\n-package de.metas.payment.interceptor;\n-\n-import de.metas.adempiere.model.I_C_Invoice;\n-import de.metas.allocation.api.IAllocationBL;\n-import de.metas.document.DocTypeId;\n-import de.metas.document.IDocTypeBL;\n-import de.metas.invoice.service.IInvoiceDAO;\n-import de.metas.order.IOrderDAO;\n-import de.metas.order.OrderId;\n-import de.metas.payment.PaymentId;\n-import de.metas.payment.api.IPaymentDAO;\n-import de.metas.util.Services;\n-import org.adempiere.ad.modelvalidator.annotations.Interceptor;\n-import org.adempiere.ad.modelvalidator.annotations.ModelChange;\n-import org.compiere.model.I_C_Order;\n-import org.compiere.model.I_C_Payment;\n-import org.compiere.model.ModelValidator;\n-import org.springframework.stereotype.Component;\n-\n-@Interceptor(I_C_Payment.class)\n-@Component\n-public class C_Payment\n-{\n-\tpublic static final C_Payment INSTANCE = new C_Payment();\n-\n-\tprivate final IDocTypeBL docTypeBL = Services.get(IDocTypeBL.class);\n-\tprivate final IPaymentDAO paymentDAO = Services.get(IPaymentDAO.class);\n-\tprivate final IAllocationBL allocationBL = Services.get(IAllocationBL.class);\n-\tprivate final IInvoiceDAO invoiceDAO = Services.get(IInvoiceDAO.class);\n-\tprivate final IOrderDAO orderDAO = Services.get(IOrderDAO.class);\n-\n-\tboolean canAllocateOrderPaymentToInvoice(final I_C_Order order)\n-\t{\n-\t\tif (order == null)\n-\t\t{\n-\t\t\treturn false;\n-\t\t}\n-\t\tif (order.getC_Payment_ID() <= 0)\n-\t\t{\n-\t\t\treturn false;\n-\t\t}\n-\n-\t\tfinal boolean isPrepayOrder = docTypeBL.isPrepay(DocTypeId.ofRepoId(order.getC_DocType_ID()));\n-\t\tif (isPrepayOrder)\n-\t\t{\n-\t\t\treturn true;\n-\t\t}\n-\n-\t\tfinal I_C_Payment payment = paymentDAO.getById(PaymentId.ofRepoId(order.getC_Payment_ID()));\n-\t\treturn payment.getC_Order_ID() == order.getC_Order_ID();\n-\t}\n-\n-\t@ModelChange(timings = { ModelValidator.TYPE_AFTER_CHANGE }, ifColumnsChanged = { I_C_Payment.COLUMNNAME_C_Invoice_ID })\n-\tpublic void allocateInvoiceAgainstPaymentIfNecessary(final I_C_Payment payment)\n-\t{\n-\t\tfinal I_C_Invoice invoice;\n-\t\tfinal I_C_Order order;\n-\t\tif (payment.getC_Order_ID() > 0)\n-\t\t{\n-\t\t\torder = orderDAO.getById(OrderId.ofRepoId(payment.getC_Order_ID()));\n-\t\t\tinvoice = invoiceDAO.getByOrderId(OrderId.ofRepoId(payment.getC_Order_ID()));\n-\n-\t\t\tif (canAllocateOrderPaymentToInvoice(order))\n-\t\t\t{\n-\t\t\t\tif (invoice != null)\n-\t\t\t\t{\n-\t\t\t\t\tallocationBL.autoAllocateSpecificPayment(invoice, payment, true);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA5MDcxMQ==", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r477090711", "bodyText": "Avoid passing I_C_Payments. Suggestion: instead of driving the BL from the JavaProcess and, hava just one public method and call that from the process", "author": "metas-ts", "createdAt": "2020-08-26T07:28:02Z", "path": "backend/de.metas.business/src/main/java/de/metas/payment/api/IPaymentBL.java", "diffHunk": "@@ -97,6 +101,14 @@\n \t */\n \tboolean isMatchInvoice(I_C_Payment payment, I_C_Invoice invoice);\n \n+\tList<ExternalId> getExternalIdsList(List<I_C_Payment> payments);", "originalCommit": "4ed0541af2342d5a9806b3307d7d2173b75d5be2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fcfd5892fd229c9314336893a0b290a9102b3a96", "chunk": "diff --git a/backend/de.metas.business/src/main/java/de/metas/payment/api/IPaymentBL.java b/backend/de.metas.business/src/main/java/de/metas/payment/api/IPaymentBL.java\nindex 6a50e91d82..5c3cf2cd85 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/payment/api/IPaymentBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/payment/api/IPaymentBL.java\n\n@@ -101,13 +97,9 @@ public interface IPaymentBL extends ISingletonService\n \t */\n \tboolean isMatchInvoice(I_C_Payment payment, I_C_Invoice invoice);\n \n-\tList<ExternalId> getExternalIdsList(List<I_C_Payment> payments);\n-\n-\tList<OrderId> getOrderIdsList(List<I_C_Payment> payments);\n-\n-\tvoid setPaymentOrderIds(List<I_C_Payment> payments, Map<ExternalId, OrderId> ids);\n+\tvoid setPaymentOrderAndInvoiceIdsAndAllocateItIfNecessary(List<I_C_Payment> payments);\n \n-\tvoid setPaymentInvoiceIds(List<I_C_Payment> payments, Map<OrderId, InvoiceId> ids);\n+\tboolean canAllocateOrderPaymentToInvoice(I_C_Order order);\n \n \t/**\n \t * Test Allocation (and set allocated flag)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA5MjEwNw==", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r477092107", "bodyText": "is seems as if you accidentally fromatted this file; in that case, please revert that; Also, please make sure that intellij horons the // @formatter:off, or if that comment is maybe wrong..", "author": "metas-ts", "createdAt": "2020-08-26T07:30:38Z", "path": "backend/de.metas.business/src/main/java/de/metas/order/model/I_C_Order.java", "diffHunk": "@@ -33,42 +32,66 @@\n \tvoid setAD_InputDataSource_ID(int AD_InputDataSource_ID);\n \n \tString COLUMNNAME_InvoiceStatus = \"InvoiceStatus\";\n+", "originalCommit": "4ed0541af2342d5a9806b3307d7d2173b75d5be2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0353008a2e047f7e836312b980550a7ffcdc5a9f", "chunk": "diff --git a/backend/de.metas.business/src/main/java/de/metas/order/model/I_C_Order.java b/backend/de.metas.business/src/main/java/de/metas/order/model/I_C_Order.java\nindex 76a1abf8af..cc1bf0f0f9 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/order/model/I_C_Order.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/order/model/I_C_Order.java\n\n@@ -32,66 +33,42 @@ public interface I_C_Order extends de.metas.adempiere.model.I_C_Order\n \tvoid setAD_InputDataSource_ID(int AD_InputDataSource_ID);\n \n \tString COLUMNNAME_InvoiceStatus = \"InvoiceStatus\";\n-\n \tString getInvoiceStatus();\n-\n \tvoid setInvoiceStatus(String InvoiceStatus);\n \n-\t/**\n-\t * Completely Invoiced = CI\n-\t */\n+\t/** Completely Invoiced = CI */\n \tString INVOICESTATUS_CompletelyInvoiced = \"CI\";\n-\t/**\n-\t * Partly Invoiced = PI\n-\t */\n+\t/** Partly Invoiced = PI */\n \tString INVOICESTATUS_PartlyInvoiced = \"PI\";\n-\t/**\n-\t * Open = O\n-\t */\n+\t/** Open = O */\n \tString INVOICESTATUS_Open = \"O\";\n \n \tString COLUMNNAME_DeliveryStatus = \"DeliveryStatus\";\n-\n \tString getDeliveryStatus();\n-\n \tvoid setDeliveryStatus(String DeliveryStatus);\n \n-\t/**\n-\t * Completely Delivered = CD\n-\t */\n+\t/** Completely Delivered = CD */\n \tString DELIVERYSTATUS_CompletelyDelivered = \"CD\";\n-\t/**\n-\t * Partly Delivered = PD\n-\t */\n+\t/** Partly Delivered = PD */\n \tString DELIVERYSTATUS_PartlyDelivered = \"PD\";\n-\t/**\n-\t * Open = O\n-\t */\n+\t/** Open = O */\n \tString DELIVERYSTATUS_Open = \"O\";\n \n \tString COLUMNNAME_QtyInvoiced = \"QtyInvoiced\";\n-\n \tBigDecimal getQtyInvoiced();\n-\n \tvoid setQtyInvoiced(BigDecimal QtyInvoiced);\n \n \tString COLUMNNAME_QtyOrdered = \"QtyOrdered\";\n-\n \tBigDecimal getQtyOrdered();\n-\n \tvoid setQtyOrdered(BigDecimal QtyOrdered);\n \n \tString COLUMNNAME_QtyMoved = \"QtyMoved\";\n-\n \tBigDecimal getQtyMoved();\n-\n \tvoid setQtyMoved(BigDecimal QtyMoved);\n \n \t// #653\n \tString COLUMNNAME_LotNumberDate = \"LotNumberDate\";\n-\n-\tvoid setLotNumberDate(java.sql.Timestamp LotNumberDate);\n-\n+\tvoid setLotNumberDate (java.sql.Timestamp LotNumberDate);\n \tjava.sql.Timestamp getLotNumberDate();\n \n \t// @formatter:on\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA5Mjc1NQ==", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r477092755", "bodyText": "this import is not used", "author": "metas-ts", "createdAt": "2020-08-26T07:31:46Z", "path": "backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java", "diffHunk": "@@ -69,6 +69,7 @@\n import de.metas.util.Services;\n import de.metas.util.collections.CollectionUtils;\n import de.metas.common.util.CoalesceUtil;\n+import de.metas.util.lang.ExternalId;", "originalCommit": "4ed0541af2342d5a9806b3307d7d2173b75d5be2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fcfd5892fd229c9314336893a0b290a9102b3a96", "chunk": "diff --git a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\nindex b215549169..eef4e342e3 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n\n@@ -68,8 +69,6 @@ import de.metas.user.api.IUserDAO;\n import de.metas.util.Check;\n import de.metas.util.Services;\n import de.metas.util.collections.CollectionUtils;\n-import de.metas.common.util.CoalesceUtil;\n-import de.metas.util.lang.ExternalId;\n import lombok.NonNull;\n import org.adempiere.ad.dao.IQueryAggregateBuilder;\n import org.adempiere.ad.dao.IQueryBL;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEwNTc5NA==", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r477105794", "bodyText": "import not used", "author": "metas-ts", "createdAt": "2020-08-26T07:54:53Z", "path": "backend/de.metas.business/src/main/java/de/metas/order/IOrderBL.java", "diffHunk": "@@ -25,6 +25,7 @@\n import java.time.ZoneId;\n import java.util.Properties;\n \n+import de.metas.util.lang.ExternalId;", "originalCommit": "4ed0541af2342d5a9806b3307d7d2173b75d5be2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fcfd5892fd229c9314336893a0b290a9102b3a96", "chunk": "diff --git a/backend/de.metas.business/src/main/java/de/metas/order/IOrderBL.java b/backend/de.metas.business/src/main/java/de/metas/order/IOrderBL.java\nindex 7fb80e97a4..fac17ed384 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/order/IOrderBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/order/IOrderBL.java\n\n@@ -22,19 +22,6 @@\n \n package de.metas.order;\n \n-import java.time.ZoneId;\n-import java.util.Properties;\n-\n-import de.metas.util.lang.ExternalId;\n-import lombok.NonNull;\n-import org.compiere.model.I_AD_User;\n-import org.compiere.model.I_C_BPartner;\n-import org.compiere.model.I_C_DocType;\n-import org.compiere.model.I_C_Order;\n-import org.compiere.model.I_C_OrderLine;\n-import org.compiere.model.I_C_Tax;\n-import org.compiere.model.I_M_PriceList_Version;\n-\n import de.metas.bpartner.BPartnerContactId;\n import de.metas.bpartner.BPartnerLocationId;\n import de.metas.currency.CurrencyPrecision;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEwNzM1Nw==", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r477107357", "bodyText": "can't you simply use ids.get(..) here?", "author": "metas-ts", "createdAt": "2020-08-26T07:57:15Z", "path": "backend/de.metas.business/src/main/java/de/metas/payment/api/impl/PaymentBL.java", "diffHunk": "@@ -419,6 +427,54 @@ public boolean isMatchInvoice(final I_C_Payment payment, final I_C_Invoice invoi\n \t\treturn false;\n \t}\n \n+\t@Override\n+\tpublic List<ExternalId> getExternalIdsList(List<I_C_Payment> payments)\n+\t{\n+\t\tfinal List<I_C_Payment> paymentsWithExternalIds = payments\n+\t\t\t\t.stream()\n+\t\t\t\t.filter(p -> !(p.getExternalOrderId() == null))\n+\t\t\t\t.collect(Collectors.toList());\n+\t\treturn CollectionUtils.extractDistinctElements(paymentsWithExternalIds, p -> ExternalId.ofOrNull(p.getExternalOrderId()));\n+\t}\n+\n+\t@Override\n+\tpublic List<OrderId> getOrderIdsList(List<I_C_Payment> payments)\n+\t{\n+\t\tfinal List<I_C_Payment> paymentsWithOrderIds = payments\n+\t\t\t\t.stream()\n+\t\t\t\t.filter(p -> !(p.getC_Order_ID() == 0))\n+\t\t\t\t.collect(Collectors.toList());\n+\t\treturn CollectionUtils.extractDistinctElements(paymentsWithOrderIds, p -> OrderId.ofRepoId(p.getC_Order_ID()));\n+\t}\n+\n+\t@Override\n+\tpublic void setPaymentOrderIds(List<I_C_Payment> payments, Map<ExternalId, OrderId> ids)\n+\t{\n+\t\tfor (final I_C_Payment payment : payments)\n+\t\t{\n+\t\t\tfinal OrderId orderId = ids.getOrDefault(ExternalId.ofOrNull(payment.getExternalOrderId()), OrderId.ofRepoIdOrNull(0));", "originalCommit": "4ed0541af2342d5a9806b3307d7d2173b75d5be2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fcfd5892fd229c9314336893a0b290a9102b3a96", "chunk": "diff --git a/backend/de.metas.business/src/main/java/de/metas/payment/api/impl/PaymentBL.java b/backend/de.metas.business/src/main/java/de/metas/payment/api/impl/PaymentBL.java\nindex cfd4e5fefc..0ad2051782 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/payment/api/impl/PaymentBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/payment/api/impl/PaymentBL.java\n\n@@ -428,7 +432,45 @@ public class PaymentBL implements IPaymentBL\n \t}\n \n \t@Override\n-\tpublic List<ExternalId> getExternalIdsList(List<I_C_Payment> payments)\n+\tpublic boolean canAllocateOrderPaymentToInvoice(final I_C_Order order)\n+\t{\n+\t\tif (order == null)\n+\t\t{\n+\t\t\treturn false;\n+\t\t}\n+\t\tif (order.getC_Payment_ID() <= 0)\n+\t\t{\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tfinal boolean isPrepayOrder = docTypeBL.isPrepay(DocTypeId.ofRepoId(order.getC_DocType_ID()));\n+\t\tif (isPrepayOrder)\n+\t\t{\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\tfinal I_C_Payment payment = paymentDAO.getById(PaymentId.ofRepoId(order.getC_Payment_ID()));\n+\t\treturn payment.getC_Order_ID() == order.getC_Order_ID();\n+\t}\n+\n+\tprivate void allocateInvoicesAgainstPaymentsIfNecessary(final List<I_C_Payment> payments)\n+\t{\n+\t\tfor (final I_C_Payment payment : payments)\n+\t\t{\n+\t\t\tfinal I_C_Order order = orderDAO.getById(OrderId.ofRepoId(payment.getC_Order_ID()));\n+\t\t\tfinal I_C_Invoice invoice = invoiceDAO.getByIdInTrx(InvoiceId.ofRepoId(payment.getC_Invoice_ID()));\n+\n+\t\t\tif (canAllocateOrderPaymentToInvoice(order))\n+\t\t\t{\n+\t\t\t\tif (invoice != null && DocStatus.ofCode(payment.getDocStatus()).equals(DocStatus.Completed))\n+\t\t\t\t{\n+\t\t\t\t\tallocationBL.autoAllocateSpecificPayment(invoice, payment, true);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate List<ExternalId> getExternalIdsList(final List<I_C_Payment> payments)\n \t{\n \t\tfinal List<I_C_Payment> paymentsWithExternalIds = payments\n \t\t\t\t.stream()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEwNzY4Nw==", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r477107687", "bodyText": "same..i think you can sim,ply use ids.get(...)", "author": "metas-ts", "createdAt": "2020-08-26T07:57:45Z", "path": "backend/de.metas.business/src/main/java/de/metas/payment/api/impl/PaymentBL.java", "diffHunk": "@@ -419,6 +427,54 @@ public boolean isMatchInvoice(final I_C_Payment payment, final I_C_Invoice invoi\n \t\treturn false;\n \t}\n \n+\t@Override\n+\tpublic List<ExternalId> getExternalIdsList(List<I_C_Payment> payments)\n+\t{\n+\t\tfinal List<I_C_Payment> paymentsWithExternalIds = payments\n+\t\t\t\t.stream()\n+\t\t\t\t.filter(p -> !(p.getExternalOrderId() == null))\n+\t\t\t\t.collect(Collectors.toList());\n+\t\treturn CollectionUtils.extractDistinctElements(paymentsWithExternalIds, p -> ExternalId.ofOrNull(p.getExternalOrderId()));\n+\t}\n+\n+\t@Override\n+\tpublic List<OrderId> getOrderIdsList(List<I_C_Payment> payments)\n+\t{\n+\t\tfinal List<I_C_Payment> paymentsWithOrderIds = payments\n+\t\t\t\t.stream()\n+\t\t\t\t.filter(p -> !(p.getC_Order_ID() == 0))\n+\t\t\t\t.collect(Collectors.toList());\n+\t\treturn CollectionUtils.extractDistinctElements(paymentsWithOrderIds, p -> OrderId.ofRepoId(p.getC_Order_ID()));\n+\t}\n+\n+\t@Override\n+\tpublic void setPaymentOrderIds(List<I_C_Payment> payments, Map<ExternalId, OrderId> ids)\n+\t{\n+\t\tfor (final I_C_Payment payment : payments)\n+\t\t{\n+\t\t\tfinal OrderId orderId = ids.getOrDefault(ExternalId.ofOrNull(payment.getExternalOrderId()), OrderId.ofRepoIdOrNull(0));\n+\t\t\tif (orderId != null)\n+\t\t\t{\n+\t\t\t\tpayment.setC_Order_ID(orderId.getRepoId());\n+\t\t\t\tsave(payment);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void setPaymentInvoiceIds(List<I_C_Payment> payments, Map<OrderId, InvoiceId> ids)\n+\t{\n+\t\tfor (final I_C_Payment payment : payments)\n+\t\t{\n+\t\t\tfinal InvoiceId invoiceId = ids.getOrDefault(OrderId.ofRepoIdOrNull(payment.getC_Order_ID()), InvoiceId.ofRepoIdOrNull(0));", "originalCommit": "4ed0541af2342d5a9806b3307d7d2173b75d5be2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fcfd5892fd229c9314336893a0b290a9102b3a96", "chunk": "diff --git a/backend/de.metas.business/src/main/java/de/metas/payment/api/impl/PaymentBL.java b/backend/de.metas.business/src/main/java/de/metas/payment/api/impl/PaymentBL.java\nindex cfd4e5fefc..0ad2051782 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/payment/api/impl/PaymentBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/payment/api/impl/PaymentBL.java\n\n@@ -428,7 +432,45 @@ public class PaymentBL implements IPaymentBL\n \t}\n \n \t@Override\n-\tpublic List<ExternalId> getExternalIdsList(List<I_C_Payment> payments)\n+\tpublic boolean canAllocateOrderPaymentToInvoice(final I_C_Order order)\n+\t{\n+\t\tif (order == null)\n+\t\t{\n+\t\t\treturn false;\n+\t\t}\n+\t\tif (order.getC_Payment_ID() <= 0)\n+\t\t{\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tfinal boolean isPrepayOrder = docTypeBL.isPrepay(DocTypeId.ofRepoId(order.getC_DocType_ID()));\n+\t\tif (isPrepayOrder)\n+\t\t{\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\tfinal I_C_Payment payment = paymentDAO.getById(PaymentId.ofRepoId(order.getC_Payment_ID()));\n+\t\treturn payment.getC_Order_ID() == order.getC_Order_ID();\n+\t}\n+\n+\tprivate void allocateInvoicesAgainstPaymentsIfNecessary(final List<I_C_Payment> payments)\n+\t{\n+\t\tfor (final I_C_Payment payment : payments)\n+\t\t{\n+\t\t\tfinal I_C_Order order = orderDAO.getById(OrderId.ofRepoId(payment.getC_Order_ID()));\n+\t\t\tfinal I_C_Invoice invoice = invoiceDAO.getByIdInTrx(InvoiceId.ofRepoId(payment.getC_Invoice_ID()));\n+\n+\t\t\tif (canAllocateOrderPaymentToInvoice(order))\n+\t\t\t{\n+\t\t\t\tif (invoice != null && DocStatus.ofCode(payment.getDocStatus()).equals(DocStatus.Completed))\n+\t\t\t\t{\n+\t\t\t\t\tallocationBL.autoAllocateSpecificPayment(invoice, payment, true);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate List<ExternalId> getExternalIdsList(final List<I_C_Payment> payments)\n \t{\n \t\tfinal List<I_C_Payment> paymentsWithExternalIds = payments\n \t\t\t\t.stream()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEzMzIwOA==", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r477133208", "bodyText": "(i wrote this comment after the two that follow in this class)\nI understand that this is aiming at completed payments that get their respective invoice from your process.\n\nI think that your process is the only one to set C_Order_ID and C_Invoice_ID on an already completed payment\nfor not-yet-completed payment, we AFAIU have Cristian's code\n\n=> so, rather that have this model interceptor that \"incidentally\" allocated the payment,\nmake the allocation explicitly in the PaymentBL-code that also sets the C_Order_ID and C_Invoice_ID", "author": "metas-ts", "createdAt": "2020-08-26T08:38:57Z", "path": "backend/de.metas.business/src/main/java/de/metas/payment/interceptor/C_Payment.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * #%L\n+ * de.metas.business\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.payment.interceptor;\n+\n+import de.metas.adempiere.model.I_C_Invoice;\n+import de.metas.allocation.api.IAllocationBL;\n+import de.metas.document.DocTypeId;\n+import de.metas.document.IDocTypeBL;\n+import de.metas.invoice.service.IInvoiceDAO;\n+import de.metas.order.IOrderDAO;\n+import de.metas.order.OrderId;\n+import de.metas.payment.PaymentId;\n+import de.metas.payment.api.IPaymentDAO;\n+import de.metas.util.Services;\n+import org.adempiere.ad.modelvalidator.annotations.Interceptor;\n+import org.adempiere.ad.modelvalidator.annotations.ModelChange;\n+import org.compiere.model.I_C_Order;\n+import org.compiere.model.I_C_Payment;\n+import org.compiere.model.ModelValidator;\n+import org.springframework.stereotype.Component;\n+\n+@Interceptor(I_C_Payment.class)\n+@Component\n+public class C_Payment", "originalCommit": "4ed0541af2342d5a9806b3307d7d2173b75d5be2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fcfd5892fd229c9314336893a0b290a9102b3a96", "chunk": "diff --git a/backend/de.metas.business/src/main/java/de/metas/payment/interceptor/C_Payment.java b/backend/de.metas.business/src/main/java/de/metas/payment/interceptor/C_Payment.java\ndeleted file mode 100644\nindex a1e1f411e8..0000000000\n--- a/backend/de.metas.business/src/main/java/de/metas/payment/interceptor/C_Payment.java\n+++ /dev/null\n\n@@ -1,94 +0,0 @@\n-/*\n- * #%L\n- * de.metas.business\n- * %%\n- * Copyright (C) 2020 metas GmbH\n- * %%\n- * This program is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU General Public License as\n- * published by the Free Software Foundation, either version 2 of the\n- * License, or (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n- * GNU General Public License for more details.\n- *\n- * You should have received a copy of the GNU General Public\n- * License along with this program. If not, see\n- * <http://www.gnu.org/licenses/gpl-2.0.html>.\n- * #L%\n- */\n-\n-package de.metas.payment.interceptor;\n-\n-import de.metas.adempiere.model.I_C_Invoice;\n-import de.metas.allocation.api.IAllocationBL;\n-import de.metas.document.DocTypeId;\n-import de.metas.document.IDocTypeBL;\n-import de.metas.invoice.service.IInvoiceDAO;\n-import de.metas.order.IOrderDAO;\n-import de.metas.order.OrderId;\n-import de.metas.payment.PaymentId;\n-import de.metas.payment.api.IPaymentDAO;\n-import de.metas.util.Services;\n-import org.adempiere.ad.modelvalidator.annotations.Interceptor;\n-import org.adempiere.ad.modelvalidator.annotations.ModelChange;\n-import org.compiere.model.I_C_Order;\n-import org.compiere.model.I_C_Payment;\n-import org.compiere.model.ModelValidator;\n-import org.springframework.stereotype.Component;\n-\n-@Interceptor(I_C_Payment.class)\n-@Component\n-public class C_Payment\n-{\n-\tpublic static final C_Payment INSTANCE = new C_Payment();\n-\n-\tprivate final IDocTypeBL docTypeBL = Services.get(IDocTypeBL.class);\n-\tprivate final IPaymentDAO paymentDAO = Services.get(IPaymentDAO.class);\n-\tprivate final IAllocationBL allocationBL = Services.get(IAllocationBL.class);\n-\tprivate final IInvoiceDAO invoiceDAO = Services.get(IInvoiceDAO.class);\n-\tprivate final IOrderDAO orderDAO = Services.get(IOrderDAO.class);\n-\n-\tboolean canAllocateOrderPaymentToInvoice(final I_C_Order order)\n-\t{\n-\t\tif (order == null)\n-\t\t{\n-\t\t\treturn false;\n-\t\t}\n-\t\tif (order.getC_Payment_ID() <= 0)\n-\t\t{\n-\t\t\treturn false;\n-\t\t}\n-\n-\t\tfinal boolean isPrepayOrder = docTypeBL.isPrepay(DocTypeId.ofRepoId(order.getC_DocType_ID()));\n-\t\tif (isPrepayOrder)\n-\t\t{\n-\t\t\treturn true;\n-\t\t}\n-\n-\t\tfinal I_C_Payment payment = paymentDAO.getById(PaymentId.ofRepoId(order.getC_Payment_ID()));\n-\t\treturn payment.getC_Order_ID() == order.getC_Order_ID();\n-\t}\n-\n-\t@ModelChange(timings = { ModelValidator.TYPE_AFTER_CHANGE }, ifColumnsChanged = { I_C_Payment.COLUMNNAME_C_Invoice_ID })\n-\tpublic void allocateInvoiceAgainstPaymentIfNecessary(final I_C_Payment payment)\n-\t{\n-\t\tfinal I_C_Invoice invoice;\n-\t\tfinal I_C_Order order;\n-\t\tif (payment.getC_Order_ID() > 0)\n-\t\t{\n-\t\t\torder = orderDAO.getById(OrderId.ofRepoId(payment.getC_Order_ID()));\n-\t\t\tinvoice = invoiceDAO.getByOrderId(OrderId.ofRepoId(payment.getC_Order_ID()));\n-\n-\t\t\tif (canAllocateOrderPaymentToInvoice(order))\n-\t\t\t{\n-\t\t\t\tif (invoice != null)\n-\t\t\t\t{\n-\t\t\t\t\tallocationBL.autoAllocateSpecificPayment(invoice, payment, true);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEzNzg5OA==", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r477137898", "bodyText": "C_Payment has no callout methods AFAIU\nGenerally, think we should ditch the whole intercheptor; see my comment at C_Payment", "author": "metas-ts", "createdAt": "2020-08-26T08:46:16Z", "path": "backend/de.metas.business/src/main/java/de/metas/payment/interceptor/PaymentModuleInterceptor.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * #%L\n+ * de.metas.business\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.payment.interceptor;\n+\n+import org.adempiere.ad.callout.spi.IProgramaticCalloutProvider;\n+import org.adempiere.ad.modelvalidator.AbstractModuleInterceptor;\n+import org.adempiere.ad.modelvalidator.IModelValidationEngine;\n+\n+public class PaymentModuleInterceptor extends AbstractModuleInterceptor\n+{\n+\tpublic static final PaymentModuleInterceptor INSTANCE = new PaymentModuleInterceptor();\n+\n+\tprivate PaymentModuleInterceptor()\n+\t{\n+\t}\n+\n+\t@Override\n+\tprotected void registerInterceptors(final IModelValidationEngine engine)\n+\t{\n+\t\tengine.addModelValidator(C_Payment.INSTANCE); // FRESH-348\n+\n+\t}\n+\n+\t@Override\n+\tprotected void registerCallouts(final IProgramaticCalloutProvider calloutsRegistry)\n+\t{\n+\t\tcalloutsRegistry.registerAnnotatedCallout(C_Payment.INSTANCE); // FRESH-348", "originalCommit": "4ed0541af2342d5a9806b3307d7d2173b75d5be2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fcfd5892fd229c9314336893a0b290a9102b3a96", "chunk": "diff --git a/backend/de.metas.business/src/main/java/de/metas/payment/interceptor/PaymentModuleInterceptor.java b/backend/de.metas.business/src/main/java/de/metas/payment/interceptor/PaymentModuleInterceptor.java\ndeleted file mode 100644\nindex d658e6e756..0000000000\n--- a/backend/de.metas.business/src/main/java/de/metas/payment/interceptor/PaymentModuleInterceptor.java\n+++ /dev/null\n\n@@ -1,50 +0,0 @@\n-/*\n- * #%L\n- * de.metas.business\n- * %%\n- * Copyright (C) 2020 metas GmbH\n- * %%\n- * This program is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU General Public License as\n- * published by the Free Software Foundation, either version 2 of the\n- * License, or (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n- * GNU General Public License for more details.\n- *\n- * You should have received a copy of the GNU General Public\n- * License along with this program. If not, see\n- * <http://www.gnu.org/licenses/gpl-2.0.html>.\n- * #L%\n- */\n-\n-package de.metas.payment.interceptor;\n-\n-import org.adempiere.ad.callout.spi.IProgramaticCalloutProvider;\n-import org.adempiere.ad.modelvalidator.AbstractModuleInterceptor;\n-import org.adempiere.ad.modelvalidator.IModelValidationEngine;\n-\n-public class PaymentModuleInterceptor extends AbstractModuleInterceptor\n-{\n-\tpublic static final PaymentModuleInterceptor INSTANCE = new PaymentModuleInterceptor();\n-\n-\tprivate PaymentModuleInterceptor()\n-\t{\n-\t}\n-\n-\t@Override\n-\tprotected void registerInterceptors(final IModelValidationEngine engine)\n-\t{\n-\t\tengine.addModelValidator(C_Payment.INSTANCE); // FRESH-348\n-\n-\t}\n-\n-\t@Override\n-\tprotected void registerCallouts(final IProgramaticCalloutProvider calloutsRegistry)\n-\t{\n-\t\tcalloutsRegistry.registerAnnotatedCallout(C_Payment.INSTANCE); // FRESH-348\n-\t}\n-}\n-\n"}}, {"oid": "0353008a2e047f7e836312b980550a7ffcdc5a9f", "url": "https://github.com/metasfresh/metasfresh/commit/0353008a2e047f7e836312b980550a7ffcdc5a9f", "message": "#7109 - Reverted I_C_Order modifications.", "committedDate": "2020-08-27T12:30:28Z", "type": "commit"}, {"oid": "fcfd5892fd229c9314336893a0b290a9102b3a96", "url": "https://github.com/metasfresh/metasfresh/commit/fcfd5892fd229c9314336893a0b290a9102b3a96", "message": "#7109 - Implemented Review Notes.", "committedDate": "2020-08-27T18:29:24Z", "type": "commit"}, {"oid": "6101baf420e972a005aa42b9f934951a3b394c66", "url": "https://github.com/metasfresh/metasfresh/commit/6101baf420e972a005aa42b9f934951a3b394c66", "message": "#7109 - Updated Description.", "committedDate": "2020-08-27T18:39:55Z", "type": "commit"}, {"oid": "0cd8ef353d6d2772b083c8cd4d5f9d5c902c9a80", "url": "https://github.com/metasfresh/metasfresh/commit/0cd8ef353d6d2772b083c8cd4d5f9d5c902c9a80", "message": "div minor changes\n\n* use DocStatus.isCompleted()\n* C_Invoice: get rid of private one-line deletegate method; also move corresponding tests\n* IInvoiceDAO: clean up\n* InvoiceDAO: clean up; addInArrayFilter supports RepoIdAware, see javadoc; pulled not-SQL depending method up into AbstractInvoiceDAO\n* AbstractInvoiceDAO remove useless methods\n* PaymentBL: add `@NonNull final`s\n\nhttps://github.com/metasfresh/metasfresh/issues/7109", "committedDate": "2020-08-28T05:42:30Z", "type": "commit"}, {"oid": "4f516edfc9e51f89f7dc6df30fffa3810cb7f0d3", "url": "https://github.com/metasfresh/metasfresh/commit/4f516edfc9e51f89f7dc6df30fffa3810cb7f0d3", "message": "Merge branch 'blonde_monkey_uat' into gh7109", "committedDate": "2020-08-28T05:48:03Z", "type": "commit"}, {"oid": "18c49ff64d9a34e594042bce84a0eaa64f617322", "url": "https://github.com/metasfresh/metasfresh/commit/18c49ff64d9a34e594042bce84a0eaa64f617322", "message": "Merge remote-tracking branch 'origin/blonde_monkey_uat' into gh7109", "committedDate": "2020-08-28T10:39:08Z", "type": "commit"}, {"oid": "5b8a3570c831276b2cd07aa467faf5ee5c340f7b", "url": "https://github.com/metasfresh/metasfresh/commit/5b8a3570c831276b2cd07aa467faf5ee5c340f7b", "message": "Merge remote-tracking branch 'origin/gh7109' into gh7109", "committedDate": "2020-08-28T10:39:40Z", "type": "commit"}]}