{"pr_number": 950, "pr_title": "Xray", "pr_createdAt": "2020-09-16T12:05:26Z", "pr_url": "https://github.com/vividus-framework/vividus/pull/950", "timeline": [{"oid": "94268dbd35fa21535017dede4c92a0323afdc685", "url": "https://github.com/vividus-framework/vividus/commit/94268dbd35fa21535017dede4c92a0323afdc685", "message": "Draft", "committedDate": "2020-09-16T12:07:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM5NzI1MA==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r489397250", "bodyText": "move to a separate commit (maybe PR)", "author": "valfirst", "createdAt": "2020-09-16T12:28:29Z", "path": "vividus-http-client/src/main/java/org/vividus/http/exception/HttpRequestBuildException.java", "diffHunk": "@@ -16,7 +16,9 @@\n \n package org.vividus.http.exception;\n \n-public class HttpRequestBuildException extends Exception\n+import java.io.IOException;\n+\n+public class HttpRequestBuildException extends IOException", "originalCommit": "94268dbd35fa21535017dede4c92a0323afdc685", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUxNzQ5MA==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r489517490", "bodyText": "Will rebase from #952", "author": "uarlouski", "createdAt": "2020-09-16T15:14:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM5NzI1MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQwMDA3Mw==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r489400073", "bodyText": "it should be a part of vividus-http-client and it's shouldn't use JiraConfiguration", "author": "valfirst", "createdAt": "2020-09-16T12:33:10Z", "path": "vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/jira/context/CacheableClientCredentialsHttpClientContextFactory.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.jira.context;\n+\n+import org.apache.http.HttpHost;\n+import org.apache.http.client.AuthCache;\n+import org.apache.http.client.CredentialsProvider;\n+import org.apache.http.client.protocol.HttpClientContext;\n+import org.apache.http.impl.auth.BasicScheme;\n+import org.apache.http.impl.client.BasicAuthCache;\n+import org.vividus.http.client.ClientBuilderUtils;\n+import org.vividus.jira.JiraConfiguration;\n+\n+public class CacheableClientCredentialsHttpClientContextFactory implements IHttpClientContextFactory\n+{\n+    private final CredentialsProvider credentialsProvider;\n+    private final AuthCache authCache;\n+\n+    public CacheableClientCredentialsHttpClientContextFactory(JiraConfiguration jiraConfiguration)", "originalCommit": "94268dbd35fa21535017dede4c92a0323afdc685", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4e35844e1ac25938dd3e9dcee8c9b863b85864a4", "chunk": "diff --git a/vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/jira/context/CacheableClientCredentialsHttpClientContextFactory.java b/vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/jira/context/CacheableClientCredentialsHttpClientContextFactory.java\ndeleted file mode 100644\nindex 60cff774c..000000000\n--- a/vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/jira/context/CacheableClientCredentialsHttpClientContextFactory.java\n+++ /dev/null\n\n@@ -1,49 +0,0 @@\n-/*\n- * Copyright 2019-2020 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.vividus.jira.context;\n-\n-import org.apache.http.HttpHost;\n-import org.apache.http.client.AuthCache;\n-import org.apache.http.client.CredentialsProvider;\n-import org.apache.http.client.protocol.HttpClientContext;\n-import org.apache.http.impl.auth.BasicScheme;\n-import org.apache.http.impl.client.BasicAuthCache;\n-import org.vividus.http.client.ClientBuilderUtils;\n-import org.vividus.jira.JiraConfiguration;\n-\n-public class CacheableClientCredentialsHttpClientContextFactory implements IHttpClientContextFactory\n-{\n-    private final CredentialsProvider credentialsProvider;\n-    private final AuthCache authCache;\n-\n-    public CacheableClientCredentialsHttpClientContextFactory(JiraConfiguration jiraConfiguration)\n-    {\n-        this.credentialsProvider = ClientBuilderUtils.createCredentialsProvider(jiraConfiguration.getUsername(),\n-                jiraConfiguration.getPassword());\n-        this.authCache = new BasicAuthCache();\n-        authCache.put(HttpHost.create(jiraConfiguration.getEndpoint().toString()), new BasicScheme());\n-    }\n-\n-    @Override\n-    public HttpClientContext create()\n-    {\n-        HttpClientContext httpContext = HttpClientContext.create();\n-        httpContext.setAuthCache(authCache);\n-        httpContext.setCredentialsProvider(credentialsProvider);\n-        return httpContext;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQwMDQ5Mg==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r489400492", "bodyText": "it should be a part of vividus-http-client", "author": "valfirst", "createdAt": "2020-09-16T12:33:53Z", "path": "vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/jira/context/DefaultHttpClientContextFactory.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.jira.context;\n+\n+import org.apache.http.client.protocol.HttpClientContext;\n+\n+public class DefaultHttpClientContextFactory implements IHttpClientContextFactory", "originalCommit": "94268dbd35fa21535017dede4c92a0323afdc685", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4e35844e1ac25938dd3e9dcee8c9b863b85864a4", "chunk": "diff --git a/vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/jira/context/DefaultHttpClientContextFactory.java b/vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/jira/context/DefaultHttpClientContextFactory.java\ndeleted file mode 100644\nindex 0802b86db..000000000\n--- a/vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/jira/context/DefaultHttpClientContextFactory.java\n+++ /dev/null\n\n@@ -1,28 +0,0 @@\n-/*\n- * Copyright 2019-2020 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.vividus.jira.context;\n-\n-import org.apache.http.client.protocol.HttpClientContext;\n-\n-public class DefaultHttpClientContextFactory implements IHttpClientContextFactory\n-{\n-    @Override\n-    public HttpClientContext create()\n-    {\n-        return HttpClientContext.create();\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQwMDYwMw==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r489400603", "bodyText": "HttpClientContextFactory", "author": "valfirst", "createdAt": "2020-09-16T12:34:03Z", "path": "vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/jira/context/IHttpClientContextFactory.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.jira.context;\n+\n+import org.apache.http.client.protocol.HttpClientContext;\n+\n+public interface IHttpClientContextFactory", "originalCommit": "94268dbd35fa21535017dede4c92a0323afdc685", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4e35844e1ac25938dd3e9dcee8c9b863b85864a4", "chunk": "diff --git a/vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/jira/context/IHttpClientContextFactory.java b/vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/jira/context/IHttpClientContextFactory.java\ndeleted file mode 100644\nindex 9677b04d3..000000000\n--- a/vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/jira/context/IHttpClientContextFactory.java\n+++ /dev/null\n\n@@ -1,24 +0,0 @@\n-/*\n- * Copyright 2019-2020 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.vividus.jira.context;\n-\n-import org.apache.http.client.protocol.HttpClientContext;\n-\n-public interface IHttpClientContextFactory\n-{\n-    HttpClientContext create();\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQwNDU2OA==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r489404568", "bodyText": "I believe you should set cookie at http client level, not http request", "author": "valfirst", "createdAt": "2020-09-16T12:40:46Z", "path": "vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/jira/request/JSessionHttpRequestBaseFactory.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.jira.request;\n+\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.methods.HttpRequestBase;\n+import org.vividus.http.HttpMethod;\n+import org.vividus.http.exception.HttpRequestBuildException;\n+import org.vividus.jira.JiraConfiguration;\n+\n+public class JSessionHttpRequestBaseFactory extends HttpRequestBaseFactory\n+{\n+    private String token;\n+\n+    public JSessionHttpRequestBaseFactory(JiraConfiguration jiraConfiguration)\n+    {\n+        super(jiraConfiguration);\n+    }\n+\n+    @Override\n+    public HttpRequestBase create(HttpMethod method, String relativeUrl, HttpEntity content)\n+            throws HttpRequestBuildException\n+    {\n+        HttpRequestBase request = super.create(method, relativeUrl, content);\n+        request.addHeader(\"Cookie\", \"JSESSIONID=\" + token);", "originalCommit": "94268dbd35fa21535017dede4c92a0323afdc685", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4e35844e1ac25938dd3e9dcee8c9b863b85864a4", "chunk": "diff --git a/vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/jira/request/JSessionHttpRequestBaseFactory.java b/vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/jira/request/JSessionHttpRequestBaseFactory.java\ndeleted file mode 100644\nindex b25354682..000000000\n--- a/vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/jira/request/JSessionHttpRequestBaseFactory.java\n+++ /dev/null\n\n@@ -1,47 +0,0 @@\n-/*\n- * Copyright 2019-2020 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.vividus.jira.request;\n-\n-import org.apache.http.HttpEntity;\n-import org.apache.http.client.methods.HttpRequestBase;\n-import org.vividus.http.HttpMethod;\n-import org.vividus.http.exception.HttpRequestBuildException;\n-import org.vividus.jira.JiraConfiguration;\n-\n-public class JSessionHttpRequestBaseFactory extends HttpRequestBaseFactory\n-{\n-    private String token;\n-\n-    public JSessionHttpRequestBaseFactory(JiraConfiguration jiraConfiguration)\n-    {\n-        super(jiraConfiguration);\n-    }\n-\n-    @Override\n-    public HttpRequestBase create(HttpMethod method, String relativeUrl, HttpEntity content)\n-            throws HttpRequestBuildException\n-    {\n-        HttpRequestBase request = super.create(method, relativeUrl, content);\n-        request.addHeader(\"Cookie\", \"JSESSIONID=\" + token);\n-        return request;\n-    }\n-\n-    public void setToken(String token)\n-    {\n-        this.token = token;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQwNTc1OA==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r489405758", "bodyText": "org.vividus.xray.exporter -> org.vividus.xray, here and for all other classes", "author": "valfirst", "createdAt": "2020-09-16T12:42:40Z", "path": "vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.exporter;", "originalCommit": "94268dbd35fa21535017dede4c92a0323afdc685", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4e35844e1ac25938dd3e9dcee8c9b863b85864a4", "chunk": "diff --git a/vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java b/vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/XrayExporter.java\nsimilarity index 83%\nrename from vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java\nrename to vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/XrayExporter.java\nindex 9a95704c1..0854b9a92 100644\n--- a/vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java\n+++ b/vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/XrayExporter.java\n\n@@ -14,11 +14,10 @@\n  * limitations under the License.\n  */\n \n-package org.vividus.xray.exporter;\n+package org.vividus.xray;\n \n import static org.apache.commons.lang3.Validate.notEmpty;\n \n-import java.io.File;\n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQwNjE5MQ==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r489406191", "bodyText": "Adapter -> Converter", "author": "valfirst", "createdAt": "2020-09-16T12:43:22Z", "path": "vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/exporter/adapter/ManualStepAdapter.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.exporter.adapter;\n+\n+import static java.lang.System.lineSeparator;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.RegExUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.stereotype.Component;\n+import org.vividus.xray.exporter.exception.XrayExporterException;\n+import org.vividus.xray.exporter.model.exporter.ManualTestStep;\n+import org.vividus.xray.exporter.model.jbehave.Step;\n+\n+@Component\n+public class ManualStepAdapter", "originalCommit": "94268dbd35fa21535017dede4c92a0323afdc685", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4e35844e1ac25938dd3e9dcee8c9b863b85864a4", "chunk": "diff --git a/vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/exporter/adapter/ManualStepAdapter.java b/vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/converter/ManualStepConverter.java\nsimilarity index 94%\nrename from vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/exporter/adapter/ManualStepAdapter.java\nrename to vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/converter/ManualStepConverter.java\nindex 6eb8b08fd..b819317d1 100644\n--- a/vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/exporter/adapter/ManualStepAdapter.java\n+++ b/vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/converter/ManualStepConverter.java\n\n@@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package org.vividus.xray.exporter.adapter;\n+package org.vividus.xray.converter;\n \n import static java.lang.System.lineSeparator;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQwNzIyOA==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r489407228", "bodyText": "why Runtime?", "author": "valfirst", "createdAt": "2020-09-16T12:45:01Z", "path": "vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/exporter/exception/XrayExporterException.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.exporter.exception;\n+\n+public class XrayExporterException extends RuntimeException", "originalCommit": "94268dbd35fa21535017dede4c92a0323afdc685", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUxNTQ0MA==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r489515440", "bodyText": "Currently this exception used in the converter and throws on wrong formatted data provided by used, I think it's worth to rename it to make more accurate", "author": "uarlouski", "createdAt": "2020-09-16T15:11:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQwNzIyOA=="}], "type": "inlineReview", "revised_code": {"commit": "4e35844e1ac25938dd3e9dcee8c9b863b85864a4", "chunk": "diff --git a/vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/exporter/exception/XrayExporterException.java b/vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/exception/XrayExporterException.java\nsimilarity index 94%\nrename from vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/exporter/exception/XrayExporterException.java\nrename to vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/exception/XrayExporterException.java\nindex 290510445..325d98603 100644\n--- a/vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/exporter/exception/XrayExporterException.java\n+++ b/vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/exception/XrayExporterException.java\n\n@@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package org.vividus.xray.exporter.exception;\n+package org.vividus.xray.exception;\n \n public class XrayExporterException extends RuntimeException\n {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQwODIxMQ==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r489408211", "bodyText": "it should be a part of vividus-bdd-engine", "author": "valfirst", "createdAt": "2020-09-16T12:46:27Z", "path": "vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/exporter/model/jbehave/Meta.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.exporter.model.jbehave;\n+\n+public class Meta", "originalCommit": "94268dbd35fa21535017dede4c92a0323afdc685", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQwODQxMg==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r489408412", "bodyText": "the same for other JBehave-based POJO-s", "author": "valfirst", "createdAt": "2020-09-16T12:46:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQwODIxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "4e35844e1ac25938dd3e9dcee8c9b863b85864a4", "chunk": "diff --git a/vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/exporter/model/jbehave/Meta.java b/vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/model/jbehave/Meta.java\nsimilarity index 95%\nrename from vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/exporter/model/jbehave/Meta.java\nrename to vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/model/jbehave/Meta.java\nindex 9544d311d..864928fe7 100644\n--- a/vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/exporter/model/jbehave/Meta.java\n+++ b/vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/model/jbehave/Meta.java\n\n@@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package org.vividus.xray.exporter.model.jbehave;\n+package org.vividus.xray.model.jbehave;\n \n public class Meta\n {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQwODc0Ng==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r489408746", "bodyText": "custom logic, it should be removed or be configurable", "author": "valfirst", "createdAt": "2020-09-16T12:47:21Z", "path": "vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/exporter/model/jbehave/Scenario.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.exporter.model.jbehave;\n+\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+public class Scenario\n+{\n+    private static final String SEMICOLON = \";\";\n+    private static final String SKIP = \"skip\";", "originalCommit": "94268dbd35fa21535017dede4c92a0323afdc685", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4e35844e1ac25938dd3e9dcee8c9b863b85864a4", "chunk": "diff --git a/vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/exporter/model/jbehave/Scenario.java b/vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/model/jbehave/Scenario.java\nsimilarity index 95%\nrename from vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/exporter/model/jbehave/Scenario.java\nrename to vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/model/jbehave/Scenario.java\nindex 8d0fe8651..ccb776875 100644\n--- a/vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/exporter/model/jbehave/Scenario.java\n+++ b/vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/model/jbehave/Scenario.java\n\n@@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package org.vividus.xray.exporter.model.jbehave;\n+package org.vividus.xray.model.jbehave;\n \n import java.util.LinkedHashSet;\n import java.util.List;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQwOTA1MQ==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r489409051", "bodyText": "xray.labels", "author": "valfirst", "createdAt": "2020-09-16T12:47:50Z", "path": "vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/exporter/model/jbehave/Scenario.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.exporter.model.jbehave;\n+\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+public class Scenario\n+{\n+    private static final String SEMICOLON = \";\";\n+    private static final String SKIP = \"skip\";\n+\n+    private String title;\n+    private List<Meta> meta;\n+    private List<Step> steps;\n+\n+    public String getTitle()\n+    {\n+        return title;\n+    }\n+\n+    public void setTitle(String title)\n+    {\n+        this.title = title;\n+    }\n+\n+    public List<Meta> getMeta()\n+    {\n+        return meta;\n+    }\n+\n+    public void setMeta(List<Meta> meta)\n+    {\n+        this.meta = meta;\n+    }\n+\n+    public List<Step> getSteps()\n+    {\n+        return steps;\n+    }\n+\n+    public void setSteps(List<Step> steps)\n+    {\n+        this.steps = steps;\n+    }\n+\n+    public Optional<String> findTestCaseId()\n+    {\n+        return getMetaValuesStream(\"testCaseId\").findFirst();\n+    }\n+\n+    public Set<String> findRequirementIds()\n+    {\n+        return getMetaValues(\"requirementId\");\n+    }\n+\n+    public Set<String> findLabels()\n+    {\n+        return getMetaValues(\"labels\");", "originalCommit": "94268dbd35fa21535017dede4c92a0323afdc685", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4e35844e1ac25938dd3e9dcee8c9b863b85864a4", "chunk": "diff --git a/vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/exporter/model/jbehave/Scenario.java b/vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/model/jbehave/Scenario.java\nsimilarity index 95%\nrename from vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/exporter/model/jbehave/Scenario.java\nrename to vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/model/jbehave/Scenario.java\nindex 8d0fe8651..ccb776875 100644\n--- a/vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/exporter/model/jbehave/Scenario.java\n+++ b/vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/model/jbehave/Scenario.java\n\n@@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package org.vividus.xray.exporter.model.jbehave;\n+package org.vividus.xray.model.jbehave;\n \n import java.util.LinkedHashSet;\n import java.util.List;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQwOTE1Ng==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r489409156", "bodyText": "xray.components", "author": "valfirst", "createdAt": "2020-09-16T12:48:00Z", "path": "vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/exporter/model/jbehave/Scenario.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.exporter.model.jbehave;\n+\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+public class Scenario\n+{\n+    private static final String SEMICOLON = \";\";\n+    private static final String SKIP = \"skip\";\n+\n+    private String title;\n+    private List<Meta> meta;\n+    private List<Step> steps;\n+\n+    public String getTitle()\n+    {\n+        return title;\n+    }\n+\n+    public void setTitle(String title)\n+    {\n+        this.title = title;\n+    }\n+\n+    public List<Meta> getMeta()\n+    {\n+        return meta;\n+    }\n+\n+    public void setMeta(List<Meta> meta)\n+    {\n+        this.meta = meta;\n+    }\n+\n+    public List<Step> getSteps()\n+    {\n+        return steps;\n+    }\n+\n+    public void setSteps(List<Step> steps)\n+    {\n+        this.steps = steps;\n+    }\n+\n+    public Optional<String> findTestCaseId()\n+    {\n+        return getMetaValuesStream(\"testCaseId\").findFirst();\n+    }\n+\n+    public Set<String> findRequirementIds()\n+    {\n+        return getMetaValues(\"requirementId\");\n+    }\n+\n+    public Set<String> findLabels()\n+    {\n+        return getMetaValues(\"labels\");\n+    }\n+\n+    public Set<String> findComponents()\n+    {\n+        return getMetaValues(\"components\");", "originalCommit": "94268dbd35fa21535017dede4c92a0323afdc685", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4e35844e1ac25938dd3e9dcee8c9b863b85864a4", "chunk": "diff --git a/vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/exporter/model/jbehave/Scenario.java b/vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/model/jbehave/Scenario.java\nsimilarity index 95%\nrename from vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/exporter/model/jbehave/Scenario.java\nrename to vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/model/jbehave/Scenario.java\nindex 8d0fe8651..ccb776875 100644\n--- a/vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/exporter/model/jbehave/Scenario.java\n+++ b/vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/model/jbehave/Scenario.java\n\n@@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package org.vividus.xray.exporter.model.jbehave;\n+package org.vividus.xray.model.jbehave;\n \n import java.util.LinkedHashSet;\n import java.util.List;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQwOTk3Ng==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r489409976", "bodyText": "consider moving to JsonUtils", "author": "valfirst", "createdAt": "2020-09-16T12:49:17Z", "path": "vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/exporter/reader/JsonResourceFinder.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.exporter.reader;\n+\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.UncheckedIOException;\n+import java.nio.CharBuffer;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public final class JsonResourceFinder\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(JsonResourceFinder.class);\n+\n+    private static final List<Character> CONTINUE_CHARACTERS = List.of(' ', '\\n', '\\r');\n+    private static final List<Character> BREAK_CHARACTERS = List.of('{', '[');\n+    private static final int BUFFER_SIZE = 8;\n+\n+    private JsonResourceFinder()\n+    {\n+    }\n+\n+    public static List<File> find(Path sourceDirectory) throws IOException\n+    {\n+        LOGGER.info(\"Starting to import resources from filesystem by path {}\", sourceDirectory);\n+\n+        try (Stream<Path> paths = Files.walk(sourceDirectory))\n+        {\n+            return paths.map(Path::toFile)\n+                        .filter(File::isFile)\n+                        .filter(JsonResourceFinder::filterJsonFile)\n+                        .collect(Collectors.toList());\n+        }\n+    }\n+\n+    private static boolean filterJsonFile(File file)\n+    {\n+        boolean json = isJsonFile(file);\n+        if (!json)\n+        {\n+            LOGGER.info(\"Content of file '{}' is not JSON\", file.getAbsolutePath());\n+        }\n+        return json;\n+    }\n+\n+    private static boolean isJsonFile(File file)", "originalCommit": "94268dbd35fa21535017dede4c92a0323afdc685", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4e35844e1ac25938dd3e9dcee8c9b863b85864a4", "chunk": "diff --git a/vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/exporter/reader/JsonResourceFinder.java b/vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/reader/JsonResourceReader.java\nsimilarity index 53%\nrename from vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/exporter/reader/JsonResourceFinder.java\nrename to vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/reader/JsonResourceReader.java\nindex 78226f4ec..93dab998c 100644\n--- a/vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/exporter/reader/JsonResourceFinder.java\n+++ b/vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/reader/JsonResourceReader.java\n\n@@ -14,14 +14,11 @@\n  * limitations under the License.\n  */\n \n-package org.vividus.xray.exporter.reader;\n+package org.vividus.xray.reader;\n \n import java.io.File;\n-import java.io.FileReader;\n import java.io.IOException;\n-import java.io.Reader;\n import java.io.UncheckedIOException;\n-import java.nio.CharBuffer;\n import java.nio.charset.StandardCharsets;\n import java.nio.file.Files;\n import java.nio.file.Path;\n"}}, {"oid": "4e35844e1ac25938dd3e9dcee8c9b863b85864a4", "url": "https://github.com/vividus-framework/vividus/commit/4e35844e1ac25938dd3e9dcee8c9b863b85864a4", "message": "Draft", "committedDate": "2020-09-16T14:26:29Z", "type": "forcePushed"}, {"oid": "40abb40206173f11b08d7aca8537607881babd10", "url": "https://github.com/vividus-framework/vividus/commit/40abb40206173f11b08d7aca8537607881babd10", "message": "Draft", "committedDate": "2020-09-16T14:29:11Z", "type": "forcePushed"}, {"oid": "09c44ce6ad8745fd30c71fc30fa2475643ed7762", "url": "https://github.com/vividus-framework/vividus/commit/09c44ce6ad8745fd30c71fc30fa2475643ed7762", "message": "Draft", "committedDate": "2020-09-16T14:57:51Z", "type": "forcePushed"}, {"oid": "3acc5eb362b3c99490d0670c00f933c14b19b463", "url": "https://github.com/vividus-framework/vividus/commit/3acc5eb362b3c99490d0670c00f933c14b19b463", "message": "Draft", "committedDate": "2020-09-16T15:00:58Z", "type": "forcePushed"}, {"oid": "e2e79c3f0240201783246cf47aa9deaad925ae83", "url": "https://github.com/vividus-framework/vividus/commit/e2e79c3f0240201783246cf47aa9deaad925ae83", "message": "Draft", "committedDate": "2020-09-16T15:02:42Z", "type": "forcePushed"}, {"oid": "99205a319314f86498d22db1db6d567b46874bf1", "url": "https://github.com/vividus-framework/vividus/commit/99205a319314f86498d22db1db6d567b46874bf1", "message": "Draft", "committedDate": "2020-09-16T15:12:28Z", "type": "forcePushed"}, {"oid": "cb6fe9c3a9072fe13b465f4dfdb397653768a204", "url": "https://github.com/vividus-framework/vividus/commit/cb6fe9c3a9072fe13b465f4dfdb397653768a204", "message": "Draft", "committedDate": "2020-09-16T19:07:05Z", "type": "forcePushed"}, {"oid": "aa6a273d772315fb97b9e656ef924ee07efce0fb", "url": "https://github.com/vividus-framework/vividus/commit/aa6a273d772315fb97b9e656ef924ee07efce0fb", "message": "Draft", "committedDate": "2020-09-17T07:09:00Z", "type": "forcePushed"}, {"oid": "008d72067f286ae0fa02ba19f606b959c1c2acf9", "url": "https://github.com/vividus-framework/vividus/commit/008d72067f286ae0fa02ba19f606b959c1c2acf9", "message": "Draft", "committedDate": "2020-09-17T07:14:21Z", "type": "forcePushed"}, {"oid": "702530341101c31d6b08e9d8cfcbfb663827c8c4", "url": "https://github.com/vividus-framework/vividus/commit/702530341101c31d6b08e9d8cfcbfb663827c8c4", "message": "Draft", "committedDate": "2020-09-17T07:16:56Z", "type": "forcePushed"}, {"oid": "8518be1f4aea47fd87f3620a60d581ba3e6e3fc1", "url": "https://github.com/vividus-framework/vividus/commit/8518be1f4aea47fd87f3620a60d581ba3e6e3fc1", "message": "Draft", "committedDate": "2020-09-17T08:06:39Z", "type": "forcePushed"}, {"oid": "e799fea247b5920ba481b2b2f08a2f0d20e9f787", "url": "https://github.com/vividus-framework/vividus/commit/e799fea247b5920ba481b2b2f08a2f0d20e9f787", "message": "Draft", "committedDate": "2020-09-17T08:36:44Z", "type": "forcePushed"}, {"oid": "528781785989ada2a3ceb412d90ffe3ac6ec30a7", "url": "https://github.com/vividus-framework/vividus/commit/528781785989ada2a3ceb412d90ffe3ac6ec30a7", "message": "Draft", "committedDate": "2020-09-17T08:42:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA2MzczMQ==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r490063731", "bodyText": "it shouldn't be a part of common module vividus-bdd-engine", "author": "valfirst", "createdAt": "2020-09-17T08:26:35Z", "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Scenario.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.model.jbehave;\n+\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+public class Scenario\n+{\n+    private static final String SEMICOLON = \";\";", "originalCommit": "8518be1f4aea47fd87f3620a60d581ba3e6e3fc1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "289072fab0259a2746645540bb68d1e27d796590", "chunk": "diff --git a/vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Scenario.java b/vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Scenario.java\nindex 0dc18dbaa..1634baf74 100644\n--- a/vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Scenario.java\n+++ b/vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Scenario.java\n\n@@ -16,20 +16,12 @@\n \n package org.vividus.bdd.model.jbehave;\n \n-import java.util.LinkedHashSet;\n import java.util.List;\n import java.util.Objects;\n import java.util.Optional;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-\n-import org.apache.commons.lang3.StringUtils;\n \n public class Scenario\n {\n-    private static final String SEMICOLON = \";\";\n-\n     private String title;\n     private List<Meta> meta;\n     private List<Step> steps;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA2MzgxNg==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r490063816", "bodyText": "it shouldn't be a part of common module vividus-bdd-engine", "author": "valfirst", "createdAt": "2020-09-17T08:26:44Z", "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Scenario.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.model.jbehave;\n+\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+public class Scenario\n+{\n+    private static final String SEMICOLON = \";\";\n+\n+    private String title;\n+    private List<Meta> meta;\n+    private List<Step> steps;\n+    private Examples examples;\n+\n+    public String getTitle()\n+    {\n+        return title;\n+    }\n+\n+    public void setTitle(String title)\n+    {\n+        this.title = title;\n+    }\n+\n+    public List<Meta> getMeta()\n+    {\n+        return meta;\n+    }\n+\n+    public void setMeta(List<Meta> meta)\n+    {\n+        this.meta = meta;\n+    }\n+\n+    public List<Step> getSteps()\n+    {\n+        return steps;\n+    }\n+\n+    public void setSteps(List<Step> steps)\n+    {\n+        this.steps = steps;\n+    }\n+\n+    public Examples getExamples()\n+    {\n+        return examples;\n+    }\n+\n+    public void setExamples(Examples examples)\n+    {\n+        this.examples = examples;\n+    }\n+\n+    public Optional<String> findTestCaseId()\n+    {\n+        return getMetaValuesStream(\"testCaseId\").findFirst();", "originalCommit": "8518be1f4aea47fd87f3620a60d581ba3e6e3fc1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "289072fab0259a2746645540bb68d1e27d796590", "chunk": "diff --git a/vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Scenario.java b/vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Scenario.java\nindex 0dc18dbaa..1634baf74 100644\n--- a/vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Scenario.java\n+++ b/vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Scenario.java\n\n@@ -16,20 +16,12 @@\n \n package org.vividus.bdd.model.jbehave;\n \n-import java.util.LinkedHashSet;\n import java.util.List;\n import java.util.Objects;\n import java.util.Optional;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-\n-import org.apache.commons.lang3.StringUtils;\n \n public class Scenario\n {\n-    private static final String SEMICOLON = \";\";\n-\n     private String title;\n     private List<Meta> meta;\n     private List<Step> steps;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA2MzkwMQ==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r490063901", "bodyText": "it shouldn't be a part of common module vividus-bdd-engine", "author": "valfirst", "createdAt": "2020-09-17T08:26:50Z", "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Scenario.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.model.jbehave;\n+\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+public class Scenario\n+{\n+    private static final String SEMICOLON = \";\";\n+\n+    private String title;\n+    private List<Meta> meta;\n+    private List<Step> steps;\n+    private Examples examples;\n+\n+    public String getTitle()\n+    {\n+        return title;\n+    }\n+\n+    public void setTitle(String title)\n+    {\n+        this.title = title;\n+    }\n+\n+    public List<Meta> getMeta()\n+    {\n+        return meta;\n+    }\n+\n+    public void setMeta(List<Meta> meta)\n+    {\n+        this.meta = meta;\n+    }\n+\n+    public List<Step> getSteps()\n+    {\n+        return steps;\n+    }\n+\n+    public void setSteps(List<Step> steps)\n+    {\n+        this.steps = steps;\n+    }\n+\n+    public Examples getExamples()\n+    {\n+        return examples;\n+    }\n+\n+    public void setExamples(Examples examples)\n+    {\n+        this.examples = examples;\n+    }\n+\n+    public Optional<String> findTestCaseId()\n+    {\n+        return getMetaValuesStream(\"testCaseId\").findFirst();\n+    }\n+\n+    public Set<String> findRequirementIds()\n+    {\n+        return getMetaValues(\"requirementId\");", "originalCommit": "8518be1f4aea47fd87f3620a60d581ba3e6e3fc1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "289072fab0259a2746645540bb68d1e27d796590", "chunk": "diff --git a/vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Scenario.java b/vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Scenario.java\nindex 0dc18dbaa..1634baf74 100644\n--- a/vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Scenario.java\n+++ b/vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Scenario.java\n\n@@ -16,20 +16,12 @@\n \n package org.vividus.bdd.model.jbehave;\n \n-import java.util.LinkedHashSet;\n import java.util.List;\n import java.util.Objects;\n import java.util.Optional;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-\n-import org.apache.commons.lang3.StringUtils;\n \n public class Scenario\n {\n-    private static final String SEMICOLON = \";\";\n-\n     private String title;\n     private List<Meta> meta;\n     private List<Step> steps;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA2Mzk1MQ==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r490063951", "bodyText": "it shouldn't be a part of common module vividus-bdd-engine", "author": "valfirst", "createdAt": "2020-09-17T08:26:54Z", "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Scenario.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.model.jbehave;\n+\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+public class Scenario\n+{\n+    private static final String SEMICOLON = \";\";\n+\n+    private String title;\n+    private List<Meta> meta;\n+    private List<Step> steps;\n+    private Examples examples;\n+\n+    public String getTitle()\n+    {\n+        return title;\n+    }\n+\n+    public void setTitle(String title)\n+    {\n+        this.title = title;\n+    }\n+\n+    public List<Meta> getMeta()\n+    {\n+        return meta;\n+    }\n+\n+    public void setMeta(List<Meta> meta)\n+    {\n+        this.meta = meta;\n+    }\n+\n+    public List<Step> getSteps()\n+    {\n+        return steps;\n+    }\n+\n+    public void setSteps(List<Step> steps)\n+    {\n+        this.steps = steps;\n+    }\n+\n+    public Examples getExamples()\n+    {\n+        return examples;\n+    }\n+\n+    public void setExamples(Examples examples)\n+    {\n+        this.examples = examples;\n+    }\n+\n+    public Optional<String> findTestCaseId()\n+    {\n+        return getMetaValuesStream(\"testCaseId\").findFirst();\n+    }\n+\n+    public Set<String> findRequirementIds()\n+    {\n+        return getMetaValues(\"requirementId\");\n+    }\n+\n+    public Set<String> findLabels()\n+    {\n+        return getMetaValues(\"xray.labels\");", "originalCommit": "8518be1f4aea47fd87f3620a60d581ba3e6e3fc1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "289072fab0259a2746645540bb68d1e27d796590", "chunk": "diff --git a/vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Scenario.java b/vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Scenario.java\nindex 0dc18dbaa..1634baf74 100644\n--- a/vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Scenario.java\n+++ b/vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Scenario.java\n\n@@ -16,20 +16,12 @@\n \n package org.vividus.bdd.model.jbehave;\n \n-import java.util.LinkedHashSet;\n import java.util.List;\n import java.util.Objects;\n import java.util.Optional;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-\n-import org.apache.commons.lang3.StringUtils;\n \n public class Scenario\n {\n-    private static final String SEMICOLON = \";\";\n-\n     private String title;\n     private List<Meta> meta;\n     private List<Step> steps;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA2NDAyMA==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r490064020", "bodyText": "it shouldn't be a part of common module vividus-bdd-engine", "author": "valfirst", "createdAt": "2020-09-17T08:27:01Z", "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Scenario.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.model.jbehave;\n+\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+public class Scenario\n+{\n+    private static final String SEMICOLON = \";\";\n+\n+    private String title;\n+    private List<Meta> meta;\n+    private List<Step> steps;\n+    private Examples examples;\n+\n+    public String getTitle()\n+    {\n+        return title;\n+    }\n+\n+    public void setTitle(String title)\n+    {\n+        this.title = title;\n+    }\n+\n+    public List<Meta> getMeta()\n+    {\n+        return meta;\n+    }\n+\n+    public void setMeta(List<Meta> meta)\n+    {\n+        this.meta = meta;\n+    }\n+\n+    public List<Step> getSteps()\n+    {\n+        return steps;\n+    }\n+\n+    public void setSteps(List<Step> steps)\n+    {\n+        this.steps = steps;\n+    }\n+\n+    public Examples getExamples()\n+    {\n+        return examples;\n+    }\n+\n+    public void setExamples(Examples examples)\n+    {\n+        this.examples = examples;\n+    }\n+\n+    public Optional<String> findTestCaseId()\n+    {\n+        return getMetaValuesStream(\"testCaseId\").findFirst();\n+    }\n+\n+    public Set<String> findRequirementIds()\n+    {\n+        return getMetaValues(\"requirementId\");\n+    }\n+\n+    public Set<String> findLabels()\n+    {\n+        return getMetaValues(\"xray.labels\");\n+    }\n+\n+    public Set<String> findComponents()\n+    {\n+        return getMetaValues(\"xray.components\");", "originalCommit": "8518be1f4aea47fd87f3620a60d581ba3e6e3fc1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "289072fab0259a2746645540bb68d1e27d796590", "chunk": "diff --git a/vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Scenario.java b/vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Scenario.java\nindex 0dc18dbaa..1634baf74 100644\n--- a/vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Scenario.java\n+++ b/vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Scenario.java\n\n@@ -16,20 +16,12 @@\n \n package org.vividus.bdd.model.jbehave;\n \n-import java.util.LinkedHashSet;\n import java.util.List;\n import java.util.Objects;\n import java.util.Optional;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-\n-import org.apache.commons.lang3.StringUtils;\n \n public class Scenario\n {\n-    private static final String SEMICOLON = \";\";\n-\n     private String title;\n     private List<Meta> meta;\n     private List<Step> steps;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA2NDU0Mw==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r490064543", "bodyText": "how does it match to JBehave json output?", "author": "valfirst", "createdAt": "2020-09-17T08:27:51Z", "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Step.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.model.jbehave;\n+\n+public class Step\n+{\n+    private String comment;\n+    private String value;", "originalCommit": "8518be1f4aea47fd87f3620a60d581ba3e6e3fc1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDEyMzMwMg==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r490123302", "bodyText": "!-- Comment entry produces\n{\n   \"comment\":\"ignorable\",\n   \"value\":\"!-- Comment\"\n}", "author": "uarlouski", "createdAt": "2020-09-17T10:01:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA2NDU0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAwMjYxMw==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491002613", "bodyText": "JBehave with fix was bumped", "author": "valfirst", "createdAt": "2020-09-18T14:49:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA2NDU0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "7c067220a0e9826c661a6f543d9f014788c868ec", "chunk": "diff --git a/vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Step.java b/vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Step.java\nindex b4fc45660..1bc7f50a9 100644\n--- a/vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Step.java\n+++ b/vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Step.java\n\n@@ -18,17 +18,17 @@ package org.vividus.bdd.model.jbehave;\n \n public class Step\n {\n-    private String comment;\n+    private String outcome;\n     private String value;\n \n-    public String getComment()\n+    public String getOutcome()\n     {\n-        return comment;\n+        return outcome;\n     }\n \n-    public void setComment(String comment)\n+    public void setOutcome(String outcome)\n     {\n-        this.comment = comment;\n+        this.outcome = outcome;\n     }\n \n     public String getValue()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA2NDk3Nw==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r490064977", "bodyText": "please rebase the PR", "author": "valfirst", "createdAt": "2020-09-17T08:28:32Z", "path": "vividus-http-client/src/main/java/org/vividus/http/exception/HttpRequestBuildException.java", "diffHunk": "@@ -16,7 +16,9 @@\n \n package org.vividus.http.exception;\n \n-public class HttpRequestBuildException extends Exception\n+import java.io.IOException;\n+\n+public class HttpRequestBuildException extends IOException", "originalCommit": "8518be1f4aea47fd87f3620a60d581ba3e6e3fc1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA2NjE5MQ==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r490066191", "bodyText": "give meaningful names to properties", "author": "valfirst", "createdAt": "2020-09-17T08:30:31Z", "path": "vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/configuration/ManualTestSerializationFields.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.configuration;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+@ConfigurationProperties(\"databind.fields\")", "originalCommit": "8518be1f4aea47fd87f3620a60d581ba3e6e3fc1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "289072fab0259a2746645540bb68d1e27d796590", "chunk": "diff --git a/vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/configuration/ManualTestSerializationFields.java b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/configuration/JiraFieldsMapping.java\nsimilarity index 93%\nrename from vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/configuration/ManualTestSerializationFields.java\nrename to vividus-to-xray-exporter/src/main/java/org/vividus/xray/configuration/JiraFieldsMapping.java\nindex 5430cac1a..461fccbe7 100644\n--- a/vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/configuration/ManualTestSerializationFields.java\n+++ b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/configuration/JiraFieldsMapping.java\n\n@@ -18,8 +18,8 @@ package org.vividus.xray.configuration;\n \n import org.springframework.boot.context.properties.ConfigurationProperties;\n \n-@ConfigurationProperties(\"databind.fields\")\n-public class ManualTestSerializationFields\n+@ConfigurationProperties(\"jira.fields-mapping\")\n+public class JiraFieldsMapping\n {\n     private String testCaseType;\n     private String manualSteps;\n"}}, {"oid": "289072fab0259a2746645540bb68d1e27d796590", "url": "https://github.com/vividus-framework/vividus/commit/289072fab0259a2746645540bb68d1e27d796590", "message": "Draft", "committedDate": "2020-09-17T11:09:50Z", "type": "forcePushed"}, {"oid": "5e5a56fab40d13cc704661854aa0f658ce299fb4", "url": "https://github.com/vividus-framework/vividus/commit/5e5a56fab40d13cc704661854aa0f658ce299fb4", "message": "Draft", "committedDate": "2020-09-17T11:27:31Z", "type": "forcePushed"}, {"oid": "feaf2cab3f5cb250139b32cbc42347ef959dfb69", "url": "https://github.com/vividus-framework/vividus/commit/feaf2cab3f5cb250139b32cbc42347ef959dfb69", "message": "Draft", "committedDate": "2020-09-17T11:57:51Z", "type": "forcePushed"}, {"oid": "6363fdd11593c7e75aba843a1efe34b13ce1f9a1", "url": "https://github.com/vividus-framework/vividus/commit/6363fdd11593c7e75aba843a1efe34b13ce1f9a1", "message": "Draft", "committedDate": "2020-09-17T12:56:31Z", "type": "forcePushed"}, {"oid": "e938eb09fbdda6c65475f4d6e6d71142fb9c1ba2", "url": "https://github.com/vividus-framework/vividus/commit/e938eb09fbdda6c65475f4d6e6d71142fb9c1ba2", "message": "Draft", "committedDate": "2020-09-17T15:58:15Z", "type": "forcePushed"}, {"oid": "915a65e4bce075b0bc7ead6b5924dc0e937cc689", "url": "https://github.com/vividus-framework/vividus/commit/915a65e4bce075b0bc7ead6b5924dc0e937cc689", "message": "Draft", "committedDate": "2020-09-17T17:46:56Z", "type": "forcePushed"}, {"oid": "9dfcce8eda17c753096033d2b12593bdd880cac7", "url": "https://github.com/vividus-framework/vividus/commit/9dfcce8eda17c753096033d2b12593bdd880cac7", "message": "Draft", "committedDate": "2020-09-17T18:24:27Z", "type": "forcePushed"}, {"oid": "7675489aa3d32f941a042cd60001c307a118f874", "url": "https://github.com/vividus-framework/vividus/commit/7675489aa3d32f941a042cd60001c307a118f874", "message": "Draft", "committedDate": "2020-09-18T06:23:01Z", "type": "forcePushed"}, {"oid": "502bb612b55066de51932eb794790ebf57614721", "url": "https://github.com/vividus-framework/vividus/commit/502bb612b55066de51932eb794790ebf57614721", "message": "Draft", "committedDate": "2020-09-18T07:00:10Z", "type": "forcePushed"}, {"oid": "df9fb7662cc48be7c086be0034157a13f558f042", "url": "https://github.com/vividus-framework/vividus/commit/df9fb7662cc48be7c086be0034157a13f558f042", "message": "Draft", "committedDate": "2020-09-18T08:00:14Z", "type": "forcePushed"}, {"oid": "d758fe83d855fc18911039676e368550158722ce", "url": "https://github.com/vividus-framework/vividus/commit/d758fe83d855fc18911039676e368550158722ce", "message": "Draft", "committedDate": "2020-09-18T10:37:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc3OTAyOQ==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r490779029", "bodyText": "is it used somewhere?", "author": "valfirst", "createdAt": "2020-09-18T08:14:42Z", "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Scenario.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.model.jbehave;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+public class Scenario\n+{\n+    private String title;\n+    private List<Meta> meta;\n+    private List<Step> steps;\n+    private Examples examples;\n+\n+    public String getTitle()\n+    {\n+        return title;\n+    }\n+\n+    public void setTitle(String title)\n+    {\n+        this.title = title;\n+    }\n+\n+    public List<Meta> getMeta()\n+    {\n+        return meta;\n+    }\n+\n+    public void setMeta(List<Meta> meta)\n+    {\n+        this.meta = meta;\n+    }\n+\n+    public List<Step> getSteps()", "originalCommit": "df9fb7662cc48be7c086be0034157a13f558f042", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7c067220a0e9826c661a6f543d9f014788c868ec", "chunk": "diff --git a/vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Scenario.java b/vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Scenario.java\nindex 1634baf74..da2ba1e53 100644\n--- a/vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Scenario.java\n+++ b/vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Scenario.java\n\n@@ -47,11 +47,6 @@ public class Scenario\n         this.meta = meta;\n     }\n \n-    public List<Step> getSteps()\n-    {\n-        return steps;\n-    }\n-\n     public void setSteps(List<Step> steps)\n     {\n         this.steps = steps;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc3OTIwMg==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r490779202", "bodyText": "collectSteps ?", "author": "valfirst", "createdAt": "2020-09-18T08:15:02Z", "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Scenario.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.model.jbehave;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+public class Scenario\n+{\n+    private String title;\n+    private List<Meta> meta;\n+    private List<Step> steps;\n+    private Examples examples;\n+\n+    public String getTitle()\n+    {\n+        return title;\n+    }\n+\n+    public void setTitle(String title)\n+    {\n+        this.title = title;\n+    }\n+\n+    public List<Meta> getMeta()\n+    {\n+        return meta;\n+    }\n+\n+    public void setMeta(List<Meta> meta)\n+    {\n+        this.meta = meta;\n+    }\n+\n+    public List<Step> getSteps()\n+    {\n+        return steps;\n+    }\n+\n+    public void setSteps(List<Step> steps)\n+    {\n+        this.steps = steps;\n+    }\n+\n+    public Examples getExamples()\n+    {\n+        return examples;\n+    }\n+\n+    public void setExamples(Examples examples)\n+    {\n+        this.examples = examples;\n+    }\n+\n+    public List<Step> findScenarioSteps()", "originalCommit": "df9fb7662cc48be7c086be0034157a13f558f042", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7c067220a0e9826c661a6f543d9f014788c868ec", "chunk": "diff --git a/vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Scenario.java b/vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Scenario.java\nindex 1634baf74..da2ba1e53 100644\n--- a/vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Scenario.java\n+++ b/vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Scenario.java\n\n@@ -47,11 +47,6 @@ public class Scenario\n         this.meta = meta;\n     }\n \n-    public List<Step> getSteps()\n-    {\n-        return steps;\n-    }\n-\n     public void setSteps(List<Step> steps)\n     {\n         this.steps = steps;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAwMTY5NA==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491001694", "bodyText": "can't it be just\nprivate List<Example> examples;\n?", "author": "valfirst", "createdAt": "2020-09-18T14:48:24Z", "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Scenario.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.model.jbehave;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+public class Scenario\n+{\n+    private String title;\n+    private List<Meta> meta;\n+    private List<Step> steps;\n+    private Examples examples;", "originalCommit": "d758fe83d855fc18911039676e368550158722ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAzMjE2MQ==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491032161", "bodyText": "Array of objects inside another object must have a key (examples is this case)", "author": "uarlouski", "createdAt": "2020-09-18T15:37:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAwMTY5NA=="}], "type": "inlineReview", "revised_code": {"commit": "7c067220a0e9826c661a6f543d9f014788c868ec", "chunk": "diff --git a/vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Scenario.java b/vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Scenario.java\nindex 1634baf74..da2ba1e53 100644\n--- a/vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Scenario.java\n+++ b/vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Scenario.java\n\n@@ -47,11 +47,6 @@ public class Scenario\n         this.meta = meta;\n     }\n \n-    public List<Step> getSteps()\n-    {\n-        return steps;\n-    }\n-\n     public void setSteps(List<Step> steps)\n     {\n         this.steps = steps;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAzMDU2Mw==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491030563", "bodyText": "Shouldn't it be like CachINGClientCredentialsContextFactory\nI believe able for the interfaces :)", "author": "ikalinin1", "createdAt": "2020-09-18T15:34:55Z", "path": "vividus-http-client/src/main/java/org/vividus/http/context/CacheableClientCredentialsHttpClientContextFactory.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.http.context;\n+\n+import org.apache.http.HttpHost;\n+import org.apache.http.client.AuthCache;\n+import org.apache.http.client.CredentialsProvider;\n+import org.apache.http.client.protocol.HttpClientContext;\n+import org.apache.http.impl.auth.BasicScheme;\n+import org.apache.http.impl.client.BasicAuthCache;\n+import org.vividus.http.client.ClientBuilderUtils;\n+\n+public class CacheableClientCredentialsHttpClientContextFactory implements HttpClientContextFactory", "originalCommit": "d758fe83d855fc18911039676e368550158722ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAzMTU2MA==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491031560", "bodyText": "", "author": "ikalinin1", "createdAt": "2020-09-18T15:36:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAzMDU2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "7c067220a0e9826c661a6f543d9f014788c868ec", "chunk": "diff --git a/vividus-http-client/src/main/java/org/vividus/http/context/CacheableClientCredentialsHttpClientContextFactory.java b/vividus-http-client/src/main/java/org/vividus/http/context/CachingCredentialsHttpContextFactory.java\nsimilarity index 85%\nrename from vividus-http-client/src/main/java/org/vividus/http/context/CacheableClientCredentialsHttpClientContextFactory.java\nrename to vividus-http-client/src/main/java/org/vividus/http/context/CachingCredentialsHttpContextFactory.java\nindex 2e58f90a0..b4fb746e8 100644\n--- a/vividus-http-client/src/main/java/org/vividus/http/context/CacheableClientCredentialsHttpClientContextFactory.java\n+++ b/vividus-http-client/src/main/java/org/vividus/http/context/CachingCredentialsHttpContextFactory.java\n\n@@ -22,14 +22,15 @@ import org.apache.http.client.CredentialsProvider;\n import org.apache.http.client.protocol.HttpClientContext;\n import org.apache.http.impl.auth.BasicScheme;\n import org.apache.http.impl.client.BasicAuthCache;\n+import org.apache.http.protocol.HttpContext;\n import org.vividus.http.client.ClientBuilderUtils;\n \n-public class CacheableClientCredentialsHttpClientContextFactory implements HttpClientContextFactory\n+public class CachingCredentialsHttpContextFactory implements HttpContextFactory\n {\n     private final CredentialsProvider credentialsProvider;\n     private final AuthCache authCache;\n \n-    public CacheableClientCredentialsHttpClientContextFactory(String endpoint, String username, String password)\n+    public CachingCredentialsHttpContextFactory(String endpoint, String username, String password)\n     {\n         this.credentialsProvider = ClientBuilderUtils.createCredentialsProvider(username, password);\n         this.authCache = new BasicAuthCache();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAwMzM3OQ==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491003379", "bodyText": "CachingCredentialsHttp...", "author": "valfirst", "createdAt": "2020-09-18T14:50:41Z", "path": "vividus-http-client/src/main/java/org/vividus/http/context/CacheableClientCredentialsHttpClientContextFactory.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.http.context;\n+\n+import org.apache.http.HttpHost;\n+import org.apache.http.client.AuthCache;\n+import org.apache.http.client.CredentialsProvider;\n+import org.apache.http.client.protocol.HttpClientContext;\n+import org.apache.http.impl.auth.BasicScheme;\n+import org.apache.http.impl.client.BasicAuthCache;\n+import org.vividus.http.client.ClientBuilderUtils;\n+\n+public class CacheableClientCredentialsHttpClientContextFactory implements HttpClientContextFactory", "originalCommit": "d758fe83d855fc18911039676e368550158722ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7c067220a0e9826c661a6f543d9f014788c868ec", "chunk": "diff --git a/vividus-http-client/src/main/java/org/vividus/http/context/CacheableClientCredentialsHttpClientContextFactory.java b/vividus-http-client/src/main/java/org/vividus/http/context/CachingCredentialsHttpContextFactory.java\nsimilarity index 85%\nrename from vividus-http-client/src/main/java/org/vividus/http/context/CacheableClientCredentialsHttpClientContextFactory.java\nrename to vividus-http-client/src/main/java/org/vividus/http/context/CachingCredentialsHttpContextFactory.java\nindex 2e58f90a0..b4fb746e8 100644\n--- a/vividus-http-client/src/main/java/org/vividus/http/context/CacheableClientCredentialsHttpClientContextFactory.java\n+++ b/vividus-http-client/src/main/java/org/vividus/http/context/CachingCredentialsHttpContextFactory.java\n\n@@ -22,14 +22,15 @@ import org.apache.http.client.CredentialsProvider;\n import org.apache.http.client.protocol.HttpClientContext;\n import org.apache.http.impl.auth.BasicScheme;\n import org.apache.http.impl.client.BasicAuthCache;\n+import org.apache.http.protocol.HttpContext;\n import org.vividus.http.client.ClientBuilderUtils;\n \n-public class CacheableClientCredentialsHttpClientContextFactory implements HttpClientContextFactory\n+public class CachingCredentialsHttpContextFactory implements HttpContextFactory\n {\n     private final CredentialsProvider credentialsProvider;\n     private final AuthCache authCache;\n \n-    public CacheableClientCredentialsHttpClientContextFactory(String endpoint, String username, String password)\n+    public CachingCredentialsHttpContextFactory(String endpoint, String username, String password)\n     {\n         this.credentialsProvider = ClientBuilderUtils.createCredentialsProvider(username, password);\n         this.authCache = new BasicAuthCache();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAwNDU4Mw==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491004583", "bodyText": "is HttpClientContext required? isn't HttpContext enough?", "author": "valfirst", "createdAt": "2020-09-18T14:52:38Z", "path": "vividus-http-client/src/main/java/org/vividus/http/context/HttpClientContextFactory.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.http.context;\n+\n+import org.apache.http.client.protocol.HttpClientContext;\n+\n+public interface HttpClientContextFactory\n+{\n+    HttpClientContext create();", "originalCommit": "d758fe83d855fc18911039676e368550158722ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7c067220a0e9826c661a6f543d9f014788c868ec", "chunk": "diff --git a/vividus-http-client/src/main/java/org/vividus/http/context/HttpClientContextFactory.java b/vividus-http-client/src/main/java/org/vividus/http/context/HttpContextFactory.java\nsimilarity index 83%\nrename from vividus-http-client/src/main/java/org/vividus/http/context/HttpClientContextFactory.java\nrename to vividus-http-client/src/main/java/org/vividus/http/context/HttpContextFactory.java\nindex 3a5722419..b7fb64894 100644\n--- a/vividus-http-client/src/main/java/org/vividus/http/context/HttpClientContextFactory.java\n+++ b/vividus-http-client/src/main/java/org/vividus/http/context/HttpContextFactory.java\n\n@@ -16,9 +16,9 @@\n \n package org.vividus.http.context;\n \n-import org.apache.http.client.protocol.HttpClientContext;\n+import org.apache.http.protocol.HttpContext;\n \n-public interface HttpClientContextFactory\n+public interface HttpContextFactory\n {\n-    HttpClientContext create();\n+    HttpContext create();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAxMjgyNA==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491012824", "bodyText": "Do you really need the instance of context? Apache HTTP client supports null", "author": "valfirst", "createdAt": "2020-09-18T15:05:47Z", "path": "vividus-http-client/src/main/java/org/vividus/http/context/DefaultHttpClientContextFactory.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.http.context;\n+\n+import org.apache.http.client.protocol.HttpClientContext;\n+\n+public class DefaultHttpClientContextFactory implements HttpClientContextFactory\n+{\n+    @Override\n+    public HttpClientContext create()\n+    {\n+        return HttpClientContext.create();", "originalCommit": "d758fe83d855fc18911039676e368550158722ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7c067220a0e9826c661a6f543d9f014788c868ec", "chunk": "diff --git a/vividus-http-client/src/main/java/org/vividus/http/context/DefaultHttpClientContextFactory.java b/vividus-http-client/src/main/java/org/vividus/http/context/NopHttpContextFactory.java\nsimilarity index 75%\nrename from vividus-http-client/src/main/java/org/vividus/http/context/DefaultHttpClientContextFactory.java\nrename to vividus-http-client/src/main/java/org/vividus/http/context/NopHttpContextFactory.java\nindex 32cdd93e6..943e17f3c 100644\n--- a/vividus-http-client/src/main/java/org/vividus/http/context/DefaultHttpClientContextFactory.java\n+++ b/vividus-http-client/src/main/java/org/vividus/http/context/NopHttpContextFactory.java\n\n@@ -16,13 +16,13 @@\n \n package org.vividus.http.context;\n \n-import org.apache.http.client.protocol.HttpClientContext;\n+import org.apache.http.protocol.HttpContext;\n \n-public class DefaultHttpClientContextFactory implements HttpClientContextFactory\n+public class NopHttpContextFactory implements HttpContextFactory\n {\n     @Override\n-    public HttpClientContext create()\n+    public HttpContext create()\n     {\n-        return HttpClientContext.create();\n+        return null;\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAxNTgyMA==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491015820", "bodyText": "why is it needed from business point of view?", "author": "valfirst", "createdAt": "2020-09-18T15:10:33Z", "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/configuration/XrayExporterOptions.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.configuration;\n+\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+@ConfigurationProperties(\"xray-exporter\")\n+public class XrayExporterOptions\n+{\n+    private Path sourceDirectory;\n+    private String projectKey;\n+    private List<String> editableStatuses;\n+    private String skipMarker;", "originalCommit": "d758fe83d855fc18911039676e368550158722ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA5NTQ0Mw==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491095443", "bodyText": "discussed to clarify skipping of test cases while import", "author": "uarlouski", "createdAt": "2020-09-18T17:36:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAxNTgyMA=="}], "type": "inlineReview", "revised_code": {"commit": "7c067220a0e9826c661a6f543d9f014788c868ec", "chunk": "diff --git a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/configuration/XrayExporterOptions.java b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/configuration/XrayExporterOptions.java\nindex 530fa6603..80b03d332 100644\n--- a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/configuration/XrayExporterOptions.java\n+++ b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/configuration/XrayExporterOptions.java\n\n@@ -24,19 +24,18 @@ import org.springframework.boot.context.properties.ConfigurationProperties;\n @ConfigurationProperties(\"xray-exporter\")\n public class XrayExporterOptions\n {\n-    private Path sourceDirectory;\n+    private Path jsonResultsDirectory;\n     private String projectKey;\n     private List<String> editableStatuses;\n-    private String skipMarker;\n \n-    public Path getSourceDirectory()\n+    public Path getJsonResultsDirectory()\n     {\n-        return sourceDirectory;\n+        return jsonResultsDirectory;\n     }\n \n-    public void setSourceDirectory(Path sourceDirectory)\n+    public void setJsonResultsDirectory(Path jsonResultsDirectory)\n     {\n-        this.sourceDirectory = sourceDirectory;\n+        this.jsonResultsDirectory = jsonResultsDirectory;\n     }\n \n     public String getProjectKey()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAxNjE1NA==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491016154", "bodyText": "it should be more meaningful", "author": "valfirst", "createdAt": "2020-09-18T15:11:08Z", "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/configuration/XrayExporterOptions.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.configuration;\n+\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+@ConfigurationProperties(\"xray-exporter\")\n+public class XrayExporterOptions\n+{\n+    private Path sourceDirectory;", "originalCommit": "d758fe83d855fc18911039676e368550158722ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7c067220a0e9826c661a6f543d9f014788c868ec", "chunk": "diff --git a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/configuration/XrayExporterOptions.java b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/configuration/XrayExporterOptions.java\nindex 530fa6603..80b03d332 100644\n--- a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/configuration/XrayExporterOptions.java\n+++ b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/configuration/XrayExporterOptions.java\n\n@@ -24,19 +24,18 @@ import org.springframework.boot.context.properties.ConfigurationProperties;\n @ConfigurationProperties(\"xray-exporter\")\n public class XrayExporterOptions\n {\n-    private Path sourceDirectory;\n+    private Path jsonResultsDirectory;\n     private String projectKey;\n     private List<String> editableStatuses;\n-    private String skipMarker;\n \n-    public Path getSourceDirectory()\n+    public Path getJsonResultsDirectory()\n     {\n-        return sourceDirectory;\n+        return jsonResultsDirectory;\n     }\n \n-    public void setSourceDirectory(Path sourceDirectory)\n+    public void setJsonResultsDirectory(Path jsonResultsDirectory)\n     {\n-        this.sourceDirectory = sourceDirectory;\n+        this.jsonResultsDirectory = jsonResultsDirectory;\n     }\n \n     public String getProjectKey()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAxNzk1NA==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491017954", "bodyText": "we already have @requirementId", "author": "valfirst", "createdAt": "2020-09-18T15:14:03Z", "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.exporter;\n+\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.vividus.bdd.model.jbehave.Meta;\n+import org.vividus.bdd.model.jbehave.Scenario;\n+import org.vividus.bdd.model.jbehave.Story;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.xray.configuration.XrayExporterOptions;\n+import org.vividus.xray.facade.XrayFacade;\n+import org.vividus.xray.model.TestCaseParameters;\n+import org.vividus.xray.reader.JsonResourceReader;\n+import org.vividus.xray.reader.JsonResourceReader.FileEntry;\n+\n+@Component\n+public class XrayExporter\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(XrayExporter.class);\n+\n+    private static final String SEMICOLON = \";\";\n+\n+    @Autowired private XrayExporterOptions xrayExporterOptions;\n+    @Autowired private XrayFacade xrayFacade;\n+    @Autowired private JiraFacade jiraFacade;\n+\n+    public void exportResults() throws IOException\n+    {\n+        for (Story story : readStories())\n+        {\n+            for (Scenario scenario : story.getScenarios())\n+            {\n+                String storyTitle = story.getPath();\n+                String scenarioTitle = scenario.getTitle();\n+\n+                List<Meta> scenarioMeta = scenario.getMeta();\n+                String testCaseId = getMetaValuesStream(scenarioMeta, \"testCaseId\").findFirst().orElse(null);\n+                if (testCaseId != null && StringUtils.equalsIgnoreCase(testCaseId, xrayExporterOptions.getSkipMarker()))\n+                {\n+                    LOGGER.atInfo()\n+                          .addArgument(scenarioTitle)\n+                          .addArgument(storyTitle)\n+                          .log(\"Skip export of {} scenario in {} story\");\n+                    continue;\n+                }\n+\n+                TestCaseParameters parameters = new TestCaseParameters();\n+                parameters.setLabels(getMetaValues(scenarioMeta, \"xray.labels\"));\n+                parameters.setComponents(getMetaValues(scenarioMeta, \"xray.components\"));\n+                parameters.setSummary(scenarioTitle);\n+                parameters.setStory(storyTitle);\n+                parameters.setSteps(scenario.findScenarioSteps());\n+\n+                if (testCaseId != null)\n+                {\n+                    updateTestCase(testCaseId, parameters);\n+                }\n+                else\n+                {\n+                    testCaseId = xrayFacade.createTestCase(parameters);\n+                }\n+\n+                for (String requirementId : getMetaValues(scenarioMeta, \"requirementIds\"))", "originalCommit": "d758fe83d855fc18911039676e368550158722ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7c067220a0e9826c661a6f543d9f014788c868ec", "chunk": "diff --git a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java\nindex 8bf718105..0d263f2d5 100644\n--- a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java\n+++ b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java\n\n@@ -19,6 +19,7 @@ package org.vividus.xray.exporter;\n import static org.apache.commons.lang3.Validate.notEmpty;\n \n import java.io.IOException;\n+import java.nio.file.Path;\n import java.util.ArrayList;\n import java.util.LinkedHashSet;\n import java.util.List;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAxOTY4Mg==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491019682", "bodyText": "invalid -> non-editable ?", "author": "valfirst", "createdAt": "2020-09-18T15:16:54Z", "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.exporter;\n+\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.vividus.bdd.model.jbehave.Meta;\n+import org.vividus.bdd.model.jbehave.Scenario;\n+import org.vividus.bdd.model.jbehave.Story;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.xray.configuration.XrayExporterOptions;\n+import org.vividus.xray.facade.XrayFacade;\n+import org.vividus.xray.model.TestCaseParameters;\n+import org.vividus.xray.reader.JsonResourceReader;\n+import org.vividus.xray.reader.JsonResourceReader.FileEntry;\n+\n+@Component\n+public class XrayExporter\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(XrayExporter.class);\n+\n+    private static final String SEMICOLON = \";\";\n+\n+    @Autowired private XrayExporterOptions xrayExporterOptions;\n+    @Autowired private XrayFacade xrayFacade;\n+    @Autowired private JiraFacade jiraFacade;\n+\n+    public void exportResults() throws IOException\n+    {\n+        for (Story story : readStories())\n+        {\n+            for (Scenario scenario : story.getScenarios())\n+            {\n+                String storyTitle = story.getPath();\n+                String scenarioTitle = scenario.getTitle();\n+\n+                List<Meta> scenarioMeta = scenario.getMeta();\n+                String testCaseId = getMetaValuesStream(scenarioMeta, \"testCaseId\").findFirst().orElse(null);\n+                if (testCaseId != null && StringUtils.equalsIgnoreCase(testCaseId, xrayExporterOptions.getSkipMarker()))\n+                {\n+                    LOGGER.atInfo()\n+                          .addArgument(scenarioTitle)\n+                          .addArgument(storyTitle)\n+                          .log(\"Skip export of {} scenario in {} story\");\n+                    continue;\n+                }\n+\n+                TestCaseParameters parameters = new TestCaseParameters();\n+                parameters.setLabels(getMetaValues(scenarioMeta, \"xray.labels\"));\n+                parameters.setComponents(getMetaValues(scenarioMeta, \"xray.components\"));\n+                parameters.setSummary(scenarioTitle);\n+                parameters.setStory(storyTitle);\n+                parameters.setSteps(scenario.findScenarioSteps());\n+\n+                if (testCaseId != null)\n+                {\n+                    updateTestCase(testCaseId, parameters);\n+                }\n+                else\n+                {\n+                    testCaseId = xrayFacade.createTestCase(parameters);\n+                }\n+\n+                for (String requirementId : getMetaValues(scenarioMeta, \"requirementIds\"))\n+                {\n+                    jiraFacade.createIssueLink(testCaseId, requirementId, \"Tests\");\n+                }\n+            }\n+        }\n+    }\n+\n+    private void updateTestCase(String testCaseId, TestCaseParameters parameters) throws IOException\n+    {\n+        String status = jiraFacade.getIssueStatus(testCaseId);\n+\n+        if (xrayExporterOptions.getEditableStatuses().stream()\n+                .noneMatch(s -> StringUtils.equalsIgnoreCase(s, status)))\n+        {\n+            LOGGER.atError().addArgument(testCaseId)\n+                            .addArgument(status)\n+                            .log(\"Issue {} is in invalid '{}' status\");", "originalCommit": "d758fe83d855fc18911039676e368550158722ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7c067220a0e9826c661a6f543d9f014788c868ec", "chunk": "diff --git a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java\nindex 8bf718105..0d263f2d5 100644\n--- a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java\n+++ b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java\n\n@@ -19,6 +19,7 @@ package org.vividus.xray.exporter;\n import static org.apache.commons.lang3.Validate.notEmpty;\n \n import java.io.IOException;\n+import java.nio.file.Path;\n import java.util.ArrayList;\n import java.util.LinkedHashSet;\n import java.util.List;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAyMDU3MA==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491020570", "bodyText": "keep the same naming across the project: Folder -> The directory", "author": "valfirst", "createdAt": "2020-09-18T15:18:20Z", "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.exporter;\n+\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.vividus.bdd.model.jbehave.Meta;\n+import org.vividus.bdd.model.jbehave.Scenario;\n+import org.vividus.bdd.model.jbehave.Story;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.xray.configuration.XrayExporterOptions;\n+import org.vividus.xray.facade.XrayFacade;\n+import org.vividus.xray.model.TestCaseParameters;\n+import org.vividus.xray.reader.JsonResourceReader;\n+import org.vividus.xray.reader.JsonResourceReader.FileEntry;\n+\n+@Component\n+public class XrayExporter\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(XrayExporter.class);\n+\n+    private static final String SEMICOLON = \";\";\n+\n+    @Autowired private XrayExporterOptions xrayExporterOptions;\n+    @Autowired private XrayFacade xrayFacade;\n+    @Autowired private JiraFacade jiraFacade;\n+\n+    public void exportResults() throws IOException\n+    {\n+        for (Story story : readStories())\n+        {\n+            for (Scenario scenario : story.getScenarios())\n+            {\n+                String storyTitle = story.getPath();\n+                String scenarioTitle = scenario.getTitle();\n+\n+                List<Meta> scenarioMeta = scenario.getMeta();\n+                String testCaseId = getMetaValuesStream(scenarioMeta, \"testCaseId\").findFirst().orElse(null);\n+                if (testCaseId != null && StringUtils.equalsIgnoreCase(testCaseId, xrayExporterOptions.getSkipMarker()))\n+                {\n+                    LOGGER.atInfo()\n+                          .addArgument(scenarioTitle)\n+                          .addArgument(storyTitle)\n+                          .log(\"Skip export of {} scenario in {} story\");\n+                    continue;\n+                }\n+\n+                TestCaseParameters parameters = new TestCaseParameters();\n+                parameters.setLabels(getMetaValues(scenarioMeta, \"xray.labels\"));\n+                parameters.setComponents(getMetaValues(scenarioMeta, \"xray.components\"));\n+                parameters.setSummary(scenarioTitle);\n+                parameters.setStory(storyTitle);\n+                parameters.setSteps(scenario.findScenarioSteps());\n+\n+                if (testCaseId != null)\n+                {\n+                    updateTestCase(testCaseId, parameters);\n+                }\n+                else\n+                {\n+                    testCaseId = xrayFacade.createTestCase(parameters);\n+                }\n+\n+                for (String requirementId : getMetaValues(scenarioMeta, \"requirementIds\"))\n+                {\n+                    jiraFacade.createIssueLink(testCaseId, requirementId, \"Tests\");\n+                }\n+            }\n+        }\n+    }\n+\n+    private void updateTestCase(String testCaseId, TestCaseParameters parameters) throws IOException\n+    {\n+        String status = jiraFacade.getIssueStatus(testCaseId);\n+\n+        if (xrayExporterOptions.getEditableStatuses().stream()\n+                .noneMatch(s -> StringUtils.equalsIgnoreCase(s, status)))\n+        {\n+            LOGGER.atError().addArgument(testCaseId)\n+                            .addArgument(status)\n+                            .log(\"Issue {} is in invalid '{}' status\");\n+        }\n+        else\n+        {\n+            xrayFacade.updateTestCase(testCaseId, parameters);\n+        }\n+    }\n+\n+    private List<Story> readStories() throws IOException\n+    {\n+        ObjectMapper objectMapper = new ObjectMapper().configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,\n+                false);\n+\n+        List<Story> stories = new ArrayList<>();\n+        for (FileEntry jsonResult : getJsonResultsFiles())\n+        {\n+            LOGGER.atInfo().addArgument(jsonResult::getPath).log(\"Parsing {}\");\n+            stories.add(objectMapper.readValue(jsonResult.getContent(), Story.class));\n+        }\n+        return stories;\n+    }\n+\n+    private List<FileEntry> getJsonResultsFiles() throws IOException\n+    {\n+        List<FileEntry> jsonFiles = JsonResourceReader.readFrom(xrayExporterOptions.getSourceDirectory());\n+\n+        notEmpty(jsonFiles, \"Folder '%s' does not contain needed json files\",", "originalCommit": "d758fe83d855fc18911039676e368550158722ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7c067220a0e9826c661a6f543d9f014788c868ec", "chunk": "diff --git a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java\nindex 8bf718105..0d263f2d5 100644\n--- a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java\n+++ b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java\n\n@@ -19,6 +19,7 @@ package org.vividus.xray.exporter;\n import static org.apache.commons.lang3.Validate.notEmpty;\n \n import java.io.IOException;\n+import java.nio.file.Path;\n import java.util.ArrayList;\n import java.util.LinkedHashSet;\n import java.util.List;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAyMDc3MA==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491020770", "bodyText": "Json -> JSON", "author": "valfirst", "createdAt": "2020-09-18T15:18:40Z", "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.exporter;\n+\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.vividus.bdd.model.jbehave.Meta;\n+import org.vividus.bdd.model.jbehave.Scenario;\n+import org.vividus.bdd.model.jbehave.Story;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.xray.configuration.XrayExporterOptions;\n+import org.vividus.xray.facade.XrayFacade;\n+import org.vividus.xray.model.TestCaseParameters;\n+import org.vividus.xray.reader.JsonResourceReader;\n+import org.vividus.xray.reader.JsonResourceReader.FileEntry;\n+\n+@Component\n+public class XrayExporter\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(XrayExporter.class);\n+\n+    private static final String SEMICOLON = \";\";\n+\n+    @Autowired private XrayExporterOptions xrayExporterOptions;\n+    @Autowired private XrayFacade xrayFacade;\n+    @Autowired private JiraFacade jiraFacade;\n+\n+    public void exportResults() throws IOException\n+    {\n+        for (Story story : readStories())\n+        {\n+            for (Scenario scenario : story.getScenarios())\n+            {\n+                String storyTitle = story.getPath();\n+                String scenarioTitle = scenario.getTitle();\n+\n+                List<Meta> scenarioMeta = scenario.getMeta();\n+                String testCaseId = getMetaValuesStream(scenarioMeta, \"testCaseId\").findFirst().orElse(null);\n+                if (testCaseId != null && StringUtils.equalsIgnoreCase(testCaseId, xrayExporterOptions.getSkipMarker()))\n+                {\n+                    LOGGER.atInfo()\n+                          .addArgument(scenarioTitle)\n+                          .addArgument(storyTitle)\n+                          .log(\"Skip export of {} scenario in {} story\");\n+                    continue;\n+                }\n+\n+                TestCaseParameters parameters = new TestCaseParameters();\n+                parameters.setLabels(getMetaValues(scenarioMeta, \"xray.labels\"));\n+                parameters.setComponents(getMetaValues(scenarioMeta, \"xray.components\"));\n+                parameters.setSummary(scenarioTitle);\n+                parameters.setStory(storyTitle);\n+                parameters.setSteps(scenario.findScenarioSteps());\n+\n+                if (testCaseId != null)\n+                {\n+                    updateTestCase(testCaseId, parameters);\n+                }\n+                else\n+                {\n+                    testCaseId = xrayFacade.createTestCase(parameters);\n+                }\n+\n+                for (String requirementId : getMetaValues(scenarioMeta, \"requirementIds\"))\n+                {\n+                    jiraFacade.createIssueLink(testCaseId, requirementId, \"Tests\");\n+                }\n+            }\n+        }\n+    }\n+\n+    private void updateTestCase(String testCaseId, TestCaseParameters parameters) throws IOException\n+    {\n+        String status = jiraFacade.getIssueStatus(testCaseId);\n+\n+        if (xrayExporterOptions.getEditableStatuses().stream()\n+                .noneMatch(s -> StringUtils.equalsIgnoreCase(s, status)))\n+        {\n+            LOGGER.atError().addArgument(testCaseId)\n+                            .addArgument(status)\n+                            .log(\"Issue {} is in invalid '{}' status\");\n+        }\n+        else\n+        {\n+            xrayFacade.updateTestCase(testCaseId, parameters);\n+        }\n+    }\n+\n+    private List<Story> readStories() throws IOException\n+    {\n+        ObjectMapper objectMapper = new ObjectMapper().configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,\n+                false);\n+\n+        List<Story> stories = new ArrayList<>();\n+        for (FileEntry jsonResult : getJsonResultsFiles())\n+        {\n+            LOGGER.atInfo().addArgument(jsonResult::getPath).log(\"Parsing {}\");\n+            stories.add(objectMapper.readValue(jsonResult.getContent(), Story.class));\n+        }\n+        return stories;\n+    }\n+\n+    private List<FileEntry> getJsonResultsFiles() throws IOException\n+    {\n+        List<FileEntry> jsonFiles = JsonResourceReader.readFrom(xrayExporterOptions.getSourceDirectory());\n+\n+        notEmpty(jsonFiles, \"Folder '%s' does not contain needed json files\",\n+                xrayExporterOptions.getSourceDirectory());\n+        String jsonFilePaths = jsonFiles.stream().map(FileEntry::getPath).collect(Collectors.joining(\" ,\"));\n+        LOGGER.info(\"Json files: {}\", jsonFilePaths);", "originalCommit": "d758fe83d855fc18911039676e368550158722ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7c067220a0e9826c661a6f543d9f014788c868ec", "chunk": "diff --git a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java\nindex 8bf718105..0d263f2d5 100644\n--- a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java\n+++ b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java\n\n@@ -19,6 +19,7 @@ package org.vividus.xray.exporter;\n import static org.apache.commons.lang3.Validate.notEmpty;\n \n import java.io.IOException;\n+import java.nio.file.Path;\n import java.util.ArrayList;\n import java.util.LinkedHashSet;\n import java.util.List;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAzNTgyNA==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491035824", "bodyText": "why is it needed?", "author": "valfirst", "createdAt": "2020-09-18T15:44:04Z", "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/reader/JsonResourceReader.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.reader;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.util.json.JsonUtils;\n+\n+public final class JsonResourceReader\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(JsonResourceReader.class);\n+\n+    private static final JsonUtils JSON_UTILS = new JsonUtils();\n+\n+    private JsonResourceReader()\n+    {\n+    }\n+\n+    public static List<FileEntry> readFrom(Path sourceDirectory) throws IOException\n+    {\n+        LOGGER.info(\"Starting to import resources from filesystem by path {}\", sourceDirectory);\n+\n+        try (Stream<Path> paths = Files.walk(sourceDirectory))\n+        {\n+            return paths.map(Path::toFile)\n+                        .filter(File::isFile)\n+                        .map(f -> new FileEntry(f.getAbsolutePath(), readFileQuietly(f)))\n+                        .filter(JsonResourceReader::filterJsonFile)\n+                        .collect(Collectors.toList());\n+        }\n+    }\n+\n+    private static boolean filterJsonFile(FileEntry fileEntry)\n+    {\n+        boolean json = JSON_UTILS.isJson(fileEntry.getContent());\n+        if (!json)\n+        {\n+            LOGGER.atInfo().addArgument(fileEntry::getPath).log(\"Content of file '{}' is not JSON\");\n+        }\n+        return json;\n+    }\n+\n+    private static String readFileQuietly(File file)", "originalCommit": "d758fe83d855fc18911039676e368550158722ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA5MDA3Mg==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491090072", "bodyText": "moved try-catch into stream", "author": "uarlouski", "createdAt": "2020-09-18T17:25:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAzNTgyNA=="}], "type": "inlineReview", "revised_code": {"commit": "7c067220a0e9826c661a6f543d9f014788c868ec", "chunk": "diff --git a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/reader/JsonResourceReader.java b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/reader/JsonResourceReader.java\nindex 5b9116e53..97dee38aa 100644\n--- a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/reader/JsonResourceReader.java\n+++ b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/reader/JsonResourceReader.java\n\n@@ -49,7 +49,18 @@ public final class JsonResourceReader\n         {\n             return paths.map(Path::toFile)\n                         .filter(File::isFile)\n-                        .map(f -> new FileEntry(f.getAbsolutePath(), readFileQuietly(f)))\n+                        .map(f ->\n+                        {\n+                            try\n+                            {\n+                                return new FileEntry(f.getAbsolutePath(),\n+                                        FileUtils.readFileToString(f, StandardCharsets.UTF_8));\n+                            }\n+                            catch (IOException e)\n+                            {\n+                                throw new UncheckedIOException(e);\n+                            }\n+                        })\n                         .filter(JsonResourceReader::filterJsonFile)\n                         .collect(Collectors.toList());\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAzNjQ1Mw==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491036453", "bodyText": "java.nio.file.Files#readString(java.nio.file.Path) ?", "author": "valfirst", "createdAt": "2020-09-18T15:45:06Z", "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/reader/JsonResourceReader.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.reader;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.util.json.JsonUtils;\n+\n+public final class JsonResourceReader\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(JsonResourceReader.class);\n+\n+    private static final JsonUtils JSON_UTILS = new JsonUtils();\n+\n+    private JsonResourceReader()\n+    {\n+    }\n+\n+    public static List<FileEntry> readFrom(Path sourceDirectory) throws IOException\n+    {\n+        LOGGER.info(\"Starting to import resources from filesystem by path {}\", sourceDirectory);\n+\n+        try (Stream<Path> paths = Files.walk(sourceDirectory))\n+        {\n+            return paths.map(Path::toFile)\n+                        .filter(File::isFile)\n+                        .map(f -> new FileEntry(f.getAbsolutePath(), readFileQuietly(f)))\n+                        .filter(JsonResourceReader::filterJsonFile)\n+                        .collect(Collectors.toList());\n+        }\n+    }\n+\n+    private static boolean filterJsonFile(FileEntry fileEntry)\n+    {\n+        boolean json = JSON_UTILS.isJson(fileEntry.getContent());\n+        if (!json)\n+        {\n+            LOGGER.atInfo().addArgument(fileEntry::getPath).log(\"Content of file '{}' is not JSON\");\n+        }\n+        return json;\n+    }\n+\n+    private static String readFileQuietly(File file)\n+    {\n+        try\n+        {\n+            return FileUtils.readFileToString(file, StandardCharsets.UTF_8);", "originalCommit": "d758fe83d855fc18911039676e368550158722ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA5NDAwMA==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491094000", "bodyText": "java.nio.file.Files#readString(java.nio.file.Path) fails if we try to read non-text file like pdf, we could\n\nexpand JsonUtils.isJson to work with bytes\nor\nadd tika into class path to detect whether it's proper file", "author": "uarlouski", "createdAt": "2020-09-18T17:33:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAzNjQ1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "7c067220a0e9826c661a6f543d9f014788c868ec", "chunk": "diff --git a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/reader/JsonResourceReader.java b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/reader/JsonResourceReader.java\nindex 5b9116e53..97dee38aa 100644\n--- a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/reader/JsonResourceReader.java\n+++ b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/reader/JsonResourceReader.java\n\n@@ -49,7 +49,18 @@ public final class JsonResourceReader\n         {\n             return paths.map(Path::toFile)\n                         .filter(File::isFile)\n-                        .map(f -> new FileEntry(f.getAbsolutePath(), readFileQuietly(f)))\n+                        .map(f ->\n+                        {\n+                            try\n+                            {\n+                                return new FileEntry(f.getAbsolutePath(),\n+                                        FileUtils.readFileToString(f, StandardCharsets.UTF_8));\n+                            }\n+                            catch (IOException e)\n+                            {\n+                                throw new UncheckedIOException(e);\n+                            }\n+                        })\n                         .filter(JsonResourceReader::filterJsonFile)\n                         .collect(Collectors.toList());\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAzNzk3Mw==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491037973", "bodyText": "this class is not a part of XRay model", "author": "valfirst", "createdAt": "2020-09-18T15:47:36Z", "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/model/TestCaseParameters.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.model;", "originalCommit": "d758fe83d855fc18911039676e368550158722ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7c067220a0e9826c661a6f543d9f014788c868ec", "chunk": "diff --git a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/model/TestCaseParameters.java b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/facade/TestCaseParameters.java\nsimilarity index 98%\nrename from vividus-to-xray-exporter/src/main/java/org/vividus/xray/model/TestCaseParameters.java\nrename to vividus-to-xray-exporter/src/main/java/org/vividus/xray/facade/TestCaseParameters.java\nindex 8857d412b..7b17ab923 100644\n--- a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/model/TestCaseParameters.java\n+++ b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/facade/TestCaseParameters.java\n\n@@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package org.vividus.xray.model;\n+package org.vividus.xray.facade;\n \n import java.util.List;\n import java.util.Set;\n"}}, {"oid": "7c067220a0e9826c661a6f543d9f014788c868ec", "url": "https://github.com/vividus-framework/vividus/commit/7c067220a0e9826c661a6f543d9f014788c868ec", "message": "Draft", "committedDate": "2020-09-18T17:21:18Z", "type": "forcePushed"}, {"oid": "8a410b2cc0d6fb4d87754b8655a986d1de38d980", "url": "https://github.com/vividus-framework/vividus/commit/8a410b2cc0d6fb4d87754b8655a986d1de38d980", "message": "Draft", "committedDate": "2020-09-18T17:48:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTM0NzY5MA==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491347690", "bodyText": "Nop... -> Noop...", "author": "valfirst", "createdAt": "2020-09-19T09:23:12Z", "path": "vividus-http-client/src/main/java/org/vividus/http/context/NopHttpContextFactory.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.http.context;\n+\n+import org.apache.http.protocol.HttpContext;\n+\n+public class NopHttpContextFactory implements HttpContextFactory", "originalCommit": "8a410b2cc0d6fb4d87754b8655a986d1de38d980", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b7572ecfca2806827525ec2956a9f82093c31f9f", "chunk": "diff --git a/vividus-http-client/src/main/java/org/vividus/http/context/NopHttpContextFactory.java b/vividus-http-client/src/main/java/org/vividus/http/context/NoopHttpContextFactory.java\nsimilarity index 92%\nrename from vividus-http-client/src/main/java/org/vividus/http/context/NopHttpContextFactory.java\nrename to vividus-http-client/src/main/java/org/vividus/http/context/NoopHttpContextFactory.java\nindex 943e17f3c..7a345f3cd 100644\n--- a/vividus-http-client/src/main/java/org/vividus/http/context/NopHttpContextFactory.java\n+++ b/vividus-http-client/src/main/java/org/vividus/http/context/NoopHttpContextFactory.java\n\n@@ -18,7 +18,7 @@ package org.vividus.http.context;\n \n import org.apache.http.protocol.HttpContext;\n \n-public class NopHttpContextFactory implements HttpContextFactory\n+public class NoopHttpContextFactory implements HttpContextFactory\n {\n     @Override\n     public HttpContext create()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTM0OTU2Mg==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491349562", "bodyText": "issueKey -> inwardIssueKey\nrequirementKey -> outwardIssueKey", "author": "valfirst", "createdAt": "2020-09-19T09:28:56Z", "path": "vividus-to-xray-exporter/src/main/java/org/vividus/jira/JiraFacade.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.jira;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.vividus.jira.model.IssueLink;\n+import org.vividus.util.json.JsonPathUtils;\n+\n+public class JiraFacade\n+{\n+    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+\n+    private static final String ISSUE_ENDPOINT = \"/rest/api/latest/issue/\";\n+\n+    private final JiraClient jiraClient;\n+\n+    public JiraFacade(JiraClient jiraClient)\n+    {\n+        this.jiraClient = jiraClient;\n+    }\n+\n+    public String createIssue(String issueBody) throws IOException\n+    {\n+        return jiraClient.executePost(ISSUE_ENDPOINT, issueBody);\n+    }\n+\n+    public String updateIssue(String issueKey, String issueBody) throws IOException\n+    {\n+        return jiraClient.executePut(ISSUE_ENDPOINT + issueKey, issueBody);\n+    }\n+\n+    public void createIssueLink(String issueKey, String requirementKey, String type) throws IOException", "originalCommit": "8a410b2cc0d6fb4d87754b8655a986d1de38d980", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b7572ecfca2806827525ec2956a9f82093c31f9f", "chunk": "diff --git a/vividus-to-xray-exporter/src/main/java/org/vividus/jira/JiraFacade.java b/vividus-to-xray-exporter/src/main/java/org/vividus/jira/JiraFacade.java\nindex f3fb11d84..0f67f34ff 100644\n--- a/vividus-to-xray-exporter/src/main/java/org/vividus/jira/JiraFacade.java\n+++ b/vividus-to-xray-exporter/src/main/java/org/vividus/jira/JiraFacade.java\n\n@@ -46,11 +46,11 @@ public class JiraFacade\n         return jiraClient.executePut(ISSUE_ENDPOINT + issueKey, issueBody);\n     }\n \n-    public void createIssueLink(String issueKey, String requirementKey, String type) throws IOException\n+    public void createIssueLink(String inwardIssueKey, String outwardIssueKey, String type) throws IOException\n     {\n-        IssueLink issueLink = new IssueLink(type, issueKey, requirementKey);\n-        String addLinkRequest = OBJECT_MAPPER.writeValueAsString(issueLink);\n-        jiraClient.executePost(\"/rest/api/latest/issueLink\", addLinkRequest);\n+        IssueLink issueLink = new IssueLink(type, inwardIssueKey, outwardIssueKey);\n+        String createLinkRequest = OBJECT_MAPPER.writeValueAsString(issueLink);\n+        jiraClient.executePost(\"/rest/api/latest/issueLink\", createLinkRequest);\n     }\n \n     public String getIssueStatus(String issueKey) throws IOException\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTM1MDEyMw==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491350123", "bodyText": "XrayForJira -> Xray", "author": "valfirst", "createdAt": "2020-09-19T09:30:26Z", "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/VividusToXrayForJiraExporterApplication.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray;\n+\n+import java.io.IOException;\n+import java.util.Properties;\n+import java.util.stream.Stream;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.ImportResource;\n+import org.springframework.core.env.ConfigurableEnvironment;\n+import org.springframework.core.env.MapPropertySource;\n+import org.vividus.util.property.PropertyParser;\n+import org.vividus.xray.configuration.JiraFieldsMapping;\n+import org.vividus.xray.configuration.XrayExporterOptions;\n+import org.vividus.xray.exporter.XrayExporter;\n+\n+@SpringBootApplication\n+@ImportResource(locations = { \"org/vividus/jira/spring.xml\", \"org/vividus/http/client/spring.xml\" })\n+@EnableConfigurationProperties({ XrayExporterOptions.class, JiraFieldsMapping.class })\n+public class VividusToXrayForJiraExporterApplication", "originalCommit": "8a410b2cc0d6fb4d87754b8655a986d1de38d980", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b7572ecfca2806827525ec2956a9f82093c31f9f", "chunk": "diff --git a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/VividusToXrayForJiraExporterApplication.java b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/VividusToXrayExporterApplication.java\nsimilarity index 96%\nrename from vividus-to-xray-exporter/src/main/java/org/vividus/xray/VividusToXrayForJiraExporterApplication.java\nrename to vividus-to-xray-exporter/src/main/java/org/vividus/xray/VividusToXrayExporterApplication.java\nindex d5c143464..909f7cdac 100644\n--- a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/VividusToXrayForJiraExporterApplication.java\n+++ b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/VividusToXrayExporterApplication.java\n\n@@ -36,11 +36,11 @@ import org.vividus.xray.exporter.XrayExporter;\n @SpringBootApplication\n @ImportResource(locations = { \"org/vividus/jira/spring.xml\", \"org/vividus/http/client/spring.xml\" })\n @EnableConfigurationProperties({ XrayExporterOptions.class, JiraFieldsMapping.class })\n-public class VividusToXrayForJiraExporterApplication\n+public class VividusToXrayExporterApplication\n {\n     public static void main(String[] args) throws IOException\n     {\n-        ApplicationContext context = SpringApplication.run(VividusToXrayForJiraExporterApplication.class, args);\n+        ApplicationContext context = SpringApplication.run(VividusToXrayExporterApplication.class, args);\n         context.getBean(XrayExporter.class).exportResults();\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTM1MDg1Mw==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491350853", "bodyText": "just do not use streams", "author": "valfirst", "createdAt": "2020-09-19T09:32:29Z", "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/reader/JsonResourceReader.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.reader;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.util.json.JsonUtils;\n+\n+public final class JsonResourceReader\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(JsonResourceReader.class);\n+\n+    private static final JsonUtils JSON_UTILS = new JsonUtils();\n+\n+    private JsonResourceReader()\n+    {\n+    }\n+\n+    public static List<FileEntry> readFrom(Path sourceDirectory) throws IOException\n+    {\n+        LOGGER.info(\"Starting to import resources from filesystem by path {}\", sourceDirectory);\n+\n+        try (Stream<Path> paths = Files.walk(sourceDirectory))\n+        {\n+            return paths.map(Path::toFile)\n+                        .filter(File::isFile)\n+                        .map(f ->\n+                        {\n+                            try\n+                            {\n+                                return new FileEntry(f.getAbsolutePath(),\n+                                        FileUtils.readFileToString(f, StandardCharsets.UTF_8));\n+                            }\n+                            catch (IOException e)\n+                            {\n+                                throw new UncheckedIOException(e);", "originalCommit": "8a410b2cc0d6fb4d87754b8655a986d1de38d980", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTM1NDk0Ng==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491354946", "bodyText": "streams is all what I have :(", "author": "uarlouski", "createdAt": "2020-09-19T09:45:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTM1MDg1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "b7572ecfca2806827525ec2956a9f82093c31f9f", "chunk": "diff --git a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/reader/JsonResourceReader.java b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/reader/JsonResourceReader.java\nindex 97dee38aa..6533490eb 100644\n--- a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/reader/JsonResourceReader.java\n+++ b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/reader/JsonResourceReader.java\n\n@@ -18,13 +18,13 @@ package org.vividus.xray.reader;\n \n import java.io.File;\n import java.io.IOException;\n-import java.io.UncheckedIOException;\n import java.nio.charset.StandardCharsets;\n import java.nio.file.Files;\n+import java.nio.file.LinkOption;\n import java.nio.file.Path;\n+import java.util.ArrayList;\n import java.util.List;\n import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n \n import org.apache.commons.io.FileUtils;\n import org.slf4j.Logger;\n"}}, {"oid": "b7572ecfca2806827525ec2956a9f82093c31f9f", "url": "https://github.com/vividus-framework/vividus/commit/b7572ecfca2806827525ec2956a9f82093c31f9f", "message": "Draft", "committedDate": "2020-09-19T11:14:18Z", "type": "forcePushed"}, {"oid": "4e20f4063abe82c3e6f3a8be922e6b60e6a292df", "url": "https://github.com/vividus-framework/vividus/commit/4e20f4063abe82c3e6f3a8be922e6b60e6a292df", "message": "Draft", "committedDate": "2020-09-19T12:52:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY3MjA3OQ==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491672079", "bodyText": "SQ proposes to use anyMatch", "author": "valfirst", "createdAt": "2020-09-20T09:21:00Z", "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.exporter;\n+\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.vividus.bdd.model.jbehave.Meta;\n+import org.vividus.bdd.model.jbehave.Scenario;\n+import org.vividus.bdd.model.jbehave.Story;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.xray.configuration.XrayExporterOptions;\n+import org.vividus.xray.facade.TestCaseParameters;\n+import org.vividus.xray.facade.XrayFacade;\n+import org.vividus.xray.reader.JsonResourceReader;\n+import org.vividus.xray.reader.JsonResourceReader.FileEntry;\n+\n+@Component\n+public class XrayExporter\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(XrayExporter.class);\n+\n+    private static final String SEMICOLON = \";\";\n+\n+    @Autowired private XrayExporterOptions xrayExporterOptions;\n+    @Autowired private XrayFacade xrayFacade;\n+    @Autowired private JiraFacade jiraFacade;\n+\n+    public void exportResults() throws IOException\n+    {\n+        for (Story story : readStories())\n+        {\n+            for (Scenario scenario : story.getScenarios())\n+            {\n+                String storyTitle = story.getPath();\n+                String scenarioTitle = scenario.getTitle();\n+\n+                List<Meta> scenarioMeta = scenario.getMeta();\n+                if (isSkipped(scenarioMeta))\n+                {\n+                    LOGGER.atInfo()\n+                          .addArgument(scenarioTitle)\n+                          .addArgument(storyTitle)\n+                          .log(\"Skip export of {} scenario in {} story\");\n+                    continue;\n+                }\n+\n+                TestCaseParameters parameters = new TestCaseParameters();\n+                parameters.setLabels(getMetaValues(scenarioMeta, \"xray.labels\"));\n+                parameters.setComponents(getMetaValues(scenarioMeta, \"xray.components\"));\n+                parameters.setSummary(scenarioTitle);\n+                parameters.setStory(storyTitle);\n+                parameters.setSteps(scenario.collectSteps());\n+\n+                String testCaseId = getMetaValuesStream(scenarioMeta, \"testCaseId\").findFirst().orElse(null);\n+                if (testCaseId != null)\n+                {\n+                    updateTestCase(testCaseId, parameters);\n+                }\n+                else\n+                {\n+                    testCaseId = xrayFacade.createTestCase(parameters);\n+                }\n+\n+                for (String requirementId : getMetaValues(scenarioMeta, \"requirementId\"))\n+                {\n+                    jiraFacade.createIssueLink(testCaseId, requirementId, \"Tests\");\n+                }\n+            }\n+        }\n+    }\n+\n+    private void updateTestCase(String testCaseId, TestCaseParameters parameters) throws IOException\n+    {\n+        String status = jiraFacade.getIssueStatus(testCaseId);\n+\n+        if (xrayExporterOptions.getEditableStatuses().stream()\n+                .noneMatch(s -> StringUtils.equalsIgnoreCase(s, status)))\n+        {\n+            LOGGER.atError().addArgument(testCaseId)\n+                            .addArgument(status)\n+                            .log(\"Issue {} is in non-editable '{}' status\");\n+        }\n+        else\n+        {\n+            xrayFacade.updateTestCase(testCaseId, parameters);\n+        }\n+    }\n+\n+    private List<Story> readStories() throws IOException\n+    {\n+        ObjectMapper objectMapper = new ObjectMapper().configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,\n+                false);\n+\n+        List<Story> stories = new ArrayList<>();\n+        for (FileEntry jsonResult : getJsonResultsFiles())\n+        {\n+            LOGGER.atInfo().addArgument(jsonResult::getPath).log(\"Parsing {}\");\n+            stories.add(objectMapper.readValue(jsonResult.getContent(), Story.class));\n+        }\n+        return stories;\n+    }\n+\n+    private List<FileEntry> getJsonResultsFiles() throws IOException\n+    {\n+        Path jsonResiltsDirectory = xrayExporterOptions.getJsonResultsDirectory();\n+        List<FileEntry> jsonFiles = JsonResourceReader.readFrom(jsonResiltsDirectory);\n+\n+        notEmpty(jsonFiles, \"The directory '%s' does not contain needed json files\", jsonResiltsDirectory);\n+        String jsonFilePaths = jsonFiles.stream().map(FileEntry::getPath).collect(Collectors.joining(\" ,\"));\n+        LOGGER.atInfo().addArgument(jsonFilePaths).log(\"JSON files: {}\");\n+        return jsonFiles;\n+    }\n+\n+    private static Set<String> getMetaValues(List<Meta> scenarioMeta, String metaName)\n+    {\n+        return getMetaValuesStream(scenarioMeta, metaName).collect(Collectors.toCollection(LinkedHashSet::new));\n+    }\n+\n+    private static Stream<String> getMetaValuesStream(List<Meta> scenarioMeta, String metaName)\n+    {\n+        return asStream(scenarioMeta).filter(m -> metaName.equals(m.getName()) && !m.getValue().isEmpty())\n+                                     .map(Meta::getValue)\n+                                     .map(String::trim)\n+                                     .map(value -> StringUtils.splitPreserveAllTokens(value, SEMICOLON))\n+                                     .flatMap(Stream::of)\n+                                     .map(String::trim);\n+    }\n+\n+    private static boolean isSkipped(List<Meta> scenarioMeta)\n+    {\n+        return asStream(scenarioMeta).filter(m -> \"xray.skip-export\".equals(m.getName()))\n+                                     .findFirst()\n+                                     .isPresent();", "originalCommit": "4e20f4063abe82c3e6f3a8be922e6b60e6a292df", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2ea27ddd4faac7d2b1e80ccf984b6a96fa530048", "chunk": "diff --git a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java\nindex e3b03a5e4..867e4deae 100644\n--- a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java\n+++ b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java\n\n@@ -16,6 +16,7 @@\n \n package org.vividus.xray.exporter;\n \n+import static org.apache.commons.lang3.Validate.isTrue;\n import static org.apache.commons.lang3.Validate.notEmpty;\n \n import java.io.IOException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY3Mjc0OA==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491672748", "bodyText": "return \"Error:\" + lineSeparator() + \"Story: \" + storyTitle  + lineSeparator() + \"Scenario: \" + scenarioTitle + lineSeparator() + FORMAT_MESSAGE", "author": "valfirst", "createdAt": "2020-09-20T09:28:20Z", "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/converter/ManualStepConverter.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.converter;\n+\n+import static java.lang.System.lineSeparator;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.RegExUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.stereotype.Component;\n+import org.vividus.bdd.model.jbehave.Step;\n+import org.vividus.xray.model.ManualTestStep;\n+\n+@Component\n+public class ManualStepConverter\n+{\n+    private static final int DOTALL_MULTILINE_MODE = Pattern.DOTALL | Pattern.MULTILINE;\n+\n+    private static final String STEP_SIGN = \"Step:\";\n+    private static final String DATA_SIGN = \"Data:\";\n+    private static final String RESULT_SIGN = \"Result:\";\n+\n+    private static final String ERROR_MESSAGE = \"Error:%nStory: %s%nScenario: %s\";\n+    private static final String FORMAT_MESSAGE =  \"Manual scenario rules:\" + lineSeparator()\n+        + \"1. Manual scenario entries must be prepended with '!-- ' sequence\" + lineSeparator()\n+        + \"2. '\" + STEP_SIGN + \"' designator is required to be the first one in the manual step block\" + lineSeparator()\n+        + \"3. '\" + DATA_SIGN + \"' and '\" + RESULT_SIGN + \"' designators are optional\"  + lineSeparator()\n+        + \"4. '\" + STEP_SIGN + \"' designator is mandatory\" + lineSeparator();\n+\n+    private static final Pattern STEP_BLOCK_PATTERN = Pattern.compile(String.format(\"%1$s.*?(?=^%1$s|\\\\Z)\", STEP_SIGN),\n+            DOTALL_MULTILINE_MODE);\n+\n+    private static final String REQUIRED_PART_FORMAT = \"\\\\A%s(.*?)(?=^%s|^%s|\\\\Z)\";\n+    private static final String OPTIONAL_PARTS_FORMAT = \"^%s(.*?)(?=^%s|^%s|\\\\Z)\";\n+\n+    private static final Pattern STEP_PATTERN = Pattern\n+            .compile(String.format(REQUIRED_PART_FORMAT, STEP_SIGN, DATA_SIGN, RESULT_SIGN), DOTALL_MULTILINE_MODE);\n+    private static final Pattern DATA_PATTERN = Pattern\n+            .compile(String.format(OPTIONAL_PARTS_FORMAT, DATA_SIGN, DATA_SIGN, RESULT_SIGN), DOTALL_MULTILINE_MODE);\n+    private static final Pattern RESULT_PATTERN = Pattern\n+            .compile(String.format(OPTIONAL_PARTS_FORMAT, RESULT_SIGN, RESULT_SIGN, DATA_SIGN), DOTALL_MULTILINE_MODE);\n+\n+    public List<ManualTestStep> convert(String storyTitle, String scenarioTitle, List<Step> steps)\n+    {\n+        boolean checkPrefix = steps.stream()\n+                                   .map(Step::getOutcome)\n+                                   .allMatch(\"comment\"::equals);\n+\n+        if (!checkPrefix)\n+        {\n+            throw new ManualStepConversionException(getErrorMessage(storyTitle, scenarioTitle));\n+        }\n+\n+        String manualScenario = steps.stream().map(Step::getValue)\n+                .map(v -> RegExUtils.replaceAll(v, \"!--\\\\s*-?\\\\s*\", StringUtils.EMPTY))\n+                .collect(Collectors.joining(lineSeparator()));\n+\n+        if (!manualScenario.startsWith(STEP_SIGN))\n+        {\n+            throw new ManualStepConversionException(getErrorMessage(storyTitle, scenarioTitle));\n+        }\n+\n+        List<ManualTestStep> manualSteps = new ArrayList<>();\n+        Matcher stepMatcher = STEP_BLOCK_PATTERN.matcher(manualScenario);\n+        while (stepMatcher.find())\n+        {\n+            String stepBlock = stepMatcher.group();\n+            String step = extractFirstByPattern(STEP_PATTERN, stepBlock, STEP_SIGN);\n+            ManualTestStep manualTestStep = new ManualTestStep(step);\n+            extractFirstByPattern(DATA_PATTERN, stepBlock, DATA_SIGN, manualTestStep::setData);\n+            extractFirstByPattern(RESULT_PATTERN, stepBlock, RESULT_SIGN, manualTestStep::setExpectedResult);\n+            manualSteps.add(manualTestStep);\n+        }\n+        return manualSteps;\n+    }\n+\n+    private static String extractFirstByPattern(Pattern pattern, String data, String target)\n+    {\n+        Matcher matcher = pattern.matcher(data);\n+        if (matcher.find())\n+        {\n+            String matched = matcher.group(1);\n+            if (matcher.find())\n+            {\n+                throw new ManualStepConversionException(\n+                        String.format(\"Only one %s is expected to be present in the data\", target));\n+            }\n+            return matched.strip();\n+        }\n+        return null;\n+    }\n+\n+    private static void extractFirstByPattern(Pattern pattern, String data, String target,\n+            Consumer<String> valueConsumer)\n+    {\n+        Optional.ofNullable(extractFirstByPattern(pattern, data, target)).ifPresent(valueConsumer);\n+    }\n+\n+    private static String getErrorMessage(String storyTitle, String scenarioTitle)\n+    {\n+        String header = String.format(ERROR_MESSAGE, storyTitle, scenarioTitle);\n+        return header + lineSeparator() + FORMAT_MESSAGE;", "originalCommit": "4e20f4063abe82c3e6f3a8be922e6b60e6a292df", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2ea27ddd4faac7d2b1e80ccf984b6a96fa530048", "chunk": "diff --git a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/converter/ManualStepConverter.java b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/converter/ManualStepConverter.java\nindex ccb0054dd..32667a330 100644\n--- a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/converter/ManualStepConverter.java\n+++ b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/converter/ManualStepConverter.java\n\n@@ -41,7 +41,6 @@ public class ManualStepConverter\n     private static final String DATA_SIGN = \"Data:\";\n     private static final String RESULT_SIGN = \"Result:\";\n \n-    private static final String ERROR_MESSAGE = \"Error:%nStory: %s%nScenario: %s\";\n     private static final String FORMAT_MESSAGE =  \"Manual scenario rules:\" + lineSeparator()\n         + \"1. Manual scenario entries must be prepended with '!-- ' sequence\" + lineSeparator()\n         + \"2. '\" + STEP_SIGN + \"' designator is required to be the first one in the manual step block\" + lineSeparator()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY3Mjk0Mg==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491672942", "bodyText": "Starting import of resources...", "author": "valfirst", "createdAt": "2020-09-20T09:30:23Z", "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/reader/JsonResourceReader.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.reader;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.util.json.JsonUtils;\n+\n+public final class JsonResourceReader\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(JsonResourceReader.class);\n+\n+    private static final JsonUtils JSON_UTILS = new JsonUtils();\n+\n+    private JsonResourceReader()\n+    {\n+    }\n+\n+    public static List<FileEntry> readFrom(Path sourceDirectory) throws IOException\n+    {\n+        LOGGER.atInfo().addArgument(sourceDirectory).log(\"Starting to import resources from filesystem by path {}\");", "originalCommit": "4e20f4063abe82c3e6f3a8be922e6b60e6a292df", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2ea27ddd4faac7d2b1e80ccf984b6a96fa530048", "chunk": "diff --git a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/reader/JsonResourceReader.java b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/reader/JsonResourceReader.java\nindex dc733799e..86e5b2a55 100644\n--- a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/reader/JsonResourceReader.java\n+++ b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/reader/JsonResourceReader.java\n\n@@ -43,7 +43,7 @@ public final class JsonResourceReader\n \n     public static List<FileEntry> readFrom(Path sourceDirectory) throws IOException\n     {\n-        LOGGER.atInfo().addArgument(sourceDirectory).log(\"Starting to import resources from filesystem by path {}\");\n+        LOGGER.atInfo().addArgument(sourceDirectory).log(\"Reading JSON files from filesystem by path {}\");\n \n         List<FileEntry> fileEntries = new ArrayList<>();\n         try (Stream<Path> paths = Files.walk(sourceDirectory))\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY3Mjk4OA==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491672988", "bodyText": "If start of something is logged, then we should log ending as well", "author": "valfirst", "createdAt": "2020-09-20T09:30:49Z", "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/reader/JsonResourceReader.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.reader;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.util.json.JsonUtils;\n+\n+public final class JsonResourceReader\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(JsonResourceReader.class);\n+\n+    private static final JsonUtils JSON_UTILS = new JsonUtils();\n+\n+    private JsonResourceReader()\n+    {\n+    }\n+\n+    public static List<FileEntry> readFrom(Path sourceDirectory) throws IOException\n+    {\n+        LOGGER.atInfo().addArgument(sourceDirectory).log(\"Starting to import resources from filesystem by path {}\");", "originalCommit": "4e20f4063abe82c3e6f3a8be922e6b60e6a292df", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2ea27ddd4faac7d2b1e80ccf984b6a96fa530048", "chunk": "diff --git a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/reader/JsonResourceReader.java b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/reader/JsonResourceReader.java\nindex dc733799e..86e5b2a55 100644\n--- a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/reader/JsonResourceReader.java\n+++ b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/reader/JsonResourceReader.java\n\n@@ -43,7 +43,7 @@ public final class JsonResourceReader\n \n     public static List<FileEntry> readFrom(Path sourceDirectory) throws IOException\n     {\n-        LOGGER.atInfo().addArgument(sourceDirectory).log(\"Starting to import resources from filesystem by path {}\");\n+        LOGGER.atInfo().addArgument(sourceDirectory).log(\"Reading JSON files from filesystem by path {}\");\n \n         List<FileEntry> fileEntries = new ArrayList<>();\n         try (Stream<Path> paths = Files.walk(sourceDirectory))\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY3MzEzMQ==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491673131", "bodyText": "I recommend to replace the mock with actual instance of the class", "author": "valfirst", "createdAt": "2020-09-20T09:33:03Z", "path": "vividus-to-xray-exporter/src/test/java/org/vividus/xray/facade/XrayFacadeTests.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.facade;\n+\n+import static com.github.valfirst.slf4jtest.LoggingEvent.info;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.IOException;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.github.valfirst.slf4jtest.TestLogger;\n+import com.github.valfirst.slf4jtest.TestLoggerFactory;\n+import com.github.valfirst.slf4jtest.TestLoggerFactoryExtension;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.vividus.bdd.model.jbehave.Step;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.xray.configuration.XrayExporterOptions;\n+import org.vividus.xray.converter.ManualStepConverter;\n+import org.vividus.xray.databind.ManualTestCaseSerializer;\n+import org.vividus.xray.model.ManualTestCase;\n+import org.vividus.xray.model.ManualTestStep;\n+\n+@ExtendWith({ MockitoExtension.class, TestLoggerFactoryExtension.class })\n+class XrayFacadeTests\n+{\n+    private static final String ISSUE_ID = \"issue id\";\n+    private static final String BODY = \"{}\";\n+    private static final String STORY_TITLE = \"storyTitle\";\n+    private static final String SCENARIO_TITLE = \"scenarioTitle\";\n+    private static final String PROJECT_KEY = \"project key\";\n+\n+    @Captor private ArgumentCaptor<ManualTestCase> manualTestCaseCaptor;\n+\n+    @Mock private ManualTestCaseSerializer manualTestSerializer;\n+    @Mock private XrayExporterOptions xrayExporterOptions;", "originalCommit": "4e20f4063abe82c3e6f3a8be922e6b60e6a292df", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2ea27ddd4faac7d2b1e80ccf984b6a96fa530048", "chunk": "diff --git a/vividus-to-xray-exporter/src/test/java/org/vividus/xray/facade/XrayFacadeTests.java b/vividus-to-xray-exporter/src/test/java/org/vividus/xray/facade/XrayFacadeTests.java\nindex ac6c7406b..bc1540316 100644\n--- a/vividus-to-xray-exporter/src/test/java/org/vividus/xray/facade/XrayFacadeTests.java\n+++ b/vividus-to-xray-exporter/src/test/java/org/vividus/xray/facade/XrayFacadeTests.java\n\n@@ -42,6 +42,7 @@ import org.mockito.ArgumentCaptor;\n import org.mockito.Captor;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n+import org.mockito.Spy;\n import org.mockito.junit.jupiter.MockitoExtension;\n import org.vividus.bdd.model.jbehave.Step;\n import org.vividus.jira.JiraFacade;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY3MzEzOQ==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491673139", "bodyText": "I recommend to replace the mock with actual instance of the class", "author": "valfirst", "createdAt": "2020-09-20T09:33:20Z", "path": "vividus-to-xray-exporter/src/test/java/org/vividus/xray/exporter/XrayExporterTests.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.exporter;\n+\n+import static com.github.valfirst.slf4jtest.LoggingEvent.error;\n+import static com.github.valfirst.slf4jtest.LoggingEvent.info;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import com.github.valfirst.slf4jtest.LoggingEvent;\n+import com.github.valfirst.slf4jtest.TestLogger;\n+import com.github.valfirst.slf4jtest.TestLoggerFactory;\n+import com.github.valfirst.slf4jtest.TestLoggerFactoryExtension;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.vividus.bdd.model.jbehave.Step;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.util.ResourceUtils;\n+import org.vividus.xray.configuration.XrayExporterOptions;\n+import org.vividus.xray.facade.TestCaseParameters;\n+import org.vividus.xray.facade.XrayFacade;\n+\n+@ExtendWith({ MockitoExtension.class, TestLoggerFactoryExtension.class })\n+class XrayExporterTests\n+{\n+    private static final String OPEN_STATUS = \"Open\";\n+    private static final String ISSUE_ID = \"STUB-0\";\n+    private static final String SCENARIO_TITLE = \"Dummy scenario\";\n+    private static final String STORY_TITLE = \"storyPath\";\n+\n+    private static final String COMPONENTS_LABELS_TCI_JSON = \"componentslabelsupdatabletci\";\n+\n+    @Captor private ArgumentCaptor<TestCaseParameters> testCaseParametersCaptor;\n+\n+    @Mock private XrayExporterOptions xrayExporterOptions;", "originalCommit": "4e20f4063abe82c3e6f3a8be922e6b60e6a292df", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2ea27ddd4faac7d2b1e80ccf984b6a96fa530048", "chunk": "diff --git a/vividus-to-xray-exporter/src/test/java/org/vividus/xray/exporter/XrayExporterTests.java b/vividus-to-xray-exporter/src/test/java/org/vividus/xray/exporter/XrayExporterTests.java\nindex 5652817b4..ba8237125 100644\n--- a/vividus-to-xray-exporter/src/test/java/org/vividus/xray/exporter/XrayExporterTests.java\n+++ b/vividus-to-xray-exporter/src/test/java/org/vividus/xray/exporter/XrayExporterTests.java\n\n@@ -19,9 +19,11 @@ package org.vividus.xray.exporter;\n import static com.github.valfirst.slf4jtest.LoggingEvent.error;\n import static com.github.valfirst.slf4jtest.LoggingEvent.info;\n import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.empty;\n import static org.hamcrest.Matchers.hasSize;\n import static org.hamcrest.Matchers.is;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n import static org.mockito.ArgumentMatchers.eq;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.verifyNoMoreInteractions;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY3MzQ3Nw==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491673477", "bodyText": "generator.writeObjectField(FIELDS, manualTestStep)?", "author": "valfirst", "createdAt": "2020-09-20T09:37:46Z", "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/databind/ManualTestCaseSerializer.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.databind;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.vividus.xray.configuration.JiraFieldsMapping;\n+import org.vividus.xray.model.ManualTestCase;\n+import org.vividus.xray.model.ManualTestStep;\n+\n+@Component\n+public class ManualTestCaseSerializer extends JsonSerializer<ManualTestCase>\n+{\n+    private static final String FIELDS = \"fields\";\n+    private static final String NAME = \"name\";\n+\n+    @Autowired private JiraFieldsMapping jiraFieldsMapping;\n+\n+    @Override\n+    public void serialize(ManualTestCase manualTest, JsonGenerator generator, SerializerProvider serializers)\n+            throws IOException\n+    {\n+        generator.writeStartObject();\n+        generator.writeObjectFieldStart(FIELDS);\n+\n+        writeObjectWithField(generator, \"project\", \"key\", manualTest.getProjectKey());\n+\n+        writeObjectWithField(generator, \"issuetype\", NAME, \"Test\");\n+\n+        writeObjectWithField(generator, jiraFieldsMapping.getTestCaseType(), \"value\", \"Manual\");\n+\n+        generator.writeStringField(\"summary\", manualTest.getSummary());\n+\n+        writeJsonArray(generator, \"labels\", manualTest.getLabels(), false);\n+\n+        writeJsonArray(generator, \"components\", manualTest.getComponents(), true);\n+\n+        List<ManualTestStep> manualTestSteps = manualTest.getManualTestSteps();\n+\n+        generator.writeObjectFieldStart(jiraFieldsMapping.getManualSteps());\n+        generator.writeArrayFieldStart(\"steps\");\n+        for (int stepIndex = 0; stepIndex < manualTestSteps.size(); stepIndex++)\n+        {\n+            ManualTestStep manualTestStep = manualTestSteps.get(stepIndex);\n+            generator.writeStartObject();\n+            generator.writeNumberField(\"index\", stepIndex + 1);\n+            generator.writeObjectFieldStart(FIELDS);\n+            generator.writeStringField(\"Action\", manualTestStep.getAction());\n+            generator.writeStringField(\"Data\", manualTestStep.getData());\n+            generator.writeStringField(\"Expected Result\", manualTestStep.getExpectedResult());", "originalCommit": "4e20f4063abe82c3e6f3a8be922e6b60e6a292df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY4NjUxNA==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491686514", "bodyText": "discussed privately", "author": "uarlouski", "createdAt": "2020-09-20T12:24:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY3MzQ3Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY3Mzc1Nw==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491673757", "bodyText": "testCaseId -> testCaseKey?\nI think we don't use IDs", "author": "valfirst", "createdAt": "2020-09-20T09:41:29Z", "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/facade/XrayFacade.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.facade;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import javax.annotation.PostConstruct;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.util.json.JsonPathUtils;\n+import org.vividus.xray.configuration.XrayExporterOptions;\n+import org.vividus.xray.converter.ManualStepConverter;\n+import org.vividus.xray.databind.ManualTestCaseSerializer;\n+import org.vividus.xray.model.ManualTestCase;\n+import org.vividus.xray.model.ManualTestStep;\n+\n+@Component\n+public class XrayFacade\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(XrayFacade.class);\n+\n+    @Autowired private ManualTestCaseSerializer manualTestSerializer;\n+    @Autowired private XrayExporterOptions xrayExporterOptions;\n+    @Autowired private ManualStepConverter manualStepAdapter;\n+    @Autowired private JiraFacade jiraFacade;\n+\n+    private ObjectMapper objectMapper;\n+\n+    @PostConstruct\n+    public void init()\n+    {\n+        objectMapper = new ObjectMapper()\n+                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)\n+                .registerModule(new SimpleModule().addSerializer(ManualTestCase.class, manualTestSerializer));\n+    }\n+\n+    public String createTestCase(TestCaseParameters testCaseParameters) throws IOException\n+    {\n+        String createTestRequest = objectMapper.writeValueAsString(createManualTest(testCaseParameters));\n+        LOGGER.atInfo().addArgument(createTestRequest).log(\"Creating Test Case: {}\");\n+        String response = jiraFacade.createIssue(createTestRequest);\n+        String issueKey = JsonPathUtils.getData(response, \"$.key\");\n+        LOGGER.atInfo().addArgument(issueKey).log(\"Test with key {} has been created\");\n+        return issueKey;\n+    }\n+\n+    public void updateTestCase(String testCaseId, TestCaseParameters testCaseParameters) throws IOException", "originalCommit": "4e20f4063abe82c3e6f3a8be922e6b60e6a292df", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2ea27ddd4faac7d2b1e80ccf984b6a96fa530048", "chunk": "diff --git a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/facade/XrayFacade.java b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/facade/XrayFacade.java\nindex e71b706b3..02cee940c 100644\n--- a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/facade/XrayFacade.java\n+++ b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/facade/XrayFacade.java\n\n@@ -67,12 +67,13 @@ public class XrayFacade\n         return issueKey;\n     }\n \n-    public void updateTestCase(String testCaseId, TestCaseParameters testCaseParameters) throws IOException\n+    public void updateTestCase(String testCaseKey, TestCaseParameters testCaseParameters) throws IOException\n     {\n         String updateTestRequest = objectMapper.writeValueAsString(createManualTest(testCaseParameters));\n-        LOGGER.atInfo().addArgument(testCaseId).addArgument(updateTestRequest).log(\"Updating Test Case with ID {}: {}\");\n-        jiraFacade.updateIssue(testCaseId, updateTestRequest);\n-        LOGGER.atInfo().addArgument(testCaseId).log(\"Test with key {} has been updated\");\n+        LOGGER.atInfo().addArgument(testCaseKey).addArgument(updateTestRequest)\n+                .log(\"Updating Test Case with ID {}: {}\");\n+        jiraFacade.updateIssue(testCaseKey, updateTestRequest);\n+        LOGGER.atInfo().addArgument(testCaseKey).log(\"Test with key {} has been updated\");\n     }\n \n     private ManualTestCase createManualTest(TestCaseParameters testCaseParameters)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY3NDQyOA==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491674428", "bodyText": "we need to be consistent in all log messages: json-> JSON", "author": "valfirst", "createdAt": "2020-09-20T09:50:49Z", "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.exporter;\n+\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.vividus.bdd.model.jbehave.Meta;\n+import org.vividus.bdd.model.jbehave.Scenario;\n+import org.vividus.bdd.model.jbehave.Story;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.xray.configuration.XrayExporterOptions;\n+import org.vividus.xray.facade.TestCaseParameters;\n+import org.vividus.xray.facade.XrayFacade;\n+import org.vividus.xray.reader.JsonResourceReader;\n+import org.vividus.xray.reader.JsonResourceReader.FileEntry;\n+\n+@Component\n+public class XrayExporter\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(XrayExporter.class);\n+\n+    private static final String SEMICOLON = \";\";\n+\n+    @Autowired private XrayExporterOptions xrayExporterOptions;\n+    @Autowired private XrayFacade xrayFacade;\n+    @Autowired private JiraFacade jiraFacade;\n+\n+    public void exportResults() throws IOException\n+    {\n+        for (Story story : readStories())\n+        {\n+            for (Scenario scenario : story.getScenarios())\n+            {\n+                String storyTitle = story.getPath();\n+                String scenarioTitle = scenario.getTitle();\n+\n+                List<Meta> scenarioMeta = scenario.getMeta();\n+                if (isSkipped(scenarioMeta))\n+                {\n+                    LOGGER.atInfo()\n+                          .addArgument(scenarioTitle)\n+                          .addArgument(storyTitle)\n+                          .log(\"Skip export of {} scenario in {} story\");\n+                    continue;\n+                }\n+\n+                TestCaseParameters parameters = new TestCaseParameters();\n+                parameters.setLabels(getMetaValues(scenarioMeta, \"xray.labels\"));\n+                parameters.setComponents(getMetaValues(scenarioMeta, \"xray.components\"));\n+                parameters.setSummary(scenarioTitle);\n+                parameters.setStory(storyTitle);\n+                parameters.setSteps(scenario.collectSteps());\n+\n+                String testCaseId = getMetaValuesStream(scenarioMeta, \"testCaseId\").findFirst().orElse(null);\n+                if (testCaseId != null)\n+                {\n+                    updateTestCase(testCaseId, parameters);\n+                }\n+                else\n+                {\n+                    testCaseId = xrayFacade.createTestCase(parameters);\n+                }\n+\n+                for (String requirementId : getMetaValues(scenarioMeta, \"requirementId\"))\n+                {\n+                    jiraFacade.createIssueLink(testCaseId, requirementId, \"Tests\");\n+                }\n+            }\n+        }\n+    }\n+\n+    private void updateTestCase(String testCaseId, TestCaseParameters parameters) throws IOException\n+    {\n+        String status = jiraFacade.getIssueStatus(testCaseId);\n+\n+        if (xrayExporterOptions.getEditableStatuses().stream()\n+                .noneMatch(s -> StringUtils.equalsIgnoreCase(s, status)))\n+        {\n+            LOGGER.atError().addArgument(testCaseId)\n+                            .addArgument(status)\n+                            .log(\"Issue {} is in non-editable '{}' status\");\n+        }\n+        else\n+        {\n+            xrayFacade.updateTestCase(testCaseId, parameters);\n+        }\n+    }\n+\n+    private List<Story> readStories() throws IOException\n+    {\n+        ObjectMapper objectMapper = new ObjectMapper().configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,\n+                false);\n+\n+        List<Story> stories = new ArrayList<>();\n+        for (FileEntry jsonResult : getJsonResultsFiles())\n+        {\n+            LOGGER.atInfo().addArgument(jsonResult::getPath).log(\"Parsing {}\");\n+            stories.add(objectMapper.readValue(jsonResult.getContent(), Story.class));\n+        }\n+        return stories;\n+    }\n+\n+    private List<FileEntry> getJsonResultsFiles() throws IOException\n+    {\n+        Path jsonResiltsDirectory = xrayExporterOptions.getJsonResultsDirectory();\n+        List<FileEntry> jsonFiles = JsonResourceReader.readFrom(jsonResiltsDirectory);\n+\n+        notEmpty(jsonFiles, \"The directory '%s' does not contain needed json files\", jsonResiltsDirectory);", "originalCommit": "4e20f4063abe82c3e6f3a8be922e6b60e6a292df", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2ea27ddd4faac7d2b1e80ccf984b6a96fa530048", "chunk": "diff --git a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java\nindex e3b03a5e4..867e4deae 100644\n--- a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java\n+++ b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java\n\n@@ -16,6 +16,7 @@\n \n package org.vividus.xray.exporter;\n \n+import static org.apache.commons.lang3.Validate.isTrue;\n import static org.apache.commons.lang3.Validate.notEmpty;\n \n import java.io.IOException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY3NDU1Mg==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491674552", "bodyText": "open question: do we need to support mapping of multiple test cases to single scenario", "author": "valfirst", "createdAt": "2020-09-20T09:52:45Z", "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.exporter;\n+\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.vividus.bdd.model.jbehave.Meta;\n+import org.vividus.bdd.model.jbehave.Scenario;\n+import org.vividus.bdd.model.jbehave.Story;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.xray.configuration.XrayExporterOptions;\n+import org.vividus.xray.facade.TestCaseParameters;\n+import org.vividus.xray.facade.XrayFacade;\n+import org.vividus.xray.reader.JsonResourceReader;\n+import org.vividus.xray.reader.JsonResourceReader.FileEntry;\n+\n+@Component\n+public class XrayExporter\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(XrayExporter.class);\n+\n+    private static final String SEMICOLON = \";\";\n+\n+    @Autowired private XrayExporterOptions xrayExporterOptions;\n+    @Autowired private XrayFacade xrayFacade;\n+    @Autowired private JiraFacade jiraFacade;\n+\n+    public void exportResults() throws IOException\n+    {\n+        for (Story story : readStories())\n+        {\n+            for (Scenario scenario : story.getScenarios())\n+            {\n+                String storyTitle = story.getPath();\n+                String scenarioTitle = scenario.getTitle();\n+\n+                List<Meta> scenarioMeta = scenario.getMeta();\n+                if (isSkipped(scenarioMeta))\n+                {\n+                    LOGGER.atInfo()\n+                          .addArgument(scenarioTitle)\n+                          .addArgument(storyTitle)\n+                          .log(\"Skip export of {} scenario in {} story\");\n+                    continue;\n+                }\n+\n+                TestCaseParameters parameters = new TestCaseParameters();\n+                parameters.setLabels(getMetaValues(scenarioMeta, \"xray.labels\"));\n+                parameters.setComponents(getMetaValues(scenarioMeta, \"xray.components\"));\n+                parameters.setSummary(scenarioTitle);\n+                parameters.setStory(storyTitle);\n+                parameters.setSteps(scenario.collectSteps());\n+\n+                String testCaseId = getMetaValuesStream(scenarioMeta, \"testCaseId\").findFirst().orElse(null);", "originalCommit": "4e20f4063abe82c3e6f3a8be922e6b60e6a292df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTk0MDgwMw==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491940803", "bodyText": "as to test cases we expect to support 1 to 1 mapping, as to requirements, we ok with 1 to 1 at the moment, but in the future we will expand it", "author": "uarlouski", "createdAt": "2020-09-21T10:31:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY3NDU1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "2ea27ddd4faac7d2b1e80ccf984b6a96fa530048", "chunk": "diff --git a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java\nindex e3b03a5e4..867e4deae 100644\n--- a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java\n+++ b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java\n\n@@ -16,6 +16,7 @@\n \n package org.vividus.xray.exporter;\n \n+import static org.apache.commons.lang3.Validate.isTrue;\n import static org.apache.commons.lang3.Validate.notEmpty;\n \n import java.io.IOException;\n"}}, {"oid": "2ea27ddd4faac7d2b1e80ccf984b6a96fa530048", "url": "https://github.com/vividus-framework/vividus/commit/2ea27ddd4faac7d2b1e80ccf984b6a96fa530048", "message": "Draft", "committedDate": "2020-09-21T08:50:21Z", "type": "forcePushed"}, {"oid": "7ed64f77abcd5d6b6f383917db84ea10f13be514", "url": "https://github.com/vividus-framework/vividus/commit/7ed64f77abcd5d6b6f383917db84ea10f13be514", "message": "Add Jira Xray integration", "committedDate": "2020-09-21T10:27:25Z", "type": "forcePushed"}, {"oid": "64d9361469f9a2c4db36eb9f7edabdfc18fd84e3", "url": "https://github.com/vividus-framework/vividus/commit/64d9361469f9a2c4db36eb9f7edabdfc18fd84e3", "message": "Add Jira Xray integration", "committedDate": "2020-09-21T11:51:22Z", "type": "forcePushed"}, {"oid": "97ae7db62959d8b9d49d56fe32142087d7fa1603", "url": "https://github.com/vividus-framework/vividus/commit/97ae7db62959d8b9d49d56fe32142087d7fa1603", "message": "Add Jira Xray integration", "committedDate": "2020-09-21T14:19:13Z", "type": "forcePushed"}, {"oid": "5cae97adad1fc93ca799c94aa2cd0d3d6af85335", "url": "https://github.com/vividus-framework/vividus/commit/5cae97adad1fc93ca799c94aa2cd0d3d6af85335", "message": "Add Jira Xray integration", "committedDate": "2020-09-21T14:28:43Z", "type": "forcePushed"}, {"oid": "71f642d6a532f5db4eeb48d37ee0a0fc6c746986", "url": "https://github.com/vividus-framework/vividus/commit/71f642d6a532f5db4eeb48d37ee0a0fc6c746986", "message": "Add Jira Xray integration", "committedDate": "2020-09-21T16:01:07Z", "type": "forcePushed"}, {"oid": "874fb4089fea4552975b51b261787427a2bc2ac8", "url": "https://github.com/vividus-framework/vividus/commit/874fb4089fea4552975b51b261787427a2bc2ac8", "message": "Add Jira Xray integration", "committedDate": "2020-09-22T07:09:27Z", "type": "forcePushed"}, {"oid": "19377505e1c91b62e8d126fe2ca0da063e883bf4", "url": "https://github.com/vividus-framework/vividus/commit/19377505e1c91b62e8d126fe2ca0da063e883bf4", "message": "Add Jira Xray integration", "committedDate": "2020-09-22T07:10:38Z", "type": "forcePushed"}, {"oid": "fe60f21eb8239135eea3334f21c01dca4bd044f7", "url": "https://github.com/vividus-framework/vividus/commit/fe60f21eb8239135eea3334f21c01dca4bd044f7", "message": "Add Jira Xray integration", "committedDate": "2020-09-22T07:17:30Z", "type": "forcePushed"}, {"oid": "a022e436de41f15e04084dccb670515a471723a4", "url": "https://github.com/vividus-framework/vividus/commit/a022e436de41f15e04084dccb670515a471723a4", "message": "Add Jira Xray integration", "committedDate": "2020-09-22T08:16:43Z", "type": "forcePushed"}, {"oid": "3d5fa48324174328ff22d2700e762301a241d091", "url": "https://github.com/vividus-framework/vividus/commit/3d5fa48324174328ff22d2700e762301a241d091", "message": "Add Jira Xray integration", "committedDate": "2020-09-22T08:19:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU0NzQwNw==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r492547407", "bodyText": "why is RuntimeException?", "author": "valfirst", "createdAt": "2020-09-22T08:08:49Z", "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/converter/ManualStepConverter.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.converter;\n+\n+import static java.lang.System.lineSeparator;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.RegExUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.stereotype.Component;\n+import org.vividus.bdd.model.jbehave.Step;\n+import org.vividus.xray.model.ManualTestStep;\n+\n+@Component\n+public class ManualStepConverter\n+{\n+    private static final int DOTALL_MULTILINE_MODE = Pattern.DOTALL | Pattern.MULTILINE;\n+\n+    private static final String STEP_SIGN = \"Step:\";\n+    private static final String DATA_SIGN = \"Data:\";\n+    private static final String RESULT_SIGN = \"Result:\";\n+\n+    private static final String FORMAT_MESSAGE =  \"Manual scenario rules:\" + lineSeparator()\n+        + \"1. Manual scenario entries must be prepended with '!-- ' sequence\" + lineSeparator()\n+        + \"2. '\" + STEP_SIGN + \"' designator is required to be the first one in the manual step block\" + lineSeparator()\n+        + \"3. '\" + DATA_SIGN + \"' and '\" + RESULT_SIGN + \"' designators are optional\"  + lineSeparator()\n+        + \"4. '\" + STEP_SIGN + \"' designator is mandatory\" + lineSeparator();\n+\n+    private static final Pattern STEP_BLOCK_PATTERN = Pattern.compile(String.format(\"%1$s.*?(?=^%1$s|\\\\Z)\", STEP_SIGN),\n+            DOTALL_MULTILINE_MODE);\n+\n+    private static final String REQUIRED_PART_FORMAT = \"\\\\A%s(.*?)(?=^%s|^%s|\\\\Z)\";\n+    private static final String OPTIONAL_PARTS_FORMAT = \"^%s(.*?)(?=^%s|^%s|\\\\Z)\";\n+\n+    private static final Pattern STEP_PATTERN = Pattern\n+            .compile(String.format(REQUIRED_PART_FORMAT, STEP_SIGN, DATA_SIGN, RESULT_SIGN), DOTALL_MULTILINE_MODE);\n+    private static final Pattern DATA_PATTERN = Pattern\n+            .compile(String.format(OPTIONAL_PARTS_FORMAT, DATA_SIGN, DATA_SIGN, RESULT_SIGN), DOTALL_MULTILINE_MODE);\n+    private static final Pattern RESULT_PATTERN = Pattern\n+            .compile(String.format(OPTIONAL_PARTS_FORMAT, RESULT_SIGN, RESULT_SIGN, DATA_SIGN), DOTALL_MULTILINE_MODE);\n+\n+    public List<ManualTestStep> convert(String storyTitle, String scenarioTitle, List<Step> steps)\n+    {\n+        boolean checkPrefix = steps.stream()\n+                                   .map(Step::getOutcome)\n+                                   .allMatch(\"comment\"::equals);\n+\n+        if (!checkPrefix)\n+        {\n+            throw new ManualStepConversionException(getErrorMessage(storyTitle, scenarioTitle));\n+        }\n+\n+        String manualScenario = steps.stream().map(Step::getValue)\n+                .map(v -> RegExUtils.replaceAll(v, \"!--\\\\s*-?\\\\s*\", StringUtils.EMPTY))\n+                .collect(Collectors.joining(lineSeparator()));\n+\n+        if (!manualScenario.startsWith(STEP_SIGN))\n+        {\n+            throw new ManualStepConversionException(getErrorMessage(storyTitle, scenarioTitle));\n+        }\n+\n+        List<ManualTestStep> manualSteps = new ArrayList<>();\n+        Matcher stepMatcher = STEP_BLOCK_PATTERN.matcher(manualScenario);\n+        while (stepMatcher.find())\n+        {\n+            String stepBlock = stepMatcher.group();\n+            String step = extractFirstByPattern(STEP_PATTERN, stepBlock, STEP_SIGN);\n+            ManualTestStep manualTestStep = new ManualTestStep(step);\n+            extractFirstByPattern(DATA_PATTERN, stepBlock, DATA_SIGN, manualTestStep::setData);\n+            extractFirstByPattern(RESULT_PATTERN, stepBlock, RESULT_SIGN, manualTestStep::setExpectedResult);\n+            manualSteps.add(manualTestStep);\n+        }\n+        return manualSteps;\n+    }\n+\n+    private static String extractFirstByPattern(Pattern pattern, String data, String target)\n+    {\n+        Matcher matcher = pattern.matcher(data);\n+        if (matcher.find())\n+        {\n+            String matched = matcher.group(1);\n+            if (matcher.find())\n+            {\n+                throw new ManualStepConversionException(\n+                        String.format(\"Only one %s is expected to be present in the data\", target));\n+            }\n+            return matched.strip();\n+        }\n+        return null;\n+    }\n+\n+    private static void extractFirstByPattern(Pattern pattern, String data, String target,\n+            Consumer<String> valueConsumer)\n+    {\n+        Optional.ofNullable(extractFirstByPattern(pattern, data, target)).ifPresent(valueConsumer);\n+    }\n+\n+    private static String getErrorMessage(String storyTitle, String scenarioTitle)\n+    {\n+        return \"Error:\" + lineSeparator() + \"Story: \" + storyTitle + lineSeparator() + \"Scenario: \" + scenarioTitle\n+                + lineSeparator() + FORMAT_MESSAGE;\n+    }\n+\n+    public static class ManualStepConversionException extends RuntimeException", "originalCommit": "fe60f21eb8239135eea3334f21c01dca4bd044f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc5ODE0OA==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r492798148", "bodyText": "converted to checked exception due to new requirements regarding to errors tracking", "author": "uarlouski", "createdAt": "2020-09-22T14:50:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU0NzQwNw=="}], "type": "inlineReview", "revised_code": {"commit": "1041e5771c6c5b4133264a1a37afeecc428a2d8b", "chunk": "diff --git a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/converter/ManualStepConverter.java b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/converter/ManualStepConverter.java\nindex 32667a330..5ea233a2f 100644\n--- a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/converter/ManualStepConverter.java\n+++ b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/converter/ManualStepConverter.java\n\n@@ -30,6 +30,7 @@ import org.apache.commons.lang3.RegExUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.springframework.stereotype.Component;\n import org.vividus.bdd.model.jbehave.Step;\n+import org.vividus.xray.exception.XrayExporterSyntaxException;\n import org.vividus.xray.model.ManualTestStep;\n \n @Component\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU0ODUxOQ==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r492548519", "bodyText": "manualStepAdapter -> manualStepConverter", "author": "valfirst", "createdAt": "2020-09-22T08:10:38Z", "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/facade/XrayFacade.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.facade;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import javax.annotation.PostConstruct;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.util.json.JsonPathUtils;\n+import org.vividus.xray.configuration.XrayExporterOptions;\n+import org.vividus.xray.converter.ManualStepConverter;\n+import org.vividus.xray.databind.ManualTestCaseSerializer;\n+import org.vividus.xray.model.ManualTestCase;\n+import org.vividus.xray.model.ManualTestStep;\n+\n+@Component\n+public class XrayFacade\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(XrayFacade.class);\n+\n+    @Autowired private ManualTestCaseSerializer manualTestSerializer;\n+    @Autowired private XrayExporterOptions xrayExporterOptions;\n+    @Autowired private ManualStepConverter manualStepAdapter;", "originalCommit": "fe60f21eb8239135eea3334f21c01dca4bd044f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1041e5771c6c5b4133264a1a37afeecc428a2d8b", "chunk": "diff --git a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/facade/XrayFacade.java b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/facade/XrayFacade.java\nindex 02cee940c..13192e464 100644\n--- a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/facade/XrayFacade.java\n+++ b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/facade/XrayFacade.java\n\n@@ -34,6 +34,7 @@ import org.vividus.util.json.JsonPathUtils;\n import org.vividus.xray.configuration.XrayExporterOptions;\n import org.vividus.xray.converter.ManualStepConverter;\n import org.vividus.xray.databind.ManualTestCaseSerializer;\n+import org.vividus.xray.exception.XrayExporterSyntaxException;\n import org.vividus.xray.model.ManualTestCase;\n import org.vividus.xray.model.ManualTestStep;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU1NDExOA==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r492554118", "bodyText": "manualStepAdapter -> manualStepConverter", "author": "valfirst", "createdAt": "2020-09-22T08:20:01Z", "path": "vividus-to-xray-exporter/src/test/java/org/vividus/xray/facade/XrayFacadeTests.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.facade;\n+\n+import static com.github.valfirst.slf4jtest.LoggingEvent.info;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.IOException;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.github.valfirst.slf4jtest.TestLogger;\n+import com.github.valfirst.slf4jtest.TestLoggerFactory;\n+import com.github.valfirst.slf4jtest.TestLoggerFactoryExtension;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Spy;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.vividus.bdd.model.jbehave.Step;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.xray.configuration.XrayExporterOptions;\n+import org.vividus.xray.converter.ManualStepConverter;\n+import org.vividus.xray.databind.ManualTestCaseSerializer;\n+import org.vividus.xray.model.ManualTestCase;\n+import org.vividus.xray.model.ManualTestStep;\n+\n+@ExtendWith({ MockitoExtension.class, TestLoggerFactoryExtension.class })\n+class XrayFacadeTests\n+{\n+    private static final String ISSUE_ID = \"issue id\";\n+    private static final String BODY = \"{}\";\n+    private static final String STORY_TITLE = \"storyTitle\";\n+    private static final String SCENARIO_TITLE = \"scenarioTitle\";\n+    private static final String PROJECT_KEY = \"project key\";\n+\n+    @Captor private ArgumentCaptor<ManualTestCase> manualTestCaseCaptor;\n+\n+    @Mock private ManualTestCaseSerializer manualTestSerializer;\n+    @Spy private XrayExporterOptions xrayExporterOptions;\n+    @Mock private ManualStepConverter manualStepAdapter;", "originalCommit": "3d5fa48324174328ff22d2700e762301a241d091", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1041e5771c6c5b4133264a1a37afeecc428a2d8b", "chunk": "diff --git a/vividus-to-xray-exporter/src/test/java/org/vividus/xray/facade/XrayFacadeTests.java b/vividus-to-xray-exporter/src/test/java/org/vividus/xray/facade/XrayFacadeTests.java\nindex bc1540316..0721c837d 100644\n--- a/vividus-to-xray-exporter/src/test/java/org/vividus/xray/facade/XrayFacadeTests.java\n+++ b/vividus-to-xray-exporter/src/test/java/org/vividus/xray/facade/XrayFacadeTests.java\n\n@@ -49,6 +49,7 @@ import org.vividus.jira.JiraFacade;\n import org.vividus.xray.configuration.XrayExporterOptions;\n import org.vividus.xray.converter.ManualStepConverter;\n import org.vividus.xray.databind.ManualTestCaseSerializer;\n+import org.vividus.xray.exception.XrayExporterSyntaxException;\n import org.vividus.xray.model.ManualTestCase;\n import org.vividus.xray.model.ManualTestStep;\n \n"}}, {"oid": "1041e5771c6c5b4133264a1a37afeecc428a2d8b", "url": "https://github.com/vividus-framework/vividus/commit/1041e5771c6c5b4133264a1a37afeecc428a2d8b", "message": "Add Jira Xray integration", "committedDate": "2020-09-22T10:07:22Z", "type": "forcePushed"}, {"oid": "523fb36e75f0ba92d9678937c3a31e12b1c2ea3e", "url": "https://github.com/vividus-framework/vividus/commit/523fb36e75f0ba92d9678937c3a31e12b1c2ea3e", "message": "Add Jira Xray integration", "committedDate": "2020-09-22T10:22:02Z", "type": "forcePushed"}, {"oid": "9de2347fe255be1ab16ae66fa28d426fc79bf122", "url": "https://github.com/vividus-framework/vividus/commit/9de2347fe255be1ab16ae66fa28d426fc79bf122", "message": "Add Jira Xray integration", "committedDate": "2020-09-22T10:56:59Z", "type": "forcePushed"}, {"oid": "5e8acc842dd806f479feb0117f0a988e6acbd174", "url": "https://github.com/vividus-framework/vividus/commit/5e8acc842dd806f479feb0117f0a988e6acbd174", "message": "Add Jira Xray integration", "committedDate": "2020-09-22T11:06:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc1OTU2Mg==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r492759562", "bodyText": "just SyntaxException ?", "author": "valfirst", "createdAt": "2020-09-22T14:02:16Z", "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/exception/XrayExporterSyntaxException.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.exception;\n+\n+public class XrayExporterSyntaxException extends Exception", "originalCommit": "5e8acc842dd806f479feb0117f0a988e6acbd174", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3025e22fe31924484f05d50027808b8463caa434", "chunk": "diff --git a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exception/XrayExporterSyntaxException.java b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exception/SyntaxException.java\nsimilarity index 87%\nrename from vividus-to-xray-exporter/src/main/java/org/vividus/xray/exception/XrayExporterSyntaxException.java\nrename to vividus-to-xray-exporter/src/main/java/org/vividus/xray/exception/SyntaxException.java\nindex 1780b2149..aefcddc14 100644\n--- a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exception/XrayExporterSyntaxException.java\n+++ b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exception/SyntaxException.java\n\n@@ -16,11 +16,11 @@\n \n package org.vividus.xray.exception;\n \n-public class XrayExporterSyntaxException extends Exception\n+public class SyntaxException extends Exception\n {\n     private static final long serialVersionUID = 4224163654313765418L;\n \n-    public XrayExporterSyntaxException(String message)\n+    public SyntaxException(String message)\n     {\n         super(message);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc2MDEzOQ==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r492760139", "bodyText": "either put dot . after each log statement or nowhere", "author": "valfirst", "createdAt": "2020-09-22T14:03:07Z", "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.exporter;\n+\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.vividus.bdd.model.jbehave.Meta;\n+import org.vividus.bdd.model.jbehave.Scenario;\n+import org.vividus.bdd.model.jbehave.Story;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.xray.configuration.XrayExporterOptions;\n+import org.vividus.xray.exception.XrayExporterSyntaxException;\n+import org.vividus.xray.facade.TestCaseParameters;\n+import org.vividus.xray.facade.XrayFacade;\n+import org.vividus.xray.reader.JsonResourceReader;\n+import org.vividus.xray.reader.JsonResourceReader.FileEntry;\n+\n+@Component\n+public class XrayExporter\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(XrayExporter.class);\n+\n+    private static final String SEMICOLON = \";\";\n+\n+    @Autowired private XrayExporterOptions xrayExporterOptions;\n+    @Autowired private XrayFacade xrayFacade;\n+    @Autowired private JiraFacade jiraFacade;\n+\n+    public void exportResults() throws IOException\n+    {\n+        for (Story story : readStories())\n+        {\n+            LOGGER.atInfo()\n+                  .addArgument(story::getPath)\n+                  .log(\"Exporting scenarios from {} story\");\n+\n+            for (Scenario scenario : story.getScenarios())\n+            {\n+                String scenarioTitle = scenario.getTitle();\n+\n+                List<Meta> scenarioMeta = scenario.getMeta();\n+                if (isSkipped(scenarioMeta))\n+                {\n+                    LOGGER.atInfo()\n+                          .addArgument(scenarioTitle)\n+                          .log(\"Skip export of {} scenario\");\n+                    continue;\n+                }\n+                LOGGER.atInfo()\n+                      .addArgument(scenarioTitle)\n+                      .log(\"Exporting {} scenario\");\n+\n+                String storyTitle = story.getPath();\n+\n+                TestCaseParameters parameters = new TestCaseParameters();\n+                parameters.setLabels(getMetaValues(scenarioMeta, \"xray.labels\"));\n+                parameters.setComponents(getMetaValues(scenarioMeta, \"xray.components\"));\n+                parameters.setSummary(scenarioTitle);\n+                parameters.setStory(storyTitle);\n+                parameters.setSteps(scenario.collectSteps());\n+\n+                try\n+                {\n+                    String testCaseId = ensureOneValueOrNull(scenarioMeta, \"testCaseId\");\n+                    if (testCaseId != null && updateTestCase(testCaseId, parameters))\n+                    {\n+                        createTestsLink(testCaseId, scenarioMeta);\n+                    }\n+                    else if (testCaseId == null)\n+                    {\n+                        testCaseId = xrayFacade.createTestCase(parameters);\n+                        createTestsLink(testCaseId, scenarioMeta);\n+                    }\n+                }\n+                catch (IOException | XrayExporterSyntaxException e)\n+                {\n+                    LOGGER.atError().setCause(e).log(\"Got an error while exporting.\");", "originalCommit": "5e8acc842dd806f479feb0117f0a988e6acbd174", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3025e22fe31924484f05d50027808b8463caa434", "chunk": "diff --git a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java\nindex 74dafff36..4ecfb84bf 100644\n--- a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java\n+++ b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java\n\n@@ -28,6 +28,8 @@ import java.util.Set;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n+import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;\n+import com.fasterxml.jackson.annotation.PropertyAccessor;\n import com.fasterxml.jackson.databind.DeserializationFeature;\n import com.fasterxml.jackson.databind.ObjectMapper;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc2MjcxNw==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r492762717", "bodyText": "adapter -> converter", "author": "valfirst", "createdAt": "2020-09-22T14:06:23Z", "path": "vividus-to-xray-exporter/src/test/java/org/vividus/xray/converter/ManualStepConverterTests.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.converter;\n+\n+import static java.lang.System.lineSeparator;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.params.provider.Arguments.arguments;\n+\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.vividus.bdd.model.jbehave.Step;\n+import org.vividus.xray.exception.XrayExporterSyntaxException;\n+import org.vividus.xray.model.ManualTestStep;\n+\n+class ManualStepConverterTests\n+{\n+    private static final String STORY_TITLE = \"story title\";\n+    private static final String SCENARIO_TITLE = \"scenario title\";\n+    private static final String ERROR_MESSAGE = \"Error:\" + lineSeparator() + \"Story: \" + STORY_TITLE + lineSeparator()\n+        + \"Scenario: \" + SCENARIO_TITLE + lineSeparator()\n+        + \"Manual scenario rules:\" + lineSeparator()\n+        + \"1. Manual scenario entries must be prepended with '!-- ' sequence\" + lineSeparator()\n+        + \"2. 'Step:' designator is required to be the first one in the manual step block\" + lineSeparator()\n+        + \"3. 'Data:' and 'Result:' designators are optional\"  + lineSeparator()\n+        + \"4. 'Step:' designator is mandatory\" + lineSeparator();\n+    private static final String DUPLICATE_ENTRY_MESSAGE = \"Only one %s is expected to be present in the data\";\n+\n+    private static final String ESCAPE = \"- \";\n+    private static final String PREFIX = \"!-- \";\n+    private static final String STEP = \"step\";\n+    private static final String DATA = \"data\";\n+    private static final String RESULT = \"result\";\n+    private static final String STEP_ENTRY = PREFIX + \"Step: \" + STEP;\n+    private static final String DATA_ENTRY = PREFIX + \"Data: \" + DATA;\n+    private static final String RESULT_ENTRY = PREFIX + \"Result: \" + RESULT;\n+    private static final String ADDITIONAL_DATA = \"additional data\";\n+\n+    private final ManualStepConverter adapter = new ManualStepConverter();", "originalCommit": "5e8acc842dd806f479feb0117f0a988e6acbd174", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3025e22fe31924484f05d50027808b8463caa434", "chunk": "diff --git a/vividus-to-xray-exporter/src/test/java/org/vividus/xray/converter/ManualStepConverterTests.java b/vividus-to-xray-exporter/src/test/java/org/vividus/xray/converter/ManualStepConverterTests.java\nindex bf7bcd4e1..a6b35f6c5 100644\n--- a/vividus-to-xray-exporter/src/test/java/org/vividus/xray/converter/ManualStepConverterTests.java\n+++ b/vividus-to-xray-exporter/src/test/java/org/vividus/xray/converter/ManualStepConverterTests.java\n\n@@ -31,7 +31,7 @@ import org.junit.jupiter.params.ParameterizedTest;\n import org.junit.jupiter.params.provider.Arguments;\n import org.junit.jupiter.params.provider.MethodSource;\n import org.vividus.bdd.model.jbehave.Step;\n-import org.vividus.xray.exception.XrayExporterSyntaxException;\n+import org.vividus.xray.exception.SyntaxException;\n import org.vividus.xray.model.ManualTestStep;\n \n class ManualStepConverterTests\n"}}, {"oid": "3025e22fe31924484f05d50027808b8463caa434", "url": "https://github.com/vividus-framework/vividus/commit/3025e22fe31924484f05d50027808b8463caa434", "message": "Add Jira Xray integration", "committedDate": "2020-09-22T14:34:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjgwNTIxNw==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r492805217", "bodyText": "I don't see much profit to align logging statements in list-like view if they can be placed on a single line", "author": "valfirst", "createdAt": "2020-09-22T14:58:41Z", "path": "vividus-to-xray-exporter/src/main/java/org/vividus/jira/JiraClient.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.jira;\n+\n+import java.io.IOException;\n+\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpStatus;\n+import org.apache.http.client.methods.HttpRequestBase;\n+import org.apache.http.entity.ContentType;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.protocol.HttpContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.http.HttpMethod;\n+import org.vividus.http.HttpRequestBuilder;\n+import org.vividus.http.client.HttpResponse;\n+import org.vividus.http.client.IHttpClient;\n+import org.vividus.http.context.HttpContextFactory;\n+\n+public class JiraClient\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(JiraClient.class);\n+\n+    private final String endpoint;\n+    private final IHttpClient httpClient;\n+    private final HttpContextFactory httpContextFactory;\n+\n+    public JiraClient(String endpoint, IHttpClient httpClient, HttpContextFactory httpContextFactory)\n+    {\n+        this.endpoint = endpoint;\n+        this.httpClient = httpClient;\n+        this.httpContextFactory = httpContextFactory;\n+    }\n+\n+    public String executeGet(String relativeUrl) throws IOException\n+    {\n+        return execute(HttpMethod.GET, relativeUrl, (HttpEntity) null);\n+    }\n+\n+    public String executePost(String relativeUrl, String requestBody) throws IOException\n+    {\n+        return execute(HttpMethod.POST, relativeUrl, requestBody);\n+    }\n+\n+    public String executePut(String relativeUrl, String requestBody) throws IOException\n+    {\n+        return execute(HttpMethod.PUT, relativeUrl, requestBody);\n+    }\n+\n+    private String execute(HttpMethod method, String relativeUrl, String requestBody) throws IOException\n+    {\n+        return execute(method, relativeUrl, new StringEntity(requestBody, ContentType.APPLICATION_JSON));\n+    }\n+\n+    private String execute(HttpMethod method, String relativeUrl, HttpEntity content) throws IOException\n+    {\n+        HttpRequestBase httpRequest = HttpRequestBuilder.create()\n+                .withHttpMethod(method)\n+                .withEndpoint(endpoint)\n+                .withRelativeUrl(relativeUrl)\n+                .withContent(content)\n+                .build();\n+\n+        LOGGER.atInfo().addArgument(httpRequest::getRequestLine)\n+                       .log(\"Jira request: {}\");\n+\n+        HttpContext httpContext = httpContextFactory.create();\n+        HttpResponse httpResponse = httpClient.execute(httpRequest, httpContext);\n+        int status = httpResponse.getStatusCode();\n+        if (status >= HttpStatus.SC_OK && status < HttpStatus.SC_MULTIPLE_CHOICES)\n+        {\n+            return httpResponse.getResponseBodyAsString();\n+        }\n+        LOGGER.atError().addArgument(httpResponse)\n+                        .log(\"Jira response: {}\");", "originalCommit": "3025e22fe31924484f05d50027808b8463caa434", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b6231938980fb29f3025a80776f11dd1e73d52e2", "chunk": "diff --git a/vividus-to-xray-exporter/src/main/java/org/vividus/jira/JiraClient.java b/vividus-to-xray-exporter/src/main/java/org/vividus/jira/JiraClient.java\nindex 4061ff815..b1d0313b9 100644\n--- a/vividus-to-xray-exporter/src/main/java/org/vividus/jira/JiraClient.java\n+++ b/vividus-to-xray-exporter/src/main/java/org/vividus/jira/JiraClient.java\n\n@@ -76,8 +76,7 @@ public class JiraClient\n                 .withContent(content)\n                 .build();\n \n-        LOGGER.atInfo().addArgument(httpRequest::getRequestLine)\n-                       .log(\"Jira request: {}\");\n+        LOGGER.atInfo().addArgument(httpRequest::getRequestLine).log(\"Jira request: {}\");\n \n         HttpContext httpContext = httpContextFactory.create();\n         HttpResponse httpResponse = httpClient.execute(httpRequest, httpContext);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjgwNjcwMA==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r492806700", "bodyText": "split the method into several smaller ones", "author": "valfirst", "createdAt": "2020-09-22T15:00:26Z", "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java", "diffHunk": "@@ -0,0 +1,256 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.exporter;\n+\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;\n+import com.fasterxml.jackson.annotation.PropertyAccessor;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.vividus.bdd.model.jbehave.Meta;\n+import org.vividus.bdd.model.jbehave.Scenario;\n+import org.vividus.bdd.model.jbehave.Story;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.xray.configuration.XrayExporterOptions;\n+import org.vividus.xray.exception.SyntaxException;\n+import org.vividus.xray.facade.TestCaseParameters;\n+import org.vividus.xray.facade.XrayFacade;\n+import org.vividus.xray.reader.JsonResourceReader;\n+import org.vividus.xray.reader.JsonResourceReader.FileEntry;\n+\n+@Component\n+public class XrayExporter\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(XrayExporter.class);\n+\n+    private static final String SEMICOLON = \";\";\n+\n+    @Autowired private XrayExporterOptions xrayExporterOptions;\n+    @Autowired private XrayFacade xrayFacade;\n+    @Autowired private JiraFacade jiraFacade;\n+\n+    private final List<ErrorExportEntry> errors = new ArrayList<>();\n+\n+    public void exportResults() throws IOException\n+    {\n+        for (Story story : readStories())\n+        {\n+            LOGGER.atInfo().addArgument(story::getPath)\n+                           .log(\"Exporting scenarios from {} story\");\n+\n+            for (Scenario scenario : story.getScenarios())\n+            {\n+                String scenarioTitle = scenario.getTitle();\n+\n+                List<Meta> scenarioMeta = scenario.getMeta();\n+                if (isSkipped(scenarioMeta))\n+                {\n+                    LOGGER.atInfo().addArgument(scenarioTitle)\n+                                   .log(\"Skip export of {} scenario\");\n+                    continue;\n+                }\n+                LOGGER.atInfo().addArgument(scenarioTitle)\n+                               .log(\"Exporting {} scenario\");\n+\n+                String storyTitle = story.getPath();\n+\n+                TestCaseParameters parameters = new TestCaseParameters();\n+                parameters.setLabels(getMetaValues(scenarioMeta, \"xray.labels\"));\n+                parameters.setComponents(getMetaValues(scenarioMeta, \"xray.components\"));\n+                parameters.setSummary(scenarioTitle);\n+                parameters.setStory(storyTitle);\n+                parameters.setSteps(scenario.collectSteps());\n+\n+                try\n+                {\n+                    String testCaseId = ensureOneValueOrNull(scenarioMeta, \"testCaseId\");\n+                    if (testCaseId != null)\n+                    {\n+                        updateTestCase(testCaseId, parameters);\n+                    }\n+                    else\n+                    {\n+                        testCaseId = xrayFacade.createTestCase(parameters);\n+                    }\n+                    createTestsLink(testCaseId, scenarioMeta);\n+                }\n+                catch (IOException | SyntaxException | InvalidIssueStatusException e)\n+                {\n+                    errors.add(new ErrorExportEntry(storyTitle, scenarioTitle, e.getMessage()));\n+                    LOGGER.atError().setCause(e)\n+                                    .log(\"Got an error while exporting\");\n+                }\n+            }\n+        }", "originalCommit": "3025e22fe31924484f05d50027808b8463caa434", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b6231938980fb29f3025a80776f11dd1e73d52e2", "chunk": "diff --git a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java\nindex 4ecfb84bf..a8b3aa9fb 100644\n--- a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java\n+++ b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java\n\n@@ -16,6 +16,7 @@\n \n package org.vividus.xray.exporter;\n \n+import static java.lang.System.lineSeparator;\n import static org.apache.commons.lang3.Validate.notEmpty;\n \n import java.io.IOException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjgwNjkzNg==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r492806936", "bodyText": "should it be public?", "author": "valfirst", "createdAt": "2020-09-22T15:00:40Z", "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java", "diffHunk": "@@ -0,0 +1,256 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.exporter;\n+\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;\n+import com.fasterxml.jackson.annotation.PropertyAccessor;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.vividus.bdd.model.jbehave.Meta;\n+import org.vividus.bdd.model.jbehave.Scenario;\n+import org.vividus.bdd.model.jbehave.Story;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.xray.configuration.XrayExporterOptions;\n+import org.vividus.xray.exception.SyntaxException;\n+import org.vividus.xray.facade.TestCaseParameters;\n+import org.vividus.xray.facade.XrayFacade;\n+import org.vividus.xray.reader.JsonResourceReader;\n+import org.vividus.xray.reader.JsonResourceReader.FileEntry;\n+\n+@Component\n+public class XrayExporter\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(XrayExporter.class);\n+\n+    private static final String SEMICOLON = \";\";\n+\n+    @Autowired private XrayExporterOptions xrayExporterOptions;\n+    @Autowired private XrayFacade xrayFacade;\n+    @Autowired private JiraFacade jiraFacade;\n+\n+    private final List<ErrorExportEntry> errors = new ArrayList<>();\n+\n+    public void exportResults() throws IOException\n+    {\n+        for (Story story : readStories())\n+        {\n+            LOGGER.atInfo().addArgument(story::getPath)\n+                           .log(\"Exporting scenarios from {} story\");\n+\n+            for (Scenario scenario : story.getScenarios())\n+            {\n+                String scenarioTitle = scenario.getTitle();\n+\n+                List<Meta> scenarioMeta = scenario.getMeta();\n+                if (isSkipped(scenarioMeta))\n+                {\n+                    LOGGER.atInfo().addArgument(scenarioTitle)\n+                                   .log(\"Skip export of {} scenario\");\n+                    continue;\n+                }\n+                LOGGER.atInfo().addArgument(scenarioTitle)\n+                               .log(\"Exporting {} scenario\");\n+\n+                String storyTitle = story.getPath();\n+\n+                TestCaseParameters parameters = new TestCaseParameters();\n+                parameters.setLabels(getMetaValues(scenarioMeta, \"xray.labels\"));\n+                parameters.setComponents(getMetaValues(scenarioMeta, \"xray.components\"));\n+                parameters.setSummary(scenarioTitle);\n+                parameters.setStory(storyTitle);\n+                parameters.setSteps(scenario.collectSteps());\n+\n+                try\n+                {\n+                    String testCaseId = ensureOneValueOrNull(scenarioMeta, \"testCaseId\");\n+                    if (testCaseId != null)\n+                    {\n+                        updateTestCase(testCaseId, parameters);\n+                    }\n+                    else\n+                    {\n+                        testCaseId = xrayFacade.createTestCase(parameters);\n+                    }\n+                    createTestsLink(testCaseId, scenarioMeta);\n+                }\n+                catch (IOException | SyntaxException | InvalidIssueStatusException e)\n+                {\n+                    errors.add(new ErrorExportEntry(storyTitle, scenarioTitle, e.getMessage()));\n+                    LOGGER.atError().setCause(e)\n+                                    .log(\"Got an error while exporting\");\n+                }\n+            }\n+        }\n+\n+        publishErrors();\n+    }\n+\n+    public void publishErrors() throws IOException", "originalCommit": "3025e22fe31924484f05d50027808b8463caa434", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b6231938980fb29f3025a80776f11dd1e73d52e2", "chunk": "diff --git a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java\nindex 4ecfb84bf..a8b3aa9fb 100644\n--- a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java\n+++ b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java\n\n@@ -16,6 +16,7 @@\n \n package org.vividus.xray.exporter;\n \n+import static java.lang.System.lineSeparator;\n import static org.apache.commons.lang3.Validate.notEmpty;\n \n import java.io.IOException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjgwNzg0NA==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r492807844", "bodyText": "I believe the errors should be printed in user-friendly format (not technical JSON)", "author": "valfirst", "createdAt": "2020-09-22T15:01:51Z", "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java", "diffHunk": "@@ -0,0 +1,256 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.exporter;\n+\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;\n+import com.fasterxml.jackson.annotation.PropertyAccessor;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.vividus.bdd.model.jbehave.Meta;\n+import org.vividus.bdd.model.jbehave.Scenario;\n+import org.vividus.bdd.model.jbehave.Story;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.xray.configuration.XrayExporterOptions;\n+import org.vividus.xray.exception.SyntaxException;\n+import org.vividus.xray.facade.TestCaseParameters;\n+import org.vividus.xray.facade.XrayFacade;\n+import org.vividus.xray.reader.JsonResourceReader;\n+import org.vividus.xray.reader.JsonResourceReader.FileEntry;\n+\n+@Component\n+public class XrayExporter\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(XrayExporter.class);\n+\n+    private static final String SEMICOLON = \";\";\n+\n+    @Autowired private XrayExporterOptions xrayExporterOptions;\n+    @Autowired private XrayFacade xrayFacade;\n+    @Autowired private JiraFacade jiraFacade;\n+\n+    private final List<ErrorExportEntry> errors = new ArrayList<>();\n+\n+    public void exportResults() throws IOException\n+    {\n+        for (Story story : readStories())\n+        {\n+            LOGGER.atInfo().addArgument(story::getPath)\n+                           .log(\"Exporting scenarios from {} story\");\n+\n+            for (Scenario scenario : story.getScenarios())\n+            {\n+                String scenarioTitle = scenario.getTitle();\n+\n+                List<Meta> scenarioMeta = scenario.getMeta();\n+                if (isSkipped(scenarioMeta))\n+                {\n+                    LOGGER.atInfo().addArgument(scenarioTitle)\n+                                   .log(\"Skip export of {} scenario\");\n+                    continue;\n+                }\n+                LOGGER.atInfo().addArgument(scenarioTitle)\n+                               .log(\"Exporting {} scenario\");\n+\n+                String storyTitle = story.getPath();\n+\n+                TestCaseParameters parameters = new TestCaseParameters();\n+                parameters.setLabels(getMetaValues(scenarioMeta, \"xray.labels\"));\n+                parameters.setComponents(getMetaValues(scenarioMeta, \"xray.components\"));\n+                parameters.setSummary(scenarioTitle);\n+                parameters.setStory(storyTitle);\n+                parameters.setSteps(scenario.collectSteps());\n+\n+                try\n+                {\n+                    String testCaseId = ensureOneValueOrNull(scenarioMeta, \"testCaseId\");\n+                    if (testCaseId != null)\n+                    {\n+                        updateTestCase(testCaseId, parameters);\n+                    }\n+                    else\n+                    {\n+                        testCaseId = xrayFacade.createTestCase(parameters);\n+                    }\n+                    createTestsLink(testCaseId, scenarioMeta);\n+                }\n+                catch (IOException | SyntaxException | InvalidIssueStatusException e)\n+                {\n+                    errors.add(new ErrorExportEntry(storyTitle, scenarioTitle, e.getMessage()));\n+                    LOGGER.atError().setCause(e)\n+                                    .log(\"Got an error while exporting\");\n+                }\n+            }\n+        }\n+\n+        publishErrors();\n+    }\n+\n+    public void publishErrors() throws IOException\n+    {\n+        if (!errors.isEmpty())\n+        {\n+            String message = new ObjectMapper().setVisibility(PropertyAccessor.FIELD, Visibility.ANY)\n+                                               .writerWithDefaultPrettyPrinter()\n+                                               .writeValueAsString(errors);", "originalCommit": "3025e22fe31924484f05d50027808b8463caa434", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b6231938980fb29f3025a80776f11dd1e73d52e2", "chunk": "diff --git a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java\nindex 4ecfb84bf..a8b3aa9fb 100644\n--- a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java\n+++ b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java\n\n@@ -16,6 +16,7 @@\n \n package org.vividus.xray.exporter;\n \n+import static java.lang.System.lineSeparator;\n import static org.apache.commons.lang3.Validate.notEmpty;\n \n import java.io.IOException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjgxMDUzNg==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r492810536", "bodyText": "now I recommend to move this piece outside XrayFacade", "author": "valfirst", "createdAt": "2020-09-22T15:05:08Z", "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/facade/XrayFacade.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.facade;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import javax.annotation.PostConstruct;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.util.json.JsonPathUtils;\n+import org.vividus.xray.configuration.XrayExporterOptions;\n+import org.vividus.xray.converter.ManualStepConverter;\n+import org.vividus.xray.databind.ManualTestCaseSerializer;\n+import org.vividus.xray.exception.SyntaxException;\n+import org.vividus.xray.model.ManualTestCase;\n+import org.vividus.xray.model.ManualTestStep;\n+\n+@Component\n+public class XrayFacade\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(XrayFacade.class);\n+\n+    @Autowired private ManualTestCaseSerializer manualTestSerializer;\n+    @Autowired private XrayExporterOptions xrayExporterOptions;\n+    @Autowired private ManualStepConverter manualStepConverter;\n+    @Autowired private JiraFacade jiraFacade;\n+\n+    private ObjectMapper objectMapper;\n+\n+    @PostConstruct\n+    public void init()\n+    {\n+        objectMapper = new ObjectMapper()\n+                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)\n+                .registerModule(new SimpleModule().addSerializer(ManualTestCase.class, manualTestSerializer));\n+    }\n+\n+    public String createTestCase(TestCaseParameters testCaseParameters) throws IOException, SyntaxException\n+    {\n+        String createTestRequest = objectMapper.writeValueAsString(createManualTest(testCaseParameters));\n+        LOGGER.atInfo().addArgument(createTestRequest)\n+                       .log(\"Creating Test Case: {}\");\n+        String response = jiraFacade.createIssue(createTestRequest);\n+        String issueKey = JsonPathUtils.getData(response, \"$.key\");\n+        LOGGER.atInfo().addArgument(issueKey)\n+                       .log(\"Test with key {} has been created\");\n+        return issueKey;\n+    }\n+\n+    public void updateTestCase(String testCaseKey, TestCaseParameters testCaseParameters)\n+            throws IOException, SyntaxException\n+    {\n+        String updateTestRequest = objectMapper.writeValueAsString(createManualTest(testCaseParameters));\n+        LOGGER.atInfo().addArgument(testCaseKey)\n+                       .addArgument(updateTestRequest)\n+                       .log(\"Updating Test Case with ID {}: {}\");\n+        jiraFacade.updateIssue(testCaseKey, updateTestRequest);\n+        LOGGER.atInfo().addArgument(testCaseKey)\n+                       .log(\"Test with key {} has been updated\");\n+    }\n+\n+    private ManualTestCase createManualTest(TestCaseParameters testCaseParameters) throws SyntaxException\n+    {\n+        ManualTestCase manualTest = new ManualTestCase();\n+        manualTest.setProjectKey(xrayExporterOptions.getProjectKey());\n+        String summary = testCaseParameters.getSummary();\n+        manualTest.setSummary(summary);\n+        manualTest.setLabels(testCaseParameters.getLabels());\n+        manualTest.setComponents(testCaseParameters.getComponents());\n+        List<ManualTestStep> steps = manualStepConverter.convert(testCaseParameters.getStory(), summary,\n+                testCaseParameters.getSteps());", "originalCommit": "3025e22fe31924484f05d50027808b8463caa434", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b6231938980fb29f3025a80776f11dd1e73d52e2", "chunk": "diff --git a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/facade/XrayFacade.java b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/facade/XrayFacade.java\nindex 52cd509a6..584ef8ab6 100644\n--- a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/facade/XrayFacade.java\n+++ b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/facade/XrayFacade.java\n\n@@ -17,7 +17,6 @@\n package org.vividus.xray.facade;\n \n import java.io.IOException;\n-import java.util.List;\n \n import javax.annotation.PostConstruct;\n \n"}}, {"oid": "b6231938980fb29f3025a80776f11dd1e73d52e2", "url": "https://github.com/vividus-framework/vividus/commit/b6231938980fb29f3025a80776f11dd1e73d52e2", "message": "Add Jira Xray integration", "committedDate": "2020-09-22T16:20:29Z", "type": "forcePushed"}, {"oid": "94249529e56cf31795bb65362cb13b90570829f8", "url": "https://github.com/vividus-framework/vividus/commit/94249529e56cf31795bb65362cb13b90570829f8", "message": "Add Jira Xray integration", "committedDate": "2020-09-22T17:37:24Z", "type": "forcePushed"}, {"oid": "9c57a7c4d887df371265da8a98843c712b29e29d", "url": "https://github.com/vividus-framework/vividus/commit/9c57a7c4d887df371265da8a98843c712b29e29d", "message": "Add Jira Xray integration", "committedDate": "2020-09-22T17:56:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk3Nzg2Nw==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r492977867", "bodyText": "you don't need functional style here, it complicates the flow", "author": "valfirst", "createdAt": "2020-09-22T19:21:14Z", "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java", "diffHunk": "@@ -0,0 +1,294 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.exporter;\n+\n+import static java.lang.System.lineSeparator;\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.function.FailableConsumer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.vividus.bdd.model.jbehave.Meta;\n+import org.vividus.bdd.model.jbehave.Scenario;\n+import org.vividus.bdd.model.jbehave.Story;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.xray.configuration.XrayExporterOptions;\n+import org.vividus.xray.converter.ManualStepConverter;\n+import org.vividus.xray.exception.SyntaxException;\n+import org.vividus.xray.facade.TestCaseParameters;\n+import org.vividus.xray.facade.XrayFacade;\n+import org.vividus.xray.reader.JsonResourceReader;\n+import org.vividus.xray.reader.JsonResourceReader.FileEntry;\n+\n+@Component\n+public class XrayExporter\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(XrayExporter.class);\n+\n+    private static final String SEMICOLON = \";\";\n+\n+    @Autowired private XrayExporterOptions xrayExporterOptions;\n+    @Autowired private XrayFacade xrayFacade;\n+    @Autowired private JiraFacade jiraFacade;\n+\n+    private final List<ErrorExportEntry> errors = new ArrayList<>();\n+\n+    public void exportResults() throws IOException\n+    {\n+        performWithStories(story ->", "originalCommit": "9c57a7c4d887df371265da8a98843c712b29e29d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ab08cda9eb1d46b21afcda4f413643946a8e127e", "chunk": "diff --git a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java\nindex 1c0c4c69f..804a13aed 100644\n--- a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java\n+++ b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java\n\n@@ -34,7 +34,6 @@ import com.fasterxml.jackson.databind.DeserializationFeature;\n import com.fasterxml.jackson.databind.ObjectMapper;\n \n import org.apache.commons.lang3.StringUtils;\n-import org.apache.commons.lang3.function.FailableConsumer;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk3ODE4OQ==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r492978189", "bodyText": "you don't need functional style here, it complicates the flow", "author": "valfirst", "createdAt": "2020-09-22T19:21:47Z", "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java", "diffHunk": "@@ -0,0 +1,294 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.exporter;\n+\n+import static java.lang.System.lineSeparator;\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.function.FailableConsumer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.vividus.bdd.model.jbehave.Meta;\n+import org.vividus.bdd.model.jbehave.Scenario;\n+import org.vividus.bdd.model.jbehave.Story;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.xray.configuration.XrayExporterOptions;\n+import org.vividus.xray.converter.ManualStepConverter;\n+import org.vividus.xray.exception.SyntaxException;\n+import org.vividus.xray.facade.TestCaseParameters;\n+import org.vividus.xray.facade.XrayFacade;\n+import org.vividus.xray.reader.JsonResourceReader;\n+import org.vividus.xray.reader.JsonResourceReader.FileEntry;\n+\n+@Component\n+public class XrayExporter\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(XrayExporter.class);\n+\n+    private static final String SEMICOLON = \";\";\n+\n+    @Autowired private XrayExporterOptions xrayExporterOptions;\n+    @Autowired private XrayFacade xrayFacade;\n+    @Autowired private JiraFacade jiraFacade;\n+\n+    private final List<ErrorExportEntry> errors = new ArrayList<>();\n+\n+    public void exportResults() throws IOException\n+    {\n+        performWithStories(story ->\n+        {\n+            LOGGER.atInfo().addArgument(story::getPath).log(\"Exporting scenarios from {} story\");\n+\n+            performWithScenario(story, scenario ->", "originalCommit": "9c57a7c4d887df371265da8a98843c712b29e29d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ab08cda9eb1d46b21afcda4f413643946a8e127e", "chunk": "diff --git a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java\nindex 1c0c4c69f..804a13aed 100644\n--- a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java\n+++ b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java\n\n@@ -34,7 +34,6 @@ import com.fasterxml.jackson.databind.DeserializationFeature;\n import com.fasterxml.jackson.databind.ObjectMapper;\n \n import org.apache.commons.lang3.StringUtils;\n-import org.apache.commons.lang3.function.FailableConsumer;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk4MTkxNA==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r492981914", "bodyText": "jiraFacade.createIssueLink(inwardIssueKey, outwardIssueKey, \"Tests\")\n->\nxrayFacade.createTestsLink(testCaseId, requirementId)?", "author": "valfirst", "createdAt": "2020-09-22T19:28:49Z", "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java", "diffHunk": "@@ -0,0 +1,294 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.exporter;\n+\n+import static java.lang.System.lineSeparator;\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.function.FailableConsumer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.vividus.bdd.model.jbehave.Meta;\n+import org.vividus.bdd.model.jbehave.Scenario;\n+import org.vividus.bdd.model.jbehave.Story;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.xray.configuration.XrayExporterOptions;\n+import org.vividus.xray.converter.ManualStepConverter;\n+import org.vividus.xray.exception.SyntaxException;\n+import org.vividus.xray.facade.TestCaseParameters;\n+import org.vividus.xray.facade.XrayFacade;\n+import org.vividus.xray.reader.JsonResourceReader;\n+import org.vividus.xray.reader.JsonResourceReader.FileEntry;\n+\n+@Component\n+public class XrayExporter\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(XrayExporter.class);\n+\n+    private static final String SEMICOLON = \";\";\n+\n+    @Autowired private XrayExporterOptions xrayExporterOptions;\n+    @Autowired private XrayFacade xrayFacade;\n+    @Autowired private JiraFacade jiraFacade;\n+\n+    private final List<ErrorExportEntry> errors = new ArrayList<>();\n+\n+    public void exportResults() throws IOException\n+    {\n+        performWithStories(story ->\n+        {\n+            LOGGER.atInfo().addArgument(story::getPath).log(\"Exporting scenarios from {} story\");\n+\n+            performWithScenario(story, scenario ->\n+            {\n+                String scenarioTitle = scenario.getTitle();\n+\n+                List<Meta> scenarioMeta = scenario.getMeta();\n+                if (isSkipped(scenarioMeta))\n+                {\n+                    LOGGER.atInfo().addArgument(scenarioTitle).log(\"Skip export of {} scenario\");\n+                    return;\n+                }\n+                LOGGER.atInfo().addArgument(scenarioTitle).log(\"Exporting {} scenario\");\n+\n+                String storyTitle = story.getPath();\n+                try\n+                {\n+                    TestCaseParameters parameters = createTestCaseParameters(storyTitle, scenario);\n+\n+                    String testCaseId = ensureOneValueOrNull(scenarioMeta, \"testCaseId\");\n+                    if (testCaseId != null)\n+                    {\n+                        updateTestCase(testCaseId, parameters);\n+                    }\n+                    else\n+                    {\n+                        testCaseId = xrayFacade.createTestCase(parameters);\n+                    }\n+                    createTestsLink(testCaseId, scenarioMeta);\n+                }\n+                catch (IOException | SyntaxException | InvalidIssueStatusException e)\n+                {\n+                    errors.add(new ErrorExportEntry(storyTitle, scenarioTitle, e.getMessage()));\n+                    LOGGER.atError().setCause(e).log(\"Got an error while exporting\");\n+                }\n+            });\n+        });\n+\n+        publishErrors();\n+    }\n+\n+    private TestCaseParameters createTestCaseParameters(String storyTitle, Scenario scenario) throws SyntaxException\n+    {\n+        String scenarioTitle = scenario.getTitle();\n+        List<Meta> scenarioMeta = scenario.getMeta();\n+\n+        TestCaseParameters parameters = new TestCaseParameters();\n+        parameters.setLabels(getMetaValues(scenarioMeta, \"xray.labels\"));\n+        parameters.setComponents(getMetaValues(scenarioMeta, \"xray.components\"));\n+        parameters.setSummary(scenarioTitle);\n+        parameters.setSteps(ManualStepConverter.convert(storyTitle, scenarioTitle, scenario.collectSteps()));\n+        return parameters;\n+    }\n+\n+    private void performWithStories(FailableConsumer<Story, IOException> storyConsumer) throws IOException\n+    {\n+        for (Story story : readStories())\n+        {\n+            storyConsumer.accept(story);\n+        }\n+    }\n+\n+    private void performWithScenario(Story story, FailableConsumer<Scenario, IOException> scenarioConsumer)\n+            throws IOException\n+    {\n+        for (Scenario scenario : story.getScenarios())\n+        {\n+            scenarioConsumer.accept(scenario);\n+        }\n+    }\n+\n+    private void publishErrors()\n+    {\n+        if (!errors.isEmpty())\n+        {\n+            LOGGER.atError().addArgument(System::lineSeparator).addArgument(() ->\n+            {\n+                StringBuilder errorBuilder = new StringBuilder();\n+                IntStream.range(0, errors.size()).forEach(index ->\n+                {\n+                    ErrorExportEntry errorEntry = errors.get(index);\n+                    errorBuilder.append(\"Error #\").append(index + 1).append(lineSeparator())\n+                                .append(\"Story: \").append(errorEntry.getStory()).append(lineSeparator())\n+                                .append(\"Scenario: \").append(errorEntry.getScenario()).append(lineSeparator())\n+                                .append(\"Error: \").append(errorEntry.getError()).append(lineSeparator());\n+                });\n+                return errorBuilder.toString();\n+            }).log(\"Errors:{}{}\");\n+        }\n+    }\n+\n+    private void createTestsLink(String inwardIssueKey, List<Meta> scenarioMeta) throws IOException, SyntaxException\n+    {\n+        String outwardIssueKey = ensureOneValueOrNull(scenarioMeta, \"requirementId\");\n+        if (outwardIssueKey != null)\n+        {\n+            jiraFacade.createIssueLink(inwardIssueKey, outwardIssueKey, \"Tests\");", "originalCommit": "9c57a7c4d887df371265da8a98843c712b29e29d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ab08cda9eb1d46b21afcda4f413643946a8e127e", "chunk": "diff --git a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java\nindex 1c0c4c69f..804a13aed 100644\n--- a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java\n+++ b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java\n\n@@ -34,7 +34,6 @@ import com.fasterxml.jackson.databind.DeserializationFeature;\n import com.fasterxml.jackson.databind.ObjectMapper;\n \n import org.apache.commons.lang3.StringUtils;\n-import org.apache.commons.lang3.function.FailableConsumer;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk4MjYyMw==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r492982623", "bodyText": "what about moving this logic to xrayFacade.updateTestCase ?", "author": "valfirst", "createdAt": "2020-09-22T19:30:03Z", "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java", "diffHunk": "@@ -0,0 +1,294 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.exporter;\n+\n+import static java.lang.System.lineSeparator;\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.function.FailableConsumer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.vividus.bdd.model.jbehave.Meta;\n+import org.vividus.bdd.model.jbehave.Scenario;\n+import org.vividus.bdd.model.jbehave.Story;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.xray.configuration.XrayExporterOptions;\n+import org.vividus.xray.converter.ManualStepConverter;\n+import org.vividus.xray.exception.SyntaxException;\n+import org.vividus.xray.facade.TestCaseParameters;\n+import org.vividus.xray.facade.XrayFacade;\n+import org.vividus.xray.reader.JsonResourceReader;\n+import org.vividus.xray.reader.JsonResourceReader.FileEntry;\n+\n+@Component\n+public class XrayExporter\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(XrayExporter.class);\n+\n+    private static final String SEMICOLON = \";\";\n+\n+    @Autowired private XrayExporterOptions xrayExporterOptions;\n+    @Autowired private XrayFacade xrayFacade;\n+    @Autowired private JiraFacade jiraFacade;\n+\n+    private final List<ErrorExportEntry> errors = new ArrayList<>();\n+\n+    public void exportResults() throws IOException\n+    {\n+        performWithStories(story ->\n+        {\n+            LOGGER.atInfo().addArgument(story::getPath).log(\"Exporting scenarios from {} story\");\n+\n+            performWithScenario(story, scenario ->\n+            {\n+                String scenarioTitle = scenario.getTitle();\n+\n+                List<Meta> scenarioMeta = scenario.getMeta();\n+                if (isSkipped(scenarioMeta))\n+                {\n+                    LOGGER.atInfo().addArgument(scenarioTitle).log(\"Skip export of {} scenario\");\n+                    return;\n+                }\n+                LOGGER.atInfo().addArgument(scenarioTitle).log(\"Exporting {} scenario\");\n+\n+                String storyTitle = story.getPath();\n+                try\n+                {\n+                    TestCaseParameters parameters = createTestCaseParameters(storyTitle, scenario);\n+\n+                    String testCaseId = ensureOneValueOrNull(scenarioMeta, \"testCaseId\");\n+                    if (testCaseId != null)\n+                    {\n+                        updateTestCase(testCaseId, parameters);\n+                    }\n+                    else\n+                    {\n+                        testCaseId = xrayFacade.createTestCase(parameters);\n+                    }\n+                    createTestsLink(testCaseId, scenarioMeta);\n+                }\n+                catch (IOException | SyntaxException | InvalidIssueStatusException e)\n+                {\n+                    errors.add(new ErrorExportEntry(storyTitle, scenarioTitle, e.getMessage()));\n+                    LOGGER.atError().setCause(e).log(\"Got an error while exporting\");\n+                }\n+            });\n+        });\n+\n+        publishErrors();\n+    }\n+\n+    private TestCaseParameters createTestCaseParameters(String storyTitle, Scenario scenario) throws SyntaxException\n+    {\n+        String scenarioTitle = scenario.getTitle();\n+        List<Meta> scenarioMeta = scenario.getMeta();\n+\n+        TestCaseParameters parameters = new TestCaseParameters();\n+        parameters.setLabels(getMetaValues(scenarioMeta, \"xray.labels\"));\n+        parameters.setComponents(getMetaValues(scenarioMeta, \"xray.components\"));\n+        parameters.setSummary(scenarioTitle);\n+        parameters.setSteps(ManualStepConverter.convert(storyTitle, scenarioTitle, scenario.collectSteps()));\n+        return parameters;\n+    }\n+\n+    private void performWithStories(FailableConsumer<Story, IOException> storyConsumer) throws IOException\n+    {\n+        for (Story story : readStories())\n+        {\n+            storyConsumer.accept(story);\n+        }\n+    }\n+\n+    private void performWithScenario(Story story, FailableConsumer<Scenario, IOException> scenarioConsumer)\n+            throws IOException\n+    {\n+        for (Scenario scenario : story.getScenarios())\n+        {\n+            scenarioConsumer.accept(scenario);\n+        }\n+    }\n+\n+    private void publishErrors()\n+    {\n+        if (!errors.isEmpty())\n+        {\n+            LOGGER.atError().addArgument(System::lineSeparator).addArgument(() ->\n+            {\n+                StringBuilder errorBuilder = new StringBuilder();\n+                IntStream.range(0, errors.size()).forEach(index ->\n+                {\n+                    ErrorExportEntry errorEntry = errors.get(index);\n+                    errorBuilder.append(\"Error #\").append(index + 1).append(lineSeparator())\n+                                .append(\"Story: \").append(errorEntry.getStory()).append(lineSeparator())\n+                                .append(\"Scenario: \").append(errorEntry.getScenario()).append(lineSeparator())\n+                                .append(\"Error: \").append(errorEntry.getError()).append(lineSeparator());\n+                });\n+                return errorBuilder.toString();\n+            }).log(\"Errors:{}{}\");\n+        }\n+    }\n+\n+    private void createTestsLink(String inwardIssueKey, List<Meta> scenarioMeta) throws IOException, SyntaxException\n+    {\n+        String outwardIssueKey = ensureOneValueOrNull(scenarioMeta, \"requirementId\");\n+        if (outwardIssueKey != null)\n+        {\n+            jiraFacade.createIssueLink(inwardIssueKey, outwardIssueKey, \"Tests\");\n+        }\n+    }\n+\n+    private void updateTestCase(String testCaseId, TestCaseParameters parameters)\n+            throws IOException, InvalidIssueStatusException\n+    {\n+        String status = jiraFacade.getIssueStatus(testCaseId);\n+\n+        if (xrayExporterOptions.getEditableStatuses().stream()\n+                .noneMatch(s -> StringUtils.equalsIgnoreCase(s, status)))\n+        {\n+            throw new InvalidIssueStatusException(testCaseId, status);\n+        }", "originalCommit": "9c57a7c4d887df371265da8a98843c712b29e29d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ab08cda9eb1d46b21afcda4f413643946a8e127e", "chunk": "diff --git a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java\nindex 1c0c4c69f..804a13aed 100644\n--- a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java\n+++ b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java\n\n@@ -34,7 +34,6 @@ import com.fasterxml.jackson.databind.DeserializationFeature;\n import com.fasterxml.jackson.databind.ObjectMapper;\n \n import org.apache.commons.lang3.StringUtils;\n-import org.apache.commons.lang3.function.FailableConsumer;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk4Mzk5Nw==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r492983997", "bodyText": "Invalid != non-editable - either change default exception message, or pass the full message as constructor parameters, or change exception class name", "author": "valfirst", "createdAt": "2020-09-22T19:32:38Z", "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java", "diffHunk": "@@ -0,0 +1,294 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.exporter;\n+\n+import static java.lang.System.lineSeparator;\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.function.FailableConsumer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.vividus.bdd.model.jbehave.Meta;\n+import org.vividus.bdd.model.jbehave.Scenario;\n+import org.vividus.bdd.model.jbehave.Story;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.xray.configuration.XrayExporterOptions;\n+import org.vividus.xray.converter.ManualStepConverter;\n+import org.vividus.xray.exception.SyntaxException;\n+import org.vividus.xray.facade.TestCaseParameters;\n+import org.vividus.xray.facade.XrayFacade;\n+import org.vividus.xray.reader.JsonResourceReader;\n+import org.vividus.xray.reader.JsonResourceReader.FileEntry;\n+\n+@Component\n+public class XrayExporter\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(XrayExporter.class);\n+\n+    private static final String SEMICOLON = \";\";\n+\n+    @Autowired private XrayExporterOptions xrayExporterOptions;\n+    @Autowired private XrayFacade xrayFacade;\n+    @Autowired private JiraFacade jiraFacade;\n+\n+    private final List<ErrorExportEntry> errors = new ArrayList<>();\n+\n+    public void exportResults() throws IOException\n+    {\n+        performWithStories(story ->\n+        {\n+            LOGGER.atInfo().addArgument(story::getPath).log(\"Exporting scenarios from {} story\");\n+\n+            performWithScenario(story, scenario ->\n+            {\n+                String scenarioTitle = scenario.getTitle();\n+\n+                List<Meta> scenarioMeta = scenario.getMeta();\n+                if (isSkipped(scenarioMeta))\n+                {\n+                    LOGGER.atInfo().addArgument(scenarioTitle).log(\"Skip export of {} scenario\");\n+                    return;\n+                }\n+                LOGGER.atInfo().addArgument(scenarioTitle).log(\"Exporting {} scenario\");\n+\n+                String storyTitle = story.getPath();\n+                try\n+                {\n+                    TestCaseParameters parameters = createTestCaseParameters(storyTitle, scenario);\n+\n+                    String testCaseId = ensureOneValueOrNull(scenarioMeta, \"testCaseId\");\n+                    if (testCaseId != null)\n+                    {\n+                        updateTestCase(testCaseId, parameters);\n+                    }\n+                    else\n+                    {\n+                        testCaseId = xrayFacade.createTestCase(parameters);\n+                    }\n+                    createTestsLink(testCaseId, scenarioMeta);\n+                }\n+                catch (IOException | SyntaxException | InvalidIssueStatusException e)\n+                {\n+                    errors.add(new ErrorExportEntry(storyTitle, scenarioTitle, e.getMessage()));\n+                    LOGGER.atError().setCause(e).log(\"Got an error while exporting\");\n+                }\n+            });\n+        });\n+\n+        publishErrors();\n+    }\n+\n+    private TestCaseParameters createTestCaseParameters(String storyTitle, Scenario scenario) throws SyntaxException\n+    {\n+        String scenarioTitle = scenario.getTitle();\n+        List<Meta> scenarioMeta = scenario.getMeta();\n+\n+        TestCaseParameters parameters = new TestCaseParameters();\n+        parameters.setLabels(getMetaValues(scenarioMeta, \"xray.labels\"));\n+        parameters.setComponents(getMetaValues(scenarioMeta, \"xray.components\"));\n+        parameters.setSummary(scenarioTitle);\n+        parameters.setSteps(ManualStepConverter.convert(storyTitle, scenarioTitle, scenario.collectSteps()));\n+        return parameters;\n+    }\n+\n+    private void performWithStories(FailableConsumer<Story, IOException> storyConsumer) throws IOException\n+    {\n+        for (Story story : readStories())\n+        {\n+            storyConsumer.accept(story);\n+        }\n+    }\n+\n+    private void performWithScenario(Story story, FailableConsumer<Scenario, IOException> scenarioConsumer)\n+            throws IOException\n+    {\n+        for (Scenario scenario : story.getScenarios())\n+        {\n+            scenarioConsumer.accept(scenario);\n+        }\n+    }\n+\n+    private void publishErrors()\n+    {\n+        if (!errors.isEmpty())\n+        {\n+            LOGGER.atError().addArgument(System::lineSeparator).addArgument(() ->\n+            {\n+                StringBuilder errorBuilder = new StringBuilder();\n+                IntStream.range(0, errors.size()).forEach(index ->\n+                {\n+                    ErrorExportEntry errorEntry = errors.get(index);\n+                    errorBuilder.append(\"Error #\").append(index + 1).append(lineSeparator())\n+                                .append(\"Story: \").append(errorEntry.getStory()).append(lineSeparator())\n+                                .append(\"Scenario: \").append(errorEntry.getScenario()).append(lineSeparator())\n+                                .append(\"Error: \").append(errorEntry.getError()).append(lineSeparator());\n+                });\n+                return errorBuilder.toString();\n+            }).log(\"Errors:{}{}\");\n+        }\n+    }\n+\n+    private void createTestsLink(String inwardIssueKey, List<Meta> scenarioMeta) throws IOException, SyntaxException\n+    {\n+        String outwardIssueKey = ensureOneValueOrNull(scenarioMeta, \"requirementId\");\n+        if (outwardIssueKey != null)\n+        {\n+            jiraFacade.createIssueLink(inwardIssueKey, outwardIssueKey, \"Tests\");\n+        }\n+    }\n+\n+    private void updateTestCase(String testCaseId, TestCaseParameters parameters)\n+            throws IOException, InvalidIssueStatusException\n+    {\n+        String status = jiraFacade.getIssueStatus(testCaseId);\n+\n+        if (xrayExporterOptions.getEditableStatuses().stream()\n+                .noneMatch(s -> StringUtils.equalsIgnoreCase(s, status)))\n+        {\n+            throw new InvalidIssueStatusException(testCaseId, status);\n+        }\n+        else\n+        {\n+            xrayFacade.updateTestCase(testCaseId, parameters);\n+        }\n+    }\n+\n+    private List<Story> readStories() throws IOException\n+    {\n+        ObjectMapper objectMapper = new ObjectMapper().configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,\n+                false);\n+\n+        List<Story> stories = new ArrayList<>();\n+        for (FileEntry jsonResult : getJsonResultsFiles())\n+        {\n+            LOGGER.atInfo().addArgument(jsonResult::getPath).log(\"Parsing {}\");\n+            stories.add(objectMapper.readValue(jsonResult.getContent(), Story.class));\n+        }\n+        return stories;\n+    }\n+\n+    private List<FileEntry> getJsonResultsFiles() throws IOException\n+    {\n+        Path jsonResiltsDirectory = xrayExporterOptions.getJsonResultsDirectory();\n+        List<FileEntry> jsonFiles = JsonResourceReader.readFrom(jsonResiltsDirectory);\n+\n+        notEmpty(jsonFiles, \"The directory '%s' does not contain needed JSON files\", jsonResiltsDirectory);\n+        String jsonFilePaths = jsonFiles.stream().map(FileEntry::getPath)\n+                .collect(Collectors.collectingAndThen(Collectors.toList(), XrayExporter::join));\n+        LOGGER.atInfo().addArgument(jsonFilePaths).log(\"JSON files: {}\");\n+        return jsonFiles;\n+    }\n+\n+    private static Set<String> getMetaValues(List<Meta> scenarioMeta, String metaName)\n+    {\n+        return getMetaValuesStream(scenarioMeta, metaName).collect(Collectors.toCollection(LinkedHashSet::new));\n+    }\n+\n+    private static String ensureOneValueOrNull(List<Meta> scenarioMeta, String metaName) throws SyntaxException\n+    {\n+        List<String> values = getMetaValuesStream(scenarioMeta, metaName).collect(Collectors.toList());\n+        if (values.size() > 1)\n+        {\n+            throw new SyntaxException(String.format(\"Only one '%s' can be specified for a test case, but got: %s\",\n+                    metaName, join(values)));\n+        }\n+        return values.isEmpty() ? null : values.iterator().next();\n+    }\n+\n+    private static String join(Iterable<String> iterable)\n+    {\n+        return StringUtils.join(iterable, \", \");\n+    }\n+\n+    private static Stream<String> getMetaValuesStream(List<Meta> scenarioMeta, String metaName)\n+    {\n+        return asStream(scenarioMeta).filter(m -> metaName.equals(m.getName()) && !m.getValue().isEmpty())\n+                                     .map(Meta::getValue)\n+                                     .map(String::trim)\n+                                     .map(value -> StringUtils.splitPreserveAllTokens(value, SEMICOLON))\n+                                     .flatMap(Stream::of)\n+                                     .map(String::trim);\n+    }\n+\n+    private static boolean isSkipped(List<Meta> scenarioMeta)\n+    {\n+        return asStream(scenarioMeta).anyMatch(m -> \"xray.skip-export\".equals(m.getName()));\n+    }\n+\n+    private static Stream<Meta> asStream(List<Meta> scenarioMeta)\n+    {\n+        return Optional.ofNullable(scenarioMeta)\n+                       .map(List::stream)\n+                       .orElseGet(Stream::empty);\n+    }\n+\n+    private static final class ErrorExportEntry\n+    {\n+        private final String story;\n+        private final String scenario;\n+        private final String error;\n+\n+        private ErrorExportEntry(String story, String scenario, String error)\n+        {\n+            this.story = story;\n+            this.scenario = scenario;\n+            this.error = error;\n+        }\n+\n+        public String getStory()\n+        {\n+            return story;\n+        }\n+\n+        public String getScenario()\n+        {\n+            return scenario;\n+        }\n+\n+        public String getError()\n+        {\n+            return error;\n+        }\n+    }\n+\n+    private static final class InvalidIssueStatusException extends Exception\n+    {\n+        private static final long serialVersionUID = -5547086076322794984L;\n+\n+        private InvalidIssueStatusException(String testCaseId, String status)\n+        {\n+            super(\"Issue \" + testCaseId + \" is in non-editable '\" + status + \"' status\");", "originalCommit": "9c57a7c4d887df371265da8a98843c712b29e29d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ab08cda9eb1d46b21afcda4f413643946a8e127e", "chunk": "diff --git a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java\nindex 1c0c4c69f..804a13aed 100644\n--- a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java\n+++ b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java\n\n@@ -34,7 +34,6 @@ import com.fasterxml.jackson.databind.DeserializationFeature;\n import com.fasterxml.jackson.databind.ObjectMapper;\n \n import org.apache.commons.lang3.StringUtils;\n-import org.apache.commons.lang3.function.FailableConsumer;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk4NzU1MQ==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r492987551", "bodyText": "will we ever have the necessity to create test cases in different projects?", "author": "valfirst", "createdAt": "2020-09-22T19:39:33Z", "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/facade/XrayFacade.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.facade;\n+\n+import java.io.IOException;\n+\n+import javax.annotation.PostConstruct;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.util.json.JsonPathUtils;\n+import org.vividus.xray.configuration.XrayExporterOptions;\n+import org.vividus.xray.databind.ManualTestCaseSerializer;\n+import org.vividus.xray.model.ManualTestCase;\n+\n+@Component\n+public class XrayFacade\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(XrayFacade.class);\n+\n+    @Autowired private ManualTestCaseSerializer manualTestSerializer;\n+    @Autowired private XrayExporterOptions xrayExporterOptions;\n+    @Autowired private JiraFacade jiraFacade;\n+\n+    private ObjectMapper objectMapper;\n+\n+    @PostConstruct\n+    public void init()\n+    {\n+        objectMapper = new ObjectMapper()\n+                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)\n+                .registerModule(new SimpleModule().addSerializer(ManualTestCase.class, manualTestSerializer));\n+    }\n+\n+    public String createTestCase(TestCaseParameters testCaseParameters) throws IOException\n+    {\n+        String createTestRequest = objectMapper.writeValueAsString(createManualTest(testCaseParameters));\n+        LOGGER.atInfo().addArgument(createTestRequest).log(\"Creating Test Case: {}\");\n+        String response = jiraFacade.createIssue(createTestRequest);\n+        String issueKey = JsonPathUtils.getData(response, \"$.key\");\n+        LOGGER.atInfo().addArgument(issueKey).log(\"Test with key {} has been created\");\n+        return issueKey;\n+    }\n+\n+    public void updateTestCase(String testCaseKey, TestCaseParameters testCaseParameters) throws IOException\n+    {\n+        String updateTestRequest = objectMapper.writeValueAsString(createManualTest(testCaseParameters));\n+        LOGGER.atInfo().addArgument(testCaseKey)\n+                       .addArgument(updateTestRequest)\n+                       .log(\"Updating Test Case with ID {}: {}\");\n+        jiraFacade.updateIssue(testCaseKey, updateTestRequest);\n+        LOGGER.atInfo().addArgument(testCaseKey).log(\"Test with key {} has been updated\");\n+    }\n+\n+    private ManualTestCase createManualTest(TestCaseParameters testCaseParameters)\n+    {\n+        ManualTestCase manualTest = new ManualTestCase();\n+        manualTest.setProjectKey(xrayExporterOptions.getProjectKey());", "originalCommit": "9c57a7c4d887df371265da8a98843c712b29e29d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAyMDEyMQ==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r493020121", "bodyText": "don't think so, but are you asking because TestCaseParameters and ManualTestCase are very similar so we can get rid of one of these classes?", "author": "uarlouski", "createdAt": "2020-09-22T20:40:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk4NzU1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAyMDc2OQ==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r493020769", "bodyText": "I just didn't want to clutter serializer with xray options so to make for it available only the data it can use for serializing", "author": "uarlouski", "createdAt": "2020-09-22T20:41:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk4NzU1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAzMzg5MA==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r493033890", "bodyText": "I think 'projectKey' should be a field of xrayFacade", "author": "valfirst", "createdAt": "2020-09-22T21:06:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk4NzU1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "ab08cda9eb1d46b21afcda4f413643946a8e127e", "chunk": "diff --git a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/facade/XrayFacade.java b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/facade/XrayFacade.java\nindex 584ef8ab6..072a4c2b5 100644\n--- a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/facade/XrayFacade.java\n+++ b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/facade/XrayFacade.java\n\n@@ -24,6 +24,7 @@ import com.fasterxml.jackson.databind.DeserializationFeature;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.module.SimpleModule;\n \n+import org.apache.commons.lang3.StringUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n"}}, {"oid": "ab08cda9eb1d46b21afcda4f413643946a8e127e", "url": "https://github.com/vividus-framework/vividus/commit/ab08cda9eb1d46b21afcda4f413643946a8e127e", "message": "Add Jira Xray integration", "committedDate": "2020-09-22T20:34:05Z", "type": "forcePushed"}, {"oid": "290c7fd6cd15406e17f1c742d67e30b85a5efcba", "url": "https://github.com/vividus-framework/vividus/commit/290c7fd6cd15406e17f1c742d67e30b85a5efcba", "message": "Add Jira Xray integration", "committedDate": "2020-09-22T20:43:22Z", "type": "forcePushed"}, {"oid": "b0ca5de97355d4839f875bffed631327a27bad4c", "url": "https://github.com/vividus-framework/vividus/commit/b0ca5de97355d4839f875bffed631327a27bad4c", "message": "Add Jira Xray integration", "committedDate": "2020-09-23T07:19:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI1NjA4NA==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r493256084", "bodyText": "I think it can be inlined", "author": "valfirst", "createdAt": "2020-09-23T07:27:04Z", "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/facade/XrayFacade.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.facade;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.util.json.JsonPathUtils;\n+import org.vividus.xray.databind.ManualTestCaseSerializer;\n+import org.vividus.xray.model.ManualTestCase;\n+\n+public class XrayFacade\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(XrayFacade.class);\n+\n+    private final String projectKey;\n+    private final List<String> editableStatuses;\n+    private final JiraFacade jiraFacade;\n+    private final ObjectMapper objectMapper;\n+\n+    public XrayFacade(String projectKey, List<String> editableStatuses, JiraFacade jiraFacade,\n+            ManualTestCaseSerializer manualTestSerializer)\n+    {\n+        this.jiraFacade = jiraFacade;\n+        this.projectKey = projectKey;\n+        this.editableStatuses = editableStatuses;\n+        this.objectMapper = new ObjectMapper()\n+                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)\n+                .registerModule(new SimpleModule().addSerializer(ManualTestCase.class, manualTestSerializer));\n+    }\n+\n+    public String createTestCase(TestCaseParameters testCaseParameters) throws IOException\n+    {\n+        String createTestRequest = objectMapper.writeValueAsString(createManualTest(testCaseParameters));\n+        LOGGER.atInfo().addArgument(createTestRequest).log(\"Creating Test Case: {}\");\n+        String response = jiraFacade.createIssue(createTestRequest);\n+        String issueKey = JsonPathUtils.getData(response, \"$.key\");\n+        LOGGER.atInfo().addArgument(issueKey).log(\"Test with key {} has been created\");\n+        return issueKey;\n+    }\n+\n+    public void updateTestCase(String testCaseKey, TestCaseParameters testCaseParameters)\n+            throws IOException, NonEditableIssueStateException\n+    {\n+        checkIfIssueEditable(testCaseKey);\n+        String updateTestRequest = objectMapper.writeValueAsString(createManualTest(testCaseParameters));\n+        LOGGER.atInfo().addArgument(testCaseKey)\n+                       .addArgument(updateTestRequest)\n+                       .log(\"Updating Test Case with ID {}: {}\");\n+        jiraFacade.updateIssue(testCaseKey, updateTestRequest);\n+        LOGGER.atInfo().addArgument(testCaseKey).log(\"Test with key {} has been updated\");\n+    }\n+\n+    private void checkIfIssueEditable(String issueKey) throws IOException, NonEditableIssueStateException\n+    {\n+        String status = jiraFacade.getIssueStatus(issueKey);\n+\n+        if (editableStatuses.stream().noneMatch(s -> StringUtils.equalsIgnoreCase(s, status)))\n+        {\n+            throw new NonEditableIssueStateException(issueKey, status);\n+        }\n+    }\n+\n+    public void createTestsLink(String testCaseId, String requirementId) throws IOException\n+    {\n+        String linkType = \"Tests\";\n+        LOGGER.atInfo().addArgument(linkType)\n+                       .addArgument(testCaseId)\n+                       .addArgument(requirementId)\n+                       .log(\"Create '{}' link from {} to {}\");\n+        jiraFacade.createIssueLink(testCaseId, requirementId, linkType);\n+    }\n+\n+    private ManualTestCase createManualTest(TestCaseParameters testCaseParameters)\n+    {\n+        ManualTestCase manualTest = new ManualTestCase();\n+        manualTest.setProjectKey(projectKey);\n+        String summary = testCaseParameters.getSummary();", "originalCommit": "b0ca5de97355d4839f875bffed631327a27bad4c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "be11cc14acb702d1ed50cf393252e32a410da176", "chunk": "diff --git a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/facade/XrayFacade.java b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/facade/XrayFacade.java\nindex b4dd34e93..b27e9ae1b 100644\n--- a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/facade/XrayFacade.java\n+++ b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/facade/XrayFacade.java\n\n@@ -62,7 +62,7 @@ public class XrayFacade\n     }\n \n     public void updateTestCase(String testCaseKey, TestCaseParameters testCaseParameters)\n-            throws IOException, NonEditableIssueStateException\n+            throws IOException, NonEditableIssueStatusException\n     {\n         checkIfIssueEditable(testCaseKey);\n         String updateTestRequest = objectMapper.writeValueAsString(createManualTest(testCaseParameters));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI1NjMzNQ==", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r493256335", "bodyText": "State -> Status", "author": "valfirst", "createdAt": "2020-09-23T07:27:26Z", "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/facade/XrayFacade.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.facade;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.util.json.JsonPathUtils;\n+import org.vividus.xray.databind.ManualTestCaseSerializer;\n+import org.vividus.xray.model.ManualTestCase;\n+\n+public class XrayFacade\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(XrayFacade.class);\n+\n+    private final String projectKey;\n+    private final List<String> editableStatuses;\n+    private final JiraFacade jiraFacade;\n+    private final ObjectMapper objectMapper;\n+\n+    public XrayFacade(String projectKey, List<String> editableStatuses, JiraFacade jiraFacade,\n+            ManualTestCaseSerializer manualTestSerializer)\n+    {\n+        this.jiraFacade = jiraFacade;\n+        this.projectKey = projectKey;\n+        this.editableStatuses = editableStatuses;\n+        this.objectMapper = new ObjectMapper()\n+                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)\n+                .registerModule(new SimpleModule().addSerializer(ManualTestCase.class, manualTestSerializer));\n+    }\n+\n+    public String createTestCase(TestCaseParameters testCaseParameters) throws IOException\n+    {\n+        String createTestRequest = objectMapper.writeValueAsString(createManualTest(testCaseParameters));\n+        LOGGER.atInfo().addArgument(createTestRequest).log(\"Creating Test Case: {}\");\n+        String response = jiraFacade.createIssue(createTestRequest);\n+        String issueKey = JsonPathUtils.getData(response, \"$.key\");\n+        LOGGER.atInfo().addArgument(issueKey).log(\"Test with key {} has been created\");\n+        return issueKey;\n+    }\n+\n+    public void updateTestCase(String testCaseKey, TestCaseParameters testCaseParameters)\n+            throws IOException, NonEditableIssueStateException\n+    {\n+        checkIfIssueEditable(testCaseKey);\n+        String updateTestRequest = objectMapper.writeValueAsString(createManualTest(testCaseParameters));\n+        LOGGER.atInfo().addArgument(testCaseKey)\n+                       .addArgument(updateTestRequest)\n+                       .log(\"Updating Test Case with ID {}: {}\");\n+        jiraFacade.updateIssue(testCaseKey, updateTestRequest);\n+        LOGGER.atInfo().addArgument(testCaseKey).log(\"Test with key {} has been updated\");\n+    }\n+\n+    private void checkIfIssueEditable(String issueKey) throws IOException, NonEditableIssueStateException\n+    {\n+        String status = jiraFacade.getIssueStatus(issueKey);\n+\n+        if (editableStatuses.stream().noneMatch(s -> StringUtils.equalsIgnoreCase(s, status)))\n+        {\n+            throw new NonEditableIssueStateException(issueKey, status);\n+        }\n+    }\n+\n+    public void createTestsLink(String testCaseId, String requirementId) throws IOException\n+    {\n+        String linkType = \"Tests\";\n+        LOGGER.atInfo().addArgument(linkType)\n+                       .addArgument(testCaseId)\n+                       .addArgument(requirementId)\n+                       .log(\"Create '{}' link from {} to {}\");\n+        jiraFacade.createIssueLink(testCaseId, requirementId, linkType);\n+    }\n+\n+    private ManualTestCase createManualTest(TestCaseParameters testCaseParameters)\n+    {\n+        ManualTestCase manualTest = new ManualTestCase();\n+        manualTest.setProjectKey(projectKey);\n+        String summary = testCaseParameters.getSummary();\n+        manualTest.setSummary(summary);\n+        manualTest.setLabels(testCaseParameters.getLabels());\n+        manualTest.setComponents(testCaseParameters.getComponents());\n+        manualTest.setManualTestSteps(testCaseParameters.getSteps());\n+        return manualTest;\n+    }\n+\n+    public static final class NonEditableIssueStateException extends Exception", "originalCommit": "b0ca5de97355d4839f875bffed631327a27bad4c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "be11cc14acb702d1ed50cf393252e32a410da176", "chunk": "diff --git a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/facade/XrayFacade.java b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/facade/XrayFacade.java\nindex b4dd34e93..b27e9ae1b 100644\n--- a/vividus-to-xray-exporter/src/main/java/org/vividus/xray/facade/XrayFacade.java\n+++ b/vividus-to-xray-exporter/src/main/java/org/vividus/xray/facade/XrayFacade.java\n\n@@ -62,7 +62,7 @@ public class XrayFacade\n     }\n \n     public void updateTestCase(String testCaseKey, TestCaseParameters testCaseParameters)\n-            throws IOException, NonEditableIssueStateException\n+            throws IOException, NonEditableIssueStatusException\n     {\n         checkIfIssueEditable(testCaseKey);\n         String updateTestRequest = objectMapper.writeValueAsString(createManualTest(testCaseParameters));\n"}}, {"oid": "be11cc14acb702d1ed50cf393252e32a410da176", "url": "https://github.com/vividus-framework/vividus/commit/be11cc14acb702d1ed50cf393252e32a410da176", "message": "Add Jira Xray integration", "committedDate": "2020-09-23T07:32:59Z", "type": "commit"}, {"oid": "be11cc14acb702d1ed50cf393252e32a410da176", "url": "https://github.com/vividus-framework/vividus/commit/be11cc14acb702d1ed50cf393252e32a410da176", "message": "Add Jira Xray integration", "committedDate": "2020-09-23T07:32:59Z", "type": "forcePushed"}]}