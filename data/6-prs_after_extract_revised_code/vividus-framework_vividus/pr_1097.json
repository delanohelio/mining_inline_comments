{"pr_number": 1097, "pr_title": "Partially migrate from PowerMock to Mockito", "pr_createdAt": "2020-11-04T13:38:24Z", "pr_url": "https://github.com/vividus-framework/vividus/pull/1097", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM1MTM2Ng==", "url": "https://github.com/vividus-framework/vividus/pull/1097#discussion_r517351366", "bodyText": "remove public and other places?", "author": "uarlouski", "createdAt": "2020-11-04T13:43:36Z", "path": "vividus-extension-selenium/src/test/java/org/vividus/proxy/ProxyServerFactoryTests.java", "diffHunk": "@@ -29,25 +33,19 @@\n import com.browserup.bup.proxy.CaptureType;\n import com.browserup.bup.proxy.dns.AdvancedHostResolver;\n \n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n+import org.junit.jupiter.api.Test;\n import org.littleshoot.proxy.MitmManager;\n import org.littleshoot.proxy.impl.ThreadPoolConfiguration;\n-import org.powermock.api.mockito.PowerMockito;\n-import org.powermock.core.classloader.annotations.PowerMockIgnore;\n-import org.powermock.core.classloader.annotations.PrepareForTest;\n-import org.powermock.modules.junit4.PowerMockRunner;\n+import org.mockito.MockedConstruction;\n import org.vividus.proxy.mitm.IMitmManagerFactory;\n import org.vividus.proxy.mitm.MitmManagerOptions;\n \n-@RunWith(PowerMockRunner.class)\n-@PowerMockIgnore(\"javax.net.ssl.*\")\n public class ProxyServerFactoryTests", "originalCommit": "fcf11df76473f3517a648a04ba027a5602ca6cad", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ef0b6ea747e06bccaf648260457ae997a91e823", "chunk": "diff --git a/vividus-extension-selenium/src/test/java/org/vividus/proxy/ProxyServerFactoryTests.java b/vividus-extension-selenium/src/test/java/org/vividus/proxy/ProxyServerFactoryTests.java\nindex 9b44838a..d65f5766 100644\n--- a/vividus-extension-selenium/src/test/java/org/vividus/proxy/ProxyServerFactoryTests.java\n+++ b/vividus-extension-selenium/src/test/java/org/vividus/proxy/ProxyServerFactoryTests.java\n\n@@ -40,7 +40,7 @@ import org.mockito.MockedConstruction;\n import org.vividus.proxy.mitm.IMitmManagerFactory;\n import org.vividus.proxy.mitm.MitmManagerOptions;\n \n-public class ProxyServerFactoryTests\n+class ProxyServerFactoryTests\n {\n     private final ProxyServerFactory proxyServerFactory = new ProxyServerFactory();\n \n"}}, {"oid": "8ef0b6ea747e06bccaf648260457ae997a91e823", "url": "https://github.com/vividus-framework/vividus/commit/8ef0b6ea747e06bccaf648260457ae997a91e823", "message": "Partially migrate from PowerMock to Mockito", "committedDate": "2020-11-04T14:06:30Z", "type": "forcePushed"}, {"oid": "cb74115f22b5b481492bb62ad8d4e6c112e82859", "url": "https://github.com/vividus-framework/vividus/commit/cb74115f22b5b481492bb62ad8d4e6c112e82859", "message": "Partially migrate from PowerMock to Mockito", "committedDate": "2020-11-04T14:23:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM3MTQwNw==", "url": "https://github.com/vividus-framework/vividus/pull/1097#discussion_r517371407", "bodyText": "times(0) -> never()", "author": "ikalinin1", "createdAt": "2020-11-04T14:12:20Z", "path": "vividus-extension-selenium/src/test/java/org/vividus/proxy/ProxyServerFactoryTests.java", "diffHunk": "@@ -57,53 +55,55 @@ public void testCreateProxyServer()\n     }\n \n     @Test\n-    @PrepareForTest({BrowserUpProxyServer.class, ThreadPoolConfiguration.class, ProxyServerFactory.class})\n-    public void testCreateProxyServerConfig() throws Exception\n+    void testCreateProxyServerConfig()\n     {\n         MitmManagerOptions mitmManagerOptions = mock(MitmManagerOptions.class);\n         IMitmManagerFactory mitmManagerFactory = mock(IMitmManagerFactory.class);\n         MitmManager mitmManager = mock(MitmManager.class);\n         when(mitmManagerFactory.createMitmManager(mitmManagerOptions)).thenReturn(mitmManager);\n-        BrowserUpProxyServer mockedServer = mock(BrowserUpProxyServer.class);\n-        PowerMockito.whenNew(BrowserUpProxyServer.class).withNoArguments().thenReturn(mockedServer);\n-        ThreadPoolConfiguration mockedConfig = mock(ThreadPoolConfiguration.class);\n-        PowerMockito.whenNew(ThreadPoolConfiguration.class).withNoArguments().thenReturn(mockedConfig);\n-        AdvancedHostResolver hostNameResolver = mock(AdvancedHostResolver.class);\n \n-        boolean trustAllServers = true;\n-        proxyServerFactory.setMitmManagerOptions(mitmManagerOptions);\n-        proxyServerFactory.setMitmManagerFactory(mitmManagerFactory);\n-        proxyServerFactory.setTrustAllServers(trustAllServers);\n-        proxyServerFactory.setMitmEnabled(true);\n-        proxyServerFactory.setAdvancedHostResolver(hostNameResolver);\n-        proxyServerFactory.setCaptureTypes(CaptureType.getAllContentCaptureTypes());\n-        proxyServerFactory.createProxyServer();\n-        int expectedThreadsCount = 16;\n-        verify(mockedConfig).withClientToProxyWorkerThreads(expectedThreadsCount);\n-        verify(mockedConfig).withProxyToServerWorkerThreads(expectedThreadsCount);\n-        verify(mockedServer).setTrustAllServers(trustAllServers);\n-        verify(mockedServer).setMitmManager(mitmManager);\n-        verify(mockedServer).setThreadPoolConfiguration(mockedConfig);\n-        verify(mockedServer).setHostNameResolver(hostNameResolver);\n-        verify(mockedServer).enableHarCaptureTypes(CaptureType.getAllContentCaptureTypes());\n+        try (MockedConstruction<BrowserUpProxyServer> mockedServer = mockConstruction(BrowserUpProxyServer.class);\n+                MockedConstruction<ThreadPoolConfiguration> mockedConfig = mockConstruction(\n+                        ThreadPoolConfiguration.class))\n+        {\n+            AdvancedHostResolver hostNameResolver = mock(AdvancedHostResolver.class);\n+\n+            boolean trustAllServers = true;\n+            proxyServerFactory.setMitmManagerOptions(mitmManagerOptions);\n+            proxyServerFactory.setMitmManagerFactory(mitmManagerFactory);\n+            proxyServerFactory.setTrustAllServers(trustAllServers);\n+            proxyServerFactory.setMitmEnabled(true);\n+            proxyServerFactory.setAdvancedHostResolver(hostNameResolver);\n+            proxyServerFactory.setCaptureTypes(CaptureType.getAllContentCaptureTypes());\n+            proxyServerFactory.createProxyServer();\n+            int expectedThreadsCount = 16;\n+\n+            assertEquals(1, mockedConfig.constructed().size());\n+            ThreadPoolConfiguration config = mockedConfig.constructed().get(0);\n+            verify(config).withClientToProxyWorkerThreads(expectedThreadsCount);\n+            verify(config).withProxyToServerWorkerThreads(expectedThreadsCount);\n+\n+            assertEquals(1, mockedServer.constructed().size());\n+            BrowserUpProxyServer server = mockedServer.constructed().get(0);\n+            verify(server).setTrustAllServers(trustAllServers);\n+            verify(server).setMitmManager(mitmManager);\n+            verify(server).setThreadPoolConfiguration(config);\n+            verify(server).setHostNameResolver(hostNameResolver);\n+            verify(server).enableHarCaptureTypes(CaptureType.getAllContentCaptureTypes());\n+        }\n     }\n \n     @Test\n-    @PrepareForTest({BrowserUpProxyServer.class, ThreadPoolConfiguration.class, ProxyServerFactory.class})\n-    public void testCreateProxyServerConfigDisableMitm() throws Exception\n+    void testCreateProxyServerConfigDisableMitm()\n     {\n-        MitmManagerOptions mitmManagerOptions = mock(MitmManagerOptions.class);\n-        IMitmManagerFactory mitmManagerFactory = mock(IMitmManagerFactory.class);\n-        MitmManager mitmManager = mock(MitmManager.class);\n-        when(mitmManagerFactory.createMitmManager(mitmManagerOptions)).thenReturn(mitmManager);\n-        BrowserUpProxyServer mockedServer = mock(BrowserUpProxyServer.class);\n-        PowerMockito.whenNew(BrowserUpProxyServer.class).withNoArguments().thenReturn(mockedServer);\n-\n-        proxyServerFactory.setMitmManagerOptions(mitmManagerOptions);\n-        proxyServerFactory.setMitmManagerFactory(mitmManagerFactory);\n-        proxyServerFactory.setMitmEnabled(true);\n-        proxyServerFactory.createProxyServer();\n+        try (MockedConstruction<BrowserUpProxyServer> mockedServer = mockConstruction(BrowserUpProxyServer.class))\n+        {\n+            proxyServerFactory.setMitmEnabled(false);\n+            proxyServerFactory.createProxyServer();\n \n-        verify(mockedServer).setMitmManager(mitmManager);\n+            assertEquals(1, mockedServer.constructed().size());\n+            BrowserUpProxyServer server = mockedServer.constructed().get(0);\n+            verify(server, times(0)).setMitmManager(any());", "originalCommit": "8ef0b6ea747e06bccaf648260457ae997a91e823", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d2ebf89f579014679c4647368e3a60a54be95595", "chunk": "diff --git a/vividus-extension-selenium/src/test/java/org/vividus/proxy/ProxyServerFactoryTests.java b/vividus-extension-selenium/src/test/java/org/vividus/proxy/ProxyServerFactoryTests.java\nindex d65f5766..c6fc7780 100644\n--- a/vividus-extension-selenium/src/test/java/org/vividus/proxy/ProxyServerFactoryTests.java\n+++ b/vividus-extension-selenium/src/test/java/org/vividus/proxy/ProxyServerFactoryTests.java\n\n@@ -103,7 +103,7 @@ class ProxyServerFactoryTests\n \n             assertEquals(1, mockedServer.constructed().size());\n             BrowserUpProxyServer server = mockedServer.constructed().get(0);\n-            verify(server, times(0)).setMitmManager(any());\n+            verify(server, never()).setMitmManager(any());\n         }\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM3MjI1Nw==", "url": "https://github.com/vividus-framework/vividus/pull/1097#discussion_r517372257", "bodyText": "times(0) -> never() ?", "author": "ikalinin1", "createdAt": "2020-11-04T14:13:34Z", "path": "vividus-extension-selenium/src/test/java/org/vividus/proxy/dns/HostNameResolverTests.java", "diffHunk": "@@ -17,96 +17,86 @@\n package org.vividus.proxy.dns;\n \n import static com.github.valfirst.slf4jtest.LoggingEvent.warn;\n-import static java.util.Collections.singletonList;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.is;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.doReturn;\n import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.mockStatic;\n import static org.mockito.Mockito.spy;\n-import static org.mockito.Mockito.when;\n+import static org.mockito.Mockito.times;\n \n import java.net.InetAddress;\n import java.net.UnknownHostException;\n-import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n \n import com.github.valfirst.slf4jtest.TestLogger;\n import com.github.valfirst.slf4jtest.TestLoggerFactory;\n+import com.github.valfirst.slf4jtest.TestLoggerFactoryExtension;\n \n-import org.junit.After;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n-import org.mockito.junit.MockitoJUnitRunner;\n-import org.powermock.api.mockito.PowerMockito;\n-import org.powermock.core.classloader.annotations.PrepareForTest;\n-import org.powermock.modules.junit4.PowerMockRunner;\n-import org.powermock.modules.junit4.PowerMockRunnerDelegate;\n+import org.mockito.MockedStatic;\n+import org.mockito.junit.jupiter.MockitoExtension;\n \n-@PrepareForTest(HostNameResolver.class)\n-@RunWith(PowerMockRunner.class)\n-@PowerMockRunnerDelegate(MockitoJUnitRunner.class)\n-public class HostNameResolverTests\n+@ExtendWith({ MockitoExtension.class, TestLoggerFactoryExtension.class })\n+class HostNameResolverTests\n {\n-    private static final TestLogger LOGGER = TestLoggerFactory.getTestLogger(HostNameResolver.class);\n-\n     private static final String HOST = \"host\";\n     private static final String IP_ADDRESS = \"1.1.1.1\";\n \n-    @Mock\n-    private InetAddress inetAddress;\n+    private final TestLogger logger = TestLoggerFactory.getTestLogger(HostNameResolver.class);\n \n-    @InjectMocks\n-    private HostNameResolver hostNameResolver;\n-\n-    @After\n-    public void clearLoggers()\n-    {\n-        TestLoggerFactory.clear();\n-    }\n+    @Mock private InetAddress inetAddress;\n+    @InjectMocks private HostNameResolver hostNameResolver;\n \n     @Test\n-    public void testResolve() throws Exception\n+    void testResolve()\n     {\n-        hostNameResolver.setDnsMappingStorage(Collections.singletonMap(HOST, IP_ADDRESS));\n-        PowerMockito.mockStatic(InetAddress.class);\n-        when(InetAddress.getByName(IP_ADDRESS)).thenReturn(inetAddress);\n-        assertEquals(singletonList(inetAddress), hostNameResolver.resolve(HOST));\n-        assertTrue(LOGGER.getLoggingEvents().isEmpty());\n-        PowerMockito.verifyStatic(InetAddress.class, never());\n-        InetAddress.getAllByName(any());\n+        hostNameResolver.setDnsMappingStorage(Map.of(HOST, IP_ADDRESS));\n+        try (MockedStatic<InetAddress> inetAddressMock = mockStatic(InetAddress.class))\n+        {\n+            inetAddressMock.when(() -> InetAddress.getByName(IP_ADDRESS)).thenReturn(inetAddress);\n+            assertEquals(List.of(inetAddress), hostNameResolver.resolve(HOST));\n+            assertTrue(logger.getLoggingEvents().isEmpty());\n+            inetAddressMock.verify(times(0), () -> InetAddress.getAllByName(any()));", "originalCommit": "8ef0b6ea747e06bccaf648260457ae997a91e823", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d2ebf89f579014679c4647368e3a60a54be95595", "chunk": "diff --git a/vividus-extension-selenium/src/test/java/org/vividus/proxy/dns/HostNameResolverTests.java b/vividus-extension-selenium/src/test/java/org/vividus/proxy/dns/HostNameResolverTests.java\nindex 285ff713..5e5f0534 100644\n--- a/vividus-extension-selenium/src/test/java/org/vividus/proxy/dns/HostNameResolverTests.java\n+++ b/vividus-extension-selenium/src/test/java/org/vividus/proxy/dns/HostNameResolverTests.java\n\n@@ -25,8 +25,8 @@ import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.doReturn;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.mockStatic;\n+import static org.mockito.Mockito.never;\n import static org.mockito.Mockito.spy;\n-import static org.mockito.Mockito.times;\n \n import java.net.InetAddress;\n import java.net.UnknownHostException;\n"}}, {"oid": "d2ebf89f579014679c4647368e3a60a54be95595", "url": "https://github.com/vividus-framework/vividus/commit/d2ebf89f579014679c4647368e3a60a54be95595", "message": "Partially migrate from PowerMock to Mockito", "committedDate": "2020-11-04T14:33:32Z", "type": "commit"}, {"oid": "d2ebf89f579014679c4647368e3a60a54be95595", "url": "https://github.com/vividus-framework/vividus/commit/d2ebf89f579014679c4647368e3a60a54be95595", "message": "Partially migrate from PowerMock to Mockito", "committedDate": "2020-11-04T14:33:32Z", "type": "forcePushed"}]}