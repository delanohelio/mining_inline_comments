{"pr_number": 689, "pr_title": "Add module to work with email servers", "pr_createdAt": "2020-06-22T19:44:44Z", "pr_url": "https://github.com/vividus-framework/vividus/pull/689", "timeline": [{"oid": "9c70eae0901f8b7a4fd9e2e27034b30ef9f099f4", "url": "https://github.com/vividus-framework/vividus/commit/9c70eae0901f8b7a4fd9e2e27034b30ef9f099f4", "message": "Add module to work with email servers", "committedDate": "2020-06-22T19:46:08Z", "type": "forcePushed"}, {"oid": "5ff1c68ef8698cc0009d0718d31bba1335a1c51c", "url": "https://github.com/vividus-framework/vividus/commit/5ff1c68ef8698cc0009d0718d31bba1335a1c51c", "message": "Add module to work with email servers", "committedDate": "2020-06-22T19:50:40Z", "type": "forcePushed"}, {"oid": "cc34d1bf106232b819b87267fe7d637f0097b4cd", "url": "https://github.com/vividus-framework/vividus/commit/cc34d1bf106232b819b87267fe7d637f0097b4cd", "message": "Add module to work with email servers", "committedDate": "2020-06-22T19:52:08Z", "type": "forcePushed"}, {"oid": "2e416a38b3c5d4a7da65bee7c20659de87514cd7", "url": "https://github.com/vividus-framework/vividus/commit/2e416a38b3c5d4a7da65bee7c20659de87514cd7", "message": "Add module to work with email servers", "committedDate": "2020-06-24T15:05:10Z", "type": "forcePushed"}, {"oid": "140c09fe58fedb721f4fab0e1f8278fb2c2a8758", "url": "https://github.com/vividus-framework/vividus/commit/140c09fe58fedb721f4fab0e1f8278fb2c2a8758", "message": "Add module to work with email servers", "committedDate": "2020-06-24T15:43:07Z", "type": "forcePushed"}, {"oid": "da08d7d21d7fcd792c1977799f488aaa9b7f6521", "url": "https://github.com/vividus-framework/vividus/commit/da08d7d21d7fcd792c1977799f488aaa9b7f6521", "message": "Add module to work with email servers", "committedDate": "2020-06-24T16:05:02Z", "type": "forcePushed"}, {"oid": "4a8113e5ab7f170abf874d8eaa2a643a2d597f76", "url": "https://github.com/vividus-framework/vividus/commit/4a8113e5ab7f170abf874d8eaa2a643a2d597f76", "message": "Add module to work with email servers", "committedDate": "2020-06-25T16:14:39Z", "type": "forcePushed"}, {"oid": "15751e58b231628b713f68ad8c4a706e519468c1", "url": "https://github.com/vividus-framework/vividus/commit/15751e58b231628b713f68ad8c4a706e519468c1", "message": "Add module to work with email servers", "committedDate": "2020-06-25T16:38:02Z", "type": "forcePushed"}, {"oid": "8333c365ae187ef336fd44fd4b97ea994356a684", "url": "https://github.com/vividus-framework/vividus/commit/8333c365ae187ef336fd44fd4b97ea994356a684", "message": "Add module to work with email servers", "committedDate": "2020-06-25T17:53:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyNDI1Mg==", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r445824252", "bodyText": "I think we have chains of predicates and here should be String value -> ExamplesTable value", "author": "valfirst", "createdAt": "2020-06-25T20:38:21Z", "path": "vividus-plugin-mail/src/main/java/org/vividus/bdd/converter/StringToListOfMessagePredicatesConverter.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.converter;\n+\n+import java.lang.reflect.Type;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Named;\n+import javax.mail.Message;\n+\n+import org.jbehave.core.model.ExamplesTable;\n+import org.jbehave.core.steps.ParameterConverters.AbstractParameterConverter;\n+import org.jbehave.core.steps.Parameters;\n+import org.vividus.bdd.factory.MailParameterFilterFactory;\n+\n+@Named\n+public class StringToListOfMessagePredicatesConverter extends AbstractParameterConverter<List<Predicate<Message>>>\n+{\n+    @Override\n+    public List<Predicate<Message>> convertValue(String value, Type type)\n+    {\n+        return new ExamplesTable(value).getRowsAsParameters()", "originalCommit": "8333c365ae187ef336fd44fd4b97ea994356a684", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c36e669ede444546054e5db10639096945118193", "chunk": "diff --git a/vividus-plugin-mail/src/main/java/org/vividus/bdd/converter/StringToListOfMessagePredicatesConverter.java b/vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/converter/StringToListOfMessagePredicatesConverter.java\nsimilarity index 68%\nrename from vividus-plugin-mail/src/main/java/org/vividus/bdd/converter/StringToListOfMessagePredicatesConverter.java\nrename to vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/converter/StringToListOfMessagePredicatesConverter.java\nindex a5a45be4..5ad0b584 100644\n--- a/vividus-plugin-mail/src/main/java/org/vividus/bdd/converter/StringToListOfMessagePredicatesConverter.java\n+++ b/vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/converter/StringToListOfMessagePredicatesConverter.java\n\n@@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package org.vividus.bdd.converter;\n+package org.vividus.bdd.mail.converter;\n \n import java.lang.reflect.Type;\n import java.util.List;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyNDg1OA==", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r445824858", "bodyText": "do you really need it?", "author": "valfirst", "createdAt": "2020-06-25T20:39:37Z", "path": "vividus-plugin-mail/src/main/java/org/vividus/bdd/factory/IEmailMessageFactory.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.factory;\n+\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+\n+import org.vividus.bdd.model.EmailMessage;\n+\n+public interface IEmailMessageFactory", "originalCommit": "8333c365ae187ef336fd44fd4b97ea994356a684", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c36e669ede444546054e5db10639096945118193", "chunk": "diff --git a/vividus-plugin-mail/src/main/java/org/vividus/bdd/factory/IEmailMessageFactory.java b/vividus-plugin-mail/src/main/java/org/vividus/bdd/factory/IEmailMessageFactory.java\ndeleted file mode 100644\nindex 72c44d30..00000000\n--- a/vividus-plugin-mail/src/main/java/org/vividus/bdd/factory/IEmailMessageFactory.java\n+++ /dev/null\n\n@@ -1,27 +0,0 @@\n-/*\n- * Copyright 2019-2020 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.vividus.bdd.factory;\n-\n-import javax.mail.Message;\n-import javax.mail.MessagingException;\n-\n-import org.vividus.bdd.model.EmailMessage;\n-\n-public interface IEmailMessageFactory\n-{\n-    EmailMessage create(Message message) throws MessagingException;\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyNTU4Mw==", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r445825583", "bodyText": "why do you hide IOException, but throw MessagingException?", "author": "valfirst", "createdAt": "2020-06-25T20:41:01Z", "path": "vividus-plugin-mail/src/main/java/org/vividus/bdd/factory/EmailMessageFactory.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.factory;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.inject.Named;\n+import javax.mail.BodyPart;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.Multipart;\n+import javax.mail.Part;\n+\n+import org.apache.tika.mime.MediaType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.bdd.model.EmailMessage;\n+import org.vividus.bdd.model.EmailMessageTextContent;\n+\n+@Named\n+public class EmailMessageFactory implements IEmailMessageFactory\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(EmailMessageFactory.class);\n+\n+    @Override\n+    public EmailMessage create(Message message) throws MessagingException\n+    {\n+        try\n+        {\n+            List<EmailMessageTextContent> contents = new ArrayList<>();\n+            Object content = message.getContent();\n+            if (isMultipart(content))\n+            {\n+                unwrapMultipart((Multipart) content, contents);\n+            }\n+            else\n+            {\n+                contents.add(new EmailMessageTextContent(message.getContentType(), (String) content));\n+            }\n+            return new EmailMessage(message, contents);\n+        }\n+        catch (IOException e)\n+        {\n+            throw new UncheckedIOException(e);", "originalCommit": "8333c365ae187ef336fd44fd4b97ea994356a684", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c36e669ede444546054e5db10639096945118193", "chunk": "diff --git a/vividus-plugin-mail/src/main/java/org/vividus/bdd/factory/EmailMessageFactory.java b/vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/factory/EmailMessageFactory.java\nsimilarity index 66%\nrename from vividus-plugin-mail/src/main/java/org/vividus/bdd/factory/EmailMessageFactory.java\nrename to vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/factory/EmailMessageFactory.java\nindex c20c83ca..9ab13467 100644\n--- a/vividus-plugin-mail/src/main/java/org/vividus/bdd/factory/EmailMessageFactory.java\n+++ b/vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/factory/EmailMessageFactory.java\n\n@@ -14,10 +14,9 @@\n  * limitations under the License.\n  */\n \n-package org.vividus.bdd.factory;\n+package org.vividus.bdd.mail.factory;\n \n import java.io.IOException;\n-import java.io.UncheckedIOException;\n import java.util.ArrayList;\n import java.util.List;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyNjY3Ng==", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r445826676", "bodyText": "what about lazy logging parameter extraction?", "author": "valfirst", "createdAt": "2020-06-25T20:43:12Z", "path": "vividus-plugin-mail/src/main/java/org/vividus/bdd/factory/EmailMessageFactory.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.factory;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.inject.Named;\n+import javax.mail.BodyPart;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.Multipart;\n+import javax.mail.Part;\n+\n+import org.apache.tika.mime.MediaType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.bdd.model.EmailMessage;\n+import org.vividus.bdd.model.EmailMessageTextContent;\n+\n+@Named\n+public class EmailMessageFactory implements IEmailMessageFactory\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(EmailMessageFactory.class);\n+\n+    @Override\n+    public EmailMessage create(Message message) throws MessagingException\n+    {\n+        try\n+        {\n+            List<EmailMessageTextContent> contents = new ArrayList<>();\n+            Object content = message.getContent();\n+            if (isMultipart(content))\n+            {\n+                unwrapMultipart((Multipart) content, contents);\n+            }\n+            else\n+            {\n+                contents.add(new EmailMessageTextContent(message.getContentType(), (String) content));\n+            }\n+            return new EmailMessage(message, contents);\n+        }\n+        catch (IOException e)\n+        {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    private void unwrapMultipart(Multipart multipart, List<EmailMessageTextContent> container)\n+            throws MessagingException, IOException\n+    {\n+        for (int partIndex = 0; partIndex < multipart.getCount(); partIndex++)\n+        {\n+            BodyPart part = multipart.getBodyPart(partIndex);\n+            Object content = part.getContent();\n+            if (isMultipart(content))\n+            {\n+                unwrapMultipart((Multipart) content, container);\n+                continue;\n+            }\n+            if (Part.ATTACHMENT.equalsIgnoreCase(part.getDisposition()))\n+            {\n+                LOGGER.info(\"Skip saving of attachment with the name '{}'\", part.getFileName());", "originalCommit": "8333c365ae187ef336fd44fd4b97ea994356a684", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c36e669ede444546054e5db10639096945118193", "chunk": "diff --git a/vividus-plugin-mail/src/main/java/org/vividus/bdd/factory/EmailMessageFactory.java b/vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/factory/EmailMessageFactory.java\nsimilarity index 66%\nrename from vividus-plugin-mail/src/main/java/org/vividus/bdd/factory/EmailMessageFactory.java\nrename to vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/factory/EmailMessageFactory.java\nindex c20c83ca..9ab13467 100644\n--- a/vividus-plugin-mail/src/main/java/org/vividus/bdd/factory/EmailMessageFactory.java\n+++ b/vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/factory/EmailMessageFactory.java\n\n@@ -14,10 +14,9 @@\n  * limitations under the License.\n  */\n \n-package org.vividus.bdd.factory;\n+package org.vividus.bdd.mail.factory;\n \n import java.io.IOException;\n-import java.io.UncheckedIOException;\n import java.util.ArrayList;\n import java.util.List;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyOTkzNg==", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r445829936", "bodyText": "too generic package", "author": "valfirst", "createdAt": "2020-06-25T20:49:46Z", "path": "vividus-plugin-mail/src/main/java/org/vividus/bdd/factory/EmailMessageFactory.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.factory;", "originalCommit": "8333c365ae187ef336fd44fd4b97ea994356a684", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c36e669ede444546054e5db10639096945118193", "chunk": "diff --git a/vividus-plugin-mail/src/main/java/org/vividus/bdd/factory/EmailMessageFactory.java b/vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/factory/EmailMessageFactory.java\nsimilarity index 66%\nrename from vividus-plugin-mail/src/main/java/org/vividus/bdd/factory/EmailMessageFactory.java\nrename to vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/factory/EmailMessageFactory.java\nindex c20c83ca..9ab13467 100644\n--- a/vividus-plugin-mail/src/main/java/org/vividus/bdd/factory/EmailMessageFactory.java\n+++ b/vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/factory/EmailMessageFactory.java\n\n@@ -14,10 +14,9 @@\n  * limitations under the License.\n  */\n \n-package org.vividus.bdd.factory;\n+package org.vividus.bdd.mail.factory;\n \n import java.io.IOException;\n-import java.io.UncheckedIOException;\n import java.util.ArrayList;\n import java.util.List;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgzMDA2Nw==", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r445830067", "bodyText": "too generic package", "author": "valfirst", "createdAt": "2020-06-25T20:50:01Z", "path": "vividus-plugin-mail/src/main/java/org/vividus/bdd/factory/IEmailMessageFactory.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.factory;", "originalCommit": "8333c365ae187ef336fd44fd4b97ea994356a684", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c36e669ede444546054e5db10639096945118193", "chunk": "diff --git a/vividus-plugin-mail/src/main/java/org/vividus/bdd/factory/IEmailMessageFactory.java b/vividus-plugin-mail/src/main/java/org/vividus/bdd/factory/IEmailMessageFactory.java\ndeleted file mode 100644\nindex 72c44d30..00000000\n--- a/vividus-plugin-mail/src/main/java/org/vividus/bdd/factory/IEmailMessageFactory.java\n+++ /dev/null\n\n@@ -1,27 +0,0 @@\n-/*\n- * Copyright 2019-2020 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.vividus.bdd.factory;\n-\n-import javax.mail.Message;\n-import javax.mail.MessagingException;\n-\n-import org.vividus.bdd.model.EmailMessage;\n-\n-public interface IEmailMessageFactory\n-{\n-    EmailMessage create(Message message) throws MessagingException;\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgzMDE4OA==", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r445830188", "bodyText": "too generic package", "author": "valfirst", "createdAt": "2020-06-25T20:50:13Z", "path": "vividus-plugin-mail/src/main/java/org/vividus/bdd/factory/MailParameterFilterFactory.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.factory;", "originalCommit": "8333c365ae187ef336fd44fd4b97ea994356a684", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c36e669ede444546054e5db10639096945118193", "chunk": "diff --git a/vividus-plugin-mail/src/main/java/org/vividus/bdd/factory/MailParameterFilterFactory.java b/vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/factory/MailParameterFilterFactory.java\nsimilarity index 99%\nrename from vividus-plugin-mail/src/main/java/org/vividus/bdd/factory/MailParameterFilterFactory.java\nrename to vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/factory/MailParameterFilterFactory.java\nindex 22751739..c38898c0 100644\n--- a/vividus-plugin-mail/src/main/java/org/vividus/bdd/factory/MailParameterFilterFactory.java\n+++ b/vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/factory/MailParameterFilterFactory.java\n\n@@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package org.vividus.bdd.factory;\n+package org.vividus.bdd.mail.factory;\n \n import java.time.Instant;\n import java.time.format.DateTimeParseException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgzMDI4Nw==", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r445830287", "bodyText": "too generic package", "author": "valfirst", "createdAt": "2020-06-25T20:50:24Z", "path": "vividus-plugin-mail/src/main/java/org/vividus/bdd/model/EmailMessage.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.model;", "originalCommit": "8333c365ae187ef336fd44fd4b97ea994356a684", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c36e669ede444546054e5db10639096945118193", "chunk": "diff --git a/vividus-plugin-mail/src/main/java/org/vividus/bdd/model/EmailMessage.java b/vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/model/EmailMessage.java\nsimilarity index 98%\nrename from vividus-plugin-mail/src/main/java/org/vividus/bdd/model/EmailMessage.java\nrename to vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/model/EmailMessage.java\nindex f8920553..d398fc77 100644\n--- a/vividus-plugin-mail/src/main/java/org/vividus/bdd/model/EmailMessage.java\n+++ b/vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/model/EmailMessage.java\n\n@@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package org.vividus.bdd.model;\n+package org.vividus.bdd.mail.model;\n \n import java.util.Collections;\n import java.util.Date;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgzMDM2Ng==", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r445830366", "bodyText": "too generic package", "author": "valfirst", "createdAt": "2020-06-25T20:50:33Z", "path": "vividus-plugin-mail/src/main/java/org/vividus/bdd/model/EmailMessageTextContent.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.model;", "originalCommit": "8333c365ae187ef336fd44fd4b97ea994356a684", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c36e669ede444546054e5db10639096945118193", "chunk": "diff --git a/vividus-plugin-mail/src/main/java/org/vividus/bdd/model/EmailMessageTextContent.java b/vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/model/EmailMessageTextContent.java\nsimilarity index 96%\nrename from vividus-plugin-mail/src/main/java/org/vividus/bdd/model/EmailMessageTextContent.java\nrename to vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/model/EmailMessageTextContent.java\nindex 08bdadc1..c1f1f8c6 100644\n--- a/vividus-plugin-mail/src/main/java/org/vividus/bdd/model/EmailMessageTextContent.java\n+++ b/vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/model/EmailMessageTextContent.java\n\n@@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package org.vividus.bdd.model;\n+package org.vividus.bdd.mail.model;\n \n public class EmailMessageTextContent\n {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgzMDQ0MQ==", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r445830441", "bodyText": "too generic package", "author": "valfirst", "createdAt": "2020-06-25T20:50:41Z", "path": "vividus-plugin-mail/src/main/java/org/vividus/bdd/model/MailServerConfiguration.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.model;", "originalCommit": "8333c365ae187ef336fd44fd4b97ea994356a684", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c36e669ede444546054e5db10639096945118193", "chunk": "diff --git a/vividus-plugin-mail/src/main/java/org/vividus/bdd/model/MailServerConfiguration.java b/vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/model/MailServerConfiguration.java\nsimilarity index 97%\nrename from vividus-plugin-mail/src/main/java/org/vividus/bdd/model/MailServerConfiguration.java\nrename to vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/model/MailServerConfiguration.java\nindex 40342633..68529420 100644\n--- a/vividus-plugin-mail/src/main/java/org/vividus/bdd/model/MailServerConfiguration.java\n+++ b/vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/model/MailServerConfiguration.java\n\n@@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package org.vividus.bdd.model;\n+package org.vividus.bdd.mail.model;\n \n import java.util.HashMap;\n import java.util.Map;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgzMDUxMA==", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r445830510", "bodyText": "too generic package", "author": "valfirst", "createdAt": "2020-06-25T20:50:49Z", "path": "vividus-plugin-mail/src/main/java/org/vividus/bdd/service/IMessageFetchService.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.service;", "originalCommit": "8333c365ae187ef336fd44fd4b97ea994356a684", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c36e669ede444546054e5db10639096945118193", "chunk": "diff --git a/vividus-plugin-mail/src/main/java/org/vividus/bdd/service/IMessageFetchService.java b/vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/service/IMessageFetchService.java\nsimilarity index 75%\nrename from vividus-plugin-mail/src/main/java/org/vividus/bdd/service/IMessageFetchService.java\nrename to vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/service/IMessageFetchService.java\nindex 0f8868e8..f615ca63 100644\n--- a/vividus-plugin-mail/src/main/java/org/vividus/bdd/service/IMessageFetchService.java\n+++ b/vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/service/IMessageFetchService.java\n\n@@ -14,19 +14,19 @@\n  * limitations under the License.\n  */\n \n-package org.vividus.bdd.service;\n+package org.vividus.bdd.mail.service;\n \n import java.util.List;\n import java.util.function.Predicate;\n \n import javax.mail.Message;\n-import javax.mail.MessagingException;\n \n-import org.vividus.bdd.model.EmailMessage;\n-import org.vividus.bdd.model.MailServerConfiguration;\n+import org.vividus.bdd.mail.model.EmailMessage;\n+import org.vividus.bdd.mail.model.MailServerConfiguration;\n+import org.vividus.bdd.mail.service.ImapMessageFetchService.MessageFetchServiceException;\n \n public interface IMessageFetchService\n {\n     List<EmailMessage> fetch(List<Predicate<Message>> messageFilters, MailServerConfiguration configuration)\n-            throws MessagingException;\n+            throws MessageFetchServiceException;\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgzMDYwNQ==", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r445830605", "bodyText": "too generic package", "author": "valfirst", "createdAt": "2020-06-25T20:51:01Z", "path": "vividus-plugin-mail/src/main/java/org/vividus/bdd/service/ImapMessageFetchService.java", "diffHunk": "@@ -0,0 +1,304 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.service;", "originalCommit": "8333c365ae187ef336fd44fd4b97ea994356a684", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c36e669ede444546054e5db10639096945118193", "chunk": "diff --git a/vividus-plugin-mail/src/main/java/org/vividus/bdd/service/ImapMessageFetchService.java b/vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/service/ImapMessageFetchService.java\nsimilarity index 89%\nrename from vividus-plugin-mail/src/main/java/org/vividus/bdd/service/ImapMessageFetchService.java\nrename to vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/service/ImapMessageFetchService.java\nindex a448fb11..ac975bf0 100644\n--- a/vividus-plugin-mail/src/main/java/org/vividus/bdd/service/ImapMessageFetchService.java\n+++ b/vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/service/ImapMessageFetchService.java\n\n@@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package org.vividus.bdd.service;\n+package org.vividus.bdd.mail.service;\n \n import java.time.Duration;\n import java.util.ArrayList;\n"}}, {"oid": "c36e669ede444546054e5db10639096945118193", "url": "https://github.com/vividus-framework/vividus/commit/c36e669ede444546054e5db10639096945118193", "message": "comment fixes 1 [TO SQUASH]", "committedDate": "2020-06-27T07:53:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE1Mzc5Ng==", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r450153796", "bodyText": "these lines repeated 3 times, it's recommended to move them to a new parameterized method", "author": "valfirst", "createdAt": "2020-07-06T11:19:32Z", "path": "vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/factory/MailParameterFilterFactory.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.mail.factory;\n+\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+\n+import javax.mail.Address;\n+import javax.mail.Message;\n+import javax.mail.Message.RecipientType;\n+import javax.mail.MessagingException;\n+\n+import org.apache.commons.lang3.EnumUtils;\n+import org.apache.commons.lang3.Validate;\n+import org.vividus.bdd.steps.ComparisonRule;\n+import org.vividus.bdd.steps.IComparisonRule;\n+import org.vividus.bdd.steps.StringComparisonRule;\n+\n+public enum MailParameterFilterFactory\n+{\n+    SUBJECT\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m ->\n+            {\n+                String subject = getValueSafely(m, Message::getSubject);\n+                return apply(subject, rule, variable);\n+            };\n+        }\n+    },\n+    SENT_DATE\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkDates(getValueSafely(m, Message::getSentDate), rule, variable);\n+        }\n+    },\n+    RECEIVED_DATE\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkDates(getValueSafely(m, Message::getReceivedDate), rule, variable);\n+        }\n+    },\n+    FROM\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkAddressees(rule, split(variable), getValueSafely(m, Message::getFrom));\n+        }\n+    },\n+    CC_RECIPIENTS\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkAddressees(rule, split(variable),\n+                    getValueSafely(m, msg -> msg.getRecipients(RecipientType.CC)));\n+        }\n+    },\n+    BCC_RECIPIENTS\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkAddressees(rule, split(variable),\n+                    getValueSafely(m, msg -> msg.getRecipients(RecipientType.BCC)));\n+        }\n+    },\n+    TO_RECIPIENTS\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkAddressees(rule, split(variable),\n+                    getValueSafely(m, msg -> msg.getRecipients(RecipientType.TO)));", "originalCommit": "c36e669ede444546054e5db10639096945118193", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f91a6fa847a6446386244b8e88300b661b07e95", "chunk": "diff --git a/vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/factory/MailParameterFilterFactory.java b/vividus-plugin-email/src/main/java/org/vividus/bdd/email/factory/EmailParameterFilterFactory.java\nsimilarity index 51%\nrename from vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/factory/MailParameterFilterFactory.java\nrename to vividus-plugin-email/src/main/java/org/vividus/bdd/email/factory/EmailParameterFilterFactory.java\nindex c38898c0..04097c7d 100644\n--- a/vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/factory/MailParameterFilterFactory.java\n+++ b/vividus-plugin-email/src/main/java/org/vividus/bdd/email/factory/EmailParameterFilterFactory.java\n\n@@ -14,14 +14,15 @@\n  * limitations under the License.\n  */\n \n-package org.vividus.bdd.mail.factory;\n+package org.vividus.bdd.email.factory;\n \n import java.time.Instant;\n+import java.time.format.DateTimeFormatter;\n import java.time.format.DateTimeParseException;\n+import java.time.temporal.ChronoUnit;\n import java.util.Date;\n import java.util.List;\n import java.util.Set;\n-import java.util.function.Predicate;\n import java.util.stream.Collectors;\n import java.util.stream.IntStream;\n import java.util.stream.Stream;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE1NDgwNw==", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r450154807", "bodyText": "this line is similar to FROM item", "author": "valfirst", "createdAt": "2020-07-06T11:21:54Z", "path": "vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/factory/MailParameterFilterFactory.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.mail.factory;\n+\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+\n+import javax.mail.Address;\n+import javax.mail.Message;\n+import javax.mail.Message.RecipientType;\n+import javax.mail.MessagingException;\n+\n+import org.apache.commons.lang3.EnumUtils;\n+import org.apache.commons.lang3.Validate;\n+import org.vividus.bdd.steps.ComparisonRule;\n+import org.vividus.bdd.steps.IComparisonRule;\n+import org.vividus.bdd.steps.StringComparisonRule;\n+\n+public enum MailParameterFilterFactory\n+{\n+    SUBJECT\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m ->\n+            {\n+                String subject = getValueSafely(m, Message::getSubject);\n+                return apply(subject, rule, variable);\n+            };\n+        }\n+    },\n+    SENT_DATE\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkDates(getValueSafely(m, Message::getSentDate), rule, variable);\n+        }\n+    },\n+    RECEIVED_DATE\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkDates(getValueSafely(m, Message::getReceivedDate), rule, variable);\n+        }\n+    },\n+    FROM\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkAddressees(rule, split(variable), getValueSafely(m, Message::getFrom));\n+        }\n+    },\n+    CC_RECIPIENTS\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkAddressees(rule, split(variable),\n+                    getValueSafely(m, msg -> msg.getRecipients(RecipientType.CC)));\n+        }\n+    },\n+    BCC_RECIPIENTS\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkAddressees(rule, split(variable),\n+                    getValueSafely(m, msg -> msg.getRecipients(RecipientType.BCC)));\n+        }\n+    },\n+    TO_RECIPIENTS\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkAddressees(rule, split(variable),\n+                    getValueSafely(m, msg -> msg.getRecipients(RecipientType.TO)));\n+        }\n+    },\n+    REPLY_TO\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkAddressees(rule, split(variable), getValueSafely(m, Message::getReplyTo));", "originalCommit": "c36e669ede444546054e5db10639096945118193", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f91a6fa847a6446386244b8e88300b661b07e95", "chunk": "diff --git a/vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/factory/MailParameterFilterFactory.java b/vividus-plugin-email/src/main/java/org/vividus/bdd/email/factory/EmailParameterFilterFactory.java\nsimilarity index 51%\nrename from vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/factory/MailParameterFilterFactory.java\nrename to vividus-plugin-email/src/main/java/org/vividus/bdd/email/factory/EmailParameterFilterFactory.java\nindex c38898c0..04097c7d 100644\n--- a/vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/factory/MailParameterFilterFactory.java\n+++ b/vividus-plugin-email/src/main/java/org/vividus/bdd/email/factory/EmailParameterFilterFactory.java\n\n@@ -14,14 +14,15 @@\n  * limitations under the License.\n  */\n \n-package org.vividus.bdd.mail.factory;\n+package org.vividus.bdd.email.factory;\n \n import java.time.Instant;\n+import java.time.format.DateTimeFormatter;\n import java.time.format.DateTimeParseException;\n+import java.time.temporal.ChronoUnit;\n import java.util.Date;\n import java.util.List;\n import java.util.Set;\n-import java.util.function.Predicate;\n import java.util.stream.Collectors;\n import java.util.stream.IntStream;\n import java.util.stream.Stream;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE1NTM5Mg==", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r450155392", "bodyText": "I believe we shouldn't hide exception at this level, MessagingException should be thrown and top-level handlers should process it", "author": "valfirst", "createdAt": "2020-07-06T11:23:11Z", "path": "vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/factory/MailParameterFilterFactory.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.mail.factory;\n+\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+\n+import javax.mail.Address;\n+import javax.mail.Message;\n+import javax.mail.Message.RecipientType;\n+import javax.mail.MessagingException;\n+\n+import org.apache.commons.lang3.EnumUtils;\n+import org.apache.commons.lang3.Validate;\n+import org.vividus.bdd.steps.ComparisonRule;\n+import org.vividus.bdd.steps.IComparisonRule;\n+import org.vividus.bdd.steps.StringComparisonRule;\n+\n+public enum MailParameterFilterFactory\n+{\n+    SUBJECT\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m ->\n+            {\n+                String subject = getValueSafely(m, Message::getSubject);\n+                return apply(subject, rule, variable);\n+            };\n+        }\n+    },\n+    SENT_DATE\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkDates(getValueSafely(m, Message::getSentDate), rule, variable);\n+        }\n+    },\n+    RECEIVED_DATE\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkDates(getValueSafely(m, Message::getReceivedDate), rule, variable);\n+        }\n+    },\n+    FROM\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkAddressees(rule, split(variable), getValueSafely(m, Message::getFrom));\n+        }\n+    },\n+    CC_RECIPIENTS\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkAddressees(rule, split(variable),\n+                    getValueSafely(m, msg -> msg.getRecipients(RecipientType.CC)));\n+        }\n+    },\n+    BCC_RECIPIENTS\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkAddressees(rule, split(variable),\n+                    getValueSafely(m, msg -> msg.getRecipients(RecipientType.BCC)));\n+        }\n+    },\n+    TO_RECIPIENTS\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkAddressees(rule, split(variable),\n+                    getValueSafely(m, msg -> msg.getRecipients(RecipientType.TO)));\n+        }\n+    },\n+    REPLY_TO\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkAddressees(rule, split(variable), getValueSafely(m, Message::getReplyTo));\n+        }\n+    };\n+\n+    public abstract Predicate<Message> createFilter(String rule, String variable);\n+\n+    private static <T> T getValueSafely(Message message, MessagingExceptionFunction<Message, T> getter)\n+    {\n+        try\n+        {\n+            return getter.apply(message);\n+        }\n+        catch (MessagingException e)\n+        {\n+            throw new IllegalStateException(e);", "originalCommit": "c36e669ede444546054e5db10639096945118193", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f91a6fa847a6446386244b8e88300b661b07e95", "chunk": "diff --git a/vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/factory/MailParameterFilterFactory.java b/vividus-plugin-email/src/main/java/org/vividus/bdd/email/factory/EmailParameterFilterFactory.java\nsimilarity index 51%\nrename from vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/factory/MailParameterFilterFactory.java\nrename to vividus-plugin-email/src/main/java/org/vividus/bdd/email/factory/EmailParameterFilterFactory.java\nindex c38898c0..04097c7d 100644\n--- a/vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/factory/MailParameterFilterFactory.java\n+++ b/vividus-plugin-email/src/main/java/org/vividus/bdd/email/factory/EmailParameterFilterFactory.java\n\n@@ -14,14 +14,15 @@\n  * limitations under the License.\n  */\n \n-package org.vividus.bdd.mail.factory;\n+package org.vividus.bdd.email.factory;\n \n import java.time.Instant;\n+import java.time.format.DateTimeFormatter;\n import java.time.format.DateTimeParseException;\n+import java.time.temporal.ChronoUnit;\n import java.util.Date;\n import java.util.List;\n import java.util.Set;\n-import java.util.function.Predicate;\n import java.util.stream.Collectors;\n import java.util.stream.IntStream;\n import java.util.stream.Stream;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE1NTgxMA==", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r450155810", "bodyText": "it's better to use datetime format string, instead of example", "author": "valfirst", "createdAt": "2020-07-06T11:24:13Z", "path": "vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/factory/MailParameterFilterFactory.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.mail.factory;\n+\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+\n+import javax.mail.Address;\n+import javax.mail.Message;\n+import javax.mail.Message.RecipientType;\n+import javax.mail.MessagingException;\n+\n+import org.apache.commons.lang3.EnumUtils;\n+import org.apache.commons.lang3.Validate;\n+import org.vividus.bdd.steps.ComparisonRule;\n+import org.vividus.bdd.steps.IComparisonRule;\n+import org.vividus.bdd.steps.StringComparisonRule;\n+\n+public enum MailParameterFilterFactory\n+{\n+    SUBJECT\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m ->\n+            {\n+                String subject = getValueSafely(m, Message::getSubject);\n+                return apply(subject, rule, variable);\n+            };\n+        }\n+    },\n+    SENT_DATE\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkDates(getValueSafely(m, Message::getSentDate), rule, variable);\n+        }\n+    },\n+    RECEIVED_DATE\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkDates(getValueSafely(m, Message::getReceivedDate), rule, variable);\n+        }\n+    },\n+    FROM\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkAddressees(rule, split(variable), getValueSafely(m, Message::getFrom));\n+        }\n+    },\n+    CC_RECIPIENTS\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkAddressees(rule, split(variable),\n+                    getValueSafely(m, msg -> msg.getRecipients(RecipientType.CC)));\n+        }\n+    },\n+    BCC_RECIPIENTS\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkAddressees(rule, split(variable),\n+                    getValueSafely(m, msg -> msg.getRecipients(RecipientType.BCC)));\n+        }\n+    },\n+    TO_RECIPIENTS\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkAddressees(rule, split(variable),\n+                    getValueSafely(m, msg -> msg.getRecipients(RecipientType.TO)));\n+        }\n+    },\n+    REPLY_TO\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkAddressees(rule, split(variable), getValueSafely(m, Message::getReplyTo));\n+        }\n+    };\n+\n+    public abstract Predicate<Message> createFilter(String rule, String variable);\n+\n+    private static <T> T getValueSafely(Message message, MessagingExceptionFunction<Message, T> getter)\n+    {\n+        try\n+        {\n+            return getter.apply(message);\n+        }\n+        catch (MessagingException e)\n+        {\n+            throw new IllegalStateException(e);\n+        }\n+    }\n+\n+    private static List<String> split(String value)\n+    {\n+        return Stream.of(value.split(\",\")).map(String::strip).collect(Collectors.toList());\n+    }\n+\n+    boolean checkDates(Date messageDate, String rule, String inputDate)\n+    {\n+        return apply(messageDate.toInstant(), rule, asISODateTime(inputDate));\n+    }\n+\n+    boolean checkAddressees(String rule, List<String> addresses, Address... actualAddresses)\n+    {\n+        int size = actualAddresses.length;\n+        return addresses.size() == size && IntStream.range(0, size)\n+                .allMatch(idx -> apply(actualAddresses[idx].toString(), rule, addresses.get(idx)));\n+    }\n+\n+    <T extends Comparable<T>> boolean apply(Object messageData, String rule, T input)\n+    {\n+        if (input == null)\n+        {\n+            return false;\n+        }\n+        IComparisonRule comparableRule = EnumUtils.getEnumIgnoreCase(ComparisonRule.class, rule);\n+        if (comparableRule != null)\n+        {\n+            return comparableRule.getComparisonRule(input).matches(messageData);\n+        }\n+        StringComparisonRule stringRule = EnumUtils.getEnumIgnoreCase(StringComparisonRule.class, rule);\n+        if (stringRule != null)\n+        {\n+            Validate.isTrue(input instanceof String, \"%s filter is not applicable for %s parameter\", stringRule,\n+                    this.name());\n+            return stringRule.createMatcher((String) input).matches(messageData);\n+        }\n+        throw new IllegalArgumentException(getUnknownRuleMessage(rule));\n+    }\n+\n+    private static String getUnknownRuleMessage(String unknown)\n+    {\n+        Set<String> rules = Stream.concat(Stream.of(ComparisonRule.values()), Stream.of(StringComparisonRule.values()))\n+                                  .map(Enum::name)\n+                                  .collect(Collectors.toSet());\n+\n+        return String.format(\"Unknown rule %s, please choose among the following rules: %s\", unknown, rules);\n+    }\n+\n+    private static Instant asISODateTime(String date)\n+    {\n+        try\n+        {\n+            return Instant.parse(date);\n+        }\n+        catch (DateTimeParseException e)\n+        {\n+            throw new IllegalArgumentException(\n+                    \"Please use ISO 8601 zone date time format like '2011-11-11T22:10:38.521Z'\",", "originalCommit": "c36e669ede444546054e5db10639096945118193", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f91a6fa847a6446386244b8e88300b661b07e95", "chunk": "diff --git a/vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/factory/MailParameterFilterFactory.java b/vividus-plugin-email/src/main/java/org/vividus/bdd/email/factory/EmailParameterFilterFactory.java\nsimilarity index 51%\nrename from vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/factory/MailParameterFilterFactory.java\nrename to vividus-plugin-email/src/main/java/org/vividus/bdd/email/factory/EmailParameterFilterFactory.java\nindex c38898c0..04097c7d 100644\n--- a/vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/factory/MailParameterFilterFactory.java\n+++ b/vividus-plugin-email/src/main/java/org/vividus/bdd/email/factory/EmailParameterFilterFactory.java\n\n@@ -14,14 +14,15 @@\n  * limitations under the License.\n  */\n \n-package org.vividus.bdd.mail.factory;\n+package org.vividus.bdd.email.factory;\n \n import java.time.Instant;\n+import java.time.format.DateTimeFormatter;\n import java.time.format.DateTimeParseException;\n+import java.time.temporal.ChronoUnit;\n import java.util.Date;\n import java.util.List;\n import java.util.Set;\n-import java.util.function.Predicate;\n import java.util.stream.Collectors;\n import java.util.stream.IntStream;\n import java.util.stream.Stream;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE1NjQ2Mw==", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r450156463", "bodyText": "please add org.vividus.util.function.CheckedFunction to vividus-util", "author": "valfirst", "createdAt": "2020-07-06T11:25:29Z", "path": "vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/factory/MailParameterFilterFactory.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.mail.factory;\n+\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+\n+import javax.mail.Address;\n+import javax.mail.Message;\n+import javax.mail.Message.RecipientType;\n+import javax.mail.MessagingException;\n+\n+import org.apache.commons.lang3.EnumUtils;\n+import org.apache.commons.lang3.Validate;\n+import org.vividus.bdd.steps.ComparisonRule;\n+import org.vividus.bdd.steps.IComparisonRule;\n+import org.vividus.bdd.steps.StringComparisonRule;\n+\n+public enum MailParameterFilterFactory\n+{\n+    SUBJECT\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m ->\n+            {\n+                String subject = getValueSafely(m, Message::getSubject);\n+                return apply(subject, rule, variable);\n+            };\n+        }\n+    },\n+    SENT_DATE\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkDates(getValueSafely(m, Message::getSentDate), rule, variable);\n+        }\n+    },\n+    RECEIVED_DATE\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkDates(getValueSafely(m, Message::getReceivedDate), rule, variable);\n+        }\n+    },\n+    FROM\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkAddressees(rule, split(variable), getValueSafely(m, Message::getFrom));\n+        }\n+    },\n+    CC_RECIPIENTS\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkAddressees(rule, split(variable),\n+                    getValueSafely(m, msg -> msg.getRecipients(RecipientType.CC)));\n+        }\n+    },\n+    BCC_RECIPIENTS\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkAddressees(rule, split(variable),\n+                    getValueSafely(m, msg -> msg.getRecipients(RecipientType.BCC)));\n+        }\n+    },\n+    TO_RECIPIENTS\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkAddressees(rule, split(variable),\n+                    getValueSafely(m, msg -> msg.getRecipients(RecipientType.TO)));\n+        }\n+    },\n+    REPLY_TO\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkAddressees(rule, split(variable), getValueSafely(m, Message::getReplyTo));\n+        }\n+    };\n+\n+    public abstract Predicate<Message> createFilter(String rule, String variable);\n+\n+    private static <T> T getValueSafely(Message message, MessagingExceptionFunction<Message, T> getter)\n+    {\n+        try\n+        {\n+            return getter.apply(message);\n+        }\n+        catch (MessagingException e)\n+        {\n+            throw new IllegalStateException(e);\n+        }\n+    }\n+\n+    private static List<String> split(String value)\n+    {\n+        return Stream.of(value.split(\",\")).map(String::strip).collect(Collectors.toList());\n+    }\n+\n+    boolean checkDates(Date messageDate, String rule, String inputDate)\n+    {\n+        return apply(messageDate.toInstant(), rule, asISODateTime(inputDate));\n+    }\n+\n+    boolean checkAddressees(String rule, List<String> addresses, Address... actualAddresses)\n+    {\n+        int size = actualAddresses.length;\n+        return addresses.size() == size && IntStream.range(0, size)\n+                .allMatch(idx -> apply(actualAddresses[idx].toString(), rule, addresses.get(idx)));\n+    }\n+\n+    <T extends Comparable<T>> boolean apply(Object messageData, String rule, T input)\n+    {\n+        if (input == null)\n+        {\n+            return false;\n+        }\n+        IComparisonRule comparableRule = EnumUtils.getEnumIgnoreCase(ComparisonRule.class, rule);\n+        if (comparableRule != null)\n+        {\n+            return comparableRule.getComparisonRule(input).matches(messageData);\n+        }\n+        StringComparisonRule stringRule = EnumUtils.getEnumIgnoreCase(StringComparisonRule.class, rule);\n+        if (stringRule != null)\n+        {\n+            Validate.isTrue(input instanceof String, \"%s filter is not applicable for %s parameter\", stringRule,\n+                    this.name());\n+            return stringRule.createMatcher((String) input).matches(messageData);\n+        }\n+        throw new IllegalArgumentException(getUnknownRuleMessage(rule));\n+    }\n+\n+    private static String getUnknownRuleMessage(String unknown)\n+    {\n+        Set<String> rules = Stream.concat(Stream.of(ComparisonRule.values()), Stream.of(StringComparisonRule.values()))\n+                                  .map(Enum::name)\n+                                  .collect(Collectors.toSet());\n+\n+        return String.format(\"Unknown rule %s, please choose among the following rules: %s\", unknown, rules);\n+    }\n+\n+    private static Instant asISODateTime(String date)\n+    {\n+        try\n+        {\n+            return Instant.parse(date);\n+        }\n+        catch (DateTimeParseException e)\n+        {\n+            throw new IllegalArgumentException(\n+                    \"Please use ISO 8601 zone date time format like '2011-11-11T22:10:38.521Z'\",\n+                    e);\n+        }\n+    }\n+\n+    private interface MessagingExceptionFunction<T, R>", "originalCommit": "c36e669ede444546054e5db10639096945118193", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f91a6fa847a6446386244b8e88300b661b07e95", "chunk": "diff --git a/vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/factory/MailParameterFilterFactory.java b/vividus-plugin-email/src/main/java/org/vividus/bdd/email/factory/EmailParameterFilterFactory.java\nsimilarity index 51%\nrename from vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/factory/MailParameterFilterFactory.java\nrename to vividus-plugin-email/src/main/java/org/vividus/bdd/email/factory/EmailParameterFilterFactory.java\nindex c38898c0..04097c7d 100644\n--- a/vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/factory/MailParameterFilterFactory.java\n+++ b/vividus-plugin-email/src/main/java/org/vividus/bdd/email/factory/EmailParameterFilterFactory.java\n\n@@ -14,14 +14,15 @@\n  * limitations under the License.\n  */\n \n-package org.vividus.bdd.mail.factory;\n+package org.vividus.bdd.email.factory;\n \n import java.time.Instant;\n+import java.time.format.DateTimeFormatter;\n import java.time.format.DateTimeParseException;\n+import java.time.temporal.ChronoUnit;\n import java.util.Date;\n import java.util.List;\n import java.util.Set;\n-import java.util.function.Predicate;\n import java.util.stream.Collectors;\n import java.util.stream.IntStream;\n import java.util.stream.Stream;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE1NzgwNg==", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r450157806", "bodyText": "IMessageFetchService-> MailFetchService", "author": "valfirst", "createdAt": "2020-07-06T11:28:29Z", "path": "vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/service/IMessageFetchService.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.mail.service;\n+\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import javax.mail.Message;\n+\n+import org.vividus.bdd.mail.model.EmailMessage;\n+import org.vividus.bdd.mail.model.MailServerConfiguration;\n+import org.vividus.bdd.mail.service.ImapMessageFetchService.MessageFetchServiceException;\n+\n+public interface IMessageFetchService", "originalCommit": "c36e669ede444546054e5db10639096945118193", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f91a6fa847a6446386244b8e88300b661b07e95", "chunk": "diff --git a/vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/service/IMessageFetchService.java b/vividus-plugin-email/src/main/java/org/vividus/bdd/email/service/EmailFetchService.java\nsimilarity index 55%\nrename from vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/service/IMessageFetchService.java\nrename to vividus-plugin-email/src/main/java/org/vividus/bdd/email/service/EmailFetchService.java\nindex f615ca63..47d3feca 100644\n--- a/vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/service/IMessageFetchService.java\n+++ b/vividus-plugin-email/src/main/java/org/vividus/bdd/email/service/EmailFetchService.java\n\n@@ -14,19 +14,20 @@\n  * limitations under the License.\n  */\n \n-package org.vividus.bdd.mail.service;\n+package org.vividus.bdd.email.service;\n \n import java.util.List;\n-import java.util.function.Predicate;\n \n import javax.mail.Message;\n+import javax.mail.MessagingException;\n \n-import org.vividus.bdd.mail.model.EmailMessage;\n-import org.vividus.bdd.mail.model.MailServerConfiguration;\n-import org.vividus.bdd.mail.service.ImapMessageFetchService.MessageFetchServiceException;\n+import org.vividus.bdd.email.model.EmailMessage;\n+import org.vividus.bdd.email.model.EmailServerConfiguration;\n+import org.vividus.bdd.email.service.ImapFetchService.EmailFetchServiceException;\n+import org.vividus.util.function.CheckedPredicate;\n \n-public interface IMessageFetchService\n+public interface EmailFetchService\n {\n-    List<EmailMessage> fetch(List<Predicate<Message>> messageFilters, MailServerConfiguration configuration)\n-            throws MessageFetchServiceException;\n+    List<EmailMessage> fetch(List<CheckedPredicate<Message, MessagingException>> messageFilters,\n+            EmailServerConfiguration configuration) throws EmailFetchServiceException;\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE1ODAxMw==", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r450158013", "bodyText": "ImapMessageFetchService -> ImapFetchService", "author": "valfirst", "createdAt": "2020-07-06T11:28:56Z", "path": "vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/service/ImapMessageFetchService.java", "diffHunk": "@@ -0,0 +1,321 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.mail.service;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.locks.Condition;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+import javax.mail.Authenticator;\n+import javax.mail.FetchProfile;\n+import javax.mail.FetchProfile.Item;\n+import javax.mail.Folder;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.PasswordAuthentication;\n+import javax.mail.Session;\n+import javax.mail.Store;\n+import javax.mail.event.MessageCountEvent;\n+import javax.mail.event.MessageCountListener;\n+import javax.mail.search.SearchTerm;\n+\n+import org.vividus.bdd.mail.factory.EmailMessageFactory;\n+import org.vividus.bdd.mail.factory.EmailMessageFactory.EmailMessageCreationException;\n+import org.vividus.bdd.mail.model.EmailMessage;\n+import org.vividus.bdd.mail.model.MailServerConfiguration;\n+import org.vividus.util.Sleeper;\n+import org.vividus.util.wait.WaitMode;\n+import org.vividus.util.wait.Waiter;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+\n+public class ImapMessageFetchService implements IMessageFetchService", "originalCommit": "c36e669ede444546054e5db10639096945118193", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f91a6fa847a6446386244b8e88300b661b07e95", "chunk": "diff --git a/vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/service/ImapMessageFetchService.java b/vividus-plugin-email/src/main/java/org/vividus/bdd/email/service/ImapFetchService.java\nsimilarity index 82%\nrename from vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/service/ImapMessageFetchService.java\nrename to vividus-plugin-email/src/main/java/org/vividus/bdd/email/service/ImapFetchService.java\nindex ac975bf0..357f9f2b 100644\n--- a/vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/service/ImapMessageFetchService.java\n+++ b/vividus-plugin-email/src/main/java/org/vividus/bdd/email/service/ImapFetchService.java\n\n@@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package org.vividus.bdd.mail.service;\n+package org.vividus.bdd.email.service;\n \n import java.time.Duration;\n import java.util.ArrayList;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE2MTUwMA==", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r450161500", "bodyText": "org.vividus.util.function.CheckedSupplier", "author": "valfirst", "createdAt": "2020-07-06T11:36:39Z", "path": "vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/service/ImapMessageFetchService.java", "diffHunk": "@@ -0,0 +1,321 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.mail.service;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.locks.Condition;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+import javax.mail.Authenticator;\n+import javax.mail.FetchProfile;\n+import javax.mail.FetchProfile.Item;\n+import javax.mail.Folder;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.PasswordAuthentication;\n+import javax.mail.Session;\n+import javax.mail.Store;\n+import javax.mail.event.MessageCountEvent;\n+import javax.mail.event.MessageCountListener;\n+import javax.mail.search.SearchTerm;\n+\n+import org.vividus.bdd.mail.factory.EmailMessageFactory;\n+import org.vividus.bdd.mail.factory.EmailMessageFactory.EmailMessageCreationException;\n+import org.vividus.bdd.mail.model.EmailMessage;\n+import org.vividus.bdd.mail.model.MailServerConfiguration;\n+import org.vividus.util.Sleeper;\n+import org.vividus.util.wait.WaitMode;\n+import org.vividus.util.wait.Waiter;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+\n+public class ImapMessageFetchService implements IMessageFetchService\n+{\n+    private static final String PROTOCOL = \"imaps\";\n+\n+    private final WaitMode waitMode;\n+    private final Duration messageEventWaitDuration;\n+    private final String folder;\n+    private final EmailMessageFactory emailMessageFactory;\n+\n+    public ImapMessageFetchService(Duration duration, int retryTimes, Duration messageEventWaitDuration,\n+            String folder, EmailMessageFactory emailMessageFactory)\n+    {\n+        this.waitMode = new WaitMode(duration, retryTimes);\n+        this.messageEventWaitDuration = messageEventWaitDuration;\n+        this.folder = folder;\n+        this.emailMessageFactory = emailMessageFactory;\n+    }\n+\n+    @Override\n+    public List<EmailMessage> fetch(List<Predicate<Message>> messageFilters, MailServerConfiguration configuration)\n+            throws MessageFetchServiceException\n+    {\n+        Authenticator authenticator = new PasswordAuthenticator(configuration.getUsername(),\n+                configuration.getPassword());\n+\n+        Properties properties = new Properties();\n+        properties.putAll(asImapsProperties(configuration.getProperties()));\n+\n+        Session session = Session.getInstance(properties, authenticator);\n+\n+        try (Store store = session.getStore(PROTOCOL); Folder mailFolder = getFolder(store))\n+        {\n+            SearchTerm searchTerm = new PredicateSearchTerm(messageFilters);\n+            PollingMessageListener listener = new PollingMessageListener(mailFolder::isOpen, searchTerm);\n+\n+            mailFolder.addMessageCountListener(listener);\n+            mailFolder.open(Folder.READ_ONLY);\n+\n+            Message[] messages = fetchMessages(mailFolder, Set.of(Item.ENVELOPE));\n+            Message[] filtered = mailFolder.search(searchTerm, messages);\n+\n+            if (filtered.length > 0)\n+            {\n+                fetchMessages(mailFolder, filtered, Set.of(Item.CONTENT_INFO));\n+                return asMailMessages(List.of(filtered));\n+            }\n+            else\n+            {\n+                Waiter waiter = new Waiter(waitMode);\n+                List<Message> output = interruptible(() -> waiter.wait(listener::getMessages, msgs -> !msgs.isEmpty()));\n+                return asMailMessages(output);\n+            }\n+        }\n+        catch (MessagingException | EmailMessageCreationException e)\n+        {\n+            throw new MessageFetchServiceException(e);\n+        }\n+    }\n+\n+    private List<EmailMessage> asMailMessages(List<Message> messages) throws EmailMessageCreationException\n+    {\n+        List<EmailMessage> emailMessages = new ArrayList<>(messages.size());\n+        for (Message message : messages)\n+        {\n+            emailMessages.add(emailMessageFactory.create(message));\n+        }\n+        return emailMessages;\n+    }\n+\n+    private Folder getFolder(Store store) throws MessagingException\n+    {\n+        store.connect();\n+        return store.getFolder(this.folder);\n+    }\n+\n+    private Message[] fetchMessages(Folder folder, Set<Item> fetchSettings) throws MessagingException\n+    {\n+        return fetchMessages(folder, folder.getMessages(), fetchSettings);\n+    }\n+\n+    private Message[] fetchMessages(Folder folder, Message[] messages, Set<Item> fetchSettings)\n+            throws MessagingException\n+    {\n+        FetchProfile profile = new FetchProfile();\n+        fetchSettings.forEach(profile::add);\n+        folder.fetch(messages, profile);\n+        return messages;\n+    }\n+\n+    private Map<String, String> asImapsProperties(Map<String, String> properties)\n+    {\n+        return properties.entrySet().stream()\n+                .collect(Collectors.toMap(e -> \"mail.\" + PROTOCOL + \".\" + e.getKey(), Map.Entry::getValue));\n+    }\n+\n+    private <T> T interruptible(InterruptedSupplier<T> supplier)\n+    {\n+        try\n+        {\n+            return supplier.get();\n+        }\n+        catch (InterruptedException e)\n+        {\n+            Thread.currentThread().interrupt();\n+            throw new IllegalStateException(e);\n+        }\n+    }\n+\n+    private interface InterruptedSupplier<T>", "originalCommit": "c36e669ede444546054e5db10639096945118193", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f91a6fa847a6446386244b8e88300b661b07e95", "chunk": "diff --git a/vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/service/ImapMessageFetchService.java b/vividus-plugin-email/src/main/java/org/vividus/bdd/email/service/ImapFetchService.java\nsimilarity index 82%\nrename from vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/service/ImapMessageFetchService.java\nrename to vividus-plugin-email/src/main/java/org/vividus/bdd/email/service/ImapFetchService.java\nindex ac975bf0..357f9f2b 100644\n--- a/vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/service/ImapMessageFetchService.java\n+++ b/vividus-plugin-email/src/main/java/org/vividus/bdd/email/service/ImapFetchService.java\n\n@@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package org.vividus.bdd.mail.service;\n+package org.vividus.bdd.email.service;\n \n import java.time.Duration;\n import java.util.ArrayList;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE2MzIwMw==", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r450163203", "bodyText": "assertion message is not clear", "author": "valfirst", "createdAt": "2020-07-06T11:40:29Z", "path": "vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/steps/MailSteps.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.mail.steps;\n+\n+import static org.hamcrest.Matchers.greaterThan;\n+import static org.hamcrest.Matchers.hasSize;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+\n+import javax.mail.Address;\n+import javax.mail.Message;\n+import javax.mail.Message.RecipientType;\n+import javax.mail.MessagingException;\n+\n+import org.jbehave.core.annotations.When;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.bdd.context.IBddVariableContext;\n+import org.vividus.bdd.mail.model.EmailMessage;\n+import org.vividus.bdd.mail.model.EmailMessageTextContent;\n+import org.vividus.bdd.mail.model.MailServerConfiguration;\n+import org.vividus.bdd.mail.service.IMessageFetchService;\n+import org.vividus.bdd.mail.service.ImapMessageFetchService.MessageFetchServiceException;\n+import org.vividus.bdd.variable.VariableScope;\n+import org.vividus.softassert.ISoftAssert;\n+\n+public class MailSteps\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(MailSteps.class);\n+\n+    private final Map<String, MailServerConfiguration> serverConfigurations;\n+    private final IMessageFetchService messageFetchService;\n+    private final IBddVariableContext bddVariableContext;\n+    private final ISoftAssert softAssert;\n+\n+    public MailSteps(Map<String, MailServerConfiguration> serverConfigurations,\n+            IMessageFetchService messageFetchService, IBddVariableContext bddVariableContext, ISoftAssert softAssert)\n+    {\n+        this.messageFetchService = messageFetchService;\n+        this.bddVariableContext = bddVariableContext;\n+        this.serverConfigurations = serverConfigurations;\n+        this.softAssert = softAssert;\n+    }\n+\n+    /**\n+     * Step fetches a mail message from a server specified by the <b>serverKey</b> and if message is found saves\n+     * its <i>text</i> content parts into indexed variables with the prefix <b>variableName</b> i.e. if the message\n+     * contains two text parts, the first part will be saved under <b>variableName[1]</b> and the second under\n+     * <b>variableName[2]</b>\n+     * <div><b>Example:</b></div>\n+     * <pre>\n+     * <code>\n+     * When I fetch mail message from `gmail` server filtered by\n+     * <br> |parameter     |rule            |value                                                   |\n+     * <br> |SUBJECT       |EQUAL_TO        |Registration code                                       |\n+     * <br> |SENT_DATE     |GREATER_THAN    |1970-01-01T00:00:00.000Z                                |\n+     * <br> |RECEIVED_DATE |LESS_THAN       |2020-06-14T11:47:11.521Z                                |\n+     * <br> |FROM          |IS_EQUAL_TO     |service &lt;regservice@company.com&gt;                  |\n+     * <br> |CC_RECIPIENTS |CONTAINS        |admin                                                   |\n+     * <br> |BCC_RECIPIENTS|DOES_NOT_CONTAIN|gmail.com                                               |\n+     * <br> |TO_RECIPIENTS |EQUAL_TO        |me &lt;me@company.com&gt;, boss &lt;boss@company.com&gt;|\n+     * <br> |REPLY_TO      |MATCHES         |(?i)[0-9]@.*                                            |\n+     * </code>\n+     * </pre>\n+     * Filtering <b>rule</b>s:\n+     * <ul>\n+     * <li>EQUAL_TO</li>\n+     * <li>GREATER_THAN_OR_EQUAL_TO</li>\n+     * <li>GREATER_THAN</li>\n+     * <li>LESS_THAN_OR_EQUAL_TO</li>\n+     * <li>LESS_THAN</li>\n+     * <li>NOT_EQUAL_TO</li>\n+     * <li>IS_EQUAL_TO</li>\n+     * <li>CONTAINS</li>\n+     * <li>DOES_NOT_CONTAIN</li>\n+     * <li>MATCHES</li>\n+     * </ul>\n+     * <b>Parameter</b>s:\n+     * <ul>\n+     * <li>SUBJECT</li>\n+     * <li>SENT_DATE</li>\n+     * <li>RECEIVED_DATE</li>\n+     * <li>FROM</li>\n+     * <li>CC_RECIPIENTS</li>\n+     * <li>BCC_RECIPIENTS</li>\n+     * <li>TO_RECIPIENTS</li>\n+     * <li>REPLY_TO</li>\n+     * </ul>\n+     * Notes:\n+     * <ul>\n+     * <li>CONTAINS, MATCHES, IS_EQUAL_TO, DOES_NOT_CONTAIN are not allowed to be used with <i>date</i>\n+     * parameters</li>\n+     * <li><b>rule</b> names are case insensitive</li>\n+     * <li>multiple <i>address</i> parameters can be checked by separating expected value by commas</li>\n+     * <li><i>date</i> parameters must have zoned ISO 8061 format i.e. 1970-01-01T00:00:00.000Z</li>\n+     * </ul>\n+     * @param serverKey key of a server to fetch a message from\n+     * @param messageFilters message filters\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName A name of variable to assign the values from command execution result\n+     * @throws MessagingException signals that an exception of some sort has occurred while communicating with\n+     * message service\n+     * @throws MessageFetchServiceException signals that an exception of some sort has occurred while fetching\n+     * message from email server\n+     */\n+    @When(\"I fetch mail message from `$serverKey` server filtered by $filters and save message content to $scopes \"\n+            + \"variable `$variableName`\")\n+    public void saveMessageContent(String serverKey, List<Predicate<Message>> messageFilters, Set<VariableScope> scopes,\n+            String variableName) throws MessageFetchServiceException, MessagingException\n+    {\n+        MailServerConfiguration config = serverConfigurations.get(serverKey);\n+        List<EmailMessage> messages = messageFetchService.fetch(messageFilters, config);\n+\n+        int size = messages.size();\n+        if (messages.size() != 1)\n+        {\n+            if (size == 0)\n+            {\n+                softAssert.recordFailedAssertion(\"No messages were found by the specified filters\");\n+                return;\n+            }\n+            softAssert.recordFailedAssertion(\n+                    String.format(\"Expected one message, but found %d:%n%s\", size, formatMessages(messages)));\n+            return;\n+        }\n+\n+        EmailMessage message = messages.get(0);\n+        List<EmailMessageTextContent> contents = message.getContents();\n+        if (softAssert.assertThat(\"Text content entries\", contents, hasSize(greaterThan(0))))", "originalCommit": "c36e669ede444546054e5db10639096945118193", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f91a6fa847a6446386244b8e88300b661b07e95", "chunk": "diff --git a/vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/steps/MailSteps.java b/vividus-plugin-email/src/main/java/org/vividus/bdd/email/steps/EmailSteps.java\nsimilarity index 86%\nrename from vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/steps/MailSteps.java\nrename to vividus-plugin-email/src/main/java/org/vividus/bdd/email/steps/EmailSteps.java\nindex 1760eba6..c390c698 100644\n--- a/vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/steps/MailSteps.java\n+++ b/vividus-plugin-email/src/main/java/org/vividus/bdd/email/steps/EmailSteps.java\n\n@@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package org.vividus.bdd.mail.steps;\n+package org.vividus.bdd.email.steps;\n \n import static org.hamcrest.Matchers.greaterThan;\n import static org.hamcrest.Matchers.hasSize;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE2NDA3Nw==", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r450164077", "bodyText": "why not create the list and put it to variable context?", "author": "valfirst", "createdAt": "2020-07-06T11:42:20Z", "path": "vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/steps/MailSteps.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.mail.steps;\n+\n+import static org.hamcrest.Matchers.greaterThan;\n+import static org.hamcrest.Matchers.hasSize;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+\n+import javax.mail.Address;\n+import javax.mail.Message;\n+import javax.mail.Message.RecipientType;\n+import javax.mail.MessagingException;\n+\n+import org.jbehave.core.annotations.When;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.bdd.context.IBddVariableContext;\n+import org.vividus.bdd.mail.model.EmailMessage;\n+import org.vividus.bdd.mail.model.EmailMessageTextContent;\n+import org.vividus.bdd.mail.model.MailServerConfiguration;\n+import org.vividus.bdd.mail.service.IMessageFetchService;\n+import org.vividus.bdd.mail.service.ImapMessageFetchService.MessageFetchServiceException;\n+import org.vividus.bdd.variable.VariableScope;\n+import org.vividus.softassert.ISoftAssert;\n+\n+public class MailSteps\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(MailSteps.class);\n+\n+    private final Map<String, MailServerConfiguration> serverConfigurations;\n+    private final IMessageFetchService messageFetchService;\n+    private final IBddVariableContext bddVariableContext;\n+    private final ISoftAssert softAssert;\n+\n+    public MailSteps(Map<String, MailServerConfiguration> serverConfigurations,\n+            IMessageFetchService messageFetchService, IBddVariableContext bddVariableContext, ISoftAssert softAssert)\n+    {\n+        this.messageFetchService = messageFetchService;\n+        this.bddVariableContext = bddVariableContext;\n+        this.serverConfigurations = serverConfigurations;\n+        this.softAssert = softAssert;\n+    }\n+\n+    /**\n+     * Step fetches a mail message from a server specified by the <b>serverKey</b> and if message is found saves\n+     * its <i>text</i> content parts into indexed variables with the prefix <b>variableName</b> i.e. if the message\n+     * contains two text parts, the first part will be saved under <b>variableName[1]</b> and the second under\n+     * <b>variableName[2]</b>\n+     * <div><b>Example:</b></div>\n+     * <pre>\n+     * <code>\n+     * When I fetch mail message from `gmail` server filtered by\n+     * <br> |parameter     |rule            |value                                                   |\n+     * <br> |SUBJECT       |EQUAL_TO        |Registration code                                       |\n+     * <br> |SENT_DATE     |GREATER_THAN    |1970-01-01T00:00:00.000Z                                |\n+     * <br> |RECEIVED_DATE |LESS_THAN       |2020-06-14T11:47:11.521Z                                |\n+     * <br> |FROM          |IS_EQUAL_TO     |service &lt;regservice@company.com&gt;                  |\n+     * <br> |CC_RECIPIENTS |CONTAINS        |admin                                                   |\n+     * <br> |BCC_RECIPIENTS|DOES_NOT_CONTAIN|gmail.com                                               |\n+     * <br> |TO_RECIPIENTS |EQUAL_TO        |me &lt;me@company.com&gt;, boss &lt;boss@company.com&gt;|\n+     * <br> |REPLY_TO      |MATCHES         |(?i)[0-9]@.*                                            |\n+     * </code>\n+     * </pre>\n+     * Filtering <b>rule</b>s:\n+     * <ul>\n+     * <li>EQUAL_TO</li>\n+     * <li>GREATER_THAN_OR_EQUAL_TO</li>\n+     * <li>GREATER_THAN</li>\n+     * <li>LESS_THAN_OR_EQUAL_TO</li>\n+     * <li>LESS_THAN</li>\n+     * <li>NOT_EQUAL_TO</li>\n+     * <li>IS_EQUAL_TO</li>\n+     * <li>CONTAINS</li>\n+     * <li>DOES_NOT_CONTAIN</li>\n+     * <li>MATCHES</li>\n+     * </ul>\n+     * <b>Parameter</b>s:\n+     * <ul>\n+     * <li>SUBJECT</li>\n+     * <li>SENT_DATE</li>\n+     * <li>RECEIVED_DATE</li>\n+     * <li>FROM</li>\n+     * <li>CC_RECIPIENTS</li>\n+     * <li>BCC_RECIPIENTS</li>\n+     * <li>TO_RECIPIENTS</li>\n+     * <li>REPLY_TO</li>\n+     * </ul>\n+     * Notes:\n+     * <ul>\n+     * <li>CONTAINS, MATCHES, IS_EQUAL_TO, DOES_NOT_CONTAIN are not allowed to be used with <i>date</i>\n+     * parameters</li>\n+     * <li><b>rule</b> names are case insensitive</li>\n+     * <li>multiple <i>address</i> parameters can be checked by separating expected value by commas</li>\n+     * <li><i>date</i> parameters must have zoned ISO 8061 format i.e. 1970-01-01T00:00:00.000Z</li>\n+     * </ul>\n+     * @param serverKey key of a server to fetch a message from\n+     * @param messageFilters message filters\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName A name of variable to assign the values from command execution result\n+     * @throws MessagingException signals that an exception of some sort has occurred while communicating with\n+     * message service\n+     * @throws MessageFetchServiceException signals that an exception of some sort has occurred while fetching\n+     * message from email server\n+     */\n+    @When(\"I fetch mail message from `$serverKey` server filtered by $filters and save message content to $scopes \"\n+            + \"variable `$variableName`\")\n+    public void saveMessageContent(String serverKey, List<Predicate<Message>> messageFilters, Set<VariableScope> scopes,\n+            String variableName) throws MessageFetchServiceException, MessagingException\n+    {\n+        MailServerConfiguration config = serverConfigurations.get(serverKey);\n+        List<EmailMessage> messages = messageFetchService.fetch(messageFilters, config);\n+\n+        int size = messages.size();\n+        if (messages.size() != 1)\n+        {\n+            if (size == 0)\n+            {\n+                softAssert.recordFailedAssertion(\"No messages were found by the specified filters\");\n+                return;\n+            }\n+            softAssert.recordFailedAssertion(\n+                    String.format(\"Expected one message, but found %d:%n%s\", size, formatMessages(messages)));\n+            return;\n+        }\n+\n+        EmailMessage message = messages.get(0);\n+        List<EmailMessageTextContent> contents = message.getContents();\n+        if (softAssert.assertThat(\"Text content entries\", contents, hasSize(greaterThan(0))))\n+        {\n+            IntStream.range(0, contents.size()).forEach(index ->\n+            {\n+                EmailMessageTextContent content = contents.get(index);\n+                LOGGER.info(\"Content {} by index '{}'\", content.getContentType(), index);\n+                String key = String.format(\"%s[%d]\", variableName, index);\n+                bddVariableContext.putVariable(scopes, key, content.getContent());", "originalCommit": "c36e669ede444546054e5db10639096945118193", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA5NzY1Mg==", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r452097652", "bodyText": "this way logs become unreadable and it's very hard to find where a message starts and ends", "author": "uarlouski", "createdAt": "2020-07-09T09:46:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE2NDA3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "3f91a6fa847a6446386244b8e88300b661b07e95", "chunk": "diff --git a/vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/steps/MailSteps.java b/vividus-plugin-email/src/main/java/org/vividus/bdd/email/steps/EmailSteps.java\nsimilarity index 86%\nrename from vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/steps/MailSteps.java\nrename to vividus-plugin-email/src/main/java/org/vividus/bdd/email/steps/EmailSteps.java\nindex 1760eba6..c390c698 100644\n--- a/vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/steps/MailSteps.java\n+++ b/vividus-plugin-email/src/main/java/org/vividus/bdd/email/steps/EmailSteps.java\n\n@@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package org.vividus.bdd.mail.steps;\n+package org.vividus.bdd.email.steps;\n \n import static org.hamcrest.Matchers.greaterThan;\n import static org.hamcrest.Matchers.hasSize;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE3NDA5MQ==", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r450174091", "bodyText": "I believe it should be calculated automatically and be based on waitMode", "author": "valfirst", "createdAt": "2020-07-06T12:04:00Z", "path": "vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/service/ImapMessageFetchService.java", "diffHunk": "@@ -0,0 +1,321 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.mail.service;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.locks.Condition;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+import javax.mail.Authenticator;\n+import javax.mail.FetchProfile;\n+import javax.mail.FetchProfile.Item;\n+import javax.mail.Folder;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.PasswordAuthentication;\n+import javax.mail.Session;\n+import javax.mail.Store;\n+import javax.mail.event.MessageCountEvent;\n+import javax.mail.event.MessageCountListener;\n+import javax.mail.search.SearchTerm;\n+\n+import org.vividus.bdd.mail.factory.EmailMessageFactory;\n+import org.vividus.bdd.mail.factory.EmailMessageFactory.EmailMessageCreationException;\n+import org.vividus.bdd.mail.model.EmailMessage;\n+import org.vividus.bdd.mail.model.MailServerConfiguration;\n+import org.vividus.util.Sleeper;\n+import org.vividus.util.wait.WaitMode;\n+import org.vividus.util.wait.Waiter;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+\n+public class ImapMessageFetchService implements IMessageFetchService\n+{\n+    private static final String PROTOCOL = \"imaps\";\n+\n+    private final WaitMode waitMode;\n+    private final Duration messageEventWaitDuration;", "originalCommit": "c36e669ede444546054e5db10639096945118193", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEyNzU2OQ==", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r452127569", "bodyText": "these values are having a bit different meaning, generally we have two points of wait\n\nmessage is sent from external service to recipient\njava client observes new message arrives to recipient\nSo the waitMode is responsible for sending sync signal for new messages, while messageEventWaitDuration is responsible for getting new messages due to that signal\nI think this values should be lower than polling time and probably it makes sense to hardcode it", "author": "uarlouski", "createdAt": "2020-07-09T10:42:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE3NDA5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NjI1MQ==", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r452746251", "bodyText": "decided to use coefficient", "author": "uarlouski", "createdAt": "2020-07-10T09:56:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE3NDA5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "3f91a6fa847a6446386244b8e88300b661b07e95", "chunk": "diff --git a/vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/service/ImapMessageFetchService.java b/vividus-plugin-email/src/main/java/org/vividus/bdd/email/service/ImapFetchService.java\nsimilarity index 82%\nrename from vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/service/ImapMessageFetchService.java\nrename to vividus-plugin-email/src/main/java/org/vividus/bdd/email/service/ImapFetchService.java\nindex ac975bf0..357f9f2b 100644\n--- a/vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/service/ImapMessageFetchService.java\n+++ b/vividus-plugin-email/src/main/java/org/vividus/bdd/email/service/ImapFetchService.java\n\n@@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package org.vividus.bdd.mail.service;\n+package org.vividus.bdd.email.service;\n \n import java.time.Duration;\n import java.util.ArrayList;\n"}}, {"oid": "3f91a6fa847a6446386244b8e88300b661b07e95", "url": "https://github.com/vividus-framework/vividus/commit/3f91a6fa847a6446386244b8e88300b661b07e95", "message": "comment fixes 2 [TO SQUASH]", "committedDate": "2020-07-09T16:10:23Z", "type": "forcePushed"}, {"oid": "fc0fabb5e0dfd104b99570c913a82e828012c2b8", "url": "https://github.com/vividus-framework/vividus/commit/fc0fabb5e0dfd104b99570c913a82e828012c2b8", "message": "comment fixes 2 [TO SQUASH]", "committedDate": "2020-07-09T16:13:27Z", "type": "forcePushed"}, {"oid": "d15b88118e02fc73404a41bf7a66cf61ed0ed3e7", "url": "https://github.com/vividus-framework/vividus/commit/d15b88118e02fc73404a41bf7a66cf61ed0ed3e7", "message": "comment fixes 2 [TO SQUASH]", "committedDate": "2020-07-09T16:18:29Z", "type": "forcePushed"}, {"oid": "490cdcffbdd4cf98aa55e00b9b9bfaa11c04028a", "url": "https://github.com/vividus-framework/vividus/commit/490cdcffbdd4cf98aa55e00b9b9bfaa11c04028a", "message": "minor fixes 4 [TO SQUASH]", "committedDate": "2020-07-10T06:53:32Z", "type": "forcePushed"}, {"oid": "cc8417e2a37219f8e0024426efecc6a0378f414c", "url": "https://github.com/vividus-framework/vividus/commit/cc8417e2a37219f8e0024426efecc6a0378f414c", "message": "add docs 5 [TO SQUASH]", "committedDate": "2020-07-10T09:01:35Z", "type": "forcePushed"}, {"oid": "95f37f502d47294afb1ddc3ce50e6d80a88e4741", "url": "https://github.com/vividus-framework/vividus/commit/95f37f502d47294afb1ddc3ce50e6d80a88e4741", "message": "add docs 5 [TO SQUASH]", "committedDate": "2020-07-10T09:06:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcyOTIxMg==", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r452729212", "bodyText": "logging is not a crucial operation so no reason to re-throw exception, just log the error, e.g.:\ntry\n{\n    return part.getFileName();\n}\ncatch (MessagingException e)\n{\n    return e.toString();\n}", "author": "valfirst", "createdAt": "2020-07-10T09:22:53Z", "path": "vividus-plugin-email/src/main/java/org/vividus/bdd/email/factory/EmailMessageFactory.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.email.factory;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.inject.Named;\n+import javax.mail.BodyPart;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.Multipart;\n+import javax.mail.Part;\n+\n+import org.apache.tika.mime.MediaType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.bdd.email.model.EmailMessage;\n+import org.vividus.bdd.email.model.EmailMessageTextContent;\n+\n+@Named\n+public class EmailMessageFactory\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(EmailMessageFactory.class);\n+\n+    public EmailMessage create(Message message) throws EmailMessageCreationException\n+    {\n+        try\n+        {\n+            List<EmailMessageTextContent> contents = new ArrayList<>();\n+            Object content = message.getContent();\n+            if (isMultipart(content))\n+            {\n+                unwrapMultipart((Multipart) content, contents);\n+            }\n+            else\n+            {\n+                contents.add(new EmailMessageTextContent(message.getContentType(), (String) content));\n+            }\n+            return new EmailMessage(message, contents);\n+        }\n+        catch (MessagingException | IOException | InternalEmailMessageCreationException e)\n+        {\n+            throw new EmailMessageCreationException(e);\n+        }\n+    }\n+\n+    private void unwrapMultipart(Multipart multipart, List<EmailMessageTextContent> container)\n+            throws MessagingException, IOException\n+    {\n+        for (int partIndex = 0; partIndex < multipart.getCount(); partIndex++)\n+        {\n+            BodyPart part = multipart.getBodyPart(partIndex);\n+            Object content = part.getContent();\n+            if (isMultipart(content))\n+            {\n+                unwrapMultipart((Multipart) content, container);\n+                continue;\n+            }\n+            if (Part.ATTACHMENT.equalsIgnoreCase(part.getDisposition()))\n+            {\n+                LOGGER.atInfo().addArgument(() ->\n+                {\n+                    try\n+                    {\n+                        return part.getFileName();\n+                    }\n+                    catch (MessagingException e)\n+                    {\n+                        throw new InternalEmailMessageCreationException(e);", "originalCommit": "95f37f502d47294afb1ddc3ce50e6d80a88e4741", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcyOTM4Mg==", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r452729382", "bodyText": "or you can even improve logging and build full message as an argument", "author": "valfirst", "createdAt": "2020-07-10T09:23:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcyOTIxMg=="}], "type": "inlineReview", "revised_code": {"commit": "a2ede531bb40aba6b942502268f18a18d4c80fa2", "chunk": "diff --git a/vividus-plugin-email/src/main/java/org/vividus/bdd/email/factory/EmailMessageFactory.java b/vividus-plugin-email/src/main/java/org/vividus/bdd/email/factory/EmailMessageFactory.java\nindex 767a7e25..f51d82d2 100644\n--- a/vividus-plugin-email/src/main/java/org/vividus/bdd/email/factory/EmailMessageFactory.java\n+++ b/vividus-plugin-email/src/main/java/org/vividus/bdd/email/factory/EmailMessageFactory.java\n\n@@ -54,7 +54,7 @@ public class EmailMessageFactory\n             }\n             return new EmailMessage(message, contents);\n         }\n-        catch (MessagingException | IOException | InternalEmailMessageCreationException e)\n+        catch (MessagingException | IOException e)\n         {\n             throw new EmailMessageCreationException(e);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjczMDEwNQ==", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r452730105", "bodyText": "I believe it can be inlined, it will still be very clear", "author": "valfirst", "createdAt": "2020-07-10T09:24:47Z", "path": "vividus-plugin-email/src/main/java/org/vividus/bdd/email/factory/EmailParameterFilterFactory.java", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.email.factory;\n+\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.time.temporal.ChronoUnit;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+\n+import javax.mail.Address;\n+import javax.mail.Message;\n+import javax.mail.Message.RecipientType;\n+import javax.mail.MessagingException;\n+\n+import org.apache.commons.lang3.EnumUtils;\n+import org.apache.commons.lang3.Validate;\n+import org.vividus.bdd.steps.ComparisonRule;\n+import org.vividus.bdd.steps.IComparisonRule;\n+import org.vividus.bdd.steps.StringComparisonRule;\n+import org.vividus.util.function.CheckedFunction;\n+import org.vividus.util.function.CheckedPredicate;\n+\n+public enum EmailParameterFilterFactory\n+{\n+    SUBJECT\n+    {\n+        @Override\n+        public CheckedPredicate<Message, MessagingException> createFilter(String rule, String variable)\n+        {\n+            return m -> apply(m.getSubject(), rule, variable);\n+        }\n+    },\n+    SENT_DATE\n+    {\n+        @Override\n+        public CheckedPredicate<Message, MessagingException> createFilter(String rule, String variable)\n+        {\n+            return checkDates(rule, variable, Message::getSentDate);\n+        }\n+    },\n+    RECEIVED_DATE\n+    {\n+        @Override\n+        public CheckedPredicate<Message, MessagingException> createFilter(String rule, String variable)\n+        {\n+            return checkDates(rule, variable, Message::getReceivedDate);\n+        }\n+    },\n+    FROM\n+    {\n+        @Override\n+        public CheckedPredicate<Message, MessagingException> createFilter(String rule, String variable)\n+        {\n+            return checkAddressees(rule, variable, Message::getFrom);\n+        }\n+    },\n+    CC_RECIPIENTS\n+    {\n+        @Override\n+        public CheckedPredicate<Message, MessagingException> createFilter(String rule, String variable)\n+        {\n+            return checkRecipients(rule, variable, RecipientType.CC);\n+        }\n+    },\n+    BCC_RECIPIENTS\n+    {\n+        @Override\n+        public CheckedPredicate<Message, MessagingException> createFilter(String rule, String variable)\n+        {\n+            return checkRecipients(rule, variable, RecipientType.BCC);\n+        }\n+    },\n+    TO_RECIPIENTS\n+    {\n+        @Override\n+        public CheckedPredicate<Message, MessagingException> createFilter(String rule, String variable)\n+        {\n+            return checkRecipients(rule, variable, RecipientType.TO);\n+        }\n+    },\n+    REPLY_TO\n+    {\n+        @Override\n+        public CheckedPredicate<Message, MessagingException> createFilter(String rule, String variable)\n+        {\n+            return checkAddressees(rule, variable, Message::getReplyTo);\n+        }\n+    };\n+\n+    public abstract CheckedPredicate<Message, MessagingException> createFilter(String rule, String variable);\n+\n+    CheckedPredicate<Message, MessagingException> checkDates(String rule, String inputDate,\n+            CheckedFunction<Message, Date, MessagingException> getter)\n+    {\n+        return m ->\n+        {\n+            Date messageDate = getter.apply(m);", "originalCommit": "95f37f502d47294afb1ddc3ce50e6d80a88e4741", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a2ede531bb40aba6b942502268f18a18d4c80fa2", "chunk": "diff --git a/vividus-plugin-email/src/main/java/org/vividus/bdd/email/factory/EmailParameterFilterFactory.java b/vividus-plugin-email/src/main/java/org/vividus/bdd/email/factory/EmailParameterFilterFactory.java\nindex cba0cd84..ffe21d80 100644\n--- a/vividus-plugin-email/src/main/java/org/vividus/bdd/email/factory/EmailParameterFilterFactory.java\n+++ b/vividus-plugin-email/src/main/java/org/vividus/bdd/email/factory/EmailParameterFilterFactory.java\n\n@@ -111,11 +111,7 @@ public enum EmailParameterFilterFactory\n     CheckedPredicate<Message, MessagingException> checkDates(String rule, String inputDate,\n             CheckedFunction<Message, Date, MessagingException> getter)\n     {\n-        return m ->\n-        {\n-            Date messageDate = getter.apply(m);\n-            return apply(messageDate.toInstant(), rule, asISODateTime(inputDate));\n-        };\n+        return m -> apply(getter.apply(m).toInstant(), rule, asISODateTime(inputDate));\n     }\n \n     CheckedPredicate<Message, MessagingException> checkRecipients(String rule, String addressesAsString,\n"}}, {"oid": "a2ede531bb40aba6b942502268f18a18d4c80fa2", "url": "https://github.com/vividus-framework/vividus/commit/a2ede531bb40aba6b942502268f18a18d4c80fa2", "message": "Add module to work with email servers", "committedDate": "2020-07-10T11:04:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk3NjE3Mw==", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r446976173", "bodyText": "Part.ATTACHMENT.equalsIgnoreCase(part.getDisposition()) - you don't want it but you will get InternalEmailMessageCreationException in case of error receiving optional info to the log? From my point of view, you should ignore exception in this case or log it.", "author": "ikalinin1", "createdAt": "2020-06-29T13:35:51Z", "path": "vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/factory/EmailMessageFactory.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.mail.factory;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.inject.Named;\n+import javax.mail.BodyPart;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.Multipart;\n+import javax.mail.Part;\n+\n+import org.apache.tika.mime.MediaType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.bdd.mail.model.EmailMessage;\n+import org.vividus.bdd.mail.model.EmailMessageTextContent;\n+\n+@Named\n+public class EmailMessageFactory\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(EmailMessageFactory.class);\n+\n+    public EmailMessage create(Message message) throws EmailMessageCreationException\n+    {\n+        try\n+        {\n+            List<EmailMessageTextContent> contents = new ArrayList<>();\n+            Object content = message.getContent();\n+            if (isMultipart(content))\n+            {\n+                unwrapMultipart((Multipart) content, contents);\n+            }\n+            else\n+            {\n+                contents.add(new EmailMessageTextContent(message.getContentType(), (String) content));\n+            }\n+            return new EmailMessage(message, contents);\n+        }\n+        catch (MessagingException | IOException | InternalEmailMessageCreationException e)\n+        {\n+            throw new EmailMessageCreationException(e);\n+        }\n+    }\n+\n+    private void unwrapMultipart(Multipart multipart, List<EmailMessageTextContent> container)\n+            throws MessagingException, IOException\n+    {\n+        for (int partIndex = 0; partIndex < multipart.getCount(); partIndex++)\n+        {\n+            BodyPart part = multipart.getBodyPart(partIndex);\n+            Object content = part.getContent();\n+            if (isMultipart(content))\n+            {\n+                unwrapMultipart((Multipart) content, container);\n+                continue;\n+            }\n+            if (Part.ATTACHMENT.equalsIgnoreCase(part.getDisposition()))\n+            {\n+                LOGGER.atInfo().addArgument(() ->\n+                {\n+                    try\n+                    {\n+                        return part.getFileName();\n+                    }\n+                    catch (MessagingException e)\n+                    {\n+                        throw new InternalEmailMessageCreationException(e);", "originalCommit": "c36e669ede444546054e5db10639096945118193", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f91a6fa847a6446386244b8e88300b661b07e95", "chunk": "diff --git a/vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/factory/EmailMessageFactory.java b/vividus-plugin-email/src/main/java/org/vividus/bdd/email/factory/EmailMessageFactory.java\nsimilarity index 96%\nrename from vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/factory/EmailMessageFactory.java\nrename to vividus-plugin-email/src/main/java/org/vividus/bdd/email/factory/EmailMessageFactory.java\nindex 9ab13467..767a7e25 100644\n--- a/vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/factory/EmailMessageFactory.java\n+++ b/vividus-plugin-email/src/main/java/org/vividus/bdd/email/factory/EmailMessageFactory.java\n\n@@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package org.vividus.bdd.mail.factory;\n+package org.vividus.bdd.email.factory;\n \n import java.io.IOException;\n import java.util.ArrayList;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4MTQ4Nw==", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r446981487", "bodyText": "It won't be able to convert in the list in case of ExamplesTable -> Predicate converter?", "author": "ikalinin1", "createdAt": "2020-06-29T13:43:21Z", "path": "vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/converter/StringToListOfMessagePredicatesConverter.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.mail.converter;\n+\n+import java.lang.reflect.Type;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Named;\n+import javax.mail.Message;\n+\n+import org.jbehave.core.model.ExamplesTable;\n+import org.jbehave.core.steps.ParameterConverters.AbstractChainableParameterConverter;\n+import org.jbehave.core.steps.Parameters;\n+import org.vividus.bdd.mail.factory.MailParameterFilterFactory;\n+\n+@Named\n+public class StringToListOfMessagePredicatesConverter\n+        extends AbstractChainableParameterConverter<ExamplesTable, List<Predicate<Message>>>", "originalCommit": "c36e669ede444546054e5db10639096945118193", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzczMjU3MA==", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r453732570", "bodyText": "the feature is not yet implemented in jbehave", "author": "uarlouski", "createdAt": "2020-07-13T15:25:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4MTQ4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "3f91a6fa847a6446386244b8e88300b661b07e95", "chunk": "diff --git a/vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/converter/StringToListOfMessagePredicatesConverter.java b/vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/converter/StringToListOfMessagePredicatesConverter.java\ndeleted file mode 100644\nindex 5ad0b584..00000000\n--- a/vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/converter/StringToListOfMessagePredicatesConverter.java\n+++ /dev/null\n\n@@ -1,55 +0,0 @@\n-/*\n- * Copyright 2019-2020 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.vividus.bdd.mail.converter;\n-\n-import java.lang.reflect.Type;\n-import java.util.List;\n-import java.util.function.Function;\n-import java.util.function.Predicate;\n-import java.util.stream.Collectors;\n-\n-import javax.inject.Named;\n-import javax.mail.Message;\n-\n-import org.jbehave.core.model.ExamplesTable;\n-import org.jbehave.core.steps.ParameterConverters.AbstractChainableParameterConverter;\n-import org.jbehave.core.steps.Parameters;\n-import org.vividus.bdd.mail.factory.MailParameterFilterFactory;\n-\n-@Named\n-public class StringToListOfMessagePredicatesConverter\n-        extends AbstractChainableParameterConverter<ExamplesTable, List<Predicate<Message>>>\n-{\n-    @Override\n-    public List<Predicate<Message>> convertValue(ExamplesTable value, Type type)\n-    {\n-        return value.getRowsAsParameters()\n-                    .stream()\n-                    .map(asMessagePredicate())\n-                    .collect(Collectors.toList());\n-    }\n-\n-    private Function<Parameters, Predicate<Message>> asMessagePredicate()\n-    {\n-        return p ->\n-        {\n-            String ruleKey = p.valueAs(\"rule\", String.class);\n-            MailParameterFilterFactory factory = p.valueAs(\"parameter\", MailParameterFilterFactory.class);\n-            return factory.createFilter(ruleKey, p.valueAs(\"value\", String.class));\n-        };\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU2NDUxMg==", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r453564512", "bodyText": "{code}\nOptional.ofNullable(addresses).map(Stream.of(....)).orElse(\"\")?\n{code}", "author": "ikalinin1", "createdAt": "2020-07-13T10:50:45Z", "path": "vividus-plugin-email/src/main/java/org/vividus/bdd/email/steps/EmailSteps.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.email.steps;\n+\n+import static org.hamcrest.Matchers.greaterThan;\n+import static org.hamcrest.Matchers.hasSize;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+\n+import javax.mail.Address;\n+import javax.mail.Message;\n+import javax.mail.Message.RecipientType;\n+import javax.mail.MessagingException;\n+\n+import org.jbehave.core.annotations.When;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.bdd.context.IBddVariableContext;\n+import org.vividus.bdd.email.model.EmailMessage;\n+import org.vividus.bdd.email.model.EmailMessageTextContent;\n+import org.vividus.bdd.email.model.EmailServerConfiguration;\n+import org.vividus.bdd.email.service.EmailFetchService;\n+import org.vividus.bdd.email.service.ImapFetchService.EmailFetchServiceException;\n+import org.vividus.bdd.variable.VariableScope;\n+import org.vividus.softassert.ISoftAssert;\n+import org.vividus.util.function.CheckedPredicate;\n+\n+public class EmailSteps\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(EmailSteps.class);\n+\n+    private final Map<String, EmailServerConfiguration> serverConfigurations;\n+    private final EmailFetchService messageFetchService;\n+    private final IBddVariableContext bddVariableContext;\n+    private final ISoftAssert softAssert;\n+\n+    public EmailSteps(Map<String, EmailServerConfiguration> serverConfigurations,\n+            EmailFetchService messageFetchService, IBddVariableContext bddVariableContext, ISoftAssert softAssert)\n+    {\n+        this.messageFetchService = messageFetchService;\n+        this.bddVariableContext = bddVariableContext;\n+        this.serverConfigurations = serverConfigurations;\n+        this.softAssert = softAssert;\n+    }\n+\n+    /**\n+     * Step fetches a mail message from a server specified by the <b>serverKey</b> and if message is found saves\n+     * its <i>text</i> content parts into indexed variables with the prefix <b>variableName</b> i.e. if the message\n+     * contains two text parts, the first part will be saved under <b>variableName[0]</b> and the second under\n+     * <b>variableName[1]</b>\n+     * <div><b>Example:</b></div>\n+     * <pre>\n+     * <code>\n+     * When I fetch mail message from `gmail` server filtered by\n+     * <br> |parameter     |rule            |value                                                   |\n+     * <br> |SUBJECT       |EQUAL_TO        |Registration code                                       |\n+     * <br> |SENT_DATE     |GREATER_THAN    |1970-01-01T00:00:00.000Z                                |\n+     * <br> |RECEIVED_DATE |LESS_THAN       |2020-06-14T11:47:11.521Z                                |\n+     * <br> |FROM          |IS_EQUAL_TO     |service &lt;regservice@company.com&gt;                  |\n+     * <br> |CC_RECIPIENTS |CONTAINS        |admin                                                   |\n+     * <br> |BCC_RECIPIENTS|DOES_NOT_CONTAIN|gmail.com                                               |\n+     * <br> |TO_RECIPIENTS |EQUAL_TO        |me &lt;me@company.com&gt;, boss &lt;boss@company.com&gt;|\n+     * <br> |REPLY_TO      |MATCHES         |(?i)[0-9]@.*                                            |\n+     * <br>  and save message content to SCENARIO variable `textContent`\n+     * </code>\n+     * </pre>\n+     * Filtering <b>rule</b>s:\n+     * <ul>\n+     * <li>EQUAL_TO</li>\n+     * <li>GREATER_THAN_OR_EQUAL_TO</li>\n+     * <li>GREATER_THAN</li>\n+     * <li>LESS_THAN_OR_EQUAL_TO</li>\n+     * <li>LESS_THAN</li>\n+     * <li>NOT_EQUAL_TO</li>\n+     * <li>IS_EQUAL_TO</li>\n+     * <li>CONTAINS</li>\n+     * <li>DOES_NOT_CONTAIN</li>\n+     * <li>MATCHES</li>\n+     * </ul>\n+     * <b>Parameter</b>s:\n+     * <ul>\n+     * <li>SUBJECT</li>\n+     * <li>SENT_DATE</li>\n+     * <li>RECEIVED_DATE</li>\n+     * <li>FROM</li>\n+     * <li>CC_RECIPIENTS</li>\n+     * <li>BCC_RECIPIENTS</li>\n+     * <li>TO_RECIPIENTS</li>\n+     * <li>REPLY_TO</li>\n+     * </ul>\n+     * Notes:\n+     * <ul>\n+     * <li>CONTAINS, MATCHES, IS_EQUAL_TO, DOES_NOT_CONTAIN are not allowed to be used with <i>date</i>\n+     * parameters</li>\n+     * <li><b>rule</b> names are case insensitive</li>\n+     * <li>multiple <i>address</i> parameters can be checked by separating expected value by commas</li>\n+     * <li><i>date</i> parameters must have zoned ISO 8061 format i.e. 1970-01-01T00:00:00.000Z</li>\n+     * </ul>\n+     * @param serverKey key of a server to fetch a message from\n+     * @param messageFilters message filters\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName A name of variable to assign the values from command execution result\n+     * @throws MessagingException signals that an exception of some sort has occurred while communicating with\n+     * message service\n+     * @throws EmailFetchServiceException signals that an exception of some sort has occurred while fetching\n+     * message from email server\n+     */\n+    @When(\"I fetch mail message from `$serverKey` server filtered by $filters and save message content to $scopes \"\n+            + \"variable `$variableName`\")\n+    public void saveMessageContent(String serverKey, List<CheckedPredicate<Message, MessagingException>> messageFilters,\n+            Set<VariableScope> scopes, String variableName) throws EmailFetchServiceException, MessagingException\n+    {\n+        EmailServerConfiguration config = serverConfigurations.get(serverKey);\n+        List<EmailMessage> messages = messageFetchService.fetch(messageFilters, config);\n+\n+        int size = messages.size();\n+        if (messages.size() != 1)\n+        {\n+            if (size == 0)\n+            {\n+                softAssert.recordFailedAssertion(\"No messages were found by the specified filters\");\n+                return;\n+            }\n+            softAssert.recordFailedAssertion(\n+                    String.format(\"Expected one message, but found %d:%n%s\", size, formatMessages(messages)));\n+            return;\n+        }\n+\n+        EmailMessage message = messages.get(0);\n+        List<EmailMessageTextContent> contents = message.getContents();\n+        if (softAssert.assertThat(\"Email text content to save\", contents, hasSize(greaterThan(0))))\n+        {\n+            IntStream.range(0, contents.size()).forEach(index ->\n+            {\n+                EmailMessageTextContent content = contents.get(index);\n+                LOGGER.info(\"Content {} by index '{}'\", content.getContentType(), index);\n+                String key = String.format(\"%s[%d]\", variableName, index);\n+                bddVariableContext.putVariable(scopes, key, content.getContent());\n+            });\n+        }\n+    }\n+\n+    private static String formatMessages(List<EmailMessage> messages) throws MessagingException\n+    {\n+        String messageFormat = \"Message #%d%n\"\n+                + \"Subject:\\t%s%n\"\n+                + \"Sent date:\\t%s%n\"\n+                + \"Received date:\\t%s%n\"\n+                + \"From:\\t\\t%s%n\"\n+                + \"CC Recipients:\\t%s%n\"\n+                + \"BCC Recipients:\\t%s%n\"\n+                + \"TO Recipients:\\t%s%n\"\n+                + \"Reply to:\\t%s%n\";\n+\n+        StringBuilder builder = new StringBuilder();\n+        for (int index = 0; index < messages.size(); index++)\n+        {\n+            EmailMessage message = messages.get(index);\n+            String messageAsString = String.format(messageFormat, index + 1, message.getSubject(),\n+                    dateAsIsoString(message.getSentDate()), dateAsIsoString(message.getReceivedDate()),\n+                    join(message.getFrom()), join(message.getRecipients(RecipientType.CC)),\n+                    join(message.getRecipients(RecipientType.BCC)), join(message.getRecipients(RecipientType.TO)),\n+                    join(message.getReplyTo()));\n+            builder.append(messageAsString);\n+        }\n+\n+        return builder.toString();\n+    }\n+\n+    private static String join(Address[] addresses)\n+    {\n+        return Stream.of(Optional.ofNullable(addresses).orElse(new Address[] {}))", "originalCommit": "a2ede531bb40aba6b942502268f18a18d4c80fa2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzczMTczMQ==", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r453731731", "bodyText": "could you please provide full example?", "author": "uarlouski", "createdAt": "2020-07-13T15:24:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU2NDUxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDI4NTQ2Ng==", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r454285466", "bodyText": "Optional.ofNullable(addresses)\n          .map(a -> Stream.of(addresses)\n                                        .map(Address::toString)\n                                        .collect(Collectors.joining(\",\")))\n         .orElse( \"<empty>\");", "author": "ikalinin1", "createdAt": "2020-07-14T11:22:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU2NDUxMg=="}], "type": "inlineReview", "revised_code": {"commit": "34ba5796429b9029e7453e3c4db9b13ecfca3f24", "chunk": "diff --git a/vividus-plugin-email/src/main/java/org/vividus/bdd/email/steps/EmailSteps.java b/vividus-plugin-email/src/main/java/org/vividus/bdd/email/steps/EmailSteps.java\nindex f3a93ae4..9c075682 100644\n--- a/vividus-plugin-email/src/main/java/org/vividus/bdd/email/steps/EmailSteps.java\n+++ b/vividus-plugin-email/src/main/java/org/vividus/bdd/email/steps/EmailSteps.java\n\n@@ -133,7 +133,7 @@ public class EmailSteps\n      * @throws EmailFetchServiceException signals that an exception of some sort has occurred while fetching\n      * message from email server\n      */\n-    @When(\"I fetch mail message from `$serverKey` server filtered by $filters and save message content to $scopes \"\n+    @When(\"I fetch email message from `$serverKey` server filtered by $filters and save message content to $scopes \"\n             + \"variable `$variableName`\")\n     public void saveMessageContent(String serverKey, List<CheckedPredicate<Message, MessagingException>> messageFilters,\n             Set<VariableScope> scopes, String variableName) throws EmailFetchServiceException, MessagingException\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU2NDY2OQ==", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r453564669", "bodyText": "https://openjdk.java.net/jeps/280", "author": "ikalinin1", "createdAt": "2020-07-13T10:51:04Z", "path": "vividus-plugin-email/src/main/java/org/vividus/bdd/email/steps/EmailSteps.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.email.steps;\n+\n+import static org.hamcrest.Matchers.greaterThan;\n+import static org.hamcrest.Matchers.hasSize;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+\n+import javax.mail.Address;\n+import javax.mail.Message;\n+import javax.mail.Message.RecipientType;\n+import javax.mail.MessagingException;\n+\n+import org.jbehave.core.annotations.When;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.bdd.context.IBddVariableContext;\n+import org.vividus.bdd.email.model.EmailMessage;\n+import org.vividus.bdd.email.model.EmailMessageTextContent;\n+import org.vividus.bdd.email.model.EmailServerConfiguration;\n+import org.vividus.bdd.email.service.EmailFetchService;\n+import org.vividus.bdd.email.service.ImapFetchService.EmailFetchServiceException;\n+import org.vividus.bdd.variable.VariableScope;\n+import org.vividus.softassert.ISoftAssert;\n+import org.vividus.util.function.CheckedPredicate;\n+\n+public class EmailSteps\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(EmailSteps.class);\n+\n+    private final Map<String, EmailServerConfiguration> serverConfigurations;\n+    private final EmailFetchService messageFetchService;\n+    private final IBddVariableContext bddVariableContext;\n+    private final ISoftAssert softAssert;\n+\n+    public EmailSteps(Map<String, EmailServerConfiguration> serverConfigurations,\n+            EmailFetchService messageFetchService, IBddVariableContext bddVariableContext, ISoftAssert softAssert)\n+    {\n+        this.messageFetchService = messageFetchService;\n+        this.bddVariableContext = bddVariableContext;\n+        this.serverConfigurations = serverConfigurations;\n+        this.softAssert = softAssert;\n+    }\n+\n+    /**\n+     * Step fetches a mail message from a server specified by the <b>serverKey</b> and if message is found saves\n+     * its <i>text</i> content parts into indexed variables with the prefix <b>variableName</b> i.e. if the message\n+     * contains two text parts, the first part will be saved under <b>variableName[0]</b> and the second under\n+     * <b>variableName[1]</b>\n+     * <div><b>Example:</b></div>\n+     * <pre>\n+     * <code>\n+     * When I fetch mail message from `gmail` server filtered by\n+     * <br> |parameter     |rule            |value                                                   |\n+     * <br> |SUBJECT       |EQUAL_TO        |Registration code                                       |\n+     * <br> |SENT_DATE     |GREATER_THAN    |1970-01-01T00:00:00.000Z                                |\n+     * <br> |RECEIVED_DATE |LESS_THAN       |2020-06-14T11:47:11.521Z                                |\n+     * <br> |FROM          |IS_EQUAL_TO     |service &lt;regservice@company.com&gt;                  |\n+     * <br> |CC_RECIPIENTS |CONTAINS        |admin                                                   |\n+     * <br> |BCC_RECIPIENTS|DOES_NOT_CONTAIN|gmail.com                                               |\n+     * <br> |TO_RECIPIENTS |EQUAL_TO        |me &lt;me@company.com&gt;, boss &lt;boss@company.com&gt;|\n+     * <br> |REPLY_TO      |MATCHES         |(?i)[0-9]@.*                                            |\n+     * <br>  and save message content to SCENARIO variable `textContent`\n+     * </code>\n+     * </pre>\n+     * Filtering <b>rule</b>s:\n+     * <ul>\n+     * <li>EQUAL_TO</li>\n+     * <li>GREATER_THAN_OR_EQUAL_TO</li>\n+     * <li>GREATER_THAN</li>\n+     * <li>LESS_THAN_OR_EQUAL_TO</li>\n+     * <li>LESS_THAN</li>\n+     * <li>NOT_EQUAL_TO</li>\n+     * <li>IS_EQUAL_TO</li>\n+     * <li>CONTAINS</li>\n+     * <li>DOES_NOT_CONTAIN</li>\n+     * <li>MATCHES</li>\n+     * </ul>\n+     * <b>Parameter</b>s:\n+     * <ul>\n+     * <li>SUBJECT</li>\n+     * <li>SENT_DATE</li>\n+     * <li>RECEIVED_DATE</li>\n+     * <li>FROM</li>\n+     * <li>CC_RECIPIENTS</li>\n+     * <li>BCC_RECIPIENTS</li>\n+     * <li>TO_RECIPIENTS</li>\n+     * <li>REPLY_TO</li>\n+     * </ul>\n+     * Notes:\n+     * <ul>\n+     * <li>CONTAINS, MATCHES, IS_EQUAL_TO, DOES_NOT_CONTAIN are not allowed to be used with <i>date</i>\n+     * parameters</li>\n+     * <li><b>rule</b> names are case insensitive</li>\n+     * <li>multiple <i>address</i> parameters can be checked by separating expected value by commas</li>\n+     * <li><i>date</i> parameters must have zoned ISO 8061 format i.e. 1970-01-01T00:00:00.000Z</li>\n+     * </ul>\n+     * @param serverKey key of a server to fetch a message from\n+     * @param messageFilters message filters\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName A name of variable to assign the values from command execution result\n+     * @throws MessagingException signals that an exception of some sort has occurred while communicating with\n+     * message service\n+     * @throws EmailFetchServiceException signals that an exception of some sort has occurred while fetching\n+     * message from email server\n+     */\n+    @When(\"I fetch mail message from `$serverKey` server filtered by $filters and save message content to $scopes \"\n+            + \"variable `$variableName`\")\n+    public void saveMessageContent(String serverKey, List<CheckedPredicate<Message, MessagingException>> messageFilters,\n+            Set<VariableScope> scopes, String variableName) throws EmailFetchServiceException, MessagingException\n+    {\n+        EmailServerConfiguration config = serverConfigurations.get(serverKey);\n+        List<EmailMessage> messages = messageFetchService.fetch(messageFilters, config);\n+\n+        int size = messages.size();\n+        if (messages.size() != 1)\n+        {\n+            if (size == 0)\n+            {\n+                softAssert.recordFailedAssertion(\"No messages were found by the specified filters\");\n+                return;\n+            }\n+            softAssert.recordFailedAssertion(\n+                    String.format(\"Expected one message, but found %d:%n%s\", size, formatMessages(messages)));\n+            return;\n+        }\n+\n+        EmailMessage message = messages.get(0);\n+        List<EmailMessageTextContent> contents = message.getContents();\n+        if (softAssert.assertThat(\"Email text content to save\", contents, hasSize(greaterThan(0))))\n+        {\n+            IntStream.range(0, contents.size()).forEach(index ->\n+            {\n+                EmailMessageTextContent content = contents.get(index);\n+                LOGGER.info(\"Content {} by index '{}'\", content.getContentType(), index);\n+                String key = String.format(\"%s[%d]\", variableName, index);\n+                bddVariableContext.putVariable(scopes, key, content.getContent());\n+            });\n+        }\n+    }\n+\n+    private static String formatMessages(List<EmailMessage> messages) throws MessagingException\n+    {\n+        String messageFormat = \"Message #%d%n\"\n+                + \"Subject:\\t%s%n\"\n+                + \"Sent date:\\t%s%n\"\n+                + \"Received date:\\t%s%n\"\n+                + \"From:\\t\\t%s%n\"\n+                + \"CC Recipients:\\t%s%n\"\n+                + \"BCC Recipients:\\t%s%n\"\n+                + \"TO Recipients:\\t%s%n\"\n+                + \"Reply to:\\t%s%n\";\n+\n+        StringBuilder builder = new StringBuilder();", "originalCommit": "a2ede531bb40aba6b942502268f18a18d4c80fa2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "34ba5796429b9029e7453e3c4db9b13ecfca3f24", "chunk": "diff --git a/vividus-plugin-email/src/main/java/org/vividus/bdd/email/steps/EmailSteps.java b/vividus-plugin-email/src/main/java/org/vividus/bdd/email/steps/EmailSteps.java\nindex f3a93ae4..9c075682 100644\n--- a/vividus-plugin-email/src/main/java/org/vividus/bdd/email/steps/EmailSteps.java\n+++ b/vividus-plugin-email/src/main/java/org/vividus/bdd/email/steps/EmailSteps.java\n\n@@ -133,7 +133,7 @@ public class EmailSteps\n      * @throws EmailFetchServiceException signals that an exception of some sort has occurred while fetching\n      * message from email server\n      */\n-    @When(\"I fetch mail message from `$serverKey` server filtered by $filters and save message content to $scopes \"\n+    @When(\"I fetch email message from `$serverKey` server filtered by $filters and save message content to $scopes \"\n             + \"variable `$variableName`\")\n     public void saveMessageContent(String serverKey, List<CheckedPredicate<Message, MessagingException>> messageFilters,\n             Set<VariableScope> scopes, String variableName) throws EmailFetchServiceException, MessagingException\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU3NzQzOA==", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r453577438", "bodyText": "Here you are testing the message, and what if the message is not the one you're waiting but one of the search criteria leads to an exception.\nDoes it mean inability to interact with the server and process other messages?", "author": "ikalinin1", "createdAt": "2020-07-13T11:16:54Z", "path": "vividus-plugin-email/src/main/java/org/vividus/bdd/email/service/ImapFetchService.java", "diffHunk": "@@ -0,0 +1,351 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.email.service;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.locks.Condition;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+import javax.mail.Authenticator;\n+import javax.mail.FetchProfile;\n+import javax.mail.FetchProfile.Item;\n+import javax.mail.Folder;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.PasswordAuthentication;\n+import javax.mail.Session;\n+import javax.mail.Store;\n+import javax.mail.event.MessageCountEvent;\n+import javax.mail.event.MessageCountListener;\n+import javax.mail.search.SearchTerm;\n+\n+import org.vividus.bdd.email.factory.EmailMessageFactory;\n+import org.vividus.bdd.email.factory.EmailMessageFactory.EmailMessageCreationException;\n+import org.vividus.bdd.email.model.EmailMessage;\n+import org.vividus.bdd.email.model.EmailServerConfiguration;\n+import org.vividus.util.Sleeper;\n+import org.vividus.util.function.CheckedPredicate;\n+import org.vividus.util.function.CheckedSupplier;\n+import org.vividus.util.wait.WaitMode;\n+import org.vividus.util.wait.Waiter;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+\n+public class ImapFetchService implements EmailFetchService\n+{\n+    private static final String PROTOCOL = \"imaps\";\n+\n+    private static final float EVENT_ARRIVAL_FACTOR = 0.8f;\n+    private static final long POLL_LOWER_BOUND = 5;\n+\n+    private final WaitMode waitMode;\n+    private final String folder;\n+    private final long messageEventWaitInMillis;\n+\n+    private final EmailMessageFactory emailMessageFactory;\n+\n+    public ImapFetchService(Duration duration, int retryTimes, String folder, EmailMessageFactory emailMessageFactory)\n+    {\n+        this.waitMode = new WaitMode(duration, retryTimes);\n+        long pollingTimeout = waitMode.calculatePollingTimeout(TimeUnit.SECONDS);\n+        if (pollingTimeout < POLL_LOWER_BOUND)\n+        {\n+            throw new IllegalArgumentException(String.format(\"Polling timeout must exceed %d seconds, but got %d\",\n+                    POLL_LOWER_BOUND, pollingTimeout));\n+        }\n+        this.messageEventWaitInMillis = (long) (waitMode.calculatePollingTimeout(TimeUnit.MILLISECONDS)\n+                * EVENT_ARRIVAL_FACTOR);\n+        this.folder = folder;\n+        this.emailMessageFactory = emailMessageFactory;\n+    }\n+\n+    @Override\n+    public List<EmailMessage> fetch(List<CheckedPredicate<Message, MessagingException>> messageFilters,\n+            EmailServerConfiguration configuration) throws EmailFetchServiceException\n+    {\n+        Authenticator authenticator = new PasswordAuthenticator(configuration.getUsername(),\n+                configuration.getPassword());\n+\n+        Properties properties = new Properties();\n+        properties.putAll(asImapsProperties(configuration.getProperties()));\n+\n+        Session session = Session.getInstance(properties, authenticator);\n+\n+        try (Store store = session.getStore(PROTOCOL); Folder mailFolder = getFolder(store))\n+        {\n+            SearchTerm searchTerm = new PredicateSearchTerm(messageFilters);\n+            PollingMessageListener listener = new PollingMessageListener(mailFolder::isOpen, searchTerm);\n+\n+            mailFolder.addMessageCountListener(listener);\n+            mailFolder.open(Folder.READ_ONLY);\n+\n+            Message[] messages = fetchMessages(mailFolder, Set.of(Item.ENVELOPE));\n+            Message[] filtered = mailFolder.search(searchTerm, messages);\n+\n+            if (filtered.length > 0)\n+            {\n+                fetchMessages(mailFolder, filtered, Set.of(Item.CONTENT_INFO));\n+                return asMailMessages(List.of(filtered));\n+            }\n+            else\n+            {\n+                Waiter waiter = new Waiter(waitMode);\n+                List<Message> output = interruptible(() -> waiter.wait(listener::getMessages, msgs -> !msgs.isEmpty()));\n+                return asMailMessages(output);\n+            }\n+        }\n+        catch (MessagingException | EmailMessageCreationException | InternalEmailFetchServiceException e)\n+        {\n+            throw new EmailFetchServiceException(e);\n+        }\n+    }\n+\n+    private List<EmailMessage> asMailMessages(List<Message> messages) throws EmailMessageCreationException\n+    {\n+        List<EmailMessage> emailMessages = new ArrayList<>(messages.size());\n+        for (Message message : messages)\n+        {\n+            emailMessages.add(emailMessageFactory.create(message));\n+        }\n+        return emailMessages;\n+    }\n+\n+    private Folder getFolder(Store store) throws MessagingException\n+    {\n+        store.connect();\n+        return store.getFolder(this.folder);\n+    }\n+\n+    private Message[] fetchMessages(Folder folder, Set<Item> fetchSettings) throws MessagingException\n+    {\n+        return fetchMessages(folder, folder.getMessages(), fetchSettings);\n+    }\n+\n+    private Message[] fetchMessages(Folder folder, Message[] messages, Set<Item> fetchSettings)\n+            throws MessagingException\n+    {\n+        FetchProfile profile = new FetchProfile();\n+        fetchSettings.forEach(profile::add);\n+        folder.fetch(messages, profile);\n+        return messages;\n+    }\n+\n+    private Map<String, String> asImapsProperties(Map<String, String> properties)\n+    {\n+        return properties.entrySet().stream()\n+                .collect(Collectors.toMap(e -> \"mail.\" + PROTOCOL + \".\" + e.getKey(), Map.Entry::getValue));\n+    }\n+\n+    private <T> T interruptible(CheckedSupplier<T, InterruptedException> supplier)\n+    {\n+        try\n+        {\n+            return supplier.get();\n+        }\n+        catch (InterruptedException e)\n+        {\n+            Thread.currentThread().interrupt();\n+            throw new IllegalStateException(e);\n+        }\n+    }\n+\n+    private static final class PredicateSearchTerm extends SearchTerm\n+    {\n+        private static final long serialVersionUID = 1163386376061414046L;\n+\n+        @SuppressFBWarnings(\"SE_TRANSIENT_FIELD_NOT_RESTORED\")\n+        private final transient List<CheckedPredicate<Message, MessagingException>> messageFilters;\n+\n+        private PredicateSearchTerm(List<CheckedPredicate<Message, MessagingException>> messageFilters)\n+        {\n+            this.messageFilters = messageFilters;\n+        }\n+\n+        @Override\n+        public boolean match(Message msg)\n+        {\n+            for (CheckedPredicate<Message, MessagingException> filter : messageFilters)", "originalCommit": "a2ede531bb40aba6b942502268f18a18d4c80fa2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc1MDIwNA==", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r453750204", "bodyText": "when looking at MessagingException hierarchy I can assume that it can be either MailConnectException or MessageRemovedException or MethodNotSupportedException. I will add handling of MessageRemovedException", "author": "uarlouski", "createdAt": "2020-07-13T15:49:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU3NzQzOA=="}], "type": "inlineReview", "revised_code": {"commit": "34ba5796429b9029e7453e3c4db9b13ecfca3f24", "chunk": "diff --git a/vividus-plugin-email/src/main/java/org/vividus/bdd/email/service/ImapFetchService.java b/vividus-plugin-email/src/main/java/org/vividus/bdd/email/service/ImapFetchService.java\nindex 0b935ffd..4fe72109 100644\n--- a/vividus-plugin-email/src/main/java/org/vividus/bdd/email/service/ImapFetchService.java\n+++ b/vividus-plugin-email/src/main/java/org/vividus/bdd/email/service/ImapFetchService.java\n\n@@ -35,6 +35,7 @@ import javax.mail.FetchProfile;\n import javax.mail.FetchProfile.Item;\n import javax.mail.Folder;\n import javax.mail.Message;\n+import javax.mail.MessageRemovedException;\n import javax.mail.MessagingException;\n import javax.mail.PasswordAuthentication;\n import javax.mail.Session;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU3OTIwMA==", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r453579200", "bodyText": "new ArrayLst<>(this.messages) ?", "author": "ikalinin1", "createdAt": "2020-07-13T11:20:17Z", "path": "vividus-plugin-email/src/main/java/org/vividus/bdd/email/service/ImapFetchService.java", "diffHunk": "@@ -0,0 +1,351 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.email.service;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.locks.Condition;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+import javax.mail.Authenticator;\n+import javax.mail.FetchProfile;\n+import javax.mail.FetchProfile.Item;\n+import javax.mail.Folder;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.PasswordAuthentication;\n+import javax.mail.Session;\n+import javax.mail.Store;\n+import javax.mail.event.MessageCountEvent;\n+import javax.mail.event.MessageCountListener;\n+import javax.mail.search.SearchTerm;\n+\n+import org.vividus.bdd.email.factory.EmailMessageFactory;\n+import org.vividus.bdd.email.factory.EmailMessageFactory.EmailMessageCreationException;\n+import org.vividus.bdd.email.model.EmailMessage;\n+import org.vividus.bdd.email.model.EmailServerConfiguration;\n+import org.vividus.util.Sleeper;\n+import org.vividus.util.function.CheckedPredicate;\n+import org.vividus.util.function.CheckedSupplier;\n+import org.vividus.util.wait.WaitMode;\n+import org.vividus.util.wait.Waiter;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+\n+public class ImapFetchService implements EmailFetchService\n+{\n+    private static final String PROTOCOL = \"imaps\";\n+\n+    private static final float EVENT_ARRIVAL_FACTOR = 0.8f;\n+    private static final long POLL_LOWER_BOUND = 5;\n+\n+    private final WaitMode waitMode;\n+    private final String folder;\n+    private final long messageEventWaitInMillis;\n+\n+    private final EmailMessageFactory emailMessageFactory;\n+\n+    public ImapFetchService(Duration duration, int retryTimes, String folder, EmailMessageFactory emailMessageFactory)\n+    {\n+        this.waitMode = new WaitMode(duration, retryTimes);\n+        long pollingTimeout = waitMode.calculatePollingTimeout(TimeUnit.SECONDS);\n+        if (pollingTimeout < POLL_LOWER_BOUND)\n+        {\n+            throw new IllegalArgumentException(String.format(\"Polling timeout must exceed %d seconds, but got %d\",\n+                    POLL_LOWER_BOUND, pollingTimeout));\n+        }\n+        this.messageEventWaitInMillis = (long) (waitMode.calculatePollingTimeout(TimeUnit.MILLISECONDS)\n+                * EVENT_ARRIVAL_FACTOR);\n+        this.folder = folder;\n+        this.emailMessageFactory = emailMessageFactory;\n+    }\n+\n+    @Override\n+    public List<EmailMessage> fetch(List<CheckedPredicate<Message, MessagingException>> messageFilters,\n+            EmailServerConfiguration configuration) throws EmailFetchServiceException\n+    {\n+        Authenticator authenticator = new PasswordAuthenticator(configuration.getUsername(),\n+                configuration.getPassword());\n+\n+        Properties properties = new Properties();\n+        properties.putAll(asImapsProperties(configuration.getProperties()));\n+\n+        Session session = Session.getInstance(properties, authenticator);\n+\n+        try (Store store = session.getStore(PROTOCOL); Folder mailFolder = getFolder(store))\n+        {\n+            SearchTerm searchTerm = new PredicateSearchTerm(messageFilters);\n+            PollingMessageListener listener = new PollingMessageListener(mailFolder::isOpen, searchTerm);\n+\n+            mailFolder.addMessageCountListener(listener);\n+            mailFolder.open(Folder.READ_ONLY);\n+\n+            Message[] messages = fetchMessages(mailFolder, Set.of(Item.ENVELOPE));\n+            Message[] filtered = mailFolder.search(searchTerm, messages);\n+\n+            if (filtered.length > 0)\n+            {\n+                fetchMessages(mailFolder, filtered, Set.of(Item.CONTENT_INFO));\n+                return asMailMessages(List.of(filtered));\n+            }\n+            else\n+            {\n+                Waiter waiter = new Waiter(waitMode);\n+                List<Message> output = interruptible(() -> waiter.wait(listener::getMessages, msgs -> !msgs.isEmpty()));\n+                return asMailMessages(output);\n+            }\n+        }\n+        catch (MessagingException | EmailMessageCreationException | InternalEmailFetchServiceException e)\n+        {\n+            throw new EmailFetchServiceException(e);\n+        }\n+    }\n+\n+    private List<EmailMessage> asMailMessages(List<Message> messages) throws EmailMessageCreationException\n+    {\n+        List<EmailMessage> emailMessages = new ArrayList<>(messages.size());\n+        for (Message message : messages)\n+        {\n+            emailMessages.add(emailMessageFactory.create(message));\n+        }\n+        return emailMessages;\n+    }\n+\n+    private Folder getFolder(Store store) throws MessagingException\n+    {\n+        store.connect();\n+        return store.getFolder(this.folder);\n+    }\n+\n+    private Message[] fetchMessages(Folder folder, Set<Item> fetchSettings) throws MessagingException\n+    {\n+        return fetchMessages(folder, folder.getMessages(), fetchSettings);\n+    }\n+\n+    private Message[] fetchMessages(Folder folder, Message[] messages, Set<Item> fetchSettings)\n+            throws MessagingException\n+    {\n+        FetchProfile profile = new FetchProfile();\n+        fetchSettings.forEach(profile::add);\n+        folder.fetch(messages, profile);\n+        return messages;\n+    }\n+\n+    private Map<String, String> asImapsProperties(Map<String, String> properties)\n+    {\n+        return properties.entrySet().stream()\n+                .collect(Collectors.toMap(e -> \"mail.\" + PROTOCOL + \".\" + e.getKey(), Map.Entry::getValue));\n+    }\n+\n+    private <T> T interruptible(CheckedSupplier<T, InterruptedException> supplier)\n+    {\n+        try\n+        {\n+            return supplier.get();\n+        }\n+        catch (InterruptedException e)\n+        {\n+            Thread.currentThread().interrupt();\n+            throw new IllegalStateException(e);\n+        }\n+    }\n+\n+    private static final class PredicateSearchTerm extends SearchTerm\n+    {\n+        private static final long serialVersionUID = 1163386376061414046L;\n+\n+        @SuppressFBWarnings(\"SE_TRANSIENT_FIELD_NOT_RESTORED\")\n+        private final transient List<CheckedPredicate<Message, MessagingException>> messageFilters;\n+\n+        private PredicateSearchTerm(List<CheckedPredicate<Message, MessagingException>> messageFilters)\n+        {\n+            this.messageFilters = messageFilters;\n+        }\n+\n+        @Override\n+        public boolean match(Message msg)\n+        {\n+            for (CheckedPredicate<Message, MessagingException> filter : messageFilters)\n+            {\n+                try\n+                {\n+                    if (!filter.test(msg))\n+                    {\n+                        return false;\n+                    }\n+                }\n+                catch (MessagingException e)\n+                {\n+                    throw new InternalEmailFetchServiceException(e);\n+                }\n+            }\n+            return true;\n+        }\n+    }\n+\n+    private static final class PasswordAuthenticator extends Authenticator\n+    {\n+        private final String username;\n+        private final String password;\n+\n+        private PasswordAuthenticator(String username, String password)\n+        {\n+            this.username = username;\n+            this.password = password;\n+        }\n+\n+        @Override\n+        protected PasswordAuthentication getPasswordAuthentication()\n+        {\n+            return new PasswordAuthentication(username, password);\n+        }\n+    }\n+\n+    private final class PollingMessageListener implements MessageCountListener\n+    {\n+        private final Runnable refresh;\n+        private final SearchTerm searchTerm;\n+        private final List<Message> messages;\n+\n+        private final ReentrantLock lock = new ReentrantLock();\n+        private final Condition messageArrivedCondition = lock.newCondition();\n+        private final Condition messageHandleCondition = lock.newCondition();\n+        private final AtomicBoolean handleFlag = new AtomicBoolean(true);\n+\n+        private PollingMessageListener(Runnable refresh, SearchTerm searchTerm)\n+        {\n+            this.refresh = refresh;\n+            this.searchTerm = searchTerm;\n+            this.messages = new CopyOnWriteArrayList<>();\n+        }\n+\n+        @Override\n+        public void messagesAdded(MessageCountEvent event)\n+        {\n+            try\n+            {\n+                lock.lock();\n+                messageArrivedCondition.signal();\n+                interruptible(() ->\n+                {\n+                    while (handleFlag.get())\n+                    {\n+                        messageHandleCondition.await();\n+                    }\n+                    return null;\n+                });\n+                for (Message message : event.getMessages())\n+                {\n+                    if (searchTerm.match(message))\n+                    {\n+                        messages.add(message);\n+                    }\n+                }\n+            }\n+            finally\n+            {\n+                try\n+                {\n+                    handleFlag.set(true);\n+                    messageHandleCondition.signal();\n+                }\n+                finally\n+                {\n+                    lock.unlock();\n+                }\n+            }\n+        }\n+\n+        @Override\n+        public void messagesRemoved(MessageCountEvent event)\n+        {\n+            // empty\n+        }\n+\n+        public List<Message> getMessages() throws InterruptedException\n+        {\n+            while (lock.isLocked())\n+            {\n+                Sleeper.sleep(Duration.ofSeconds(1));\n+            }\n+            try\n+            {\n+                lock.lock();\n+                refresh.run();\n+                boolean arrived = false;\n+                while (true)\n+                {\n+                    arrived = messageArrivedCondition.await(messageEventWaitInMillis, TimeUnit.MILLISECONDS);\n+                    break;\n+                }\n+\n+                if (arrived)\n+                {\n+                    handleFlag.set(false);\n+                    messageHandleCondition.signal();\n+                    while (!handleFlag.get())\n+                    {\n+                        messageHandleCondition.await();\n+                    }\n+                }\n+                return StreamSupport.stream(this.messages.spliterator(), false)", "originalCommit": "a2ede531bb40aba6b942502268f18a18d4c80fa2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzcyODM0Mg==", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r453728342", "bodyText": "this.messages is the COWAL, just creating ArrayList from another collection doesn't guarantee thread safety", "author": "uarlouski", "createdAt": "2020-07-13T15:20:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU3OTIwMA=="}], "type": "inlineReview", "revised_code": {"commit": "34ba5796429b9029e7453e3c4db9b13ecfca3f24", "chunk": "diff --git a/vividus-plugin-email/src/main/java/org/vividus/bdd/email/service/ImapFetchService.java b/vividus-plugin-email/src/main/java/org/vividus/bdd/email/service/ImapFetchService.java\nindex 0b935ffd..4fe72109 100644\n--- a/vividus-plugin-email/src/main/java/org/vividus/bdd/email/service/ImapFetchService.java\n+++ b/vividus-plugin-email/src/main/java/org/vividus/bdd/email/service/ImapFetchService.java\n\n@@ -35,6 +35,7 @@ import javax.mail.FetchProfile;\n import javax.mail.FetchProfile.Item;\n import javax.mail.Folder;\n import javax.mail.Message;\n+import javax.mail.MessageRemovedException;\n import javax.mail.MessagingException;\n import javax.mail.PasswordAuthentication;\n import javax.mail.Session;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYzOTU3Mg==", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r453639572", "bodyText": "mail -> email", "author": "valfirst", "createdAt": "2020-07-13T13:14:15Z", "path": "vividus-plugin-email/src/main/java/org/vividus/bdd/email/steps/EmailSteps.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.email.steps;\n+\n+import static org.hamcrest.Matchers.greaterThan;\n+import static org.hamcrest.Matchers.hasSize;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+\n+import javax.mail.Address;\n+import javax.mail.Message;\n+import javax.mail.Message.RecipientType;\n+import javax.mail.MessagingException;\n+\n+import org.jbehave.core.annotations.When;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.bdd.context.IBddVariableContext;\n+import org.vividus.bdd.email.model.EmailMessage;\n+import org.vividus.bdd.email.model.EmailMessageTextContent;\n+import org.vividus.bdd.email.model.EmailServerConfiguration;\n+import org.vividus.bdd.email.service.EmailFetchService;\n+import org.vividus.bdd.email.service.ImapFetchService.EmailFetchServiceException;\n+import org.vividus.bdd.variable.VariableScope;\n+import org.vividus.softassert.ISoftAssert;\n+import org.vividus.util.function.CheckedPredicate;\n+\n+public class EmailSteps\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(EmailSteps.class);\n+\n+    private final Map<String, EmailServerConfiguration> serverConfigurations;\n+    private final EmailFetchService messageFetchService;\n+    private final IBddVariableContext bddVariableContext;\n+    private final ISoftAssert softAssert;\n+\n+    public EmailSteps(Map<String, EmailServerConfiguration> serverConfigurations,\n+            EmailFetchService messageFetchService, IBddVariableContext bddVariableContext, ISoftAssert softAssert)\n+    {\n+        this.messageFetchService = messageFetchService;\n+        this.bddVariableContext = bddVariableContext;\n+        this.serverConfigurations = serverConfigurations;\n+        this.softAssert = softAssert;\n+    }\n+\n+    /**\n+     * Step fetches a mail message from a server specified by the <b>serverKey</b> and if message is found saves\n+     * its <i>text</i> content parts into indexed variables with the prefix <b>variableName</b> i.e. if the message\n+     * contains two text parts, the first part will be saved under <b>variableName[0]</b> and the second under\n+     * <b>variableName[1]</b>\n+     * <div><b>Example:</b></div>\n+     * <pre>\n+     * <code>\n+     * When I fetch mail message from `gmail` server filtered by\n+     * <br> |parameter     |rule            |value                                                   |\n+     * <br> |SUBJECT       |EQUAL_TO        |Registration code                                       |\n+     * <br> |SENT_DATE     |GREATER_THAN    |1970-01-01T00:00:00.000Z                                |\n+     * <br> |RECEIVED_DATE |LESS_THAN       |2020-06-14T11:47:11.521Z                                |\n+     * <br> |FROM          |IS_EQUAL_TO     |service &lt;regservice@company.com&gt;                  |\n+     * <br> |CC_RECIPIENTS |CONTAINS        |admin                                                   |\n+     * <br> |BCC_RECIPIENTS|DOES_NOT_CONTAIN|gmail.com                                               |\n+     * <br> |TO_RECIPIENTS |EQUAL_TO        |me &lt;me@company.com&gt;, boss &lt;boss@company.com&gt;|\n+     * <br> |REPLY_TO      |MATCHES         |(?i)[0-9]@.*                                            |\n+     * <br>  and save message content to SCENARIO variable `textContent`\n+     * </code>\n+     * </pre>\n+     * Filtering <b>rule</b>s:\n+     * <ul>\n+     * <li>EQUAL_TO</li>\n+     * <li>GREATER_THAN_OR_EQUAL_TO</li>\n+     * <li>GREATER_THAN</li>\n+     * <li>LESS_THAN_OR_EQUAL_TO</li>\n+     * <li>LESS_THAN</li>\n+     * <li>NOT_EQUAL_TO</li>\n+     * <li>IS_EQUAL_TO</li>\n+     * <li>CONTAINS</li>\n+     * <li>DOES_NOT_CONTAIN</li>\n+     * <li>MATCHES</li>\n+     * </ul>\n+     * <b>Parameter</b>s:\n+     * <ul>\n+     * <li>SUBJECT</li>\n+     * <li>SENT_DATE</li>\n+     * <li>RECEIVED_DATE</li>\n+     * <li>FROM</li>\n+     * <li>CC_RECIPIENTS</li>\n+     * <li>BCC_RECIPIENTS</li>\n+     * <li>TO_RECIPIENTS</li>\n+     * <li>REPLY_TO</li>\n+     * </ul>\n+     * Notes:\n+     * <ul>\n+     * <li>CONTAINS, MATCHES, IS_EQUAL_TO, DOES_NOT_CONTAIN are not allowed to be used with <i>date</i>\n+     * parameters</li>\n+     * <li><b>rule</b> names are case insensitive</li>\n+     * <li>multiple <i>address</i> parameters can be checked by separating expected value by commas</li>\n+     * <li><i>date</i> parameters must have zoned ISO 8061 format i.e. 1970-01-01T00:00:00.000Z</li>\n+     * </ul>\n+     * @param serverKey key of a server to fetch a message from\n+     * @param messageFilters message filters\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName A name of variable to assign the values from command execution result\n+     * @throws MessagingException signals that an exception of some sort has occurred while communicating with\n+     * message service\n+     * @throws EmailFetchServiceException signals that an exception of some sort has occurred while fetching\n+     * message from email server\n+     */\n+    @When(\"I fetch mail message from `$serverKey` server filtered by $filters and save message content to $scopes \"", "originalCommit": "a2ede531bb40aba6b942502268f18a18d4c80fa2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "34ba5796429b9029e7453e3c4db9b13ecfca3f24", "chunk": "diff --git a/vividus-plugin-email/src/main/java/org/vividus/bdd/email/steps/EmailSteps.java b/vividus-plugin-email/src/main/java/org/vividus/bdd/email/steps/EmailSteps.java\nindex f3a93ae4..9c075682 100644\n--- a/vividus-plugin-email/src/main/java/org/vividus/bdd/email/steps/EmailSteps.java\n+++ b/vividus-plugin-email/src/main/java/org/vividus/bdd/email/steps/EmailSteps.java\n\n@@ -133,7 +133,7 @@ public class EmailSteps\n      * @throws EmailFetchServiceException signals that an exception of some sort has occurred while fetching\n      * message from email server\n      */\n-    @When(\"I fetch mail message from `$serverKey` server filtered by $filters and save message content to $scopes \"\n+    @When(\"I fetch email message from `$serverKey` server filtered by $filters and save message content to $scopes \"\n             + \"variable `$variableName`\")\n     public void saveMessageContent(String serverKey, List<CheckedPredicate<Message, MessagingException>> messageFilters,\n             Set<VariableScope> scopes, String variableName) throws EmailFetchServiceException, MessagingException\n"}}, {"oid": "34ba5796429b9029e7453e3c4db9b13ecfca3f24", "url": "https://github.com/vividus-framework/vividus/commit/34ba5796429b9029e7453e3c4db9b13ecfca3f24", "message": "Add module to work with email servers", "committedDate": "2020-07-14T08:30:57Z", "type": "forcePushed"}, {"oid": "9e7f7a0c953ad2da2dfaa15b8be2243702a8ac73", "url": "https://github.com/vividus-framework/vividus/commit/9e7f7a0c953ad2da2dfaa15b8be2243702a8ac73", "message": "Add module to work with email servers", "committedDate": "2020-07-14T09:30:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIzODA5OA==", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r454238098", "bodyText": "exceed -> be not less than", "author": "valfirst", "createdAt": "2020-07-14T09:49:34Z", "path": "vividus-plugin-email/src/main/java/org/vividus/bdd/email/service/ImapFetchService.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.email.service;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.locks.Condition;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+import javax.mail.Authenticator;\n+import javax.mail.FetchProfile;\n+import javax.mail.FetchProfile.Item;\n+import javax.mail.Folder;\n+import javax.mail.Message;\n+import javax.mail.MessageRemovedException;\n+import javax.mail.MessagingException;\n+import javax.mail.PasswordAuthentication;\n+import javax.mail.Session;\n+import javax.mail.Store;\n+import javax.mail.event.MessageCountEvent;\n+import javax.mail.event.MessageCountListener;\n+import javax.mail.search.SearchTerm;\n+\n+import org.vividus.bdd.email.factory.EmailMessageFactory;\n+import org.vividus.bdd.email.factory.EmailMessageFactory.EmailMessageCreationException;\n+import org.vividus.bdd.email.model.EmailMessage;\n+import org.vividus.bdd.email.model.EmailServerConfiguration;\n+import org.vividus.util.Sleeper;\n+import org.vividus.util.function.CheckedPredicate;\n+import org.vividus.util.function.CheckedSupplier;\n+import org.vividus.util.wait.WaitMode;\n+import org.vividus.util.wait.Waiter;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+\n+public class ImapFetchService implements EmailFetchService\n+{\n+    private static final String PROTOCOL = \"imaps\";\n+\n+    private static final float EVENT_ARRIVAL_FACTOR = 0.8f;\n+    private static final long POLL_LOWER_BOUND = 5;\n+\n+    private final WaitMode waitMode;\n+    private final String folder;\n+    private final long messageEventWaitInMillis;\n+\n+    private final EmailMessageFactory emailMessageFactory;\n+\n+    public ImapFetchService(Duration duration, int retryTimes, String folder, EmailMessageFactory emailMessageFactory)\n+    {\n+        this.waitMode = new WaitMode(duration, retryTimes);\n+        long pollingTimeout = waitMode.calculatePollingTimeout(TimeUnit.SECONDS);\n+        if (pollingTimeout < POLL_LOWER_BOUND)\n+        {\n+            throw new IllegalArgumentException(String.format(\"Polling timeout must exceed %d seconds, but got %d\",", "originalCommit": "9e7f7a0c953ad2da2dfaa15b8be2243702a8ac73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7930969597587ffd3469d4dd1df4aab8bf713f03", "chunk": "diff --git a/vividus-plugin-email/src/main/java/org/vividus/bdd/email/service/ImapFetchService.java b/vividus-plugin-email/src/main/java/org/vividus/bdd/email/service/ImapFetchService.java\nindex 4fe72109..92bb5253 100644\n--- a/vividus-plugin-email/src/main/java/org/vividus/bdd/email/service/ImapFetchService.java\n+++ b/vividus-plugin-email/src/main/java/org/vividus/bdd/email/service/ImapFetchService.java\n\n@@ -75,8 +75,9 @@ public class ImapFetchService implements EmailFetchService\n         long pollingTimeout = waitMode.calculatePollingTimeout(TimeUnit.SECONDS);\n         if (pollingTimeout < POLL_LOWER_BOUND)\n         {\n-            throw new IllegalArgumentException(String.format(\"Polling timeout must exceed %d seconds, but got %d\",\n-                    POLL_LOWER_BOUND, pollingTimeout));\n+            throw new IllegalArgumentException(\n+                    String.format(\"Polling timeout must be not less than %d seconds, but got %d milliseconds\",\n+                            POLL_LOWER_BOUND, waitMode.calculatePollingTimeout(TimeUnit.MILLISECONDS)));\n         }\n         this.messageEventWaitInMillis = (long) (waitMode.calculatePollingTimeout(TimeUnit.MILLISECONDS)\n                 * EVENT_ARRIVAL_FACTOR);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIzODU0OQ==", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r454238549", "bodyText": "use milliseconds to show precise error message in case of invalid configuration", "author": "valfirst", "createdAt": "2020-07-14T09:50:21Z", "path": "vividus-plugin-email/src/main/java/org/vividus/bdd/email/service/ImapFetchService.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.email.service;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.locks.Condition;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+import javax.mail.Authenticator;\n+import javax.mail.FetchProfile;\n+import javax.mail.FetchProfile.Item;\n+import javax.mail.Folder;\n+import javax.mail.Message;\n+import javax.mail.MessageRemovedException;\n+import javax.mail.MessagingException;\n+import javax.mail.PasswordAuthentication;\n+import javax.mail.Session;\n+import javax.mail.Store;\n+import javax.mail.event.MessageCountEvent;\n+import javax.mail.event.MessageCountListener;\n+import javax.mail.search.SearchTerm;\n+\n+import org.vividus.bdd.email.factory.EmailMessageFactory;\n+import org.vividus.bdd.email.factory.EmailMessageFactory.EmailMessageCreationException;\n+import org.vividus.bdd.email.model.EmailMessage;\n+import org.vividus.bdd.email.model.EmailServerConfiguration;\n+import org.vividus.util.Sleeper;\n+import org.vividus.util.function.CheckedPredicate;\n+import org.vividus.util.function.CheckedSupplier;\n+import org.vividus.util.wait.WaitMode;\n+import org.vividus.util.wait.Waiter;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+\n+public class ImapFetchService implements EmailFetchService\n+{\n+    private static final String PROTOCOL = \"imaps\";\n+\n+    private static final float EVENT_ARRIVAL_FACTOR = 0.8f;\n+    private static final long POLL_LOWER_BOUND = 5;\n+\n+    private final WaitMode waitMode;\n+    private final String folder;\n+    private final long messageEventWaitInMillis;\n+\n+    private final EmailMessageFactory emailMessageFactory;\n+\n+    public ImapFetchService(Duration duration, int retryTimes, String folder, EmailMessageFactory emailMessageFactory)\n+    {\n+        this.waitMode = new WaitMode(duration, retryTimes);\n+        long pollingTimeout = waitMode.calculatePollingTimeout(TimeUnit.SECONDS);", "originalCommit": "9e7f7a0c953ad2da2dfaa15b8be2243702a8ac73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7930969597587ffd3469d4dd1df4aab8bf713f03", "chunk": "diff --git a/vividus-plugin-email/src/main/java/org/vividus/bdd/email/service/ImapFetchService.java b/vividus-plugin-email/src/main/java/org/vividus/bdd/email/service/ImapFetchService.java\nindex 4fe72109..92bb5253 100644\n--- a/vividus-plugin-email/src/main/java/org/vividus/bdd/email/service/ImapFetchService.java\n+++ b/vividus-plugin-email/src/main/java/org/vividus/bdd/email/service/ImapFetchService.java\n\n@@ -75,8 +75,9 @@ public class ImapFetchService implements EmailFetchService\n         long pollingTimeout = waitMode.calculatePollingTimeout(TimeUnit.SECONDS);\n         if (pollingTimeout < POLL_LOWER_BOUND)\n         {\n-            throw new IllegalArgumentException(String.format(\"Polling timeout must exceed %d seconds, but got %d\",\n-                    POLL_LOWER_BOUND, pollingTimeout));\n+            throw new IllegalArgumentException(\n+                    String.format(\"Polling timeout must be not less than %d seconds, but got %d milliseconds\",\n+                            POLL_LOWER_BOUND, waitMode.calculatePollingTimeout(TimeUnit.MILLISECONDS)));\n         }\n         this.messageEventWaitInMillis = (long) (waitMode.calculatePollingTimeout(TimeUnit.MILLISECONDS)\n                 * EVENT_ARRIVAL_FACTOR);\n"}}, {"oid": "7930969597587ffd3469d4dd1df4aab8bf713f03", "url": "https://github.com/vividus-framework/vividus/commit/7930969597587ffd3469d4dd1df4aab8bf713f03", "message": "Add module to work with email servers", "committedDate": "2020-07-14T10:12:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDI4MzkxMw==", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r454283913", "bodyText": "atInfo?", "author": "ikalinin1", "createdAt": "2020-07-14T11:19:10Z", "path": "vividus-plugin-email/src/main/java/org/vividus/bdd/email/steps/EmailSteps.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.email.steps;\n+\n+import static org.hamcrest.Matchers.greaterThan;\n+import static org.hamcrest.Matchers.hasSize;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+\n+import javax.mail.Address;\n+import javax.mail.Message;\n+import javax.mail.Message.RecipientType;\n+import javax.mail.MessagingException;\n+\n+import org.jbehave.core.annotations.When;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.bdd.context.IBddVariableContext;\n+import org.vividus.bdd.email.model.EmailMessage;\n+import org.vividus.bdd.email.model.EmailMessageTextContent;\n+import org.vividus.bdd.email.model.EmailServerConfiguration;\n+import org.vividus.bdd.email.service.EmailFetchService;\n+import org.vividus.bdd.email.service.ImapFetchService.EmailFetchServiceException;\n+import org.vividus.bdd.variable.VariableScope;\n+import org.vividus.softassert.ISoftAssert;\n+import org.vividus.util.function.CheckedPredicate;\n+\n+public class EmailSteps\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(EmailSteps.class);\n+\n+    private final Map<String, EmailServerConfiguration> serverConfigurations;\n+    private final EmailFetchService messageFetchService;\n+    private final IBddVariableContext bddVariableContext;\n+    private final ISoftAssert softAssert;\n+\n+    public EmailSteps(Map<String, EmailServerConfiguration> serverConfigurations,\n+            EmailFetchService messageFetchService, IBddVariableContext bddVariableContext, ISoftAssert softAssert)\n+    {\n+        this.messageFetchService = messageFetchService;\n+        this.bddVariableContext = bddVariableContext;\n+        this.serverConfigurations = serverConfigurations;\n+        this.softAssert = softAssert;\n+    }\n+\n+    /**\n+     * Step fetches a mail message from a server specified by the <b>serverKey</b> and if message is found saves\n+     * its <i>text</i> content parts into indexed variables with the prefix <b>variableName</b> i.e. if the message\n+     * contains two text parts, the first part will be saved under <b>variableName[0]</b> and the second under\n+     * <b>variableName[1]</b>\n+     * <div><b>Example:</b></div>\n+     * <pre>\n+     * <code>\n+     * When I fetch mail message from `gmail` server filtered by\n+     * <br> |parameter     |rule            |value                                                   |\n+     * <br> |SUBJECT       |EQUAL_TO        |Registration code                                       |\n+     * <br> |SENT_DATE     |GREATER_THAN    |1970-01-01T00:00:00.000Z                                |\n+     * <br> |RECEIVED_DATE |LESS_THAN       |2020-06-14T11:47:11.521Z                                |\n+     * <br> |FROM          |IS_EQUAL_TO     |service &lt;regservice@company.com&gt;                  |\n+     * <br> |CC_RECIPIENTS |CONTAINS        |admin                                                   |\n+     * <br> |BCC_RECIPIENTS|DOES_NOT_CONTAIN|gmail.com                                               |\n+     * <br> |TO_RECIPIENTS |EQUAL_TO        |me &lt;me@company.com&gt;, boss &lt;boss@company.com&gt;|\n+     * <br> |REPLY_TO      |MATCHES         |(?i)[0-9]@.*                                            |\n+     * <br>  and save message content to SCENARIO variable `textContent`\n+     * </code>\n+     * </pre>\n+     * Filtering <b>rule</b>s:\n+     * <ul>\n+     * <li>EQUAL_TO</li>\n+     * <li>GREATER_THAN_OR_EQUAL_TO</li>\n+     * <li>GREATER_THAN</li>\n+     * <li>LESS_THAN_OR_EQUAL_TO</li>\n+     * <li>LESS_THAN</li>\n+     * <li>NOT_EQUAL_TO</li>\n+     * <li>IS_EQUAL_TO</li>\n+     * <li>CONTAINS</li>\n+     * <li>DOES_NOT_CONTAIN</li>\n+     * <li>MATCHES</li>\n+     * </ul>\n+     * <b>Parameter</b>s:\n+     * <ul>\n+     * <li>SUBJECT</li>\n+     * <li>SENT_DATE</li>\n+     * <li>RECEIVED_DATE</li>\n+     * <li>FROM</li>\n+     * <li>CC_RECIPIENTS</li>\n+     * <li>BCC_RECIPIENTS</li>\n+     * <li>TO_RECIPIENTS</li>\n+     * <li>REPLY_TO</li>\n+     * </ul>\n+     * Notes:\n+     * <ul>\n+     * <li>CONTAINS, MATCHES, IS_EQUAL_TO, DOES_NOT_CONTAIN are not allowed to be used with <i>date</i>\n+     * parameters</li>\n+     * <li><b>rule</b> names are case insensitive</li>\n+     * <li>multiple <i>address</i> parameters can be checked by separating expected value by commas</li>\n+     * <li><i>date</i> parameters must have zoned ISO 8061 format i.e. 1970-01-01T00:00:00.000Z</li>\n+     * </ul>\n+     * @param serverKey key of a server to fetch a message from\n+     * @param messageFilters message filters\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName A name of variable to assign the values from command execution result\n+     * @throws MessagingException signals that an exception of some sort has occurred while communicating with\n+     * message service\n+     * @throws EmailFetchServiceException signals that an exception of some sort has occurred while fetching\n+     * message from email server\n+     */\n+    @When(\"I fetch email message from `$serverKey` server filtered by $filters and save message content to $scopes \"\n+            + \"variable `$variableName`\")\n+    public void saveMessageContent(String serverKey, List<CheckedPredicate<Message, MessagingException>> messageFilters,\n+            Set<VariableScope> scopes, String variableName) throws EmailFetchServiceException, MessagingException\n+    {\n+        EmailServerConfiguration config = serverConfigurations.get(serverKey);\n+        List<EmailMessage> messages = messageFetchService.fetch(messageFilters, config);\n+\n+        int size = messages.size();\n+        if (messages.size() != 1)\n+        {\n+            if (size == 0)\n+            {\n+                softAssert.recordFailedAssertion(\"No messages were found by the specified filters\");\n+                return;\n+            }\n+            softAssert.recordFailedAssertion(\n+                    String.format(\"Expected one message, but found %d:%n%s\", size, formatMessages(messages)));\n+            return;\n+        }\n+\n+        EmailMessage message = messages.get(0);\n+        List<EmailMessageTextContent> contents = message.getContents();\n+        if (softAssert.assertThat(\"Email text content to save\", contents, hasSize(greaterThan(0))))\n+        {\n+            IntStream.range(0, contents.size()).forEach(index ->\n+            {\n+                EmailMessageTextContent content = contents.get(index);\n+                LOGGER.info(\"Content {} by index '{}'\", content.getContentType(), index);", "originalCommit": "7930969597587ffd3469d4dd1df4aab8bf713f03", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDI5NTUyOA==", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r454295528", "bodyText": "this is a controversial fix because we do not have any business logic to get args, so it might not be a performance win", "author": "uarlouski", "createdAt": "2020-07-14T11:42:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDI4MzkxMw=="}], "type": "inlineReview", "revised_code": {"commit": "f1b38b5d3187d5d60e06a1ac2540e54e16dccb69", "chunk": "diff --git a/vividus-plugin-email/src/main/java/org/vividus/bdd/email/steps/EmailSteps.java b/vividus-plugin-email/src/main/java/org/vividus/bdd/email/steps/EmailSteps.java\nindex 9c075682..9a2c9705 100644\n--- a/vividus-plugin-email/src/main/java/org/vividus/bdd/email/steps/EmailSteps.java\n+++ b/vividus-plugin-email/src/main/java/org/vividus/bdd/email/steps/EmailSteps.java\n\n@@ -72,7 +72,7 @@ public class EmailSteps\n      * <div><b>Example:</b></div>\n      * <pre>\n      * <code>\n-     * When I fetch mail message from `gmail` server filtered by\n+     * When I fetch email message from `gmail` server filtered by\n      * <br> |parameter     |rule            |value                                                   |\n      * <br> |SUBJECT       |EQUAL_TO        |Registration code                                       |\n      * <br> |SENT_DATE     |GREATER_THAN    |1970-01-01T00:00:00.000Z                                |\n"}}, {"oid": "f1b38b5d3187d5d60e06a1ac2540e54e16dccb69", "url": "https://github.com/vividus-framework/vividus/commit/f1b38b5d3187d5d60e06a1ac2540e54e16dccb69", "message": "Add module to work with email servers", "committedDate": "2020-07-14T11:48:04Z", "type": "forcePushed"}, {"oid": "5f1b46375d9656f03255a76f06bfcfe0b5eac52e", "url": "https://github.com/vividus-framework/vividus/commit/5f1b46375d9656f03255a76f06bfcfe0b5eac52e", "message": "Add module to work with email servers", "committedDate": "2020-07-14T12:09:15Z", "type": "commit"}, {"oid": "5f1b46375d9656f03255a76f06bfcfe0b5eac52e", "url": "https://github.com/vividus-framework/vividus/commit/5f1b46375d9656f03255a76f06bfcfe0b5eac52e", "message": "Add module to work with email servers", "committedDate": "2020-07-14T12:09:15Z", "type": "forcePushed"}]}