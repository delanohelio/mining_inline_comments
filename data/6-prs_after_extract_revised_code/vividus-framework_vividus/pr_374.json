{"pr_number": 374, "pr_title": "Return human-readable description by ComparisonRule.toString()", "pr_createdAt": "2020-03-05T14:47:42Z", "pr_url": "https://github.com/vividus-framework/vividus/pull/374", "timeline": [{"oid": "c2fdb2a46a8c789fdbb43c3f691c9f88ca06819c", "url": "https://github.com/vividus-framework/vividus/commit/c2fdb2a46a8c789fdbb43c3f691c9f88ca06819c", "message": "Refactor Comparison rule conversion", "committedDate": "2020-03-05T15:11:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM2NjU3Mw==", "url": "https://github.com/vividus-framework/vividus/pull/374#discussion_r388366573", "bodyText": "return name().toLowerCase().replace('_', ' ');\n?", "author": "valfirst", "createdAt": "2020-03-05T15:26:12Z", "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/steps/ComparisonRule.java", "diffHunk": "@@ -94,6 +96,12 @@ public static ComparisonRule parse(String sign)\n                 .findFirst();\n     }\n \n+    @Override\n+    public String toString()\n+    {\n+        return asString;", "originalCommit": "c2fdb2a46a8c789fdbb43c3f691c9f88ca06819c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM3NzAyMQ==", "url": "https://github.com/vividus-framework/vividus/pull/374#discussion_r388377021", "bodyText": "I considered an extra code execution for each toString() method call, when values already defined, as an overhead", "author": "ikalinin1", "createdAt": "2020-03-05T15:41:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM2NjU3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "de8b39afb8f06152e1b68054c217d47d70b853d1", "chunk": "diff --git a/vividus-bdd-engine/src/main/java/org/vividus/bdd/steps/ComparisonRule.java b/vividus-bdd-engine/src/main/java/org/vividus/bdd/steps/ComparisonRule.java\nindex 75cbf6fd..4918e61c 100644\n--- a/vividus-bdd-engine/src/main/java/org/vividus/bdd/steps/ComparisonRule.java\n+++ b/vividus-bdd-engine/src/main/java/org/vividus/bdd/steps/ComparisonRule.java\n\n@@ -96,10 +94,9 @@ public enum ComparisonRule implements IComparisonRule\n                 .findFirst();\n     }\n \n-    @Override\n     public String toString()\n     {\n-        return asString;\n+        return super.toString().replaceAll(\"_\", \" \").toLowerCase();\n     }\n \n     public String getSign()\n"}}, {"oid": "172a4313820799a25d538d7be9ad4545093083c0", "url": "https://github.com/vividus-framework/vividus/commit/172a4313820799a25d538d7be9ad4545093083c0", "message": "Refactor Comparison rule conversion", "committedDate": "2020-03-05T15:26:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM2OTI1MA==", "url": "https://github.com/vividus-framework/vividus/pull/374#discussion_r388369250", "bodyText": "do you really need to add comparisonRule and number to assertion description? it could be excessive since similar piece of information is added by Matcher", "author": "valfirst", "createdAt": "2020-03-05T15:30:16Z", "path": "vividus-plugin-html/src/main/java/org/vividus/bdd/steps/html/HtmlSteps.java", "diffHunk": "@@ -56,6 +48,36 @@\n         return Optional.empty();\n     }\n \n+    /**\n+     * Checks if HTML contains elements according to rule by CSS selector\n+     * @param cssSelector CSS selector\n+     * @param html HTML to check\n+     * @param comparisonRule The rule to compare values\n+     * <br>(<i>Possible values:</i>\n+     * <br> less than (&lt;),\n+     * <br> less than or equal to (&lt;=),\n+     * <br> greater than(&gt;)\n+     * <br> greater than or equal to(&gt;=),\n+     * <br> equal to(=))\n+     * @param number Number of elements\n+     * @see <a href=\"https://www.w3schools.com/cssref/css_selectors.asp\"><i>CSS Selector Reference</i></a>\n+     * @see <a href=\"https://jsoup.org/apidocs/org/jsoup/select/Selector.html\"><i>Jsoup Selector API</i></a>\n+     * @return true if elements quantity corresponds to rule, false otherwise\n+     */\n+    @Then(\"number of elements found by CSS selector `$cssSelector` in HTML `$html` is $comparisonRule `$quantity`\")\n+    public boolean doesElementByCssSelectorExist(String cssSelector, String html, ComparisonRule comparisonRule,\n+            int number)\n+    {\n+        Elements elements = findElements(html, cssSelector);\n+        return softAssert.assertThat(String.format(\"Number of elements found by CSS selector '%s' is %s %d\",\n+                cssSelector, comparisonRule, number), elements.size(), comparisonRule.getComparisonRule(number));", "originalCommit": "172a4313820799a25d538d7be9ad4545093083c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM3OTkyOA==", "url": "https://github.com/vividus-framework/vividus/pull/374#discussion_r388379928", "bodyText": "I think we should pick one solution. BaseValidation uses this approach.\nIf we will rely on matcher, the PR is obsolete, but we should refactor basevalidations' code", "author": "ikalinin1", "createdAt": "2020-03-05T15:46:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM2OTI1MA=="}], "type": "inlineReview", "revised_code": {"commit": "de8b39afb8f06152e1b68054c217d47d70b853d1", "chunk": "diff --git a/vividus-plugin-html/src/main/java/org/vividus/bdd/steps/html/HtmlSteps.java b/vividus-plugin-html/src/main/java/org/vividus/bdd/steps/html/HtmlSteps.java\nindex ffc52d86..c69b59a7 100644\n--- a/vividus-plugin-html/src/main/java/org/vividus/bdd/steps/html/HtmlSteps.java\n+++ b/vividus-plugin-html/src/main/java/org/vividus/bdd/steps/html/HtmlSteps.java\n\n@@ -48,36 +56,6 @@ public class HtmlSteps\n         return Optional.empty();\n     }\n \n-    /**\n-     * Checks if HTML contains elements according to rule by CSS selector\n-     * @param cssSelector CSS selector\n-     * @param html HTML to check\n-     * @param comparisonRule The rule to compare values\n-     * <br>(<i>Possible values:</i>\n-     * <br> less than (&lt;),\n-     * <br> less than or equal to (&lt;=),\n-     * <br> greater than(&gt;)\n-     * <br> greater than or equal to(&gt;=),\n-     * <br> equal to(=))\n-     * @param number Number of elements\n-     * @see <a href=\"https://www.w3schools.com/cssref/css_selectors.asp\"><i>CSS Selector Reference</i></a>\n-     * @see <a href=\"https://jsoup.org/apidocs/org/jsoup/select/Selector.html\"><i>Jsoup Selector API</i></a>\n-     * @return true if elements quantity corresponds to rule, false otherwise\n-     */\n-    @Then(\"number of elements found by CSS selector `$cssSelector` in HTML `$html` is $comparisonRule `$quantity`\")\n-    public boolean doesElementByCssSelectorExist(String cssSelector, String html, ComparisonRule comparisonRule,\n-            int number)\n-    {\n-        Elements elements = findElements(html, cssSelector);\n-        return softAssert.assertThat(String.format(\"Number of elements found by CSS selector '%s' is %s %d\",\n-                cssSelector, comparisonRule, number), elements.size(), comparisonRule.getComparisonRule(number));\n-    }\n-\n-    private Elements findElements(String html, String cssSelector)\n-    {\n-        return HtmlUtils.getElements(html, cssSelector);\n-    }\n-\n     /**\n      * Checks if HTML has expected data by given CSS selector\n      * @param html HTML to check\n"}}, {"oid": "de8b39afb8f06152e1b68054c217d47d70b853d1", "url": "https://github.com/vividus-framework/vividus/commit/de8b39afb8f06152e1b68054c217d47d70b853d1", "message": "Refactor Comparison rule conversion", "committedDate": "2020-03-06T13:25:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkxNDY3Mg==", "url": "https://github.com/vividus-framework/vividus/pull/374#discussion_r388914672", "bodyText": "since JDK 11 is still our baseline, .replaceAll(\"_\", \" \") -> .replace('_', ' ')", "author": "valfirst", "createdAt": "2020-03-06T13:55:05Z", "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/steps/ComparisonRule.java", "diffHunk": "@@ -94,6 +94,11 @@ public static ComparisonRule parse(String sign)\n                 .findFirst();\n     }\n \n+    public String toString()\n+    {\n+        return super.toString().replaceAll(\"_\", \" \").toLowerCase();", "originalCommit": "de8b39afb8f06152e1b68054c217d47d70b853d1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bea9a34f61c60bc0731a8f39ab3e8d7f4e7af56b", "chunk": "diff --git a/vividus-bdd-engine/src/main/java/org/vividus/bdd/steps/ComparisonRule.java b/vividus-bdd-engine/src/main/java/org/vividus/bdd/steps/ComparisonRule.java\nindex 4918e61c..122b9889 100644\n--- a/vividus-bdd-engine/src/main/java/org/vividus/bdd/steps/ComparisonRule.java\n+++ b/vividus-bdd-engine/src/main/java/org/vividus/bdd/steps/ComparisonRule.java\n\n@@ -96,7 +96,7 @@ public enum ComparisonRule implements IComparisonRule\n \n     public String toString()\n     {\n-        return super.toString().replaceAll(\"_\", \" \").toLowerCase();\n+        return super.toString().replace('_', ' ').toLowerCase();\n     }\n \n     public String getSign()\n"}}, {"oid": "bea9a34f61c60bc0731a8f39ab3e8d7f4e7af56b", "url": "https://github.com/vividus-framework/vividus/commit/bea9a34f61c60bc0731a8f39ab3e8d7f4e7af56b", "message": "Refactor Comparison rule conversion", "committedDate": "2020-03-06T13:58:36Z", "type": "commit"}, {"oid": "bea9a34f61c60bc0731a8f39ab3e8d7f4e7af56b", "url": "https://github.com/vividus-framework/vividus/commit/bea9a34f61c60bc0731a8f39ab3e8d7f4e7af56b", "message": "Refactor Comparison rule conversion", "committedDate": "2020-03-06T13:58:36Z", "type": "forcePushed"}]}