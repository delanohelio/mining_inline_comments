{"pr_number": 1233, "pr_title": "[bdd-engine] Add story sorting by a numeric value", "pr_createdAt": "2020-12-14T09:10:25Z", "pr_url": "https://github.com/vividus-framework/vividus/pull/1233", "timeline": [{"oid": "54f6e9e0301c8c8600aca542c85d1b33a2084345", "url": "https://github.com/vividus-framework/vividus/commit/54f6e9e0301c8c8600aca542c85d1b33a2084345", "message": "[bdd-engine] Add story sorting by a numeric value", "committedDate": "2020-12-14T09:40:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI0MTUzNQ==", "url": "https://github.com/vividus-framework/vividus/pull/1233#discussion_r542241535", "bodyText": "MetaBasedStoryExecutionPriority", "author": "valfirst", "createdAt": "2020-12-14T09:39:46Z", "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/order/StoryOrder.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.order;\n+\n+import static org.apache.commons.lang3.Validate.isTrue;\n+\n+import java.util.Comparator;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.jbehave.core.model.Story;\n+\n+/**\n+ * Methods of this class are expected to be used in test projects as static factory methods for story comparators\n+ */\n+public final class StoryOrder", "originalCommit": "8f73936d33d40f11f760ec80ebb6ff0c3d443b13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI2MTM4OA==", "url": "https://github.com/vividus-framework/vividus/pull/1233#discussion_r542261388", "bodyText": "renamed, but here is a risk that we will want to add some more ordering strategies and will have to rename this class to something more generic leading to difficulties in support", "author": "uarlouski", "createdAt": "2020-12-14T10:08:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI0MTUzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "b0607113cf7d6d9b3ef03f1e0f5336b7fe351b66", "chunk": "diff --git a/vividus-bdd-engine/src/main/java/org/vividus/bdd/order/StoryOrder.java b/vividus-bdd-engine/src/main/java/org/vividus/bdd/order/MetaBasedStoryExecutionPriority.java\nsimilarity index 61%\nrename from vividus-bdd-engine/src/main/java/org/vividus/bdd/order/StoryOrder.java\nrename to vividus-bdd-engine/src/main/java/org/vividus/bdd/order/MetaBasedStoryExecutionPriority.java\nindex 53a3c7ad..84262ee8 100644\n--- a/vividus-bdd-engine/src/main/java/org/vividus/bdd/order/StoryOrder.java\n+++ b/vividus-bdd-engine/src/main/java/org/vividus/bdd/order/MetaBasedStoryExecutionPriority.java\n\n@@ -22,35 +22,37 @@ import java.util.Comparator;\n \n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.math.NumberUtils;\n+import org.jbehave.core.model.Meta;\n import org.jbehave.core.model.Story;\n \n /**\n  * Methods of this class are expected to be used in test projects as static factory methods for story comparators\n  */\n-public final class StoryOrder\n+public final class MetaBasedStoryExecutionPriority\n {\n-    private StoryOrder()\n+    private MetaBasedStoryExecutionPriority()\n     {\n     }\n \n     /**\n-     * Create a comparator that sorts stories by a numeric value extracted by the key in descending order\n-     * @param key key to extract a numeric meta value, must not be a blank\n+     * Create a comparator that sorts stories by a numeric meta value extracted by the meta name in descending order\n+     * @param metaName meta name to extract a numeric meta value, must not be a blank\n      * @return comparator\n      */\n-    public static Comparator<Story> byNumericValue(String key)\n+    public static Comparator<Story> byNumericMetaValue(String metaName)\n     {\n-        isTrue(StringUtils.isNotBlank(key), \"The key must be a non-zero length string\");\n-        return Comparator.comparing(story -> getNumericValue(story, key), Comparator.reverseOrder());\n+        isTrue(StringUtils.isNotBlank(metaName), \"The meta name must be a non-zero length string\");\n+        return Comparator.comparing(story -> getNumericMetaValue(story, metaName), Comparator.reverseOrder());\n     }\n \n-    private static int getNumericValue(Story story, String key)\n+    private static int getNumericMetaValue(Story story, String metaName)\n     {\n-        String priorityAsStrinig = story.getMeta().getProperty(key);\n-        if (priorityAsStrinig.isEmpty())\n+        Meta meta = story.getMeta();\n+        if (!meta.hasProperty(metaName))\n         {\n             return 0;\n         }\n+        String priorityAsStrinig = meta.getProperty(metaName);\n         isTrue(NumberUtils.isDigits(priorityAsStrinig), \"The value is expected to be a number, but got '%s'\",\n                 priorityAsStrinig);\n         return Integer.parseInt(priorityAsStrinig);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI0MTg4MA==", "url": "https://github.com/vividus-framework/vividus/pull/1233#discussion_r542241880", "bodyText": "public static Comparator<Story> byNumericMetaValue(String metaName)", "author": "valfirst", "createdAt": "2020-12-14T09:40:18Z", "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/order/StoryOrder.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.order;\n+\n+import static org.apache.commons.lang3.Validate.isTrue;\n+\n+import java.util.Comparator;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.jbehave.core.model.Story;\n+\n+/**\n+ * Methods of this class are expected to be used in test projects as static factory methods for story comparators\n+ */\n+public final class StoryOrder\n+{\n+    private StoryOrder()\n+    {\n+    }\n+\n+    /**\n+     * Create a comparator that sorts stories by a numeric value extracted by the key in descending order\n+     * @param key key to extract a numeric meta value, must not be a blank\n+     * @return comparator\n+     */\n+    public static Comparator<Story> byNumericValue(String key)", "originalCommit": "8f73936d33d40f11f760ec80ebb6ff0c3d443b13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0607113cf7d6d9b3ef03f1e0f5336b7fe351b66", "chunk": "diff --git a/vividus-bdd-engine/src/main/java/org/vividus/bdd/order/StoryOrder.java b/vividus-bdd-engine/src/main/java/org/vividus/bdd/order/MetaBasedStoryExecutionPriority.java\nsimilarity index 61%\nrename from vividus-bdd-engine/src/main/java/org/vividus/bdd/order/StoryOrder.java\nrename to vividus-bdd-engine/src/main/java/org/vividus/bdd/order/MetaBasedStoryExecutionPriority.java\nindex 53a3c7ad..84262ee8 100644\n--- a/vividus-bdd-engine/src/main/java/org/vividus/bdd/order/StoryOrder.java\n+++ b/vividus-bdd-engine/src/main/java/org/vividus/bdd/order/MetaBasedStoryExecutionPriority.java\n\n@@ -22,35 +22,37 @@ import java.util.Comparator;\n \n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.math.NumberUtils;\n+import org.jbehave.core.model.Meta;\n import org.jbehave.core.model.Story;\n \n /**\n  * Methods of this class are expected to be used in test projects as static factory methods for story comparators\n  */\n-public final class StoryOrder\n+public final class MetaBasedStoryExecutionPriority\n {\n-    private StoryOrder()\n+    private MetaBasedStoryExecutionPriority()\n     {\n     }\n \n     /**\n-     * Create a comparator that sorts stories by a numeric value extracted by the key in descending order\n-     * @param key key to extract a numeric meta value, must not be a blank\n+     * Create a comparator that sorts stories by a numeric meta value extracted by the meta name in descending order\n+     * @param metaName meta name to extract a numeric meta value, must not be a blank\n      * @return comparator\n      */\n-    public static Comparator<Story> byNumericValue(String key)\n+    public static Comparator<Story> byNumericMetaValue(String metaName)\n     {\n-        isTrue(StringUtils.isNotBlank(key), \"The key must be a non-zero length string\");\n-        return Comparator.comparing(story -> getNumericValue(story, key), Comparator.reverseOrder());\n+        isTrue(StringUtils.isNotBlank(metaName), \"The meta name must be a non-zero length string\");\n+        return Comparator.comparing(story -> getNumericMetaValue(story, metaName), Comparator.reverseOrder());\n     }\n \n-    private static int getNumericValue(Story story, String key)\n+    private static int getNumericMetaValue(Story story, String metaName)\n     {\n-        String priorityAsStrinig = story.getMeta().getProperty(key);\n-        if (priorityAsStrinig.isEmpty())\n+        Meta meta = story.getMeta();\n+        if (!meta.hasProperty(metaName))\n         {\n             return 0;\n         }\n+        String priorityAsStrinig = meta.getProperty(metaName);\n         isTrue(NumberUtils.isDigits(priorityAsStrinig), \"The value is expected to be a number, but got '%s'\",\n                 priorityAsStrinig);\n         return Integer.parseInt(priorityAsStrinig);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI0Mjc2NA==", "url": "https://github.com/vividus-framework/vividus/pull/1233#discussion_r542242764", "bodyText": "I don't think an empty value should be considered as valid", "author": "valfirst", "createdAt": "2020-12-14T09:41:32Z", "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/order/StoryOrder.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.order;\n+\n+import static org.apache.commons.lang3.Validate.isTrue;\n+\n+import java.util.Comparator;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.jbehave.core.model.Story;\n+\n+/**\n+ * Methods of this class are expected to be used in test projects as static factory methods for story comparators\n+ */\n+public final class StoryOrder\n+{\n+    private StoryOrder()\n+    {\n+    }\n+\n+    /**\n+     * Create a comparator that sorts stories by a numeric value extracted by the key in descending order\n+     * @param key key to extract a numeric meta value, must not be a blank\n+     * @return comparator\n+     */\n+    public static Comparator<Story> byNumericValue(String key)\n+    {\n+        isTrue(StringUtils.isNotBlank(key), \"The key must be a non-zero length string\");\n+        return Comparator.comparing(story -> getNumericValue(story, key), Comparator.reverseOrder());\n+    }\n+\n+    private static int getNumericValue(Story story, String key)\n+    {\n+        String priorityAsStrinig = story.getMeta().getProperty(key);\n+        if (priorityAsStrinig.isEmpty())", "originalCommit": "54f6e9e0301c8c8600aca542c85d1b33a2084345", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0607113cf7d6d9b3ef03f1e0f5336b7fe351b66", "chunk": "diff --git a/vividus-bdd-engine/src/main/java/org/vividus/bdd/order/StoryOrder.java b/vividus-bdd-engine/src/main/java/org/vividus/bdd/order/MetaBasedStoryExecutionPriority.java\nsimilarity index 61%\nrename from vividus-bdd-engine/src/main/java/org/vividus/bdd/order/StoryOrder.java\nrename to vividus-bdd-engine/src/main/java/org/vividus/bdd/order/MetaBasedStoryExecutionPriority.java\nindex 53a3c7ad..84262ee8 100644\n--- a/vividus-bdd-engine/src/main/java/org/vividus/bdd/order/StoryOrder.java\n+++ b/vividus-bdd-engine/src/main/java/org/vividus/bdd/order/MetaBasedStoryExecutionPriority.java\n\n@@ -22,35 +22,37 @@ import java.util.Comparator;\n \n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.math.NumberUtils;\n+import org.jbehave.core.model.Meta;\n import org.jbehave.core.model.Story;\n \n /**\n  * Methods of this class are expected to be used in test projects as static factory methods for story comparators\n  */\n-public final class StoryOrder\n+public final class MetaBasedStoryExecutionPriority\n {\n-    private StoryOrder()\n+    private MetaBasedStoryExecutionPriority()\n     {\n     }\n \n     /**\n-     * Create a comparator that sorts stories by a numeric value extracted by the key in descending order\n-     * @param key key to extract a numeric meta value, must not be a blank\n+     * Create a comparator that sorts stories by a numeric meta value extracted by the meta name in descending order\n+     * @param metaName meta name to extract a numeric meta value, must not be a blank\n      * @return comparator\n      */\n-    public static Comparator<Story> byNumericValue(String key)\n+    public static Comparator<Story> byNumericMetaValue(String metaName)\n     {\n-        isTrue(StringUtils.isNotBlank(key), \"The key must be a non-zero length string\");\n-        return Comparator.comparing(story -> getNumericValue(story, key), Comparator.reverseOrder());\n+        isTrue(StringUtils.isNotBlank(metaName), \"The meta name must be a non-zero length string\");\n+        return Comparator.comparing(story -> getNumericMetaValue(story, metaName), Comparator.reverseOrder());\n     }\n \n-    private static int getNumericValue(Story story, String key)\n+    private static int getNumericMetaValue(Story story, String metaName)\n     {\n-        String priorityAsStrinig = story.getMeta().getProperty(key);\n-        if (priorityAsStrinig.isEmpty())\n+        Meta meta = story.getMeta();\n+        if (!meta.hasProperty(metaName))\n         {\n             return 0;\n         }\n+        String priorityAsStrinig = meta.getProperty(metaName);\n         isTrue(NumberUtils.isDigits(priorityAsStrinig), \"The value is expected to be a number, but got '%s'\",\n                 priorityAsStrinig);\n         return Integer.parseInt(priorityAsStrinig);\n"}}, {"oid": "b0607113cf7d6d9b3ef03f1e0f5336b7fe351b66", "url": "https://github.com/vividus-framework/vividus/commit/b0607113cf7d6d9b3ef03f1e0f5336b7fe351b66", "message": "[bdd-engine] Add story sorting by a numeric value", "committedDate": "2020-12-14T09:54:20Z", "type": "forcePushed"}, {"oid": "493ea5c505e2d3ea29cf73d0befaeea1a855efa1", "url": "https://github.com/vividus-framework/vividus/commit/493ea5c505e2d3ea29cf73d0befaeea1a855efa1", "message": "[bdd-engine] Add story sorting by a numeric value", "committedDate": "2020-12-14T09:57:29Z", "type": "forcePushed"}, {"oid": "c9f1d5d0e8f293993fb90577f1df1108e3cf8fc1", "url": "https://github.com/vividus-framework/vividus/commit/c9f1d5d0e8f293993fb90577f1df1108e3cf8fc1", "message": "[bdd-engine] Add story sorting by a numeric value", "committedDate": "2020-12-14T10:02:38Z", "type": "forcePushed"}, {"oid": "b731bfa178140a951f47fb75a9ebc749059e1130", "url": "https://github.com/vividus-framework/vividus/commit/b731bfa178140a951f47fb75a9ebc749059e1130", "message": "[bdd-engine] Add story sorting by a numeric value", "committedDate": "2020-12-14T10:10:34Z", "type": "forcePushed"}, {"oid": "4a68130d449d450b3b224c75b2b7aa5b47268197", "url": "https://github.com/vividus-framework/vividus/commit/4a68130d449d450b3b224c75b2b7aa5b47268197", "message": "[bdd-engine] Add story sorting by a numeric value", "committedDate": "2020-12-14T10:38:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMxOTYxMA==", "url": "https://github.com/vividus-framework/vividus/pull/1233#discussion_r542319610", "bodyText": "isNotBlank  also checks for whitespace-only string", "author": "valfirst", "createdAt": "2020-12-14T11:40:32Z", "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/priority/MetaBasedStoryExecutionPriority.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.priority;\n+\n+import static org.apache.commons.lang3.Validate.isTrue;\n+\n+import java.util.Comparator;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.jbehave.core.model.Meta;\n+import org.jbehave.core.model.Story;\n+\n+/**\n+ * Methods of this class are expected to be used in test projects as static factories for story comparators\n+ */\n+public final class MetaBasedStoryExecutionPriority\n+{\n+    private MetaBasedStoryExecutionPriority()\n+    {\n+    }\n+\n+    /**\n+     * Create a comparator that sorts stories by a numeric meta value extracted by the meta name in descending order\n+     * @param metaName meta name to extract a numeric meta value, must not be a blank\n+     * @return comparator\n+     */\n+    public static Comparator<Story> byNumericMetaValue(String metaName)\n+    {\n+        isTrue(StringUtils.isNotBlank(metaName), \"The meta name must be a non-zero length string\");", "originalCommit": "4a68130d449d450b3b224c75b2b7aa5b47268197", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "23bb6ae31397c4912ecce5891a25401af31502fd", "chunk": "diff --git a/vividus-bdd-engine/src/main/java/org/vividus/bdd/priority/MetaBasedStoryExecutionPriority.java b/vividus-bdd-engine/src/main/java/org/vividus/bdd/priority/MetaBasedStoryExecutionPriority.java\nindex 84643c6d..3f708d3e 100644\n--- a/vividus-bdd-engine/src/main/java/org/vividus/bdd/priority/MetaBasedStoryExecutionPriority.java\n+++ b/vividus-bdd-engine/src/main/java/org/vividus/bdd/priority/MetaBasedStoryExecutionPriority.java\n\n@@ -20,7 +20,6 @@ import static org.apache.commons.lang3.Validate.isTrue;\n \n import java.util.Comparator;\n \n-import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.math.NumberUtils;\n import org.jbehave.core.model.Meta;\n import org.jbehave.core.model.Story;\n"}}, {"oid": "23bb6ae31397c4912ecce5891a25401af31502fd", "url": "https://github.com/vividus-framework/vividus/commit/23bb6ae31397c4912ecce5891a25401af31502fd", "message": "[bdd-engine] Add story sorting by a numeric value", "committedDate": "2020-12-14T12:10:21Z", "type": "commit"}, {"oid": "23bb6ae31397c4912ecce5891a25401af31502fd", "url": "https://github.com/vividus-framework/vividus/commit/23bb6ae31397c4912ecce5891a25401af31502fd", "message": "[bdd-engine] Add story sorting by a numeric value", "committedDate": "2020-12-14T12:10:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzEyNDU2MA==", "url": "https://github.com/vividus-framework/vividus/pull/1233#discussion_r543124560", "bodyText": "StringUtils.isNotEmpty ?", "author": "ikalinin1", "createdAt": "2020-12-15T08:00:40Z", "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/priority/MetaBasedStoryExecutionPriority.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.priority;\n+\n+import static org.apache.commons.lang3.Validate.isTrue;\n+\n+import java.util.Comparator;\n+\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.jbehave.core.model.Meta;\n+import org.jbehave.core.model.Story;\n+\n+/**\n+ * Methods of this class are expected to be used in test projects as static factories for story comparators\n+ */\n+public final class MetaBasedStoryExecutionPriority\n+{\n+    private MetaBasedStoryExecutionPriority()\n+    {\n+    }\n+\n+    /**\n+     * Create a comparator that sorts stories by a numeric meta value extracted by the meta name in descending order\n+     * @param metaName meta name to extract a numeric meta value, must not be a blank\n+     * @return comparator\n+     */\n+    public static Comparator<Story> byNumericMetaValue(String metaName)\n+    {\n+        isTrue(metaName.matches(\"[^ ]+\"), \"The meta name must be a non-zero length string without spaces\");", "originalCommit": "23bb6ae31397c4912ecce5891a25401af31502fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzEyNzg0NQ==", "url": "https://github.com/vividus-framework/vividus/pull/1233#discussion_r543127845", "bodyText": "values with spaces are not allowed", "author": "uarlouski", "createdAt": "2020-12-15T08:06:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzEyNDU2MA=="}], "type": "inlineReview", "revised_code": null}]}