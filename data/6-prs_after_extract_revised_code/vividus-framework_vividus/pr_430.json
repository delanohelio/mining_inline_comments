{"pr_number": 430, "pr_title": "[vividus-plugin-web-app-to-rest-api] Fix StringIndexOutOfBoundsExcept\u2026", "pr_createdAt": "2020-03-24T21:14:05Z", "pr_url": "https://github.com/vividus-framework/vividus/pull/430", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYyMjg2Ng==", "url": "https://github.com/vividus-framework/vividus/pull/430#discussion_r397622866", "bodyText": "shouldn't we adjust resource checking logic depending on an element being checked? for examples 'a' element is allowed to be without href attr whereas 'img' isn't\nhttps://www.w3.org/TR/html52/semantics-embedded-content.html#the-img-element\nhttps://www.w3.org/TR/html52/textlevel-semantics.html#the-a-element", "author": "uarlouski", "createdAt": "2020-03-25T05:53:50Z", "path": "vividus-plugin-web-app-to-rest-api/src/main/java/org/vividus/bdd/steps/integration/ResourceCheckSteps.java", "diffHunk": "@@ -119,24 +119,38 @@ private ResourceValidation validate(ResourceValidation r)\n         return HtmlUtils.getElements(html, cssSelector).parallelStream();\n     }\n \n+    private boolean isSourceAttributeEmpty(Element element)\n+    {\n+        boolean isSourceAttributeEmpty = getElementSourceAttribute(element).isEmpty();\n+        if (isSourceAttributeEmpty)\n+        {\n+            softAssert.recordFailedAssertion(", "originalCommit": "7a50c3b65291960924c91c346cb8715e760417a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYzNzcxNw==", "url": "https://github.com/vividus-framework/vividus/pull/430#discussion_r397637717", "bodyText": "I suppose it doesn't matter, the only one restriction is: an element must have src or href", "author": "Ulyana-Yeryksonava", "createdAt": "2020-03-25T06:46:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYyMjg2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY1NDUyMA==", "url": "https://github.com/vividus-framework/vividus/pull/430#discussion_r397654520", "bodyText": "I meant why should we fail during resource checking of links if it's not prohibited by spec to have a tag without href?", "author": "uarlouski", "createdAt": "2020-03-25T07:35:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYyMjg2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY1NjUyMQ==", "url": "https://github.com/vividus-framework/vividus/pull/430#discussion_r397656521", "bodyText": "it causes StringIndexOutOfBoundsException otherwise", "author": "Ulyana-Yeryksonava", "createdAt": "2020-03-25T07:40:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYyMjg2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgwNzQzNQ==", "url": "https://github.com/vividus-framework/vividus/pull/430#discussion_r397807435", "bodyText": "thanks for updating the docs :)", "author": "uarlouski", "createdAt": "2020-03-25T12:13:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYyMjg2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "b0bce43e423c3376e70737daa58abbdef6013a2d", "chunk": "diff --git a/vividus-plugin-web-app-to-rest-api/src/main/java/org/vividus/bdd/steps/integration/ResourceCheckSteps.java b/vividus-plugin-web-app-to-rest-api/src/main/java/org/vividus/bdd/steps/integration/ResourceCheckSteps.java\nindex f6bfd43b4..7a60c99ca 100644\n--- a/vividus-plugin-web-app-to-rest-api/src/main/java/org/vividus/bdd/steps/integration/ResourceCheckSteps.java\n+++ b/vividus-plugin-web-app-to-rest-api/src/main/java/org/vividus/bdd/steps/integration/ResourceCheckSteps.java\n\n@@ -119,37 +119,20 @@ public class ResourceCheckSteps\n         return HtmlUtils.getElements(html, cssSelector).parallelStream();\n     }\n \n-    private boolean isSourceAttributeEmpty(Element element)\n-    {\n-        boolean isSourceAttributeEmpty = getElementSourceAttribute(element).isEmpty();\n-        if (isSourceAttributeEmpty)\n-        {\n-            softAssert.recordFailedAssertion(\n-                    \"Element by selector \" + getSelector(element) + \" doesn't contain href/src attributes\");\n-        }\n-        return isSourceAttributeEmpty;\n-    }\n-\n-    private String getElementSourceAttribute(Element element)\n-    {\n-        return getElementAttribute(element, \"href\").orElseGet(() -> element.attr(\"src\")).trim();\n-    }\n-\n     private Stream<ResourceValidation> createResourceValidations(Stream<Element> elements,\n             Function<Pair<URI, String>, ResourceValidation> resourceValidationFactory)\n     {\n-        return elements.filter(e -> !isSourceAttributeEmpty(e))\n-                .map(e -> Pair.of(createUri(getElementSourceAttribute(e)), getSelector(e)))\n-                .map(resourceValidationFactory).map(rv ->\n+        return elements\n+                .map(e -> Pair.of(getElementAttribute(e, \"href\").orElseGet(() -> e.attr(\"src\")).trim(), getSelector(e)))\n+                .filter(p -> !p.getKey().isEmpty() || softAssert.recordFailedAssertion(\n+                        \"Element by selector \" + p.getValue() + \" doesn't contain href/src attributes\"))\n+                .map(p -> Pair.of(createUri(p.getKey()), p.getValue())).map(resourceValidationFactory).peek(rv ->\n                 {\n-                    URI toCheck = rv.getUri();\n-                    boolean validatable = Optional.ofNullable(toCheck.getScheme()).map(s -> ALLOWED_SCHEMES.contains(s))\n-                            .orElse(false) && !excludeHrefsPattern.matcher(rv.toString()).matches();\n-                    if (!validatable)\n+                    if (!Optional.ofNullable(rv.getUri().getScheme()).map(ALLOWED_SCHEMES::contains).orElse(false)\n+                            || excludeHrefsPattern.matcher(rv.toString()).matches())\n                     {\n                         rv.setCheckStatus(CheckStatus.FILTERED);\n                     }\n-                    return rv;\n                 });\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYyMjkzNA==", "url": "https://github.com/vividus-framework/vividus/pull/430#discussion_r397622934", "bodyText": "isSourceAttributeEmpty -> sourceAttributeEmpty", "author": "uarlouski", "createdAt": "2020-03-25T05:54:01Z", "path": "vividus-plugin-web-app-to-rest-api/src/main/java/org/vividus/bdd/steps/integration/ResourceCheckSteps.java", "diffHunk": "@@ -119,24 +119,38 @@ private ResourceValidation validate(ResourceValidation r)\n         return HtmlUtils.getElements(html, cssSelector).parallelStream();\n     }\n \n+    private boolean isSourceAttributeEmpty(Element element)\n+    {\n+        boolean isSourceAttributeEmpty = getElementSourceAttribute(element).isEmpty();", "originalCommit": "7a50c3b65291960924c91c346cb8715e760417a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYzODQ3Nw==", "url": "https://github.com/vividus-framework/vividus/pull/430#discussion_r397638477", "bodyText": "why do you think so? https://rules.sonarsource.com/java/tag/convention/RSPEC-2047", "author": "Ulyana-Yeryksonava", "createdAt": "2020-03-25T06:49:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYyMjkzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY1MzQ1Mw==", "url": "https://github.com/vividus-framework/vividus/pull/430#discussion_r397653453", "bodyText": "My comment is related to local var, not to method name", "author": "uarlouski", "createdAt": "2020-03-25T07:33:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYyMjkzNA=="}], "type": "inlineReview", "revised_code": {"commit": "b0bce43e423c3376e70737daa58abbdef6013a2d", "chunk": "diff --git a/vividus-plugin-web-app-to-rest-api/src/main/java/org/vividus/bdd/steps/integration/ResourceCheckSteps.java b/vividus-plugin-web-app-to-rest-api/src/main/java/org/vividus/bdd/steps/integration/ResourceCheckSteps.java\nindex f6bfd43b4..7a60c99ca 100644\n--- a/vividus-plugin-web-app-to-rest-api/src/main/java/org/vividus/bdd/steps/integration/ResourceCheckSteps.java\n+++ b/vividus-plugin-web-app-to-rest-api/src/main/java/org/vividus/bdd/steps/integration/ResourceCheckSteps.java\n\n@@ -119,37 +119,20 @@ public class ResourceCheckSteps\n         return HtmlUtils.getElements(html, cssSelector).parallelStream();\n     }\n \n-    private boolean isSourceAttributeEmpty(Element element)\n-    {\n-        boolean isSourceAttributeEmpty = getElementSourceAttribute(element).isEmpty();\n-        if (isSourceAttributeEmpty)\n-        {\n-            softAssert.recordFailedAssertion(\n-                    \"Element by selector \" + getSelector(element) + \" doesn't contain href/src attributes\");\n-        }\n-        return isSourceAttributeEmpty;\n-    }\n-\n-    private String getElementSourceAttribute(Element element)\n-    {\n-        return getElementAttribute(element, \"href\").orElseGet(() -> element.attr(\"src\")).trim();\n-    }\n-\n     private Stream<ResourceValidation> createResourceValidations(Stream<Element> elements,\n             Function<Pair<URI, String>, ResourceValidation> resourceValidationFactory)\n     {\n-        return elements.filter(e -> !isSourceAttributeEmpty(e))\n-                .map(e -> Pair.of(createUri(getElementSourceAttribute(e)), getSelector(e)))\n-                .map(resourceValidationFactory).map(rv ->\n+        return elements\n+                .map(e -> Pair.of(getElementAttribute(e, \"href\").orElseGet(() -> e.attr(\"src\")).trim(), getSelector(e)))\n+                .filter(p -> !p.getKey().isEmpty() || softAssert.recordFailedAssertion(\n+                        \"Element by selector \" + p.getValue() + \" doesn't contain href/src attributes\"))\n+                .map(p -> Pair.of(createUri(p.getKey()), p.getValue())).map(resourceValidationFactory).peek(rv ->\n                 {\n-                    URI toCheck = rv.getUri();\n-                    boolean validatable = Optional.ofNullable(toCheck.getScheme()).map(s -> ALLOWED_SCHEMES.contains(s))\n-                            .orElse(false) && !excludeHrefsPattern.matcher(rv.toString()).matches();\n-                    if (!validatable)\n+                    if (!Optional.ofNullable(rv.getUri().getScheme()).map(ALLOWED_SCHEMES::contains).orElse(false)\n+                            || excludeHrefsPattern.matcher(rv.toString()).matches())\n                     {\n                         rv.setCheckStatus(CheckStatus.FILTERED);\n                     }\n-                    return rv;\n                 });\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcxNDM5NA==", "url": "https://github.com/vividus-framework/vividus/pull/430#discussion_r397714394", "bodyText": "private Stream<ResourceValidation> createResourceValidations(Stream<Element> elements,\n        Function<Pair<URI, String>, ResourceValidation> resourceValidationFactory)\n{\n    return elements.map(e ->\n        Pair.of(getElementAttribute(e, \"href\").orElseGet(() -> e.attr(\"src\")).trim(), getSelector(e)))\n                   .filter(p -> !p.getKey().isEmpty() || softAssert.recordFailedAssertion(\n                    \"Element by selector \" + p.getValue() + \" doesn't contain href/src attributes\"))\n                   .map(p -> Pair.of(createUri(p.getKey()), p.getValue()))\n                   .map(resourceValidationFactory)\n                   .peek(rv ->\n                   {\n                       if (!Optional.ofNullable(rv.getUri().getScheme()).map(ALLOWED_SCHEMES::contains).orElse(false)\n                               || excludeHrefsPattern.matcher(rv.toString()).matches())\n                       {\n                           rv.setCheckStatus(CheckStatus.FILTERED);\n                       }\n                   });\n}", "author": "valfirst", "createdAt": "2020-03-25T09:30:59Z", "path": "vividus-plugin-web-app-to-rest-api/src/main/java/org/vividus/bdd/steps/integration/ResourceCheckSteps.java", "diffHunk": "@@ -119,24 +119,38 @@ private ResourceValidation validate(ResourceValidation r)\n         return HtmlUtils.getElements(html, cssSelector).parallelStream();\n     }\n \n+    private boolean isSourceAttributeEmpty(Element element)\n+    {\n+        boolean isSourceAttributeEmpty = getElementSourceAttribute(element).isEmpty();\n+        if (isSourceAttributeEmpty)\n+        {\n+            softAssert.recordFailedAssertion(\n+                    \"Element by selector \" + getSelector(element) + \" doesn't contain href/src attributes\");\n+        }\n+        return isSourceAttributeEmpty;\n+    }\n+\n+    private String getElementSourceAttribute(Element element)\n+    {\n+        return getElementAttribute(element, \"href\").orElseGet(() -> element.attr(\"src\")).trim();\n+    }\n+\n     private Stream<ResourceValidation> createResourceValidations(Stream<Element> elements,\n             Function<Pair<URI, String>, ResourceValidation> resourceValidationFactory)\n     {\n-        return elements.map(e ->\n-            Pair.of(createUri(getElementAttribute(e, \"href\").orElseGet(() -> e.attr(\"src\")).trim()), getSelector(e)))\n-                       .map(resourceValidationFactory)\n-                       .map(rv -> {\n-                           URI toCheck = rv.getUri();\n-                           boolean validatable = Optional.ofNullable(toCheck.getScheme())\n-                                                         .map(s -> ALLOWED_SCHEMES.contains(s))\n-                                                         .orElse(false)\n-                                                         && !excludeHrefsPattern.matcher(rv.toString()).matches();\n-                           if (!validatable)\n-                           {\n-                               rv.setCheckStatus(CheckStatus.FILTERED);\n-                           }\n-                           return rv;\n-                       });\n+        return elements.filter(e -> !isSourceAttributeEmpty(e))\n+                .map(e -> Pair.of(createUri(getElementSourceAttribute(e)), getSelector(e)))\n+                .map(resourceValidationFactory).map(rv ->\n+                {\n+                    URI toCheck = rv.getUri();\n+                    boolean validatable = Optional.ofNullable(toCheck.getScheme()).map(s -> ALLOWED_SCHEMES.contains(s))\n+                            .orElse(false) && !excludeHrefsPattern.matcher(rv.toString()).matches();\n+                    if (!validatable)\n+                    {\n+                        rv.setCheckStatus(CheckStatus.FILTERED);\n+                    }\n+                    return rv;\n+                });", "originalCommit": "7a50c3b65291960924c91c346cb8715e760417a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0bce43e423c3376e70737daa58abbdef6013a2d", "chunk": "diff --git a/vividus-plugin-web-app-to-rest-api/src/main/java/org/vividus/bdd/steps/integration/ResourceCheckSteps.java b/vividus-plugin-web-app-to-rest-api/src/main/java/org/vividus/bdd/steps/integration/ResourceCheckSteps.java\nindex f6bfd43b4..7a60c99ca 100644\n--- a/vividus-plugin-web-app-to-rest-api/src/main/java/org/vividus/bdd/steps/integration/ResourceCheckSteps.java\n+++ b/vividus-plugin-web-app-to-rest-api/src/main/java/org/vividus/bdd/steps/integration/ResourceCheckSteps.java\n\n@@ -119,37 +119,20 @@ public class ResourceCheckSteps\n         return HtmlUtils.getElements(html, cssSelector).parallelStream();\n     }\n \n-    private boolean isSourceAttributeEmpty(Element element)\n-    {\n-        boolean isSourceAttributeEmpty = getElementSourceAttribute(element).isEmpty();\n-        if (isSourceAttributeEmpty)\n-        {\n-            softAssert.recordFailedAssertion(\n-                    \"Element by selector \" + getSelector(element) + \" doesn't contain href/src attributes\");\n-        }\n-        return isSourceAttributeEmpty;\n-    }\n-\n-    private String getElementSourceAttribute(Element element)\n-    {\n-        return getElementAttribute(element, \"href\").orElseGet(() -> element.attr(\"src\")).trim();\n-    }\n-\n     private Stream<ResourceValidation> createResourceValidations(Stream<Element> elements,\n             Function<Pair<URI, String>, ResourceValidation> resourceValidationFactory)\n     {\n-        return elements.filter(e -> !isSourceAttributeEmpty(e))\n-                .map(e -> Pair.of(createUri(getElementSourceAttribute(e)), getSelector(e)))\n-                .map(resourceValidationFactory).map(rv ->\n+        return elements\n+                .map(e -> Pair.of(getElementAttribute(e, \"href\").orElseGet(() -> e.attr(\"src\")).trim(), getSelector(e)))\n+                .filter(p -> !p.getKey().isEmpty() || softAssert.recordFailedAssertion(\n+                        \"Element by selector \" + p.getValue() + \" doesn't contain href/src attributes\"))\n+                .map(p -> Pair.of(createUri(p.getKey()), p.getValue())).map(resourceValidationFactory).peek(rv ->\n                 {\n-                    URI toCheck = rv.getUri();\n-                    boolean validatable = Optional.ofNullable(toCheck.getScheme()).map(s -> ALLOWED_SCHEMES.contains(s))\n-                            .orElse(false) && !excludeHrefsPattern.matcher(rv.toString()).matches();\n-                    if (!validatable)\n+                    if (!Optional.ofNullable(rv.getUri().getScheme()).map(ALLOWED_SCHEMES::contains).orElse(false)\n+                            || excludeHrefsPattern.matcher(rv.toString()).matches())\n                     {\n                         rv.setCheckStatus(CheckStatus.FILTERED);\n                     }\n-                    return rv;\n                 });\n     }\n \n"}}, {"oid": "b0bce43e423c3376e70737daa58abbdef6013a2d", "url": "https://github.com/vividus-framework/vividus/commit/b0bce43e423c3376e70737daa58abbdef6013a2d", "message": "[vividus-plugin-web-app-to-rest-api] Fix StringIndexOutOfBoundsException for empty source in step 'Then all resources by selector `$cssSelector` from $html are valid'", "committedDate": "2020-03-25T11:55:45Z", "type": "forcePushed"}, {"oid": "688136f61dd1e82170d6c843f7c85c2572d00f97", "url": "https://github.com/vividus-framework/vividus/commit/688136f61dd1e82170d6c843f7c85c2572d00f97", "message": "[vividus-plugin-web-app-to-rest-api] Fix StringIndexOutOfBoundsException for empty source in step 'Then all resources by selector `$cssSelector` from $html are valid'", "committedDate": "2020-03-25T12:00:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgyMDEyNw==", "url": "https://github.com/vividus-framework/vividus/pull/430#discussion_r397820127", "bodyText": "please format it properly (you can use my comment unchanged), for example, take a look at peek operation it's really hard to find it first of all, and it's hard to track the sequence of actions", "author": "valfirst", "createdAt": "2020-03-25T12:36:49Z", "path": "vividus-plugin-web-app-to-rest-api/src/main/java/org/vividus/bdd/steps/integration/ResourceCheckSteps.java", "diffHunk": "@@ -122,21 +123,18 @@ private ResourceValidation validate(ResourceValidation r)\n     private Stream<ResourceValidation> createResourceValidations(Stream<Element> elements,\n             Function<Pair<URI, String>, ResourceValidation> resourceValidationFactory)\n     {\n-        return elements.map(e ->\n-            Pair.of(createUri(getElementAttribute(e, \"href\").orElseGet(() -> e.attr(\"src\")).trim()), getSelector(e)))\n-                       .map(resourceValidationFactory)\n-                       .map(rv -> {\n-                           URI toCheck = rv.getUri();\n-                           boolean validatable = Optional.ofNullable(toCheck.getScheme())\n-                                                         .map(s -> ALLOWED_SCHEMES.contains(s))\n-                                                         .orElse(false)\n-                                                         && !excludeHrefsPattern.matcher(rv.toString()).matches();\n-                           if (!validatable)\n-                           {\n-                               rv.setCheckStatus(CheckStatus.FILTERED);\n-                           }\n-                           return rv;\n-                       });\n+        return elements\n+                .map(e -> Pair.of(getElementAttribute(e, \"href\").orElseGet(() -> e.attr(\"src\")).trim(), getSelector(e)))\n+                .filter(p -> !p.getKey().isEmpty() || softAssert.recordFailedAssertion(\n+                        \"Element by selector \" + p.getValue() + \" doesn't contain href/src attributes\"))\n+                .map(p -> Pair.of(createUri(p.getKey()), p.getValue())).map(resourceValidationFactory).peek(rv ->\n+                {\n+                    if (!Optional.ofNullable(rv.getUri().getScheme()).map(ALLOWED_SCHEMES::contains).orElse(false)\n+                            || excludeHrefsPattern.matcher(rv.toString()).matches())\n+                    {\n+                        rv.setCheckStatus(CheckStatus.FILTERED);\n+                    }\n+                });", "originalCommit": "688136f61dd1e82170d6c843f7c85c2572d00f97", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d8c25d4680d01b568461e44e3d05bf9b54eaa4e1", "chunk": "diff --git a/vividus-plugin-web-app-to-rest-api/src/main/java/org/vividus/bdd/steps/integration/ResourceCheckSteps.java b/vividus-plugin-web-app-to-rest-api/src/main/java/org/vividus/bdd/steps/integration/ResourceCheckSteps.java\nindex 70271bcd1..e747a1a69 100644\n--- a/vividus-plugin-web-app-to-rest-api/src/main/java/org/vividus/bdd/steps/integration/ResourceCheckSteps.java\n+++ b/vividus-plugin-web-app-to-rest-api/src/main/java/org/vividus/bdd/steps/integration/ResourceCheckSteps.java\n\n@@ -123,18 +123,20 @@ public class ResourceCheckSteps\n     private Stream<ResourceValidation> createResourceValidations(Stream<Element> elements,\n             Function<Pair<URI, String>, ResourceValidation> resourceValidationFactory)\n     {\n-        return elements\n-                .map(e -> Pair.of(getElementAttribute(e, \"href\").orElseGet(() -> e.attr(\"src\")).trim(), getSelector(e)))\n-                .filter(p -> !p.getKey().isEmpty() || softAssert.recordFailedAssertion(\n+        return elements.map(e ->\n+            Pair.of(getElementAttribute(e, \"href\").orElseGet(() -> e.attr(\"src\")).trim(), getSelector(e)))\n+                       .filter(p -> !p.getKey().isEmpty() || softAssert.recordFailedAssertion(\n                         \"Element by selector \" + p.getValue() + \" doesn't contain href/src attributes\"))\n-                .map(p -> Pair.of(createUri(p.getKey()), p.getValue())).map(resourceValidationFactory).peek(rv ->\n-                {\n-                    if (!Optional.ofNullable(rv.getUri().getScheme()).map(ALLOWED_SCHEMES::contains).orElse(false)\n-                            || excludeHrefsPattern.matcher(rv.toString()).matches())\n-                    {\n-                        rv.setCheckStatus(CheckStatus.FILTERED);\n-                    }\n-                });\n+                       .map(p -> Pair.of(createUri(p.getKey()), p.getValue()))\n+                       .map(resourceValidationFactory)\n+                       .peek(rv ->\n+                       {\n+                           if (!Optional.ofNullable(rv.getUri().getScheme()).map(ALLOWED_SCHEMES::contains)\n+                                   .orElse(false) || excludeHrefsPattern.matcher(rv.toString()).matches())\n+                           {\n+                               rv.setCheckStatus(CheckStatus.FILTERED);\n+                           }\n+                       });\n     }\n \n     private String getSelector(Element element)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgyNjY3MQ==", "url": "https://github.com/vividus-framework/vividus/pull/430#discussion_r397826671", "bodyText": "Move into separte method\nprivate boolean notEmpty(Pair<String, String>)\n{\n    return  !p.getKey().isEmpty() || softAssert.recordFailedAssertion(\"Element by selector \" + p.getValue() + \" doesn't contain href/src attributes\");\n}\n// and use it like:\n.filter(this::notEmpty)", "author": "ikalinin1", "createdAt": "2020-03-25T12:48:29Z", "path": "vividus-plugin-web-app-to-rest-api/src/main/java/org/vividus/bdd/steps/integration/ResourceCheckSteps.java", "diffHunk": "@@ -122,21 +123,18 @@ private ResourceValidation validate(ResourceValidation r)\n     private Stream<ResourceValidation> createResourceValidations(Stream<Element> elements,\n             Function<Pair<URI, String>, ResourceValidation> resourceValidationFactory)\n     {\n-        return elements.map(e ->\n-            Pair.of(createUri(getElementAttribute(e, \"href\").orElseGet(() -> e.attr(\"src\")).trim()), getSelector(e)))\n-                       .map(resourceValidationFactory)\n-                       .map(rv -> {\n-                           URI toCheck = rv.getUri();\n-                           boolean validatable = Optional.ofNullable(toCheck.getScheme())\n-                                                         .map(s -> ALLOWED_SCHEMES.contains(s))\n-                                                         .orElse(false)\n-                                                         && !excludeHrefsPattern.matcher(rv.toString()).matches();\n-                           if (!validatable)\n-                           {\n-                               rv.setCheckStatus(CheckStatus.FILTERED);\n-                           }\n-                           return rv;\n-                       });\n+        return elements\n+                .map(e -> Pair.of(getElementAttribute(e, \"href\").orElseGet(() -> e.attr(\"src\")).trim(), getSelector(e)))\n+                .filter(p -> !p.getKey().isEmpty() || softAssert.recordFailedAssertion(", "originalCommit": "688136f61dd1e82170d6c843f7c85c2572d00f97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg1MTk4MQ==", "url": "https://github.com/vividus-framework/vividus/pull/430#discussion_r397851981", "bodyText": "I would not move it, because logic is tightly coupled ('src', 'href' references)", "author": "valfirst", "createdAt": "2020-03-25T13:28:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgyNjY3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "d8c25d4680d01b568461e44e3d05bf9b54eaa4e1", "chunk": "diff --git a/vividus-plugin-web-app-to-rest-api/src/main/java/org/vividus/bdd/steps/integration/ResourceCheckSteps.java b/vividus-plugin-web-app-to-rest-api/src/main/java/org/vividus/bdd/steps/integration/ResourceCheckSteps.java\nindex 70271bcd1..e747a1a69 100644\n--- a/vividus-plugin-web-app-to-rest-api/src/main/java/org/vividus/bdd/steps/integration/ResourceCheckSteps.java\n+++ b/vividus-plugin-web-app-to-rest-api/src/main/java/org/vividus/bdd/steps/integration/ResourceCheckSteps.java\n\n@@ -123,18 +123,20 @@ public class ResourceCheckSteps\n     private Stream<ResourceValidation> createResourceValidations(Stream<Element> elements,\n             Function<Pair<URI, String>, ResourceValidation> resourceValidationFactory)\n     {\n-        return elements\n-                .map(e -> Pair.of(getElementAttribute(e, \"href\").orElseGet(() -> e.attr(\"src\")).trim(), getSelector(e)))\n-                .filter(p -> !p.getKey().isEmpty() || softAssert.recordFailedAssertion(\n+        return elements.map(e ->\n+            Pair.of(getElementAttribute(e, \"href\").orElseGet(() -> e.attr(\"src\")).trim(), getSelector(e)))\n+                       .filter(p -> !p.getKey().isEmpty() || softAssert.recordFailedAssertion(\n                         \"Element by selector \" + p.getValue() + \" doesn't contain href/src attributes\"))\n-                .map(p -> Pair.of(createUri(p.getKey()), p.getValue())).map(resourceValidationFactory).peek(rv ->\n-                {\n-                    if (!Optional.ofNullable(rv.getUri().getScheme()).map(ALLOWED_SCHEMES::contains).orElse(false)\n-                            || excludeHrefsPattern.matcher(rv.toString()).matches())\n-                    {\n-                        rv.setCheckStatus(CheckStatus.FILTERED);\n-                    }\n-                });\n+                       .map(p -> Pair.of(createUri(p.getKey()), p.getValue()))\n+                       .map(resourceValidationFactory)\n+                       .peek(rv ->\n+                       {\n+                           if (!Optional.ofNullable(rv.getUri().getScheme()).map(ALLOWED_SCHEMES::contains)\n+                                   .orElse(false) || excludeHrefsPattern.matcher(rv.toString()).matches())\n+                           {\n+                               rv.setCheckStatus(CheckStatus.FILTERED);\n+                           }\n+                       });\n     }\n \n     private String getSelector(Element element)\n"}}, {"oid": "d8c25d4680d01b568461e44e3d05bf9b54eaa4e1", "url": "https://github.com/vividus-framework/vividus/commit/d8c25d4680d01b568461e44e3d05bf9b54eaa4e1", "message": "[vividus-plugin-web-app-to-rest-api] Fix StringIndexOutOfBoundsException for empty source in step 'Then all resources by selector `$cssSelector` from $html are valid'", "committedDate": "2020-03-25T20:57:07Z", "type": "commit"}, {"oid": "d8c25d4680d01b568461e44e3d05bf9b54eaa4e1", "url": "https://github.com/vividus-framework/vividus/commit/d8c25d4680d01b568461e44e3d05bf9b54eaa4e1", "message": "[vividus-plugin-web-app-to-rest-api] Fix StringIndexOutOfBoundsException for empty source in step 'Then all resources by selector `$cssSelector` from $html are valid'", "committedDate": "2020-03-25T20:57:07Z", "type": "forcePushed"}, {"oid": "cdcfff03ab8556dd304a3c2bb5c6b0fdf812d1c0", "url": "https://github.com/vividus-framework/vividus/commit/cdcfff03ab8556dd304a3c2bb5c6b0fdf812d1c0", "message": "Merge branch 'master' into task-408", "committedDate": "2020-03-25T22:14:05Z", "type": "commit"}]}