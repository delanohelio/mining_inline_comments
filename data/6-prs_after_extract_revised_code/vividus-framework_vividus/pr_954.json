{"pr_number": 954, "pr_title": "[plugin-saucelabs] Introduce SauceLabs plugin", "pr_createdAt": "2020-09-17T16:56:24Z", "pr_url": "https://github.com/vividus-framework/vividus/pull/954", "timeline": [{"oid": "36d6ec32de1f6b52108e939e0d620edf470d2c26", "url": "https://github.com/vividus-framework/vividus/commit/36d6ec32de1f6b52108e939e0d620edf470d2c26", "message": "[plugin-saucelabs] Introduce SauceLabs plugin", "committedDate": "2020-09-25T03:03:36Z", "type": "forcePushed"}, {"oid": "91cc0beec49a69903d8aefbaff333c9bc9e87107", "url": "https://github.com/vividus-framework/vividus/commit/91cc0beec49a69903d8aefbaff333c9bc9e87107", "message": "[plugin-saucelabs] Introduce SauceLabs plugin", "committedDate": "2020-09-28T11:50:20Z", "type": "commit"}, {"oid": "638ec935b3ba3e0ae93108c489d368ca1aaa5458", "url": "https://github.com/vividus-framework/vividus/commit/638ec935b3ba3e0ae93108c489d368ca1aaa5458", "message": "refactoring", "committedDate": "2020-09-28T15:11:58Z", "type": "commit"}, {"oid": "638ec935b3ba3e0ae93108c489d368ca1aaa5458", "url": "https://github.com/vividus-framework/vividus/commit/638ec935b3ba3e0ae93108c489d368ca1aaa5458", "message": "refactoring", "committedDate": "2020-09-28T15:11:58Z", "type": "forcePushed"}, {"oid": "3dc408645500ac956dc4ef1d197e1d1a3170c4e1", "url": "https://github.com/vividus-framework/vividus/commit/3dc408645500ac956dc4ef1d197e1d1a3170c4e1", "message": "refactoring #2", "committedDate": "2020-09-28T17:31:34Z", "type": "forcePushed"}, {"oid": "c6a46c59b1e2e972a280c92b67013b35a2cf9e0d", "url": "https://github.com/vividus-framework/vividus/commit/c6a46c59b1e2e972a280c92b67013b35a2cf9e0d", "message": "refactoring #2", "committedDate": "2020-09-28T17:37:24Z", "type": "commit"}, {"oid": "c6a46c59b1e2e972a280c92b67013b35a2cf9e0d", "url": "https://github.com/vividus-framework/vividus/commit/c6a46c59b1e2e972a280c92b67013b35a2cf9e0d", "message": "refactoring #2", "committedDate": "2020-09-28T17:37:24Z", "type": "forcePushed"}, {"oid": "ca829595d833887db470ba9ce34afe5a72ed20d5", "url": "https://github.com/vividus-framework/vividus/commit/ca829595d833887db470ba9ce34afe5a72ed20d5", "message": "remove noisy changes", "committedDate": "2020-09-28T20:07:17Z", "type": "commit"}, {"oid": "3268e73da92ecbdb4e734141387280d5a88b3504", "url": "https://github.com/vividus-framework/vividus/commit/3268e73da92ecbdb4e734141387280d5a88b3504", "message": "remove noisy changes", "committedDate": "2020-09-28T20:18:42Z", "type": "commit"}, {"oid": "2ef50c4d77b92895e0fe8486f9e655db4c15eb0d", "url": "https://github.com/vividus-framework/vividus/commit/2ef50c4d77b92895e0fe8486f9e655db4c15eb0d", "message": "refactoring", "committedDate": "2020-09-28T20:44:10Z", "type": "commit"}, {"oid": "32a1e1a46cf23567da8b5f51b76aaeba4d01c6b3", "url": "https://github.com/vividus-framework/vividus/commit/32a1e1a46cf23567da8b5f51b76aaeba4d01c6b3", "message": "more refactoring", "committedDate": "2020-09-28T21:11:00Z", "type": "commit"}, {"oid": "cfaef9dc0a40f2da55c06ff6df9cc560d6a400ec", "url": "https://github.com/vividus-framework/vividus/commit/cfaef9dc0a40f2da55c06ff6df9cc560d6a400ec", "message": "Refactoring #3", "committedDate": "2020-09-29T11:08:47Z", "type": "commit"}, {"oid": "9b4102eb4d19d9ed2cdcfc7b8686d7fd57dc0a8a", "url": "https://github.com/vividus-framework/vividus/commit/9b4102eb4d19d9ed2cdcfc7b8686d7fd57dc0a8a", "message": "introduce new spring profile: saucelabs", "committedDate": "2020-10-01T14:10:20Z", "type": "commit"}, {"oid": "2b0f990b1cb9d056d1ca2da4818270e1a1cf64da", "url": "https://github.com/vividus-framework/vividus/commit/2b0f990b1cb9d056d1ca2da4818270e1a1cf64da", "message": "do not configure default SL host (there are multiple data centers)", "committedDate": "2020-10-01T14:21:30Z", "type": "commit"}, {"oid": "cf5e213d83128bff5a0c8edcb801a8ea31a0831c", "url": "https://github.com/vividus-framework/vividus/commit/cf5e213d83128bff5a0c8edcb801a8ea31a0831c", "message": "revert accidental configuration properties change", "committedDate": "2020-10-01T14:41:20Z", "type": "commit"}, {"oid": "2143563863ea69d3a98bcb6709f5e27f7b9c1876", "url": "https://github.com/vividus-framework/vividus/commit/2143563863ea69d3a98bcb6709f5e27f7b9c1876", "message": "unit tests & ci fix", "committedDate": "2020-10-01T15:56:15Z", "type": "commit"}, {"oid": "a25e2f00b9a6cfcb0d74bdee8405fa0cf457d55b", "url": "https://github.com/vividus-framework/vividus/commit/a25e2f00b9a6cfcb0d74bdee8405fa0cf457d55b", "message": "unit tests", "committedDate": "2020-10-01T16:41:33Z", "type": "commit"}, {"oid": "f46c182db2076dc4a94eaeec6d1af0ee19b06f1d", "url": "https://github.com/vividus-framework/vividus/commit/f46c182db2076dc4a94eaeec6d1af0ee19b06f1d", "message": "fixes", "committedDate": "2020-10-01T17:37:27Z", "type": "commit"}, {"oid": "0178f910336db5dd264a80aa81d87c4928faa313", "url": "https://github.com/vividus-framework/vividus/commit/0178f910336db5dd264a80aa81d87c4928faa313", "message": "more fixes", "committedDate": "2020-10-01T17:46:16Z", "type": "commit"}, {"oid": "3b101b9ab66a9a2136636ed9bdc2c35419c467bb", "url": "https://github.com/vividus-framework/vividus/commit/3b101b9ab66a9a2136636ed9bdc2c35419c467bb", "message": "add missing property", "committedDate": "2020-10-01T18:39:03Z", "type": "commit"}, {"oid": "e26138b8b4702431b5dba7669b3df79da1353724", "url": "https://github.com/vividus-framework/vividus/commit/e26138b8b4702431b5dba7669b3df79da1353724", "message": "it seems that's it", "committedDate": "2020-10-01T20:33:10Z", "type": "commit"}, {"oid": "cd519a122609c5cb2302252a03d3bf536e11c87e", "url": "https://github.com/vividus-framework/vividus/commit/cd519a122609c5cb2302252a03d3bf536e11c87e", "message": "fix code smells", "committedDate": "2020-10-01T20:41:09Z", "type": "commit"}, {"oid": "ba4ca8029efdb656451ddd94500c99b3dc2d65cc", "url": "https://github.com/vividus-framework/vividus/commit/ba4ca8029efdb656451ddd94500c99b3dc2d65cc", "message": "add system (sl + proxy + sc) test", "committedDate": "2020-10-01T20:55:29Z", "type": "commit"}, {"oid": "133e98edae1d94fa3abcd647c736fa5d5aaf46b6", "url": "https://github.com/vividus-framework/vividus/commit/133e98edae1d94fa3abcd647c736fa5d5aaf46b6", "message": "fixes", "committedDate": "2020-10-01T21:03:16Z", "type": "commit"}, {"oid": "4ac5e8ed55da4b63b2f5613007b484783338aa83", "url": "https://github.com/vividus-framework/vividus/commit/4ac5e8ed55da4b63b2f5613007b484783338aa83", "message": "optional", "committedDate": "2020-10-01T21:34:44Z", "type": "commit"}, {"oid": "240f9e33f8a1176c21dd7d19ac9b615aa04699f8", "url": "https://github.com/vividus-framework/vividus/commit/240f9e33f8a1176c21dd7d19ac9b615aa04699f8", "message": "add docs", "committedDate": "2020-10-01T22:37:28Z", "type": "commit"}, {"oid": "570cf41fc5fb5102698bf0056b550445333a515d", "url": "https://github.com/vividus-framework/vividus/commit/570cf41fc5fb5102698bf0056b550445333a515d", "message": "again fixes", "committedDate": "2020-10-01T22:48:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYyOTc5NQ==", "url": "https://github.com/vividus-framework/vividus/pull/954#discussion_r498629795", "bodyText": "Does it make sense to refactor this complex condition to something like:\nif (!configuration.dryRun() && !givenStory && notPrecodition(name) && proxyEnabled())", "author": "ikalinin1", "createdAt": "2020-10-02T06:02:15Z", "path": "vividus-extension-selenium/src/main/java/org/vividus/bdd/proxy/ProxyAgentStoryReporter.java", "diffHunk": "@@ -39,15 +40,10 @@\n     public void beforeStory(Story story, boolean givenStory)\n     {\n         String name = bddRunContext.getRunningStory().getName();\n-        if (!configuration.dryRun())\n+        if (!configuration.dryRun() && !givenStory && !\"BeforeStories\".equals(name) && !\"AfterStories\".equals(name)", "originalCommit": "570cf41fc5fb5102698bf0056b550445333a515d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "77b0c701d256534957eb3b1d44311ed72fd64565", "chunk": "diff --git a/vividus-extension-selenium/src/main/java/org/vividus/bdd/proxy/ProxyAgentStoryReporter.java b/vividus-extension-selenium/src/main/java/org/vividus/bdd/proxy/ProxyAgentStoryReporter.java\nindex e717c397..7052beb8 100644\n--- a/vividus-extension-selenium/src/main/java/org/vividus/bdd/proxy/ProxyAgentStoryReporter.java\n+++ b/vividus-extension-selenium/src/main/java/org/vividus/bdd/proxy/ProxyAgentStoryReporter.java\n\n@@ -40,8 +40,7 @@ public class ProxyAgentStoryReporter extends ChainedStoryReporter\n     public void beforeStory(Story story, boolean givenStory)\n     {\n         String name = bddRunContext.getRunningStory().getName();\n-        if (!configuration.dryRun() && !givenStory && !\"BeforeStories\".equals(name) && !\"AfterStories\".equals(name)\n-                && (proxyEnabled || isProxyEnabledInStoryMeta()))\n+        if (!configuration.dryRun() && !givenStory && isNotSystemStory(name) && isProxyEnabled())\n         {\n             proxy.start();\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYzMTAzNQ==", "url": "https://github.com/vividus-framework/vividus/pull/954#discussion_r498631035", "bodyText": "options1 -> options", "author": "ikalinin1", "createdAt": "2020-10-02T06:08:02Z", "path": "vividus-plugin-saucelabs/src/test/java/org/vividus/selenium/sauce/SauceConnectOptionsTests.java", "diffHunk": "@@ -0,0 +1,400 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.selenium.sauce;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+\n+@RunWith(PowerMockRunner.class)\n+public class SauceConnectOptionsTests\n+{\n+    private static final String SPACE = \" \";\n+    private static final String PAC_FILE = \"--pac file://\";\n+    private static final String DOT_JS = \".js\";\n+    private static final String PAC_TEST_TUNNEL = \"pac-test-tunnel\";\n+    private static final String PROXY = \"test\";\n+    private static final String TUNNEL_IDENTIFIER = \"test-tunnel\";\n+    private static final String PID_FILE_NAME = \"sc_client-\" + TUNNEL_IDENTIFIER + \"-\";\n+    private static final String TUNNEL_IDENTIFIER_OPTION = \"--tunnel-identifier\" + SPACE + TUNNEL_IDENTIFIER;\n+    private static final String HOST = \"host\";\n+    private static final String USER = \"user:pass\";\n+    private static final int PORT = 9999;\n+    private static final int DEFAULT_HOST_PORT = 80;\n+    private static final String AUTH_FORMAT = \"--auth %s:%d:%s\";\n+    private static final String PID_EXTENSION = \".pid\";\n+    private static final String NO_REMOVE_COLLIDING_TUNNELS = \"--no-remove-colliding-tunnels\";\n+    private static final String NO_PROXY_CACHING = \"--no-proxy-caching\";\n+    private static final String SAUCE_LABS_REST_URL = \"https://saucelabs.com/rest/v1/\";\n+\n+    private static final String PID_FILE = \"--pidfile\";\n+\n+    private final SauceConnectOptions sauceConnectOptions = new SauceConnectOptions();\n+\n+    @Test\n+    @PrepareForTest({ SauceConnectOptions.class, Files.class, FileUtils.class })\n+    public void testBuildWithProxy() throws Exception\n+    {\n+        sauceConnectOptions.setProxy(PROXY);\n+        File file = mock(File.class);\n+        Path pacPath = mock(Path.class);\n+        PowerMockito.mockStatic(Files.class);\n+        PowerMockito.mockStatic(FileUtils.class);\n+        when(Files.createTempFile(PAC_TEST_TUNNEL, DOT_JS)).thenReturn(pacPath);\n+        when(pacPath.toFile()).thenReturn(file);\n+        Path pidPath = mock(Path.class);\n+        when(Files.createTempFile(PID_FILE_NAME, PID_EXTENSION)).thenReturn(pidPath);\n+        File pidFile = mock(File.class);\n+        when(pidPath.toFile()).thenReturn(pidFile);\n+        assertEquals(TUNNEL_IDENTIFIER_OPTION + SPACE + PID_FILE + SPACE + pidPath + SPACE + PAC_FILE + pacPath + SPACE\n+                        + NO_REMOVE_COLLIDING_TUNNELS + SPACE + NO_PROXY_CACHING,\n+                sauceConnectOptions.build(TUNNEL_IDENTIFIER));\n+        verify(pidFile).deleteOnExit();\n+    }\n+\n+    @Test\n+    @PrepareForTest({ SauceConnectOptions.class, Files.class, FileUtils.class })\n+    public void testBuildWithProxyWindowsPathDelimeters() throws Exception\n+    {\n+        sauceConnectOptions.setProxy(PROXY);\n+        File file = mock(File.class);\n+        Path pacPath = mock(Path.class);\n+        PowerMockito.mockStatic(Files.class);\n+        PowerMockito.mockStatic(FileUtils.class);\n+        when(Files.createTempFile(PAC_TEST_TUNNEL, DOT_JS)).thenReturn(pacPath);\n+        when(pacPath.toFile()).thenReturn(file);\n+        Path pidPath = mock(Path.class);\n+        when(Files.createTempFile(PID_FILE_NAME, PID_EXTENSION)).thenReturn(pidPath);\n+        File pidFile = mock(File.class);\n+        when(pidPath.toFile()).thenReturn(pidFile);\n+        when(pacPath.toString()).thenReturn(\"c:\\\\user\\\\temp.js\");\n+        assertEquals(TUNNEL_IDENTIFIER_OPTION + SPACE + PID_FILE + SPACE + pidPath + SPACE + PAC_FILE\n+                        + \"c:/user/temp.js\" + SPACE + NO_REMOVE_COLLIDING_TUNNELS + SPACE + NO_PROXY_CACHING,\n+                sauceConnectOptions.build(TUNNEL_IDENTIFIER));\n+        verify(pidFile).deleteOnExit();\n+    }\n+\n+    @Test\n+    @PrepareForTest({ SauceConnectOptions.class, Files.class, FileUtils.class })\n+    public void testBuildWithProxyWithAuth() throws Exception\n+    {\n+        sauceConnectOptions.setProxy(PROXY);\n+        sauceConnectOptions.setHost(HOST);\n+        sauceConnectOptions.setBasicAuthUser(USER);\n+        sauceConnectOptions.setPort(PORT);\n+        File file = mock(File.class);\n+        Path pacPath = mock(Path.class);\n+        PowerMockito.mockStatic(Files.class);\n+        PowerMockito.mockStatic(FileUtils.class);\n+        when(Files.createTempFile(PAC_TEST_TUNNEL, DOT_JS)).thenReturn(pacPath);\n+        when(pacPath.toFile()).thenReturn(file);\n+        Path pidPath = mock(Path.class);\n+        when(Files.createTempFile(PID_FILE_NAME, PID_EXTENSION)).thenReturn(pidPath);\n+        File pidFile = mock(File.class);\n+        when(pidPath.toFile()).thenReturn(pidFile);\n+        assertEquals(TUNNEL_IDENTIFIER_OPTION + SPACE + PID_FILE + SPACE + pidPath + SPACE + String\n+                        .format(AUTH_FORMAT, HOST, PORT, USER) + SPACE + PAC_FILE + pacPath + SPACE\n+                        + NO_REMOVE_COLLIDING_TUNNELS + SPACE + NO_PROXY_CACHING,\n+                sauceConnectOptions.build(TUNNEL_IDENTIFIER));\n+        verify(pidFile).deleteOnExit();\n+    }\n+\n+    @Test\n+    @PrepareForTest({ SauceConnectOptions.class, Files.class, FileUtils.class })\n+    public void testBuildWithProxyWithAuthNoPort() throws Exception\n+    {\n+        sauceConnectOptions.setProxy(PROXY);\n+        sauceConnectOptions.setHost(HOST);\n+        sauceConnectOptions.setBasicAuthUser(USER);\n+        File file = mock(File.class);\n+        Path pacPath = mock(Path.class);\n+        PowerMockito.mockStatic(Files.class);\n+        PowerMockito.mockStatic(FileUtils.class);\n+        when(Files.createTempFile(PAC_TEST_TUNNEL, DOT_JS)).thenReturn(pacPath);\n+        when(pacPath.toFile()).thenReturn(file);\n+        Path pidPath = mock(Path.class);\n+        when(Files.createTempFile(PID_FILE_NAME, PID_EXTENSION)).thenReturn(pidPath);\n+        File pidFile = mock(File.class);\n+        when(pidPath.toFile()).thenReturn(pidFile);\n+        assertEquals(TUNNEL_IDENTIFIER_OPTION + SPACE + PID_FILE + SPACE + pidPath + SPACE + String\n+                        .format(AUTH_FORMAT, HOST, DEFAULT_HOST_PORT, USER) + SPACE + PAC_FILE + pacPath + SPACE\n+                        + NO_REMOVE_COLLIDING_TUNNELS + SPACE + NO_PROXY_CACHING,\n+                sauceConnectOptions.build(TUNNEL_IDENTIFIER));\n+        verify(pidFile).deleteOnExit();\n+    }\n+\n+    @Test\n+    @PrepareForTest({ SauceConnectOptions.class, Files.class, FileUtils.class })\n+    public void testBuildWithProxyWithAuthNoHost() throws Exception\n+    {\n+        sauceConnectOptions.setProxy(PROXY);\n+        sauceConnectOptions.setBasicAuthUser(USER);\n+        File file = mock(File.class);\n+        Path pacPath = mock(Path.class);\n+        PowerMockito.mockStatic(Files.class);\n+        PowerMockito.mockStatic(FileUtils.class);\n+        when(Files.createTempFile(PAC_TEST_TUNNEL, DOT_JS)).thenReturn(pacPath);\n+        when(pacPath.toFile()).thenReturn(file);\n+        Path pidPath = mock(Path.class);\n+        when(Files.createTempFile(PID_FILE_NAME, PID_EXTENSION)).thenReturn(pidPath);\n+        File pidFile = mock(File.class);\n+        when(pidPath.toFile()).thenReturn(pidFile);\n+        assertEquals(TUNNEL_IDENTIFIER_OPTION + SPACE + PID_FILE + SPACE + pidPath + SPACE + PAC_FILE + pacPath + SPACE\n+                        + NO_REMOVE_COLLIDING_TUNNELS + SPACE + NO_PROXY_CACHING,\n+                sauceConnectOptions.build(TUNNEL_IDENTIFIER));\n+        verify(pidFile).deleteOnExit();\n+    }\n+\n+    @Test\n+    @PrepareForTest({ SauceConnectOptions.class, Files.class, FileUtils.class })\n+    public void testBuildWithProxyWithAuthNoUser() throws Exception\n+    {\n+        sauceConnectOptions.setProxy(PROXY);\n+        sauceConnectOptions.setHost(HOST);\n+        File file = mock(File.class);\n+        Path pacPath = mock(Path.class);\n+        PowerMockito.mockStatic(Files.class);\n+        PowerMockito.mockStatic(FileUtils.class);\n+        when(Files.createTempFile(PAC_TEST_TUNNEL, DOT_JS)).thenReturn(pacPath);\n+        when(pacPath.toFile()).thenReturn(file);\n+        Path pidPath = mock(Path.class);\n+        when(Files.createTempFile(PID_FILE_NAME, PID_EXTENSION)).thenReturn(pidPath);\n+        File pidFile = mock(File.class);\n+        when(pidPath.toFile()).thenReturn(pidFile);\n+        assertEquals(TUNNEL_IDENTIFIER_OPTION + SPACE + PID_FILE + SPACE + pidPath + SPACE + PAC_FILE + pacPath + SPACE\n+                        + NO_REMOVE_COLLIDING_TUNNELS + SPACE + NO_PROXY_CACHING,\n+                sauceConnectOptions.build(TUNNEL_IDENTIFIER));\n+        verify(pidFile).deleteOnExit();\n+    }\n+\n+    @Test\n+    @PrepareForTest({ SauceConnectOptions.class, Files.class, FileUtils.class })\n+    public void testBuildWithProxyWithSkipHostsPattern() throws Exception\n+    {\n+        sauceConnectOptions.setProxy(PROXY);\n+        sauceConnectOptions.setSkipProxyHostsPattern(\"example.com\");\n+        File file = mock(File.class);\n+        Path pacPath = mock(Path.class);\n+        PowerMockito.mockStatic(Files.class);\n+        PowerMockito.mockStatic(FileUtils.class);\n+        when(Files.createTempFile(PAC_TEST_TUNNEL, DOT_JS)).thenReturn(pacPath);\n+        when(pacPath.toFile()).thenReturn(file);\n+        Path pidPath = mock(Path.class);\n+        when(Files.createTempFile(PID_FILE_NAME, PID_EXTENSION)).thenReturn(pidPath);\n+        File pidFile = mock(File.class);\n+        when(pidPath.toFile()).thenReturn(pidFile);\n+        assertEquals(TUNNEL_IDENTIFIER_OPTION + SPACE + PID_FILE + SPACE + pidPath + SPACE + PAC_FILE + pacPath + SPACE\n+                        + NO_REMOVE_COLLIDING_TUNNELS + SPACE + NO_PROXY_CACHING,\n+                sauceConnectOptions.build(TUNNEL_IDENTIFIER));\n+        PowerMockito.verifyStatic(FileUtils.class);\n+        FileUtils.writeLines(file, StandardCharsets.UTF_8.toString(), List.of(\"function \"\n+                + \"FindProxyForURL(url, host) { if (shExpMatch(host, \\\"*.miso.saucelabs.com\\\")\"\n+                + \"|| shExpMatch(host, \\\"saucelabs.com\\\")|| shExpMatch(host, \\\"example.com\\\")) \"\n+                + \"{return \\\"DIRECT\\\";}return \\\"PROXY test\\\";}\"));\n+        verify(pidFile).deleteOnExit();\n+    }\n+\n+    @Test\n+    @PrepareForTest({ SauceConnectOptions.class, Files.class, FileUtils.class })\n+    public void testBuildWOProxy() throws IOException\n+    {\n+        Path pidPath = mockPidPath();\n+        File pidFile = mock(File.class);\n+        PowerMockito.mockStatic(FileUtils.class);\n+        when(pidPath.toFile()).thenReturn(pidFile);\n+        assertEquals(TUNNEL_IDENTIFIER_OPTION + SPACE + PID_FILE + SPACE + pidPath + SPACE + NO_REMOVE_COLLIDING_TUNNELS\n+                        + SPACE + NO_PROXY_CACHING,\n+                sauceConnectOptions.build(TUNNEL_IDENTIFIER));\n+        verify(pidFile).deleteOnExit();\n+    }\n+\n+    @Test\n+    @PrepareForTest({ SauceConnectOptions.class, Files.class, FileUtils.class })\n+    public void testBuildWOProxyWithNoSslBumpDomains() throws IOException\n+    {\n+        String noSslValue = \"all\";\n+        String noSslOption = \"--no-ssl-bump-domains\" + SPACE + noSslValue;\n+        Path pidPath = mockPidPath();\n+        File pidFile = mock(File.class);\n+        PowerMockito.mockStatic(FileUtils.class);\n+        when(pidPath.toFile()).thenReturn(pidFile);\n+        sauceConnectOptions.setNoSslBumpDomains(noSslValue);\n+        assertEquals(TUNNEL_IDENTIFIER_OPTION + SPACE + PID_FILE + SPACE + pidPath + SPACE + noSslOption + SPACE\n+                        + NO_REMOVE_COLLIDING_TUNNELS + SPACE + NO_PROXY_CACHING,\n+                sauceConnectOptions.build(TUNNEL_IDENTIFIER));\n+        verify(pidFile).deleteOnExit();\n+    }\n+\n+    @Test\n+    @PrepareForTest({ SauceConnectOptions.class, Files.class, FileUtils.class })\n+    public void testBuildWOProxyWithAuth() throws IOException\n+    {\n+        sauceConnectOptions.setHost(HOST);\n+        sauceConnectOptions.setBasicAuthUser(USER);\n+        Path pidPath = mockPidPath();\n+        File pidFile = mock(File.class);\n+        PowerMockito.mockStatic(FileUtils.class);\n+        when(pidPath.toFile()).thenReturn(pidFile);\n+        assertEquals(TUNNEL_IDENTIFIER_OPTION + SPACE + PID_FILE + SPACE + pidPath + SPACE + String\n+                        .format(AUTH_FORMAT, HOST, DEFAULT_HOST_PORT, USER) + SPACE + NO_REMOVE_COLLIDING_TUNNELS\n+                        + SPACE + NO_PROXY_CACHING,\n+                sauceConnectOptions.build(TUNNEL_IDENTIFIER));\n+        verify(pidFile).deleteOnExit();\n+    }\n+\n+    @Test\n+    public void testBuildWOProxyNullOption() throws IOException\n+    {\n+        assertEquals(NO_REMOVE_COLLIDING_TUNNELS + SPACE + NO_PROXY_CACHING, sauceConnectOptions.build(null));\n+    }\n+\n+    @Test\n+    public void testBuildWOProxyNullOptionWithAuth() throws IOException\n+    {\n+        sauceConnectOptions.setHost(HOST);\n+        sauceConnectOptions.setBasicAuthUser(USER);\n+        assertEquals(String.format(AUTH_FORMAT, HOST, DEFAULT_HOST_PORT, USER) + SPACE + NO_REMOVE_COLLIDING_TUNNELS\n+                + SPACE + NO_PROXY_CACHING, sauceConnectOptions.build(null));\n+    }\n+\n+    @Test\n+    public void testBuildWithRestUrl() throws IOException\n+    {\n+        sauceConnectOptions.setRestUrl(SAUCE_LABS_REST_URL);\n+        assertEquals(\"--rest-url\" + SPACE + SAUCE_LABS_REST_URL + SPACE + NO_REMOVE_COLLIDING_TUNNELS + SPACE\n+                + NO_PROXY_CACHING, sauceConnectOptions.build(null));\n+    }\n+\n+    @Test\n+    public void testHashCode()\n+    {\n+        assertEquals(createDefaultOptions().hashCode(), createDefaultOptions().hashCode());\n+    }\n+\n+    @Test\n+    public void testEqualsDifferentObjects()\n+    {\n+        assertEquals(createDefaultOptions(), createDefaultOptions());\n+    }\n+\n+    @Test\n+    public void testEqualsSameObjects()\n+    {\n+        SauceConnectOptions options = createDefaultOptions();\n+        assertEquals(options, options);\n+    }\n+\n+    @Test\n+    public void testNotEqualsToNull()\n+    {\n+        assertFalse(createDefaultOptions().equals(null));\n+    }\n+\n+    @Test\n+    public void testNotEqualsProxy()\n+    {\n+        SauceConnectOptions options1 = createDefaultOptions();\n+        options1.setProxy(null);", "originalCommit": "570cf41fc5fb5102698bf0056b550445333a515d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d01116d324dbb7cc4270120f695d592c22c3574e", "chunk": "diff --git a/vividus-plugin-saucelabs/src/test/java/org/vividus/selenium/sauce/SauceConnectOptionsTests.java b/vividus-plugin-saucelabs/src/test/java/org/vividus/selenium/sauce/SauceConnectOptionsTests.java\nindex 83424320..c7e13650 100644\n--- a/vividus-plugin-saucelabs/src/test/java/org/vividus/selenium/sauce/SauceConnectOptionsTests.java\n+++ b/vividus-plugin-saucelabs/src/test/java/org/vividus/selenium/sauce/SauceConnectOptionsTests.java\n\n@@ -48,11 +48,6 @@ public class SauceConnectOptionsTests\n     private static final String TUNNEL_IDENTIFIER = \"test-tunnel\";\n     private static final String PID_FILE_NAME = \"sc_client-\" + TUNNEL_IDENTIFIER + \"-\";\n     private static final String TUNNEL_IDENTIFIER_OPTION = \"--tunnel-identifier\" + SPACE + TUNNEL_IDENTIFIER;\n-    private static final String HOST = \"host\";\n-    private static final String USER = \"user:pass\";\n-    private static final int PORT = 9999;\n-    private static final int DEFAULT_HOST_PORT = 80;\n-    private static final String AUTH_FORMAT = \"--auth %s:%d:%s\";\n     private static final String PID_EXTENSION = \".pid\";\n     private static final String NO_REMOVE_COLLIDING_TUNNELS = \"--no-remove-colliding-tunnels\";\n     private static final String NO_PROXY_CACHING = \"--no-proxy-caching\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY0OTM2OQ==", "url": "https://github.com/vividus-framework/vividus/pull/954#discussion_r498649369", "bodyText": "why is it shifted in right direction?", "author": "uarlouski", "createdAt": "2020-10-02T07:09:57Z", "path": "vividus-extension-selenium/src/main/java/org/vividus/beans/IntegerRangePropertyEditor.java", "diffHunk": "@@ -64,7 +64,8 @@ public IntegerRange convert(String source)\n             throw new IllegalArgumentException(\n                     \"Expected integers in format 'number' or 'number..number' but got: \" + value);\n         })\n-        .flatMap(List::stream)\n-        .collect(Collectors.collectingAndThen(Collectors.toCollection(LinkedHashSet::new), IntegerRange::new));\n+            .flatMap(List::stream)\n+            .collect(Collectors.collectingAndThen(Collectors.toCollection(LinkedHashSet::new), IntegerRange::new));", "originalCommit": "570cf41fc5fb5102698bf0056b550445333a515d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ba8df248f2c64290e8e1d200d4e68f5f93076d76", "chunk": "diff --git a/vividus-extension-selenium/src/main/java/org/vividus/beans/IntegerRangePropertyEditor.java b/vividus-extension-selenium/src/main/java/org/vividus/beans/IntegerRangePropertyEditor.java\nindex 03f866fd..60f78655 100644\n--- a/vividus-extension-selenium/src/main/java/org/vividus/beans/IntegerRangePropertyEditor.java\n+++ b/vividus-extension-selenium/src/main/java/org/vividus/beans/IntegerRangePropertyEditor.java\n\n@@ -64,8 +64,8 @@ public class IntegerRangePropertyEditor extends PropertyEditorSupport\n             throw new IllegalArgumentException(\n                     \"Expected integers in format 'number' or 'number..number' but got: \" + value);\n         })\n-            .flatMap(List::stream)\n-            .collect(Collectors.collectingAndThen(Collectors.toCollection(LinkedHashSet::new), IntegerRange::new));\n+        .flatMap(List::stream)\n+        .collect(Collectors.collectingAndThen(Collectors.toCollection(LinkedHashSet::new), IntegerRange::new));\n         setValue(intRange);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY1NjczNw==", "url": "https://github.com/vividus-framework/vividus/pull/954#discussion_r498656737", "bodyText": "addCapabilities is a bit misleading from my pov :) maybe configureCapabilities?", "author": "uarlouski", "createdAt": "2020-10-02T07:29:14Z", "path": "vividus-extension-selenium/src/main/java/org/vividus/selenium/AbstractVividusWebDriverFactory.java", "diffHunk": "@@ -31,58 +31,53 @@\n \n public abstract class AbstractVividusWebDriverFactory implements IVividusWebDriverFactory\n {\n-    private final IBddRunContext bddRunContext;\n+    private final boolean remoteExecution;\n     private final IWebDriverManagerContext webDriverManagerContext;\n+    private final IBddRunContext bddRunContext;\n+    private final  Optional<Set<DesiredCapabilitiesConfigurer>> desiredCapabilitiesConfigurers;\n \n-    public AbstractVividusWebDriverFactory(IBddRunContext bddRunContext,\n-            IWebDriverManagerContext webDriverManagerContext)\n+    public AbstractVividusWebDriverFactory(boolean remoteExecution, IWebDriverManagerContext webDriverManagerContext,\n+            IBddRunContext bddRunContext, Optional<Set<DesiredCapabilitiesConfigurer>> desiredCapabilitiesConfigurers)\n     {\n-        this.bddRunContext = bddRunContext;\n+        this.remoteExecution = remoteExecution;\n         this.webDriverManagerContext = webDriverManagerContext;\n+        this.bddRunContext = bddRunContext;\n+        this.desiredCapabilitiesConfigurers = desiredCapabilitiesConfigurers;\n     }\n \n     @Override\n     public VividusWebDriver create()\n-    {\n-        VividusWebDriver vividusWebDriver = createVividusWebDriver(bddRunContext.getRunningStory());\n-        configureVividusWebDriver(vividusWebDriver);\n-        return vividusWebDriver;\n-    }\n-\n-    protected abstract void configureVividusWebDriver(VividusWebDriver vividusWebDriver);\n-\n-    private VividusWebDriver createVividusWebDriver(RunningStory runningStory)\n     {\n         VividusWebDriver vividusWebDriver = new VividusWebDriver();\n-        setBaseDesiredCapabilities(vividusWebDriver, runningStory);\n-\n+        setDesiredCapabilities(vividusWebDriver.getDesiredCapabilities());\n+        vividusWebDriver.setWebDriver(createWebDriver(vividusWebDriver.getDesiredCapabilities()));\n+        vividusWebDriver.setRemote(remoteExecution);\n         return vividusWebDriver;\n     }\n \n-    private void setBaseDesiredCapabilities(VividusWebDriver vividusWebDriver, RunningStory runningStory)\n+    protected void setDesiredCapabilities(DesiredCapabilities desiredCapabilities)\n     {\n-        DesiredCapabilities desiredCapabilities = vividusWebDriver.getDesiredCapabilities();\n-        desiredCapabilities.merge(webDriverManagerContext.getParameter(\n-                WebDriverManagerParameter.DESIRED_CAPABILITIES));\n+        desiredCapabilitiesConfigurers.ifPresent(\n+            configurers -> configurers.forEach(configurer -> configurer.addCapabilities(desiredCapabilities)));", "originalCommit": "570cf41fc5fb5102698bf0056b550445333a515d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "168ec2a2e04aef6beba11790931f95a03e9cc998", "chunk": "diff --git a/vividus-extension-selenium/src/main/java/org/vividus/selenium/AbstractVividusWebDriverFactory.java b/vividus-extension-selenium/src/main/java/org/vividus/selenium/AbstractVividusWebDriverFactory.java\nindex ad79d2f3..e9369c50 100644\n--- a/vividus-extension-selenium/src/main/java/org/vividus/selenium/AbstractVividusWebDriverFactory.java\n+++ b/vividus-extension-selenium/src/main/java/org/vividus/selenium/AbstractVividusWebDriverFactory.java\n\n@@ -58,7 +58,7 @@ public abstract class AbstractVividusWebDriverFactory implements IVividusWebDriv\n     protected void setDesiredCapabilities(DesiredCapabilities desiredCapabilities)\n     {\n         desiredCapabilitiesConfigurers.ifPresent(\n-            configurers -> configurers.forEach(configurer -> configurer.addCapabilities(desiredCapabilities)));\n+            configurers -> configurers.forEach(configurer -> configurer.configure(desiredCapabilities)));\n         desiredCapabilities.merge(webDriverManagerContext.getParameter(WebDriverManagerParameter.DESIRED_CAPABILITIES));\n         webDriverManagerContext.reset(WebDriverManagerParameter.DESIRED_CAPABILITIES);\n         RunningStory runningStory = bddRunContext.getRunningStory();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY1NzY4Nw==", "url": "https://github.com/vividus-framework/vividus/pull/954#discussion_r498657687", "bodyText": "should we really wrap IOE here?", "author": "uarlouski", "createdAt": "2020-10-02T07:31:33Z", "path": "vividus-plugin-saucelabs/src/main/java/org/vividus/selenium/sauce/SauceConnectManager.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.selenium.sauce;\n+\n+import java.io.IOException;\n+import java.net.ServerSocket;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import com.saucelabs.ci.sauceconnect.SauceTunnelManager;\n+\n+import org.vividus.testcontext.TestContext;\n+\n+public class SauceConnectManager implements ISauceConnectManager\n+{\n+    private static final Object KEY = SauceConnectDescriptor.class;\n+\n+    private SauceTunnelManager sauceTunnelManager;\n+    private String sauceLabsUsername;\n+    private String sauceLabsAccessKey;\n+\n+    private final Map<SauceConnectOptions, SauceConnectDescriptor> activeConnections = new HashMap<>();\n+    private TestContext testContext;\n+\n+    @Override\n+    public void start(SauceConnectOptions sauceConnectOptions)\n+    {\n+        SauceConnectDescriptor sauceConnectDescriptor = activeConnections.get(sauceConnectOptions);\n+        SauceConnectDescriptor currentConnectionDescriptor = getSauceConnectDescriptor();\n+        if (currentConnectionDescriptor == null)\n+        {\n+            try\n+            {\n+                if (sauceConnectDescriptor == null)\n+                {\n+                    synchronized (activeConnections)\n+                    {\n+                        sauceConnectDescriptor = activeConnections.get(sauceConnectOptions);\n+                        if (sauceConnectDescriptor == null)\n+                        {\n+                            sauceConnectDescriptor = new SauceConnectDescriptor(sauceConnectOptions);\n+                            activeConnections.put(sauceConnectOptions, sauceConnectDescriptor);\n+                        }\n+                    }\n+                }\n+                synchronized (sauceTunnelManager)\n+                {\n+                    sauceTunnelManager.openConnection(sauceLabsUsername, sauceLabsAccessKey,\n+                            sauceConnectDescriptor.getPort(), null, sauceConnectDescriptor.getOptions(), null,\n+                            Boolean.TRUE, null);\n+                }\n+            }\n+            catch (IOException e)\n+            {\n+                throw new IllegalStateException(e);", "originalCommit": "570cf41fc5fb5102698bf0056b550445333a515d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY2MDY1NQ==", "url": "https://github.com/vividus-framework/vividus/pull/954#discussion_r498660655", "bodyText": "can't we get rid of http and use https only since many modern web sites refuse usage of not secure protorol?", "author": "uarlouski", "createdAt": "2020-10-02T07:38:44Z", "path": "vividus-plugin-saucelabs/src/main/java/org/vividus/selenium/sauce/SauceLabsCapabilitiesConfigurer.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.selenium.sauce;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.google.common.eventbus.Subscribe;\n+\n+import org.openqa.selenium.Proxy;\n+import org.openqa.selenium.remote.CapabilityType;\n+import org.openqa.selenium.remote.DesiredCapabilities;\n+import org.vividus.bdd.context.IBddRunContext;\n+import org.vividus.bdd.model.RunningStory;\n+import org.vividus.selenium.DesiredCapabilitiesConfigurer;\n+import org.vividus.selenium.event.WebDriverQuitEvent;\n+import org.vividus.ui.web.configuration.WebApplicationConfiguration;\n+\n+public class SauceLabsCapabilitiesConfigurer implements DesiredCapabilitiesConfigurer\n+{\n+    private static final String SAUCE_OPTIONS = \"sauce:options\";\n+    private static final int DEFAULT_HTTPS_PORT = 443;\n+\n+    private final WebApplicationConfiguration webApplicationConfiguration;\n+    private final IBddRunContext bddRunContext;\n+    private final SauceConnectManager sauceConnectManager;\n+    private boolean sauceLabsEnabled;\n+    private boolean sauceConnectEnabled;\n+    private String restUrl;\n+\n+    public SauceLabsCapabilitiesConfigurer(WebApplicationConfiguration webApplicationConfiguration,\n+            IBddRunContext bddRunContext, SauceConnectManager sauceConnectManager)\n+    {\n+        this.webApplicationConfiguration = webApplicationConfiguration;\n+        this.bddRunContext = bddRunContext;\n+        this.sauceConnectManager = sauceConnectManager;\n+    }\n+\n+    @Subscribe\n+    public void stopSauceConnect(WebDriverQuitEvent event)\n+    {\n+        sauceConnectManager.stop();\n+    }\n+\n+    @Override\n+    public void addCapabilities(DesiredCapabilities desiredCapabilities)\n+    {\n+        if (sauceLabsEnabled)\n+        {\n+            Proxy proxy = (Proxy) desiredCapabilities.getCapability(CapabilityType.PROXY);\n+            if (sauceConnectEnabled || proxy != null)\n+            {\n+                SauceConnectOptions options = createSauceConnectOptions(proxy);\n+                sauceConnectManager.start(options);\n+                addSauceOption(desiredCapabilities, \"tunnelIdentifier\", sauceConnectManager.getTunnelId());\n+                desiredCapabilities.setCapability(CapabilityType.PROXY, (Object) null);\n+            }\n+            RunningStory runningStory = bddRunContext.getRunningStory();\n+            if (runningStory != null)\n+            {\n+                addSauceOption(desiredCapabilities, \"name\", runningStory.getName());\n+            }\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private void addSauceOption(DesiredCapabilities desiredCapabilities, String capabilityName, Object value)\n+    {\n+        Map<String, Object> sauceOptions = (Map<String, Object>) desiredCapabilities.getCapability(SAUCE_OPTIONS);\n+        if (sauceOptions == null)\n+        {\n+            sauceOptions = new HashMap<>();\n+            desiredCapabilities.setCapability(SAUCE_OPTIONS, sauceOptions);\n+        }\n+        sauceOptions.put(capabilityName, value);\n+    }\n+\n+    private SauceConnectOptions createSauceConnectOptions(Proxy proxy)\n+    {\n+        SauceConnectOptions sauceConnectOptions = new SauceConnectOptions();\n+        sauceConnectOptions.setHost(webApplicationConfiguration.getHost());\n+        if (\"https\".equals(webApplicationConfiguration.getMainApplicationPageUrl().getScheme()))\n+        {\n+            sauceConnectOptions.setPort(DEFAULT_HTTPS_PORT);", "originalCommit": "570cf41fc5fb5102698bf0056b550445333a515d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d01116d324dbb7cc4270120f695d592c22c3574e", "chunk": "diff --git a/vividus-plugin-saucelabs/src/main/java/org/vividus/selenium/sauce/SauceLabsCapabilitiesConfigurer.java b/vividus-plugin-saucelabs/src/main/java/org/vividus/selenium/sauce/SauceLabsCapabilitiesConfigurer.java\nindex a9889ba1..97342ce8 100644\n--- a/vividus-plugin-saucelabs/src/main/java/org/vividus/selenium/sauce/SauceLabsCapabilitiesConfigurer.java\n+++ b/vividus-plugin-saucelabs/src/main/java/org/vividus/selenium/sauce/SauceLabsCapabilitiesConfigurer.java\n\n@@ -28,24 +28,20 @@ import org.vividus.bdd.context.IBddRunContext;\n import org.vividus.bdd.model.RunningStory;\n import org.vividus.selenium.DesiredCapabilitiesConfigurer;\n import org.vividus.selenium.event.WebDriverQuitEvent;\n-import org.vividus.ui.web.configuration.WebApplicationConfiguration;\n \n public class SauceLabsCapabilitiesConfigurer implements DesiredCapabilitiesConfigurer\n {\n     private static final String SAUCE_OPTIONS = \"sauce:options\";\n-    private static final int DEFAULT_HTTPS_PORT = 443;\n \n-    private final WebApplicationConfiguration webApplicationConfiguration;\n     private final IBddRunContext bddRunContext;\n     private final SauceConnectManager sauceConnectManager;\n     private boolean sauceLabsEnabled;\n     private boolean sauceConnectEnabled;\n+    private String sauceConnectFlags;\n     private String restUrl;\n \n-    public SauceLabsCapabilitiesConfigurer(WebApplicationConfiguration webApplicationConfiguration,\n-            IBddRunContext bddRunContext, SauceConnectManager sauceConnectManager)\n+    public SauceLabsCapabilitiesConfigurer(IBddRunContext bddRunContext, SauceConnectManager sauceConnectManager)\n     {\n-        this.webApplicationConfiguration = webApplicationConfiguration;\n         this.bddRunContext = bddRunContext;\n         this.sauceConnectManager = sauceConnectManager;\n     }\n"}}, {"oid": "77b0c701d256534957eb3b1d44311ed72fd64565", "url": "https://github.com/vividus-framework/vividus/commit/77b0c701d256534957eb3b1d44311ed72fd64565", "message": "pr comment fixes", "committedDate": "2020-10-02T08:28:29Z", "type": "commit"}, {"oid": "ba8df248f2c64290e8e1d200d4e68f5f93076d76", "url": "https://github.com/vividus-framework/vividus/commit/ba8df248f2c64290e8e1d200d4e68f5f93076d76", "message": "pr comments fixes", "committedDate": "2020-10-02T08:50:24Z", "type": "commit"}, {"oid": "d01116d324dbb7cc4270120f695d592c22c3574e", "url": "https://github.com/vividus-framework/vividus/commit/d01116d324dbb7cc4270120f695d592c22c3574e", "message": "add ability to configure sc flags via properties", "committedDate": "2020-10-02T08:50:57Z", "type": "commit"}, {"oid": "168ec2a2e04aef6beba11790931f95a03e9cc998", "url": "https://github.com/vividus-framework/vividus/commit/168ec2a2e04aef6beba11790931f95a03e9cc998", "message": "fix pr comments", "committedDate": "2020-10-02T08:55:14Z", "type": "commit"}, {"oid": "d057d8126cfed01b9e28b83479fe8c913c4ac33d", "url": "https://github.com/vividus-framework/vividus/commit/d057d8126cfed01b9e28b83479fe8c913c4ac33d", "message": "fix build", "committedDate": "2020-10-02T09:09:00Z", "type": "commit"}, {"oid": "9763c1c009c121695a02368119ffac3ae044a412", "url": "https://github.com/vividus-framework/vividus/commit/9763c1c009c121695a02368119ffac3ae044a412", "message": "renamings", "committedDate": "2020-10-02T09:28:05Z", "type": "commit"}, {"oid": "465a8e3753d45efa86a2b6f20adeea3ec3e8150d", "url": "https://github.com/vividus-framework/vividus/commit/465a8e3753d45efa86a2b6f20adeea3ec3e8150d", "message": "docs", "committedDate": "2020-10-02T09:30:10Z", "type": "commit"}, {"oid": "49bd4bed6b1d5c569527dfef6a450f83bdc35a19", "url": "https://github.com/vividus-framework/vividus/commit/49bd4bed6b1d5c569527dfef6a450f83bdc35a19", "message": "timeouts", "committedDate": "2020-10-02T09:51:51Z", "type": "commit"}, {"oid": "549431bb220f3d879aa14ffdb89cac2411f3844c", "url": "https://github.com/vividus-framework/vividus/commit/549431bb220f3d879aa14ffdb89cac2411f3844c", "message": "Add Proxy.java tests", "committedDate": "2020-10-02T09:53:14Z", "type": "commit"}, {"oid": "5568aabf0814e8f822a14b1674db70bc61478d29", "url": "https://github.com/vividus-framework/vividus/commit/5568aabf0814e8f822a14b1674db70bc61478d29", "message": "Add ThreadedProxy.java tests", "committedDate": "2020-10-02T09:58:18Z", "type": "commit"}, {"oid": "48850982ad772ea7912cb2030de806a3ff10b0a8", "url": "https://github.com/vividus-framework/vividus/commit/48850982ad772ea7912cb2030de806a3ff10b0a8", "message": "Add VividusWebDriverFactory.java tests", "committedDate": "2020-10-02T10:22:02Z", "type": "commit"}, {"oid": "ec553e07bf3a0c2cc45fb8d1a4af04769793f820", "url": "https://github.com/vividus-framework/vividus/commit/ec553e07bf3a0c2cc45fb8d1a4af04769793f820", "message": "add unit tests for SauceLabsCapabilitiesConfigurer", "committedDate": "2020-10-02T12:03:40Z", "type": "commit"}, {"oid": "aa3777f6c8e081d8fc6f884e38d69fc29e45ab0d", "url": "https://github.com/vividus-framework/vividus/commit/aa3777f6c8e081d8fc6f884e38d69fc29e45ab0d", "message": "fixes", "committedDate": "2020-10-02T12:18:50Z", "type": "commit"}, {"oid": "770ef1647219631a97acb9dfb3f8840905d4288f", "url": "https://github.com/vividus-framework/vividus/commit/770ef1647219631a97acb9dfb3f8840905d4288f", "message": "skip publishing to artifactory", "committedDate": "2020-10-02T12:25:06Z", "type": "commit"}, {"oid": "e86e9ba2fe44109da0dc0e4a7f2c071aabe5a462", "url": "https://github.com/vividus-framework/vividus/commit/e86e9ba2fe44109da0dc0e4a7f2c071aabe5a462", "message": "add missing test dependencies", "committedDate": "2020-10-02T12:30:02Z", "type": "commit"}, {"oid": "03f112a7ecc169071d093e674f6ad2b8cef472ac", "url": "https://github.com/vividus-framework/vividus/commit/03f112a7ecc169071d093e674f6ad2b8cef472ac", "message": "add more unit tests for MitmManagerFactory", "committedDate": "2020-10-02T12:46:05Z", "type": "commit"}, {"oid": "f4e233a108ba49f1fc77ca1dfe56085c1926dfda", "url": "https://github.com/vividus-framework/vividus/commit/f4e233a108ba49f1fc77ca1dfe56085c1926dfda", "message": "fix tests in ci", "committedDate": "2020-10-02T12:52:11Z", "type": "commit"}, {"oid": "bdd65a9efa8535126ff2f801215ce411fe050c73", "url": "https://github.com/vividus-framework/vividus/commit/bdd65a9efa8535126ff2f801215ce411fe050c73", "message": "fix checkstyle", "committedDate": "2020-10-02T12:56:53Z", "type": "commit"}, {"oid": "06d62e193dd8fc9b24623df8635a6c74d39f30cf", "url": "https://github.com/vividus-framework/vividus/commit/06d62e193dd8fc9b24623df8635a6c74d39f30cf", "message": "Add AbstractVividusWebDriverFactory.java test", "committedDate": "2020-10-02T13:17:56Z", "type": "commit"}, {"oid": "2b639a0ddc53aa200a8d253018f543ab0b31506a", "url": "https://github.com/vividus-framework/vividus/commit/2b639a0ddc53aa200a8d253018f543ab0b31506a", "message": "fix tests in ci", "committedDate": "2020-10-02T13:20:43Z", "type": "commit"}, {"oid": "1dc23e7af2ac409c0447ca0b276a5eef3ce6630c", "url": "https://github.com/vividus-framework/vividus/commit/1dc23e7af2ac409c0447ca0b276a5eef3ce6630c", "message": "small fixes", "committedDate": "2020-10-02T13:25:50Z", "type": "commit"}, {"oid": "ab7e44828f105a0aa222266bb81cb762cd2cfb7a", "url": "https://github.com/vividus-framework/vividus/commit/ab7e44828f105a0aa222266bb81cb762cd2cfb7a", "message": "revert false positive test", "committedDate": "2020-10-02T13:34:00Z", "type": "commit"}]}