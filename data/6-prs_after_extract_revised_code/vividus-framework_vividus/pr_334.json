{"pr_number": 334, "pr_title": "Append currently running batch key before thread names in logs", "pr_createdAt": "2020-02-20T18:59:12Z", "pr_url": "https://github.com/vividus-framework/vividus/pull/334", "timeline": [{"oid": "1e10cfc6b3738c9905e60f53f72740927ab209f7", "url": "https://github.com/vividus-framework/vividus/commit/1e10cfc6b3738c9905e60f53f72740927ab209f7", "message": "[bdd-enging] Append currently running batch key before thread names in logs", "committedDate": "2020-02-20T19:00:11Z", "type": "forcePushed"}, {"oid": "e4a1c355fbeaa5ddbf885b5162b725e420e02536", "url": "https://github.com/vividus-framework/vividus/commit/e4a1c355fbeaa5ddbf885b5162b725e420e02536", "message": "[bdd-enging] Append currently running batch key before thread names in logs", "committedDate": "2020-02-20T19:01:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI0MjU5Mg==", "url": "https://github.com/vividus-framework/vividus/pull/334#discussion_r382242592", "bodyText": "use embedderControls().threads()", "author": "valfirst", "createdAt": "2020-02-20T20:34:15Z", "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/BatchedEmbedder.java", "diffHunk": "@@ -143,6 +147,12 @@ public PerformableTree performableTree()\n         return performableTree;\n     }\n \n+    private ExecutorService createExecutorService(BatchExecutionConfiguration configuration)\n+    {\n+        Integer threads = configuration.getThreads();", "originalCommit": "e4a1c355fbeaa5ddbf885b5162b725e420e02536", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0dc054374849dab6aa77d1d2936877287c9eca3d", "chunk": "diff --git a/vividus-bdd-engine/src/main/java/org/vividus/bdd/BatchedEmbedder.java b/vividus-bdd-engine/src/main/java/org/vividus/bdd/BatchedEmbedder.java\nindex b142d01c..e7ac8620 100644\n--- a/vividus-bdd-engine/src/main/java/org/vividus/bdd/BatchedEmbedder.java\n+++ b/vividus-bdd-engine/src/main/java/org/vividus/bdd/BatchedEmbedder.java\n\n@@ -147,10 +149,12 @@ public class BatchedEmbedder extends Embedder\n         return performableTree;\n     }\n \n-    private ExecutorService createExecutorService(BatchExecutionConfiguration configuration)\n+    private ExecutorService createExecutorService(int threads)\n     {\n-        Integer threads = configuration.getThreads();\n-        return Executors.newFixedThreadPool(threads != null ? threads : 1, new NamedThreadFactory(batch));\n+        ThreadFactory threadFactory = new BasicThreadFactory.Builder()\n+                .namingPattern(batch + \"-thread-%d\")\n+                .build();\n+        return Executors.newFixedThreadPool(threads, threadFactory);\n     }\n \n     private EmbedderControls createEmbedderControls(BatchExecutionConfiguration batchExecutionConfiguration)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI0NjIxMw==", "url": "https://github.com/vividus-framework/vividus/pull/334#discussion_r382246213", "bodyText": "what about org.apache.commons.lang3.concurrent.BasicThreadFactory ?", "author": "valfirst", "createdAt": "2020-02-20T20:42:31Z", "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/factory/NamedThreadFactory.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.factory;\n+\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+public class NamedThreadFactory implements ThreadFactory", "originalCommit": "e4a1c355fbeaa5ddbf885b5162b725e420e02536", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0dc054374849dab6aa77d1d2936877287c9eca3d", "chunk": "diff --git a/vividus-bdd-engine/src/main/java/org/vividus/bdd/factory/NamedThreadFactory.java b/vividus-bdd-engine/src/main/java/org/vividus/bdd/factory/NamedThreadFactory.java\ndeleted file mode 100644\nindex 4807a661..00000000\n--- a/vividus-bdd-engine/src/main/java/org/vividus/bdd/factory/NamedThreadFactory.java\n+++ /dev/null\n\n@@ -1,39 +0,0 @@\n-/*\n- * Copyright 2019-2020 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.vividus.bdd.factory;\n-\n-import java.util.concurrent.ThreadFactory;\n-import java.util.concurrent.atomic.AtomicInteger;\n-\n-public class NamedThreadFactory implements ThreadFactory\n-{\n-    private final AtomicInteger threadNumber = new AtomicInteger(1);\n-    private final ThreadGroup threadGroup;\n-    private final String threadPrefix;\n-\n-    public NamedThreadFactory(String name)\n-    {\n-        threadGroup = Thread.currentThread().getThreadGroup();\n-        threadPrefix = name + \"-thread-\";\n-    }\n-\n-    @Override\n-    public Thread newThread(Runnable runnable)\n-    {\n-        return new Thread(threadGroup, runnable, threadPrefix + threadNumber.getAndIncrement());\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI0NzE0MQ==", "url": "https://github.com/vividus-framework/vividus/pull/334#discussion_r382247141", "bodyText": "please rename inOrder to ordered", "author": "valfirst", "createdAt": "2020-02-20T20:44:31Z", "path": "vividus-bdd-engine/src/test/java/org/vividus/bdd/BatchedEmbedderTests.java", "diffHunk": "@@ -109,19 +110,18 @@ void testRunStoriesAsPathsIgnoreFailureInBatchesTrue()\n         batches.put(BATCH, testStoryPaths);\n         batches.put(\"batch-2\", List.of(\"path2\"));\n         spy.runStoriesAsPaths(batches);\n-        InOrder inOrder = inOrder(spy, embedderMonitor, storyManager, bddRunContext, bddVariableContext,\n-                executorService);\n+        InOrder inOrder = inOrder(spy, embedderMonitor, storyManager, bddRunContext, bddVariableContext);", "originalCommit": "e4a1c355fbeaa5ddbf885b5162b725e420e02536", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0dc054374849dab6aa77d1d2936877287c9eca3d", "chunk": "diff --git a/vividus-bdd-engine/src/test/java/org/vividus/bdd/BatchedEmbedderTests.java b/vividus-bdd-engine/src/test/java/org/vividus/bdd/BatchedEmbedderTests.java\nindex 4dfcea08..18477d67 100644\n--- a/vividus-bdd-engine/src/test/java/org/vividus/bdd/BatchedEmbedderTests.java\n+++ b/vividus-bdd-engine/src/test/java/org/vividus/bdd/BatchedEmbedderTests.java\n\n@@ -114,14 +117,16 @@ class BatchedEmbedderTests\n         inOrder.verify(spy).processSystemProperties();\n         inOrder.verify(spy).useEmbedderControls(argThat(this::assertEmbedderControls));\n         inOrder.verify(spy).useMetaFilters(List.of(META_FILTERS));\n-        inOrder.verify(spy).useExecutorService(any(ExecutorService.class));\n         inOrder.verify(embedderMonitor).usingControls(argThat(this::assertEmbedderControls));\n+        List<ExecutorService> service = new ArrayList<>(1);\n+        inOrder.verify(spy).useExecutorService(argThat(service::add));\n         inOrder.verify(bddRunContext).putRunningBatch(BATCH);\n         inOrder.verify(storyManager).runStoriesAsPaths(eq(testStoryPaths), eq(mockedFilter), argThat(\n             failures -> failures.size() == 1 && failures.containsKey(key) && failures.containsValue(throwable)));\n         inOrder.verify(bddVariableContext).clearVariables();\n         inOrder.verify(bddRunContext).removeRunningBatch();\n-        verifyExecutorService(spy);\n+        inOrder.verifyNoMoreInteractions();\n+        verifyExecutorService(service.get(0));\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI0NzIyMA==", "url": "https://github.com/vividus-framework/vividus/pull/334#discussion_r382247220", "bodyText": "why is it removed?", "author": "valfirst", "createdAt": "2020-02-20T20:44:41Z", "path": "vividus-bdd-engine/src/test/java/org/vividus/bdd/BatchedEmbedderTests.java", "diffHunk": "@@ -109,19 +110,18 @@ void testRunStoriesAsPathsIgnoreFailureInBatchesTrue()\n         batches.put(BATCH, testStoryPaths);\n         batches.put(\"batch-2\", List.of(\"path2\"));\n         spy.runStoriesAsPaths(batches);\n-        InOrder inOrder = inOrder(spy, embedderMonitor, storyManager, bddRunContext, bddVariableContext,\n-                executorService);\n+        InOrder inOrder = inOrder(spy, embedderMonitor, storyManager, bddRunContext, bddVariableContext);\n         inOrder.verify(spy).processSystemProperties();\n         inOrder.verify(spy).useEmbedderControls(argThat(this::assertEmbedderControls));\n         inOrder.verify(spy).useMetaFilters(List.of(META_FILTERS));\n+        inOrder.verify(spy).useExecutorService(any(ExecutorService.class));\n         inOrder.verify(embedderMonitor).usingControls(argThat(this::assertEmbedderControls));\n         inOrder.verify(bddRunContext).putRunningBatch(BATCH);\n         inOrder.verify(storyManager).runStoriesAsPaths(eq(testStoryPaths), eq(mockedFilter), argThat(\n             failures -> failures.size() == 1 && failures.containsKey(key) && failures.containsValue(throwable)));\n         inOrder.verify(bddVariableContext).clearVariables();\n         inOrder.verify(bddRunContext).removeRunningBatch();\n-        inOrder.verify(executorService).shutdownNow();\n-        inOrder.verifyNoMoreInteractions();", "originalCommit": "e4a1c355fbeaa5ddbf885b5162b725e420e02536", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0dc054374849dab6aa77d1d2936877287c9eca3d", "chunk": "diff --git a/vividus-bdd-engine/src/test/java/org/vividus/bdd/BatchedEmbedderTests.java b/vividus-bdd-engine/src/test/java/org/vividus/bdd/BatchedEmbedderTests.java\nindex 4dfcea08..18477d67 100644\n--- a/vividus-bdd-engine/src/test/java/org/vividus/bdd/BatchedEmbedderTests.java\n+++ b/vividus-bdd-engine/src/test/java/org/vividus/bdd/BatchedEmbedderTests.java\n\n@@ -114,14 +117,16 @@ class BatchedEmbedderTests\n         inOrder.verify(spy).processSystemProperties();\n         inOrder.verify(spy).useEmbedderControls(argThat(this::assertEmbedderControls));\n         inOrder.verify(spy).useMetaFilters(List.of(META_FILTERS));\n-        inOrder.verify(spy).useExecutorService(any(ExecutorService.class));\n         inOrder.verify(embedderMonitor).usingControls(argThat(this::assertEmbedderControls));\n+        List<ExecutorService> service = new ArrayList<>(1);\n+        inOrder.verify(spy).useExecutorService(argThat(service::add));\n         inOrder.verify(bddRunContext).putRunningBatch(BATCH);\n         inOrder.verify(storyManager).runStoriesAsPaths(eq(testStoryPaths), eq(mockedFilter), argThat(\n             failures -> failures.size() == 1 && failures.containsKey(key) && failures.containsValue(throwable)));\n         inOrder.verify(bddVariableContext).clearVariables();\n         inOrder.verify(bddRunContext).removeRunningBatch();\n-        verifyExecutorService(spy);\n+        inOrder.verifyNoMoreInteractions();\n+        verifyExecutorService(service.get(0));\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI0NzQ4Mg==", "url": "https://github.com/vividus-framework/vividus/pull/334#discussion_r382247482", "bodyText": "that's an important part of the verification, we should keep this logic", "author": "valfirst", "createdAt": "2020-02-20T20:45:16Z", "path": "vividus-bdd-engine/src/test/java/org/vividus/bdd/BatchedEmbedderTests.java", "diffHunk": "@@ -109,19 +110,18 @@ void testRunStoriesAsPathsIgnoreFailureInBatchesTrue()\n         batches.put(BATCH, testStoryPaths);\n         batches.put(\"batch-2\", List.of(\"path2\"));\n         spy.runStoriesAsPaths(batches);\n-        InOrder inOrder = inOrder(spy, embedderMonitor, storyManager, bddRunContext, bddVariableContext,\n-                executorService);\n+        InOrder inOrder = inOrder(spy, embedderMonitor, storyManager, bddRunContext, bddVariableContext);\n         inOrder.verify(spy).processSystemProperties();\n         inOrder.verify(spy).useEmbedderControls(argThat(this::assertEmbedderControls));\n         inOrder.verify(spy).useMetaFilters(List.of(META_FILTERS));\n+        inOrder.verify(spy).useExecutorService(any(ExecutorService.class));\n         inOrder.verify(embedderMonitor).usingControls(argThat(this::assertEmbedderControls));\n         inOrder.verify(bddRunContext).putRunningBatch(BATCH);\n         inOrder.verify(storyManager).runStoriesAsPaths(eq(testStoryPaths), eq(mockedFilter), argThat(\n             failures -> failures.size() == 1 && failures.containsKey(key) && failures.containsValue(throwable)));\n         inOrder.verify(bddVariableContext).clearVariables();\n         inOrder.verify(bddRunContext).removeRunningBatch();\n-        inOrder.verify(executorService).shutdownNow();", "originalCommit": "e4a1c355fbeaa5ddbf885b5162b725e420e02536", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0dc054374849dab6aa77d1d2936877287c9eca3d", "chunk": "diff --git a/vividus-bdd-engine/src/test/java/org/vividus/bdd/BatchedEmbedderTests.java b/vividus-bdd-engine/src/test/java/org/vividus/bdd/BatchedEmbedderTests.java\nindex 4dfcea08..18477d67 100644\n--- a/vividus-bdd-engine/src/test/java/org/vividus/bdd/BatchedEmbedderTests.java\n+++ b/vividus-bdd-engine/src/test/java/org/vividus/bdd/BatchedEmbedderTests.java\n\n@@ -114,14 +117,16 @@ class BatchedEmbedderTests\n         inOrder.verify(spy).processSystemProperties();\n         inOrder.verify(spy).useEmbedderControls(argThat(this::assertEmbedderControls));\n         inOrder.verify(spy).useMetaFilters(List.of(META_FILTERS));\n-        inOrder.verify(spy).useExecutorService(any(ExecutorService.class));\n         inOrder.verify(embedderMonitor).usingControls(argThat(this::assertEmbedderControls));\n+        List<ExecutorService> service = new ArrayList<>(1);\n+        inOrder.verify(spy).useExecutorService(argThat(service::add));\n         inOrder.verify(bddRunContext).putRunningBatch(BATCH);\n         inOrder.verify(storyManager).runStoriesAsPaths(eq(testStoryPaths), eq(mockedFilter), argThat(\n             failures -> failures.size() == 1 && failures.containsKey(key) && failures.containsValue(throwable)));\n         inOrder.verify(bddVariableContext).clearVariables();\n         inOrder.verify(bddRunContext).removeRunningBatch();\n-        verifyExecutorService(spy);\n+        inOrder.verifyNoMoreInteractions();\n+        verifyExecutorService(service.get(0));\n     }\n \n     @Test\n"}}, {"oid": "0dc054374849dab6aa77d1d2936877287c9eca3d", "url": "https://github.com/vividus-framework/vividus/commit/0dc054374849dab6aa77d1d2936877287c9eca3d", "message": "[bdd-enging] Append currently running batch key before thread names in logs", "committedDate": "2020-02-21T16:50:42Z", "type": "forcePushed"}, {"oid": "20b9c549c4c85d4d5a5eb0e80aa90dd5ae2b7701", "url": "https://github.com/vividus-framework/vividus/commit/20b9c549c4c85d4d5a5eb0e80aa90dd5ae2b7701", "message": "[bdd-enging] Append currently running batch key before thread names in logs", "committedDate": "2020-02-21T16:52:16Z", "type": "forcePushed"}, {"oid": "c5d600aeed3080c210b724a85cf2036175382cd3", "url": "https://github.com/vividus-framework/vividus/commit/c5d600aeed3080c210b724a85cf2036175382cd3", "message": "[bdd-enging] Append currently running batch key before thread names in logs", "committedDate": "2020-02-21T16:53:20Z", "type": "forcePushed"}, {"oid": "631bcb2076e25ec86ad37775297a6910f0eb0489", "url": "https://github.com/vividus-framework/vividus/commit/631bcb2076e25ec86ad37775297a6910f0eb0489", "message": "Append currently running batch key before thread names in logs", "committedDate": "2020-02-21T16:55:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcxOTU3OQ==", "url": "https://github.com/vividus-framework/vividus/pull/334#discussion_r382719579", "bodyText": "order -> ordered here and below", "author": "valfirst", "createdAt": "2020-02-21T17:49:47Z", "path": "vividus-bdd-engine/src/test/java/org/vividus/bdd/BatchedEmbedderTests.java", "diffHunk": "@@ -109,19 +113,20 @@ void testRunStoriesAsPathsIgnoreFailureInBatchesTrue()\n         batches.put(BATCH, testStoryPaths);\n         batches.put(\"batch-2\", List.of(\"path2\"));\n         spy.runStoriesAsPaths(batches);\n-        InOrder inOrder = inOrder(spy, embedderMonitor, storyManager, bddRunContext, bddVariableContext,\n-                executorService);\n-        inOrder.verify(spy).processSystemProperties();\n-        inOrder.verify(spy).useEmbedderControls(argThat(this::assertEmbedderControls));\n-        inOrder.verify(spy).useMetaFilters(List.of(META_FILTERS));\n-        inOrder.verify(embedderMonitor).usingControls(argThat(this::assertEmbedderControls));\n-        inOrder.verify(bddRunContext).putRunningBatch(BATCH);\n-        inOrder.verify(storyManager).runStoriesAsPaths(eq(testStoryPaths), eq(mockedFilter), argThat(\n+        InOrder order = inOrder(spy, embedderMonitor, storyManager, bddRunContext, bddVariableContext);", "originalCommit": "631bcb2076e25ec86ad37775297a6910f0eb0489", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8af1e8d9ea3728ab17cf821681bccc6e095a3ce3", "chunk": "diff --git a/vividus-bdd-engine/src/test/java/org/vividus/bdd/BatchedEmbedderTests.java b/vividus-bdd-engine/src/test/java/org/vividus/bdd/BatchedEmbedderTests.java\nindex 2e2a4394..58df5a2d 100644\n--- a/vividus-bdd-engine/src/test/java/org/vividus/bdd/BatchedEmbedderTests.java\n+++ b/vividus-bdd-engine/src/test/java/org/vividus/bdd/BatchedEmbedderTests.java\n\n@@ -113,19 +113,19 @@ class BatchedEmbedderTests\n         batches.put(BATCH, testStoryPaths);\n         batches.put(\"batch-2\", List.of(\"path2\"));\n         spy.runStoriesAsPaths(batches);\n-        InOrder order = inOrder(spy, embedderMonitor, storyManager, bddRunContext, bddVariableContext);\n-        order.verify(spy).processSystemProperties();\n-        order.verify(spy).useEmbedderControls(argThat(this::assertEmbedderControls));\n-        order.verify(spy).useMetaFilters(List.of(META_FILTERS));\n-        order.verify(embedderMonitor).usingControls(argThat(this::assertEmbedderControls));\n+        InOrder ordered = inOrder(spy, embedderMonitor, storyManager, bddRunContext, bddVariableContext);\n+        ordered.verify(spy).processSystemProperties();\n+        ordered.verify(spy).useEmbedderControls(argThat(this::assertEmbedderControls));\n+        ordered.verify(spy).useMetaFilters(List.of(META_FILTERS));\n+        ordered.verify(embedderMonitor).usingControls(argThat(this::assertEmbedderControls));\n         List<ExecutorService> service = new ArrayList<>(1);\n-        order.verify(spy).useExecutorService(argThat(service::add));\n-        order.verify(bddRunContext).putRunningBatch(BATCH);\n-        order.verify(storyManager).runStoriesAsPaths(eq(testStoryPaths), eq(mockedFilter), argThat(\n+        ordered.verify(spy).useExecutorService(argThat(service::add));\n+        ordered.verify(bddRunContext).putRunningBatch(BATCH);\n+        ordered.verify(storyManager).runStoriesAsPaths(eq(testStoryPaths), eq(mockedFilter), argThat(\n             failures -> failures.size() == 1 && failures.containsKey(key) && failures.containsValue(throwable)));\n-        order.verify(bddVariableContext).clearVariables();\n-        order.verify(bddRunContext).removeRunningBatch();\n-        order.verifyNoMoreInteractions();\n+        ordered.verify(bddVariableContext).clearVariables();\n+        ordered.verify(bddRunContext).removeRunningBatch();\n+        ordered.verifyNoMoreInteractions();\n         verifyExecutorService(service.get(0));\n     }\n \n"}}, {"oid": "8af1e8d9ea3728ab17cf821681bccc6e095a3ce3", "url": "https://github.com/vividus-framework/vividus/commit/8af1e8d9ea3728ab17cf821681bccc6e095a3ce3", "message": "Append currently running batch key before thread names in logs", "committedDate": "2020-02-21T18:29:27Z", "type": "commit"}, {"oid": "8af1e8d9ea3728ab17cf821681bccc6e095a3ce3", "url": "https://github.com/vividus-framework/vividus/commit/8af1e8d9ea3728ab17cf821681bccc6e095a3ce3", "message": "Append currently running batch key before thread names in logs", "committedDate": "2020-02-21T18:29:27Z", "type": "forcePushed"}]}