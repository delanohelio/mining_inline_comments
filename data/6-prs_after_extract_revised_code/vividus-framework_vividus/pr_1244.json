{"pr_number": 1244, "pr_title": "[extension-selenium] Add case ignoring natural and revers order", "pr_createdAt": "2020-12-16T08:49:33Z", "pr_url": "https://github.com/vividus-framework/vividus/pull/1244", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEyMTA4OA==", "url": "https://github.com/vividus-framework/vividus/pull/1244#discussion_r544121088", "bodyText": "List.of(KEY_1, KEY_2, KEY_3, KEY_4).sort(sortingOrder.getSortingType()) ?", "author": "ikalinin1", "createdAt": "2020-12-16T08:56:19Z", "path": "vividus-extension-selenium/src/test/java/org/vividus/bdd/steps/ui/model/StringSortingOrderTests.java", "diffHunk": "@@ -27,18 +28,28 @@\n \n class StringSortingOrderTests\n {\n+    private static final String KEY_1 = \"Cry Over Spilt Milk\";\n+    private static final String KEY_2 = \"an Arm and a Leg\";\n+    private static final String KEY_3 = \"A Piece of Cake\";\n+    private static final String KEY_4 = \"Beating Around the Bush\";\n+\n     private static Stream<Arguments> dataProvider()\n     {\n         return Stream.of(\n-            Arguments.of(StringSortingOrder.ASCENDING, Comparator.naturalOrder()),\n-            Arguments.of(StringSortingOrder.DESCENDING, Comparator.reverseOrder())\n+            Arguments.of(StringSortingOrder.ASCENDING, List.of(KEY_3, KEY_4, KEY_1, KEY_2)),\n+            Arguments.of(StringSortingOrder.DESCENDING, List.of(KEY_2, KEY_1, KEY_4, KEY_3)),\n+            Arguments.of(StringSortingOrder.ASCENDING_IGNORE_CASE, List.of(KEY_3, KEY_2, KEY_4, KEY_1)),\n+            Arguments.of(StringSortingOrder.DESCENDING_IGNORE_CASE, List.of(KEY_1, KEY_4, KEY_2, KEY_3))\n         );\n     }\n \n     @ParameterizedTest\n     @MethodSource(\"dataProvider\")\n-    void shouldReturnSortingComparator(StringSortingOrder sortingOrder, Comparator<? extends Comparable> comparator)\n+    void shouldReturnSortingComparator(StringSortingOrder sortingOrder, List<String> expected)\n     {\n-        assertEquals(sortingOrder.getSortingType(), comparator);\n+        List<String> sorterd = List.of(KEY_1, KEY_2, KEY_3, KEY_4).stream()\n+                                                                  .sorted(sortingOrder.getSortingType())\n+                                                                  .collect(Collectors.toList());\n+        assertEquals(expected, sorterd);", "originalCommit": "f56201e72ef387ebb503dfee237287651196318f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEyOTUyNQ==", "url": "https://github.com/vividus-framework/vividus/pull/1244#discussion_r544129525", "bodyText": "it will fail because List.of is immutable", "author": "uarlouski", "createdAt": "2020-12-16T09:09:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEyMTA4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE2MDM5OQ==", "url": "https://github.com/vividus-framework/vividus/pull/1244#discussion_r544160399", "bodyText": "Arrays.asList(...) then? :)", "author": "ikalinin1", "createdAt": "2020-12-16T09:53:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEyMTA4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE2MDg0Nw==", "url": "https://github.com/vividus-framework/vividus/pull/1244#discussion_r544160847", "bodyText": "sorterd -> sorted", "author": "ikalinin1", "createdAt": "2020-12-16T09:54:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEyMTA4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE2NjUxMQ==", "url": "https://github.com/vividus-framework/vividus/pull/1244#discussion_r544166511", "bodyText": "sort returns void, so imho sort via stream looks good", "author": "uarlouski", "createdAt": "2020-12-16T10:02:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEyMTA4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE4OTExOA==", "url": "https://github.com/vividus-framework/vividus/pull/1244#discussion_r544189118", "bodyText": "JMH time :)", "author": "ikalinin1", "createdAt": "2020-12-16T10:35:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEyMTA4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE5MTA0OQ==", "url": "https://github.com/vividus-framework/vividus/pull/1244#discussion_r544191049", "bodyText": "https://stackoverflow.com/questions/49798129/what-is-more-efficient-sorted-stream-or-sorting-a-list", "author": "ikalinin1", "createdAt": "2020-12-16T10:38:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEyMTA4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE5NTQxMg==", "url": "https://github.com/vividus-framework/vividus/pull/1244#discussion_r544195412", "bodyText": "okay, but\n\nthis is just a unit test\nlets stop using streams where we don't need parallel computations?", "author": "uarlouski", "createdAt": "2020-12-16T10:45:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEyMTA4OA=="}], "type": "inlineReview", "revised_code": {"commit": "1450168ac046f9a73404fa644712bd572850a122", "chunk": "diff --git a/vividus-extension-selenium/src/test/java/org/vividus/bdd/steps/ui/model/StringSortingOrderTests.java b/vividus-extension-selenium/src/test/java/org/vividus/bdd/steps/ui/model/StringSortingOrderTests.java\nindex ca842870..48f3a43b 100644\n--- a/vividus-extension-selenium/src/test/java/org/vividus/bdd/steps/ui/model/StringSortingOrderTests.java\n+++ b/vividus-extension-selenium/src/test/java/org/vividus/bdd/steps/ui/model/StringSortingOrderTests.java\n\n@@ -38,8 +38,8 @@ class StringSortingOrderTests\n         return Stream.of(\n             Arguments.of(StringSortingOrder.ASCENDING, List.of(KEY_3, KEY_4, KEY_1, KEY_2)),\n             Arguments.of(StringSortingOrder.DESCENDING, List.of(KEY_2, KEY_1, KEY_4, KEY_3)),\n-            Arguments.of(StringSortingOrder.ASCENDING_IGNORE_CASE, List.of(KEY_3, KEY_2, KEY_4, KEY_1)),\n-            Arguments.of(StringSortingOrder.DESCENDING_IGNORE_CASE, List.of(KEY_1, KEY_4, KEY_2, KEY_3))\n+            Arguments.of(StringSortingOrder.CASE_INSENSITIVE_ASCENDING, List.of(KEY_3, KEY_2, KEY_4, KEY_1)),\n+            Arguments.of(StringSortingOrder.CASE_INSENSITIVE_DESCENDING, List.of(KEY_1, KEY_4, KEY_2, KEY_3))\n         );\n     }\n \n"}}, {"oid": "1450168ac046f9a73404fa644712bd572850a122", "url": "https://github.com/vividus-framework/vividus/commit/1450168ac046f9a73404fa644712bd572850a122", "message": "[extension-selenium] Add case ignoring natural and revers order", "committedDate": "2020-12-16T09:22:43Z", "type": "forcePushed"}, {"oid": "f485529af6df46667e58364acaf577d0e90ed85a", "url": "https://github.com/vividus-framework/vividus/commit/f485529af6df46667e58364acaf577d0e90ed85a", "message": "[extension-selenium] Add case ignoring natural and revers order", "committedDate": "2020-12-16T09:59:53Z", "type": "forcePushed"}, {"oid": "d5f1acd3613c6cf5f45e15655aa2d5ebc6597d5c", "url": "https://github.com/vividus-framework/vividus/commit/d5f1acd3613c6cf5f45e15655aa2d5ebc6597d5c", "message": "[extension-selenium] Add case ignoring natural and reverse order", "committedDate": "2020-12-16T10:19:41Z", "type": "commit"}, {"oid": "d5f1acd3613c6cf5f45e15655aa2d5ebc6597d5c", "url": "https://github.com/vividus-framework/vividus/commit/d5f1acd3613c6cf5f45e15655aa2d5ebc6597d5c", "message": "[extension-selenium] Add case ignoring natural and reverse order", "committedDate": "2020-12-16T10:19:41Z", "type": "forcePushed"}]}