{"pr_number": 592, "pr_title": "[analytics] Introduce Vividus insight", "pr_createdAt": "2020-05-19T21:56:58Z", "pr_url": "https://github.com/vividus-framework/vividus/pull/592", "timeline": [{"oid": "26a9123dbf321ef4b06c8f9ff34deb664522e2c1", "url": "https://github.com/vividus-framework/vividus/commit/26a9123dbf321ef4b06c8f9ff34deb664522e2c1", "message": "[analytics] Introduce Vivivdus insight", "committedDate": "2020-05-19T22:02:00Z", "type": "forcePushed"}, {"oid": "2a4d409153303acf5bd18035aa2833f5e6fedfcf", "url": "https://github.com/vividus-framework/vividus/commit/2a4d409153303acf5bd18035aa2833f5e6fedfcf", "message": "[analytics] Introduce Vividus insight", "committedDate": "2020-05-19T22:36:12Z", "type": "forcePushed"}, {"oid": "55682abde25b8b77c8d75fa7cab067c3df9bd04a", "url": "https://github.com/vividus-framework/vividus/commit/55682abde25b8b77c8d75fa7cab067c3df9bd04a", "message": "[analytics] Introduce Vividus insight", "committedDate": "2020-05-20T07:01:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc5NDM1Nw==", "url": "https://github.com/vividus-framework/vividus/pull/592#discussion_r427794357", "bodyText": "double space 91 99", "author": "uarlouski", "createdAt": "2020-05-20T07:24:02Z", "path": "vividus-allure-adaptor/src/main/java/org/vividus/bdd/report/allure/plugin/VividusAnalyticsPlugin.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.report.allure.plugin;\n+\n+import java.nio.file.Path;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Predicate;\n+import java.util.stream.Stream;\n+\n+import com.google.common.eventbus.EventBus;\n+\n+import org.vividus.analytics.model.AnalyticsEvent;\n+import org.vividus.analytics.model.CustomFields;\n+\n+import io.qameta.allure.Aggregator;\n+import io.qameta.allure.core.Configuration;\n+import io.qameta.allure.core.LaunchResults;\n+import io.qameta.allure.entity.StageResult;\n+import io.qameta.allure.entity.Step;\n+import io.qameta.allure.entity.TestResult;\n+import io.qameta.allure.entity.Time;\n+\n+public class VividusAnalyticsPlugin implements Aggregator\n+{\n+    private final EventBus eventBus;\n+\n+    public VividusAnalyticsPlugin(EventBus eventBus)\n+    {\n+        this.eventBus = eventBus;\n+    }\n+\n+    @Override\n+    public void aggregate(final Configuration configuration, final List<LaunchResults> launchesResults,\n+            final Path outputDirectory)\n+    {\n+        Map<String, String> payload = new HashMap<>();\n+        CustomFields.STORIES.add(payload, Long.toString(countStories(launchesResults)));\n+        CustomFields.STEPS.add(payload, Long.toString(countSteps(launchesResults)));\n+        CustomFields.DURATION.add(payload, Long.toString(coundDuration(launchesResults)));\n+        payload.put(\"sc\", \"end\");\n+        AnalyticsEvent testFinishEvent = new AnalyticsEvent(\"finishTests\", payload);\n+        eventBus.post(testFinishEvent);\n+    }\n+\n+    private static long countStories(final List<LaunchResults> launchesResults)\n+    {\n+        return launchesResults.stream()\n+                .map(LaunchResults::getResults)\n+                .mapToLong(Collection::size)\n+                .sum();\n+    }\n+\n+    private static long countSteps(final List<LaunchResults> launchesResults)\n+    {\n+        return toSteps(launchesResults).map(Step::getName)\n+                                       .filter(filterSystemSteps())\n+                                       .count();\n+    }\n+\n+    private static Stream<Step> toSteps(final List<LaunchResults> launchesResults)\n+    {\n+        return launchesResults.stream()\n+                .map(LaunchResults::getResults)\n+                .flatMap(Set::stream)\n+                .map(TestResult::getTestStage)\n+                .map(StageResult::getSteps)\n+                .flatMap(Collection::stream);\n+    }\n+\n+    private static long coundDuration(final List<LaunchResults> launchesResults)\n+    {\n+        long millis =  toSteps(launchesResults).map(Step::getTime)\n+                                               .mapToLong(Time::getDuration)\n+                                               .sum();\n+        return TimeUnit.MILLISECONDS.toSeconds(millis);\n+    }\n+\n+    private static Predicate<String> filterSystemSteps()\n+    {\n+        return step ->  !step.startsWith(\"@Before\") && !step.startsWith(\"@After\");", "originalCommit": "55682abde25b8b77c8d75fa7cab067c3df9bd04a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a6e40a6d2cb8a1a03557621d3562a6f3f8dcddf1", "chunk": "diff --git a/vividus-allure-adaptor/src/main/java/org/vividus/bdd/report/allure/plugin/VividusAnalyticsPlugin.java b/vividus-allure-adaptor/src/main/java/org/vividus/bdd/report/allure/plugin/VividusAnalyticsPlugin.java\ndeleted file mode 100644\nindex 972af45c..00000000\n--- a/vividus-allure-adaptor/src/main/java/org/vividus/bdd/report/allure/plugin/VividusAnalyticsPlugin.java\n+++ /dev/null\n\n@@ -1,101 +0,0 @@\n-/*\n- * Copyright 2019-2020 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.vividus.bdd.report.allure.plugin;\n-\n-import java.nio.file.Path;\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.concurrent.TimeUnit;\n-import java.util.function.Predicate;\n-import java.util.stream.Stream;\n-\n-import com.google.common.eventbus.EventBus;\n-\n-import org.vividus.analytics.model.AnalyticsEvent;\n-import org.vividus.analytics.model.CustomFields;\n-\n-import io.qameta.allure.Aggregator;\n-import io.qameta.allure.core.Configuration;\n-import io.qameta.allure.core.LaunchResults;\n-import io.qameta.allure.entity.StageResult;\n-import io.qameta.allure.entity.Step;\n-import io.qameta.allure.entity.TestResult;\n-import io.qameta.allure.entity.Time;\n-\n-public class VividusAnalyticsPlugin implements Aggregator\n-{\n-    private final EventBus eventBus;\n-\n-    public VividusAnalyticsPlugin(EventBus eventBus)\n-    {\n-        this.eventBus = eventBus;\n-    }\n-\n-    @Override\n-    public void aggregate(final Configuration configuration, final List<LaunchResults> launchesResults,\n-            final Path outputDirectory)\n-    {\n-        Map<String, String> payload = new HashMap<>();\n-        CustomFields.STORIES.add(payload, Long.toString(countStories(launchesResults)));\n-        CustomFields.STEPS.add(payload, Long.toString(countSteps(launchesResults)));\n-        CustomFields.DURATION.add(payload, Long.toString(coundDuration(launchesResults)));\n-        payload.put(\"sc\", \"end\");\n-        AnalyticsEvent testFinishEvent = new AnalyticsEvent(\"finishTests\", payload);\n-        eventBus.post(testFinishEvent);\n-    }\n-\n-    private static long countStories(final List<LaunchResults> launchesResults)\n-    {\n-        return launchesResults.stream()\n-                .map(LaunchResults::getResults)\n-                .mapToLong(Collection::size)\n-                .sum();\n-    }\n-\n-    private static long countSteps(final List<LaunchResults> launchesResults)\n-    {\n-        return toSteps(launchesResults).map(Step::getName)\n-                                       .filter(filterSystemSteps())\n-                                       .count();\n-    }\n-\n-    private static Stream<Step> toSteps(final List<LaunchResults> launchesResults)\n-    {\n-        return launchesResults.stream()\n-                .map(LaunchResults::getResults)\n-                .flatMap(Set::stream)\n-                .map(TestResult::getTestStage)\n-                .map(StageResult::getSteps)\n-                .flatMap(Collection::stream);\n-    }\n-\n-    private static long coundDuration(final List<LaunchResults> launchesResults)\n-    {\n-        long millis =  toSteps(launchesResults).map(Step::getTime)\n-                                               .mapToLong(Time::getDuration)\n-                                               .sum();\n-        return TimeUnit.MILLISECONDS.toSeconds(millis);\n-    }\n-\n-    private static Predicate<String> filterSystemSteps()\n-    {\n-        return step ->  !step.startsWith(\"@Before\") && !step.startsWith(\"@After\");\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc5NjM3MQ==", "url": "https://github.com/vividus-framework/vividus/pull/592#discussion_r427796371", "bodyText": "does it make sense to introduce it through interface in case if we want to add adobe analytics or smith else?", "author": "uarlouski", "createdAt": "2020-05-20T07:27:51Z", "path": "vividus-analytics/src/main/java/org/vividus/analytics/GoogleAnalyticsFacade.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.analytics;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.codec.digest.DigestUtils;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.methods.HttpEntityEnclosingRequestBase;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.analytics.model.AnalyticsEvent;\n+import org.vividus.http.HttpMethod;\n+import org.vividus.http.client.IHttpClient;\n+\n+public class GoogleAnalyticsFacade", "originalCommit": "55682abde25b8b77c8d75fa7cab067c3df9bd04a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg1MTU0OQ==", "url": "https://github.com/vividus-framework/vividus/pull/592#discussion_r427851549", "bodyText": "most likely the API will require significant rework to make it applicable on 2 and more analytics systems, so I don't recommend to do it now", "author": "valfirst", "createdAt": "2020-05-20T08:59:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc5NjM3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "a6e40a6d2cb8a1a03557621d3562a6f3f8dcddf1", "chunk": "diff --git a/vividus-analytics/src/main/java/org/vividus/analytics/GoogleAnalyticsFacade.java b/vividus-analytics/src/main/java/org/vividus/analytics/GoogleAnalyticsFacade.java\nindex 73430f9c..0bb2b285 100644\n--- a/vividus-analytics/src/main/java/org/vividus/analytics/GoogleAnalyticsFacade.java\n+++ b/vividus-analytics/src/main/java/org/vividus/analytics/GoogleAnalyticsFacade.java\n\n@@ -41,6 +41,14 @@ import org.vividus.http.client.IHttpClient;\n \n public class GoogleAnalyticsFacade\n {\n+    private static final String CLIENT_ID = \"cid\";\n+\n+    private static final String TRACKING_ID = \"tid\";\n+\n+    private static final String HIT_TYPE = \"t\";\n+\n+    private static final String MEASUREMENT_API_VERSION = \"v\";\n+\n     private static final Pattern PROJECT_NAME_PATTERN = Pattern.compile(\"(.+)(-\\\\d.+)?(\\\\\\\\|/)?\");\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(GoogleAnalyticsFacade.class);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg1NTUxNg==", "url": "https://github.com/vividus-framework/vividus/pull/592#discussion_r427855516", "bodyText": "move all strings like \"v\" to readable constants: String VERSION = \"v\" ?", "author": "valfirst", "createdAt": "2020-05-20T09:05:42Z", "path": "vividus-analytics/src/main/java/org/vividus/analytics/GoogleAnalyticsFacade.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.analytics;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.codec.digest.DigestUtils;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.methods.HttpEntityEnclosingRequestBase;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.analytics.model.AnalyticsEvent;\n+import org.vividus.http.HttpMethod;\n+import org.vividus.http.client.IHttpClient;\n+\n+public class GoogleAnalyticsFacade\n+{\n+    private static final Pattern PROJECT_NAME_PATTERN = Pattern.compile(\"(.+)(-\\\\d.+)?(\\\\\\\\|/)?\");\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(GoogleAnalyticsFacade.class);\n+\n+    private URI analyticsUri;\n+    private String trackingId;\n+    private List<NameValuePair> defaultParameters;\n+    private final IHttpClient httpClient;\n+\n+    public GoogleAnalyticsFacade(IHttpClient httpClient)\n+    {\n+        this.httpClient = httpClient;\n+    }\n+\n+    public void init()\n+    {\n+        defaultParameters = new ArrayList<>();\n+        defaultParameters.add(pairOf(\"v\", \"1\"));", "originalCommit": "55682abde25b8b77c8d75fa7cab067c3df9bd04a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a6e40a6d2cb8a1a03557621d3562a6f3f8dcddf1", "chunk": "diff --git a/vividus-analytics/src/main/java/org/vividus/analytics/GoogleAnalyticsFacade.java b/vividus-analytics/src/main/java/org/vividus/analytics/GoogleAnalyticsFacade.java\nindex 73430f9c..0bb2b285 100644\n--- a/vividus-analytics/src/main/java/org/vividus/analytics/GoogleAnalyticsFacade.java\n+++ b/vividus-analytics/src/main/java/org/vividus/analytics/GoogleAnalyticsFacade.java\n\n@@ -41,6 +41,14 @@ import org.vividus.http.client.IHttpClient;\n \n public class GoogleAnalyticsFacade\n {\n+    private static final String CLIENT_ID = \"cid\";\n+\n+    private static final String TRACKING_ID = \"tid\";\n+\n+    private static final String HIT_TYPE = \"t\";\n+\n+    private static final String MEASUREMENT_API_VERSION = \"v\";\n+\n     private static final Pattern PROJECT_NAME_PATTERN = Pattern.compile(\"(.+)(-\\\\d.+)?(\\\\\\\\|/)?\");\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(GoogleAnalyticsFacade.class);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg1OTY3Nw==", "url": "https://github.com/vividus-framework/vividus/pull/592#discussion_r427859677", "bodyText": "I recommend to use org.apache.http.client.utils.URLEncodedUtils", "author": "valfirst", "createdAt": "2020-05-20T09:12:17Z", "path": "vividus-analytics/src/main/java/org/vividus/analytics/GoogleAnalyticsFacade.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.analytics;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.codec.digest.DigestUtils;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.methods.HttpEntityEnclosingRequestBase;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.analytics.model.AnalyticsEvent;\n+import org.vividus.http.HttpMethod;\n+import org.vividus.http.client.IHttpClient;\n+\n+public class GoogleAnalyticsFacade\n+{\n+    private static final Pattern PROJECT_NAME_PATTERN = Pattern.compile(\"(.+)(-\\\\d.+)?(\\\\\\\\|/)?\");\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(GoogleAnalyticsFacade.class);\n+\n+    private URI analyticsUri;\n+    private String trackingId;\n+    private List<NameValuePair> defaultParameters;\n+    private final IHttpClient httpClient;\n+\n+    public GoogleAnalyticsFacade(IHttpClient httpClient)\n+    {\n+        this.httpClient = httpClient;\n+    }\n+\n+    public void init()\n+    {\n+        defaultParameters = new ArrayList<>();\n+        defaultParameters.add(pairOf(\"v\", \"1\"));\n+        defaultParameters.add(pairOf(\"t\", \"event\"));\n+        defaultParameters.add(pairOf(\"tid\", trackingId));\n+        defaultParameters.add(pairOf(\"cid\", cid()));\n+    }\n+\n+    private static String cid()\n+    {\n+        String[] pathParts = System.getProperty(\"user.dir\").split(\"\\\\\\\\|/\");\n+        String projectName = pathParts[pathParts.length - 1];\n+        if (\"scripts\".equals(projectName))\n+        {\n+            projectName = PROJECT_NAME_PATTERN.matcher(pathParts[pathParts.length - 2]).replaceFirst(\"$1\");\n+        }\n+        return UUID.nameUUIDFromBytes(DigestUtils.sha512Hex(projectName).getBytes(StandardCharsets.UTF_8)).toString();\n+    }\n+\n+    public void postEvent(AnalyticsEvent analyticsEvent)\n+    {\n+        String params = Stream.concat(defaultParameters.stream(), convertToNameValuePairs(analyticsEvent))\n+                              .map(p -> p.getName() + \"=\" + p.getValue())\n+                              .collect(Collectors.joining(\"&\"));\n+        StringEntity entity = new StringEntity(params, StandardCharsets.UTF_8);\n+        post(entity);\n+    }\n+\n+    private Stream<BasicNameValuePair> convertToNameValuePairs(AnalyticsEvent analyticsEvent)\n+    {\n+        return analyticsEvent.getPayload()\n+                             .entrySet()\n+                             .stream()\n+                             .map(e -> pairOf(e.getKey(), URLEncoder.encode(e.getValue(), StandardCharsets.UTF_8)));", "originalCommit": "55682abde25b8b77c8d75fa7cab067c3df9bd04a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYwMzU4OQ==", "url": "https://github.com/vividus-framework/vividus/pull/592#discussion_r428603589", "bodyText": "Have you considered: org.apache.http.client.utils.URLEncodedUtils#format(java.util.List<? extends org.apache.http.NameValuePair>, char, java.lang.String) ?", "author": "valfirst", "createdAt": "2020-05-21T11:46:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg1OTY3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "a6e40a6d2cb8a1a03557621d3562a6f3f8dcddf1", "chunk": "diff --git a/vividus-analytics/src/main/java/org/vividus/analytics/GoogleAnalyticsFacade.java b/vividus-analytics/src/main/java/org/vividus/analytics/GoogleAnalyticsFacade.java\nindex 73430f9c..0bb2b285 100644\n--- a/vividus-analytics/src/main/java/org/vividus/analytics/GoogleAnalyticsFacade.java\n+++ b/vividus-analytics/src/main/java/org/vividus/analytics/GoogleAnalyticsFacade.java\n\n@@ -41,6 +41,14 @@ import org.vividus.http.client.IHttpClient;\n \n public class GoogleAnalyticsFacade\n {\n+    private static final String CLIENT_ID = \"cid\";\n+\n+    private static final String TRACKING_ID = \"tid\";\n+\n+    private static final String HIT_TYPE = \"t\";\n+\n+    private static final String MEASUREMENT_API_VERSION = \"v\";\n+\n     private static final Pattern PROJECT_NAME_PATTERN = Pattern.compile(\"(.+)(-\\\\d.+)?(\\\\\\\\|/)?\");\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(GoogleAnalyticsFacade.class);\n"}}, {"oid": "a6e40a6d2cb8a1a03557621d3562a6f3f8dcddf1", "url": "https://github.com/vividus-framework/vividus/commit/a6e40a6d2cb8a1a03557621d3562a6f3f8dcddf1", "message": "[analytics] Introduce Vividus insight", "committedDate": "2020-05-20T11:15:39Z", "type": "forcePushed"}, {"oid": "5a7d250c05afb6a26c7bd61a3ac2fdc7e2f8e0b9", "url": "https://github.com/vividus-framework/vividus/commit/5a7d250c05afb6a26c7bd61a3ac2fdc7e2f8e0b9", "message": "[analytics] Introduce Vividus insight", "committedDate": "2020-05-20T11:50:03Z", "type": "forcePushed"}, {"oid": "026996b14093aea3d3e1d5ebf4f357d92005d73a", "url": "https://github.com/vividus-framework/vividus/commit/026996b14093aea3d3e1d5ebf4f357d92005d73a", "message": "[analytics] Introduce Vividus insight", "committedDate": "2020-05-20T13:26:27Z", "type": "forcePushed"}, {"oid": "fbcbe05e04b06b714a0fa0f48aedf68afc2dc57b", "url": "https://github.com/vividus-framework/vividus/commit/fbcbe05e04b06b714a0fa0f48aedf68afc2dc57b", "message": "[analytics] Introduce Vividus insight", "committedDate": "2020-05-20T15:24:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEzNDU5Nw==", "url": "https://github.com/vividus-framework/vividus/pull/592#discussion_r428134597", "bodyText": "I think it makes sense to start in the very end of this method", "author": "valfirst", "createdAt": "2020-05-20T16:09:51Z", "path": "vividus-analytics/src/main/java/org/vividus/analytics/bdd/AnalyticsSteps.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.analytics.bdd;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.google.common.base.Stopwatch;\n+import com.google.common.eventbus.EventBus;\n+\n+import org.jbehave.core.annotations.AfterStories;\n+import org.jbehave.core.annotations.BeforeStories;\n+import org.vividus.analytics.AnalyticsStoryReporter;\n+import org.vividus.analytics.model.AnalyticsEvent;\n+import org.vividus.analytics.model.CustomFields;\n+import org.vividus.reporter.environment.EnvironmentConfigurer;\n+import org.vividus.reporter.environment.PropertyCategory;\n+\n+public class AnalyticsSteps\n+{\n+    private static final String SESSION_CONTROL = \"sc\";\n+\n+    private Stopwatch stopwatch;\n+\n+    private final EventBus eventBus;\n+    private final AnalyticsStoryReporter analyticsStoryReporter;\n+\n+    public AnalyticsSteps(EventBus eventBus, AnalyticsStoryReporter analyticsStoryReporter)\n+    {\n+        this.eventBus = eventBus;\n+        this.analyticsStoryReporter = analyticsStoryReporter;\n+    }\n+\n+    @BeforeStories\n+    public void beforeStories()\n+    {\n+        stopwatch = Stopwatch.createStarted();", "originalCommit": "fbcbe05e04b06b714a0fa0f48aedf68afc2dc57b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "86b2ffc562814c791eec9b920fe93f2ded371103", "chunk": "diff --git a/vividus-analytics/src/main/java/org/vividus/analytics/bdd/AnalyticsSteps.java b/vividus-analytics/src/main/java/org/vividus/analytics/bdd/AnalyticsSteps.java\nindex c42020c3..59163d38 100644\n--- a/vividus-analytics/src/main/java/org/vividus/analytics/bdd/AnalyticsSteps.java\n+++ b/vividus-analytics/src/main/java/org/vividus/analytics/bdd/AnalyticsSteps.java\n\n@@ -48,7 +48,6 @@ public class AnalyticsSteps\n     @BeforeStories\n     public void beforeStories()\n     {\n-        stopwatch = Stopwatch.createStarted();\n         Map<String, String> properties = new HashMap<>();\n         Map<String, String> configuration = getEnvironmentProperties(PropertyCategory.CONFIGURATION);\n         Map<String, String> modules = getEnvironmentProperties(PropertyCategory.VIVIDUS);\n"}}, {"oid": "86b2ffc562814c791eec9b920fe93f2ded371103", "url": "https://github.com/vividus-framework/vividus/commit/86b2ffc562814c791eec9b920fe93f2ded371103", "message": "[analytics] Introduce Vividus insight", "committedDate": "2020-05-20T20:29:49Z", "type": "forcePushed"}, {"oid": "90459bfab4960ea3664b20461b8e1182e7ce2d3c", "url": "https://github.com/vividus-framework/vividus/commit/90459bfab4960ea3664b20461b8e1182e7ce2d3c", "message": "[analytics] Introduce Vividus insight", "committedDate": "2020-05-21T08:13:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU5NjczMw==", "url": "https://github.com/vividus-framework/vividus/pull/592#discussion_r428596733", "bodyText": "isSystem -> processSystemStory - to show that method also do processing", "author": "valfirst", "createdAt": "2020-05-21T11:29:41Z", "path": "vividus-analytics/src/main/java/org/vividus/analytics/AnalyticsStoryReporter.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.analytics;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import com.google.common.base.Stopwatch;\n+import com.google.common.eventbus.EventBus;\n+\n+import org.jbehave.core.model.Scenario;\n+import org.jbehave.core.model.Story;\n+import org.jbehave.core.reporters.NullStoryReporter;\n+import org.vividus.analytics.model.AnalyticsEvent;\n+import org.vividus.analytics.model.CustomFields;\n+import org.vividus.reporter.environment.EnvironmentConfigurer;\n+import org.vividus.reporter.environment.PropertyCategory;\n+\n+public class AnalyticsStoryReporter extends NullStoryReporter\n+{\n+    private static final AtomicLong STORIES = new AtomicLong();\n+    private static final AtomicLong SCENARIOS = new AtomicLong();\n+    private static final AtomicLong STEPS = new AtomicLong();\n+\n+    private static final String SESSION_CONTROL = \"sc\";\n+\n+    private Stopwatch stopwatch;\n+\n+    private final EventBus eventBus;\n+\n+    public AnalyticsStoryReporter(EventBus eventBus)\n+    {\n+        this.eventBus = eventBus;\n+    }\n+\n+    @Override\n+    public void beforeStory(Story story, boolean givenStory)\n+    {\n+        if (isSystem(story.getPath()))\n+        {\n+            return;\n+        }\n+        STORIES.incrementAndGet();\n+    }\n+\n+    @Override\n+    public void beforeScenario(Scenario scenario)\n+    {\n+        SCENARIOS.incrementAndGet();\n+    }\n+\n+    @Override\n+    public void beforeStep(String step)\n+    {\n+        STEPS.incrementAndGet();\n+    }\n+\n+    private void beforeStories()\n+    {\n+        Map<String, String> payload = new HashMap<>();\n+        Map<String, String> configuration = getEnvironmentProperties(PropertyCategory.CONFIGURATION);\n+        Map<String, String> modules = getEnvironmentProperties(PropertyCategory.VIVIDUS);\n+\n+        CustomFields.PROFILE.add(payload, configuration.get(\"Profiles\"));\n+        CustomFields.JAVA.add(payload, Runtime.version().toString());\n+        CustomFields.VIVIDUS.add(payload, modules.getOrDefault(\"vividus\", \"0.0.0-SNAPSHOT\"));\n+        CustomFields.REMOTE.add(payload, getEnvironmentProperties(PropertyCategory.PROFILE).get(\"Remote Execution\"));\n+        payload.put(SESSION_CONTROL, \"start\");\n+        eventBus.post(new AnalyticsEvent(\"startTests\", payload));\n+\n+        postPluginsAnalytic(modules);\n+        stopwatch = Stopwatch.createStarted();\n+    }\n+\n+    private void postPluginsAnalytic(Map<String, String> modules)\n+    {\n+        modules.forEach((k, v) -> {\n+            if (k.startsWith(\"vividus-plugin-\"))\n+            {\n+                Map<String, String> payload = new HashMap<>();\n+                CustomFields.PLUGIN_VERSION.add(payload, v);\n+                eventBus.post(new AnalyticsEvent(k, \"use\", payload));\n+            }\n+        });\n+    }\n+\n+    public void afterStories()\n+    {\n+        long duration = stopwatch.elapsed().toSeconds();\n+        Map<String, String> payload = new HashMap<>();\n+        CustomFields.STORIES.add(payload, stringify(STORIES.get()));\n+        CustomFields.SCENARIOS.add(payload, stringify(SCENARIOS.get()));\n+        CustomFields.STEPS.add(payload, stringify(STEPS.get()));\n+        CustomFields.DURATION.add(payload, stringify(duration));\n+        payload.put(SESSION_CONTROL, \"end\");\n+        AnalyticsEvent testFinishEvent = new AnalyticsEvent(\"finishTests\", payload);\n+        eventBus.post(testFinishEvent);\n+    }\n+\n+    private String stringify(long toConvert)\n+    {\n+        return Long.toString(toConvert);\n+    }\n+\n+    private Map<String, String> getEnvironmentProperties(PropertyCategory propertyCategory)\n+    {\n+        return EnvironmentConfigurer.ENVIRONMENT_CONFIGURATION.get(propertyCategory);\n+    }\n+\n+    private boolean isSystem(String story)", "originalCommit": "90459bfab4960ea3664b20461b8e1182e7ce2d3c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b551cd36da1b609eec63e041bb26f8a25034efda", "chunk": "diff --git a/vividus-analytics/src/main/java/org/vividus/analytics/AnalyticsStoryReporter.java b/vividus-analytics/src/main/java/org/vividus/analytics/AnalyticsStoryReporter.java\nindex eddcae3f..7c391a3f 100644\n--- a/vividus-analytics/src/main/java/org/vividus/analytics/AnalyticsStoryReporter.java\n+++ b/vividus-analytics/src/main/java/org/vividus/analytics/AnalyticsStoryReporter.java\n\n@@ -27,7 +27,7 @@ import org.jbehave.core.model.Scenario;\n import org.jbehave.core.model.Story;\n import org.jbehave.core.reporters.NullStoryReporter;\n import org.vividus.analytics.model.AnalyticsEvent;\n-import org.vividus.analytics.model.CustomFields;\n+import org.vividus.analytics.model.CustomDefinitions;\n import org.vividus.reporter.environment.EnvironmentConfigurer;\n import org.vividus.reporter.environment.PropertyCategory;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU5ODc4OA==", "url": "https://github.com/vividus-framework/vividus/pull/592#discussion_r428598788", "bodyText": "add exception message to log", "author": "valfirst", "createdAt": "2020-05-21T11:34:37Z", "path": "vividus-analytics/src/main/java/org/vividus/analytics/GoogleAnalyticsFacade.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.analytics;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.codec.digest.DigestUtils;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.methods.HttpEntityEnclosingRequestBase;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.analytics.model.AnalyticsEvent;\n+import org.vividus.http.HttpMethod;\n+import org.vividus.http.client.IHttpClient;\n+\n+public class GoogleAnalyticsFacade\n+{\n+    private static final String CLIENT_ID = \"cid\";\n+\n+    private static final String TRACKING_ID = \"tid\";\n+\n+    private static final String HIT_TYPE = \"t\";\n+\n+    private static final String MEASUREMENT_API_VERSION = \"v\";\n+\n+    private static final Pattern PROJECT_NAME_PATTERN = Pattern.compile(\"(.+)(-\\\\d.+)?(\\\\\\\\|/)?\");\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(GoogleAnalyticsFacade.class);\n+\n+    private URI analyticsUri;\n+    private String trackingId;\n+    private List<NameValuePair> defaultParameters;\n+    private final IHttpClient httpClient;\n+\n+    public GoogleAnalyticsFacade(IHttpClient httpClient)\n+    {\n+        this.httpClient = httpClient;\n+    }\n+\n+    public void init()\n+    {\n+        defaultParameters = new ArrayList<>();\n+        defaultParameters.add(pairOf(MEASUREMENT_API_VERSION, \"1\"));\n+        defaultParameters.add(pairOf(HIT_TYPE, \"event\"));\n+        defaultParameters.add(pairOf(TRACKING_ID, trackingId));\n+        defaultParameters.add(pairOf(CLIENT_ID, cid()));\n+    }\n+\n+    private static String cid()\n+    {\n+        String[] pathParts = System.getProperty(\"user.dir\").split(\"\\\\\\\\|/\");\n+        String projectName = pathParts[pathParts.length - 1];\n+        if (\"scripts\".equals(projectName))\n+        {\n+            projectName = PROJECT_NAME_PATTERN.matcher(pathParts[pathParts.length - 2]).replaceFirst(\"$1\");\n+        }\n+        return UUID.nameUUIDFromBytes(DigestUtils.sha512Hex(projectName).getBytes(StandardCharsets.UTF_8)).toString();\n+    }\n+\n+    public void postEvent(AnalyticsEvent analyticsEvent)\n+    {\n+        String params = Stream.concat(defaultParameters.stream(), convertToNameValuePairs(analyticsEvent))\n+                              .map(p -> p.getName() + \"=\" + p.getValue())\n+                              .collect(Collectors.joining(\"&\"));\n+        StringEntity entity = new StringEntity(params, StandardCharsets.UTF_8);\n+        post(entity);\n+    }\n+\n+    private Stream<BasicNameValuePair> convertToNameValuePairs(AnalyticsEvent analyticsEvent)\n+    {\n+        return analyticsEvent.getPayload()\n+                             .entrySet()\n+                             .stream()\n+                             .map(e -> pairOf(e.getKey(), URLEncoder.encode(e.getValue(), StandardCharsets.UTF_8)));\n+    }\n+\n+    private BasicNameValuePair pairOf(String key, String value)\n+    {\n+        return new BasicNameValuePair(key, value);\n+    }\n+\n+    private void post(HttpEntity entity)\n+    {\n+        try\n+        {\n+            HttpEntityEnclosingRequestBase createEntityEnclosingRequest = HttpMethod.POST\n+                    .createEntityEnclosingRequest(analyticsUri, entity);\n+            createEntityEnclosingRequest.setHeader(\"User-Agent\", \"\");\n+            httpClient.execute(createEntityEnclosingRequest);\n+        }\n+        catch (IOException e)\n+        {\n+            LOGGER.info(\"Unable to send analytics\");", "originalCommit": "90459bfab4960ea3664b20461b8e1182e7ce2d3c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b551cd36da1b609eec63e041bb26f8a25034efda", "chunk": "diff --git a/vividus-analytics/src/main/java/org/vividus/analytics/GoogleAnalyticsFacade.java b/vividus-analytics/src/main/java/org/vividus/analytics/GoogleAnalyticsFacade.java\nindex 0bb2b285..3ecd0a7b 100644\n--- a/vividus-analytics/src/main/java/org/vividus/analytics/GoogleAnalyticsFacade.java\n+++ b/vividus-analytics/src/main/java/org/vividus/analytics/GoogleAnalyticsFacade.java\n\n@@ -16,21 +16,22 @@\n \n package org.vividus.analytics;\n \n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n import java.io.IOException;\n import java.net.URI;\n-import java.net.URLEncoder;\n import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.UUID;\n import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n \n import org.apache.commons.codec.digest.DigestUtils;\n import org.apache.http.HttpEntity;\n import org.apache.http.NameValuePair;\n import org.apache.http.client.methods.HttpEntityEnclosingRequestBase;\n+import org.apache.http.client.utils.URLEncodedUtils;\n import org.apache.http.entity.StringEntity;\n import org.apache.http.message.BasicNameValuePair;\n import org.slf4j.Logger;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU5OTA1Ng==", "url": "https://github.com/vividus-framework/vividus/pull/592#discussion_r428599056", "bodyText": "PROFILES - as we allow to set several profiles", "author": "valfirst", "createdAt": "2020-05-21T11:35:17Z", "path": "vividus-analytics/src/main/java/org/vividus/analytics/model/CustomFields.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.analytics.model;\n+\n+import java.util.Map;\n+\n+public enum CustomFields\n+{\n+    PROFILE(\"cd1\"),", "originalCommit": "90459bfab4960ea3664b20461b8e1182e7ce2d3c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b551cd36da1b609eec63e041bb26f8a25034efda", "chunk": "diff --git a/vividus-analytics/src/main/java/org/vividus/analytics/model/CustomFields.java b/vividus-analytics/src/main/java/org/vividus/analytics/model/CustomDefinitions.java\nsimilarity index 91%\nrename from vividus-analytics/src/main/java/org/vividus/analytics/model/CustomFields.java\nrename to vividus-analytics/src/main/java/org/vividus/analytics/model/CustomDefinitions.java\nindex 864204fd..aa67a45e 100644\n--- a/vividus-analytics/src/main/java/org/vividus/analytics/model/CustomFields.java\n+++ b/vividus-analytics/src/main/java/org/vividus/analytics/model/CustomDefinitions.java\n\n@@ -18,9 +18,9 @@ package org.vividus.analytics.model;\n \n import java.util.Map;\n \n-public enum CustomFields\n+public enum CustomDefinitions\n {\n-    PROFILE(\"cd1\"),\n+    PROFILES(\"cd1\"),\n     JAVA(\"cd2\"),\n     VIVIDUS(\"cd3\"),\n     REMOTE(\"cd4\"),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU5OTU4Nw==", "url": "https://github.com/vividus-framework/vividus/pull/592#discussion_r428599587", "bodyText": "\"0.0.0-SNAPSHOT\" -> \"not detected\"?", "author": "valfirst", "createdAt": "2020-05-21T11:36:30Z", "path": "vividus-analytics/src/main/java/org/vividus/analytics/AnalyticsStoryReporter.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.analytics;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import com.google.common.base.Stopwatch;\n+import com.google.common.eventbus.EventBus;\n+\n+import org.jbehave.core.model.Scenario;\n+import org.jbehave.core.model.Story;\n+import org.jbehave.core.reporters.NullStoryReporter;\n+import org.vividus.analytics.model.AnalyticsEvent;\n+import org.vividus.analytics.model.CustomFields;\n+import org.vividus.reporter.environment.EnvironmentConfigurer;\n+import org.vividus.reporter.environment.PropertyCategory;\n+\n+public class AnalyticsStoryReporter extends NullStoryReporter\n+{\n+    private static final AtomicLong STORIES = new AtomicLong();\n+    private static final AtomicLong SCENARIOS = new AtomicLong();\n+    private static final AtomicLong STEPS = new AtomicLong();\n+\n+    private static final String SESSION_CONTROL = \"sc\";\n+\n+    private Stopwatch stopwatch;\n+\n+    private final EventBus eventBus;\n+\n+    public AnalyticsStoryReporter(EventBus eventBus)\n+    {\n+        this.eventBus = eventBus;\n+    }\n+\n+    @Override\n+    public void beforeStory(Story story, boolean givenStory)\n+    {\n+        if (isSystem(story.getPath()))\n+        {\n+            return;\n+        }\n+        STORIES.incrementAndGet();\n+    }\n+\n+    @Override\n+    public void beforeScenario(Scenario scenario)\n+    {\n+        SCENARIOS.incrementAndGet();\n+    }\n+\n+    @Override\n+    public void beforeStep(String step)\n+    {\n+        STEPS.incrementAndGet();\n+    }\n+\n+    private void beforeStories()\n+    {\n+        Map<String, String> payload = new HashMap<>();\n+        Map<String, String> configuration = getEnvironmentProperties(PropertyCategory.CONFIGURATION);\n+        Map<String, String> modules = getEnvironmentProperties(PropertyCategory.VIVIDUS);\n+\n+        CustomFields.PROFILE.add(payload, configuration.get(\"Profiles\"));\n+        CustomFields.JAVA.add(payload, Runtime.version().toString());\n+        CustomFields.VIVIDUS.add(payload, modules.getOrDefault(\"vividus\", \"0.0.0-SNAPSHOT\"));", "originalCommit": "90459bfab4960ea3664b20461b8e1182e7ce2d3c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b551cd36da1b609eec63e041bb26f8a25034efda", "chunk": "diff --git a/vividus-analytics/src/main/java/org/vividus/analytics/AnalyticsStoryReporter.java b/vividus-analytics/src/main/java/org/vividus/analytics/AnalyticsStoryReporter.java\nindex eddcae3f..7c391a3f 100644\n--- a/vividus-analytics/src/main/java/org/vividus/analytics/AnalyticsStoryReporter.java\n+++ b/vividus-analytics/src/main/java/org/vividus/analytics/AnalyticsStoryReporter.java\n\n@@ -27,7 +27,7 @@ import org.jbehave.core.model.Scenario;\n import org.jbehave.core.model.Story;\n import org.jbehave.core.reporters.NullStoryReporter;\n import org.vividus.analytics.model.AnalyticsEvent;\n-import org.vividus.analytics.model.CustomFields;\n+import org.vividus.analytics.model.CustomDefinitions;\n import org.vividus.reporter.environment.EnvironmentConfigurer;\n import org.vividus.reporter.environment.PropertyCategory;\n \n"}}, {"oid": "b551cd36da1b609eec63e041bb26f8a25034efda", "url": "https://github.com/vividus-framework/vividus/commit/b551cd36da1b609eec63e041bb26f8a25034efda", "message": "[analytics] Introduce Vividus insight", "committedDate": "2020-05-21T12:15:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY1NDA5OA==", "url": "https://github.com/vividus-framework/vividus/pull/592#discussion_r428654098", "bodyText": "why not Atomic Long instance.toString()?", "author": "uarlouski", "createdAt": "2020-05-21T13:34:27Z", "path": "vividus-analytics/src/main/java/org/vividus/analytics/AnalyticsStoryReporter.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.analytics;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import com.google.common.base.Stopwatch;\n+import com.google.common.eventbus.EventBus;\n+\n+import org.jbehave.core.model.Scenario;\n+import org.jbehave.core.model.Story;\n+import org.jbehave.core.reporters.NullStoryReporter;\n+import org.vividus.analytics.model.AnalyticsEvent;\n+import org.vividus.analytics.model.CustomDefinitions;\n+import org.vividus.reporter.environment.EnvironmentConfigurer;\n+import org.vividus.reporter.environment.PropertyCategory;\n+\n+public class AnalyticsStoryReporter extends NullStoryReporter\n+{\n+    private static final AtomicLong STORIES = new AtomicLong();\n+    private static final AtomicLong SCENARIOS = new AtomicLong();\n+    private static final AtomicLong STEPS = new AtomicLong();\n+\n+    private static final String SESSION_CONTROL = \"sc\";\n+\n+    private Stopwatch stopwatch;\n+\n+    private final EventBus eventBus;\n+\n+    public AnalyticsStoryReporter(EventBus eventBus)\n+    {\n+        this.eventBus = eventBus;\n+    }\n+\n+    @Override\n+    public void beforeStory(Story story, boolean givenStory)\n+    {\n+        if (processSystemStory(story.getPath()))\n+        {\n+            return;\n+        }\n+        STORIES.incrementAndGet();\n+    }\n+\n+    @Override\n+    public void beforeScenario(Scenario scenario)\n+    {\n+        SCENARIOS.incrementAndGet();\n+    }\n+\n+    @Override\n+    public void beforeStep(String step)\n+    {\n+        STEPS.incrementAndGet();\n+    }\n+\n+    private void beforeStories()\n+    {\n+        Map<String, String> payload = new HashMap<>();\n+        Map<String, String> configuration = getEnvironmentProperties(PropertyCategory.CONFIGURATION);\n+        Map<String, String> modules = getEnvironmentProperties(PropertyCategory.VIVIDUS);\n+\n+        CustomDefinitions.PROFILES.add(payload, configuration.get(\"Profiles\"));\n+        CustomDefinitions.JAVA.add(payload, Runtime.version().toString());\n+        CustomDefinitions.VIVIDUS.add(payload, modules.getOrDefault(\"vividus\", \"not detected\"));\n+        CustomDefinitions.REMOTE.add(payload,\n+                getEnvironmentProperties(PropertyCategory.PROFILE).get(\"Remote Execution\"));\n+        payload.put(SESSION_CONTROL, \"start\");\n+        eventBus.post(new AnalyticsEvent(\"startTests\", payload));\n+\n+        postPluginsAnalytic(modules);\n+        stopwatch = Stopwatch.createStarted();\n+    }\n+\n+    private void postPluginsAnalytic(Map<String, String> modules)\n+    {\n+        modules.forEach((k, v) -> {\n+            if (k.startsWith(\"vividus-plugin-\"))\n+            {\n+                Map<String, String> payload = new HashMap<>();\n+                CustomDefinitions.PLUGIN_VERSION.add(payload, v);\n+                eventBus.post(new AnalyticsEvent(k, \"use\", payload));\n+            }\n+        });\n+    }\n+\n+    public void afterStories()\n+    {\n+        long duration = stopwatch.elapsed().toSeconds();\n+        Map<String, String> payload = new HashMap<>();\n+        CustomDefinitions.STORIES.add(payload, stringify(STORIES.get()));", "originalCommit": "b551cd36da1b609eec63e041bb26f8a25034efda", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c53605881d558b55d0e4b3ea25de44f4bb6a0e81", "chunk": "diff --git a/vividus-analytics/src/main/java/org/vividus/analytics/AnalyticsStoryReporter.java b/vividus-analytics/src/main/java/org/vividus/analytics/AnalyticsStoryReporter.java\nindex 7c391a3f..3a009d6c 100644\n--- a/vividus-analytics/src/main/java/org/vividus/analytics/AnalyticsStoryReporter.java\n+++ b/vividus-analytics/src/main/java/org/vividus/analytics/AnalyticsStoryReporter.java\n\n@@ -104,20 +104,15 @@ public class AnalyticsStoryReporter extends NullStoryReporter\n     {\n         long duration = stopwatch.elapsed().toSeconds();\n         Map<String, String> payload = new HashMap<>();\n-        CustomDefinitions.STORIES.add(payload, stringify(STORIES.get()));\n-        CustomDefinitions.SCENARIOS.add(payload, stringify(SCENARIOS.get()));\n-        CustomDefinitions.STEPS.add(payload, stringify(STEPS.get()));\n-        CustomDefinitions.DURATION.add(payload, stringify(duration));\n+        CustomDefinitions.STORIES.add(payload, STORIES.toString());\n+        CustomDefinitions.SCENARIOS.add(payload, SCENARIOS.toString());\n+        CustomDefinitions.STEPS.add(payload, STEPS.toString());\n+        CustomDefinitions.DURATION.add(payload, Long.toString(duration));\n         payload.put(SESSION_CONTROL, \"end\");\n         AnalyticsEvent testFinishEvent = new AnalyticsEvent(\"finishTests\", payload);\n         eventBus.post(testFinishEvent);\n     }\n \n-    private String stringify(long toConvert)\n-    {\n-        return Long.toString(toConvert);\n-    }\n-\n     private Map<String, String> getEnvironmentProperties(PropertyCategory propertyCategory)\n     {\n         return EnvironmentConfigurer.ENVIRONMENT_CONFIGURATION.get(propertyCategory);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY1NzgzMA==", "url": "https://github.com/vividus-framework/vividus/pull/592#discussion_r428657830", "bodyText": "just interesting why is it needed?", "author": "uarlouski", "createdAt": "2020-05-21T13:40:58Z", "path": "vividus-analytics/src/main/java/org/vividus/analytics/GoogleAnalyticsFacade.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.analytics;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.codec.digest.DigestUtils;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.methods.HttpEntityEnclosingRequestBase;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.analytics.model.AnalyticsEvent;\n+import org.vividus.http.HttpMethod;\n+import org.vividus.http.client.IHttpClient;\n+\n+public class GoogleAnalyticsFacade\n+{\n+    private static final String CLIENT_ID = \"cid\";\n+\n+    private static final String TRACKING_ID = \"tid\";\n+\n+    private static final String HIT_TYPE = \"t\";\n+\n+    private static final String MEASUREMENT_API_VERSION = \"v\";\n+\n+    private static final Pattern PROJECT_NAME_PATTERN = Pattern.compile(\"(.+)(-\\\\d.+)?(\\\\\\\\|/)?\");\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(GoogleAnalyticsFacade.class);\n+\n+    private URI analyticsUri;\n+    private String trackingId;\n+    private List<NameValuePair> defaultParameters;\n+    private final IHttpClient httpClient;\n+\n+    public GoogleAnalyticsFacade(IHttpClient httpClient)\n+    {\n+        this.httpClient = httpClient;\n+    }\n+\n+    public void init()\n+    {\n+        defaultParameters = new ArrayList<>();\n+        defaultParameters.add(pairOf(MEASUREMENT_API_VERSION, \"1\"));\n+        defaultParameters.add(pairOf(HIT_TYPE, \"event\"));\n+        defaultParameters.add(pairOf(TRACKING_ID, trackingId));\n+        defaultParameters.add(pairOf(CLIENT_ID, cid()));\n+    }\n+\n+    private static String cid()\n+    {\n+        String[] pathParts = System.getProperty(\"user.dir\").split(\"\\\\\\\\|/\");\n+        String projectName = pathParts[pathParts.length - 1];\n+        if (\"scripts\".equals(projectName))\n+        {\n+            projectName = PROJECT_NAME_PATTERN.matcher(pathParts[pathParts.length - 2]).replaceFirst(\"$1\");\n+        }\n+        return UUID.nameUUIDFromBytes(DigestUtils.sha512Hex(projectName).getBytes(StandardCharsets.UTF_8)).toString();\n+    }\n+\n+    public void postEvent(AnalyticsEvent analyticsEvent)\n+    {\n+        List<NameValuePair> params = new ArrayList<>();\n+        params.addAll(defaultParameters);\n+        params.addAll(convertToNameValuePairs(analyticsEvent));\n+        StringEntity entity = new StringEntity(URLEncodedUtils.format(params, UTF_8),\n+                UTF_8);\n+        post(entity);\n+    }\n+\n+    private List<BasicNameValuePair> convertToNameValuePairs(AnalyticsEvent analyticsEvent)\n+    {\n+        return analyticsEvent.getPayload()\n+                             .entrySet()\n+                             .stream()\n+                             .map(e -> pairOf(e.getKey(), e.getValue()))\n+                             .collect(Collectors.toList());\n+    }\n+\n+    private BasicNameValuePair pairOf(String key, String value)\n+    {\n+        return new BasicNameValuePair(key, value);\n+    }\n+\n+    private void post(HttpEntity entity)\n+    {\n+        try\n+        {\n+            HttpEntityEnclosingRequestBase createEntityEnclosingRequest = HttpMethod.POST\n+                    .createEntityEnclosingRequest(analyticsUri, entity);\n+            createEntityEnclosingRequest.setHeader(\"User-Agent\", \"\");", "originalCommit": "b551cd36da1b609eec63e041bb26f8a25034efda", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY3NzEwMg==", "url": "https://github.com/vividus-framework/vividus/pull/592#discussion_r428677102", "bodyText": "It looks like analytics is missing some events with our User-Agent\nIt is used to calculate statistics we are no interested in;", "author": "ikalinin1", "createdAt": "2020-05-21T14:12:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY1NzgzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY3NzkxMQ==", "url": "https://github.com/vividus-framework/vividus/pull/592#discussion_r428677911", "bodyText": "Just in case we could send User-Agent via Measurement Protocol and it will be used to calculate what browser is used, but we track profiles not the browsers;", "author": "ikalinin1", "createdAt": "2020-05-21T14:14:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY1NzgzMA=="}], "type": "inlineReview", "revised_code": {"commit": "50296edc725c877ad4234242613240e009b60b16", "chunk": "diff --git a/vividus-analytics/src/main/java/org/vividus/analytics/GoogleAnalyticsFacade.java b/vividus-analytics/src/main/java/org/vividus/analytics/GoogleAnalyticsFacade.java\nindex 3ecd0a7b..17b7e9c8 100644\n--- a/vividus-analytics/src/main/java/org/vividus/analytics/GoogleAnalyticsFacade.java\n+++ b/vividus-analytics/src/main/java/org/vividus/analytics/GoogleAnalyticsFacade.java\n\n@@ -112,10 +112,10 @@ public class GoogleAnalyticsFacade\n     {\n         try\n         {\n-            HttpEntityEnclosingRequestBase createEntityEnclosingRequest = HttpMethod.POST\n+            HttpEntityEnclosingRequestBase post = HttpMethod.POST\n                     .createEntityEnclosingRequest(analyticsUri, entity);\n-            createEntityEnclosingRequest.setHeader(\"User-Agent\", \"\");\n-            httpClient.execute(createEntityEnclosingRequest);\n+            post.setHeader(\"User-Agent\", \"\");\n+            httpClient.execute(post);\n         }\n         catch (IOException e)\n         {\n"}}, {"oid": "c53605881d558b55d0e4b3ea25de44f4bb6a0e81", "url": "https://github.com/vividus-framework/vividus/commit/c53605881d558b55d0e4b3ea25de44f4bb6a0e81", "message": "[analytics] Introduce Vividus insight", "committedDate": "2020-05-21T14:05:05Z", "type": "forcePushed"}, {"oid": "50296edc725c877ad4234242613240e009b60b16", "url": "https://github.com/vividus-framework/vividus/commit/50296edc725c877ad4234242613240e009b60b16", "message": "[analytics] Introduce Vividus insight", "committedDate": "2020-05-22T07:30:26Z", "type": "commit"}, {"oid": "50296edc725c877ad4234242613240e009b60b16", "url": "https://github.com/vividus-framework/vividus/commit/50296edc725c877ad4234242613240e009b60b16", "message": "[analytics] Introduce Vividus insight", "committedDate": "2020-05-22T07:30:26Z", "type": "forcePushed"}]}