{"pr_number": 392, "pr_title": "Add ability to configure proxy host and port", "pr_createdAt": "2020-03-14T19:44:35Z", "pr_url": "https://github.com/vividus-framework/vividus/pull/392", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY2MDk0OQ==", "url": "https://github.com/vividus-framework/vividus/pull/392#discussion_r392660949", "bodyText": "the valid port range is 0-65535, shouldn't IntegerRange be renamed to PortsRange? (also additional validations should be added)", "author": "valfirst", "createdAt": "2020-03-15T10:37:26Z", "path": "vividus-plugin-web-app/src/test/java/org/vividus/spring/StringToIntegerRangeConverterTests.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.spring;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.params.provider.Arguments.arguments;\n+\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.vividus.model.IntegerRange;\n+\n+class StringToIntegerRangeConverterTests\n+{\n+    private final StringToIntegerRangeConverter converter = new StringToIntegerRangeConverter();\n+\n+    static Stream<Arguments> rangeSource()\n+    {\n+        return Stream.of(\n+                arguments(\"0..5\", List.of(0, 1, 2, 3, 4, 5)),\n+                arguments(\"4,5\", List.of(4, 5)),\n+                arguments(\"-1..4,3..6\", List.of(-1, 0, 1, 2, 3, 4, 5, 6)),\n+                arguments(\"3..6,-1..4\", List.of(3, 4, 5, 6, -1, 0, 1, 2))", "originalCommit": "11707c7ad2f95ff943348ff230225695dd4c5dfd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY2NTA4OA==", "url": "https://github.com/vividus-framework/vividus/pull/392#discussion_r392665088", "bodyText": "The IntegerRange itself I wanted to make generic, as to port verification that's verified in underlying layer by java.net.InetSocketAddress.checkPort(int)", "author": "uarlouski", "createdAt": "2020-03-15T11:35:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY2MDk0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY2NTUzNw==", "url": "https://github.com/vividus-framework/vividus/pull/392#discussion_r392665537", "bodyText": "agree, it's better to check ports before they are pulled from the ports pool", "author": "uarlouski", "createdAt": "2020-03-15T11:41:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY2MDk0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "c8bf8b7d36f6065aa5aa22fd0894b6533e13a728", "chunk": "diff --git a/vividus-plugin-web-app/src/test/java/org/vividus/spring/StringToIntegerRangeConverterTests.java b/vividus-plugin-web-app/src/test/java/org/vividus/spring/StringToIntegerRangeConverterTests.java\nindex 6ef0199c5..91028fe22 100644\n--- a/vividus-plugin-web-app/src/test/java/org/vividus/spring/StringToIntegerRangeConverterTests.java\n+++ b/vividus-plugin-web-app/src/test/java/org/vividus/spring/StringToIntegerRangeConverterTests.java\n\n@@ -20,7 +20,7 @@ import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertThrows;\n import static org.junit.jupiter.params.provider.Arguments.arguments;\n \n-import java.util.List;\n+import java.util.Set;\n import java.util.stream.Stream;\n \n import org.junit.jupiter.api.Test;\n"}}, {"oid": "15497f37aae2898af62c9c79a74b4f11e665752c", "url": "https://github.com/vividus-framework/vividus/commit/15497f37aae2898af62c9c79a74b4f11e665752c", "message": "Add ability to configure proxy host and port\n- proxy.host - proxy host, default value is localhost\n- proxy.ports - proxy port, default value is 0 (random port)", "committedDate": "2020-03-15T11:55:02Z", "type": "forcePushed"}, {"oid": "ff481539b1e77a970a26d5e35773daa3bb2de549", "url": "https://github.com/vividus-framework/vividus/commit/ff481539b1e77a970a26d5e35773daa3bb2de549", "message": "Add ability to configure proxy host and port\n- proxy.host - proxy host, default value is localhost\n- proxy.ports - proxy port, default value is 0 (random port)", "committedDate": "2020-03-15T12:32:24Z", "type": "forcePushed"}, {"oid": "4e8e7743fb5e18ba341b8ea0891653870017ed44", "url": "https://github.com/vividus-framework/vividus/commit/4e8e7743fb5e18ba341b8ea0891653870017ed44", "message": "Add ability to configure proxy host and port\n- proxy.host - proxy host, default value is localhost\n- proxy.ports - proxy port, default value is 0 (random port)", "committedDate": "2020-03-15T16:44:39Z", "type": "forcePushed"}, {"oid": "5e6970d1827a11f62ff51e2abacff4076d276a20", "url": "https://github.com/vividus-framework/vividus/commit/5e6970d1827a11f62ff51e2abacff4076d276a20", "message": "Add ability to configure proxy host and port\n- proxy.host - proxy host, default value is localhost\n- proxy.ports - proxy port, default value is 0 (random port)", "committedDate": "2020-03-15T18:03:01Z", "type": "forcePushed"}, {"oid": "780d1ba62c74ef0588ca6702d4729d12f5ad96ac", "url": "https://github.com/vividus-framework/vividus/commit/780d1ba62c74ef0588ca6702d4729d12f5ad96ac", "message": "Add ability to configure proxy host and port\n- proxy.host - proxy host, default value is localhost\n- proxy.ports - proxy port, default value is 0 (random port)", "committedDate": "2020-03-15T18:38:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjcwMzY5Nw==", "url": "https://github.com/vividus-framework/vividus/pull/392#discussion_r392703697", "bodyText": "toString() is not needed (from SQ :))", "author": "valfirst", "createdAt": "2020-03-15T19:18:54Z", "path": "vividus-plugin-web-app/src/main/java/org/vividus/proxy/ThreadedProxy.java", "diffHunk": "@@ -16,73 +16,144 @@\n \n package org.vividus.proxy;\n \n-import javax.inject.Inject;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Queue;\n \n import com.browserup.bup.BrowserUpProxy;\n import com.browserup.bup.filters.RequestFilter;\n \n+import org.apache.commons.lang3.Validate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.model.IntegerRange;\n+\n public class ThreadedProxy implements IProxy\n {\n-    @Inject private IProxyServerFactory proxyServerFactory;\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ThreadedProxy.class);\n+\n+    private final InetAddress proxyHost;\n+    private final Queue<Integer> proxyPorts;\n+    private final boolean useDefaultPort;\n+    private final ThreadLocal<IProxy> proxy;\n+\n+    public ThreadedProxy(String proxyHost, IntegerRange proxyPorts, IProxyFactory proxyFactory)\n+            throws UnknownHostException\n+    {\n+        List<Integer> proxyPortsRange = proxyPorts.getRange();\n+        if (proxyPortsRange.contains(0))\n+        {\n+            Validate.isTrue(proxyPortsRange.size() == 1,\n+                    \"Port 0 (default port selection) can not be used with custom ports\");\n+            useDefaultPort = true;\n+        }\n+        else\n+        {\n+            useDefaultPort = false;\n+            proxyPortsRange.forEach(ThreadedProxy::validatePort);\n+        }\n+        this.proxyPorts = new LinkedList<>(proxyPortsRange);\n+        this.proxy = ThreadLocal.withInitial(proxyFactory::createProxy);\n+        this.proxyHost = InetAddress.getByName(proxyHost);\n+    }\n \n-    private final ThreadLocal<IProxy> proxy = ThreadLocal.withInitial(() ->\n+    @SuppressWarnings(\"MagicNumber\")\n+    private static void validatePort(int port)\n     {\n-        Proxy proxy = new Proxy();\n-        proxy.setProxyServerFactory(proxyServerFactory);\n-        return proxy;\n-    });\n+        Validate.isTrue(port > 0 && port <= 65535, \"Expected ports range is 1-65535 but got: %d\", port);\n+    }\n \n     @Override\n     public void start()\n     {\n-        proxy.get().start();\n+        if (useDefaultPort)\n+        {\n+            proxy().start();\n+            return;\n+        }\n+        synchronized (proxyPorts)\n+        {\n+            Validate.isTrue(!proxyPorts.isEmpty(), \"There are no available ports in the ports pool\");\n+            int port = proxyPorts.poll();\n+            LOGGER.info(\"Allocate {} port from the proxy ports pool\", port);\n+            logAvailablePorts();\n+            proxy().start(port, proxyHost);\n+        }\n+    }\n+\n+    @Override\n+    public void start(int port, InetAddress address)\n+    {\n+        proxy().start(port, address);\n     }\n \n     @Override\n     public void startRecording()\n     {\n-        proxy.get().startRecording();\n+        proxy().startRecording();\n     }\n \n     @Override\n     public void stopRecording()\n     {\n-        proxy.get().stopRecording();\n+        proxy().stopRecording();\n     }\n \n     @Override\n     public void stop()\n     {\n-        proxy.get().stop();\n+        synchronized (proxyPorts)\n+        {\n+            if (!useDefaultPort)\n+            {\n+                int port = proxy().getProxyServer().getPort();\n+                proxyPorts.add(port);\n+                LOGGER.info(\"Return {} port back to the proxy ports pool\", port);\n+                logAvailablePorts();\n+            }\n+            proxy().stop();\n+        }\n     }\n \n     @Override\n     public boolean isStarted()\n     {\n-        return proxy.get().isStarted();\n+        return proxy().isStarted();\n     }\n \n     @Override\n     public BrowserUpProxy getProxyServer()\n     {\n-        return proxy.get().getProxyServer();\n+        return proxy().getProxyServer();\n     }\n \n     @Override\n     public ProxyLog getLog()\n     {\n-        return proxy.get().getLog();\n+        return proxy().getLog();\n     }\n \n     @Override\n     public void addRequestFilter(RequestFilter requestFilter)\n     {\n-        proxy.get().addRequestFilter(requestFilter);\n+        proxy().addRequestFilter(requestFilter);\n     }\n \n     @Override\n     public void clearRequestFilters()\n     {\n-        proxy.get().clearRequestFilters();\n+        proxy().clearRequestFilters();\n+    }\n+\n+    private void logAvailablePorts()\n+    {\n+        LOGGER.info(\"Available ports for proxies in the pool: {}\", proxyPorts.toString());", "originalCommit": "780d1ba62c74ef0588ca6702d4729d12f5ad96ac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9bebe7604b39dd7e89857f9b13445687748f7277", "chunk": "diff --git a/vividus-plugin-web-app/src/main/java/org/vividus/proxy/ThreadedProxy.java b/vividus-plugin-web-app/src/main/java/org/vividus/proxy/ThreadedProxy.java\nindex b1b4d362e..43fd65586 100644\n--- a/vividus-plugin-web-app/src/main/java/org/vividus/proxy/ThreadedProxy.java\n+++ b/vividus-plugin-web-app/src/main/java/org/vividus/proxy/ThreadedProxy.java\n\n@@ -36,7 +36,7 @@ public class ThreadedProxy implements IProxy\n \n     private final InetAddress proxyHost;\n     private final Queue<Integer> proxyPorts;\n-    private final boolean useDefaultPort;\n+    private final boolean useEphemeralPort;\n     private final ThreadLocal<IProxy> proxy;\n \n     public ThreadedProxy(String proxyHost, IntegerRange proxyPorts, IProxyFactory proxyFactory)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjcwMzgxNA==", "url": "https://github.com/vividus-framework/vividus/pull/392#discussion_r392703814", "bodyText": "should be removed", "author": "valfirst", "createdAt": "2020-03-15T19:20:25Z", "path": "vividus-plugin-web-app/src/test/java/org/vividus/proxy/ThreadedProxySystemTests.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.proxy;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.atLeastOnce;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import com.browserup.bup.BrowserUpProxy;\n+\n+import org.apache.commons.lang3.RandomUtils;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.vividus.model.IntegerRange;\n+import org.vividus.util.Sleeper;\n+\n+class ThreadedProxySystemTests\n+{\n+    @Test\n+    void testAllocatePorts() throws InterruptedException, ExecutionException, UnknownHostException\n+    {\n+        String host = \"localhost\";\n+        InetAddress address = InetAddress.getByName(host);\n+        IntegerRange range = new IntegerRange(Arrays.asList(55023, 53450, 55300));\n+        IProxyFactory proxyFactory = mock(IProxyFactory.class);\n+        ThreadedProxy threadedProxy = new ThreadedProxy(host, range, proxyFactory);\n+\n+        ExecutorService executor = Executors.newFixedThreadPool(3);\n+        Map<String, IProxy> localProxies = mockLocalProxy(3);\n+        Supplier<IProxy> proxyGetter = () -> localProxies.get(Thread.currentThread().getName());\n+        when(proxyFactory.createProxy()).thenAnswer(inv -> proxyGetter.get());\n+\n+        int tasksCount = 50;\n+        List<Callable<Optional<Throwable>>> tasks = new ArrayList<>(tasksCount);\n+        IntStream.range(0, tasksCount).forEach(i -> tasks.add(() ->\n+        {\n+            try\n+            {\n+                IProxy localProxy = proxyGetter.get();\n+                BrowserUpProxy mobProxy = mock(BrowserUpProxy.class);\n+                ArgumentCaptor<Integer> portCapturer = ArgumentCaptor.forClass(Integer.class);\n+\n+                threadedProxy.start();\n+\n+                verify(localProxy, atLeastOnce()).start(portCapturer.capture(), eq(address));\n+                when(localProxy.getProxyServer()).thenReturn(mobProxy);\n+                when(mobProxy.getPort()).thenReturn(portCapturer.getValue());\n+                int timeout = RandomUtils.nextInt(0, 100);\n+                Sleeper.sleep(Duration.ofMillis(timeout));\n+\n+                threadedProxy.stop();\n+            }\n+            catch (Exception | AssertionError e)\n+            {\n+                e.printStackTrace();", "originalCommit": "780d1ba62c74ef0588ca6702d4729d12f5ad96ac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9bebe7604b39dd7e89857f9b13445687748f7277", "chunk": "diff --git a/vividus-plugin-web-app/src/test/java/org/vividus/proxy/ThreadedProxySystemTests.java b/vividus-plugin-web-app/src/test/java/org/vividus/proxy/ThreadedProxySystemTests.java\nindex bebfe04d3..909290fc9 100644\n--- a/vividus-plugin-web-app/src/test/java/org/vividus/proxy/ThreadedProxySystemTests.java\n+++ b/vividus-plugin-web-app/src/test/java/org/vividus/proxy/ThreadedProxySystemTests.java\n\n@@ -88,7 +88,6 @@ class ThreadedProxySystemTests\n             }\n             catch (Exception | AssertionError e)\n             {\n-                e.printStackTrace();\n                 return Optional.of(e);\n             }\n             return Optional.empty();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjcwNDMwNQ==", "url": "https://github.com/vividus-framework/vividus/pull/392#discussion_r392704305", "bodyText": "useDefaultPort -> useEphemeralPort", "author": "valfirst", "createdAt": "2020-03-15T19:26:37Z", "path": "vividus-plugin-web-app/src/main/java/org/vividus/proxy/ThreadedProxy.java", "diffHunk": "@@ -16,73 +16,144 @@\n \n package org.vividus.proxy;\n \n-import javax.inject.Inject;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Queue;\n \n import com.browserup.bup.BrowserUpProxy;\n import com.browserup.bup.filters.RequestFilter;\n \n+import org.apache.commons.lang3.Validate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.model.IntegerRange;\n+\n public class ThreadedProxy implements IProxy\n {\n-    @Inject private IProxyServerFactory proxyServerFactory;\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ThreadedProxy.class);\n+\n+    private final InetAddress proxyHost;\n+    private final Queue<Integer> proxyPorts;\n+    private final boolean useDefaultPort;", "originalCommit": "780d1ba62c74ef0588ca6702d4729d12f5ad96ac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9bebe7604b39dd7e89857f9b13445687748f7277", "chunk": "diff --git a/vividus-plugin-web-app/src/main/java/org/vividus/proxy/ThreadedProxy.java b/vividus-plugin-web-app/src/main/java/org/vividus/proxy/ThreadedProxy.java\nindex b1b4d362e..43fd65586 100644\n--- a/vividus-plugin-web-app/src/main/java/org/vividus/proxy/ThreadedProxy.java\n+++ b/vividus-plugin-web-app/src/main/java/org/vividus/proxy/ThreadedProxy.java\n\n@@ -36,7 +36,7 @@ public class ThreadedProxy implements IProxy\n \n     private final InetAddress proxyHost;\n     private final Queue<Integer> proxyPorts;\n-    private final boolean useDefaultPort;\n+    private final boolean useEphemeralPort;\n     private final ThreadLocal<IProxy> proxy;\n \n     public ThreadedProxy(String proxyHost, IntegerRange proxyPorts, IProxyFactory proxyFactory)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjcwNDM1OA==", "url": "https://github.com/vividus-framework/vividus/pull/392#discussion_r392704358", "bodyText": "default -> ephemeral", "author": "valfirst", "createdAt": "2020-03-15T19:27:29Z", "path": "vividus-plugin-web-app/src/main/java/org/vividus/proxy/ThreadedProxy.java", "diffHunk": "@@ -16,73 +16,144 @@\n \n package org.vividus.proxy;\n \n-import javax.inject.Inject;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Queue;\n \n import com.browserup.bup.BrowserUpProxy;\n import com.browserup.bup.filters.RequestFilter;\n \n+import org.apache.commons.lang3.Validate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.model.IntegerRange;\n+\n public class ThreadedProxy implements IProxy\n {\n-    @Inject private IProxyServerFactory proxyServerFactory;\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ThreadedProxy.class);\n+\n+    private final InetAddress proxyHost;\n+    private final Queue<Integer> proxyPorts;\n+    private final boolean useDefaultPort;\n+    private final ThreadLocal<IProxy> proxy;\n+\n+    public ThreadedProxy(String proxyHost, IntegerRange proxyPorts, IProxyFactory proxyFactory)\n+            throws UnknownHostException\n+    {\n+        List<Integer> proxyPortsRange = proxyPorts.getRange();\n+        if (proxyPortsRange.contains(0))\n+        {\n+            Validate.isTrue(proxyPortsRange.size() == 1,\n+                    \"Port 0 (default port selection) can not be used with custom ports\");", "originalCommit": "780d1ba62c74ef0588ca6702d4729d12f5ad96ac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9bebe7604b39dd7e89857f9b13445687748f7277", "chunk": "diff --git a/vividus-plugin-web-app/src/main/java/org/vividus/proxy/ThreadedProxy.java b/vividus-plugin-web-app/src/main/java/org/vividus/proxy/ThreadedProxy.java\nindex b1b4d362e..43fd65586 100644\n--- a/vividus-plugin-web-app/src/main/java/org/vividus/proxy/ThreadedProxy.java\n+++ b/vividus-plugin-web-app/src/main/java/org/vividus/proxy/ThreadedProxy.java\n\n@@ -36,7 +36,7 @@ public class ThreadedProxy implements IProxy\n \n     private final InetAddress proxyHost;\n     private final Queue<Integer> proxyPorts;\n-    private final boolean useDefaultPort;\n+    private final boolean useEphemeralPort;\n     private final ThreadLocal<IProxy> proxy;\n \n     public ThreadedProxy(String proxyHost, IntegerRange proxyPorts, IProxyFactory proxyFactory)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjcwNDM4Nw==", "url": "https://github.com/vividus-framework/vividus/pull/392#discussion_r392704387", "bodyText": "no reason to use synchronization if port is not picked up from the pool", "author": "valfirst", "createdAt": "2020-03-15T19:28:00Z", "path": "vividus-plugin-web-app/src/main/java/org/vividus/proxy/ThreadedProxy.java", "diffHunk": "@@ -16,73 +16,144 @@\n \n package org.vividus.proxy;\n \n-import javax.inject.Inject;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Queue;\n \n import com.browserup.bup.BrowserUpProxy;\n import com.browserup.bup.filters.RequestFilter;\n \n+import org.apache.commons.lang3.Validate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.model.IntegerRange;\n+\n public class ThreadedProxy implements IProxy\n {\n-    @Inject private IProxyServerFactory proxyServerFactory;\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ThreadedProxy.class);\n+\n+    private final InetAddress proxyHost;\n+    private final Queue<Integer> proxyPorts;\n+    private final boolean useDefaultPort;\n+    private final ThreadLocal<IProxy> proxy;\n+\n+    public ThreadedProxy(String proxyHost, IntegerRange proxyPorts, IProxyFactory proxyFactory)\n+            throws UnknownHostException\n+    {\n+        List<Integer> proxyPortsRange = proxyPorts.getRange();\n+        if (proxyPortsRange.contains(0))\n+        {\n+            Validate.isTrue(proxyPortsRange.size() == 1,\n+                    \"Port 0 (default port selection) can not be used with custom ports\");\n+            useDefaultPort = true;\n+        }\n+        else\n+        {\n+            useDefaultPort = false;\n+            proxyPortsRange.forEach(ThreadedProxy::validatePort);\n+        }\n+        this.proxyPorts = new LinkedList<>(proxyPortsRange);\n+        this.proxy = ThreadLocal.withInitial(proxyFactory::createProxy);\n+        this.proxyHost = InetAddress.getByName(proxyHost);\n+    }\n \n-    private final ThreadLocal<IProxy> proxy = ThreadLocal.withInitial(() ->\n+    @SuppressWarnings(\"MagicNumber\")\n+    private static void validatePort(int port)\n     {\n-        Proxy proxy = new Proxy();\n-        proxy.setProxyServerFactory(proxyServerFactory);\n-        return proxy;\n-    });\n+        Validate.isTrue(port > 0 && port <= 65535, \"Expected ports range is 1-65535 but got: %d\", port);\n+    }\n \n     @Override\n     public void start()\n     {\n-        proxy.get().start();\n+        if (useDefaultPort)\n+        {\n+            proxy().start();\n+            return;\n+        }\n+        synchronized (proxyPorts)\n+        {\n+            Validate.isTrue(!proxyPorts.isEmpty(), \"There are no available ports in the ports pool\");\n+            int port = proxyPorts.poll();\n+            LOGGER.info(\"Allocate {} port from the proxy ports pool\", port);\n+            logAvailablePorts();\n+            proxy().start(port, proxyHost);\n+        }\n+    }\n+\n+    @Override\n+    public void start(int port, InetAddress address)\n+    {\n+        proxy().start(port, address);\n     }\n \n     @Override\n     public void startRecording()\n     {\n-        proxy.get().startRecording();\n+        proxy().startRecording();\n     }\n \n     @Override\n     public void stopRecording()\n     {\n-        proxy.get().stopRecording();\n+        proxy().stopRecording();\n     }\n \n     @Override\n     public void stop()\n     {\n-        proxy.get().stop();\n+        synchronized (proxyPorts)", "originalCommit": "780d1ba62c74ef0588ca6702d4729d12f5ad96ac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9bebe7604b39dd7e89857f9b13445687748f7277", "chunk": "diff --git a/vividus-plugin-web-app/src/main/java/org/vividus/proxy/ThreadedProxy.java b/vividus-plugin-web-app/src/main/java/org/vividus/proxy/ThreadedProxy.java\nindex b1b4d362e..43fd65586 100644\n--- a/vividus-plugin-web-app/src/main/java/org/vividus/proxy/ThreadedProxy.java\n+++ b/vividus-plugin-web-app/src/main/java/org/vividus/proxy/ThreadedProxy.java\n\n@@ -36,7 +36,7 @@ public class ThreadedProxy implements IProxy\n \n     private final InetAddress proxyHost;\n     private final Queue<Integer> proxyPorts;\n-    private final boolean useDefaultPort;\n+    private final boolean useEphemeralPort;\n     private final ThreadLocal<IProxy> proxy;\n \n     public ThreadedProxy(String proxyHost, IntegerRange proxyPorts, IProxyFactory proxyFactory)\n"}}, {"oid": "9bebe7604b39dd7e89857f9b13445687748f7277", "url": "https://github.com/vividus-framework/vividus/commit/9bebe7604b39dd7e89857f9b13445687748f7277", "message": "Add ability to configure proxy host and port\n- proxy.host - proxy host, default value is localhost\n- proxy.ports - proxy port, default value is 0 (random port)", "committedDate": "2020-03-16T05:16:40Z", "type": "forcePushed"}, {"oid": "9b491f55e8e74c15bf7c39e4af6322b6e93d3151", "url": "https://github.com/vividus-framework/vividus/commit/9b491f55e8e74c15bf7c39e4af6322b6e93d3151", "message": "Add ability to configure proxy host and port\n- proxy.host - proxy host, default value is localhost\n- proxy.ports - proxy port, default value is 0 (random port)", "committedDate": "2020-03-16T05:58:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjgxMjU3NA==", "url": "https://github.com/vividus-framework/vividus/pull/392#discussion_r392812574", "bodyText": "Please use  http://www.slf4j.org/manual.html#fluent", "author": "ikalinin1", "createdAt": "2020-03-16T06:54:39Z", "path": "vividus-plugin-web-app/src/main/java/org/vividus/proxy/ThreadedProxy.java", "diffHunk": "@@ -16,73 +16,144 @@\n \n package org.vividus.proxy;\n \n-import javax.inject.Inject;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Queue;\n \n import com.browserup.bup.BrowserUpProxy;\n import com.browserup.bup.filters.RequestFilter;\n \n+import org.apache.commons.lang3.Validate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.model.IntegerRange;\n+\n public class ThreadedProxy implements IProxy\n {\n-    @Inject private IProxyServerFactory proxyServerFactory;\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ThreadedProxy.class);\n+\n+    private final InetAddress proxyHost;\n+    private final Queue<Integer> proxyPorts;\n+    private final boolean useEphemeralPort;\n+    private final ThreadLocal<IProxy> proxy;\n+\n+    public ThreadedProxy(String proxyHost, IntegerRange proxyPorts, IProxyFactory proxyFactory)\n+            throws UnknownHostException\n+    {\n+        List<Integer> proxyPortsRange = proxyPorts.getRange();\n+        if (proxyPortsRange.contains(0))\n+        {\n+            Validate.isTrue(proxyPortsRange.size() == 1,\n+                    \"Port 0 (ephemeral port selection) can not be used with custom ports\");\n+            useEphemeralPort = true;\n+        }\n+        else\n+        {\n+            useEphemeralPort = false;\n+            proxyPortsRange.forEach(ThreadedProxy::validatePort);\n+        }\n+        this.proxyPorts = new LinkedList<>(proxyPortsRange);\n+        this.proxy = ThreadLocal.withInitial(proxyFactory::createProxy);\n+        this.proxyHost = InetAddress.getByName(proxyHost);\n+    }\n \n-    private final ThreadLocal<IProxy> proxy = ThreadLocal.withInitial(() ->\n+    @SuppressWarnings(\"MagicNumber\")\n+    private static void validatePort(int port)\n     {\n-        Proxy proxy = new Proxy();\n-        proxy.setProxyServerFactory(proxyServerFactory);\n-        return proxy;\n-    });\n+        Validate.isTrue(port > 0 && port <= 65535, \"Expected ports range is 1-65535 but got: %d\", port);\n+    }\n \n     @Override\n     public void start()\n     {\n-        proxy.get().start();\n+        if (useEphemeralPort)\n+        {\n+            proxy().start();\n+            return;\n+        }\n+        synchronized (proxyPorts)\n+        {\n+            Validate.isTrue(!proxyPorts.isEmpty(), \"There are no available ports in the ports pool\");\n+            int port = proxyPorts.poll();\n+            LOGGER.info(\"Allocate {} port from the proxy ports pool\", port);", "originalCommit": "9b491f55e8e74c15bf7c39e4af6322b6e93d3151", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "39979a6a6d28e938a6d653da20fa5b80e4df1a11", "chunk": "diff --git a/vividus-plugin-web-app/src/main/java/org/vividus/proxy/ThreadedProxy.java b/vividus-plugin-web-app/src/main/java/org/vividus/proxy/ThreadedProxy.java\nindex 43fd65586..6355744b1 100644\n--- a/vividus-plugin-web-app/src/main/java/org/vividus/proxy/ThreadedProxy.java\n+++ b/vividus-plugin-web-app/src/main/java/org/vividus/proxy/ThreadedProxy.java\n\n@@ -77,7 +77,7 @@ public class ThreadedProxy implements IProxy\n         {\n             Validate.isTrue(!proxyPorts.isEmpty(), \"There are no available ports in the ports pool\");\n             int port = proxyPorts.poll();\n-            LOGGER.info(\"Allocate {} port from the proxy ports pool\", port);\n+            LOGGER.atInfo().log(\"Allocate {} port from the proxy ports pool\", port);\n             logAvailablePorts();\n             proxy().start(port, proxyHost);\n         }\n"}}, {"oid": "39979a6a6d28e938a6d653da20fa5b80e4df1a11", "url": "https://github.com/vividus-framework/vividus/commit/39979a6a6d28e938a6d653da20fa5b80e4df1a11", "message": "Add ability to configure proxy host and port\n- proxy.host - proxy host, default value is localhost\n- proxy.ports - proxy port, default value is 0 (random port)", "committedDate": "2020-03-16T15:10:00Z", "type": "forcePushed"}, {"oid": "b8f6f4c238f5f34e9da70acd1254f8aa65ebec57", "url": "https://github.com/vividus-framework/vividus/commit/b8f6f4c238f5f34e9da70acd1254f8aa65ebec57", "message": "Add ability to configure proxy host and port\n- proxy.host - proxy host, default value is localhost\n- proxy.ports - proxy port, default value is 0 (ephemeral port)", "committedDate": "2020-03-16T15:16:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE0Mjk3NA==", "url": "https://github.com/vividus-framework/vividus/pull/392#discussion_r393142974", "bodyText": "to avoid collisions you should stop proxy in synchronized block", "author": "valfirst", "createdAt": "2020-03-16T16:15:26Z", "path": "vividus-plugin-web-app/src/main/java/org/vividus/proxy/ThreadedProxy.java", "diffHunk": "@@ -16,73 +16,146 @@\n \n package org.vividus.proxy;\n \n-import javax.inject.Inject;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Queue;\n \n import com.browserup.bup.BrowserUpProxy;\n import com.browserup.bup.filters.RequestFilter;\n \n+import org.apache.commons.lang3.Validate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.model.IntegerRange;\n+\n public class ThreadedProxy implements IProxy\n {\n-    @Inject private IProxyServerFactory proxyServerFactory;\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ThreadedProxy.class);\n+\n+    private final InetAddress proxyHost;\n+    private final Queue<Integer> proxyPorts;\n+    private final boolean useEphemeralPort;\n+    private final ThreadLocal<IProxy> proxy;\n+\n+    public ThreadedProxy(String proxyHost, IntegerRange proxyPorts, IProxyFactory proxyFactory)\n+            throws UnknownHostException\n+    {\n+        List<Integer> proxyPortsRange = proxyPorts.getRange();\n+        if (proxyPortsRange.contains(0))\n+        {\n+            Validate.isTrue(proxyPortsRange.size() == 1,\n+                    \"Port 0 (ephemeral port selection) can not be used with custom ports\");\n+            useEphemeralPort = true;\n+        }\n+        else\n+        {\n+            useEphemeralPort = false;\n+            proxyPortsRange.forEach(ThreadedProxy::validatePort);\n+        }\n+        this.proxyPorts = new LinkedList<>(proxyPortsRange);\n+        this.proxy = ThreadLocal.withInitial(proxyFactory::createProxy);\n+        this.proxyHost = InetAddress.getByName(proxyHost);\n+    }\n \n-    private final ThreadLocal<IProxy> proxy = ThreadLocal.withInitial(() ->\n+    @SuppressWarnings(\"MagicNumber\")\n+    private static void validatePort(int port)\n     {\n-        Proxy proxy = new Proxy();\n-        proxy.setProxyServerFactory(proxyServerFactory);\n-        return proxy;\n-    });\n+        Validate.isTrue(port > 0 && port <= 65535, \"Expected ports range is 1-65535 but got: %d\", port);\n+    }\n \n     @Override\n     public void start()\n     {\n-        proxy.get().start();\n+        if (useEphemeralPort)\n+        {\n+            proxy().start();\n+            return;\n+        }\n+        synchronized (proxyPorts)\n+        {\n+            Validate.isTrue(!proxyPorts.isEmpty(), \"There are no available ports in the ports pool\");\n+            int port = proxyPorts.poll();\n+            LOGGER.atInfo().log(\"Allocate {} port from the proxy ports pool\", port);\n+            logAvailablePorts();\n+            proxy().start(port, proxyHost);\n+        }\n+    }\n+\n+    @Override\n+    public void start(int port, InetAddress address)\n+    {\n+        proxy().start(port, address);\n     }\n \n     @Override\n     public void startRecording()\n     {\n-        proxy.get().startRecording();\n+        proxy().startRecording();\n     }\n \n     @Override\n     public void stopRecording()\n     {\n-        proxy.get().stopRecording();\n+        proxy().stopRecording();\n     }\n \n     @Override\n     public void stop()\n     {\n-        proxy.get().stop();\n+        if (!useEphemeralPort)\n+        {\n+            synchronized (proxyPorts)\n+            {\n+                int port = proxy().getProxyServer().getPort();\n+                proxyPorts.add(port);\n+                LOGGER.atInfo().log(\"Return {} port back to the proxy ports pool\", port);\n+                logAvailablePorts();\n+            }", "originalCommit": "b8f6f4c238f5f34e9da70acd1254f8aa65ebec57", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e2952fec8d6edcb1a31592071854375ca4e1f068", "chunk": "diff --git a/vividus-plugin-web-app/src/main/java/org/vividus/proxy/ThreadedProxy.java b/vividus-plugin-web-app/src/main/java/org/vividus/proxy/ThreadedProxy.java\nindex 224d5249d..000eee453 100644\n--- a/vividus-plugin-web-app/src/main/java/org/vividus/proxy/ThreadedProxy.java\n+++ b/vividus-plugin-web-app/src/main/java/org/vividus/proxy/ThreadedProxy.java\n\n@@ -21,6 +21,7 @@ import java.net.UnknownHostException;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Queue;\n+import java.util.function.Supplier;\n \n import com.browserup.bup.BrowserUpProxy;\n import com.browserup.bup.filters.RequestFilter;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE0Mzk1Ng==", "url": "https://github.com/vividus-framework/vividus/pull/392#discussion_r393143956", "bodyText": "LOGGER.atInfo().addArgument(port).log(\"Return {} port back to the proxy ports pool\");", "author": "valfirst", "createdAt": "2020-03-16T16:16:51Z", "path": "vividus-plugin-web-app/src/main/java/org/vividus/proxy/ThreadedProxy.java", "diffHunk": "@@ -16,73 +16,146 @@\n \n package org.vividus.proxy;\n \n-import javax.inject.Inject;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Queue;\n \n import com.browserup.bup.BrowserUpProxy;\n import com.browserup.bup.filters.RequestFilter;\n \n+import org.apache.commons.lang3.Validate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.model.IntegerRange;\n+\n public class ThreadedProxy implements IProxy\n {\n-    @Inject private IProxyServerFactory proxyServerFactory;\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ThreadedProxy.class);\n+\n+    private final InetAddress proxyHost;\n+    private final Queue<Integer> proxyPorts;\n+    private final boolean useEphemeralPort;\n+    private final ThreadLocal<IProxy> proxy;\n+\n+    public ThreadedProxy(String proxyHost, IntegerRange proxyPorts, IProxyFactory proxyFactory)\n+            throws UnknownHostException\n+    {\n+        List<Integer> proxyPortsRange = proxyPorts.getRange();\n+        if (proxyPortsRange.contains(0))\n+        {\n+            Validate.isTrue(proxyPortsRange.size() == 1,\n+                    \"Port 0 (ephemeral port selection) can not be used with custom ports\");\n+            useEphemeralPort = true;\n+        }\n+        else\n+        {\n+            useEphemeralPort = false;\n+            proxyPortsRange.forEach(ThreadedProxy::validatePort);\n+        }\n+        this.proxyPorts = new LinkedList<>(proxyPortsRange);\n+        this.proxy = ThreadLocal.withInitial(proxyFactory::createProxy);\n+        this.proxyHost = InetAddress.getByName(proxyHost);\n+    }\n \n-    private final ThreadLocal<IProxy> proxy = ThreadLocal.withInitial(() ->\n+    @SuppressWarnings(\"MagicNumber\")\n+    private static void validatePort(int port)\n     {\n-        Proxy proxy = new Proxy();\n-        proxy.setProxyServerFactory(proxyServerFactory);\n-        return proxy;\n-    });\n+        Validate.isTrue(port > 0 && port <= 65535, \"Expected ports range is 1-65535 but got: %d\", port);\n+    }\n \n     @Override\n     public void start()\n     {\n-        proxy.get().start();\n+        if (useEphemeralPort)\n+        {\n+            proxy().start();\n+            return;\n+        }\n+        synchronized (proxyPorts)\n+        {\n+            Validate.isTrue(!proxyPorts.isEmpty(), \"There are no available ports in the ports pool\");\n+            int port = proxyPorts.poll();\n+            LOGGER.atInfo().log(\"Allocate {} port from the proxy ports pool\", port);\n+            logAvailablePorts();\n+            proxy().start(port, proxyHost);\n+        }\n+    }\n+\n+    @Override\n+    public void start(int port, InetAddress address)\n+    {\n+        proxy().start(port, address);\n     }\n \n     @Override\n     public void startRecording()\n     {\n-        proxy.get().startRecording();\n+        proxy().startRecording();\n     }\n \n     @Override\n     public void stopRecording()\n     {\n-        proxy.get().stopRecording();\n+        proxy().stopRecording();\n     }\n \n     @Override\n     public void stop()\n     {\n-        proxy.get().stop();\n+        if (!useEphemeralPort)\n+        {\n+            synchronized (proxyPorts)\n+            {\n+                int port = proxy().getProxyServer().getPort();\n+                proxyPorts.add(port);\n+                LOGGER.atInfo().log(\"Return {} port back to the proxy ports pool\", port);", "originalCommit": "b8f6f4c238f5f34e9da70acd1254f8aa65ebec57", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e2952fec8d6edcb1a31592071854375ca4e1f068", "chunk": "diff --git a/vividus-plugin-web-app/src/main/java/org/vividus/proxy/ThreadedProxy.java b/vividus-plugin-web-app/src/main/java/org/vividus/proxy/ThreadedProxy.java\nindex 224d5249d..000eee453 100644\n--- a/vividus-plugin-web-app/src/main/java/org/vividus/proxy/ThreadedProxy.java\n+++ b/vividus-plugin-web-app/src/main/java/org/vividus/proxy/ThreadedProxy.java\n\n@@ -21,6 +21,7 @@ import java.net.UnknownHostException;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Queue;\n+import java.util.function.Supplier;\n \n import com.browserup.bup.BrowserUpProxy;\n import com.browserup.bup.filters.RequestFilter;\n"}}, {"oid": "e2952fec8d6edcb1a31592071854375ca4e1f068", "url": "https://github.com/vividus-framework/vividus/commit/e2952fec8d6edcb1a31592071854375ca4e1f068", "message": "Add ability to configure proxy host and port\n- proxy.host - proxy host, default value is localhost\n- proxy.ports - proxy port, default value is 0 (ephemeral port)", "committedDate": "2020-03-16T18:04:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI1MjIyOQ==", "url": "https://github.com/vividus-framework/vividus/pull/392#discussion_r393252229", "bodyText": "LOGGER.atInfo().addArgument(port).log(\"Return {} port back to the proxy ports pool\");", "author": "valfirst", "createdAt": "2020-03-16T19:06:25Z", "path": "vividus-plugin-web-app/src/main/java/org/vividus/proxy/ThreadedProxy.java", "diffHunk": "@@ -16,73 +16,157 @@\n \n package org.vividus.proxy;\n \n-import javax.inject.Inject;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.function.Supplier;\n \n import com.browserup.bup.BrowserUpProxy;\n import com.browserup.bup.filters.RequestFilter;\n \n+import org.apache.commons.lang3.Validate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.model.IntegerRange;\n+\n public class ThreadedProxy implements IProxy\n {\n-    @Inject private IProxyServerFactory proxyServerFactory;\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ThreadedProxy.class);\n+\n+    private final InetAddress proxyHost;\n+    private final Queue<Integer> proxyPorts;\n+    private final boolean useEphemeralPort;\n+    private final ThreadLocal<IProxy> proxy;\n+\n+    public ThreadedProxy(String proxyHost, IntegerRange proxyPorts, IProxyFactory proxyFactory)\n+            throws UnknownHostException\n+    {\n+        List<Integer> proxyPortsRange = proxyPorts.getRange();\n+        if (proxyPortsRange.contains(0))\n+        {\n+            Validate.isTrue(proxyPortsRange.size() == 1,\n+                    \"Port 0 (ephemeral port selection) can not be used with custom ports\");\n+            useEphemeralPort = true;\n+        }\n+        else\n+        {\n+            useEphemeralPort = false;\n+            proxyPortsRange.forEach(ThreadedProxy::validatePort);\n+        }\n+        this.proxyPorts = new LinkedList<>(proxyPortsRange);\n+        this.proxy = ThreadLocal.withInitial(proxyFactory::createProxy);\n+        this.proxyHost = InetAddress.getByName(proxyHost);\n+    }\n \n-    private final ThreadLocal<IProxy> proxy = ThreadLocal.withInitial(() ->\n+    @SuppressWarnings(\"MagicNumber\")\n+    private static void validatePort(int port)\n     {\n-        Proxy proxy = new Proxy();\n-        proxy.setProxyServerFactory(proxyServerFactory);\n-        return proxy;\n-    });\n+        Validate.isTrue(port > 0 && port <= 65535, \"Expected ports range is 1-65535 but got: %d\", port);\n+    }\n \n     @Override\n     public void start()\n     {\n-        proxy.get().start();\n+        perform(() -> proxy().start(), () ->\n+        {\n+            Validate.isTrue(!proxyPorts.isEmpty(), \"There are no available ports in the ports pool\");\n+            int port = proxyPorts.poll();\n+            logMessage(\"Allocate {} port from the proxy ports pool\", () -> port);\n+            logAvailablePorts();\n+            proxy().start(port, proxyHost);\n+        });\n+    }\n+\n+    @Override\n+    public void start(int port, InetAddress address)\n+    {\n+        proxy().start(port, address);\n     }\n \n     @Override\n     public void startRecording()\n     {\n-        proxy.get().startRecording();\n+        proxy().startRecording();\n     }\n \n     @Override\n     public void stopRecording()\n     {\n-        proxy.get().stopRecording();\n+        proxy().stopRecording();\n     }\n \n     @Override\n     public void stop()\n     {\n-        proxy.get().stop();\n+        perform(() -> proxy().stop(), () ->\n+        {\n+            int port = proxy().getProxyServer().getPort();\n+            proxyPorts.add(port);\n+            logMessage(\"Return {} port back to the proxy ports pool\", () -> port);", "originalCommit": "e2952fec8d6edcb1a31592071854375ca4e1f068", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d29d75c8eef7a6ca32701ed164f03aeb595c2ea0", "chunk": "diff --git a/vividus-plugin-web-app/src/main/java/org/vividus/proxy/ThreadedProxy.java b/vividus-plugin-web-app/src/main/java/org/vividus/proxy/ThreadedProxy.java\nindex 000eee453..a72a0f369 100644\n--- a/vividus-plugin-web-app/src/main/java/org/vividus/proxy/ThreadedProxy.java\n+++ b/vividus-plugin-web-app/src/main/java/org/vividus/proxy/ThreadedProxy.java\n\n@@ -21,7 +21,6 @@ import java.net.UnknownHostException;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Queue;\n-import java.util.function.Supplier;\n \n import com.browserup.bup.BrowserUpProxy;\n import com.browserup.bup.filters.RequestFilter;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI1MjU0Nw==", "url": "https://github.com/vividus-framework/vividus/pull/392#discussion_r393252547", "bodyText": "LOGGER.atInfo().addArgument(port).log(\"Allocate {} port from the proxy ports pool\");", "author": "valfirst", "createdAt": "2020-03-16T19:07:08Z", "path": "vividus-plugin-web-app/src/main/java/org/vividus/proxy/ThreadedProxy.java", "diffHunk": "@@ -16,73 +16,157 @@\n \n package org.vividus.proxy;\n \n-import javax.inject.Inject;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.function.Supplier;\n \n import com.browserup.bup.BrowserUpProxy;\n import com.browserup.bup.filters.RequestFilter;\n \n+import org.apache.commons.lang3.Validate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.model.IntegerRange;\n+\n public class ThreadedProxy implements IProxy\n {\n-    @Inject private IProxyServerFactory proxyServerFactory;\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ThreadedProxy.class);\n+\n+    private final InetAddress proxyHost;\n+    private final Queue<Integer> proxyPorts;\n+    private final boolean useEphemeralPort;\n+    private final ThreadLocal<IProxy> proxy;\n+\n+    public ThreadedProxy(String proxyHost, IntegerRange proxyPorts, IProxyFactory proxyFactory)\n+            throws UnknownHostException\n+    {\n+        List<Integer> proxyPortsRange = proxyPorts.getRange();\n+        if (proxyPortsRange.contains(0))\n+        {\n+            Validate.isTrue(proxyPortsRange.size() == 1,\n+                    \"Port 0 (ephemeral port selection) can not be used with custom ports\");\n+            useEphemeralPort = true;\n+        }\n+        else\n+        {\n+            useEphemeralPort = false;\n+            proxyPortsRange.forEach(ThreadedProxy::validatePort);\n+        }\n+        this.proxyPorts = new LinkedList<>(proxyPortsRange);\n+        this.proxy = ThreadLocal.withInitial(proxyFactory::createProxy);\n+        this.proxyHost = InetAddress.getByName(proxyHost);\n+    }\n \n-    private final ThreadLocal<IProxy> proxy = ThreadLocal.withInitial(() ->\n+    @SuppressWarnings(\"MagicNumber\")\n+    private static void validatePort(int port)\n     {\n-        Proxy proxy = new Proxy();\n-        proxy.setProxyServerFactory(proxyServerFactory);\n-        return proxy;\n-    });\n+        Validate.isTrue(port > 0 && port <= 65535, \"Expected ports range is 1-65535 but got: %d\", port);\n+    }\n \n     @Override\n     public void start()\n     {\n-        proxy.get().start();\n+        perform(() -> proxy().start(), () ->\n+        {\n+            Validate.isTrue(!proxyPorts.isEmpty(), \"There are no available ports in the ports pool\");\n+            int port = proxyPorts.poll();\n+            logMessage(\"Allocate {} port from the proxy ports pool\", () -> port);", "originalCommit": "e2952fec8d6edcb1a31592071854375ca4e1f068", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d29d75c8eef7a6ca32701ed164f03aeb595c2ea0", "chunk": "diff --git a/vividus-plugin-web-app/src/main/java/org/vividus/proxy/ThreadedProxy.java b/vividus-plugin-web-app/src/main/java/org/vividus/proxy/ThreadedProxy.java\nindex 000eee453..a72a0f369 100644\n--- a/vividus-plugin-web-app/src/main/java/org/vividus/proxy/ThreadedProxy.java\n+++ b/vividus-plugin-web-app/src/main/java/org/vividus/proxy/ThreadedProxy.java\n\n@@ -21,7 +21,6 @@ import java.net.UnknownHostException;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Queue;\n-import java.util.function.Supplier;\n \n import com.browserup.bup.BrowserUpProxy;\n import com.browserup.bup.filters.RequestFilter;\n"}}, {"oid": "d29d75c8eef7a6ca32701ed164f03aeb595c2ea0", "url": "https://github.com/vividus-framework/vividus/commit/d29d75c8eef7a6ca32701ed164f03aeb595c2ea0", "message": "Add ability to configure proxy host and port\n- proxy.host - proxy host, default value is localhost\n- proxy.ports - proxy port, default value is 0 (ephemeral port)", "committedDate": "2020-03-16T19:48:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ4MDA3MA==", "url": "https://github.com/vividus-framework/vividus/pull/392#discussion_r393480070", "bodyText": "Does the set fit better?", "author": "ikalinin1", "createdAt": "2020-03-17T07:11:08Z", "path": "vividus-plugin-web-app/src/main/java/org/vividus/model/IntegerRange.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.model;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+public class IntegerRange\n+{\n+    private final List<Integer> range;", "originalCommit": "d29d75c8eef7a6ca32701ed164f03aeb595c2ea0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c8bf8b7d36f6065aa5aa22fd0894b6533e13a728", "chunk": "diff --git a/vividus-plugin-web-app/src/main/java/org/vividus/model/IntegerRange.java b/vividus-plugin-web-app/src/main/java/org/vividus/model/IntegerRange.java\nindex 2e0de87c1..2d53356da 100644\n--- a/vividus-plugin-web-app/src/main/java/org/vividus/model/IntegerRange.java\n+++ b/vividus-plugin-web-app/src/main/java/org/vividus/model/IntegerRange.java\n\n@@ -17,18 +17,18 @@\n package org.vividus.model;\n \n import java.util.Collections;\n-import java.util.List;\n+import java.util.Set;\n \n public class IntegerRange\n {\n-    private final List<Integer> range;\n+    private final Set<Integer> range;\n \n-    public IntegerRange(List<Integer> range)\n+    public IntegerRange(Set<Integer> range)\n     {\n-        this.range = Collections.unmodifiableList(range);\n+        this.range = Collections.unmodifiableSet(range);\n     }\n \n-    public List<Integer> getRange()\n+    public Set<Integer> getRange()\n     {\n         return range;\n     }\n"}}, {"oid": "c8bf8b7d36f6065aa5aa22fd0894b6533e13a728", "url": "https://github.com/vividus-framework/vividus/commit/c8bf8b7d36f6065aa5aa22fd0894b6533e13a728", "message": "Add ability to configure proxy host and port\n- proxy.host - proxy host, default value is localhost\n- proxy.ports - proxy port, default value is 0 (ephemeral port)", "committedDate": "2020-03-17T09:21:43Z", "type": "commit"}, {"oid": "c8bf8b7d36f6065aa5aa22fd0894b6533e13a728", "url": "https://github.com/vividus-framework/vividus/commit/c8bf8b7d36f6065aa5aa22fd0894b6533e13a728", "message": "Add ability to configure proxy host and port\n- proxy.host - proxy host, default value is localhost\n- proxy.ports - proxy port, default value is 0 (ephemeral port)", "committedDate": "2020-03-17T09:21:43Z", "type": "forcePushed"}]}