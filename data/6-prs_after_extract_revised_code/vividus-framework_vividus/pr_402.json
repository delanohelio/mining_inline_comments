{"pr_number": 402, "pr_title": "Leave original columns order after work FILTERING transformer", "pr_createdAt": "2020-03-18T12:14:22Z", "pr_url": "https://github.com/vividus-framework/vividus/pull/402", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMxNDI2NQ==", "url": "https://github.com/vividus-framework/vividus/pull/402#discussion_r394314265", "bodyText": "I think, we should keep the same column order as it was before filtering, what about using LinkedHashSet ?", "author": "valfirst", "createdAt": "2020-03-18T12:37:48Z", "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/FilteringTableTransformer.java", "diffHunk": "@@ -65,7 +66,7 @@ public String transform(String tableAsString, ExamplesTableProperties properties\n                 ? headerValues.size() : Math.min(headerValues.size(), Integer.parseInt(byMaxColumns));\n         List<String> filteredColumnsNames = byColumnNames == null ? headerValues.subList(0, columnsLimit)\n                 : Arrays.stream(StringUtils.split(byColumnNames, ';')).map(String::trim).collect(Collectors.toList());\n-        Set<String> filteredHeaders = new HashSet<>(filteredColumnsNames);\n+        Set<String> filteredHeaders = new TreeSet<>(filteredColumnsNames);", "originalCommit": "d0b8d3350105d3e5e82fa6941c68d432f0dbf859", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d45c52d6bcf2cdbf66051da281d2c674637d355d", "chunk": "diff --git a/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/FilteringTableTransformer.java b/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/FilteringTableTransformer.java\nindex e220df4d..ebef9d79 100644\n--- a/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/FilteringTableTransformer.java\n+++ b/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/FilteringTableTransformer.java\n\n@@ -61,32 +58,21 @@ public class FilteringTableTransformer implements ExtendedTableTransformer\n                 BY_MAX_COLUMNS_PROPERTY, BY_COLUMNS_NAMES_PROPERTY);\n         ExamplesTable examplesTable = examplesTableFactory.get().createExamplesTable(tableAsString);\n \n-        List<String> headerValues = examplesTable.getHeaders();\n-        int columnsLimit = byMaxColumns == null\n-                ? headerValues.size() : Math.min(headerValues.size(), Integer.parseInt(byMaxColumns));\n-        List<String> filteredColumnsNames = byColumnNames == null ? headerValues.subList(0, columnsLimit)\n-                : Arrays.stream(StringUtils.split(byColumnNames, ';')).map(String::trim).collect(Collectors.toList());\n-        Set<String> filteredHeaders = new TreeSet<>(filteredColumnsNames);\n-\n-        List<Map<String, String>> result = filterByHeaders(filteredHeaders, headerValues,\n-                getFilteredRows(byMaxRows, examplesTable));\n+        List<String> filteredColumns = getFilteredHeaders(byMaxColumns, byColumnNames, examplesTable.getHeaders());\n+        List<Map<String, String>> result = filterByHeaders(filteredColumns, getFilteredRows(byMaxRows, examplesTable));\n \n         List<List<String>> resultRows = result.stream()\n-                .map(TreeMap::new)\n+                .map(LinkedHashMap::new)\n                 .map(Map::values)\n                 .map(ArrayList::new)\n                 .collect(Collectors.toList());\n \n-        return ExamplesTableProcessor.buildExamplesTable(filteredHeaders, resultRows, properties, true, true);\n+        return ExamplesTableProcessor.buildExamplesTable(filteredColumns, resultRows, properties, true, true);\n     }\n \n-    private List<Map<String, String>> filterByHeaders(Set<String> filteredHeaders, List<String> headerValues,\n-            List<Map<String, String>> result)\n+    private List<Map<String, String>> filterByHeaders(List<String> filteredColumns, List<Map<String, String>> result)\n     {\n-        Set<String> headersForDeleting = new HashSet<>(headerValues);\n-        headersForDeleting.removeAll(filteredHeaders);\n-        result.stream().map(m -> m.keySet().removeAll(headersForDeleting))\n-            .collect(Collectors.toList());\n+        result.stream().map(m -> m.keySet().retainAll(filteredColumns)).collect(Collectors.toList());\n         return result;\n     }\n \n"}}, {"oid": "d45c52d6bcf2cdbf66051da281d2c674637d355d", "url": "https://github.com/vividus-framework/vividus/commit/d45c52d6bcf2cdbf66051da281d2c674637d355d", "message": "Leave original columns order after work FILTERING transformer", "committedDate": "2020-03-19T11:54:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk4NTQ2OA==", "url": "https://github.com/vividus-framework/vividus/pull/402#discussion_r394985468", "bodyText": "List<String> filteredColumns = new ArrayList<>(headerValues); - copy is required to avoid changes in the original input", "author": "valfirst", "createdAt": "2020-03-19T12:22:03Z", "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/FilteringTableTransformer.java", "diffHunk": "@@ -98,6 +85,24 @@ public String transform(String tableAsString, ExamplesTableProperties properties\n                 .orElseGet(examplesTable::getRows);\n     }\n \n+    private List<String> getFilteredHeaders(String byMaxColumns, String byColumnNames, List<String> headerValues)\n+    {\n+        int columnsLimit = byMaxColumns == null\n+                ? headerValues.size() : Math.min(headerValues.size(), Integer.parseInt(byMaxColumns));\n+        List<String> filteredColumns = headerValues;", "originalCommit": "d45c52d6bcf2cdbf66051da281d2c674637d355d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8a81aec345f109837e78bc743b661a0ca5f13aec", "chunk": "diff --git a/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/FilteringTableTransformer.java b/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/FilteringTableTransformer.java\nindex ebef9d79..94fadbca 100644\n--- a/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/FilteringTableTransformer.java\n+++ b/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/FilteringTableTransformer.java\n\n@@ -89,7 +89,7 @@ public class FilteringTableTransformer implements ExtendedTableTransformer\n     {\n         int columnsLimit = byMaxColumns == null\n                 ? headerValues.size() : Math.min(headerValues.size(), Integer.parseInt(byMaxColumns));\n-        List<String> filteredColumns = headerValues;\n+        List<String> filteredColumns = new ArrayList<>(headerValues);\n         if (byColumnNames == null)\n         {\n             filteredColumns = filteredColumns.subList(0, columnsLimit);\n"}}, {"oid": "8a81aec345f109837e78bc743b661a0ca5f13aec", "url": "https://github.com/vividus-framework/vividus/commit/8a81aec345f109837e78bc743b661a0ca5f13aec", "message": "Leave original columns order after work FILTERING transformer", "committedDate": "2020-03-19T12:47:41Z", "type": "commit"}, {"oid": "8a81aec345f109837e78bc743b661a0ca5f13aec", "url": "https://github.com/vividus-framework/vividus/commit/8a81aec345f109837e78bc743b661a0ca5f13aec", "message": "Leave original columns order after work FILTERING transformer", "committedDate": "2020-03-19T12:47:41Z", "type": "forcePushed"}]}