{"pr_number": 873, "pr_title": "[plugin-web-app] Handle visibility designator if colon separator is present", "pr_createdAt": "2020-08-31T11:59:07Z", "pr_url": "https://github.com/vividus-framework/vividus/pull/873", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDEwOTgxNw==", "url": "https://github.com/vividus-framework/vividus/pull/873#discussion_r480109817", "bodyText": "I think since we are aware of the missing part, why not notify the user carefully?", "author": "ikalinin1", "createdAt": "2020-08-31T12:54:04Z", "path": "vividus-plugin-web-app/src/test/java/org/vividus/ui/web/util/SearchAttributesConversionUtilsTests.java", "diffHunk": "@@ -67,12 +67,16 @@ void testConvertToSearchAttributesInvalidFilterType()\n         assertEquals(\"Unsupported filter type: notFilter\", exception.getMessage());\n     }\n \n-    @Test\n-    void testConvertToSearchAttributesInvalidLocatorFormat()\n+    @ParameterizedTest\n+    @ValueSource(strings = {\n+        \"To.xpath(.a)\",\n+        \"By.id(id):\"\n+    })\n+    void testConvertToSearchAttributesInvalidLocatorFormat(String invalidLocator)\n     {\n         IllegalArgumentException exception = assertThrows(IllegalArgumentException.class,\n-            () -> SearchAttributesConversionUtils.convertToSearchAttributes(INVALID_LOCATOR));\n-        assertEquals(INVALID_LOCATOR_MESSAGE + INVALID_LOCATOR + CLOSING_BRACKET, exception.getMessage());\n+            () -> SearchAttributesConversionUtils.convertToSearchAttributes(invalidLocator));", "originalCommit": "661bb1fc3d6f336a5441ec0fb9022ba74aaa6ac8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDExNzA4NQ==", "url": "https://github.com/vividus-framework/vividus/pull/873#discussion_r480117085", "bodyText": "I think to make the message understandable to end users we should get rid of the regex in the error message and then break that regex into understandable pieces that will be clear even for people who don't know regexes; I just followed approach accepted initially and suggested improvement is better to implement in separate commit", "author": "uarlouski", "createdAt": "2020-08-31T13:07:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDEwOTgxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDExNzQ4NQ==", "url": "https://github.com/vividus-framework/vividus/pull/873#discussion_r480117485", "bodyText": "probably I didn't understand you correctly", "author": "uarlouski", "createdAt": "2020-08-31T13:07:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDEwOTgxNw=="}], "type": "inlineReview", "revised_code": {"commit": "587d28893537cd7b3866feb2596ad8c45c6b9501", "chunk": "diff --git a/vividus-plugin-web-app/src/test/java/org/vividus/ui/web/util/SearchAttributesConversionUtilsTests.java b/vividus-plugin-web-app/src/test/java/org/vividus/ui/web/util/SearchAttributesConversionUtilsTests.java\ndeleted file mode 100644\nindex 2c55866f..00000000\n--- a/vividus-plugin-web-app/src/test/java/org/vividus/ui/web/util/SearchAttributesConversionUtilsTests.java\n+++ /dev/null\n\n@@ -1,167 +0,0 @@\n-/*\n- * Copyright 2019-2020 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.vividus.ui.web.util;\n-\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertThrows;\n-\n-import java.util.Arrays;\n-import java.util.HashSet;\n-import java.util.stream.Stream;\n-\n-import org.apache.commons.lang3.StringUtils;\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.params.ParameterizedTest;\n-import org.junit.jupiter.params.provider.Arguments;\n-import org.junit.jupiter.params.provider.MethodSource;\n-import org.junit.jupiter.params.provider.ValueSource;\n-import org.vividus.ui.web.action.search.ActionAttributeType;\n-import org.vividus.ui.web.action.search.SearchAttributes;\n-import org.vividus.ui.web.action.search.SearchParameters;\n-import org.vividus.ui.web.action.search.Visibility;\n-\n-class SearchAttributesConversionUtilsTests\n-{\n-    private static final String ENABLED = \"enabled\";\n-    private static final String ID = \"id\";\n-    private static final String INVALID_LOCATOR_MESSAGE = \"Invalid locator format. \"\n-            + \"Expected matches [(?:By\\\\.)?([a-zA-Z]+)\\\\((.+?)\\\\)(?::([a-zA-Z]+))?] Actual: [\";\n-    private static final char CLOSING_BRACKET = ']';\n-    private static final String TEXT = \"text\";\n-\n-    @ParameterizedTest\n-    @MethodSource(\"actionAttributeSource\")\n-    void testConvertToSearchAttributes(SearchAttributes expected, String testValue)\n-    {\n-        assertEquals(expected, SearchAttributesConversionUtils.convertToSearchAttributes(testValue));\n-    }\n-\n-    @Test\n-    void testConvertToSearchAttributesInvalidLocatorType()\n-    {\n-        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class,\n-            () -> SearchAttributesConversionUtils.convertToSearchAttributes(\"By.jquery(.a)\"));\n-        assertEquals(\"Unsupported locator type: jquery\", exception.getMessage());\n-    }\n-\n-    @Test\n-    void testConvertToSearchAttributesInvalidFilterType()\n-    {\n-        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class,\n-            () -> SearchAttributesConversionUtils\n-                .convertToSearchAttributes(\"By.id(id)->filter.state(enabled).textPart(text).notFilter(any)\"));\n-        assertEquals(\"Unsupported filter type: notFilter\", exception.getMessage());\n-    }\n-\n-    @ParameterizedTest\n-    @ValueSource(strings = {\n-        \"To.xpath(.a)\",\n-        \"By.id(id):\"\n-    })\n-    void testConvertToSearchAttributesInvalidLocatorFormat(String invalidLocator)\n-    {\n-        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class,\n-            () -> SearchAttributesConversionUtils.convertToSearchAttributes(invalidLocator));\n-        assertEquals(INVALID_LOCATOR_MESSAGE + invalidLocator + CLOSING_BRACKET, exception.getMessage());\n-    }\n-\n-    @Test\n-    void testConvertToSearchAttributesEmptyStringLocator()\n-    {\n-        assertThrows(IllegalArgumentException.class,\n-            () -> SearchAttributesConversionUtils.convertToSearchAttributes(StringUtils.EMPTY),\n-            INVALID_LOCATOR_MESSAGE + CLOSING_BRACKET);\n-    }\n-\n-    @Test\n-    void testConvertToSearchAttributesSet()\n-    {\n-        SearchAttributes searchAttributesId = new SearchAttributes(ActionAttributeType.CSS_SELECTOR, \"#main\");\n-        SearchAttributes searchAttributesClassName = new SearchAttributes(ActionAttributeType.CLASS_NAME, \"class\");\n-        assertEquals(new HashSet<>(Arrays.asList(searchAttributesId, searchAttributesClassName)),\n-                SearchAttributesConversionUtils.convertToSearchAttributesSet(\"By.cssSelector(#main),\"\n-                        + \" By.className(class)\"));\n-    }\n-\n-    static Stream<Arguments> actionAttributeSource()\n-    {\n-        return Stream.of(\n-                Arguments.of(createAttributes(ActionAttributeType.ID, ID, Visibility.INVISIBLE), \"By.id(id):i\"),\n-                Arguments.of(createAttributes(ActionAttributeType.ID, ID, Visibility.INVISIBLE), \"id(id):i\"),\n-                Arguments.of(createAttributes(ActionAttributeType.CSS_SELECTOR, \"#id\", Visibility.ALL),\n-                        \"By.CSSselector(#id):all\"),\n-                Arguments.of(createAttributes(ActionAttributeType.CSS_SELECTOR, \"#id1\", Visibility.VISIBLE),\n-                        \"cssSelector(#id1)\"),\n-                Arguments.of(new SearchAttributes(ActionAttributeType.CLASS_NAME, \"clazz\"), \"By.className(clazz)\"),\n-                Arguments.of(new SearchAttributes(ActionAttributeType.LINK_TEXT, \"url\"), \"By.linkText(url)\"),\n-                Arguments.of(new SearchAttributes(ActionAttributeType.ELEMENT_NAME, \"button\"), \"By.name(button)\"),\n-                Arguments.of(new SearchAttributes(ActionAttributeType.XPATH, \"//a\"), \"By.xpath(//a)\"),\n-                Arguments.of(new SearchAttributes(ActionAttributeType.XPATH,\n-                        \"//a[contains(normalize-space(@class),'cl-s')]|//b[contains(normalize-space(@class),'cl-s')]\"),\n-                        \"By.xpath(//a[contains(@class,'cl-s')]|//b[contains(@class,'cl-s')]):v\"),\n-                Arguments.of(new SearchAttributes(ActionAttributeType.TAG_NAME, \"h1\"), \"By.tagName(h1)\"),\n-                Arguments.of(new SearchAttributes(ActionAttributeType.TAG_NAME, \"a\")\n-                        .addFilter(ActionAttributeType.TEXT_PART, TEXT), \"By.partiallinktext(text)\"),\n-                Arguments.of(new SearchAttributes(ActionAttributeType.LINK_URL, \"https://home.page\"),\n-                        \"By.linkUrl(https://home.page)\"),\n-                Arguments.of(new SearchAttributes(ActionAttributeType.LINK_URL_PART, \"part\"), \"By.linkUrlPart(part)\"),\n-                Arguments.of(new SearchAttributes(ActionAttributeType.FIELD_NAME, \"name\"), \"By.fieldName(name)\"),\n-                Arguments.of(new SearchAttributes(ActionAttributeType.CASE_SENSITIVE_TEXT, TEXT),\n-                        \"By.caseSensitiveText(text)\"),\n-                Arguments.of(new SearchAttributes(ActionAttributeType.CASE_INSENSITIVE_TEXT, \"teXt\"),\n-                        \"By.caseInsensitiveText(teXt)\"),\n-                Arguments.of(createAttributes(ActionAttributeType.ID, ID, Visibility.INVISIBLE,\n-                       ActionAttributeType.TEXT_PART, TEXT), \"By.id(id):i->filter.textPart(text)\"),\n-                Arguments.of(createAttributes(ActionAttributeType.ID, ID, Visibility.ALL,\n-                        ActionAttributeType.PLACEHOLDER, TEXT), \"By.id(id):all->filter.placeholder(text)\"),\n-                Arguments.of(createAttributes(ActionAttributeType.ID, ID, Visibility.INVISIBLE,\n-                        ActionAttributeType.DROP_DOWN_STATE, ENABLED), \"By.id(id):i->filter.dropDownState(enabled)\"),\n-                Arguments.of(createAttributes(ActionAttributeType.ID, ID, Visibility.INVISIBLE,\n-                        ActionAttributeType.DROP_DOWN_TEXT, TEXT), \"By.id(id):i->filter.dropDownText(text)\"),\n-                Arguments.of(createAttributes(ActionAttributeType.ID, ID, Visibility.INVISIBLE,\n-                        ActionAttributeType.VALIDATION_ICON_SOURCE, \"/src\"),\n-                        \"By.id(id):i->filter.validationICONsource(/src)\"),\n-                Arguments.of(createAttributes(ActionAttributeType.ID, ID, Visibility.INVISIBLE,\n-                        ActionAttributeType.RELATIVE_TO_PARENT_WIDTH, \"5\"),\n-                        \"By.id(id):i->filter.relativeToParentWidth(5)\"),\n-                Arguments.of(createAttributes(ActionAttributeType.ID, ID, Visibility.INVISIBLE,\n-                        ActionAttributeType.CLASS_ATTRIBUTE_PART, TEXT),\n-                        \"By.id(id):i->filter.classattributepart(text)\"),\n-                Arguments.of(createAttributes(ActionAttributeType.ID, ID, Visibility.INVISIBLE,\n-                        ActionAttributeType.FIELD_TEXT, TEXT), \"By.id(id):i->filter.fieldText(text)\"),\n-                Arguments.of(createAttributes(ActionAttributeType.ID, ID, Visibility.INVISIBLE,\n-                        ActionAttributeType.FIELD_TEXT_PART, TEXT), \"By.id(id):i->filter.fieldtextpart(text)\"),\n-                Arguments.of(createAttributes(ActionAttributeType.ID, ID, Visibility.INVISIBLE,\n-                        ActionAttributeType.STATE, ENABLED), \"By.id(id):i->filter.state(enabled)\"),\n-                Arguments.of(createAttributes(ActionAttributeType.ID, ID, Visibility.INVISIBLE,\n-                        ActionAttributeType.STATE, ENABLED).addFilter(ActionAttributeType.TEXT_PART, TEXT)\n-                        .addFilter(ActionAttributeType.CLASS_ATTRIBUTE_PART, \"clas\"),\n-                        \"By.id(id):i->filter.state(enabled).textPart(text).classattributepart(clas)\"));\n-    }\n-\n-    private static SearchAttributes createAttributes(ActionAttributeType type, String value, Visibility elementType)\n-    {\n-        SearchParameters searchParameters = new SearchParameters(value, elementType);\n-        return new SearchAttributes(type, searchParameters);\n-    }\n-\n-    private static SearchAttributes createAttributes(ActionAttributeType type, String value, Visibility elementType,\n-            ActionAttributeType filter, String filterValue)\n-    {\n-        return createAttributes(type, value, elementType).addFilter(filter, filterValue);\n-    }\n-}\n"}}, {"oid": "587d28893537cd7b3866feb2596ad8c45c6b9501", "url": "https://github.com/vividus-framework/vividus/commit/587d28893537cd7b3866feb2596ad8c45c6b9501", "message": "[plugin-web-app] Require visibility designator if colon separator is present", "committedDate": "2021-02-17T09:22:12Z", "type": "forcePushed"}, {"oid": "490e78305db8d05ee2c220ea9bf290d56173ae71", "url": "https://github.com/vividus-framework/vividus/commit/490e78305db8d05ee2c220ea9bf290d56173ae71", "message": "[plugin-web-app] Require visibility designator if colon separator is present", "committedDate": "2021-02-17T09:51:53Z", "type": "forcePushed"}, {"oid": "fbb8fdc972249cb3455482e964f6b90659a7b15f", "url": "https://github.com/vividus-framework/vividus/commit/fbb8fdc972249cb3455482e964f6b90659a7b15f", "message": "[plugin-web-app] Require visibility designator if colon separator is present", "committedDate": "2021-02-17T09:56:35Z", "type": "forcePushed"}, {"oid": "76ecee1f5c4e3b5ccd08686f90bc8f6d193158ff", "url": "https://github.com/vividus-framework/vividus/commit/76ecee1f5c4e3b5ccd08686f90bc8f6d193158ff", "message": "[plugin-web-app] Require visibility designator if colon separator is present", "committedDate": "2021-02-17T10:07:14Z", "type": "forcePushed"}, {"oid": "21848f45a8988bb5381c77e6894b54bf1ce15efa", "url": "https://github.com/vividus-framework/vividus/commit/21848f45a8988bb5381c77e6894b54bf1ce15efa", "message": "[plugin-web-app] Require visibility designator if colon separator is present", "committedDate": "2021-02-17T10:30:32Z", "type": "forcePushed"}, {"oid": "476c32a68724d901e4f5993781a20bf809e349a3", "url": "https://github.com/vividus-framework/vividus/commit/476c32a68724d901e4f5993781a20bf809e349a3", "message": "[plugin-web-app] Require visibility designator if colon separator is present", "committedDate": "2021-02-17T10:32:14Z", "type": "forcePushed"}, {"oid": "b9abe29777df8d8ce87ce3b7c72dad39972baecf", "url": "https://github.com/vividus-framework/vividus/commit/b9abe29777df8d8ce87ce3b7c72dad39972baecf", "message": "[plugin-web-app] Handle visibility designator if colon separator is present", "committedDate": "2021-02-17T10:43:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzU0MDI3OA==", "url": "https://github.com/vividus-framework/vividus/pull/873#discussion_r577540278", "bodyText": "Expected one of 'visible', 'invisible', 'all' ?", "author": "valfirst", "createdAt": "2021-02-17T11:36:45Z", "path": "vividus-extension-selenium/src/test/java/org/vividus/ui/util/LocatorConversionUtilsTests.java", "diffHunk": "@@ -105,6 +105,26 @@ void testConvertToLocatorInvalidFilterType()\n         assertEquals(\"Unsupported filter type: notFilter\", exception.getMessage());\n     }\n \n+    @Test\n+    void testConvertToLocatorInvalidVisibilityType()\n+    {\n+        when(service.getSearchLocatorTypes()).thenReturn(Set.of(TestLocatorType.SEARCH));\n+        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class,\n+            () -> utils.convertToLocator(\"By.search(id):invalid\"));\n+        assertEquals(\"Illegal visibility type 'invalid'. Expected one of visible, invisible, all\",", "originalCommit": "b9abe29777df8d8ce87ce3b7c72dad39972baecf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9c54d4e493a0c549c2eaeadca9c8e4308f93f10d", "chunk": "diff --git a/vividus-extension-selenium/src/test/java/org/vividus/ui/util/LocatorConversionUtilsTests.java b/vividus-extension-selenium/src/test/java/org/vividus/ui/util/LocatorConversionUtilsTests.java\nindex f71fbd40..c9abd1b3 100644\n--- a/vividus-extension-selenium/src/test/java/org/vividus/ui/util/LocatorConversionUtilsTests.java\n+++ b/vividus-extension-selenium/src/test/java/org/vividus/ui/util/LocatorConversionUtilsTests.java\n\n@@ -111,7 +111,7 @@ class LocatorConversionUtilsTests\n         when(service.getSearchLocatorTypes()).thenReturn(Set.of(TestLocatorType.SEARCH));\n         IllegalArgumentException exception = assertThrows(IllegalArgumentException.class,\n             () -> utils.convertToLocator(\"By.search(id):invalid\"));\n-        assertEquals(\"Illegal visibility type 'invalid'. Expected one of visible, invisible, all\",\n+        assertEquals(\"Illegal visibility type 'invalid'. Expected one of 'visible', 'invisible', 'all'\",\n                 exception.getMessage());\n     }\n \n"}}, {"oid": "9c54d4e493a0c549c2eaeadca9c8e4308f93f10d", "url": "https://github.com/vividus-framework/vividus/commit/9c54d4e493a0c549c2eaeadca9c8e4308f93f10d", "message": "[plugin-web-app] Handle visibility designator if colon separator is present", "committedDate": "2021-02-17T11:51:46Z", "type": "forcePushed"}, {"oid": "ff278e85210ec33f6946d7a572cf042f2ae2b5e8", "url": "https://github.com/vividus-framework/vividus/commit/ff278e85210ec33f6946d7a572cf042f2ae2b5e8", "message": "[plugin-web-app] Handle visibility designator if colon separator is present", "committedDate": "2021-02-17T11:53:09Z", "type": "forcePushed"}, {"oid": "ce6e1e7d897aeb6e7711bbacd242ba45f6d977e3", "url": "https://github.com/vividus-framework/vividus/commit/ce6e1e7d897aeb6e7711bbacd242ba45f6d977e3", "message": "[plugin-web-app] Handle visibility designator if colon separator is present", "committedDate": "2021-02-17T11:55:18Z", "type": "forcePushed"}, {"oid": "d479720b2934288c48f90f0d3de5f3c9ed05135c", "url": "https://github.com/vividus-framework/vividus/commit/d479720b2934288c48f90f0d3de5f3c9ed05135c", "message": "[plugin-web-app] Handle visibility designator if colon separator is present", "committedDate": "2021-02-17T12:36:09Z", "type": "commit"}, {"oid": "d479720b2934288c48f90f0d3de5f3c9ed05135c", "url": "https://github.com/vividus-framework/vividus/commit/d479720b2934288c48f90f0d3de5f3c9ed05135c", "message": "[plugin-web-app] Handle visibility designator if colon separator is present", "committedDate": "2021-02-17T12:36:09Z", "type": "forcePushed"}]}