{"pr_number": 522, "pr_title": "Add RESOLVING_SELF_REFERENCES_EAGERLY table transformer", "pr_createdAt": "2020-05-02T11:48:16Z", "pr_url": "https://github.com/vividus-framework/vividus/pull/522", "timeline": [{"oid": "637386cf11b785cd7ede51775656dbbbbcab22ac", "url": "https://github.com/vividus-framework/vividus/commit/637386cf11b785cd7ede51775656dbbbbcab22ac", "message": "Add RESOLVING_SELF_REFERENCES_EAGERLY table transformer", "committedDate": "2020-05-02T12:20:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA4OTUzOA==", "url": "https://github.com/vividus-framework/vividus/pull/522#discussion_r419089538", "bodyText": "should not it be thread safe?", "author": "uarlouski", "createdAt": "2020-05-03T11:28:32Z", "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.transformer;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.inject.Named;\n+\n+import org.jbehave.core.model.ExamplesTable.ExamplesTableProperties;\n+import org.jbehave.core.model.TableParsers;\n+import org.jbehave.core.steps.ParameterControls;\n+import org.vividus.bdd.util.ExamplesTableProcessor;\n+\n+@Named(\"RESOLVING_SELF_REFERENCES_EAGERLY\")\n+public class ResolvingSelfReferencesEagerlyTransformer implements ExtendedTableTransformer", "originalCommit": "637386cf11b785cd7ede51775656dbbbbcab22ac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "735474e3a36d5fc5728e0247111755f36e631ece", "chunk": "diff --git a/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java b/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java\nindex 05fc5aea..fa4a6e6d 100644\n--- a/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java\n+++ b/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java\n\n@@ -36,9 +36,6 @@ import org.vividus.bdd.util.ExamplesTableProcessor;\n public class ResolvingSelfReferencesEagerlyTransformer implements ExtendedTableTransformer\n {\n     private final ParameterControls parameterControls;\n-    private Map<String, String> valuesToResolve;\n-    private Map<String, String> resolvedValues;\n-    private Pattern placeholderPattern;\n \n     public ResolvingSelfReferencesEagerlyTransformer(ParameterControls parameterControls)\n     {\n"}}, {"oid": "735474e3a36d5fc5728e0247111755f36e631ece", "url": "https://github.com/vividus-framework/vividus/commit/735474e3a36d5fc5728e0247111755f36e631ece", "message": "Create inner class to make it thread-safe", "committedDate": "2020-05-05T05:38:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg4NDI3MA==", "url": "https://github.com/vividus-framework/vividus/pull/522#discussion_r419884270", "bodyText": "just org.jbehave.core.steps.ParameterControls.createDelimitedName(String) ?", "author": "valfirst", "createdAt": "2020-05-05T06:16:04Z", "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.transformer;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.inject.Named;\n+\n+import org.jbehave.core.model.ExamplesTable.ExamplesTableProperties;\n+import org.jbehave.core.model.TableParsers;\n+import org.jbehave.core.steps.ParameterControls;\n+import org.vividus.bdd.util.ExamplesTableProcessor;\n+\n+@Named(\"RESOLVING_SELF_REFERENCES_EAGERLY\")\n+public class ResolvingSelfReferencesEagerlyTransformer implements ExtendedTableTransformer\n+{\n+    private final ParameterControls parameterControls;\n+\n+    public ResolvingSelfReferencesEagerlyTransformer(ParameterControls parameterControls)\n+    {\n+        this.parameterControls = parameterControls;\n+    }\n+\n+    @Override\n+    public String transform(String tableAsString, TableParsers tableParsers, ExamplesTableProperties properties)\n+    {\n+        List<String> tableAsRows = ExamplesTableProcessor.parseRows(tableAsString);\n+        List<String> header = tableParsers.parseRow(tableAsRows.get(0), true, properties);\n+        List<List<String>> inputRows = ExamplesTableProcessor.parseDataRows(tableAsRows, tableParsers, properties);\n+        SelfReferencesResolver resolver = new SelfReferencesResolver();\n+        List<List<String>> resolvedRows = inputRows.stream().map(dataRow -> resolver.resolveRow(dataRow, header))\n+                .collect(Collectors.toList());\n+        return ExamplesTableProcessor.buildExamplesTable(header, resolvedRows, properties, true);\n+    }\n+\n+    private final class SelfReferencesResolver\n+    {\n+        private Map<String, String> valuesToResolve;\n+        private Map<String, String> resolvedValues;\n+        private final Pattern placeholderPattern;\n+\n+        private SelfReferencesResolver()\n+        {\n+            placeholderPattern = Pattern.compile(addDelimiters(\"(.*?)\"));\n+        }\n+\n+        private List<String> resolveRow(List<String> row, List<String> header)\n+        {\n+            resolvedValues = new HashMap<>();\n+            int range = Integer.min(row.size(), header.size());\n+            valuesToResolve = IntStream.range(0, range).boxed().collect(Collectors.toMap(header::get, row::get));\n+            List<String> result = new ArrayList<>();\n+            for (int i = 0; i < range; i++)\n+            {\n+                String key = header.get(i);\n+                resolveValue(key);\n+                result.add(resolvedValues.get(key));\n+            }\n+            return result;\n+        }\n+\n+        private void resolveValue(String key)\n+        {\n+            if (alreadyResolved(key))\n+            {\n+                return;\n+            }\n+            String valueToResolve = valuesToResolve.get(key);\n+            boolean toBeResolved = valueToResolve != null;\n+            if (!toBeResolved)\n+            {\n+                putPlaceholderWithoutResolving(key);\n+                return;\n+            }\n+            resolvedValues.put(key, valueToResolve);\n+            resolveValue(key, valueToResolve);\n+        }\n+\n+        private void resolveValue(String key, String valueToResolve)\n+        {\n+            String result = valueToResolve;\n+            Matcher matcher = placeholderPattern.matcher(result);\n+            while (matcher.find())\n+            {\n+                String placeholder = matcher.group(1);\n+                if (!placeholder.equals(key))\n+                {\n+                    resolveValue(placeholder);\n+                    result = parameterControls\n+                            .replaceAllDelimitedNames(result, placeholder, resolvedValues.get(placeholder));\n+                }\n+            }\n+            resolvedValues.put(key, result);\n+        }\n+\n+        private void putPlaceholderWithoutResolving(String key)\n+        {\n+            resolvedValues.put(key, addDelimiters(key));\n+        }\n+\n+        private boolean alreadyResolved(String key)\n+        {\n+            return resolvedValues.containsKey(key);\n+        }\n+\n+        private String addDelimiters(String s)\n+        {\n+            return parameterControls.nameDelimiterLeft() + s + parameterControls.nameDelimiterRight();", "originalCommit": "735474e3a36d5fc5728e0247111755f36e631ece", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkxNzM2MQ==", "url": "https://github.com/vividus-framework/vividus/pull/522#discussion_r419917361", "bodyText": "org.jbehave.core.steps.ParameterControls.createDelimitedName(String) has a private access modifier", "author": "Yauhenda", "createdAt": "2020-05-05T07:37:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg4NDI3MA=="}], "type": "inlineReview", "revised_code": {"commit": "1ae8f2597425af6778a78190a3ddf11cc422dca3", "chunk": "diff --git a/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java b/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java\nindex fa4a6e6d..25877c8a 100644\n--- a/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java\n+++ b/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java\n\n@@ -57,17 +57,12 @@ public class ResolvingSelfReferencesEagerlyTransformer implements ExtendedTableT\n     private final class SelfReferencesResolver\n     {\n         private Map<String, String> valuesToResolve;\n-        private Map<String, String> resolvedValues;\n-        private final Pattern placeholderPattern;\n-\n-        private SelfReferencesResolver()\n-        {\n-            placeholderPattern = Pattern.compile(addDelimiters(\"(.*?)\"));\n-        }\n+        private final Map<String, String> resolvedValues = new HashMap<>();\n+        private final Pattern placeholderPattern = Pattern.compile(addDelimiters(\"(.*?)\"));\n \n         private List<String> resolveRow(List<String> row, List<String> header)\n         {\n-            resolvedValues = new HashMap<>();\n+            resolvedValues.clear();\n             int range = Integer.min(row.size(), header.size());\n             valuesToResolve = IntStream.range(0, range).boxed().collect(Collectors.toMap(header::get, row::get));\n             List<String> result = new ArrayList<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg5MjQ5NA==", "url": "https://github.com/vividus-framework/vividus/pull/522#discussion_r419892494", "bodyText": "this should be converted to a final field of transformer to avoid pattern re-compilation for each table row", "author": "valfirst", "createdAt": "2020-05-05T06:37:36Z", "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.transformer;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.inject.Named;\n+\n+import org.jbehave.core.model.ExamplesTable.ExamplesTableProperties;\n+import org.jbehave.core.model.TableParsers;\n+import org.jbehave.core.steps.ParameterControls;\n+import org.vividus.bdd.util.ExamplesTableProcessor;\n+\n+@Named(\"RESOLVING_SELF_REFERENCES_EAGERLY\")\n+public class ResolvingSelfReferencesEagerlyTransformer implements ExtendedTableTransformer\n+{\n+    private final ParameterControls parameterControls;\n+\n+    public ResolvingSelfReferencesEagerlyTransformer(ParameterControls parameterControls)\n+    {\n+        this.parameterControls = parameterControls;\n+    }\n+\n+    @Override\n+    public String transform(String tableAsString, TableParsers tableParsers, ExamplesTableProperties properties)\n+    {\n+        List<String> tableAsRows = ExamplesTableProcessor.parseRows(tableAsString);\n+        List<String> header = tableParsers.parseRow(tableAsRows.get(0), true, properties);\n+        List<List<String>> inputRows = ExamplesTableProcessor.parseDataRows(tableAsRows, tableParsers, properties);\n+        SelfReferencesResolver resolver = new SelfReferencesResolver();\n+        List<List<String>> resolvedRows = inputRows.stream().map(dataRow -> resolver.resolveRow(dataRow, header))\n+                .collect(Collectors.toList());\n+        return ExamplesTableProcessor.buildExamplesTable(header, resolvedRows, properties, true);\n+    }\n+\n+    private final class SelfReferencesResolver\n+    {\n+        private Map<String, String> valuesToResolve;\n+        private Map<String, String> resolvedValues;\n+        private final Pattern placeholderPattern;\n+\n+        private SelfReferencesResolver()\n+        {\n+            placeholderPattern = Pattern.compile(addDelimiters(\"(.*?)\"));", "originalCommit": "735474e3a36d5fc5728e0247111755f36e631ece", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1ae8f2597425af6778a78190a3ddf11cc422dca3", "chunk": "diff --git a/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java b/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java\nindex fa4a6e6d..25877c8a 100644\n--- a/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java\n+++ b/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java\n\n@@ -57,17 +57,12 @@ public class ResolvingSelfReferencesEagerlyTransformer implements ExtendedTableT\n     private final class SelfReferencesResolver\n     {\n         private Map<String, String> valuesToResolve;\n-        private Map<String, String> resolvedValues;\n-        private final Pattern placeholderPattern;\n-\n-        private SelfReferencesResolver()\n-        {\n-            placeholderPattern = Pattern.compile(addDelimiters(\"(.*?)\"));\n-        }\n+        private final Map<String, String> resolvedValues = new HashMap<>();\n+        private final Pattern placeholderPattern = Pattern.compile(addDelimiters(\"(.*?)\"));\n \n         private List<String> resolveRow(List<String> row, List<String> header)\n         {\n-            resolvedValues = new HashMap<>();\n+            resolvedValues.clear();\n             int range = Integer.min(row.size(), header.size());\n             valuesToResolve = IntStream.range(0, range).boxed().collect(Collectors.toMap(header::get, row::get));\n             List<String> result = new ArrayList<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg5Mjg4OA==", "url": "https://github.com/vividus-framework/vividus/pull/522#discussion_r419892888", "bodyText": "init this field at its declaration", "author": "valfirst", "createdAt": "2020-05-05T06:38:33Z", "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.transformer;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.inject.Named;\n+\n+import org.jbehave.core.model.ExamplesTable.ExamplesTableProperties;\n+import org.jbehave.core.model.TableParsers;\n+import org.jbehave.core.steps.ParameterControls;\n+import org.vividus.bdd.util.ExamplesTableProcessor;\n+\n+@Named(\"RESOLVING_SELF_REFERENCES_EAGERLY\")\n+public class ResolvingSelfReferencesEagerlyTransformer implements ExtendedTableTransformer\n+{\n+    private final ParameterControls parameterControls;\n+\n+    public ResolvingSelfReferencesEagerlyTransformer(ParameterControls parameterControls)\n+    {\n+        this.parameterControls = parameterControls;\n+    }\n+\n+    @Override\n+    public String transform(String tableAsString, TableParsers tableParsers, ExamplesTableProperties properties)\n+    {\n+        List<String> tableAsRows = ExamplesTableProcessor.parseRows(tableAsString);\n+        List<String> header = tableParsers.parseRow(tableAsRows.get(0), true, properties);\n+        List<List<String>> inputRows = ExamplesTableProcessor.parseDataRows(tableAsRows, tableParsers, properties);\n+        SelfReferencesResolver resolver = new SelfReferencesResolver();\n+        List<List<String>> resolvedRows = inputRows.stream().map(dataRow -> resolver.resolveRow(dataRow, header))\n+                .collect(Collectors.toList());\n+        return ExamplesTableProcessor.buildExamplesTable(header, resolvedRows, properties, true);\n+    }\n+\n+    private final class SelfReferencesResolver\n+    {\n+        private Map<String, String> valuesToResolve;\n+        private Map<String, String> resolvedValues;\n+        private final Pattern placeholderPattern;\n+\n+        private SelfReferencesResolver()\n+        {\n+            placeholderPattern = Pattern.compile(addDelimiters(\"(.*?)\"));\n+        }\n+\n+        private List<String> resolveRow(List<String> row, List<String> header)\n+        {\n+            resolvedValues = new HashMap<>();", "originalCommit": "735474e3a36d5fc5728e0247111755f36e631ece", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1ae8f2597425af6778a78190a3ddf11cc422dca3", "chunk": "diff --git a/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java b/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java\nindex fa4a6e6d..25877c8a 100644\n--- a/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java\n+++ b/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java\n\n@@ -57,17 +57,12 @@ public class ResolvingSelfReferencesEagerlyTransformer implements ExtendedTableT\n     private final class SelfReferencesResolver\n     {\n         private Map<String, String> valuesToResolve;\n-        private Map<String, String> resolvedValues;\n-        private final Pattern placeholderPattern;\n-\n-        private SelfReferencesResolver()\n-        {\n-            placeholderPattern = Pattern.compile(addDelimiters(\"(.*?)\"));\n-        }\n+        private final Map<String, String> resolvedValues = new HashMap<>();\n+        private final Pattern placeholderPattern = Pattern.compile(addDelimiters(\"(.*?)\"));\n \n         private List<String> resolveRow(List<String> row, List<String> header)\n         {\n-            resolvedValues = new HashMap<>();\n+            resolvedValues.clear();\n             int range = Integer.min(row.size(), header.size());\n             valuesToResolve = IntStream.range(0, range).boxed().collect(Collectors.toMap(header::get, row::get));\n             List<String> result = new ArrayList<>();\n"}}, {"oid": "1ae8f2597425af6778a78190a3ddf11cc422dca3", "url": "https://github.com/vividus-framework/vividus/commit/1ae8f2597425af6778a78190a3ddf11cc422dca3", "message": "Add RESOLVING_SELF_REFERENCES_EAGERLY table transformer", "committedDate": "2020-05-05T16:23:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI0NTM4MQ==", "url": "https://github.com/vividus-framework/vividus/pull/522#discussion_r420245381", "bodyText": "it should be placed between before  useParameterConverters since ParameterConvertersDecorator constructor uses ParameterControls", "author": "valfirst", "createdAt": "2020-05-05T16:33:03Z", "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/spring/ExtendedConfiguration.java", "diffHunk": "@@ -71,6 +73,7 @@ public void init() throws IOException\n         customTableTransformers.forEach(transformers::useTransformer);\n         useStepMonitor(new DelegatingStepMonitor(stepMonitors));\n         useStoryControls(storyControls);\n+        useParameterControls(parameterControls);", "originalCommit": "1ae8f2597425af6778a78190a3ddf11cc422dca3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "384fdefba1ff157435ee7ef0f20c2c6a080755e6", "chunk": "diff --git a/vividus-bdd-engine/src/main/java/org/vividus/bdd/spring/ExtendedConfiguration.java b/vividus-bdd-engine/src/main/java/org/vividus/bdd/spring/ExtendedConfiguration.java\nindex eee97799..4ccfae69 100644\n--- a/vividus-bdd-engine/src/main/java/org/vividus/bdd/spring/ExtendedConfiguration.java\n+++ b/vividus-bdd-engine/src/main/java/org/vividus/bdd/spring/ExtendedConfiguration.java\n\n@@ -66,6 +66,7 @@ public class ExtendedConfiguration extends Configuration\n     {\n         initKeywords();\n         initCompositePaths();\n+        useParameterControls(parameterControls);\n         useParameterConverters(new ParameterConvertersDecorator(this, parameterAdaptor, expressionAdaptor)\n                 .addConverters(customConverters));\n         useStoryParser(new RegexStoryParser(keywords(), examplesTableFactory()));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI0Njc5NQ==", "url": "https://github.com/vividus-framework/vividus/pull/522#discussion_r420246795", "bodyText": "that's still not optimal, every new instance of SelfReferencesResolver will lead to regex compilation, so it should be a field of transformer class ResolvingSelfReferencesEagerlyTransformer", "author": "valfirst", "createdAt": "2020-05-05T16:34:51Z", "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.transformer;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.inject.Named;\n+\n+import org.jbehave.core.model.ExamplesTable.ExamplesTableProperties;\n+import org.jbehave.core.model.TableParsers;\n+import org.jbehave.core.steps.ParameterControls;\n+import org.vividus.bdd.util.ExamplesTableProcessor;\n+\n+@Named(\"RESOLVING_SELF_REFERENCES_EAGERLY\")\n+public class ResolvingSelfReferencesEagerlyTransformer implements ExtendedTableTransformer\n+{\n+    private final ParameterControls parameterControls;\n+\n+    public ResolvingSelfReferencesEagerlyTransformer(ParameterControls parameterControls)\n+    {\n+        this.parameterControls = parameterControls;\n+    }\n+\n+    @Override\n+    public String transform(String tableAsString, TableParsers tableParsers, ExamplesTableProperties properties)\n+    {\n+        List<String> tableAsRows = ExamplesTableProcessor.parseRows(tableAsString);\n+        List<String> header = tableParsers.parseRow(tableAsRows.get(0), true, properties);\n+        List<List<String>> inputRows = ExamplesTableProcessor.parseDataRows(tableAsRows, tableParsers, properties);\n+        SelfReferencesResolver resolver = new SelfReferencesResolver();\n+        List<List<String>> resolvedRows = inputRows.stream().map(dataRow -> resolver.resolveRow(dataRow, header))\n+                .collect(Collectors.toList());\n+        return ExamplesTableProcessor.buildExamplesTable(header, resolvedRows, properties, true);\n+    }\n+\n+    private final class SelfReferencesResolver\n+    {\n+        private Map<String, String> valuesToResolve;\n+        private final Map<String, String> resolvedValues = new HashMap<>();\n+        private final Pattern placeholderPattern = Pattern.compile(addDelimiters(\"(.*?)\"));", "originalCommit": "1ae8f2597425af6778a78190a3ddf11cc422dca3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "384fdefba1ff157435ee7ef0f20c2c6a080755e6", "chunk": "diff --git a/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java b/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java\nindex 25877c8a..6c709a1a 100644\n--- a/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java\n+++ b/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java\n\n@@ -36,10 +36,12 @@ import org.vividus.bdd.util.ExamplesTableProcessor;\n public class ResolvingSelfReferencesEagerlyTransformer implements ExtendedTableTransformer\n {\n     private final ParameterControls parameterControls;\n+    private final Pattern placeholderPattern;\n \n     public ResolvingSelfReferencesEagerlyTransformer(ParameterControls parameterControls)\n     {\n         this.parameterControls = parameterControls;\n+        placeholderPattern = Pattern.compile(addDelimiters(\"(.*?)\"));\n     }\n \n     @Override\n"}}, {"oid": "384fdefba1ff157435ee7ef0f20c2c6a080755e6", "url": "https://github.com/vividus-framework/vividus/commit/384fdefba1ff157435ee7ef0f20c2c6a080755e6", "message": "Add RESOLVING_SELF_REFERENCES_EAGERLY table transformer", "committedDate": "2020-05-05T17:05:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU3Mjc1NQ==", "url": "https://github.com/vividus-framework/vividus/pull/522#discussion_r420572755", "bodyText": "Does it reflect JBehave's behavior for not aligned tables?", "author": "ikalinin1", "createdAt": "2020-05-06T06:37:24Z", "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.transformer;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.inject.Named;\n+\n+import org.jbehave.core.model.ExamplesTable.ExamplesTableProperties;\n+import org.jbehave.core.model.TableParsers;\n+import org.jbehave.core.steps.ParameterControls;\n+import org.vividus.bdd.util.ExamplesTableProcessor;\n+\n+@Named(\"RESOLVING_SELF_REFERENCES_EAGERLY\")\n+public class ResolvingSelfReferencesEagerlyTransformer implements ExtendedTableTransformer\n+{\n+    private final ParameterControls parameterControls;\n+    private final Pattern placeholderPattern;\n+\n+    public ResolvingSelfReferencesEagerlyTransformer(ParameterControls parameterControls)\n+    {\n+        this.parameterControls = parameterControls;\n+        placeholderPattern = Pattern.compile(addDelimiters(\"(.*?)\"));\n+    }\n+\n+    @Override\n+    public String transform(String tableAsString, TableParsers tableParsers, ExamplesTableProperties properties)\n+    {\n+        List<String> tableAsRows = ExamplesTableProcessor.parseRows(tableAsString);\n+        List<String> header = tableParsers.parseRow(tableAsRows.get(0), true, properties);\n+        List<List<String>> inputRows = ExamplesTableProcessor.parseDataRows(tableAsRows, tableParsers, properties);\n+        SelfReferencesResolver resolver = new SelfReferencesResolver();\n+        List<List<String>> resolvedRows = inputRows.stream().map(dataRow -> resolver.resolveRow(dataRow, header))\n+                .collect(Collectors.toList());\n+        return ExamplesTableProcessor.buildExamplesTable(header, resolvedRows, properties, true);\n+    }\n+\n+    private String addDelimiters(String s)\n+    {\n+        return parameterControls.nameDelimiterLeft() + s + parameterControls.nameDelimiterRight();\n+    }\n+\n+    private final class SelfReferencesResolver\n+    {\n+        private Map<String, String> valuesToResolve;\n+        private final Map<String, String> resolvedValues = new HashMap<>();\n+\n+        private List<String> resolveRow(List<String> row, List<String> header)\n+        {\n+            resolvedValues.clear();\n+            int range = Integer.min(row.size(), header.size());\n+            valuesToResolve = IntStream.range(0, range).boxed().collect(Collectors.toMap(header::get, row::get));", "originalCommit": "384fdefba1ff157435ee7ef0f20c2c6a080755e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUxNjg0MQ==", "url": "https://github.com/vividus-framework/vividus/pull/522#discussion_r421516841", "bodyText": "Yes it reflect. I add it to integration tests", "author": "Yauhenda", "createdAt": "2020-05-07T13:47:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU3Mjc1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "e1249f48dbe2daca8ed49c41301b97c0dad604b8", "chunk": "diff --git a/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java b/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java\nindex 6c709a1a..4b9f3dfd 100644\n--- a/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java\n+++ b/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java\n\n@@ -50,9 +50,8 @@ public class ResolvingSelfReferencesEagerlyTransformer implements ExtendedTableT\n         List<String> tableAsRows = ExamplesTableProcessor.parseRows(tableAsString);\n         List<String> header = tableParsers.parseRow(tableAsRows.get(0), true, properties);\n         List<List<String>> inputRows = ExamplesTableProcessor.parseDataRows(tableAsRows, tableParsers, properties);\n-        SelfReferencesResolver resolver = new SelfReferencesResolver();\n-        List<List<String>> resolvedRows = inputRows.stream().map(dataRow -> resolver.resolveRow(dataRow, header))\n-                .collect(Collectors.toList());\n+        SelfReferencesResolver resolver = new SelfReferencesResolver(header);\n+        List<List<String>> resolvedRows = inputRows.stream().map(resolver::resolveRow).collect(Collectors.toList());\n         return ExamplesTableProcessor.buildExamplesTable(header, resolvedRows, properties, true);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU3NTM2OA==", "url": "https://github.com/vividus-framework/vividus/pull/522#discussion_r420575368", "bodyText": "unresolvedRow ?", "author": "ikalinin1", "createdAt": "2020-05-06T06:44:31Z", "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.transformer;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.inject.Named;\n+\n+import org.jbehave.core.model.ExamplesTable.ExamplesTableProperties;\n+import org.jbehave.core.model.TableParsers;\n+import org.jbehave.core.steps.ParameterControls;\n+import org.vividus.bdd.util.ExamplesTableProcessor;\n+\n+@Named(\"RESOLVING_SELF_REFERENCES_EAGERLY\")\n+public class ResolvingSelfReferencesEagerlyTransformer implements ExtendedTableTransformer\n+{\n+    private final ParameterControls parameterControls;\n+    private final Pattern placeholderPattern;\n+\n+    public ResolvingSelfReferencesEagerlyTransformer(ParameterControls parameterControls)\n+    {\n+        this.parameterControls = parameterControls;\n+        placeholderPattern = Pattern.compile(addDelimiters(\"(.*?)\"));\n+    }\n+\n+    @Override\n+    public String transform(String tableAsString, TableParsers tableParsers, ExamplesTableProperties properties)\n+    {\n+        List<String> tableAsRows = ExamplesTableProcessor.parseRows(tableAsString);\n+        List<String> header = tableParsers.parseRow(tableAsRows.get(0), true, properties);\n+        List<List<String>> inputRows = ExamplesTableProcessor.parseDataRows(tableAsRows, tableParsers, properties);\n+        SelfReferencesResolver resolver = new SelfReferencesResolver();\n+        List<List<String>> resolvedRows = inputRows.stream().map(dataRow -> resolver.resolveRow(dataRow, header))\n+                .collect(Collectors.toList());\n+        return ExamplesTableProcessor.buildExamplesTable(header, resolvedRows, properties, true);\n+    }\n+\n+    private String addDelimiters(String s)\n+    {\n+        return parameterControls.nameDelimiterLeft() + s + parameterControls.nameDelimiterRight();\n+    }\n+\n+    private final class SelfReferencesResolver\n+    {\n+        private Map<String, String> valuesToResolve;", "originalCommit": "384fdefba1ff157435ee7ef0f20c2c6a080755e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e1249f48dbe2daca8ed49c41301b97c0dad604b8", "chunk": "diff --git a/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java b/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java\nindex 6c709a1a..4b9f3dfd 100644\n--- a/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java\n+++ b/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java\n\n@@ -50,9 +50,8 @@ public class ResolvingSelfReferencesEagerlyTransformer implements ExtendedTableT\n         List<String> tableAsRows = ExamplesTableProcessor.parseRows(tableAsString);\n         List<String> header = tableParsers.parseRow(tableAsRows.get(0), true, properties);\n         List<List<String>> inputRows = ExamplesTableProcessor.parseDataRows(tableAsRows, tableParsers, properties);\n-        SelfReferencesResolver resolver = new SelfReferencesResolver();\n-        List<List<String>> resolvedRows = inputRows.stream().map(dataRow -> resolver.resolveRow(dataRow, header))\n-                .collect(Collectors.toList());\n+        SelfReferencesResolver resolver = new SelfReferencesResolver(header);\n+        List<List<String>> resolvedRows = inputRows.stream().map(resolver::resolveRow).collect(Collectors.toList());\n         return ExamplesTableProcessor.buildExamplesTable(header, resolvedRows, properties, true);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU3NTUyMA==", "url": "https://github.com/vividus-framework/vividus/pull/522#discussion_r420575520", "bodyText": "resolvedRow", "author": "ikalinin1", "createdAt": "2020-05-06T06:44:56Z", "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.transformer;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.inject.Named;\n+\n+import org.jbehave.core.model.ExamplesTable.ExamplesTableProperties;\n+import org.jbehave.core.model.TableParsers;\n+import org.jbehave.core.steps.ParameterControls;\n+import org.vividus.bdd.util.ExamplesTableProcessor;\n+\n+@Named(\"RESOLVING_SELF_REFERENCES_EAGERLY\")\n+public class ResolvingSelfReferencesEagerlyTransformer implements ExtendedTableTransformer\n+{\n+    private final ParameterControls parameterControls;\n+    private final Pattern placeholderPattern;\n+\n+    public ResolvingSelfReferencesEagerlyTransformer(ParameterControls parameterControls)\n+    {\n+        this.parameterControls = parameterControls;\n+        placeholderPattern = Pattern.compile(addDelimiters(\"(.*?)\"));\n+    }\n+\n+    @Override\n+    public String transform(String tableAsString, TableParsers tableParsers, ExamplesTableProperties properties)\n+    {\n+        List<String> tableAsRows = ExamplesTableProcessor.parseRows(tableAsString);\n+        List<String> header = tableParsers.parseRow(tableAsRows.get(0), true, properties);\n+        List<List<String>> inputRows = ExamplesTableProcessor.parseDataRows(tableAsRows, tableParsers, properties);\n+        SelfReferencesResolver resolver = new SelfReferencesResolver();\n+        List<List<String>> resolvedRows = inputRows.stream().map(dataRow -> resolver.resolveRow(dataRow, header))\n+                .collect(Collectors.toList());\n+        return ExamplesTableProcessor.buildExamplesTable(header, resolvedRows, properties, true);\n+    }\n+\n+    private String addDelimiters(String s)\n+    {\n+        return parameterControls.nameDelimiterLeft() + s + parameterControls.nameDelimiterRight();\n+    }\n+\n+    private final class SelfReferencesResolver\n+    {\n+        private Map<String, String> valuesToResolve;\n+        private final Map<String, String> resolvedValues = new HashMap<>();", "originalCommit": "384fdefba1ff157435ee7ef0f20c2c6a080755e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e1249f48dbe2daca8ed49c41301b97c0dad604b8", "chunk": "diff --git a/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java b/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java\nindex 6c709a1a..4b9f3dfd 100644\n--- a/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java\n+++ b/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java\n\n@@ -50,9 +50,8 @@ public class ResolvingSelfReferencesEagerlyTransformer implements ExtendedTableT\n         List<String> tableAsRows = ExamplesTableProcessor.parseRows(tableAsString);\n         List<String> header = tableParsers.parseRow(tableAsRows.get(0), true, properties);\n         List<List<String>> inputRows = ExamplesTableProcessor.parseDataRows(tableAsRows, tableParsers, properties);\n-        SelfReferencesResolver resolver = new SelfReferencesResolver();\n-        List<List<String>> resolvedRows = inputRows.stream().map(dataRow -> resolver.resolveRow(dataRow, header))\n-                .collect(Collectors.toList());\n+        SelfReferencesResolver resolver = new SelfReferencesResolver(header);\n+        List<List<String>> resolvedRows = inputRows.stream().map(resolver::resolveRow).collect(Collectors.toList());\n         return ExamplesTableProcessor.buildExamplesTable(header, resolvedRows, properties, true);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU3NjUxOA==", "url": "https://github.com/vividus-framework/vividus/pull/522#discussion_r420576518", "bodyText": "so this is one parametrized test, perfectly aligned and easier to read?\n{ \"|A|B|C|\\n|a||c|\", \"|A|B|C|\\n|a|a|c|\" ...}", "author": "ikalinin1", "createdAt": "2020-05-06T06:47:43Z", "path": "vividus-bdd-engine/src/test/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformerTests.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.transformer;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.util.Properties;\n+\n+import org.jbehave.core.model.ExamplesTable;\n+import org.jbehave.core.model.TableParsers;\n+import org.jbehave.core.steps.ParameterControls;\n+import org.junit.jupiter.api.Test;\n+\n+class ResolvingSelfReferencesEagerlyTransformerTests\n+{\n+    private final ResolvingSelfReferencesEagerlyTransformer transformer = new ResolvingSelfReferencesEagerlyTransformer(\n+            new ParameterControls());\n+\n+    @Test\n+    void shouldTransform()", "originalCommit": "384fdefba1ff157435ee7ef0f20c2c6a080755e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e1249f48dbe2daca8ed49c41301b97c0dad604b8", "chunk": "diff --git a/vividus-bdd-engine/src/test/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformerTests.java b/vividus-bdd-engine/src/test/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformerTests.java\nindex 62eeba71..f6c01acf 100644\n--- a/vividus-bdd-engine/src/test/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformerTests.java\n+++ b/vividus-bdd-engine/src/test/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformerTests.java\n\n@@ -23,84 +23,31 @@ import java.util.Properties;\n import org.jbehave.core.model.ExamplesTable;\n import org.jbehave.core.model.TableParsers;\n import org.jbehave.core.steps.ParameterControls;\n-import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.CsvSource;\n \n class ResolvingSelfReferencesEagerlyTransformerTests\n {\n     private final ResolvingSelfReferencesEagerlyTransformer transformer = new ResolvingSelfReferencesEagerlyTransformer(\n             new ParameterControls());\n \n-    @Test\n-    void shouldTransform()\n+    @ParameterizedTest\n+    @CsvSource({\n+            \"'|A|B|C|\\n|a|<A>|c|',                     '|A|B|C|\\n|a|a|c|'\",\n+            \"'|A|B|C|\\n|a1|<A>|c1|\\n|a2|<A>|c2|',      '|A|B|C|\\n|a1|a1|c1|\\n|a2|a2|c2|'\",\n+            \"'|A|B|C|D|E|F|\\n|<C>|<A>|c|<F>|<D>|<B>|', '|A|B|C|D|E|F|\\n|c|c|c|c|c|c|'\",\n+            \"'|A|B|C|\\n|<B>|<A>|c|',                   '|A|B|C|\\n|<B>|<B>|c|'\",\n+            \"'|A|B|C|\\n|a|<A><C>|c|',                  '|A|B|C|\\n|a|ac|c|'\",\n+            \"'|A|B|C|\\n|a<p>|<p><A>|c|',               '|A|B|C|\\n|a<p>|<p>a<p>|c|'\",\n+            \"'|A|B|C|\\n|a|<A>|',                       '|A|B|C|\\n|a|a|'\",\n+            \"'|A|B|\\n|a|<A>|c|',                       '|A|B|\\n|a|a|'\",\n+            \"'|A|B|C|\\n|a|<<A>>|c|',                   '|A|B|C|\\n|a|<<A>>|c|'\"\n+    })\n+    void shouldTransform(String beforeTransform, String expectedResult)\n     {\n-        String beforeTransform = \"|A|B|C|\\n|a|<A>|c|\";\n-        String expectedResult = \"|A|B|C|\\n|a|a|c|\";\n         assertEquals(expectedResult, transform(beforeTransform));\n     }\n \n-    @Test\n-    void shouldTransformRowsIndependently()\n-    {\n-        String beforeTransform = \"|A|B|C|\\n|a1|<A>|c1|\\n|a2|<A>|c2|\";\n-        String expectedResult = \"|A|B|C|\\n|a1|a1|c1|\\n|a2|a2|c2|\";\n-        assertEquals(expectedResult, transform(beforeTransform));\n-    }\n-\n-    @Test\n-    void shouldTransformChain()\n-    {\n-        String beforeTransform = \"|A|B|C|D|E|F|\\n|<C>|<A>|c|<F>|<D>|<B>|\";\n-        String expectedResult = \"|A|B|C|D|E|F|\\n|c|c|c|c|c|c|\";\n-        assertEquals(expectedResult, transform(beforeTransform));\n-    }\n-\n-    @Test\n-    void shouldNotFallInfiniteLoop()\n-    {\n-        String beforeTransform = \"|A|B|C|\\n|<B>|<A>|c|\";\n-        String expectedResult = \"|A|B|C|\\n|<B>|<B>|c|\";\n-        assertEquals(expectedResult, transform(beforeTransform));\n-    }\n-\n-    @Test\n-    void shouldTransformMultiplePlaceholders()\n-    {\n-        String beforeTransform = \"|A|B|C|\\n|a|<A><C>|c|\";\n-        String expectedResult = \"|A|B|C|\\n|a|ac|c|\";\n-        assertEquals(expectedResult, transform(beforeTransform));\n-    }\n-\n-    @Test\n-    void shouldNotTransformOtherPlaceholders()\n-    {\n-        String beforeTransform = \"|A|B|C|\\n|a<p>|<p><A>|c|\";\n-        String expectedResult = \"|A|B|C|\\n|a<p>|<p>a<p>|c|\";\n-        assertEquals(expectedResult, transform(beforeTransform));\n-    }\n-\n-    @Test\n-    void shouldNotFallIfHeaderLonger()\n-    {\n-        String beforeTransform = \"|A|B|C|\\n|a|<A>|\";\n-        String expectedResult = \"|A|B|C|\\n|a|a|\";\n-        assertEquals(expectedResult, transform(beforeTransform));\n-    }\n-\n-    @Test\n-    void shouldNotFallIfRowLonger()\n-    {\n-        String beforeTransform = \"|A|B|\\n|a|<A>|c|\";\n-        String expectedResult = \"|A|B|\\n|a|a|\";\n-        assertEquals(expectedResult, transform(beforeTransform));\n-    }\n-\n-    @Test\n-    void shouldNotTransformNested()\n-    {\n-        String beforeTransform = \"|A|B|C|\\n|a|<<A>>|c|\";\n-        assertEquals(beforeTransform, transform(beforeTransform));\n-    }\n-\n     private String transform(String beforeTransform)\n     {\n         return transformer.transform(beforeTransform, new TableParsers(),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU3ODUwOA==", "url": "https://github.com/vividus-framework/vividus/pull/522#discussion_r420578508", "bodyText": "java.util.Map.computeIfAbsent ?", "author": "ikalinin1", "createdAt": "2020-05-06T06:52:59Z", "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.transformer;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.inject.Named;\n+\n+import org.jbehave.core.model.ExamplesTable.ExamplesTableProperties;\n+import org.jbehave.core.model.TableParsers;\n+import org.jbehave.core.steps.ParameterControls;\n+import org.vividus.bdd.util.ExamplesTableProcessor;\n+\n+@Named(\"RESOLVING_SELF_REFERENCES_EAGERLY\")\n+public class ResolvingSelfReferencesEagerlyTransformer implements ExtendedTableTransformer\n+{\n+    private final ParameterControls parameterControls;\n+    private final Pattern placeholderPattern;\n+\n+    public ResolvingSelfReferencesEagerlyTransformer(ParameterControls parameterControls)\n+    {\n+        this.parameterControls = parameterControls;\n+        placeholderPattern = Pattern.compile(addDelimiters(\"(.*?)\"));\n+    }\n+\n+    @Override\n+    public String transform(String tableAsString, TableParsers tableParsers, ExamplesTableProperties properties)\n+    {\n+        List<String> tableAsRows = ExamplesTableProcessor.parseRows(tableAsString);\n+        List<String> header = tableParsers.parseRow(tableAsRows.get(0), true, properties);\n+        List<List<String>> inputRows = ExamplesTableProcessor.parseDataRows(tableAsRows, tableParsers, properties);\n+        SelfReferencesResolver resolver = new SelfReferencesResolver();\n+        List<List<String>> resolvedRows = inputRows.stream().map(dataRow -> resolver.resolveRow(dataRow, header))\n+                .collect(Collectors.toList());\n+        return ExamplesTableProcessor.buildExamplesTable(header, resolvedRows, properties, true);\n+    }\n+\n+    private String addDelimiters(String s)\n+    {\n+        return parameterControls.nameDelimiterLeft() + s + parameterControls.nameDelimiterRight();\n+    }\n+\n+    private final class SelfReferencesResolver\n+    {\n+        private Map<String, String> valuesToResolve;\n+        private final Map<String, String> resolvedValues = new HashMap<>();\n+\n+        private List<String> resolveRow(List<String> row, List<String> header)\n+        {\n+            resolvedValues.clear();\n+            int range = Integer.min(row.size(), header.size());\n+            valuesToResolve = IntStream.range(0, range).boxed().collect(Collectors.toMap(header::get, row::get));\n+            List<String> result = new ArrayList<>();\n+            for (int i = 0; i < range; i++)\n+            {\n+                String key = header.get(i);\n+                resolveValue(key);\n+                result.add(resolvedValues.get(key));\n+            }\n+            return result;\n+        }\n+\n+        private void resolveValue(String key)\n+        {\n+            if (alreadyResolved(key))", "originalCommit": "384fdefba1ff157435ee7ef0f20c2c6a080755e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUyMDk2MQ==", "url": "https://github.com/vividus-framework/vividus/pull/522#discussion_r421520961", "bodyText": "It not suits good here because multiple interactions could be performed with initial Map. I tried to refactor method to be more readable.", "author": "Yauhenda", "createdAt": "2020-05-07T13:52:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU3ODUwOA=="}], "type": "inlineReview", "revised_code": {"commit": "e1249f48dbe2daca8ed49c41301b97c0dad604b8", "chunk": "diff --git a/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java b/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java\nindex 6c709a1a..4b9f3dfd 100644\n--- a/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java\n+++ b/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java\n\n@@ -50,9 +50,8 @@ public class ResolvingSelfReferencesEagerlyTransformer implements ExtendedTableT\n         List<String> tableAsRows = ExamplesTableProcessor.parseRows(tableAsString);\n         List<String> header = tableParsers.parseRow(tableAsRows.get(0), true, properties);\n         List<List<String>> inputRows = ExamplesTableProcessor.parseDataRows(tableAsRows, tableParsers, properties);\n-        SelfReferencesResolver resolver = new SelfReferencesResolver();\n-        List<List<String>> resolvedRows = inputRows.stream().map(dataRow -> resolver.resolveRow(dataRow, header))\n-                .collect(Collectors.toList());\n+        SelfReferencesResolver resolver = new SelfReferencesResolver(header);\n+        List<List<String>> resolvedRows = inputRows.stream().map(resolver::resolveRow).collect(Collectors.toList());\n         return ExamplesTableProcessor.buildExamplesTable(header, resolvedRows, properties, true);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU3OTM5NA==", "url": "https://github.com/vividus-framework/vividus/pull/522#discussion_r420579394", "bodyText": "This is unnecessary double !\nboolean notResolve = valueToResolve == null;\nif (notResolve)\n{\n    putPlaceholderWithoutResolving(key);\n    return;\n}", "author": "ikalinin1", "createdAt": "2020-05-06T06:55:11Z", "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.transformer;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.inject.Named;\n+\n+import org.jbehave.core.model.ExamplesTable.ExamplesTableProperties;\n+import org.jbehave.core.model.TableParsers;\n+import org.jbehave.core.steps.ParameterControls;\n+import org.vividus.bdd.util.ExamplesTableProcessor;\n+\n+@Named(\"RESOLVING_SELF_REFERENCES_EAGERLY\")\n+public class ResolvingSelfReferencesEagerlyTransformer implements ExtendedTableTransformer\n+{\n+    private final ParameterControls parameterControls;\n+    private final Pattern placeholderPattern;\n+\n+    public ResolvingSelfReferencesEagerlyTransformer(ParameterControls parameterControls)\n+    {\n+        this.parameterControls = parameterControls;\n+        placeholderPattern = Pattern.compile(addDelimiters(\"(.*?)\"));\n+    }\n+\n+    @Override\n+    public String transform(String tableAsString, TableParsers tableParsers, ExamplesTableProperties properties)\n+    {\n+        List<String> tableAsRows = ExamplesTableProcessor.parseRows(tableAsString);\n+        List<String> header = tableParsers.parseRow(tableAsRows.get(0), true, properties);\n+        List<List<String>> inputRows = ExamplesTableProcessor.parseDataRows(tableAsRows, tableParsers, properties);\n+        SelfReferencesResolver resolver = new SelfReferencesResolver();\n+        List<List<String>> resolvedRows = inputRows.stream().map(dataRow -> resolver.resolveRow(dataRow, header))\n+                .collect(Collectors.toList());\n+        return ExamplesTableProcessor.buildExamplesTable(header, resolvedRows, properties, true);\n+    }\n+\n+    private String addDelimiters(String s)\n+    {\n+        return parameterControls.nameDelimiterLeft() + s + parameterControls.nameDelimiterRight();\n+    }\n+\n+    private final class SelfReferencesResolver\n+    {\n+        private Map<String, String> valuesToResolve;\n+        private final Map<String, String> resolvedValues = new HashMap<>();\n+\n+        private List<String> resolveRow(List<String> row, List<String> header)\n+        {\n+            resolvedValues.clear();\n+            int range = Integer.min(row.size(), header.size());\n+            valuesToResolve = IntStream.range(0, range).boxed().collect(Collectors.toMap(header::get, row::get));\n+            List<String> result = new ArrayList<>();\n+            for (int i = 0; i < range; i++)\n+            {\n+                String key = header.get(i);\n+                resolveValue(key);\n+                result.add(resolvedValues.get(key));\n+            }\n+            return result;\n+        }\n+\n+        private void resolveValue(String key)\n+        {\n+            if (alreadyResolved(key))\n+            {\n+                return;\n+            }\n+            String valueToResolve = valuesToResolve.get(key);\n+            boolean toBeResolved = valueToResolve != null;", "originalCommit": "384fdefba1ff157435ee7ef0f20c2c6a080755e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e1249f48dbe2daca8ed49c41301b97c0dad604b8", "chunk": "diff --git a/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java b/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java\nindex 6c709a1a..4b9f3dfd 100644\n--- a/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java\n+++ b/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java\n\n@@ -50,9 +50,8 @@ public class ResolvingSelfReferencesEagerlyTransformer implements ExtendedTableT\n         List<String> tableAsRows = ExamplesTableProcessor.parseRows(tableAsString);\n         List<String> header = tableParsers.parseRow(tableAsRows.get(0), true, properties);\n         List<List<String>> inputRows = ExamplesTableProcessor.parseDataRows(tableAsRows, tableParsers, properties);\n-        SelfReferencesResolver resolver = new SelfReferencesResolver();\n-        List<List<String>> resolvedRows = inputRows.stream().map(dataRow -> resolver.resolveRow(dataRow, header))\n-                .collect(Collectors.toList());\n+        SelfReferencesResolver resolver = new SelfReferencesResolver(header);\n+        List<List<String>> resolvedRows = inputRows.stream().map(resolver::resolveRow).collect(Collectors.toList());\n         return ExamplesTableProcessor.buildExamplesTable(header, resolvedRows, properties, true);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU5NzQyMA==", "url": "https://github.com/vividus-framework/vividus/pull/522#discussion_r420597420", "bodyText": "instead of clear create a new one with the expected size?", "author": "ikalinin1", "createdAt": "2020-05-06T07:35:46Z", "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.transformer;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.inject.Named;\n+\n+import org.jbehave.core.model.ExamplesTable.ExamplesTableProperties;\n+import org.jbehave.core.model.TableParsers;\n+import org.jbehave.core.steps.ParameterControls;\n+import org.vividus.bdd.util.ExamplesTableProcessor;\n+\n+@Named(\"RESOLVING_SELF_REFERENCES_EAGERLY\")\n+public class ResolvingSelfReferencesEagerlyTransformer implements ExtendedTableTransformer\n+{\n+    private final ParameterControls parameterControls;\n+    private final Pattern placeholderPattern;\n+\n+    public ResolvingSelfReferencesEagerlyTransformer(ParameterControls parameterControls)\n+    {\n+        this.parameterControls = parameterControls;\n+        placeholderPattern = Pattern.compile(addDelimiters(\"(.*?)\"));\n+    }\n+\n+    @Override\n+    public String transform(String tableAsString, TableParsers tableParsers, ExamplesTableProperties properties)\n+    {\n+        List<String> tableAsRows = ExamplesTableProcessor.parseRows(tableAsString);\n+        List<String> header = tableParsers.parseRow(tableAsRows.get(0), true, properties);\n+        List<List<String>> inputRows = ExamplesTableProcessor.parseDataRows(tableAsRows, tableParsers, properties);\n+        SelfReferencesResolver resolver = new SelfReferencesResolver();\n+        List<List<String>> resolvedRows = inputRows.stream().map(dataRow -> resolver.resolveRow(dataRow, header))\n+                .collect(Collectors.toList());\n+        return ExamplesTableProcessor.buildExamplesTable(header, resolvedRows, properties, true);\n+    }\n+\n+    private String addDelimiters(String s)\n+    {\n+        return parameterControls.nameDelimiterLeft() + s + parameterControls.nameDelimiterRight();\n+    }\n+\n+    private final class SelfReferencesResolver\n+    {\n+        private Map<String, String> valuesToResolve;\n+        private final Map<String, String> resolvedValues = new HashMap<>();\n+\n+        private List<String> resolveRow(List<String> row, List<String> header)\n+        {\n+            resolvedValues.clear();", "originalCommit": "384fdefba1ff157435ee7ef0f20c2c6a080755e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e1249f48dbe2daca8ed49c41301b97c0dad604b8", "chunk": "diff --git a/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java b/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java\nindex 6c709a1a..4b9f3dfd 100644\n--- a/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java\n+++ b/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java\n\n@@ -50,9 +50,8 @@ public class ResolvingSelfReferencesEagerlyTransformer implements ExtendedTableT\n         List<String> tableAsRows = ExamplesTableProcessor.parseRows(tableAsString);\n         List<String> header = tableParsers.parseRow(tableAsRows.get(0), true, properties);\n         List<List<String>> inputRows = ExamplesTableProcessor.parseDataRows(tableAsRows, tableParsers, properties);\n-        SelfReferencesResolver resolver = new SelfReferencesResolver();\n-        List<List<String>> resolvedRows = inputRows.stream().map(dataRow -> resolver.resolveRow(dataRow, header))\n-                .collect(Collectors.toList());\n+        SelfReferencesResolver resolver = new SelfReferencesResolver(header);\n+        List<List<String>> resolvedRows = inputRows.stream().map(resolver::resolveRow).collect(Collectors.toList());\n         return ExamplesTableProcessor.buildExamplesTable(header, resolvedRows, properties, true);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY3ODYxNQ==", "url": "https://github.com/vividus-framework/vividus/pull/522#discussion_r420678615", "bodyText": "no need to pass header always? The header is the same for every single row, pass it via constructor", "author": "ikalinin1", "createdAt": "2020-05-06T10:06:48Z", "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.transformer;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.inject.Named;\n+\n+import org.jbehave.core.model.ExamplesTable.ExamplesTableProperties;\n+import org.jbehave.core.model.TableParsers;\n+import org.jbehave.core.steps.ParameterControls;\n+import org.vividus.bdd.util.ExamplesTableProcessor;\n+\n+@Named(\"RESOLVING_SELF_REFERENCES_EAGERLY\")\n+public class ResolvingSelfReferencesEagerlyTransformer implements ExtendedTableTransformer\n+{\n+    private final ParameterControls parameterControls;\n+    private final Pattern placeholderPattern;\n+\n+    public ResolvingSelfReferencesEagerlyTransformer(ParameterControls parameterControls)\n+    {\n+        this.parameterControls = parameterControls;\n+        placeholderPattern = Pattern.compile(addDelimiters(\"(.*?)\"));\n+    }\n+\n+    @Override\n+    public String transform(String tableAsString, TableParsers tableParsers, ExamplesTableProperties properties)\n+    {\n+        List<String> tableAsRows = ExamplesTableProcessor.parseRows(tableAsString);\n+        List<String> header = tableParsers.parseRow(tableAsRows.get(0), true, properties);\n+        List<List<String>> inputRows = ExamplesTableProcessor.parseDataRows(tableAsRows, tableParsers, properties);\n+        SelfReferencesResolver resolver = new SelfReferencesResolver();\n+        List<List<String>> resolvedRows = inputRows.stream().map(dataRow -> resolver.resolveRow(dataRow, header))", "originalCommit": "384fdefba1ff157435ee7ef0f20c2c6a080755e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e1249f48dbe2daca8ed49c41301b97c0dad604b8", "chunk": "diff --git a/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java b/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java\nindex 6c709a1a..4b9f3dfd 100644\n--- a/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java\n+++ b/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java\n\n@@ -50,9 +50,8 @@ public class ResolvingSelfReferencesEagerlyTransformer implements ExtendedTableT\n         List<String> tableAsRows = ExamplesTableProcessor.parseRows(tableAsString);\n         List<String> header = tableParsers.parseRow(tableAsRows.get(0), true, properties);\n         List<List<String>> inputRows = ExamplesTableProcessor.parseDataRows(tableAsRows, tableParsers, properties);\n-        SelfReferencesResolver resolver = new SelfReferencesResolver();\n-        List<List<String>> resolvedRows = inputRows.stream().map(dataRow -> resolver.resolveRow(dataRow, header))\n-                .collect(Collectors.toList());\n+        SelfReferencesResolver resolver = new SelfReferencesResolver(header);\n+        List<List<String>> resolvedRows = inputRows.stream().map(resolver::resolveRow).collect(Collectors.toList());\n         return ExamplesTableProcessor.buildExamplesTable(header, resolvedRows, properties, true);\n     }\n \n"}}, {"oid": "e1249f48dbe2daca8ed49c41301b97c0dad604b8", "url": "https://github.com/vividus-framework/vividus/commit/e1249f48dbe2daca8ed49c41301b97c0dad604b8", "message": "Add RESOLVING_SELF_REFERENCES_EAGERLY table transformer", "committedDate": "2020-05-07T13:45:43Z", "type": "forcePushed"}, {"oid": "e636d3c7e8f8bc9936c1dc0067f53d6aabfb2113", "url": "https://github.com/vividus-framework/vividus/commit/e636d3c7e8f8bc9936c1dc0067f53d6aabfb2113", "message": "Add RESOLVING_SELF_REFERENCES_EAGERLY table transformer", "committedDate": "2020-05-08T10:37:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA5Njg1Mg==", "url": "https://github.com/vividus-framework/vividus/pull/522#discussion_r422096852", "bodyText": "private?", "author": "ikalinin1", "createdAt": "2020-05-08T11:42:35Z", "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.transformer;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.inject.Named;\n+\n+import org.apache.commons.lang3.Validate;\n+import org.jbehave.core.model.ExamplesTable.ExamplesTableProperties;\n+import org.jbehave.core.model.TableParsers;\n+import org.jbehave.core.steps.ParameterControls;\n+import org.vividus.bdd.util.ExamplesTableProcessor;\n+\n+@Named(\"RESOLVING_SELF_REFERENCES_EAGERLY\")\n+public class ResolvingSelfReferencesEagerlyTransformer implements ExtendedTableTransformer\n+{\n+    private final ParameterControls parameterControls;\n+    private final Pattern placeholderPattern;\n+\n+    public ResolvingSelfReferencesEagerlyTransformer(ParameterControls parameterControls)\n+    {\n+        this.parameterControls = parameterControls;\n+        placeholderPattern = Pattern.compile(\n+                parameterControls.nameDelimiterLeft() + \"(.*?)\" + parameterControls.nameDelimiterRight());\n+    }\n+\n+    @Override\n+    public String transform(String tableAsString, TableParsers tableParsers, ExamplesTableProperties properties)\n+    {\n+        List<String> tableAsRows = ExamplesTableProcessor.parseRows(tableAsString);\n+        List<String> header = tableParsers.parseRow(tableAsRows.get(0), true, properties);\n+        List<List<String>> inputRows = ExamplesTableProcessor.parseDataRows(tableAsRows, tableParsers, properties);\n+        List<List<String>> resolvedRows = new SelfReferencesResolver(header).resolveRows(inputRows);\n+        return ExamplesTableProcessor.buildExamplesTable(header, resolvedRows, properties, true);\n+    }\n+\n+    private final class SelfReferencesResolver\n+    {\n+        private final List<String> header;\n+\n+        SelfReferencesResolver(List<String> header)", "originalCommit": "e636d3c7e8f8bc9936c1dc0067f53d6aabfb2113", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "74447e91a00240fb190a3af466495878dbbde2ee", "chunk": "diff --git a/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java b/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java\nindex f533627f..ba0a7006 100644\n--- a/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java\n+++ b/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java\n\n@@ -60,12 +60,12 @@ public class ResolvingSelfReferencesEagerlyTransformer implements ExtendedTableT\n     {\n         private final List<String> header;\n \n-        SelfReferencesResolver(List<String> header)\n+        private SelfReferencesResolver(List<String> header)\n         {\n             this.header = header;\n         }\n \n-        List<List<String>> resolveRows(List<List<String>> rows)\n+        private List<List<String>> resolveRows(List<List<String>> rows)\n         {\n             return rows.stream().map(this::resolveRow).collect(Collectors.toList());\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA5NzA0Nw==", "url": "https://github.com/vividus-framework/vividus/pull/522#discussion_r422097047", "bodyText": "no reason to calculate header for each row", "author": "ikalinin1", "createdAt": "2020-05-08T11:43:02Z", "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.transformer;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.inject.Named;\n+\n+import org.apache.commons.lang3.Validate;\n+import org.jbehave.core.model.ExamplesTable.ExamplesTableProperties;\n+import org.jbehave.core.model.TableParsers;\n+import org.jbehave.core.steps.ParameterControls;\n+import org.vividus.bdd.util.ExamplesTableProcessor;\n+\n+@Named(\"RESOLVING_SELF_REFERENCES_EAGERLY\")\n+public class ResolvingSelfReferencesEagerlyTransformer implements ExtendedTableTransformer\n+{\n+    private final ParameterControls parameterControls;\n+    private final Pattern placeholderPattern;\n+\n+    public ResolvingSelfReferencesEagerlyTransformer(ParameterControls parameterControls)\n+    {\n+        this.parameterControls = parameterControls;\n+        placeholderPattern = Pattern.compile(\n+                parameterControls.nameDelimiterLeft() + \"(.*?)\" + parameterControls.nameDelimiterRight());\n+    }\n+\n+    @Override\n+    public String transform(String tableAsString, TableParsers tableParsers, ExamplesTableProperties properties)\n+    {\n+        List<String> tableAsRows = ExamplesTableProcessor.parseRows(tableAsString);\n+        List<String> header = tableParsers.parseRow(tableAsRows.get(0), true, properties);\n+        List<List<String>> inputRows = ExamplesTableProcessor.parseDataRows(tableAsRows, tableParsers, properties);\n+        List<List<String>> resolvedRows = new SelfReferencesResolver(header).resolveRows(inputRows);\n+        return ExamplesTableProcessor.buildExamplesTable(header, resolvedRows, properties, true);\n+    }\n+\n+    private final class SelfReferencesResolver\n+    {\n+        private final List<String> header;\n+\n+        SelfReferencesResolver(List<String> header)\n+        {\n+            this.header = header;\n+        }\n+\n+        List<List<String>> resolveRows(List<List<String>> rows)\n+        {\n+            return rows.stream().map(this::resolveRow).collect(Collectors.toList());\n+        }\n+\n+        private List<String> resolveRow(List<String> row)\n+        {\n+            int range = Integer.min(row.size(), header.size());", "originalCommit": "e636d3c7e8f8bc9936c1dc0067f53d6aabfb2113", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjEwMjgwMQ==", "url": "https://github.com/vividus-framework/vividus/pull/522#discussion_r422102801", "bodyText": "It is possible to pass table like\n|x|x|x|\n|y|y|\n|z|z|z|\n\nand catch index out of bounds", "author": "Yauhenda", "createdAt": "2020-05-08T11:58:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA5NzA0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjExMTY5OA==", "url": "https://github.com/vividus-framework/vividus/pull/522#discussion_r422111698", "bodyText": "this.headerSize = header.size()", "author": "ikalinin1", "createdAt": "2020-05-08T12:21:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA5NzA0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "74447e91a00240fb190a3af466495878dbbde2ee", "chunk": "diff --git a/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java b/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java\nindex f533627f..ba0a7006 100644\n--- a/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java\n+++ b/vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java\n\n@@ -60,12 +60,12 @@ public class ResolvingSelfReferencesEagerlyTransformer implements ExtendedTableT\n     {\n         private final List<String> header;\n \n-        SelfReferencesResolver(List<String> header)\n+        private SelfReferencesResolver(List<String> header)\n         {\n             this.header = header;\n         }\n \n-        List<List<String>> resolveRows(List<List<String>> rows)\n+        private List<List<String>> resolveRows(List<List<String>> rows)\n         {\n             return rows.stream().map(this::resolveRow).collect(Collectors.toList());\n         }\n"}}, {"oid": "74447e91a00240fb190a3af466495878dbbde2ee", "url": "https://github.com/vividus-framework/vividus/commit/74447e91a00240fb190a3af466495878dbbde2ee", "message": "Add RESOLVING_SELF_REFERENCES_EAGERLY table transformer", "committedDate": "2020-05-08T12:05:11Z", "type": "forcePushed"}, {"oid": "a6768261013cceb2baf7fe8907ef95edbf871fcf", "url": "https://github.com/vividus-framework/vividus/commit/a6768261013cceb2baf7fe8907ef95edbf871fcf", "message": "Add RESOLVING_SELF_REFERENCES_EAGERLY table transformer", "committedDate": "2020-05-08T12:51:04Z", "type": "commit"}, {"oid": "a6768261013cceb2baf7fe8907ef95edbf871fcf", "url": "https://github.com/vividus-framework/vividus/commit/a6768261013cceb2baf7fe8907ef95edbf871fcf", "message": "Add RESOLVING_SELF_REFERENCES_EAGERLY table transformer", "committedDate": "2020-05-08T12:51:04Z", "type": "forcePushed"}]}