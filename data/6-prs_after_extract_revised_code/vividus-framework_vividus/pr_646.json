{"pr_number": 646, "pr_title": "[vividus-plugin-web-app] Add WebElement research if element is stale", "pr_createdAt": "2020-06-03T14:05:35Z", "pr_url": "https://github.com/vividus-framework/vividus/pull/646", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYwMDgxNg==", "url": "https://github.com/vividus-framework/vividus/pull/646#discussion_r434600816", "bodyText": "isRetry ->. retry", "author": "valfirst", "createdAt": "2020-06-03T14:15:28Z", "path": "vividus-plugin-web-app/src/main/java/org/vividus/ui/web/action/search/AbstractElementSearchAction.java", "diffHunk": "@@ -51,8 +51,15 @@\n     @Inject private IWaitActions waitActions;\n     @Inject private IExpectedConditions<By> expectedConditions;\n     private Duration waitForElementTimeout;\n+    private boolean retrySearchIfStale;\n \n     public List<WebElement> findElements(SearchContext searchContext, By locator, SearchParameters parameters)\n+    {\n+        return findElements(searchContext, locator, parameters, false);\n+    }\n+\n+    public List<WebElement> findElements(SearchContext searchContext, By locator, SearchParameters parameters,\n+            boolean isRetry)", "originalCommit": "e93dc7f1b5552a58f08b00a89c2a15259ab38982", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e1bebd128c8e56e8fec9c64d0d350b252aa32846", "chunk": "diff --git a/vividus-plugin-web-app/src/main/java/org/vividus/ui/web/action/search/AbstractElementSearchAction.java b/vividus-plugin-web-app/src/main/java/org/vividus/ui/web/action/search/AbstractElementSearchAction.java\nindex 882487d8..920d3427 100644\n--- a/vividus-plugin-web-app/src/main/java/org/vividus/ui/web/action/search/AbstractElementSearchAction.java\n+++ b/vividus-plugin-web-app/src/main/java/org/vividus/ui/web/action/search/AbstractElementSearchAction.java\n\n@@ -55,42 +55,56 @@ public abstract class AbstractElementSearchAction\n \n     public List<WebElement> findElements(SearchContext searchContext, By locator, SearchParameters parameters)\n     {\n-        return findElements(searchContext, locator, parameters, false);\n+        if (searchContext != null)\n+        {\n+            return findElements(searchContext, locator, parameters, false);\n+        }\n+        return List.of();\n     }\n \n-    public List<WebElement> findElements(SearchContext searchContext, By locator, SearchParameters parameters,\n-            boolean isRetry)\n+    private List<WebElement> findElements(SearchContext searchContext, By locator, SearchParameters parameters,\n+            boolean retry)\n     {\n-        if (searchContext != null)\n+        List<WebElement> elements = parameters.isWaitForElement()\n+                ? waitForElement(searchContext, locator)\n+                : searchContext.findElements(locator);\n+        boolean elementsFound = null != elements;\n+        LOGGER.info(\"Total number of elements found {} is equal to {}\", locator, elementsFound ? elements.size() : 0);\n+        if (elementsFound)\n         {\n-            List<WebElement> elements = parameters.isWaitForElement() ? waitForElement(searchContext, locator)\n-                    : searchContext.findElements(locator);\n-            boolean elementsFound = null != elements;\n-            LOGGER.info(\"Total number of elements found {} is equal to {}\", locator,\n-                    elementsFound ? elements.size() : 0);\n-            if (elementsFound)\n+            Visibility visibility = parameters.getVisibility();\n+            try\n             {\n-                Visibility visibility = parameters.getVisibility();\n-                try\n-                {\n-                    return Visibility.ALL == visibility ? elements : filterElementsByVisibility(elements,\n-                        visibility == Visibility.VISIBLE);\n-                } catch (StaleElementReferenceException e) {\n-                    if (retrySearchIfStale && !isRetry) {\n-                        return findElements(searchContext, locator, parameters, true);\n-                    }\n-                    LOGGER.warn(e.getMessage(), e);\n-                }\n+                return Visibility.ALL == visibility\n+                        ? elements\n+                        : filterElementsByVisibility(elements, visibility == Visibility.VISIBLE, retry);\n+            }\n+            catch (StaleElementReferenceException e)\n+            {\n+                return findElements(searchContext, locator, parameters, true);\n             }\n         }\n         return List.of();\n     }\n \n-    private List<WebElement> filterElementsByVisibility(List<WebElement> elements, boolean visible)\n+    private List<WebElement> filterElementsByVisibility(List<WebElement> elements, boolean visible,\n+            boolean retry)\n     {\n-        return elements.stream()\n-                       .filter(element -> visible == isElementVisible(element, false))\n-                       .collect(Collectors.toList());\n+        return elements.stream().filter(element -> {\n+            try\n+            {\n+                return visible == isElementVisible(element, false);\n+            }\n+            catch (StaleElementReferenceException e)\n+            {\n+                if (retrySearchIfStale && !retry)\n+                {\n+                    throw e;\n+                }\n+                LOGGER.warn(e.getMessage(), e);\n+                return false;\n+            }\n+        }).collect(Collectors.toList());\n     }\n \n     private boolean isElementVisible(WebElement element, boolean scrolled)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYwMDkwNA==", "url": "https://github.com/vividus-framework/vividus/pull/646#discussion_r434600904", "bodyText": "private", "author": "valfirst", "createdAt": "2020-06-03T14:15:34Z", "path": "vividus-plugin-web-app/src/main/java/org/vividus/ui/web/action/search/AbstractElementSearchAction.java", "diffHunk": "@@ -51,8 +51,15 @@\n     @Inject private IWaitActions waitActions;\n     @Inject private IExpectedConditions<By> expectedConditions;\n     private Duration waitForElementTimeout;\n+    private boolean retrySearchIfStale;\n \n     public List<WebElement> findElements(SearchContext searchContext, By locator, SearchParameters parameters)\n+    {\n+        return findElements(searchContext, locator, parameters, false);\n+    }\n+\n+    public List<WebElement> findElements(SearchContext searchContext, By locator, SearchParameters parameters,", "originalCommit": "e93dc7f1b5552a58f08b00a89c2a15259ab38982", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e1bebd128c8e56e8fec9c64d0d350b252aa32846", "chunk": "diff --git a/vividus-plugin-web-app/src/main/java/org/vividus/ui/web/action/search/AbstractElementSearchAction.java b/vividus-plugin-web-app/src/main/java/org/vividus/ui/web/action/search/AbstractElementSearchAction.java\nindex 882487d8..920d3427 100644\n--- a/vividus-plugin-web-app/src/main/java/org/vividus/ui/web/action/search/AbstractElementSearchAction.java\n+++ b/vividus-plugin-web-app/src/main/java/org/vividus/ui/web/action/search/AbstractElementSearchAction.java\n\n@@ -55,42 +55,56 @@ public abstract class AbstractElementSearchAction\n \n     public List<WebElement> findElements(SearchContext searchContext, By locator, SearchParameters parameters)\n     {\n-        return findElements(searchContext, locator, parameters, false);\n+        if (searchContext != null)\n+        {\n+            return findElements(searchContext, locator, parameters, false);\n+        }\n+        return List.of();\n     }\n \n-    public List<WebElement> findElements(SearchContext searchContext, By locator, SearchParameters parameters,\n-            boolean isRetry)\n+    private List<WebElement> findElements(SearchContext searchContext, By locator, SearchParameters parameters,\n+            boolean retry)\n     {\n-        if (searchContext != null)\n+        List<WebElement> elements = parameters.isWaitForElement()\n+                ? waitForElement(searchContext, locator)\n+                : searchContext.findElements(locator);\n+        boolean elementsFound = null != elements;\n+        LOGGER.info(\"Total number of elements found {} is equal to {}\", locator, elementsFound ? elements.size() : 0);\n+        if (elementsFound)\n         {\n-            List<WebElement> elements = parameters.isWaitForElement() ? waitForElement(searchContext, locator)\n-                    : searchContext.findElements(locator);\n-            boolean elementsFound = null != elements;\n-            LOGGER.info(\"Total number of elements found {} is equal to {}\", locator,\n-                    elementsFound ? elements.size() : 0);\n-            if (elementsFound)\n+            Visibility visibility = parameters.getVisibility();\n+            try\n             {\n-                Visibility visibility = parameters.getVisibility();\n-                try\n-                {\n-                    return Visibility.ALL == visibility ? elements : filterElementsByVisibility(elements,\n-                        visibility == Visibility.VISIBLE);\n-                } catch (StaleElementReferenceException e) {\n-                    if (retrySearchIfStale && !isRetry) {\n-                        return findElements(searchContext, locator, parameters, true);\n-                    }\n-                    LOGGER.warn(e.getMessage(), e);\n-                }\n+                return Visibility.ALL == visibility\n+                        ? elements\n+                        : filterElementsByVisibility(elements, visibility == Visibility.VISIBLE, retry);\n+            }\n+            catch (StaleElementReferenceException e)\n+            {\n+                return findElements(searchContext, locator, parameters, true);\n             }\n         }\n         return List.of();\n     }\n \n-    private List<WebElement> filterElementsByVisibility(List<WebElement> elements, boolean visible)\n+    private List<WebElement> filterElementsByVisibility(List<WebElement> elements, boolean visible,\n+            boolean retry)\n     {\n-        return elements.stream()\n-                       .filter(element -> visible == isElementVisible(element, false))\n-                       .collect(Collectors.toList());\n+        return elements.stream().filter(element -> {\n+            try\n+            {\n+                return visible == isElementVisible(element, false);\n+            }\n+            catch (StaleElementReferenceException e)\n+            {\n+                if (retrySearchIfStale && !retry)\n+                {\n+                    throw e;\n+                }\n+                LOGGER.warn(e.getMessage(), e);\n+                return false;\n+            }\n+        }).collect(Collectors.toList());\n     }\n \n     private boolean isElementVisible(WebElement element, boolean scrolled)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYwMzAxNA==", "url": "https://github.com/vividus-framework/vividus/pull/646#discussion_r434603014", "bodyText": "logic is broken here: if retrySearchIfStale is false, then first check of element visibility throwing StaleElementReferenceException will result in empty list, but we just need to have filtered out list", "author": "valfirst", "createdAt": "2020-06-03T14:18:17Z", "path": "vividus-plugin-web-app/src/main/java/org/vividus/ui/web/action/search/AbstractElementSearchAction.java", "diffHunk": "@@ -64,26 +71,26 @@\n             if (elementsFound)\n             {\n                 Visibility visibility = parameters.getVisibility();\n-                return Visibility.ALL == visibility ? elements : filterElementsByVisibility(elements,\n+                try\n+                {\n+                    return Visibility.ALL == visibility ? elements : filterElementsByVisibility(elements,\n                         visibility == Visibility.VISIBLE);\n+                } catch (StaleElementReferenceException e) {\n+                    if (retrySearchIfStale && !isRetry) {\n+                        return findElements(searchContext, locator, parameters, true);\n+                    }\n+                    LOGGER.warn(e.getMessage(), e);", "originalCommit": "e93dc7f1b5552a58f08b00a89c2a15259ab38982", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e1bebd128c8e56e8fec9c64d0d350b252aa32846", "chunk": "diff --git a/vividus-plugin-web-app/src/main/java/org/vividus/ui/web/action/search/AbstractElementSearchAction.java b/vividus-plugin-web-app/src/main/java/org/vividus/ui/web/action/search/AbstractElementSearchAction.java\nindex 882487d8..920d3427 100644\n--- a/vividus-plugin-web-app/src/main/java/org/vividus/ui/web/action/search/AbstractElementSearchAction.java\n+++ b/vividus-plugin-web-app/src/main/java/org/vividus/ui/web/action/search/AbstractElementSearchAction.java\n\n@@ -55,42 +55,56 @@ public abstract class AbstractElementSearchAction\n \n     public List<WebElement> findElements(SearchContext searchContext, By locator, SearchParameters parameters)\n     {\n-        return findElements(searchContext, locator, parameters, false);\n+        if (searchContext != null)\n+        {\n+            return findElements(searchContext, locator, parameters, false);\n+        }\n+        return List.of();\n     }\n \n-    public List<WebElement> findElements(SearchContext searchContext, By locator, SearchParameters parameters,\n-            boolean isRetry)\n+    private List<WebElement> findElements(SearchContext searchContext, By locator, SearchParameters parameters,\n+            boolean retry)\n     {\n-        if (searchContext != null)\n+        List<WebElement> elements = parameters.isWaitForElement()\n+                ? waitForElement(searchContext, locator)\n+                : searchContext.findElements(locator);\n+        boolean elementsFound = null != elements;\n+        LOGGER.info(\"Total number of elements found {} is equal to {}\", locator, elementsFound ? elements.size() : 0);\n+        if (elementsFound)\n         {\n-            List<WebElement> elements = parameters.isWaitForElement() ? waitForElement(searchContext, locator)\n-                    : searchContext.findElements(locator);\n-            boolean elementsFound = null != elements;\n-            LOGGER.info(\"Total number of elements found {} is equal to {}\", locator,\n-                    elementsFound ? elements.size() : 0);\n-            if (elementsFound)\n+            Visibility visibility = parameters.getVisibility();\n+            try\n             {\n-                Visibility visibility = parameters.getVisibility();\n-                try\n-                {\n-                    return Visibility.ALL == visibility ? elements : filterElementsByVisibility(elements,\n-                        visibility == Visibility.VISIBLE);\n-                } catch (StaleElementReferenceException e) {\n-                    if (retrySearchIfStale && !isRetry) {\n-                        return findElements(searchContext, locator, parameters, true);\n-                    }\n-                    LOGGER.warn(e.getMessage(), e);\n-                }\n+                return Visibility.ALL == visibility\n+                        ? elements\n+                        : filterElementsByVisibility(elements, visibility == Visibility.VISIBLE, retry);\n+            }\n+            catch (StaleElementReferenceException e)\n+            {\n+                return findElements(searchContext, locator, parameters, true);\n             }\n         }\n         return List.of();\n     }\n \n-    private List<WebElement> filterElementsByVisibility(List<WebElement> elements, boolean visible)\n+    private List<WebElement> filterElementsByVisibility(List<WebElement> elements, boolean visible,\n+            boolean retry)\n     {\n-        return elements.stream()\n-                       .filter(element -> visible == isElementVisible(element, false))\n-                       .collect(Collectors.toList());\n+        return elements.stream().filter(element -> {\n+            try\n+            {\n+                return visible == isElementVisible(element, false);\n+            }\n+            catch (StaleElementReferenceException e)\n+            {\n+                if (retrySearchIfStale && !retry)\n+                {\n+                    throw e;\n+                }\n+                LOGGER.warn(e.getMessage(), e);\n+                return false;\n+            }\n+        }).collect(Collectors.toList());\n     }\n \n     private boolean isElementVisible(WebElement element, boolean scrolled)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU2NTI2NQ==", "url": "https://github.com/vividus-framework/vividus/pull/646#discussion_r436565265", "bodyText": "this check can be moved to the previous method to avoid duplicate null-check in case of retry", "author": "valfirst", "createdAt": "2020-06-08T09:24:35Z", "path": "vividus-plugin-web-app/src/main/java/org/vividus/ui/web/action/search/AbstractElementSearchAction.java", "diffHunk": "@@ -51,8 +51,15 @@\n     @Inject private IWaitActions waitActions;\n     @Inject private IExpectedConditions<By> expectedConditions;\n     private Duration waitForElementTimeout;\n+    private boolean retrySearchIfStale;\n \n     public List<WebElement> findElements(SearchContext searchContext, By locator, SearchParameters parameters)\n+    {\n+        return findElements(searchContext, locator, parameters, false);\n+    }\n+\n+    private List<WebElement> findElements(SearchContext searchContext, By locator, SearchParameters parameters,\n+            boolean retry)\n     {\n         if (searchContext != null)", "originalCommit": "1b806c2c850a085452e8dc1f6a6fa1ff363f40a4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e1bebd128c8e56e8fec9c64d0d350b252aa32846", "chunk": "diff --git a/vividus-plugin-web-app/src/main/java/org/vividus/ui/web/action/search/AbstractElementSearchAction.java b/vividus-plugin-web-app/src/main/java/org/vividus/ui/web/action/search/AbstractElementSearchAction.java\nindex 8019cf59..920d3427 100644\n--- a/vividus-plugin-web-app/src/main/java/org/vividus/ui/web/action/search/AbstractElementSearchAction.java\n+++ b/vividus-plugin-web-app/src/main/java/org/vividus/ui/web/action/search/AbstractElementSearchAction.java\n\n@@ -55,38 +55,40 @@ public abstract class AbstractElementSearchAction\n \n     public List<WebElement> findElements(SearchContext searchContext, By locator, SearchParameters parameters)\n     {\n-        return findElements(searchContext, locator, parameters, false);\n+        if (searchContext != null)\n+        {\n+            return findElements(searchContext, locator, parameters, false);\n+        }\n+        return List.of();\n     }\n \n     private List<WebElement> findElements(SearchContext searchContext, By locator, SearchParameters parameters,\n             boolean retry)\n     {\n-        if (searchContext != null)\n+        List<WebElement> elements = parameters.isWaitForElement()\n+                ? waitForElement(searchContext, locator)\n+                : searchContext.findElements(locator);\n+        boolean elementsFound = null != elements;\n+        LOGGER.info(\"Total number of elements found {} is equal to {}\", locator, elementsFound ? elements.size() : 0);\n+        if (elementsFound)\n         {\n-            List<WebElement> elements = parameters.isWaitForElement() ? waitForElement(searchContext, locator)\n-                    : searchContext.findElements(locator);\n-            boolean elementsFound = null != elements;\n-            LOGGER.info(\"Total number of elements found {} is equal to {}\", locator,\n-                    elementsFound ? elements.size() : 0);\n-            if (elementsFound)\n+            Visibility visibility = parameters.getVisibility();\n+            try\n             {\n-                Visibility visibility = parameters.getVisibility();\n-                try\n-                {\n-                return Visibility.ALL == visibility ? elements : filterElementsByVisibility(elements,\n-                        visibility == Visibility.VISIBLE, retry);\n-                }\n-                catch (StaleElementReferenceException e)\n-                {\n-                    return findElements(searchContext, locator, parameters, true);\n-                }\n+                return Visibility.ALL == visibility\n+                        ? elements\n+                        : filterElementsByVisibility(elements, visibility == Visibility.VISIBLE, retry);\n+            }\n+            catch (StaleElementReferenceException e)\n+            {\n+                return findElements(searchContext, locator, parameters, true);\n             }\n         }\n         return List.of();\n     }\n \n     private List<WebElement> filterElementsByVisibility(List<WebElement> elements, boolean visible,\n-            boolean retry) throws StaleElementReferenceException\n+            boolean retry)\n     {\n         return elements.stream().filter(element -> {\n             try\n"}}, {"oid": "e1bebd128c8e56e8fec9c64d0d350b252aa32846", "url": "https://github.com/vividus-framework/vividus/commit/e1bebd128c8e56e8fec9c64d0d350b252aa32846", "message": "[vividus-plugin-web-app] Add WebElement research if element is stale (#598)", "committedDate": "2020-06-08T13:17:10Z", "type": "commit"}]}