{"pr_number": 273, "pr_title": "[vividus-plugin-datetime] Add expressions to work with epoch time", "pr_createdAt": "2020-01-21T11:14:18Z", "pr_url": "https://github.com/vividus-framework/vividus/pull/273", "timeline": [{"oid": "76b93139641212ab3c6a53f6951e64526b8bd1d4", "url": "https://github.com/vividus-framework/vividus/commit/76b93139641212ab3c6a53f6951e64526b8bd1d4", "message": "[vividus-plugin-datetime] Add expressions to work with epoch time\n- toEpochSecond(date) - converts specified date in ISO_DATE_TIME to epoch seconds\n- fromEpochSecond(seconds) - converts specified seconds to ISO_DATE_TIME date", "committedDate": "2020-01-21T11:15:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk0NTM2NA==", "url": "https://github.com/vividus-framework/vividus/pull/273#discussion_r368945364", "bodyText": "public class DelegatingExpressionProcessor implements IExpressionProcessor\n{\n    private final Collection<IExpressionProcessor> delegates;\n\n    public DelegatingExpressionProcessor(Collection<StoryReporter> delegates)\n    {\n        this.delegates = delegates;\n    }\n\n    @Override\n    public Optional<String> execute(String expression)\n    {\n        return delegates.stream()\n                .map(processor -> processor.execute(expression))\n                .filter(Optional::isPresent)\n                .findFirst()\n                .orElseGet(Optional::empty);\n    }\n}\n?", "author": "valfirst", "createdAt": "2020-01-21T11:22:17Z", "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/expression/AbstractExpressionProcessors.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package org.vividus.bdd.expression;\n+\n+import java.util.Collection;\n+import java.util.Optional;\n+\n+public abstract class AbstractExpressionProcessors implements IExpressionProcessor\n+{\n+    @Override\n+    public Optional<String> execute(String expression)\n+    {\n+        return getExpressionProcessors().stream()\n+                .map(processor -> processor.execute(expression))\n+                .filter(Optional::isPresent)\n+                .findFirst()\n+                .orElseGet(Optional::empty);\n+    }\n+\n+    protected abstract Collection<IExpressionProcessor> getExpressionProcessors();", "originalCommit": "76b93139641212ab3c6a53f6951e64526b8bd1d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "24e1656c21521a4ffadf70def137bd88b540233d", "chunk": "diff --git a/vividus-bdd-engine/src/main/java/org/vividus/bdd/expression/AbstractExpressionProcessors.java b/vividus-bdd-engine/src/main/java/org/vividus/bdd/expression/AbstractExpressionProcessors.java\ndeleted file mode 100644\nindex 40411e6c..00000000\n--- a/vividus-bdd-engine/src/main/java/org/vividus/bdd/expression/AbstractExpressionProcessors.java\n+++ /dev/null\n\n@@ -1,19 +0,0 @@\n-package org.vividus.bdd.expression;\n-\n-import java.util.Collection;\n-import java.util.Optional;\n-\n-public abstract class AbstractExpressionProcessors implements IExpressionProcessor\n-{\n-    @Override\n-    public Optional<String> execute(String expression)\n-    {\n-        return getExpressionProcessors().stream()\n-                .map(processor -> processor.execute(expression))\n-                .filter(Optional::isPresent)\n-                .findFirst()\n-                .orElseGet(Optional::empty);\n-    }\n-\n-    protected abstract Collection<IExpressionProcessor> getExpressionProcessors();\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk0NTgwNQ==", "url": "https://github.com/vividus-framework/vividus/pull/273#discussion_r368945805", "bodyText": "org.vividus.util.DateUtils already contains zoneId so you should reuse it", "author": "valfirst", "createdAt": "2020-01-21T11:23:26Z", "path": "vividus-plugin-datetime/src/main/java/org/vividus/bdd/expression/EpochExpressionProcessors.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.expression;\n+\n+import java.time.Instant;\n+import java.time.LocalDateTime;\n+import java.time.ZoneId;\n+import java.time.ZoneOffset;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.UnaryOperator;\n+\n+public class EpochExpressionProcessors extends AbstractExpressionProcessors\n+{\n+    private final ZoneOffset zoneOffset;\n+    private final List<IExpressionProcessor> epochExpressions = List.of(\n+            new UnaryExpressionProcessor(\"toEpochSecond\",   toEpochSecond()),\n+            new UnaryExpressionProcessor(\"fromEpochSecond\", fromEpochSecond()));\n+\n+    public EpochExpressionProcessors(ZoneId zoneId)\n+    {\n+        this.zoneOffset = zoneId.getRules().getOffset(Instant.now());", "originalCommit": "76b93139641212ab3c6a53f6951e64526b8bd1d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "24e1656c21521a4ffadf70def137bd88b540233d", "chunk": "diff --git a/vividus-plugin-datetime/src/main/java/org/vividus/bdd/expression/EpochExpressionProcessors.java b/vividus-plugin-datetime/src/main/java/org/vividus/bdd/expression/EpochExpressionProcessors.java\nindex b91e745e..489fa954 100644\n--- a/vividus-plugin-datetime/src/main/java/org/vividus/bdd/expression/EpochExpressionProcessors.java\n+++ b/vividus-plugin-datetime/src/main/java/org/vividus/bdd/expression/EpochExpressionProcessors.java\n\n@@ -16,48 +16,23 @@\n \n package org.vividus.bdd.expression;\n \n-import java.time.Instant;\n-import java.time.LocalDateTime;\n-import java.time.ZoneId;\n-import java.time.ZoneOffset;\n+import static java.lang.Long.parseLong;\n+import static java.lang.String.valueOf;\n+\n import java.time.format.DateTimeFormatter;\n-import java.util.Collection;\n import java.util.List;\n-import java.util.function.UnaryOperator;\n-\n-public class EpochExpressionProcessors extends AbstractExpressionProcessors\n-{\n-    private final ZoneOffset zoneOffset;\n-    private final List<IExpressionProcessor> epochExpressions = List.of(\n-            new UnaryExpressionProcessor(\"toEpochSecond\",   toEpochSecond()),\n-            new UnaryExpressionProcessor(\"fromEpochSecond\", fromEpochSecond()));\n-\n-    public EpochExpressionProcessors(ZoneId zoneId)\n-    {\n-        this.zoneOffset = zoneId.getRules().getOffset(Instant.now());\n-    }\n \n-    @Override\n-    protected Collection<IExpressionProcessor> getExpressionProcessors()\n-    {\n-        return epochExpressions;\n-    }\n-\n-    private UnaryOperator<String> toEpochSecond()\n-    {\n-        return arg ->\n-        {\n-            LocalDateTime time = LocalDateTime.parse(arg, DateTimeFormatter.ISO_DATE_TIME);\n-            return String.valueOf(time.toEpochSecond(zoneOffset));\n-        };\n-    }\n+import org.vividus.util.DateUtils;\n \n-    private UnaryOperator<String> fromEpochSecond()\n+public class EpochExpressionProcessors extends DelegatingExpressionProcessor\n+{\n+    public EpochExpressionProcessors(DateUtils dateUtils)\n     {\n-        return arg ->\n-        {\n-            LocalDateTime time = LocalDateTime.ofEpochSecond(Long.parseLong(arg), 0, zoneOffset);\n-            return DateTimeFormatter.ISO_DATE_TIME.format(time).toString();\n-        };\n+        super(List.of(\n+            new UnaryExpressionProcessor(\"toEpochSecond\",\n+                arg -> valueOf(dateUtils.toEpochSecond(arg, DateTimeFormatter.ISO_DATE_TIME))),\n+            new UnaryExpressionProcessor(\"fromEpochSecond\",\n+                arg -> DateTimeFormatter.ISO_DATE_TIME.format(dateUtils.fromEpochSecond(parseLong(arg))))\n+            ));\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk0NjM0Ng==", "url": "https://github.com/vividus-framework/vividus/pull/273#discussion_r368946346", "bodyText": "it can be package-private", "author": "valfirst", "createdAt": "2020-01-21T11:24:46Z", "path": "vividus-plugin-datetime/src/test/java/org/vividus/bdd/expression/EpochExpressionProcessorsTests.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.expression;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.time.ZoneId;\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.Test;\n+\n+public class EpochExpressionProcessorsTests", "originalCommit": "76b93139641212ab3c6a53f6951e64526b8bd1d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "24e1656c21521a4ffadf70def137bd88b540233d", "chunk": "diff --git a/vividus-plugin-datetime/src/test/java/org/vividus/bdd/expression/EpochExpressionProcessorsTests.java b/vividus-plugin-datetime/src/test/java/org/vividus/bdd/expression/EpochExpressionProcessorsTests.java\nindex b996fdea..35869c20 100644\n--- a/vividus-plugin-datetime/src/test/java/org/vividus/bdd/expression/EpochExpressionProcessorsTests.java\n+++ b/vividus-plugin-datetime/src/test/java/org/vividus/bdd/expression/EpochExpressionProcessorsTests.java\n\n@@ -22,13 +22,14 @@ import java.time.ZoneId;\n import java.util.Optional;\n \n import org.junit.jupiter.api.Test;\n+import org.vividus.util.DateUtils;\n \n-public class EpochExpressionProcessorsTests\n+class EpochExpressionProcessorsTests\n {\n     private static final String ISO_DATE_TIME = \"1993-04-16T00:00:00\";\n     private static final String EPOCH = \"734918400\";\n \n-    private final EpochExpressionProcessors processor = new EpochExpressionProcessors(ZoneId.of(\"UTC\"));\n+    private final EpochExpressionProcessors processor = new EpochExpressionProcessors(new DateUtils(ZoneId.of(\"UTC\")));\n \n     @Test\n     void testExecuteMatchingExpressionToEpoch()\n"}}, {"oid": "24e1656c21521a4ffadf70def137bd88b540233d", "url": "https://github.com/vividus-framework/vividus/commit/24e1656c21521a4ffadf70def137bd88b540233d", "message": "[vividus-plugin-datetime] Add expressions to work with epoch time\n- toEpochSecond(date) - converts specified date in ISO_DATE_TIME to epoch seconds\n- fromEpochSecond(seconds) - converts specified seconds to ISO_DATE_TIME date", "committedDate": "2020-01-21T19:00:11Z", "type": "forcePushed"}, {"oid": "3e123e55d7ebfa6dfbe77eabe2c4de5fab377210", "url": "https://github.com/vividus-framework/vividus/commit/3e123e55d7ebfa6dfbe77eabe2c4de5fab377210", "message": "[vividus-plugin-datetime] Add expressions to work with epoch time\n- toEpochSecond(date) - converts specified date in ISO_DATE_TIME to epoch seconds\n- fromEpochSecond(seconds) - converts specified seconds to ISO_DATE_TIME date", "committedDate": "2020-01-21T19:02:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0MTU1Mw==", "url": "https://github.com/vividus-framework/vividus/pull/273#discussion_r369241553", "bodyText": "it's not required to make it abstract", "author": "valfirst", "createdAt": "2020-01-21T21:03:34Z", "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/expression/DelegatingExpressionProcessor.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.expression;\n+\n+import java.util.Collection;\n+import java.util.Optional;\n+\n+public abstract class DelegatingExpressionProcessor implements IExpressionProcessor", "originalCommit": "3e123e55d7ebfa6dfbe77eabe2c4de5fab377210", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "52add12cadf9ec6785e0a1eccbc2d634a345d8a8", "chunk": "diff --git a/vividus-bdd-engine/src/main/java/org/vividus/bdd/expression/DelegatingExpressionProcessor.java b/vividus-bdd-engine/src/main/java/org/vividus/bdd/expression/DelegatingExpressionProcessor.java\nindex f7c0a833..41ab0a2b 100644\n--- a/vividus-bdd-engine/src/main/java/org/vividus/bdd/expression/DelegatingExpressionProcessor.java\n+++ b/vividus-bdd-engine/src/main/java/org/vividus/bdd/expression/DelegatingExpressionProcessor.java\n\n@@ -19,7 +19,7 @@ package org.vividus.bdd.expression;\n import java.util.Collection;\n import java.util.Optional;\n \n-public abstract class DelegatingExpressionProcessor implements IExpressionProcessor\n+public class DelegatingExpressionProcessor implements IExpressionProcessor\n {\n     private final Collection<IExpressionProcessor> delegates;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0MzAzNA==", "url": "https://github.com/vividus-framework/vividus/pull/273#discussion_r369243034", "bodyText": "valueOf is to generic, static import worsens readability", "author": "valfirst", "createdAt": "2020-01-21T21:06:51Z", "path": "vividus-plugin-datetime/src/main/java/org/vividus/bdd/expression/EpochExpressionProcessors.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.expression;\n+\n+import static java.lang.Long.parseLong;\n+import static java.lang.String.valueOf;\n+\n+import java.time.format.DateTimeFormatter;\n+import java.util.List;\n+\n+import javax.inject.Named;\n+\n+import org.vividus.util.DateUtils;\n+\n+@Named\n+public class EpochExpressionProcessors extends DelegatingExpressionProcessor\n+{\n+    public EpochExpressionProcessors(DateUtils dateUtils)\n+    {\n+        super(List.of(\n+            new UnaryExpressionProcessor(\"toEpochSecond\",\n+                arg -> valueOf(dateUtils.toEpochSecond(arg, DateTimeFormatter.ISO_DATE_TIME))),", "originalCommit": "3e123e55d7ebfa6dfbe77eabe2c4de5fab377210", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "52add12cadf9ec6785e0a1eccbc2d634a345d8a8", "chunk": "diff --git a/vividus-plugin-datetime/src/main/java/org/vividus/bdd/expression/EpochExpressionProcessors.java b/vividus-plugin-datetime/src/main/java/org/vividus/bdd/expression/EpochExpressionProcessors.java\nindex 76e7b0cd..594fc124 100644\n--- a/vividus-plugin-datetime/src/main/java/org/vividus/bdd/expression/EpochExpressionProcessors.java\n+++ b/vividus-plugin-datetime/src/main/java/org/vividus/bdd/expression/EpochExpressionProcessors.java\n\n@@ -17,7 +17,6 @@\n package org.vividus.bdd.expression;\n \n import static java.lang.Long.parseLong;\n-import static java.lang.String.valueOf;\n \n import java.time.format.DateTimeFormatter;\n import java.util.List;\n"}}, {"oid": "52add12cadf9ec6785e0a1eccbc2d634a345d8a8", "url": "https://github.com/vividus-framework/vividus/commit/52add12cadf9ec6785e0a1eccbc2d634a345d8a8", "message": "[vividus-plugin-datetime] Add expressions to work with epoch time\n- toEpochSecond(date) - converts specified date in ISO_DATE_TIME to epoch seconds\n- fromEpochSecond(seconds) - converts specified seconds to ISO_DATE_TIME date", "committedDate": "2020-01-22T04:10:35Z", "type": "commit"}, {"oid": "aaeff3d6b4107c1cf6dc174f1cff178137de0fa3", "url": "https://github.com/vividus-framework/vividus/commit/aaeff3d6b4107c1cf6dc174f1cff178137de0fa3", "message": "Add missing line break between beans declaration", "committedDate": "2020-01-22T04:11:38Z", "type": "commit"}, {"oid": "aaeff3d6b4107c1cf6dc174f1cff178137de0fa3", "url": "https://github.com/vividus-framework/vividus/commit/aaeff3d6b4107c1cf6dc174f1cff178137de0fa3", "message": "Add missing line break between beans declaration", "committedDate": "2020-01-22T04:11:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwMjk3Mw==", "url": "https://github.com/vividus-framework/vividus/pull/273#discussion_r369402973", "bodyText": "delegates -> expressionProcessors?", "author": "ikalinin1", "createdAt": "2020-01-22T07:27:14Z", "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/expression/DelegatingExpressionProcessor.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.expression;\n+\n+import java.util.Collection;\n+import java.util.Optional;\n+\n+public class DelegatingExpressionProcessor implements IExpressionProcessor\n+{\n+    private final Collection<IExpressionProcessor> delegates;", "originalCommit": "aaeff3d6b4107c1cf6dc174f1cff178137de0fa3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwOTQ2Mw==", "url": "https://github.com/vividus-framework/vividus/pull/273#discussion_r369409463", "bodyText": "#273 (comment)", "author": "uarlouski", "createdAt": "2020-01-22T07:50:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwMjk3Mw=="}], "type": "inlineReview", "revised_code": null}]}