{"pr_number": 602, "pr_title": "Add step 'When I wait for 'responseCode' response code for HTTP httpM\u2026", "pr_createdAt": "2020-05-21T20:01:12Z", "pr_url": "https://github.com/vividus-framework/vividus/pull/602", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEyMzY2OA==", "url": "https://github.com/vividus-framework/vividus/pull/602#discussion_r429123668", "bodyText": "do not use any to verify expected successful invocations, use eq, argThat and etc.", "author": "valfirst", "createdAt": "2020-05-22T08:50:10Z", "path": "vividus-plugin-rest-api/src/test/java/org/vividus/bdd/steps/api/HttpRequestStepsTests.java", "diffHunk": "@@ -149,6 +156,14 @@ void testSetCustomRequestConfigNoField()\n         assertEquals(\"nonExistentField\", exception.getMessage());\n     }\n \n+    @Test\n+    void testWaitForResponse() throws IOException\n+    {\n+        httpRequestSteps.waitForResponse(RESPONSE_CODE, HttpMethod.GET, URL, DURATION, RETRY_TIMES);\n+        verify(httpRequestExecutor).executeHttpRequest(eq(HttpMethod.GET), eq(URL), eq(Optional.empty()),\n+                any(), any(WaitMode.class));", "originalCommit": "6f657f4c29bd69f4b9a06fee2b97158fbafb3ca9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8a67f158f76598f3726f25323c50db0abdf9a0a1", "chunk": "diff --git a/vividus-plugin-rest-api/src/test/java/org/vividus/bdd/steps/api/HttpRequestStepsTests.java b/vividus-plugin-rest-api/src/test/java/org/vividus/bdd/steps/api/HttpRequestStepsTests.java\nindex 9aec6a7d..147595db 100644\n--- a/vividus-plugin-rest-api/src/test/java/org/vividus/bdd/steps/api/HttpRequestStepsTests.java\n+++ b/vividus-plugin-rest-api/src/test/java/org/vividus/bdd/steps/api/HttpRequestStepsTests.java\n\n@@ -157,11 +153,15 @@ class HttpRequestStepsTests\n     }\n \n     @Test\n-    void testWaitForResponse() throws IOException\n+    void testWaitForResponseCode()\n     {\n-        httpRequestSteps.waitForResponse(RESPONSE_CODE, HttpMethod.GET, URL, DURATION, RETRY_TIMES);\n-        verify(httpRequestExecutor).executeHttpRequest(eq(HttpMethod.GET), eq(URL), eq(Optional.empty()),\n-                any(), any(WaitMode.class));\n+        int retryTimes = 5;\n+        int responseCode = 200;\n+        SubSteps stepsToExecute = mock(SubSteps.class);\n+        when(httpTestContext.getResponse())\n+                .thenReturn(new HttpResponse());\n+        httpRequestSteps.waitForResponseCode(responseCode, Duration.ofSeconds(10), retryTimes, stepsToExecute);\n+        verify(stepsToExecute, times(retryTimes)).execute(Optional.empty());\n     }\n \n     private void verifyPutRequestEntity(String expectedContent)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEyNDIwMw==", "url": "https://github.com/vividus-framework/vividus/pull/602#discussion_r429124203", "bodyText": "constants used once could be inlined", "author": "valfirst", "createdAt": "2020-05-22T08:51:15Z", "path": "vividus-plugin-rest-api/src/test/java/org/vividus/bdd/steps/api/HttpRequestStepsTests.java", "diffHunk": "@@ -47,6 +51,9 @@\n     private static final String RELATIVE_URL = \"/relativeUrl\";\n     private static final String CONTENT = \"content\";\n     private static final String CR_LF = \"\\r\\n\";\n+    private static final Duration DURATION = Duration.ofSeconds(10);\n+    private static final int RESPONSE_CODE = 200;\n+    private static final int RETRY_TIMES = 10;", "originalCommit": "6f657f4c29bd69f4b9a06fee2b97158fbafb3ca9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8a67f158f76598f3726f25323c50db0abdf9a0a1", "chunk": "diff --git a/vividus-plugin-rest-api/src/test/java/org/vividus/bdd/steps/api/HttpRequestStepsTests.java b/vividus-plugin-rest-api/src/test/java/org/vividus/bdd/steps/api/HttpRequestStepsTests.java\nindex 9aec6a7d..147595db 100644\n--- a/vividus-plugin-rest-api/src/test/java/org/vividus/bdd/steps/api/HttpRequestStepsTests.java\n+++ b/vividus-plugin-rest-api/src/test/java/org/vividus/bdd/steps/api/HttpRequestStepsTests.java\n\n@@ -51,9 +50,6 @@ class HttpRequestStepsTests\n     private static final String RELATIVE_URL = \"/relativeUrl\";\n     private static final String CONTENT = \"content\";\n     private static final String CR_LF = \"\\r\\n\";\n-    private static final Duration DURATION = Duration.ofSeconds(10);\n-    private static final int RESPONSE_CODE = 200;\n-    private static final int RETRY_TIMES = 10;\n \n     @Mock\n     private HttpTestContext httpTestContext;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEyNDQ2Mg==", "url": "https://github.com/vividus-framework/vividus/pull/602#discussion_r429124462", "bodyText": "waitForResponse -> waitForResponseCode", "author": "valfirst", "createdAt": "2020-05-22T08:51:49Z", "path": "vividus-plugin-rest-api/src/main/java/org/vividus/bdd/steps/api/HttpRequestSteps.java", "diffHunk": "@@ -202,6 +204,39 @@ public void setCustomRequestConfig(ExamplesTable configItems) throws ReflectiveO\n         httpTestContext.putRequestConfig(requestConfigBuilder.build());\n     }\n \n+    /**\n+     * Step sends HTTP request for the given <b>url</b> and waits for a specified amount of time\n+     * until HTTP response code is equal to what is expected and stores HTTP response into Scenario-level variable.<br>\n+     * This step can use the request body that was set before.\n+     * Request body shouldn't be set for methods that can't contain body (GET, HEAD, OPTIONS, TRACE),\n+     * and should be set for methods that must contain body (PATCH, POST, PUT).\n+     *\n+     * @param responseCode for example 200, 404\n+     * @param httpMethod   HTTP method type. Parameter accepts the following HTTP methods:\n+     *                     <ul>\n+     *                     <li>GET</li>\n+     *                     <li>HEAD</li>\n+     *                     <li>POST</li>\n+     *                     <li>PUT</li>\n+     *                     <li>OPTIONS</li>\n+     *                     <li>DELETE</li>\n+     *                     <li>TRACE</li>\n+     *                     <li>PATCH</li>\n+     *                     </ul>\n+     * @param url          for example https://www.vividus.org/sitemap.xml\n+     * @param duration     Time duration to wait\n+     * @param retryTimes   How many times request will be retried; duration/retryTimes=timeout between requests\n+     * @throws IOException If an input or output exception occurred\n+     */\n+    @When(\"When I wait for '$responseCode' response code for HTTP $httpMethod request for a resource \"\n+            + \"with the URL '$url' for '$duration' duration retrying $retryTimes times\")\n+    public void waitForResponse(int responseCode, HttpMethod httpMethod, String url, Duration duration,", "originalCommit": "6f657f4c29bd69f4b9a06fee2b97158fbafb3ca9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8a67f158f76598f3726f25323c50db0abdf9a0a1", "chunk": "diff --git a/vividus-plugin-rest-api/src/main/java/org/vividus/bdd/steps/api/HttpRequestSteps.java b/vividus-plugin-rest-api/src/main/java/org/vividus/bdd/steps/api/HttpRequestSteps.java\nindex e2ad0284..6d0c02b9 100644\n--- a/vividus-plugin-rest-api/src/main/java/org/vividus/bdd/steps/api/HttpRequestSteps.java\n+++ b/vividus-plugin-rest-api/src/main/java/org/vividus/bdd/steps/api/HttpRequestSteps.java\n\n@@ -205,36 +208,39 @@ public class HttpRequestSteps\n     }\n \n     /**\n-     * Step sends HTTP request for the given <b>url</b> and waits for a specified amount of time\n-     * until HTTP response code is equal to what is expected and stores HTTP response into Scenario-level variable.<br>\n-     * This step can use the request body that was set before.\n-     * Request body shouldn't be set for methods that can't contain body (GET, HEAD, OPTIONS, TRACE),\n-     * and should be set for methods that must contain body (PATCH, POST, PUT).\n+     * Waits for a specified amount of time until HTTP response code is equal to what is expected.\n+     * <p>\n+     * <b>Actions performed:</b>\n+     * </p>\n+     * <ul>\n+     * <li>Execute sub-steps</li>\n+     * <li>Check if HTTP response code is equal to what is expected</li>\n+     * </ul>\n      *\n      * @param responseCode for example 200, 404\n-     * @param httpMethod   HTTP method type. Parameter accepts the following HTTP methods:\n-     *                     <ul>\n-     *                     <li>GET</li>\n-     *                     <li>HEAD</li>\n-     *                     <li>POST</li>\n-     *                     <li>PUT</li>\n-     *                     <li>OPTIONS</li>\n-     *                     <li>DELETE</li>\n-     *                     <li>TRACE</li>\n-     *                     <li>PATCH</li>\n-     *                     </ul>\n-     * @param url          for example https://www.vividus.org/sitemap.xml\n      * @param duration     Time duration to wait\n      * @param retryTimes   How many times request will be retried; duration/retryTimes=timeout between requests\n-     * @throws IOException If an input or output exception occurred\n+     * @param stepsToExecute Steps to execute at each wait iteration\n      */\n-    @When(\"When I wait for '$responseCode' response code for HTTP $httpMethod request for a resource \"\n-            + \"with the URL '$url' for '$duration' duration retrying $retryTimes times\")\n-    public void waitForResponse(int responseCode, HttpMethod httpMethod, String url, Duration duration,\n-            int retryTimes) throws IOException\n+    @When(\"I wait for response code `$responseCode` for `$duration` duration retrying $retryTimes times\"\n+            + \"$stepsToExecute\")\n+    public void waitForResponseCode(int responseCode, Duration duration, int retryTimes,\n+            SubSteps stepsToExecute)\n     {\n-        httpRequestExecutor.executeHttpRequest(httpMethod, url, Optional.empty(),\n-            httpResponse -> httpResponse.getStatusCode() == responseCode, new WaitMode(duration, retryTimes));\n+        new Waiter(new WaitMode(duration, retryTimes)).wait(\n+                () -> stepsToExecute.execute(Optional.empty()),\n+                () -> isResponseCodeIsEqualToExpected(httpTestContext.getResponse(), responseCode)\n+        );\n+    }\n+\n+    private boolean isResponseCodeIsEqualToExpected(HttpResponse response, int expectedResponseCode)\n+    {\n+        if (response == null)\n+        {\n+            return false;\n+        }\n+        int statusCode = response.getStatusCode();\n+        return statusCode == expectedResponseCode;\n     }\n \n     private static Object castType(String typeName, String value)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEyNTY1NQ==", "url": "https://github.com/vividus-framework/vividus/pull/602#discussion_r429125655", "bodyText": "and stores HTTP response into Scenario-level variable", "author": "valfirst", "createdAt": "2020-05-22T08:54:32Z", "path": "vividus-plugin-rest-api/src/main/java/org/vividus/bdd/steps/api/HttpRequestSteps.java", "diffHunk": "@@ -202,6 +204,39 @@ public void setCustomRequestConfig(ExamplesTable configItems) throws ReflectiveO\n         httpTestContext.putRequestConfig(requestConfigBuilder.build());\n     }\n \n+    /**\n+     * Step sends HTTP request for the given <b>url</b> and waits for a specified amount of time\n+     * until HTTP response code is equal to what is expected and stores HTTP response into Scenario-level variable.<br>", "originalCommit": "6f657f4c29bd69f4b9a06fee2b97158fbafb3ca9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8a67f158f76598f3726f25323c50db0abdf9a0a1", "chunk": "diff --git a/vividus-plugin-rest-api/src/main/java/org/vividus/bdd/steps/api/HttpRequestSteps.java b/vividus-plugin-rest-api/src/main/java/org/vividus/bdd/steps/api/HttpRequestSteps.java\nindex e2ad0284..6d0c02b9 100644\n--- a/vividus-plugin-rest-api/src/main/java/org/vividus/bdd/steps/api/HttpRequestSteps.java\n+++ b/vividus-plugin-rest-api/src/main/java/org/vividus/bdd/steps/api/HttpRequestSteps.java\n\n@@ -205,36 +208,39 @@ public class HttpRequestSteps\n     }\n \n     /**\n-     * Step sends HTTP request for the given <b>url</b> and waits for a specified amount of time\n-     * until HTTP response code is equal to what is expected and stores HTTP response into Scenario-level variable.<br>\n-     * This step can use the request body that was set before.\n-     * Request body shouldn't be set for methods that can't contain body (GET, HEAD, OPTIONS, TRACE),\n-     * and should be set for methods that must contain body (PATCH, POST, PUT).\n+     * Waits for a specified amount of time until HTTP response code is equal to what is expected.\n+     * <p>\n+     * <b>Actions performed:</b>\n+     * </p>\n+     * <ul>\n+     * <li>Execute sub-steps</li>\n+     * <li>Check if HTTP response code is equal to what is expected</li>\n+     * </ul>\n      *\n      * @param responseCode for example 200, 404\n-     * @param httpMethod   HTTP method type. Parameter accepts the following HTTP methods:\n-     *                     <ul>\n-     *                     <li>GET</li>\n-     *                     <li>HEAD</li>\n-     *                     <li>POST</li>\n-     *                     <li>PUT</li>\n-     *                     <li>OPTIONS</li>\n-     *                     <li>DELETE</li>\n-     *                     <li>TRACE</li>\n-     *                     <li>PATCH</li>\n-     *                     </ul>\n-     * @param url          for example https://www.vividus.org/sitemap.xml\n      * @param duration     Time duration to wait\n      * @param retryTimes   How many times request will be retried; duration/retryTimes=timeout between requests\n-     * @throws IOException If an input or output exception occurred\n+     * @param stepsToExecute Steps to execute at each wait iteration\n      */\n-    @When(\"When I wait for '$responseCode' response code for HTTP $httpMethod request for a resource \"\n-            + \"with the URL '$url' for '$duration' duration retrying $retryTimes times\")\n-    public void waitForResponse(int responseCode, HttpMethod httpMethod, String url, Duration duration,\n-            int retryTimes) throws IOException\n+    @When(\"I wait for response code `$responseCode` for `$duration` duration retrying $retryTimes times\"\n+            + \"$stepsToExecute\")\n+    public void waitForResponseCode(int responseCode, Duration duration, int retryTimes,\n+            SubSteps stepsToExecute)\n     {\n-        httpRequestExecutor.executeHttpRequest(httpMethod, url, Optional.empty(),\n-            httpResponse -> httpResponse.getStatusCode() == responseCode, new WaitMode(duration, retryTimes));\n+        new Waiter(new WaitMode(duration, retryTimes)).wait(\n+                () -> stepsToExecute.execute(Optional.empty()),\n+                () -> isResponseCodeIsEqualToExpected(httpTestContext.getResponse(), responseCode)\n+        );\n+    }\n+\n+    private boolean isResponseCodeIsEqualToExpected(HttpResponse response, int expectedResponseCode)\n+    {\n+        if (response == null)\n+        {\n+            return false;\n+        }\n+        int statusCode = response.getStatusCode();\n+        return statusCode == expectedResponseCode;\n     }\n \n     private static Object castType(String typeName, String value)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEyOTYyNA==", "url": "https://github.com/vividus-framework/vividus/pull/602#discussion_r429129624", "bodyText": "@When(\"I wait for `$responseCode` response code for HTTP $httpMethod request to resource \"\n           + \"`$resourceUrl` for `$duration` duration retrying $retryTimes times\")", "author": "valfirst", "createdAt": "2020-05-22T09:02:56Z", "path": "vividus-plugin-rest-api/src/main/java/org/vividus/bdd/steps/api/HttpRequestSteps.java", "diffHunk": "@@ -202,6 +204,39 @@ public void setCustomRequestConfig(ExamplesTable configItems) throws ReflectiveO\n         httpTestContext.putRequestConfig(requestConfigBuilder.build());\n     }\n \n+    /**\n+     * Step sends HTTP request for the given <b>url</b> and waits for a specified amount of time\n+     * until HTTP response code is equal to what is expected and stores HTTP response into Scenario-level variable.<br>\n+     * This step can use the request body that was set before.\n+     * Request body shouldn't be set for methods that can't contain body (GET, HEAD, OPTIONS, TRACE),\n+     * and should be set for methods that must contain body (PATCH, POST, PUT).\n+     *\n+     * @param responseCode for example 200, 404\n+     * @param httpMethod   HTTP method type. Parameter accepts the following HTTP methods:\n+     *                     <ul>\n+     *                     <li>GET</li>\n+     *                     <li>HEAD</li>\n+     *                     <li>POST</li>\n+     *                     <li>PUT</li>\n+     *                     <li>OPTIONS</li>\n+     *                     <li>DELETE</li>\n+     *                     <li>TRACE</li>\n+     *                     <li>PATCH</li>\n+     *                     </ul>\n+     * @param url          for example https://www.vividus.org/sitemap.xml\n+     * @param duration     Time duration to wait\n+     * @param retryTimes   How many times request will be retried; duration/retryTimes=timeout between requests\n+     * @throws IOException If an input or output exception occurred\n+     */\n+    @When(\"When I wait for '$responseCode' response code for HTTP $httpMethod request for a resource \"\n+            + \"with the URL '$url' for '$duration' duration retrying $retryTimes times\")", "originalCommit": "6f657f4c29bd69f4b9a06fee2b97158fbafb3ca9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEzMDczOQ==", "url": "https://github.com/vividus-framework/vividus/pull/602#discussion_r429130739", "bodyText": "Also what about making this step a bit more universal:\n@When(\"I wait for response code `$responseCode` for `$duration` duration retrying $retryTimes times\"\n        + \"$stepsToExecute\")\n\n?", "author": "valfirst", "createdAt": "2020-05-22T09:05:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEyOTYyNA=="}], "type": "inlineReview", "revised_code": {"commit": "8a67f158f76598f3726f25323c50db0abdf9a0a1", "chunk": "diff --git a/vividus-plugin-rest-api/src/main/java/org/vividus/bdd/steps/api/HttpRequestSteps.java b/vividus-plugin-rest-api/src/main/java/org/vividus/bdd/steps/api/HttpRequestSteps.java\nindex e2ad0284..6d0c02b9 100644\n--- a/vividus-plugin-rest-api/src/main/java/org/vividus/bdd/steps/api/HttpRequestSteps.java\n+++ b/vividus-plugin-rest-api/src/main/java/org/vividus/bdd/steps/api/HttpRequestSteps.java\n\n@@ -205,36 +208,39 @@ public class HttpRequestSteps\n     }\n \n     /**\n-     * Step sends HTTP request for the given <b>url</b> and waits for a specified amount of time\n-     * until HTTP response code is equal to what is expected and stores HTTP response into Scenario-level variable.<br>\n-     * This step can use the request body that was set before.\n-     * Request body shouldn't be set for methods that can't contain body (GET, HEAD, OPTIONS, TRACE),\n-     * and should be set for methods that must contain body (PATCH, POST, PUT).\n+     * Waits for a specified amount of time until HTTP response code is equal to what is expected.\n+     * <p>\n+     * <b>Actions performed:</b>\n+     * </p>\n+     * <ul>\n+     * <li>Execute sub-steps</li>\n+     * <li>Check if HTTP response code is equal to what is expected</li>\n+     * </ul>\n      *\n      * @param responseCode for example 200, 404\n-     * @param httpMethod   HTTP method type. Parameter accepts the following HTTP methods:\n-     *                     <ul>\n-     *                     <li>GET</li>\n-     *                     <li>HEAD</li>\n-     *                     <li>POST</li>\n-     *                     <li>PUT</li>\n-     *                     <li>OPTIONS</li>\n-     *                     <li>DELETE</li>\n-     *                     <li>TRACE</li>\n-     *                     <li>PATCH</li>\n-     *                     </ul>\n-     * @param url          for example https://www.vividus.org/sitemap.xml\n      * @param duration     Time duration to wait\n      * @param retryTimes   How many times request will be retried; duration/retryTimes=timeout between requests\n-     * @throws IOException If an input or output exception occurred\n+     * @param stepsToExecute Steps to execute at each wait iteration\n      */\n-    @When(\"When I wait for '$responseCode' response code for HTTP $httpMethod request for a resource \"\n-            + \"with the URL '$url' for '$duration' duration retrying $retryTimes times\")\n-    public void waitForResponse(int responseCode, HttpMethod httpMethod, String url, Duration duration,\n-            int retryTimes) throws IOException\n+    @When(\"I wait for response code `$responseCode` for `$duration` duration retrying $retryTimes times\"\n+            + \"$stepsToExecute\")\n+    public void waitForResponseCode(int responseCode, Duration duration, int retryTimes,\n+            SubSteps stepsToExecute)\n     {\n-        httpRequestExecutor.executeHttpRequest(httpMethod, url, Optional.empty(),\n-            httpResponse -> httpResponse.getStatusCode() == responseCode, new WaitMode(duration, retryTimes));\n+        new Waiter(new WaitMode(duration, retryTimes)).wait(\n+                () -> stepsToExecute.execute(Optional.empty()),\n+                () -> isResponseCodeIsEqualToExpected(httpTestContext.getResponse(), responseCode)\n+        );\n+    }\n+\n+    private boolean isResponseCodeIsEqualToExpected(HttpResponse response, int expectedResponseCode)\n+    {\n+        if (response == null)\n+        {\n+            return false;\n+        }\n+        int statusCode = response.getStatusCode();\n+        return statusCode == expectedResponseCode;\n     }\n \n     private static Object castType(String typeName, String value)\n"}}, {"oid": "8a67f158f76598f3726f25323c50db0abdf9a0a1", "url": "https://github.com/vividus-framework/vividus/commit/8a67f158f76598f3726f25323c50db0abdf9a0a1", "message": "Add step 'When I wait for 'responseCode' response code for HTTP httpMethod request for a resource with the URL 'url' for 'duration' duration retrying retryTimes times'", "committedDate": "2020-05-25T04:01:54Z", "type": "forcePushed"}, {"oid": "a62e2033f7ffa8480d4f6a8b26b74cc1d3e89d81", "url": "https://github.com/vividus-framework/vividus/commit/a62e2033f7ffa8480d4f6a8b26b74cc1d3e89d81", "message": "Add step 'When I wait for 'responseCode' response code for HTTP httpMethod request for a resource with the URL 'url' for 'duration' duration retrying retryTimes times'", "committedDate": "2020-05-25T04:07:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc1MTMxNw==", "url": "https://github.com/vividus-framework/vividus/pull/602#discussion_r429751317", "bodyText": "the variable can be inlined", "author": "valfirst", "createdAt": "2020-05-25T06:25:50Z", "path": "vividus-plugin-rest-api/src/main/java/org/vividus/bdd/steps/api/HttpRequestSteps.java", "diffHunk": "@@ -202,6 +207,42 @@ public void setCustomRequestConfig(ExamplesTable configItems) throws ReflectiveO\n         httpTestContext.putRequestConfig(requestConfigBuilder.build());\n     }\n \n+    /**\n+     * Waits for a specified amount of time until HTTP response code is equal to what is expected.\n+     * <p>\n+     * <b>Actions performed:</b>\n+     * </p>\n+     * <ul>\n+     * <li>Execute sub-steps</li>\n+     * <li>Check if HTTP response code is equal to what is expected</li>\n+     * </ul>\n+     *\n+     * @param responseCode for example 200, 404\n+     * @param duration     Time duration to wait\n+     * @param retryTimes   How many times request will be retried; duration/retryTimes=timeout between requests\n+     * @param stepsToExecute Steps to execute at each wait iteration\n+     */\n+    @When(\"I wait for response code `$responseCode` for `$duration` duration retrying $retryTimes times\"\n+            + \"$stepsToExecute\")\n+    public void waitForResponseCode(int responseCode, Duration duration, int retryTimes,\n+            SubSteps stepsToExecute)\n+    {\n+        new Waiter(new WaitMode(duration, retryTimes)).wait(\n+                () -> stepsToExecute.execute(Optional.empty()),\n+                () -> isResponseCodeIsEqualToExpected(httpTestContext.getResponse(), responseCode)\n+        );\n+    }\n+\n+    private boolean isResponseCodeIsEqualToExpected(HttpResponse response, int expectedResponseCode)\n+    {\n+        if (response == null)\n+        {\n+            return false;\n+        }\n+        int statusCode = response.getStatusCode();", "originalCommit": "a62e2033f7ffa8480d4f6a8b26b74cc1d3e89d81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dde250444f6aa30dc016427dfd3921bcc3fdd0b0", "chunk": "diff --git a/vividus-plugin-rest-api/src/main/java/org/vividus/bdd/steps/api/HttpRequestSteps.java b/vividus-plugin-rest-api/src/main/java/org/vividus/bdd/steps/api/HttpRequestSteps.java\nindex 6d0c02b9..0e9cbc32 100644\n--- a/vividus-plugin-rest-api/src/main/java/org/vividus/bdd/steps/api/HttpRequestSteps.java\n+++ b/vividus-plugin-rest-api/src/main/java/org/vividus/bdd/steps/api/HttpRequestSteps.java\n\n@@ -235,12 +235,7 @@ public class HttpRequestSteps\n \n     private boolean isResponseCodeIsEqualToExpected(HttpResponse response, int expectedResponseCode)\n     {\n-        if (response == null)\n-        {\n-            return false;\n-        }\n-        int statusCode = response.getStatusCode();\n-        return statusCode == expectedResponseCode;\n+        return response != null && response.getStatusCode() == expectedResponseCode;\n     }\n \n     private static Object castType(String typeName, String value)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc1MTYxNQ==", "url": "https://github.com/vividus-framework/vividus/pull/602#discussion_r429751615", "bodyText": "in general the full method can be like:\nreturn response != null && response.getStatusCode() == expectedResponseCode;", "author": "valfirst", "createdAt": "2020-05-25T06:26:52Z", "path": "vividus-plugin-rest-api/src/main/java/org/vividus/bdd/steps/api/HttpRequestSteps.java", "diffHunk": "@@ -202,6 +207,42 @@ public void setCustomRequestConfig(ExamplesTable configItems) throws ReflectiveO\n         httpTestContext.putRequestConfig(requestConfigBuilder.build());\n     }\n \n+    /**\n+     * Waits for a specified amount of time until HTTP response code is equal to what is expected.\n+     * <p>\n+     * <b>Actions performed:</b>\n+     * </p>\n+     * <ul>\n+     * <li>Execute sub-steps</li>\n+     * <li>Check if HTTP response code is equal to what is expected</li>\n+     * </ul>\n+     *\n+     * @param responseCode for example 200, 404\n+     * @param duration     Time duration to wait\n+     * @param retryTimes   How many times request will be retried; duration/retryTimes=timeout between requests\n+     * @param stepsToExecute Steps to execute at each wait iteration\n+     */\n+    @When(\"I wait for response code `$responseCode` for `$duration` duration retrying $retryTimes times\"\n+            + \"$stepsToExecute\")\n+    public void waitForResponseCode(int responseCode, Duration duration, int retryTimes,\n+            SubSteps stepsToExecute)\n+    {\n+        new Waiter(new WaitMode(duration, retryTimes)).wait(\n+                () -> stepsToExecute.execute(Optional.empty()),\n+                () -> isResponseCodeIsEqualToExpected(httpTestContext.getResponse(), responseCode)\n+        );\n+    }\n+\n+    private boolean isResponseCodeIsEqualToExpected(HttpResponse response, int expectedResponseCode)\n+    {\n+        if (response == null)\n+        {\n+            return false;\n+        }\n+        int statusCode = response.getStatusCode();\n+        return statusCode == expectedResponseCode;", "originalCommit": "a62e2033f7ffa8480d4f6a8b26b74cc1d3e89d81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dde250444f6aa30dc016427dfd3921bcc3fdd0b0", "chunk": "diff --git a/vividus-plugin-rest-api/src/main/java/org/vividus/bdd/steps/api/HttpRequestSteps.java b/vividus-plugin-rest-api/src/main/java/org/vividus/bdd/steps/api/HttpRequestSteps.java\nindex 6d0c02b9..0e9cbc32 100644\n--- a/vividus-plugin-rest-api/src/main/java/org/vividus/bdd/steps/api/HttpRequestSteps.java\n+++ b/vividus-plugin-rest-api/src/main/java/org/vividus/bdd/steps/api/HttpRequestSteps.java\n\n@@ -235,12 +235,7 @@ public class HttpRequestSteps\n \n     private boolean isResponseCodeIsEqualToExpected(HttpResponse response, int expectedResponseCode)\n     {\n-        if (response == null)\n-        {\n-            return false;\n-        }\n-        int statusCode = response.getStatusCode();\n-        return statusCode == expectedResponseCode;\n+        return response != null && response.getStatusCode() == expectedResponseCode;\n     }\n \n     private static Object castType(String typeName, String value)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc1MTg1Ng==", "url": "https://github.com/vividus-framework/vividus/pull/602#discussion_r429751856", "bodyText": "this peace of code can be put on the previous line", "author": "valfirst", "createdAt": "2020-05-25T06:27:39Z", "path": "vividus-plugin-rest-api/src/test/java/org/vividus/bdd/steps/api/HttpRequestStepsTests.java", "diffHunk": "@@ -149,6 +155,18 @@ void testSetCustomRequestConfigNoField()\n         assertEquals(\"nonExistentField\", exception.getMessage());\n     }\n \n+    @Test\n+    void testWaitForResponseCode()\n+    {\n+        int retryTimes = 5;\n+        int responseCode = 200;\n+        SubSteps stepsToExecute = mock(SubSteps.class);\n+        when(httpTestContext.getResponse())\n+                .thenReturn(new HttpResponse());", "originalCommit": "a62e2033f7ffa8480d4f6a8b26b74cc1d3e89d81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dde250444f6aa30dc016427dfd3921bcc3fdd0b0", "chunk": "diff --git a/vividus-plugin-rest-api/src/test/java/org/vividus/bdd/steps/api/HttpRequestStepsTests.java b/vividus-plugin-rest-api/src/test/java/org/vividus/bdd/steps/api/HttpRequestStepsTests.java\nindex 6910a45c..ef00aa99 100644\n--- a/vividus-plugin-rest-api/src/test/java/org/vividus/bdd/steps/api/HttpRequestStepsTests.java\n+++ b/vividus-plugin-rest-api/src/test/java/org/vividus/bdd/steps/api/HttpRequestStepsTests.java\n\n@@ -158,13 +160,30 @@ class HttpRequestStepsTests\n     @Test\n     void testWaitForResponseCode()\n     {\n-        int retryTimes = 5;\n-        int responseCode = 200;\n         SubSteps stepsToExecute = mock(SubSteps.class);\n-        when(httpTestContext.getResponse())\n-                .thenReturn(new HttpResponse());\n-        httpRequestSteps.waitForResponseCode(responseCode, Duration.ofSeconds(10), retryTimes, stepsToExecute);\n-        verify(stepsToExecute, times(retryTimes)).execute(Optional.empty());\n+        when(httpTestContext.getResponse()).thenReturn(new HttpResponse());\n+        httpRequestSteps.waitForResponseCode(RESPONSE_CODE, Duration.ofSeconds(10), RETRY_TIMES, stepsToExecute);\n+        verify(stepsToExecute, times(RETRY_TIMES)).execute(Optional.empty());\n+    }\n+\n+    @Test\n+    void testWaitForResponseCodeWhenResponseIsNull()\n+    {\n+        SubSteps stepsToExecute = mock(SubSteps.class);\n+        when(httpTestContext.getResponse()).thenReturn(null);\n+        httpRequestSteps.waitForResponseCode(RESPONSE_CODE, Duration.ofSeconds(10), RETRY_TIMES, stepsToExecute);\n+        verify(stepsToExecute, times(RETRY_TIMES)).execute(Optional.empty());\n+    }\n+\n+    @Test\n+    void testWaitForResponseCodeWhenResponseCodeIsEqualToExpected()\n+    {\n+        SubSteps stepsToExecute = mock(SubSteps.class);\n+        HttpResponse httpResponse = new HttpResponse();\n+        httpResponse.setStatusCode(200);\n+        when(httpTestContext.getResponse()).thenReturn(httpResponse);\n+        httpRequestSteps.waitForResponseCode(RESPONSE_CODE, Duration.ofSeconds(10), RETRY_TIMES, stepsToExecute);\n+        verify(stepsToExecute, times(1)).execute(Optional.empty());\n     }\n \n     private void verifyPutRequestEntity(String expectedContent)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc1NjQxNQ==", "url": "https://github.com/vividus-framework/vividus/pull/602#discussion_r429756415", "bodyText": "missing tests for cases:\n\nresponse == null\nresponse.code == expected response code", "author": "valfirst", "createdAt": "2020-05-25T06:42:01Z", "path": "vividus-plugin-rest-api/src/test/java/org/vividus/bdd/steps/api/HttpRequestStepsTests.java", "diffHunk": "@@ -149,6 +155,18 @@ void testSetCustomRequestConfigNoField()\n         assertEquals(\"nonExistentField\", exception.getMessage());\n     }\n \n+    @Test\n+    void testWaitForResponseCode()\n+    {\n+        int retryTimes = 5;\n+        int responseCode = 200;\n+        SubSteps stepsToExecute = mock(SubSteps.class);\n+        when(httpTestContext.getResponse())\n+                .thenReturn(new HttpResponse());\n+        httpRequestSteps.waitForResponseCode(responseCode, Duration.ofSeconds(10), retryTimes, stepsToExecute);\n+        verify(stepsToExecute, times(retryTimes)).execute(Optional.empty());\n+    }", "originalCommit": "a62e2033f7ffa8480d4f6a8b26b74cc1d3e89d81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dde250444f6aa30dc016427dfd3921bcc3fdd0b0", "chunk": "diff --git a/vividus-plugin-rest-api/src/test/java/org/vividus/bdd/steps/api/HttpRequestStepsTests.java b/vividus-plugin-rest-api/src/test/java/org/vividus/bdd/steps/api/HttpRequestStepsTests.java\nindex 6910a45c..ef00aa99 100644\n--- a/vividus-plugin-rest-api/src/test/java/org/vividus/bdd/steps/api/HttpRequestStepsTests.java\n+++ b/vividus-plugin-rest-api/src/test/java/org/vividus/bdd/steps/api/HttpRequestStepsTests.java\n\n@@ -158,13 +160,30 @@ class HttpRequestStepsTests\n     @Test\n     void testWaitForResponseCode()\n     {\n-        int retryTimes = 5;\n-        int responseCode = 200;\n         SubSteps stepsToExecute = mock(SubSteps.class);\n-        when(httpTestContext.getResponse())\n-                .thenReturn(new HttpResponse());\n-        httpRequestSteps.waitForResponseCode(responseCode, Duration.ofSeconds(10), retryTimes, stepsToExecute);\n-        verify(stepsToExecute, times(retryTimes)).execute(Optional.empty());\n+        when(httpTestContext.getResponse()).thenReturn(new HttpResponse());\n+        httpRequestSteps.waitForResponseCode(RESPONSE_CODE, Duration.ofSeconds(10), RETRY_TIMES, stepsToExecute);\n+        verify(stepsToExecute, times(RETRY_TIMES)).execute(Optional.empty());\n+    }\n+\n+    @Test\n+    void testWaitForResponseCodeWhenResponseIsNull()\n+    {\n+        SubSteps stepsToExecute = mock(SubSteps.class);\n+        when(httpTestContext.getResponse()).thenReturn(null);\n+        httpRequestSteps.waitForResponseCode(RESPONSE_CODE, Duration.ofSeconds(10), RETRY_TIMES, stepsToExecute);\n+        verify(stepsToExecute, times(RETRY_TIMES)).execute(Optional.empty());\n+    }\n+\n+    @Test\n+    void testWaitForResponseCodeWhenResponseCodeIsEqualToExpected()\n+    {\n+        SubSteps stepsToExecute = mock(SubSteps.class);\n+        HttpResponse httpResponse = new HttpResponse();\n+        httpResponse.setStatusCode(200);\n+        when(httpTestContext.getResponse()).thenReturn(httpResponse);\n+        httpRequestSteps.waitForResponseCode(RESPONSE_CODE, Duration.ofSeconds(10), RETRY_TIMES, stepsToExecute);\n+        verify(stepsToExecute, times(1)).execute(Optional.empty());\n     }\n \n     private void verifyPutRequestEntity(String expectedContent)\n"}}, {"oid": "dde250444f6aa30dc016427dfd3921bcc3fdd0b0", "url": "https://github.com/vividus-framework/vividus/commit/dde250444f6aa30dc016427dfd3921bcc3fdd0b0", "message": "Add step 'When I wait for 'responseCode' response code for HTTP httpMethod request for a resource with the URL 'url' for 'duration' duration retrying retryTimes times'", "committedDate": "2020-05-25T09:27:23Z", "type": "forcePushed"}, {"oid": "db78ae6904f263ef330ea60183962cfb1ce722b0", "url": "https://github.com/vividus-framework/vividus/commit/db78ae6904f263ef330ea60183962cfb1ce722b0", "message": "Add step 'When I wait for 'responseCode' response code for HTTP httpMethod request for a resource with the URL 'url' for 'duration' duration retrying retryTimes times'", "committedDate": "2020-05-25T11:02:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg4MTAwMA==", "url": "https://github.com/vividus-framework/vividus/pull/602#discussion_r429881000", "bodyText": "this test and the previous one can be combined and data-driven approach can be applied: https://junit.org/junit5/docs/current/user-guide/#writing-tests-parameterized-tests-sources-MethodSource", "author": "valfirst", "createdAt": "2020-05-25T11:20:02Z", "path": "vividus-plugin-rest-api/src/test/java/org/vividus/bdd/steps/api/HttpRequestStepsTests.java", "diffHunk": "@@ -149,6 +157,35 @@ void testSetCustomRequestConfigNoField()\n         assertEquals(\"nonExistentField\", exception.getMessage());\n     }\n \n+    @Test\n+    void testWaitForResponseCode()\n+    {\n+        SubSteps stepsToExecute = mock(SubSteps.class);\n+        when(httpTestContext.getResponse()).thenReturn(new HttpResponse());\n+        httpRequestSteps.waitForResponseCode(RESPONSE_CODE, Duration.ofSeconds(10), RETRY_TIMES, stepsToExecute);\n+        verify(stepsToExecute, times(RETRY_TIMES)).execute(Optional.empty());\n+    }\n+\n+    @Test\n+    void testWaitForResponseCodeWhenResponseIsNull()\n+    {\n+        SubSteps stepsToExecute = mock(SubSteps.class);\n+        when(httpTestContext.getResponse()).thenReturn(null);\n+        httpRequestSteps.waitForResponseCode(RESPONSE_CODE, Duration.ofSeconds(10), RETRY_TIMES, stepsToExecute);\n+        verify(stepsToExecute, times(RETRY_TIMES)).execute(Optional.empty());\n+    }", "originalCommit": "db78ae6904f263ef330ea60183962cfb1ce722b0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bf69b2b8860a9cf601f8850cfd9da1c3491f0ed2", "chunk": "diff --git a/vividus-plugin-rest-api/src/test/java/org/vividus/bdd/steps/api/HttpRequestStepsTests.java b/vividus-plugin-rest-api/src/test/java/org/vividus/bdd/steps/api/HttpRequestStepsTests.java\nindex ef00aa99..fbb3c92b 100644\n--- a/vividus-plugin-rest-api/src/test/java/org/vividus/bdd/steps/api/HttpRequestStepsTests.java\n+++ b/vividus-plugin-rest-api/src/test/java/org/vividus/bdd/steps/api/HttpRequestStepsTests.java\n\n@@ -157,21 +160,18 @@ class HttpRequestStepsTests\n         assertEquals(\"nonExistentField\", exception.getMessage());\n     }\n \n-    @Test\n-    void testWaitForResponseCode()\n+    static Stream<HttpResponse> getHttpResponse()\n     {\n-        SubSteps stepsToExecute = mock(SubSteps.class);\n-        when(httpTestContext.getResponse()).thenReturn(new HttpResponse());\n-        httpRequestSteps.waitForResponseCode(RESPONSE_CODE, Duration.ofSeconds(10), RETRY_TIMES, stepsToExecute);\n-        verify(stepsToExecute, times(RETRY_TIMES)).execute(Optional.empty());\n+        return Stream.of(new HttpResponse(), null);\n     }\n \n-    @Test\n-    void testWaitForResponseCodeWhenResponseIsNull()\n+    @ParameterizedTest\n+    @MethodSource(\"getHttpResponse\")\n+    void testWaitForResponseCode(HttpResponse httpResponse)\n     {\n         SubSteps stepsToExecute = mock(SubSteps.class);\n-        when(httpTestContext.getResponse()).thenReturn(null);\n-        httpRequestSteps.waitForResponseCode(RESPONSE_CODE, Duration.ofSeconds(10), RETRY_TIMES, stepsToExecute);\n+        when(httpTestContext.getResponse()).thenReturn(httpResponse);\n+        httpRequestSteps.waitForResponseCode(RESPONSE_CODE, DURATION, RETRY_TIMES, stepsToExecute);\n         verify(stepsToExecute, times(RETRY_TIMES)).execute(Optional.empty());\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg4MTY0MQ==", "url": "https://github.com/vividus-framework/vividus/pull/602#discussion_r429881641", "bodyText": "decrease duration and number of retries to some minimal value (10 seconds - too much for unit test)", "author": "valfirst", "createdAt": "2020-05-25T11:21:40Z", "path": "vividus-plugin-rest-api/src/test/java/org/vividus/bdd/steps/api/HttpRequestStepsTests.java", "diffHunk": "@@ -149,6 +157,35 @@ void testSetCustomRequestConfigNoField()\n         assertEquals(\"nonExistentField\", exception.getMessage());\n     }\n \n+    @Test\n+    void testWaitForResponseCode()\n+    {\n+        SubSteps stepsToExecute = mock(SubSteps.class);\n+        when(httpTestContext.getResponse()).thenReturn(new HttpResponse());\n+        httpRequestSteps.waitForResponseCode(RESPONSE_CODE, Duration.ofSeconds(10), RETRY_TIMES, stepsToExecute);", "originalCommit": "db78ae6904f263ef330ea60183962cfb1ce722b0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bf69b2b8860a9cf601f8850cfd9da1c3491f0ed2", "chunk": "diff --git a/vividus-plugin-rest-api/src/test/java/org/vividus/bdd/steps/api/HttpRequestStepsTests.java b/vividus-plugin-rest-api/src/test/java/org/vividus/bdd/steps/api/HttpRequestStepsTests.java\nindex ef00aa99..fbb3c92b 100644\n--- a/vividus-plugin-rest-api/src/test/java/org/vividus/bdd/steps/api/HttpRequestStepsTests.java\n+++ b/vividus-plugin-rest-api/src/test/java/org/vividus/bdd/steps/api/HttpRequestStepsTests.java\n\n@@ -157,21 +160,18 @@ class HttpRequestStepsTests\n         assertEquals(\"nonExistentField\", exception.getMessage());\n     }\n \n-    @Test\n-    void testWaitForResponseCode()\n+    static Stream<HttpResponse> getHttpResponse()\n     {\n-        SubSteps stepsToExecute = mock(SubSteps.class);\n-        when(httpTestContext.getResponse()).thenReturn(new HttpResponse());\n-        httpRequestSteps.waitForResponseCode(RESPONSE_CODE, Duration.ofSeconds(10), RETRY_TIMES, stepsToExecute);\n-        verify(stepsToExecute, times(RETRY_TIMES)).execute(Optional.empty());\n+        return Stream.of(new HttpResponse(), null);\n     }\n \n-    @Test\n-    void testWaitForResponseCodeWhenResponseIsNull()\n+    @ParameterizedTest\n+    @MethodSource(\"getHttpResponse\")\n+    void testWaitForResponseCode(HttpResponse httpResponse)\n     {\n         SubSteps stepsToExecute = mock(SubSteps.class);\n-        when(httpTestContext.getResponse()).thenReturn(null);\n-        httpRequestSteps.waitForResponseCode(RESPONSE_CODE, Duration.ofSeconds(10), RETRY_TIMES, stepsToExecute);\n+        when(httpTestContext.getResponse()).thenReturn(httpResponse);\n+        httpRequestSteps.waitForResponseCode(RESPONSE_CODE, DURATION, RETRY_TIMES, stepsToExecute);\n         verify(stepsToExecute, times(RETRY_TIMES)).execute(Optional.empty());\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg4MjkxMg==", "url": "https://github.com/vividus-framework/vividus/pull/602#discussion_r429882912", "bodyText": "what about emulation of real behavior:\n\n1 attempt - return http response with any code, but not 200\n2 attempt - return http response with code 200\n?", "author": "valfirst", "createdAt": "2020-05-25T11:24:58Z", "path": "vividus-plugin-rest-api/src/test/java/org/vividus/bdd/steps/api/HttpRequestStepsTests.java", "diffHunk": "@@ -149,6 +157,35 @@ void testSetCustomRequestConfigNoField()\n         assertEquals(\"nonExistentField\", exception.getMessage());\n     }\n \n+    @Test\n+    void testWaitForResponseCode()\n+    {\n+        SubSteps stepsToExecute = mock(SubSteps.class);\n+        when(httpTestContext.getResponse()).thenReturn(new HttpResponse());\n+        httpRequestSteps.waitForResponseCode(RESPONSE_CODE, Duration.ofSeconds(10), RETRY_TIMES, stepsToExecute);\n+        verify(stepsToExecute, times(RETRY_TIMES)).execute(Optional.empty());\n+    }\n+\n+    @Test\n+    void testWaitForResponseCodeWhenResponseIsNull()\n+    {\n+        SubSteps stepsToExecute = mock(SubSteps.class);\n+        when(httpTestContext.getResponse()).thenReturn(null);\n+        httpRequestSteps.waitForResponseCode(RESPONSE_CODE, Duration.ofSeconds(10), RETRY_TIMES, stepsToExecute);\n+        verify(stepsToExecute, times(RETRY_TIMES)).execute(Optional.empty());\n+    }\n+\n+    @Test\n+    void testWaitForResponseCodeWhenResponseCodeIsEqualToExpected()\n+    {\n+        SubSteps stepsToExecute = mock(SubSteps.class);\n+        HttpResponse httpResponse = new HttpResponse();\n+        httpResponse.setStatusCode(200);\n+        when(httpTestContext.getResponse()).thenReturn(httpResponse);", "originalCommit": "db78ae6904f263ef330ea60183962cfb1ce722b0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bf69b2b8860a9cf601f8850cfd9da1c3491f0ed2", "chunk": "diff --git a/vividus-plugin-rest-api/src/test/java/org/vividus/bdd/steps/api/HttpRequestStepsTests.java b/vividus-plugin-rest-api/src/test/java/org/vividus/bdd/steps/api/HttpRequestStepsTests.java\nindex ef00aa99..fbb3c92b 100644\n--- a/vividus-plugin-rest-api/src/test/java/org/vividus/bdd/steps/api/HttpRequestStepsTests.java\n+++ b/vividus-plugin-rest-api/src/test/java/org/vividus/bdd/steps/api/HttpRequestStepsTests.java\n\n@@ -157,21 +160,18 @@ class HttpRequestStepsTests\n         assertEquals(\"nonExistentField\", exception.getMessage());\n     }\n \n-    @Test\n-    void testWaitForResponseCode()\n+    static Stream<HttpResponse> getHttpResponse()\n     {\n-        SubSteps stepsToExecute = mock(SubSteps.class);\n-        when(httpTestContext.getResponse()).thenReturn(new HttpResponse());\n-        httpRequestSteps.waitForResponseCode(RESPONSE_CODE, Duration.ofSeconds(10), RETRY_TIMES, stepsToExecute);\n-        verify(stepsToExecute, times(RETRY_TIMES)).execute(Optional.empty());\n+        return Stream.of(new HttpResponse(), null);\n     }\n \n-    @Test\n-    void testWaitForResponseCodeWhenResponseIsNull()\n+    @ParameterizedTest\n+    @MethodSource(\"getHttpResponse\")\n+    void testWaitForResponseCode(HttpResponse httpResponse)\n     {\n         SubSteps stepsToExecute = mock(SubSteps.class);\n-        when(httpTestContext.getResponse()).thenReturn(null);\n-        httpRequestSteps.waitForResponseCode(RESPONSE_CODE, Duration.ofSeconds(10), RETRY_TIMES, stepsToExecute);\n+        when(httpTestContext.getResponse()).thenReturn(httpResponse);\n+        httpRequestSteps.waitForResponseCode(RESPONSE_CODE, DURATION, RETRY_TIMES, stepsToExecute);\n         verify(stepsToExecute, times(RETRY_TIMES)).execute(Optional.empty());\n     }\n \n"}}, {"oid": "bf69b2b8860a9cf601f8850cfd9da1c3491f0ed2", "url": "https://github.com/vividus-framework/vividus/commit/bf69b2b8860a9cf601f8850cfd9da1c3491f0ed2", "message": "Add step 'When I wait for 'responseCode' response code for HTTP httpMethod request for a resource with the URL 'url' for 'duration' duration retrying retryTimes times'", "committedDate": "2020-05-25T13:21:01Z", "type": "forcePushed"}, {"oid": "5b078c1f7a7e22297856fd0df1bb480b8dd8469e", "url": "https://github.com/vividus-framework/vividus/commit/5b078c1f7a7e22297856fd0df1bb480b8dd8469e", "message": "Add step 'When I wait for 'responseCode' response code for HTTP httpMethod request for a resource with the URL 'url' for 'duration' duration retrying retryTimes times'", "committedDate": "2020-05-26T09:03:34Z", "type": "forcePushed"}, {"oid": "42f4fc10ff6133b038f52ac3af232d80f957598a", "url": "https://github.com/vividus-framework/vividus/commit/42f4fc10ff6133b038f52ac3af232d80f957598a", "message": "Add step 'When I wait for 'responseCode' response code for HTTP httpMethod request for a resource with the URL 'url' for 'duration' duration retrying retryTimes times'", "committedDate": "2020-05-26T19:50:40Z", "type": "forcePushed"}, {"oid": "5cd227f6a6531194f2e7b363d41db0a1c32315c6", "url": "https://github.com/vividus-framework/vividus/commit/5cd227f6a6531194f2e7b363d41db0a1c32315c6", "message": "Add step 'When I wait for 'responseCode' response code for HTTP httpMethod request for a resource with the URL 'url' for 'duration' duration retrying retryTimes times'", "committedDate": "2020-05-27T06:56:29Z", "type": "forcePushed"}, {"oid": "3a9b504eb1e48c3ba18a014857f536522d0b0481", "url": "https://github.com/vividus-framework/vividus/commit/3a9b504eb1e48c3ba18a014857f536522d0b0481", "message": "Add step 'When I wait for 'responseCode' response code for HTTP httpMethod request for a resource with the URL 'url' for 'duration' duration retrying retryTimes times'", "committedDate": "2020-05-27T09:16:51Z", "type": "forcePushed"}, {"oid": "9b2969e00c2c5eeca58c3dfd1f4434fa1bc8bcd0", "url": "https://github.com/vividus-framework/vividus/commit/9b2969e00c2c5eeca58c3dfd1f4434fa1bc8bcd0", "message": "Add step 'When I wait for 'responseCode' response code for HTTP httpMethod request for a resource with the URL 'url' for 'duration' duration retrying retryTimes times'", "committedDate": "2020-05-27T09:57:44Z", "type": "commit"}, {"oid": "9b2969e00c2c5eeca58c3dfd1f4434fa1bc8bcd0", "url": "https://github.com/vividus-framework/vividus/commit/9b2969e00c2c5eeca58c3dfd1f4434fa1bc8bcd0", "message": "Add step 'When I wait for 'responseCode' response code for HTTP httpMethod request for a resource with the URL 'url' for 'duration' duration retrying retryTimes times'", "committedDate": "2020-05-27T09:57:44Z", "type": "forcePushed"}]}