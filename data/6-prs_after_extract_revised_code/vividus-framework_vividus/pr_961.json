{"pr_number": 961, "pr_title": "[vividus] Register listeners with subscribers in super classses", "pr_createdAt": "2020-09-20T11:49:31Z", "pr_url": "https://github.com/vividus-framework/vividus/pull/961", "timeline": [{"oid": "de23edcf71a9fc5a790b10790e5bd8b1158042b6", "url": "https://github.com/vividus-framework/vividus/commit/de23edcf71a9fc5a790b10790e5bd8b1158042b6", "message": "[vividus] Register listeners with subscribers in super classses", "committedDate": "2020-09-20T11:50:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY4NDQxMA==", "url": "https://github.com/vividus-framework/vividus/pull/961#discussion_r491684410", "bodyText": "what about just getMethods?", "author": "valfirst", "createdAt": "2020-09-20T11:57:59Z", "path": "vividus/src/main/java/org/vividus/spring/SubscriberRegisteringBeanPostProcessor.java", "diffHunk": "@@ -29,13 +29,16 @@\n {\n     @Inject private EventBus eventBus;\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public Object postProcessAfterInitialization(Object bean, String beanName)\n     {\n-        if (Stream.of(bean.getClass().getDeclaredMethods()).anyMatch(m -> m.isAnnotationPresent(Subscribe.class)))\n-        {\n-            eventBus.register(bean);\n-        }\n+        Stream.iterate((Class<Object>) bean.getClass(), c -> c.getSuperclass() != null, Class::getSuperclass)\n+              .map(Class::getDeclaredMethods)", "originalCommit": "de23edcf71a9fc5a790b10790e5bd8b1158042b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY4NTY1OQ==", "url": "https://github.com/vividus-framework/vividus/pull/961#discussion_r491685659", "bodyText": "sure, I don't know why it was getDeclaredMethods previously, but from docs event bus works with public handler methods", "author": "uarlouski", "createdAt": "2020-09-20T12:14:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY4NDQxMA=="}], "type": "inlineReview", "revised_code": {"commit": "e420a6f78add20e54698a2475e3807157dfbe9af", "chunk": "diff --git a/vividus/src/main/java/org/vividus/spring/SubscriberRegisteringBeanPostProcessor.java b/vividus/src/main/java/org/vividus/spring/SubscriberRegisteringBeanPostProcessor.java\nindex ac6b832d..936d9895 100644\n--- a/vividus/src/main/java/org/vividus/spring/SubscriberRegisteringBeanPostProcessor.java\n+++ b/vividus/src/main/java/org/vividus/spring/SubscriberRegisteringBeanPostProcessor.java\n\n@@ -27,14 +25,19 @@ import org.springframework.beans.factory.config.BeanPostProcessor;\n \n public class SubscriberRegisteringBeanPostProcessor implements BeanPostProcessor\n {\n-    @Inject private EventBus eventBus;\n+    private final EventBus eventBus;\n+\n+    public SubscriberRegisteringBeanPostProcessor(EventBus eventBus)\n+    {\n+        this.eventBus = eventBus;\n+    }\n \n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public Object postProcessAfterInitialization(Object bean, String beanName)\n     {\n         Stream.iterate((Class<Object>) bean.getClass(), c -> c.getSuperclass() != null, Class::getSuperclass)\n-              .map(Class::getDeclaredMethods)\n+              .map(Class::getMethods)\n               .flatMap(Stream::of)\n               .filter(m -> m.isAnnotationPresent(Subscribe.class))\n               .findFirst()\n"}}, {"oid": "e420a6f78add20e54698a2475e3807157dfbe9af", "url": "https://github.com/vividus-framework/vividus/commit/e420a6f78add20e54698a2475e3807157dfbe9af", "message": "[vividus] Register listeners with subscribers in super classses", "committedDate": "2020-09-20T12:12:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY4NjA4Mw==", "url": "https://github.com/vividus-framework/vividus/pull/961#discussion_r491686083", "bodyText": "if you use getMethods, you don't need to extract superclass explicitly", "author": "valfirst", "createdAt": "2020-09-20T12:19:41Z", "path": "vividus/src/main/java/org/vividus/spring/SubscriberRegisteringBeanPostProcessor.java", "diffHunk": "@@ -18,24 +18,30 @@\n \n import java.util.stream.Stream;\n \n-import javax.inject.Inject;\n-\n import com.google.common.eventbus.EventBus;\n import com.google.common.eventbus.Subscribe;\n \n import org.springframework.beans.factory.config.BeanPostProcessor;\n \n public class SubscriberRegisteringBeanPostProcessor implements BeanPostProcessor\n {\n-    @Inject private EventBus eventBus;\n+    private final EventBus eventBus;\n+\n+    public SubscriberRegisteringBeanPostProcessor(EventBus eventBus)\n+    {\n+        this.eventBus = eventBus;\n+    }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public Object postProcessAfterInitialization(Object bean, String beanName)\n     {\n-        if (Stream.of(bean.getClass().getDeclaredMethods()).anyMatch(m -> m.isAnnotationPresent(Subscribe.class)))\n-        {\n-            eventBus.register(bean);\n-        }\n+        Stream.iterate((Class<Object>) bean.getClass(), c -> c.getSuperclass() != null, Class::getSuperclass)", "originalCommit": "e420a6f78add20e54698a2475e3807157dfbe9af", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "32fd55465212f24368e0bdd541966d9bdaad9853", "chunk": "diff --git a/vividus/src/main/java/org/vividus/spring/SubscriberRegisteringBeanPostProcessor.java b/vividus/src/main/java/org/vividus/spring/SubscriberRegisteringBeanPostProcessor.java\nindex 936d9895..db4b198d 100644\n--- a/vividus/src/main/java/org/vividus/spring/SubscriberRegisteringBeanPostProcessor.java\n+++ b/vividus/src/main/java/org/vividus/spring/SubscriberRegisteringBeanPostProcessor.java\n\n@@ -32,16 +32,13 @@ public class SubscriberRegisteringBeanPostProcessor implements BeanPostProcessor\n         this.eventBus = eventBus;\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n     @Override\n     public Object postProcessAfterInitialization(Object bean, String beanName)\n     {\n-        Stream.iterate((Class<Object>) bean.getClass(), c -> c.getSuperclass() != null, Class::getSuperclass)\n-              .map(Class::getMethods)\n-              .flatMap(Stream::of)\n-              .filter(m -> m.isAnnotationPresent(Subscribe.class))\n-              .findFirst()\n-              .ifPresent(m -> eventBus.register(bean));\n+        if (Stream.of(bean.getClass().getMethods()).anyMatch(m -> m.isAnnotationPresent(Subscribe.class)))\n+        {\n+            eventBus.register(bean);\n+        }\n         return bean;\n     }\n }\n"}}, {"oid": "32fd55465212f24368e0bdd541966d9bdaad9853", "url": "https://github.com/vividus-framework/vividus/commit/32fd55465212f24368e0bdd541966d9bdaad9853", "message": "[vividus] Register listeners with subscribers in super classses", "committedDate": "2020-09-20T12:22:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcyMzc5Nw==", "url": "https://github.com/vividus-framework/vividus/pull/961#discussion_r491723797", "bodyText": "just objects as test arguments", "author": "valfirst", "createdAt": "2020-09-20T19:13:36Z", "path": "vividus/src/test/java/org/vividus/spring/SubscriberRegisteringBeanPostProcessorTests.java", "diffHunk": "@@ -37,12 +40,13 @@\n     @InjectMocks\n     private SubscriberRegisteringBeanPostProcessor beanPostProcessor;\n \n-    @Test\n-    void testProcessingSubscriberObject()\n+    @ValueSource(classes = { Subscriber.class, InheritedSubscriber.class })\n+    @ParameterizedTest\n+    void testProcessingSubscriberObject(Class<?> type)\n     {\n-        Subscriber subscriber = new Subscriber();\n-        beanPostProcessor.postProcessAfterInitialization(subscriber, null);\n-        verify(eventBus).register(subscriber);\n+        Object bean = ReflectionUtils.newInstance(type);", "originalCommit": "32fd55465212f24368e0bdd541966d9bdaad9853", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3cd03e3a220f2264fe74844d066e1ca19bb002b2", "chunk": "diff --git a/vividus/src/test/java/org/vividus/spring/SubscriberRegisteringBeanPostProcessorTests.java b/vividus/src/test/java/org/vividus/spring/SubscriberRegisteringBeanPostProcessorTests.java\nindex 96fad8da..b1f6d8ff 100644\n--- a/vividus/src/test/java/org/vividus/spring/SubscriberRegisteringBeanPostProcessorTests.java\n+++ b/vividus/src/test/java/org/vividus/spring/SubscriberRegisteringBeanPostProcessorTests.java\n\n@@ -40,11 +41,18 @@ class SubscriberRegisteringBeanPostProcessorTests\n     @InjectMocks\n     private SubscriberRegisteringBeanPostProcessor beanPostProcessor;\n \n-    @ValueSource(classes = { Subscriber.class, InheritedSubscriber.class })\n+    static Stream<Object> subscribers()\n+    {\n+        return Stream.of(\n+            new Subscriber(),\n+            new InheritedSubscriber()\n+        );\n+    }\n+\n+    @MethodSource(\"subscribers\")\n     @ParameterizedTest\n-    void testProcessingSubscriberObject(Class<?> type)\n+    void testProcessingSubscriberObject(Object bean)\n     {\n-        Object bean = ReflectionUtils.newInstance(type);\n         beanPostProcessor.postProcessAfterInitialization(bean, null);\n         verify(eventBus).register(bean);\n     }\n"}}, {"oid": "3cd03e3a220f2264fe74844d066e1ca19bb002b2", "url": "https://github.com/vividus-framework/vividus/commit/3cd03e3a220f2264fe74844d066e1ca19bb002b2", "message": "[vividus] Register listeners with subscribers in super classses", "committedDate": "2020-09-21T06:58:49Z", "type": "commit"}, {"oid": "3cd03e3a220f2264fe74844d066e1ca19bb002b2", "url": "https://github.com/vividus-framework/vividus/commit/3cd03e3a220f2264fe74844d066e1ca19bb002b2", "message": "[vividus] Register listeners with subscribers in super classses", "committedDate": "2020-09-21T06:58:49Z", "type": "forcePushed"}]}