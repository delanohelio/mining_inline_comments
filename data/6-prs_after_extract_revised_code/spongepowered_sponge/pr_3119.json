{"pr_number": 3119, "pr_title": "Null empty stackTagCompound on ItemStacks to allow items to stack", "pr_createdAt": "2020-08-22T17:19:34Z", "pr_url": "https://github.com/SpongePowered/Sponge/pull/3119", "timeline": [{"oid": "c1417fd0a96058036309b91c8cdad7a494a973d6", "url": "https://github.com/SpongePowered/Sponge/commit/c1417fd0a96058036309b91c8cdad7a494a973d6", "message": "Null empty stackTagCompound on ItemStacks to allow items to stack", "committedDate": "2020-08-22T17:17:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE2ODI1OA==", "url": "https://github.com/SpongePowered/Sponge/pull/3119#discussion_r475168258", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (shadow$hasTagCompound() && shadow$getTagCompound().hasKey(Constants.Sponge.SPONGE_DATA, Constants.NBT.TAG_COMPOUND)) {\n          \n          \n            \n                    if (this.shadow$hasTagCompound() && this.shadow$getTagCompound().hasKey(Constants.Sponge.SPONGE_DATA, Constants.NBT.TAG_COMPOUND)) {", "author": "gabizou", "createdAt": "2020-08-23T04:21:56Z", "path": "src/main/java/org/spongepowered/common/mixin/core/item/ItemStackMixin.java", "diffHunk": "@@ -271,19 +272,33 @@ private void onSplit(int amount, CallbackInfoReturnable<net.minecraft.item.ItemS\n \n     // Read custom data from nbt\n     @Inject(method = \"<init>(Lnet/minecraft/nbt/NBTTagCompound;)V\", at = @At(\"RETURN\"))\n-    private void onRead(NBTTagCompound compound, CallbackInfo info) {\n-        if (hasTagCompound() && getTagCompound().hasKey(Constants.Sponge.SPONGE_DATA, Constants.NBT.TAG_COMPOUND)) {\n-            DataUtil.readCustomData(getTagCompound().getCompoundTag(Constants.Sponge.SPONGE_DATA), ((org.spongepowered.api.item.inventory.ItemStack) this));\n+    private void impl$onRead(NBTTagCompound compound, CallbackInfo info) {\n+        if (shadow$hasTagCompound() && shadow$getTagCompound().hasKey(Constants.Sponge.SPONGE_DATA, Constants.NBT.TAG_COMPOUND)) {\n+            DataUtil.readCustomData(shadow$getTagCompound().getCompoundTag(Constants.Sponge.SPONGE_DATA), ((org.spongepowered.api.item.inventory.ItemStack) this));\n+        }\n+\n+        // Prune empty stack tag compound if its empty to enable stacking.\n+        if (this.stackTagCompound != null && this.stackTagCompound.isEmpty()) {\n+            this.stackTagCompound = null;\n+        }\n+    }\n+\n+    @Redirect(method = \"removeSubCompound\",\n+            at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/nbt/NBTTagCompound;removeTag(Ljava/lang/String;)V\"))\n+    private void impl$nullStackCompoundIfEmptyAfterRemoval(final NBTTagCompound compound, final String key) {\n+        compound.removeTag(key);\n+        if (compound.isEmpty()) {\n+            this.stackTagCompound = null;\n         }\n     }\n \n     @Inject(method = \"setTagCompound\", at = @At(\"RETURN\"))\n-    private void onSet(NBTTagCompound compound, CallbackInfo callbackInfo) {\n+    private void impl$onSet(NBTTagCompound compound, CallbackInfo callbackInfo) {\n         if (this.stackTagCompound != compound) {\n             this.manipulators.clear();\n         }\n-        if (hasTagCompound() && getTagCompound().hasKey(Constants.Sponge.SPONGE_DATA, Constants.NBT.TAG_COMPOUND)) {\n-            DataUtil.readCustomData(getTagCompound().getCompoundTag(Constants.Sponge.SPONGE_DATA), ((org.spongepowered.api.item.inventory.ItemStack) this));\n+        if (shadow$hasTagCompound() && shadow$getTagCompound().hasKey(Constants.Sponge.SPONGE_DATA, Constants.NBT.TAG_COMPOUND)) {", "originalCommit": "c1417fd0a96058036309b91c8cdad7a494a973d6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c11690a090acdae8f71316a3a71f5bf4bffdd584", "chunk": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/item/ItemStackMixin.java b/src/main/java/org/spongepowered/common/mixin/core/item/ItemStackMixin.java\nindex 7a4db8e37..060dc5b3a 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/item/ItemStackMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/item/ItemStackMixin.java\n\n@@ -273,8 +273,8 @@ private void resyncCustomToTag() {\n     // Read custom data from nbt\n     @Inject(method = \"<init>(Lnet/minecraft/nbt/NBTTagCompound;)V\", at = @At(\"RETURN\"))\n     private void impl$onRead(NBTTagCompound compound, CallbackInfo info) {\n-        if (shadow$hasTagCompound() && shadow$getTagCompound().hasKey(Constants.Sponge.SPONGE_DATA, Constants.NBT.TAG_COMPOUND)) {\n-            DataUtil.readCustomData(shadow$getTagCompound().getCompoundTag(Constants.Sponge.SPONGE_DATA), ((org.spongepowered.api.item.inventory.ItemStack) this));\n+        if (this.shadow$hasTagCompound() && this.shadow$getTagCompound().hasKey(Constants.Sponge.SPONGE_DATA, Constants.NBT.TAG_COMPOUND)) {\n+            DataUtil.readCustomData(this.shadow$getTagCompound().getCompoundTag(Constants.Sponge.SPONGE_DATA), ((org.spongepowered.api.item.inventory.ItemStack) this));\n         }\n \n         // Prune empty stack tag compound if its empty to enable stacking.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE2ODI3NQ==", "url": "https://github.com/SpongePowered/Sponge/pull/3119#discussion_r475168275", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        DataUtil.readCustomData(shadow$getTagCompound().getCompoundTag(Constants.Sponge.SPONGE_DATA), ((org.spongepowered.api.item.inventory.ItemStack) this));\n          \n          \n            \n                        DataUtil.readCustomData(this.shadow$getTagCompound().getCompoundTag(Constants.Sponge.SPONGE_DATA), ((org.spongepowered.api.item.inventory.ItemStack) this));", "author": "gabizou", "createdAt": "2020-08-23T04:22:07Z", "path": "src/main/java/org/spongepowered/common/mixin/core/item/ItemStackMixin.java", "diffHunk": "@@ -271,19 +272,33 @@ private void onSplit(int amount, CallbackInfoReturnable<net.minecraft.item.ItemS\n \n     // Read custom data from nbt\n     @Inject(method = \"<init>(Lnet/minecraft/nbt/NBTTagCompound;)V\", at = @At(\"RETURN\"))\n-    private void onRead(NBTTagCompound compound, CallbackInfo info) {\n-        if (hasTagCompound() && getTagCompound().hasKey(Constants.Sponge.SPONGE_DATA, Constants.NBT.TAG_COMPOUND)) {\n-            DataUtil.readCustomData(getTagCompound().getCompoundTag(Constants.Sponge.SPONGE_DATA), ((org.spongepowered.api.item.inventory.ItemStack) this));\n+    private void impl$onRead(NBTTagCompound compound, CallbackInfo info) {\n+        if (shadow$hasTagCompound() && shadow$getTagCompound().hasKey(Constants.Sponge.SPONGE_DATA, Constants.NBT.TAG_COMPOUND)) {\n+            DataUtil.readCustomData(shadow$getTagCompound().getCompoundTag(Constants.Sponge.SPONGE_DATA), ((org.spongepowered.api.item.inventory.ItemStack) this));\n+        }\n+\n+        // Prune empty stack tag compound if its empty to enable stacking.\n+        if (this.stackTagCompound != null && this.stackTagCompound.isEmpty()) {\n+            this.stackTagCompound = null;\n+        }\n+    }\n+\n+    @Redirect(method = \"removeSubCompound\",\n+            at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/nbt/NBTTagCompound;removeTag(Ljava/lang/String;)V\"))\n+    private void impl$nullStackCompoundIfEmptyAfterRemoval(final NBTTagCompound compound, final String key) {\n+        compound.removeTag(key);\n+        if (compound.isEmpty()) {\n+            this.stackTagCompound = null;\n         }\n     }\n \n     @Inject(method = \"setTagCompound\", at = @At(\"RETURN\"))\n-    private void onSet(NBTTagCompound compound, CallbackInfo callbackInfo) {\n+    private void impl$onSet(NBTTagCompound compound, CallbackInfo callbackInfo) {\n         if (this.stackTagCompound != compound) {\n             this.manipulators.clear();\n         }\n-        if (hasTagCompound() && getTagCompound().hasKey(Constants.Sponge.SPONGE_DATA, Constants.NBT.TAG_COMPOUND)) {\n-            DataUtil.readCustomData(getTagCompound().getCompoundTag(Constants.Sponge.SPONGE_DATA), ((org.spongepowered.api.item.inventory.ItemStack) this));\n+        if (shadow$hasTagCompound() && shadow$getTagCompound().hasKey(Constants.Sponge.SPONGE_DATA, Constants.NBT.TAG_COMPOUND)) {\n+            DataUtil.readCustomData(shadow$getTagCompound().getCompoundTag(Constants.Sponge.SPONGE_DATA), ((org.spongepowered.api.item.inventory.ItemStack) this));", "originalCommit": "c1417fd0a96058036309b91c8cdad7a494a973d6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c11690a090acdae8f71316a3a71f5bf4bffdd584", "chunk": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/item/ItemStackMixin.java b/src/main/java/org/spongepowered/common/mixin/core/item/ItemStackMixin.java\nindex 7a4db8e37..060dc5b3a 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/item/ItemStackMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/item/ItemStackMixin.java\n\n@@ -273,8 +273,8 @@ private void resyncCustomToTag() {\n     // Read custom data from nbt\n     @Inject(method = \"<init>(Lnet/minecraft/nbt/NBTTagCompound;)V\", at = @At(\"RETURN\"))\n     private void impl$onRead(NBTTagCompound compound, CallbackInfo info) {\n-        if (shadow$hasTagCompound() && shadow$getTagCompound().hasKey(Constants.Sponge.SPONGE_DATA, Constants.NBT.TAG_COMPOUND)) {\n-            DataUtil.readCustomData(shadow$getTagCompound().getCompoundTag(Constants.Sponge.SPONGE_DATA), ((org.spongepowered.api.item.inventory.ItemStack) this));\n+        if (this.shadow$hasTagCompound() && this.shadow$getTagCompound().hasKey(Constants.Sponge.SPONGE_DATA, Constants.NBT.TAG_COMPOUND)) {\n+            DataUtil.readCustomData(this.shadow$getTagCompound().getCompoundTag(Constants.Sponge.SPONGE_DATA), ((org.spongepowered.api.item.inventory.ItemStack) this));\n         }\n \n         // Prune empty stack tag compound if its empty to enable stacking.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE2ODI5OA==", "url": "https://github.com/SpongePowered/Sponge/pull/3119#discussion_r475168298", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (shadow$hasTagCompound() && shadow$getTagCompound().hasKey(Constants.Sponge.SPONGE_DATA, Constants.NBT.TAG_COMPOUND)) {\n          \n          \n            \n                    if (this.shadow$hasTagCompound() && this.shadow$getTagCompound().hasKey(Constants.Sponge.SPONGE_DATA, Constants.NBT.TAG_COMPOUND)) {", "author": "gabizou", "createdAt": "2020-08-23T04:22:30Z", "path": "src/main/java/org/spongepowered/common/mixin/core/item/ItemStackMixin.java", "diffHunk": "@@ -271,19 +272,33 @@ private void onSplit(int amount, CallbackInfoReturnable<net.minecraft.item.ItemS\n \n     // Read custom data from nbt\n     @Inject(method = \"<init>(Lnet/minecraft/nbt/NBTTagCompound;)V\", at = @At(\"RETURN\"))\n-    private void onRead(NBTTagCompound compound, CallbackInfo info) {\n-        if (hasTagCompound() && getTagCompound().hasKey(Constants.Sponge.SPONGE_DATA, Constants.NBT.TAG_COMPOUND)) {\n-            DataUtil.readCustomData(getTagCompound().getCompoundTag(Constants.Sponge.SPONGE_DATA), ((org.spongepowered.api.item.inventory.ItemStack) this));\n+    private void impl$onRead(NBTTagCompound compound, CallbackInfo info) {\n+        if (shadow$hasTagCompound() && shadow$getTagCompound().hasKey(Constants.Sponge.SPONGE_DATA, Constants.NBT.TAG_COMPOUND)) {", "originalCommit": "c1417fd0a96058036309b91c8cdad7a494a973d6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c11690a090acdae8f71316a3a71f5bf4bffdd584", "chunk": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/item/ItemStackMixin.java b/src/main/java/org/spongepowered/common/mixin/core/item/ItemStackMixin.java\nindex 7a4db8e37..060dc5b3a 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/item/ItemStackMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/item/ItemStackMixin.java\n\n@@ -273,8 +273,8 @@ private void resyncCustomToTag() {\n     // Read custom data from nbt\n     @Inject(method = \"<init>(Lnet/minecraft/nbt/NBTTagCompound;)V\", at = @At(\"RETURN\"))\n     private void impl$onRead(NBTTagCompound compound, CallbackInfo info) {\n-        if (shadow$hasTagCompound() && shadow$getTagCompound().hasKey(Constants.Sponge.SPONGE_DATA, Constants.NBT.TAG_COMPOUND)) {\n-            DataUtil.readCustomData(shadow$getTagCompound().getCompoundTag(Constants.Sponge.SPONGE_DATA), ((org.spongepowered.api.item.inventory.ItemStack) this));\n+        if (this.shadow$hasTagCompound() && this.shadow$getTagCompound().hasKey(Constants.Sponge.SPONGE_DATA, Constants.NBT.TAG_COMPOUND)) {\n+            DataUtil.readCustomData(this.shadow$getTagCompound().getCompoundTag(Constants.Sponge.SPONGE_DATA), ((org.spongepowered.api.item.inventory.ItemStack) this));\n         }\n \n         // Prune empty stack tag compound if its empty to enable stacking.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE2ODMxMg==", "url": "https://github.com/SpongePowered/Sponge/pull/3119#discussion_r475168312", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        DataUtil.readCustomData(shadow$getTagCompound().getCompoundTag(Constants.Sponge.SPONGE_DATA), ((org.spongepowered.api.item.inventory.ItemStack) this));\n          \n          \n            \n                        DataUtil.readCustomData(this.shadow$getTagCompound().getCompoundTag(Constants.Sponge.SPONGE_DATA), ((org.spongepowered.api.item.inventory.ItemStack) this));", "author": "gabizou", "createdAt": "2020-08-23T04:22:38Z", "path": "src/main/java/org/spongepowered/common/mixin/core/item/ItemStackMixin.java", "diffHunk": "@@ -271,19 +272,33 @@ private void onSplit(int amount, CallbackInfoReturnable<net.minecraft.item.ItemS\n \n     // Read custom data from nbt\n     @Inject(method = \"<init>(Lnet/minecraft/nbt/NBTTagCompound;)V\", at = @At(\"RETURN\"))\n-    private void onRead(NBTTagCompound compound, CallbackInfo info) {\n-        if (hasTagCompound() && getTagCompound().hasKey(Constants.Sponge.SPONGE_DATA, Constants.NBT.TAG_COMPOUND)) {\n-            DataUtil.readCustomData(getTagCompound().getCompoundTag(Constants.Sponge.SPONGE_DATA), ((org.spongepowered.api.item.inventory.ItemStack) this));\n+    private void impl$onRead(NBTTagCompound compound, CallbackInfo info) {\n+        if (shadow$hasTagCompound() && shadow$getTagCompound().hasKey(Constants.Sponge.SPONGE_DATA, Constants.NBT.TAG_COMPOUND)) {\n+            DataUtil.readCustomData(shadow$getTagCompound().getCompoundTag(Constants.Sponge.SPONGE_DATA), ((org.spongepowered.api.item.inventory.ItemStack) this));", "originalCommit": "c1417fd0a96058036309b91c8cdad7a494a973d6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c11690a090acdae8f71316a3a71f5bf4bffdd584", "chunk": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/item/ItemStackMixin.java b/src/main/java/org/spongepowered/common/mixin/core/item/ItemStackMixin.java\nindex 7a4db8e37..060dc5b3a 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/item/ItemStackMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/item/ItemStackMixin.java\n\n@@ -273,8 +273,8 @@ private void resyncCustomToTag() {\n     // Read custom data from nbt\n     @Inject(method = \"<init>(Lnet/minecraft/nbt/NBTTagCompound;)V\", at = @At(\"RETURN\"))\n     private void impl$onRead(NBTTagCompound compound, CallbackInfo info) {\n-        if (shadow$hasTagCompound() && shadow$getTagCompound().hasKey(Constants.Sponge.SPONGE_DATA, Constants.NBT.TAG_COMPOUND)) {\n-            DataUtil.readCustomData(shadow$getTagCompound().getCompoundTag(Constants.Sponge.SPONGE_DATA), ((org.spongepowered.api.item.inventory.ItemStack) this));\n+        if (this.shadow$hasTagCompound() && this.shadow$getTagCompound().hasKey(Constants.Sponge.SPONGE_DATA, Constants.NBT.TAG_COMPOUND)) {\n+            DataUtil.readCustomData(this.shadow$getTagCompound().getCompoundTag(Constants.Sponge.SPONGE_DATA), ((org.spongepowered.api.item.inventory.ItemStack) this));\n         }\n \n         // Prune empty stack tag compound if its empty to enable stacking.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE2ODM0Mg==", "url": "https://github.com/SpongePowered/Sponge/pull/3119#discussion_r475168342", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void impl$onSplit(int amount, CallbackInfoReturnable<net.minecraft.item.ItemStack> info) {\n          \n          \n            \n                private void impl$copySpongeDataOnSplit(int amount, CallbackInfoReturnable<net.minecraft.item.ItemStack> info) {", "author": "gabizou", "createdAt": "2020-08-23T04:22:59Z", "path": "src/main/java/org/spongepowered/common/mixin/core/item/ItemStackMixin.java", "diffHunk": "@@ -260,7 +261,7 @@ private void onCopy(CallbackInfoReturnable<ItemStack> info) {\n     }\n \n     @Inject(method = \"splitStack\", at = @At(\"RETURN\"))\n-    private void onSplit(int amount, CallbackInfoReturnable<net.minecraft.item.ItemStack> info) {\n+    private void impl$onSplit(int amount, CallbackInfoReturnable<net.minecraft.item.ItemStack> info) {", "originalCommit": "c1417fd0a96058036309b91c8cdad7a494a973d6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c11690a090acdae8f71316a3a71f5bf4bffdd584", "chunk": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/item/ItemStackMixin.java b/src/main/java/org/spongepowered/common/mixin/core/item/ItemStackMixin.java\nindex 7a4db8e37..060dc5b3a 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/item/ItemStackMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/item/ItemStackMixin.java\n\n@@ -261,7 +261,7 @@ private void resyncCustomToTag() {\n     }\n \n     @Inject(method = \"splitStack\", at = @At(\"RETURN\"))\n-    private void impl$onSplit(int amount, CallbackInfoReturnable<net.minecraft.item.ItemStack> info) {\n+    private void impl$copySpongeDataOnSplit(int amount, CallbackInfoReturnable<net.minecraft.item.ItemStack> info) {\n         final net.minecraft.item.ItemStack itemStack = info.getReturnValue();\n         if (this.bridge$hasManipulators()) {\n             for (DataManipulator<?, ?> manipulator : this.manipulators) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE2ODM0OA==", "url": "https://github.com/SpongePowered/Sponge/pull/3119#discussion_r475168348", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void impl$onCopy(CallbackInfoReturnable<ItemStack> info) {\n          \n          \n            \n                private void impl$copySpongeDataOnSplit(CallbackInfoReturnable<ItemStack> info) {", "author": "gabizou", "createdAt": "2020-08-23T04:23:14Z", "path": "src/main/java/org/spongepowered/common/mixin/core/item/ItemStackMixin.java", "diffHunk": "@@ -250,7 +251,7 @@ private void resyncCustomToTag() {\n \n     // Add our manipulators when creating copies from this ItemStack:\n     @Inject(method = \"copy\", at = @At(\"RETURN\"))\n-    private void onCopy(CallbackInfoReturnable<ItemStack> info) {\n+    private void impl$onCopy(CallbackInfoReturnable<ItemStack> info) {", "originalCommit": "c1417fd0a96058036309b91c8cdad7a494a973d6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c11690a090acdae8f71316a3a71f5bf4bffdd584", "chunk": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/item/ItemStackMixin.java b/src/main/java/org/spongepowered/common/mixin/core/item/ItemStackMixin.java\nindex 7a4db8e37..060dc5b3a 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/item/ItemStackMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/item/ItemStackMixin.java\n\n@@ -251,7 +251,7 @@ private void resyncCustomToTag() {\n \n     // Add our manipulators when creating copies from this ItemStack:\n     @Inject(method = \"copy\", at = @At(\"RETURN\"))\n-    private void impl$onCopy(CallbackInfoReturnable<ItemStack> info) {\n+    private void impl$copySpongeDataOnSplit(CallbackInfoReturnable<ItemStack> info) {\n         final net.minecraft.item.ItemStack itemStack = info.getReturnValue();\n         if (this.bridge$hasManipulators()) { // no manipulators? no problem.\n             for (DataManipulator<?, ?> manipulator : this.manipulators) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE2ODM2MA==", "url": "https://github.com/SpongePowered/Sponge/pull/3119#discussion_r475168360", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (shadow$hasTagCompound()) {\n          \n          \n            \n                        if (this.shadow$hasTagCompound()) {", "author": "gabizou", "createdAt": "2020-08-23T04:23:21Z", "path": "src/main/java/org/spongepowered/common/mixin/core/item/ItemStackMixin.java", "diffHunk": "@@ -131,20 +132,20 @@ private void resyncCustomToTag() {\n             for (DataView dataView : manipulatorViews) {\n                 newList.appendTag(NbtTranslator.getInstance().translateData(dataView));\n             }\n-            final NBTTagCompound spongeCompound = getOrCreateSubCompound(Constants.Sponge.SPONGE_DATA);\n+            final NBTTagCompound spongeCompound = shadow$getOrCreateSubCompound(Constants.Sponge.SPONGE_DATA);\n             spongeCompound.setTag(Constants.Sponge.CUSTOM_MANIPULATOR_TAG_LIST, newList);\n         } else if (!this.failedData.isEmpty()) {\n             final NBTTagList newList = new NBTTagList();\n             for (DataView failedDatum : this.failedData) {\n                 newList.appendTag(NbtTranslator.getInstance().translateData(failedDatum));\n             }\n-            final NBTTagCompound spongeCompound = getOrCreateSubCompound(Constants.Sponge.SPONGE_DATA);\n+            final NBTTagCompound spongeCompound = shadow$getOrCreateSubCompound(Constants.Sponge.SPONGE_DATA);\n             spongeCompound.setTag(Constants.Sponge.FAILED_CUSTOM_DATA, newList);\n         } else {\n-            if (hasTagCompound()) {\n-                this.getTagCompound().removeTag(Constants.Sponge.SPONGE_DATA);\n-                if (this.getTagCompound().isEmpty()) {\n-                    this.setTagCompound(null);\n+            if (shadow$hasTagCompound()) {", "originalCommit": "c1417fd0a96058036309b91c8cdad7a494a973d6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c11690a090acdae8f71316a3a71f5bf4bffdd584", "chunk": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/item/ItemStackMixin.java b/src/main/java/org/spongepowered/common/mixin/core/item/ItemStackMixin.java\nindex 7a4db8e37..060dc5b3a 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/item/ItemStackMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/item/ItemStackMixin.java\n\n@@ -132,17 +132,17 @@ private void resyncCustomToTag() {\n             for (DataView dataView : manipulatorViews) {\n                 newList.appendTag(NbtTranslator.getInstance().translateData(dataView));\n             }\n-            final NBTTagCompound spongeCompound = shadow$getOrCreateSubCompound(Constants.Sponge.SPONGE_DATA);\n+            final NBTTagCompound spongeCompound = this.shadow$getOrCreateSubCompound(Constants.Sponge.SPONGE_DATA);\n             spongeCompound.setTag(Constants.Sponge.CUSTOM_MANIPULATOR_TAG_LIST, newList);\n         } else if (!this.failedData.isEmpty()) {\n             final NBTTagList newList = new NBTTagList();\n             for (DataView failedDatum : this.failedData) {\n                 newList.appendTag(NbtTranslator.getInstance().translateData(failedDatum));\n             }\n-            final NBTTagCompound spongeCompound = shadow$getOrCreateSubCompound(Constants.Sponge.SPONGE_DATA);\n+            final NBTTagCompound spongeCompound = this.shadow$getOrCreateSubCompound(Constants.Sponge.SPONGE_DATA);\n             spongeCompound.setTag(Constants.Sponge.FAILED_CUSTOM_DATA, newList);\n         } else {\n-            if (shadow$hasTagCompound()) {\n+            if (this.shadow$hasTagCompound()) {\n                 this.shadow$getTagCompound().removeTag(Constants.Sponge.SPONGE_DATA);\n                 if (this.shadow$getTagCompound().isEmpty()) {\n                     this.shadow$setTagCompound(null);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE2ODM2NA==", "url": "https://github.com/SpongePowered/Sponge/pull/3119#discussion_r475168364", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        final NBTTagCompound spongeCompound = shadow$getOrCreateSubCompound(Constants.Sponge.SPONGE_DATA);\n          \n          \n            \n                        final NBTTagCompound spongeCompound = this.shadow$getOrCreateSubCompound(Constants.Sponge.SPONGE_DATA);", "author": "gabizou", "createdAt": "2020-08-23T04:23:29Z", "path": "src/main/java/org/spongepowered/common/mixin/core/item/ItemStackMixin.java", "diffHunk": "@@ -131,20 +132,20 @@ private void resyncCustomToTag() {\n             for (DataView dataView : manipulatorViews) {\n                 newList.appendTag(NbtTranslator.getInstance().translateData(dataView));\n             }\n-            final NBTTagCompound spongeCompound = getOrCreateSubCompound(Constants.Sponge.SPONGE_DATA);\n+            final NBTTagCompound spongeCompound = shadow$getOrCreateSubCompound(Constants.Sponge.SPONGE_DATA);\n             spongeCompound.setTag(Constants.Sponge.CUSTOM_MANIPULATOR_TAG_LIST, newList);\n         } else if (!this.failedData.isEmpty()) {\n             final NBTTagList newList = new NBTTagList();\n             for (DataView failedDatum : this.failedData) {\n                 newList.appendTag(NbtTranslator.getInstance().translateData(failedDatum));\n             }\n-            final NBTTagCompound spongeCompound = getOrCreateSubCompound(Constants.Sponge.SPONGE_DATA);\n+            final NBTTagCompound spongeCompound = shadow$getOrCreateSubCompound(Constants.Sponge.SPONGE_DATA);", "originalCommit": "c1417fd0a96058036309b91c8cdad7a494a973d6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c11690a090acdae8f71316a3a71f5bf4bffdd584", "chunk": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/item/ItemStackMixin.java b/src/main/java/org/spongepowered/common/mixin/core/item/ItemStackMixin.java\nindex 7a4db8e37..060dc5b3a 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/item/ItemStackMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/item/ItemStackMixin.java\n\n@@ -132,17 +132,17 @@ private void resyncCustomToTag() {\n             for (DataView dataView : manipulatorViews) {\n                 newList.appendTag(NbtTranslator.getInstance().translateData(dataView));\n             }\n-            final NBTTagCompound spongeCompound = shadow$getOrCreateSubCompound(Constants.Sponge.SPONGE_DATA);\n+            final NBTTagCompound spongeCompound = this.shadow$getOrCreateSubCompound(Constants.Sponge.SPONGE_DATA);\n             spongeCompound.setTag(Constants.Sponge.CUSTOM_MANIPULATOR_TAG_LIST, newList);\n         } else if (!this.failedData.isEmpty()) {\n             final NBTTagList newList = new NBTTagList();\n             for (DataView failedDatum : this.failedData) {\n                 newList.appendTag(NbtTranslator.getInstance().translateData(failedDatum));\n             }\n-            final NBTTagCompound spongeCompound = shadow$getOrCreateSubCompound(Constants.Sponge.SPONGE_DATA);\n+            final NBTTagCompound spongeCompound = this.shadow$getOrCreateSubCompound(Constants.Sponge.SPONGE_DATA);\n             spongeCompound.setTag(Constants.Sponge.FAILED_CUSTOM_DATA, newList);\n         } else {\n-            if (shadow$hasTagCompound()) {\n+            if (this.shadow$hasTagCompound()) {\n                 this.shadow$getTagCompound().removeTag(Constants.Sponge.SPONGE_DATA);\n                 if (this.shadow$getTagCompound().isEmpty()) {\n                     this.shadow$setTagCompound(null);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE2ODM3OQ==", "url": "https://github.com/SpongePowered/Sponge/pull/3119#discussion_r475168379", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        final NBTTagCompound spongeCompound = shadow$getOrCreateSubCompound(Constants.Sponge.SPONGE_DATA);\n          \n          \n            \n                        final NBTTagCompound spongeCompound = this.shadow$getOrCreateSubCompound(Constants.Sponge.SPONGE_DATA);", "author": "gabizou", "createdAt": "2020-08-23T04:23:37Z", "path": "src/main/java/org/spongepowered/common/mixin/core/item/ItemStackMixin.java", "diffHunk": "@@ -131,20 +132,20 @@ private void resyncCustomToTag() {\n             for (DataView dataView : manipulatorViews) {\n                 newList.appendTag(NbtTranslator.getInstance().translateData(dataView));\n             }\n-            final NBTTagCompound spongeCompound = getOrCreateSubCompound(Constants.Sponge.SPONGE_DATA);\n+            final NBTTagCompound spongeCompound = shadow$getOrCreateSubCompound(Constants.Sponge.SPONGE_DATA);", "originalCommit": "c1417fd0a96058036309b91c8cdad7a494a973d6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c11690a090acdae8f71316a3a71f5bf4bffdd584", "chunk": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/item/ItemStackMixin.java b/src/main/java/org/spongepowered/common/mixin/core/item/ItemStackMixin.java\nindex 7a4db8e37..060dc5b3a 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/item/ItemStackMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/item/ItemStackMixin.java\n\n@@ -132,17 +132,17 @@ private void resyncCustomToTag() {\n             for (DataView dataView : manipulatorViews) {\n                 newList.appendTag(NbtTranslator.getInstance().translateData(dataView));\n             }\n-            final NBTTagCompound spongeCompound = shadow$getOrCreateSubCompound(Constants.Sponge.SPONGE_DATA);\n+            final NBTTagCompound spongeCompound = this.shadow$getOrCreateSubCompound(Constants.Sponge.SPONGE_DATA);\n             spongeCompound.setTag(Constants.Sponge.CUSTOM_MANIPULATOR_TAG_LIST, newList);\n         } else if (!this.failedData.isEmpty()) {\n             final NBTTagList newList = new NBTTagList();\n             for (DataView failedDatum : this.failedData) {\n                 newList.appendTag(NbtTranslator.getInstance().translateData(failedDatum));\n             }\n-            final NBTTagCompound spongeCompound = shadow$getOrCreateSubCompound(Constants.Sponge.SPONGE_DATA);\n+            final NBTTagCompound spongeCompound = this.shadow$getOrCreateSubCompound(Constants.Sponge.SPONGE_DATA);\n             spongeCompound.setTag(Constants.Sponge.FAILED_CUSTOM_DATA, newList);\n         } else {\n-            if (shadow$hasTagCompound()) {\n+            if (this.shadow$hasTagCompound()) {\n                 this.shadow$getTagCompound().removeTag(Constants.Sponge.SPONGE_DATA);\n                 if (this.shadow$getTagCompound().isEmpty()) {\n                     this.shadow$setTagCompound(null);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE2ODM4NA==", "url": "https://github.com/SpongePowered/Sponge/pull/3119#discussion_r475168384", "bodyText": "\ud83d\ude0d", "author": "gabizou", "createdAt": "2020-08-23T04:23:50Z", "path": "src/main/java/org/spongepowered/common/mixin/core/item/ItemStackMixin.java", "diffHunk": "@@ -63,10 +64,10 @@\n public abstract class ItemStackMixin implements CustomDataHolderBridge {       // conflict from overriding ValueContainer#copy() from DataHolder\n \n     @Shadow public abstract boolean shadow$isEmpty();\n-    @Shadow public abstract NBTTagCompound getTagCompound();\n-    @Shadow public abstract NBTTagCompound getOrCreateSubCompound(String key);\n-    @Shadow public abstract boolean hasTagCompound();\n-    @Shadow public abstract void setTagCompound(@Nullable NBTTagCompound compound);\n+    @Shadow public abstract NBTTagCompound shadow$getTagCompound();\n+    @Shadow public abstract NBTTagCompound shadow$getOrCreateSubCompound(String key);\n+    @Shadow public abstract boolean shadow$hasTagCompound();\n+    @Shadow public abstract void shadow$setTagCompound(@Nullable NBTTagCompound compound);", "originalCommit": "c1417fd0a96058036309b91c8cdad7a494a973d6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "c11690a090acdae8f71316a3a71f5bf4bffdd584", "url": "https://github.com/SpongePowered/Sponge/commit/c11690a090acdae8f71316a3a71f5bf4bffdd584", "message": "Fixup nitpicks\n\nCo-authored-by: Gabriel Harris-Rouquette <gabizou@me.com>", "committedDate": "2020-08-23T08:42:00Z", "type": "commit"}]}