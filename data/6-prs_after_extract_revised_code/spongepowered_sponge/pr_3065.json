{"pr_number": 3065, "pr_title": "Implement the new network channels.", "pr_createdAt": "2020-07-15T13:18:07Z", "pr_url": "https://github.com/SpongePowered/Sponge/pull/3065", "timeline": [{"oid": "a6372a712f6e4bfa4ee1f10763ffee8c7e1b55ec", "url": "https://github.com/SpongePowered/Sponge/commit/a6372a712f6e4bfa4ee1f10763ffee8c7e1b55ec", "message": "Convert NetworkManagerHolder accessor to a bridge.", "committedDate": "2020-07-15T13:53:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA3NTAzNA==", "url": "https://github.com/SpongePowered/Sponge/pull/3065#discussion_r455075034", "bodyText": "Nope. Same deal with the net handler bridge, should be a bridge.", "author": "gabizou", "createdAt": "2020-07-15T14:01:11Z", "path": "src/accessors/java/org/spongepowered/common/accessor/network/play/CustomPayloadPacketAccessor.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.accessor.network.play;\n+\n+import net.minecraft.network.PacketBuffer;\n+import net.minecraft.util.ResourceLocation;\n+\n+public interface CustomPayloadPacketAccessor {", "originalCommit": "a6372a712f6e4bfa4ee1f10763ffee8c7e1b55ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "357efd5cec73f4859d3027df535659e739049994", "chunk": "diff --git a/src/accessors/java/org/spongepowered/common/accessor/network/play/CustomPayloadPacketAccessor.java b/vanilla/src/accessors/java/org/spongepowered/vanilla/accessor/network/login/ServerLoginNetHandlerAccessor.java\nsimilarity index 72%\nrename from src/accessors/java/org/spongepowered/common/accessor/network/play/CustomPayloadPacketAccessor.java\nrename to vanilla/src/accessors/java/org/spongepowered/vanilla/accessor/network/login/ServerLoginNetHandlerAccessor.java\nindex 30dffeb26..cee81fa5e 100644\n--- a/src/accessors/java/org/spongepowered/common/accessor/network/play/CustomPayloadPacketAccessor.java\n+++ b/vanilla/src/accessors/java/org/spongepowered/vanilla/accessor/network/login/ServerLoginNetHandlerAccessor.java\n\n@@ -22,18 +22,16 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n-package org.spongepowered.common.accessor.network.play;\n+package org.spongepowered.vanilla.accessor.network.login;\n \n-import net.minecraft.network.PacketBuffer;\n-import net.minecraft.util.ResourceLocation;\n+import net.minecraft.network.login.ServerLoginNetHandler;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.gen.Accessor;\n \n-public interface CustomPayloadPacketAccessor {\n+@Mixin(ServerLoginNetHandler.class)\n+public interface ServerLoginNetHandlerAccessor {\n \n-    ResourceLocation accessor$getChannel();\n+    @Accessor(\"currentLoginState\") ServerLoginNetHandler.State accessor$getState();\n \n-    void accessor$setChannel(ResourceLocation channel);\n-\n-    PacketBuffer accessor$getPayload();\n-\n-    void accessor$setPayload(PacketBuffer payload);\n+    @Accessor(\"currentLoginState\") void accessor$setState(ServerLoginNetHandler.State state);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA3NjEyMg==", "url": "https://github.com/SpongePowered/Sponge/pull/3065#discussion_r455076122", "bodyText": "Move to common's constants class.", "author": "gabizou", "createdAt": "2020-07-15T14:02:45Z", "path": "src/main/java/org/spongepowered/common/network/channel/ChannelConstants.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.network.channel;\n+\n+import org.spongepowered.api.ResourceKey;\n+\n+public final class ChannelConstants {", "originalCommit": "a6372a712f6e4bfa4ee1f10763ffee8c7e1b55ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "357efd5cec73f4859d3027df535659e739049994", "chunk": "diff --git a/src/main/java/org/spongepowered/common/network/channel/ChannelConstants.java b/src/main/java/org/spongepowered/common/network/channel/ConcurrentMultimap.java\nsimilarity index 56%\nrename from src/main/java/org/spongepowered/common/network/channel/ChannelConstants.java\nrename to src/main/java/org/spongepowered/common/network/channel/ConcurrentMultimap.java\nindex 52fad9ba9..9377e8449 100644\n--- a/src/main/java/org/spongepowered/common/network/channel/ChannelConstants.java\n+++ b/src/main/java/org/spongepowered/common/network/channel/ConcurrentMultimap.java\n\n@@ -24,25 +24,37 @@\n  */\n package org.spongepowered.common.network.channel;\n \n-import org.spongepowered.api.ResourceKey;\n+import com.google.common.collect.HashMultimap;\n+import com.google.common.collect.ImmutableMultimap;\n+import com.google.common.collect.Multimap;\n \n-public final class ChannelConstants {\n+import java.util.function.Consumer;\n \n-    /**\n-     * The transaction id of a \"normal\" payload packet during the login phase.\n-     */\n-    public static final int LOGIN_PAYLOAD_TRANSACTION_ID = Integer.MAX_VALUE;\n+public final class ConcurrentMultimap<K, V> {\n \n-    /**\n-     * The transaction id of a \"normal\" payload packet response during the login phase. Can always be ignored.\n-     */\n-    public static final int LOGIN_PAYLOAD_IGNORED_TRANSACTION_ID = Integer.MAX_VALUE - 1;\n+    private final Multimap<K, V> multimap = HashMultimap.create();\n+    private volatile Multimap<K, V> immutable = null;\n \n-    /**\n-     * A channel Forge uses to wrap custom login packets in.\n-     */\n-    public static final ResourceKey FML_LOGIN_WRAPPER_CHANNEL = ResourceKey.of(\"fml\", \"loginwrapper\");\n+    public void modify(final Consumer<Multimap<K, V>> consumer) {\n+        synchronized (this.multimap) {\n+            consumer.accept(this.multimap);\n+            this.immutable = null;\n+        }\n+    }\n \n-    private ChannelConstants() {\n+    public Multimap<K, V> get() {\n+        Multimap<K, V> immutable = this.immutable;\n+        if (immutable != null) {\n+            return immutable;\n+        }\n+        synchronized (this.multimap) {\n+            immutable = this.immutable;\n+            if (immutable != null) {\n+                return immutable;\n+            }\n+            immutable = ImmutableMultimap.copyOf(this.multimap);\n+            this.immutable = immutable;\n+            return immutable;\n+        }\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA3Nzg4MA==", "url": "https://github.com/SpongePowered/Sponge/pull/3065#discussion_r455077880", "bodyText": "Move to constants", "author": "gabizou", "createdAt": "2020-07-15T14:05:15Z", "path": "src/main/java/org/spongepowered/common/network/channel/RegisterChannelHelper.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.network.channel;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.base.Splitter;\n+import io.netty.buffer.Unpooled;\n+import org.spongepowered.api.ResourceKey;\n+import org.spongepowered.api.network.channel.ChannelBuf;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+public final class RegisterChannelHelper {\n+\n+    /**\n+     * A minecraft channel used to register channels keys.\n+     */\n+    public static final ResourceKey REGISTER_KEY = ResourceKey.minecraft(\"register\");\n+\n+    /**\n+     * A minecraft channel used to unregister channels keys.\n+     */\n+    public static final ResourceKey UNREGISTER_KEY = ResourceKey.minecraft(\"unregister\");", "originalCommit": "a6372a712f6e4bfa4ee1f10763ffee8c7e1b55ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "357efd5cec73f4859d3027df535659e739049994", "chunk": "diff --git a/src/main/java/org/spongepowered/common/network/channel/RegisterChannelHelper.java b/src/main/java/org/spongepowered/common/network/channel/RegisterChannelHelper.java\nindex 78e94c912..43c913a92 100644\n--- a/src/main/java/org/spongepowered/common/network/channel/RegisterChannelHelper.java\n+++ b/src/main/java/org/spongepowered/common/network/channel/RegisterChannelHelper.java\n\n@@ -47,17 +47,17 @@\n     public static final ResourceKey UNREGISTER_KEY = ResourceKey.minecraft(\"unregister\");\n \n     private static final char SEPARATOR = '\\0';\n-    private static final Splitter SPLITTER = Splitter.on(SEPARATOR);\n-    private static final Joiner JOINER = Joiner.on(SEPARATOR);\n+    private static final Splitter SPLITTER = Splitter.on(RegisterChannelHelper.SEPARATOR);\n+    private static final Joiner JOINER = Joiner.on(RegisterChannelHelper.SEPARATOR);\n \n     public static List<ResourceKey> decodePayload(final ChannelBuf payload) {\n         final byte[] content = payload.readBytes(payload.available());\n-        return SPLITTER.splitToList(new String(content, StandardCharsets.UTF_8))\n+        return RegisterChannelHelper.SPLITTER.splitToList(new String(content, StandardCharsets.UTF_8))\n                 .stream().map(ResourceKey::resolve).collect(Collectors.toList());\n     }\n \n     public static ChannelBuf encodePayload(final Iterable<ResourceKey> keys) {\n-        final String content = JOINER.join(keys);\n+        final String content = RegisterChannelHelper.JOINER.join(keys);\n         return ChannelBuffers.wrap(Unpooled.wrappedBuffer(content.getBytes(StandardCharsets.UTF_8)));\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA3OTg0OA==", "url": "https://github.com/SpongePowered/Sponge/pull/3065#discussion_r455079848", "bodyText": "Can use the PhaseTracker as is now. But if this whole class shebang is usable from multiple threads, you may have to change the map used to at least ConcurrentHashMap.", "author": "gabizou", "createdAt": "2020-07-15T14:07:49Z", "path": "src/main/java/org/spongepowered/common/network/channel/SpongeChannelRegistry.java", "diffHunk": "@@ -24,29 +24,298 @@\n  */\n package org.spongepowered.common.network.channel;\n \n-import com.google.inject.Singleton;\n+import static java.util.Objects.requireNonNull;\n+\n+import com.google.common.collect.ImmutableList;\n+import net.minecraft.network.IPacket;\n+import net.minecraft.network.login.client.CCustomPayloadLoginPacket;\n+import net.minecraft.network.login.server.SCustomPayloadLoginPacket;\n+import net.minecraft.network.play.client.CCustomPayloadPacket;\n+import net.minecraft.network.play.server.SCustomPayloadPlayPacket;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.spongepowered.api.Game;\n import org.spongepowered.api.ResourceKey;\n+import org.spongepowered.api.Sponge;\n+import org.spongepowered.api.event.cause.Cause;\n+import org.spongepowered.api.event.cause.EventContext;\n+import org.spongepowered.api.event.lifecycle.RegisterChannelEvent;\n+import org.spongepowered.api.network.EngineConnection;\n import org.spongepowered.api.network.channel.Channel;\n+import org.spongepowered.api.network.channel.ChannelBuf;\n import org.spongepowered.api.network.channel.ChannelRegistry;\n+import org.spongepowered.api.network.channel.NoResponseException;\n+import org.spongepowered.api.network.channel.packet.PacketChannel;\n+import org.spongepowered.api.network.channel.packet.basic.BasicPacketChannel;\n+import org.spongepowered.api.network.channel.raw.RawDataChannel;\n+import org.spongepowered.api.registry.DuplicateRegistrationException;\n+import org.spongepowered.common.SpongeCommon;\n+import org.spongepowered.common.accessor.network.login.client.CCustomPayloadLoginPacketAccessor;\n+import org.spongepowered.common.accessor.network.login.server.SCustomPayloadLoginPacketAccessor;\n+import org.spongepowered.common.accessor.network.play.CustomPayloadPacketAccessor;\n+import org.spongepowered.common.network.channel.packet.SpongeBasicPacketChannel;\n+import org.spongepowered.common.network.channel.packet.SpongePacketChannel;\n+import org.spongepowered.common.network.channel.raw.SpongeRawDataChannel;\n \n import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.BiFunction;\n+\n+@SuppressWarnings(\"unchecked\")\n+public class SpongeChannelRegistry implements ChannelRegistry {\n+\n+    private final Map<ResourceKey, Channel> channels = new HashMap<>();\n+    private final Map<Class<?>, BiFunction<ResourceKey, SpongeChannelRegistry, Channel>> channelBuilders = new HashMap<>();\n+\n+    private final ChannelBufferAllocator bufferAllocator;\n \n-@Singleton\n-public final class SpongeChannelRegistry implements ChannelRegistry {\n+    public SpongeChannelRegistry(final ChannelBufferAllocator bufferAllocator) {\n+        this.bufferAllocator = bufferAllocator;\n+\n+        this.registerChannelType(RawDataChannel.class, SpongeRawDataChannel::new);\n+        this.registerChannelType(BasicPacketChannel.class, SpongeBasicPacketChannel::new);\n+        this.registerChannelType(PacketChannel.class, SpongePacketChannel::new);\n+    }\n+\n+    public ChannelBufferAllocator getBufferAllocator() {\n+        return this.bufferAllocator;\n+    }\n+\n+    private <T extends Channel> void registerChannelType(\n+            final Class<T> channelType, final BiFunction<ResourceKey, SpongeChannelRegistry, T> builder) {\n+        this.channelBuilders.put(channelType, (BiFunction<ResourceKey, SpongeChannelRegistry, Channel>) builder);\n+    }\n+\n+    public <C extends Channel> C createChannel(final ResourceKey channelKey, final Class<C> channelType) throws DuplicateRegistrationException {\n+        requireNonNull(channelKey, \"channelKey\");\n+        requireNonNull(channelType, \"channelType\");\n+        if (this.channels.containsKey(channelKey)) {\n+            throw new DuplicateRegistrationException(\"The channel key \\\"\" + channelKey + \"\\\" is already in use.\");\n+        }\n+        final @Nullable BiFunction<ResourceKey, SpongeChannelRegistry, Channel> builder = this.channelBuilders.get(channelType);\n+        if (builder == null) {\n+            throw new IllegalArgumentException(\"Unsupported channel type: \" + channelType);\n+        }\n+        final Channel channel = builder.apply(channelKey, this);\n+        this.channels.put(channelKey, channel);\n+        return (C) channel;\n+    }\n \n     @Override\n-    public Optional<Channel> get(ResourceKey channelKey) {\n-        return Optional.empty();\n+    public Optional<Channel> get(final ResourceKey channelKey) {\n+        requireNonNull(channelKey, \"channelKey\");\n+        return Optional.ofNullable(this.channels.get(channelKey));\n     }\n \n     @Override\n-    public <C extends Channel> C getOfType(ResourceKey channelKey, Class<C> channelType) {\n-        return null;\n+    public <C extends Channel> C getOfType(final ResourceKey channelKey, final Class<C> channelType) {\n+        requireNonNull(channelKey, \"channelKey\");\n+        requireNonNull(channelType, \"channelType\");\n+        final @Nullable Channel binding = this.channels.get(channelKey);\n+        if (binding != null) {\n+            if (!channelType.isInstance(binding)) {\n+                throw new IllegalStateException(\"There's already a channel registered for \"\n+                        + channelKey + \", but it is not of the requested type \" + channelType);\n+            }\n+            return (C) binding;\n+        }\n+        return this.createChannel(channelKey, channelType);\n     }\n \n     @Override\n     public Collection<Channel> getChannels() {\n-        return null;\n+        return ImmutableList.copyOf(this.channels.values());\n+    }\n+\n+    private static final class ChannelRegistrationsResult {\n+\n+        private final CompletableFuture<Void> future;\n+\n+        private ChannelRegistrationsResult(final CompletableFuture<Void> future) {\n+            this.future = future;\n+        }\n+    }\n+\n+    public void postRegistryEvent() {\n+        final Cause cause = Cause.of(EventContext.empty(), this);", "originalCommit": "a6372a712f6e4bfa4ee1f10763ffee8c7e1b55ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA4OTUzMg==", "url": "https://github.com/SpongePowered/Sponge/pull/3065#discussion_r455089532", "bodyText": "Depends where you call this in the lifecycle.\nPart of the lifecycle is before the engine(s) are even created. If so, cannot use PhaseTracker.\nEven if you could, don't see a point. We explicitly know what the cause will always be here, no reason to grab one from the CauseStack.", "author": "Zidane", "createdAt": "2020-07-15T14:20:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA3OTg0OA=="}], "type": "inlineReview", "revised_code": {"commit": "357efd5cec73f4859d3027df535659e739049994", "chunk": "diff --git a/src/main/java/org/spongepowered/common/network/channel/SpongeChannelRegistry.java b/src/main/java/org/spongepowered/common/network/channel/SpongeChannelRegistry.java\nindex 03504145e..06106f70c 100644\n--- a/src/main/java/org/spongepowered/common/network/channel/SpongeChannelRegistry.java\n+++ b/src/main/java/org/spongepowered/common/network/channel/SpongeChannelRegistry.java\n\n@@ -24,8 +24,6 @@\n  */\n package org.spongepowered.common.network.channel;\n \n-import static java.util.Objects.requireNonNull;\n-\n import com.google.common.collect.ImmutableList;\n import net.minecraft.network.IPacket;\n import net.minecraft.network.login.client.CCustomPayloadLoginPacket;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA4MTY0Mg==", "url": "https://github.com/SpongePowered/Sponge/pull/3065#discussion_r455081642", "bodyText": "Does asMap render the cache as invalid? Haven't read the javadoc on caffeine in a moment, but I'd figure it would make a copy as a Map.", "author": "gabizou", "createdAt": "2020-07-15T14:10:19Z", "path": "src/main/java/org/spongepowered/common/network/channel/TransactionStore.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.network.channel;\n+\n+import com.github.benmanes.caffeine.cache.Caffeine;\n+import com.github.benmanes.caffeine.cache.RemovalCause;\n+import com.github.benmanes.caffeine.cache.RemovalListener;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.spongepowered.api.network.EngineConnection;\n+import org.spongepowered.api.network.channel.TimeoutException;\n+\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Supplier;\n+\n+/**\n+ * A storage for transaction id mappings.\n+ */\n+public final class TransactionStore {\n+\n+    private final Supplier<EngineConnection> connection;\n+\n+    private final AtomicInteger counter = new AtomicInteger();\n+    private final ConcurrentMap<Integer, Entry> lookup = Caffeine.newBuilder()\n+            .expireAfterAccess(1, TimeUnit.MINUTES)\n+            .removalListener((RemovalListener<Integer, Entry>) (key, value, cause) -> {\n+                if (cause == RemovalCause.EXPIRED && value != null) {\n+                    value.getChannel().handleTransactionResponse(\n+                            getConnection(), value.getData(), TransactionResult.failure(new TimeoutException()));\n+                }\n+            })\n+            .build().asMap();", "originalCommit": "c93b795b8359dbef1ab85b5b6008dc29f06179b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkyMTg3MA==", "url": "https://github.com/SpongePowered/Sponge/pull/3065#discussion_r456921870", "bodyText": "asMap returns a view of the cache", "author": "Cybermaxke", "createdAt": "2020-07-19T15:26:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA4MTY0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "357efd5cec73f4859d3027df535659e739049994", "chunk": "diff --git a/src/main/java/org/spongepowered/common/network/channel/TransactionStore.java b/src/main/java/org/spongepowered/common/network/channel/TransactionStore.java\nindex e35e65349..78bb3c24e 100644\n--- a/src/main/java/org/spongepowered/common/network/channel/TransactionStore.java\n+++ b/src/main/java/org/spongepowered/common/network/channel/TransactionStore.java\n\n@@ -45,7 +45,7 @@\n \n     private final AtomicInteger counter = new AtomicInteger();\n     private final ConcurrentMap<Integer, Entry> lookup = Caffeine.newBuilder()\n-            .expireAfterAccess(1, TimeUnit.MINUTES)\n+            .expireAfterAccess(15, TimeUnit.SECONDS)\n             .removalListener((RemovalListener<Integer, Entry>) (key, value, cause) -> {\n                 if (cause == RemovalCause.EXPIRED && value != null) {\n                     value.getChannel().handleTransactionResponse(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA4MjgyMQ==", "url": "https://github.com/SpongePowered/Sponge/pull/3065#discussion_r455082821", "bodyText": "Concurrent?", "author": "gabizou", "createdAt": "2020-07-15T14:11:59Z", "path": "src/main/java/org/spongepowered/common/network/channel/packet/AbstractPacketChannel.java", "diffHunk": "@@ -0,0 +1,249 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.network.channel.packet;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.netty.handler.codec.CodecException;\n+import io.netty.handler.codec.DecoderException;\n+import io.netty.handler.codec.EncoderException;\n+import it.unimi.dsi.fastutil.ints.Int2ObjectMap;\n+import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.spongepowered.api.ResourceKey;\n+import org.spongepowered.api.network.EngineConnection;\n+import org.spongepowered.api.network.channel.ChannelBuf;\n+import org.spongepowered.api.network.channel.ChannelException;\n+import org.spongepowered.api.network.channel.packet.FixedTransactionalPacketBinding;\n+import org.spongepowered.api.network.channel.packet.HandlerPacketBinding;\n+import org.spongepowered.api.network.channel.packet.Packet;\n+import org.spongepowered.api.network.channel.packet.PacketBinding;\n+import org.spongepowered.api.network.channel.packet.PacketHandler;\n+import org.spongepowered.api.network.channel.packet.RequestPacket;\n+import org.spongepowered.api.network.channel.packet.ResponsePacketHandler;\n+import org.spongepowered.api.network.channel.packet.TransactionalPacketBinding;\n+import org.spongepowered.api.network.channel.packet.TransactionalPacketRegistry;\n+import org.spongepowered.common.SpongeCommon;\n+import org.spongepowered.common.network.channel.ChannelBuffers;\n+import org.spongepowered.common.network.channel.SpongeChannel;\n+import org.spongepowered.common.network.channel.SpongeChannelRegistry;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+public abstract class AbstractPacketChannel extends SpongeChannel implements TransactionalPacketRegistry {\n+\n+    protected final Map<Class<?>, PacketBinding<?>> byType = new HashMap<>();\n+    protected final Int2ObjectMap<PacketBinding<?>> byOpcode = new Int2ObjectOpenHashMap<>();", "originalCommit": "c93b795b8359dbef1ab85b5b6008dc29f06179b6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "357efd5cec73f4859d3027df535659e739049994", "chunk": "diff --git a/src/main/java/org/spongepowered/common/network/channel/packet/AbstractPacketChannel.java b/src/main/java/org/spongepowered/common/network/channel/packet/AbstractPacketChannel.java\nindex ad931efb3..310bfc2fe 100644\n--- a/src/main/java/org/spongepowered/common/network/channel/packet/AbstractPacketChannel.java\n+++ b/src/main/java/org/spongepowered/common/network/channel/packet/AbstractPacketChannel.java\n\n@@ -24,14 +24,10 @@\n  */\n package org.spongepowered.common.network.channel.packet;\n \n-import static java.util.Objects.requireNonNull;\n-\n import com.google.common.collect.ImmutableList;\n import io.netty.handler.codec.CodecException;\n import io.netty.handler.codec.DecoderException;\n import io.netty.handler.codec.EncoderException;\n-import it.unimi.dsi.fastutil.ints.Int2ObjectMap;\n-import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;\n import org.checkerframework.checker.nullness.qual.Nullable;\n import org.spongepowered.api.ResourceKey;\n import org.spongepowered.api.network.EngineConnection;\n"}}, {"oid": "357efd5cec73f4859d3027df535659e739049994", "url": "https://github.com/SpongePowered/Sponge/commit/357efd5cec73f4859d3027df535659e739049994", "message": "Implement the new network channels.", "committedDate": "2020-07-19T15:20:30Z", "type": "forcePushed"}, {"oid": "0662dc18f4d48f4d8541fdb74a7660aac951624b", "url": "https://github.com/SpongePowered/Sponge/commit/0662dc18f4d48f4d8541fdb74a7660aac951624b", "message": "Implement the new network channels.", "committedDate": "2020-07-19T15:42:48Z", "type": "forcePushed"}, {"oid": "2ceb820e1cb02086d8818e6adfd9ca1ff45d0933", "url": "https://github.com/SpongePowered/Sponge/commit/2ceb820e1cb02086d8818e6adfd9ca1ff45d0933", "message": "Implement the new network channels.", "committedDate": "2020-07-20T10:39:29Z", "type": "forcePushed"}, {"oid": "df679bcf8da394f20bf137f484a22cbaa7d467da", "url": "https://github.com/SpongePowered/Sponge/commit/df679bcf8da394f20bf137f484a22cbaa7d467da", "message": "Implement the new network channels.", "committedDate": "2020-07-20T10:54:33Z", "type": "forcePushed"}, {"oid": "9463fd239f0b114790c82a5dfd92b71d447b24d5", "url": "https://github.com/SpongePowered/Sponge/commit/9463fd239f0b114790c82a5dfd92b71d447b24d5", "message": "Implement the exception handler. Fix basic channel in play phase.", "committedDate": "2020-07-21T10:21:03Z", "type": "forcePushed"}, {"oid": "6cd5d406cb5f8f563093e040d57eed1e928b2756", "url": "https://github.com/SpongePowered/Sponge/commit/6cd5d406cb5f8f563093e040d57eed1e928b2756", "message": "Implement the new network channels.", "committedDate": "2020-07-27T12:05:24Z", "type": "commit"}, {"oid": "6cd5d406cb5f8f563093e040d57eed1e928b2756", "url": "https://github.com/SpongePowered/Sponge/commit/6cd5d406cb5f8f563093e040d57eed1e928b2756", "message": "Implement the new network channels.", "committedDate": "2020-07-27T12:05:24Z", "type": "forcePushed"}]}