{"pr_number": 2453, "pr_title": "Rewrite entity collisions module.", "pr_createdAt": "2020-01-02T04:04:29Z", "pr_url": "https://github.com/SpongePowered/Sponge/pull/2453", "timeline": [{"oid": "ea81ddc1aec7f94653bb9281b1d5170a270bfd76", "url": "https://github.com/SpongePowered/Sponge/commit/ea81ddc1aec7f94653bb9281b1d5170a270bfd76", "message": "Remove limits for getEntitiesWithinAABB for large bounding boxes. Fixes #2452", "committedDate": "2020-01-02T22:16:32Z", "type": "forcePushed"}, {"oid": "0df932233e88d1e5b7f381051836b86786196286", "url": "https://github.com/SpongePowered/Sponge/commit/0df932233e88d1e5b7f381051836b86786196286", "message": "Remove limits for getEntitiesWithinAABB for large bounding boxes. Fixes #2452", "committedDate": "2020-02-20T02:27:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQwNDMwNw==", "url": "https://github.com/SpongePowered/Sponge/pull/2453#discussion_r382404307", "bodyText": "If we are keeping this logic, I'd much rather this be checking that ((WorldBridge) this.world).bridge$isFake()", "author": "gabizou", "createdAt": "2020-02-21T05:31:04Z", "path": "src/main/java/org/spongepowered/common/mixin/entitycollisions/ChunkMixin_Collisions.java", "diffHunk": "@@ -124,4 +128,18 @@\n \n         return true;\n     }\n+\n+    /**\n+     * Removes the limit when the bounding box is large. Fixes bugs like\n+     * https://github.com/SpongePowered/SpongeCommon/issues/2452.\n+     *\n+     * @author JBYoshi\n+     */\n+    private boolean collisionsImpl$isLimitExempt(AxisAlignedBB aabb) {\n+        if (!(this.world instanceof WorldServer)) {", "originalCommit": "ea81ddc1aec7f94653bb9281b1d5170a270bfd76", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6d42f8a3438cfcbfc8b820a7ca39ff193d556473", "chunk": "diff --git a/src/main/java/org/spongepowered/common/mixin/entitycollisions/ChunkMixin_Collisions.java b/src/main/java/org/spongepowered/common/mixin/entitycollisions/ChunkMixin_Collisions.java\nindex 5b0205a90..af63f8e7a 100644\n--- a/src/main/java/org/spongepowered/common/mixin/entitycollisions/ChunkMixin_Collisions.java\n+++ b/src/main/java/org/spongepowered/common/mixin/entitycollisions/ChunkMixin_Collisions.java\n\n@@ -103,43 +95,28 @@\n                 return true;\n             }\n \n+            CollisionsCapability capability;\n             if (source instanceof LocatableBlock) {\n                 final LocatableBlock locatable = (LocatableBlock) source;\n                 final BlockType blockType =locatable.getLocation().getBlockType();\n-                final CollisionsCapability spongeBlock = (CollisionsCapability) blockType;\n-                if (spongeBlock.collision$requiresCollisionsCacheRefresh()) {\n-                    spongeBlock.collision$initializeCollisionState(this.world);\n-                    spongeBlock.collision$requiresCollisionsCacheRefresh(false);\n-                }\n-\n-                return !((spongeBlock.collision$getMaxCollisions() >= 0) && (listToFill.size() >= spongeBlock.collision$getMaxCollisions()));\n+                capability = (CollisionsCapability) blockType;\n             } else if (source instanceof CollisionsCapability) {\n-                final CollisionsCapability spongeEntity = (CollisionsCapability) source;\n-                if (spongeEntity.collision$requiresCollisionsCacheRefresh()) {\n-                    spongeEntity.collision$initializeCollisionState(this.world);\n-                    spongeEntity.collision$requiresCollisionsCacheRefresh(false);\n-                }\n+                capability = (CollisionsCapability) source;\n+            } else {\n+                return true;\n+            }\n \n-                return !((spongeEntity.collision$getMaxCollisions() >= 0) && (listToFill.size() >= spongeEntity.collision$getMaxCollisions()));\n+\n+            if (capability.collision$requiresCollisionsCacheRefresh()) {\n+                capability.collision$initializeCollisionState(this.world);\n+                capability.collision$requiresCollisionsCacheRefresh(false);\n             }\n \n-            return true;\n+            return capability.collision$getMaxCollisions() < 0\n+                    || listToFill.size() < capability.collision$getMaxCollisions()\n+                    || listToFill.size() < this.world.getGameRules().getInt(\"maxEntityCramming\");\n         }\n \n         return true;\n     }\n-\n-    /**\n-     * Removes the limit when the bounding box is large. Fixes bugs like\n-     * https://github.com/SpongePowered/SpongeCommon/issues/2452.\n-     *\n-     * @author JBYoshi\n-     */\n-    private boolean collisionsImpl$isLimitExempt(AxisAlignedBB aabb) {\n-        if (!(this.world instanceof WorldServer)) {\n-            return true;\n-        }\n-        double entitySize = SpongeImplHooks.getWorldMaxEntityRadius((WorldServer) this.world) * 2;\n-        return (aabb.maxX - aabb.minX) * (aabb.maxY - aabb.minY) * (aabb.maxZ - aabb.minZ) > entitySize * entitySize * entitySize;\n-    }\n }\n"}}, {"oid": "6d42f8a3438cfcbfc8b820a7ca39ff193d556473", "url": "https://github.com/SpongePowered/Sponge/commit/6d42f8a3438cfcbfc8b820a7ca39ff193d556473", "message": "WIP rewrite of the collisions module", "committedDate": "2020-03-28T00:19:51Z", "type": "commit"}, {"oid": "6d42f8a3438cfcbfc8b820a7ca39ff193d556473", "url": "https://github.com/SpongePowered/Sponge/commit/6d42f8a3438cfcbfc8b820a7ca39ff193d556473", "message": "WIP rewrite of the collisions module", "committedDate": "2020-03-28T00:19:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcxNDk0Mg==", "url": "https://github.com/SpongePowered/Sponge/pull/2453#discussion_r399714942", "bodyText": "Almost guaranteed that this might still be called on the client thread.", "author": "gabizou", "createdAt": "2020-03-28T22:04:00Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/EntityLivingBaseMixin.java", "diffHunk": "@@ -1170,4 +1171,12 @@ private void onResetActiveHand(final CallbackInfo ci) {\n \n     // End implementation of UseItemStackEvent\n \n+    @Redirect(method = \"onLivingUpdate\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/EntityLivingBase;collideWithNearbyEntities()V\"))\n+    private void collisions$runCollisions(EntityLivingBase self) {\n+        try (PhaseContext<?> ignored = EntityPhase.State.COLLISION.createPhaseContext()\n+                .source(this).buildAndSwitch()) {", "originalCommit": "6d42f8a3438cfcbfc8b820a7ca39ff193d556473", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "873c26a989f55f2c6b4603190141bcd947ea03b4", "chunk": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/EntityLivingBaseMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/EntityLivingBaseMixin.java\nindex 7f7125437..5116138d0 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/EntityLivingBaseMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/EntityLivingBaseMixin.java\n\n@@ -1173,9 +1173,13 @@ private void onResetActiveHand(final CallbackInfo ci) {\n \n     @Redirect(method = \"onLivingUpdate\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/EntityLivingBase;collideWithNearbyEntities()V\"))\n     private void collisions$runCollisions(EntityLivingBase self) {\n-        try (PhaseContext<?> ignored = EntityPhase.State.COLLISION.createPhaseContext()\n-                .source(this).buildAndSwitch()) {\n-            this.collideWithNearbyEntities();\n+        if (((WorldBridge) this.world).bridge$isFake()) {\n+            this.shadow$collideWithNearbyEntities();\n+        } else {\n+            try (PhaseContext<?> ignored = EntityPhase.State.COLLISION.createPhaseContext()\n+                    .source(this).buildAndSwitch()) {\n+                this.shadow$collideWithNearbyEntities();\n+            }\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcxNDk2Mg==", "url": "https://github.com/SpongePowered/Sponge/pull/2453#discussion_r399714962", "bodyText": "prefix with shadow$.", "author": "gabizou", "createdAt": "2020-03-28T22:04:09Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/EntityLivingBaseMixin.java", "diffHunk": "@@ -179,6 +179,7 @@\n     @Shadow private boolean checkTotemDeathProtection(final DamageSource p_190628_1_) {\n         return false; // SHADOWED\n     }\n+    @Shadow protected abstract void collideWithNearbyEntities();", "originalCommit": "6d42f8a3438cfcbfc8b820a7ca39ff193d556473", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "873c26a989f55f2c6b4603190141bcd947ea03b4", "chunk": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/EntityLivingBaseMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/EntityLivingBaseMixin.java\nindex 7f7125437..5116138d0 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/EntityLivingBaseMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/EntityLivingBaseMixin.java\n\n@@ -179,7 +179,7 @@\n     @Shadow private boolean checkTotemDeathProtection(final DamageSource p_190628_1_) {\n         return false; // SHADOWED\n     }\n-    @Shadow protected abstract void collideWithNearbyEntities();\n+    @Shadow protected abstract void shadow$collideWithNearbyEntities();\n \n     private int impl$deathEventsPosted;\n     private int impl$maxAir = Constants.Sponge.Entity.DEFAULT_MAX_AIR;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcxNTAzNg==", "url": "https://github.com/SpongePowered/Sponge/pull/2453#discussion_r399715036", "bodyText": "Then remove it.", "author": "gabizou", "createdAt": "2020-03-28T22:05:01Z", "path": "src/main/java/org/spongepowered/common/mixin/entitycollisions/BlockMixin_Collisions.java", "diffHunk": "@@ -37,6 +37,9 @@\n import org.spongepowered.common.config.type.WorldConfig;\n import org.spongepowered.common.mixin.plugin.entitycollisions.interfaces.CollisionsCapability;\n \n+// TODO this is currently inactive - No phase states for blocks override\n+// isCollision, and CollideBlockEvent is handled with entities iterating\n+// through blocks, not blocks iterating through entities", "originalCommit": "6d42f8a3438cfcbfc8b820a7ca39ff193d556473", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "873c26a989f55f2c6b4603190141bcd947ea03b4", "chunk": "diff --git a/src/main/java/org/spongepowered/common/mixin/entitycollisions/BlockMixin_Collisions.java b/src/main/java/org/spongepowered/common/mixin/entitycollisions/BlockMixin_Collisions.java\ndeleted file mode 100644\nindex 09d914e5b..000000000\n--- a/src/main/java/org/spongepowered/common/mixin/entitycollisions/BlockMixin_Collisions.java\n+++ /dev/null\n\n@@ -1,140 +0,0 @@\n-/*\n- * This file is part of Sponge, licensed under the MIT License (MIT).\n- *\n- * Copyright (c) SpongePowered <https://www.spongepowered.org>\n- * Copyright (c) contributors\n- *\n- * Permission is hereby granted, free of charge, to any person obtaining a copy\n- * of this software and associated documentation files (the \"Software\"), to deal\n- * in the Software without restriction, including without limitation the rights\n- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n- * copies of the Software, and to permit persons to whom the Software is\n- * furnished to do so, subject to the following conditions:\n- *\n- * The above copyright notice and this permission notice shall be included in\n- * all copies or substantial portions of the Software.\n- *\n- * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n- * THE SOFTWARE.\n- */\n-package org.spongepowered.common.mixin.entitycollisions;\n-\n-import net.minecraft.block.Block;\n-import net.minecraft.world.World;\n-import org.spongepowered.api.block.BlockType;\n-import org.spongepowered.asm.mixin.Mixin;\n-import org.spongepowered.common.SpongeImpl;\n-import org.spongepowered.common.bridge.world.WorldInfoBridge;\n-import org.spongepowered.common.config.SpongeConfig;\n-import org.spongepowered.common.config.category.CollisionModCategory;\n-import org.spongepowered.common.config.category.EntityCollisionCategory;\n-import org.spongepowered.common.config.type.GlobalConfig;\n-import org.spongepowered.common.config.type.WorldConfig;\n-import org.spongepowered.common.mixin.plugin.entitycollisions.interfaces.CollisionsCapability;\n-\n-// TODO this is currently inactive - No phase states for blocks override\n-// isCollision, and CollideBlockEvent is handled with entities iterating\n-// through blocks, not blocks iterating through entities\n-@Mixin(Block.class)\n-public abstract class BlockMixin_Collisions implements CollisionsCapability {\n-\n-    private int collision$maxCollisions = 8;\n-    private String collision$modId;\n-    @SuppressWarnings(\"unused\")\n-    private String collision$modBlockName;\n-    private boolean collision$refreshCache = true;\n-\n-    @Override\n-    public int collision$getMaxCollisions() {\n-        return this.collision$maxCollisions;\n-    }\n-\n-    @Override\n-    public void collision$setMaxCollisions(int max) {\n-        this.collision$maxCollisions = max;\n-    }\n-\n-    @Override\n-    public void collision$setModDataName(String name) {\n-        this.collision$modBlockName = name;\n-    }\n-\n-    @Override\n-    public String collision$getModDataId() {\n-        return this.collision$modId;\n-    }\n-\n-    @Override\n-    public void collision$setModDataId(String id) {\n-        this.collision$modId = id;\n-    }\n-\n-    @Override\n-    public void collision$requiresCollisionsCacheRefresh(boolean flag) {\n-        this.collision$refreshCache = flag;\n-    }\n-\n-    @Override\n-    public boolean collision$requiresCollisionsCacheRefresh() {\n-        return this.collision$refreshCache;\n-    }\n-\n-    @SuppressWarnings(\"Duplicates\")\n-    @Override\n-    public void collision$initializeCollisionState(World world) {\n-        final SpongeConfig<WorldConfig> worldConfigAdapter = ((WorldInfoBridge) world.getWorldInfo()).bridge$getConfigAdapter();\n-        final SpongeConfig<GlobalConfig> globalConfigAdapter = SpongeImpl.getGlobalConfigAdapter();\n-        final EntityCollisionCategory worldCollCat = worldConfigAdapter.getConfig().getEntityCollisionCategory();\n-        final EntityCollisionCategory globalCollCat = globalConfigAdapter.getConfig().getEntityCollisionCategory();\n-\n-        this.collision$setMaxCollisions(worldCollCat.getMaxEntitiesWithinAABB());\n-        \n-        boolean requiresSave = false;\n-        String[] ids = ((BlockType) this).getId().split(\":\");\n-        String modId = ids[0];\n-        String name = ids[1];\n-\n-        CollisionModCategory worldCollMod = worldCollCat.getModList().get(modId);\n-        CollisionModCategory globalCollMod = globalCollCat.getModList().get(modId);\n-        if (worldCollMod == null && worldCollCat.autoPopulateData()) {\n-            globalCollMod = new CollisionModCategory(modId);\n-            globalCollCat.getModList().put(modId, globalCollMod);\n-            globalCollMod.getBlockList().put(name, this.collision$getMaxCollisions());\n-            globalConfigAdapter.save();\n-            return;\n-        } else if (worldCollMod != null) {\n-            if (!worldCollMod.isEnabled()) {\n-                this.collision$setMaxCollisions(-1);\n-                return;\n-            }\n-            // check mod overrides\n-            Integer modCollisionMax = worldCollMod.getDefaultMaxCollisions().get(\"blocks\");\n-            if (modCollisionMax != null) {\n-                this.collision$setMaxCollisions(modCollisionMax);\n-            }\n-\n-            // entity overrides\n-            Integer blockMaxCollision = worldCollMod.getBlockList().get(name);\n-            if (blockMaxCollision == null && worldCollCat.autoPopulateData()) {\n-                globalCollMod.getBlockList().put(name, this.collision$getMaxCollisions());\n-                requiresSave = true;\n-            } else if (blockMaxCollision != null) {\n-                this.collision$setMaxCollisions(blockMaxCollision);\n-            }\n-        }\n-\n-        // don't bother saving for negative values\n-        if (this.collision$getMaxCollisions() <= 0) {\n-            return;\n-        }\n-\n-        if (requiresSave) {\n-            globalConfigAdapter.save();\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcxNTA5MQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2453#discussion_r399715091", "bodyText": "Should be final.", "author": "gabizou", "createdAt": "2020-03-28T22:05:40Z", "path": "src/main/java/org/spongepowered/common/mixin/entitycollisions/ChunkMixin_Collisions.java", "diffHunk": "@@ -99,27 +95,26 @@\n                 return true;\n             }\n \n+            CollisionsCapability capability;", "originalCommit": "6d42f8a3438cfcbfc8b820a7ca39ff193d556473", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "873c26a989f55f2c6b4603190141bcd947ea03b4", "chunk": "diff --git a/src/main/java/org/spongepowered/common/mixin/entitycollisions/ChunkMixin_Collisions.java b/src/main/java/org/spongepowered/common/mixin/entitycollisions/ChunkMixin_Collisions.java\nindex af63f8e7a..b3b64eb6c 100644\n--- a/src/main/java/org/spongepowered/common/mixin/entitycollisions/ChunkMixin_Collisions.java\n+++ b/src/main/java/org/spongepowered/common/mixin/entitycollisions/ChunkMixin_Collisions.java\n\n@@ -91,22 +91,11 @@\n \n             final PhaseContext<?> phaseContext = PhaseTracker.getInstance().getCurrentContext();\n             final Object source = phaseContext.getSource();\n-            if (source == null) {\n+            if (!(source instanceof CollisionsCapability)) {\n                 return true;\n             }\n \n-            CollisionsCapability capability;\n-            if (source instanceof LocatableBlock) {\n-                final LocatableBlock locatable = (LocatableBlock) source;\n-                final BlockType blockType =locatable.getLocation().getBlockType();\n-                capability = (CollisionsCapability) blockType;\n-            } else if (source instanceof CollisionsCapability) {\n-                capability = (CollisionsCapability) source;\n-            } else {\n-                return true;\n-            }\n-\n-\n+            final CollisionsCapability capability = (CollisionsCapability) source;\n             if (capability.collision$requiresCollisionsCacheRefresh()) {\n                 capability.collision$initializeCollisionState(this.world);\n                 capability.collision$requiresCollisionsCacheRefresh(false);\n"}}, {"oid": "873c26a989f55f2c6b4603190141bcd947ea03b4", "url": "https://github.com/SpongePowered/Sponge/commit/873c26a989f55f2c6b4603190141bcd947ea03b4", "message": "More updates.\n\n- Removed block collision code.\n- Removed default exceptions - I've tested all of them, and they work out of the box (see SpongePowered/SpongeForge#1000 and SpongePowered/SpongeForge#1214).\n- Other miscellaneous fixes from gabizou's comments.", "committedDate": "2020-04-17T03:26:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQzMzg0Ng==", "url": "https://github.com/SpongePowered/Sponge/pull/2453#discussion_r412433846", "bodyText": "If this is supposed to be added when the collision plugin has enabled collisions, this should be in a separate mixin that gets applied.", "author": "gabizou", "createdAt": "2020-04-21T19:31:06Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/EntityLivingBaseMixin.java", "diffHunk": "@@ -1170,4 +1171,16 @@ private void onResetActiveHand(final CallbackInfo ci) {\n \n     // End implementation of UseItemStackEvent\n \n+    @Redirect(method = \"onLivingUpdate\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/EntityLivingBase;collideWithNearbyEntities()V\"))\n+    private void collisions$runCollisions(EntityLivingBase self) {", "originalCommit": "873c26a989f55f2c6b4603190141bcd947ea03b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA1NTMzMQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2453#discussion_r415055331", "bodyText": "This is necessary to enter the EntityCollisionState and it should always be applied.\nThe name was probably copied from the old Mixin.", "author": "ImMorpheus", "createdAt": "2020-04-25T12:42:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQzMzg0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTExOTI2Mw==", "url": "https://github.com/SpongePowered/Sponge/pull/2453#discussion_r415119263", "bodyText": "I've renamed it to impl$runCollisions.", "author": "JBYoshi", "createdAt": "2020-04-25T18:42:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQzMzg0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "16018703dec6703dc398e6a11f0fe20b8711d640", "chunk": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/EntityLivingBaseMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/EntityLivingBaseMixin.java\nindex 5116138d0..63de49c3f 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/EntityLivingBaseMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/EntityLivingBaseMixin.java\n\n@@ -1172,7 +1172,7 @@ private void onResetActiveHand(final CallbackInfo ci) {\n     // End implementation of UseItemStackEvent\n \n     @Redirect(method = \"onLivingUpdate\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/EntityLivingBase;collideWithNearbyEntities()V\"))\n-    private void collisions$runCollisions(EntityLivingBase self) {\n+    private void impl$runCollisions(EntityLivingBase self) {\n         if (((WorldBridge) this.world).bridge$isFake()) {\n             this.shadow$collideWithNearbyEntities();\n         } else {\n"}}, {"oid": "16018703dec6703dc398e6a11f0fe20b8711d640", "url": "https://github.com/SpongePowered/Sponge/commit/16018703dec6703dc398e6a11f0fe20b8711d640", "message": "Rename collisions to impl$.", "committedDate": "2020-04-25T18:41:31Z", "type": "commit"}, {"oid": "07aefc119788e394d3a489af2cf03a93420e4977", "url": "https://github.com/SpongePowered/Sponge/commit/07aefc119788e394d3a489af2cf03a93420e4977", "message": "Merge remote-tracking branch 'upstream/stable-7' into entity-collision-large-boxes", "committedDate": "2020-04-25T18:43:47Z", "type": "commit"}]}