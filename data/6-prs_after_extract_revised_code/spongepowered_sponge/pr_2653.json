{"pr_number": 2653, "pr_title": "PoC for service registration", "pr_createdAt": "2020-06-27T11:38:39Z", "pr_url": "https://github.com/SpongePowered/Sponge/pull/2653", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxOTAxNg==", "url": "https://github.com/SpongePowered/Sponge/pull/2653#discussion_r446519016", "bodyText": "Please include a comment here before merging.", "author": "ST-DDT", "createdAt": "2020-06-27T12:17:59Z", "path": "src/main/java/org/spongepowered/common/config/category/ServicesCategory.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.spongepowered.common.config.category;\n+\n+import ninja.leaping.configurate.objectmapping.Setting;\n+import ninja.leaping.configurate.objectmapping.serialize.ConfigSerializable;\n+\n+@ConfigSerializable\n+public class ServicesCategory extends ConfigCategory {\n+\n+    @Setting(value = \"service-plugin\",\n+            comment = \"Services specified here can be implemented by plugins. To ensure that a\"\n+                    + \"specific plugin implements a given service, set the relevant option to its\"\n+                    + \"plugin ID. If you wish to use Sponge's default for a given service, use\"\n+                    + \"'sponge' as the ID.\\n\\n\"\n+                    + \"If the plugin ID is unknown, or the option is set to '?', all plugins will\"\n+                    + \"be given the opportunity to register their service. If multiple plugins\"\n+                    + \"attempt to register, one will be picked in an implementation dependent way.\"\n+                    + \"If no plugins attempt to register a service, the Sponge default will be used\"\n+                    + \"if one exists.\\n\\n\"\n+                    + \"No Sponge default service exists for the Economy service.\")\n+    private ServicePluginSubCategory servicePlugin = new ServicePluginSubCategory();\n+\n+    public ServicePluginSubCategory getServicePlugin() {\n+        return this.servicePlugin;\n+    }\n+\n+    @ConfigSerializable\n+    public static class ServicePluginSubCategory {\n+\n+        @Setting(\"ban-service\")", "originalCommit": "a53094421516ef92941b32ce0d94b4aab025999e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3caccd63b17627a77709c4f769e01f6a917ef3e1", "chunk": "diff --git a/src/main/java/org/spongepowered/common/config/category/ServicesCategory.java b/src/main/java/org/spongepowered/common/config/category/ServicesCategory.java\nindex d6e2b2a11..0ab9be7cf 100644\n--- a/src/main/java/org/spongepowered/common/config/category/ServicesCategory.java\n+++ b/src/main/java/org/spongepowered/common/config/category/ServicesCategory.java\n\n@@ -1,3 +1,27 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n package org.spongepowered.common.config.category;\n \n import ninja.leaping.configurate.objectmapping.Setting;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUyNDQyNQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2653#discussion_r446524425", "bodyText": "IMO this should fail, if the specified plugin does not exist or does not provide the service.\nThe admin probably selected that plugin for a reason.", "author": "ST-DDT", "createdAt": "2020-06-27T12:59:37Z", "path": "src/main/java/org/spongepowered/common/service/SpongeServiceProvider.java", "diffHunk": "@@ -0,0 +1,250 @@\n+package org.spongepowered.common.service;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.reflect.TypeToken;\n+import org.checkerframework.checker.nullness.qual.NonNull;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.spongepowered.api.Sponge;\n+import org.spongepowered.api.event.service.ProvideServiceEvent;\n+import org.spongepowered.api.service.ServiceProvider;\n+import org.spongepowered.api.service.ServiceRegistration;\n+import org.spongepowered.api.service.ban.BanService;\n+import org.spongepowered.api.service.economy.EconomyService;\n+import org.spongepowered.api.service.pagination.PaginationService;\n+import org.spongepowered.api.service.permission.PermissionService;\n+import org.spongepowered.api.service.sql.SqlService;\n+import org.spongepowered.api.service.user.UserStorageService;\n+import org.spongepowered.api.service.whitelist.WhitelistService;\n+import org.spongepowered.api.util.Tuple;\n+import org.spongepowered.common.SpongeImpl;\n+import org.spongepowered.common.config.category.ServicesCategory;\n+import org.spongepowered.common.event.SpongeEventManager;\n+import org.spongepowered.common.event.service.ProvideServiceEventImpl;\n+import org.spongepowered.common.service.ban.SpongeBanService;\n+import org.spongepowered.common.service.permission.SpongePermissionService;\n+import org.spongepowered.common.service.sql.SqlServiceImpl;\n+import org.spongepowered.common.service.user.SpongeUserStorageService;\n+import org.spongepowered.common.service.whitelist.SpongeWhitelistService;\n+import org.spongepowered.plugin.PluginContainer;\n+\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+public class SpongeServiceProvider implements ServiceProvider {\n+\n+    // Contains all the services and defaults.\n+    // Zidane, I'm sorry for the horrible type signatures. I just wanted to throw this together quickly!\n+    private static final ImmutableMap<Class<?>, Tuple<Function<ServicesCategory.ServicePluginSubCategory, String>, Supplier<?>>> AVAILABLE_SERVICES =\n+            ImmutableMap.<Class<?>, Tuple<Function<ServicesCategory.ServicePluginSubCategory, String>, Supplier<?>>>builder()\n+                    .put(BanService.class, Tuple.of(ServicesCategory.ServicePluginSubCategory::getBanService, SpongeBanService::new))\n+                    .put(EconomyService.class, Tuple.of(ServicesCategory.ServicePluginSubCategory::getEconomyService, () -> null))\n+                    // TODO: currently in invalid\n+                    .put(PaginationService.class, Tuple.of(ServicesCategory.ServicePluginSubCategory::getPaginationService, () -> null))\n+                    .put(PermissionService.class,\n+                            Tuple.of(ServicesCategory.ServicePluginSubCategory::getPermissionService, SpongePermissionService::new))\n+                    .put(SqlService.class, Tuple.of(ServicesCategory.ServicePluginSubCategory::getSqlService, SqlServiceImpl::new))\n+                    .put(UserStorageService.class,\n+                            Tuple.of(ServicesCategory.ServicePluginSubCategory::getUserStorageService, SpongeUserStorageService::new))\n+                    .put(WhitelistService.class,\n+                            Tuple.of(ServicesCategory.ServicePluginSubCategory::getWhitelistService, SpongeWhitelistService::new))\n+                    .build();\n+\n+    /**\n+     * Discovers services by querying plugins with the\n+     * {@link ProvideServiceEvent}. To be called at the appropriate moment in\n+     * the lifecycle.\n+     *\n+     * @param servicePluginSubCategory The config sub category\n+     * @return The completed provider\n+     */\n+    public static SpongeServiceProvider discoverServices(final ServicesCategory.ServicePluginSubCategory servicePluginSubCategory) {\n+        final ImmutableMap.Builder<Class<?>, Registration<?>> services = ImmutableMap.builder();\n+\n+        // We loop over all available services and try to discover each one.\n+        // This does NOT support third party service interfaces, only impls.\n+        for (final Map.Entry<Class<?>, Tuple<Function<ServicesCategory.ServicePluginSubCategory, String>, Supplier<?>>> candidate :\n+                AVAILABLE_SERVICES.entrySet()) {\n+\n+            // If the configration file has a specific plugin ID, we look for it. If it's there, we will ONLY query that\n+            // plugin.\n+            final Optional<PluginContainer> specificPluginContainer =\n+                    Sponge.getPluginManager().getPlugin(candidate.getValue().getFirst().apply(servicePluginSubCategory));\n+            final Collection<PluginContainer> toQuery =\n+                    specificPluginContainer.<Collection<PluginContainer>>map(ImmutableList::of).orElseGet(Sponge.getPluginManager()::getPlugins);", "originalCommit": "a53094421516ef92941b32ce0d94b4aab025999e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4Nzc2Mw==", "url": "https://github.com/SpongePowered/Sponge/pull/2653#discussion_r449787763", "bodyText": "Just asked @Zidane about this, we're going to print a huge warning instead.", "author": "dualspiral", "createdAt": "2020-07-04T16:47:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUyNDQyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "091290f5837dc5f413445c83c8676d9962b667f9", "chunk": "diff --git a/src/main/java/org/spongepowered/common/service/SpongeServiceProvider.java b/src/main/java/org/spongepowered/common/service/SpongeServiceProvider.java\nindex 83665721e..e600b7ef5 100644\n--- a/src/main/java/org/spongepowered/common/service/SpongeServiceProvider.java\n+++ b/src/main/java/org/spongepowered/common/service/SpongeServiceProvider.java\n\n@@ -18,7 +18,7 @@\n import org.spongepowered.api.service.user.UserStorageService;\n import org.spongepowered.api.service.whitelist.WhitelistService;\n import org.spongepowered.api.util.Tuple;\n-import org.spongepowered.common.SpongeImpl;\n+import org.spongepowered.common.SpongeCommon;\n import org.spongepowered.common.config.category.ServicesCategory;\n import org.spongepowered.common.event.SpongeEventManager;\n import org.spongepowered.common.event.service.ProvideServiceEventImpl;\n"}}, {"oid": "091290f5837dc5f413445c83c8676d9962b667f9", "url": "https://github.com/SpongePowered/Sponge/commit/091290f5837dc5f413445c83c8676d9962b667f9", "message": "Start fixing this up", "committedDate": "2020-07-02T18:35:18Z", "type": "forcePushed"}, {"oid": "0a7e3ed9193ee2bff87d20e651b4e8b2c924dcc2", "url": "https://github.com/SpongePowered/Sponge/commit/0a7e3ed9193ee2bff87d20e651b4e8b2c924dcc2", "message": "Start fixing this up", "committedDate": "2020-07-04T15:11:10Z", "type": "forcePushed"}, {"oid": "3caccd63b17627a77709c4f769e01f6a917ef3e1", "url": "https://github.com/SpongePowered/Sponge/commit/3caccd63b17627a77709c4f769e01f6a917ef3e1", "message": "Finish up service registration", "committedDate": "2020-07-04T15:39:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4NDM1Mg==", "url": "https://github.com/SpongePowered/Sponge/pull/2653#discussion_r449784352", "bodyText": "mmmh", "author": "ImMorpheus", "createdAt": "2020-07-04T16:00:55Z", "path": "vanilla/invalid/java/org/spongepowered/server/SpongeVanilla.java", "diffHunk": "@@ -179,9 +174,17 @@ public void onServerStopping() {\n     }\n \n     public void onServerStopped() throws IOException {\n+<<<<<<< HEAD\n         SpongeCommon.postState(GameState.SERVER_STOPPED, SpongeEventFactory.createGameStoppedServerEvent(Sponge.getCauseStackManager().getCurrentCause()));\n         ((SqlServiceImpl) this.game.getServiceManager().provideUnchecked(SqlService.class)).close();\n         SpongeCommon.getConfigSaveManager().flush();\n+=======\n+        SpongeImpl.postState(GameState.SERVER_STOPPED, SpongeEventFactory.createGameStoppedServerEvent(Sponge.getCauseStackManager().getCurrentCause()));\n+        if (this.game.getServiceProvider().sqlService() instanceof SqlServiceImpl) {\n+            ((SqlServiceImpl) this.game.getServiceProvider().sqlService()).close();\n+        }\n+        SpongeImpl.getConfigSaveManager().flush();\n+>>>>>>> 1762dc36f... Add entry point to service provider, make changes to support this", "originalCommit": "6022f63c6d82e274ddc4b92d400834b80a9f6935", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4NTMzNw==", "url": "https://github.com/SpongePowered/Sponge/pull/2653#discussion_r449785337", "bodyText": "At least it's invalid, though I thought I'd picked these all up.", "author": "dualspiral", "createdAt": "2020-07-04T16:14:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4NDM1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "1ea4755377afe54146289422f9dd25d97e1e5ea8", "chunk": "diff --git a/vanilla/invalid/java/org/spongepowered/server/SpongeVanilla.java b/vanilla/invalid/java/org/spongepowered/server/SpongeVanilla.java\nindex d69360bc8..0baf85b45 100644\n--- a/vanilla/invalid/java/org/spongepowered/server/SpongeVanilla.java\n+++ b/vanilla/invalid/java/org/spongepowered/server/SpongeVanilla.java\n\n@@ -174,17 +174,11 @@ public void onServerStopping() {\n     }\n \n     public void onServerStopped() throws IOException {\n-<<<<<<< HEAD\n-        SpongeCommon.postState(GameState.SERVER_STOPPED, SpongeEventFactory.createGameStoppedServerEvent(Sponge.getCauseStackManager().getCurrentCause()));\n-        ((SqlServiceImpl) this.game.getServiceManager().provideUnchecked(SqlService.class)).close();\n-        SpongeCommon.getConfigSaveManager().flush();\n-=======\n         SpongeImpl.postState(GameState.SERVER_STOPPED, SpongeEventFactory.createGameStoppedServerEvent(Sponge.getCauseStackManager().getCurrentCause()));\n         if (this.game.getServiceProvider().sqlService() instanceof SqlServiceImpl) {\n             ((SqlServiceImpl) this.game.getServiceProvider().sqlService()).close();\n         }\n         SpongeImpl.getConfigSaveManager().flush();\n->>>>>>> 1762dc36f... Add entry point to service provider, make changes to support this\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4NDcwNg==", "url": "https://github.com/SpongePowered/Sponge/pull/2653#discussion_r449784706", "bodyText": "Now that callbacks are gone can this be simplified to a bipredicate (as a lambda I mean) ?", "author": "ImMorpheus", "createdAt": "2020-07-04T16:05:32Z", "path": "src/mixins/java/org/spongepowered/common/mixin/core/service/permission/SubjectMixin.java", "diffHunk": "@@ -70,15 +70,14 @@ private void subjectConstructor(final CallbackInfo ci) {\n     @Override\n     public Optional<SubjectReference> bridge$resolveReferenceOptional() {\n         if (this.impl$subjectReference == null) {\n-            final Optional<PermissionService> serv = SpongeCommon.getGame().getServiceManager().provide(PermissionService.class);\n-            serv.ifPresent(permissionService -> new SubjectSettingCallback(this).test(permissionService));\n+            new SubjectSettingCallback(this).test(SpongeCommon.getGame().getServiceProvider().permissionService());", "originalCommit": "6022f63c6d82e274ddc4b92d400834b80a9f6935", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4NTM3Mg==", "url": "https://github.com/SpongePowered/Sponge/pull/2653#discussion_r449785372", "bodyText": "More likely to be a static method, the callback isn't really a callback anymore and we don't need to pass a method reference around.", "author": "dualspiral", "createdAt": "2020-07-04T16:15:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4NDcwNg=="}], "type": "inlineReview", "revised_code": {"commit": "1ea4755377afe54146289422f9dd25d97e1e5ea8", "chunk": "diff --git a/src/mixins/java/org/spongepowered/common/mixin/core/service/permission/SubjectMixin.java b/src/mixins/java/org/spongepowered/common/mixin/core/service/permission/SubjectMixin.java\nindex 179ef7c02..22e1762b2 100644\n--- a/src/mixins/java/org/spongepowered/common/mixin/core/service/permission/SubjectMixin.java\n+++ b/src/mixins/java/org/spongepowered/common/mixin/core/service/permission/SubjectMixin.java\n\n@@ -70,7 +68,7 @@ private void subjectConstructor(final CallbackInfo ci) {\n     @Override\n     public Optional<SubjectReference> bridge$resolveReferenceOptional() {\n         if (this.impl$subjectReference == null) {\n-            new SubjectSettingCallback(this).test(SpongeCommon.getGame().getServiceProvider().permissionService());\n+            SubjectHelper.applySubject(this);\n         }\n         return Optional.ofNullable(this.impl$subjectReference);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4NDg4Nw==", "url": "https://github.com/SpongePowered/Sponge/pull/2653#discussion_r449784887", "bodyText": "\"No provider is registered for the service '\" + service.getName() + \"'\", service\" (this is the current errore message).\nShouldn't this thrown a ProvisioningException ?", "author": "ImMorpheus", "createdAt": "2020-07-04T16:08:29Z", "path": "src/main/java/org/spongepowered/common/service/SpongeServiceProvider.java", "diffHunk": "@@ -0,0 +1,278 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.service;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.reflect.TypeToken;\n+import org.checkerframework.checker.nullness.qual.NonNull;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.spongepowered.api.Sponge;\n+import org.spongepowered.api.event.lifecycle.ProvideServiceEvent;\n+import org.spongepowered.api.service.ServiceProvider;\n+import org.spongepowered.api.service.ServiceRegistration;\n+import org.spongepowered.api.service.ban.BanService;\n+import org.spongepowered.api.service.economy.EconomyService;\n+import org.spongepowered.api.service.pagination.PaginationService;\n+import org.spongepowered.api.service.permission.PermissionService;\n+import org.spongepowered.api.service.sql.SqlService;\n+import org.spongepowered.api.service.user.UserStorageService;\n+import org.spongepowered.api.service.whitelist.WhitelistService;\n+import org.spongepowered.api.util.Tuple;\n+import org.spongepowered.common.SpongeCommon;\n+import org.spongepowered.common.config.category.ServicesCategory;\n+import org.spongepowered.common.event.SpongeEventManager;\n+import org.spongepowered.common.event.service.ProvideServiceEventImpl;\n+import org.spongepowered.common.launch.Launcher;\n+import org.spongepowered.common.service.ban.SpongeBanService;\n+import org.spongepowered.common.service.permission.SpongePermissionService;\n+import org.spongepowered.common.service.sql.SqlServiceImpl;\n+import org.spongepowered.common.service.user.SpongeUserStorageService;\n+import org.spongepowered.common.service.whitelist.SpongeWhitelistService;\n+import org.spongepowered.plugin.PluginContainer;\n+\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+public class SpongeServiceProvider implements ServiceProvider {\n+\n+    // Contains all the services and defaults.\n+    // Zidane, I'm sorry for the horrible type signatures. I just wanted to throw this together quickly!\n+    private static final ImmutableMap<Class<?>, Tuple<Function<ServicesCategory.ServicePluginSubCategory, String>, Supplier<?>>> AVAILABLE_SERVICES =\n+            ImmutableMap.<Class<?>, Tuple<Function<ServicesCategory.ServicePluginSubCategory, String>, Supplier<?>>>builder()\n+                    .put(BanService.class, Tuple.of(ServicesCategory.ServicePluginSubCategory::getBanService, SpongeBanService::new))\n+                    .put(EconomyService.class, Tuple.of(ServicesCategory.ServicePluginSubCategory::getEconomyService, () -> null))\n+                    // TODO: currently in invalid, will need doing when text comes back up\n+                    .put(PaginationService.class, Tuple.of(ServicesCategory.ServicePluginSubCategory::getPaginationService, () -> null))\n+                    .put(PermissionService.class,\n+                            Tuple.of(ServicesCategory.ServicePluginSubCategory::getPermissionService, SpongePermissionService::new))\n+                    .put(SqlService.class, Tuple.of(ServicesCategory.ServicePluginSubCategory::getSqlService, SqlServiceImpl::new))\n+                    .put(UserStorageService.class,\n+                            Tuple.of(ServicesCategory.ServicePluginSubCategory::getUserStorageService, SpongeUserStorageService::new))\n+                    .put(WhitelistService.class,\n+                            Tuple.of(ServicesCategory.ServicePluginSubCategory::getWhitelistService, SpongeWhitelistService::new))\n+                    .build();\n+\n+    /**\n+     * Discovers services by querying plugins with the\n+     * {@link ProvideServiceEvent}. To be called at the appropriate moment in\n+     * the lifecycle.\n+     *\n+     * @param servicePluginSubCategory The config sub category\n+     * @return The completed provider\n+     */\n+    public static SpongeServiceProvider discoverServices(final ServicesCategory.ServicePluginSubCategory servicePluginSubCategory) {\n+        final ImmutableMap.Builder<Class<?>, Registration<?>> services = ImmutableMap.builder();\n+\n+        // We loop over all available services and try to discover each one.\n+        // This does NOT support third party service interfaces, only impls.\n+        for (final Map.Entry<Class<?>, Tuple<Function<ServicesCategory.ServicePluginSubCategory, String>, Supplier<?>>> candidate :\n+                AVAILABLE_SERVICES.entrySet()) {\n+\n+            // If the configuration file has a specific plugin ID, we look for it. If it's there, we will ONLY query that\n+            // plugin.\n+            final Optional<PluginContainer> specificPluginContainer =\n+                    Sponge.getPluginManager().getPlugin(candidate.getValue().getFirst().apply(servicePluginSubCategory));\n+            final Collection<PluginContainer> toQuery =\n+                    specificPluginContainer.<Collection<PluginContainer>>map(ImmutableList::of).orElseGet(Sponge.getPluginManager()::getPlugins);\n+\n+            Registration<?> registration = null;\n+            final Iterator<PluginContainer> pluginContainerIterator = toQuery.iterator();\n+            while (registration == null && pluginContainerIterator.hasNext()) {\n+                final PluginContainer pluginContainer = pluginContainerIterator.next();\n+                if (!Launcher.getInstance().getLauncherPlugins().contains(pluginContainer)) {\n+                    registration = getSpecificRegistration(pluginContainer, candidate.getKey());\n+                }\n+            }\n+\n+            if (registration == null) {\n+                // If we don't have a registration, we try a Sponge one (which is lowest priority)\n+                registration = createRegistration(\n+                        candidate.getKey(),\n+                        candidate.getValue().getSecond(),\n+                        Launcher.getInstance().getCommonPlugin());\n+            }\n+\n+            // If after all that we have a registration, we... register it.\n+            if (registration != null) {\n+                services.put(candidate.getKey(), registration);\n+                SpongeCommon.getLogger().info(\"Registered service {} to plugin {}.\",\n+                        registration.clazz.getSimpleName(),\n+                        registration.pluginContainer.getMetadata().getId());\n+            }\n+        }\n+\n+        // Ta-da.\n+        return new SpongeServiceProvider(services.build());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Nullable\n+    private static <T> Registration<T> createRegistration(final Class<T> clazz, final Supplier<?> supplier, final PluginContainer container) {\n+        final T impl = (T) supplier.get();\n+        if (impl == null) {\n+            return null;\n+        }\n+        return new Registration<>(clazz, (T) supplier.get(), container);\n+    }\n+\n+    @Nullable\n+    private static <T> Registration<T> getSpecificRegistration(final PluginContainer container, final Class<T> service) {\n+        final ProvideServiceEventImpl<T> event =\n+                new ProvideServiceEventImpl<>(SpongeCommon.getCauseStackManager().getCurrentCause(), TypeToken.of(service));\n+\n+        // This is the actual query - a generic event.\n+        ((SpongeEventManager) Sponge.getEventManager()).post(event, container);\n+        if (event.getSuggestion() != null) {\n+            try {\n+                return new Registration<>(service, event.getSuggestion().get(), container);\n+            } catch (final Throwable e) { // if the service can't be created\n+                SpongeCommon.getLogger().error(\"Could not create service {} from plugin {}.\",\n+                        service.getSimpleName(),\n+                        container.getMetadata().getId(),\n+                        e);\n+                return null;\n+            }\n+        }\n+        SpongeCommon.getLogger().error(\"Could not create service {} from plugin {}, no service was provided.\", service.getSimpleName(),\n+                container.getMetadata().getId());\n+        return null;\n+    }\n+\n+    // --\n+\n+    private final Map<Class<?>, Registration<?>> services;\n+\n+    public SpongeServiceProvider(final Map<Class<?>, Registration<?>> services) {\n+        this.services = ImmutableMap.copyOf(services);\n+    }\n+\n+    @Override\n+    @NonNull\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> Optional<T> provide(@NonNull final Class<T> serviceClass) {\n+        final Registration<T> registration = (Registration<T>) this.services.get(serviceClass);\n+        if (registration != null) {\n+            return Optional.of(registration.service());\n+        }\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    @NonNull\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> Optional<ServiceRegistration<T>> getRegistration(@NonNull final Class<T> serviceClass) {\n+        return Optional.ofNullable((ServiceRegistration<T>) this.services.get(serviceClass));\n+    }\n+\n+    @NonNull\n+    @SuppressWarnings(\"unchecked\")\n+    private <T> T provideUnchecked(final Class<T> serviceClass) {\n+        final Registration<T> registration = (Registration<T>) this.services.get(serviceClass);\n+        if (registration != null) {\n+            return registration.service();\n+        }\n+        throw new IllegalStateException(\"\");", "originalCommit": "6022f63c6d82e274ddc4b92d400834b80a9f6935", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4NTcxNw==", "url": "https://github.com/SpongePowered/Sponge/pull/2653#discussion_r449785717", "bodyText": "It's probably worth noting that this is a private method, so the rationale was simply that this never should happen. So ISE is fine - the object is in an illegal state if this is called and the service isn't there.\nGiven that exception does not exist, no.", "author": "dualspiral", "createdAt": "2020-07-04T16:20:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4NDg4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4NTkyMg==", "url": "https://github.com/SpongePowered/Sponge/pull/2653#discussion_r449785922", "bodyText": "I missed the exception was remove in the API PR", "author": "ImMorpheus", "createdAt": "2020-07-04T16:22:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4NDg4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "1ea4755377afe54146289422f9dd25d97e1e5ea8", "chunk": "diff --git a/src/main/java/org/spongepowered/common/service/SpongeServiceProvider.java b/src/main/java/org/spongepowered/common/service/SpongeServiceProvider.java\nindex 4fb721328..c2a21d54b 100644\n--- a/src/main/java/org/spongepowered/common/service/SpongeServiceProvider.java\n+++ b/src/main/java/org/spongepowered/common/service/SpongeServiceProvider.java\n\n@@ -64,7 +64,6 @@\n public class SpongeServiceProvider implements ServiceProvider {\n \n     // Contains all the services and defaults.\n-    // Zidane, I'm sorry for the horrible type signatures. I just wanted to throw this together quickly!\n     private static final ImmutableMap<Class<?>, Tuple<Function<ServicesCategory.ServicePluginSubCategory, String>, Supplier<?>>> AVAILABLE_SERVICES =\n             ImmutableMap.<Class<?>, Tuple<Function<ServicesCategory.ServicePluginSubCategory, String>, Supplier<?>>>builder()\n                     .put(BanService.class, Tuple.of(ServicesCategory.ServicePluginSubCategory::getBanService, SpongeBanService::new))\n"}}, {"oid": "1ea4755377afe54146289422f9dd25d97e1e5ea8", "url": "https://github.com/SpongePowered/Sponge/commit/1ea4755377afe54146289422f9dd25d97e1e5ea8", "message": "Service registration", "committedDate": "2020-07-04T16:41:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5MTY1MQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2653#discussion_r449791651", "bodyText": "You reverted back to SpongeImpl.", "author": "Zidane", "createdAt": "2020-07-04T17:40:53Z", "path": "vanilla/invalid/java/org/spongepowered/server/SpongeVanilla.java", "diffHunk": "@@ -179,9 +174,11 @@ public void onServerStopping() {\n     }\n \n     public void onServerStopped() throws IOException {\n-        SpongeCommon.postState(GameState.SERVER_STOPPED, SpongeEventFactory.createGameStoppedServerEvent(Sponge.getCauseStackManager().getCurrentCause()));\n-        ((SqlServiceImpl) this.game.getServiceManager().provideUnchecked(SqlService.class)).close();\n-        SpongeCommon.getConfigSaveManager().flush();\n+        SpongeImpl.postState(GameState.SERVER_STOPPED, SpongeEventFactory.createGameStoppedServerEvent(Sponge.getCauseStackManager().getCurrentCause()));", "originalCommit": "534572f0c166c9ef6877edddf531efa286e112ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5MjUzNA==", "url": "https://github.com/SpongePowered/Sponge/pull/2653#discussion_r449792534", "bodyText": "Given GameState is also gone, that line might as well go.", "author": "dualspiral", "createdAt": "2020-07-04T17:53:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5MTY1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "7299241dd646f5de57e85943d59deb563c027724", "chunk": "diff --git a/vanilla/invalid/java/org/spongepowered/server/SpongeVanilla.java b/vanilla/invalid/java/org/spongepowered/server/SpongeVanilla.java\nindex 0baf85b45..908e52401 100644\n--- a/vanilla/invalid/java/org/spongepowered/server/SpongeVanilla.java\n+++ b/vanilla/invalid/java/org/spongepowered/server/SpongeVanilla.java\n\n@@ -174,7 +174,7 @@ public void onServerStopping() {\n     }\n \n     public void onServerStopped() throws IOException {\n-        SpongeImpl.postState(GameState.SERVER_STOPPED, SpongeEventFactory.createGameStoppedServerEvent(Sponge.getCauseStackManager().getCurrentCause()));\n+        SpongeCommon.postState(GameState.SERVER_STOPPED, SpongeEventFactory.createGameStoppedServerEvent(Sponge.getCauseStackManager().getCurrentCause()));\n         if (this.game.getServiceProvider().sqlService() instanceof SqlServiceImpl) {\n             ((SqlServiceImpl) this.game.getServiceProvider().sqlService()).close();\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5MTc4Nw==", "url": "https://github.com/SpongePowered/Sponge/pull/2653#discussion_r449791787", "bodyText": "Would it be worth injecting the SpongeGame instance? Would require turning these into Singletons and creating them via the injector only if you need too.", "author": "Zidane", "createdAt": "2020-07-04T17:42:52Z", "path": "src/main/java/org/spongepowered/common/service/permission/SpongePermissionService.java", "diffHunk": "@@ -66,8 +67,8 @@\n     private final SpongeSubjectCollection defaultCollection;\n     private final SpongeSubject defaultData;\n \n-    public SpongePermissionService(Game game) {\n-        this.game = game;\n+    public SpongePermissionService() {", "originalCommit": "534572f0c166c9ef6877edddf531efa286e112ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5MjYyMw==", "url": "https://github.com/SpongePowered/Sponge/pull/2653#discussion_r449792623", "bodyText": "Yes, if we're okay with passing an injector to the service provider.", "author": "dualspiral", "createdAt": "2020-07-04T17:54:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5MTc4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5MjgxOQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2653#discussion_r449792819", "bodyText": "I don't see an issue with it.", "author": "Zidane", "createdAt": "2020-07-04T17:57:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5MTc4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "7299241dd646f5de57e85943d59deb563c027724", "chunk": "diff --git a/src/main/java/org/spongepowered/common/service/permission/SpongePermissionService.java b/src/main/java/org/spongepowered/common/service/permission/SpongePermissionService.java\nindex e41535664..3a0552626 100644\n--- a/src/main/java/org/spongepowered/common/service/permission/SpongePermissionService.java\n+++ b/src/main/java/org/spongepowered/common/service/permission/SpongePermissionService.java\n\n@@ -67,8 +70,9 @@\n     private final SpongeSubjectCollection defaultCollection;\n     private final SpongeSubject defaultData;\n \n-    public SpongePermissionService() {\n-        this.game = Sponge.getGame();\n+    @Inject\n+    public SpongePermissionService(final Game game) {\n+        this.game = game;\n         this.subjects.put(SUBJECTS_DEFAULT, (this.defaultCollection = this.newCollection(SUBJECTS_DEFAULT)));\n         this.subjects.put(SUBJECTS_USER, new UserCollection(this));\n         this.subjects.put(SUBJECTS_GROUP, new OpLevelCollection(this));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5MjExNQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2653#discussion_r449792115", "bodyText": "I like final things.", "author": "Zidane", "createdAt": "2020-07-04T17:47:43Z", "path": "src/main/java/org/spongepowered/common/event/service/ProvideServiceEventImpl.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.event.service;\n+\n+import com.google.common.reflect.TypeToken;\n+import org.checkerframework.checker.nullness.qual.NonNull;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.spongepowered.api.event.cause.Cause;\n+import org.spongepowered.api.event.lifecycle.ProvideServiceEvent;\n+\n+import java.util.function.Supplier;\n+\n+// Specialised logic is required for this.\n+public class ProvideServiceEventImpl<T> implements ProvideServiceEvent<T> {", "originalCommit": "534572f0c166c9ef6877edddf531efa286e112ad", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7299241dd646f5de57e85943d59deb563c027724", "chunk": "diff --git a/src/main/java/org/spongepowered/common/event/service/ProvideServiceEventImpl.java b/src/main/java/org/spongepowered/common/event/lifecycle/ProvideServiceEventImpl.java\nsimilarity index 87%\nrename from src/main/java/org/spongepowered/common/event/service/ProvideServiceEventImpl.java\nrename to src/main/java/org/spongepowered/common/event/lifecycle/ProvideServiceEventImpl.java\nindex 9545bd407..7faed6e2a 100644\n--- a/src/main/java/org/spongepowered/common/event/service/ProvideServiceEventImpl.java\n+++ b/src/main/java/org/spongepowered/common/event/lifecycle/ProvideServiceEventImpl.java\n\n@@ -22,26 +22,29 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n-package org.spongepowered.common.event.service;\n+package org.spongepowered.common.event.lifecycle;\n \n import com.google.common.reflect.TypeToken;\n import org.checkerframework.checker.nullness.qual.NonNull;\n import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.spongepowered.api.Game;\n import org.spongepowered.api.event.cause.Cause;\n import org.spongepowered.api.event.lifecycle.ProvideServiceEvent;\n \n import java.util.function.Supplier;\n \n // Specialised logic is required for this.\n-public class ProvideServiceEventImpl<T> implements ProvideServiceEvent<T> {\n+public final class ProvideServiceEventImpl<T> implements ProvideServiceEvent<T> {\n \n     private final Cause cause;\n     private final TypeToken<T> genericType;\n+    private final Game game;\n     @Nullable private Supplier<T> serviceFactory;\n \n-    public ProvideServiceEventImpl(final Cause cause, final TypeToken<T> genericType) {\n+    public ProvideServiceEventImpl(final Cause cause, final TypeToken<T> genericType, final Game game) {\n         this.cause = cause;\n         this.genericType = genericType;\n+        this.game = game;\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5MjE0NQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2653#discussion_r449792145", "bodyText": "I like final things.", "author": "Zidane", "createdAt": "2020-07-04T17:48:00Z", "path": "src/main/java/org/spongepowered/common/config/category/ServicesCategory.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.config.category;\n+\n+import ninja.leaping.configurate.objectmapping.Setting;\n+import ninja.leaping.configurate.objectmapping.serialize.ConfigSerializable;\n+\n+@ConfigSerializable\n+public class ServicesCategory extends ConfigCategory {", "originalCommit": "534572f0c166c9ef6877edddf531efa286e112ad", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7299241dd646f5de57e85943d59deb563c027724", "chunk": "diff --git a/src/main/java/org/spongepowered/common/config/category/ServicesCategory.java b/src/main/java/org/spongepowered/common/config/category/ServicesCategory.java\nindex 0ab9be7cf..f1a920624 100644\n--- a/src/main/java/org/spongepowered/common/config/category/ServicesCategory.java\n+++ b/src/main/java/org/spongepowered/common/config/category/ServicesCategory.java\n\n@@ -28,7 +28,7 @@\n import ninja.leaping.configurate.objectmapping.serialize.ConfigSerializable;\n \n @ConfigSerializable\n-public class ServicesCategory extends ConfigCategory {\n+public final class ServicesCategory extends ConfigCategory {\n \n     @Setting(value = \"service-plugin\",\n             comment = \"Services specified here can be implemented by plugins. To ensure that a\"\n"}}, {"oid": "7299241dd646f5de57e85943d59deb563c027724", "url": "https://github.com/SpongePowered/Sponge/commit/7299241dd646f5de57e85943d59deb563c027724", "message": "Update ServiceProvider to be injector supported.", "committedDate": "2020-07-08T17:06:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc1MTE2Mw==", "url": "https://github.com/SpongePowered/Sponge/pull/2653#discussion_r451751163", "bodyText": "SqlService is dead", "author": "ImMorpheus", "createdAt": "2020-07-08T18:40:16Z", "path": "src/main/java/org/spongepowered/common/config/category/ServicesCategory.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.config.category;\n+\n+import ninja.leaping.configurate.objectmapping.Setting;\n+import ninja.leaping.configurate.objectmapping.serialize.ConfigSerializable;\n+\n+@ConfigSerializable\n+public final class ServicesCategory extends ConfigCategory {\n+\n+    @Setting(value = \"service-plugin\",\n+            comment = \"Services specified here can be implemented by plugins. To ensure that a\"\n+                    + \"specific plugin implements a given service, set the relevant option to its\"\n+                    + \"plugin ID. If you wish to use Sponge's default for a given service, use\"\n+                    + \"'sponge' as the ID.\\n\\n\"\n+                    + \"If the plugin ID is unknown, or the option is set to '?', all plugins will\"\n+                    + \"be given the opportunity to register their service. If multiple plugins\"\n+                    + \"attempt to register, one will be picked in an implementation dependent way.\"\n+                    + \"If no plugins attempt to register a service, the Sponge default will be used\"\n+                    + \"if one exists.\\n\\n\"\n+                    + \"No Sponge default service exists for the Economy service.\")\n+    private ServicePluginSubCategory servicePlugin = new ServicePluginSubCategory();\n+\n+    public ServicePluginSubCategory getServicePlugin() {\n+        return this.servicePlugin;\n+    }\n+\n+    @ConfigSerializable\n+    public static final class ServicePluginSubCategory {\n+\n+        @Setting(value = \"ban-service\", comment = \"Specifies the plugin that will provide the ban service\")\n+        private String banService = \"?\";\n+\n+        @Setting(value = \"economy-service\", comment = \"Specifies the plugin that will provide the economy service\")\n+        private String economyService = \"?\";\n+\n+        @Setting(value = \"pagination-service\", comment = \"Specifies the plugin that will provide the pagination service\")\n+        private String paginationService = \"?\";\n+\n+        @Setting(value = \"permission-service\", comment = \"Specifies the plugin that will provide the permission service\")\n+        private String permissionService = \"?\";\n+\n+        @Setting(value = \"sql-service\", comment = \"Specifies the plugin that will provide the SQL service\")", "originalCommit": "72582947566c9e7ff6d756a57941097a8dfd8927", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc2MzM2OA==", "url": "https://github.com/SpongePowered/Sponge/pull/2653#discussion_r451763368", "bodyText": "Good spot.", "author": "dualspiral", "createdAt": "2020-07-08T19:02:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc1MTE2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "866605d041359f74c3a72f76fba8fa534b545d79", "chunk": "diff --git a/src/main/java/org/spongepowered/common/config/category/ServicesCategory.java b/src/main/java/org/spongepowered/common/config/category/ServicesCategory.java\nindex f1a920624..e35336638 100644\n--- a/src/main/java/org/spongepowered/common/config/category/ServicesCategory.java\n+++ b/src/main/java/org/spongepowered/common/config/category/ServicesCategory.java\n\n@@ -62,9 +62,6 @@ public ServicePluginSubCategory getServicePlugin() {\n         @Setting(value = \"permission-service\", comment = \"Specifies the plugin that will provide the permission service\")\n         private String permissionService = \"?\";\n \n-        @Setting(value = \"sql-service\", comment = \"Specifies the plugin that will provide the SQL service\")\n-        private String sqlService = \"?\";\n-\n         @Setting(value = \"user-storage-service\", comment = \"Specifies the plugin that will provide the user storage service\")\n         private String userStorageService = \"?\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc1MzE4Ng==", "url": "https://github.com/SpongePowered/Sponge/pull/2653#discussion_r451753186", "bodyText": "This was causing a big performance issue in api7.\nIt should use the user storage service when the world is not fake (not the opposite).\n(see ChunkMixin_Tracker)", "author": "ImMorpheus", "createdAt": "2020-07-08T18:43:48Z", "path": "src/mixins/java/org/spongepowered/common/mixin/tracker/world/chunk/ChunkMixin_OwnershipTracked.java", "diffHunk": "@@ -88,7 +88,9 @@\n             + \"/function/Consumer;)V\", at = @At(\"RETURN\"))\n     private void tracker$setUpUserService(final World world, final ChunkPos pos, final Biome[] biomes, final UpgradeData data, final ITickList<Block> blockTickList,\n                                           final ITickList<Fluid> fluidTickList, final long inhabitedTime, final ChunkSection[] sections, final Consumer<Chunk> chunkConsumer, final CallbackInfo ci) {\n-        this.tracker$userStorageService = world != null && !((WorldBridge) world).bridge$isFake() ? null : Sponge.getServiceProvider().userStorageService();\n+        this.tracker$userStorageService = world != null && !((WorldBridge) world).bridge$isFake()\n+                                  ? null\n+                                  : SpongeCommon.getGame().getServiceProvider().userStorageService();", "originalCommit": "72582947566c9e7ff6d756a57941097a8dfd8927", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc2MzIzMg==", "url": "https://github.com/SpongePowered/Sponge/pull/2653#discussion_r451763232", "bodyText": "I'm not interested in making logic changes outside the replacement of the service system in this PR because otherwise it'll never end.", "author": "dualspiral", "createdAt": "2020-07-08T19:02:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc1MzE4Ng=="}], "type": "inlineReview", "revised_code": null}, {"oid": "866605d041359f74c3a72f76fba8fa534b545d79", "url": "https://github.com/SpongePowered/Sponge/commit/866605d041359f74c3a72f76fba8fa534b545d79", "message": "Service registration\n\nUpdate the provider to be easier to follow, and add \"big fat warnings\" when things don't go right.", "committedDate": "2020-07-08T19:38:20Z", "type": "forcePushed"}, {"oid": "e3781d0bfe3bc22530b6ea0510e8006d88ee3305", "url": "https://github.com/SpongePowered/Sponge/commit/e3781d0bfe3bc22530b6ea0510e8006d88ee3305", "message": "Service registration\n\nUpdate the provider to be easier to follow, and add \"big fat warnings\" when things don't go right.", "committedDate": "2020-07-08T19:39:06Z", "type": "forcePushed"}, {"oid": "6d6757687eb950bd5d65163ada5a6931ea7f0f30", "url": "https://github.com/SpongePowered/Sponge/commit/6d6757687eb950bd5d65163ada5a6931ea7f0f30", "message": "Service registration\n\nUpdate the provider to be easier to follow, and add \"big fat warnings\" when things don't go right.", "committedDate": "2020-07-08T19:43:41Z", "type": "commit"}, {"oid": "6d6757687eb950bd5d65163ada5a6931ea7f0f30", "url": "https://github.com/SpongePowered/Sponge/commit/6d6757687eb950bd5d65163ada5a6931ea7f0f30", "message": "Service registration\n\nUpdate the provider to be easier to follow, and add \"big fat warnings\" when things don't go right.", "committedDate": "2020-07-08T19:43:41Z", "type": "forcePushed"}]}