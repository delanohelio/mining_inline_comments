{"pr_number": 2523, "pr_title": "Add support of offering ConnectedDirectionsData for some block states", "pr_createdAt": "2020-03-01T01:01:37Z", "pr_url": "https://github.com/SpongePowered/Sponge/pull/2523", "timeline": [{"oid": "da0e6726066be01a95504b84b0760666e7ae5153", "url": "https://github.com/SpongePowered/Sponge/commit/da0e6726066be01a95504b84b0760666e7ae5153", "message": "Add support of offering ConnectedDirectionsData for block states", "committedDate": "2020-04-05T10:41:33Z", "type": "forcePushed"}, {"oid": "30aedc4b7bcdcafb6f6ef2b962d412d3a36a92ee", "url": "https://github.com/SpongePowered/Sponge/commit/30aedc4b7bcdcafb6f6ef2b962d412d3a36a92ee", "message": "Unify \"applyConnectedDirections\" method", "committedDate": "2020-04-05T11:51:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1MDg0Mw==", "url": "https://github.com/SpongePowered/Sponge/pull/2523#discussion_r403750843", "bodyText": "I'd rather not have a static field at all. Also, the field needs to be prefixed according to the naming standards for mixin-added-by-sponge names, i.e. impl$DIRECTION_TO_PROPERTY_MAPPING.", "author": "gabizou", "createdAt": "2020-04-05T20:10:31Z", "path": "src/main/java/org/spongepowered/common/mixin/core/block/BlockFenceMixin.java", "diffHunk": "@@ -37,14 +39,27 @@\n import org.spongepowered.asm.mixin.Mixin;\n import org.spongepowered.common.data.ImmutableDataCachingUtil;\n import org.spongepowered.common.data.manipulator.immutable.block.ImmutableSpongeConnectedDirectionData;\n+import org.spongepowered.common.util.DirectionalBlockUtils;\n \n import java.util.HashSet;\n+import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n \n @Mixin(BlockFence.class)\n public abstract class BlockFenceMixin extends BlockMixin {\n \n+    private static final Map<Direction, PropertyBool> DIRECTION_TO_PROPERTY_MAPPING;", "originalCommit": "30aedc4b7bcdcafb6f6ef2b962d412d3a36a92ee", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3680e2d81492381ed896a069edd9be9383435150", "chunk": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/block/BlockFenceMixin.java b/src/main/java/org/spongepowered/common/mixin/core/block/BlockFenceMixin.java\nindex 5896960e4..5606f98ac 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/block/BlockFenceMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/block/BlockFenceMixin.java\n\n@@ -39,8 +38,9 @@\n import org.spongepowered.asm.mixin.Mixin;\n import org.spongepowered.common.data.ImmutableDataCachingUtil;\n import org.spongepowered.common.data.manipulator.immutable.block.ImmutableSpongeConnectedDirectionData;\n-import org.spongepowered.common.util.DirectionalBlockUtils;\n+import org.spongepowered.common.util.Constants;\n \n+import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Map;\n import java.util.Optional;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1MDg3Ng==", "url": "https://github.com/SpongePowered/Sponge/pull/2523#discussion_r403750876", "bodyText": "This really should not be statically initialized, I'd rather a constructor injection to initialize the field.", "author": "gabizou", "createdAt": "2020-04-05T20:10:57Z", "path": "src/main/java/org/spongepowered/common/mixin/core/block/BlockFenceMixin.java", "diffHunk": "@@ -37,14 +39,27 @@\n import org.spongepowered.asm.mixin.Mixin;\n import org.spongepowered.common.data.ImmutableDataCachingUtil;\n import org.spongepowered.common.data.manipulator.immutable.block.ImmutableSpongeConnectedDirectionData;\n+import org.spongepowered.common.util.DirectionalBlockUtils;\n \n import java.util.HashSet;\n+import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n \n @Mixin(BlockFence.class)\n public abstract class BlockFenceMixin extends BlockMixin {\n \n+    private static final Map<Direction, PropertyBool> DIRECTION_TO_PROPERTY_MAPPING;\n+\n+    static {\n+        ImmutableMap.Builder<Direction, PropertyBool> directionToPropertyMappingBuilder = ImmutableMap.builder();", "originalCommit": "30aedc4b7bcdcafb6f6ef2b962d412d3a36a92ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1MjY4NQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2523#discussion_r403752685", "bodyText": "So you suggest using a non-static field? But this field is not an object property in any way in terms of OOP, purely supporting information. Or did I misunderstand you?", "author": "Lignium", "createdAt": "2020-04-05T20:26:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1MDg3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYwNDEyNw==", "url": "https://github.com/SpongePowered/Sponge/pull/2523#discussion_r431604127", "bodyText": "If it's not static to the Block itself, and it's something as a translation, then there's a TypeProvider bit of the registry implementation, and there's also Constants that can contain these type mappings where you can make some better static constants like this rather than in the mixin itself.", "author": "gabizou", "createdAt": "2020-05-28T06:16:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1MDg3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "3680e2d81492381ed896a069edd9be9383435150", "chunk": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/block/BlockFenceMixin.java b/src/main/java/org/spongepowered/common/mixin/core/block/BlockFenceMixin.java\nindex 5896960e4..5606f98ac 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/block/BlockFenceMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/block/BlockFenceMixin.java\n\n@@ -39,8 +38,9 @@\n import org.spongepowered.asm.mixin.Mixin;\n import org.spongepowered.common.data.ImmutableDataCachingUtil;\n import org.spongepowered.common.data.manipulator.immutable.block.ImmutableSpongeConnectedDirectionData;\n-import org.spongepowered.common.util.DirectionalBlockUtils;\n+import org.spongepowered.common.util.Constants;\n \n+import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Map;\n import java.util.Optional;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1MDkyMg==", "url": "https://github.com/SpongePowered/Sponge/pull/2523#discussion_r403750922", "bodyText": "Don't align multi-line like this, just indent on continuation.", "author": "gabizou", "createdAt": "2020-04-05T20:11:27Z", "path": "src/main/java/org/spongepowered/common/mixin/core/block/BlockFenceMixin.java", "diffHunk": "@@ -59,16 +74,33 @@\n     @Override\n     public Optional<BlockState> bridge$getStateWithData(final IBlockState blockState, final ImmutableDataManipulator<?, ?> manipulator) {\n         if (manipulator instanceof ImmutableConnectedDirectionData) {\n-            return Optional.of((BlockState) blockState);\n+            ImmutableConnectedDirectionData connectedDirectionData = (ImmutableConnectedDirectionData) manipulator;\n+            return Optional.of((BlockState) DirectionalBlockUtils.applyConnectedDirections(blockState,\n+                                                                                           DIRECTION_TO_PROPERTY_MAPPING,", "originalCommit": "30aedc4b7bcdcafb6f6ef2b962d412d3a36a92ee", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3680e2d81492381ed896a069edd9be9383435150", "chunk": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/block/BlockFenceMixin.java b/src/main/java/org/spongepowered/common/mixin/core/block/BlockFenceMixin.java\nindex 5896960e4..5606f98ac 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/block/BlockFenceMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/block/BlockFenceMixin.java\n\n@@ -71,15 +60,27 @@\n         return ImmutableConnectedDirectionData.class.isAssignableFrom(immutable);\n     }\n \n+    private IBlockState impl$applyConnectedDirections(final IBlockState blockState, final Set<Direction> directions) {\n+        final Map<PropertyBool, Boolean> facingStates = new HashMap<>();\n+        for (PropertyBool property : Constants.DirectionFunctions.Fence.ALL_DIRECTION_PROPERTIES) {\n+            facingStates.put(property, false);\n+        }\n+        for (Direction connectedDirection : directions) {\n+            final Optional<PropertyBool> facingPropertyBox = Constants.DirectionFunctions.Fence.getPropertyFromDirection(connectedDirection);\n+            facingPropertyBox.ifPresent(facingProperty -> facingStates.put(facingProperty, true));\n+        }\n+        IBlockState resultBlockState = blockState;\n+        for (PropertyBool property : facingStates.keySet()) {\n+            resultBlockState = resultBlockState.withProperty(property, facingStates.get(property));\n+        }\n+        return resultBlockState;\n+    }\n+\n     @Override\n     public Optional<BlockState> bridge$getStateWithData(final IBlockState blockState, final ImmutableDataManipulator<?, ?> manipulator) {\n         if (manipulator instanceof ImmutableConnectedDirectionData) {\n-            ImmutableConnectedDirectionData connectedDirectionData = (ImmutableConnectedDirectionData) manipulator;\n-            return Optional.of((BlockState) DirectionalBlockUtils.applyConnectedDirections(blockState,\n-                                                                                           DIRECTION_TO_PROPERTY_MAPPING,\n-                                                                                           (sourceBlockState, property) -> true,\n-                                                                                           (sourceBlockState, property) -> false,\n-                                                                                           connectedDirectionData.connectedDirections().get()));\n+            final ImmutableConnectedDirectionData connectedDirectionData = (ImmutableConnectedDirectionData) manipulator;\n+            return Optional.of((BlockState) impl$applyConnectedDirections(blockState, connectedDirectionData.connectedDirections().get()));\n         }\n         return super.bridge$getStateWithData(blockState, manipulator);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1MDk0OQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2523#discussion_r403750949", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        ImmutableConnectedDirectionData connectedDirectionData = (ImmutableConnectedDirectionData) manipulator;\n          \n          \n            \n                        final ImmutableConnectedDirectionData connectedDirectionData = (ImmutableConnectedDirectionData) manipulator;", "author": "gabizou", "createdAt": "2020-04-05T20:11:37Z", "path": "src/main/java/org/spongepowered/common/mixin/core/block/BlockFenceMixin.java", "diffHunk": "@@ -59,16 +74,33 @@\n     @Override\n     public Optional<BlockState> bridge$getStateWithData(final IBlockState blockState, final ImmutableDataManipulator<?, ?> manipulator) {\n         if (manipulator instanceof ImmutableConnectedDirectionData) {\n-            return Optional.of((BlockState) blockState);\n+            ImmutableConnectedDirectionData connectedDirectionData = (ImmutableConnectedDirectionData) manipulator;", "originalCommit": "30aedc4b7bcdcafb6f6ef2b962d412d3a36a92ee", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3680e2d81492381ed896a069edd9be9383435150", "chunk": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/block/BlockFenceMixin.java b/src/main/java/org/spongepowered/common/mixin/core/block/BlockFenceMixin.java\nindex 5896960e4..5606f98ac 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/block/BlockFenceMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/block/BlockFenceMixin.java\n\n@@ -71,15 +60,27 @@\n         return ImmutableConnectedDirectionData.class.isAssignableFrom(immutable);\n     }\n \n+    private IBlockState impl$applyConnectedDirections(final IBlockState blockState, final Set<Direction> directions) {\n+        final Map<PropertyBool, Boolean> facingStates = new HashMap<>();\n+        for (PropertyBool property : Constants.DirectionFunctions.Fence.ALL_DIRECTION_PROPERTIES) {\n+            facingStates.put(property, false);\n+        }\n+        for (Direction connectedDirection : directions) {\n+            final Optional<PropertyBool> facingPropertyBox = Constants.DirectionFunctions.Fence.getPropertyFromDirection(connectedDirection);\n+            facingPropertyBox.ifPresent(facingProperty -> facingStates.put(facingProperty, true));\n+        }\n+        IBlockState resultBlockState = blockState;\n+        for (PropertyBool property : facingStates.keySet()) {\n+            resultBlockState = resultBlockState.withProperty(property, facingStates.get(property));\n+        }\n+        return resultBlockState;\n+    }\n+\n     @Override\n     public Optional<BlockState> bridge$getStateWithData(final IBlockState blockState, final ImmutableDataManipulator<?, ?> manipulator) {\n         if (manipulator instanceof ImmutableConnectedDirectionData) {\n-            ImmutableConnectedDirectionData connectedDirectionData = (ImmutableConnectedDirectionData) manipulator;\n-            return Optional.of((BlockState) DirectionalBlockUtils.applyConnectedDirections(blockState,\n-                                                                                           DIRECTION_TO_PROPERTY_MAPPING,\n-                                                                                           (sourceBlockState, property) -> true,\n-                                                                                           (sourceBlockState, property) -> false,\n-                                                                                           connectedDirectionData.connectedDirections().get()));\n+            final ImmutableConnectedDirectionData connectedDirectionData = (ImmutableConnectedDirectionData) manipulator;\n+            return Optional.of((BlockState) impl$applyConnectedDirections(blockState, connectedDirectionData.connectedDirections().get()));\n         }\n         return super.bridge$getStateWithData(blockState, manipulator);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1MTAwMQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2523#discussion_r403751001", "bodyText": "Same with this. Don't indent to align.", "author": "gabizou", "createdAt": "2020-04-05T20:12:03Z", "path": "src/main/java/org/spongepowered/common/mixin/core/block/BlockFenceMixin.java", "diffHunk": "@@ -59,16 +74,33 @@\n     @Override\n     public Optional<BlockState> bridge$getStateWithData(final IBlockState blockState, final ImmutableDataManipulator<?, ?> manipulator) {\n         if (manipulator instanceof ImmutableConnectedDirectionData) {\n-            return Optional.of((BlockState) blockState);\n+            ImmutableConnectedDirectionData connectedDirectionData = (ImmutableConnectedDirectionData) manipulator;\n+            return Optional.of((BlockState) DirectionalBlockUtils.applyConnectedDirections(blockState,\n+                                                                                           DIRECTION_TO_PROPERTY_MAPPING,\n+                                                                                           (sourceBlockState, property) -> true,\n+                                                                                           (sourceBlockState, property) -> false,\n+                                                                                           connectedDirectionData.connectedDirections().get()));\n         }\n         return super.bridge$getStateWithData(blockState, manipulator);\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public <E> Optional<BlockState> bridge$getStateWithValue(final IBlockState blockState, final Key<? extends BaseValue<E>> key, final E value) {\n-        if (key.equals(Keys.CONNECTED_DIRECTIONS) || key.equals(Keys.CONNECTED_EAST) || key.equals(Keys.CONNECTED_NORTH)\n-                || key.equals(Keys.CONNECTED_SOUTH) || key.equals(Keys.CONNECTED_WEST)) {\n-            return Optional.of((BlockState) blockState);\n+        if (key.equals(Keys.CONNECTED_DIRECTIONS)) {\n+            return Optional.of((BlockState) DirectionalBlockUtils.applyConnectedDirections(blockState,\n+                                                                                           DIRECTION_TO_PROPERTY_MAPPING,", "originalCommit": "30aedc4b7bcdcafb6f6ef2b962d412d3a36a92ee", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3680e2d81492381ed896a069edd9be9383435150", "chunk": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/block/BlockFenceMixin.java b/src/main/java/org/spongepowered/common/mixin/core/block/BlockFenceMixin.java\nindex 5896960e4..5606f98ac 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/block/BlockFenceMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/block/BlockFenceMixin.java\n\n@@ -71,15 +60,27 @@\n         return ImmutableConnectedDirectionData.class.isAssignableFrom(immutable);\n     }\n \n+    private IBlockState impl$applyConnectedDirections(final IBlockState blockState, final Set<Direction> directions) {\n+        final Map<PropertyBool, Boolean> facingStates = new HashMap<>();\n+        for (PropertyBool property : Constants.DirectionFunctions.Fence.ALL_DIRECTION_PROPERTIES) {\n+            facingStates.put(property, false);\n+        }\n+        for (Direction connectedDirection : directions) {\n+            final Optional<PropertyBool> facingPropertyBox = Constants.DirectionFunctions.Fence.getPropertyFromDirection(connectedDirection);\n+            facingPropertyBox.ifPresent(facingProperty -> facingStates.put(facingProperty, true));\n+        }\n+        IBlockState resultBlockState = blockState;\n+        for (PropertyBool property : facingStates.keySet()) {\n+            resultBlockState = resultBlockState.withProperty(property, facingStates.get(property));\n+        }\n+        return resultBlockState;\n+    }\n+\n     @Override\n     public Optional<BlockState> bridge$getStateWithData(final IBlockState blockState, final ImmutableDataManipulator<?, ?> manipulator) {\n         if (manipulator instanceof ImmutableConnectedDirectionData) {\n-            ImmutableConnectedDirectionData connectedDirectionData = (ImmutableConnectedDirectionData) manipulator;\n-            return Optional.of((BlockState) DirectionalBlockUtils.applyConnectedDirections(blockState,\n-                                                                                           DIRECTION_TO_PROPERTY_MAPPING,\n-                                                                                           (sourceBlockState, property) -> true,\n-                                                                                           (sourceBlockState, property) -> false,\n-                                                                                           connectedDirectionData.connectedDirections().get()));\n+            final ImmutableConnectedDirectionData connectedDirectionData = (ImmutableConnectedDirectionData) manipulator;\n+            return Optional.of((BlockState) impl$applyConnectedDirections(blockState, connectedDirectionData.connectedDirections().get()));\n         }\n         return super.bridge$getStateWithData(blockState, manipulator);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1MTE0OQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2523#discussion_r403751149", "bodyText": "Don't make new utils. Put it in an existing utils class.", "author": "gabizou", "createdAt": "2020-04-05T20:13:06Z", "path": "src/main/java/org/spongepowered/common/util/DirectionalBlockUtils.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.util;\n+\n+import net.minecraft.block.properties.IProperty;\n+import net.minecraft.block.state.IBlockState;\n+import org.spongepowered.api.util.Direction;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.BiFunction;\n+\n+public final class DirectionalBlockUtils {", "originalCommit": "30aedc4b7bcdcafb6f6ef2b962d412d3a36a92ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1MjgxMA==", "url": "https://github.com/SpongePowered/Sponge/pull/2523#discussion_r403752810", "bodyText": "Where, for example? I tried to find something suitable, but got confused. I'm not good at codebase yet.\nUPD: Constants.DirectionFunctions would be a good choice?", "author": "Lignium", "createdAt": "2020-04-05T20:27:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1MTE0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "3680e2d81492381ed896a069edd9be9383435150", "chunk": "diff --git a/src/main/java/org/spongepowered/common/util/DirectionalBlockUtils.java b/src/main/java/org/spongepowered/common/util/DirectionalBlockUtils.java\ndeleted file mode 100644\nindex b37164949..000000000\n--- a/src/main/java/org/spongepowered/common/util/DirectionalBlockUtils.java\n+++ /dev/null\n\n@@ -1,63 +0,0 @@\n-/*\n- * This file is part of Sponge, licensed under the MIT License (MIT).\n- *\n- * Copyright (c) SpongePowered <https://www.spongepowered.org>\n- * Copyright (c) contributors\n- *\n- * Permission is hereby granted, free of charge, to any person obtaining a copy\n- * of this software and associated documentation files (the \"Software\"), to deal\n- * in the Software without restriction, including without limitation the rights\n- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n- * copies of the Software, and to permit persons to whom the Software is\n- * furnished to do so, subject to the following conditions:\n- *\n- * The above copyright notice and this permission notice shall be included in\n- * all copies or substantial portions of the Software.\n- *\n- * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n- * THE SOFTWARE.\n- */\n-package org.spongepowered.common.util;\n-\n-import net.minecraft.block.properties.IProperty;\n-import net.minecraft.block.state.IBlockState;\n-import org.spongepowered.api.util.Direction;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.function.BiFunction;\n-\n-public final class DirectionalBlockUtils {\n-\n-    private DirectionalBlockUtils() {\n-    }\n-\n-    public static <V extends Comparable<V>, P extends IProperty<V>>\n-                  IBlockState applyConnectedDirections(IBlockState blockState,\n-                                                       Map<Direction, P> mapping,\n-                                                       BiFunction<IBlockState, P, V> setValueResolver,\n-                                                       BiFunction<IBlockState, P, V> resetValueResolver,\n-                                                       Set<Direction> directions) {\n-        Map<P, V> facingStates = new HashMap<>();\n-        for (P property: mapping.values()) {\n-            facingStates.put(property, resetValueResolver.apply(blockState, property));\n-        }\n-        for (Direction connectedDirection: directions) {\n-            if (connectedDirection.isCardinal()) {\n-                P facingProperty = mapping.get(connectedDirection);\n-                facingStates.put(facingProperty, setValueResolver.apply(blockState, facingProperty));\n-            }\n-        }\n-        IBlockState resultBlockState = blockState;\n-        for (P property: facingStates.keySet()) {\n-            resultBlockState = resultBlockState.withProperty(property, facingStates.get(property));\n-        }\n-        return resultBlockState;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYwNTQ5Mw==", "url": "https://github.com/SpongePowered/Sponge/pull/2523#discussion_r431605493", "bodyText": "Pretty much all the mappings for the specific block types can exist in here, or as a type provider. That's what I mean by reducing the amount of static usage in the mixins themselves.", "author": "gabizou", "createdAt": "2020-05-28T06:21:02Z", "path": "src/main/java/org/spongepowered/common/util/Constants.java", "diffHunk": "@@ -1358,5 +1364,25 @@ public static Axis convertAxisToSponge(final EnumFacing.Axis axis) {\n                     return Axis.X;\n             }\n         }\n+", "originalCommit": "1205bda6ed66f3b1351bb2aeedc521f8d265268e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3680e2d81492381ed896a069edd9be9383435150", "chunk": "diff --git a/src/main/java/org/spongepowered/common/util/Constants.java b/src/main/java/org/spongepowered/common/util/Constants.java\nindex 09d44962d..fcda967ac 100644\n--- a/src/main/java/org/spongepowered/common/util/Constants.java\n+++ b/src/main/java/org/spongepowered/common/util/Constants.java\n\n@@ -1365,24 +1370,130 @@ public static Axis convertAxisToSponge(final EnumFacing.Axis axis) {\n             }\n         }\n \n-        public static <V extends Comparable<V>, P extends IProperty<V>> IBlockState applyConnectedDirections(IBlockState blockState,\n-                        Map<Direction, P> mapping, BiFunction<IBlockState, P, V> setValueResolver, BiFunction<IBlockState, P, V> resetValueResolver,\n-                        Set<Direction> directions) {\n-            Map<P, V> facingStates = new HashMap<>();\n-            for (P property : mapping.values()) {\n-                facingStates.put(property, resetValueResolver.apply(blockState, property));\n+        public static final class Fence {\n+\n+            public static final Set<PropertyBool> ALL_DIRECTION_PROPERTIES =\n+                    ImmutableSet.of(BlockFence.NORTH, BlockFence.SOUTH, BlockFence.WEST, BlockFence.EAST);\n+\n+            public static Optional<PropertyBool> getPropertyFromDirection(final Direction direction) {\n+                switch (direction) {\n+                    case NORTH:\n+                        return Optional.of(BlockFence.NORTH);\n+                    case SOUTH:\n+                        return Optional.of(BlockFence.SOUTH);\n+                    case WEST:\n+                        return Optional.of(BlockFence.WEST);\n+                    case EAST:\n+                        return Optional.of(BlockFence.EAST);\n+                    default:\n+                        return Optional.empty();\n+                }\n+            }\n+        }\n+\n+        public static final class Pane {\n+\n+            public static final Set<PropertyBool> ALL_DIRECTION_PROPERTIES =\n+                    ImmutableSet.of(BlockPane.NORTH, BlockPane.SOUTH, BlockPane.WEST, BlockPane.EAST);\n+\n+            public static Optional<PropertyBool> getPropertyFromDirection(final Direction direction) {\n+                switch (direction) {\n+                    case NORTH:\n+                        return Optional.of(BlockPane.NORTH);\n+                    case SOUTH:\n+                        return Optional.of(BlockPane.SOUTH);\n+                    case WEST:\n+                        return Optional.of(BlockPane.WEST);\n+                    case EAST:\n+                        return Optional.of(BlockPane.EAST);\n+                    default:\n+                        return Optional.empty();\n+                }\n+            }\n+        }\n+\n+        public static final class RedstoneWire {\n+\n+            public static final Set<PropertyEnum<BlockRedstoneWire.EnumAttachPosition>> ALL_DIRECTION_PROPERTIES =\n+                    ImmutableSet.of(BlockRedstoneWire.NORTH, BlockRedstoneWire.SOUTH, BlockRedstoneWire.WEST, BlockRedstoneWire.EAST);\n+\n+            public static Optional<PropertyEnum<BlockRedstoneWire.EnumAttachPosition>> getPropertyFromDirection(final Direction direction) {\n+                switch (direction) {\n+                    case NORTH:\n+                        return Optional.of(BlockRedstoneWire.NORTH);\n+                    case SOUTH:\n+                        return Optional.of(BlockRedstoneWire.SOUTH);\n+                    case WEST:\n+                        return Optional.of(BlockRedstoneWire.WEST);\n+                    case EAST:\n+                        return Optional.of(BlockRedstoneWire.EAST);\n+                    default:\n+                        return Optional.empty();\n+                }\n             }\n-            for (Direction connectedDirection : directions) {\n-                if (connectedDirection.isCardinal()) {\n-                    P facingProperty = mapping.get(connectedDirection);\n-                    facingStates.put(facingProperty, setValueResolver.apply(blockState, facingProperty));\n+        }\n+\n+        public static final class TripWire {\n+\n+            public static final Set<PropertyBool> ALL_DIRECTION_PROPERTIES =\n+                    ImmutableSet.of(BlockTripWire.NORTH, BlockTripWire.SOUTH, BlockTripWire.WEST, BlockTripWire.EAST);\n+\n+            public static Optional<PropertyBool> getPropertyFromDirection(final Direction direction) {\n+                switch (direction) {\n+                    case NORTH:\n+                        return Optional.of(BlockTripWire.NORTH);\n+                    case SOUTH:\n+                        return Optional.of(BlockTripWire.SOUTH);\n+                    case WEST:\n+                        return Optional.of(BlockTripWire.WEST);\n+                    case EAST:\n+                        return Optional.of(BlockTripWire.EAST);\n+                    default:\n+                        return Optional.empty();\n                 }\n             }\n-            IBlockState resultBlockState = blockState;\n-            for (P property : facingStates.keySet()) {\n-                resultBlockState = resultBlockState.withProperty(property, facingStates.get(property));\n+        }\n+\n+        public static final class Vine {\n+\n+            public static final Set<PropertyBool> ALL_DIRECTION_PROPERTIES =\n+                    ImmutableSet.of(BlockVine.NORTH, BlockVine.SOUTH, BlockVine.WEST, BlockVine.EAST);\n+\n+            public static Optional<PropertyBool> getPropertyFromDirection(final Direction direction) {\n+                switch (direction) {\n+                    case NORTH:\n+                        return Optional.of(BlockVine.NORTH);\n+                    case SOUTH:\n+                        return Optional.of(BlockVine.SOUTH);\n+                    case WEST:\n+                        return Optional.of(BlockVine.WEST);\n+                    case EAST:\n+                        return Optional.of(BlockVine.EAST);\n+                    default:\n+                        return Optional.empty();\n+                }\n+            }\n+        }\n+\n+        public static final class Wall {\n+\n+            public static final Set<PropertyBool> ALL_DIRECTION_PROPERTIES =\n+                    ImmutableSet.of(BlockWall.NORTH, BlockWall.SOUTH, BlockWall.WEST, BlockWall.EAST);\n+\n+            public static Optional<PropertyBool> getPropertyFromDirection(final Direction direction) {\n+                switch (direction) {\n+                    case NORTH:\n+                        return Optional.of(BlockWall.NORTH);\n+                    case SOUTH:\n+                        return Optional.of(BlockWall.SOUTH);\n+                    case WEST:\n+                        return Optional.of(BlockWall.WEST);\n+                    case EAST:\n+                        return Optional.of(BlockWall.EAST);\n+                    default:\n+                        return Optional.empty();\n+                }\n             }\n-            return resultBlockState;\n         }\n     }\n }\n"}}, {"oid": "3680e2d81492381ed896a069edd9be9383435150", "url": "https://github.com/SpongePowered/Sponge/commit/3680e2d81492381ed896a069edd9be9383435150", "message": "Remove static fields from the mixins", "committedDate": "2020-05-29T20:05:07Z", "type": "forcePushed"}, {"oid": "27dc5e775374558c5ddbb3918460b415b9a01148", "url": "https://github.com/SpongePowered/Sponge/commit/27dc5e775374558c5ddbb3918460b415b9a01148", "message": "Remove static fields from the mixins", "committedDate": "2020-06-28T16:33:39Z", "type": "forcePushed"}, {"oid": "4885b00c0b87daa928cc2e24e3c4e799a382e044", "url": "https://github.com/SpongePowered/Sponge/commit/4885b00c0b87daa928cc2e24e3c4e799a382e044", "message": "Add support of offering ConnectedDirectionsData for block states", "committedDate": "2020-06-28T16:42:54Z", "type": "commit"}, {"oid": "7e74d77b48496ecfb59a0f6c822d3ff98fe8d3c3", "url": "https://github.com/SpongePowered/Sponge/commit/7e74d77b48496ecfb59a0f6c822d3ff98fe8d3c3", "message": "Unify \"applyConnectedDirections\" method", "committedDate": "2020-06-28T16:42:55Z", "type": "commit"}, {"oid": "3df5ae4370782dd37c8d75800cade9d063792046", "url": "https://github.com/SpongePowered/Sponge/commit/3df5ae4370782dd37c8d75800cade9d063792046", "message": "Fix code style", "committedDate": "2020-06-28T16:42:55Z", "type": "commit"}, {"oid": "6e1cd5811c5cbc95313016b440c6456ea31d20a5", "url": "https://github.com/SpongePowered/Sponge/commit/6e1cd5811c5cbc95313016b440c6456ea31d20a5", "message": "Remove static fields from the mixins", "committedDate": "2020-06-28T16:42:55Z", "type": "commit"}, {"oid": "6e1cd5811c5cbc95313016b440c6456ea31d20a5", "url": "https://github.com/SpongePowered/Sponge/commit/6e1cd5811c5cbc95313016b440c6456ea31d20a5", "message": "Remove static fields from the mixins", "committedDate": "2020-06-28T16:42:55Z", "type": "forcePushed"}]}