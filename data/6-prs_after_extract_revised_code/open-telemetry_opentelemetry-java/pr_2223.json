{"pr_number": 2223, "pr_title": "Allow adding span processors when building a tracer provider.", "pr_createdAt": "2020-12-08T06:02:42Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/2223", "timeline": [{"oid": "50f8054188f8001a8bb5e882912b27c7cc63df46", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/50f8054188f8001a8bb5e882912b27c7cc63df46", "message": "Allow adding span processors when building a tracer provider.", "committedDate": "2020-12-08T05:57:52Z", "type": "commit"}, {"oid": "a5d1b8bfcd39626af5cd4a6fa56cc7e48203b1bb", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a5d1b8bfcd39626af5cd4a6fa56cc7e48203b1bb", "message": "Drift", "committedDate": "2020-12-08T06:54:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY0NzMwNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2223#discussion_r538647304", "bodyText": "the downside about removing this is that now we won't be adding span processors to a pre-configured SDK. Not sure if we're ok with that or not. I know we've chatted about removing the ability to provide the fully configured SDK altogether, which would make this (obviously) just fine.", "author": "jkwatson", "createdAt": "2020-12-08T17:40:16Z", "path": "sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java", "diffHunk": "@@ -216,10 +216,6 @@ public OpenTelemetrySdk build() {\n       MeterProvider meterProvider = buildMeterProvider();\n       TracerSdkProvider tracerProvider = buildTracerProvider();\n \n-      for (SpanProcessor spanProcessor : spanProcessors) {\n-        tracerProvider.addSpanProcessor(spanProcessor);\n-      }", "originalCommit": "a5d1b8bfcd39626af5cd4a6fa56cc7e48203b1bb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "108b948eb43cf45e39390df17ff2d09c28cf3141", "chunk": "diff --git a/sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java b/sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java\nindex c048cdd55..fe386f869 100644\n--- a/sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java\n+++ b/sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java\n\n@@ -214,7 +215,7 @@ public final class OpenTelemetrySdk extends DefaultOpenTelemetry {\n     @Override\n     public OpenTelemetrySdk build() {\n       MeterProvider meterProvider = buildMeterProvider();\n-      TracerSdkProvider tracerProvider = buildTracerProvider();\n+      SdkTracerProvider tracerProvider = buildTracerProvider();\n \n       OpenTelemetrySdk sdk =\n           new OpenTelemetrySdk(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY1NDY4NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2223#discussion_r538654684", "bodyText": "should we also do this up on line 236 to preserve backward compatibility? I was very surprised that there wasn't a unit test that verified this.", "author": "jkwatson", "createdAt": "2020-12-08T17:47:16Z", "path": "sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java", "diffHunk": "@@ -252,6 +248,7 @@ private TracerSdkProvider buildTracerProvider() {\n       if (traceConfig != null) {\n         tracerProviderBuilder.setTraceConfig(traceConfig);\n       }\n+      spanProcessors.forEach(tracerProviderBuilder::addSpanProcessor);", "originalCommit": "a5d1b8bfcd39626af5cd4a6fa56cc7e48203b1bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk1MzkxNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2223#discussion_r538953915", "bodyText": "Thanks, didn't notice / intend the change in behavior.", "author": "anuraaga", "createdAt": "2020-12-09T02:20:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY1NDY4NA=="}], "type": "inlineReview", "revised_code": {"commit": "9f02469fda92a6d335355310ef766ed6a4cec82e", "chunk": "diff --git a/sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java b/sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java\nindex c048cdd55..aa662ac17 100644\n--- a/sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java\n+++ b/sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java\n\n@@ -32,254 +23,67 @@ import javax.annotation.concurrent.ThreadSafe;\n public final class OpenTelemetrySdk extends DefaultOpenTelemetry {\n \n   /**\n-   * Returns a new {@link Builder} for configuring an instance of {@linkplain OpenTelemetrySdk the\n-   * OpenTelemetry SDK}.\n+   * Returns a new {@link OpenTelemetrySdkBuilder} for configuring an instance of {@linkplain\n+   * OpenTelemetrySdk the OpenTelemetry SDK}.\n    */\n-  public static Builder builder() {\n-    return new Builder();\n+  public static OpenTelemetrySdkBuilder builder() {\n+    return new OpenTelemetrySdkBuilder();\n   }\n \n   /** Returns the global {@link OpenTelemetrySdk}. */\n   public static OpenTelemetrySdk get() {\n-    return (OpenTelemetrySdk) OpenTelemetry.get();\n+    return (OpenTelemetrySdk) GlobalOpenTelemetry.get();\n   }\n \n-  /** Returns the global {@link TracerSdkManagement}. */\n-  public static TracerSdkManagement getGlobalTracerManagement() {\n-    TracerProvider tracerProvider = OpenTelemetry.get().getTracerProvider();\n+  /** Returns the global {@link SdkTracerManagement}. */\n+  public static SdkTracerManagement getGlobalTracerManagement() {\n+    TracerProvider tracerProvider = GlobalOpenTelemetry.get().getTracerProvider();\n     if (!(tracerProvider instanceof ObfuscatedTracerProvider)) {\n       throw new IllegalStateException(\n           \"Trying to access global TracerSdkManagement but global TracerProvider is not an \"\n               + \"instance created by this SDK.\");\n     }\n-    return (TracerSdkProvider) ((ObfuscatedTracerProvider) tracerProvider).unobfuscate();\n+    return (SdkTracerProvider) ((ObfuscatedTracerProvider) tracerProvider).unobfuscate();\n   }\n \n-  /** Returns the global {@link MeterSdkProvider}. */\n+  /**\n+   * Returns the global {@link MeterSdkProvider}.\n+   *\n+   * @deprecated this will be removed soon in preparation for the initial otel release.\n+   */\n+  @Deprecated\n   public static MeterSdkProvider getGlobalMeterProvider() {\n-    return (MeterSdkProvider) OpenTelemetry.get().getMeterProvider();\n+    return (MeterSdkProvider) GlobalOpenTelemetry.get().getMeterProvider();\n   }\n \n-  private static final AtomicBoolean INITIALIZED_GLOBAL = new AtomicBoolean();\n-\n-  private final Clock clock;\n-  private final Resource resource;\n+  static final AtomicBoolean INITIALIZED_GLOBAL = new AtomicBoolean();\n \n-  private OpenTelemetrySdk(\n+  OpenTelemetrySdk(\n       TracerProvider tracerProvider,\n       MeterProvider meterProvider,\n-      ContextPropagators contextPropagators,\n-      Clock clock,\n-      Resource resource) {\n+      ContextPropagators contextPropagators) {\n     super(tracerProvider, meterProvider, contextPropagators);\n-    this.clock = clock;\n-    this.resource = resource;\n   }\n \n-  /** Returns the {@link Resource} for this {@link OpenTelemetrySdk}. */\n-  public Resource getResource() {\n-    return resource;\n-  }\n-\n-  /** Returns the {@link Clock} for this {@link OpenTelemetrySdk}. */\n-  public Clock getClock() {\n-    return clock;\n-  }\n-\n-  /** Returns the {@link TracerSdkManagement} for this {@link OpenTelemetrySdk}. */\n-  public TracerSdkManagement getTracerManagement() {\n-    return (TracerSdkProvider) ((ObfuscatedTracerProvider) getTracerProvider()).unobfuscate();\n-  }\n-\n-  /** A builder for configuring an {@link OpenTelemetrySdk}. */\n-  public static class Builder extends DefaultOpenTelemetry.Builder {\n-    private Clock clock;\n-    private Resource resource;\n-    private final List<SpanProcessor> spanProcessors = new ArrayList<>();\n-    private IdGenerator idGenerator;\n-    private TraceConfig traceConfig;\n-\n-    /**\n-     * Sets the {@link TracerSdkProvider} to use. This can be used to configure tracing settings by\n-     * returning the instance created by a {@link TracerSdkProvider.Builder}.\n-     *\n-     * <p>If you use this method, it is assumed that you are providing a fully configured\n-     * TracerSdkProvider, and other settings will be ignored.\n-     *\n-     * <p>Note: the parameter passed in here must be a {@link TracerSdkProvider} instance.\n-     *\n-     * @param tracerProvider A {@link TracerSdkProvider} to use with this instance.\n-     * @see TracerSdkProvider#builder()\n-     */\n-    @Override\n-    public Builder setTracerProvider(TracerProvider tracerProvider) {\n-      if (!(tracerProvider instanceof TracerSdkProvider)) {\n-        throw new IllegalArgumentException(\n-            \"The OpenTelemetrySdk can only be configured with a TracerSdkProvider\");\n-      }\n-      super.setTracerProvider(tracerProvider);\n-      return this;\n-    }\n-\n-    /**\n-     * Sets the {@link MeterProvider} to use.. This can be used to configure tracing settings by\n-     * returning the instance created by a {@link MeterSdkProvider.Builder}.\n-     *\n-     * @see MeterSdkProvider#builder()\n-     */\n-    @Override\n-    public Builder setMeterProvider(MeterProvider meterProvider) {\n-      if (!(meterProvider instanceof MeterSdkProvider)) {\n-        throw new IllegalArgumentException(\n-            \"The OpenTelemetrySdk can only be configured with a MeterSdkProvider\");\n-      }\n-      super.setMeterProvider(meterProvider);\n-      return this;\n-    }\n-\n-    /** Sets the {@link ContextPropagators} to use. */\n-    @Override\n-    public Builder setPropagators(ContextPropagators propagators) {\n-      super.setPropagators(propagators);\n-      return this;\n-    }\n-\n-    /**\n-     * Sets the {@link Clock} to be used for measuring timings.\n-     *\n-     * <p>If you use {@link #setTracerProvider(TracerProvider)}, this will be ignored for purposes\n-     * of configuring the TracerProvider.\n-     *\n-     * @param clock The clock to use for all temporal needs.\n-     * @return this\n-     */\n-    public Builder setClock(Clock clock) {\n-      requireNonNull(clock, \"clock\");\n-      this.clock = clock;\n-      return this;\n-    }\n-\n-    /**\n-     * Sets the {@link Resource} to be attached to all telemetry reported by this SDK.\n-     *\n-     * <p>If you use {@link #setTracerProvider(TracerProvider)}, this will be ignored for purposes\n-     * of configuring the TracerProvider.\n-     *\n-     * @param resource A Resource implementation.\n-     * @return this\n-     */\n-    public Builder setResource(Resource resource) {\n-      requireNonNull(resource, \"resource\");\n-      this.resource = resource;\n-      return this;\n-    }\n-\n-    /**\n-     * Add a SpanProcessor to the span pipeline that will be built.\n-     *\n-     * @return this\n-     */\n-    public Builder addSpanProcessor(SpanProcessor spanProcessor) {\n-      spanProcessors.add(spanProcessor);\n-      return this;\n-    }\n-\n-    /**\n-     * Set the {@link IdGenerator} that will be used by the SDK for generating trace and span ids.\n-     *\n-     * <p>Using {@link #setTracerProvider(TracerProvider)} will override this setting.\n-     *\n-     * @return this\n-     */\n-    public Builder setIdGenerator(IdGenerator idGenerator) {\n-      this.idGenerator = idGenerator;\n-      return this;\n-    }\n-\n-    /**\n-     * Set the {@link TraceConfig} that will be initially set on the Tracing SDK.\n-     *\n-     * <p>Using {@link #setTracerProvider(TracerProvider)} will override this setting.\n-     *\n-     * @return this\n-     */\n-    public Builder setTraceConfig(TraceConfig traceConfig) {\n-      this.traceConfig = traceConfig;\n-      return this;\n-    }\n-\n-    /**\n-     * Returns a new {@link OpenTelemetrySdk} built with the configuration of this {@link Builder}.\n-     */\n-    @Override\n-    public OpenTelemetrySdk build() {\n-      MeterProvider meterProvider = buildMeterProvider();\n-      TracerSdkProvider tracerProvider = buildTracerProvider();\n-\n-      OpenTelemetrySdk sdk =\n-          new OpenTelemetrySdk(\n-              new ObfuscatedTracerProvider(tracerProvider),\n-              meterProvider,\n-              super.propagators,\n-              clock == null ? SystemClock.getInstance() : clock,\n-              resource == null ? Resource.getDefault() : resource);\n-      // Automatically initialize global OpenTelemetry with the first SDK we build.\n-      if (INITIALIZED_GLOBAL.compareAndSet(/* expectedValue= */ false, /* newValue= */ true)) {\n-        OpenTelemetry.set(sdk);\n-      }\n-      return sdk;\n-    }\n-\n-    private TracerSdkProvider buildTracerProvider() {\n-      TracerProvider tracerProvider = super.tracerProvider;\n-      if (tracerProvider != null) {\n-        return (TracerSdkProvider) tracerProvider;\n-      }\n-      TracerSdkProvider.Builder tracerProviderBuilder = TracerSdkProvider.builder();\n-      if (clock != null) {\n-        tracerProviderBuilder.setClock(clock);\n-      }\n-      if (resource != null) {\n-        tracerProviderBuilder.setResource(resource);\n-      }\n-      if (idGenerator != null) {\n-        tracerProviderBuilder.setIdGenerator(idGenerator);\n-      }\n-      if (traceConfig != null) {\n-        tracerProviderBuilder.setTraceConfig(traceConfig);\n-      }\n-      spanProcessors.forEach(tracerProviderBuilder::addSpanProcessor);\n-      return tracerProviderBuilder.build();\n-    }\n-\n-    private MeterProvider buildMeterProvider() {\n-      if (super.meterProvider != null) {\n-        return super.meterProvider;\n-      }\n-      MeterSdkProvider.Builder meterProviderBuilder = MeterSdkProvider.builder();\n-      if (clock != null) {\n-        meterProviderBuilder.setClock(clock);\n-      }\n-      if (resource != null) {\n-        meterProviderBuilder.setResource(resource);\n-      }\n-      return meterProviderBuilder.build();\n-    }\n+  /** Returns the {@link SdkTracerManagement} for this {@link OpenTelemetrySdk}. */\n+  public SdkTracerManagement getTracerManagement() {\n+    return (SdkTracerProvider) ((ObfuscatedTracerProvider) getTracerProvider()).unobfuscate();\n   }\n \n   /**\n-   * A {@link TracerProvider} wrapper that forces users to access the SDK specific implementation\n-   * via the SDK, instead of via the API and casting it to the SDK specific implementation.\n+   * This class allows the SDK to unobfuscate an obfuscated static global provider.\n    *\n-   * @see Obfuscated\n+   * <p>Static global providers are obfuscated when they are returned from the API to prevent users\n+   * from casting them to their SDK specific implementation. For example, we do not want users to\n+   * use patterns like {@code (TracerSdkProvider) OpenTelemetry.getGlobalTracerProvider()}.\n    */\n   @ThreadSafe\n   // Visible for testing\n-  static class ObfuscatedTracerProvider implements TracerProvider, Obfuscated<TracerProvider> {\n+  static class ObfuscatedTracerProvider implements TracerProvider {\n \n     private final TracerProvider delegate;\n \n-    private ObfuscatedTracerProvider(TracerProvider delegate) {\n+    ObfuscatedTracerProvider(TracerProvider delegate) {\n       this.delegate = delegate;\n     }\n \n"}}, {"oid": "f4dab61a0ee89bb2b24b4c1e43840a616381b417", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f4dab61a0ee89bb2b24b4c1e43840a616381b417", "message": "Mutate provided providers too for now.", "committedDate": "2020-12-09T02:21:32Z", "type": "commit"}, {"oid": "108b948eb43cf45e39390df17ff2d09c28cf3141", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/108b948eb43cf45e39390df17ff2d09c28cf3141", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into tracer-sdk-builder-addspanprocessor", "committedDate": "2020-12-15T06:01:09Z", "type": "commit"}, {"oid": "9f02469fda92a6d335355310ef766ed6a4cec82e", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9f02469fda92a6d335355310ef766ed6a4cec82e", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into tracer-sdk-builder-addspanprocessor", "committedDate": "2020-12-17T02:12:13Z", "type": "commit"}, {"oid": "b1aebbb7c47c03bb6ef9667b12182293e444001a", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b1aebbb7c47c03bb6ef9667b12182293e444001a", "message": "Spot", "committedDate": "2020-12-17T02:15:05Z", "type": "commit"}]}