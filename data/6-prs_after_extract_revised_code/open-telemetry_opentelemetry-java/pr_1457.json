{"pr_number": 1457, "pr_title": "B3: Add Additional Validity Checks and tests for Trace and Span ID", "pr_createdAt": "2020-07-23T23:22:23Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1457", "timeline": [{"oid": "686008bbc927ee4d06456ff0cff5eee518e09059", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/686008bbc927ee4d06456ff0cff5eee518e09059", "message": "B3: Add Additional Validity Checks and tests for Trace and Span ID", "committedDate": "2020-07-23T23:22:44Z", "type": "forcePushed"}, {"oid": "5eb3f244fbe6406aee11ceea4e661639a313ece2", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5eb3f244fbe6406aee11ceea4e661639a313ece2", "message": "B3: Add Additional Validity Checks and tests for Trace and Span ID", "committedDate": "2020-07-23T23:49:00Z", "type": "forcePushed"}, {"oid": "63f52d6a4f62b07e561c07e935a12d425858929a", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/63f52d6a4f62b07e561c07e935a12d425858929a", "message": "B3: Add Additional Validity Checks and tests for Trace and Span ID", "committedDate": "2020-07-24T01:11:40Z", "type": "commit"}, {"oid": "63f52d6a4f62b07e561c07e935a12d425858929a", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/63f52d6a4f62b07e561c07e935a12d425858929a", "message": "B3: Add Additional Validity Checks and tests for Trace and Span ID", "committedDate": "2020-07-24T01:11:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2OTM1MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1457#discussion_r459869350", "bodyText": "I am somewhat concerned about creating one extra object every time we want to check if traceId or spanId are valid", "author": "iNikem", "createdAt": "2020-07-24T06:14:38Z", "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/B3PropagatorExtractor.java", "diffHunk": "@@ -63,12 +65,25 @@ static SpanContext buildSpanContext(String traceId, String spanId, String sample\n       }\n     }\n \n+    private static boolean isHex(String value) {\n+      try {\n+        new BigInteger(value, 16);", "originalCommit": "63f52d6a4f62b07e561c07e935a12d425858929a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2OTk3Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1457#discussion_r459869977", "bodyText": "Agree, looping through and checking the character range shouldn't be too much more complex.", "author": "anuraaga", "createdAt": "2020-07-24T06:17:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2OTM1MA=="}], "type": "inlineReview", "revised_code": {"commit": "d30e86c6a8eb7445d5f1f70004b7e44517ce4079", "chunk": "diff --git a/extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/B3PropagatorExtractor.java b/extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/B3PropagatorExtractor.java\nindex 6907da7c3..6de659a00 100644\n--- a/extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/B3PropagatorExtractor.java\n+++ b/extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/B3PropagatorExtractor.java\n\n@@ -66,24 +65,24 @@ interface B3PropagatorExtractor {\n     }\n \n     private static boolean isHex(String value) {\n-      try {\n-        new BigInteger(value, 16);\n-        return true;\n-      } catch (NumberFormatException e) {\n-        return false;\n+      for (int i = 0; i < value.length(); i++) {\n+        if (Character.digit(value.charAt(i), 16) == -1) {\n+          return false;\n+        }\n       }\n+      return true;\n     }\n \n     static boolean isTraceIdValid(String value) {\n       return !(StringUtils.isNullOrEmpty(value)\n-          || !isHex(value)\n-          || (value.length() != MIN_TRACE_ID_LENGTH && value.length() != MAX_TRACE_ID_LENGTH));\n+          || (value.length() != MIN_TRACE_ID_LENGTH && value.length() != MAX_TRACE_ID_LENGTH)\n+          || !isHex(value));\n     }\n \n     static boolean isSpanIdValid(String value) {\n       return !(StringUtils.isNullOrEmpty(value)\n-          || !isHex(value)\n-          || value.length() != MAX_SPAN_ID_LENGTH);\n+          || value.length() != MAX_SPAN_ID_LENGTH\n+          || !isHex(value));\n     }\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2OTg2Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1457#discussion_r459869866", "bodyText": "Let's check length before hex since it's a simpler check", "author": "anuraaga", "createdAt": "2020-07-24T06:16:41Z", "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/B3PropagatorExtractor.java", "diffHunk": "@@ -63,12 +65,25 @@ static SpanContext buildSpanContext(String traceId, String spanId, String sample\n       }\n     }\n \n+    private static boolean isHex(String value) {\n+      try {\n+        new BigInteger(value, 16);\n+        return true;\n+      } catch (NumberFormatException e) {\n+        return false;\n+      }\n+    }\n+\n     static boolean isTraceIdValid(String value) {\n-      return !(StringUtils.isNullOrEmpty(value) || value.length() > MAX_TRACE_ID_LENGTH);\n+      return !(StringUtils.isNullOrEmpty(value)\n+          || !isHex(value)\n+          || (value.length() != MIN_TRACE_ID_LENGTH && value.length() != MAX_TRACE_ID_LENGTH));", "originalCommit": "63f52d6a4f62b07e561c07e935a12d425858929a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d30e86c6a8eb7445d5f1f70004b7e44517ce4079", "chunk": "diff --git a/extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/B3PropagatorExtractor.java b/extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/B3PropagatorExtractor.java\nindex 6907da7c3..6de659a00 100644\n--- a/extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/B3PropagatorExtractor.java\n+++ b/extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/B3PropagatorExtractor.java\n\n@@ -66,24 +65,24 @@ interface B3PropagatorExtractor {\n     }\n \n     private static boolean isHex(String value) {\n-      try {\n-        new BigInteger(value, 16);\n-        return true;\n-      } catch (NumberFormatException e) {\n-        return false;\n+      for (int i = 0; i < value.length(); i++) {\n+        if (Character.digit(value.charAt(i), 16) == -1) {\n+          return false;\n+        }\n       }\n+      return true;\n     }\n \n     static boolean isTraceIdValid(String value) {\n       return !(StringUtils.isNullOrEmpty(value)\n-          || !isHex(value)\n-          || (value.length() != MIN_TRACE_ID_LENGTH && value.length() != MAX_TRACE_ID_LENGTH));\n+          || (value.length() != MIN_TRACE_ID_LENGTH && value.length() != MAX_TRACE_ID_LENGTH)\n+          || !isHex(value));\n     }\n \n     static boolean isSpanIdValid(String value) {\n       return !(StringUtils.isNullOrEmpty(value)\n-          || !isHex(value)\n-          || value.length() != MAX_SPAN_ID_LENGTH);\n+          || value.length() != MAX_SPAN_ID_LENGTH\n+          || !isHex(value));\n     }\n   }\n }\n"}}, {"oid": "d30e86c6a8eb7445d5f1f70004b7e44517ce4079", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d30e86c6a8eb7445d5f1f70004b7e44517ce4079", "message": "loop through characters to check hex instead of creating new object", "committedDate": "2020-07-24T20:09:49Z", "type": "commit"}, {"oid": "d30e86c6a8eb7445d5f1f70004b7e44517ce4079", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d30e86c6a8eb7445d5f1f70004b7e44517ce4079", "message": "loop through characters to check hex instead of creating new object", "committedDate": "2020-07-24T20:09:49Z", "type": "forcePushed"}]}