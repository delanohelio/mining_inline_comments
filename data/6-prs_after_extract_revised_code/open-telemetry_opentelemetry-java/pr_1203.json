{"pr_number": 1203, "pr_title": "Fix remove attributes from span after termination", "pr_createdAt": "2020-05-12T06:32:40Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1203", "timeline": [{"oid": "4fa7723f5387c48f4a77a34bac451c6e8e2706e8", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/4fa7723f5387c48f4a77a34bac451c6e8e2706e8", "message": "Fix remove attributes from span after termination", "committedDate": "2020-05-12T06:31:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc4MjI2Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1203#discussion_r423782267", "bodyText": "Do you really need to add 5 attributes for this test? You could have a single item and assert that only that item remains afterwards, and make the test simpler/smaller.", "author": "carlosalberto", "createdAt": "2020-05-12T14:32:02Z", "path": "sdk/src/test/java/io/opentelemetry/sdk/trace/SpanBuilderSdkTest.java", "diffHunk": "@@ -172,6 +172,44 @@ public void setAttribute() {\n     }\n   }\n \n+  @Test\n+  public void setAttribute_afterEnd() {\n+    Span.Builder spanBuilder = tracerSdk.spanBuilder(SPAN_NAME);", "originalCommit": "4fa7723f5387c48f4a77a34bac451c6e8e2706e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc4Mzc0OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1203#discussion_r423783748", "bodyText": "Oh, never mind. You are exercising all the attribute types.", "author": "carlosalberto", "createdAt": "2020-05-12T14:33:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc4MjI2Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc4OTIyOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1203#discussion_r423789228", "bodyText": "This will not be added anyway. Maybe we can keep only the values that will be really added? This makes the test more concise.", "author": "carlosalberto", "createdAt": "2020-05-12T14:41:06Z", "path": "sdk/src/test/java/io/opentelemetry/sdk/trace/SpanBuilderSdkTest.java", "diffHunk": "@@ -230,6 +268,37 @@ public void setAttribute_nullAttributeValue() throws Exception {\n     assertThat(span.toSpanData().getAttributes()).isEmpty();\n   }\n \n+  @Test\n+  public void setAttribute_nullAttributeValue_afterEnd() throws Exception {\n+    Span.Builder spanBuilder = tracerSdk.spanBuilder(SPAN_NAME);\n+    spanBuilder.setAttribute(\"emptyString\", \"\");\n+    spanBuilder.setAttribute(\"nullString\", (AttributeValue) null);", "originalCommit": "4fa7723f5387c48f4a77a34bac451c6e8e2706e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc5NTY4MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1203#discussion_r423795680", "bodyText": "You're right! This is pointless since it is covered by another test!", "author": "thisthat", "createdAt": "2020-05-12T14:49:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc4OTIyOA=="}], "type": "inlineReview", "revised_code": {"commit": "74f93ed98626e4ac10aa809bfc6c86029700ee4d", "chunk": "diff --git a/sdk/src/test/java/io/opentelemetry/sdk/trace/SpanBuilderSdkTest.java b/sdk/src/test/java/io/opentelemetry/sdk/trace/SpanBuilderSdkTest.java\nindex 48c37ec87..6c9716ef7 100644\n--- a/sdk/src/test/java/io/opentelemetry/sdk/trace/SpanBuilderSdkTest.java\n+++ b/sdk/src/test/java/io/opentelemetry/sdk/trace/SpanBuilderSdkTest.java\n\n@@ -272,8 +272,6 @@ public class SpanBuilderSdkTest {\n   public void setAttribute_nullAttributeValue_afterEnd() throws Exception {\n     Span.Builder spanBuilder = tracerSdk.spanBuilder(SPAN_NAME);\n     spanBuilder.setAttribute(\"emptyString\", \"\");\n-    spanBuilder.setAttribute(\"nullString\", (AttributeValue) null);\n-    spanBuilder.setAttribute(\"nullStringAttributeValue\", AttributeValue.stringAttributeValue(null));\n     spanBuilder.setAttribute(\"emptyStringAttributeValue\", AttributeValue.stringAttributeValue(\"\"));\n     spanBuilder.setAttribute(\"longAttribute\", 0L);\n     spanBuilder.setAttribute(\"boolAttribute\", false);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgwMDU5Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1203#discussion_r423800597", "bodyText": "why don't we just do this check once up front, rather than repeating the code here and below?", "author": "jkwatson", "createdAt": "2020-05-12T14:55:21Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -334,6 +334,10 @@ public void setAttribute(String key, AttributeValue value) {\n     Preconditions.checkNotNull(key, \"key\");\n     if (value == null || (value.getType().equals(STRING) && value.getStringValue() == null)) {\n       synchronized (lock) {\n+        if (hasEnded) {", "originalCommit": "4fa7723f5387c48f4a77a34bac451c6e8e2706e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgwNTExMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1203#discussion_r423805113", "bodyText": "I didn't want to introduce another synchronized block. But I guess you're right, it is better to do only once upfront!", "author": "thisthat", "createdAt": "2020-05-12T15:00:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgwMDU5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgxMzUyOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1203#discussion_r423813528", "bodyText": "I'd rather have one slightly larger synchronized block, rather than force jumping in and out of the synchronization twice in rapid succession. As long as you're doing very cheap operations, just putting all the logic in one synchronization context is going to be better.", "author": "jkwatson", "createdAt": "2020-05-12T15:11:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgwMDU5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgzODEzOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1203#discussion_r423838139", "bodyText": "But this one does not jump between synchronized.", "author": "bogdandrutu", "createdAt": "2020-05-12T15:43:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgwMDU5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgzOTQxMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1203#discussion_r423839413", "bodyText": "I agree. I was just thinking forward to moving the ended check up-front, rather then duplicating that check.", "author": "jkwatson", "createdAt": "2020-05-12T15:45:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgwMDU5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg1MzMyMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1203#discussion_r423853322", "bodyText": "Splitting the lock is incorrect. You need to make the check in the same lock sync to ensure that the condition does not change between the two synchronized sections", "author": "bogdandrutu", "createdAt": "2020-05-12T16:04:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgwMDU5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg1NDM1OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1203#discussion_r423854359", "bodyText": "To clarify @jkwatson your proposal is correct but your concern should not be a preference should be a requirement because otherwise the code is incorrect :)", "author": "bogdandrutu", "createdAt": "2020-05-12T16:05:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgwMDU5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg1NjMyMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1203#discussion_r423856323", "bodyText": "You are right @bogdandrutu, I was thinking only to the case where the span already ended.", "author": "thisthat", "createdAt": "2020-05-12T16:08:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgwMDU5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg1NzU2NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1203#discussion_r423857564", "bodyText": "@bogdandrutu also true! I hadn't actually fully thought through the implementation, but you are absolutely correct.", "author": "jkwatson", "createdAt": "2020-05-12T16:10:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgwMDU5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg3MTc1OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1203#discussion_r423871759", "bodyText": "Personally I am happy with the current code, but not opposed to change it based on @jkwatson suggestion. Up to you @thisthat :)", "author": "bogdandrutu", "createdAt": "2020-05-12T16:30:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgwMDU5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg3ODYwMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1203#discussion_r423878601", "bodyText": "I think having everything in a single synchronized block makes it easier to fully understand the method. 7cab1ee addresses this \ud83d\ude09", "author": "thisthat", "createdAt": "2020-05-12T16:40:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgwMDU5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "7cab1ee8c07c27cfb13be112936839462323cfec", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java b/sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java\nindex 6ab211e95..bf21238da 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java\n\n@@ -332,21 +332,15 @@ final class RecordEventsReadableSpan implements ReadableSpan, Span {\n   @Override\n   public void setAttribute(String key, AttributeValue value) {\n     Preconditions.checkNotNull(key, \"key\");\n-    if (value == null || (value.getType().equals(STRING) && value.getStringValue() == null)) {\n-      synchronized (lock) {\n-        if (hasEnded) {\n-          logger.log(Level.FINE, \"Calling setAttribute() on an ended Span.\");\n-          return;\n-        }\n-        attributes.remove(key);\n-      }\n-      return;\n-    }\n     synchronized (lock) {\n       if (hasEnded) {\n         logger.log(Level.FINE, \"Calling setAttribute() on an ended Span.\");\n         return;\n       }\n+      if (value == null || (value.getType().equals(STRING) && value.getStringValue() == null)) {\n+        attributes.remove(key);\n+        return;\n+      }\n       totalAttributeCount++;\n       if (attributes.get(key) == null && attributes.size() >= maxNumberOfAttributes) {\n         logger.log(\n"}}, {"oid": "7cab1ee8c07c27cfb13be112936839462323cfec", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/7cab1ee8c07c27cfb13be112936839462323cfec", "message": "Remove attribute in the same synchronized block", "committedDate": "2020-05-12T16:29:20Z", "type": "commit"}, {"oid": "74f93ed98626e4ac10aa809bfc6c86029700ee4d", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/74f93ed98626e4ac10aa809bfc6c86029700ee4d", "message": "Simplify tests", "committedDate": "2020-05-12T16:34:00Z", "type": "commit"}, {"oid": "74f93ed98626e4ac10aa809bfc6c86029700ee4d", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/74f93ed98626e4ac10aa809bfc6c86029700ee4d", "message": "Simplify tests", "committedDate": "2020-05-12T16:34:00Z", "type": "forcePushed"}]}