{"pr_number": 1525, "pr_title": "Separate the SDK into separate publishable artifacts", "pr_createdAt": "2020-08-10T20:36:28Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1525", "timeline": [{"oid": "b9eb17ff566e36c7d330085f16b565298d885dca", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b9eb17ff566e36c7d330085f16b565298d885dca", "message": "Add SDK BOM", "committedDate": "2020-08-11T15:57:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc1MDI2NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1525#discussion_r468750265", "bodyText": "for some unknown reason this line no longer uses the imported class, but the fully-qualified one. I think it'll make the diff slightly cleaner if that change got reverted.", "author": "jkwatson", "createdAt": "2020-08-11T17:35:50Z", "path": "sdk/common/src/main/java/io/opentelemetry/sdk/common/InstrumentationLibraryInfo.java", "diffHunk": "@@ -1,72 +1,71 @@\n-/*\r\n- * Copyright 2019, OpenTelemetry Authors\r\n- *\r\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n- * you may not use this file except in compliance with the License.\r\n- * You may obtain a copy of the License at\r\n- *\r\n- *     http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-\r\n-package io.opentelemetry.sdk.common;\r\n-\r\n-import com.google.auto.value.AutoValue;\r\n-import io.opentelemetry.sdk.trace.TracerSdkProvider;\r\n-import io.opentelemetry.trace.Tracer;\r\n-import javax.annotation.Nullable;\r\n-import javax.annotation.concurrent.Immutable;\r\n-\r\n-/**\r\n- * Holds information about the instrumentation library specified when creating an instance of {@link\r\n- * Tracer} using {@link TracerSdkProvider}.\r\n- */\r\n-@AutoValue\r\n-@Immutable\r\n-public abstract class InstrumentationLibraryInfo {\r\n-  private static final InstrumentationLibraryInfo EMPTY = create(\"\", null);\r\n-\r\n-  /**\r\n-   * Creates a new instance of {@link InstrumentationLibraryInfo}.\r\n-   *\r\n-   * @param name name of the instrumentation library (e.g., \"io.opentelemetry.contrib.mongodb\"),\r\n-   *     must not be null\r\n-   * @param version version of the instrumentation library (e.g., \"semver:1.0.0\"), might be null\r\n-   * @return the new instance\r\n-   */\r\n-  public static InstrumentationLibraryInfo create(String name, @Nullable String version) {\r\n-    return new AutoValue_InstrumentationLibraryInfo(name, version);\r\n-  }\r\n-\r\n-  /**\r\n-   * Returns an \"empty\" {@code InstrumentationLibraryInfo}.\r\n-   *\r\n-   * @return an \"empty\" {@code InstrumentationLibraryInfo}.\r\n-   */\r\n-  public static InstrumentationLibraryInfo getEmpty() {\r\n-    return EMPTY;\r\n-  }\r\n-\r\n-  /**\r\n-   * Returns the name of the instrumentation library.\r\n-   *\r\n-   * @return the name of the instrumentation library.\r\n-   */\r\n-  public abstract String getName();\r\n-\r\n-  /**\r\n-   * Returns the version of the instrumentation library, or {@code null} if not available.\r\n-   *\r\n-   * @return the version of the instrumentation library, or {@code null} if not available.\r\n-   */\r\n-  @Nullable\r\n-  public abstract String getVersion();\r\n-\r\n-  // Package protected ctor to avoid others to extend this class.\r\n-  InstrumentationLibraryInfo() {}\r\n-}\r\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.common;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.trace.Tracer;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Holds information about the instrumentation library specified when creating an instance of {@link\n+ * Tracer} using io.opentelemetry.sdk.trace.TracerSdkProvider.", "originalCommit": "b9eb17ff566e36c7d330085f16b565298d885dca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc1Mjc0Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1525#discussion_r468752746", "bodyText": "I had to do that because the class is in the \"tracing\" module, which isn't a dependency of \"common\".\nAs it was for Javadoc purposes, I thought it would be ok.\nAre there alternatives? I couldn't find an easy way to reference a class in another module without adding a bunch of things to the javadoc command line", "author": "kenfinnigan", "createdAt": "2020-08-11T17:40:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc1MDI2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc1NDI5Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1525#discussion_r468754297", "bodyText": "hmm. good point. I might get rid of the reference altogether to the concrete class, and just reference something like \"Tracer or Meter Provider\".", "author": "jkwatson", "createdAt": "2020-08-11T17:42:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc1MDI2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc4MzIxMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1525#discussion_r468783211", "bodyText": "Will do", "author": "kenfinnigan", "createdAt": "2020-08-11T18:34:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc1MDI2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "f077b693940f6f590103e9447aa40800f41ed014", "chunk": "diff --git a/sdk/common/src/main/java/io/opentelemetry/sdk/common/InstrumentationLibraryInfo.java b/sdk/common/src/main/java/io/opentelemetry/sdk/common/InstrumentationLibraryInfo.java\nindex 4e24f04ec..47d5e3b4d 100644\n--- a/sdk/common/src/main/java/io/opentelemetry/sdk/common/InstrumentationLibraryInfo.java\n+++ b/sdk/common/src/main/java/io/opentelemetry/sdk/common/InstrumentationLibraryInfo.java\n\n@@ -23,7 +23,7 @@ import javax.annotation.concurrent.Immutable;\n \n /**\n  * Holds information about the instrumentation library specified when creating an instance of {@link\n- * Tracer} using io.opentelemetry.sdk.trace.TracerSdkProvider.\n+ * Tracer} using the Tracer Provider.\n  */\n @AutoValue\n @Immutable\n"}}, {"oid": "f077b693940f6f590103e9447aa40800f41ed014", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f077b693940f6f590103e9447aa40800f41ed014", "message": "Modify comment to not reference implementation class", "committedDate": "2020-08-12T12:20:49Z", "type": "forcePushed"}, {"oid": "f7c8af5a2d8b8efea0527d0f07fca6537f1460c0", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f7c8af5a2d8b8efea0527d0f07fca6537f1460c0", "message": "Moved JMH code to /sdk/all", "committedDate": "2020-08-18T17:26:33Z", "type": "forcePushed"}, {"oid": "3c948d9f0c287d779525f3bb704252970c070bdb", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/3c948d9f0c287d779525f3bb704252970c070bdb", "message": "Moved JMH code to /sdk/all", "committedDate": "2020-08-18T19:26:49Z", "type": "forcePushed"}, {"oid": "631057f09f010883d9b7e4af70413c63a9463941", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/631057f09f010883d9b7e4af70413c63a9463941", "message": "Split single \"sdk\" module into separate pieces for common, correlationcontext, metrics, tracing, and the combination of them all", "committedDate": "2020-08-18T20:02:13Z", "type": "commit"}, {"oid": "b33ff28db40679bd1f487846d43d908fd456042b", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b33ff28db40679bd1f487846d43d908fd456042b", "message": "Modify comment to not reference implementation class", "committedDate": "2020-08-18T20:02:13Z", "type": "commit"}, {"oid": "ebba3b72d5cc979f30c174e327a4cc48903d4ebb", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ebba3b72d5cc979f30c174e327a4cc48903d4ebb", "message": "Moved JMH code to /sdk/all", "committedDate": "2020-08-18T20:02:13Z", "type": "commit"}, {"oid": "35b03207041a355ac192875b8d0e53218943a265", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/35b03207041a355ac192875b8d0e53218943a265", "message": "Move new files to adjusted location", "committedDate": "2020-08-18T20:02:13Z", "type": "commit"}, {"oid": "35b03207041a355ac192875b8d0e53218943a265", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/35b03207041a355ac192875b8d0e53218943a265", "message": "Move new files to adjusted location", "committedDate": "2020-08-18T20:02:13Z", "type": "forcePushed"}, {"oid": "934b5043b32fb6f3efeeac5a9fa173afe6ccb9aa", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/934b5043b32fb6f3efeeac5a9fa173afe6ccb9aa", "message": "Move new files from rebase", "committedDate": "2020-08-18T20:10:43Z", "type": "commit"}]}