{"pr_number": 2394, "pr_title": "Make Aggregation generic, so we can ensure type safety between compon\u2026", "pr_createdAt": "2020-12-23T01:11:08Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/2394", "timeline": [{"oid": "067caa8eeb1923a04f61fc1e98c2dd4b4e054555", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/067caa8eeb1923a04f61fc1e98c2dd4b4e054555", "message": "Make Aggregation generic, so we can ensure type safety between components\n\nThis ensures that we pass the correct type of Accumulation between components inside the SDK.\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-12-23T01:10:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU4NzA5NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2394#discussion_r547587094", "bodyText": "This hides the actual type behind the generic <V>, still safe in the Accumulator and Processor but because of this you can see in DoubleMinMaxSumCountAggregatorTest.java that I need to add an annotation (errorprone complained), then discovered that I cannot use MinMaxSumCountAccumulation there because everything is actually hidden behind this conversion.\nI will most likely need to make the factory have 2 generic types and 2 methods createLong and createDouble which will return their own generic.", "author": "bogdandrutu", "createdAt": "2020-12-23T01:14:47Z", "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/aggregation/ImmutableAggregationFactory.java", "diffHunk": "@@ -9,36 +9,40 @@\n import javax.annotation.concurrent.Immutable;\n \n @Immutable\n-final class ImmutableAggregationFactory implements AggregationFactory {\n+final class ImmutableAggregationFactory<L extends Accumulation, D extends Accumulation>\n+    implements AggregationFactory {\n   static final AggregationFactory SUM =\n-      new ImmutableAggregationFactory(SumAggregation.LONG_INSTANCE, SumAggregation.DOUBLE_INSTANCE);\n+      new ImmutableAggregationFactory<>(\n+          SumAggregation.LONG_INSTANCE, SumAggregation.DOUBLE_INSTANCE);\n \n   static final AggregationFactory COUNT =\n-      new ImmutableAggregationFactory(CountAggregation.INSTANCE, CountAggregation.INSTANCE);\n+      new ImmutableAggregationFactory<>(CountAggregation.INSTANCE, CountAggregation.INSTANCE);\n \n   static final AggregationFactory LAST_VALUE =\n-      new ImmutableAggregationFactory(\n+      new ImmutableAggregationFactory<>(\n           LastValueAggregation.LONG_INSTANCE, LastValueAggregation.DOUBLE_INSTANCE);\n \n   static final AggregationFactory MIN_MAX_SUM_COUNT =\n-      new ImmutableAggregationFactory(\n+      new ImmutableAggregationFactory<>(\n           MinMaxSumCountAggregation.LONG_INSTANCE, MinMaxSumCountAggregation.DOUBLE_INSTANCE);\n \n-  private final Aggregation longAggregation;\n-  private final Aggregation doubleAggregation;\n+  private final Aggregation<L> longAggregation;\n+  private final Aggregation<D> doubleAggregation;\n \n-  private ImmutableAggregationFactory(Aggregation longAggregation, Aggregation doubleAggregation) {\n+  private ImmutableAggregationFactory(\n+      Aggregation<L> longAggregation, Aggregation<D> doubleAggregation) {\n     this.longAggregation = longAggregation;\n     this.doubleAggregation = doubleAggregation;\n   }\n \n   @Override\n-  public Aggregation create(InstrumentValueType instrumentValueType) {\n+  @SuppressWarnings(\"unchecked\")\n+  public <V extends Accumulation> Aggregation<V> create(InstrumentValueType instrumentValueType) {\n     switch (instrumentValueType) {\n       case LONG:\n-        return longAggregation;\n+        return (Aggregation<V>) longAggregation;\n       case DOUBLE:\n-        return doubleAggregation;\n+        return (Aggregation<V>) doubleAggregation;\n     }\n     throw new IllegalArgumentException(\"Invalid instrument value type\");", "originalCommit": "067caa8eeb1923a04f61fc1e98c2dd4b4e054555", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f3738ac63b907536fe56a5e9dd44a68926394fc7", "chunk": "diff --git a/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/aggregation/ImmutableAggregationFactory.java b/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/aggregation/ImmutableAggregationFactory.java\nindex abde0564f..8710f0543 100644\n--- a/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/aggregation/ImmutableAggregationFactory.java\n+++ b/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/aggregation/ImmutableAggregationFactory.java\n\n@@ -37,12 +37,12 @@ final class ImmutableAggregationFactory<L extends Accumulation, D extends Accumu\n \n   @Override\n   @SuppressWarnings(\"unchecked\")\n-  public <V extends Accumulation> Aggregation<V> create(InstrumentValueType instrumentValueType) {\n+  public <T extends Accumulation> Aggregation<T> create(InstrumentValueType instrumentValueType) {\n     switch (instrumentValueType) {\n       case LONG:\n-        return (Aggregation<V>) longAggregation;\n+        return (Aggregation<T>) longAggregation;\n       case DOUBLE:\n-        return (Aggregation<V>) doubleAggregation;\n+        return (Aggregation<T>) doubleAggregation;\n     }\n     throw new IllegalArgumentException(\"Invalid instrument value type\");\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU4OTA2OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2394#discussion_r547589069", "bodyText": "This will be transformed in T as well soon, but trying to limit the size of the PR.", "author": "bogdandrutu", "createdAt": "2020-12-23T01:22:33Z", "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/aggregation/Aggregation.java", "diffHunk": "@@ -55,7 +55,7 @@ MetricData toMetricData(\n       Resource resource,\n       InstrumentationLibraryInfo instrumentationLibraryInfo,\n       InstrumentDescriptor descriptor,\n-      Map<Labels, Accumulation> accumulationMap,\n+      Map<Labels, ? extends Accumulation> accumulationMap,", "originalCommit": "067caa8eeb1923a04f61fc1e98c2dd4b4e054555", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYxMDQ2OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2394#discussion_r547610468", "bodyText": "V?", "author": "jkwatson", "createdAt": "2020-12-23T02:50:46Z", "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/aggregation/AggregationFactory.java", "diffHunk": "@@ -61,5 +61,5 @@ static AggregationFactory minMaxSumCount() {\n    * @param instrumentValueType the type of recorded values for the {@code Instrument}.\n    * @return a new {@link Aggregation}.\n    */\n-  Aggregation create(InstrumentValueType instrumentValueType);\n+  <V extends Accumulation> Aggregation<V> create(InstrumentValueType instrumentValueType);", "originalCommit": "067caa8eeb1923a04f61fc1e98c2dd4b4e054555", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYxMzY5MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2394#discussion_r547613691", "bodyText": "Changed to T :)", "author": "bogdandrutu", "createdAt": "2020-12-23T03:03:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYxMDQ2OA=="}], "type": "inlineReview", "revised_code": {"commit": "f3738ac63b907536fe56a5e9dd44a68926394fc7", "chunk": "diff --git a/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/aggregation/AggregationFactory.java b/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/aggregation/AggregationFactory.java\nindex f2e98db6d..8f9217ca2 100644\n--- a/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/aggregation/AggregationFactory.java\n+++ b/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/aggregation/AggregationFactory.java\n\n@@ -61,5 +61,5 @@ public interface AggregationFactory {\n    * @param instrumentValueType the type of recorded values for the {@code Instrument}.\n    * @return a new {@link Aggregation}.\n    */\n-  <V extends Accumulation> Aggregation<V> create(InstrumentValueType instrumentValueType);\n+  <T extends Accumulation> Aggregation<T> create(InstrumentValueType instrumentValueType);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYxMTAwOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2394#discussion_r547611009", "bodyText": "for future, I might name this parameter \"accumulationsByLabels\". No need to change it now.", "author": "jkwatson", "createdAt": "2020-12-23T02:53:00Z", "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/aggregation/MinMaxSumCountAggregation.java", "diffHunk": "@@ -18,40 +18,33 @@\n import javax.annotation.concurrent.Immutable;\n \n @Immutable\n-final class MinMaxSumCountAggregation implements Aggregation {\n+final class MinMaxSumCountAggregation extends AbstractAggregation<MinMaxSumCountAccumulation> {\n   static final MinMaxSumCountAggregation LONG_INSTANCE =\n       new MinMaxSumCountAggregation(LongMinMaxSumCountAggregator.getFactory());\n   static final MinMaxSumCountAggregation DOUBLE_INSTANCE =\n       new MinMaxSumCountAggregation(DoubleMinMaxSumCountAggregator.getFactory());\n \n-  private final AggregatorFactory<?> aggregatorFactory;\n-\n-  private MinMaxSumCountAggregation(AggregatorFactory<?> aggregatorFactory) {\n-    this.aggregatorFactory = aggregatorFactory;\n-  }\n-\n-  @Override\n-  public AggregatorFactory<?> getAggregatorFactory() {\n-    return aggregatorFactory;\n+  private MinMaxSumCountAggregation(\n+      AggregatorFactory<MinMaxSumCountAccumulation> aggregatorFactory) {\n+    super(aggregatorFactory);\n   }\n \n   @Override\n-  public Accumulation merge(Accumulation a1, Accumulation a2) {\n-    MinMaxSumCountAccumulation minMaxSumCountAccumulation1 = (MinMaxSumCountAccumulation) a1;\n-    MinMaxSumCountAccumulation minMaxSumCountAccumulation2 = (MinMaxSumCountAccumulation) a2;\n+  public MinMaxSumCountAccumulation merge(\n+      MinMaxSumCountAccumulation a1, MinMaxSumCountAccumulation a2) {\n     return MinMaxSumCountAccumulation.create(\n-        minMaxSumCountAccumulation1.getCount() + minMaxSumCountAccumulation2.getCount(),\n-        minMaxSumCountAccumulation1.getSum() + minMaxSumCountAccumulation2.getSum(),\n-        Math.min(minMaxSumCountAccumulation1.getMin(), minMaxSumCountAccumulation2.getMin()),\n-        Math.max(minMaxSumCountAccumulation1.getMax(), minMaxSumCountAccumulation2.getMax()));\n+        a1.getCount() + a2.getCount(),\n+        a1.getSum() + a2.getSum(),\n+        Math.min(a1.getMin(), a2.getMin()),\n+        Math.max(a1.getMax(), a2.getMax()));\n   }\n \n   @Override\n   public MetricData toMetricData(\n       Resource resource,\n       InstrumentationLibraryInfo instrumentationLibraryInfo,\n       InstrumentDescriptor descriptor,\n-      Map<Labels, Accumulation> accumulationMap,\n+      Map<Labels, ? extends Accumulation> accumulationMap,", "originalCommit": "067caa8eeb1923a04f61fc1e98c2dd4b4e054555", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "f3738ac63b907536fe56a5e9dd44a68926394fc7", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f3738ac63b907536fe56a5e9dd44a68926394fc7", "message": "Adress feedback\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-12-23T03:03:57Z", "type": "commit"}]}