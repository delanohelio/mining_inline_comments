{"pr_number": 1880, "pr_title": "Add a JUnit5 extension for setting up OpenTelemetry in a test.", "pr_createdAt": "2020-10-26T06:47:02Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1880", "timeline": [{"oid": "2757d66cf76698684f94fd33c646e37cbb2adf69", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/2757d66cf76698684f94fd33c646e37cbb2adf69", "message": "Add a JUnit5 extension for setting up OpenTelemetry in a test.", "committedDate": "2020-10-26T06:45:51Z", "type": "commit"}, {"oid": "fd6cffcfe8d8db6a43aa63534b68d49b2186aa31", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/fd6cffcfe8d8db6a43aa63534b68d49b2186aa31", "message": "git add", "committedDate": "2020-10-26T06:50:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA1MDE4Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1880#discussion_r512050183", "bodyText": "Should we return OpenTelemetry, rather than SDK, so people don't create tracers using the SDK directly and expect that to be the normal way to operate? We could have a separate method that returns the TracerManagement interface, perhaps?", "author": "jkwatson", "createdAt": "2020-10-26T15:27:56Z", "path": "sdk/testing/src/main/java/io/opentelemetry/sdk/testing/junit5/OpenTelemetryExtension.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.testing.junit5;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.propagation.DefaultContextPropagators;\n+import io.opentelemetry.exporters.inmemory.InMemorySpanExporter;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.TracerSdkProvider;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n+import io.opentelemetry.trace.propagation.HttpTraceContext;\n+import java.util.List;\n+import org.junit.jupiter.api.extension.AfterAllCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+\n+/**\n+ * A JUnit5 extension which sets up the {@link OpenTelemetrySdk} for testing, resetting state\n+ * between tests.\n+ *\n+ * <pre>{@code\n+ * > class CoolTest {\n+ * >   {@literal @}RegisterExtension\n+ * >   static final OpenTelemetryExtension otelTesting = OpenTelemetryExtension.create();\n+ * >\n+ * >   private final Tracer tracer = otelTesting.getOpenTelemetry().getTracer(\"test\");\n+ * >\n+ * >   {@literal @}Test\n+ * >   void test() {\n+ * >     tracer.spanBuilder(\"name\").startSpan();\n+ * >     assertThat(otelTesting.getSpans()).containsExactly(expected);\n+ * >   }\n+ * >  }\n+ * }</pre>\n+ */\n+public class OpenTelemetryExtension\n+    implements BeforeEachCallback, BeforeAllCallback, AfterAllCallback {\n+\n+  /**\n+   * Returns a {@link OpenTelemetryExtension} with a default SDK initialized with an in-memory span\n+   * exporter and W3C trace context propagation.\n+   */\n+  public static OpenTelemetryExtension create() {\n+    InMemorySpanExporter spanExporter = InMemorySpanExporter.create();\n+\n+    TracerSdkProvider tracerProvider = TracerSdkProvider.builder().build();\n+    tracerProvider.addSpanProcessor(SimpleSpanProcessor.builder(spanExporter).build());\n+\n+    OpenTelemetrySdk openTelemetry =\n+        OpenTelemetrySdk.builder()\n+            .setPropagators(\n+                DefaultContextPropagators.builder()\n+                    .addTextMapPropagator(HttpTraceContext.getInstance())\n+                    .build())\n+            .setTracerProvider(tracerProvider)\n+            .build();\n+\n+    return new OpenTelemetryExtension(openTelemetry, spanExporter);\n+  }\n+\n+  private final OpenTelemetrySdk openTelemetry;\n+  private final InMemorySpanExporter spanExporter;\n+\n+  private OpenTelemetry previousGlobalOpenTelemetry;\n+\n+  private OpenTelemetryExtension(\n+      OpenTelemetrySdk openTelemetry, InMemorySpanExporter spanExporter) {\n+    this.openTelemetry = openTelemetry;\n+    this.spanExporter = spanExporter;\n+  }\n+\n+  /** Returns the {@link OpenTelemetrySdk} created by this extension. */\n+  public OpenTelemetrySdk getOpenTelemetry() {", "originalCommit": "fd6cffcfe8d8db6a43aa63534b68d49b2186aa31", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA1NTU0Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1880#discussion_r512055547", "bodyText": "It's a good point - I wasn't sure how important the distinction is in tests so made it this way. I originally had this in the top level package but moved it into the sdk package / artifact name after realizing it's only useful with the SDK. Instead of exposing API and management separately I figured this is simpler but open to alternatives.", "author": "anuraaga", "createdAt": "2020-10-26T15:34:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA1MDE4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE4NzUzOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1880#discussion_r512187538", "bodyText": "My only concern is having people develop good habits wrt. using the API vs. using the SDK, so I think I'd prefer having the 2 methods exposed separately, even if it's just for this test utility. We've had enough people try to use the SDK for writing instrumentation that anything we can do to get them to not do that would be good. :)", "author": "jkwatson", "createdAt": "2020-10-26T18:41:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA1MDE4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ2Njk0OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1880#discussion_r512466948", "bodyText": "Makes sense, thanks!", "author": "anuraaga", "createdAt": "2020-10-27T07:32:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA1MDE4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "7f2dcfdab86d96eb1c755e81ebbc1b9e42c387d2", "chunk": "diff --git a/sdk/testing/src/main/java/io/opentelemetry/sdk/testing/junit5/OpenTelemetryExtension.java b/sdk/testing/src/main/java/io/opentelemetry/sdk/testing/junit5/OpenTelemetryExtension.java\nindex 441684429..2fba5adeb 100644\n--- a/sdk/testing/src/main/java/io/opentelemetry/sdk/testing/junit5/OpenTelemetryExtension.java\n+++ b/sdk/testing/src/main/java/io/opentelemetry/sdk/testing/junit5/OpenTelemetryExtension.java\n\n@@ -9,6 +9,7 @@ import io.opentelemetry.OpenTelemetry;\n import io.opentelemetry.context.propagation.DefaultContextPropagators;\n import io.opentelemetry.exporters.inmemory.InMemorySpanExporter;\n import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.TracerSdkManagement;\n import io.opentelemetry.sdk.trace.TracerSdkProvider;\n import io.opentelemetry.sdk.trace.data.SpanData;\n import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n"}}, {"oid": "7f2dcfdab86d96eb1c755e81ebbc1b9e42c387d2", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/7f2dcfdab86d96eb1c755e81ebbc1b9e42c387d2", "message": "Split API and management accessors.", "committedDate": "2020-10-27T07:32:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU5MjUzOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1880#discussion_r512592539", "bodyText": "NIT:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * A JUnit5 extension which sets up the {@link OpenTelemetrySdk} for testing, resetting state\n          \n          \n            \n             * A JUnit5 extension which sets up the {@link OpenTelemetrySdk} for testing, and resetting state", "author": "thisthat", "createdAt": "2020-10-27T10:56:12Z", "path": "sdk/testing/src/main/java/io/opentelemetry/sdk/testing/junit5/OpenTelemetryExtension.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.testing.junit5;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.propagation.DefaultContextPropagators;\n+import io.opentelemetry.exporters.inmemory.InMemorySpanExporter;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.TracerSdkManagement;\n+import io.opentelemetry.sdk.trace.TracerSdkProvider;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n+import io.opentelemetry.trace.propagation.HttpTraceContext;\n+import java.util.List;\n+import org.junit.jupiter.api.extension.AfterAllCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+\n+/**\n+ * A JUnit5 extension which sets up the {@link OpenTelemetrySdk} for testing, resetting state", "originalCommit": "7f2dcfdab86d96eb1c755e81ebbc1b9e42c387d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b7194847c8c3ff286964086c1f95f640b3ff5ffe", "chunk": "diff --git a/sdk/testing/src/main/java/io/opentelemetry/sdk/testing/junit5/OpenTelemetryExtension.java b/sdk/testing/src/main/java/io/opentelemetry/sdk/testing/junit5/OpenTelemetryExtension.java\nindex 2fba5adeb..9cdc05883 100644\n--- a/sdk/testing/src/main/java/io/opentelemetry/sdk/testing/junit5/OpenTelemetryExtension.java\n+++ b/sdk/testing/src/main/java/io/opentelemetry/sdk/testing/junit5/OpenTelemetryExtension.java\n\n@@ -33,7 +33,7 @@ import org.junit.jupiter.api.extension.ExtensionContext;\n  * >\n  * >   {@literal @}Test\n  * >   void test() {\n- * >     tracer.spanBuilder(\"name\").startSpan();\n+ * >     tracer.spanBuilder(\"name\").startSpan().end();\n  * >     assertThat(otelTesting.getSpans()).containsExactly(expected);\n  * >   }\n  * >  }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU5NTI4NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1880#discussion_r512595285", "bodyText": "Maybe\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * >     tracer.spanBuilder(\"name\").startSpan();\n          \n          \n            \n             * >     tracer.spanBuilder(\"name\").startSpan().end();", "author": "thisthat", "createdAt": "2020-10-27T10:59:38Z", "path": "sdk/testing/src/main/java/io/opentelemetry/sdk/testing/junit5/OpenTelemetryExtension.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.testing.junit5;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.propagation.DefaultContextPropagators;\n+import io.opentelemetry.exporters.inmemory.InMemorySpanExporter;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.TracerSdkManagement;\n+import io.opentelemetry.sdk.trace.TracerSdkProvider;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n+import io.opentelemetry.trace.propagation.HttpTraceContext;\n+import java.util.List;\n+import org.junit.jupiter.api.extension.AfterAllCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+\n+/**\n+ * A JUnit5 extension which sets up the {@link OpenTelemetrySdk} for testing, resetting state\n+ * between tests.\n+ *\n+ * <pre>{@code\n+ * > class CoolTest {\n+ * >   {@literal @}RegisterExtension\n+ * >   static final OpenTelemetryExtension otelTesting = OpenTelemetryExtension.create();\n+ * >\n+ * >   private final Tracer tracer = otelTesting.getOpenTelemetry().getTracer(\"test\");\n+ * >\n+ * >   {@literal @}Test\n+ * >   void test() {\n+ * >     tracer.spanBuilder(\"name\").startSpan();", "originalCommit": "7f2dcfdab86d96eb1c755e81ebbc1b9e42c387d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b7194847c8c3ff286964086c1f95f640b3ff5ffe", "chunk": "diff --git a/sdk/testing/src/main/java/io/opentelemetry/sdk/testing/junit5/OpenTelemetryExtension.java b/sdk/testing/src/main/java/io/opentelemetry/sdk/testing/junit5/OpenTelemetryExtension.java\nindex 2fba5adeb..9cdc05883 100644\n--- a/sdk/testing/src/main/java/io/opentelemetry/sdk/testing/junit5/OpenTelemetryExtension.java\n+++ b/sdk/testing/src/main/java/io/opentelemetry/sdk/testing/junit5/OpenTelemetryExtension.java\n\n@@ -33,7 +33,7 @@ import org.junit.jupiter.api.extension.ExtensionContext;\n  * >\n  * >   {@literal @}Test\n  * >   void test() {\n- * >     tracer.spanBuilder(\"name\").startSpan();\n+ * >     tracer.spanBuilder(\"name\").startSpan().end();\n  * >     assertThat(otelTesting.getSpans()).containsExactly(expected);\n  * >   }\n  * >  }\n"}}, {"oid": "b7194847c8c3ff286964086c1f95f640b3ff5ffe", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b7194847c8c3ff286964086c1f95f640b3ff5ffe", "message": "Update sdk/testing/src/main/java/io/opentelemetry/sdk/testing/junit5/OpenTelemetryExtension.java\n\nCo-authored-by: Giovanni Liva <giovanni.liva@dynatrace.com>", "committedDate": "2020-10-27T23:40:32Z", "type": "commit"}, {"oid": "198f6d871dcc86f483a72acfb1e131748e573776", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/198f6d871dcc86f483a72acfb1e131748e573776", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into junit5-extension", "committedDate": "2020-10-27T23:42:31Z", "type": "commit"}, {"oid": "b01f0b859ffd8ff4d07096052aad4730ed5ec4cb", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b01f0b859ffd8ff4d07096052aad4730ed5ec4cb", "message": "Merge branch 'junit5-extension' of github.com:anuraaga/opentelemetry-java into junit5-extension", "committedDate": "2020-10-27T23:46:31Z", "type": "commit"}]}