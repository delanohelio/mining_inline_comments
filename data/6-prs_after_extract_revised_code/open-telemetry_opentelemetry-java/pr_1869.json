{"pr_number": 1869, "pr_title": "Span return `this` to enable chain calls", "pr_createdAt": "2020-10-23T03:23:33Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1869", "timeline": [{"oid": "c77f9918388255b38d9cd37dcaa34e159a67a249", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c77f9918388255b38d9cd37dcaa34e159a67a249", "message": "Span return `this` enable chain calls", "committedDate": "2020-10-23T03:22:24Z", "type": "commit"}, {"oid": "db2f9d4112e48a405c28a1aead76f0156f535e92", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/db2f9d4112e48a405c28a1aead76f0156f535e92", "message": "Fix spotlessCheck", "committedDate": "2020-10-23T03:28:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg3NDAyOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1869#discussion_r510874028", "bodyText": "Maybe I'm kind of obsessive - but I don't want to encourage users to do something with a Span after end() ;)", "author": "carlosalberto", "createdAt": "2020-10-23T13:13:03Z", "path": "api/src/main/java/io/opentelemetry/trace/Span.java", "diffHunk": "@@ -274,16 +289,19 @@ default void setAttribute(AttributeKey<Long> key, int value) {\n    * implementation.\n    *\n    * @param name the {@code Span} name.\n+   * @return this.\n    */\n-  void updateName(String name);\n+  Span updateName(String name);\n \n   /**\n    * Marks the end of {@code Span} execution.\n    *\n    * <p>Only the timing of the first end call for a given {@code Span} will be recorded, and\n    * implementations are free to ignore all further calls.\n+   *\n+   * @return this.\n    */\n-  void end();\n+  Span end();", "originalCommit": "db2f9d4112e48a405c28a1aead76f0156f535e92", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg3NTUxOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1869#discussion_r510875518", "bodyText": "Oh, that's true! Please keep the void here, @dengliming", "author": "Oberon00", "createdAt": "2020-10-23T13:15:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg3NDAyOA=="}], "type": "inlineReview", "revised_code": {"commit": "9eae56d1622b3dafd1414dcd6a50ba7c21276658", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/trace/Span.java b/api/src/main/java/io/opentelemetry/trace/Span.java\nindex df6a2f93d..480739bc4 100644\n--- a/api/src/main/java/io/opentelemetry/trace/Span.java\n+++ b/api/src/main/java/io/opentelemetry/trace/Span.java\n\n@@ -298,10 +298,8 @@ public interface Span extends ImplicitContextKeyed {\n    *\n    * <p>Only the timing of the first end call for a given {@code Span} will be recorded, and\n    * implementations are free to ignore all further calls.\n-   *\n-   * @return this.\n    */\n-  Span end();\n+  void end();\n \n   /**\n    * Marks the end of {@code Span} execution with the specified {@link EndSpanOptions}.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg3NjAwOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1869#discussion_r510876009", "bodyText": "Same here (#1869 (comment))", "author": "Oberon00", "createdAt": "2020-10-23T13:16:24Z", "path": "api/src/main/java/io/opentelemetry/trace/Span.java", "diffHunk": "@@ -295,8 +313,9 @@ default void setAttribute(AttributeKey<Long> key, int value) {\n    * explicit values are required, use {@link #end()}.\n    *\n    * @param endOptions the explicit {@link EndSpanOptions} for this {@code Span}.\n+   * @return this.\n    */\n-  void end(EndSpanOptions endOptions);\n+  Span end(EndSpanOptions endOptions);", "originalCommit": "db2f9d4112e48a405c28a1aead76f0156f535e92", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9eae56d1622b3dafd1414dcd6a50ba7c21276658", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/trace/Span.java b/api/src/main/java/io/opentelemetry/trace/Span.java\nindex df6a2f93d..480739bc4 100644\n--- a/api/src/main/java/io/opentelemetry/trace/Span.java\n+++ b/api/src/main/java/io/opentelemetry/trace/Span.java\n\n@@ -313,9 +311,8 @@ public interface Span extends ImplicitContextKeyed {\n    * explicit values are required, use {@link #end()}.\n    *\n    * @param endOptions the explicit {@link EndSpanOptions} for this {@code Span}.\n-   * @return this.\n    */\n-  Span end(EndSpanOptions endOptions);\n+  void end(EndSpanOptions endOptions);\n \n   /**\n    * Returns the {@code SpanContext} associated with this {@code Span}.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk0MDIxNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1869#discussion_r510940214", "bodyText": "blocking the PR until the end methods return void again.", "author": "jkwatson", "createdAt": "2020-10-23T14:52:42Z", "path": "api/src/main/java/io/opentelemetry/trace/PropagatedSpan.java", "diffHunk": "@@ -31,52 +31,84 @@ private PropagatedSpan(SpanContext spanContext) {\n   }\n \n   @Override\n-  public void setAttribute(String key, String value) {}\n+  public Span setAttribute(String key, String value) {\n+    return this;\n+  }\n \n   @Override\n-  public void setAttribute(String key, long value) {}\n+  public Span setAttribute(String key, long value) {\n+    return this;\n+  }\n \n   @Override\n-  public void setAttribute(String key, double value) {}\n+  public Span setAttribute(String key, double value) {\n+    return this;\n+  }\n \n   @Override\n-  public void setAttribute(String key, boolean value) {}\n+  public Span setAttribute(String key, boolean value) {\n+    return this;\n+  }\n \n   @Override\n-  public <T> void setAttribute(AttributeKey<T> key, T value) {}\n+  public <T> Span setAttribute(AttributeKey<T> key, T value) {\n+    return this;\n+  }\n \n   @Override\n-  public void addEvent(String name) {}\n+  public Span addEvent(String name) {\n+    return this;\n+  }\n \n   @Override\n-  public void addEvent(String name, long timestamp) {}\n+  public Span addEvent(String name, long timestamp) {\n+    return this;\n+  }\n \n   @Override\n-  public void addEvent(String name, Attributes attributes) {}\n+  public Span addEvent(String name, Attributes attributes) {\n+    return this;\n+  }\n \n   @Override\n-  public void addEvent(String name, Attributes attributes, long timestamp) {}\n+  public Span addEvent(String name, Attributes attributes, long timestamp) {\n+    return this;\n+  }\n \n   @Override\n-  public void setStatus(StatusCode canonicalCode) {}\n+  public Span setStatus(StatusCode canonicalCode) {\n+    return this;\n+  }\n \n   @Override\n-  public void setStatus(StatusCode canonicalCode, String description) {}\n+  public Span setStatus(StatusCode canonicalCode, String description) {\n+    return this;\n+  }\n \n   @Override\n-  public void recordException(Throwable exception) {}\n+  public Span recordException(Throwable exception) {\n+    return this;\n+  }\n \n   @Override\n-  public void recordException(Throwable exception, Attributes additionalAttributes) {}\n+  public Span recordException(Throwable exception, Attributes additionalAttributes) {\n+    return this;\n+  }\n \n   @Override\n-  public void updateName(String name) {}\n+  public Span updateName(String name) {\n+    return this;\n+  }\n \n   @Override\n-  public void end() {}\n+  public Span end() {", "originalCommit": "db2f9d4112e48a405c28a1aead76f0156f535e92", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk0MTQzMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1869#discussion_r510941430", "bodyText": "both of them \ud83d\ude03", "author": "Oberon00", "createdAt": "2020-10-23T14:54:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk0MDIxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk0NzEzOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1869#discussion_r510947138", "bodyText": "yes. didn't feel the need to beat the dead horse any more. :)", "author": "jkwatson", "createdAt": "2020-10-23T15:02:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk0MDIxNA=="}], "type": "inlineReview", "revised_code": {"commit": "9eae56d1622b3dafd1414dcd6a50ba7c21276658", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/trace/PropagatedSpan.java b/api/src/main/java/io/opentelemetry/trace/PropagatedSpan.java\nindex b12f84f67..42447a594 100644\n--- a/api/src/main/java/io/opentelemetry/trace/PropagatedSpan.java\n+++ b/api/src/main/java/io/opentelemetry/trace/PropagatedSpan.java\n\n@@ -101,14 +101,10 @@ final class PropagatedSpan implements Span {\n   }\n \n   @Override\n-  public Span end() {\n-    return this;\n-  }\n+  public void end() {}\n \n   @Override\n-  public Span end(EndSpanOptions endOptions) {\n-    return this;\n-  }\n+  public void end(EndSpanOptions endOptions) {}\n \n   @Override\n   public SpanContext getSpanContext() {\n"}}, {"oid": "9eae56d1622b3dafd1414dcd6a50ba7c21276658", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9eae56d1622b3dafd1414dcd6a50ba7c21276658", "message": "Keep return void in end method", "committedDate": "2020-10-23T16:20:42Z", "type": "commit"}]}