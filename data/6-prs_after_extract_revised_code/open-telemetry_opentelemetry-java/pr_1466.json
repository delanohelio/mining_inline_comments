{"pr_number": 1466, "pr_title": "Support system property otel.resource.attributes corresponding to OTEL_RESOURCE_ATTRIBUTES", "pr_createdAt": "2020-07-25T07:27:55Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1466", "timeline": [{"oid": "81cc3c1db57d1949d0bf2968d5d35d5907ede889", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/81cc3c1db57d1949d0bf2968d5d35d5907ede889", "message": "Support system property otel.resource.attributes corresponding to OTEL_RESOURCE_ATTRIBUTES", "committedDate": "2020-07-25T07:25:25Z", "type": "commit"}, {"oid": "ce8c2c5e5242b34a73905cc801bda62e1a71a6ab", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ce8c2c5e5242b34a73905cc801bda62e1a71a6ab", "message": "Fix code format", "committedDate": "2020-07-25T07:46:27Z", "type": "commit"}, {"oid": "af5c3c8ab939a0b00522fffebf95396f78684edf", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/af5c3c8ab939a0b00522fffebf95396f78684edf", "message": "Add testcase", "committedDate": "2020-07-25T09:31:11Z", "type": "commit"}, {"oid": "41d78cd1b4c2a27f0d864287e06581590802441e", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/41d78cd1b4c2a27f0d864287e06581590802441e", "message": "Fix testcase", "committedDate": "2020-07-25T16:23:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQyNTQyNw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1466#discussion_r460425427", "bodyText": "the nice thing about using ConfigBuilder is that you only need to handle system property style names, and it will automatically translate those to env var style names when reading env vars (via NamingConvention)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final String OTEL_RESOURCE_ATTRIBUTES_ENV = \"OTEL_RESOURCE_ATTRIBUTES\";", "author": "trask", "createdAt": "2020-07-25T17:19:22Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/resources/EnvVarResource.java", "diffHunk": "@@ -75,4 +78,35 @@ static Attributes parseResourceAttributes(@Nullable String rawEnvAttributes) {\n       return attrBuilders.build();\n     }\n   }\n+\n+  /** Builder utility for this EnvVarResource. */\n+  public static class Builder extends ConfigBuilder<Builder> {\n+    private static final String OTEL_RESOURCE_ATTRIBUTES_ENV = \"OTEL_RESOURCE_ATTRIBUTES\";", "originalCommit": "41d78cd1b4c2a27f0d864287e06581590802441e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "42d2441bf933a29ae662974f022ae64a75e0442d", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/resources/EnvVarResource.java b/sdk/src/main/java/io/opentelemetry/sdk/resources/EnvVarResource.java\nindex 2882f3106..4425461b8 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/resources/EnvVarResource.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/resources/EnvVarResource.java\n\n@@ -80,33 +78,28 @@ public final class EnvVarResource {\n   }\n \n   /** Builder utility for this EnvVarResource. */\n-  public static class Builder extends ConfigBuilder<Builder> {\n-    private static final String OTEL_RESOURCE_ATTRIBUTES_ENV = \"OTEL_RESOURCE_ATTRIBUTES\";\n+  private static class Builder extends ConfigBuilder<Builder> {\n     private static final String OTEL_RESOURCE_ATTRIBUTES_KEY = \"otel.resource.attributes\";\n     private String envAttributes;\n \n     @Override\n     protected Builder fromConfigMap(\n         Map<String, String> configMap, NamingConvention namingConvention) {\n-      String envAttributesValue = getStringProperty(OTEL_RESOURCE_ATTRIBUTES_ENV, configMap);\n-      if (envAttributesValue != null) {\n-        this.setEnvAttributes(envAttributesValue);\n-      }\n-\n-      envAttributesValue = getStringProperty(OTEL_RESOURCE_ATTRIBUTES_KEY, configMap);\n+      configMap = namingConvention.normalize(configMap);\n+      String envAttributesValue = getStringProperty(OTEL_RESOURCE_ATTRIBUTES_KEY, configMap);\n       if (envAttributesValue != null) {\n         this.setEnvAttributes(envAttributesValue);\n       }\n       return this;\n     }\n \n-    public String getEnvAttributes() {\n-      return envAttributes;\n-    }\n-\n     public Builder setEnvAttributes(String envAttributes) {\n       this.envAttributes = envAttributes;\n       return this;\n     }\n+\n+    public Resource build() {\n+      return Resource.create(parseResourceAttributes(this.envAttributes));\n+    }\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQyNTUxNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1466#discussion_r460425515", "bodyText": "see comment above about automatic env var name handling by ConfigBuilder\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  String envAttributesValue = getStringProperty(OTEL_RESOURCE_ATTRIBUTES_ENV, configMap);\n          \n          \n            \n                  if (envAttributesValue != null) {\n          \n          \n            \n                    this.setEnvAttributes(envAttributesValue);\n          \n          \n            \n                  }", "author": "trask", "createdAt": "2020-07-25T17:20:19Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/resources/EnvVarResource.java", "diffHunk": "@@ -75,4 +78,35 @@ static Attributes parseResourceAttributes(@Nullable String rawEnvAttributes) {\n       return attrBuilders.build();\n     }\n   }\n+\n+  /** Builder utility for this EnvVarResource. */\n+  public static class Builder extends ConfigBuilder<Builder> {\n+    private static final String OTEL_RESOURCE_ATTRIBUTES_ENV = \"OTEL_RESOURCE_ATTRIBUTES\";\n+    private static final String OTEL_RESOURCE_ATTRIBUTES_KEY = \"otel.resource.attributes\";\n+    private String envAttributes;\n+\n+    @Override\n+    protected Builder fromConfigMap(\n+        Map<String, String> configMap, NamingConvention namingConvention) {\n+      String envAttributesValue = getStringProperty(OTEL_RESOURCE_ATTRIBUTES_ENV, configMap);\n+      if (envAttributesValue != null) {\n+        this.setEnvAttributes(envAttributesValue);\n+      }\n+", "originalCommit": "41d78cd1b4c2a27f0d864287e06581590802441e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "42d2441bf933a29ae662974f022ae64a75e0442d", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/resources/EnvVarResource.java b/sdk/src/main/java/io/opentelemetry/sdk/resources/EnvVarResource.java\nindex 2882f3106..4425461b8 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/resources/EnvVarResource.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/resources/EnvVarResource.java\n\n@@ -80,33 +78,28 @@ public final class EnvVarResource {\n   }\n \n   /** Builder utility for this EnvVarResource. */\n-  public static class Builder extends ConfigBuilder<Builder> {\n-    private static final String OTEL_RESOURCE_ATTRIBUTES_ENV = \"OTEL_RESOURCE_ATTRIBUTES\";\n+  private static class Builder extends ConfigBuilder<Builder> {\n     private static final String OTEL_RESOURCE_ATTRIBUTES_KEY = \"otel.resource.attributes\";\n     private String envAttributes;\n \n     @Override\n     protected Builder fromConfigMap(\n         Map<String, String> configMap, NamingConvention namingConvention) {\n-      String envAttributesValue = getStringProperty(OTEL_RESOURCE_ATTRIBUTES_ENV, configMap);\n-      if (envAttributesValue != null) {\n-        this.setEnvAttributes(envAttributesValue);\n-      }\n-\n-      envAttributesValue = getStringProperty(OTEL_RESOURCE_ATTRIBUTES_KEY, configMap);\n+      configMap = namingConvention.normalize(configMap);\n+      String envAttributesValue = getStringProperty(OTEL_RESOURCE_ATTRIBUTES_KEY, configMap);\n       if (envAttributesValue != null) {\n         this.setEnvAttributes(envAttributesValue);\n       }\n       return this;\n     }\n \n-    public String getEnvAttributes() {\n-      return envAttributes;\n-    }\n-\n     public Builder setEnvAttributes(String envAttributes) {\n       this.envAttributes = envAttributes;\n       return this;\n     }\n+\n+    public Resource build() {\n+      return Resource.create(parseResourceAttributes(this.envAttributes));\n+    }\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQyNTY0NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1466#discussion_r460425645", "bodyText": "I'd suggest renaming this to build and doing the parsing and returning Resource here\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public String getEnvAttributes() {\n          \n          \n            \n                public Resource build() {", "author": "trask", "createdAt": "2020-07-25T17:21:50Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/resources/EnvVarResource.java", "diffHunk": "@@ -75,4 +78,35 @@ static Attributes parseResourceAttributes(@Nullable String rawEnvAttributes) {\n       return attrBuilders.build();\n     }\n   }\n+\n+  /** Builder utility for this EnvVarResource. */\n+  public static class Builder extends ConfigBuilder<Builder> {\n+    private static final String OTEL_RESOURCE_ATTRIBUTES_ENV = \"OTEL_RESOURCE_ATTRIBUTES\";\n+    private static final String OTEL_RESOURCE_ATTRIBUTES_KEY = \"otel.resource.attributes\";\n+    private String envAttributes;\n+\n+    @Override\n+    protected Builder fromConfigMap(\n+        Map<String, String> configMap, NamingConvention namingConvention) {\n+      String envAttributesValue = getStringProperty(OTEL_RESOURCE_ATTRIBUTES_ENV, configMap);\n+      if (envAttributesValue != null) {\n+        this.setEnvAttributes(envAttributesValue);\n+      }\n+\n+      envAttributesValue = getStringProperty(OTEL_RESOURCE_ATTRIBUTES_KEY, configMap);\n+      if (envAttributesValue != null) {\n+        this.setEnvAttributes(envAttributesValue);\n+      }\n+      return this;\n+    }\n+\n+    public String getEnvAttributes() {", "originalCommit": "41d78cd1b4c2a27f0d864287e06581590802441e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "42d2441bf933a29ae662974f022ae64a75e0442d", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/resources/EnvVarResource.java b/sdk/src/main/java/io/opentelemetry/sdk/resources/EnvVarResource.java\nindex 2882f3106..4425461b8 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/resources/EnvVarResource.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/resources/EnvVarResource.java\n\n@@ -80,33 +78,28 @@ public final class EnvVarResource {\n   }\n \n   /** Builder utility for this EnvVarResource. */\n-  public static class Builder extends ConfigBuilder<Builder> {\n-    private static final String OTEL_RESOURCE_ATTRIBUTES_ENV = \"OTEL_RESOURCE_ATTRIBUTES\";\n+  private static class Builder extends ConfigBuilder<Builder> {\n     private static final String OTEL_RESOURCE_ATTRIBUTES_KEY = \"otel.resource.attributes\";\n     private String envAttributes;\n \n     @Override\n     protected Builder fromConfigMap(\n         Map<String, String> configMap, NamingConvention namingConvention) {\n-      String envAttributesValue = getStringProperty(OTEL_RESOURCE_ATTRIBUTES_ENV, configMap);\n-      if (envAttributesValue != null) {\n-        this.setEnvAttributes(envAttributesValue);\n-      }\n-\n-      envAttributesValue = getStringProperty(OTEL_RESOURCE_ATTRIBUTES_KEY, configMap);\n+      configMap = namingConvention.normalize(configMap);\n+      String envAttributesValue = getStringProperty(OTEL_RESOURCE_ATTRIBUTES_KEY, configMap);\n       if (envAttributesValue != null) {\n         this.setEnvAttributes(envAttributesValue);\n       }\n       return this;\n     }\n \n-    public String getEnvAttributes() {\n-      return envAttributes;\n-    }\n-\n     public Builder setEnvAttributes(String envAttributes) {\n       this.envAttributes = envAttributes;\n       return this;\n     }\n+\n+    public Resource build() {\n+      return Resource.create(parseResourceAttributes(this.envAttributes));\n+    }\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQyNjA2MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1466#discussion_r460426060", "bodyText": "I'd suggest making this private (or package-protected if you need @VisibleForTesting). it doesn't seem like public builder is needed at this time at lease\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static class Builder extends ConfigBuilder<Builder> {\n          \n          \n            \n              private static class Builder extends ConfigBuilder<Builder> {", "author": "trask", "createdAt": "2020-07-25T17:26:25Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/resources/EnvVarResource.java", "diffHunk": "@@ -75,4 +78,35 @@ static Attributes parseResourceAttributes(@Nullable String rawEnvAttributes) {\n       return attrBuilders.build();\n     }\n   }\n+\n+  /** Builder utility for this EnvVarResource. */\n+  public static class Builder extends ConfigBuilder<Builder> {", "originalCommit": "41d78cd1b4c2a27f0d864287e06581590802441e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "42d2441bf933a29ae662974f022ae64a75e0442d", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/resources/EnvVarResource.java b/sdk/src/main/java/io/opentelemetry/sdk/resources/EnvVarResource.java\nindex 2882f3106..4425461b8 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/resources/EnvVarResource.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/resources/EnvVarResource.java\n\n@@ -80,33 +78,28 @@ public final class EnvVarResource {\n   }\n \n   /** Builder utility for this EnvVarResource. */\n-  public static class Builder extends ConfigBuilder<Builder> {\n-    private static final String OTEL_RESOURCE_ATTRIBUTES_ENV = \"OTEL_RESOURCE_ATTRIBUTES\";\n+  private static class Builder extends ConfigBuilder<Builder> {\n     private static final String OTEL_RESOURCE_ATTRIBUTES_KEY = \"otel.resource.attributes\";\n     private String envAttributes;\n \n     @Override\n     protected Builder fromConfigMap(\n         Map<String, String> configMap, NamingConvention namingConvention) {\n-      String envAttributesValue = getStringProperty(OTEL_RESOURCE_ATTRIBUTES_ENV, configMap);\n-      if (envAttributesValue != null) {\n-        this.setEnvAttributes(envAttributesValue);\n-      }\n-\n-      envAttributesValue = getStringProperty(OTEL_RESOURCE_ATTRIBUTES_KEY, configMap);\n+      configMap = namingConvention.normalize(configMap);\n+      String envAttributesValue = getStringProperty(OTEL_RESOURCE_ATTRIBUTES_KEY, configMap);\n       if (envAttributesValue != null) {\n         this.setEnvAttributes(envAttributesValue);\n       }\n       return this;\n     }\n \n-    public String getEnvAttributes() {\n-      return envAttributes;\n-    }\n-\n     public Builder setEnvAttributes(String envAttributes) {\n       this.envAttributes = envAttributes;\n       return this;\n     }\n+\n+    public Resource build() {\n+      return Resource.create(parseResourceAttributes(this.envAttributes));\n+    }\n   }\n }\n"}}, {"oid": "42d2441bf933a29ae662974f022ae64a75e0442d", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/42d2441bf933a29ae662974f022ae64a75e0442d", "message": "Fix review", "committedDate": "2020-07-25T18:41:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1NDc4Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1466#discussion_r460554783", "bodyText": "We most likely need to later update the code for ConfigBuilder to live right under common, instead of common.export, as this configuration pattern is useful in other scenarios (cc @thisthat )", "author": "carlosalberto", "createdAt": "2020-07-26T17:48:13Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/resources/EnvVarResource.java", "diffHunk": "@@ -18,6 +18,8 @@\n \n import com.google.common.annotations.VisibleForTesting;\n import io.opentelemetry.common.Attributes;\n+import io.opentelemetry.sdk.common.export.ConfigBuilder;", "originalCommit": "42d2441bf933a29ae662974f022ae64a75e0442d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b45fcb8287d9042a7415b4b87524451a876808ae", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/resources/EnvVarResource.java b/sdk/src/main/java/io/opentelemetry/sdk/resources/EnvAutodetectResource.java\nsimilarity index 88%\nrename from sdk/src/main/java/io/opentelemetry/sdk/resources/EnvVarResource.java\nrename to sdk/src/main/java/io/opentelemetry/sdk/resources/EnvAutodetectResource.java\nindex 4425461b8..d635fafe0 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/resources/EnvVarResource.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/resources/EnvAutodetectResource.java\n\n@@ -25,23 +25,23 @@ import javax.annotation.concurrent.ThreadSafe;\n \n /**\n  * Provides a framework for detection of resource information from the environment variable\n- * \"OTEL_RESOURCE_ATTRIBUTES\".\n+ * \"OTEL_RESOURCE_ATTRIBUTES\" and system properties \"otel.resource.attributes\".\n  *\n  * @since 0.1.0\n  */\n @ThreadSafe\n-public final class EnvVarResource {\n+public final class EnvAutodetectResource {\n   private static final String ATTRIBUTE_LIST_SPLITTER = \",\";\n   private static final String ATTRIBUTE_KEY_VALUE_SPLITTER = \"=\";\n \n   private static final Resource ENV_VAR_RESOURCE =\n       new Builder().readEnvironmentVariables().readSystemProperties().build();\n \n-  private EnvVarResource() {}\n+  private EnvAutodetectResource() {}\n \n   /**\n    * Returns a {@link Resource}. This resource information is loaded from the\n-   * OTEL_RESOURCE_ATTRIBUTES environment variable.\n+   * OTEL_RESOURCE_ATTRIBUTES environment variable or otel.resource.attributes system properties.\n    *\n    * @return a {@code Resource}.\n    * @since 0.1.0\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1NTEzOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1466#discussion_r460555138", "bodyText": "We should have this set right in the test itself (the rest of the tests don't need this part).", "author": "carlosalberto", "createdAt": "2020-07-26T17:51:43Z", "path": "sdk/src/test/java/io/opentelemetry/sdk/resources/EnvVarResourceTest.java", "diffHunk": "@@ -67,4 +68,15 @@ public void parseResourceAttributes_quotes() {\n     Attributes result = EnvVarResource.parseResourceAttributes(\"value=\\\"foo\\\"\");\n     assertThat(result).isEqualTo(Attributes.of(\"value\", stringAttributeValue(\"foo\")));\n   }\n+\n+  @BeforeClass\n+  public static void init() {\n+    System.setProperty(\"otel.resource.attributes\", \"value = foo\");", "originalCommit": "42d2441bf933a29ae662974f022ae64a75e0442d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDYxODkyMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1466#discussion_r460618922", "bodyText": "Hi~ This is because I put this static final field. The following code\uff1a\nprivate static final Resource ENV_VAR_RESOURCE =\n      new Builder().readEnvironmentVariables().readSystemProperties().build();\n\n(it may inited before) If I put it in test itself, the test may fail.", "author": "dengliming", "createdAt": "2020-07-27T02:44:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1NTEzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDYyMjE2OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1466#discussion_r460622168", "bodyText": "Hmm, isn't that true if the class happens to be loaded before this test is run? It seems like a lucky coincidence that isn't currently happening in the build.\nI think to make this test robust we should stick with calling new Builder().readEnvironmentVariables().readSystemProperties().build(); in the test instead of relying on the static instance being loaded after the test.\nAlso, make sure you reset the value of the property after the test is complete.", "author": "anuraaga", "createdAt": "2020-07-27T02:59:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1NTEzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg3MTIwNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1466#discussion_r460871205", "bodyText": "agree. fixed at lastest commit. Thanks.", "author": "dengliming", "createdAt": "2020-07-27T12:59:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1NTEzOA=="}], "type": "inlineReview", "revised_code": {"commit": "ab75e5270564068c862f90a537578b3381eb3281", "chunk": "diff --git a/sdk/src/test/java/io/opentelemetry/sdk/resources/EnvVarResourceTest.java b/sdk/src/test/java/io/opentelemetry/sdk/resources/EnvVarResourceTest.java\nindex bae0e7527..52ae914dc 100644\n--- a/sdk/src/test/java/io/opentelemetry/sdk/resources/EnvVarResourceTest.java\n+++ b/sdk/src/test/java/io/opentelemetry/sdk/resources/EnvVarResourceTest.java\n\n@@ -69,14 +68,14 @@ public class EnvVarResourceTest {\n     assertThat(result).isEqualTo(Attributes.of(\"value\", stringAttributeValue(\"foo\")));\n   }\n \n-  @BeforeClass\n-  public static void init() {\n-    System.setProperty(\"otel.resource.attributes\", \"value = foo\");\n-  }\n-\n   @Test\n   public void getResourceAttributes_properties() {\n-    Attributes result = (Attributes) EnvVarResource.getResource().getAttributes();\n+    String key = \"otel.resource.attributes\";\n+    System.setProperty(key, \"value = foo\");\n+    Resource resource =\n+        new EnvVarResource.Builder().readEnvironmentVariables().readSystemProperties().build();\n+    Attributes result = (Attributes) resource.getAttributes();\n     assertThat(result).isEqualTo(Attributes.of(\"value\", stringAttributeValue(\"foo\")));\n+    System.clearProperty(key);\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY0MTUzMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1466#discussion_r460641530", "bodyText": "The name of the class seems to be incorrect now. At least Var part.", "author": "iNikem", "createdAt": "2020-07-27T04:33:50Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/resources/EnvVarResource.java", "diffHunk": "@@ -29,12 +31,11 @@\n  */\n @ThreadSafe\n public final class EnvVarResource {", "originalCommit": "42d2441bf933a29ae662974f022ae64a75e0442d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY1MTE0MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1466#discussion_r460651141", "bodyText": "Ah, now that it supports system properties also, got it (took me some time \ud83d\ude02)", "author": "trask", "createdAt": "2020-07-27T05:16:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY0MTUzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgzMTQyNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1466#discussion_r460831425", "bodyText": "@iNikem Oh, indeed, I was meant to mention the rename as well.I suggest it being renamed to something like EnvAutodetectResource or AutodetectResource, and update its javadoc to mention that now we do env vars + system properties detection.", "author": "carlosalberto", "createdAt": "2020-07-27T11:43:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY0MTUzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg3MTg2Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1466#discussion_r460871863", "bodyText": "Agree. @iNikem @trask @thisthat WDYT?", "author": "dengliming", "createdAt": "2020-07-27T13:00:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY0MTUzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg4NTY0OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1466#discussion_r460885648", "bodyText": "I would prefer EnvAutodetectResource over AutodetectResource since we only look for a specific env var/sys property.", "author": "thisthat", "createdAt": "2020-07-27T13:23:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY0MTUzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkxNTU4Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1466#discussion_r460915582", "bodyText": "Already renamed class name EnvVarResource to EnvAutodetectResource and update doc.", "author": "dengliming", "createdAt": "2020-07-27T14:06:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY0MTUzMA=="}], "type": "inlineReview", "revised_code": {"commit": "b45fcb8287d9042a7415b4b87524451a876808ae", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/resources/EnvVarResource.java b/sdk/src/main/java/io/opentelemetry/sdk/resources/EnvAutodetectResource.java\nsimilarity index 88%\nrename from sdk/src/main/java/io/opentelemetry/sdk/resources/EnvVarResource.java\nrename to sdk/src/main/java/io/opentelemetry/sdk/resources/EnvAutodetectResource.java\nindex 4425461b8..d635fafe0 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/resources/EnvVarResource.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/resources/EnvAutodetectResource.java\n\n@@ -25,23 +25,23 @@ import javax.annotation.concurrent.ThreadSafe;\n \n /**\n  * Provides a framework for detection of resource information from the environment variable\n- * \"OTEL_RESOURCE_ATTRIBUTES\".\n+ * \"OTEL_RESOURCE_ATTRIBUTES\" and system properties \"otel.resource.attributes\".\n  *\n  * @since 0.1.0\n  */\n @ThreadSafe\n-public final class EnvVarResource {\n+public final class EnvAutodetectResource {\n   private static final String ATTRIBUTE_LIST_SPLITTER = \",\";\n   private static final String ATTRIBUTE_KEY_VALUE_SPLITTER = \"=\";\n \n   private static final Resource ENV_VAR_RESOURCE =\n       new Builder().readEnvironmentVariables().readSystemProperties().build();\n \n-  private EnvVarResource() {}\n+  private EnvAutodetectResource() {}\n \n   /**\n    * Returns a {@link Resource}. This resource information is loaded from the\n-   * OTEL_RESOURCE_ATTRIBUTES environment variable.\n+   * OTEL_RESOURCE_ATTRIBUTES environment variable or otel.resource.attributes system properties.\n    *\n    * @return a {@code Resource}.\n    * @since 0.1.0\n"}}, {"oid": "ab75e5270564068c862f90a537578b3381eb3281", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ab75e5270564068c862f90a537578b3381eb3281", "message": "Fix review", "committedDate": "2020-07-27T12:58:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg4MzkyMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1466#discussion_r460883920", "bodyText": "Please, add also a test for environment variables. An example is available here: \n  \n    \n      opentelemetry-java/sdk/src/test/java/io/opentelemetry/sdk/common/export/ConfigBuilderTest.java\n    \n    \n         Line 270\n      in\n      46f0c5f\n    \n    \n    \n    \n\n        \n          \n           public static class ConfigurationEnvVarsTest {", "author": "thisthat", "createdAt": "2020-07-27T13:20:26Z", "path": "sdk/src/test/java/io/opentelemetry/sdk/resources/EnvVarResourceTest.java", "diffHunk": "@@ -67,4 +67,15 @@ public void parseResourceAttributes_quotes() {\n     Attributes result = EnvVarResource.parseResourceAttributes(\"value=\\\"foo\\\"\");\n     assertThat(result).isEqualTo(Attributes.of(\"value\", stringAttributeValue(\"foo\")));\n   }\n+\n+  @Test\n+  public void getResourceAttributes_properties() {", "originalCommit": "ab75e5270564068c862f90a537578b3381eb3281", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg5ODg4Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1466#discussion_r460898882", "bodyText": "fixed at lastest commit.", "author": "dengliming", "createdAt": "2020-07-27T13:43:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg4MzkyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkwMjUyMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1466#discussion_r460902521", "bodyText": "Thank you :)", "author": "thisthat", "createdAt": "2020-07-27T13:48:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg4MzkyMA=="}], "type": "inlineReview", "revised_code": {"commit": "cabe8e0712133aab543fa41426b0da4c793cb957", "chunk": "diff --git a/sdk/src/test/java/io/opentelemetry/sdk/resources/EnvVarResourceTest.java b/sdk/src/test/java/io/opentelemetry/sdk/resources/EnvVarResourceTest.java\nindex 52ae914dc..e6a1d15d7 100644\n--- a/sdk/src/test/java/io/opentelemetry/sdk/resources/EnvVarResourceTest.java\n+++ b/sdk/src/test/java/io/opentelemetry/sdk/resources/EnvVarResourceTest.java\n\n@@ -78,4 +82,19 @@ public class EnvVarResourceTest {\n     assertThat(result).isEqualTo(Attributes.of(\"value\", stringAttributeValue(\"foo\")));\n     System.clearProperty(key);\n   }\n+\n+  @RunWith(JUnit4.class)\n+  public static class ResourceAttributesEnvVarsTest {\n+    @Rule\n+    public final EnvironmentVariables environmentVariables =\n+        new EnvironmentVariables().set(\"OTEL_RESOURCE_ATTRIBUTES\", \"value = foo\");\n+\n+    @Test\n+    public void getResourceAttributes_envvars() {\n+      Resource resource =\n+          new EnvVarResource.Builder().readEnvironmentVariables().readSystemProperties().build();\n+      Attributes result = (Attributes) resource.getAttributes();\n+      assertThat(result).isEqualTo(Attributes.of(\"value\", stringAttributeValue(\"foo\")));\n+    }\n+  }\n }\n"}}, {"oid": "cabe8e0712133aab543fa41426b0da4c793cb957", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/cabe8e0712133aab543fa41426b0da4c793cb957", "message": "Add test for environment variables.", "committedDate": "2020-07-27T13:42:42Z", "type": "commit"}, {"oid": "b45fcb8287d9042a7415b4b87524451a876808ae", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b45fcb8287d9042a7415b4b87524451a876808ae", "message": "Rename EnvVarResource to EnvAutodetectResource and update doc.", "committedDate": "2020-07-27T14:05:55Z", "type": "commit"}, {"oid": "c3d251fdcb0571cf9ba0416b3bff9981e2153dc9", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c3d251fdcb0571cf9ba0416b3bff9981e2153dc9", "message": "Fix main style", "committedDate": "2020-07-27T14:16:01Z", "type": "commit"}]}