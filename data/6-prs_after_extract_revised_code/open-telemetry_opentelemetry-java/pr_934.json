{"pr_number": 934, "pr_title": "Small cleanups in async processor", "pr_createdAt": "2020-02-26T17:41:17Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/934", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY2MDI0MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/934#discussion_r384660240", "bodyText": "this is duplicated code. can it be moved to a method?", "author": "jkwatson", "createdAt": "2020-02-26T17:50:36Z", "path": "sdk_contrib/async_processor/src/main/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorEventQueue.java", "diffHunk": "@@ -102,73 +102,82 @@ public DisruptorEvent newInstance() {\n     this.blocking = blocking;\n   }\n \n-  void enqueue(ReadableSpan readableSpan, EventType eventType) {\n-    enqueue(readableSpan, eventType, null);\n-  }\n-\n-  // Enqueues an event on the {@link DisruptorEventQueue}.\n-  void enqueue(ReadableSpan readableSpan, EventType eventType, CountDownLatch flushLatch) {\n+  void enqueueStartEvent(ReadableSpan span) {\n     if (isShutdown) {\n       if (!loggedShutdownMessage.getAndSet(true)) {\n         logger.info(\"Attempted to enqueue entry after Disruptor shutdown.\");\n       }\n       return;\n     }\n+    enqueue(EventType.ON_START, span, null);\n+  }\n \n-    if (blocking) {\n-      ringBuffer.publishEvent(TRANSLATOR_THREE_ARG, eventType, readableSpan, flushLatch);\n-    } else {\n-      // TODO: Record metrics if element not added.\n-      ringBuffer.tryPublishEvent(TRANSLATOR_THREE_ARG, eventType, readableSpan, flushLatch);\n+  void enqueueEndEvent(ReadableSpan span) {\n+    if (isShutdown) {\n+      if (!loggedShutdownMessage.getAndSet(true)) {\n+        logger.info(\"Attempted to enqueue entry after Disruptor shutdown.\");\n+      }", "originalCommit": "a14489025ead6072043d16ecff0155edca74114f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc0NzQ4MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/934#discussion_r384747481", "bodyText": "Customized the messages to be more relevant.", "author": "bogdandrutu", "createdAt": "2020-02-26T20:31:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY2MDI0MA=="}], "type": "inlineReview", "revised_code": {"commit": "c83ec2064ea28b8130d562b4b8f6a0298744d2f0", "chunk": "diff --git a/sdk_contrib/async_processor/src/main/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorEventQueue.java b/sdk_contrib/async_processor/src/main/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorEventQueue.java\nindex c9dd43b43..ca2da1398 100644\n--- a/sdk_contrib/async_processor/src/main/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorEventQueue.java\n+++ b/sdk_contrib/async_processor/src/main/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorEventQueue.java\n\n@@ -105,7 +105,7 @@ final class DisruptorEventQueue {\n   void enqueueStartEvent(ReadableSpan span) {\n     if (isShutdown) {\n       if (!loggedShutdownMessage.getAndSet(true)) {\n-        logger.info(\"Attempted to enqueue entry after Disruptor shutdown.\");\n+        logger.info(\"Attempted to enqueue start event after Disruptor shutdown.\");\n       }\n       return;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY2MzA5NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/934#discussion_r384663095", "bodyText": "synchronizing on this is potentially dangerous, as you don't have control over who else might try to grab your monitor and keep this from ever executing.", "author": "jkwatson", "createdAt": "2020-02-26T17:55:51Z", "path": "sdk_contrib/async_processor/src/main/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorEventQueue.java", "diffHunk": "@@ -102,73 +102,82 @@ public DisruptorEvent newInstance() {\n     this.blocking = blocking;\n   }\n \n-  void enqueue(ReadableSpan readableSpan, EventType eventType) {\n-    enqueue(readableSpan, eventType, null);\n-  }\n-\n-  // Enqueues an event on the {@link DisruptorEventQueue}.\n-  void enqueue(ReadableSpan readableSpan, EventType eventType, CountDownLatch flushLatch) {\n+  void enqueueStartEvent(ReadableSpan span) {\n     if (isShutdown) {\n       if (!loggedShutdownMessage.getAndSet(true)) {\n         logger.info(\"Attempted to enqueue entry after Disruptor shutdown.\");\n       }\n       return;\n     }\n+    enqueue(EventType.ON_START, span, null);\n+  }\n \n-    if (blocking) {\n-      ringBuffer.publishEvent(TRANSLATOR_THREE_ARG, eventType, readableSpan, flushLatch);\n-    } else {\n-      // TODO: Record metrics if element not added.\n-      ringBuffer.tryPublishEvent(TRANSLATOR_THREE_ARG, eventType, readableSpan, flushLatch);\n+  void enqueueEndEvent(ReadableSpan span) {\n+    if (isShutdown) {\n+      if (!loggedShutdownMessage.getAndSet(true)) {\n+        logger.info(\"Attempted to enqueue entry after Disruptor shutdown.\");\n+      }\n+      return;\n     }\n+    enqueue(EventType.ON_END, span, null);\n   }\n \n-  // Shuts down the underlying disruptor.\n+  // Shuts down the underlying disruptor. Ensures that when this method returns the disruptor is\n+  // shutdown.\n   void shutdown() {\n-    enqueueAndLock(EventType.ON_SHUTDOWN);\n+    synchronized (this) {", "originalCommit": "a14489025ead6072043d16ecff0155edca74114f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc4NDc5NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/934#discussion_r384784794", "bodyText": "This is an internal class so I would not worry that much about that.", "author": "bogdandrutu", "createdAt": "2020-02-26T21:43:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY2MzA5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQyMjAzNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/934#discussion_r385422035", "bodyText": "@jkwatson are you ok with my comment?", "author": "bogdandrutu", "createdAt": "2020-02-27T23:04:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY2MzA5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ0NjU4Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/934#discussion_r385446587", "bodyText": "yeah, I'm not convinced that it's a pattern we want to perpetuate, but it's ok for now.", "author": "jkwatson", "createdAt": "2020-02-28T00:24:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY2MzA5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "c83ec2064ea28b8130d562b4b8f6a0298744d2f0", "chunk": "diff --git a/sdk_contrib/async_processor/src/main/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorEventQueue.java b/sdk_contrib/async_processor/src/main/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorEventQueue.java\nindex c9dd43b43..ca2da1398 100644\n--- a/sdk_contrib/async_processor/src/main/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorEventQueue.java\n+++ b/sdk_contrib/async_processor/src/main/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorEventQueue.java\n\n@@ -105,7 +105,7 @@ final class DisruptorEventQueue {\n   void enqueueStartEvent(ReadableSpan span) {\n     if (isShutdown) {\n       if (!loggedShutdownMessage.getAndSet(true)) {\n-        logger.info(\"Attempted to enqueue entry after Disruptor shutdown.\");\n+        logger.info(\"Attempted to enqueue start event after Disruptor shutdown.\");\n       }\n       return;\n     }\n"}}, {"oid": "ab26a485e68f6c5ce37bfd2fe662b4e5f26715ba", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ab26a485e68f6c5ce37bfd2fe662b4e5f26715ba", "message": "Small cleanups in async processor\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-26T20:28:00Z", "type": "commit"}, {"oid": "c83ec2064ea28b8130d562b4b8f6a0298744d2f0", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c83ec2064ea28b8130d562b4b8f6a0298744d2f0", "message": "Customize the log messages for different actions happening after shutdown\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-26T20:30:22Z", "type": "commit"}, {"oid": "c83ec2064ea28b8130d562b4b8f6a0298744d2f0", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c83ec2064ea28b8130d562b4b8f6a0298744d2f0", "message": "Customize the log messages for different actions happening after shutdown\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-26T20:30:22Z", "type": "forcePushed"}]}