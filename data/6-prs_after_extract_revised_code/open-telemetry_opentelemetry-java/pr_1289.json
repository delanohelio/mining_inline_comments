{"pr_number": 1289, "pr_title": "Directly fetch AWS resource metadata without depending on heavyweight\u2026", "pr_createdAt": "2020-05-29T07:41:46Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1289", "timeline": [{"oid": "23d743e3c13623c459575340c6fc0a7ba16bdf62", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/23d743e3c13623c459575340c6fc0a7ba16bdf62", "message": "Directly fetch AWS resource metadata without depending on heavyweight AWS SDK and allow extension for non-EC2 resources like ECS.", "committedDate": "2020-05-29T07:38:02Z", "type": "commit"}, {"oid": "5b895f0f00782536b43cbf1005ecdd5ccfeb6b45", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5b895f0f00782536b43cbf1005ecdd5ccfeb6b45", "message": "Set HOST_NAME too", "committedDate": "2020-05-29T11:11:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyMzA4NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1289#discussion_r432623084", "bodyText": "since we're pre-1.0, I think we can just delete this if it's not the recommended way to do the work.", "author": "jkwatson", "createdAt": "2020-05-29T17:09:21Z", "path": "sdk_contrib/aws_v1_support/src/main/java/io/opentelemetry/sdk/contrib/trace/aws/Ec2Resource.java", "diffHunk": "@@ -16,16 +16,16 @@\n \n package io.opentelemetry.sdk.contrib.trace.aws;\n \n-import com.amazonaws.util.EC2MetadataUtils;\n-import com.amazonaws.util.EC2MetadataUtils.InstanceInfo;\n import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.sdk.contrib.trace.aws.resource.AwsResourcePopulator;\n import io.opentelemetry.sdk.resources.Resource;\n-import io.opentelemetry.sdk.resources.ResourceConstants;\n-import java.util.HashMap;\n-import java.util.Map;\n-import javax.annotation.Nullable;\n \n-/** Provides for lookup and population of {@link Resource} labels when running on AWS EC2. */\n+/**\n+ * Provides for lookup and population of {@link Resource} labels when running on AWS EC2.\n+ *\n+ * @deprecated Use {@link AwsResourcePopulator}.\n+ */\n+@Deprecated", "originalCommit": "5b895f0f00782536b43cbf1005ecdd5ccfeb6b45", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4ac3a296571119020c007f1bb59f18797175f82c", "chunk": "diff --git a/sdk_contrib/aws_v1_support/src/main/java/io/opentelemetry/sdk/contrib/trace/aws/Ec2Resource.java b/sdk_contrib/aws_v1_support/src/main/java/io/opentelemetry/sdk/contrib/trace/aws/Ec2Resource.java\ndeleted file mode 100644\nindex b0fc5f928..000000000\n--- a/sdk_contrib/aws_v1_support/src/main/java/io/opentelemetry/sdk/contrib/trace/aws/Ec2Resource.java\n+++ /dev/null\n\n@@ -1,47 +0,0 @@\n-/*\n- * Copyright 2020, OpenTelemetry Authors\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package io.opentelemetry.sdk.contrib.trace.aws;\n-\n-import io.opentelemetry.common.AttributeValue;\n-import io.opentelemetry.sdk.contrib.trace.aws.resource.AwsResourcePopulator;\n-import io.opentelemetry.sdk.resources.Resource;\n-\n-/**\n- * Provides for lookup and population of {@link Resource} labels when running on AWS EC2.\n- *\n- * @deprecated Use {@link AwsResourcePopulator}.\n- */\n-@Deprecated\n-public class Ec2Resource {\n-\n-  /** OpenTelemetry semantic convention identifier for AWS cloud. */\n-  static final AttributeValue CLOUD_PROVIDER_AWS = AttributeValue.stringAttributeValue(\"aws\");\n-\n-  /**\n-   * Returns a resource with all host and cloud labels populated with the information obtained from\n-   * the EC2 metadata endpoint.\n-   *\n-   * @return the resource\n-   * @deprecated Use {@link AwsResourcePopulator#createResource()}.\n-   */\n-  @Deprecated\n-  public static Resource getResource() {\n-    return AwsResourcePopulator.createResource();\n-  }\n-\n-  private Ec2Resource() {}\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyNDYwMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1289#discussion_r432624601", "bodyText": "Rather than having a side-effect driven API for this, how about having the populator just return the map, and then do an putAll with the result each time?", "author": "jkwatson", "createdAt": "2020-05-29T17:12:25Z", "path": "sdk_contrib/aws_v1_support/src/main/java/io/opentelemetry/sdk/contrib/trace/aws/resource/AwsResourcePopulator.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.contrib.trace.aws.resource;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.sdk.resources.Resource;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+/** Populates the attributes for creating a {@link Resource} that is running in AWS. */\n+public abstract class AwsResourcePopulator {\n+\n+  /**\n+   * Returns a {@link Resource} which is filled with attributes describing the current AWS\n+   * environment, e.g., metadata for the instance if the app is running on EC2.\n+   */\n+  public static Resource createResource() {\n+    return createResource(new Ec2ResourcePopulator());\n+  }\n+\n+  @VisibleForTesting\n+  static Resource createResource(AwsResourcePopulator... populators) {\n+    Map<String, AttributeValue> resourceAttributes = new LinkedHashMap<>();\n+\n+    for (AwsResourcePopulator populator : populators) {\n+      populator.populate(resourceAttributes);", "originalCommit": "5b895f0f00782536b43cbf1005ecdd5ccfeb6b45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAwMzA5Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1289#discussion_r433003096", "bodyText": "Yeah since this is just a server singleton makes sense, done.", "author": "anuraaga", "createdAt": "2020-06-01T00:48:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyNDYwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "4ac3a296571119020c007f1bb59f18797175f82c", "chunk": "diff --git a/sdk_contrib/aws_v1_support/src/main/java/io/opentelemetry/sdk/contrib/trace/aws/resource/AwsResourcePopulator.java b/sdk_contrib/aws_v1_support/src/main/java/io/opentelemetry/sdk/contrib/trace/aws/resource/AwsResource.java\nsimilarity index 73%\nrename from sdk_contrib/aws_v1_support/src/main/java/io/opentelemetry/sdk/contrib/trace/aws/resource/AwsResourcePopulator.java\nrename to sdk_contrib/aws_v1_support/src/main/java/io/opentelemetry/sdk/contrib/trace/aws/resource/AwsResource.java\nindex ac16bfb44..48a2abc7a 100644\n--- a/sdk_contrib/aws_v1_support/src/main/java/io/opentelemetry/sdk/contrib/trace/aws/resource/AwsResourcePopulator.java\n+++ b/sdk_contrib/aws_v1_support/src/main/java/io/opentelemetry/sdk/contrib/trace/aws/resource/AwsResource.java\n\n@@ -23,27 +23,27 @@ import java.util.LinkedHashMap;\n import java.util.Map;\n \n /** Populates the attributes for creating a {@link Resource} that is running in AWS. */\n-public abstract class AwsResourcePopulator {\n+public abstract class AwsResource {\n \n   /**\n    * Returns a {@link Resource} which is filled with attributes describing the current AWS\n    * environment, e.g., metadata for the instance if the app is running on EC2.\n    */\n-  public static Resource createResource() {\n-    return createResource(new Ec2ResourcePopulator());\n+  public static Resource create() {\n+    return create(new Ec2ResourcePopulator());\n   }\n \n   @VisibleForTesting\n-  static Resource createResource(AwsResourcePopulator... populators) {\n+  static Resource create(AwsResource... populators) {\n     Map<String, AttributeValue> resourceAttributes = new LinkedHashMap<>();\n \n-    for (AwsResourcePopulator populator : populators) {\n-      populator.populate(resourceAttributes);\n+    for (AwsResource populator : populators) {\n+      resourceAttributes.putAll(populator.createAttributes());\n     }\n \n     return Resource.create(resourceAttributes);\n   }\n \n-  /** Populates a {@link Map} of attributes for constructing a {@link Resource}. */\n-  public abstract void populate(Map<String, AttributeValue> resourceAttributes);\n+  /** Retrurns a {@link Map} of attributes for constructing a {@link Resource}. */\n+  public abstract Map<String, AttributeValue> createAttributes();\n }\n"}}, {"oid": "7fbadd4f5ae56d57a6ee9bedcd20219b88f3b966", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/7fbadd4f5ae56d57a6ee9bedcd20219b88f3b966", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into remove-aws-sdk-dependency", "committedDate": "2020-06-01T00:32:29Z", "type": "commit"}, {"oid": "4ac3a296571119020c007f1bb59f18797175f82c", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/4ac3a296571119020c007f1bb59f18797175f82c", "message": "Cleanups", "committedDate": "2020-06-01T00:47:31Z", "type": "commit"}, {"oid": "f32697c215c34ccf1ea234526b11b6ea8898a4a7", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f32697c215c34ccf1ea234526b11b6ea8898a4a7", "message": "Not public", "committedDate": "2020-06-01T00:49:30Z", "type": "commit"}, {"oid": "f6b0d9e79a5c748a8a936acec7cd96b15a664587", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f6b0d9e79a5c748a8a936acec7cd96b15a664587", "message": "Update test", "committedDate": "2020-06-01T01:39:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI5ODA3OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1289#discussion_r433298078", "bodyText": "Is it important that we use an ordered-key map implementation here? If so, please add some documentation as to why.", "author": "jkwatson", "createdAt": "2020-06-01T15:19:02Z", "path": "sdk_contrib/aws_v1_support/src/main/java/io/opentelemetry/sdk/contrib/trace/aws/resource/AwsResource.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.contrib.trace.aws.resource;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.sdk.resources.Resource;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+/** Populates the attributes for creating a {@link Resource} that is running in AWS. */\n+public abstract class AwsResource {\n+\n+  /**\n+   * Returns a {@link Resource} which is filled with attributes describing the current AWS\n+   * environment, e.g., metadata for the instance if the app is running on EC2.\n+   */\n+  public static Resource create() {\n+    return create(new Ec2ResourcePopulator());\n+  }\n+\n+  @VisibleForTesting\n+  static Resource create(AwsResource... populators) {\n+    Map<String, AttributeValue> resourceAttributes = new LinkedHashMap<>();", "originalCommit": "f6b0d9e79a5c748a8a936acec7cd96b15a664587", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMzNTgwOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1289#discussion_r433335809", "bodyText": "I tend to use LinkedHashMap when the allocation impact isn't large like these singleton-like objects so order mattering doesn't affect things, if not now then down the line. I suspect Resource.create does too for similar reasons. If it's helpful to add that as a comment let me know I'll add it.", "author": "anuraaga", "createdAt": "2020-06-01T16:06:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI5ODA3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQxNDI2OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1289#discussion_r433414269", "bodyText": "I do see that Resource.create does wrap the map in a LinkedHashMap implementation, but there's no documentation as to why there, either. If an interface takes a Map, it should definitely assume it won't be ordered, unless there's a very good reason for it.", "author": "jkwatson", "createdAt": "2020-06-01T18:33:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI5ODA3OA=="}], "type": "inlineReview", "revised_code": null}]}