{"pr_number": 2051, "pr_title": "Add assertj helpers for asserting traces and expose from the junit5 h\u2026", "pr_createdAt": "2020-11-10T07:22:31Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/2051", "timeline": [{"oid": "507b0a766bbe2ce115c10d4b22b8dd3d40bbd216", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/507b0a766bbe2ce115c10d4b22b8dd3d40bbd216", "message": "Add assertj helpers for asserting traces and expose from the junit5 helper.", "committedDate": "2020-11-10T07:20:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM0MjcxNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2051#discussion_r520342715", "bodyText": "Since it's a testing helper, I think we can assume user's won't try to trick the compiler with a bad array.", "author": "anuraaga", "createdAt": "2020-11-10T07:25:39Z", "path": "sdk/testing/src/main/java/io/opentelemetry/sdk/testing/assertj/TraceAssert.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.testing.assertj;\n+\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+import org.assertj.core.api.AbstractIterableAssert;\n+\n+/** Assertions for an exported trace, a list of {@link SpanData} with the same trace ID. */\n+public class TraceAssert\n+    extends AbstractIterableAssert<TraceAssert, List<SpanData>, SpanData, SpanDataAssert> {\n+\n+  TraceAssert(List<SpanData> spanData) {\n+    super(spanData, TraceAssert.class);\n+  }\n+\n+  public TraceAssert hasTraceId(String traceId) {\n+    isNotNull();\n+    isNotEmpty();\n+\n+    String actualTraceId = actual.get(0).getTraceId();\n+    if (!actualTraceId.equals(traceId)) {\n+      failWithActualExpectedAndMessage(\n+          actualTraceId,\n+          traceId,\n+          \"Expected trace to have trace ID <%s> but was <%s>\",\n+          traceId,\n+          actualTraceId);\n+    }\n+    return this;\n+  }\n+\n+  /**\n+   * Asserts that the trace under assertion has the same number of spans as provided {@code\n+   * assertions} and executes each {@link SpanDataAssert} in {@code assertions} in order with the\n+   * corresponding span.\n+   */\n+  @SafeVarargs\n+  @SuppressWarnings(\"varargs\")", "originalCommit": "507b0a766bbe2ce115c10d4b22b8dd3d40bbd216", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc1MzI4NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2051#discussion_r520753285", "bodyText": "I think you mean: Users will certainly try to trick the compiler with a bad array.  \ud83d\ude06", "author": "jkwatson", "createdAt": "2020-11-10T17:46:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM0MjcxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "c771881a54ea315d3500be9a922d1c34691a8834", "chunk": "diff --git a/sdk/testing/src/main/java/io/opentelemetry/sdk/testing/assertj/TraceAssert.java b/sdk/testing/src/main/java/io/opentelemetry/sdk/testing/assertj/TraceAssert.java\nindex 799e4cd5c..031933abe 100644\n--- a/sdk/testing/src/main/java/io/opentelemetry/sdk/testing/assertj/TraceAssert.java\n+++ b/sdk/testing/src/main/java/io/opentelemetry/sdk/testing/assertj/TraceAssert.java\n\n@@ -21,6 +21,7 @@ public class TraceAssert\n     super(spanData, TraceAssert.class);\n   }\n \n+  /** Asserts that the trace has the given trace ID. */\n   public TraceAssert hasTraceId(String traceId) {\n     isNotNull();\n     isNotEmpty();\n"}}, {"oid": "c771881a54ea315d3500be9a922d1c34691a8834", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c771881a54ea315d3500be9a922d1c34691a8834", "message": "Style and stability of map", "committedDate": "2020-11-10T07:32:42Z", "type": "commit"}, {"oid": "1aa258e59c1b8e32c006a30a2c4768a41f22a153", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1aa258e59c1b8e32c006a30a2c4768a41f22a153", "message": "Revert rename, any order comes in future.", "committedDate": "2020-11-11T03:53:24Z", "type": "commit"}, {"oid": "45b74f3d3425646ee6643b456565ff09cd552da4", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/45b74f3d3425646ee6643b456565ff09cd552da4", "message": "Add coverage for protected method implementations.", "committedDate": "2020-11-11T04:05:54Z", "type": "commit"}, {"oid": "2eb1d1f79cbcff073bee786f90dd5e60c95b35c8", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/2eb1d1f79cbcff073bee786f90dd5e60c95b35c8", "message": "Test hasTraceId", "committedDate": "2020-11-11T04:45:18Z", "type": "commit"}, {"oid": "015f3d65047c5f9f384adf9aadee2d58d3edd990", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/015f3d65047c5f9f384adf9aadee2d58d3edd990", "message": "Check hasTraceId failure too.", "committedDate": "2020-11-11T07:55:12Z", "type": "commit"}]}