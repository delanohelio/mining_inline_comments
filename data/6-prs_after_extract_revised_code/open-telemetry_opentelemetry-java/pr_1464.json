{"pr_number": 1464, "pr_title": "Set default endpoint for OTLP exporters", "pr_createdAt": "2020-07-24T23:21:53Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1464", "timeline": [{"oid": "297906010a417577f78a57c6477ee46f8be499d7", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/297906010a417577f78a57c6477ee46f8be499d7", "message": "Set default endpoint for OTLP exporters", "committedDate": "2020-07-24T23:18:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1MTA1OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1464#discussion_r460351059", "bodyText": "It might be more readable to have a constant defined, DEFAULT_ENDPOINT, DEFAULT_DEADLINE_MS", "author": "anuraaga", "createdAt": "2020-07-25T02:05:05Z", "path": "exporters/otlp/src/main/java/io/opentelemetry/exporters/otlp/OtlpGrpcMetricExporter.java", "diffHunk": "@@ -146,12 +154,18 @@ public void shutdown() {\n   /** Builder utility for this exporter. */\n   public static class Builder extends ConfigBuilder<Builder> {\n     private static final String KEY_METRIC_TIMEOUT = \"otel.otlp.metric.timeout\";\n-\n+    private static final String KEY_ENDPOINT = \"otel.otlp.endpoint\";\n+    private static final String KEY_USE_TLS = \"otel.otlp.use.tls\";\n+    private static final String KEY_METADATA = \"otel.otlp.metadata\";\n     private ManagedChannel channel;\n     private long deadlineMs = 1_000; // 1 second\n+    private String endpoint = \"localhost:55680\";", "originalCommit": "297906010a417577f78a57c6477ee46f8be499d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM2NjU3Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1464#discussion_r460366573", "bodyText": "\ud83d\udc4d I opened #1465 to track", "author": "trask", "createdAt": "2020-07-25T05:11:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1MTA1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "d063890e49cb30bdb283c61a12c40c3e38b7842a", "chunk": "diff --git a/exporters/otlp/src/main/java/io/opentelemetry/exporters/otlp/OtlpGrpcMetricExporter.java b/exporters/otlp/src/main/java/io/opentelemetry/exporters/otlp/OtlpGrpcMetricExporter.java\nindex 0050b2ec0..afa12c1f2 100644\n--- a/exporters/otlp/src/main/java/io/opentelemetry/exporters/otlp/OtlpGrpcMetricExporter.java\n+++ b/exporters/otlp/src/main/java/io/opentelemetry/exporters/otlp/OtlpGrpcMetricExporter.java\n\n@@ -164,8 +164,8 @@ public final class OtlpGrpcMetricExporter implements MetricExporter {\n     @Nullable private Metadata metadata;\n \n     /**\n-     * Sets the managed chanel to use when communicating with the backend. Required if {@link\n-     * Builder#endpoint} is not set. If {@link Builder#endpoint} is set then build the channel.\n+     * Sets the managed chanel to use when communicating with the backend. Takes precedence over\n+     * {@link #setEndpoint(String)} if both are called.\n      *\n      * @param channel the channel to use\n      * @return this builder's instance\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1MTExMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1464#discussion_r460351110", "bodyText": "If you end up extracting constants for the defaults can remove the comment by using TimeUnit.SECONDS.toMillis(1)", "author": "anuraaga", "createdAt": "2020-07-25T02:05:43Z", "path": "exporters/otlp/src/main/java/io/opentelemetry/exporters/otlp/OtlpGrpcMetricExporter.java", "diffHunk": "@@ -146,12 +154,18 @@ public void shutdown() {\n   /** Builder utility for this exporter. */\n   public static class Builder extends ConfigBuilder<Builder> {\n     private static final String KEY_METRIC_TIMEOUT = \"otel.otlp.metric.timeout\";\n-\n+    private static final String KEY_ENDPOINT = \"otel.otlp.endpoint\";\n+    private static final String KEY_USE_TLS = \"otel.otlp.use.tls\";\n+    private static final String KEY_METADATA = \"otel.otlp.metadata\";\n     private ManagedChannel channel;\n     private long deadlineMs = 1_000; // 1 second", "originalCommit": "297906010a417577f78a57c6477ee46f8be499d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d063890e49cb30bdb283c61a12c40c3e38b7842a", "chunk": "diff --git a/exporters/otlp/src/main/java/io/opentelemetry/exporters/otlp/OtlpGrpcMetricExporter.java b/exporters/otlp/src/main/java/io/opentelemetry/exporters/otlp/OtlpGrpcMetricExporter.java\nindex 0050b2ec0..afa12c1f2 100644\n--- a/exporters/otlp/src/main/java/io/opentelemetry/exporters/otlp/OtlpGrpcMetricExporter.java\n+++ b/exporters/otlp/src/main/java/io/opentelemetry/exporters/otlp/OtlpGrpcMetricExporter.java\n\n@@ -164,8 +164,8 @@ public final class OtlpGrpcMetricExporter implements MetricExporter {\n     @Nullable private Metadata metadata;\n \n     /**\n-     * Sets the managed chanel to use when communicating with the backend. Required if {@link\n-     * Builder#endpoint} is not set. If {@link Builder#endpoint} is set then build the channel.\n+     * Sets the managed chanel to use when communicating with the backend. Takes precedence over\n+     * {@link #setEndpoint(String)} if both are called.\n      *\n      * @param channel the channel to use\n      * @return this builder's instance\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1MTMyMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1464#discussion_r460351322", "bodyText": "Optional, defaults to {@value #DEFAULT_ENDPOINT}", "author": "anuraaga", "createdAt": "2020-07-25T02:07:59Z", "path": "exporters/otlp/src/main/java/io/opentelemetry/exporters/otlp/OtlpGrpcMetricExporter.java", "diffHunk": "@@ -172,12 +186,67 @@ public Builder setDeadlineMs(long deadlineMs) {\n       return this;\n     }\n \n+    /**\n+     * Sets the OTLP endpoint to connect to. Optional.", "originalCommit": "297906010a417577f78a57c6477ee46f8be499d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d063890e49cb30bdb283c61a12c40c3e38b7842a", "chunk": "diff --git a/exporters/otlp/src/main/java/io/opentelemetry/exporters/otlp/OtlpGrpcMetricExporter.java b/exporters/otlp/src/main/java/io/opentelemetry/exporters/otlp/OtlpGrpcMetricExporter.java\nindex 0050b2ec0..afa12c1f2 100644\n--- a/exporters/otlp/src/main/java/io/opentelemetry/exporters/otlp/OtlpGrpcMetricExporter.java\n+++ b/exporters/otlp/src/main/java/io/opentelemetry/exporters/otlp/OtlpGrpcMetricExporter.java\n\n@@ -189,6 +189,8 @@ public final class OtlpGrpcMetricExporter implements MetricExporter {\n     /**\n      * Sets the OTLP endpoint to connect to. Optional.\n      *\n+     * <p>Defaults to \"localhost:55680\".\n+     *\n      * @param endpoint endpoint to connect to\n      * @return this builder's instance\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1MTQ4MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1464#discussion_r460351481", "bodyText": "Provide good error message if channel is null here", "author": "anuraaga", "createdAt": "2020-07-25T02:09:38Z", "path": "exporters/otlp/src/main/java/io/opentelemetry/exporters/otlp/OtlpGrpcMetricExporter.java", "diffHunk": "@@ -172,12 +186,67 @@ public Builder setDeadlineMs(long deadlineMs) {\n       return this;\n     }\n \n+    /**\n+     * Sets the OTLP endpoint to connect to. Optional.\n+     *\n+     * @param endpoint endpoint to connect to\n+     * @return this builder's instance\n+     */\n+    public Builder setEndpoint(String endpoint) {\n+      this.endpoint = endpoint;\n+      return this;\n+    }\n+\n+    /**\n+     * Sets use or not TLS, default is false. Optional. Applicable only if {@link Builder#endpoint}\n+     * is set to build channel.\n+     *\n+     * @param useTls use TLS or not\n+     * @return this builder's instance\n+     */\n+    public Builder setUseTls(boolean useTls) {\n+      this.useTls = useTls;\n+      return this;\n+    }\n+\n+    /**\n+     * Add header to request. Optional. Applicable only if {@link Builder#endpoint} is set to build\n+     * channel.\n+     *\n+     * @param key header key\n+     * @param value header value\n+     * @return this builder's instance\n+     */\n+    public Builder addHeader(String key, String value) {\n+      if (metadata == null) {\n+        metadata = new Metadata();\n+      }\n+      metadata.put(Metadata.Key.of(key, ASCII_STRING_MARSHALLER), value);\n+      return this;\n+    }\n+\n     /**\n      * Constructs a new instance of the exporter based on the builder's values.\n      *\n      * @return a new exporter's instance\n      */\n     public OtlpGrpcMetricExporter build() {\n+      if (endpoint != null) {\n+        final ManagedChannelBuilder<?> managedChannelBuilder =\n+            ManagedChannelBuilder.forTarget(endpoint);\n+\n+        if (useTls) {\n+          managedChannelBuilder.useTransportSecurity();\n+        } else {\n+          managedChannelBuilder.usePlaintext();\n+        }\n+\n+        if (metadata != null) {\n+          managedChannelBuilder.intercept(MetadataUtils.newAttachHeadersInterceptor(metadata));\n+        }\n+\n+        channel = managedChannelBuilder.build();\n+      }", "originalCommit": "297906010a417577f78a57c6477ee46f8be499d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM2NjcyNw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1464#discussion_r460366727", "bodyText": "reworked, no needed now due to default endpoint", "author": "trask", "createdAt": "2020-07-25T05:13:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1MTQ4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "d063890e49cb30bdb283c61a12c40c3e38b7842a", "chunk": "diff --git a/exporters/otlp/src/main/java/io/opentelemetry/exporters/otlp/OtlpGrpcMetricExporter.java b/exporters/otlp/src/main/java/io/opentelemetry/exporters/otlp/OtlpGrpcMetricExporter.java\nindex 0050b2ec0..afa12c1f2 100644\n--- a/exporters/otlp/src/main/java/io/opentelemetry/exporters/otlp/OtlpGrpcMetricExporter.java\n+++ b/exporters/otlp/src/main/java/io/opentelemetry/exporters/otlp/OtlpGrpcMetricExporter.java\n\n@@ -189,6 +189,8 @@ public final class OtlpGrpcMetricExporter implements MetricExporter {\n     /**\n      * Sets the OTLP endpoint to connect to. Optional.\n      *\n+     * <p>Defaults to \"localhost:55680\".\n+     *\n      * @param endpoint endpoint to connect to\n      * @return this builder's instance\n      */\n"}}, {"oid": "d063890e49cb30bdb283c61a12c40c3e38b7842a", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d063890e49cb30bdb283c61a12c40c3e38b7842a", "message": "feedback", "committedDate": "2020-07-25T05:01:42Z", "type": "commit"}, {"oid": "d3b160998e5f10fa4ec9c189760b71698d5b893b", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d3b160998e5f10fa4ec9c189760b71698d5b893b", "message": "javadoc", "committedDate": "2020-07-25T05:12:38Z", "type": "commit"}]}