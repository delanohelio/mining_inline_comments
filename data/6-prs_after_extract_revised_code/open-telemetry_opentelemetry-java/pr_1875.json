{"pr_number": 1875, "pr_title": "Add a Jaeger exporter which exports via the thrift-over-http format", "pr_createdAt": "2020-10-23T19:07:07Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1875", "timeline": [{"oid": "416b7d64f24170ea151eaac4c7d350a8137c9994", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/416b7d64f24170ea151eaac4c7d350a8137c9994", "message": "some cleanups/renaming", "committedDate": "2020-10-23T19:48:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ3NTY3Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1875#discussion_r511475673", "bodyText": "Should we remove e.printStackTrace();?", "author": "dengliming", "createdAt": "2020-10-24T14:46:31Z", "path": "exporters/jaeger_thrift/src/main/java/io/opentelemetry/exporters/jaeger/JaegerThriftSpanExporter.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.exporters.jaeger;\n+\n+import io.jaegertracing.internal.exceptions.SenderException;\n+import io.jaegertracing.thrift.internal.senders.HttpSender;\n+import io.jaegertracing.thrift.internal.senders.ThriftSender;\n+import io.jaegertracing.thriftjava.Process;\n+import io.jaegertracing.thriftjava.Span;\n+import io.jaegertracing.thriftjava.Tag;\n+import io.jaegertracing.thriftjava.TagType;\n+import io.opentelemetry.sdk.common.CompletableResultCode;\n+import io.opentelemetry.sdk.common.export.ConfigBuilder;\n+import io.opentelemetry.sdk.resources.Resource;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/** Exports spans to Jaeger via Thrift, using Jaeger's thrift model. */\n+@ThreadSafe\n+public final class JaegerThriftSpanExporter implements SpanExporter {\n+\n+  public static final String DEFAULT_HOST_NAME = \"unknown\";\n+  public static final String DEFAULT_ENDPOINT = \"http://localhost:14268/api/traces\";\n+  public static final String DEFAULT_SERVICE_NAME = DEFAULT_HOST_NAME;\n+\n+  private static final Logger logger = Logger.getLogger(JaegerThriftSpanExporter.class.getName());\n+  private static final String CLIENT_VERSION_KEY = \"jaeger.version\";\n+  private static final String CLIENT_VERSION_VALUE = \"opentelemetry-java\";\n+  private static final String HOSTNAME_KEY = \"hostname\";\n+  private static final String IP_KEY = \"ip\";\n+  private static final String IP_DEFAULT = \"0.0.0.0\";\n+  private final ThriftSender thriftSender;\n+  private final Process process;\n+\n+  /**\n+   * Creates a new Jaeger gRPC Span Reporter with the given name, using the given channel.\n+   *\n+   * @param thriftSender The sender used for sending the data.\n+   * @param serviceName this service's name.\n+   */\n+  private JaegerThriftSpanExporter(ThriftSender thriftSender, String serviceName) {\n+    this.thriftSender = thriftSender;\n+    String hostname;\n+    String ipv4;\n+\n+    if (serviceName == null || serviceName.trim().length() == 0) {\n+      throw new IllegalArgumentException(\"Service name must not be null or empty\");\n+    }\n+\n+    try {\n+      hostname = InetAddress.getLocalHost().getHostName();\n+      ipv4 = InetAddress.getLocalHost().getHostAddress();\n+    } catch (UnknownHostException e) {\n+      hostname = DEFAULT_HOST_NAME;\n+      ipv4 = IP_DEFAULT;\n+    }\n+\n+    Tag clientTag = new Tag(CLIENT_VERSION_KEY, TagType.STRING).setVStr(CLIENT_VERSION_VALUE);\n+    Tag ipv4Tag = new Tag(IP_KEY, TagType.STRING).setVStr(ipv4);\n+    Tag hostnameTag = new Tag(HOSTNAME_KEY, TagType.STRING).setVStr(hostname);\n+\n+    this.process = new Process().setServiceName(serviceName);\n+    this.process.addToTags(clientTag);\n+    this.process.addToTags(ipv4Tag);\n+    this.process.addToTags(hostnameTag);\n+  }\n+\n+  /**\n+   * Submits all the given spans in a single batch to the Jaeger collector.\n+   *\n+   * @param spans the list of sampled Spans to be exported.\n+   * @return the result of the operation\n+   */\n+  @Override\n+  public CompletableResultCode export(Collection<SpanData> spans) {\n+    Map<Process, List<Span>> batches =\n+        spans.stream().collect(Collectors.groupingBy(SpanData::getResource)).entrySet().stream()\n+            .collect(\n+                Collectors.toMap(\n+                    entry -> createProcess(entry.getKey()),\n+                    entry -> Adapter.toJaeger(entry.getValue())));\n+\n+    List<CompletableResultCode> batchResults = new ArrayList<>(batches.size());\n+    batches.forEach(\n+        (process, jaegerSpans) -> {\n+          CompletableResultCode batchResult = new CompletableResultCode();\n+          try {\n+            // todo: consider making truly async\n+            thriftSender.send(process, jaegerSpans);\n+            batchResult.succeed();\n+          } catch (SenderException e) {\n+            logger.log(Level.WARNING, \"Failed to export spans\", e);\n+            batchResult.fail();\n+            e.printStackTrace();", "originalCommit": "f0d41ebcc62bd7f24792adbca3699cacd37099d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5NTQ3Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1875#discussion_r511495473", "bodyText": "oh crud. yes. good catch. :)", "author": "jkwatson", "createdAt": "2020-10-24T17:35:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ3NTY3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "897e9961b21911d458f63b94f368472db06edd03", "chunk": "diff --git a/exporters/jaeger_thrift/src/main/java/io/opentelemetry/exporters/jaeger/JaegerThriftSpanExporter.java b/exporters/jaeger_thrift/src/main/java/io/opentelemetry/exporters/jaeger/JaegerThriftSpanExporter.java\nindex e7cb2a34a..6af19af06 100644\n--- a/exporters/jaeger_thrift/src/main/java/io/opentelemetry/exporters/jaeger/JaegerThriftSpanExporter.java\n+++ b/exporters/jaeger_thrift/src/main/java/io/opentelemetry/exporters/jaeger/JaegerThriftSpanExporter.java\n\n@@ -104,7 +104,6 @@ public final class JaegerThriftSpanExporter implements SpanExporter {\n           } catch (SenderException e) {\n             logger.log(Level.WARNING, \"Failed to export spans\", e);\n             batchResult.fail();\n-            e.printStackTrace();\n           }\n         });\n     return CompletableResultCode.ofAll(batchResults);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMzNDkzOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1875#discussion_r511334938", "bodyText": "Can kind be null?", "author": "anuraaga", "createdAt": "2020-10-24T08:02:43Z", "path": "exporters/jaeger_thrift/src/main/java/io/opentelemetry/exporters/jaeger/Adapter.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.exporters.jaeger;\n+\n+import static io.opentelemetry.common.AttributeKey.booleanKey;\n+\n+import com.google.gson.Gson;\n+import io.jaegertracing.thriftjava.Log;\n+import io.jaegertracing.thriftjava.Span;\n+import io.jaegertracing.thriftjava.SpanRef;\n+import io.jaegertracing.thriftjava.SpanRefType;\n+import io.jaegertracing.thriftjava.Tag;\n+import io.jaegertracing.thriftjava.TagType;\n+import io.opentelemetry.common.AttributeConsumer;\n+import io.opentelemetry.common.AttributeKey;\n+import io.opentelemetry.common.ReadableAttributes;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import io.opentelemetry.sdk.trace.data.SpanData.Event;\n+import io.opentelemetry.sdk.trace.data.SpanData.Link;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceId;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/** Adapts OpenTelemetry objects to Jaeger objects. */\n+@ThreadSafe\n+final class Adapter {\n+\n+  static final AttributeKey<Boolean> KEY_ERROR = booleanKey(\"error\");\n+  static final String KEY_LOG_EVENT = \"event\";\n+  static final String KEY_EVENT_DROPPED_ATTRIBUTES_COUNT = \"otel.event.dropped_attributes_count\";\n+  static final String KEY_SPAN_KIND = \"span.kind\";\n+  static final String KEY_SPAN_STATUS_MESSAGE = \"span.status.message\";\n+  static final String KEY_SPAN_STATUS_CODE = \"span.status.code\";\n+  static final String KEY_INSTRUMENTATION_LIBRARY_NAME = \"otel.library.name\";\n+  static final String KEY_INSTRUMENTATION_LIBRARY_VERSION = \"otel.library.version\";\n+  public static final Gson GSON = new Gson();\n+\n+  private Adapter() {}\n+\n+  /**\n+   * Converts a list of {@link SpanData} into a collection of Jaeger's {@link Span}.\n+   *\n+   * @param spans the list of spans to be converted\n+   * @return the collection of Jaeger spans\n+   * @see #toJaeger(SpanData)\n+   */\n+  static List<Span> toJaeger(Collection<SpanData> spans) {\n+    return spans.stream().map(Adapter::toJaeger).collect(Collectors.toList());\n+  }\n+\n+  /**\n+   * Converts a single {@link SpanData} into a Jaeger's {@link Span}.\n+   *\n+   * @param span the span to be converted\n+   * @return the Jaeger span\n+   */\n+  static Span toJaeger(SpanData span) {\n+    Span target = new Span();\n+\n+    long traceIdHigh = TraceId.traceIdHighBytesAsLong(span.getTraceId());\n+    long traceIdLow = TraceId.traceIdLowBytesAsLong(span.getTraceId());\n+    long spanIdAsLong = SpanId.asLong(span.getSpanId());\n+\n+    target.setTraceIdHigh(traceIdHigh);\n+    target.setTraceIdLow(traceIdLow);\n+    target.setSpanId(spanIdAsLong);\n+    target.setOperationName(span.getName());\n+    target.setStartTime(TimeUnit.NANOSECONDS.toMicros(span.getStartEpochNanos()));\n+    target.setDuration(\n+        TimeUnit.NANOSECONDS.toMicros(span.getEndEpochNanos() - span.getStartEpochNanos()));\n+\n+    List<Tag> tags = toTags(span.getAttributes());\n+\n+    target.setLogs(toJaegerLogs(span.getEvents()));\n+    List<SpanRef> references = toSpanRefs(span.getLinks());\n+\n+    // add the parent span\n+    if (SpanId.isValid(span.getParentSpanId())) {\n+      references.add(\n+          new SpanRef(\n+              SpanRefType.CHILD_OF,\n+              traceIdLow,\n+              traceIdHigh,\n+              SpanId.asLong(span.getParentSpanId())));\n+    }\n+    target.setReferences(references);\n+\n+    if (span.getKind() != null) {", "originalCommit": "f0d41ebcc62bd7f24792adbca3699cacd37099d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5NTU2Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1875#discussion_r511495562", "bodyText": "hmm. as you probably have guessed at this point, this was cribbed from the GRPC exporter. probably not. I'll fix it up.", "author": "jkwatson", "createdAt": "2020-10-24T17:36:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMzNDkzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAzMDQ5Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1875#discussion_r512030497", "bodyText": "fixed.", "author": "jkwatson", "createdAt": "2020-10-26T15:03:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMzNDkzOA=="}], "type": "inlineReview", "revised_code": {"commit": "897e9961b21911d458f63b94f368472db06edd03", "chunk": "diff --git a/exporters/jaeger_thrift/src/main/java/io/opentelemetry/exporters/jaeger/Adapter.java b/exporters/jaeger_thrift/src/main/java/io/opentelemetry/exporters/jaeger/Adapter.java\nindex 07a5e3f38..68490deef 100644\n--- a/exporters/jaeger_thrift/src/main/java/io/opentelemetry/exporters/jaeger/Adapter.java\n+++ b/exporters/jaeger_thrift/src/main/java/io/opentelemetry/exporters/jaeger/Adapter.java\n\n@@ -94,19 +94,16 @@ final class Adapter {\n     }\n     target.setReferences(references);\n \n-    if (span.getKind() != null) {\n+    tags.add(\n+        new Tag(KEY_SPAN_KIND, TagType.STRING)\n+            .setVStr(span.getKind().name().toLowerCase(Locale.ROOT)));\n+\n+    if (span.getStatus().getDescription() != null) {\n       tags.add(\n-          new Tag(KEY_SPAN_KIND, TagType.STRING)\n-              .setVStr(span.getKind().name().toLowerCase(Locale.ROOT)));\n+          new Tag(KEY_SPAN_STATUS_MESSAGE, TagType.STRING)\n+              .setVStr(span.getStatus().getDescription()));\n     }\n \n-    tags.add(\n-        new Tag(KEY_SPAN_STATUS_MESSAGE, TagType.STRING)\n-            .setVStr(\n-                span.getStatus().getDescription() == null\n-                    ? \"\"\n-                    : span.getStatus().getDescription()));\n-\n     tags.add(\n         new Tag(KEY_SPAN_STATUS_CODE, TagType.LONG)\n             .setVLong(span.getStatus().getCanonicalCode().value()));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMzNDk3OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1875#discussion_r511334979", "bodyText": "Probably better to not set key instead of setting to empty string.", "author": "anuraaga", "createdAt": "2020-10-24T08:03:17Z", "path": "exporters/jaeger_thrift/src/main/java/io/opentelemetry/exporters/jaeger/Adapter.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.exporters.jaeger;\n+\n+import static io.opentelemetry.common.AttributeKey.booleanKey;\n+\n+import com.google.gson.Gson;\n+import io.jaegertracing.thriftjava.Log;\n+import io.jaegertracing.thriftjava.Span;\n+import io.jaegertracing.thriftjava.SpanRef;\n+import io.jaegertracing.thriftjava.SpanRefType;\n+import io.jaegertracing.thriftjava.Tag;\n+import io.jaegertracing.thriftjava.TagType;\n+import io.opentelemetry.common.AttributeConsumer;\n+import io.opentelemetry.common.AttributeKey;\n+import io.opentelemetry.common.ReadableAttributes;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import io.opentelemetry.sdk.trace.data.SpanData.Event;\n+import io.opentelemetry.sdk.trace.data.SpanData.Link;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceId;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/** Adapts OpenTelemetry objects to Jaeger objects. */\n+@ThreadSafe\n+final class Adapter {\n+\n+  static final AttributeKey<Boolean> KEY_ERROR = booleanKey(\"error\");\n+  static final String KEY_LOG_EVENT = \"event\";\n+  static final String KEY_EVENT_DROPPED_ATTRIBUTES_COUNT = \"otel.event.dropped_attributes_count\";\n+  static final String KEY_SPAN_KIND = \"span.kind\";\n+  static final String KEY_SPAN_STATUS_MESSAGE = \"span.status.message\";\n+  static final String KEY_SPAN_STATUS_CODE = \"span.status.code\";\n+  static final String KEY_INSTRUMENTATION_LIBRARY_NAME = \"otel.library.name\";\n+  static final String KEY_INSTRUMENTATION_LIBRARY_VERSION = \"otel.library.version\";\n+  public static final Gson GSON = new Gson();\n+\n+  private Adapter() {}\n+\n+  /**\n+   * Converts a list of {@link SpanData} into a collection of Jaeger's {@link Span}.\n+   *\n+   * @param spans the list of spans to be converted\n+   * @return the collection of Jaeger spans\n+   * @see #toJaeger(SpanData)\n+   */\n+  static List<Span> toJaeger(Collection<SpanData> spans) {\n+    return spans.stream().map(Adapter::toJaeger).collect(Collectors.toList());\n+  }\n+\n+  /**\n+   * Converts a single {@link SpanData} into a Jaeger's {@link Span}.\n+   *\n+   * @param span the span to be converted\n+   * @return the Jaeger span\n+   */\n+  static Span toJaeger(SpanData span) {\n+    Span target = new Span();\n+\n+    long traceIdHigh = TraceId.traceIdHighBytesAsLong(span.getTraceId());\n+    long traceIdLow = TraceId.traceIdLowBytesAsLong(span.getTraceId());\n+    long spanIdAsLong = SpanId.asLong(span.getSpanId());\n+\n+    target.setTraceIdHigh(traceIdHigh);\n+    target.setTraceIdLow(traceIdLow);\n+    target.setSpanId(spanIdAsLong);\n+    target.setOperationName(span.getName());\n+    target.setStartTime(TimeUnit.NANOSECONDS.toMicros(span.getStartEpochNanos()));\n+    target.setDuration(\n+        TimeUnit.NANOSECONDS.toMicros(span.getEndEpochNanos() - span.getStartEpochNanos()));\n+\n+    List<Tag> tags = toTags(span.getAttributes());\n+\n+    target.setLogs(toJaegerLogs(span.getEvents()));\n+    List<SpanRef> references = toSpanRefs(span.getLinks());\n+\n+    // add the parent span\n+    if (SpanId.isValid(span.getParentSpanId())) {\n+      references.add(\n+          new SpanRef(\n+              SpanRefType.CHILD_OF,\n+              traceIdLow,\n+              traceIdHigh,\n+              SpanId.asLong(span.getParentSpanId())));\n+    }\n+    target.setReferences(references);\n+\n+    if (span.getKind() != null) {\n+      tags.add(\n+          new Tag(KEY_SPAN_KIND, TagType.STRING)\n+              .setVStr(span.getKind().name().toLowerCase(Locale.ROOT)));\n+    }\n+\n+    tags.add(\n+        new Tag(KEY_SPAN_STATUS_MESSAGE, TagType.STRING)\n+            .setVStr(\n+                span.getStatus().getDescription() == null\n+                    ? \"\"", "originalCommit": "f0d41ebcc62bd7f24792adbca3699cacd37099d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5NTYyOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1875#discussion_r511495628", "bodyText": "not sure what Jaeger wants here. copied this from GRPC, assuming that was correct, but it might not be.", "author": "jkwatson", "createdAt": "2020-10-24T17:36:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMzNDk3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAzMDk0MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1875#discussion_r512030941", "bodyText": "made it not set a null/missing status description. seems like the right answer. we can change it back if there is a problem.", "author": "jkwatson", "createdAt": "2020-10-26T15:03:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMzNDk3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "897e9961b21911d458f63b94f368472db06edd03", "chunk": "diff --git a/exporters/jaeger_thrift/src/main/java/io/opentelemetry/exporters/jaeger/Adapter.java b/exporters/jaeger_thrift/src/main/java/io/opentelemetry/exporters/jaeger/Adapter.java\nindex 07a5e3f38..68490deef 100644\n--- a/exporters/jaeger_thrift/src/main/java/io/opentelemetry/exporters/jaeger/Adapter.java\n+++ b/exporters/jaeger_thrift/src/main/java/io/opentelemetry/exporters/jaeger/Adapter.java\n\n@@ -94,19 +94,16 @@ final class Adapter {\n     }\n     target.setReferences(references);\n \n-    if (span.getKind() != null) {\n+    tags.add(\n+        new Tag(KEY_SPAN_KIND, TagType.STRING)\n+            .setVStr(span.getKind().name().toLowerCase(Locale.ROOT)));\n+\n+    if (span.getStatus().getDescription() != null) {\n       tags.add(\n-          new Tag(KEY_SPAN_KIND, TagType.STRING)\n-              .setVStr(span.getKind().name().toLowerCase(Locale.ROOT)));\n+          new Tag(KEY_SPAN_STATUS_MESSAGE, TagType.STRING)\n+              .setVStr(span.getStatus().getDescription()));\n     }\n \n-    tags.add(\n-        new Tag(KEY_SPAN_STATUS_MESSAGE, TagType.STRING)\n-            .setVStr(\n-                span.getStatus().getDescription() == null\n-                    ? \"\"\n-                    : span.getStatus().getDescription()));\n-\n     tags.add(\n         new Tag(KEY_SPAN_STATUS_CODE, TagType.LONG)\n             .setVLong(span.getStatus().getCanonicalCode().value()));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMzNTI3Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1875#discussion_r511335276", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // millis? nanos?\n          \n      \n    \n    \n  \n\nmicros seems right", "author": "anuraaga", "createdAt": "2020-10-24T08:06:31Z", "path": "exporters/jaeger_thrift/src/main/java/io/opentelemetry/exporters/jaeger/Adapter.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.exporters.jaeger;\n+\n+import static io.opentelemetry.common.AttributeKey.booleanKey;\n+\n+import com.google.gson.Gson;\n+import io.jaegertracing.thriftjava.Log;\n+import io.jaegertracing.thriftjava.Span;\n+import io.jaegertracing.thriftjava.SpanRef;\n+import io.jaegertracing.thriftjava.SpanRefType;\n+import io.jaegertracing.thriftjava.Tag;\n+import io.jaegertracing.thriftjava.TagType;\n+import io.opentelemetry.common.AttributeConsumer;\n+import io.opentelemetry.common.AttributeKey;\n+import io.opentelemetry.common.ReadableAttributes;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import io.opentelemetry.sdk.trace.data.SpanData.Event;\n+import io.opentelemetry.sdk.trace.data.SpanData.Link;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceId;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/** Adapts OpenTelemetry objects to Jaeger objects. */\n+@ThreadSafe\n+final class Adapter {\n+\n+  static final AttributeKey<Boolean> KEY_ERROR = booleanKey(\"error\");\n+  static final String KEY_LOG_EVENT = \"event\";\n+  static final String KEY_EVENT_DROPPED_ATTRIBUTES_COUNT = \"otel.event.dropped_attributes_count\";\n+  static final String KEY_SPAN_KIND = \"span.kind\";\n+  static final String KEY_SPAN_STATUS_MESSAGE = \"span.status.message\";\n+  static final String KEY_SPAN_STATUS_CODE = \"span.status.code\";\n+  static final String KEY_INSTRUMENTATION_LIBRARY_NAME = \"otel.library.name\";\n+  static final String KEY_INSTRUMENTATION_LIBRARY_VERSION = \"otel.library.version\";\n+  public static final Gson GSON = new Gson();\n+\n+  private Adapter() {}\n+\n+  /**\n+   * Converts a list of {@link SpanData} into a collection of Jaeger's {@link Span}.\n+   *\n+   * @param spans the list of spans to be converted\n+   * @return the collection of Jaeger spans\n+   * @see #toJaeger(SpanData)\n+   */\n+  static List<Span> toJaeger(Collection<SpanData> spans) {\n+    return spans.stream().map(Adapter::toJaeger).collect(Collectors.toList());\n+  }\n+\n+  /**\n+   * Converts a single {@link SpanData} into a Jaeger's {@link Span}.\n+   *\n+   * @param span the span to be converted\n+   * @return the Jaeger span\n+   */\n+  static Span toJaeger(SpanData span) {\n+    Span target = new Span();\n+\n+    long traceIdHigh = TraceId.traceIdHighBytesAsLong(span.getTraceId());\n+    long traceIdLow = TraceId.traceIdLowBytesAsLong(span.getTraceId());\n+    long spanIdAsLong = SpanId.asLong(span.getSpanId());\n+\n+    target.setTraceIdHigh(traceIdHigh);\n+    target.setTraceIdLow(traceIdLow);\n+    target.setSpanId(spanIdAsLong);\n+    target.setOperationName(span.getName());\n+    target.setStartTime(TimeUnit.NANOSECONDS.toMicros(span.getStartEpochNanos()));\n+    target.setDuration(\n+        TimeUnit.NANOSECONDS.toMicros(span.getEndEpochNanos() - span.getStartEpochNanos()));\n+\n+    List<Tag> tags = toTags(span.getAttributes());\n+\n+    target.setLogs(toJaegerLogs(span.getEvents()));\n+    List<SpanRef> references = toSpanRefs(span.getLinks());\n+\n+    // add the parent span\n+    if (SpanId.isValid(span.getParentSpanId())) {\n+      references.add(\n+          new SpanRef(\n+              SpanRefType.CHILD_OF,\n+              traceIdLow,\n+              traceIdHigh,\n+              SpanId.asLong(span.getParentSpanId())));\n+    }\n+    target.setReferences(references);\n+\n+    if (span.getKind() != null) {\n+      tags.add(\n+          new Tag(KEY_SPAN_KIND, TagType.STRING)\n+              .setVStr(span.getKind().name().toLowerCase(Locale.ROOT)));\n+    }\n+\n+    tags.add(\n+        new Tag(KEY_SPAN_STATUS_MESSAGE, TagType.STRING)\n+            .setVStr(\n+                span.getStatus().getDescription() == null\n+                    ? \"\"\n+                    : span.getStatus().getDescription()));\n+\n+    tags.add(\n+        new Tag(KEY_SPAN_STATUS_CODE, TagType.LONG)\n+            .setVLong(span.getStatus().getCanonicalCode().value()));\n+\n+    tags.add(\n+        new Tag(KEY_INSTRUMENTATION_LIBRARY_NAME, TagType.STRING)\n+            .setVStr(span.getInstrumentationLibraryInfo().getName()));\n+\n+    if (span.getInstrumentationLibraryInfo().getVersion() != null) {\n+      tags.add(\n+          new Tag(KEY_INSTRUMENTATION_LIBRARY_VERSION, TagType.STRING)\n+              .setVStr(span.getInstrumentationLibraryInfo().getVersion()));\n+    }\n+\n+    if (!span.getStatus().isOk()) {\n+      tags.add(toTag(KEY_ERROR, true));\n+    }\n+    target.setTags(tags);\n+\n+    return target;\n+  }\n+\n+  /**\n+   * Converts {@link Event}s into a collection of Jaeger's {@link Log}.\n+   *\n+   * @param timedEvents the timed events to be converted\n+   * @return a collection of Jaeger logs\n+   * @see #toJaegerLog(Event)\n+   */\n+  // VisibleForTesting\n+  static List<Log> toJaegerLogs(List<Event> timedEvents) {\n+    return timedEvents.stream().map(Adapter::toJaegerLog).collect(Collectors.toList());\n+  }\n+\n+  /**\n+   * Converts a {@link Event} into Jaeger's {@link Log}.\n+   *\n+   * @param event the timed event to be converted\n+   * @return a Jaeger log\n+   */\n+  // VisibleForTesting\n+  static Log toJaegerLog(Event event) {\n+    Log result = new Log();\n+    // millis? nanos?", "originalCommit": "f0d41ebcc62bd7f24792adbca3699cacd37099d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5NTY3NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1875#discussion_r511495674", "bodyText": "yeah, I micros works correctly, even though I can't find any documentation about it. :)", "author": "jkwatson", "createdAt": "2020-10-24T17:36:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMzNTI3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "897e9961b21911d458f63b94f368472db06edd03", "chunk": "diff --git a/exporters/jaeger_thrift/src/main/java/io/opentelemetry/exporters/jaeger/Adapter.java b/exporters/jaeger_thrift/src/main/java/io/opentelemetry/exporters/jaeger/Adapter.java\nindex 07a5e3f38..68490deef 100644\n--- a/exporters/jaeger_thrift/src/main/java/io/opentelemetry/exporters/jaeger/Adapter.java\n+++ b/exporters/jaeger_thrift/src/main/java/io/opentelemetry/exporters/jaeger/Adapter.java\n\n@@ -94,19 +94,16 @@ final class Adapter {\n     }\n     target.setReferences(references);\n \n-    if (span.getKind() != null) {\n+    tags.add(\n+        new Tag(KEY_SPAN_KIND, TagType.STRING)\n+            .setVStr(span.getKind().name().toLowerCase(Locale.ROOT)));\n+\n+    if (span.getStatus().getDescription() != null) {\n       tags.add(\n-          new Tag(KEY_SPAN_KIND, TagType.STRING)\n-              .setVStr(span.getKind().name().toLowerCase(Locale.ROOT)));\n+          new Tag(KEY_SPAN_STATUS_MESSAGE, TagType.STRING)\n+              .setVStr(span.getStatus().getDescription()));\n     }\n \n-    tags.add(\n-        new Tag(KEY_SPAN_STATUS_MESSAGE, TagType.STRING)\n-            .setVStr(\n-                span.getStatus().getDescription() == null\n-                    ? \"\"\n-                    : span.getStatus().getDescription()));\n-\n     tags.add(\n         new Tag(KEY_SPAN_STATUS_CODE, TagType.LONG)\n             .setVLong(span.getStatus().getCanonicalCode().value()));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMzNTYxMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1875#discussion_r511335611", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        e.printStackTrace();", "author": "anuraaga", "createdAt": "2020-10-24T08:10:25Z", "path": "exporters/jaeger_thrift/src/main/java/io/opentelemetry/exporters/jaeger/JaegerThriftSpanExporter.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.exporters.jaeger;\n+\n+import io.jaegertracing.internal.exceptions.SenderException;\n+import io.jaegertracing.thrift.internal.senders.HttpSender;\n+import io.jaegertracing.thrift.internal.senders.ThriftSender;\n+import io.jaegertracing.thriftjava.Process;\n+import io.jaegertracing.thriftjava.Span;\n+import io.jaegertracing.thriftjava.Tag;\n+import io.jaegertracing.thriftjava.TagType;\n+import io.opentelemetry.sdk.common.CompletableResultCode;\n+import io.opentelemetry.sdk.common.export.ConfigBuilder;\n+import io.opentelemetry.sdk.resources.Resource;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/** Exports spans to Jaeger via Thrift, using Jaeger's thrift model. */\n+@ThreadSafe\n+public final class JaegerThriftSpanExporter implements SpanExporter {\n+\n+  public static final String DEFAULT_HOST_NAME = \"unknown\";\n+  public static final String DEFAULT_ENDPOINT = \"http://localhost:14268/api/traces\";\n+  public static final String DEFAULT_SERVICE_NAME = DEFAULT_HOST_NAME;\n+\n+  private static final Logger logger = Logger.getLogger(JaegerThriftSpanExporter.class.getName());\n+  private static final String CLIENT_VERSION_KEY = \"jaeger.version\";\n+  private static final String CLIENT_VERSION_VALUE = \"opentelemetry-java\";\n+  private static final String HOSTNAME_KEY = \"hostname\";\n+  private static final String IP_KEY = \"ip\";\n+  private static final String IP_DEFAULT = \"0.0.0.0\";\n+  private final ThriftSender thriftSender;\n+  private final Process process;\n+\n+  /**\n+   * Creates a new Jaeger gRPC Span Reporter with the given name, using the given channel.\n+   *\n+   * @param thriftSender The sender used for sending the data.\n+   * @param serviceName this service's name.\n+   */\n+  private JaegerThriftSpanExporter(ThriftSender thriftSender, String serviceName) {\n+    this.thriftSender = thriftSender;\n+    String hostname;\n+    String ipv4;\n+\n+    if (serviceName == null || serviceName.trim().length() == 0) {\n+      throw new IllegalArgumentException(\"Service name must not be null or empty\");\n+    }\n+\n+    try {\n+      hostname = InetAddress.getLocalHost().getHostName();\n+      ipv4 = InetAddress.getLocalHost().getHostAddress();\n+    } catch (UnknownHostException e) {\n+      hostname = DEFAULT_HOST_NAME;\n+      ipv4 = IP_DEFAULT;\n+    }\n+\n+    Tag clientTag = new Tag(CLIENT_VERSION_KEY, TagType.STRING).setVStr(CLIENT_VERSION_VALUE);\n+    Tag ipv4Tag = new Tag(IP_KEY, TagType.STRING).setVStr(ipv4);\n+    Tag hostnameTag = new Tag(HOSTNAME_KEY, TagType.STRING).setVStr(hostname);\n+\n+    this.process = new Process().setServiceName(serviceName);\n+    this.process.addToTags(clientTag);\n+    this.process.addToTags(ipv4Tag);\n+    this.process.addToTags(hostnameTag);\n+  }\n+\n+  /**\n+   * Submits all the given spans in a single batch to the Jaeger collector.\n+   *\n+   * @param spans the list of sampled Spans to be exported.\n+   * @return the result of the operation\n+   */\n+  @Override\n+  public CompletableResultCode export(Collection<SpanData> spans) {\n+    Map<Process, List<Span>> batches =\n+        spans.stream().collect(Collectors.groupingBy(SpanData::getResource)).entrySet().stream()\n+            .collect(\n+                Collectors.toMap(\n+                    entry -> createProcess(entry.getKey()),\n+                    entry -> Adapter.toJaeger(entry.getValue())));\n+\n+    List<CompletableResultCode> batchResults = new ArrayList<>(batches.size());\n+    batches.forEach(\n+        (process, jaegerSpans) -> {\n+          CompletableResultCode batchResult = new CompletableResultCode();\n+          try {\n+            // todo: consider making truly async\n+            thriftSender.send(process, jaegerSpans);\n+            batchResult.succeed();\n+          } catch (SenderException e) {\n+            logger.log(Level.WARNING, \"Failed to export spans\", e);\n+            batchResult.fail();\n+            e.printStackTrace();", "originalCommit": "f0d41ebcc62bd7f24792adbca3699cacd37099d8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "897e9961b21911d458f63b94f368472db06edd03", "chunk": "diff --git a/exporters/jaeger_thrift/src/main/java/io/opentelemetry/exporters/jaeger/JaegerThriftSpanExporter.java b/exporters/jaeger_thrift/src/main/java/io/opentelemetry/exporters/jaeger/JaegerThriftSpanExporter.java\nindex e7cb2a34a..6af19af06 100644\n--- a/exporters/jaeger_thrift/src/main/java/io/opentelemetry/exporters/jaeger/JaegerThriftSpanExporter.java\n+++ b/exporters/jaeger_thrift/src/main/java/io/opentelemetry/exporters/jaeger/JaegerThriftSpanExporter.java\n\n@@ -104,7 +104,6 @@ public final class JaegerThriftSpanExporter implements SpanExporter {\n           } catch (SenderException e) {\n             logger.log(Level.WARNING, \"Failed to export spans\", e);\n             batchResult.fail();\n-            e.printStackTrace();\n           }\n         });\n     return CompletableResultCode.ofAll(batchResults);\n"}}, {"oid": "897e9961b21911d458f63b94f368472db06edd03", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/897e9961b21911d458f63b94f368472db06edd03", "message": "cleanup from PR review", "committedDate": "2020-10-26T15:48:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEzNjQ0Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1875#discussion_r513136442", "bodyText": "Can't see where to add the send result to batchResults. lost batchResults.add(batchResult); ?", "author": "dengliming", "createdAt": "2020-10-28T02:06:43Z", "path": "exporters/jaeger_thrift/src/main/java/io/opentelemetry/exporters/jaeger/JaegerThriftSpanExporter.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.exporters.jaeger;\n+\n+import io.jaegertracing.internal.exceptions.SenderException;\n+import io.jaegertracing.thrift.internal.senders.HttpSender;\n+import io.jaegertracing.thrift.internal.senders.ThriftSender;\n+import io.jaegertracing.thriftjava.Process;\n+import io.jaegertracing.thriftjava.Span;\n+import io.jaegertracing.thriftjava.Tag;\n+import io.jaegertracing.thriftjava.TagType;\n+import io.opentelemetry.sdk.common.CompletableResultCode;\n+import io.opentelemetry.sdk.common.export.ConfigBuilder;\n+import io.opentelemetry.sdk.resources.Resource;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/** Exports spans to Jaeger via Thrift, using Jaeger's thrift model. */\n+@ThreadSafe\n+public final class JaegerThriftSpanExporter implements SpanExporter {\n+\n+  public static final String DEFAULT_HOST_NAME = \"unknown\";\n+  public static final String DEFAULT_ENDPOINT = \"http://localhost:14268/api/traces\";\n+  public static final String DEFAULT_SERVICE_NAME = DEFAULT_HOST_NAME;\n+\n+  private static final Logger logger = Logger.getLogger(JaegerThriftSpanExporter.class.getName());\n+  private static final String CLIENT_VERSION_KEY = \"jaeger.version\";\n+  private static final String CLIENT_VERSION_VALUE = \"opentelemetry-java\";\n+  private static final String HOSTNAME_KEY = \"hostname\";\n+  private static final String IP_KEY = \"ip\";\n+  private static final String IP_DEFAULT = \"0.0.0.0\";\n+  private final ThriftSender thriftSender;\n+  private final Process process;\n+\n+  /**\n+   * Creates a new Jaeger gRPC Span Reporter with the given name, using the given channel.\n+   *\n+   * @param thriftSender The sender used for sending the data.\n+   * @param serviceName this service's name.\n+   */\n+  private JaegerThriftSpanExporter(ThriftSender thriftSender, String serviceName) {\n+    this.thriftSender = thriftSender;\n+    String hostname;\n+    String ipv4;\n+\n+    if (serviceName == null || serviceName.trim().length() == 0) {\n+      throw new IllegalArgumentException(\"Service name must not be null or empty\");\n+    }\n+\n+    try {\n+      hostname = InetAddress.getLocalHost().getHostName();\n+      ipv4 = InetAddress.getLocalHost().getHostAddress();\n+    } catch (UnknownHostException e) {\n+      hostname = DEFAULT_HOST_NAME;\n+      ipv4 = IP_DEFAULT;\n+    }\n+\n+    Tag clientTag = new Tag(CLIENT_VERSION_KEY, TagType.STRING).setVStr(CLIENT_VERSION_VALUE);\n+    Tag ipv4Tag = new Tag(IP_KEY, TagType.STRING).setVStr(ipv4);\n+    Tag hostnameTag = new Tag(HOSTNAME_KEY, TagType.STRING).setVStr(hostname);\n+\n+    this.process = new Process().setServiceName(serviceName);\n+    this.process.addToTags(clientTag);\n+    this.process.addToTags(ipv4Tag);\n+    this.process.addToTags(hostnameTag);\n+  }\n+\n+  /**\n+   * Submits all the given spans in a single batch to the Jaeger collector.\n+   *\n+   * @param spans the list of sampled Spans to be exported.\n+   * @return the result of the operation\n+   */\n+  @Override\n+  public CompletableResultCode export(Collection<SpanData> spans) {\n+    Map<Process, List<Span>> batches =\n+        spans.stream().collect(Collectors.groupingBy(SpanData::getResource)).entrySet().stream()\n+            .collect(\n+                Collectors.toMap(\n+                    entry -> createProcess(entry.getKey()),\n+                    entry -> Adapter.toJaeger(entry.getValue())));\n+\n+    List<CompletableResultCode> batchResults = new ArrayList<>(batches.size());\n+    batches.forEach(\n+        (process, jaegerSpans) -> {\n+          CompletableResultCode batchResult = new CompletableResultCode();\n+          try {\n+            // todo: consider making truly async\n+            thriftSender.send(process, jaegerSpans);\n+            batchResult.succeed();\n+          } catch (SenderException e) {\n+            logger.log(Level.WARNING, \"Failed to export spans\", e);\n+            batchResult.fail();\n+          }", "originalCommit": "0d865d0f12ec0f17865d3be56f7cf60b7df8b967", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE0MDAwMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1875#discussion_r513140002", "bodyText": "That seems right - I would expect basically all unit tests to fail if not adding to the batchResults. @jkwatson know what could be up?", "author": "anuraaga", "createdAt": "2020-10-28T02:20:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEzNjQ0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE0MTk1Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1875#discussion_r513141956", "bodyText": "it works because we never look at the result code in the tests! I'll fix it", "author": "jkwatson", "createdAt": "2020-10-28T02:27:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEzNjQ0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE0MzQ2MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1875#discussion_r513143461", "bodyText": "also, great catch, @dengliming !", "author": "jkwatson", "createdAt": "2020-10-28T02:33:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEzNjQ0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE0NDEwNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1875#discussion_r513144106", "bodyText": "I'm also going to add this check to the other Jaeger exporter test. :)", "author": "jkwatson", "createdAt": "2020-10-28T02:35:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEzNjQ0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "c981f671b0f7453c67c04c71628a31b90b1df85d", "chunk": "diff --git a/exporters/jaeger_thrift/src/main/java/io/opentelemetry/exporters/jaeger/JaegerThriftSpanExporter.java b/exporters/jaeger_thrift/src/main/java/io/opentelemetry/exporters/jaeger/JaegerThriftSpanExporter.java\nindex 6af19af06..ff0d05898 100644\n--- a/exporters/jaeger_thrift/src/main/java/io/opentelemetry/exporters/jaeger/JaegerThriftSpanExporter.java\n+++ b/exporters/jaeger_thrift/src/main/java/io/opentelemetry/exporters/jaeger/JaegerThriftSpanExporter.java\n\n@@ -97,6 +97,7 @@ public final class JaegerThriftSpanExporter implements SpanExporter {\n     batches.forEach(\n         (process, jaegerSpans) -> {\n           CompletableResultCode batchResult = new CompletableResultCode();\n+          batchResults.add(batchResult);\n           try {\n             // todo: consider making truly async\n             thriftSender.send(process, jaegerSpans);\n"}}, {"oid": "c981f671b0f7453c67c04c71628a31b90b1df85d", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c981f671b0f7453c67c04c71628a31b90b1df85d", "message": "update for api repackaging", "committedDate": "2020-10-28T03:02:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE2NDI1NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1875#discussion_r513164255", "bodyText": "Can you add some small unit tests for these trace utility change?", "author": "anuraaga", "createdAt": "2020-10-28T03:50:43Z", "path": "api/src/main/java/io/opentelemetry/api/trace/SpanId.java", "diffHunk": "@@ -93,4 +93,9 @@ public static boolean isValid(String spanId) {\n   public static String bytesToHex(byte[] spanId) {\n     return BigendianEncoding.toLowerBase16(spanId);\n   }\n+\n+  /** Convert the the given hex spanId into a long representation. */\n+  public static long asLong(String src) {", "originalCommit": "c981f671b0f7453c67c04c71628a31b90b1df85d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE3MzgxOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1875#discussion_r513173819", "bodyText": "yes, good idea. I will do so.", "author": "jkwatson", "createdAt": "2020-10-28T04:29:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE2NDI1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE3ODIxNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1875#discussion_r513178216", "bodyText": "done", "author": "jkwatson", "createdAt": "2020-10-28T04:46:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE2NDI1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUwMDcwNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1875#discussion_r513500704", "bodyText": "We should consider to move this class in an api extension, I don't think it should be part of the public API .", "author": "bogdandrutu", "createdAt": "2020-10-28T14:42:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE2NDI1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUyMjI0Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1875#discussion_r513522247", "bodyText": "I would like to do that, but I'd rather not make a verbatim copy of the BigendianEncoding class, since there are a bunch of fiddly bits in there that it would be better not to have duplicates of. Any thoughts on that?", "author": "jkwatson", "createdAt": "2020-10-28T15:08:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE2NDI1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI5OTQ0Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1875#discussion_r515299442", "bodyText": "@bogdandrutu any ideas on how to tackle this? Should we follow-up with a separate issue/PR?", "author": "jkwatson", "createdAt": "2020-10-30T18:27:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE2NDI1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "ccdbc07b6cf909163e7f9ad911f6c4b82ef8abd2", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/api/trace/SpanId.java b/api/src/main/java/io/opentelemetry/api/trace/SpanId.java\nindex 829727603..3fa2d2a1d 100644\n--- a/api/src/main/java/io/opentelemetry/api/trace/SpanId.java\n+++ b/api/src/main/java/io/opentelemetry/api/trace/SpanId.java\n\n@@ -94,7 +94,6 @@ public final class SpanId {\n     return BigendianEncoding.toLowerBase16(spanId);\n   }\n \n-  /** Convert the the given hex spanId into a long representation. */\n   public static long asLong(String src) {\n     return BigendianEncoding.longFromBase16String(src, 0);\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE2NDY5MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1875#discussion_r513164691", "bodyText": "Another jaeger integration test \ud83d\ude2e  Scared of the container startup issues (not related to this PR, just noting)", "author": "anuraaga", "createdAt": "2020-10-28T03:52:14Z", "path": "exporters/jaeger_thrift/src/test/java/io/opentelemetry/exporters/jaeger/JaegerThriftIntegrationTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.exporters.jaeger;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.opentelemetry.api.OpenTelemetry;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.api.trace.Tracer;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n+import java.util.concurrent.TimeUnit;\n+import okhttp3.OkHttpClient;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+import org.awaitility.Awaitility;\n+import org.junit.jupiter.api.Test;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.HttpWaitStrategy;\n+import org.testcontainers.junit.jupiter.Container;\n+import org.testcontainers.junit.jupiter.Testcontainers;\n+import org.testcontainers.utility.DockerImageName;\n+\n+@Testcontainers(disabledWithoutDocker = true)\n+class JaegerThriftIntegrationTest {", "originalCommit": "c981f671b0f7453c67c04c71628a31b90b1df85d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ccdbc07b6cf909163e7f9ad911f6c4b82ef8abd2", "chunk": "diff --git a/exporters/jaeger_thrift/src/test/java/io/opentelemetry/exporters/jaeger/JaegerThriftIntegrationTest.java b/exporters/jaeger_thrift/src/test/java/io/opentelemetry/exporters/jaeger/JaegerThriftIntegrationTest.java\nindex 88954a0aa..c2e34b791 100644\n--- a/exporters/jaeger_thrift/src/test/java/io/opentelemetry/exporters/jaeger/JaegerThriftIntegrationTest.java\n+++ b/exporters/jaeger_thrift/src/test/java/io/opentelemetry/exporters/jaeger/JaegerThriftIntegrationTest.java\n\n@@ -7,12 +7,12 @@ package io.opentelemetry.exporters.jaeger;\n \n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.ObjectMapper;\n-import io.opentelemetry.api.OpenTelemetry;\n-import io.opentelemetry.api.trace.Span;\n-import io.opentelemetry.api.trace.Tracer;\n+import io.opentelemetry.OpenTelemetry;\n import io.opentelemetry.sdk.OpenTelemetrySdk;\n import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n import io.opentelemetry.sdk.trace.export.SpanExporter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n import java.util.concurrent.TimeUnit;\n import okhttp3.OkHttpClient;\n import okhttp3.Request;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUwMTgzOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1875#discussion_r513501838", "bodyText": "Confused why use CharSequence here and String in the other place. We should be consistent.", "author": "bogdandrutu", "createdAt": "2020-10-28T14:44:06Z", "path": "api/src/main/java/io/opentelemetry/api/trace/TraceId.java", "diffHunk": "@@ -140,6 +140,16 @@ public static String bytesToHex(byte[] traceId) {\n    * @return the rightmost 8 bytes of the trace-id as a long value.\n    */\n   public static long getTraceIdRandomPart(CharSequence traceId) {\n+    return traceIdLowBytesAsLong(traceId);\n+  }\n+\n+  /** Convert the \"high bytes\" of the given hex traceId into a long representation. */\n+  public static long traceIdHighBytesAsLong(CharSequence traceId) {\n+    return BigendianEncoding.longFromBase16String(traceId, 0);\n+  }\n+\n+  /** Convert the \"low bytes\" of the given hex traceId into a long representation. */\n+  public static long traceIdLowBytesAsLong(CharSequence traceId) {", "originalCommit": "9821ecd4a244825696e0597981b52fe753f54c21", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ccdbc07b6cf909163e7f9ad911f6c4b82ef8abd2", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/api/trace/TraceId.java b/api/src/main/java/io/opentelemetry/api/trace/TraceId.java\nindex 11d52ed56..cf7367b7c 100644\n--- a/api/src/main/java/io/opentelemetry/api/trace/TraceId.java\n+++ b/api/src/main/java/io/opentelemetry/api/trace/TraceId.java\n\n@@ -140,16 +140,14 @@ public final class TraceId {\n    * @return the rightmost 8 bytes of the trace-id as a long value.\n    */\n   public static long getTraceIdRandomPart(CharSequence traceId) {\n-    return traceIdLowBytesAsLong(traceId);\n+    return getTraceIdLowBytesAsLong(traceId);\n   }\n \n-  /** Convert the \"high bytes\" of the given hex traceId into a long representation. */\n-  public static long traceIdHighBytesAsLong(CharSequence traceId) {\n+  public static long getTraceIdHighBytesAsLong(CharSequence traceId) {\n     return BigendianEncoding.longFromBase16String(traceId, 0);\n   }\n \n-  /** Convert the \"low bytes\" of the given hex traceId into a long representation. */\n-  public static long traceIdLowBytesAsLong(CharSequence traceId) {\n+  public static long getTraceIdLowBytesAsLong(CharSequence traceId) {\n     return BigendianEncoding.longFromBase16String(traceId, BigendianEncoding.LONG_BASE16);\n   }\n }\n"}}, {"oid": "ccdbc07b6cf909163e7f9ad911f6c4b82ef8abd2", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ccdbc07b6cf909163e7f9ad911f6c4b82ef8abd2", "message": "Initial implementation of a jaeger thrift exporter.", "committedDate": "2020-10-30T20:04:23Z", "type": "commit"}, {"oid": "f8147a91143dc4d05347cdd8b778068712017e48", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f8147a91143dc4d05347cdd8b778068712017e48", "message": "some cleanups/renaming", "committedDate": "2020-10-30T20:04:23Z", "type": "commit"}, {"oid": "b3bb689fa79989ecf8d80db58521372566665651", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b3bb689fa79989ecf8d80db58521372566665651", "message": "fix? the formatting", "committedDate": "2020-10-30T20:04:23Z", "type": "commit"}, {"oid": "a9104e4bb7d44f479a9ecc6632995b60a58c5e30", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a9104e4bb7d44f479a9ecc6632995b60a58c5e30", "message": "Fix the default endpoint.", "committedDate": "2020-10-30T20:04:24Z", "type": "commit"}, {"oid": "fd5883349fb7d9b1531788884cbd92e588bae0cb", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/fd5883349fb7d9b1531788884cbd92e588bae0cb", "message": "Update exporters/jaeger_thrift/README.md\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>", "committedDate": "2020-10-30T20:04:24Z", "type": "commit"}, {"oid": "9fd6f0273652884c6cbe1b5bfed56067bf1b3e8f", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9fd6f0273652884c6cbe1b5bfed56067bf1b3e8f", "message": "Update exporters/jaeger_thrift/README.md\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>", "committedDate": "2020-10-30T20:04:24Z", "type": "commit"}, {"oid": "0e7c2a088e5e42c698da6d9bcbb81658fc35c7ac", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0e7c2a088e5e42c698da6d9bcbb81658fc35c7ac", "message": "Update exporters/jaeger_thrift/src/main/java/io/opentelemetry/exporters/jaeger/Adapter.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>", "committedDate": "2020-10-30T20:04:24Z", "type": "commit"}, {"oid": "4f1ba6e67541efd517a5ada8f60cbed4d273a900", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/4f1ba6e67541efd517a5ada8f60cbed4d273a900", "message": "Update exporters/jaeger_thrift/src/main/java/io/opentelemetry/exporters/jaeger/JaegerThriftSpanExporter.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>", "committedDate": "2020-10-30T20:04:24Z", "type": "commit"}, {"oid": "1e99013c8946b777d21d65104e3c1b0723221386", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1e99013c8946b777d21d65104e3c1b0723221386", "message": "cleanup from PR review", "committedDate": "2020-10-30T20:04:24Z", "type": "commit"}, {"oid": "eaaeb1530b3efbc5b79098e8d6a851be646e9ac1", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/eaaeb1530b3efbc5b79098e8d6a851be646e9ac1", "message": "fix from upstream change", "committedDate": "2020-10-30T20:04:24Z", "type": "commit"}, {"oid": "6150c5362bddedeb806a4444509d6d418b7ad5fc", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/6150c5362bddedeb806a4444509d6d418b7ad5fc", "message": "add assertions about the results of the exports\nand fix the code to make sure the results were included.", "committedDate": "2020-10-30T20:04:24Z", "type": "commit"}, {"oid": "7371ca52989c5e904bcc211a2ebbb7b215e0ffb2", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/7371ca52989c5e904bcc211a2ebbb7b215e0ffb2", "message": "update for api repackaging", "committedDate": "2020-10-30T20:04:24Z", "type": "commit"}, {"oid": "fbe5f766a03a6404d4142cc9b1e53780f576c674", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/fbe5f766a03a6404d4142cc9b1e53780f576c674", "message": "add some fuzzing tests for the id <-> long conversions", "committedDate": "2020-10-30T20:04:24Z", "type": "commit"}, {"oid": "fa8e5bf9d8a08a3d718949f20ac2e2d923343c26", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/fa8e5bf9d8a08a3d718949f20ac2e2d923343c26", "message": "change SpanId interface to match the TraceId one.", "committedDate": "2020-10-30T20:04:24Z", "type": "commit"}, {"oid": "246b9e5be58d81090738dd4079154624ce21e178", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/246b9e5be58d81090738dd4079154624ce21e178", "message": "Made a test method non-public", "committedDate": "2020-10-30T20:12:00Z", "type": "commit"}, {"oid": "246b9e5be58d81090738dd4079154624ce21e178", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/246b9e5be58d81090738dd4079154624ce21e178", "message": "Made a test method non-public", "committedDate": "2020-10-30T20:12:00Z", "type": "forcePushed"}]}