{"pr_number": 1369, "pr_title": "support aws plugins EC2/ECS/Beanstalk", "pr_createdAt": "2020-06-23T08:58:52Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1369", "timeline": [{"oid": "65175d78f3aba93782bdea8f2a89300f2e9c3a3d", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/65175d78f3aba93782bdea8f2a89300f2e9c3a3d", "message": "support aws plugins EC2/ECS/Beanstalk", "committedDate": "2020-06-23T08:52:44Z", "type": "commit"}, {"oid": "708e0a6ee073d775afaff5ffb23b7e701e05ecbc", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/708e0a6ee073d775afaff5ffb23b7e701e05ecbc", "message": "support aws plugins EC2/ECS/Beanstalk", "committedDate": "2020-06-23T08:56:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA3MzQzOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1369#discussion_r444073438", "bodyText": "This is ok but I would just pass System.getEnv() map. Gives a bit more test coverage", "author": "anuraaga", "createdAt": "2020-06-23T09:02:11Z", "path": "sdk_extensions/aws_v1_support/src/main/java/io/opentelemetry/sdk/extensions/trace/aws/resource/EcsResource.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.trace.aws.resource;\n+\n+import static io.opentelemetry.common.AttributeValue.stringAttributeValue;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableMap;\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.sdk.resources.ResourceConstants;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+class EcsResource extends AwsResource {\n+\n+  private static final Logger logger = Logger.getLogger(EcsResource.class.getName());\n+\n+  private static final String ECS_METADATA_KEY_V4 = \"ECS_CONTAINER_METADATA_URI_V4\";\n+  private static final String ECS_METADATA_KEY_V3 = \"ECS_CONTAINER_METADATA_URI\";\n+  private static final String CONTAINER_ID = \"container.id\";\n+\n+  private final DockerHelper dockerHelper;\n+  private final String uriV3;\n+  private final String uriV4;\n+\n+  EcsResource() {\n+    this(\n+        new DockerHelper(), System.getenv(ECS_METADATA_KEY_V3), System.getenv(ECS_METADATA_KEY_V4));", "originalCommit": "708e0a6ee073d775afaff5ffb23b7e701e05ecbc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d34260c14b5085dbf187c0f7c6843b6f0fb5cbab", "chunk": "diff --git a/sdk_extensions/aws_v1_support/src/main/java/io/opentelemetry/sdk/extensions/trace/aws/resource/EcsResource.java b/sdk_extensions/aws_v1_support/src/main/java/io/opentelemetry/sdk/extensions/trace/aws/resource/EcsResource.java\nindex 25a566df5..6ee0398d2 100644\n--- a/sdk_extensions/aws_v1_support/src/main/java/io/opentelemetry/sdk/extensions/trace/aws/resource/EcsResource.java\n+++ b/sdk_extensions/aws_v1_support/src/main/java/io/opentelemetry/sdk/extensions/trace/aws/resource/EcsResource.java\n\n@@ -16,12 +16,9 @@\n \n package io.opentelemetry.sdk.extensions.trace.aws.resource;\n \n-import static io.opentelemetry.common.AttributeValue.stringAttributeValue;\n-\n import com.google.common.annotations.VisibleForTesting;\n import com.google.common.base.Strings;\n-import com.google.common.collect.ImmutableMap;\n-import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.common.Attributes;\n import io.opentelemetry.sdk.resources.ResourceConstants;\n import java.net.InetAddress;\n import java.net.UnknownHostException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA3NTc2Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1369#discussion_r444075766", "bodyText": "Prefer guava (I think this is leaked into our test classpath but in general we don't use Apache commons)\nhttps://guava.dev/releases/21.0/api/docs/com/google/common/io/Files.html#write-java.lang.CharSequence-java.io.File-java.nio.charset.Charset-", "author": "anuraaga", "createdAt": "2020-06-23T09:06:00Z", "path": "sdk_extensions/aws_v1_support/src/test/java/io/opentelemetry/sdk/extensions/trace/aws/resource/BeanstalkResourceTest.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.trace.aws.resource;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.sdk.resources.ResourceConstants;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Map;\n+import org.apache.commons.io.FileUtils;", "originalCommit": "708e0a6ee073d775afaff5ffb23b7e701e05ecbc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d34260c14b5085dbf187c0f7c6843b6f0fb5cbab", "chunk": "diff --git a/sdk_extensions/aws_v1_support/src/test/java/io/opentelemetry/sdk/extensions/trace/aws/resource/BeanstalkResourceTest.java b/sdk_extensions/aws_v1_support/src/test/java/io/opentelemetry/sdk/extensions/trace/aws/resource/BeanstalkResourceTest.java\nindex 382dae1bb..e3d589584 100644\n--- a/sdk_extensions/aws_v1_support/src/test/java/io/opentelemetry/sdk/extensions/trace/aws/resource/BeanstalkResourceTest.java\n+++ b/sdk_extensions/aws_v1_support/src/test/java/io/opentelemetry/sdk/extensions/trace/aws/resource/BeanstalkResourceTest.java\n\n@@ -17,13 +17,14 @@\n package io.opentelemetry.sdk.extensions.trace.aws.resource;\n \n import static com.google.common.truth.Truth.assertThat;\n+import static io.opentelemetry.common.AttributeValue.stringAttributeValue;\n \n-import io.opentelemetry.common.AttributeValue;\n+import com.google.common.base.Charsets;\n+import com.google.common.io.Files;\n+import io.opentelemetry.common.Attributes;\n import io.opentelemetry.sdk.resources.ResourceConstants;\n import java.io.File;\n import java.io.IOException;\n-import java.util.Map;\n-import org.apache.commons.io.FileUtils;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.TemporaryFolder;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA3NjY5MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1369#discussion_r444076691", "bodyText": "I realized we can use Guava's Files readalllines if we want.", "author": "anuraaga", "createdAt": "2020-06-23T09:07:38Z", "path": "sdk_extensions/aws_v1_support/src/main/java/io/opentelemetry/sdk/extensions/trace/aws/resource/DockerHelper.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.trace.aws.resource;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import java.io.BufferedReader;\n+import java.io.FileNotFoundException;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+class DockerHelper {\n+\n+  private static final Logger logger = Logger.getLogger(DockerHelper.class.getName());\n+  private static final int CONTAINER_ID_LENGTH = 64;\n+  private static final String DEFAULT_CGROUP_PATH = \"/proc/self/cgroup\";\n+\n+  private final String cgroupPath;\n+\n+  DockerHelper() {\n+    this(DEFAULT_CGROUP_PATH);\n+  }\n+\n+  @VisibleForTesting\n+  DockerHelper(String cgroupPath) {\n+    this.cgroupPath = cgroupPath;\n+  }\n+\n+  /**\n+   * Get docker container id from local cgroup file.\n+   *\n+   * @return docker container ID\n+   */\n+  @SuppressWarnings(\"DefaultCharset\")\n+  public String getContainerId() {\n+    try (BufferedReader br = new BufferedReader(new FileReader(cgroupPath))) {", "originalCommit": "708e0a6ee073d775afaff5ffb23b7e701e05ecbc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "15901eceaf4282cfd6a7e09c5d618553d1e7cb9e", "chunk": "diff --git a/sdk_extensions/aws_v1_support/src/main/java/io/opentelemetry/sdk/extensions/trace/aws/resource/DockerHelper.java b/sdk_extensions/aws_v1_support/src/main/java/io/opentelemetry/sdk/extensions/trace/aws/resource/DockerHelper.java\ndeleted file mode 100644\nindex 22d8ed520..000000000\n--- a/sdk_extensions/aws_v1_support/src/main/java/io/opentelemetry/sdk/extensions/trace/aws/resource/DockerHelper.java\n+++ /dev/null\n\n@@ -1,66 +0,0 @@\n-/*\n- * Copyright 2020, OpenTelemetry Authors\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package io.opentelemetry.sdk.extensions.trace.aws.resource;\n-\n-import com.google.common.annotations.VisibleForTesting;\n-import java.io.BufferedReader;\n-import java.io.FileNotFoundException;\n-import java.io.FileReader;\n-import java.io.IOException;\n-import java.util.logging.Level;\n-import java.util.logging.Logger;\n-\n-class DockerHelper {\n-\n-  private static final Logger logger = Logger.getLogger(DockerHelper.class.getName());\n-  private static final int CONTAINER_ID_LENGTH = 64;\n-  private static final String DEFAULT_CGROUP_PATH = \"/proc/self/cgroup\";\n-\n-  private final String cgroupPath;\n-\n-  DockerHelper() {\n-    this(DEFAULT_CGROUP_PATH);\n-  }\n-\n-  @VisibleForTesting\n-  DockerHelper(String cgroupPath) {\n-    this.cgroupPath = cgroupPath;\n-  }\n-\n-  /**\n-   * Get docker container id from local cgroup file.\n-   *\n-   * @return docker container ID\n-   */\n-  @SuppressWarnings(\"DefaultCharset\")\n-  public String getContainerId() {\n-    try (BufferedReader br = new BufferedReader(new FileReader(cgroupPath))) {\n-      String line;\n-      while ((line = br.readLine()) != null) {\n-        if (line.length() > CONTAINER_ID_LENGTH) {\n-          return line.substring(line.length() - CONTAINER_ID_LENGTH);\n-        }\n-      }\n-    } catch (FileNotFoundException e) {\n-      logger.log(Level.WARNING, \"Failed to read container id, cgroup file does not exist.\");\n-    } catch (IOException e) {\n-      logger.log(Level.WARNING, \"Unable to read container id: \" + e.getMessage());\n-    }\n-\n-    return \"\";\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA3NzY4MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1369#discussion_r444077681", "bodyText": "There should be assertThat(metadata).isEmpty", "author": "anuraaga", "createdAt": "2020-06-23T09:09:18Z", "path": "sdk_extensions/aws_v1_support/src/test/java/io/opentelemetry/sdk/extensions/trace/aws/resource/BeanstalkResourceTest.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.trace.aws.resource;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.sdk.resources.ResourceConstants;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Map;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+public class BeanstalkResourceTest {\n+\n+  @Rule public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+  @Test\n+  public void testCreateAttributes() throws IOException {\n+    File file = tempFolder.newFile(\"beanstalk.config\");\n+    FileUtils.writeStringToFile(\n+        file,\n+        \"{\\\"noise\\\": \\\"noise\\\", \\\"deployment_id\\\":4,\\\"\"\n+            + \"version_label\\\":\\\"2\\\",\\\"environment_name\\\":\\\"HttpSubscriber-env\\\"}\");\n+    BeanstalkResource populator = new BeanstalkResource(file.getPath());\n+    Map<String, AttributeValue> metadata = populator.createAttributes();\n+\n+    assertThat(metadata.size()).isEqualTo(3);\n+    assertThat(metadata.get(ResourceConstants.SERVICE_INSTANCE).getStringValue()).isEqualTo(\"4\");\n+    assertThat(metadata.get(ResourceConstants.SERVICE_VERSION).getStringValue()).isEqualTo(\"2\");\n+    assertThat(metadata.get(ResourceConstants.SERVICE_NAMESPACE).getStringValue())\n+        .isEqualTo(\"HttpSubscriber-env\");\n+  }\n+\n+  @Test\n+  public void testConfigFileMissing() throws IOException {\n+    BeanstalkResource populator = new BeanstalkResource(\"a_file_never_existing\");\n+    Map<String, AttributeValue> metadata = populator.createAttributes();\n+    assertThat(metadata.size()).isEqualTo(0);", "originalCommit": "708e0a6ee073d775afaff5ffb23b7e701e05ecbc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d34260c14b5085dbf187c0f7c6843b6f0fb5cbab", "chunk": "diff --git a/sdk_extensions/aws_v1_support/src/test/java/io/opentelemetry/sdk/extensions/trace/aws/resource/BeanstalkResourceTest.java b/sdk_extensions/aws_v1_support/src/test/java/io/opentelemetry/sdk/extensions/trace/aws/resource/BeanstalkResourceTest.java\nindex 382dae1bb..e3d589584 100644\n--- a/sdk_extensions/aws_v1_support/src/test/java/io/opentelemetry/sdk/extensions/trace/aws/resource/BeanstalkResourceTest.java\n+++ b/sdk_extensions/aws_v1_support/src/test/java/io/opentelemetry/sdk/extensions/trace/aws/resource/BeanstalkResourceTest.java\n\n@@ -17,13 +17,14 @@\n package io.opentelemetry.sdk.extensions.trace.aws.resource;\n \n import static com.google.common.truth.Truth.assertThat;\n+import static io.opentelemetry.common.AttributeValue.stringAttributeValue;\n \n-import io.opentelemetry.common.AttributeValue;\n+import com.google.common.base.Charsets;\n+import com.google.common.io.Files;\n+import io.opentelemetry.common.Attributes;\n import io.opentelemetry.sdk.resources.ResourceConstants;\n import java.io.File;\n import java.io.IOException;\n-import java.util.Map;\n-import org.apache.commons.io.FileUtils;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.TemporaryFolder;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA3ODQ2MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1369#discussion_r444078461", "bodyText": "Just do assertThat(metadata).containsExactly for all the map assertions in the PR", "author": "anuraaga", "createdAt": "2020-06-23T09:10:33Z", "path": "sdk_extensions/aws_v1_support/src/test/java/io/opentelemetry/sdk/extensions/trace/aws/resource/BeanstalkResourceTest.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.trace.aws.resource;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.sdk.resources.ResourceConstants;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Map;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+public class BeanstalkResourceTest {\n+\n+  @Rule public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+  @Test\n+  public void testCreateAttributes() throws IOException {\n+    File file = tempFolder.newFile(\"beanstalk.config\");\n+    FileUtils.writeStringToFile(\n+        file,\n+        \"{\\\"noise\\\": \\\"noise\\\", \\\"deployment_id\\\":4,\\\"\"\n+            + \"version_label\\\":\\\"2\\\",\\\"environment_name\\\":\\\"HttpSubscriber-env\\\"}\");\n+    BeanstalkResource populator = new BeanstalkResource(file.getPath());\n+    Map<String, AttributeValue> metadata = populator.createAttributes();\n+\n+    assertThat(metadata.size()).isEqualTo(3);", "originalCommit": "708e0a6ee073d775afaff5ffb23b7e701e05ecbc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d34260c14b5085dbf187c0f7c6843b6f0fb5cbab", "chunk": "diff --git a/sdk_extensions/aws_v1_support/src/test/java/io/opentelemetry/sdk/extensions/trace/aws/resource/BeanstalkResourceTest.java b/sdk_extensions/aws_v1_support/src/test/java/io/opentelemetry/sdk/extensions/trace/aws/resource/BeanstalkResourceTest.java\nindex 382dae1bb..e3d589584 100644\n--- a/sdk_extensions/aws_v1_support/src/test/java/io/opentelemetry/sdk/extensions/trace/aws/resource/BeanstalkResourceTest.java\n+++ b/sdk_extensions/aws_v1_support/src/test/java/io/opentelemetry/sdk/extensions/trace/aws/resource/BeanstalkResourceTest.java\n\n@@ -17,13 +17,14 @@\n package io.opentelemetry.sdk.extensions.trace.aws.resource;\n \n import static com.google.common.truth.Truth.assertThat;\n+import static io.opentelemetry.common.AttributeValue.stringAttributeValue;\n \n-import io.opentelemetry.common.AttributeValue;\n+import com.google.common.base.Charsets;\n+import com.google.common.io.Files;\n+import io.opentelemetry.common.Attributes;\n import io.opentelemetry.sdk.resources.ResourceConstants;\n import java.io.File;\n import java.io.IOException;\n-import java.util.Map;\n-import org.apache.commons.io.FileUtils;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.TemporaryFolder;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA4MDA5Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1369#discussion_r444080093", "bodyText": "According to the specifications there is not container.id field. Do you have a use case for this field?", "author": "thisthat", "createdAt": "2020-06-23T09:13:15Z", "path": "sdk_extensions/aws_v1_support/src/main/java/io/opentelemetry/sdk/extensions/trace/aws/resource/EcsResource.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.trace.aws.resource;\n+\n+import static io.opentelemetry.common.AttributeValue.stringAttributeValue;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableMap;\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.sdk.resources.ResourceConstants;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+class EcsResource extends AwsResource {\n+\n+  private static final Logger logger = Logger.getLogger(EcsResource.class.getName());\n+\n+  private static final String ECS_METADATA_KEY_V4 = \"ECS_CONTAINER_METADATA_URI_V4\";\n+  private static final String ECS_METADATA_KEY_V3 = \"ECS_CONTAINER_METADATA_URI\";\n+  private static final String CONTAINER_ID = \"container.id\";\n+\n+  private final DockerHelper dockerHelper;\n+  private final String uriV3;\n+  private final String uriV4;\n+\n+  EcsResource() {\n+    this(\n+        new DockerHelper(), System.getenv(ECS_METADATA_KEY_V3), System.getenv(ECS_METADATA_KEY_V4));\n+  }\n+\n+  @VisibleForTesting\n+  EcsResource(DockerHelper dockerHelper, String uriV3, String uriV4) {\n+    this.dockerHelper = dockerHelper;\n+    this.uriV3 = uriV3;\n+    this.uriV4 = uriV4;\n+  }\n+\n+  @Override\n+  Map<String, AttributeValue> createAttributes() {\n+    // Check whether we are actually on ECS\n+    if ((Strings.isNullOrEmpty(uriV3) && Strings.isNullOrEmpty(uriV4))) {\n+      return ImmutableMap.of();\n+    }\n+\n+    ImmutableMap.Builder<String, AttributeValue> resourceAttributes = ImmutableMap.builder();\n+    try {\n+      String hostName = InetAddress.getLocalHost().getHostName();\n+      resourceAttributes.put(ResourceConstants.CONTAINER_NAME, stringAttributeValue(hostName));\n+    } catch (UnknownHostException e) {\n+      logger.log(Level.WARNING, \"Could not get docker container name from hostname.\", e);\n+    }\n+\n+    String containerId = dockerHelper.getContainerId();\n+    if (!Strings.isNullOrEmpty(containerId)) {\n+      resourceAttributes.put(CONTAINER_ID, stringAttributeValue(containerId));", "originalCommit": "708e0a6ee073d775afaff5ffb23b7e701e05ecbc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA4NTMwNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1369#discussion_r444085306", "bodyText": "Ah nice eyes didn't notice this isn't semanticattributes.\n@wangzlei shouldn't this be container name and the above hostname?", "author": "anuraaga", "createdAt": "2020-06-23T09:22:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA4MDA5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM3MDc4Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1369#discussion_r444370783", "bodyText": "We should definitely only be putting official semantic attributes into the Resource. And, the keys should be being kept in the io.opentelemetry.sdk.resource.ResourceConstants class.", "author": "jkwatson", "createdAt": "2020-06-23T16:56:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA4MDA5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYxMDYzMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1369#discussion_r444610631", "bodyText": "Yeah I think we'll look at proposing container.id as a semantic convention, it seems to be missing (name is usually human readable not the ID).\nBut wanted to confirm, you think there should only be official semantic attributes here? What about vendor-specific resource attributes? For example, AWS services have a log group ID used for correlation, which is sort of independent from other semantic values like the service name. I was sort of expecting we'd add this as a non-standard attribute on the resource at some point.", "author": "anuraaga", "createdAt": "2020-06-24T02:32:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA4MDA5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYxMTUzNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1369#discussion_r444611534", "bodyText": "Actually nevermind, I guess this log group I'm thinking of is x-ray specific, but not for general AWS users. So yeah doesn't belong here most likely :)", "author": "anuraaga", "createdAt": "2020-06-24T02:36:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA4MDA5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMyOTAzMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1369#discussion_r445329032", "bodyText": "Just realize that my previous reply was not sent out.\nRefer to docker documentation Container identification, Container's full-id, short-id and name are equivalent in docker CLI like 'docker info '. name is usually human readable and can be changed by command 'docker rename' during runtime.\nI will cut a PR for adding container.id in semantic conversions. Thanks.", "author": "wangzlei", "createdAt": "2020-06-25T06:15:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA4MDA5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "d34260c14b5085dbf187c0f7c6843b6f0fb5cbab", "chunk": "diff --git a/sdk_extensions/aws_v1_support/src/main/java/io/opentelemetry/sdk/extensions/trace/aws/resource/EcsResource.java b/sdk_extensions/aws_v1_support/src/main/java/io/opentelemetry/sdk/extensions/trace/aws/resource/EcsResource.java\nindex 25a566df5..6ee0398d2 100644\n--- a/sdk_extensions/aws_v1_support/src/main/java/io/opentelemetry/sdk/extensions/trace/aws/resource/EcsResource.java\n+++ b/sdk_extensions/aws_v1_support/src/main/java/io/opentelemetry/sdk/extensions/trace/aws/resource/EcsResource.java\n\n@@ -16,12 +16,9 @@\n \n package io.opentelemetry.sdk.extensions.trace.aws.resource;\n \n-import static io.opentelemetry.common.AttributeValue.stringAttributeValue;\n-\n import com.google.common.annotations.VisibleForTesting;\n import com.google.common.base.Strings;\n-import com.google.common.collect.ImmutableMap;\n-import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.common.Attributes;\n import io.opentelemetry.sdk.resources.ResourceConstants;\n import java.net.InetAddress;\n import java.net.UnknownHostException;\n"}}, {"oid": "d34260c14b5085dbf187c0f7c6843b6f0fb5cbab", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d34260c14b5085dbf187c0f7c6843b6f0fb5cbab", "message": "change to Guava Files, change Map to Attributes", "committedDate": "2020-06-24T19:54:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM2MTc5Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1369#discussion_r445361792", "bodyText": "Avoid unnecessary null checks, sysEnv can't be null (unless a unit test passes it randomly which is something we don't need to worry about in business logic)", "author": "anuraaga", "createdAt": "2020-06-25T07:32:24Z", "path": "sdk_extensions/aws_v1_support/src/main/java/io/opentelemetry/sdk/extensions/trace/aws/resource/EcsResource.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.trace.aws.resource;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import io.opentelemetry.common.Attributes;\n+import io.opentelemetry.sdk.resources.ResourceConstants;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+class EcsResource extends AwsResource {\n+\n+  private static final Logger logger = Logger.getLogger(EcsResource.class.getName());\n+\n+  private static final String ECS_METADATA_KEY_V4 = \"ECS_CONTAINER_METADATA_URI_V4\";\n+  private static final String ECS_METADATA_KEY_V3 = \"ECS_CONTAINER_METADATA_URI\";\n+\n+  private final Map<String, String> sysEnv;\n+\n+  EcsResource() {\n+    this(System.getenv());\n+  }\n+\n+  @VisibleForTesting\n+  EcsResource(Map<String, String> sysEnv) {\n+    this.sysEnv = sysEnv;\n+  }\n+\n+  @Override\n+  Attributes createAttributes() {\n+    if (!isOnEcs()) {\n+      return Attributes.empty();\n+    }\n+\n+    Attributes.Builder attrBuilders = Attributes.newBuilder();\n+    try {\n+      String hostName = InetAddress.getLocalHost().getHostName();\n+      attrBuilders.setAttribute(ResourceConstants.CONTAINER_NAME, hostName);\n+\n+    } catch (UnknownHostException e) {\n+      logger.log(Level.WARNING, \"Could not get docker container name from hostname.\", e);\n+    }\n+\n+    return attrBuilders.build();\n+  }\n+\n+  private boolean isOnEcs() {\n+    if (sysEnv == null) {", "originalCommit": "d34260c14b5085dbf187c0f7c6843b6f0fb5cbab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2ODI4MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1369#discussion_r445868280", "bodyText": "removed null check and synEnv null test", "author": "wangzlei", "createdAt": "2020-06-25T22:14:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM2MTc5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "15901eceaf4282cfd6a7e09c5d618553d1e7cb9e", "chunk": "diff --git a/sdk_extensions/aws_v1_support/src/main/java/io/opentelemetry/sdk/extensions/trace/aws/resource/EcsResource.java b/sdk_extensions/aws_v1_support/src/main/java/io/opentelemetry/sdk/extensions/trace/aws/resource/EcsResource.java\nindex 6ee0398d2..25a1a9665 100644\n--- a/sdk_extensions/aws_v1_support/src/main/java/io/opentelemetry/sdk/extensions/trace/aws/resource/EcsResource.java\n+++ b/sdk_extensions/aws_v1_support/src/main/java/io/opentelemetry/sdk/extensions/trace/aws/resource/EcsResource.java\n\n@@ -63,10 +63,6 @@ class EcsResource extends AwsResource {\n   }\n \n   private boolean isOnEcs() {\n-    if (sysEnv == null) {\n-      return false;\n-    }\n-\n     return (!Strings.isNullOrEmpty(sysEnv.get(ECS_METADATA_KEY_V3))\n         || !Strings.isNullOrEmpty(sysEnv.get(ECS_METADATA_KEY_V4)));\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM3Mzc5NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1369#discussion_r445373795", "bodyText": "This class is not used after the removal of container.id. I would remove it and reintroduce it when your suggested spec changes are accepted :)", "author": "thisthat", "createdAt": "2020-06-25T07:54:36Z", "path": "sdk_extensions/aws_v1_support/src/main/java/io/opentelemetry/sdk/extensions/trace/aws/resource/DockerHelper.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*", "originalCommit": "d34260c14b5085dbf187c0f7c6843b6f0fb5cbab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2NjA5OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1369#discussion_r445866099", "bodyText": "I agree. let's remove it if we're not using it.", "author": "jkwatson", "createdAt": "2020-06-25T22:09:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM3Mzc5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2ODQ2OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1369#discussion_r445868469", "bodyText": "removed DockerHelper and unit test from PR", "author": "wangzlei", "createdAt": "2020-06-25T22:14:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM3Mzc5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "15901eceaf4282cfd6a7e09c5d618553d1e7cb9e", "chunk": "diff --git a/sdk_extensions/aws_v1_support/src/main/java/io/opentelemetry/sdk/extensions/trace/aws/resource/DockerHelper.java b/sdk_extensions/aws_v1_support/src/main/java/io/opentelemetry/sdk/extensions/trace/aws/resource/DockerHelper.java\ndeleted file mode 100644\nindex 22d8ed520..000000000\n--- a/sdk_extensions/aws_v1_support/src/main/java/io/opentelemetry/sdk/extensions/trace/aws/resource/DockerHelper.java\n+++ /dev/null\n\n@@ -1,66 +0,0 @@\n-/*\n- * Copyright 2020, OpenTelemetry Authors\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package io.opentelemetry.sdk.extensions.trace.aws.resource;\n-\n-import com.google.common.annotations.VisibleForTesting;\n-import java.io.BufferedReader;\n-import java.io.FileNotFoundException;\n-import java.io.FileReader;\n-import java.io.IOException;\n-import java.util.logging.Level;\n-import java.util.logging.Logger;\n-\n-class DockerHelper {\n-\n-  private static final Logger logger = Logger.getLogger(DockerHelper.class.getName());\n-  private static final int CONTAINER_ID_LENGTH = 64;\n-  private static final String DEFAULT_CGROUP_PATH = \"/proc/self/cgroup\";\n-\n-  private final String cgroupPath;\n-\n-  DockerHelper() {\n-    this(DEFAULT_CGROUP_PATH);\n-  }\n-\n-  @VisibleForTesting\n-  DockerHelper(String cgroupPath) {\n-    this.cgroupPath = cgroupPath;\n-  }\n-\n-  /**\n-   * Get docker container id from local cgroup file.\n-   *\n-   * @return docker container ID\n-   */\n-  @SuppressWarnings(\"DefaultCharset\")\n-  public String getContainerId() {\n-    try (BufferedReader br = new BufferedReader(new FileReader(cgroupPath))) {\n-      String line;\n-      while ((line = br.readLine()) != null) {\n-        if (line.length() > CONTAINER_ID_LENGTH) {\n-          return line.substring(line.length() - CONTAINER_ID_LENGTH);\n-        }\n-      }\n-    } catch (FileNotFoundException e) {\n-      logger.log(Level.WARNING, \"Failed to read container id, cgroup file does not exist.\");\n-    } catch (IOException e) {\n-      logger.log(Level.WARNING, \"Unable to read container id: \" + e.getMessage());\n-    }\n-\n-    return \"\";\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2MDAwOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1369#discussion_r445860008", "bodyText": "This makes me think that a \"merge\" function might be useful on the Attributes, like we have on the Resource itself.", "author": "jkwatson", "createdAt": "2020-06-25T21:53:48Z", "path": "sdk_extensions/aws_v1_support/src/main/java/io/opentelemetry/sdk/extensions/trace/aws/resource/AwsResource.java", "diffHunk": "@@ -31,25 +30,26 @@\n    * environment, e.g., metadata for the instance if the app is running on EC2.\n    */\n   public static Resource create() {\n-    return create(new Ec2Resource());\n+    return create(new Ec2Resource(), new EcsResource(), new BeanstalkResource());\n   }\n \n   @VisibleForTesting\n   static Resource create(AwsResource... populators) {\n-    Map<String, AttributeValue> attrMap = new LinkedHashMap<>();\n-\n+    final Attributes.Builder attrBuilder = Attributes.newBuilder();\n     for (AwsResource populator : populators) {\n-      attrMap.putAll(populator.createAttributes());\n-    }\n-\n-    Attributes.Builder attrBuilder = Attributes.newBuilder();\n-    for (Map.Entry<String, AttributeValue> attr : attrMap.entrySet()) {\n-      attrBuilder.setAttribute(attr.getKey(), attr.getValue());\n+      Attributes attrs = populator.createAttributes();\n+      attrs.forEach(", "originalCommit": "d34260c14b5085dbf187c0f7c6843b6f0fb5cbab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2NjcyNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1369#discussion_r445866724", "bodyText": "A ready-to-use merge would be better. One more thing I found in unit test is if builder set the duplicated key, the final Attributes has the fist one but not the last one. It seems wired that usually the last one can override the first. Please see my AwsResourceTest.java", "author": "wangzlei", "createdAt": "2020-06-25T22:10:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2MDAwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg3MDY5MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1369#discussion_r445870691", "bodyText": "Yes, we currently keep the first, if there are duplicates. If you think this is not correct, please file an issue!", "author": "jkwatson", "createdAt": "2020-06-25T22:20:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2MDAwOA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "15901eceaf4282cfd6a7e09c5d618553d1e7cb9e", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/15901eceaf4282cfd6a7e09c5d618553d1e7cb9e", "message": "Remove DockerHelper until has container.id in sematic conventions.", "committedDate": "2020-06-25T22:13:38Z", "type": "commit"}]}