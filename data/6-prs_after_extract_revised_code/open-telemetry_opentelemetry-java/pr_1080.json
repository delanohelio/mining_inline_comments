{"pr_number": 1080, "pr_title": "Configuration class for BatchSpanProcessor", "pr_createdAt": "2020-04-06T07:08:03Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkyNzAxNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r403927015", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public abstract class ConfigBuilder {\n          \n          \n            \n            public abstract class ConfigurableBuilder {\n          \n      \n    \n    \n  \n\nLooking at the usages, this is not a builder for configuration, but the interface for a configurable builder. Consequently, I think the getProperty methods must be removed from here (they can be moved to a static helper class) and then this can become an interface instead of an abstract class.", "author": "Oberon00", "createdAt": "2020-04-06T08:49:40Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/common/ConfigBuilder.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.common;\n+\n+import java.util.Map;\n+\n+public abstract class ConfigBuilder {", "originalCommit": "877de57c2e89d72cf7a6c35f17abc1a80d220969", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgxMTU2OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r405811568", "bodyText": "Agree 100% with @Oberon00 's approach. We should try not to introduce class hierarchies when we can avoid it.", "author": "jkwatson", "createdAt": "2020-04-08T20:59:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkyNzAxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "fc02ade502a55a23264b30456fe4d08b557b69ea", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/common/ConfigBuilder.java b/sdk/src/main/java/io/opentelemetry/sdk/common/ConfigBuilder.java\ndeleted file mode 100644\nindex 2a67d981a..000000000\n--- a/sdk/src/main/java/io/opentelemetry/sdk/common/ConfigBuilder.java\n+++ /dev/null\n\n@@ -1,52 +0,0 @@\n-/*\n- * Copyright 2020, OpenTelemetry Authors\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package io.opentelemetry.sdk.common;\n-\n-import java.util.Map;\n-\n-public abstract class ConfigBuilder {\n-\n-  protected ConfigBuilder() {}\n-\n-  public abstract ConfigBuilder fromConfigMap(Map<String, String> configMap);\n-\n-  public abstract ConfigBuilder fromEnv();\n-\n-  protected boolean getProperty(String name, Map<String, String> map, boolean defaultValue) {\n-    try {\n-      return Boolean.parseBoolean(System.getProperty(name, map.get(name)));\n-    } catch (NumberFormatException ex) {\n-      return defaultValue;\n-    }\n-  }\n-\n-  protected int getProperty(String name, Map<String, String> map, int defaultValue) {\n-    try {\n-      return Integer.parseInt(System.getProperty(name, map.get(name)));\n-    } catch (NumberFormatException ex) {\n-      return defaultValue;\n-    }\n-  }\n-\n-  protected long getProperty(String name, Map<String, String> map, long defaultValue) {\n-    try {\n-      return Long.parseLong(System.getProperty(name, map.get(name)));\n-    } catch (NumberFormatException ex) {\n-      return defaultValue;\n-    }\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkzMzIwMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r403933200", "bodyText": "Since this is expected to call fromConfigMap(System.getenv()), I'd move it out of the interface.", "author": "Oberon00", "createdAt": "2020-04-06T08:59:22Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/common/ConfigBuilder.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.common;\n+\n+import java.util.Map;\n+\n+public abstract class ConfigBuilder {\n+\n+  protected ConfigBuilder() {}\n+\n+  public abstract ConfigBuilder fromConfigMap(Map<String, String> configMap);\n+\n+  public abstract ConfigBuilder fromEnv();", "originalCommit": "877de57c2e89d72cf7a6c35f17abc1a80d220969", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc02ade502a55a23264b30456fe4d08b557b69ea", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/common/ConfigBuilder.java b/sdk/src/main/java/io/opentelemetry/sdk/common/ConfigBuilder.java\ndeleted file mode 100644\nindex 2a67d981a..000000000\n--- a/sdk/src/main/java/io/opentelemetry/sdk/common/ConfigBuilder.java\n+++ /dev/null\n\n@@ -1,52 +0,0 @@\n-/*\n- * Copyright 2020, OpenTelemetry Authors\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package io.opentelemetry.sdk.common;\n-\n-import java.util.Map;\n-\n-public abstract class ConfigBuilder {\n-\n-  protected ConfigBuilder() {}\n-\n-  public abstract ConfigBuilder fromConfigMap(Map<String, String> configMap);\n-\n-  public abstract ConfigBuilder fromEnv();\n-\n-  protected boolean getProperty(String name, Map<String, String> map, boolean defaultValue) {\n-    try {\n-      return Boolean.parseBoolean(System.getProperty(name, map.get(name)));\n-    } catch (NumberFormatException ex) {\n-      return defaultValue;\n-    }\n-  }\n-\n-  protected int getProperty(String name, Map<String, String> map, int defaultValue) {\n-    try {\n-      return Integer.parseInt(System.getProperty(name, map.get(name)));\n-    } catch (NumberFormatException ex) {\n-      return defaultValue;\n-    }\n-  }\n-\n-  protected long getProperty(String name, Map<String, String> map, long defaultValue) {\n-    try {\n-      return Long.parseLong(System.getProperty(name, map.get(name)));\n-    } catch (NumberFormatException ex) {\n-      return defaultValue;\n-    }\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkzMzg1MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r403933851", "bodyText": "What naming conventions do we expect in configMap? ENV_VAR_CONVENTIONS? Or systemProperty.conventions? It seems the former.", "author": "Oberon00", "createdAt": "2020-04-06T09:00:23Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/common/ConfigBuilder.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.common;\n+\n+import java.util.Map;\n+\n+public abstract class ConfigBuilder {\n+\n+  protected ConfigBuilder() {}\n+\n+  public abstract ConfigBuilder fromConfigMap(Map<String, String> configMap);", "originalCommit": "877de57c2e89d72cf7a6c35f17abc1a80d220969", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyODg5NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r404628894", "bodyText": "From #996 (comment) it is the former, yes.\n@bogdandrutu and @trask could you please provide more input on this?", "author": "thisthat", "createdAt": "2020-04-07T08:26:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkzMzg1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgzNTcyMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r405835722", "bodyText": "I like the convention of looking for system properties with one.twoThree and looking for the same env var with ONE_TWO_THREE. Since the translation is not reversible (does ONE_TWO_THREE map to one.two.three or oneTwo.three or ...), I think it makes sense to use the system property names in the internal map.", "author": "trask", "createdAt": "2020-04-08T21:50:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkzMzg1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "fc02ade502a55a23264b30456fe4d08b557b69ea", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/common/ConfigBuilder.java b/sdk/src/main/java/io/opentelemetry/sdk/common/ConfigBuilder.java\ndeleted file mode 100644\nindex 2a67d981a..000000000\n--- a/sdk/src/main/java/io/opentelemetry/sdk/common/ConfigBuilder.java\n+++ /dev/null\n\n@@ -1,52 +0,0 @@\n-/*\n- * Copyright 2020, OpenTelemetry Authors\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package io.opentelemetry.sdk.common;\n-\n-import java.util.Map;\n-\n-public abstract class ConfigBuilder {\n-\n-  protected ConfigBuilder() {}\n-\n-  public abstract ConfigBuilder fromConfigMap(Map<String, String> configMap);\n-\n-  public abstract ConfigBuilder fromEnv();\n-\n-  protected boolean getProperty(String name, Map<String, String> map, boolean defaultValue) {\n-    try {\n-      return Boolean.parseBoolean(System.getProperty(name, map.get(name)));\n-    } catch (NumberFormatException ex) {\n-      return defaultValue;\n-    }\n-  }\n-\n-  protected int getProperty(String name, Map<String, String> map, int defaultValue) {\n-    try {\n-      return Integer.parseInt(System.getProperty(name, map.get(name)));\n-    } catch (NumberFormatException ex) {\n-      return defaultValue;\n-    }\n-  }\n-\n-  protected long getProperty(String name, Map<String, String> map, long defaultValue) {\n-    try {\n-      return Long.parseLong(System.getProperty(name, map.get(name)));\n-    } catch (NumberFormatException ex) {\n-      return defaultValue;\n-    }\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE3ODM3Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r404178376", "bodyText": "common.export?", "author": "bogdandrutu", "createdAt": "2020-04-06T15:23:27Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/common/ConfigBuilder.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.common;", "originalCommit": "877de57c2e89d72cf7a6c35f17abc1a80d220969", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc02ade502a55a23264b30456fe4d08b557b69ea", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/common/ConfigBuilder.java b/sdk/src/main/java/io/opentelemetry/sdk/common/ConfigBuilder.java\ndeleted file mode 100644\nindex 2a67d981a..000000000\n--- a/sdk/src/main/java/io/opentelemetry/sdk/common/ConfigBuilder.java\n+++ /dev/null\n\n@@ -1,52 +0,0 @@\n-/*\n- * Copyright 2020, OpenTelemetry Authors\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package io.opentelemetry.sdk.common;\n-\n-import java.util.Map;\n-\n-public abstract class ConfigBuilder {\n-\n-  protected ConfigBuilder() {}\n-\n-  public abstract ConfigBuilder fromConfigMap(Map<String, String> configMap);\n-\n-  public abstract ConfigBuilder fromEnv();\n-\n-  protected boolean getProperty(String name, Map<String, String> map, boolean defaultValue) {\n-    try {\n-      return Boolean.parseBoolean(System.getProperty(name, map.get(name)));\n-    } catch (NumberFormatException ex) {\n-      return defaultValue;\n-    }\n-  }\n-\n-  protected int getProperty(String name, Map<String, String> map, int defaultValue) {\n-    try {\n-      return Integer.parseInt(System.getProperty(name, map.get(name)));\n-    } catch (NumberFormatException ex) {\n-      return defaultValue;\n-    }\n-  }\n-\n-  protected long getProperty(String name, Map<String, String> map, long defaultValue) {\n-    try {\n-      return Long.parseLong(System.getProperty(name, map.get(name)));\n-    } catch (NumberFormatException ex) {\n-      return defaultValue;\n-    }\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE3OTQ0OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r404179448", "bodyText": "Use autovalue to avoid writing unnecessary code?", "author": "bogdandrutu", "createdAt": "2020-04-06T15:24:45Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -411,4 +321,184 @@ public void run() {\n       }\n     }\n   }\n+\n+  @Immutable\n+  public static final class Config {", "originalCommit": "877de57c2e89d72cf7a6c35f17abc1a80d220969", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc02ade502a55a23264b30456fe4d08b557b69ea", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\nindex 356f14ce8..506367894 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n\n@@ -323,144 +329,234 @@ public final class BatchSpansProcessor implements SpanProcessor {\n   }\n \n   @Immutable\n-  public static final class Config {\n-    private final long scheduleDelayMillis;\n-    private final int maxQueueSize;\n-    private final int maxExportBatchSize;\n-    private final int exporterTimeoutMillis;\n-    private final boolean sampled;\n+  @AutoValue\n+  public abstract static class Config {\n \n-    private Config(\n-        boolean sampled,\n-        long scheduleDelayMillis,\n-        int maxQueueSize,\n-        int maxExportBatchSize,\n-        int exporterTimeoutMillis) {\n-      this.sampled = sampled;\n-      this.scheduleDelayMillis = scheduleDelayMillis;\n-      this.maxQueueSize = maxQueueSize;\n-      this.maxExportBatchSize = maxExportBatchSize;\n-      this.exporterTimeoutMillis = exporterTimeoutMillis;\n-    }\n+    private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+    private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+    private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+    private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+    private static final boolean DEFAULT_EXPORT_ONLY_SAMPLED = true;\n \n-    public long getScheduleDelayMillis() {\n-      return scheduleDelayMillis;\n-    }\n+    public abstract boolean isExportOnlySampled();\n \n-    public int getMaxQueueSize() {\n-      return maxQueueSize;\n-    }\n+    public abstract long getScheduleDelayMillis();\n \n-    public int getMaxExportBatchSize() {\n-      return maxExportBatchSize;\n-    }\n+    public abstract int getMaxQueueSize();\n \n-    public int getExporterTimeoutMillis() {\n-      return exporterTimeoutMillis;\n-    }\n+    public abstract int getMaxExportBatchSize();\n \n-    public boolean isReportOnlySampled() {\n-      return sampled;\n-    }\n+    public abstract int getExporterTimeoutMillis();\n \n+    /**\n+     * Creates a {@link Config} object using the default configuration.\n+     *\n+     * @return The {@link Config} object.\n+     * @since 0.4.0\n+     */\n     public static Config getDefault() {\n-      return new Builder().build();\n+      return newBuilder().build();\n     }\n \n-    public static Builder newBuilder() {\n-      return new Builder();\n+    /**\n+     * Creates a {@link Config} object reading the configuration values from the environment and\n+     * from system properties. System properties override values defined in the environment. If a\n+     * configuration value is missing, it uses the default value.\n+     *\n+     * @return The {@link Config} object.\n+     * @since 0.4.0\n+     */\n+    public static Config loadFromDefaultSources() {\n+      return newBuilder().readEnvironment().readSystemProperties().build();\n     }\n \n-    public static class Builder extends ConfigBuilder {\n+    /**\n+     * Returns a new {@link Builder} with default options.\n+     *\n+     * @return a new {@code Builder} with default options.\n+     * @since 0.4.0\n+     */\n+    public static Builder newBuilder() {\n+      return new AutoValue_BatchSpansProcessor_Config.Builder()\n+          .setScheduleDelayMillis(DEFAULT_SCHEDULE_DELAY_MILLIS)\n+          .setMaxQueueSize(DEFAULT_MAX_QUEUE_SIZE)\n+          .setMaxExportBatchSize(DEFAULT_MAX_EXPORT_BATCH_SIZE)\n+          .setExporterTimeoutMillis(DEFAULT_EXPORT_TIMEOUT_MILLIS)\n+          .setExportOnlySampled(DEFAULT_EXPORT_ONLY_SAMPLED);\n+    }\n \n-      private static final String KEY_SCHEDULE_DELAY_MILLIS = \"OTEL_BSP_SCHEDULE_DELAY\";\n-      private static final String KEY_MAX_QUEUE_SIZE = \"OTEL_BSP_MAX_QUEUE\";\n-      private static final String KEY_MAX_EXPORT_BATCH_SIZE = \"OTEL_BSP_MAX_EXPORT_BATCH\";\n-      private static final String KEY_EXPORT_TIMEOUT_MILLIS = \"OTEL_BSP_EXPORT_TIMEOUT\";\n-      private static final String KEY_SAMPLED = \"OTEL_BSP_REPORT_SAMPLED\";\n+    @AutoValue.Builder\n+    public abstract static class Builder {\n+\n+      private static final String KEY_SCHEDULE_DELAY_MILLIS = \"otel.bsp.schedule.delay\";\n+      private static final String KEY_MAX_QUEUE_SIZE = \"otel.bsp.max.queue\";\n+      private static final String KEY_MAX_EXPORT_BATCH_SIZE = \"otel.bsp.max.export.batch\";\n+      private static final String KEY_EXPORT_TIMEOUT_MILLIS = \"otel.bsp.export.timeout\";\n+      private static final String KEY_SAMPLED = \"otel.bsp.export.sampled\";\n+\n+      @VisibleForTesting\n+      protected enum NamingConvention {\n+        DOT {\n+          @Override\n+          public String normalize(@Nonnull String key) {\n+            return key.toLowerCase();\n+          }\n+        },\n+        ENV_VAR {\n+          @Override\n+          public String normalize(@Nonnull String key) {\n+            return key.toLowerCase().replace(\"_\", \".\");\n+          }\n+        };\n \n-      private static final long SCHEDULE_DELAY_MILLIS = 5000;\n-      private static final int MAX_QUEUE_SIZE = 2048;\n-      private static final int MAX_EXPORT_BATCH_SIZE = 512;\n-      private static final int EXPORT_TIMEOUT_MILLIS = 30_000;\n-      private static final boolean REPORT_ONLY_SAMPLED = true;\n+        public abstract String normalize(@Nonnull String key);\n \n-      private long scheduleDelayMillis = SCHEDULE_DELAY_MILLIS;\n-      private int maxQueueSize = MAX_QUEUE_SIZE;\n-      private int maxExportBatchSize = MAX_EXPORT_BATCH_SIZE;\n-      private int exporterTimeoutMillis = EXPORT_TIMEOUT_MILLIS;\n-      private boolean sampled = REPORT_ONLY_SAMPLED;\n+        public Map<String, String> normalize(@Nonnull Map<String, String> map) {\n+          Map<String, String> properties = new HashMap<>();\n+          for (Map.Entry<String, String> entry : map.entrySet()) {\n+            properties.put(normalize(entry.getKey()), entry.getValue());\n+          }\n+          return Collections.unmodifiableMap(properties);\n+        }\n+      }\n \n       /**\n-       * Sets the configuration values from the given configuration map.\n+       * Sets the configuration values from the given configuration map for only the available keys.\n+       * This method looks for the following keys:\n+       *\n+       * <ul>\n+       *   <li>{@code otel.bsp.schedule.delay}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code otel.bsp.max.queue}: to set the maximum queue size.\n+       *   <li>{@code otel.bsp.max.export.batch}: to set the maximum batch size.\n+       *   <li>{@code otel.bsp.export.timeout}: to set the maximum allowed time to export data.\n+       *   <li>{@code otel.bsp.export.sampled}: to set whether only sampled spans should be\n+       *       exported.\n+       * </ul>\n        *\n        * @param configMap {@link Map} holding the configuration values.\n        * @return this.\n        */\n-      @Override\n-      public Builder fromConfigMap(Map<String, String> configMap) {\n-        this.setScheduleDelayMillis(\n-            getProperty(KEY_SCHEDULE_DELAY_MILLIS, configMap, SCHEDULE_DELAY_MILLIS));\n-        this.setMaxQueueSize(getProperty(KEY_MAX_QUEUE_SIZE, configMap, MAX_QUEUE_SIZE));\n-        this.setMaxExportBatchSize(\n-            getProperty(KEY_MAX_EXPORT_BATCH_SIZE, configMap, MAX_EXPORT_BATCH_SIZE));\n-        this.setExporterTimeoutMillis(\n-            getProperty(KEY_EXPORT_TIMEOUT_MILLIS, configMap, EXPORT_TIMEOUT_MILLIS));\n-        this.reportOnlySampled(getProperty(KEY_SAMPLED, configMap, REPORT_ONLY_SAMPLED));\n+      @VisibleForTesting\n+      Builder fromConfigMap(Map<String, String> configMap, NamingConvention namingConvention) {\n+        configMap = namingConvention.normalize(configMap);\n+        Long longValue = getLongProperty(KEY_SCHEDULE_DELAY_MILLIS, configMap);\n+        if (longValue != null) {\n+          this.setScheduleDelayMillis(longValue);\n+        }\n+        Integer intValue = getIntProperty(KEY_MAX_QUEUE_SIZE, configMap);\n+        if (intValue != null) {\n+          this.setMaxQueueSize(intValue);\n+        }\n+        intValue = getIntProperty(KEY_MAX_EXPORT_BATCH_SIZE, configMap);\n+        if (intValue != null) {\n+          this.setMaxExportBatchSize(intValue);\n+        }\n+        intValue = getIntProperty(KEY_EXPORT_TIMEOUT_MILLIS, configMap);\n+        if (intValue != null) {\n+          this.setExporterTimeoutMillis(intValue);\n+        }\n+        Boolean boolValue = getBooleanProperty(KEY_SAMPLED, configMap);\n+        if (boolValue != null) {\n+          this.setExportOnlySampled(boolValue);\n+        }\n         return this;\n       }\n \n       /**\n-       * Sets the configuration values from environment variables.\n+       * Sets the configuration values from the given properties object for only the available keys.\n+       * This method looks for the following keys:\n        *\n+       * <ul>\n+       *   <li>{@code otel.bsp.schedule.delay}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code otel.bsp.max.queue}: to set the maximum queue size.\n+       *   <li>{@code otel.bsp.max.export.batch}: to set the maximum batch size.\n+       *   <li>{@code otel.bsp.export.timeout}: to set the maximum allowed time to export data.\n+       *   <li>{@code otel.bsp.export.sampled}: to set whether only sampled spans should be\n+       *       exported.\n+       * </ul>\n+       *\n+       * @param properties {@link Properties} holding the configuration values.\n        * @return this.\n        */\n-      @Override\n-      public Builder fromEnv() {\n-        return fromConfigMap(System.getenv());\n+      public Builder readProperties(Properties properties) {\n+        return fromConfigMap(Maps.fromProperties(properties), NamingConvention.DOT);\n       }\n \n       /**\n-       * Set whether only sampled spans should be reported.\n+       * Sets the configuration values from environment variables for only the available keys. This\n+       * method looks for the following keys:\n+       *\n+       * <ul>\n+       *   <li>{@code OTEL_BSP_SCHEDULE_DELAY}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code OTEL_BSP_MAX_QUEUE}: to set the maximum queue size.\n+       *   <li>{@code OTEL_BSP_MAX_EXPORT_BATCH}: to set the maximum batch size.\n+       *   <li>{@code OTEL_BSP_EXPORT_TIMEOUT}: to set the maximum allowed time to export data.\n+       *   <li>{@code OTEL_BSP_EXPORT_SAMPLED}: to set whether only sampled spans should be\n+       *       exported.\n+       * </ul>\n        *\n-       * @param sampled report only sampled spans.\n        * @return this.\n        */\n-      public Builder reportOnlySampled(boolean sampled) {\n-        this.sampled = sampled;\n-        return this;\n+      public Builder readEnvironment() {\n+        return fromConfigMap(System.getenv(), NamingConvention.ENV_VAR);\n+      }\n+\n+      /**\n+       * Sets the configuration values from system properties for only the available keys. This\n+       * method looks for the following keys:\n+       *\n+       * <ul>\n+       *   <li>{@code otel.bsp.schedule.delay}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code otel.bsp.max.queue}: to set the maximum queue size.\n+       *   <li>{@code otel.bsp.max.export.batch}: to set the maximum batch size.\n+       *   <li>{@code otel.bsp.export.timeout}: to set the maximum allowed time to export data.\n+       *   <li>{@code otel.bsp.export.sampled}: to set whether only sampled spans should be\n+       *       reported.\n+       * </ul>\n+       *\n+       * @return this.\n+       */\n+      public Builder readSystemProperties() {\n+        return readProperties(System.getProperties());\n       }\n \n+      /**\n+       * Set whether only sampled spans should be exported.\n+       *\n+       * <p>Default value is {@code true}.\n+       *\n+       * @see BatchSpansProcessor.Config#DEFAULT_EXPORT_ONLY_SAMPLED\n+       * @param sampled report only sampled spans.\n+       * @return this.\n+       */\n+      public abstract Builder setExportOnlySampled(boolean sampled);\n+\n       /**\n        * Sets the delay interval between two consecutive exports. The actual interval may be shorter\n        * if the batch size is getting larger than {@code maxQueuedSpans / 2}.\n        *\n        * <p>Default value is {@code 5000}ms.\n        *\n+       * @see BatchSpansProcessor.Config#DEFAULT_SCHEDULE_DELAY_MILLIS\n        * @param scheduleDelayMillis the delay interval between two consecutive exports.\n        * @return this.\n        */\n-      public Builder setScheduleDelayMillis(long scheduleDelayMillis) {\n-        Utils.checkArgument(\n-            scheduleDelayMillis >= 0, \"scheduleDelayMillis must greater than or equal 0.\");\n-        this.scheduleDelayMillis = scheduleDelayMillis;\n-        return this;\n-      }\n+      public abstract Builder setScheduleDelayMillis(long scheduleDelayMillis);\n \n       /**\n        * Sets the maximum time an exporter will be allowed to run before being cancelled.\n        *\n        * <p>Default value is {@code 30000}ms\n        *\n+       * @see BatchSpansProcessor.Config#DEFAULT_EXPORT_TIMEOUT_MILLIS\n        * @param exporterTimeoutMillis the timeout for exports in milliseconds.\n        * @return this\n        */\n-      public Builder setExporterTimeoutMillis(int exporterTimeoutMillis) {\n-        Utils.checkArgument(\n-            exporterTimeoutMillis >= 0, \"exporterTimeoutMillis must greater than or equal 0.\");\n-        this.exporterTimeoutMillis = exporterTimeoutMillis;\n-        return this;\n-      }\n+      public abstract Builder setExporterTimeoutMillis(int exporterTimeoutMillis);\n \n       /**\n        * Sets the maximum number of Spans that are kept in the queue before start dropping.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE4MDU5MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r404180590", "bodyText": "It is hard to understand these names, I would propose to prefix all of them with \"DEFAULT_\"", "author": "bogdandrutu", "createdAt": "2020-04-06T15:26:22Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -411,4 +321,184 @@ public void run() {\n       }\n     }\n   }\n+\n+  @Immutable\n+  public static final class Config {\n+    private final long scheduleDelayMillis;\n+    private final int maxQueueSize;\n+    private final int maxExportBatchSize;\n+    private final int exporterTimeoutMillis;\n+    private final boolean sampled;\n+\n+    private Config(\n+        boolean sampled,\n+        long scheduleDelayMillis,\n+        int maxQueueSize,\n+        int maxExportBatchSize,\n+        int exporterTimeoutMillis) {\n+      this.sampled = sampled;\n+      this.scheduleDelayMillis = scheduleDelayMillis;\n+      this.maxQueueSize = maxQueueSize;\n+      this.maxExportBatchSize = maxExportBatchSize;\n+      this.exporterTimeoutMillis = exporterTimeoutMillis;\n+    }\n+\n+    public long getScheduleDelayMillis() {\n+      return scheduleDelayMillis;\n+    }\n+\n+    public int getMaxQueueSize() {\n+      return maxQueueSize;\n+    }\n+\n+    public int getMaxExportBatchSize() {\n+      return maxExportBatchSize;\n+    }\n+\n+    public int getExporterTimeoutMillis() {\n+      return exporterTimeoutMillis;\n+    }\n+\n+    public boolean isReportOnlySampled() {\n+      return sampled;\n+    }\n+\n+    public static Config getDefault() {\n+      return new Builder().build();\n+    }\n+\n+    public static Builder newBuilder() {\n+      return new Builder();\n+    }\n+\n+    public static class Builder extends ConfigBuilder {\n+\n+      private static final String KEY_SCHEDULE_DELAY_MILLIS = \"OTEL_BSP_SCHEDULE_DELAY\";\n+      private static final String KEY_MAX_QUEUE_SIZE = \"OTEL_BSP_MAX_QUEUE\";\n+      private static final String KEY_MAX_EXPORT_BATCH_SIZE = \"OTEL_BSP_MAX_EXPORT_BATCH\";\n+      private static final String KEY_EXPORT_TIMEOUT_MILLIS = \"OTEL_BSP_EXPORT_TIMEOUT\";\n+      private static final String KEY_SAMPLED = \"OTEL_BSP_REPORT_SAMPLED\";\n+\n+      private static final long SCHEDULE_DELAY_MILLIS = 5000;\n+      private static final int MAX_QUEUE_SIZE = 2048;\n+      private static final int MAX_EXPORT_BATCH_SIZE = 512;\n+      private static final int EXPORT_TIMEOUT_MILLIS = 30_000;\n+      private static final boolean REPORT_ONLY_SAMPLED = true;", "originalCommit": "877de57c2e89d72cf7a6c35f17abc1a80d220969", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEwMzU4OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r405103589", "bodyText": "I'd also like to have them documented outside of these private fields. Maybe put them in a package-info file?", "author": "jkwatson", "createdAt": "2020-04-07T20:49:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE4MDU5MA=="}], "type": "inlineReview", "revised_code": {"commit": "fc02ade502a55a23264b30456fe4d08b557b69ea", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\nindex 356f14ce8..506367894 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n\n@@ -323,144 +329,234 @@ public final class BatchSpansProcessor implements SpanProcessor {\n   }\n \n   @Immutable\n-  public static final class Config {\n-    private final long scheduleDelayMillis;\n-    private final int maxQueueSize;\n-    private final int maxExportBatchSize;\n-    private final int exporterTimeoutMillis;\n-    private final boolean sampled;\n+  @AutoValue\n+  public abstract static class Config {\n \n-    private Config(\n-        boolean sampled,\n-        long scheduleDelayMillis,\n-        int maxQueueSize,\n-        int maxExportBatchSize,\n-        int exporterTimeoutMillis) {\n-      this.sampled = sampled;\n-      this.scheduleDelayMillis = scheduleDelayMillis;\n-      this.maxQueueSize = maxQueueSize;\n-      this.maxExportBatchSize = maxExportBatchSize;\n-      this.exporterTimeoutMillis = exporterTimeoutMillis;\n-    }\n+    private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+    private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+    private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+    private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+    private static final boolean DEFAULT_EXPORT_ONLY_SAMPLED = true;\n \n-    public long getScheduleDelayMillis() {\n-      return scheduleDelayMillis;\n-    }\n+    public abstract boolean isExportOnlySampled();\n \n-    public int getMaxQueueSize() {\n-      return maxQueueSize;\n-    }\n+    public abstract long getScheduleDelayMillis();\n \n-    public int getMaxExportBatchSize() {\n-      return maxExportBatchSize;\n-    }\n+    public abstract int getMaxQueueSize();\n \n-    public int getExporterTimeoutMillis() {\n-      return exporterTimeoutMillis;\n-    }\n+    public abstract int getMaxExportBatchSize();\n \n-    public boolean isReportOnlySampled() {\n-      return sampled;\n-    }\n+    public abstract int getExporterTimeoutMillis();\n \n+    /**\n+     * Creates a {@link Config} object using the default configuration.\n+     *\n+     * @return The {@link Config} object.\n+     * @since 0.4.0\n+     */\n     public static Config getDefault() {\n-      return new Builder().build();\n+      return newBuilder().build();\n     }\n \n-    public static Builder newBuilder() {\n-      return new Builder();\n+    /**\n+     * Creates a {@link Config} object reading the configuration values from the environment and\n+     * from system properties. System properties override values defined in the environment. If a\n+     * configuration value is missing, it uses the default value.\n+     *\n+     * @return The {@link Config} object.\n+     * @since 0.4.0\n+     */\n+    public static Config loadFromDefaultSources() {\n+      return newBuilder().readEnvironment().readSystemProperties().build();\n     }\n \n-    public static class Builder extends ConfigBuilder {\n+    /**\n+     * Returns a new {@link Builder} with default options.\n+     *\n+     * @return a new {@code Builder} with default options.\n+     * @since 0.4.0\n+     */\n+    public static Builder newBuilder() {\n+      return new AutoValue_BatchSpansProcessor_Config.Builder()\n+          .setScheduleDelayMillis(DEFAULT_SCHEDULE_DELAY_MILLIS)\n+          .setMaxQueueSize(DEFAULT_MAX_QUEUE_SIZE)\n+          .setMaxExportBatchSize(DEFAULT_MAX_EXPORT_BATCH_SIZE)\n+          .setExporterTimeoutMillis(DEFAULT_EXPORT_TIMEOUT_MILLIS)\n+          .setExportOnlySampled(DEFAULT_EXPORT_ONLY_SAMPLED);\n+    }\n \n-      private static final String KEY_SCHEDULE_DELAY_MILLIS = \"OTEL_BSP_SCHEDULE_DELAY\";\n-      private static final String KEY_MAX_QUEUE_SIZE = \"OTEL_BSP_MAX_QUEUE\";\n-      private static final String KEY_MAX_EXPORT_BATCH_SIZE = \"OTEL_BSP_MAX_EXPORT_BATCH\";\n-      private static final String KEY_EXPORT_TIMEOUT_MILLIS = \"OTEL_BSP_EXPORT_TIMEOUT\";\n-      private static final String KEY_SAMPLED = \"OTEL_BSP_REPORT_SAMPLED\";\n+    @AutoValue.Builder\n+    public abstract static class Builder {\n+\n+      private static final String KEY_SCHEDULE_DELAY_MILLIS = \"otel.bsp.schedule.delay\";\n+      private static final String KEY_MAX_QUEUE_SIZE = \"otel.bsp.max.queue\";\n+      private static final String KEY_MAX_EXPORT_BATCH_SIZE = \"otel.bsp.max.export.batch\";\n+      private static final String KEY_EXPORT_TIMEOUT_MILLIS = \"otel.bsp.export.timeout\";\n+      private static final String KEY_SAMPLED = \"otel.bsp.export.sampled\";\n+\n+      @VisibleForTesting\n+      protected enum NamingConvention {\n+        DOT {\n+          @Override\n+          public String normalize(@Nonnull String key) {\n+            return key.toLowerCase();\n+          }\n+        },\n+        ENV_VAR {\n+          @Override\n+          public String normalize(@Nonnull String key) {\n+            return key.toLowerCase().replace(\"_\", \".\");\n+          }\n+        };\n \n-      private static final long SCHEDULE_DELAY_MILLIS = 5000;\n-      private static final int MAX_QUEUE_SIZE = 2048;\n-      private static final int MAX_EXPORT_BATCH_SIZE = 512;\n-      private static final int EXPORT_TIMEOUT_MILLIS = 30_000;\n-      private static final boolean REPORT_ONLY_SAMPLED = true;\n+        public abstract String normalize(@Nonnull String key);\n \n-      private long scheduleDelayMillis = SCHEDULE_DELAY_MILLIS;\n-      private int maxQueueSize = MAX_QUEUE_SIZE;\n-      private int maxExportBatchSize = MAX_EXPORT_BATCH_SIZE;\n-      private int exporterTimeoutMillis = EXPORT_TIMEOUT_MILLIS;\n-      private boolean sampled = REPORT_ONLY_SAMPLED;\n+        public Map<String, String> normalize(@Nonnull Map<String, String> map) {\n+          Map<String, String> properties = new HashMap<>();\n+          for (Map.Entry<String, String> entry : map.entrySet()) {\n+            properties.put(normalize(entry.getKey()), entry.getValue());\n+          }\n+          return Collections.unmodifiableMap(properties);\n+        }\n+      }\n \n       /**\n-       * Sets the configuration values from the given configuration map.\n+       * Sets the configuration values from the given configuration map for only the available keys.\n+       * This method looks for the following keys:\n+       *\n+       * <ul>\n+       *   <li>{@code otel.bsp.schedule.delay}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code otel.bsp.max.queue}: to set the maximum queue size.\n+       *   <li>{@code otel.bsp.max.export.batch}: to set the maximum batch size.\n+       *   <li>{@code otel.bsp.export.timeout}: to set the maximum allowed time to export data.\n+       *   <li>{@code otel.bsp.export.sampled}: to set whether only sampled spans should be\n+       *       exported.\n+       * </ul>\n        *\n        * @param configMap {@link Map} holding the configuration values.\n        * @return this.\n        */\n-      @Override\n-      public Builder fromConfigMap(Map<String, String> configMap) {\n-        this.setScheduleDelayMillis(\n-            getProperty(KEY_SCHEDULE_DELAY_MILLIS, configMap, SCHEDULE_DELAY_MILLIS));\n-        this.setMaxQueueSize(getProperty(KEY_MAX_QUEUE_SIZE, configMap, MAX_QUEUE_SIZE));\n-        this.setMaxExportBatchSize(\n-            getProperty(KEY_MAX_EXPORT_BATCH_SIZE, configMap, MAX_EXPORT_BATCH_SIZE));\n-        this.setExporterTimeoutMillis(\n-            getProperty(KEY_EXPORT_TIMEOUT_MILLIS, configMap, EXPORT_TIMEOUT_MILLIS));\n-        this.reportOnlySampled(getProperty(KEY_SAMPLED, configMap, REPORT_ONLY_SAMPLED));\n+      @VisibleForTesting\n+      Builder fromConfigMap(Map<String, String> configMap, NamingConvention namingConvention) {\n+        configMap = namingConvention.normalize(configMap);\n+        Long longValue = getLongProperty(KEY_SCHEDULE_DELAY_MILLIS, configMap);\n+        if (longValue != null) {\n+          this.setScheduleDelayMillis(longValue);\n+        }\n+        Integer intValue = getIntProperty(KEY_MAX_QUEUE_SIZE, configMap);\n+        if (intValue != null) {\n+          this.setMaxQueueSize(intValue);\n+        }\n+        intValue = getIntProperty(KEY_MAX_EXPORT_BATCH_SIZE, configMap);\n+        if (intValue != null) {\n+          this.setMaxExportBatchSize(intValue);\n+        }\n+        intValue = getIntProperty(KEY_EXPORT_TIMEOUT_MILLIS, configMap);\n+        if (intValue != null) {\n+          this.setExporterTimeoutMillis(intValue);\n+        }\n+        Boolean boolValue = getBooleanProperty(KEY_SAMPLED, configMap);\n+        if (boolValue != null) {\n+          this.setExportOnlySampled(boolValue);\n+        }\n         return this;\n       }\n \n       /**\n-       * Sets the configuration values from environment variables.\n+       * Sets the configuration values from the given properties object for only the available keys.\n+       * This method looks for the following keys:\n        *\n+       * <ul>\n+       *   <li>{@code otel.bsp.schedule.delay}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code otel.bsp.max.queue}: to set the maximum queue size.\n+       *   <li>{@code otel.bsp.max.export.batch}: to set the maximum batch size.\n+       *   <li>{@code otel.bsp.export.timeout}: to set the maximum allowed time to export data.\n+       *   <li>{@code otel.bsp.export.sampled}: to set whether only sampled spans should be\n+       *       exported.\n+       * </ul>\n+       *\n+       * @param properties {@link Properties} holding the configuration values.\n        * @return this.\n        */\n-      @Override\n-      public Builder fromEnv() {\n-        return fromConfigMap(System.getenv());\n+      public Builder readProperties(Properties properties) {\n+        return fromConfigMap(Maps.fromProperties(properties), NamingConvention.DOT);\n       }\n \n       /**\n-       * Set whether only sampled spans should be reported.\n+       * Sets the configuration values from environment variables for only the available keys. This\n+       * method looks for the following keys:\n+       *\n+       * <ul>\n+       *   <li>{@code OTEL_BSP_SCHEDULE_DELAY}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code OTEL_BSP_MAX_QUEUE}: to set the maximum queue size.\n+       *   <li>{@code OTEL_BSP_MAX_EXPORT_BATCH}: to set the maximum batch size.\n+       *   <li>{@code OTEL_BSP_EXPORT_TIMEOUT}: to set the maximum allowed time to export data.\n+       *   <li>{@code OTEL_BSP_EXPORT_SAMPLED}: to set whether only sampled spans should be\n+       *       exported.\n+       * </ul>\n        *\n-       * @param sampled report only sampled spans.\n        * @return this.\n        */\n-      public Builder reportOnlySampled(boolean sampled) {\n-        this.sampled = sampled;\n-        return this;\n+      public Builder readEnvironment() {\n+        return fromConfigMap(System.getenv(), NamingConvention.ENV_VAR);\n+      }\n+\n+      /**\n+       * Sets the configuration values from system properties for only the available keys. This\n+       * method looks for the following keys:\n+       *\n+       * <ul>\n+       *   <li>{@code otel.bsp.schedule.delay}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code otel.bsp.max.queue}: to set the maximum queue size.\n+       *   <li>{@code otel.bsp.max.export.batch}: to set the maximum batch size.\n+       *   <li>{@code otel.bsp.export.timeout}: to set the maximum allowed time to export data.\n+       *   <li>{@code otel.bsp.export.sampled}: to set whether only sampled spans should be\n+       *       reported.\n+       * </ul>\n+       *\n+       * @return this.\n+       */\n+      public Builder readSystemProperties() {\n+        return readProperties(System.getProperties());\n       }\n \n+      /**\n+       * Set whether only sampled spans should be exported.\n+       *\n+       * <p>Default value is {@code true}.\n+       *\n+       * @see BatchSpansProcessor.Config#DEFAULT_EXPORT_ONLY_SAMPLED\n+       * @param sampled report only sampled spans.\n+       * @return this.\n+       */\n+      public abstract Builder setExportOnlySampled(boolean sampled);\n+\n       /**\n        * Sets the delay interval between two consecutive exports. The actual interval may be shorter\n        * if the batch size is getting larger than {@code maxQueuedSpans / 2}.\n        *\n        * <p>Default value is {@code 5000}ms.\n        *\n+       * @see BatchSpansProcessor.Config#DEFAULT_SCHEDULE_DELAY_MILLIS\n        * @param scheduleDelayMillis the delay interval between two consecutive exports.\n        * @return this.\n        */\n-      public Builder setScheduleDelayMillis(long scheduleDelayMillis) {\n-        Utils.checkArgument(\n-            scheduleDelayMillis >= 0, \"scheduleDelayMillis must greater than or equal 0.\");\n-        this.scheduleDelayMillis = scheduleDelayMillis;\n-        return this;\n-      }\n+      public abstract Builder setScheduleDelayMillis(long scheduleDelayMillis);\n \n       /**\n        * Sets the maximum time an exporter will be allowed to run before being cancelled.\n        *\n        * <p>Default value is {@code 30000}ms\n        *\n+       * @see BatchSpansProcessor.Config#DEFAULT_EXPORT_TIMEOUT_MILLIS\n        * @param exporterTimeoutMillis the timeout for exports in milliseconds.\n        * @return this\n        */\n-      public Builder setExporterTimeoutMillis(int exporterTimeoutMillis) {\n-        Utils.checkArgument(\n-            exporterTimeoutMillis >= 0, \"exporterTimeoutMillis must greater than or equal 0.\");\n-        this.exporterTimeoutMillis = exporterTimeoutMillis;\n-        return this;\n-      }\n+      public abstract Builder setExporterTimeoutMillis(int exporterTimeoutMillis);\n \n       /**\n        * Sets the maximum number of Spans that are kept in the queue before start dropping.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE4MTA4OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r404181089", "bodyText": "final?", "author": "bogdandrutu", "createdAt": "2020-04-06T15:27:03Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -411,4 +321,184 @@ public void run() {\n       }\n     }\n   }\n+\n+  @Immutable\n+  public static final class Config {\n+    private final long scheduleDelayMillis;\n+    private final int maxQueueSize;\n+    private final int maxExportBatchSize;\n+    private final int exporterTimeoutMillis;\n+    private final boolean sampled;\n+\n+    private Config(\n+        boolean sampled,\n+        long scheduleDelayMillis,\n+        int maxQueueSize,\n+        int maxExportBatchSize,\n+        int exporterTimeoutMillis) {\n+      this.sampled = sampled;\n+      this.scheduleDelayMillis = scheduleDelayMillis;\n+      this.maxQueueSize = maxQueueSize;\n+      this.maxExportBatchSize = maxExportBatchSize;\n+      this.exporterTimeoutMillis = exporterTimeoutMillis;\n+    }\n+\n+    public long getScheduleDelayMillis() {\n+      return scheduleDelayMillis;\n+    }\n+\n+    public int getMaxQueueSize() {\n+      return maxQueueSize;\n+    }\n+\n+    public int getMaxExportBatchSize() {\n+      return maxExportBatchSize;\n+    }\n+\n+    public int getExporterTimeoutMillis() {\n+      return exporterTimeoutMillis;\n+    }\n+\n+    public boolean isReportOnlySampled() {\n+      return sampled;\n+    }\n+\n+    public static Config getDefault() {\n+      return new Builder().build();\n+    }\n+\n+    public static Builder newBuilder() {\n+      return new Builder();\n+    }\n+\n+    public static class Builder extends ConfigBuilder {", "originalCommit": "877de57c2e89d72cf7a6c35f17abc1a80d220969", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc02ade502a55a23264b30456fe4d08b557b69ea", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\nindex 356f14ce8..506367894 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n\n@@ -323,144 +329,234 @@ public final class BatchSpansProcessor implements SpanProcessor {\n   }\n \n   @Immutable\n-  public static final class Config {\n-    private final long scheduleDelayMillis;\n-    private final int maxQueueSize;\n-    private final int maxExportBatchSize;\n-    private final int exporterTimeoutMillis;\n-    private final boolean sampled;\n+  @AutoValue\n+  public abstract static class Config {\n \n-    private Config(\n-        boolean sampled,\n-        long scheduleDelayMillis,\n-        int maxQueueSize,\n-        int maxExportBatchSize,\n-        int exporterTimeoutMillis) {\n-      this.sampled = sampled;\n-      this.scheduleDelayMillis = scheduleDelayMillis;\n-      this.maxQueueSize = maxQueueSize;\n-      this.maxExportBatchSize = maxExportBatchSize;\n-      this.exporterTimeoutMillis = exporterTimeoutMillis;\n-    }\n+    private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+    private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+    private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+    private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+    private static final boolean DEFAULT_EXPORT_ONLY_SAMPLED = true;\n \n-    public long getScheduleDelayMillis() {\n-      return scheduleDelayMillis;\n-    }\n+    public abstract boolean isExportOnlySampled();\n \n-    public int getMaxQueueSize() {\n-      return maxQueueSize;\n-    }\n+    public abstract long getScheduleDelayMillis();\n \n-    public int getMaxExportBatchSize() {\n-      return maxExportBatchSize;\n-    }\n+    public abstract int getMaxQueueSize();\n \n-    public int getExporterTimeoutMillis() {\n-      return exporterTimeoutMillis;\n-    }\n+    public abstract int getMaxExportBatchSize();\n \n-    public boolean isReportOnlySampled() {\n-      return sampled;\n-    }\n+    public abstract int getExporterTimeoutMillis();\n \n+    /**\n+     * Creates a {@link Config} object using the default configuration.\n+     *\n+     * @return The {@link Config} object.\n+     * @since 0.4.0\n+     */\n     public static Config getDefault() {\n-      return new Builder().build();\n+      return newBuilder().build();\n     }\n \n-    public static Builder newBuilder() {\n-      return new Builder();\n+    /**\n+     * Creates a {@link Config} object reading the configuration values from the environment and\n+     * from system properties. System properties override values defined in the environment. If a\n+     * configuration value is missing, it uses the default value.\n+     *\n+     * @return The {@link Config} object.\n+     * @since 0.4.0\n+     */\n+    public static Config loadFromDefaultSources() {\n+      return newBuilder().readEnvironment().readSystemProperties().build();\n     }\n \n-    public static class Builder extends ConfigBuilder {\n+    /**\n+     * Returns a new {@link Builder} with default options.\n+     *\n+     * @return a new {@code Builder} with default options.\n+     * @since 0.4.0\n+     */\n+    public static Builder newBuilder() {\n+      return new AutoValue_BatchSpansProcessor_Config.Builder()\n+          .setScheduleDelayMillis(DEFAULT_SCHEDULE_DELAY_MILLIS)\n+          .setMaxQueueSize(DEFAULT_MAX_QUEUE_SIZE)\n+          .setMaxExportBatchSize(DEFAULT_MAX_EXPORT_BATCH_SIZE)\n+          .setExporterTimeoutMillis(DEFAULT_EXPORT_TIMEOUT_MILLIS)\n+          .setExportOnlySampled(DEFAULT_EXPORT_ONLY_SAMPLED);\n+    }\n \n-      private static final String KEY_SCHEDULE_DELAY_MILLIS = \"OTEL_BSP_SCHEDULE_DELAY\";\n-      private static final String KEY_MAX_QUEUE_SIZE = \"OTEL_BSP_MAX_QUEUE\";\n-      private static final String KEY_MAX_EXPORT_BATCH_SIZE = \"OTEL_BSP_MAX_EXPORT_BATCH\";\n-      private static final String KEY_EXPORT_TIMEOUT_MILLIS = \"OTEL_BSP_EXPORT_TIMEOUT\";\n-      private static final String KEY_SAMPLED = \"OTEL_BSP_REPORT_SAMPLED\";\n+    @AutoValue.Builder\n+    public abstract static class Builder {\n+\n+      private static final String KEY_SCHEDULE_DELAY_MILLIS = \"otel.bsp.schedule.delay\";\n+      private static final String KEY_MAX_QUEUE_SIZE = \"otel.bsp.max.queue\";\n+      private static final String KEY_MAX_EXPORT_BATCH_SIZE = \"otel.bsp.max.export.batch\";\n+      private static final String KEY_EXPORT_TIMEOUT_MILLIS = \"otel.bsp.export.timeout\";\n+      private static final String KEY_SAMPLED = \"otel.bsp.export.sampled\";\n+\n+      @VisibleForTesting\n+      protected enum NamingConvention {\n+        DOT {\n+          @Override\n+          public String normalize(@Nonnull String key) {\n+            return key.toLowerCase();\n+          }\n+        },\n+        ENV_VAR {\n+          @Override\n+          public String normalize(@Nonnull String key) {\n+            return key.toLowerCase().replace(\"_\", \".\");\n+          }\n+        };\n \n-      private static final long SCHEDULE_DELAY_MILLIS = 5000;\n-      private static final int MAX_QUEUE_SIZE = 2048;\n-      private static final int MAX_EXPORT_BATCH_SIZE = 512;\n-      private static final int EXPORT_TIMEOUT_MILLIS = 30_000;\n-      private static final boolean REPORT_ONLY_SAMPLED = true;\n+        public abstract String normalize(@Nonnull String key);\n \n-      private long scheduleDelayMillis = SCHEDULE_DELAY_MILLIS;\n-      private int maxQueueSize = MAX_QUEUE_SIZE;\n-      private int maxExportBatchSize = MAX_EXPORT_BATCH_SIZE;\n-      private int exporterTimeoutMillis = EXPORT_TIMEOUT_MILLIS;\n-      private boolean sampled = REPORT_ONLY_SAMPLED;\n+        public Map<String, String> normalize(@Nonnull Map<String, String> map) {\n+          Map<String, String> properties = new HashMap<>();\n+          for (Map.Entry<String, String> entry : map.entrySet()) {\n+            properties.put(normalize(entry.getKey()), entry.getValue());\n+          }\n+          return Collections.unmodifiableMap(properties);\n+        }\n+      }\n \n       /**\n-       * Sets the configuration values from the given configuration map.\n+       * Sets the configuration values from the given configuration map for only the available keys.\n+       * This method looks for the following keys:\n+       *\n+       * <ul>\n+       *   <li>{@code otel.bsp.schedule.delay}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code otel.bsp.max.queue}: to set the maximum queue size.\n+       *   <li>{@code otel.bsp.max.export.batch}: to set the maximum batch size.\n+       *   <li>{@code otel.bsp.export.timeout}: to set the maximum allowed time to export data.\n+       *   <li>{@code otel.bsp.export.sampled}: to set whether only sampled spans should be\n+       *       exported.\n+       * </ul>\n        *\n        * @param configMap {@link Map} holding the configuration values.\n        * @return this.\n        */\n-      @Override\n-      public Builder fromConfigMap(Map<String, String> configMap) {\n-        this.setScheduleDelayMillis(\n-            getProperty(KEY_SCHEDULE_DELAY_MILLIS, configMap, SCHEDULE_DELAY_MILLIS));\n-        this.setMaxQueueSize(getProperty(KEY_MAX_QUEUE_SIZE, configMap, MAX_QUEUE_SIZE));\n-        this.setMaxExportBatchSize(\n-            getProperty(KEY_MAX_EXPORT_BATCH_SIZE, configMap, MAX_EXPORT_BATCH_SIZE));\n-        this.setExporterTimeoutMillis(\n-            getProperty(KEY_EXPORT_TIMEOUT_MILLIS, configMap, EXPORT_TIMEOUT_MILLIS));\n-        this.reportOnlySampled(getProperty(KEY_SAMPLED, configMap, REPORT_ONLY_SAMPLED));\n+      @VisibleForTesting\n+      Builder fromConfigMap(Map<String, String> configMap, NamingConvention namingConvention) {\n+        configMap = namingConvention.normalize(configMap);\n+        Long longValue = getLongProperty(KEY_SCHEDULE_DELAY_MILLIS, configMap);\n+        if (longValue != null) {\n+          this.setScheduleDelayMillis(longValue);\n+        }\n+        Integer intValue = getIntProperty(KEY_MAX_QUEUE_SIZE, configMap);\n+        if (intValue != null) {\n+          this.setMaxQueueSize(intValue);\n+        }\n+        intValue = getIntProperty(KEY_MAX_EXPORT_BATCH_SIZE, configMap);\n+        if (intValue != null) {\n+          this.setMaxExportBatchSize(intValue);\n+        }\n+        intValue = getIntProperty(KEY_EXPORT_TIMEOUT_MILLIS, configMap);\n+        if (intValue != null) {\n+          this.setExporterTimeoutMillis(intValue);\n+        }\n+        Boolean boolValue = getBooleanProperty(KEY_SAMPLED, configMap);\n+        if (boolValue != null) {\n+          this.setExportOnlySampled(boolValue);\n+        }\n         return this;\n       }\n \n       /**\n-       * Sets the configuration values from environment variables.\n+       * Sets the configuration values from the given properties object for only the available keys.\n+       * This method looks for the following keys:\n        *\n+       * <ul>\n+       *   <li>{@code otel.bsp.schedule.delay}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code otel.bsp.max.queue}: to set the maximum queue size.\n+       *   <li>{@code otel.bsp.max.export.batch}: to set the maximum batch size.\n+       *   <li>{@code otel.bsp.export.timeout}: to set the maximum allowed time to export data.\n+       *   <li>{@code otel.bsp.export.sampled}: to set whether only sampled spans should be\n+       *       exported.\n+       * </ul>\n+       *\n+       * @param properties {@link Properties} holding the configuration values.\n        * @return this.\n        */\n-      @Override\n-      public Builder fromEnv() {\n-        return fromConfigMap(System.getenv());\n+      public Builder readProperties(Properties properties) {\n+        return fromConfigMap(Maps.fromProperties(properties), NamingConvention.DOT);\n       }\n \n       /**\n-       * Set whether only sampled spans should be reported.\n+       * Sets the configuration values from environment variables for only the available keys. This\n+       * method looks for the following keys:\n+       *\n+       * <ul>\n+       *   <li>{@code OTEL_BSP_SCHEDULE_DELAY}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code OTEL_BSP_MAX_QUEUE}: to set the maximum queue size.\n+       *   <li>{@code OTEL_BSP_MAX_EXPORT_BATCH}: to set the maximum batch size.\n+       *   <li>{@code OTEL_BSP_EXPORT_TIMEOUT}: to set the maximum allowed time to export data.\n+       *   <li>{@code OTEL_BSP_EXPORT_SAMPLED}: to set whether only sampled spans should be\n+       *       exported.\n+       * </ul>\n        *\n-       * @param sampled report only sampled spans.\n        * @return this.\n        */\n-      public Builder reportOnlySampled(boolean sampled) {\n-        this.sampled = sampled;\n-        return this;\n+      public Builder readEnvironment() {\n+        return fromConfigMap(System.getenv(), NamingConvention.ENV_VAR);\n+      }\n+\n+      /**\n+       * Sets the configuration values from system properties for only the available keys. This\n+       * method looks for the following keys:\n+       *\n+       * <ul>\n+       *   <li>{@code otel.bsp.schedule.delay}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code otel.bsp.max.queue}: to set the maximum queue size.\n+       *   <li>{@code otel.bsp.max.export.batch}: to set the maximum batch size.\n+       *   <li>{@code otel.bsp.export.timeout}: to set the maximum allowed time to export data.\n+       *   <li>{@code otel.bsp.export.sampled}: to set whether only sampled spans should be\n+       *       reported.\n+       * </ul>\n+       *\n+       * @return this.\n+       */\n+      public Builder readSystemProperties() {\n+        return readProperties(System.getProperties());\n       }\n \n+      /**\n+       * Set whether only sampled spans should be exported.\n+       *\n+       * <p>Default value is {@code true}.\n+       *\n+       * @see BatchSpansProcessor.Config#DEFAULT_EXPORT_ONLY_SAMPLED\n+       * @param sampled report only sampled spans.\n+       * @return this.\n+       */\n+      public abstract Builder setExportOnlySampled(boolean sampled);\n+\n       /**\n        * Sets the delay interval between two consecutive exports. The actual interval may be shorter\n        * if the batch size is getting larger than {@code maxQueuedSpans / 2}.\n        *\n        * <p>Default value is {@code 5000}ms.\n        *\n+       * @see BatchSpansProcessor.Config#DEFAULT_SCHEDULE_DELAY_MILLIS\n        * @param scheduleDelayMillis the delay interval between two consecutive exports.\n        * @return this.\n        */\n-      public Builder setScheduleDelayMillis(long scheduleDelayMillis) {\n-        Utils.checkArgument(\n-            scheduleDelayMillis >= 0, \"scheduleDelayMillis must greater than or equal 0.\");\n-        this.scheduleDelayMillis = scheduleDelayMillis;\n-        return this;\n-      }\n+      public abstract Builder setScheduleDelayMillis(long scheduleDelayMillis);\n \n       /**\n        * Sets the maximum time an exporter will be allowed to run before being cancelled.\n        *\n        * <p>Default value is {@code 30000}ms\n        *\n+       * @see BatchSpansProcessor.Config#DEFAULT_EXPORT_TIMEOUT_MILLIS\n        * @param exporterTimeoutMillis the timeout for exports in milliseconds.\n        * @return this\n        */\n-      public Builder setExporterTimeoutMillis(int exporterTimeoutMillis) {\n-        Utils.checkArgument(\n-            exporterTimeoutMillis >= 0, \"exporterTimeoutMillis must greater than or equal 0.\");\n-        this.exporterTimeoutMillis = exporterTimeoutMillis;\n-        return this;\n-      }\n+      public abstract Builder setExporterTimeoutMillis(int exporterTimeoutMillis);\n \n       /**\n        * Sets the maximum number of Spans that are kept in the queue before start dropping.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE5MTA5Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r404191097", "bodyText": "I would not hardcode that we always look in System properties then env then default. I would allow the following workflow:\n\nStart from default;\nApply changes from env;\nApply changes from System properties;\n\nBatchSpanProcessor.getBuilder().overwriteFromEnv().overwriteFromSystemProperties().build()\n\nThe default should be the proposed solution but would like if the users can also change this order if needed.\nThoughts on this?", "author": "bogdandrutu", "createdAt": "2020-04-06T15:40:13Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/common/ConfigBuilder.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.common;\n+\n+import java.util.Map;\n+\n+public abstract class ConfigBuilder {\n+\n+  protected ConfigBuilder() {}\n+\n+  public abstract ConfigBuilder fromConfigMap(Map<String, String> configMap);\n+\n+  public abstract ConfigBuilder fromEnv();\n+\n+  protected boolean getProperty(String name, Map<String, String> map, boolean defaultValue) {\n+    try {\n+      return Boolean.parseBoolean(System.getProperty(name, map.get(name)));\n+    } catch (NumberFormatException ex) {\n+      return defaultValue;\n+    }\n+  }\n+\n+  protected int getProperty(String name, Map<String, String> map, int defaultValue) {\n+    try {\n+      return Integer.parseInt(System.getProperty(name, map.get(name)));\n+    } catch (NumberFormatException ex) {\n+      return defaultValue;\n+    }\n+  }\n+\n+  protected long getProperty(String name, Map<String, String> map, long defaultValue) {\n+    try {\n+      return Long.parseLong(System.getProperty(name, map.get(name)));\n+    } catch (NumberFormatException ex) {\n+      return defaultValue;\n+    }\n+  }", "originalCommit": "877de57c2e89d72cf7a6c35f17abc1a80d220969", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIwMTc3NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r404201775", "bodyText": "I'd even prefer completely separating the steps of collection and application of configuration. The builder should just have applyFromConfig and the collection happens separately.\nI.e., I propose something like:\n// Config is similar to / placeholder for Map<String, String> or Map<String, Object>\nfinal Config cfg = Config.newBuilder()\n  .readEnv()\n  .readSystemProps()\n  .readCommandLine(args)\n  .set(MY_KEY, MY_OVERRIDE_VALUE)\n  .build();\nfinal BatchSpanProcessor processor = BatchSpanProcessor.newBuilder()\n  .applyConfig(cfg)\n  .build();", "author": "Oberon00", "createdAt": "2020-04-06T15:54:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE5MTA5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIwNDA0OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r404204049", "bodyText": "If we allowed Map<String, Object> (or stored that in the hypothetical Configuration class) we could even support different representations of complex objects like resources from different sources, e.g. JSON object in JSON, URL/query encoded in envvar, ....", "author": "Oberon00", "createdAt": "2020-04-06T15:57:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE5MTA5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzMTA1NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r404231054", "bodyText": "I liked the proposed API to build the config. \"nit: applyConfig -> setConfig\" probably better name for a builder.\nAlso I expect that \"readX\" methods only apply changes to arguments defined by \"X\" correct? Does not overwrite all the arguments with default if not defined in the config.\nWe can also offer a helper Config.loadFromDefaultSources() (we can think of a better name) which essentially allows users to avoid the 5 lines you wrote to build the config.", "author": "bogdandrutu", "createdAt": "2020-04-06T16:36:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE5MTA5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "fc02ade502a55a23264b30456fe4d08b557b69ea", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/common/ConfigBuilder.java b/sdk/src/main/java/io/opentelemetry/sdk/common/ConfigBuilder.java\ndeleted file mode 100644\nindex 2a67d981a..000000000\n--- a/sdk/src/main/java/io/opentelemetry/sdk/common/ConfigBuilder.java\n+++ /dev/null\n\n@@ -1,52 +0,0 @@\n-/*\n- * Copyright 2020, OpenTelemetry Authors\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package io.opentelemetry.sdk.common;\n-\n-import java.util.Map;\n-\n-public abstract class ConfigBuilder {\n-\n-  protected ConfigBuilder() {}\n-\n-  public abstract ConfigBuilder fromConfigMap(Map<String, String> configMap);\n-\n-  public abstract ConfigBuilder fromEnv();\n-\n-  protected boolean getProperty(String name, Map<String, String> map, boolean defaultValue) {\n-    try {\n-      return Boolean.parseBoolean(System.getProperty(name, map.get(name)));\n-    } catch (NumberFormatException ex) {\n-      return defaultValue;\n-    }\n-  }\n-\n-  protected int getProperty(String name, Map<String, String> map, int defaultValue) {\n-    try {\n-      return Integer.parseInt(System.getProperty(name, map.get(name)));\n-    } catch (NumberFormatException ex) {\n-      return defaultValue;\n-    }\n-  }\n-\n-  protected long getProperty(String name, Map<String, String> map, long defaultValue) {\n-    try {\n-      return Long.parseLong(System.getProperty(name, map.get(name)));\n-    } catch (NumberFormatException ex) {\n-      return defaultValue;\n-    }\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEwMjAxNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r405102014", "bodyText": "Add a comment about the keys are expected for the map.", "author": "jkwatson", "createdAt": "2020-04-07T20:46:38Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -411,4 +321,184 @@ public void run() {\n       }\n     }\n   }\n+\n+  @Immutable\n+  public static final class Config {\n+    private final long scheduleDelayMillis;\n+    private final int maxQueueSize;\n+    private final int maxExportBatchSize;\n+    private final int exporterTimeoutMillis;\n+    private final boolean sampled;\n+\n+    private Config(\n+        boolean sampled,\n+        long scheduleDelayMillis,\n+        int maxQueueSize,\n+        int maxExportBatchSize,\n+        int exporterTimeoutMillis) {\n+      this.sampled = sampled;\n+      this.scheduleDelayMillis = scheduleDelayMillis;\n+      this.maxQueueSize = maxQueueSize;\n+      this.maxExportBatchSize = maxExportBatchSize;\n+      this.exporterTimeoutMillis = exporterTimeoutMillis;\n+    }\n+\n+    public long getScheduleDelayMillis() {\n+      return scheduleDelayMillis;\n+    }\n+\n+    public int getMaxQueueSize() {\n+      return maxQueueSize;\n+    }\n+\n+    public int getMaxExportBatchSize() {\n+      return maxExportBatchSize;\n+    }\n+\n+    public int getExporterTimeoutMillis() {\n+      return exporterTimeoutMillis;\n+    }\n+\n+    public boolean isReportOnlySampled() {\n+      return sampled;\n+    }\n+\n+    public static Config getDefault() {\n+      return new Builder().build();\n+    }\n+\n+    public static Builder newBuilder() {\n+      return new Builder();\n+    }\n+\n+    public static class Builder extends ConfigBuilder {\n+\n+      private static final String KEY_SCHEDULE_DELAY_MILLIS = \"OTEL_BSP_SCHEDULE_DELAY\";\n+      private static final String KEY_MAX_QUEUE_SIZE = \"OTEL_BSP_MAX_QUEUE\";\n+      private static final String KEY_MAX_EXPORT_BATCH_SIZE = \"OTEL_BSP_MAX_EXPORT_BATCH\";\n+      private static final String KEY_EXPORT_TIMEOUT_MILLIS = \"OTEL_BSP_EXPORT_TIMEOUT\";\n+      private static final String KEY_SAMPLED = \"OTEL_BSP_REPORT_SAMPLED\";\n+\n+      private static final long SCHEDULE_DELAY_MILLIS = 5000;\n+      private static final int MAX_QUEUE_SIZE = 2048;\n+      private static final int MAX_EXPORT_BATCH_SIZE = 512;\n+      private static final int EXPORT_TIMEOUT_MILLIS = 30_000;\n+      private static final boolean REPORT_ONLY_SAMPLED = true;\n+\n+      private long scheduleDelayMillis = SCHEDULE_DELAY_MILLIS;\n+      private int maxQueueSize = MAX_QUEUE_SIZE;\n+      private int maxExportBatchSize = MAX_EXPORT_BATCH_SIZE;\n+      private int exporterTimeoutMillis = EXPORT_TIMEOUT_MILLIS;\n+      private boolean sampled = REPORT_ONLY_SAMPLED;\n+\n+      /**\n+       * Sets the configuration values from the given configuration map.", "originalCommit": "877de57c2e89d72cf7a6c35f17abc1a80d220969", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc02ade502a55a23264b30456fe4d08b557b69ea", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\nindex 356f14ce8..506367894 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n\n@@ -323,144 +329,234 @@ public final class BatchSpansProcessor implements SpanProcessor {\n   }\n \n   @Immutable\n-  public static final class Config {\n-    private final long scheduleDelayMillis;\n-    private final int maxQueueSize;\n-    private final int maxExportBatchSize;\n-    private final int exporterTimeoutMillis;\n-    private final boolean sampled;\n+  @AutoValue\n+  public abstract static class Config {\n \n-    private Config(\n-        boolean sampled,\n-        long scheduleDelayMillis,\n-        int maxQueueSize,\n-        int maxExportBatchSize,\n-        int exporterTimeoutMillis) {\n-      this.sampled = sampled;\n-      this.scheduleDelayMillis = scheduleDelayMillis;\n-      this.maxQueueSize = maxQueueSize;\n-      this.maxExportBatchSize = maxExportBatchSize;\n-      this.exporterTimeoutMillis = exporterTimeoutMillis;\n-    }\n+    private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+    private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+    private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+    private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+    private static final boolean DEFAULT_EXPORT_ONLY_SAMPLED = true;\n \n-    public long getScheduleDelayMillis() {\n-      return scheduleDelayMillis;\n-    }\n+    public abstract boolean isExportOnlySampled();\n \n-    public int getMaxQueueSize() {\n-      return maxQueueSize;\n-    }\n+    public abstract long getScheduleDelayMillis();\n \n-    public int getMaxExportBatchSize() {\n-      return maxExportBatchSize;\n-    }\n+    public abstract int getMaxQueueSize();\n \n-    public int getExporterTimeoutMillis() {\n-      return exporterTimeoutMillis;\n-    }\n+    public abstract int getMaxExportBatchSize();\n \n-    public boolean isReportOnlySampled() {\n-      return sampled;\n-    }\n+    public abstract int getExporterTimeoutMillis();\n \n+    /**\n+     * Creates a {@link Config} object using the default configuration.\n+     *\n+     * @return The {@link Config} object.\n+     * @since 0.4.0\n+     */\n     public static Config getDefault() {\n-      return new Builder().build();\n+      return newBuilder().build();\n     }\n \n-    public static Builder newBuilder() {\n-      return new Builder();\n+    /**\n+     * Creates a {@link Config} object reading the configuration values from the environment and\n+     * from system properties. System properties override values defined in the environment. If a\n+     * configuration value is missing, it uses the default value.\n+     *\n+     * @return The {@link Config} object.\n+     * @since 0.4.0\n+     */\n+    public static Config loadFromDefaultSources() {\n+      return newBuilder().readEnvironment().readSystemProperties().build();\n     }\n \n-    public static class Builder extends ConfigBuilder {\n+    /**\n+     * Returns a new {@link Builder} with default options.\n+     *\n+     * @return a new {@code Builder} with default options.\n+     * @since 0.4.0\n+     */\n+    public static Builder newBuilder() {\n+      return new AutoValue_BatchSpansProcessor_Config.Builder()\n+          .setScheduleDelayMillis(DEFAULT_SCHEDULE_DELAY_MILLIS)\n+          .setMaxQueueSize(DEFAULT_MAX_QUEUE_SIZE)\n+          .setMaxExportBatchSize(DEFAULT_MAX_EXPORT_BATCH_SIZE)\n+          .setExporterTimeoutMillis(DEFAULT_EXPORT_TIMEOUT_MILLIS)\n+          .setExportOnlySampled(DEFAULT_EXPORT_ONLY_SAMPLED);\n+    }\n \n-      private static final String KEY_SCHEDULE_DELAY_MILLIS = \"OTEL_BSP_SCHEDULE_DELAY\";\n-      private static final String KEY_MAX_QUEUE_SIZE = \"OTEL_BSP_MAX_QUEUE\";\n-      private static final String KEY_MAX_EXPORT_BATCH_SIZE = \"OTEL_BSP_MAX_EXPORT_BATCH\";\n-      private static final String KEY_EXPORT_TIMEOUT_MILLIS = \"OTEL_BSP_EXPORT_TIMEOUT\";\n-      private static final String KEY_SAMPLED = \"OTEL_BSP_REPORT_SAMPLED\";\n+    @AutoValue.Builder\n+    public abstract static class Builder {\n+\n+      private static final String KEY_SCHEDULE_DELAY_MILLIS = \"otel.bsp.schedule.delay\";\n+      private static final String KEY_MAX_QUEUE_SIZE = \"otel.bsp.max.queue\";\n+      private static final String KEY_MAX_EXPORT_BATCH_SIZE = \"otel.bsp.max.export.batch\";\n+      private static final String KEY_EXPORT_TIMEOUT_MILLIS = \"otel.bsp.export.timeout\";\n+      private static final String KEY_SAMPLED = \"otel.bsp.export.sampled\";\n+\n+      @VisibleForTesting\n+      protected enum NamingConvention {\n+        DOT {\n+          @Override\n+          public String normalize(@Nonnull String key) {\n+            return key.toLowerCase();\n+          }\n+        },\n+        ENV_VAR {\n+          @Override\n+          public String normalize(@Nonnull String key) {\n+            return key.toLowerCase().replace(\"_\", \".\");\n+          }\n+        };\n \n-      private static final long SCHEDULE_DELAY_MILLIS = 5000;\n-      private static final int MAX_QUEUE_SIZE = 2048;\n-      private static final int MAX_EXPORT_BATCH_SIZE = 512;\n-      private static final int EXPORT_TIMEOUT_MILLIS = 30_000;\n-      private static final boolean REPORT_ONLY_SAMPLED = true;\n+        public abstract String normalize(@Nonnull String key);\n \n-      private long scheduleDelayMillis = SCHEDULE_DELAY_MILLIS;\n-      private int maxQueueSize = MAX_QUEUE_SIZE;\n-      private int maxExportBatchSize = MAX_EXPORT_BATCH_SIZE;\n-      private int exporterTimeoutMillis = EXPORT_TIMEOUT_MILLIS;\n-      private boolean sampled = REPORT_ONLY_SAMPLED;\n+        public Map<String, String> normalize(@Nonnull Map<String, String> map) {\n+          Map<String, String> properties = new HashMap<>();\n+          for (Map.Entry<String, String> entry : map.entrySet()) {\n+            properties.put(normalize(entry.getKey()), entry.getValue());\n+          }\n+          return Collections.unmodifiableMap(properties);\n+        }\n+      }\n \n       /**\n-       * Sets the configuration values from the given configuration map.\n+       * Sets the configuration values from the given configuration map for only the available keys.\n+       * This method looks for the following keys:\n+       *\n+       * <ul>\n+       *   <li>{@code otel.bsp.schedule.delay}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code otel.bsp.max.queue}: to set the maximum queue size.\n+       *   <li>{@code otel.bsp.max.export.batch}: to set the maximum batch size.\n+       *   <li>{@code otel.bsp.export.timeout}: to set the maximum allowed time to export data.\n+       *   <li>{@code otel.bsp.export.sampled}: to set whether only sampled spans should be\n+       *       exported.\n+       * </ul>\n        *\n        * @param configMap {@link Map} holding the configuration values.\n        * @return this.\n        */\n-      @Override\n-      public Builder fromConfigMap(Map<String, String> configMap) {\n-        this.setScheduleDelayMillis(\n-            getProperty(KEY_SCHEDULE_DELAY_MILLIS, configMap, SCHEDULE_DELAY_MILLIS));\n-        this.setMaxQueueSize(getProperty(KEY_MAX_QUEUE_SIZE, configMap, MAX_QUEUE_SIZE));\n-        this.setMaxExportBatchSize(\n-            getProperty(KEY_MAX_EXPORT_BATCH_SIZE, configMap, MAX_EXPORT_BATCH_SIZE));\n-        this.setExporterTimeoutMillis(\n-            getProperty(KEY_EXPORT_TIMEOUT_MILLIS, configMap, EXPORT_TIMEOUT_MILLIS));\n-        this.reportOnlySampled(getProperty(KEY_SAMPLED, configMap, REPORT_ONLY_SAMPLED));\n+      @VisibleForTesting\n+      Builder fromConfigMap(Map<String, String> configMap, NamingConvention namingConvention) {\n+        configMap = namingConvention.normalize(configMap);\n+        Long longValue = getLongProperty(KEY_SCHEDULE_DELAY_MILLIS, configMap);\n+        if (longValue != null) {\n+          this.setScheduleDelayMillis(longValue);\n+        }\n+        Integer intValue = getIntProperty(KEY_MAX_QUEUE_SIZE, configMap);\n+        if (intValue != null) {\n+          this.setMaxQueueSize(intValue);\n+        }\n+        intValue = getIntProperty(KEY_MAX_EXPORT_BATCH_SIZE, configMap);\n+        if (intValue != null) {\n+          this.setMaxExportBatchSize(intValue);\n+        }\n+        intValue = getIntProperty(KEY_EXPORT_TIMEOUT_MILLIS, configMap);\n+        if (intValue != null) {\n+          this.setExporterTimeoutMillis(intValue);\n+        }\n+        Boolean boolValue = getBooleanProperty(KEY_SAMPLED, configMap);\n+        if (boolValue != null) {\n+          this.setExportOnlySampled(boolValue);\n+        }\n         return this;\n       }\n \n       /**\n-       * Sets the configuration values from environment variables.\n+       * Sets the configuration values from the given properties object for only the available keys.\n+       * This method looks for the following keys:\n        *\n+       * <ul>\n+       *   <li>{@code otel.bsp.schedule.delay}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code otel.bsp.max.queue}: to set the maximum queue size.\n+       *   <li>{@code otel.bsp.max.export.batch}: to set the maximum batch size.\n+       *   <li>{@code otel.bsp.export.timeout}: to set the maximum allowed time to export data.\n+       *   <li>{@code otel.bsp.export.sampled}: to set whether only sampled spans should be\n+       *       exported.\n+       * </ul>\n+       *\n+       * @param properties {@link Properties} holding the configuration values.\n        * @return this.\n        */\n-      @Override\n-      public Builder fromEnv() {\n-        return fromConfigMap(System.getenv());\n+      public Builder readProperties(Properties properties) {\n+        return fromConfigMap(Maps.fromProperties(properties), NamingConvention.DOT);\n       }\n \n       /**\n-       * Set whether only sampled spans should be reported.\n+       * Sets the configuration values from environment variables for only the available keys. This\n+       * method looks for the following keys:\n+       *\n+       * <ul>\n+       *   <li>{@code OTEL_BSP_SCHEDULE_DELAY}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code OTEL_BSP_MAX_QUEUE}: to set the maximum queue size.\n+       *   <li>{@code OTEL_BSP_MAX_EXPORT_BATCH}: to set the maximum batch size.\n+       *   <li>{@code OTEL_BSP_EXPORT_TIMEOUT}: to set the maximum allowed time to export data.\n+       *   <li>{@code OTEL_BSP_EXPORT_SAMPLED}: to set whether only sampled spans should be\n+       *       exported.\n+       * </ul>\n        *\n-       * @param sampled report only sampled spans.\n        * @return this.\n        */\n-      public Builder reportOnlySampled(boolean sampled) {\n-        this.sampled = sampled;\n-        return this;\n+      public Builder readEnvironment() {\n+        return fromConfigMap(System.getenv(), NamingConvention.ENV_VAR);\n+      }\n+\n+      /**\n+       * Sets the configuration values from system properties for only the available keys. This\n+       * method looks for the following keys:\n+       *\n+       * <ul>\n+       *   <li>{@code otel.bsp.schedule.delay}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code otel.bsp.max.queue}: to set the maximum queue size.\n+       *   <li>{@code otel.bsp.max.export.batch}: to set the maximum batch size.\n+       *   <li>{@code otel.bsp.export.timeout}: to set the maximum allowed time to export data.\n+       *   <li>{@code otel.bsp.export.sampled}: to set whether only sampled spans should be\n+       *       reported.\n+       * </ul>\n+       *\n+       * @return this.\n+       */\n+      public Builder readSystemProperties() {\n+        return readProperties(System.getProperties());\n       }\n \n+      /**\n+       * Set whether only sampled spans should be exported.\n+       *\n+       * <p>Default value is {@code true}.\n+       *\n+       * @see BatchSpansProcessor.Config#DEFAULT_EXPORT_ONLY_SAMPLED\n+       * @param sampled report only sampled spans.\n+       * @return this.\n+       */\n+      public abstract Builder setExportOnlySampled(boolean sampled);\n+\n       /**\n        * Sets the delay interval between two consecutive exports. The actual interval may be shorter\n        * if the batch size is getting larger than {@code maxQueuedSpans / 2}.\n        *\n        * <p>Default value is {@code 5000}ms.\n        *\n+       * @see BatchSpansProcessor.Config#DEFAULT_SCHEDULE_DELAY_MILLIS\n        * @param scheduleDelayMillis the delay interval between two consecutive exports.\n        * @return this.\n        */\n-      public Builder setScheduleDelayMillis(long scheduleDelayMillis) {\n-        Utils.checkArgument(\n-            scheduleDelayMillis >= 0, \"scheduleDelayMillis must greater than or equal 0.\");\n-        this.scheduleDelayMillis = scheduleDelayMillis;\n-        return this;\n-      }\n+      public abstract Builder setScheduleDelayMillis(long scheduleDelayMillis);\n \n       /**\n        * Sets the maximum time an exporter will be allowed to run before being cancelled.\n        *\n        * <p>Default value is {@code 30000}ms\n        *\n+       * @see BatchSpansProcessor.Config#DEFAULT_EXPORT_TIMEOUT_MILLIS\n        * @param exporterTimeoutMillis the timeout for exports in milliseconds.\n        * @return this\n        */\n-      public Builder setExporterTimeoutMillis(int exporterTimeoutMillis) {\n-        Utils.checkArgument(\n-            exporterTimeoutMillis >= 0, \"exporterTimeoutMillis must greater than or equal 0.\");\n-        this.exporterTimeoutMillis = exporterTimeoutMillis;\n-        return this;\n-      }\n+      public abstract Builder setExporterTimeoutMillis(int exporterTimeoutMillis);\n \n       /**\n        * Sets the maximum number of Spans that are kept in the queue before start dropping.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEwMjQzOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r405102439", "bodyText": "Add a link to the relevant env vars?", "author": "jkwatson", "createdAt": "2020-04-07T20:47:22Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -411,4 +321,184 @@ public void run() {\n       }\n     }\n   }\n+\n+  @Immutable\n+  public static final class Config {\n+    private final long scheduleDelayMillis;\n+    private final int maxQueueSize;\n+    private final int maxExportBatchSize;\n+    private final int exporterTimeoutMillis;\n+    private final boolean sampled;\n+\n+    private Config(\n+        boolean sampled,\n+        long scheduleDelayMillis,\n+        int maxQueueSize,\n+        int maxExportBatchSize,\n+        int exporterTimeoutMillis) {\n+      this.sampled = sampled;\n+      this.scheduleDelayMillis = scheduleDelayMillis;\n+      this.maxQueueSize = maxQueueSize;\n+      this.maxExportBatchSize = maxExportBatchSize;\n+      this.exporterTimeoutMillis = exporterTimeoutMillis;\n+    }\n+\n+    public long getScheduleDelayMillis() {\n+      return scheduleDelayMillis;\n+    }\n+\n+    public int getMaxQueueSize() {\n+      return maxQueueSize;\n+    }\n+\n+    public int getMaxExportBatchSize() {\n+      return maxExportBatchSize;\n+    }\n+\n+    public int getExporterTimeoutMillis() {\n+      return exporterTimeoutMillis;\n+    }\n+\n+    public boolean isReportOnlySampled() {\n+      return sampled;\n+    }\n+\n+    public static Config getDefault() {\n+      return new Builder().build();\n+    }\n+\n+    public static Builder newBuilder() {\n+      return new Builder();\n+    }\n+\n+    public static class Builder extends ConfigBuilder {\n+\n+      private static final String KEY_SCHEDULE_DELAY_MILLIS = \"OTEL_BSP_SCHEDULE_DELAY\";\n+      private static final String KEY_MAX_QUEUE_SIZE = \"OTEL_BSP_MAX_QUEUE\";\n+      private static final String KEY_MAX_EXPORT_BATCH_SIZE = \"OTEL_BSP_MAX_EXPORT_BATCH\";\n+      private static final String KEY_EXPORT_TIMEOUT_MILLIS = \"OTEL_BSP_EXPORT_TIMEOUT\";\n+      private static final String KEY_SAMPLED = \"OTEL_BSP_REPORT_SAMPLED\";\n+\n+      private static final long SCHEDULE_DELAY_MILLIS = 5000;\n+      private static final int MAX_QUEUE_SIZE = 2048;\n+      private static final int MAX_EXPORT_BATCH_SIZE = 512;\n+      private static final int EXPORT_TIMEOUT_MILLIS = 30_000;\n+      private static final boolean REPORT_ONLY_SAMPLED = true;\n+\n+      private long scheduleDelayMillis = SCHEDULE_DELAY_MILLIS;\n+      private int maxQueueSize = MAX_QUEUE_SIZE;\n+      private int maxExportBatchSize = MAX_EXPORT_BATCH_SIZE;\n+      private int exporterTimeoutMillis = EXPORT_TIMEOUT_MILLIS;\n+      private boolean sampled = REPORT_ONLY_SAMPLED;\n+\n+      /**\n+       * Sets the configuration values from the given configuration map.\n+       *\n+       * @param configMap {@link Map} holding the configuration values.\n+       * @return this.\n+       */\n+      @Override\n+      public Builder fromConfigMap(Map<String, String> configMap) {\n+        this.setScheduleDelayMillis(\n+            getProperty(KEY_SCHEDULE_DELAY_MILLIS, configMap, SCHEDULE_DELAY_MILLIS));\n+        this.setMaxQueueSize(getProperty(KEY_MAX_QUEUE_SIZE, configMap, MAX_QUEUE_SIZE));\n+        this.setMaxExportBatchSize(\n+            getProperty(KEY_MAX_EXPORT_BATCH_SIZE, configMap, MAX_EXPORT_BATCH_SIZE));\n+        this.setExporterTimeoutMillis(\n+            getProperty(KEY_EXPORT_TIMEOUT_MILLIS, configMap, EXPORT_TIMEOUT_MILLIS));\n+        this.reportOnlySampled(getProperty(KEY_SAMPLED, configMap, REPORT_ONLY_SAMPLED));\n+        return this;\n+      }\n+\n+      /**\n+       * Sets the configuration values from environment variables.", "originalCommit": "877de57c2e89d72cf7a6c35f17abc1a80d220969", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc02ade502a55a23264b30456fe4d08b557b69ea", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\nindex 356f14ce8..506367894 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n\n@@ -323,144 +329,234 @@ public final class BatchSpansProcessor implements SpanProcessor {\n   }\n \n   @Immutable\n-  public static final class Config {\n-    private final long scheduleDelayMillis;\n-    private final int maxQueueSize;\n-    private final int maxExportBatchSize;\n-    private final int exporterTimeoutMillis;\n-    private final boolean sampled;\n+  @AutoValue\n+  public abstract static class Config {\n \n-    private Config(\n-        boolean sampled,\n-        long scheduleDelayMillis,\n-        int maxQueueSize,\n-        int maxExportBatchSize,\n-        int exporterTimeoutMillis) {\n-      this.sampled = sampled;\n-      this.scheduleDelayMillis = scheduleDelayMillis;\n-      this.maxQueueSize = maxQueueSize;\n-      this.maxExportBatchSize = maxExportBatchSize;\n-      this.exporterTimeoutMillis = exporterTimeoutMillis;\n-    }\n+    private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+    private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+    private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+    private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+    private static final boolean DEFAULT_EXPORT_ONLY_SAMPLED = true;\n \n-    public long getScheduleDelayMillis() {\n-      return scheduleDelayMillis;\n-    }\n+    public abstract boolean isExportOnlySampled();\n \n-    public int getMaxQueueSize() {\n-      return maxQueueSize;\n-    }\n+    public abstract long getScheduleDelayMillis();\n \n-    public int getMaxExportBatchSize() {\n-      return maxExportBatchSize;\n-    }\n+    public abstract int getMaxQueueSize();\n \n-    public int getExporterTimeoutMillis() {\n-      return exporterTimeoutMillis;\n-    }\n+    public abstract int getMaxExportBatchSize();\n \n-    public boolean isReportOnlySampled() {\n-      return sampled;\n-    }\n+    public abstract int getExporterTimeoutMillis();\n \n+    /**\n+     * Creates a {@link Config} object using the default configuration.\n+     *\n+     * @return The {@link Config} object.\n+     * @since 0.4.0\n+     */\n     public static Config getDefault() {\n-      return new Builder().build();\n+      return newBuilder().build();\n     }\n \n-    public static Builder newBuilder() {\n-      return new Builder();\n+    /**\n+     * Creates a {@link Config} object reading the configuration values from the environment and\n+     * from system properties. System properties override values defined in the environment. If a\n+     * configuration value is missing, it uses the default value.\n+     *\n+     * @return The {@link Config} object.\n+     * @since 0.4.0\n+     */\n+    public static Config loadFromDefaultSources() {\n+      return newBuilder().readEnvironment().readSystemProperties().build();\n     }\n \n-    public static class Builder extends ConfigBuilder {\n+    /**\n+     * Returns a new {@link Builder} with default options.\n+     *\n+     * @return a new {@code Builder} with default options.\n+     * @since 0.4.0\n+     */\n+    public static Builder newBuilder() {\n+      return new AutoValue_BatchSpansProcessor_Config.Builder()\n+          .setScheduleDelayMillis(DEFAULT_SCHEDULE_DELAY_MILLIS)\n+          .setMaxQueueSize(DEFAULT_MAX_QUEUE_SIZE)\n+          .setMaxExportBatchSize(DEFAULT_MAX_EXPORT_BATCH_SIZE)\n+          .setExporterTimeoutMillis(DEFAULT_EXPORT_TIMEOUT_MILLIS)\n+          .setExportOnlySampled(DEFAULT_EXPORT_ONLY_SAMPLED);\n+    }\n \n-      private static final String KEY_SCHEDULE_DELAY_MILLIS = \"OTEL_BSP_SCHEDULE_DELAY\";\n-      private static final String KEY_MAX_QUEUE_SIZE = \"OTEL_BSP_MAX_QUEUE\";\n-      private static final String KEY_MAX_EXPORT_BATCH_SIZE = \"OTEL_BSP_MAX_EXPORT_BATCH\";\n-      private static final String KEY_EXPORT_TIMEOUT_MILLIS = \"OTEL_BSP_EXPORT_TIMEOUT\";\n-      private static final String KEY_SAMPLED = \"OTEL_BSP_REPORT_SAMPLED\";\n+    @AutoValue.Builder\n+    public abstract static class Builder {\n+\n+      private static final String KEY_SCHEDULE_DELAY_MILLIS = \"otel.bsp.schedule.delay\";\n+      private static final String KEY_MAX_QUEUE_SIZE = \"otel.bsp.max.queue\";\n+      private static final String KEY_MAX_EXPORT_BATCH_SIZE = \"otel.bsp.max.export.batch\";\n+      private static final String KEY_EXPORT_TIMEOUT_MILLIS = \"otel.bsp.export.timeout\";\n+      private static final String KEY_SAMPLED = \"otel.bsp.export.sampled\";\n+\n+      @VisibleForTesting\n+      protected enum NamingConvention {\n+        DOT {\n+          @Override\n+          public String normalize(@Nonnull String key) {\n+            return key.toLowerCase();\n+          }\n+        },\n+        ENV_VAR {\n+          @Override\n+          public String normalize(@Nonnull String key) {\n+            return key.toLowerCase().replace(\"_\", \".\");\n+          }\n+        };\n \n-      private static final long SCHEDULE_DELAY_MILLIS = 5000;\n-      private static final int MAX_QUEUE_SIZE = 2048;\n-      private static final int MAX_EXPORT_BATCH_SIZE = 512;\n-      private static final int EXPORT_TIMEOUT_MILLIS = 30_000;\n-      private static final boolean REPORT_ONLY_SAMPLED = true;\n+        public abstract String normalize(@Nonnull String key);\n \n-      private long scheduleDelayMillis = SCHEDULE_DELAY_MILLIS;\n-      private int maxQueueSize = MAX_QUEUE_SIZE;\n-      private int maxExportBatchSize = MAX_EXPORT_BATCH_SIZE;\n-      private int exporterTimeoutMillis = EXPORT_TIMEOUT_MILLIS;\n-      private boolean sampled = REPORT_ONLY_SAMPLED;\n+        public Map<String, String> normalize(@Nonnull Map<String, String> map) {\n+          Map<String, String> properties = new HashMap<>();\n+          for (Map.Entry<String, String> entry : map.entrySet()) {\n+            properties.put(normalize(entry.getKey()), entry.getValue());\n+          }\n+          return Collections.unmodifiableMap(properties);\n+        }\n+      }\n \n       /**\n-       * Sets the configuration values from the given configuration map.\n+       * Sets the configuration values from the given configuration map for only the available keys.\n+       * This method looks for the following keys:\n+       *\n+       * <ul>\n+       *   <li>{@code otel.bsp.schedule.delay}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code otel.bsp.max.queue}: to set the maximum queue size.\n+       *   <li>{@code otel.bsp.max.export.batch}: to set the maximum batch size.\n+       *   <li>{@code otel.bsp.export.timeout}: to set the maximum allowed time to export data.\n+       *   <li>{@code otel.bsp.export.sampled}: to set whether only sampled spans should be\n+       *       exported.\n+       * </ul>\n        *\n        * @param configMap {@link Map} holding the configuration values.\n        * @return this.\n        */\n-      @Override\n-      public Builder fromConfigMap(Map<String, String> configMap) {\n-        this.setScheduleDelayMillis(\n-            getProperty(KEY_SCHEDULE_DELAY_MILLIS, configMap, SCHEDULE_DELAY_MILLIS));\n-        this.setMaxQueueSize(getProperty(KEY_MAX_QUEUE_SIZE, configMap, MAX_QUEUE_SIZE));\n-        this.setMaxExportBatchSize(\n-            getProperty(KEY_MAX_EXPORT_BATCH_SIZE, configMap, MAX_EXPORT_BATCH_SIZE));\n-        this.setExporterTimeoutMillis(\n-            getProperty(KEY_EXPORT_TIMEOUT_MILLIS, configMap, EXPORT_TIMEOUT_MILLIS));\n-        this.reportOnlySampled(getProperty(KEY_SAMPLED, configMap, REPORT_ONLY_SAMPLED));\n+      @VisibleForTesting\n+      Builder fromConfigMap(Map<String, String> configMap, NamingConvention namingConvention) {\n+        configMap = namingConvention.normalize(configMap);\n+        Long longValue = getLongProperty(KEY_SCHEDULE_DELAY_MILLIS, configMap);\n+        if (longValue != null) {\n+          this.setScheduleDelayMillis(longValue);\n+        }\n+        Integer intValue = getIntProperty(KEY_MAX_QUEUE_SIZE, configMap);\n+        if (intValue != null) {\n+          this.setMaxQueueSize(intValue);\n+        }\n+        intValue = getIntProperty(KEY_MAX_EXPORT_BATCH_SIZE, configMap);\n+        if (intValue != null) {\n+          this.setMaxExportBatchSize(intValue);\n+        }\n+        intValue = getIntProperty(KEY_EXPORT_TIMEOUT_MILLIS, configMap);\n+        if (intValue != null) {\n+          this.setExporterTimeoutMillis(intValue);\n+        }\n+        Boolean boolValue = getBooleanProperty(KEY_SAMPLED, configMap);\n+        if (boolValue != null) {\n+          this.setExportOnlySampled(boolValue);\n+        }\n         return this;\n       }\n \n       /**\n-       * Sets the configuration values from environment variables.\n+       * Sets the configuration values from the given properties object for only the available keys.\n+       * This method looks for the following keys:\n        *\n+       * <ul>\n+       *   <li>{@code otel.bsp.schedule.delay}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code otel.bsp.max.queue}: to set the maximum queue size.\n+       *   <li>{@code otel.bsp.max.export.batch}: to set the maximum batch size.\n+       *   <li>{@code otel.bsp.export.timeout}: to set the maximum allowed time to export data.\n+       *   <li>{@code otel.bsp.export.sampled}: to set whether only sampled spans should be\n+       *       exported.\n+       * </ul>\n+       *\n+       * @param properties {@link Properties} holding the configuration values.\n        * @return this.\n        */\n-      @Override\n-      public Builder fromEnv() {\n-        return fromConfigMap(System.getenv());\n+      public Builder readProperties(Properties properties) {\n+        return fromConfigMap(Maps.fromProperties(properties), NamingConvention.DOT);\n       }\n \n       /**\n-       * Set whether only sampled spans should be reported.\n+       * Sets the configuration values from environment variables for only the available keys. This\n+       * method looks for the following keys:\n+       *\n+       * <ul>\n+       *   <li>{@code OTEL_BSP_SCHEDULE_DELAY}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code OTEL_BSP_MAX_QUEUE}: to set the maximum queue size.\n+       *   <li>{@code OTEL_BSP_MAX_EXPORT_BATCH}: to set the maximum batch size.\n+       *   <li>{@code OTEL_BSP_EXPORT_TIMEOUT}: to set the maximum allowed time to export data.\n+       *   <li>{@code OTEL_BSP_EXPORT_SAMPLED}: to set whether only sampled spans should be\n+       *       exported.\n+       * </ul>\n        *\n-       * @param sampled report only sampled spans.\n        * @return this.\n        */\n-      public Builder reportOnlySampled(boolean sampled) {\n-        this.sampled = sampled;\n-        return this;\n+      public Builder readEnvironment() {\n+        return fromConfigMap(System.getenv(), NamingConvention.ENV_VAR);\n+      }\n+\n+      /**\n+       * Sets the configuration values from system properties for only the available keys. This\n+       * method looks for the following keys:\n+       *\n+       * <ul>\n+       *   <li>{@code otel.bsp.schedule.delay}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code otel.bsp.max.queue}: to set the maximum queue size.\n+       *   <li>{@code otel.bsp.max.export.batch}: to set the maximum batch size.\n+       *   <li>{@code otel.bsp.export.timeout}: to set the maximum allowed time to export data.\n+       *   <li>{@code otel.bsp.export.sampled}: to set whether only sampled spans should be\n+       *       reported.\n+       * </ul>\n+       *\n+       * @return this.\n+       */\n+      public Builder readSystemProperties() {\n+        return readProperties(System.getProperties());\n       }\n \n+      /**\n+       * Set whether only sampled spans should be exported.\n+       *\n+       * <p>Default value is {@code true}.\n+       *\n+       * @see BatchSpansProcessor.Config#DEFAULT_EXPORT_ONLY_SAMPLED\n+       * @param sampled report only sampled spans.\n+       * @return this.\n+       */\n+      public abstract Builder setExportOnlySampled(boolean sampled);\n+\n       /**\n        * Sets the delay interval between two consecutive exports. The actual interval may be shorter\n        * if the batch size is getting larger than {@code maxQueuedSpans / 2}.\n        *\n        * <p>Default value is {@code 5000}ms.\n        *\n+       * @see BatchSpansProcessor.Config#DEFAULT_SCHEDULE_DELAY_MILLIS\n        * @param scheduleDelayMillis the delay interval between two consecutive exports.\n        * @return this.\n        */\n-      public Builder setScheduleDelayMillis(long scheduleDelayMillis) {\n-        Utils.checkArgument(\n-            scheduleDelayMillis >= 0, \"scheduleDelayMillis must greater than or equal 0.\");\n-        this.scheduleDelayMillis = scheduleDelayMillis;\n-        return this;\n-      }\n+      public abstract Builder setScheduleDelayMillis(long scheduleDelayMillis);\n \n       /**\n        * Sets the maximum time an exporter will be allowed to run before being cancelled.\n        *\n        * <p>Default value is {@code 30000}ms\n        *\n+       * @see BatchSpansProcessor.Config#DEFAULT_EXPORT_TIMEOUT_MILLIS\n        * @param exporterTimeoutMillis the timeout for exports in milliseconds.\n        * @return this\n        */\n-      public Builder setExporterTimeoutMillis(int exporterTimeoutMillis) {\n-        Utils.checkArgument(\n-            exporterTimeoutMillis >= 0, \"exporterTimeoutMillis must greater than or equal 0.\");\n-        this.exporterTimeoutMillis = exporterTimeoutMillis;\n-        return this;\n-      }\n+      public abstract Builder setExporterTimeoutMillis(int exporterTimeoutMillis);\n \n       /**\n        * Sets the maximum number of Spans that are kept in the queue before start dropping.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEwMjgxMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r405102813", "bodyText": "javadoc needed here.", "author": "jkwatson", "createdAt": "2020-04-07T20:47:58Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -411,4 +321,184 @@ public void run() {\n       }\n     }\n   }\n+\n+  @Immutable\n+  public static final class Config {\n+    private final long scheduleDelayMillis;\n+    private final int maxQueueSize;\n+    private final int maxExportBatchSize;\n+    private final int exporterTimeoutMillis;\n+    private final boolean sampled;\n+\n+    private Config(\n+        boolean sampled,\n+        long scheduleDelayMillis,\n+        int maxQueueSize,\n+        int maxExportBatchSize,\n+        int exporterTimeoutMillis) {\n+      this.sampled = sampled;\n+      this.scheduleDelayMillis = scheduleDelayMillis;\n+      this.maxQueueSize = maxQueueSize;\n+      this.maxExportBatchSize = maxExportBatchSize;\n+      this.exporterTimeoutMillis = exporterTimeoutMillis;\n+    }\n+\n+    public long getScheduleDelayMillis() {\n+      return scheduleDelayMillis;\n+    }\n+\n+    public int getMaxQueueSize() {\n+      return maxQueueSize;\n+    }\n+\n+    public int getMaxExportBatchSize() {\n+      return maxExportBatchSize;\n+    }\n+\n+    public int getExporterTimeoutMillis() {\n+      return exporterTimeoutMillis;\n+    }\n+\n+    public boolean isReportOnlySampled() {\n+      return sampled;\n+    }\n+\n+    public static Config getDefault() {\n+      return new Builder().build();\n+    }\n+\n+    public static Builder newBuilder() {\n+      return new Builder();\n+    }\n+\n+    public static class Builder extends ConfigBuilder {\n+\n+      private static final String KEY_SCHEDULE_DELAY_MILLIS = \"OTEL_BSP_SCHEDULE_DELAY\";\n+      private static final String KEY_MAX_QUEUE_SIZE = \"OTEL_BSP_MAX_QUEUE\";\n+      private static final String KEY_MAX_EXPORT_BATCH_SIZE = \"OTEL_BSP_MAX_EXPORT_BATCH\";\n+      private static final String KEY_EXPORT_TIMEOUT_MILLIS = \"OTEL_BSP_EXPORT_TIMEOUT\";\n+      private static final String KEY_SAMPLED = \"OTEL_BSP_REPORT_SAMPLED\";\n+\n+      private static final long SCHEDULE_DELAY_MILLIS = 5000;\n+      private static final int MAX_QUEUE_SIZE = 2048;\n+      private static final int MAX_EXPORT_BATCH_SIZE = 512;\n+      private static final int EXPORT_TIMEOUT_MILLIS = 30_000;\n+      private static final boolean REPORT_ONLY_SAMPLED = true;\n+\n+      private long scheduleDelayMillis = SCHEDULE_DELAY_MILLIS;\n+      private int maxQueueSize = MAX_QUEUE_SIZE;\n+      private int maxExportBatchSize = MAX_EXPORT_BATCH_SIZE;\n+      private int exporterTimeoutMillis = EXPORT_TIMEOUT_MILLIS;\n+      private boolean sampled = REPORT_ONLY_SAMPLED;\n+\n+      /**\n+       * Sets the configuration values from the given configuration map.\n+       *\n+       * @param configMap {@link Map} holding the configuration values.\n+       * @return this.\n+       */\n+      @Override\n+      public Builder fromConfigMap(Map<String, String> configMap) {\n+        this.setScheduleDelayMillis(\n+            getProperty(KEY_SCHEDULE_DELAY_MILLIS, configMap, SCHEDULE_DELAY_MILLIS));\n+        this.setMaxQueueSize(getProperty(KEY_MAX_QUEUE_SIZE, configMap, MAX_QUEUE_SIZE));\n+        this.setMaxExportBatchSize(\n+            getProperty(KEY_MAX_EXPORT_BATCH_SIZE, configMap, MAX_EXPORT_BATCH_SIZE));\n+        this.setExporterTimeoutMillis(\n+            getProperty(KEY_EXPORT_TIMEOUT_MILLIS, configMap, EXPORT_TIMEOUT_MILLIS));\n+        this.reportOnlySampled(getProperty(KEY_SAMPLED, configMap, REPORT_ONLY_SAMPLED));\n+        return this;\n+      }\n+\n+      /**\n+       * Sets the configuration values from environment variables.\n+       *\n+       * @return this.\n+       */\n+      @Override\n+      public Builder fromEnv() {\n+        return fromConfigMap(System.getenv());\n+      }\n+\n+      /**\n+       * Set whether only sampled spans should be reported.\n+       *\n+       * @param sampled report only sampled spans.\n+       * @return this.\n+       */\n+      public Builder reportOnlySampled(boolean sampled) {\n+        this.sampled = sampled;\n+        return this;\n+      }\n+\n+      /**\n+       * Sets the delay interval between two consecutive exports. The actual interval may be shorter\n+       * if the batch size is getting larger than {@code maxQueuedSpans / 2}.\n+       *\n+       * <p>Default value is {@code 5000}ms.\n+       *\n+       * @param scheduleDelayMillis the delay interval between two consecutive exports.\n+       * @return this.\n+       */\n+      public Builder setScheduleDelayMillis(long scheduleDelayMillis) {\n+        Utils.checkArgument(\n+            scheduleDelayMillis >= 0, \"scheduleDelayMillis must greater than or equal 0.\");\n+        this.scheduleDelayMillis = scheduleDelayMillis;\n+        return this;\n+      }\n+\n+      /**\n+       * Sets the maximum time an exporter will be allowed to run before being cancelled.\n+       *\n+       * <p>Default value is {@code 30000}ms\n+       *\n+       * @param exporterTimeoutMillis the timeout for exports in milliseconds.\n+       * @return this\n+       */\n+      public Builder setExporterTimeoutMillis(int exporterTimeoutMillis) {\n+        Utils.checkArgument(\n+            exporterTimeoutMillis >= 0, \"exporterTimeoutMillis must greater than or equal 0.\");\n+        this.exporterTimeoutMillis = exporterTimeoutMillis;\n+        return this;\n+      }\n+\n+      /**\n+       * Sets the maximum number of Spans that are kept in the queue before start dropping.\n+       *\n+       * <p>See the BatchSampledSpansProcessor class description for a high-level design description\n+       * of this class.\n+       *\n+       * <p>Default value is {@code 2048}.\n+       *\n+       * @param maxQueueSize the maximum number of Spans that are kept in the queue before start\n+       *     dropping.\n+       * @return this.\n+       */\n+      public Builder setMaxQueueSize(int maxQueueSize) {\n+        Utils.checkArgument(maxQueueSize > 0, \"maxQueueSize must be positive.\");\n+        this.maxQueueSize = maxQueueSize;\n+        return this;\n+      }\n+\n+      /**\n+       * Sets the maximum batch size for every export. This must be smaller or equal to {@code\n+       * maxQueuedSpans}.\n+       *\n+       * <p>Default value is {@code 512}.\n+       *\n+       * @param maxExportBatchSize the maximum batch size for every export.\n+       * @return this.\n+       */\n+      public Builder setMaxExportBatchSize(int maxExportBatchSize) {\n+        Utils.checkArgument(maxExportBatchSize > 0, \"maxExportBatchSize must be positive.\");\n+        this.maxExportBatchSize = maxExportBatchSize;\n+        return this;\n+      }\n+\n+      public Config build() {", "originalCommit": "877de57c2e89d72cf7a6c35f17abc1a80d220969", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc02ade502a55a23264b30456fe4d08b557b69ea", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\nindex 356f14ce8..506367894 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n\n@@ -323,144 +329,234 @@ public final class BatchSpansProcessor implements SpanProcessor {\n   }\n \n   @Immutable\n-  public static final class Config {\n-    private final long scheduleDelayMillis;\n-    private final int maxQueueSize;\n-    private final int maxExportBatchSize;\n-    private final int exporterTimeoutMillis;\n-    private final boolean sampled;\n+  @AutoValue\n+  public abstract static class Config {\n \n-    private Config(\n-        boolean sampled,\n-        long scheduleDelayMillis,\n-        int maxQueueSize,\n-        int maxExportBatchSize,\n-        int exporterTimeoutMillis) {\n-      this.sampled = sampled;\n-      this.scheduleDelayMillis = scheduleDelayMillis;\n-      this.maxQueueSize = maxQueueSize;\n-      this.maxExportBatchSize = maxExportBatchSize;\n-      this.exporterTimeoutMillis = exporterTimeoutMillis;\n-    }\n+    private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+    private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+    private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+    private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+    private static final boolean DEFAULT_EXPORT_ONLY_SAMPLED = true;\n \n-    public long getScheduleDelayMillis() {\n-      return scheduleDelayMillis;\n-    }\n+    public abstract boolean isExportOnlySampled();\n \n-    public int getMaxQueueSize() {\n-      return maxQueueSize;\n-    }\n+    public abstract long getScheduleDelayMillis();\n \n-    public int getMaxExportBatchSize() {\n-      return maxExportBatchSize;\n-    }\n+    public abstract int getMaxQueueSize();\n \n-    public int getExporterTimeoutMillis() {\n-      return exporterTimeoutMillis;\n-    }\n+    public abstract int getMaxExportBatchSize();\n \n-    public boolean isReportOnlySampled() {\n-      return sampled;\n-    }\n+    public abstract int getExporterTimeoutMillis();\n \n+    /**\n+     * Creates a {@link Config} object using the default configuration.\n+     *\n+     * @return The {@link Config} object.\n+     * @since 0.4.0\n+     */\n     public static Config getDefault() {\n-      return new Builder().build();\n+      return newBuilder().build();\n     }\n \n-    public static Builder newBuilder() {\n-      return new Builder();\n+    /**\n+     * Creates a {@link Config} object reading the configuration values from the environment and\n+     * from system properties. System properties override values defined in the environment. If a\n+     * configuration value is missing, it uses the default value.\n+     *\n+     * @return The {@link Config} object.\n+     * @since 0.4.0\n+     */\n+    public static Config loadFromDefaultSources() {\n+      return newBuilder().readEnvironment().readSystemProperties().build();\n     }\n \n-    public static class Builder extends ConfigBuilder {\n+    /**\n+     * Returns a new {@link Builder} with default options.\n+     *\n+     * @return a new {@code Builder} with default options.\n+     * @since 0.4.0\n+     */\n+    public static Builder newBuilder() {\n+      return new AutoValue_BatchSpansProcessor_Config.Builder()\n+          .setScheduleDelayMillis(DEFAULT_SCHEDULE_DELAY_MILLIS)\n+          .setMaxQueueSize(DEFAULT_MAX_QUEUE_SIZE)\n+          .setMaxExportBatchSize(DEFAULT_MAX_EXPORT_BATCH_SIZE)\n+          .setExporterTimeoutMillis(DEFAULT_EXPORT_TIMEOUT_MILLIS)\n+          .setExportOnlySampled(DEFAULT_EXPORT_ONLY_SAMPLED);\n+    }\n \n-      private static final String KEY_SCHEDULE_DELAY_MILLIS = \"OTEL_BSP_SCHEDULE_DELAY\";\n-      private static final String KEY_MAX_QUEUE_SIZE = \"OTEL_BSP_MAX_QUEUE\";\n-      private static final String KEY_MAX_EXPORT_BATCH_SIZE = \"OTEL_BSP_MAX_EXPORT_BATCH\";\n-      private static final String KEY_EXPORT_TIMEOUT_MILLIS = \"OTEL_BSP_EXPORT_TIMEOUT\";\n-      private static final String KEY_SAMPLED = \"OTEL_BSP_REPORT_SAMPLED\";\n+    @AutoValue.Builder\n+    public abstract static class Builder {\n+\n+      private static final String KEY_SCHEDULE_DELAY_MILLIS = \"otel.bsp.schedule.delay\";\n+      private static final String KEY_MAX_QUEUE_SIZE = \"otel.bsp.max.queue\";\n+      private static final String KEY_MAX_EXPORT_BATCH_SIZE = \"otel.bsp.max.export.batch\";\n+      private static final String KEY_EXPORT_TIMEOUT_MILLIS = \"otel.bsp.export.timeout\";\n+      private static final String KEY_SAMPLED = \"otel.bsp.export.sampled\";\n+\n+      @VisibleForTesting\n+      protected enum NamingConvention {\n+        DOT {\n+          @Override\n+          public String normalize(@Nonnull String key) {\n+            return key.toLowerCase();\n+          }\n+        },\n+        ENV_VAR {\n+          @Override\n+          public String normalize(@Nonnull String key) {\n+            return key.toLowerCase().replace(\"_\", \".\");\n+          }\n+        };\n \n-      private static final long SCHEDULE_DELAY_MILLIS = 5000;\n-      private static final int MAX_QUEUE_SIZE = 2048;\n-      private static final int MAX_EXPORT_BATCH_SIZE = 512;\n-      private static final int EXPORT_TIMEOUT_MILLIS = 30_000;\n-      private static final boolean REPORT_ONLY_SAMPLED = true;\n+        public abstract String normalize(@Nonnull String key);\n \n-      private long scheduleDelayMillis = SCHEDULE_DELAY_MILLIS;\n-      private int maxQueueSize = MAX_QUEUE_SIZE;\n-      private int maxExportBatchSize = MAX_EXPORT_BATCH_SIZE;\n-      private int exporterTimeoutMillis = EXPORT_TIMEOUT_MILLIS;\n-      private boolean sampled = REPORT_ONLY_SAMPLED;\n+        public Map<String, String> normalize(@Nonnull Map<String, String> map) {\n+          Map<String, String> properties = new HashMap<>();\n+          for (Map.Entry<String, String> entry : map.entrySet()) {\n+            properties.put(normalize(entry.getKey()), entry.getValue());\n+          }\n+          return Collections.unmodifiableMap(properties);\n+        }\n+      }\n \n       /**\n-       * Sets the configuration values from the given configuration map.\n+       * Sets the configuration values from the given configuration map for only the available keys.\n+       * This method looks for the following keys:\n+       *\n+       * <ul>\n+       *   <li>{@code otel.bsp.schedule.delay}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code otel.bsp.max.queue}: to set the maximum queue size.\n+       *   <li>{@code otel.bsp.max.export.batch}: to set the maximum batch size.\n+       *   <li>{@code otel.bsp.export.timeout}: to set the maximum allowed time to export data.\n+       *   <li>{@code otel.bsp.export.sampled}: to set whether only sampled spans should be\n+       *       exported.\n+       * </ul>\n        *\n        * @param configMap {@link Map} holding the configuration values.\n        * @return this.\n        */\n-      @Override\n-      public Builder fromConfigMap(Map<String, String> configMap) {\n-        this.setScheduleDelayMillis(\n-            getProperty(KEY_SCHEDULE_DELAY_MILLIS, configMap, SCHEDULE_DELAY_MILLIS));\n-        this.setMaxQueueSize(getProperty(KEY_MAX_QUEUE_SIZE, configMap, MAX_QUEUE_SIZE));\n-        this.setMaxExportBatchSize(\n-            getProperty(KEY_MAX_EXPORT_BATCH_SIZE, configMap, MAX_EXPORT_BATCH_SIZE));\n-        this.setExporterTimeoutMillis(\n-            getProperty(KEY_EXPORT_TIMEOUT_MILLIS, configMap, EXPORT_TIMEOUT_MILLIS));\n-        this.reportOnlySampled(getProperty(KEY_SAMPLED, configMap, REPORT_ONLY_SAMPLED));\n+      @VisibleForTesting\n+      Builder fromConfigMap(Map<String, String> configMap, NamingConvention namingConvention) {\n+        configMap = namingConvention.normalize(configMap);\n+        Long longValue = getLongProperty(KEY_SCHEDULE_DELAY_MILLIS, configMap);\n+        if (longValue != null) {\n+          this.setScheduleDelayMillis(longValue);\n+        }\n+        Integer intValue = getIntProperty(KEY_MAX_QUEUE_SIZE, configMap);\n+        if (intValue != null) {\n+          this.setMaxQueueSize(intValue);\n+        }\n+        intValue = getIntProperty(KEY_MAX_EXPORT_BATCH_SIZE, configMap);\n+        if (intValue != null) {\n+          this.setMaxExportBatchSize(intValue);\n+        }\n+        intValue = getIntProperty(KEY_EXPORT_TIMEOUT_MILLIS, configMap);\n+        if (intValue != null) {\n+          this.setExporterTimeoutMillis(intValue);\n+        }\n+        Boolean boolValue = getBooleanProperty(KEY_SAMPLED, configMap);\n+        if (boolValue != null) {\n+          this.setExportOnlySampled(boolValue);\n+        }\n         return this;\n       }\n \n       /**\n-       * Sets the configuration values from environment variables.\n+       * Sets the configuration values from the given properties object for only the available keys.\n+       * This method looks for the following keys:\n        *\n+       * <ul>\n+       *   <li>{@code otel.bsp.schedule.delay}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code otel.bsp.max.queue}: to set the maximum queue size.\n+       *   <li>{@code otel.bsp.max.export.batch}: to set the maximum batch size.\n+       *   <li>{@code otel.bsp.export.timeout}: to set the maximum allowed time to export data.\n+       *   <li>{@code otel.bsp.export.sampled}: to set whether only sampled spans should be\n+       *       exported.\n+       * </ul>\n+       *\n+       * @param properties {@link Properties} holding the configuration values.\n        * @return this.\n        */\n-      @Override\n-      public Builder fromEnv() {\n-        return fromConfigMap(System.getenv());\n+      public Builder readProperties(Properties properties) {\n+        return fromConfigMap(Maps.fromProperties(properties), NamingConvention.DOT);\n       }\n \n       /**\n-       * Set whether only sampled spans should be reported.\n+       * Sets the configuration values from environment variables for only the available keys. This\n+       * method looks for the following keys:\n+       *\n+       * <ul>\n+       *   <li>{@code OTEL_BSP_SCHEDULE_DELAY}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code OTEL_BSP_MAX_QUEUE}: to set the maximum queue size.\n+       *   <li>{@code OTEL_BSP_MAX_EXPORT_BATCH}: to set the maximum batch size.\n+       *   <li>{@code OTEL_BSP_EXPORT_TIMEOUT}: to set the maximum allowed time to export data.\n+       *   <li>{@code OTEL_BSP_EXPORT_SAMPLED}: to set whether only sampled spans should be\n+       *       exported.\n+       * </ul>\n        *\n-       * @param sampled report only sampled spans.\n        * @return this.\n        */\n-      public Builder reportOnlySampled(boolean sampled) {\n-        this.sampled = sampled;\n-        return this;\n+      public Builder readEnvironment() {\n+        return fromConfigMap(System.getenv(), NamingConvention.ENV_VAR);\n+      }\n+\n+      /**\n+       * Sets the configuration values from system properties for only the available keys. This\n+       * method looks for the following keys:\n+       *\n+       * <ul>\n+       *   <li>{@code otel.bsp.schedule.delay}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code otel.bsp.max.queue}: to set the maximum queue size.\n+       *   <li>{@code otel.bsp.max.export.batch}: to set the maximum batch size.\n+       *   <li>{@code otel.bsp.export.timeout}: to set the maximum allowed time to export data.\n+       *   <li>{@code otel.bsp.export.sampled}: to set whether only sampled spans should be\n+       *       reported.\n+       * </ul>\n+       *\n+       * @return this.\n+       */\n+      public Builder readSystemProperties() {\n+        return readProperties(System.getProperties());\n       }\n \n+      /**\n+       * Set whether only sampled spans should be exported.\n+       *\n+       * <p>Default value is {@code true}.\n+       *\n+       * @see BatchSpansProcessor.Config#DEFAULT_EXPORT_ONLY_SAMPLED\n+       * @param sampled report only sampled spans.\n+       * @return this.\n+       */\n+      public abstract Builder setExportOnlySampled(boolean sampled);\n+\n       /**\n        * Sets the delay interval between two consecutive exports. The actual interval may be shorter\n        * if the batch size is getting larger than {@code maxQueuedSpans / 2}.\n        *\n        * <p>Default value is {@code 5000}ms.\n        *\n+       * @see BatchSpansProcessor.Config#DEFAULT_SCHEDULE_DELAY_MILLIS\n        * @param scheduleDelayMillis the delay interval between two consecutive exports.\n        * @return this.\n        */\n-      public Builder setScheduleDelayMillis(long scheduleDelayMillis) {\n-        Utils.checkArgument(\n-            scheduleDelayMillis >= 0, \"scheduleDelayMillis must greater than or equal 0.\");\n-        this.scheduleDelayMillis = scheduleDelayMillis;\n-        return this;\n-      }\n+      public abstract Builder setScheduleDelayMillis(long scheduleDelayMillis);\n \n       /**\n        * Sets the maximum time an exporter will be allowed to run before being cancelled.\n        *\n        * <p>Default value is {@code 30000}ms\n        *\n+       * @see BatchSpansProcessor.Config#DEFAULT_EXPORT_TIMEOUT_MILLIS\n        * @param exporterTimeoutMillis the timeout for exports in milliseconds.\n        * @return this\n        */\n-      public Builder setExporterTimeoutMillis(int exporterTimeoutMillis) {\n-        Utils.checkArgument(\n-            exporterTimeoutMillis >= 0, \"exporterTimeoutMillis must greater than or equal 0.\");\n-        this.exporterTimeoutMillis = exporterTimeoutMillis;\n-        return this;\n-      }\n+      public abstract Builder setExporterTimeoutMillis(int exporterTimeoutMillis);\n \n       /**\n        * Sets the maximum number of Spans that are kept in the queue before start dropping.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM1ODMzMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r408358331", "bodyText": "So I feel like this could be re-used by other configuration logic. But of course, lets do that in a follow-up PR ;)", "author": "carlosalberto", "createdAt": "2020-04-14T18:47:21Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -411,4 +324,277 @@ public void run() {\n       }\n     }\n   }\n+\n+  @Immutable\n+  @AutoValue\n+  public abstract static class Config {\n+\n+    public abstract boolean isReportOnlySampled();\n+\n+    public abstract long getScheduleDelayMillis();\n+\n+    public abstract int getMaxQueueSize();\n+\n+    public abstract int getMaxExportBatchSize();\n+\n+    public abstract int getExporterTimeoutMillis();\n+\n+    public static Config getDefault() {\n+      return new Builder().build();\n+    }\n+\n+    /**\n+     * Creates a {@link Config} object reading the configuration values first from the environment\n+     * and then from system properties. If a configuration value is missing, it uses the default\n+     * value.\n+     *\n+     * @return The {@link Config} object.\n+     */\n+    public static Config loadFromDefaultSources() {\n+      return new Builder().readEnv().readSystemProperties().build();\n+    }\n+\n+    public static Builder newBuilder() {\n+      return new Builder();\n+    }\n+\n+    public static final class Builder {\n+\n+      private static final String KEY_SCHEDULE_DELAY_MILLIS = \"otel.bsp.schedule.delay\";\n+      private static final String KEY_MAX_QUEUE_SIZE = \"otel.bsp.max.queue\";\n+      private static final String KEY_MAX_EXPORT_BATCH_SIZE = \"otel.bsp.max.export.batch\";\n+      private static final String KEY_EXPORT_TIMEOUT_MILLIS = \"otel.bsp.export.timeout\";\n+      private static final String KEY_SAMPLED = \"otel.bsp.report.sampled\";\n+\n+      private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+      private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+      private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+      private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+      private static final boolean DEFAULT_REPORT_ONLY_SAMPLED = true;\n+\n+      private long scheduleDelayMillis = DEFAULT_SCHEDULE_DELAY_MILLIS;\n+      private int maxQueueSize = DEFAULT_MAX_QUEUE_SIZE;\n+      private int maxExportBatchSize = DEFAULT_MAX_EXPORT_BATCH_SIZE;\n+      private int exporterTimeoutMillis = DEFAULT_EXPORT_TIMEOUT_MILLIS;\n+      private boolean sampled = DEFAULT_REPORT_ONLY_SAMPLED;\n+\n+      enum NamingConvention {", "originalCommit": "3677cea9c4e1663924f2bc74f68d1d5cbb8eb22b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc02ade502a55a23264b30456fe4d08b557b69ea", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\nindex 5bfaf0053..506367894 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n\n@@ -329,7 +332,13 @@ public final class BatchSpansProcessor implements SpanProcessor {\n   @AutoValue\n   public abstract static class Config {\n \n-    public abstract boolean isReportOnlySampled();\n+    private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+    private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+    private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+    private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+    private static final boolean DEFAULT_EXPORT_ONLY_SAMPLED = true;\n+\n+    public abstract boolean isExportOnlySampled();\n \n     public abstract long getScheduleDelayMillis();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYxODYzNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r409618634", "bodyText": "I feel that for env we want all uppercase?", "author": "bogdandrutu", "createdAt": "2020-04-16T14:49:51Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -411,4 +324,277 @@ public void run() {\n       }\n     }\n   }\n+\n+  @Immutable\n+  @AutoValue\n+  public abstract static class Config {\n+\n+    public abstract boolean isReportOnlySampled();\n+\n+    public abstract long getScheduleDelayMillis();\n+\n+    public abstract int getMaxQueueSize();\n+\n+    public abstract int getMaxExportBatchSize();\n+\n+    public abstract int getExporterTimeoutMillis();\n+\n+    public static Config getDefault() {\n+      return new Builder().build();\n+    }\n+\n+    /**\n+     * Creates a {@link Config} object reading the configuration values first from the environment\n+     * and then from system properties. If a configuration value is missing, it uses the default\n+     * value.\n+     *\n+     * @return The {@link Config} object.\n+     */\n+    public static Config loadFromDefaultSources() {\n+      return new Builder().readEnv().readSystemProperties().build();\n+    }\n+\n+    public static Builder newBuilder() {\n+      return new Builder();\n+    }\n+\n+    public static final class Builder {\n+\n+      private static final String KEY_SCHEDULE_DELAY_MILLIS = \"otel.bsp.schedule.delay\";\n+      private static final String KEY_MAX_QUEUE_SIZE = \"otel.bsp.max.queue\";\n+      private static final String KEY_MAX_EXPORT_BATCH_SIZE = \"otel.bsp.max.export.batch\";\n+      private static final String KEY_EXPORT_TIMEOUT_MILLIS = \"otel.bsp.export.timeout\";\n+      private static final String KEY_SAMPLED = \"otel.bsp.report.sampled\";\n+\n+      private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+      private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+      private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+      private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+      private static final boolean DEFAULT_REPORT_ONLY_SAMPLED = true;\n+\n+      private long scheduleDelayMillis = DEFAULT_SCHEDULE_DELAY_MILLIS;\n+      private int maxQueueSize = DEFAULT_MAX_QUEUE_SIZE;\n+      private int maxExportBatchSize = DEFAULT_MAX_EXPORT_BATCH_SIZE;\n+      private int exporterTimeoutMillis = DEFAULT_EXPORT_TIMEOUT_MILLIS;\n+      private boolean sampled = DEFAULT_REPORT_ONLY_SAMPLED;\n+\n+      enum NamingConvention {\n+        DOT {\n+          @Override\n+          protected char getSeparator() {\n+            return '.';\n+          }\n+\n+          @Nonnull\n+          @Override\n+          public String normalize(@Nonnull String key) {\n+            return key.toLowerCase();\n+          }\n+        },\n+        ENV_VAR {", "originalCommit": "3677cea9c4e1663924f2bc74f68d1d5cbb8eb22b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgzNDI0Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r409834247", "bodyText": "was just going to say the same. we should normalize the env vars to uppercase.", "author": "jkwatson", "createdAt": "2020-04-16T20:38:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYxODYzNA=="}], "type": "inlineReview", "revised_code": {"commit": "fc02ade502a55a23264b30456fe4d08b557b69ea", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\nindex 5bfaf0053..506367894 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n\n@@ -329,7 +332,13 @@ public final class BatchSpansProcessor implements SpanProcessor {\n   @AutoValue\n   public abstract static class Config {\n \n-    public abstract boolean isReportOnlySampled();\n+    private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+    private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+    private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+    private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+    private static final boolean DEFAULT_EXPORT_ONLY_SAMPLED = true;\n+\n+    public abstract boolean isExportOnlySampled();\n \n     public abstract long getScheduleDelayMillis();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYyMTQyNw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r409621427", "bodyText": "For the moment this can be moved to ENV and make it abstract here.", "author": "bogdandrutu", "createdAt": "2020-04-16T14:53:14Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -411,4 +324,277 @@ public void run() {\n       }\n     }\n   }\n+\n+  @Immutable\n+  @AutoValue\n+  public abstract static class Config {\n+\n+    public abstract boolean isReportOnlySampled();\n+\n+    public abstract long getScheduleDelayMillis();\n+\n+    public abstract int getMaxQueueSize();\n+\n+    public abstract int getMaxExportBatchSize();\n+\n+    public abstract int getExporterTimeoutMillis();\n+\n+    public static Config getDefault() {\n+      return new Builder().build();\n+    }\n+\n+    /**\n+     * Creates a {@link Config} object reading the configuration values first from the environment\n+     * and then from system properties. If a configuration value is missing, it uses the default\n+     * value.\n+     *\n+     * @return The {@link Config} object.\n+     */\n+    public static Config loadFromDefaultSources() {\n+      return new Builder().readEnv().readSystemProperties().build();\n+    }\n+\n+    public static Builder newBuilder() {\n+      return new Builder();\n+    }\n+\n+    public static final class Builder {\n+\n+      private static final String KEY_SCHEDULE_DELAY_MILLIS = \"otel.bsp.schedule.delay\";\n+      private static final String KEY_MAX_QUEUE_SIZE = \"otel.bsp.max.queue\";\n+      private static final String KEY_MAX_EXPORT_BATCH_SIZE = \"otel.bsp.max.export.batch\";\n+      private static final String KEY_EXPORT_TIMEOUT_MILLIS = \"otel.bsp.export.timeout\";\n+      private static final String KEY_SAMPLED = \"otel.bsp.report.sampled\";\n+\n+      private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+      private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+      private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+      private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+      private static final boolean DEFAULT_REPORT_ONLY_SAMPLED = true;\n+\n+      private long scheduleDelayMillis = DEFAULT_SCHEDULE_DELAY_MILLIS;\n+      private int maxQueueSize = DEFAULT_MAX_QUEUE_SIZE;\n+      private int maxExportBatchSize = DEFAULT_MAX_EXPORT_BATCH_SIZE;\n+      private int exporterTimeoutMillis = DEFAULT_EXPORT_TIMEOUT_MILLIS;\n+      private boolean sampled = DEFAULT_REPORT_ONLY_SAMPLED;\n+\n+      enum NamingConvention {\n+        DOT {\n+          @Override\n+          protected char getSeparator() {\n+            return '.';\n+          }\n+\n+          @Nonnull\n+          @Override\n+          public String normalize(@Nonnull String key) {\n+            return key.toLowerCase();\n+          }\n+        },\n+        ENV_VAR {\n+          @Override\n+          protected char getSeparator() {\n+            return '_';\n+          }\n+        };\n+\n+        @Nonnull\n+        public String normalize(@Nonnull String key) {\n+          return key.toLowerCase().replace(getSeparator(), DOT.getSeparator());\n+        }", "originalCommit": "3677cea9c4e1663924f2bc74f68d1d5cbb8eb22b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc02ade502a55a23264b30456fe4d08b557b69ea", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\nindex 5bfaf0053..506367894 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n\n@@ -329,7 +332,13 @@ public final class BatchSpansProcessor implements SpanProcessor {\n   @AutoValue\n   public abstract static class Config {\n \n-    public abstract boolean isReportOnlySampled();\n+    private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+    private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+    private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+    private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+    private static final boolean DEFAULT_EXPORT_ONLY_SAMPLED = true;\n+\n+    public abstract boolean isExportOnlySampled();\n \n     public abstract long getScheduleDelayMillis();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYyMjExOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r409622118", "bodyText": "If you do what I suggested this can be removed and becomes internal detail for every enum type.", "author": "bogdandrutu", "createdAt": "2020-04-16T14:53:59Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -411,4 +324,277 @@ public void run() {\n       }\n     }\n   }\n+\n+  @Immutable\n+  @AutoValue\n+  public abstract static class Config {\n+\n+    public abstract boolean isReportOnlySampled();\n+\n+    public abstract long getScheduleDelayMillis();\n+\n+    public abstract int getMaxQueueSize();\n+\n+    public abstract int getMaxExportBatchSize();\n+\n+    public abstract int getExporterTimeoutMillis();\n+\n+    public static Config getDefault() {\n+      return new Builder().build();\n+    }\n+\n+    /**\n+     * Creates a {@link Config} object reading the configuration values first from the environment\n+     * and then from system properties. If a configuration value is missing, it uses the default\n+     * value.\n+     *\n+     * @return The {@link Config} object.\n+     */\n+    public static Config loadFromDefaultSources() {\n+      return new Builder().readEnv().readSystemProperties().build();\n+    }\n+\n+    public static Builder newBuilder() {\n+      return new Builder();\n+    }\n+\n+    public static final class Builder {\n+\n+      private static final String KEY_SCHEDULE_DELAY_MILLIS = \"otel.bsp.schedule.delay\";\n+      private static final String KEY_MAX_QUEUE_SIZE = \"otel.bsp.max.queue\";\n+      private static final String KEY_MAX_EXPORT_BATCH_SIZE = \"otel.bsp.max.export.batch\";\n+      private static final String KEY_EXPORT_TIMEOUT_MILLIS = \"otel.bsp.export.timeout\";\n+      private static final String KEY_SAMPLED = \"otel.bsp.report.sampled\";\n+\n+      private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+      private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+      private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+      private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+      private static final boolean DEFAULT_REPORT_ONLY_SAMPLED = true;\n+\n+      private long scheduleDelayMillis = DEFAULT_SCHEDULE_DELAY_MILLIS;\n+      private int maxQueueSize = DEFAULT_MAX_QUEUE_SIZE;\n+      private int maxExportBatchSize = DEFAULT_MAX_EXPORT_BATCH_SIZE;\n+      private int exporterTimeoutMillis = DEFAULT_EXPORT_TIMEOUT_MILLIS;\n+      private boolean sampled = DEFAULT_REPORT_ONLY_SAMPLED;\n+\n+      enum NamingConvention {\n+        DOT {\n+          @Override\n+          protected char getSeparator() {\n+            return '.';\n+          }\n+\n+          @Nonnull\n+          @Override\n+          public String normalize(@Nonnull String key) {\n+            return key.toLowerCase();\n+          }\n+        },\n+        ENV_VAR {\n+          @Override\n+          protected char getSeparator() {\n+            return '_';\n+          }\n+        };\n+\n+        @Nonnull\n+        public String normalize(@Nonnull String key) {\n+          return key.toLowerCase().replace(getSeparator(), DOT.getSeparator());\n+        }\n+\n+        public Map<String, String> normalize(@Nonnull Map<String, String> map) {\n+          Map<String, String> properties = new HashMap<>();\n+          for (String key : map.keySet()) {\n+            properties.put(normalize(key), map.get(key));\n+          }\n+          return Collections.unmodifiableMap(properties);\n+        }\n+\n+        protected abstract char getSeparator();", "originalCommit": "3677cea9c4e1663924f2bc74f68d1d5cbb8eb22b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc02ade502a55a23264b30456fe4d08b557b69ea", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\nindex 5bfaf0053..506367894 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n\n@@ -329,7 +332,13 @@ public final class BatchSpansProcessor implements SpanProcessor {\n   @AutoValue\n   public abstract static class Config {\n \n-    public abstract boolean isReportOnlySampled();\n+    private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+    private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+    private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+    private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+    private static final boolean DEFAULT_EXPORT_ONLY_SAMPLED = true;\n+\n+    public abstract boolean isExportOnlySampled();\n \n     public abstract long getScheduleDelayMillis();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYyNjExNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r409626116", "bodyText": "Can you specify that it sets only the values that are present, otherwise leaves the value untouched?", "author": "bogdandrutu", "createdAt": "2020-04-16T14:58:56Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -411,4 +324,277 @@ public void run() {\n       }\n     }\n   }\n+\n+  @Immutable\n+  @AutoValue\n+  public abstract static class Config {\n+\n+    public abstract boolean isReportOnlySampled();\n+\n+    public abstract long getScheduleDelayMillis();\n+\n+    public abstract int getMaxQueueSize();\n+\n+    public abstract int getMaxExportBatchSize();\n+\n+    public abstract int getExporterTimeoutMillis();\n+\n+    public static Config getDefault() {\n+      return new Builder().build();\n+    }\n+\n+    /**\n+     * Creates a {@link Config} object reading the configuration values first from the environment\n+     * and then from system properties. If a configuration value is missing, it uses the default\n+     * value.\n+     *\n+     * @return The {@link Config} object.\n+     */\n+    public static Config loadFromDefaultSources() {\n+      return new Builder().readEnv().readSystemProperties().build();\n+    }\n+\n+    public static Builder newBuilder() {\n+      return new Builder();\n+    }\n+\n+    public static final class Builder {\n+\n+      private static final String KEY_SCHEDULE_DELAY_MILLIS = \"otel.bsp.schedule.delay\";\n+      private static final String KEY_MAX_QUEUE_SIZE = \"otel.bsp.max.queue\";\n+      private static final String KEY_MAX_EXPORT_BATCH_SIZE = \"otel.bsp.max.export.batch\";\n+      private static final String KEY_EXPORT_TIMEOUT_MILLIS = \"otel.bsp.export.timeout\";\n+      private static final String KEY_SAMPLED = \"otel.bsp.report.sampled\";\n+\n+      private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+      private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+      private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+      private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+      private static final boolean DEFAULT_REPORT_ONLY_SAMPLED = true;\n+\n+      private long scheduleDelayMillis = DEFAULT_SCHEDULE_DELAY_MILLIS;\n+      private int maxQueueSize = DEFAULT_MAX_QUEUE_SIZE;\n+      private int maxExportBatchSize = DEFAULT_MAX_EXPORT_BATCH_SIZE;\n+      private int exporterTimeoutMillis = DEFAULT_EXPORT_TIMEOUT_MILLIS;\n+      private boolean sampled = DEFAULT_REPORT_ONLY_SAMPLED;\n+\n+      enum NamingConvention {\n+        DOT {\n+          @Override\n+          protected char getSeparator() {\n+            return '.';\n+          }\n+\n+          @Nonnull\n+          @Override\n+          public String normalize(@Nonnull String key) {\n+            return key.toLowerCase();\n+          }\n+        },\n+        ENV_VAR {\n+          @Override\n+          protected char getSeparator() {\n+            return '_';\n+          }\n+        };\n+\n+        @Nonnull\n+        public String normalize(@Nonnull String key) {\n+          return key.toLowerCase().replace(getSeparator(), DOT.getSeparator());\n+        }\n+\n+        public Map<String, String> normalize(@Nonnull Map<String, String> map) {\n+          Map<String, String> properties = new HashMap<>();\n+          for (String key : map.keySet()) {\n+            properties.put(normalize(key), map.get(key));\n+          }\n+          return Collections.unmodifiableMap(properties);\n+        }\n+\n+        protected abstract char getSeparator();\n+      }\n+\n+      /**\n+       * Sets the configuration values from the given configuration map. This method looks for the\n+       * following keys:\n+       *\n+       * <ul>\n+       *   <li>{@code otel.bsp.schedule.delay}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code otel.bsp.max.queue}: to set the maximum queue size.\n+       *   <li>{@code otel.bsp.max.export.batch}: to set the maximum batch size.\n+       *   <li>{@code otel.bsp.export.timeout}: to set the maximum allowed time to export data.\n+       *   <li>{@code otel.bsp.report.sampled}: to set whether only sampled spans should be\n+       *       reported.\n+       * </ul>\n+       *\n+       * @param configMap {@link Map} holding the configuration values.\n+       * @return this.\n+       */\n+      public Builder fromConfigMap(\n+          Map<String, String> configMap, NamingConvention namingConvention) {\n+        configMap = namingConvention.normalize(configMap);\n+        this.setScheduleDelayMillis(\n+            getProperty(KEY_SCHEDULE_DELAY_MILLIS, configMap, this.scheduleDelayMillis));\n+        this.setMaxQueueSize(\n+            getProperty(\n+                namingConvention.normalize(KEY_MAX_QUEUE_SIZE), configMap, this.maxQueueSize));\n+        this.setMaxExportBatchSize(\n+            getProperty(KEY_MAX_EXPORT_BATCH_SIZE, configMap, this.maxExportBatchSize));\n+        this.setExporterTimeoutMillis(\n+            getProperty(KEY_EXPORT_TIMEOUT_MILLIS, configMap, this.exporterTimeoutMillis));\n+        this.reportOnlySampled(getProperty(KEY_SAMPLED, configMap, this.sampled));\n+        return this;\n+      }\n+\n+      /**\n+       * Sets the configuration values from environment variables. This method looks for the\n+       * following keys:", "originalCommit": "3677cea9c4e1663924f2bc74f68d1d5cbb8eb22b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc02ade502a55a23264b30456fe4d08b557b69ea", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\nindex 5bfaf0053..506367894 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n\n@@ -329,7 +332,13 @@ public final class BatchSpansProcessor implements SpanProcessor {\n   @AutoValue\n   public abstract static class Config {\n \n-    public abstract boolean isReportOnlySampled();\n+    private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+    private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+    private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+    private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+    private static final boolean DEFAULT_EXPORT_ONLY_SAMPLED = true;\n+\n+    public abstract boolean isExportOnlySampled();\n \n     public abstract long getScheduleDelayMillis();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYyODY1MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r409628650", "bodyText": "Iterate over entries not keyset if you need access to the values as well.", "author": "bogdandrutu", "createdAt": "2020-04-16T15:02:11Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -411,4 +324,277 @@ public void run() {\n       }\n     }\n   }\n+\n+  @Immutable\n+  @AutoValue\n+  public abstract static class Config {\n+\n+    public abstract boolean isReportOnlySampled();\n+\n+    public abstract long getScheduleDelayMillis();\n+\n+    public abstract int getMaxQueueSize();\n+\n+    public abstract int getMaxExportBatchSize();\n+\n+    public abstract int getExporterTimeoutMillis();\n+\n+    public static Config getDefault() {\n+      return new Builder().build();\n+    }\n+\n+    /**\n+     * Creates a {@link Config} object reading the configuration values first from the environment\n+     * and then from system properties. If a configuration value is missing, it uses the default\n+     * value.\n+     *\n+     * @return The {@link Config} object.\n+     */\n+    public static Config loadFromDefaultSources() {\n+      return new Builder().readEnv().readSystemProperties().build();\n+    }\n+\n+    public static Builder newBuilder() {\n+      return new Builder();\n+    }\n+\n+    public static final class Builder {\n+\n+      private static final String KEY_SCHEDULE_DELAY_MILLIS = \"otel.bsp.schedule.delay\";\n+      private static final String KEY_MAX_QUEUE_SIZE = \"otel.bsp.max.queue\";\n+      private static final String KEY_MAX_EXPORT_BATCH_SIZE = \"otel.bsp.max.export.batch\";\n+      private static final String KEY_EXPORT_TIMEOUT_MILLIS = \"otel.bsp.export.timeout\";\n+      private static final String KEY_SAMPLED = \"otel.bsp.report.sampled\";\n+\n+      private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+      private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+      private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+      private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+      private static final boolean DEFAULT_REPORT_ONLY_SAMPLED = true;\n+\n+      private long scheduleDelayMillis = DEFAULT_SCHEDULE_DELAY_MILLIS;\n+      private int maxQueueSize = DEFAULT_MAX_QUEUE_SIZE;\n+      private int maxExportBatchSize = DEFAULT_MAX_EXPORT_BATCH_SIZE;\n+      private int exporterTimeoutMillis = DEFAULT_EXPORT_TIMEOUT_MILLIS;\n+      private boolean sampled = DEFAULT_REPORT_ONLY_SAMPLED;\n+\n+      enum NamingConvention {\n+        DOT {\n+          @Override\n+          protected char getSeparator() {\n+            return '.';\n+          }\n+\n+          @Nonnull\n+          @Override\n+          public String normalize(@Nonnull String key) {\n+            return key.toLowerCase();\n+          }\n+        },\n+        ENV_VAR {\n+          @Override\n+          protected char getSeparator() {\n+            return '_';\n+          }\n+        };\n+\n+        @Nonnull\n+        public String normalize(@Nonnull String key) {\n+          return key.toLowerCase().replace(getSeparator(), DOT.getSeparator());\n+        }\n+\n+        public Map<String, String> normalize(@Nonnull Map<String, String> map) {\n+          Map<String, String> properties = new HashMap<>();\n+          for (String key : map.keySet()) {\n+            properties.put(normalize(key), map.get(key));\n+          }", "originalCommit": "3677cea9c4e1663924f2bc74f68d1d5cbb8eb22b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc02ade502a55a23264b30456fe4d08b557b69ea", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\nindex 5bfaf0053..506367894 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n\n@@ -329,7 +332,13 @@ public final class BatchSpansProcessor implements SpanProcessor {\n   @AutoValue\n   public abstract static class Config {\n \n-    public abstract boolean isReportOnlySampled();\n+    private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+    private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+    private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+    private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+    private static final boolean DEFAULT_EXPORT_ONLY_SAMPLED = true;\n+\n+    public abstract boolean isExportOnlySampled();\n \n     public abstract long getScheduleDelayMillis();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYyODgwMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r409628800", "bodyText": "Do we need to have this public?", "author": "bogdandrutu", "createdAt": "2020-04-16T15:02:22Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -411,4 +324,277 @@ public void run() {\n       }\n     }\n   }\n+\n+  @Immutable\n+  @AutoValue\n+  public abstract static class Config {\n+\n+    public abstract boolean isReportOnlySampled();\n+\n+    public abstract long getScheduleDelayMillis();\n+\n+    public abstract int getMaxQueueSize();\n+\n+    public abstract int getMaxExportBatchSize();\n+\n+    public abstract int getExporterTimeoutMillis();\n+\n+    public static Config getDefault() {\n+      return new Builder().build();\n+    }\n+\n+    /**\n+     * Creates a {@link Config} object reading the configuration values first from the environment\n+     * and then from system properties. If a configuration value is missing, it uses the default\n+     * value.\n+     *\n+     * @return The {@link Config} object.\n+     */\n+    public static Config loadFromDefaultSources() {\n+      return new Builder().readEnv().readSystemProperties().build();\n+    }\n+\n+    public static Builder newBuilder() {\n+      return new Builder();\n+    }\n+\n+    public static final class Builder {\n+\n+      private static final String KEY_SCHEDULE_DELAY_MILLIS = \"otel.bsp.schedule.delay\";\n+      private static final String KEY_MAX_QUEUE_SIZE = \"otel.bsp.max.queue\";\n+      private static final String KEY_MAX_EXPORT_BATCH_SIZE = \"otel.bsp.max.export.batch\";\n+      private static final String KEY_EXPORT_TIMEOUT_MILLIS = \"otel.bsp.export.timeout\";\n+      private static final String KEY_SAMPLED = \"otel.bsp.report.sampled\";\n+\n+      private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+      private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+      private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+      private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+      private static final boolean DEFAULT_REPORT_ONLY_SAMPLED = true;\n+\n+      private long scheduleDelayMillis = DEFAULT_SCHEDULE_DELAY_MILLIS;\n+      private int maxQueueSize = DEFAULT_MAX_QUEUE_SIZE;\n+      private int maxExportBatchSize = DEFAULT_MAX_EXPORT_BATCH_SIZE;\n+      private int exporterTimeoutMillis = DEFAULT_EXPORT_TIMEOUT_MILLIS;\n+      private boolean sampled = DEFAULT_REPORT_ONLY_SAMPLED;\n+\n+      enum NamingConvention {\n+        DOT {\n+          @Override\n+          protected char getSeparator() {\n+            return '.';\n+          }\n+\n+          @Nonnull\n+          @Override\n+          public String normalize(@Nonnull String key) {\n+            return key.toLowerCase();\n+          }\n+        },\n+        ENV_VAR {\n+          @Override\n+          protected char getSeparator() {\n+            return '_';\n+          }\n+        };\n+\n+        @Nonnull\n+        public String normalize(@Nonnull String key) {\n+          return key.toLowerCase().replace(getSeparator(), DOT.getSeparator());\n+        }\n+\n+        public Map<String, String> normalize(@Nonnull Map<String, String> map) {\n+          Map<String, String> properties = new HashMap<>();\n+          for (String key : map.keySet()) {\n+            properties.put(normalize(key), map.get(key));\n+          }\n+          return Collections.unmodifiableMap(properties);\n+        }\n+\n+        protected abstract char getSeparator();\n+      }\n+\n+      /**\n+       * Sets the configuration values from the given configuration map. This method looks for the\n+       * following keys:\n+       *\n+       * <ul>\n+       *   <li>{@code otel.bsp.schedule.delay}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code otel.bsp.max.queue}: to set the maximum queue size.\n+       *   <li>{@code otel.bsp.max.export.batch}: to set the maximum batch size.\n+       *   <li>{@code otel.bsp.export.timeout}: to set the maximum allowed time to export data.\n+       *   <li>{@code otel.bsp.report.sampled}: to set whether only sampled spans should be\n+       *       reported.\n+       * </ul>\n+       *\n+       * @param configMap {@link Map} holding the configuration values.\n+       * @return this.\n+       */\n+      public Builder fromConfigMap(", "originalCommit": "3677cea9c4e1663924f2bc74f68d1d5cbb8eb22b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg2OTg4Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r409869882", "bodyText": "If someone wanted to use this to build config from a parsed yaml/json/xml file, this would be a handy entry point.", "author": "jkwatson", "createdAt": "2020-04-16T21:52:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYyODgwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI1ODA2MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r410258061", "bodyText": "Not really, you cannot extend the enum, so it will support only DOT or ENV for the enum. Also I feel like we should not expose helpers just in case someone needs it (we will suffer maintaining this API). I would suggest to remove it.", "author": "bogdandrutu", "createdAt": "2020-04-17T14:24:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYyODgwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI2MTk1Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r410261957", "bodyText": "I left it public because I thought that the agent might load the json/xml/yaml file and use this API to set the configuration object.\nSo the agent will properly create the map with the ENV or DOT naming convention.", "author": "thisthat", "createdAt": "2020-04-17T14:30:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYyODgwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY2NzMzMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r410667330", "bodyText": "In the SIG call, we agreed on supporting Properties as an additional configuration medium. This method can be package visible only.", "author": "thisthat", "createdAt": "2020-04-18T08:23:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYyODgwMA=="}], "type": "inlineReview", "revised_code": {"commit": "fc02ade502a55a23264b30456fe4d08b557b69ea", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\nindex 5bfaf0053..506367894 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n\n@@ -329,7 +332,13 @@ public final class BatchSpansProcessor implements SpanProcessor {\n   @AutoValue\n   public abstract static class Config {\n \n-    public abstract boolean isReportOnlySampled();\n+    private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+    private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+    private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+    private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+    private static final boolean DEFAULT_EXPORT_ONLY_SAMPLED = true;\n+\n+    public abstract boolean isExportOnlySampled();\n \n     public abstract long getScheduleDelayMillis();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYzMDE2NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r409630165", "bodyText": "We can use auto-value for this as well to remove a lot of variables end ensure no bugs coming from copy-paste.", "author": "bogdandrutu", "createdAt": "2020-04-16T15:04:07Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -411,4 +324,277 @@ public void run() {\n       }\n     }\n   }\n+\n+  @Immutable\n+  @AutoValue\n+  public abstract static class Config {\n+\n+    public abstract boolean isReportOnlySampled();\n+\n+    public abstract long getScheduleDelayMillis();\n+\n+    public abstract int getMaxQueueSize();\n+\n+    public abstract int getMaxExportBatchSize();\n+\n+    public abstract int getExporterTimeoutMillis();\n+\n+    public static Config getDefault() {\n+      return new Builder().build();\n+    }\n+\n+    /**\n+     * Creates a {@link Config} object reading the configuration values first from the environment\n+     * and then from system properties. If a configuration value is missing, it uses the default\n+     * value.\n+     *\n+     * @return The {@link Config} object.\n+     */\n+    public static Config loadFromDefaultSources() {\n+      return new Builder().readEnv().readSystemProperties().build();\n+    }\n+\n+    public static Builder newBuilder() {\n+      return new Builder();\n+    }\n+\n+    public static final class Builder {", "originalCommit": "3677cea9c4e1663924f2bc74f68d1d5cbb8eb22b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc02ade502a55a23264b30456fe4d08b557b69ea", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\nindex 5bfaf0053..506367894 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n\n@@ -329,7 +332,13 @@ public final class BatchSpansProcessor implements SpanProcessor {\n   @AutoValue\n   public abstract static class Config {\n \n-    public abstract boolean isReportOnlySampled();\n+    private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+    private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+    private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+    private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+    private static final boolean DEFAULT_EXPORT_ONLY_SAMPLED = true;\n+\n+    public abstract boolean isExportOnlySampled();\n \n     public abstract long getScheduleDelayMillis();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgzNTQyOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r409835429", "bodyText": "This document should specify both the env vars, the system properties, and the defaults, I think.", "author": "jkwatson", "createdAt": "2020-04-16T20:41:17Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/package-info.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/**\n+ * Utilities that allows different tracing services to export recorded data for sampled spans in\n+ * their own format.\n+ *\n+ * <h2>Contents</h2>\n+ *\n+ * <ul>\n+ *   <li>{@link io.opentelemetry.sdk.trace.export.SpanExporter}\n+ *   <li>{@link io.opentelemetry.sdk.trace.export.SimpleSpansProcessor}\n+ *   <li>{@link io.opentelemetry.sdk.trace.export.BatchSpansProcessor}\n+ *   <li>{@link io.opentelemetry.sdk.trace.export.MultiSpanExporter}\n+ * </ul>\n+ *\n+ * <h2>Default values for {@link io.opentelemetry.sdk.trace.export.BatchSpansProcessor}</h2>", "originalCommit": "3677cea9c4e1663924f2bc74f68d1d5cbb8eb22b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc02ade502a55a23264b30456fe4d08b557b69ea", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/package-info.java b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/package-info.java\nindex 49fe31161..dfbd1a28e 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/package-info.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/package-info.java\n\n@@ -27,7 +27,7 @@\n  *   <li>{@link io.opentelemetry.sdk.trace.export.MultiSpanExporter}\n  * </ul>\n  *\n- * <h2>Default values for {@link io.opentelemetry.sdk.trace.export.BatchSpansProcessor}</h2>\n+ * <h2>Default values for {@link io.opentelemetry.sdk.trace.export.BatchSpansProcessor.Config}</h2>\n  *\n  * <ul>\n  *   <li>{@code SCHEDULE_DELAY_MILLIS: 5000}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg0MjU1MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r409842550", "bodyText": "this class is now over 600 lines long. I think it might be time to break out the Config and the Builder into their own files.", "author": "jkwatson", "createdAt": "2020-04-16T20:55:12Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -411,4 +324,277 @@ public void run() {\n       }\n     }\n   }\n+\n+  @Immutable\n+  @AutoValue\n+  public abstract static class Config {\n+\n+    public abstract boolean isReportOnlySampled();\n+\n+    public abstract long getScheduleDelayMillis();\n+\n+    public abstract int getMaxQueueSize();\n+\n+    public abstract int getMaxExportBatchSize();\n+\n+    public abstract int getExporterTimeoutMillis();\n+\n+    public static Config getDefault() {\n+      return new Builder().build();\n+    }\n+\n+    /**\n+     * Creates a {@link Config} object reading the configuration values first from the environment\n+     * and then from system properties. If a configuration value is missing, it uses the default\n+     * value.\n+     *\n+     * @return The {@link Config} object.\n+     */\n+    public static Config loadFromDefaultSources() {\n+      return new Builder().readEnv().readSystemProperties().build();\n+    }\n+\n+    public static Builder newBuilder() {\n+      return new Builder();\n+    }\n+\n+    public static final class Builder {\n+\n+      private static final String KEY_SCHEDULE_DELAY_MILLIS = \"otel.bsp.schedule.delay\";\n+      private static final String KEY_MAX_QUEUE_SIZE = \"otel.bsp.max.queue\";\n+      private static final String KEY_MAX_EXPORT_BATCH_SIZE = \"otel.bsp.max.export.batch\";\n+      private static final String KEY_EXPORT_TIMEOUT_MILLIS = \"otel.bsp.export.timeout\";\n+      private static final String KEY_SAMPLED = \"otel.bsp.report.sampled\";\n+\n+      private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+      private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+      private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+      private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+      private static final boolean DEFAULT_REPORT_ONLY_SAMPLED = true;\n+\n+      private long scheduleDelayMillis = DEFAULT_SCHEDULE_DELAY_MILLIS;\n+      private int maxQueueSize = DEFAULT_MAX_QUEUE_SIZE;\n+      private int maxExportBatchSize = DEFAULT_MAX_EXPORT_BATCH_SIZE;\n+      private int exporterTimeoutMillis = DEFAULT_EXPORT_TIMEOUT_MILLIS;\n+      private boolean sampled = DEFAULT_REPORT_ONLY_SAMPLED;\n+\n+      enum NamingConvention {\n+        DOT {\n+          @Override\n+          protected char getSeparator() {\n+            return '.';\n+          }\n+\n+          @Nonnull\n+          @Override\n+          public String normalize(@Nonnull String key) {\n+            return key.toLowerCase();\n+          }\n+        },\n+        ENV_VAR {\n+          @Override\n+          protected char getSeparator() {\n+            return '_';\n+          }\n+        };\n+\n+        @Nonnull\n+        public String normalize(@Nonnull String key) {\n+          return key.toLowerCase().replace(getSeparator(), DOT.getSeparator());\n+        }\n+\n+        public Map<String, String> normalize(@Nonnull Map<String, String> map) {\n+          Map<String, String> properties = new HashMap<>();\n+          for (String key : map.keySet()) {\n+            properties.put(normalize(key), map.get(key));\n+          }\n+          return Collections.unmodifiableMap(properties);\n+        }\n+\n+        protected abstract char getSeparator();\n+      }\n+\n+      /**\n+       * Sets the configuration values from the given configuration map. This method looks for the\n+       * following keys:\n+       *\n+       * <ul>\n+       *   <li>{@code otel.bsp.schedule.delay}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code otel.bsp.max.queue}: to set the maximum queue size.\n+       *   <li>{@code otel.bsp.max.export.batch}: to set the maximum batch size.\n+       *   <li>{@code otel.bsp.export.timeout}: to set the maximum allowed time to export data.\n+       *   <li>{@code otel.bsp.report.sampled}: to set whether only sampled spans should be\n+       *       reported.\n+       * </ul>\n+       *\n+       * @param configMap {@link Map} holding the configuration values.\n+       * @return this.\n+       */\n+      public Builder fromConfigMap(\n+          Map<String, String> configMap, NamingConvention namingConvention) {\n+        configMap = namingConvention.normalize(configMap);\n+        this.setScheduleDelayMillis(\n+            getProperty(KEY_SCHEDULE_DELAY_MILLIS, configMap, this.scheduleDelayMillis));\n+        this.setMaxQueueSize(\n+            getProperty(\n+                namingConvention.normalize(KEY_MAX_QUEUE_SIZE), configMap, this.maxQueueSize));\n+        this.setMaxExportBatchSize(\n+            getProperty(KEY_MAX_EXPORT_BATCH_SIZE, configMap, this.maxExportBatchSize));\n+        this.setExporterTimeoutMillis(\n+            getProperty(KEY_EXPORT_TIMEOUT_MILLIS, configMap, this.exporterTimeoutMillis));\n+        this.reportOnlySampled(getProperty(KEY_SAMPLED, configMap, this.sampled));\n+        return this;\n+      }\n+\n+      /**\n+       * Sets the configuration values from environment variables. This method looks for the\n+       * following keys:\n+       *\n+       * <ul>\n+       *   <li>{@code OTEL_BSP_SCHEDULE_DELAY}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code OTEL_BSP_MAX_QUEUE}: to set the maximum queue size.\n+       *   <li>{@code OTEL_BSP_MAX_EXPORT_BATCH}: to set the maximum batch size.\n+       *   <li>{@code OTEL_BSP_EXPORT_TIMEOUT}: to set the maximum allowed time to export data.\n+       *   <li>{@code OTEL_BSP_REPORT_SAMPLED}: to set whether only sampled spans should be\n+       *       reported.\n+       * </ul>\n+       *\n+       * @return this.\n+       */\n+      public Builder readEnv() {\n+        return fromConfigMap(System.getenv(), NamingConvention.ENV_VAR);\n+      }\n+\n+      /**\n+       * Sets the configuration values from system properties. This method looks for the following\n+       * keys:\n+       *\n+       * <ul>\n+       *   <li>{@code otel.bsp.schedule.delay}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code otel.bsp.max.queue}: to set the maximum queue size.\n+       *   <li>{@code otel.bsp.max.export.batch}: to set the maximum batch size.\n+       *   <li>{@code otel.bsp.export.timeout}: to set the maximum allowed time to export data.\n+       *   <li>{@code otel.bsp.report.sampled}: to set whether only sampled spans should be\n+       *       reported.\n+       * </ul>\n+       *\n+       * @return this.\n+       */\n+      public Builder readSystemProperties() {\n+        return fromConfigMap(Maps.fromProperties(System.getProperties()), NamingConvention.DOT);\n+      }\n+\n+      /**\n+       * Set whether only sampled spans should be reported.\n+       *\n+       * @param sampled report only sampled spans.\n+       * @return this.\n+       */\n+      public Builder reportOnlySampled(boolean sampled) {\n+        this.sampled = sampled;\n+        return this;\n+      }\n+\n+      /**\n+       * Sets the delay interval between two consecutive exports. The actual interval may be shorter\n+       * if the batch size is getting larger than {@code maxQueuedSpans / 2}.\n+       *\n+       * <p>Default value is {@code 5000}ms.\n+       *\n+       * @param scheduleDelayMillis the delay interval between two consecutive exports.\n+       * @return this.\n+       */\n+      public Builder setScheduleDelayMillis(long scheduleDelayMillis) {\n+        Utils.checkArgument(\n+            scheduleDelayMillis >= 0, \"scheduleDelayMillis must greater than or equal 0.\");\n+        this.scheduleDelayMillis = scheduleDelayMillis;\n+        return this;\n+      }\n+\n+      /**\n+       * Sets the maximum time an exporter will be allowed to run before being cancelled.\n+       *\n+       * <p>Default value is {@code 30000}ms\n+       *\n+       * @param exporterTimeoutMillis the timeout for exports in milliseconds.\n+       * @return this\n+       */\n+      public Builder setExporterTimeoutMillis(int exporterTimeoutMillis) {\n+        Utils.checkArgument(\n+            exporterTimeoutMillis >= 0, \"exporterTimeoutMillis must greater than or equal 0.\");\n+        this.exporterTimeoutMillis = exporterTimeoutMillis;\n+        return this;\n+      }\n+\n+      /**\n+       * Sets the maximum number of Spans that are kept in the queue before start dropping.\n+       *\n+       * <p>See the BatchSampledSpansProcessor class description for a high-level design description\n+       * of this class.\n+       *\n+       * <p>Default value is {@code 2048}.\n+       *\n+       * @param maxQueueSize the maximum number of Spans that are kept in the queue before start\n+       *     dropping.\n+       * @return this.\n+       */\n+      public Builder setMaxQueueSize(int maxQueueSize) {\n+        Utils.checkArgument(maxQueueSize > 0, \"maxQueueSize must be positive.\");\n+        this.maxQueueSize = maxQueueSize;\n+        return this;\n+      }\n+\n+      /**\n+       * Sets the maximum batch size for every export. This must be smaller or equal to {@code\n+       * maxQueuedSpans}.\n+       *\n+       * <p>Default value is {@code 512}.\n+       *\n+       * @param maxExportBatchSize the maximum batch size for every export.\n+       * @return this.\n+       */\n+      public Builder setMaxExportBatchSize(int maxExportBatchSize) {\n+        Utils.checkArgument(maxExportBatchSize > 0, \"maxExportBatchSize must be positive.\");\n+        this.maxExportBatchSize = maxExportBatchSize;\n+        return this;\n+      }\n+\n+      private static boolean getProperty(\n+          String name, Map<String, String> map, boolean defaultValue) {\n+        if (map.containsKey(name)) {\n+          return Boolean.parseBoolean(map.get(name));\n+        }\n+        return defaultValue;\n+      }\n+\n+      private static int getProperty(String name, Map<String, String> map, int defaultValue) {\n+        try {\n+          return Integer.parseInt(map.get(name));\n+        } catch (NumberFormatException ex) {\n+          return defaultValue;\n+        }\n+      }\n+\n+      private static long getProperty(String name, Map<String, String> map, long defaultValue) {\n+        try {\n+          return Long.parseLong(map.get(name));\n+        } catch (NumberFormatException ex) {\n+          return defaultValue;\n+        }\n+      }\n+\n+      /**\n+       * Builds the {@link Config} object.\n+       *\n+       * @return the {@link Config} object.\n+       */\n+      public Config build() {\n+        return new AutoValue_BatchSpansProcessor_Config(\n+            sampled, scheduleDelayMillis, maxQueueSize, maxExportBatchSize, exporterTimeoutMillis);\n+      }\n+    }\n+  }", "originalCommit": "3677cea9c4e1663924f2bc74f68d1d5cbb8eb22b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcwOTQ2OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r411709469", "bodyText": "not sure why you resolved this with no response, @thisthat", "author": "jkwatson", "createdAt": "2020-04-20T21:37:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg0MjU1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTg3Mzk3Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r411873972", "bodyText": "Sorry, I forgot to comment on the decision taken in the SIG call.\nRefactoring will be done in a separate PR when the configuration for other parts of OTel will be provided.", "author": "thisthat", "createdAt": "2020-04-21T05:11:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg0MjU1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI1MTQzMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r412251431", "bodyText": "ah, ok. I didn't know that that would be a part of that effort.  \ud83d\udc4d", "author": "jkwatson", "createdAt": "2020-04-21T14:47:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg0MjU1MA=="}], "type": "inlineReview", "revised_code": {"commit": "fc02ade502a55a23264b30456fe4d08b557b69ea", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\nindex 5bfaf0053..506367894 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n\n@@ -329,7 +332,13 @@ public final class BatchSpansProcessor implements SpanProcessor {\n   @AutoValue\n   public abstract static class Config {\n \n-    public abstract boolean isReportOnlySampled();\n+    private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+    private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+    private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+    private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+    private static final boolean DEFAULT_EXPORT_ONLY_SAMPLED = true;\n+\n+    public abstract boolean isExportOnlySampled();\n \n     public abstract long getScheduleDelayMillis();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg0MjkxMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r409842910", "bodyText": "I'd prefer these methods were named getLongProperty, getIntProperty, etc.", "author": "jkwatson", "createdAt": "2020-04-16T20:55:53Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -411,4 +324,277 @@ public void run() {\n       }\n     }\n   }\n+\n+  @Immutable\n+  @AutoValue\n+  public abstract static class Config {\n+\n+    public abstract boolean isReportOnlySampled();\n+\n+    public abstract long getScheduleDelayMillis();\n+\n+    public abstract int getMaxQueueSize();\n+\n+    public abstract int getMaxExportBatchSize();\n+\n+    public abstract int getExporterTimeoutMillis();\n+\n+    public static Config getDefault() {\n+      return new Builder().build();\n+    }\n+\n+    /**\n+     * Creates a {@link Config} object reading the configuration values first from the environment\n+     * and then from system properties. If a configuration value is missing, it uses the default\n+     * value.\n+     *\n+     * @return The {@link Config} object.\n+     */\n+    public static Config loadFromDefaultSources() {\n+      return new Builder().readEnv().readSystemProperties().build();\n+    }\n+\n+    public static Builder newBuilder() {\n+      return new Builder();\n+    }\n+\n+    public static final class Builder {\n+\n+      private static final String KEY_SCHEDULE_DELAY_MILLIS = \"otel.bsp.schedule.delay\";\n+      private static final String KEY_MAX_QUEUE_SIZE = \"otel.bsp.max.queue\";\n+      private static final String KEY_MAX_EXPORT_BATCH_SIZE = \"otel.bsp.max.export.batch\";\n+      private static final String KEY_EXPORT_TIMEOUT_MILLIS = \"otel.bsp.export.timeout\";\n+      private static final String KEY_SAMPLED = \"otel.bsp.report.sampled\";\n+\n+      private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+      private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+      private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+      private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+      private static final boolean DEFAULT_REPORT_ONLY_SAMPLED = true;\n+\n+      private long scheduleDelayMillis = DEFAULT_SCHEDULE_DELAY_MILLIS;\n+      private int maxQueueSize = DEFAULT_MAX_QUEUE_SIZE;\n+      private int maxExportBatchSize = DEFAULT_MAX_EXPORT_BATCH_SIZE;\n+      private int exporterTimeoutMillis = DEFAULT_EXPORT_TIMEOUT_MILLIS;\n+      private boolean sampled = DEFAULT_REPORT_ONLY_SAMPLED;\n+\n+      enum NamingConvention {\n+        DOT {\n+          @Override\n+          protected char getSeparator() {\n+            return '.';\n+          }\n+\n+          @Nonnull\n+          @Override\n+          public String normalize(@Nonnull String key) {\n+            return key.toLowerCase();\n+          }\n+        },\n+        ENV_VAR {\n+          @Override\n+          protected char getSeparator() {\n+            return '_';\n+          }\n+        };\n+\n+        @Nonnull\n+        public String normalize(@Nonnull String key) {\n+          return key.toLowerCase().replace(getSeparator(), DOT.getSeparator());\n+        }\n+\n+        public Map<String, String> normalize(@Nonnull Map<String, String> map) {\n+          Map<String, String> properties = new HashMap<>();\n+          for (String key : map.keySet()) {\n+            properties.put(normalize(key), map.get(key));\n+          }\n+          return Collections.unmodifiableMap(properties);\n+        }\n+\n+        protected abstract char getSeparator();\n+      }\n+\n+      /**\n+       * Sets the configuration values from the given configuration map. This method looks for the\n+       * following keys:\n+       *\n+       * <ul>\n+       *   <li>{@code otel.bsp.schedule.delay}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code otel.bsp.max.queue}: to set the maximum queue size.\n+       *   <li>{@code otel.bsp.max.export.batch}: to set the maximum batch size.\n+       *   <li>{@code otel.bsp.export.timeout}: to set the maximum allowed time to export data.\n+       *   <li>{@code otel.bsp.report.sampled}: to set whether only sampled spans should be\n+       *       reported.\n+       * </ul>\n+       *\n+       * @param configMap {@link Map} holding the configuration values.\n+       * @return this.\n+       */\n+      public Builder fromConfigMap(\n+          Map<String, String> configMap, NamingConvention namingConvention) {\n+        configMap = namingConvention.normalize(configMap);\n+        this.setScheduleDelayMillis(\n+            getProperty(KEY_SCHEDULE_DELAY_MILLIS, configMap, this.scheduleDelayMillis));\n+        this.setMaxQueueSize(\n+            getProperty(\n+                namingConvention.normalize(KEY_MAX_QUEUE_SIZE), configMap, this.maxQueueSize));\n+        this.setMaxExportBatchSize(\n+            getProperty(KEY_MAX_EXPORT_BATCH_SIZE, configMap, this.maxExportBatchSize));\n+        this.setExporterTimeoutMillis(\n+            getProperty(KEY_EXPORT_TIMEOUT_MILLIS, configMap, this.exporterTimeoutMillis));\n+        this.reportOnlySampled(getProperty(KEY_SAMPLED, configMap, this.sampled));\n+        return this;\n+      }\n+\n+      /**\n+       * Sets the configuration values from environment variables. This method looks for the\n+       * following keys:\n+       *\n+       * <ul>\n+       *   <li>{@code OTEL_BSP_SCHEDULE_DELAY}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code OTEL_BSP_MAX_QUEUE}: to set the maximum queue size.\n+       *   <li>{@code OTEL_BSP_MAX_EXPORT_BATCH}: to set the maximum batch size.\n+       *   <li>{@code OTEL_BSP_EXPORT_TIMEOUT}: to set the maximum allowed time to export data.\n+       *   <li>{@code OTEL_BSP_REPORT_SAMPLED}: to set whether only sampled spans should be\n+       *       reported.\n+       * </ul>\n+       *\n+       * @return this.\n+       */\n+      public Builder readEnv() {\n+        return fromConfigMap(System.getenv(), NamingConvention.ENV_VAR);\n+      }\n+\n+      /**\n+       * Sets the configuration values from system properties. This method looks for the following\n+       * keys:\n+       *\n+       * <ul>\n+       *   <li>{@code otel.bsp.schedule.delay}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code otel.bsp.max.queue}: to set the maximum queue size.\n+       *   <li>{@code otel.bsp.max.export.batch}: to set the maximum batch size.\n+       *   <li>{@code otel.bsp.export.timeout}: to set the maximum allowed time to export data.\n+       *   <li>{@code otel.bsp.report.sampled}: to set whether only sampled spans should be\n+       *       reported.\n+       * </ul>\n+       *\n+       * @return this.\n+       */\n+      public Builder readSystemProperties() {\n+        return fromConfigMap(Maps.fromProperties(System.getProperties()), NamingConvention.DOT);\n+      }\n+\n+      /**\n+       * Set whether only sampled spans should be reported.\n+       *\n+       * @param sampled report only sampled spans.\n+       * @return this.\n+       */\n+      public Builder reportOnlySampled(boolean sampled) {\n+        this.sampled = sampled;\n+        return this;\n+      }\n+\n+      /**\n+       * Sets the delay interval between two consecutive exports. The actual interval may be shorter\n+       * if the batch size is getting larger than {@code maxQueuedSpans / 2}.\n+       *\n+       * <p>Default value is {@code 5000}ms.\n+       *\n+       * @param scheduleDelayMillis the delay interval between two consecutive exports.\n+       * @return this.\n+       */\n+      public Builder setScheduleDelayMillis(long scheduleDelayMillis) {\n+        Utils.checkArgument(\n+            scheduleDelayMillis >= 0, \"scheduleDelayMillis must greater than or equal 0.\");\n+        this.scheduleDelayMillis = scheduleDelayMillis;\n+        return this;\n+      }\n+\n+      /**\n+       * Sets the maximum time an exporter will be allowed to run before being cancelled.\n+       *\n+       * <p>Default value is {@code 30000}ms\n+       *\n+       * @param exporterTimeoutMillis the timeout for exports in milliseconds.\n+       * @return this\n+       */\n+      public Builder setExporterTimeoutMillis(int exporterTimeoutMillis) {\n+        Utils.checkArgument(\n+            exporterTimeoutMillis >= 0, \"exporterTimeoutMillis must greater than or equal 0.\");\n+        this.exporterTimeoutMillis = exporterTimeoutMillis;\n+        return this;\n+      }\n+\n+      /**\n+       * Sets the maximum number of Spans that are kept in the queue before start dropping.\n+       *\n+       * <p>See the BatchSampledSpansProcessor class description for a high-level design description\n+       * of this class.\n+       *\n+       * <p>Default value is {@code 2048}.\n+       *\n+       * @param maxQueueSize the maximum number of Spans that are kept in the queue before start\n+       *     dropping.\n+       * @return this.\n+       */\n+      public Builder setMaxQueueSize(int maxQueueSize) {\n+        Utils.checkArgument(maxQueueSize > 0, \"maxQueueSize must be positive.\");\n+        this.maxQueueSize = maxQueueSize;\n+        return this;\n+      }\n+\n+      /**\n+       * Sets the maximum batch size for every export. This must be smaller or equal to {@code\n+       * maxQueuedSpans}.\n+       *\n+       * <p>Default value is {@code 512}.\n+       *\n+       * @param maxExportBatchSize the maximum batch size for every export.\n+       * @return this.\n+       */\n+      public Builder setMaxExportBatchSize(int maxExportBatchSize) {\n+        Utils.checkArgument(maxExportBatchSize > 0, \"maxExportBatchSize must be positive.\");\n+        this.maxExportBatchSize = maxExportBatchSize;\n+        return this;\n+      }\n+\n+      private static boolean getProperty(\n+          String name, Map<String, String> map, boolean defaultValue) {\n+        if (map.containsKey(name)) {\n+          return Boolean.parseBoolean(map.get(name));\n+        }\n+        return defaultValue;\n+      }\n+\n+      private static int getProperty(String name, Map<String, String> map, int defaultValue) {\n+        try {\n+          return Integer.parseInt(map.get(name));\n+        } catch (NumberFormatException ex) {\n+          return defaultValue;\n+        }\n+      }\n+\n+      private static long getProperty(String name, Map<String, String> map, long defaultValue) {", "originalCommit": "3677cea9c4e1663924f2bc74f68d1d5cbb8eb22b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc02ade502a55a23264b30456fe4d08b557b69ea", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\nindex 5bfaf0053..506367894 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n\n@@ -329,7 +332,13 @@ public final class BatchSpansProcessor implements SpanProcessor {\n   @AutoValue\n   public abstract static class Config {\n \n-    public abstract boolean isReportOnlySampled();\n+    private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+    private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+    private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+    private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+    private static final boolean DEFAULT_EXPORT_ONLY_SAMPLED = true;\n+\n+    public abstract boolean isExportOnlySampled();\n \n     public abstract long getScheduleDelayMillis();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg3MjI0OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r409872249", "bodyText": "can we add a @see that links to the constant, just in case things get out of synch? Also for the other properties.", "author": "jkwatson", "createdAt": "2020-04-16T21:57:28Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -411,4 +324,277 @@ public void run() {\n       }\n     }\n   }\n+\n+  @Immutable\n+  @AutoValue\n+  public abstract static class Config {\n+\n+    public abstract boolean isReportOnlySampled();\n+\n+    public abstract long getScheduleDelayMillis();\n+\n+    public abstract int getMaxQueueSize();\n+\n+    public abstract int getMaxExportBatchSize();\n+\n+    public abstract int getExporterTimeoutMillis();\n+\n+    public static Config getDefault() {\n+      return new Builder().build();\n+    }\n+\n+    /**\n+     * Creates a {@link Config} object reading the configuration values first from the environment\n+     * and then from system properties. If a configuration value is missing, it uses the default\n+     * value.\n+     *\n+     * @return The {@link Config} object.\n+     */\n+    public static Config loadFromDefaultSources() {\n+      return new Builder().readEnv().readSystemProperties().build();\n+    }\n+\n+    public static Builder newBuilder() {\n+      return new Builder();\n+    }\n+\n+    public static final class Builder {\n+\n+      private static final String KEY_SCHEDULE_DELAY_MILLIS = \"otel.bsp.schedule.delay\";\n+      private static final String KEY_MAX_QUEUE_SIZE = \"otel.bsp.max.queue\";\n+      private static final String KEY_MAX_EXPORT_BATCH_SIZE = \"otel.bsp.max.export.batch\";\n+      private static final String KEY_EXPORT_TIMEOUT_MILLIS = \"otel.bsp.export.timeout\";\n+      private static final String KEY_SAMPLED = \"otel.bsp.report.sampled\";\n+\n+      private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+      private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+      private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+      private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+      private static final boolean DEFAULT_REPORT_ONLY_SAMPLED = true;\n+\n+      private long scheduleDelayMillis = DEFAULT_SCHEDULE_DELAY_MILLIS;\n+      private int maxQueueSize = DEFAULT_MAX_QUEUE_SIZE;\n+      private int maxExportBatchSize = DEFAULT_MAX_EXPORT_BATCH_SIZE;\n+      private int exporterTimeoutMillis = DEFAULT_EXPORT_TIMEOUT_MILLIS;\n+      private boolean sampled = DEFAULT_REPORT_ONLY_SAMPLED;\n+\n+      enum NamingConvention {\n+        DOT {\n+          @Override\n+          protected char getSeparator() {\n+            return '.';\n+          }\n+\n+          @Nonnull\n+          @Override\n+          public String normalize(@Nonnull String key) {\n+            return key.toLowerCase();\n+          }\n+        },\n+        ENV_VAR {\n+          @Override\n+          protected char getSeparator() {\n+            return '_';\n+          }\n+        };\n+\n+        @Nonnull\n+        public String normalize(@Nonnull String key) {\n+          return key.toLowerCase().replace(getSeparator(), DOT.getSeparator());\n+        }\n+\n+        public Map<String, String> normalize(@Nonnull Map<String, String> map) {\n+          Map<String, String> properties = new HashMap<>();\n+          for (String key : map.keySet()) {\n+            properties.put(normalize(key), map.get(key));\n+          }\n+          return Collections.unmodifiableMap(properties);\n+        }\n+\n+        protected abstract char getSeparator();\n+      }\n+\n+      /**\n+       * Sets the configuration values from the given configuration map. This method looks for the\n+       * following keys:\n+       *\n+       * <ul>\n+       *   <li>{@code otel.bsp.schedule.delay}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code otel.bsp.max.queue}: to set the maximum queue size.\n+       *   <li>{@code otel.bsp.max.export.batch}: to set the maximum batch size.\n+       *   <li>{@code otel.bsp.export.timeout}: to set the maximum allowed time to export data.\n+       *   <li>{@code otel.bsp.report.sampled}: to set whether only sampled spans should be\n+       *       reported.\n+       * </ul>\n+       *\n+       * @param configMap {@link Map} holding the configuration values.\n+       * @return this.\n+       */\n+      public Builder fromConfigMap(\n+          Map<String, String> configMap, NamingConvention namingConvention) {\n+        configMap = namingConvention.normalize(configMap);\n+        this.setScheduleDelayMillis(\n+            getProperty(KEY_SCHEDULE_DELAY_MILLIS, configMap, this.scheduleDelayMillis));\n+        this.setMaxQueueSize(\n+            getProperty(\n+                namingConvention.normalize(KEY_MAX_QUEUE_SIZE), configMap, this.maxQueueSize));\n+        this.setMaxExportBatchSize(\n+            getProperty(KEY_MAX_EXPORT_BATCH_SIZE, configMap, this.maxExportBatchSize));\n+        this.setExporterTimeoutMillis(\n+            getProperty(KEY_EXPORT_TIMEOUT_MILLIS, configMap, this.exporterTimeoutMillis));\n+        this.reportOnlySampled(getProperty(KEY_SAMPLED, configMap, this.sampled));\n+        return this;\n+      }\n+\n+      /**\n+       * Sets the configuration values from environment variables. This method looks for the\n+       * following keys:\n+       *\n+       * <ul>\n+       *   <li>{@code OTEL_BSP_SCHEDULE_DELAY}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code OTEL_BSP_MAX_QUEUE}: to set the maximum queue size.\n+       *   <li>{@code OTEL_BSP_MAX_EXPORT_BATCH}: to set the maximum batch size.\n+       *   <li>{@code OTEL_BSP_EXPORT_TIMEOUT}: to set the maximum allowed time to export data.\n+       *   <li>{@code OTEL_BSP_REPORT_SAMPLED}: to set whether only sampled spans should be\n+       *       reported.\n+       * </ul>\n+       *\n+       * @return this.\n+       */\n+      public Builder readEnv() {\n+        return fromConfigMap(System.getenv(), NamingConvention.ENV_VAR);\n+      }\n+\n+      /**\n+       * Sets the configuration values from system properties. This method looks for the following\n+       * keys:\n+       *\n+       * <ul>\n+       *   <li>{@code otel.bsp.schedule.delay}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code otel.bsp.max.queue}: to set the maximum queue size.\n+       *   <li>{@code otel.bsp.max.export.batch}: to set the maximum batch size.\n+       *   <li>{@code otel.bsp.export.timeout}: to set the maximum allowed time to export data.\n+       *   <li>{@code otel.bsp.report.sampled}: to set whether only sampled spans should be\n+       *       reported.\n+       * </ul>\n+       *\n+       * @return this.\n+       */\n+      public Builder readSystemProperties() {\n+        return fromConfigMap(Maps.fromProperties(System.getProperties()), NamingConvention.DOT);\n+      }\n+\n+      /**\n+       * Set whether only sampled spans should be reported.\n+       *\n+       * @param sampled report only sampled spans.\n+       * @return this.\n+       */\n+      public Builder reportOnlySampled(boolean sampled) {\n+        this.sampled = sampled;\n+        return this;\n+      }\n+\n+      /**\n+       * Sets the delay interval between two consecutive exports. The actual interval may be shorter\n+       * if the batch size is getting larger than {@code maxQueuedSpans / 2}.\n+       *\n+       * <p>Default value is {@code 5000}ms.\n+       *\n+       * @param scheduleDelayMillis the delay interval between two consecutive exports.\n+       * @return this.\n+       */\n+      public Builder setScheduleDelayMillis(long scheduleDelayMillis) {\n+        Utils.checkArgument(\n+            scheduleDelayMillis >= 0, \"scheduleDelayMillis must greater than or equal 0.\");\n+        this.scheduleDelayMillis = scheduleDelayMillis;\n+        return this;\n+      }\n+\n+      /**\n+       * Sets the maximum time an exporter will be allowed to run before being cancelled.\n+       *\n+       * <p>Default value is {@code 30000}ms", "originalCommit": "3677cea9c4e1663924f2bc74f68d1d5cbb8eb22b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc02ade502a55a23264b30456fe4d08b557b69ea", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\nindex 5bfaf0053..506367894 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n\n@@ -329,7 +332,13 @@ public final class BatchSpansProcessor implements SpanProcessor {\n   @AutoValue\n   public abstract static class Config {\n \n-    public abstract boolean isReportOnlySampled();\n+    private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+    private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+    private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+    private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+    private static final boolean DEFAULT_EXPORT_ONLY_SAMPLED = true;\n+\n+    public abstract boolean isExportOnlySampled();\n \n     public abstract long getScheduleDelayMillis();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4MTExMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r409881111", "bodyText": "Is there any way we can get actually pulling the config from env vars/system properties? I know that's generally a pain, but I don't know if someone had some prior art on making that kind of test to verify that this works for real.", "author": "jkwatson", "createdAt": "2020-04-16T22:18:20Z", "path": "sdk/src/test/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessorTest.java", "diffHunk": "@@ -73,6 +75,116 @@ private ReadableSpan createSampledEndedSpan(String spanName) {\n     return (ReadableSpan) span;\n   }\n \n+  @Test\n+  public void testConfiguration() {", "originalCommit": "3677cea9c4e1663924f2bc74f68d1d5cbb8eb22b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI1NTU5OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r410255598", "bodyText": "Unfortunately, I don't have prior art. But I will search for a proper solution!", "author": "thisthat", "createdAt": "2020-04-17T14:20:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4MTExMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM0MjIwNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r410342204", "bodyText": "I've used this before: https://stefanbirkner.github.io/system-rules", "author": "trask", "createdAt": "2020-04-17T16:42:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4MTExMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3Mzc2MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r410673761", "bodyText": "Thank you @trask \ud83d\udc4d", "author": "thisthat", "createdAt": "2020-04-18T09:22:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4MTExMQ=="}], "type": "inlineReview", "revised_code": {"commit": "fc02ade502a55a23264b30456fe4d08b557b69ea", "chunk": "diff --git a/sdk/src/test/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessorTest.java b/sdk/src/test/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessorTest.java\nindex 301d8077d..4d3dc4e78 100644\n--- a/sdk/src/test/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessorTest.java\n+++ b/sdk/src/test/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessorTest.java\n\n@@ -86,7 +164,7 @@ public class BatchSpansProcessorTest {\n     assertThat(config.getMaxQueueSize()).isEqualTo(defConfig.getMaxQueueSize());\n     assertThat(config.getMaxExportBatchSize()).isEqualTo(defConfig.getMaxExportBatchSize());\n     assertThat(config.getExporterTimeoutMillis()).isEqualTo(defConfig.getExporterTimeoutMillis());\n-    assertThat(config.isReportOnlySampled()).isEqualTo(defConfig.isReportOnlySampled());\n+    assertThat(config.isExportOnlySampled()).isEqualTo(defConfig.isExportOnlySampled());\n \n     // check system configuration\n     Map<String, String> configMap = new HashMap<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4MjA5MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r409882091", "bodyText": "Can we add a wee bit of clarification that the system property will override the environment values?", "author": "jkwatson", "createdAt": "2020-04-16T22:20:44Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -411,4 +324,277 @@ public void run() {\n       }\n     }\n   }\n+\n+  @Immutable\n+  @AutoValue\n+  public abstract static class Config {\n+\n+    public abstract boolean isReportOnlySampled();\n+\n+    public abstract long getScheduleDelayMillis();\n+\n+    public abstract int getMaxQueueSize();\n+\n+    public abstract int getMaxExportBatchSize();\n+\n+    public abstract int getExporterTimeoutMillis();\n+\n+    public static Config getDefault() {\n+      return new Builder().build();\n+    }\n+\n+    /**\n+     * Creates a {@link Config} object reading the configuration values first from the environment\n+     * and then from system properties. If a configuration value is missing, it uses the default\n+     * value.", "originalCommit": "3677cea9c4e1663924f2bc74f68d1d5cbb8eb22b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc02ade502a55a23264b30456fe4d08b557b69ea", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\nindex 5bfaf0053..506367894 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n\n@@ -329,7 +332,13 @@ public final class BatchSpansProcessor implements SpanProcessor {\n   @AutoValue\n   public abstract static class Config {\n \n-    public abstract boolean isReportOnlySampled();\n+    private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+    private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+    private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+    private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+    private static final boolean DEFAULT_EXPORT_ONLY_SAMPLED = true;\n+\n+    public abstract boolean isExportOnlySampled();\n \n     public abstract long getScheduleDelayMillis();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4MjMyMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r409882322", "bodyText": "extra normalize here?", "author": "jkwatson", "createdAt": "2020-04-16T22:21:19Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -411,4 +324,277 @@ public void run() {\n       }\n     }\n   }\n+\n+  @Immutable\n+  @AutoValue\n+  public abstract static class Config {\n+\n+    public abstract boolean isReportOnlySampled();\n+\n+    public abstract long getScheduleDelayMillis();\n+\n+    public abstract int getMaxQueueSize();\n+\n+    public abstract int getMaxExportBatchSize();\n+\n+    public abstract int getExporterTimeoutMillis();\n+\n+    public static Config getDefault() {\n+      return new Builder().build();\n+    }\n+\n+    /**\n+     * Creates a {@link Config} object reading the configuration values first from the environment\n+     * and then from system properties. If a configuration value is missing, it uses the default\n+     * value.\n+     *\n+     * @return The {@link Config} object.\n+     */\n+    public static Config loadFromDefaultSources() {\n+      return new Builder().readEnv().readSystemProperties().build();\n+    }\n+\n+    public static Builder newBuilder() {\n+      return new Builder();\n+    }\n+\n+    public static final class Builder {\n+\n+      private static final String KEY_SCHEDULE_DELAY_MILLIS = \"otel.bsp.schedule.delay\";\n+      private static final String KEY_MAX_QUEUE_SIZE = \"otel.bsp.max.queue\";\n+      private static final String KEY_MAX_EXPORT_BATCH_SIZE = \"otel.bsp.max.export.batch\";\n+      private static final String KEY_EXPORT_TIMEOUT_MILLIS = \"otel.bsp.export.timeout\";\n+      private static final String KEY_SAMPLED = \"otel.bsp.report.sampled\";\n+\n+      private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+      private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+      private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+      private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+      private static final boolean DEFAULT_REPORT_ONLY_SAMPLED = true;\n+\n+      private long scheduleDelayMillis = DEFAULT_SCHEDULE_DELAY_MILLIS;\n+      private int maxQueueSize = DEFAULT_MAX_QUEUE_SIZE;\n+      private int maxExportBatchSize = DEFAULT_MAX_EXPORT_BATCH_SIZE;\n+      private int exporterTimeoutMillis = DEFAULT_EXPORT_TIMEOUT_MILLIS;\n+      private boolean sampled = DEFAULT_REPORT_ONLY_SAMPLED;\n+\n+      enum NamingConvention {\n+        DOT {\n+          @Override\n+          protected char getSeparator() {\n+            return '.';\n+          }\n+\n+          @Nonnull\n+          @Override\n+          public String normalize(@Nonnull String key) {\n+            return key.toLowerCase();\n+          }\n+        },\n+        ENV_VAR {\n+          @Override\n+          protected char getSeparator() {\n+            return '_';\n+          }\n+        };\n+\n+        @Nonnull\n+        public String normalize(@Nonnull String key) {\n+          return key.toLowerCase().replace(getSeparator(), DOT.getSeparator());\n+        }\n+\n+        public Map<String, String> normalize(@Nonnull Map<String, String> map) {\n+          Map<String, String> properties = new HashMap<>();\n+          for (String key : map.keySet()) {\n+            properties.put(normalize(key), map.get(key));\n+          }\n+          return Collections.unmodifiableMap(properties);\n+        }\n+\n+        protected abstract char getSeparator();\n+      }\n+\n+      /**\n+       * Sets the configuration values from the given configuration map. This method looks for the\n+       * following keys:\n+       *\n+       * <ul>\n+       *   <li>{@code otel.bsp.schedule.delay}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code otel.bsp.max.queue}: to set the maximum queue size.\n+       *   <li>{@code otel.bsp.max.export.batch}: to set the maximum batch size.\n+       *   <li>{@code otel.bsp.export.timeout}: to set the maximum allowed time to export data.\n+       *   <li>{@code otel.bsp.report.sampled}: to set whether only sampled spans should be\n+       *       reported.\n+       * </ul>\n+       *\n+       * @param configMap {@link Map} holding the configuration values.\n+       * @return this.\n+       */\n+      public Builder fromConfigMap(\n+          Map<String, String> configMap, NamingConvention namingConvention) {\n+        configMap = namingConvention.normalize(configMap);\n+        this.setScheduleDelayMillis(\n+            getProperty(KEY_SCHEDULE_DELAY_MILLIS, configMap, this.scheduleDelayMillis));\n+        this.setMaxQueueSize(\n+            getProperty(\n+                namingConvention.normalize(KEY_MAX_QUEUE_SIZE), configMap, this.maxQueueSize));", "originalCommit": "3677cea9c4e1663924f2bc74f68d1d5cbb8eb22b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc02ade502a55a23264b30456fe4d08b557b69ea", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\nindex 5bfaf0053..506367894 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n\n@@ -329,7 +332,13 @@ public final class BatchSpansProcessor implements SpanProcessor {\n   @AutoValue\n   public abstract static class Config {\n \n-    public abstract boolean isReportOnlySampled();\n+    private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+    private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+    private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+    private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+    private static final boolean DEFAULT_EXPORT_ONLY_SAMPLED = true;\n+\n+    public abstract boolean isExportOnlySampled();\n \n     public abstract long getScheduleDelayMillis();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4MjY2MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r409882660", "bodyText": "how about renaming to readFromEnvironment or readEnvironment", "author": "jkwatson", "createdAt": "2020-04-16T22:22:08Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -411,4 +324,277 @@ public void run() {\n       }\n     }\n   }\n+\n+  @Immutable\n+  @AutoValue\n+  public abstract static class Config {\n+\n+    public abstract boolean isReportOnlySampled();\n+\n+    public abstract long getScheduleDelayMillis();\n+\n+    public abstract int getMaxQueueSize();\n+\n+    public abstract int getMaxExportBatchSize();\n+\n+    public abstract int getExporterTimeoutMillis();\n+\n+    public static Config getDefault() {\n+      return new Builder().build();\n+    }\n+\n+    /**\n+     * Creates a {@link Config} object reading the configuration values first from the environment\n+     * and then from system properties. If a configuration value is missing, it uses the default\n+     * value.\n+     *\n+     * @return The {@link Config} object.\n+     */\n+    public static Config loadFromDefaultSources() {\n+      return new Builder().readEnv().readSystemProperties().build();\n+    }\n+\n+    public static Builder newBuilder() {\n+      return new Builder();\n+    }\n+\n+    public static final class Builder {\n+\n+      private static final String KEY_SCHEDULE_DELAY_MILLIS = \"otel.bsp.schedule.delay\";\n+      private static final String KEY_MAX_QUEUE_SIZE = \"otel.bsp.max.queue\";\n+      private static final String KEY_MAX_EXPORT_BATCH_SIZE = \"otel.bsp.max.export.batch\";\n+      private static final String KEY_EXPORT_TIMEOUT_MILLIS = \"otel.bsp.export.timeout\";\n+      private static final String KEY_SAMPLED = \"otel.bsp.report.sampled\";\n+\n+      private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+      private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+      private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+      private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+      private static final boolean DEFAULT_REPORT_ONLY_SAMPLED = true;\n+\n+      private long scheduleDelayMillis = DEFAULT_SCHEDULE_DELAY_MILLIS;\n+      private int maxQueueSize = DEFAULT_MAX_QUEUE_SIZE;\n+      private int maxExportBatchSize = DEFAULT_MAX_EXPORT_BATCH_SIZE;\n+      private int exporterTimeoutMillis = DEFAULT_EXPORT_TIMEOUT_MILLIS;\n+      private boolean sampled = DEFAULT_REPORT_ONLY_SAMPLED;\n+\n+      enum NamingConvention {\n+        DOT {\n+          @Override\n+          protected char getSeparator() {\n+            return '.';\n+          }\n+\n+          @Nonnull\n+          @Override\n+          public String normalize(@Nonnull String key) {\n+            return key.toLowerCase();\n+          }\n+        },\n+        ENV_VAR {\n+          @Override\n+          protected char getSeparator() {\n+            return '_';\n+          }\n+        };\n+\n+        @Nonnull\n+        public String normalize(@Nonnull String key) {\n+          return key.toLowerCase().replace(getSeparator(), DOT.getSeparator());\n+        }\n+\n+        public Map<String, String> normalize(@Nonnull Map<String, String> map) {\n+          Map<String, String> properties = new HashMap<>();\n+          for (String key : map.keySet()) {\n+            properties.put(normalize(key), map.get(key));\n+          }\n+          return Collections.unmodifiableMap(properties);\n+        }\n+\n+        protected abstract char getSeparator();\n+      }\n+\n+      /**\n+       * Sets the configuration values from the given configuration map. This method looks for the\n+       * following keys:\n+       *\n+       * <ul>\n+       *   <li>{@code otel.bsp.schedule.delay}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code otel.bsp.max.queue}: to set the maximum queue size.\n+       *   <li>{@code otel.bsp.max.export.batch}: to set the maximum batch size.\n+       *   <li>{@code otel.bsp.export.timeout}: to set the maximum allowed time to export data.\n+       *   <li>{@code otel.bsp.report.sampled}: to set whether only sampled spans should be\n+       *       reported.\n+       * </ul>\n+       *\n+       * @param configMap {@link Map} holding the configuration values.\n+       * @return this.\n+       */\n+      public Builder fromConfigMap(\n+          Map<String, String> configMap, NamingConvention namingConvention) {\n+        configMap = namingConvention.normalize(configMap);\n+        this.setScheduleDelayMillis(\n+            getProperty(KEY_SCHEDULE_DELAY_MILLIS, configMap, this.scheduleDelayMillis));\n+        this.setMaxQueueSize(\n+            getProperty(\n+                namingConvention.normalize(KEY_MAX_QUEUE_SIZE), configMap, this.maxQueueSize));\n+        this.setMaxExportBatchSize(\n+            getProperty(KEY_MAX_EXPORT_BATCH_SIZE, configMap, this.maxExportBatchSize));\n+        this.setExporterTimeoutMillis(\n+            getProperty(KEY_EXPORT_TIMEOUT_MILLIS, configMap, this.exporterTimeoutMillis));\n+        this.reportOnlySampled(getProperty(KEY_SAMPLED, configMap, this.sampled));\n+        return this;\n+      }\n+\n+      /**\n+       * Sets the configuration values from environment variables. This method looks for the\n+       * following keys:\n+       *\n+       * <ul>\n+       *   <li>{@code OTEL_BSP_SCHEDULE_DELAY}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code OTEL_BSP_MAX_QUEUE}: to set the maximum queue size.\n+       *   <li>{@code OTEL_BSP_MAX_EXPORT_BATCH}: to set the maximum batch size.\n+       *   <li>{@code OTEL_BSP_EXPORT_TIMEOUT}: to set the maximum allowed time to export data.\n+       *   <li>{@code OTEL_BSP_REPORT_SAMPLED}: to set whether only sampled spans should be\n+       *       reported.\n+       * </ul>\n+       *\n+       * @return this.\n+       */\n+      public Builder readEnv() {", "originalCommit": "3677cea9c4e1663924f2bc74f68d1d5cbb8eb22b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc02ade502a55a23264b30456fe4d08b557b69ea", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\nindex 5bfaf0053..506367894 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n\n@@ -329,7 +332,13 @@ public final class BatchSpansProcessor implements SpanProcessor {\n   @AutoValue\n   public abstract static class Config {\n \n-    public abstract boolean isReportOnlySampled();\n+    private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+    private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+    private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+    private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+    private static final boolean DEFAULT_EXPORT_ONLY_SAMPLED = true;\n+\n+    public abstract boolean isExportOnlySampled();\n \n     public abstract long getScheduleDelayMillis();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4MzgzNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r409883834", "bodyText": "javadoc needed here.", "author": "jkwatson", "createdAt": "2020-04-16T22:25:05Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -411,4 +324,277 @@ public void run() {\n       }\n     }\n   }\n+\n+  @Immutable\n+  @AutoValue\n+  public abstract static class Config {\n+\n+    public abstract boolean isReportOnlySampled();\n+\n+    public abstract long getScheduleDelayMillis();\n+\n+    public abstract int getMaxQueueSize();\n+\n+    public abstract int getMaxExportBatchSize();\n+\n+    public abstract int getExporterTimeoutMillis();\n+\n+    public static Config getDefault() {", "originalCommit": "3677cea9c4e1663924f2bc74f68d1d5cbb8eb22b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc02ade502a55a23264b30456fe4d08b557b69ea", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\nindex 5bfaf0053..506367894 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n\n@@ -329,7 +332,13 @@ public final class BatchSpansProcessor implements SpanProcessor {\n   @AutoValue\n   public abstract static class Config {\n \n-    public abstract boolean isReportOnlySampled();\n+    private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+    private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+    private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+    private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+    private static final boolean DEFAULT_EXPORT_ONLY_SAMPLED = true;\n+\n+    public abstract boolean isExportOnlySampled();\n \n     public abstract long getScheduleDelayMillis();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4NDExOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r409884118", "bodyText": "how about exportOnlySampled() as the name for this? report isn't a term that shows up anywhere else that I know of.", "author": "jkwatson", "createdAt": "2020-04-16T22:25:51Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -411,4 +324,277 @@ public void run() {\n       }\n     }\n   }\n+\n+  @Immutable\n+  @AutoValue\n+  public abstract static class Config {\n+\n+    public abstract boolean isReportOnlySampled();", "originalCommit": "3677cea9c4e1663924f2bc74f68d1d5cbb8eb22b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI1NzIwNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r410257206", "bodyText": "I also found that strange when I look at the class the first time! Totally in favor of exportOnlySampled().", "author": "thisthat", "createdAt": "2020-04-17T14:23:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4NDExOA=="}], "type": "inlineReview", "revised_code": {"commit": "fc02ade502a55a23264b30456fe4d08b557b69ea", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\nindex 5bfaf0053..506367894 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n\n@@ -329,7 +332,13 @@ public final class BatchSpansProcessor implements SpanProcessor {\n   @AutoValue\n   public abstract static class Config {\n \n-    public abstract boolean isReportOnlySampled();\n+    private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+    private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+    private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+    private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+    private static final boolean DEFAULT_EXPORT_ONLY_SAMPLED = true;\n+\n+    public abstract boolean isExportOnlySampled();\n \n     public abstract long getScheduleDelayMillis();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ2OTY5Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r411469692", "bodyText": "I think we use the convention newBuilder for this case.", "author": "bogdandrutu", "createdAt": "2020-04-20T15:25:29Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -411,4 +327,372 @@ public void run() {\n       }\n     }\n   }\n+\n+  @Immutable\n+  @AutoValue\n+  public abstract static class Config {\n+\n+    private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+    private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+    private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+    private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+    private static final boolean DEFAULT_EXPORT_ONLY_SAMPLED = true;\n+\n+    public abstract boolean isExportOnlySampled();\n+\n+    public abstract long getScheduleDelayMillis();\n+\n+    public abstract int getMaxQueueSize();\n+\n+    public abstract int getMaxExportBatchSize();\n+\n+    public abstract int getExporterTimeoutMillis();\n+\n+    /**\n+     * Creates a {@link Config} object using the default configuration.\n+     *\n+     * @return The {@link Config} object.\n+     * @since 0.4.0\n+     */\n+    public static Config getDefault() {\n+      return builder().build();\n+    }\n+\n+    /**\n+     * Creates a {@link Config} object reading the configuration values from the environment and\n+     * from system properties. System properties override values defined in the environment. If a\n+     * configuration value is missing, it uses the default value.\n+     *\n+     * @return The {@link Config} object.\n+     * @since 0.4.0\n+     */\n+    public static Config loadFromDefaultSources() {\n+      return builder().readEnvironment().readSystemProperties().build();\n+    }\n+\n+    /**\n+     * Returns a new {@link Builder} with default options.\n+     *\n+     * @return a new {@code Builder} with default options.\n+     * @since 0.4.0\n+     */\n+    public static Builder builder() {", "originalCommit": "2a0a5b0b6e16176445c91d26e1fcc9e326c5ff05", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc02ade502a55a23264b30456fe4d08b557b69ea", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\nindex 86848acc8..506367894 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n\n@@ -355,7 +355,7 @@ public final class BatchSpansProcessor implements SpanProcessor {\n      * @since 0.4.0\n      */\n     public static Config getDefault() {\n-      return builder().build();\n+      return newBuilder().build();\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ3MTA2OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r411471069", "bodyText": "We don't use the @Nonnull convention. Please avoid adding this new convention yet.", "author": "bogdandrutu", "createdAt": "2020-04-20T15:27:15Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -411,4 +327,372 @@ public void run() {\n       }\n     }\n   }\n+\n+  @Immutable\n+  @AutoValue\n+  public abstract static class Config {\n+\n+    private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+    private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+    private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+    private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+    private static final boolean DEFAULT_EXPORT_ONLY_SAMPLED = true;\n+\n+    public abstract boolean isExportOnlySampled();\n+\n+    public abstract long getScheduleDelayMillis();\n+\n+    public abstract int getMaxQueueSize();\n+\n+    public abstract int getMaxExportBatchSize();\n+\n+    public abstract int getExporterTimeoutMillis();\n+\n+    /**\n+     * Creates a {@link Config} object using the default configuration.\n+     *\n+     * @return The {@link Config} object.\n+     * @since 0.4.0\n+     */\n+    public static Config getDefault() {\n+      return builder().build();\n+    }\n+\n+    /**\n+     * Creates a {@link Config} object reading the configuration values from the environment and\n+     * from system properties. System properties override values defined in the environment. If a\n+     * configuration value is missing, it uses the default value.\n+     *\n+     * @return The {@link Config} object.\n+     * @since 0.4.0\n+     */\n+    public static Config loadFromDefaultSources() {\n+      return builder().readEnvironment().readSystemProperties().build();\n+    }\n+\n+    /**\n+     * Returns a new {@link Builder} with default options.\n+     *\n+     * @return a new {@code Builder} with default options.\n+     * @since 0.4.0\n+     */\n+    public static Builder builder() {\n+      return new AutoValue_BatchSpansProcessor_Config.Builder()\n+          .setScheduleDelayMillis(DEFAULT_SCHEDULE_DELAY_MILLIS)\n+          .setMaxQueueSize(DEFAULT_MAX_QUEUE_SIZE)\n+          .setMaxExportBatchSize(DEFAULT_MAX_EXPORT_BATCH_SIZE)\n+          .setExporterTimeoutMillis(DEFAULT_EXPORT_TIMEOUT_MILLIS)\n+          .setExportOnlySampled(DEFAULT_EXPORT_ONLY_SAMPLED);\n+    }\n+\n+    @AutoValue.Builder\n+    public abstract static class Builder {\n+\n+      private static final String KEY_SCHEDULE_DELAY_MILLIS = \"otel.bsp.schedule.delay\";\n+      private static final String KEY_MAX_QUEUE_SIZE = \"otel.bsp.max.queue\";\n+      private static final String KEY_MAX_EXPORT_BATCH_SIZE = \"otel.bsp.max.export.batch\";\n+      private static final String KEY_EXPORT_TIMEOUT_MILLIS = \"otel.bsp.export.timeout\";\n+      private static final String KEY_SAMPLED = \"otel.bsp.export.sampled\";\n+\n+      @VisibleForTesting\n+      protected enum NamingConvention {\n+        DOT {\n+          @Nonnull\n+          @Override\n+          public String normalize(@Nonnull String key) {\n+            return key.toLowerCase();\n+          }\n+        },\n+        ENV_VAR {\n+          @Nonnull\n+          @Override\n+          public String normalize(@Nonnull String key) {\n+            return key.toLowerCase().replace(\"_\", \".\");\n+          }\n+        };\n+\n+        @Nonnull", "originalCommit": "2a0a5b0b6e16176445c91d26e1fcc9e326c5ff05", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc02ade502a55a23264b30456fe4d08b557b69ea", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\nindex 86848acc8..506367894 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n\n@@ -355,7 +355,7 @@ public final class BatchSpansProcessor implements SpanProcessor {\n      * @since 0.4.0\n      */\n     public static Config getDefault() {\n-      return builder().build();\n+      return newBuilder().build();\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ3NzYxNw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r411477617", "bodyText": "Why do you not call fromConfigMap? Seems a lot of duplicated code. Do I miss anything? If yes maybe a comment would help others to also understand.", "author": "bogdandrutu", "createdAt": "2020-04-20T15:35:22Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -411,4 +327,372 @@ public void run() {\n       }\n     }\n   }\n+\n+  @Immutable\n+  @AutoValue\n+  public abstract static class Config {\n+\n+    private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+    private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+    private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+    private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+    private static final boolean DEFAULT_EXPORT_ONLY_SAMPLED = true;\n+\n+    public abstract boolean isExportOnlySampled();\n+\n+    public abstract long getScheduleDelayMillis();\n+\n+    public abstract int getMaxQueueSize();\n+\n+    public abstract int getMaxExportBatchSize();\n+\n+    public abstract int getExporterTimeoutMillis();\n+\n+    /**\n+     * Creates a {@link Config} object using the default configuration.\n+     *\n+     * @return The {@link Config} object.\n+     * @since 0.4.0\n+     */\n+    public static Config getDefault() {\n+      return builder().build();\n+    }\n+\n+    /**\n+     * Creates a {@link Config} object reading the configuration values from the environment and\n+     * from system properties. System properties override values defined in the environment. If a\n+     * configuration value is missing, it uses the default value.\n+     *\n+     * @return The {@link Config} object.\n+     * @since 0.4.0\n+     */\n+    public static Config loadFromDefaultSources() {\n+      return builder().readEnvironment().readSystemProperties().build();\n+    }\n+\n+    /**\n+     * Returns a new {@link Builder} with default options.\n+     *\n+     * @return a new {@code Builder} with default options.\n+     * @since 0.4.0\n+     */\n+    public static Builder builder() {\n+      return new AutoValue_BatchSpansProcessor_Config.Builder()\n+          .setScheduleDelayMillis(DEFAULT_SCHEDULE_DELAY_MILLIS)\n+          .setMaxQueueSize(DEFAULT_MAX_QUEUE_SIZE)\n+          .setMaxExportBatchSize(DEFAULT_MAX_EXPORT_BATCH_SIZE)\n+          .setExporterTimeoutMillis(DEFAULT_EXPORT_TIMEOUT_MILLIS)\n+          .setExportOnlySampled(DEFAULT_EXPORT_ONLY_SAMPLED);\n+    }\n+\n+    @AutoValue.Builder\n+    public abstract static class Builder {\n+\n+      private static final String KEY_SCHEDULE_DELAY_MILLIS = \"otel.bsp.schedule.delay\";\n+      private static final String KEY_MAX_QUEUE_SIZE = \"otel.bsp.max.queue\";\n+      private static final String KEY_MAX_EXPORT_BATCH_SIZE = \"otel.bsp.max.export.batch\";\n+      private static final String KEY_EXPORT_TIMEOUT_MILLIS = \"otel.bsp.export.timeout\";\n+      private static final String KEY_SAMPLED = \"otel.bsp.export.sampled\";\n+\n+      @VisibleForTesting\n+      protected enum NamingConvention {\n+        DOT {\n+          @Nonnull\n+          @Override\n+          public String normalize(@Nonnull String key) {\n+            return key.toLowerCase();\n+          }\n+        },\n+        ENV_VAR {\n+          @Nonnull\n+          @Override\n+          public String normalize(@Nonnull String key) {\n+            return key.toLowerCase().replace(\"_\", \".\");\n+          }\n+        };\n+\n+        @Nonnull\n+        public abstract String normalize(@Nonnull String key);\n+\n+        public Map<String, String> normalize(@Nonnull Map<String, String> map) {\n+          Map<String, String> properties = new HashMap<>();\n+          for (Map.Entry<String, String> entry : map.entrySet()) {\n+            properties.put(normalize(entry.getKey()), entry.getValue());\n+          }\n+          return Collections.unmodifiableMap(properties);\n+        }\n+      }\n+\n+      /**\n+       * Sets the configuration values from the given configuration map for only the available keys.\n+       * This method looks for the following keys:\n+       *\n+       * <ul>\n+       *   <li>{@code otel.bsp.schedule.delay}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code otel.bsp.max.queue}: to set the maximum queue size.\n+       *   <li>{@code otel.bsp.max.export.batch}: to set the maximum batch size.\n+       *   <li>{@code otel.bsp.export.timeout}: to set the maximum allowed time to export data.\n+       *   <li>{@code otel.bsp.export.sampled}: to set whether only sampled spans should be\n+       *       exported.\n+       * </ul>\n+       *\n+       * @param configMap {@link Map} holding the configuration values.\n+       * @return this.\n+       */\n+      @VisibleForTesting\n+      Builder fromConfigMap(Map<String, String> configMap, NamingConvention namingConvention) {\n+        configMap = namingConvention.normalize(configMap);\n+        Long longValue = getLongProperty(KEY_SCHEDULE_DELAY_MILLIS, configMap);\n+        if (longValue != null) {\n+          this.setScheduleDelayMillis(longValue);\n+        }\n+        Integer intValue = getIntProperty(KEY_MAX_QUEUE_SIZE, configMap);\n+        if (intValue != null) {\n+          this.setMaxQueueSize(intValue);\n+        }\n+        intValue = getIntProperty(KEY_MAX_EXPORT_BATCH_SIZE, configMap);\n+        if (intValue != null) {\n+          this.setMaxExportBatchSize(intValue);\n+        }\n+        intValue = getIntProperty(KEY_EXPORT_TIMEOUT_MILLIS, configMap);\n+        if (intValue != null) {\n+          this.setExporterTimeoutMillis(intValue);\n+        }\n+        Boolean boolValue = getBooleanProperty(KEY_SAMPLED, configMap);\n+        if (boolValue != null) {\n+          this.setExportOnlySampled(boolValue);\n+        }\n+        return this;\n+      }\n+\n+      /**\n+       * Sets the configuration values from the given properties object for only the available keys.\n+       * This method looks for the following keys:\n+       *\n+       * <ul>\n+       *   <li>{@code otel.bsp.schedule.delay}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code otel.bsp.max.queue}: to set the maximum queue size.\n+       *   <li>{@code otel.bsp.max.export.batch}: to set the maximum batch size.\n+       *   <li>{@code otel.bsp.export.timeout}: to set the maximum allowed time to export data.\n+       *   <li>{@code otel.bsp.export.sampled}: to set whether only sampled spans should be\n+       *       exported.\n+       * </ul>\n+       *\n+       * @param properties {@link Properties} holding the configuration values.\n+       * @return this.\n+       */\n+      public Builder readProperties(Properties properties) {\n+        Long longValue = getLongProperty(KEY_SCHEDULE_DELAY_MILLIS, properties);\n+        if (longValue != null) {\n+          this.setScheduleDelayMillis(longValue);\n+        }\n+        Integer intValue = getIntProperty(KEY_MAX_QUEUE_SIZE, properties);\n+        if (intValue != null) {\n+          this.setMaxQueueSize(intValue);\n+        }\n+        intValue = getIntProperty(KEY_MAX_EXPORT_BATCH_SIZE, properties);\n+        if (intValue != null) {\n+          this.setMaxExportBatchSize(intValue);\n+        }\n+        intValue = getIntProperty(KEY_EXPORT_TIMEOUT_MILLIS, properties);\n+        if (intValue != null) {\n+          this.setExporterTimeoutMillis(intValue);\n+        }\n+        Boolean boolValue = getBooleanProperty(KEY_SAMPLED, properties);\n+        if (boolValue != null) {\n+          this.setExportOnlySampled(boolValue);\n+        }\n+        return this;\n+      }", "originalCommit": "2a0a5b0b6e16176445c91d26e1fcc9e326c5ff05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ3ODE4Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r411478186", "bodyText": "return fromConfigMap(Maps.fromProperties(properties), NamingConvention.DOT);", "author": "bogdandrutu", "createdAt": "2020-04-20T15:36:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ3NzYxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY5NzExMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r412697110", "bodyText": "I overlooked the possibility to coerce a Property object into a Map!", "author": "thisthat", "createdAt": "2020-04-22T06:11:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ3NzYxNw=="}], "type": "inlineReview", "revised_code": {"commit": "fc02ade502a55a23264b30456fe4d08b557b69ea", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\nindex 86848acc8..506367894 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n\n@@ -355,7 +355,7 @@ public final class BatchSpansProcessor implements SpanProcessor {\n      * @since 0.4.0\n      */\n     public static Config getDefault() {\n-      return builder().build();\n+      return newBuilder().build();\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ3OTg2MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r411479860", "bodyText": "Would call return readProperties(System.getProperties())", "author": "bogdandrutu", "createdAt": "2020-04-20T15:38:16Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -411,4 +327,372 @@ public void run() {\n       }\n     }\n   }\n+\n+  @Immutable\n+  @AutoValue\n+  public abstract static class Config {\n+\n+    private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+    private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+    private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+    private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+    private static final boolean DEFAULT_EXPORT_ONLY_SAMPLED = true;\n+\n+    public abstract boolean isExportOnlySampled();\n+\n+    public abstract long getScheduleDelayMillis();\n+\n+    public abstract int getMaxQueueSize();\n+\n+    public abstract int getMaxExportBatchSize();\n+\n+    public abstract int getExporterTimeoutMillis();\n+\n+    /**\n+     * Creates a {@link Config} object using the default configuration.\n+     *\n+     * @return The {@link Config} object.\n+     * @since 0.4.0\n+     */\n+    public static Config getDefault() {\n+      return builder().build();\n+    }\n+\n+    /**\n+     * Creates a {@link Config} object reading the configuration values from the environment and\n+     * from system properties. System properties override values defined in the environment. If a\n+     * configuration value is missing, it uses the default value.\n+     *\n+     * @return The {@link Config} object.\n+     * @since 0.4.0\n+     */\n+    public static Config loadFromDefaultSources() {\n+      return builder().readEnvironment().readSystemProperties().build();\n+    }\n+\n+    /**\n+     * Returns a new {@link Builder} with default options.\n+     *\n+     * @return a new {@code Builder} with default options.\n+     * @since 0.4.0\n+     */\n+    public static Builder builder() {\n+      return new AutoValue_BatchSpansProcessor_Config.Builder()\n+          .setScheduleDelayMillis(DEFAULT_SCHEDULE_DELAY_MILLIS)\n+          .setMaxQueueSize(DEFAULT_MAX_QUEUE_SIZE)\n+          .setMaxExportBatchSize(DEFAULT_MAX_EXPORT_BATCH_SIZE)\n+          .setExporterTimeoutMillis(DEFAULT_EXPORT_TIMEOUT_MILLIS)\n+          .setExportOnlySampled(DEFAULT_EXPORT_ONLY_SAMPLED);\n+    }\n+\n+    @AutoValue.Builder\n+    public abstract static class Builder {\n+\n+      private static final String KEY_SCHEDULE_DELAY_MILLIS = \"otel.bsp.schedule.delay\";\n+      private static final String KEY_MAX_QUEUE_SIZE = \"otel.bsp.max.queue\";\n+      private static final String KEY_MAX_EXPORT_BATCH_SIZE = \"otel.bsp.max.export.batch\";\n+      private static final String KEY_EXPORT_TIMEOUT_MILLIS = \"otel.bsp.export.timeout\";\n+      private static final String KEY_SAMPLED = \"otel.bsp.export.sampled\";\n+\n+      @VisibleForTesting\n+      protected enum NamingConvention {\n+        DOT {\n+          @Nonnull\n+          @Override\n+          public String normalize(@Nonnull String key) {\n+            return key.toLowerCase();\n+          }\n+        },\n+        ENV_VAR {\n+          @Nonnull\n+          @Override\n+          public String normalize(@Nonnull String key) {\n+            return key.toLowerCase().replace(\"_\", \".\");\n+          }\n+        };\n+\n+        @Nonnull\n+        public abstract String normalize(@Nonnull String key);\n+\n+        public Map<String, String> normalize(@Nonnull Map<String, String> map) {\n+          Map<String, String> properties = new HashMap<>();\n+          for (Map.Entry<String, String> entry : map.entrySet()) {\n+            properties.put(normalize(entry.getKey()), entry.getValue());\n+          }\n+          return Collections.unmodifiableMap(properties);\n+        }\n+      }\n+\n+      /**\n+       * Sets the configuration values from the given configuration map for only the available keys.\n+       * This method looks for the following keys:\n+       *\n+       * <ul>\n+       *   <li>{@code otel.bsp.schedule.delay}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code otel.bsp.max.queue}: to set the maximum queue size.\n+       *   <li>{@code otel.bsp.max.export.batch}: to set the maximum batch size.\n+       *   <li>{@code otel.bsp.export.timeout}: to set the maximum allowed time to export data.\n+       *   <li>{@code otel.bsp.export.sampled}: to set whether only sampled spans should be\n+       *       exported.\n+       * </ul>\n+       *\n+       * @param configMap {@link Map} holding the configuration values.\n+       * @return this.\n+       */\n+      @VisibleForTesting\n+      Builder fromConfigMap(Map<String, String> configMap, NamingConvention namingConvention) {\n+        configMap = namingConvention.normalize(configMap);\n+        Long longValue = getLongProperty(KEY_SCHEDULE_DELAY_MILLIS, configMap);\n+        if (longValue != null) {\n+          this.setScheduleDelayMillis(longValue);\n+        }\n+        Integer intValue = getIntProperty(KEY_MAX_QUEUE_SIZE, configMap);\n+        if (intValue != null) {\n+          this.setMaxQueueSize(intValue);\n+        }\n+        intValue = getIntProperty(KEY_MAX_EXPORT_BATCH_SIZE, configMap);\n+        if (intValue != null) {\n+          this.setMaxExportBatchSize(intValue);\n+        }\n+        intValue = getIntProperty(KEY_EXPORT_TIMEOUT_MILLIS, configMap);\n+        if (intValue != null) {\n+          this.setExporterTimeoutMillis(intValue);\n+        }\n+        Boolean boolValue = getBooleanProperty(KEY_SAMPLED, configMap);\n+        if (boolValue != null) {\n+          this.setExportOnlySampled(boolValue);\n+        }\n+        return this;\n+      }\n+\n+      /**\n+       * Sets the configuration values from the given properties object for only the available keys.\n+       * This method looks for the following keys:\n+       *\n+       * <ul>\n+       *   <li>{@code otel.bsp.schedule.delay}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code otel.bsp.max.queue}: to set the maximum queue size.\n+       *   <li>{@code otel.bsp.max.export.batch}: to set the maximum batch size.\n+       *   <li>{@code otel.bsp.export.timeout}: to set the maximum allowed time to export data.\n+       *   <li>{@code otel.bsp.export.sampled}: to set whether only sampled spans should be\n+       *       exported.\n+       * </ul>\n+       *\n+       * @param properties {@link Properties} holding the configuration values.\n+       * @return this.\n+       */\n+      public Builder readProperties(Properties properties) {\n+        Long longValue = getLongProperty(KEY_SCHEDULE_DELAY_MILLIS, properties);\n+        if (longValue != null) {\n+          this.setScheduleDelayMillis(longValue);\n+        }\n+        Integer intValue = getIntProperty(KEY_MAX_QUEUE_SIZE, properties);\n+        if (intValue != null) {\n+          this.setMaxQueueSize(intValue);\n+        }\n+        intValue = getIntProperty(KEY_MAX_EXPORT_BATCH_SIZE, properties);\n+        if (intValue != null) {\n+          this.setMaxExportBatchSize(intValue);\n+        }\n+        intValue = getIntProperty(KEY_EXPORT_TIMEOUT_MILLIS, properties);\n+        if (intValue != null) {\n+          this.setExporterTimeoutMillis(intValue);\n+        }\n+        Boolean boolValue = getBooleanProperty(KEY_SAMPLED, properties);\n+        if (boolValue != null) {\n+          this.setExportOnlySampled(boolValue);\n+        }\n+        return this;\n+      }\n+\n+      /**\n+       * Sets the configuration values from environment variables for only the available keys. This\n+       * method looks for the following keys:\n+       *\n+       * <ul>\n+       *   <li>{@code OTEL_BSP_SCHEDULE_DELAY}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code OTEL_BSP_MAX_QUEUE}: to set the maximum queue size.\n+       *   <li>{@code OTEL_BSP_MAX_EXPORT_BATCH}: to set the maximum batch size.\n+       *   <li>{@code OTEL_BSP_EXPORT_TIMEOUT}: to set the maximum allowed time to export data.\n+       *   <li>{@code OTEL_BSP_EXPORT_SAMPLED}: to set whether only sampled spans should be\n+       *       exported.\n+       * </ul>\n+       *\n+       * @return this.\n+       */\n+      public Builder readEnvironment() {\n+        return fromConfigMap(System.getenv(), NamingConvention.ENV_VAR);\n+      }\n+\n+      /**\n+       * Sets the configuration values from system properties for only the available keys. This\n+       * method looks for the following keys:\n+       *\n+       * <ul>\n+       *   <li>{@code otel.bsp.schedule.delay}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code otel.bsp.max.queue}: to set the maximum queue size.\n+       *   <li>{@code otel.bsp.max.export.batch}: to set the maximum batch size.\n+       *   <li>{@code otel.bsp.export.timeout}: to set the maximum allowed time to export data.\n+       *   <li>{@code otel.bsp.export.sampled}: to set whether only sampled spans should be\n+       *       reported.\n+       * </ul>\n+       *\n+       * @return this.\n+       */\n+      public Builder readSystemProperties() {\n+        return fromConfigMap(Maps.fromProperties(System.getProperties()), NamingConvention.DOT);", "originalCommit": "2a0a5b0b6e16176445c91d26e1fcc9e326c5ff05", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc02ade502a55a23264b30456fe4d08b557b69ea", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\nindex 86848acc8..506367894 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n\n@@ -355,7 +355,7 @@ public final class BatchSpansProcessor implements SpanProcessor {\n      * @since 0.4.0\n      */\n     public static Config getDefault() {\n-      return builder().build();\n+      return newBuilder().build();\n     }\n \n     /**\n"}}, {"oid": "fc02ade502a55a23264b30456fe4d08b557b69ea", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/fc02ade502a55a23264b30456fe4d08b557b69ea", "message": "Implement Configuration for BatchSpanProcessor", "committedDate": "2020-04-22T06:42:51Z", "type": "forcePushed"}, {"oid": "5671f56450ed0ef71548c0b57f6a1bf43f6ee191", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5671f56450ed0ef71548c0b57f6a1bf43f6ee191", "message": "Add config class for BatchSpanProcessor", "committedDate": "2020-04-22T07:11:48Z", "type": "commit"}, {"oid": "9982c8f9cc71bf12ace644e57238569ea84c4014", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9982c8f9cc71bf12ace644e57238569ea84c4014", "message": "Implement Configuration for BatchSpanProcessor", "committedDate": "2020-04-22T07:13:18Z", "type": "commit"}, {"oid": "67a4741b419a5e57a027f7c5997c506b95c0f0fa", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/67a4741b419a5e57a027f7c5997c506b95c0f0fa", "message": "goJF after rebase", "committedDate": "2020-04-22T07:15:27Z", "type": "commit"}, {"oid": "67a4741b419a5e57a027f7c5997c506b95c0f0fa", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/67a4741b419a5e57a027f7c5997c506b95c0f0fa", "message": "goJF after rebase", "committedDate": "2020-04-22T07:15:27Z", "type": "forcePushed"}]}