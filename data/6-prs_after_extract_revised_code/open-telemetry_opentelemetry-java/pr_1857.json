{"pr_number": 1857, "pr_title": "Make OpenTelemetrySdk implement the OpenTelemetry interface and have SPI find it.", "pr_createdAt": "2020-10-22T05:29:48Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1857", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI5MzU3Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1857#discussion_r510293573", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * OpenTelemetry}, if none has been set via {@link #set(OpenTelemetry)} will be created with any\n          \n          \n            \n             * OpenTelemetry}, if none has been set via {@link #set(OpenTelemetry)}, will be created with any", "author": "jkwatson", "createdAt": "2020-10-22T16:21:12Z", "path": "api/src/main/java/io/opentelemetry/OpenTelemetry.java", "diffHunk": "@@ -17,18 +16,47 @@\n /**\n  * The entrypoint to telemetry functionality for tracing, metrics and baggage.\n  *\n- * <p>The default for the OpenTelemetry API will include any {@link\n- * io.opentelemetry.trace.spi.TracerProviderFactory}, {@link\n- * io.opentelemetry.metrics.spi.MeterProviderFactory}, or {@link\n- * io.opentelemetry.baggage.spi.BaggageManagerFactory} found on the classpath, or otherwise will be\n+ * <p>A global singleton can be retrieved by {@link #get()}. The default for the returned {@link\n+ * OpenTelemetry}, if none has been set via {@link #set(OpenTelemetry)} will be created with any", "originalCommit": "400b2205421f9e7261578b9911aaaa5b33200da6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "980644f9f189d6e20eef41d96e8eb64bb1b8d5b1", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/OpenTelemetry.java b/api/src/main/java/io/opentelemetry/OpenTelemetry.java\nindex 854400724..be27f40f3 100644\n--- a/api/src/main/java/io/opentelemetry/OpenTelemetry.java\n+++ b/api/src/main/java/io/opentelemetry/OpenTelemetry.java\n\n@@ -17,7 +17,7 @@ import io.opentelemetry.trace.TracerProvider;\n  * The entrypoint to telemetry functionality for tracing, metrics and baggage.\n  *\n  * <p>A global singleton can be retrieved by {@link #get()}. The default for the returned {@link\n- * OpenTelemetry}, if none has been set via {@link #set(OpenTelemetry)} will be created with any\n+ * OpenTelemetry}, if none has been set via {@link #set(OpenTelemetry)}, will be created with any\n  * {@link io.opentelemetry.spi.OpenTelemetryFactory}, {@link\n  * io.opentelemetry.trace.spi.TracerProviderFactory} or {@link\n  * io.opentelemetry.metrics.spi.MeterProviderFactory} found on the classpath, or otherwise will be\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI5NDY2OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1857#discussion_r510294668", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * #get()} will return the {@link OpenTelemetry}. This should be called once as early as possible\n          \n          \n            \n               * #get()} will return the provided {@link OpenTelemetry} instance. This should be called once as early as possible", "author": "jkwatson", "createdAt": "2020-10-22T16:22:49Z", "path": "api/src/main/java/io/opentelemetry/OpenTelemetry.java", "diffHunk": "@@ -17,18 +16,47 @@\n /**\n  * The entrypoint to telemetry functionality for tracing, metrics and baggage.\n  *\n- * <p>The default for the OpenTelemetry API will include any {@link\n- * io.opentelemetry.trace.spi.TracerProviderFactory}, {@link\n- * io.opentelemetry.metrics.spi.MeterProviderFactory}, or {@link\n- * io.opentelemetry.baggage.spi.BaggageManagerFactory} found on the classpath, or otherwise will be\n+ * <p>A global singleton can be retrieved by {@link #get()}. The default for the returned {@link\n+ * OpenTelemetry}, if none has been set via {@link #set(OpenTelemetry)} will be created with any\n+ * {@link io.opentelemetry.spi.OpenTelemetryFactory}, {@link\n+ * io.opentelemetry.trace.spi.TracerProviderFactory} or {@link\n+ * io.opentelemetry.metrics.spi.MeterProviderFactory} found on the classpath, or otherwise will be\n  * default, with no-op behavior.\n  *\n+ * <p>If using the OpenTelemetry SDK, you may want to instantiate the {@link OpenTelemetry} to\n+ * provide configuration, for example of {@code Resource} or {@code Sampler}. See {@code\n+ * OpenTelemetrySdk} and {@code OpenTelemetrySdk.builder} for information on how to construct the\n+ * SDK {@link OpenTelemetry}.\n+ *\n  * @see TracerProvider\n  * @see MeterProvider\n- * @see BaggageManager\n  */\n public interface OpenTelemetry {\n \n+  /**\n+   * Returns the registered global {@link OpenTelemetry}. If no call to {@link #set(OpenTelemetry)}\n+   * has been made so far, a default {@link OpenTelemetry} composed of functionality any {@link\n+   * io.opentelemetry.spi.OpenTelemetryFactory}, {@link\n+   * io.opentelemetry.trace.spi.TracerProviderFactory} or{@link\n+   * io.opentelemetry.metrics.spi.MeterProviderFactory}, found on the classpath, or otherwise will\n+   * be default, with no-op behavior.\n+   *\n+   * @throws IllegalStateException if a provider has been specified by system property using the\n+   *     interface FQCN but the specified provider cannot be found.\n+   */\n+  static OpenTelemetry get() {\n+    return DefaultOpenTelemetry.getGlobalOpenTelemetry();\n+  }\n+\n+  /**\n+   * Sets the {@link OpenTelemetry} that should be the global instance. Future calls to {@link\n+   * #get()} will return the {@link OpenTelemetry}. This should be called once as early as possible", "originalCommit": "400b2205421f9e7261578b9911aaaa5b33200da6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "980644f9f189d6e20eef41d96e8eb64bb1b8d5b1", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/OpenTelemetry.java b/api/src/main/java/io/opentelemetry/OpenTelemetry.java\nindex 854400724..be27f40f3 100644\n--- a/api/src/main/java/io/opentelemetry/OpenTelemetry.java\n+++ b/api/src/main/java/io/opentelemetry/OpenTelemetry.java\n\n@@ -17,7 +17,7 @@ import io.opentelemetry.trace.TracerProvider;\n  * The entrypoint to telemetry functionality for tracing, metrics and baggage.\n  *\n  * <p>A global singleton can be retrieved by {@link #get()}. The default for the returned {@link\n- * OpenTelemetry}, if none has been set via {@link #set(OpenTelemetry)} will be created with any\n+ * OpenTelemetry}, if none has been set via {@link #set(OpenTelemetry)}, will be created with any\n  * {@link io.opentelemetry.spi.OpenTelemetryFactory}, {@link\n  * io.opentelemetry.trace.spi.TracerProviderFactory} or {@link\n  * io.opentelemetry.metrics.spi.MeterProviderFactory} found on the classpath, or otherwise will be\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI5NjkzNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1857#discussion_r510296935", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * io.opentelemetry.spi.OpenTelemetryFactor} with the value of the fully qualified class name.\n          \n          \n            \n             * io.opentelemetry.spi.OpenTelemetryFactory} with the value of the fully qualified class name.", "author": "jkwatson", "createdAt": "2020-10-22T16:26:10Z", "path": "api/src/main/java/io/opentelemetry/spi/OpenTelemetryFactory.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.spi;\n+\n+import io.opentelemetry.OpenTelemetry;\n+\n+/**\n+ * A service provider interface (SPI) for a {@link OpenTelemetry}. Fully qualified class name of the\n+ * implementation should be registered in a resource file {@code\n+ * META-INF/services/io.opentelemetry.spi.OpenTelemetryFactory}.\n+ *\n+ * <p>A specific implementation can be selected by setting the system property {@code\n+ * io.opentelemetry.spi.OpenTelemetryFactor} with the value of the fully qualified class name.", "originalCommit": "400b2205421f9e7261578b9911aaaa5b33200da6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "980644f9f189d6e20eef41d96e8eb64bb1b8d5b1", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/spi/OpenTelemetryFactory.java b/api/src/main/java/io/opentelemetry/spi/OpenTelemetryFactory.java\nindex 9eb06698a..c80cf2dbd 100644\n--- a/api/src/main/java/io/opentelemetry/spi/OpenTelemetryFactory.java\n+++ b/api/src/main/java/io/opentelemetry/spi/OpenTelemetryFactory.java\n\n@@ -13,10 +13,10 @@ import io.opentelemetry.OpenTelemetry;\n  * META-INF/services/io.opentelemetry.spi.OpenTelemetryFactory}.\n  *\n  * <p>A specific implementation can be selected by setting the system property {@code\n- * io.opentelemetry.spi.OpenTelemetryFactor} with the value of the fully qualified class name.\n+ * io.opentelemetry.spi.OpenTelemetryFactory} with the value of the fully qualified class name.\n  */\n public interface OpenTelemetryFactory {\n \n-  /** Returns a new {@link OpenTelemetry}. */\n+  /** Returns a new {@link OpenTelemetry} instance. */\n   OpenTelemetry create();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI5NzIxMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1857#discussion_r510297212", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /** Returns a new {@link OpenTelemetry}. */\n          \n          \n            \n              /** Returns a new {@link OpenTelemetry} instance. */", "author": "jkwatson", "createdAt": "2020-10-22T16:26:33Z", "path": "api/src/main/java/io/opentelemetry/spi/OpenTelemetryFactory.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.spi;\n+\n+import io.opentelemetry.OpenTelemetry;\n+\n+/**\n+ * A service provider interface (SPI) for a {@link OpenTelemetry}. Fully qualified class name of the\n+ * implementation should be registered in a resource file {@code\n+ * META-INF/services/io.opentelemetry.spi.OpenTelemetryFactory}.\n+ *\n+ * <p>A specific implementation can be selected by setting the system property {@code\n+ * io.opentelemetry.spi.OpenTelemetryFactor} with the value of the fully qualified class name.\n+ */\n+public interface OpenTelemetryFactory {\n+\n+  /** Returns a new {@link OpenTelemetry}. */", "originalCommit": "400b2205421f9e7261578b9911aaaa5b33200da6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "980644f9f189d6e20eef41d96e8eb64bb1b8d5b1", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/spi/OpenTelemetryFactory.java b/api/src/main/java/io/opentelemetry/spi/OpenTelemetryFactory.java\nindex 9eb06698a..c80cf2dbd 100644\n--- a/api/src/main/java/io/opentelemetry/spi/OpenTelemetryFactory.java\n+++ b/api/src/main/java/io/opentelemetry/spi/OpenTelemetryFactory.java\n\n@@ -13,10 +13,10 @@ import io.opentelemetry.OpenTelemetry;\n  * META-INF/services/io.opentelemetry.spi.OpenTelemetryFactory}.\n  *\n  * <p>A specific implementation can be selected by setting the system property {@code\n- * io.opentelemetry.spi.OpenTelemetryFactor} with the value of the fully qualified class name.\n+ * io.opentelemetry.spi.OpenTelemetryFactory} with the value of the fully qualified class name.\n  */\n public interface OpenTelemetryFactory {\n \n-  /** Returns a new {@link OpenTelemetry}. */\n+  /** Returns a new {@link OpenTelemetry} instance. */\n   OpenTelemetry create();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI5NzU2MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1857#discussion_r510297560", "bodyText": "???", "author": "jkwatson", "createdAt": "2020-10-22T16:27:07Z", "path": "examples/http/src/main/java/io/opentelemetry/example/http/HttpClient.java", "diffHunk": "@@ -37,7 +37,7 @@\n \n   private static void initTracerSdk() {\n     // Get the tracer management instance.\n-    TracerSdkManagement tracerManagement = OpenTelemetrySdk.getTracerManagement();\n+    TracerSdkManagement tracerManagement = $1erManagement();", "originalCommit": "400b2205421f9e7261578b9911aaaa5b33200da6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU4MDAwMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1857#discussion_r510580001", "bodyText": "Had an IntelliJ mishap and didn't compile the examples \ud83d\ude05  But I will revert the whole folder anyways", "author": "anuraaga", "createdAt": "2020-10-23T03:57:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI5NzU2MA=="}], "type": "inlineReview", "revised_code": {"commit": "980644f9f189d6e20eef41d96e8eb64bb1b8d5b1", "chunk": "diff --git a/examples/http/src/main/java/io/opentelemetry/example/http/HttpClient.java b/examples/http/src/main/java/io/opentelemetry/example/http/HttpClient.java\nindex 8122fb71a..c9dc095d0 100644\n--- a/examples/http/src/main/java/io/opentelemetry/example/http/HttpClient.java\n+++ b/examples/http/src/main/java/io/opentelemetry/example/http/HttpClient.java\n\n@@ -37,7 +37,7 @@ public class HttpClient {\n \n   private static void initTracerSdk() {\n     // Get the tracer management instance.\n-    TracerSdkManagement tracerManagement = $1erManagement();\n+    TracerSdkManagement tracerManagement = OpenTelemetrySdk.getTracerManagement();\n     // Show that multiple exporters can be used\n \n     // Set to export the traces also to a log file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI5ODE0OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1857#discussion_r510298148", "bodyText": "we shouldn't update examples until we do a release, correct? They should be pointing at the latest release, not a snapshot.", "author": "jkwatson", "createdAt": "2020-10-22T16:28:03Z", "path": "examples/grpc/src/main/java/io/opentelemetry/example/HelloWorldServer.java", "diffHunk": "@@ -91,7 +91,7 @@ private void stop() {\n \n   private void initTracer() {\n     // Get the tracer management instance\n-    TracerSdkManagement tracerManagement = OpenTelemetrySdk.getTracerManagement();\n+    TracerSdkManagement tracerManagement = OpenTelemetrySdk.getGlobalTracerManagement();", "originalCommit": "400b2205421f9e7261578b9911aaaa5b33200da6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "980644f9f189d6e20eef41d96e8eb64bb1b8d5b1", "chunk": "diff --git a/examples/grpc/src/main/java/io/opentelemetry/example/HelloWorldServer.java b/examples/grpc/src/main/java/io/opentelemetry/example/HelloWorldServer.java\nindex e92dc6602..714e48c73 100644\n--- a/examples/grpc/src/main/java/io/opentelemetry/example/HelloWorldServer.java\n+++ b/examples/grpc/src/main/java/io/opentelemetry/example/HelloWorldServer.java\n\n@@ -91,7 +91,7 @@ public class HelloWorldServer {\n \n   private void initTracer() {\n     // Get the tracer management instance\n-    TracerSdkManagement tracerManagement = OpenTelemetrySdk.getGlobalTracerManagement();\n+    TracerSdkManagement tracerManagement = OpenTelemetrySdk.getTracerManagement();\n     // Set to process the the spans by the LogExporter\n     tracerManagement.addSpanProcessor(SimpleSpanProcessor.newBuilder(exporter).build());\n   }\n"}}, {"oid": "980644f9f189d6e20eef41d96e8eb64bb1b8d5b1", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/980644f9f189d6e20eef41d96e8eb64bb1b8d5b1", "message": "Make OpenTelemetrySdk implement the OpenTelemetry interface and have SPI find it.", "committedDate": "2020-10-23T04:09:05Z", "type": "commit"}, {"oid": "980644f9f189d6e20eef41d96e8eb64bb1b8d5b1", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/980644f9f189d6e20eef41d96e8eb64bb1b8d5b1", "message": "Make OpenTelemetrySdk implement the OpenTelemetry interface and have SPI find it.", "committedDate": "2020-10-23T04:09:05Z", "type": "forcePushed"}]}