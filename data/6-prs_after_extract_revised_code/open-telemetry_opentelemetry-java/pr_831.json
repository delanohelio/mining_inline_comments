{"pr_number": 831, "pr_title": "Add AllLabels Batcher and install default Barcher for Counters", "pr_createdAt": "2020-02-07T02:32:18Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/831", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI3ODEzOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r376278138", "bodyText": "Nit: 2020", "author": "thisthat", "createdAt": "2020-02-07T08:57:51Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractBoundInstrument.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors", "originalCommit": "ac039e05188056919bcd5de466d6159c3f9253ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUzNjg1NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r376536854", "bodyText": "This file was moved, and merged in a separate PR. So no problems with year here.", "author": "bogdandrutu", "createdAt": "2020-02-07T18:22:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI3ODEzOA=="}], "type": "inlineReview", "revised_code": {"commit": "f912b335031bf2eb4e767a5f49f3d29601175664", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractBoundInstrument.java b/sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractBoundInstrument.java\nindex c2dc4c228..2b15ccb4c 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractBoundInstrument.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractBoundInstrument.java\n\n@@ -61,12 +61,12 @@ abstract class AbstractBoundInstrument {\n     return refCountMapped.compareAndSet(0L, 1L);\n   }\n \n-  void updateLong(long value) {\n-    aggregator.updateLong(value);\n+  void recordLong(long value) {\n+    aggregator.recordLong(value);\n   }\n \n-  void updateDouble(double value) {\n-    aggregator.updateDouble(value);\n+  void recordDouble(double value) {\n+    aggregator.recordDouble(value);\n   }\n \n   void checkpoint() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMwOTc5Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r376309792", "bodyText": "From your other PR #833, methods recordLong(long) and recordDouble(double) are introduced with the same Javadoc. Correct me if I am wrong: these two methods are for \"Measures\" metrics while the methods in the other PR are for \"Counters\". If so, I would update the doc to make this explicit", "author": "thisthat", "createdAt": "2020-02-07T10:06:50Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/Aggregator.java", "diffHunk": "@@ -30,31 +30,22 @@\n   void merge(T aggregator);\n \n   /**\n-   * LongAggregator represents the base class for all the available aggregations that work with long\n-   * values.\n+   * Checkpoints this aggregator by saving the previous value and resetting it. The old value is\n+   * available to \"merge\".\n    */\n-  @ThreadSafe\n-  interface LongAggregator<T extends LongAggregator<?>> extends Aggregator<T> {\n+  void checkpoint();\n \n-    /**\n-     * Updates the current aggregator with a newly recorded value.\n-     *\n-     * @param value the new {@code long} value to be added.\n-     */\n-    void update(long value);\n-  }\n+  /**\n+   * Updates the current aggregator with a newly recorded long value.\n+   *\n+   * @param value the new {@code long} value to be added.\n+   */\n+  void updateLong(long value);", "originalCommit": "ac039e05188056919bcd5de466d6159c3f9253ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE4NDQ5MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r377184490", "bodyText": "Done.", "author": "bogdandrutu", "createdAt": "2020-02-10T16:48:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMwOTc5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "f912b335031bf2eb4e767a5f49f3d29601175664", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/metrics/Aggregator.java b/sdk/src/main/java/io/opentelemetry/sdk/metrics/Aggregator.java\nindex 310663c39..0a66496e5 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/metrics/Aggregator.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/metrics/Aggregator.java\n\n@@ -40,12 +40,12 @@ interface Aggregator<T extends Aggregator<?>> {\n    *\n    * @param value the new {@code long} value to be added.\n    */\n-  void updateLong(long value);\n+  void recordLong(long value);\n \n   /**\n    * Updates the current aggregator with a newly recorded double value.\n    *\n    * @param value the new {@code double} value to be added.\n    */\n-  void updateDouble(double value);\n+  void recordDouble(double value);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMxNzcwOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r376317709", "bodyText": "I am not a huge fan of while(true) loops. I would use a defensive programming design, capping the max exec time of the while. Something like:\ndo {\n...\n} while(timer > 0)\nI am not sold on this, though. What is your opinion?", "author": "thisthat", "createdAt": "2020-02-07T10:24:07Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/BoundRegistry.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import io.opentelemetry.metrics.LabelSet;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+abstract class BoundRegistry<B extends AbstractBoundInstrument> {\n+  private final ConcurrentHashMap<LabelSet, B> bounds;\n+  private final ReentrantLock collectLock;\n+\n+  BoundRegistry() {\n+    bounds = new ConcurrentHashMap<>();\n+    collectLock = new ReentrantLock();\n+  }\n+\n+  B acquire(LabelSet labelSet) {\n+    B bound = bounds.get(labelSet);\n+    if (bound != null && bound.ref()) {\n+      // At this moment it is guaranteed that the Bound is in the map and will not be removed.\n+      return bound;\n+    }\n+\n+    // Missing entry or no longer mapped, try to add a new entry.\n+    bound = newBound(labelSet);\n+    while (true) {\n+      B oldBound = bounds.putIfAbsent(labelSet, bound);\n+      if (oldBound != null) {\n+        if (oldBound.ref()) {\n+          // At this moment it is guaranteed that the Bound is in the map and will not be removed.\n+          return oldBound;\n+        }\n+        // Try to remove the oldBound. This will race with the collect method, but only one will\n+        // succeed.\n+        bounds.remove(labelSet, oldBound);\n+        continue;\n+      }\n+      return bound;", "originalCommit": "ac039e05188056919bcd5de466d6159c3f9253ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI4ODY2MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r377288660", "bodyText": "I am not worried, as you can see we try to remove the value on the critical path if an unmapped value is still in the map, so the while loop is not going to spin more than twice.", "author": "bogdandrutu", "createdAt": "2020-02-10T20:07:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMxNzcwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI5MjEyNw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r377292127", "bodyText": "I'd definitely like to avoid putting in a timer as well. I'm ok with the spin loop. Is there a way to write tests the various scenarios here? Maybe a small stress test would help to alleviate concerns.", "author": "jkwatson", "createdAt": "2020-02-10T20:15:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMxNzcwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "68c76f6dcb0e314064f86f7f31be308495e72b50", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/metrics/BoundRegistry.java b/sdk/src/main/java/io/opentelemetry/sdk/metrics/BoundRegistry.java\nindex 2542e7098..6da146f0e 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/metrics/BoundRegistry.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/metrics/BoundRegistry.java\n\n@@ -38,7 +38,7 @@ abstract class BoundRegistry<B extends AbstractBoundInstrument> {\n     }\n \n     // Missing entry or no longer mapped, try to add a new entry.\n-    bound = newBound(labelSet);\n+    bound = newBound();\n     while (true) {\n       B oldBound = bounds.putIfAbsent(labelSet, bound);\n       if (oldBound != null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ1MjQ5OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r376452499", "bodyText": "2?", "author": "jkwatson", "createdAt": "2020-02-07T15:30:20Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractBoundInstrument.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import io.opentelemetry.metrics.LabelSet;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+abstract class AbstractBoundInstrument {\n+  private final LabelSet labels;\n+  // Atomically counts the number of references (usages) while also keeping a state of\n+  // mapped/unmapped into a registry map.\n+  private final AtomicLong refCountMapped;\n+  private final Aggregator<?> aggregator;\n+\n+  AbstractBoundInstrument(LabelSet labels, Aggregator<?> aggregator) {\n+    this.labels = labels;\n+    this.aggregator = aggregator;\n+    refCountMapped = new AtomicLong(0);\n+  }\n+\n+  /**\n+   * Returns {@code true} if the entry is still mapped and increases the reference usages, if\n+   * unmapped returns {@code false}.\n+   *\n+   * @return {@code true} if successful.\n+   */\n+  boolean ref() {\n+    return (refCountMapped.addAndGet(2L) & 1L) == 0;", "originalCommit": "ac039e05188056919bcd5de466d6159c3f9253ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU0NzY4OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r376547689", "bodyText": "I kinda see what's going on here, but cleverness like this needs some very clear documentation in the code.", "author": "jkwatson", "createdAt": "2020-02-07T18:46:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ1MjQ5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU0ODUyNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r376548524", "bodyText": "will do, sorry this is still work in progress as the PR description says.", "author": "bogdandrutu", "createdAt": "2020-02-07T18:48:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ1MjQ5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU0ODkzOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r376548938", "bodyText": "yep! no worries, just trying to capture my thoughts so we don't lose them.  :)", "author": "jkwatson", "createdAt": "2020-02-07T18:49:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ1MjQ5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYwMjMxOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r378602318", "bodyText": "done.", "author": "bogdandrutu", "createdAt": "2020-02-13T01:12:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ1MjQ5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "f912b335031bf2eb4e767a5f49f3d29601175664", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractBoundInstrument.java b/sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractBoundInstrument.java\nindex c2dc4c228..2b15ccb4c 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractBoundInstrument.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractBoundInstrument.java\n\n@@ -61,12 +61,12 @@ abstract class AbstractBoundInstrument {\n     return refCountMapped.compareAndSet(0L, 1L);\n   }\n \n-  void updateLong(long value) {\n-    aggregator.updateLong(value);\n+  void recordLong(long value) {\n+    aggregator.recordLong(value);\n   }\n \n-  void updateDouble(double value) {\n-    aggregator.updateDouble(value);\n+  void recordDouble(double value) {\n+    aggregator.recordDouble(value);\n   }\n \n   void checkpoint() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ1MjcxMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r376452713", "bodyText": "I would guess that an AtomicInteger would be plenty for this.", "author": "jkwatson", "createdAt": "2020-02-07T15:30:42Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractBoundInstrument.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import io.opentelemetry.metrics.LabelSet;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+abstract class AbstractBoundInstrument {\n+  private final LabelSet labels;\n+  // Atomically counts the number of references (usages) while also keeping a state of\n+  // mapped/unmapped into a registry map.\n+  private final AtomicLong refCountMapped;", "originalCommit": "ac039e05188056919bcd5de466d6159c3f9253ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYzMjk2OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r376632968", "bodyText": "Are you worried about performance/memory?", "author": "bogdandrutu", "createdAt": "2020-02-07T22:15:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ1MjcxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYzNjI0Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r376636247", "bodyText": "A tiny bit, yes. atomic integer updates are much easier, since they don't require multiple words on a 32 bit JVM. I don't know how much we care about that, but it's something to consider. And, I sure hope we don't have more than MAX_INT instruments in a single process.  :)\nIt's a very small thing though; I wouldn't hold up the PR for it.  ;)", "author": "jkwatson", "createdAt": "2020-02-07T22:24:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ1MjcxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU5MzcwMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r381593700", "bodyText": "Please file an issue if this is still a concern :) That change is already merged.", "author": "bogdandrutu", "createdAt": "2020-02-19T22:51:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ1MjcxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYwMDQ0OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r381600448", "bodyText": "I'm not overly concerned. Just thought I'd mention it.  :)", "author": "jkwatson", "createdAt": "2020-02-19T23:09:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ1MjcxMw=="}], "type": "inlineReview", "revised_code": {"commit": "f912b335031bf2eb4e767a5f49f3d29601175664", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractBoundInstrument.java b/sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractBoundInstrument.java\nindex c2dc4c228..2b15ccb4c 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractBoundInstrument.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractBoundInstrument.java\n\n@@ -61,12 +61,12 @@ abstract class AbstractBoundInstrument {\n     return refCountMapped.compareAndSet(0L, 1L);\n   }\n \n-  void updateLong(long value) {\n-    aggregator.updateLong(value);\n+  void recordLong(long value) {\n+    aggregator.recordLong(value);\n   }\n \n-  void updateDouble(double value) {\n-    aggregator.updateDouble(value);\n+  void recordDouble(double value) {\n+    aggregator.recordDouble(value);\n   }\n \n   void checkpoint() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ1NDA5NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r376454094", "bodyText": "rather than using ref counting, can we instead use a map with weak references for values? This ref counting seems like an overly baroque way to deal with this issue, and adds a significant amount of complexity to this code.", "author": "jkwatson", "createdAt": "2020-02-07T15:33:07Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/BoundRegistry.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import io.opentelemetry.metrics.LabelSet;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+abstract class BoundRegistry<B extends AbstractBoundInstrument> {\n+  private final ConcurrentHashMap<LabelSet, B> bounds;\n+  private final ReentrantLock collectLock;\n+\n+  BoundRegistry() {\n+    bounds = new ConcurrentHashMap<>();\n+    collectLock = new ReentrantLock();\n+  }\n+\n+  B acquire(LabelSet labelSet) {\n+    B bound = bounds.get(labelSet);\n+    if (bound != null && bound.ref()) {\n+      // At this moment it is guaranteed that the Bound is in the map and will not be removed.\n+      return bound;\n+    }\n+\n+    // Missing entry or no longer mapped, try to add a new entry.\n+    bound = newBound(labelSet);\n+    while (true) {\n+      B oldBound = bounds.putIfAbsent(labelSet, bound);\n+      if (oldBound != null) {\n+        if (oldBound.ref()) {", "originalCommit": "ac039e05188056919bcd5de466d6159c3f9253ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE4NTcyMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r377185720", "bodyText": "I hope now it is clearer why I used this, we have threads on critical path adding bounds, then the collector needs to collect them then remove them from the bounds, using weak references may cause uncollected data.", "author": "bogdandrutu", "createdAt": "2020-02-10T16:50:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ1NDA5NA=="}], "type": "inlineReview", "revised_code": {"commit": "68c76f6dcb0e314064f86f7f31be308495e72b50", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/metrics/BoundRegistry.java b/sdk/src/main/java/io/opentelemetry/sdk/metrics/BoundRegistry.java\nindex 2542e7098..6da146f0e 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/metrics/BoundRegistry.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/metrics/BoundRegistry.java\n\n@@ -38,7 +38,7 @@ abstract class BoundRegistry<B extends AbstractBoundInstrument> {\n     }\n \n     // Missing entry or no longer mapped, try to add a new entry.\n-    bound = newBound(labelSet);\n+    bound = newBound();\n     while (true) {\n       B oldBound = bounds.putIfAbsent(labelSet, bound);\n       if (oldBound != null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ1NDgzNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r376454834", "bodyText": "I really think we need to find a lockless way of handling this, as this will be a major source of contention in high-throughput situations.", "author": "jkwatson", "createdAt": "2020-02-07T15:34:18Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/BoundRegistry.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import io.opentelemetry.metrics.LabelSet;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+abstract class BoundRegistry<B extends AbstractBoundInstrument> {\n+  private final ConcurrentHashMap<LabelSet, B> bounds;\n+  private final ReentrantLock collectLock;\n+\n+  BoundRegistry() {\n+    bounds = new ConcurrentHashMap<>();\n+    collectLock = new ReentrantLock();\n+  }\n+\n+  B acquire(LabelSet labelSet) {\n+    B bound = bounds.get(labelSet);\n+    if (bound != null && bound.ref()) {\n+      // At this moment it is guaranteed that the Bound is in the map and will not be removed.\n+      return bound;\n+    }\n+\n+    // Missing entry or no longer mapped, try to add a new entry.\n+    bound = newBound(labelSet);\n+    while (true) {\n+      B oldBound = bounds.putIfAbsent(labelSet, bound);\n+      if (oldBound != null) {\n+        if (oldBound.ref()) {\n+          // At this moment it is guaranteed that the Bound is in the map and will not be removed.\n+          return oldBound;\n+        }\n+        // Try to remove the oldBound. This will race with the collect method, but only one will\n+        // succeed.\n+        bounds.remove(labelSet, oldBound);\n+        continue;\n+      }\n+      return bound;\n+    }\n+  }\n+\n+  void release(B bound) {\n+    bound.unref();\n+  }\n+\n+  /**\n+   * Collects records from all the entries (labelSet, Bound) that changed since the last collect()\n+   * call.\n+   *\n+   * <p>It is possible that some entries\n+   */\n+  void collect(RecordProcessor recordProcessor) {\n+    collectLock.lock();", "originalCommit": "ac039e05188056919bcd5de466d6159c3f9253ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ3MDYyNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r376470624", "bodyText": "Collect is called async, the only reason to have the lock is to ensure one collect call at any moment.", "author": "bogdandrutu", "createdAt": "2020-02-07T16:02:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ1NDgzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU0MzY5NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r376543695", "bodyText": "fair enough.", "author": "jkwatson", "createdAt": "2020-02-07T18:37:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ1NDgzNA=="}], "type": "inlineReview", "revised_code": {"commit": "68c76f6dcb0e314064f86f7f31be308495e72b50", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/metrics/BoundRegistry.java b/sdk/src/main/java/io/opentelemetry/sdk/metrics/BoundRegistry.java\nindex 2542e7098..6da146f0e 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/metrics/BoundRegistry.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/metrics/BoundRegistry.java\n\n@@ -38,7 +38,7 @@ abstract class BoundRegistry<B extends AbstractBoundInstrument> {\n     }\n \n     // Missing entry or no longer mapped, try to add a new entry.\n-    bound = newBound(labelSet);\n+    bound = newBound();\n     while (true) {\n       B oldBound = bounds.putIfAbsent(labelSet, bound);\n       if (oldBound != null) {\n"}}, {"oid": "f912b335031bf2eb4e767a5f49f3d29601175664", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f912b335031bf2eb4e767a5f49f3d29601175664", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-07T18:14:02Z", "type": "forcePushed"}, {"oid": "68c76f6dcb0e314064f86f7f31be308495e72b50", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/68c76f6dcb0e314064f86f7f31be308495e72b50", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-07T18:32:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU0NTM1NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r376545354", "bodyText": "Call this \"boundLabels\"", "author": "jkwatson", "createdAt": "2020-02-07T18:41:23Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/BoundRegistry.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import io.opentelemetry.metrics.LabelSet;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+abstract class BoundRegistry<B extends AbstractBoundInstrument> {\n+  private final ConcurrentHashMap<LabelSet, B> bounds;", "originalCommit": "68c76f6dcb0e314064f86f7f31be308495e72b50", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYzMTM0OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r376631349", "bodyText": "done.", "author": "bogdandrutu", "createdAt": "2020-02-07T22:11:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU0NTM1NA=="}], "type": "inlineReview", "revised_code": {"commit": "a11d3707bc571c4917765bc7aabf983cee062e9a", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/metrics/BoundRegistry.java b/sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractInstrumentWithBindings.java\nsimilarity index 70%\nrename from sdk/src/main/java/io/opentelemetry/sdk/metrics/BoundRegistry.java\nrename to sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractInstrumentWithBindings.java\nindex 6da146f0e..214278f78 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/metrics/BoundRegistry.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractInstrumentWithBindings.java\n\n@@ -17,21 +17,29 @@\n package io.opentelemetry.sdk.metrics;\n \n import io.opentelemetry.metrics.LabelSet;\n+import java.util.List;\n import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.locks.ReentrantLock;\n \n-abstract class BoundRegistry<B extends AbstractBoundInstrument> {\n-  private final ConcurrentHashMap<LabelSet, B> bounds;\n+abstract class AbstractInstrumentWithBindings<B extends AbstractBoundInstrument>\n+    extends AbstractInstrument {\n+  private final ConcurrentHashMap<LabelSet, B> boundLabels;\n   private final ReentrantLock collectLock;\n \n-  BoundRegistry() {\n-    bounds = new ConcurrentHashMap<>();\n+  AbstractInstrumentWithBindings(\n+      String name,\n+      String description,\n+      String unit,\n+      Map<String, String> constantLabels,\n+      List<String> labelKeys) {\n+    super(name, description, unit, constantLabels, labelKeys);\n+    boundLabels = new ConcurrentHashMap<>();\n     collectLock = new ReentrantLock();\n   }\n \n-  B acquire(LabelSet labelSet) {\n-    B bound = bounds.get(labelSet);\n+  final B bindInternal(LabelSet labelSet) {\n+    B bound = boundLabels.get(labelSet);\n     if (bound != null && bound.ref()) {\n       // At this moment it is guaranteed that the Bound is in the map and will not be removed.\n       return bound;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU0NjQ1Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r376546456", "bodyText": "how about \"bind\" and \"release\" as names, rather than ref/unref? Cryptically short method names make me sad.", "author": "jkwatson", "createdAt": "2020-02-07T18:43:48Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractBoundInstrument.java", "diffHunk": "@@ -16,32 +16,57 @@\n \n package io.opentelemetry.sdk.metrics;\n \n-import io.opentelemetry.metrics.LabelSet;\n+import java.util.concurrent.atomic.AtomicLong;\n \n-class AbstractBoundInstrument {\n-  private final LabelSet labels;\n+abstract class AbstractBoundInstrument {\n+  // Atomically counts the number of references (usages) while also keeping a state of\n+  // mapped/unmapped into a registry map.\n+  private final AtomicLong refCountMapped;\n+  private final Aggregator<?> aggregator;\n \n-  AbstractBoundInstrument(LabelSet labels) {\n-    this.labels = labels;\n-    // todo: associate with an aggregator/accumulator\n+  AbstractBoundInstrument(Aggregator<?> aggregator) {\n+    this.aggregator = aggregator;\n+    this.refCountMapped = new AtomicLong(0);\n   }\n \n-  @Override\n-  public boolean equals(Object o) {\n-    if (this == o) {\n-      return true;\n-    }\n-    if (!(o instanceof AbstractBoundInstrument)) {\n+  /**\n+   * Returns {@code true} if the entry is still mapped and increases the reference usages, if\n+   * unmapped returns {@code false}.\n+   *\n+   * @return {@code true} if successful.\n+   */\n+  boolean ref() {", "originalCommit": "68c76f6dcb0e314064f86f7f31be308495e72b50", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU0OTgzNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r376549834", "bodyText": "you Java person :))", "author": "bogdandrutu", "createdAt": "2020-02-07T18:50:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU0NjQ1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYzMTM4OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r376631388", "bodyText": "done.", "author": "bogdandrutu", "createdAt": "2020-02-07T22:11:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU0NjQ1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYzMzAwMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r376633003", "bodyText": "done.", "author": "bogdandrutu", "createdAt": "2020-02-07T22:15:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU0NjQ1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "a11d3707bc571c4917765bc7aabf983cee062e9a", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractBoundInstrument.java b/sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractBoundInstrument.java\nindex e15b082cb..8ccc91639 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractBoundInstrument.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractBoundInstrument.java\n\n@@ -16,9 +16,10 @@\n \n package io.opentelemetry.sdk.metrics;\n \n+import io.opentelemetry.metrics.InstrumentWithBinding.BoundInstrument;\n import java.util.concurrent.atomic.AtomicLong;\n \n-abstract class AbstractBoundInstrument {\n+abstract class AbstractBoundInstrument implements BoundInstrument {\n   // Atomically counts the number of references (usages) while also keeping a state of\n   // mapped/unmapped into a registry map.\n   private final AtomicLong refCountMapped;\n"}}, {"oid": "a11d3707bc571c4917765bc7aabf983cee062e9a", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a11d3707bc571c4917765bc7aabf983cee062e9a", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-07T22:10:42Z", "type": "forcePushed"}, {"oid": "fc4fcf1c8d904ff25c12fd96c2283b026b390f7c", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/fc4fcf1c8d904ff25c12fd96c2283b026b390f7c", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-07T22:15:00Z", "type": "forcePushed"}, {"oid": "c54f8012b7b5f0d2d7f4d0cba1e84d44f75a30f4", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c54f8012b7b5f0d2d7f4d0cba1e84d44f75a30f4", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-07T23:24:01Z", "type": "forcePushed"}, {"oid": "8728040bacad30fd0e6392f573bb157eddb42129", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8728040bacad30fd0e6392f573bb157eddb42129", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-07T23:34:45Z", "type": "forcePushed"}, {"oid": "a756728f9a467f8ba88ac8ead26ae62e31f2d1a6", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a756728f9a467f8ba88ac8ead26ae62e31f2d1a6", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-10T17:14:51Z", "type": "forcePushed"}, {"oid": "15984ec87589de3aff93d22186c33cbfd4a0adb4", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/15984ec87589de3aff93d22186c33cbfd4a0adb4", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-10T17:59:35Z", "type": "forcePushed"}, {"oid": "da8de26bcee520ea080acbf9ba53b55c28ed979a", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/da8de26bcee520ea080acbf9ba53b55c28ed979a", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-10T18:10:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI5MjkzMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r377292933", "bodyText": "rename variable to binding", "author": "jkwatson", "createdAt": "2020-02-10T20:17:00Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractInstrumentWithBinding.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import io.opentelemetry.metrics.LabelSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+abstract class AbstractInstrumentWithBinding<B extends AbstractBoundInstrument>\n+    extends AbstractInstrument {\n+  private final ConcurrentHashMap<LabelSet, B> boundLabels;\n+  private final ReentrantLock collectLock;\n+\n+  AbstractInstrumentWithBinding(\n+      String name,\n+      String description,\n+      String unit,\n+      Map<String, String> constantLabels,\n+      List<String> labelKeys) {\n+    super(name, description, unit, constantLabels, labelKeys);\n+    boundLabels = new ConcurrentHashMap<>();\n+    collectLock = new ReentrantLock();\n+  }\n+\n+  // Cannot make this \"bind\" because of a Java problem if we make this class also implement the\n+  // InstrumentWithBinding then the subclass will fail to compile because of different \"bind\"\n+  // signature. This is a good trade-off.\n+  final B bindInternal(LabelSet labelSet) {\n+    B bound = boundLabels.get(labelSet);", "originalCommit": "da8de26bcee520ea080acbf9ba53b55c28ed979a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYwMTg1Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r378601856", "bodyText": "done.", "author": "bogdandrutu", "createdAt": "2020-02-13T01:10:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI5MjkzMw=="}], "type": "inlineReview", "revised_code": {"commit": "b719a6d0ad308a58f7ee94388f32bcb67eb5ec3d", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractInstrumentWithBinding.java b/sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractInstrumentWithBinding.java\nindex c5bc74ccd..b3d858d04 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractInstrumentWithBinding.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractInstrumentWithBinding.java\n\n@@ -17,6 +17,9 @@\n package io.opentelemetry.sdk.metrics;\n \n import io.opentelemetry.metrics.LabelSet;\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import java.util.Collection;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI5MzEzNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r377293134", "bodyText": "rename to newBinding()", "author": "jkwatson", "createdAt": "2020-02-10T20:17:25Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractInstrumentWithBinding.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import io.opentelemetry.metrics.LabelSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+abstract class AbstractInstrumentWithBinding<B extends AbstractBoundInstrument>\n+    extends AbstractInstrument {\n+  private final ConcurrentHashMap<LabelSet, B> boundLabels;\n+  private final ReentrantLock collectLock;\n+\n+  AbstractInstrumentWithBinding(\n+      String name,\n+      String description,\n+      String unit,\n+      Map<String, String> constantLabels,\n+      List<String> labelKeys) {\n+    super(name, description, unit, constantLabels, labelKeys);\n+    boundLabels = new ConcurrentHashMap<>();\n+    collectLock = new ReentrantLock();\n+  }\n+\n+  // Cannot make this \"bind\" because of a Java problem if we make this class also implement the\n+  // InstrumentWithBinding then the subclass will fail to compile because of different \"bind\"\n+  // signature. This is a good trade-off.\n+  final B bindInternal(LabelSet labelSet) {\n+    B bound = boundLabels.get(labelSet);\n+    if (bound != null && bound.bind()) {\n+      // At this moment it is guaranteed that the Bound is in the map and will not be removed.\n+      return bound;\n+    }\n+\n+    // Missing entry or no longer mapped, try to add a new entry.\n+    bound = newBound();\n+    while (true) {\n+      B oldBound = boundLabels.putIfAbsent(labelSet, bound);\n+      if (oldBound != null) {\n+        if (oldBound.bind()) {\n+          // At this moment it is guaranteed that the Bound is in the map and will not be removed.\n+          return oldBound;\n+        }\n+        // Try to remove the oldBound. This will race with the collect method, but only one will\n+        // succeed.\n+        boundLabels.remove(labelSet, oldBound);\n+        continue;\n+      }\n+      return bound;\n+    }\n+  }\n+\n+  /**\n+   * Collects records from all the entries (labelSet, Bound) that changed since the last collect()\n+   * call.\n+   */\n+  @Override\n+  final void collect(RecordProcessor recordProcessor) {\n+    collectLock.lock();\n+    try {\n+      for (Map.Entry<LabelSet, B> entry : boundLabels.entrySet()) {\n+        if (entry.getValue().tryUnmap()) {\n+          // If able to unmap then remove the record from the current Map. This can race with the\n+          // acquire but because we requested a specific value only one will succeed.\n+          boundLabels.remove(entry.getKey(), entry.getValue());\n+        }\n+\n+        entry.getValue().checkpoint();\n+      }\n+    } finally {\n+      collectLock.unlock();\n+    }\n+  }\n+\n+  abstract B newBound();", "originalCommit": "da8de26bcee520ea080acbf9ba53b55c28ed979a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYwMjI3Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r378602277", "bodyText": "done.", "author": "bogdandrutu", "createdAt": "2020-02-13T01:12:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI5MzEzNA=="}], "type": "inlineReview", "revised_code": {"commit": "b719a6d0ad308a58f7ee94388f32bcb67eb5ec3d", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractInstrumentWithBinding.java b/sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractInstrumentWithBinding.java\nindex c5bc74ccd..b3d858d04 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractInstrumentWithBinding.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractInstrumentWithBinding.java\n\n@@ -17,6 +17,9 @@\n package io.opentelemetry.sdk.metrics;\n \n import io.opentelemetry.metrics.LabelSet;\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import java.util.Collection;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n"}}, {"oid": "b719a6d0ad308a58f7ee94388f32bcb67eb5ec3d", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b719a6d0ad308a58f7ee94388f32bcb67eb5ec3d", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-11T02:26:42Z", "type": "forcePushed"}, {"oid": "e7a73571a89a291b05c106ea8425458ea0001040", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e7a73571a89a291b05c106ea8425458ea0001040", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-12T16:44:50Z", "type": "forcePushed"}, {"oid": "ee375f6d0da2b805cb42dcf7b8156738120650e5", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ee375f6d0da2b805cb42dcf7b8156738120650e5", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-12T17:42:16Z", "type": "forcePushed"}, {"oid": "3a1f076217e421e7e59a76644e71313730f2d115", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/3a1f076217e421e7e59a76644e71313730f2d115", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-12T17:57:55Z", "type": "forcePushed"}, {"oid": "dbd5b96c6f5428ee1985db6cd6d2838eb268f393", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/dbd5b96c6f5428ee1985db6cd6d2838eb268f393", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-12T18:25:36Z", "type": "forcePushed"}, {"oid": "1abf3d319c332502225f49e7caaea8a79bc90832", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1abf3d319c332502225f49e7caaea8a79bc90832", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-12T23:16:21Z", "type": "forcePushed"}, {"oid": "17584c82016588247d74dbd00581eceb51b6aaf9", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/17584c82016588247d74dbd00581eceb51b6aaf9", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-12T23:24:47Z", "type": "forcePushed"}, {"oid": "f03c8cb8145b48a5dbd35b413aec620d1d2dc285", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f03c8cb8145b48a5dbd35b413aec620d1d2dc285", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-13T01:12:42Z", "type": "forcePushed"}, {"oid": "424ac24fdc1df91fd9f939282899e98ba2095aea", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/424ac24fdc1df91fd9f939282899e98ba2095aea", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-13T01:53:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODcxODcxOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r378718719", "bodyText": "I think this should be stopCollection()", "author": "thisthat", "createdAt": "2020-02-13T08:44:01Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/ActiveViewAggregator.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import io.opentelemetry.metrics.LabelSet;\n+import io.opentelemetry.sdk.metrics.aggregator.Aggregator;\n+import io.opentelemetry.sdk.metrics.aggregator.AggregatorFactory;\n+import io.opentelemetry.sdk.metrics.aggregator.NoopAggregator;\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import io.opentelemetry.sdk.metrics.data.MetricData.Descriptor;\n+import io.opentelemetry.sdk.metrics.data.MetricData.Point;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nullable;\n+\n+// The current implementation allows only to change the active ViewAggregator only before any record\n+// or binding happens. This is good for the moment to support default aggregation for all the\n+// instruments but needs to support adding/removing views at any moment, as well as support for\n+// multiple views in the same time.\n+final class ActiveViewAggregator {\n+  private AggregatorMap aggregatorMap;\n+  private volatile ViewAggregator currentViewAggregator;\n+\n+  ActiveViewAggregator() {\n+    currentViewAggregator = new NoopViewAggregator(null, NoopAggregator.getFactory());\n+  }\n+\n+  void addViewAggregator(Descriptor descriptor, AggregatorFactory aggregatorFactory) {\n+    // TODO: Add support to reduce labels.\n+    this.currentViewAggregator = new AllLabelsViewAggregator(descriptor, aggregatorFactory);\n+  }\n+\n+  // Caller needs to call these methods in the following order (while holding a lock):\n+  //  * startCollection();\n+  //  * collect();  // May be called multiple times.\n+  //  * startCollection()", "originalCommit": "424ac24fdc1df91fd9f939282899e98ba2095aea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUxNzEzNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r379517134", "bodyText": "done.", "author": "bogdandrutu", "createdAt": "2020-02-14T16:13:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODcxODcxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "0b3402963565924a6c24798202965ed15e9e9f62", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/metrics/ActiveViewAggregator.java b/sdk/src/main/java/io/opentelemetry/sdk/metrics/ActiveViewAggregator.java\nindex 68e54b272..3ad2d8063 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/metrics/ActiveViewAggregator.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/metrics/ActiveViewAggregator.java\n\n@@ -17,35 +17,64 @@\n package io.opentelemetry.sdk.metrics;\n \n import io.opentelemetry.metrics.LabelSet;\n+import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n import io.opentelemetry.sdk.metrics.aggregator.Aggregator;\n-import io.opentelemetry.sdk.metrics.aggregator.AggregatorFactory;\n-import io.opentelemetry.sdk.metrics.aggregator.NoopAggregator;\n+import io.opentelemetry.sdk.metrics.common.InstrumentType;\n+import io.opentelemetry.sdk.metrics.common.InstrumentValueType;\n import io.opentelemetry.sdk.metrics.data.MetricData;\n import io.opentelemetry.sdk.metrics.data.MetricData.Descriptor;\n-import io.opentelemetry.sdk.metrics.data.MetricData.Point;\n-import java.util.ArrayList;\n+import io.opentelemetry.sdk.metrics.view.Aggregation;\n+import io.opentelemetry.sdk.resources.Resource;\n import java.util.Collection;\n import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.List;\n import java.util.Map;\n import javax.annotation.Nullable;\n \n-// The current implementation allows only to change the active ViewAggregator only before any record\n+// The current implementation allows to change the active ViewAggregator only before any record\n // or binding happens. This is good for the moment to support default aggregation for all the\n // instruments but needs to support adding/removing views at any moment, as well as support for\n // multiple views in the same time.\n final class ActiveViewAggregator {\n+  private final InstrumentType instrumentType;\n+  private final InstrumentValueType instrumentValueType;\n+  private final Resource resource;\n+  private final InstrumentationLibraryInfo instrumentationLibraryInfo;\n   private AggregatorMap aggregatorMap;\n-  private volatile ViewAggregator currentViewAggregator;\n-\n-  ActiveViewAggregator() {\n-    currentViewAggregator = new NoopViewAggregator(null, NoopAggregator.getFactory());\n+  private volatile AggregatorView currentAggregatorView;\n+\n+  ActiveViewAggregator(\n+      InstrumentType instrumentType,\n+      InstrumentValueType instrumentValueType,\n+      Resource resource,\n+      InstrumentationLibraryInfo instrumentationLibraryInfo) {\n+    this.instrumentType = instrumentType;\n+    this.instrumentValueType = instrumentValueType;\n+    this.resource = resource;\n+    this.instrumentationLibraryInfo = instrumentationLibraryInfo;\n+    currentAggregatorView = AggregatorView.getNoop();\n   }\n \n-  void addViewAggregator(Descriptor descriptor, AggregatorFactory aggregatorFactory) {\n+  // TODO: Change this to: void addViewAggregator(View view);\n+  void addView(\n+      String name,\n+      String description,\n+      String unit,\n+      Map<String, String> constantLabels,\n+      Aggregation aggregation) {\n     // TODO: Add support to reduce labels.\n-    this.currentViewAggregator = new AllLabelsViewAggregator(descriptor, aggregatorFactory);\n+    this.currentAggregatorView =\n+        AggregatorView.getAllLabels(\n+            toDescriptor(\n+                name,\n+                description,\n+                unit,\n+                constantLabels,\n+                aggregation,\n+                instrumentType,\n+                instrumentValueType),\n+            resource,\n+            instrumentationLibraryInfo,\n+            aggregation.getAggregatorFactory(instrumentValueType));\n   }\n \n   // Caller needs to call these methods in the following order (while holding a lock):\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODcyNzY2OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r378727668", "bodyText": "I know it is a WIP, but should the constructor initialize an Aggregation?", "author": "thisthat", "createdAt": "2020-02-13T09:02:12Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/DoubleMeasureSdk.java", "diffHunk": "@@ -46,7 +48,12 @@ public void record(double value, LabelSet labelSet) {\n ", "originalCommit": "424ac24fdc1df91fd9f939282899e98ba2095aea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTExOTc4Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r379119787", "bodyText": "The goal for the moment is to get Counters working :)", "author": "bogdandrutu", "createdAt": "2020-02-13T21:09:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODcyNzY2OA=="}], "type": "inlineReview", "revised_code": {"commit": "d93ffa390dbdc6d82e04a191493f0d70867644a6", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/metrics/DoubleMeasureSdk.java b/sdk/src/main/java/io/opentelemetry/sdk/metrics/DoubleMeasureSdk.java\nindex 35188f11c..ed6a2cd82 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/metrics/DoubleMeasureSdk.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/metrics/DoubleMeasureSdk.java\n\n@@ -53,7 +65,7 @@ final class DoubleMeasureSdk extends AbstractInstrumentWithBinding<BoundInstrume\n \n   @Override\n   BoundInstrument newBinding() {\n-    return new BoundInstrument(this.absolute, getActiveViewAggregator());\n+    return new BoundInstrument(this.absolute, getViewManager());\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODcyOTM1Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r378729352", "bodyText": "With #744 I guess this TODO can be removed", "author": "thisthat", "createdAt": "2020-02-13T09:05:36Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/LongSumAggregator.java", "diffHunk": "@@ -16,14 +16,25 @@\n \n package io.opentelemetry.sdk.metrics.aggregator;\n \n+import io.opentelemetry.sdk.metrics.data.MetricData.LongPoint;\n+import io.opentelemetry.sdk.metrics.data.MetricData.Point;\n+import java.util.Map;\n import java.util.concurrent.atomic.AtomicLong;\n \n public final class LongSumAggregator implements Aggregator {\n+  private static final AggregatorFactory AGGREGATOR_FACTORY =\n+      new AggregatorFactory() {\n+        @Override\n+        public Aggregator getAggregator() {\n+          return new LongSumAggregator();\n+        }\n+      };\n+\n   // TODO: Change to use LongAdder when changed to java8.", "originalCommit": "424ac24fdc1df91fd9f939282899e98ba2095aea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk5NTgxMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r378995812", "bodyText": "LongAdder is from java8 not java7 (sad face)", "author": "bogdandrutu", "createdAt": "2020-02-13T17:04:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODcyOTM1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "1f88db9602b3493e3d80bbedd20a82f34127349b", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/LongSumAggregator.java b/sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/LongSumAggregator.java\nindex 8aa1d4b44..ec093a65f 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/LongSumAggregator.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/LongSumAggregator.java\n\n@@ -38,7 +38,7 @@ public final class LongSumAggregator implements Aggregator {\n   }\n \n   @Override\n-  public void mergeAndReset(Aggregator aggregator) {\n+  public void mergeToAndReset(Aggregator aggregator) {\n     if (!(aggregator instanceof LongSumAggregator)) {\n       return;\n     }\n"}}, {"oid": "0b3402963565924a6c24798202965ed15e9e9f62", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0b3402963565924a6c24798202965ed15e9e9f62", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-13T16:52:26Z", "type": "forcePushed"}, {"oid": "f8da8d8148b9fd08d915f3085576ee25c6b6abda", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f8da8d8148b9fd08d915f3085576ee25c6b6abda", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-13T17:05:09Z", "type": "forcePushed"}, {"oid": "1f88db9602b3493e3d80bbedd20a82f34127349b", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1f88db9602b3493e3d80bbedd20a82f34127349b", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-13T20:16:28Z", "type": "forcePushed"}, {"oid": "659adb878571e82ef1f57e91740bb4debef9ef58", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/659adb878571e82ef1f57e91740bb4debef9ef58", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-13T21:06:59Z", "type": "forcePushed"}, {"oid": "33e845d2e8ff84b38898f9233574a17cb5227611", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/33e845d2e8ff84b38898f9233574a17cb5227611", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-13T23:05:37Z", "type": "forcePushed"}, {"oid": "d93ffa390dbdc6d82e04a191493f0d70867644a6", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d93ffa390dbdc6d82e04a191493f0d70867644a6", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-14T01:36:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUyNjQzOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r379526438", "bodyText": "This class name is confusing. Why Map ?", "author": "jkwatson", "createdAt": "2020-02-14T16:30:53Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/AggregatorMap.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import io.opentelemetry.metrics.LabelSet;\n+import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n+import io.opentelemetry.sdk.metrics.aggregator.Aggregator;\n+import io.opentelemetry.sdk.metrics.aggregator.AggregatorFactory;\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import io.opentelemetry.sdk.metrics.data.MetricData.Descriptor;\n+import io.opentelemetry.sdk.metrics.data.MetricData.Point;\n+import io.opentelemetry.sdk.resources.Resource;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+abstract class AggregatorMap {", "originalCommit": "d93ffa390dbdc6d82e04a191493f0d70867644a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUzNTY4OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r379535689", "bodyText": "Maybe \"AggregationStrategy\" would be better?", "author": "jkwatson", "createdAt": "2020-02-14T16:48:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUyNjQzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUzNzM1Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r379537356", "bodyText": "Also, I think this would be better as an interface, since it's internal and we don't need to worry about breaking things by adding new methods.", "author": "jkwatson", "createdAt": "2020-02-14T16:51:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUyNjQzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU5Mjk4MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r379592981", "bodyText": "I am very annoyed with interfaces since I cannot have some implementations in the same file and require an extra file like Aggregator/Aggregators :(.", "author": "bogdandrutu", "createdAt": "2020-02-14T18:59:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUyNjQzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU5NTk5OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r379595998", "bodyText": "yeah, java 7 is a problem. this is all fixed in java 8. Anyway, an abstract class is fine for now.", "author": "jkwatson", "createdAt": "2020-02-14T19:06:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUyNjQzOA=="}], "type": "inlineReview", "revised_code": {"commit": "3268909a85cce42756be3eb004348b73552b945d", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/metrics/AggregatorMap.java b/sdk/src/main/java/io/opentelemetry/sdk/metrics/Batchers.java\nsimilarity index 58%\nrename from sdk/src/main/java/io/opentelemetry/sdk/metrics/AggregatorMap.java\nrename to sdk/src/main/java/io/opentelemetry/sdk/metrics/Batchers.java\nindex 8d841ca78..8c073cecf 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/metrics/AggregatorMap.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/metrics/Batchers.java\n\n@@ -17,9 +17,11 @@\n package io.opentelemetry.sdk.metrics;\n \n import io.opentelemetry.metrics.LabelSet;\n+import io.opentelemetry.sdk.common.Clock;\n import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n import io.opentelemetry.sdk.metrics.aggregator.Aggregator;\n import io.opentelemetry.sdk.metrics.aggregator.AggregatorFactory;\n+import io.opentelemetry.sdk.metrics.aggregator.NoopAggregator;\n import io.opentelemetry.sdk.metrics.data.MetricData;\n import io.opentelemetry.sdk.metrics.data.MetricData.Descriptor;\n import io.opentelemetry.sdk.metrics.data.MetricData.Point;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUyODY4Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r379528682", "bodyText": "I think we can use LabelSetSdk as the key to this map, since it has a well-defined equals/hashcode via autovalue.", "author": "jkwatson", "createdAt": "2020-02-14T16:35:30Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/AggregatorMap.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import io.opentelemetry.metrics.LabelSet;\n+import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n+import io.opentelemetry.sdk.metrics.aggregator.Aggregator;\n+import io.opentelemetry.sdk.metrics.aggregator.AggregatorFactory;\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import io.opentelemetry.sdk.metrics.data.MetricData.Descriptor;\n+import io.opentelemetry.sdk.metrics.data.MetricData.Point;\n+import io.opentelemetry.sdk.resources.Resource;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+abstract class AggregatorMap {\n+  static AggregatorMap getNoop() {\n+    return Noop.INSTANCE;\n+  }\n+\n+  static AggregatorMap getAllLabels(\n+      Descriptor descriptor,\n+      Resource resource,\n+      InstrumentationLibraryInfo instrumentationLibraryInfo,\n+      AggregatorFactory aggregatorFactory,\n+      long startEpochNanos) {\n+    return new AllLabels(\n+        descriptor, resource, instrumentationLibraryInfo, aggregatorFactory, startEpochNanos);\n+  }\n+\n+  abstract void collect(LabelSet labelSet, Aggregator aggregator);\n+\n+  abstract List<MetricData> stopCollection(long epochNanos);\n+\n+  private static final class Noop extends AggregatorMap {\n+    private static final AggregatorMap INSTANCE = new Noop();\n+\n+    @Override\n+    void collect(LabelSet labelSet, Aggregator aggregator) {\n+      // Noop.\n+    }\n+\n+    @Override\n+    List<MetricData> stopCollection(long epochNanos) {\n+      return Collections.emptyList();\n+    }\n+  }\n+\n+  private static final class AllLabels extends AggregatorMap {\n+    private final Descriptor descriptor;\n+    private final Resource resource;\n+    private final InstrumentationLibraryInfo instrumentationLibraryInfo;\n+    private final AggregatorFactory aggregatorFactory;\n+    private final Map<Map<String, String>, Aggregator> aggregatorMap;", "originalCommit": "d93ffa390dbdc6d82e04a191493f0d70867644a6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3268909a85cce42756be3eb004348b73552b945d", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/metrics/AggregatorMap.java b/sdk/src/main/java/io/opentelemetry/sdk/metrics/Batchers.java\nsimilarity index 58%\nrename from sdk/src/main/java/io/opentelemetry/sdk/metrics/AggregatorMap.java\nrename to sdk/src/main/java/io/opentelemetry/sdk/metrics/Batchers.java\nindex 8d841ca78..8c073cecf 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/metrics/AggregatorMap.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/metrics/Batchers.java\n\n@@ -17,9 +17,11 @@\n package io.opentelemetry.sdk.metrics;\n \n import io.opentelemetry.metrics.LabelSet;\n+import io.opentelemetry.sdk.common.Clock;\n import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n import io.opentelemetry.sdk.metrics.aggregator.Aggregator;\n import io.opentelemetry.sdk.metrics.aggregator.AggregatorFactory;\n+import io.opentelemetry.sdk.metrics.aggregator.NoopAggregator;\n import io.opentelemetry.sdk.metrics.data.MetricData;\n import io.opentelemetry.sdk.metrics.data.MetricData.Descriptor;\n import io.opentelemetry.sdk.metrics.data.MetricData.Point;\n"}}, {"oid": "1b03c3c45cd02cf7fca9dc0122f9ae0683ce130b", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1b03c3c45cd02cf7fca9dc0122f9ae0683ce130b", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-14T21:51:47Z", "type": "forcePushed"}, {"oid": "9e21d1237bb3b7d37a14b2c04adc8dc13be68739", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9e21d1237bb3b7d37a14b2c04adc8dc13be68739", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-14T21:58:23Z", "type": "forcePushed"}, {"oid": "3268909a85cce42756be3eb004348b73552b945d", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/3268909a85cce42756be3eb004348b73552b945d", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-15T00:02:01Z", "type": "forcePushed"}, {"oid": "28cac08305d649ea61fa0f5ff4a200dbbbf0b08d", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/28cac08305d649ea61fa0f5ff4a200dbbbf0b08d", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-15T17:50:21Z", "type": "forcePushed"}, {"oid": "7f4d12da6e2ecae92c284110f23f075c0ca7d363", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/7f4d12da6e2ecae92c284110f23f075c0ca7d363", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-15T17:57:30Z", "type": "forcePushed"}, {"oid": "09312f54c330e30b77413b9aac4fd366e0b8f8ab", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/09312f54c330e30b77413b9aac4fd366e0b8f8ab", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-16T22:30:51Z", "type": "forcePushed"}, {"oid": "b0044845647798352175124fa126c2159550d883", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b0044845647798352175124fa126c2159550d883", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-18T18:54:22Z", "type": "forcePushed"}, {"oid": "1361d42655abd3886fa6d79d628bc7ab877d6551", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1361d42655abd3886fa6d79d628bc7ab877d6551", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-18T19:23:46Z", "type": "forcePushed"}, {"oid": "c31878c2a5b92006017df9568cc800479ab0f125", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c31878c2a5b92006017df9568cc800479ab0f125", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-19T21:36:27Z", "type": "forcePushed"}, {"oid": "3871f6a71641228fb3c49b651b7c0c22bf5f97d3", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/3871f6a71641228fb3c49b651b7c0c22bf5f97d3", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-19T22:23:05Z", "type": "forcePushed"}, {"oid": "5a8bce6e041040caa0d0a7c4f6c6125a0decc614", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5a8bce6e041040caa0d0a7c4f6c6125a0decc614", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-19T22:35:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU5OTc0NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r381599744", "bodyText": "I think there's a risk of a ConcurrentModificationException happening during this iteration, since the map can be mutated during this method call.", "author": "jkwatson", "createdAt": "2020-02-19T23:07:31Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/Batchers.java", "diffHunk": "@@ -47,5 +86,69 @@ public void batch(LabelSet labelSet, Aggregator aggregator, boolean mappedAggreg\n     }\n   }\n \n+  private static final class AllLabels implements Batcher {\n+    private final Descriptor descriptor;\n+    private final Resource resource;\n+    private final InstrumentationLibraryInfo instrumentationLibraryInfo;\n+    private final Clock clock;\n+    private final AggregatorFactory aggregatorFactory;\n+    private Map<Map<String, String>, Aggregator> aggregatorMap;\n+    private long startEpochNanos;\n+    private final boolean delta;\n+\n+    private AllLabels(\n+        Descriptor descriptor,\n+        Resource resource,\n+        InstrumentationLibraryInfo instrumentationLibraryInfo,\n+        AggregatorFactory aggregatorFactory,\n+        Clock clock,\n+        boolean delta) {\n+      this.descriptor = descriptor;\n+      this.resource = resource;\n+      this.instrumentationLibraryInfo = instrumentationLibraryInfo;\n+      this.clock = clock;\n+      this.aggregatorFactory = aggregatorFactory;\n+      this.delta = delta;\n+      this.aggregatorMap = new HashMap<>();\n+      startEpochNanos = clock.now();\n+    }\n+\n+    @Override\n+    public final Aggregator getAggregator() {\n+      return aggregatorFactory.getAggregator();\n+    }\n+\n+    @Override\n+    public final void batch(LabelSet labelSet, Aggregator aggregator, boolean unmappedAggregator) {\n+      Map<String, String> labels = ((LabelSetSdk) labelSet).getLabels();\n+      Aggregator currentAggregator = aggregatorMap.get(labels);\n+      if (currentAggregator == null) {\n+        // This aggregator is not mapped, we can use this instance.\n+        if (unmappedAggregator) {\n+          aggregatorMap.put(labels, aggregator);\n+          return;\n+        }\n+        currentAggregator = aggregatorFactory.getAggregator();\n+        aggregatorMap.put(labels, currentAggregator);\n+      }\n+      aggregator.mergeToAndReset(currentAggregator);\n+    }\n+\n+    @Override\n+    public final List<MetricData> completeCollectionCycle() {\n+      List<Point> points = new ArrayList<>(aggregatorMap.size());\n+      long epochNanos = clock.now();\n+      for (Map.Entry<Map<String, String>, Aggregator> entry : aggregatorMap.entrySet()) {", "originalCommit": "3871f6a71641228fb3c49b651b7c0c22bf5f97d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYwMDc3MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r381600771", "bodyText": "It is guaranteed that only one thread calls into a Batcher collection at a time by the collectLock in the AbstractInstrumentWithBindings", "author": "bogdandrutu", "createdAt": "2020-02-19T23:10:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU5OTc0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYwMTIxOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r381601218", "bodyText": "please add a comment in here to that effect. thanks!", "author": "jkwatson", "createdAt": "2020-02-19T23:11:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU5OTc0NA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "22bd1e715673618a829b893aa070e9721f7c19e4", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/22bd1e715673618a829b893aa070e9721f7c19e4", "message": "Add comment about protecting a collection cycle by a lock\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-19T23:26:23Z", "type": "commit"}, {"oid": "22bd1e715673618a829b893aa070e9721f7c19e4", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/22bd1e715673618a829b893aa070e9721f7c19e4", "message": "Add comment about protecting a collection cycle by a lock\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-19T23:26:23Z", "type": "forcePushed"}]}