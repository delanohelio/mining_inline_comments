{"pr_number": 2390, "pr_title": "Allow registering TraceConfigSupplier and use it from zpages.", "pr_createdAt": "2020-12-22T07:04:54Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/2390", "timeline": [{"oid": "972d58f0a05f55bdca901b03ea7af037b79be9d0", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/972d58f0a05f55bdca901b03ea7af037b79be9d0", "message": "Allow registering TraceConfigSupplier and use it from zpages.", "committedDate": "2020-12-21T08:56:47Z", "type": "commit"}, {"oid": "60f217c4c505a1de262102df405afd113295078f", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/60f217c4c505a1de262102df405afd113295078f", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into zpage-traceconfig-factory", "committedDate": "2020-12-22T06:53:30Z", "type": "commit"}, {"oid": "99b3ee6b160539d4be44f3b4394ff058ef7116b6", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/99b3ee6b160539d4be44f3b4394ff058ef7116b6", "message": "Finish", "committedDate": "2020-12-22T06:59:07Z", "type": "commit"}, {"oid": "b17c656632ff2212f8f0a22c9ffa17128602ef22", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b17c656632ff2212f8f0a22c9ffa17128602ef22", "message": "Remove unnecessary method", "committedDate": "2020-12-22T07:17:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ0Mzk3Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2390#discussion_r547443976", "bodyText": "My only concern here is that we now have 2 methods that override each other's selection, which could potentially add some confusion for the user. Could we possibly get away only with this one, rather than providing both and dealing with the potential confusion?", "author": "jkwatson", "createdAt": "2020-12-22T18:44:57Z", "path": "sdk/trace/src/main/java/io/opentelemetry/sdk/trace/SdkTracerProviderBuilder.java", "diffHunk": "@@ -67,7 +68,20 @@ public SdkTracerProviderBuilder setResource(Resource resource) {\n    */\n   public SdkTracerProviderBuilder setTraceConfig(TraceConfig traceConfig) {\n     requireNonNull(traceConfig, \"traceConfig\");\n-    this.traceConfig = traceConfig;\n+    this.traceConfigSupplier = () -> traceConfig;\n+    return this;\n+  }\n+\n+  /**\n+   * Assign a {@link Supplier} of {@link TraceConfig}. {@link TraceConfig} will be retrieved each\n+   * time a {@link io.opentelemetry.api.trace.Span} is started.\n+   *\n+   * @return this\n+   */\n+  public SdkTracerProviderBuilder setTraceConfigSupplier(", "originalCommit": "b17c656632ff2212f8f0a22c9ffa17128602ef22", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYwNTUyNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2390#discussion_r547605524", "bodyText": "Yeah it's definitely a concern. This didn't feel \"that bad\" and I think it's important to preserve the vastly more common case of static config, setTraceConfig(TraceConfig.builder()....build()). A couple of other ideas that come to mind\n\nTraceConfigBuilder.build returns a Supplier<TraceConfig>. This is easy to use, just wonder if it's confusing for a builder to not return the precise type in its name. I guess not\nRename this one to setTraceConfig so it's an overload. I think having multiple overloads where only one should be used is quite common. In this case it's the opposite problem of the above, where I wonder if it's confusing for the same method name to accept both the type and a supplier of the type. I guess not\n\nAccepting help on deciding among the options :)", "author": "anuraaga", "createdAt": "2020-12-23T02:30:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ0Mzk3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYwNjYwMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2390#discussion_r547606603", "bodyText": "My opinion on this is that it is fine to have two methods. And, having the same method name will probably help to make it clear that they are doing the same thing, and hence more obvious that only one of them applies.\nI do like this approach to TraceConfig dynamism, as I said.  So, \ud83d\udc4d  from me!", "author": "jkwatson", "createdAt": "2020-12-23T02:35:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ0Mzk3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYwNzk3Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2390#discussion_r547607976", "bodyText": "Thanks - went with same method name approach", "author": "anuraaga", "createdAt": "2020-12-23T02:40:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ0Mzk3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "ccc76499f5f0652c6166c9f06cfec40f9124b5fb", "chunk": "diff --git a/sdk/trace/src/main/java/io/opentelemetry/sdk/trace/SdkTracerProviderBuilder.java b/sdk/trace/src/main/java/io/opentelemetry/sdk/trace/SdkTracerProviderBuilder.java\nindex 7a2de69d7..3cfc39a6d 100644\n--- a/sdk/trace/src/main/java/io/opentelemetry/sdk/trace/SdkTracerProviderBuilder.java\n+++ b/sdk/trace/src/main/java/io/opentelemetry/sdk/trace/SdkTracerProviderBuilder.java\n\n@@ -78,9 +78,8 @@ public final class SdkTracerProviderBuilder {\n    *\n    * @return this\n    */\n-  public SdkTracerProviderBuilder setTraceConfigSupplier(\n-      Supplier<TraceConfig> traceConfigSupplier) {\n-    requireNonNull(traceConfigSupplier, \"traceConfigSupplier\");\n+  public SdkTracerProviderBuilder setTraceConfig(Supplier<TraceConfig> traceConfigSupplier) {\n+    requireNonNull(traceConfigSupplier, \"traceConfig\");\n     this.traceConfigSupplier = traceConfigSupplier;\n     return this;\n   }\n"}}, {"oid": "ccc76499f5f0652c6166c9f06cfec40f9124b5fb", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ccc76499f5f0652c6166c9f06cfec40f9124b5fb", "message": "Same method name", "committedDate": "2020-12-23T02:40:43Z", "type": "commit"}]}