{"pr_number": 1399, "pr_title": "Add a toBuilder method to Labels", "pr_createdAt": "2020-07-08T18:30:23Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1399", "timeline": [{"oid": "04d9a40eace360b6c4b143abc1bc7d2e5e76b66e", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/04d9a40eace360b6c4b143abc1bc7d2e5e76b66e", "message": "Add a toBuilder method to Labels", "committedDate": "2020-07-08T18:28:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkwNTE2Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1399#discussion_r451905167", "bodyText": "Looks like we don't really need the size assertions", "author": "anuraaga", "createdAt": "2020-07-09T01:01:07Z", "path": "api/src/test/java/io/opentelemetry/common/LabelsTest.java", "diffHunk": "@@ -124,4 +124,14 @@ public void builder() {\n                 \"key1\", \"value1\",\n                 \"key2\", \"value2\"));\n   }\n+\n+  @Test\n+  public void toBuilder() {\n+    Labels initial = Labels.of(\"one\", \"a\");\n+    Labels second = initial.toBuilder().setLabel(\"two\", \"b\").build();\n+    assertThat(initial.size()).isEqualTo(1);", "originalCommit": "04d9a40eace360b6c4b143abc1bc7d2e5e76b66e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkwNTUxMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1399#discussion_r451905512", "bodyText": "Well maybe they help - don't think I can find a toString for the key value pair classes which would be important for the equals assertions when they fail.", "author": "anuraaga", "createdAt": "2020-07-09T01:02:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkwNTE2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkwODA0OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1399#discussion_r451908048", "bodyText": "My thinking was that, with such a non-trivial implementation internally, that a few extra assertions wouldn't hurt. The size isn't the size of the arraylist, for example.\nAlso, a toString is a really good idea! Not sure why I didn't put that in originally.", "author": "jkwatson", "createdAt": "2020-07-09T01:12:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkwNTE2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk0OTg2OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1399#discussion_r451949869", "bodyText": "I added a toString, just for good measure.", "author": "jkwatson", "createdAt": "2020-07-09T03:57:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkwNTE2Nw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "c608ce4517eb4b43cb4ef2cb63e8c16a75940aa8", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c608ce4517eb4b43cb4ef2cb63e8c16a75940aa8", "message": "add a toString to the pairs, for debugging/testing", "committedDate": "2020-07-09T03:57:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk1NTYzNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1399#discussion_r451955635", "bodyText": "Usually see sb.setLength(sb.length() - 1) for dealing with pesky commas. Checked deleteCharAt and it doesn't seem to avoid System.arrayCopy even for this simple case", "author": "anuraaga", "createdAt": "2020-07-09T04:23:19Z", "path": "api/src/main/java/io/opentelemetry/common/ImmutableKeyValuePairs.java", "diffHunk": "@@ -128,4 +128,22 @@ private static void swap(Object[] data, int a, int b) {\n     data[b] = keyA;\n     data[b + 1] = valueA;\n   }\n+\n+  @Override\n+  public String toString() {\n+    final StringBuilder sb = new StringBuilder(\"{\");\n+    forEach(\n+        new KeyValueConsumer<V>() {\n+          @Override\n+          public void consume(String key, V value) {\n+            sb.append(key).append(\":\").append(value).append(\",\");\n+          }\n+        });\n+    // get rid of that last pesky comma\n+    if (sb.length() > 1) {\n+      sb.deleteCharAt(sb.length() - 1);", "originalCommit": "c608ce4517eb4b43cb4ef2cb63e8c16a75940aa8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI5MTM4OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1399#discussion_r452291389", "bodyText": "oh! good tip. I hadn't looked that deeply into the implementation of deleteCharAt. Probably not a big deal for a debugging toString method, but no reason not to change it, now that I know!", "author": "jkwatson", "createdAt": "2020-07-09T15:10:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk1NTYzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "d300a8c53bf23ee6867218499a65bca59a51e843", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/common/ImmutableKeyValuePairs.java b/api/src/main/java/io/opentelemetry/common/ImmutableKeyValuePairs.java\nindex 3d03bdc4f..1fb21546c 100644\n--- a/api/src/main/java/io/opentelemetry/common/ImmutableKeyValuePairs.java\n+++ b/api/src/main/java/io/opentelemetry/common/ImmutableKeyValuePairs.java\n\n@@ -136,12 +136,12 @@ abstract class ImmutableKeyValuePairs<V> implements ReadableKeyValuePairs<V> {\n         new KeyValueConsumer<V>() {\n           @Override\n           public void consume(String key, V value) {\n-            sb.append(key).append(\":\").append(value).append(\",\");\n+            sb.append(key).append(\"=\").append(value).append(\", \");\n           }\n         });\n     // get rid of that last pesky comma\n     if (sb.length() > 1) {\n-      sb.deleteCharAt(sb.length() - 1);\n+      sb.setLength(sb.length() - 2);\n     }\n     sb.append(\"}\");\n     return sb.toString();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk1NTg3Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1399#discussion_r451955876", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        sb.append(key).append(\":\").append(value).append(\",\");\n          \n          \n            \n                        sb.append(key).append(\"=\").append(value).append(\", \");\n          \n      \n    \n    \n  \n\nNit but maybe we should go ahead and match Map? https://github.com/openjdk/jdk/blob/master/test/jdk/java/util/AbstractMap/ToString.java#L46", "author": "anuraaga", "createdAt": "2020-07-09T04:24:37Z", "path": "api/src/main/java/io/opentelemetry/common/ImmutableKeyValuePairs.java", "diffHunk": "@@ -128,4 +128,22 @@ private static void swap(Object[] data, int a, int b) {\n     data[b] = keyA;\n     data[b + 1] = valueA;\n   }\n+\n+  @Override\n+  public String toString() {\n+    final StringBuilder sb = new StringBuilder(\"{\");\n+    forEach(\n+        new KeyValueConsumer<V>() {\n+          @Override\n+          public void consume(String key, V value) {\n+            sb.append(key).append(\":\").append(value).append(\",\");", "originalCommit": "c608ce4517eb4b43cb4ef2cb63e8c16a75940aa8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI5MTY3OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1399#discussion_r452291679", "bodyText": "Sure. Updated, and added a test to make sure it matches.", "author": "jkwatson", "createdAt": "2020-07-09T15:11:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk1NTg3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI5NDA0OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1399#discussion_r452294049", "bodyText": "Of course, one downside to having this match exactly is that if you had a test that was comparing Labels and a Map, the toString would match, but of course, they will never be equal!", "author": "jkwatson", "createdAt": "2020-07-09T15:14:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk1NTg3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "d300a8c53bf23ee6867218499a65bca59a51e843", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/common/ImmutableKeyValuePairs.java b/api/src/main/java/io/opentelemetry/common/ImmutableKeyValuePairs.java\nindex 3d03bdc4f..1fb21546c 100644\n--- a/api/src/main/java/io/opentelemetry/common/ImmutableKeyValuePairs.java\n+++ b/api/src/main/java/io/opentelemetry/common/ImmutableKeyValuePairs.java\n\n@@ -136,12 +136,12 @@ abstract class ImmutableKeyValuePairs<V> implements ReadableKeyValuePairs<V> {\n         new KeyValueConsumer<V>() {\n           @Override\n           public void consume(String key, V value) {\n-            sb.append(key).append(\":\").append(value).append(\",\");\n+            sb.append(key).append(\"=\").append(value).append(\", \");\n           }\n         });\n     // get rid of that last pesky comma\n     if (sb.length() > 1) {\n-      sb.deleteCharAt(sb.length() - 1);\n+      sb.setLength(sb.length() - 2);\n     }\n     sb.append(\"}\");\n     return sb.toString();\n"}}, {"oid": "d300a8c53bf23ee6867218499a65bca59a51e843", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d300a8c53bf23ee6867218499a65bca59a51e843", "message": "tweak the toString implementation to match that of Map", "committedDate": "2020-07-09T15:14:06Z", "type": "commit"}]}