{"pr_number": 1549, "pr_title": "Add Getter.Keys() with Jaeger Baggage support.", "pr_createdAt": "2020-08-18T13:01:14Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549", "timeline": [{"oid": "823c0adc6394428d805c983ac04387cf890dbb06", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/823c0adc6394428d805c983ac04387cf890dbb06", "message": "Initial addition of Getter.keys().", "committedDate": "2020-08-18T12:49:28Z", "type": "commit"}, {"oid": "38246f75c1848cbb36ae46179c8938e3379679e4", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/38246f75c1848cbb36ae46179c8938e3379679e4", "message": "Merge branch 'master' into getter_keys", "committedDate": "2020-10-18T22:45:58Z", "type": "commit"}, {"oid": "1146897e8424d8b597bd43dcb5e9e48b920eb006", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1146897e8424d8b597bd43dcb5e9e48b920eb006", "message": "WIP.", "committedDate": "2020-10-21T21:58:36Z", "type": "commit"}, {"oid": "28ef667a2f7c537f3e7dfd72d478fb1e3a7f628d", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/28ef667a2f7c537f3e7dfd72d478fb1e3a7f628d", "message": "Merge branch 'master' into getter_keys", "committedDate": "2020-10-21T22:43:17Z", "type": "commit"}, {"oid": "f38e3753489bd66b794b66c0e52ac4a4c1ddbeff", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f38e3753489bd66b794b66c0e52ac4a4c1ddbeff", "message": "More updates to the Jaeger propagator.", "committedDate": "2020-10-22T12:18:22Z", "type": "commit"}, {"oid": "95d5f54a4c8685d5c8cc90fb69d03a9c03807595", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/95d5f54a4c8685d5c8cc90fb69d03a9c03807595", "message": "Merge branch 'master' into getter_keys", "committedDate": "2020-10-23T00:26:46Z", "type": "commit"}, {"oid": "14b41342700bfaf436f20f082272f2f583b69583", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/14b41342700bfaf436f20f082272f2f583b69583", "message": "Fix the build.\n\nEw, Java and your improper type inference...", "committedDate": "2020-10-23T00:50:51Z", "type": "commit"}, {"oid": "dd21377d32b9b7526f190a8384d7c979e949b040", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/dd21377d32b9b7526f190a8384d7c979e949b040", "message": "Add jaeger propagation tests.", "committedDate": "2020-10-26T12:57:34Z", "type": "commit"}, {"oid": "91dda850ad6b3577cc8fcb11108241ee8eaa616a", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/91dda850ad6b3577cc8fcb11108241ee8eaa616a", "message": "Merge branch 'master' into getter_keys", "committedDate": "2020-10-26T13:38:40Z", "type": "commit"}, {"oid": "62f506dae043539083a88acbed2683e0c8f764ef", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/62f506dae043539083a88acbed2683e0c8f764ef", "message": "Getter.keys() exists since 0.10.0", "committedDate": "2020-10-26T13:39:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE3NzQ5Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r512177492", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param carrier carrier of propagation fields, such as an http request.\n          \n          \n            \n                 * @param carrier The carrier of propagation fields, such as an http request.", "author": "jkwatson", "createdAt": "2020-10-26T18:24:58Z", "path": "context_prop/src/main/java/io/opentelemetry/context/propagation/TextMapPropagator.java", "diffHunk": "@@ -115,6 +116,14 @@\n    */\n   interface Getter<C> {\n \n+    /**\n+     * Returns all the keys in the given carrier.\n+     *\n+     * @param carrier carrier of propagation fields, such as an http request.", "originalCommit": "62f506dae043539083a88acbed2683e0c8f764ef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "01e23415e76a0e5c5f7622e7db00b2f708ea806c", "chunk": "diff --git a/context_prop/src/main/java/io/opentelemetry/context/propagation/TextMapPropagator.java b/context/src/main/java/io/opentelemetry/context/propagation/TextMapPropagator.java\nsimilarity index 98%\nrename from context_prop/src/main/java/io/opentelemetry/context/propagation/TextMapPropagator.java\nrename to context/src/main/java/io/opentelemetry/context/propagation/TextMapPropagator.java\nindex 829054d74..dba8bd8f4 100644\n--- a/context_prop/src/main/java/io/opentelemetry/context/propagation/TextMapPropagator.java\n+++ b/context/src/main/java/io/opentelemetry/context/propagation/TextMapPropagator.java\n\n@@ -122,7 +121,7 @@ public interface TextMapPropagator {\n      * @param carrier carrier of propagation fields, such as an http request.\n      * @since 0.10.0\n      */\n-    Collection<String> keys(C carrier);\n+    Iterable<String> keys(C carrier);\n \n     /**\n      * Returns the first value of the given propagation {@code key} or returns {@code null}.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE3Nzg1Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r512177852", "bodyText": "I think we've gotten rid of all the @since tags for now; we'll set them all to 1.0 when we're ready to release.", "author": "jkwatson", "createdAt": "2020-10-26T18:25:33Z", "path": "context_prop/src/main/java/io/opentelemetry/context/propagation/TextMapPropagator.java", "diffHunk": "@@ -115,6 +116,14 @@\n    */\n   interface Getter<C> {\n \n+    /**\n+     * Returns all the keys in the given carrier.\n+     *\n+     * @param carrier carrier of propagation fields, such as an http request.\n+     * @since 0.10.0", "originalCommit": "62f506dae043539083a88acbed2683e0c8f764ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM1NzQ5Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r512357496", "bodyText": "Oh, I totally forgot about it. Will do.", "author": "carlosalberto", "createdAt": "2020-10-27T01:10:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE3Nzg1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "01e23415e76a0e5c5f7622e7db00b2f708ea806c", "chunk": "diff --git a/context_prop/src/main/java/io/opentelemetry/context/propagation/TextMapPropagator.java b/context/src/main/java/io/opentelemetry/context/propagation/TextMapPropagator.java\nsimilarity index 98%\nrename from context_prop/src/main/java/io/opentelemetry/context/propagation/TextMapPropagator.java\nrename to context/src/main/java/io/opentelemetry/context/propagation/TextMapPropagator.java\nindex 829054d74..dba8bd8f4 100644\n--- a/context_prop/src/main/java/io/opentelemetry/context/propagation/TextMapPropagator.java\n+++ b/context/src/main/java/io/opentelemetry/context/propagation/TextMapPropagator.java\n\n@@ -122,7 +121,7 @@ public interface TextMapPropagator {\n      * @param carrier carrier of propagation fields, such as an http request.\n      * @since 0.10.0\n      */\n-    Collection<String> keys(C carrier);\n+    Iterable<String> keys(C carrier);\n \n     /**\n      * Returns the first value of the given propagation {@code key} or returns {@code null}.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE4MDgxOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r512180818", "bodyText": "not relevant for this PR in particular, but I think we should turn off this warning globally, since it's telling us to use guava, which we don't to do for the API, and won't, ever.", "author": "jkwatson", "createdAt": "2020-10-26T18:30:29Z", "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagator.java", "diffHunk": "@@ -187,6 +208,42 @@ public static JaegerPropagator getInstance() {\n     return buildSpanContext(traceId, spanId, flags);\n   }\n \n+  private static <C> Baggage getBaggageFromHeader(C carrier, Getter<C> getter) {\n+    Baggage.Builder builder = null;\n+\n+    for (String key : getter.keys(carrier)) {\n+      if (key.startsWith(BAGGAGE_PREFIX)) {\n+        if (key.length() <= BAGGAGE_PREFIX.length()) {\n+          continue;\n+        }\n+\n+        if (builder == null) {\n+          builder = Baggage.builder();\n+        }\n+        builder.put(key.substring(BAGGAGE_PREFIX.length()), getter.get(carrier, key));\n+      } else if (key.equals(BAGGAGE_HEADER)) {\n+        builder = parseBaggageHeader(getter.get(carrier, key), builder);\n+      }\n+    }\n+    return builder == null ? null : builder.build();\n+  }\n+\n+  @SuppressWarnings(\"StringSplitter\")", "originalCommit": "62f506dae043539083a88acbed2683e0c8f764ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM1NzQ0Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r512357442", "bodyText": "+1", "author": "carlosalberto", "createdAt": "2020-10-27T01:09:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE4MDgxOA=="}], "type": "inlineReview", "revised_code": {"commit": "1999c722616669ddf07d931b39be30e3e94764f1", "chunk": "diff --git a/extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagator.java b/extensions/trace-propagators/src/main/java/io/opentelemetry/extension/trace/propagation/JaegerPropagator.java\nsimilarity index 93%\nrename from extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagator.java\nrename to extensions/trace-propagators/src/main/java/io/opentelemetry/extension/trace/propagation/JaegerPropagator.java\nindex 0b4d78774..ce8dd3646 100644\n--- a/extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagator.java\n+++ b/extensions/trace-propagators/src/main/java/io/opentelemetry/extension/trace/propagation/JaegerPropagator.java\n\n@@ -213,7 +212,7 @@ public class JaegerPropagator implements TextMapPropagator {\n \n     for (String key : getter.keys(carrier)) {\n       if (key.startsWith(BAGGAGE_PREFIX)) {\n-        if (key.length() <= BAGGAGE_PREFIX.length()) {\n+        if (key.length() == BAGGAGE_PREFIX.length()) {\n           continue;\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE4MjU3Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r512182573", "bodyText": "might be a little safer/cleaner to just use Context.root() here, so we know that we don't have a pre-polluted context.", "author": "jkwatson", "createdAt": "2020-10-26T18:33:23Z", "path": "extensions/trace_propagators/src/test/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagatorTest.java", "diffHunk": "@@ -133,12 +145,49 @@ void inject_NotSampledContext() {\n                 TRACE_ID_BASE16, SPAN_ID_BASE16, DEPRECATED_PARENT_SPAN, \"0\"));\n   }\n \n+  @Test\n+  void inject_SampledContext_withBaggage() {\n+    Map<String, String> carrier = new LinkedHashMap<>();\n+    Context context =\n+        Context.current()\n+            .with(\n+                Span.wrap(\n+                    SpanContext.create(\n+                        TRACE_ID, SPAN_ID, SAMPLED_TRACE_OPTIONS, TRACE_STATE_DEFAULT)))\n+            .with(Baggage.builder().put(\"foo\", \"bar\").build());\n+\n+    jaegerPropagator.inject(context, carrier, setter);\n+    assertThat(carrier)\n+        .containsEntry(\n+            PROPAGATION_HEADER,\n+            generateTraceIdHeaderValue(\n+                TRACE_ID_BASE16, SPAN_ID_BASE16, DEPRECATED_PARENT_SPAN, \"1\"));\n+    assertThat(carrier).containsEntry(BAGGAGE_PREFIX + \"foo\", \"bar\");\n+  }\n+\n+  @Test\n+  void inject_baggageOnly() {\n+    // Metadata won't be propagated, but it MUST NOT cause ay problem.\n+    Baggage baggage =\n+        Baggage.builder()\n+            .put(\"nometa\", \"nometa-value\")\n+            .put(\"meta\", \"meta-value\", EntryMetadata.create(\"somemetadata; someother=foo\"))\n+            .build();\n+    Map<String, String> carrier = new LinkedHashMap<>();\n+    jaegerPropagator.inject(Context.root().with(baggage), carrier, Map::put);\n+    assertThat(carrier)\n+        .containsExactlyInAnyOrderEntriesOf(\n+            ImmutableMap.of(\n+                BAGGAGE_PREFIX + \"nometa\", \"nometa-value\",\n+                BAGGAGE_PREFIX + \"meta\", \"meta-value\"));\n+  }\n+\n   @Test\n   void extract_Nothing() {\n     // Context remains untouched.\n     assertThat(\n             jaegerPropagator.extract(\n-                Context.current(), Collections.<String, String>emptyMap(), Map::get))\n+                Context.current(), Collections.<String, String>emptyMap(), getter))", "originalCommit": "62f506dae043539083a88acbed2683e0c8f764ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM1NzU3MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r512357571", "bodyText": "Fair enough, will update.", "author": "carlosalberto", "createdAt": "2020-10-27T01:10:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE4MjU3Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU2Nzg4OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r512567888", "bodyText": "Does it make sense to add empty baggage similar to how we add invalid span?", "author": "anuraaga", "createdAt": "2020-10-27T10:19:04Z", "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagator.java", "diffHunk": "@@ -108,16 +118,27 @@ public static JaegerPropagator getInstance() {\n     setter.set(carrier, PROPAGATION_HEADER, new String(chars));\n   }\n \n+  private static <C> void injectBaggage(Baggage baggage, C carrier, Setter<C> setter) {\n+    for (Entry entry : baggage.getEntries()) {\n+      setter.set(carrier, BAGGAGE_PREFIX + entry.getKey(), entry.getValue());\n+    }\n+  }\n+\n   @Override\n   public <C> Context extract(Context context, @Nullable C carrier, Getter<C> getter) {\n     Objects.requireNonNull(getter, \"getter\");\n \n     SpanContext spanContext = getSpanContextFromHeader(carrier, getter);\n-    if (!spanContext.isValid()) {\n-      return context;\n+    if (spanContext.isValid()) {\n+      context = context.with(Span.wrap(spanContext));\n+    }\n+\n+    Baggage baggage = getBaggageFromHeader(carrier, getter);\n+    if (baggage != null) {", "originalCommit": "6582c360ac7c54dbe1128a19bc018982346de9ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg3MjkzMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r512872933", "bodyText": "That's a tricky one (I will let @pavolloffay @jpkrohling @yurishkuro  comment), but I'd imagine we wanting to keep whatever Baggage we had before, in case there was no baggage at all.", "author": "carlosalberto", "createdAt": "2020-10-27T17:09:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU2Nzg4OA=="}], "type": "inlineReview", "revised_code": {"commit": "1fdd61064c726750766a9ec193acbdaae241b371", "chunk": "diff --git a/extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagator.java b/extensions/trace-propagators/src/main/java/io/opentelemetry/extension/trace/propagation/JaegerPropagator.java\nsimilarity index 93%\nrename from extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagator.java\nrename to extensions/trace-propagators/src/main/java/io/opentelemetry/extension/trace/propagation/JaegerPropagator.java\nindex 0b4d78774..7d68f371e 100644\n--- a/extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagator.java\n+++ b/extensions/trace-propagators/src/main/java/io/opentelemetry/extension/trace/propagation/JaegerPropagator.java\n\n@@ -119,9 +117,10 @@ public class JaegerPropagator implements TextMapPropagator {\n   }\n \n   private static <C> void injectBaggage(Baggage baggage, C carrier, Setter<C> setter) {\n-    for (Entry entry : baggage.getEntries()) {\n-      setter.set(carrier, BAGGAGE_PREFIX + entry.getKey(), entry.getValue());\n-    }\n+    baggage.forEach(\n+        (key, value, metadata) -> {\n+          setter.set(carrier, BAGGAGE_PREFIX + key, value);\n+        });\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU2ODQ3Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r512568476", "bodyText": "Since we already checked startsWith I think this can be equals check", "author": "anuraaga", "createdAt": "2020-10-27T10:19:58Z", "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagator.java", "diffHunk": "@@ -187,6 +208,42 @@ public static JaegerPropagator getInstance() {\n     return buildSpanContext(traceId, spanId, flags);\n   }\n \n+  private static <C> Baggage getBaggageFromHeader(C carrier, Getter<C> getter) {\n+    Baggage.Builder builder = null;\n+\n+    for (String key : getter.keys(carrier)) {\n+      if (key.startsWith(BAGGAGE_PREFIX)) {\n+        if (key.length() <= BAGGAGE_PREFIX.length()) {", "originalCommit": "6582c360ac7c54dbe1128a19bc018982346de9ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA3MTk2Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r513071967", "bodyText": "I'd rather stick to check the length, as it only depends on a numerical comparison.", "author": "carlosalberto", "createdAt": "2020-10-27T22:31:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU2ODQ3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA2Njg1Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r517066853", "bodyText": "Ah I meant an equal check on the length - if it starts with it, then the length is guarateed to be at least that length and the < here looks redundant", "author": "anuraaga", "createdAt": "2020-11-04T02:41:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU2ODQ3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY3MTQzOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r517671439", "bodyText": "Done.", "author": "carlosalberto", "createdAt": "2020-11-04T22:35:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU2ODQ3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "1999c722616669ddf07d931b39be30e3e94764f1", "chunk": "diff --git a/extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagator.java b/extensions/trace-propagators/src/main/java/io/opentelemetry/extension/trace/propagation/JaegerPropagator.java\nsimilarity index 93%\nrename from extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagator.java\nrename to extensions/trace-propagators/src/main/java/io/opentelemetry/extension/trace/propagation/JaegerPropagator.java\nindex 0b4d78774..ce8dd3646 100644\n--- a/extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagator.java\n+++ b/extensions/trace-propagators/src/main/java/io/opentelemetry/extension/trace/propagation/JaegerPropagator.java\n\n@@ -213,7 +212,7 @@ public class JaegerPropagator implements TextMapPropagator {\n \n     for (String key : getter.keys(carrier)) {\n       if (key.startsWith(BAGGAGE_PREFIX)) {\n-        if (key.length() <= BAGGAGE_PREFIX.length()) {\n+        if (key.length() == BAGGAGE_PREFIX.length()) {\n           continue;\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU3MTI3MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r512571271", "bodyText": "Regex split looks like it could be very slow. Best could be to use indexOf to avoid split array allocation but if too tedious can we at least just split on the single chars?", "author": "anuraaga", "createdAt": "2020-10-27T10:24:25Z", "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagator.java", "diffHunk": "@@ -187,6 +208,42 @@ public static JaegerPropagator getInstance() {\n     return buildSpanContext(traceId, spanId, flags);\n   }\n \n+  private static <C> Baggage getBaggageFromHeader(C carrier, Getter<C> getter) {\n+    Baggage.Builder builder = null;\n+\n+    for (String key : getter.keys(carrier)) {\n+      if (key.startsWith(BAGGAGE_PREFIX)) {\n+        if (key.length() <= BAGGAGE_PREFIX.length()) {\n+          continue;\n+        }\n+\n+        if (builder == null) {\n+          builder = Baggage.builder();\n+        }\n+        builder.put(key.substring(BAGGAGE_PREFIX.length()), getter.get(carrier, key));\n+      } else if (key.equals(BAGGAGE_HEADER)) {\n+        builder = parseBaggageHeader(getter.get(carrier, key), builder);\n+      }\n+    }\n+    return builder == null ? null : builder.build();\n+  }\n+\n+  @SuppressWarnings(\"StringSplitter\")\n+  private static Baggage.Builder parseBaggageHeader(String header, Baggage.Builder builder) {\n+    for (String part : header.split(\"\\\\s*,\\\\s*\")) {", "originalCommit": "6582c360ac7c54dbe1128a19bc018982346de9ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg3Mzg1Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r512873853", "bodyText": "Let's do that in a follow-up. This code is ported directly from the Jaeger Propagator, but yes, we could try to optimize things in follow ups (we did the same for OC's TraceContext propagator, for example).", "author": "carlosalberto", "createdAt": "2020-10-27T17:10:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU3MTI3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "1999c722616669ddf07d931b39be30e3e94764f1", "chunk": "diff --git a/extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagator.java b/extensions/trace-propagators/src/main/java/io/opentelemetry/extension/trace/propagation/JaegerPropagator.java\nsimilarity index 93%\nrename from extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagator.java\nrename to extensions/trace-propagators/src/main/java/io/opentelemetry/extension/trace/propagation/JaegerPropagator.java\nindex 0b4d78774..ce8dd3646 100644\n--- a/extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagator.java\n+++ b/extensions/trace-propagators/src/main/java/io/opentelemetry/extension/trace/propagation/JaegerPropagator.java\n\n@@ -213,7 +212,7 @@ public class JaegerPropagator implements TextMapPropagator {\n \n     for (String key : getter.keys(carrier)) {\n       if (key.startsWith(BAGGAGE_PREFIX)) {\n-        if (key.length() <= BAGGAGE_PREFIX.length()) {\n+        if (key.length() == BAGGAGE_PREFIX.length()) {\n           continue;\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU3MTk2NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r512571964", "bodyText": "Can you add some test cases with invalid, and with whitespace?", "author": "anuraaga", "createdAt": "2020-10-27T10:25:27Z", "path": "extensions/trace_propagators/src/test/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagatorTest.java", "diffHunk": "@@ -313,6 +362,78 @@ void extract_UrlEncodedContext() throws UnsupportedEncodingException {\n                 TRACE_ID, SPAN_ID, SAMPLED_TRACE_OPTIONS, TRACE_STATE_DEFAULT));\n   }\n \n+  @Test\n+  void extract_SampledContext_withBaggage() {\n+    Map<String, String> carrier = new LinkedHashMap<>();\n+    JaegerSpanContext context =\n+        new JaegerSpanContext(\n+            TRACE_ID_HI, TRACE_ID_LOW, SPAN_ID_LONG, DEPRECATED_PARENT_SPAN_LONG, (byte) 5);\n+    carrier.put(PROPAGATION_HEADER, TextMapCodec.contextAsString(context));\n+    carrier.put(BAGGAGE_PREFIX + \"foo\", \"bar\");\n+\n+    assertThat(getSpanContext(jaegerPropagator.extract(Context.current(), carrier, getter)))\n+        .isEqualTo(\n+            SpanContext.createFromRemoteParent(\n+                TRACE_ID, SPAN_ID, SAMPLED_TRACE_OPTIONS, TRACE_STATE_DEFAULT));\n+    assertThat(getBaggage(jaegerPropagator.extract(Context.current(), carrier, getter)))\n+        .isEqualTo(Baggage.builder().put(\"foo\", \"bar\").build());\n+  }\n+\n+  @Test\n+  void extract_baggageOnly_withPrefix() {\n+    Map<String, String> carrier = new LinkedHashMap<>();\n+    carrier.put(BAGGAGE_PREFIX + \"nometa\", \"nometa-value\");\n+    carrier.put(BAGGAGE_PREFIX + \"meta\", \"meta-value\");\n+    carrier.put(\"another\", \"value\");\n+\n+    assertThat(getBaggage(jaegerPropagator.extract(Context.current(), carrier, getter)))\n+        .isEqualTo(\n+            Baggage.builder().put(\"nometa\", \"nometa-value\").put(\"meta\", \"meta-value\").build());\n+  }\n+\n+  @Test\n+  void extract_baggageOnly_withPrefix_emptyKey() {\n+    Map<String, String> carrier = new LinkedHashMap<>();\n+    carrier.put(BAGGAGE_PREFIX, \"value\"); // Not really a valid key.\n+\n+    assertThat(getBaggage(jaegerPropagator.extract(Context.current(), carrier, getter)))\n+        .isEqualTo(Baggage.empty());\n+  }\n+\n+  @Test\n+  void extract_baggageOnly_withHeader() {\n+    Map<String, String> carrier = new LinkedHashMap<>();\n+    carrier.put(BAGGAGE_HEADER, \"nometa=nometa-value,meta=meta-value\");\n+\n+    assertThat(getBaggage(jaegerPropagator.extract(Context.current(), carrier, getter)))\n+        .isEqualTo(\n+            Baggage.builder().put(\"nometa\", \"nometa-value\").put(\"meta\", \"meta-value\").build());\n+  }\n+\n+  @Test\n+  void extract_baggageOnly_withHeader_invalid() {\n+    Map<String, String> carrier = new LinkedHashMap<>();\n+    carrier.put(BAGGAGE_HEADER, \"nometa+novalue\");\n+\n+    assertThat(getBaggage(jaegerPropagator.extract(Context.current(), carrier, getter)))\n+        .isEqualTo(Baggage.empty());\n+  }\n+\n+  @Test\n+  void extract_baggageOnly_withHeader_andPrefix() {\n+    Map<String, String> carrier = new LinkedHashMap<>();\n+    carrier.put(BAGGAGE_HEADER, \"nometa=nometa-value,meta=meta-value\");", "originalCommit": "6582c360ac7c54dbe1128a19bc018982346de9ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg3NDA0OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r512874048", "bodyText": "Oh, yes, totally missed that.", "author": "carlosalberto", "createdAt": "2020-10-27T17:11:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU3MTk2NA=="}], "type": "inlineReview", "revised_code": {"commit": "a171e0e563f5472975035bb694dbb9dfcb313405", "chunk": "diff --git a/extensions/trace_propagators/src/test/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagatorTest.java b/extensions/trace-propagators/src/test/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagatorTest.java\nsimilarity index 94%\nrename from extensions/trace_propagators/src/test/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagatorTest.java\nrename to extensions/trace-propagators/src/test/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagatorTest.java\nindex 592211100..9c8d74d6d 100644\n--- a/extensions/trace_propagators/src/test/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagatorTest.java\n+++ b/extensions/trace-propagators/src/test/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagatorTest.java\n\n@@ -375,7 +375,7 @@ class JaegerPropagatorTest {\n         .isEqualTo(\n             SpanContext.createFromRemoteParent(\n                 TRACE_ID, SPAN_ID, SAMPLED_TRACE_OPTIONS, TRACE_STATE_DEFAULT));\n-    assertThat(getBaggage(jaegerPropagator.extract(Context.current(), carrier, getter)))\n+    assertThat(fromContext(jaegerPropagator.extract(Context.current(), carrier, getter)))\n         .isEqualTo(Baggage.builder().put(\"foo\", \"bar\").build());\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcxNTM1OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r512715359", "bodyText": "A lighter interface like Iterable or Iterator would also work. Collection must support size().", "author": "yurishkuro", "createdAt": "2020-10-27T13:59:23Z", "path": "context_prop/src/main/java/io/opentelemetry/context/propagation/TextMapPropagator.java", "diffHunk": "@@ -115,6 +116,14 @@\n    */\n   interface Getter<C> {\n \n+    /**\n+     * Returns all the keys in the given carrier.\n+     *\n+     * @param carrier The carrier of propagation fields, such as an http request.\n+     * @since 0.10.0\n+     */\n+    Collection<String> keys(C carrier);", "originalCommit": "6582c360ac7c54dbe1128a19bc018982346de9ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg3NDM2Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r512874363", "bodyText": "Fair enough. Will update to go the iterable way.", "author": "carlosalberto", "createdAt": "2020-10-27T17:11:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcxNTM1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAzOTExNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r517039115", "bodyText": "Done.", "author": "carlosalberto", "createdAt": "2020-11-04T00:53:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcxNTM1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "a171e0e563f5472975035bb694dbb9dfcb313405", "chunk": "diff --git a/context_prop/src/main/java/io/opentelemetry/context/propagation/TextMapPropagator.java b/context/src/main/java/io/opentelemetry/context/propagation/TextMapPropagator.java\nsimilarity index 98%\nrename from context_prop/src/main/java/io/opentelemetry/context/propagation/TextMapPropagator.java\nrename to context/src/main/java/io/opentelemetry/context/propagation/TextMapPropagator.java\nindex c52823dc9..829054d74 100644\n--- a/context_prop/src/main/java/io/opentelemetry/context/propagation/TextMapPropagator.java\n+++ b/context/src/main/java/io/opentelemetry/context/propagation/TextMapPropagator.java\n\n@@ -119,7 +119,7 @@ public interface TextMapPropagator {\n     /**\n      * Returns all the keys in the given carrier.\n      *\n-     * @param carrier The carrier of propagation fields, such as an http request.\n+     * @param carrier carrier of propagation fields, such as an http request.\n      * @since 0.10.0\n      */\n     Collection<String> keys(C carrier);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkwMTkzNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r512901935", "bodyText": "Jaeger SDKs would combine baggage from uberctx-{key} and jaeger-baggage headers, you're overriding it instead.", "author": "yurishkuro", "createdAt": "2020-10-27T17:46:45Z", "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagator.java", "diffHunk": "@@ -187,6 +208,42 @@ public static JaegerPropagator getInstance() {\n     return buildSpanContext(traceId, spanId, flags);\n   }\n \n+  private static <C> Baggage getBaggageFromHeader(C carrier, Getter<C> getter) {\n+    Baggage.Builder builder = null;\n+\n+    for (String key : getter.keys(carrier)) {\n+      if (key.startsWith(BAGGAGE_PREFIX)) {\n+        if (key.length() <= BAGGAGE_PREFIX.length()) {\n+          continue;\n+        }\n+\n+        if (builder == null) {\n+          builder = Baggage.builder();\n+        }\n+        builder.put(key.substring(BAGGAGE_PREFIX.length()), getter.get(carrier, key));\n+      } else if (key.equals(BAGGAGE_HEADER)) {\n+        builder = parseBaggageHeader(getter.get(carrier, key), builder);", "originalCommit": "6582c360ac7c54dbe1128a19bc018982346de9ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA3MTIxOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r513071218", "bodyText": "Actually they are getting merged, i.e. see this test - let me know otherwise :)", "author": "carlosalberto", "createdAt": "2020-10-27T22:29:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkwMTkzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA3NjUwMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r513076501", "bodyText": "L225 replaces the builder, so they are only merged if jaeger-baggage header is first in the list, as it is in the unit test, moving this header to the end of the list will ignore uberctx entries, as far as I can tell.", "author": "yurishkuro", "createdAt": "2020-10-27T22:44:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkwMTkzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAzOTA4MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r517039081", "bodyText": "Verified that it works correctly by putting HEADER at the end (of the Map), i.e. L225 takes any existing builder and uses it if already exists.", "author": "carlosalberto", "createdAt": "2020-11-04T00:53:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkwMTkzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "1999c722616669ddf07d931b39be30e3e94764f1", "chunk": "diff --git a/extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagator.java b/extensions/trace-propagators/src/main/java/io/opentelemetry/extension/trace/propagation/JaegerPropagator.java\nsimilarity index 93%\nrename from extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagator.java\nrename to extensions/trace-propagators/src/main/java/io/opentelemetry/extension/trace/propagation/JaegerPropagator.java\nindex 0b4d78774..ce8dd3646 100644\n--- a/extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagator.java\n+++ b/extensions/trace-propagators/src/main/java/io/opentelemetry/extension/trace/propagation/JaegerPropagator.java\n\n@@ -213,7 +212,7 @@ public class JaegerPropagator implements TextMapPropagator {\n \n     for (String key : getter.keys(carrier)) {\n       if (key.startsWith(BAGGAGE_PREFIX)) {\n-        if (key.length() <= BAGGAGE_PREFIX.length()) {\n+        if (key.length() == BAGGAGE_PREFIX.length()) {\n           continue;\n         }\n \n"}}, {"oid": "a171e0e563f5472975035bb694dbb9dfcb313405", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a171e0e563f5472975035bb694dbb9dfcb313405", "message": "Merge branch 'master' into getter_keys", "committedDate": "2020-11-03T22:11:46Z", "type": "commit"}, {"oid": "01e23415e76a0e5c5f7622e7db00b2f708ea806c", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/01e23415e76a0e5c5f7622e7db00b2f708ea806c", "message": "Use Iterable instead of Collection.", "committedDate": "2020-11-03T22:23:09Z", "type": "commit"}, {"oid": "01e23415e76a0e5c5f7622e7db00b2f708ea806c", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/01e23415e76a0e5c5f7622e7db00b2f708ea806c", "message": "Use Iterable instead of Collection.", "committedDate": "2020-11-03T22:23:09Z", "type": "forcePushed"}, {"oid": "b6ef0cbd64b04aeeae89bda0582773605b770f6c", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b6ef0cbd64b04aeeae89bda0582773605b770f6c", "message": "Add a test case for input with spaces.", "committedDate": "2020-11-04T00:48:00Z", "type": "commit"}, {"oid": "1fdd61064c726750766a9ec193acbdaae241b371", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1fdd61064c726750766a9ec193acbdaae241b371", "message": "Merge branch 'master' into getter_keys", "committedDate": "2020-11-04T22:32:42Z", "type": "commit"}, {"oid": "1999c722616669ddf07d931b39be30e3e94764f1", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1999c722616669ddf07d931b39be30e3e94764f1", "message": "Tune comparison against BAGGAGE_HEADER.", "committedDate": "2020-11-04T22:35:15Z", "type": "commit"}]}