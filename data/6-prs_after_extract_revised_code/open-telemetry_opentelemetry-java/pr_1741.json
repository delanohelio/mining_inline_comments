{"pr_number": 1741, "pr_title": "Remove Status object from API, keep StatusCanonicalCode", "pr_createdAt": "2020-10-03T18:24:14Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1741", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE4ODMyMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1741#discussion_r499188322", "bodyText": "this could just delegate to createInternal, so we don't have to keep two autovalue constructor calls in synch.", "author": "jkwatson", "createdAt": "2020-10-03T22:54:30Z", "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/data/ImmutableStatus.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.trace.data;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.StatusCanonicalCode;\n+import java.util.Objects;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Defines the status of a {@link Span} by providing a standard {@link StatusCanonicalCode} in\n+ * conjunction with an optional descriptive message. Instances of {@code Status} are created by\n+ * starting with the template for the appropriate {@link StatusCanonicalCode} and supplementing it\n+ * with additional information: {@code Status.NOT_FOUND.withDescription(\"Could not find\n+ * 'important_file.txt'\");}\n+ */\n+@AutoValue\n+@Immutable\n+public abstract class ImmutableStatus implements SpanData.Status {\n+  /**\n+   * The operation has been validated by an Application developers or Operator to have completed\n+   * successfully.\n+   */\n+  public static final ImmutableStatus OK = createInternal(StatusCanonicalCode.OK, null);\n+\n+  /** The default status. */\n+  public static final ImmutableStatus UNSET = createInternal(StatusCanonicalCode.UNSET, null);\n+\n+  /** The operation contains an error. */\n+  public static final ImmutableStatus ERROR = createInternal(StatusCanonicalCode.ERROR, null);\n+\n+  /**\n+   * Creates a derived instance of {@code Status} with the given description.\n+   *\n+   * @param description the new description of the {@code Status}.\n+   * @return The newly created {@code Status} with the given description.\n+   * @since 0.1.0\n+   */\n+  public static SpanData.Status create(\n+      StatusCanonicalCode canonicalCode, @Nullable String description) {\n+    return new AutoValue_ImmutableStatus(canonicalCode, description);", "originalCommit": "84894bc416f2c7b42cad7ecd1fd7ba24eff12777", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1NTAxOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1741#discussion_r499255019", "bodyText": "Done.", "author": "bogdandrutu", "createdAt": "2020-10-04T14:54:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE4ODMyMg=="}], "type": "inlineReview", "revised_code": {"commit": "ce2294b47669d0856c1819f9b2bc9f4108b8656e", "chunk": "diff --git a/sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/data/ImmutableStatus.java b/sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/data/ImmutableStatus.java\nindex ea9e8e755..3a7b16dba 100644\n--- a/sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/data/ImmutableStatus.java\n+++ b/sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/data/ImmutableStatus.java\n\n@@ -43,7 +43,7 @@ public abstract class ImmutableStatus implements SpanData.Status {\n    */\n   public static SpanData.Status create(\n       StatusCanonicalCode canonicalCode, @Nullable String description) {\n-    return new AutoValue_ImmutableStatus(canonicalCode, description);\n+    return createInternal(canonicalCode, description);\n   }\n \n   private static ImmutableStatus createInternal(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIwMTEzNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1741#discussion_r499201135", "bodyText": "The spec doesn't seem to define numeric values for the codes, do we need these?\nhttps://www.github.com/open-telemetry/opentelemetry-specification/tree/master/specification%2Ftrace%2Fapi.md", "author": "anuraaga", "createdAt": "2020-10-04T03:15:44Z", "path": "api/src/main/java/io/opentelemetry/trace/StatusCanonicalCode.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.trace;\n+\n+/**\n+ * The set of canonical status codes. If new codes are added over time they must choose a numerical\n+ * value that does not collide with any previously used value.\n+ *\n+ * @since 0.1.0\n+ */\n+public enum StatusCanonicalCode {\n+\n+  /**\n+   * The operation has been validated by an Application developers or Operator to have completed\n+   * successfully.\n+   */\n+  OK(0),", "originalCommit": "84894bc416f2c7b42cad7ecd1fd7ba24eff12777", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1NDkyOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1741#discussion_r499254929", "bodyText": "Filed #1744 to track this.", "author": "bogdandrutu", "createdAt": "2020-10-04T14:53:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIwMTEzNQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIwMTE2NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1741#discussion_r499201165", "bodyText": "I would use two methods instead of requiring null when no description, similar to how we handle exception / link attributes.", "author": "anuraaga", "createdAt": "2020-10-04T03:16:37Z", "path": "api/src/main/java/io/opentelemetry/trace/DefaultSpan.java", "diffHunk": "@@ -77,7 +78,7 @@ public void addEvent(String name, Attributes attributes) {}\n   public void addEvent(String name, Attributes attributes, long timestamp) {}\n \n   @Override\n-  public void setStatus(Status status) {}\n+  public void setStatus(StatusCanonicalCode canonicalCode, @Nullable String description) {}", "originalCommit": "84894bc416f2c7b42cad7ecd1fd7ba24eff12777", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1NDg2NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1741#discussion_r499254865", "bodyText": "I left a TODO, will do in the next PR https://github.com/open-telemetry/opentelemetry-java/pull/1741/files#diff-cc14ea515ee096dbd8ed1e630e45745fR217", "author": "bogdandrutu", "createdAt": "2020-10-04T14:52:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIwMTE2NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIwMTMwNw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1741#discussion_r499201307", "bodyText": "Since we are on Java 8 now we shouldn't have to expose this class. Can you add ok(), etc static methods on the interface which return the values here that can be made package private?", "author": "anuraaga", "createdAt": "2020-10-04T03:19:28Z", "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/data/ImmutableStatus.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.trace.data;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.StatusCanonicalCode;\n+import java.util.Objects;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Defines the status of a {@link Span} by providing a standard {@link StatusCanonicalCode} in\n+ * conjunction with an optional descriptive message. Instances of {@code Status} are created by\n+ * starting with the template for the appropriate {@link StatusCanonicalCode} and supplementing it\n+ * with additional information: {@code Status.NOT_FOUND.withDescription(\"Could not find\n+ * 'important_file.txt'\");}\n+ */\n+@AutoValue\n+@Immutable\n+public abstract class ImmutableStatus implements SpanData.Status {", "originalCommit": "84894bc416f2c7b42cad7ecd1fd7ba24eff12777", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1NTI2OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1741#discussion_r499255269", "bodyText": "We may be able to do that, but I would do the same for ImmutableLink and ImmutableEvent then. Filed #1745 to track this.", "author": "bogdandrutu", "createdAt": "2020-10-04T14:56:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIwMTMwNw=="}], "type": "inlineReview", "revised_code": {"commit": "ce2294b47669d0856c1819f9b2bc9f4108b8656e", "chunk": "diff --git a/sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/data/ImmutableStatus.java b/sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/data/ImmutableStatus.java\nindex ea9e8e755..3a7b16dba 100644\n--- a/sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/data/ImmutableStatus.java\n+++ b/sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/data/ImmutableStatus.java\n\n@@ -43,7 +43,7 @@ public abstract class ImmutableStatus implements SpanData.Status {\n    */\n   public static SpanData.Status create(\n       StatusCanonicalCode canonicalCode, @Nullable String description) {\n-    return new AutoValue_ImmutableStatus(canonicalCode, description);\n+    return createInternal(canonicalCode, description);\n   }\n \n   private static ImmutableStatus createInternal(\n"}}, {"oid": "0b78a670bf863dc9583ba494cef5ea2d83ec18bf", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0b78a670bf863dc9583ba494cef5ea2d83ec18bf", "message": "Remove Status object from API, keep StatusCanonicalCode\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-10-04T17:03:02Z", "type": "commit"}, {"oid": "ce2294b47669d0856c1819f9b2bc9f4108b8656e", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ce2294b47669d0856c1819f9b2bc9f4108b8656e", "message": "Respond to comments, change more old usages\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-10-04T17:03:04Z", "type": "commit"}, {"oid": "67d7e1a38f75e6d56adb623cf2964c5f001ccd7c", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/67d7e1a38f75e6d56adb623cf2964c5f001ccd7c", "message": "Fix build, run gojf\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-10-04T17:03:04Z", "type": "commit"}, {"oid": "67d7e1a38f75e6d56adb623cf2964c5f001ccd7c", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/67d7e1a38f75e6d56adb623cf2964c5f001ccd7c", "message": "Fix build, run gojf\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-10-04T17:03:04Z", "type": "forcePushed"}]}