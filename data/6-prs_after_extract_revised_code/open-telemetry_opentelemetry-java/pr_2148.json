{"pr_number": 2148, "pr_title": "Remove Guava dependencies from SDK", "pr_createdAt": "2020-11-27T08:18:28Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ1NTkyMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531455922", "bodyText": "I think we should add such an annotation to the API package or some util package. It is useful documentation and a bit nicer than a comment.", "author": "Oberon00", "createdAt": "2020-11-27T08:43:56Z", "path": "sdk-extensions/aws/src/main/java/io/opentelemetry/sdk/extension/aws/resource/DockerHelper.java", "diffHunk": "@@ -25,7 +24,7 @@\n     this(DEFAULT_CGROUP_PATH);\n   }\n \n-  @VisibleForTesting\n+  // Visible for testing", "originalCommit": "19ca917a1dfdce4f6e62429747841314130ba401", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ5MTcyMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531491720", "bodyText": "The annotation has been around for a looong time and I've never seen any tooling use it. Is it much better than a comment? Then we wouldn't need to maintain the annotation.", "author": "anuraaga", "createdAt": "2020-11-27T09:49:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ1NTkyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUwMDM0OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531500348", "bodyText": "Hmm, no strong opinion. If you think the annotation fits badly, comments should be fine too.", "author": "Oberon00", "createdAt": "2020-11-27T10:04:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ1NTkyMg=="}], "type": "inlineReview", "revised_code": {"commit": "d962c1ce898c0370b8d23e9f4f332e7fcaa2e979", "chunk": "diff --git a/sdk-extensions/aws/src/main/java/io/opentelemetry/sdk/extension/aws/resource/DockerHelper.java b/sdk-extensions/aws/src/main/java/io/opentelemetry/sdk/extension/aws/resource/DockerHelper.java\nindex 72206ec01..f2cd0ddc7 100644\n--- a/sdk-extensions/aws/src/main/java/io/opentelemetry/sdk/extension/aws/resource/DockerHelper.java\n+++ b/sdk-extensions/aws/src/main/java/io/opentelemetry/sdk/extension/aws/resource/DockerHelper.java\n\n@@ -24,7 +25,7 @@ class DockerHelper {\n     this(DEFAULT_CGROUP_PATH);\n   }\n \n-  // Visible for testing\n+  @VisibleForTesting\n   DockerHelper(String cgroupPath) {\n     this.cgroupPath = cgroupPath;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ1NjcyMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531456721", "bodyText": "Byte-wise reading looks quite inefficient.", "author": "Oberon00", "createdAt": "2020-11-27T08:45:27Z", "path": "sdk-extensions/aws/src/main/java/io/opentelemetry/sdk/extension/aws/resource/Ec2Resource.java", "diffHunk": "@@ -206,4 +206,15 @@ private String fetchIdentity(String token) {\n   private String fetchHostname(String token) {\n     return fetchString(\"GET\", hostnameUrl, token, /* includeTtl= */ false);\n   }\n+\n+  private static void readTo(@Nullable InputStream is, ByteArrayOutputStream os)\n+      throws IOException {\n+    if (is == null) {\n+      return;\n+    }\n+    int b;\n+    while ((b = is.read()) != -1) {\n+      os.write(b);", "originalCommit": "19ca917a1dfdce4f6e62429747841314130ba401", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ5MzYxMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531493613", "bodyText": "Oops for some reason thought this was in-memory", "author": "anuraaga", "createdAt": "2020-11-27T09:53:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ1NjcyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUwMjY1Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531502652", "bodyText": "Wouldn't the overhead be even worse then, relatively speaking? EDIT: Depending on whether the I/O does some internal buffering.", "author": "Oberon00", "createdAt": "2020-11-27T10:08:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ1NjcyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "d962c1ce898c0370b8d23e9f4f332e7fcaa2e979", "chunk": "diff --git a/sdk-extensions/aws/src/main/java/io/opentelemetry/sdk/extension/aws/resource/Ec2Resource.java b/sdk-extensions/aws/src/main/java/io/opentelemetry/sdk/extension/aws/resource/Ec2Resource.java\nindex bc92524ba..1c9c4ea0e 100644\n--- a/sdk-extensions/aws/src/main/java/io/opentelemetry/sdk/extension/aws/resource/Ec2Resource.java\n+++ b/sdk-extensions/aws/src/main/java/io/opentelemetry/sdk/extension/aws/resource/Ec2Resource.java\n\n@@ -206,15 +206,4 @@ public class Ec2Resource extends ResourceProvider {\n   private String fetchHostname(String token) {\n     return fetchString(\"GET\", hostnameUrl, token, /* includeTtl= */ false);\n   }\n-\n-  private static void readTo(@Nullable InputStream is, ByteArrayOutputStream os)\n-      throws IOException {\n-    if (is == null) {\n-      return;\n-    }\n-    int b;\n-    while ((b = is.read()) != -1) {\n-      os.write(b);\n-    }\n-  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ1NzMyOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531457329", "bodyText": "With the getOrDefault, can't you keep it as a single expression? Also, I think we have some isNullOrEmpty helper already in the propagator-utils.", "author": "Oberon00", "createdAt": "2020-11-27T08:46:39Z", "path": "sdk-extensions/aws/src/main/java/io/opentelemetry/sdk/extension/aws/resource/EcsResource.java", "diffHunk": "@@ -61,15 +59,22 @@ public Attributes getAttributes() {\n     }\n \n     String containerId = dockerHelper.getContainerId();\n-    if (!Strings.isNullOrEmpty(containerId)) {\n+    if (containerId != null && !containerId.isEmpty()) {\n       attrBuilders.put(ResourceAttributes.CONTAINER_ID, containerId);\n     }\n \n     return attrBuilders.build();\n   }\n \n   private boolean isOnEcs() {\n-    return (!Strings.isNullOrEmpty(sysEnv.get(ECS_METADATA_KEY_V3))\n-        || !Strings.isNullOrEmpty(sysEnv.get(ECS_METADATA_KEY_V4)));\n+    String metadata = sysEnv.getOrDefault(ECS_METADATA_KEY_V3, \"\");", "originalCommit": "19ca917a1dfdce4f6e62429747841314130ba401", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ5MjY0Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531492643", "bodyText": "Yeah don't think we can use propagator classes here. We could move it to API to the internal package, but so far we don't leak internal classes across artifacts in this repo. I think it's ok though so if others thing so too I could do that.", "author": "anuraaga", "createdAt": "2020-11-27T09:51:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ1NzMyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "d962c1ce898c0370b8d23e9f4f332e7fcaa2e979", "chunk": "diff --git a/sdk-extensions/aws/src/main/java/io/opentelemetry/sdk/extension/aws/resource/EcsResource.java b/sdk-extensions/aws/src/main/java/io/opentelemetry/sdk/extension/aws/resource/EcsResource.java\nindex 99ef6b6b5..338478448 100644\n--- a/sdk-extensions/aws/src/main/java/io/opentelemetry/sdk/extension/aws/resource/EcsResource.java\n+++ b/sdk-extensions/aws/src/main/java/io/opentelemetry/sdk/extension/aws/resource/EcsResource.java\n\n@@ -59,7 +61,7 @@ public class EcsResource extends ResourceProvider {\n     }\n \n     String containerId = dockerHelper.getContainerId();\n-    if (containerId != null && !containerId.isEmpty()) {\n+    if (!Strings.isNullOrEmpty(containerId)) {\n       attrBuilders.put(ResourceAttributes.CONTAINER_ID, containerId);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ1Nzk0NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531457945", "bodyText": "Shouldn't one abort also if read == 0? AFAIK this is documented to only happen at EOF.", "author": "Oberon00", "createdAt": "2020-11-27T08:47:49Z", "path": "sdk-extensions/aws/src/main/java/io/opentelemetry/sdk/extension/aws/resource/EksResource.java", "diffHunk": "@@ -115,12 +114,31 @@ private String getClusterName() {\n \n   private static String getK8sCredHeader() {\n     try {\n-      File file = new File(K8S_TOKEN_PATH);\n-      String content = Files.asCharSource(file, Charsets.UTF_8).read();\n+      String content = new String(readAllBytes(K8S_TOKEN_PATH), StandardCharsets.UTF_8);\n       return \"Bearer \" + content;\n     } catch (IOException e) {\n       logger.log(Level.WARNING, \"Unable to load K8s client token.\", e);\n     }\n     return \"\";\n   }\n+\n+  private static byte[] readAllBytes(String path) throws IOException {\n+    File file = new File(path);\n+    int size = (int) file.length();\n+    byte[] result = new byte[size];\n+    int bytesRead = 0;\n+    try (BufferedInputStream is = new BufferedInputStream(new FileInputStream(file))) {\n+      while (true) {\n+        int read = is.read(result);\n+        if (read < 0) {", "originalCommit": "19ca917a1dfdce4f6e62429747841314130ba401", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d962c1ce898c0370b8d23e9f4f332e7fcaa2e979", "chunk": "diff --git a/sdk-extensions/aws/src/main/java/io/opentelemetry/sdk/extension/aws/resource/EksResource.java b/sdk-extensions/aws/src/main/java/io/opentelemetry/sdk/extension/aws/resource/EksResource.java\nindex cc59b0b71..c83e04db0 100644\n--- a/sdk-extensions/aws/src/main/java/io/opentelemetry/sdk/extension/aws/resource/EksResource.java\n+++ b/sdk-extensions/aws/src/main/java/io/opentelemetry/sdk/extension/aws/resource/EksResource.java\n\n@@ -114,31 +115,12 @@ public class EksResource extends ResourceProvider {\n \n   private static String getK8sCredHeader() {\n     try {\n-      String content = new String(readAllBytes(K8S_TOKEN_PATH), StandardCharsets.UTF_8);\n+      File file = new File(K8S_TOKEN_PATH);\n+      String content = Files.asCharSource(file, Charsets.UTF_8).read();\n       return \"Bearer \" + content;\n     } catch (IOException e) {\n       logger.log(Level.WARNING, \"Unable to load K8s client token.\", e);\n     }\n     return \"\";\n   }\n-\n-  private static byte[] readAllBytes(String path) throws IOException {\n-    File file = new File(path);\n-    int size = (int) file.length();\n-    byte[] result = new byte[size];\n-    int bytesRead = 0;\n-    try (BufferedInputStream is = new BufferedInputStream(new FileInputStream(file))) {\n-      while (true) {\n-        int read = is.read(result);\n-        if (read < 0) {\n-          break;\n-        }\n-        bytesRead += read;\n-        if (bytesRead == size) {\n-          break;\n-        }\n-      }\n-    }\n-    return result;\n-  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ1OTUyMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531459522", "bodyText": "Even in Java 7, there is a stdlib API that does that: https://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html#readAllBytes(java.nio.file.Path)", "author": "Oberon00", "createdAt": "2020-11-27T08:50:45Z", "path": "sdk-extensions/aws/src/main/java/io/opentelemetry/sdk/extension/aws/resource/EksResource.java", "diffHunk": "@@ -115,12 +114,31 @@ private String getClusterName() {\n \n   private static String getK8sCredHeader() {\n     try {\n-      File file = new File(K8S_TOKEN_PATH);\n-      String content = Files.asCharSource(file, Charsets.UTF_8).read();\n+      String content = new String(readAllBytes(K8S_TOKEN_PATH), StandardCharsets.UTF_8);\n       return \"Bearer \" + content;\n     } catch (IOException e) {\n       logger.log(Level.WARNING, \"Unable to load K8s client token.\", e);\n     }\n     return \"\";\n   }\n+\n+  private static byte[] readAllBytes(String path) throws IOException {", "originalCommit": "19ca917a1dfdce4f6e62429747841314130ba401", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ3NzkzNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531477935", "bodyText": "Not on Android - but I realized, this module should not have the Android sniffer on... Nice!", "author": "anuraaga", "createdAt": "2020-11-27T09:24:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ1OTUyMg=="}], "type": "inlineReview", "revised_code": {"commit": "d962c1ce898c0370b8d23e9f4f332e7fcaa2e979", "chunk": "diff --git a/sdk-extensions/aws/src/main/java/io/opentelemetry/sdk/extension/aws/resource/EksResource.java b/sdk-extensions/aws/src/main/java/io/opentelemetry/sdk/extension/aws/resource/EksResource.java\nindex cc59b0b71..c83e04db0 100644\n--- a/sdk-extensions/aws/src/main/java/io/opentelemetry/sdk/extension/aws/resource/EksResource.java\n+++ b/sdk-extensions/aws/src/main/java/io/opentelemetry/sdk/extension/aws/resource/EksResource.java\n\n@@ -114,31 +115,12 @@ public class EksResource extends ResourceProvider {\n \n   private static String getK8sCredHeader() {\n     try {\n-      String content = new String(readAllBytes(K8S_TOKEN_PATH), StandardCharsets.UTF_8);\n+      File file = new File(K8S_TOKEN_PATH);\n+      String content = Files.asCharSource(file, Charsets.UTF_8).read();\n       return \"Bearer \" + content;\n     } catch (IOException e) {\n       logger.log(Level.WARNING, \"Unable to load K8s client token.\", e);\n     }\n     return \"\";\n   }\n-\n-  private static byte[] readAllBytes(String path) throws IOException {\n-    File file = new File(path);\n-    int size = (int) file.length();\n-    byte[] result = new byte[size];\n-    int bytesRead = 0;\n-    try (BufferedInputStream is = new BufferedInputStream(new FileInputStream(file))) {\n-      while (true) {\n-        int read = is.read(result);\n-        if (read < 0) {\n-          break;\n-        }\n-        bytesRead += read;\n-        if (bytesRead == size) {\n-          break;\n-        }\n-      }\n-    }\n-    return result;\n-  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ2MDEzNw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531460137", "bodyText": "Shouldn't we shortcut and return empty here if size == 0? Or if we want to support files that report their size wrongly, we would need a different approach from the pre-allocated array.", "author": "Oberon00", "createdAt": "2020-11-27T08:51:55Z", "path": "sdk-extensions/aws/src/main/java/io/opentelemetry/sdk/extension/aws/resource/EksResource.java", "diffHunk": "@@ -115,12 +114,31 @@ private String getClusterName() {\n \n   private static String getK8sCredHeader() {\n     try {\n-      File file = new File(K8S_TOKEN_PATH);\n-      String content = Files.asCharSource(file, Charsets.UTF_8).read();\n+      String content = new String(readAllBytes(K8S_TOKEN_PATH), StandardCharsets.UTF_8);\n       return \"Bearer \" + content;\n     } catch (IOException e) {\n       logger.log(Level.WARNING, \"Unable to load K8s client token.\", e);\n     }\n     return \"\";\n   }\n+\n+  private static byte[] readAllBytes(String path) throws IOException {\n+    File file = new File(path);\n+    int size = (int) file.length();\n+    byte[] result = new byte[size];\n+    int bytesRead = 0;\n+    try (BufferedInputStream is = new BufferedInputStream(new FileInputStream(file))) {", "originalCommit": "19ca917a1dfdce4f6e62429747841314130ba401", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d962c1ce898c0370b8d23e9f4f332e7fcaa2e979", "chunk": "diff --git a/sdk-extensions/aws/src/main/java/io/opentelemetry/sdk/extension/aws/resource/EksResource.java b/sdk-extensions/aws/src/main/java/io/opentelemetry/sdk/extension/aws/resource/EksResource.java\nindex cc59b0b71..c83e04db0 100644\n--- a/sdk-extensions/aws/src/main/java/io/opentelemetry/sdk/extension/aws/resource/EksResource.java\n+++ b/sdk-extensions/aws/src/main/java/io/opentelemetry/sdk/extension/aws/resource/EksResource.java\n\n@@ -114,31 +115,12 @@ public class EksResource extends ResourceProvider {\n \n   private static String getK8sCredHeader() {\n     try {\n-      String content = new String(readAllBytes(K8S_TOKEN_PATH), StandardCharsets.UTF_8);\n+      File file = new File(K8S_TOKEN_PATH);\n+      String content = Files.asCharSource(file, Charsets.UTF_8).read();\n       return \"Bearer \" + content;\n     } catch (IOException e) {\n       logger.log(Level.WARNING, \"Unable to load K8s client token.\", e);\n     }\n     return \"\";\n   }\n-\n-  private static byte[] readAllBytes(String path) throws IOException {\n-    File file = new File(path);\n-    int size = (int) file.length();\n-    byte[] result = new byte[size];\n-    int bytesRead = 0;\n-    try (BufferedInputStream is = new BufferedInputStream(new FileInputStream(file))) {\n-      while (true) {\n-        int read = is.read(result);\n-        if (read < 0) {\n-          break;\n-        }\n-        bytesRead += read;\n-        if (bytesRead == size) {\n-          break;\n-        }\n-      }\n-    }\n-    return result;\n-  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ2MTA4OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531461088", "bodyText": "Since zPages are an optional, experimental extension which you probably wouldn't use if resources are tight, I wouldn't mind keeping the Guava dependency for it.", "author": "Oberon00", "createdAt": "2020-11-27T08:53:53Z", "path": "sdk-extensions/zpages/src/main/java/io/opentelemetry/sdk/extension/zpages/TracezZPageHandler.java", "diffHunk": "@@ -540,41 +546,55 @@ private static String latencyBoundaryToString(LatencyBoundary latencyBoundary) {\n     throw new IllegalArgumentException(\"No value string available for: \" + latencyBoundary);\n   }\n \n-  private static ImmutableMap<LatencyBoundary, String> buildLatencyBoundaryStringMap() {\n+  private static Map<LatencyBoundary, String> buildLatencyBoundaryStringMap() {\n     Map<LatencyBoundary, String> latencyBoundaryMap = new HashMap<>();\n     for (LatencyBoundary latencyBoundary : LatencyBoundary.values()) {\n       latencyBoundaryMap.put(latencyBoundary, latencyBoundaryToString(latencyBoundary));\n     }\n-    return ImmutableMap.copyOf(latencyBoundaryMap);\n+    return latencyBoundaryMap;\n   }\n \n-  private static final class EventComparator implements Comparator<Event>, Serializable {\n-    private static final long serialVersionUID = 0;\n-\n-    @Override\n-    public int compare(Event e1, Event e2) {\n-      return Long.compare(e1.getEpochNanos(), e2.getEpochNanos());\n+  private static String escapeHtml(String html) {", "originalCommit": "19ca917a1dfdce4f6e62429747841314130ba401", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ5ODA2OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531498068", "bodyText": "Yeah this is the one line that gets most benefit from Guava. I'm mixed, 2MB dependency just for this function, mostly :)", "author": "anuraaga", "createdAt": "2020-11-27T10:00:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ2MTA4OA=="}], "type": "inlineReview", "revised_code": {"commit": "d962c1ce898c0370b8d23e9f4f332e7fcaa2e979", "chunk": "diff --git a/sdk-extensions/zpages/src/main/java/io/opentelemetry/sdk/extension/zpages/TracezZPageHandler.java b/sdk-extensions/zpages/src/main/java/io/opentelemetry/sdk/extension/zpages/TracezZPageHandler.java\nindex a954e104c..9e37ceea9 100644\n--- a/sdk-extensions/zpages/src/main/java/io/opentelemetry/sdk/extension/zpages/TracezZPageHandler.java\n+++ b/sdk-extensions/zpages/src/main/java/io/opentelemetry/sdk/extension/zpages/TracezZPageHandler.java\n\n@@ -546,55 +540,41 @@ final class TracezZPageHandler extends ZPageHandler {\n     throw new IllegalArgumentException(\"No value string available for: \" + latencyBoundary);\n   }\n \n-  private static Map<LatencyBoundary, String> buildLatencyBoundaryStringMap() {\n+  private static ImmutableMap<LatencyBoundary, String> buildLatencyBoundaryStringMap() {\n     Map<LatencyBoundary, String> latencyBoundaryMap = new HashMap<>();\n     for (LatencyBoundary latencyBoundary : LatencyBoundary.values()) {\n       latencyBoundaryMap.put(latencyBoundary, latencyBoundaryToString(latencyBoundary));\n     }\n-    return latencyBoundaryMap;\n+    return ImmutableMap.copyOf(latencyBoundaryMap);\n   }\n \n-  private static String escapeHtml(String html) {\n-    StringBuilder escaped = null;\n-    for (int i = 0; i < html.length(); i++) {\n-      char c = html.charAt(i);\n-      switch (c) {\n-        case '\"':\n-          escaped = lazyStringBuilder(escaped, html, i);\n-          escaped.append(\"&quot;\");\n-          break;\n-        case '\\'':\n-          escaped = lazyStringBuilder(escaped, html, i);\n-          escaped.append(\"&#39;\");\n-          break;\n-        case '&':\n-          escaped = lazyStringBuilder(escaped, html, i);\n-          escaped.append(\"&amp;\");\n-          break;\n-        case '<':\n-          escaped = lazyStringBuilder(escaped, html, i);\n-          escaped.append(\"&lt;\");\n-          break;\n-        case '>':\n-          escaped = lazyStringBuilder(escaped, html, i);\n-          escaped.append(\"&gt;\");\n-          break;\n-        default:\n-          if (escaped != null) {\n-            escaped.append(c);\n-          }\n-      }\n+  private static final class EventComparator implements Comparator<Event>, Serializable {\n+    private static final long serialVersionUID = 0;\n+\n+    @Override\n+    public int compare(Event e1, Event e2) {\n+      return Long.compare(e1.getEpochNanos(), e2.getEpochNanos());\n     }\n-    return escaped != null ? escaped.toString() : html;\n   }\n \n-  private static StringBuilder lazyStringBuilder(\n-      @Nullable StringBuilder sb, String str, int currentCharIdx) {\n-    if (sb != null) {\n-      return sb;\n+  private static final class SpanDataComparator implements Comparator<SpanData>, Serializable {\n+    private static final long serialVersionUID = 0;\n+    private final boolean incremental;\n+\n+    /**\n+     * Returns a new {@code SpanDataComparator}.\n+     *\n+     * @param incremental {@code true} if sorting spans incrementally\n+     */\n+    private SpanDataComparator(boolean incremental) {\n+      this.incremental = incremental;\n+    }\n+\n+    @Override\n+    public int compare(SpanData s1, SpanData s2) {\n+      return incremental\n+          ? Long.compare(s1.getStartEpochNanos(), s2.getStartEpochNanos())\n+          : Long.compare(s2.getStartEpochNanos(), s1.getEndEpochNanos());\n     }\n-    sb = new StringBuilder(str.length());\n-    sb.append(str.substring(0, currentCharIdx - 1));\n-    return sb;\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ2MjI0Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531462242", "bodyText": "Are you sure trimming is OK here? In an URL we shouldn't have any spaces encoded as such anyway.", "author": "Oberon00", "createdAt": "2020-11-27T08:55:50Z", "path": "sdk-extensions/zpages/src/main/java/io/opentelemetry/sdk/extension/zpages/ZPageHttpHandler.java", "diffHunk": "@@ -42,24 +37,36 @@\n    * @param queryString the query string for buiding the query map.\n    * @return the query map built based on the query string.\n    */\n-  @VisibleForTesting\n-  static ImmutableMap<String, String> parseQueryString(String queryString)\n-      throws UnsupportedEncodingException {\n+  // Visible for testing\n+  static Map<String, String> parseQueryString(String queryString) {\n     if (queryString == null) {\n-      return ImmutableMap.of();\n+      return Collections.emptyMap();\n     }\n     Map<String, String> queryMap = new HashMap<String, String>();\n-    for (String param : QUERY_SPLITTER.split(queryString)) {\n-      List<String> keyValuePair = QUERY_KEYVAL_SPLITTER.splitToList(param);\n-      if (keyValuePair.size() > 1) {\n-        if (keyValuePair.get(0).equals(PARAM_SPAN_NAME)) {\n-          queryMap.put(keyValuePair.get(0), URLDecoder.decode(keyValuePair.get(1), \"UTF-8\"));\n-        } else {\n-          queryMap.put(keyValuePair.get(0), keyValuePair.get(1));\n-        }\n-      }\n-    }\n-    return ImmutableMap.copyOf(queryMap);\n+    Arrays.stream(queryString.split(\"&\"))\n+        .filter(s -> !s.isEmpty())\n+        .map(String::trim)", "originalCommit": "19ca917a1dfdce4f6e62429747841314130ba401", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ2MzUxNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531463515", "bodyText": "Also, you trim again below, so this is definitely redundant.", "author": "Oberon00", "createdAt": "2020-11-27T08:58:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ2MjI0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ5NjMxMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531496312", "bodyText": "Hmm - not sure just reproing the current code for now", "author": "anuraaga", "createdAt": "2020-11-27T09:57:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ2MjI0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "d962c1ce898c0370b8d23e9f4f332e7fcaa2e979", "chunk": "diff --git a/sdk-extensions/zpages/src/main/java/io/opentelemetry/sdk/extension/zpages/ZPageHttpHandler.java b/sdk-extensions/zpages/src/main/java/io/opentelemetry/sdk/extension/zpages/ZPageHttpHandler.java\nindex c0cbe0c15..bacc34dc9 100644\n--- a/sdk-extensions/zpages/src/main/java/io/opentelemetry/sdk/extension/zpages/ZPageHttpHandler.java\n+++ b/sdk-extensions/zpages/src/main/java/io/opentelemetry/sdk/extension/zpages/ZPageHttpHandler.java\n\n@@ -37,36 +42,24 @@ final class ZPageHttpHandler implements HttpHandler {\n    * @param queryString the query string for buiding the query map.\n    * @return the query map built based on the query string.\n    */\n-  // Visible for testing\n-  static Map<String, String> parseQueryString(String queryString) {\n+  @VisibleForTesting\n+  static ImmutableMap<String, String> parseQueryString(String queryString)\n+      throws UnsupportedEncodingException {\n     if (queryString == null) {\n-      return Collections.emptyMap();\n+      return ImmutableMap.of();\n     }\n     Map<String, String> queryMap = new HashMap<String, String>();\n-    Arrays.stream(queryString.split(\"&\"))\n-        .filter(s -> !s.isEmpty())\n-        .map(String::trim)\n-        .forEach(\n-            param -> {\n-              List<String> keyValuePair =\n-                  Arrays.stream(param.split(\"=\"))\n-                      .filter(s -> !s.isEmpty())\n-                      .map(String::trim)\n-                      .collect(Collectors.toList());\n-              if (keyValuePair.size() > 1) {\n-                if (keyValuePair.get(0).equals(PARAM_SPAN_NAME)) {\n-                  try {\n-                    queryMap.put(\n-                        keyValuePair.get(0), URLDecoder.decode(keyValuePair.get(1), \"UTF-8\"));\n-                  } catch (UnsupportedEncodingException e) {\n-                    // Ignore encoding exception.\n-                  }\n-                } else {\n-                  queryMap.put(keyValuePair.get(0), keyValuePair.get(1));\n-                }\n-              }\n-            });\n-    return Collections.unmodifiableMap(queryMap);\n+    for (String param : QUERY_SPLITTER.split(queryString)) {\n+      List<String> keyValuePair = QUERY_KEYVAL_SPLITTER.splitToList(param);\n+      if (keyValuePair.size() > 1) {\n+        if (keyValuePair.get(0).equals(PARAM_SPAN_NAME)) {\n+          queryMap.put(keyValuePair.get(0), URLDecoder.decode(keyValuePair.get(1), \"UTF-8\"));\n+        } else {\n+          queryMap.put(keyValuePair.get(0), keyValuePair.get(1));\n+        }\n+      }\n+    }\n+    return ImmutableMap.copyOf(queryMap);\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ2Mjg1MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531462851", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                              Arrays.stream(param.split(\"=\"))\n          \n          \n            \n                              Arrays.stream(param.split(\"=\", 2))", "author": "Oberon00", "createdAt": "2020-11-27T08:56:59Z", "path": "sdk-extensions/zpages/src/main/java/io/opentelemetry/sdk/extension/zpages/ZPageHttpHandler.java", "diffHunk": "@@ -42,24 +37,36 @@\n    * @param queryString the query string for buiding the query map.\n    * @return the query map built based on the query string.\n    */\n-  @VisibleForTesting\n-  static ImmutableMap<String, String> parseQueryString(String queryString)\n-      throws UnsupportedEncodingException {\n+  // Visible for testing\n+  static Map<String, String> parseQueryString(String queryString) {\n     if (queryString == null) {\n-      return ImmutableMap.of();\n+      return Collections.emptyMap();\n     }\n     Map<String, String> queryMap = new HashMap<String, String>();\n-    for (String param : QUERY_SPLITTER.split(queryString)) {\n-      List<String> keyValuePair = QUERY_KEYVAL_SPLITTER.splitToList(param);\n-      if (keyValuePair.size() > 1) {\n-        if (keyValuePair.get(0).equals(PARAM_SPAN_NAME)) {\n-          queryMap.put(keyValuePair.get(0), URLDecoder.decode(keyValuePair.get(1), \"UTF-8\"));\n-        } else {\n-          queryMap.put(keyValuePair.get(0), keyValuePair.get(1));\n-        }\n-      }\n-    }\n-    return ImmutableMap.copyOf(queryMap);\n+    Arrays.stream(queryString.split(\"&\"))\n+        .filter(s -> !s.isEmpty())\n+        .map(String::trim)\n+        .forEach(\n+            param -> {\n+              List<String> keyValuePair =\n+                  Arrays.stream(param.split(\"=\"))", "originalCommit": "19ca917a1dfdce4f6e62429747841314130ba401", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d962c1ce898c0370b8d23e9f4f332e7fcaa2e979", "chunk": "diff --git a/sdk-extensions/zpages/src/main/java/io/opentelemetry/sdk/extension/zpages/ZPageHttpHandler.java b/sdk-extensions/zpages/src/main/java/io/opentelemetry/sdk/extension/zpages/ZPageHttpHandler.java\nindex c0cbe0c15..bacc34dc9 100644\n--- a/sdk-extensions/zpages/src/main/java/io/opentelemetry/sdk/extension/zpages/ZPageHttpHandler.java\n+++ b/sdk-extensions/zpages/src/main/java/io/opentelemetry/sdk/extension/zpages/ZPageHttpHandler.java\n\n@@ -37,36 +42,24 @@ final class ZPageHttpHandler implements HttpHandler {\n    * @param queryString the query string for buiding the query map.\n    * @return the query map built based on the query string.\n    */\n-  // Visible for testing\n-  static Map<String, String> parseQueryString(String queryString) {\n+  @VisibleForTesting\n+  static ImmutableMap<String, String> parseQueryString(String queryString)\n+      throws UnsupportedEncodingException {\n     if (queryString == null) {\n-      return Collections.emptyMap();\n+      return ImmutableMap.of();\n     }\n     Map<String, String> queryMap = new HashMap<String, String>();\n-    Arrays.stream(queryString.split(\"&\"))\n-        .filter(s -> !s.isEmpty())\n-        .map(String::trim)\n-        .forEach(\n-            param -> {\n-              List<String> keyValuePair =\n-                  Arrays.stream(param.split(\"=\"))\n-                      .filter(s -> !s.isEmpty())\n-                      .map(String::trim)\n-                      .collect(Collectors.toList());\n-              if (keyValuePair.size() > 1) {\n-                if (keyValuePair.get(0).equals(PARAM_SPAN_NAME)) {\n-                  try {\n-                    queryMap.put(\n-                        keyValuePair.get(0), URLDecoder.decode(keyValuePair.get(1), \"UTF-8\"));\n-                  } catch (UnsupportedEncodingException e) {\n-                    // Ignore encoding exception.\n-                  }\n-                } else {\n-                  queryMap.put(keyValuePair.get(0), keyValuePair.get(1));\n-                }\n-              }\n-            });\n-    return Collections.unmodifiableMap(queryMap);\n+    for (String param : QUERY_SPLITTER.split(queryString)) {\n+      List<String> keyValuePair = QUERY_KEYVAL_SPLITTER.splitToList(param);\n+      if (keyValuePair.size() > 1) {\n+        if (keyValuePair.get(0).equals(PARAM_SPAN_NAME)) {\n+          queryMap.put(keyValuePair.get(0), URLDecoder.decode(keyValuePair.get(1), \"UTF-8\"));\n+        } else {\n+          queryMap.put(keyValuePair.get(0), keyValuePair.get(1));\n+        }\n+      }\n+    }\n+    return ImmutableMap.copyOf(queryMap);\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ2MzIyNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531463225", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                  .filter(s -> !s.isEmpty())\n          \n          \n            \n                                  .map(String::trim)\n          \n      \n    \n    \n  \n\nShould not be needed. Also spaces may be relevant here.", "author": "Oberon00", "createdAt": "2020-11-27T08:57:41Z", "path": "sdk-extensions/zpages/src/main/java/io/opentelemetry/sdk/extension/zpages/ZPageHttpHandler.java", "diffHunk": "@@ -42,24 +37,36 @@\n    * @param queryString the query string for buiding the query map.\n    * @return the query map built based on the query string.\n    */\n-  @VisibleForTesting\n-  static ImmutableMap<String, String> parseQueryString(String queryString)\n-      throws UnsupportedEncodingException {\n+  // Visible for testing\n+  static Map<String, String> parseQueryString(String queryString) {\n     if (queryString == null) {\n-      return ImmutableMap.of();\n+      return Collections.emptyMap();\n     }\n     Map<String, String> queryMap = new HashMap<String, String>();\n-    for (String param : QUERY_SPLITTER.split(queryString)) {\n-      List<String> keyValuePair = QUERY_KEYVAL_SPLITTER.splitToList(param);\n-      if (keyValuePair.size() > 1) {\n-        if (keyValuePair.get(0).equals(PARAM_SPAN_NAME)) {\n-          queryMap.put(keyValuePair.get(0), URLDecoder.decode(keyValuePair.get(1), \"UTF-8\"));\n-        } else {\n-          queryMap.put(keyValuePair.get(0), keyValuePair.get(1));\n-        }\n-      }\n-    }\n-    return ImmutableMap.copyOf(queryMap);\n+    Arrays.stream(queryString.split(\"&\"))\n+        .filter(s -> !s.isEmpty())\n+        .map(String::trim)\n+        .forEach(\n+            param -> {\n+              List<String> keyValuePair =\n+                  Arrays.stream(param.split(\"=\"))\n+                      .filter(s -> !s.isEmpty())\n+                      .map(String::trim)", "originalCommit": "19ca917a1dfdce4f6e62429747841314130ba401", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d962c1ce898c0370b8d23e9f4f332e7fcaa2e979", "chunk": "diff --git a/sdk-extensions/zpages/src/main/java/io/opentelemetry/sdk/extension/zpages/ZPageHttpHandler.java b/sdk-extensions/zpages/src/main/java/io/opentelemetry/sdk/extension/zpages/ZPageHttpHandler.java\nindex c0cbe0c15..bacc34dc9 100644\n--- a/sdk-extensions/zpages/src/main/java/io/opentelemetry/sdk/extension/zpages/ZPageHttpHandler.java\n+++ b/sdk-extensions/zpages/src/main/java/io/opentelemetry/sdk/extension/zpages/ZPageHttpHandler.java\n\n@@ -37,36 +42,24 @@ final class ZPageHttpHandler implements HttpHandler {\n    * @param queryString the query string for buiding the query map.\n    * @return the query map built based on the query string.\n    */\n-  // Visible for testing\n-  static Map<String, String> parseQueryString(String queryString) {\n+  @VisibleForTesting\n+  static ImmutableMap<String, String> parseQueryString(String queryString)\n+      throws UnsupportedEncodingException {\n     if (queryString == null) {\n-      return Collections.emptyMap();\n+      return ImmutableMap.of();\n     }\n     Map<String, String> queryMap = new HashMap<String, String>();\n-    Arrays.stream(queryString.split(\"&\"))\n-        .filter(s -> !s.isEmpty())\n-        .map(String::trim)\n-        .forEach(\n-            param -> {\n-              List<String> keyValuePair =\n-                  Arrays.stream(param.split(\"=\"))\n-                      .filter(s -> !s.isEmpty())\n-                      .map(String::trim)\n-                      .collect(Collectors.toList());\n-              if (keyValuePair.size() > 1) {\n-                if (keyValuePair.get(0).equals(PARAM_SPAN_NAME)) {\n-                  try {\n-                    queryMap.put(\n-                        keyValuePair.get(0), URLDecoder.decode(keyValuePair.get(1), \"UTF-8\"));\n-                  } catch (UnsupportedEncodingException e) {\n-                    // Ignore encoding exception.\n-                  }\n-                } else {\n-                  queryMap.put(keyValuePair.get(0), keyValuePair.get(1));\n-                }\n-              }\n-            });\n-    return Collections.unmodifiableMap(queryMap);\n+    for (String param : QUERY_SPLITTER.split(queryString)) {\n+      List<String> keyValuePair = QUERY_KEYVAL_SPLITTER.splitToList(param);\n+      if (keyValuePair.size() > 1) {\n+        if (keyValuePair.get(0).equals(PARAM_SPAN_NAME)) {\n+          queryMap.put(keyValuePair.get(0), URLDecoder.decode(keyValuePair.get(1), \"UTF-8\"));\n+        } else {\n+          queryMap.put(keyValuePair.get(0), keyValuePair.get(1));\n+        }\n+      }\n+    }\n+    return ImmutableMap.copyOf(queryMap);\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ2NzQzMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531467433", "bodyText": "Why only decode selectively here? Shouldn't all keys and values be decoded?", "author": "Oberon00", "createdAt": "2020-11-27T09:06:03Z", "path": "sdk-extensions/zpages/src/main/java/io/opentelemetry/sdk/extension/zpages/ZPageHttpHandler.java", "diffHunk": "@@ -42,24 +37,36 @@\n    * @param queryString the query string for buiding the query map.\n    * @return the query map built based on the query string.\n    */\n-  @VisibleForTesting\n-  static ImmutableMap<String, String> parseQueryString(String queryString)\n-      throws UnsupportedEncodingException {\n+  // Visible for testing\n+  static Map<String, String> parseQueryString(String queryString) {\n     if (queryString == null) {\n-      return ImmutableMap.of();\n+      return Collections.emptyMap();\n     }\n     Map<String, String> queryMap = new HashMap<String, String>();\n-    for (String param : QUERY_SPLITTER.split(queryString)) {\n-      List<String> keyValuePair = QUERY_KEYVAL_SPLITTER.splitToList(param);\n-      if (keyValuePair.size() > 1) {\n-        if (keyValuePair.get(0).equals(PARAM_SPAN_NAME)) {\n-          queryMap.put(keyValuePair.get(0), URLDecoder.decode(keyValuePair.get(1), \"UTF-8\"));\n-        } else {\n-          queryMap.put(keyValuePair.get(0), keyValuePair.get(1));\n-        }\n-      }\n-    }\n-    return ImmutableMap.copyOf(queryMap);\n+    Arrays.stream(queryString.split(\"&\"))\n+        .filter(s -> !s.isEmpty())\n+        .map(String::trim)\n+        .forEach(\n+            param -> {\n+              List<String> keyValuePair =\n+                  Arrays.stream(param.split(\"=\"))\n+                      .filter(s -> !s.isEmpty())\n+                      .map(String::trim)\n+                      .collect(Collectors.toList());\n+              if (keyValuePair.size() > 1) {\n+                if (keyValuePair.get(0).equals(PARAM_SPAN_NAME)) {\n+                  try {\n+                    queryMap.put(\n+                        keyValuePair.get(0), URLDecoder.decode(keyValuePair.get(1), \"UTF-8\"));", "originalCommit": "19ca917a1dfdce4f6e62429747841314130ba401", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ5NjY0MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531496640", "bodyText": "Think I agree - would probably fix that separately from guava refactoring.", "author": "anuraaga", "createdAt": "2020-11-27T09:58:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ2NzQzMw=="}], "type": "inlineReview", "revised_code": {"commit": "d962c1ce898c0370b8d23e9f4f332e7fcaa2e979", "chunk": "diff --git a/sdk-extensions/zpages/src/main/java/io/opentelemetry/sdk/extension/zpages/ZPageHttpHandler.java b/sdk-extensions/zpages/src/main/java/io/opentelemetry/sdk/extension/zpages/ZPageHttpHandler.java\nindex c0cbe0c15..bacc34dc9 100644\n--- a/sdk-extensions/zpages/src/main/java/io/opentelemetry/sdk/extension/zpages/ZPageHttpHandler.java\n+++ b/sdk-extensions/zpages/src/main/java/io/opentelemetry/sdk/extension/zpages/ZPageHttpHandler.java\n\n@@ -37,36 +42,24 @@ final class ZPageHttpHandler implements HttpHandler {\n    * @param queryString the query string for buiding the query map.\n    * @return the query map built based on the query string.\n    */\n-  // Visible for testing\n-  static Map<String, String> parseQueryString(String queryString) {\n+  @VisibleForTesting\n+  static ImmutableMap<String, String> parseQueryString(String queryString)\n+      throws UnsupportedEncodingException {\n     if (queryString == null) {\n-      return Collections.emptyMap();\n+      return ImmutableMap.of();\n     }\n     Map<String, String> queryMap = new HashMap<String, String>();\n-    Arrays.stream(queryString.split(\"&\"))\n-        .filter(s -> !s.isEmpty())\n-        .map(String::trim)\n-        .forEach(\n-            param -> {\n-              List<String> keyValuePair =\n-                  Arrays.stream(param.split(\"=\"))\n-                      .filter(s -> !s.isEmpty())\n-                      .map(String::trim)\n-                      .collect(Collectors.toList());\n-              if (keyValuePair.size() > 1) {\n-                if (keyValuePair.get(0).equals(PARAM_SPAN_NAME)) {\n-                  try {\n-                    queryMap.put(\n-                        keyValuePair.get(0), URLDecoder.decode(keyValuePair.get(1), \"UTF-8\"));\n-                  } catch (UnsupportedEncodingException e) {\n-                    // Ignore encoding exception.\n-                  }\n-                } else {\n-                  queryMap.put(keyValuePair.get(0), keyValuePair.get(1));\n-                }\n-              }\n-            });\n-    return Collections.unmodifiableMap(queryMap);\n+    for (String param : QUERY_SPLITTER.split(queryString)) {\n+      List<String> keyValuePair = QUERY_KEYVAL_SPLITTER.splitToList(param);\n+      if (keyValuePair.size() > 1) {\n+        if (keyValuePair.get(0).equals(PARAM_SPAN_NAME)) {\n+          queryMap.put(keyValuePair.get(0), URLDecoder.decode(keyValuePair.get(1), \"UTF-8\"));\n+        } else {\n+          queryMap.put(keyValuePair.get(0), keyValuePair.get(1));\n+        }\n+      }\n+    }\n+    return ImmutableMap.copyOf(queryMap);\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ2ODEwOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531468108", "bodyText": "I think a normal foreach loop would be more readable.", "author": "Oberon00", "createdAt": "2020-11-27T09:07:13Z", "path": "sdk/common/src/main/java/io/opentelemetry/sdk/common/export/ConfigBuilder.java", "diffHunk": "@@ -65,7 +63,9 @@ protected abstract T fromConfigMap(\n \n   /** Sets the configuration values from the given {@link Properties} object. */\n   public T readProperties(Properties properties) {\n-    return fromConfigMap(Maps.fromProperties(properties), NamingConvention.DOT);\n+    Map<String, String> map = new HashMap<>(properties.size());\n+    properties.forEach((key, value) -> map.put((String) key, (String) value));", "originalCommit": "19ca917a1dfdce4f6e62429747841314130ba401", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ5NzAxMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531497011", "bodyText": "Hmm - I've always appreciated Java 8's Map.forEach since Entry can be a bit gross :)", "author": "anuraaga", "createdAt": "2020-11-27T09:58:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ2ODEwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUwODgxOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531508819", "bodyText": "Alternatively, how about some casting? https://stackoverflow.com/a/17209434/2128694\nMap<String, String> map = (Map<String, String>)(Map)properties;", "author": "Oberon00", "createdAt": "2020-11-27T10:20:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ2ODEwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTkwMTc4NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531901784", "bodyText": "Thanks!", "author": "anuraaga", "createdAt": "2020-11-28T05:37:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ2ODEwOA=="}], "type": "inlineReview", "revised_code": {"commit": "d8476a2c751661bbd9899c9c8863fbc8bb088457", "chunk": "diff --git a/sdk/common/src/main/java/io/opentelemetry/sdk/common/export/ConfigBuilder.java b/sdk/common/src/main/java/io/opentelemetry/sdk/common/export/ConfigBuilder.java\nindex 488af26e0..4e1a9348e 100644\n--- a/sdk/common/src/main/java/io/opentelemetry/sdk/common/export/ConfigBuilder.java\n+++ b/sdk/common/src/main/java/io/opentelemetry/sdk/common/export/ConfigBuilder.java\n\n@@ -63,8 +63,9 @@ public abstract class ConfigBuilder<T> {\n \n   /** Sets the configuration values from the given {@link Properties} object. */\n   public T readProperties(Properties properties) {\n-    Map<String, String> map = new HashMap<>(properties.size());\n-    properties.forEach((key, value) -> map.put((String) key, (String) value));\n+    // Properties incorrectly implements Map<Object, Object> but we know it only has Strings.\n+    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+    Map<String, String> map = (Map) properties;\n     return fromConfigMap(map, NamingConvention.DOT);\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ2OTA2MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531469060", "bodyText": "I think you might need to swap the order of trim/isEmpty to match Guava. AFAIK omitEmptyStrings only sets a boolean. But I may be wrong here.", "author": "Oberon00", "createdAt": "2020-11-27T09:09:06Z", "path": "sdk/common/src/main/java/io/opentelemetry/sdk/resources/ResourcesConfig.java", "diffHunk": "@@ -103,8 +105,11 @@ protected Builder fromConfigMap(\n       String stringValue = getStringProperty(OTEL_JAVA_DISABLED_RESOURCES_PROVIDERS, configMap);\n       if (stringValue != null) {\n         this.setDisabledResourceProviders(\n-            ImmutableSet.copyOf(\n-                Splitter.on(',').omitEmptyStrings().trimResults().split(stringValue)));\n+            Collections.unmodifiableSet(\n+                Arrays.stream(stringValue.split(\",\"))\n+                    .filter(s -> !s.isEmpty())\n+                    .map(String::trim)", "originalCommit": "19ca917a1dfdce4f6e62429747841314130ba401", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc0MTE3MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r532741171", "bodyText": "Whether or not it matches guava, this logic seems right. Values that are only whitespace shouldn't be used, I don't think.", "author": "jkwatson", "createdAt": "2020-11-30T16:46:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ2OTA2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA3MDE4OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r533070189", "bodyText": "My not splitting the PRs up in advance caused this review to be a bit hectic, sorry about that. While GitHub doesn't have the outdated mark here, if I remember correctly, the code used to be in the wrong order and @Oberon00 commented and I fixed it so it should be good now.", "author": "anuraaga", "createdAt": "2020-12-01T04:45:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ2OTA2MA=="}], "type": "inlineReview", "revised_code": {"commit": "d962c1ce898c0370b8d23e9f4f332e7fcaa2e979", "chunk": "diff --git a/sdk/common/src/main/java/io/opentelemetry/sdk/resources/ResourcesConfig.java b/sdk/common/src/main/java/io/opentelemetry/sdk/resources/ResourcesConfig.java\nindex 48305402a..74c8c2c2d 100644\n--- a/sdk/common/src/main/java/io/opentelemetry/sdk/resources/ResourcesConfig.java\n+++ b/sdk/common/src/main/java/io/opentelemetry/sdk/resources/ResourcesConfig.java\n\n@@ -107,8 +107,8 @@ public abstract class ResourcesConfig {\n         this.setDisabledResourceProviders(\n             Collections.unmodifiableSet(\n                 Arrays.stream(stringValue.split(\",\"))\n-                    .filter(s -> !s.isEmpty())\n                     .map(String::trim)\n+                    .filter(s -> !s.isEmpty())\n                     .collect(Collectors.toSet())));\n       }\n       return this;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ2OTM0MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531469341", "bodyText": "Didn't we have some Utils.checkArgument function?", "author": "Oberon00", "createdAt": "2020-11-27T09:09:38Z", "path": "sdk/trace/src/main/java/io/opentelemetry/sdk/trace/config/TraceConfig.java", "diffHunk": "@@ -352,16 +350,26 @@ public Builder setTraceIdRatioBased(double samplerRatio) {\n      */\n     public TraceConfig build() {\n       TraceConfig traceConfig = autoBuild();\n-      Preconditions.checkArgument(\n-          traceConfig.getMaxNumberOfAttributes() > 0, \"maxNumberOfAttributes\");\n-      Preconditions.checkArgument(traceConfig.getMaxNumberOfEvents() > 0, \"maxNumberOfEvents\");\n-      Preconditions.checkArgument(traceConfig.getMaxNumberOfLinks() > 0, \"maxNumberOfLinks\");\n-      Preconditions.checkArgument(\n-          traceConfig.getMaxNumberOfAttributesPerEvent() > 0, \"maxNumberOfAttributesPerEvent\");\n-      Preconditions.checkArgument(\n-          traceConfig.getMaxNumberOfAttributesPerLink() > 0, \"maxNumberOfAttributesPerLink\");\n-      Preconditions.checkArgument(\n-          traceConfig.getMaxLengthOfAttributeValues() >= -1, \"maxLengthOfAttributeValues\");\n+      if (traceConfig.getMaxNumberOfAttributes() <= 0) {", "originalCommit": "19ca917a1dfdce4f6e62429747841314130ba401", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ5NzQ0OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531497448", "bodyText": "Yeah we have it in API - if we're ok with cross-referencing from other artifacts (guess it's ok) I'll use it", "author": "anuraaga", "createdAt": "2020-11-27T09:59:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ2OTM0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc0MTgyOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r532741829", "bodyText": "Yeah, the SDK uses API classes quite a bit (obviously because it has to implement it!). I think this is a fine usage, as long as it's not in a strictly \"internal\" package.", "author": "jkwatson", "createdAt": "2020-11-30T16:47:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ2OTM0MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ5ODQ1Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531498457", "bodyText": "You can't write the full buffer here. You need to check how many bytes you actually read into the buffer, which may be less.", "author": "Oberon00", "createdAt": "2020-11-27T10:01:15Z", "path": "sdk-extensions/aws/src/main/java/io/opentelemetry/sdk/extension/aws/resource/Ec2Resource.java", "diffHunk": "@@ -212,9 +212,9 @@ private static void readTo(@Nullable InputStream is, ByteArrayOutputStream os)\n     if (is == null) {\n       return;\n     }\n-    int b;\n-    while ((b = is.read()) != -1) {\n-      os.write(b);\n+    byte[] buf = new byte[8192];\n+    while (is.read(buf) != -1) {\n+      os.write(buf);", "originalCommit": "2106b5613386d8f431db80e628479fc8b5e2cfe7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d962c1ce898c0370b8d23e9f4f332e7fcaa2e979", "chunk": "diff --git a/sdk-extensions/aws/src/main/java/io/opentelemetry/sdk/extension/aws/resource/Ec2Resource.java b/sdk-extensions/aws/src/main/java/io/opentelemetry/sdk/extension/aws/resource/Ec2Resource.java\nindex e88e89983..1c9c4ea0e 100644\n--- a/sdk-extensions/aws/src/main/java/io/opentelemetry/sdk/extension/aws/resource/Ec2Resource.java\n+++ b/sdk-extensions/aws/src/main/java/io/opentelemetry/sdk/extension/aws/resource/Ec2Resource.java\n\n@@ -206,15 +206,4 @@ public class Ec2Resource extends ResourceProvider {\n   private String fetchHostname(String token) {\n     return fetchString(\"GET\", hostnameUrl, token, /* includeTtl= */ false);\n   }\n-\n-  private static void readTo(@Nullable InputStream is, ByteArrayOutputStream os)\n-      throws IOException {\n-    if (is == null) {\n-      return;\n-    }\n-    byte[] buf = new byte[8192];\n-    while (is.read(buf) != -1) {\n-      os.write(buf);\n-    }\n-  }\n }\n"}}, {"oid": "d962c1ce898c0370b8d23e9f4f332e7fcaa2e979", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d962c1ce898c0370b8d23e9f4f332e7fcaa2e979", "message": "Remove Guava from SDK", "committedDate": "2020-11-27T10:02:40Z", "type": "commit"}, {"oid": "d962c1ce898c0370b8d23e9f4f332e7fcaa2e979", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d962c1ce898c0370b8d23e9f4f332e7fcaa2e979", "message": "Remove Guava from SDK", "committedDate": "2020-11-27T10:02:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUwNzIyMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531507222", "bodyText": "Add a comment?", "author": "Oberon00", "createdAt": "2020-11-27T10:17:04Z", "path": "sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java", "diffHunk": "@@ -253,7 +252,6 @@ private MeterProvider buildMeterProvider() {\n    * @see Obfuscated\n    */\n   @ThreadSafe\n-  @VisibleForTesting", "originalCommit": "d962c1ce898c0370b8d23e9f4f332e7fcaa2e979", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTg5ODY2Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531898662", "bodyText": "Oops", "author": "anuraaga", "createdAt": "2020-11-28T05:33:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUwNzIyMg=="}], "type": "inlineReview", "revised_code": {"commit": "d8476a2c751661bbd9899c9c8863fbc8bb088457", "chunk": "diff --git a/sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java b/sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java\nindex 7be334996..faf8673f0 100644\n--- a/sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java\n+++ b/sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java\n\n@@ -252,6 +252,7 @@ public final class OpenTelemetrySdk extends DefaultOpenTelemetry {\n    * @see Obfuscated\n    */\n   @ThreadSafe\n+  // Visible for testing\n   static class ObfuscatedTracerProvider implements TracerProvider, Obfuscated<TracerProvider> {\n \n     private final TracerProvider delegate;\n"}}, {"oid": "d8476a2c751661bbd9899c9c8863fbc8bb088457", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d8476a2c751661bbd9899c9c8863fbc8bb088457", "message": "Clean", "committedDate": "2020-11-28T05:39:44Z", "type": "commit"}]}