{"pr_number": 1889, "pr_title": "Fix propagating Otel context to propagate gRPC context", "pr_createdAt": "2020-10-27T03:55:46Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1889", "timeline": [{"oid": "6ad3f73d896123c1c724c7f9634d9285259746b4", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/6ad3f73d896123c1c724c7f9634d9285259746b4", "message": "Fix propagating Otel context to propagate gRPC context\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-10-27T03:55:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQxMzM4MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1889#discussion_r512413381", "bodyText": "From what I understand, we essentially resync gRPC with OTel context any time current is called. And since we naturally can't have implicit context propagation without calling current anyways this covers all use cases. Does that sound right?", "author": "anuraaga", "createdAt": "2020-10-27T04:43:40Z", "path": "context/src/otelInGrpcTest/java/io/opentelemetry/context/GrpcContextStorageProvider.java", "diffHunk": "@@ -27,15 +26,58 @@ public Scope attach(Context toAttach) {\n         return Scope.noop();\n       }\n \n-      io.grpc.Context newGrpcContext = grpcContext.withValue(OTEL_CONTEXT, toAttach);\n-      io.grpc.Context toRestore = newGrpcContext.attach();\n+      io.grpc.Context newGrpcContext;\n+      if (toAttach instanceof GrpcContextWrapper) {\n+        // This was already constructed with an embedded grpc Context.\n+        newGrpcContext = ((GrpcContextWrapper) toAttach).toGrpcContext();\n+      } else {\n+        newGrpcContext = grpcContext.withValue(OTEL_CONTEXT, toAttach);\n+      }\n \n+      io.grpc.Context toRestore = newGrpcContext.attach();\n       return () -> newGrpcContext.detach(toRestore);\n     }\n \n     @Override\n     public Context current() {\n-      return OTEL_CONTEXT.get();\n+      // We return an object that embeds both the\n+      io.grpc.Context grpcContext = io.grpc.Context.current();", "originalCommit": "6ad3f73d896123c1c724c7f9634d9285259746b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQyMjc4Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1889#discussion_r512422786", "bodyText": "Yes. This is similar to otelAsGRPC but instead of getting values from gRPC context using the wrapped keys, you first get our context from there, then use the key to get the value from our context.\nWe can simplify the code to always call into the gRPC via the extra call I mentioned but that is a bit more inefficient.", "author": "bogdandrutu", "createdAt": "2020-10-27T05:19:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQxMzM4MQ=="}], "type": "inlineReview", "revised_code": null}]}