{"pr_number": 1514, "pr_title": "Migrate most remaining tests to JUnit5.", "pr_createdAt": "2020-08-06T06:59:39Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1514", "timeline": [{"oid": "739dfca04a5185efe21043d5e6cc404c62e399a2", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/739dfca04a5185efe21043d5e6cc404c62e399a2", "message": "Migrate most remaining tests to JUnit5.", "committedDate": "2020-08-06T06:58:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE4NzQ0MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1514#discussion_r466187440", "bodyText": "Hopefully, this will be less flaky \ud83d\ude04", "author": "thisthat", "createdAt": "2020-08-06T07:01:45Z", "path": "exporters/jaeger/src/test/java/io/opentelemetry/exporters/jaeger/JaegerGrpcSpanExporterTest.java", "diffHunk": "@@ -44,39 +45,44 @@\n import java.util.HashMap;\n import java.util.Map;\n import java.util.concurrent.TimeUnit;\n-import org.junit.Rule;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Test;\n import org.mockito.ArgumentCaptor;\n import org.mockito.ArgumentMatchers;\n import org.mockito.Mockito;\n \n-/** Unit tests for {@link JaegerGrpcSpanExporter}. */\n-public class JaegerGrpcSpanExporterTest {\n+class JaegerGrpcSpanExporterTest {\n   private static final String TRACE_ID = \"00000000000000000000000000abc123\";\n   private static final String SPAN_ID = \"0000000000def456\";\n \n-  @Rule public final GrpcCleanupRule grpcCleanup = new GrpcCleanupRule();\n+  private final Closer closer = Closer.create();", "originalCommit": "739dfca04a5185efe21043d5e6cc404c62e399a2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "e2e14efb62b1defbd8f3f7907e2b1b0f00a02433", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e2e14efb62b1defbd8f3f7907e2b1b0f00a02433", "message": "Remove assume since we use EnabledIfSystemProperty instead", "committedDate": "2020-08-06T07:16:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE5NjY0OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1514#discussion_r466196649", "bodyText": "These should be changed to use assertThat().isInstanceOf, the error message we would get from assertTrue would be very unhelpful.", "author": "Oberon00", "createdAt": "2020-08-06T07:20:58Z", "path": "sdk_extensions/jaeger_remote_sampler/src/test/java/io/opentelemetry/sdk/extensions/trace/jaeger/sampler/JaegerRemoteSamplerTest.java", "diffHunk": "@@ -106,20 +112,20 @@ public void connectionWorks() {\n \n     // verify\n     verify(service).getSamplingStrategy(requestCaptor.capture(), ArgumentMatchers.any());\n-    Assert.assertEquals(SERVICE_NAME, requestCaptor.getValue().getServiceName());\n-    Assert.assertTrue(sampler.getSampler() instanceof RateLimitingSampler);\n-    Assert.assertEquals(\n+    Assertions.assertEquals(SERVICE_NAME, requestCaptor.getValue().getServiceName());\n+    Assertions.assertTrue(sampler.getSampler() instanceof RateLimitingSampler);", "originalCommit": "e2e14efb62b1defbd8f3f7907e2b1b0f00a02433", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIwMDY4Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1514#discussion_r466200683", "bodyText": "Yeah - there are still quite a few places that use legacy junit assertions. Eventually want to migrate those too - but I don't mind doing partial migration when pointed out :)", "author": "anuraaga", "createdAt": "2020-08-06T07:28:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE5NjY0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "9a594ad5058643aec836acfe58a89df3b9ae8aab", "chunk": "diff --git a/sdk_extensions/jaeger_remote_sampler/src/test/java/io/opentelemetry/sdk/extensions/trace/jaeger/sampler/JaegerRemoteSamplerTest.java b/sdk_extensions/jaeger_remote_sampler/src/test/java/io/opentelemetry/sdk/extensions/trace/jaeger/sampler/JaegerRemoteSamplerTest.java\nindex 88c605ff0..1a03054bc 100644\n--- a/sdk_extensions/jaeger_remote_sampler/src/test/java/io/opentelemetry/sdk/extensions/trace/jaeger/sampler/JaegerRemoteSamplerTest.java\n+++ b/sdk_extensions/jaeger_remote_sampler/src/test/java/io/opentelemetry/sdk/extensions/trace/jaeger/sampler/JaegerRemoteSamplerTest.java\n\n@@ -106,16 +106,16 @@ class JaegerRemoteSamplerTest {\n             .setServiceName(SERVICE_NAME)\n             .build();\n \n-    Awaitility.await()\n+    await()\n         .atMost(10, TimeUnit.SECONDS)\n         .until(samplerIsType(sampler, RateLimitingSampler.class));\n \n     // verify\n     verify(service).getSamplingStrategy(requestCaptor.capture(), ArgumentMatchers.any());\n-    Assertions.assertEquals(SERVICE_NAME, requestCaptor.getValue().getServiceName());\n-    Assertions.assertTrue(sampler.getSampler() instanceof RateLimitingSampler);\n-    Assertions.assertEquals(\n-        RATE, ((RateLimitingSampler) sampler.getSampler()).getMaxTracesPerSecond(), 0);\n+    assertThat(requestCaptor.getValue().getServiceName()).isEqualTo(SERVICE_NAME);\n+    assertThat(sampler.getSampler()).isInstanceOf(RateLimitingSampler.class);\n+    assertThat(((RateLimitingSampler) sampler.getSampler()).getMaxTracesPerSecond())\n+        .isEqualTo(RATE);\n   }\n \n   @Test\n"}}, {"oid": "9a594ad5058643aec836acfe58a89df3b9ae8aab", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9a594ad5058643aec836acfe58a89df3b9ae8aab", "message": "Some assertj", "committedDate": "2020-08-06T07:28:23Z", "type": "commit"}, {"oid": "cc02cfd24c047029aa2c249e16b9241466aaa67d", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/cc02cfd24c047029aa2c249e16b9241466aaa67d", "message": "Format", "committedDate": "2020-08-06T07:36:00Z", "type": "commit"}]}