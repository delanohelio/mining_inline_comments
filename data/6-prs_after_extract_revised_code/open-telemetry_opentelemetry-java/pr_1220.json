{"pr_number": 1220, "pr_title": "Add API for UpDownSumObservers", "pr_createdAt": "2020-05-15T01:01:42Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1220", "timeline": [{"oid": "8568f0f87c1584047a8bc42791a7f57280c11de4", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8568f0f87c1584047a8bc42791a7f57280c11de4", "message": "Add API for UpDownSumObservers\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-05-15T02:10:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcyNTg3Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1220#discussion_r425725877", "bodyText": "It does not sound monotonic to me since the cpu usage can float up and down. Maybe:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *           .doubleSumObserverBuilder(\"cpu_usage\")\n          \n          \n            \n             *           .doubleSumObserverBuilder(\"cpu_usage_time\")\n          \n      \n    \n    \n  \n\nOr we could provide a memory example, e.g. \"bytes written\"", "author": "thisthat", "createdAt": "2020-05-15T10:59:39Z", "path": "api/src/main/java/io/opentelemetry/metrics/DoubleSumObserver.java", "diffHunk": "@@ -16,33 +16,42 @@\n \n package io.opentelemetry.metrics;\n \n-import io.opentelemetry.metrics.DoubleSumObserver.ResultDoubleObserver;\n+import io.opentelemetry.metrics.DoubleSumObserver.ResultDoubleSumObserver;\n import java.util.Map;\n import javax.annotation.concurrent.ThreadSafe;\n \n /**\n- * Observer to report pre-aggregated metrics with double value.\n+ * {@code SumObserver} is the asynchronous instrument corresponding to Counter, used to capture a\n+ * monotonic sum with Observe(sum).\n+ *\n+ * <p>\"Sum\" appears in the name to remind that it is used to capture sums directly. Use a\n+ * SumObserver to capture any value that starts at zero and rises throughout the process lifetime\n+ * and never falls.\n+ *\n+ * <p>A {@code SumObserver} is a good choice in situations where a measurement is expensive to\n+ * compute, such that it would be wasteful to compute on every request.\n  *\n  * <p>Example:\n  *\n  * <pre>{@code\n  * class YourClass {\n  *\n  *   private static final Meter meter = OpenTelemetry.getMeterRegistry().get(\"my_library_name\");\n- *   private static final DoubleSumObserver observer =\n+ *   private static final DoubleSumObserver cpuObserver =\n  *       meter.\n- *           .doubleSumObserverBuilder(\"doWork_latency\")\n- *           .setDescription(\"gRPC Latency\")\n+ *           .doubleSumObserverBuilder(\"cpu_usage\")", "originalCommit": "8568f0f87c1584047a8bc42791a7f57280c11de4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg0NDY2Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1220#discussion_r425844666", "bodyText": "CPU usage as provided by proc or other sources is a classic monotonic always increasing sum, it is the total time in jiffrey (probably I misspelled this) since the beginning of the process", "author": "bogdandrutu", "createdAt": "2020-05-15T14:35:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcyNTg3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "d2ddb1d0385efd4b4a93788cf80999e16add3597", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/metrics/DoubleSumObserver.java b/api/src/main/java/io/opentelemetry/metrics/DoubleSumObserver.java\nindex 3b778b7e7..51b90ba79 100644\n--- a/api/src/main/java/io/opentelemetry/metrics/DoubleSumObserver.java\n+++ b/api/src/main/java/io/opentelemetry/metrics/DoubleSumObserver.java\n\n@@ -39,7 +39,7 @@ import javax.annotation.concurrent.ThreadSafe;\n  *   private static final Meter meter = OpenTelemetry.getMeterRegistry().get(\"my_library_name\");\n  *   private static final DoubleSumObserver cpuObserver =\n  *       meter.\n- *           .doubleSumObserverBuilder(\"cpu_usage\")\n+ *           .doubleSumObserverBuilder(\"cpu_time\")\n  *           .setDescription(\"System CPU usage\")\n  *           .setUnit(\"ms\")\n  *           .build();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcyOTE2NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1220#discussion_r425729165", "bodyText": "I think we can remove this TODO", "author": "thisthat", "createdAt": "2020-05-15T11:06:49Z", "path": "contrib/runtime_metrics/src/main/java/io/opentelemetry/contrib/metrics/runtime/MemoryPools.java", "diffHunk": "@@ -69,12 +70,11 @@ public MemoryPools() {\n   /** Export only the \"area\" metric. */\n   public void exportMemoryAreaMetric() {\n     // TODO: Set this as non-monotonic.", "originalCommit": "8568f0f87c1584047a8bc42791a7f57280c11de4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg1MTI1MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1220#discussion_r425851251", "bodyText": "Done.", "author": "bogdandrutu", "createdAt": "2020-05-15T14:45:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcyOTE2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "d2ddb1d0385efd4b4a93788cf80999e16add3597", "chunk": "diff --git a/contrib/runtime_metrics/src/main/java/io/opentelemetry/contrib/metrics/runtime/MemoryPools.java b/contrib/runtime_metrics/src/main/java/io/opentelemetry/contrib/metrics/runtime/MemoryPools.java\nindex 42cd83152..cc12d2107 100644\n--- a/contrib/runtime_metrics/src/main/java/io/opentelemetry/contrib/metrics/runtime/MemoryPools.java\n+++ b/contrib/runtime_metrics/src/main/java/io/opentelemetry/contrib/metrics/runtime/MemoryPools.java\n\n@@ -69,7 +69,6 @@ public final class MemoryPools {\n \n   /** Export only the \"area\" metric. */\n   public void exportMemoryAreaMetric() {\n-    // TODO: Set this as non-monotonic.\n     final LongUpDownSumObserver areaMetric =\n         this.meter\n             .longUpDownSumObserverBuilder(\"area\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcyOTUxNw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1220#discussion_r425729517", "bodyText": "also this", "author": "thisthat", "createdAt": "2020-05-15T11:07:37Z", "path": "contrib/runtime_metrics/src/main/java/io/opentelemetry/contrib/metrics/runtime/MemoryPools.java", "diffHunk": "@@ -103,12 +103,11 @@ public void update(ResultLongObserver resultLongObserver) {\n   /** Export only the \"pool\" metric. */\n   public void exportMemoryPoolMetric() {\n     // TODO: Set this as non-monotonic.", "originalCommit": "8568f0f87c1584047a8bc42791a7f57280c11de4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg1MTEyMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1220#discussion_r425851121", "bodyText": "Done.", "author": "bogdandrutu", "createdAt": "2020-05-15T14:45:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcyOTUxNw=="}], "type": "inlineReview", "revised_code": {"commit": "d2ddb1d0385efd4b4a93788cf80999e16add3597", "chunk": "diff --git a/contrib/runtime_metrics/src/main/java/io/opentelemetry/contrib/metrics/runtime/MemoryPools.java b/contrib/runtime_metrics/src/main/java/io/opentelemetry/contrib/metrics/runtime/MemoryPools.java\nindex 42cd83152..cc12d2107 100644\n--- a/contrib/runtime_metrics/src/main/java/io/opentelemetry/contrib/metrics/runtime/MemoryPools.java\n+++ b/contrib/runtime_metrics/src/main/java/io/opentelemetry/contrib/metrics/runtime/MemoryPools.java\n\n@@ -102,7 +101,6 @@ public final class MemoryPools {\n \n   /** Export only the \"pool\" metric. */\n   public void exportMemoryPoolMetric() {\n-    // TODO: Set this as non-monotonic.\n     final LongUpDownSumObserver poolMetric =\n         this.meter\n             .longUpDownSumObserverBuilder(\"pool\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTczNDM5Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1220#discussion_r425734396", "bodyText": "Also this example is not monotonic", "author": "thisthat", "createdAt": "2020-05-15T11:18:22Z", "path": "api/src/main/java/io/opentelemetry/metrics/LongSumObserver.java", "diffHunk": "@@ -16,33 +16,42 @@\n \n package io.opentelemetry.metrics;\n \n-import io.opentelemetry.metrics.LongSumObserver.ResultLongObserver;\n+import io.opentelemetry.metrics.LongSumObserver.ResultLongSumObserver;\n import java.util.Map;\n import javax.annotation.concurrent.ThreadSafe;\n \n /**\n- * Observer to report pre-aggregated metrics with double value.\n+ * {@code SumObserver} is the asynchronous instrument corresponding to Counter, used to capture a\n+ * monotonic sum with Observe(sum).\n+ *\n+ * <p>\"Sum\" appears in the name to remind that it is used to capture sums directly. Use a\n+ * SumObserver to capture any value that starts at zero and rises throughout the process lifetime\n+ * and never falls.\n+ *\n+ * <p>A {@code SumObserver} is a good choice in situations where a measurement is expensive to\n+ * compute, such that it would be wasteful to compute on every request.\n  *\n  * <p>Example:\n  *\n  * <pre>{@code\n  * class YourClass {\n  *\n  *   private static final Meter meter = OpenTelemetry.getMeterRegistry().get(\"my_library_name\");\n- *   private static final LongSumObserver observer =\n+ *   private static final LongSumObserver cpuObserver =\n  *       meter.\n- *           .longSumObserverBuilder(\"doWork_latency\")\n- *           .setDescription(\"gRPC Latency\")\n+ *           .longSumObserverBuilder(\"cpu_usage\")", "originalCommit": "8568f0f87c1584047a8bc42791a7f57280c11de4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg0MzEzNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1220#discussion_r425843135", "bodyText": "It is because it is the total usage time since beginning of the process.", "author": "bogdandrutu", "createdAt": "2020-05-15T14:32:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTczNDM5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "d2ddb1d0385efd4b4a93788cf80999e16add3597", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/metrics/LongSumObserver.java b/api/src/main/java/io/opentelemetry/metrics/LongSumObserver.java\nindex 792523f94..4a7fa34c3 100644\n--- a/api/src/main/java/io/opentelemetry/metrics/LongSumObserver.java\n+++ b/api/src/main/java/io/opentelemetry/metrics/LongSumObserver.java\n\n@@ -39,7 +39,7 @@ import javax.annotation.concurrent.ThreadSafe;\n  *   private static final Meter meter = OpenTelemetry.getMeterRegistry().get(\"my_library_name\");\n  *   private static final LongSumObserver cpuObserver =\n  *       meter.\n- *           .longSumObserverBuilder(\"cpu_usage\")\n+ *           .longSumObserverBuilder(\"cpu_time\")\n  *           .setDescription(\"System CPU usage\")\n  *           .setUnit(\"ms\")\n  *           .build();\n"}}, {"oid": "d2ddb1d0385efd4b4a93788cf80999e16add3597", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d2ddb1d0385efd4b4a93788cf80999e16add3597", "message": "Fix minor nits\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-05-15T16:32:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk1MzkyNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1220#discussion_r425953926", "bodyText": "Something to think about: this interface is exactly the same as the one in the up-down version. We could think about sharing the interface, calling it something like DoubleSumResult and reducing a wee bit of duplicated code.", "author": "jkwatson", "createdAt": "2020-05-15T17:43:49Z", "path": "api/src/main/java/io/opentelemetry/metrics/DoubleSumObserver.java", "diffHunk": "@@ -67,15 +76,12 @@\n     @Override\n     Builder setConstantLabels(Map<String, String> constantLabels);\n \n-    @Override\n-    Builder setMonotonic(boolean monotonic);\n-\n     @Override\n     DoubleSumObserver build();\n   }\n \n   /** The result for the {@link AsynchronousInstrument.Callback}. */\n-  interface ResultDoubleObserver {\n+  interface ResultDoubleSumObserver {", "originalCommit": "d2ddb1d0385efd4b4a93788cf80999e16add3597", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk1NDk4MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1220#discussion_r425954981", "bodyText": "#1230", "author": "bogdandrutu", "createdAt": "2020-05-15T17:45:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk1MzkyNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk1NDM3MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1220#discussion_r425954371", "bodyText": "copy-paste miss here. Should be the DoubleUpDown...", "author": "jkwatson", "createdAt": "2020-05-15T17:44:40Z", "path": "api/src/main/java/io/opentelemetry/metrics/DoubleUpDownSumObserver.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.metrics;\n+\n+import io.opentelemetry.metrics.DoubleUpDownSumObserver.ResultDoubleUpDownSumObserver;\n+import java.util.Map;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * UpDownSumObserver is the asynchronous instrument corresponding to UpDownCounter, used to capture\n+ * a non-monotonic count with Observe(sum).\n+ *\n+ * <p>\"Sum\" appears in the name to remind that it is used to capture sums directly. Use a\n+ * UpDownSumObserver to capture any value that starts at zero and rises or falls throughout the\n+ * process lifetime.\n+ *\n+ * <p>A {@code UpDownSumObserver} is a good choice in situations where a measurement is expensive to\n+ * compute, such that it would be wasteful to compute on every request.\n+ *\n+ * <p>Example:\n+ *\n+ * <pre>{@code\n+ * class YourClass {\n+ *\n+ *   private static final Meter meter = OpenTelemetry.getMeterRegistry().get(\"my_library_name\");\n+ *   private static final DoubleUpDownSumObserver memoryObserver =\n+ *       meter.\n+ *           .doubleUpDownSumObserverBuilder(\"memory_usage\")\n+ *           .setDescription(\"System memory usage\")\n+ *           .setUnit(\"by\")\n+ *           .build();\n+ *\n+ *   void init() {\n+ *     memoryObserver.setCallback(\n+ *         new LongSumObserver.Callback<LongObserver.ResultLongObserver>() {", "originalCommit": "d2ddb1d0385efd4b4a93788cf80999e16add3597", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk3ODEyNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1220#discussion_r425978124", "bodyText": "Done.", "author": "bogdandrutu", "createdAt": "2020-05-15T18:32:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk1NDM3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "5564faf3778732c207d09e317a8864048d0361a9", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/metrics/DoubleUpDownSumObserver.java b/api/src/main/java/io/opentelemetry/metrics/DoubleUpDownSumObserver.java\nindex 95ce06280..d139827ba 100644\n--- a/api/src/main/java/io/opentelemetry/metrics/DoubleUpDownSumObserver.java\n+++ b/api/src/main/java/io/opentelemetry/metrics/DoubleUpDownSumObserver.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2019, OpenTelemetry Authors\n+ * Copyright 2020, OpenTelemetry Authors\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk1NTU2MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1220#discussion_r425955560", "bodyText": "should be LongUpDown..", "author": "jkwatson", "createdAt": "2020-05-15T17:46:58Z", "path": "api/src/main/java/io/opentelemetry/metrics/LongUpDownSumObserver.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.metrics;\n+\n+import io.opentelemetry.metrics.LongUpDownSumObserver.ResultLongUpDownSumObserver;\n+import java.util.Map;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * UpDownSumObserver is the asynchronous instrument corresponding to UpDownCounter, used to capture\n+ * a non-monotonic count with Observe(sum).\n+ *\n+ * <p>\"Sum\" appears in the name to remind that it is used to capture sums directly. Use a\n+ * UpDownSumObserver to capture any value that starts at zero and rises or falls throughout the\n+ * process lifetime.\n+ *\n+ * <p>A {@code UpDownSumObserver} is a good choice in situations where a measurement is expensive to\n+ * compute, such that it would be wasteful to compute on every request.\n+ *\n+ * <p>Example:\n+ *\n+ * <pre>{@code\n+ * class YourClass {\n+ *\n+ *   private static final Meter meter = OpenTelemetry.getMeterRegistry().get(\"my_library_name\");\n+ *   private static final LongUpDownSumObserver memoryObserver =\n+ *       meter.\n+ *           .longUpDownSumObserverBuilder(\"memory_usage\")\n+ *           .setDescription(\"System memory usage\")\n+ *           .setUnit(\"by\")\n+ *           .build();\n+ *\n+ *   void init() {\n+ *     memoryObserver.setCallback(\n+ *         new LongSumObserver.Callback<LongObserver.ResultLongObserver>() {", "originalCommit": "d2ddb1d0385efd4b4a93788cf80999e16add3597", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk3ODE4MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1220#discussion_r425978180", "bodyText": "Done.", "author": "bogdandrutu", "createdAt": "2020-05-15T18:32:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk1NTU2MA=="}], "type": "inlineReview", "revised_code": {"commit": "5564faf3778732c207d09e317a8864048d0361a9", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/metrics/LongUpDownSumObserver.java b/api/src/main/java/io/opentelemetry/metrics/LongUpDownSumObserver.java\nindex 17edf82a7..59532b2b2 100644\n--- a/api/src/main/java/io/opentelemetry/metrics/LongUpDownSumObserver.java\n+++ b/api/src/main/java/io/opentelemetry/metrics/LongUpDownSumObserver.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2019, OpenTelemetry Authors\n+ * Copyright 2020, OpenTelemetry Authors\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk1NjEwNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1220#discussion_r425956106", "bodyText": "I don't think we need these 3 methods declared here, as they just restate the parent interface.", "author": "jkwatson", "createdAt": "2020-05-15T17:48:02Z", "path": "api/src/main/java/io/opentelemetry/metrics/LongUpDownSumObserver.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.metrics;\n+\n+import io.opentelemetry.metrics.LongUpDownSumObserver.ResultLongUpDownSumObserver;\n+import java.util.Map;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * UpDownSumObserver is the asynchronous instrument corresponding to UpDownCounter, used to capture\n+ * a non-monotonic count with Observe(sum).\n+ *\n+ * <p>\"Sum\" appears in the name to remind that it is used to capture sums directly. Use a\n+ * UpDownSumObserver to capture any value that starts at zero and rises or falls throughout the\n+ * process lifetime.\n+ *\n+ * <p>A {@code UpDownSumObserver} is a good choice in situations where a measurement is expensive to\n+ * compute, such that it would be wasteful to compute on every request.\n+ *\n+ * <p>Example:\n+ *\n+ * <pre>{@code\n+ * class YourClass {\n+ *\n+ *   private static final Meter meter = OpenTelemetry.getMeterRegistry().get(\"my_library_name\");\n+ *   private static final LongUpDownSumObserver memoryObserver =\n+ *       meter.\n+ *           .longUpDownSumObserverBuilder(\"memory_usage\")\n+ *           .setDescription(\"System memory usage\")\n+ *           .setUnit(\"by\")\n+ *           .build();\n+ *\n+ *   void init() {\n+ *     memoryObserver.setCallback(\n+ *         new LongSumObserver.Callback<LongObserver.ResultLongObserver>() {\n+ *          {@literal @}Override\n+ *           public void update(ResultLongObserver result) {\n+ *             // Get system memory usage\n+ *             result.observe(memoryUsed, \"state\", \"used\");\n+ *             result.observe(memoryFree, \"state\", \"free\");\n+ *           }\n+ *         });\n+ *   }\n+ * }\n+ * }</pre>\n+ *\n+ * @since 0.1.0\n+ */\n+@ThreadSafe\n+public interface LongUpDownSumObserver extends AsynchronousInstrument<ResultLongUpDownSumObserver> {\n+  @Override\n+  void setCallback(Callback<ResultLongUpDownSumObserver> metricUpdater);\n+\n+  /** Builder class for {@link LongUpDownSumObserver}. */\n+  interface Builder extends AsynchronousInstrument.Builder {\n+    @Override\n+    Builder setDescription(String description);\n+\n+    @Override\n+    Builder setUnit(String unit);\n+\n+    @Override\n+    Builder setConstantLabels(Map<String, String> constantLabels);", "originalCommit": "d2ddb1d0385efd4b4a93788cf80999e16add3597", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk1NzMwOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1220#discussion_r425957309", "bodyText": "nm. we need them to return the subinterface", "author": "jkwatson", "createdAt": "2020-05-15T17:50:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk1NjEwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk2ODA4OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1220#discussion_r425968088", "bodyText": "Yes.", "author": "bogdandrutu", "createdAt": "2020-05-15T18:12:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk1NjEwNg=="}], "type": "inlineReview", "revised_code": {"commit": "5564faf3778732c207d09e317a8864048d0361a9", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/metrics/LongUpDownSumObserver.java b/api/src/main/java/io/opentelemetry/metrics/LongUpDownSumObserver.java\nindex 17edf82a7..59532b2b2 100644\n--- a/api/src/main/java/io/opentelemetry/metrics/LongUpDownSumObserver.java\n+++ b/api/src/main/java/io/opentelemetry/metrics/LongUpDownSumObserver.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2019, OpenTelemetry Authors\n+ * Copyright 2020, OpenTelemetry Authors\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk1NjUyMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1220#discussion_r425956521", "bodyText": "These three methods restate the parent interface methods. I think we don't need them here, as well.", "author": "jkwatson", "createdAt": "2020-05-15T17:48:44Z", "path": "api/src/main/java/io/opentelemetry/metrics/DoubleUpDownSumObserver.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.metrics;\n+\n+import io.opentelemetry.metrics.DoubleUpDownSumObserver.ResultDoubleUpDownSumObserver;\n+import java.util.Map;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * UpDownSumObserver is the asynchronous instrument corresponding to UpDownCounter, used to capture\n+ * a non-monotonic count with Observe(sum).\n+ *\n+ * <p>\"Sum\" appears in the name to remind that it is used to capture sums directly. Use a\n+ * UpDownSumObserver to capture any value that starts at zero and rises or falls throughout the\n+ * process lifetime.\n+ *\n+ * <p>A {@code UpDownSumObserver} is a good choice in situations where a measurement is expensive to\n+ * compute, such that it would be wasteful to compute on every request.\n+ *\n+ * <p>Example:\n+ *\n+ * <pre>{@code\n+ * class YourClass {\n+ *\n+ *   private static final Meter meter = OpenTelemetry.getMeterRegistry().get(\"my_library_name\");\n+ *   private static final DoubleUpDownSumObserver memoryObserver =\n+ *       meter.\n+ *           .doubleUpDownSumObserverBuilder(\"memory_usage\")\n+ *           .setDescription(\"System memory usage\")\n+ *           .setUnit(\"by\")\n+ *           .build();\n+ *\n+ *   void init() {\n+ *     memoryObserver.setCallback(\n+ *         new LongSumObserver.Callback<LongObserver.ResultLongObserver>() {\n+ *          {@literal @}Override\n+ *           public void update(ResultLongObserver result) {\n+ *             // Get system memory usage\n+ *             result.observe(memoryUsed, \"state\", \"used\");\n+ *             result.observe(memoryFree, \"state\", \"free\");\n+ *           }\n+ *         });\n+ *   }\n+ * }\n+ * }</pre>\n+ *\n+ * @since 0.1.0\n+ */\n+@ThreadSafe\n+public interface DoubleUpDownSumObserver\n+    extends AsynchronousInstrument<ResultDoubleUpDownSumObserver> {\n+  @Override\n+  void setCallback(Callback<ResultDoubleUpDownSumObserver> metricUpdater);\n+\n+  /** Builder class for {@link DoubleUpDownSumObserver}. */\n+  interface Builder extends AsynchronousInstrument.Builder {\n+    @Override\n+    Builder setDescription(String description);\n+\n+    @Override\n+    Builder setUnit(String unit);\n+\n+    @Override\n+    Builder setConstantLabels(Map<String, String> constantLabels);", "originalCommit": "d2ddb1d0385efd4b4a93788cf80999e16add3597", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk1Njg0Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1220#discussion_r425956843", "bodyText": "oh hmm. we need them to return the subclass, don't we. never mind, I think we do need them.", "author": "jkwatson", "createdAt": "2020-05-15T17:49:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk1NjUyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "5564faf3778732c207d09e317a8864048d0361a9", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/metrics/DoubleUpDownSumObserver.java b/api/src/main/java/io/opentelemetry/metrics/DoubleUpDownSumObserver.java\nindex 95ce06280..d139827ba 100644\n--- a/api/src/main/java/io/opentelemetry/metrics/DoubleUpDownSumObserver.java\n+++ b/api/src/main/java/io/opentelemetry/metrics/DoubleUpDownSumObserver.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2019, OpenTelemetry Authors\n+ * Copyright 2020, OpenTelemetry Authors\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk2MDE4MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1220#discussion_r425960181", "bodyText": "2020", "author": "jkwatson", "createdAt": "2020-05-15T17:55:58Z", "path": "api/src/test/java/io/opentelemetry/metrics/DoubleUpDownSumObserverTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors", "originalCommit": "d2ddb1d0385efd4b4a93788cf80999e16add3597", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk3ODgwMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1220#discussion_r425978803", "bodyText": "Done.", "author": "bogdandrutu", "createdAt": "2020-05-15T18:33:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk2MDE4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "5564faf3778732c207d09e317a8864048d0361a9", "chunk": "diff --git a/api/src/test/java/io/opentelemetry/metrics/DoubleUpDownSumObserverTest.java b/api/src/test/java/io/opentelemetry/metrics/DoubleUpDownSumObserverTest.java\nindex f1047006e..273654b52 100644\n--- a/api/src/test/java/io/opentelemetry/metrics/DoubleUpDownSumObserverTest.java\n+++ b/api/src/test/java/io/opentelemetry/metrics/DoubleUpDownSumObserverTest.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2019, OpenTelemetry Authors\n+ * Copyright 2020, OpenTelemetry Authors\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"oid": "cd5bedb502eaaef511d823eb6332faa54f782421", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/cd5bedb502eaaef511d823eb6332faa54f782421", "message": "Add API for UpDownSumObservers\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-05-15T18:30:15Z", "type": "commit"}, {"oid": "a7313fa1c25c690a1c1ae74dcb2c0f62f3f6a6ed", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a7313fa1c25c690a1c1ae74dcb2c0f62f3f6a6ed", "message": "Fix minor nits\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-05-15T18:30:15Z", "type": "commit"}, {"oid": "5564faf3778732c207d09e317a8864048d0361a9", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5564faf3778732c207d09e317a8864048d0361a9", "message": "Fix more nits\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-05-15T18:33:02Z", "type": "commit"}, {"oid": "5564faf3778732c207d09e317a8864048d0361a9", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5564faf3778732c207d09e317a8864048d0361a9", "message": "Fix more nits\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-05-15T18:33:02Z", "type": "forcePushed"}]}