{"pr_number": 1791, "pr_title": "Remove DefaultSpan from public API.", "pr_createdAt": "2020-10-13T08:05:25Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1791", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc3OTUyMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1791#discussion_r503779521", "bodyText": "@Oberon00 Based on the conversation in open-telemetry/opentelemetry-specification#1086 this should be something like wrapForPropagation, we're wrapping this SpanContext into a PropagatedSpan. This seems like odd naming to me though, as there is nothing about propagation happening here really, doubly-so because propagation is still more commonly used for remote propagation than in-process propagation I think. That's not great here since we don't do remote propagation of the invalid span.", "author": "anuraaga", "createdAt": "2020-10-13T08:52:19Z", "path": "api/src/main/java/io/opentelemetry/trace/Span.java", "diffHunk": "@@ -23,6 +23,26 @@\n @ThreadSafe\n public interface Span {\n \n+  /**\n+   * Returns an invalid {@link Span}. An invalid {@link Span} is used when tracing is disabled,\n+   * usually because there is no OpenTelemetry SDK installed.\n+   */\n+  static Span getInvalid() {\n+    return DefaultSpan.INVALID;\n+  }\n+\n+  /**\n+   * Returns a {@link Span} that only wraps the provided {@link SpanContext} but has no\n+   * functionality. It will not be exported and all operations are no-op, but it can be used to\n+   * propagate the {@link SpanContext} downstream.\n+   */\n+  static Span wrapWithNoop(SpanContext spanContext) {", "originalCommit": "408fafeff0ce8f624189e0fdfac386eabdbe51f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc5NDA5Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1791#discussion_r503794096", "bodyText": "as there is nothing about propagation happening here really\n\nIf one considers making a span a local parent \"propagation\" (which I think one should), then it makes sense. Because what other uses would this returned object have?", "author": "Oberon00", "createdAt": "2020-10-13T09:13:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc3OTUyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgwNTI5Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1791#discussion_r503805293", "bodyText": "Because what other uses would this returned object have?\n\nI dunno maybe someone will have something creative :) While it's indirect usage of this API, one case where it will be used is when extracting the SpanContext from a link - the result of this method will be taken out of the Context, the link will be made, and the result will be dropped without ever being propagated. So this is where the disconnect with the naming comes from - since it's completely up to the caller on whether it's propagated or not, so I find it pretty confusing. There's the other point where there's no such thing as a non-propagated span - all spans can be propagated, so why do we have the propagated span called out in particular? I'm sure someone is going to call Span.getPropagated(tracer.startSpan().getContext()) assuming that's how you're supposed to propagate your span ;) Span.getNoop(tracer.startSpan().getContext()), Span.getNonRecording(...) seems more obviously wrong because it better reflects what's actually happening.", "author": "anuraaga", "createdAt": "2020-10-13T09:30:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc3OTUyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExMzgxNw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1791#discussion_r504113817", "bodyText": "I don't love this name, but I 100% agree with the sentiment. Making it super clear what the capabilities (and lack thereof) will be of the returned Span seems like a very important signal to the user.", "author": "jkwatson", "createdAt": "2020-10-13T16:55:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc3OTUyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "dae27aa65adc3c79851a79a3f0a98037699f45c5", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/trace/Span.java b/api/src/main/java/io/opentelemetry/trace/Span.java\nindex a2750d680..e1f5d265b 100644\n--- a/api/src/main/java/io/opentelemetry/trace/Span.java\n+++ b/api/src/main/java/io/opentelemetry/trace/Span.java\n\n@@ -28,19 +28,19 @@ public interface Span {\n    * usually because there is no OpenTelemetry SDK installed.\n    */\n   static Span getInvalid() {\n-    return DefaultSpan.INVALID;\n+    return PropagatedSpan.INVALID;\n   }\n \n   /**\n-   * Returns a {@link Span} that only wraps the provided {@link SpanContext} but has no\n-   * functionality. It will not be exported and all operations are no-op, but it can be used to\n-   * propagate the {@link SpanContext} downstream.\n+   * Returns a non-recording {@link Span} that holds the provided {@link SpanContext} but has no\n+   * functionality. It will not be exported and all tracing operations are no-op, but it can be used\n+   * to propagate a valid {@link SpanContext} downstream.\n    */\n-  static Span wrapWithNoop(SpanContext spanContext) {\n+  static Span getPropagated(SpanContext spanContext) {\n     if (spanContext == null || !spanContext.isValid()) {\n       return getInvalid();\n     }\n-    return new DefaultSpan(spanContext);\n+    return new PropagatedSpan(spanContext);\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExNTcwNw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1791#discussion_r504115707", "bodyText": "This change seems a bit orthogonal to the PR. Does it need to be included?", "author": "jkwatson", "createdAt": "2020-10-13T16:58:58Z", "path": "api/src/main/java/io/opentelemetry/trace/propagation/HttpTraceContext.java", "diffHunk": "@@ -144,44 +144,45 @@ public static HttpTraceContext getInstance() {\n     Objects.requireNonNull(carrier, \"carrier\");\n     Objects.requireNonNull(getter, \"getter\");\n \n-    SpanContext spanContext = extractImpl(carrier, getter);\n-    if (!spanContext.isValid()) {\n+    Span span = extractImpl(carrier, getter);\n+    if (!span.isValid()) {\n       return context;\n     }\n \n-    return TracingContextUtils.withSpan(DefaultSpan.create(spanContext), context);\n+    return TracingContextUtils.withSpan(span, context);\n   }\n \n-  private static <C> SpanContext extractImpl(C carrier, Getter<C> getter) {\n+  private static <C> Span extractImpl(C carrier, Getter<C> getter) {", "originalCommit": "952058709c2565f9afe643598645a453a723a3ad", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dae27aa65adc3c79851a79a3f0a98037699f45c5", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/trace/propagation/HttpTraceContext.java b/api/src/main/java/io/opentelemetry/trace/propagation/HttpTraceContext.java\nindex de2564918..4a0ab174f 100644\n--- a/api/src/main/java/io/opentelemetry/trace/propagation/HttpTraceContext.java\n+++ b/api/src/main/java/io/opentelemetry/trace/propagation/HttpTraceContext.java\n\n@@ -144,45 +144,44 @@ public class HttpTraceContext implements TextMapPropagator {\n     Objects.requireNonNull(carrier, \"carrier\");\n     Objects.requireNonNull(getter, \"getter\");\n \n-    Span span = extractImpl(carrier, getter);\n-    if (!span.isValid()) {\n+    SpanContext spanContext = extractImpl(carrier, getter);\n+    if (!spanContext.isValid()) {\n       return context;\n     }\n \n-    return TracingContextUtils.withSpan(span, context);\n+    return TracingContextUtils.withSpan(Span.getPropagated(spanContext), context);\n   }\n \n-  private static <C> Span extractImpl(C carrier, Getter<C> getter) {\n+  private static <C> SpanContext extractImpl(C carrier, Getter<C> getter) {\n     String traceParent = getter.get(carrier, TRACE_PARENT);\n     if (traceParent == null) {\n-      return Span.getInvalid();\n+      return SpanContext.getInvalid();\n     }\n \n-    Span spanFromParentHeader = extractContextFromTraceParent(traceParent);\n-    if (!spanFromParentHeader.isValid()) {\n-      return spanFromParentHeader;\n+    SpanContext contextFromParentHeader = extractContextFromTraceParent(traceParent);\n+    if (!contextFromParentHeader.isValid()) {\n+      return contextFromParentHeader;\n     }\n \n     String traceStateHeader = getter.get(carrier, TRACE_STATE);\n     if (traceStateHeader == null || traceStateHeader.isEmpty()) {\n-      return spanFromParentHeader;\n+      return contextFromParentHeader;\n     }\n \n     try {\n       TraceState traceState = extractTraceState(traceStateHeader);\n-      return Span.wrapWithNoop(\n-          SpanContext.createFromRemoteParent(\n-              spanFromParentHeader.getContext().getTraceIdAsHexString(),\n-              spanFromParentHeader.getContext().getSpanIdAsHexString(),\n-              spanFromParentHeader.getContext().getTraceFlags(),\n-              traceState));\n+      return SpanContext.createFromRemoteParent(\n+          contextFromParentHeader.getTraceIdAsHexString(),\n+          contextFromParentHeader.getSpanIdAsHexString(),\n+          contextFromParentHeader.getTraceFlags(),\n+          traceState);\n     } catch (IllegalArgumentException e) {\n       logger.info(\"Unparseable tracestate header. Returning span context without state.\");\n-      return spanFromParentHeader;\n+      return contextFromParentHeader;\n     }\n   }\n \n-  private static Span extractContextFromTraceParent(String traceparent) {\n+  private static SpanContext extractContextFromTraceParent(String traceparent) {\n     // TODO(bdrutu): Do we need to verify that version is hex and that\n     // for the version the length is the expected one?\n     boolean isValid =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE0NjEwNw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1791#discussion_r504146107", "bodyText": "I'd like to separate out this changes into a follow-on PR, just to keep this one a little more tight in its scope.", "author": "jkwatson", "createdAt": "2020-10-13T17:50:25Z", "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/AwsXRayPropagator.java", "diffHunk": "@@ -123,18 +122,18 @@ public static AwsXRayPropagator getInstance() {\n     Objects.requireNonNull(carrier, \"carrier\");\n     Objects.requireNonNull(getter, \"getter\");\n \n-    SpanContext spanContext = getSpanContextFromHeader(carrier, getter);\n-    if (!spanContext.isValid()) {\n+    Span span = extractSpan(carrier, getter);", "originalCommit": "952058709c2565f9afe643598645a453a723a3ad", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dae27aa65adc3c79851a79a3f0a98037699f45c5", "chunk": "diff --git a/extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/AwsXRayPropagator.java b/extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/AwsXRayPropagator.java\nindex 6ce0e6dee..3b1b1bcac 100644\n--- a/extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/AwsXRayPropagator.java\n+++ b/extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/AwsXRayPropagator.java\n\n@@ -122,18 +122,18 @@ public class AwsXRayPropagator implements TextMapPropagator {\n     Objects.requireNonNull(carrier, \"carrier\");\n     Objects.requireNonNull(getter, \"getter\");\n \n-    Span span = extractSpan(carrier, getter);\n-    if (!span.isValid()) {\n+    SpanContext spanContext = getSpanContextFromHeader(carrier, getter);\n+    if (!spanContext.isValid()) {\n       return context;\n     }\n \n-    return TracingContextUtils.withSpan(span, context);\n+    return TracingContextUtils.withSpan(Span.getPropagated(spanContext), context);\n   }\n \n-  private static <C> Span extractSpan(C carrier, Getter<C> getter) {\n+  private static <C> SpanContext getSpanContextFromHeader(C carrier, Getter<C> getter) {\n     String traceHeader = getter.get(carrier, TRACE_HEADER_KEY);\n     if (traceHeader == null || traceHeader.isEmpty()) {\n-      return Span.getInvalid();\n+      return SpanContext.getInvalid();\n     }\n \n     String traceId = TraceId.getInvalid();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE0OTY5OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1791#discussion_r504149698", "bodyText": "ditto on reducing scope for this PR", "author": "jkwatson", "createdAt": "2020-10-13T17:56:34Z", "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/B3PropagatorExtractorMultipleHeaders.java", "diffHunk": "@@ -29,33 +28,33 @@\n       Context context, C carrier, TextMapPropagator.Getter<C> getter) {\n     Objects.requireNonNull(carrier, \"carrier\");\n     Objects.requireNonNull(getter, \"getter\");\n-    SpanContext spanContext = getSpanContextFromMultipleHeaders(carrier, getter);\n-    if (!spanContext.isValid()) {\n+    Span span = extractFromMultipleHeaders(carrier, getter);\n+    if (!span.isValid()) {\n       return Optional.empty();\n     }\n \n-    return Optional.of(TracingContextUtils.withSpan(DefaultSpan.create(spanContext), context));\n+    return Optional.of(TracingContextUtils.withSpan(span, context));\n   }\n \n-  private static <C> SpanContext getSpanContextFromMultipleHeaders(\n+  private static <C> Span extractFromMultipleHeaders(", "originalCommit": "952058709c2565f9afe643598645a453a723a3ad", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dae27aa65adc3c79851a79a3f0a98037699f45c5", "chunk": "diff --git a/extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/B3PropagatorExtractorMultipleHeaders.java b/extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/B3PropagatorExtractorMultipleHeaders.java\nindex 6a21926e0..12bc60e8a 100644\n--- a/extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/B3PropagatorExtractorMultipleHeaders.java\n+++ b/extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/B3PropagatorExtractorMultipleHeaders.java\n\n@@ -28,33 +29,33 @@ final class B3PropagatorExtractorMultipleHeaders implements B3PropagatorExtracto\n       Context context, C carrier, TextMapPropagator.Getter<C> getter) {\n     Objects.requireNonNull(carrier, \"carrier\");\n     Objects.requireNonNull(getter, \"getter\");\n-    Span span = extractFromMultipleHeaders(carrier, getter);\n-    if (!span.isValid()) {\n+    SpanContext spanContext = getSpanContextFromMultipleHeaders(carrier, getter);\n+    if (!spanContext.isValid()) {\n       return Optional.empty();\n     }\n \n-    return Optional.of(TracingContextUtils.withSpan(span, context));\n+    return Optional.of(TracingContextUtils.withSpan(Span.getPropagated(spanContext), context));\n   }\n \n-  private static <C> Span extractFromMultipleHeaders(\n+  private static <C> SpanContext getSpanContextFromMultipleHeaders(\n       C carrier, TextMapPropagator.Getter<C> getter) {\n     String traceId = getter.get(carrier, TRACE_ID_HEADER);\n     if (StringUtils.isNullOrEmpty(traceId)) {\n-      return Span.getInvalid();\n+      return SpanContext.getInvalid();\n     }\n     if (!Common.isTraceIdValid(traceId)) {\n       logger.fine(\n           \"Invalid TraceId in B3 header: \" + traceId + \"'. Returning INVALID span context.\");\n-      return Span.getInvalid();\n+      return SpanContext.getInvalid();\n     }\n \n     String spanId = getter.get(carrier, SPAN_ID_HEADER);\n     if (!Common.isSpanIdValid(spanId)) {\n       logger.fine(\"Invalid SpanId in B3 header: \" + spanId + \"'. Returning INVALID span context.\");\n-      return Span.getInvalid();\n+      return SpanContext.getInvalid();\n     }\n \n     String sampled = getter.get(carrier, SAMPLED_HEADER);\n-    return Common.getPropagatedSpan(traceId, spanId, sampled);\n+    return Common.buildSpanContext(traceId, spanId, sampled);\n   }\n }\n"}}, {"oid": "dae27aa65adc3c79851a79a3f0a98037699f45c5", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/dae27aa65adc3c79851a79a3f0a98037699f45c5", "message": "Cleanup", "committedDate": "2020-10-14T02:24:20Z", "type": "commit"}, {"oid": "59e676fce1698e49c91c423dec74545430802249", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/59e676fce1698e49c91c423dec74545430802249", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into remove-default-span", "committedDate": "2020-10-14T02:26:10Z", "type": "commit"}, {"oid": "59e676fce1698e49c91c423dec74545430802249", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/59e676fce1698e49c91c423dec74545430802249", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into remove-default-span", "committedDate": "2020-10-14T02:26:10Z", "type": "forcePushed"}, {"oid": "0ceec41364224421d92885b12381753782b6184a", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0ceec41364224421d92885b12381753782b6184a", "message": "Fix comment", "committedDate": "2020-10-14T02:30:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc1MDY1Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1791#discussion_r504750656", "bodyText": "this is a nice cleanup. much tighter and clearer.", "author": "jkwatson", "createdAt": "2020-10-14T15:01:14Z", "path": "api/src/main/java/io/opentelemetry/trace/DefaultTracer.java", "diffHunk": "@@ -64,9 +64,7 @@ public Span startSpan() {\n         spanContext = TracingContextUtils.getCurrentSpan().getContext();\n       }\n \n-      return spanContext != null && !SpanContext.getInvalid().equals(spanContext)\n-          ? new DefaultSpan(spanContext)\n-          : DefaultSpan.getInvalid();\n+      return Span.getPropagated(spanContext);", "originalCommit": "0ceec41364224421d92885b12381753782b6184a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2e6c3d96489e7a198ad8fa0c122e38641483bd2f", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/trace/DefaultTracer.java b/api/src/main/java/io/opentelemetry/trace/DefaultTracer.java\nindex 56031a04b..04e6b7a5f 100644\n--- a/api/src/main/java/io/opentelemetry/trace/DefaultTracer.java\n+++ b/api/src/main/java/io/opentelemetry/trace/DefaultTracer.java\n\n@@ -64,7 +59,7 @@ public final class DefaultTracer implements Tracer {\n         spanContext = TracingContextUtils.getCurrentSpan().getContext();\n       }\n \n-      return Span.getPropagated(spanContext);\n+      return Span.wrap(spanContext);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg0NzAyOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1791#discussion_r504847029", "bodyText": "s/getPropagated/toPropagated?", "author": "bogdandrutu", "createdAt": "2020-10-14T17:23:11Z", "path": "api/src/main/java/io/opentelemetry/trace/Span.java", "diffHunk": "@@ -23,6 +23,26 @@\n @ThreadSafe\n public interface Span {\n \n+  /**\n+   * Returns an invalid {@link Span}. An invalid {@link Span} is used when tracing is disabled,\n+   * usually because there is no OpenTelemetry SDK installed.\n+   */\n+  static Span getInvalid() {\n+    return PropagatedSpan.INVALID;\n+  }\n+\n+  /**\n+   * Returns a non-recording {@link Span} that holds the provided {@link SpanContext} but has no\n+   * functionality. It will not be exported and all tracing operations are no-op, but it can be used\n+   * to propagate a valid {@link SpanContext} downstream.\n+   */\n+  static Span getPropagated(SpanContext spanContext) {", "originalCommit": "0ceec41364224421d92885b12381753782b6184a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg1MzA0Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1791#discussion_r504853047", "bodyText": "I think this should be called Span.wrap(SpanContext). Then we are also safe against renamings of propagated/noop/etc", "author": "Oberon00", "createdAt": "2020-10-14T17:33:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg0NzAyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg3MTQxMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1791#discussion_r504871411", "bodyText": "I don't think we are safe against behavior change, this needs to always propagate the SC. But +1 for the name", "author": "bogdandrutu", "createdAt": "2020-10-14T18:03:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg0NzAyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "0b75200f4275422b59e5cf4ed057b6daa7a842ac", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/trace/Span.java b/api/src/main/java/io/opentelemetry/trace/Span.java\nindex e1f5d265b..4cf1a797d 100644\n--- a/api/src/main/java/io/opentelemetry/trace/Span.java\n+++ b/api/src/main/java/io/opentelemetry/trace/Span.java\n\n@@ -17,8 +17,6 @@ import javax.annotation.concurrent.ThreadSafe;\n  * <p>Spans are created by the {@link Builder#startSpan} method.\n  *\n  * <p>{@code Span} <b>must</b> be ended by calling {@link #end()}.\n- *\n- * @since 0.1.0\n  */\n @ThreadSafe\n public interface Span {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg0NzU4NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1791#discussion_r504847585", "bodyText": "I think this change is unrelated with the PR description and purpose, consider to not add \"secondary\" changes to a PR.", "author": "bogdandrutu", "createdAt": "2020-10-14T17:24:08Z", "path": "api/src/main/java/io/opentelemetry/trace/Span.java", "diffHunk": "@@ -304,6 +324,15 @@ default void setAttribute(AttributeKey<Long> key, int value) {\n    */\n   boolean isRecording();\n \n+  /**\n+   * Returns whether this {@link Span} is valid.\n+   *\n+   * @see Span#getInvalid()\n+   */\n+  default boolean isValid() {\n+    return getContext().isValid();\n+  }", "originalCommit": "0ceec41364224421d92885b12381753782b6184a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA3MjE0Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1791#discussion_r505072146", "bodyText": "Sure makes sense", "author": "anuraaga", "createdAt": "2020-10-14T23:38:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg0NzU4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "0b75200f4275422b59e5cf4ed057b6daa7a842ac", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/trace/Span.java b/api/src/main/java/io/opentelemetry/trace/Span.java\nindex e1f5d265b..4cf1a797d 100644\n--- a/api/src/main/java/io/opentelemetry/trace/Span.java\n+++ b/api/src/main/java/io/opentelemetry/trace/Span.java\n\n@@ -320,7 +283,6 @@ public interface Span {\n    * #addEvent(String)}, {@link #setAttribute(String, long)}).\n    *\n    * @return {@code true} if this {@code Span} records tracing events.\n-   * @since 0.1.0\n    */\n   boolean isRecording();\n \n"}}, {"oid": "0b75200f4275422b59e5cf4ed057b6daa7a842ac", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0b75200f4275422b59e5cf4ed057b6daa7a842ac", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into remove-default-span", "committedDate": "2020-10-14T23:25:19Z", "type": "commit"}, {"oid": "2e6c3d96489e7a198ad8fa0c122e38641483bd2f", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/2e6c3d96489e7a198ad8fa0c122e38641483bd2f", "message": "isValid not valid", "committedDate": "2020-10-14T23:38:31Z", "type": "commit"}]}