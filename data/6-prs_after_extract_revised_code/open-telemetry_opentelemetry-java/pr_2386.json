{"pr_number": 2386, "pr_title": "Reduce usage of GlobalOpenTelemetry", "pr_createdAt": "2020-12-22T03:54:44Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/2386", "timeline": [{"oid": "0e22449951e9e14bfe718591478a59c3f1f46da1", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0e22449951e9e14bfe718591478a59c3f1f46da1", "message": "Reduce usage of GlobalOpenTelemetry", "committedDate": "2020-12-22T03:47:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQyNDA2OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2386#discussion_r547424068", "bodyText": "heh...this is more of a \"how does the SDK react to bad situations\" than perf per se, but this is fine. :)", "author": "jkwatson", "createdAt": "2020-12-22T18:08:51Z", "path": "perf-harness/src/test/java/io/opentelemetry/perf/OtlpPipelineStressTest.java", "diffHunk": "@@ -243,16 +245,22 @@ private static IntervalMetricReader setupSdk(MetricExporter metricExporter) {\n \n     // set up the metric exporter and wire it into the SDK and a timed reader.\n \n-    return IntervalMetricReader.builder()\n-        .setMetricExporter(metricExporter)\n-        .setMetricProducers(\n-            Collections.singleton(\n-                ((SdkMeterProvider) GlobalMetricsProvider.get()).getMetricProducer()))\n-        .setExportIntervalMillis(1000)\n-        .build();\n-  }\n+    Resource resource =\n+        Resource.create(\n+            Attributes.builder()\n+                .put(ResourceAttributes.SERVICE_NAME, \"PerfTester\")", "originalCommit": "0e22449951e9e14bfe718591478a59c3f1f46da1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQyNDM4Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2386#discussion_r547424387", "bodyText": "And, I had put perf in the name of the tracer, so I'm mostly to blame here. ;)", "author": "jkwatson", "createdAt": "2020-12-22T18:09:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQyNDA2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU3NTY4MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2386#discussion_r547575680", "bodyText": "Oops forgot to remove the unnecessary system property too, phew", "author": "anuraaga", "createdAt": "2020-12-23T00:45:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQyNDA2OA=="}], "type": "inlineReview", "revised_code": {"commit": "bd118ff48a34a2e05ac0eed20050ed49c90ccc9c", "chunk": "diff --git a/perf-harness/src/test/java/io/opentelemetry/perf/OtlpPipelineStressTest.java b/perf-harness/src/test/java/io/opentelemetry/perf/OtlpPipelineStressTest.java\nindex 2804b8faf..56ea89cbc 100644\n--- a/perf-harness/src/test/java/io/opentelemetry/perf/OtlpPipelineStressTest.java\n+++ b/perf-harness/src/test/java/io/opentelemetry/perf/OtlpPipelineStressTest.java\n\n@@ -237,14 +238,6 @@ public class OtlpPipelineStressTest {\n   }\n \n   private void setupSdk() {\n-    // this will make sure that a proper service.name attribute is set on all the spans/metrics.\n-    // note: this is not something you should generally do in code, but should be provided on the\n-    // command-line. This is here to make the example more self-contained.\n-    System.setProperty(\n-        \"otel.resource.attributes\", \"service.name=PerfTester,service.version=1.0.1-RC-1\");\n-\n-    // set up the metric exporter and wire it into the SDK and a timed reader.\n-\n     Resource resource =\n         Resource.create(\n             Attributes.builder()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQyNTE3OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2386#discussion_r547425178", "bodyText": "Do we need the whole SdkTracerProvider here, or is the management interface enough?  I actually struggled with this kind of decision in the examples, as well.  It's so easy to end up with the SDK tracer provider and to use it for instrumentation, and we'd definitely like to discourage that pattern as much as possible.", "author": "jkwatson", "createdAt": "2020-12-22T18:11:36Z", "path": "perf-harness/src/test/java/io/opentelemetry/perf/OtlpPipelineStressTest.java", "diffHunk": "@@ -101,6 +102,8 @@\n \n   private final InMemoryMetricExporter metricExporter = InMemoryMetricExporter.create();\n \n+  private SdkTracerProvider tracerProvider;", "originalCommit": "0e22449951e9e14bfe718591478a59c3f1f46da1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bd118ff48a34a2e05ac0eed20050ed49c90ccc9c", "chunk": "diff --git a/perf-harness/src/test/java/io/opentelemetry/perf/OtlpPipelineStressTest.java b/perf-harness/src/test/java/io/opentelemetry/perf/OtlpPipelineStressTest.java\nindex 2804b8faf..56ea89cbc 100644\n--- a/perf-harness/src/test/java/io/opentelemetry/perf/OtlpPipelineStressTest.java\n+++ b/perf-harness/src/test/java/io/opentelemetry/perf/OtlpPipelineStressTest.java\n\n@@ -102,7 +103,7 @@ public class OtlpPipelineStressTest {\n \n   private final InMemoryMetricExporter metricExporter = InMemoryMetricExporter.create();\n \n-  private SdkTracerProvider tracerProvider;\n+  private SdkTracerManagement tracerManagement;\n   private OpenTelemetry openTelemetry;\n   private IntervalMetricReader intervalMetricReader;\n   private Proxy collectorProxy;\n"}}, {"oid": "bd118ff48a34a2e05ac0eed20050ed49c90ccc9c", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/bd118ff48a34a2e05ac0eed20050ed49c90ccc9c", "message": "Cleanup", "committedDate": "2020-12-23T00:45:17Z", "type": "commit"}]}