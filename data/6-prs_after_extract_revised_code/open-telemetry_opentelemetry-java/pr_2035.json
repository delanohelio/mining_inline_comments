{"pr_number": 2035, "pr_title": "Add AssertJ custom assertions for SpanData and ReadableAttributes.", "pr_createdAt": "2020-11-06T09:23:56Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/2035", "timeline": [{"oid": "f8ee3ee4bb197cdd17aa08321c9d5bfde5b87325", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f8ee3ee4bb197cdd17aa08321c9d5bfde5b87325", "message": "Add AssertJ custom assertions for SpanData and ReadableAttributes.", "committedDate": "2020-11-06T09:19:32Z", "type": "commit"}, {"oid": "dbd785c10b344458115c2ef0c0d17d28c2f8c62a", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/dbd785c10b344458115c2ef0c0d17d28c2f8c62a", "message": "Simpler?", "committedDate": "2020-11-06T09:35:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYzMDIwOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2035#discussion_r518630209", "bodyText": "Should this have a private constructor?", "author": "Oberon00", "createdAt": "2020-11-06T09:36:02Z", "path": "sdk/testing/src/main/java/io/opentelemetry/sdk/testing/assertj/OpenTelemetryAssertions.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.testing.assertj;\n+\n+import io.opentelemetry.api.common.ReadableAttributes;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import org.assertj.core.api.Assertions;\n+\n+/**\n+ * Entry point for assertion methods for OpenTelemetry types. To use type-specific assertions,\n+ * static import any {@code assertThat} method in this class instead of {@code\n+ * Assertions.assertThat}.\n+ */\n+public class OpenTelemetryAssertions extends Assertions {", "originalCommit": "f8ee3ee4bb197cdd17aa08321c9d5bfde5b87325", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE1MDE5Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2035#discussion_r519150192", "bodyText": "Made it protector - a user might extend this into their own custom assertions class, doesn't hurt since just a bag of statics.", "author": "anuraaga", "createdAt": "2020-11-07T07:59:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYzMDIwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE1MTEzNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2035#discussion_r519151134", "bodyText": "Extending would also work with a private ctor I think. You just can't instantiate the derived class. But protected is OK for me here.", "author": "Oberon00", "createdAt": "2020-11-07T08:10:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYzMDIwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE3MDEzNw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2035#discussion_r519170137", "bodyText": "Yeah thought it might work but when I tried it, it didn't compile :)", "author": "anuraaga", "createdAt": "2020-11-07T11:58:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYzMDIwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "ce48ff446466e525f6cd881178a3a215fdd789ea", "chunk": "diff --git a/sdk/testing/src/main/java/io/opentelemetry/sdk/testing/assertj/OpenTelemetryAssertions.java b/sdk/testing/src/main/java/io/opentelemetry/sdk/testing/assertj/OpenTelemetryAssertions.java\nindex 47c3c8c6c..e021f3b89 100644\n--- a/sdk/testing/src/main/java/io/opentelemetry/sdk/testing/assertj/OpenTelemetryAssertions.java\n+++ b/sdk/testing/src/main/java/io/opentelemetry/sdk/testing/assertj/OpenTelemetryAssertions.java\n\n@@ -25,4 +25,6 @@ public class OpenTelemetryAssertions extends Assertions {\n   public static SpanDataAssert assertThat(SpanData spanData) {\n     return new SpanDataAssert(spanData);\n   }\n+\n+  protected OpenTelemetryAssertions() {}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYzNDQwMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2035#discussion_r518634401", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  failWithMessage(\"Expected span to have ended but did has not\");\n          \n          \n            \n                  failWithMessage(\"Expected span to have ended but did not\");", "author": "Oberon00", "createdAt": "2020-11-06T09:43:15Z", "path": "sdk/testing/src/main/java/io/opentelemetry/sdk/testing/assertj/SpanDataAssert.java", "diffHunk": "@@ -0,0 +1,370 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.testing.assertj;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.opentelemetry.api.common.ReadableAttributes;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.api.trace.TraceState;\n+import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n+import io.opentelemetry.sdk.resources.Resource;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import java.time.Instant;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+import org.assertj.core.api.AbstractAssert;\n+\n+/** Assertions for an exported {@link SpanData}. */\n+public class SpanDataAssert extends AbstractAssert<SpanDataAssert, SpanData> {\n+\n+  SpanDataAssert(SpanData actual) {\n+    super(actual, SpanDataAssert.class);\n+  }\n+\n+  /** Asserts the span has the given trace ID. */\n+  public SpanDataAssert hasTraceId(String traceId) {\n+    isNotNull();\n+    if (!actual.getTraceId().equals(traceId)) {\n+      failWithActualExpectedAndMessage(\n+          actual.getTraceId(),\n+          traceId,\n+          \"Expected span to have trace ID <%s> but was <%s>\",\n+          traceId,\n+          actual.getTraceId());\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span has the given span ID. */\n+  public SpanDataAssert hasSpanId(String spanId) {\n+    isNotNull();\n+    if (!actual.getSpanId().equals(spanId)) {\n+      failWithActualExpectedAndMessage(\n+          actual.getSpanId(),\n+          spanId,\n+          \"Expected span to have span ID <%s> but was <%s>\",\n+          spanId,\n+          actual.getSpanId());\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span is sampled. */\n+  public SpanDataAssert isSampled() {\n+    isNotNull();\n+    if (!actual.isSampled()) {\n+      failWithMessage(\"Expected span to be sampled but was not.\");\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span is not sampled. */\n+  public SpanDataAssert isNotSampled() {\n+    isNotNull();\n+    if (actual.isSampled()) {\n+      failWithMessage(\"Expected span to not be sampled but it was.\");\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span has the given {@link TraceState}. */\n+  public SpanDataAssert hasTraceState(TraceState traceState) {\n+    isNotNull();\n+    if (!actual.getTraceState().equals(traceState)) {\n+      failWithActualExpectedAndMessage(\n+          actual.getTraceState(),\n+          traceState,\n+          \"Expected span to have trace state <%s> but was <%s>\",\n+          traceState,\n+          actual.getTraceState());\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span has the given parent span ID. */\n+  public SpanDataAssert hasParentSpanId(String parentSpanId) {\n+    isNotNull();\n+    if (!actual.getParentSpanId().equals(parentSpanId)) {\n+      failWithActualExpectedAndMessage(\n+          actual.getParentSpanId(),\n+          parentSpanId,\n+          \"Expected span to have parent span ID <%s> but was <%s>\",\n+          parentSpanId,\n+          actual.getParentSpanId());\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span has the given {@link Resource}. */\n+  public SpanDataAssert hasResource(Resource resource) {\n+    isNotNull();\n+    if (!actual.getResource().equals(resource)) {\n+      failWithActualExpectedAndMessage(\n+          actual.getResource(),\n+          resource,\n+          \"Expected span to have resource <%s> but was <%s>\",\n+          resource,\n+          actual.getResource());\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span has the given {@link InstrumentationLibraryInfo}. */\n+  public SpanDataAssert hasInstrumentationLibraryInfo(\n+      InstrumentationLibraryInfo instrumentationLibraryInfo) {\n+    isNotNull();\n+    if (!actual.getInstrumentationLibraryInfo().equals(instrumentationLibraryInfo)) {\n+      failWithActualExpectedAndMessage(\n+          actual.getInstrumentationLibraryInfo(),\n+          instrumentationLibraryInfo,\n+          \"Expected span to have instrumentation library info <%s> but was <%s>\",\n+          instrumentationLibraryInfo,\n+          actual.getInstrumentationLibraryInfo());\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span has the given name. */\n+  public SpanDataAssert hasName(String name) {\n+    isNotNull();\n+    if (!actual.getName().equals(name)) {\n+      failWithActualExpectedAndMessage(\n+          actual.getName(),\n+          name,\n+          \"Expected span to have name <%s> but was <%s>\",\n+          name,\n+          actual.getName());\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span has the given kind. */\n+  public SpanDataAssert hasKind(Span.Kind kind) {\n+    isNotNull();\n+    if (!actual.getKind().equals(kind)) {\n+      failWithActualExpectedAndMessage(\n+          actual.getKind(),\n+          kind,\n+          \"Expected span to have kind <%s> but was <%s>\",\n+          kind,\n+          actual.getKind());\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span starts at the given epoch timestamp, in nanos. */\n+  public SpanDataAssert startsAt(long startEpochNanos) {\n+    isNotNull();\n+    if (actual.getStartEpochNanos() != startEpochNanos) {\n+      failWithActualExpectedAndMessage(\n+          actual.getStartEpochNanos(),\n+          startEpochNanos,\n+          \"Expected span to have start epoch <%s> nanos but was <%s>\",\n+          startEpochNanos,\n+          actual.getStartEpochNanos());\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span starts at the given epoch timestamp. */\n+  @SuppressWarnings(\"PreferJavaTimeOverload\")\n+  public SpanDataAssert startsAt(long startEpoch, TimeUnit unit) {\n+    return startsAt(unit.toNanos(startEpoch));\n+  }\n+\n+  /** Asserts the span starts at the given epoch timestamp. */\n+  public SpanDataAssert startsAt(Instant timestamp) {\n+    return startsAt(toNanos(timestamp));\n+  }\n+\n+  /** Asserts the span has the given attributes. */\n+  public SpanDataAssert hasAttributes(ReadableAttributes attributes) {\n+    isNotNull();\n+    if (!actual.getAttributes().equals(attributes)) {\n+      failWithActualExpectedAndMessage(\n+          actual.getAttributes(),\n+          attributes,\n+          \"Expected span to have attributes <%s> but was <%s>\",\n+          attributes,\n+          actual.getAttributes());\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span has attributes satisfying the given condition. */\n+  public SpanDataAssert hasAttributesSatisfying(Consumer<ReadableAttributes> attributes) {\n+    isNotNull();\n+    assertThat(actual.getAttributes()).as(\"attributes\").satisfies(attributes);\n+    return this;\n+  }\n+\n+  /** Asserts the span has the given events. */\n+  public SpanDataAssert hasEvents(Iterable<SpanData.Event> events) {\n+    isNotNull();\n+    assertThat(actual.getEvents())\n+        .withFailMessage(\n+            \"Expected span to have events <%s> but was <%s>\", events, actual.getEvents())\n+        .containsExactlyInAnyOrderElementsOf(events);\n+    return this;\n+  }\n+\n+  /** Asserts the span has the given events. */\n+  public SpanDataAssert hasEvents(SpanData.Event... events) {\n+    return hasEvents(Arrays.asList(events));\n+  }\n+\n+  /** Asserts the span has events satisfying the given condition. */\n+  public SpanDataAssert hasEventsSatisfying(Consumer<List<? extends SpanData.Event>> condition) {\n+    isNotNull();\n+    assertThat(actual.getEvents()).satisfies(condition);\n+    return this;\n+  }\n+\n+  /** Asserts the span has the given links. */\n+  public SpanDataAssert hasLinks(Iterable<SpanData.Link> links) {\n+    isNotNull();\n+    assertThat(actual.getLinks())\n+        .withFailMessage(\"Expected span to have links <%s> but was <%s>\", links, actual.getLinks())\n+        .containsExactlyInAnyOrderElementsOf(links);\n+    return this;\n+  }\n+\n+  /** Asserts the span has the given links. */\n+  public SpanDataAssert hasLinks(SpanData.Link... links) {\n+    return hasLinks(Arrays.asList(links));\n+  }\n+\n+  /** Asserts the span has events satisfying the given condition. */\n+  public SpanDataAssert hasLinksSatisfying(Consumer<List<? extends SpanData.Link>> condition) {\n+    isNotNull();\n+    assertThat(actual.getLinks()).satisfies(condition);\n+    return this;\n+  }\n+\n+  /** Asserts the span has the given {@link SpanData.Status}. */\n+  public SpanDataAssert hasStatus(SpanData.Status status) {\n+    isNotNull();\n+    if (!actual.getStatus().equals(status)) {\n+      failWithActualExpectedAndMessage(\n+          actual.getStatus(),\n+          status,\n+          \"Expected span to have status <%s> but was <%s>\",\n+          status,\n+          actual.getStatus());\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span ends at the given epoch timestamp, in nanos. */\n+  public SpanDataAssert endsAt(long endEpochNanos) {\n+    isNotNull();\n+    if (actual.getEndEpochNanos() != endEpochNanos) {\n+      failWithActualExpectedAndMessage(\n+          actual.getEndEpochNanos(),\n+          endEpochNanos,\n+          \"Expected span to have end epoch <%s> nanos but was <%s>\",\n+          endEpochNanos,\n+          actual.getEndEpochNanos());\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span ends at the given epoch timestamp. */\n+  @SuppressWarnings(\"PreferJavaTimeOverload\")\n+  public SpanDataAssert endsAt(long startEpoch, TimeUnit unit) {\n+    return endsAt(unit.toNanos(startEpoch));\n+  }\n+\n+  /** Asserts the span ends at the given epoch timestamp. */\n+  public SpanDataAssert endsAt(Instant timestamp) {\n+    return endsAt(toNanos(timestamp));\n+  }\n+\n+  /** Asserts the span has a remote parent. */\n+  public SpanDataAssert hasRemoteParent() {\n+    isNotNull();\n+    if (!actual.hasRemoteParent()) {\n+      failWithMessage(\"Expected span to have remote parent but did not\");\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span does not have a remote parent. */\n+  public SpanDataAssert doesNotHaveRemoteParent() {\n+    isNotNull();\n+    if (actual.hasRemoteParent()) {\n+      failWithMessage(\"Expected span to have remote parent but did not\");\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span has ended. */\n+  public SpanDataAssert hasEnded() {\n+    isNotNull();\n+    if (!actual.hasEnded()) {\n+      failWithMessage(\"Expected span to have ended but did has not\");", "originalCommit": "dbd785c10b344458115c2ef0c0d17d28c2f8c62a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ce48ff446466e525f6cd881178a3a215fdd789ea", "chunk": "diff --git a/sdk/testing/src/main/java/io/opentelemetry/sdk/testing/assertj/SpanDataAssert.java b/sdk/testing/src/main/java/io/opentelemetry/sdk/testing/assertj/SpanDataAssert.java\nindex 8d2b9f08c..d25b0e26e 100644\n--- a/sdk/testing/src/main/java/io/opentelemetry/sdk/testing/assertj/SpanDataAssert.java\n+++ b/sdk/testing/src/main/java/io/opentelemetry/sdk/testing/assertj/SpanDataAssert.java\n\n@@ -34,7 +34,8 @@ public class SpanDataAssert extends AbstractAssert<SpanDataAssert, SpanData> {\n       failWithActualExpectedAndMessage(\n           actual.getTraceId(),\n           traceId,\n-          \"Expected span to have trace ID <%s> but was <%s>\",\n+          \"Expected span [%s] to have trace ID <%s> but was <%s>\",\n+          actual.getName(),\n           traceId,\n           actual.getTraceId());\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYzNDU4Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2035#discussion_r518634586", "bodyText": "Maybe add the span name to the message (this would apply to most/all assertions)?", "author": "Oberon00", "createdAt": "2020-11-06T09:43:31Z", "path": "sdk/testing/src/main/java/io/opentelemetry/sdk/testing/assertj/SpanDataAssert.java", "diffHunk": "@@ -0,0 +1,370 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.testing.assertj;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.opentelemetry.api.common.ReadableAttributes;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.api.trace.TraceState;\n+import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n+import io.opentelemetry.sdk.resources.Resource;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import java.time.Instant;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+import org.assertj.core.api.AbstractAssert;\n+\n+/** Assertions for an exported {@link SpanData}. */\n+public class SpanDataAssert extends AbstractAssert<SpanDataAssert, SpanData> {\n+\n+  SpanDataAssert(SpanData actual) {\n+    super(actual, SpanDataAssert.class);\n+  }\n+\n+  /** Asserts the span has the given trace ID. */\n+  public SpanDataAssert hasTraceId(String traceId) {\n+    isNotNull();\n+    if (!actual.getTraceId().equals(traceId)) {\n+      failWithActualExpectedAndMessage(\n+          actual.getTraceId(),\n+          traceId,\n+          \"Expected span to have trace ID <%s> but was <%s>\",\n+          traceId,\n+          actual.getTraceId());\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span has the given span ID. */\n+  public SpanDataAssert hasSpanId(String spanId) {\n+    isNotNull();\n+    if (!actual.getSpanId().equals(spanId)) {\n+      failWithActualExpectedAndMessage(\n+          actual.getSpanId(),\n+          spanId,\n+          \"Expected span to have span ID <%s> but was <%s>\",\n+          spanId,\n+          actual.getSpanId());\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span is sampled. */\n+  public SpanDataAssert isSampled() {\n+    isNotNull();\n+    if (!actual.isSampled()) {\n+      failWithMessage(\"Expected span to be sampled but was not.\");\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span is not sampled. */\n+  public SpanDataAssert isNotSampled() {\n+    isNotNull();\n+    if (actual.isSampled()) {\n+      failWithMessage(\"Expected span to not be sampled but it was.\");\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span has the given {@link TraceState}. */\n+  public SpanDataAssert hasTraceState(TraceState traceState) {\n+    isNotNull();\n+    if (!actual.getTraceState().equals(traceState)) {\n+      failWithActualExpectedAndMessage(\n+          actual.getTraceState(),\n+          traceState,\n+          \"Expected span to have trace state <%s> but was <%s>\",\n+          traceState,\n+          actual.getTraceState());\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span has the given parent span ID. */\n+  public SpanDataAssert hasParentSpanId(String parentSpanId) {\n+    isNotNull();\n+    if (!actual.getParentSpanId().equals(parentSpanId)) {\n+      failWithActualExpectedAndMessage(\n+          actual.getParentSpanId(),\n+          parentSpanId,\n+          \"Expected span to have parent span ID <%s> but was <%s>\",\n+          parentSpanId,\n+          actual.getParentSpanId());\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span has the given {@link Resource}. */\n+  public SpanDataAssert hasResource(Resource resource) {\n+    isNotNull();\n+    if (!actual.getResource().equals(resource)) {\n+      failWithActualExpectedAndMessage(\n+          actual.getResource(),\n+          resource,\n+          \"Expected span to have resource <%s> but was <%s>\",\n+          resource,\n+          actual.getResource());\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span has the given {@link InstrumentationLibraryInfo}. */\n+  public SpanDataAssert hasInstrumentationLibraryInfo(\n+      InstrumentationLibraryInfo instrumentationLibraryInfo) {\n+    isNotNull();\n+    if (!actual.getInstrumentationLibraryInfo().equals(instrumentationLibraryInfo)) {\n+      failWithActualExpectedAndMessage(\n+          actual.getInstrumentationLibraryInfo(),\n+          instrumentationLibraryInfo,\n+          \"Expected span to have instrumentation library info <%s> but was <%s>\",\n+          instrumentationLibraryInfo,\n+          actual.getInstrumentationLibraryInfo());\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span has the given name. */\n+  public SpanDataAssert hasName(String name) {\n+    isNotNull();\n+    if (!actual.getName().equals(name)) {\n+      failWithActualExpectedAndMessage(\n+          actual.getName(),\n+          name,\n+          \"Expected span to have name <%s> but was <%s>\",\n+          name,\n+          actual.getName());\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span has the given kind. */\n+  public SpanDataAssert hasKind(Span.Kind kind) {\n+    isNotNull();\n+    if (!actual.getKind().equals(kind)) {\n+      failWithActualExpectedAndMessage(\n+          actual.getKind(),\n+          kind,\n+          \"Expected span to have kind <%s> but was <%s>\",\n+          kind,\n+          actual.getKind());\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span starts at the given epoch timestamp, in nanos. */\n+  public SpanDataAssert startsAt(long startEpochNanos) {\n+    isNotNull();\n+    if (actual.getStartEpochNanos() != startEpochNanos) {\n+      failWithActualExpectedAndMessage(\n+          actual.getStartEpochNanos(),\n+          startEpochNanos,\n+          \"Expected span to have start epoch <%s> nanos but was <%s>\",\n+          startEpochNanos,\n+          actual.getStartEpochNanos());\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span starts at the given epoch timestamp. */\n+  @SuppressWarnings(\"PreferJavaTimeOverload\")\n+  public SpanDataAssert startsAt(long startEpoch, TimeUnit unit) {\n+    return startsAt(unit.toNanos(startEpoch));\n+  }\n+\n+  /** Asserts the span starts at the given epoch timestamp. */\n+  public SpanDataAssert startsAt(Instant timestamp) {\n+    return startsAt(toNanos(timestamp));\n+  }\n+\n+  /** Asserts the span has the given attributes. */\n+  public SpanDataAssert hasAttributes(ReadableAttributes attributes) {\n+    isNotNull();\n+    if (!actual.getAttributes().equals(attributes)) {\n+      failWithActualExpectedAndMessage(\n+          actual.getAttributes(),\n+          attributes,\n+          \"Expected span to have attributes <%s> but was <%s>\",\n+          attributes,\n+          actual.getAttributes());\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span has attributes satisfying the given condition. */\n+  public SpanDataAssert hasAttributesSatisfying(Consumer<ReadableAttributes> attributes) {\n+    isNotNull();\n+    assertThat(actual.getAttributes()).as(\"attributes\").satisfies(attributes);\n+    return this;\n+  }\n+\n+  /** Asserts the span has the given events. */\n+  public SpanDataAssert hasEvents(Iterable<SpanData.Event> events) {\n+    isNotNull();\n+    assertThat(actual.getEvents())\n+        .withFailMessage(\n+            \"Expected span to have events <%s> but was <%s>\", events, actual.getEvents())\n+        .containsExactlyInAnyOrderElementsOf(events);\n+    return this;\n+  }\n+\n+  /** Asserts the span has the given events. */\n+  public SpanDataAssert hasEvents(SpanData.Event... events) {\n+    return hasEvents(Arrays.asList(events));\n+  }\n+\n+  /** Asserts the span has events satisfying the given condition. */\n+  public SpanDataAssert hasEventsSatisfying(Consumer<List<? extends SpanData.Event>> condition) {\n+    isNotNull();\n+    assertThat(actual.getEvents()).satisfies(condition);\n+    return this;\n+  }\n+\n+  /** Asserts the span has the given links. */\n+  public SpanDataAssert hasLinks(Iterable<SpanData.Link> links) {\n+    isNotNull();\n+    assertThat(actual.getLinks())\n+        .withFailMessage(\"Expected span to have links <%s> but was <%s>\", links, actual.getLinks())\n+        .containsExactlyInAnyOrderElementsOf(links);\n+    return this;\n+  }\n+\n+  /** Asserts the span has the given links. */\n+  public SpanDataAssert hasLinks(SpanData.Link... links) {\n+    return hasLinks(Arrays.asList(links));\n+  }\n+\n+  /** Asserts the span has events satisfying the given condition. */\n+  public SpanDataAssert hasLinksSatisfying(Consumer<List<? extends SpanData.Link>> condition) {\n+    isNotNull();\n+    assertThat(actual.getLinks()).satisfies(condition);\n+    return this;\n+  }\n+\n+  /** Asserts the span has the given {@link SpanData.Status}. */\n+  public SpanDataAssert hasStatus(SpanData.Status status) {\n+    isNotNull();\n+    if (!actual.getStatus().equals(status)) {\n+      failWithActualExpectedAndMessage(\n+          actual.getStatus(),\n+          status,\n+          \"Expected span to have status <%s> but was <%s>\",\n+          status,\n+          actual.getStatus());\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span ends at the given epoch timestamp, in nanos. */\n+  public SpanDataAssert endsAt(long endEpochNanos) {\n+    isNotNull();\n+    if (actual.getEndEpochNanos() != endEpochNanos) {\n+      failWithActualExpectedAndMessage(\n+          actual.getEndEpochNanos(),\n+          endEpochNanos,\n+          \"Expected span to have end epoch <%s> nanos but was <%s>\",\n+          endEpochNanos,\n+          actual.getEndEpochNanos());\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span ends at the given epoch timestamp. */\n+  @SuppressWarnings(\"PreferJavaTimeOverload\")\n+  public SpanDataAssert endsAt(long startEpoch, TimeUnit unit) {\n+    return endsAt(unit.toNanos(startEpoch));\n+  }\n+\n+  /** Asserts the span ends at the given epoch timestamp. */\n+  public SpanDataAssert endsAt(Instant timestamp) {\n+    return endsAt(toNanos(timestamp));\n+  }\n+\n+  /** Asserts the span has a remote parent. */\n+  public SpanDataAssert hasRemoteParent() {\n+    isNotNull();\n+    if (!actual.hasRemoteParent()) {\n+      failWithMessage(\"Expected span to have remote parent but did not\");\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span does not have a remote parent. */\n+  public SpanDataAssert doesNotHaveRemoteParent() {\n+    isNotNull();\n+    if (actual.hasRemoteParent()) {\n+      failWithMessage(\"Expected span to have remote parent but did not\");\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span has ended. */\n+  public SpanDataAssert hasEnded() {\n+    isNotNull();\n+    if (!actual.hasEnded()) {\n+      failWithMessage(\"Expected span to have ended but did has not\");", "originalCommit": "dbd785c10b344458115c2ef0c0d17d28c2f8c62a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ce48ff446466e525f6cd881178a3a215fdd789ea", "chunk": "diff --git a/sdk/testing/src/main/java/io/opentelemetry/sdk/testing/assertj/SpanDataAssert.java b/sdk/testing/src/main/java/io/opentelemetry/sdk/testing/assertj/SpanDataAssert.java\nindex 8d2b9f08c..d25b0e26e 100644\n--- a/sdk/testing/src/main/java/io/opentelemetry/sdk/testing/assertj/SpanDataAssert.java\n+++ b/sdk/testing/src/main/java/io/opentelemetry/sdk/testing/assertj/SpanDataAssert.java\n\n@@ -34,7 +34,8 @@ public class SpanDataAssert extends AbstractAssert<SpanDataAssert, SpanData> {\n       failWithActualExpectedAndMessage(\n           actual.getTraceId(),\n           traceId,\n-          \"Expected span to have trace ID <%s> but was <%s>\",\n+          \"Expected span [%s] to have trace ID <%s> but was <%s>\",\n+          actual.getName(),\n           traceId,\n           actual.getTraceId());\n     }\n"}}, {"oid": "ce48ff446466e525f6cd881178a3a215fdd789ea", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ce48ff446466e525f6cd881178a3a215fdd789ea", "message": "Cleanup", "committedDate": "2020-11-07T07:59:15Z", "type": "commit"}]}