{"pr_number": 1846, "pr_title": "Automatically generate Semantic Convention attributes", "pr_createdAt": "2020-10-21T13:34:34Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1846", "timeline": [{"oid": "a1e7fbac4f79c76993e05da4c75d97a93d93c94c", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a1e7fbac4f79c76993e05da4c75d97a93d93c94c", "message": "Automatically generate Semantic Convention attributes", "committedDate": "2020-10-21T13:18:35Z", "type": "commit"}, {"oid": "8b230108cc8405f6135f2bac508c2f9dbd1fe826", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8b230108cc8405f6135f2bac508c2f9dbd1fe826", "message": "Fix checkstyle", "committedDate": "2020-10-21T13:43:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMwMTQwNw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1846#discussion_r509301407", "bodyText": "I think it should be relatively straightforward to generate this in gradle using e.g. https://docs.gradle.org/current/dsl/org.gradle.api.tasks.Exec.html. Then we would not have to check in this file.\nOn the minus side, we would then require contributors to have a recent Python 3 installed (actually Docker currently which makes it un-buildable on Windows \ud83e\udd14).\nIf we don't auto-generate the file, we should check during build that the file matches the generated output (does the tool support that for any generator currently or only markdown?)", "author": "Oberon00", "createdAt": "2020-10-21T13:49:20Z", "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributesV2.java", "diffHunk": "@@ -0,0 +1,1006 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import static io.opentelemetry.common.AttributeKey.booleanKey;\n+import static io.opentelemetry.common.AttributeKey.longKey;\n+import static io.opentelemetry.common.AttributeKey.stringKey;\n+\n+import io.opentelemetry.common.AttributeKey;\n+\n+// DO NOT EDIT, this is an Auto-generated file from /templates/SemanticAttributesV2.java.j2", "originalCommit": "8b230108cc8405f6135f2bac508c2f9dbd1fe826", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1339da463d22a2d6071e23b37597bfadecaee17e", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributesV2.java b/api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributesV2.java\ndeleted file mode 100644\nindex 474107366..000000000\n--- a/api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributesV2.java\n+++ /dev/null\n\n@@ -1,1006 +0,0 @@\n-/*\n- * Copyright The OpenTelemetry Authors\n- * SPDX-License-Identifier: Apache-2.0\n- */\n-\n-package io.opentelemetry.trace.attributes;\n-\n-import static io.opentelemetry.common.AttributeKey.booleanKey;\n-import static io.opentelemetry.common.AttributeKey.longKey;\n-import static io.opentelemetry.common.AttributeKey.stringKey;\n-\n-import io.opentelemetry.common.AttributeKey;\n-\n-// DO NOT EDIT, this is an Auto-generated file from /templates/SemanticAttributesV2.java.j2\n-public final class SemanticAttributesV2 {\n-\n-  /** Name of the cloud provider. */\n-  public static final AttributeKey<String> CLOUD_PROVIDER = stringKey(\"cloud.provider\");\n-\n-  /** The cloud account ID used to identify different entities. */\n-  public static final AttributeKey<String> CLOUD_ACCOUNT_ID = stringKey(\"cloud.account.id\");\n-\n-  /** A specific geographical location where different entities can run. */\n-  public static final AttributeKey<String> CLOUD_REGION = stringKey(\"cloud.region\");\n-\n-  /**\n-   * Zones are a sub set of the region connected through low-latency links.\n-   *\n-   * <p>Note: In AWS, this is called availability-zone.\n-   */\n-  public static final AttributeKey<String> CLOUD_ZONE = stringKey(\"cloud.zone\");\n-\n-  /** Container name. */\n-  public static final AttributeKey<String> CONTAINER_NAME = stringKey(\"container.name\");\n-\n-  /**\n-   * Container id. Usually a UUID, as for example used to [identify Docker\n-   * containers](https://docs.docker.com/engine/reference/run/#container-identification). The UUID\n-   * might be abbreviated.\n-   */\n-  public static final AttributeKey<String> CONTAINER_ID = stringKey(\"container.id\");\n-\n-  /** Name of the image the container was built on. */\n-  public static final AttributeKey<String> CONTAINER_IMAGE_NAME = stringKey(\"container.image.name\");\n-\n-  /** Container image tag. */\n-  public static final AttributeKey<String> CONTAINER_IMAGE_TAG = stringKey(\"container.image.tag\");\n-\n-  /**\n-   * Name of the [deployment environment](https://en.wikipedia.org/wiki/Deployment_environment) (aka\n-   * deployment tier).\n-   */\n-  public static final AttributeKey<String> DEPLOYMENT_ENVIRONMENT =\n-      stringKey(\"deployment.environment\");\n-\n-  /** The name of the function being executed. */\n-  public static final AttributeKey<String> FAAS_NAME = stringKey(\"faas.name\");\n-\n-  /**\n-   * The unique ID of the function being executed.\n-   *\n-   * <p>Note: For example, in AWS Lambda this field corresponds to the\n-   * [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) value, in GCP\n-   * to the URI of the resource, and in Azure to the\n-   * [FunctionDirectory](https://github.com/Azure/azure-functions-host/wiki/Retrieving-information-about-the-currently-running-function)\n-   * field.\n-   */\n-  public static final AttributeKey<String> FAAS_ID = stringKey(\"faas.id\");\n-\n-  /**\n-   * The version string of the function being executed as defined in [Version\n-   * Attributes](https://github.com/open-telemetry/opentelemetry-specification/tree/master/specification/resource/semantic_conventions#version-attributes).\n-   */\n-  public static final AttributeKey<String> FAAS_VERSION = stringKey(\"faas.version\");\n-\n-  /** The execution environment ID as a string. */\n-  public static final AttributeKey<String> FAAS_INSTANCE = stringKey(\"faas.instance\");\n-\n-  /** Unique host ID. For Cloud, this must be the instance_id assigned by the cloud provider. */\n-  public static final AttributeKey<String> HOST_ID = stringKey(\"host.id\");\n-\n-  /**\n-   * Name of the host. On Unix systems, it may contain what the hostname command returns, or the\n-   * fully qualified hostname, or another name specified by the user.\n-   */\n-  public static final AttributeKey<String> HOST_NAME = stringKey(\"host.name\");\n-\n-  /** Type of host. For Cloud, this must be the machine type. */\n-  public static final AttributeKey<String> HOST_TYPE = stringKey(\"host.type\");\n-\n-  /** Name of the VM image or OS install the host was instantiated from. */\n-  public static final AttributeKey<String> HOST_IMAGE_NAME = stringKey(\"host.image.name\");\n-\n-  /** VM image ID. For Cloud, this value is from the provider. */\n-  public static final AttributeKey<String> HOST_IMAGE_ID = stringKey(\"host.image.id\");\n-\n-  /**\n-   * The version string of the VM image as defined in [Version\n-   * Attributes](https://github.com/open-telemetry/opentelemetry-specification/tree/master/specification/resource/semantic_conventions#version-attributes).\n-   */\n-  public static final AttributeKey<String> HOST_IMAGE_VERSION = stringKey(\"host.image.version\");\n-\n-  /** The name of the cluster. */\n-  public static final AttributeKey<String> K8S_CLUSTER_NAME = stringKey(\"k8s.cluster.name\");\n-\n-  /** The name of the namespace that the pod is running in. */\n-  public static final AttributeKey<String> K8S_NAMESPACE_NAME = stringKey(\"k8s.namespace.name\");\n-\n-  /** The UID of the Pod. */\n-  public static final AttributeKey<String> K8S_POD_UID = stringKey(\"k8s.pod.uid\");\n-\n-  /** The name of the Pod. */\n-  public static final AttributeKey<String> K8S_POD_NAME = stringKey(\"k8s.pod.name\");\n-\n-  /** The name of the Container in a Pod template. */\n-  public static final AttributeKey<String> K8S_CONTAINER_NAME = stringKey(\"k8s.container.name\");\n-\n-  /** The UID of the ReplicaSet. */\n-  public static final AttributeKey<String> K8S_REPLICASET_UID = stringKey(\"k8s.replicaset.uid\");\n-\n-  /** The name of the ReplicaSet. */\n-  public static final AttributeKey<String> K8S_REPLICASET_NAME = stringKey(\"k8s.replicaset.name\");\n-\n-  /** The UID of the Deployment. */\n-  public static final AttributeKey<String> K8S_DEPLOYMENT_UID = stringKey(\"k8s.deployment.uid\");\n-\n-  /** The name of the Deployment. */\n-  public static final AttributeKey<String> K8S_DEPLOYMENT_NAME = stringKey(\"k8s.deployment.name\");\n-\n-  /** The UID of the StatefulSet. */\n-  public static final AttributeKey<String> K8S_STATEFULSET_UID = stringKey(\"k8s.statefulset.uid\");\n-\n-  /** The name of the StatefulSet. */\n-  public static final AttributeKey<String> K8S_STATEFULSET_NAME = stringKey(\"k8s.statefulset.name\");\n-\n-  /** The UID of the DaemonSet. */\n-  public static final AttributeKey<String> K8S_DAEMONSET_UID = stringKey(\"k8s.daemonset.uid\");\n-\n-  /** The name of the DaemonSet. */\n-  public static final AttributeKey<String> K8S_DAEMONSET_NAME = stringKey(\"k8s.daemonset.name\");\n-\n-  /** The UID of the Job. */\n-  public static final AttributeKey<String> K8S_JOB_UID = stringKey(\"k8s.job.uid\");\n-\n-  /** The name of the Job. */\n-  public static final AttributeKey<String> K8S_JOB_NAME = stringKey(\"k8s.job.name\");\n-\n-  /** The UID of the CronJob. */\n-  public static final AttributeKey<String> K8S_CRONJOB_UID = stringKey(\"k8s.cronjob.uid\");\n-\n-  /** The name of the CronJob. */\n-  public static final AttributeKey<String> K8S_CRONJOB_NAME = stringKey(\"k8s.cronjob.name\");\n-\n-  /** The operating system type. */\n-  public static final AttributeKey<String> OS_TYPE = stringKey(\"os.type\");\n-\n-  /**\n-   * Human readable (not intended to be parsed) OS version information, like e.g. reported by `ver`\n-   * or `lsb_release -a` commands.\n-   */\n-  public static final AttributeKey<String> OS_DESCRIPTION = stringKey(\"os.description\");\n-\n-  /**\n-   * Logical name of the service.\n-   *\n-   * <p>Note: MUST be the same for all instances of horizontally scaled services.\n-   */\n-  public static final AttributeKey<String> SERVICE_NAME = stringKey(\"service.name\");\n-\n-  /**\n-   * A namespace for `service.name`.\n-   *\n-   * <p>Note: A string value having a meaning that helps to distinguish a group of services, for\n-   * example the team name that owns a group of services. `service.name` is expected to be unique\n-   * within the same namespace. If `service.namespace` is not specified in the Resource then\n-   * `service.name` is expected to be unique for all services that have no explicit namespace\n-   * defined (so the empty/unspecified namespace is simply one more valid namespace). Zero-length\n-   * namespace string is assumed equal to unspecified namespace.\n-   */\n-  public static final AttributeKey<String> SERVICE_NAMESPACE = stringKey(\"service.namespace\");\n-\n-  /**\n-   * The string ID of the service instance.\n-   *\n-   * <p>Note: MUST be unique for each instance of the same `service.namespace,service.name` pair (in\n-   * other words `service.namespace,service.name,service.id` triplet MUST be globally unique). The\n-   * ID helps to distinguish instances of the same service that exist at the same time (e.g.\n-   * instances of a horizontally scaled service). It is preferable for the ID to be persistent and\n-   * stay the same for the lifetime of the service instance, however it is acceptable that the ID is\n-   * ephemeral and changes during important lifetime events for the service (e.g. service restarts).\n-   * If the service has no inherent unique ID that can be used as the value of this attribute it is\n-   * recommended to generate a random Version 1 or Version 4 RFC 4122 UUID (services aiming for\n-   * reproducible UUIDs may also use Version 5, see RFC 4122 for more recommendations).\n-   */\n-  public static final AttributeKey<String> SERVICE_INSTANCE_ID = stringKey(\"service.instance.id\");\n-\n-  /** The version string of the service API or implementation. */\n-  public static final AttributeKey<String> SERVICE_VERSION = stringKey(\"service.version\");\n-\n-  /** The name of the telemetry SDK as defined above. */\n-  public static final AttributeKey<String> TELEMETRY_SDK_NAME = stringKey(\"telemetry.sdk.name\");\n-\n-  /** The language of the telemetry SDK. */\n-  public static final AttributeKey<String> TELEMETRY_SDK_LANGUAGE =\n-      stringKey(\"telemetry.sdk.language\");\n-\n-  /** The version string of the telemetry SDK. */\n-  public static final AttributeKey<String> TELEMETRY_SDK_VERSION =\n-      stringKey(\"telemetry.sdk.version\");\n-\n-  /** The version string of the auto instrumentation agent, if used. */\n-  public static final AttributeKey<String> TELEMETRY_AUTO_VERSION =\n-      stringKey(\"telemetry.auto.version\");\n-\n-  /**\n-   * An identifier for the database management system (DBMS) product being used. See below for a\n-   * list of well-known identifiers.\n-   */\n-  public static final AttributeKey<String> DB_SYSTEM = stringKey(\"db.system\");\n-\n-  /**\n-   * The connection string used to connect to the database. It is recommended to remove embedded\n-   * credentials.\n-   */\n-  public static final AttributeKey<String> DB_CONNECTION_STRING = stringKey(\"db.connection_string\");\n-\n-  /** Username for accessing the database. */\n-  public static final AttributeKey<String> DB_USER = stringKey(\"db.user\");\n-\n-  /**\n-   * The fully-qualified class name of the [Java Database Connectivity\n-   * (JDBC)](https://docs.oracle.com/javase/8/docs/technotes/guides/jdbc/) driver used to connect.\n-   */\n-  public static final AttributeKey<String> DB_JDBC_DRIVER_CLASSNAME =\n-      stringKey(\"db.jdbc.driver_classname\");\n-\n-  /**\n-   * If no [tech-specific attribute](#call-level-attributes-for-specific-technologies) is defined,\n-   * this attribute is used to report the name of the database being accessed. For commands that\n-   * switch the database, this should be set to the target database (even if the command fails).\n-   *\n-   * <p>Note: In some SQL databases, the database name to be used is called &#34;schema name&#34;.\n-   */\n-  public static final AttributeKey<String> DB_NAME = stringKey(\"db.name\");\n-\n-  /**\n-   * The database statement being executed.\n-   *\n-   * <p>Note: The value may be sanitized to exclude sensitive information.\n-   */\n-  public static final AttributeKey<String> DB_STATEMENT = stringKey(\"db.statement\");\n-\n-  /**\n-   * The name of the operation being executed, e.g. the [MongoDB command\n-   * name](https://docs.mongodb.com/manual/reference/command/#database-operations) such as\n-   * `findAndModify`.\n-   *\n-   * <p>Note: While it would semantically make sense to set this, e.g., to a SQL keyword like\n-   * `SELECT` or `INSERT`, it is not recommended to attempt any client-side parsing of\n-   * `db.statement` just to get this property (the back end can do that if required).\n-   */\n-  public static final AttributeKey<String> DB_OPERATION = stringKey(\"db.operation\");\n-\n-  /** Remote hostname or similar, see note below. */\n-  public static final AttributeKey<String> NET_PEER_NAME = stringKey(\"net.peer.name\");\n-\n-  /**\n-   * Remote address of the peer (dotted decimal for IPv4 or\n-   * [RFC5952](https://tools.ietf.org/html/rfc5952) for IPv6).\n-   */\n-  public static final AttributeKey<String> NET_PEER_IP = stringKey(\"net.peer.ip\");\n-\n-  /** Remote port number. */\n-  public static final AttributeKey<Long> NET_PEER_PORT = longKey(\"net.peer.port\");\n-\n-  /** Transport protocol used. See note below. */\n-  public static final AttributeKey<String> NET_TRANSPORT = stringKey(\"net.transport\");\n-\n-  /**\n-   * The Microsoft SQL Server [instance\n-   * name](https://docs.microsoft.com/en-us/sql/connect/jdbc/building-the-connection-url?view=sql-server-ver15)\n-   * connecting to. This name is used to determine the port of a named instance.\n-   *\n-   * <p>Note: If setting a `db.mssql.instance_name`, `net.peer.port` is no longer required (but\n-   * still recommended if non-standard).\n-   */\n-  public static final AttributeKey<String> DB_MSSQL_INSTANCE_NAME =\n-      stringKey(\"db.mssql.instance_name\");\n-\n-  /**\n-   * The name of the keyspace being accessed. To be used instead of the generic `db.name` attribute.\n-   */\n-  public static final AttributeKey<String> DB_CASSANDRA_KEYSPACE =\n-      stringKey(\"db.cassandra.keyspace\");\n-\n-  /**\n-   * The [HBase namespace](https://hbase.apache.org/book.html#_namespace) being accessed. To be used\n-   * instead of the generic `db.name` attribute.\n-   */\n-  public static final AttributeKey<String> DB_HBASE_NAMESPACE = stringKey(\"db.hbase.namespace\");\n-\n-  /**\n-   * The index of the database being accessed as used in the [`SELECT`\n-   * command](https://redis.io/commands/select), provided as an integer. To be used instead of the\n-   * generic `db.name` attribute.\n-   */\n-  public static final AttributeKey<Long> DB_REDIS_DATABASE_INDEX =\n-      longKey(\"db.redis.database_index\");\n-\n-  /** The collection being accessed within the database stated in `db.name`. */\n-  public static final AttributeKey<String> DB_MONGODB_COLLECTION =\n-      stringKey(\"db.mongodb.collection\");\n-\n-  /**\n-   * The type of the exception (its fully-qualified class name, if applicable). The dynamic type of\n-   * the exception should be preferred over the static type in languages that support it.\n-   */\n-  public static final AttributeKey<String> EXCEPTION_TYPE = stringKey(\"exception.type\");\n-\n-  /** The exception message. */\n-  public static final AttributeKey<String> EXCEPTION_MESSAGE = stringKey(\"exception.message\");\n-\n-  /**\n-   * A stacktrace as a string in the natural representation for the language runtime. The\n-   * representation is to be determined and documented by each language SIG.\n-   */\n-  public static final AttributeKey<String> EXCEPTION_STACKTRACE = stringKey(\"exception.stacktrace\");\n-\n-  /**\n-   * SHOULD be set to true if the exception event is recorded at a point where it is known that the\n-   * exception is escaping the scope of the span.\n-   *\n-   * <p>Note: An exception is considered to have escaped (or left) the scope of a span, if that span\n-   * is ended while the exception is still logically &#34;in flight&#34;. This may be actually\n-   * &#34;in flight&#34; in some languages (e.g. if the exception is passed to a Context\n-   * manager&#39;s `__exit__` method in Python) but will usually be caught at the point of recording\n-   * the exception in most languages.\n-   *\n-   * <p>It is usually not possible to determine at the point where an exception is thrown whether it\n-   * will escape the scope of a span. However, it is trivial to know that an exception will escape,\n-   * if one checks for an active exception just before ending the span, as done in the [example\n-   * above](#exception-end-example).\n-   *\n-   * <p>It follows that an exception may still escape the scope of the span even if the\n-   * `exception.escaped` attribute was not set or set to false, since the event might have been\n-   * recorded at a time where it was not clear whether the exception will escape.\n-   */\n-  public static final AttributeKey<Boolean> EXCEPTION_ESCAPED = booleanKey(\"exception.escaped\");\n-\n-  /** Type of the trigger on which the function is executed. */\n-  public static final AttributeKey<String> FAAS_TRIGGER = stringKey(\"faas.trigger\");\n-\n-  /** The execution ID of the current function execution. */\n-  public static final AttributeKey<String> FAAS_EXECUTION = stringKey(\"faas.execution\");\n-\n-  /**\n-   * The name of the source on which the triggering operation was performed. For example, in Cloud\n-   * Storage or S3 corresponds to the bucket name, and in Cosmos DB to the database name.\n-   */\n-  public static final AttributeKey<String> FAAS_DOCUMENT_COLLECTION =\n-      stringKey(\"faas.document.collection\");\n-\n-  /** Describes the type of the operation that was performed on the data. */\n-  public static final AttributeKey<String> FAAS_DOCUMENT_OPERATION =\n-      stringKey(\"faas.document.operation\");\n-\n-  /**\n-   * A string containing the time when the data was accessed in the [ISO\n-   * 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in\n-   * [UTC](https://www.w3.org/TR/NOTE-datetime).\n-   */\n-  public static final AttributeKey<String> FAAS_DOCUMENT_TIME = stringKey(\"faas.document.time\");\n-\n-  /**\n-   * The document name/table subjected to the operation. For example, in Cloud Storage or S3 is the\n-   * name of the file, and in Cosmos DB the table name.\n-   */\n-  public static final AttributeKey<String> FAAS_DOCUMENT_NAME = stringKey(\"faas.document.name\");\n-\n-  /** HTTP request method. */\n-  public static final AttributeKey<String> HTTP_METHOD = stringKey(\"http.method\");\n-\n-  /**\n-   * Full HTTP request URL in the form `scheme://host[:port]/path?query[#fragment]`. Usually the\n-   * fragment is not transmitted over HTTP, but if it is known, it should be included nevertheless.\n-   */\n-  public static final AttributeKey<String> HTTP_URL = stringKey(\"http.url\");\n-\n-  /** The full request target as passed in a HTTP request line or equivalent. */\n-  public static final AttributeKey<String> HTTP_TARGET = stringKey(\"http.target\");\n-\n-  /**\n-   * The value of the [HTTP host header](https://tools.ietf.org/html/rfc7230#section-5.4). When the\n-   * header is empty or not present, this attribute should be the same.\n-   */\n-  public static final AttributeKey<String> HTTP_HOST = stringKey(\"http.host\");\n-\n-  /** The URI scheme identifying the used protocol. */\n-  public static final AttributeKey<String> HTTP_SCHEME = stringKey(\"http.scheme\");\n-\n-  /** [HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6). */\n-  public static final AttributeKey<Long> HTTP_STATUS_CODE = longKey(\"http.status_code\");\n-\n-  /**\n-   * Kind of HTTP protocol used.\n-   *\n-   * <p>Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if\n-   * `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n-   */\n-  public static final AttributeKey<String> HTTP_FLAVOR = stringKey(\"http.flavor\");\n-\n-  /**\n-   * Value of the [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3) header sent\n-   * by the client.\n-   */\n-  public static final AttributeKey<String> HTTP_USER_AGENT = stringKey(\"http.user_agent\");\n-\n-  /**\n-   * The size of the request payload body in bytes. This is the number of bytes transferred\n-   * excluding headers and is often, but not always, present as the\n-   * [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using\n-   * transport encoding, this should be the compressed size.\n-   */\n-  public static final AttributeKey<Long> HTTP_REQUEST_CONTENT_LENGTH =\n-      longKey(\"http.request_content_length\");\n-\n-  /**\n-   * The size of the uncompressed request payload body after transport decoding. Not set if\n-   * transport encoding not used.\n-   */\n-  public static final AttributeKey<Long> HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED =\n-      longKey(\"http.request_content_length_uncompressed\");\n-\n-  /**\n-   * The size of the response payload body in bytes. This is the number of bytes transferred\n-   * excluding headers and is often, but not always, present as the\n-   * [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using\n-   * transport encoding, this should be the compressed size.\n-   */\n-  public static final AttributeKey<Long> HTTP_RESPONSE_CONTENT_LENGTH =\n-      longKey(\"http.response_content_length\");\n-\n-  /**\n-   * The size of the uncompressed response payload body after transport decoding. Not set if\n-   * transport encoding not used.\n-   */\n-  public static final AttributeKey<Long> HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED =\n-      longKey(\"http.response_content_length_uncompressed\");\n-\n-  /**\n-   * The primary server name of the matched virtual host. This should be obtained via configuration.\n-   * If no such configuration can be obtained, this attribute MUST NOT be set ( `net.host.name`\n-   * should be used instead).\n-   *\n-   * <p>Note: `http.url` is usually not readily available on the server side but would have to be\n-   * assembled in a cumbersome and sometimes lossy process from other information (see e.g.\n-   * open-telemetry/opentelemetry-python/pull/148). It is thus preferred to supply the raw data that\n-   * is available.\n-   */\n-  public static final AttributeKey<String> HTTP_SERVER_NAME = stringKey(\"http.server_name\");\n-\n-  /** The matched route (path template). */\n-  public static final AttributeKey<String> HTTP_ROUTE = stringKey(\"http.route\");\n-\n-  /**\n-   * The IP address of the original client behind all proxies, if known (e.g. from\n-   * [X-Forwarded-For](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For)).\n-   *\n-   * <p>Note: This is not necessarily the same as `net.peer.ip`, which would identify the\n-   * network-level peer, which may be a proxy.\n-   */\n-  public static final AttributeKey<String> HTTP_CLIENT_IP = stringKey(\"http.client_ip\");\n-\n-  /** Like `net.peer.ip` but for the host IP. Useful in case of a multi-IP host. */\n-  public static final AttributeKey<String> NET_HOST_IP = stringKey(\"net.host.ip\");\n-\n-  /** Like `net.peer.port` but for the host port. */\n-  public static final AttributeKey<Long> NET_HOST_PORT = longKey(\"net.host.port\");\n-\n-  /** Local hostname or similar, see note below. */\n-  public static final AttributeKey<String> NET_HOST_NAME = stringKey(\"net.host.name\");\n-\n-  /** A string identifying the messaging system. */\n-  public static final AttributeKey<String> MESSAGING_SYSTEM = stringKey(\"messaging.system\");\n-\n-  /**\n-   * The message destination name. This might be equal to the span name but is required\n-   * nevertheless.\n-   */\n-  public static final AttributeKey<String> MESSAGING_DESTINATION =\n-      stringKey(\"messaging.destination\");\n-\n-  /** The kind of message destination. */\n-  public static final AttributeKey<String> MESSAGING_DESTINATION_KIND =\n-      stringKey(\"messaging.destination_kind\");\n-\n-  /** A boolean that is true if the message destination is temporary. */\n-  public static final AttributeKey<Boolean> MESSAGING_TEMP_DESTINATION =\n-      booleanKey(\"messaging.temp_destination\");\n-\n-  /** The name of the transport protocol. */\n-  public static final AttributeKey<String> MESSAGING_PROTOCOL = stringKey(\"messaging.protocol\");\n-\n-  /** The version of the transport protocol. */\n-  public static final AttributeKey<String> MESSAGING_PROTOCOL_VERSION =\n-      stringKey(\"messaging.protocol_version\");\n-\n-  /** Connection string. */\n-  public static final AttributeKey<String> MESSAGING_URL = stringKey(\"messaging.url\");\n-\n-  /**\n-   * A value used by the messaging system as an identifier for the message, represented as a string.\n-   */\n-  public static final AttributeKey<String> MESSAGING_MESSAGE_ID = stringKey(\"messaging.message_id\");\n-\n-  /**\n-   * The [conversation ID](#conversations) identifying the conversation to which the message\n-   * belongs, represented as a string. Sometimes called &#34;Correlation ID&#34;.\n-   */\n-  public static final AttributeKey<String> MESSAGING_CONVERSATION_ID =\n-      stringKey(\"messaging.conversation_id\");\n-\n-  /**\n-   * The (uncompressed) size of the message payload in bytes. Also use this attribute if it is\n-   * unknown whether the compressed or uncompressed payload size is reported.\n-   */\n-  public static final AttributeKey<Long> MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES =\n-      longKey(\"messaging.message_payload_size_bytes\");\n-\n-  /** The compressed size of the message payload in bytes. */\n-  public static final AttributeKey<Long> MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES =\n-      longKey(\"messaging.message_payload_compressed_size_bytes\");\n-\n-  /**\n-   * A string containing the function invocation time in the [ISO\n-   * 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in\n-   * [UTC](https://www.w3.org/TR/NOTE-datetime).\n-   */\n-  public static final AttributeKey<String> FAAS_TIME = stringKey(\"faas.time\");\n-\n-  /**\n-   * A string containing the schedule period as [Cron\n-   * Expression](https://docs.oracle.com/cd/E12058_01/doc/doc.1014/e12030/cron_expressions.htm).\n-   */\n-  public static final AttributeKey<String> FAAS_CRON = stringKey(\"faas.cron\");\n-\n-  /**\n-   * A boolean that is true if the serverless function is executed for the first time (aka\n-   * cold-start).\n-   */\n-  public static final AttributeKey<Boolean> FAAS_COLDSTART = booleanKey(\"faas.coldstart\");\n-\n-  /**\n-   * The name of the invoked function.\n-   *\n-   * <p>Note: SHOULD be equal to the `faas.name` resource attribute of the invoked function.\n-   */\n-  public static final AttributeKey<String> FAAS_INVOKED_NAME = stringKey(\"faas.invoked_name\");\n-\n-  /**\n-   * The cloud provider of the invoked function.\n-   *\n-   * <p>Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n-   */\n-  public static final AttributeKey<String> FAAS_INVOKED_PROVIDER =\n-      stringKey(\"faas.invoked_provider\");\n-\n-  /**\n-   * The cloud region of the invoked function.\n-   *\n-   * <p>Note: SHOULD be equal to the `cloud.region` resource attribute of the invoked function.\n-   */\n-  public static final AttributeKey<String> FAAS_INVOKED_REGION = stringKey(\"faas.invoked_region\");\n-\n-  /**\n-   * The [`service.name`](../../resource/semantic_conventions/README.md#service) of the remote\n-   * service. SHOULD be equal to the actual `service.name` resource attribute of the remote service\n-   * if any.\n-   */\n-  public static final AttributeKey<String> PEER_SERVICE = stringKey(\"peer.service\");\n-\n-  /**\n-   * Username or client_id extracted from the access token or\n-   * [Authorization](https://tools.ietf.org/html/rfc7235#section-4.2) header in the inbound request\n-   * from outside the system.\n-   */\n-  public static final AttributeKey<String> ENDUSER_ID = stringKey(\"enduser.id\");\n-\n-  /**\n-   * Actual/assumed role the client is making the request under extracted from token or application\n-   * security context.\n-   */\n-  public static final AttributeKey<String> ENDUSER_ROLE = stringKey(\"enduser.role\");\n-\n-  /**\n-   * Scopes or granted authorities the client currently possesses extracted from token or\n-   * application security context. The value would come from the scope associated with an [OAuth 2.0\n-   * Access Token](https://tools.ietf.org/html/rfc6749#section-3.3) or an attribute value in a [SAML\n-   * 2.0\n-   * Assertion](http://docs.oasis-open.org/security/saml/Post2.0/sstc-saml-tech-overview-2.0.html).\n-   */\n-  public static final AttributeKey<String> ENDUSER_SCOPE = stringKey(\"enduser.scope\");\n-\n-  /**\n-   * A string identifying the kind of message consumption as defined in the [Operation\n-   * names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST\n-   * NOT be set, since the operation can be inferred from the span kind in that case.\n-   */\n-  public static final AttributeKey<String> MESSAGING_OPERATION = stringKey(\"messaging.operation\");\n-\n-  /**\n-   * Message keys in Kafka are used for grouping alike messages to ensure they&#39;re processed on\n-   * the same partition. They differ from `messaging.message_id` in that they&#39;re not unique. If\n-   * the key is `null`, the attribute MUST NOT be set.\n-   *\n-   * <p>Note: If the key type is not string, it&#39;s string representation has to be supplied for\n-   * the attribute. If the key has no unambiguous, canonical string form, don&#39;t include its\n-   * value.\n-   */\n-  public static final AttributeKey<String> MESSAGING_KAFKA_MESSAGE_KEY =\n-      stringKey(\"messaging.kafka.message_key\");\n-\n-  /**\n-   * Name of the Kafka Consumer Group that is handling the message. Only applies to consumers, not\n-   * producers.\n-   */\n-  public static final AttributeKey<String> MESSAGING_KAFKA_CONSUMER_GROUP =\n-      stringKey(\"messaging.kafka.consumer_group\");\n-\n-  /** Client Id for the Consumer or Producer that is handling the message. */\n-  public static final AttributeKey<String> MESSAGING_KAFKA_CLIENT_ID =\n-      stringKey(\"messaging.kafka.client_id\");\n-\n-  /** Partition the message is sent to. */\n-  public static final AttributeKey<Long> MESSAGING_KAFKA_PARTITION =\n-      longKey(\"messaging.kafka.partition\");\n-\n-  /** A boolean that is true if the message is a tombstone. */\n-  public static final AttributeKey<Boolean> MESSAGING_KAFKA_TOMBSTONE =\n-      booleanKey(\"messaging.kafka.tombstone\");\n-\n-  /** A string identifying the remoting system. */\n-  public static final AttributeKey<String> RPC_SYSTEM = stringKey(\"rpc.system\");\n-\n-  /** The full name of the service being called, including its package name, if applicable. */\n-  public static final AttributeKey<String> RPC_SERVICE = stringKey(\"rpc.service\");\n-\n-  /** The name of the method being called, must be equal to the $method part in the span name. */\n-  public static final AttributeKey<String> RPC_METHOD = stringKey(\"rpc.method\");\n-\n-  // Enum definitions\n-  public enum CloudProviderValues {\n-    /** Amazon Web Services. */\n-    AWS(\"aws\"),\n-    /** Microsoft Azure. */\n-    AZURE(\"azure\"),\n-    /** Google Cloud Platform. */\n-    GCP(\"gcp\"),\n-    ;\n-\n-    public static final boolean isClosedEnum = true;\n-    private final String value;\n-\n-    CloudProviderValues(String value) {\n-      this.value = value;\n-    }\n-\n-    public String getValue() {\n-      return value;\n-    }\n-  }\n-\n-  public enum OsTypeValues {\n-    /** Microsoft Windows. */\n-    WINDOWS(\"WINDOWS\"),\n-    /** Linux. */\n-    LINUX(\"LINUX\"),\n-    /** Apple Darwin. */\n-    DARWIN(\"DARWIN\"),\n-    /** FreeBSD. */\n-    FREEBSD(\"FREEBSD\"),\n-    /** NetBSD. */\n-    NETBSD(\"NETBSD\"),\n-    /** OpenBSD. */\n-    OPENBSD(\"OPENBSD\"),\n-    /** DragonFly BSD. */\n-    DRAGONFLYBSD(\"DRAGONFLYBSD\"),\n-    /** HP-UX (Hewlett Packard Unix). */\n-    HPUX(\"HPUX\"),\n-    /** AIX (Advanced Interactive eXecutive). */\n-    AIX(\"AIX\"),\n-    /** Oracle Solaris. */\n-    SOLARIS(\"SOLARIS\"),\n-    /** IBM z/OS. */\n-    ZOS(\"ZOS\"),\n-    ;\n-\n-    public static final boolean isClosedEnum = true;\n-    private final String value;\n-\n-    OsTypeValues(String value) {\n-      this.value = value;\n-    }\n-\n-    public String getValue() {\n-      return value;\n-    }\n-  }\n-\n-  public enum TelemetrySdkLanguageValues {\n-    /** cpp. */\n-    CPP(\"cpp\"),\n-    /** dotnet. */\n-    DOTNET(\"dotnet\"),\n-    /** erlang. */\n-    ERLANG(\"erlang\"),\n-    /** go. */\n-    GO(\"go\"),\n-    /** java. */\n-    JAVA(\"java\"),\n-    /** nodejs. */\n-    NODEJS(\"nodejs\"),\n-    /** php. */\n-    PHP(\"php\"),\n-    /** python. */\n-    PYTHON(\"python\"),\n-    /** ruby. */\n-    RUBY(\"ruby\"),\n-    /** webjs. */\n-    WEBJS(\"webjs\"),\n-    ;\n-\n-    public static final boolean isClosedEnum = true;\n-    private final String value;\n-\n-    TelemetrySdkLanguageValues(String value) {\n-      this.value = value;\n-    }\n-\n-    public String getValue() {\n-      return value;\n-    }\n-  }\n-\n-  public enum DbSystemValues {\n-    /** Some other SQL database. Fallback only. See notes. */\n-    OTHER_SQL(\"other_sql\"),\n-    /** Microsoft SQL Server. */\n-    MSSQL(\"mssql\"),\n-    /** MySQL. */\n-    MYSQL(\"mysql\"),\n-    /** Oracle Database. */\n-    ORACLE(\"oracle\"),\n-    /** IBM Db2. */\n-    DB2(\"db2\"),\n-    /** PostgreSQL. */\n-    POSTGRESQL(\"postgresql\"),\n-    /** Amazon Redshift. */\n-    REDSHIFT(\"redshift\"),\n-    /** Apache Hive. */\n-    HIVE(\"hive\"),\n-    /** Cloudscape. */\n-    CLOUDSCAPE(\"cloudscape\"),\n-    /** HyperSQL DataBase. */\n-    HSQLSB(\"hsqlsb\"),\n-    /** Progress Database. */\n-    PROGRESS(\"progress\"),\n-    /** SAP MaxDB. */\n-    MAXDB(\"maxdb\"),\n-    /** SAP HANA. */\n-    HANADB(\"hanadb\"),\n-    /** Ingres. */\n-    INGRES(\"ingres\"),\n-    /** FirstSQL. */\n-    FIRSTSQL(\"firstsql\"),\n-    /** EnterpriseDB. */\n-    EDB(\"edb\"),\n-    /** InterSystems Cach\u00e9. */\n-    CACHE(\"cache\"),\n-    /** Adabas (Adaptable Database System). */\n-    ADABAS(\"adabas\"),\n-    /** Firebird. */\n-    FIREBIRD(\"firebird\"),\n-    /** Apache Derby. */\n-    DERBY(\"derby\"),\n-    /** FileMaker. */\n-    FILEMAKER(\"filemaker\"),\n-    /** Informix. */\n-    INFORMIX(\"informix\"),\n-    /** InstantDB. */\n-    INSTANTDB(\"instantdb\"),\n-    /** InterBase. */\n-    INTERBASE(\"interbase\"),\n-    /** MariaDB. */\n-    MARIADB(\"mariadb\"),\n-    /** Netezza. */\n-    NETEZZA(\"netezza\"),\n-    /** Pervasive PSQL. */\n-    PERVASIVE(\"pervasive\"),\n-    /** PointBase. */\n-    POINTBASE(\"pointbase\"),\n-    /** SQLite. */\n-    SQLITE(\"sqlite\"),\n-    /** Sybase. */\n-    SYBASE(\"sybase\"),\n-    /** Teradata. */\n-    TERADATA(\"teradata\"),\n-    /** Vertica. */\n-    VERTICA(\"vertica\"),\n-    /** H2. */\n-    H2(\"h2\"),\n-    /** ColdFusion IMQ. */\n-    COLDFUSION(\"coldfusion\"),\n-    /** Apache Cassandra. */\n-    CASSANDRA(\"cassandra\"),\n-    /** Apache HBase. */\n-    HBASE(\"hbase\"),\n-    /** MongoDB. */\n-    MONGODB(\"mongodb\"),\n-    /** Redis. */\n-    REDIS(\"redis\"),\n-    /** Couchbase. */\n-    COUCHBASE(\"couchbase\"),\n-    /** CouchDB. */\n-    COUCHDB(\"couchdb\"),\n-    /** Microsoft Azure Cosmos DB. */\n-    COSMOSDB(\"cosmosdb\"),\n-    /** Amazon DynamoDB. */\n-    DYNAMODB(\"dynamodb\"),\n-    /** Neo4j. */\n-    NEO4J(\"neo4j\"),\n-    ;\n-\n-    public static final boolean isClosedEnum = true;\n-    private final String value;\n-\n-    DbSystemValues(String value) {\n-      this.value = value;\n-    }\n-\n-    public String getValue() {\n-      return value;\n-    }\n-  }\n-\n-  public enum NetTransportValues {\n-    /** IP.TCP. */\n-    IP_TCP(\"IP.TCP\"),\n-    /** IP.UDP. */\n-    IP_UDP(\"IP.UDP\"),\n-    /** Another IP-based protocol. */\n-    IP(\"IP\"),\n-    /** Unix Domain socket. See below. */\n-    UNIX(\"Unix\"),\n-    /** Named or anonymous pipe. See note below. */\n-    PIPE(\"pipe\"),\n-    /** In-process communication. */\n-    INPROC(\"inproc\"),\n-    /** Something else (non IP-based). */\n-    OTHER(\"other\"),\n-    ;\n-\n-    public static final boolean isClosedEnum = false;\n-    private final String value;\n-\n-    NetTransportValues(String value) {\n-      this.value = value;\n-    }\n-\n-    public String getValue() {\n-      return value;\n-    }\n-  }\n-\n-  public enum FaasTriggerValues {\n-    /** A response to some data source operation such as a database or filesystem read/write. */\n-    DATASOURCE(\"datasource\"),\n-    /** To provide an answer to an inbound HTTP request. */\n-    HTTP(\"http\"),\n-    /** A function is set to be executed when messages are sent to a messaging system. */\n-    PUBSUB(\"pubsub\"),\n-    /** A function is scheduled to be executed regularly. */\n-    TIMER(\"timer\"),\n-    /** If none of the others apply. */\n-    OTHER(\"other\"),\n-    ;\n-\n-    public static final boolean isClosedEnum = false;\n-    private final String value;\n-\n-    FaasTriggerValues(String value) {\n-      this.value = value;\n-    }\n-\n-    public String getValue() {\n-      return value;\n-    }\n-  }\n-\n-  public enum FaasDocumentOperationValues {\n-    /** When a new object is created. */\n-    INSERT(\"insert\"),\n-    /** When an object is modified. */\n-    EDIT(\"edit\"),\n-    /** When an object is deleted. */\n-    DELETE(\"delete\"),\n-    ;\n-\n-    public static final boolean isClosedEnum = true;\n-    private final String value;\n-\n-    FaasDocumentOperationValues(String value) {\n-      this.value = value;\n-    }\n-\n-    public String getValue() {\n-      return value;\n-    }\n-  }\n-\n-  public enum HttpFlavorValues {\n-    /** HTTP 1.0. */\n-    HTTP_1_0(\"1.0\"),\n-    /** HTTP 1.1. */\n-    HTTP_1_1(\"1.1\"),\n-    /** HTTP 2. */\n-    HTTP_2_0(\"2.0\"),\n-    /** SPDY protocol. */\n-    SPDY(\"SPDY\"),\n-    /** QUIC protocol. */\n-    QUIC(\"QUIC\"),\n-    ;\n-\n-    public static final boolean isClosedEnum = true;\n-    private final String value;\n-\n-    HttpFlavorValues(String value) {\n-      this.value = value;\n-    }\n-\n-    public String getValue() {\n-      return value;\n-    }\n-  }\n-\n-  public enum MessagingDestinationKindValues {\n-    /** A message sent to a queue. */\n-    QUEUE(\"queue\"),\n-    /** A message sent to a topic. */\n-    TOPIC(\"topic\"),\n-    ;\n-\n-    public static final boolean isClosedEnum = false;\n-    private final String value;\n-\n-    MessagingDestinationKindValues(String value) {\n-      this.value = value;\n-    }\n-\n-    public String getValue() {\n-      return value;\n-    }\n-  }\n-\n-  public enum FaasInvokedProviderValues {\n-    /** Amazon Web Services. */\n-    AWS(\"aws\"),\n-    /** Amazon Web Services. */\n-    AZURE(\"azure\"),\n-    /** Google Cloud Platform. */\n-    GCP(\"gcp\"),\n-    ;\n-\n-    public static final boolean isClosedEnum = true;\n-    private final String value;\n-\n-    FaasInvokedProviderValues(String value) {\n-      this.value = value;\n-    }\n-\n-    public String getValue() {\n-      return value;\n-    }\n-  }\n-\n-  public enum MessagingOperationValues {\n-    /** receive. */\n-    RECEIVE(\"receive\"),\n-    /** process. */\n-    PROCESS(\"process\"),\n-    ;\n-\n-    public static final boolean isClosedEnum = false;\n-    private final String value;\n-\n-    MessagingOperationValues(String value) {\n-      this.value = value;\n-    }\n-\n-    public String getValue() {\n-      return value;\n-    }\n-  }\n-\n-  private SemanticAttributesV2() {}\n-}\n"}}, {"oid": "1339da463d22a2d6071e23b37597bfadecaee17e", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1339da463d22a2d6071e23b37597bfadecaee17e", "message": "Transition to automatically generated class", "committedDate": "2020-10-22T07:34:35Z", "type": "commit"}, {"oid": "586a4eec5d883c2e8b540c054b9eb878962e4abd", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/586a4eec5d883c2e8b540c054b9eb878962e4abd", "message": "Pin to specific commit", "committedDate": "2020-10-22T07:41:41Z", "type": "commit"}, {"oid": "7d1df65fbb724c4ce6431ae9559bb077dc304b79", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/7d1df65fbb724c4ce6431ae9559bb077dc304b79", "message": "Move EXCEPTION_EVENT_NAME inside the template", "committedDate": "2020-10-23T07:23:25Z", "type": "commit"}]}