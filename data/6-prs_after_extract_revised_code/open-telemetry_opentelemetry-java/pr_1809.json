{"pr_number": 1809, "pr_title": "Remove getCurrentContext and withSpan from Tracer", "pr_createdAt": "2020-10-15T14:01:32Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1809", "timeline": [{"oid": "8b02949a09e8dbef9974b44240ce4f90b9660add", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8b02949a09e8dbef9974b44240ce4f90b9660add", "message": "Remove getCurrentContext and withSpan from Tracer\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-10-15T13:55:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU2ODI2NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1809#discussion_r505568265", "bodyText": "Need to remove this, no longer supported :)", "author": "bogdandrutu", "createdAt": "2020-10-15T14:02:22Z", "path": "api/src/main/java/io/opentelemetry/trace/TracingContextUtils.java", "diffHunk": "@@ -66,9 +67,46 @@ public static Span getSpanWithoutDefault(Context context) {\n    * Returns a new {@link Scope} encapsulating the provided {@link Span} added to the current {@code\n    * Context}.\n    *\n+   * <p>Example of usage:\n+   *\n+   * <pre>{@code\n+   * private static Tracer tracer = OpenTelemetry.getTracer();\n+   * void doWork() {\n+   *   // Create a Span as a child of the current Span.\n+   *   Span span = tracer.spanBuilder(\"my span\").startSpan();\n+   *   try (Scope ws = TracingContextUtils.currentContextWith(span)) {\n+   *     TracingContextUtils.getCurrentSpan().addEvent(\"my event\");\n+   *     doSomeOtherWork();  // Here \"span\" is the current Span.\n+   *   }\n+   *   span.end();\n+   * }\n+   * }</pre>\n+   *\n+   * <p>Prior to Java SE 7, you can use a finally block to ensure that a resource is closed", "originalCommit": "8b02949a09e8dbef9974b44240ce4f90b9660add", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU2ODk0Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1809#discussion_r505568946", "bodyText": "Done :)", "author": "bogdandrutu", "createdAt": "2020-10-15T14:03:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU2ODI2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "1c9e74259f04b2e894aa1bee035784e250c8d96e", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/trace/TracingContextUtils.java b/api/src/main/java/io/opentelemetry/trace/TracingContextUtils.java\nindex 3a2f69b9c..6c65e1963 100644\n--- a/api/src/main/java/io/opentelemetry/trace/TracingContextUtils.java\n+++ b/api/src/main/java/io/opentelemetry/trace/TracingContextUtils.java\n\n@@ -82,27 +82,6 @@ public final class TracingContextUtils {\n    * }\n    * }</pre>\n    *\n-   * <p>Prior to Java SE 7, you can use a finally block to ensure that a resource is closed\n-   * regardless of whether the try statement completes normally or abruptly.\n-   *\n-   * <p>Example of usage prior to Java SE7:\n-   *\n-   * <pre>{@code\n-   * private static Tracer tracer = OpenTelemetry.getTracer();\n-   * void doWork() {\n-   *   // Create a Span as a child of the current Span.\n-   *   Span span = tracer.spanBuilder(\"my span\").startSpan();\n-   *   Scope ws = TracingContextUtils.currentContextWith(span);\n-   *   try {\n-   *     TracingContextUtils.getCurrentSpan().addEvent(\"my event\");\n-   *     doSomeOtherWork();  // Here \"span\" is the current Span.\n-   *   } finally {\n-   *     ws.close();\n-   *   }\n-   *   span.end();\n-   * }\n-   * }</pre>\n-   *\n    * @param span the {@link Span} to be added to the current {@code Context}.\n    * @return the {@link Scope} for the updated {@code Context}.\n    */\n"}}, {"oid": "1c9e74259f04b2e894aa1bee035784e250c8d96e", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1c9e74259f04b2e894aa1bee035784e250c8d96e", "message": "Remove old java7 example\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-10-15T14:03:03Z", "type": "commit"}]}