{"pr_number": 1701, "pr_title": "Update for the more restricted span status codes.", "pr_createdAt": "2020-09-24T21:27:01Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1701", "timeline": [{"oid": "8563e0f32142c644266e5f47755173a0a320cf86", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8563e0f32142c644266e5f47755173a0a320cf86", "message": "Update for the more restricted span status codes.", "committedDate": "2020-09-24T21:24:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY3NDc2OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1701#discussion_r494674768", "bodyText": "Do we need the numbers anymore?", "author": "anuraaga", "createdAt": "2020-09-25T00:03:43Z", "path": "api/src/main/java/io/opentelemetry/trace/Status.java", "diffHunk": "@@ -44,163 +43,18 @@\n    * @since 0.1.0\n    */\n   public enum CanonicalCode {\n-    /**\n-     * The operation completed successfully.\n-     *\n-     * @since 0.1.0\n-     */\n-    OK(0),\n-\n-    /**\n-     * The operation was cancelled (typically by the caller).\n-     *\n-     * @since 0.1.0\n-     */\n-    CANCELLED(1),\n-\n-    /**\n-     * Unknown error. An example of where this error may be returned is if a Status value received\n-     * from another address space belongs to an error-space that is not known in this address space.\n-     * Also errors raised by APIs that do not return enough error information may be converted to\n-     * this error.\n-     *\n-     * @since 0.1.0\n-     */\n-    UNKNOWN(2),\n-\n-    /**\n-     * Client specified an invalid argument. Note that this differs from FAILED_PRECONDITION.\n-     * INVALID_ARGUMENT indicates arguments that are problematic regardless of the state of the\n-     * system (e.g., a malformed file name).\n-     *\n-     * @since 0.1.0\n-     */\n-    INVALID_ARGUMENT(3),\n-\n-    /**\n-     * Deadline expired before operation could complete. For operations that change the state of the\n-     * system, this error may be returned even if the operation has completed successfully. For\n-     * example, a successful response from a server could have been delayed long enough for the\n-     * deadline to expire.\n-     *\n-     * @since 0.1.0\n-     */\n-    DEADLINE_EXCEEDED(4),\n-\n-    /**\n-     * Some requested entity (e.g., file or directory) was not found.\n-     *\n-     * @since 0.1.0\n-     */\n-    NOT_FOUND(5),\n-\n-    /**\n-     * Some entity that we attempted to create (e.g., file or directory) already exists.\n-     *\n-     * @since 0.1.0\n-     */\n-    ALREADY_EXISTS(6),\n-\n-    /**\n-     * The caller does not have permission to execute the specified operation. PERMISSION_DENIED\n-     * must not be used for rejections caused by exhausting some resource (use RESOURCE_EXHAUSTED\n-     * instead for those errors). PERMISSION_DENIED must not be used if the caller cannot be\n-     * identified (use UNAUTHENTICATED instead for those errors).\n-     *\n-     * @since 0.1.0\n-     */\n-    PERMISSION_DENIED(7),\n-\n-    /**\n-     * Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system\n-     * is out of space.\n-     *\n-     * @since 0.1.0\n-     */\n-    RESOURCE_EXHAUSTED(8),\n-\n-    /**\n-     * Operation was rejected because the system is not in a state required for the operation's\n-     * execution. For example, directory to be deleted may be non-empty, an rmdir operation is\n-     * applied to a non-directory, etc.\n-     *\n-     * <p>A litmus test that may help a service implementor in deciding between FAILED_PRECONDITION,\n-     * ABORTED, and UNAVAILABLE: (a) Use UNAVAILABLE if the client can retry just the failing call.\n-     * (b) Use ABORTED if the client should retry at a higher-level (e.g., restarting a\n-     * read-modify-write sequence). (c) Use FAILED_PRECONDITION if the client should not retry until\n-     * the system state has been explicitly fixed. E.g., if an \"rmdir\" fails because the directory\n-     * is non-empty, FAILED_PRECONDITION should be returned since the client should not retry unless\n-     * they have first fixed up the directory by deleting files from it.\n-     *\n-     * @since 0.1.0\n-     */\n-    FAILED_PRECONDITION(9),\n-\n-    /**\n-     * The operation was aborted, typically due to a concurrency issue like sequencer check\n-     * failures, transaction aborts, etc.\n-     *\n-     * <p>See litmus test above for deciding between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE.\n-     *\n-     * @since 0.1.0\n-     */\n-    ABORTED(10),\n \n     /**\n-     * Operation was attempted past the valid range. E.g., seeking or reading past end of file.\n-     *\n-     * <p>Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed if the system\n-     * state changes. For example, a 32-bit file system will generate INVALID_ARGUMENT if asked to\n-     * read at an offset that is not in the range [0,2^32-1], but it will generate OUT_OF_RANGE if\n-     * asked to read from an offset past the current file size.\n-     *\n-     * <p>There is a fair bit of overlap between FAILED_PRECONDITION and OUT_OF_RANGE. We recommend\n-     * using OUT_OF_RANGE (the more specific error) when it applies so that callers who are\n-     * iterating through a space can easily look for an OUT_OF_RANGE error to detect when they are\n-     * done.\n-     *\n-     * @since 0.1.0\n+     * The operation has been validated by an Application developers or Operator to have completed\n+     * successfully.\n      */\n-    OUT_OF_RANGE(11),\n-\n-    /**\n-     * Operation is not implemented or not supported/enabled in this service.\n-     *\n-     * @since 0.1.0\n-     */\n-    UNIMPLEMENTED(12),\n-\n-    /**\n-     * Internal errors. Means some invariants expected by underlying system has been broken. If you\n-     * see one of these errors, something is very broken.\n-     *\n-     * @since 0.1.0\n-     */\n-    INTERNAL(13),\n-\n-    /**\n-     * The service is currently unavailable. This is a most likely a transient condition and may be\n-     * corrected by retrying with a backoff.\n-     *\n-     * <p>See litmus test above for deciding between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE.\n-     *\n-     * @since 0.1.0\n-     */\n-    UNAVAILABLE(14),\n+    OK(0),", "originalCommit": "8563e0f32142c644266e5f47755173a0a320cf86", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY4NzEyOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1701#discussion_r494687128", "bodyText": "I'm honestly not sure. I noticed that in the Jaeger mapping, we directly just copy that code over as a status code. Is that correct? No idea, either. I'd prefer to get rid of the numeric codes, and the accessor for them, but we need to decide what to do with the existing mappings.", "author": "jkwatson", "createdAt": "2020-09-25T00:49:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY3NDc2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQwNDM4Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1701#discussion_r495404386", "bodyText": "Got it - we can change this latter anyways.", "author": "anuraaga", "createdAt": "2020-09-26T03:08:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY3NDc2OA=="}], "type": "inlineReview", "revised_code": {"commit": "73c0db39cd1025a9f963d753d309cb5f59ea1bdb", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/trace/Status.java b/api/src/main/java/io/opentelemetry/trace/Status.java\nindex b0af799e2..6b47eeed2 100644\n--- a/api/src/main/java/io/opentelemetry/trace/Status.java\n+++ b/api/src/main/java/io/opentelemetry/trace/Status.java\n\n@@ -51,10 +51,10 @@ public final class Status {\n     OK(0),\n \n     /** The default status. */\n-    UNSET(17),\n+    UNSET(1),\n \n     /** The operation contains an error. */\n-    ERROR(18);\n+    ERROR(2);\n \n     private final int value;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDgwNTI2MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1701#discussion_r494805260", "bodyText": "I realised that I still an open question about this use case: open-telemetry/opentelemetry-specification#1008", "author": "iNikem", "createdAt": "2020-09-25T07:40:10Z", "path": "extensions/trace_utils/src/main/java/io/opentelemetry/extensions/trace/CurrentSpanUtils.java", "diffHunk": "@@ -121,7 +121,7 @@ public V call() throws Exception {\n \n   private static void setErrorStatus(Span span, Throwable t) {\n     span.setStatus(\n-        Status.UNKNOWN.withDescription(\n+        Status.ERROR.withDescription(", "originalCommit": "8563e0f32142c644266e5f47755173a0a320cf86", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA1NzIyNw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1701#discussion_r495057227", "bodyText": "I'd be happy to revisit this when the issue is clarified. Meanwhile, it does seem like approximately preserving the existing behavior is a good thing for now. And, as I commented on that issue, I think the intent with recordException is that it's an error, most commonly.", "author": "jkwatson", "createdAt": "2020-09-25T15:15:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDgwNTI2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA1Nzc1Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1701#discussion_r496057753", "bodyText": "When that gets merged, I'll create an issue to address it here. Meanwhile, keeping the existing behavior seems like the right decision for this PR.", "author": "jkwatson", "createdAt": "2020-09-28T15:53:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDgwNTI2MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ2NzY0OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1701#discussion_r495467649", "bodyText": "How did we come with this numbers? See https://github.com/open-telemetry/opentelemetry-proto/pull/224/files and maybe we should follow the same numbers so translation to otlp is just direct mapping.", "author": "bogdandrutu", "createdAt": "2020-09-26T15:30:58Z", "path": "api/src/main/java/io/opentelemetry/trace/Status.java", "diffHunk": "@@ -44,163 +43,18 @@\n    * @since 0.1.0\n    */\n   public enum CanonicalCode {\n-    /**\n-     * The operation completed successfully.\n-     *\n-     * @since 0.1.0\n-     */\n-    OK(0),\n-\n-    /**\n-     * The operation was cancelled (typically by the caller).\n-     *\n-     * @since 0.1.0\n-     */\n-    CANCELLED(1),\n-\n-    /**\n-     * Unknown error. An example of where this error may be returned is if a Status value received\n-     * from another address space belongs to an error-space that is not known in this address space.\n-     * Also errors raised by APIs that do not return enough error information may be converted to\n-     * this error.\n-     *\n-     * @since 0.1.0\n-     */\n-    UNKNOWN(2),\n-\n-    /**\n-     * Client specified an invalid argument. Note that this differs from FAILED_PRECONDITION.\n-     * INVALID_ARGUMENT indicates arguments that are problematic regardless of the state of the\n-     * system (e.g., a malformed file name).\n-     *\n-     * @since 0.1.0\n-     */\n-    INVALID_ARGUMENT(3),\n-\n-    /**\n-     * Deadline expired before operation could complete. For operations that change the state of the\n-     * system, this error may be returned even if the operation has completed successfully. For\n-     * example, a successful response from a server could have been delayed long enough for the\n-     * deadline to expire.\n-     *\n-     * @since 0.1.0\n-     */\n-    DEADLINE_EXCEEDED(4),\n-\n-    /**\n-     * Some requested entity (e.g., file or directory) was not found.\n-     *\n-     * @since 0.1.0\n-     */\n-    NOT_FOUND(5),\n-\n-    /**\n-     * Some entity that we attempted to create (e.g., file or directory) already exists.\n-     *\n-     * @since 0.1.0\n-     */\n-    ALREADY_EXISTS(6),\n-\n-    /**\n-     * The caller does not have permission to execute the specified operation. PERMISSION_DENIED\n-     * must not be used for rejections caused by exhausting some resource (use RESOURCE_EXHAUSTED\n-     * instead for those errors). PERMISSION_DENIED must not be used if the caller cannot be\n-     * identified (use UNAUTHENTICATED instead for those errors).\n-     *\n-     * @since 0.1.0\n-     */\n-    PERMISSION_DENIED(7),\n-\n-    /**\n-     * Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system\n-     * is out of space.\n-     *\n-     * @since 0.1.0\n-     */\n-    RESOURCE_EXHAUSTED(8),\n-\n-    /**\n-     * Operation was rejected because the system is not in a state required for the operation's\n-     * execution. For example, directory to be deleted may be non-empty, an rmdir operation is\n-     * applied to a non-directory, etc.\n-     *\n-     * <p>A litmus test that may help a service implementor in deciding between FAILED_PRECONDITION,\n-     * ABORTED, and UNAVAILABLE: (a) Use UNAVAILABLE if the client can retry just the failing call.\n-     * (b) Use ABORTED if the client should retry at a higher-level (e.g., restarting a\n-     * read-modify-write sequence). (c) Use FAILED_PRECONDITION if the client should not retry until\n-     * the system state has been explicitly fixed. E.g., if an \"rmdir\" fails because the directory\n-     * is non-empty, FAILED_PRECONDITION should be returned since the client should not retry unless\n-     * they have first fixed up the directory by deleting files from it.\n-     *\n-     * @since 0.1.0\n-     */\n-    FAILED_PRECONDITION(9),\n-\n-    /**\n-     * The operation was aborted, typically due to a concurrency issue like sequencer check\n-     * failures, transaction aborts, etc.\n-     *\n-     * <p>See litmus test above for deciding between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE.\n-     *\n-     * @since 0.1.0\n-     */\n-    ABORTED(10),\n \n     /**\n-     * Operation was attempted past the valid range. E.g., seeking or reading past end of file.\n-     *\n-     * <p>Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed if the system\n-     * state changes. For example, a 32-bit file system will generate INVALID_ARGUMENT if asked to\n-     * read at an offset that is not in the range [0,2^32-1], but it will generate OUT_OF_RANGE if\n-     * asked to read from an offset past the current file size.\n-     *\n-     * <p>There is a fair bit of overlap between FAILED_PRECONDITION and OUT_OF_RANGE. We recommend\n-     * using OUT_OF_RANGE (the more specific error) when it applies so that callers who are\n-     * iterating through a space can easily look for an OUT_OF_RANGE error to detect when they are\n-     * done.\n-     *\n-     * @since 0.1.0\n+     * The operation has been validated by an Application developers or Operator to have completed\n+     * successfully.\n      */\n-    OUT_OF_RANGE(11),\n-\n-    /**\n-     * Operation is not implemented or not supported/enabled in this service.\n-     *\n-     * @since 0.1.0\n-     */\n-    UNIMPLEMENTED(12),\n-\n-    /**\n-     * Internal errors. Means some invariants expected by underlying system has been broken. If you\n-     * see one of these errors, something is very broken.\n-     *\n-     * @since 0.1.0\n-     */\n-    INTERNAL(13),\n-\n-    /**\n-     * The service is currently unavailable. This is a most likely a transient condition and may be\n-     * corrected by retrying with a backoff.\n-     *\n-     * <p>See litmus test above for deciding between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE.\n-     *\n-     * @since 0.1.0\n-     */\n-    UNAVAILABLE(14),\n+    OK(0),\n \n-    /**\n-     * Unrecoverable data loss or corruption.\n-     *\n-     * @since 0.1.0\n-     */\n-    DATA_LOSS(15),\n+    /** The default status. */\n+    UNSET(17),", "originalCommit": "8563e0f32142c644266e5f47755173a0a320cf86", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ3Mjc5Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1701#discussion_r495472792", "bodyText": "I made them up. I was planning on fixing once the proto change was merged.", "author": "jkwatson", "createdAt": "2020-09-26T16:27:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ2NzY0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ3NDgxNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1701#discussion_r495474815", "bodyText": "I'll update this PR to match what is in the proto PR, now that it looks like there aren't any more changes happening.", "author": "jkwatson", "createdAt": "2020-09-26T16:52:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ2NzY0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY4MzUwMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1701#discussion_r495683503", "bodyText": "I think the numbers are now matching the deprecated code, but we should update to 0, 1, 2 here I believe.", "author": "anuraaga", "createdAt": "2020-09-28T04:30:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ2NzY0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjAxNzIyMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1701#discussion_r496017223", "bodyText": "yes. will do...that was my intent. :)", "author": "jkwatson", "createdAt": "2020-09-28T15:06:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ2NzY0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA1Nzg4OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1701#discussion_r496057889", "bodyText": "done", "author": "jkwatson", "createdAt": "2020-09-28T15:53:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ2NzY0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "73c0db39cd1025a9f963d753d309cb5f59ea1bdb", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/trace/Status.java b/api/src/main/java/io/opentelemetry/trace/Status.java\nindex b0af799e2..6b47eeed2 100644\n--- a/api/src/main/java/io/opentelemetry/trace/Status.java\n+++ b/api/src/main/java/io/opentelemetry/trace/Status.java\n\n@@ -51,10 +51,10 @@ public final class Status {\n     OK(0),\n \n     /** The default status. */\n-    UNSET(17),\n+    UNSET(1),\n \n     /** The operation contains an error. */\n-    ERROR(18);\n+    ERROR(2);\n \n     private final int value;\n \n"}}, {"oid": "73c0db39cd1025a9f963d753d309cb5f59ea1bdb", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/73c0db39cd1025a9f963d753d309cb5f59ea1bdb", "message": "Update status codes to match the proposed proto codes", "committedDate": "2020-09-28T15:51:27Z", "type": "commit"}]}