{"pr_number": 1304, "pr_title": "Immutable Attributes and Labels", "pr_createdAt": "2020-06-03T21:44:26Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304", "timeline": [{"oid": "05e6ec8b7ced4972b45d423cc892f057d7d40734", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/05e6ec8b7ced4972b45d423cc892f057d7d40734", "message": "prototype for class to replace Map<String, AttributeValue)", "committedDate": "2020-06-01T21:14:41Z", "type": "commit"}, {"oid": "36c6a6777739302504d5882321a937cc85085ff3", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/36c6a6777739302504d5882321a937cc85085ff3", "message": "safely copy the builder's data", "committedDate": "2020-06-01T21:14:42Z", "type": "commit"}, {"oid": "03e197333ceffe54daf8615aeab502eaf953cfb1", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/03e197333ceffe54daf8615aeab502eaf953cfb1", "message": "add the empty constant", "committedDate": "2020-06-01T21:14:42Z", "type": "commit"}, {"oid": "24bd6f711b86c2b2e75a5604bc02e98f34851c2d", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/24bd6f711b86c2b2e75a5604bc02e98f34851c2d", "message": "optimization for attributes with a single key/value", "committedDate": "2020-06-01T21:14:42Z", "type": "commit"}, {"oid": "785b571756fb81dbf6216ef8b11443b47d167761", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/785b571756fb81dbf6216ef8b11443b47d167761", "message": "Add an iterator/iterable and some simple tests", "committedDate": "2020-06-01T21:14:42Z", "type": "commit"}, {"oid": "9878dd353185d640253056b9775aef9e2f03a1cf", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9878dd353185d640253056b9775aef9e2f03a1cf", "message": "fix animalsniffer complaint", "committedDate": "2020-06-01T21:14:42Z", "type": "commit"}, {"oid": "f4c1d5bf3884257ab41d042afe9dea21ed20b4e1", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f4c1d5bf3884257ab41d042afe9dea21ed20b4e1", "message": "tests for de-duping and order-independent equality, plus removal of possibly unneeded access methods.", "committedDate": "2020-06-01T21:14:42Z", "type": "commit"}, {"oid": "9c0e4d9087c909f36643efdc4fd0fa85b9aaa0ef", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9c0e4d9087c909f36643efdc4fd0fa85b9aaa0ef", "message": "clean up the sort&filter method a tad", "committedDate": "2020-06-01T21:14:42Z", "type": "commit"}, {"oid": "e3bb6472fd7f0da4abb44ca3a4199092f5c90cdf", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e3bb6472fd7f0da4abb44ca3a4199092f5c90cdf", "message": "replace the iterator with a foreach method", "committedDate": "2020-06-01T21:14:42Z", "type": "commit"}, {"oid": "931e45c15320f2507239025d6be2fc2082a3a65a", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/931e45c15320f2507239025d6be2fc2082a3a65a", "message": "Make the Attributes parameterized by the value type.", "committedDate": "2020-06-01T21:14:42Z", "type": "commit"}, {"oid": "b0621b70aeb9fb4b7898ef2841ea19af9e9ad5e0", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b0621b70aeb9fb4b7898ef2841ea19af9e9ad5e0", "message": "Add basic javadoc", "committedDate": "2020-06-01T22:23:46Z", "type": "commit"}, {"oid": "e53287a3d5a71ec3575a747daec4110ec6159b09", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e53287a3d5a71ec3575a747daec4110ec6159b09", "message": "remove helper class; add a simple test for the builder; make the tests more robust", "committedDate": "2020-06-02T20:03:43Z", "type": "commit"}, {"oid": "1e98afea7388eaa5d6e09d0f67b09c0501b6ac77", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1e98afea7388eaa5d6e09d0f67b09c0501b6ac77", "message": "Add a varargs method for creating an arbitrary number of key/value pairs.", "committedDate": "2020-06-02T21:41:01Z", "type": "commit"}, {"oid": "6d1b6a978824b856c57e816d96a2aaa7adf46393", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/6d1b6a978824b856c57e816d96a2aaa7adf46393", "message": "static import the check method, for consistency", "committedDate": "2020-06-02T22:18:01Z", "type": "commit"}, {"oid": "c4a9a8442383ab29c562952d729d651c55129ab2", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c4a9a8442383ab29c562952d729d651c55129ab2", "message": "Refactor to have an interface and two implementations, with some shared logic.", "committedDate": "2020-06-03T21:42:57Z", "type": "commit"}, {"oid": "7b0f140e27cd2ed444bbbf7cbd25b06df21d1554", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/7b0f140e27cd2ed444bbbf7cbd25b06df21d1554", "message": "fix an accidental rename", "committedDate": "2020-06-03T21:47:37Z", "type": "commit"}, {"oid": "8ab0b74ccf1fd801788a8ac5862f54ab3b955ce4", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8ab0b74ccf1fd801788a8ac5862f54ab3b955ce4", "message": "really fix it for real", "committedDate": "2020-06-03T21:48:24Z", "type": "commit"}, {"oid": "9ec6c74b383b272a3bd6d6ed8240ed6dc433bc56", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9ec6c74b383b272a3bd6d6ed8240ed6dc433bc56", "message": "add a few more tests", "committedDate": "2020-06-03T22:32:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTExMDI5Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r435110293", "bodyText": "Thanks! The API in this PR LGTM. Only comment is may stick with putAttribute instead of add, more familiar since it's inspired by Java's Map and conveys that duplicates are deduped.", "author": "anuraaga", "createdAt": "2020-06-04T09:16:10Z", "path": "api/src/main/java/io/opentelemetry/common/Attributes.java", "diffHunk": "@@ -0,0 +1,251 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import static io.opentelemetry.common.AttributeValue.arrayAttributeValue;\n+import static io.opentelemetry.common.AttributeValue.booleanAttributeValue;\n+import static io.opentelemetry.common.AttributeValue.doubleAttributeValue;\n+import static io.opentelemetry.common.AttributeValue.longAttributeValue;\n+import static io.opentelemetry.common.AttributeValue.stringAttributeValue;\n+\n+import com.google.auto.value.AutoValue;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * An immutable container for attributes. The type parameter denotes the type of the values of the\n+ * attributes.\n+ */\n+@Immutable\n+public abstract class Attributes implements ImmutableKeyValuePairs<AttributeValue> {\n+  private static final Attributes EMPTY =\n+      new Attributes() {\n+        @Override\n+        public void forEach(KeyValueConsumer<AttributeValue> consumer) {\n+          // no-op\n+        }\n+      };\n+\n+  private static Attributes sortAndFilter(Object... data) {\n+    return new AutoValue_Attributes_ArrayBackedAttributes(Helper.sortAndFilter(data));\n+  }\n+\n+  /** An {@link Attributes} instance with no attributes. */\n+  public static Attributes empty() {\n+    return EMPTY;\n+  }\n+\n+  /** An {@link Attributes} instance with a single key-value pair. */\n+  public static Attributes of(String key, AttributeValue value) {\n+    return sortAndFilter(key, value);\n+  }\n+\n+  /**\n+   * An {@link Attributes} instance with two key-value pairs. Order of the keys is not preserved.\n+   * Duplicate keys will be removed.\n+   */\n+  public static Attributes of(\n+      String key1, AttributeValue value1, String key2, AttributeValue value2) {\n+    return sortAndFilter(key1, value1, key2, value2);\n+  }\n+\n+  /**\n+   * An {@link Attributes} instance with three key-value pairs. Order of the keys is not preserved.\n+   * Duplicate keys will be removed.\n+   */\n+  public static Attributes of(\n+      String key1,\n+      AttributeValue value1,\n+      String key2,\n+      AttributeValue value2,\n+      String key3,\n+      AttributeValue value3) {\n+    return sortAndFilter(key1, value1, key2, value2, key3, value3);\n+  }\n+\n+  /**\n+   * An {@link Attributes} instance with four key-value pairs. Order of the keys is not preserved.\n+   * Duplicate keys will be removed.\n+   */\n+  public static Attributes of(\n+      String key1,\n+      AttributeValue value1,\n+      String key2,\n+      AttributeValue value2,\n+      String key3,\n+      AttributeValue value3,\n+      String key4,\n+      AttributeValue value4) {\n+    return sortAndFilter(key1, value1, key2, value2, key3, value3, key4, value4);\n+  }\n+\n+  /**\n+   * An {@link Attributes} instance with five key-value pairs. Order of the keys is not preserved.\n+   * Duplicate keys will be removed.\n+   */\n+  public static Attributes of(\n+      String key1,\n+      AttributeValue value1,\n+      String key2,\n+      AttributeValue value2,\n+      String key3,\n+      AttributeValue value3,\n+      String key4,\n+      AttributeValue value4,\n+      String key5,\n+      AttributeValue value5) {\n+    return sortAndFilter(\n+        key1, value1,\n+        key2, value2,\n+        key3, value3,\n+        key4, value4,\n+        key5, value5);\n+  }\n+\n+  /** Creates a new {@link Builder} instance for creating arbitrary {@link Attributes}. */\n+  public static Builder newBuilder() {\n+    return new Builder();\n+  }\n+\n+  @AutoValue\n+  @Immutable\n+  abstract static class ArrayBackedAttributes extends Attributes {\n+    abstract List<Object> data();\n+\n+    ArrayBackedAttributes() {}\n+\n+    @Override\n+    public void forEach(KeyValueConsumer<AttributeValue> consumer) {\n+      for (int i = 0; i < data().size(); i++) {\n+        consumer.consume((String) data().get(i), (AttributeValue) data().get(++i));\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Enables the creation of an {@link Attributes} instance with an arbitrary number of key-value\n+   * pairs.\n+   */\n+  public static class Builder {\n+    private final List<Object> data = new ArrayList<>();\n+\n+    /** Create the {@link Attributes} from this. */\n+    public Attributes build() {\n+      return sortAndFilter(data.toArray());\n+    }\n+\n+    /**\n+     * Add a bare {@link AttributeValue} to this.\n+     *\n+     * @return this Builder\n+     */\n+    public Builder addAttribute(String key, AttributeValue value) {\n+      data.add(key);\n+      data.add(value);\n+      return this;\n+    }\n+\n+    /**\n+     * Add a String {@link AttributeValue} to this.\n+     *\n+     * @return this Builder\n+     */\n+    public Builder addAttribute(String key, String value) {\n+      data.add(key);\n+      data.add(stringAttributeValue(value));\n+      return this;\n+    }\n+\n+    /**\n+     * Add a long {@link AttributeValue} to this.\n+     *\n+     * @return this Builder\n+     */\n+    public Builder addAttribute(String key, long value) {", "originalCommit": "9ec6c74b383b272a3bd6d6ed8240ed6dc433bc56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMyMzA3OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r435323078", "bodyText": "I'm fine with put*. I'll update.", "author": "jkwatson", "createdAt": "2020-06-04T14:55:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTExMDI5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMyOTI1Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r435329252", "bodyText": "I'm wondering if we should have setAttribute() instead, to align this with Span.setAttribute(). No strong feeling though.", "author": "carlosalberto", "createdAt": "2020-06-04T15:03:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTExMDI5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQxNzAzMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r435417031", "bodyText": "I'm totally fine, either way. @anuraaga , what do you think about setAttribute, rather than putAttribute ?", "author": "jkwatson", "createdAt": "2020-06-04T17:11:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTExMDI5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUxMTExNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r435511115", "bodyText": "+1 for setAttribute, to align with Span.setAttribute", "author": "trask", "createdAt": "2020-06-04T19:51:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTExMDI5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUxMTc5MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r435511790", "bodyText": "ok, I'll assume @anuraaga is ok, and if not, we can change it.", "author": "jkwatson", "createdAt": "2020-06-04T19:52:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTExMDI5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUyODMzNw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r435528337", "bodyText": "done.", "author": "jkwatson", "createdAt": "2020-06-04T20:25:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTExMDI5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk4NzA0MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r435987041", "bodyText": "Sorry for the late SGTM", "author": "anuraaga", "createdAt": "2020-06-05T15:12:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTExMDI5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "423116f2c97d18c2756eebc487c43b5b65388ca8", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/common/Attributes.java b/api/src/main/java/io/opentelemetry/common/Attributes.java\nindex 7544e442c..fd42ebe2c 100644\n--- a/api/src/main/java/io/opentelemetry/common/Attributes.java\n+++ b/api/src/main/java/io/opentelemetry/common/Attributes.java\n\n@@ -154,7 +154,7 @@ public abstract class Attributes implements ImmutableKeyValuePairs<AttributeValu\n      *\n      * @return this Builder\n      */\n-    public Builder addAttribute(String key, AttributeValue value) {\n+    public Builder setAttribute(String key, AttributeValue value) {\n       data.add(key);\n       data.add(value);\n       return this;\n"}}, {"oid": "423116f2c97d18c2756eebc487c43b5b65388ca8", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/423116f2c97d18c2756eebc487c43b5b65388ca8", "message": "preserve the `setAttribute` names from existing Span API", "committedDate": "2020-06-04T17:35:12Z", "type": "commit"}, {"oid": "4fbfef2add43fc6622dea36be2005e89a11dee46", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/4fbfef2add43fc6622dea36be2005e89a11dee46", "message": "Replace the treemap sorting and filtering with a quicksort and post-filter.", "committedDate": "2020-06-04T21:30:56Z", "type": "commit"}, {"oid": "029d3e24250237bd8d24a1c15aaab278f8040889", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/029d3e24250237bd8d24a1c15aaab278f8040889", "message": "remove an unneeded list.", "committedDate": "2020-06-04T21:38:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkxMzA1MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r435913051", "bodyText": "Guessing you wrote this you don't want to use Arrays.sort(), which uses merge sort (and more memory)? If that's the case, adding a note for further reference would be nice.", "author": "carlosalberto", "createdAt": "2020-06-05T13:15:53Z", "path": "api/src/main/java/io/opentelemetry/common/ImmutableKeyValuePairs.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import static io.opentelemetry.internal.Utils.checkArgument;\n+import static io.opentelemetry.internal.Utils.checkNotNull;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * An immutable set of key-value pairs. Keys are only {@link String} typed. Can be iterated over\n+ * using the {@link #forEach(KeyValueConsumer)} method.\n+ *\n+ * @param <V> The type of the values contained in this.\n+ * @see Labels\n+ * @see Attributes\n+ */\n+@Immutable\n+public interface ImmutableKeyValuePairs<V> {\n+  /** Iterates over all the key-value pairs of attributes contained by this instance. */\n+  void forEach(KeyValueConsumer<V> consumer);\n+\n+  /**\n+   * Used for iterating over the key-value pairs contained by an {@link ImmutableKeyValuePairs}\n+   * instance.\n+   */\n+  interface KeyValueConsumer<T> {\n+    void consume(String key, T value);\n+  }\n+\n+  class Helper {\n+    private Helper() {}\n+\n+    static <T> List<Object> sortAndFilter(Object[] data) {\n+      checkArgument(\n+          data.length % 2 == 0, \"You must provide an even number of key/value pair arguments.\");\n+\n+      quickSort(data, 0, data.length - 2);\n+      return dedupe(data);\n+    }\n+\n+    private static void quickSort(Object[] data, int leftIndex, int rightIndex) {", "originalCommit": "029d3e24250237bd8d24a1c15aaab278f8040889", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk3NDQ2NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r435974464", "bodyText": "I don't know of a way to use Arrays.sort() to sort only based on every other value, and keep the pairs together.", "author": "jkwatson", "createdAt": "2020-06-05T14:51:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkxMzA1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAwNDY4OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r436004689", "bodyText": "Oooh, right. I totally forgot about that part ;)", "author": "carlosalberto", "createdAt": "2020-06-05T15:40:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkxMzA1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "136fbe5a16c02f2de6fdd19a3ba339af165495a2", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/common/ImmutableKeyValuePairs.java b/api/src/main/java/io/opentelemetry/common/ImmutableKeyValuePairs.java\nindex e40302ee7..089b895cb 100644\n--- a/api/src/main/java/io/opentelemetry/common/ImmutableKeyValuePairs.java\n+++ b/api/src/main/java/io/opentelemetry/common/ImmutableKeyValuePairs.java\n\n@@ -20,6 +20,7 @@ import static io.opentelemetry.internal.Utils.checkArgument;\n import static io.opentelemetry.internal.Utils.checkNotNull;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n import javax.annotation.concurrent.Immutable;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk3MDg3Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r435970873", "bodyText": "This can be package protected, no need to expose it public. Also why do you not make this an abstract class with all the utils inside it. It will remove some duplicate code between Labels and Attributes.", "author": "bogdandrutu", "createdAt": "2020-06-05T14:45:58Z", "path": "api/src/main/java/io/opentelemetry/common/ImmutableKeyValuePairs.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import static io.opentelemetry.internal.Utils.checkArgument;\n+import static io.opentelemetry.internal.Utils.checkNotNull;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * An immutable set of key-value pairs. Keys are only {@link String} typed. Can be iterated over\n+ * using the {@link #forEach(KeyValueConsumer)} method.\n+ *\n+ * @param <V> The type of the values contained in this.\n+ * @see Labels\n+ * @see Attributes\n+ */\n+@Immutable\n+public interface ImmutableKeyValuePairs<V> {", "originalCommit": "029d3e24250237bd8d24a1c15aaab278f8040889", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk3NTQ2Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r435975466", "bodyText": "I'll give it a try. Originally, I was hoping this could be a single-method-interface, and hence implementable as a lambda, but that won't be possible once we add isEmpty() and size().", "author": "jkwatson", "createdAt": "2020-06-05T14:53:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk3MDg3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk3OTE3Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r435979177", "bodyText": "Also, if we make this interface package-protected, we'll need to move the consumer interface up out of it. Not a big deal, but it is a consequence.", "author": "jkwatson", "createdAt": "2020-06-05T14:59:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk3MDg3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAyMzA1OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r436023059", "bodyText": "That can be public correct.", "author": "bogdandrutu", "createdAt": "2020-06-05T16:12:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk3MDg3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE4MzUxNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r436183515", "bodyText": "ok, update and pushed. PTaL", "author": "jkwatson", "createdAt": "2020-06-05T22:01:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk3MDg3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM4MTE0Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r436381147", "bodyText": "i'm not super happy with the change to an abstract class, but we can address in the future.", "author": "jkwatson", "createdAt": "2020-06-07T16:47:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk3MDg3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "136fbe5a16c02f2de6fdd19a3ba339af165495a2", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/common/ImmutableKeyValuePairs.java b/api/src/main/java/io/opentelemetry/common/ImmutableKeyValuePairs.java\nindex e40302ee7..089b895cb 100644\n--- a/api/src/main/java/io/opentelemetry/common/ImmutableKeyValuePairs.java\n+++ b/api/src/main/java/io/opentelemetry/common/ImmutableKeyValuePairs.java\n\n@@ -20,6 +20,7 @@ import static io.opentelemetry.internal.Utils.checkArgument;\n import static io.opentelemetry.internal.Utils.checkNotNull;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n import javax.annotation.concurrent.Immutable;\n \n"}}, {"oid": "136fbe5a16c02f2de6fdd19a3ba339af165495a2", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/136fbe5a16c02f2de6fdd19a3ba339af165495a2", "message": "switch to an abstract base class to remove some code duplication", "committedDate": "2020-06-05T21:38:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyNTE4Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r436225187", "bodyText": "Recommend leaving this abstract and having EMPTY use the value implementation passing in empty list. Don't need to have yet more implementations of the abstract type for the empty types.", "author": "anuraaga", "createdAt": "2020-06-06T01:30:47Z", "path": "api/src/main/java/io/opentelemetry/common/ImmutableKeyValuePairs.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import static io.opentelemetry.internal.Utils.checkArgument;\n+import static io.opentelemetry.internal.Utils.checkNotNull;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * An immutable set of key-value pairs. Keys are only {@link String} typed. Can be iterated over\n+ * using the {@link #forEach(KeyValueConsumer)} method.\n+ *\n+ * @param <V> The type of the values contained in this.\n+ * @see Labels\n+ * @see Attributes\n+ */\n+@Immutable\n+abstract class ImmutableKeyValuePairs<V> {\n+\n+  List<Object> data() {", "originalCommit": "136fbe5a16c02f2de6fdd19a3ba339af165495a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyNzQ3MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r436227470", "bodyText": "Also, since this is internal consider Object[] for a bit less overhead.", "author": "anuraaga", "createdAt": "2020-06-06T01:59:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyNTE4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyOTQyNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r436229426", "bodyText": "I wish I could, but if we want to use AutoValue for the implementation, it needs a list. :(", "author": "jkwatson", "createdAt": "2020-06-06T02:27:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyNTE4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3ODg4Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r436278882", "bodyText": "I actually think that the previous incarnation where this was an interface was easier to understand. Even though it ends up with like 6-8 lines of duplicated code, I think it's actually a better design to this be an interface.", "author": "jkwatson", "createdAt": "2020-06-06T15:50:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyNTE4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM4MTEwMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r436381101", "bodyText": "this is going to change in the next PR, with the addition of 2 new methods. will address there.", "author": "jkwatson", "createdAt": "2020-06-07T16:46:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyNTE4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "74ab7d1fa2b760e6bcd9dab9138d0fc9d7e277c7", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/common/ImmutableKeyValuePairs.java b/api/src/main/java/io/opentelemetry/common/ImmutableKeyValuePairs.java\nindex 089b895cb..22625cb39 100644\n--- a/api/src/main/java/io/opentelemetry/common/ImmutableKeyValuePairs.java\n+++ b/api/src/main/java/io/opentelemetry/common/ImmutableKeyValuePairs.java\n\n@@ -17,11 +17,11 @@\n package io.opentelemetry.common;\n \n import static io.opentelemetry.internal.Utils.checkArgument;\n-import static io.opentelemetry.internal.Utils.checkNotNull;\n \n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n+import java.util.logging.Logger;\n import javax.annotation.concurrent.Immutable;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyNTcxNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r436225714", "bodyText": "Just wondering, do we need to sort attributes? I guess labels are sorted because of Prometheus. It's ok if it's to keep generic but curious. I think attributes can commonly be created per span instead of being singletons so this sorting would add up.", "author": "anuraaga", "createdAt": "2020-06-06T01:37:02Z", "path": "api/src/main/java/io/opentelemetry/common/Attributes.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import static io.opentelemetry.common.AttributeValue.arrayAttributeValue;\n+import static io.opentelemetry.common.AttributeValue.booleanAttributeValue;\n+import static io.opentelemetry.common.AttributeValue.doubleAttributeValue;\n+import static io.opentelemetry.common.AttributeValue.longAttributeValue;\n+import static io.opentelemetry.common.AttributeValue.stringAttributeValue;\n+\n+import com.google.auto.value.AutoValue;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * An immutable container for attributes. The type parameter denotes the type of the values of the\n+ * attributes.\n+ */\n+@Immutable\n+public abstract class Attributes extends ImmutableKeyValuePairs<AttributeValue> {\n+  private static final Attributes EMPTY = new Attributes() {};\n+\n+  @AutoValue\n+  @Immutable\n+  abstract static class ArrayBackedAttributes extends Attributes {\n+    ArrayBackedAttributes() {}\n+\n+    @Override\n+    abstract List<Object> data();\n+  }\n+\n+  /** An {@link Attributes} instance with no attributes. */\n+  public static Attributes empty() {\n+    return EMPTY;\n+  }\n+\n+  /** An {@link Attributes} instance with a single key-value pair. */\n+  public static Attributes of(String key, AttributeValue value) {\n+    return sortAndFilterToAttributes(key, value);\n+  }\n+\n+  /**\n+   * An {@link Attributes} instance with two key-value pairs. Order of the keys is not preserved.\n+   * Duplicate keys will be removed.\n+   */\n+  public static Attributes of(\n+      String key1, AttributeValue value1, String key2, AttributeValue value2) {\n+    return sortAndFilterToAttributes(key1, value1, key2, value2);\n+  }\n+\n+  /**\n+   * An {@link Attributes} instance with three key-value pairs. Order of the keys is not preserved.\n+   * Duplicate keys will be removed.\n+   */\n+  public static Attributes of(\n+      String key1,\n+      AttributeValue value1,\n+      String key2,\n+      AttributeValue value2,\n+      String key3,\n+      AttributeValue value3) {\n+    return sortAndFilterToAttributes(key1, value1, key2, value2, key3, value3);\n+  }\n+\n+  /**\n+   * An {@link Attributes} instance with four key-value pairs. Order of the keys is not preserved.\n+   * Duplicate keys will be removed.\n+   */\n+  public static Attributes of(\n+      String key1,\n+      AttributeValue value1,\n+      String key2,\n+      AttributeValue value2,\n+      String key3,\n+      AttributeValue value3,\n+      String key4,\n+      AttributeValue value4) {\n+    return sortAndFilterToAttributes(key1, value1, key2, value2, key3, value3, key4, value4);\n+  }\n+\n+  /**\n+   * An {@link Attributes} instance with five key-value pairs. Order of the keys is not preserved.\n+   * Duplicate keys will be removed.\n+   */\n+  public static Attributes of(\n+      String key1,\n+      AttributeValue value1,\n+      String key2,\n+      AttributeValue value2,\n+      String key3,\n+      AttributeValue value3,\n+      String key4,\n+      AttributeValue value4,\n+      String key5,\n+      AttributeValue value5) {\n+    return sortAndFilterToAttributes(\n+        key1, value1,\n+        key2, value2,\n+        key3, value3,\n+        key4, value4,\n+        key5, value5);\n+  }\n+\n+  private static Attributes sortAndFilterToAttributes(Object... data) {\n+    return new AutoValue_Attributes_ArrayBackedAttributes(sortAndFilter(data));", "originalCommit": "136fbe5a16c02f2de6fdd19a3ba339af165495a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyNjk5MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r436226991", "bodyText": "Otherwise we could add a quick check that the data is already sorted and deduped and bypass the logic. If users notice the sorting showing up in profiles they can reorder their code to speed it up.\nFor reference I have had users report this exact sort of issue line/armeria#2150", "author": "anuraaga", "createdAt": "2020-06-06T01:52:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyNTcxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyOTE2Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r436229167", "bodyText": "The sorting is just for making the equals/hashcode work out right.", "author": "jkwatson", "createdAt": "2020-06-06T02:24:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyNTcxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzMjM3NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r436232374", "bodyText": "I guess you can do the equals/hash in n^2 and will be as good as sorting + equals check for less than 10 labels. You may want to give a try and a benchmark", "author": "bogdandrutu", "createdAt": "2020-06-06T03:12:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyNTcxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3ODk5NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r436278994", "bodyText": "I'd like to save this kind of micro-optimization until after the API lands, and we can parellelize the work with using this for the APIs and doing optimizations. On my branch where I use this for Events and Links, this is already a significant improvement (~10% better) in both speed and memory allocations than the existing implementation.", "author": "jkwatson", "createdAt": "2020-06-06T15:51:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyNTcxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI4NDQyNw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r436284427", "bodyText": "I think just a dump n^2 is simpler than quicksort + dedup on sorted array.", "author": "bogdandrutu", "createdAt": "2020-06-06T17:07:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyNTcxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI4NjYyMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r436286620", "bodyText": "ok to save that for a follow-on PR?", "author": "jkwatson", "createdAt": "2020-06-06T17:38:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyNTcxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM4MDA1MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r436380050", "bodyText": "Just a thought on sorting...if we do need key-lookup in the future, having the keys sorted makes binary searching easy.", "author": "jkwatson", "createdAt": "2020-06-07T16:33:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyNTcxNA=="}], "type": "inlineReview", "revised_code": {"commit": "74ab7d1fa2b760e6bcd9dab9138d0fc9d7e277c7", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/common/Attributes.java b/api/src/main/java/io/opentelemetry/common/Attributes.java\nindex d99d9cdde..37bba9b2b 100644\n--- a/api/src/main/java/io/opentelemetry/common/Attributes.java\n+++ b/api/src/main/java/io/opentelemetry/common/Attributes.java\n\n@@ -28,8 +28,9 @@ import java.util.List;\n import javax.annotation.concurrent.Immutable;\n \n /**\n- * An immutable container for attributes. The type parameter denotes the type of the values of the\n- * attributes.\n+ * An immutable container for attributes.\n+ *\n+ * <p>The keys are {@link String}s and the values are {@link AttributeValue} instances.\n  */\n @Immutable\n public abstract class Attributes extends ImmutableKeyValuePairs<AttributeValue> {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyNTg2Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r436225862", "bodyText": "I think this is a user API so can't throw per 1)\nhttps://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/error-handling.md#basic-error-handling-principles", "author": "anuraaga", "createdAt": "2020-06-06T01:38:54Z", "path": "api/src/main/java/io/opentelemetry/common/ImmutableKeyValuePairs.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import static io.opentelemetry.internal.Utils.checkArgument;\n+import static io.opentelemetry.internal.Utils.checkNotNull;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * An immutable set of key-value pairs. Keys are only {@link String} typed. Can be iterated over\n+ * using the {@link #forEach(KeyValueConsumer)} method.\n+ *\n+ * @param <V> The type of the values contained in this.\n+ * @see Labels\n+ * @see Attributes\n+ */\n+@Immutable\n+abstract class ImmutableKeyValuePairs<V> {\n+\n+  List<Object> data() {\n+    return Collections.emptyList();\n+  }\n+\n+  /** Iterates over all the key-value pairs of attributes contained by this instance. */\n+  @SuppressWarnings(\"unchecked\")\n+  public void forEach(KeyValueConsumer<V> consumer) {\n+    for (int i = 0; i < data().size(); i += 2) {\n+      consumer.consume((String) data().get(i), (V) data().get(i + 1));\n+    }\n+  }\n+\n+  static List<Object> sortAndFilter(Object[] data) {\n+    checkArgument(\n+        data.length % 2 == 0, \"You must provide an even number of key/value pair arguments.\");\n+\n+    quickSort(data, 0, data.length - 2);\n+    return dedupe(data);\n+  }\n+\n+  private static void quickSort(Object[] data, int leftIndex, int rightIndex) {\n+    if (leftIndex >= rightIndex) {\n+      return;\n+    }\n+\n+    String pivotKey = (String) data[rightIndex];\n+    int counter = leftIndex;\n+\n+    for (int i = leftIndex; i <= rightIndex; i += 2) {\n+      if (((String) data[i]).compareTo(pivotKey) <= 0) {\n+        swap(data, counter, i);\n+        counter += 2;\n+      }\n+    }\n+\n+    quickSort(data, leftIndex, counter - 4);\n+    quickSort(data, counter, rightIndex);\n+  }\n+\n+  private static List<Object> dedupe(Object[] data) {\n+    List<Object> result = new ArrayList<>(data.length);\n+    Object previousKey = null;\n+\n+    for (int i = 0; i < data.length; i += 2) {\n+      Object key = data[i];\n+      Object value = data[i + 1];\n+      checkNotNull(key, \"You cannot provide null keys for creation of attributes.\");", "originalCommit": "136fbe5a16c02f2de6fdd19a3ba339af165495a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyOTQwNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r436229406", "bodyText": "hmm. null keys seems like a pretty bad problem. what do you suggest we do if some instrumentation puts in a null key?", "author": "jkwatson", "createdAt": "2020-06-06T02:27:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyNTg2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzMDQ3MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r436230471", "bodyText": "I agree it's a bad problem but eventually some user will find their app crash because of observability logic and complain even in the most unlikely scenarios :) And I think that's the motivation behind those principles.\nJust skipping of course makes finding these bugs hard - how about a configurable check that can be enabled in unit tests? https://github.com/aws/aws-xray-sdk-java/blob/master/aws-xray-recorder-sdk-core/src/main/java/com/amazonaws/xray/utils/LooseValidations.java#L24", "author": "anuraaga", "createdAt": "2020-06-06T02:44:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyNTg2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3OTA3NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r436279074", "bodyText": "How about skipping and logging? I do think this will be a very rare occurrence, and will almost certainly indicate a programming bug.", "author": "jkwatson", "createdAt": "2020-06-06T15:52:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyNTg2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM4MTA1NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r436381054", "bodyText": "ok, skipped null keys and logged.", "author": "jkwatson", "createdAt": "2020-06-07T16:46:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyNTg2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "74ab7d1fa2b760e6bcd9dab9138d0fc9d7e277c7", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/common/ImmutableKeyValuePairs.java b/api/src/main/java/io/opentelemetry/common/ImmutableKeyValuePairs.java\nindex 089b895cb..22625cb39 100644\n--- a/api/src/main/java/io/opentelemetry/common/ImmutableKeyValuePairs.java\n+++ b/api/src/main/java/io/opentelemetry/common/ImmutableKeyValuePairs.java\n\n@@ -17,11 +17,11 @@\n package io.opentelemetry.common;\n \n import static io.opentelemetry.internal.Utils.checkArgument;\n-import static io.opentelemetry.internal.Utils.checkNotNull;\n \n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n+import java.util.logging.Logger;\n import javax.annotation.concurrent.Immutable;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyNjc5NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r436226795", "bodyText": "Since we're allocating anyways and the number of items should be quite low, consider doing an out-of-place insertion sort where it's easy to dedupe while sorting and is faster than quicksort for small collections", "author": "anuraaga", "createdAt": "2020-06-06T01:50:04Z", "path": "api/src/main/java/io/opentelemetry/common/ImmutableKeyValuePairs.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import static io.opentelemetry.internal.Utils.checkArgument;\n+import static io.opentelemetry.internal.Utils.checkNotNull;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * An immutable set of key-value pairs. Keys are only {@link String} typed. Can be iterated over\n+ * using the {@link #forEach(KeyValueConsumer)} method.\n+ *\n+ * @param <V> The type of the values contained in this.\n+ * @see Labels\n+ * @see Attributes\n+ */\n+@Immutable\n+abstract class ImmutableKeyValuePairs<V> {\n+\n+  List<Object> data() {\n+    return Collections.emptyList();\n+  }\n+\n+  /** Iterates over all the key-value pairs of attributes contained by this instance. */\n+  @SuppressWarnings(\"unchecked\")\n+  public void forEach(KeyValueConsumer<V> consumer) {\n+    for (int i = 0; i < data().size(); i += 2) {\n+      consumer.consume((String) data().get(i), (V) data().get(i + 1));\n+    }\n+  }\n+\n+  static List<Object> sortAndFilter(Object[] data) {\n+    checkArgument(\n+        data.length % 2 == 0, \"You must provide an even number of key/value pair arguments.\");\n+\n+    quickSort(data, 0, data.length - 2);\n+    return dedupe(data);\n+  }\n+\n+  private static void quickSort(Object[] data, int leftIndex, int rightIndex) {\n+    if (leftIndex >= rightIndex) {\n+      return;\n+    }\n+\n+    String pivotKey = (String) data[rightIndex];\n+    int counter = leftIndex;\n+\n+    for (int i = leftIndex; i <= rightIndex; i += 2) {\n+      if (((String) data[i]).compareTo(pivotKey) <= 0) {\n+        swap(data, counter, i);\n+        counter += 2;\n+      }\n+    }\n+\n+    quickSort(data, leftIndex, counter - 4);\n+    quickSort(data, counter, rightIndex);\n+  }\n+\n+  private static List<Object> dedupe(Object[] data) {\n+    List<Object> result = new ArrayList<>(data.length);", "originalCommit": "136fbe5a16c02f2de6fdd19a3ba339af165495a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyNzU2Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r436227562", "bodyText": "Realized that if sort and dedupe were combined into one insertion sort could do it in-place too. Dupes should be rare I think so copying only for the dupe case would be nice.", "author": "anuraaga", "createdAt": "2020-06-06T02:00:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyNjc5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyOTI5Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r436229293", "bodyText": "I think we can save fine-grained optimization like this until after we've got it all up and running. :)", "author": "jkwatson", "createdAt": "2020-06-06T02:25:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyNjc5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzMTAwOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r436231009", "bodyText": "Agree though might still consider at least the already-sorted/deduped check in this one that would probably be good enough for most cases anyways and should be relatively simple.", "author": "anuraaga", "createdAt": "2020-06-06T02:51:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyNjc5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3OTEwNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r436279104", "bodyText": "See above comments on getting this landed before doing micro-optimizations.", "author": "jkwatson", "createdAt": "2020-06-06T15:52:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyNjc5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "74ab7d1fa2b760e6bcd9dab9138d0fc9d7e277c7", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/common/ImmutableKeyValuePairs.java b/api/src/main/java/io/opentelemetry/common/ImmutableKeyValuePairs.java\nindex 089b895cb..22625cb39 100644\n--- a/api/src/main/java/io/opentelemetry/common/ImmutableKeyValuePairs.java\n+++ b/api/src/main/java/io/opentelemetry/common/ImmutableKeyValuePairs.java\n\n@@ -17,11 +17,11 @@\n package io.opentelemetry.common;\n \n import static io.opentelemetry.internal.Utils.checkArgument;\n-import static io.opentelemetry.internal.Utils.checkNotNull;\n \n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n+import java.util.logging.Logger;\n import javax.annotation.concurrent.Immutable;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyNzgzMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r436227831", "bodyText": "ImmutableKeyValuePairs isn't in public API so can't link it. Just some generic word like container should be fine.", "author": "anuraaga", "createdAt": "2020-06-06T02:05:02Z", "path": "api/src/main/java/io/opentelemetry/common/KeyValueConsumer.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+/**\n+ * Used for iterating over the key-value pairs contained by an {@link ImmutableKeyValuePairs}", "originalCommit": "136fbe5a16c02f2de6fdd19a3ba339af165495a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyOTI2Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r436229262", "bodyText": "fair enough. will update.", "author": "jkwatson", "createdAt": "2020-06-06T02:25:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyNzgzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM4MTAwNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r436381006", "bodyText": "done", "author": "jkwatson", "createdAt": "2020-06-07T16:45:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyNzgzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "74ab7d1fa2b760e6bcd9dab9138d0fc9d7e277c7", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/common/KeyValueConsumer.java b/api/src/main/java/io/opentelemetry/common/KeyValueConsumer.java\nindex bbffe0f82..c729795c8 100644\n--- a/api/src/main/java/io/opentelemetry/common/KeyValueConsumer.java\n+++ b/api/src/main/java/io/opentelemetry/common/KeyValueConsumer.java\n\n@@ -17,8 +17,8 @@\n package io.opentelemetry.common;\n \n /**\n- * Used for iterating over the key-value pairs contained by an {@link ImmutableKeyValuePairs}\n- * instance. The key is always a {@link String}.\n+ * Used for iterating over the key-value pairs in a key-value pair container, such as {@link\n+ * Attributes} or {@link Labels}. The key is always a {@link String}.\n  */\n public interface KeyValueConsumer<T> {\n   void consume(String key, T value);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyODEyOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r436228128", "bodyText": "Sets instead of Add throughout (matches the method name and javadoc should generally be present tense, not command tense)", "author": "anuraaga", "createdAt": "2020-06-06T02:09:00Z", "path": "api/src/main/java/io/opentelemetry/common/Attributes.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import static io.opentelemetry.common.AttributeValue.arrayAttributeValue;\n+import static io.opentelemetry.common.AttributeValue.booleanAttributeValue;\n+import static io.opentelemetry.common.AttributeValue.doubleAttributeValue;\n+import static io.opentelemetry.common.AttributeValue.longAttributeValue;\n+import static io.opentelemetry.common.AttributeValue.stringAttributeValue;\n+\n+import com.google.auto.value.AutoValue;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * An immutable container for attributes. The type parameter denotes the type of the values of the\n+ * attributes.\n+ */\n+@Immutable\n+public abstract class Attributes extends ImmutableKeyValuePairs<AttributeValue> {\n+  private static final Attributes EMPTY = new Attributes() {};\n+\n+  @AutoValue\n+  @Immutable\n+  abstract static class ArrayBackedAttributes extends Attributes {\n+    ArrayBackedAttributes() {}\n+\n+    @Override\n+    abstract List<Object> data();\n+  }\n+\n+  /** An {@link Attributes} instance with no attributes. */\n+  public static Attributes empty() {\n+    return EMPTY;\n+  }\n+\n+  /** An {@link Attributes} instance with a single key-value pair. */\n+  public static Attributes of(String key, AttributeValue value) {\n+    return sortAndFilterToAttributes(key, value);\n+  }\n+\n+  /**\n+   * An {@link Attributes} instance with two key-value pairs. Order of the keys is not preserved.\n+   * Duplicate keys will be removed.\n+   */\n+  public static Attributes of(\n+      String key1, AttributeValue value1, String key2, AttributeValue value2) {\n+    return sortAndFilterToAttributes(key1, value1, key2, value2);\n+  }\n+\n+  /**\n+   * An {@link Attributes} instance with three key-value pairs. Order of the keys is not preserved.\n+   * Duplicate keys will be removed.\n+   */\n+  public static Attributes of(\n+      String key1,\n+      AttributeValue value1,\n+      String key2,\n+      AttributeValue value2,\n+      String key3,\n+      AttributeValue value3) {\n+    return sortAndFilterToAttributes(key1, value1, key2, value2, key3, value3);\n+  }\n+\n+  /**\n+   * An {@link Attributes} instance with four key-value pairs. Order of the keys is not preserved.\n+   * Duplicate keys will be removed.\n+   */\n+  public static Attributes of(\n+      String key1,\n+      AttributeValue value1,\n+      String key2,\n+      AttributeValue value2,\n+      String key3,\n+      AttributeValue value3,\n+      String key4,\n+      AttributeValue value4) {\n+    return sortAndFilterToAttributes(key1, value1, key2, value2, key3, value3, key4, value4);\n+  }\n+\n+  /**\n+   * An {@link Attributes} instance with five key-value pairs. Order of the keys is not preserved.\n+   * Duplicate keys will be removed.\n+   */\n+  public static Attributes of(\n+      String key1,\n+      AttributeValue value1,\n+      String key2,\n+      AttributeValue value2,\n+      String key3,\n+      AttributeValue value3,\n+      String key4,\n+      AttributeValue value4,\n+      String key5,\n+      AttributeValue value5) {\n+    return sortAndFilterToAttributes(\n+        key1, value1,\n+        key2, value2,\n+        key3, value3,\n+        key4, value4,\n+        key5, value5);\n+  }\n+\n+  private static Attributes sortAndFilterToAttributes(Object... data) {\n+    return new AutoValue_Attributes_ArrayBackedAttributes(sortAndFilter(data));\n+  }\n+\n+  /** Creates a new {@link Builder} instance for creating arbitrary {@link Attributes}. */\n+  public static Builder newBuilder() {\n+    return new Builder();\n+  }\n+\n+  /**\n+   * Enables the creation of an {@link Attributes} instance with an arbitrary number of key-value\n+   * pairs.\n+   */\n+  public static class Builder {\n+    private final List<Object> data = new ArrayList<>();\n+\n+    /** Create the {@link Attributes} from this. */\n+    public Attributes build() {\n+      return sortAndFilterToAttributes(data.toArray());\n+    }\n+\n+    /**\n+     * Add a bare {@link AttributeValue} to this.", "originalCommit": "136fbe5a16c02f2de6fdd19a3ba339af165495a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM4MDk5MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r436380991", "bodyText": "done", "author": "jkwatson", "createdAt": "2020-06-07T16:45:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyODEyOA=="}], "type": "inlineReview", "revised_code": {"commit": "74ab7d1fa2b760e6bcd9dab9138d0fc9d7e277c7", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/common/Attributes.java b/api/src/main/java/io/opentelemetry/common/Attributes.java\nindex d99d9cdde..37bba9b2b 100644\n--- a/api/src/main/java/io/opentelemetry/common/Attributes.java\n+++ b/api/src/main/java/io/opentelemetry/common/Attributes.java\n\n@@ -28,8 +28,9 @@ import java.util.List;\n import javax.annotation.concurrent.Immutable;\n \n /**\n- * An immutable container for attributes. The type parameter denotes the type of the values of the\n- * attributes.\n+ * An immutable container for attributes.\n+ *\n+ * <p>The keys are {@link String}s and the values are {@link AttributeValue} instances.\n  */\n @Immutable\n public abstract class Attributes extends ImmutableKeyValuePairs<AttributeValue> {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyODE1MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r436228151", "bodyText": "Returns a for all the factories", "author": "anuraaga", "createdAt": "2020-06-06T02:09:27Z", "path": "api/src/main/java/io/opentelemetry/common/Attributes.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import static io.opentelemetry.common.AttributeValue.arrayAttributeValue;\n+import static io.opentelemetry.common.AttributeValue.booleanAttributeValue;\n+import static io.opentelemetry.common.AttributeValue.doubleAttributeValue;\n+import static io.opentelemetry.common.AttributeValue.longAttributeValue;\n+import static io.opentelemetry.common.AttributeValue.stringAttributeValue;\n+\n+import com.google.auto.value.AutoValue;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * An immutable container for attributes. The type parameter denotes the type of the values of the\n+ * attributes.\n+ */\n+@Immutable\n+public abstract class Attributes extends ImmutableKeyValuePairs<AttributeValue> {\n+  private static final Attributes EMPTY = new Attributes() {};\n+\n+  @AutoValue\n+  @Immutable\n+  abstract static class ArrayBackedAttributes extends Attributes {\n+    ArrayBackedAttributes() {}\n+\n+    @Override\n+    abstract List<Object> data();\n+  }\n+\n+  /** An {@link Attributes} instance with no attributes. */", "originalCommit": "136fbe5a16c02f2de6fdd19a3ba339af165495a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM4MDk3OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r436380979", "bodyText": "done", "author": "jkwatson", "createdAt": "2020-06-07T16:45:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyODE1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "74ab7d1fa2b760e6bcd9dab9138d0fc9d7e277c7", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/common/Attributes.java b/api/src/main/java/io/opentelemetry/common/Attributes.java\nindex d99d9cdde..37bba9b2b 100644\n--- a/api/src/main/java/io/opentelemetry/common/Attributes.java\n+++ b/api/src/main/java/io/opentelemetry/common/Attributes.java\n\n@@ -28,8 +28,9 @@ import java.util.List;\n import javax.annotation.concurrent.Immutable;\n \n /**\n- * An immutable container for attributes. The type parameter denotes the type of the values of the\n- * attributes.\n+ * An immutable container for attributes.\n+ *\n+ * <p>The keys are {@link String}s and the values are {@link AttributeValue} instances.\n  */\n @Immutable\n public abstract class Attributes extends ImmutableKeyValuePairs<AttributeValue> {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyODE5MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r436228190", "bodyText": "No type parameter anymore remove from javadoc", "author": "anuraaga", "createdAt": "2020-06-06T02:09:56Z", "path": "api/src/main/java/io/opentelemetry/common/Attributes.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import static io.opentelemetry.common.AttributeValue.arrayAttributeValue;\n+import static io.opentelemetry.common.AttributeValue.booleanAttributeValue;\n+import static io.opentelemetry.common.AttributeValue.doubleAttributeValue;\n+import static io.opentelemetry.common.AttributeValue.longAttributeValue;\n+import static io.opentelemetry.common.AttributeValue.stringAttributeValue;\n+\n+import com.google.auto.value.AutoValue;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * An immutable container for attributes. The type parameter denotes the type of the values of the", "originalCommit": "136fbe5a16c02f2de6fdd19a3ba339af165495a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyOTM1NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r436229354", "bodyText": "whoops! got lost in the refactoring. will fix.", "author": "jkwatson", "createdAt": "2020-06-06T02:26:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyODE5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM4MDk0OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r436380949", "bodyText": "done", "author": "jkwatson", "createdAt": "2020-06-07T16:45:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyODE5MA=="}], "type": "inlineReview", "revised_code": {"commit": "74ab7d1fa2b760e6bcd9dab9138d0fc9d7e277c7", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/common/Attributes.java b/api/src/main/java/io/opentelemetry/common/Attributes.java\nindex d99d9cdde..37bba9b2b 100644\n--- a/api/src/main/java/io/opentelemetry/common/Attributes.java\n+++ b/api/src/main/java/io/opentelemetry/common/Attributes.java\n\n@@ -28,8 +28,9 @@ import java.util.List;\n import javax.annotation.concurrent.Immutable;\n \n /**\n- * An immutable container for attributes. The type parameter denotes the type of the values of the\n- * attributes.\n+ * An immutable container for attributes.\n+ *\n+ * <p>The keys are {@link String}s and the values are {@link AttributeValue} instances.\n  */\n @Immutable\n public abstract class Attributes extends ImmutableKeyValuePairs<AttributeValue> {\n"}}, {"oid": "74ab7d1fa2b760e6bcd9dab9138d0fc9d7e277c7", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/74ab7d1fa2b760e6bcd9dab9138d0fc9d7e277c7", "message": "Updated docs based on feedback.", "committedDate": "2020-06-07T16:44:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQyMDMxOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r436420319", "bodyText": "Still recommend this to be Attributes.newBuilder().build() instead of adding a new implementation of Attributes", "author": "anuraaga", "createdAt": "2020-06-08T01:06:56Z", "path": "api/src/main/java/io/opentelemetry/common/Attributes.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import static io.opentelemetry.common.AttributeValue.arrayAttributeValue;\n+import static io.opentelemetry.common.AttributeValue.booleanAttributeValue;\n+import static io.opentelemetry.common.AttributeValue.doubleAttributeValue;\n+import static io.opentelemetry.common.AttributeValue.longAttributeValue;\n+import static io.opentelemetry.common.AttributeValue.stringAttributeValue;\n+\n+import com.google.auto.value.AutoValue;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * An immutable container for attributes.\n+ *\n+ * <p>The keys are {@link String}s and the values are {@link AttributeValue} instances.\n+ */\n+@Immutable\n+public abstract class Attributes extends ImmutableKeyValuePairs<AttributeValue> {\n+  private static final Attributes EMPTY = new Attributes() {};", "originalCommit": "74ab7d1fa2b760e6bcd9dab9138d0fc9d7e277c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc4MDU5Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r436780593", "bodyText": "Sure. I'm fine either way.", "author": "jkwatson", "createdAt": "2020-06-08T15:06:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQyMDMxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc4Mzc1OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r436783758", "bodyText": "done.", "author": "jkwatson", "createdAt": "2020-06-08T15:11:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQyMDMxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "4acad24b1ca085b2c9a01dba8d88b6651c462162", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/common/Attributes.java b/api/src/main/java/io/opentelemetry/common/Attributes.java\nindex 37bba9b2b..efe07cd8d 100644\n--- a/api/src/main/java/io/opentelemetry/common/Attributes.java\n+++ b/api/src/main/java/io/opentelemetry/common/Attributes.java\n\n@@ -34,7 +34,7 @@ import javax.annotation.concurrent.Immutable;\n  */\n @Immutable\n public abstract class Attributes extends ImmutableKeyValuePairs<AttributeValue> {\n-  private static final Attributes EMPTY = new Attributes() {};\n+  private static final Attributes EMPTY = Attributes.newBuilder().build();\n \n   @AutoValue\n   @Immutable\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQyMDQwNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r436420405", "bodyText": "Think we can use of here, it's the \"base case\" of the varargs. Similar to what guava does", "author": "anuraaga", "createdAt": "2020-06-08T01:07:37Z", "path": "api/src/main/java/io/opentelemetry/common/Attributes.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import static io.opentelemetry.common.AttributeValue.arrayAttributeValue;\n+import static io.opentelemetry.common.AttributeValue.booleanAttributeValue;\n+import static io.opentelemetry.common.AttributeValue.doubleAttributeValue;\n+import static io.opentelemetry.common.AttributeValue.longAttributeValue;\n+import static io.opentelemetry.common.AttributeValue.stringAttributeValue;\n+\n+import com.google.auto.value.AutoValue;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * An immutable container for attributes.\n+ *\n+ * <p>The keys are {@link String}s and the values are {@link AttributeValue} instances.\n+ */\n+@Immutable\n+public abstract class Attributes extends ImmutableKeyValuePairs<AttributeValue> {\n+  private static final Attributes EMPTY = new Attributes() {};\n+\n+  @AutoValue\n+  @Immutable\n+  abstract static class ArrayBackedAttributes extends Attributes {\n+    ArrayBackedAttributes() {}\n+\n+    @Override\n+    abstract List<Object> data();\n+  }\n+\n+  /** Returns a {@link Attributes} instance with no attributes. */\n+  public static Attributes empty() {", "originalCommit": "74ab7d1fa2b760e6bcd9dab9138d0fc9d7e277c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc3ODY0Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1304#discussion_r436778642", "bodyText": "I actually didn't use that pattern, quite intentionally, since I think guava's use of the empty of is quite annoying and surprising. :)", "author": "jkwatson", "createdAt": "2020-06-08T15:03:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQyMDQwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "4acad24b1ca085b2c9a01dba8d88b6651c462162", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/common/Attributes.java b/api/src/main/java/io/opentelemetry/common/Attributes.java\nindex 37bba9b2b..efe07cd8d 100644\n--- a/api/src/main/java/io/opentelemetry/common/Attributes.java\n+++ b/api/src/main/java/io/opentelemetry/common/Attributes.java\n\n@@ -34,7 +34,7 @@ import javax.annotation.concurrent.Immutable;\n  */\n @Immutable\n public abstract class Attributes extends ImmutableKeyValuePairs<AttributeValue> {\n-  private static final Attributes EMPTY = new Attributes() {};\n+  private static final Attributes EMPTY = Attributes.newBuilder().build();\n \n   @AutoValue\n   @Immutable\n"}}, {"oid": "4acad24b1ca085b2c9a01dba8d88b6651c462162", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/4acad24b1ca085b2c9a01dba8d88b6651c462162", "message": "Small change to use the builder for the empty implementations.", "committedDate": "2020-06-08T15:10:57Z", "type": "commit"}]}