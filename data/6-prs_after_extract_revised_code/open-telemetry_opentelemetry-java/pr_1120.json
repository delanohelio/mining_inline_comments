{"pr_number": 1120, "pr_title": "Mark all threads/pools as daemon.", "pr_createdAt": "2020-04-17T19:20:00Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1120", "timeline": [{"oid": "ce52baf7a48dd7058c73b3eb9020adcef1145c15", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ce52baf7a48dd7058c73b3eb9020adcef1145c15", "message": "Mark all threads/pools as daemon.", "committedDate": "2020-04-17T16:30:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQzMjkwMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1120#discussion_r410432900", "bodyText": "discussion on the very very similar #1094 says this needs to go inside the try block because security managers can make this illegal.", "author": "jkwatson", "createdAt": "2020-04-17T19:41:39Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -237,6 +237,7 @@ public BatchSpansProcessor build() {\n \n   private static Thread newThread(Runnable runnable) {\n     Thread thread = MoreExecutors.platformThreadFactory().newThread(runnable);\n+    thread.setDaemon(true);", "originalCommit": "ce52baf7a48dd7058c73b3eb9020adcef1145c15", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "95e18c712315a118509a98889c90efed73dfb0f2", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\nindex 478040bdc..4a060892c 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n\n@@ -237,9 +237,9 @@ public final class BatchSpansProcessor implements SpanProcessor {\n \n   private static Thread newThread(Runnable runnable) {\n     Thread thread = MoreExecutors.platformThreadFactory().newThread(runnable);\n-    thread.setDaemon(true);\n     try {\n       thread.setName(WORKER_THREAD_NAME);\n+      thread.setDaemon(true);\n     } catch (SecurityException e) {\n       // OK if we can't set the name in this environment.\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQzMzAxMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1120#discussion_r410433012", "bodyText": "same. move into the try block", "author": "jkwatson", "createdAt": "2020-04-17T19:41:56Z", "path": "sdk_contrib/async_processor/src/main/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorEventQueue.java", "diffHunk": "@@ -249,6 +249,7 @@ private ThreadFactoryWithName(String threadName) {\n     @Override\n     public Thread newThread(Runnable runnable) {\n       Thread thread = MoreExecutors.platformThreadFactory().newThread(runnable);\n+      thread.setDaemon(true);", "originalCommit": "ce52baf7a48dd7058c73b3eb9020adcef1145c15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQzNzI0NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1120#discussion_r410437245", "bodyText": "Will do (to both).", "author": "johnbley", "createdAt": "2020-04-17T19:50:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQzMzAxMg=="}], "type": "inlineReview", "revised_code": {"commit": "95e18c712315a118509a98889c90efed73dfb0f2", "chunk": "diff --git a/sdk_contrib/async_processor/src/main/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorEventQueue.java b/sdk_contrib/async_processor/src/main/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorEventQueue.java\nindex 69e00e2c2..dc8d109f4 100644\n--- a/sdk_contrib/async_processor/src/main/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorEventQueue.java\n+++ b/sdk_contrib/async_processor/src/main/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorEventQueue.java\n\n@@ -249,9 +249,9 @@ final class DisruptorEventQueue {\n     @Override\n     public Thread newThread(Runnable runnable) {\n       Thread thread = MoreExecutors.platformThreadFactory().newThread(runnable);\n-      thread.setDaemon(true);\n       try {\n         thread.setName(threadName);\n+        thread.setDaemon(true);\n       } catch (SecurityException e) {\n         // OK if we can't set the name in this environment.\n       }\n"}}, {"oid": "95e18c712315a118509a98889c90efed73dfb0f2", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/95e18c712315a118509a98889c90efed73dfb0f2", "message": "Move setDaemon calls inside try blocks as they can throw a security exception.", "committedDate": "2020-04-17T19:49:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0MTEzNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1120#discussion_r410441136", "bodyText": "since there is a (admittedly rare) security manager-induced failure mode here, can we add a comment to the javadoc for this class about it?", "author": "jkwatson", "createdAt": "2020-04-17T19:59:26Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/export/IntervalMetricReader.java", "diffHunk": "@@ -135,7 +136,13 @@ public IntervalMetricReader build() {\n   @SuppressWarnings(\"FutureReturnValueIgnored\")\n   private IntervalMetricReader(InternalState internalState) {\n     this.exporter = new Exporter(internalState);\n-    this.scheduler = Executors.newScheduledThreadPool(1, MoreExecutors.platformThreadFactory());\n+    this.scheduler =\n+        Executors.newScheduledThreadPool(\n+            1,\n+            new ThreadFactoryBuilder()\n+                .setDaemon(true)", "originalCommit": "95e18c712315a118509a98889c90efed73dfb0f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0NzIzMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1120#discussion_r410447233", "bodyText": "Note that if we do this here, then newThread will throw if setDaemon fails.", "author": "Oberon00", "createdAt": "2020-04-17T20:13:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0MTEzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ1ODA5OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1120#discussion_r410458098", "bodyText": "do we know how fast this fails? I think the javadoc addition should be good to document this fact. Might be good to have a custom threadfactory which will allow non-daemon access if it's forbidden. @johnbley any idea how difficult that would be?", "author": "jkwatson", "createdAt": "2020-04-17T20:38:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0MTEzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5ODY4Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1120#discussion_r410498686", "bodyText": "Probably a better solution:\nImplement our own ThreadFactory see what we did in OpenCensus https://github.com/census-instrumentation/opencensus-java/blob/master/impl_core/src/main/java/io/opencensus/implcore/internal/DaemonThreadFactory.java\nAnd always use that to produce threads :)", "author": "bogdandrutu", "createdAt": "2020-04-17T22:26:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0MTEzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUwMDAwMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1120#discussion_r410500001", "bodyText": "Definitely strong agree on this one!", "author": "jkwatson", "createdAt": "2020-04-17T22:31:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0MTEzNg=="}], "type": "inlineReview", "revised_code": {"commit": "cd4c91dc3abc4d82aefe7ce9b338f0f596586b55", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/metrics/export/IntervalMetricReader.java b/sdk/src/main/java/io/opentelemetry/sdk/metrics/export/IntervalMetricReader.java\nindex 824358420..5f200a528 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/metrics/export/IntervalMetricReader.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/metrics/export/IntervalMetricReader.java\n\n@@ -136,13 +135,7 @@ public final class IntervalMetricReader {\n   @SuppressWarnings(\"FutureReturnValueIgnored\")\n   private IntervalMetricReader(InternalState internalState) {\n     this.exporter = new Exporter(internalState);\n-    this.scheduler =\n-        Executors.newScheduledThreadPool(\n-            1,\n-            new ThreadFactoryBuilder()\n-                .setDaemon(true)\n-                .setThreadFactory(MoreExecutors.platformThreadFactory())\n-                .build());\n+    this.scheduler = Executors.newScheduledThreadPool(1, new DaemonThreadFactory());\n     this.scheduler.scheduleAtFixedRate(\n         exporter,\n         internalState.getExportIntervalMillis(),\n"}}, {"oid": "9225df86084d4953f0271fabb77ab3547e0cd61f", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9225df86084d4953f0271fabb77ab3547e0cd61f", "message": "Add javadoc comment about possibility of SecurityException.", "committedDate": "2020-04-17T20:10:46Z", "type": "commit"}, {"oid": "cd4c91dc3abc4d82aefe7ce9b338f0f596586b55", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/cd4c91dc3abc4d82aefe7ce9b338f0f596586b55", "message": "Create common/DaemonThreadFactory and adjust all thread creation to use it.", "committedDate": "2020-04-18T14:11:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcwNjIxNw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1120#discussion_r410706217", "bodyText": "Can we enhance this a bit and accept a thread name prefix + a local atomic integer and name the thread prefix + \"_\" + atomicval++?\nThat way we encapsulate everything in this class. What do you think?", "author": "bogdandrutu", "createdAt": "2020-04-18T14:39:42Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/common/DaemonThreadFactory.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.common;\n+\n+import com.google.common.util.concurrent.MoreExecutors;\n+import java.util.concurrent.ThreadFactory;\n+\n+/**\n+ * A {@link ThreadFactory} that delegates to {@code MoreExecutors.platformThreadFactory()} and marks\n+ * all threads as daemon.\n+ */\n+public class DaemonThreadFactory implements ThreadFactory {", "originalCommit": "cd4c91dc3abc4d82aefe7ce9b338f0f596586b55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM3ODcyOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1120#discussion_r411378729", "bodyText": "It removed a fair amount of extraneous code elsewhere.", "author": "johnbley", "createdAt": "2020-04-20T13:31:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcwNjIxNw=="}], "type": "inlineReview", "revised_code": {"commit": "fe5faf044c19cfaf64c539363cdc3195e58e7346", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/common/DaemonThreadFactory.java b/sdk/src/main/java/io/opentelemetry/sdk/common/DaemonThreadFactory.java\nindex ff13e72c5..c465e2c9f 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/common/DaemonThreadFactory.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/common/DaemonThreadFactory.java\n\n@@ -18,17 +18,26 @@ package io.opentelemetry.sdk.common;\n \n import com.google.common.util.concurrent.MoreExecutors;\n import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.atomic.AtomicInteger;\n \n /**\n  * A {@link ThreadFactory} that delegates to {@code MoreExecutors.platformThreadFactory()} and marks\n  * all threads as daemon.\n  */\n public class DaemonThreadFactory implements ThreadFactory {\n+  private final String namePrefix;\n+  private final AtomicInteger counter = new AtomicInteger();\n+\n+  public DaemonThreadFactory(String namePrefix) {\n+    this.namePrefix = namePrefix;\n+  }\n+\n   @Override\n   public Thread newThread(Runnable runnable) {\n     Thread t = MoreExecutors.platformThreadFactory().newThread(runnable);\n     try {\n       t.setDaemon(true);\n+      t.setName(namePrefix + \"_\" + counter.incrementAndGet());\n     } catch (SecurityException e) {\n       // Well, we tried.\n     }\n"}}, {"oid": "fe5faf044c19cfaf64c539363cdc3195e58e7346", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/fe5faf044c19cfaf64c539363cdc3195e58e7346", "message": "Apply a name prefix in the DaemonThreadPool; rework and simplify several calling sites accordingly.", "committedDate": "2020-04-20T13:29:43Z", "type": "commit"}]}