{"pr_number": 1256, "pr_title": "Add public Samplers.emptyDecision(boolean) and decision(boolean, Map).", "pr_createdAt": "2020-05-20T09:13:22Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1256", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg3NjM3OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1256#discussion_r427876379", "bodyText": "I would expect custom Samplers to use something like:\nSamplers.alwaysOn/Off().shouldSample(...)\n\nso attributes can be set", "author": "thisthat", "createdAt": "2020-05-20T09:39:09Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java", "diffHunk": "@@ -51,6 +51,20 @@\n   // No instance of this class.\n   private Samplers() {}\n \n+  /**\n+   * Returns a {@link Decision} with empty attributes and {@link Decision#isSampled()} returning the\n+   * value of the parameter {@code isSampled}.\n+   *\n+   * <p>This is meant for use by custom {@link Sampler} implementations.\n+   *\n+   * @param isSampled The value to return from {@link Decision#isSampled()}.\n+   * @return A {@link Decision} with empty attributes and {@link Decision#isSampled()} returning the\n+   *     value of the parameter {@code isSampled}.\n+   */\n+  public static final Decision emptyDecision(boolean isSampled) {\n+    return isSampled ? ALWAYS_ON_DECISION : ALWAYS_OFF_DECISION;", "originalCommit": "e0a5d9485ea4f5f6bb39b4b237582f8c5a870c5b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg5NDY1NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1256#discussion_r427894655", "bodyText": "I don't understand. Which attributes could be set?", "author": "Oberon00", "createdAt": "2020-05-20T10:09:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg3NjM3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzkxMDI3NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1256#discussion_r427910274", "bodyText": "That depends on the implementation. For example, jaeger adds their rate limiter to the attributes", "author": "thisthat", "createdAt": "2020-05-20T10:38:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg3NjM3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0MTI2Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1256#discussion_r427941262", "bodyText": "Of course, for samplers that needs to add attribute, this function cannot be used.\nBut at least for the negative decision, attributes will AFAIK be ignored, so at least for this case it could be used by any sampler.\nProbably a more full-featured version of this PR could also add singleAttributeDecision(boolean, key, value) and attributedDecision(boolean, Map). But for the sampler I'm thinking of I would only need emptyDecision.", "author": "Oberon00", "createdAt": "2020-05-20T11:38:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg3NjM3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0MjU0Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1256#discussion_r427942547", "bodyText": "About your suggestion with Samplers.alwaysOn/Off().shouldSample(...):\nFirst, it is very verbose and IMHO also not as clear. Second, if you need to do something like someBoolean ? Samplers.alwaysOn... : Samplers.alwaysOff... it becomes even twice as verbose.", "author": "Oberon00", "createdAt": "2020-05-20T11:41:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg3NjM3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0Mjk5MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1256#discussion_r427942991", "bodyText": "And I still don't understand how attributes could be added using Samplers.alwaysOn/Off().shouldSample(...)", "author": "Oberon00", "createdAt": "2020-05-20T11:42:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg3NjM3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "4ace28be07e3c8c526b702b8cd69b3befd05bc44", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java b/sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java\nindex 84c8ef17a..66cc760f2 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java\n\n@@ -43,10 +43,22 @@ import javax.annotation.concurrent.Immutable;\n @Immutable\n public final class Samplers {\n \n-  private static final Sampler ALWAYS_ON = new AlwaysOnSampler();\n-  private static final Sampler ALWAYS_OFF = new AlwaysOffSampler();\n-  private static final Decision ALWAYS_ON_DECISION = new SimpleDecision(/* decision= */ true);\n-  private static final Decision ALWAYS_OFF_DECISION = new SimpleDecision(/* decision= */ false);\n+  private static final Decision EMPTY_SAMPLED_DECISION =\n+      DecisionImpl.createWithoutAttributes(/* decision= */ true);\n+  private static final Decision EMPTY_NOT_SAMPLED_DECISION =\n+      DecisionImpl.createWithoutAttributes(/* decision= */ false);\n+\n+  /**\n+   * Probability value used by a probability-based Span sampling strategy.\n+   *\n+   * <p>Note: This will need to be updated if a specification for this value is merged which changes\n+   * this proposed value. Also, once it's in the spec, we should move it somewhere more visible.\n+   *\n+   * <p>See https://github.com/open-telemetry/opentelemetry-specification/pull/570\n+   */\n+  // Visible for tests.\n+  static final DoubleAttributeSetter SAMPLING_PROBABILITY =\n+      DoubleAttributeSetter.create(\"sampling.probability\");\n \n   // No instance of this class.\n   private Samplers() {}\n"}}, {"oid": "4ace28be07e3c8c526b702b8cd69b3befd05bc44", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/4ace28be07e3c8c526b702b8cd69b3befd05bc44", "message": "Fix build, add unit test.", "committedDate": "2020-05-25T08:41:20Z", "type": "forcePushed"}, {"oid": "920064305c5eaadfd3b527bf298088525a93456a", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/920064305c5eaadfd3b527bf298088525a93456a", "message": "Fix build, add unit test.", "committedDate": "2020-05-25T08:46:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyMTg3Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1256#discussion_r430121872", "bodyText": "What about having just a decision(bool, map) and you would call that with a emptyMap?\npublic static final Decision decision(boolean isSampled, Map<String, AttributeValue> attributes) {\n  Objects.requireNotNull(attributes, \"attributes\");\n  if (attributes.isEmpty()) {\n    return isSampled ? EMPTY_SAMPLED_DECISION : EMPTY_NOT_SAMPLED_DECISION;\n  }\n  return DecisionImpl.create(isSampled, attributes);\n}", "author": "bogdandrutu", "createdAt": "2020-05-26T02:06:52Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java", "diffHunk": "@@ -63,6 +63,20 @@\n   // No instance of this class.\n   private Samplers() {}\n \n+  /**\n+   * Returns a {@link Decision} with empty attributes and {@link Decision#isSampled()} returning the\n+   * value of the parameter {@code isSampled}.\n+   *\n+   * <p>This is meant for use by custom {@link Sampler} implementations.\n+   *\n+   * @param isSampled The value to return from {@link Decision#isSampled()}.\n+   * @return A {@link Decision} with empty attributes and {@link Decision#isSampled()} returning the\n+   *     value of the parameter {@code isSampled}.\n+   */\n+  public static final Decision emptyDecision(boolean isSampled) {", "originalCommit": "920064305c5eaadfd3b527bf298088525a93456a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIzOTI0Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1256#discussion_r430239242", "bodyText": "Ah, the DecisionImpl was not there when I created the PR I guess \ud83d\ude03  That totally makes sense.", "author": "Oberon00", "createdAt": "2020-05-26T08:23:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyMTg3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3NTIxMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1256#discussion_r430275212", "bodyText": "I added Samplers.decision but decided to keep emptyDecision, since using the explicit empty map is quite a mouthful (CheckStyle even requires a parameter comment for the sampled boolean) and it is needed in the implementation anyway.", "author": "Oberon00", "createdAt": "2020-05-26T09:22:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyMTg3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ4MDI0NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1256#discussion_r430480245", "bodyText": "What about calling this decision as well?", "author": "bogdandrutu", "createdAt": "2020-05-26T15:00:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyMTg3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ4ODY0OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1256#discussion_r430488648", "bodyText": "I'm fine with either way. Would you prefer that?", "author": "Oberon00", "createdAt": "2020-05-26T15:12:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyMTg3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "596bf995c877b1d0928c9580f2ea038b09ce22d2", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java b/sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java\nindex 66cc760f2..8b05a0c97 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java\n\n@@ -74,9 +74,9 @@ public final class Samplers {\n    *     value of the parameter {@code isSampled}.\n    */\n   public static final Decision emptyDecision(boolean isSampled) {\n-    return isSampled ? EMPTY_SAMPLED_DECISION : EMPTY_NOT_SAMPLED_DECISION;\n+    return isSampled ? ALWAYS_ON_DECISION : ALWAYS_OFF_DECISION;\n   }\n-\n+  \n   /**\n    * Returns a {@link Sampler} that always makes a \"yes\" decision on {@link Span} sampling.\n    *\n"}}, {"oid": "596bf995c877b1d0928c9580f2ea038b09ce22d2", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/596bf995c877b1d0928c9580f2ea038b09ce22d2", "message": "Add public Samplers.emptyDecision(boolean).\n\nThis is meant for use by custom Sampler implementations. As of now, you have to use an anonymous inner class or otherwise derive a new class because there is no publicly accessible implementation of Decision.", "committedDate": "2020-05-26T08:47:52Z", "type": "commit"}, {"oid": "e71149967450ae448986c121022691fd9644c351", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e71149967450ae448986c121022691fd9644c351", "message": "Fix build, add unit test.", "committedDate": "2020-05-26T08:47:53Z", "type": "commit"}, {"oid": "62173ad8cbba5b1c1f5cb4280104a0d914d67b60", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/62173ad8cbba5b1c1f5cb4280104a0d914d67b60", "message": "Add Samplers.decision(boolean, Map).\n\nCo-authored-by: Bogdan Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-05-26T09:20:03Z", "type": "commit"}, {"oid": "62173ad8cbba5b1c1f5cb4280104a0d914d67b60", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/62173ad8cbba5b1c1f5cb4280104a0d914d67b60", "message": "Add Samplers.decision(boolean, Map).\n\nCo-authored-by: Bogdan Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-05-26T09:20:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUzNDg2OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1256#discussion_r430534868", "bodyText": "Just having this note in here, rather than copying the attributes, feels too weak. If having the map be non-modified is truly a hard requirement, the API should protect itself, rather than relying on implementors to read this javadoc.", "author": "jkwatson", "createdAt": "2020-05-26T16:11:41Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java", "diffHunk": "@@ -63,6 +64,45 @@\n   // No instance of this class.\n   private Samplers() {}\n \n+  /**\n+   * Returns a {@link Decision} with the given {@code attributes} and {@link Decision#isSampled()}\n+   * returning {@code isSampled}.\n+   *\n+   * <p>This is meant for use by custom {@link Sampler} implementations.\n+   *\n+   * <p>Using {@link #emptyDecision(boolean)} instead of this method is slightly faster and shorter\n+   * if you don't need attributes.\n+   *\n+   * @param isSampled The value to return from {@link Decision#isSampled()}.\n+   * @param attributes The attributes to return from {@link Decision#getAttributes()}. A different\n+   *     object instance with the same elements may be returned. The map must not be modified after\n+   *     being passed to this function. Use {@link Collections#emptyMap()} for an empty decision.", "originalCommit": "62173ad8cbba5b1c1f5cb4280104a0d914d67b60", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUzNzM2OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1256#discussion_r430537368", "bodyText": "First, I think this is an SDK-only API that will only be used by sampler implementations. An \"advanced\" API so to speak. If I knew that this function was uselessly copying my map, I would rather write my own replacement for efficiency.\nSecond, in the currently only usage of the Sampler the attributes are actually copied into the span right-away, so I think ignoring this note won't actually do any harm.", "author": "Oberon00", "createdAt": "2020-05-26T16:15:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUzNDg2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUzODY4Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1256#discussion_r430538687", "bodyText": "Then the word \"must\" here seems overly strong, and possibly misleading. Can you update the javadoc to reflect the reality of the situation?", "author": "jkwatson", "createdAt": "2020-05-26T16:17:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUzNDg2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU0MTAwMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1256#discussion_r430541003", "bodyText": "Hmm, I wouldn't place too much value on the second point, as the usage of the sampler may change in the future. So anyone who reads the javadoc certainly MUST NOT modify this later.", "author": "Oberon00", "createdAt": "2020-05-26T16:20:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUzNDg2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU1OTMzMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1256#discussion_r430559332", "bodyText": "All I'm saying is: If this is an important constraint, then we should either a) enforce it via code or b) clearly explain what the ramifications of violating it are, and not just mention it offhand in attribute documentation.", "author": "jkwatson", "createdAt": "2020-05-26T16:46:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUzNDg2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU2ODk5OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1256#discussion_r430568999", "bodyText": "Unfortunately I think a) is not possible without losing efficiency. And I think with b) we would over-constrain ourselves regarding future changes.", "author": "Oberon00", "createdAt": "2020-05-26T17:01:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUzNDg2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU3Mjk3Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1256#discussion_r430572973", "bodyText": "How about adding a line to the javadoc, not in the attributes section like this:\nYou should not modify the contents of the attributes after passing them to this function. If you modify the contents of the attributes after passing them to this function, behavior is not well defined.", "author": "jkwatson", "createdAt": "2020-05-26T17:08:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUzNDg2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYxNzEzMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1256#discussion_r430617130", "bodyText": "a) is not possible without losing efficiency.\n\nConfused about this, you should cache the result if performance is important, otherwise it is good to have your own implementation of the Decision where you ensure the immutable part differently.\nHaving an API that relies on these kind of comments is not safe and we cannot guarantee correctness (we can NLP or other exceptions if the user changes the map while we are reading it).", "author": "bogdandrutu", "createdAt": "2020-05-26T18:22:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUzNDg2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYyNTU4NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1256#discussion_r430625585", "bodyText": "you should cache the result if performance is important\n\nGood point actually. I think you convinced me that it is better to copy the attributes after all. I will add this to Decision.create.", "author": "Oberon00", "createdAt": "2020-05-26T18:37:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUzNDg2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIwODM1NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1256#discussion_r431208354", "bodyText": "Waiting for this :)", "author": "bogdandrutu", "createdAt": "2020-05-27T15:00:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUzNDg2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM0MDk3Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1256#discussion_r431340972", "bodyText": "Done! I used ImmutableMap.copyOf and also fixed the javadoc.", "author": "Oberon00", "createdAt": "2020-05-27T18:02:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUzNDg2OA=="}], "type": "inlineReview", "revised_code": {"commit": "de83c10f978d1cd283ef0342e75cf7426dbfa186", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java b/sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java\nindex 642fa9799..c6ecf6665 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java\n\n@@ -75,16 +77,16 @@ public final class Samplers {\n    *\n    * @param isSampled The value to return from {@link Decision#isSampled()}.\n    * @param attributes The attributes to return from {@link Decision#getAttributes()}. A different\n-   *     object instance with the same elements may be returned. The map must not be modified after\n-   *     being passed to this function. Use {@link Collections#emptyMap()} for an empty decision.\n+   *     object instance with the same elements may be returned.\n    * @return A {@link Decision} with the attributes equivalent to {@code attributes} and {@link\n    *     Decision#isSampled()} returning {@code isSampled}.\n    */\n-  public static final Decision decision(boolean isSampled, Map<String, AttributeValue> attributes) {\n+  public static final Decision decision(\n+      boolean isSampled, @Nonnull Map<String, AttributeValue> attributes) {\n     Objects.requireNonNull(attributes, \"attributes\");\n     return attributes.isEmpty()\n         ? emptyDecision(isSampled)\n-        : DecisionImpl.create(isSampled, attributes);\n+        : DecisionImpl.create(isSampled, ImmutableMap.copyOf(attributes));\n   }\n \n   /**\n"}}, {"oid": "de83c10f978d1cd283ef0342e75cf7426dbfa186", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/de83c10f978d1cd283ef0342e75cf7426dbfa186", "message": "Copy decision attributes, fix comment.", "committedDate": "2020-05-27T18:01:50Z", "type": "commit"}]}