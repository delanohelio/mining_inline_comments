{"pr_number": 865, "pr_title": "Extract descriptor fields for Instrument and use autovalue", "pr_createdAt": "2020-02-15T22:15:51Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/865", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzNTE1NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/865#discussion_r379935154", "bodyText": "should this include the library info, so two libraries could have the same instrument descriptor, and not collide?", "author": "jkwatson", "createdAt": "2020-02-16T21:33:34Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractInstrument.java", "diffHunk": "@@ -92,21 +62,12 @@ public boolean equals(Object o) {\n \n     AbstractInstrument that = (AbstractInstrument) o;\n \n-    return name.equals(that.name)\n-        && description.equals(that.description)\n-        && unit.equals(that.unit)\n-        && constantLabels.equals(that.constantLabels)\n-        && labelKeys.equals(that.labelKeys);\n+    return descriptor.equals(that.descriptor);", "originalCommit": "1c93bafac2ddc9c3ef74eb7c8fbaf35ac3c62062", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ5MTE0Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/865#discussion_r381491143", "bodyText": "The instrument descriptor has to be unique inside a MeterSdk which is uniquely identified by the LibraryInfo, so I don't think we should include the LibraryInfo", "author": "bogdandrutu", "createdAt": "2020-02-19T19:21:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzNTE1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUwODAzMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/865#discussion_r381508030", "bodyText": "ah, yes. that makes sense.  \ud83d\udc4d", "author": "jkwatson", "createdAt": "2020-02-19T19:52:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzNTE1NA=="}], "type": "inlineReview", "revised_code": {"commit": "b754143fc87a72c338aac913f1090112e2ee5abd", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractInstrument.java b/sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractInstrument.java\nindex 94913fd6e..943012ccf 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractInstrument.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractInstrument.java\n\n@@ -70,15 +73,74 @@ abstract class AbstractInstrument implements Instrument {\n     return descriptor.hashCode();\n   }\n \n-  static InstrumentType getCounterInstrumentType(boolean monotonic) {\n-    return monotonic ? InstrumentType.COUNTER_MONOTONIC : InstrumentType.COUNTER_NON_MONOTONIC;\n-  }\n+  abstract static class Builder<B extends Instrument.Builder<B, V>, V>\n+      implements Instrument.Builder<B, V> {\n+    /* VisibleForTesting */ static final int NAME_MAX_LENGTH = 255;\n+    /* VisibleForTesting */ static final String ERROR_MESSAGE_INVALID_NAME =\n+        \"Name should be a ASCII string with a length no greater than \"\n+            + NAME_MAX_LENGTH\n+            + \" characters.\";\n \n-  static InstrumentType getMeasureInstrumentType(boolean absolute) {\n-    return absolute ? InstrumentType.MEASURE_ABSOLUTE : InstrumentType.MEASURE_NON_ABSOLUTE;\n-  }\n+    private final String name;\n+    private final MeterProviderSharedState meterProviderSharedState;\n+    private final InstrumentationLibraryInfo instrumentationLibraryInfo;\n+    private String description = \"\";\n+    private String unit = \"1\";\n+    private List<String> labelKeys = Collections.emptyList();\n+    private Map<String, String> constantLabels = Collections.emptyMap();\n+\n+    Builder(\n+        String name,\n+        MeterProviderSharedState meterProviderSharedState,\n+        InstrumentationLibraryInfo instrumentationLibraryInfo) {\n+      Utils.checkNotNull(name, \"name\");\n+      Utils.checkArgument(\n+          StringUtils.isValidMetricName(name) && name.length() <= NAME_MAX_LENGTH,\n+          ERROR_MESSAGE_INVALID_NAME);\n+      this.name = name;\n+      this.meterProviderSharedState = meterProviderSharedState;\n+      this.instrumentationLibraryInfo = instrumentationLibraryInfo;\n+    }\n+\n+    @Override\n+    public final B setDescription(String description) {\n+      this.description = Utils.checkNotNull(description, \"description\");\n+      return getThis();\n+    }\n+\n+    @Override\n+    public final B setUnit(String unit) {\n+      this.unit = Utils.checkNotNull(unit, \"unit\");\n+      return getThis();\n+    }\n+\n+    @Override\n+    public final B setLabelKeys(List<String> labelKeys) {\n+      Utils.checkListElementNotNull(Utils.checkNotNull(labelKeys, \"labelKeys\"), \"labelKey\");\n+      this.labelKeys = Collections.unmodifiableList(new ArrayList<>(labelKeys));\n+      return getThis();\n+    }\n+\n+    @Override\n+    public final B setConstantLabels(Map<String, String> constantLabels) {\n+      Utils.checkMapKeysNotNull(\n+          Utils.checkNotNull(constantLabels, \"constantLabels\"), \"constantLabel\");\n+      this.constantLabels = Collections.unmodifiableMap(new HashMap<>(constantLabels));\n+      return getThis();\n+    }\n+\n+    final MeterProviderSharedState getMeterProviderSharedState() {\n+      return meterProviderSharedState;\n+    }\n+\n+    final InstrumentationLibraryInfo getInstrumentationLibraryInfo() {\n+      return instrumentationLibraryInfo;\n+    }\n+\n+    final InstrumentDescriptor getInstrumentDescriptor() {\n+      return InstrumentDescriptor.create(name, description, unit, constantLabels, labelKeys);\n+    }\n \n-  static InstrumentType getObserverInstrumentType(boolean monotonic) {\n-    return monotonic ? InstrumentType.OBSERVER_MONOTONIC : InstrumentType.OBSERVER_NON_MONOTONIC;\n+    abstract B getThis();\n   }\n }\n"}}, {"oid": "b754143fc87a72c338aac913f1090112e2ee5abd", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b754143fc87a72c338aac913f1090112e2ee5abd", "message": "Extract descriptor fields for Instrument and use autovalue\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-19T19:47:51Z", "type": "forcePushed"}, {"oid": "faafe3b2a2d0c6b3bd2570122bf0104aacfa84df", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/faafe3b2a2d0c6b3bd2570122bf0104aacfa84df", "message": "Extract descriptor fields for Instrument and use autovalue\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-19T21:50:20Z", "type": "commit"}, {"oid": "faafe3b2a2d0c6b3bd2570122bf0104aacfa84df", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/faafe3b2a2d0c6b3bd2570122bf0104aacfa84df", "message": "Extract descriptor fields for Instrument and use autovalue\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-19T21:50:20Z", "type": "forcePushed"}]}