{"pr_number": 1227, "pr_title": "Move the span operations inside the scope in the http server example", "pr_createdAt": "2020-05-15T16:36:03Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1227", "timeline": [{"oid": "d9e432a4f3550082e2c7a5126bb8a615e21a48aa", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d9e432a4f3550082e2c7a5126bb8a615e21a48aa", "message": "Move the span operations inside the scope, to show better idiomatic usage of the API.", "committedDate": "2020-05-15T16:34:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkyMDMwOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1227#discussion_r425920309", "bodyText": "(This heh golang style param name distracts me, hah)", "author": "carlosalberto", "createdAt": "2020-05-15T16:38:26Z", "path": "examples/http/src/main/java/io/opentelemetry/example/http/HttpServer.java", "diffHunk": "@@ -55,25 +55,26 @@ public void handle(HttpExchange he) throws IOException {\n       try (Scope scope = ContextUtils.withScopedContext(ctx)) {\n         // Build a span automatically using the received context\n         span = spanBuilder.startSpan();\n-      }\n \n-      // Set the Semantic Convention\n-      span.setAttribute(\"component\", \"http\");\n-      span.setAttribute(\"http.method\", \"GET\");\n-      /*\n-      One of the following is required:\n-      - http.scheme, http.host, http.target\n-      - http.scheme, http.server_name, net.host.port, http.target\n-      - http.scheme, net.host.name, net.host.port, http.target\n-      - http.url\n-      */\n-      span.setAttribute(\"http.scheme\", \"http\");\n-      span.setAttribute(\"http.host\", \"localhost:\" + HttpServer.port);\n-      span.setAttribute(\"http.target\", \"/\");\n-      // Process the request\n-      answer(he, span);\n-      // Close the span\n-      span.end();\n+        // Set the Semantic Convention\n+        span.setAttribute(\"component\", \"http\");\n+        span.setAttribute(\"http.method\", \"GET\");\n+        /*\n+         One of the following is required:\n+         - http.scheme, http.host, http.target\n+         - http.scheme, http.server_name, net.host.port, http.target\n+         - http.scheme, net.host.name, net.host.port, http.target\n+         - http.url\n+        */\n+        span.setAttribute(\"http.scheme\", \"http\");\n+        span.setAttribute(\"http.host\", \"localhost:\" + HttpServer.port);\n+        span.setAttribute(\"http.target\", \"/\");\n+        // Process the request\n+        answer(he, span);", "originalCommit": "d9e432a4f3550082e2c7a5126bb8a615e21a48aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkyNzE5NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1227#discussion_r425927194", "bodyText": "fixed!", "author": "jkwatson", "createdAt": "2020-05-15T16:51:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkyMDMwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "694ae4c1e09c93cd6bebe01870170800a4ad5864", "chunk": "diff --git a/examples/http/src/main/java/io/opentelemetry/example/http/HttpServer.java b/examples/http/src/main/java/io/opentelemetry/example/http/HttpServer.java\nindex 12ef7d2eb..ad86c3bc6 100644\n--- a/examples/http/src/main/java/io/opentelemetry/example/http/HttpServer.java\n+++ b/examples/http/src/main/java/io/opentelemetry/example/http/HttpServer.java\n\n@@ -51,7 +51,7 @@ public class HttpServer {\n \n       // Extract the context from the HTTP request\n       Context ctx =\n-          OpenTelemetry.getPropagators().getHttpTextFormat().extract(Context.current(), he, getter);\n+          OpenTelemetry.getPropagators().getHttpTextFormat().extract(Context.current(), exchange, getter);\n       try (Scope scope = ContextUtils.withScopedContext(ctx)) {\n         // Build a span automatically using the received context\n         span = spanBuilder.startSpan();\n"}}, {"oid": "694ae4c1e09c93cd6bebe01870170800a4ad5864", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/694ae4c1e09c93cd6bebe01870170800a4ad5864", "message": "rename parameter", "committedDate": "2020-05-15T16:50:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkyOTgzMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1227#discussion_r425929831", "bodyText": "Confused a bit and I would rewrite:\n      // Extract the context from the HTTP request\n      Context context =\n          OpenTelemetry.getPropagators().getHttpTextFormat().extract(Context.current(), he, getter);\n          OpenTelemetry.getPropagators().getHttpTextFormat().extract(Context.current(), exchange, getter);\n\n      Span.Builder spanBuilder = tracer.spanBuilder(\"/\").setSpanKind(Span.Kind.SERVER).setParent(TraceContextUtils.getSpan(context));\n      Span span = spanBuilder.startSpan();\n\ntry (Scope scope = TraceContextUtils.withSpan(span)) {\n        // Set the Semantic Convention\n        span.setAttribute(\"component\", \"http\");\n        span.setAttribute(\"http.method\", \"GET\");\n        /*\n         One of the following is required:\n         - http.scheme, http.host, http.target\n         - http.scheme, http.server_name, net.host.port, http.target\n         - http.scheme, net.host.name, net.host.port, http.target\n         - http.url\n        */\n        span.setAttribute(\"http.scheme\", \"http\");\n        span.setAttribute(\"http.host\", \"localhost:\" + HttpServer.port);\n        span.setAttribute(\"http.target\", \"/\");\n        // Process the request\n        answer(exchange, span);\n      } finally {\n        // Close the span\n        span.end();\n      }", "author": "bogdandrutu", "createdAt": "2020-05-15T16:56:25Z", "path": "examples/http/src/main/java/io/opentelemetry/example/http/HttpServer.java", "diffHunk": "@@ -40,40 +40,41 @@\n \n public class HttpServer {\n \n-  private class HelloHandler implements HttpHandler {\n+  private static class HelloHandler implements HttpHandler {\n \n     @Override\n-    public void handle(HttpExchange he) throws IOException {\n+    public void handle(HttpExchange exchange) throws IOException {\n       // Name convention for the Span is not yet defined.\n       // See: https://github.com/open-telemetry/opentelemetry-specification/issues/270\n       Span.Builder spanBuilder = tracer.spanBuilder(\"/\").setSpanKind(Span.Kind.SERVER);\n       Span span = null;\n \n       // Extract the context from the HTTP request\n       Context ctx =\n-          OpenTelemetry.getPropagators().getHttpTextFormat().extract(Context.current(), he, getter);\n+          OpenTelemetry.getPropagators().getHttpTextFormat().extract(Context.current(), exchange, getter);\n       try (Scope scope = ContextUtils.withScopedContext(ctx)) {\n         // Build a span automatically using the received context\n         span = spanBuilder.startSpan();\n-      }\n \n-      // Set the Semantic Convention\n-      span.setAttribute(\"component\", \"http\");\n-      span.setAttribute(\"http.method\", \"GET\");\n-      /*\n-      One of the following is required:\n-      - http.scheme, http.host, http.target\n-      - http.scheme, http.server_name, net.host.port, http.target\n-      - http.scheme, net.host.name, net.host.port, http.target\n-      - http.url\n-      */\n-      span.setAttribute(\"http.scheme\", \"http\");\n-      span.setAttribute(\"http.host\", \"localhost:\" + HttpServer.port);\n-      span.setAttribute(\"http.target\", \"/\");\n-      // Process the request\n-      answer(he, span);\n-      // Close the span\n-      span.end();\n+        // Set the Semantic Convention\n+        span.setAttribute(\"component\", \"http\");\n+        span.setAttribute(\"http.method\", \"GET\");\n+        /*\n+         One of the following is required:\n+         - http.scheme, http.host, http.target\n+         - http.scheme, http.server_name, net.host.port, http.target\n+         - http.scheme, net.host.name, net.host.port, http.target\n+         - http.url\n+        */\n+        span.setAttribute(\"http.scheme\", \"http\");\n+        span.setAttribute(\"http.host\", \"localhost:\" + HttpServer.port);\n+        span.setAttribute(\"http.target\", \"/\");\n+        // Process the request\n+        answer(exchange, span);\n+      } finally {\n+        // Close the span\n+        span.end();\n+      }", "originalCommit": "694ae4c1e09c93cd6bebe01870170800a4ad5864", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk0MDkxMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1227#discussion_r425940912", "bodyText": "good point. I will update.", "author": "jkwatson", "createdAt": "2020-05-15T17:17:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkyOTgzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk0NjI1Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1227#discussion_r425946257", "bodyText": "done!", "author": "jkwatson", "createdAt": "2020-05-15T17:28:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkyOTgzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "70dd8193ae65d6d87d8c3cb833691f6e62ccdaf3", "chunk": "diff --git a/examples/http/src/main/java/io/opentelemetry/example/http/HttpServer.java b/examples/http/src/main/java/io/opentelemetry/example/http/HttpServer.java\nindex ad86c3bc6..9646b4d93 100644\n--- a/examples/http/src/main/java/io/opentelemetry/example/http/HttpServer.java\n+++ b/examples/http/src/main/java/io/opentelemetry/example/http/HttpServer.java\n\n@@ -47,14 +47,14 @@ public class HttpServer {\n       // Name convention for the Span is not yet defined.\n       // See: https://github.com/open-telemetry/opentelemetry-specification/issues/270\n       Span.Builder spanBuilder = tracer.spanBuilder(\"/\").setSpanKind(Span.Kind.SERVER);\n-      Span span = null;\n \n       // Extract the context from the HTTP request\n       Context ctx =\n           OpenTelemetry.getPropagators().getHttpTextFormat().extract(Context.current(), exchange, getter);\n+\n+      Span span = spanBuilder.startSpan();\n       try (Scope scope = ContextUtils.withScopedContext(ctx)) {\n         // Build a span automatically using the received context\n-        span = spanBuilder.startSpan();\n \n         // Set the Semantic Convention\n         span.setAttribute(\"component\", \"http\");\n"}}, {"oid": "70dd8193ae65d6d87d8c3cb833691f6e62ccdaf3", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/70dd8193ae65d6d87d8c3cb833691f6e62ccdaf3", "message": "update to start the span before it is added to the scope", "committedDate": "2020-05-15T17:19:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk1MzgxMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1227#discussion_r425953810", "bodyText": "This should be with the new Span.", "author": "bogdandrutu", "createdAt": "2020-05-15T17:43:35Z", "path": "examples/http/src/main/java/io/opentelemetry/example/http/HttpServer.java", "diffHunk": "@@ -40,40 +40,41 @@\n \n public class HttpServer {\n \n-  private class HelloHandler implements HttpHandler {\n+  private static class HelloHandler implements HttpHandler {\n \n     @Override\n-    public void handle(HttpExchange he) throws IOException {\n+    public void handle(HttpExchange exchange) throws IOException {\n       // Name convention for the Span is not yet defined.\n       // See: https://github.com/open-telemetry/opentelemetry-specification/issues/270\n       Span.Builder spanBuilder = tracer.spanBuilder(\"/\").setSpanKind(Span.Kind.SERVER);\n-      Span span = null;\n \n       // Extract the context from the HTTP request\n       Context ctx =\n-          OpenTelemetry.getPropagators().getHttpTextFormat().extract(Context.current(), he, getter);\n+          OpenTelemetry.getPropagators().getHttpTextFormat().extract(Context.current(), exchange, getter);\n+\n+      Span span = spanBuilder.startSpan();\n       try (Scope scope = ContextUtils.withScopedContext(ctx)) {", "originalCommit": "70dd8193ae65d6d87d8c3cb833691f6e62ccdaf3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk2NTc0NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1227#discussion_r425965745", "bodyText": "you are correct. this example had some issues.  :)", "author": "jkwatson", "createdAt": "2020-05-15T18:07:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk1MzgxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk2OTM3Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1227#discussion_r425969377", "bodyText": "Probably that was me. I updated this example in a hurry among all the Context Prop changes and may have missed important bits here and there ;(", "author": "carlosalberto", "createdAt": "2020-05-15T18:14:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk1MzgxMA=="}], "type": "inlineReview", "revised_code": {"commit": "d12a7643efb93aadd5a06c3bcd0817162aba0446", "chunk": "diff --git a/examples/http/src/main/java/io/opentelemetry/example/http/HttpServer.java b/examples/http/src/main/java/io/opentelemetry/example/http/HttpServer.java\nindex 9646b4d93..30486701d 100644\n--- a/examples/http/src/main/java/io/opentelemetry/example/http/HttpServer.java\n+++ b/examples/http/src/main/java/io/opentelemetry/example/http/HttpServer.java\n\n@@ -46,16 +46,21 @@ public class HttpServer {\n     public void handle(HttpExchange exchange) throws IOException {\n       // Name convention for the Span is not yet defined.\n       // See: https://github.com/open-telemetry/opentelemetry-specification/issues/270\n-      Span.Builder spanBuilder = tracer.spanBuilder(\"/\").setSpanKind(Span.Kind.SERVER);\n \n       // Extract the context from the HTTP request\n-      Context ctx =\n-          OpenTelemetry.getPropagators().getHttpTextFormat().extract(Context.current(), exchange, getter);\n-\n-      Span span = spanBuilder.startSpan();\n-      try (Scope scope = ContextUtils.withScopedContext(ctx)) {\n-        // Build a span automatically using the received context\n-\n+      Context context =\n+          OpenTelemetry.getPropagators()\n+              .getHttpTextFormat()\n+              .extract(Context.current(), exchange, getter);\n+\n+      Span span =\n+          tracer\n+              .spanBuilder(\"/\")\n+              .setParent(TracingContextUtils.getSpan(context))\n+              .setSpanKind(Span.Kind.SERVER)\n+              .startSpan();\n+\n+      try (Scope scope = tracer.withSpan(span)) {\n         // Set the Semantic Convention\n         span.setAttribute(\"component\", \"http\");\n         span.setAttribute(\"http.method\", \"GET\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk1Mzk4MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1227#discussion_r425953981", "bodyText": "Need to set as parent the Span from the returned context in the Builder.", "author": "bogdandrutu", "createdAt": "2020-05-15T17:43:55Z", "path": "examples/http/src/main/java/io/opentelemetry/example/http/HttpServer.java", "diffHunk": "@@ -40,40 +40,41 @@\n \n public class HttpServer {\n \n-  private class HelloHandler implements HttpHandler {\n+  private static class HelloHandler implements HttpHandler {\n \n     @Override\n-    public void handle(HttpExchange he) throws IOException {\n+    public void handle(HttpExchange exchange) throws IOException {\n       // Name convention for the Span is not yet defined.\n       // See: https://github.com/open-telemetry/opentelemetry-specification/issues/270\n       Span.Builder spanBuilder = tracer.spanBuilder(\"/\").setSpanKind(Span.Kind.SERVER);\n-      Span span = null;\n \n       // Extract the context from the HTTP request\n       Context ctx =\n-          OpenTelemetry.getPropagators().getHttpTextFormat().extract(Context.current(), he, getter);\n+          OpenTelemetry.getPropagators().getHttpTextFormat().extract(Context.current(), exchange, getter);", "originalCommit": "70dd8193ae65d6d87d8c3cb833691f6e62ccdaf3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d12a7643efb93aadd5a06c3bcd0817162aba0446", "chunk": "diff --git a/examples/http/src/main/java/io/opentelemetry/example/http/HttpServer.java b/examples/http/src/main/java/io/opentelemetry/example/http/HttpServer.java\nindex 9646b4d93..30486701d 100644\n--- a/examples/http/src/main/java/io/opentelemetry/example/http/HttpServer.java\n+++ b/examples/http/src/main/java/io/opentelemetry/example/http/HttpServer.java\n\n@@ -46,16 +46,21 @@ public class HttpServer {\n     public void handle(HttpExchange exchange) throws IOException {\n       // Name convention for the Span is not yet defined.\n       // See: https://github.com/open-telemetry/opentelemetry-specification/issues/270\n-      Span.Builder spanBuilder = tracer.spanBuilder(\"/\").setSpanKind(Span.Kind.SERVER);\n \n       // Extract the context from the HTTP request\n-      Context ctx =\n-          OpenTelemetry.getPropagators().getHttpTextFormat().extract(Context.current(), exchange, getter);\n-\n-      Span span = spanBuilder.startSpan();\n-      try (Scope scope = ContextUtils.withScopedContext(ctx)) {\n-        // Build a span automatically using the received context\n-\n+      Context context =\n+          OpenTelemetry.getPropagators()\n+              .getHttpTextFormat()\n+              .extract(Context.current(), exchange, getter);\n+\n+      Span span =\n+          tracer\n+              .spanBuilder(\"/\")\n+              .setParent(TracingContextUtils.getSpan(context))\n+              .setSpanKind(Span.Kind.SERVER)\n+              .startSpan();\n+\n+      try (Scope scope = tracer.withSpan(span)) {\n         // Set the Semantic Convention\n         span.setAttribute(\"component\", \"http\");\n         span.setAttribute(\"http.method\", \"GET\");\n"}}, {"oid": "d12a7643efb93aadd5a06c3bcd0817162aba0446", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d12a7643efb93aadd5a06c3bcd0817162aba0446", "message": "properly parent the newly created span.", "committedDate": "2020-05-15T18:08:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk2NjU5Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1227#discussion_r425966592", "bodyText": "is this the best way to get the parent?", "author": "jkwatson", "createdAt": "2020-05-15T18:08:53Z", "path": "examples/http/src/main/java/io/opentelemetry/example/http/HttpServer.java", "diffHunk": "@@ -40,40 +40,46 @@\n \n public class HttpServer {\n \n-  private class HelloHandler implements HttpHandler {\n+  private static class HelloHandler implements HttpHandler {\n \n     @Override\n-    public void handle(HttpExchange he) throws IOException {\n+    public void handle(HttpExchange exchange) throws IOException {\n       // Name convention for the Span is not yet defined.\n       // See: https://github.com/open-telemetry/opentelemetry-specification/issues/270\n-      Span.Builder spanBuilder = tracer.spanBuilder(\"/\").setSpanKind(Span.Kind.SERVER);\n-      Span span = null;\n \n       // Extract the context from the HTTP request\n-      Context ctx =\n-          OpenTelemetry.getPropagators().getHttpTextFormat().extract(Context.current(), he, getter);\n-      try (Scope scope = ContextUtils.withScopedContext(ctx)) {\n-        // Build a span automatically using the received context\n-        span = spanBuilder.startSpan();\n+      Context context =\n+          OpenTelemetry.getPropagators()\n+              .getHttpTextFormat()\n+              .extract(Context.current(), exchange, getter);\n+\n+      Span span =\n+          tracer\n+              .spanBuilder(\"/\")\n+              .setParent(TracingContextUtils.getSpan(context))", "originalCommit": "d12a7643efb93aadd5a06c3bcd0817162aba0446", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk2ODg2Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1227#discussion_r425968863", "bodyText": "(Makes me remember I've been longing to remove the dust from some code locally, to have a setContext(Context context) overload).", "author": "carlosalberto", "createdAt": "2020-05-15T18:13:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk2NjU5Mg=="}], "type": "inlineReview", "revised_code": null}]}