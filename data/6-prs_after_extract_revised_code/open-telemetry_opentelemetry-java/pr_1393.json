{"pr_number": 1393, "pr_title": "Added InMemoryMetricExporter", "pr_createdAt": "2020-07-02T06:09:55Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1393", "timeline": [{"oid": "f85de029312edbbf5832ff3a6c1655318ee9f954", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f85de029312edbbf5832ff3a6c1655318ee9f954", "message": "Added InMemoryMetricExporter", "committedDate": "2020-07-02T05:57:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc3NjMyOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1393#discussion_r448776328", "bodyText": "Please, add the copyright", "author": "thisthat", "createdAt": "2020-07-02T06:30:40Z", "path": "exporters/inmemory/src/main/java/io/opentelemetry/exporters/inmemory/InMemoryMetricExporter.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package io.opentelemetry.exporters.inmemory;", "originalCommit": "f85de029312edbbf5832ff3a6c1655318ee9f954", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e61b37b0ba1ed575b4705c69970eae71a540c8e3", "chunk": "diff --git a/exporters/inmemory/src/main/java/io/opentelemetry/exporters/inmemory/InMemoryMetricExporter.java b/exporters/inmemory/src/main/java/io/opentelemetry/exporters/inmemory/InMemoryMetricExporter.java\nindex 63fdffbd3..07d81671d 100644\n--- a/exporters/inmemory/src/main/java/io/opentelemetry/exporters/inmemory/InMemoryMetricExporter.java\n+++ b/exporters/inmemory/src/main/java/io/opentelemetry/exporters/inmemory/InMemoryMetricExporter.java\n\n@@ -1,3 +1,19 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n package io.opentelemetry.exporters.inmemory;\n \n import io.opentelemetry.sdk.metrics.data.MetricData;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc3NjQyNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1393#discussion_r448776425", "bodyText": "Also here the copyright header is missing", "author": "thisthat", "createdAt": "2020-07-02T06:30:57Z", "path": "exporters/inmemory/src/test/java/io/opentelemetry/exporters/inmemory/InMemoryMetricExporterTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package io.opentelemetry.exporters.inmemory;", "originalCommit": "f85de029312edbbf5832ff3a6c1655318ee9f954", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e61b37b0ba1ed575b4705c69970eae71a540c8e3", "chunk": "diff --git a/exporters/inmemory/src/test/java/io/opentelemetry/exporters/inmemory/InMemoryMetricExporterTest.java b/exporters/inmemory/src/test/java/io/opentelemetry/exporters/inmemory/InMemoryMetricExporterTest.java\nindex b47e77334..06195b88c 100644\n--- a/exporters/inmemory/src/test/java/io/opentelemetry/exporters/inmemory/InMemoryMetricExporterTest.java\n+++ b/exporters/inmemory/src/test/java/io/opentelemetry/exporters/inmemory/InMemoryMetricExporterTest.java\n\n@@ -1,5 +1,23 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n package io.opentelemetry.exporters.inmemory;\n \n+import static com.google.common.truth.Truth.assertThat;\n+\n import io.opentelemetry.common.Labels;\n import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n import io.opentelemetry.sdk.metrics.data.MetricData;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc3NzMwMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1393#discussion_r448777302", "bodyText": "Please, add some code in the Javadoc to show the usage of this exporter", "author": "thisthat", "createdAt": "2020-07-02T06:33:10Z", "path": "exporters/inmemory/src/main/java/io/opentelemetry/exporters/inmemory/InMemoryMetricExporter.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package io.opentelemetry.exporters.inmemory;\n+\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import io.opentelemetry.sdk.metrics.export.MetricExporter;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.LinkedBlockingQueue;\n+\n+/**\n+ * A {@link MetricExporter} implementation that can be used to test OpenTelemetry integration.\n+ */", "originalCommit": "f85de029312edbbf5832ff3a6c1655318ee9f954", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e61b37b0ba1ed575b4705c69970eae71a540c8e3", "chunk": "diff --git a/exporters/inmemory/src/main/java/io/opentelemetry/exporters/inmemory/InMemoryMetricExporter.java b/exporters/inmemory/src/main/java/io/opentelemetry/exporters/inmemory/InMemoryMetricExporter.java\nindex 63fdffbd3..07d81671d 100644\n--- a/exporters/inmemory/src/main/java/io/opentelemetry/exporters/inmemory/InMemoryMetricExporter.java\n+++ b/exporters/inmemory/src/main/java/io/opentelemetry/exporters/inmemory/InMemoryMetricExporter.java\n\n@@ -1,3 +1,19 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n package io.opentelemetry.exporters.inmemory;\n \n import io.opentelemetry.sdk.metrics.data.MetricData;\n"}}, {"oid": "e61b37b0ba1ed575b4705c69970eae71a540c8e3", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e61b37b0ba1ed575b4705c69970eae71a540c8e3", "message": "Added Javadoc and copyrights to InMemoryMetricExporter", "committedDate": "2020-07-02T08:42:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg0ODEyMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1393#discussion_r448848122", "bodyText": "nit: 2020", "author": "thisthat", "createdAt": "2020-07-02T08:48:48Z", "path": "exporters/inmemory/src/main/java/io/opentelemetry/exporters/inmemory/InMemoryMetricExporter.java", "diffHunk": "@@ -1,3 +1,19 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors", "originalCommit": "e61b37b0ba1ed575b4705c69970eae71a540c8e3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "141083a6c949fd26936e3ef379e09cd681a1501f", "chunk": "diff --git a/exporters/inmemory/src/main/java/io/opentelemetry/exporters/inmemory/InMemoryMetricExporter.java b/exporters/inmemory/src/main/java/io/opentelemetry/exporters/inmemory/InMemoryMetricExporter.java\nindex 07d81671d..5ef1c17b4 100644\n--- a/exporters/inmemory/src/main/java/io/opentelemetry/exporters/inmemory/InMemoryMetricExporter.java\n+++ b/exporters/inmemory/src/main/java/io/opentelemetry/exporters/inmemory/InMemoryMetricExporter.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2019, OpenTelemetry Authors\n+ * Copyright 2020, OpenTelemetry Authors\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg0ODgzNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1393#discussion_r448848835", "bodyText": "nit: 2020", "author": "thisthat", "createdAt": "2020-07-02T08:50:02Z", "path": "exporters/inmemory/src/test/java/io/opentelemetry/exporters/inmemory/InMemoryMetricExporterTest.java", "diffHunk": "@@ -1,5 +1,23 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors", "originalCommit": "e61b37b0ba1ed575b4705c69970eae71a540c8e3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "141083a6c949fd26936e3ef379e09cd681a1501f", "chunk": "diff --git a/exporters/inmemory/src/test/java/io/opentelemetry/exporters/inmemory/InMemoryMetricExporterTest.java b/exporters/inmemory/src/test/java/io/opentelemetry/exporters/inmemory/InMemoryMetricExporterTest.java\nindex 06195b88c..7d2e4b853 100644\n--- a/exporters/inmemory/src/test/java/io/opentelemetry/exporters/inmemory/InMemoryMetricExporterTest.java\n+++ b/exporters/inmemory/src/test/java/io/opentelemetry/exporters/inmemory/InMemoryMetricExporterTest.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2019, OpenTelemetry Authors\n+ * Copyright 2020, OpenTelemetry Authors\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg1MDk4Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1393#discussion_r448850983", "bodyText": "I would just inline all methods, but setup() and use a single meter. The idea is to have just a minimal example to showcase the usage.", "author": "thisthat", "createdAt": "2020-07-02T08:53:22Z", "path": "exporters/inmemory/src/main/java/io/opentelemetry/exporters/inmemory/InMemoryMetricExporter.java", "diffHunk": "@@ -11,11 +27,68 @@\n \n /**\n  * A {@link MetricExporter} implementation that can be used to test OpenTelemetry integration.\n+ *\n+ * <p>Can be created using {@code InMemoryMetricExporter.create()}\n+ *\n+ * <p>Example usage:\n+ *\n+ * <pre><code>\n+ * public class InMemoryMetricExporterExample {\n+ *\n+ *   // creating InMemoryMetricExporter\n+ *   private final InMemoryMetricExporter exporter = InMemoryMetricExporter.create();\n+ *   private final MeterSdkProvider meterSdkProvider = OpenTelemetrySdk.getMeterProvider();\n+ *   private final Meter meter = meterSdkProvider.get(\"InMemoryMetricExporterExample\");\n+ *   private IntervalMetricReader intervalMetricReader;\n+ *\n+ *   void setup() {\n+ *     intervalMetricReader =\n+ *         IntervalMetricReader.builder()\n+ *             .setMetricExporter(exporter)\n+ *             .setMetricProducers(Collections.singletonList(meterSdkProvider.getMetricProducer()))\n+ *             .setExportIntervalMillis(1000)\n+ *             .build();\n+ *   }\n+ *\n+ *   List&lt;MetricData&gt; readExportedMetrics() {\n+ *     return exporter.getFinishedMetricItems();\n+ *   }\n+ *\n+ *   void shutdown() {\n+ *     intervalMetricReader.shutdown();\n+ *   }\n+ *\n+ *   LongCounter generateLongMeter(String name) {\n+ *     return meter.longCounterBuilder(name).setDescription(\"Sample LongCounter\").build();\n+ *   }\n+ *\n+ *   DoubleCounter generateDoubleMeter(String name) {\n+ *     return meter.doubleCounterBuilder(name).setDescription(\"Sample DoubleCounter\").build();\n+ *   }\n+ *\n+ *\n+ *   public static void main(String[] args) throws InterruptedException {\n+ *     InMemoryMetricExporterExample example = new InMemoryMetricExporterExample();\n+ *\n+ *     example.setup();\n+ *     example.generateLongMeter(\"counter-1\");", "originalCommit": "e61b37b0ba1ed575b4705c69970eae71a540c8e3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "141083a6c949fd26936e3ef379e09cd681a1501f", "chunk": "diff --git a/exporters/inmemory/src/main/java/io/opentelemetry/exporters/inmemory/InMemoryMetricExporter.java b/exporters/inmemory/src/main/java/io/opentelemetry/exporters/inmemory/InMemoryMetricExporter.java\nindex 07d81671d..5ef1c17b4 100644\n--- a/exporters/inmemory/src/main/java/io/opentelemetry/exporters/inmemory/InMemoryMetricExporter.java\n+++ b/exporters/inmemory/src/main/java/io/opentelemetry/exporters/inmemory/InMemoryMetricExporter.java\n\n@@ -50,37 +50,14 @@ import java.util.concurrent.LinkedBlockingQueue;\n  *             .build();\n  *   }\n  *\n- *   List&lt;MetricData&gt; readExportedMetrics() {\n- *     return exporter.getFinishedMetricItems();\n- *   }\n- *\n- *   void shutdown() {\n- *     intervalMetricReader.shutdown();\n- *   }\n- *\n- *   LongCounter generateLongMeter(String name) {\n+ *   LongCounter generateLongCounterMeter(String name) {\n  *     return meter.longCounterBuilder(name).setDescription(\"Sample LongCounter\").build();\n  *   }\n  *\n- *   DoubleCounter generateDoubleMeter(String name) {\n- *     return meter.doubleCounterBuilder(name).setDescription(\"Sample DoubleCounter\").build();\n- *   }\n- *\n- *\n  *   public static void main(String[] args) throws InterruptedException {\n  *     InMemoryMetricExporterExample example = new InMemoryMetricExporterExample();\n- *\n  *     example.setup();\n- *     example.generateLongMeter(\"counter-1\");\n- *     example.generateDoubleMeter(\"counter-2\");\n- *     example.generateLongMeter(\"counter-3\");\n- *     // Delaying so that IntervalMetricReader could pull Metrics from MetricProducer and push them to\n- *     // MetricExporter\n- *     Thread.sleep(2000);\n- *     List&lt;MetricData&gt; metricDataList = example.readExportedMetrics();\n- *     System.out.println(metricDataList);\n- *     example.shutdown();\n- *     System.out.println(\"Bye\");\n+ *     example.generateLongCounterMeter(\"counter-1\");\n  *   }\n  * }\n  * </code></pre>\n"}}, {"oid": "141083a6c949fd26936e3ef379e09cd681a1501f", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/141083a6c949fd26936e3ef379e09cd681a1501f", "message": "Edited Javadoc and copyright info in InMemoryMetricExporter", "committedDate": "2020-07-02T10:19:19Z", "type": "commit"}]}