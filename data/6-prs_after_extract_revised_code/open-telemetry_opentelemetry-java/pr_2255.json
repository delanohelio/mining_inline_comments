{"pr_number": 2255, "pr_title": "Rename accumulator to processor to match Go", "pr_createdAt": "2020-12-10T01:49:07Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/2255", "timeline": [{"oid": "6a62c7a3a21a98e48d9291dc04b458c1a839db48", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/6a62c7a3a21a98e48d9291dc04b458c1a839db48", "message": "Rename accumulator to processor to match Go\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-12-10T01:48:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgyNzc4Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2255#discussion_r539827782", "bodyText": "I was following this rename until I hit this. Why are we passing a processor to create a new binding for an instrument? That doesn't seem like the role of the processor to me. I could think that the binding would be registered with the accumulator, not the processor.", "author": "jkwatson", "createdAt": "2020-12-10T04:00:19Z", "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/AbstractSynchronousInstrument.java", "diffHunk": "@@ -68,14 +68,13 @@ public B bind(Labels labels) {\n           // acquire but because we requested a specific value only one will succeed.\n           boundLabels.remove(entry.getKey(), entry.getValue());\n         }\n-        instrumentAccumulator.batch(\n-            entry.getKey(), entry.getValue().getAggregator(), !unmappedEntry);\n+        instrumentProcessor.batch(entry.getKey(), entry.getValue().getAggregator(), !unmappedEntry);\n       }\n-      return instrumentAccumulator.completeCollectionCycle();\n+      return instrumentProcessor.completeCollectionCycle();\n     } finally {\n       collectLock.unlock();\n     }\n   }\n \n-  abstract B newBinding(InstrumentAccumulator instrumentAccumulator);\n+  abstract B newBinding(InstrumentProcessor instrumentProcessor);", "originalCommit": "6a62c7a3a21a98e48d9291dc04b458c1a839db48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgyODMzNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2255#discussion_r539828335", "bodyText": "Actually I need to pass only an Aggregator you can see that all the Bound constructor just call getAggregator. I decided to do that immediately after #2257.", "author": "bogdandrutu", "createdAt": "2020-12-10T04:02:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgyNzc4Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgyOTI4OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2255#discussion_r539829288", "bodyText": "this definitely doesn't feel right to me. The Accumulator should be handling the binding, so it can keep track of when to released the resources associated with the labelset. I don't think that's the job of the Processor, which needs to hold long-term state of all the labelsets against which recordings have been made, even if they're not currently being actively recorded.", "author": "jkwatson", "createdAt": "2020-12-10T04:05:33Z", "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/LongCounterSdk.java", "diffHunk": "@@ -35,15 +34,15 @@ public void add(long increment) {\n   }\n \n   @Override\n-  BoundInstrument newBinding(InstrumentAccumulator instrumentAccumulator) {\n-    return new BoundInstrument(instrumentAccumulator);\n+  BoundInstrument newBinding(InstrumentProcessor instrumentProcessor) {\n+    return new BoundInstrument(instrumentProcessor);", "originalCommit": "6a62c7a3a21a98e48d9291dc04b458c1a839db48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgyOTYwOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2255#discussion_r539829609", "bodyText": "It is not, as explained in the other comment. I think you are keep reviewing this.", "author": "bogdandrutu", "createdAt": "2020-12-10T04:06:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgyOTI4OA=="}], "type": "inlineReview", "revised_code": null}]}