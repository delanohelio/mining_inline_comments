{"pr_number": 1634, "pr_title": "Add FaaS attributes.", "pr_createdAt": "2020-09-11T08:46:33Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1634", "timeline": [{"oid": "2b3da729c608ee48932e636aa36cf2364057e9e6", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/2b3da729c608ee48932e636aa36cf2364057e9e6", "message": "Add FaaS attributes.", "committedDate": "2020-09-11T08:46:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjkxMjUxMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1634#discussion_r486912513", "bodyText": "Should this comment be added to the Javadoc of the respective attributes somehow?", "author": "Oberon00", "createdAt": "2020-09-11T09:33:44Z", "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -291,5 +291,47 @@\n   public static final StringAttributeSetter THREAD_NAME =\n       StringAttributeSetter.create(\"thread.name\");\n \n+  /** Type of the trigger on which the function is executed. */\n+  public static final StringAttributeSetter FAAS_TRIGGER =\n+      StringAttributeSetter.create(\"faas.trigger\");\n+  /** String containing the execution id of the function. */\n+  public static final StringAttributeSetter FAAS_EXECUTION =\n+      StringAttributeSetter.create(\"faas.execution\");\n+  /** Indicates that the serverless function is executed for the first time (aka cold start). */\n+  public static final BooleanAttributeSetter FAAS_COLDSTART =\n+      BooleanAttributeSetter.create(\"faas.coldstart\");\n+  /** The name of the invoked function. */\n+  public static final StringAttributeSetter FAAS_INVOKED_NAME =\n+      StringAttributeSetter.create(\"faas.invoked_name\");\n+  /** The cloud provider of the invoked function. */\n+  public static final StringAttributeSetter FAAS_INVOKED_PROVIDER =\n+      StringAttributeSetter.create(\"faas.invoked_provider\");\n+  /** The cloud region of the invoked function. */\n+  public static final StringAttributeSetter FAAS_INVOKED_REGION =\n+      StringAttributeSetter.create(\"faas.invoked_region\");\n+\n+  // faas.trigger == datasource", "originalCommit": "2b3da729c608ee48932e636aa36cf2364057e9e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjkxNTI3Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1634#discussion_r486915276", "bodyText": "Good idea, thanks", "author": "anuraaga", "createdAt": "2020-09-11T09:36:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjkxMjUxMw=="}], "type": "inlineReview", "revised_code": {"commit": "d128afdc7d9d52ea67bd1bae0302d51d5eacfb40", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java b/api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java\nindex 40f07b43a..737e8c6c5 100644\n--- a/api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java\n+++ b/api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java\n\n@@ -310,27 +310,31 @@ public final class SemanticAttributes {\n   public static final StringAttributeSetter FAAS_INVOKED_REGION =\n       StringAttributeSetter.create(\"faas.invoked_region\");\n \n-  // faas.trigger == datasource\n-  /** The name of the source on which the operation was perfomed. */\n+  /** For faas.trigger == datasource, the name of the source on which the operation was perfomed. */\n   public static final StringAttributeSetter FAAS_DOCUMENT_COLLECTION =\n       StringAttributeSetter.create(\"faas.document.collection\");\n-  /** Describes the type of the operation that was performed on the data. */\n+  /**\n+   * For faas.trigger == datasource, describes the type of the operation that was performed on the\n+   * data.\n+   */\n   public static final StringAttributeSetter FAAS_DOCUMENT_OPERATION =\n       StringAttributeSetter.create(\"faas.document.operation\");\n   /**\n-   * A string containing the time when the data was accessed in the ISO 8601 format expressed in\n-   * UTC.\n+   * For faas.trigger == datasource, a string containing the time when the data was accessed in the\n+   * ISO 8601 format expressed in UTC.\n    */\n   public static final StringAttributeSetter FAAS_DOCUMENT_TIME =\n       StringAttributeSetter.create(\"faas.document.time\");\n-  /** The document name/table subjected to the operation. */\n+  /** For faas.trigger == datasource, the document name/table subjected to the operation. */\n   public static final StringAttributeSetter FAAS_DOCUMENT_NAME =\n       StringAttributeSetter.create(\"faas.document.name\");\n \n-  // faas.trigger == timer\n-  /** A string containing the function invocation time in the ISO 8601 format expressed in UTC. */\n+  /**\n+   * For faas.trigger == time, a string containing the function invocation time in the ISO 8601\n+   * format expressed in UTC.\n+   */\n   public static final StringAttributeSetter FAAS_TIME = StringAttributeSetter.create(\"faas.time\");\n-  /** A string containing the schedule period as Cron Expression. */\n+  /** For faas.trigger == time, a string containing the schedule period as Cron Expression. */\n   public static final StringAttributeSetter FAAS_CRON = StringAttributeSetter.create(\"faas.cron\");\n \n   private SemanticAttributes() {}\n"}}, {"oid": "d128afdc7d9d52ea67bd1bae0302d51d5eacfb40", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d128afdc7d9d52ea67bd1bae0302d51d5eacfb40", "message": "Move to javadoc", "committedDate": "2020-09-11T09:36:33Z", "type": "commit"}]}