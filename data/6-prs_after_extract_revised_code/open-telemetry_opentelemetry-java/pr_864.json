{"pr_number": 864, "pr_title": "Add abstract methods for every instrument type", "pr_createdAt": "2020-02-15T18:12:58Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/864", "timeline": [{"oid": "a8ce268492be993bd526be956fd35d9f1657fadd", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a8ce268492be993bd526be956fd35d9f1657fadd", "message": "Add abstract methods for every instrument type\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-15T18:11:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg0NzQ1Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/864#discussion_r379847453", "bodyText": "this is missing the instrumentValueType in the hashcode. intentional?", "author": "jkwatson", "createdAt": "2020-02-15T18:24:13Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractCounter.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n+import io.opentelemetry.sdk.metrics.common.InstrumentValueType;\n+import java.util.List;\n+import java.util.Map;\n+\n+abstract class AbstractCounter<B extends AbstractBoundInstrument> extends AbstractInstrument {\n+  private final boolean monotonic;\n+  private final InstrumentValueType instrumentValueType;\n+\n+  AbstractCounter(\n+      String name,\n+      String description,\n+      String unit,\n+      Map<String, String> constantLabels,\n+      List<String> labelKeys,\n+      InstrumentValueType instrumentValueType,\n+      MeterSharedState meterSharedState,\n+      InstrumentationLibraryInfo instrumentationLibraryInfo,\n+      boolean monotonic) {\n+    super(name, description, unit, constantLabels, labelKeys);\n+    this.monotonic = monotonic;\n+    this.instrumentValueType = instrumentValueType;\n+  }\n+\n+  final boolean isMonotonic() {\n+    return monotonic;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof AbstractCounter)) {\n+      return false;\n+    }\n+    if (!super.equals(o)) {\n+      return false;\n+    }\n+\n+    AbstractCounter<?> that = (AbstractCounter<?>) o;\n+\n+    return monotonic == that.monotonic && instrumentValueType == that.instrumentValueType;\n+  }\n+\n+  @Override\n+  public int hashCode() {", "originalCommit": "a8ce268492be993bd526be956fd35d9f1657fadd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1NjE4OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/864#discussion_r379856189", "bodyText": "Nice catch, as a punishment added tests for equals and hashcode :)", "author": "bogdandrutu", "createdAt": "2020-02-15T21:08:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg0NzQ1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "ad979717170a749e521960cac8f31710e92fa950", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractCounter.java b/sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractCounter.java\nindex 60b5bf23c..db941ef8d 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractCounter.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractCounter.java\n\n@@ -21,7 +21,7 @@ import io.opentelemetry.sdk.metrics.common.InstrumentValueType;\n import java.util.List;\n import java.util.Map;\n \n-abstract class AbstractCounter<B extends AbstractBoundInstrument> extends AbstractInstrument {\n+abstract class AbstractCounter extends AbstractInstrument {\n   private final boolean monotonic;\n   private final InstrumentValueType instrumentValueType;\n \n"}}, {"oid": "ad979717170a749e521960cac8f31710e92fa950", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ad979717170a749e521960cac8f31710e92fa950", "message": "Fix bug in AbstractCounter and add tests\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-15T21:06:53Z", "type": "commit"}]}