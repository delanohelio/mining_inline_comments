{"pr_number": 873, "pr_title": "Add an abstract helper class for all instruments with bindings", "pr_createdAt": "2020-02-18T19:42:09Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/873", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA3Njg3NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/873#discussion_r381076874", "bodyText": "This method name seems funny to me. Is this called once per collection cycle, or does this turn off batching? With this name, I would assume that it was end of the lifecycle, but from reading the code, it seems like this gets called once per \"harvest\". If it's the latter, then this should probably be named something like \"completeCollectionCycle\" or something like that. What do you think, @bogdandrutu ?", "author": "jkwatson", "createdAt": "2020-02-19T04:54:23Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/Batcher.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import io.opentelemetry.metrics.LabelSet;\n+import io.opentelemetry.sdk.metrics.aggregator.Aggregator;\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import java.util.List;\n+\n+/**\n+ * A {@code Batcher} represents an internal representation of an {code Instrument} aggregation\n+ * process. It records individual measurements (via the {@code Aggregator}). It batches together\n+ * {@code Aggregator}s for the similar {@code LabelSet}.\n+ */\n+interface Batcher {\n+\n+  /**\n+   * Returns the {@link Aggregator} that should be used by the bindings, or observers.\n+   *\n+   * @return the {@link Aggregator} used to aggregate individual events.\n+   */\n+  Aggregator getAggregator();\n+\n+  /**\n+   * Batches multiple entries together that are part of the same metric. It may remove labels from\n+   * the LabelSet and merge aggregations together.\n+   *\n+   * @param labelSet the {@link LabelSet} associated with this {@code Aggregator}.\n+   * @param aggregator the {@link Aggregator} used to aggregate individual events for the given\n+   *     {@code LabelSet}.\n+   * @param mappedAggregator {@code true} if the {@code Aggregator} is still in used by a binding.\n+   *     If {@code false} the {@code Batcher} can reuse the {@code Aggregator} instance.\n+   */\n+  void batch(LabelSet labelSet, Aggregator aggregator, boolean mappedAggregator);\n+\n+  /**\n+   * Stops the current collection cycle and returns the list of metrics batched in this Batcher.\n+   *\n+   * <p>There may be more than one MetricData in case a multi aggregator is configured.\n+   *\n+   * <p>Based on the configured options this method may reset the internal state to produce deltas,\n+   * or keep the internal state to produce cumulative metrics.\n+   *\n+   * @return the list of metrics batched in this Batcher.\n+   */\n+  List<MetricData> stopCollection();", "originalCommit": "6727ce570c9db831b46390427e1e89b8fef2b04b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ4MjI5NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/873#discussion_r381482294", "bodyText": "done.", "author": "bogdandrutu", "createdAt": "2020-02-19T19:04:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA3Njg3NA=="}], "type": "inlineReview", "revised_code": {"commit": "ff4c758dffaa8a4d58badb3aafe245af284668a3", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/metrics/Batcher.java b/sdk/src/main/java/io/opentelemetry/sdk/metrics/Batcher.java\nindex ed2135d67..45959d928 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/metrics/Batcher.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/metrics/Batcher.java\n\n@@ -48,7 +48,7 @@ interface Batcher {\n   void batch(LabelSet labelSet, Aggregator aggregator, boolean mappedAggregator);\n \n   /**\n-   * Stops the current collection cycle and returns the list of metrics batched in this Batcher.\n+   * Ends the current collection cycle and returns the list of metrics batched in this Batcher.\n    *\n    * <p>There may be more than one MetricData in case a multi aggregator is configured.\n    *\n"}}, {"oid": "734248b4e0bbee4475a78bfede13d7c4aa775594", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/734248b4e0bbee4475a78bfede13d7c4aa775594", "message": "Add an abstract helper class for all instruments with bindings\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-19T19:02:56Z", "type": "forcePushed"}, {"oid": "ff4c758dffaa8a4d58badb3aafe245af284668a3", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ff4c758dffaa8a4d58badb3aafe245af284668a3", "message": "Add an abstract helper class for all instruments with bindings\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-19T19:04:43Z", "type": "commit"}, {"oid": "ff4c758dffaa8a4d58badb3aafe245af284668a3", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ff4c758dffaa8a4d58badb3aafe245af284668a3", "message": "Add an abstract helper class for all instruments with bindings\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-19T19:04:43Z", "type": "forcePushed"}]}