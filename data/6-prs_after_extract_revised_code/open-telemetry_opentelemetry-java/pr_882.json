{"pr_number": 882, "pr_title": "Implementing ForceFlush for SpanProcessor", "pr_createdAt": "2020-02-19T10:37:12Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/882", "timeline": [{"oid": "ec5d183f26f595845b668988d337ef2380bc357f", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ec5d183f26f595845b668988d337ef2380bc357f", "message": "first implementation of ForceFlush", "committedDate": "2020-02-19T10:34:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwNDQzMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/882#discussion_r381404432", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * <p>This method is called synchronously on the execution thread, should not throw or block the\n          \n          \n            \n               * <p>This method is called synchronously on the execution thread, and should not throw exceptions \n          \n          \n            \n                         or block the execution thread.", "author": "jkwatson", "createdAt": "2020-02-19T16:50:14Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/SpanProcessor.java", "diffHunk": "@@ -48,4 +48,12 @@\n \n   /** Called when {@link TracerSdkRegistry#shutdown()} is called. */\n   void shutdown();\n+\n+  /**\n+   * Exports all ended spans that have not yet been exported.\n+   *\n+   * <p>This method is called synchronously on the execution thread, should not throw or block the", "originalCommit": "ec5d183f26f595845b668988d337ef2380bc357f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "19fe8520b6c893db6a591edcb71f7eb93da7f990", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/trace/SpanProcessor.java b/sdk/src/main/java/io/opentelemetry/sdk/trace/SpanProcessor.java\nindex 30a3ed067..e687e38fe 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/trace/SpanProcessor.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/trace/SpanProcessor.java\n\n@@ -52,7 +52,8 @@ public interface SpanProcessor {\n   /**\n    * Exports all ended spans that have not yet been exported.\n    *\n-   * <p>This method is called synchronously on the execution thread, should not throw or block the\n+   * <p>This method is called synchronously on the execution thread, and should not throw exceptions \n+             or block the execution thread.\n    * execution thread.\n    */\n   void forceFlush();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwNDU3OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/882#discussion_r381404579", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * execution thread.", "author": "jkwatson", "createdAt": "2020-02-19T16:50:26Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/SpanProcessor.java", "diffHunk": "@@ -48,4 +48,12 @@\n \n   /** Called when {@link TracerSdkRegistry#shutdown()} is called. */\n   void shutdown();\n+\n+  /**\n+   * Exports all ended spans that have not yet been exported.\n+   *\n+   * <p>This method is called synchronously on the execution thread, should not throw or block the\n+   * execution thread.", "originalCommit": "ec5d183f26f595845b668988d337ef2380bc357f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg2NzQyNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/882#discussion_r381867426", "bodyText": "@thisthat you missed that one :)", "author": "arminru", "createdAt": "2020-02-20T09:09:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwNDU3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "19fe8520b6c893db6a591edcb71f7eb93da7f990", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/trace/SpanProcessor.java b/sdk/src/main/java/io/opentelemetry/sdk/trace/SpanProcessor.java\nindex 30a3ed067..e687e38fe 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/trace/SpanProcessor.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/trace/SpanProcessor.java\n\n@@ -52,7 +52,8 @@ public interface SpanProcessor {\n   /**\n    * Exports all ended spans that have not yet been exported.\n    *\n-   * <p>This method is called synchronously on the execution thread, should not throw or block the\n+   * <p>This method is called synchronously on the execution thread, and should not throw exceptions \n+             or block the execution thread.\n    * execution thread.\n    */\n   void forceFlush();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQyMDY4OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/882#discussion_r381420689", "bodyText": "Rename this shutdown?", "author": "bogdandrutu", "createdAt": "2020-02-19T17:15:07Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -315,14 +320,18 @@ public void run() {\n     }\n \n     private void flush() {\n+      forceFlush();\n+      executorService.shutdown();\n+    }", "originalCommit": "ec5d183f26f595845b668988d337ef2380bc357f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg3NDg5OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/882#discussion_r381874898", "bodyText": "Done in 26bb8ae", "author": "thisthat", "createdAt": "2020-02-20T09:23:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQyMDY4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "26bb8ae481765bf02a106d8b6acbdad6b206428d", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\nindex 98bf7bfac..da53827c2 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java\n\n@@ -319,7 +319,7 @@ public final class BatchSpansProcessor implements SpanProcessor {\n       }\n     }\n \n-    private void flush() {\n+    private void shutdown() {\n       forceFlush();\n       executorService.shutdown();\n     }\n"}}, {"oid": "19fe8520b6c893db6a591edcb71f7eb93da7f990", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/19fe8520b6c893db6a591edcb71f7eb93da7f990", "message": "Update sdk/src/main/java/io/opentelemetry/sdk/trace/SpanProcessor.java\n\nCo-Authored-By: John Watson <jkwatson@gmail.com>", "committedDate": "2020-02-20T08:58:44Z", "type": "commit"}, {"oid": "26bb8ae481765bf02a106d8b6acbdad6b206428d", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/26bb8ae481765bf02a106d8b6acbdad6b206428d", "message": "Rename flush -> shutdown. Add test", "committedDate": "2020-02-20T09:22:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEwOTYzOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/882#discussion_r382109639", "bodyText": "I am confused about this. I think the whole purpose is to ensure flush so it will block, maybe add an issue to clarify this behavior on the specs", "author": "bogdandrutu", "createdAt": "2020-02-20T16:23:59Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/SpanProcessor.java", "diffHunk": "@@ -48,4 +48,12 @@\n \n   /** Called when {@link TracerSdkRegistry#shutdown()} is called. */\n   void shutdown();\n+\n+  /**\n+   * Exports all ended spans that have not yet been exported.\n+   *\n+   * <p>This method is called synchronously on the execution thread, and should not throw exceptions\n+   * or block the execution thread. execution thread.", "originalCommit": "26bb8ae481765bf02a106d8b6acbdad6b206428d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjExMTIxOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/882#discussion_r382111218", "bodyText": "If it is not blocking maybe a name like initiateFlush or tryFlush would be better.", "author": "bogdandrutu", "createdAt": "2020-02-20T16:26:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEwOTYzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjExMTY5OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/882#discussion_r382111698", "bodyText": "Typo: doubled the last 2 words", "author": "bogdandrutu", "createdAt": "2020-02-20T16:27:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEwOTYzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQyOTI4NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/882#discussion_r382429285", "bodyText": "The current implementation is blocking. But when I wrote the Javadoc I had the version with timeout in mind. I will rewrite this to clarify the intention of the method!", "author": "thisthat", "createdAt": "2020-02-21T07:19:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEwOTYzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "a61e5810a78d3c9d259aeb832d7627186a69eee8", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/trace/SpanProcessor.java b/sdk/src/main/java/io/opentelemetry/sdk/trace/SpanProcessor.java\nindex e17c480c8..f46bcbe55 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/trace/SpanProcessor.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/trace/SpanProcessor.java\n\n@@ -52,8 +52,8 @@ public interface SpanProcessor {\n   /**\n    * Exports all ended spans that have not yet been exported.\n    *\n-   * <p>This method is called synchronously on the execution thread, and should not throw exceptions\n-   * or block the execution thread. execution thread.\n+   * <p>This method is called synchronously on the execution thread, and should not throw\n+   * exceptions.\n    */\n   void forceFlush();\n }\n"}}, {"oid": "a61e5810a78d3c9d259aeb832d7627186a69eee8", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a61e5810a78d3c9d259aeb832d7627186a69eee8", "message": "Better wording in Javadoc", "committedDate": "2020-02-21T07:21:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczMjczNw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/882#discussion_r382732737", "bodyText": "This is not waiting for the processor thread to actually call the flush maybe just document it for the moment and add a TODO to wait for flush to be called. Or simply create an issue.", "author": "bogdandrutu", "createdAt": "2020-02-21T18:19:19Z", "path": "sdk_contrib/async_processor/src/main/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorEventQueue.java", "diffHunk": "@@ -129,6 +130,18 @@ void shutdown() {\n     }\n   }\n \n+  void forceFlush() {\n+    if (isShutdown) {\n+      return;\n+    }\n+    synchronized (this) {\n+      if (isShutdown) {\n+        return;\n+      }\n+      enqueue(null, EventType.ON_FORCE_FLUSH);", "originalCommit": "a61e5810a78d3c9d259aeb832d7627186a69eee8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc2Mzg4Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/882#discussion_r382763886", "bodyText": "#906", "author": "bogdandrutu", "createdAt": "2020-02-21T19:27:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczMjczNw=="}], "type": "inlineReview", "revised_code": null}]}