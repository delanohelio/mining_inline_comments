{"pr_number": 1740, "pr_title": "Simple throughput tester tool, with toxiproxy to make things difficult.", "pr_createdAt": "2020-10-02T22:15:01Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1740", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM2MTAxOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1740#discussion_r499361018", "bodyText": "Maybe start using setup described in open-telemetry/opentelemetry-specification#748 ?", "author": "iNikem", "createdAt": "2020-10-05T06:04:02Z", "path": "perf_harness/src/main/java/io/opentelemetry/perf/OtlpPipelineDriver.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.perf;\n+\n+import eu.rekawek.toxiproxy.Proxy;\n+import eu.rekawek.toxiproxy.ToxiproxyClient;\n+import eu.rekawek.toxiproxy.model.Toxic;\n+import eu.rekawek.toxiproxy.model.ToxicDirection;\n+import eu.rekawek.toxiproxy.model.ToxicList;\n+import eu.rekawek.toxiproxy.model.toxic.Latency;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.exporters.otlp.OtlpGrpcSpanExporter;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.common.CompletableResultCode;\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import io.opentelemetry.sdk.metrics.export.IntervalMetricReader;\n+import io.opentelemetry.sdk.metrics.export.MetricExporter;\n+import io.opentelemetry.sdk.trace.export.BatchSpanProcessor;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+class OtlpPipelineDriver {\n+\n+  public static final String COLLECTOR_PROXY_PORT = \"44444\";\n+\n+  public static void main(String[] args) throws InterruptedException, IOException {\n+    ToxiproxyClient toxiproxyClient = new ToxiproxyClient();\n+    toxiproxyClient.reset();\n+    Proxy collectorProxy = toxiproxyClient.getProxyOrNull(\"collector\");\n+\n+    if (collectorProxy == null) {\n+      collectorProxy =\n+          toxiproxyClient.createProxy(\n+              \"collector\", \"0.0.0.0:\" + COLLECTOR_PROXY_PORT, \"otel-collector:55680\");\n+    }\n+    collectorProxy.enable();\n+\n+    ToxicList toxics = collectorProxy.toxics();\n+    Latency latency = toxics.latency(\"jittery_latency\", ToxicDirection.DOWNSTREAM, 800);\n+    latency.setJitter(10);\n+\n+    for (Toxic toxic : toxiproxyClient.getProxy(\"collector\").toxics().getAll()) {\n+      System.out.println(\"toxic = \" + toxic.getName() + \" : \" + toxic.getToxicity());\n+    }\n+\n+    IntervalMetricReader intervalMetricReader = setupSdk();\n+\n+    Tracer tracer = OpenTelemetry.getTracer(\"io.opentelemetry.perf\");\n+\n+    for (int i = 0; i < 10000; i++) {\n+      Span exampleSpan = tracer.spanBuilder(\"exampleSpan\").startSpan();\n+      try (Scope scope = tracer.withSpan(exampleSpan)) {\n+        exampleSpan.setAttribute(\"good\", \"true\");", "originalCommit": "fee6596442335fdf91bbc90c7efa8488b5af4929", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY2MDA0NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1740#discussion_r499660044", "bodyText": "Yeah, I hadn't even begun to think about the shape of the data being pushed through here. My main goal with this PR was just to get something up and running, with toxiproxy in between the collector and the SDK, so we can start making it more interesting and realistic over time.", "author": "jkwatson", "createdAt": "2020-10-05T14:53:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM2MTAxOA=="}], "type": "inlineReview", "revised_code": {"commit": "f141bcf27218e83225ba06296150dd18d1e78a02", "chunk": "diff --git a/perf_harness/src/main/java/io/opentelemetry/perf/OtlpPipelineDriver.java b/perf_harness/src/main/java/io/opentelemetry/perf/OtlpPipelineDriver.java\nindex 1b040a4d9..35dff503d 100644\n--- a/perf_harness/src/main/java/io/opentelemetry/perf/OtlpPipelineDriver.java\n+++ b/perf_harness/src/main/java/io/opentelemetry/perf/OtlpPipelineDriver.java\n\n@@ -13,6 +13,8 @@ import eu.rekawek.toxiproxy.model.ToxicList;\n import eu.rekawek.toxiproxy.model.toxic.Latency;\n import io.opentelemetry.OpenTelemetry;\n import io.opentelemetry.context.Scope;\n+import io.opentelemetry.exporters.logging.LoggingMetricExporter;\n+import io.opentelemetry.exporters.otlp.OtlpGrpcMetricExporter;\n import io.opentelemetry.exporters.otlp.OtlpGrpcSpanExporter;\n import io.opentelemetry.sdk.OpenTelemetrySdk;\n import io.opentelemetry.sdk.common.CompletableResultCode;\n"}}, {"oid": "f141bcf27218e83225ba06296150dd18d1e78a02", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f141bcf27218e83225ba06296150dd18d1e78a02", "message": "Simple throughput tester tool, with toxiproxy to make things difficult.", "committedDate": "2020-10-05T19:41:37Z", "type": "commit"}, {"oid": "a46f7c1f6b7ae1f02d4e7ea4ea2c59b0f5c5fe76", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a46f7c1f6b7ae1f02d4e7ea4ea2c59b0f5c5fe76", "message": "fix build issues", "committedDate": "2020-10-05T19:41:37Z", "type": "commit"}, {"oid": "5446add76216d269f7395a19c944721776d3d1fc", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5446add76216d269f7395a19c944721776d3d1fc", "message": "add some silly javadoc to make checkstyle happy", "committedDate": "2020-10-05T19:41:37Z", "type": "commit"}, {"oid": "5446add76216d269f7395a19c944721776d3d1fc", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5446add76216d269f7395a19c944721776d3d1fc", "message": "add some silly javadoc to make checkstyle happy", "committedDate": "2020-10-05T19:41:37Z", "type": "forcePushed"}, {"oid": "a3e647c090b8e3419725e8e2c147ad6d091e1247", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a3e647c090b8e3419725e8e2c147ad6d091e1247", "message": "Add multi-threaded span creation, warmup cycle", "committedDate": "2020-10-06T17:13:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQyNjgxOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1740#discussion_r501426819", "bodyText": "As a followup, testcontainers would make it easier to run the benchmark than docker-compose", "author": "anuraaga", "createdAt": "2020-10-08T03:26:37Z", "path": "perf_harness/src/main/java/io/opentelemetry/perf/OtlpPipelineDriver.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.perf;\n+\n+import eu.rekawek.toxiproxy.Proxy;\n+import eu.rekawek.toxiproxy.ToxiproxyClient;\n+import eu.rekawek.toxiproxy.model.Toxic;\n+import eu.rekawek.toxiproxy.model.ToxicDirection;\n+import eu.rekawek.toxiproxy.model.ToxicList;\n+import eu.rekawek.toxiproxy.model.toxic.Latency;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.exporters.otlp.OtlpGrpcSpanExporter;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.common.CompletableResultCode;\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import io.opentelemetry.sdk.metrics.export.IntervalMetricReader;\n+import io.opentelemetry.sdk.metrics.export.MetricExporter;\n+import io.opentelemetry.sdk.trace.export.BatchSpanProcessor;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+/** A testing tool. */\n+public class OtlpPipelineDriver {", "originalCommit": "a3e647c090b8e3419725e8e2c147ad6d091e1247", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc5NTMzNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1740#discussion_r501795334", "bodyText": "yeah, i was thinking about that as well. it would definitely be a good follow-up.", "author": "jkwatson", "createdAt": "2020-10-08T15:05:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQyNjgxOQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "af1aed4d6d421671d22f1ec048cdbbc3ac0fa6ef", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/af1aed4d6d421671d22f1ec048cdbbc3ac0fa6ef", "message": "Update perf_harness/docker/otel-collector-config-perf.yaml\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>", "committedDate": "2020-10-08T15:04:37Z", "type": "commit"}, {"oid": "8910fa114878a1488bdc398ef4ccb2627addc5f6", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8910fa114878a1488bdc398ef4ccb2627addc5f6", "message": "remove 2 un-needed files", "committedDate": "2020-10-08T15:06:57Z", "type": "commit"}, {"oid": "56e9a2df20d946bbca7b5313538afaa474bb841e", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/56e9a2df20d946bbca7b5313538afaa474bb841e", "message": "Merge remote-tracking branch 'origin/perf_testing' into perf_testing", "committedDate": "2020-10-08T15:07:11Z", "type": "commit"}]}