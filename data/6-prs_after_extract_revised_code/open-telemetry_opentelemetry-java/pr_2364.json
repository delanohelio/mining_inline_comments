{"pr_number": 2364, "pr_title": "Convert the examples to not use the GlobalOpenTelemetry instance.", "pr_createdAt": "2020-12-18T21:17:56Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/2364", "timeline": [{"oid": "bf2a47c73bc87647b9019d94c4da489c846e6bcf", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/bf2a47c73bc87647b9019d94c4da489c846e6bcf", "message": "update the grpc example to remove global usage", "committedDate": "2020-12-18T18:32:39Z", "type": "commit"}, {"oid": "64674fa8d75bc49967df0250ead0ba75f97e40d6", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/64674fa8d75bc49967df0250ead0ba75f97e40d6", "message": "update the http example to remove global usage", "committedDate": "2020-12-18T19:22:27Z", "type": "commit"}, {"oid": "2ed3ca15e47997f25ad1994d432446c25ce52ab8", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/2ed3ca15e47997f25ad1994d432446c25ce52ab8", "message": "update the jaeger example to get rid of the global usage", "committedDate": "2020-12-18T19:57:21Z", "type": "commit"}, {"oid": "c9576162ee43befe174211927182886de23d8202", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c9576162ee43befe174211927182886de23d8202", "message": "update the metrics example to get rid of the global OpenTelemetry usage", "committedDate": "2020-12-18T20:04:46Z", "type": "commit"}, {"oid": "9eade69a84d8ca07d5de6775af77bfdafef27b98", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9eade69a84d8ca07d5de6775af77bfdafef27b98", "message": "update the otlp exporter example to get rid of the global OpenTelemetry usage", "committedDate": "2020-12-18T20:15:15Z", "type": "commit"}, {"oid": "46bc75651631d8fe4e9d04365d8096d41197d14f", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/46bc75651631d8fe4e9d04365d8096d41197d14f", "message": "update the sdk-usage example to get rid of the global OpenTelemetry usage", "committedDate": "2020-12-18T21:03:30Z", "type": "commit"}, {"oid": "89286022c01ca1e97314ac58e754c2d812bfcce7", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/89286022c01ca1e97314ac58e754c2d812bfcce7", "message": "update the zipkin example to get rid of the global OpenTelemetry usage", "committedDate": "2020-12-18T21:12:52Z", "type": "commit"}, {"oid": "ffce39513a0f5924f8ccf199a6e0d677d49eaed0", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ffce39513a0f5924f8ccf199a6e0d677d49eaed0", "message": "run the formatter", "committedDate": "2020-12-18T21:21:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjEwNzI4NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2364#discussion_r546107284", "bodyText": "s/initTracing/initOpenTelemetry?", "author": "bogdandrutu", "createdAt": "2020-12-18T21:50:06Z", "path": "examples/grpc/src/main/java/io/opentelemetry/example/grpc/HelloWorldClient.java", "diffHunk": "@@ -116,29 +116,25 @@ public void start(Listener<RespT> responseListener, Metadata headers) {\n     }\n   }\n \n-  private static void initTracing() {\n+  private static OpenTelemetry initTracing() {", "originalCommit": "ffce39513a0f5924f8ccf199a6e0d677d49eaed0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e02d4cba0c635702ad02488284d65eff89753612", "chunk": "diff --git a/examples/grpc/src/main/java/io/opentelemetry/example/grpc/HelloWorldClient.java b/examples/grpc/src/main/java/io/opentelemetry/example/grpc/HelloWorldClient.java\nindex e1c861896..263f1a48c 100644\n--- a/examples/grpc/src/main/java/io/opentelemetry/example/grpc/HelloWorldClient.java\n+++ b/examples/grpc/src/main/java/io/opentelemetry/example/grpc/HelloWorldClient.java\n\n@@ -116,7 +116,7 @@ public class HelloWorldClient {\n     }\n   }\n \n-  private static OpenTelemetry initTracing() {\n+  private static OpenTelemetry initOpenTelemetry() {\n     // install the W3C Trace Context propagator\n     // Get the tracer management instance\n     SdkTracerProvider sdkTracerProvider = SdkTracerProvider.builder().build();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjEwNzc4Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2364#discussion_r546107786", "bodyText": "Add a TODO to use the new builder option addTracerProvider", "author": "bogdandrutu", "createdAt": "2020-12-18T21:51:34Z", "path": "examples/grpc/src/main/java/io/opentelemetry/example/grpc/HelloWorldClientStream.java", "diffHunk": "@@ -163,6 +162,19 @@ public void start(Listener<RespT> responseListener, Metadata headers) {\n     }\n   }\n \n+  private static OpenTelemetry initTracing(LoggingSpanExporter exporter) {\n+    // install the W3C Trace Context propagator\n+    // Get the tracer management instance\n+    SdkTracerProvider sdkTracerProvider = SdkTracerProvider.builder().build();", "originalCommit": "ffce39513a0f5924f8ccf199a6e0d677d49eaed0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjExNDkwNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2364#discussion_r546114904", "bodyText": "I assume you mean addSpanProcessor(). Yes, we'll need to do this after we publish the next release, but I didn't want to confuse users looking at our docs with TODOs from unreleased changes.", "author": "jkwatson", "createdAt": "2020-12-18T22:11:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjEwNzc4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjExNjU4OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2364#discussion_r546116588", "bodyText": "K", "author": "bogdandrutu", "createdAt": "2020-12-18T22:16:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjEwNzc4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "e02d4cba0c635702ad02488284d65eff89753612", "chunk": "diff --git a/examples/grpc/src/main/java/io/opentelemetry/example/grpc/HelloWorldClientStream.java b/examples/grpc/src/main/java/io/opentelemetry/example/grpc/HelloWorldClientStream.java\nindex ab561a0d9..ae04da7fe 100644\n--- a/examples/grpc/src/main/java/io/opentelemetry/example/grpc/HelloWorldClientStream.java\n+++ b/examples/grpc/src/main/java/io/opentelemetry/example/grpc/HelloWorldClientStream.java\n\n@@ -162,7 +162,7 @@ public class HelloWorldClientStream {\n     }\n   }\n \n-  private static OpenTelemetry initTracing(LoggingSpanExporter exporter) {\n+  private static OpenTelemetry initOpenTelemetry(LoggingSpanExporter exporter) {\n     // install the W3C Trace Context propagator\n     // Get the tracer management instance\n     SdkTracerProvider sdkTracerProvider = SdkTracerProvider.builder().build();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjEwNzk2MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2364#discussion_r546107961", "bodyText": "ditto", "author": "bogdandrutu", "createdAt": "2020-12-18T21:52:03Z", "path": "examples/grpc/src/main/java/io/opentelemetry/example/grpc/HelloWorldServer.java", "diffHunk": "@@ -166,25 +166,20 @@ public void onCompleted() {\n     }\n   }\n \n-  private static void initTracing() {\n-    // install the W3C Trace Context propagator\n-    // Get the tracer management instance\n+  private static OpenTelemetry initTracing(LoggingSpanExporter exporter) {\n     SdkTracerProvider sdkTracerProvider = SdkTracerProvider.builder().build();\n     // Set to process the the spans by the LogExporter\n     sdkTracerProvider.addSpanProcessor(SimpleSpanProcessor.builder(exporter).build());", "originalCommit": "ffce39513a0f5924f8ccf199a6e0d677d49eaed0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e02d4cba0c635702ad02488284d65eff89753612", "chunk": "diff --git a/examples/grpc/src/main/java/io/opentelemetry/example/grpc/HelloWorldServer.java b/examples/grpc/src/main/java/io/opentelemetry/example/grpc/HelloWorldServer.java\nindex 2a4d844fa..aa20f6b64 100644\n--- a/examples/grpc/src/main/java/io/opentelemetry/example/grpc/HelloWorldServer.java\n+++ b/examples/grpc/src/main/java/io/opentelemetry/example/grpc/HelloWorldServer.java\n\n@@ -166,7 +166,7 @@ public class HelloWorldServer {\n     }\n   }\n \n-  private static OpenTelemetry initTracing(LoggingSpanExporter exporter) {\n+  private static OpenTelemetry initOpenTelemetry(LoggingSpanExporter exporter) {\n     SdkTracerProvider sdkTracerProvider = SdkTracerProvider.builder().build();\n     // Set to process the the spans by the LogExporter\n     sdkTracerProvider.addSpanProcessor(SimpleSpanProcessor.builder(exporter).build());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjEwODA5Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2364#discussion_r546108093", "bodyText": "ditto (rename method name)", "author": "bogdandrutu", "createdAt": "2020-12-18T21:52:30Z", "path": "examples/http/src/main/java/io/opentelemetry/example/http/HttpClient.java", "diffHunk": "@@ -30,28 +30,26 @@\n public class HttpClient {\n \n   // OTel API\n+  private static final LoggingSpanExporter loggingExporter = new LoggingSpanExporter();\n+  private static final OpenTelemetry openTelemetry = initTracing(loggingExporter);", "originalCommit": "ffce39513a0f5924f8ccf199a6e0d677d49eaed0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e02d4cba0c635702ad02488284d65eff89753612", "chunk": "diff --git a/examples/http/src/main/java/io/opentelemetry/example/http/HttpClient.java b/examples/http/src/main/java/io/opentelemetry/example/http/HttpClient.java\nindex d4dbc2a4b..612ea9949 100644\n--- a/examples/http/src/main/java/io/opentelemetry/example/http/HttpClient.java\n+++ b/examples/http/src/main/java/io/opentelemetry/example/http/HttpClient.java\n\n@@ -31,7 +31,7 @@ public class HttpClient {\n \n   // OTel API\n   private static final LoggingSpanExporter loggingExporter = new LoggingSpanExporter();\n-  private static final OpenTelemetry openTelemetry = initTracing(loggingExporter);\n+  private static final OpenTelemetry openTelemetry = initOpenTelemetry(loggingExporter);\n   private static final Tracer tracer =\n       openTelemetry.getTracer(\"io.opentelemetry.example.http.HttpClient\");\n   // Export traces to log\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjEwODIwOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2364#discussion_r546108208", "bodyText": "ditto", "author": "bogdandrutu", "createdAt": "2020-12-18T21:52:47Z", "path": "examples/http/src/main/java/io/opentelemetry/example/http/HttpServer.java", "diffHunk": "@@ -20,22 +20,72 @@\n import io.opentelemetry.context.propagation.TextMapPropagator;\n import io.opentelemetry.exporter.logging.LoggingSpanExporter;\n import io.opentelemetry.sdk.OpenTelemetrySdk;\n-import io.opentelemetry.sdk.trace.SdkTracerManagement;\n+import io.opentelemetry.sdk.trace.SdkTracerProvider;\n import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n import java.io.IOException;\n import java.io.OutputStream;\n import java.net.InetSocketAddress;\n import java.nio.charset.Charset;\n \n public class HttpServer {\n+  // OTel API\n+  private static final OpenTelemetry openTelemetry = initTracing(new LoggingSpanExporter());", "originalCommit": "ffce39513a0f5924f8ccf199a6e0d677d49eaed0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e02d4cba0c635702ad02488284d65eff89753612", "chunk": "diff --git a/examples/http/src/main/java/io/opentelemetry/example/http/HttpServer.java b/examples/http/src/main/java/io/opentelemetry/example/http/HttpServer.java\nindex 9dbb6e551..7ec2b5015 100644\n--- a/examples/http/src/main/java/io/opentelemetry/example/http/HttpServer.java\n+++ b/examples/http/src/main/java/io/opentelemetry/example/http/HttpServer.java\n\n@@ -29,7 +29,7 @@ import java.nio.charset.Charset;\n \n public class HttpServer {\n   // OTel API\n-  private static final OpenTelemetry openTelemetry = initTracing(new LoggingSpanExporter());\n+  private static final OpenTelemetry openTelemetry = initOpenTelemetry(new LoggingSpanExporter());\n   private static final Tracer tracer =\n       openTelemetry.getTracer(\"io.opentelemetry.example.http.HttpServer\");\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjEwODc2Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2364#discussion_r546108766", "bodyText": "ditto", "author": "bogdandrutu", "createdAt": "2020-12-18T21:54:16Z", "path": "examples/jaeger/src/main/java/io/opentelemetry/example/jaeger/JaegerExample.java", "diffHunk": "@@ -2,29 +2,26 @@\n \n import io.grpc.ManagedChannel;\n import io.grpc.ManagedChannelBuilder;\n-import io.opentelemetry.api.OpenTelemetry;\n import io.opentelemetry.api.trace.Span;\n import io.opentelemetry.api.trace.Tracer;\n import io.opentelemetry.exporter.jaeger.JaegerGrpcSpanExporter;\n import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.SdkTracerManagement;\n import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n \n public class JaegerExample {\n \n-  // Jaeger Endpoint URL and PORT\n-  private final String ip; // = \"jaeger\";\n-  private final int port; // = 14250;\n-\n   // OTel API\n-  private final Tracer tracer =\n-      OpenTelemetry.getGlobalTracer(\"io.opentelemetry.example.JaegerExample\");\n+  private final SdkTracerManagement sdkTracerManagement;\n+  private final Tracer tracer;\n \n   public JaegerExample(String ip, int port) {\n-    this.ip = ip;\n-    this.port = port;\n+    OpenTelemetrySdk sdk = setupTracing(ip, port);\n+    this.sdkTracerManagement = sdk.getTracerManagement();\n+    tracer = sdk.getTracer(\"io.opentelemetry.example.JaegerExample\");\n   }\n \n-  private void setupJaegerExporter() {\n+  private OpenTelemetrySdk setupTracing(String ip, int port) {", "originalCommit": "ffce39513a0f5924f8ccf199a6e0d677d49eaed0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e02d4cba0c635702ad02488284d65eff89753612", "chunk": "diff --git a/examples/jaeger/src/main/java/io/opentelemetry/example/jaeger/JaegerExample.java b/examples/jaeger/src/main/java/io/opentelemetry/example/jaeger/JaegerExample.java\nindex 59f15af2c..c694c6f0f 100644\n--- a/examples/jaeger/src/main/java/io/opentelemetry/example/jaeger/JaegerExample.java\n+++ b/examples/jaeger/src/main/java/io/opentelemetry/example/jaeger/JaegerExample.java\n\n@@ -16,12 +16,12 @@ public class JaegerExample {\n   private final Tracer tracer;\n \n   public JaegerExample(String ip, int port) {\n-    OpenTelemetrySdk sdk = setupTracing(ip, port);\n+    OpenTelemetrySdk sdk = initOpenTelemetry(ip, port);\n     this.sdkTracerManagement = sdk.getTracerManagement();\n     tracer = sdk.getTracer(\"io.opentelemetry.example.JaegerExample\");\n   }\n \n-  private OpenTelemetrySdk setupTracing(String ip, int port) {\n+  private OpenTelemetrySdk initOpenTelemetry(String ip, int port) {\n     // Create a channel towards Jaeger end point\n     ManagedChannel jaegerChannel =\n         ManagedChannelBuilder.forAddress(ip, port).usePlaintext().build();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjEwOTA5NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2364#discussion_r546109094", "bodyText": "s/31/13", "author": "bogdandrutu", "createdAt": "2020-12-18T21:55:09Z", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "diffHunk": "@@ -20,11 +21,11 @@\n  * extensions.\n  */\n public class DoubleCounterExample {\n-\n+  private static final OpenTelemetry openTelemetry = DefaultOpenTelemetry.builder().build();\n   private static final Tracer tracer =\n-      GlobalOpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\", \"0.5\");\n+      openTelemetry.getTracer(\"io.opentelemetry.example.metrics\", \"0.31.1\");", "originalCommit": "ffce39513a0f5924f8ccf199a6e0d677d49eaed0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e02d4cba0c635702ad02488284d65eff89753612", "chunk": "diff --git a/examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java b/examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java\nindex 6d132416b..7e70ca0c7 100644\n--- a/examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java\n+++ b/examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java\n\n@@ -23,7 +23,7 @@ import javax.swing.filechooser.FileSystemView;\n public class DoubleCounterExample {\n   private static final OpenTelemetry openTelemetry = DefaultOpenTelemetry.builder().build();\n   private static final Tracer tracer =\n-      openTelemetry.getTracer(\"io.opentelemetry.example.metrics\", \"0.31.1\");\n+      openTelemetry.getTracer(\"io.opentelemetry.example.metrics\", \"0.13.1\");\n   private static final Meter sampleMeter =\n       GlobalMetricsProvider.get().get(\"io.opentelemetry.example.metrics\", \"0.13.1\");\n   private static final File directoryToCountIn =\n"}}, {"oid": "e02d4cba0c635702ad02488284d65eff89753612", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e02d4cba0c635702ad02488284d65eff89753612", "message": "update method names and details based on feedback", "committedDate": "2020-12-18T22:34:06Z", "type": "commit"}]}