{"pr_number": 1243, "pr_title": "Rename Measure to ValueRecorder, fix comments and javadoc", "pr_createdAt": "2020-05-18T23:58:51Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1243", "timeline": [{"oid": "7e087cce660ae91f5e7a376bd2974f6c01b66f3d", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/7e087cce660ae91f5e7a376bd2974f6c01b66f3d", "message": "Rename Measure to ValueRecorder, fix comments and javadoc\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-05-18T23:58:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA3Mzg3MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1243#discussion_r427073871", "bodyText": "nit: remove the *(s) at the end", "author": "thisthat", "createdAt": "2020-05-19T07:03:52Z", "path": "api/src/main/java/io/opentelemetry/metrics/DoubleValueRecorder.java", "diffHunk": "@@ -16,39 +16,54 @@\n \n package io.opentelemetry.metrics;\n \n-import io.opentelemetry.metrics.DoubleMeasure.BoundDoubleMeasure;\n+import io.opentelemetry.metrics.DoubleValueRecorder.BoundDoubleValueRecorder;\n import java.util.Map;\n import javax.annotation.concurrent.ThreadSafe;\n \n /**\n- * Measure to report instantaneous measurement of a double value.\n+ * ValueRecorder is a non-additive synchronous instrument useful for recording any non-additive\n+ * number, positive or negative. Values captured by a Record(value) are treated as individual events\n+ * belonging to a distribution that is being summarized.\n+ *\n+ * <p>ValueRecorder should be chosen either when capturing measurements that do not contribute\n+ * meaningfully to a sum, or when capturing numbers that are additive in nature, but where the\n+ * distribution of individual increments is considered interesting.\n+ *\n+ * <p>One of the most common uses for ValueRecorder is to capture latency measurements. Latency *", "originalCommit": "7e087cce660ae91f5e7a376bd2974f6c01b66f3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM2MDc1OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1243#discussion_r427360759", "bodyText": "Done.", "author": "bogdandrutu", "createdAt": "2020-05-19T14:45:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA3Mzg3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "4bc30c98b351d7ca008e20ebe31fca509109a24c", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/metrics/DoubleValueRecorder.java b/api/src/main/java/io/opentelemetry/metrics/DoubleValueRecorder.java\nindex 5aeaedc44..8b49bb84a 100644\n--- a/api/src/main/java/io/opentelemetry/metrics/DoubleValueRecorder.java\n+++ b/api/src/main/java/io/opentelemetry/metrics/DoubleValueRecorder.java\n\n@@ -29,10 +29,10 @@ import javax.annotation.concurrent.ThreadSafe;\n  * meaningfully to a sum, or when capturing numbers that are additive in nature, but where the\n  * distribution of individual increments is considered interesting.\n  *\n- * <p>One of the most common uses for ValueRecorder is to capture latency measurements. Latency *\n- * measurements are not additive in the sense that there is little need to know the latency-sum of *\n- * all processed requests. We use a ValueRecorder instrument to capture latency measurements *\n- * typically because we are interested in knowing mean, median, and other summary statistics about *\n+ * <p>One of the most common uses for ValueRecorder is to capture latency measurements. Latency\n+ * measurements are not additive in the sense that there is little need to know the latency-sum of\n+ * all processed requests. We use a ValueRecorder instrument to capture latency measurements\n+ * typically because we are interested in knowing mean, median, and other summary statistics about\n  * individual events.\n  *\n  * <p>Example:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA3ODI5MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1243#discussion_r427078290", "bodyText": "maybe\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              BatchRecorder put(DoubleValueRecorder measure, double value);\n          \n          \n            \n              BatchRecorder put(DoubleValueRecorder valueRecorder, double value);", "author": "thisthat", "createdAt": "2020-05-19T07:13:19Z", "path": "api/src/main/java/io/opentelemetry/metrics/BatchRecorder.java", "diffHunk": "@@ -27,26 +27,26 @@\n @ThreadSafe\n public interface BatchRecorder {\n   /**\n-   * Associates the {@link LongMeasure} with the given value. Subsequent updates to the same {@link\n-   * LongMeasure} will overwrite the previous value.\n+   * Associates the {@link LongValueRecorder} with the given value. Subsequent updates to the same\n+   * {@link LongValueRecorder} will overwrite the previous value.\n    *\n-   * @param measure the {@link LongMeasure}.\n+   * @param measure the {@link LongValueRecorder}.\n    * @param value the value to be associated with {@code measure}.\n    * @return this.\n    * @since 0.1.0\n    */\n-  BatchRecorder put(LongMeasure measure, long value);\n+  BatchRecorder put(LongValueRecorder measure, long value);\n \n   /**\n-   * Associates the {@link DoubleMeasure} with the given value. Subsequent updates to the same\n-   * {@link DoubleMeasure} will overwrite the previous value.\n+   * Associates the {@link DoubleValueRecorder} with the given value. Subsequent updates to the same\n+   * {@link DoubleValueRecorder} will overwrite the previous value.\n    *\n-   * @param measure the {@link DoubleMeasure}.\n+   * @param measure the {@link DoubleValueRecorder}.\n    * @param value the value to be associated with {@code measure}.\n    * @return this.\n    * @since 0.1.0\n    */\n-  BatchRecorder put(DoubleMeasure measure, double value);\n+  BatchRecorder put(DoubleValueRecorder measure, double value);", "originalCommit": "7e087cce660ae91f5e7a376bd2974f6c01b66f3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM2MDgxNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1243#discussion_r427360816", "bodyText": "Done.", "author": "bogdandrutu", "createdAt": "2020-05-19T14:45:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA3ODI5MA=="}], "type": "inlineReview", "revised_code": {"commit": "4bc30c98b351d7ca008e20ebe31fca509109a24c", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/metrics/BatchRecorder.java b/api/src/main/java/io/opentelemetry/metrics/BatchRecorder.java\nindex f6e6d0e95..5ec45604e 100644\n--- a/api/src/main/java/io/opentelemetry/metrics/BatchRecorder.java\n+++ b/api/src/main/java/io/opentelemetry/metrics/BatchRecorder.java\n\n@@ -30,23 +30,23 @@ public interface BatchRecorder {\n    * Associates the {@link LongValueRecorder} with the given value. Subsequent updates to the same\n    * {@link LongValueRecorder} will overwrite the previous value.\n    *\n-   * @param measure the {@link LongValueRecorder}.\n-   * @param value the value to be associated with {@code measure}.\n+   * @param valueRecorder the {@link LongValueRecorder}.\n+   * @param value the value to be associated with {@code valueRecorder}.\n    * @return this.\n    * @since 0.1.0\n    */\n-  BatchRecorder put(LongValueRecorder measure, long value);\n+  BatchRecorder put(LongValueRecorder valueRecorder, long value);\n \n   /**\n    * Associates the {@link DoubleValueRecorder} with the given value. Subsequent updates to the same\n    * {@link DoubleValueRecorder} will overwrite the previous value.\n    *\n-   * @param measure the {@link DoubleValueRecorder}.\n-   * @param value the value to be associated with {@code measure}.\n+   * @param valueRecorder the {@link DoubleValueRecorder}.\n+   * @param value the value to be associated with {@code valueRecorder}.\n    * @return this.\n    * @since 0.1.0\n    */\n-  BatchRecorder put(DoubleValueRecorder measure, double value);\n+  BatchRecorder put(DoubleValueRecorder valueRecorder, double value);\n \n   /**\n    * Associates the {@link LongCounter} with the given value. Subsequent updates to the same {@link\n"}}, {"oid": "4bc30c98b351d7ca008e20ebe31fca509109a24c", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/4bc30c98b351d7ca008e20ebe31fca509109a24c", "message": "Fix more legacy javadoc\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-05-19T14:45:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ0MjE3MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1243#discussion_r427442171", "bodyText": "interesting. this shouldn't have even been valid. Are we missing some validation on the label-pairs used for binding?", "author": "jkwatson", "createdAt": "2020-05-19T16:36:45Z", "path": "api/src/main/java/io/opentelemetry/metrics/DoubleCounter.java", "diffHunk": "@@ -39,7 +39,7 @@\n  *\n  *   // It is recommended that the API user keep references to a Bound Counters.\n  *   private static final BoundDoubleCounter someWorkBound =\n- *       counter.bind(Collections.singletonList(\"SomeWork\"));", "originalCommit": "4bc30c98b351d7ca008e20ebe31fca509109a24c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ3MjE2MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1243#discussion_r427472160", "bodyText": "This is javadoc :)", "author": "bogdandrutu", "createdAt": "2020-05-19T17:24:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ0MjE3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ3Mjk1Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1243#discussion_r427472956", "bodyText": "I don't think we test/run/validate javadocs", "author": "bogdandrutu", "createdAt": "2020-05-19T17:25:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ0MjE3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ3NDE3Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1243#discussion_r427474177", "bodyText": "oh lol.  ;)", "author": "jkwatson", "createdAt": "2020-05-19T17:27:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ0MjE3MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ0MzQxOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1243#discussion_r427443419", "bodyText": "The use of \"non-additive\" here is confusing. This means non-pre-summed, correct? I think I might just leave out the \"non-additive\" term here, since I don't think people will understand what is meant.", "author": "jkwatson", "createdAt": "2020-05-19T16:38:47Z", "path": "api/src/main/java/io/opentelemetry/metrics/DoubleValueRecorder.java", "diffHunk": "@@ -16,39 +16,54 @@\n \n package io.opentelemetry.metrics;\n \n-import io.opentelemetry.metrics.DoubleMeasure.BoundDoubleMeasure;\n+import io.opentelemetry.metrics.DoubleValueRecorder.BoundDoubleValueRecorder;\n import java.util.Map;\n import javax.annotation.concurrent.ThreadSafe;\n \n /**\n- * Measure to report instantaneous measurement of a double value.\n+ * ValueRecorder is a non-additive synchronous instrument useful for recording any non-additive", "originalCommit": "4bc30c98b351d7ca008e20ebe31fca509109a24c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ5NDgyNw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1243#discussion_r427494827", "bodyText": "Done.", "author": "bogdandrutu", "createdAt": "2020-05-19T17:59:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ0MzQxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "357858031e0deab053b3076e4a37efbd1d5c9a09", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/metrics/DoubleValueRecorder.java b/api/src/main/java/io/opentelemetry/metrics/DoubleValueRecorder.java\nindex 8b49bb84a..09a985e26 100644\n--- a/api/src/main/java/io/opentelemetry/metrics/DoubleValueRecorder.java\n+++ b/api/src/main/java/io/opentelemetry/metrics/DoubleValueRecorder.java\n\n@@ -21,9 +21,9 @@ import java.util.Map;\n import javax.annotation.concurrent.ThreadSafe;\n \n /**\n- * ValueRecorder is a non-additive synchronous instrument useful for recording any non-additive\n- * number, positive or negative. Values captured by a Record(value) are treated as individual events\n- * belonging to a distribution that is being summarized.\n+ * ValueRecorder is a synchronous instrument useful for recording any number, positive or negative.\n+ * Values captured by a Record(value) are treated as individual events belonging to a distribution\n+ * that is being summarized.\n  *\n  * <p>ValueRecorder should be chosen either when capturing measurements that do not contribute\n  * meaningfully to a sum, or when capturing numbers that are additive in nature, but where the\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ0NDU5Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1243#discussion_r427444593", "bodyText": "Same comment related to the use of \"non-additive\" in these docs.", "author": "jkwatson", "createdAt": "2020-05-19T16:40:36Z", "path": "api/src/main/java/io/opentelemetry/metrics/LongValueRecorder.java", "diffHunk": "@@ -16,39 +16,54 @@\n \n package io.opentelemetry.metrics;\n \n-import io.opentelemetry.metrics.LongMeasure.BoundLongMeasure;\n+import io.opentelemetry.metrics.LongValueRecorder.BoundLongValueRecorder;\n import java.util.Map;\n import javax.annotation.concurrent.ThreadSafe;\n \n /**\n- * Measure to report instantaneous measurement of a long value.\n+ * ValueRecorder is a non-additive synchronous instrument useful for recording any non-additive", "originalCommit": "4bc30c98b351d7ca008e20ebe31fca509109a24c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ5NDc5OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1243#discussion_r427494799", "bodyText": "Done.", "author": "bogdandrutu", "createdAt": "2020-05-19T17:59:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ0NDU5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "357858031e0deab053b3076e4a37efbd1d5c9a09", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/metrics/LongValueRecorder.java b/api/src/main/java/io/opentelemetry/metrics/LongValueRecorder.java\nindex 39a137cd3..08a79f21a 100644\n--- a/api/src/main/java/io/opentelemetry/metrics/LongValueRecorder.java\n+++ b/api/src/main/java/io/opentelemetry/metrics/LongValueRecorder.java\n\n@@ -21,9 +21,9 @@ import java.util.Map;\n import javax.annotation.concurrent.ThreadSafe;\n \n /**\n- * ValueRecorder is a non-additive synchronous instrument useful for recording any non-additive\n- * number, positive or negative. Values captured by a Record(value) are treated as individual events\n- * belonging to a distribution that is being summarized.\n+ * ValueRecorder is a synchronous instrument useful for recording any number, positive or negative.\n+ * Values captured by a Record(value) are treated as individual events belonging to a distribution\n+ * that is being summarized.\n  *\n  * <p>ValueRecorder should be chosen either when capturing measurements that do not contribute\n  * meaningfully to a sum, or when capturing numbers that are additive in nature, but where the\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ0NTg4Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1243#discussion_r427445883", "bodyText": "ah, I see \"non-additive\" is clarified here. I'm still not sure usage of this terminology adds a lot to the user's decision to use a ValueRecorder.", "author": "jkwatson", "createdAt": "2020-05-19T16:42:38Z", "path": "api/src/main/java/io/opentelemetry/metrics/DoubleValueRecorder.java", "diffHunk": "@@ -16,39 +16,54 @@\n \n package io.opentelemetry.metrics;\n \n-import io.opentelemetry.metrics.DoubleMeasure.BoundDoubleMeasure;\n+import io.opentelemetry.metrics.DoubleValueRecorder.BoundDoubleValueRecorder;\n import java.util.Map;\n import javax.annotation.concurrent.ThreadSafe;\n \n /**\n- * Measure to report instantaneous measurement of a double value.\n+ * ValueRecorder is a non-additive synchronous instrument useful for recording any non-additive\n+ * number, positive or negative. Values captured by a Record(value) are treated as individual events\n+ * belonging to a distribution that is being summarized.\n+ *\n+ * <p>ValueRecorder should be chosen either when capturing measurements that do not contribute\n+ * meaningfully to a sum, or when capturing numbers that are additive in nature, but where the\n+ * distribution of individual increments is considered interesting.\n+ *\n+ * <p>One of the most common uses for ValueRecorder is to capture latency measurements. Latency\n+ * measurements are not additive in the sense that there is little need to know the latency-sum of", "originalCommit": "4bc30c98b351d7ca008e20ebe31fca509109a24c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ5NTE1OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1243#discussion_r427495158", "bodyText": "I left this here, let me know if you think we should remove.", "author": "bogdandrutu", "createdAt": "2020-05-19T17:59:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ0NTg4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ5NTk0MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1243#discussion_r427495940", "bodyText": "I think is fine to leave, yes.", "author": "jkwatson", "createdAt": "2020-05-19T18:00:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ0NTg4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "357858031e0deab053b3076e4a37efbd1d5c9a09", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/metrics/DoubleValueRecorder.java b/api/src/main/java/io/opentelemetry/metrics/DoubleValueRecorder.java\nindex 8b49bb84a..09a985e26 100644\n--- a/api/src/main/java/io/opentelemetry/metrics/DoubleValueRecorder.java\n+++ b/api/src/main/java/io/opentelemetry/metrics/DoubleValueRecorder.java\n\n@@ -21,9 +21,9 @@ import java.util.Map;\n import javax.annotation.concurrent.ThreadSafe;\n \n /**\n- * ValueRecorder is a non-additive synchronous instrument useful for recording any non-additive\n- * number, positive or negative. Values captured by a Record(value) are treated as individual events\n- * belonging to a distribution that is being summarized.\n+ * ValueRecorder is a synchronous instrument useful for recording any number, positive or negative.\n+ * Values captured by a Record(value) are treated as individual events belonging to a distribution\n+ * that is being summarized.\n  *\n  * <p>ValueRecorder should be chosen either when capturing measurements that do not contribute\n  * meaningfully to a sum, or when capturing numbers that are additive in nature, but where the\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ0NjI0OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1243#discussion_r427446248", "bodyText": "s/metric/instrument/ in a bunch of places.", "author": "jkwatson", "createdAt": "2020-05-19T16:43:09Z", "path": "api/src/main/java/io/opentelemetry/metrics/Meter.java", "diffHunk": "@@ -89,36 +89,36 @@\n   LongUpDownCounter.Builder longUpDownCounterBuilder(String name);\n \n   /**\n-   * Returns a new builder for a {@link DoubleMeasure}.\n+   * Returns a new builder for a {@link DoubleValueRecorder}.\n    *\n-   * @param name Name of measure, as a {@code String}. Should be a ASCII string with a length no\n-   *     greater than 255 characters.\n-   * @return a new builder for a {@code DoubleMeasure}.\n+   * @param name the name of the metric. Should be a ASCII string with a length no greater than 255", "originalCommit": "4bc30c98b351d7ca008e20ebe31fca509109a24c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ5NDkzNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1243#discussion_r427494934", "bodyText": "Done.", "author": "bogdandrutu", "createdAt": "2020-05-19T17:59:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ0NjI0OA=="}], "type": "inlineReview", "revised_code": {"commit": "357858031e0deab053b3076e4a37efbd1d5c9a09", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/metrics/Meter.java b/api/src/main/java/io/opentelemetry/metrics/Meter.java\nindex 5ad635e56..47f97c428 100644\n--- a/api/src/main/java/io/opentelemetry/metrics/Meter.java\n+++ b/api/src/main/java/io/opentelemetry/metrics/Meter.java\n\n@@ -91,8 +91,8 @@ public interface Meter {\n   /**\n    * Returns a new builder for a {@link DoubleValueRecorder}.\n    *\n-   * @param name the name of the metric. Should be a ASCII string with a length no greater than 255\n-   *     characters.\n+   * @param name the name of the instrument. Should be a ASCII string with a length no greater than\n+   *     255 characters.\n    * @return a new builder for a {@code DoubleValueRecorder}.\n    * @throws NullPointerException if {@code name} is null.\n    * @throws IllegalArgumentException if different metric with the same name already registered.\n"}}, {"oid": "357858031e0deab053b3076e4a37efbd1d5c9a09", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/357858031e0deab053b3076e4a37efbd1d5c9a09", "message": "Address feedback\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-05-19T17:57:37Z", "type": "commit"}]}