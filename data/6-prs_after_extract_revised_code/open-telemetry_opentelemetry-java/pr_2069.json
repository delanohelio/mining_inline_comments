{"pr_number": 2069, "pr_title": "Make the OpenTelemetrySdk a subclass of DefaultOpenTelemetry", "pr_createdAt": "2020-11-13T00:59:06Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/2069", "timeline": [{"oid": "b0d0c62b576dcca79fe4d850dd0e00f237765a25", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b0d0c62b576dcca79fe4d850dd0e00f237765a25", "message": "Make the OpenTelemetrySdk a subclass of DefaultOpenTelemetry", "committedDate": "2020-11-13T00:45:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU1ODk2NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2069#discussion_r522558964", "bodyText": "I think the customized javadoc was good, and even more important now I guess", "author": "anuraaga", "createdAt": "2020-11-13T01:53:58Z", "path": "sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java", "diffHunk": "@@ -114,68 +85,44 @@ public Clock getClock() {\n \n   /** Returns the {@link TracerSdkManagement} for this {@link OpenTelemetrySdk}. */\n   public TracerSdkManagement getTracerManagement() {\n-    return (TracerSdkProvider) ((ObfuscatedTracerProvider) tracerProvider).unobfuscate();\n+    return (TracerSdkProvider) ((ObfuscatedTracerProvider) getTracerProvider()).unobfuscate();\n   }\n \n   /** Returns a new {@link Builder} initialized with the values of this {@link OpenTelemetrySdk}. */\n   @Override\n   public Builder toBuilder() {\n-    return builder()\n-        .setTracerProvider(tracerProvider)\n-        .setMeterProvider(meterProvider)\n+    return new Builder()\n+        .setTracerProvider(getTracerProvider())\n+        .setMeterProvider(getMeterProvider())\n         .setPropagators(getPropagators())\n         .setClock(clock)\n         .setResource(resource);\n   }\n \n   /** A builder for configuring an {@link OpenTelemetrySdk}. */\n-  public static class Builder implements OpenTelemetryBuilder<Builder> {\n+  public static class Builder extends DefaultOpenTelemetry.Builder {\n     private Clock clock = MillisClock.getInstance();\n     private Resource resource = Resource.getDefault();\n-    private ContextPropagators propagators = DefaultContextPropagators.builder().build();\n-\n-    private TracerProvider tracerProvider;\n-    private MeterProvider meterProvider;\n \n-    /**\n-     * Sets the {@link TracerProvider} to use. This can be used to configure tracing settings by\n-     * returning the instance created by a {@link TracerSdkProvider.Builder}.\n-     *\n-     * @see TracerSdkProvider#builder()", "originalCommit": "b0d0c62b576dcca79fe4d850dd0e00f237765a25", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU4ODkzOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2069#discussion_r522588939", "bodyText": "for sure. will restore.", "author": "jkwatson", "createdAt": "2020-11-13T03:20:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU1ODk2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU5ODE1NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2069#discussion_r522598155", "bodyText": "done", "author": "jkwatson", "createdAt": "2020-11-13T03:58:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU1ODk2NA=="}], "type": "inlineReview", "revised_code": {"commit": "9f06e8bbb31c96a8c7817c406adc0bd76f650546", "chunk": "diff --git a/sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java b/sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java\nindex f1d94c73c..dd0aec134 100644\n--- a/sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java\n+++ b/sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java\n\n@@ -104,6 +104,15 @@ public final class OpenTelemetrySdk extends DefaultOpenTelemetry {\n     private Clock clock = MillisClock.getInstance();\n     private Resource resource = Resource.getDefault();\n \n+    /**\n+     * Sets the {@link TracerSdkProvider} to use. This can be used to configure tracing settings by\n+     * returning the instance created by a {@link TracerSdkProvider.Builder}.\n+     *\n+     * <p>Note: the parameter passed in here must be a {@link TracerSdkProvider} instance.\n+     *\n+     * @see TracerSdkProvider#builder()\n+     * @param tracerProvider A {@link TracerSdkProvider} to use with this instance.\n+     */\n     @Override\n     public Builder setTracerProvider(TracerProvider tracerProvider) {\n       if (!(tracerProvider instanceof TracerSdkProvider)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU1OTMwNw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2069#discussion_r522559307", "bodyText": "For a builder, since it's app startup, I think we may still keep the null checks. But don't have to", "author": "anuraaga", "createdAt": "2020-11-13T01:55:04Z", "path": "sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java", "diffHunk": "@@ -114,68 +85,44 @@ public Clock getClock() {\n \n   /** Returns the {@link TracerSdkManagement} for this {@link OpenTelemetrySdk}. */\n   public TracerSdkManagement getTracerManagement() {\n-    return (TracerSdkProvider) ((ObfuscatedTracerProvider) tracerProvider).unobfuscate();\n+    return (TracerSdkProvider) ((ObfuscatedTracerProvider) getTracerProvider()).unobfuscate();\n   }\n \n   /** Returns a new {@link Builder} initialized with the values of this {@link OpenTelemetrySdk}. */\n   @Override\n   public Builder toBuilder() {\n-    return builder()\n-        .setTracerProvider(tracerProvider)\n-        .setMeterProvider(meterProvider)\n+    return new Builder()\n+        .setTracerProvider(getTracerProvider())\n+        .setMeterProvider(getMeterProvider())\n         .setPropagators(getPropagators())\n         .setClock(clock)\n         .setResource(resource);\n   }\n \n   /** A builder for configuring an {@link OpenTelemetrySdk}. */\n-  public static class Builder implements OpenTelemetryBuilder<Builder> {\n+  public static class Builder extends DefaultOpenTelemetry.Builder {\n     private Clock clock = MillisClock.getInstance();\n     private Resource resource = Resource.getDefault();\n-    private ContextPropagators propagators = DefaultContextPropagators.builder().build();\n-\n-    private TracerProvider tracerProvider;\n-    private MeterProvider meterProvider;\n \n-    /**\n-     * Sets the {@link TracerProvider} to use. This can be used to configure tracing settings by\n-     * returning the instance created by a {@link TracerSdkProvider.Builder}.\n-     *\n-     * @see TracerSdkProvider#builder()\n-     */\n     @Override\n     public Builder setTracerProvider(TracerProvider tracerProvider) {\n-      requireNonNull(tracerProvider, \"tracerProvider\");\n-      this.tracerProvider = tracerProvider;\n+      if (!(tracerProvider instanceof TracerSdkProvider)) {\n+        throw new IllegalArgumentException(\n+            \"The OpenTelemetrySdk can only be configured with a TracerSdkProvider\");\n+      }\n+      super.setTracerProvider(tracerProvider);\n       return this;\n     }\n \n-    /**\n-     * Sets the {@link MeterProvider} to use.. This can be used to configure tracing settings by\n-     * returning the instance created by a {@link MeterSdkProvider.Builder}.\n-     *\n-     * @see MeterSdkProvider#builder()\n-     */\n     @Override\n     public Builder setMeterProvider(MeterProvider meterProvider) {\n-      requireNonNull(meterProvider, \"meterProvider\");", "originalCommit": "b0d0c62b576dcca79fe4d850dd0e00f237765a25", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU5MDY5MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2069#discussion_r522590691", "bodyText": "the super call has this already, so I don't think we need to duplicate it.", "author": "jkwatson", "createdAt": "2020-11-13T03:27:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU1OTMwNw=="}], "type": "inlineReview", "revised_code": {"commit": "9f06e8bbb31c96a8c7817c406adc0bd76f650546", "chunk": "diff --git a/sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java b/sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java\nindex f1d94c73c..dd0aec134 100644\n--- a/sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java\n+++ b/sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java\n\n@@ -104,6 +104,15 @@ public final class OpenTelemetrySdk extends DefaultOpenTelemetry {\n     private Clock clock = MillisClock.getInstance();\n     private Resource resource = Resource.getDefault();\n \n+    /**\n+     * Sets the {@link TracerSdkProvider} to use. This can be used to configure tracing settings by\n+     * returning the instance created by a {@link TracerSdkProvider.Builder}.\n+     *\n+     * <p>Note: the parameter passed in here must be a {@link TracerSdkProvider} instance.\n+     *\n+     * @see TracerSdkProvider#builder()\n+     * @param tracerProvider A {@link TracerSdkProvider} to use with this instance.\n+     */\n     @Override\n     public Builder setTracerProvider(TracerProvider tracerProvider) {\n       if (!(tracerProvider instanceof TracerSdkProvider)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU1OTcyOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2069#discussion_r522559728", "bodyText": "Probably my fault for missing a unit test, but it looks like this isn't using the resource / clock in this builder anymore", "author": "anuraaga", "createdAt": "2020-11-13T01:56:30Z", "path": "sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java", "diffHunk": "@@ -208,34 +155,21 @@ public Builder setResource(Resource resource) {\n      */\n     @Override\n     public OpenTelemetrySdk build() {\n-      MeterProvider meterProvider = this.meterProvider;\n-      if (meterProvider == null) {\n-        MeterProviderFactory meterProviderFactory = loadSpi(MeterProviderFactory.class);\n-        if (meterProviderFactory != null) {\n-          meterProvider = meterProviderFactory.create();\n-        } else if (HAS_METRICS_SDK) {\n-          meterProvider = MeterSdkProvider.builder().setClock(clock).setResource(resource).build();\n-        } else {\n-          meterProvider = MeterProvider.getDefault();\n-        }\n-      }\n-\n-      TracerProvider tracerProvider = this.tracerProvider;\n-      if (tracerProvider == null) {\n-        TracerProviderFactory tracerProviderFactory = loadSpi(TracerProviderFactory.class);\n-        if (tracerProviderFactory != null) {\n-          tracerProvider = new ObfuscatedTracerProvider(tracerProviderFactory.create());\n-        } else if (HAS_TRACING_SDK) {\n-          tracerProvider =\n-              new ObfuscatedTracerProvider(\n-                  TracerSdkProvider.builder().setClock(clock).setResource(resource).build());\n-        } else {\n-          tracerProvider = TracerProvider.getDefault();\n-        }\n+      MeterProvider meterProvider = super.buildMeterProvider();\n+      TracerProvider tracerProvider = super.buildTracerProvider();", "originalCommit": "b0d0c62b576dcca79fe4d850dd0e00f237765a25", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU5ODA1NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2069#discussion_r522598055", "bodyText": "I added a really terrible unit test for this.", "author": "jkwatson", "createdAt": "2020-11-13T03:58:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU1OTcyOA=="}], "type": "inlineReview", "revised_code": {"commit": "9f06e8bbb31c96a8c7817c406adc0bd76f650546", "chunk": "diff --git a/sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java b/sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java\nindex f1d94c73c..dd0aec134 100644\n--- a/sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java\n+++ b/sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java\n\n@@ -155,19 +171,14 @@ public final class OpenTelemetrySdk extends DefaultOpenTelemetry {\n      */\n     @Override\n     public OpenTelemetrySdk build() {\n-      MeterProvider meterProvider = super.buildMeterProvider();\n-      TracerProvider tracerProvider = super.buildTracerProvider();\n-      if (!(tracerProvider instanceof TracerSdkProvider)) {\n-        throw new IllegalStateException(\n-            \"The OpenTelemetrySdk can only be configured with a TracerSdkProvider\");\n-      }\n-      ContextPropagators propagators = super.buildContextPropagators();\n+      MeterProvider meterProvider = buildMeterProvider();\n+      TracerProvider tracerProvider = buildTracerProvider();\n \n       OpenTelemetrySdk sdk =\n           new OpenTelemetrySdk(\n               new ObfuscatedTracerProvider(tracerProvider),\n               meterProvider,\n-              propagators,\n+              super.propagators,\n               clock,\n               resource);\n       // Automatically initialize global OpenTelemetry with the first SDK we build.\n"}}, {"oid": "9f06e8bbb31c96a8c7817c406adc0bd76f650546", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9f06e8bbb31c96a8c7817c406adc0bd76f650546", "message": "Remove SPI from the explicit OpenTelemetrySdk builder usage.\nAdd a (super ugly) test to make sure that the clock and resource are getting set.", "committedDate": "2020-11-13T03:56:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjYxODQ1OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2069#discussion_r522618458", "bodyText": "Should we go ahead and be consistent and only accept MeterSdkProvider here since our goal is for this class to only configure the SDK?", "author": "anuraaga", "createdAt": "2020-11-13T04:33:02Z", "path": "sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java", "diffHunk": "@@ -158,24 +131,14 @@ public Builder setTracerProvider(TracerProvider tracerProvider) {\n      */\n     @Override\n     public Builder setMeterProvider(MeterProvider meterProvider) {\n-      requireNonNull(meterProvider, \"meterProvider\");\n-      this.meterProvider = meterProvider;\n+      super.setMeterProvider(meterProvider);", "originalCommit": "9f06e8bbb31c96a8c7817c406adc0bd76f650546", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA3NTgxNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2069#discussion_r523075815", "bodyText": "Yeah, that's probably a good idea. Better to enforce it now even if we don't need to, rather than have to break things later when we do.", "author": "jkwatson", "createdAt": "2020-11-13T16:50:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjYxODQ1OA=="}], "type": "inlineReview", "revised_code": {"commit": "6206fcb93ab7b0bbc099133c67e0242c374d6cda", "chunk": "diff --git a/sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java b/sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java\nindex dd0aec134..2f61ead3b 100644\n--- a/sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java\n+++ b/sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java\n\n@@ -131,6 +131,10 @@ public final class OpenTelemetrySdk extends DefaultOpenTelemetry {\n      */\n     @Override\n     public Builder setMeterProvider(MeterProvider meterProvider) {\n+      if (!(meterProvider instanceof MeterSdkProvider)) {\n+        throw new IllegalArgumentException(\n+            \"The OpenTelemetrySdk can only be configured with a MeterSdkProvider\");\n+      }\n       super.setMeterProvider(meterProvider);\n       return this;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjYxODkyMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2069#discussion_r522618923", "bodyText": "For the below null checks to work I think these need to default to null", "author": "anuraaga", "createdAt": "2020-11-13T04:33:38Z", "path": "sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java", "diffHunk": "@@ -114,39 +85,41 @@ public Clock getClock() {\n \n   /** Returns the {@link TracerSdkManagement} for this {@link OpenTelemetrySdk}. */\n   public TracerSdkManagement getTracerManagement() {\n-    return (TracerSdkProvider) ((ObfuscatedTracerProvider) tracerProvider).unobfuscate();\n+    return (TracerSdkProvider) ((ObfuscatedTracerProvider) getTracerProvider()).unobfuscate();\n   }\n \n   /** Returns a new {@link Builder} initialized with the values of this {@link OpenTelemetrySdk}. */\n   @Override\n   public Builder toBuilder() {\n-    return builder()\n-        .setTracerProvider(tracerProvider)\n-        .setMeterProvider(meterProvider)\n+    return new Builder()\n+        .setTracerProvider(getTracerProvider())\n+        .setMeterProvider(getMeterProvider())\n         .setPropagators(getPropagators())\n         .setClock(clock)\n         .setResource(resource);\n   }\n \n   /** A builder for configuring an {@link OpenTelemetrySdk}. */\n-  public static class Builder implements OpenTelemetryBuilder<Builder> {\n+  public static class Builder extends DefaultOpenTelemetry.Builder {\n     private Clock clock = MillisClock.getInstance();", "originalCommit": "9f06e8bbb31c96a8c7817c406adc0bd76f650546", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA3NTM4Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2069#discussion_r523075383", "bodyText": "very good point! will fix.", "author": "jkwatson", "createdAt": "2020-11-13T16:49:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjYxODkyMw=="}], "type": "inlineReview", "revised_code": {"commit": "6e38a2caee98af3a5cdace54f0963471e349bdf1", "chunk": "diff --git a/sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java b/sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java\nindex dd0aec134..5caf9e6ec 100644\n--- a/sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java\n+++ b/sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java\n\n@@ -101,8 +101,8 @@ public final class OpenTelemetrySdk extends DefaultOpenTelemetry {\n \n   /** A builder for configuring an {@link OpenTelemetrySdk}. */\n   public static class Builder extends DefaultOpenTelemetry.Builder {\n-    private Clock clock = MillisClock.getInstance();\n-    private Resource resource = Resource.getDefault();\n+    private Clock clock;\n+    private Resource resource;\n \n     /**\n      * Sets the {@link TracerSdkProvider} to use. This can be used to configure tracing settings by\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjYxOTU5Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2069#discussion_r522619597", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // this is not a great way to test this...\n          \n          \n            \n                // Since TracerProvider is in a different package, the only alternative to this reflective\n          \n          \n            \n                // approach would be to make the fields public for testing which is worse than this.", "author": "anuraaga", "createdAt": "2020-11-13T04:34:33Z", "path": "sdk/all/src/test/java/io/opentelemetry/sdk/OpenTelemetrySdkTest.java", "diffHunk": "@@ -76,10 +76,38 @@ void testReconfigure() {\n             .setClock(clock)\n             .setResource(resource)\n             .build();\n-    assertThat(openTelemetry.getTracerProvider()).isEqualTo(tracerProvider);\n+    assertThat(((ObfuscatedTracerProvider) openTelemetry.getTracerProvider()).unobfuscate())\n+        .isEqualTo(tracerProvider);\n     assertThat(openTelemetry.getMeterProvider()).isEqualTo(meterProvider);\n     assertThat(openTelemetry.getPropagators()).isEqualTo(propagators);\n     assertThat(openTelemetry.getResource()).isEqualTo(resource);\n     assertThat(openTelemetry.getClock()).isEqualTo(clock);\n   }\n+\n+  @Test\n+  void testReconfigure_justClockAndResource() {\n+    Resource resource = Resource.create(Attributes.builder().put(\"cat\", \"meow\").build());\n+    OpenTelemetrySdk openTelemetry =\n+        OpenTelemetrySdk.builder().setClock(clock).setResource(resource).build();\n+    TracerProvider unobfuscatedTracerProvider =\n+        ((ObfuscatedTracerProvider) openTelemetry.getTracerProvider()).unobfuscate();\n+\n+    assertThat(unobfuscatedTracerProvider).isInstanceOf(TracerSdkProvider.class);\n+    // this is not a great way to test this...", "originalCommit": "9f06e8bbb31c96a8c7817c406adc0bd76f650546", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9fc935cff48140a15dbaba5b0f6cd6c21ae3d7ef", "chunk": "diff --git a/sdk/all/src/test/java/io/opentelemetry/sdk/OpenTelemetrySdkTest.java b/sdk/all/src/test/java/io/opentelemetry/sdk/OpenTelemetrySdkTest.java\nindex cceedf175..1c27b8cf1 100644\n--- a/sdk/all/src/test/java/io/opentelemetry/sdk/OpenTelemetrySdkTest.java\n+++ b/sdk/all/src/test/java/io/opentelemetry/sdk/OpenTelemetrySdkTest.java\n\n@@ -93,7 +93,8 @@ class OpenTelemetrySdkTest {\n         ((ObfuscatedTracerProvider) openTelemetry.getTracerProvider()).unobfuscate();\n \n     assertThat(unobfuscatedTracerProvider).isInstanceOf(TracerSdkProvider.class);\n-    // this is not a great way to test this...\n+    // Since TracerProvider is in a different package, the only alternative to this reflective\n+    // approach would be to make the fields public for testing which is worse than this.\n     assertThat(unobfuscatedTracerProvider)\n         .extracting(\"sharedState\")\n         .hasFieldOrPropertyWithValue(\"clock\", clock)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjYyMDAyOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2069#discussion_r522620028", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // this is not awesome\n          \n          \n            \n                // Since MeterProvider is in a different package, the only alternative to this reflective\n          \n          \n            \n                // approach would be to make the fields public for testing which is worse than this.", "author": "anuraaga", "createdAt": "2020-11-13T04:35:04Z", "path": "sdk/all/src/test/java/io/opentelemetry/sdk/OpenTelemetrySdkTest.java", "diffHunk": "@@ -76,10 +76,38 @@ void testReconfigure() {\n             .setClock(clock)\n             .setResource(resource)\n             .build();\n-    assertThat(openTelemetry.getTracerProvider()).isEqualTo(tracerProvider);\n+    assertThat(((ObfuscatedTracerProvider) openTelemetry.getTracerProvider()).unobfuscate())\n+        .isEqualTo(tracerProvider);\n     assertThat(openTelemetry.getMeterProvider()).isEqualTo(meterProvider);\n     assertThat(openTelemetry.getPropagators()).isEqualTo(propagators);\n     assertThat(openTelemetry.getResource()).isEqualTo(resource);\n     assertThat(openTelemetry.getClock()).isEqualTo(clock);\n   }\n+\n+  @Test\n+  void testReconfigure_justClockAndResource() {\n+    Resource resource = Resource.create(Attributes.builder().put(\"cat\", \"meow\").build());\n+    OpenTelemetrySdk openTelemetry =\n+        OpenTelemetrySdk.builder().setClock(clock).setResource(resource).build();\n+    TracerProvider unobfuscatedTracerProvider =\n+        ((ObfuscatedTracerProvider) openTelemetry.getTracerProvider()).unobfuscate();\n+\n+    assertThat(unobfuscatedTracerProvider).isInstanceOf(TracerSdkProvider.class);\n+    // this is not a great way to test this...\n+    assertThat(unobfuscatedTracerProvider)\n+        .extracting(\"sharedState\")\n+        .hasFieldOrPropertyWithValue(\"clock\", clock)\n+        .hasFieldOrPropertyWithValue(\"resource\", resource);\n+\n+    assertThat(openTelemetry.getMeterProvider()).isInstanceOf(MeterSdkProvider.class);\n+    // this is not awesome", "originalCommit": "9f06e8bbb31c96a8c7817c406adc0bd76f650546", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9fc935cff48140a15dbaba5b0f6cd6c21ae3d7ef", "chunk": "diff --git a/sdk/all/src/test/java/io/opentelemetry/sdk/OpenTelemetrySdkTest.java b/sdk/all/src/test/java/io/opentelemetry/sdk/OpenTelemetrySdkTest.java\nindex cceedf175..1c27b8cf1 100644\n--- a/sdk/all/src/test/java/io/opentelemetry/sdk/OpenTelemetrySdkTest.java\n+++ b/sdk/all/src/test/java/io/opentelemetry/sdk/OpenTelemetrySdkTest.java\n\n@@ -93,7 +93,8 @@ class OpenTelemetrySdkTest {\n         ((ObfuscatedTracerProvider) openTelemetry.getTracerProvider()).unobfuscate();\n \n     assertThat(unobfuscatedTracerProvider).isInstanceOf(TracerSdkProvider.class);\n-    // this is not a great way to test this...\n+    // Since TracerProvider is in a different package, the only alternative to this reflective\n+    // approach would be to make the fields public for testing which is worse than this.\n     assertThat(unobfuscatedTracerProvider)\n         .extracting(\"sharedState\")\n         .hasFieldOrPropertyWithValue(\"clock\", clock)\n"}}, {"oid": "9fc935cff48140a15dbaba5b0f6cd6c21ae3d7ef", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9fc935cff48140a15dbaba5b0f6cd6c21ae3d7ef", "message": "Update sdk/all/src/test/java/io/opentelemetry/sdk/OpenTelemetrySdkTest.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>", "committedDate": "2020-11-13T16:49:31Z", "type": "commit"}, {"oid": "111a49da707edbfdf999c6862c43e32227b9cdb1", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/111a49da707edbfdf999c6862c43e32227b9cdb1", "message": "Update sdk/all/src/test/java/io/opentelemetry/sdk/OpenTelemetrySdkTest.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>", "committedDate": "2020-11-13T16:49:41Z", "type": "commit"}, {"oid": "6e38a2caee98af3a5cdace54f0963471e349bdf1", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/6e38a2caee98af3a5cdace54f0963471e349bdf1", "message": "address code review comments; add tests", "committedDate": "2020-11-13T17:15:06Z", "type": "commit"}, {"oid": "6206fcb93ab7b0bbc099133c67e0242c374d6cda", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/6206fcb93ab7b0bbc099133c67e0242c374d6cda", "message": "Require the MeterProvider to be a MeterSdkProvider", "committedDate": "2020-11-16T22:39:18Z", "type": "commit"}]}