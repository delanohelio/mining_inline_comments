{"pr_number": 1934, "pr_title": "Replace EndSpanOptions.Builder with factory.", "pr_createdAt": "2020-10-30T05:09:16Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1934", "timeline": [{"oid": "1023526b87e557ccd44cbd4651a8bb92be0ea2cc", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1023526b87e557ccd44cbd4651a8bb92be0ea2cc", "message": "Replace EndSpanOptions.Builder with factory.", "committedDate": "2020-10-30T05:08:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE3NzIyOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1934#discussion_r515177229", "bodyText": "maybe just create(long endTimestamp) ?", "author": "jkwatson", "createdAt": "2020-10-30T15:22:34Z", "path": "api/src/main/java/io/opentelemetry/api/trace/EndSpanOptions.java", "diffHunk": "@@ -15,22 +15,21 @@\n @Immutable\n @AutoValue\n public abstract class EndSpanOptions {\n-  private static final EndSpanOptions DEFAULT = builder().build();\n+  private static final EndSpanOptions DEFAULT = createWithEndTimestamp(0L);\n+\n+  /**\n+   * Returns a {@link EndSpanOptions} indicating the span ended at the given {@code endTimestamp},\n+   * in nanoseconds.\n+   */\n+  public static EndSpanOptions createWithEndTimestamp(long endTimestamp) {", "originalCommit": "1023526b87e557ccd44cbd4651a8bb92be0ea2cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU4OTkxOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1934#discussion_r515589918", "bodyText": "Renamed - I think either this or removing the class and inlining into Span are both good options.", "author": "anuraaga", "createdAt": "2020-11-01T09:01:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE3NzIyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "866e3ec93642153669d07c5dcf1e6ef74de3ed67", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/api/trace/EndSpanOptions.java b/api/src/main/java/io/opentelemetry/api/trace/EndSpanOptions.java\nindex 748942cb4..f350c02f5 100644\n--- a/api/src/main/java/io/opentelemetry/api/trace/EndSpanOptions.java\n+++ b/api/src/main/java/io/opentelemetry/api/trace/EndSpanOptions.java\n\n@@ -15,13 +15,13 @@ import javax.annotation.concurrent.Immutable;\n @Immutable\n @AutoValue\n public abstract class EndSpanOptions {\n-  private static final EndSpanOptions DEFAULT = createWithEndTimestamp(0L);\n+  private static final EndSpanOptions DEFAULT = create(0L);\n \n   /**\n    * Returns a {@link EndSpanOptions} indicating the span ended at the given {@code endTimestamp},\n    * in nanoseconds.\n    */\n-  public static EndSpanOptions createWithEndTimestamp(long endTimestamp) {\n+  public static EndSpanOptions create(long endTimestamp) {\n     return new AutoValue_EndSpanOptions(endTimestamp);\n   }\n \n"}}, {"oid": "866e3ec93642153669d07c5dcf1e6ef74de3ed67", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/866e3ec93642153669d07c5dcf1e6ef74de3ed67", "message": "create", "committedDate": "2020-11-01T08:01:05Z", "type": "commit"}, {"oid": "af08553fa523c1ebced3adfb84e3a4933b24b166", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/af08553fa523c1ebced3adfb84e3a4933b24b166", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into endspanoptions-builder-later", "committedDate": "2020-11-03T05:03:33Z", "type": "commit"}, {"oid": "d8d4b696d00d52bf8d937b3c25ca35316ae89837", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d8d4b696d00d52bf8d937b3c25ca35316ae89837", "message": "Remove class completely", "committedDate": "2020-11-03T05:14:53Z", "type": "commit"}, {"oid": "fab9dc60039f8813628b27f6f4108331301e1733", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/fab9dc60039f8813628b27f6f4108331301e1733", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into endspanoptions-builder-later", "committedDate": "2020-11-03T05:47:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg5MzkxOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1934#discussion_r516893919", "bodyText": "As usual, I'm not a fan of using 0 as a magic number here. Would prefer something that was obviously not a valid timestamp, Long.MIN_VALUE or something.", "author": "jkwatson", "createdAt": "2020-11-03T19:07:04Z", "path": "api/src/main/java/io/opentelemetry/api/trace/Span.java", "diffHunk": "@@ -304,17 +304,18 @@ default Span setAttribute(AttributeKey<Long> key, int value) {\n   void end();\n \n   /**\n-   * Marks the end of {@code Span} execution with the specified {@link EndSpanOptions}.\n+   * Marks the end of {@code Span} execution with the specified timestamp.\n    *\n    * <p>Only the timing of the first end call for a given {@code Span} will be recorded, and\n    * implementations are free to ignore all further calls.\n    *\n    * <p>Use this method for specifying explicit end options, such as end {@code Timestamp}. When no\n    * explicit values are required, use {@link #end()}.\n    *\n-   * @param endOptions the explicit {@link EndSpanOptions} for this {@code Span}.\n+   * @param timestamp the explicit timestamp, as nanos from the epoch, for this {@code Span}. {@code\n+   *     0} indicates current time should be used.", "originalCommit": "d8d4b696d00d52bf8d937b3c25ca35316ae89837", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk2MjczMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1934#discussion_r516962733", "bodyText": "does this method need any magic for current time, since end() supports that?", "author": "trask", "createdAt": "2020-11-03T21:21:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg5MzkxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAxMTI4OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1934#discussion_r517011288", "bodyText": "I don't think so either but that's the same logic as we have right now - can we update the semantics separately? Want to get the API locked in", "author": "anuraaga", "createdAt": "2020-11-03T23:17:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg5MzkxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAxMTQ2OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1934#discussion_r517011468", "bodyText": "I wonder if no one noticed if I hadn't updated javadoc :-)", "author": "anuraaga", "createdAt": "2020-11-03T23:17:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg5MzkxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAxODAzMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1934#discussion_r517018031", "bodyText": "I did see the zeros floating around in tests and such and it was starting to make me grumpy, even before I saw the javadoc. :)", "author": "jkwatson", "createdAt": "2020-11-03T23:38:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg5MzkxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAxODcxMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1934#discussion_r517018710", "bodyText": "Before this PR, zero was an undocumented magic number. I guess it's better to have it documented, if we're going to use it! But, I'd rather not have the magic '0' at all, personally. I mean, maybe you want a span to end at unix epoch! (ok, not really)", "author": "jkwatson", "createdAt": "2020-11-03T23:40:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg5MzkxOQ=="}], "type": "inlineReview", "revised_code": null}]}