{"pr_number": 2175, "pr_title": "Use key as AttributeKey.toString", "pr_createdAt": "2020-12-02T05:28:59Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/2175", "timeline": [{"oid": "97fe7a1675a83705431eedc74c5bde0bf5c23274", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/97fe7a1675a83705431eedc74c5bde0bf5c23274", "message": "Use key as AttributeKey.toString", "committedDate": "2020-12-02T05:27:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkxNDkxMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2175#discussion_r533914913", "bodyText": "It might be nice to at least delineate that this isn't just a String. Maybe put a colon in front of it, so it looks like an elixir atom or a ruby symbol?", "author": "jkwatson", "createdAt": "2020-12-02T05:57:01Z", "path": "api/src/main/java/io/opentelemetry/api/common/AttributeKeyImpl.java", "diffHunk": "@@ -24,6 +24,11 @@ public String getKey() {\n   @Nullable\n   abstract String key();\n \n+  @Override\n+  public final String toString() {\n+    return getKey();", "originalCommit": "97fe7a1675a83705431eedc74c5bde0bf5c23274", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkxNTAxOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2175#discussion_r533915018", "bodyText": "or after it?", "author": "jkwatson", "createdAt": "2020-12-02T05:57:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkxNDkxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk3OTgxMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2175#discussion_r533979811", "bodyText": "I think the type should stay in the toString. Maybe name(type)? But I don't hate the current/old string representation.", "author": "Oberon00", "createdAt": "2020-12-02T08:30:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkxNDkxMw=="}], "type": "inlineReview", "revised_code": {"commit": "b0c80b33ecb4f20817dd5fdf35521aaa8165ad21", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/api/common/AttributeKeyImpl.java b/api/src/main/java/io/opentelemetry/api/common/AttributeKeyImpl.java\ndeleted file mode 100644\nindex 606a5e30c..000000000\n--- a/api/src/main/java/io/opentelemetry/api/common/AttributeKeyImpl.java\n+++ /dev/null\n\n@@ -1,66 +0,0 @@\n-/*\n- * Copyright The OpenTelemetry Authors\n- * SPDX-License-Identifier: Apache-2.0\n- */\n-\n-package io.opentelemetry.api.common;\n-\n-import com.google.auto.value.AutoValue;\n-import javax.annotation.Nullable;\n-\n-@SuppressWarnings(\"rawtypes\")\n-@AutoValue\n-abstract class AttributeKeyImpl<T> implements AttributeKey<T> {\n-\n-  static <T> AttributeKeyImpl<T> create(String key, AttributeType type) {\n-    return new AutoValue_AttributeKeyImpl<>(type, key);\n-  }\n-\n-  @Override\n-  public String getKey() {\n-    return key();\n-  }\n-\n-  @Nullable\n-  abstract String key();\n-\n-  @Override\n-  public final String toString() {\n-    return getKey();\n-  }\n-\n-  //////////////////////////////////\n-  // IMPORTANT: the equals/hashcode/compareTo *only* include the key, and not the type,\n-  // so that de-duping of attributes is based on the key, and not also based on the type.\n-  //////////////////////////////////\n-\n-  @Override\n-  public final boolean equals(Object o) {\n-    if (this == o) {\n-      return true;\n-    }\n-    if (!(o instanceof AttributeKeyImpl)) {\n-      return false;\n-    }\n-\n-    AttributeKeyImpl<?> that = (AttributeKeyImpl<?>) o;\n-\n-    return getKey() != null ? getKey().equals(that.getKey()) : that.getKey() == null;\n-  }\n-\n-  @Override\n-  public final int hashCode() {\n-    return getKey() != null ? getKey().hashCode() : 0;\n-  }\n-\n-  @Override\n-  public int compareTo(AttributeKey o) {\n-    if (getKey() == null) {\n-      return o.getKey() == null ? 0 : -1;\n-    }\n-    if (o.getKey() == null) {\n-      return 1;\n-    }\n-    return getKey().compareTo(o.getKey());\n-  }\n-}\n"}}, {"oid": "8df5ac1ba161adb7e1e8c9547f85477995b568b1", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8df5ac1ba161adb7e1e8c9547f85477995b568b1", "message": "Fix / more tests", "committedDate": "2020-12-02T08:18:10Z", "type": "commit"}, {"oid": "bfbbc5cab17bcbf39095986f4351d6b2ab7eb6b1", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/bfbbc5cab17bcbf39095986f4351d6b2ab7eb6b1", "message": "Add toString test for SpanWrapper", "committedDate": "2020-12-02T08:40:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk4NTI5Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2175#discussion_r533985296", "bodyText": "@jkwatson @Oberon00 I know what you're getting at, but here's the example we should be looking at - I'd say I like this output and anything else might just add confusion (adding quotes around the key is a possible option that I'm ambivalent on). In unit test failures, we want to eventually look something like\nSpanWrapper{name=HTTP GET, attributes={error=true, http.response_size=100}}\nwhere the attributes become extremely readable to me. SpanWrapper is very far away from looking like this though, lots to do to it.\nBy the way I added our current SpanWrapper toString for kicks (this is literally what we see in instrumentation tests which uses Spock to diff toStrings) - it was even worse than I expected ; ;", "author": "anuraaga", "createdAt": "2020-12-02T08:40:06Z", "path": "api/src/test/java/io/opentelemetry/api/common/AttributesTest.java", "diffHunk": "@@ -370,4 +367,20 @@ void nullsAreNoOps() {\n     assertThat(attributes.get(doubleArrayKey(\"arrayDouble\"))).isEqualTo(singletonList(1.0d));\n     assertThat(attributes.get(booleanArrayKey(\"arrayBool\"))).isEqualTo(singletonList(true));\n   }\n+\n+  @Test\n+  void attributesToString() {\n+    Attributes attributes =\n+        Attributes.builder()\n+            .put(\"otel.status_code\", \"OK\")\n+            .put(\"http.response_size\", 100)\n+            .put(\"process.cpu_consumed\", 33.44)\n+            .put(\"error\", true)\n+            .build();\n+\n+    assertThat(attributes.toString())\n+        .isEqualTo(\n+            \"{error=true, http.response_size=100, \"", "originalCommit": "8df5ac1ba161adb7e1e8c9547f85477995b568b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI5NzI4NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2175#discussion_r534297285", "bodyText": "Of course, the counter-argument (and I'd say a pretty strong one) is that with your change, you now can't distinguish between {error=true} and {error=true} where one of them is an actual boolean value (correct) and one is a string value (incorrect). And, even worse, with spock, your test would pass when it shouldn't!", "author": "jkwatson", "createdAt": "2020-12-02T16:18:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk4NTI5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY2ODYzMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2175#discussion_r539668630", "bodyText": "any thoughts here, @anuraaga ?", "author": "jkwatson", "createdAt": "2020-12-09T21:40:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk4NTI5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTUwNTgwMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2175#discussion_r541505803", "bodyText": "Sorry for taking forever to get back to this. Added quoting of string values, wonder if it's enough to have the clarity along with the brevity.", "author": "anuraaga", "createdAt": "2020-12-12T05:23:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk4NTI5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "b60db428718867e322cae8ae570fb6c93860bb95", "chunk": "diff --git a/api/src/test/java/io/opentelemetry/api/common/AttributesTest.java b/api/common/src/test/java/io/opentelemetry/api/common/AttributesTest.java\nsimilarity index 97%\nrename from api/src/test/java/io/opentelemetry/api/common/AttributesTest.java\nrename to api/common/src/test/java/io/opentelemetry/api/common/AttributesTest.java\nindex ba526ee0e..99b76d5d8 100644\n--- a/api/src/test/java/io/opentelemetry/api/common/AttributesTest.java\n+++ b/api/common/src/test/java/io/opentelemetry/api/common/AttributesTest.java\n\n@@ -376,11 +370,12 @@ class AttributesTest {\n             .put(\"http.response_size\", 100)\n             .put(\"process.cpu_consumed\", 33.44)\n             .put(\"error\", true)\n+            .put(\"success\", \"true\")\n             .build();\n \n     assertThat(attributes.toString())\n         .isEqualTo(\n             \"{error=true, http.response_size=100, \"\n-                + \"otel.status_code=OK, process.cpu_consumed=33.44}\");\n+                + \"otel.status_code=\\\"OK\\\", process.cpu_consumed=33.44, success=\\\"true\\\"}\");\n   }\n }\n"}}, {"oid": "2ebd5be2d3c1853a88998e5afdb14e22436fcb35", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/2ebd5be2d3c1853a88998e5afdb14e22436fcb35", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into attributekey-tostring", "committedDate": "2020-12-12T05:15:45Z", "type": "commit"}, {"oid": "b60db428718867e322cae8ae570fb6c93860bb95", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b60db428718867e322cae8ae570fb6c93860bb95", "message": "Quote string values", "committedDate": "2020-12-12T05:23:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyOTIzMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2175#discussion_r542529231", "bodyText": "shouldn't this one have quotes around the value1 ?", "author": "jkwatson", "createdAt": "2020-12-14T16:37:39Z", "path": "api/common/src/test/java/io/opentelemetry/api/common/AttributesTest.java", "diffHunk": "@@ -118,10 +118,7 @@ void asMap() {\n     assertThat(map.values().contains(\"value1\")).isTrue();\n     assertThat(map.values().contains(\"value3\")).isFalse();\n \n-    assertThat(map.toString())\n-        .isEqualTo(\n-            \"ReadOnlyArrayMap{AttributeKeyImpl{getType=STRING, key=key1}=value1,\"\n-                + \"AttributeKeyImpl{getType=LONG, key=key2}=333}\");\n+    assertThat(map.toString()).isEqualTo(\"ReadOnlyArrayMap{key1=value1,key2=333}\");", "originalCommit": "b60db428718867e322cae8ae570fb6c93860bb95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk1NzQ5MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2175#discussion_r542957490", "bodyText": "This is Map, not Attributes", "author": "anuraaga", "createdAt": "2020-12-15T00:42:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyOTIzMQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "b0c80b33ecb4f20817dd5fdf35521aaa8165ad21", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b0c80b33ecb4f20817dd5fdf35521aaa8165ad21", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into attributekey-tostring", "committedDate": "2020-12-15T00:45:15Z", "type": "commit"}, {"oid": "76572946dc032289bd5c0b27110cb31730990598", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/76572946dc032289bd5c0b27110cb31730990598", "message": "Fix", "committedDate": "2020-12-15T01:07:15Z", "type": "commit"}]}