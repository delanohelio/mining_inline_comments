{"pr_number": 1619, "pr_title": "Add a generic type for the key on the ImmutableKeyValuePairs.", "pr_createdAt": "2020-09-02T23:44:27Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1619", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcwNjA4OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1619#discussion_r482706089", "bodyText": "I think for these sort of interfaces, at least until we're on Java 8 someday, we can add a comment like. This is a FunctionalInterface and will not have methods added to it - it is safe to use as a lambda without chance of API breakage. The reason we don't add the annotation is we target Java 7.", "author": "anuraaga", "createdAt": "2020-09-03T05:04:37Z", "path": "api/src/main/java/io/opentelemetry/common/AttributeConsumer.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+/** Convenience interface for consuming {@link ReadableAttributes}. */", "originalCommit": "71365ee601fae64a09122d788b8b44d59080185f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA0NDQ4NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1619#discussion_r483044484", "bodyText": "A good point. But, if I'm going ahead with changing the API for #1580 , this one won't be so nice and simple any more, but have lots of methods on it. The LabelConsumer is a different story, though, as I think it will stay simple.", "author": "jkwatson", "createdAt": "2020-09-03T14:58:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcwNjA4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "beab30448468182ef1a958b396f9cab55d101d32", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/common/AttributeConsumer.java b/api/src/main/java/io/opentelemetry/common/AttributeConsumer.java\nindex b76a1b59e..8196ef226 100644\n--- a/api/src/main/java/io/opentelemetry/common/AttributeConsumer.java\n+++ b/api/src/main/java/io/opentelemetry/common/AttributeConsumer.java\n\n@@ -16,6 +16,10 @@\n \n package io.opentelemetry.common;\n \n-/** Convenience interface for consuming {@link ReadableAttributes}. */\n+/**\n+ * Convenience interface for consuming {@link ReadableAttributes}.\n+ *\n+ * @since 0.9.0\n+ */\n public interface AttributeConsumer\n     extends ReadableKeyValuePairs.KeyValueConsumer<String, AttributeValue> {}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcwNjE5MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1619#discussion_r482706190", "bodyText": "Ditto", "author": "anuraaga", "createdAt": "2020-09-03T05:04:56Z", "path": "api/src/main/java/io/opentelemetry/common/LabelConsumer.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import io.opentelemetry.common.ReadableKeyValuePairs.KeyValueConsumer;\n+\n+/** Convenience interface for consuming {@link Labels}. */", "originalCommit": "71365ee601fae64a09122d788b8b44d59080185f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE2ODcwMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1619#discussion_r483168701", "bodyText": "I added some javadoc here. Let me know what you think.", "author": "jkwatson", "createdAt": "2020-09-03T18:17:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcwNjE5MA=="}], "type": "inlineReview", "revised_code": {"commit": "beab30448468182ef1a958b396f9cab55d101d32", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/common/LabelConsumer.java b/api/src/main/java/io/opentelemetry/common/LabelConsumer.java\nindex c81b27a60..95b161485 100644\n--- a/api/src/main/java/io/opentelemetry/common/LabelConsumer.java\n+++ b/api/src/main/java/io/opentelemetry/common/LabelConsumer.java\n\n@@ -18,5 +18,15 @@ package io.opentelemetry.common;\n \n import io.opentelemetry.common.ReadableKeyValuePairs.KeyValueConsumer;\n \n-/** Convenience interface for consuming {@link Labels}. */\n-public interface LabelConsumer extends KeyValueConsumer<String, String> {}\n+/**\n+ * Convenience interface for consuming {@link Labels}.\n+ *\n+ * <p>This interface should be considered to be a FunctionalInterface in the java 8+ meaning of that\n+ * term.\n+ *\n+ * @since 0.9.0\n+ */\n+public interface LabelConsumer extends KeyValueConsumer<String, String> {\n+  @Override\n+  void consume(String key, String value);\n+}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcwNzE0OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1619#discussion_r482707148", "bodyText": "I don't quite follow the PR description about clashing with Map - we don't inherit from Map so there's no clash right?", "author": "anuraaga", "createdAt": "2020-09-03T05:08:16Z", "path": "api/src/main/java/io/opentelemetry/common/ReadableAttributes.java", "diffHunk": "@@ -21,4 +21,6 @@\n  *\n  * <p>See {@link Attributes} for the public API implementation.\n  */\n-public interface ReadableAttributes extends ReadableKeyValuePairs<AttributeValue> {}\n+public interface ReadableAttributes extends ReadableKeyValuePairs<String, AttributeValue> {\n+  AttributeValue getValue(String key);", "originalCommit": "71365ee601fae64a09122d788b8b44d59080185f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA0NTQ1NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1619#discussion_r483045455", "bodyText": "The issue is with the AttributeMap used in the RecordEventsReadableSpan. It does extend Map, and the get method on Map clashes with what this has now.", "author": "jkwatson", "createdAt": "2020-09-03T14:59:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcwNzE0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE2MjQ0OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1619#discussion_r483162448", "bodyText": "I updated the PR description with some details that I realized was missing for people other than me. :)", "author": "jkwatson", "createdAt": "2020-09-03T18:06:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcwNzE0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI4NjU2Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1619#discussion_r483286562", "bodyText": "Maybe a better answer is to finally rip off the bandaid, and make the AttributesMap not extend HashMap.", "author": "jkwatson", "createdAt": "2020-09-03T22:27:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcwNzE0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAxMjgwOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1619#discussion_r485012809", "bodyText": "@anuraaga I made AttributesMap not extend HashMap anymore, and restored the get name. Please take a look!", "author": "jkwatson", "createdAt": "2020-09-08T15:32:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcwNzE0OA=="}], "type": "inlineReview", "revised_code": {"commit": "73c2865d67c68fe37e0692fa4632c31a1b8aa5bd", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/common/ReadableAttributes.java b/api/src/main/java/io/opentelemetry/common/ReadableAttributes.java\nindex 8fcd5a30f..59f48b798 100644\n--- a/api/src/main/java/io/opentelemetry/common/ReadableAttributes.java\n+++ b/api/src/main/java/io/opentelemetry/common/ReadableAttributes.java\n\n@@ -22,5 +22,5 @@ package io.opentelemetry.common;\n  * <p>See {@link Attributes} for the public API implementation.\n  */\n public interface ReadableAttributes extends ReadableKeyValuePairs<String, AttributeValue> {\n-  AttributeValue getValue(String key);\n+  AttributeValue get(String key);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcwODU1MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1619#discussion_r482708550", "bodyText": "I can't find this type parameter used in #1598. Why do we need a type parameter for the key? Don't we always use String for the key? Accessors may use specialized types for type safety though\nAttributes {\n  void set(StringKey, String value)\n  void set(BooleanKey, boolean value)\n  void set(Key<T>, T value)\n\n  String getString(StringKey);\n  Boolean getBoolean(BooleanKey);\n}\n\nI don't see a generic parameter for the key needed here, am I missing anything?\nAlso, I realized the typed keys isn't great for getters \ud83d\ude05 It might be a reason why in grpc-context, the \"setters\" (e.g., Context.withValue) accept key as a parameter, and getting is something like MyKey.get(context). Since we don't have getters though not a big deal just noticed it.", "author": "anuraaga", "createdAt": "2020-09-03T05:13:40Z", "path": "api/src/main/java/io/opentelemetry/common/ReadableKeyValuePairs.java", "diffHunk": "@@ -16,39 +16,28 @@\n \n package io.opentelemetry.common;\n \n-import javax.annotation.Nullable;\n-\n /**\n  * A read-only container for String-keyed attributes.\n  *\n  * @param <V> The type of the values contained in this.\n  */\n-public interface ReadableKeyValuePairs<V> {\n+public interface ReadableKeyValuePairs<K, V> {", "originalCommit": "71365ee601fae64a09122d788b8b44d59080185f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA0Nzg3MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1619#discussion_r483047871", "bodyText": "This will be needed when we switch the key type, since they won't be strings any more. The prototype didn't mess with the underlying implementation, but just stuck with Maps for demo simplicity (note the TODOs in the prototype code).", "author": "jkwatson", "createdAt": "2020-09-03T15:02:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcwODU1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE2MjM3OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1619#discussion_r483162378", "bodyText": "I updated the PR description with some details that I realized was missing for people other than me. :)", "author": "jkwatson", "createdAt": "2020-09-03T18:06:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcwODU1MA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "beab30448468182ef1a958b396f9cab55d101d32", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/beab30448468182ef1a958b396f9cab55d101d32", "message": "Add some javadoc to the new interfaces.", "committedDate": "2020-09-03T18:16:53Z", "type": "forcePushed"}, {"oid": "15651761e647403d5f34df45cca39352ed14e5e8", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/15651761e647403d5f34df45cca39352ed14e5e8", "message": "Add a generic type for the key on the ImmutableKeyValuePairs.\nThis necessitated changing the `get` to `getValue` to avoid clashing with the java.util.Map interface.\nAlso introduced convenience sub-interfaces for consuming labels and attributes, so consumers don't have to worry about the types if they don't want to.", "committedDate": "2020-09-08T16:45:06Z", "type": "commit"}, {"oid": "84d1566c4de6ec2c985dfa323cb2bee383678f58", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/84d1566c4de6ec2c985dfa323cb2bee383678f58", "message": "Add some javadoc to the new interfaces.", "committedDate": "2020-09-08T16:45:06Z", "type": "commit"}, {"oid": "73c2865d67c68fe37e0692fa4632c31a1b8aa5bd", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/73c2865d67c68fe37e0692fa4632c31a1b8aa5bd", "message": "Make AttributesMap not extend map, and restore the get method name for Attributes.", "committedDate": "2020-09-08T16:45:06Z", "type": "commit"}, {"oid": "73c2865d67c68fe37e0692fa4632c31a1b8aa5bd", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/73c2865d67c68fe37e0692fa4632c31a1b8aa5bd", "message": "Make AttributesMap not extend map, and restore the get method name for Attributes.", "committedDate": "2020-09-08T16:45:06Z", "type": "forcePushed"}, {"oid": "e75e01a282b21d9e03ba17c4671b3967abf3ef6a", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e75e01a282b21d9e03ba17c4671b3967abf3ef6a", "message": "make ImmutableKeyValuePairs also have a parameterized key type", "committedDate": "2020-09-08T17:23:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4MTA2MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1619#discussion_r485281060", "bodyText": "I think it's worth returning the existing item like Map since it's familiar and opens more use cases without extra work. It's not backwards-compatible to change return value of a method unfortunately.", "author": "anuraaga", "createdAt": "2020-09-09T01:20:10Z", "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/AttributesMap.java", "diffHunk": "@@ -17,84 +17,83 @@\n package io.opentelemetry.sdk.trace;\n \n import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.common.Attributes;\n import io.opentelemetry.common.ReadableAttributes;\n import java.util.HashMap;\n import java.util.Map;\n import javax.annotation.Nullable;\n \n /**\n- * A map implementation with a fixed capacity that drops attributes when the map gets full.\n+ * A map with a fixed capacity that drops attributes when the map gets full.\n  *\n- * <p>Some APIs may have slightly different behaviors, like `put` which returns null if out of\n- * capacity.\n+ * <p>Note: this doesn't implement the Map interface, but behaves very similarly to one.\n  */\n-final class AttributesMap extends HashMap<String, AttributeValue> implements ReadableAttributes {\n+final class AttributesMap implements ReadableAttributes {\n+  private final Map<String, AttributeValue> data = new HashMap<>();\n \n   private final long capacity;\n   private int totalAddedValues = 0;\n-  // Here because -Werror complains about this: [serial] serializable class AttributesWithCapacity\n-  // has no definition of serialVersionUID. This class shouldn't be serialized.\n-  private static final long serialVersionUID = 42L;\n \n   AttributesMap(long capacity) {\n     this.capacity = capacity;\n   }\n \n-  @Nullable\n-  @Override\n-  public AttributeValue put(String key, AttributeValue value) {\n+  public void put(String key, AttributeValue value) {", "originalCommit": "e75e01a282b21d9e03ba17c4671b3967abf3ef6a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4MzQ5Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1619#discussion_r485283493", "bodyText": "That's fair. I'll make it so.", "author": "jkwatson", "createdAt": "2020-09-09T01:29:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4MTA2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4MzYzMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1619#discussion_r485283632", "bodyText": "although, this is an internal, non-public class, so I don't think it actually matters much. :)", "author": "jkwatson", "createdAt": "2020-09-09T01:29:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4MTA2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4NDE3OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1619#discussion_r485284178", "bodyText": "Oops haha. Yeah then no worries at all", "author": "anuraaga", "createdAt": "2020-09-09T01:31:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4MTA2MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4MTMzOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1619#discussion_r485281339", "bodyText": "Ditto", "author": "anuraaga", "createdAt": "2020-09-09T01:21:11Z", "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/AttributesMap.java", "diffHunk": "@@ -17,84 +17,83 @@\n package io.opentelemetry.sdk.trace;\n \n import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.common.Attributes;\n import io.opentelemetry.common.ReadableAttributes;\n import java.util.HashMap;\n import java.util.Map;\n import javax.annotation.Nullable;\n \n /**\n- * A map implementation with a fixed capacity that drops attributes when the map gets full.\n+ * A map with a fixed capacity that drops attributes when the map gets full.\n  *\n- * <p>Some APIs may have slightly different behaviors, like `put` which returns null if out of\n- * capacity.\n+ * <p>Note: this doesn't implement the Map interface, but behaves very similarly to one.\n  */\n-final class AttributesMap extends HashMap<String, AttributeValue> implements ReadableAttributes {\n+final class AttributesMap implements ReadableAttributes {\n+  private final Map<String, AttributeValue> data = new HashMap<>();\n \n   private final long capacity;\n   private int totalAddedValues = 0;\n-  // Here because -Werror complains about this: [serial] serializable class AttributesWithCapacity\n-  // has no definition of serialVersionUID. This class shouldn't be serialized.\n-  private static final long serialVersionUID = 42L;\n \n   AttributesMap(long capacity) {\n     this.capacity = capacity;\n   }\n \n-  @Nullable\n-  @Override\n-  public AttributeValue put(String key, AttributeValue value) {\n+  public void put(String key, AttributeValue value) {\n     totalAddedValues++;\n-    if (size() >= capacity && !containsKey(key)) {\n-      return null;\n-    }\n-    return super.put(key, value);\n-  }\n-\n-  @Override\n-  public void putAll(Map<? extends String, ? extends AttributeValue> values) {\n-    for (Map.Entry<? extends String, ? extends AttributeValue> entry : values.entrySet()) {\n-      put(entry.getKey(), entry.getValue());\n+    if (data.size() >= capacity && !data.containsKey(key)) {\n+      return;\n     }\n+    data.put(key, value);\n   }\n \n-  @Nullable\n-  @Override\n-  public AttributeValue remove(Object key) {\n-    return super.remove(key);\n-  }\n-\n-  // Added as public to override the newly added methods in java8, so when we do the switch and\n-  // start using them we remember to fix them and count the number of attributes added.\n-\n-  @SuppressWarnings(\"MissingOverride\")\n-  public AttributeValue putIfAbsent(String key, AttributeValue value) {\n-    throw new UnsupportedOperationException(\"Do not call methods on the map\");\n+  void remove(String key) {", "originalCommit": "e75e01a282b21d9e03ba17c4671b3967abf3ef6a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4MzUxNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1619#discussion_r485283514", "bodyText": "ditto", "author": "jkwatson", "createdAt": "2020-09-09T01:29:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4MTMzOQ=="}], "type": "inlineReview", "revised_code": null}]}