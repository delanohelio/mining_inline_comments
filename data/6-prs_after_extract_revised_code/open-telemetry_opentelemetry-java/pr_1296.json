{"pr_number": 1296, "pr_title": "Cleanup and additional tests for ConfigBuilder", "pr_createdAt": "2020-06-01T08:03:51Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1296", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI5Nzg0Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1296#discussion_r433297843", "bodyText": "Use containsExactly to confirm that only expected values are in the map", "author": "bogdandrutu", "createdAt": "2020-06-01T15:18:39Z", "path": "sdk/src/test/java/io/opentelemetry/sdk/common/export/ConfigBuilderTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.common.export;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import io.opentelemetry.sdk.common.export.ConfigBuilder.NamingConvention;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.contrib.java.lang.system.EnvironmentVariables;\n+import org.junit.contrib.java.lang.system.ProvideSystemProperty;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/** Tests for {@link ConfigBuilderTest}. */\n+@RunWith(JUnit4.class)\n+public class ConfigBuilderTest {\n+  @Rule public final ExpectedException thrown = ExpectedException.none();\n+\n+  @Test\n+  public void testNormalize_dot() {\n+    assertThat(NamingConvention.DOT.normalize(\"lower.case\")).isEqualTo(\"lower.case\");\n+    assertThat(NamingConvention.DOT.normalize(\"lower_case\")).isEqualTo(\"lower_case\");\n+    assertThat(NamingConvention.DOT.normalize(\"loWer.cAsE\")).isEqualTo(\"lower.case\");\n+    assertThat(NamingConvention.DOT.normalize(\"loWer_cAsE\")).isEqualTo(\"lower_case\");\n+  }\n+\n+  @Test\n+  public void testNormalize_env() {\n+    assertThat(NamingConvention.ENV_VAR.normalize(\"lower.case\")).isEqualTo(\"lower.case\");\n+    assertThat(NamingConvention.ENV_VAR.normalize(\"lower_case\")).isEqualTo(\"lower.case\");\n+    assertThat(NamingConvention.ENV_VAR.normalize(\"loWer.cAsE\")).isEqualTo(\"lower.case\");\n+    assertThat(NamingConvention.ENV_VAR.normalize(\"loWer_cAsE\")).isEqualTo(\"lower.case\");\n+  }\n+\n+  @Test\n+  public void testNormalize_dotMap() {\n+    Map<String, String> map = new HashMap<>();\n+    map.put(\"lower.case\", \"1\");\n+    map.put(\"lower_case\", \"2\");\n+    map.put(\"loWer.cAsE\", \"3\");\n+    map.put(\"loWer_cAsE\", \"4\");\n+    Map<String, String> normalized = NamingConvention.DOT.normalize(map);\n+    assertThat(normalized.size()).isEqualTo(2);\n+    assertThat(normalized.get(\"lower.case\")).isNotEmpty();", "originalCommit": "08c3127c8940287008d38840617b2f0af4ec13f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "71d630e5d151f5cb1fb1a6c98fa2888b57062358", "chunk": "diff --git a/sdk/src/test/java/io/opentelemetry/sdk/common/export/ConfigBuilderTest.java b/sdk/src/test/java/io/opentelemetry/sdk/common/export/ConfigBuilderTest.java\nindex 2eb865d9b..7ad7514f4 100644\n--- a/sdk/src/test/java/io/opentelemetry/sdk/common/export/ConfigBuilderTest.java\n+++ b/sdk/src/test/java/io/opentelemetry/sdk/common/export/ConfigBuilderTest.java\n\n@@ -19,20 +19,114 @@ package io.opentelemetry.sdk.common.export;\n import static com.google.common.truth.Truth.assertThat;\n \n import io.opentelemetry.sdk.common.export.ConfigBuilder.NamingConvention;\n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.Map;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.contrib.java.lang.system.EnvironmentVariables;\n import org.junit.contrib.java.lang.system.ProvideSystemProperty;\n-import org.junit.rules.ExpectedException;\n import org.junit.runner.RunWith;\n import org.junit.runners.JUnit4;\n \n-/** Tests for {@link ConfigBuilderTest}. */\n+/** Tests for {@link io.opentelemetry.sdk.common.export.ConfigBuilder}. */\n @RunWith(JUnit4.class)\n public class ConfigBuilderTest {\n-  @Rule public final ExpectedException thrown = ExpectedException.none();\n+\n+  @Test\n+  public void normalize() {\n+    Map<String, String> dotValues =\n+        NamingConvention.DOT.normalize(Collections.singletonMap(\"Test.Config.Key\", \"value\"));\n+    assertThat(dotValues).containsEntry(\"test.config.key\", \"value\");\n+\n+    Map<String, String> envValue =\n+        NamingConvention.ENV_VAR.normalize(Collections.singletonMap(\"TEST_CONFIG_KEY\", \"value\"));\n+    assertThat(envValue).containsEntry(\"test.config.key\", \"value\");\n+  }\n+\n+  @Test\n+  public void booleanProperty() {\n+    Boolean booleanProperty =\n+        ConfigBuilder.getBooleanProperty(\"boolean\", Collections.singletonMap(\"boolean\", \"true\"));\n+    assertThat(booleanProperty).isTrue();\n+  }\n+\n+  @Test\n+  public void longProperty() {\n+    Long longProperty =\n+        ConfigBuilder.getLongProperty(\"long\", Collections.singletonMap(\"long\", \"42343\"));\n+    assertThat(longProperty).isEqualTo(42343);\n+  }\n+\n+  @Test\n+  public void intProperty() {\n+    Integer intProperty =\n+        ConfigBuilder.getIntProperty(\"int\", Collections.singletonMap(\"int\", \"43543\"));\n+    assertThat(intProperty).isEqualTo(43543);\n+  }\n+\n+  @Test\n+  public void doubleProperty() {\n+    Double doubleProperty =\n+        ConfigBuilder.getDoubleProperty(\"double\", Collections.singletonMap(\"double\", \"5.6\"));\n+    assertThat(doubleProperty).isEqualTo(5.6);\n+  }\n+\n+  @Test\n+  public void invalidBooleanProperty() {\n+    Boolean booleanProperty =\n+        ConfigBuilder.getBooleanProperty(\"boolean\", Collections.singletonMap(\"boolean\", \"23435\"));\n+    assertThat(booleanProperty).isFalse();\n+  }\n+\n+  @Test\n+  public void invalidLongProperty() {\n+    Long longProperty =\n+        ConfigBuilder.getLongProperty(\"long\", Collections.singletonMap(\"long\", \"45.6\"));\n+    assertThat(longProperty).isNull();\n+  }\n+\n+  @Test\n+  public void invalidIntProperty() {\n+    Integer intProperty =\n+        ConfigBuilder.getIntProperty(\"int\", Collections.singletonMap(\"int\", \"false\"));\n+    assertThat(intProperty).isNull();\n+  }\n+\n+  @Test\n+  public void invalidDoubleProperty() {\n+    Double doubleProperty =\n+        ConfigBuilder.getDoubleProperty(\"double\", Collections.singletonMap(\"double\", \"something\"));\n+    assertThat(doubleProperty).isNull();\n+  }\n+\n+  @Test\n+  public void nullValue_BooleanProperty() {\n+    Boolean booleanProperty =\n+        ConfigBuilder.getBooleanProperty(\"boolean\", Collections.<String, String>emptyMap());\n+    assertThat(booleanProperty).isNull();\n+  }\n+\n+  @Test\n+  public void nullValue_LongProperty() {\n+    Long longProperty =\n+        ConfigBuilder.getLongProperty(\"long\", Collections.<String, String>emptyMap());\n+    assertThat(longProperty).isNull();\n+  }\n+\n+  @Test\n+  public void nullValue_IntProperty() {\n+    Integer intProperty =\n+        ConfigBuilder.getIntProperty(\"int\", Collections.<String, String>emptyMap());\n+    assertThat(intProperty).isNull();\n+  }\n+\n+  @Test\n+  public void nullValue_DoubleProperty() {\n+    Double doubleProperty =\n+        ConfigBuilder.getDoubleProperty(\"double\", Collections.<String, String>emptyMap());\n+    assertThat(doubleProperty).isNull();\n+  }\n \n   @Test\n   public void testNormalize_dot() {\n"}}, {"oid": "71d630e5d151f5cb1fb1a6c98fa2888b57062358", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/71d630e5d151f5cb1fb1a6c98fa2888b57062358", "message": "Cleanup and tests for ConfigBuilder", "committedDate": "2020-06-02T14:29:05Z", "type": "commit"}, {"oid": "925be3391bfbe02c1d4e86229da7f2a649624eaf", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/925be3391bfbe02c1d4e86229da7f2a649624eaf", "message": "Add more tests", "committedDate": "2020-06-02T14:29:59Z", "type": "commit"}, {"oid": "eb2f889aabf50353ca697594c05465935b51eafb", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/eb2f889aabf50353ca697594c05465935b51eafb", "message": "Document mockito extension", "committedDate": "2020-06-02T14:29:59Z", "type": "commit"}, {"oid": "c6f9975a07890aa753e4e251a0276ddc6df461f8", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c6f9975a07890aa753e4e251a0276ddc6df461f8", "message": "Reformat after rebase", "committedDate": "2020-06-02T14:32:44Z", "type": "commit"}, {"oid": "c6f9975a07890aa753e4e251a0276ddc6df461f8", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c6f9975a07890aa753e4e251a0276ddc6df461f8", "message": "Reformat after rebase", "committedDate": "2020-06-02T14:32:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk5NDM1Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1296#discussion_r433994353", "bodyText": "This is not necessary if you use contains exactly :)", "author": "bogdandrutu", "createdAt": "2020-06-02T16:01:45Z", "path": "sdk/src/test/java/io/opentelemetry/sdk/common/export/ConfigBuilderTest.java", "diffHunk": "@@ -123,4 +127,174 @@ public void nullValue_DoubleProperty() {\n         ConfigBuilder.getDoubleProperty(\"double\", Collections.<String, String>emptyMap());\n     assertThat(doubleProperty).isNull();\n   }\n+\n+  @Test\n+  public void testNormalize_dot() {\n+    assertThat(NamingConvention.DOT.normalize(\"lower.case\")).isEqualTo(\"lower.case\");\n+    assertThat(NamingConvention.DOT.normalize(\"lower_case\")).isEqualTo(\"lower_case\");\n+    assertThat(NamingConvention.DOT.normalize(\"loWer.cAsE\")).isEqualTo(\"lower.case\");\n+    assertThat(NamingConvention.DOT.normalize(\"loWer_cAsE\")).isEqualTo(\"lower_case\");\n+  }\n+\n+  @Test\n+  public void testNormalize_env() {\n+    assertThat(NamingConvention.ENV_VAR.normalize(\"lower.case\")).isEqualTo(\"lower.case\");\n+    assertThat(NamingConvention.ENV_VAR.normalize(\"lower_case\")).isEqualTo(\"lower.case\");\n+    assertThat(NamingConvention.ENV_VAR.normalize(\"loWer.cAsE\")).isEqualTo(\"lower.case\");\n+    assertThat(NamingConvention.ENV_VAR.normalize(\"loWer_cAsE\")).isEqualTo(\"lower.case\");\n+  }\n+\n+  @Test\n+  public void testNormalize_dotMap() {\n+    Map<String, String> map = new HashMap<>();\n+    map.put(\"lower.case\", \"1\");\n+    map.put(\"lower_case\", \"2\");\n+    map.put(\"loWer.cAsE\", \"3\");\n+    map.put(\"loWer_cAsE\", \"4\");\n+    Map<String, String> normalized = NamingConvention.DOT.normalize(map);\n+    assertThat(normalized.size()).isEqualTo(2);", "originalCommit": "c6f9975a07890aa753e4e251a0276ddc6df461f8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}