{"pr_number": 2211, "pr_title": "Add caching for sanitized labels in the Prometheus MetricAdapter.", "pr_createdAt": "2020-12-07T20:02:53Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/2211", "timeline": [{"oid": "ea84a87477e002728fc2be76650c6cca0bdc8428", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ea84a87477e002728fc2be76650c6cca0bdc8428", "message": "cache sanitized labels", "committedDate": "2020-12-07T19:59:19Z", "type": "commit"}, {"oid": "8800dc07c2ada61727d685284bc9ef90da7781da", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8800dc07c2ada61727d685284bc9ef90da7781da", "message": "rollback", "committedDate": "2020-12-07T20:02:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1MDM4NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2211#discussion_r537950384", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class LabelNameSanitizer implements Function<String, String> {\n          \n          \n            \n            class LabelNameSanitizer implements Function<String, String> {", "author": "anuraaga", "createdAt": "2020-12-08T00:58:24Z", "path": "exporters/prometheus/src/main/java/io/opentelemetry/exporter/prometheus/LabelNameSanitizer.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.exporter.prometheus;\n+\n+import io.prometheus.client.Collector;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+/** Used to convert a label keys to a label names. Sanitizes the label keys. Not thread safe. */\n+public class LabelNameSanitizer implements Function<String, String> {", "originalCommit": "8800dc07c2ada61727d685284bc9ef90da7781da", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b30345eb14167032f7df5aab87c3b6ab87530202", "chunk": "diff --git a/exporters/prometheus/src/main/java/io/opentelemetry/exporter/prometheus/LabelNameSanitizer.java b/exporters/prometheus/src/main/java/io/opentelemetry/exporter/prometheus/LabelNameSanitizer.java\nindex d4aa52799..c0bf82162 100644\n--- a/exporters/prometheus/src/main/java/io/opentelemetry/exporter/prometheus/LabelNameSanitizer.java\n+++ b/exporters/prometheus/src/main/java/io/opentelemetry/exporter/prometheus/LabelNameSanitizer.java\n\n@@ -6,15 +6,15 @@\n package io.opentelemetry.exporter.prometheus;\n \n import io.prometheus.client.Collector;\n-import java.util.HashMap;\n import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n import java.util.function.Function;\n \n /** Used to convert a label keys to a label names. Sanitizes the label keys. Not thread safe. */\n-public class LabelNameSanitizer implements Function<String, String> {\n+class LabelNameSanitizer implements Function<String, String> {\n \n   private final Function<String, String> delegate;\n-  private final Map<String, String> cache = new HashMap<>();\n+  private final Map<String, String> cache = new ConcurrentHashMap<>();\n \n   public LabelNameSanitizer() {\n     this(Collector::sanitizeMetricName);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1MDc0NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2211#discussion_r537950745", "bodyText": "Is prometheus exporter always guaranteed to be scraped by the same thread? I think I'd just stick with ConcurrentHashMap to let this be safe.", "author": "anuraaga", "createdAt": "2020-12-08T00:59:24Z", "path": "exporters/prometheus/src/main/java/io/opentelemetry/exporter/prometheus/LabelNameSanitizer.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.exporter.prometheus;\n+\n+import io.prometheus.client.Collector;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+/** Used to convert a label keys to a label names. Sanitizes the label keys. Not thread safe. */", "originalCommit": "8800dc07c2ada61727d685284bc9ef90da7781da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYwOTQ0Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2211#discussion_r538609443", "bodyText": "I don't know the answer, but I'm cool with using ConcurrentHashMap here as a safety precaution.  Thanks for the suggestion.", "author": "breedx-splk", "createdAt": "2020-12-08T17:05:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1MDc0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "b30345eb14167032f7df5aab87c3b6ab87530202", "chunk": "diff --git a/exporters/prometheus/src/main/java/io/opentelemetry/exporter/prometheus/LabelNameSanitizer.java b/exporters/prometheus/src/main/java/io/opentelemetry/exporter/prometheus/LabelNameSanitizer.java\nindex d4aa52799..c0bf82162 100644\n--- a/exporters/prometheus/src/main/java/io/opentelemetry/exporter/prometheus/LabelNameSanitizer.java\n+++ b/exporters/prometheus/src/main/java/io/opentelemetry/exporter/prometheus/LabelNameSanitizer.java\n\n@@ -6,15 +6,15 @@\n package io.opentelemetry.exporter.prometheus;\n \n import io.prometheus.client.Collector;\n-import java.util.HashMap;\n import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n import java.util.function.Function;\n \n /** Used to convert a label keys to a label names. Sanitizes the label keys. Not thread safe. */\n-public class LabelNameSanitizer implements Function<String, String> {\n+class LabelNameSanitizer implements Function<String, String> {\n \n   private final Function<String, String> delegate;\n-  private final Map<String, String> cache = new HashMap<>();\n+  private final Map<String, String> cache = new ConcurrentHashMap<>();\n \n   public LabelNameSanitizer() {\n     this(Collector::sanitizeMetricName);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1MTAyOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2211#discussion_r537951029", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                LabelNameSanitizer testClass = new LabelNameSanitizer(delegate);\n          \n          \n            \n                LabelNameSanitizer sanitizer = new LabelNameSanitizer(delegate);\n          \n      \n    \n    \n  \n\nmakes the test easier to read", "author": "anuraaga", "createdAt": "2020-12-08T01:00:04Z", "path": "exporters/prometheus/src/test/java/io/opentelemetry/exporter/prometheus/LabelNameSanitizerTest.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.exporter.prometheus;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Function;\n+import org.junit.jupiter.api.Test;\n+\n+class LabelNameSanitizerTest {\n+\n+  @Test\n+  void testSanitizerCaching() {\n+    AtomicInteger count = new AtomicInteger();\n+    Function<String, String> delegate = labelName -> labelName + count.incrementAndGet();\n+    LabelNameSanitizer testClass = new LabelNameSanitizer(delegate);", "originalCommit": "8800dc07c2ada61727d685284bc9ef90da7781da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYxMDQ3Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2211#discussion_r538610476", "bodyText": "Sure thing.  We can talk about the pros/cons of each approach sometime, but I'm happy to change it here.", "author": "breedx-splk", "createdAt": "2020-12-08T17:06:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1MTAyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "b30345eb14167032f7df5aab87c3b6ab87530202", "chunk": "diff --git a/exporters/prometheus/src/test/java/io/opentelemetry/exporter/prometheus/LabelNameSanitizerTest.java b/exporters/prometheus/src/test/java/io/opentelemetry/exporter/prometheus/LabelNameSanitizerTest.java\nindex 2731ceb7b..f84d5f868 100644\n--- a/exporters/prometheus/src/test/java/io/opentelemetry/exporter/prometheus/LabelNameSanitizerTest.java\n+++ b/exporters/prometheus/src/test/java/io/opentelemetry/exporter/prometheus/LabelNameSanitizerTest.java\n\n@@ -17,13 +17,14 @@ class LabelNameSanitizerTest {\n   void testSanitizerCaching() {\n     AtomicInteger count = new AtomicInteger();\n     Function<String, String> delegate = labelName -> labelName + count.incrementAndGet();\n-    LabelNameSanitizer testClass = new LabelNameSanitizer(delegate);\n+    LabelNameSanitizer sanitizer = new LabelNameSanitizer(delegate);\n     String labelName = \"http.name\";\n-    assertEquals(\"http.name1\", testClass.apply(labelName));\n-    assertEquals(\"http.name1\", testClass.apply(labelName));\n-    assertEquals(\"http.name1\", testClass.apply(labelName));\n-    assertEquals(\"http.name1\", testClass.apply(labelName));\n-    assertEquals(\"http.name1\", testClass.apply(labelName));\n+\n+    assertEquals(\"http.name1\", sanitizer.apply(labelName));\n+    assertEquals(\"http.name1\", sanitizer.apply(labelName));\n+    assertEquals(\"http.name1\", sanitizer.apply(labelName));\n+    assertEquals(\"http.name1\", sanitizer.apply(labelName));\n+    assertEquals(\"http.name1\", sanitizer.apply(labelName));\n     assertEquals(1, count.get());\n   }\n }\n"}}, {"oid": "b30345eb14167032f7df5aab87c3b6ab87530202", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b30345eb14167032f7df5aab87c3b6ab87530202", "message": "address PR feedback", "committedDate": "2020-12-08T17:11:58Z", "type": "commit"}]}