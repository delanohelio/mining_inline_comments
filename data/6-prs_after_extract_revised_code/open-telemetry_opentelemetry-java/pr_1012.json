{"pr_number": 1012, "pr_title": "Add a very basic benchmark for the span implementation", "pr_createdAt": "2020-03-13T21:49:31Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1012", "timeline": [{"oid": "373c8802e54a0801f0eda1f82e994f61b2f69356", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/373c8802e54a0801f0eda1f82e994f61b2f69356", "message": "add a very basic benchmark for the span implementation", "committedDate": "2020-03-13T21:49:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUwODQ5Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1012#discussion_r392508497", "bodyText": "Minor nip: Call it something like doExerciseSpan or doSpanWork to signal this is not just random work?", "author": "carlosalberto", "createdAt": "2020-03-13T22:10:21Z", "path": "sdk/src/jmh/java/io/opentelemetry/sdk/trace/SpanBenchmark.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.trace;\n+\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Threads;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+@State(Scope.Benchmark)\n+public class SpanBenchmark {\n+\n+  private final TracerSdk tracerSdk = OpenTelemetrySdk.getTracerProvider().get(\"benchmarkTracer\");\n+  private RecordEventsReadableSpan span;\n+\n+  @Setup(Level.Trial)\n+  public final void setup() {\n+    SpanBuilderSdk spanBuilderSdk =\n+        (SpanBuilderSdk)\n+            tracerSdk\n+                .spanBuilder(\"benchmarkSpan\")\n+                .setSpanKind(Kind.CLIENT)\n+                .setAttribute(\"key\", \"value\");\n+    span = (RecordEventsReadableSpan) spanBuilderSdk.startSpan();\n+  }\n+\n+  @Benchmark\n+  @Threads(value = 1)\n+  @Fork(1)\n+  @Warmup(iterations = 5, time = 1)\n+  @Measurement(iterations = 10, time = 1)\n+  @OutputTimeUnit(TimeUnit.MILLISECONDS)\n+  public SpanData exerciseSpan_01Thread() {\n+    return doSomeWork();\n+  }\n+\n+  @Benchmark\n+  @Threads(value = 5)\n+  @Fork(1)\n+  @Warmup(iterations = 5, time = 1)\n+  @Measurement(iterations = 10, time = 1)\n+  @OutputTimeUnit(TimeUnit.MILLISECONDS)\n+  public SpanData exerciseSpan_05Threads() {\n+    return doSomeWork();\n+  }\n+\n+  @Benchmark\n+  @Threads(value = 2)\n+  @Fork(1)\n+  @Warmup(iterations = 5, time = 1)\n+  @Measurement(iterations = 10, time = 1)\n+  @OutputTimeUnit(TimeUnit.MILLISECONDS)\n+  public SpanData exerciseSpan_02Threads() {\n+    return doSomeWork();\n+  }\n+\n+  @Benchmark\n+  @Threads(value = 10)\n+  @Fork(1)\n+  @Warmup(iterations = 5, time = 1)\n+  @Measurement(iterations = 10, time = 1)\n+  @OutputTimeUnit(TimeUnit.MILLISECONDS)\n+  public SpanData exerciseSpan_10Threads() {\n+    return doSomeWork();\n+  }\n+\n+  private SpanData doSomeWork() {", "originalCommit": "373c8802e54a0801f0eda1f82e994f61b2f69356", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUwOTY5NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1012#discussion_r392509694", "bodyText": "happy to make the change. \ud83d\udc4d", "author": "jkwatson", "createdAt": "2020-03-13T22:14:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUwODQ5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUxMDE0MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1012#discussion_r392510140", "bodyText": "done!", "author": "jkwatson", "createdAt": "2020-03-13T22:16:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUwODQ5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "ea974025558f70db880deceffb4a0c9b77dbe001", "chunk": "diff --git a/sdk/src/jmh/java/io/opentelemetry/sdk/trace/SpanBenchmark.java b/sdk/src/jmh/java/io/opentelemetry/sdk/trace/SpanBenchmark.java\nindex 94336e0fd..f477b886c 100644\n--- a/sdk/src/jmh/java/io/opentelemetry/sdk/trace/SpanBenchmark.java\n+++ b/sdk/src/jmh/java/io/opentelemetry/sdk/trace/SpanBenchmark.java\n\n@@ -56,7 +56,7 @@ public class SpanBenchmark {\n   @Measurement(iterations = 10, time = 1)\n   @OutputTimeUnit(TimeUnit.MILLISECONDS)\n   public SpanData exerciseSpan_01Thread() {\n-    return doSomeWork();\n+    return doSpanWork(span);\n   }\n \n   @Benchmark\n"}}, {"oid": "ea974025558f70db880deceffb4a0c9b77dbe001", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ea974025558f70db880deceffb4a0c9b77dbe001", "message": "small refactoring to make it clear what we're doing.", "committedDate": "2020-03-13T22:16:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUxOTIwMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1012#discussion_r392519201", "bodyText": "the name is not very suggestive, maybe something like \"AddAttributesEventsStatusEndAndConvert\" :)) I also think it will be nice to have more granular benchmarks without SpanData conversion because that happens async.", "author": "bogdandrutu", "createdAt": "2020-03-13T22:52:23Z", "path": "sdk/src/jmh/java/io/opentelemetry/sdk/trace/SpanBenchmark.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.trace;\n+\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Threads;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+@State(Scope.Benchmark)\n+public class SpanBenchmark {\n+\n+  private final TracerSdk tracerSdk = OpenTelemetrySdk.getTracerProvider().get(\"benchmarkTracer\");\n+  private RecordEventsReadableSpan span;\n+\n+  @Setup(Level.Trial)\n+  public final void setup() {\n+    SpanBuilderSdk spanBuilderSdk =\n+        (SpanBuilderSdk)\n+            tracerSdk\n+                .spanBuilder(\"benchmarkSpan\")\n+                .setSpanKind(Kind.CLIENT)\n+                .setAttribute(\"key\", \"value\");\n+    span = (RecordEventsReadableSpan) spanBuilderSdk.startSpan();\n+  }\n+\n+  @Benchmark\n+  @Threads(value = 1)\n+  @Fork(1)\n+  @Warmup(iterations = 5, time = 1)\n+  @Measurement(iterations = 10, time = 1)\n+  @OutputTimeUnit(TimeUnit.MILLISECONDS)\n+  public SpanData exerciseSpan_01Thread() {", "originalCommit": "ea974025558f70db880deceffb4a0c9b77dbe001", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0ODYyNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1012#discussion_r392548626", "bodyText": "sure, can do.", "author": "jkwatson", "createdAt": "2020-03-14T02:26:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUxOTIwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "432f2adfffb24e8afcf4009a40a9ded783e45376", "chunk": "diff --git a/sdk/src/jmh/java/io/opentelemetry/sdk/trace/SpanBenchmark.java b/sdk/src/jmh/java/io/opentelemetry/sdk/trace/SpanBenchmark.java\nindex f477b886c..d8681cb97 100644\n--- a/sdk/src/jmh/java/io/opentelemetry/sdk/trace/SpanBenchmark.java\n+++ b/sdk/src/jmh/java/io/opentelemetry/sdk/trace/SpanBenchmark.java\n\n@@ -17,7 +17,6 @@\n package io.opentelemetry.sdk.trace;\n \n import io.opentelemetry.sdk.OpenTelemetrySdk;\n-import io.opentelemetry.sdk.trace.data.SpanData;\n import io.opentelemetry.trace.Span.Kind;\n import io.opentelemetry.trace.Status;\n import java.util.concurrent.TimeUnit;\n"}}, {"oid": "432f2adfffb24e8afcf4009a40a9ded783e45376", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/432f2adfffb24e8afcf4009a40a9ded783e45376", "message": "remove the spandata conversion and name the methods more explicitly", "committedDate": "2020-03-14T02:32:04Z", "type": "commit"}]}