{"pr_number": 1431, "pr_title": "Removed URLEncoder from TracezZPageHandler", "pr_createdAt": "2020-07-18T00:43:27Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1431", "timeline": [{"oid": "ec31e3e9cb0212c75133331290246b258f445b13", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ec31e3e9cb0212c75133331290246b258f445b13", "message": "Removed URLEncoder", "committedDate": "2020-07-18T00:27:58Z", "type": "commit"}, {"oid": "e0fe0ede7bbd0e660feab6b0eac647f972224a12", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e0fe0ede7bbd0e660feab6b0eac647f972224a12", "message": "Fixed typo", "committedDate": "2020-07-18T00:44:15Z", "type": "commit"}, {"oid": "e0fe0ede7bbd0e660feab6b0eac647f972224a12", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e0fe0ede7bbd0e660feab6b0eac647f972224a12", "message": "Fixed typo", "committedDate": "2020-07-18T00:44:15Z", "type": "forcePushed"}, {"oid": "cf7f5c8f7890ffb19aabcd675ca4bcc7f4a5739a", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/cf7f5c8f7890ffb19aabcd675ca4bcc7f4a5739a", "message": "Added URLDecoding", "committedDate": "2020-07-20T21:20:21Z", "type": "commit"}, {"oid": "9db8e7e6edd7b8188fe3b4deda6b091cf2f92a66", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9db8e7e6edd7b8188fe3b4deda6b091cf2f92a66", "message": "Included comment for string replacement", "committedDate": "2020-07-20T21:29:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcxMzI5Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1431#discussion_r457713296", "bodyText": "I think you can use StandardCharsets.UTF-8 here, and avoid the exception that could result.", "author": "jkwatson", "createdAt": "2020-07-20T21:54:08Z", "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TracezZPageHandler.java", "diffHunk": "@@ -186,7 +187,10 @@ private static void emitSummaryTableCell(\n     // If numOfSamples is smaller than 0, print the text \"N/A\", otherwise print the text \"0\"\n     if (numOfSamples > 0) {\n       out.print(\"<td class=\\\"align-center border-left-dark\\\"><a href=\\\"?\");\n-      out.print(PARAM_SPAN_NAME + \"=\" + URLEncoder.encode(spanName, \"UTF-8\"));\n+      out.print(\n+          PARAM_SPAN_NAME\n+              + \"=\"\n+              + URLEncoder.encode(spanName.replace(\"+\", /* Unicode for + */ \"%2B\"), \"UTF-8\"));", "originalCommit": "9db8e7e6edd7b8188fe3b4deda6b091cf2f92a66", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcyNjExOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1431#discussion_r457726118", "bodyText": "Using StandardCharsets.UTF_8.toString() seems to still require the exception.", "author": "williamhu99", "createdAt": "2020-07-20T22:25:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcxMzI5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcyNzg1Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1431#discussion_r457727857", "bodyText": "oh shoot. the API that takes a CharSet is too new to use here.  never mind!", "author": "jkwatson", "createdAt": "2020-07-20T22:30:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcxMzI5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc0MjQ3Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1431#discussion_r457742472", "bodyText": "Ah didn't know this behavior of urlencoder. In that case may want to use guava which I don't think has this problem\nhttps://guava.dev/releases/19.0/api/docs/com/google/common/net/UrlEscapers.html#urlFormParameterEscaper()", "author": "anuraaga", "createdAt": "2020-07-20T23:11:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcxMzI5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc0NDMwNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1431#discussion_r457744306", "bodyText": "Ah sorry by \"this behavior\" I meant the inability to round trip space and plus reliably.", "author": "anuraaga", "createdAt": "2020-07-20T23:17:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcxMzI5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "e17c337050a0c57947eea07b53c36393805fc3e3", "chunk": "diff --git a/sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TracezZPageHandler.java b/sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TracezZPageHandler.java\nindex 64008ff0e..53dfa8190 100644\n--- a/sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TracezZPageHandler.java\n+++ b/sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TracezZPageHandler.java\n\n@@ -181,16 +181,12 @@ final class TracezZPageHandler extends ZPageHandler {\n    * @param subtype the sub-type of the corresponding span (latency [0, 8], error [0, 15]).\n    */\n   private static void emitSummaryTableCell(\n-      PrintStream out, String spanName, int numOfSamples, SampleType type, int subtype)\n-      throws UnsupportedEncodingException {\n+      PrintStream out, String spanName, int numOfSamples, SampleType type, int subtype) {\n     // If numOfSamples is greater than 0, emit a link to see detailed span information\n     // If numOfSamples is smaller than 0, print the text \"N/A\", otherwise print the text \"0\"\n     if (numOfSamples > 0) {\n       out.print(\"<td class=\\\"align-center border-left-dark\\\"><a href=\\\"?\");\n-      out.print(\n-          PARAM_SPAN_NAME\n-              + \"=\"\n-              + URLEncoder.encode(spanName.replace(\"+\", /* Unicode for + */ \"%2B\"), \"UTF-8\"));\n+      out.print(PARAM_SPAN_NAME + \"=\" + urlFormParameterEscaper().escape(spanName));\n       out.print(\"&\" + PARAM_SAMPLE_TYPE + \"=\" + type.getValue());\n       out.print(\"&\" + PARAM_SAMPLE_SUB_TYPE + \"=\" + subtype);\n       out.print(\"\\\">\" + numOfSamples + \"</a></td>\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc0Mzk0NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1431#discussion_r457743945", "bodyText": "It's the \"job\" of parseQueryMap to do URL encoding, not this business logic do it there. This is important\n\nif we add more parameters\nif someone uses this in their own server instead of the default sun http", "author": "anuraaga", "createdAt": "2020-07-20T23:15:58Z", "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TracezZPageHandler.java", "diffHunk": "@@ -475,7 +479,7 @@ private void emitHtmlBody(Map<String, String> queryMap, PrintStream out)\n     String spanName = queryMap.get(PARAM_SPAN_NAME);\n     if (spanName != null) {\n       // Convert spanName with URL encoding\n-      spanName = URLEncoder.encode(spanName, \"UTF-8\");", "originalCommit": "9db8e7e6edd7b8188fe3b4deda6b091cf2f92a66", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc1NzQ2Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1431#discussion_r457757467", "bodyText": "Ah yeah, that encode is redundant.", "author": "williamhu99", "createdAt": "2020-07-21T00:00:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc0Mzk0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc1ODM1MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1431#discussion_r457758351", "bodyText": "Oh wait, the code didn't update (?). The encode should be replaced with a decode.", "author": "williamhu99", "createdAt": "2020-07-21T00:03:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc0Mzk0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc1OTI2Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1431#discussion_r457759263", "bodyText": "Sorry I accidentally commented on the wrong line. I meant the line below - moving decode to parseQueryMap with related unit tests", "author": "anuraaga", "createdAt": "2020-07-21T00:06:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc0Mzk0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "e17c337050a0c57947eea07b53c36393805fc3e3", "chunk": "diff --git a/sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TracezZPageHandler.java b/sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TracezZPageHandler.java\nindex 64008ff0e..53dfa8190 100644\n--- a/sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TracezZPageHandler.java\n+++ b/sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TracezZPageHandler.java\n\n@@ -479,7 +475,7 @@ final class TracezZPageHandler extends ZPageHandler {\n     String spanName = queryMap.get(PARAM_SPAN_NAME);\n     if (spanName != null) {\n       // Convert spanName with URL encoding\n-      spanName = URLDecoder.decode(spanName, \"UTF-8\").replace(/* Unicode for + */ \"%2B\", \"+\");\n+      spanName = URLDecoder.decode(spanName, \"UTF-8\");\n       // Show detailed information for the corresponding span\n       String typeStr = queryMap.get(PARAM_SAMPLE_TYPE);\n       if (typeStr != null) {\n"}}, {"oid": "412797843fe71d406538cd0173d414afd3872019", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/412797843fe71d406538cd0173d414afd3872019", "message": "Added unit tests for special characters in span names", "committedDate": "2020-07-20T23:50:41Z", "type": "commit"}, {"oid": "e17c337050a0c57947eea07b53c36393805fc3e3", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e17c337050a0c57947eea07b53c36393805fc3e3", "message": "Resolved URL decoding issues", "committedDate": "2020-07-21T20:34:47Z", "type": "commit"}, {"oid": "bb58b26018ed710133ff0493894b58d70b977640", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/bb58b26018ed710133ff0493894b58d70b977640", "message": "Moved url decoding to parseQueryMap and updated the corresponding unit tests", "committedDate": "2020-07-21T22:08:18Z", "type": "commit"}]}