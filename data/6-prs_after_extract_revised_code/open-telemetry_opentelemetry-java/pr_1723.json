{"pr_number": 1723, "pr_title": "Expose a new TracerSdkManagement interface on the OpenTelemetrySdk class.", "pr_createdAt": "2020-09-28T21:09:18Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1723", "timeline": [{"oid": "9de89cad8e915c251aea8a7d1bb7189deaef125b", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9de89cad8e915c251aea8a7d1bb7189deaef125b", "message": "have the TracerSdkProvider return the public interface, rather than a package-access class.", "committedDate": "2020-09-28T20:24:51Z", "type": "commit"}, {"oid": "ec47da24158304d7ebad95f415e603b2841ea738", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ec47da24158304d7ebad95f415e603b2841ea738", "message": "change the OpenTelemetrySdk to return a management interface, rather than the SDK implementation class directly.", "committedDate": "2020-09-28T20:58:32Z", "type": "commit"}, {"oid": "8972bc5abc5db15e0a7547cd93d522fecc1a58f4", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8972bc5abc5db15e0a7547cd93d522fecc1a58f4", "message": "formatting fix", "committedDate": "2020-09-28T21:20:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQzNzU1NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1723#discussion_r496437554", "bodyText": "Does the new interface allow this to be private? And then maybe we don't need to change the return types", "author": "anuraaga", "createdAt": "2020-09-29T06:05:11Z", "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/TracerSdkProvider.java", "diffHunk": "@@ -36,7 +36,7 @@\n  * io.opentelemetry.OpenTelemetry}. However, if you need a custom implementation of the factory, you\n  * can create one as needed.\n  */\n-public class TracerSdkProvider implements TracerProvider {\n+public class TracerSdkProvider implements TracerProvider, TracerSdkManagement {", "originalCommit": "8972bc5abc5db15e0a7547cd93d522fecc1a58f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc5MTgxOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1723#discussion_r496791819", "bodyText": "what do you want to be private?", "author": "jkwatson", "createdAt": "2020-09-29T15:02:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQzNzU1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgzMzU3NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1723#discussion_r496833574", "bodyText": "If you want to make TracerSdkProvider package-private, we would need to move the SPI implementation into this package: TracerProviderFactorySdk. That seems possible, if we're ok with moving it.", "author": "jkwatson", "createdAt": "2020-09-29T15:46:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQzNzU1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgzNTcyMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1723#discussion_r496835721", "bodyText": "although it's used in a lot of tests as well right now, so we'd need to do quite a bit of test refactoring.", "author": "jkwatson", "createdAt": "2020-09-29T15:48:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQzNzU1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg0ODk3NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1723#discussion_r496848974", "bodyText": "I removed all the \"production\" usages except the SPI implementation class.", "author": "jkwatson", "createdAt": "2020-09-29T16:00:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQzNzU1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE4OTU4Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1723#discussion_r497189587", "bodyText": "I feel like moving the SPI implementation into this package is a win, less API is nice - I would say SPI package usually defines an SPI interface, but doesn't have to or even should define an SPI implementation. Doesn't have to be in this PR though.", "author": "anuraaga", "createdAt": "2020-09-30T01:12:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQzNzU1NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ2NDQ0MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1723#discussion_r496464440", "bodyText": "Methods names should be changed too, shouldn't they?", "author": "iNikem", "createdAt": "2020-09-29T07:07:32Z", "path": "exporters/inmemory/src/main/java/io/opentelemetry/exporters/inmemory/InMemoryTracing.java", "diffHunk": "@@ -57,7 +58,7 @@\n    * @return the {@code TracerSdkProvider} passed during construction.\n    * @since 0.1.0\n    */\n-  abstract TracerSdkProvider getTracerProvider();\n+  abstract TracerSdkManagement getTracerProvider();", "originalCommit": "8972bc5abc5db15e0a7547cd93d522fecc1a58f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc5MTk4Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1723#discussion_r496791987", "bodyText": "yep. will fix.", "author": "jkwatson", "createdAt": "2020-09-29T15:02:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ2NDQ0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIwMTgxNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1723#discussion_r497201814", "bodyText": "fixed.", "author": "jkwatson", "createdAt": "2020-09-30T02:02:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ2NDQ0MA=="}], "type": "inlineReview", "revised_code": {"commit": "dd84bfcda7b9afe70cb4e3f7ec50583de7544380", "chunk": "diff --git a/exporters/inmemory/src/main/java/io/opentelemetry/exporters/inmemory/InMemoryTracing.java b/exporters/inmemory/src/main/java/io/opentelemetry/exporters/inmemory/InMemoryTracing.java\nindex a5add857f..8abb1689b 100644\n--- a/exporters/inmemory/src/main/java/io/opentelemetry/exporters/inmemory/InMemoryTracing.java\n+++ b/exporters/inmemory/src/main/java/io/opentelemetry/exporters/inmemory/InMemoryTracing.java\n\n@@ -53,12 +52,12 @@ import javax.annotation.concurrent.Immutable;\n @Immutable\n public abstract class InMemoryTracing {\n   /**\n-   * Returns the {@code TracerSdkProvider} passed during construction.\n+   * Returns the {@code TracerSdkManagement} passed during construction.\n    *\n-   * @return the {@code TracerSdkProvider} passed during construction.\n+   * @return the {@code TracerSdkManagement} passed during construction.\n    * @since 0.1.0\n    */\n-  abstract TracerSdkManagement getTracerProvider();\n+  abstract TracerSdkManagement getTracerSdkManagement();\n \n   /**\n    * Returns the installed {@link InMemorySpanExporter}.\n"}}, {"oid": "dd84bfcda7b9afe70cb4e3f7ec50583de7544380", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/dd84bfcda7b9afe70cb4e3f7ec50583de7544380", "message": "rename methods/parameters for the new interface\nget rid of almost all production-code references to the TracerSdkProvider", "committedDate": "2020-09-29T15:59:52Z", "type": "commit"}, {"oid": "9e0d01f28754006ad159847d83c4a6d726739b39", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9e0d01f28754006ad159847d83c4a6d726739b39", "message": "update some docs that still refer to using the old method/class", "committedDate": "2020-10-01T23:14:53Z", "type": "commit"}]}