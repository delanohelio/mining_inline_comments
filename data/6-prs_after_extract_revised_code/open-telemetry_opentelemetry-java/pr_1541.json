{"pr_number": 1541, "pr_title": "1503 prometheus example", "pr_createdAt": "2020-08-16T10:32:06Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1541", "timeline": [{"oid": "b1bbc07aac0ad39edfca19d5ba70c38ee1248478", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b1bbc07aac0ad39edfca19d5ba70c38ee1248478", "message": "added prometheus exporter example", "committedDate": "2020-08-16T10:22:24Z", "type": "commit"}, {"oid": "a1eb7157dc71f673cf4637165f9d60e62a36ddb1", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a1eb7157dc71f673cf4637165f9d60e62a36ddb1", "message": "tidying up", "committedDate": "2020-08-16T10:27:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIzOTU1Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1541#discussion_r471239553", "bodyText": "I would add a simple check that verifies the port is passed as an argument and prints a message if it is missing.", "author": "thisthat", "createdAt": "2020-08-17T05:31:06Z", "path": "examples/prometheus/src/main/java/io/opentelemetry/example/PrometheusExample.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package io.opentelemetry.example;\n+\n+import io.opentelemetry.common.Labels;\n+import io.opentelemetry.exporters.prometheus.PrometheusCollector;\n+import io.opentelemetry.metrics.AsynchronousInstrument;\n+import io.opentelemetry.metrics.LongValueObserver;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.metrics.MeterSdkProvider;\n+import io.prometheus.client.exporter.HTTPServer;\n+import java.io.IOException;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+/**\n+ * Example of using the {@link PrometheusCollector} to convert OTel metrics to Prometheus format and\n+ * expose these to a Prometheus instance via a {@link HTTPServer} exporter.\n+ *\n+ * <p>A {@link LongValueObserver} is used to periodically measure how many incoming messages are\n+ * awaiting processing. The {@link LongValueObserver.Callback} gets executed every collection\n+ * interval.\n+ */\n+public class PrometheusExample {\n+\n+  private final MeterSdkProvider meterSdkProvider = OpenTelemetrySdk.getMeterProvider();\n+  private final Meter meter = meterSdkProvider.get(\"PrometheusExample\", \"0.7\");\n+  private final HTTPServer server;\n+  private long incomingMessageCount;\n+\n+  public PrometheusExample(int port) throws IOException {\n+\n+    LongValueObserver observer =\n+        meter\n+            .longValueObserverBuilder(\"incoming.messages\")\n+            .setDescription(\"No of incoming messages awaiting processing\")\n+            .setUnit(\"message\")\n+            .build();\n+\n+    observer.setCallback(\n+        new LongValueObserver.Callback<LongValueObserver.LongResult>() {\n+          @Override\n+          public void update(AsynchronousInstrument.LongResult result) {\n+            result.observe(incomingMessageCount, Labels.empty());\n+          }\n+        });\n+\n+    PrometheusCollector.newBuilder()\n+        .setMetricProducer(meterSdkProvider.getMetricProducer())\n+        .buildAndRegister();\n+\n+    server = new HTTPServer(port);\n+  }\n+\n+  void shutdown() {\n+    server.stop();\n+  }\n+\n+  void simulate() {\n+    for (int i = 300; i > 0; i--) {\n+      try {\n+        System.out.println(\n+            i + \" Iterations to go, current incomingMessageCount is:  \" + incomingMessageCount);\n+        incomingMessageCount = ThreadLocalRandom.current().nextLong(100);\n+        Thread.sleep(1000);\n+      } catch (InterruptedException e) {\n+      }\n+    }\n+  }\n+\n+  public static void main(String[] args) throws IOException {\n+\n+    int port = Integer.parseInt(args[0]);", "originalCommit": "a1eb7157dc71f673cf4637165f9d60e62a36ddb1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI4Njk2OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1541#discussion_r471286968", "bodyText": "Done!", "author": "jarebudev", "createdAt": "2020-08-17T07:18:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIzOTU1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI5MjU5NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1541#discussion_r471292594", "bodyText": "Thank you :)", "author": "thisthat", "createdAt": "2020-08-17T07:29:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIzOTU1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "fa106d9ef5cb03e3524c7e71caf1090336201713", "chunk": "diff --git a/examples/prometheus/src/main/java/io/opentelemetry/example/PrometheusExample.java b/examples/prometheus/src/main/java/io/opentelemetry/example/PrometheusExample.java\nindex e583b09d0..ffedb582a 100644\n--- a/examples/prometheus/src/main/java/io/opentelemetry/example/PrometheusExample.java\n+++ b/examples/prometheus/src/main/java/io/opentelemetry/example/PrometheusExample.java\n\n@@ -68,7 +68,13 @@ public class PrometheusExample {\n \n   public static void main(String[] args) throws IOException {\n \n-    int port = Integer.parseInt(args[0]);\n+    int port = 0;\n+    try {\n+      port = Integer.parseInt(args[0]);\n+    } catch (Exception e) {\n+      System.out.println(\"Port not set, or is invalid. Exiting\");\n+      System.exit(1);\n+    }\n \n     PrometheusExample prometheusExample = new PrometheusExample(port);\n \n"}}, {"oid": "89e9f90d507cf731f51dbee0cf3061bf5c247fac", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/89e9f90d507cf731f51dbee0cf3061bf5c247fac", "message": "Update examples/prometheus/README.md\n\nCo-authored-by: Giovanni Liva <giovanni.liva@dynatrace.com>", "committedDate": "2020-08-17T07:01:33Z", "type": "commit"}, {"oid": "639e4b73a0a3be73a185ed91d09fcd043b2c2694", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/639e4b73a0a3be73a185ed91d09fcd043b2c2694", "message": "Update examples/prometheus/README.md\n\nCo-authored-by: Giovanni Liva <giovanni.liva@dynatrace.com>", "committedDate": "2020-08-17T07:01:49Z", "type": "commit"}, {"oid": "fa106d9ef5cb03e3524c7e71caf1090336201713", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/fa106d9ef5cb03e3524c7e71caf1090336201713", "message": "added port arg check as per code review suggestion", "committedDate": "2020-08-17T07:15:26Z", "type": "commit"}, {"oid": "2d2620ea6e52e10533e85b86083c14933f3e657b", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/2d2620ea6e52e10533e85b86083c14933f3e657b", "message": "Merge branch '1503_prometheus_example' of https://github.com/jarebudev/opentelemetry-java into 1503_prometheus_example", "committedDate": "2020-08-17T07:15:58Z", "type": "commit"}]}