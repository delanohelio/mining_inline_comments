{"pr_number": 2164, "pr_title": "Detect GC leaks of scopes in StrictContextStorage.", "pr_createdAt": "2020-12-01T05:50:13Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/2164", "timeline": [{"oid": "ba33aa81701b53834714e1290d4fb46b8dd91687", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ba33aa81701b53834714e1290d4fb46b8dd91687", "message": "Detect GC leaks of scopes in StrictContextStorage.", "committedDate": "2020-11-30T06:46:33Z", "type": "commit"}, {"oid": "e64fe5f02bd80e3ee81debddb4f7a7f098c71693", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e64fe5f02bd80e3ee81debddb4f7a7f098c71693", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into strict-context-storage-detectleaks", "committedDate": "2020-12-01T04:50:47Z", "type": "commit"}, {"oid": "57a6f6747b6c912d6afd2d9f186e609a2bf8dec3", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/57a6f6747b6c912d6afd2d9f186e609a2bf8dec3", "message": "More", "committedDate": "2020-12-01T05:06:39Z", "type": "commit"}, {"oid": "4a174eb7f85786783e9b9caca0d7201606b455fb", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/4a174eb7f85786783e9b9caca0d7201606b455fb", "message": "Finish", "committedDate": "2020-12-01T05:14:45Z", "type": "commit"}, {"oid": "0e1a718223e3d932298b8b378a36b03498c21913", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0e1a718223e3d932298b8b378a36b03498c21913", "message": "Force GC more aggressively", "committedDate": "2020-12-01T06:00:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc3ODkyMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2164#discussion_r533778923", "bodyText": "This will leave data in the map as we never touch it again. Since things are weak we won't hold to span structures but we will keep the weak refs around until JVM shutdown.\nThis was a one reason I went with the NoopMap to avoid the issue to figure out where to place the closed checked :)\nprobably best to just put it in the existing if statement as the first check.", "author": "sfriberg", "createdAt": "2020-12-01T22:58:54Z", "path": "sdk-extensions/jfr-events/src/main/java/io/opentelemetry/sdk/extension/jfr/JfrSpanProcessor.java", "diffHunk": "@@ -45,6 +46,9 @@ public boolean isStartRequired() {\n \n   @Override\n   public void onEnd(ReadableSpan rs) {\n+    if (closed) {", "originalCommit": "0e1a718223e3d932298b8b378a36b03498c21913", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg4OTA4Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2164#discussion_r533889086", "bodyText": "Thanks!", "author": "anuraaga", "createdAt": "2020-12-02T04:28:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc3ODkyMw=="}], "type": "inlineReview", "revised_code": {"commit": "b28ca9dfb0231f83d4be32bc9a1d6466845f4fd0", "chunk": "diff --git a/sdk-extensions/jfr-events/src/main/java/io/opentelemetry/sdk/extension/jfr/JfrSpanProcessor.java b/sdk-extensions/jfr-events/src/main/java/io/opentelemetry/sdk/extension/jfr/JfrSpanProcessor.java\nindex ce135d402..8bc150920 100644\n--- a/sdk-extensions/jfr-events/src/main/java/io/opentelemetry/sdk/extension/jfr/JfrSpanProcessor.java\n+++ b/sdk-extensions/jfr-events/src/main/java/io/opentelemetry/sdk/extension/jfr/JfrSpanProcessor.java\n\n@@ -46,11 +46,8 @@ public class JfrSpanProcessor implements SpanProcessor {\n \n   @Override\n   public void onEnd(ReadableSpan rs) {\n-    if (closed) {\n-      return;\n-    }\n     SpanEvent event = spanEvents.remove(rs.getSpanContext());\n-    if (event != null && event.shouldCommit()) {\n+    if (!closed && event != null && event.shouldCommit()) {\n       event.commit();\n     }\n   }\n"}}, {"oid": "b28ca9dfb0231f83d4be32bc9a1d6466845f4fd0", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b28ca9dfb0231f83d4be32bc9a1d6466845f4fd0", "message": "Cleanup", "committedDate": "2020-12-02T04:28:39Z", "type": "commit"}, {"oid": "372c7f5b52ae379e7a260b3fbda02110f18343f4", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/372c7f5b52ae379e7a260b3fbda02110f18343f4", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into strict-context-storage-detectleaks", "committedDate": "2020-12-02T04:30:37Z", "type": "commit"}, {"oid": "b9f7fb69b2de3396250cfd72b219c6be928fb63c", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b9f7fb69b2de3396250cfd72b219c6be928fb63c", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into strict-context-storage-detectleaks", "committedDate": "2020-12-02T08:52:06Z", "type": "commit"}, {"oid": "2cde8640592208073540764f09e8e1a390fdd322", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/2cde8640592208073540764f09e8e1a390fdd322", "message": "Vendor code directly", "committedDate": "2020-12-02T09:06:36Z", "type": "commit"}, {"oid": "6592841e31c23c4cd1526c02c7847d2a0a5bfbf7", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/6592841e31c23c4cd1526c02c7847d2a0a5bfbf7", "message": "Copy test too", "committedDate": "2020-12-02T09:09:14Z", "type": "commit"}, {"oid": "1ab7ce665ba52d265faab735a3e174a1746782a5", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1ab7ce665ba52d265faab735a3e174a1746782a5", "message": "Try waiting more", "committedDate": "2020-12-02T23:53:37Z", "type": "commit"}, {"oid": "716b9819082232b4043e7404b4604191c85e67fb", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/716b9819082232b4043e7404b4604191c85e67fb", "message": "ep", "committedDate": "2020-12-03T00:14:31Z", "type": "commit"}, {"oid": "24c5fb2e17fa43ba450b2a7915050eae825ae7c2", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/24c5fb2e17fa43ba450b2a7915050eae825ae7c2", "message": "oops", "committedDate": "2020-12-03T00:18:37Z", "type": "commit"}, {"oid": "9be81cfc6b526cc8eff0c390d895019ec67684f3", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9be81cfc6b526cc8eff0c390d895019ec67684f3", "message": "Remove from build.gradle", "committedDate": "2020-12-03T00:49:09Z", "type": "commit"}, {"oid": "5a2f4cc273509de1a164854e2da4c00bc2f2abe2", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5a2f4cc273509de1a164854e2da4c00bc2f2abe2", "message": "Drift", "committedDate": "2020-12-03T00:52:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDYzMjY2MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2164#discussion_r534632660", "bodyText": "I ask you... Is \"expunction\" a word? really?", "author": "jkwatson", "createdAt": "2020-12-03T03:04:05Z", "path": "sdk-extensions/jfr-events/src/main/java/io/opentelemetry/sdk/extension/jfr/JfrSpanProcessor.java", "diffHunk": "@@ -26,11 +22,16 @@\n  */\n public class JfrSpanProcessor implements SpanProcessor {\n \n-  private volatile Map<SpanContext, SpanEvent> spanEvents =\n-      new MapMaker().concurrencyLevel(16).initialCapacity(128).weakKeys().makeMap();\n+  private final WeakConcurrentMap<SpanContext, SpanEvent> spanEvents =\n+      new WeakConcurrentMap.WithInlinedExpunction<>();", "originalCommit": "5a2f4cc273509de1a164854e2da4c00bc2f2abe2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY5MzM4Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2164#discussion_r534693382", "bodyText": "Don't ask me ask raph :P", "author": "anuraaga", "createdAt": "2020-12-03T05:50:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDYzMjY2MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDYzNDU5OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2164#discussion_r534634598", "bodyText": "why not have this done in the StrictScope constructor, so it controls the full lifecycle, rather having it put in here, but removed internal to the StrictScope.close()?", "author": "jkwatson", "createdAt": "2020-12-03T03:10:03Z", "path": "sdk/testing/src/main/java/io/opentelemetry/sdk/testing/context/StrictContextStorage.java", "diffHunk": "@@ -111,8 +116,9 @@ public Scope attach(Context context) {\n \n     stackTrace = Arrays.copyOfRange(stackTrace, from, stackTrace.length);\n     caller.setStackTrace(stackTrace);\n+    pendingScopes.put(scope, caller);", "originalCommit": "5a2f4cc273509de1a164854e2da4c00bc2f2abe2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "32d940e96115de376b86e7081f71198b2552f609", "chunk": "diff --git a/sdk/testing/src/main/java/io/opentelemetry/sdk/testing/context/StrictContextStorage.java b/sdk/testing/src/main/java/io/opentelemetry/sdk/testing/context/StrictContextStorage.java\nindex 3dc50d8ac..deef48cbb 100644\n--- a/sdk/testing/src/main/java/io/opentelemetry/sdk/testing/context/StrictContextStorage.java\n+++ b/sdk/testing/src/main/java/io/opentelemetry/sdk/testing/context/StrictContextStorage.java\n\n@@ -116,7 +116,6 @@ public class StrictContextStorage implements ContextStorage {\n \n     stackTrace = Arrays.copyOfRange(stackTrace, from, stackTrace.length);\n     caller.setStackTrace(stackTrace);\n-    pendingScopes.put(scope, caller);\n \n     return new StrictScope(scope, caller);\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDYzNTU3Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2164#discussion_r534635573", "bodyText": "so, we're only throwing the first that we run across, rather than alert about all the possibilities?", "author": "jkwatson", "createdAt": "2020-12-03T03:12:50Z", "path": "sdk/testing/src/main/java/io/opentelemetry/sdk/testing/context/StrictContextStorage.java", "diffHunk": "@@ -132,35 +138,28 @@ public Context current() {\n    */\n   // AssertionError to ensure test runners render the stack trace\n   public void ensureAllClosed() {\n-    List<CallerStackTrace> leakedCallers = new ArrayList<>();\n-    currentCallers.drainTo(leakedCallers);\n-    for (CallerStackTrace caller : leakedCallers) {\n+    pendingScopes.expungeStaleEntries();\n+    for (CallerStackTrace caller : pendingScopes.drainPendingCallers()) {\n       // Sometimes unit test runners truncate the cause of the exception.\n       // This flattens the exception as the caller of close() isn't important vs the one that leaked\n-      AssertionError toThrow =\n-          new AssertionError(\n-              \"Thread [\" + caller.threadName + \"] opened a scope of \" + caller.context + \" here:\");\n-      toThrow.setStackTrace(caller.getStackTrace());\n-      throw toThrow;\n+      throw callerError(caller);", "originalCommit": "5a2f4cc273509de1a164854e2da4c00bc2f2abe2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDcwMDAwNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2164#discussion_r534700005", "bodyText": "Added logging when multiple, still throwing since this is mostly for unit tests where an exception is best", "author": "anuraaga", "createdAt": "2020-12-03T05:57:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDYzNTU3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDcxMTgxNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2164#discussion_r534711816", "bodyText": "Went ahead and added logging if more than one.", "author": "anuraaga", "createdAt": "2020-12-03T06:10:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDYzNTU3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "32d940e96115de376b86e7081f71198b2552f609", "chunk": "diff --git a/sdk/testing/src/main/java/io/opentelemetry/sdk/testing/context/StrictContextStorage.java b/sdk/testing/src/main/java/io/opentelemetry/sdk/testing/context/StrictContextStorage.java\nindex 3dc50d8ac..deef48cbb 100644\n--- a/sdk/testing/src/main/java/io/opentelemetry/sdk/testing/context/StrictContextStorage.java\n+++ b/sdk/testing/src/main/java/io/opentelemetry/sdk/testing/context/StrictContextStorage.java\n\n@@ -139,10 +138,15 @@ public class StrictContextStorage implements ContextStorage {\n   // AssertionError to ensure test runners render the stack trace\n   public void ensureAllClosed() {\n     pendingScopes.expungeStaleEntries();\n-    for (CallerStackTrace caller : pendingScopes.drainPendingCallers()) {\n-      // Sometimes unit test runners truncate the cause of the exception.\n-      // This flattens the exception as the caller of close() isn't important vs the one that leaked\n-      throw callerError(caller);\n+    List<CallerStackTrace> leaked = pendingScopes.drainPendingCallers();\n+    if (!leaked.isEmpty()) {\n+      if (leaked.size() > 1) {\n+        logger.log(Level.SEVERE, \"Multiple scopes leaked - first will be thrown as an error.\");\n+      }\n+      for (CallerStackTrace caller : leaked) {\n+        logger.log(Level.SEVERE, \"Scope leaked\", callerError(caller));\n+      }\n+      throw callerError(leaked.get(0));\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDYzNTgwNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2164#discussion_r534635805", "bodyText": "this comment is duplicated down in callerError", "author": "jkwatson", "createdAt": "2020-12-03T03:13:43Z", "path": "sdk/testing/src/main/java/io/opentelemetry/sdk/testing/context/StrictContextStorage.java", "diffHunk": "@@ -132,35 +138,28 @@ public Context current() {\n    */\n   // AssertionError to ensure test runners render the stack trace\n   public void ensureAllClosed() {\n-    List<CallerStackTrace> leakedCallers = new ArrayList<>();\n-    currentCallers.drainTo(leakedCallers);\n-    for (CallerStackTrace caller : leakedCallers) {\n+    pendingScopes.expungeStaleEntries();\n+    for (CallerStackTrace caller : pendingScopes.drainPendingCallers()) {\n       // Sometimes unit test runners truncate the cause of the exception.\n       // This flattens the exception as the caller of close() isn't important vs the one that leaked", "originalCommit": "5a2f4cc273509de1a164854e2da4c00bc2f2abe2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "32d940e96115de376b86e7081f71198b2552f609", "chunk": "diff --git a/sdk/testing/src/main/java/io/opentelemetry/sdk/testing/context/StrictContextStorage.java b/sdk/testing/src/main/java/io/opentelemetry/sdk/testing/context/StrictContextStorage.java\nindex 3dc50d8ac..deef48cbb 100644\n--- a/sdk/testing/src/main/java/io/opentelemetry/sdk/testing/context/StrictContextStorage.java\n+++ b/sdk/testing/src/main/java/io/opentelemetry/sdk/testing/context/StrictContextStorage.java\n\n@@ -139,10 +138,15 @@ public class StrictContextStorage implements ContextStorage {\n   // AssertionError to ensure test runners render the stack trace\n   public void ensureAllClosed() {\n     pendingScopes.expungeStaleEntries();\n-    for (CallerStackTrace caller : pendingScopes.drainPendingCallers()) {\n-      // Sometimes unit test runners truncate the cause of the exception.\n-      // This flattens the exception as the caller of close() isn't important vs the one that leaked\n-      throw callerError(caller);\n+    List<CallerStackTrace> leaked = pendingScopes.drainPendingCallers();\n+    if (!leaked.isEmpty()) {\n+      if (leaked.size() > 1) {\n+        logger.log(Level.SEVERE, \"Multiple scopes leaked - first will be thrown as an error.\");\n+      }\n+      for (CallerStackTrace caller : leaked) {\n+        logger.log(Level.SEVERE, \"Scope leaked\", callerError(caller));\n+      }\n+      throw callerError(leaked.get(0));\n     }\n   }\n \n"}}, {"oid": "32d940e96115de376b86e7081f71198b2552f609", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/32d940e96115de376b86e7081f71198b2552f609", "message": "Log on multiple", "committedDate": "2020-12-03T05:55:52Z", "type": "commit"}, {"oid": "ce77dce5473e19f2608cba49e92515904b59702b", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ce77dce5473e19f2608cba49e92515904b59702b", "message": "Cleaner ourselves.", "committedDate": "2020-12-03T06:15:37Z", "type": "commit"}, {"oid": "4586a7c0caf5ffabcbab39b9f48c3b4e7c7f7f08", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/4586a7c0caf5ffabcbab39b9f48c3b4e7c7f7f08", "message": "EP", "committedDate": "2020-12-03T06:28:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ4NTg1OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2164#discussion_r535485859", "bodyText": "we could skip doing this if there's only one, so you don't get the same one twice? Not sure if that's good or bad, but just a thought.", "author": "jkwatson", "createdAt": "2020-12-03T18:37:38Z", "path": "sdk/testing/src/main/java/io/opentelemetry/sdk/testing/context/StrictContextStorage.java", "diffHunk": "@@ -132,35 +137,34 @@ public Context current() {\n    */\n   // AssertionError to ensure test runners render the stack trace\n   public void ensureAllClosed() {\n-    List<CallerStackTrace> leakedCallers = new ArrayList<>();\n-    currentCallers.drainTo(leakedCallers);\n-    for (CallerStackTrace caller : leakedCallers) {\n-      // Sometimes unit test runners truncate the cause of the exception.\n-      // This flattens the exception as the caller of close() isn't important vs the one that leaked\n-      AssertionError toThrow =\n-          new AssertionError(\n-              \"Thread [\" + caller.threadName + \"] opened a scope of \" + caller.context + \" here:\");\n-      toThrow.setStackTrace(caller.getStackTrace());\n-      throw toThrow;\n+    pendingScopes.expungeStaleEntries();\n+    List<CallerStackTrace> leaked = pendingScopes.drainPendingCallers();\n+    if (!leaked.isEmpty()) {\n+      if (leaked.size() > 1) {\n+        logger.log(Level.SEVERE, \"Multiple scopes leaked - first will be thrown as an error.\");\n+      }\n+      for (CallerStackTrace caller : leaked) {\n+        logger.log(Level.SEVERE, \"Scope leaked\", callerError(caller));", "originalCommit": "4586a7c0caf5ffabcbab39b9f48c3b4e7c7f7f08", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTgxNTc0OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2164#discussion_r535815749", "bodyText": "Oops - yeah this is a bug I meant to have it in the if statement, thanks", "author": "anuraaga", "createdAt": "2020-12-04T03:49:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ4NTg1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "aabc40362d1457f1eaf27f4ee3ebfa57390555a0", "chunk": "diff --git a/sdk/testing/src/main/java/io/opentelemetry/sdk/testing/context/StrictContextStorage.java b/sdk/testing/src/main/java/io/opentelemetry/sdk/testing/context/StrictContextStorage.java\nindex 411788d43..5052726eb 100644\n--- a/sdk/testing/src/main/java/io/opentelemetry/sdk/testing/context/StrictContextStorage.java\n+++ b/sdk/testing/src/main/java/io/opentelemetry/sdk/testing/context/StrictContextStorage.java\n\n@@ -142,9 +142,9 @@ public class StrictContextStorage implements ContextStorage {\n     if (!leaked.isEmpty()) {\n       if (leaked.size() > 1) {\n         logger.log(Level.SEVERE, \"Multiple scopes leaked - first will be thrown as an error.\");\n-      }\n-      for (CallerStackTrace caller : leaked) {\n-        logger.log(Level.SEVERE, \"Scope leaked\", callerError(caller));\n+        for (CallerStackTrace caller : leaked) {\n+          logger.log(Level.SEVERE, \"Scope leaked\", callerError(caller));\n+        }\n       }\n       throw callerError(leaked.get(0));\n     }\n"}}, {"oid": "aabc40362d1457f1eaf27f4ee3ebfa57390555a0", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/aabc40362d1457f1eaf27f4ee3ebfa57390555a0", "message": "Move into if", "committedDate": "2020-12-04T03:50:03Z", "type": "commit"}, {"oid": "ce37ed20a5731c6f51af09ed7594dc17b90dcd67", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ce37ed20a5731c6f51af09ed7594dc17b90dcd67", "message": "Revert accidental", "committedDate": "2020-12-04T03:53:10Z", "type": "commit"}]}