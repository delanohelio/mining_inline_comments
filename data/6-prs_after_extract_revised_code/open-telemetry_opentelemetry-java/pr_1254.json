{"pr_number": 1254, "pr_title": "Configuration for Disruptor and Zipkin", "pr_createdAt": "2020-05-20T08:21:20Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1254", "timeline": [{"oid": "86fe1418d84de3c4f25b60935a80f0b2fd3441e1", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/86fe1418d84de3c4f25b60935a80f0b2fd3441e1", "message": "add configuration for Disruptor and Zipkin", "committedDate": "2020-05-20T07:59:13Z", "type": "commit"}, {"oid": "0f198257738a6acad0a230826e428a40c601004e", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0f198257738a6acad0a230826e428a40c601004e", "message": "Fix checkstyle violation", "committedDate": "2020-05-20T08:31:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA5MDczNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1254#discussion_r428090735", "bodyText": "note: both of these are valid spellings. I'm ok with either.", "author": "jkwatson", "createdAt": "2020-05-20T15:09:34Z", "path": "exporters/zipkin/src/main/java/io/opentelemetry/exporters/zipkin/ZipkinExporterConfiguration.java", "diffHunk": "@@ -68,7 +92,7 @@ public static Builder builder() {\n      * <p>This is a primary label for trace lookup and aggregation, so it should be intuitive and\n      * consistent. Many use a name from service discovery.\n      *\n-     * <p>Note: this value, will be superceded by the value of {@link\n+     * <p>Note: this value, will be superseded by the value of {@link", "originalCommit": "0f198257738a6acad0a230826e428a40c601004e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc868cc590ddd9710928929f2ff97e8013c9ad02", "chunk": "diff --git a/exporters/zipkin/src/main/java/io/opentelemetry/exporters/zipkin/ZipkinExporterConfiguration.java b/exporters/zipkin/src/main/java/io/opentelemetry/exporters/zipkin/ZipkinExporterConfiguration.java\ndeleted file mode 100644\nindex 848f02522..000000000\n--- a/exporters/zipkin/src/main/java/io/opentelemetry/exporters/zipkin/ZipkinExporterConfiguration.java\n+++ /dev/null\n\n@@ -1,171 +0,0 @@\n-/*\n- * Copyright 2020, OpenTelemetry Authors\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package io.opentelemetry.exporters.zipkin;\n-\n-import com.google.auto.value.AutoValue;\n-import io.opentelemetry.sdk.common.export.ConfigBuilder;\n-import java.util.Map;\n-import javax.annotation.concurrent.Immutable;\n-import zipkin2.Span;\n-import zipkin2.codec.BytesEncoder;\n-import zipkin2.codec.SpanBytesEncoder;\n-import zipkin2.reporter.Sender;\n-import zipkin2.reporter.urlconnection.URLConnectionSender;\n-\n-/**\n- * Configurations for {@link ZipkinSpanExporter}.\n- *\n- * @since 0.4.0\n- */\n-@AutoValue\n-@Immutable\n-public abstract class ZipkinExporterConfiguration {\n-\n-  ZipkinExporterConfiguration() {}\n-\n-  abstract String getServiceName();\n-\n-  abstract Sender getSender();\n-\n-  abstract BytesEncoder<Span> getEncoder();\n-\n-  /**\n-   * Returns a new {@link Builder}, defaulted to use the {@link SpanBytesEncoder#JSON_V2} encoder.\n-   *\n-   * @return a {@code Builder}.\n-   * @since 0.4.0\n-   */\n-  public static Builder builder() {\n-    return new AutoValue_ZipkinExporterConfiguration.Builder().setEncoder(SpanBytesEncoder.JSON_V2);\n-  }\n-\n-  /**\n-   * Builder for {@link ZipkinExporterConfiguration}.\n-   *\n-   * <p>Configuration options for {@link ZipkinExporterConfiguration} can be read from system\n-   * properties, environment variables, or {@link java.util.Properties} objects.\n-   *\n-   * <p>For system properties and {@link java.util.Properties} objects, {@link\n-   * ZipkinExporterConfiguration} will look for the following names:\n-   *\n-   * <ul>\n-   *   <li>{@code otel.zipkin.service.name}: to set the service name.\n-   *   <li>{@code otel.zipkin.endpoint}: to set the endpoint URL.\n-   * </ul>\n-   *\n-   * <p>For environment variables, {@link ZipkinExporterConfiguration} will look for the following\n-   * names:\n-   *\n-   * <ul>\n-   *   <li>{@code OTEL_ZIPKIN_SERVICE_NAME}: to set the service name.\n-   *   <li>{@code OTEL_ZIPKIN_ENDPOINT}: to set the endpoint URL.\n-   * </ul>\n-   *\n-   * @since 0.4.0\n-   */\n-  @AutoValue.Builder\n-  public abstract static class Builder extends ConfigBuilder<Builder> {\n-\n-    private static final String KEY_SERVICE_NAME = \"otel.zipkin.service.name\";\n-    private static final String KEY_ENDPOINT = \"otel.zipkin.endpoint\";\n-\n-    Builder() {}\n-\n-    /**\n-     * Label of the remote node in the service graph, such as \"favstar\". Avoid names with variables\n-     * or unique identifiers embedded. Defaults to \"unknown\".\n-     *\n-     * <p>This is a primary label for trace lookup and aggregation, so it should be intuitive and\n-     * consistent. Many use a name from service discovery.\n-     *\n-     * <p>Note: this value, will be superseded by the value of {@link\n-     * io.opentelemetry.sdk.resources.ResourceConstants#SERVICE_NAME} if it has been set in the\n-     * {@link io.opentelemetry.sdk.resources.Resource} associated with the Tracer that created the\n-     * spans.\n-     *\n-     * <p>This property is required to be set.\n-     *\n-     * @see io.opentelemetry.sdk.resources.Resource\n-     * @see io.opentelemetry.sdk.resources.ResourceConstants\n-     * @since 0.4.0\n-     */\n-    public abstract Builder setServiceName(String serviceName);\n-\n-    /**\n-     * Sets the Zipkin sender. Implements the client side of the span transport. A {@link\n-     * URLConnectionSender} is a good default.\n-     *\n-     * <p>The {@link Sender#close()} method will be called when the exporter is shut down.\n-     *\n-     * @param sender the Zipkin sender implementation.\n-     * @since 0.4.0\n-     */\n-    public abstract Builder setSender(Sender sender);\n-\n-    /**\n-     * Sets the {@link BytesEncoder}, which controls the format used by the {@link Sender}. Defaults\n-     * to the {@link SpanBytesEncoder#JSON_V2}.\n-     *\n-     * @param encoder the {@code BytesEncoder} to use.\n-     * @see SpanBytesEncoder\n-     * @since 0.4.0\n-     */\n-    public abstract Builder setEncoder(BytesEncoder<Span> encoder);\n-\n-    /**\n-     * Sets the zipkin endpoint. This will use the endpoint to assign a {@link URLConnectionSender}\n-     * instance to this builder.\n-     *\n-     * @param endpoint The Zipkin endpoint URL, ex. \"http://zipkinhost:9411/api/v2/spans\".\n-     * @see URLConnectionSender\n-     * @since 0.4.0\n-     */\n-    public Builder setEndpoint(String endpoint) {\n-      setSender(URLConnectionSender.create(endpoint));\n-      return this;\n-    }\n-\n-    /**\n-     * Builds a {@link ZipkinExporterConfiguration}.\n-     *\n-     * @return a {@code ZipkinExporterConfiguration}.\n-     * @since 0.4.0\n-     */\n-    public abstract ZipkinExporterConfiguration build();\n-\n-    /**\n-     * Sets the configuration values from the given configuration map for only the available keys.\n-     *\n-     * @param configMap {@link Map} holding the configuration values.\n-     * @return this.\n-     */\n-    @Override\n-    protected Builder fromConfigMap(\n-        Map<String, String> configMap, NamingConvention namingConvention) {\n-      configMap = namingConvention.normalize(configMap);\n-      String stringValue = getStringProperty(KEY_SERVICE_NAME, configMap);\n-      if (stringValue != null) {\n-        this.setServiceName(stringValue);\n-      }\n-      stringValue = getStringProperty(KEY_ENDPOINT, configMap);\n-      if (stringValue != null) {\n-        this.setEndpoint(stringValue);\n-      }\n-      return this;\n-    }\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA5MTUzMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1254#discussion_r428091530", "bodyText": "do we have a unit test for this new method?", "author": "jkwatson", "createdAt": "2020-05-20T15:10:42Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/common/export/ConfigBuilder.java", "diffHunk": "@@ -139,4 +139,19 @@ protected static Long getLongProperty(String name, Map<String, String> map) {\n       return null;\n     }\n   }\n+\n+  /**\n+   * Get a {@link String} property from the map, {@code null} if it cannot be found.\n+   *\n+   * @param name The property name\n+   * @param map The map where to look for the property\n+   * @return the {@link String} value of the property, {@code null} if the property cannot be found.\n+   */\n+  @Nullable\n+  protected static String getStringProperty(String name, Map<String, String> map) {", "originalCommit": "0f198257738a6acad0a230826e428a40c601004e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE1NTMzOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1254#discussion_r428155338", "bodyText": "I think we should add tests for this.\nAlso this should just be map.get(). I am confused. https://docs.oracle.com/javase/8/docs/api/java/util/Map.html#get-java.lang.Object-", "author": "bogdandrutu", "createdAt": "2020-05-20T16:39:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA5MTUzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc3MTI1OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1254#discussion_r429771258", "bodyText": "I'll provide tests for this in a separate PR with further cleanups :)", "author": "thisthat", "createdAt": "2020-05-25T07:21:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA5MTUzMA=="}], "type": "inlineReview", "revised_code": {"commit": "fc868cc590ddd9710928929f2ff97e8013c9ad02", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/common/export/ConfigBuilder.java b/sdk/src/main/java/io/opentelemetry/sdk/common/export/ConfigBuilder.java\nindex 90ccbee4e..837353b2e 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/common/export/ConfigBuilder.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/common/export/ConfigBuilder.java\n\n@@ -149,9 +149,6 @@ public abstract class ConfigBuilder<T> {\n    */\n   @Nullable\n   protected static String getStringProperty(String name, Map<String, String> map) {\n-    if (map.containsKey(name)) {\n-      return map.get(name);\n-    }\n-    return null;\n+    return map.get(name);\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIyMTk4NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1254#discussion_r428221985", "bodyText": "Can we write unit tests for this?", "author": "jkwatson", "createdAt": "2020-05-20T18:30:45Z", "path": "exporters/zipkin/src/main/java/io/opentelemetry/exporters/zipkin/ZipkinExporterConfiguration.java", "diffHunk": "@@ -122,5 +146,26 @@ public Builder setEndpoint(String endpoint) {\n      * @since 0.4.0\n      */\n     public abstract ZipkinExporterConfiguration build();\n+\n+    /**\n+     * Sets the configuration values from the given configuration map for only the available keys.\n+     *\n+     * @param configMap {@link Map} holding the configuration values.\n+     * @return this.\n+     */\n+    @Override\n+    protected Builder fromConfigMap(", "originalCommit": "0f198257738a6acad0a230826e428a40c601004e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc868cc590ddd9710928929f2ff97e8013c9ad02", "chunk": "diff --git a/exporters/zipkin/src/main/java/io/opentelemetry/exporters/zipkin/ZipkinExporterConfiguration.java b/exporters/zipkin/src/main/java/io/opentelemetry/exporters/zipkin/ZipkinExporterConfiguration.java\ndeleted file mode 100644\nindex 848f02522..000000000\n--- a/exporters/zipkin/src/main/java/io/opentelemetry/exporters/zipkin/ZipkinExporterConfiguration.java\n+++ /dev/null\n\n@@ -1,171 +0,0 @@\n-/*\n- * Copyright 2020, OpenTelemetry Authors\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package io.opentelemetry.exporters.zipkin;\n-\n-import com.google.auto.value.AutoValue;\n-import io.opentelemetry.sdk.common.export.ConfigBuilder;\n-import java.util.Map;\n-import javax.annotation.concurrent.Immutable;\n-import zipkin2.Span;\n-import zipkin2.codec.BytesEncoder;\n-import zipkin2.codec.SpanBytesEncoder;\n-import zipkin2.reporter.Sender;\n-import zipkin2.reporter.urlconnection.URLConnectionSender;\n-\n-/**\n- * Configurations for {@link ZipkinSpanExporter}.\n- *\n- * @since 0.4.0\n- */\n-@AutoValue\n-@Immutable\n-public abstract class ZipkinExporterConfiguration {\n-\n-  ZipkinExporterConfiguration() {}\n-\n-  abstract String getServiceName();\n-\n-  abstract Sender getSender();\n-\n-  abstract BytesEncoder<Span> getEncoder();\n-\n-  /**\n-   * Returns a new {@link Builder}, defaulted to use the {@link SpanBytesEncoder#JSON_V2} encoder.\n-   *\n-   * @return a {@code Builder}.\n-   * @since 0.4.0\n-   */\n-  public static Builder builder() {\n-    return new AutoValue_ZipkinExporterConfiguration.Builder().setEncoder(SpanBytesEncoder.JSON_V2);\n-  }\n-\n-  /**\n-   * Builder for {@link ZipkinExporterConfiguration}.\n-   *\n-   * <p>Configuration options for {@link ZipkinExporterConfiguration} can be read from system\n-   * properties, environment variables, or {@link java.util.Properties} objects.\n-   *\n-   * <p>For system properties and {@link java.util.Properties} objects, {@link\n-   * ZipkinExporterConfiguration} will look for the following names:\n-   *\n-   * <ul>\n-   *   <li>{@code otel.zipkin.service.name}: to set the service name.\n-   *   <li>{@code otel.zipkin.endpoint}: to set the endpoint URL.\n-   * </ul>\n-   *\n-   * <p>For environment variables, {@link ZipkinExporterConfiguration} will look for the following\n-   * names:\n-   *\n-   * <ul>\n-   *   <li>{@code OTEL_ZIPKIN_SERVICE_NAME}: to set the service name.\n-   *   <li>{@code OTEL_ZIPKIN_ENDPOINT}: to set the endpoint URL.\n-   * </ul>\n-   *\n-   * @since 0.4.0\n-   */\n-  @AutoValue.Builder\n-  public abstract static class Builder extends ConfigBuilder<Builder> {\n-\n-    private static final String KEY_SERVICE_NAME = \"otel.zipkin.service.name\";\n-    private static final String KEY_ENDPOINT = \"otel.zipkin.endpoint\";\n-\n-    Builder() {}\n-\n-    /**\n-     * Label of the remote node in the service graph, such as \"favstar\". Avoid names with variables\n-     * or unique identifiers embedded. Defaults to \"unknown\".\n-     *\n-     * <p>This is a primary label for trace lookup and aggregation, so it should be intuitive and\n-     * consistent. Many use a name from service discovery.\n-     *\n-     * <p>Note: this value, will be superseded by the value of {@link\n-     * io.opentelemetry.sdk.resources.ResourceConstants#SERVICE_NAME} if it has been set in the\n-     * {@link io.opentelemetry.sdk.resources.Resource} associated with the Tracer that created the\n-     * spans.\n-     *\n-     * <p>This property is required to be set.\n-     *\n-     * @see io.opentelemetry.sdk.resources.Resource\n-     * @see io.opentelemetry.sdk.resources.ResourceConstants\n-     * @since 0.4.0\n-     */\n-    public abstract Builder setServiceName(String serviceName);\n-\n-    /**\n-     * Sets the Zipkin sender. Implements the client side of the span transport. A {@link\n-     * URLConnectionSender} is a good default.\n-     *\n-     * <p>The {@link Sender#close()} method will be called when the exporter is shut down.\n-     *\n-     * @param sender the Zipkin sender implementation.\n-     * @since 0.4.0\n-     */\n-    public abstract Builder setSender(Sender sender);\n-\n-    /**\n-     * Sets the {@link BytesEncoder}, which controls the format used by the {@link Sender}. Defaults\n-     * to the {@link SpanBytesEncoder#JSON_V2}.\n-     *\n-     * @param encoder the {@code BytesEncoder} to use.\n-     * @see SpanBytesEncoder\n-     * @since 0.4.0\n-     */\n-    public abstract Builder setEncoder(BytesEncoder<Span> encoder);\n-\n-    /**\n-     * Sets the zipkin endpoint. This will use the endpoint to assign a {@link URLConnectionSender}\n-     * instance to this builder.\n-     *\n-     * @param endpoint The Zipkin endpoint URL, ex. \"http://zipkinhost:9411/api/v2/spans\".\n-     * @see URLConnectionSender\n-     * @since 0.4.0\n-     */\n-    public Builder setEndpoint(String endpoint) {\n-      setSender(URLConnectionSender.create(endpoint));\n-      return this;\n-    }\n-\n-    /**\n-     * Builds a {@link ZipkinExporterConfiguration}.\n-     *\n-     * @return a {@code ZipkinExporterConfiguration}.\n-     * @since 0.4.0\n-     */\n-    public abstract ZipkinExporterConfiguration build();\n-\n-    /**\n-     * Sets the configuration values from the given configuration map for only the available keys.\n-     *\n-     * @param configMap {@link Map} holding the configuration values.\n-     * @return this.\n-     */\n-    @Override\n-    protected Builder fromConfigMap(\n-        Map<String, String> configMap, NamingConvention namingConvention) {\n-      configMap = namingConvention.normalize(configMap);\n-      String stringValue = getStringProperty(KEY_SERVICE_NAME, configMap);\n-      if (stringValue != null) {\n-        this.setServiceName(stringValue);\n-      }\n-      stringValue = getStringProperty(KEY_ENDPOINT, configMap);\n-      if (stringValue != null) {\n-        this.setEndpoint(stringValue);\n-      }\n-      return this;\n-    }\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIyMjE1Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1254#discussion_r428222153", "bodyText": "Can you write unit tests for this?", "author": "jkwatson", "createdAt": "2020-05-20T18:30:57Z", "path": "sdk_contrib/async_processor/src/main/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorAsyncSpanProcessor.java", "diffHunk": "@@ -149,6 +183,29 @@ public DisruptorAsyncSpanProcessor build() {\n           spanProcessor.isStartRequired(),\n           spanProcessor.isEndRequired());\n     }\n+\n+    @Override\n+    protected Builder fromConfigMap(", "originalCommit": "0f198257738a6acad0a230826e428a40c601004e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "fc868cc590ddd9710928929f2ff97e8013c9ad02", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/fc868cc590ddd9710928929f2ff97e8013c9ad02", "message": "Address feedback", "committedDate": "2020-05-25T07:22:51Z", "type": "commit"}, {"oid": "c81dfe7c5a30119a6c42f34932c635c7063b1dba", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c81dfe7c5a30119a6c42f34932c635c7063b1dba", "message": "Update Javadoc", "committedDate": "2020-05-25T07:46:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUzMjM5OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1254#discussion_r430532398", "bodyText": "We need a test like this for the zipkin config, as well.", "author": "jkwatson", "createdAt": "2020-05-26T16:08:07Z", "path": "sdk_contrib/async_processor/src/test/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorAsyncSpanProcessorTest.java", "diffHunk": "@@ -268,4 +272,26 @@ public void multipleForceFlush() {\n     assertThat(incrementSpanProcessor.getCounterOnExportedForceFlushSpans()).isEqualTo(tenK);\n     assertThat(incrementSpanProcessor.getCounterOnShutdown()).isEqualTo(1);\n   }\n+\n+  abstract static class ConfigBuilderTest extends ConfigBuilder<ConfigBuilderTest> {\n+    public static NamingConvention getNaming() {\n+      return NamingConvention.DOT;\n+    }\n+  }\n+\n+  @Test\n+  public void configTest() {", "originalCommit": "c81dfe7c5a30119a6c42f34932c635c7063b1dba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwOTU4Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1254#discussion_r430909587", "bodyText": "Thank you! I totally miss it! \ud83e\udd26", "author": "thisthat", "createdAt": "2020-05-27T07:25:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUzMjM5OA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "690b2f697da529e7d6d8897274b23412a4f58ed3", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/690b2f697da529e7d6d8897274b23412a4f58ed3", "message": "Add missing config test for Zipkin Exporter", "committedDate": "2020-05-27T07:24:37Z", "type": "commit"}]}