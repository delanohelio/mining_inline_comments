{"pr_number": 1286, "pr_title": "Remove SpanID from sampling parameters", "pr_createdAt": "2020-05-28T23:39:49Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1286", "timeline": [{"oid": "c90ae9a69d57280aea665b37e06f8a4a17b8ea38", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c90ae9a69d57280aea665b37e06f8a4a17b8ea38", "message": "Remove SpanID from sampling parameters", "committedDate": "2020-05-28T23:33:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIwOTQ4Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1286#discussion_r432209482", "bodyText": "One of the goals of this change in the spec was to enable deferring the generation of a span id when one wasn't needed. Is it possible to defer the spanId creation, and if not, why not?", "author": "jkwatson", "createdAt": "2020-05-29T01:29:54Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/SpanBuilderSdk.java", "diffHunk": "@@ -223,13 +223,7 @@ public Span startSpan() {\n         traceConfig\n             .getSampler()\n             .shouldSample(\n-                parentContext,\n-                traceId,\n-                spanId,\n-                spanName,\n-                spanKind,\n-                immutableAttributes,\n-                immutableLinks);\n+                parentContext, traceId, spanName, spanKind, immutableAttributes, immutableLinks);", "originalCommit": "c90ae9a69d57280aea665b37e06f8a4a17b8ea38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQzMTUxNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1286#discussion_r432431516", "bodyText": "@jkwatson To be clear, you are talking about SpanId being crated unconditionally before this line? e.g.\nSpanId spanId = idsGenerator.generateSpanId();\n\n?", "author": "carlosalberto", "createdAt": "2020-05-29T11:49:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIwOTQ4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQzNDI0MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1286#discussion_r432434241", "bodyText": "@carlosalberto Exactly, this was mentioned on the original spec PR (open-telemetry/opentelemetry-specification#621) to improve performance.", "author": "arminru", "createdAt": "2020-05-29T11:55:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIwOTQ4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQzODIwMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1286#discussion_r432438200", "bodyText": "Follow-up idea (for spec): why not also generate trace ID later? And provide an option for samplers that need it (only one single one: ProbabilitySampler) to optionally generate a trace ID themselves that the SDK will use.", "author": "Oberon00", "createdAt": "2020-05-29T12:05:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIwOTQ4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU0MDA3MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1286#discussion_r432540070", "bodyText": "Please move this conversation to an issue. I think it is important to fix API first then we can address the optimizations.", "author": "bogdandrutu", "createdAt": "2020-05-29T14:51:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIwOTQ4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU0ODY4MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1286#discussion_r432548681", "bodyText": "Yeah, I was focusing on avoiding samplers starting to use the SpanId and missed the optimization. Let me see what can be done.", "author": "pjanotti", "createdAt": "2020-05-29T15:05:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIwOTQ4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU1MTQ0Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1286#discussion_r432551446", "bodyText": "Changed the code to use SpanId.getInvalid() if the span is not sampled and only generate a new SpanId if it is sampled.", "author": "pjanotti", "createdAt": "2020-05-29T15:09:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIwOTQ4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU2MTk3NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1286#discussion_r432561975", "bodyText": "Please revert the last commit, and don't do the optimization now.", "author": "bogdandrutu", "createdAt": "2020-05-29T15:26:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIwOTQ4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU2OTg0Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1286#discussion_r432569842", "bodyText": "Done, reverted the optimization - didn't see your comment on GH prior to the change...", "author": "pjanotti", "createdAt": "2020-05-29T15:39:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIwOTQ4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "5b51eaed887db21e4b6c68987b5859794b9e4cdc", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/trace/SpanBuilderSdk.java b/sdk/src/main/java/io/opentelemetry/sdk/trace/SpanBuilderSdk.java\nindex 1a5a1f295..4271c7c00 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/trace/SpanBuilderSdk.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/trace/SpanBuilderSdk.java\n\n@@ -225,12 +224,13 @@ final class SpanBuilderSdk implements Span.Builder {\n             .shouldSample(\n                 parentContext, traceId, spanName, spanKind, immutableAttributes, immutableLinks);\n \n-    SpanContext spanContext =\n-        SpanContext.create(\n-            traceId,\n-            spanId,\n-            samplingDecision.isSampled() ? TRACE_OPTIONS_SAMPLED : TRACE_OPTIONS_NOT_SAMPLED,\n-            traceState);\n+    SpanId spanId = SpanId.getInvalid();\n+    TraceFlags traceFlags = TRACE_OPTIONS_NOT_SAMPLED;\n+    if (samplingDecision.isSampled()) {\n+      spanId = idsGenerator.generateSpanId();\n+      traceFlags = TRACE_OPTIONS_SAMPLED;\n+    }\n+    SpanContext spanContext = SpanContext.create(traceId, spanId, traceFlags, traceState);\n \n     if (!samplingDecision.isSampled()) {\n       return DefaultSpan.create(spanContext);\n"}}, {"oid": "5b51eaed887db21e4b6c68987b5859794b9e4cdc", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5b51eaed887db21e4b6c68987b5859794b9e4cdc", "message": "Generate SpanId only for sampled spans", "committedDate": "2020-05-29T15:06:11Z", "type": "commit"}, {"oid": "ffdc6f0c682102cd2bce9e835f0e78d257040367", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ffdc6f0c682102cd2bce9e835f0e78d257040367", "message": "Revert \"Generate SpanId only for sampled spans\"\n\nThis reverts commit 5b51eaed887db21e4b6c68987b5859794b9e4cdc.", "committedDate": "2020-05-29T15:33:36Z", "type": "commit"}]}