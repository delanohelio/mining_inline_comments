{"pr_number": 1116, "pr_title": "Add probability to decision when appropriate", "pr_createdAt": "2020-04-15T21:40:46Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1116", "timeline": [{"oid": "0e79d16c8d9b35284f0039166ccade963dfeef55", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0e79d16c8d9b35284f0039166ccade963dfeef55", "message": "add the sampling probability to the decision, when appropriate.", "committedDate": "2020-04-15T21:40:29Z", "type": "commit"}, {"oid": "9b0e50210c9befe355da70cf5eea06e902fbc612", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9b0e50210c9befe355da70cf5eea06e902fbc612", "message": "formatting", "committedDate": "2020-04-15T22:02:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ2NzYzNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1116#discussion_r409467635", "bodyText": "All other semantic conventions use a prefix followed by a dot and underscores instead of camelCase (e.g. messaging.protocol_version). So a better name would probably be probability_sampler.probability.", "author": "Oberon00", "createdAt": "2020-04-16T10:58:10Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java", "diffHunk": "@@ -233,4 +244,33 @@ public boolean isSampled() {\n       return Collections.emptyMap();\n     }\n   }\n+\n+  /** Probability-based sampling decision with a single attribute for the probability. */\n+  @Immutable\n+  @AutoValue\n+  abstract static class ProbabilityDecision implements Decision {\n+\n+    ProbabilityDecision() {}\n+\n+    /**\n+     * Creates sampling decision without attributes.\n+     *\n+     * @param decision sampling decision\n+     * @param probability the probability that was used for the decision.\n+     */\n+    static ProbabilityDecision create(boolean decision, double probability) {\n+      return new AutoValue_Samplers_ProbabilityDecision(\n+          decision, singletonMap(\"samplingProbability\", doubleAttributeValue(probability)));", "originalCommit": "9b0e50210c9befe355da70cf5eea06e902fbc612", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYwMjU5MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1116#discussion_r409602591", "bodyText": "Or just sampler.probability if we intend to have this cross samplers.", "author": "bogdandrutu", "createdAt": "2020-04-16T14:29:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ2NzYzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYyMzMzOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1116#discussion_r409623338", "bodyText": "yeah, I was just throwing something in there to start this discussion!  Agree this should be something in the semantic conventions. Should we put this PR on hold while that gets done? @pavolloffay as the original requester, can you create an issue in the spec repo and get the ball rolling?", "author": "jkwatson", "createdAt": "2020-04-16T14:55:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ2NzYzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY3Mzg2OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1116#discussion_r411673868", "bodyText": "I went ahead and put in a PR with sampling.probability as the attribute name. open-telemetry/opentelemetry-specification#570.", "author": "jkwatson", "createdAt": "2020-04-20T20:35:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ2NzYzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "204b4d33708a3b5e8b8d53e7d79f38b3fd9540e9", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java b/sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java\nindex cbe6391be..331b32e53 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java\n\n@@ -240,7 +241,7 @@ public final class Samplers {\n     }\n \n     @Override\n-    public Map<String, AttributeValue> attributes() {\n+    public Map<String, AttributeValue> getAttributes() {\n       return Collections.emptyMap();\n     }\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYwMTE5OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1116#discussion_r409601199", "bodyText": "To be more java we should use getAttributes in the Decision class I think.", "author": "bogdandrutu", "createdAt": "2020-04-16T14:27:53Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java", "diffHunk": "@@ -233,4 +244,33 @@ public boolean isSampled() {\n       return Collections.emptyMap();\n     }\n   }\n+\n+  /** Probability-based sampling decision with a single attribute for the probability. */\n+  @Immutable\n+  @AutoValue\n+  abstract static class ProbabilityDecision implements Decision {\n+\n+    ProbabilityDecision() {}\n+\n+    /**\n+     * Creates sampling decision without attributes.\n+     *\n+     * @param decision sampling decision\n+     * @param probability the probability that was used for the decision.\n+     */\n+    static ProbabilityDecision create(boolean decision, double probability) {\n+      return new AutoValue_Samplers_ProbabilityDecision(\n+          decision, singletonMap(\"samplingProbability\", doubleAttributeValue(probability)));\n+    }\n+\n+    @Override\n+    public abstract boolean isSampled();\n+\n+    public abstract Map<String, AttributeValue> getAttributes();\n+\n+    @Override\n+    public Map<String, AttributeValue> attributes() {", "originalCommit": "9b0e50210c9befe355da70cf5eea06e902fbc612", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYyMzg0MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1116#discussion_r409623840", "bodyText": "I agree. Should I make that part of this PR, or create an issue for it?", "author": "jkwatson", "createdAt": "2020-04-16T14:56:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYwMTE5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYzMTA5Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1116#discussion_r409631097", "bodyText": "up to you, happy to review that in this PR.", "author": "bogdandrutu", "createdAt": "2020-04-16T15:05:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYwMTE5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY0NjYyOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1116#discussion_r409646628", "bodyText": "done", "author": "jkwatson", "createdAt": "2020-04-16T15:26:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYwMTE5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "204b4d33708a3b5e8b8d53e7d79f38b3fd9540e9", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java b/sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java\nindex cbe6391be..331b32e53 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java\n\n@@ -240,7 +241,7 @@ public final class Samplers {\n     }\n \n     @Override\n-    public Map<String, AttributeValue> attributes() {\n+    public Map<String, AttributeValue> getAttributes() {\n       return Collections.emptyMap();\n     }\n   }\n"}}, {"oid": "204b4d33708a3b5e8b8d53e7d79f38b3fd9540e9", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/204b4d33708a3b5e8b8d53e7d79f38b3fd9540e9", "message": "normalize a method name and move attribute to semantic convention attributes", "committedDate": "2020-04-16T15:26:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY1NTc3MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1116#discussion_r409655770", "bodyText": "I would put this in the SDK since it is SDK specific.", "author": "bogdandrutu", "createdAt": "2020-04-16T15:38:48Z", "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -125,5 +125,9 @@\n   /** JDBC substring like \"mysql://db.example.com:3306\" */\n   public static final StringAttributeSetter DB_URL = StringAttributeSetter.create(\"db.url\");\n \n+  /** Probability value used by a probability-based Span sampling strategy. */\n+  public static final DoubleAttributeSetter SAMPLING_PROBABILITY =", "originalCommit": "204b4d33708a3b5e8b8d53e7d79f38b3fd9540e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY5MTY3Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1116#discussion_r409691673", "bodyText": "It's probably also useful for vendor API implementations though.", "author": "Oberon00", "createdAt": "2020-04-16T16:30:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY1NTc3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTcyMDAwMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1116#discussion_r409720001", "bodyText": "Can you give an example of how an API user would want to use this attribute?", "author": "jkwatson", "createdAt": "2020-04-16T17:16:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY1NTc3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5OTgxNw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1116#discussion_r410499817", "bodyText": "@jkwatson this is for the moment only in java so we cannot have it here. I would suggest two things:\n\nOpen a PR in specs to add this\nMove it as internal member in probability sampler for the moment. and document that we need to follow the specs.", "author": "bogdandrutu", "createdAt": "2020-04-17T22:30:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY1NTc3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUwMDIwMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1116#discussion_r410500202", "bodyText": "Yes, strong agree. I'll make it happen.", "author": "jkwatson", "createdAt": "2020-04-17T22:32:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY1NTc3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE4NDg1OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1116#discussion_r411184859", "bodyText": "@jkwatson I think an API user won't use this attribute (except if you use the API package at the backend, then you could use it to read the attribute back from the exported span), but implementers that want to be compatible with the official SDK in that regard could use it.", "author": "Oberon00", "createdAt": "2020-04-20T08:19:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY1NTc3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxOTk0OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1116#discussion_r411519949", "bodyText": "I see. Do you think there's a whole class of stuff that an alternate SDK implementation would want to use from the default SDK?", "author": "jkwatson", "createdAt": "2020-04-20T16:30:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY1NTc3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU4MjcyNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1116#discussion_r411582725", "bodyText": "Even if that is the case, I am not sure we can have this in the API: Sampler is not part of the API (and explicitly removed from the API any \"sampling\" logic).\nSo I think this should be moved to SDK anyway.", "author": "bogdandrutu", "createdAt": "2020-04-20T18:04:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY1NTc3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU4NDM5NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1116#discussion_r411584395", "bodyText": "I was just wondering if there was going to be a need for some sort of \"SDK Support\" module that could contain this kind of thing. I'm not suggesting we do that now, though. :)", "author": "jkwatson", "createdAt": "2020-04-20T18:07:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY1NTc3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY2ODU1MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1116#discussion_r411668551", "bodyText": "open-telemetry/opentelemetry-specification#570 for the spec change", "author": "jkwatson", "createdAt": "2020-04-20T20:26:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY1NTc3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY3MzEwNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1116#discussion_r411673106", "bodyText": "ok, moved into the SDK. PTAL, @bogdandrutu", "author": "jkwatson", "createdAt": "2020-04-20T20:33:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY1NTc3MA=="}], "type": "inlineReview", "revised_code": {"commit": "8ffc5903b256575e3f9d6f575844a47845cb5e74", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java b/api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java\nindex 65f0cb219..42244550d 100644\n--- a/api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java\n+++ b/api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java\n\n@@ -125,9 +125,5 @@ public final class SemanticAttributes {\n   /** JDBC substring like \"mysql://db.example.com:3306\" */\n   public static final StringAttributeSetter DB_URL = StringAttributeSetter.create(\"db.url\");\n \n-  /** Probability value used by a probability-based Span sampling strategy. */\n-  public static final DoubleAttributeSetter SAMPLING_PROBABILITY =\n-      DoubleAttributeSetter.create(\"sampling.probability\");\n-\n   private SemanticAttributes() {}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU4MTc4MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1116#discussion_r411581780", "bodyText": "nit: I like more to see Collections.singletonMap :)", "author": "bogdandrutu", "createdAt": "2020-04-20T18:02:38Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java", "diffHunk": "@@ -229,8 +241,35 @@ public boolean isSampled() {\n     }\n \n     @Override\n-    public Map<String, AttributeValue> attributes() {\n+    public Map<String, AttributeValue> getAttributes() {\n       return Collections.emptyMap();\n     }\n   }\n+\n+  /** Probability-based sampling decision with a single attribute for the probability. */\n+  @Immutable\n+  @AutoValue\n+  abstract static class ProbabilityDecision implements Decision {\n+\n+    ProbabilityDecision() {}\n+\n+    /**\n+     * Creates sampling decision without attributes.\n+     *\n+     * @param decision sampling decision\n+     * @param probability the probability that was used for the decision.\n+     */\n+    static ProbabilityDecision create(boolean decision, double probability) {\n+      return new AutoValue_Samplers_ProbabilityDecision(\n+          decision,\n+          singletonMap(", "originalCommit": "204b4d33708a3b5e8b8d53e7d79f38b3fd9540e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU4NDAxMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1116#discussion_r411584011", "bodyText": "really? for methods that are really clear in their naming (as opposed to something like ImmutableMap.of(...)), I very much prefer the static import version of it.", "author": "jkwatson", "createdAt": "2020-04-20T18:06:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU4MTc4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU4NTk2Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1116#discussion_r411585962", "bodyText": "Personal preference, no need to do it :)", "author": "bogdandrutu", "createdAt": "2020-04-20T18:09:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU4MTc4MA=="}], "type": "inlineReview", "revised_code": {"commit": "8ffc5903b256575e3f9d6f575844a47845cb5e74", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java b/sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java\nindex 331b32e53..25c3fb0d8 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java\n\n@@ -263,7 +262,7 @@ public final class Samplers {\n       return new AutoValue_Samplers_ProbabilityDecision(\n           decision,\n           singletonMap(\n-              SemanticAttributes.SAMPLING_PROBABILITY.key(), doubleAttributeValue(probability)));\n+              SamplingAttributes.SAMPLING_PROBABILITY.key(), doubleAttributeValue(probability)));\n     }\n \n     @Override\n"}}, {"oid": "8ffc5903b256575e3f9d6f575844a47845cb5e74", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8ffc5903b256575e3f9d6f575844a47845cb5e74", "message": "move the sampling attribute to its own class in the SDK", "committedDate": "2020-04-20T20:33:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0MDQ5Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1116#discussion_r411740497", "bodyText": "As I mentioned in a previous comment, I would make this internal in the Samplers until a decision in the specs is made. I think this was the confusion from the other thread, but would not expose it for the moment, my comment there was that if we decide to expose it will definitely not going to be in the API.", "author": "bogdandrutu", "createdAt": "2020-04-20T22:42:58Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/SamplingAttributes.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.trace;\n+\n+import io.opentelemetry.trace.attributes.DoubleAttributeSetter;\n+\n+/** Attributes that are applied by {@link Sampler} instances. */\n+public class SamplingAttributes {\n+\n+  /**\n+   * Probability value used by a probability-based Span sampling strategy.\n+   *\n+   * <p>Note: This will need to be updated if a specification for this value is merged which changes\n+   * this proposed value.\n+   *\n+   * <p>See https://github.com/open-telemetry/opentelemetry-specification/pull/570\n+   */\n+  public static final DoubleAttributeSetter SAMPLING_PROBABILITY =\n+      DoubleAttributeSetter.create(\"sampling.probability\");", "originalCommit": "8ffc5903b256575e3f9d6f575844a47845cb5e74", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0MTIyOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1116#discussion_r411741229", "bodyText": "oh yeah. I somehow spaced on that part of things. I'll move it in there for the nonce.", "author": "jkwatson", "createdAt": "2020-04-20T22:44:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0MDQ5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0ODU1NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1116#discussion_r411748554", "bodyText": "Thanks, please do it before merging :)", "author": "bogdandrutu", "createdAt": "2020-04-20T23:01:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0MDQ5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0OTQ4Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1116#discussion_r411749486", "bodyText": "Also good to wait for @Oberon00 because they requested changes.", "author": "bogdandrutu", "createdAt": "2020-04-20T23:04:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0MDQ5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc2MjE3MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1116#discussion_r411762170", "bodyText": "moved into the Samplers, near the usage.", "author": "jkwatson", "createdAt": "2020-04-20T23:32:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0MDQ5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "94ab8f525ed0b3947e615e97c54c1d191c779c79", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/trace/SamplingAttributes.java b/sdk/src/main/java/io/opentelemetry/sdk/trace/SamplingAttributes.java\ndeleted file mode 100644\nindex 331dc47fc..000000000\n--- a/sdk/src/main/java/io/opentelemetry/sdk/trace/SamplingAttributes.java\n+++ /dev/null\n\n@@ -1,36 +0,0 @@\n-/*\n- * Copyright 2020, OpenTelemetry Authors\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package io.opentelemetry.sdk.trace;\n-\n-import io.opentelemetry.trace.attributes.DoubleAttributeSetter;\n-\n-/** Attributes that are applied by {@link Sampler} instances. */\n-public class SamplingAttributes {\n-\n-  /**\n-   * Probability value used by a probability-based Span sampling strategy.\n-   *\n-   * <p>Note: This will need to be updated if a specification for this value is merged which changes\n-   * this proposed value.\n-   *\n-   * <p>See https://github.com/open-telemetry/opentelemetry-specification/pull/570\n-   */\n-  public static final DoubleAttributeSetter SAMPLING_PROBABILITY =\n-      DoubleAttributeSetter.create(\"sampling.probability\");\n-\n-  private SamplingAttributes() {}\n-}\n"}}, {"oid": "94ab8f525ed0b3947e615e97c54c1d191c779c79", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/94ab8f525ed0b3947e615e97c54c1d191c779c79", "message": "Move the sampling priority attribute to a non-public spot", "committedDate": "2020-04-20T23:31:32Z", "type": "commit"}]}