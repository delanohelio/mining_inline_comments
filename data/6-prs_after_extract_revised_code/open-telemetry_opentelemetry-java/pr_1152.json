{"pr_number": 1152, "pr_title": "Prevent casting to TraceProviderSdk", "pr_createdAt": "2020-04-28T02:23:58Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1152", "timeline": [{"oid": "22fe396c1e3edd62187782478c4bc359ec36ff80", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/22fe396c1e3edd62187782478c4bc359ec36ff80", "message": "Prevent casting to TraceProviderSdk", "committedDate": "2020-04-28T01:08:23Z", "type": "commit"}, {"oid": "164a7b5d12c7a87daca9f86c31b2a684d4691a68", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/164a7b5d12c7a87daca9f86c31b2a684d4691a68", "message": "Fix javadoc", "committedDate": "2020-04-28T02:33:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjY2ODAwNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1152#discussion_r416668006", "bodyText": "Not sure I understand the purpose of this interface. Can we remove it?", "author": "bogdandrutu", "createdAt": "2020-04-28T14:38:58Z", "path": "api/src/main/java/io/opentelemetry/internal/Obfuscated.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.internal;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * This interface allows the SDK to unobfuscate an obfuscated static global provider.\n+ *\n+ * <p>Static global providers are obfuscated when they are returned from the API to prevent users\n+ * from casting them to their SDK specific implementation.\n+ *\n+ * <p>This is important for auto-instrumentation, because if users take the static global providers\n+ * that are returned from the API, and cast them to their SDK specific implementations, then those\n+ * casts will fail under auto-instrumentation, because auto-instrumentation takes over the static\n+ * global providers returned by the API and points them to it's embedded SDK.\n+ *\n+ * @since 0.4.0\n+ */\n+@ThreadSafe\n+public interface Obfuscated {", "originalCommit": "164a7b5d12c7a87daca9f86c31b2a684d4691a68", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5aea21d0ea1abdd3fae2397b2d186dddd5f8ef0e", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/internal/Obfuscated.java b/api/src/main/java/io/opentelemetry/internal/Obfuscated.java\nindex 989e12fca..163c84905 100644\n--- a/api/src/main/java/io/opentelemetry/internal/Obfuscated.java\n+++ b/api/src/main/java/io/opentelemetry/internal/Obfuscated.java\n\n@@ -32,7 +32,7 @@ import javax.annotation.concurrent.ThreadSafe;\n  * @since 0.4.0\n  */\n @ThreadSafe\n-public interface Obfuscated {\n+public interface Obfuscated<T> {\n \n   /**\n    * Returns the unobfuscated provider.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgwMzYwMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1152#discussion_r416803600", "bodyText": "Rather than Object, can we have this interface be parameterized with a type?", "author": "jkwatson", "createdAt": "2020-04-28T17:43:10Z", "path": "api/src/main/java/io/opentelemetry/internal/Obfuscated.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.internal;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * This interface allows the SDK to unobfuscate an obfuscated static global provider.\n+ *\n+ * <p>Static global providers are obfuscated when they are returned from the API to prevent users\n+ * from casting them to their SDK specific implementation.\n+ *\n+ * <p>This is important for auto-instrumentation, because if users take the static global providers\n+ * that are returned from the API, and cast them to their SDK specific implementations, then those\n+ * casts will fail under auto-instrumentation, because auto-instrumentation takes over the static\n+ * global providers returned by the API and points them to it's embedded SDK.\n+ *\n+ * @since 0.4.0\n+ */\n+@ThreadSafe\n+public interface Obfuscated {\n+\n+  /**\n+   * Returns the unobfuscated provider.\n+   *\n+   * @return the unobfuscated provider.\n+   * @since 0.4.0\n+   */\n+  Object unobfuscate();", "originalCommit": "164a7b5d12c7a87daca9f86c31b2a684d4691a68", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgxMjI1Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1152#discussion_r416812253", "bodyText": "I like that idea. Done.", "author": "trask", "createdAt": "2020-04-28T17:56:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgwMzYwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgzNjQ4OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1152#discussion_r416836489", "bodyText": "@trask before doing this change, can we clarify why having this interface at all is necessary? Not saying to not obfuscate, I refer to the Obfuscated interface.", "author": "bogdandrutu", "createdAt": "2020-04-28T18:35:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgwMzYwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYyNzc5OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1152#discussion_r417627799", "bodyText": "@bogdandrutu just wanted to make sure that you saw my response #1152 (comment) (I should have replied here also)", "author": "trask", "createdAt": "2020-04-29T21:38:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgwMzYwMA=="}], "type": "inlineReview", "revised_code": {"commit": "5aea21d0ea1abdd3fae2397b2d186dddd5f8ef0e", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/internal/Obfuscated.java b/api/src/main/java/io/opentelemetry/internal/Obfuscated.java\nindex 989e12fca..163c84905 100644\n--- a/api/src/main/java/io/opentelemetry/internal/Obfuscated.java\n+++ b/api/src/main/java/io/opentelemetry/internal/Obfuscated.java\n\n@@ -32,7 +32,7 @@ import javax.annotation.concurrent.ThreadSafe;\n  * @since 0.4.0\n  */\n @ThreadSafe\n-public interface Obfuscated {\n+public interface Obfuscated<T> {\n \n   /**\n    * Returns the unobfuscated provider.\n"}}, {"oid": "5aea21d0ea1abdd3fae2397b2d186dddd5f8ef0e", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5aea21d0ea1abdd3fae2397b2d186dddd5f8ef0e", "message": "Parameterize Obfuscated interface", "committedDate": "2020-04-28T17:55:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg0MTcxMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1152#discussion_r416841711", "bodyText": "@bogdandrutu this is where the Obfuscated interface is used. OpenTelemetrySdk.getTracerProvider() needs some way to unwrap and retrieve the TracerSdkProvider. Did you have other idea how to unwrap?", "author": "trask", "createdAt": "2020-04-28T18:44:18Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java", "diffHunk": "@@ -40,7 +41,7 @@\n    * @since 0.1.0\n    */\n   public static TracerSdkProvider getTracerProvider() {\n-    return (TracerSdkProvider) OpenTelemetry.getTracerProvider();\n+    return (TracerSdkProvider) ((Obfuscated<?>) OpenTelemetry.getTracerProvider()).unobfuscate();", "originalCommit": "5aea21d0ea1abdd3fae2397b2d186dddd5f8ef0e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}