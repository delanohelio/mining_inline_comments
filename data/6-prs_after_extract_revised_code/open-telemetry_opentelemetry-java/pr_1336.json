{"pr_number": 1336, "pr_title": "Introduce an ReadableAttributes interface, with 2 implementations", "pr_createdAt": "2020-06-15T17:19:33Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1336", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ1MDIxNw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1336#discussion_r440450217", "bodyText": "*A read-only", "author": "carlosalberto", "createdAt": "2020-06-15T21:12:46Z", "path": "api/src/main/java/io/opentelemetry/common/Attributes.java", "diffHunk": "@@ -16,225 +16,28 @@\n \n package io.opentelemetry.common;\n \n-import static io.opentelemetry.common.AttributeValue.arrayAttributeValue;\n-import static io.opentelemetry.common.AttributeValue.booleanAttributeValue;\n-import static io.opentelemetry.common.AttributeValue.doubleAttributeValue;\n-import static io.opentelemetry.common.AttributeValue.longAttributeValue;\n-import static io.opentelemetry.common.AttributeValue.stringAttributeValue;\n-\n-import com.google.auto.value.AutoValue;\n-import java.util.ArrayList;\n-import java.util.List;\n-import javax.annotation.concurrent.Immutable;\n+import javax.annotation.Nullable;\n \n /**\n- * An immutable container for attributes.\n+ * An read-only container for String-keyed attributes.", "originalCommit": "7a31a9be90d2a74ecf503441623a82941ce929e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ4NzMzMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1336#discussion_r440487331", "bodyText": "fixed!", "author": "jkwatson", "createdAt": "2020-06-15T22:44:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ1MDIxNw=="}], "type": "inlineReview", "revised_code": {"commit": "095c70f115ecce280e3918db4bbb0a64516bfd3f", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/common/Attributes.java b/api/src/main/java/io/opentelemetry/common/Attributes.java\nindex 95c57b892..3fe36d4e1 100644\n--- a/api/src/main/java/io/opentelemetry/common/Attributes.java\n+++ b/api/src/main/java/io/opentelemetry/common/Attributes.java\n\n@@ -19,7 +19,7 @@ package io.opentelemetry.common;\n import javax.annotation.Nullable;\n \n /**\n- * An read-only container for String-keyed attributes.\n+ * A read-only container for String-keyed attributes.\n  *\n  * <p>See {@link ImmutableAttributes} for the default implementation.\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU2MDkzOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1336#discussion_r440560938", "bodyText": "Think we can remove this warning now. Seems too scary for what it actually is", "author": "anuraaga", "createdAt": "2020-06-16T03:12:22Z", "path": "api/src/main/java/io/opentelemetry/common/ReadableAttributes.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A read-only container for String-keyed attributes.\n+ *\n+ * <p>See {@link Attributes} for the public API implementation.\n+ */\n+public interface ReadableAttributes {\n+  /** The number of attributes contained in this. */\n+  int size();\n+\n+  /** Whether there are any attributes contained in this. */\n+  boolean isEmpty();\n+\n+  /** Iterates over all the key-value pairs of attributes contained by this instance. */\n+  void forEach(KeyValueConsumer<AttributeValue> consumer);\n+\n+  /**\n+   * Returns the value of the given key, or null if the key does not exist.\n+   *\n+   * <p>Warning: currently may be implemented via a linear search, depending on implementation, so", "originalCommit": "8fd40667016b2427d5bfc01bd339fe5a4e79d38c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU3Mzc5MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1336#discussion_r440573791", "bodyText": "Be afraid, be very afraid.", "author": "jkwatson", "createdAt": "2020-06-16T04:05:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU2MDkzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg3OTc4NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1336#discussion_r440879785", "bodyText": "I'd be up for leaving the comment, but without the \"Warning\" word, to not scare people (yet have they understand the operation price ;) )", "author": "carlosalberto", "createdAt": "2020-06-16T14:08:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU2MDkzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkyNzAyMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1336#discussion_r440927020", "bodyText": "Fixed.", "author": "jkwatson", "createdAt": "2020-06-16T15:09:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU2MDkzOA=="}], "type": "inlineReview", "revised_code": {"commit": "3457747e8572f23e4f1f4d86e0b8d1fa257d66bf", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/common/ReadableAttributes.java b/api/src/main/java/io/opentelemetry/common/ReadableAttributes.java\ndeleted file mode 100644\nindex 6f796c1df..000000000\n--- a/api/src/main/java/io/opentelemetry/common/ReadableAttributes.java\n+++ /dev/null\n\n@@ -1,44 +0,0 @@\n-/*\n- * Copyright 2020, OpenTelemetry Authors\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package io.opentelemetry.common;\n-\n-import javax.annotation.Nullable;\n-\n-/**\n- * A read-only container for String-keyed attributes.\n- *\n- * <p>See {@link Attributes} for the public API implementation.\n- */\n-public interface ReadableAttributes {\n-  /** The number of attributes contained in this. */\n-  int size();\n-\n-  /** Whether there are any attributes contained in this. */\n-  boolean isEmpty();\n-\n-  /** Iterates over all the key-value pairs of attributes contained by this instance. */\n-  void forEach(KeyValueConsumer<AttributeValue> consumer);\n-\n-  /**\n-   * Returns the value of the given key, or null if the key does not exist.\n-   *\n-   * <p>Warning: currently may be implemented via a linear search, depending on implementation, so\n-   * O(n) performance in the worst case.\n-   */\n-  @Nullable\n-  AttributeValue get(String key);\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg4MDUwMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1336#discussion_r440880503", "bodyText": "This should stay as AttributesTest, no?", "author": "carlosalberto", "createdAt": "2020-06-16T14:09:15Z", "path": "api/src/test/java/io/opentelemetry/common/ImmutableAttributesTest.java", "diffHunk": "@@ -31,7 +31,7 @@\n import org.junit.rules.ExpectedException;\n \n /** Unit tests for {@link Attributes}s. */\n-public class AttributesTest {\n+public class ImmutableAttributesTest {", "originalCommit": "8fd40667016b2427d5bfc01bd339fe5a4e79d38c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkyMzE5Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1336#discussion_r440923193", "bodyText": "Yep, will fix.", "author": "jkwatson", "createdAt": "2020-06-16T15:04:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg4MDUwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkyNzUwMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1336#discussion_r440927500", "bodyText": "fixed", "author": "jkwatson", "createdAt": "2020-06-16T15:10:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg4MDUwMw=="}], "type": "inlineReview", "revised_code": {"commit": "3457747e8572f23e4f1f4d86e0b8d1fa257d66bf", "chunk": "diff --git a/api/src/test/java/io/opentelemetry/common/ImmutableAttributesTest.java b/api/src/test/java/io/opentelemetry/common/ImmutableAttributesTest.java\nindex 71a557049..762a2282e 100644\n--- a/api/src/test/java/io/opentelemetry/common/ImmutableAttributesTest.java\n+++ b/api/src/test/java/io/opentelemetry/common/ImmutableAttributesTest.java\n\n@@ -30,7 +30,7 @@ import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.ExpectedException;\n \n-/** Unit tests for {@link Attributes}s. */\n+/** Unit tests for {@link ImmutableAttributes}s. */\n public class ImmutableAttributesTest {\n   @Rule public final ExpectedException thrown = ExpectedException.none();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg4MDkwOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1336#discussion_r440880909", "bodyText": "How did this end up here? ;)", "author": "carlosalberto", "createdAt": "2020-06-16T14:09:51Z", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongValueObserverExample.java", "diffHunk": "@@ -21,9 +21,9 @@ public static void main(String[] args) {\n         .build();\n \n     observer.setCallback(\n-        new LongValueObserver.Callback<LongValueObserver.ResultLongValueObserver>() {\n+        new LongValueObserver.Callback<LongResult>() {", "originalCommit": "8fd40667016b2427d5bfc01bd339fe5a4e79d38c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkyMzA3NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1336#discussion_r440923075", "bodyText": "I have the examples project wired up in my IDE, so I have to fix failures to be able to compile. I can move this to a separate PR, if you prefer.", "author": "jkwatson", "createdAt": "2020-06-16T15:04:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg4MDkwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkyNzY3OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1336#discussion_r440927678", "bodyText": "removed. will submit separately", "author": "jkwatson", "createdAt": "2020-06-16T15:10:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg4MDkwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "3457747e8572f23e4f1f4d86e0b8d1fa257d66bf", "chunk": "diff --git a/examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongValueObserverExample.java b/examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongValueObserverExample.java\nindex 090501510..ce3e3f51b 100644\n--- a/examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongValueObserverExample.java\n+++ b/examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongValueObserverExample.java\n\n@@ -1,24 +1,26 @@\n package io.opentelemetry.example.metrics;\n \n import io.opentelemetry.OpenTelemetry;\n-import io.opentelemetry.metrics.LongValueObserver;\n import io.opentelemetry.metrics.AsynchronousInstrument.LongResult;\n+import io.opentelemetry.metrics.LongValueObserver;\n import io.opentelemetry.metrics.Meter;\n \n /**\n- * Example of using {@link LongValueObserver} to measure execution time of method.\n- * Setting {@link LongValueObserver.Callback} a callback that gets executed every collection interval.\n- * Useful for expensive measurements that would be wastefully to calculate each request.\n+ * Example of using {@link LongValueObserver} to measure execution time of method. Setting {@link\n+ * LongValueObserver.Callback} a callback that gets executed every collection interval. Useful for\n+ * expensive measurements that would be wastefully to calculate each request.\n  */\n public class LongValueObserverExample {\n \n   public static void main(String[] args) {\n-    Meter sampleMeter = OpenTelemetry.getMeterProvider()\n-        .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n-    LongValueObserver observer = sampleMeter.longValueObserverBuilder(\"jvm.memory.total\")\n-        .setDescription(\"Reports JVM memory usage.\")\n-        .setUnit(\"byte\")\n-        .build();\n+    Meter sampleMeter =\n+        OpenTelemetry.getMeterProvider().get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+    LongValueObserver observer =\n+        sampleMeter\n+            .longValueObserverBuilder(\"jvm.memory.total\")\n+            .setDescription(\"Reports JVM memory usage.\")\n+            .setUnit(\"byte\")\n+            .build();\n \n     observer.setCallback(\n         new LongValueObserver.Callback<LongResult>() {\n"}}, {"oid": "3457747e8572f23e4f1f4d86e0b8d1fa257d66bf", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/3457747e8572f23e4f1f4d86e0b8d1fa257d66bf", "message": "Introduce an Attributes interface and have ImmutableAttributes and the AttributesMap implement it.", "committedDate": "2020-06-17T15:02:37Z", "type": "commit"}, {"oid": "3508fce4e3aa0ab2d403d5b470968eba82d6f126", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/3508fce4e3aa0ab2d403d5b470968eba82d6f126", "message": "make the attribute limiting a little clearer.", "committedDate": "2020-06-17T15:02:39Z", "type": "commit"}, {"oid": "095c70f115ecce280e3918db4bbb0a64516bfd3f", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/095c70f115ecce280e3918db4bbb0a64516bfd3f", "message": "tiny javadoc fix", "committedDate": "2020-06-17T15:02:40Z", "type": "commit"}, {"oid": "f4b8b2a7d04a344c911bb7c825fac553068f2add", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f4b8b2a7d04a344c911bb7c825fac553068f2add", "message": "Rework to restore the Attributes class, and introduce a ReadableAttributes interface", "committedDate": "2020-06-17T15:03:18Z", "type": "commit"}, {"oid": "33480edd00998c44d2062a08215f4d62feea793c", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/33480edd00998c44d2062a08215f4d62feea793c", "message": "polish the javadoc a bit", "committedDate": "2020-06-17T15:03:20Z", "type": "commit"}, {"oid": "608a4566a5b5ffdff7ced0cde2a47a46c45100a5", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/608a4566a5b5ffdff7ced0cde2a47a46c45100a5", "message": "fix some broken javadoc", "committedDate": "2020-06-17T15:03:20Z", "type": "commit"}, {"oid": "841238830d7e5ebb3235695cf8429da688d89d37", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/841238830d7e5ebb3235695cf8429da688d89d37", "message": "revert example change; revert test name change", "committedDate": "2020-06-17T15:03:34Z", "type": "commit"}, {"oid": "4e6b296edc4627de422b9102d8a99ed8bcdef760", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/4e6b296edc4627de422b9102d8a99ed8bcdef760", "message": "javadoc de-escalation", "committedDate": "2020-06-17T15:03:37Z", "type": "commit"}, {"oid": "4e6b296edc4627de422b9102d8a99ed8bcdef760", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/4e6b296edc4627de422b9102d8a99ed8bcdef760", "message": "javadoc de-escalation", "committedDate": "2020-06-17T15:03:37Z", "type": "forcePushed"}, {"oid": "7894ee9b88040393e666a3b1fa2d754e0dfb6c97", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/7894ee9b88040393e666a3b1fa2d754e0dfb6c97", "message": "fix bad merge", "committedDate": "2020-06-17T15:14:55Z", "type": "commit"}]}