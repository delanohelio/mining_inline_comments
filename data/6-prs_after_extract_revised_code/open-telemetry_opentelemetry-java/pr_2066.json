{"pr_number": 2066, "pr_title": "Add kotlin extension for interaction with Context in coroutines.", "pr_createdAt": "2020-11-12T05:11:01Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/2066", "timeline": [{"oid": "ca0120c581fb256dc6dc9a61965c95ac6643228a", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ca0120c581fb256dc6dc9a61965c95ac6643228a", "message": "Add kotlin extension for interaction with Context in coroutines.", "committedDate": "2020-11-12T05:02:58Z", "type": "commit"}, {"oid": "475db7da42451cd6d738cd7776ae386305af6996", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/475db7da42451cd6d738cd7776ae386305af6996", "message": "Newline", "committedDate": "2020-11-12T05:10:40Z", "type": "commit"}, {"oid": "476d6fb44a81966c8c9f93d0109f642cceed2841", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/476d6fb44a81966c8c9f93d0109f642cceed2841", "message": "ImplicitContextKeyed not span", "committedDate": "2020-11-12T05:14:15Z", "type": "commit"}, {"oid": "db6f11bf157ef45e60d84adf41f386d986add5d9", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/db6f11bf157ef45e60d84adf41f386d986add5d9", "message": "Fix doc", "committedDate": "2020-11-12T05:14:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI0MDM1Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2066#discussion_r522240357", "bodyText": "I wonder if we should prefix this with Kotlin or Coroutine to make reading code usages super clear about which context we're referring to.", "author": "jkwatson", "createdAt": "2020-11-12T16:28:21Z", "path": "extensions/kotlin/src/main/java/io/opentelemetry/extension/kotlin/ContextElement.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.extension.kotlin;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import kotlin.coroutines.CoroutineContext;\n+import kotlin.jvm.functions.Function2;\n+import kotlinx.coroutines.ThreadContextElement;\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * {@link ThreadContextElement} for synchronizing a {@link Context} across coroutine suspension and\n+ * resumption. Implemented in Java instead of Kotlin to allow usage in auto-instrumentation where\n+ * there is an outstanding Kotlin bug preventing it https://youtrack.jetbrains.com/issue/KT-20869.\n+ */\n+class ContextElement implements ThreadContextElement<Scope> {", "originalCommit": "db6f11bf157ef45e60d84adf41f386d986add5d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU1ODA2Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2066#discussion_r522558067", "bodyText": "Yup good call", "author": "anuraaga", "createdAt": "2020-11-13T01:50:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI0MDM1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "2ca56d23a9600e0bd51ba503d55a3c67d2096da2", "chunk": "diff --git a/extensions/kotlin/src/main/java/io/opentelemetry/extension/kotlin/ContextElement.java b/extensions/kotlin/src/main/java/io/opentelemetry/extension/kotlin/KotlinContextElement.java\nsimilarity index 82%\nrename from extensions/kotlin/src/main/java/io/opentelemetry/extension/kotlin/ContextElement.java\nrename to extensions/kotlin/src/main/java/io/opentelemetry/extension/kotlin/KotlinContextElement.java\nindex b2e1661aa..60b7645af 100644\n--- a/extensions/kotlin/src/main/java/io/opentelemetry/extension/kotlin/ContextElement.java\n+++ b/extensions/kotlin/src/main/java/io/opentelemetry/extension/kotlin/KotlinContextElement.java\n\n@@ -17,19 +17,19 @@ import org.jetbrains.annotations.Nullable;\n  * resumption. Implemented in Java instead of Kotlin to allow usage in auto-instrumentation where\n  * there is an outstanding Kotlin bug preventing it https://youtrack.jetbrains.com/issue/KT-20869.\n  */\n-class ContextElement implements ThreadContextElement<Scope> {\n+class KotlinContextElement implements ThreadContextElement<Scope> {\n \n-  static final CoroutineContext.Key<ContextElement> KEY =\n-      new CoroutineContext.Key<ContextElement>() {};\n+  static final CoroutineContext.Key<KotlinContextElement> KEY =\n+      new CoroutineContext.Key<KotlinContextElement>() {};\n \n-  private final Context context;\n+  private final Context otelContext;\n \n-  ContextElement(Context context) {\n-    this.context = context;\n+  KotlinContextElement(Context otelContext) {\n+    this.otelContext = otelContext;\n   }\n \n   Context getContext() {\n-    return context;\n+    return otelContext;\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI0MDc0NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2066#discussion_r522240745", "bodyText": "similarly, I might call this field otelContext or openTelemetryContext for extra clarity.", "author": "jkwatson", "createdAt": "2020-11-12T16:28:51Z", "path": "extensions/kotlin/src/main/java/io/opentelemetry/extension/kotlin/ContextElement.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.extension.kotlin;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import kotlin.coroutines.CoroutineContext;\n+import kotlin.jvm.functions.Function2;\n+import kotlinx.coroutines.ThreadContextElement;\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * {@link ThreadContextElement} for synchronizing a {@link Context} across coroutine suspension and\n+ * resumption. Implemented in Java instead of Kotlin to allow usage in auto-instrumentation where\n+ * there is an outstanding Kotlin bug preventing it https://youtrack.jetbrains.com/issue/KT-20869.\n+ */\n+class ContextElement implements ThreadContextElement<Scope> {\n+\n+  static final CoroutineContext.Key<ContextElement> KEY =\n+      new CoroutineContext.Key<ContextElement>() {};\n+\n+  private final Context context;", "originalCommit": "db6f11bf157ef45e60d84adf41f386d986add5d9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2ca56d23a9600e0bd51ba503d55a3c67d2096da2", "chunk": "diff --git a/extensions/kotlin/src/main/java/io/opentelemetry/extension/kotlin/ContextElement.java b/extensions/kotlin/src/main/java/io/opentelemetry/extension/kotlin/KotlinContextElement.java\nsimilarity index 82%\nrename from extensions/kotlin/src/main/java/io/opentelemetry/extension/kotlin/ContextElement.java\nrename to extensions/kotlin/src/main/java/io/opentelemetry/extension/kotlin/KotlinContextElement.java\nindex b2e1661aa..60b7645af 100644\n--- a/extensions/kotlin/src/main/java/io/opentelemetry/extension/kotlin/ContextElement.java\n+++ b/extensions/kotlin/src/main/java/io/opentelemetry/extension/kotlin/KotlinContextElement.java\n\n@@ -17,19 +17,19 @@ import org.jetbrains.annotations.Nullable;\n  * resumption. Implemented in Java instead of Kotlin to allow usage in auto-instrumentation where\n  * there is an outstanding Kotlin bug preventing it https://youtrack.jetbrains.com/issue/KT-20869.\n  */\n-class ContextElement implements ThreadContextElement<Scope> {\n+class KotlinContextElement implements ThreadContextElement<Scope> {\n \n-  static final CoroutineContext.Key<ContextElement> KEY =\n-      new CoroutineContext.Key<ContextElement>() {};\n+  static final CoroutineContext.Key<KotlinContextElement> KEY =\n+      new CoroutineContext.Key<KotlinContextElement>() {};\n \n-  private final Context context;\n+  private final Context otelContext;\n \n-  ContextElement(Context context) {\n-    this.context = context;\n+  KotlinContextElement(Context otelContext) {\n+    this.otelContext = otelContext;\n   }\n \n   Context getContext() {\n-    return context;\n+    return otelContext;\n   }\n \n   @Override\n"}}, {"oid": "2ca56d23a9600e0bd51ba503d55a3c67d2096da2", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/2ca56d23a9600e0bd51ba503d55a3c67d2096da2", "message": "Cleanup", "committedDate": "2020-11-13T01:50:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU1OTUxMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2066#discussion_r522559510", "bodyText": "I wonder if we should also mention that many async framework users won't want to use this either. Even if we don't have a drop-in solution for them.", "author": "jkwatson", "createdAt": "2020-11-13T01:55:45Z", "path": "context/src/main/java/io/opentelemetry/context/ImplicitContextKeyed.java", "diffHunk": "@@ -21,6 +21,12 @@\n    * automatically.\n    *\n    * <p>This method is equivalent to {@code Context.current().with(value).makeCurrent()}.\n+   *\n+   * <p>The default implementation of this method will store the {@link ImplicitContextKeyed} in a\n+   * {@link ThreadLocal}. Kotlin coroutine users SHOULD NOT use this method as the {@link", "originalCommit": "2ca56d23a9600e0bd51ba503d55a3c67d2096da2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}