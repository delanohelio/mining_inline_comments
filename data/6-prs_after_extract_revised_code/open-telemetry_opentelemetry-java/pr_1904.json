{"pr_number": 1904, "pr_title": "Hide Default* implementations behind interface factory methods.", "pr_createdAt": "2020-10-28T08:54:58Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1904", "timeline": [{"oid": "ae2172de283c335cbae7f13c7ce35fc0d26b6e8f", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ae2172de283c335cbae7f13c7ce35fc0d26b6e8f", "message": "Hide Default* implementations behind interface factory methods.", "committedDate": "2020-10-28T08:53:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ5NTY4MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1904#discussion_r513495681", "bodyText": "The name of the method is misleading, for metrics it is right now a noop but we may add small functionality. Not sure about a better name but wanted to raise this issue", "author": "bogdandrutu", "createdAt": "2020-10-28T14:36:49Z", "path": "api/src/main/java/io/opentelemetry/api/metrics/Meter.java", "diffHunk": "@@ -25,6 +25,14 @@\n @ThreadSafe\n public interface Meter {\n \n+  /**\n+   * Returns a {@link Meter} that only creates no-op {@link Instrument}s that neither record nor are\n+   * emitted.\n+   */\n+  static Meter noop() {\n+    return DefaultMeter.getInstance();", "originalCommit": "ae2172de283c335cbae7f13c7ce35fc0d26b6e8f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgxNDc4OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1904#discussion_r513814788", "bodyText": "Hmm - how about just getDefault then? An unfortunately generic name but it does give us flexibility to change so it seems like a better name.", "author": "anuraaga", "createdAt": "2020-10-28T23:09:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ5NTY4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgyNjk5OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1904#discussion_r513826998", "bodyText": "yeah, I think getDefault might be better, even though I much prefer saying \"NOOP\" loudly whenever I read the code. ;)", "author": "jkwatson", "createdAt": "2020-10-28T23:46:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ5NTY4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "73fd1551d0438802ad69c2572322340ab753e965", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/api/metrics/Meter.java b/api/src/main/java/io/opentelemetry/api/metrics/Meter.java\nindex d8cd0eac5..9243d4278 100644\n--- a/api/src/main/java/io/opentelemetry/api/metrics/Meter.java\n+++ b/api/src/main/java/io/opentelemetry/api/metrics/Meter.java\n\n@@ -29,7 +29,7 @@ public interface Meter {\n    * Returns a {@link Meter} that only creates no-op {@link Instrument}s that neither record nor are\n    * emitted.\n    */\n-  static Meter noop() {\n+  static Meter getDefault() {\n     return DefaultMeter.getInstance();\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU2MjQxNw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1904#discussion_r513562417", "bodyText": "why lowercase? Isn't the DefaultMeter immutable?", "author": "jkwatson", "createdAt": "2020-10-28T15:57:47Z", "path": "api/src/main/java/io/opentelemetry/api/metrics/DefaultMeter.java", "diffHunk": "@@ -14,23 +14,18 @@\n \n /** No-op implementations of {@link Meter}. */\n @ThreadSafe\n-public final class DefaultMeter implements Meter {\n+final class DefaultMeter implements Meter {\n \n-  private static final DefaultMeter INSTANCE = new DefaultMeter();\n+  private static final DefaultMeter instance = new DefaultMeter();", "originalCommit": "ae2172de283c335cbae7f13c7ce35fc0d26b6e8f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgxNDYzMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1904#discussion_r513814630", "bodyText": "It seemed slightly more cool than a boring constant but that's true :)", "author": "anuraaga", "createdAt": "2020-10-28T23:09:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU2MjQxNw=="}], "type": "inlineReview", "revised_code": {"commit": "73fd1551d0438802ad69c2572322340ab753e965", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/api/metrics/DefaultMeter.java b/api/src/main/java/io/opentelemetry/api/metrics/DefaultMeter.java\nindex 457c3f003..48db60154 100644\n--- a/api/src/main/java/io/opentelemetry/api/metrics/DefaultMeter.java\n+++ b/api/src/main/java/io/opentelemetry/api/metrics/DefaultMeter.java\n\n@@ -16,7 +16,7 @@ import javax.annotation.concurrent.ThreadSafe;\n @ThreadSafe\n final class DefaultMeter implements Meter {\n \n-  private static final DefaultMeter instance = new DefaultMeter();\n+  private static final DefaultMeter INSTANCE = new DefaultMeter();\n   private static final String COUNTERS_CAN_ONLY_INCREASE = \"Counters can only increase\";\n \n   /* VisibleForTesting */ static final String ERROR_MESSAGE_INVALID_NAME =\n"}}, {"oid": "73fd1551d0438802ad69c2572322340ab753e965", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/73fd1551d0438802ad69c2572322340ab753e965", "message": "Renames", "committedDate": "2020-10-28T23:50:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg2ODYyMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1904#discussion_r513868622", "bodyText": "I wonder how much value these tests are really providing.", "author": "jkwatson", "createdAt": "2020-10-29T01:45:24Z", "path": "api/src/test/java/io/opentelemetry/api/OpenTelemetryTest.java", "diffHunk": "@@ -59,10 +57,12 @@ void after() {\n \n   @Test\n   void testDefault() {\n-    assertThat(OpenTelemetry.getGlobalTracerProvider()).isInstanceOf(DefaultTracerProvider.class);\n+    assertThat(OpenTelemetry.getGlobalTracerProvider().getClass().getSimpleName())\n+        .isEqualTo(\"DefaultTracerProvider\");", "originalCommit": "73fd1551d0438802ad69c2572322340ab753e965", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk2ODcyNw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1904#discussion_r513968727", "bodyText": "I think they make sure we don't actually add a dependency on the SDK from the API and don't know if any of our other tests do. So that's probably good value.", "author": "anuraaga", "createdAt": "2020-10-29T04:54:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg2ODYyMg=="}], "type": "inlineReview", "revised_code": null}]}