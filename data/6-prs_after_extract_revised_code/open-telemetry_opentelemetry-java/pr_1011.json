{"pr_number": 1011, "pr_title": "Add a helper class that reads metrics every X seconds.", "pr_createdAt": "2020-03-13T18:33:09Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1011", "timeline": [{"oid": "ac66fd56e7aee04d2c5ab891f04f6f0e2e2802e8", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ac66fd56e7aee04d2c5ab891f04f6f0e2e2802e8", "message": "Add a helper class that reads metrics every X seconds.\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-03-13T18:19:02Z", "type": "commit"}, {"oid": "0e1d1fa2bdfbf1ddd9f6a866cdb317cf7642939f", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0e1d1fa2bdfbf1ddd9f6a866cdb317cf7642939f", "message": "Adress review feedback\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-03-13T18:19:02Z", "type": "commit"}, {"oid": "54a09c1ba52619ee367e79390b570bd5450449a5", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/54a09c1ba52619ee367e79390b570bd5450449a5", "message": "a few final cleanups", "committedDate": "2020-03-13T18:25:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUxODQ3OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1011#discussion_r392518479", "bodyText": "We said that we need to wait for the in-progress task if any.", "author": "bogdandrutu", "createdAt": "2020-03-13T22:49:19Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/export/IntervalMetricReader.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.export;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import io.opentelemetry.internal.Utils;\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import jdk.nashorn.internal.ir.annotations.Immutable;\n+\n+/**\n+ * Wraps a list of {@link MetricProducer}s and automatically reads and exports the metrics every\n+ * export interval.\n+ *\n+ * @since 0.3.0\n+ */\n+public final class IntervalMetricReader {\n+  private final Exporter exporter;\n+  private final ScheduledExecutorService scheduler;\n+\n+  /**\n+   * Stops the scheduled task and calls export one more time.\n+   *\n+   * @since 0.3.0\n+   */\n+  public void shutdown() {\n+    scheduler.shutdown();\n+    exporter.run();\n+  }\n+", "originalCommit": "54a09c1ba52619ee367e79390b570bd5450449a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0OTIyOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1011#discussion_r392549228", "bodyText": "I don't think we ever came to a conclusion on how we wanted to behave, but I'm happy to have this method block until everything is done, if that's what is desired.", "author": "jkwatson", "createdAt": "2020-03-14T02:35:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUxODQ3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0OTMwMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1011#discussion_r392549302", "bodyText": "How long should we wait before bailing out, do you think?", "author": "jkwatson", "createdAt": "2020-03-14T02:36:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUxODQ3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0OTU1OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1011#discussion_r392549559", "bodyText": "I made it wait 5 seconds. Happy to tweak it if there's a better number.", "author": "jkwatson", "createdAt": "2020-03-14T02:40:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUxODQ3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "d5d9acf3800366630917f613b1e8b78930edad9b", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/metrics/export/IntervalMetricReader.java b/sdk/src/main/java/io/opentelemetry/sdk/metrics/export/IntervalMetricReader.java\nindex b2895d7f8..7e9fc74d6 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/metrics/export/IntervalMetricReader.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/metrics/export/IntervalMetricReader.java\n\n@@ -46,7 +46,16 @@ public final class IntervalMetricReader {\n    */\n   public void shutdown() {\n     scheduler.shutdown();\n-    exporter.run();\n+    try {\n+      scheduler.awaitTermination(5, TimeUnit.SECONDS);\n+    } catch (InterruptedException e) {\n+      // force a shutdown if the export hasn't finished.\n+      scheduler.shutdownNow();\n+      // reset the interrupted status\n+      Thread.currentThread().interrupt();\n+    } finally {\n+      exporter.run();\n+    }\n   }\n \n   /**\n"}}, {"oid": "d5d9acf3800366630917f613b1e8b78930edad9b", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d5d9acf3800366630917f613b1e8b78930edad9b", "message": "Make the shutdown block until all the tasks are complete (or 5 seconds, whichever is shorter)", "committedDate": "2020-03-14T02:40:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU5NjIxOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1011#discussion_r392596219", "bodyText": "If we cannot stop the previous export we should not start a new one :)", "author": "bogdandrutu", "createdAt": "2020-03-14T15:25:12Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/export/IntervalMetricReader.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.export;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import io.opentelemetry.internal.Utils;\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import jdk.nashorn.internal.ir.annotations.Immutable;\n+\n+/**\n+ * Wraps a list of {@link MetricProducer}s and automatically reads and exports the metrics every\n+ * export interval.\n+ *\n+ * @since 0.3.0\n+ */\n+public final class IntervalMetricReader {\n+  private final Exporter exporter;\n+  private final ScheduledExecutorService scheduler;\n+\n+  /**\n+   * Stops the scheduled task and calls export one more time.\n+   *\n+   * @since 0.3.0\n+   */\n+  public void shutdown() {\n+    scheduler.shutdown();\n+    try {\n+      scheduler.awaitTermination(5, TimeUnit.SECONDS);\n+    } catch (InterruptedException e) {\n+      // force a shutdown if the export hasn't finished.\n+      scheduler.shutdownNow();\n+      // reset the interrupted status\n+      Thread.currentThread().interrupt();\n+    } finally {\n+      exporter.run();", "originalCommit": "d5d9acf3800366630917f613b1e8b78930edad9b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwMDU0Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1011#discussion_r392600547", "bodyText": "yeah, good call. Fixed.", "author": "jkwatson", "createdAt": "2020-03-14T16:27:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU5NjIxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "a11c745fff41623264ebb6ae4576a27181f91693", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/metrics/export/IntervalMetricReader.java b/sdk/src/main/java/io/opentelemetry/sdk/metrics/export/IntervalMetricReader.java\nindex 7e9fc74d6..ad398c377 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/metrics/export/IntervalMetricReader.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/metrics/export/IntervalMetricReader.java\n\n@@ -48,13 +48,12 @@ public final class IntervalMetricReader {\n     scheduler.shutdown();\n     try {\n       scheduler.awaitTermination(5, TimeUnit.SECONDS);\n+      exporter.run();\n     } catch (InterruptedException e) {\n       // force a shutdown if the export hasn't finished.\n       scheduler.shutdownNow();\n       // reset the interrupted status\n       Thread.currentThread().interrupt();\n-    } finally {\n-      exporter.run();\n     }\n   }\n \n"}}, {"oid": "a11c745fff41623264ebb6ae4576a27181f91693", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a11c745fff41623264ebb6ae4576a27181f91693", "message": "only run the final export if we can shut down the executor properly", "committedDate": "2020-03-14T16:27:34Z", "type": "commit"}]}