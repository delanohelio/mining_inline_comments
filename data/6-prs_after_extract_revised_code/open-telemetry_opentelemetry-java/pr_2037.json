{"pr_number": 2037, "pr_title": "Very basic Aggregation-configuration API in the SDK.", "pr_createdAt": "2020-11-06T17:06:03Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEwMzk4Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037#discussion_r521103982", "bodyText": "Mostly makes sense but I'm wondering why is this a best match? Shouldn't the aggregation configuration be more precise?", "author": "anuraaga", "createdAt": "2020-11-11T04:24:46Z", "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/ViewRegistry.java", "diffHunk": "@@ -36,39 +54,70 @@ Batcher createBatcher(\n       MeterSharedState meterSharedState,\n       InstrumentDescriptor descriptor) {\n \n-    Aggregation aggregation = getRegisteredAggregation(descriptor);\n+    AggregationConfiguration specification = findBestMatch(descriptor);\n \n-    // todo: don't just use the defaults!\n-    switch (descriptor.getType()) {\n-      case COUNTER:\n-      case UP_DOWN_COUNTER:\n-      case SUM_OBSERVER:\n-      case UP_DOWN_SUM_OBSERVER:\n-        return Batchers.getCumulativeAllLabels(\n-            descriptor, meterProviderSharedState, meterSharedState, aggregation);\n-      case VALUE_RECORDER:\n-        // TODO: Revisit the batcher used here for value observers,\n-        // currently this does not remove duplicate records in the same cycle.\n-      case VALUE_OBSERVER:\n-        return Batchers.getDeltaAllLabels(\n-            descriptor, meterProviderSharedState, meterSharedState, aggregation);\n+    Aggregation aggregation = specification.aggregation();\n+\n+    if (Temporality.CUMULATIVE == specification.temporality()) {\n+      return Batchers.getCumulativeAllLabels(\n+          descriptor, meterProviderSharedState, meterSharedState, aggregation);\n+    } else if (Temporality.DELTA == specification.temporality()) {\n+      return Batchers.getDeltaAllLabels(\n+          descriptor, meterProviderSharedState, meterSharedState, aggregation);\n     }\n-    throw new IllegalArgumentException(\"Unknown descriptor type: \" + descriptor.getType());\n+    throw new IllegalStateException(\"unsupported Temporality: \" + specification.temporality());\n   }\n \n-  private static Aggregation getRegisteredAggregation(InstrumentDescriptor descriptor) {\n-    // todo look up based on fields of the descriptor.\n+  // todo: consider moving this method to its own class, for more targeted testing.\n+  private AggregationConfiguration findBestMatch(InstrumentDescriptor descriptor) {", "originalCommit": "89937a904c1fca5ce76ba43e4e46cd7812ed0a0c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTExNDE3Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037#discussion_r521114176", "bodyText": "Well, I can imagine someone saying\n\nBy default, aggregate all ValueRecorders with MinMaxSumCount.\nThis particular ValueRecorder, named \"http.request.latency\"...that one I want Histograms for\n\nSo, \"best match\" will find the most precise selection and choose that, falling back to less precise ones. Is there a better name I could use?", "author": "jkwatson", "createdAt": "2020-11-11T05:00:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEwMzk4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEyNDMyMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037#discussion_r521124322", "bodyText": "I'd just name the method getAggregation and the loop can have a comment // See if user defined a specific configuration for this descriptor, the definition itself seems precise, not best-effort.", "author": "anuraaga", "createdAt": "2020-11-11T05:39:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEwMzk4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "631d00f9d92ecf3578190e2ded610f2977ea44eb", "chunk": "diff --git a/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/ViewRegistry.java b/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/ViewRegistry.java\nindex 62682f995..4532baaa6 100644\n--- a/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/ViewRegistry.java\n+++ b/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/ViewRegistry.java\n\n@@ -54,7 +49,7 @@ class ViewRegistry {\n       MeterSharedState meterSharedState,\n       InstrumentDescriptor descriptor) {\n \n-    AggregationConfiguration specification = findBestMatch(descriptor);\n+    ViewSpecification specification = findBestMatch(descriptor);\n \n     Aggregation aggregation = specification.aggregation();\n \n"}}, {"oid": "9b59559678d4d7f5e4fe6fed2a413765baf852dc", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9b59559678d4d7f5e4fe6fed2a413765baf852dc", "message": "Adjust defaults based on the latest behavior", "committedDate": "2020-11-11T18:26:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg1NDUwNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037#discussion_r521854504", "bodyText": "Needs some javadoc for a few of the classes", "author": "anuraaga", "createdAt": "2020-11-12T05:49:12Z", "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/AggregationConfiguration.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.metrics.view;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.api.metrics.Instrument;\n+import javax.annotation.concurrent.Immutable;\n+\n+@AutoValue\n+@Immutable\n+public abstract class AggregationConfiguration {\n+\n+  public static AggregationConfiguration create(Aggregation aggregation, Temporality temporality) {", "originalCommit": "9ff19d1829b8763dac266f54127a79867d0a7074", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM4ODE3MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037#discussion_r522388171", "bodyText": "javadoc added. I think this is ready for a final look-see if anyone wants to do that.", "author": "jkwatson", "createdAt": "2020-11-12T20:05:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg1NDUwNA=="}], "type": "inlineReview", "revised_code": {"commit": "631d00f9d92ecf3578190e2ded610f2977ea44eb", "chunk": "diff --git a/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/AggregationConfiguration.java b/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/AggregationConfiguration.java\ndeleted file mode 100644\nindex 37bd95220..000000000\n--- a/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/AggregationConfiguration.java\n+++ /dev/null\n\n@@ -1,33 +0,0 @@\n-/*\n- * Copyright The OpenTelemetry Authors\n- * SPDX-License-Identifier: Apache-2.0\n- */\n-\n-package io.opentelemetry.sdk.metrics.view;\n-\n-import com.google.auto.value.AutoValue;\n-import io.opentelemetry.api.metrics.Instrument;\n-import javax.annotation.concurrent.Immutable;\n-\n-@AutoValue\n-@Immutable\n-public abstract class AggregationConfiguration {\n-\n-  public static AggregationConfiguration create(Aggregation aggregation, Temporality temporality) {\n-    return new AutoValue_AggregationConfiguration(aggregation, temporality);\n-  }\n-\n-  /** Which {@link Aggregation} should be used for this View. */\n-  public abstract Aggregation aggregation();\n-\n-  /** What {@link Temporality} should be used for this View (delta vs. cumulative). */\n-  public abstract Temporality temporality();\n-\n-  /** An enumeration which describes the time period over which metrics should be aggregated. */\n-  public enum Temporality {\n-    /** Metrics will be aggregated only over the most recent collection interval. */\n-    DELTA,\n-    /** Metrics will be aggregated over the lifetime of the associated {@link Instrument}. */\n-    CUMULATIVE\n-  }\n-}\n"}}, {"oid": "631d00f9d92ecf3578190e2ded610f2977ea44eb", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/631d00f9d92ecf3578190e2ded610f2977ea44eb", "message": "Create a very basic view API in the SDK.", "committedDate": "2020-11-12T18:06:59Z", "type": "commit"}, {"oid": "9bbbe44633d10e1fc000add4fc20aa188cbd02ed", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9bbbe44633d10e1fc000add4fc20aa188cbd02ed", "message": "fix formatting", "committedDate": "2020-11-12T18:06:59Z", "type": "commit"}, {"oid": "6063ff45f5ccacab7dc12ecb28a7e86a840d8f94", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/6063ff45f5ccacab7dc12ecb28a7e86a840d8f94", "message": "move the ViewRegistry up one package, and clean up the visibility of other classes", "committedDate": "2020-11-12T18:06:59Z", "type": "commit"}, {"oid": "8432091a84adf183c475b558bef598a506e002da", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8432091a84adf183c475b558bef598a506e002da", "message": "Support matching by instrument name", "committedDate": "2020-11-12T18:06:59Z", "type": "commit"}, {"oid": "cbe903d8d64fed385357e7131c771fec13bddb1b", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/cbe903d8d64fed385357e7131c771fec13bddb1b", "message": "Update sdk/src/main/java/io/opentelemetry/sdk/metrics/ViewRegistry.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>", "committedDate": "2020-11-12T18:06:59Z", "type": "commit"}, {"oid": "d42a9deecca46999f24391726250a976b1663988", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d42a9deecca46999f24391726250a976b1663988", "message": "Update sdk/src/main/java/io/opentelemetry/sdk/metrics/view/ViewSpecification.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>", "committedDate": "2020-11-12T18:06:59Z", "type": "commit"}, {"oid": "7742cf93c28b935742ff7910f74ccc47a89b1cad", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/7742cf93c28b935742ff7910f74ccc47a89b1cad", "message": "Update sdk/src/main/java/io/opentelemetry/sdk/metrics/view/ViewSpecification.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>", "committedDate": "2020-11-12T18:06:59Z", "type": "commit"}, {"oid": "ed2884372789210825c89ec316d529f31ffa650d", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ed2884372789210825c89ec316d529f31ffa650d", "message": "Update sdk/src/main/java/io/opentelemetry/sdk/metrics/view/ViewSpecification.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>", "committedDate": "2020-11-12T18:06:59Z", "type": "commit"}, {"oid": "ab50fc9296271e18a1044ab041456e9a5cda4179", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ab50fc9296271e18a1044ab041456e9a5cda4179", "message": "Update sdk/src/main/java/io/opentelemetry/sdk/metrics/view/ViewSpecification.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>", "committedDate": "2020-11-12T18:06:59Z", "type": "commit"}, {"oid": "856ca821601430bd12addfd9dcab15a1f220ce57", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/856ca821601430bd12addfd9dcab15a1f220ce57", "message": "fix formatting issues from GH", "committedDate": "2020-11-12T18:06:59Z", "type": "commit"}, {"oid": "eaa2b3d5e93ae22618976ffae04c0ebeb45c681f", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/eaa2b3d5e93ae22618976ffae04c0ebeb45c681f", "message": "small renaming to a big name", "committedDate": "2020-11-12T18:06:59Z", "type": "commit"}, {"oid": "2d07c945dfda9d651a6a4e00e0c632fbde0a521b", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/2d07c945dfda9d651a6a4e00e0c632fbde0a521b", "message": "small renaming to a big name", "committedDate": "2020-11-12T18:06:59Z", "type": "commit"}, {"oid": "230627d2dc00310edaf1b4e2283aa3bc15ee4f1e", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/230627d2dc00310edaf1b4e2283aa3bc15ee4f1e", "message": "re-order matching check and fix a merge issue", "committedDate": "2020-11-12T18:06:59Z", "type": "commit"}, {"oid": "36d6887c729f0fa745fdfc11532d96223a365968", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/36d6887c729f0fa745fdfc11532d96223a365968", "message": "Update from upstream changes.", "committedDate": "2020-11-12T18:06:59Z", "type": "commit"}, {"oid": "b1bbf16f8d7407e1a4c08c4f21013cb8fbfd3a2d", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b1bbf16f8d7407e1a4c08c4f21013cb8fbfd3a2d", "message": "Update from upstream changes.", "committedDate": "2020-11-12T18:06:59Z", "type": "commit"}, {"oid": "b7f2967926fffa12a13ffceadcd8eccade37ea20", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b7f2967926fffa12a13ffceadcd8eccade37ea20", "message": "Adjust defaults based on the latest behavior", "committedDate": "2020-11-12T18:06:59Z", "type": "commit"}, {"oid": "3a3c72f1206e6090dda691145d76f6d49992d284", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/3a3c72f1206e6090dda691145d76f6d49992d284", "message": "refactor before writing tests", "committedDate": "2020-11-12T18:06:59Z", "type": "commit"}, {"oid": "96785319061fca577e46a026025eecb9e145bcec", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/96785319061fca577e46a026025eecb9e145bcec", "message": "tests for the AggregationChooser and a bugfix they uncovered", "committedDate": "2020-11-12T18:06:59Z", "type": "commit"}, {"oid": "77f5c7fb42b8e2802a3e2c0382aefda452a3d083", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/77f5c7fb42b8e2802a3e2c0382aefda452a3d083", "message": "tests for the ViewRegistry", "committedDate": "2020-11-12T18:44:14Z", "type": "commit"}, {"oid": "77f5c7fb42b8e2802a3e2c0382aefda452a3d083", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/77f5c7fb42b8e2802a3e2c0382aefda452a3d083", "message": "tests for the ViewRegistry", "committedDate": "2020-11-12T18:44:14Z", "type": "forcePushed"}, {"oid": "c85e464ad48c9f85ce608c0fcc7f12de7e857586", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c85e464ad48c9f85ce608c0fcc7f12de7e857586", "message": "Javadoc for the AggregationConfiguration", "committedDate": "2020-11-12T18:51:05Z", "type": "commit"}, {"oid": "778a8a318a0d2aaf2f80e5c2301a6948f6abf4e9", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/778a8a318a0d2aaf2f80e5c2301a6948f6abf4e9", "message": "Add more javadoc.", "committedDate": "2020-11-12T19:08:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMTE4Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037#discussion_r522521182", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /** Does this batcher generate \"delta\" style metrics. The alternative is \"cumulative\". */\n          \n          \n            \n              /** Returns whether this batcher generate \"delta\" style metrics. The alternative is \"cumulative\". */", "author": "anuraaga", "createdAt": "2020-11-13T00:12:45Z", "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/Batcher.java", "diffHunk": "@@ -51,4 +51,7 @@\n    * @return the list of metrics batched in this Batcher.\n    */\n   List<MetricData> completeCollectionCycle();\n+\n+  /** Does this batcher generate \"delta\" style metrics. The alternative is \"cumulative\". */", "originalCommit": "778a8a318a0d2aaf2f80e5c2301a6948f6abf4e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUzMDMzNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037#discussion_r522530335", "bodyText": "I'm going to accept your changes, then regret it when the formatter check fails.  ;)", "author": "jkwatson", "createdAt": "2020-11-13T00:41:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMTE4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "567c16e1c3cdc7f32a814e7b1f5d9e1482245cd6", "chunk": "diff --git a/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/Batcher.java b/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/Batcher.java\nindex 4f254535b..6ebca0771 100644\n--- a/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/Batcher.java\n+++ b/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/Batcher.java\n\n@@ -52,6 +52,6 @@ interface Batcher {\n    */\n   List<MetricData> completeCollectionCycle();\n \n-  /** Does this batcher generate \"delta\" style metrics. The alternative is \"cumulative\". */\n+  /** Returns whether this batcher generate \"delta\" style metrics. The alternative is \"cumulative\". */\n   boolean generatesDeltas();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMTM2NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037#discussion_r522521365", "bodyText": "Think you can use Objects.hashCode instead of your own null checks", "author": "anuraaga", "createdAt": "2020-11-13T00:13:27Z", "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/Batchers.java", "diffHunk": "@@ -155,6 +160,75 @@ public final void batch(Labels labelSet, Aggregator aggregator, boolean unmapped\n               aggregation.getDescriptorType(descriptor.getType(), descriptor.getValueType()),\n               points));\n     }\n+\n+    @Override\n+    public boolean generatesDeltas() {\n+      return delta;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+\n+      AllLabels allLabels = (AllLabels) o;\n+\n+      if (startEpochNanos != allLabels.startEpochNanos) {\n+        return false;\n+      }\n+      if (delta != allLabels.delta) {\n+        return false;\n+      }\n+      if (descriptor != null\n+          ? !descriptor.equals(allLabels.descriptor)\n+          : allLabels.descriptor != null) {\n+        return false;\n+      }\n+      if (aggregation != null\n+          ? !aggregation.equals(allLabels.aggregation)\n+          : allLabels.aggregation != null) {\n+        return false;\n+      }\n+      if (resource != null ? !resource.equals(allLabels.resource) : allLabels.resource != null) {\n+        return false;\n+      }\n+      if (instrumentationLibraryInfo != null\n+          ? !instrumentationLibraryInfo.equals(allLabels.instrumentationLibraryInfo)\n+          : allLabels.instrumentationLibraryInfo != null) {\n+        return false;\n+      }\n+      if (clock != null ? !clock.equals(allLabels.clock) : allLabels.clock != null) {\n+        return false;\n+      }\n+      if (aggregatorFactory != null\n+          ? !aggregatorFactory.equals(allLabels.aggregatorFactory)\n+          : allLabels.aggregatorFactory != null) {\n+        return false;\n+      }\n+      return aggregatorMap != null\n+          ? aggregatorMap.equals(allLabels.aggregatorMap)\n+          : allLabels.aggregatorMap == null;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      int result = descriptor != null ? descriptor.hashCode() : 0;", "originalCommit": "778a8a318a0d2aaf2f80e5c2301a6948f6abf4e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUzMDAxNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037#discussion_r522530016", "bodyText": "I just had IDEA generate this code. Hate to mess with generated code in general.\nWe should document what we want to do with generated equals/hashcode/toString implementations, so we don't have to discuss it. :)", "author": "jkwatson", "createdAt": "2020-11-13T00:39:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMTM2NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMTQzNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037#discussion_r522521435", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /** Create a new configuration with the provided options. */\n          \n          \n            \n              /** Returns a new configuration with the provided options. */", "author": "anuraaga", "createdAt": "2020-11-13T00:13:42Z", "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/AggregationConfiguration.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.metrics.view;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.api.metrics.Instrument;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * An AggregationConfiguration describes how an aggregation should be performed. It includes both an\n+ * {@link Aggregation} which implements what shape of aggregation is created (i.e. histogram, sum,\n+ * minMaxSumCount, etc), and a {@link AggregationConfiguration.Temporality} which describes whether\n+ * aggregations should be reset with every collection interval, or continue to accumulate across\n+ * collection intervals.\n+ */\n+@AutoValue\n+@Immutable\n+public abstract class AggregationConfiguration {\n+\n+  /** Create a new configuration with the provided options. */", "originalCommit": "778a8a318a0d2aaf2f80e5c2301a6948f6abf4e9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "79a29fda734a8321d2a294d8214223f10a13d4fc", "chunk": "diff --git a/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/AggregationConfiguration.java b/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/AggregationConfiguration.java\nindex 4b6328ac3..cb8ad344a 100644\n--- a/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/AggregationConfiguration.java\n+++ b/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/AggregationConfiguration.java\n\n@@ -20,7 +20,7 @@ import javax.annotation.concurrent.Immutable;\n @Immutable\n public abstract class AggregationConfiguration {\n \n-  /** Create a new configuration with the provided options. */\n+  /** Returns a new configuration with the provided options. */\n   public static AggregationConfiguration create(Aggregation aggregation, Temporality temporality) {\n     return new AutoValue_AggregationConfiguration(aggregation, temporality);\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMTQ4OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037#discussion_r522521488", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /** Which {@link Aggregation} should be used for this View. */\n          \n          \n            \n              /** Returns the {@link Aggregation} that should be used for this View. */", "author": "anuraaga", "createdAt": "2020-11-13T00:13:51Z", "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/AggregationConfiguration.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.metrics.view;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.api.metrics.Instrument;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * An AggregationConfiguration describes how an aggregation should be performed. It includes both an\n+ * {@link Aggregation} which implements what shape of aggregation is created (i.e. histogram, sum,\n+ * minMaxSumCount, etc), and a {@link AggregationConfiguration.Temporality} which describes whether\n+ * aggregations should be reset with every collection interval, or continue to accumulate across\n+ * collection intervals.\n+ */\n+@AutoValue\n+@Immutable\n+public abstract class AggregationConfiguration {\n+\n+  /** Create a new configuration with the provided options. */\n+  public static AggregationConfiguration create(Aggregation aggregation, Temporality temporality) {\n+    return new AutoValue_AggregationConfiguration(aggregation, temporality);\n+  }\n+\n+  /** Which {@link Aggregation} should be used for this View. */", "originalCommit": "778a8a318a0d2aaf2f80e5c2301a6948f6abf4e9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "79a29fda734a8321d2a294d8214223f10a13d4fc", "chunk": "diff --git a/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/AggregationConfiguration.java b/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/AggregationConfiguration.java\nindex 4b6328ac3..cb8ad344a 100644\n--- a/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/AggregationConfiguration.java\n+++ b/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/AggregationConfiguration.java\n\n@@ -20,7 +20,7 @@ import javax.annotation.concurrent.Immutable;\n @Immutable\n public abstract class AggregationConfiguration {\n \n-  /** Create a new configuration with the provided options. */\n+  /** Returns a new configuration with the provided options. */\n   public static AggregationConfiguration create(Aggregation aggregation, Temporality temporality) {\n     return new AutoValue_AggregationConfiguration(aggregation, temporality);\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMTUzMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037#discussion_r522521533", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /** What {@link Temporality} should be used for this View (delta vs. cumulative). */\n          \n          \n            \n              /** Returns the {@link Temporality} that should be used for this View (delta vs. cumulative). */", "author": "anuraaga", "createdAt": "2020-11-13T00:14:00Z", "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/AggregationConfiguration.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.metrics.view;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.api.metrics.Instrument;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * An AggregationConfiguration describes how an aggregation should be performed. It includes both an\n+ * {@link Aggregation} which implements what shape of aggregation is created (i.e. histogram, sum,\n+ * minMaxSumCount, etc), and a {@link AggregationConfiguration.Temporality} which describes whether\n+ * aggregations should be reset with every collection interval, or continue to accumulate across\n+ * collection intervals.\n+ */\n+@AutoValue\n+@Immutable\n+public abstract class AggregationConfiguration {\n+\n+  /** Create a new configuration with the provided options. */\n+  public static AggregationConfiguration create(Aggregation aggregation, Temporality temporality) {\n+    return new AutoValue_AggregationConfiguration(aggregation, temporality);\n+  }\n+\n+  /** Which {@link Aggregation} should be used for this View. */\n+  public abstract Aggregation aggregation();\n+\n+  /** What {@link Temporality} should be used for this View (delta vs. cumulative). */", "originalCommit": "778a8a318a0d2aaf2f80e5c2301a6948f6abf4e9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "79a29fda734a8321d2a294d8214223f10a13d4fc", "chunk": "diff --git a/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/AggregationConfiguration.java b/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/AggregationConfiguration.java\nindex 4b6328ac3..cb8ad344a 100644\n--- a/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/AggregationConfiguration.java\n+++ b/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/AggregationConfiguration.java\n\n@@ -20,7 +20,7 @@ import javax.annotation.concurrent.Immutable;\n @Immutable\n public abstract class AggregationConfiguration {\n \n-  /** Create a new configuration with the provided options. */\n+  /** Returns a new configuration with the provided options. */\n   public static AggregationConfiguration create(Aggregation aggregation, Temporality temporality) {\n     return new AutoValue_AggregationConfiguration(aggregation, temporality);\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMTYyMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037#discussion_r522521620", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * What {@link InstrumentType} should be selected. If null, then this specifier will not be used.\n          \n          \n            \n               * Returns {@link InstrumentType} that should be selected. If null, then this specifier will not be used.", "author": "anuraaga", "createdAt": "2020-11-13T00:14:17Z", "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.metrics.view;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.auto.value.extension.memoized.Memoized;\n+import io.opentelemetry.sdk.metrics.common.InstrumentType;\n+import java.util.regex.Pattern;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Provides means for selecting one ore more {@link io.opentelemetry.api.metrics.Instrument}s. Used\n+ * for configuring a aggregations for the specified instruments.\n+ *\n+ * <p>There are two options for selecting instruments: by instrument name and by instrument type.\n+ */\n+@AutoValue\n+@Immutable\n+public abstract class InstrumentSelector {\n+  public static Builder newBuilder() {\n+    return new AutoValue_InstrumentSelector.Builder();\n+  }\n+\n+  /**\n+   * What {@link InstrumentType} should be selected. If null, then this specifier will not be used.", "originalCommit": "778a8a318a0d2aaf2f80e5c2301a6948f6abf4e9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "55537f01beb9e627d7dc48b2e5e4cfd7a41844f3", "chunk": "diff --git a/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java b/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java\nindex 32b6b97ec..838b8c80e 100644\n--- a/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java\n+++ b/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java\n\n@@ -64,7 +64,7 @@ public abstract class InstrumentSelector {\n     /** Provide a specifier for {@link InstrumentType}. */\n     Builder instrumentType(InstrumentType instrumentType);\n \n-    /** Provide a specifier for selecting Instruments by name. */\n+    /** Sets a specifier for selecting Instruments by name. */\n     Builder instrumentNameRegex(String regex);\n \n     /** Create an InstrumentSelector instance. */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMTc2Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037#discussion_r522521767", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * What instrument names should be selected. This is a regex. If null, then this specifier will\n          \n          \n            \n               * Returns which instrument names should be selected. This is a regex. If null, then this specifier will", "author": "anuraaga", "createdAt": "2020-11-13T00:14:39Z", "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.metrics.view;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.auto.value.extension.memoized.Memoized;\n+import io.opentelemetry.sdk.metrics.common.InstrumentType;\n+import java.util.regex.Pattern;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Provides means for selecting one ore more {@link io.opentelemetry.api.metrics.Instrument}s. Used\n+ * for configuring a aggregations for the specified instruments.\n+ *\n+ * <p>There are two options for selecting instruments: by instrument name and by instrument type.\n+ */\n+@AutoValue\n+@Immutable\n+public abstract class InstrumentSelector {\n+  public static Builder newBuilder() {\n+    return new AutoValue_InstrumentSelector.Builder();\n+  }\n+\n+  /**\n+   * What {@link InstrumentType} should be selected. If null, then this specifier will not be used.\n+   */\n+  @Nullable\n+  public abstract InstrumentType instrumentType();\n+\n+  /**\n+   * What instrument names should be selected. This is a regex. If null, then this specifier will", "originalCommit": "778a8a318a0d2aaf2f80e5c2301a6948f6abf4e9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "55537f01beb9e627d7dc48b2e5e4cfd7a41844f3", "chunk": "diff --git a/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java b/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java\nindex 32b6b97ec..838b8c80e 100644\n--- a/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java\n+++ b/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java\n\n@@ -64,7 +64,7 @@ public abstract class InstrumentSelector {\n     /** Provide a specifier for {@link InstrumentType}. */\n     Builder instrumentType(InstrumentType instrumentType);\n \n-    /** Provide a specifier for selecting Instruments by name. */\n+    /** Sets a specifier for selecting Instruments by name. */\n     Builder instrumentNameRegex(String regex);\n \n     /** Create an InstrumentSelector instance. */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMTg0Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037#discussion_r522521843", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * The {@link Pattern} generated by the provided {@link #instrumentNameRegex()}, or null if none\n          \n          \n            \n               * Returns the {@link Pattern} generated by the provided {@link #instrumentNameRegex()}, or null if none", "author": "anuraaga", "createdAt": "2020-11-13T00:14:47Z", "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.metrics.view;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.auto.value.extension.memoized.Memoized;\n+import io.opentelemetry.sdk.metrics.common.InstrumentType;\n+import java.util.regex.Pattern;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Provides means for selecting one ore more {@link io.opentelemetry.api.metrics.Instrument}s. Used\n+ * for configuring a aggregations for the specified instruments.\n+ *\n+ * <p>There are two options for selecting instruments: by instrument name and by instrument type.\n+ */\n+@AutoValue\n+@Immutable\n+public abstract class InstrumentSelector {\n+  public static Builder newBuilder() {\n+    return new AutoValue_InstrumentSelector.Builder();\n+  }\n+\n+  /**\n+   * What {@link InstrumentType} should be selected. If null, then this specifier will not be used.\n+   */\n+  @Nullable\n+  public abstract InstrumentType instrumentType();\n+\n+  /**\n+   * What instrument names should be selected. This is a regex. If null, then this specifier will\n+   * not be used.\n+   */\n+  @Nullable\n+  public abstract String instrumentNameRegex();\n+\n+  /**\n+   * The {@link Pattern} generated by the provided {@link #instrumentNameRegex()}, or null if none", "originalCommit": "778a8a318a0d2aaf2f80e5c2301a6948f6abf4e9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "55537f01beb9e627d7dc48b2e5e4cfd7a41844f3", "chunk": "diff --git a/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java b/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java\nindex 32b6b97ec..838b8c80e 100644\n--- a/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java\n+++ b/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java\n\n@@ -64,7 +64,7 @@ public abstract class InstrumentSelector {\n     /** Provide a specifier for {@link InstrumentType}. */\n     Builder instrumentType(InstrumentType instrumentType);\n \n-    /** Provide a specifier for selecting Instruments by name. */\n+    /** Sets a specifier for selecting Instruments by name. */\n     Builder instrumentNameRegex(String regex);\n \n     /** Create an InstrumentSelector instance. */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMTg3NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037#discussion_r522521874", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /** Whether the InstrumentType been specified. */\n          \n          \n            \n              /** Returns whether the InstrumentType been specified. */", "author": "anuraaga", "createdAt": "2020-11-13T00:14:54Z", "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.metrics.view;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.auto.value.extension.memoized.Memoized;\n+import io.opentelemetry.sdk.metrics.common.InstrumentType;\n+import java.util.regex.Pattern;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Provides means for selecting one ore more {@link io.opentelemetry.api.metrics.Instrument}s. Used\n+ * for configuring a aggregations for the specified instruments.\n+ *\n+ * <p>There are two options for selecting instruments: by instrument name and by instrument type.\n+ */\n+@AutoValue\n+@Immutable\n+public abstract class InstrumentSelector {\n+  public static Builder newBuilder() {\n+    return new AutoValue_InstrumentSelector.Builder();\n+  }\n+\n+  /**\n+   * What {@link InstrumentType} should be selected. If null, then this specifier will not be used.\n+   */\n+  @Nullable\n+  public abstract InstrumentType instrumentType();\n+\n+  /**\n+   * What instrument names should be selected. This is a regex. If null, then this specifier will\n+   * not be used.\n+   */\n+  @Nullable\n+  public abstract String instrumentNameRegex();\n+\n+  /**\n+   * The {@link Pattern} generated by the provided {@link #instrumentNameRegex()}, or null if none\n+   * was specified.\n+   */\n+  @Nullable\n+  @Memoized\n+  public Pattern instrumentNamePattern() {\n+    return instrumentNameRegex() == null ? null : Pattern.compile(instrumentNameRegex());\n+  }\n+\n+  /** Whether the InstrumentType been specified. */", "originalCommit": "778a8a318a0d2aaf2f80e5c2301a6948f6abf4e9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "55537f01beb9e627d7dc48b2e5e4cfd7a41844f3", "chunk": "diff --git a/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java b/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java\nindex 32b6b97ec..838b8c80e 100644\n--- a/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java\n+++ b/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java\n\n@@ -64,7 +64,7 @@ public abstract class InstrumentSelector {\n     /** Provide a specifier for {@link InstrumentType}. */\n     Builder instrumentType(InstrumentType instrumentType);\n \n-    /** Provide a specifier for selecting Instruments by name. */\n+    /** Sets a specifier for selecting Instruments by name. */\n     Builder instrumentNameRegex(String regex);\n \n     /** Create an InstrumentSelector instance. */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMTkyNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037#discussion_r522521925", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /** Whether the instrument name regex been specified. */\n          \n          \n            \n              /** Returns whether the instrument name regex been specified. */", "author": "anuraaga", "createdAt": "2020-11-13T00:15:00Z", "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.metrics.view;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.auto.value.extension.memoized.Memoized;\n+import io.opentelemetry.sdk.metrics.common.InstrumentType;\n+import java.util.regex.Pattern;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Provides means for selecting one ore more {@link io.opentelemetry.api.metrics.Instrument}s. Used\n+ * for configuring a aggregations for the specified instruments.\n+ *\n+ * <p>There are two options for selecting instruments: by instrument name and by instrument type.\n+ */\n+@AutoValue\n+@Immutable\n+public abstract class InstrumentSelector {\n+  public static Builder newBuilder() {\n+    return new AutoValue_InstrumentSelector.Builder();\n+  }\n+\n+  /**\n+   * What {@link InstrumentType} should be selected. If null, then this specifier will not be used.\n+   */\n+  @Nullable\n+  public abstract InstrumentType instrumentType();\n+\n+  /**\n+   * What instrument names should be selected. This is a regex. If null, then this specifier will\n+   * not be used.\n+   */\n+  @Nullable\n+  public abstract String instrumentNameRegex();\n+\n+  /**\n+   * The {@link Pattern} generated by the provided {@link #instrumentNameRegex()}, or null if none\n+   * was specified.\n+   */\n+  @Nullable\n+  @Memoized\n+  public Pattern instrumentNamePattern() {\n+    return instrumentNameRegex() == null ? null : Pattern.compile(instrumentNameRegex());\n+  }\n+\n+  /** Whether the InstrumentType been specified. */\n+  public boolean hasInstrumentType() {\n+    return instrumentType() != null;\n+  }\n+\n+  /** Whether the instrument name regex been specified. */", "originalCommit": "778a8a318a0d2aaf2f80e5c2301a6948f6abf4e9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "55537f01beb9e627d7dc48b2e5e4cfd7a41844f3", "chunk": "diff --git a/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java b/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java\nindex 32b6b97ec..838b8c80e 100644\n--- a/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java\n+++ b/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java\n\n@@ -64,7 +64,7 @@ public abstract class InstrumentSelector {\n     /** Provide a specifier for {@link InstrumentType}. */\n     Builder instrumentType(InstrumentType instrumentType);\n \n-    /** Provide a specifier for selecting Instruments by name. */\n+    /** Sets a specifier for selecting Instruments by name. */\n     Builder instrumentNameRegex(String regex);\n \n     /** Create an InstrumentSelector instance. */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMTk5NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037#discussion_r522521994", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /** Provide a specifier for {@link InstrumentType}. */\n          \n          \n            \n                /** Sets a specifier for {@link InstrumentType}. */", "author": "anuraaga", "createdAt": "2020-11-13T00:15:13Z", "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.metrics.view;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.auto.value.extension.memoized.Memoized;\n+import io.opentelemetry.sdk.metrics.common.InstrumentType;\n+import java.util.regex.Pattern;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Provides means for selecting one ore more {@link io.opentelemetry.api.metrics.Instrument}s. Used\n+ * for configuring a aggregations for the specified instruments.\n+ *\n+ * <p>There are two options for selecting instruments: by instrument name and by instrument type.\n+ */\n+@AutoValue\n+@Immutable\n+public abstract class InstrumentSelector {\n+  public static Builder newBuilder() {\n+    return new AutoValue_InstrumentSelector.Builder();\n+  }\n+\n+  /**\n+   * What {@link InstrumentType} should be selected. If null, then this specifier will not be used.\n+   */\n+  @Nullable\n+  public abstract InstrumentType instrumentType();\n+\n+  /**\n+   * What instrument names should be selected. This is a regex. If null, then this specifier will\n+   * not be used.\n+   */\n+  @Nullable\n+  public abstract String instrumentNameRegex();\n+\n+  /**\n+   * The {@link Pattern} generated by the provided {@link #instrumentNameRegex()}, or null if none\n+   * was specified.\n+   */\n+  @Nullable\n+  @Memoized\n+  public Pattern instrumentNamePattern() {\n+    return instrumentNameRegex() == null ? null : Pattern.compile(instrumentNameRegex());\n+  }\n+\n+  /** Whether the InstrumentType been specified. */\n+  public boolean hasInstrumentType() {\n+    return instrumentType() != null;\n+  }\n+\n+  /** Whether the instrument name regex been specified. */\n+  public boolean hasInstrumentNameRegex() {\n+    return instrumentNameRegex() != null;\n+  }\n+\n+  /** Builder for {@link InstrumentSelector} instances. */\n+  @AutoValue.Builder\n+  public interface Builder {\n+    /** Provide a specifier for {@link InstrumentType}. */", "originalCommit": "778a8a318a0d2aaf2f80e5c2301a6948f6abf4e9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "55537f01beb9e627d7dc48b2e5e4cfd7a41844f3", "chunk": "diff --git a/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java b/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java\nindex 32b6b97ec..838b8c80e 100644\n--- a/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java\n+++ b/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java\n\n@@ -64,7 +64,7 @@ public abstract class InstrumentSelector {\n     /** Provide a specifier for {@link InstrumentType}. */\n     Builder instrumentType(InstrumentType instrumentType);\n \n-    /** Provide a specifier for selecting Instruments by name. */\n+    /** Sets a specifier for selecting Instruments by name. */\n     Builder instrumentNameRegex(String regex);\n \n     /** Create an InstrumentSelector instance. */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMjA0MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037#discussion_r522522040", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /** Provide a specifier for selecting Instruments by name. */\n          \n          \n            \n                /** Sets a specifier for selecting Instruments by name. */", "author": "anuraaga", "createdAt": "2020-11-13T00:15:20Z", "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.metrics.view;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.auto.value.extension.memoized.Memoized;\n+import io.opentelemetry.sdk.metrics.common.InstrumentType;\n+import java.util.regex.Pattern;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Provides means for selecting one ore more {@link io.opentelemetry.api.metrics.Instrument}s. Used\n+ * for configuring a aggregations for the specified instruments.\n+ *\n+ * <p>There are two options for selecting instruments: by instrument name and by instrument type.\n+ */\n+@AutoValue\n+@Immutable\n+public abstract class InstrumentSelector {\n+  public static Builder newBuilder() {\n+    return new AutoValue_InstrumentSelector.Builder();\n+  }\n+\n+  /**\n+   * What {@link InstrumentType} should be selected. If null, then this specifier will not be used.\n+   */\n+  @Nullable\n+  public abstract InstrumentType instrumentType();\n+\n+  /**\n+   * What instrument names should be selected. This is a regex. If null, then this specifier will\n+   * not be used.\n+   */\n+  @Nullable\n+  public abstract String instrumentNameRegex();\n+\n+  /**\n+   * The {@link Pattern} generated by the provided {@link #instrumentNameRegex()}, or null if none\n+   * was specified.\n+   */\n+  @Nullable\n+  @Memoized\n+  public Pattern instrumentNamePattern() {\n+    return instrumentNameRegex() == null ? null : Pattern.compile(instrumentNameRegex());\n+  }\n+\n+  /** Whether the InstrumentType been specified. */\n+  public boolean hasInstrumentType() {\n+    return instrumentType() != null;\n+  }\n+\n+  /** Whether the instrument name regex been specified. */\n+  public boolean hasInstrumentNameRegex() {\n+    return instrumentNameRegex() != null;\n+  }\n+\n+  /** Builder for {@link InstrumentSelector} instances. */\n+  @AutoValue.Builder\n+  public interface Builder {\n+    /** Provide a specifier for {@link InstrumentType}. */\n+    Builder instrumentType(InstrumentType instrumentType);\n+\n+    /** Provide a specifier for selecting Instruments by name. */", "originalCommit": "778a8a318a0d2aaf2f80e5c2301a6948f6abf4e9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "55537f01beb9e627d7dc48b2e5e4cfd7a41844f3", "chunk": "diff --git a/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java b/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java\nindex 32b6b97ec..838b8c80e 100644\n--- a/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java\n+++ b/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java\n\n@@ -64,7 +64,7 @@ public abstract class InstrumentSelector {\n     /** Provide a specifier for {@link InstrumentType}. */\n     Builder instrumentType(InstrumentType instrumentType);\n \n-    /** Provide a specifier for selecting Instruments by name. */\n+    /** Sets a specifier for selecting Instruments by name. */\n     Builder instrumentNameRegex(String regex);\n \n     /** Create an InstrumentSelector instance. */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMjEwNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037#discussion_r522522106", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /** Create an InstrumentSelector instance. */\n          \n          \n            \n                /** Returns an InstrumentSelector instance with the content of this builder. */", "author": "anuraaga", "createdAt": "2020-11-13T00:15:30Z", "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.metrics.view;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.auto.value.extension.memoized.Memoized;\n+import io.opentelemetry.sdk.metrics.common.InstrumentType;\n+import java.util.regex.Pattern;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Provides means for selecting one ore more {@link io.opentelemetry.api.metrics.Instrument}s. Used\n+ * for configuring a aggregations for the specified instruments.\n+ *\n+ * <p>There are two options for selecting instruments: by instrument name and by instrument type.\n+ */\n+@AutoValue\n+@Immutable\n+public abstract class InstrumentSelector {\n+  public static Builder newBuilder() {\n+    return new AutoValue_InstrumentSelector.Builder();\n+  }\n+\n+  /**\n+   * What {@link InstrumentType} should be selected. If null, then this specifier will not be used.\n+   */\n+  @Nullable\n+  public abstract InstrumentType instrumentType();\n+\n+  /**\n+   * What instrument names should be selected. This is a regex. If null, then this specifier will\n+   * not be used.\n+   */\n+  @Nullable\n+  public abstract String instrumentNameRegex();\n+\n+  /**\n+   * The {@link Pattern} generated by the provided {@link #instrumentNameRegex()}, or null if none\n+   * was specified.\n+   */\n+  @Nullable\n+  @Memoized\n+  public Pattern instrumentNamePattern() {\n+    return instrumentNameRegex() == null ? null : Pattern.compile(instrumentNameRegex());\n+  }\n+\n+  /** Whether the InstrumentType been specified. */\n+  public boolean hasInstrumentType() {\n+    return instrumentType() != null;\n+  }\n+\n+  /** Whether the instrument name regex been specified. */\n+  public boolean hasInstrumentNameRegex() {\n+    return instrumentNameRegex() != null;\n+  }\n+\n+  /** Builder for {@link InstrumentSelector} instances. */\n+  @AutoValue.Builder\n+  public interface Builder {\n+    /** Provide a specifier for {@link InstrumentType}. */\n+    Builder instrumentType(InstrumentType instrumentType);\n+\n+    /** Provide a specifier for selecting Instruments by name. */\n+    Builder instrumentNameRegex(String regex);\n+\n+    /** Create an InstrumentSelector instance. */", "originalCommit": "778a8a318a0d2aaf2f80e5c2301a6948f6abf4e9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "55537f01beb9e627d7dc48b2e5e4cfd7a41844f3", "chunk": "diff --git a/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java b/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java\nindex 32b6b97ec..838b8c80e 100644\n--- a/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java\n+++ b/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java\n\n@@ -64,7 +64,7 @@ public abstract class InstrumentSelector {\n     /** Provide a specifier for {@link InstrumentType}. */\n     Builder instrumentType(InstrumentType instrumentType);\n \n-    /** Provide a specifier for selecting Instruments by name. */\n+    /** Sets a specifier for selecting Instruments by name. */\n     Builder instrumentNameRegex(String regex);\n \n     /** Create an InstrumentSelector instance. */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMjE1OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037#discussion_r522522159", "bodyText": "javadoc?", "author": "anuraaga", "createdAt": "2020-11-13T00:15:41Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.view;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.auto.value.extension.memoized.Memoized;\n+import io.opentelemetry.sdk.metrics.common.InstrumentType;\n+import java.util.regex.Pattern;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+@AutoValue\n+@Immutable\n+public abstract class InstrumentSelector {", "originalCommit": "778a8a318a0d2aaf2f80e5c2301a6948f6abf4e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUzMzc2Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037#discussion_r522533762", "bodyText": "It has javadoc...  I've been seeing some real issue with GH not showing the latest version of the code today. Maybe you got hit by that, too?", "author": "jkwatson", "createdAt": "2020-11-13T00:48:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMjE1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU2MTYyOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037#discussion_r522561628", "bodyText": "Checked the PR locally and indeed - weirdest thing I've seen.", "author": "anuraaga", "createdAt": "2020-11-13T02:03:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMjE1OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMjI0Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037#discussion_r522522243", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /** Which {@link Aggregation} should be used for this View. */\n          \n          \n            \n              /** Returns the {@link Aggregation} that should be used for this View. */", "author": "anuraaga", "createdAt": "2020-11-13T00:15:58Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/view/AggregationConfiguration.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.view;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.metrics.Instrument;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+@AutoValue\n+@Immutable\n+public abstract class AggregationConfiguration {\n+\n+  public static AggregationConfiguration create(Aggregation aggregation, Temporality temporality) {\n+    return new AutoValue_AggregationConfiguration(aggregation, temporality);\n+  }\n+\n+  /** Which {@link Aggregation} should be used for this View. */", "originalCommit": "778a8a318a0d2aaf2f80e5c2301a6948f6abf4e9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c7e4b59be6730eebbc068902436d494fb84d1b1b", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/metrics/view/AggregationConfiguration.java b/sdk/src/main/java/io/opentelemetry/sdk/metrics/view/AggregationConfiguration.java\nindex b1f35be59..9d1e213cb 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/metrics/view/AggregationConfiguration.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/metrics/view/AggregationConfiguration.java\n\n@@ -29,7 +29,7 @@ public abstract class AggregationConfiguration {\n     return new AutoValue_AggregationConfiguration(aggregation, temporality);\n   }\n \n-  /** Which {@link Aggregation} should be used for this View. */\n+  /** Returns the {@link Aggregation} that should be used for this View. */\n   @Nullable\n   public abstract Aggregation aggregation();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMjI3OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037#discussion_r522522279", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /** What {@link Temporality} should be used for this View (delta vs. cumulative). */\n          \n          \n            \n              /** Returns the {@link Temporality} that should be used for this View (delta vs. cumulative). */", "author": "anuraaga", "createdAt": "2020-11-13T00:16:05Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/view/AggregationConfiguration.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.view;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.metrics.Instrument;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+@AutoValue\n+@Immutable\n+public abstract class AggregationConfiguration {\n+\n+  public static AggregationConfiguration create(Aggregation aggregation, Temporality temporality) {\n+    return new AutoValue_AggregationConfiguration(aggregation, temporality);\n+  }\n+\n+  /** Which {@link Aggregation} should be used for this View. */\n+  @Nullable\n+  public abstract Aggregation aggregation();\n+\n+  /** What {@link Temporality} should be used for this View (delta vs. cumulative). */", "originalCommit": "778a8a318a0d2aaf2f80e5c2301a6948f6abf4e9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c7e4b59be6730eebbc068902436d494fb84d1b1b", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/metrics/view/AggregationConfiguration.java b/sdk/src/main/java/io/opentelemetry/sdk/metrics/view/AggregationConfiguration.java\nindex b1f35be59..9d1e213cb 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/metrics/view/AggregationConfiguration.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/metrics/view/AggregationConfiguration.java\n\n@@ -29,7 +29,7 @@ public abstract class AggregationConfiguration {\n     return new AutoValue_AggregationConfiguration(aggregation, temporality);\n   }\n \n-  /** Which {@link Aggregation} should be used for this View. */\n+  /** Returns the {@link Aggregation} that should be used for this View. */\n   @Nullable\n   public abstract Aggregation aggregation();\n \n"}}, {"oid": "567c16e1c3cdc7f32a814e7b1f5d9e1482245cd6", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/567c16e1c3cdc7f32a814e7b1f5d9e1482245cd6", "message": "Update sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/Batcher.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>", "committedDate": "2020-11-13T00:41:06Z", "type": "commit"}, {"oid": "79a29fda734a8321d2a294d8214223f10a13d4fc", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/79a29fda734a8321d2a294d8214223f10a13d4fc", "message": "Update sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/AggregationConfiguration.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>", "committedDate": "2020-11-13T00:41:15Z", "type": "commit"}, {"oid": "25d546478f4f1edd7c8b673d68cd524f98b489e0", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/25d546478f4f1edd7c8b673d68cd524f98b489e0", "message": "Update sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/AggregationConfiguration.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>", "committedDate": "2020-11-13T00:41:26Z", "type": "commit"}, {"oid": "55537f01beb9e627d7dc48b2e5e4cfd7a41844f3", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/55537f01beb9e627d7dc48b2e5e4cfd7a41844f3", "message": "Update sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>", "committedDate": "2020-11-13T00:41:35Z", "type": "commit"}, {"oid": "02a83241f2ad995d702b7c4dffe78646b87a6fbf", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/02a83241f2ad995d702b7c4dffe78646b87a6fbf", "message": "Update sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>", "committedDate": "2020-11-13T00:41:47Z", "type": "commit"}, {"oid": "c7e4b59be6730eebbc068902436d494fb84d1b1b", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c7e4b59be6730eebbc068902436d494fb84d1b1b", "message": "Update sdk/src/main/java/io/opentelemetry/sdk/metrics/view/AggregationConfiguration.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>", "committedDate": "2020-11-13T00:41:58Z", "type": "commit"}, {"oid": "fd42ee340fc971fda17b8bd2e7fcd78a05cc49ff", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/fd42ee340fc971fda17b8bd2e7fcd78a05cc49ff", "message": "Update sdk/src/main/java/io/opentelemetry/sdk/metrics/view/AggregationConfiguration.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>", "committedDate": "2020-11-13T00:42:10Z", "type": "commit"}, {"oid": "28b763619ef4321bc47328ef9bba3bbe2414f8d8", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/28b763619ef4321bc47328ef9bba3bbe2414f8d8", "message": "Update sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/AggregationConfiguration.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>", "committedDate": "2020-11-13T00:42:27Z", "type": "commit"}, {"oid": "444c3b9ddf35920ee98c1a656486fe54a8f150a0", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/444c3b9ddf35920ee98c1a656486fe54a8f150a0", "message": "Update sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>", "committedDate": "2020-11-13T00:42:43Z", "type": "commit"}, {"oid": "5e94bc6b0a45c3b2c1d198b5fa4feb7778df2c80", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5e94bc6b0a45c3b2c1d198b5fa4feb7778df2c80", "message": "Update sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>", "committedDate": "2020-11-13T00:42:57Z", "type": "commit"}, {"oid": "41180b2d040688e1be9756f8d1a6e9e7d51f7fd0", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/41180b2d040688e1be9756f8d1a6e9e7d51f7fd0", "message": "Update sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>", "committedDate": "2020-11-13T00:43:12Z", "type": "commit"}, {"oid": "bd60c114277c2a4068e9aea2aa82a4bda1f70de6", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/bd60c114277c2a4068e9aea2aa82a4bda1f70de6", "message": "Update sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>", "committedDate": "2020-11-13T00:43:47Z", "type": "commit"}, {"oid": "d99012d9a6aaa41484ba7d5cda320d1572eaabc6", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d99012d9a6aaa41484ba7d5cda320d1572eaabc6", "message": "Update sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>", "committedDate": "2020-11-13T00:44:06Z", "type": "commit"}, {"oid": "5d783b324286cd972a8229b25b0cd6b017e9de2c", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5d783b324286cd972a8229b25b0cd6b017e9de2c", "message": "Update sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>", "committedDate": "2020-11-13T00:44:43Z", "type": "commit"}, {"oid": "816c35cfa9217f02ede1e2630f1c30358dffcd2f", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/816c35cfa9217f02ede1e2630f1c30358dffcd2f", "message": "fix formatting issues", "committedDate": "2020-11-13T00:53:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU2ODM5OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037#discussion_r522568398", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * for configuring a aggregations for the specified instruments.\n          \n          \n            \n             * for configuring aggregations for the specified instruments.", "author": "jkwatson", "createdAt": "2020-11-13T02:16:30Z", "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.metrics.view;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.auto.value.extension.memoized.Memoized;\n+import io.opentelemetry.sdk.metrics.common.InstrumentType;\n+import java.util.regex.Pattern;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Provides means for selecting one ore more {@link io.opentelemetry.api.metrics.Instrument}s. Used\n+ * for configuring a aggregations for the specified instruments.", "originalCommit": "816c35cfa9217f02ede1e2630f1c30358dffcd2f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2f5862ca496d187709abdb371cbab55d41cab43a", "chunk": "diff --git a/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java b/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java\nindex e257f24fc..fa58d52da 100644\n--- a/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java\n+++ b/sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java\n\n@@ -14,7 +14,7 @@ import javax.annotation.concurrent.Immutable;\n \n /**\n  * Provides means for selecting one ore more {@link io.opentelemetry.api.metrics.Instrument}s. Used\n- * for configuring a aggregations for the specified instruments.\n+ * for configuring aggregations for the specified instruments.\n  *\n  * <p>There are two options for selecting instruments: by instrument name and by instrument type.\n  */\n"}}, {"oid": "2f5862ca496d187709abdb371cbab55d41cab43a", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/2f5862ca496d187709abdb371cbab55d41cab43a", "message": "Update sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java", "committedDate": "2020-11-13T02:16:36Z", "type": "commit"}]}