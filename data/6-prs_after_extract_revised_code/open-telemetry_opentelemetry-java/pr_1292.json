{"pr_number": 1292, "pr_title": "added testcontainers integration test to verify jaeger example app works in Java 7", "pr_createdAt": "2020-05-30T10:39:38Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1292", "timeline": [{"oid": "065195344d88ebdb4938800b2717ab5a06a8c3bb", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/065195344d88ebdb4938800b2717ab5a06a8c3bb", "message": "added testcontainers test that runs jaeger example app in jre7 docker image and verifies trace is received in jaeger", "committedDate": "2020-05-30T09:48:19Z", "type": "commit"}, {"oid": "99963e1b2afbce3775162f1084d9d0899559eb9f", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/99963e1b2afbce3775162f1084d9d0899559eb9f", "message": "Merge branch 'master' into java_7_integration_test", "committedDate": "2020-05-30T09:49:33Z", "type": "commit"}, {"oid": "fcd1142b360a82400b92a2c3ae740620eb3f4557", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/fcd1142b360a82400b92a2c3ae740620eb3f4557", "message": "added comments, updated readme", "committedDate": "2020-05-30T10:22:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg3OTYxNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1292#discussion_r432879616", "bodyText": "Consider using withCopyFileToContainer and withCmd on GenericContainer instead.\nThere is no ned to build an image here and it will only add an overhead to the startup :)", "author": "bsideup", "createdAt": "2020-05-30T19:10:44Z", "path": "examples/jaeger/src/test/java/io/opentelemetry/example/JaegerExampleIntegrationTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package io.opentelemetry.example;\n+\n+import static io.restassured.RestAssured.given;\n+\n+import io.restassured.http.ContentType;\n+import io.restassured.response.Response;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.TimeUnit;\n+import org.awaitility.Awaitility;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.wait.strategy.HttpWaitStrategy;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+import org.testcontainers.images.builder.ImageFromDockerfile;\n+\n+/**\n+ * Testcontainers integration test to verify that the trace generated by the Jaeger example app is\n+ * stored in an instance of Jaeger.\n+ *\n+ * <p>A Jaeger-all-in-one container is started and a Docker image is created on-the-fly which\n+ * contains the executable JAR of the example app (but not started). The test starts the example app\n+ * container before verifying that the trace is received by Jaeger.\n+ */\n+@RunWith(JUnit4.class)\n+public class JaegerExampleIntegrationTest {\n+\n+  private static final String ARCHIVE_NAME = System.getProperty(\"archive.name\");\n+  private static final String APP_NAME = \"jaeger-example-app.jar\";\n+\n+  private static final int QUERY_PORT = 16686;\n+  private static final int COLLECTOR_PORT = 14250;\n+  private static final String JAEGER_VERSION = \"1.17\";\n+  private static final String SERVICE_NAME = \"example\";\n+  private static final String JAEGER_HOSTNAME = \"jaeger\";\n+  private static final String JAEGER_URL = \"http://localhost\";\n+\n+  private static final Network network = Network.newNetwork();\n+\n+  @ClassRule\n+  public static GenericContainer jaegerContainer =\n+      new GenericContainer<>(\"jaegertracing/all-in-one:\" + JAEGER_VERSION)\n+          .withNetwork(network)\n+          .withNetworkAliases(JAEGER_HOSTNAME)\n+          .withExposedPorts(COLLECTOR_PORT, QUERY_PORT)\n+          .waitingFor(new HttpWaitStrategy().forPath(\"/\"));\n+\n+  private static GenericContainer jaegerExampleAppContainer =\n+      new GenericContainer(buildJaegerExampleAppImage())\n+          .withNetwork(network)\n+          .waitingFor(Wait.forLogMessage(\".*Bye.*\", 1));\n+\n+  private static ImageFromDockerfile buildJaegerExampleAppImage() {", "originalCommit": "fcd1142b360a82400b92a2c3ae740620eb3f4557", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyNjIxNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1292#discussion_r432926215", "bodyText": "thats a good spot! thanks!", "author": "jarebudev", "createdAt": "2020-05-31T09:08:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg3OTYxNg=="}], "type": "inlineReview", "revised_code": {"commit": "6fe38cc8f3b9196af2359f5156028651c5ac71d9", "chunk": "diff --git a/examples/jaeger/src/test/java/io/opentelemetry/example/JaegerExampleIntegrationTest.java b/examples/jaeger/src/test/java/io/opentelemetry/example/JaegerExampleIntegrationTest.java\nindex a1113847e..9ec896323 100644\n--- a/examples/jaeger/src/test/java/io/opentelemetry/example/JaegerExampleIntegrationTest.java\n+++ b/examples/jaeger/src/test/java/io/opentelemetry/example/JaegerExampleIntegrationTest.java\n\n@@ -4,12 +4,12 @@ import static io.restassured.RestAssured.given;\n \n import io.restassured.http.ContentType;\n import io.restassured.response.Response;\n-import java.nio.file.Paths;\n import java.util.Map;\n import java.util.concurrent.Callable;\n import java.util.concurrent.TimeUnit;\n import org.awaitility.Awaitility;\n import org.junit.ClassRule;\n+import org.junit.Rule;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.junit.runners.JUnit4;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg3OTc0OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1292#discussion_r432879748", "bodyText": "any reason you did not annotate jaegerExampleAppContainer with @Rule or @ClassRule?\nThe container will get removed, eventually (thanks to Testcontainers' two phase cleanup: JVM shutdown hook and Ryuk - a sidecar container), but here you only start it from this test and then never call stop, so it will last until JVM's termination", "author": "bsideup", "createdAt": "2020-05-30T19:12:50Z", "path": "examples/jaeger/src/test/java/io/opentelemetry/example/JaegerExampleIntegrationTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package io.opentelemetry.example;\n+\n+import static io.restassured.RestAssured.given;\n+\n+import io.restassured.http.ContentType;\n+import io.restassured.response.Response;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.TimeUnit;\n+import org.awaitility.Awaitility;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.wait.strategy.HttpWaitStrategy;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+import org.testcontainers.images.builder.ImageFromDockerfile;\n+\n+/**\n+ * Testcontainers integration test to verify that the trace generated by the Jaeger example app is\n+ * stored in an instance of Jaeger.\n+ *\n+ * <p>A Jaeger-all-in-one container is started and a Docker image is created on-the-fly which\n+ * contains the executable JAR of the example app (but not started). The test starts the example app\n+ * container before verifying that the trace is received by Jaeger.\n+ */\n+@RunWith(JUnit4.class)\n+public class JaegerExampleIntegrationTest {\n+\n+  private static final String ARCHIVE_NAME = System.getProperty(\"archive.name\");\n+  private static final String APP_NAME = \"jaeger-example-app.jar\";\n+\n+  private static final int QUERY_PORT = 16686;\n+  private static final int COLLECTOR_PORT = 14250;\n+  private static final String JAEGER_VERSION = \"1.17\";\n+  private static final String SERVICE_NAME = \"example\";\n+  private static final String JAEGER_HOSTNAME = \"jaeger\";\n+  private static final String JAEGER_URL = \"http://localhost\";\n+\n+  private static final Network network = Network.newNetwork();\n+\n+  @ClassRule\n+  public static GenericContainer jaegerContainer =\n+      new GenericContainer<>(\"jaegertracing/all-in-one:\" + JAEGER_VERSION)\n+          .withNetwork(network)\n+          .withNetworkAliases(JAEGER_HOSTNAME)\n+          .withExposedPorts(COLLECTOR_PORT, QUERY_PORT)\n+          .waitingFor(new HttpWaitStrategy().forPath(\"/\"));\n+\n+  private static GenericContainer jaegerExampleAppContainer =\n+      new GenericContainer(buildJaegerExampleAppImage())\n+          .withNetwork(network)\n+          .waitingFor(Wait.forLogMessage(\".*Bye.*\", 1));\n+\n+  private static ImageFromDockerfile buildJaegerExampleAppImage() {\n+    return new ImageFromDockerfile()\n+        .withFileFromFile(ARCHIVE_NAME, Paths.get(ARCHIVE_NAME).toFile())\n+        .withDockerfileFromBuilder(\n+            builder ->\n+                builder\n+                    .from(\"openjdk:7u111-jre-alpine\")\n+                    .copy(ARCHIVE_NAME, \"/app/\" + APP_NAME)\n+                    .entryPoint(\n+                        \"java\",\n+                        \"-cp\",\n+                        \"/app/\" + APP_NAME,\n+                        \"io.opentelemetry.example.JaegerExample\",\n+                        JAEGER_HOSTNAME,\n+                        Integer.toString(COLLECTOR_PORT))\n+                    .build());\n+  }\n+\n+  @Test\n+  public void testJaegerExampleAppIntegration() {\n+    jaegerExampleAppContainer.start();", "originalCommit": "fcd1142b360a82400b92a2c3ae740620eb3f4557", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyNjc5NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1292#discussion_r432926794", "bodyText": "Ah I was going to change that :)\nAs its only doing one test, I've changed it to a @Rule so that its started before the test, the Jaeger container is still started as a @ClassRule so to guarantee starting in the correct order.", "author": "jarebudev", "createdAt": "2020-05-31T09:17:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg3OTc0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA1NzQ2MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1292#discussion_r433057461", "bodyText": "to guarantee starting in the correct order\n\nIn case you need to enforce the order, there is also GenericContainer#dependsOn for that :)", "author": "bsideup", "createdAt": "2020-06-01T06:08:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg3OTc0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ4ODIyMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1292#discussion_r433488223", "bodyText": "thanks that does the job!", "author": "jarebudev", "createdAt": "2020-06-01T21:02:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg3OTc0OA=="}], "type": "inlineReview", "revised_code": {"commit": "6fe38cc8f3b9196af2359f5156028651c5ac71d9", "chunk": "diff --git a/examples/jaeger/src/test/java/io/opentelemetry/example/JaegerExampleIntegrationTest.java b/examples/jaeger/src/test/java/io/opentelemetry/example/JaegerExampleIntegrationTest.java\nindex a1113847e..9ec896323 100644\n--- a/examples/jaeger/src/test/java/io/opentelemetry/example/JaegerExampleIntegrationTest.java\n+++ b/examples/jaeger/src/test/java/io/opentelemetry/example/JaegerExampleIntegrationTest.java\n\n@@ -4,12 +4,12 @@ import static io.restassured.RestAssured.given;\n \n import io.restassured.http.ContentType;\n import io.restassured.response.Response;\n-import java.nio.file.Paths;\n import java.util.Map;\n import java.util.concurrent.Callable;\n import java.util.concurrent.TimeUnit;\n import org.awaitility.Awaitility;\n import org.junit.ClassRule;\n+import org.junit.Rule;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.junit.runners.JUnit4;\n"}}, {"oid": "6fe38cc8f3b9196af2359f5156028651c5ac71d9", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/6fe38cc8f3b9196af2359f5156028651c5ac71d9", "message": "changed to add file to base image rather than building intermediate image and container now managed as a test rule", "committedDate": "2020-05-31T09:22:02Z", "type": "commit"}, {"oid": "5c95fec61b708183de4af438eda4399dae46ace6", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5c95fec61b708183de4af438eda4399dae46ace6", "message": "changed startup order of containers to use dependsOn rather than rule, and correct bom import scope", "committedDate": "2020-06-01T20:53:15Z", "type": "commit"}, {"oid": "fada60415fe760aec4643ecafb15e3cc8fe26d0c", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/fada60415fe760aec4643ecafb15e3cc8fe26d0c", "message": "added integration_tests module, reverted prev changes to examples and moved to new modules", "committedDate": "2020-06-12T22:33:45Z", "type": "commit"}, {"oid": "cf5024443de8d5e87296516c6caffaa38294087b", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/cf5024443de8d5e87296516c6caffaa38294087b", "message": "Merge branch 'master' into java_7_integration_test", "committedDate": "2020-06-12T22:35:26Z", "type": "commit"}, {"oid": "1689dce523de04e5ab1bb10d65bc4c3a1bb62d5d", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1689dce523de04e5ab1bb10d65bc4c3a1bb62d5d", "message": "correct formatting", "committedDate": "2020-06-12T22:47:13Z", "type": "commit"}, {"oid": "74571dadef91287aeceaa8f4edaa60f667266b59", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/74571dadef91287aeceaa8f4edaa60f667266b59", "message": "fix dependencies removed compile scope", "committedDate": "2020-06-13T22:26:50Z", "type": "commit"}]}