{"pr_number": 740, "pr_title": "Create a labelset with an arbitrary number of key/value pairs", "pr_createdAt": "2020-01-08T23:41:03Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/740", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgzMjkwMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/740#discussion_r364832900", "bodyText": "Consider to remove the other versions for the moment?", "author": "bogdandrutu", "createdAt": "2020-01-09T16:21:35Z", "path": "api/src/test/java/io/opentelemetry/OpenTelemetryTest.java", "diffHunk": "@@ -393,6 +395,12 @@ public LabelSet createLabelSet(\n       return null;\n     }\n \n+    @Nullable\n+    @Override\n+    public LabelSet createLabelSet(@Nonnull Map<String, String> labels) {", "originalCommit": "95b5438590ddb3c784227189aa96163e1f56d808", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgzOTYyOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/740#discussion_r364839628", "bodyText": "I'm ok with that if everyone else is. It's definitely a simpler API to have only one method. We can add more over time if people ask for it. The only consideration is the no-op case, where we'd now be forcing people to create an extra Map which will then be thrown away.\nWhat about having this one, plus a varargs version that requires key-value pairs of arguments, which should cover all possible cases, and let the no-op case not require creation of extra garbage when it's not needed?", "author": "jkwatson", "createdAt": "2020-01-09T16:33:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgzMjkwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg0MzcxMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/740#discussion_r364843710", "bodyText": "varargs version creates an extra array as well. Can you show me a short code how you want the varargs version that requires key-value pairs of arguments?", "author": "bogdandrutu", "createdAt": "2020-01-09T16:41:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgzMjkwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg1MDExOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/740#discussion_r364850119", "bodyText": "A single String[] is a very very small amount of memory compared to a Map, and all of the overhead of all the Map.Entry instances (and the buckets, etc).\nI had an example of what this would look like in an earlier version of this PR. :) Let me dig it up.\nThis was the varargs implementation in LabelSetSdk:\nstatic LabelSet create(String... keyValuePairs) {\n    if (keyValuePairs.length == 0) {\n      return EMPTY;\n    }\n    Preconditions.checkArgument(\n        (keyValuePairs.length % 2) == 0,\n        \"LabelSets must be created with the same number of keys as values.\");\n    Map<String, String> data = new HashMap<>(keyValuePairs.length / 2);\n    for (int i = 0; i < keyValuePairs.length; i++) {\n      String key = keyValuePairs[i];\n      data.put(key, keyValuePairs[++i]);\n    }\n    return new AutoValue_SdkLabelSet(Collections.unmodifiableMap(data));\n  }", "author": "jkwatson", "createdAt": "2020-01-09T16:51:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgzMjkwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg1MDQyMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/740#discussion_r364850422", "bodyText": "note: this would be way simpler with java 8 streams.  ;)", "author": "jkwatson", "createdAt": "2020-01-09T16:52:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgzMjkwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg1MTkwNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/740#discussion_r364851905", "bodyText": "I think I like that. Does anybody have experience with varargs API? Are there any pros/cons that we should consider?", "author": "bogdandrutu", "createdAt": "2020-01-09T16:54:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgzMjkwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg3Nzg3MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/740#discussion_r364877871", "bodyText": "The big thing to watch out for is that you really need to make sure you don't try to mix varargs and lists in overloaded methods. Other than that, it's very easy to use, assuming its well documented. I'd love other opinions, though!", "author": "jkwatson", "createdAt": "2020-01-09T17:51:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgzMjkwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg5MTMzMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/740#discussion_r364891333", "bodyText": "as a note, if we have a varargs based creator, we can get rid of the emptyLabelSet method on the API, since we get that for free with the empty varargs call.", "author": "jkwatson", "createdAt": "2020-01-09T18:23:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgzMjkwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk0NTc4OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/740#discussion_r364945788", "bodyText": "I think you can make the change for the moment until we wait for feedback.", "author": "bogdandrutu", "createdAt": "2020-01-09T20:30:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgzMjkwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk0Nzg0Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/740#discussion_r364947842", "bodyText": "ok, I'll put in varargs and we can see how it looks", "author": "jkwatson", "createdAt": "2020-01-09T20:35:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgzMjkwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk2OTQ3Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/740#discussion_r364969476", "bodyText": "belay that. I'll do varargs as a followup PR", "author": "jkwatson", "createdAt": "2020-01-09T21:31:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgzMjkwMA=="}], "type": "inlineReview", "revised_code": {"commit": "cab6e2c1280d55ee609979edb42cd3f7d9b35da7", "chunk": "diff --git a/api/src/test/java/io/opentelemetry/OpenTelemetryTest.java b/api/src/test/java/io/opentelemetry/OpenTelemetryTest.java\nindex f38785c4a..d69b9010f 100644\n--- a/api/src/test/java/io/opentelemetry/OpenTelemetryTest.java\n+++ b/api/src/test/java/io/opentelemetry/OpenTelemetryTest.java\n\n@@ -395,9 +394,8 @@ public class OpenTelemetryTest {\n       return null;\n     }\n \n-    @Nullable\n     @Override\n-    public LabelSet createLabelSet(@Nonnull Map<String, String> labels) {\n+    public LabelSet createLabelSet(Map<String, String> labels) {\n       return null;\n     }\n \n"}}, {"oid": "cab6e2c1280d55ee609979edb42cd3f7d9b35da7", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/cab6e2c1280d55ee609979edb42cd3f7d9b35da7", "message": "add a method to create a labelset with an arbitrary number of labels.", "committedDate": "2020-01-09T21:05:15Z", "type": "commit"}, {"oid": "95155f389d0cae897bf6f5f97e9753fd3f10cf51", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/95155f389d0cae897bf6f5f97e9753fd3f10cf51", "message": "add notnull annotations", "committedDate": "2020-01-09T21:05:15Z", "type": "commit"}, {"oid": "b8c84e912499727722a693496522557fe8144c9b", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b8c84e912499727722a693496522557fe8144c9b", "message": "rebase for SDK implementation", "committedDate": "2020-01-09T21:31:08Z", "type": "commit"}, {"oid": "b8c84e912499727722a693496522557fe8144c9b", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b8c84e912499727722a693496522557fe8144c9b", "message": "rebase for SDK implementation", "committedDate": "2020-01-09T21:31:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM0MDE1Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/740#discussion_r365340152", "bodyText": "We don't use Nonnull anywhere else, probably just remove it for the moment.", "author": "bogdandrutu", "createdAt": "2020-01-10T17:13:45Z", "path": "api/src/main/java/io/opentelemetry/metrics/DefaultMeter.java", "diffHunk": "@@ -164,6 +165,12 @@ public LabelSet createLabelSet(\n     return NoopLabelSet.INSTANCE;\n   }\n \n+  @Override\n+  public LabelSet createLabelSet(@Nonnull Map<String, String> labels) {", "originalCommit": "b8c84e912499727722a693496522557fe8144c9b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM0MzI1OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/740#discussion_r365343258", "bodyText": "done", "author": "jkwatson", "createdAt": "2020-01-10T17:21:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM0MDE1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "7110b9733a1e4443283b0e268dd0c65c51defbc5", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/metrics/DefaultMeter.java b/api/src/main/java/io/opentelemetry/metrics/DefaultMeter.java\nindex 64a4b3e59..7d551899f 100644\n--- a/api/src/main/java/io/opentelemetry/metrics/DefaultMeter.java\n+++ b/api/src/main/java/io/opentelemetry/metrics/DefaultMeter.java\n\n@@ -166,7 +166,7 @@ public final class DefaultMeter implements Meter {\n   }\n \n   @Override\n-  public LabelSet createLabelSet(@Nonnull Map<String, String> labels) {\n+  public LabelSet createLabelSet(Map<String, String> labels) {\n     Utils.checkNotNull(labels, \"labels\");\n     return NoopLabelSet.INSTANCE;\n   }\n"}}, {"oid": "7110b9733a1e4443283b0e268dd0c65c51defbc5", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/7110b9733a1e4443283b0e268dd0c65c51defbc5", "message": "remove Nonnull annotations", "committedDate": "2020-01-10T17:19:29Z", "type": "commit"}]}