{"pr_number": 898, "pr_title": "Introduce an abstract super class for aggregators.", "pr_createdAt": "2020-02-20T18:27:08Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/898", "timeline": [{"oid": "de18a5cc732164a3896a04680e80f1c3b323d145", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/de18a5cc732164a3896a04680e80f1c3b323d145", "message": "Introduce an abstract super class for aggregators.\nThis is to hold the boilerplate logic and get it out of the specific implementations.", "committedDate": "2020-02-20T18:26:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE3OTcxMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/898#discussion_r382179712", "bodyText": "I heard once that getClass is expensive, maybe we do cache that in a constant for this.", "author": "bogdandrutu", "createdAt": "2020-02-20T18:29:36Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/AbstractAggregator.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.aggregator;\n+\n+public abstract class AbstractAggregator implements Aggregator {\n+\n+  @Override\n+  public void mergeToAndReset(Aggregator other) {\n+    if (!other.getClass().isAssignableFrom(this.getClass())) {", "originalCommit": "de18a5cc732164a3896a04680e80f1c3b323d145", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE4NDYwMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/898#discussion_r382184601", "bodyText": "I am probably wrong, we need benchmarks :) later maybe", "author": "bogdandrutu", "createdAt": "2020-02-20T18:39:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE3OTcxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE5MzM5Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/898#discussion_r382193392", "bodyText": "heh. yeah, I think getClass() is very fast, but benchmarks can show the truth.", "author": "jkwatson", "createdAt": "2020-02-20T18:56:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE3OTcxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE5OTUxMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/898#discussion_r382199510", "bodyText": "also, I had this logic backwards. fixed now.", "author": "jkwatson", "createdAt": "2020-02-20T19:07:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE3OTcxMg=="}], "type": "inlineReview", "revised_code": {"commit": "a1d4a04bf492d49e9e1779321863d5ec364862e1", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/AbstractAggregator.java b/sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/AbstractAggregator.java\nindex b68d1c155..752e21c0a 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/AbstractAggregator.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/AbstractAggregator.java\n\n@@ -16,11 +16,11 @@\n \n package io.opentelemetry.sdk.metrics.aggregator;\n \n-public abstract class AbstractAggregator implements Aggregator {\n+abstract class AbstractAggregator implements Aggregator {\n \n   @Override\n   public void mergeToAndReset(Aggregator other) {\n-    if (!other.getClass().isAssignableFrom(this.getClass())) {\n+    if (!this.getClass().isAssignableFrom(other.getClass())) {\n       return;\n     }\n     doMergeAndReset(other);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE4MTExNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/898#discussion_r382181116", "bodyText": "Does this need to be public?", "author": "bogdandrutu", "createdAt": "2020-02-20T18:32:22Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/AbstractAggregator.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.aggregator;\n+\n+public abstract class AbstractAggregator implements Aggregator {\n+\n+  @Override\n+  public void mergeToAndReset(Aggregator other) {\n+    if (!other.getClass().isAssignableFrom(this.getClass())) {\n+      return;\n+    }\n+    doMergeAndReset(other);\n+  }\n+\n+  /**\n+   * Merges the current value into the given {@code aggregator} and resets the current value in this\n+   * {@code Aggregator}.\n+   *\n+   * <p>If this method is called, you can assume that the passed in aggregator can be cast to your\n+   * self-type.\n+   *\n+   * @param aggregator The aggregator to merge with.\n+   */\n+  public abstract void doMergeAndReset(Aggregator aggregator);", "originalCommit": "de18a5cc732164a3896a04680e80f1c3b323d145", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE5MzgwNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/898#discussion_r382193805", "bodyText": "it does not. will fix.", "author": "jkwatson", "createdAt": "2020-02-20T18:57:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE4MTExNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE5OTMxNw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/898#discussion_r382199317", "bodyText": "fixed", "author": "jkwatson", "createdAt": "2020-02-20T19:07:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE4MTExNg=="}], "type": "inlineReview", "revised_code": {"commit": "a1d4a04bf492d49e9e1779321863d5ec364862e1", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/AbstractAggregator.java b/sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/AbstractAggregator.java\nindex b68d1c155..752e21c0a 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/AbstractAggregator.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/AbstractAggregator.java\n\n@@ -16,11 +16,11 @@\n \n package io.opentelemetry.sdk.metrics.aggregator;\n \n-public abstract class AbstractAggregator implements Aggregator {\n+abstract class AbstractAggregator implements Aggregator {\n \n   @Override\n   public void mergeToAndReset(Aggregator other) {\n-    if (!other.getClass().isAssignableFrom(this.getClass())) {\n+    if (!this.getClass().isAssignableFrom(other.getClass())) {\n       return;\n     }\n     doMergeAndReset(other);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE4MTIwMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/898#discussion_r382181201", "bodyText": "Does this need to be public?", "author": "bogdandrutu", "createdAt": "2020-02-20T18:32:33Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/AbstractAggregator.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.aggregator;\n+\n+public abstract class AbstractAggregator implements Aggregator {", "originalCommit": "de18a5cc732164a3896a04680e80f1c3b323d145", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE5Mzg0MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/898#discussion_r382193840", "bodyText": "ditto", "author": "jkwatson", "createdAt": "2020-02-20T18:57:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE4MTIwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE5OTM2Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/898#discussion_r382199362", "bodyText": "fixed", "author": "jkwatson", "createdAt": "2020-02-20T19:07:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE4MTIwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "a1d4a04bf492d49e9e1779321863d5ec364862e1", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/AbstractAggregator.java b/sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/AbstractAggregator.java\nindex b68d1c155..752e21c0a 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/AbstractAggregator.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/AbstractAggregator.java\n\n@@ -16,11 +16,11 @@\n \n package io.opentelemetry.sdk.metrics.aggregator;\n \n-public abstract class AbstractAggregator implements Aggregator {\n+abstract class AbstractAggregator implements Aggregator {\n \n   @Override\n   public void mergeToAndReset(Aggregator other) {\n-    if (!other.getClass().isAssignableFrom(this.getClass())) {\n+    if (!this.getClass().isAssignableFrom(other.getClass())) {\n       return;\n     }\n     doMergeAndReset(other);\n"}}, {"oid": "a1d4a04bf492d49e9e1779321863d5ec364862e1", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a1d4a04bf492d49e9e1779321863d5ec364862e1", "message": "tighten up the access modifiers and flip the assignable logic to be correct", "committedDate": "2020-02-20T19:04:33Z", "type": "commit"}]}