{"pr_number": 1003, "pr_title": "Sdk usage", "pr_createdAt": "2020-03-12T13:34:20Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1003", "timeline": [{"oid": "54ca5ba19fc82fdc31399def0c47cb86d6d503b1", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/54ca5ba19fc82fdc31399def0c47cb86d6d503b1", "message": "Add SDK examples", "committedDate": "2020-03-12T13:25:03Z", "type": "commit"}, {"oid": "0e362c4eb04f2f1738023fad1cfa59fb8cfeaa2f", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0e362c4eb04f2f1738023fad1cfa59fb8cfeaa2f", "message": "README", "committedDate": "2020-03-12T13:33:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcwNjk2NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1003#discussion_r391706964", "bodyText": "Formatting looks non-standard in these file. Also, you're missing the copyright notices.", "author": "jkwatson", "createdAt": "2020-03-12T15:37:05Z", "path": "examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/BasicExample.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package io.opentelemetry.sdk.example;\n+\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.TracerSdk;\n+import io.opentelemetry.sdk.trace.TracerSdkFactory;\n+\n+/**\n+ * This example shows how to instantiate an OpenTelemetry tracer.\n+ */\n+class BasicExample {\n+\n+\tpublic static void main(String[] args) throws InterruptedException {\n+\t\t// Get the tracer factory. Multiple tracer can be instantiated.\n+\t\tTracerSdkFactory tracerProvider = OpenTelemetrySdk.getTracerFactory();", "originalCommit": "0e362c4eb04f2f1738023fad1cfa59fb8cfeaa2f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4bfd290b1b11c0b15a54e7d5df743d90d7796b02", "chunk": "diff --git a/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/BasicExample.java b/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/BasicExample.java\nindex 12e0c3c0e..36c781cad 100644\n--- a/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/BasicExample.java\n+++ b/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/BasicExample.java\n\n@@ -1,44 +1,56 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n package io.opentelemetry.sdk.example;\n \n import io.opentelemetry.sdk.OpenTelemetrySdk;\n import io.opentelemetry.sdk.trace.TracerSdk;\n import io.opentelemetry.sdk.trace.TracerSdkFactory;\n \n-/**\n- * This example shows how to instantiate an OpenTelemetry tracer.\n- */\n+/** This example shows how to instantiate an OpenTelemetry tracer. */\n class BasicExample {\n \n-\tpublic static void main(String[] args) throws InterruptedException {\n-\t\t// Get the tracer factory. Multiple tracer can be instantiated.\n-\t\tTracerSdkFactory tracerProvider = OpenTelemetrySdk.getTracerFactory();\n-\n-\t\t// Tracer MUST have a name and it has an optional version string.\n-\t\tTracerSdk tracerWithoutVersion = tracerProvider.get(\"BasicExample\");\n-\t\tTracerSdk tracerWithVersion = tracerProvider.get(\"BasicExample\", \"semver:0.2.0\");\n-\n-\t\t// The version is part of the unique tracer name\n-\t\tTracerSdk tracerWithNewVersion = tracerProvider.get(\"BasicExample\", \"semver:0.3.0\");\n-\t\tSystem.out.print(\"Are tracers with same name and different version equal? \");\n-\t\tSystem.out.println(tracerWithNewVersion.equals(tracerWithVersion));\n-\n-\t\t// Not having a version is equal to pass the null value\n-\t\tTracerSdk tracerWithNullVersion = tracerProvider.get(\"BasicExample\", null);\n-\t\tSystem.out.print(\"Is null the same of empty version? \");\n-\t\tSystem.out.println(tracerWithNullVersion.equals(tracerWithoutVersion));\n-\n-\t\t// Tracers are a singleton implementation defined uniquely by name and version.\n-\t\tfinal TracerSdk[] tracers = new TracerSdk[2];\n-\t\tThread t1 = new Thread(() -> tracers[0] = tracerProvider.get(\"Thread\"));\n-\t\tt1.start();\n-\t\tThread t2 = new Thread(() -> tracers[1] = tracerProvider.get(\"Thread\"));\n-\t\tt2.start();\n-\t\tt1.join();\n-\t\tt2.join();\n-\n-\t\tSystem.out.print(\"Is the tracer shared between the threads? \");\n-\t\tSystem.out.println(tracers[0] == tracers[1]);\n-\n-\t}\n-\n-}\n\\ No newline at end of file\n+  public static void main(String[] args) throws InterruptedException {\n+    // Get the tracer factory. Multiple tracer can be instantiated.\n+    TracerSdkFactory tracerProvider = OpenTelemetrySdk.getTracerFactory();\n+\n+    // Tracer MUST have a name and it has an optional version string.\n+    TracerSdk tracerWithoutVersion = tracerProvider.get(\"BasicExample\");\n+    TracerSdk tracerWithVersion = tracerProvider.get(\"BasicExample\", \"semver:0.2.0\");\n+\n+    // The version is part of the unique tracer name\n+    TracerSdk tracerWithNewVersion = tracerProvider.get(\"BasicExample\", \"semver:0.3.0\");\n+    System.out.print(\"Are tracers with same name and different version equal? \");\n+    System.out.println(tracerWithNewVersion.equals(tracerWithVersion));\n+\n+    // Not having a version is equal to pass the null value\n+    TracerSdk tracerWithNullVersion = tracerProvider.get(\"BasicExample\", null);\n+    System.out.print(\"Is null the same of empty version? \");\n+    System.out.println(tracerWithNullVersion.equals(tracerWithoutVersion));\n+\n+    // Tracers are a singleton implementation defined uniquely by name and version.\n+    final TracerSdk[] tracers = new TracerSdk[2];\n+    Thread t1 = new Thread(() -> tracers[0] = tracerProvider.get(\"Thread\"));\n+    t1.start();\n+    Thread t2 = new Thread(() -> tracers[1] = tracerProvider.get(\"Thread\"));\n+    t2.start();\n+    t1.join();\n+    t2.join();\n+\n+    System.out.print(\"Is the tracer shared between the threads? \");\n+    System.out.println(tracers[0] == tracers[1]);\n+  }\n+}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcxMTM3Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1003#discussion_r391711372", "bodyText": "This example is really an example of API usage, just using the SDK classes. I think these examples should focus on operator/application owner setup/configuration of the SDK, rather than repeating API usage examples.", "author": "jkwatson", "createdAt": "2020-03-12T15:43:46Z", "path": "examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/BasicExample.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package io.opentelemetry.sdk.example;\n+\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.TracerSdk;\n+import io.opentelemetry.sdk.trace.TracerSdkFactory;\n+\n+/**\n+ * This example shows how to instantiate an OpenTelemetry tracer.\n+ */\n+class BasicExample {", "originalCommit": "0e362c4eb04f2f1738023fad1cfa59fb8cfeaa2f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA5NDc2OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1003#discussion_r392094769", "bodyText": "isn't that covered by ConfigureSpanProcessorExample and ConfigureTraceExample?", "author": "thisthat", "createdAt": "2020-03-13T08:44:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcxMTM3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "4bfd290b1b11c0b15a54e7d5df743d90d7796b02", "chunk": "diff --git a/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/BasicExample.java b/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/BasicExample.java\nindex 12e0c3c0e..36c781cad 100644\n--- a/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/BasicExample.java\n+++ b/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/BasicExample.java\n\n@@ -1,44 +1,56 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n package io.opentelemetry.sdk.example;\n \n import io.opentelemetry.sdk.OpenTelemetrySdk;\n import io.opentelemetry.sdk.trace.TracerSdk;\n import io.opentelemetry.sdk.trace.TracerSdkFactory;\n \n-/**\n- * This example shows how to instantiate an OpenTelemetry tracer.\n- */\n+/** This example shows how to instantiate an OpenTelemetry tracer. */\n class BasicExample {\n \n-\tpublic static void main(String[] args) throws InterruptedException {\n-\t\t// Get the tracer factory. Multiple tracer can be instantiated.\n-\t\tTracerSdkFactory tracerProvider = OpenTelemetrySdk.getTracerFactory();\n-\n-\t\t// Tracer MUST have a name and it has an optional version string.\n-\t\tTracerSdk tracerWithoutVersion = tracerProvider.get(\"BasicExample\");\n-\t\tTracerSdk tracerWithVersion = tracerProvider.get(\"BasicExample\", \"semver:0.2.0\");\n-\n-\t\t// The version is part of the unique tracer name\n-\t\tTracerSdk tracerWithNewVersion = tracerProvider.get(\"BasicExample\", \"semver:0.3.0\");\n-\t\tSystem.out.print(\"Are tracers with same name and different version equal? \");\n-\t\tSystem.out.println(tracerWithNewVersion.equals(tracerWithVersion));\n-\n-\t\t// Not having a version is equal to pass the null value\n-\t\tTracerSdk tracerWithNullVersion = tracerProvider.get(\"BasicExample\", null);\n-\t\tSystem.out.print(\"Is null the same of empty version? \");\n-\t\tSystem.out.println(tracerWithNullVersion.equals(tracerWithoutVersion));\n-\n-\t\t// Tracers are a singleton implementation defined uniquely by name and version.\n-\t\tfinal TracerSdk[] tracers = new TracerSdk[2];\n-\t\tThread t1 = new Thread(() -> tracers[0] = tracerProvider.get(\"Thread\"));\n-\t\tt1.start();\n-\t\tThread t2 = new Thread(() -> tracers[1] = tracerProvider.get(\"Thread\"));\n-\t\tt2.start();\n-\t\tt1.join();\n-\t\tt2.join();\n-\n-\t\tSystem.out.print(\"Is the tracer shared between the threads? \");\n-\t\tSystem.out.println(tracers[0] == tracers[1]);\n-\n-\t}\n-\n-}\n\\ No newline at end of file\n+  public static void main(String[] args) throws InterruptedException {\n+    // Get the tracer factory. Multiple tracer can be instantiated.\n+    TracerSdkFactory tracerProvider = OpenTelemetrySdk.getTracerFactory();\n+\n+    // Tracer MUST have a name and it has an optional version string.\n+    TracerSdk tracerWithoutVersion = tracerProvider.get(\"BasicExample\");\n+    TracerSdk tracerWithVersion = tracerProvider.get(\"BasicExample\", \"semver:0.2.0\");\n+\n+    // The version is part of the unique tracer name\n+    TracerSdk tracerWithNewVersion = tracerProvider.get(\"BasicExample\", \"semver:0.3.0\");\n+    System.out.print(\"Are tracers with same name and different version equal? \");\n+    System.out.println(tracerWithNewVersion.equals(tracerWithVersion));\n+\n+    // Not having a version is equal to pass the null value\n+    TracerSdk tracerWithNullVersion = tracerProvider.get(\"BasicExample\", null);\n+    System.out.print(\"Is null the same of empty version? \");\n+    System.out.println(tracerWithNullVersion.equals(tracerWithoutVersion));\n+\n+    // Tracers are a singleton implementation defined uniquely by name and version.\n+    final TracerSdk[] tracers = new TracerSdk[2];\n+    Thread t1 = new Thread(() -> tracers[0] = tracerProvider.get(\"Thread\"));\n+    t1.start();\n+    Thread t2 = new Thread(() -> tracers[1] = tracerProvider.get(\"Thread\"));\n+    t2.start();\n+    t1.join();\n+    t2.join();\n+\n+    System.out.print(\"Is the tracer shared between the threads? \");\n+    System.out.println(tracers[0] == tracers[1]);\n+  }\n+}\n"}}, {"oid": "4bfd290b1b11c0b15a54e7d5df743d90d7796b02", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/4bfd290b1b11c0b15a54e7d5df743d90d7796b02", "message": "Format and Copyright", "committedDate": "2020-03-12T15:47:55Z", "type": "commit"}, {"oid": "4bfd290b1b11c0b15a54e7d5df743d90d7796b02", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/4bfd290b1b11c0b15a54e7d5df743d90d7796b02", "message": "Format and Copyright", "committedDate": "2020-03-12T15:47:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjIwNzgzMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1003#discussion_r392207830", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Not having a version is equal to pass the null value\n          \n          \n            \n                // Not having a version is equal to passing a null value", "author": "arminru", "createdAt": "2020-03-13T12:51:31Z", "path": "examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/BasicExample.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.example;\n+\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.TracerSdk;\n+import io.opentelemetry.sdk.trace.TracerSdkFactory;\n+\n+/** This example shows how to instantiate an OpenTelemetry tracer. */\n+class BasicExample {\n+\n+  public static void main(String[] args) throws InterruptedException {\n+    // Get the tracer factory. Multiple tracer can be instantiated.\n+    TracerSdkFactory tracerProvider = OpenTelemetrySdk.getTracerFactory();\n+\n+    // Tracer MUST have a name and it has an optional version string.\n+    TracerSdk tracerWithoutVersion = tracerProvider.get(\"BasicExample\");\n+    TracerSdk tracerWithVersion = tracerProvider.get(\"BasicExample\", \"semver:0.2.0\");\n+\n+    // The version is part of the unique tracer name\n+    TracerSdk tracerWithNewVersion = tracerProvider.get(\"BasicExample\", \"semver:0.3.0\");\n+    System.out.print(\"Are tracers with same name and different version equal? \");\n+    System.out.println(tracerWithNewVersion.equals(tracerWithVersion));\n+\n+    // Not having a version is equal to pass the null value", "originalCommit": "4bfd290b1b11c0b15a54e7d5df743d90d7796b02", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6df9cf84ca30bdca818e677d7a380c2915fa5b87", "chunk": "diff --git a/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/BasicExample.java b/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/BasicExample.java\ndeleted file mode 100644\nindex 36c781cad..000000000\n--- a/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/BasicExample.java\n+++ /dev/null\n\n@@ -1,56 +0,0 @@\n-/*\n- * Copyright 2020, OpenTelemetry Authors\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package io.opentelemetry.sdk.example;\n-\n-import io.opentelemetry.sdk.OpenTelemetrySdk;\n-import io.opentelemetry.sdk.trace.TracerSdk;\n-import io.opentelemetry.sdk.trace.TracerSdkFactory;\n-\n-/** This example shows how to instantiate an OpenTelemetry tracer. */\n-class BasicExample {\n-\n-  public static void main(String[] args) throws InterruptedException {\n-    // Get the tracer factory. Multiple tracer can be instantiated.\n-    TracerSdkFactory tracerProvider = OpenTelemetrySdk.getTracerFactory();\n-\n-    // Tracer MUST have a name and it has an optional version string.\n-    TracerSdk tracerWithoutVersion = tracerProvider.get(\"BasicExample\");\n-    TracerSdk tracerWithVersion = tracerProvider.get(\"BasicExample\", \"semver:0.2.0\");\n-\n-    // The version is part of the unique tracer name\n-    TracerSdk tracerWithNewVersion = tracerProvider.get(\"BasicExample\", \"semver:0.3.0\");\n-    System.out.print(\"Are tracers with same name and different version equal? \");\n-    System.out.println(tracerWithNewVersion.equals(tracerWithVersion));\n-\n-    // Not having a version is equal to pass the null value\n-    TracerSdk tracerWithNullVersion = tracerProvider.get(\"BasicExample\", null);\n-    System.out.print(\"Is null the same of empty version? \");\n-    System.out.println(tracerWithNullVersion.equals(tracerWithoutVersion));\n-\n-    // Tracers are a singleton implementation defined uniquely by name and version.\n-    final TracerSdk[] tracers = new TracerSdk[2];\n-    Thread t1 = new Thread(() -> tracers[0] = tracerProvider.get(\"Thread\"));\n-    t1.start();\n-    Thread t2 = new Thread(() -> tracers[1] = tracerProvider.get(\"Thread\"));\n-    t2.start();\n-    t1.join();\n-    t2.join();\n-\n-    System.out.print(\"Is the tracer shared between the threads? \");\n-    System.out.println(tracers[0] == tracers[1]);\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjIwOTA1Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1003#discussion_r392209056", "bodyText": "that would fit well into your DemoUtils class", "author": "arminru", "createdAt": "2020-03-13T12:54:19Z", "path": "examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.example;\n+\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.ReadableSpan;\n+import io.opentelemetry.sdk.trace.Sampler;\n+import io.opentelemetry.sdk.trace.Samplers;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.sdk.trace.TracerSdk;\n+import io.opentelemetry.sdk.trace.TracerSdkFactory;\n+import io.opentelemetry.sdk.trace.config.TraceConfig;\n+import io.opentelemetry.trace.AttributeValue;\n+import io.opentelemetry.trace.Link;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceId;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+class ConfigureTraceExample {\n+\n+  // Class that showcases how to implement your own SpanProcessor\n+  private static class MyProcessor implements SpanProcessor {\n+\n+    @Override\n+    public void onStart(ReadableSpan span) {\n+      // We just do something when a span ends.\n+    }\n+\n+    @Override\n+    public void onEnd(ReadableSpan span) {\n+      Map<String, AttributeValue> attrs = span.toSpanData().getAttributes();\n+      System.out.printf(\"Span %s has %d attributes: \\n\", span.getName(), attrs.size());\n+      for (String key : attrs.keySet()) {\n+        System.out.printf(\"\\t %s : %s\\n\", key, attrs.get(key).getStringValue());\n+      }\n+      System.out.println(\"-----------------------\");\n+    }\n+\n+    @Override\n+    public void shutdown() {}\n+  }\n+\n+  public static void main(String[] args) {\n+    // Configure a tracer for these examples\n+    TracerSdkFactory tracerProvider = OpenTelemetrySdk.getTracerFactory();\n+    TracerSdk tracer = tracerProvider.get(\"example\");\n+    tracerProvider.addSpanProcessor(new MyProcessor());\n+\n+    // TraceConfig handles the global tracing configuration\n+    TraceConfig config = TraceConfig.getDefault();\n+    printTraceConfig();\n+\n+    // We can have 32 Attributes by default. Let's add some to a span and verify they are stored\n+    // correctly.\n+    Span multiAttrSpan = tracer.spanBuilder(\"Example Span Attributes\").startSpan();\n+    multiAttrSpan.setAttribute(\"Attribute 1\", \"first attribute value\");\n+    multiAttrSpan.setAttribute(\"Attribute 2\", \"second attribute value\");\n+    multiAttrSpan.end();\n+\n+    // The configuration can be changed in the trace provider\n+    // For example, we can change the maximum number of Attributes per span to 1\n+    TraceConfig newConf = config.toBuilder().setMaxNumberOfAttributes(1).build();\n+    tracerProvider.updateActiveTraceConfig(newConf);\n+    printTraceConfig();\n+\n+    // Let check that now only one attribute is stored in the Span\n+    Span singleAttrSpan = tracer.spanBuilder(\"Example Span Attributes\").startSpan();\n+    singleAttrSpan.setAttribute(\"Attribute 1\", \"first attribute value\");\n+    singleAttrSpan.setAttribute(\"Attribute 2\", \"second attribute value\");\n+    singleAttrSpan.end();\n+\n+    // We can also change how the Spans are sampled. For example, we can turn off completely the\n+    // spans.\n+    TraceConfig alwaysOff =\n+        TraceConfig.getDefault().toBuilder().setSampler(Samplers.alwaysOff()).build();\n+    tracerProvider.updateActiveTraceConfig(alwaysOff);\n+    printTraceConfig();\n+    tracer.spanBuilder(\"Not forwarded to any processors\").startSpan().end();\n+    tracer.spanBuilder(\"Not forwarded to any processors\").startSpan().end();\n+    tracer.spanBuilder(\"Not forwarded to any processors\").startSpan().end();\n+    tracer.spanBuilder(\"Not forwarded to any processors\").startSpan().end();\n+    tracer.spanBuilder(\"Not forwarded to any processors\").startSpan().end();\n+\n+    // We can also implement our own sampler. We need to implement the\n+    // io.opentelemetry.sdk.trace.Sampler interface.\n+    class MySampler implements Sampler {\n+\n+      @Override\n+      public Decision shouldSample(\n+          SpanContext parentContext,\n+          TraceId traceId,\n+          SpanId spanId,\n+          String name,\n+          List<Link> parentLinks) {\n+        // We sample only if the name contains \"SAMPLE\"\n+        return new Decision() {\n+\n+          @Override\n+          public boolean isSampled() {\n+            return name.contains(\"SAMPLE\");\n+          }\n+\n+          @Override\n+          public Map<String, AttributeValue> attributes() {\n+            return Collections.emptyMap();\n+          }\n+        };\n+      }\n+\n+      @Override\n+      public String getDescription() {\n+        return \"My Sampler Implementation!\";\n+      }\n+    }\n+\n+    // Add MySampler to the Trace Configuration\n+    TraceConfig mySampler =\n+        TraceConfig.getDefault().toBuilder().setSampler(new MySampler()).build();\n+    tracerProvider.updateActiveTraceConfig(mySampler);\n+    printTraceConfig();\n+    tracer.spanBuilder(\"#1 - SamPleD\").startSpan().end();\n+    tracer.spanBuilder(\"#2 - SAMPLED\").startSpan().end();\n+    tracer.spanBuilder(\"#3 - Smth\").startSpan().end();\n+    tracer\n+        .spanBuilder(\"#4 - SAMPLED this trace will be showed in the console output\")\n+        .startSpan()\n+        .end();\n+    tracer.spanBuilder(\"#5\").startSpan().end();\n+  }\n+\n+  private static void printTraceConfig() {", "originalCommit": "4bfd290b1b11c0b15a54e7d5df743d90d7796b02", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6df9cf84ca30bdca818e677d7a380c2915fa5b87", "chunk": "diff --git a/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java b/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java\nindex e9fb207c0..b8fa146a0 100644\n--- a/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java\n+++ b/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java\n\n@@ -69,7 +69,7 @@ class ConfigureTraceExample {\n     TraceConfig config = TraceConfig.getDefault();\n     printTraceConfig();\n \n-    // We can have 32 Attributes by default. Let's add some to a span and verify they are stored\n+    // We can have a maximum of 32 Attributes by default. Let's add some to a span and verify they are stored\n     // correctly.\n     Span multiAttrSpan = tracer.spanBuilder(\"Example Span Attributes\").startSpan();\n     multiAttrSpan.setAttribute(\"Attribute 1\", \"first attribute value\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjIwOTg1OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1003#discussion_r392209858", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // We can have 32 Attributes by default. Let's add some to a span and verify they are stored\n          \n          \n            \n                // We can have a maximum of 32 Attributes by default. Let's add some to a span and verify they are stored", "author": "arminru", "createdAt": "2020-03-13T12:55:58Z", "path": "examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.example;\n+\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.ReadableSpan;\n+import io.opentelemetry.sdk.trace.Sampler;\n+import io.opentelemetry.sdk.trace.Samplers;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.sdk.trace.TracerSdk;\n+import io.opentelemetry.sdk.trace.TracerSdkFactory;\n+import io.opentelemetry.sdk.trace.config.TraceConfig;\n+import io.opentelemetry.trace.AttributeValue;\n+import io.opentelemetry.trace.Link;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceId;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+class ConfigureTraceExample {\n+\n+  // Class that showcases how to implement your own SpanProcessor\n+  private static class MyProcessor implements SpanProcessor {\n+\n+    @Override\n+    public void onStart(ReadableSpan span) {\n+      // We just do something when a span ends.\n+    }\n+\n+    @Override\n+    public void onEnd(ReadableSpan span) {\n+      Map<String, AttributeValue> attrs = span.toSpanData().getAttributes();\n+      System.out.printf(\"Span %s has %d attributes: \\n\", span.getName(), attrs.size());\n+      for (String key : attrs.keySet()) {\n+        System.out.printf(\"\\t %s : %s\\n\", key, attrs.get(key).getStringValue());\n+      }\n+      System.out.println(\"-----------------------\");\n+    }\n+\n+    @Override\n+    public void shutdown() {}\n+  }\n+\n+  public static void main(String[] args) {\n+    // Configure a tracer for these examples\n+    TracerSdkFactory tracerProvider = OpenTelemetrySdk.getTracerFactory();\n+    TracerSdk tracer = tracerProvider.get(\"example\");\n+    tracerProvider.addSpanProcessor(new MyProcessor());\n+\n+    // TraceConfig handles the global tracing configuration\n+    TraceConfig config = TraceConfig.getDefault();\n+    printTraceConfig();\n+\n+    // We can have 32 Attributes by default. Let's add some to a span and verify they are stored", "originalCommit": "4bfd290b1b11c0b15a54e7d5df743d90d7796b02", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6df9cf84ca30bdca818e677d7a380c2915fa5b87", "chunk": "diff --git a/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java b/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java\nindex e9fb207c0..b8fa146a0 100644\n--- a/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java\n+++ b/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java\n\n@@ -69,7 +69,7 @@ class ConfigureTraceExample {\n     TraceConfig config = TraceConfig.getDefault();\n     printTraceConfig();\n \n-    // We can have 32 Attributes by default. Let's add some to a span and verify they are stored\n+    // We can have a maximum of 32 Attributes by default. Let's add some to a span and verify they are stored\n     // correctly.\n     Span multiAttrSpan = tracer.spanBuilder(\"Example Span Attributes\").startSpan();\n     multiAttrSpan.setAttribute(\"Attribute 1\", \"first attribute value\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjIxMDY0Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1003#discussion_r392210642", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // We can also change how the Spans are sampled. For example, we can turn off completely the\n          \n          \n            \n                // spans.\n          \n          \n            \n                // We can also change how the Spans are sampled.\n          \n          \n            \n                // For example, we can configure that all spans are dropped using the \"always off\" sampler.", "author": "arminru", "createdAt": "2020-03-13T12:57:37Z", "path": "examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.example;\n+\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.ReadableSpan;\n+import io.opentelemetry.sdk.trace.Sampler;\n+import io.opentelemetry.sdk.trace.Samplers;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.sdk.trace.TracerSdk;\n+import io.opentelemetry.sdk.trace.TracerSdkFactory;\n+import io.opentelemetry.sdk.trace.config.TraceConfig;\n+import io.opentelemetry.trace.AttributeValue;\n+import io.opentelemetry.trace.Link;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceId;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+class ConfigureTraceExample {\n+\n+  // Class that showcases how to implement your own SpanProcessor\n+  private static class MyProcessor implements SpanProcessor {\n+\n+    @Override\n+    public void onStart(ReadableSpan span) {\n+      // We just do something when a span ends.\n+    }\n+\n+    @Override\n+    public void onEnd(ReadableSpan span) {\n+      Map<String, AttributeValue> attrs = span.toSpanData().getAttributes();\n+      System.out.printf(\"Span %s has %d attributes: \\n\", span.getName(), attrs.size());\n+      for (String key : attrs.keySet()) {\n+        System.out.printf(\"\\t %s : %s\\n\", key, attrs.get(key).getStringValue());\n+      }\n+      System.out.println(\"-----------------------\");\n+    }\n+\n+    @Override\n+    public void shutdown() {}\n+  }\n+\n+  public static void main(String[] args) {\n+    // Configure a tracer for these examples\n+    TracerSdkFactory tracerProvider = OpenTelemetrySdk.getTracerFactory();\n+    TracerSdk tracer = tracerProvider.get(\"example\");\n+    tracerProvider.addSpanProcessor(new MyProcessor());\n+\n+    // TraceConfig handles the global tracing configuration\n+    TraceConfig config = TraceConfig.getDefault();\n+    printTraceConfig();\n+\n+    // We can have 32 Attributes by default. Let's add some to a span and verify they are stored\n+    // correctly.\n+    Span multiAttrSpan = tracer.spanBuilder(\"Example Span Attributes\").startSpan();\n+    multiAttrSpan.setAttribute(\"Attribute 1\", \"first attribute value\");\n+    multiAttrSpan.setAttribute(\"Attribute 2\", \"second attribute value\");\n+    multiAttrSpan.end();\n+\n+    // The configuration can be changed in the trace provider\n+    // For example, we can change the maximum number of Attributes per span to 1\n+    TraceConfig newConf = config.toBuilder().setMaxNumberOfAttributes(1).build();\n+    tracerProvider.updateActiveTraceConfig(newConf);\n+    printTraceConfig();\n+\n+    // Let check that now only one attribute is stored in the Span\n+    Span singleAttrSpan = tracer.spanBuilder(\"Example Span Attributes\").startSpan();\n+    singleAttrSpan.setAttribute(\"Attribute 1\", \"first attribute value\");\n+    singleAttrSpan.setAttribute(\"Attribute 2\", \"second attribute value\");\n+    singleAttrSpan.end();\n+\n+    // We can also change how the Spans are sampled. For example, we can turn off completely the\n+    // spans.", "originalCommit": "4bfd290b1b11c0b15a54e7d5df743d90d7796b02", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6df9cf84ca30bdca818e677d7a380c2915fa5b87", "chunk": "diff --git a/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java b/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java\nindex e9fb207c0..b8fa146a0 100644\n--- a/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java\n+++ b/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java\n\n@@ -69,7 +69,7 @@ class ConfigureTraceExample {\n     TraceConfig config = TraceConfig.getDefault();\n     printTraceConfig();\n \n-    // We can have 32 Attributes by default. Let's add some to a span and verify they are stored\n+    // We can have a maximum of 32 Attributes by default. Let's add some to a span and verify they are stored\n     // correctly.\n     Span multiAttrSpan = tracer.spanBuilder(\"Example Span Attributes\").startSpan();\n     multiAttrSpan.setAttribute(\"Attribute 1\", \"first attribute value\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjIxMTE2Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1003#discussion_r392211163", "bodyText": "You could add a note on what those attributes would be about.", "author": "arminru", "createdAt": "2020-03-13T12:58:34Z", "path": "examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.example;\n+\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.ReadableSpan;\n+import io.opentelemetry.sdk.trace.Sampler;\n+import io.opentelemetry.sdk.trace.Samplers;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.sdk.trace.TracerSdk;\n+import io.opentelemetry.sdk.trace.TracerSdkFactory;\n+import io.opentelemetry.sdk.trace.config.TraceConfig;\n+import io.opentelemetry.trace.AttributeValue;\n+import io.opentelemetry.trace.Link;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceId;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+class ConfigureTraceExample {\n+\n+  // Class that showcases how to implement your own SpanProcessor\n+  private static class MyProcessor implements SpanProcessor {\n+\n+    @Override\n+    public void onStart(ReadableSpan span) {\n+      // We just do something when a span ends.\n+    }\n+\n+    @Override\n+    public void onEnd(ReadableSpan span) {\n+      Map<String, AttributeValue> attrs = span.toSpanData().getAttributes();\n+      System.out.printf(\"Span %s has %d attributes: \\n\", span.getName(), attrs.size());\n+      for (String key : attrs.keySet()) {\n+        System.out.printf(\"\\t %s : %s\\n\", key, attrs.get(key).getStringValue());\n+      }\n+      System.out.println(\"-----------------------\");\n+    }\n+\n+    @Override\n+    public void shutdown() {}\n+  }\n+\n+  public static void main(String[] args) {\n+    // Configure a tracer for these examples\n+    TracerSdkFactory tracerProvider = OpenTelemetrySdk.getTracerFactory();\n+    TracerSdk tracer = tracerProvider.get(\"example\");\n+    tracerProvider.addSpanProcessor(new MyProcessor());\n+\n+    // TraceConfig handles the global tracing configuration\n+    TraceConfig config = TraceConfig.getDefault();\n+    printTraceConfig();\n+\n+    // We can have 32 Attributes by default. Let's add some to a span and verify they are stored\n+    // correctly.\n+    Span multiAttrSpan = tracer.spanBuilder(\"Example Span Attributes\").startSpan();\n+    multiAttrSpan.setAttribute(\"Attribute 1\", \"first attribute value\");\n+    multiAttrSpan.setAttribute(\"Attribute 2\", \"second attribute value\");\n+    multiAttrSpan.end();\n+\n+    // The configuration can be changed in the trace provider\n+    // For example, we can change the maximum number of Attributes per span to 1\n+    TraceConfig newConf = config.toBuilder().setMaxNumberOfAttributes(1).build();\n+    tracerProvider.updateActiveTraceConfig(newConf);\n+    printTraceConfig();\n+\n+    // Let check that now only one attribute is stored in the Span\n+    Span singleAttrSpan = tracer.spanBuilder(\"Example Span Attributes\").startSpan();\n+    singleAttrSpan.setAttribute(\"Attribute 1\", \"first attribute value\");\n+    singleAttrSpan.setAttribute(\"Attribute 2\", \"second attribute value\");\n+    singleAttrSpan.end();\n+\n+    // We can also change how the Spans are sampled. For example, we can turn off completely the\n+    // spans.\n+    TraceConfig alwaysOff =\n+        TraceConfig.getDefault().toBuilder().setSampler(Samplers.alwaysOff()).build();\n+    tracerProvider.updateActiveTraceConfig(alwaysOff);\n+    printTraceConfig();\n+    tracer.spanBuilder(\"Not forwarded to any processors\").startSpan().end();\n+    tracer.spanBuilder(\"Not forwarded to any processors\").startSpan().end();\n+    tracer.spanBuilder(\"Not forwarded to any processors\").startSpan().end();\n+    tracer.spanBuilder(\"Not forwarded to any processors\").startSpan().end();\n+    tracer.spanBuilder(\"Not forwarded to any processors\").startSpan().end();\n+\n+    // We can also implement our own sampler. We need to implement the\n+    // io.opentelemetry.sdk.trace.Sampler interface.\n+    class MySampler implements Sampler {\n+\n+      @Override\n+      public Decision shouldSample(\n+          SpanContext parentContext,\n+          TraceId traceId,\n+          SpanId spanId,\n+          String name,\n+          List<Link> parentLinks) {\n+        // We sample only if the name contains \"SAMPLE\"\n+        return new Decision() {\n+\n+          @Override\n+          public boolean isSampled() {\n+            return name.contains(\"SAMPLE\");\n+          }\n+\n+          @Override\n+          public Map<String, AttributeValue> attributes() {\n+            return Collections.emptyMap();", "originalCommit": "4bfd290b1b11c0b15a54e7d5df743d90d7796b02", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6df9cf84ca30bdca818e677d7a380c2915fa5b87", "chunk": "diff --git a/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java b/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java\nindex e9fb207c0..b8fa146a0 100644\n--- a/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java\n+++ b/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java\n\n@@ -69,7 +69,7 @@ class ConfigureTraceExample {\n     TraceConfig config = TraceConfig.getDefault();\n     printTraceConfig();\n \n-    // We can have 32 Attributes by default. Let's add some to a span and verify they are stored\n+    // We can have a maximum of 32 Attributes by default. Let's add some to a span and verify they are stored\n     // correctly.\n     Span multiAttrSpan = tracer.spanBuilder(\"Example Span Attributes\").startSpan();\n     multiAttrSpan.setAttribute(\"Attribute 1\", \"first attribute value\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjIxMTM1MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1003#discussion_r392211351", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    .spanBuilder(\"#4 - SAMPLED this trace will be showed in the console output\")\n          \n          \n            \n                    .spanBuilder(\"#4 - SAMPLED this trace will be shown in the console output\")", "author": "arminru", "createdAt": "2020-03-13T12:58:59Z", "path": "examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.example;\n+\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.ReadableSpan;\n+import io.opentelemetry.sdk.trace.Sampler;\n+import io.opentelemetry.sdk.trace.Samplers;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.sdk.trace.TracerSdk;\n+import io.opentelemetry.sdk.trace.TracerSdkFactory;\n+import io.opentelemetry.sdk.trace.config.TraceConfig;\n+import io.opentelemetry.trace.AttributeValue;\n+import io.opentelemetry.trace.Link;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceId;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+class ConfigureTraceExample {\n+\n+  // Class that showcases how to implement your own SpanProcessor\n+  private static class MyProcessor implements SpanProcessor {\n+\n+    @Override\n+    public void onStart(ReadableSpan span) {\n+      // We just do something when a span ends.\n+    }\n+\n+    @Override\n+    public void onEnd(ReadableSpan span) {\n+      Map<String, AttributeValue> attrs = span.toSpanData().getAttributes();\n+      System.out.printf(\"Span %s has %d attributes: \\n\", span.getName(), attrs.size());\n+      for (String key : attrs.keySet()) {\n+        System.out.printf(\"\\t %s : %s\\n\", key, attrs.get(key).getStringValue());\n+      }\n+      System.out.println(\"-----------------------\");\n+    }\n+\n+    @Override\n+    public void shutdown() {}\n+  }\n+\n+  public static void main(String[] args) {\n+    // Configure a tracer for these examples\n+    TracerSdkFactory tracerProvider = OpenTelemetrySdk.getTracerFactory();\n+    TracerSdk tracer = tracerProvider.get(\"example\");\n+    tracerProvider.addSpanProcessor(new MyProcessor());\n+\n+    // TraceConfig handles the global tracing configuration\n+    TraceConfig config = TraceConfig.getDefault();\n+    printTraceConfig();\n+\n+    // We can have 32 Attributes by default. Let's add some to a span and verify they are stored\n+    // correctly.\n+    Span multiAttrSpan = tracer.spanBuilder(\"Example Span Attributes\").startSpan();\n+    multiAttrSpan.setAttribute(\"Attribute 1\", \"first attribute value\");\n+    multiAttrSpan.setAttribute(\"Attribute 2\", \"second attribute value\");\n+    multiAttrSpan.end();\n+\n+    // The configuration can be changed in the trace provider\n+    // For example, we can change the maximum number of Attributes per span to 1\n+    TraceConfig newConf = config.toBuilder().setMaxNumberOfAttributes(1).build();\n+    tracerProvider.updateActiveTraceConfig(newConf);\n+    printTraceConfig();\n+\n+    // Let check that now only one attribute is stored in the Span\n+    Span singleAttrSpan = tracer.spanBuilder(\"Example Span Attributes\").startSpan();\n+    singleAttrSpan.setAttribute(\"Attribute 1\", \"first attribute value\");\n+    singleAttrSpan.setAttribute(\"Attribute 2\", \"second attribute value\");\n+    singleAttrSpan.end();\n+\n+    // We can also change how the Spans are sampled. For example, we can turn off completely the\n+    // spans.\n+    TraceConfig alwaysOff =\n+        TraceConfig.getDefault().toBuilder().setSampler(Samplers.alwaysOff()).build();\n+    tracerProvider.updateActiveTraceConfig(alwaysOff);\n+    printTraceConfig();\n+    tracer.spanBuilder(\"Not forwarded to any processors\").startSpan().end();\n+    tracer.spanBuilder(\"Not forwarded to any processors\").startSpan().end();\n+    tracer.spanBuilder(\"Not forwarded to any processors\").startSpan().end();\n+    tracer.spanBuilder(\"Not forwarded to any processors\").startSpan().end();\n+    tracer.spanBuilder(\"Not forwarded to any processors\").startSpan().end();\n+\n+    // We can also implement our own sampler. We need to implement the\n+    // io.opentelemetry.sdk.trace.Sampler interface.\n+    class MySampler implements Sampler {\n+\n+      @Override\n+      public Decision shouldSample(\n+          SpanContext parentContext,\n+          TraceId traceId,\n+          SpanId spanId,\n+          String name,\n+          List<Link> parentLinks) {\n+        // We sample only if the name contains \"SAMPLE\"\n+        return new Decision() {\n+\n+          @Override\n+          public boolean isSampled() {\n+            return name.contains(\"SAMPLE\");\n+          }\n+\n+          @Override\n+          public Map<String, AttributeValue> attributes() {\n+            return Collections.emptyMap();\n+          }\n+        };\n+      }\n+\n+      @Override\n+      public String getDescription() {\n+        return \"My Sampler Implementation!\";\n+      }\n+    }\n+\n+    // Add MySampler to the Trace Configuration\n+    TraceConfig mySampler =\n+        TraceConfig.getDefault().toBuilder().setSampler(new MySampler()).build();\n+    tracerProvider.updateActiveTraceConfig(mySampler);\n+    printTraceConfig();\n+    tracer.spanBuilder(\"#1 - SamPleD\").startSpan().end();\n+    tracer.spanBuilder(\"#2 - SAMPLED\").startSpan().end();\n+    tracer.spanBuilder(\"#3 - Smth\").startSpan().end();\n+    tracer\n+        .spanBuilder(\"#4 - SAMPLED this trace will be showed in the console output\")", "originalCommit": "4bfd290b1b11c0b15a54e7d5df743d90d7796b02", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6df9cf84ca30bdca818e677d7a380c2915fa5b87", "chunk": "diff --git a/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java b/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java\nindex e9fb207c0..b8fa146a0 100644\n--- a/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java\n+++ b/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java\n\n@@ -69,7 +69,7 @@ class ConfigureTraceExample {\n     TraceConfig config = TraceConfig.getDefault();\n     printTraceConfig();\n \n-    // We can have 32 Attributes by default. Let's add some to a span and verify they are stored\n+    // We can have a maximum of 32 Attributes by default. Let's add some to a span and verify they are stored\n     // correctly.\n     Span multiAttrSpan = tracer.spanBuilder(\"Example Span Attributes\").startSpan();\n     multiAttrSpan.setAttribute(\"Attribute 1\", \"first attribute value\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjIxMjcwNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1003#discussion_r392212706", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // We can also implement our own SpanProcessor. It is necessary to only implement the relative\n          \n          \n            \n                // interface\n          \n          \n            \n                // which requires three methods that are called during the lifespan of Spans.\n          \n          \n            \n                // We can also implement our own SpanProcessor. It is only necessary to implement the respective\n          \n          \n            \n                // interface which requires three methods that are called during the lifespan of Spans.", "author": "arminru", "createdAt": "2020-03-13T13:01:44Z", "path": "examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureSpanProcessorExample.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.example;\n+\n+import io.opentelemetry.exporters.inmemory.InMemorySpanExporter;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.example.unsafe.DemoUtils;\n+import io.opentelemetry.sdk.trace.MultiSpanProcessor;\n+import io.opentelemetry.sdk.trace.ReadableSpan;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.sdk.trace.TracerSdk;\n+import io.opentelemetry.sdk.trace.TracerSdkFactory;\n+import io.opentelemetry.sdk.trace.export.BatchSpansProcessor;\n+import io.opentelemetry.sdk.trace.export.SimpleSpansProcessor;\n+\n+import java.util.Arrays;\n+\n+/** This example shows how to instantiate different Span Processors. */\n+class ConfigureSpanProcessorExample {\n+\n+  static InMemorySpanExporter exporter = InMemorySpanExporter.create();\n+\n+  public static void main(String[] args) throws Exception {\n+    // Get the Tracer Provider\n+    TracerSdkFactory tracerProvider = OpenTelemetrySdk.getTracerFactory();\n+\n+    // Configure the simple spans processor.\n+    tracerProvider.addSpanProcessor(SimpleSpansProcessor.newBuilder(exporter).build());\n+\n+    // Now we can acquire a tracer\n+    TracerSdk tracer = tracerProvider.get(\"ConfigureSpanProcessorExample\");\n+    // Print to the console the list of span processors enabled.\n+    DemoUtils.printProcessorList(tracer);\n+\n+    // Processors that are plugged after the tracer creation are still propagated to the tracer.\n+    tracerProvider.addSpanProcessor(SimpleSpansProcessor.newBuilder(exporter).build());\n+    // Print to the console the list of span processors enabled.\n+    DemoUtils.printProcessorList(tracer);\n+\n+    // We can also implement our own SpanProcessor. It is necessary to only implement the relative\n+    // interface\n+    // which requires three methods that are called during the lifespan of Spans.", "originalCommit": "4bfd290b1b11c0b15a54e7d5df743d90d7796b02", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6df9cf84ca30bdca818e677d7a380c2915fa5b87", "chunk": "diff --git a/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureSpanProcessorExample.java b/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureSpanProcessorExample.java\nindex 778842126..456a1b33e 100644\n--- a/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureSpanProcessorExample.java\n+++ b/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureSpanProcessorExample.java\n\n@@ -51,9 +51,8 @@ class ConfigureSpanProcessorExample {\n     // Print to the console the list of span processors enabled.\n     DemoUtils.printProcessorList(tracer);\n \n-    // We can also implement our own SpanProcessor. It is necessary to only implement the relative\n-    // interface\n-    // which requires three methods that are called during the lifespan of Spans.\n+    // We can also implement our own SpanProcessor. It is only necessary to implement the respective\n+    // interface which requires three methods that are called during the lifespan of Spans.\n     class MySpanProcessor implements SpanProcessor {\n \n       @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjIxNDAyNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1003#discussion_r392214024", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // This method is called when a span is terminated;\n          \n          \n            \n                    System.out.printf(\"Span %s - Terminated\\n\", span.getName());\n          \n          \n            \n                    // This method is called when a span is ended;\n          \n          \n            \n                    System.out.printf(\"Span %s - Ended\\n\", span.getName());\n          \n      \n    \n    \n  \n\nterminated sounds like if it was cancelled/aborted", "author": "arminru", "createdAt": "2020-03-13T13:04:28Z", "path": "examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureSpanProcessorExample.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.example;\n+\n+import io.opentelemetry.exporters.inmemory.InMemorySpanExporter;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.example.unsafe.DemoUtils;\n+import io.opentelemetry.sdk.trace.MultiSpanProcessor;\n+import io.opentelemetry.sdk.trace.ReadableSpan;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.sdk.trace.TracerSdk;\n+import io.opentelemetry.sdk.trace.TracerSdkFactory;\n+import io.opentelemetry.sdk.trace.export.BatchSpansProcessor;\n+import io.opentelemetry.sdk.trace.export.SimpleSpansProcessor;\n+\n+import java.util.Arrays;\n+\n+/** This example shows how to instantiate different Span Processors. */\n+class ConfigureSpanProcessorExample {\n+\n+  static InMemorySpanExporter exporter = InMemorySpanExporter.create();\n+\n+  public static void main(String[] args) throws Exception {\n+    // Get the Tracer Provider\n+    TracerSdkFactory tracerProvider = OpenTelemetrySdk.getTracerFactory();\n+\n+    // Configure the simple spans processor.\n+    tracerProvider.addSpanProcessor(SimpleSpansProcessor.newBuilder(exporter).build());\n+\n+    // Now we can acquire a tracer\n+    TracerSdk tracer = tracerProvider.get(\"ConfigureSpanProcessorExample\");\n+    // Print to the console the list of span processors enabled.\n+    DemoUtils.printProcessorList(tracer);\n+\n+    // Processors that are plugged after the tracer creation are still propagated to the tracer.\n+    tracerProvider.addSpanProcessor(SimpleSpansProcessor.newBuilder(exporter).build());\n+    // Print to the console the list of span processors enabled.\n+    DemoUtils.printProcessorList(tracer);\n+\n+    // We can also implement our own SpanProcessor. It is necessary to only implement the relative\n+    // interface\n+    // which requires three methods that are called during the lifespan of Spans.\n+    class MySpanProcessor implements SpanProcessor {\n+\n+      @Override\n+      public void onStart(ReadableSpan span) {\n+        // This method is called when a span is created;\n+        System.out.printf(\"Span %s - Started\\n\", span.getName());\n+      }\n+\n+      @Override\n+      public void onEnd(ReadableSpan span) {\n+        // This method is called when a span is terminated;\n+        System.out.printf(\"Span %s - Terminated\\n\", span.getName());", "originalCommit": "4bfd290b1b11c0b15a54e7d5df743d90d7796b02", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6df9cf84ca30bdca818e677d7a380c2915fa5b87", "chunk": "diff --git a/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureSpanProcessorExample.java b/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureSpanProcessorExample.java\nindex 778842126..456a1b33e 100644\n--- a/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureSpanProcessorExample.java\n+++ b/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureSpanProcessorExample.java\n\n@@ -51,9 +51,8 @@ class ConfigureSpanProcessorExample {\n     // Print to the console the list of span processors enabled.\n     DemoUtils.printProcessorList(tracer);\n \n-    // We can also implement our own SpanProcessor. It is necessary to only implement the relative\n-    // interface\n-    // which requires three methods that are called during the lifespan of Spans.\n+    // We can also implement our own SpanProcessor. It is only necessary to implement the respective\n+    // interface which requires three methods that are called during the lifespan of Spans.\n     class MySpanProcessor implements SpanProcessor {\n \n       @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjIxNDMzOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1003#discussion_r392214338", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // class.\n          \n          \n            \n                // MultiSpanProcessor can be nested.\n          \n          \n            \n                // class. MultiSpanProcessors can also be nested.", "author": "arminru", "createdAt": "2020-03-13T13:05:07Z", "path": "examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureSpanProcessorExample.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.example;\n+\n+import io.opentelemetry.exporters.inmemory.InMemorySpanExporter;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.example.unsafe.DemoUtils;\n+import io.opentelemetry.sdk.trace.MultiSpanProcessor;\n+import io.opentelemetry.sdk.trace.ReadableSpan;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.sdk.trace.TracerSdk;\n+import io.opentelemetry.sdk.trace.TracerSdkFactory;\n+import io.opentelemetry.sdk.trace.export.BatchSpansProcessor;\n+import io.opentelemetry.sdk.trace.export.SimpleSpansProcessor;\n+\n+import java.util.Arrays;\n+\n+/** This example shows how to instantiate different Span Processors. */\n+class ConfigureSpanProcessorExample {\n+\n+  static InMemorySpanExporter exporter = InMemorySpanExporter.create();\n+\n+  public static void main(String[] args) throws Exception {\n+    // Get the Tracer Provider\n+    TracerSdkFactory tracerProvider = OpenTelemetrySdk.getTracerFactory();\n+\n+    // Configure the simple spans processor.\n+    tracerProvider.addSpanProcessor(SimpleSpansProcessor.newBuilder(exporter).build());\n+\n+    // Now we can acquire a tracer\n+    TracerSdk tracer = tracerProvider.get(\"ConfigureSpanProcessorExample\");\n+    // Print to the console the list of span processors enabled.\n+    DemoUtils.printProcessorList(tracer);\n+\n+    // Processors that are plugged after the tracer creation are still propagated to the tracer.\n+    tracerProvider.addSpanProcessor(SimpleSpansProcessor.newBuilder(exporter).build());\n+    // Print to the console the list of span processors enabled.\n+    DemoUtils.printProcessorList(tracer);\n+\n+    // We can also implement our own SpanProcessor. It is necessary to only implement the relative\n+    // interface\n+    // which requires three methods that are called during the lifespan of Spans.\n+    class MySpanProcessor implements SpanProcessor {\n+\n+      @Override\n+      public void onStart(ReadableSpan span) {\n+        // This method is called when a span is created;\n+        System.out.printf(\"Span %s - Started\\n\", span.getName());\n+      }\n+\n+      @Override\n+      public void onEnd(ReadableSpan span) {\n+        // This method is called when a span is terminated;\n+        System.out.printf(\"Span %s - Terminated\\n\", span.getName());\n+      }\n+\n+      @Override\n+      public void shutdown() {\n+        // This method is called when the OpenTelemetry library is shutting down;\n+        System.out.printf(\"Goodbye by %s\\n\", this.getClass().getSimpleName());\n+      }\n+\n+      @Override\n+      public String toString() {\n+        return \"MySpanProcessor{}\";\n+      }\n+    }\n+\n+    // We can also configure multiple span processors at the same time using the MultiSpanProcessor\n+    // class.\n+    // MultiSpanProcessor can be nested.", "originalCommit": "4bfd290b1b11c0b15a54e7d5df743d90d7796b02", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6df9cf84ca30bdca818e677d7a380c2915fa5b87", "chunk": "diff --git a/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureSpanProcessorExample.java b/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureSpanProcessorExample.java\nindex 778842126..456a1b33e 100644\n--- a/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureSpanProcessorExample.java\n+++ b/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureSpanProcessorExample.java\n\n@@ -51,9 +51,8 @@ class ConfigureSpanProcessorExample {\n     // Print to the console the list of span processors enabled.\n     DemoUtils.printProcessorList(tracer);\n \n-    // We can also implement our own SpanProcessor. It is necessary to only implement the relative\n-    // interface\n-    // which requires three methods that are called during the lifespan of Spans.\n+    // We can also implement our own SpanProcessor. It is only necessary to implement the respective\n+    // interface which requires three methods that are called during the lifespan of Spans.\n     class MySpanProcessor implements SpanProcessor {\n \n       @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjIxNTIyNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1003#discussion_r392215225", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // This automatically shuts down\n          \n          \n            \n                // This also calls `shutdown` on all configured SpanProcessors.", "author": "arminru", "createdAt": "2020-03-13T13:07:01Z", "path": "examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureSpanProcessorExample.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.example;\n+\n+import io.opentelemetry.exporters.inmemory.InMemorySpanExporter;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.example.unsafe.DemoUtils;\n+import io.opentelemetry.sdk.trace.MultiSpanProcessor;\n+import io.opentelemetry.sdk.trace.ReadableSpan;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.sdk.trace.TracerSdk;\n+import io.opentelemetry.sdk.trace.TracerSdkFactory;\n+import io.opentelemetry.sdk.trace.export.BatchSpansProcessor;\n+import io.opentelemetry.sdk.trace.export.SimpleSpansProcessor;\n+\n+import java.util.Arrays;\n+\n+/** This example shows how to instantiate different Span Processors. */\n+class ConfigureSpanProcessorExample {\n+\n+  static InMemorySpanExporter exporter = InMemorySpanExporter.create();\n+\n+  public static void main(String[] args) throws Exception {\n+    // Get the Tracer Provider\n+    TracerSdkFactory tracerProvider = OpenTelemetrySdk.getTracerFactory();\n+\n+    // Configure the simple spans processor.\n+    tracerProvider.addSpanProcessor(SimpleSpansProcessor.newBuilder(exporter).build());\n+\n+    // Now we can acquire a tracer\n+    TracerSdk tracer = tracerProvider.get(\"ConfigureSpanProcessorExample\");\n+    // Print to the console the list of span processors enabled.\n+    DemoUtils.printProcessorList(tracer);\n+\n+    // Processors that are plugged after the tracer creation are still propagated to the tracer.\n+    tracerProvider.addSpanProcessor(SimpleSpansProcessor.newBuilder(exporter).build());\n+    // Print to the console the list of span processors enabled.\n+    DemoUtils.printProcessorList(tracer);\n+\n+    // We can also implement our own SpanProcessor. It is necessary to only implement the relative\n+    // interface\n+    // which requires three methods that are called during the lifespan of Spans.\n+    class MySpanProcessor implements SpanProcessor {\n+\n+      @Override\n+      public void onStart(ReadableSpan span) {\n+        // This method is called when a span is created;\n+        System.out.printf(\"Span %s - Started\\n\", span.getName());\n+      }\n+\n+      @Override\n+      public void onEnd(ReadableSpan span) {\n+        // This method is called when a span is terminated;\n+        System.out.printf(\"Span %s - Terminated\\n\", span.getName());\n+      }\n+\n+      @Override\n+      public void shutdown() {\n+        // This method is called when the OpenTelemetry library is shutting down;\n+        System.out.printf(\"Goodbye by %s\\n\", this.getClass().getSimpleName());\n+      }\n+\n+      @Override\n+      public String toString() {\n+        return \"MySpanProcessor{}\";\n+      }\n+    }\n+\n+    // We can also configure multiple span processors at the same time using the MultiSpanProcessor\n+    // class.\n+    // MultiSpanProcessor can be nested.\n+    tracerProvider.addSpanProcessor(\n+        MultiSpanProcessor.create(\n+            Arrays.asList(\n+                new MySpanProcessor(),\n+                MultiSpanProcessor.create(\n+                    Arrays.asList(\n+                        SimpleSpansProcessor.newBuilder(exporter).build(),\n+                        BatchSpansProcessor.newBuilder(exporter).build())))));\n+    // Print to the console the list of span processors enabled.\n+    DemoUtils.printProcessorList(tracer);\n+\n+    // We generate some Spans so we can test MySpanProcessor implementation\n+    tracer.spanBuilder(\"Span #1\").startSpan().end();\n+    tracer.spanBuilder(\"Span #2\").startSpan().end();\n+    tracer.spanBuilder(\"Span #3\").startSpan().end();\n+\n+    // We shutdown the OpenTelemetry library\n+    // This automatically shuts down", "originalCommit": "4bfd290b1b11c0b15a54e7d5df743d90d7796b02", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6df9cf84ca30bdca818e677d7a380c2915fa5b87", "chunk": "diff --git a/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureSpanProcessorExample.java b/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureSpanProcessorExample.java\nindex 778842126..456a1b33e 100644\n--- a/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureSpanProcessorExample.java\n+++ b/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureSpanProcessorExample.java\n\n@@ -51,9 +51,8 @@ class ConfigureSpanProcessorExample {\n     // Print to the console the list of span processors enabled.\n     DemoUtils.printProcessorList(tracer);\n \n-    // We can also implement our own SpanProcessor. It is necessary to only implement the relative\n-    // interface\n-    // which requires three methods that are called during the lifespan of Spans.\n+    // We can also implement our own SpanProcessor. It is only necessary to implement the respective\n+    // interface which requires three methods that are called during the lifespan of Spans.\n     class MySpanProcessor implements SpanProcessor {\n \n       @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjIyMTMxMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1003#discussion_r392221311", "bodyText": "That's likely to break when the SDK is developed further and wouldn't be discovered easily since the build wouldn't break.\nDo you think it would make sense to (cleanly) expose the configured span processors on TracerSdkProvider?", "author": "arminru", "createdAt": "2020-03-13T13:18:46Z", "path": "examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/unsafe/DemoUtils.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.example.unsafe;\n+\n+import io.opentelemetry.sdk.trace.MultiSpanProcessor;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.sdk.trace.TracerSdk;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.util.List;\n+\n+/**\n+ * These methods use reflection to access private fields of the tracer. This is meant as\n+ * demonstration only. It is SEVERELY discouraged to access private fields since they are shared\n+ * among different threads.\n+ */\n+public class DemoUtils {\n+\n+  public static void printProcessorList(TracerSdk tracer) throws Exception {\n+    Field sharedStateField = tracer.getClass().getDeclaredField(\"sharedState\");\n+    sharedStateField.setAccessible(true);\n+    Object sharedState = sharedStateField.get(tracer);\n+    Method method = sharedState.getClass().getDeclaredMethod(\"getActiveSpanProcessor\");\n+    method.setAccessible(true);\n+    Object multiSpanProcessor = method.invoke(sharedState);\n+    Field spanListField = multiSpanProcessor.getClass().getDeclaredField(\"spanProcessors\");\n+    spanListField.setAccessible(true);\n+    List<SpanProcessor> spanProcessors = (List) spanListField.get(multiSpanProcessor);\n+    System.out.println(spanProcessors.size() + \" active span processors:\");\n+    printProcessorList(spanProcessors, 1);", "originalCommit": "4bfd290b1b11c0b15a54e7d5df743d90d7796b02", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMxODExOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1003#discussion_r392318118", "bodyText": "I think this question should be addressed in an issue so everyone can contribute with their opinion.", "author": "thisthat", "createdAt": "2020-03-13T15:57:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjIyMTMxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3MTEzMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1003#discussion_r392371132", "bodyText": "#1009", "author": "arminru", "createdAt": "2020-03-13T17:29:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjIyMTMxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "a200b4cd96a822088c5f377a7b7029644b6b0c74", "chunk": "diff --git a/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/unsafe/DemoUtils.java b/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/unsafe/DemoUtils.java\nindex d8578a5bd..123c7d5c3 100644\n--- a/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/unsafe/DemoUtils.java\n+++ b/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/unsafe/DemoUtils.java\n\n@@ -19,7 +19,6 @@ package io.opentelemetry.sdk.example.unsafe;\n import io.opentelemetry.sdk.trace.MultiSpanProcessor;\n import io.opentelemetry.sdk.trace.SpanProcessor;\n import io.opentelemetry.sdk.trace.TracerSdk;\n-\n import java.lang.reflect.Field;\n import java.lang.reflect.Method;\n import java.util.List;\n"}}, {"oid": "6df9cf84ca30bdca818e677d7a380c2915fa5b87", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/6df9cf84ca30bdca818e677d7a380c2915fa5b87", "message": "Address PR feedback", "committedDate": "2020-03-13T15:55:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMyNDg3OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1003#discussion_r392324878", "bodyText": "for examples, we should use the Logging exporter, since it will actually output visible information", "author": "jkwatson", "createdAt": "2020-03-13T16:09:09Z", "path": "examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureSpanProcessorExample.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.example;\n+\n+import io.opentelemetry.exporters.inmemory.InMemorySpanExporter;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.example.unsafe.DemoUtils;\n+import io.opentelemetry.sdk.trace.MultiSpanProcessor;\n+import io.opentelemetry.sdk.trace.ReadableSpan;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.sdk.trace.TracerSdk;\n+import io.opentelemetry.sdk.trace.TracerSdkFactory;\n+import io.opentelemetry.sdk.trace.export.BatchSpansProcessor;\n+import io.opentelemetry.sdk.trace.export.SimpleSpansProcessor;\n+\n+import java.util.Arrays;\n+\n+/** This example shows how to instantiate different Span Processors. */\n+class ConfigureSpanProcessorExample {\n+\n+  static InMemorySpanExporter exporter = InMemorySpanExporter.create();", "originalCommit": "6df9cf84ca30bdca818e677d7a380c2915fa5b87", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a200b4cd96a822088c5f377a7b7029644b6b0c74", "chunk": "diff --git a/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureSpanProcessorExample.java b/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureSpanProcessorExample.java\nindex 456a1b33e..e45c6a9d0 100644\n--- a/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureSpanProcessorExample.java\n+++ b/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureSpanProcessorExample.java\n\n@@ -23,10 +23,9 @@ import io.opentelemetry.sdk.trace.MultiSpanProcessor;\n import io.opentelemetry.sdk.trace.ReadableSpan;\n import io.opentelemetry.sdk.trace.SpanProcessor;\n import io.opentelemetry.sdk.trace.TracerSdk;\n-import io.opentelemetry.sdk.trace.TracerSdkFactory;\n+import io.opentelemetry.sdk.trace.TracerSdkProvider;\n import io.opentelemetry.sdk.trace.export.BatchSpansProcessor;\n import io.opentelemetry.sdk.trace.export.SimpleSpansProcessor;\n-\n import java.util.Arrays;\n \n /** This example shows how to instantiate different Span Processors. */\n"}}, {"oid": "c4748a6ba8aa0e158aa63516310dddf92fceee79", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c4748a6ba8aa0e158aa63516310dddf92fceee79", "message": "Update build to depend on snapshots and apply gjf", "committedDate": "2020-03-16T11:04:24Z", "type": "commit"}, {"oid": "a200b4cd96a822088c5f377a7b7029644b6b0c74", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a200b4cd96a822088c5f377a7b7029644b6b0c74", "message": "Update examples", "committedDate": "2020-03-16T11:04:52Z", "type": "commit"}, {"oid": "79eb21981398a70165b45ce41f96873f7da70046", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/79eb21981398a70165b45ce41f96873f7da70046", "message": "Switch to Logging exporter", "committedDate": "2020-03-16T11:18:03Z", "type": "commit"}, {"oid": "168d4728ef519ddf653491312a5a5ecf62962844", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/168d4728ef519ddf653491312a5a5ecf62962844", "message": "Address feedback", "committedDate": "2020-03-23T14:31:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgwNjUwMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1003#discussion_r396806500", "bodyText": "Mention it is printing custom information, for the sake of the example?", "author": "carlosalberto", "createdAt": "2020-03-23T22:56:00Z", "path": "examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.example;\n+\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.ReadableSpan;\n+import io.opentelemetry.sdk.trace.Sampler;\n+import io.opentelemetry.sdk.trace.Samplers;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.sdk.trace.TracerSdk;\n+import io.opentelemetry.sdk.trace.TracerSdkProvider;\n+import io.opentelemetry.sdk.trace.config.TraceConfig;\n+import io.opentelemetry.trace.Link;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceId;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+class ConfigureTraceExample {\n+\n+  // Class that prints in the console information about the spans.", "originalCommit": "168d4728ef519ddf653491312a5a5ecf62962844", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "36fc69b3d61b8013b79f3732f8ffd55fcbb2cba0", "chunk": "diff --git a/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java b/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java\nindex 224ee1c83..02776dd32 100644\n--- a/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java\n+++ b/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java\n\n@@ -36,8 +36,9 @@ import java.util.Map;\n \n class ConfigureTraceExample {\n \n-  // Class that prints in the console information about the spans.\n-  // For more example about SpanProcessor, refer to ConfigureSpanProcessorExample.java\n+  // Class that prints in the console custom information about the spans for the sake of the\n+  // example. For more details about the default SpanProcessor, refer to\n+  // ConfigureSpanProcessorExample.java\n   private static class MyProcessor implements SpanProcessor {\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgwNjg5Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1003#discussion_r396806897", "bodyText": "Mention this is a rather uncommon case?", "author": "carlosalberto", "createdAt": "2020-03-23T22:57:08Z", "path": "examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureSpanProcessorExample.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.example;\n+\n+import io.opentelemetry.exporters.logging.LoggingSpanExporter;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.example.unsafe.DemoUtils;\n+import io.opentelemetry.sdk.trace.MultiSpanProcessor;\n+import io.opentelemetry.sdk.trace.ReadableSpan;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.sdk.trace.TracerSdk;\n+import io.opentelemetry.sdk.trace.TracerSdkProvider;\n+import io.opentelemetry.sdk.trace.export.BatchSpansProcessor;\n+import io.opentelemetry.sdk.trace.export.SimpleSpansProcessor;\n+import java.util.Arrays;\n+\n+/** This example shows how to instantiate different Span Processors. */\n+class ConfigureSpanProcessorExample {\n+\n+  static LoggingSpanExporter exporter = new LoggingSpanExporter();\n+\n+  // Get the Tracer Provider\n+  static TracerSdkProvider tracerProvider = OpenTelemetrySdk.getTracerProvider();\n+  // Acquire a tracer\n+  static TracerSdk tracer = tracerProvider.get(\"ConfigureSpanProcessorExample\");\n+\n+  public static void main(String[] args) throws Exception {\n+\n+    // Example how to configure the default SpanProcessors.\n+    defaultSpanProcessors();\n+    // Print to the console the list of span processors enabled.\n+    DemoUtils.printProcessorList(tracer);\n+\n+    // Example how to create your own SpanProcessor.\n+    customSpanProcessor();\n+    // Print to the console the list of span processors enabled.\n+    DemoUtils.printProcessorList(tracer);\n+\n+    // We generate some Spans so we can see some output on the console.\n+    tracer.spanBuilder(\"Span #1\").startSpan().end();\n+    tracer.spanBuilder(\"Span #2\").startSpan().end();\n+    tracer.spanBuilder(\"Span #3\").startSpan().end();\n+\n+    // When exiting, it is recommended to call the shutdown method. This method calls `shutdown` on\n+    // all configured SpanProcessors. This way, the configured exporters can release all resources\n+    // and terminate their job sending the remaining traces to their back end.\n+    OpenTelemetrySdk.getTracerProvider().shutdown();\n+  }\n+\n+  private static void defaultSpanProcessors() throws Exception {\n+    // OpenTelemetry offers 3 different default span processors:\n+    //   - SimpleSpanProcessor\n+    //   - BatchSpanProcessor\n+    //   - MultiSpanProcessor\n+    // Default span processors require an exporter as parameter. In this example we use the\n+    // LoggingSpanExporter which prints on the console output the spans.\n+\n+    // Configure the simple spans processor. This span processor exports span immediately after they\n+    // are ended.\n+    SimpleSpansProcessor simpleSpansProcessor = SimpleSpansProcessor.newBuilder(exporter).build();\n+    tracerProvider.addSpanProcessor(simpleSpansProcessor);\n+\n+    // Configure the batch spans processor. This span processor exports span in batches.\n+    BatchSpansProcessor batchSpansProcessor =\n+        BatchSpansProcessor.newBuilder(exporter)\n+            .reportOnlySampled(true) // send to the exporter only spans that have been sampled\n+            .setMaxExportBatchSize(512) // set the maximum batch size to use\n+            .setMaxQueueSize(2048) // set the queue size. This must be >= the export batch size\n+            .setExporterTimeoutMillis(\n+                30_000) // set the max amount of time an export can run before getting interrupted\n+            .setScheduleDelayMillis(5000) // set time between two different exports\n+            .build();\n+    tracerProvider.addSpanProcessor(batchSpansProcessor);\n+\n+    // Configure the multi spans processor. A MultiSpanProcessor accepts a list of Span Processors.\n+    SpanProcessor multiSpanProcessor =\n+        MultiSpanProcessor.create(Arrays.asList(simpleSpansProcessor, batchSpansProcessor));\n+    tracerProvider.addSpanProcessor(multiSpanProcessor);\n+  }\n+\n+  private static void customSpanProcessor() throws Exception {\n+    // We can also implement our own SpanProcessor. It is only necessary to implement the respective", "originalCommit": "168d4728ef519ddf653491312a5a5ecf62962844", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkyNDYxMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1003#discussion_r396924613", "bodyText": "I will remove complete this case and move the explanatory comments into the custom SpanProcessor in ConfigureTraceExample.", "author": "thisthat", "createdAt": "2020-03-24T06:24:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgwNjg5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "36fc69b3d61b8013b79f3732f8ffd55fcbb2cba0", "chunk": "diff --git a/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureSpanProcessorExample.java b/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureSpanProcessorExample.java\nindex 4da059bd0..54e7a0255 100644\n--- a/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureSpanProcessorExample.java\n+++ b/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureSpanProcessorExample.java\n\n@@ -20,7 +20,6 @@ import io.opentelemetry.exporters.logging.LoggingSpanExporter;\n import io.opentelemetry.sdk.OpenTelemetrySdk;\n import io.opentelemetry.sdk.example.unsafe.DemoUtils;\n import io.opentelemetry.sdk.trace.MultiSpanProcessor;\n-import io.opentelemetry.sdk.trace.ReadableSpan;\n import io.opentelemetry.sdk.trace.SpanProcessor;\n import io.opentelemetry.sdk.trace.TracerSdk;\n import io.opentelemetry.sdk.trace.TracerSdkProvider;\n"}}, {"oid": "36fc69b3d61b8013b79f3732f8ffd55fcbb2cba0", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/36fc69b3d61b8013b79f3732f8ffd55fcbb2cba0", "message": "Remove custom SpanProcessor", "committedDate": "2020-03-24T06:25:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI3NzI5Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1003#discussion_r397277293", "bodyText": "why not just tracerProvider.shutdown()", "author": "bogdandrutu", "createdAt": "2020-03-24T16:11:45Z", "path": "examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureSpanProcessorExample.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.example;\n+\n+import io.opentelemetry.exporters.logging.LoggingSpanExporter;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.example.unsafe.DemoUtils;\n+import io.opentelemetry.sdk.trace.MultiSpanProcessor;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.sdk.trace.TracerSdk;\n+import io.opentelemetry.sdk.trace.TracerSdkProvider;\n+import io.opentelemetry.sdk.trace.export.BatchSpansProcessor;\n+import io.opentelemetry.sdk.trace.export.SimpleSpansProcessor;\n+import java.util.Arrays;\n+\n+/** This example shows how to instantiate different Span Processors. */\n+class ConfigureSpanProcessorExample {\n+\n+  static LoggingSpanExporter exporter = new LoggingSpanExporter();\n+\n+  // Get the Tracer Provider\n+  static TracerSdkProvider tracerProvider = OpenTelemetrySdk.getTracerProvider();\n+  // Acquire a tracer\n+  static TracerSdk tracer = tracerProvider.get(\"ConfigureSpanProcessorExample\");\n+\n+  public static void main(String[] args) throws Exception {\n+\n+    // Example how to configure the default SpanProcessors.\n+    defaultSpanProcessors();\n+    // Print to the console the list of span processors enabled.\n+    DemoUtils.printProcessorList(tracer);\n+\n+    // We generate some Spans so we can see some output on the console.\n+    tracer.spanBuilder(\"Span #1\").startSpan().end();\n+    tracer.spanBuilder(\"Span #2\").startSpan().end();\n+    tracer.spanBuilder(\"Span #3\").startSpan().end();\n+\n+    // When exiting, it is recommended to call the shutdown method. This method calls `shutdown` on\n+    // all configured SpanProcessors. This way, the configured exporters can release all resources\n+    // and terminate their job sending the remaining traces to their back end.\n+    OpenTelemetrySdk.getTracerProvider().shutdown();", "originalCommit": "36fc69b3d61b8013b79f3732f8ffd55fcbb2cba0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "526ac507bbbabfe10361ff5880294dc25a0f869e", "chunk": "diff --git a/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureSpanProcessorExample.java b/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureSpanProcessorExample.java\nindex 54e7a0255..955ea1290 100644\n--- a/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureSpanProcessorExample.java\n+++ b/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureSpanProcessorExample.java\n\n@@ -18,7 +18,6 @@ package io.opentelemetry.sdk.example;\n \n import io.opentelemetry.exporters.logging.LoggingSpanExporter;\n import io.opentelemetry.sdk.OpenTelemetrySdk;\n-import io.opentelemetry.sdk.example.unsafe.DemoUtils;\n import io.opentelemetry.sdk.trace.MultiSpanProcessor;\n import io.opentelemetry.sdk.trace.SpanProcessor;\n import io.opentelemetry.sdk.trace.TracerSdk;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI3ODk4MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1003#discussion_r397278980", "bodyText": "TraceConfig config = tracerProvider.getActiveTraceConfig();", "author": "bogdandrutu", "createdAt": "2020-03-24T16:13:53Z", "path": "examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.example;\n+\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.ReadableSpan;\n+import io.opentelemetry.sdk.trace.Sampler;\n+import io.opentelemetry.sdk.trace.Samplers;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.sdk.trace.TracerSdk;\n+import io.opentelemetry.sdk.trace.TracerSdkProvider;\n+import io.opentelemetry.sdk.trace.config.TraceConfig;\n+import io.opentelemetry.trace.Link;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceId;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+class ConfigureTraceExample {\n+\n+  // Class that prints in the console custom information about the spans for the sake of the\n+  // example. For more details about the default SpanProcessor, refer to\n+  // ConfigureSpanProcessorExample.java\n+  private static class MyProcessor implements SpanProcessor {\n+\n+    @Override\n+    public void onStart(ReadableSpan span) {\n+      // We just do something when a span ends.\n+    }\n+\n+    @Override\n+    public boolean isStartRequired() {\n+      // This method is called at initialization of the current SpanProcessor.\n+      // If this method returns true, onStart() will be called for every created span.\n+      return false;\n+    }\n+\n+    @Override\n+    public void onEnd(ReadableSpan span) {\n+      Map<String, AttributeValue> attrs = span.toSpanData().getAttributes();\n+      System.out.printf(\"Span %s has %d attributes: \\n\", span.getName(), attrs.size());\n+      for (String key : attrs.keySet()) {\n+        System.out.printf(\"\\t %s : %s\\n\", key, attrs.get(key).getStringValue());\n+      }\n+      System.out.println(\"-----------------------\");\n+    }\n+\n+    @Override\n+    public boolean isEndRequired() {\n+      // This method is called at initialization of the current SpanProcessor.\n+      // If this method returns true, onEnd() will be called for every ended span.\n+      return true;\n+    }\n+\n+    @Override\n+    public void shutdown() {\n+      // This method is called when the OpenTelemetry library is shutting down;\n+      System.out.printf(\"Goodbye by %s\\n\", this.getClass().getSimpleName());\n+    }\n+\n+    @Override\n+    public void forceFlush() {\n+      // This method is useful for async Span Processors.\n+      // When this method is called, spans that are ended but not yet processed must be processed.\n+      System.out.println(\n+          \"This is a sync implementation, so every span is processed within the onEnd() method\");\n+    }\n+  }\n+  // Configure a tracer for these examples\n+  static TracerSdkProvider tracerProvider = OpenTelemetrySdk.getTracerProvider();\n+  static TracerSdk tracer = tracerProvider.get(\"ConfigureTraceExample\");\n+\n+  static {\n+    tracerProvider.addSpanProcessor(new MyProcessor());\n+  }\n+\n+  public static void main(String[] args) {\n+\n+    // TraceConfig handles the global tracing configuration\n+    TraceConfig config = TraceConfig.getDefault();", "originalCommit": "36fc69b3d61b8013b79f3732f8ffd55fcbb2cba0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "526ac507bbbabfe10361ff5880294dc25a0f869e", "chunk": "diff --git a/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java b/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java\nindex 02776dd32..62353efb0 100644\n--- a/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java\n+++ b/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java\n\n@@ -17,14 +17,14 @@\n package io.opentelemetry.sdk.example;\n \n import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.exporters.logging.LoggingSpanExporter;\n import io.opentelemetry.sdk.OpenTelemetrySdk;\n-import io.opentelemetry.sdk.trace.ReadableSpan;\n import io.opentelemetry.sdk.trace.Sampler;\n import io.opentelemetry.sdk.trace.Samplers;\n-import io.opentelemetry.sdk.trace.SpanProcessor;\n import io.opentelemetry.sdk.trace.TracerSdk;\n import io.opentelemetry.sdk.trace.TracerSdkProvider;\n import io.opentelemetry.sdk.trace.config.TraceConfig;\n+import io.opentelemetry.sdk.trace.export.SimpleSpansProcessor;\n import io.opentelemetry.trace.Link;\n import io.opentelemetry.trace.Span;\n import io.opentelemetry.trace.SpanContext;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI3OTcxMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1003#discussion_r397279710", "bodyText": "TraceConfig newConf = tracerProvider.getActiveTraceConfig().toBuilder().setMaxNumberOfAttributes(1).build();", "author": "bogdandrutu", "createdAt": "2020-03-24T16:14:47Z", "path": "examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.example;\n+\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.ReadableSpan;\n+import io.opentelemetry.sdk.trace.Sampler;\n+import io.opentelemetry.sdk.trace.Samplers;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.sdk.trace.TracerSdk;\n+import io.opentelemetry.sdk.trace.TracerSdkProvider;\n+import io.opentelemetry.sdk.trace.config.TraceConfig;\n+import io.opentelemetry.trace.Link;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceId;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+class ConfigureTraceExample {\n+\n+  // Class that prints in the console custom information about the spans for the sake of the\n+  // example. For more details about the default SpanProcessor, refer to\n+  // ConfigureSpanProcessorExample.java\n+  private static class MyProcessor implements SpanProcessor {\n+\n+    @Override\n+    public void onStart(ReadableSpan span) {\n+      // We just do something when a span ends.\n+    }\n+\n+    @Override\n+    public boolean isStartRequired() {\n+      // This method is called at initialization of the current SpanProcessor.\n+      // If this method returns true, onStart() will be called for every created span.\n+      return false;\n+    }\n+\n+    @Override\n+    public void onEnd(ReadableSpan span) {\n+      Map<String, AttributeValue> attrs = span.toSpanData().getAttributes();\n+      System.out.printf(\"Span %s has %d attributes: \\n\", span.getName(), attrs.size());\n+      for (String key : attrs.keySet()) {\n+        System.out.printf(\"\\t %s : %s\\n\", key, attrs.get(key).getStringValue());\n+      }\n+      System.out.println(\"-----------------------\");\n+    }\n+\n+    @Override\n+    public boolean isEndRequired() {\n+      // This method is called at initialization of the current SpanProcessor.\n+      // If this method returns true, onEnd() will be called for every ended span.\n+      return true;\n+    }\n+\n+    @Override\n+    public void shutdown() {\n+      // This method is called when the OpenTelemetry library is shutting down;\n+      System.out.printf(\"Goodbye by %s\\n\", this.getClass().getSimpleName());\n+    }\n+\n+    @Override\n+    public void forceFlush() {\n+      // This method is useful for async Span Processors.\n+      // When this method is called, spans that are ended but not yet processed must be processed.\n+      System.out.println(\n+          \"This is a sync implementation, so every span is processed within the onEnd() method\");\n+    }\n+  }\n+  // Configure a tracer for these examples\n+  static TracerSdkProvider tracerProvider = OpenTelemetrySdk.getTracerProvider();\n+  static TracerSdk tracer = tracerProvider.get(\"ConfigureTraceExample\");\n+\n+  static {\n+    tracerProvider.addSpanProcessor(new MyProcessor());\n+  }\n+\n+  public static void main(String[] args) {\n+\n+    // TraceConfig handles the global tracing configuration\n+    TraceConfig config = TraceConfig.getDefault();\n+    System.out.println(\">Default configuration<\");\n+    printTraceConfig();\n+\n+    // OpenTelemetry has a maximum of 32 Attributes by default for Spans, Links, and Events.\n+    Span multiAttrSpan = tracer.spanBuilder(\"Example Span Attributes\").startSpan();\n+    multiAttrSpan.setAttribute(\"Attribute 1\", \"first attribute value\");\n+    multiAttrSpan.setAttribute(\"Attribute 2\", \"second attribute value\");\n+    multiAttrSpan.end();\n+\n+    // The configuration can be changed in the trace provider.\n+    // For example, we can change the maximum number of Attributes per span to 1.\n+    TraceConfig newConf = config.toBuilder().setMaxNumberOfAttributes(1).build();", "originalCommit": "36fc69b3d61b8013b79f3732f8ffd55fcbb2cba0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "526ac507bbbabfe10361ff5880294dc25a0f869e", "chunk": "diff --git a/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java b/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java\nindex 02776dd32..62353efb0 100644\n--- a/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java\n+++ b/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java\n\n@@ -17,14 +17,14 @@\n package io.opentelemetry.sdk.example;\n \n import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.exporters.logging.LoggingSpanExporter;\n import io.opentelemetry.sdk.OpenTelemetrySdk;\n-import io.opentelemetry.sdk.trace.ReadableSpan;\n import io.opentelemetry.sdk.trace.Sampler;\n import io.opentelemetry.sdk.trace.Samplers;\n-import io.opentelemetry.sdk.trace.SpanProcessor;\n import io.opentelemetry.sdk.trace.TracerSdk;\n import io.opentelemetry.sdk.trace.TracerSdkProvider;\n import io.opentelemetry.sdk.trace.config.TraceConfig;\n+import io.opentelemetry.sdk.trace.export.SimpleSpansProcessor;\n import io.opentelemetry.trace.Link;\n import io.opentelemetry.trace.Span;\n import io.opentelemetry.trace.SpanContext;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI4MDQ4NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1003#discussion_r397280484", "bodyText": "Same comment, always start from the currentConfig to update one argument :)", "author": "bogdandrutu", "createdAt": "2020-03-24T16:15:49Z", "path": "examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.example;\n+\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.ReadableSpan;\n+import io.opentelemetry.sdk.trace.Sampler;\n+import io.opentelemetry.sdk.trace.Samplers;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.sdk.trace.TracerSdk;\n+import io.opentelemetry.sdk.trace.TracerSdkProvider;\n+import io.opentelemetry.sdk.trace.config.TraceConfig;\n+import io.opentelemetry.trace.Link;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceId;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+class ConfigureTraceExample {\n+\n+  // Class that prints in the console custom information about the spans for the sake of the\n+  // example. For more details about the default SpanProcessor, refer to\n+  // ConfigureSpanProcessorExample.java\n+  private static class MyProcessor implements SpanProcessor {\n+\n+    @Override\n+    public void onStart(ReadableSpan span) {\n+      // We just do something when a span ends.\n+    }\n+\n+    @Override\n+    public boolean isStartRequired() {\n+      // This method is called at initialization of the current SpanProcessor.\n+      // If this method returns true, onStart() will be called for every created span.\n+      return false;\n+    }\n+\n+    @Override\n+    public void onEnd(ReadableSpan span) {\n+      Map<String, AttributeValue> attrs = span.toSpanData().getAttributes();\n+      System.out.printf(\"Span %s has %d attributes: \\n\", span.getName(), attrs.size());\n+      for (String key : attrs.keySet()) {\n+        System.out.printf(\"\\t %s : %s\\n\", key, attrs.get(key).getStringValue());\n+      }\n+      System.out.println(\"-----------------------\");\n+    }\n+\n+    @Override\n+    public boolean isEndRequired() {\n+      // This method is called at initialization of the current SpanProcessor.\n+      // If this method returns true, onEnd() will be called for every ended span.\n+      return true;\n+    }\n+\n+    @Override\n+    public void shutdown() {\n+      // This method is called when the OpenTelemetry library is shutting down;\n+      System.out.printf(\"Goodbye by %s\\n\", this.getClass().getSimpleName());\n+    }\n+\n+    @Override\n+    public void forceFlush() {\n+      // This method is useful for async Span Processors.\n+      // When this method is called, spans that are ended but not yet processed must be processed.\n+      System.out.println(\n+          \"This is a sync implementation, so every span is processed within the onEnd() method\");\n+    }\n+  }\n+  // Configure a tracer for these examples\n+  static TracerSdkProvider tracerProvider = OpenTelemetrySdk.getTracerProvider();\n+  static TracerSdk tracer = tracerProvider.get(\"ConfigureTraceExample\");\n+\n+  static {\n+    tracerProvider.addSpanProcessor(new MyProcessor());\n+  }\n+\n+  public static void main(String[] args) {\n+\n+    // TraceConfig handles the global tracing configuration\n+    TraceConfig config = TraceConfig.getDefault();\n+    System.out.println(\">Default configuration<\");\n+    printTraceConfig();\n+\n+    // OpenTelemetry has a maximum of 32 Attributes by default for Spans, Links, and Events.\n+    Span multiAttrSpan = tracer.spanBuilder(\"Example Span Attributes\").startSpan();\n+    multiAttrSpan.setAttribute(\"Attribute 1\", \"first attribute value\");\n+    multiAttrSpan.setAttribute(\"Attribute 2\", \"second attribute value\");\n+    multiAttrSpan.end();\n+\n+    // The configuration can be changed in the trace provider.\n+    // For example, we can change the maximum number of Attributes per span to 1.\n+    TraceConfig newConf = config.toBuilder().setMaxNumberOfAttributes(1).build();\n+    tracerProvider.updateActiveTraceConfig(newConf);\n+    printTraceConfig();\n+\n+    // If more attributes than allowed by the configuration are set, they are dropped.\n+    Span singleAttrSpan = tracer.spanBuilder(\"Example Span Attributes\").startSpan();\n+    singleAttrSpan.setAttribute(\"Attribute 1\", \"first attribute value\");\n+    singleAttrSpan.setAttribute(\"Attribute 2\", \"second attribute value\");\n+    singleAttrSpan.end();\n+\n+    // OpenTelemetry offers three different default samplers:\n+    //  - alwaysOn: it samples all traces\n+    //  - alwaysOff: it rejects all traces\n+    //  - probability: it samples traces based on the probability passed in input\n+    TraceConfig alwaysOff =\n+        TraceConfig.getDefault().toBuilder().setSampler(Samplers.alwaysOff()).build();", "originalCommit": "36fc69b3d61b8013b79f3732f8ffd55fcbb2cba0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "526ac507bbbabfe10361ff5880294dc25a0f869e", "chunk": "diff --git a/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java b/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java\nindex 02776dd32..62353efb0 100644\n--- a/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java\n+++ b/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java\n\n@@ -17,14 +17,14 @@\n package io.opentelemetry.sdk.example;\n \n import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.exporters.logging.LoggingSpanExporter;\n import io.opentelemetry.sdk.OpenTelemetrySdk;\n-import io.opentelemetry.sdk.trace.ReadableSpan;\n import io.opentelemetry.sdk.trace.Sampler;\n import io.opentelemetry.sdk.trace.Samplers;\n-import io.opentelemetry.sdk.trace.SpanProcessor;\n import io.opentelemetry.sdk.trace.TracerSdk;\n import io.opentelemetry.sdk.trace.TracerSdkProvider;\n import io.opentelemetry.sdk.trace.config.TraceConfig;\n+import io.opentelemetry.sdk.trace.export.SimpleSpansProcessor;\n import io.opentelemetry.trace.Link;\n import io.opentelemetry.trace.Span;\n import io.opentelemetry.trace.SpanContext;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI4MDk0MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1003#discussion_r397280940", "bodyText": "Just use the simplespanprocessor + loggingexporter?", "author": "bogdandrutu", "createdAt": "2020-03-24T16:16:23Z", "path": "examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.example;\n+\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.ReadableSpan;\n+import io.opentelemetry.sdk.trace.Sampler;\n+import io.opentelemetry.sdk.trace.Samplers;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.sdk.trace.TracerSdk;\n+import io.opentelemetry.sdk.trace.TracerSdkProvider;\n+import io.opentelemetry.sdk.trace.config.TraceConfig;\n+import io.opentelemetry.trace.Link;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceId;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+class ConfigureTraceExample {\n+\n+  // Class that prints in the console custom information about the spans for the sake of the\n+  // example. For more details about the default SpanProcessor, refer to\n+  // ConfigureSpanProcessorExample.java\n+  private static class MyProcessor implements SpanProcessor {", "originalCommit": "36fc69b3d61b8013b79f3732f8ffd55fcbb2cba0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYzMTk2Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1003#discussion_r397631963", "bodyText": "I wanted to showcase the possibility to create your own span processor with this class. Furthermore, with this class the attributes are pretty printed while with the loggingexporter they would be embedded with other span information.", "author": "thisthat", "createdAt": "2020-03-25T06:27:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI4MDk0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkzMTE5NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1003#discussion_r397931194", "bodyText": "Then split it into one example to configure the SDK using TraceConfig + Views for metrics when they will be available. Second example to create your own SpanProcessor. I think most of the people are interested in the first example.", "author": "bogdandrutu", "createdAt": "2020-03-25T15:10:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI4MDk0MA=="}], "type": "inlineReview", "revised_code": {"commit": "526ac507bbbabfe10361ff5880294dc25a0f869e", "chunk": "diff --git a/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java b/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java\nindex 02776dd32..62353efb0 100644\n--- a/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java\n+++ b/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java\n\n@@ -17,14 +17,14 @@\n package io.opentelemetry.sdk.example;\n \n import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.exporters.logging.LoggingSpanExporter;\n import io.opentelemetry.sdk.OpenTelemetrySdk;\n-import io.opentelemetry.sdk.trace.ReadableSpan;\n import io.opentelemetry.sdk.trace.Sampler;\n import io.opentelemetry.sdk.trace.Samplers;\n-import io.opentelemetry.sdk.trace.SpanProcessor;\n import io.opentelemetry.sdk.trace.TracerSdk;\n import io.opentelemetry.sdk.trace.TracerSdkProvider;\n import io.opentelemetry.sdk.trace.config.TraceConfig;\n+import io.opentelemetry.sdk.trace.export.SimpleSpansProcessor;\n import io.opentelemetry.trace.Link;\n import io.opentelemetry.trace.Span;\n import io.opentelemetry.trace.SpanContext;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI4Mjc1OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1003#discussion_r397282758", "bodyText": "I really like this example.\nnit: Should this be public if you have a public main, sorry haven not written too many main functions in my life?", "author": "bogdandrutu", "createdAt": "2020-03-24T16:18:40Z", "path": "examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.example;\n+\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.ReadableSpan;\n+import io.opentelemetry.sdk.trace.Sampler;\n+import io.opentelemetry.sdk.trace.Samplers;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.sdk.trace.TracerSdk;\n+import io.opentelemetry.sdk.trace.TracerSdkProvider;\n+import io.opentelemetry.sdk.trace.config.TraceConfig;\n+import io.opentelemetry.trace.Link;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceId;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+class ConfigureTraceExample {", "originalCommit": "36fc69b3d61b8013b79f3732f8ffd55fcbb2cba0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYzMTk0NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1003#discussion_r397631944", "bodyText": "It is not required to execute the main, but the convention says this should be public since its the name of the file!", "author": "thisthat", "createdAt": "2020-03-25T06:27:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI4Mjc1OA=="}], "type": "inlineReview", "revised_code": {"commit": "526ac507bbbabfe10361ff5880294dc25a0f869e", "chunk": "diff --git a/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java b/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java\nindex 02776dd32..62353efb0 100644\n--- a/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java\n+++ b/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java\n\n@@ -17,14 +17,14 @@\n package io.opentelemetry.sdk.example;\n \n import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.exporters.logging.LoggingSpanExporter;\n import io.opentelemetry.sdk.OpenTelemetrySdk;\n-import io.opentelemetry.sdk.trace.ReadableSpan;\n import io.opentelemetry.sdk.trace.Sampler;\n import io.opentelemetry.sdk.trace.Samplers;\n-import io.opentelemetry.sdk.trace.SpanProcessor;\n import io.opentelemetry.sdk.trace.TracerSdk;\n import io.opentelemetry.sdk.trace.TracerSdkProvider;\n import io.opentelemetry.sdk.trace.config.TraceConfig;\n+import io.opentelemetry.sdk.trace.export.SimpleSpansProcessor;\n import io.opentelemetry.trace.Link;\n import io.opentelemetry.trace.Span;\n import io.opentelemetry.trace.SpanContext;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI4MzQ1Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1003#discussion_r397283457", "bodyText": "Can we just remove this for the moment? Is it a big downgrade in experience?", "author": "bogdandrutu", "createdAt": "2020-03-24T16:19:36Z", "path": "examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/unsafe/DemoUtils.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.example.unsafe;\n+\n+import io.opentelemetry.sdk.trace.MultiSpanProcessor;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.sdk.trace.TracerSdk;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.util.List;\n+\n+/**\n+ * These methods use reflection to access private fields of the tracer. This is meant as\n+ * demonstration only. It is SEVERELY discouraged to access private fields since they are shared\n+ * among different threads.\n+ */\n+@SuppressWarnings(\"unchecked\")\n+public class DemoUtils {", "originalCommit": "36fc69b3d61b8013b79f3732f8ffd55fcbb2cba0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYzNDIzNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1003#discussion_r397634235", "bodyText": "I know this is a hacky way of doing things that will hardly scale with further changes. Unfortunately, I don't have another solution for showing to the end user of the ConfigureSpanProcessorExample example which SpanProcessor is initialized.\nWould you suggest to remove the console output for that example along with the DemoUtils class?", "author": "thisthat", "createdAt": "2020-03-25T06:35:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI4MzQ1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkzMjcyMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1003#discussion_r397932722", "bodyText": "Let's add a DebugString() or ToString() method on the provider SDK that prints this information for debugging purposes :). What do you think?", "author": "bogdandrutu", "createdAt": "2020-03-25T15:11:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI4MzQ1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODExMTI5OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1003#discussion_r398111298", "bodyText": "It sounds a very good solution!", "author": "thisthat", "createdAt": "2020-03-25T19:23:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI4MzQ1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEyNTY1MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1003#discussion_r398125650", "bodyText": "After a tiny bit of investigation, this requires to add such a method in all SpanProcessor implementation. I will simply add a comment that tells the reader which SpanProcessor is registered.", "author": "thisthat", "createdAt": "2020-03-25T19:48:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI4MzQ1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1NDYxMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1003#discussion_r398954610", "bodyText": "So personally I don't mind having this util class here - I suggest following this up in a PR/issue if you really want it out @bogdandrutu ;)", "author": "carlosalberto", "createdAt": "2020-03-26T23:38:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI4MzQ1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM0ODg3MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1003#discussion_r399348870", "bodyText": "@thisthat you mentioned that you removed this?", "author": "bogdandrutu", "createdAt": "2020-03-27T15:29:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI4MzQ1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM1OTQ4Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1003#discussion_r399359486", "bodyText": "I removed any reference to it, but not the file itself \ud83d\ude05\nGone for good in fc8d749", "author": "thisthat", "createdAt": "2020-03-27T15:44:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI4MzQ1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "fc8d749141823b177cd0135b5341d87794c6f76a", "chunk": "diff --git a/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/unsafe/DemoUtils.java b/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/unsafe/DemoUtils.java\ndeleted file mode 100644\nindex 123c7d5c3..000000000\n--- a/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/unsafe/DemoUtils.java\n+++ /dev/null\n\n@@ -1,61 +0,0 @@\n-/*\n- * Copyright 2020, OpenTelemetry Authors\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package io.opentelemetry.sdk.example.unsafe;\n-\n-import io.opentelemetry.sdk.trace.MultiSpanProcessor;\n-import io.opentelemetry.sdk.trace.SpanProcessor;\n-import io.opentelemetry.sdk.trace.TracerSdk;\n-import java.lang.reflect.Field;\n-import java.lang.reflect.Method;\n-import java.util.List;\n-\n-/**\n- * These methods use reflection to access private fields of the tracer. This is meant as\n- * demonstration only. It is SEVERELY discouraged to access private fields since they are shared\n- * among different threads.\n- */\n-@SuppressWarnings(\"unchecked\")\n-public class DemoUtils {\n-\n-  public static void printProcessorList(TracerSdk tracer) throws Exception {\n-    Field sharedStateField = tracer.getClass().getDeclaredField(\"sharedState\");\n-    sharedStateField.setAccessible(true);\n-    Object sharedState = sharedStateField.get(tracer);\n-    Method method = sharedState.getClass().getDeclaredMethod(\"getActiveSpanProcessor\");\n-    method.setAccessible(true);\n-    Object multiSpanProcessor = method.invoke(sharedState);\n-    Field spanListField = multiSpanProcessor.getClass().getDeclaredField(\"spanProcessorsAll\");\n-    spanListField.setAccessible(true);\n-    List<SpanProcessor> spanProcessors = (List) spanListField.get(multiSpanProcessor);\n-    System.out.println(spanProcessors.size() + \" active span processors:\");\n-    printProcessorList(spanProcessors, 1);\n-  }\n-\n-  static void printProcessorList(List<SpanProcessor> spanProcessors, int tab) throws Exception {\n-    String tabs = new String(new char[tab]).replace(\"\\0\", \"\\t\");\n-    for (SpanProcessor spanProcessor : spanProcessors) {\n-      System.out.print(tabs + \"- \");\n-      System.out.println(spanProcessor.getClass().getName());\n-      if (spanProcessor instanceof MultiSpanProcessor) {\n-        Field listProcessors = spanProcessor.getClass().getDeclaredField(\"spanProcessorsAll\");\n-        listProcessors.setAccessible(true);\n-        List<SpanProcessor> multiProcessorList = (List) listProcessors.get(spanProcessor);\n-        printProcessorList(multiProcessorList, tab + 1);\n-      }\n-    }\n-  }\n-}\n"}}, {"oid": "526ac507bbbabfe10361ff5880294dc25a0f869e", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/526ac507bbbabfe10361ff5880294dc25a0f869e", "message": "Address feedback on examples", "committedDate": "2020-03-25T19:54:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM0ODM3MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1003#discussion_r399348370", "bodyText": "Collections.emptyMap() is immutable :)", "author": "bogdandrutu", "createdAt": "2020-03-27T15:28:48Z", "path": "examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.example;\n+\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.exporters.logging.LoggingSpanExporter;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.Sampler;\n+import io.opentelemetry.sdk.trace.Samplers;\n+import io.opentelemetry.sdk.trace.TracerSdk;\n+import io.opentelemetry.sdk.trace.TracerSdkProvider;\n+import io.opentelemetry.sdk.trace.config.TraceConfig;\n+import io.opentelemetry.sdk.trace.export.SimpleSpansProcessor;\n+import io.opentelemetry.trace.Link;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceId;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+class ConfigureTraceExample {\n+\n+  // Configure a tracer for these examples\n+  static TracerSdkProvider tracerProvider = OpenTelemetrySdk.getTracerProvider();\n+  static TracerSdk tracer = tracerProvider.get(\"ConfigureTraceExample\");\n+\n+  static {\n+    tracerProvider.addSpanProcessor(\n+        SimpleSpansProcessor.newBuilder(new LoggingSpanExporter()).build());\n+  }\n+\n+  public static void main(String[] args) {\n+\n+    // TraceConfig handles the global tracing configuration\n+    printTraceConfig();\n+\n+    // OpenTelemetry has a maximum of 32 Attributes by default for Spans, Links, and Events.\n+    Span multiAttrSpan = tracer.spanBuilder(\"Example Span Attributes\").startSpan();\n+    multiAttrSpan.setAttribute(\"Attribute 1\", \"first attribute value\");\n+    multiAttrSpan.setAttribute(\"Attribute 2\", \"second attribute value\");\n+    multiAttrSpan.end();\n+\n+    // The configuration can be changed in the trace provider.\n+    // For example, we can change the maximum number of Attributes per span to 1.\n+    TraceConfig newConf =\n+        tracerProvider.getActiveTraceConfig().toBuilder().setMaxNumberOfAttributes(1).build();\n+    tracerProvider.updateActiveTraceConfig(newConf);\n+    printTraceConfig();\n+\n+    // If more attributes than allowed by the configuration are set, they are dropped.\n+    Span singleAttrSpan = tracer.spanBuilder(\"Example Span Attributes\").startSpan();\n+    singleAttrSpan.setAttribute(\"Attribute 1\", \"first attribute value\");\n+    singleAttrSpan.setAttribute(\"Attribute 2\", \"second attribute value\");\n+    singleAttrSpan.end();\n+\n+    // OpenTelemetry offers three different default samplers:\n+    //  - alwaysOn: it samples all traces\n+    //  - alwaysOff: it rejects all traces\n+    //  - probability: it samples traces based on the probability passed in input\n+    TraceConfig alwaysOff =\n+        tracerProvider.getActiveTraceConfig().toBuilder().setSampler(Samplers.alwaysOff()).build();\n+    TraceConfig alwaysOn =\n+        tracerProvider.getActiveTraceConfig().toBuilder().setSampler(Samplers.alwaysOn()).build();\n+    TraceConfig probability =\n+        tracerProvider\n+            .getActiveTraceConfig()\n+            .toBuilder()\n+            .setSampler(Samplers.probability(0.5))\n+            .build();\n+\n+    // We update the configuration to use the alwaysOff sampler.\n+    tracerProvider.updateActiveTraceConfig(alwaysOff);\n+    printTraceConfig();\n+    tracer.spanBuilder(\"Not forwarded to any processors\").startSpan().end();\n+    tracer.spanBuilder(\"Not forwarded to any processors\").startSpan().end();\n+\n+    // We update the configuration to use the alwaysOn sampler.\n+    tracerProvider.updateActiveTraceConfig(alwaysOn);\n+    printTraceConfig();\n+    tracer.spanBuilder(\"Forwarded to all processors\").startSpan().end();\n+    tracer.spanBuilder(\"Forwarded to all processors\").startSpan().end();\n+\n+    // We update the configuration to use the probability sampler which was configured to sample\n+    // only 50% of the spans.\n+    tracerProvider.updateActiveTraceConfig(probability);\n+    printTraceConfig();\n+    for (int i = 0; i < 10; i++) {\n+      tracer\n+          .spanBuilder(String.format(\"Span %d might be forwarded to all processors\", i))\n+          .startSpan()\n+          .end();\n+    }\n+\n+    // We can also implement our own sampler. We need to implement the\n+    // io.opentelemetry.sdk.trace.Sampler interface.\n+    class MySampler implements Sampler {\n+\n+      @Override\n+      public Decision shouldSample(\n+          SpanContext parentContext,\n+          TraceId traceId,\n+          SpanId spanId,\n+          String name,\n+          Span.Kind spanKind,\n+          Map<String, AttributeValue> attributes,\n+          List<Link> parentLinks) {\n+        // We sample only if the Span name contains \"SAMPLE\"\n+        return new Decision() {\n+\n+          @Override\n+          public boolean isSampled() {\n+            return name.contains(\"SAMPLE\");\n+          }\n+\n+          @Override\n+          public Map<String, AttributeValue> attributes() {\n+            // This method MUST return an immutable list of Attributes\n+            // that will be added to the generated Span.\n+            return Collections.unmodifiableMap(Collections.emptyMap());", "originalCommit": "526ac507bbbabfe10361ff5880294dc25a0f869e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM2NTA3Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1003#discussion_r399365072", "bodyText": "Please also fix this.", "author": "bogdandrutu", "createdAt": "2020-03-27T15:52:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM0ODM3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM5ODc2OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1003#discussion_r399398768", "bodyText": "done!", "author": "thisthat", "createdAt": "2020-03-27T16:42:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM0ODM3MA=="}], "type": "inlineReview", "revised_code": {"commit": "00dea4779fcc41f151e77227d999a878bc682a73", "chunk": "diff --git a/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java b/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java\nindex 62353efb0..37e7a9b4b 100644\n--- a/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java\n+++ b/examples/sdk-usage/src/main/java/io/opentelemetry/sdk/example/ConfigureTraceExample.java\n\n@@ -132,7 +132,7 @@ class ConfigureTraceExample {\n           public Map<String, AttributeValue> attributes() {\n             // This method MUST return an immutable list of Attributes\n             // that will be added to the generated Span.\n-            return Collections.unmodifiableMap(Collections.emptyMap());\n+            return Collections.emptyMap();\n           }\n         };\n       }\n"}}, {"oid": "fc8d749141823b177cd0135b5341d87794c6f76a", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/fc8d749141823b177cd0135b5341d87794c6f76a", "message": "Delete DemoUtil", "committedDate": "2020-03-27T15:43:59Z", "type": "commit"}, {"oid": "00dea4779fcc41f151e77227d999a878bc682a73", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/00dea4779fcc41f151e77227d999a878bc682a73", "message": "EmptyMap only", "committedDate": "2020-03-27T15:53:54Z", "type": "commit"}]}