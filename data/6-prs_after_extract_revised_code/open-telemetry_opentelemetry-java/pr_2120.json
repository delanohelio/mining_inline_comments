{"pr_number": 2120, "pr_title": "Move the AsynchronousInstrument callbacks to the builders.", "pr_createdAt": "2020-11-23T21:55:23Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/2120", "timeline": [{"oid": "10e61212d88884d979e2b41fe5e41245038ab314", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/10e61212d88884d979e2b41fe5e41245038ab314", "message": "Move the AsynchronousInstrument callbacks to the builders.\n\nDeprecate the existing setCallback method.\nUpdate the code in the SDK to use the new API.", "committedDate": "2020-11-23T21:53:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIzNzk1Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2120#discussion_r529237952", "bodyText": "Moving to Builder's seems like a great change. Just confirming, though not for this PR since it's the existing behavior, is setCallback good enough and not addCallback (more common in callback-oriented APIs I think)?", "author": "anuraaga", "createdAt": "2020-11-24T06:50:32Z", "path": "api/src/main/java/io/opentelemetry/api/metrics/AsynchronousInstrument.java", "diffHunk": "@@ -34,13 +34,26 @@\n    * exported then it will never be called.\n    *\n    * @param callback the callback to be executed before export.\n+   * @deprecated Please register the callback while building the instrument. This method will be\n+   *     deprecated in 0.13.0.\n    */\n+  @Deprecated\n   void setCallback(Callback<R> callback);\n \n   /** Builder class for {@link AsynchronousInstrument}. */\n-  interface Builder extends Instrument.Builder {\n+  interface Builder<R extends Result> extends Instrument.Builder {\n+    /**\n+     * Sets a callback that gets executed every collection interval.\n+     *\n+     * <p>Evaluation is deferred until needed, if this {@code AsynchronousInstrument} metric is not\n+     * exported then it will never be called.\n+     *\n+     * @param callback the callback to be executed before export.\n+     */\n+    Builder<R> setCallback(Callback<R> callback);", "originalCommit": "10e61212d88884d979e2b41fe5e41245038ab314", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcyOTE4OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2120#discussion_r529729188", "bodyText": "In this API, you can only associate a single callback, so I think it makes sense to call it set.", "author": "jkwatson", "createdAt": "2020-11-24T16:54:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIzNzk1Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIzODA3Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2120#discussion_r529238077", "bodyText": "Awesome!", "author": "anuraaga", "createdAt": "2020-11-24T06:50:54Z", "path": "extensions/runtime-metrics/src/main/java/io/opentelemetry/extension/metrics/runtime/MemoryPools.java", "diffHunk": "@@ -70,30 +68,20 @@ public MemoryPools() {\n \n   /** Export only the \"area\" metric. */\n   public void exportMemoryAreaMetric() {\n-    final LongUpDownSumObserver areaMetric =\n-        this.meter\n-            .longUpDownSumObserverBuilder(\"runtime.jvm.memory.area\")\n-            .setDescription(\"Bytes of a given JVM memory area.\")\n-            .setUnit(\"By\")\n-            .build();\n-    areaMetric.setCallback(", "originalCommit": "10e61212d88884d979e2b41fe5e41245038ab314", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTczMDQ0Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2120#discussion_r529730446", "bodyText": "obviously, we'll want to port this change over to the instrumentation repo, since we're deprecating this code. Mostly did this to verify that it was a viable usage pattern. :)", "author": "jkwatson", "createdAt": "2020-11-24T16:55:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIzODA3Nw=="}], "type": "inlineReview", "revised_code": null}]}