{"pr_number": 1257, "pr_title": "Add tests to verify immutability of the SpanData representation", "pr_createdAt": "2020-05-20T19:56:47Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1257", "timeline": [{"oid": "19545cca939145624cd94e5974319d4fc01708ad", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/19545cca939145624cd94e5974319d4fc01708ad", "message": "Add tests to verify immutability of the SpanData representation, and remove an extra wrapping of links.", "committedDate": "2020-05-20T19:47:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI5Nzc2Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1257#discussion_r428297766", "bodyText": "Let's be consistent and do the wrapping in one place.", "author": "bogdandrutu", "createdAt": "2020-05-20T20:47:09Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/SpanWrapper.java", "diffHunk": "@@ -59,7 +59,7 @@ static SpanWrapper create(\n       Status status) {\n     return new AutoValue_SpanWrapper(\n         delegate,\n-        Collections.unmodifiableList(links),\n+        links, // note: the caller has already made this unmodifiable\n         Collections.unmodifiableList(events),\n         Collections.unmodifiableMap(attributes),", "originalCommit": "19545cca939145624cd94e5974319d4fc01708ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMwNTQzMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1257#discussion_r428305432", "bodyText": "How do you feel about using guava's ImmutableList and ImmutableMap here? That way, the immutable nature can be enforced by parameter type.", "author": "jkwatson", "createdAt": "2020-05-20T21:02:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI5Nzc2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMwOTgwNw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1257#discussion_r428309807", "bodyText": "Hm. It's also true that, currently, if the span hasn't ended, the attributes will still be modified by the running span, making the unmodifiable wrapper not really immutable. The only way I know to solve this is to copy the Map's contents, rather than just wrapping.", "author": "jkwatson", "createdAt": "2020-05-20T21:11:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI5Nzc2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMxMzExMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1257#discussion_r428313110", "bodyText": "That was the bug that I mentioned in the previous PR. You need to have a\nprivate HashMap<> getImmutableAttributes() {\n  if (hasEnded) {\n    return Collections.unmodifiableMap(attributes)\n  }\n  return Collections.unmodifiableMap(new HashMap<>(attributes))\n}", "author": "bogdandrutu", "createdAt": "2020-05-20T21:18:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI5Nzc2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMyMDEzNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1257#discussion_r428320134", "bodyText": "ok. I added a test for this particular case, and made it pass.", "author": "jkwatson", "createdAt": "2020-05-20T21:33:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI5Nzc2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMyMDY0OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1257#discussion_r428320649", "bodyText": "(and moved the unmodifiable wrapping to all be in the RERS)", "author": "jkwatson", "createdAt": "2020-05-20T21:34:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI5Nzc2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "007e2435cb070db5ae352e552f340fb004475817", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/trace/SpanWrapper.java b/sdk/src/main/java/io/opentelemetry/sdk/trace/SpanWrapper.java\nindex 5b0870884..8923be0f9 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/trace/SpanWrapper.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/trace/SpanWrapper.java\n\n@@ -58,13 +61,7 @@ abstract class SpanWrapper implements SpanData {\n       int totalRecordedEvents,\n       Status status) {\n     return new AutoValue_SpanWrapper(\n-        delegate,\n-        links, // note: the caller has already made this unmodifiable\n-        Collections.unmodifiableList(events),\n-        Collections.unmodifiableMap(attributes),\n-        totalAttributeCount,\n-        totalRecordedEvents,\n-        status);\n+        delegate, links, events, attributes, totalAttributeCount, totalRecordedEvents, status);\n   }\n \n   @Override\n"}}, {"oid": "007e2435cb070db5ae352e552f340fb004475817", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/007e2435cb070db5ae352e552f340fb004475817", "message": "Add an additional mutability test, and fix a bug with a span that hasn't ended.", "committedDate": "2020-05-20T21:32:46Z", "type": "commit"}, {"oid": "45aa73b15a89e8190af8eb61d4442734d15c7ea4", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/45aa73b15a89e8190af8eb61d4442734d15c7ea4", "message": "fix a tiny typo", "committedDate": "2020-05-20T21:40:00Z", "type": "commit"}]}