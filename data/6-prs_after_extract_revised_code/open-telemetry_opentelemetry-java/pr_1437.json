{"pr_number": 1437, "pr_title": "Update Attributes API to comply the spec ", "pr_createdAt": "2020-07-20T14:37:14Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1437", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ0NzYxMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1437#discussion_r457447611", "bodyText": "Simple if would be much simpler :)", "author": "iNikem", "createdAt": "2020-07-20T14:38:32Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/resources/Resource.java", "diffHunk": "@@ -114,7 +114,31 @@ public static Resource getTelemetrySdk() {\n    */\n   public static Resource create(Attributes attributes) {\n     checkAttributes(Objects.requireNonNull(attributes, \"attributes\"));\n-    return new AutoValue_Resource(attributes);\n+    Attributes.Builder attrBuilder = Attributes.newBuilder();\n+    attributes.forEach(new NullRemover(attrBuilder));\n+    return new AutoValue_Resource(attrBuilder.build());\n+  }\n+\n+  private static final class NullRemover implements KeyValueConsumer<AttributeValue> {\n+    private final Attributes.Builder attrBuilder;\n+\n+    private NullRemover(Attributes.Builder attrBuilder) {\n+      this.attrBuilder = attrBuilder;\n+    }\n+\n+    @Override\n+    public void consume(String key, AttributeValue value) {\n+      switch (value.getType()) {", "originalCommit": "b2b6fc559eb85ad46f6452986841a22270270de2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "18e3719ac988d6acfede8a8462726db51e115263", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/resources/Resource.java b/sdk/src/main/java/io/opentelemetry/sdk/resources/Resource.java\nindex 098a0a364..35a593da0 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/resources/Resource.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/resources/Resource.java\n\n@@ -115,32 +118,45 @@ public abstract class Resource {\n   public static Resource create(Attributes attributes) {\n     checkAttributes(Objects.requireNonNull(attributes, \"attributes\"));\n     Attributes.Builder attrBuilder = Attributes.newBuilder();\n-    attributes.forEach(new NullRemover(attrBuilder));\n+    attributes.forEach(new NullValueFilter(attrBuilder));\n     return new AutoValue_Resource(attrBuilder.build());\n   }\n \n-  private static final class NullRemover implements KeyValueConsumer<AttributeValue> {\n+  private static final class NullValueFilter implements KeyValueConsumer<AttributeValue> {\n     private final Attributes.Builder attrBuilder;\n \n-    private NullRemover(Attributes.Builder attrBuilder) {\n+    private NullValueFilter(Attributes.Builder attrBuilder) {\n       this.attrBuilder = attrBuilder;\n     }\n \n     @Override\n     public void consume(String key, AttributeValue value) {\n-      switch (value.getType()) {\n-        case STRING:\n-          if (value.getStringValue() == null) {\n-            return;\n-          }\n-          break;\n-        default:\n-          break;\n+      boolean ignore = false;\n+      switch (value.getType()){\n+        case STRING: ignore = value.getStringValue() == null; break;\n+        case LONG_ARRAY: ignore = value.getLongArrayValue().equals(Collections.<Long>emptyList()); break;\n+        case DOUBLE_ARRAY: ignore = value.getDoubleArrayValue().equals(Collections.<Double>emptyList()); break;\n+        case BOOLEAN_ARRAY: ignore = value.getBooleanArrayValue().equals(Collections.<Boolean>emptyList()); break;\n+        case STRING_ARRAY: ignore = value.getStringArrayValue().equals(Collections.<String>emptyList()); break;\n+        default: break;\n+      }\n+      if (ignore) {\n+        return;\n       }\n       attrBuilder.setAttribute(key, value);\n     }\n   }\n \n+  /**\n+   * Returns a {@link Resource}. This resource information is loaded from the\n+   * OTEL_RESOURCE_ATTRIBUTES environment variable or otel.resource.attributes system properties.\n+   *\n+   * @return a {@code Resource}.\n+   */\n+  public static Resource getDefault() {\n+    return DEFAULT;\n+  }\n+\n   /**\n    * Returns a new, merged {@link Resource} by merging the current {@code Resource} with the {@code\n    * other} {@code Resource}. In case of a collision, current {@code Resource} takes precedence.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU3NTk4MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1437#discussion_r457575980", "bodyText": "How about \"NullValueFilter\" ?", "author": "jkwatson", "createdAt": "2020-07-20T17:30:26Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/resources/Resource.java", "diffHunk": "@@ -114,7 +114,31 @@ public static Resource getTelemetrySdk() {\n    */\n   public static Resource create(Attributes attributes) {\n     checkAttributes(Objects.requireNonNull(attributes, \"attributes\"));\n-    return new AutoValue_Resource(attributes);\n+    Attributes.Builder attrBuilder = Attributes.newBuilder();\n+    attributes.forEach(new NullRemover(attrBuilder));\n+    return new AutoValue_Resource(attrBuilder.build());\n+  }\n+\n+  private static final class NullRemover implements KeyValueConsumer<AttributeValue> {", "originalCommit": "b2b6fc559eb85ad46f6452986841a22270270de2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "18e3719ac988d6acfede8a8462726db51e115263", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/resources/Resource.java b/sdk/src/main/java/io/opentelemetry/sdk/resources/Resource.java\nindex 098a0a364..35a593da0 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/resources/Resource.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/resources/Resource.java\n\n@@ -115,32 +118,45 @@ public abstract class Resource {\n   public static Resource create(Attributes attributes) {\n     checkAttributes(Objects.requireNonNull(attributes, \"attributes\"));\n     Attributes.Builder attrBuilder = Attributes.newBuilder();\n-    attributes.forEach(new NullRemover(attrBuilder));\n+    attributes.forEach(new NullValueFilter(attrBuilder));\n     return new AutoValue_Resource(attrBuilder.build());\n   }\n \n-  private static final class NullRemover implements KeyValueConsumer<AttributeValue> {\n+  private static final class NullValueFilter implements KeyValueConsumer<AttributeValue> {\n     private final Attributes.Builder attrBuilder;\n \n-    private NullRemover(Attributes.Builder attrBuilder) {\n+    private NullValueFilter(Attributes.Builder attrBuilder) {\n       this.attrBuilder = attrBuilder;\n     }\n \n     @Override\n     public void consume(String key, AttributeValue value) {\n-      switch (value.getType()) {\n-        case STRING:\n-          if (value.getStringValue() == null) {\n-            return;\n-          }\n-          break;\n-        default:\n-          break;\n+      boolean ignore = false;\n+      switch (value.getType()){\n+        case STRING: ignore = value.getStringValue() == null; break;\n+        case LONG_ARRAY: ignore = value.getLongArrayValue().equals(Collections.<Long>emptyList()); break;\n+        case DOUBLE_ARRAY: ignore = value.getDoubleArrayValue().equals(Collections.<Double>emptyList()); break;\n+        case BOOLEAN_ARRAY: ignore = value.getBooleanArrayValue().equals(Collections.<Boolean>emptyList()); break;\n+        case STRING_ARRAY: ignore = value.getStringArrayValue().equals(Collections.<String>emptyList()); break;\n+        default: break;\n+      }\n+      if (ignore) {\n+        return;\n       }\n       attrBuilder.setAttribute(key, value);\n     }\n   }\n \n+  /**\n+   * Returns a {@link Resource}. This resource information is loaded from the\n+   * OTEL_RESOURCE_ATTRIBUTES environment variable or otel.resource.attributes system properties.\n+   *\n+   * @return a {@code Resource}.\n+   */\n+  public static Resource getDefault() {\n+    return DEFAULT;\n+  }\n+\n   /**\n    * Returns a new, merged {@link Resource} by merging the current {@code Resource} with the {@code\n    * other} {@code Resource}. In case of a collision, current {@code Resource} takes precedence.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ5NTU2MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1437#discussion_r458495561", "bodyText": "Why other values like null array is not removed?", "author": "bogdandrutu", "createdAt": "2020-07-22T02:23:58Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/resources/Resource.java", "diffHunk": "@@ -114,7 +114,25 @@ public static Resource getTelemetrySdk() {\n    */\n   public static Resource create(Attributes attributes) {\n     checkAttributes(Objects.requireNonNull(attributes, \"attributes\"));\n-    return new AutoValue_Resource(attributes);\n+    Attributes.Builder attrBuilder = Attributes.newBuilder();\n+    attributes.forEach(new NullValueFilter(attrBuilder));\n+    return new AutoValue_Resource(attrBuilder.build());\n+  }\n+\n+  private static final class NullValueFilter implements KeyValueConsumer<AttributeValue> {\n+    private final Attributes.Builder attrBuilder;\n+\n+    private NullValueFilter(Attributes.Builder attrBuilder) {\n+      this.attrBuilder = attrBuilder;\n+    }\n+\n+    @Override\n+    public void consume(String key, AttributeValue value) {\n+      if (value.getType() == AttributeValue.Type.STRING && value.getStringValue() == null) {\n+        return;\n+      }", "originalCommit": "387ce57026581b0868ebc21b2ef39905287c7f00", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUwMTg2MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1437#discussion_r458501860", "bodyText": "I think along these lines, if we're using null to model deletion, we should just store null directly, not an attribute value with a value of null.", "author": "anuraaga", "createdAt": "2020-07-22T02:47:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ5NTU2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIzNjU3MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1437#discussion_r459236571", "bodyText": "Because null values inside arrays are meaningful. Since the Attributes API does not create null attributes, it cannot exist a null value but only a value that contains an AttributeValue with null. Does it make sense?", "author": "thisthat", "createdAt": "2020-07-23T06:24:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ5NTU2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI3NTU2OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1437#discussion_r460275568", "bodyText": "No, it does not make sense. What if the \"array\" is null, not the value inside the array?", "author": "bogdandrutu", "createdAt": "2020-07-24T20:35:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ5NTU2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY0ODU3OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1437#discussion_r460648578", "bodyText": "The \"array\" cannot be null. Resource uses the Attributes class for storing attributes which creates always an object for arrays: https://github.com/open-telemetry/opentelemetry-java/blob/master/api/src/main/java/io/opentelemetry/common/Attributes.java#L204", "author": "thisthat", "createdAt": "2020-07-27T05:05:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ5NTU2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5NTY4OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1437#discussion_r462695688", "bodyText": "Very strange behavior for arrays then:\n\n  \n    \n      opentelemetry-java/api/src/main/java/io/opentelemetry/common/AttributeValue.java\n    \n    \n         Line 331\n      in\n      78ed649\n    \n    \n    \n    \n\n        \n          \n           if (stringValues == null) { \n        \n    \n  \n\n\nWe replace with empty array/list.... Not too much consistency.", "author": "bogdandrutu", "createdAt": "2020-07-30T02:22:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ5NTU2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI3MzE5OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1437#discussion_r463273199", "bodyText": "General Java guidelines are to never return null for a collection, but use an empty one (per Josh Bloch in Effective Java). So, I think this behavior is a good one.", "author": "jkwatson", "createdAt": "2020-07-30T21:10:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ5NTU2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcyNTcxMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1437#discussion_r464725710", "bodyText": "We discussed about this. It is not we return null, it is we get null and add an entry with empty collection, why then not add an entry with empty string?", "author": "bogdandrutu", "createdAt": "2020-08-04T00:09:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ5NTU2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkwMzQ5MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1437#discussion_r464903491", "bodyText": "I have uniformed the handling of null in 18e3719. The following cases are dropped (or removed if the key was already present):\n\nnull strings, e.g. (String) null\nnew arrays with 0 length, e.g. new String[0]\nnull arrays, e.g. (String[]) null\n\nInstead, the following are stored as attributes:\n\nEmpty strings\nArrays with null values as members, e.g. new String[] {null}", "author": "thisthat", "createdAt": "2020-08-04T08:56:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ5NTU2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "18e3719ac988d6acfede8a8462726db51e115263", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/resources/Resource.java b/sdk/src/main/java/io/opentelemetry/sdk/resources/Resource.java\nindex d7f4acd39..35a593da0 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/resources/Resource.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/resources/Resource.java\n\n@@ -128,13 +131,32 @@ public abstract class Resource {\n \n     @Override\n     public void consume(String key, AttributeValue value) {\n-      if (value.getType() == AttributeValue.Type.STRING && value.getStringValue() == null) {\n+      boolean ignore = false;\n+      switch (value.getType()){\n+        case STRING: ignore = value.getStringValue() == null; break;\n+        case LONG_ARRAY: ignore = value.getLongArrayValue().equals(Collections.<Long>emptyList()); break;\n+        case DOUBLE_ARRAY: ignore = value.getDoubleArrayValue().equals(Collections.<Double>emptyList()); break;\n+        case BOOLEAN_ARRAY: ignore = value.getBooleanArrayValue().equals(Collections.<Boolean>emptyList()); break;\n+        case STRING_ARRAY: ignore = value.getStringArrayValue().equals(Collections.<String>emptyList()); break;\n+        default: break;\n+      }\n+      if (ignore) {\n         return;\n       }\n       attrBuilder.setAttribute(key, value);\n     }\n   }\n \n+  /**\n+   * Returns a {@link Resource}. This resource information is loaded from the\n+   * OTEL_RESOURCE_ATTRIBUTES environment variable or otel.resource.attributes system properties.\n+   *\n+   * @return a {@code Resource}.\n+   */\n+  public static Resource getDefault() {\n+    return DEFAULT;\n+  }\n+\n   /**\n    * Returns a new, merged {@link Resource} by merging the current {@code Resource} with the {@code\n    * other} {@code Resource}. In case of a collision, current {@code Resource} takes precedence.\n"}}, {"oid": "18e3719ac988d6acfede8a8462726db51e115263", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/18e3719ac988d6acfede8a8462726db51e115263", "message": "Uniform null handling", "committedDate": "2020-08-04T08:43:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM0NzgzNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1437#discussion_r465347834", "bodyText": "It might be easier just to call isEmpty() rather than comparing explicitly to an empty list. And, this makes me think we could have an isEmpty() method on the AttributeValue, and then you can skip all of the switch branches and have the logic much more simple.", "author": "jkwatson", "createdAt": "2020-08-04T21:44:41Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/resources/Resource.java", "diffHunk": "@@ -116,7 +117,45 @@ public static Resource getTelemetrySdk() {\n    */\n   public static Resource create(Attributes attributes) {\n     checkAttributes(Objects.requireNonNull(attributes, \"attributes\"));\n-    return new AutoValue_Resource(attributes);\n+    Attributes.Builder attrBuilder = Attributes.newBuilder();\n+    attributes.forEach(new NullValueFilter(attrBuilder));\n+    return new AutoValue_Resource(attrBuilder.build());\n+  }\n+\n+  private static final class NullValueFilter implements KeyValueConsumer<AttributeValue> {\n+    private final Attributes.Builder attrBuilder;\n+\n+    private NullValueFilter(Attributes.Builder attrBuilder) {\n+      this.attrBuilder = attrBuilder;\n+    }\n+\n+    @Override\n+    public void consume(String key, AttributeValue value) {\n+      boolean ignore = false;\n+      switch (value.getType()) {\n+        case STRING:\n+          ignore = value.getStringValue() == null;\n+          break;\n+        case LONG_ARRAY:\n+          ignore = value.getLongArrayValue().equals(Collections.<Long>emptyList());", "originalCommit": "d9944df874dc8670e72618b6f0926f18c92c287f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d349e45efe582f5d52d841a94374f643df14c771", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/resources/Resource.java b/sdk/src/main/java/io/opentelemetry/sdk/resources/Resource.java\nindex 55bc5c939..9fbd62ec3 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/resources/Resource.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/resources/Resource.java\n\n@@ -118,42 +121,28 @@ public abstract class Resource {\n   public static Resource create(Attributes attributes) {\n     checkAttributes(Objects.requireNonNull(attributes, \"attributes\"));\n     Attributes.Builder attrBuilder = Attributes.newBuilder();\n-    attributes.forEach(new NullValueFilter(attrBuilder));\n+    attributes.forEach(new NullRemover(attrBuilder));\n     return new AutoValue_Resource(attrBuilder.build());\n   }\n \n-  private static final class NullValueFilter implements KeyValueConsumer<AttributeValue> {\n+  private static final class NullRemover implements KeyValueConsumer<AttributeValue> {\n     private final Attributes.Builder attrBuilder;\n \n-    private NullValueFilter(Attributes.Builder attrBuilder) {\n+    private NullRemover(Attributes.Builder attrBuilder) {\n       this.attrBuilder = attrBuilder;\n     }\n \n     @Override\n     public void consume(String key, AttributeValue value) {\n-      boolean ignore = false;\n       switch (value.getType()) {\n         case STRING:\n-          ignore = value.getStringValue() == null;\n-          break;\n-        case LONG_ARRAY:\n-          ignore = value.getLongArrayValue().equals(Collections.<Long>emptyList());\n-          break;\n-        case DOUBLE_ARRAY:\n-          ignore = value.getDoubleArrayValue().equals(Collections.<Double>emptyList());\n-          break;\n-        case BOOLEAN_ARRAY:\n-          ignore = value.getBooleanArrayValue().equals(Collections.<Boolean>emptyList());\n-          break;\n-        case STRING_ARRAY:\n-          ignore = value.getStringArrayValue().equals(Collections.<String>emptyList());\n+          if (value.getStringValue() == null) {\n+            return;\n+          }\n           break;\n         default:\n           break;\n       }\n-      if (ignore) {\n-        return;\n-      }\n       attrBuilder.setAttribute(key, value);\n     }\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxMTAwMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1437#discussion_r465511000", "bodyText": "I thought we got on the same page but see this didn't change yet - can't we filter in the producer here?\nhttps://github.com/open-telemetry/opentelemetry-java/blob/master/api/src/main/java/io/opentelemetry/common/ImmutableKeyValuePairs.java#L58", "author": "anuraaga", "createdAt": "2020-08-05T06:51:52Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/resources/Resource.java", "diffHunk": "@@ -116,7 +116,25 @@ public static Resource getTelemetrySdk() {\n    */\n   public static Resource create(Attributes attributes) {\n     checkAttributes(Objects.requireNonNull(attributes, \"attributes\"));\n-    return new AutoValue_Resource(attributes);\n+    Attributes.Builder attrBuilder = Attributes.newBuilder();\n+    attributes.forEach(new NullValueFilter(attrBuilder));\n+    return new AutoValue_Resource(attrBuilder.build());\n+  }\n+\n+  private static final class NullValueFilter implements KeyValueConsumer<AttributeValue> {", "originalCommit": "7aa5eacf81d5ef89255005ae917b6c51d5ddb10d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0MDYxMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1437#discussion_r465540613", "bodyText": "In the last SIG meeting, we agree on keeping the same behavior for all the interfaces that can create attributes.", "author": "thisthat", "createdAt": "2020-08-05T07:52:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxMTAwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU1NjM5Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1437#discussion_r465556392", "bodyText": "I may finally understand, is it that here\nhttps://github.com/open-telemetry/opentelemetry-specification/blob/b4e327c3fbc62be811036cac572e4cc0d57dd560/specification/trace/api.md#set-attributes\nwhere we discuss Attribute values of null are considered to be not set and get discarded as if that SetAttribute call had never been made., this only refers to Spans? But Attributes are more general and could permit null values in other cases? It seems very confusing that we would support null attributes (not talking about as an implementation detail for modeling deletion for example but as actually exported value), but if that reading is correct than I agree we wouldn't filter in the producer, and may need to reclarify the spec.", "author": "anuraaga", "createdAt": "2020-08-05T08:20:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxMTAwMA=="}], "type": "inlineReview", "revised_code": {"commit": "d349e45efe582f5d52d841a94374f643df14c771", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/resources/Resource.java b/sdk/src/main/java/io/opentelemetry/sdk/resources/Resource.java\nindex e14374775..9fbd62ec3 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/resources/Resource.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/resources/Resource.java\n\n@@ -117,21 +121,27 @@ public abstract class Resource {\n   public static Resource create(Attributes attributes) {\n     checkAttributes(Objects.requireNonNull(attributes, \"attributes\"));\n     Attributes.Builder attrBuilder = Attributes.newBuilder();\n-    attributes.forEach(new NullValueFilter(attrBuilder));\n+    attributes.forEach(new NullRemover(attrBuilder));\n     return new AutoValue_Resource(attrBuilder.build());\n   }\n \n-  private static final class NullValueFilter implements KeyValueConsumer<AttributeValue> {\n+  private static final class NullRemover implements KeyValueConsumer<AttributeValue> {\n     private final Attributes.Builder attrBuilder;\n \n-    private NullValueFilter(Attributes.Builder attrBuilder) {\n+    private NullRemover(Attributes.Builder attrBuilder) {\n       this.attrBuilder = attrBuilder;\n     }\n \n     @Override\n     public void consume(String key, AttributeValue value) {\n-      if (value.isEmpty()) {\n-        return;\n+      switch (value.getType()) {\n+        case STRING:\n+          if (value.getStringValue() == null) {\n+            return;\n+          }\n+          break;\n+        default:\n+          break;\n       }\n       attrBuilder.setAttribute(key, value);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg1NTI1Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1437#discussion_r465855253", "bodyText": "we could just have this be concrete and return false and only override it for the types that support emptiness.", "author": "jkwatson", "createdAt": "2020-08-05T16:33:19Z", "path": "api/src/main/java/io/opentelemetry/common/AttributeValue.java", "diffHunk": "@@ -244,6 +244,15 @@ public double getDoubleValue() {\n    */\n   public abstract Type getType();\n \n+  /**\n+   * Returns {@code true} if the {@code AttributeValue} contains a {@code null} value or it is an\n+   * empty array.\n+   *\n+   * @return {@code true} if the {@code AttributeValue} is empty.\n+   * @since 0.8.0\n+   */\n+  public abstract boolean isEmpty();", "originalCommit": "7aa5eacf81d5ef89255005ae917b6c51d5ddb10d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d349e45efe582f5d52d841a94374f643df14c771", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/common/AttributeValue.java b/api/src/main/java/io/opentelemetry/common/AttributeValue.java\nindex 97329c150..3d4d7b690 100644\n--- a/api/src/main/java/io/opentelemetry/common/AttributeValue.java\n+++ b/api/src/main/java/io/opentelemetry/common/AttributeValue.java\n\n@@ -244,15 +244,6 @@ public abstract class AttributeValue {\n    */\n   public abstract Type getType();\n \n-  /**\n-   * Returns {@code true} if the {@code AttributeValue} contains a {@code null} value or it is an\n-   * empty array.\n-   *\n-   * @return {@code true} if the {@code AttributeValue} is empty.\n-   * @since 0.8.0\n-   */\n-  public abstract boolean isEmpty();\n-\n   @Immutable\n   @AutoValue\n   abstract static class AttributeValueString extends AttributeValue {\n"}}, {"oid": "d349e45efe582f5d52d841a94374f643df14c771", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d349e45efe582f5d52d841a94374f643df14c771", "message": "Forbit null values", "committedDate": "2020-08-17T07:16:13Z", "type": "commit"}, {"oid": "0209eddc5c5cc9acee75474276e934d025374a06", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0209eddc5c5cc9acee75474276e934d025374a06", "message": "Simplify code and better naming", "committedDate": "2020-08-17T07:16:13Z", "type": "commit"}, {"oid": "a648e44bd05931f32d6db21ff4465c3545692597", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a648e44bd05931f32d6db21ff4465c3545692597", "message": "Fix error prone error", "committedDate": "2020-08-17T07:16:14Z", "type": "commit"}, {"oid": "a97baaf967791969b544e4f343f66b5db5a370f8", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a97baaf967791969b544e4f343f66b5db5a370f8", "message": "Uniform null handling", "committedDate": "2020-08-17T07:16:14Z", "type": "commit"}, {"oid": "83fe7c4f469fa21d4c892c47346c20b1f2792b4a", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/83fe7c4f469fa21d4c892c47346c20b1f2792b4a", "message": "Improve tests for SpanAttributes", "committedDate": "2020-08-17T07:16:14Z", "type": "commit"}, {"oid": "34cdcca2afc7a881b01cf908f8deefe4d8573dc5", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/34cdcca2afc7a881b01cf908f8deefe4d8573dc5", "message": "Improve tests for Resource Attributes", "committedDate": "2020-08-17T07:16:15Z", "type": "commit"}, {"oid": "c3785f6f786424eb5ff2da112190fcecaa8c30c6", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c3785f6f786424eb5ff2da112190fcecaa8c30c6", "message": "Change interface of AttributeValue", "committedDate": "2020-08-17T07:16:15Z", "type": "commit"}, {"oid": "22e19484bf0d53707a58f94111c59e1f1a00a672", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/22e19484bf0d53707a58f94111c59e1f1a00a672", "message": "isEmpty overrided only when necessary", "committedDate": "2020-08-17T07:16:15Z", "type": "commit"}, {"oid": "b90449d25edc588b4224fc194c24357cb54abede", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b90449d25edc588b4224fc194c24357cb54abede", "message": "Update Attributes API", "committedDate": "2020-08-17T07:16:55Z", "type": "commit"}, {"oid": "2bdb1cf6eecd2c0f38cd10c064bc6a192cf7ecd7", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/2bdb1cf6eecd2c0f38cd10c064bc6a192cf7ecd7", "message": "Remove unused code", "committedDate": "2020-08-17T07:16:55Z", "type": "commit"}, {"oid": "2bdb1cf6eecd2c0f38cd10c064bc6a192cf7ecd7", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/2bdb1cf6eecd2c0f38cd10c064bc6a192cf7ecd7", "message": "Remove unused code", "committedDate": "2020-08-17T07:16:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMwMzAxMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1437#discussion_r471303013", "bodyText": "How about shouldAdd and return false when it shouldn't? Having trouble following this method", "author": "anuraaga", "createdAt": "2020-08-17T07:51:19Z", "path": "api/src/main/java/io/opentelemetry/common/Attributes.java", "diffHunk": "@@ -155,12 +155,32 @@ public Attributes build() {\n       return sortAndFilterToAttributes(data.toArray());\n     }\n \n+    private boolean checkKeyValue(String key, AttributeValue value) {", "originalCommit": "2bdb1cf6eecd2c0f38cd10c064bc6a192cf7ecd7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMwNTg1OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1437#discussion_r471305858", "bodyText": "I would suggest calling it isInvalidKeyValue. This way, we don't need to negate its results in the setAttribute methods.", "author": "thisthat", "createdAt": "2020-08-17T07:57:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMwMzAxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMwNjgwOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1437#discussion_r471306808", "bodyText": "doNotAdd could be ok too, though I don't know if I personally find it more readable than a negation. But the main point is to not have key in the method name since it's not only checking the key but doing something special based on the value as well. Just describing the return value (whether to add or not) seems fine to me.", "author": "anuraaga", "createdAt": "2020-08-17T07:59:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMwMzAxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMxNTMyMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1437#discussion_r471315320", "bodyText": "done in ed949be", "author": "thisthat", "createdAt": "2020-08-17T08:15:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMwMzAxMw=="}], "type": "inlineReview", "revised_code": {"commit": "ed949be06c5d72ad310ab6a1b48a28bcff758e8a", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/common/Attributes.java b/api/src/main/java/io/opentelemetry/common/Attributes.java\nindex 6f1a38b13..a2bc75d9e 100644\n--- a/api/src/main/java/io/opentelemetry/common/Attributes.java\n+++ b/api/src/main/java/io/opentelemetry/common/Attributes.java\n\n@@ -155,7 +155,7 @@ public abstract class Attributes extends ImmutableKeyValuePairs<AttributeValue>\n       return sortAndFilterToAttributes(data.toArray());\n     }\n \n-    private boolean checkKeyValue(String key, AttributeValue value) {\n+    private boolean doNotAdd(String key, AttributeValue value) {\n       if (key == null || key.length() == 0) {\n         return true;\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMwMzUyMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1437#discussion_r471303522", "bodyText": "This is pretty slow but maybe we don't need to worry.", "author": "anuraaga", "createdAt": "2020-08-17T07:52:24Z", "path": "api/src/main/java/io/opentelemetry/common/Attributes.java", "diffHunk": "@@ -155,12 +155,32 @@ public Attributes build() {\n       return sortAndFilterToAttributes(data.toArray());\n     }\n \n+    private boolean checkKeyValue(String key, AttributeValue value) {\n+      if (key == null || key.length() == 0) {\n+        return true;\n+      }\n+      if (value == null || value.isEmpty()) {\n+        int index = data.indexOf(key);\n+        if (index == -1) {\n+          return true;\n+        }\n+        // Remove key/value pair\n+        data.remove(index);", "originalCommit": "2bdb1cf6eecd2c0f38cd10c064bc6a192cf7ecd7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMxNzI1MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1437#discussion_r471317251", "bodyText": "You are right. However, I don't expect the removal of attributes to be a frequent operation.", "author": "thisthat", "createdAt": "2020-08-17T08:19:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMwMzUyMg=="}], "type": "inlineReview", "revised_code": {"commit": "ed949be06c5d72ad310ab6a1b48a28bcff758e8a", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/common/Attributes.java b/api/src/main/java/io/opentelemetry/common/Attributes.java\nindex 6f1a38b13..a2bc75d9e 100644\n--- a/api/src/main/java/io/opentelemetry/common/Attributes.java\n+++ b/api/src/main/java/io/opentelemetry/common/Attributes.java\n\n@@ -155,7 +155,7 @@ public abstract class Attributes extends ImmutableKeyValuePairs<AttributeValue>\n       return sortAndFilterToAttributes(data.toArray());\n     }\n \n-    private boolean checkKeyValue(String key, AttributeValue value) {\n+    private boolean doNotAdd(String key, AttributeValue value) {\n       if (key == null || key.length() == 0) {\n         return true;\n       }\n"}}, {"oid": "ed949be06c5d72ad310ab6a1b48a28bcff758e8a", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ed949be06c5d72ad310ab6a1b48a28bcff758e8a", "message": "Rename method", "committedDate": "2020-08-17T08:15:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU1NjU1Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1437#discussion_r471556553", "bodyText": "Having this method, which looks like a simple query method, also have the side effect of removing data is very surprising. The name of this method should reflect that it is potentially an update operation. Also, how does this handle the fact that the key might be in the data twice at this point? Don't we need to iterate through the entire array to remove all instances of the key?", "author": "jkwatson", "createdAt": "2020-08-17T15:26:03Z", "path": "api/src/main/java/io/opentelemetry/common/Attributes.java", "diffHunk": "@@ -155,12 +155,32 @@ public Attributes build() {\n       return sortAndFilterToAttributes(data.toArray());\n     }\n \n+    private boolean doNotAdd(String key, AttributeValue value) {\n+      if (key == null || key.length() == 0) {\n+        return true;\n+      }\n+      if (value == null || value.isEmpty()) {\n+        int index = data.indexOf(key);\n+        if (index == -1) {\n+          return true;\n+        }\n+        // Remove key/value pair\n+        data.remove(index);\n+        data.remove(index);", "originalCommit": "ed949be06c5d72ad310ab6a1b48a28bcff758e8a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY5NjcxMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1437#discussion_r471696711", "bodyText": "You are right! I have overlooked that dedup is done as the last thing in the builder.", "author": "thisthat", "createdAt": "2020-08-17T18:37:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU1NjU1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "075ce06164eeb9d75f56d4bcd3075b00b0168cf3", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/common/Attributes.java b/api/src/main/java/io/opentelemetry/common/Attributes.java\nindex a2bc75d9e..e9febe82e 100644\n--- a/api/src/main/java/io/opentelemetry/common/Attributes.java\n+++ b/api/src/main/java/io/opentelemetry/common/Attributes.java\n\n@@ -155,30 +156,30 @@ public abstract class Attributes extends ImmutableKeyValuePairs<AttributeValue>\n       return sortAndFilterToAttributes(data.toArray());\n     }\n \n-    private boolean doNotAdd(String key, AttributeValue value) {\n-      if (key == null || key.length() == 0) {\n-        return true;\n-      }\n-      if (value == null || value.isEmpty()) {\n-        int index = data.indexOf(key);\n-        if (index == -1) {\n-          return true;\n-        }\n-        // Remove key/value pair\n-        data.remove(index);\n-        data.remove(index);\n-        return true;\n-      }\n-      return false;\n-    }\n-\n     /**\n      * Sets a bare {@link AttributeValue} into this.\n      *\n      * @return this Builder\n      */\n     public Builder setAttribute(String key, AttributeValue value) {\n-      if (doNotAdd(key, value)) {\n+      if (key == null || key.length() == 0) {\n+        return this;\n+      }\n+      if (value == null || value.isNull()) {\n+        // Remove key/value pairs\n+        Iterator<Object> itr = data.iterator();\n+        while (itr.hasNext()) {\n+          String k = (String) itr.next();\n+          if (key.equals(k)) {\n+            // delete key and value\n+            itr.remove();\n+            itr.next();\n+            itr.remove();\n+          } else {\n+            // skip the value part\n+            itr.next();\n+          }\n+        }\n         return this;\n       }\n       data.add(key);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU1Njg5NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1437#discussion_r471556895", "bodyText": "rather than repeating this logic over and over again, can we just call the setAttribute method with the attribute value above?", "author": "jkwatson", "createdAt": "2020-08-17T15:26:35Z", "path": "api/src/main/java/io/opentelemetry/common/Attributes.java", "diffHunk": "@@ -172,8 +192,12 @@ public Builder setAttribute(String key, AttributeValue value) {\n      * @return this Builder\n      */\n     public Builder setAttribute(String key, String value) {\n+      AttributeValue v = stringAttributeValue(value);\n+      if (doNotAdd(key, v)) {", "originalCommit": "ed949be06c5d72ad310ab6a1b48a28bcff758e8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "075ce06164eeb9d75f56d4bcd3075b00b0168cf3", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/common/Attributes.java b/api/src/main/java/io/opentelemetry/common/Attributes.java\nindex a2bc75d9e..e9febe82e 100644\n--- a/api/src/main/java/io/opentelemetry/common/Attributes.java\n+++ b/api/src/main/java/io/opentelemetry/common/Attributes.java\n\n@@ -193,12 +194,7 @@ public abstract class Attributes extends ImmutableKeyValuePairs<AttributeValue>\n      */\n     public Builder setAttribute(String key, String value) {\n       AttributeValue v = stringAttributeValue(value);\n-      if (doNotAdd(key, v)) {\n-        return this;\n-      }\n-      data.add(key);\n-      data.add(v);\n-      return this;\n+      return setAttribute(key, v);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU1ODgyMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1437#discussion_r471558820", "bodyText": "could we just return a static final AttributeValue instance, rather than creating a new one for each call?", "author": "jkwatson", "createdAt": "2020-08-17T15:29:29Z", "path": "api/src/main/java/io/opentelemetry/common/AttributeValue.java", "diffHunk": "@@ -325,12 +341,13 @@ public final Type getType() {\n   @AutoValue\n   abstract static class AttributeValueStringArray extends AttributeValue {\n \n+    private static final List<String> EMPTY = Collections.<String>emptyList();\n+\n     AttributeValueStringArray() {}\n \n     static AttributeValue create(String... stringValues) {\n       if (stringValues == null) {\n-        return new AutoValue_AttributeValue_AttributeValueStringArray(\n-            Collections.<String>emptyList());\n+        return new AutoValue_AttributeValue_AttributeValueStringArray(EMPTY);", "originalCommit": "ed949be06c5d72ad310ab6a1b48a28bcff758e8a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY5MTg1OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1437#discussion_r471691859", "bodyText": "I've overlooked a simple thing like that \ud83d\ude05", "author": "thisthat", "createdAt": "2020-08-17T18:34:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU1ODgyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcxNTgyMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1437#discussion_r471715822", "bodyText": "hey, that's why we review each others code. :). Easy to miss stuff like this when you're in the weeds.", "author": "jkwatson", "createdAt": "2020-08-17T19:03:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU1ODgyMA=="}], "type": "inlineReview", "revised_code": {"commit": "075ce06164eeb9d75f56d4bcd3075b00b0168cf3", "chunk": "diff --git a/api/src/main/java/io/opentelemetry/common/AttributeValue.java b/api/src/main/java/io/opentelemetry/common/AttributeValue.java\nindex 6c0b48cd3..1ab1e1bc5 100644\n--- a/api/src/main/java/io/opentelemetry/common/AttributeValue.java\n+++ b/api/src/main/java/io/opentelemetry/common/AttributeValue.java\n\n@@ -341,13 +341,14 @@ public abstract class AttributeValue {\n   @AutoValue\n   abstract static class AttributeValueStringArray extends AttributeValue {\n \n-    private static final List<String> EMPTY = Collections.<String>emptyList();\n+    private static final AttributeValue EMPTY =\n+        new AutoValue_AttributeValue_AttributeValueStringArray(Collections.<String>emptyList());\n \n     AttributeValueStringArray() {}\n \n     static AttributeValue create(String... stringValues) {\n       if (stringValues == null) {\n-        return new AutoValue_AttributeValue_AttributeValueStringArray(EMPTY);\n+        return EMPTY;\n       }\n       return new AutoValue_AttributeValue_AttributeValueStringArray(\n           Collections.unmodifiableList(Arrays.asList(stringValues)));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYxMDkxNw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1437#discussion_r471610917", "bodyText": "interesting. now that empty arrays are explicitly allowed, I wonder if \"isEmpty\" is no longer the right name. Maybe isMissing ?", "author": "jkwatson", "createdAt": "2020-08-17T16:54:02Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -314,11 +312,10 @@ public void setAttribute(String key, AttributeValue value) {\n         logger.log(Level.FINE, \"Calling setAttribute() on an ended Span.\");\n         return;\n       }\n-      if (value == null || (value.getType().equals(STRING) && value.getStringValue() == null)) {\n-        if (attributes == null) {\n-          return;\n+      if (value == null || value.isEmpty()) {", "originalCommit": "ed949be06c5d72ad310ab6a1b48a28bcff758e8a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYxMTU4OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1437#discussion_r471611589", "bodyText": "or maybe just isNull() since that's literally what we're checking for now.", "author": "jkwatson", "createdAt": "2020-08-17T16:55:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYxMDkxNw=="}], "type": "inlineReview", "revised_code": {"commit": "075ce06164eeb9d75f56d4bcd3075b00b0168cf3", "chunk": "diff --git a/sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java b/sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java\nindex 4d1a9e959..162a8c17a 100644\n--- a/sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java\n+++ b/sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java\n\n@@ -312,7 +312,7 @@ final class RecordEventsReadableSpan implements ReadableSpan, Span {\n         logger.log(Level.FINE, \"Calling setAttribute() on an ended Span.\");\n         return;\n       }\n-      if (value == null || value.isEmpty()) {\n+      if (value == null || value.isNull()) {\n         if (attributes != null) {\n           attributes.remove(key);\n         }\n"}}, {"oid": "075ce06164eeb9d75f56d4bcd3075b00b0168cf3", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/075ce06164eeb9d75f56d4bcd3075b00b0168cf3", "message": "Address PR feedback", "committedDate": "2020-08-18T06:31:43Z", "type": "commit"}, {"oid": "0387979dc327bec41231ab512ca077835fcb52b7", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0387979dc327bec41231ab512ca077835fcb52b7", "message": "fix javadoc", "committedDate": "2020-08-18T06:34:38Z", "type": "commit"}]}