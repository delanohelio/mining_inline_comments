{"pr_number": 2324, "pr_title": "Mark API's classes final, caveat a bit of duplicate code", "pr_createdAt": "2020-12-16T20:24:23Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/2324", "timeline": [{"oid": "5696dce854a70cea316fe833c63991857b2681fc", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5696dce854a70cea316fe833c63991857b2681fc", "message": "Mark API's classes final, caveat a bit of duplicate code\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-12-16T21:02:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk5ODYxNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2324#discussion_r544998616", "bodyText": "Maybe add an @see for DefaultOpenTelemetry.builder()?", "author": "Oberon00", "createdAt": "2020-12-17T10:58:38Z", "path": "api/all/src/main/java/io/opentelemetry/api/DefaultOpenTelemetryBuilder.java", "diffHunk": "@@ -15,12 +15,14 @@\n \n /** Builder class for {@link DefaultOpenTelemetry}. */\n @SuppressWarnings(\"deprecation\")\n-public class DefaultOpenTelemetryBuilder\n+public final class DefaultOpenTelemetryBuilder\n     implements OpenTelemetryBuilder<DefaultOpenTelemetryBuilder> {\n-  protected ContextPropagators propagators = ContextPropagators.noop();\n+  private ContextPropagators propagators = ContextPropagators.noop();\n+  private TracerProvider tracerProvider;\n+  private MeterProvider meterProvider;\n \n-  protected TracerProvider tracerProvider;\n-  protected MeterProvider meterProvider;\n+  // Disallow direct initialization.", "originalCommit": "5696dce854a70cea316fe833c63991857b2681fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTE5NDgyMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2324#discussion_r545194822", "bodyText": "Is not public, see does not work with c-style comments", "author": "bogdandrutu", "createdAt": "2020-12-17T15:49:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk5ODYxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTE5OTU5Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2324#discussion_r545199597", "bodyText": "You may as well add javadoc to a non-public method. It is clickable in IntelliJ at least \ud83d\ude03", "author": "Oberon00", "createdAt": "2020-12-17T15:55:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk5ODYxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMyODQyNw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2324#discussion_r545328427", "bodyText": "I may, but also this is the new common pattern used everywhere, and we don't do the same thing everywhere :))", "author": "bogdandrutu", "createdAt": "2020-12-17T18:57:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk5ODYxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMzMTAyMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2324#discussion_r545331022", "bodyText": "Done.", "author": "bogdandrutu", "createdAt": "2020-12-17T19:01:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk5ODYxNg=="}], "type": "inlineReview", "revised_code": {"commit": "9f0213bf15c4d98160b231f756df123bb36728c0", "chunk": "diff --git a/api/all/src/main/java/io/opentelemetry/api/DefaultOpenTelemetryBuilder.java b/api/all/src/main/java/io/opentelemetry/api/DefaultOpenTelemetryBuilder.java\nindex 89a463853..579add8d3 100644\n--- a/api/all/src/main/java/io/opentelemetry/api/DefaultOpenTelemetryBuilder.java\n+++ b/api/all/src/main/java/io/opentelemetry/api/DefaultOpenTelemetryBuilder.java\n\n@@ -21,7 +21,11 @@ public final class DefaultOpenTelemetryBuilder\n   private TracerProvider tracerProvider;\n   private MeterProvider meterProvider;\n \n-  // Disallow direct initialization.\n+  /**\n+   * Package protected to disallow direct initialization.\n+   *\n+   * @see DefaultOpenTelemetry#builder()\n+   */\n   DefaultOpenTelemetryBuilder() {}\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk5OTUyNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2324#discussion_r544999524", "bodyText": "I think this change is unrelated and should not be in this PR.\nAlso, the ClassCastException may actually be more informative (although not necessarily more clear to the user).", "author": "Oberon00", "createdAt": "2020-12-17T10:59:56Z", "path": "sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java", "diffHunk": "@@ -32,18 +42,24 @@ public static OpenTelemetrySdkBuilder builder() {\n \n   /** Returns the global {@link OpenTelemetrySdk}. */\n   public static OpenTelemetrySdk get() {\n-    return (OpenTelemetrySdk) GlobalOpenTelemetry.get();\n+    OpenTelemetry openTelemetry = GlobalOpenTelemetry.get();", "originalCommit": "5696dce854a70cea316fe833c63991857b2681fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMzMTEyNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2324#discussion_r545331125", "bodyText": "Removed for the moment.", "author": "bogdandrutu", "createdAt": "2020-12-17T19:01:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk5OTUyNA=="}], "type": "inlineReview", "revised_code": {"commit": "9f0213bf15c4d98160b231f756df123bb36728c0", "chunk": "diff --git a/sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java b/sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java\nindex fdfccc0b6..83b98cf10 100644\n--- a/sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java\n+++ b/sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java\n\n@@ -42,13 +42,7 @@ public final class OpenTelemetrySdk implements OpenTelemetry {\n \n   /** Returns the global {@link OpenTelemetrySdk}. */\n   public static OpenTelemetrySdk get() {\n-    OpenTelemetry openTelemetry = GlobalOpenTelemetry.get();\n-    if (!(openTelemetry instanceof OpenTelemetrySdk)) {\n-      throw new IllegalStateException(\n-          \"Trying to access global OpenTelemetrySdk but global OpenTelemetry is not an \"\n-              + \"instance created by this SDK.\");\n-    }\n-    return (OpenTelemetrySdk) openTelemetry;\n+    return (OpenTelemetrySdk) GlobalOpenTelemetry.get();\n   }\n \n   /** Returns the global {@link SdkTracerManagement}. */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTAwMDExOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2324#discussion_r545000118", "bodyText": "I'm surprised. Why is it possible to remove this cast here?", "author": "Oberon00", "createdAt": "2020-12-17T11:00:54Z", "path": "sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java", "diffHunk": "@@ -32,18 +42,24 @@ public static OpenTelemetrySdkBuilder builder() {\n \n   /** Returns the global {@link OpenTelemetrySdk}. */\n   public static OpenTelemetrySdk get() {\n-    return (OpenTelemetrySdk) GlobalOpenTelemetry.get();\n+    OpenTelemetry openTelemetry = GlobalOpenTelemetry.get();\n+    if (!(openTelemetry instanceof OpenTelemetrySdk)) {\n+      throw new IllegalStateException(\n+          \"Trying to access global OpenTelemetrySdk but global OpenTelemetry is not an \"\n+              + \"instance created by this SDK.\");\n+    }\n+    return (OpenTelemetrySdk) openTelemetry;\n   }\n \n   /** Returns the global {@link SdkTracerManagement}. */\n   public static SdkTracerManagement getGlobalTracerManagement() {\n     TracerProvider tracerProvider = GlobalOpenTelemetry.get().getTracerProvider();\n     if (!(tracerProvider instanceof ObfuscatedTracerProvider)) {\n       throw new IllegalStateException(\n-          \"Trying to access global TracerSdkManagement but global TracerProvider is not an \"\n+          \"Trying to access global SdkTracerManagement but global TracerProvider is not an \"\n               + \"instance created by this SDK.\");\n     }\n-    return (SdkTracerProvider) ((ObfuscatedTracerProvider) tracerProvider).unobfuscate();\n+    return ((ObfuscatedTracerProvider) tracerProvider).unobfuscate();", "originalCommit": "5696dce854a70cea316fe833c63991857b2681fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTIzMzcyNw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2324#discussion_r545233727", "bodyText": "This PR changes the unobfuscate() method to return an SdkTracerProvider, rather than just TracerProvider", "author": "jkwatson", "createdAt": "2020-12-17T16:39:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTAwMDExOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxMDM1MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2324#discussion_r545310350", "bodyText": "yes :) because now I can enforce that Builder only accepts SDK instances :)", "author": "bogdandrutu", "createdAt": "2020-12-17T18:30:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTAwMDExOA=="}], "type": "inlineReview", "revised_code": {"commit": "9f0213bf15c4d98160b231f756df123bb36728c0", "chunk": "diff --git a/sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java b/sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java\nindex fdfccc0b6..83b98cf10 100644\n--- a/sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java\n+++ b/sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java\n\n@@ -42,13 +42,7 @@ public final class OpenTelemetrySdk implements OpenTelemetry {\n \n   /** Returns the global {@link OpenTelemetrySdk}. */\n   public static OpenTelemetrySdk get() {\n-    OpenTelemetry openTelemetry = GlobalOpenTelemetry.get();\n-    if (!(openTelemetry instanceof OpenTelemetrySdk)) {\n-      throw new IllegalStateException(\n-          \"Trying to access global OpenTelemetrySdk but global OpenTelemetry is not an \"\n-              + \"instance created by this SDK.\");\n-    }\n-    return (OpenTelemetrySdk) openTelemetry;\n+    return (OpenTelemetrySdk) GlobalOpenTelemetry.get();\n   }\n \n   /** Returns the global {@link SdkTracerManagement}. */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTAwMTI0Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2324#discussion_r545001243", "bodyText": "\ud83d\udc4d Nice type safety improvement!", "author": "Oberon00", "createdAt": "2020-12-17T11:02:36Z", "path": "sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdkBuilder.java", "diffHunk": "@@ -5,18 +5,26 @@\n \n package io.opentelemetry.sdk;\n \n-import io.opentelemetry.api.DefaultOpenTelemetryBuilder;\n import io.opentelemetry.api.GlobalOpenTelemetry;\n import io.opentelemetry.api.metrics.MeterProvider;\n-import io.opentelemetry.api.trace.TracerProvider;\n import io.opentelemetry.context.propagation.ContextPropagators;\n import io.opentelemetry.sdk.OpenTelemetrySdk.ObfuscatedTracerProvider;\n import io.opentelemetry.sdk.metrics.MeterSdkProvider;\n import io.opentelemetry.sdk.trace.SdkTracerProvider;\n import io.opentelemetry.sdk.trace.SdkTracerProviderBuilder;\n+import java.util.concurrent.atomic.AtomicBoolean;\n \n /** A builder for configuring an {@link OpenTelemetrySdk}. */\n-public final class OpenTelemetrySdkBuilder extends DefaultOpenTelemetryBuilder {\n+public final class OpenTelemetrySdkBuilder {", "originalCommit": "5696dce854a70cea316fe833c63991857b2681fc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f0213bf15c4d98160b231f756df123bb36728c0", "chunk": "diff --git a/sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdkBuilder.java b/sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdkBuilder.java\nindex eb700b9f3..de3507073 100644\n--- a/sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdkBuilder.java\n+++ b/sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdkBuilder.java\n\n@@ -9,7 +9,7 @@ import io.opentelemetry.api.GlobalOpenTelemetry;\n import io.opentelemetry.api.metrics.MeterProvider;\n import io.opentelemetry.context.propagation.ContextPropagators;\n import io.opentelemetry.sdk.OpenTelemetrySdk.ObfuscatedTracerProvider;\n-import io.opentelemetry.sdk.metrics.MeterSdkProvider;\n+import io.opentelemetry.sdk.metrics.SdkMeterProvider;\n import io.opentelemetry.sdk.trace.SdkTracerProvider;\n import io.opentelemetry.sdk.trace.SdkTracerProviderBuilder;\n import java.util.concurrent.atomic.AtomicBoolean;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTIzNDI0MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2324#discussion_r545234240", "bodyText": "@trask @anuraaga does this have any implications for the agent's usage of the obfuscated pattern?", "author": "jkwatson", "createdAt": "2020-12-17T16:40:35Z", "path": "sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java", "diffHunk": "@@ -97,7 +126,7 @@ public Tracer get(String instrumentationName, String instrumentationVersion) {\n       return delegate.get(instrumentationName, instrumentationVersion);\n     }\n \n-    public TracerProvider unobfuscate() {\n+    public SdkTracerProvider unobfuscate() {", "originalCommit": "5696dce854a70cea316fe833c63991857b2681fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ5MTk5NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2324#discussion_r545491995", "bodyText": "Agent doesn't use this anymore :)", "author": "anuraaga", "createdAt": "2020-12-18T00:21:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTIzNDI0MA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "9f0213bf15c4d98160b231f756df123bb36728c0", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9f0213bf15c4d98160b231f756df123bb36728c0", "message": "Mark API's classes final, caveat a bit of duplicate code\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-12-17T19:01:07Z", "type": "commit"}, {"oid": "9f0213bf15c4d98160b231f756df123bb36728c0", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9f0213bf15c4d98160b231f756df123bb36728c0", "message": "Mark API's classes final, caveat a bit of duplicate code\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-12-17T19:01:07Z", "type": "forcePushed"}]}