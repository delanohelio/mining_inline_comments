{"pr_number": 4700, "pr_title": "NIFI-8060 Added minimal VolatileProvenanceRepository to nifi-stateles\u2026", "pr_createdAt": "2020-12-02T19:59:37Z", "pr_url": "https://github.com/apache/nifi/pull/4700", "timeline": [{"oid": "292e776df86c5cb972663035a50eae0fc5b33b15", "url": "https://github.com/apache/nifi/commit/292e776df86c5cb972663035a50eae0fc5b33b15", "message": "NIFI-8060 Added minimal VolatileProvenanceRepository to nifi-stateless-engine and remove dependency on nifi-volatile-provenance-repo module", "committedDate": "2020-12-02T19:57:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ1NTQ0Mw==", "url": "https://github.com/apache/nifi/pull/4700#discussion_r534455443", "bodyText": "Given the usage pattern, that this will only be used in stateless, and it's not loaded via the service loader, I don't think we even need the no-arg constructor.", "author": "markap14", "createdAt": "2020-12-02T20:19:45Z", "path": "nifi-nar-bundles/nifi-framework-bundle/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/repository/VolatileProvenanceRepository.java", "diffHunk": "@@ -0,0 +1,409 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.stateless.repository;\n+\n+import org.apache.nifi.authorization.Authorizer;\n+import org.apache.nifi.authorization.user.NiFiUser;\n+import org.apache.nifi.events.EventReporter;\n+import org.apache.nifi.provenance.AsyncLineageSubmission;\n+import org.apache.nifi.provenance.IdentifierLookup;\n+import org.apache.nifi.provenance.ProvenanceAuthorizableFactory;\n+import org.apache.nifi.provenance.ProvenanceEventBuilder;\n+import org.apache.nifi.provenance.ProvenanceEventRecord;\n+import org.apache.nifi.provenance.ProvenanceEventRepository;\n+import org.apache.nifi.provenance.ProvenanceEventType;\n+import org.apache.nifi.provenance.ProvenanceRepository;\n+import org.apache.nifi.provenance.StandardProvenanceEventRecord;\n+import org.apache.nifi.provenance.lineage.ComputeLineageSubmission;\n+import org.apache.nifi.provenance.search.Query;\n+import org.apache.nifi.provenance.search.QuerySubmission;\n+import org.apache.nifi.provenance.search.SearchableField;\n+import org.apache.nifi.util.RingBuffer;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+public class VolatileProvenanceRepository implements ProvenanceRepository {\n+\n+    // default property values\n+    public static final int DEFAULT_BUFFER_SIZE = 10000;\n+\n+    public static String CONTAINER_NAME = \"in-memory\";\n+\n+    private final RingBuffer<ProvenanceEventRecord> ringBuffer;\n+    private final int maxSize;\n+\n+    private final AtomicLong idGenerator = new AtomicLong(0L);\n+    private final AtomicBoolean initialized = new AtomicBoolean(false);\n+\n+    /**\n+     * Default no args constructor for service loading only\n+     */\n+    public VolatileProvenanceRepository() {", "originalCommit": "292e776df86c5cb972663035a50eae0fc5b33b15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ2NDMzMg==", "url": "https://github.com/apache/nifi/pull/4700#discussion_r534464332", "bodyText": "Agree", "author": "bbende", "createdAt": "2020-12-02T20:35:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ1NTQ0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "80b1d25ee6f12ae8fb9a695918b8a676d0107d01", "chunk": "diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/repository/VolatileProvenanceRepository.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/repository/StatelessProvenanceRepository.java\nsimilarity index 91%\nrename from nifi-nar-bundles/nifi-framework-bundle/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/repository/VolatileProvenanceRepository.java\nrename to nifi-nar-bundles/nifi-framework-bundle/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/repository/StatelessProvenanceRepository.java\nindex 3f6738581a..4f8914c3aa 100644\n--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/repository/VolatileProvenanceRepository.java\n+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/repository/StatelessProvenanceRepository.java\n\n@@ -39,13 +39,9 @@ import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicLong;\n \n-public class VolatileProvenanceRepository implements ProvenanceRepository {\n-\n-    // default property values\n-    public static final int DEFAULT_BUFFER_SIZE = 10000;\n+public class StatelessProvenanceRepository implements ProvenanceRepository {\n \n     public static String CONTAINER_NAME = \"in-memory\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ1NTg2OA==", "url": "https://github.com/apache/nifi/pull/4700#discussion_r534455868", "bodyText": "I think we can just make this a no-op and remove the initialized - doesn't appear to serve any particular function?", "author": "markap14", "createdAt": "2020-12-02T20:20:29Z", "path": "nifi-nar-bundles/nifi-framework-bundle/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/repository/VolatileProvenanceRepository.java", "diffHunk": "@@ -0,0 +1,409 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.stateless.repository;\n+\n+import org.apache.nifi.authorization.Authorizer;\n+import org.apache.nifi.authorization.user.NiFiUser;\n+import org.apache.nifi.events.EventReporter;\n+import org.apache.nifi.provenance.AsyncLineageSubmission;\n+import org.apache.nifi.provenance.IdentifierLookup;\n+import org.apache.nifi.provenance.ProvenanceAuthorizableFactory;\n+import org.apache.nifi.provenance.ProvenanceEventBuilder;\n+import org.apache.nifi.provenance.ProvenanceEventRecord;\n+import org.apache.nifi.provenance.ProvenanceEventRepository;\n+import org.apache.nifi.provenance.ProvenanceEventType;\n+import org.apache.nifi.provenance.ProvenanceRepository;\n+import org.apache.nifi.provenance.StandardProvenanceEventRecord;\n+import org.apache.nifi.provenance.lineage.ComputeLineageSubmission;\n+import org.apache.nifi.provenance.search.Query;\n+import org.apache.nifi.provenance.search.QuerySubmission;\n+import org.apache.nifi.provenance.search.SearchableField;\n+import org.apache.nifi.util.RingBuffer;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+public class VolatileProvenanceRepository implements ProvenanceRepository {\n+\n+    // default property values\n+    public static final int DEFAULT_BUFFER_SIZE = 10000;\n+\n+    public static String CONTAINER_NAME = \"in-memory\";\n+\n+    private final RingBuffer<ProvenanceEventRecord> ringBuffer;\n+    private final int maxSize;\n+\n+    private final AtomicLong idGenerator = new AtomicLong(0L);\n+    private final AtomicBoolean initialized = new AtomicBoolean(false);\n+\n+    /**\n+     * Default no args constructor for service loading only\n+     */\n+    public VolatileProvenanceRepository() {\n+        ringBuffer = null;\n+        maxSize = DEFAULT_BUFFER_SIZE;\n+    }\n+\n+    public VolatileProvenanceRepository(final int maxEvents) {\n+        maxSize = maxEvents;\n+        ringBuffer = new RingBuffer<>(maxSize);\n+    }\n+\n+    @Override\n+    public void initialize(final EventReporter eventReporter, final Authorizer authorizer, final ProvenanceAuthorizableFactory resourceFactory,\n+                           final IdentifierLookup idLookup) throws IOException {\n+        if (initialized.getAndSet(true)) {", "originalCommit": "292e776df86c5cb972663035a50eae0fc5b33b15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ2NDQwNA==", "url": "https://github.com/apache/nifi/pull/4700#discussion_r534464404", "bodyText": "Agree", "author": "bbende", "createdAt": "2020-12-02T20:35:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ1NTg2OA=="}], "type": "inlineReview", "revised_code": {"commit": "80b1d25ee6f12ae8fb9a695918b8a676d0107d01", "chunk": "diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/repository/VolatileProvenanceRepository.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/repository/StatelessProvenanceRepository.java\nsimilarity index 91%\nrename from nifi-nar-bundles/nifi-framework-bundle/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/repository/VolatileProvenanceRepository.java\nrename to nifi-nar-bundles/nifi-framework-bundle/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/repository/StatelessProvenanceRepository.java\nindex 3f6738581a..4f8914c3aa 100644\n--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/repository/VolatileProvenanceRepository.java\n+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/repository/StatelessProvenanceRepository.java\n\n@@ -39,13 +39,9 @@ import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicLong;\n \n-public class VolatileProvenanceRepository implements ProvenanceRepository {\n-\n-    // default property values\n-    public static final int DEFAULT_BUFFER_SIZE = 10000;\n+public class StatelessProvenanceRepository implements ProvenanceRepository {\n \n     public static String CONTAINER_NAME = \"in-memory\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ1NzA5Nw==", "url": "https://github.com/apache/nifi/pull/4700#discussion_r534457097", "bodyText": "Don't think we need to actually call this, given that isAuthorized will always return true", "author": "markap14", "createdAt": "2020-12-02T20:22:42Z", "path": "nifi-nar-bundles/nifi-framework-bundle/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/repository/VolatileProvenanceRepository.java", "diffHunk": "@@ -0,0 +1,409 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.stateless.repository;\n+\n+import org.apache.nifi.authorization.Authorizer;\n+import org.apache.nifi.authorization.user.NiFiUser;\n+import org.apache.nifi.events.EventReporter;\n+import org.apache.nifi.provenance.AsyncLineageSubmission;\n+import org.apache.nifi.provenance.IdentifierLookup;\n+import org.apache.nifi.provenance.ProvenanceAuthorizableFactory;\n+import org.apache.nifi.provenance.ProvenanceEventBuilder;\n+import org.apache.nifi.provenance.ProvenanceEventRecord;\n+import org.apache.nifi.provenance.ProvenanceEventRepository;\n+import org.apache.nifi.provenance.ProvenanceEventType;\n+import org.apache.nifi.provenance.ProvenanceRepository;\n+import org.apache.nifi.provenance.StandardProvenanceEventRecord;\n+import org.apache.nifi.provenance.lineage.ComputeLineageSubmission;\n+import org.apache.nifi.provenance.search.Query;\n+import org.apache.nifi.provenance.search.QuerySubmission;\n+import org.apache.nifi.provenance.search.SearchableField;\n+import org.apache.nifi.util.RingBuffer;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+public class VolatileProvenanceRepository implements ProvenanceRepository {\n+\n+    // default property values\n+    public static final int DEFAULT_BUFFER_SIZE = 10000;\n+\n+    public static String CONTAINER_NAME = \"in-memory\";\n+\n+    private final RingBuffer<ProvenanceEventRecord> ringBuffer;\n+    private final int maxSize;\n+\n+    private final AtomicLong idGenerator = new AtomicLong(0L);\n+    private final AtomicBoolean initialized = new AtomicBoolean(false);\n+\n+    /**\n+     * Default no args constructor for service loading only\n+     */\n+    public VolatileProvenanceRepository() {\n+        ringBuffer = null;\n+        maxSize = DEFAULT_BUFFER_SIZE;\n+    }\n+\n+    public VolatileProvenanceRepository(final int maxEvents) {\n+        maxSize = maxEvents;\n+        ringBuffer = new RingBuffer<>(maxSize);\n+    }\n+\n+    @Override\n+    public void initialize(final EventReporter eventReporter, final Authorizer authorizer, final ProvenanceAuthorizableFactory resourceFactory,\n+                           final IdentifierLookup idLookup) throws IOException {\n+        if (initialized.getAndSet(true)) {\n+            return;\n+        }\n+    }\n+\n+    @Override\n+    public ProvenanceEventRepository getProvenanceEventRepository() {\n+        return this;\n+    }\n+\n+    @Override\n+    public ProvenanceEventBuilder eventBuilder() {\n+        return new StandardProvenanceEventRecord.Builder();\n+    }\n+\n+    @Override\n+    public void registerEvent(final ProvenanceEventRecord event) {\n+        final long id = idGenerator.getAndIncrement();\n+        ringBuffer.add(new IdEnrichedProvEvent(event, id));\n+    }\n+\n+    @Override\n+    public void registerEvents(final Iterable<ProvenanceEventRecord> events) {\n+        for (final ProvenanceEventRecord event : events) {\n+            registerEvent(event);\n+        }\n+    }\n+\n+    @Override\n+    public List<ProvenanceEventRecord> getEvents(final long firstRecordId, final int maxRecords) throws IOException {\n+        return getEvents(firstRecordId, maxRecords, null);\n+    }\n+\n+    @Override\n+    public List<ProvenanceEventRecord> getEvents(final long firstRecordId, final int maxRecords, final NiFiUser user) throws IOException {\n+        return ringBuffer.getSelectedElements(new RingBuffer.Filter<ProvenanceEventRecord>() {\n+            @Override\n+            public boolean select(final ProvenanceEventRecord value) {\n+                if (!isAuthorized(value, user)) {", "originalCommit": "292e776df86c5cb972663035a50eae0fc5b33b15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ2NDU4NA==", "url": "https://github.com/apache/nifi/pull/4700#discussion_r534464584", "bodyText": "Agree", "author": "bbende", "createdAt": "2020-12-02T20:36:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ1NzA5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "80b1d25ee6f12ae8fb9a695918b8a676d0107d01", "chunk": "diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/repository/VolatileProvenanceRepository.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/repository/StatelessProvenanceRepository.java\nsimilarity index 91%\nrename from nifi-nar-bundles/nifi-framework-bundle/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/repository/VolatileProvenanceRepository.java\nrename to nifi-nar-bundles/nifi-framework-bundle/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/repository/StatelessProvenanceRepository.java\nindex 3f6738581a..4f8914c3aa 100644\n--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/repository/VolatileProvenanceRepository.java\n+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/repository/StatelessProvenanceRepository.java\n\n@@ -39,13 +39,9 @@ import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicLong;\n \n-public class VolatileProvenanceRepository implements ProvenanceRepository {\n-\n-    // default property values\n-    public static final int DEFAULT_BUFFER_SIZE = 10000;\n+public class StatelessProvenanceRepository implements ProvenanceRepository {\n \n     public static String CONTAINER_NAME = \"in-memory\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ1ODU3Ng==", "url": "https://github.com/apache/nifi/pull/4700#discussion_r534458576", "bodyText": "I think we can avoid even calling authorize, no?", "author": "markap14", "createdAt": "2020-12-02T20:25:24Z", "path": "nifi-nar-bundles/nifi-framework-bundle/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/repository/VolatileProvenanceRepository.java", "diffHunk": "@@ -0,0 +1,409 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.stateless.repository;\n+\n+import org.apache.nifi.authorization.Authorizer;\n+import org.apache.nifi.authorization.user.NiFiUser;\n+import org.apache.nifi.events.EventReporter;\n+import org.apache.nifi.provenance.AsyncLineageSubmission;\n+import org.apache.nifi.provenance.IdentifierLookup;\n+import org.apache.nifi.provenance.ProvenanceAuthorizableFactory;\n+import org.apache.nifi.provenance.ProvenanceEventBuilder;\n+import org.apache.nifi.provenance.ProvenanceEventRecord;\n+import org.apache.nifi.provenance.ProvenanceEventRepository;\n+import org.apache.nifi.provenance.ProvenanceEventType;\n+import org.apache.nifi.provenance.ProvenanceRepository;\n+import org.apache.nifi.provenance.StandardProvenanceEventRecord;\n+import org.apache.nifi.provenance.lineage.ComputeLineageSubmission;\n+import org.apache.nifi.provenance.search.Query;\n+import org.apache.nifi.provenance.search.QuerySubmission;\n+import org.apache.nifi.provenance.search.SearchableField;\n+import org.apache.nifi.util.RingBuffer;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+public class VolatileProvenanceRepository implements ProvenanceRepository {\n+\n+    // default property values\n+    public static final int DEFAULT_BUFFER_SIZE = 10000;\n+\n+    public static String CONTAINER_NAME = \"in-memory\";\n+\n+    private final RingBuffer<ProvenanceEventRecord> ringBuffer;\n+    private final int maxSize;\n+\n+    private final AtomicLong idGenerator = new AtomicLong(0L);\n+    private final AtomicBoolean initialized = new AtomicBoolean(false);\n+\n+    /**\n+     * Default no args constructor for service loading only\n+     */\n+    public VolatileProvenanceRepository() {\n+        ringBuffer = null;\n+        maxSize = DEFAULT_BUFFER_SIZE;\n+    }\n+\n+    public VolatileProvenanceRepository(final int maxEvents) {\n+        maxSize = maxEvents;\n+        ringBuffer = new RingBuffer<>(maxSize);\n+    }\n+\n+    @Override\n+    public void initialize(final EventReporter eventReporter, final Authorizer authorizer, final ProvenanceAuthorizableFactory resourceFactory,\n+                           final IdentifierLookup idLookup) throws IOException {\n+        if (initialized.getAndSet(true)) {\n+            return;\n+        }\n+    }\n+\n+    @Override\n+    public ProvenanceEventRepository getProvenanceEventRepository() {\n+        return this;\n+    }\n+\n+    @Override\n+    public ProvenanceEventBuilder eventBuilder() {\n+        return new StandardProvenanceEventRecord.Builder();\n+    }\n+\n+    @Override\n+    public void registerEvent(final ProvenanceEventRecord event) {\n+        final long id = idGenerator.getAndIncrement();\n+        ringBuffer.add(new IdEnrichedProvEvent(event, id));\n+    }\n+\n+    @Override\n+    public void registerEvents(final Iterable<ProvenanceEventRecord> events) {\n+        for (final ProvenanceEventRecord event : events) {\n+            registerEvent(event);\n+        }\n+    }\n+\n+    @Override\n+    public List<ProvenanceEventRecord> getEvents(final long firstRecordId, final int maxRecords) throws IOException {\n+        return getEvents(firstRecordId, maxRecords, null);\n+    }\n+\n+    @Override\n+    public List<ProvenanceEventRecord> getEvents(final long firstRecordId, final int maxRecords, final NiFiUser user) throws IOException {\n+        return ringBuffer.getSelectedElements(new RingBuffer.Filter<ProvenanceEventRecord>() {\n+            @Override\n+            public boolean select(final ProvenanceEventRecord value) {\n+                if (!isAuthorized(value, user)) {\n+                    return false;\n+                }\n+\n+                return value.getEventId() >= firstRecordId;\n+            }\n+        }, maxRecords);\n+    }\n+\n+    @Override\n+    public Long getMaxEventId() {\n+        final ProvenanceEventRecord newest = ringBuffer.getNewestElement();\n+        return (newest == null) ? null : newest.getEventId();\n+    }\n+\n+    public ProvenanceEventRecord getEvent(final String identifier) throws IOException {\n+        final List<ProvenanceEventRecord> records = ringBuffer.getSelectedElements(new RingBuffer.Filter<ProvenanceEventRecord>() {\n+            @Override\n+            public boolean select(final ProvenanceEventRecord event) {\n+                return identifier.equals(event.getFlowFileUuid());\n+            }\n+        }, 1);\n+        return records.isEmpty() ? null : records.get(0);\n+    }\n+\n+    @Override\n+    public ProvenanceEventRecord getEvent(final long id) {\n+        final List<ProvenanceEventRecord> records = ringBuffer.getSelectedElements(new RingBuffer.Filter<ProvenanceEventRecord>() {\n+            @Override\n+            public boolean select(final ProvenanceEventRecord event) {\n+                return event.getEventId() == id;\n+            }\n+        }, 1);\n+\n+        return records.isEmpty() ? null : records.get(0);\n+    }\n+\n+    @Override\n+    public ProvenanceEventRecord getEvent(final long id, final NiFiUser user) {\n+        final ProvenanceEventRecord event = getEvent(id);\n+        if (event == null) {\n+            return null;\n+        }\n+\n+        authorize(event, user);", "originalCommit": "292e776df86c5cb972663035a50eae0fc5b33b15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ2NDQ1NQ==", "url": "https://github.com/apache/nifi/pull/4700#discussion_r534464455", "bodyText": "Agree", "author": "bbende", "createdAt": "2020-12-02T20:36:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ1ODU3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "80b1d25ee6f12ae8fb9a695918b8a676d0107d01", "chunk": "diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/repository/VolatileProvenanceRepository.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/repository/StatelessProvenanceRepository.java\nsimilarity index 91%\nrename from nifi-nar-bundles/nifi-framework-bundle/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/repository/VolatileProvenanceRepository.java\nrename to nifi-nar-bundles/nifi-framework-bundle/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/repository/StatelessProvenanceRepository.java\nindex 3f6738581a..4f8914c3aa 100644\n--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/repository/VolatileProvenanceRepository.java\n+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/repository/StatelessProvenanceRepository.java\n\n@@ -39,13 +39,9 @@ import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicLong;\n \n-public class VolatileProvenanceRepository implements ProvenanceRepository {\n-\n-    // default property values\n-    public static final int DEFAULT_BUFFER_SIZE = 10000;\n+public class StatelessProvenanceRepository implements ProvenanceRepository {\n \n     public static String CONTAINER_NAME = \"in-memory\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ1OTkzOQ==", "url": "https://github.com/apache/nifi/pull/4700#discussion_r534459939", "bodyText": "It might make sense to call this StatelessProvenanceRepository or perhaps RingBufferProvenanceRepository just to avoid confusion with the existing VolatileProvenanceRepository?", "author": "markap14", "createdAt": "2020-12-02T20:27:45Z", "path": "nifi-nar-bundles/nifi-framework-bundle/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/repository/VolatileProvenanceRepository.java", "diffHunk": "@@ -0,0 +1,409 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.stateless.repository;\n+\n+import org.apache.nifi.authorization.Authorizer;\n+import org.apache.nifi.authorization.user.NiFiUser;\n+import org.apache.nifi.events.EventReporter;\n+import org.apache.nifi.provenance.AsyncLineageSubmission;\n+import org.apache.nifi.provenance.IdentifierLookup;\n+import org.apache.nifi.provenance.ProvenanceAuthorizableFactory;\n+import org.apache.nifi.provenance.ProvenanceEventBuilder;\n+import org.apache.nifi.provenance.ProvenanceEventRecord;\n+import org.apache.nifi.provenance.ProvenanceEventRepository;\n+import org.apache.nifi.provenance.ProvenanceEventType;\n+import org.apache.nifi.provenance.ProvenanceRepository;\n+import org.apache.nifi.provenance.StandardProvenanceEventRecord;\n+import org.apache.nifi.provenance.lineage.ComputeLineageSubmission;\n+import org.apache.nifi.provenance.search.Query;\n+import org.apache.nifi.provenance.search.QuerySubmission;\n+import org.apache.nifi.provenance.search.SearchableField;\n+import org.apache.nifi.util.RingBuffer;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+public class VolatileProvenanceRepository implements ProvenanceRepository {", "originalCommit": "292e776df86c5cb972663035a50eae0fc5b33b15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ2NDUxMA==", "url": "https://github.com/apache/nifi/pull/4700#discussion_r534464510", "bodyText": "Agree", "author": "bbende", "createdAt": "2020-12-02T20:36:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ1OTkzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "80b1d25ee6f12ae8fb9a695918b8a676d0107d01", "chunk": "diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/repository/VolatileProvenanceRepository.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/repository/StatelessProvenanceRepository.java\nsimilarity index 91%\nrename from nifi-nar-bundles/nifi-framework-bundle/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/repository/VolatileProvenanceRepository.java\nrename to nifi-nar-bundles/nifi-framework-bundle/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/repository/StatelessProvenanceRepository.java\nindex 3f6738581a..4f8914c3aa 100644\n--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/repository/VolatileProvenanceRepository.java\n+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/repository/StatelessProvenanceRepository.java\n\n@@ -39,13 +39,9 @@ import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicLong;\n \n-public class VolatileProvenanceRepository implements ProvenanceRepository {\n-\n-    // default property values\n-    public static final int DEFAULT_BUFFER_SIZE = 10000;\n+public class StatelessProvenanceRepository implements ProvenanceRepository {\n \n     public static String CONTAINER_NAME = \"in-memory\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ2Njc1OQ==", "url": "https://github.com/apache/nifi/pull/4700#discussion_r534466759", "bodyText": "Can we change this whole method to simply return getEvent(id); now?", "author": "markap14", "createdAt": "2020-12-02T20:40:26Z", "path": "nifi-nar-bundles/nifi-framework-bundle/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/repository/StatelessProvenanceRepository.java", "diffHunk": "@@ -0,0 +1,380 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.stateless.repository;\n+\n+import org.apache.nifi.authorization.Authorizer;\n+import org.apache.nifi.authorization.user.NiFiUser;\n+import org.apache.nifi.events.EventReporter;\n+import org.apache.nifi.provenance.AsyncLineageSubmission;\n+import org.apache.nifi.provenance.IdentifierLookup;\n+import org.apache.nifi.provenance.ProvenanceAuthorizableFactory;\n+import org.apache.nifi.provenance.ProvenanceEventBuilder;\n+import org.apache.nifi.provenance.ProvenanceEventRecord;\n+import org.apache.nifi.provenance.ProvenanceEventRepository;\n+import org.apache.nifi.provenance.ProvenanceEventType;\n+import org.apache.nifi.provenance.ProvenanceRepository;\n+import org.apache.nifi.provenance.StandardProvenanceEventRecord;\n+import org.apache.nifi.provenance.lineage.ComputeLineageSubmission;\n+import org.apache.nifi.provenance.search.Query;\n+import org.apache.nifi.provenance.search.QuerySubmission;\n+import org.apache.nifi.provenance.search.SearchableField;\n+import org.apache.nifi.util.RingBuffer;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+public class StatelessProvenanceRepository implements ProvenanceRepository {\n+\n+    public static String CONTAINER_NAME = \"in-memory\";\n+\n+    private final RingBuffer<ProvenanceEventRecord> ringBuffer;\n+    private final int maxSize;\n+\n+    private final AtomicLong idGenerator = new AtomicLong(0L);\n+\n+    public StatelessProvenanceRepository(final int maxEvents) {\n+        maxSize = maxEvents;\n+        ringBuffer = new RingBuffer<>(maxSize);\n+    }\n+\n+    @Override\n+    public void initialize(final EventReporter eventReporter, final Authorizer authorizer, final ProvenanceAuthorizableFactory resourceFactory,\n+                           final IdentifierLookup idLookup) throws IOException {\n+\n+    }\n+\n+    @Override\n+    public ProvenanceEventRepository getProvenanceEventRepository() {\n+        return this;\n+    }\n+\n+    @Override\n+    public ProvenanceEventBuilder eventBuilder() {\n+        return new StandardProvenanceEventRecord.Builder();\n+    }\n+\n+    @Override\n+    public void registerEvent(final ProvenanceEventRecord event) {\n+        final long id = idGenerator.getAndIncrement();\n+        ringBuffer.add(new IdEnrichedProvEvent(event, id));\n+    }\n+\n+    @Override\n+    public void registerEvents(final Iterable<ProvenanceEventRecord> events) {\n+        for (final ProvenanceEventRecord event : events) {\n+            registerEvent(event);\n+        }\n+    }\n+\n+    @Override\n+    public List<ProvenanceEventRecord> getEvents(final long firstRecordId, final int maxRecords) throws IOException {\n+        return getEvents(firstRecordId, maxRecords, null);\n+    }\n+\n+    @Override\n+    public List<ProvenanceEventRecord> getEvents(final long firstRecordId, final int maxRecords, final NiFiUser user) throws IOException {\n+        return ringBuffer.getSelectedElements(new RingBuffer.Filter<ProvenanceEventRecord>() {\n+            @Override\n+            public boolean select(final ProvenanceEventRecord value) {\n+                return value.getEventId() >= firstRecordId;\n+            }\n+        }, maxRecords);\n+    }\n+\n+    @Override\n+    public Long getMaxEventId() {\n+        final ProvenanceEventRecord newest = ringBuffer.getNewestElement();\n+        return (newest == null) ? null : newest.getEventId();\n+    }\n+\n+    public ProvenanceEventRecord getEvent(final String identifier) throws IOException {\n+        final List<ProvenanceEventRecord> records = ringBuffer.getSelectedElements(new RingBuffer.Filter<ProvenanceEventRecord>() {\n+            @Override\n+            public boolean select(final ProvenanceEventRecord event) {\n+                return identifier.equals(event.getFlowFileUuid());\n+            }\n+        }, 1);\n+        return records.isEmpty() ? null : records.get(0);\n+    }\n+\n+    @Override\n+    public ProvenanceEventRecord getEvent(final long id) {\n+        final List<ProvenanceEventRecord> records = ringBuffer.getSelectedElements(new RingBuffer.Filter<ProvenanceEventRecord>() {\n+            @Override\n+            public boolean select(final ProvenanceEventRecord event) {\n+                return event.getEventId() == id;\n+            }\n+        }, 1);\n+\n+        return records.isEmpty() ? null : records.get(0);\n+    }\n+\n+    @Override\n+    public ProvenanceEventRecord getEvent(final long id, final NiFiUser user) {\n+        final ProvenanceEventRecord event = getEvent(id);", "originalCommit": "b4f7168e40d2f9b757bae5d0d18b6f6e41699439", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "80b1d25ee6f12ae8fb9a695918b8a676d0107d01", "chunk": "diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/repository/StatelessProvenanceRepository.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/repository/StatelessProvenanceRepository.java\nindex b670112b76..4f8914c3aa 100644\n--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/repository/StatelessProvenanceRepository.java\n+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/repository/StatelessProvenanceRepository.java\n\n@@ -129,11 +129,7 @@ public class StatelessProvenanceRepository implements ProvenanceRepository {\n \n     @Override\n     public ProvenanceEventRecord getEvent(final long id, final NiFiUser user) {\n-        final ProvenanceEventRecord event = getEvent(id);\n-        if (event == null) {\n-            return null;\n-        }\n-        return event;\n+        return getEvent(id);\n     }\n \n     @Override\n"}}, {"oid": "80b1d25ee6f12ae8fb9a695918b8a676d0107d01", "url": "https://github.com/apache/nifi/commit/80b1d25ee6f12ae8fb9a695918b8a676d0107d01", "message": "NIFI-8060 Addressed review feedback", "committedDate": "2020-12-02T20:58:11Z", "type": "commit"}, {"oid": "80b1d25ee6f12ae8fb9a695918b8a676d0107d01", "url": "https://github.com/apache/nifi/commit/80b1d25ee6f12ae8fb9a695918b8a676d0107d01", "message": "NIFI-8060 Addressed review feedback", "committedDate": "2020-12-02T20:58:11Z", "type": "forcePushed"}]}