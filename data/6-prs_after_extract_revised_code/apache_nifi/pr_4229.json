{"pr_number": 4229, "pr_title": "NIFI-7379: Support multiple instances of Prometheus registries/metrics", "pr_createdAt": "2020-04-23T19:19:08Z", "pr_url": "https://github.com/apache/nifi/pull/4229", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIxODQ1MA==", "url": "https://github.com/apache/nifi/pull/4229#discussion_r416218450", "bodyText": "Can these and other holder classes be referred as MetricsRegistry (e.g. BulletinMetricsRegistry)?  It seems like that is the real underlying function it's managing.  Also would recommend these classes extend from a common abstract class which sets up what's needed for the CollectorRegistry.", "author": "YolandaMDavis", "createdAt": "2020-04-27T23:29:45Z", "path": "nifi-nar-bundles/nifi-extension-utils/nifi-prometheus-utils/src/main/java/org/apache/nifi/prometheus/util/BulletinMetricsHolder.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.prometheus.util;\n+\n+import io.prometheus.client.CollectorRegistry;\n+import io.prometheus.client.Gauge;\n+\n+public class BulletinMetricsHolder {", "originalCommit": "4f3c016e3bf16868d48a92c0fd7e1f5186b66843", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8847caa24ddc971b2f8007ea708c3ebd5497bac5", "chunk": "diff --git a/nifi-nar-bundles/nifi-extension-utils/nifi-prometheus-utils/src/main/java/org/apache/nifi/prometheus/util/BulletinMetricsHolder.java b/nifi-nar-bundles/nifi-extension-utils/nifi-prometheus-utils/src/main/java/org/apache/nifi/prometheus/util/BulletinMetricsRegistry.java\nsimilarity index 54%\nrename from nifi-nar-bundles/nifi-extension-utils/nifi-prometheus-utils/src/main/java/org/apache/nifi/prometheus/util/BulletinMetricsHolder.java\nrename to nifi-nar-bundles/nifi-extension-utils/nifi-prometheus-utils/src/main/java/org/apache/nifi/prometheus/util/BulletinMetricsRegistry.java\nindex ba58fa7eda..dbfe1c07b0 100644\n--- a/nifi-nar-bundles/nifi-extension-utils/nifi-prometheus-utils/src/main/java/org/apache/nifi/prometheus/util/BulletinMetricsHolder.java\n+++ b/nifi-nar-bundles/nifi-extension-utils/nifi-prometheus-utils/src/main/java/org/apache/nifi/prometheus/util/BulletinMetricsRegistry.java\n\n@@ -16,29 +16,16 @@\n  */\n package org.apache.nifi.prometheus.util;\n \n-import io.prometheus.client.CollectorRegistry;\n import io.prometheus.client.Gauge;\n \n-public class BulletinMetricsHolder {\n+public class BulletinMetricsRegistry extends AbstractMetricsRegistry {\n \n-    private CollectorRegistry registry = new CollectorRegistry();\n-\n-    public BulletinMetricsHolder() {\n-    }\n-\n-    public BulletinMetricsHolder(final CollectorRegistry registry) {\n-        this();\n-        this.registry = registry;\n+    public BulletinMetricsRegistry() {\n+        nameToGaugeMap.put(\"BULLETIN\", Gauge.build()\n+                .name(\"nifi_bulletin\")\n+                .help(\"Bulletin reported by the NiFi instance\")\n+                .labelNames(\"instance\", \"component_type\", \"component_id\", \"parent_id\",\n+                        \"node_address\", \"category\", \"source_name\", \"source_id\", \"level\")\n+                .register(registry));\n     }\n-\n-    public CollectorRegistry getRegistry() {\n-        return registry;\n-    }\n-\n-    public final Gauge BULLETIN = Gauge.build()\n-            .name(\"nifi_bulletin\")\n-            .help(\"Bulletin reported by the NiFi instance\")\n-            .labelNames(\"instance\", \"component_type\", \"component_id\", \"parent_id\",\n-                    \"node_address\", \"category\", \"source_name\", \"source_id\", \"level\")\n-            .register(registry);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIyMDU2OA==", "url": "https://github.com/apache/nifi/pull/4229#discussion_r416220568", "bodyText": "Would also recommend instead of accessing gauges or counters directly that callers use methods which then can set labels and inc/dec/set values as needed.  This may also allow for isolated testing of the holder/registry.", "author": "YolandaMDavis", "createdAt": "2020-04-27T23:34:54Z", "path": "nifi-nar-bundles/nifi-extension-utils/nifi-prometheus-utils/src/main/java/org/apache/nifi/prometheus/util/BulletinMetricsHolder.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.prometheus.util;\n+\n+import io.prometheus.client.CollectorRegistry;\n+import io.prometheus.client.Gauge;\n+\n+public class BulletinMetricsHolder {\n+\n+    private CollectorRegistry registry = new CollectorRegistry();\n+\n+    public BulletinMetricsHolder() {\n+    }\n+\n+    public BulletinMetricsHolder(final CollectorRegistry registry) {\n+        this();\n+        this.registry = registry;\n+    }\n+\n+    public CollectorRegistry getRegistry() {\n+        return registry;\n+    }\n+\n+    public final Gauge BULLETIN = Gauge.build()", "originalCommit": "4f3c016e3bf16868d48a92c0fd7e1f5186b66843", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8847caa24ddc971b2f8007ea708c3ebd5497bac5", "chunk": "diff --git a/nifi-nar-bundles/nifi-extension-utils/nifi-prometheus-utils/src/main/java/org/apache/nifi/prometheus/util/BulletinMetricsHolder.java b/nifi-nar-bundles/nifi-extension-utils/nifi-prometheus-utils/src/main/java/org/apache/nifi/prometheus/util/BulletinMetricsRegistry.java\nsimilarity index 54%\nrename from nifi-nar-bundles/nifi-extension-utils/nifi-prometheus-utils/src/main/java/org/apache/nifi/prometheus/util/BulletinMetricsHolder.java\nrename to nifi-nar-bundles/nifi-extension-utils/nifi-prometheus-utils/src/main/java/org/apache/nifi/prometheus/util/BulletinMetricsRegistry.java\nindex ba58fa7eda..dbfe1c07b0 100644\n--- a/nifi-nar-bundles/nifi-extension-utils/nifi-prometheus-utils/src/main/java/org/apache/nifi/prometheus/util/BulletinMetricsHolder.java\n+++ b/nifi-nar-bundles/nifi-extension-utils/nifi-prometheus-utils/src/main/java/org/apache/nifi/prometheus/util/BulletinMetricsRegistry.java\n\n@@ -16,29 +16,16 @@\n  */\n package org.apache.nifi.prometheus.util;\n \n-import io.prometheus.client.CollectorRegistry;\n import io.prometheus.client.Gauge;\n \n-public class BulletinMetricsHolder {\n+public class BulletinMetricsRegistry extends AbstractMetricsRegistry {\n \n-    private CollectorRegistry registry = new CollectorRegistry();\n-\n-    public BulletinMetricsHolder() {\n-    }\n-\n-    public BulletinMetricsHolder(final CollectorRegistry registry) {\n-        this();\n-        this.registry = registry;\n+    public BulletinMetricsRegistry() {\n+        nameToGaugeMap.put(\"BULLETIN\", Gauge.build()\n+                .name(\"nifi_bulletin\")\n+                .help(\"Bulletin reported by the NiFi instance\")\n+                .labelNames(\"instance\", \"component_type\", \"component_id\", \"parent_id\",\n+                        \"node_address\", \"category\", \"source_name\", \"source_id\", \"level\")\n+                .register(registry));\n     }\n-\n-    public CollectorRegistry getRegistry() {\n-        return registry;\n-    }\n-\n-    public final Gauge BULLETIN = Gauge.build()\n-            .name(\"nifi_bulletin\")\n-            .help(\"Bulletin reported by the NiFi instance\")\n-            .labelNames(\"instance\", \"component_type\", \"component_id\", \"parent_id\",\n-                    \"node_address\", \"category\", \"source_name\", \"source_id\", \"level\")\n-            .register(registry);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIyMDc2MA==", "url": "https://github.com/apache/nifi/pull/4229#discussion_r416220760", "bodyText": "Same as above", "author": "YolandaMDavis", "createdAt": "2020-04-27T23:35:28Z", "path": "nifi-nar-bundles/nifi-extension-utils/nifi-prometheus-utils/src/main/java/org/apache/nifi/prometheus/util/JvmMetricsHolder.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.prometheus.util;\n+\n+import io.prometheus.client.CollectorRegistry;\n+import io.prometheus.client.Gauge;\n+\n+public class JvmMetricsHolder {", "originalCommit": "4f3c016e3bf16868d48a92c0fd7e1f5186b66843", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8847caa24ddc971b2f8007ea708c3ebd5497bac5", "chunk": "diff --git a/nifi-nar-bundles/nifi-extension-utils/nifi-prometheus-utils/src/main/java/org/apache/nifi/prometheus/util/JvmMetricsHolder.java b/nifi-nar-bundles/nifi-extension-utils/nifi-prometheus-utils/src/main/java/org/apache/nifi/prometheus/util/JvmMetricsHolder.java\ndeleted file mode 100644\nindex 1f0250cb4b..0000000000\n--- a/nifi-nar-bundles/nifi-extension-utils/nifi-prometheus-utils/src/main/java/org/apache/nifi/prometheus/util/JvmMetricsHolder.java\n+++ /dev/null\n\n@@ -1,95 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.nifi.prometheus.util;\n-\n-import io.prometheus.client.CollectorRegistry;\n-import io.prometheus.client.Gauge;\n-\n-public class JvmMetricsHolder {\n-\n-    private CollectorRegistry registry = new CollectorRegistry();\n-\n-    public JvmMetricsHolder() {\n-    }\n-\n-    public JvmMetricsHolder(final CollectorRegistry registry) {\n-        this();\n-        this.registry = registry;\n-    }\n-\n-    public CollectorRegistry getRegistry() {\n-        return registry;\n-    }\n-\n-    ///////////////////////////////////////////////////////////////\n-    // JVM Metrics\n-    ///////////////////////////////////////////////////////////////\n-    public final Gauge JVM_HEAP_USED = Gauge.build()\n-            .name(\"nifi_jvm_heap_used\")\n-            .help(\"NiFi JVM heap used\")\n-            .labelNames(\"instance\")\n-            .register(registry);\n-\n-    public final Gauge JVM_HEAP_USAGE = Gauge.build()\n-            .name(\"nifi_jvm_heap_usage\")\n-            .help(\"NiFi JVM heap usage\")\n-            .labelNames(\"instance\")\n-            .register(registry);\n-\n-    public final Gauge JVM_HEAP_NON_USAGE = Gauge.build()\n-            .name(\"nifi_jvm_heap_non_usage\")\n-            .help(\"NiFi JVM heap non usage\")\n-            .labelNames(\"instance\")\n-            .register(registry);\n-\n-    public final Gauge JVM_THREAD_COUNT = Gauge.build()\n-            .name(\"nifi_jvm_thread_count\")\n-            .help(\"NiFi JVM thread count\")\n-            .labelNames(\"instance\")\n-            .register(registry);\n-\n-    public final Gauge JVM_DAEMON_THREAD_COUNT = Gauge.build()\n-            .name(\"nifi_jvm_daemon_thread_count\")\n-            .help(\"NiFi JVM daemon thread count\")\n-            .labelNames(\"instance\")\n-            .register(registry);\n-\n-    public final Gauge JVM_UPTIME = Gauge.build()\n-            .name(\"nifi_jvm_uptime\")\n-            .help(\"NiFi JVM uptime\")\n-            .labelNames(\"instance\")\n-            .register(registry);\n-\n-    public final Gauge JVM_FILE_DESCRIPTOR_USAGE = Gauge.build()\n-            .name(\"nifi_jvm_file_descriptor_usage\")\n-            .help(\"NiFi JVM file descriptor usage\")\n-            .labelNames(\"instance\")\n-            .register(registry);\n-\n-    public final Gauge JVM_GC_RUNS = Gauge.build()\n-            .name(\"nifi_jvm_gc_runs\")\n-            .help(\"NiFi JVM GC number of runs\")\n-            .labelNames(\"instance\", \"gc_name\")\n-            .register(registry);\n-\n-    public final Gauge JVM_GC_TIME = Gauge.build()\n-            .name(\"nifi_jvm_gc_time\")\n-            .help(\"NiFi JVM GC time in milliseconds\")\n-            .labelNames(\"instance\", \"gc_name\")\n-            .register(registry);\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIyMDgzMg==", "url": "https://github.com/apache/nifi/pull/4229#discussion_r416220832", "bodyText": "Same as above", "author": "YolandaMDavis", "createdAt": "2020-04-27T23:35:37Z", "path": "nifi-nar-bundles/nifi-extension-utils/nifi-prometheus-utils/src/main/java/org/apache/nifi/prometheus/util/NiFiMetricsHolder.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.prometheus.util;\n+\n+import io.prometheus.client.CollectorRegistry;\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+\n+public class NiFiMetricsHolder {", "originalCommit": "4f3c016e3bf16868d48a92c0fd7e1f5186b66843", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8847caa24ddc971b2f8007ea708c3ebd5497bac5", "chunk": "diff --git a/nifi-nar-bundles/nifi-extension-utils/nifi-prometheus-utils/src/main/java/org/apache/nifi/prometheus/util/NiFiMetricsHolder.java b/nifi-nar-bundles/nifi-extension-utils/nifi-prometheus-utils/src/main/java/org/apache/nifi/prometheus/util/NiFiMetricsHolder.java\ndeleted file mode 100644\nindex d28f612853..0000000000\n--- a/nifi-nar-bundles/nifi-extension-utils/nifi-prometheus-utils/src/main/java/org/apache/nifi/prometheus/util/NiFiMetricsHolder.java\n+++ /dev/null\n\n@@ -1,215 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.nifi.prometheus.util;\n-\n-import io.prometheus.client.CollectorRegistry;\n-import io.prometheus.client.Counter;\n-import io.prometheus.client.Gauge;\n-\n-public class NiFiMetricsHolder {\n-\n-    private CollectorRegistry registry = new CollectorRegistry();\n-\n-    public NiFiMetricsHolder() {\n-    }\n-\n-    public NiFiMetricsHolder(final CollectorRegistry registry) {\n-        this();\n-        this.registry = registry;\n-    }\n-\n-    public CollectorRegistry getRegistry() {\n-        return registry;\n-    }\n-\n-    // Processor / Process Group metrics\n-    public final Gauge AMOUNT_FLOWFILES_SENT = Gauge.build()\n-            .name(\"nifi_amount_flowfiles_sent\")\n-            .help(\"Total number of FlowFiles sent by the component\")\n-            .labelNames(\"instance\", \"component_type\", \"component_name\", \"component_id\", \"parent_id\")\n-            .register(registry);\n-\n-    public final Gauge AMOUNT_FLOWFILES_TRANSFERRED = Gauge.build()\n-            .name(\"nifi_amount_flowfiles_transferred\")\n-            .help(\"Total number of FlowFiles transferred by the component\")\n-            .labelNames(\"instance\", \"component_type\", \"component_name\", \"component_id\", \"parent_id\")\n-            .register(registry);\n-\n-    public final Gauge AMOUNT_FLOWFILES_RECEIVED = Gauge.build()\n-            .name(\"nifi_amount_flowfiles_received\")\n-            .help(\"Total number of FlowFiles received by the component\")\n-            .labelNames(\"instance\", \"component_type\", \"component_name\", \"component_id\", \"parent_id\")\n-            .register(registry);\n-\n-    public final Gauge AMOUNT_FLOWFILES_REMOVED = Gauge.build()\n-            .name(\"nifi_amount_flowfiles_removed\")\n-            .help(\"Total number of FlowFiles removed by the component\")\n-            .labelNames(\"instance\", \"component_type\", \"component_name\", \"component_id\", \"parent_id\")\n-            .register(registry);\n-\n-    public final Gauge AMOUNT_BYTES_SENT = Gauge.build()\n-            .name(\"nifi_amount_bytes_sent\")\n-            .help(\"Total number of bytes sent by the component\")\n-            .labelNames(\"instance\", \"component_type\", \"component_name\", \"component_id\", \"parent_id\")\n-            .register(registry);\n-\n-    public final Gauge AMOUNT_BYTES_READ = Gauge.build()\n-            .name(\"nifi_amount_bytes_read\")\n-            .help(\"Total number of bytes read by the component\")\n-            .labelNames(\"instance\", \"component_type\", \"component_name\", \"component_id\", \"parent_id\")\n-            .register(registry);\n-\n-    public final Counter TOTAL_BYTES_READ = Counter.build().name(\"nifi_total_bytes_read\")\n-            .help(\"Total number of bytes read by the component\")\n-            .labelNames(\"instance\", \"component_type\", \"component_name\", \"component_id\", \"parent_id\")\n-            .register(registry);\n-\n-    public final Counter TOTAL_BYTES_WRITTEN = Counter.build().name(\"nifi_total_bytes_written\")\n-            .help(\"Total number of bytes written by the component\")\n-            .labelNames(\"instance\", \"component_type\", \"component_name\", \"component_id\", \"parent_id\")\n-            .register(registry);\n-\n-    public final Gauge AMOUNT_BYTES_WRITTEN = Gauge.build()\n-            .name(\"nifi_amount_bytes_written\")\n-            .help(\"Total number of bytes written by the component\")\n-            .labelNames(\"instance\", \"component_type\", \"component_name\", \"component_id\", \"parent_id\")\n-            .register(registry);\n-\n-    public final Gauge AMOUNT_BYTES_RECEIVED = Gauge.build()\n-            .name(\"nifi_amount_bytes_received\")\n-            .help(\"Total number of bytes received by the component\")\n-            .labelNames(\"instance\", \"component_type\", \"component_name\", \"component_id\", \"parent_id\")\n-            .register(registry);\n-\n-    public final Gauge AMOUNT_BYTES_TRANSFERRED = Gauge.build()\n-            .name(\"nifi_amount_bytes_transferred\")\n-            .help(\"Total number of Bytes transferred by the component\")\n-            .labelNames(\"instance\", \"component_type\", \"component_name\", \"component_id\", \"parent_id\")\n-            .register(registry);\n-\n-    public final Gauge AMOUNT_THREADS_TOTAL_ACTIVE = Gauge.build()\n-            .name(\"nifi_amount_threads_active\")\n-            .help(\"Total number of threads active for the component\")\n-            .labelNames(\"instance\", \"component_type\", \"component_name\", \"component_id\", \"parent_id\")\n-            .register(registry);\n-\n-    public final Gauge AMOUNT_THREADS_TOTAL_TERMINATED = Gauge.build()\n-            .name(\"nifi_amount_threads_terminated\")\n-            .help(\"Total number of threads terminated for the component\")\n-            .labelNames(\"instance\", \"component_type\", \"component_name\", \"component_id\", \"parent_id\")\n-            .register(registry);\n-\n-    public final Gauge SIZE_CONTENT_OUTPUT_TOTAL = Gauge.build()\n-            .name(\"nifi_size_content_output_total\")\n-            .help(\"Total size of content output by the component\")\n-            .labelNames(\"instance\", \"component_type\", \"component_name\", \"component_id\", \"parent_id\",\n-                    \"source_id\", \"source_name\", \"destination_id\", \"destination_name\")\n-            .register(registry);\n-\n-    public final Gauge SIZE_CONTENT_INPUT_TOTAL = Gauge.build()\n-            .name(\"nifi_size_content_input_total\")\n-            .help(\"Total size of content input by the component\")\n-            .labelNames(\"instance\", \"component_type\", \"component_name\", \"component_id\", \"parent_id\",\n-                    \"source_id\", \"source_name\", \"destination_id\", \"destination_name\")\n-            .register(registry);\n-\n-    public final Gauge SIZE_CONTENT_QUEUED_TOTAL = Gauge.build()\n-            .name(\"nifi_size_content_queued_total\")\n-            .help(\"Total size of content queued in the component\")\n-            .labelNames(\"instance\", \"component_type\", \"component_name\", \"component_id\", \"parent_id\",\n-                    \"source_id\", \"source_name\", \"destination_id\", \"destination_name\")\n-            .register(registry);\n-\n-    public final Gauge AMOUNT_ITEMS_OUTPUT = Gauge.build()\n-            .name(\"nifi_amount_items_output\")\n-            .help(\"Total number of items output by the component\")\n-            .labelNames(\"instance\", \"component_type\", \"component_name\", \"component_id\", \"parent_id\",\n-                    \"source_id\", \"source_name\", \"destination_id\", \"destination_name\")\n-            .register(registry);\n-\n-    public final Gauge AMOUNT_ITEMS_INPUT = Gauge.build()\n-            .name(\"nifi_amount_items_input\")\n-            .help(\"Total number of items input by the component\")\n-            .labelNames(\"instance\", \"component_type\", \"component_name\", \"component_id\", \"parent_id\",\n-                    \"source_id\", \"source_name\", \"destination_id\", \"destination_name\")\n-            .register(registry);\n-\n-    public final Gauge AMOUNT_ITEMS_QUEUED = Gauge.build()\n-            .name(\"nifi_amount_items_queued\")\n-            .help(\"Total number of items queued by the component\")\n-            .labelNames(\"instance\", \"component_type\", \"component_name\", \"component_id\", \"parent_id\",\n-                    \"source_id\", \"source_name\", \"destination_id\", \"destination_name\")\n-            .register(registry);\n-\n-    // Processor metrics\n-    public final Gauge PROCESSOR_COUNTERS = Gauge.build()\n-            .name(\"nifi_processor_counters\")\n-            .help(\"Counters exposed by NiFi Processors\")\n-            .labelNames(\"processor_name\", \"counter_name\", \"processor_id\", \"instance\")\n-            .register(registry);\n-\n-    // Connection metrics\n-    public final Gauge BACKPRESSURE_BYTES_THRESHOLD = Gauge.build()\n-            .name(\"nifi_backpressure_bytes_threshold\")\n-            .help(\"The number of bytes that can be queued before backpressure is applied\")\n-            .labelNames(\"instance\", \"component_type\", \"component_name\", \"component_id\", \"parent_id\",\n-                    \"source_id\", \"source_name\", \"destination_id\", \"destination_name\")\n-            .register(registry);\n-\n-    public final Gauge BACKPRESSURE_OBJECT_THRESHOLD = Gauge.build()\n-            .name(\"nifi_backpressure_object_threshold\")\n-            .help(\"The number of flow files that can be queued before backpressure is applied\")\n-            .labelNames(\"instance\", \"component_type\", \"component_name\", \"component_id\", \"parent_id\",\n-                    \"source_id\", \"source_name\", \"destination_id\", \"destination_name\")\n-            .register(registry);\n-\n-    public final Gauge IS_BACKPRESSURE_ENABLED = Gauge.build()\n-            .name(\"nifi_backpressure_enabled\")\n-            .help(\"Whether backpressure has been applied for this component. Values are 0 or 1\")\n-            .labelNames(\"instance\", \"component_type\", \"component_name\", \"component_id\", \"parent_id\",\n-                    \"source_id\", \"source_name\", \"destination_id\", \"destination_name\")\n-            .register(registry);\n-\n-    // Port metrics\n-    public final Gauge IS_TRANSMITTING = Gauge.build()\n-            .name(\"nifi_transmitting\")\n-            .help(\"Whether this component is transmitting data. Values are 0 or 1\")\n-            .labelNames(\"instance\", \"component_type\", \"component_name\", \"component_id\", \"parent_id\", \"run_status\")\n-            .register(registry);\n-\n-    // Remote Process Group (RPG) metrics\n-    public final Gauge ACTIVE_REMOTE_PORT_COUNT = Gauge.build()\n-            .name(\"nifi_active_remote_port_count\")\n-            .help(\"The number of active remote ports associated with this component\")\n-            .labelNames(\"instance\", \"component_type\", \"component_name\", \"component_id\", \"parent_id\",\n-                    \"source_id\", \"source_name\", \"destination_id\", \"destination_name\")\n-            .register(registry);\n-\n-    public final Gauge INACTIVE_REMOTE_PORT_COUNT = Gauge.build()\n-            .name(\"nifi_inactive_remote_port_count\")\n-            .help(\"The number of inactive remote ports associated with this component\")\n-            .labelNames(\"instance\", \"component_type\", \"component_name\", \"component_id\", \"parent_id\",\n-                    \"source_id\", \"source_name\", \"destination_id\", \"destination_name\")\n-            .register(registry);\n-\n-    public final Gauge AVERAGE_LINEAGE_DURATION = Gauge.build()\n-            .name(\"nifi_average_lineage_duration\")\n-            .help(\"The average lineage duration (in milliseconds) for all flow file processed by this component\")\n-            .labelNames(\"instance\", \"component_type\", \"component_name\", \"component_id\", \"parent_id\",\n-                    \"source_id\", \"source_name\", \"destination_id\", \"destination_name\")\n-            .register(registry);\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIyMDk3NA==", "url": "https://github.com/apache/nifi/pull/4229#discussion_r416220974", "bodyText": "Same as above", "author": "YolandaMDavis", "createdAt": "2020-04-27T23:35:59Z", "path": "nifi-nar-bundles/nifi-extension-utils/nifi-prometheus-utils/src/main/java/org/apache/nifi/prometheus/util/ConnectionAnalyticsMetricsHolder.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.prometheus.util;\n+\n+import io.prometheus.client.CollectorRegistry;\n+import io.prometheus.client.Gauge;\n+\n+public class ConnectionAnalyticsMetricsHolder {", "originalCommit": "4f3c016e3bf16868d48a92c0fd7e1f5186b66843", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8847caa24ddc971b2f8007ea708c3ebd5497bac5", "chunk": "diff --git a/nifi-nar-bundles/nifi-extension-utils/nifi-prometheus-utils/src/main/java/org/apache/nifi/prometheus/util/ConnectionAnalyticsMetricsHolder.java b/nifi-nar-bundles/nifi-extension-utils/nifi-prometheus-utils/src/main/java/org/apache/nifi/prometheus/util/ConnectionAnalyticsMetricsHolder.java\ndeleted file mode 100644\nindex 35e0248beb..0000000000\n--- a/nifi-nar-bundles/nifi-extension-utils/nifi-prometheus-utils/src/main/java/org/apache/nifi/prometheus/util/ConnectionAnalyticsMetricsHolder.java\n+++ /dev/null\n\n@@ -1,66 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.nifi.prometheus.util;\n-\n-import io.prometheus.client.CollectorRegistry;\n-import io.prometheus.client.Gauge;\n-\n-public class ConnectionAnalyticsMetricsHolder {\n-\n-    private CollectorRegistry registry = new CollectorRegistry();\n-\n-    public ConnectionAnalyticsMetricsHolder() {\n-    }\n-\n-    public ConnectionAnalyticsMetricsHolder(final CollectorRegistry registry) {\n-        this();\n-        this.registry = registry;\n-    }\n-\n-    public CollectorRegistry getRegistry() {\n-        return registry;\n-    }\n-\n-    // Connection status analytics metrics\n-    public final Gauge TIME_TO_BYTES_BACKPRESSURE_PREDICTION = Gauge.build()\n-            .name(\"nifi_time_to_bytes_backpressure_prediction\")\n-            .help(\"Predicted time (in milliseconds) until backpressure will be applied on the connection due to bytes in the queue\")\n-            .labelNames(\"instance\", \"component_type\", \"component_name\", \"component_id\", \"parent_id\",\n-                    \"source_id\", \"source_name\", \"destination_id\", \"destination_name\")\n-            .register(registry);\n-\n-    public final Gauge TIME_TO_COUNT_BACKPRESSURE_PREDICTION = Gauge.build()\n-            .name(\"nifi_time_to_count_backpressure_prediction\")\n-            .help(\"Predicted time (in milliseconds) until backpressure will be applied on the connection due to number of objects in the queue\")\n-            .labelNames(\"instance\", \"component_type\", \"component_name\", \"component_id\", \"parent_id\",\n-                    \"source_id\", \"source_name\", \"destination_id\", \"destination_name\")\n-            .register(registry);\n-\n-    public final Gauge BYTES_AT_NEXT_INTERVAL_PREDICTION = Gauge.build()\n-            .name(\"nifi_bytes_at_next_interval_prediction\")\n-            .help(\"Predicted number of bytes in the queue at the next configured interval\")\n-            .labelNames(\"instance\", \"component_type\", \"component_name\", \"component_id\", \"parent_id\",\n-                    \"source_id\", \"source_name\", \"destination_id\", \"destination_name\")\n-            .register(registry);\n-\n-    public final Gauge COUNT_AT_NEXT_INTERVAL_PREDICTION = Gauge.build()\n-            .name(\"nifi_count_at_next_interval_prediction\")\n-            .help(\"Predicted number of objects in the queue at the next configured interval\")\n-            .labelNames(\"instance\", \"component_type\", \"component_name\", \"component_id\", \"parent_id\",\n-                    \"source_id\", \"source_name\", \"destination_id\", \"destination_name\")\n-            .register(registry);\n-}\n"}}, {"oid": "d6e5e9e51653f1f3b56ddb9c08d19c384f776bbe", "url": "https://github.com/apache/nifi/commit/d6e5e9e51653f1f3b56ddb9c08d19c384f776bbe", "message": "NIFI-7379: Support multiple instances of Prometheus registries/metrics", "committedDate": "2020-04-28T12:14:23Z", "type": "commit"}, {"oid": "8847caa24ddc971b2f8007ea708c3ebd5497bac5", "url": "https://github.com/apache/nifi/commit/8847caa24ddc971b2f8007ea708c3ebd5497bac5", "message": "NIFI-7379: Refactored Prometheus objects to support multiple instances", "committedDate": "2020-04-28T15:06:41Z", "type": "commit"}, {"oid": "8847caa24ddc971b2f8007ea708c3ebd5497bac5", "url": "https://github.com/apache/nifi/commit/8847caa24ddc971b2f8007ea708c3ebd5497bac5", "message": "NIFI-7379: Refactored Prometheus objects to support multiple instances", "committedDate": "2020-04-28T15:06:41Z", "type": "forcePushed"}]}