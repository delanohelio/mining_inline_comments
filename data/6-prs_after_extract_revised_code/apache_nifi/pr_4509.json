{"pr_number": 4509, "pr_title": "NIFI-7592: Allow NiFi to be started without a GUI/REST interface", "pr_createdAt": "2020-09-02T22:31:36Z", "pr_url": "https://github.com/apache/nifi/pull/4509", "timeline": [{"oid": "0938936a7bad46ea292e59e6a4ee3b6ae3d329f1", "url": "https://github.com/apache/nifi/commit/0938936a7bad46ea292e59e6a4ee3b6ae3d329f1", "message": "NIFI-7592: Allow NiFi to be started without a GUI/REST interface", "committedDate": "2020-09-08T18:26:34Z", "type": "forcePushed"}, {"oid": "45ed5ced8f6167a6e5e51b172e529037cccf5ae4", "url": "https://github.com/apache/nifi/commit/45ed5ced8f6167a6e5e51b172e529037cccf5ae4", "message": "NIFI-7592: Enable all controller services when starting headless", "committedDate": "2020-09-10T18:41:53Z", "type": "forcePushed"}, {"oid": "3b23d230fb24f4be034c1c91bad11b0eeb30ad31", "url": "https://github.com/apache/nifi/commit/3b23d230fb24f4be034c1c91bad11b0eeb30ad31", "message": "NIFI-7592: Enable all controller services when starting headless", "committedDate": "2020-09-21T19:00:04Z", "type": "forcePushed"}, {"oid": "86f1c697701be44e12f88ffd7c7c5705e1cb0c49", "url": "https://github.com/apache/nifi/commit/86f1c697701be44e12f88ffd7c7c5705e1cb0c49", "message": "NIFI-7592: Enable all controller services when starting headless", "committedDate": "2020-09-24T14:58:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA4NTM4Nw==", "url": "https://github.com/apache/nifi/pull/4509#discussion_r496085387", "bodyText": "I think we should make this line consistent with the logic below around line 390...\nIn this case we are saying, if no dependency then the parent is always the root class loader.\nIn the other case we are saying, if no dependency and if jetty bundle exists (which currently it always does), then make jetty bundle the parent, otherwise the parent is null.\nI think both cases should probably make the parent be the jetty class loader if the jetty bundle exists, otherwise the root class loader.", "author": "bbende", "createdAt": "2020-09-28T16:35:46Z", "path": "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-nar-utils/src/main/java/org/apache/nifi/nar/NarClassLoaders.java", "diffHunk": "@@ -224,7 +228,7 @@ private InitContext load(final ClassLoader rootClassloader,\n                     // see if this class loader is eligible for loading\n                     ClassLoader narClassLoader = null;\n                     if (narDependencyCoordinate == null) {\n-                        narClassLoader = createNarClassLoader(narDetail.getWorkingDirectory(), jettyClassLoader);\n+                        narClassLoader = createNarClassLoader(narDetail.getWorkingDirectory(), rootClassloader);", "originalCommit": "86f1c697701be44e12f88ffd7c7c5705e1cb0c49", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c36bac551ca3fac6f4a3b94c664ebc43573ce77f", "chunk": "diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-nar-utils/src/main/java/org/apache/nifi/nar/NarClassLoaders.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-nar-utils/src/main/java/org/apache/nifi/nar/NarClassLoaders.java\nindex cd8fa460ba..d830253710 100644\n--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-nar-utils/src/main/java/org/apache/nifi/nar/NarClassLoaders.java\n+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-nar-utils/src/main/java/org/apache/nifi/nar/NarClassLoaders.java\n\n@@ -228,7 +228,7 @@ public final class NarClassLoaders {\n                     // see if this class loader is eligible for loading\n                     ClassLoader narClassLoader = null;\n                     if (narDependencyCoordinate == null) {\n-                        narClassLoader = createNarClassLoader(narDetail.getWorkingDirectory(), rootClassloader);\n+                        narClassLoader = createNarClassLoader(narDetail.getWorkingDirectory(), jettyClassLoader);\n                     } else {\n                         final String dependencyCoordinateStr = narDependencyCoordinate.getCoordinate();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA4NjE1Mg==", "url": "https://github.com/apache/nifi/pull/4509#discussion_r496086152", "bodyText": "I don't really know what is involved in providing these, but just wanted to double check that we really want them to be null since then I think you can't call the nifi.sh diagnostics command without them.", "author": "bbende", "createdAt": "2020-09-28T16:37:05Z", "path": "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-headless-server/src/main/java/org/apache/nifi/headless/HeadlessNiFiServer.java", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.headless;\n+\n+import org.apache.nifi.NiFiServer;\n+import org.apache.nifi.admin.service.AuditService;\n+import org.apache.nifi.admin.service.impl.StandardAuditService;\n+import org.apache.nifi.authorization.AuthorizationRequest;\n+import org.apache.nifi.authorization.AuthorizationResult;\n+import org.apache.nifi.authorization.Authorizer;\n+import org.apache.nifi.authorization.AuthorizerConfigurationContext;\n+import org.apache.nifi.authorization.AuthorizerInitializationContext;\n+import org.apache.nifi.authorization.FlowParser;\n+import org.apache.nifi.authorization.exception.AuthorizationAccessException;\n+import org.apache.nifi.authorization.exception.AuthorizerCreationException;\n+import org.apache.nifi.authorization.exception.AuthorizerDestructionException;\n+import org.apache.nifi.bundle.Bundle;\n+import org.apache.nifi.controller.FlowController;\n+import org.apache.nifi.controller.StandardFlowService;\n+import org.apache.nifi.controller.flow.FlowManager;\n+import org.apache.nifi.controller.repository.FlowFileEventRepository;\n+import org.apache.nifi.controller.repository.metrics.RingBufferEventRepository;\n+import org.apache.nifi.diagnostics.DiagnosticsFactory;\n+import org.apache.nifi.encrypt.StringEncryptor;\n+import org.apache.nifi.events.VolatileBulletinRepository;\n+import org.apache.nifi.nar.ExtensionDiscoveringManager;\n+import org.apache.nifi.nar.ExtensionManagerHolder;\n+import org.apache.nifi.nar.ExtensionMapping;\n+import org.apache.nifi.nar.StandardExtensionDiscoveringManager;\n+import org.apache.nifi.registry.VariableRegistry;\n+import org.apache.nifi.registry.flow.StandardFlowRegistryClient;\n+import org.apache.nifi.registry.variable.FileBasedVariableRegistry;\n+import org.apache.nifi.reporting.BulletinRepository;\n+import org.apache.nifi.services.FlowService;\n+import org.apache.nifi.util.NiFiProperties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ */\n+public class HeadlessNiFiServer implements NiFiServer {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(HeadlessNiFiServer.class);\n+    private NiFiProperties props;\n+    private Bundle systemBundle;\n+    private Set<Bundle> bundles;\n+    private FlowService flowService;\n+\n+    private static final String DEFAULT_SENSITIVE_PROPS_KEY = \"nififtw!\";\n+\n+    /**\n+     * Default constructor\n+     */\n+    public HeadlessNiFiServer() {\n+    }\n+\n+    public void start() {\n+        try {\n+\n+            // Create a standard extension manager and discover extensions\n+            final ExtensionDiscoveringManager extensionManager = new StandardExtensionDiscoveringManager();\n+            extensionManager.discoverExtensions(systemBundle, bundles);\n+            extensionManager.logClassLoaderMapping();\n+\n+            // Set the extension manager into the holder which makes it available to the Spring context via a factory bean\n+            ExtensionManagerHolder.init(extensionManager);\n+\n+            // Enrich the flow xml using the Extension Manager mapping\n+            final FlowParser flowParser = new FlowParser();\n+            final FlowEnricher flowEnricher = new FlowEnricher(this, flowParser, props);\n+            flowEnricher.enrichFlowWithBundleInformation();\n+            logger.info(\"Loading Flow...\");\n+\n+            FlowFileEventRepository flowFileEventRepository = new RingBufferEventRepository(5);\n+            AuditService auditService = new StandardAuditService();\n+            Authorizer authorizer = new Authorizer() {\n+                @Override\n+                public AuthorizationResult authorize(AuthorizationRequest request) throws AuthorizationAccessException {\n+                    return AuthorizationResult.approved();\n+                }\n+\n+                @Override\n+                public void initialize(AuthorizerInitializationContext initializationContext) throws AuthorizerCreationException {\n+                    // do nothing\n+                }\n+\n+                @Override\n+                public void onConfigured(AuthorizerConfigurationContext configurationContext) throws AuthorizerCreationException {\n+                    // do nothing\n+                }\n+\n+                @Override\n+                public void preDestruction() throws AuthorizerDestructionException {\n+                    // do nothing\n+                }\n+            };\n+\n+            final String sensitivePropAlgorithmVal = props.getProperty(StringEncryptor.NF_SENSITIVE_PROPS_ALGORITHM);\n+            final String sensitivePropProviderVal = props.getProperty(StringEncryptor.NF_SENSITIVE_PROPS_PROVIDER);\n+            final String sensitivePropValueNifiPropVar = props.getProperty(StringEncryptor.NF_SENSITIVE_PROPS_KEY, DEFAULT_SENSITIVE_PROPS_KEY);\n+\n+            StringEncryptor encryptor = StringEncryptor.createEncryptor(sensitivePropAlgorithmVal, sensitivePropProviderVal, sensitivePropValueNifiPropVar);\n+            VariableRegistry variableRegistry = new FileBasedVariableRegistry(props.getVariableRegistryPropertiesPaths());\n+            BulletinRepository bulletinRepository = new VolatileBulletinRepository();\n+            StandardFlowRegistryClient flowRegistryClient = new StandardFlowRegistryClient();\n+            flowRegistryClient.setProperties(props);\n+\n+            FlowController flowController = FlowController.createStandaloneInstance(\n+                    flowFileEventRepository,\n+                    props,\n+                    authorizer,\n+                    auditService,\n+                    encryptor,\n+                    bulletinRepository,\n+                    variableRegistry,\n+                    flowRegistryClient,\n+                    extensionManager\n+                    );\n+\n+            flowService = StandardFlowService.createStandaloneInstance(\n+                    flowController,\n+                    props,\n+                    encryptor,\n+                    null, // revision manager\n+                    authorizer);\n+\n+            // start and load the flow\n+            flowService.start();\n+            flowService.load(null);\n+            flowController.onFlowInitialized(true);\n+            FlowManager flowManager = flowController.getFlowManager();\n+            flowManager.getGroup(flowManager.getRootGroupId()).startProcessing();\n+\n+            logger.info(\"Flow loaded successfully.\");\n+        } catch (Exception e) {\n+            // ensure the flow service is terminated\n+            if (flowService != null && flowService.isRunning()) {\n+                flowService.stop(false);\n+            }\n+            startUpFailure(new Exception(\"Unable to load flow due to: \" + e, e));\n+        }\n+    }\n+\n+    private void startUpFailure(Throwable t) {\n+        System.err.println(\"Failed to start flow service: \" + t.getMessage());\n+        System.err.println(\"Shutting down...\");\n+        logger.warn(\"Failed to start headless server... shutting down.\", t);\n+        System.exit(1);\n+    }\n+\n+    @Override\n+    public void initialize(NiFiProperties properties, Bundle systemBundle, Set<Bundle> bundles, ExtensionMapping extensionMapping) {\n+        this.props = properties;\n+        this.systemBundle = systemBundle;\n+        this.bundles = bundles;\n+    }\n+\n+    public DiagnosticsFactory getDiagnosticsFactory() {\n+        return null;\n+    }\n+\n+    public DiagnosticsFactory getThreadDumpFactory() {\n+        return null;\n+    }", "originalCommit": "86f1c697701be44e12f88ffd7c7c5705e1cb0c49", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA2OTU4Mw==", "url": "https://github.com/apache/nifi/pull/4509#discussion_r497069583", "bodyText": "I updated the PR to use the same diagnostics stuff that the JettyServer stuff uses, just had to create it explicitly (JettyServer gets its instance injected via Spring).", "author": "mattyb149", "createdAt": "2020-09-29T21:26:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA4NjE1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "c36bac551ca3fac6f4a3b94c664ebc43573ce77f", "chunk": "diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-headless-server/src/main/java/org/apache/nifi/headless/HeadlessNiFiServer.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-headless-server/src/main/java/org/apache/nifi/headless/HeadlessNiFiServer.java\nindex 341345d4f0..0b888fc041 100644\n--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-headless-server/src/main/java/org/apache/nifi/headless/HeadlessNiFiServer.java\n+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-headless-server/src/main/java/org/apache/nifi/headless/HeadlessNiFiServer.java\n\n@@ -34,7 +34,11 @@ import org.apache.nifi.controller.StandardFlowService;\n import org.apache.nifi.controller.flow.FlowManager;\n import org.apache.nifi.controller.repository.FlowFileEventRepository;\n import org.apache.nifi.controller.repository.metrics.RingBufferEventRepository;\n+import org.apache.nifi.diagnostics.DiagnosticsDump;\n+import org.apache.nifi.diagnostics.DiagnosticsDumpElement;\n import org.apache.nifi.diagnostics.DiagnosticsFactory;\n+import org.apache.nifi.diagnostics.ThreadDumpTask;\n+import org.apache.nifi.diagnostics.bootstrap.BootstrapDiagnosticsFactory;\n import org.apache.nifi.encrypt.StringEncryptor;\n import org.apache.nifi.events.VolatileBulletinRepository;\n import org.apache.nifi.nar.ExtensionDiscoveringManager;\n"}}, {"oid": "1525562f2c7ceb428851b6ddfa76ac9a285a46b7", "url": "https://github.com/apache/nifi/commit/1525562f2c7ceb428851b6ddfa76ac9a285a46b7", "message": "NIFI-7592: Allow NiFi to be started without a GUI/REST interface", "committedDate": "2020-09-29T17:58:34Z", "type": "commit"}, {"oid": "4cbbbcbf953c95bba17bf144dee9f8f96d40a5a9", "url": "https://github.com/apache/nifi/commit/4cbbbcbf953c95bba17bf144dee9f8f96d40a5a9", "message": "NIFI-7592: Enable all controller services when starting headless", "committedDate": "2020-09-29T17:58:36Z", "type": "commit"}, {"oid": "955086af81e445b709214629fe3deac2b47f7536", "url": "https://github.com/apache/nifi/commit/955086af81e445b709214629fe3deac2b47f7536", "message": "NIFI-7592: Marked duplicate dependencies as provided", "committedDate": "2020-09-29T20:23:10Z", "type": "commit"}, {"oid": "955086af81e445b709214629fe3deac2b47f7536", "url": "https://github.com/apache/nifi/commit/955086af81e445b709214629fe3deac2b47f7536", "message": "NIFI-7592: Marked duplicate dependencies as provided", "committedDate": "2020-09-29T20:23:10Z", "type": "forcePushed"}, {"oid": "c36bac551ca3fac6f4a3b94c664ebc43573ce77f", "url": "https://github.com/apache/nifi/commit/c36bac551ca3fac6f4a3b94c664ebc43573ce77f", "message": "NIFI-7592: Incorporated additional review comments", "committedDate": "2020-09-29T21:24:07Z", "type": "commit"}]}