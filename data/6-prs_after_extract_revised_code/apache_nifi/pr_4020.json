{"pr_number": 4020, "pr_title": "NIFI-7054: Add RecordSinkServiceLookup for dynamic sink routing", "pr_createdAt": "2020-01-27T17:02:37Z", "pr_url": "https://github.com/apache/nifi/pull/4020", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc0NDY1Nw==", "url": "https://github.com/apache/nifi/pull/4020#discussion_r372744657", "bodyText": "I think this only sets the recordSinkService variable once, however if the value changes, and if the reset is invoked, only the first used in the lookup service is reset.  Should there be a way to ensure that all used values are reset when invoked? Or at least to ensure that the recordSinkService is changed when a different recordSink is retrieved?", "author": "YolandaMDavis", "createdAt": "2020-01-30T03:30:49Z", "path": "nifi-nar-bundles/nifi-standard-services/nifi-record-sink-service-bundle/nifi-record-sink-service/src/main/java/org/apache/nifi/record/sink/lookup/RecordSinkServiceLookup.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.record.sink.lookup;\n+\n+import org.apache.nifi.annotation.behavior.DynamicProperty;\n+import org.apache.nifi.annotation.documentation.CapabilityDescription;\n+import org.apache.nifi.annotation.documentation.Tags;\n+import org.apache.nifi.expression.ExpressionLanguageScope;\n+import org.apache.nifi.processor.exception.ProcessException;\n+import org.apache.nifi.record.sink.RecordSinkService;\n+import org.apache.nifi.serialization.WriteResult;\n+import org.apache.nifi.serialization.record.RecordSet;\n+import org.apache.nifi.service.lookup.AbstractSingleAttributeBasedControllerServiceLookup;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+\n+@Tags({\"record\", \"sink\", \"lookup\"})\n+@CapabilityDescription(\"Provides a RecordSinkService that can be used to dynamically select another RecordSinkService. This service \" +\n+        \"requires an attribute named 'record.sink.name' to be passed in when asking for a connection, and will throw an exception \" +\n+        \"if the attribute is missing. The value of 'record.sink.name' will be used to select the RecordSinkService that has been \" +\n+        \"registered with that name. This will allow multiple RecordSinkServices to be defined and registered, and then selected \" +\n+        \"dynamically at runtime by tagging flow files with the appropriate 'record.sink.name' attribute.\")\n+@DynamicProperty(name = \"The name to register the specified RecordSinkService\", value = \"The RecordSinkService\",\n+        description = \"If '\" + RecordSinkServiceLookup.RECORD_SINK_NAME_ATTRIBUTE + \"' attribute contains \" +\n+                \"the name of the dynamic property, then the RecordSinkService (registered in the value) will be selected.\",\n+        expressionLanguageScope = ExpressionLanguageScope.NONE)\n+public class RecordSinkServiceLookup\n+        extends AbstractSingleAttributeBasedControllerServiceLookup<RecordSinkService> implements RecordSinkService {\n+\n+    public static final String RECORD_SINK_NAME_ATTRIBUTE = \"record.sink.name\";\n+\n+    RecordSinkService recordSinkService;\n+\n+    @Override\n+    protected String getLookupAttribute() {\n+        return RECORD_SINK_NAME_ATTRIBUTE;\n+    }\n+\n+    @Override\n+    public Class<RecordSinkService> getServiceType() {\n+        return RecordSinkService.class;\n+    }\n+\n+    @Override\n+    public WriteResult sendData(RecordSet recordSet, Map<String, String> attributes, boolean sendZeroResults) throws IOException {\n+        try {\n+            RecordSinkService recordSink = lookupService(attributes);\n+            WriteResult writeResult = recordSink.sendData(recordSet, attributes, sendZeroResults);\n+            if (recordSinkService == null) {", "originalCommit": "d3c2dc35b3d1d65eb7577575ee9af9219a1422e0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "01f8e77597e4755f51336d73b4293237cb3d311f", "chunk": "diff --git a/nifi-nar-bundles/nifi-standard-services/nifi-record-sink-service-bundle/nifi-record-sink-service/src/main/java/org/apache/nifi/record/sink/lookup/RecordSinkServiceLookup.java b/nifi-nar-bundles/nifi-standard-services/nifi-record-sink-service-bundle/nifi-record-sink-service/src/main/java/org/apache/nifi/record/sink/lookup/RecordSinkServiceLookup.java\nindex 67e2b12f49..143cb7f8e2 100644\n--- a/nifi-nar-bundles/nifi-standard-services/nifi-record-sink-service-bundle/nifi-record-sink-service/src/main/java/org/apache/nifi/record/sink/lookup/RecordSinkServiceLookup.java\n+++ b/nifi-nar-bundles/nifi-standard-services/nifi-record-sink-service-bundle/nifi-record-sink-service/src/main/java/org/apache/nifi/record/sink/lookup/RecordSinkServiceLookup.java\n\n@@ -35,7 +35,8 @@ import java.util.Map;\n         \"requires an attribute named 'record.sink.name' to be passed in when asking for a connection, and will throw an exception \" +\n         \"if the attribute is missing. The value of 'record.sink.name' will be used to select the RecordSinkService that has been \" +\n         \"registered with that name. This will allow multiple RecordSinkServices to be defined and registered, and then selected \" +\n-        \"dynamically at runtime by tagging flow files with the appropriate 'record.sink.name' attribute.\")\n+        \"dynamically at runtime by tagging flow files with the appropriate 'record.sink.name' attribute. Note that this controller service \" +\n+        \"is not intended for use in reporting tasks that employ RecordSinkService instances, such as QueryNiFiReportingTask.\")\n @DynamicProperty(name = \"The name to register the specified RecordSinkService\", value = \"The RecordSinkService\",\n         description = \"If '\" + RecordSinkServiceLookup.RECORD_SINK_NAME_ATTRIBUTE + \"' attribute contains \" +\n                 \"the name of the dynamic property, then the RecordSinkService (registered in the value) will be selected.\",\n"}}, {"oid": "1987d24e816b947df0cb154c421283f81060b994", "url": "https://github.com/apache/nifi/commit/1987d24e816b947df0cb154c421283f81060b994", "message": "NIFI-7054: Add RecordSinkServiceLookup for dynamic sink routing", "committedDate": "2020-01-31T15:20:23Z", "type": "commit"}, {"oid": "01f8e77597e4755f51336d73b4293237cb3d311f", "url": "https://github.com/apache/nifi/commit/01f8e77597e4755f51336d73b4293237cb3d311f", "message": "NIFI-7054: Incorporated review comments", "committedDate": "2020-01-31T16:16:19Z", "type": "commit"}, {"oid": "01f8e77597e4755f51336d73b4293237cb3d311f", "url": "https://github.com/apache/nifi/commit/01f8e77597e4755f51336d73b4293237cb3d311f", "message": "NIFI-7054: Incorporated review comments", "committedDate": "2020-01-31T16:16:19Z", "type": "forcePushed"}]}