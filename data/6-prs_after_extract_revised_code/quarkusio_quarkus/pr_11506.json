{"pr_number": 11506, "pr_title": "Hibernate Validator: status 400 instead of 500 if JAX-RS method is defined in interface", "pr_createdAt": "2020-08-20T23:21:53Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/11506", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwMjM4Nw==", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474502387", "bodyText": "Please use standard imperative code. This is far less readable.", "author": "gsmet", "createdAt": "2020-08-21T08:08:40Z", "path": "extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/MethodValidatedAnnotationsTransformer.java", "diffHunk": "@@ -96,11 +81,10 @@ private boolean requiresValidation(MethodInfo method) {\n     }\n \n     private boolean isJaxrsMethod(MethodInfo method) {\n-        for (DotName jaxrsMethodAnnotation : effectiveJaxRsMethodDefiningAnnotations) {\n-            if (method.hasAnnotation(jaxrsMethodAnnotation)) {\n-                return true;\n-            }\n-        }\n-        return false;\n+        ClassInfo clazz = method.declaringClass();\n+        return Stream.concat(Stream.of(clazz.name()), clazz.interfaceNames().stream())\n+                .anyMatch(dotName -> Optional.ofNullable(jaxRsMethods.get(dotName))\n+                        .map(methodNames -> methodNames.contains(method.name()))\n+                        .orElse(false));", "originalCommit": "dc95482166927b0615af06892eb6bac0c629bb45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0NTAzMg==", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474645032", "bodyText": "Ok, will change it.\nAfter forcing myself to use streaming API for a few months after it came out, I can now actually read something like this better than a cascade of loops and ifs and local variables.", "author": "famod", "createdAt": "2020-08-21T11:42:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwMjM4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgwNjI4Nw==", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474806287", "bodyText": "Done. The method became more complex anyway.", "author": "famod", "createdAt": "2020-08-21T16:36:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwMjM4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "2ea1124d50641fe84960796d27e8a8c0d35d736b", "chunk": "diff --git a/extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/MethodValidatedAnnotationsTransformer.java b/extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/MethodValidatedAnnotationsTransformer.java\nindex 15a370f0ec..9f85300028 100644\n--- a/extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/MethodValidatedAnnotationsTransformer.java\n+++ b/extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/MethodValidatedAnnotationsTransformer.java\n\n@@ -70,10 +69,12 @@ public class MethodValidatedAnnotationsTransformer implements AnnotationsTransfo\n         }\n         // This method has no annotations of its own: look for inherited annotations\n         ClassInfo clazz = method.declaringClass();\n-        String methodName = method.name().toString();\n-        for (Map.Entry<DotName, Set<String>> validatedMethod : inheritedAnnotationsToBeValidated.entrySet()) {\n-            if (clazz.interfaceNames().contains(validatedMethod.getKey())\n-                    && validatedMethod.getValue().contains(methodName)) {\n+        SimpleMethodSignatureKey signatureKey = new SimpleMethodSignatureKey(method);\n+        for (Map.Entry<DotName, Set<SimpleMethodSignatureKey>> validatedMethod : inheritedAnnotationsToBeValidated.entrySet()) {\n+            DotName ifaceOrSuperClass = validatedMethod.getKey();\n+            // note: only check the direct superclass since we do not (yet) have the entire ClassInfo hierarchy here\n+            if ((clazz.interfaceNames().contains(ifaceOrSuperClass) || ifaceOrSuperClass.equals(clazz.superName()))\n+                    && validatedMethod.getValue().contains(signatureKey)) {\n                 return true;\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwMzc5MA==", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474503790", "bodyText": "I think it would be better conceptually to pass the full list to the method rather than building it inside.", "author": "gsmet", "createdAt": "2020-08-21T08:10:17Z", "path": "extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/HibernateValidatorProcessor.java", "diffHunk": "@@ -327,6 +339,34 @@ private static void contributeMethodsWithInheritedValidation(Map<DotName, Set<St\n         }\n     }\n \n+    private static Map<DotName, Set<String>> gatherJaxRsMethods(\n+            List<AdditionalJaxRsResourceMethodAnnotationsBuildItem> additionalJaxRsResourceMethodAnnotations,\n+            IndexView indexView) {\n+        Map<DotName, Set<String>> jaxRsMethods = new HashMap<>();\n+\n+        Collection<DotName> effectiveJaxRsMethodDefiningAnnotations = new ArrayList<>(\n+                JAXRS_METHOD_ANNOTATIONS.length + additionalJaxRsResourceMethodAnnotations.size());\n+        effectiveJaxRsMethodDefiningAnnotations.addAll(Arrays.asList(JAXRS_METHOD_ANNOTATIONS));", "originalCommit": "dc95482166927b0615af06892eb6bac0c629bb45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0MzU1Ng==", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474643556", "bodyText": "Hm, the build() method is already packed with so many local variables which is why I aimed for a separate, very cohesive private method.\nThe full list is also not used by any other code in the processor.\nBut if you prefer it that way (and it is then more in line with other processors) I will change it.", "author": "famod", "createdAt": "2020-08-21T11:39:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwMzc5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0NTIwNg==", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474645206", "bodyText": "Ok, let's leave it at that.", "author": "gsmet", "createdAt": "2020-08-21T11:43:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwMzc5MA=="}], "type": "inlineReview", "revised_code": {"commit": "2ea1124d50641fe84960796d27e8a8c0d35d736b", "chunk": "diff --git a/extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/HibernateValidatorProcessor.java b/extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/HibernateValidatorProcessor.java\nindex c3acf0af4c..da1adff310 100644\n--- a/extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/HibernateValidatorProcessor.java\n+++ b/extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/HibernateValidatorProcessor.java\n\n@@ -329,29 +332,30 @@ class HibernateValidatorProcessor {\n         }\n     }\n \n-    private static void contributeMethodsWithInheritedValidation(Map<DotName, Set<String>> inheritedAnnotationsToBeValidated,\n+    private static void contributeMethodsWithInheritedValidation(\n+            Map<DotName, Set<SimpleMethodSignatureKey>> inheritedAnnotationsToBeValidated,\n             IndexView indexView, MethodInfo method) {\n         ClassInfo clazz = method.declaringClass();\n         if (Modifier.isInterface(clazz.flags())) {\n             // Remember annotated interface methods that must be validated\n-            inheritedAnnotationsToBeValidated.computeIfAbsent(clazz.name(), k -> new HashSet<String>())\n-                    .add(method.name().toString());\n+            inheritedAnnotationsToBeValidated.computeIfAbsent(clazz.name(), k -> new HashSet<>())\n+                    .add(new SimpleMethodSignatureKey(method));\n         }\n     }\n \n-    private static Map<DotName, Set<String>> gatherJaxRsMethods(\n+    private static Map<DotName, Set<SimpleMethodSignatureKey>> gatherJaxRsMethods(\n             List<AdditionalJaxRsResourceMethodAnnotationsBuildItem> additionalJaxRsResourceMethodAnnotations,\n             IndexView indexView) {\n-        Map<DotName, Set<String>> jaxRsMethods = new HashMap<>();\n+        Map<DotName, Set<SimpleMethodSignatureKey>> jaxRsMethods = new HashMap<>();\n \n-        Collection<DotName> effectiveJaxRsMethodDefiningAnnotations = new ArrayList<>(\n+        Collection<DotName> jaxRsMethodDefiningAnnotations = new ArrayList<>(\n                 JAXRS_METHOD_ANNOTATIONS.length + additionalJaxRsResourceMethodAnnotations.size());\n-        effectiveJaxRsMethodDefiningAnnotations.addAll(Arrays.asList(JAXRS_METHOD_ANNOTATIONS));\n+        jaxRsMethodDefiningAnnotations.addAll(Arrays.asList(JAXRS_METHOD_ANNOTATIONS));\n         for (AdditionalJaxRsResourceMethodAnnotationsBuildItem additionalJaxRsResourceMethodAnnotation : additionalJaxRsResourceMethodAnnotations) {\n-            effectiveJaxRsMethodDefiningAnnotations.addAll(additionalJaxRsResourceMethodAnnotation.getAnnotationClasses());\n+            jaxRsMethodDefiningAnnotations.addAll(additionalJaxRsResourceMethodAnnotation.getAnnotationClasses());\n         }\n \n-        for (DotName jaxRsAnnotation : effectiveJaxRsMethodDefiningAnnotations) {\n+        for (DotName jaxRsAnnotation : jaxRsMethodDefiningAnnotations) {\n             Collection<AnnotationInstance> annotationInstances = indexView.getAnnotations(jaxRsAnnotation);\n \n             if (annotationInstances.isEmpty()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwNDE4MQ==", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474504181", "bodyText": "You also need to check that the kind of the target is a method.", "author": "gsmet", "createdAt": "2020-08-21T08:10:42Z", "path": "extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/HibernateValidatorProcessor.java", "diffHunk": "@@ -327,6 +339,34 @@ private static void contributeMethodsWithInheritedValidation(Map<DotName, Set<St\n         }\n     }\n \n+    private static Map<DotName, Set<String>> gatherJaxRsMethods(\n+            List<AdditionalJaxRsResourceMethodAnnotationsBuildItem> additionalJaxRsResourceMethodAnnotations,\n+            IndexView indexView) {\n+        Map<DotName, Set<String>> jaxRsMethods = new HashMap<>();\n+\n+        Collection<DotName> effectiveJaxRsMethodDefiningAnnotations = new ArrayList<>(\n+                JAXRS_METHOD_ANNOTATIONS.length + additionalJaxRsResourceMethodAnnotations.size());\n+        effectiveJaxRsMethodDefiningAnnotations.addAll(Arrays.asList(JAXRS_METHOD_ANNOTATIONS));\n+        for (AdditionalJaxRsResourceMethodAnnotationsBuildItem additionalJaxRsResourceMethodAnnotation : additionalJaxRsResourceMethodAnnotations) {\n+            effectiveJaxRsMethodDefiningAnnotations.addAll(additionalJaxRsResourceMethodAnnotation.getAnnotationClasses());\n+        }\n+\n+        for (DotName jaxRsAnnotation : effectiveJaxRsMethodDefiningAnnotations) {\n+            Collection<AnnotationInstance> annotationInstances = indexView.getAnnotations(jaxRsAnnotation);\n+\n+            if (annotationInstances.isEmpty()) {\n+                continue;\n+            }", "originalCommit": "dc95482166927b0615af06892eb6bac0c629bb45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0MTU2MQ==", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474641561", "bodyText": "I actually had this already, but what to do if it's not a method?\n\ndo nothing?\nlog a warning?\nthrow an explicit exception? (right now asMethod() will throw an exception if the target is not a method)\n\nAs far as I understood AdditionalJaxRsResourceMethodAnnotationsBuildItem, arbitrary annotations can be added and those annotations could be only or also class level annotations.\nBut the logic in the transformer is only considering methods.", "author": "famod", "createdAt": "2020-08-21T11:35:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwNDE4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0NzMzNg==", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474647336", "bodyText": "Just saw #11506 (comment). So the last option is not valid.\nI'll go with the first one (do nothing) but the question remains whether the transformer must consider class level annotations as well (probably yes).", "author": "famod", "createdAt": "2020-08-21T11:48:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwNDE4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY1ODU3Mg==", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474658572", "bodyText": "Yeah we should do nothing but we probably need to understand better how things work in the Spring compatibility layer. Let's discuss with @geoand next week.", "author": "gsmet", "createdAt": "2020-08-21T12:14:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwNDE4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgwNjAwMg==", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474806002", "bodyText": "Check + \"do nothing\" added (and a comment).", "author": "famod", "createdAt": "2020-08-21T16:35:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwNDE4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxMDIwMA==", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474810200", "bodyText": "See #11532 for the rest.", "author": "famod", "createdAt": "2020-08-21T16:44:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwNDE4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "2ea1124d50641fe84960796d27e8a8c0d35d736b", "chunk": "diff --git a/extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/HibernateValidatorProcessor.java b/extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/HibernateValidatorProcessor.java\nindex c3acf0af4c..da1adff310 100644\n--- a/extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/HibernateValidatorProcessor.java\n+++ b/extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/HibernateValidatorProcessor.java\n\n@@ -329,29 +332,30 @@ class HibernateValidatorProcessor {\n         }\n     }\n \n-    private static void contributeMethodsWithInheritedValidation(Map<DotName, Set<String>> inheritedAnnotationsToBeValidated,\n+    private static void contributeMethodsWithInheritedValidation(\n+            Map<DotName, Set<SimpleMethodSignatureKey>> inheritedAnnotationsToBeValidated,\n             IndexView indexView, MethodInfo method) {\n         ClassInfo clazz = method.declaringClass();\n         if (Modifier.isInterface(clazz.flags())) {\n             // Remember annotated interface methods that must be validated\n-            inheritedAnnotationsToBeValidated.computeIfAbsent(clazz.name(), k -> new HashSet<String>())\n-                    .add(method.name().toString());\n+            inheritedAnnotationsToBeValidated.computeIfAbsent(clazz.name(), k -> new HashSet<>())\n+                    .add(new SimpleMethodSignatureKey(method));\n         }\n     }\n \n-    private static Map<DotName, Set<String>> gatherJaxRsMethods(\n+    private static Map<DotName, Set<SimpleMethodSignatureKey>> gatherJaxRsMethods(\n             List<AdditionalJaxRsResourceMethodAnnotationsBuildItem> additionalJaxRsResourceMethodAnnotations,\n             IndexView indexView) {\n-        Map<DotName, Set<String>> jaxRsMethods = new HashMap<>();\n+        Map<DotName, Set<SimpleMethodSignatureKey>> jaxRsMethods = new HashMap<>();\n \n-        Collection<DotName> effectiveJaxRsMethodDefiningAnnotations = new ArrayList<>(\n+        Collection<DotName> jaxRsMethodDefiningAnnotations = new ArrayList<>(\n                 JAXRS_METHOD_ANNOTATIONS.length + additionalJaxRsResourceMethodAnnotations.size());\n-        effectiveJaxRsMethodDefiningAnnotations.addAll(Arrays.asList(JAXRS_METHOD_ANNOTATIONS));\n+        jaxRsMethodDefiningAnnotations.addAll(Arrays.asList(JAXRS_METHOD_ANNOTATIONS));\n         for (AdditionalJaxRsResourceMethodAnnotationsBuildItem additionalJaxRsResourceMethodAnnotation : additionalJaxRsResourceMethodAnnotations) {\n-            effectiveJaxRsMethodDefiningAnnotations.addAll(additionalJaxRsResourceMethodAnnotation.getAnnotationClasses());\n+            jaxRsMethodDefiningAnnotations.addAll(additionalJaxRsResourceMethodAnnotation.getAnnotationClasses());\n         }\n \n-        for (DotName jaxRsAnnotation : effectiveJaxRsMethodDefiningAnnotations) {\n+        for (DotName jaxRsAnnotation : jaxRsMethodDefiningAnnotations) {\n             Collection<AnnotationInstance> annotationInstances = indexView.getAnnotations(jaxRsAnnotation);\n \n             if (annotationInstances.isEmpty()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwNTk3MQ==", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474505971", "bodyText": "The name is not sufficient, you need to build the signature.", "author": "gsmet", "createdAt": "2020-08-21T08:12:44Z", "path": "extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/HibernateValidatorProcessor.java", "diffHunk": "@@ -327,6 +339,34 @@ private static void contributeMethodsWithInheritedValidation(Map<DotName, Set<St\n         }\n     }\n \n+    private static Map<DotName, Set<String>> gatherJaxRsMethods(\n+            List<AdditionalJaxRsResourceMethodAnnotationsBuildItem> additionalJaxRsResourceMethodAnnotations,\n+            IndexView indexView) {\n+        Map<DotName, Set<String>> jaxRsMethods = new HashMap<>();\n+\n+        Collection<DotName> effectiveJaxRsMethodDefiningAnnotations = new ArrayList<>(\n+                JAXRS_METHOD_ANNOTATIONS.length + additionalJaxRsResourceMethodAnnotations.size());\n+        effectiveJaxRsMethodDefiningAnnotations.addAll(Arrays.asList(JAXRS_METHOD_ANNOTATIONS));\n+        for (AdditionalJaxRsResourceMethodAnnotationsBuildItem additionalJaxRsResourceMethodAnnotation : additionalJaxRsResourceMethodAnnotations) {\n+            effectiveJaxRsMethodDefiningAnnotations.addAll(additionalJaxRsResourceMethodAnnotation.getAnnotationClasses());\n+        }\n+\n+        for (DotName jaxRsAnnotation : effectiveJaxRsMethodDefiningAnnotations) {\n+            Collection<AnnotationInstance> annotationInstances = indexView.getAnnotations(jaxRsAnnotation);\n+\n+            if (annotationInstances.isEmpty()) {\n+                continue;\n+            }\n+\n+            for (AnnotationInstance annotation : annotationInstances) {\n+                MethodInfo method = annotation.target().asMethod();\n+                jaxRsMethods.computeIfAbsent(method.declaringClass().name(), k -> new HashSet<String>())\n+                        .add(method.name().toString());", "originalCommit": "dc95482166927b0615af06892eb6bac0c629bb45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUxMzMyMw==", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474513323", "bodyText": "Getting the parameters() then building something with the name() of the type should be good enough.", "author": "gsmet", "createdAt": "2020-08-21T08:21:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwNTk3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDYzOTg2Mg==", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474639862", "bodyText": "I had the same thought while looking at inheritedAnnotationsToBeValidated which is also only considering the method names.\nThat is why I ignored this problem for now, but I should have left a comment.\nBut since you brought this up I guess I should fix both the new jaxRsMethods map and the already existing inheritedAnnotationsToBeValidated map?", "author": "famod", "createdAt": "2020-08-21T11:31:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwNTk3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0NTUzNw==", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474645537", "bodyText": "I think that would be a good idea if not more complex that I envision it.", "author": "gsmet", "createdAt": "2020-08-21T11:44:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwNTk3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY3MjUxOA==", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474672518", "bodyText": "I'll take a stab at jaxRsMethods first and in case I have some time left and it is easy enough I'll adjust the other map as well.\nOtherwise I'll create a follow-up issue/pr.", "author": "famod", "createdAt": "2020-08-21T12:43:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwNTk3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgwNTcyMQ==", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474805721", "bodyText": "Done. jaxRsMethods is now holding Set<SimpleMethodSignatureKey> instead of Set<String>.\nI'll have a look at inheritedAnnotationsToBeValidated next.", "author": "famod", "createdAt": "2020-08-21T16:35:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwNTk3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "2ea1124d50641fe84960796d27e8a8c0d35d736b", "chunk": "diff --git a/extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/HibernateValidatorProcessor.java b/extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/HibernateValidatorProcessor.java\nindex c3acf0af4c..da1adff310 100644\n--- a/extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/HibernateValidatorProcessor.java\n+++ b/extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/HibernateValidatorProcessor.java\n\n@@ -329,29 +332,30 @@ class HibernateValidatorProcessor {\n         }\n     }\n \n-    private static void contributeMethodsWithInheritedValidation(Map<DotName, Set<String>> inheritedAnnotationsToBeValidated,\n+    private static void contributeMethodsWithInheritedValidation(\n+            Map<DotName, Set<SimpleMethodSignatureKey>> inheritedAnnotationsToBeValidated,\n             IndexView indexView, MethodInfo method) {\n         ClassInfo clazz = method.declaringClass();\n         if (Modifier.isInterface(clazz.flags())) {\n             // Remember annotated interface methods that must be validated\n-            inheritedAnnotationsToBeValidated.computeIfAbsent(clazz.name(), k -> new HashSet<String>())\n-                    .add(method.name().toString());\n+            inheritedAnnotationsToBeValidated.computeIfAbsent(clazz.name(), k -> new HashSet<>())\n+                    .add(new SimpleMethodSignatureKey(method));\n         }\n     }\n \n-    private static Map<DotName, Set<String>> gatherJaxRsMethods(\n+    private static Map<DotName, Set<SimpleMethodSignatureKey>> gatherJaxRsMethods(\n             List<AdditionalJaxRsResourceMethodAnnotationsBuildItem> additionalJaxRsResourceMethodAnnotations,\n             IndexView indexView) {\n-        Map<DotName, Set<String>> jaxRsMethods = new HashMap<>();\n+        Map<DotName, Set<SimpleMethodSignatureKey>> jaxRsMethods = new HashMap<>();\n \n-        Collection<DotName> effectiveJaxRsMethodDefiningAnnotations = new ArrayList<>(\n+        Collection<DotName> jaxRsMethodDefiningAnnotations = new ArrayList<>(\n                 JAXRS_METHOD_ANNOTATIONS.length + additionalJaxRsResourceMethodAnnotations.size());\n-        effectiveJaxRsMethodDefiningAnnotations.addAll(Arrays.asList(JAXRS_METHOD_ANNOTATIONS));\n+        jaxRsMethodDefiningAnnotations.addAll(Arrays.asList(JAXRS_METHOD_ANNOTATIONS));\n         for (AdditionalJaxRsResourceMethodAnnotationsBuildItem additionalJaxRsResourceMethodAnnotation : additionalJaxRsResourceMethodAnnotations) {\n-            effectiveJaxRsMethodDefiningAnnotations.addAll(additionalJaxRsResourceMethodAnnotation.getAnnotationClasses());\n+            jaxRsMethodDefiningAnnotations.addAll(additionalJaxRsResourceMethodAnnotation.getAnnotationClasses());\n         }\n \n-        for (DotName jaxRsAnnotation : effectiveJaxRsMethodDefiningAnnotations) {\n+        for (DotName jaxRsAnnotation : jaxRsMethodDefiningAnnotations) {\n             Collection<AnnotationInstance> annotationInstances = indexView.getAnnotations(jaxRsAnnotation);\n \n             if (annotationInstances.isEmpty()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwNjgwMQ==", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474506801", "bodyText": "Same here, you need to use the signature.", "author": "gsmet", "createdAt": "2020-08-21T08:13:40Z", "path": "extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/MethodValidatedAnnotationsTransformer.java", "diffHunk": "@@ -96,11 +81,10 @@ private boolean requiresValidation(MethodInfo method) {\n     }\n \n     private boolean isJaxrsMethod(MethodInfo method) {\n-        for (DotName jaxrsMethodAnnotation : effectiveJaxRsMethodDefiningAnnotations) {\n-            if (method.hasAnnotation(jaxrsMethodAnnotation)) {\n-                return true;\n-            }\n-        }\n-        return false;\n+        ClassInfo clazz = method.declaringClass();\n+        return Stream.concat(Stream.of(clazz.name()), clazz.interfaceNames().stream())\n+                .anyMatch(dotName -> Optional.ofNullable(jaxRsMethods.get(dotName))\n+                        .map(methodNames -> methodNames.contains(method.name()))", "originalCommit": "dc95482166927b0615af06892eb6bac0c629bb45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgwNDY3NA==", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474804674", "bodyText": "Done.", "author": "famod", "createdAt": "2020-08-21T16:33:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwNjgwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "2ea1124d50641fe84960796d27e8a8c0d35d736b", "chunk": "diff --git a/extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/MethodValidatedAnnotationsTransformer.java b/extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/MethodValidatedAnnotationsTransformer.java\nindex 15a370f0ec..9f85300028 100644\n--- a/extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/MethodValidatedAnnotationsTransformer.java\n+++ b/extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/MethodValidatedAnnotationsTransformer.java\n\n@@ -70,10 +69,12 @@ public class MethodValidatedAnnotationsTransformer implements AnnotationsTransfo\n         }\n         // This method has no annotations of its own: look for inherited annotations\n         ClassInfo clazz = method.declaringClass();\n-        String methodName = method.name().toString();\n-        for (Map.Entry<DotName, Set<String>> validatedMethod : inheritedAnnotationsToBeValidated.entrySet()) {\n-            if (clazz.interfaceNames().contains(validatedMethod.getKey())\n-                    && validatedMethod.getValue().contains(methodName)) {\n+        SimpleMethodSignatureKey signatureKey = new SimpleMethodSignatureKey(method);\n+        for (Map.Entry<DotName, Set<SimpleMethodSignatureKey>> validatedMethod : inheritedAnnotationsToBeValidated.entrySet()) {\n+            DotName ifaceOrSuperClass = validatedMethod.getKey();\n+            // note: only check the direct superclass since we do not (yet) have the entire ClassInfo hierarchy here\n+            if ((clazz.interfaceNames().contains(ifaceOrSuperClass) || ifaceOrSuperClass.equals(clazz.superName()))\n+                    && validatedMethod.getValue().contains(signatureKey)) {\n                 return true;\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwNzUyMA==", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474507520", "bodyText": "I have another patch moving ResteasyDotNames to a common SPI so we will be able to use the constants there rather than have a copy.", "author": "gsmet", "createdAt": "2020-08-21T08:14:29Z", "path": "extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/HibernateValidatorProcessor.java", "diffHunk": "@@ -92,6 +94,16 @@\n \n     private static final DotName REPEATABLE = DotName.createSimple(Repeatable.class.getName());\n \n+    private static final DotName[] JAXRS_METHOD_ANNOTATIONS = {\n+            DotName.createSimple(\"javax.ws.rs.GET\"),\n+            DotName.createSimple(\"javax.ws.rs.HEAD\"),\n+            DotName.createSimple(\"javax.ws.rs.DELETE\"),\n+            DotName.createSimple(\"javax.ws.rs.OPTIONS\"),\n+            DotName.createSimple(\"javax.ws.rs.PATCH\"),\n+            DotName.createSimple(\"javax.ws.rs.POST\"),\n+            DotName.createSimple(\"javax.ws.rs.PUT\"),\n+    };", "originalCommit": "dc95482166927b0615af06892eb6bac0c629bb45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0MDA1MA==", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474640050", "bodyText": "So I should wait for that PR?", "author": "famod", "createdAt": "2020-08-21T11:31:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwNzUyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0NjI2Mg==", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474646262", "bodyText": "it should be merged before the end of the day. Let's see depending on where you're at, we can do it in a follow-up.", "author": "gsmet", "createdAt": "2020-08-21T11:45:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwNzUyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIzNjM5NA==", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r475236394", "bodyText": "Done via a separate commit to allow for backporting without necessarily backporting (parts of) #11462.", "author": "famod", "createdAt": "2020-08-23T16:06:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwNzUyMA=="}], "type": "inlineReview", "revised_code": {"commit": "b49249e02c2929809d7acdbceb02bfcb30c503ea", "chunk": "diff --git a/extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/HibernateValidatorProcessor.java b/extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/HibernateValidatorProcessor.java\nindex c3acf0af4c..4a84bb290a 100644\n--- a/extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/HibernateValidatorProcessor.java\n+++ b/extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/HibernateValidatorProcessor.java\n\n@@ -94,16 +94,6 @@ class HibernateValidatorProcessor {\n \n     private static final DotName REPEATABLE = DotName.createSimple(Repeatable.class.getName());\n \n-    private static final DotName[] JAXRS_METHOD_ANNOTATIONS = {\n-            DotName.createSimple(\"javax.ws.rs.GET\"),\n-            DotName.createSimple(\"javax.ws.rs.HEAD\"),\n-            DotName.createSimple(\"javax.ws.rs.DELETE\"),\n-            DotName.createSimple(\"javax.ws.rs.OPTIONS\"),\n-            DotName.createSimple(\"javax.ws.rs.PATCH\"),\n-            DotName.createSimple(\"javax.ws.rs.POST\"),\n-            DotName.createSimple(\"javax.ws.rs.PUT\"),\n-    };\n-\n     private static final Pattern BUILT_IN_CONSTRAINT_REPEATABLE_CONTAINER_PATTERN = Pattern.compile(\"\\\\$List$\");\n \n     @BuildStep\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwODk4OA==", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474508988", "bodyText": "Don't you also need to consider the superclasses?", "author": "gsmet", "createdAt": "2020-08-21T08:16:05Z", "path": "extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/MethodValidatedAnnotationsTransformer.java", "diffHunk": "@@ -96,11 +81,10 @@ private boolean requiresValidation(MethodInfo method) {\n     }\n \n     private boolean isJaxrsMethod(MethodInfo method) {\n-        for (DotName jaxrsMethodAnnotation : effectiveJaxRsMethodDefiningAnnotations) {\n-            if (method.hasAnnotation(jaxrsMethodAnnotation)) {\n-                return true;\n-            }\n-        }\n-        return false;\n+        ClassInfo clazz = method.declaringClass();\n+        return Stream.concat(Stream.of(clazz.name()), clazz.interfaceNames().stream())", "originalCommit": "dc95482166927b0615af06892eb6bac0c629bb45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0MDQ0Nw==", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474640447", "bodyText": "Well, I'd say yes. Same problem as described here: #11506 (comment)", "author": "famod", "createdAt": "2020-08-21T11:32:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwODk4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgwNjk4NQ==", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474806985", "bodyText": "I only added a check for the direct superclass, since I do not have the entire ClassInfo hierarchy.\nTBH, I would like to stop at this point for this PR as far as superclasses are concerned.", "author": "famod", "createdAt": "2020-08-21T16:38:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwODk4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyNDU0Ng==", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474824546", "bodyText": "I'll mark this as resolved and once this is merged I'll create a follow-up issue.", "author": "famod", "createdAt": "2020-08-21T17:14:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwODk4OA=="}], "type": "inlineReview", "revised_code": {"commit": "2ea1124d50641fe84960796d27e8a8c0d35d736b", "chunk": "diff --git a/extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/MethodValidatedAnnotationsTransformer.java b/extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/MethodValidatedAnnotationsTransformer.java\nindex 15a370f0ec..9f85300028 100644\n--- a/extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/MethodValidatedAnnotationsTransformer.java\n+++ b/extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/MethodValidatedAnnotationsTransformer.java\n\n@@ -70,10 +69,12 @@ public class MethodValidatedAnnotationsTransformer implements AnnotationsTransfo\n         }\n         // This method has no annotations of its own: look for inherited annotations\n         ClassInfo clazz = method.declaringClass();\n-        String methodName = method.name().toString();\n-        for (Map.Entry<DotName, Set<String>> validatedMethod : inheritedAnnotationsToBeValidated.entrySet()) {\n-            if (clazz.interfaceNames().contains(validatedMethod.getKey())\n-                    && validatedMethod.getValue().contains(methodName)) {\n+        SimpleMethodSignatureKey signatureKey = new SimpleMethodSignatureKey(method);\n+        for (Map.Entry<DotName, Set<SimpleMethodSignatureKey>> validatedMethod : inheritedAnnotationsToBeValidated.entrySet()) {\n+            DotName ifaceOrSuperClass = validatedMethod.getKey();\n+            // note: only check the direct superclass since we do not (yet) have the entire ClassInfo hierarchy here\n+            if ((clazz.interfaceNames().contains(ifaceOrSuperClass) || ifaceOrSuperClass.equals(clazz.superName()))\n+                    && validatedMethod.getValue().contains(signatureKey)) {\n                 return true;\n             }\n         }\n"}}, {"oid": "2ea1124d50641fe84960796d27e8a8c0d35d736b", "url": "https://github.com/quarkusio/quarkus/commit/2ea1124d50641fe84960796d27e8a8c0d35d736b", "message": "Hibernate Validator: status 400 instead of 500 if JAX-RS method is defined in interface", "committedDate": "2020-08-24T11:11:19Z", "type": "commit"}, {"oid": "b49249e02c2929809d7acdbceb02bfcb30c503ea", "url": "https://github.com/quarkusio/quarkus/commit/b49249e02c2929809d7acdbceb02bfcb30c503ea", "message": "Use ResteasyDotNames in hibernate-validator", "committedDate": "2020-08-24T11:11:19Z", "type": "commit"}, {"oid": "28bc0808ff6c43a611d808a2330d14a7849609d1", "url": "https://github.com/quarkusio/quarkus/commit/28bc0808ff6c43a611d808a2330d14a7849609d1", "message": "Revert \"Disable the JDK 14 build for now as it's totally unstable\"\n\nThis reverts commit df381123c04c1c060e88974c93d4927f8602f0df.", "committedDate": "2020-08-24T11:11:19Z", "type": "commit"}]}