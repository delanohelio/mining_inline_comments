{"pr_number": 8652, "pr_title": "fix: set defaults values for Page number and size", "pr_createdAt": "2020-04-17T15:24:21Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/8652", "timeline": [{"oid": "914aa15b2051807c68267e6a75fd519f7fbbbdfa", "url": "https://github.com/quarkusio/quarkus/commit/914aa15b2051807c68267e6a75fd519f7fbbbdfa", "message": "fix: set defaults values for Page number and size", "committedDate": "2020-04-20T06:31:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE5Mzc5OA==", "url": "https://github.com/quarkusio/quarkus/pull/8652#discussion_r411193798", "bodyText": "I'm a bit worried that this will generate queries with paging all the time?\nEspecially in the context of https://github.com/quarkusio/quarkus/pull/8162/files coming.\nCan we make sure this is not the case?", "author": "gsmet", "createdAt": "2020-04-20T08:32:59Z", "path": "extensions/spring-data-jpa/runtime/src/main/java/io/quarkus/spring/data/runtime/TypesConverter.java", "diffHunk": "@@ -35,6 +35,12 @@ private TypesConverter() {\n     }\n \n     public static io.quarkus.panache.common.Page toPanachePage(org.springframework.data.domain.Pageable pageable) {\n-        return new io.quarkus.panache.common.Page(pageable.getPageNumber(), pageable.getPageSize());\n+        int pageNumber = 0;\n+        int pageSize = Integer.MAX_VALUE;", "originalCommit": "914aa15b2051807c68267e6a75fd519f7fbbbdfa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE5OTMwMw==", "url": "https://github.com/quarkusio/quarkus/pull/8652#discussion_r411199303", "bodyText": "Admitedly this isn't the perfect solution (ideally toPanachePage wouldn't be called at all when Pageable is unpaged).\nI guess with #8162 coming (I hadn't seen that one), we should be take care of it now. @aureamunoz would you like to do that or do you want me to?", "author": "geoand", "createdAt": "2020-04-20T08:41:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE5Mzc5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIwMzE1Nw==", "url": "https://github.com/quarkusio/quarkus/pull/8652#discussion_r411203157", "bodyText": "Hi, yes, I will take a look.", "author": "aureamunoz", "createdAt": "2020-04-20T08:47:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE5Mzc5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjAwNDU1MA==", "url": "https://github.com/quarkusio/quarkus/pull/8652#discussion_r412004550", "bodyText": "I just pushed another approach after look at the other PR (https://github.com/quarkusio/quarkus/pull/8162/files ). WDYT? @geoand @gsmet", "author": "aureamunoz", "createdAt": "2020-04-21T08:59:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE5Mzc5OA=="}], "type": "inlineReview", "revised_code": {"commit": "426f7026fb3a4a0fdeaa76ecfc4ae0345bb768b0", "chunk": "diff --git a/extensions/spring-data-jpa/runtime/src/main/java/io/quarkus/spring/data/runtime/TypesConverter.java b/extensions/spring-data-jpa/runtime/src/main/java/io/quarkus/spring/data/runtime/TypesConverter.java\nindex ba12b6cdf2..509661aa7a 100644\n--- a/extensions/spring-data-jpa/runtime/src/main/java/io/quarkus/spring/data/runtime/TypesConverter.java\n+++ b/extensions/spring-data-jpa/runtime/src/main/java/io/quarkus/spring/data/runtime/TypesConverter.java\n\n@@ -35,12 +35,11 @@ public final class TypesConverter {\n     }\n \n     public static io.quarkus.panache.common.Page toPanachePage(org.springframework.data.domain.Pageable pageable) {\n-        int pageNumber = 0;\n-        int pageSize = Integer.MAX_VALUE;\n         if (pageable.isPaged()) {\n-            pageNumber = pageable.getPageNumber();\n-            pageSize = pageable.getPageSize();\n+            int pageNumber = pageable.getPageNumber();\n+            int pageSize = pageable.getPageSize();\n+            return new io.quarkus.panache.common.Page(pageNumber, pageSize);\n         }\n-        return new io.quarkus.panache.common.Page(pageNumber, pageSize);\n+        return null;\n     }\n }\n"}}, {"oid": "426f7026fb3a4a0fdeaa76ecfc4ae0345bb768b0", "url": "https://github.com/quarkusio/quarkus/commit/426f7026fb3a4a0fdeaa76ecfc4ae0345bb768b0", "message": "fix: avoid to generate queries with paging all the time", "committedDate": "2020-04-21T08:50:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjAwNjM2NQ==", "url": "https://github.com/quarkusio/quarkus/pull/8652#discussion_r412006365", "bodyText": "How come this works? How is null handled?", "author": "geoand", "createdAt": "2020-04-21T09:01:38Z", "path": "extensions/spring-data-jpa/runtime/src/main/java/io/quarkus/spring/data/runtime/TypesConverter.java", "diffHunk": "@@ -35,6 +35,11 @@ private TypesConverter() {\n     }\n \n     public static io.quarkus.panache.common.Page toPanachePage(org.springframework.data.domain.Pageable pageable) {\n-        return new io.quarkus.panache.common.Page(pageable.getPageNumber(), pageable.getPageSize());\n+        if (pageable.isPaged()) {\n+            int pageNumber = pageable.getPageNumber();\n+            int pageSize = pageable.getPageSize();\n+            return new io.quarkus.panache.common.Page(pageNumber, pageSize);\n+        }\n+        return null;", "originalCommit": "426f7026fb3a4a0fdeaa76ecfc4ae0345bb768b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE3MzU3OQ==", "url": "https://github.com/quarkusio/quarkus/pull/8652#discussion_r412173579", "bodyText": "I looked into it, and null works because https://github.com/quarkusio/quarkus/blob/master/extensions/panache/hibernate-orm-panache/runtime/src/main/java/io/quarkus/hibernate/orm/panache/runtime/PanacheQueryImpl.java#L176 properly handles null. So let's just add a comment.\nWe call list under the covers because of https://github.com/quarkusio/quarkus/blob/master/extensions/spring-data-jpa/deployment/src/main/java/io/quarkus/spring/data/deployment/generate/AbstractMethodsAdder.java#L172", "author": "geoand", "createdAt": "2020-04-21T13:14:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjAwNjM2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "65ebc3732cfc8cdae6def57ca6e8de3eeff965bb", "chunk": "diff --git a/extensions/spring-data-jpa/runtime/src/main/java/io/quarkus/spring/data/runtime/TypesConverter.java b/extensions/spring-data-jpa/runtime/src/main/java/io/quarkus/spring/data/runtime/TypesConverter.java\nindex 509661aa7a..556c4b2207 100644\n--- a/extensions/spring-data-jpa/runtime/src/main/java/io/quarkus/spring/data/runtime/TypesConverter.java\n+++ b/extensions/spring-data-jpa/runtime/src/main/java/io/quarkus/spring/data/runtime/TypesConverter.java\n\n@@ -35,11 +35,12 @@ public final class TypesConverter {\n     }\n \n     public static io.quarkus.panache.common.Page toPanachePage(org.springframework.data.domain.Pageable pageable) {\n+        // only generate queries with paging if param is actually paged (ex. Unpaged.INSTANCE is a Pageable not paged)\n         if (pageable.isPaged()) {\n             int pageNumber = pageable.getPageNumber();\n             int pageSize = pageable.getPageSize();\n             return new io.quarkus.panache.common.Page(pageNumber, pageSize);\n         }\n-        return null;\n+        return null; //PanacheQueryImpl#list properly handles null\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE3MjUwNg==", "url": "https://github.com/quarkusio/quarkus/pull/8652#discussion_r412172506", "bodyText": "I think we need another method that return the make sure that the result  of songRepository.findAll(wholePage); is what we expect it to (that the page doesn't have a previous or next page).\nSomething like: https://github.com/quarkusio/quarkus/blob/master/integration-tests/spring-data-jpa/src/main/java/io/quarkus/it/spring/data/jpa/PersonResource.java#L135", "author": "geoand", "createdAt": "2020-04-21T13:13:22Z", "path": "integration-tests/spring-data-jpa/src/main/java/io/quarkus/it/spring/data/jpa/SongResource.java", "diffHunk": "@@ -22,6 +25,16 @@ public SongResource(SongRepository songRepository) {\n     @Path(\"/all\")\n     public List<Song> all() {\n         Pageable wholePage = Pageable.unpaged();\n-        return songRepository.findAll();\n+        Page<Song> all = songRepository.findAll(wholePage);\n+        return all.getContent();", "originalCommit": "426f7026fb3a4a0fdeaa76ecfc4ae0345bb768b0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "65ebc3732cfc8cdae6def57ca6e8de3eeff965bb", "chunk": "diff --git a/integration-tests/spring-data-jpa/src/main/java/io/quarkus/it/spring/data/jpa/SongResource.java b/integration-tests/spring-data-jpa/src/main/java/io/quarkus/it/spring/data/jpa/SongResource.java\nindex f285432f35..2bb69da721 100644\n--- a/integration-tests/spring-data-jpa/src/main/java/io/quarkus/it/spring/data/jpa/SongResource.java\n+++ b/integration-tests/spring-data-jpa/src/main/java/io/quarkus/it/spring/data/jpa/SongResource.java\n\n@@ -23,18 +21,18 @@ public class SongResource {\n     @GET\n     @Produces(\"application/json\")\n     @Path(\"/all\")\n-    public List<Song> all() {\n+    public String all() {\n         Pageable wholePage = Pageable.unpaged();\n-        Page<Song> all = songRepository.findAll(wholePage);\n-        return all.getContent();\n+        Page<Song> page = songRepository.findAll(wholePage);\n+        return page.hasPrevious() + \" - \" + page.hasNext() + \" / \" + page.getNumberOfElements();\n     }\n \n     @GET\n     @Produces(\"application/json\")\n     @Path(\"/page/{num}/{size}\")\n-    public List<Song> songs(@PathParam(\"num\") int pageNum, @PathParam(\"size\") int pageSize) {\n+    public String songs(@PathParam(\"num\") int pageNum, @PathParam(\"size\") int pageSize) {\n         PageRequest pageRequest = PageRequest.of(pageNum, pageSize);\n-        Page<Song> byAuthor = songRepository.findAll(pageRequest);\n-        return byAuthor.getContent();\n+        Page<Song> page = songRepository.findAll(pageRequest);\n+        return page.hasPrevious() + \" - \" + page.hasNext() + \" / \" + page.getNumberOfElements();\n     }\n }\n"}}, {"oid": "65ebc3732cfc8cdae6def57ca6e8de3eeff965bb", "url": "https://github.com/quarkusio/quarkus/commit/65ebc3732cfc8cdae6def57ca6e8de3eeff965bb", "message": "refactor: add comment + refactor tests", "committedDate": "2020-04-21T14:17:22Z", "type": "forcePushed"}, {"oid": "6bf6efbe277b3587dc1c0928fcd57f52ece4a313", "url": "https://github.com/quarkusio/quarkus/commit/6bf6efbe277b3587dc1c0928fcd57f52ece4a313", "message": "fix: avoid to generate queries with paging all the time", "committedDate": "2020-04-21T14:36:49Z", "type": "commit"}, {"oid": "6bf6efbe277b3587dc1c0928fcd57f52ece4a313", "url": "https://github.com/quarkusio/quarkus/commit/6bf6efbe277b3587dc1c0928fcd57f52ece4a313", "message": "fix: avoid to generate queries with paging all the time", "committedDate": "2020-04-21T14:36:49Z", "type": "forcePushed"}]}