{"pr_number": 9412, "pr_title": "ArC - register /quarkus/arc/beans and /quarkus/arc/observers routes in the dev mode", "pr_createdAt": "2020-05-18T13:13:31Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/9412", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYyMTkxNQ==", "url": "https://github.com/quarkusio/quarkus/pull/9412#discussion_r426621915", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testJsonarray() {\n          \n          \n            \n                public void testJsonArray() {", "author": "geoand", "createdAt": "2020-05-18T13:22:53Z", "path": "extensions/vertx-http/runtime/src/test/java/io/quarkus/vertx/http/runtime/devmode/JsonTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package io.quarkus.vertx.http.runtime.devmode;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.vertx.http.runtime.devmode.Json.JsonArrayBuilder;\n+import io.quarkus.vertx.http.runtime.devmode.Json.JsonObjectBuilder;\n+\n+public class JsonTest {\n+\n+    @Test\n+    public void testJsonarray() {", "originalCommit": "c1c3128e9e10b991d1faced5181717446decd3d1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9cac7004945cb5986dee31c13dad95d830c83948", "chunk": "diff --git a/extensions/vertx-http/runtime/src/test/java/io/quarkus/vertx/http/runtime/devmode/JsonTest.java b/extensions/vertx-http/runtime/src/test/java/io/quarkus/vertx/http/runtime/devmode/JsonTest.java\nindex b3e323a2c4..9d83d1c7fd 100644\n--- a/extensions/vertx-http/runtime/src/test/java/io/quarkus/vertx/http/runtime/devmode/JsonTest.java\n+++ b/extensions/vertx-http/runtime/src/test/java/io/quarkus/vertx/http/runtime/devmode/JsonTest.java\n\n@@ -11,12 +11,12 @@ import io.quarkus.vertx.http.runtime.devmode.Json.JsonObjectBuilder;\n public class JsonTest {\n \n     @Test\n-    public void testJsonarray() {\n+    public void testJsonArray() {\n         assertEquals(\"[\\\"foo\\\",\\\"bar\\\",[\\\"baz\\\"]]\", Json.array().add(\"foo\").add(\"bar\").add(Json.array().add(\"baz\")).build());\n     }\n \n     @Test\n-    public void testJsonobject() {\n+    public void testJsonObject() {\n         assertEquals(\"{\\\"foo\\\":\\\"bar\\\",\\\"baz\\\":[\\\"qux\\\"]}\",\n                 Json.object().put(\"foo\", \"bar\").put(\"baz\", Json.array().add(\"qux\")).build());\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYyMjEzNw==", "url": "https://github.com/quarkusio/quarkus/pull/9412#discussion_r426622137", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testJsonobject() {\n          \n          \n            \n                public void testJsonObject() {", "author": "geoand", "createdAt": "2020-05-18T13:23:15Z", "path": "extensions/vertx-http/runtime/src/test/java/io/quarkus/vertx/http/runtime/devmode/JsonTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package io.quarkus.vertx.http.runtime.devmode;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.vertx.http.runtime.devmode.Json.JsonArrayBuilder;\n+import io.quarkus.vertx.http.runtime.devmode.Json.JsonObjectBuilder;\n+\n+public class JsonTest {\n+\n+    @Test\n+    public void testJsonarray() {\n+        assertEquals(\"[\\\"foo\\\",\\\"bar\\\",[\\\"baz\\\"]]\", Json.array().add(\"foo\").add(\"bar\").add(Json.array().add(\"baz\")).build());\n+    }\n+\n+    @Test\n+    public void testJsonobject() {", "originalCommit": "c1c3128e9e10b991d1faced5181717446decd3d1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9cac7004945cb5986dee31c13dad95d830c83948", "chunk": "diff --git a/extensions/vertx-http/runtime/src/test/java/io/quarkus/vertx/http/runtime/devmode/JsonTest.java b/extensions/vertx-http/runtime/src/test/java/io/quarkus/vertx/http/runtime/devmode/JsonTest.java\nindex b3e323a2c4..9d83d1c7fd 100644\n--- a/extensions/vertx-http/runtime/src/test/java/io/quarkus/vertx/http/runtime/devmode/JsonTest.java\n+++ b/extensions/vertx-http/runtime/src/test/java/io/quarkus/vertx/http/runtime/devmode/JsonTest.java\n\n@@ -11,12 +11,12 @@ import io.quarkus.vertx.http.runtime.devmode.Json.JsonObjectBuilder;\n public class JsonTest {\n \n     @Test\n-    public void testJsonarray() {\n+    public void testJsonArray() {\n         assertEquals(\"[\\\"foo\\\",\\\"bar\\\",[\\\"baz\\\"]]\", Json.array().add(\"foo\").add(\"bar\").add(Json.array().add(\"baz\")).build());\n     }\n \n     @Test\n-    public void testJsonobject() {\n+    public void testJsonObject() {\n         assertEquals(\"{\\\"foo\\\":\\\"bar\\\",\\\"baz\\\":[\\\"qux\\\"]}\",\n                 Json.object().put(\"foo\", \"bar\").put(\"baz\", Json.array().add(\"qux\")).build());\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYyMjg0NQ==", "url": "https://github.com/quarkusio/quarkus/pull/9412#discussion_r426622845", "bodyText": "I'm not going to review this since you said it's just copied from Weld :)", "author": "geoand", "createdAt": "2020-05-18T13:24:18Z", "path": "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/devmode/Json.java", "diffHunk": "@@ -0,0 +1,344 @@\n+package io.quarkus.vertx.http.runtime.devmode;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Objects;\n+\n+/**\n+ * A simple JSON string generator.\n+ */\n+public final class Json {", "originalCommit": "c1c3128e9e10b991d1faced5181717446decd3d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYyNTIyOQ==", "url": "https://github.com/quarkusio/quarkus/pull/9412#discussion_r426625229", "bodyText": "Well, it's not 1:1 copy and the fact that it's coming from Weld does not mean that it needs no review ;-)", "author": "mkouba", "createdAt": "2020-05-18T13:27:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYyMjg0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYyNTgyOQ==", "url": "https://github.com/quarkusio/quarkus/pull/9412#discussion_r426625829", "bodyText": "Ah, you're killing me :P", "author": "geoand", "createdAt": "2020-05-18T13:28:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYyMjg0NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYyNDE0MA==", "url": "https://github.com/quarkusio/quarkus/pull/9412#discussion_r426624140", "bodyText": "Perhaps as a follow up to this, ArcContainerImpl#getBeans can return a LinkedHashSet so it can return data in the same order", "author": "geoand", "createdAt": "2020-05-18T13:26:11Z", "path": "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/devmode/ArcEndpointRecorder.java", "diffHunk": "@@ -0,0 +1,131 @@\n+package io.quarkus.vertx.http.runtime.devmode;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Type;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import javax.enterprise.inject.Any;\n+import javax.enterprise.inject.Default;\n+\n+import io.quarkus.arc.InjectableBean;\n+import io.quarkus.arc.InjectableObserverMethod;\n+import io.quarkus.arc.impl.ArcContainerImpl;\n+import io.quarkus.runtime.annotations.Recorder;\n+import io.quarkus.vertx.http.runtime.devmode.Json.JsonArrayBuilder;\n+import io.quarkus.vertx.http.runtime.devmode.Json.JsonObjectBuilder;\n+import io.vertx.core.Handler;\n+import io.vertx.ext.web.RoutingContext;\n+\n+@Recorder\n+public class ArcEndpointRecorder {\n+\n+    public Handler<RoutingContext> createBeansHandler() {\n+        return new Handler<RoutingContext>() {\n+\n+            @Override\n+            public void handle(RoutingContext ctx) {\n+                ctx.response().putHeader(\"Content-type\", \"application/json\");\n+\n+                ArcContainerImpl container = ArcContainerImpl.instance();\n+                List<InjectableBean<?>> beans = container.getBeans();", "originalCommit": "c1c3128e9e10b991d1faced5181717446decd3d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYyNjIzOA==", "url": "https://github.com/quarkusio/quarkus/pull/9412#discussion_r426626238", "bodyText": "Hm, getBeans() returns a list...", "author": "mkouba", "createdAt": "2020-05-18T13:29:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYyNDE0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYyNzI3NQ==", "url": "https://github.com/quarkusio/quarkus/pull/9412#discussion_r426627275", "bodyText": "Ah damn it, I was looking in the IDE and was looking at getBeans(String name) \ud83e\udd26", "author": "geoand", "createdAt": "2020-05-18T13:30:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYyNDE0MA=="}], "type": "inlineReview", "revised_code": {"commit": "9cac7004945cb5986dee31c13dad95d830c83948", "chunk": "diff --git a/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/devmode/ArcEndpointRecorder.java b/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/devmode/ArcEndpointRecorder.java\nindex 6e2612d34d..ad0c4c5dec 100644\n--- a/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/devmode/ArcEndpointRecorder.java\n+++ b/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/devmode/ArcEndpointRecorder.java\n\n@@ -25,7 +25,7 @@ public class ArcEndpointRecorder {\n \n             @Override\n             public void handle(RoutingContext ctx) {\n-                ctx.response().putHeader(\"Content-type\", \"application/json\");\n+                ctx.response().putHeader(\"Content-Type\", \"application/json\");\n \n                 ArcContainerImpl container = ArcContainerImpl.instance();\n                 List<InjectableBean<?>> beans = container.getBeans();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYyNTU0OQ==", "url": "https://github.com/quarkusio/quarkus/pull/9412#discussion_r426625549", "bodyText": "We should document this capability and the options you have in the CDI guide", "author": "geoand", "createdAt": "2020-05-18T13:28:23Z", "path": "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/devmode/ArcEndpointRecorder.java", "diffHunk": "@@ -0,0 +1,131 @@\n+package io.quarkus.vertx.http.runtime.devmode;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Type;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import javax.enterprise.inject.Any;\n+import javax.enterprise.inject.Default;\n+\n+import io.quarkus.arc.InjectableBean;\n+import io.quarkus.arc.InjectableObserverMethod;\n+import io.quarkus.arc.impl.ArcContainerImpl;\n+import io.quarkus.runtime.annotations.Recorder;\n+import io.quarkus.vertx.http.runtime.devmode.Json.JsonArrayBuilder;\n+import io.quarkus.vertx.http.runtime.devmode.Json.JsonObjectBuilder;\n+import io.vertx.core.Handler;\n+import io.vertx.ext.web.RoutingContext;\n+\n+@Recorder\n+public class ArcEndpointRecorder {\n+\n+    public Handler<RoutingContext> createBeansHandler() {\n+        return new Handler<RoutingContext>() {\n+\n+            @Override\n+            public void handle(RoutingContext ctx) {\n+                ctx.response().putHeader(\"Content-type\", \"application/json\");\n+\n+                ArcContainerImpl container = ArcContainerImpl.instance();\n+                List<InjectableBean<?>> beans = container.getBeans();\n+                beans.addAll(container.getInterceptors());\n+\n+                String kindParam = ctx.request().getParam(\"kind\");\n+                InjectableBean.Kind kind = kindParam != null ? InjectableBean.Kind.valueOf(kindParam) : null;\n+                String scopeEndsWith = ctx.request().getParam(\"scope\");\n+                String beanClassStartsWith = ctx.request().getParam(\"beanClass\");\n+\n+                for (Iterator<InjectableBean<?>> it = beans.iterator(); it.hasNext();) {\n+                    InjectableBean<?> injectableBean = it.next();\n+                    if (kind != null && !kind.equals(injectableBean.getKind())) {\n+                        it.remove();\n+                    }\n+                    if (scopeEndsWith != null && !injectableBean.getScope().getName().endsWith(scopeEndsWith)) {\n+                        it.remove();\n+                    }\n+                    if (beanClassStartsWith != null\n+                            && !injectableBean.getBeanClass().getName().startsWith(beanClassStartsWith)) {\n+                        it.remove();\n+                    }\n+                }\n+\n+                JsonArrayBuilder array = Json.array();\n+                for (InjectableBean<?> injectableBean : beans) {\n+                    JsonObjectBuilder bean = Json.object();\n+                    bean.put(\"id\", injectableBean.getIdentifier());\n+                    bean.put(\"kind\", injectableBean.getKind().toString());\n+                    bean.put(\"generatedClass\", injectableBean.getClass().getName());\n+                    bean.put(\"beanClass\", injectableBean.getBeanClass().getName());\n+                    JsonArrayBuilder types = Json.array();\n+                    for (Type beanType : injectableBean.getTypes()) {\n+                        types.add(beanType.getTypeName());\n+                    }\n+                    bean.put(\"types\", types);\n+                    JsonArrayBuilder qualifiers = Json.array();\n+                    for (Annotation qualifier : injectableBean.getQualifiers()) {\n+                        if (qualifier.annotationType().equals(Any.class) || qualifier.annotationType().equals(Default.class)) {\n+                            qualifiers.add(\"@\" + qualifier.annotationType().getSimpleName());\n+                        } else {\n+                            qualifiers.add(qualifier.toString());\n+                        }\n+                    }\n+                    bean.put(\"qualifiers\", qualifiers);\n+                    bean.put(\"scope\", injectableBean.getScope().getName());\n+\n+                    if (injectableBean.getDeclaringBean() != null) {\n+                        bean.put(\"declaringBean\", injectableBean.getDeclaringBean().getIdentifier());\n+                    }\n+                    if (injectableBean.getName() != null) {\n+                        bean.put(\"name\", injectableBean.getName());\n+                    }\n+                    if (injectableBean.isAlternative()) {\n+                        bean.put(\"alternativePriority\", injectableBean.getAlternativePriority());\n+                    }\n+                    if (injectableBean.isDefaultBean()) {\n+                        bean.put(\"isDefault\", true);\n+                    }\n+                    array.add(bean);\n+                }\n+                ctx.response().end(array.build());\n+            }\n+        };\n+    }\n+\n+    public Handler<RoutingContext> createObserversHandler() {\n+        return new Handler<RoutingContext>() {", "originalCommit": "c1c3128e9e10b991d1faced5181717446decd3d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYyNTk2NQ==", "url": "https://github.com/quarkusio/quarkus/pull/9412#discussion_r426625965", "bodyText": "Yeah, good idea.", "author": "mkouba", "createdAt": "2020-05-18T13:28:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYyNTU0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "9cac7004945cb5986dee31c13dad95d830c83948", "chunk": "diff --git a/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/devmode/ArcEndpointRecorder.java b/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/devmode/ArcEndpointRecorder.java\nindex 6e2612d34d..ad0c4c5dec 100644\n--- a/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/devmode/ArcEndpointRecorder.java\n+++ b/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/devmode/ArcEndpointRecorder.java\n\n@@ -25,7 +25,7 @@ public class ArcEndpointRecorder {\n \n             @Override\n             public void handle(RoutingContext ctx) {\n-                ctx.response().putHeader(\"Content-type\", \"application/json\");\n+                ctx.response().putHeader(\"Content-Type\", \"application/json\");\n \n                 ArcContainerImpl container = ArcContainerImpl.instance();\n                 List<InjectableBean<?>> beans = container.getBeans();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYzNDM5Mw==", "url": "https://github.com/quarkusio/quarkus/pull/9412#discussion_r426634393", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            ctx.response().putHeader(\"Content-type\", \"application/json\");\n          \n          \n            \n                            ctx.response().putHeader(\"Content-Type\", \"application/json\");", "author": "geoand", "createdAt": "2020-05-18T13:41:27Z", "path": "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/devmode/ArcEndpointRecorder.java", "diffHunk": "@@ -0,0 +1,131 @@\n+package io.quarkus.vertx.http.runtime.devmode;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Type;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import javax.enterprise.inject.Any;\n+import javax.enterprise.inject.Default;\n+\n+import io.quarkus.arc.InjectableBean;\n+import io.quarkus.arc.InjectableObserverMethod;\n+import io.quarkus.arc.impl.ArcContainerImpl;\n+import io.quarkus.runtime.annotations.Recorder;\n+import io.quarkus.vertx.http.runtime.devmode.Json.JsonArrayBuilder;\n+import io.quarkus.vertx.http.runtime.devmode.Json.JsonObjectBuilder;\n+import io.vertx.core.Handler;\n+import io.vertx.ext.web.RoutingContext;\n+\n+@Recorder\n+public class ArcEndpointRecorder {\n+\n+    public Handler<RoutingContext> createBeansHandler() {\n+        return new Handler<RoutingContext>() {\n+\n+            @Override\n+            public void handle(RoutingContext ctx) {\n+                ctx.response().putHeader(\"Content-type\", \"application/json\");", "originalCommit": "c1c3128e9e10b991d1faced5181717446decd3d1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9cac7004945cb5986dee31c13dad95d830c83948", "chunk": "diff --git a/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/devmode/ArcEndpointRecorder.java b/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/devmode/ArcEndpointRecorder.java\nindex 6e2612d34d..ad0c4c5dec 100644\n--- a/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/devmode/ArcEndpointRecorder.java\n+++ b/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/devmode/ArcEndpointRecorder.java\n\n@@ -25,7 +25,7 @@ public class ArcEndpointRecorder {\n \n             @Override\n             public void handle(RoutingContext ctx) {\n-                ctx.response().putHeader(\"Content-type\", \"application/json\");\n+                ctx.response().putHeader(\"Content-Type\", \"application/json\");\n \n                 ArcContainerImpl container = ArcContainerImpl.instance();\n                 List<InjectableBean<?>> beans = container.getBeans();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYzNzQ1MQ==", "url": "https://github.com/quarkusio/quarkus/pull/9412#discussion_r426637451", "bodyText": "What is the rationale of having scope being used with endsWith  and beanClass used startsWith?", "author": "geoand", "createdAt": "2020-05-18T13:45:54Z", "path": "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/devmode/ArcEndpointRecorder.java", "diffHunk": "@@ -0,0 +1,131 @@\n+package io.quarkus.vertx.http.runtime.devmode;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Type;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import javax.enterprise.inject.Any;\n+import javax.enterprise.inject.Default;\n+\n+import io.quarkus.arc.InjectableBean;\n+import io.quarkus.arc.InjectableObserverMethod;\n+import io.quarkus.arc.impl.ArcContainerImpl;\n+import io.quarkus.runtime.annotations.Recorder;\n+import io.quarkus.vertx.http.runtime.devmode.Json.JsonArrayBuilder;\n+import io.quarkus.vertx.http.runtime.devmode.Json.JsonObjectBuilder;\n+import io.vertx.core.Handler;\n+import io.vertx.ext.web.RoutingContext;\n+\n+@Recorder\n+public class ArcEndpointRecorder {\n+\n+    public Handler<RoutingContext> createBeansHandler() {\n+        return new Handler<RoutingContext>() {\n+\n+            @Override\n+            public void handle(RoutingContext ctx) {\n+                ctx.response().putHeader(\"Content-type\", \"application/json\");\n+\n+                ArcContainerImpl container = ArcContainerImpl.instance();\n+                List<InjectableBean<?>> beans = container.getBeans();\n+                beans.addAll(container.getInterceptors());\n+\n+                String kindParam = ctx.request().getParam(\"kind\");\n+                InjectableBean.Kind kind = kindParam != null ? InjectableBean.Kind.valueOf(kindParam) : null;\n+                String scopeEndsWith = ctx.request().getParam(\"scope\");\n+                String beanClassStartsWith = ctx.request().getParam(\"beanClass\");", "originalCommit": "c1c3128e9e10b991d1faced5181717446decd3d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY1OTA0Nw==", "url": "https://github.com/quarkusio/quarkus/pull/9412#discussion_r426659047", "bodyText": "I believe that it's practical. For scopes, users will usually pass built-in scope names. So it's more convenient to specify RequestScoped rather than javax.enterprise.context.RequestScoped. Also simple names of scopes do not usually collide. For bean classes however, it's very often useful to filter beans from a specific package, i.e. beanClass=org.acme.", "author": "mkouba", "createdAt": "2020-05-18T14:16:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYzNzQ1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY2MTM1NA==", "url": "https://github.com/quarkusio/quarkus/pull/9412#discussion_r426661354", "bodyText": "That's fine with me, just curious. It should however be documented", "author": "geoand", "createdAt": "2020-05-18T14:19:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYzNzQ1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY2OTQ4MQ==", "url": "https://github.com/quarkusio/quarkus/pull/9412#discussion_r426669481", "bodyText": "Sure. Just finished the docs and a test ;-).", "author": "mkouba", "createdAt": "2020-05-18T14:30:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYzNzQ1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "9cac7004945cb5986dee31c13dad95d830c83948", "chunk": "diff --git a/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/devmode/ArcEndpointRecorder.java b/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/devmode/ArcEndpointRecorder.java\nindex 6e2612d34d..ad0c4c5dec 100644\n--- a/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/devmode/ArcEndpointRecorder.java\n+++ b/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/devmode/ArcEndpointRecorder.java\n\n@@ -25,7 +25,7 @@ public class ArcEndpointRecorder {\n \n             @Override\n             public void handle(RoutingContext ctx) {\n-                ctx.response().putHeader(\"Content-type\", \"application/json\");\n+                ctx.response().putHeader(\"Content-Type\", \"application/json\");\n \n                 ArcContainerImpl container = ArcContainerImpl.instance();\n                 List<InjectableBean<?>> beans = container.getBeans();\n"}}, {"oid": "9cac7004945cb5986dee31c13dad95d830c83948", "url": "https://github.com/quarkusio/quarkus/commit/9cac7004945cb5986dee31c13dad95d830c83948", "message": "ArC - register /arc/beans and /arc/observers routes in the dev mode\n\n- these routes produce basic debug info in the JSON format", "committedDate": "2020-05-18T14:30:44Z", "type": "commit"}, {"oid": "9cac7004945cb5986dee31c13dad95d830c83948", "url": "https://github.com/quarkusio/quarkus/commit/9cac7004945cb5986dee31c13dad95d830c83948", "message": "ArC - register /arc/beans and /arc/observers routes in the dev mode\n\n- these routes produce basic debug info in the JSON format", "committedDate": "2020-05-18T14:30:44Z", "type": "forcePushed"}]}