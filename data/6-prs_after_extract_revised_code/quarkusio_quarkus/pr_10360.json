{"pr_number": 10360, "pr_title": "Remove Flyway transformer by providing tighter integration", "pr_createdAt": "2020-06-30T06:53:03Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/10360", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUxMjE4NA==", "url": "https://github.com/quarkusio/quarkus/pull/10360#discussion_r447512184", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * Ensure that no classpath scanning takes pace by setting the ClassProvider and the ResourceProvider\n          \n          \n            \n                     * Ensure that no classpath scanning takes place by setting the ClassProvider and the ResourceProvider", "author": "gsmet", "createdAt": "2020-06-30T08:37:53Z", "path": "extensions/flyway/runtime/src/main/java/io/quarkus/flyway/runtime/FlywayCreator.java", "diffHunk": "@@ -47,6 +49,18 @@ public Flyway createFlyway(DataSource dataSource) {\n             configure.baselineDescription(flywayRuntimeConfig.baselineDescription.get());\n         }\n         configure.placeholders(flywayRuntimeConfig.placeholders);\n+\n+        /*\n+         * Ensure that no classpath scanning takes pace by setting the ClassProvider and the ResourceProvider", "originalCommit": "893a4750fd8ac0530125113138505c1144ee655f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5d03ba77b9013a9f09f117f810403e11ab9b9a46", "chunk": "diff --git a/extensions/flyway/runtime/src/main/java/io/quarkus/flyway/runtime/FlywayCreator.java b/extensions/flyway/runtime/src/main/java/io/quarkus/flyway/runtime/FlywayCreator.java\nindex 00dd64554e..f0d3c1b7fc 100644\n--- a/extensions/flyway/runtime/src/main/java/io/quarkus/flyway/runtime/FlywayCreator.java\n+++ b/extensions/flyway/runtime/src/main/java/io/quarkus/flyway/runtime/FlywayCreator.java\n\n@@ -51,15 +51,15 @@ class FlywayCreator {\n         configure.placeholders(flywayRuntimeConfig.placeholders);\n \n         /*\n-         * Ensure that no classpath scanning takes pace by setting the ClassProvider and the ResourceProvider\n+         * Ensure that no classpath scanning takes place by setting the ClassProvider and the ResourceProvider\n          * (see Flyway#createResourceAndClassProviders)\n          */\n \n         // the static fields of this class have already been set at static-init\n         QuarkusPathLocationScanner quarkusPathLocationScanner = new QuarkusPathLocationScanner(\n                 Arrays.asList(configure.getLocations()));\n-        configure.javaMigrationClassProvider(new QuarkusClassProvider<>(quarkusPathLocationScanner.scanForClasses()));\n-        configure.resourceProvider(new QuarkusResourceProvider(quarkusPathLocationScanner.scanForResources()));\n+        configure.javaMigrationClassProvider(new QuarkusFlywayClassProvider<>(quarkusPathLocationScanner.scanForClasses()));\n+        configure.resourceProvider(new QuarkusFlywayResourceProvider(quarkusPathLocationScanner.scanForResources()));\n \n         return configure.load();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUxMzMxMQ==", "url": "https://github.com/quarkusio/quarkus/pull/10360#discussion_r447513311", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * This implementations of this class are very similar to those of {@link org.flywaydb.core.internal.scanner.Scanner}\n          \n          \n            \n             * This implementations of this class are very similar to those of {@link org.flywaydb.core.internal.scanner.Scanner}\n          \n      \n    \n    \n  \n\nThere is something weird here with This being singular and the rest being plural.", "author": "gsmet", "createdAt": "2020-06-30T08:39:35Z", "path": "extensions/flyway/runtime/src/main/java/io/quarkus/flyway/runtime/QuarkusResourceProvider.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package io.quarkus.flyway.runtime;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.flywaydb.core.api.ResourceProvider;\n+import org.flywaydb.core.internal.resource.LoadableResource;\n+import org.flywaydb.core.internal.util.StringUtils;\n+import org.jboss.logging.Logger;\n+\n+/**\n+ * This implementations of this class are very similar to those of {@link org.flywaydb.core.internal.scanner.Scanner}", "originalCommit": "893a4750fd8ac0530125113138505c1144ee655f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUyNDg3Ng==", "url": "https://github.com/quarkusio/quarkus/pull/10360#discussion_r447524876", "bodyText": "Indeed, it should be better now", "author": "geoand", "createdAt": "2020-06-30T08:57:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUxMzMxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "5d03ba77b9013a9f09f117f810403e11ab9b9a46", "chunk": "diff --git a/extensions/flyway/runtime/src/main/java/io/quarkus/flyway/runtime/QuarkusResourceProvider.java b/extensions/flyway/runtime/src/main/java/io/quarkus/flyway/runtime/QuarkusFlywayResourceProvider.java\nsimilarity index 84%\nrename from extensions/flyway/runtime/src/main/java/io/quarkus/flyway/runtime/QuarkusResourceProvider.java\nrename to extensions/flyway/runtime/src/main/java/io/quarkus/flyway/runtime/QuarkusFlywayResourceProvider.java\nindex 0c58805090..d44fa13b2c 100644\n--- a/extensions/flyway/runtime/src/main/java/io/quarkus/flyway/runtime/QuarkusResourceProvider.java\n+++ b/extensions/flyway/runtime/src/main/java/io/quarkus/flyway/runtime/QuarkusFlywayResourceProvider.java\n\n@@ -10,16 +10,16 @@ import org.flywaydb.core.internal.util.StringUtils;\n import org.jboss.logging.Logger;\n \n /**\n- * This implementations of this class are very similar to those of {@link org.flywaydb.core.internal.scanner.Scanner}\n- * TODO: refactor upstream to move methods to utility class\n+ * This class is very similar to {@link org.flywaydb.core.internal.scanner.Scanner}\n+ * TODO: refactor upstream to move common methods to utility class\n  */\n-public class QuarkusResourceProvider implements ResourceProvider {\n+public class QuarkusFlywayResourceProvider implements ResourceProvider {\n \n     private static final Logger log = Logger.getLogger(FlywayRecorder.class);\n \n     private final Collection<LoadableResource> resources;\n \n-    public QuarkusResourceProvider(Collection<LoadableResource> resources) {\n+    public QuarkusFlywayResourceProvider(Collection<LoadableResource> resources) {\n         this.resources = resources;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUxNDc3NA==", "url": "https://github.com/quarkusio/quarkus/pull/10360#discussion_r447514774", "bodyText": "It's minor but I would move that to the constructor to avoid creating a new collection every time it's called.", "author": "gsmet", "createdAt": "2020-06-30T08:41:39Z", "path": "extensions/flyway/runtime/src/main/java/io/quarkus/flyway/runtime/QuarkusClassProvider.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package io.quarkus.flyway.runtime;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+import org.flywaydb.core.api.ClassProvider;\n+\n+public class QuarkusClassProvider<I> implements ClassProvider<I> {\n+\n+    private final Collection<Class<? extends I>> classes;\n+\n+    public QuarkusClassProvider(Collection<Class<? extends I>> classes) {\n+        this.classes = classes;\n+    }\n+\n+    @Override\n+    public Collection<Class<? extends I>> getClasses() {\n+        return Collections.unmodifiableCollection(classes);", "originalCommit": "893a4750fd8ac0530125113138505c1144ee655f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUyNDU2OQ==", "url": "https://github.com/quarkusio/quarkus/pull/10360#discussion_r447524569", "bodyText": "Great idea", "author": "geoand", "createdAt": "2020-06-30T08:56:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUxNDc3NA=="}], "type": "inlineReview", "revised_code": {"commit": "5d03ba77b9013a9f09f117f810403e11ab9b9a46", "chunk": "diff --git a/extensions/flyway/runtime/src/main/java/io/quarkus/flyway/runtime/QuarkusClassProvider.java b/extensions/flyway/runtime/src/main/java/io/quarkus/flyway/runtime/QuarkusFlywayClassProvider.java\nsimilarity index 53%\nrename from extensions/flyway/runtime/src/main/java/io/quarkus/flyway/runtime/QuarkusClassProvider.java\nrename to extensions/flyway/runtime/src/main/java/io/quarkus/flyway/runtime/QuarkusFlywayClassProvider.java\nindex c4ffea39da..9dbf7d6460 100644\n--- a/extensions/flyway/runtime/src/main/java/io/quarkus/flyway/runtime/QuarkusClassProvider.java\n+++ b/extensions/flyway/runtime/src/main/java/io/quarkus/flyway/runtime/QuarkusFlywayClassProvider.java\n\n@@ -5,16 +5,16 @@ import java.util.Collections;\n \n import org.flywaydb.core.api.ClassProvider;\n \n-public class QuarkusClassProvider<I> implements ClassProvider<I> {\n+public class QuarkusFlywayClassProvider<I> implements ClassProvider<I> {\n \n     private final Collection<Class<? extends I>> classes;\n \n-    public QuarkusClassProvider(Collection<Class<? extends I>> classes) {\n-        this.classes = classes;\n+    public QuarkusFlywayClassProvider(Collection<Class<? extends I>> classes) {\n+        this.classes = Collections.unmodifiableCollection(classes);\n     }\n \n     @Override\n     public Collection<Class<? extends I>> getClasses() {\n-        return Collections.unmodifiableCollection(classes);\n+        return classes;\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUxNTI4Mw==", "url": "https://github.com/quarkusio/quarkus/pull/10360#discussion_r447515283", "bodyText": "I wonder if I would call the classes QuarkusFlyway(Resource|Class)Provider to be extra clear.", "author": "gsmet", "createdAt": "2020-06-30T08:42:21Z", "path": "extensions/flyway/runtime/src/main/java/io/quarkus/flyway/runtime/QuarkusResourceProvider.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package io.quarkus.flyway.runtime;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.flywaydb.core.api.ResourceProvider;\n+import org.flywaydb.core.internal.resource.LoadableResource;\n+import org.flywaydb.core.internal.util.StringUtils;\n+import org.jboss.logging.Logger;\n+\n+/**\n+ * This implementations of this class are very similar to those of {@link org.flywaydb.core.internal.scanner.Scanner}\n+ * TODO: refactor upstream to move methods to utility class\n+ */\n+public class QuarkusResourceProvider implements ResourceProvider {", "originalCommit": "893a4750fd8ac0530125113138505c1144ee655f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUyNDUyNg==", "url": "https://github.com/quarkusio/quarkus/pull/10360#discussion_r447524526", "bodyText": "Sure thing", "author": "geoand", "createdAt": "2020-06-30T08:56:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUxNTI4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "5d03ba77b9013a9f09f117f810403e11ab9b9a46", "chunk": "diff --git a/extensions/flyway/runtime/src/main/java/io/quarkus/flyway/runtime/QuarkusResourceProvider.java b/extensions/flyway/runtime/src/main/java/io/quarkus/flyway/runtime/QuarkusFlywayResourceProvider.java\nsimilarity index 84%\nrename from extensions/flyway/runtime/src/main/java/io/quarkus/flyway/runtime/QuarkusResourceProvider.java\nrename to extensions/flyway/runtime/src/main/java/io/quarkus/flyway/runtime/QuarkusFlywayResourceProvider.java\nindex 0c58805090..d44fa13b2c 100644\n--- a/extensions/flyway/runtime/src/main/java/io/quarkus/flyway/runtime/QuarkusResourceProvider.java\n+++ b/extensions/flyway/runtime/src/main/java/io/quarkus/flyway/runtime/QuarkusFlywayResourceProvider.java\n\n@@ -10,16 +10,16 @@ import org.flywaydb.core.internal.util.StringUtils;\n import org.jboss.logging.Logger;\n \n /**\n- * This implementations of this class are very similar to those of {@link org.flywaydb.core.internal.scanner.Scanner}\n- * TODO: refactor upstream to move methods to utility class\n+ * This class is very similar to {@link org.flywaydb.core.internal.scanner.Scanner}\n+ * TODO: refactor upstream to move common methods to utility class\n  */\n-public class QuarkusResourceProvider implements ResourceProvider {\n+public class QuarkusFlywayResourceProvider implements ResourceProvider {\n \n     private static final Logger log = Logger.getLogger(FlywayRecorder.class);\n \n     private final Collection<LoadableResource> resources;\n \n-    public QuarkusResourceProvider(Collection<LoadableResource> resources) {\n+    public QuarkusFlywayResourceProvider(Collection<LoadableResource> resources) {\n         this.resources = resources;\n     }\n \n"}}, {"oid": "5d03ba77b9013a9f09f117f810403e11ab9b9a46", "url": "https://github.com/quarkusio/quarkus/commit/5d03ba77b9013a9f09f117f810403e11ab9b9a46", "message": "Remove Flyway transformer by providing tighter integration\n\nFollow up of #10355\n\nCo-authored-by: Guillaume Smet <guillaume.smet@gmail.com>", "committedDate": "2020-06-30T08:49:25Z", "type": "commit"}, {"oid": "5d03ba77b9013a9f09f117f810403e11ab9b9a46", "url": "https://github.com/quarkusio/quarkus/commit/5d03ba77b9013a9f09f117f810403e11ab9b9a46", "message": "Remove Flyway transformer by providing tighter integration\n\nFollow up of #10355\n\nCo-authored-by: Guillaume Smet <guillaume.smet@gmail.com>", "committedDate": "2020-06-30T08:49:25Z", "type": "forcePushed"}]}