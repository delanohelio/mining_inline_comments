{"pr_number": 13068, "pr_title": "Extract route/ingress configuration into a specific config group", "pr_createdAt": "2020-11-02T15:52:36Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/13068", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA3Nzk0Nw==", "url": "https://github.com/quarkusio/quarkus/pull/13068#discussion_r516077947", "bodyText": "Any chance we could handle the annotations added to the route while we're at it?\nAt the moment, I added them globally but I think it makes sense to be able to define annotations specific to the route?\nNote that I'm not an OpenShift expert so better check with @geoand and @iocanel if it makes sense :).", "author": "gsmet", "createdAt": "2020-11-02T16:05:14Z", "path": "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/ExpositionConfig.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package io.quarkus.kubernetes.deployment;\n+\n+import java.util.Optional;\n+\n+import io.quarkus.runtime.annotations.ConfigGroup;\n+import io.quarkus.runtime.annotations.ConfigItem;\n+\n+@ConfigGroup\n+public class ExpositionConfig {\n+\n+    /**\n+     * If true, the service will be exposed\n+     */\n+    @ConfigItem\n+    boolean expose;\n+\n+    /**\n+     * The host under which the application is going to be exposed\n+     */\n+    @ConfigItem\n+    Optional<String> host;\n+\n+    /**\n+     * If true, TLS will be enabled on the exposed service\n+     */\n+    @ConfigItem(defaultValue = \"true\")\n+    boolean secure;", "originalCommit": "c5ac6306ed612a83ad011670b5945eb41b96acfa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA4NjA4NA==", "url": "https://github.com/quarkusio/quarkus/pull/13068#discussion_r516086084", "bodyText": "Can you remind me again what annotation you needed on the Route?", "author": "geoand", "createdAt": "2020-11-02T16:16:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA3Nzk0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjEwMzkwNw==", "url": "https://github.com/quarkusio/quarkus/pull/13068#discussion_r516103907", "bodyText": "Looking at dekorate, I'm not sure we can configure annotation for a specific type of object. But may be wrong.\nI added the kubernetes.io/tls-acme annotation to enable tls. But as mentionned by @gsmet in an other comment, enabling tls may have more consequences than just adding an annotation (like certificate, key, ...)", "author": "glefloch", "createdAt": "2020-11-02T16:41:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA3Nzk0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjEwNTQ5OQ==", "url": "https://github.com/quarkusio/quarkus/pull/13068#discussion_r516105499", "bodyText": "So I needed an annotation for defining the secure route so it's mostly covered now :).", "author": "gsmet", "createdAt": "2020-11-02T16:43:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA3Nzk0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE0MTE4OA==", "url": "https://github.com/quarkusio/quarkus/pull/13068#discussion_r522141188", "bodyText": "It does make sense!\nAnd dekorate does support adding Labels and Annotations to specific resource types. See: dekorateio/dekorate#644", "author": "iocanel", "createdAt": "2020-11-12T14:21:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA3Nzk0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "e1c09bd4bcf82c7d343548f9fcb3a9cd423445e1", "chunk": "diff --git a/extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/ExpositionConfig.java b/extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/ExpositionConfig.java\nindex e9f47db0d9..2ca689ad50 100644\n--- a/extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/ExpositionConfig.java\n+++ b/extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/ExpositionConfig.java\n\n@@ -1,5 +1,6 @@\n package io.quarkus.kubernetes.deployment;\n \n+import java.util.Map;\n import java.util.Optional;\n \n import io.quarkus.runtime.annotations.ConfigGroup;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA3OTI3MA==", "url": "https://github.com/quarkusio/quarkus/pull/13068#discussion_r516079270", "bodyText": "This doesn't have more consequences? Asking that because it's a specific checkbox in the UI.", "author": "gsmet", "createdAt": "2020-11-02T16:07:13Z", "path": "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesConfigUtil.java", "diffHunk": "@@ -113,6 +115,25 @@ private static void handleExpose(Config config, Map<String, Object> unPrefixed,\n         }\n     }\n \n+    private static void handleExpose(Map<String, Object> unPrefixed, PlatformConfiguration... platformConfigurations) {\n+        for (PlatformConfiguration platformConfiguration : platformConfigurations) {\n+            if (platformConfiguration.getExposition().isPresent()) {\n+                final ExpositionConfig expositionConfig = platformConfiguration.getExposition().get();\n+                if (expositionConfig.expose) {\n+                    unPrefixed.put(DEKORATE_PREFIX + platformConfiguration.getTargetPlatformName() + \".\" + EXPOSE_PROPERTY_NAME,\n+                            true);\n+                    expositionConfig.host.ifPresent(\n+                            host -> unPrefixed.put(DEKORATE_PREFIX + platformConfiguration.getTargetPlatformName() + \".host\",\n+                                    host));\n+                    if (expositionConfig.secure) {", "originalCommit": "c5ac6306ed612a83ad011670b5945eb41b96acfa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjEwNjM3Ng==", "url": "https://github.com/quarkusio/quarkus/pull/13068#discussion_r516106376", "bodyText": "Asking because I remember trying to define the annotation afterwards and things didn't work and George recreated the route entirely and it worked. So I wonder if secure is more than just that.", "author": "gsmet", "createdAt": "2020-11-02T16:44:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA3OTI3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE0MTc5Mg==", "url": "https://github.com/quarkusio/quarkus/pull/13068#discussion_r516141792", "bodyText": "Yes that's possible. There is not much about tls in dekorate neither, maybe that would be a good use case. WDYT @iocanel?", "author": "glefloch", "createdAt": "2020-11-02T17:31:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA3OTI3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE0NjEzOQ==", "url": "https://github.com/quarkusio/quarkus/pull/13068#discussion_r522146139", "bodyText": "AFAIR, the particular file is meant to be used to provide support for the old style configuration. So, I think that we can entirely ignore that for this pull request. In fact, I think we have it long enough that we should probably get rid of it soon.", "author": "iocanel", "createdAt": "2020-11-12T14:27:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA3OTI3MA=="}], "type": "inlineReview", "revised_code": {"commit": "de0ec01ee8d7ce57d40e54fcb2d989f4fd0c343f", "chunk": "diff --git a/extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesConfigUtil.java b/extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesConfigUtil.java\nindex 3d246e6aaf..cada31d03e 100644\n--- a/extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesConfigUtil.java\n+++ b/extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesConfigUtil.java\n\n@@ -93,31 +94,12 @@ public class KubernetesConfigUtil {\n         return result;\n     }\n \n-    @Deprecated\n     private static void handleExpose(Config config, Map<String, Object> unPrefixed,\n             PlatformConfiguration... platformConfigurations) {\n-        for (String generator : EXPOSABLE_GENERATORS) {\n-            boolean unprefixedExpose = config.getOptionalValue(generator + \".\" + EXPOSE_PROPERTY_NAME, Boolean.class)\n-                    .orElse(false);\n-            boolean prefixedExpose = config\n-                    .getOptionalValue(QUARKUS_PREFIX + generator + \".\" + EXPOSE_PROPERTY_NAME, Boolean.class)\n-                    .orElse(false);\n-            if (unprefixedExpose || prefixedExpose) {\n-                unPrefixed.put(DEKORATE_PREFIX + generator + \".\" + EXPOSE_PROPERTY_NAME, true);\n-                for (PlatformConfiguration platformConfiguration : platformConfigurations) {\n-                    if (platformConfiguration.getConfigName().equals(generator)) {\n-                        platformConfiguration.getHost()\n-                                .ifPresent(h -> unPrefixed.put(DEKORATE_PREFIX + generator + \".host\", h));\n-                        break;\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    private static void handleExpose(Map<String, Object> unPrefixed, PlatformConfiguration... platformConfigurations) {\n+        boolean foundExpositionConfiguration = false;\n         for (PlatformConfiguration platformConfiguration : platformConfigurations) {\n             if (platformConfiguration.getExposition().isPresent()) {\n+                foundExpositionConfiguration = true;\n                 final ExpositionConfig expositionConfig = platformConfiguration.getExposition().get();\n                 if (expositionConfig.expose) {\n                     unPrefixed.put(DEKORATE_PREFIX + platformConfiguration.getTargetPlatformName() + \".\" + EXPOSE_PROPERTY_NAME,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA4MTE0Mg==", "url": "https://github.com/quarkusio/quarkus/pull/13068#discussion_r516081142", "bodyText": "I wonder if we should try to add an automated warning when using deprecated configuration. Similar to the one we have for unused properties.\nIMO, that's food for thoughts for later improvements but as for this PR is concerned, I wonder if we should at least add a warning when using these old configurations properties? Wondering also if we should handle the case when there is a conflict? I think the new ones should be prioritized but we should probably have a warning too.", "author": "gsmet", "createdAt": "2020-11-02T16:09:48Z", "path": "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesConfig.java", "diffHunk": "@@ -92,6 +92,8 @@\n \n     /**\n      * The host under which the application is going to be exposed\n+     * \n+     * @deprecated Use the {@code quarkus.kubernetes.ingress.host} instead", "originalCommit": "c5ac6306ed612a83ad011670b5945eb41b96acfa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5MTM4NQ==", "url": "https://github.com/quarkusio/quarkus/pull/13068#discussion_r516491385", "bodyText": "I updated the code such as, the old properties are read only if new ones are not set. and in that case, there is a warning.", "author": "glefloch", "createdAt": "2020-11-03T08:26:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA4MTE0Mg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "de0ec01ee8d7ce57d40e54fcb2d989f4fd0c343f", "url": "https://github.com/quarkusio/quarkus/commit/de0ec01ee8d7ce57d40e54fcb2d989f4fd0c343f", "message": "Extract route/ingress configuration into a specific object", "committedDate": "2020-11-03T08:26:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE0NjMyNg==", "url": "https://github.com/quarkusio/quarkus/pull/13068#discussion_r522146326", "bodyText": "+1", "author": "iocanel", "createdAt": "2020-11-12T14:28:04Z", "path": "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesConfigUtil.java", "diffHunk": "@@ -94,18 +96,58 @@\n \n     private static void handleExpose(Config config, Map<String, Object> unPrefixed,\n             PlatformConfiguration... platformConfigurations) {\n+        boolean foundExpositionConfiguration = false;\n+        for (PlatformConfiguration platformConfiguration : platformConfigurations) {\n+            if (platformConfiguration.getExposition().isPresent()) {\n+                foundExpositionConfiguration = true;\n+                final ExpositionConfig expositionConfig = platformConfiguration.getExposition().get();\n+                if (expositionConfig.expose) {\n+                    unPrefixed.put(DEKORATE_PREFIX + platformConfiguration.getTargetPlatformName() + \".\" + EXPOSE_PROPERTY_NAME,\n+                            true);\n+                    expositionConfig.host.ifPresent(\n+                            host -> unPrefixed.put(DEKORATE_PREFIX + platformConfiguration.getTargetPlatformName() + \".host\",\n+                                    host));\n+                    if (expositionConfig.secure) {\n+                        unPrefixed.put(DEKORATE_PREFIX + platformConfiguration.getTargetPlatformName()\n+                                + \".annotations.\\\"kubernetes.io/tls-acme\\\"\", true);\n+                    }\n+                }\n+            }\n+        }\n+        if (!foundExpositionConfiguration) {\n+            handleExposeOldSyntax(config, unPrefixed, platformConfigurations);\n+        }\n+    }\n+\n+    @Deprecated\n+    private static void handleExposeOldSyntax(Config config, Map<String, Object> unPrefixed,\n+            PlatformConfiguration... platformConfigurations) {\n         for (String generator : EXPOSABLE_GENERATORS) {\n             boolean unprefixedExpose = config.getOptionalValue(generator + \".\" + EXPOSE_PROPERTY_NAME, Boolean.class)\n                     .orElse(false);\n             boolean prefixedExpose = config\n                     .getOptionalValue(QUARKUS_PREFIX + generator + \".\" + EXPOSE_PROPERTY_NAME, Boolean.class)\n                     .orElse(false);\n             if (unprefixedExpose || prefixedExpose) {\n+                if (generator == KUBERNETES) {\n+                    log.warn(\"Usage of quarkus.kubernetes.expose is deprecated in favor of quarkus.kubernetes.ingress.expose\");", "originalCommit": "de0ec01ee8d7ce57d40e54fcb2d989f4fd0c343f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e1c09bd4bcf82c7d343548f9fcb3a9cd423445e1", "chunk": "diff --git a/extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesConfigUtil.java b/extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesConfigUtil.java\nindex cada31d03e..e2a4349b47 100644\n--- a/extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesConfigUtil.java\n+++ b/extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesConfigUtil.java\n\n@@ -94,33 +94,8 @@ public class KubernetesConfigUtil {\n         return result;\n     }\n \n-    private static void handleExpose(Config config, Map<String, Object> unPrefixed,\n-            PlatformConfiguration... platformConfigurations) {\n-        boolean foundExpositionConfiguration = false;\n-        for (PlatformConfiguration platformConfiguration : platformConfigurations) {\n-            if (platformConfiguration.getExposition().isPresent()) {\n-                foundExpositionConfiguration = true;\n-                final ExpositionConfig expositionConfig = platformConfiguration.getExposition().get();\n-                if (expositionConfig.expose) {\n-                    unPrefixed.put(DEKORATE_PREFIX + platformConfiguration.getTargetPlatformName() + \".\" + EXPOSE_PROPERTY_NAME,\n-                            true);\n-                    expositionConfig.host.ifPresent(\n-                            host -> unPrefixed.put(DEKORATE_PREFIX + platformConfiguration.getTargetPlatformName() + \".host\",\n-                                    host));\n-                    if (expositionConfig.secure) {\n-                        unPrefixed.put(DEKORATE_PREFIX + platformConfiguration.getTargetPlatformName()\n-                                + \".annotations.\\\"kubernetes.io/tls-acme\\\"\", true);\n-                    }\n-                }\n-            }\n-        }\n-        if (!foundExpositionConfiguration) {\n-            handleExposeOldSyntax(config, unPrefixed, platformConfigurations);\n-        }\n-    }\n-\n     @Deprecated\n-    private static void handleExposeOldSyntax(Config config, Map<String, Object> unPrefixed,\n+    private static void handleExpose(Config config, Map<String, Object> unPrefixed,\n             PlatformConfiguration... platformConfigurations) {\n         for (String generator : EXPOSABLE_GENERATORS) {\n             boolean unprefixedExpose = config.getOptionalValue(generator + \".\" + EXPOSE_PROPERTY_NAME, Boolean.class)\n"}}, {"oid": "e1c09bd4bcf82c7d343548f9fcb3a9cd423445e1", "url": "https://github.com/quarkusio/quarkus/commit/e1c09bd4bcf82c7d343548f9fcb3a9cd423445e1", "message": "Extract route/ingress configuration into a specific object", "committedDate": "2020-11-16T13:15:47Z", "type": "forcePushed"}, {"oid": "e4eb5e81272730b4d9b7f034117823d4b4be644e", "url": "https://github.com/quarkusio/quarkus/commit/e4eb5e81272730b4d9b7f034117823d4b4be644e", "message": "Extract route/ingress configuration into a specific object", "committedDate": "2020-11-16T13:38:26Z", "type": "forcePushed"}, {"oid": "6caecc21b66a1db250a9d63777e59280ecf59ad0", "url": "https://github.com/quarkusio/quarkus/commit/6caecc21b66a1db250a9d63777e59280ecf59ad0", "message": "Extract route/ingress configuration into a specific object", "committedDate": "2020-11-16T13:53:48Z", "type": "forcePushed"}, {"oid": "f78759504a4f0e165f9b21ff3454065450c5517b", "url": "https://github.com/quarkusio/quarkus/commit/f78759504a4f0e165f9b21ff3454065450c5517b", "message": "Extract route/ingress configuration into a specific object", "committedDate": "2020-11-16T13:54:22Z", "type": "forcePushed"}, {"oid": "76103c0fa5e1355d0e8b29a5ebf436aa4bab8fbc", "url": "https://github.com/quarkusio/quarkus/commit/76103c0fa5e1355d0e8b29a5ebf436aa4bab8fbc", "message": "Extract route/ingress configuration into a specific object", "committedDate": "2020-12-14T14:47:32Z", "type": "forcePushed"}, {"oid": "92730854f83488d324142506640fca35bba154b3", "url": "https://github.com/quarkusio/quarkus/commit/92730854f83488d324142506640fca35bba154b3", "message": "Extract route/ingress configuration into a specific object", "committedDate": "2021-02-26T11:10:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MzU3OTgxOQ==", "url": "https://github.com/quarkusio/quarkus/pull/13068#discussion_r583579819", "bodyText": "Can we have the star imports removed please?", "author": "geoand", "createdAt": "2021-02-26T11:41:27Z", "path": "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesCommonHelper.java", "diffHunk": "@@ -1,9 +1,7 @@\n \n package io.quarkus.kubernetes.deployment;\n \n-import static io.quarkus.kubernetes.deployment.Constants.QUARKUS_ANNOTATIONS_BUILD_TIMESTAMP;\n-import static io.quarkus.kubernetes.deployment.Constants.QUARKUS_ANNOTATIONS_COMMIT_ID;\n-import static io.quarkus.kubernetes.deployment.Constants.QUARKUS_ANNOTATIONS_VCS_URL;\n+import static io.quarkus.kubernetes.deployment.Constants.*;", "originalCommit": "92730854f83488d324142506640fca35bba154b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MzU5MjUzMA==", "url": "https://github.com/quarkusio/quarkus/pull/13068#discussion_r583592530", "bodyText": "yes, and I reconfigured my IDE so that should not happen again.", "author": "glefloch", "createdAt": "2021-02-26T12:06:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MzU3OTgxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MzU5Mzk0Mg==", "url": "https://github.com/quarkusio/quarkus/pull/13068#discussion_r583593942", "bodyText": "Excellent, thanks \ud83d\udc4d", "author": "geoand", "createdAt": "2021-02-26T12:09:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MzU3OTgxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "736fcceccb9a8ee6b822d0113283853d20c4c66a", "chunk": "diff --git a/extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesCommonHelper.java b/extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesCommonHelper.java\nindex 6604a28194..42439a9ecb 100644\n--- a/extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesCommonHelper.java\n+++ b/extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesCommonHelper.java\n\n@@ -1,7 +1,10 @@\n \n package io.quarkus.kubernetes.deployment;\n \n-import static io.quarkus.kubernetes.deployment.Constants.*;\n+import static io.quarkus.kubernetes.deployment.Constants.QUARKUS_ANNOTATIONS_BUILD_TIMESTAMP;\n+import static io.quarkus.kubernetes.deployment.Constants.QUARKUS_ANNOTATIONS_COMMIT_ID;\n+import static io.quarkus.kubernetes.deployment.Constants.QUARKUS_ANNOTATIONS_VCS_URL;\n+import static io.quarkus.kubernetes.deployment.Constants.OPENSHIFT;\n \n import java.nio.file.Path;\n import java.time.ZoneOffset;\n"}}, {"oid": "736fcceccb9a8ee6b822d0113283853d20c4c66a", "url": "https://github.com/quarkusio/quarkus/commit/736fcceccb9a8ee6b822d0113283853d20c4c66a", "message": "Extract route/ingress configuration into a specific object", "committedDate": "2021-02-26T12:05:38Z", "type": "forcePushed"}, {"oid": "8068cb268fcacbed8964f127427744cc9bd12fc1", "url": "https://github.com/quarkusio/quarkus/commit/8068cb268fcacbed8964f127427744cc9bd12fc1", "message": "Extract route/ingress configuration into a specific object", "committedDate": "2021-02-26T12:14:20Z", "type": "commit"}, {"oid": "8068cb268fcacbed8964f127427744cc9bd12fc1", "url": "https://github.com/quarkusio/quarkus/commit/8068cb268fcacbed8964f127427744cc9bd12fc1", "message": "Extract route/ingress configuration into a specific object", "committedDate": "2021-02-26T12:14:20Z", "type": "forcePushed"}]}