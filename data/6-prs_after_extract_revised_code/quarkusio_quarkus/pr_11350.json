{"pr_number": 11350, "pr_title": "Introduce AutoAddScopeBuildItem to remove boilerplate necessary when annotation transformers are used to add a scope annotation to a class", "pr_createdAt": "2020-08-12T14:43:02Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/11350", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQzMDAwNg==", "url": "https://github.com/quarkusio/quarkus/pull/11350#discussion_r469430006", "bodyText": "It might be a stupid question and sorry if it's the case but should we also detect the lifecycle annotations? You might not have anything injected but a @PostConstruct?", "author": "gsmet", "createdAt": "2020-08-12T17:39:32Z", "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/AutoAddScopeBuildItem.java", "diffHunk": "@@ -0,0 +1,241 @@\n+package io.quarkus.arc.deployment;\n+\n+import java.util.Collection;\n+\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+\n+import io.quarkus.arc.processor.Annotations;\n+import io.quarkus.arc.processor.BuiltinScope;\n+import io.quarkus.arc.processor.DotNames;\n+import io.quarkus.builder.item.MultiBuildItem;\n+\n+/**\n+ * This build item can be used to turn a class that is not annotated with a CDI scope annotation into a bean, i.e. the default\n+ * scope annotation is added automatically if conditions are met.\n+ */\n+public final class AutoAddScopeBuildItem extends MultiBuildItem {\n+\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    private final MatchPredicate matchPredicate;\n+    private final boolean injectable;\n+    private final DotName defaultScope;\n+    private final boolean unremovable;\n+    private final String reason;\n+\n+    private AutoAddScopeBuildItem(MatchPredicate matchPredicate, boolean injectable,\n+            DotName defaultScope, boolean unremovable, String reason) {\n+        this.matchPredicate = matchPredicate;\n+        this.injectable = injectable;\n+        this.defaultScope = defaultScope;\n+        this.unremovable = unremovable;\n+        this.reason = reason;\n+    }\n+\n+    public boolean isInjectable() {\n+        return injectable;\n+    }\n+\n+    public DotName getDefaultScope() {\n+        return defaultScope;\n+    }\n+\n+    public boolean isUnremovable() {\n+        return unremovable;\n+    }\n+\n+    public String getReason() {\n+        return reason != null ? \": \" + reason : \"\";\n+    }\n+\n+    public boolean test(ClassInfo clazz, Collection<AnnotationInstance> annotations, IndexView index) {\n+        return matchPredicate.test(clazz, annotations, index);\n+    }\n+\n+    public interface MatchPredicate {\n+\n+        /**\n+         * @param clazz\n+         * @param annotations\n+         * @param index\n+         * @return {@code true} if the input arguments match the predicate,\n+         *         otherwise {@code false}\n+         */\n+        boolean test(ClassInfo clazz, Collection<AnnotationInstance> annotations, IndexView index);\n+\n+        default MatchPredicate and(MatchPredicate other) {\n+            return new MatchPredicate() {\n+                @Override\n+                public boolean test(ClassInfo clazz, Collection<AnnotationInstance> annotations, IndexView index) {\n+                    return test(clazz, annotations, index) && other.test(clazz, annotations, index);\n+                }\n+            };\n+        }\n+\n+    }\n+\n+    public static class Builder {\n+\n+        private MatchPredicate matchPredicate;\n+        private boolean injectable;\n+        private DotName defaultScope;\n+        private boolean unremovable;\n+        private String reason;\n+\n+        private Builder() {\n+            this.defaultScope = BuiltinScope.DEPENDENT.getName();\n+            this.unremovable = false;\n+            this.injectable = false;\n+        }\n+\n+        /**\n+         * At least one injection point must be declared in the class hierarchy. Otherwise, the scope annotation is not added.\n+         * \n+         * @return self\n+         */\n+        public Builder hasInjectionPoint() {", "originalCommit": "85ce4a8dbfb40d3be8bed7b7220a9cd2c525a600", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1MjYyNQ==", "url": "https://github.com/quarkusio/quarkus/pull/11350#discussion_r469452625", "bodyText": "It's not a stupid question but I'm not sure all the specs support the lifecycle callbacks... In any case, we could add one more method to detect @PostConstruct and @PreDestroy.", "author": "mkouba", "createdAt": "2020-08-12T18:19:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQzMDAwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ4NDMwNA==", "url": "https://github.com/quarkusio/quarkus/pull/11350#discussion_r469484304", "bodyText": "Well, that wouldn't hurt the ones that don't support it and would be nice for the ones that do? Or am I missing something?", "author": "gsmet", "createdAt": "2020-08-12T19:16:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQzMDAwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcyMTc0Mw==", "url": "https://github.com/quarkusio/quarkus/pull/11350#discussion_r469721743", "bodyText": "I get the point. We should rename the method then. It's only best effort anyway because even though we walk the class hierarchy we don't handle some special cases (e.g. an overriden initializer method)...", "author": "mkouba", "createdAt": "2020-08-13T06:21:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQzMDAwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcyNzUyNA==", "url": "https://github.com/quarkusio/quarkus/pull/11350#discussion_r469727524", "bodyText": "Hm, what about requiresContainerServices()?", "author": "mkouba", "createdAt": "2020-08-13T06:35:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQzMDAwNg=="}], "type": "inlineReview", "revised_code": {"commit": "dc6a24c8ee182b4b0f3594ba63b1b4ce3f4476d5", "chunk": "diff --git a/extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/AutoAddScopeBuildItem.java b/extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/AutoAddScopeBuildItem.java\nindex 8c4c801222..3991aade39 100644\n--- a/extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/AutoAddScopeBuildItem.java\n+++ b/extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/AutoAddScopeBuildItem.java\n\n@@ -23,22 +23,22 @@ public final class AutoAddScopeBuildItem extends MultiBuildItem {\n     }\n \n     private final MatchPredicate matchPredicate;\n-    private final boolean injectable;\n+    private final boolean containerServicesRequired;\n     private final DotName defaultScope;\n     private final boolean unremovable;\n     private final String reason;\n \n-    private AutoAddScopeBuildItem(MatchPredicate matchPredicate, boolean injectable,\n+    private AutoAddScopeBuildItem(MatchPredicate matchPredicate, boolean containerServicesRequired,\n             DotName defaultScope, boolean unremovable, String reason) {\n         this.matchPredicate = matchPredicate;\n-        this.injectable = injectable;\n+        this.containerServicesRequired = containerServicesRequired;\n         this.defaultScope = defaultScope;\n         this.unremovable = unremovable;\n         this.reason = reason;\n     }\n \n-    public boolean isInjectable() {\n-        return injectable;\n+    public boolean isContainerServicesRequired() {\n+        return containerServicesRequired;\n     }\n \n     public DotName getDefaultScope() {\n"}}, {"oid": "dc6a24c8ee182b4b0f3594ba63b1b4ce3f4476d5", "url": "https://github.com/quarkusio/quarkus/commit/dc6a24c8ee182b4b0f3594ba63b1b4ce3f4476d5", "message": "Introduce AutoAddScopeBuildItem to remove boilerplate necessary when...\n\n...annotation transformers are used to add a scope annotation to a class\n- also fixes #11340", "committedDate": "2020-08-13T06:54:16Z", "type": "forcePushed"}, {"oid": "0a80d0eaee0f0ee17ffc32e5b987915b5d45d14c", "url": "https://github.com/quarkusio/quarkus/commit/0a80d0eaee0f0ee17ffc32e5b987915b5d45d14c", "message": "Introduce AutoAddScopeBuildItem to remove boilerplate necessary when...\n\n...annotation transformers are used to add a scope annotation to a class\n- also fixes #11340", "committedDate": "2020-08-13T10:48:16Z", "type": "commit"}, {"oid": "0a80d0eaee0f0ee17ffc32e5b987915b5d45d14c", "url": "https://github.com/quarkusio/quarkus/commit/0a80d0eaee0f0ee17ffc32e5b987915b5d45d14c", "message": "Introduce AutoAddScopeBuildItem to remove boilerplate necessary when...\n\n...annotation transformers are used to add a scope annotation to a class\n- also fixes #11340", "committedDate": "2020-08-13T10:48:16Z", "type": "forcePushed"}]}