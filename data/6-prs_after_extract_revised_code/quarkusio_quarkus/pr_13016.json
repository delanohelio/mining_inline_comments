{"pr_number": 13016, "pr_title": "Allow disabling the Swagger/GraphQL/Health/OpenAPI UIs at Runtime", "pr_createdAt": "2020-10-29T12:02:23Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/13016", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMwMjA1Nw==", "url": "https://github.com/quarkusio/quarkus/pull/13016#discussion_r514302057", "bodyText": "Is this class meant to be used outside the extension? Otherwise it would be nice to be marked as package-private to avoid being listed in https://quarkus.io/guides/all-builditems", "author": "gastaldi", "createdAt": "2020-10-29T14:28:42Z", "path": "extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/FinalDestinationBuildItem.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package io.quarkus.smallrye.graphql.deployment;\n+\n+import io.quarkus.builder.item.SimpleBuildItem;\n+\n+public final class FinalDestinationBuildItem extends SimpleBuildItem {", "originalCommit": "04b87964966720881baa42f14105ab96f73652c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMwMjcyNA==", "url": "https://github.com/quarkusio/quarkus/pull/13016#discussion_r514302724", "bodyText": "Otherwise it would be nice to add some Javadoc to this class \ud83d\udc4d", "author": "gastaldi", "createdAt": "2020-10-29T14:29:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMwMjA1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMwNTEyNA==", "url": "https://github.com/quarkusio/quarkus/pull/13016#discussion_r514305124", "bodyText": "Nope this is for internal only, I'll change to package-private. Thanks :)", "author": "phillip-kruger", "createdAt": "2020-10-29T14:32:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMwMjA1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "a7344c5df7e99910c0e0543f6172643a54d85205", "chunk": "diff --git a/extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/FinalDestinationBuildItem.java b/extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLBuildItem.java\nsimilarity index 74%\nrename from extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/FinalDestinationBuildItem.java\nrename to extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLBuildItem.java\nindex 5d12b9a978..11cc5e3f4e 100644\n--- a/extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/FinalDestinationBuildItem.java\n+++ b/extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLBuildItem.java\n\n@@ -2,12 +2,12 @@ package io.quarkus.smallrye.graphql.deployment;\n \n import io.quarkus.builder.item.SimpleBuildItem;\n \n-public final class FinalDestinationBuildItem extends SimpleBuildItem {\n+final class SmallRyeGraphQLBuildItem extends SimpleBuildItem {\n \n     private final String graphqlUiFinalDestination;\n     private final String graphqlUiPath;\n \n-    public FinalDestinationBuildItem(String graphqlUiFinalDestination, String graphqlUiPath) {\n+    public SmallRyeGraphQLBuildItem(String graphqlUiFinalDestination, String graphqlUiPath) {\n         this.graphqlUiFinalDestination = graphqlUiFinalDestination;\n         this.graphqlUiPath = graphqlUiPath;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMwNjAzMQ==", "url": "https://github.com/quarkusio/quarkus/pull/13016#discussion_r514306031", "bodyText": "Maybe make the name more specific to the extension?", "author": "gsmet", "createdAt": "2020-10-29T14:33:43Z", "path": "extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/FinalDestinationBuildItem.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package io.quarkus.smallrye.graphql.deployment;\n+\n+import io.quarkus.builder.item.SimpleBuildItem;\n+\n+public final class FinalDestinationBuildItem extends SimpleBuildItem {", "originalCommit": "04b87964966720881baa42f14105ab96f73652c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMxMTQyMw==", "url": "https://github.com/quarkusio/quarkus/pull/13016#discussion_r514311423", "bodyText": "OK will do", "author": "phillip-kruger", "createdAt": "2020-10-29T14:40:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMwNjAzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "a7344c5df7e99910c0e0543f6172643a54d85205", "chunk": "diff --git a/extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/FinalDestinationBuildItem.java b/extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLBuildItem.java\nsimilarity index 74%\nrename from extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/FinalDestinationBuildItem.java\nrename to extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLBuildItem.java\nindex 5d12b9a978..11cc5e3f4e 100644\n--- a/extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/FinalDestinationBuildItem.java\n+++ b/extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLBuildItem.java\n\n@@ -2,12 +2,12 @@ package io.quarkus.smallrye.graphql.deployment;\n \n import io.quarkus.builder.item.SimpleBuildItem;\n \n-public final class FinalDestinationBuildItem extends SimpleBuildItem {\n+final class SmallRyeGraphQLBuildItem extends SimpleBuildItem {\n \n     private final String graphqlUiFinalDestination;\n     private final String graphqlUiPath;\n \n-    public FinalDestinationBuildItem(String graphqlUiFinalDestination, String graphqlUiPath) {\n+    public SmallRyeGraphQLBuildItem(String graphqlUiFinalDestination, String graphqlUiPath) {\n         this.graphqlUiFinalDestination = graphqlUiFinalDestination;\n         this.graphqlUiPath = graphqlUiPath;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMwNjgwMg==", "url": "https://github.com/quarkusio/quarkus/pull/13016#discussion_r514306802", "bodyText": "I was thinking about this yesterday and my first inclination was to have expose defaulting to true.\nJust a proposal, I don't know what's best really :).", "author": "gsmet", "createdAt": "2020-10-29T14:34:39Z", "path": "extensions/smallrye-graphql/runtime/src/main/java/io/quarkus/smallrye/graphql/runtime/SmallRyeGraphQLRuntimeConfig.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package io.quarkus.smallrye.graphql.runtime;\n+\n+import io.quarkus.runtime.annotations.ConfigItem;\n+import io.quarkus.runtime.annotations.ConfigPhase;\n+import io.quarkus.runtime.annotations.ConfigRoot;\n+\n+@ConfigRoot(name = \"smallrye-graphql\", phase = ConfigPhase.RUN_TIME)\n+public class SmallRyeGraphQLRuntimeConfig {\n+\n+    /**\n+     * Deactivate the graphql schema and graphql-ui endpoint.\n+     */\n+    @ConfigItem(defaultValue = \"false\")\n+    public boolean deactivate;", "originalCommit": "04b87964966720881baa42f14105ab96f73652c7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a7344c5df7e99910c0e0543f6172643a54d85205", "chunk": "diff --git a/extensions/smallrye-graphql/runtime/src/main/java/io/quarkus/smallrye/graphql/runtime/SmallRyeGraphQLRuntimeConfig.java b/extensions/smallrye-graphql/runtime/src/main/java/io/quarkus/smallrye/graphql/runtime/SmallRyeGraphQLRuntimeConfig.java\nindex 3af7923ba8..5b5661db06 100644\n--- a/extensions/smallrye-graphql/runtime/src/main/java/io/quarkus/smallrye/graphql/runtime/SmallRyeGraphQLRuntimeConfig.java\n+++ b/extensions/smallrye-graphql/runtime/src/main/java/io/quarkus/smallrye/graphql/runtime/SmallRyeGraphQLRuntimeConfig.java\n\n@@ -8,9 +8,9 @@ import io.quarkus.runtime.annotations.ConfigRoot;\n public class SmallRyeGraphQLRuntimeConfig {\n \n     /**\n-     * Deactivate the graphql schema and graphql-ui endpoint.\n+     * If GraphQL UI should be enabled. By default, GraphQL UI is enabled if it is included (see {@code always-include}).\n      */\n-    @ConfigItem(defaultValue = \"false\")\n-    public boolean deactivate;\n+    @ConfigItem(name = \"ui.enable\", defaultValue = \"true\")\n+    boolean enable;\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMwOTY0Mw==", "url": "https://github.com/quarkusio/quarkus/pull/13016#discussion_r514309643", "bodyText": "Between enable and deactivate, it's going to be a bit hard to guess what will be going on :).\nI wonder if we should simply move this one to runtime and have something like:\n\nalwaysInclude: defines if Swagger UI is included in the package or not\nenable: defines if it's exposed or not. And this would be a runtime config.", "author": "gsmet", "createdAt": "2020-10-29T14:38:07Z", "path": "extensions/swagger-ui/deployment/src/main/java/io/quarkus/swaggerui/deployment/SwaggerUiConfig.java", "diffHunk": "@@ -0,0 +1,267 @@\n+package io.quarkus.swaggerui.deployment;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.OptionalInt;\n+\n+import io.quarkus.runtime.annotations.ConfigItem;\n+import io.quarkus.runtime.annotations.ConfigRoot;\n+import io.smallrye.openapi.ui.DocExpansion;\n+import io.smallrye.openapi.ui.HttpMethod;\n+import io.smallrye.openapi.ui.ThemeHref;\n+\n+@ConfigRoot\n+public class SwaggerUiConfig {\n+\n+    /**\n+     * The path where Swagger UI is available.\n+     * <p>\n+     * The value `/` is not allowed as it blocks the application from serving anything else.\n+     */\n+    @ConfigItem(defaultValue = \"/swagger-ui\")\n+    String path;\n+\n+    /**\n+     * If this should be included every time. By default this is only included when the application is running\n+     * in dev mode.\n+     */\n+    @ConfigItem\n+    boolean alwaysInclude;\n+\n+    /**\n+     * If Swagger UI should be enabled. By default, Swagger UI is enabled.\n+     */\n+    @ConfigItem(defaultValue = \"true\")\n+    boolean enable;", "originalCommit": "04b87964966720881baa42f14105ab96f73652c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMxMzE1MQ==", "url": "https://github.com/quarkusio/quarkus/pull/13016#discussion_r514313151", "bodyText": "I initially just move enable to a runtime config. However, then you can not disable in dev and test mode. So I decided to allow you to deactivate, if included. Maybe it should change to deactivateIfIncluded ?", "author": "phillip-kruger", "createdAt": "2020-10-29T14:42:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMwOTY0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMxMzgzOA==", "url": "https://github.com/quarkusio/quarkus/pull/13016#discussion_r514313838", "bodyText": "Except if we say you can not disable in dev and test ? And then use disable to disable in runtime when included ?", "author": "phillip-kruger", "createdAt": "2020-10-29T14:43:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMwOTY0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMyNjIxNA==", "url": "https://github.com/quarkusio/quarkus/pull/13016#discussion_r514326214", "bodyText": "Between enable and deactivate, it's going to be a bit hard to guess what will be going on :).\n\nThis is my initial reaction to.\n\nI wonder if we should simply move this one to runtime and have something like:\n\nalwaysInclude: defines if Swagger UI is included in the package or not\nenable: defines if it's exposed or not. And this would be a runtime config.\n\n\n+1 on this.\n\nI initially just move enable to a runtime config. However, then you can not disable in dev and test mode\n\nNot sure I understood the issue but I think defining the enable=false property in the application.properties on a profile basis can fix it.", "author": "machi1990", "createdAt": "2020-10-29T14:58:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMwOTY0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQzNTI2Nw==", "url": "https://github.com/quarkusio/quarkus/pull/13016#discussion_r514435267", "bodyText": "Ok, so if we just move enable to runtime, and alwaysInclude stay as is that is fine? Should I rename enable to expose ?", "author": "phillip-kruger", "createdAt": "2020-10-29T17:22:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMwOTY0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ0NzQ4OQ==", "url": "https://github.com/quarkusio/quarkus/pull/13016#discussion_r514447489", "bodyText": "Ok, so if we just move enable to runtime, and alwaysInclude stay as is that is fine?\n\nYes, exactly.\nalwaysInclude will only decide if we include the bits outside of dev mode\nenable will allow to enable things and will be runtime. Obviously, it will only enable things if the bits are included.\n\nShould I rename enable to expose ?\n\nNo, I would keep it as it is to avoid breaking compatibility for nothing. The expose idea was before I stumbled upon this enable knob.\nAs said by @machi1990 , I think profiles will allow to handle everything nicely.", "author": "gsmet", "createdAt": "2020-10-29T17:41:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMwOTY0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUwMzQ3MQ==", "url": "https://github.com/quarkusio/quarkus/pull/13016#discussion_r514503471", "bodyText": "Ok, let me update, I'll ping you once everything is changed", "author": "phillip-kruger", "createdAt": "2020-10-29T19:11:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMwOTY0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "a7344c5df7e99910c0e0543f6172643a54d85205", "chunk": "diff --git a/extensions/swagger-ui/deployment/src/main/java/io/quarkus/swaggerui/deployment/SwaggerUiConfig.java b/extensions/swagger-ui/deployment/src/main/java/io/quarkus/swaggerui/deployment/SwaggerUiConfig.java\nindex b0931daa97..75c423b5a7 100644\n--- a/extensions/swagger-ui/deployment/src/main/java/io/quarkus/swaggerui/deployment/SwaggerUiConfig.java\n+++ b/extensions/swagger-ui/deployment/src/main/java/io/quarkus/swaggerui/deployment/SwaggerUiConfig.java\n\n@@ -26,15 +26,9 @@ public class SwaggerUiConfig {\n      * If this should be included every time. By default this is only included when the application is running\n      * in dev mode.\n      */\n-    @ConfigItem\n+    @ConfigItem(defaultValue = \"false\")\n     boolean alwaysInclude;\n \n-    /**\n-     * If Swagger UI should be enabled. By default, Swagger UI is enabled.\n-     */\n-    @ConfigItem(defaultValue = \"true\")\n-    boolean enable;\n-\n     /**\n      * The urls that will be included as options. By default the OpenAPI path will be used.\n      * Here you can override that and supply multiple urls that will appear in the TopBar plugin.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg2OTU4OQ==", "url": "https://github.com/quarkusio/quarkus/pull/13016#discussion_r515869589", "bodyText": "We tend to avoid that and prefer parameter injection. Otherwise you completely lose the dependencies.", "author": "gsmet", "createdAt": "2020-11-02T10:17:44Z", "path": "extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLProcessor.java", "diffHunk": "@@ -94,6 +97,9 @@\n \n     SmallRyeGraphQLConfig quarkusConfig;\n \n+    @Inject\n+    LaunchModeBuildItem launch;", "originalCommit": "85cc5e1b2976e0e44014d6a2655fd5a0e3069b23", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg4NjMxNw==", "url": "https://github.com/quarkusio/quarkus/pull/13016#discussion_r515886317", "bodyText": "OK will change to Parameter.", "author": "phillip-kruger", "createdAt": "2020-11-02T10:46:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg2OTU4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "a7344c5df7e99910c0e0543f6172643a54d85205", "chunk": "diff --git a/extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLProcessor.java b/extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLProcessor.java\nindex 34c1af0b9c..27891b0f49 100644\n--- a/extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLProcessor.java\n+++ b/extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLProcessor.java\n\n@@ -95,11 +93,6 @@ public class SmallRyeGraphQLProcessor {\n     private static final String LINE_TO_UPDATE = \"const api = '\";\n     private static final String LINE_FORMAT = LINE_TO_UPDATE + \"%s';\";\n \n-    SmallRyeGraphQLConfig quarkusConfig;\n-\n-    @Inject\n-    LaunchModeBuildItem launch;\n-\n     @BuildStep\n     void feature(BuildProducer<FeatureBuildItem> featureProducer) {\n         featureProducer.produce(new FeatureBuildItem(Feature.SMALLRYE_GRAPHQL));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg3MDUzOQ==", "url": "https://github.com/quarkusio/quarkus/pull/13016#discussion_r515870539", "bodyText": "You should make this static and pass the parameters here.\nIn a perfect world, the config would also be injected in the build steps that require it.", "author": "gsmet", "createdAt": "2020-11-02T10:19:16Z", "path": "extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLProcessor.java", "diffHunk": "@@ -412,63 +426,80 @@ private boolean shouldActivateService(Capabilities capabilities,\n     // UI Related\n \n     @BuildStep\n-    @Record(ExecutionTime.STATIC_INIT)\n-    void registerGraphQLUiServletExtension(\n-            BuildProducer<RouteBuildItem> routeProducer,\n+    void getGraphqlUiFinalDestination(\n             BuildProducer<GeneratedResourceBuildItem> generatedResourceProducer,\n             BuildProducer<NativeImageResourceBuildItem> nativeImageResourceProducer,\n             BuildProducer<NotFoundPageDisplayableEndpointBuildItem> notFoundPageDisplayableEndpointProducer,\n-            SmallRyeGraphQLRecorder recorder,\n-            LaunchModeBuildItem launchMode,\n             HttpRootPathBuildItem httpRootPath,\n-            CurateOutcomeBuildItem curateOutcomeBuildItem) throws Exception {\n+            CurateOutcomeBuildItem curateOutcomeBuildItem,\n+            BuildProducer<SmallRyeGraphQLBuildItem> smallRyeGraphQLBuildProducer) throws Exception {\n \n-        if (!quarkusConfig.ui.enable) {\n-            return;\n-        }\n-        if (\"/\".equals(quarkusConfig.ui.rootPath)) {\n-            throw new ConfigurationError(\n-                    \"quarkus.smallrye-graphql.root-path-ui was set to \\\"/\\\", this is not allowed as it blocks the application from serving anything else.\");\n-        }\n+        if (shouldInclude()) {\n \n-        String graphQLPath = httpRootPath.adjustPath(quarkusConfig.rootPath);\n+            if (\"/\".equals(quarkusConfig.ui.rootPath)) {\n+                throw new ConfigurationError(\n+                        \"quarkus.smallrye-graphql.root-path-ui was set to \\\"/\\\", this is not allowed as it blocks the application from serving anything else.\");\n+            }\n \n-        AppArtifact artifact = WebJarUtil.getAppArtifact(curateOutcomeBuildItem, GRAPHQL_UI_WEBJAR_GROUP_ID,\n-                GRAPHQL_UI_WEBJAR_ARTIFACT_ID);\n-        if (launchMode.getLaunchMode().isDevOrTest()) {\n-            Path tempPath = WebJarUtil.devOrTest(curateOutcomeBuildItem, launchMode, artifact, GRAPHQL_UI_WEBJAR_PREFIX);\n-            WebJarUtil.updateUrl(tempPath.resolve(FILE_TO_UPDATE), graphQLPath, LINE_TO_UPDATE, LINE_FORMAT);\n+            String graphQLPath = httpRootPath.adjustPath(quarkusConfig.rootPath);\n \n-            Handler<RoutingContext> handler = recorder.uiHandler(tempPath.toAbsolutePath().toString(),\n-                    httpRootPath.adjustPath(quarkusConfig.ui.rootPath));\n-            routeProducer.produce(new RouteBuildItem(quarkusConfig.ui.rootPath, handler));\n-            routeProducer.produce(new RouteBuildItem(quarkusConfig.ui.rootPath + \"/*\", handler));\n-            notFoundPageDisplayableEndpointProducer\n-                    .produce(new NotFoundPageDisplayableEndpointBuildItem(quarkusConfig.ui.rootPath + \"/\"));\n+            AppArtifact artifact = WebJarUtil.getAppArtifact(curateOutcomeBuildItem, GRAPHQL_UI_WEBJAR_GROUP_ID,\n+                    GRAPHQL_UI_WEBJAR_ARTIFACT_ID);\n+            if (launch.getLaunchMode().isDevOrTest()) {\n+                Path tempPath = WebJarUtil.devOrTest(curateOutcomeBuildItem, launch, artifact, GRAPHQL_UI_WEBJAR_PREFIX);\n+                WebJarUtil.updateUrl(tempPath.resolve(FILE_TO_UPDATE), graphQLPath, LINE_TO_UPDATE, LINE_FORMAT);\n+\n+                smallRyeGraphQLBuildProducer.produce(new SmallRyeGraphQLBuildItem(tempPath.toAbsolutePath().toString(),\n+                        httpRootPath.adjustPath(quarkusConfig.ui.rootPath)));\n+                notFoundPageDisplayableEndpointProducer\n+                        .produce(new NotFoundPageDisplayableEndpointBuildItem(quarkusConfig.ui.rootPath + \"/\"));\n \n-        } else if (quarkusConfig.ui.alwaysInclude) {\n+            } else {\n+                Map<String, byte[]> files = WebJarUtil.production(curateOutcomeBuildItem, artifact, GRAPHQL_UI_WEBJAR_PREFIX);\n \n-            Map<String, byte[]> files = WebJarUtil.production(curateOutcomeBuildItem, artifact, GRAPHQL_UI_WEBJAR_PREFIX);\n+                for (Map.Entry<String, byte[]> file : files.entrySet()) {\n \n-            for (Map.Entry<String, byte[]> file : files.entrySet()) {\n+                    String fileName = file.getKey();\n+                    byte[] content = file.getValue();\n+                    if (fileName.endsWith(FILE_TO_UPDATE)) {\n+                        content = WebJarUtil\n+                                .updateUrl(new String(content, StandardCharsets.UTF_8), graphQLPath, LINE_TO_UPDATE,\n+                                        LINE_FORMAT)\n+                                .getBytes(StandardCharsets.UTF_8);\n+                    }\n+                    fileName = GRAPHQL_UI_FINAL_DESTINATION + \"/\" + fileName;\n \n-                String fileName = file.getKey();\n-                byte[] content = file.getValue();\n-                if (fileName.endsWith(FILE_TO_UPDATE)) {\n-                    content = WebJarUtil\n-                            .updateUrl(new String(content, StandardCharsets.UTF_8), graphQLPath, LINE_TO_UPDATE, LINE_FORMAT)\n-                            .getBytes(StandardCharsets.UTF_8);\n+                    generatedResourceProducer.produce(new GeneratedResourceBuildItem(fileName, content));\n+                    nativeImageResourceProducer.produce(new NativeImageResourceBuildItem(fileName));\n                 }\n-                fileName = GRAPHQL_UI_FINAL_DESTINATION + \"/\" + fileName;\n \n-                generatedResourceProducer.produce(new GeneratedResourceBuildItem(fileName, content));\n-                nativeImageResourceProducer.produce(new NativeImageResourceBuildItem(fileName));\n+                smallRyeGraphQLBuildProducer.produce(new SmallRyeGraphQLBuildItem(GRAPHQL_UI_FINAL_DESTINATION,\n+                        httpRootPath.adjustPath(quarkusConfig.ui.rootPath)));\n             }\n+        }\n+    }\n \n-            Handler<RoutingContext> handler = recorder\n-                    .uiHandler(GRAPHQL_UI_FINAL_DESTINATION, httpRootPath.adjustPath(quarkusConfig.ui.rootPath));\n+    @BuildStep\n+    @Record(ExecutionTime.RUNTIME_INIT)\n+    void registerGraphQLUiHandler(\n+            BuildProducer<RouteBuildItem> routeProducer,\n+            SmallRyeGraphQLRecorder recorder,\n+            SmallRyeGraphQLRuntimeConfig runtimeConfig,\n+            SmallRyeGraphQLBuildItem smallRyeGraphQLBuildItem) throws Exception {\n+\n+        if (shouldInclude()) {\n+            Handler<RoutingContext> handler = recorder.uiHandler(smallRyeGraphQLBuildItem.getGraphqlUiFinalDestination(),\n+                    smallRyeGraphQLBuildItem.getGraphqlUiPath(), runtimeConfig);\n             routeProducer.produce(new RouteBuildItem(quarkusConfig.ui.rootPath, handler));\n             routeProducer.produce(new RouteBuildItem(quarkusConfig.ui.rootPath + \"/*\", handler));\n         }\n     }\n+\n+    private boolean shouldInclude() {", "originalCommit": "85cc5e1b2976e0e44014d6a2655fd5a0e3069b23", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg4NjU2OQ==", "url": "https://github.com/quarkusio/quarkus/pull/13016#discussion_r515886569", "bodyText": "Ok, I can do that", "author": "phillip-kruger", "createdAt": "2020-11-02T10:46:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg3MDUzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "a7344c5df7e99910c0e0543f6172643a54d85205", "chunk": "diff --git a/extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLProcessor.java b/extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLProcessor.java\nindex 34c1af0b9c..27891b0f49 100644\n--- a/extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLProcessor.java\n+++ b/extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLProcessor.java\n\n@@ -430,29 +429,31 @@ public class SmallRyeGraphQLProcessor {\n             BuildProducer<GeneratedResourceBuildItem> generatedResourceProducer,\n             BuildProducer<NativeImageResourceBuildItem> nativeImageResourceProducer,\n             BuildProducer<NotFoundPageDisplayableEndpointBuildItem> notFoundPageDisplayableEndpointProducer,\n+            BuildProducer<SmallRyeGraphQLBuildItem> smallRyeGraphQLBuildProducer,\n             HttpRootPathBuildItem httpRootPath,\n             CurateOutcomeBuildItem curateOutcomeBuildItem,\n-            BuildProducer<SmallRyeGraphQLBuildItem> smallRyeGraphQLBuildProducer) throws Exception {\n+            LaunchModeBuildItem launchMode,\n+            SmallRyeGraphQLConfig graphQLConfig) throws Exception {\n \n-        if (shouldInclude()) {\n+        if (shouldInclude(launchMode, graphQLConfig)) {\n \n-            if (\"/\".equals(quarkusConfig.ui.rootPath)) {\n+            if (\"/\".equals(graphQLConfig.ui.rootPath)) {\n                 throw new ConfigurationError(\n                         \"quarkus.smallrye-graphql.root-path-ui was set to \\\"/\\\", this is not allowed as it blocks the application from serving anything else.\");\n             }\n \n-            String graphQLPath = httpRootPath.adjustPath(quarkusConfig.rootPath);\n+            String graphQLPath = httpRootPath.adjustPath(graphQLConfig.rootPath);\n \n             AppArtifact artifact = WebJarUtil.getAppArtifact(curateOutcomeBuildItem, GRAPHQL_UI_WEBJAR_GROUP_ID,\n                     GRAPHQL_UI_WEBJAR_ARTIFACT_ID);\n-            if (launch.getLaunchMode().isDevOrTest()) {\n-                Path tempPath = WebJarUtil.devOrTest(curateOutcomeBuildItem, launch, artifact, GRAPHQL_UI_WEBJAR_PREFIX);\n+            if (launchMode.getLaunchMode().isDevOrTest()) {\n+                Path tempPath = WebJarUtil.devOrTest(curateOutcomeBuildItem, launchMode, artifact, GRAPHQL_UI_WEBJAR_PREFIX);\n                 WebJarUtil.updateUrl(tempPath.resolve(FILE_TO_UPDATE), graphQLPath, LINE_TO_UPDATE, LINE_FORMAT);\n \n                 smallRyeGraphQLBuildProducer.produce(new SmallRyeGraphQLBuildItem(tempPath.toAbsolutePath().toString(),\n-                        httpRootPath.adjustPath(quarkusConfig.ui.rootPath)));\n+                        httpRootPath.adjustPath(graphQLConfig.ui.rootPath)));\n                 notFoundPageDisplayableEndpointProducer\n-                        .produce(new NotFoundPageDisplayableEndpointBuildItem(quarkusConfig.ui.rootPath + \"/\"));\n+                        .produce(new NotFoundPageDisplayableEndpointBuildItem(graphQLConfig.ui.rootPath + \"/\"));\n \n             } else {\n                 Map<String, byte[]> files = WebJarUtil.production(curateOutcomeBuildItem, artifact, GRAPHQL_UI_WEBJAR_PREFIX);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg3MjQ2Mw==", "url": "https://github.com/quarkusio/quarkus/pull/13016#discussion_r515872463", "bodyText": "So we always expose this one?", "author": "gsmet", "createdAt": "2020-11-02T10:22:16Z", "path": "extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLProcessor.java", "diffHunk": "@@ -166,12 +172,23 @@ void requireBody(BuildProducer<RequireBodyHandlerBuildItem> requireBodyHandlerPr\n         requireBodyHandlerProducer.produce(new RequireBodyHandlerBuildItem());\n     }\n \n+    @Record(ExecutionTime.RUNTIME_INIT)\n+    @BuildStep\n+    void buildSchemaEndpoint(\n+            BuildProducer<RouteBuildItem> routeProducer,\n+            SmallRyeGraphQLRecorder recorder,\n+            SmallRyeGraphQLRuntimeConfig runtimeConfig) {\n+\n+        Handler<RoutingContext> schemaHandler = recorder.schemaHandler(runtimeConfig);\n+        routeProducer.produce(\n+                new RouteBuildItem(quarkusConfig.rootPath + SCHEMA_PATH, schemaHandler, HandlerType.BLOCKING));", "originalCommit": "85cc5e1b2976e0e44014d6a2655fd5a0e3069b23", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg4NzA4NQ==", "url": "https://github.com/quarkusio/quarkus/pull/13016#discussion_r515887085", "bodyText": "Yes, except that you can also disable in runtime, with the UI.", "author": "phillip-kruger", "createdAt": "2020-11-02T10:47:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg3MjQ2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "a7344c5df7e99910c0e0543f6172643a54d85205", "chunk": "diff --git a/extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLProcessor.java b/extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLProcessor.java\nindex 34c1af0b9c..27891b0f49 100644\n--- a/extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLProcessor.java\n+++ b/extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLProcessor.java\n\n@@ -177,11 +171,11 @@ public class SmallRyeGraphQLProcessor {\n     void buildSchemaEndpoint(\n             BuildProducer<RouteBuildItem> routeProducer,\n             SmallRyeGraphQLRecorder recorder,\n-            SmallRyeGraphQLRuntimeConfig runtimeConfig) {\n+            SmallRyeGraphQLConfig graphQLConfig) {\n \n-        Handler<RoutingContext> schemaHandler = recorder.schemaHandler(runtimeConfig);\n+        Handler<RoutingContext> schemaHandler = recorder.schemaHandler();\n         routeProducer.produce(\n-                new RouteBuildItem(quarkusConfig.rootPath + SCHEMA_PATH, schemaHandler, HandlerType.BLOCKING));\n+                new RouteBuildItem(graphQLConfig.rootPath + SCHEMA_PATH, schemaHandler, HandlerType.BLOCKING));\n     }\n \n     @Record(ExecutionTime.STATIC_INIT)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg3MzIzNg==", "url": "https://github.com/quarkusio/quarkus/pull/13016#discussion_r515873236", "bodyText": "I don't understand this change? We certainly prefer having proper default values.", "author": "gsmet", "createdAt": "2020-11-02T10:23:35Z", "path": "extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLUIConfig.java", "diffHunk": "@@ -17,12 +19,7 @@\n      * Always include the UI. By default this will only be included in dev and test.\n      * Setting this to true will also include the UI in Prod\n      */\n-    @ConfigItem(defaultValue = \"false\")\n-    boolean alwaysInclude;\n+    @ConfigItem\n+    Optional<Boolean> alwaysInclude;", "originalCommit": "85cc5e1b2976e0e44014d6a2655fd5a0e3069b23", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg4ODk1OQ==", "url": "https://github.com/quarkusio/quarkus/pull/13016#discussion_r515888959", "bodyText": "That is the only way I could get it to work like it did before. The proper default value now is empty (not explicitly set by the user). That way I can still do the \"include in dev and test\" by default and \"exclude\" in prod by default. If the user set this explicitly, then I do not include at all everywhere (if false) or also include in prod (if true). Else there is no way to exclude in dev and test (i.e don't use this at all)", "author": "phillip-kruger", "createdAt": "2020-11-02T10:50:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg3MzIzNg=="}], "type": "inlineReview", "revised_code": {"commit": "a7344c5df7e99910c0e0543f6172643a54d85205", "chunk": "diff --git a/extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLUIConfig.java b/extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLUIConfig.java\nindex bcc1d70013..9c426cffbe 100644\n--- a/extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLUIConfig.java\n+++ b/extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLUIConfig.java\n\n@@ -19,7 +17,6 @@ public class SmallRyeGraphQLUIConfig {\n      * Always include the UI. By default this will only be included in dev and test.\n      * Setting this to true will also include the UI in Prod\n      */\n-    @ConfigItem\n-    Optional<Boolean> alwaysInclude;\n-\n+    @ConfigItem(defaultValue = \"false\")\n+    boolean alwaysInclude;\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg3NDM4NQ==", "url": "https://github.com/quarkusio/quarkus/pull/13016#discussion_r515874385", "bodyText": "I would simplify this by doing:\nif (!runtimeConfig.enable) {\n    event.response().setStatusCode(404);\n    event.response().end();\n    return;\n}\n\nand avoid the else.\nIn general, it's good practice to evacuate the special cases at the beginning to keep the general logic simple.", "author": "gsmet", "createdAt": "2020-11-02T10:25:28Z", "path": "extensions/smallrye-graphql/runtime/src/main/java/io/quarkus/smallrye/graphql/runtime/SmallRyeGraphQLRecorder.java", "diffHunk": "@@ -52,18 +53,23 @@ public void createExecutionService(BeanContainer beanContainer, Schema schema) {\n         return new Handler<RoutingContext>() {\n             @Override\n             public void handle(RoutingContext event) {\n-                if (event.normalisedPath().length() == graphqlUiPath.length()) {\n+                if (runtimeConfig.enable) {\n+                    if (event.normalisedPath().length() == graphqlUiPath.length()) {\n \n-                    event.response().setStatusCode(302);\n-                    event.response().headers().set(HttpHeaders.LOCATION, graphqlUiPath + \"/\");\n+                        event.response().setStatusCode(302);\n+                        event.response().headers().set(HttpHeaders.LOCATION, graphqlUiPath + \"/\");\n+                        event.response().end();\n+                        return;\n+                    } else if (event.normalisedPath().length() == graphqlUiPath.length() + 1) {\n+                        event.reroute(graphqlUiPath + \"/index.html\");\n+                        return;\n+                    }\n+\n+                    staticHandler.handle(event);\n+                } else {\n+                    event.response().setStatusCode(404);", "originalCommit": "85cc5e1b2976e0e44014d6a2655fd5a0e3069b23", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a7344c5df7e99910c0e0543f6172643a54d85205", "chunk": "diff --git a/extensions/smallrye-graphql/runtime/src/main/java/io/quarkus/smallrye/graphql/runtime/SmallRyeGraphQLRecorder.java b/extensions/smallrye-graphql/runtime/src/main/java/io/quarkus/smallrye/graphql/runtime/SmallRyeGraphQLRecorder.java\nindex f381356bf3..fb4160081b 100644\n--- a/extensions/smallrye-graphql/runtime/src/main/java/io/quarkus/smallrye/graphql/runtime/SmallRyeGraphQLRecorder.java\n+++ b/extensions/smallrye-graphql/runtime/src/main/java/io/quarkus/smallrye/graphql/runtime/SmallRyeGraphQLRecorder.java\n\n@@ -39,39 +37,18 @@ public class SmallRyeGraphQLRecorder {\n         return new SmallRyeGraphQLExecutionHandler(allowGet, association, currentVertxRequest);\n     }\n \n-    public Handler<RoutingContext> schemaHandler(SmallRyeGraphQLRuntimeConfig graphQLRuntimeConfig) {\n-        return new SmallRyeGraphQLSchemaHandler(graphQLRuntimeConfig);\n+    public Handler<RoutingContext> schemaHandler() {\n+        return new SmallRyeGraphQLSchemaHandler();\n     }\n \n     public Handler<RoutingContext> uiHandler(String graphqlUiFinalDestination,\n             String graphqlUiPath, SmallRyeGraphQLRuntimeConfig runtimeConfig) {\n \n-        StaticHandler staticHandler = StaticHandler.create().setAllowRootFileSystemAccess(true)\n-                .setWebRoot(graphqlUiFinalDestination)\n-                .setDefaultContentEncoding(\"UTF-8\");\n-\n-        return new Handler<RoutingContext>() {\n-            @Override\n-            public void handle(RoutingContext event) {\n-                if (runtimeConfig.enable) {\n-                    if (event.normalisedPath().length() == graphqlUiPath.length()) {\n-\n-                        event.response().setStatusCode(302);\n-                        event.response().headers().set(HttpHeaders.LOCATION, graphqlUiPath + \"/\");\n-                        event.response().end();\n-                        return;\n-                    } else if (event.normalisedPath().length() == graphqlUiPath.length() + 1) {\n-                        event.reroute(graphqlUiPath + \"/index.html\");\n-                        return;\n-                    }\n-\n-                    staticHandler.handle(event);\n-                } else {\n-                    event.response().setStatusCode(404);\n-                    event.response().end();\n-                }\n-            }\n-        };\n+        if (runtimeConfig.enable) {\n+            return new SmallRyeGraphQLStaticHandler(graphqlUiFinalDestination, graphqlUiPath);\n+        } else {\n+            return new SmallRyeGraphQLNotFoundHandler();\n+        }\n     }\n \n     public void setupClDevMode(ShutdownContext shutdownContext) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg3NDgzNg==", "url": "https://github.com/quarkusio/quarkus/pull/13016#discussion_r515874836", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * If GraphQL UI should be enabled. By default, GraphQL UI is enabled.\n          \n          \n            \n                 * If GraphQL UI should be enabled. By default, GraphQL UI is enabled if it is included (see {@code always-include}).", "author": "gsmet", "createdAt": "2020-11-02T10:26:13Z", "path": "extensions/smallrye-graphql/runtime/src/main/java/io/quarkus/smallrye/graphql/runtime/SmallRyeGraphQLRuntimeConfig.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package io.quarkus.smallrye.graphql.runtime;\n+\n+import io.quarkus.runtime.annotations.ConfigItem;\n+import io.quarkus.runtime.annotations.ConfigPhase;\n+import io.quarkus.runtime.annotations.ConfigRoot;\n+\n+@ConfigRoot(name = \"smallrye-graphql\", phase = ConfigPhase.RUN_TIME)\n+public class SmallRyeGraphQLRuntimeConfig {\n+\n+    /**\n+     * If GraphQL UI should be enabled. By default, GraphQL UI is enabled.", "originalCommit": "85cc5e1b2976e0e44014d6a2655fd5a0e3069b23", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a7344c5df7e99910c0e0543f6172643a54d85205", "chunk": "diff --git a/extensions/smallrye-graphql/runtime/src/main/java/io/quarkus/smallrye/graphql/runtime/SmallRyeGraphQLRuntimeConfig.java b/extensions/smallrye-graphql/runtime/src/main/java/io/quarkus/smallrye/graphql/runtime/SmallRyeGraphQLRuntimeConfig.java\nindex 3ce8744dc2..5b5661db06 100644\n--- a/extensions/smallrye-graphql/runtime/src/main/java/io/quarkus/smallrye/graphql/runtime/SmallRyeGraphQLRuntimeConfig.java\n+++ b/extensions/smallrye-graphql/runtime/src/main/java/io/quarkus/smallrye/graphql/runtime/SmallRyeGraphQLRuntimeConfig.java\n\n@@ -8,7 +8,7 @@ import io.quarkus.runtime.annotations.ConfigRoot;\n public class SmallRyeGraphQLRuntimeConfig {\n \n     /**\n-     * If GraphQL UI should be enabled. By default, GraphQL UI is enabled.\n+     * If GraphQL UI should be enabled. By default, GraphQL UI is enabled if it is included (see {@code always-include}).\n      */\n     @ConfigItem(name = \"ui.enable\", defaultValue = \"true\")\n     boolean enable;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg3NTA0MQ==", "url": "https://github.com/quarkusio/quarkus/pull/13016#discussion_r515875041", "bodyText": "Same here about simplifying the logic.", "author": "gsmet", "createdAt": "2020-11-02T10:26:35Z", "path": "extensions/smallrye-graphql/runtime/src/main/java/io/quarkus/smallrye/graphql/runtime/SmallRyeGraphQLSchemaHandler.java", "diffHunk": "@@ -19,22 +19,46 @@\n     private static final String ALLOWED_METHODS = \"GET, OPTIONS\";\n     private static final String CONTENT_TYPE = \"text/plain; charset=UTF-8\";\n \n-    @Override\n-    public void handle(RoutingContext event) {\n-        GraphQLSchema graphQLSchema = CDI.current().select(GraphQLSchema.class).get();\n-        SchemaPrinter schemaPrinter = CDI.current().select(SchemaPrinter.class).get();\n+    private SmallRyeGraphQLRuntimeConfig graphQLRuntimeConfig;\n+\n+    public SmallRyeGraphQLSchemaHandler() {\n+    }\n \n-        String schemaString = schemaPrinter.print(graphQLSchema);\n+    public SmallRyeGraphQLSchemaHandler(SmallRyeGraphQLRuntimeConfig graphQLRuntimeConfig) {\n+        this.graphQLRuntimeConfig = graphQLRuntimeConfig;\n+    }\n+\n+    public SmallRyeGraphQLRuntimeConfig getSmallRyeGraphQLRuntimeConfig() {\n+        return graphQLRuntimeConfig;\n+    }\n \n+    public void setSmallRyeGraphQLRuntimeConfig(SmallRyeGraphQLRuntimeConfig graphQLRuntimeConfig) {\n+        this.graphQLRuntimeConfig = graphQLRuntimeConfig;\n+    }\n+\n+    @Override\n+    public void handle(RoutingContext event) {\n         HttpServerRequest request = event.request();\n         HttpServerResponse response = event.response();\n-        if (request.method().equals(HttpMethod.OPTIONS)) {\n-            response.headers().set(HttpHeaders.ALLOW, ALLOWED_METHODS);\n-        } else if (request.method().equals(HttpMethod.GET)) {\n-            response.headers().set(HttpHeaders.CONTENT_TYPE, CONTENT_TYPE);\n-            response.end(Buffer.buffer(schemaString));\n+\n+        if (graphQLRuntimeConfig.enable) {", "originalCommit": "85cc5e1b2976e0e44014d6a2655fd5a0e3069b23", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a7344c5df7e99910c0e0543f6172643a54d85205", "chunk": "diff --git a/extensions/smallrye-graphql/runtime/src/main/java/io/quarkus/smallrye/graphql/runtime/SmallRyeGraphQLSchemaHandler.java b/extensions/smallrye-graphql/runtime/src/main/java/io/quarkus/smallrye/graphql/runtime/SmallRyeGraphQLSchemaHandler.java\nindex 552ae00f1c..656150c562 100644\n--- a/extensions/smallrye-graphql/runtime/src/main/java/io/quarkus/smallrye/graphql/runtime/SmallRyeGraphQLSchemaHandler.java\n+++ b/extensions/smallrye-graphql/runtime/src/main/java/io/quarkus/smallrye/graphql/runtime/SmallRyeGraphQLSchemaHandler.java\n\n@@ -19,46 +19,23 @@ public class SmallRyeGraphQLSchemaHandler implements Handler<RoutingContext> {\n     private static final String ALLOWED_METHODS = \"GET, OPTIONS\";\n     private static final String CONTENT_TYPE = \"text/plain; charset=UTF-8\";\n \n-    private SmallRyeGraphQLRuntimeConfig graphQLRuntimeConfig;\n-\n-    public SmallRyeGraphQLSchemaHandler() {\n-    }\n-\n-    public SmallRyeGraphQLSchemaHandler(SmallRyeGraphQLRuntimeConfig graphQLRuntimeConfig) {\n-        this.graphQLRuntimeConfig = graphQLRuntimeConfig;\n-    }\n-\n-    public SmallRyeGraphQLRuntimeConfig getSmallRyeGraphQLRuntimeConfig() {\n-        return graphQLRuntimeConfig;\n-    }\n-\n-    public void setSmallRyeGraphQLRuntimeConfig(SmallRyeGraphQLRuntimeConfig graphQLRuntimeConfig) {\n-        this.graphQLRuntimeConfig = graphQLRuntimeConfig;\n-    }\n-\n     @Override\n     public void handle(RoutingContext event) {\n         HttpServerRequest request = event.request();\n         HttpServerResponse response = event.response();\n \n-        if (graphQLRuntimeConfig.enable) {\n-\n-            GraphQLSchema graphQLSchema = CDI.current().select(GraphQLSchema.class).get();\n-            SchemaPrinter schemaPrinter = CDI.current().select(SchemaPrinter.class).get();\n+        GraphQLSchema graphQLSchema = CDI.current().select(GraphQLSchema.class).get();\n+        SchemaPrinter schemaPrinter = CDI.current().select(SchemaPrinter.class).get();\n \n-            String schemaString = schemaPrinter.print(graphQLSchema);\n+        String schemaString = schemaPrinter.print(graphQLSchema);\n \n-            if (request.method().equals(HttpMethod.OPTIONS)) {\n-                response.headers().set(HttpHeaders.ALLOW, ALLOWED_METHODS);\n-            } else if (request.method().equals(HttpMethod.GET)) {\n-                response.headers().set(HttpHeaders.CONTENT_TYPE, CONTENT_TYPE);\n-                response.end(Buffer.buffer(schemaString));\n-            } else {\n-                response.setStatusCode(405).end();\n-            }\n+        if (request.method().equals(HttpMethod.OPTIONS)) {\n+            response.headers().set(HttpHeaders.ALLOW, ALLOWED_METHODS);\n+        } else if (request.method().equals(HttpMethod.GET)) {\n+            response.headers().set(HttpHeaders.CONTENT_TYPE, CONTENT_TYPE);\n+            response.end(Buffer.buffer(schemaString));\n         } else {\n-            response.setStatusCode(404);\n-            response.end();\n+            response.setStatusCode(405).end();\n         }\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg3NTM2Mw==", "url": "https://github.com/quarkusio/quarkus/pull/13016#discussion_r515875363", "bodyText": "All the comments I made for GraphQL also apply for the others.", "author": "gsmet", "createdAt": "2020-11-02T10:27:09Z", "path": "extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java", "diffHunk": "@@ -110,6 +113,9 @@ public boolean getAsBoolean() {\n \n     HealthBuildTimeConfig config;\n \n+    @Inject\n+    private LaunchModeBuildItem launch;", "originalCommit": "85cc5e1b2976e0e44014d6a2655fd5a0e3069b23", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a7344c5df7e99910c0e0543f6172643a54d85205", "chunk": "diff --git a/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java b/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java\nindex 2a1b9643c0..3979cf17b5 100644\n--- a/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java\n+++ b/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java\n\n@@ -106,16 +104,8 @@ class SmallRyeHealthProcessor {\n         }\n     }\n \n-    /**\n-     * The configuration for health checking.\n-     */\n-    SmallRyeHealthConfig health;\n-\n     HealthBuildTimeConfig config;\n \n-    @Inject\n-    private LaunchModeBuildItem launch;\n-\n     @BuildStep\n     void healthCheck(BuildProducer<AdditionalBeanBuildItem> buildItemBuildProducer,\n             List<HealthBuildItem> healthBuildItems) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg3NTY5MA==", "url": "https://github.com/quarkusio/quarkus/pull/13016#discussion_r515875690", "bodyText": "Again, let's avoid this. It has a default value, it needs to be clear to the users.", "author": "gsmet", "createdAt": "2020-11-02T10:27:42Z", "path": "extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthUIConfig.java", "diffHunk": "@@ -16,12 +18,7 @@\n      * Always include the UI. By default this will only be included in dev and test.\n      * Setting this to true will also include the UI in Prod\n      */\n-    @ConfigItem(defaultValue = \"false\")\n-    boolean alwaysInclude;\n+    @ConfigItem\n+    Optional<Boolean> alwaysInclude;", "originalCommit": "85cc5e1b2976e0e44014d6a2655fd5a0e3069b23", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkxMDUxMA==", "url": "https://github.com/quarkusio/quarkus/pull/13016#discussion_r515910510", "bodyText": "See comment above on this. Resolving here, let's discuss there, and once we have a way I'll update all", "author": "phillip-kruger", "createdAt": "2020-11-02T11:31:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg3NTY5MA=="}], "type": "inlineReview", "revised_code": {"commit": "a7344c5df7e99910c0e0543f6172643a54d85205", "chunk": "diff --git a/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthUIConfig.java b/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthUIConfig.java\nindex a5d90ab5b5..04a04c45ac 100644\n--- a/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthUIConfig.java\n+++ b/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthUIConfig.java\n\n@@ -18,7 +16,7 @@ public class SmallRyeHealthUIConfig {\n      * Always include the UI. By default this will only be included in dev and test.\n      * Setting this to true will also include the UI in Prod\n      */\n-    @ConfigItem\n-    Optional<Boolean> alwaysInclude;\n+    @ConfigItem(defaultValue = \"false\")\n+    boolean alwaysInclude;\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg3NzgxNg==", "url": "https://github.com/quarkusio/quarkus/pull/13016#discussion_r515877816", "bodyText": "It shouldn't be an Optional either.", "author": "gsmet", "createdAt": "2020-11-02T10:31:14Z", "path": "extensions/swagger-ui/deployment/src/main/java/io/quarkus/swaggerui/deployment/SwaggerUiConfig.java", "diffHunk": "@@ -0,0 +1,261 @@\n+package io.quarkus.swaggerui.deployment;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.OptionalInt;\n+\n+import io.quarkus.runtime.annotations.ConfigItem;\n+import io.quarkus.runtime.annotations.ConfigRoot;\n+import io.smallrye.openapi.ui.DocExpansion;\n+import io.smallrye.openapi.ui.HttpMethod;\n+import io.smallrye.openapi.ui.ThemeHref;\n+\n+@ConfigRoot\n+public class SwaggerUiConfig {\n+\n+    /**\n+     * The path where Swagger UI is available.\n+     * <p>\n+     * The value `/` is not allowed as it blocks the application from serving anything else.\n+     */\n+    @ConfigItem(defaultValue = \"/swagger-ui\")\n+    String path;\n+\n+    /**\n+     * If this should be included every time. By default this is only included when the application is running\n+     * in dev mode.\n+     */\n+    @ConfigItem\n+    Optional<Boolean> alwaysInclude;", "originalCommit": "85cc5e1b2976e0e44014d6a2655fd5a0e3069b23", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a7344c5df7e99910c0e0543f6172643a54d85205", "chunk": "diff --git a/extensions/swagger-ui/deployment/src/main/java/io/quarkus/swaggerui/deployment/SwaggerUiConfig.java b/extensions/swagger-ui/deployment/src/main/java/io/quarkus/swaggerui/deployment/SwaggerUiConfig.java\nindex 7f02c6e917..75c423b5a7 100644\n--- a/extensions/swagger-ui/deployment/src/main/java/io/quarkus/swaggerui/deployment/SwaggerUiConfig.java\n+++ b/extensions/swagger-ui/deployment/src/main/java/io/quarkus/swaggerui/deployment/SwaggerUiConfig.java\n\n@@ -26,8 +26,8 @@ public class SwaggerUiConfig {\n      * If this should be included every time. By default this is only included when the application is running\n      * in dev mode.\n      */\n-    @ConfigItem\n-    Optional<Boolean> alwaysInclude;\n+    @ConfigItem(defaultValue = \"false\")\n+    boolean alwaysInclude;\n \n     /**\n      * The urls that will be included as options. By default the OpenAPI path will be used.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg3ODE5NQ==", "url": "https://github.com/quarkusio/quarkus/pull/13016#discussion_r515878195", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * If Swagger UI is included, it should be enabled/disabled. By default, Swagger UI is enabled.\n          \n          \n            \n                 * If Swagger UI is included, it should be enabled/disabled. By default, Swagger UI is enabled if it is included (see {@code always-include}).", "author": "gsmet", "createdAt": "2020-11-02T10:31:53Z", "path": "extensions/swagger-ui/runtime/src/main/java/io/quarkus/swaggerui/runtime/SwaggerUiRuntimeConfig.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package io.quarkus.swaggerui.runtime;\n+\n+import io.quarkus.runtime.annotations.ConfigItem;\n+import io.quarkus.runtime.annotations.ConfigPhase;\n+import io.quarkus.runtime.annotations.ConfigRoot;\n+\n+@ConfigRoot(phase = ConfigPhase.RUN_TIME)\n+public class SwaggerUiRuntimeConfig {\n+\n+    /**\n+     * If Swagger UI is included, it should be enabled/disabled. By default, Swagger UI is enabled.", "originalCommit": "85cc5e1b2976e0e44014d6a2655fd5a0e3069b23", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a7344c5df7e99910c0e0543f6172643a54d85205", "chunk": "diff --git a/extensions/swagger-ui/runtime/src/main/java/io/quarkus/swaggerui/runtime/SwaggerUiRuntimeConfig.java b/extensions/swagger-ui/runtime/src/main/java/io/quarkus/swaggerui/runtime/SwaggerUiRuntimeConfig.java\nindex 914cf93ca4..41f1822224 100644\n--- a/extensions/swagger-ui/runtime/src/main/java/io/quarkus/swaggerui/runtime/SwaggerUiRuntimeConfig.java\n+++ b/extensions/swagger-ui/runtime/src/main/java/io/quarkus/swaggerui/runtime/SwaggerUiRuntimeConfig.java\n\n@@ -8,7 +8,8 @@ import io.quarkus.runtime.annotations.ConfigRoot;\n public class SwaggerUiRuntimeConfig {\n \n     /**\n-     * If Swagger UI is included, it should be enabled/disabled. By default, Swagger UI is enabled.\n+     * If Swagger UI is included, it should be enabled/disabled. By default, Swagger UI is enabled if it is included (see\n+     * {@code always-include}).\n      */\n     @ConfigItem(defaultValue = \"true\")\n     boolean enable;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg4MDM3OA==", "url": "https://github.com/quarkusio/quarkus/pull/13016#discussion_r515880378", "bodyText": "Another option would be to return two different handlers depending on the runtime config. One just returning 404 and the other properly handling the requests.", "author": "gsmet", "createdAt": "2020-11-02T10:35:39Z", "path": "extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java", "diffHunk": "@@ -339,59 +345,69 @@ public void transform(TransformationContext ctx) {\n     // UI\n \n     @BuildStep\n-    @Record(ExecutionTime.STATIC_INIT)\n     void registerUiExtension(\n-            BuildProducer<RouteBuildItem> routeProducer,\n             BuildProducer<GeneratedResourceBuildItem> generatedResourceProducer,\n             BuildProducer<NativeImageResourceBuildItem> nativeImageResourceProducer,\n             BuildProducer<NotFoundPageDisplayableEndpointBuildItem> notFoundPageDisplayableEndpointProducer,\n-            SmallRyeHealthRecorder recorder,\n-            LaunchModeBuildItem launchMode,\n             HttpRootPathBuildItem httpRootPath,\n-            CurateOutcomeBuildItem curateOutcomeBuildItem) throws Exception {\n+            CurateOutcomeBuildItem curateOutcomeBuildItem,\n+            BuildProducer<SmallRyeHealthBuildItem> smallRyeHealthBuildProducer) throws Exception {\n \n-        if (!health.ui.enable) {\n-            return;\n-        }\n-        if (\"/\".equals(health.ui.rootPath)) {\n-            throw new ConfigurationError(\n-                    \"quarkus.smallrye-health.root-path-ui was set to \\\"/\\\", this is not allowed as it blocks the application from serving anything else.\");\n-        }\n+        if (shouldInclude()) {\n \n-        String healthPath = httpRootPath.adjustPath(health.rootPath);\n+            if (\"/\".equals(health.ui.rootPath)) {\n+                throw new ConfigurationError(\n+                        \"quarkus.smallrye-health.root-path-ui was set to \\\"/\\\", this is not allowed as it blocks the application from serving anything else.\");\n+            }\n \n-        AppArtifact artifact = WebJarUtil.getAppArtifact(curateOutcomeBuildItem, HEALTH_UI_WEBJAR_GROUP_ID,\n-                HEALTH_UI_WEBJAR_ARTIFACT_ID);\n+            String healthPath = httpRootPath.adjustPath(health.rootPath);\n \n-        if (launchMode.getLaunchMode().isDevOrTest()) {\n-            Path tempPath = WebJarUtil.devOrTest(curateOutcomeBuildItem, launchMode, artifact, HEALTH_UI_WEBJAR_PREFIX);\n-            updateApiUrl(tempPath.resolve(FILE_TO_UPDATE), healthPath);\n+            AppArtifact artifact = WebJarUtil.getAppArtifact(curateOutcomeBuildItem, HEALTH_UI_WEBJAR_GROUP_ID,\n+                    HEALTH_UI_WEBJAR_ARTIFACT_ID);\n \n-            Handler<RoutingContext> handler = recorder.uiHandler(tempPath.toAbsolutePath().toString(),\n-                    httpRootPath.adjustPath(health.ui.rootPath));\n-            routeProducer.produce(new RouteBuildItem(health.ui.rootPath, handler));\n-            routeProducer.produce(new RouteBuildItem(health.ui.rootPath + \"/*\", handler));\n-            notFoundPageDisplayableEndpointProducer\n-                    .produce(new NotFoundPageDisplayableEndpointBuildItem(health.ui.rootPath + \"/\"));\n-        } else if (health.ui.alwaysInclude) {\n-            Map<String, byte[]> files = WebJarUtil.production(curateOutcomeBuildItem, artifact, HEALTH_UI_WEBJAR_PREFIX);\n-\n-            for (Map.Entry<String, byte[]> file : files.entrySet()) {\n-\n-                String fileName = file.getKey();\n-                byte[] content = file.getValue();\n-                if (fileName.endsWith(FILE_TO_UPDATE)) {\n-                    content = updateApiUrl(new String(content, StandardCharsets.UTF_8), healthPath)\n-                            .getBytes(StandardCharsets.UTF_8);\n+            if (launch.getLaunchMode().isDevOrTest()) {\n+                Path tempPath = WebJarUtil.devOrTest(curateOutcomeBuildItem, launch, artifact, HEALTH_UI_WEBJAR_PREFIX);\n+                updateApiUrl(tempPath.resolve(FILE_TO_UPDATE), healthPath);\n+\n+                smallRyeHealthBuildProducer.produce(new SmallRyeHealthBuildItem(tempPath.toAbsolutePath().toString(),\n+                        httpRootPath.adjustPath(health.ui.rootPath)));\n+\n+                notFoundPageDisplayableEndpointProducer\n+                        .produce(new NotFoundPageDisplayableEndpointBuildItem(health.ui.rootPath + \"/\"));\n+            } else {\n+                Map<String, byte[]> files = WebJarUtil.production(curateOutcomeBuildItem, artifact, HEALTH_UI_WEBJAR_PREFIX);\n+\n+                for (Map.Entry<String, byte[]> file : files.entrySet()) {\n+\n+                    String fileName = file.getKey();\n+                    byte[] content = file.getValue();\n+                    if (fileName.endsWith(FILE_TO_UPDATE)) {\n+                        content = updateApiUrl(new String(content, StandardCharsets.UTF_8), healthPath)\n+                                .getBytes(StandardCharsets.UTF_8);\n+                    }\n+                    fileName = HEALTH_UI_FINAL_DESTINATION + \"/\" + fileName;\n+\n+                    generatedResourceProducer.produce(new GeneratedResourceBuildItem(fileName, content));\n+                    nativeImageResourceProducer.produce(new NativeImageResourceBuildItem(fileName));\n                 }\n-                fileName = HEALTH_UI_FINAL_DESTINATION + \"/\" + fileName;\n \n-                generatedResourceProducer.produce(new GeneratedResourceBuildItem(fileName, content));\n-                nativeImageResourceProducer.produce(new NativeImageResourceBuildItem(fileName));\n+                smallRyeHealthBuildProducer.produce(new SmallRyeHealthBuildItem(HEALTH_UI_FINAL_DESTINATION,\n+                        httpRootPath.adjustPath(health.ui.rootPath)));\n             }\n+        }\n+    }\n \n-            Handler<RoutingContext> handler = recorder\n-                    .uiHandler(HEALTH_UI_FINAL_DESTINATION, httpRootPath.adjustPath(health.ui.rootPath));\n+    @BuildStep\n+    @Record(ExecutionTime.RUNTIME_INIT)\n+    void registerGraphQLUiHandler(\n+            BuildProducer<RouteBuildItem> routeProducer,\n+            SmallRyeHealthRecorder recorder,\n+            SmallRyeHealthRuntimeConfig runtimeConfig,\n+            SmallRyeHealthBuildItem smallRyeHealthBuildItem) throws Exception {\n+\n+        if (shouldInclude()) {\n+            Handler<RoutingContext> handler = recorder.uiHandler(smallRyeHealthBuildItem.getHealthUiFinalDestination(),", "originalCommit": "85cc5e1b2976e0e44014d6a2655fd5a0e3069b23", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAzOTU5OA==", "url": "https://github.com/quarkusio/quarkus/pull/13016#discussion_r516039598", "bodyText": "I have done this for all of them", "author": "phillip-kruger", "createdAt": "2020-11-02T15:12:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg4MDM3OA=="}], "type": "inlineReview", "revised_code": {"commit": "a7344c5df7e99910c0e0543f6172643a54d85205", "chunk": "diff --git a/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java b/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java\nindex 2a1b9643c0..3979cf17b5 100644\n--- a/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java\n+++ b/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java\n\n@@ -349,31 +350,33 @@ class SmallRyeHealthProcessor {\n             BuildProducer<GeneratedResourceBuildItem> generatedResourceProducer,\n             BuildProducer<NativeImageResourceBuildItem> nativeImageResourceProducer,\n             BuildProducer<NotFoundPageDisplayableEndpointBuildItem> notFoundPageDisplayableEndpointProducer,\n+            BuildProducer<SmallRyeHealthBuildItem> smallRyeHealthBuildProducer,\n             HttpRootPathBuildItem httpRootPath,\n+            SmallRyeHealthConfig healthConfig,\n             CurateOutcomeBuildItem curateOutcomeBuildItem,\n-            BuildProducer<SmallRyeHealthBuildItem> smallRyeHealthBuildProducer) throws Exception {\n+            LaunchModeBuildItem launchMode) throws Exception {\n \n-        if (shouldInclude()) {\n+        if (shouldInclude(launchMode, healthConfig)) {\n \n-            if (\"/\".equals(health.ui.rootPath)) {\n+            if (\"/\".equals(healthConfig.ui.rootPath)) {\n                 throw new ConfigurationError(\n                         \"quarkus.smallrye-health.root-path-ui was set to \\\"/\\\", this is not allowed as it blocks the application from serving anything else.\");\n             }\n \n-            String healthPath = httpRootPath.adjustPath(health.rootPath);\n+            String healthPath = httpRootPath.adjustPath(healthConfig.rootPath);\n \n             AppArtifact artifact = WebJarUtil.getAppArtifact(curateOutcomeBuildItem, HEALTH_UI_WEBJAR_GROUP_ID,\n                     HEALTH_UI_WEBJAR_ARTIFACT_ID);\n \n-            if (launch.getLaunchMode().isDevOrTest()) {\n-                Path tempPath = WebJarUtil.devOrTest(curateOutcomeBuildItem, launch, artifact, HEALTH_UI_WEBJAR_PREFIX);\n+            if (launchMode.getLaunchMode().isDevOrTest()) {\n+                Path tempPath = WebJarUtil.devOrTest(curateOutcomeBuildItem, launchMode, artifact, HEALTH_UI_WEBJAR_PREFIX);\n                 updateApiUrl(tempPath.resolve(FILE_TO_UPDATE), healthPath);\n \n                 smallRyeHealthBuildProducer.produce(new SmallRyeHealthBuildItem(tempPath.toAbsolutePath().toString(),\n-                        httpRootPath.adjustPath(health.ui.rootPath)));\n+                        httpRootPath.adjustPath(healthConfig.ui.rootPath)));\n \n                 notFoundPageDisplayableEndpointProducer\n-                        .produce(new NotFoundPageDisplayableEndpointBuildItem(health.ui.rootPath + \"/\"));\n+                        .produce(new NotFoundPageDisplayableEndpointBuildItem(healthConfig.ui.rootPath + \"/\"));\n             } else {\n                 Map<String, byte[]> files = WebJarUtil.production(curateOutcomeBuildItem, artifact, HEALTH_UI_WEBJAR_PREFIX);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg4MDkyNA==", "url": "https://github.com/quarkusio/quarkus/pull/13016#discussion_r515880924", "bodyText": "It would be better if the handler was created by the recorder. And you could use the same technique I mention below returning two different handlers depending on the config.", "author": "gsmet", "createdAt": "2020-11-02T10:36:34Z", "path": "extensions/smallrye-openapi/deployment/src/main/java/io/quarkus/smallrye/openapi/deployment/SmallRyeOpenApiProcessor.java", "diffHunk": "@@ -159,7 +162,8 @@ RouteBuildItem handler(LaunchModeBuildItem launch,\n             recorder.setupClDevMode(shutdownContext);\n             displayableEndpoints.produce(new NotFoundPageDisplayableEndpointBuildItem(openApiConfig.path));\n         }\n-        return new RouteBuildItem(openApiConfig.path, new OpenApiHandler(), HandlerType.BLOCKING);\n+        OpenApiHandler openApiHandler = new OpenApiHandler(openApiRuntimeConfig);", "originalCommit": "85cc5e1b2976e0e44014d6a2655fd5a0e3069b23", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAzOTcwNg==", "url": "https://github.com/quarkusio/quarkus/pull/13016#discussion_r516039706", "bodyText": "Done", "author": "phillip-kruger", "createdAt": "2020-11-02T15:12:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg4MDkyNA=="}], "type": "inlineReview", "revised_code": {"commit": "a7344c5df7e99910c0e0543f6172643a54d85205", "chunk": "diff --git a/extensions/smallrye-openapi/deployment/src/main/java/io/quarkus/smallrye/openapi/deployment/SmallRyeOpenApiProcessor.java b/extensions/smallrye-openapi/deployment/src/main/java/io/quarkus/smallrye/openapi/deployment/SmallRyeOpenApiProcessor.java\nindex d62d39a22c..fee344e8eb 100644\n--- a/extensions/smallrye-openapi/deployment/src/main/java/io/quarkus/smallrye/openapi/deployment/SmallRyeOpenApiProcessor.java\n+++ b/extensions/smallrye-openapi/deployment/src/main/java/io/quarkus/smallrye/openapi/deployment/SmallRyeOpenApiProcessor.java\n\n@@ -162,8 +162,9 @@ public class SmallRyeOpenApiProcessor {\n             recorder.setupClDevMode(shutdownContext);\n             displayableEndpoints.produce(new NotFoundPageDisplayableEndpointBuildItem(openApiConfig.path));\n         }\n-        OpenApiHandler openApiHandler = new OpenApiHandler(openApiRuntimeConfig);\n-        return new RouteBuildItem(openApiConfig.path, openApiHandler, HandlerType.BLOCKING);\n+\n+        Handler<RoutingContext> handler = recorder.handler(openApiRuntimeConfig);\n+        return new RouteBuildItem(openApiConfig.path, handler, HandlerType.BLOCKING);\n     }\n \n     @BuildStep\n"}}, {"oid": "a7344c5df7e99910c0e0543f6172643a54d85205", "url": "https://github.com/quarkusio/quarkus/commit/a7344c5df7e99910c0e0543f6172643a54d85205", "message": "Allow disabling the UIs in Runtime.\n\nSigned-off-by: Phillip Kruger <phillip.kruger@gmail.com>", "committedDate": "2020-11-03T13:41:08Z", "type": "commit"}]}