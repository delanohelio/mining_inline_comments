{"pr_number": 9728, "pr_title": "feature: reading namespaced ConfigMaps", "pr_createdAt": "2020-06-02T14:46:49Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/9728", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkzNjM1MQ==", "url": "https://github.com/quarkusio/quarkus/pull/9728#discussion_r433936351", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Namespace to look for in\n          \n          \n            \n                 * Namespace to look for config maps", "author": "machi1990", "createdAt": "2020-06-02T14:49:59Z", "path": "extensions/kubernetes-config/runtime/src/main/java/io/quarkus/kubernetes/client/runtime/KubernetesConfigSourceConfig.java", "diffHunk": "@@ -28,4 +28,10 @@\n     @ConfigItem\n     public Optional<List<String>> configMaps;\n \n+    /**\n+     * Namespace to look for in", "originalCommit": "4d10a62eeb59f81252761f45bba0ab3f23f4c626", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0ed026ef5c277ccb3795fab1efcf6a6ddbdd09a4", "chunk": "diff --git a/extensions/kubernetes-config/runtime/src/main/java/io/quarkus/kubernetes/client/runtime/KubernetesConfigSourceConfig.java b/extensions/kubernetes-config/runtime/src/main/java/io/quarkus/kubernetes/client/runtime/KubernetesConfigSourceConfig.java\nindex ae88c0eb62..b52a0eae3f 100644\n--- a/extensions/kubernetes-config/runtime/src/main/java/io/quarkus/kubernetes/client/runtime/KubernetesConfigSourceConfig.java\n+++ b/extensions/kubernetes-config/runtime/src/main/java/io/quarkus/kubernetes/client/runtime/KubernetesConfigSourceConfig.java\n\n@@ -29,9 +29,9 @@ public class KubernetesConfigSourceConfig {\n     public Optional<List<String>> configMaps;\n \n     /**\n-     * Namespace to look for in\n+     * Namespace to look for config maps\n      */\n     @ConfigItem\n-    public String namespace;\n+    public Optional<String> namespace;\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAzOTE3OQ==", "url": "https://github.com/quarkusio/quarkus/pull/9728#discussion_r434039179", "bodyText": "This needs to be Optional", "author": "geoand", "createdAt": "2020-06-02T17:11:45Z", "path": "extensions/kubernetes-config/runtime/src/main/java/io/quarkus/kubernetes/client/runtime/KubernetesConfigSourceConfig.java", "diffHunk": "@@ -28,4 +28,10 @@\n     @ConfigItem\n     public Optional<List<String>> configMaps;\n \n+    /**\n+     * Namespace to look for in\n+     */\n+    @ConfigItem\n+    public String namespace;", "originalCommit": "4d10a62eeb59f81252761f45bba0ab3f23f4c626", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUxMDg0OA==", "url": "https://github.com/quarkusio/quarkus/pull/9728#discussion_r441510848", "bodyText": "ok", "author": "aureamunoz", "createdAt": "2020-06-17T12:36:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAzOTE3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "0ed026ef5c277ccb3795fab1efcf6a6ddbdd09a4", "chunk": "diff --git a/extensions/kubernetes-config/runtime/src/main/java/io/quarkus/kubernetes/client/runtime/KubernetesConfigSourceConfig.java b/extensions/kubernetes-config/runtime/src/main/java/io/quarkus/kubernetes/client/runtime/KubernetesConfigSourceConfig.java\nindex ae88c0eb62..b52a0eae3f 100644\n--- a/extensions/kubernetes-config/runtime/src/main/java/io/quarkus/kubernetes/client/runtime/KubernetesConfigSourceConfig.java\n+++ b/extensions/kubernetes-config/runtime/src/main/java/io/quarkus/kubernetes/client/runtime/KubernetesConfigSourceConfig.java\n\n@@ -29,9 +29,9 @@ public class KubernetesConfigSourceConfig {\n     public Optional<List<String>> configMaps;\n \n     /**\n-     * Namespace to look for in\n+     * Namespace to look for config maps\n      */\n     @ConfigItem\n-    public String namespace;\n+    public Optional<String> namespace;\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAzOTIxMw==", "url": "https://github.com/quarkusio/quarkus/pull/9728#discussion_r434039213", "bodyText": "We probably don't want to do this, we would ideally just check if the Optional namespace property is set and act on way or the other", "author": "geoand", "createdAt": "2020-06-02T17:11:49Z", "path": "extensions/kubernetes-config/runtime/src/main/java/io/quarkus/kubernetes/client/runtime/KubernetesConfigSourceProvider.java", "diffHunk": "@@ -49,12 +49,25 @@ public KubernetesConfigSourceProvider(KubernetesConfigSourceConfig config, Kuber\n                 if (log.isDebugEnabled()) {\n                     log.debug(\"Attempting to read ConfigMap \" + configMapName);\n                 }\n-                ConfigMap configMap = client.configMaps().withName(configMapName).get();\n+                ConfigMap configMap = client.configMaps().inNamespace(config.namespace).withName(configMapName).get();\n                 if (configMap == null) {\n-                    logMissingOrFail(configMapName, client.getNamespace(), \"ConfigMap\", config.failOnMissingConfig);\n+                    log.debug(\"ConfigMap \" + configMapName + \" does not exist in configured namespace \" + config.namespace\n+                            + \". Trying to read it from the current workspace \" + client.getNamespace());\n+                    configMap = client.configMaps().withName(configMapName).get();", "originalCommit": "4d10a62eeb59f81252761f45bba0ab3f23f4c626", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg1MzI0MQ==", "url": "https://github.com/quarkusio/quarkus/pull/9728#discussion_r441853241", "bodyText": "Sorry about the delay. So if namespace property is set we search for the configmap in that namespace and logMissingOrFail if it is not founded, right?", "author": "aureamunoz", "createdAt": "2020-06-17T21:48:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAzOTIxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3ODc3NA==", "url": "https://github.com/quarkusio/quarkus/pull/9728#discussion_r441978774", "bodyText": "Yeah", "author": "geoand", "createdAt": "2020-06-18T05:37:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAzOTIxMw=="}], "type": "inlineReview", "revised_code": {"commit": "0ed026ef5c277ccb3795fab1efcf6a6ddbdd09a4", "chunk": "diff --git a/extensions/kubernetes-config/runtime/src/main/java/io/quarkus/kubernetes/client/runtime/KubernetesConfigSourceProvider.java b/extensions/kubernetes-config/runtime/src/main/java/io/quarkus/kubernetes/client/runtime/KubernetesConfigSourceProvider.java\nindex 5bb601b85d..e33756b626 100644\n--- a/extensions/kubernetes-config/runtime/src/main/java/io/quarkus/kubernetes/client/runtime/KubernetesConfigSourceProvider.java\n+++ b/extensions/kubernetes-config/runtime/src/main/java/io/quarkus/kubernetes/client/runtime/KubernetesConfigSourceProvider.java\n\n@@ -49,25 +49,20 @@ class KubernetesConfigSourceProvider implements ConfigSourceProvider {\n                 if (log.isDebugEnabled()) {\n                     log.debug(\"Attempting to read ConfigMap \" + configMapName);\n                 }\n-                ConfigMap configMap = client.configMaps().inNamespace(config.namespace).withName(configMapName).get();\n-                if (configMap == null) {\n-                    log.debug(\"ConfigMap \" + configMapName + \" does not exist in configured namespace \" + config.namespace\n-                            + \". Trying to read it from the current workspace \" + client.getNamespace());\n+                ConfigMap configMap = null;\n+                String namespace = \"\";\n+                if (config.namespace.isPresent()) {\n+                    namespace = config.namespace.get();\n+                    configMap = client.configMaps().inNamespace(namespace).withName(configMapName).get();\n+                } else {\n+                    namespace = client.getNamespace();\n                     configMap = client.configMaps().withName(configMapName).get();\n-                    if (configMap == null) {\n-                        logMissingOrFail(configMapName, client.getNamespace(), \"ConfigMap\", config.failOnMissingConfig);\n-                    } else {\n-                        result.addAll(\n-                                configMapConfigSourceUtil.toConfigSources(configMap.getMetadata().getName(),\n-                                        configMap.getData()));\n-                        if (log.isDebugEnabled()) {\n-                            log.debug(\"Done reading ConfigMap \" + configMap);\n-                        }\n-                    }\n+                }\n+                if (configMap == null) {\n+                    logMissingOrFail(configMapName, namespace, \"ConfigMap\", config.failOnMissingConfig);\n                 } else {\n                     result.addAll(\n-                            configMapConfigSourceUtil.toConfigSources(configMap.getMetadata().getName(),\n-                                    configMap.getData()));\n+                            configMapConfigSourceUtil.toConfigSources(configMap.getMetadata().getName(), configMap.getData()));\n                     if (log.isDebugEnabled()) {\n                         log.debug(\"Done reading ConfigMap \" + configMap);\n                     }\n"}}, {"oid": "0ed026ef5c277ccb3795fab1efcf6a6ddbdd09a4", "url": "https://github.com/quarkusio/quarkus/commit/0ed026ef5c277ccb3795fab1efcf6a6ddbdd09a4", "message": "code review and tests", "committedDate": "2020-06-23T07:45:00Z", "type": "forcePushed"}, {"oid": "2daa9b0e43fe621e57e8bd9e257028fa695ced95", "url": "https://github.com/quarkusio/quarkus/commit/2daa9b0e43fe621e57e8bd9e257028fa695ced95", "message": "format", "committedDate": "2020-06-25T09:24:56Z", "type": "forcePushed"}, {"oid": "f7362006f04964c522f6aab952003334de8d7158", "url": "https://github.com/quarkusio/quarkus/commit/f7362006f04964c522f6aab952003334de8d7158", "message": "feature: reading namespaced ConfigMaps", "committedDate": "2020-06-26T13:13:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE5MjA3Mw==", "url": "https://github.com/quarkusio/quarkus/pull/9728#discussion_r446192073", "bodyText": "Minor nitpick: I don't think you need to specify default values here", "author": "geoand", "createdAt": "2020-06-26T13:43:04Z", "path": "extensions/kubernetes-config/runtime/src/main/java/io/quarkus/kubernetes/client/runtime/KubernetesConfigSourceProvider.java", "diffHunk": "@@ -49,9 +49,17 @@ public KubernetesConfigSourceProvider(KubernetesConfigSourceConfig config, Kuber\n                 if (log.isDebugEnabled()) {\n                     log.debug(\"Attempting to read ConfigMap \" + configMapName);\n                 }\n-                ConfigMap configMap = client.configMaps().withName(configMapName).get();\n+                ConfigMap configMap = null;\n+                String namespace = \"\";", "originalCommit": "f7362006f04964c522f6aab952003334de8d7158", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cbfa0ccc42ad8e3c351b327023e74f3e0bbc2101", "chunk": "diff --git a/extensions/kubernetes-config/runtime/src/main/java/io/quarkus/kubernetes/client/runtime/KubernetesConfigSourceProvider.java b/extensions/kubernetes-config/runtime/src/main/java/io/quarkus/kubernetes/client/runtime/KubernetesConfigSourceProvider.java\nindex e33756b626..53a28645fc 100644\n--- a/extensions/kubernetes-config/runtime/src/main/java/io/quarkus/kubernetes/client/runtime/KubernetesConfigSourceProvider.java\n+++ b/extensions/kubernetes-config/runtime/src/main/java/io/quarkus/kubernetes/client/runtime/KubernetesConfigSourceProvider.java\n\n@@ -49,8 +49,8 @@ class KubernetesConfigSourceProvider implements ConfigSourceProvider {\n                 if (log.isDebugEnabled()) {\n                     log.debug(\"Attempting to read ConfigMap \" + configMapName);\n                 }\n-                ConfigMap configMap = null;\n-                String namespace = \"\";\n+                ConfigMap configMap;\n+                String namespace;\n                 if (config.namespace.isPresent()) {\n                     namespace = config.namespace.get();\n                     configMap = client.configMaps().inNamespace(namespace).withName(configMapName).get();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE5MjUyOA==", "url": "https://github.com/quarkusio/quarkus/pull/9728#discussion_r446192528", "bodyText": "I assume you want to remove this?", "author": "geoand", "createdAt": "2020-06-26T13:43:53Z", "path": "extensions/kubernetes-config/runtime/src/test/java/io/quarkus/kubernetes/client/runtime/KubernetesConfigSourceProviderTest.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package io.quarkus.kubernetes.client.runtime;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.fail;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.assertj.core.util.Lists;\n+import org.eclipse.microprofile.config.spi.ConfigSource;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+import io.fabric8.kubernetes.api.model.ConfigMap;\n+import io.fabric8.kubernetes.api.model.ConfigMapBuilder;\n+import io.fabric8.kubernetes.api.model.ConfigMapList;\n+import io.fabric8.kubernetes.api.model.DoneableConfigMap;\n+import io.fabric8.kubernetes.client.Config;\n+import io.fabric8.kubernetes.client.KubernetesClient;\n+import io.fabric8.kubernetes.client.dsl.MixedOperation;\n+import io.fabric8.kubernetes.client.dsl.NonNamespaceOperation;\n+import io.fabric8.kubernetes.client.dsl.Resource;\n+\n+public class KubernetesConfigSourceProviderTest {\n+\n+    @Test\n+    public void testEmptyConfigSources() {\n+        KubernetesConfigSourceConfig config = defaultConfig();\n+        KubernetesClient kubernetesClient = Mockito.mock(KubernetesClient.class);\n+        KubernetesConfigSourceProvider kcsp = new KubernetesConfigSourceProvider(config, kubernetesClient);\n+        Iterable<ConfigSource> configSources = kcsp.getConfigSources(null);\n+        assertThat(configSources).isEmpty();\n+    }\n+\n+    @Test\n+    public void testRetrieveNamespacedConfigSources() {\n+        KubernetesConfigSourceConfig config = defaultConfig();\n+        config.namespace = Optional.of(\"demo\");\n+        List<String> configMaps = Lists.list(\"cm1\");\n+        config.configMaps = Optional.of(configMaps);\n+\n+        ConfigMap configMap = configMapBuilder(\"cm1\")\n+                .addToData(\"some.key\", \"someValue\").addToData(\"some.other\", \"someOtherValue\").build();\n+\n+        KubernetesClient kubernetesClient = Mockito.mock(KubernetesClient.class);\n+        stubNamespacedConfigMap(kubernetesClient, configMap, \"cm1\");\n+\n+        KubernetesConfigSourceProvider kcsp = new KubernetesConfigSourceProvider(config, kubernetesClient);\n+        Iterable<ConfigSource> configSources = kcsp.getConfigSources(null);\n+        assertThat(configSources).isNotEmpty();\n+        ConfigSource next = configSources.iterator().next();\n+        //        assertThat(next.getName()).isEqualTo(\"cm1\");", "originalCommit": "f7362006f04964c522f6aab952003334de8d7158", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cbfa0ccc42ad8e3c351b327023e74f3e0bbc2101", "chunk": "diff --git a/extensions/kubernetes-config/runtime/src/test/java/io/quarkus/kubernetes/client/runtime/KubernetesConfigSourceProviderTest.java b/extensions/kubernetes-config/runtime/src/test/java/io/quarkus/kubernetes/client/runtime/KubernetesConfigSourceProviderTest.java\nindex 4617e4b4bf..f0c075ab49 100644\n--- a/extensions/kubernetes-config/runtime/src/test/java/io/quarkus/kubernetes/client/runtime/KubernetesConfigSourceProviderTest.java\n+++ b/extensions/kubernetes-config/runtime/src/test/java/io/quarkus/kubernetes/client/runtime/KubernetesConfigSourceProviderTest.java\n\n@@ -51,7 +51,6 @@ public class KubernetesConfigSourceProviderTest {\n         Iterable<ConfigSource> configSources = kcsp.getConfigSources(null);\n         assertThat(configSources).isNotEmpty();\n         ConfigSource next = configSources.iterator().next();\n-        //        assertThat(next.getName()).isEqualTo(\"cm1\");\n         assertThat(next.getProperties()).containsKeys(\"some.key\", \"some.other\");\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE5MzcwMQ==", "url": "https://github.com/quarkusio/quarkus/pull/9728#discussion_r446193701", "bodyText": "I don't think the assertions belong here, consider moving them to a decicated class please", "author": "geoand", "createdAt": "2020-06-26T13:45:48Z", "path": "integration-tests/kubernetes-client/src/test/java/io/quarkus/it/kubernetes/client/CustomKubernetesMockServerTestResource.java", "diffHunk": "@@ -22,6 +26,24 @@ public void configureMockServer(KubernetesMockServer mockServer) {\n                 .andReturn(200, configMapBuilder(\"cmap2\")\n                         .addToData(\"application.yaml\", \"some:\\n  prop4: val4\").build())\n                 .once();\n+\n+        mockServer.expect().get().withPath(\"/api/v1/namespaces/demo/configmaps/cmap3\")\n+                .andReturn(200, configMapBuilder(\"cmap3\")\n+                        .addToData(\"dummy\", \"dummyFromDemo\")\n+                        .addToData(\"some.prop1\", \"val1FromDemo\")\n+                        .addToData(\"some.prop2\", \"val2FromDemo\")\n+                        .addToData(\"some.prop5\", \"val5FromDemo\")\n+                        .addToData(\"application.properties\", \"some.prop3=val3FromDemo\")\n+                        .addToData(\"application.yaml\", \"some:\\n  prop4: val4FromDemo\").build())\n+                .once();\n+    }\n+\n+    public static void assertProperty(String propertyName, String expectedValue) {", "originalCommit": "f7362006f04964c522f6aab952003334de8d7158", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjIwODAyMA==", "url": "https://github.com/quarkusio/quarkus/pull/9728#discussion_r446208020", "bodyText": "yes, I moved to use it from other place and finally forgot undo the change.", "author": "aureamunoz", "createdAt": "2020-06-26T14:10:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE5MzcwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "cbfa0ccc42ad8e3c351b327023e74f3e0bbc2101", "chunk": "diff --git a/integration-tests/kubernetes-client/src/test/java/io/quarkus/it/kubernetes/client/CustomKubernetesMockServerTestResource.java b/integration-tests/kubernetes-client/src/test/java/io/quarkus/it/kubernetes/client/CustomKubernetesMockServerTestResource.java\nindex af3c9fe8bf..a5c9636793 100644\n--- a/integration-tests/kubernetes-client/src/test/java/io/quarkus/it/kubernetes/client/CustomKubernetesMockServerTestResource.java\n+++ b/integration-tests/kubernetes-client/src/test/java/io/quarkus/it/kubernetes/client/CustomKubernetesMockServerTestResource.java\n\n@@ -38,14 +35,6 @@ public class CustomKubernetesMockServerTestResource extends KubernetesMockServer\n                 .once();\n     }\n \n-    public static void assertProperty(String propertyName, String expectedValue) {\n-        given()\n-                .when().get(\"/configMapProperties/\" + propertyName)\n-                .then()\n-                .statusCode(200)\n-                .body(is(expectedValue));\n-    }\n-\n     private ConfigMapBuilder configMapBuilder(String name) {\n         return new ConfigMapBuilder().withNewMetadata()\n                 .withName(name).endMetadata();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE5NDExNA==", "url": "https://github.com/quarkusio/quarkus/pull/9728#discussion_r446194114", "bodyText": "We probably don't want this", "author": "geoand", "createdAt": "2020-06-26T13:46:34Z", "path": "test-framework/kubernetes-client/src/main/java/io/quarkus/test/kubernetes/client/KubernetesMockServerTestResource.java", "diffHunk": "@@ -23,6 +23,8 @@\n \n         mockServer = new KubernetesMockServer(useHttps());\n         mockServer.init();\n+        System.out.println(\"[INFO] Kubernetes Mock server started; server status: \" + mockServer.getHostName() + \":\"", "originalCommit": "f7362006f04964c522f6aab952003334de8d7158", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjIwODEzMQ==", "url": "https://github.com/quarkusio/quarkus/pull/9728#discussion_r446208131", "bodyText": "true", "author": "aureamunoz", "createdAt": "2020-06-26T14:10:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE5NDExNA=="}], "type": "inlineReview", "revised_code": {"commit": "cbfa0ccc42ad8e3c351b327023e74f3e0bbc2101", "chunk": "diff --git a/test-framework/kubernetes-client/src/main/java/io/quarkus/test/kubernetes/client/KubernetesMockServerTestResource.java b/test-framework/kubernetes-client/src/main/java/io/quarkus/test/kubernetes/client/KubernetesMockServerTestResource.java\nindex 2b3cfc9156..838dee849e 100644\n--- a/test-framework/kubernetes-client/src/main/java/io/quarkus/test/kubernetes/client/KubernetesMockServerTestResource.java\n+++ b/test-framework/kubernetes-client/src/main/java/io/quarkus/test/kubernetes/client/KubernetesMockServerTestResource.java\n\n@@ -23,8 +23,6 @@ public class KubernetesMockServerTestResource implements QuarkusTestResourceLife\n \n         mockServer = new KubernetesMockServer(useHttps());\n         mockServer.init();\n-        System.out.println(\"[INFO] Kubernetes Mock server started; server status: \" + mockServer.getHostName() + \":\"\n-                + mockServer.getPort());\n         try (NamespacedKubernetesClient client = mockServer.createClient()) {\n             systemProps.put(Config.KUBERNETES_MASTER_SYSTEM_PROPERTY, client.getConfiguration().getMasterUrl());\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE5NDg2MA==", "url": "https://github.com/quarkusio/quarkus/pull/9728#discussion_r446194860", "bodyText": "I am generally not super happy about having every configMap use the same namespace, but when I was writing the initial version of the extension I couldn't come up with an easy enough to use configuration that would cater both no namespace and different namespace configMaps, so I guess we can live with this.", "author": "geoand", "createdAt": "2020-06-26T13:47:56Z", "path": "extensions/kubernetes-config/runtime/src/main/java/io/quarkus/kubernetes/client/runtime/KubernetesConfigSourceConfig.java", "diffHunk": "@@ -28,4 +28,10 @@\n     @ConfigItem\n     public Optional<List<String>> configMaps;\n \n+    /**\n+     * Namespace to look for config maps\n+     */\n+    @ConfigItem\n+    public Optional<String> namespace;", "originalCommit": "f7362006f04964c522f6aab952003334de8d7158", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9933872cdd15baa4d72c6bbfc9d68e6d946b7841", "chunk": "diff --git a/extensions/kubernetes-config/runtime/src/main/java/io/quarkus/kubernetes/client/runtime/KubernetesConfigSourceConfig.java b/extensions/kubernetes-config/runtime/src/main/java/io/quarkus/kubernetes/client/runtime/KubernetesConfigSourceConfig.java\nindex b52a0eae3f..3f2f586d91 100644\n--- a/extensions/kubernetes-config/runtime/src/main/java/io/quarkus/kubernetes/client/runtime/KubernetesConfigSourceConfig.java\n+++ b/extensions/kubernetes-config/runtime/src/main/java/io/quarkus/kubernetes/client/runtime/KubernetesConfigSourceConfig.java\n\n@@ -29,7 +29,8 @@ public class KubernetesConfigSourceConfig {\n     public Optional<List<String>> configMaps;\n \n     /**\n-     * Namespace to look for config maps\n+     * Namespace to look for config maps. Quarkus will return the configMaps in the namespace indicated by this property if they\n+     * exists, build will fail otherwise.\n      */\n     @ConfigItem\n     public Optional<String> namespace;\n"}}, {"oid": "cbfa0ccc42ad8e3c351b327023e74f3e0bbc2101", "url": "https://github.com/quarkusio/quarkus/commit/cbfa0ccc42ad8e3c351b327023e74f3e0bbc2101", "message": "feature: reading namespaced ConfigMaps", "committedDate": "2020-06-26T14:33:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg1OTkxOQ==", "url": "https://github.com/quarkusio/quarkus/pull/9728#discussion_r446859919", "bodyText": "We should add more documentation on how this behaves", "author": "geoand", "createdAt": "2020-06-29T08:33:12Z", "path": "extensions/kubernetes-config/runtime/src/main/java/io/quarkus/kubernetes/client/runtime/KubernetesConfigSourceConfig.java", "diffHunk": "@@ -28,4 +28,10 @@\n     @ConfigItem\n     public Optional<List<String>> configMaps;\n \n+    /**\n+     * Namespace to look for config maps", "originalCommit": "cbfa0ccc42ad8e3c351b327023e74f3e0bbc2101", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9933872cdd15baa4d72c6bbfc9d68e6d946b7841", "chunk": "diff --git a/extensions/kubernetes-config/runtime/src/main/java/io/quarkus/kubernetes/client/runtime/KubernetesConfigSourceConfig.java b/extensions/kubernetes-config/runtime/src/main/java/io/quarkus/kubernetes/client/runtime/KubernetesConfigSourceConfig.java\nindex b52a0eae3f..3f2f586d91 100644\n--- a/extensions/kubernetes-config/runtime/src/main/java/io/quarkus/kubernetes/client/runtime/KubernetesConfigSourceConfig.java\n+++ b/extensions/kubernetes-config/runtime/src/main/java/io/quarkus/kubernetes/client/runtime/KubernetesConfigSourceConfig.java\n\n@@ -29,7 +29,8 @@ public class KubernetesConfigSourceConfig {\n     public Optional<List<String>> configMaps;\n \n     /**\n-     * Namespace to look for config maps\n+     * Namespace to look for config maps. Quarkus will return the configMaps in the namespace indicated by this property if they\n+     * exists, build will fail otherwise.\n      */\n     @ConfigItem\n     public Optional<String> namespace;\n"}}, {"oid": "9933872cdd15baa4d72c6bbfc9d68e6d946b7841", "url": "https://github.com/quarkusio/quarkus/commit/9933872cdd15baa4d72c6bbfc9d68e6d946b7841", "message": "feature: reading namespaced ConfigMaps", "committedDate": "2020-06-29T12:58:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk2MDA5MQ==", "url": "https://github.com/quarkusio/quarkus/pull/9728#discussion_r446960091", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Namespace to look for config maps. Quarkus will return the configMaps in the namespace indicated by this property if they\n          \n          \n            \n                 * exists, build will fail otherwise.\n          \n          \n            \n                 * Namespace to look for config maps. If this is not specified, then the namespace configured in the kubectl config context is used. If the value is specified and the namespace doesn't exist, the application will fail to start.", "author": "geoand", "createdAt": "2020-06-29T13:12:56Z", "path": "extensions/kubernetes-config/runtime/src/main/java/io/quarkus/kubernetes/client/runtime/KubernetesConfigSourceConfig.java", "diffHunk": "@@ -28,4 +28,11 @@\n     @ConfigItem\n     public Optional<List<String>> configMaps;\n \n+    /**\n+     * Namespace to look for config maps. Quarkus will return the configMaps in the namespace indicated by this property if they\n+     * exists, build will fail otherwise.", "originalCommit": "9933872cdd15baa4d72c6bbfc9d68e6d946b7841", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "64e56b0bf0b9e3d7460f9f6f260acd3c5370ca52", "chunk": "diff --git a/extensions/kubernetes-config/runtime/src/main/java/io/quarkus/kubernetes/client/runtime/KubernetesConfigSourceConfig.java b/extensions/kubernetes-config/runtime/src/main/java/io/quarkus/kubernetes/client/runtime/KubernetesConfigSourceConfig.java\nindex 3f2f586d91..807ca92cff 100644\n--- a/extensions/kubernetes-config/runtime/src/main/java/io/quarkus/kubernetes/client/runtime/KubernetesConfigSourceConfig.java\n+++ b/extensions/kubernetes-config/runtime/src/main/java/io/quarkus/kubernetes/client/runtime/KubernetesConfigSourceConfig.java\n\n@@ -29,8 +29,7 @@ public class KubernetesConfigSourceConfig {\n     public Optional<List<String>> configMaps;\n \n     /**\n-     * Namespace to look for config maps. Quarkus will return the configMaps in the namespace indicated by this property if they\n-     * exists, build will fail otherwise.\n+     * Namespace to look for config maps. If this is not specified, then the namespace configured in the kubectl config context is used. If the value is specified and the namespace doesn't exist, the application will fail to start.\n      */\n     @ConfigItem\n     public Optional<String> namespace;\n"}}, {"oid": "64e56b0bf0b9e3d7460f9f6f260acd3c5370ca52", "url": "https://github.com/quarkusio/quarkus/commit/64e56b0bf0b9e3d7460f9f6f260acd3c5370ca52", "message": "feature: reading namespaced ConfigMaps", "committedDate": "2020-06-29T13:38:55Z", "type": "forcePushed"}, {"oid": "37ca807c59951dc20ffd01608b4ca062b35c8eed", "url": "https://github.com/quarkusio/quarkus/commit/37ca807c59951dc20ffd01608b4ca062b35c8eed", "message": "feature: reading namespaced ConfigMaps", "committedDate": "2020-06-29T20:47:33Z", "type": "forcePushed"}, {"oid": "8616e89c3011418d2c3d4ccfec3866f5e6163d80", "url": "https://github.com/quarkusio/quarkus/commit/8616e89c3011418d2c3d4ccfec3866f5e6163d80", "message": "feature: reading namespaced ConfigMaps", "committedDate": "2020-07-01T16:23:53Z", "type": "forcePushed"}, {"oid": "a728dfad0f563c3ce0d4fca93a5505b7db66763f", "url": "https://github.com/quarkusio/quarkus/commit/a728dfad0f563c3ce0d4fca93a5505b7db66763f", "message": "feature: reading namespaced ConfigMaps", "committedDate": "2020-07-03T12:37:20Z", "type": "forcePushed"}, {"oid": "34da5443f2d839eaf51fd20887d2427e07f29f1d", "url": "https://github.com/quarkusio/quarkus/commit/34da5443f2d839eaf51fd20887d2427e07f29f1d", "message": "feature: reading namespaced ConfigMaps", "committedDate": "2020-07-06T07:46:24Z", "type": "forcePushed"}, {"oid": "1c89c51f6626fed09d594ea69289da13736d613b", "url": "https://github.com/quarkusio/quarkus/commit/1c89c51f6626fed09d594ea69289da13736d613b", "message": "feature: reading namespaced ConfigMaps", "committedDate": "2020-07-07T09:49:25Z", "type": "commit"}, {"oid": "1c89c51f6626fed09d594ea69289da13736d613b", "url": "https://github.com/quarkusio/quarkus/commit/1c89c51f6626fed09d594ea69289da13736d613b", "message": "feature: reading namespaced ConfigMaps", "committedDate": "2020-07-07T09:49:25Z", "type": "forcePushed"}]}