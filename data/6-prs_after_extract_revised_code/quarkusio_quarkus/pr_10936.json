{"pr_number": 10936, "pr_title": "Implement container-managed concurrency for beans", "pr_createdAt": "2020-07-23T13:18:37Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/10936", "timeline": [{"oid": "3ac43377eab8d69308bdbc2c7839946677feea2f", "url": "https://github.com/quarkusio/quarkus/commit/3ac43377eab8d69308bdbc2c7839946677feea2f", "message": "Implement container-managed concurrency for beans\n\n- resolves #10923", "committedDate": "2020-07-23T19:19:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc3NDcwNQ==", "url": "https://github.com/quarkusio/quarkus/pull/10936#discussion_r459774705", "bodyText": "If this throws InterruptedException then locked will be true but the lock will not have been acquired, and the finally block will attempt to unlock a lock it does not hold.", "author": "stuartwdouglas", "createdAt": "2020-07-23T23:03:02Z", "path": "independent-projects/arc/runtime/src/main/java/io/quarkus/arc/impl/LockInterceptor.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package io.quarkus.arc.impl;\n+\n+import static javax.interceptor.Interceptor.Priority.PLATFORM_BEFORE;\n+\n+import io.quarkus.arc.ArcInvocationContext;\n+import io.quarkus.arc.Lock;\n+import io.quarkus.arc.LockException;\n+import java.lang.annotation.Annotation;\n+import java.util.Set;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import javax.annotation.Priority;\n+import javax.interceptor.AroundInvoke;\n+import javax.interceptor.Interceptor;\n+import javax.interceptor.InvocationContext;\n+\n+@Lock\n+@Interceptor\n+@Priority(PLATFORM_BEFORE)\n+public class LockInterceptor {\n+\n+    private final ReadWriteLock readWriteLock = new ReentrantReadWriteLock();\n+\n+    @AroundInvoke\n+    Object lock(InvocationContext ctx) throws Exception {\n+        Lock lock = getLock(ctx);\n+        switch (lock.value()) {\n+            case WRITE:\n+                return writeLock(lock, ctx);\n+            case READ:\n+                return readLock(lock, ctx);\n+            case NONE:\n+                return ctx.proceed();\n+        }\n+        throw new LockException(\"Unsupported @Lock type found on business method \" + ctx.getMethod());\n+    }\n+\n+    private Object writeLock(Lock lock, InvocationContext ctx) throws Exception {\n+        boolean locked = true;\n+        long time = lock.time();\n+        try {\n+            if (time > 0) {\n+                locked = readWriteLock.writeLock().tryLock(time, lock.unit());", "originalCommit": "3ac43377eab8d69308bdbc2c7839946677feea2f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2NTI4Ng==", "url": "https://github.com/quarkusio/quarkus/pull/10936#discussion_r459865286", "bodyText": "I see. In that case locked should be initialized with false and set to true after the lock is acquired sucessfully.", "author": "mkouba", "createdAt": "2020-07-24T05:58:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc3NDcwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3NTAwOQ==", "url": "https://github.com/quarkusio/quarkus/pull/10936#discussion_r459875009", "bodyText": "Should be fixed now..", "author": "mkouba", "createdAt": "2020-07-24T06:35:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc3NDcwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "29db695d30256cb5bc23245a20c0fa7eae8c7a07", "chunk": "diff --git a/independent-projects/arc/runtime/src/main/java/io/quarkus/arc/impl/LockInterceptor.java b/independent-projects/arc/runtime/src/main/java/io/quarkus/arc/impl/LockInterceptor.java\nindex f897478882..d10e560bd9 100644\n--- a/independent-projects/arc/runtime/src/main/java/io/quarkus/arc/impl/LockInterceptor.java\n+++ b/independent-projects/arc/runtime/src/main/java/io/quarkus/arc/impl/LockInterceptor.java\n\n@@ -36,7 +36,7 @@ public class LockInterceptor {\n     }\n \n     private Object writeLock(Lock lock, InvocationContext ctx) throws Exception {\n-        boolean locked = true;\n+        boolean locked = false;\n         long time = lock.time();\n         try {\n             if (time > 0) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc3NDc1OA==", "url": "https://github.com/quarkusio/quarkus/pull/10936#discussion_r459774758", "bodyText": "Same problem here.", "author": "stuartwdouglas", "createdAt": "2020-07-23T23:03:14Z", "path": "independent-projects/arc/runtime/src/main/java/io/quarkus/arc/impl/LockInterceptor.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package io.quarkus.arc.impl;\n+\n+import static javax.interceptor.Interceptor.Priority.PLATFORM_BEFORE;\n+\n+import io.quarkus.arc.ArcInvocationContext;\n+import io.quarkus.arc.Lock;\n+import io.quarkus.arc.LockException;\n+import java.lang.annotation.Annotation;\n+import java.util.Set;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import javax.annotation.Priority;\n+import javax.interceptor.AroundInvoke;\n+import javax.interceptor.Interceptor;\n+import javax.interceptor.InvocationContext;\n+\n+@Lock\n+@Interceptor\n+@Priority(PLATFORM_BEFORE)\n+public class LockInterceptor {\n+\n+    private final ReadWriteLock readWriteLock = new ReentrantReadWriteLock();\n+\n+    @AroundInvoke\n+    Object lock(InvocationContext ctx) throws Exception {\n+        Lock lock = getLock(ctx);\n+        switch (lock.value()) {\n+            case WRITE:\n+                return writeLock(lock, ctx);\n+            case READ:\n+                return readLock(lock, ctx);\n+            case NONE:\n+                return ctx.proceed();\n+        }\n+        throw new LockException(\"Unsupported @Lock type found on business method \" + ctx.getMethod());\n+    }\n+\n+    private Object writeLock(Lock lock, InvocationContext ctx) throws Exception {\n+        boolean locked = true;\n+        long time = lock.time();\n+        try {\n+            if (time > 0) {\n+                locked = readWriteLock.writeLock().tryLock(time, lock.unit());\n+                if (!locked) {\n+                    throw new LockException(\"Write lock not acquired in \" + lock.unit().toMillis(time) + \" ms\");\n+                }\n+            } else {\n+                readWriteLock.writeLock().lock();\n+            }\n+            return ctx.proceed();\n+        } finally {\n+            if (locked) {\n+                readWriteLock.writeLock().unlock();\n+            }\n+        }\n+    }\n+\n+    private Object readLock(Lock lock, InvocationContext ctx) throws Exception {\n+        boolean locked = true;\n+        long time = lock.time();\n+        try {\n+            if (time > 0) {\n+                locked = readWriteLock.readLock().tryLock(time, lock.unit());", "originalCommit": "3ac43377eab8d69308bdbc2c7839946677feea2f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "29db695d30256cb5bc23245a20c0fa7eae8c7a07", "chunk": "diff --git a/independent-projects/arc/runtime/src/main/java/io/quarkus/arc/impl/LockInterceptor.java b/independent-projects/arc/runtime/src/main/java/io/quarkus/arc/impl/LockInterceptor.java\nindex f897478882..d10e560bd9 100644\n--- a/independent-projects/arc/runtime/src/main/java/io/quarkus/arc/impl/LockInterceptor.java\n+++ b/independent-projects/arc/runtime/src/main/java/io/quarkus/arc/impl/LockInterceptor.java\n\n@@ -36,7 +36,7 @@ public class LockInterceptor {\n     }\n \n     private Object writeLock(Lock lock, InvocationContext ctx) throws Exception {\n-        boolean locked = true;\n+        boolean locked = false;\n         long time = lock.time();\n         try {\n             if (time > 0) {\n"}}, {"oid": "29db695d30256cb5bc23245a20c0fa7eae8c7a07", "url": "https://github.com/quarkusio/quarkus/commit/29db695d30256cb5bc23245a20c0fa7eae8c7a07", "message": "Implement container-managed concurrency for beans\n\n- resolves #10923", "committedDate": "2020-07-24T06:34:53Z", "type": "commit"}, {"oid": "29db695d30256cb5bc23245a20c0fa7eae8c7a07", "url": "https://github.com/quarkusio/quarkus/commit/29db695d30256cb5bc23245a20c0fa7eae8c7a07", "message": "Implement container-managed concurrency for beans\n\n- resolves #10923", "committedDate": "2020-07-24T06:34:53Z", "type": "forcePushed"}]}