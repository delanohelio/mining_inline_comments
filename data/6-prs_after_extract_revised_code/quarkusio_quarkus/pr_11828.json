{"pr_number": 11828, "pr_title": "Re-enable MutinyTest", "pr_createdAt": "2020-09-02T18:46:25Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/11828", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMwMzE2Nw==", "url": "https://github.com/quarkusio/quarkus/pull/11828#discussion_r482303167", "bodyText": "Does the execution order play a role here? @jaikiran reported that sometimes the server one was initialized first and sometimes the client one.\nI think we should have a build item ensuring that the order of operations is fully determined.", "author": "gsmet", "createdAt": "2020-09-02T18:51:03Z", "path": "extensions/rest-client/runtime/src/main/java/io/quarkus/restclient/runtime/RestClientRecorder.java", "diffHunk": "@@ -59,25 +59,36 @@ public InjectorFactory getInjectorFactory() {\n             }\n         };\n \n-        if (useBuiltIn) {\n-            RegisterBuiltin.register(clientProviderFactory);\n-            registerProviders(clientProviderFactory, contributedProviders, false);\n+        registerProviders(clientProviderFactory, useBuiltIn, providersToRegister, contributedProviders);\n+\n+        if (ResteasyProviderFactory.peekInstance() != null) {", "originalCommit": "892f0a8e95cec637e73fa2a80ebb354e27a0c019", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMxMDg3Nw==", "url": "https://github.com/quarkusio/quarkus/pull/11828#discussion_r482310877", "bodyText": "To my understanding, the only time there's a problem is when the server one is created first and the REST Client one clobbers it.\nI don't think the reverse situation poses any problems.\nIn addition, there are many times where only the server or only REST Client is present, so I'm not sure how a BuildItem helps in that situation", "author": "kenfinnigan", "createdAt": "2020-09-02T18:59:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMwMzE2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMxNjM3MQ==", "url": "https://github.com/quarkusio/quarkus/pull/11828#discussion_r482316371", "bodyText": "Another point to note is that the provider factory for server or client side are actually different instances of the same class, where the \"server\" instance has a no-op for all client operations, and the \"client\" instance the reverse.", "author": "kenfinnigan", "createdAt": "2020-09-02T19:05:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMwMzE2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMxNjg3NA==", "url": "https://github.com/quarkusio/quarkus/pull/11828#discussion_r482316874", "bodyText": "We could have a build item in one of the artifacts common to the two, the server would produce it and the client optionally consume it.\nThis way, if the server is present, we would be sure the client code would be executed after the server code.\nObviously, we can also do the opposite if it makes more sense.", "author": "gsmet", "createdAt": "2020-09-02T19:05:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMwMzE2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMyNDQ3Mw==", "url": "https://github.com/quarkusio/quarkus/pull/11828#discussion_r482324473", "bodyText": "Another option, which will take some time, is to add the functionality we have for RestClientBuilderImpl to ResteasyClientBuilderImpl that can use a static method to set the provider directly into the instance.\nThen ordering isn't an issue.\nI've raised https://issues.redhat.com/browse/RESTEASY-2684 to discuss this option with the RESTEasy team", "author": "kenfinnigan", "createdAt": "2020-09-02T19:14:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMwMzE2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM2NDQ4Nw==", "url": "https://github.com/quarkusio/quarkus/pull/11828#discussion_r482364487", "bodyText": "While fixing things in RESTEasy would be nice, I think we need a reasonable fix for 1.8.\nLet's wait for @jaikiran 's opinion on this.", "author": "gsmet", "createdAt": "2020-09-02T19:47:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMwMzE2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcyOTY5Ng==", "url": "https://github.com/quarkusio/quarkus/pull/11828#discussion_r482729696", "bodyText": "Yes, we need to be sure it fixes the random ordering.", "author": "cescoffier", "createdAt": "2020-09-03T06:21:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMwMzE2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MjQ4OA==", "url": "https://github.com/quarkusio/quarkus/pull/11828#discussion_r482742488", "bodyText": "So this change still leaves the chance for the ordering issue to occur. The order I'm talking about is as follows:\n\n\nThere are 2 separate extensions in play here - quarkus-rest-client and quarkus-resteasy.\n\n\nEach of them have multiple build steps (which is fine). Both of these extensions, in one of their build steps \"setup\" a @Recorder of their own to call some method which ultimately leads to a call to ResteasyProviderFactory.setInstance method. In case of the quarkus-rest-client extension, the recorder in question is the RestClientRecorder and for quarkus-resteasy extension it is the ResteasyStandaloneRecorder. So far all is fine.\n\n\nIn Quarkus, these recorders get invoked upon application initialization. It so happens that the order in which these are recorders are invoked isn't deterministic (from what I saw). So a few times the quarkus-resteasy recorder might get invoked first and in some cases the quarkus-rest-client recorder might get invoked first. Ultimately, whichever recorder gets invoked last \"wins\" the call to ResteasyProviderFactory.setInstance by overwriting the instance.\n\n\nThis issue still exists with this change because if the quarkus-rest-client recorder gets invoked first it will peek and see that the instance is null (assuming no other extension within the Quarkus ecosystem ended up setting it). Since it is null, it will go ahead and set the instance to clientProviderFactory. Now next, after a while, the quarkus-resteasy recorder gets invoked its recorder ultimately invokes certain method which leads to[1] which will overwrite this instance, which was set by the rest-client recorder.\nSo the ordering issue remains. Having said that, to answer this:\n\nTo my understanding, the only time there's a problem is when the server one is created first and the REST Client one clobbers it.\nI don't think the reverse situation poses any problems\n\nI'm not too sure, because outside of the current issue, I don't have much idea about how resteasy behaves internally with these provider factory instances.\n@gsmet, does ordering (via build item dependencies) of build steps (across extensions) also order their recorder execution?\n[1] https://github.com/resteasy/Resteasy/blob/4.5.6.Final/resteasy-core/src/main/java/org/jboss/resteasy/core/ResteasyDeploymentImpl.java#L373", "author": "jaikiran", "createdAt": "2020-09-03T06:49:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMwMzE2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgwODI5NA==", "url": "https://github.com/quarkusio/quarkus/pull/11828#discussion_r482808294", "bodyText": "@jaikiran the recorder executions will be executed in the order they are recorded. So as soon as the build steps are properly ordered, it's going to work.\nSo, in conclusion, please make sure the build steps playing with ResteasyProviderFactory are executed in order via a build item dependency.", "author": "gsmet", "createdAt": "2020-09-03T08:40:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMwMzE2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk0MzExMw==", "url": "https://github.com/quarkusio/quarkus/pull/11828#discussion_r482943113", "bodyText": "@jaikiran I know what you've outlined. However, the server provider factory overriding the rest client created one is not actually an issue as far as I've seen.\nIn such a situation, the providers rest client needs are registered by the server provider factory, and rest client works as expected.\nThe only problem situation is when rest client overrides the server provider factory, which this PR solves", "author": "kenfinnigan", "createdAt": "2020-09-03T12:35:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMwMzE2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk1MDQ2Ng==", "url": "https://github.com/quarkusio/quarkus/pull/11828#discussion_r482950466", "bodyText": "In such a situation, the providers rest client needs are registered by the server provider factory, and rest client works as expected.\n\nHello @kenfinnigan, that sounds fine to me then.", "author": "jaikiran", "createdAt": "2020-09-03T12:47:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMwMzE2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk4NjUwNA==", "url": "https://github.com/quarkusio/quarkus/pull/11828#discussion_r482986504", "bodyText": "Again, I want to be sure we properly control the execution order.\n@kenfinnigan I can do the work and push an additional commit to your PR if you don't think it's useful.", "author": "gsmet", "createdAt": "2020-09-03T13:41:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMwMzE2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk4OTUwMQ==", "url": "https://github.com/quarkusio/quarkus/pull/11828#discussion_r482989501", "bodyText": "I don't see it as necessary or useful", "author": "kenfinnigan", "createdAt": "2020-09-03T13:45:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMwMzE2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA3OTQwMg==", "url": "https://github.com/quarkusio/quarkus/pull/11828#discussion_r483079402", "bodyText": "To reiterate, with this change it's not necessary to control the execution order. And I'm looking to properly fix it in RESTEasy so this wouldn't be needed long term either.\nI don't see the need to further complicate the code for a change that isn't permanent", "author": "kenfinnigan", "createdAt": "2020-09-03T15:46:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMwMzE2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA4NzAwNg==", "url": "https://github.com/quarkusio/quarkus/pull/11828#discussion_r483087006", "bodyText": "And I'm looking to properly fix it in RESTEasy so this wouldn't be needed long term either.\n\nYeah but that won't be for 1.8 and we need a fix now.\nAnd I really think having a deterministic execution order for things that interact with each other is important.\nIf just for the sake of not spending hours debugging weird issues.\nI think adding the build item should be very easy. I'll take a look tomorrow. Either it's easy and don't add boilerplate or I will give up.", "author": "gsmet", "createdAt": "2020-09-03T15:58:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMwMzE2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA4ODI3Nw==", "url": "https://github.com/quarkusio/quarkus/pull/11828#discussion_r483088277", "bodyText": "I know it won't be done for 1.8, but why add more code that needs to be removed when it's there in 1.9?\nWhen the change is done in RESTEasy, there is no longer a need for a build item", "author": "kenfinnigan", "createdAt": "2020-09-03T16:00:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMwMzE2Nw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "5e77962160728b07e7628130e3af886c143bd64f", "url": "https://github.com/quarkusio/quarkus/commit/5e77962160728b07e7628130e3af886c143bd64f", "message": "Re-enable MutinyTest\n - Fixes #11687\n - Moved JAX-RS ClientBuilder service file for native to RESTClientProcessor\n - Use existing ResteasyProviderFactory to register client providers with if it exists, and don't replace the provider directly", "committedDate": "2020-09-04T13:13:21Z", "type": "commit"}, {"oid": "389aea5fe0d35af3a0ddae8f4bffe520c41bb7d9", "url": "https://github.com/quarkusio/quarkus/commit/389aea5fe0d35af3a0ddae8f4bffe520c41bb7d9", "message": "Re-enable Mongodb Reactive with Panache test", "committedDate": "2020-09-04T13:15:26Z", "type": "commit"}, {"oid": "389aea5fe0d35af3a0ddae8f4bffe520c41bb7d9", "url": "https://github.com/quarkusio/quarkus/commit/389aea5fe0d35af3a0ddae8f4bffe520c41bb7d9", "message": "Re-enable Mongodb Reactive with Panache test", "committedDate": "2020-09-04T13:15:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYzMjM2MA==", "url": "https://github.com/quarkusio/quarkus/pull/11828#discussion_r483632360", "bodyText": "There's also NativeMongodbPanacheResourceIT in integration-tests/mongodb-panache which has been disabled for this same reason. That one needs to be re-enabled too, either in this PR or as a separate one.", "author": "jaikiran", "createdAt": "2020-09-04T13:57:32Z", "path": "integration-tests/mongodb-panache/src/test/java/io/quarkus/it/mongodb/panache/reactive/ReactiveMongodbPanacheResourceTest.java", "diffHunk": "@@ -43,7 +42,6 @@\n \n @QuarkusTest\n @QuarkusTestResource(MongoTestResource.class)\n-@Disabled(\"See https://github.com/quarkusio/quarkus/issues/11711\")", "originalCommit": "389aea5fe0d35af3a0ddae8f4bffe520c41bb7d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYzMzA5OQ==", "url": "https://github.com/quarkusio/quarkus/pull/11828#discussion_r483633099", "bodyText": "Sorry, missed that, thought it was just the one.\nI'm loathed to re-trigger the full CI build, can it be in a followup if this is ok?", "author": "kenfinnigan", "createdAt": "2020-09-04T13:58:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYzMjM2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYzNDgyOA==", "url": "https://github.com/quarkusio/quarkus/pull/11828#discussion_r483634828", "bodyText": "I'm loathed to re-trigger the full CI build,\n\nSame here.\n\ncan it be in a followup if this is ok?\n\nI think that's OK since if this re-enabled regular test passes, it's almost guaranteed the native one too will, given the context of this issue. So we just need to see how this one goes.", "author": "jaikiran", "createdAt": "2020-09-04T14:01:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYzMjM2MA=="}], "type": "inlineReview", "revised_code": null}]}