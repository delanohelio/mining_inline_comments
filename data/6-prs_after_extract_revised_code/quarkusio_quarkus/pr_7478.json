{"pr_number": 7478, "pr_title": "Banner updates", "pr_createdAt": "2020-02-28T07:48:04Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/7478", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1MTgyMg==", "url": "https://github.com/quarkusio/quarkus/pull/7478#discussion_r385551822", "bodyText": "question: what does that do/help ?", "author": "maxandersen", "createdAt": "2020-02-28T07:54:35Z", "path": "extensions/banner/deployment/src/main/java/io/quarkus/banner/deployment/BannerProcessor.java", "diffHunk": "@@ -21,7 +21,7 @@\n \n     private static final Logger logger = Logger.getLogger(BannerProcessor.class);\n \n-    @BuildStep(loadsApplicationClasses = true)\n+    @BuildStep(loadsApplicationClasses = true, onlyIf = IsBanner.class)", "originalCommit": "0798d599dc19a9b342f4fa58a0ae3a56766c1aee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1MTkzMA==", "url": "https://github.com/quarkusio/quarkus/pull/7478#discussion_r385551930", "bodyText": "ah never mind - should read the full PR brefore commenting gaf!", "author": "maxandersen", "createdAt": "2020-02-28T07:54:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1MTgyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1MjEzMQ==", "url": "https://github.com/quarkusio/quarkus/pull/7478#discussion_r385552131", "bodyText": "Essentially the build step runs iff IsBanner#getAsBoolean returns true", "author": "geoand", "createdAt": "2020-02-28T07:55:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1MTgyMg=="}], "type": "inlineReview", "revised_code": {"commit": "e57a8eaeed1dad3f13a2fe2d346f84662e598d28", "chunk": "diff --git a/extensions/banner/deployment/src/main/java/io/quarkus/banner/deployment/BannerProcessor.java b/extensions/banner/deployment/src/main/java/io/quarkus/banner/deployment/BannerProcessor.java\nindex 4f9083071c..a3f64e8625 100644\n--- a/extensions/banner/deployment/src/main/java/io/quarkus/banner/deployment/BannerProcessor.java\n+++ b/extensions/banner/deployment/src/main/java/io/quarkus/banner/deployment/BannerProcessor.java\n\n@@ -21,14 +22,14 @@ public class BannerProcessor {\n \n     private static final Logger logger = Logger.getLogger(BannerProcessor.class);\n \n-    @BuildStep(loadsApplicationClasses = true, onlyIf = IsBanner.class)\n+    @BuildStep(loadsApplicationClasses = true, onlyIf = { IsBanner.class, IsDevelopment.class })\n     @Record(ExecutionTime.RUNTIME_INIT)\n     public ConsoleFormatterBannerBuildItem recordBanner(BannerRecorder recorder, BannerConfig config) {\n         String bannerText = readBannerFile(config);\n         return new ConsoleFormatterBannerBuildItem(recorder.provideBannerSupplier(bannerText));\n     }\n \n-    @BuildStep\n+    @BuildStep(onlyIf = IsDevelopment.class)\n     HotDeploymentWatchedFileBuildItem watchBannerChanges(BannerConfig config) {\n         return new HotDeploymentWatchedFileBuildItem(config.path);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY2NTA1NA==", "url": "https://github.com/quarkusio/quarkus/pull/7478#discussion_r385665054", "bodyText": "I would have made it runtime so I would read the banner in any case and just condition the display at runtime.", "author": "gsmet", "createdAt": "2020-02-28T12:18:55Z", "path": "extensions/banner/deployment/src/main/java/io/quarkus/banner/deployment/BannerConfig.java", "diffHunk": "@@ -5,6 +5,13 @@\n \n @ConfigRoot(name = \"banner\")\n public class BannerConfig {\n+\n+    /**\n+     * Whether or not the banner will be displayed\n+     */\n+    @ConfigItem(defaultValue = \"true\")\n+    public boolean enabled;", "originalCommit": "0798d599dc19a9b342f4fa58a0ae3a56766c1aee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY2NzUzMQ==", "url": "https://github.com/quarkusio/quarkus/pull/7478#discussion_r385667531", "bodyText": "I would say let's keep it build time for now. We can always make it runtime in the future if needed", "author": "geoand", "createdAt": "2020-02-28T12:25:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY2NTA1NA=="}], "type": "inlineReview", "revised_code": {"commit": "3ed381b2dd75d85fb961a310036bf7468d0ce31a", "chunk": "diff --git a/extensions/banner/deployment/src/main/java/io/quarkus/banner/deployment/BannerConfig.java b/core/deployment/src/main/java/io/quarkus/banner/BannerConfig.java\nsimilarity index 55%\nrename from extensions/banner/deployment/src/main/java/io/quarkus/banner/deployment/BannerConfig.java\nrename to core/deployment/src/main/java/io/quarkus/banner/BannerConfig.java\nindex 8b8412d051..ae5d02030e 100644\n--- a/extensions/banner/deployment/src/main/java/io/quarkus/banner/deployment/BannerConfig.java\n+++ b/core/deployment/src/main/java/io/quarkus/banner/BannerConfig.java\n\n@@ -1,4 +1,4 @@\n-package io.quarkus.banner.deployment;\n+package io.quarkus.banner;\n \n import io.quarkus.runtime.annotations.ConfigItem;\n import io.quarkus.runtime.annotations.ConfigRoot;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY2NTMxOQ==", "url": "https://github.com/quarkusio/quarkus/pull/7478#discussion_r385665319", "bodyText": "Not really a big fan of this pattern of injecting the config in the supplier. Well and it won't work if we want to make it runtime :).", "author": "gsmet", "createdAt": "2020-02-28T12:19:35Z", "path": "extensions/banner/deployment/src/main/java/io/quarkus/banner/deployment/BannerProcessor.java", "diffHunk": "@@ -21,7 +21,7 @@\n \n     private static final Logger logger = Logger.getLogger(BannerProcessor.class);\n \n-    @BuildStep(loadsApplicationClasses = true)\n+    @BuildStep(loadsApplicationClasses = true, onlyIf = IsBanner.class)", "originalCommit": "0798d599dc19a9b342f4fa58a0ae3a56766c1aee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY2NzI0Mw==", "url": "https://github.com/quarkusio/quarkus/pull/7478#discussion_r385667243", "bodyText": "I on the other hand love it\ud83d\ude0e. To make it makes things very clear. Plus we use it all over the place.\nIndeed if we decide to make the property a runtime one it will have to change", "author": "geoand", "createdAt": "2020-02-28T12:24:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY2NTMxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "e57a8eaeed1dad3f13a2fe2d346f84662e598d28", "chunk": "diff --git a/extensions/banner/deployment/src/main/java/io/quarkus/banner/deployment/BannerProcessor.java b/extensions/banner/deployment/src/main/java/io/quarkus/banner/deployment/BannerProcessor.java\nindex 4f9083071c..a3f64e8625 100644\n--- a/extensions/banner/deployment/src/main/java/io/quarkus/banner/deployment/BannerProcessor.java\n+++ b/extensions/banner/deployment/src/main/java/io/quarkus/banner/deployment/BannerProcessor.java\n\n@@ -21,14 +22,14 @@ public class BannerProcessor {\n \n     private static final Logger logger = Logger.getLogger(BannerProcessor.class);\n \n-    @BuildStep(loadsApplicationClasses = true, onlyIf = IsBanner.class)\n+    @BuildStep(loadsApplicationClasses = true, onlyIf = { IsBanner.class, IsDevelopment.class })\n     @Record(ExecutionTime.RUNTIME_INIT)\n     public ConsoleFormatterBannerBuildItem recordBanner(BannerRecorder recorder, BannerConfig config) {\n         String bannerText = readBannerFile(config);\n         return new ConsoleFormatterBannerBuildItem(recorder.provideBannerSupplier(bannerText));\n     }\n \n-    @BuildStep\n+    @BuildStep(onlyIf = IsDevelopment.class)\n     HotDeploymentWatchedFileBuildItem watchBannerChanges(BannerConfig config) {\n         return new HotDeploymentWatchedFileBuildItem(config.path);\n     }\n"}}, {"oid": "e57a8eaeed1dad3f13a2fe2d346f84662e598d28", "url": "https://github.com/quarkusio/quarkus/commit/e57a8eaeed1dad3f13a2fe2d346f84662e598d28", "message": "Make banner only show up in dev-mode", "committedDate": "2020-03-03T09:35:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA1NTgzMA==", "url": "https://github.com/quarkusio/quarkus/pull/7478#discussion_r387055830", "bodyText": "Shouldn't it be something like:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @BuildStep(onlyIf = IsDevelopment.class)\n          \n          \n            \n                @BuildStep(onlyIf = { IsBanner.class, IsDevelopment.class })", "author": "gastaldi", "createdAt": "2020-03-03T14:29:31Z", "path": "core/deployment/src/main/java/io/quarkus/deployment/steps/BannerProcessor.java", "diffHunk": "@@ -8,27 +8,30 @@\n \n import org.jboss.logging.Logger;\n \n-import io.quarkus.banner.runtime.BannerRecorder;\n+import io.quarkus.BannerConfig;\n+import io.quarkus.IsBanner;\n import io.quarkus.builder.Version;\n+import io.quarkus.deployment.IsDevelopment;\n import io.quarkus.deployment.annotations.BuildStep;\n import io.quarkus.deployment.annotations.ExecutionTime;\n import io.quarkus.deployment.annotations.Record;\n import io.quarkus.deployment.builditem.ConsoleFormatterBannerBuildItem;\n import io.quarkus.deployment.builditem.HotDeploymentWatchedFileBuildItem;\n import io.quarkus.deployment.util.FileUtil;\n+import io.quarkus.runtime.BannerRecorder;\n \n public class BannerProcessor {\n \n     private static final Logger logger = Logger.getLogger(BannerProcessor.class);\n \n-    @BuildStep(loadsApplicationClasses = true)\n+    @BuildStep(loadsApplicationClasses = true, onlyIf = { IsBanner.class, IsDevelopment.class })\n     @Record(ExecutionTime.RUNTIME_INIT)\n     public ConsoleFormatterBannerBuildItem recordBanner(BannerRecorder recorder, BannerConfig config) {\n         String bannerText = readBannerFile(config);\n         return new ConsoleFormatterBannerBuildItem(recorder.provideBannerSupplier(bannerText));\n     }\n \n-    @BuildStep\n+    @BuildStep(onlyIf = IsDevelopment.class)", "originalCommit": "52f894c90bf9304c26e6a8c1c77a9a757f4be984", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3ed381b2dd75d85fb961a310036bf7468d0ce31a", "chunk": "diff --git a/core/deployment/src/main/java/io/quarkus/deployment/steps/BannerProcessor.java b/core/deployment/src/main/java/io/quarkus/deployment/steps/BannerProcessor.java\nindex a5ba9f272a..36b5a0edde 100644\n--- a/core/deployment/src/main/java/io/quarkus/deployment/steps/BannerProcessor.java\n+++ b/core/deployment/src/main/java/io/quarkus/deployment/steps/BannerProcessor.java\n\n@@ -8,10 +8,9 @@ import java.nio.charset.StandardCharsets;\n \n import org.jboss.logging.Logger;\n \n-import io.quarkus.BannerConfig;\n-import io.quarkus.IsBanner;\n+import io.quarkus.banner.BannerConfig;\n import io.quarkus.builder.Version;\n-import io.quarkus.deployment.IsDevelopment;\n+import io.quarkus.deployment.IsTest;\n import io.quarkus.deployment.annotations.BuildStep;\n import io.quarkus.deployment.annotations.ExecutionTime;\n import io.quarkus.deployment.annotations.Record;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA1ODMzOA==", "url": "https://github.com/quarkusio/quarkus/pull/7478#discussion_r387058338", "bodyText": "Minor but could we still have an io.quarkus.banner package? I find it weird to have that one in the root package.", "author": "gsmet", "createdAt": "2020-03-03T14:33:23Z", "path": "core/deployment/src/main/java/io/quarkus/BannerConfig.java", "diffHunk": "@@ -1,10 +1,17 @@\n-package io.quarkus.banner.deployment;\n+package io.quarkus;", "originalCommit": "52f894c90bf9304c26e6a8c1c77a9a757f4be984", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA3NDMzMg==", "url": "https://github.com/quarkusio/quarkus/pull/7478#discussion_r387074332", "bodyText": "Sure, no problem", "author": "geoand", "createdAt": "2020-03-03T14:55:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA1ODMzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA3NzQzMA==", "url": "https://github.com/quarkusio/quarkus/pull/7478#discussion_r387077430", "bodyText": "Fixed", "author": "geoand", "createdAt": "2020-03-03T14:59:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA1ODMzOA=="}], "type": "inlineReview", "revised_code": {"commit": "3ed381b2dd75d85fb961a310036bf7468d0ce31a", "chunk": "diff --git a/core/deployment/src/main/java/io/quarkus/BannerConfig.java b/core/deployment/src/main/java/io/quarkus/banner/BannerConfig.java\nsimilarity index 55%\nrename from core/deployment/src/main/java/io/quarkus/BannerConfig.java\nrename to core/deployment/src/main/java/io/quarkus/banner/BannerConfig.java\nindex f101da8e42..ae5d02030e 100644\n--- a/core/deployment/src/main/java/io/quarkus/BannerConfig.java\n+++ b/core/deployment/src/main/java/io/quarkus/banner/BannerConfig.java\n\n@@ -1,4 +1,4 @@\n-package io.quarkus;\n+package io.quarkus.banner;\n \n import io.quarkus.runtime.annotations.ConfigItem;\n import io.quarkus.runtime.annotations.ConfigRoot;\n"}}, {"oid": "3ed381b2dd75d85fb961a310036bf7468d0ce31a", "url": "https://github.com/quarkusio/quarkus/commit/3ed381b2dd75d85fb961a310036bf7468d0ce31a", "message": "Move banner to core and to prod run as well", "committedDate": "2020-03-03T14:59:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIwOTQ5NA==", "url": "https://github.com/quarkusio/quarkus/pull/7478#discussion_r387209494", "bodyText": "Any chance we could avoid the lambda? It will end up being executed at runtime, right?", "author": "gsmet", "createdAt": "2020-03-03T18:26:43Z", "path": "core/runtime/src/main/java/io/quarkus/runtime/BannerRecorder.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package io.quarkus.runtime;\n+\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+\n+import io.quarkus.runtime.annotations.Recorder;\n+\n+@Recorder\n+public class BannerRecorder {\n+\n+    public RuntimeValue<Optional<Supplier<String>>> provideBannerSupplier(String bannerText,\n+            BannerRuntimeConfig bannerRuntimeConfig) {\n+        if (bannerRuntimeConfig.enabled) {\n+            return new RuntimeValue<>(Optional.of(() -> bannerText));", "originalCommit": "3ed381b2dd75d85fb961a310036bf7468d0ce31a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIxMjYxOQ==", "url": "https://github.com/quarkusio/quarkus/pull/7478#discussion_r387212619", "bodyText": "I was pondering doing this anyway... Now I have a motive to \ud83d\ude43.", "author": "geoand", "createdAt": "2020-03-03T18:32:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIwOTQ5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI2NzUzMw==", "url": "https://github.com/quarkusio/quarkus/pull/7478#discussion_r387267533", "bodyText": "Done", "author": "geoand", "createdAt": "2020-03-03T20:13:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIwOTQ5NA=="}], "type": "inlineReview", "revised_code": {"commit": "cd0a892a0ba1f30034fd0f04a468e8b5f74e6885", "chunk": "diff --git a/core/runtime/src/main/java/io/quarkus/runtime/BannerRecorder.java b/core/runtime/src/main/java/io/quarkus/runtime/BannerRecorder.java\nindex f6323d0307..3009fbbace 100644\n--- a/core/runtime/src/main/java/io/quarkus/runtime/BannerRecorder.java\n+++ b/core/runtime/src/main/java/io/quarkus/runtime/BannerRecorder.java\n\n@@ -11,8 +11,22 @@ public class BannerRecorder {\n     public RuntimeValue<Optional<Supplier<String>>> provideBannerSupplier(String bannerText,\n             BannerRuntimeConfig bannerRuntimeConfig) {\n         if (bannerRuntimeConfig.enabled) {\n-            return new RuntimeValue<>(Optional.of(() -> bannerText));\n+            return new RuntimeValue<>(Optional.of(new ConstantSupplier(bannerText)));\n         }\n         return new RuntimeValue<>(Optional.empty());\n     }\n+\n+    private static final class ConstantSupplier implements Supplier<String> {\n+\n+        private final String value;\n+\n+        public ConstantSupplier(String value) {\n+            this.value = value;\n+        }\n+\n+        @Override\n+        public String get() {\n+            return value;\n+        }\n+    }\n }\n"}}, {"oid": "cd0a892a0ba1f30034fd0f04a468e8b5f74e6885", "url": "https://github.com/quarkusio/quarkus/commit/cd0a892a0ba1f30034fd0f04a468e8b5f74e6885", "message": "Move banner to core and to prod run as well", "committedDate": "2020-03-03T20:12:46Z", "type": "forcePushed"}, {"oid": "a20329e2f937c54a4b3d56e7c6dd7d553c781a2e", "url": "https://github.com/quarkusio/quarkus/commit/a20329e2f937c54a4b3d56e7c6dd7d553c781a2e", "message": "Move banner to core and to prod run as well", "committedDate": "2020-03-04T06:52:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4ODMyNA==", "url": "https://github.com/quarkusio/quarkus/pull/7478#discussion_r387488324", "bodyText": "this will only trigger if users override the banner name and don't just put default_banner.txt into their classpath root ...which I would think most would do because then they don't need to add anything to application.properties\nshould we instead have it be that if default path can't be resolved then we load our internal resource ?", "author": "maxandersen", "createdAt": "2020-03-04T07:28:12Z", "path": "core/deployment/src/main/java/io/quarkus/deployment/steps/BannerProcessor.java", "diffHunk": "@@ -38,8 +42,12 @@ private String readBannerFile(BannerConfig config) {\n         if (resource != null) {\n             try (InputStream is = resource.openStream()) {\n                 byte[] content = FileUtil.readFileContents(is);\n-                String bannerTitle = new String(content, StandardCharsets.UTF_8);\n-                return bannerTitle + \"\\n:: Quarkus :: v\" + Version.getVersion() + '\\n';\n+                StringBuilder bannerTitle = new StringBuilder(new String(content, StandardCharsets.UTF_8));\n+                bannerTitle.append('\\n');\n+                if (!config.isDefaultPath()) {", "originalCommit": "a20329e2f937c54a4b3d56e7c6dd7d553c781a2e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4OTU2Mg==", "url": "https://github.com/quarkusio/quarkus/pull/7478#discussion_r387489562", "bodyText": "Currently what happens is the following:\nIf the user doesn't specify anything, the default is used. If the user does specify something that is not resolvable from the classpath root, we print a warning message.\nIf it is resolvable, we show it and also show the \"Powered by...\" text", "author": "geoand", "createdAt": "2020-03-04T07:31:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4ODMyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5NTA4Nw==", "url": "https://github.com/quarkusio/quarkus/pull/7478#discussion_r387495087", "bodyText": "that\u2019s not what I'm seeing:\nif I have a file in my project called src/main/resources/default_banner.txt it uses my custom logo but Powered by is not added as isDefaultPath() is still true.", "author": "maxandersen", "createdAt": "2020-03-04T07:47:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4ODMyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5NzQxMQ==", "url": "https://github.com/quarkusio/quarkus/pull/7478#discussion_r387497411", "bodyText": "Oh, now I see what you're saying. Yeah, I didn't think of that scenario and always changed the name.\nBut if you do that, there is no way to load the internal default_banner.txt, right?", "author": "geoand", "createdAt": "2020-03-04T07:53:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4ODMyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUwNDgwNg==", "url": "https://github.com/quarkusio/quarkus/pull/7478#discussion_r387504806", "bodyText": "Maybe we should just always show Powered by Quarkus and be done with it although it does look weird", "author": "geoand", "createdAt": "2020-03-04T08:12:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4ODMyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUwNTY4MA==", "url": "https://github.com/quarkusio/quarkus/pull/7478#discussion_r387505680", "bodyText": "i have an idea - let me try code it up.", "author": "maxandersen", "createdAt": "2020-03-04T08:14:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4ODMyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYwNDE3NA==", "url": "https://github.com/quarkusio/quarkus/pull/7478#discussion_r387604174", "bodyText": "Nevermind my question above. We definitely can load all default_banner.txt. I'll take a look", "author": "geoand", "createdAt": "2020-03-04T11:22:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4ODMyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYzMDE4OA==", "url": "https://github.com/quarkusio/quarkus/pull/7478#discussion_r387630188", "bodyText": "PR to updated to take your use case into account", "author": "geoand", "createdAt": "2020-03-04T12:19:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4ODMyNA=="}], "type": "inlineReview", "revised_code": {"commit": "6b3d6fbbc5027f05c9025afaac99ee1dac778f7c", "chunk": "diff --git a/core/deployment/src/main/java/io/quarkus/deployment/steps/BannerProcessor.java b/core/deployment/src/main/java/io/quarkus/deployment/steps/BannerProcessor.java\nindex 36b5a0edde..7dfc90a31c 100644\n--- a/core/deployment/src/main/java/io/quarkus/deployment/steps/BannerProcessor.java\n+++ b/core/deployment/src/main/java/io/quarkus/deployment/steps/BannerProcessor.java\n\n@@ -38,22 +49,73 @@ public class BannerProcessor {\n     }\n \n     private String readBannerFile(BannerConfig config) {\n-        URL resource = Thread.currentThread().getContextClassLoader().getResource(config.path);\n-        if (resource != null) {\n-            try (InputStream is = resource.openStream()) {\n+        try {\n+            Map.Entry<URL, Boolean> entry = getBanner(config);\n+            URL bannerResourceURL = entry.getKey();\n+            if (bannerResourceURL == null) {\n+                logger.warn(\"Could not locate banner file\");\n+                return \"\";\n+            }\n+            try (InputStream is = bannerResourceURL.openStream()) {\n                 byte[] content = FileUtil.readFileContents(is);\n-                StringBuilder bannerTitle = new StringBuilder(new String(content, StandardCharsets.UTF_8));\n-                bannerTitle.append('\\n');\n-                if (!config.isDefaultPath()) {\n-                    bannerTitle.append(\"Powered by Quarkus v\").append(Version.getVersion()).append('\\n');\n+                String bannerTitle = new String(content, StandardCharsets.UTF_8);\n+\n+                int width = 0;\n+                Scanner scanner = new Scanner(bannerTitle);\n+                while (scanner.hasNextLine()) {\n+                    width = Math.max(width, scanner.nextLine().length());\n+                }\n+\n+                String tagline = \"\\n\";\n+                Boolean isDefaultBanner = entry.getValue();\n+                if (!isDefaultBanner) {\n+                    tagline = String.format(\"\\n%\" + width + \"s\\n\", \"Powered by Quarkus v\" + Version.getVersion());\n                 }\n-                return bannerTitle.toString();\n-            } catch (IOException e) {\n-                throw new UncheckedIOException(e);\n+\n+                return bannerTitle + tagline;\n             }\n-        } else {\n-            logger.warn(\"Could not read banner file\");\n+        } catch (IOException e) {\n+            logger.warn(\"Unable to read banner file\");\n             return \"\";\n         }\n     }\n+\n+    /**\n+     * @return an entry containing the text of the banner as the key and whether or not the default banner is being used as the\n+     *         value. The default banner is used as a last report\n+     */\n+    private Map.Entry<URL, Boolean> getBanner(BannerConfig config) throws IOException {\n+        Enumeration<URL> resources = Thread.currentThread().getContextClassLoader().getResources(config.path);\n+        URL defaultBanner = null;\n+        URL selectedBanner = null;\n+        while (resources.hasMoreElements()) {\n+            URL url = resources.nextElement();\n+            if (defaultBanner == null && isQuarkusCoreBanner(url)) {\n+                defaultBanner = url;\n+            }\n+            if (selectedBanner == null) {\n+                selectedBanner = url;\n+            }\n+        }\n+        return new AbstractMap.SimpleEntry<>(selectedBanner, defaultBanner == selectedBanner);\n+    }\n+\n+    private boolean isQuarkusCoreBanner(URL url) throws IOException {\n+        if (!\"jar\".equals(url.getProtocol())) {\n+            return false;\n+        }\n+\n+        // we determine whether the banner is default by checking to see if jar contains this class\n+        // this way although somewhat complicated guarantees that any rename of artifacts won't affect the check\n+        try (FileSystem fileSystem = FileSystems.newFileSystem(url.toURI(), Collections.emptyMap())) {\n+            String name = this.getClass().getName();\n+            String[] parts = name.split(\"\\\\.\");\n+            List<String> rest = new ArrayList<>(parts.length - 1);\n+            rest.addAll(Arrays.asList(parts).subList(1, parts.length - 1));\n+            rest.add(parts[parts.length - 1] + \".class\");\n+            return Files.exists(fileSystem.getPath(parts[0], rest.toArray(new String[] {})));\n+        } catch (URISyntaxException e) {\n+            return false;\n+        }\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4ODU1Ng==", "url": "https://github.com/quarkusio/quarkus/pull/7478#discussion_r387488556", "bodyText": "I got a PR on geoand#1 but for right padding but for some reason that gives me a NPE in the java compiler ;)", "author": "maxandersen", "createdAt": "2020-03-04T07:28:42Z", "path": "core/deployment/src/main/java/io/quarkus/deployment/steps/BannerProcessor.java", "diffHunk": "@@ -38,8 +42,12 @@ private String readBannerFile(BannerConfig config) {\n         if (resource != null) {\n             try (InputStream is = resource.openStream()) {\n                 byte[] content = FileUtil.readFileContents(is);\n-                String bannerTitle = new String(content, StandardCharsets.UTF_8);\n-                return bannerTitle + \"\\n:: Quarkus :: v\" + Version.getVersion() + '\\n';\n+                StringBuilder bannerTitle = new StringBuilder(new String(content, StandardCharsets.UTF_8));\n+                bannerTitle.append('\\n');\n+                if (!config.isDefaultPath()) {\n+                    bannerTitle.append(\"Powered by Quarkus v\").append(Version.getVersion()).append('\\n');", "originalCommit": "a20329e2f937c54a4b3d56e7c6dd7d553c781a2e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6b3d6fbbc5027f05c9025afaac99ee1dac778f7c", "chunk": "diff --git a/core/deployment/src/main/java/io/quarkus/deployment/steps/BannerProcessor.java b/core/deployment/src/main/java/io/quarkus/deployment/steps/BannerProcessor.java\nindex 36b5a0edde..7dfc90a31c 100644\n--- a/core/deployment/src/main/java/io/quarkus/deployment/steps/BannerProcessor.java\n+++ b/core/deployment/src/main/java/io/quarkus/deployment/steps/BannerProcessor.java\n\n@@ -38,22 +49,73 @@ public class BannerProcessor {\n     }\n \n     private String readBannerFile(BannerConfig config) {\n-        URL resource = Thread.currentThread().getContextClassLoader().getResource(config.path);\n-        if (resource != null) {\n-            try (InputStream is = resource.openStream()) {\n+        try {\n+            Map.Entry<URL, Boolean> entry = getBanner(config);\n+            URL bannerResourceURL = entry.getKey();\n+            if (bannerResourceURL == null) {\n+                logger.warn(\"Could not locate banner file\");\n+                return \"\";\n+            }\n+            try (InputStream is = bannerResourceURL.openStream()) {\n                 byte[] content = FileUtil.readFileContents(is);\n-                StringBuilder bannerTitle = new StringBuilder(new String(content, StandardCharsets.UTF_8));\n-                bannerTitle.append('\\n');\n-                if (!config.isDefaultPath()) {\n-                    bannerTitle.append(\"Powered by Quarkus v\").append(Version.getVersion()).append('\\n');\n+                String bannerTitle = new String(content, StandardCharsets.UTF_8);\n+\n+                int width = 0;\n+                Scanner scanner = new Scanner(bannerTitle);\n+                while (scanner.hasNextLine()) {\n+                    width = Math.max(width, scanner.nextLine().length());\n+                }\n+\n+                String tagline = \"\\n\";\n+                Boolean isDefaultBanner = entry.getValue();\n+                if (!isDefaultBanner) {\n+                    tagline = String.format(\"\\n%\" + width + \"s\\n\", \"Powered by Quarkus v\" + Version.getVersion());\n                 }\n-                return bannerTitle.toString();\n-            } catch (IOException e) {\n-                throw new UncheckedIOException(e);\n+\n+                return bannerTitle + tagline;\n             }\n-        } else {\n-            logger.warn(\"Could not read banner file\");\n+        } catch (IOException e) {\n+            logger.warn(\"Unable to read banner file\");\n             return \"\";\n         }\n     }\n+\n+    /**\n+     * @return an entry containing the text of the banner as the key and whether or not the default banner is being used as the\n+     *         value. The default banner is used as a last report\n+     */\n+    private Map.Entry<URL, Boolean> getBanner(BannerConfig config) throws IOException {\n+        Enumeration<URL> resources = Thread.currentThread().getContextClassLoader().getResources(config.path);\n+        URL defaultBanner = null;\n+        URL selectedBanner = null;\n+        while (resources.hasMoreElements()) {\n+            URL url = resources.nextElement();\n+            if (defaultBanner == null && isQuarkusCoreBanner(url)) {\n+                defaultBanner = url;\n+            }\n+            if (selectedBanner == null) {\n+                selectedBanner = url;\n+            }\n+        }\n+        return new AbstractMap.SimpleEntry<>(selectedBanner, defaultBanner == selectedBanner);\n+    }\n+\n+    private boolean isQuarkusCoreBanner(URL url) throws IOException {\n+        if (!\"jar\".equals(url.getProtocol())) {\n+            return false;\n+        }\n+\n+        // we determine whether the banner is default by checking to see if jar contains this class\n+        // this way although somewhat complicated guarantees that any rename of artifacts won't affect the check\n+        try (FileSystem fileSystem = FileSystems.newFileSystem(url.toURI(), Collections.emptyMap())) {\n+            String name = this.getClass().getName();\n+            String[] parts = name.split(\"\\\\.\");\n+            List<String> rest = new ArrayList<>(parts.length - 1);\n+            rest.addAll(Arrays.asList(parts).subList(1, parts.length - 1));\n+            rest.add(parts[parts.length - 1] + \".class\");\n+            return Files.exists(fileSystem.getPath(parts[0], rest.toArray(new String[] {})));\n+        } catch (URISyntaxException e) {\n+            return false;\n+        }\n+    }\n }\n"}}, {"oid": "6b3d6fbbc5027f05c9025afaac99ee1dac778f7c", "url": "https://github.com/quarkusio/quarkus/commit/6b3d6fbbc5027f05c9025afaac99ee1dac778f7c", "message": "Display the banner subtitle only when the default banner is not being used", "committedDate": "2020-03-04T12:28:44Z", "type": "forcePushed"}, {"oid": "765a229a0916fbdd7b4e1248a0c0e0d993e5fc57", "url": "https://github.com/quarkusio/quarkus/commit/765a229a0916fbdd7b4e1248a0c0e0d993e5fc57", "message": "Display the banner subtitle only when the default banner is not being used", "committedDate": "2020-03-04T12:36:15Z", "type": "forcePushed"}, {"oid": "8b08df800334d0a7fbb8b69c8d15f9d2930461f1", "url": "https://github.com/quarkusio/quarkus/commit/8b08df800334d0a7fbb8b69c8d15f9d2930461f1", "message": "Display the banner subtitle only when the default banner is not being used", "committedDate": "2020-03-04T12:36:44Z", "type": "forcePushed"}, {"oid": "3000b56027c8f608835744b8ae9bba3aabc8d4e2", "url": "https://github.com/quarkusio/quarkus/commit/3000b56027c8f608835744b8ae9bba3aabc8d4e2", "message": "Add property that controls whether or not the banner will be displayed", "committedDate": "2020-03-04T13:37:13Z", "type": "commit"}, {"oid": "262beb5b9f1bee74689d6c82e1c26343e5c74f42", "url": "https://github.com/quarkusio/quarkus/commit/262beb5b9f1bee74689d6c82e1c26343e5c74f42", "message": "Make banner only show up in dev-mode", "committedDate": "2020-03-04T13:37:13Z", "type": "commit"}, {"oid": "7fbcc7dbf4f413cf8c7e4f7521719c3c27a13f4f", "url": "https://github.com/quarkusio/quarkus/commit/7fbcc7dbf4f413cf8c7e4f7521719c3c27a13f4f", "message": "Move banner to core and to prod run as well", "committedDate": "2020-03-04T13:37:13Z", "type": "commit"}, {"oid": "8a635de95470d2ea69a9a70dff0185fdccb8b90e", "url": "https://github.com/quarkusio/quarkus/commit/8a635de95470d2ea69a9a70dff0185fdccb8b90e", "message": "right pad banner title", "committedDate": "2020-03-04T13:37:13Z", "type": "commit"}, {"oid": "df70aedd4ca74d92ff4cad0def3b575009d90c65", "url": "https://github.com/quarkusio/quarkus/commit/df70aedd4ca74d92ff4cad0def3b575009d90c65", "message": "Display the banner subtitle only when the default banner is not being used", "committedDate": "2020-03-04T13:37:13Z", "type": "commit"}, {"oid": "df70aedd4ca74d92ff4cad0def3b575009d90c65", "url": "https://github.com/quarkusio/quarkus/commit/df70aedd4ca74d92ff4cad0def3b575009d90c65", "message": "Display the banner subtitle only when the default banner is not being used", "committedDate": "2020-03-04T13:37:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc0MTM1Nw==", "url": "https://github.com/quarkusio/quarkus/pull/7478#discussion_r387741357", "bodyText": "The more and more I think about it i think we are better of just always print this tag line...", "author": "maxandersen", "createdAt": "2020-03-04T15:28:32Z", "path": "core/deployment/src/main/java/io/quarkus/deployment/steps/BannerProcessor.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package io.quarkus.deployment.steps;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.FileSystem;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.util.AbstractMap;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Scanner;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.banner.BannerConfig;\n+import io.quarkus.builder.Version;\n+import io.quarkus.deployment.IsTest;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.annotations.ExecutionTime;\n+import io.quarkus.deployment.annotations.Record;\n+import io.quarkus.deployment.builditem.ConsoleFormatterBannerBuildItem;\n+import io.quarkus.deployment.builditem.HotDeploymentWatchedFileBuildItem;\n+import io.quarkus.deployment.util.FileUtil;\n+import io.quarkus.runtime.BannerRecorder;\n+import io.quarkus.runtime.BannerRuntimeConfig;\n+\n+public class BannerProcessor {\n+\n+    private static final Logger logger = Logger.getLogger(BannerProcessor.class);\n+\n+    @BuildStep(loadsApplicationClasses = true, onlyIfNot = { IsTest.class })\n+    @Record(ExecutionTime.RUNTIME_INIT)\n+    public ConsoleFormatterBannerBuildItem recordBanner(BannerRecorder recorder, BannerConfig config,\n+            BannerRuntimeConfig bannerRuntimeConfig) {\n+        String bannerText = readBannerFile(config);\n+        return new ConsoleFormatterBannerBuildItem(recorder.provideBannerSupplier(bannerText, bannerRuntimeConfig));\n+    }\n+\n+    @BuildStep\n+    HotDeploymentWatchedFileBuildItem watchBannerChanges(BannerConfig config) {\n+        return new HotDeploymentWatchedFileBuildItem(config.path);\n+    }\n+\n+    private String readBannerFile(BannerConfig config) {\n+        try {\n+            Map.Entry<URL, Boolean> entry = getBanner(config);\n+            URL bannerResourceURL = entry.getKey();\n+            if (bannerResourceURL == null) {\n+                logger.warn(\"Could not locate banner file\");\n+                return \"\";\n+            }\n+            try (InputStream is = bannerResourceURL.openStream()) {\n+                byte[] content = FileUtil.readFileContents(is);\n+                String bannerTitle = new String(content, StandardCharsets.UTF_8);\n+\n+                int width = 0;\n+                Scanner scanner = new Scanner(bannerTitle);\n+                while (scanner.hasNextLine()) {\n+                    width = Math.max(width, scanner.nextLine().length());\n+                }\n+\n+                String tagline = \"\\n\";\n+                Boolean isDefaultBanner = entry.getValue();\n+                if (!isDefaultBanner) {", "originalCommit": "df70aedd4ca74d92ff4cad0def3b575009d90c65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc0NzQyMA==", "url": "https://github.com/quarkusio/quarkus/pull/7478#discussion_r387747420", "bodyText": "I thought @emmanuelbernard wanted to always print this tag line?", "author": "gastaldi", "createdAt": "2020-03-04T15:36:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc0MTM1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc0OTk5Ng==", "url": "https://github.com/quarkusio/quarkus/pull/7478#discussion_r387749996", "bodyText": "All I said is that it said  Quarkus in the banner and right below powered by Quarkus v123 and Quarkus powered by Quarkus felt wrong to me.\nBut since we put the version too, maybe that's fine and we just always say Powered by Quarkus v123. I certainly did not want to spend 5FTE for 5 years on this problem :D", "author": "emmanuelbernard", "createdAt": "2020-03-04T15:40:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc0MTM1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc1Njc2OA==", "url": "https://github.com/quarkusio/quarkus/pull/7478#discussion_r387756768", "bodyText": "In that spirit, I saw we merge it now and then people can test and improve on something that actually exists and isn't vaporware :)", "author": "geoand", "createdAt": "2020-03-04T15:50:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc0MTM1Nw=="}], "type": "inlineReview", "revised_code": null}]}