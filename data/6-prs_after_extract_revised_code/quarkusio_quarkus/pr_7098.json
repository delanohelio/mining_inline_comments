{"pr_number": 7098, "pr_title": "Add support for Vert.x Mutiny", "pr_createdAt": "2020-02-09T11:03:09Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/7098", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk1MTUxNA==", "url": "https://github.com/quarkusio/quarkus/pull/7098#discussion_r376951514", "bodyText": "Usually, we even say \"is deprecated and will be removed in a future version\". Because I suppose that's the case, isn't it?", "author": "gsmet", "createdAt": "2020-02-10T09:38:35Z", "path": "extensions/vertx/runtime/src/main/java/io/quarkus/vertx/runtime/VertxProducer.java", "diffHunk": "@@ -37,25 +41,58 @@ public EventBus eventbus() {\n \n     @Singleton\n     @Produces\n-    public io.vertx.axle.core.Vertx axle() {\n+    public synchronized io.vertx.mutiny.core.Vertx mutiny() {\n+        if (mutinyVertx == null) {\n+            mutinyVertx = io.vertx.mutiny.core.Vertx.newInstance(vertx);\n+        }\n+        return mutinyVertx;\n+    }\n+\n+    @Singleton\n+    @Produces\n+    @Deprecated\n+    public synchronized io.vertx.axle.core.Vertx axle() {\n+        if (axleVertx == null) {\n+            LOGGER.warn(\n+                    \"`io.vertx.axle.core.Vertx` is deprecated - it is recommended to switch to `io.vertx.mutiny.core.Vertx`\");", "originalCommit": "f4dc16edfc1751ed87e23d9e94323a3b5f9122b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk5OTMxNQ==", "url": "https://github.com/quarkusio/quarkus/pull/7098#discussion_r376999315", "bodyText": "Yes, it's a good idea to inform the user of future removal.", "author": "cescoffier", "createdAt": "2020-02-10T11:10:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk1MTUxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAzMjg1Nw==", "url": "https://github.com/quarkusio/quarkus/pull/7098#discussion_r377032857", "bodyText": "Fixed, also changed the bytecode version (related to @ConsumeEvent)", "author": "cescoffier", "createdAt": "2020-02-10T12:27:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk1MTUxNA=="}], "type": "inlineReview", "revised_code": {"commit": "29bbe9a6d7b55926ba721710b88e5e57e422cf52", "chunk": "diff --git a/extensions/vertx/runtime/src/main/java/io/quarkus/vertx/runtime/VertxProducer.java b/extensions/vertx/runtime/src/main/java/io/quarkus/vertx/runtime/VertxProducer.java\nindex 0ae6c670fd..f1a2adb023 100644\n--- a/extensions/vertx/runtime/src/main/java/io/quarkus/vertx/runtime/VertxProducer.java\n+++ b/extensions/vertx/runtime/src/main/java/io/quarkus/vertx/runtime/VertxProducer.java\n\n@@ -54,7 +54,8 @@ public class VertxProducer {\n     public synchronized io.vertx.axle.core.Vertx axle() {\n         if (axleVertx == null) {\n             LOGGER.warn(\n-                    \"`io.vertx.axle.core.Vertx` is deprecated - it is recommended to switch to `io.vertx.mutiny.core.Vertx`\");\n+                    \"`io.vertx.axle.core.Vertx` is deprecated and will be removed in a future version - it is \"\n+                            + \"recommended to switch to `io.vertx.mutiny.core.Vertx`\");\n             axleVertx = io.vertx.axle.core.Vertx.newInstance(vertx);\n         }\n         return axleVertx;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk1NDU0Nw==", "url": "https://github.com/quarkusio/quarkus/pull/7098#discussion_r376954547", "bodyText": "Looks like we lose the stacktrace here. That's expected?", "author": "gsmet", "createdAt": "2020-02-10T09:44:20Z", "path": "extensions/vertx/deployment/src/main/java/io/quarkus/vertx/deployment/EventBusConsumer.java", "diffHunk": "@@ -231,6 +243,58 @@ private static void invoke(BeanInfo bean, MethodInfo method, ResultHandle messag\n         }\n     }\n \n+    /**\n+     * If the return type is CompletionStage use:\n+     * <code><pre>\n+     * cs.whenComplete((whenResult, whenFailure) -> {\n+     *  if (failure != null) {\n+     *         message.fail(status, whenFailure.getMessage());\n+     *  } else {\n+     *         message.reply(whenResult);\n+     *  }\n+     * })\n+     * </pre></code>\n+     *\n+     * @param messageHandle the message variable\n+     * @param invoke the bytecode creator\n+     * @return the function\n+     */\n+    private static FunctionCreator generateWhenCompleteHandler(ResultHandle messageHandle, BytecodeCreator invoke) {\n+        FunctionCreator handler = invoke.createFunction(BiConsumer.class);\n+        BytecodeCreator bytecode = handler.getBytecode();\n+\n+        // This avoid having to check cast in the branches\n+        AssignableResultHandle whenResult = bytecode.createVariable(Object.class);\n+        bytecode.assign(whenResult, bytecode.getMethodParam(0));\n+        AssignableResultHandle whenFailure = bytecode.createVariable(Exception.class);\n+        bytecode.assign(whenFailure, bytecode.getMethodParam(1));\n+        AssignableResultHandle message = bytecode.createVariable(Message.class);\n+        bytecode.assign(message, messageHandle);\n+\n+        BranchResult ifFailureIfNull = bytecode.ifNull(whenFailure);\n+        // failure is not null branch - message.fail(failureStatus, failure.getMessage())\n+        // In this branch we use the EXPLICIT FAILURE CODE\n+        BytecodeCreator failureIsNotNull = ifFailureIfNull.falseBranch();\n+        ResultHandle failureStatus = failureIsNotNull.load(ConsumeEvent.EXPLICIT_FAILURE_CODE);\n+        ResultHandle failureMessage = failureIsNotNull\n+                .invokeVirtualMethod(THROWABLE_GET_MESSAGE, whenFailure);\n+        failureIsNotNull.invokeInterfaceMethod(\n+                MESSAGE_FAIL,\n+                message,\n+                failureStatus,\n+                failureMessage);", "originalCommit": "2f585219e9a4bced13ab8199212efa5f8d128e03", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk5MzY5Nw==", "url": "https://github.com/quarkusio/quarkus/pull/7098#discussion_r376993697", "bodyText": "Yes, it's how the vert.x event bus work. Anyway, it's async, stack traces are not very useful in this case. Note that it could also work remotely.", "author": "cescoffier", "createdAt": "2020-02-10T10:58:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk1NDU0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "14341e7b4b263335ee01b3eb2520e475246068ba", "chunk": "diff --git a/extensions/vertx/deployment/src/main/java/io/quarkus/vertx/deployment/EventBusConsumer.java b/extensions/vertx/deployment/src/main/java/io/quarkus/vertx/deployment/EventBusConsumer.java\nindex baeaebedbb..bb485cb6d9 100644\n--- a/extensions/vertx/deployment/src/main/java/io/quarkus/vertx/deployment/EventBusConsumer.java\n+++ b/extensions/vertx/deployment/src/main/java/io/quarkus/vertx/deployment/EventBusConsumer.java\n\n@@ -243,58 +184,6 @@ class EventBusConsumer {\n         }\n     }\n \n-    /**\n-     * If the return type is CompletionStage use:\n-     * <code><pre>\n-     * cs.whenComplete((whenResult, whenFailure) -> {\n-     *  if (failure != null) {\n-     *         message.fail(status, whenFailure.getMessage());\n-     *  } else {\n-     *         message.reply(whenResult);\n-     *  }\n-     * })\n-     * </pre></code>\n-     *\n-     * @param messageHandle the message variable\n-     * @param invoke the bytecode creator\n-     * @return the function\n-     */\n-    private static FunctionCreator generateWhenCompleteHandler(ResultHandle messageHandle, BytecodeCreator invoke) {\n-        FunctionCreator handler = invoke.createFunction(BiConsumer.class);\n-        BytecodeCreator bytecode = handler.getBytecode();\n-\n-        // This avoid having to check cast in the branches\n-        AssignableResultHandle whenResult = bytecode.createVariable(Object.class);\n-        bytecode.assign(whenResult, bytecode.getMethodParam(0));\n-        AssignableResultHandle whenFailure = bytecode.createVariable(Exception.class);\n-        bytecode.assign(whenFailure, bytecode.getMethodParam(1));\n-        AssignableResultHandle message = bytecode.createVariable(Message.class);\n-        bytecode.assign(message, messageHandle);\n-\n-        BranchResult ifFailureIfNull = bytecode.ifNull(whenFailure);\n-        // failure is not null branch - message.fail(failureStatus, failure.getMessage())\n-        // In this branch we use the EXPLICIT FAILURE CODE\n-        BytecodeCreator failureIsNotNull = ifFailureIfNull.falseBranch();\n-        ResultHandle failureStatus = failureIsNotNull.load(ConsumeEvent.EXPLICIT_FAILURE_CODE);\n-        ResultHandle failureMessage = failureIsNotNull\n-                .invokeVirtualMethod(THROWABLE_GET_MESSAGE, whenFailure);\n-        failureIsNotNull.invokeInterfaceMethod(\n-                MESSAGE_FAIL,\n-                message,\n-                failureStatus,\n-                failureMessage);\n-\n-        // failure is null branch - message.reply(reply))\n-        BytecodeCreator failureIsNull = ifFailureIfNull.trueBranch();\n-        failureIsNull.invokeInterfaceMethod(\n-                MESSAGE_REPLY,\n-                messageHandle,\n-                whenResult);\n-\n-        bytecode.returnValue(null);\n-        return handler;\n-    }\n-\n     private EventBusConsumer() {\n         // Avoid direct instantiation.\n     }\n"}}, {"oid": "29bbe9a6d7b55926ba721710b88e5e57e422cf52", "url": "https://github.com/quarkusio/quarkus/commit/29bbe9a6d7b55926ba721710b88e5e57e422cf52", "message": "Extend deprecation message with a removal notice", "committedDate": "2020-02-10T12:30:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMxNDQwNA==", "url": "https://github.com/quarkusio/quarkus/pull/7098#discussion_r377314404", "bodyText": "Remove any System.outs  from the code (including tests)", "author": "gastaldi", "createdAt": "2020-02-10T21:02:29Z", "path": "extensions/vertx/deployment/src/test/java/io/quarkus/vertx/deployment/MessageConsumerFailureTest.java", "diffHunk": "@@ -35,18 +38,24 @@\n \n     @Test\n     public void testFailure() throws InterruptedException {\n-        verifyFailure(\"foo\", \"java.lang.IllegalStateException: Foo is dead\");\n-        verifyFailure(\"foo-message\", \"java.lang.NullPointerException\");\n-        verifyFailure(\"foo-completion-stage\", \"java.lang.NullPointerException: Something is null\");\n+        verifyFailure(\"foo\", \"java.lang.IllegalStateException: Foo is dead\", false);\n+        verifyFailure(\"foo-message\", \"java.lang.NullPointerException\", false);\n+        verifyFailure(\"foo-completion-stage\", \"java.lang.NullPointerException: Something is null\", false);\n+        verifyFailure(\"foo-completion-stage-failure\", \"boom\", true);\n+        verifyFailure(\"foo-uni\", \"java.lang.NullPointerException: Something is null\", false);\n+        verifyFailure(\"foo-uni-failure\", \"boom\", true);\n     }\n \n-    void verifyFailure(String address, String expectedMessage) throws InterruptedException {\n+    void verifyFailure(String address, String expectedMessage, boolean explicit) throws InterruptedException {\n         BlockingQueue<Object> synchronizer = new LinkedBlockingQueue<>();\n+        System.out.println(\"sending to \" + address);", "originalCommit": "29bbe9a6d7b55926ba721710b88e5e57e422cf52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ2MjQ5OQ==", "url": "https://github.com/quarkusio/quarkus/pull/7098#discussion_r377462499", "bodyText": "Thanks! I don't even remember adding these traces. They have been removed.", "author": "cescoffier", "createdAt": "2020-02-11T06:32:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMxNDQwNA=="}], "type": "inlineReview", "revised_code": {"commit": "88dfd6924a8f301740b5f913bc0e2449b92eab86", "chunk": "diff --git a/extensions/vertx/deployment/src/test/java/io/quarkus/vertx/deployment/MessageConsumerFailureTest.java b/extensions/vertx/deployment/src/test/java/io/quarkus/vertx/deployment/MessageConsumerFailureTest.java\nindex 732c52fafc..690600230c 100644\n--- a/extensions/vertx/deployment/src/test/java/io/quarkus/vertx/deployment/MessageConsumerFailureTest.java\n+++ b/extensions/vertx/deployment/src/test/java/io/quarkus/vertx/deployment/MessageConsumerFailureTest.java\n\n@@ -48,14 +48,11 @@ public class MessageConsumerFailureTest {\n \n     void verifyFailure(String address, String expectedMessage, boolean explicit) throws InterruptedException {\n         BlockingQueue<Object> synchronizer = new LinkedBlockingQueue<>();\n-        System.out.println(\"sending to \" + address);\n         eventBus.request(address, \"hello\", ar -> {\n-            System.out.println(\"Result from \" + address);\n             try {\n                 if (ar.cause() != null) {\n                     synchronizer.put(ar.cause());\n                 } else {\n-                    System.out.println(\"succeeded? \" + ar.result());\n                     synchronizer.put(false);\n                 }\n             } catch (InterruptedException e) {\n"}}, {"oid": "88dfd6924a8f301740b5f913bc0e2449b92eab86", "url": "https://github.com/quarkusio/quarkus/commit/88dfd6924a8f301740b5f913bc0e2449b92eab86", "message": "Extend deprecation message with a removal notice", "committedDate": "2020-02-11T06:31:37Z", "type": "forcePushed"}, {"oid": "14341e7b4b263335ee01b3eb2520e475246068ba", "url": "https://github.com/quarkusio/quarkus/commit/14341e7b4b263335ee01b3eb2520e475246068ba", "message": "Update Axle and declare the Mutiny and Vert.x Mutiny dependencies", "committedDate": "2020-02-12T08:25:52Z", "type": "commit"}, {"oid": "34dc5aa710d865584e12aa03dbe1da566aed9111", "url": "https://github.com/quarkusio/quarkus/commit/34dc5aa710d865584e12aa03dbe1da566aed9111", "message": "Create the Mutiny extension\n\nNo substitution required in the extension", "committedDate": "2020-02-12T08:25:52Z", "type": "commit"}, {"oid": "d7a1ab78d21f79033ea852c1e23c44570a2e84bf", "url": "https://github.com/quarkusio/quarkus/commit/d7a1ab78d21f79033ea852c1e23c44570a2e84bf", "message": "Produce the Mutiny Vert.x instance\n\nAlso log a deprecation message when the Axle or RX Java 2 instances are creation", "committedDate": "2020-02-12T08:25:52Z", "type": "commit"}, {"oid": "a108a2be8a3eb831409fd9db94d24777c818a5d2", "url": "https://github.com/quarkusio/quarkus/commit/a108a2be8a3eb831409fd9db94d24777c818a5d2", "message": "Add support of the Mutiny variant of Message in @ConsumeEvent\n\nWhen a @ConsumeEvent using the Rx Java or Axle variant of Message a log message is printed indicating the deprecation of these types.", "committedDate": "2020-02-12T08:25:52Z", "type": "commit"}, {"oid": "9557cb4c35670cd6eebe1350570fb8e6a7c17e0c", "url": "https://github.com/quarkusio/quarkus/commit/9557cb4c35670cd6eebe1350570fb8e6a7c17e0c", "message": "Allow @ConsumeEvent method to return Uni instances\n\nAlso implement the management of explicit async failure for CompletionStage and Uni.", "committedDate": "2020-02-12T08:25:52Z", "type": "commit"}, {"oid": "81ce1185eb5dd3d4d78cdb901e985afbc529b5a8", "url": "https://github.com/quarkusio/quarkus/commit/81ce1185eb5dd3d4d78cdb901e985afbc529b5a8", "message": "Update the Vert.x guide to mention the Mutiny API\n\nCo-Authored-By: Guillaume Smet <guillaume.smet@gmail.com>", "committedDate": "2020-02-12T08:25:52Z", "type": "commit"}, {"oid": "7db5c2f5f356a4b9e82c6832f1ae6277a9a6efc3", "url": "https://github.com/quarkusio/quarkus/commit/7db5c2f5f356a4b9e82c6832f1ae6277a9a6efc3", "message": "Update the async message passing documentation to mention Mutiny support\n\nCo-Authored-By: Guillaume Smet <guillaume.smet@gmail.com>", "committedDate": "2020-02-12T08:25:52Z", "type": "commit"}, {"oid": "afb34c7e967f7d0bf974f8dcaff3a5e5468e7731", "url": "https://github.com/quarkusio/quarkus/commit/afb34c7e967f7d0bf974f8dcaff3a5e5468e7731", "message": "Extend deprecation message with a removal notice", "committedDate": "2020-02-12T08:25:52Z", "type": "commit"}, {"oid": "afb34c7e967f7d0bf974f8dcaff3a5e5468e7731", "url": "https://github.com/quarkusio/quarkus/commit/afb34c7e967f7d0bf974f8dcaff3a5e5468e7731", "message": "Extend deprecation message with a removal notice", "committedDate": "2020-02-12T08:25:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMwMTU0NA==", "url": "https://github.com/quarkusio/quarkus/pull/7098#discussion_r378301544", "bodyText": "Instead of booleans, it would be better to pass the expected replyException.failureCode(). That would get rid of the ifstatement in the verifyFailure method", "author": "gastaldi", "createdAt": "2020-02-12T14:55:00Z", "path": "extensions/vertx/deployment/src/test/java/io/quarkus/vertx/deployment/MessageConsumerFailureTest.java", "diffHunk": "@@ -35,12 +38,15 @@\n \n     @Test\n     public void testFailure() throws InterruptedException {\n-        verifyFailure(\"foo\", \"java.lang.IllegalStateException: Foo is dead\");\n-        verifyFailure(\"foo-message\", \"java.lang.NullPointerException\");\n-        verifyFailure(\"foo-completion-stage\", \"java.lang.NullPointerException: Something is null\");\n+        verifyFailure(\"foo\", \"java.lang.IllegalStateException: Foo is dead\", false);\n+        verifyFailure(\"foo-message\", \"java.lang.NullPointerException\", false);\n+        verifyFailure(\"foo-completion-stage\", \"java.lang.NullPointerException: Something is null\", false);\n+        verifyFailure(\"foo-completion-stage-failure\", \"boom\", true);\n+        verifyFailure(\"foo-uni\", \"java.lang.NullPointerException: Something is null\", false);", "originalCommit": "afb34c7e967f7d0bf974f8dcaff3a5e5468e7731", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}