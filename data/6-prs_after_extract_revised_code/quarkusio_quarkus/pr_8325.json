{"pr_number": 8325, "pr_title": "deprecate buildNative gradle task", "pr_createdAt": "2020-04-01T09:16:29Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/8325", "timeline": [{"oid": "13cbe9f8570b248016bd4bbbf75cde080c100874", "url": "https://github.com/quarkusio/quarkus/commit/13cbe9f8570b248016bd4bbbf75cde080c100874", "message": "deprecate buildNative gradle task", "committedDate": "2020-04-01T11:42:55Z", "type": "forcePushed"}, {"oid": "a14c10d403aafe7650acdd0da151128d161e2e64", "url": "https://github.com/quarkusio/quarkus/commit/a14c10d403aafe7650acdd0da151128d161e2e64", "message": "deprecate buildNative gradle task", "committedDate": "2020-04-03T18:00:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMwOTY3Nw==", "url": "https://github.com/quarkusio/quarkus/pull/8325#discussion_r403309677", "bodyText": "No need for parenthesis here", "author": "gastaldi", "createdAt": "2020-04-03T20:28:57Z", "path": "devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusNative.java", "diffHunk": "@@ -353,9 +361,9 @@ public void setReportExceptionStackTraces(boolean reportExceptionStackTraces) {\n         this.reportExceptionStackTraces = reportExceptionStackTraces;\n     }\n \n-    @TaskAction\n+    @TaskAction()", "originalCommit": "a14c10d403aafe7650acdd0da151128d161e2e64", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cd07129eee3bf254ebc801f79174f1bf20117a5f", "chunk": "diff --git a/devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusNative.java b/devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusNative.java\ndeleted file mode 100644\nindex 71213e332b..0000000000\n--- a/devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusNative.java\n+++ /dev/null\n\n@@ -1,519 +0,0 @@\n-package io.quarkus.gradle.tasks;\n-\n-import static java.util.stream.Collectors.joining;\n-\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Properties;\n-import java.util.Set;\n-\n-import org.eclipse.microprofile.config.spi.ConfigSource;\n-import org.gradle.api.GradleException;\n-import org.gradle.api.tasks.Input;\n-import org.gradle.api.tasks.Optional;\n-import org.gradle.api.tasks.TaskAction;\n-import org.gradle.api.tasks.options.Option;\n-\n-import io.quarkus.bootstrap.BootstrapException;\n-import io.quarkus.bootstrap.app.CuratedApplication;\n-import io.quarkus.bootstrap.app.QuarkusBootstrap;\n-import io.quarkus.bootstrap.model.AppArtifact;\n-import io.quarkus.bootstrap.resolver.AppModelResolver;\n-import io.quarkus.bootstrap.resolver.AppModelResolverException;\n-\n-/**\n- * Legacy task for backwards compatibility reasons. This should not be used in new projects\n- *\n- * This has been replaced by setting quarkus.package.type=native in the configuration.\n- *\n- * @deprecated\n- */\n-@Deprecated\n-public class QuarkusNative extends QuarkusTask {\n-\n-    private boolean reportErrorsAtRuntime = false;\n-\n-    private boolean debugSymbols = false;\n-\n-    private boolean debugBuildProcess;\n-\n-    private boolean cleanupServer;\n-\n-    private boolean enableHttpUrlHandler;\n-\n-    private boolean enableHttpsUrlHandler;\n-\n-    private boolean enableAllSecurityServices;\n-\n-    private boolean enableIsolates;\n-\n-    private String graalvmHome = System.getenv(\"GRAALVM_HOME\");\n-\n-    private boolean enableServer = false;\n-\n-    /**\n-     * @deprecated JNI is always enabled starting from GraalVM 19.3.1.\n-     */\n-    @Deprecated\n-    private boolean enableJni = true;\n-\n-    private boolean autoServiceLoaderRegistration = false;\n-\n-    private boolean dumpProxies = false;\n-\n-    private String nativeImageXmx;\n-\n-    private String containerRuntime;\n-\n-    private String containerRuntimeOptions;\n-\n-    private String dockerBuild;\n-\n-    private String nativeBuilderImage;\n-\n-    private boolean enableVMInspection = false;\n-\n-    private boolean enableFallbackImages = false;\n-\n-    private boolean fullStackTraces = true;\n-\n-    private boolean enableReports;\n-\n-    private List<String> additionalBuildArgs;\n-\n-    private boolean addAllCharsets = false;\n-\n-    private boolean reportExceptionStackTraces = true;\n-\n-    public QuarkusNative() {\n-        super(\"Building a native image\");\n-    }\n-\n-    @Input\n-    public boolean isAddAllCharsets() {\n-        return addAllCharsets;\n-    }\n-\n-    @Option(description = \"Should all Charsets supported by the host environment be included in the native image\", option = \"add-all-charsets\")\n-    public void setAddAllCharsets(final boolean addAllCharsets) {\n-        this.addAllCharsets = addAllCharsets;\n-    }\n-\n-    @Input\n-    public boolean isReportErrorsAtRuntime() {\n-        return reportErrorsAtRuntime;\n-    }\n-\n-    @Option(description = \"Report errors at runtime\", option = \"report-errors-runtime\")\n-    public void setReportErrorsAtRuntime(boolean reportErrorsAtRuntime) {\n-        this.reportErrorsAtRuntime = reportErrorsAtRuntime;\n-    }\n-\n-    @Input\n-    public boolean isDebugSymbols() {\n-        return debugSymbols;\n-    }\n-\n-    @Option(description = \"Specify if debug symbols should be set\", option = \"debug-symbols\")\n-    public void setDebugSymbols(boolean debugSymbols) {\n-        this.debugSymbols = debugSymbols;\n-    }\n-\n-    @Input\n-    public boolean isDebugBuildProcess() {\n-        return debugBuildProcess;\n-    }\n-\n-    @Option(description = \"Specify if debug is set during build process\", option = \"debug-build-process\")\n-    public void setDebugBuildProcess(boolean debugBuildProcess) {\n-        this.debugBuildProcess = debugBuildProcess;\n-    }\n-\n-    @Input\n-    public boolean isCleanupServer() {\n-        return cleanupServer;\n-    }\n-\n-    @Option(description = \"Cleanup server\", option = \"cleanup-server\")\n-    public void setCleanupServer(boolean cleanupServer) {\n-        this.cleanupServer = cleanupServer;\n-    }\n-\n-    @Input\n-    public boolean isEnableHttpUrlHandler() {\n-        return enableHttpUrlHandler;\n-    }\n-\n-    @Input\n-    public boolean isEnableFallbackImages() {\n-        return enableFallbackImages;\n-    }\n-\n-    @Option(description = \"Enable the GraalVM native image compiler to generate Fallback Images in case of compilation error. \"\n-            +\n-            \"Careful: these are not as efficient as normal native images.\", option = \"enable-fallback-images\")\n-    public void setEnableFallbackImages(boolean enableFallbackImages) {\n-        this.enableFallbackImages = enableFallbackImages;\n-    }\n-\n-    @Option(description = \"Specify if http url handler is enabled\", option = \"enable-http-url-handler\")\n-    public void setEnableHttpUrlHandler(boolean enableHttpUrlHandler) {\n-        this.enableHttpUrlHandler = enableHttpUrlHandler;\n-    }\n-\n-    @Input\n-    public boolean isEnableHttpsUrlHandler() {\n-        return enableHttpsUrlHandler;\n-    }\n-\n-    @Option(description = \"Specify if https url handler is enabled\", option = \"enable-https-url-handler\")\n-    public void setEnableHttpsUrlHandler(boolean enableHttpsUrlHandler) {\n-        this.enableHttpsUrlHandler = enableHttpsUrlHandler;\n-    }\n-\n-    @Input\n-    public boolean isEnableAllSecurityServices() {\n-        return enableAllSecurityServices;\n-    }\n-\n-    @Option(description = \"Enable all security services\", option = \"enable-all-security-services\")\n-    public void setEnableAllSecurityServices(boolean enableAllSecurityServices) {\n-        this.enableAllSecurityServices = enableAllSecurityServices;\n-    }\n-\n-    @Input\n-    public boolean isEnableIsolates() {\n-        return enableIsolates;\n-    }\n-\n-    @Option(description = \"Report errors at runtime\", option = \"enable-isolates\")\n-    public void setEnableIsolates(boolean enableIsolates) {\n-        this.enableIsolates = enableIsolates;\n-    }\n-\n-    @Optional\n-    @Input\n-    public String getGraalvmHome() {\n-        return graalvmHome;\n-    }\n-\n-    @Option(description = \"Specify the GraalVM directory (default to $GRAALVM_HOME)\", option = \"graalvm\")\n-    public void setGraalvmHome(String graalvmHome) {\n-        this.graalvmHome = graalvmHome;\n-    }\n-\n-    @Input\n-    public boolean isEnableServer() {\n-        return enableServer;\n-    }\n-\n-    @Option(description = \"Enable server\", option = \"enable-server\")\n-    public void setEnableServer(boolean enableServer) {\n-        this.enableServer = enableServer;\n-    }\n-\n-    @Input\n-    @Deprecated\n-    public boolean isEnableJni() {\n-        return enableJni;\n-    }\n-\n-    /**\n-     * @param enableJni true to enable JNI\n-     * @deprecated JNI is always enabled starting from GraalVM 19.3.1.\n-     */\n-    @Option(description = \"Enable jni (deprecated)\", option = \"enable-jni\")\n-    @Deprecated\n-    public void setEnableJni(boolean enableJni) {\n-        this.enableJni = enableJni;\n-    }\n-\n-    @Input\n-    public boolean isAutoServiceLoaderRegistration() {\n-        return autoServiceLoaderRegistration;\n-    }\n-\n-    @Option(description = \"Auto ServiceLoader registration\", option = \"auto-service-loader-registration\")\n-    public void setAutoServiceLoaderRegistration(boolean autoServiceLoaderRegistration) {\n-        this.autoServiceLoaderRegistration = autoServiceLoaderRegistration;\n-    }\n-\n-    @Input\n-    public boolean isDumpProxies() {\n-        return dumpProxies;\n-    }\n-\n-    @Option(description = \"Dump proxies\", option = \"dump-proxies\")\n-    public void setDumpProxies(boolean dumpProxies) {\n-        this.dumpProxies = dumpProxies;\n-    }\n-\n-    @Optional\n-    @Input\n-    public String getNativeImageXmx() {\n-        return nativeImageXmx;\n-    }\n-\n-    @Option(description = \"Specify the native image maximum heap size\", option = \"native-image-xmx\")\n-    public void setNativeImageXmx(String nativeImageXmx) {\n-        this.nativeImageXmx = nativeImageXmx;\n-    }\n-\n-    @Optional\n-    @Input\n-    public String getContainerRuntime() {\n-        return containerRuntime;\n-    }\n-\n-    @Optional\n-    @Input\n-    public String getContainerRuntimeOptions() {\n-        return containerRuntimeOptions;\n-    }\n-\n-    @Optional\n-    @Input\n-    public String getDockerBuild() {\n-        return dockerBuild;\n-    }\n-\n-    @Option(description = \"Container runtime\", option = \"container-runtime\")\n-    public void setContainerRuntime(String containerRuntime) {\n-        this.containerRuntime = containerRuntime;\n-    }\n-\n-    @Option(description = \"Container runtime options\", option = \"container-runtime-options\")\n-    public void setContainerRuntimeOptions(String containerRuntimeOptions) {\n-        this.containerRuntimeOptions = containerRuntimeOptions;\n-    }\n-\n-    @Option(description = \"Docker build\", option = \"docker-build\")\n-    public void setDockerBuild(String dockerBuild) {\n-        this.dockerBuild = dockerBuild;\n-    }\n-\n-    @Option(description = \"Docker image\", option = \"native-builder-image\")\n-    public void setNativeBuilderImage(String nativeBuilderImage) {\n-        this.nativeBuilderImage = nativeBuilderImage;\n-    }\n-\n-    @Optional\n-    @Input\n-    public String getNativeBuilderImage() {\n-        return nativeBuilderImage;\n-    }\n-\n-    @Input\n-    public boolean isEnableVMInspection() {\n-        return enableVMInspection;\n-    }\n-\n-    @Option(description = \"Enable VM inspection\", option = \"enable-vm-inspection\")\n-    public void setEnableVMInspection(boolean enableVMInspection) {\n-        this.enableVMInspection = enableVMInspection;\n-    }\n-\n-    @Input\n-    public boolean isFullStackTraces() {\n-        return fullStackTraces;\n-    }\n-\n-    @Option(description = \"Specify full stacktraces\", option = \"full-stacktraces\")\n-    public void setFullStackTraces(boolean fullStackTraces) {\n-        this.fullStackTraces = fullStackTraces;\n-    }\n-\n-    @Input\n-    public boolean isEnableReports() {\n-        return enableReports;\n-    }\n-\n-    @Deprecated\n-    @Option(description = \"Disable reports\", option = \"disable-reports\")\n-    public void setDisableReports(boolean disableReports) {\n-        this.enableReports = !disableReports;\n-    }\n-\n-    @Option(description = \"Enable reports\", option = \"enable-reports\")\n-    public void setEnableReports(boolean enableReports) {\n-        this.enableReports = enableReports;\n-    }\n-\n-    @Optional\n-    @Input\n-    public List<String> getAdditionalBuildArgs() {\n-        return additionalBuildArgs;\n-    }\n-\n-    @Option(description = \"Additional build arguments\", option = \"additional-build-args\")\n-    public void setAdditionalBuildArgs(List<String> additionalBuildArgs) {\n-        this.additionalBuildArgs = additionalBuildArgs;\n-    }\n-\n-    @Input\n-    public boolean isReportExceptionStackTraces() {\n-        return reportExceptionStackTraces;\n-    }\n-\n-    @Option(description = \"Show exception stack traces for exceptions during image building\", option = \"report-exception-stack-traces\")\n-    public void setReportExceptionStackTraces(boolean reportExceptionStackTraces) {\n-        this.reportExceptionStackTraces = reportExceptionStackTraces;\n-    }\n-\n-    @TaskAction()\n-    public void buildNative() {\n-        getLogger().warn(\"buildNative task is deprecated in favor of quarkusBuild -Dquarkus.package.type=native\");\n-\n-        final AppArtifact appArtifact = extension().getAppArtifact();\n-        final AppModelResolver modelResolver = extension().getAppModelResolver();\n-        try {\n-            modelResolver.resolveModel(appArtifact);\n-        } catch (AppModelResolverException e) {\n-            throw new GradleException(\"Failed to resolve application model \" + appArtifact + \" dependencies\", e);\n-        }\n-        final Properties realProperties = getBuildSystemProperties(appArtifact);\n-\n-        Map<String, String> config = createCustomConfig();\n-        Map<String, String> old = new HashMap<>();\n-        for (Map.Entry<String, String> e : config.entrySet()) {\n-            old.put(e.getKey(), System.getProperty(e.getKey()));\n-            System.setProperty(e.getKey(), e.getValue());\n-        }\n-        try (CuratedApplication appCreationContext = QuarkusBootstrap.builder(appArtifact.getPath())\n-                .setAppModelResolver(modelResolver)\n-                .setBaseClassLoader(getClass().getClassLoader())\n-                .setTargetDirectory(getProject().getBuildDir().toPath())\n-                .setBaseName(extension().finalName())\n-                .setLocalProjectDiscovery(false)\n-                .setBuildSystemProperties(realProperties)\n-                .setIsolateDeployment(true)\n-                .setAppArtifact(appArtifact)\n-                .build().bootstrap()) {\n-            appCreationContext.createAugmentor().createProductionApplication();\n-\n-        } catch (BootstrapException e) {\n-            throw new GradleException(\"Failed to build a runnable JAR\", e);\n-        } finally {\n-            for (Map.Entry<String, String> e : old.entrySet()) {\n-                if (e.getValue() == null) {\n-                    System.clearProperty(e.getKey());\n-                } else {\n-                    System.setProperty(e.getKey(), e.getValue());\n-                }\n-            }\n-        }\n-    }\n-\n-    private Map<String, String> createCustomConfig() {\n-        Map<String, String> configs = new HashMap<>();\n-        configs.put(\"quarkus.package.type\", \"native\");\n-\n-        configs.put(\"quarkus.native.add-all-charsets\", Boolean.toString(addAllCharsets));\n-\n-        if (additionalBuildArgs != null && !additionalBuildArgs.isEmpty()) {\n-            configs.put(\"quarkus.native.additional-build-args\",\n-                    additionalBuildArgs.stream()\n-                            .map(val -> val.replace(\"\\\\\", \"\\\\\\\\\"))\n-                            .map(val -> val.replace(\",\", \"\\\\,\"))\n-                            .collect(joining(\",\")));\n-        }\n-        configs.put(\"quarkus.native.auto-service-loader-registration\", Boolean.toString(autoServiceLoaderRegistration));\n-\n-        configs.put(\"quarkus.native.cleanup-server\", Boolean.toString(cleanupServer));\n-        configs.put(\"quarkus.native.debug-build-process\", Boolean.toString(debugBuildProcess));\n-\n-        configs.put(\"quarkus.native.debug-symbols\", Boolean.toString(debugSymbols));\n-        configs.put(\"quarkus.native.enable-reports\", Boolean.toString(enableReports));\n-        if (containerRuntime != null && !containerRuntime.trim().isEmpty()) {\n-            configs.put(\"quarkus.native.container-runtime\", containerRuntime);\n-        } else if (dockerBuild != null && !dockerBuild.trim().isEmpty()) {\n-            if (!dockerBuild.isEmpty() && !dockerBuild.toLowerCase().equals(\"false\")) {\n-                if (dockerBuild.toLowerCase().equals(\"true\")) {\n-                    configs.put(\"quarkus.native.container-runtime\", \"docker\");\n-                } else {\n-                    configs.put(\"quarkus.native.container-runtime\", dockerBuild);\n-                }\n-            }\n-        }\n-        if (containerRuntimeOptions != null && !containerRuntimeOptions.trim().isEmpty()) {\n-            configs.put(\"quarkus.native.container-runtime-options\", containerRuntimeOptions);\n-        }\n-        if (nativeBuilderImage != null && !nativeBuilderImage.trim().isEmpty()) {\n-            configs.put(\"quarkus.native.builder-image\", nativeBuilderImage);\n-        }\n-        configs.put(\"quarkus.native.dump-proxies\", Boolean.toString(dumpProxies));\n-        configs.put(\"quarkus.native.enable-all-security-services\", Boolean.toString(enableAllSecurityServices));\n-        configs.put(\"quarkus.native.enable-fallback-images\", Boolean.toString(enableFallbackImages));\n-        configs.put(\"quarkus.native.enable-https-url-handler\", Boolean.toString(enableHttpsUrlHandler));\n-\n-        configs.put(\"quarkus.native.enable-http-url-handler\", Boolean.toString(enableHttpUrlHandler));\n-        configs.put(\"quarkus.native.enable-isolates\", Boolean.toString(enableIsolates));\n-\n-        configs.put(\"quarkus.native.enable-server\", Boolean.toString(enableServer));\n-\n-        configs.put(\"quarkus.native.enable-vm-inspection\", Boolean.toString(enableVMInspection));\n-\n-        configs.put(\"quarkus.native.full-stack-traces\", Boolean.toString(fullStackTraces));\n-\n-        if (graalvmHome != null && !graalvmHome.trim().isEmpty()) {\n-            configs.put(\"quarkus.native.graalvm-home\", graalvmHome);\n-        }\n-        if (nativeImageXmx != null && !nativeImageXmx.trim().isEmpty()) {\n-            configs.put(\"quarkus.native.native-image-xmx\", nativeImageXmx);\n-        }\n-        configs.put(\"quarkus.native.report-errors-at-runtime\", Boolean.toString(reportErrorsAtRuntime));\n-\n-        configs.put(\"quarkus.native.report-exception-stack-traces\", Boolean.toString(reportExceptionStackTraces));\n-\n-        return configs;\n-\n-    }\n-\n-    private static final class InMemoryConfigSource implements ConfigSource {\n-\n-        private final Map<String, String> values = new HashMap<>();\n-        private final int ordinal;\n-        private final String name;\n-\n-        private InMemoryConfigSource(int ordinal, String name) {\n-            this.ordinal = ordinal;\n-            this.name = name;\n-        }\n-\n-        public InMemoryConfigSource add(String key, String value) {\n-            values.put(key, value);\n-            return this;\n-        }\n-\n-        public InMemoryConfigSource add(String key, Object value) {\n-            values.put(key, value.toString());\n-            return this;\n-        }\n-\n-        @Override\n-        public Map<String, String> getProperties() {\n-            return values;\n-        }\n-\n-        @Override\n-        public Set<String> getPropertyNames() {\n-            return values.keySet();\n-        }\n-\n-        @Override\n-        public int getOrdinal() {\n-            return ordinal;\n-        }\n-\n-        @Override\n-        public String getValue(String propertyName) {\n-            return values.get(propertyName);\n-        }\n-\n-        @Override\n-        public String getName() {\n-            return name;\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMxMDI1OQ==", "url": "https://github.com/quarkusio/quarkus/pull/8325#discussion_r403310259", "bodyText": "Can you put this sentence next to the @deprecated below?", "author": "gastaldi", "createdAt": "2020-04-03T20:29:39Z", "path": "devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusNative.java", "diffHunk": "@@ -22,6 +22,14 @@\n import io.quarkus.bootstrap.resolver.AppModelResolver;\n import io.quarkus.bootstrap.resolver.AppModelResolverException;\n \n+/**\n+ * Legacy task for backwards compatibility reasons. This should not be used in new projects\n+ *\n+ * This has been replaced by setting quarkus.package.type=native in the configuration.", "originalCommit": "a14c10d403aafe7650acdd0da151128d161e2e64", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cd07129eee3bf254ebc801f79174f1bf20117a5f", "chunk": "diff --git a/devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusNative.java b/devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusNative.java\ndeleted file mode 100644\nindex 71213e332b..0000000000\n--- a/devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusNative.java\n+++ /dev/null\n\n@@ -1,519 +0,0 @@\n-package io.quarkus.gradle.tasks;\n-\n-import static java.util.stream.Collectors.joining;\n-\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Properties;\n-import java.util.Set;\n-\n-import org.eclipse.microprofile.config.spi.ConfigSource;\n-import org.gradle.api.GradleException;\n-import org.gradle.api.tasks.Input;\n-import org.gradle.api.tasks.Optional;\n-import org.gradle.api.tasks.TaskAction;\n-import org.gradle.api.tasks.options.Option;\n-\n-import io.quarkus.bootstrap.BootstrapException;\n-import io.quarkus.bootstrap.app.CuratedApplication;\n-import io.quarkus.bootstrap.app.QuarkusBootstrap;\n-import io.quarkus.bootstrap.model.AppArtifact;\n-import io.quarkus.bootstrap.resolver.AppModelResolver;\n-import io.quarkus.bootstrap.resolver.AppModelResolverException;\n-\n-/**\n- * Legacy task for backwards compatibility reasons. This should not be used in new projects\n- *\n- * This has been replaced by setting quarkus.package.type=native in the configuration.\n- *\n- * @deprecated\n- */\n-@Deprecated\n-public class QuarkusNative extends QuarkusTask {\n-\n-    private boolean reportErrorsAtRuntime = false;\n-\n-    private boolean debugSymbols = false;\n-\n-    private boolean debugBuildProcess;\n-\n-    private boolean cleanupServer;\n-\n-    private boolean enableHttpUrlHandler;\n-\n-    private boolean enableHttpsUrlHandler;\n-\n-    private boolean enableAllSecurityServices;\n-\n-    private boolean enableIsolates;\n-\n-    private String graalvmHome = System.getenv(\"GRAALVM_HOME\");\n-\n-    private boolean enableServer = false;\n-\n-    /**\n-     * @deprecated JNI is always enabled starting from GraalVM 19.3.1.\n-     */\n-    @Deprecated\n-    private boolean enableJni = true;\n-\n-    private boolean autoServiceLoaderRegistration = false;\n-\n-    private boolean dumpProxies = false;\n-\n-    private String nativeImageXmx;\n-\n-    private String containerRuntime;\n-\n-    private String containerRuntimeOptions;\n-\n-    private String dockerBuild;\n-\n-    private String nativeBuilderImage;\n-\n-    private boolean enableVMInspection = false;\n-\n-    private boolean enableFallbackImages = false;\n-\n-    private boolean fullStackTraces = true;\n-\n-    private boolean enableReports;\n-\n-    private List<String> additionalBuildArgs;\n-\n-    private boolean addAllCharsets = false;\n-\n-    private boolean reportExceptionStackTraces = true;\n-\n-    public QuarkusNative() {\n-        super(\"Building a native image\");\n-    }\n-\n-    @Input\n-    public boolean isAddAllCharsets() {\n-        return addAllCharsets;\n-    }\n-\n-    @Option(description = \"Should all Charsets supported by the host environment be included in the native image\", option = \"add-all-charsets\")\n-    public void setAddAllCharsets(final boolean addAllCharsets) {\n-        this.addAllCharsets = addAllCharsets;\n-    }\n-\n-    @Input\n-    public boolean isReportErrorsAtRuntime() {\n-        return reportErrorsAtRuntime;\n-    }\n-\n-    @Option(description = \"Report errors at runtime\", option = \"report-errors-runtime\")\n-    public void setReportErrorsAtRuntime(boolean reportErrorsAtRuntime) {\n-        this.reportErrorsAtRuntime = reportErrorsAtRuntime;\n-    }\n-\n-    @Input\n-    public boolean isDebugSymbols() {\n-        return debugSymbols;\n-    }\n-\n-    @Option(description = \"Specify if debug symbols should be set\", option = \"debug-symbols\")\n-    public void setDebugSymbols(boolean debugSymbols) {\n-        this.debugSymbols = debugSymbols;\n-    }\n-\n-    @Input\n-    public boolean isDebugBuildProcess() {\n-        return debugBuildProcess;\n-    }\n-\n-    @Option(description = \"Specify if debug is set during build process\", option = \"debug-build-process\")\n-    public void setDebugBuildProcess(boolean debugBuildProcess) {\n-        this.debugBuildProcess = debugBuildProcess;\n-    }\n-\n-    @Input\n-    public boolean isCleanupServer() {\n-        return cleanupServer;\n-    }\n-\n-    @Option(description = \"Cleanup server\", option = \"cleanup-server\")\n-    public void setCleanupServer(boolean cleanupServer) {\n-        this.cleanupServer = cleanupServer;\n-    }\n-\n-    @Input\n-    public boolean isEnableHttpUrlHandler() {\n-        return enableHttpUrlHandler;\n-    }\n-\n-    @Input\n-    public boolean isEnableFallbackImages() {\n-        return enableFallbackImages;\n-    }\n-\n-    @Option(description = \"Enable the GraalVM native image compiler to generate Fallback Images in case of compilation error. \"\n-            +\n-            \"Careful: these are not as efficient as normal native images.\", option = \"enable-fallback-images\")\n-    public void setEnableFallbackImages(boolean enableFallbackImages) {\n-        this.enableFallbackImages = enableFallbackImages;\n-    }\n-\n-    @Option(description = \"Specify if http url handler is enabled\", option = \"enable-http-url-handler\")\n-    public void setEnableHttpUrlHandler(boolean enableHttpUrlHandler) {\n-        this.enableHttpUrlHandler = enableHttpUrlHandler;\n-    }\n-\n-    @Input\n-    public boolean isEnableHttpsUrlHandler() {\n-        return enableHttpsUrlHandler;\n-    }\n-\n-    @Option(description = \"Specify if https url handler is enabled\", option = \"enable-https-url-handler\")\n-    public void setEnableHttpsUrlHandler(boolean enableHttpsUrlHandler) {\n-        this.enableHttpsUrlHandler = enableHttpsUrlHandler;\n-    }\n-\n-    @Input\n-    public boolean isEnableAllSecurityServices() {\n-        return enableAllSecurityServices;\n-    }\n-\n-    @Option(description = \"Enable all security services\", option = \"enable-all-security-services\")\n-    public void setEnableAllSecurityServices(boolean enableAllSecurityServices) {\n-        this.enableAllSecurityServices = enableAllSecurityServices;\n-    }\n-\n-    @Input\n-    public boolean isEnableIsolates() {\n-        return enableIsolates;\n-    }\n-\n-    @Option(description = \"Report errors at runtime\", option = \"enable-isolates\")\n-    public void setEnableIsolates(boolean enableIsolates) {\n-        this.enableIsolates = enableIsolates;\n-    }\n-\n-    @Optional\n-    @Input\n-    public String getGraalvmHome() {\n-        return graalvmHome;\n-    }\n-\n-    @Option(description = \"Specify the GraalVM directory (default to $GRAALVM_HOME)\", option = \"graalvm\")\n-    public void setGraalvmHome(String graalvmHome) {\n-        this.graalvmHome = graalvmHome;\n-    }\n-\n-    @Input\n-    public boolean isEnableServer() {\n-        return enableServer;\n-    }\n-\n-    @Option(description = \"Enable server\", option = \"enable-server\")\n-    public void setEnableServer(boolean enableServer) {\n-        this.enableServer = enableServer;\n-    }\n-\n-    @Input\n-    @Deprecated\n-    public boolean isEnableJni() {\n-        return enableJni;\n-    }\n-\n-    /**\n-     * @param enableJni true to enable JNI\n-     * @deprecated JNI is always enabled starting from GraalVM 19.3.1.\n-     */\n-    @Option(description = \"Enable jni (deprecated)\", option = \"enable-jni\")\n-    @Deprecated\n-    public void setEnableJni(boolean enableJni) {\n-        this.enableJni = enableJni;\n-    }\n-\n-    @Input\n-    public boolean isAutoServiceLoaderRegistration() {\n-        return autoServiceLoaderRegistration;\n-    }\n-\n-    @Option(description = \"Auto ServiceLoader registration\", option = \"auto-service-loader-registration\")\n-    public void setAutoServiceLoaderRegistration(boolean autoServiceLoaderRegistration) {\n-        this.autoServiceLoaderRegistration = autoServiceLoaderRegistration;\n-    }\n-\n-    @Input\n-    public boolean isDumpProxies() {\n-        return dumpProxies;\n-    }\n-\n-    @Option(description = \"Dump proxies\", option = \"dump-proxies\")\n-    public void setDumpProxies(boolean dumpProxies) {\n-        this.dumpProxies = dumpProxies;\n-    }\n-\n-    @Optional\n-    @Input\n-    public String getNativeImageXmx() {\n-        return nativeImageXmx;\n-    }\n-\n-    @Option(description = \"Specify the native image maximum heap size\", option = \"native-image-xmx\")\n-    public void setNativeImageXmx(String nativeImageXmx) {\n-        this.nativeImageXmx = nativeImageXmx;\n-    }\n-\n-    @Optional\n-    @Input\n-    public String getContainerRuntime() {\n-        return containerRuntime;\n-    }\n-\n-    @Optional\n-    @Input\n-    public String getContainerRuntimeOptions() {\n-        return containerRuntimeOptions;\n-    }\n-\n-    @Optional\n-    @Input\n-    public String getDockerBuild() {\n-        return dockerBuild;\n-    }\n-\n-    @Option(description = \"Container runtime\", option = \"container-runtime\")\n-    public void setContainerRuntime(String containerRuntime) {\n-        this.containerRuntime = containerRuntime;\n-    }\n-\n-    @Option(description = \"Container runtime options\", option = \"container-runtime-options\")\n-    public void setContainerRuntimeOptions(String containerRuntimeOptions) {\n-        this.containerRuntimeOptions = containerRuntimeOptions;\n-    }\n-\n-    @Option(description = \"Docker build\", option = \"docker-build\")\n-    public void setDockerBuild(String dockerBuild) {\n-        this.dockerBuild = dockerBuild;\n-    }\n-\n-    @Option(description = \"Docker image\", option = \"native-builder-image\")\n-    public void setNativeBuilderImage(String nativeBuilderImage) {\n-        this.nativeBuilderImage = nativeBuilderImage;\n-    }\n-\n-    @Optional\n-    @Input\n-    public String getNativeBuilderImage() {\n-        return nativeBuilderImage;\n-    }\n-\n-    @Input\n-    public boolean isEnableVMInspection() {\n-        return enableVMInspection;\n-    }\n-\n-    @Option(description = \"Enable VM inspection\", option = \"enable-vm-inspection\")\n-    public void setEnableVMInspection(boolean enableVMInspection) {\n-        this.enableVMInspection = enableVMInspection;\n-    }\n-\n-    @Input\n-    public boolean isFullStackTraces() {\n-        return fullStackTraces;\n-    }\n-\n-    @Option(description = \"Specify full stacktraces\", option = \"full-stacktraces\")\n-    public void setFullStackTraces(boolean fullStackTraces) {\n-        this.fullStackTraces = fullStackTraces;\n-    }\n-\n-    @Input\n-    public boolean isEnableReports() {\n-        return enableReports;\n-    }\n-\n-    @Deprecated\n-    @Option(description = \"Disable reports\", option = \"disable-reports\")\n-    public void setDisableReports(boolean disableReports) {\n-        this.enableReports = !disableReports;\n-    }\n-\n-    @Option(description = \"Enable reports\", option = \"enable-reports\")\n-    public void setEnableReports(boolean enableReports) {\n-        this.enableReports = enableReports;\n-    }\n-\n-    @Optional\n-    @Input\n-    public List<String> getAdditionalBuildArgs() {\n-        return additionalBuildArgs;\n-    }\n-\n-    @Option(description = \"Additional build arguments\", option = \"additional-build-args\")\n-    public void setAdditionalBuildArgs(List<String> additionalBuildArgs) {\n-        this.additionalBuildArgs = additionalBuildArgs;\n-    }\n-\n-    @Input\n-    public boolean isReportExceptionStackTraces() {\n-        return reportExceptionStackTraces;\n-    }\n-\n-    @Option(description = \"Show exception stack traces for exceptions during image building\", option = \"report-exception-stack-traces\")\n-    public void setReportExceptionStackTraces(boolean reportExceptionStackTraces) {\n-        this.reportExceptionStackTraces = reportExceptionStackTraces;\n-    }\n-\n-    @TaskAction()\n-    public void buildNative() {\n-        getLogger().warn(\"buildNative task is deprecated in favor of quarkusBuild -Dquarkus.package.type=native\");\n-\n-        final AppArtifact appArtifact = extension().getAppArtifact();\n-        final AppModelResolver modelResolver = extension().getAppModelResolver();\n-        try {\n-            modelResolver.resolveModel(appArtifact);\n-        } catch (AppModelResolverException e) {\n-            throw new GradleException(\"Failed to resolve application model \" + appArtifact + \" dependencies\", e);\n-        }\n-        final Properties realProperties = getBuildSystemProperties(appArtifact);\n-\n-        Map<String, String> config = createCustomConfig();\n-        Map<String, String> old = new HashMap<>();\n-        for (Map.Entry<String, String> e : config.entrySet()) {\n-            old.put(e.getKey(), System.getProperty(e.getKey()));\n-            System.setProperty(e.getKey(), e.getValue());\n-        }\n-        try (CuratedApplication appCreationContext = QuarkusBootstrap.builder(appArtifact.getPath())\n-                .setAppModelResolver(modelResolver)\n-                .setBaseClassLoader(getClass().getClassLoader())\n-                .setTargetDirectory(getProject().getBuildDir().toPath())\n-                .setBaseName(extension().finalName())\n-                .setLocalProjectDiscovery(false)\n-                .setBuildSystemProperties(realProperties)\n-                .setIsolateDeployment(true)\n-                .setAppArtifact(appArtifact)\n-                .build().bootstrap()) {\n-            appCreationContext.createAugmentor().createProductionApplication();\n-\n-        } catch (BootstrapException e) {\n-            throw new GradleException(\"Failed to build a runnable JAR\", e);\n-        } finally {\n-            for (Map.Entry<String, String> e : old.entrySet()) {\n-                if (e.getValue() == null) {\n-                    System.clearProperty(e.getKey());\n-                } else {\n-                    System.setProperty(e.getKey(), e.getValue());\n-                }\n-            }\n-        }\n-    }\n-\n-    private Map<String, String> createCustomConfig() {\n-        Map<String, String> configs = new HashMap<>();\n-        configs.put(\"quarkus.package.type\", \"native\");\n-\n-        configs.put(\"quarkus.native.add-all-charsets\", Boolean.toString(addAllCharsets));\n-\n-        if (additionalBuildArgs != null && !additionalBuildArgs.isEmpty()) {\n-            configs.put(\"quarkus.native.additional-build-args\",\n-                    additionalBuildArgs.stream()\n-                            .map(val -> val.replace(\"\\\\\", \"\\\\\\\\\"))\n-                            .map(val -> val.replace(\",\", \"\\\\,\"))\n-                            .collect(joining(\",\")));\n-        }\n-        configs.put(\"quarkus.native.auto-service-loader-registration\", Boolean.toString(autoServiceLoaderRegistration));\n-\n-        configs.put(\"quarkus.native.cleanup-server\", Boolean.toString(cleanupServer));\n-        configs.put(\"quarkus.native.debug-build-process\", Boolean.toString(debugBuildProcess));\n-\n-        configs.put(\"quarkus.native.debug-symbols\", Boolean.toString(debugSymbols));\n-        configs.put(\"quarkus.native.enable-reports\", Boolean.toString(enableReports));\n-        if (containerRuntime != null && !containerRuntime.trim().isEmpty()) {\n-            configs.put(\"quarkus.native.container-runtime\", containerRuntime);\n-        } else if (dockerBuild != null && !dockerBuild.trim().isEmpty()) {\n-            if (!dockerBuild.isEmpty() && !dockerBuild.toLowerCase().equals(\"false\")) {\n-                if (dockerBuild.toLowerCase().equals(\"true\")) {\n-                    configs.put(\"quarkus.native.container-runtime\", \"docker\");\n-                } else {\n-                    configs.put(\"quarkus.native.container-runtime\", dockerBuild);\n-                }\n-            }\n-        }\n-        if (containerRuntimeOptions != null && !containerRuntimeOptions.trim().isEmpty()) {\n-            configs.put(\"quarkus.native.container-runtime-options\", containerRuntimeOptions);\n-        }\n-        if (nativeBuilderImage != null && !nativeBuilderImage.trim().isEmpty()) {\n-            configs.put(\"quarkus.native.builder-image\", nativeBuilderImage);\n-        }\n-        configs.put(\"quarkus.native.dump-proxies\", Boolean.toString(dumpProxies));\n-        configs.put(\"quarkus.native.enable-all-security-services\", Boolean.toString(enableAllSecurityServices));\n-        configs.put(\"quarkus.native.enable-fallback-images\", Boolean.toString(enableFallbackImages));\n-        configs.put(\"quarkus.native.enable-https-url-handler\", Boolean.toString(enableHttpsUrlHandler));\n-\n-        configs.put(\"quarkus.native.enable-http-url-handler\", Boolean.toString(enableHttpUrlHandler));\n-        configs.put(\"quarkus.native.enable-isolates\", Boolean.toString(enableIsolates));\n-\n-        configs.put(\"quarkus.native.enable-server\", Boolean.toString(enableServer));\n-\n-        configs.put(\"quarkus.native.enable-vm-inspection\", Boolean.toString(enableVMInspection));\n-\n-        configs.put(\"quarkus.native.full-stack-traces\", Boolean.toString(fullStackTraces));\n-\n-        if (graalvmHome != null && !graalvmHome.trim().isEmpty()) {\n-            configs.put(\"quarkus.native.graalvm-home\", graalvmHome);\n-        }\n-        if (nativeImageXmx != null && !nativeImageXmx.trim().isEmpty()) {\n-            configs.put(\"quarkus.native.native-image-xmx\", nativeImageXmx);\n-        }\n-        configs.put(\"quarkus.native.report-errors-at-runtime\", Boolean.toString(reportErrorsAtRuntime));\n-\n-        configs.put(\"quarkus.native.report-exception-stack-traces\", Boolean.toString(reportExceptionStackTraces));\n-\n-        return configs;\n-\n-    }\n-\n-    private static final class InMemoryConfigSource implements ConfigSource {\n-\n-        private final Map<String, String> values = new HashMap<>();\n-        private final int ordinal;\n-        private final String name;\n-\n-        private InMemoryConfigSource(int ordinal, String name) {\n-            this.ordinal = ordinal;\n-            this.name = name;\n-        }\n-\n-        public InMemoryConfigSource add(String key, String value) {\n-            values.put(key, value);\n-            return this;\n-        }\n-\n-        public InMemoryConfigSource add(String key, Object value) {\n-            values.put(key, value.toString());\n-            return this;\n-        }\n-\n-        @Override\n-        public Map<String, String> getProperties() {\n-            return values;\n-        }\n-\n-        @Override\n-        public Set<String> getPropertyNames() {\n-            return values.keySet();\n-        }\n-\n-        @Override\n-        public int getOrdinal() {\n-            return ordinal;\n-        }\n-\n-        @Override\n-        public String getValue(String propertyName) {\n-            return values.get(propertyName);\n-        }\n-\n-        @Override\n-        public String getName() {\n-            return name;\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMxMTkxMg==", "url": "https://github.com/quarkusio/quarkus/pull/8325#discussion_r403311912", "bodyText": "Can we remove this class and declare the buildNative task to use QuarkusBuild with the extra parameter instead?", "author": "gastaldi", "createdAt": "2020-04-03T20:31:49Z", "path": "devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusNative.java", "diffHunk": "@@ -22,6 +22,14 @@\n import io.quarkus.bootstrap.resolver.AppModelResolver;\n import io.quarkus.bootstrap.resolver.AppModelResolverException;\n \n+/**\n+ * Legacy task for backwards compatibility reasons. This should not be used in new projects\n+ *\n+ * This has been replaced by setting quarkus.package.type=native in the configuration.\n+ *\n+ * @deprecated\n+ */\n+@Deprecated\n public class QuarkusNative extends QuarkusTask {", "originalCommit": "a14c10d403aafe7650acdd0da151128d161e2e64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0MjUyMg==", "url": "https://github.com/quarkusio/quarkus/pull/8325#discussion_r403442522", "bodyText": "Yes, we could delete this, and declare the buildNative as a DefaultTask, something like this in QuarkusPlugin:\nTask buildNative = tasks.create(BUILD_NATIVE_TASK_NAME, DefaultTask.class);\n\nBut this will be a breaking change instead of a deprecation. Is that ok? or should we first release the @Deprecated and then this update?", "author": "glefloch", "createdAt": "2020-04-04T08:23:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMxMTkxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ1NDg5NQ==", "url": "https://github.com/quarkusio/quarkus/pull/8325#discussion_r403454895", "bodyText": "If the behavior is kept the same, it's not exactly a breaking change, since no other module depends on classes of this plugin, I think it should be fine.  We should hopefully remove this task in the future, so it would be nice to show a warning if buildNative is invoked directly.", "author": "gastaldi", "createdAt": "2020-04-04T10:39:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMxMTkxMg=="}], "type": "inlineReview", "revised_code": {"commit": "cd07129eee3bf254ebc801f79174f1bf20117a5f", "chunk": "diff --git a/devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusNative.java b/devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusNative.java\ndeleted file mode 100644\nindex 71213e332b..0000000000\n--- a/devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusNative.java\n+++ /dev/null\n\n@@ -1,519 +0,0 @@\n-package io.quarkus.gradle.tasks;\n-\n-import static java.util.stream.Collectors.joining;\n-\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Properties;\n-import java.util.Set;\n-\n-import org.eclipse.microprofile.config.spi.ConfigSource;\n-import org.gradle.api.GradleException;\n-import org.gradle.api.tasks.Input;\n-import org.gradle.api.tasks.Optional;\n-import org.gradle.api.tasks.TaskAction;\n-import org.gradle.api.tasks.options.Option;\n-\n-import io.quarkus.bootstrap.BootstrapException;\n-import io.quarkus.bootstrap.app.CuratedApplication;\n-import io.quarkus.bootstrap.app.QuarkusBootstrap;\n-import io.quarkus.bootstrap.model.AppArtifact;\n-import io.quarkus.bootstrap.resolver.AppModelResolver;\n-import io.quarkus.bootstrap.resolver.AppModelResolverException;\n-\n-/**\n- * Legacy task for backwards compatibility reasons. This should not be used in new projects\n- *\n- * This has been replaced by setting quarkus.package.type=native in the configuration.\n- *\n- * @deprecated\n- */\n-@Deprecated\n-public class QuarkusNative extends QuarkusTask {\n-\n-    private boolean reportErrorsAtRuntime = false;\n-\n-    private boolean debugSymbols = false;\n-\n-    private boolean debugBuildProcess;\n-\n-    private boolean cleanupServer;\n-\n-    private boolean enableHttpUrlHandler;\n-\n-    private boolean enableHttpsUrlHandler;\n-\n-    private boolean enableAllSecurityServices;\n-\n-    private boolean enableIsolates;\n-\n-    private String graalvmHome = System.getenv(\"GRAALVM_HOME\");\n-\n-    private boolean enableServer = false;\n-\n-    /**\n-     * @deprecated JNI is always enabled starting from GraalVM 19.3.1.\n-     */\n-    @Deprecated\n-    private boolean enableJni = true;\n-\n-    private boolean autoServiceLoaderRegistration = false;\n-\n-    private boolean dumpProxies = false;\n-\n-    private String nativeImageXmx;\n-\n-    private String containerRuntime;\n-\n-    private String containerRuntimeOptions;\n-\n-    private String dockerBuild;\n-\n-    private String nativeBuilderImage;\n-\n-    private boolean enableVMInspection = false;\n-\n-    private boolean enableFallbackImages = false;\n-\n-    private boolean fullStackTraces = true;\n-\n-    private boolean enableReports;\n-\n-    private List<String> additionalBuildArgs;\n-\n-    private boolean addAllCharsets = false;\n-\n-    private boolean reportExceptionStackTraces = true;\n-\n-    public QuarkusNative() {\n-        super(\"Building a native image\");\n-    }\n-\n-    @Input\n-    public boolean isAddAllCharsets() {\n-        return addAllCharsets;\n-    }\n-\n-    @Option(description = \"Should all Charsets supported by the host environment be included in the native image\", option = \"add-all-charsets\")\n-    public void setAddAllCharsets(final boolean addAllCharsets) {\n-        this.addAllCharsets = addAllCharsets;\n-    }\n-\n-    @Input\n-    public boolean isReportErrorsAtRuntime() {\n-        return reportErrorsAtRuntime;\n-    }\n-\n-    @Option(description = \"Report errors at runtime\", option = \"report-errors-runtime\")\n-    public void setReportErrorsAtRuntime(boolean reportErrorsAtRuntime) {\n-        this.reportErrorsAtRuntime = reportErrorsAtRuntime;\n-    }\n-\n-    @Input\n-    public boolean isDebugSymbols() {\n-        return debugSymbols;\n-    }\n-\n-    @Option(description = \"Specify if debug symbols should be set\", option = \"debug-symbols\")\n-    public void setDebugSymbols(boolean debugSymbols) {\n-        this.debugSymbols = debugSymbols;\n-    }\n-\n-    @Input\n-    public boolean isDebugBuildProcess() {\n-        return debugBuildProcess;\n-    }\n-\n-    @Option(description = \"Specify if debug is set during build process\", option = \"debug-build-process\")\n-    public void setDebugBuildProcess(boolean debugBuildProcess) {\n-        this.debugBuildProcess = debugBuildProcess;\n-    }\n-\n-    @Input\n-    public boolean isCleanupServer() {\n-        return cleanupServer;\n-    }\n-\n-    @Option(description = \"Cleanup server\", option = \"cleanup-server\")\n-    public void setCleanupServer(boolean cleanupServer) {\n-        this.cleanupServer = cleanupServer;\n-    }\n-\n-    @Input\n-    public boolean isEnableHttpUrlHandler() {\n-        return enableHttpUrlHandler;\n-    }\n-\n-    @Input\n-    public boolean isEnableFallbackImages() {\n-        return enableFallbackImages;\n-    }\n-\n-    @Option(description = \"Enable the GraalVM native image compiler to generate Fallback Images in case of compilation error. \"\n-            +\n-            \"Careful: these are not as efficient as normal native images.\", option = \"enable-fallback-images\")\n-    public void setEnableFallbackImages(boolean enableFallbackImages) {\n-        this.enableFallbackImages = enableFallbackImages;\n-    }\n-\n-    @Option(description = \"Specify if http url handler is enabled\", option = \"enable-http-url-handler\")\n-    public void setEnableHttpUrlHandler(boolean enableHttpUrlHandler) {\n-        this.enableHttpUrlHandler = enableHttpUrlHandler;\n-    }\n-\n-    @Input\n-    public boolean isEnableHttpsUrlHandler() {\n-        return enableHttpsUrlHandler;\n-    }\n-\n-    @Option(description = \"Specify if https url handler is enabled\", option = \"enable-https-url-handler\")\n-    public void setEnableHttpsUrlHandler(boolean enableHttpsUrlHandler) {\n-        this.enableHttpsUrlHandler = enableHttpsUrlHandler;\n-    }\n-\n-    @Input\n-    public boolean isEnableAllSecurityServices() {\n-        return enableAllSecurityServices;\n-    }\n-\n-    @Option(description = \"Enable all security services\", option = \"enable-all-security-services\")\n-    public void setEnableAllSecurityServices(boolean enableAllSecurityServices) {\n-        this.enableAllSecurityServices = enableAllSecurityServices;\n-    }\n-\n-    @Input\n-    public boolean isEnableIsolates() {\n-        return enableIsolates;\n-    }\n-\n-    @Option(description = \"Report errors at runtime\", option = \"enable-isolates\")\n-    public void setEnableIsolates(boolean enableIsolates) {\n-        this.enableIsolates = enableIsolates;\n-    }\n-\n-    @Optional\n-    @Input\n-    public String getGraalvmHome() {\n-        return graalvmHome;\n-    }\n-\n-    @Option(description = \"Specify the GraalVM directory (default to $GRAALVM_HOME)\", option = \"graalvm\")\n-    public void setGraalvmHome(String graalvmHome) {\n-        this.graalvmHome = graalvmHome;\n-    }\n-\n-    @Input\n-    public boolean isEnableServer() {\n-        return enableServer;\n-    }\n-\n-    @Option(description = \"Enable server\", option = \"enable-server\")\n-    public void setEnableServer(boolean enableServer) {\n-        this.enableServer = enableServer;\n-    }\n-\n-    @Input\n-    @Deprecated\n-    public boolean isEnableJni() {\n-        return enableJni;\n-    }\n-\n-    /**\n-     * @param enableJni true to enable JNI\n-     * @deprecated JNI is always enabled starting from GraalVM 19.3.1.\n-     */\n-    @Option(description = \"Enable jni (deprecated)\", option = \"enable-jni\")\n-    @Deprecated\n-    public void setEnableJni(boolean enableJni) {\n-        this.enableJni = enableJni;\n-    }\n-\n-    @Input\n-    public boolean isAutoServiceLoaderRegistration() {\n-        return autoServiceLoaderRegistration;\n-    }\n-\n-    @Option(description = \"Auto ServiceLoader registration\", option = \"auto-service-loader-registration\")\n-    public void setAutoServiceLoaderRegistration(boolean autoServiceLoaderRegistration) {\n-        this.autoServiceLoaderRegistration = autoServiceLoaderRegistration;\n-    }\n-\n-    @Input\n-    public boolean isDumpProxies() {\n-        return dumpProxies;\n-    }\n-\n-    @Option(description = \"Dump proxies\", option = \"dump-proxies\")\n-    public void setDumpProxies(boolean dumpProxies) {\n-        this.dumpProxies = dumpProxies;\n-    }\n-\n-    @Optional\n-    @Input\n-    public String getNativeImageXmx() {\n-        return nativeImageXmx;\n-    }\n-\n-    @Option(description = \"Specify the native image maximum heap size\", option = \"native-image-xmx\")\n-    public void setNativeImageXmx(String nativeImageXmx) {\n-        this.nativeImageXmx = nativeImageXmx;\n-    }\n-\n-    @Optional\n-    @Input\n-    public String getContainerRuntime() {\n-        return containerRuntime;\n-    }\n-\n-    @Optional\n-    @Input\n-    public String getContainerRuntimeOptions() {\n-        return containerRuntimeOptions;\n-    }\n-\n-    @Optional\n-    @Input\n-    public String getDockerBuild() {\n-        return dockerBuild;\n-    }\n-\n-    @Option(description = \"Container runtime\", option = \"container-runtime\")\n-    public void setContainerRuntime(String containerRuntime) {\n-        this.containerRuntime = containerRuntime;\n-    }\n-\n-    @Option(description = \"Container runtime options\", option = \"container-runtime-options\")\n-    public void setContainerRuntimeOptions(String containerRuntimeOptions) {\n-        this.containerRuntimeOptions = containerRuntimeOptions;\n-    }\n-\n-    @Option(description = \"Docker build\", option = \"docker-build\")\n-    public void setDockerBuild(String dockerBuild) {\n-        this.dockerBuild = dockerBuild;\n-    }\n-\n-    @Option(description = \"Docker image\", option = \"native-builder-image\")\n-    public void setNativeBuilderImage(String nativeBuilderImage) {\n-        this.nativeBuilderImage = nativeBuilderImage;\n-    }\n-\n-    @Optional\n-    @Input\n-    public String getNativeBuilderImage() {\n-        return nativeBuilderImage;\n-    }\n-\n-    @Input\n-    public boolean isEnableVMInspection() {\n-        return enableVMInspection;\n-    }\n-\n-    @Option(description = \"Enable VM inspection\", option = \"enable-vm-inspection\")\n-    public void setEnableVMInspection(boolean enableVMInspection) {\n-        this.enableVMInspection = enableVMInspection;\n-    }\n-\n-    @Input\n-    public boolean isFullStackTraces() {\n-        return fullStackTraces;\n-    }\n-\n-    @Option(description = \"Specify full stacktraces\", option = \"full-stacktraces\")\n-    public void setFullStackTraces(boolean fullStackTraces) {\n-        this.fullStackTraces = fullStackTraces;\n-    }\n-\n-    @Input\n-    public boolean isEnableReports() {\n-        return enableReports;\n-    }\n-\n-    @Deprecated\n-    @Option(description = \"Disable reports\", option = \"disable-reports\")\n-    public void setDisableReports(boolean disableReports) {\n-        this.enableReports = !disableReports;\n-    }\n-\n-    @Option(description = \"Enable reports\", option = \"enable-reports\")\n-    public void setEnableReports(boolean enableReports) {\n-        this.enableReports = enableReports;\n-    }\n-\n-    @Optional\n-    @Input\n-    public List<String> getAdditionalBuildArgs() {\n-        return additionalBuildArgs;\n-    }\n-\n-    @Option(description = \"Additional build arguments\", option = \"additional-build-args\")\n-    public void setAdditionalBuildArgs(List<String> additionalBuildArgs) {\n-        this.additionalBuildArgs = additionalBuildArgs;\n-    }\n-\n-    @Input\n-    public boolean isReportExceptionStackTraces() {\n-        return reportExceptionStackTraces;\n-    }\n-\n-    @Option(description = \"Show exception stack traces for exceptions during image building\", option = \"report-exception-stack-traces\")\n-    public void setReportExceptionStackTraces(boolean reportExceptionStackTraces) {\n-        this.reportExceptionStackTraces = reportExceptionStackTraces;\n-    }\n-\n-    @TaskAction()\n-    public void buildNative() {\n-        getLogger().warn(\"buildNative task is deprecated in favor of quarkusBuild -Dquarkus.package.type=native\");\n-\n-        final AppArtifact appArtifact = extension().getAppArtifact();\n-        final AppModelResolver modelResolver = extension().getAppModelResolver();\n-        try {\n-            modelResolver.resolveModel(appArtifact);\n-        } catch (AppModelResolverException e) {\n-            throw new GradleException(\"Failed to resolve application model \" + appArtifact + \" dependencies\", e);\n-        }\n-        final Properties realProperties = getBuildSystemProperties(appArtifact);\n-\n-        Map<String, String> config = createCustomConfig();\n-        Map<String, String> old = new HashMap<>();\n-        for (Map.Entry<String, String> e : config.entrySet()) {\n-            old.put(e.getKey(), System.getProperty(e.getKey()));\n-            System.setProperty(e.getKey(), e.getValue());\n-        }\n-        try (CuratedApplication appCreationContext = QuarkusBootstrap.builder(appArtifact.getPath())\n-                .setAppModelResolver(modelResolver)\n-                .setBaseClassLoader(getClass().getClassLoader())\n-                .setTargetDirectory(getProject().getBuildDir().toPath())\n-                .setBaseName(extension().finalName())\n-                .setLocalProjectDiscovery(false)\n-                .setBuildSystemProperties(realProperties)\n-                .setIsolateDeployment(true)\n-                .setAppArtifact(appArtifact)\n-                .build().bootstrap()) {\n-            appCreationContext.createAugmentor().createProductionApplication();\n-\n-        } catch (BootstrapException e) {\n-            throw new GradleException(\"Failed to build a runnable JAR\", e);\n-        } finally {\n-            for (Map.Entry<String, String> e : old.entrySet()) {\n-                if (e.getValue() == null) {\n-                    System.clearProperty(e.getKey());\n-                } else {\n-                    System.setProperty(e.getKey(), e.getValue());\n-                }\n-            }\n-        }\n-    }\n-\n-    private Map<String, String> createCustomConfig() {\n-        Map<String, String> configs = new HashMap<>();\n-        configs.put(\"quarkus.package.type\", \"native\");\n-\n-        configs.put(\"quarkus.native.add-all-charsets\", Boolean.toString(addAllCharsets));\n-\n-        if (additionalBuildArgs != null && !additionalBuildArgs.isEmpty()) {\n-            configs.put(\"quarkus.native.additional-build-args\",\n-                    additionalBuildArgs.stream()\n-                            .map(val -> val.replace(\"\\\\\", \"\\\\\\\\\"))\n-                            .map(val -> val.replace(\",\", \"\\\\,\"))\n-                            .collect(joining(\",\")));\n-        }\n-        configs.put(\"quarkus.native.auto-service-loader-registration\", Boolean.toString(autoServiceLoaderRegistration));\n-\n-        configs.put(\"quarkus.native.cleanup-server\", Boolean.toString(cleanupServer));\n-        configs.put(\"quarkus.native.debug-build-process\", Boolean.toString(debugBuildProcess));\n-\n-        configs.put(\"quarkus.native.debug-symbols\", Boolean.toString(debugSymbols));\n-        configs.put(\"quarkus.native.enable-reports\", Boolean.toString(enableReports));\n-        if (containerRuntime != null && !containerRuntime.trim().isEmpty()) {\n-            configs.put(\"quarkus.native.container-runtime\", containerRuntime);\n-        } else if (dockerBuild != null && !dockerBuild.trim().isEmpty()) {\n-            if (!dockerBuild.isEmpty() && !dockerBuild.toLowerCase().equals(\"false\")) {\n-                if (dockerBuild.toLowerCase().equals(\"true\")) {\n-                    configs.put(\"quarkus.native.container-runtime\", \"docker\");\n-                } else {\n-                    configs.put(\"quarkus.native.container-runtime\", dockerBuild);\n-                }\n-            }\n-        }\n-        if (containerRuntimeOptions != null && !containerRuntimeOptions.trim().isEmpty()) {\n-            configs.put(\"quarkus.native.container-runtime-options\", containerRuntimeOptions);\n-        }\n-        if (nativeBuilderImage != null && !nativeBuilderImage.trim().isEmpty()) {\n-            configs.put(\"quarkus.native.builder-image\", nativeBuilderImage);\n-        }\n-        configs.put(\"quarkus.native.dump-proxies\", Boolean.toString(dumpProxies));\n-        configs.put(\"quarkus.native.enable-all-security-services\", Boolean.toString(enableAllSecurityServices));\n-        configs.put(\"quarkus.native.enable-fallback-images\", Boolean.toString(enableFallbackImages));\n-        configs.put(\"quarkus.native.enable-https-url-handler\", Boolean.toString(enableHttpsUrlHandler));\n-\n-        configs.put(\"quarkus.native.enable-http-url-handler\", Boolean.toString(enableHttpUrlHandler));\n-        configs.put(\"quarkus.native.enable-isolates\", Boolean.toString(enableIsolates));\n-\n-        configs.put(\"quarkus.native.enable-server\", Boolean.toString(enableServer));\n-\n-        configs.put(\"quarkus.native.enable-vm-inspection\", Boolean.toString(enableVMInspection));\n-\n-        configs.put(\"quarkus.native.full-stack-traces\", Boolean.toString(fullStackTraces));\n-\n-        if (graalvmHome != null && !graalvmHome.trim().isEmpty()) {\n-            configs.put(\"quarkus.native.graalvm-home\", graalvmHome);\n-        }\n-        if (nativeImageXmx != null && !nativeImageXmx.trim().isEmpty()) {\n-            configs.put(\"quarkus.native.native-image-xmx\", nativeImageXmx);\n-        }\n-        configs.put(\"quarkus.native.report-errors-at-runtime\", Boolean.toString(reportErrorsAtRuntime));\n-\n-        configs.put(\"quarkus.native.report-exception-stack-traces\", Boolean.toString(reportExceptionStackTraces));\n-\n-        return configs;\n-\n-    }\n-\n-    private static final class InMemoryConfigSource implements ConfigSource {\n-\n-        private final Map<String, String> values = new HashMap<>();\n-        private final int ordinal;\n-        private final String name;\n-\n-        private InMemoryConfigSource(int ordinal, String name) {\n-            this.ordinal = ordinal;\n-            this.name = name;\n-        }\n-\n-        public InMemoryConfigSource add(String key, String value) {\n-            values.put(key, value);\n-            return this;\n-        }\n-\n-        public InMemoryConfigSource add(String key, Object value) {\n-            values.put(key, value.toString());\n-            return this;\n-        }\n-\n-        @Override\n-        public Map<String, String> getProperties() {\n-            return values;\n-        }\n-\n-        @Override\n-        public Set<String> getPropertyNames() {\n-            return values.keySet();\n-        }\n-\n-        @Override\n-        public int getOrdinal() {\n-            return ordinal;\n-        }\n-\n-        @Override\n-        public String getValue(String propertyName) {\n-            return values.get(propertyName);\n-        }\n-\n-        @Override\n-        public String getName() {\n-            return name;\n-        }\n-    }\n-}\n"}}, {"oid": "cd07129eee3bf254ebc801f79174f1bf20117a5f", "url": "https://github.com/quarkusio/quarkus/commit/cd07129eee3bf254ebc801f79174f1bf20117a5f", "message": "deprecate buildNative gradle task", "committedDate": "2020-04-04T13:00:04Z", "type": "forcePushed"}, {"oid": "e8db7c71d28e8f14496854a7812c9b5ba75a2ce9", "url": "https://github.com/quarkusio/quarkus/commit/e8db7c71d28e8f14496854a7812c9b5ba75a2ce9", "message": "deprecate buildNative gradle task", "committedDate": "2020-04-04T17:50:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzUwMjY1Mg==", "url": "https://github.com/quarkusio/quarkus/pull/8325#discussion_r403502652", "bodyText": "Isn't this already done in configureBuildNativeTask(...)?", "author": "gastaldi", "createdAt": "2020-04-04T18:43:16Z", "path": "devtools/gradle/src/main/java/io/quarkus/gradle/QuarkusPlugin.java", "diffHunk": "@@ -111,9 +115,16 @@ private void registerTasks(Project project) {\n                             .extendsFrom(configurations.findByName(JavaPlugin.TEST_RUNTIME_ONLY_CONFIGURATION_NAME));\n \n                     Task testNative = tasks.create(TEST_NATIVE_TASK_NAME, QuarkusTestNative.class);\n-                    testNative.dependsOn(buildNative);\n+                    testNative.dependsOn(quarkusBuild);\n                     testNative.setShouldRunAfter(Collections.singletonList(tasks.findByName(JavaPlugin.TEST_TASK_NAME)));\n \n+                    project.getGradle().getTaskGraph().whenReady(taskGraph -> {", "originalCommit": "e8db7c71d28e8f14496854a7812c9b5ba75a2ce9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY1OTk4Ng==", "url": "https://github.com/quarkusio/quarkus/pull/8325#discussion_r403659986", "bodyText": "well, yes, you right, I moved out the logger and used task path instead of task reference.", "author": "glefloch", "createdAt": "2020-04-05T07:10:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzUwMjY1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "cc2784cf92ea89590256a60091343ec8b223bfea", "chunk": "diff --git a/devtools/gradle/src/main/java/io/quarkus/gradle/QuarkusPlugin.java b/devtools/gradle/src/main/java/io/quarkus/gradle/QuarkusPlugin.java\nindex 35bcdca3c5..b8e585ac9b 100644\n--- a/devtools/gradle/src/main/java/io/quarkus/gradle/QuarkusPlugin.java\n+++ b/devtools/gradle/src/main/java/io/quarkus/gradle/QuarkusPlugin.java\n\n@@ -117,14 +120,6 @@ public class QuarkusPlugin implements Plugin<Project> {\n                     Task testNative = tasks.create(TEST_NATIVE_TASK_NAME, QuarkusTestNative.class);\n                     testNative.dependsOn(quarkusBuild);\n                     testNative.setShouldRunAfter(Collections.singletonList(tasks.findByName(JavaPlugin.TEST_TASK_NAME)));\n-\n-                    project.getGradle().getTaskGraph().whenReady(taskGraph -> {\n-                        if (taskGraph.hasTask(testNative)) {\n-                            project.getExtensions().getExtraProperties()\n-                                    .set(QUARKUS_PACKAGE_TYPE, \"native\");\n-                        }\n-                    });\n-\n                     Consumer<Test> configureTestTask = t -> {\n                         // Quarkus test configuration task which should be executed before any Quarkus test\n                         t.dependsOn(quarkusTestConfig);\n"}}, {"oid": "cc2784cf92ea89590256a60091343ec8b223bfea", "url": "https://github.com/quarkusio/quarkus/commit/cc2784cf92ea89590256a60091343ec8b223bfea", "message": "deprecate buildNative gradle task", "committedDate": "2020-04-05T07:08:41Z", "type": "forcePushed"}, {"oid": "5fc9cf0393280d31eb2b2d11c1ebc87de9789272", "url": "https://github.com/quarkusio/quarkus/commit/5fc9cf0393280d31eb2b2d11c1ebc87de9789272", "message": "deprecate buildNative gradle task", "committedDate": "2020-04-07T08:38:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc4NTE5NQ==", "url": "https://github.com/quarkusio/quarkus/pull/8325#discussion_r404785195", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .warn(\"buildNative task has been deprecated in favor of quarkusBuild -Dquarkus.package.type=native\"));\n          \n          \n            \n                            .warn(\"The 'buildNative' task has been deprecated in favor of 'build -Dquarkus.package.type=native'\"));", "author": "gastaldi", "createdAt": "2020-04-07T12:54:53Z", "path": "devtools/gradle/src/main/java/io/quarkus/gradle/QuarkusPlugin.java", "diffHunk": "@@ -69,9 +72,15 @@ private void registerTasks(Project project) {\n \n         Task quarkusBuild = tasks.create(QUARKUS_BUILD_TASK_NAME, QuarkusBuild.class);\n         Task quarkusDev = tasks.create(QUARKUS_DEV_TASK_NAME, QuarkusDev.class);\n-        Task buildNative = tasks.create(BUILD_NATIVE_TASK_NAME, QuarkusNative.class);\n         Task quarkusTestConfig = tasks.create(QUARKUS_TEST_CONFIG_TASK_NAME, QuarkusTestConfig.class);\n \n+        Task buildNative = tasks.create(BUILD_NATIVE_TASK_NAME, DefaultTask.class);\n+        buildNative.finalizedBy(quarkusBuild);\n+        buildNative.doFirst(t -> project.getLogger()\n+                .warn(\"buildNative task has been deprecated in favor of quarkusBuild -Dquarkus.package.type=native\"));", "originalCommit": "5fc9cf0393280d31eb2b2d11c1ebc87de9789272", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc5NjIyMA==", "url": "https://github.com/quarkusio/quarkus/pull/8325#discussion_r404796220", "bodyText": "Yes, this is better, I updated the warning", "author": "glefloch", "createdAt": "2020-04-07T13:11:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc4NTE5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "74251c691f0e629809caef9ae906b060e5af422b", "chunk": "diff --git a/devtools/gradle/src/main/java/io/quarkus/gradle/QuarkusPlugin.java b/devtools/gradle/src/main/java/io/quarkus/gradle/QuarkusPlugin.java\nindex aaad8957d3..8e22bf68ef 100644\n--- a/devtools/gradle/src/main/java/io/quarkus/gradle/QuarkusPlugin.java\n+++ b/devtools/gradle/src/main/java/io/quarkus/gradle/QuarkusPlugin.java\n\n@@ -77,7 +77,7 @@ public class QuarkusPlugin implements Plugin<Project> {\n         Task buildNative = tasks.create(BUILD_NATIVE_TASK_NAME, DefaultTask.class);\n         buildNative.finalizedBy(quarkusBuild);\n         buildNative.doFirst(t -> project.getLogger()\n-                .warn(\"buildNative task has been deprecated in favor of quarkusBuild -Dquarkus.package.type=native\"));\n+                .warn(\"The 'buildNative' task has been deprecated in favor of 'build -Dquarkus.package.type=native'\"));\n \n         configureBuildNativeTask(project);\n \n"}}, {"oid": "74251c691f0e629809caef9ae906b060e5af422b", "url": "https://github.com/quarkusio/quarkus/commit/74251c691f0e629809caef9ae906b060e5af422b", "message": "deprecate buildNative gradle task", "committedDate": "2020-04-07T13:10:27Z", "type": "forcePushed"}, {"oid": "7ad072d01bcbb0a00c8f539d6c3a1516ddc10ea8", "url": "https://github.com/quarkusio/quarkus/commit/7ad072d01bcbb0a00c8f539d6c3a1516ddc10ea8", "message": "deprecate buildNative gradle task", "committedDate": "2020-04-07T13:52:43Z", "type": "forcePushed"}, {"oid": "b63baf7e43e4ce87af70cfd5781f01631f90bcf8", "url": "https://github.com/quarkusio/quarkus/commit/b63baf7e43e4ce87af70cfd5781f01631f90bcf8", "message": "deprecate buildNative gradle task", "committedDate": "2020-04-07T14:44:06Z", "type": "forcePushed"}, {"oid": "60fd16f8b3698182b52a3e22fe8cf1d03bff5c89", "url": "https://github.com/quarkusio/quarkus/commit/60fd16f8b3698182b52a3e22fe8cf1d03bff5c89", "message": "deprecate buildNative gradle task", "committedDate": "2020-04-07T14:48:22Z", "type": "commit"}, {"oid": "60fd16f8b3698182b52a3e22fe8cf1d03bff5c89", "url": "https://github.com/quarkusio/quarkus/commit/60fd16f8b3698182b52a3e22fe8cf1d03bff5c89", "message": "deprecate buildNative gradle task", "committedDate": "2020-04-07T14:48:22Z", "type": "forcePushed"}]}