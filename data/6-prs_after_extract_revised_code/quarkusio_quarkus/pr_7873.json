{"pr_number": 7873, "pr_title": "Add support for Vault TOTP secrets", "pr_createdAt": "2020-03-16T07:02:29Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/7873", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5MDcxMw==", "url": "https://github.com/quarkusio/quarkus/pull/7873#discussion_r393190713", "bodyText": "Can the dynamic key operations be of the practical interest to the application code ? I suppose one can indeed create them dynamically, just checking :-)", "author": "sberyozkin", "createdAt": "2020-03-16T17:23:49Z", "path": "extensions/vault/runtime/src/main/java/io/quarkus/vault/VaultTOTPSecretEngine.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package io.quarkus.vault;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import io.quarkus.vault.runtime.config.VaultRuntimeConfig;\n+import io.quarkus.vault.secrets.totp.CreateKeyParameters;\n+import io.quarkus.vault.secrets.totp.KeyConfiguration;\n+import io.quarkus.vault.secrets.totp.KeyDefinition;\n+\n+/**\n+ * This service provides access to the TOTP secret engine.\n+ *\n+ * @see VaultRuntimeConfig\n+ */\n+public interface VaultTOTPSecretEngine {\n+\n+    /**\n+     * Creates or updates a key definition.\n+     * \n+     * @param name of the key.\n+     * @param createKeyParameters required to create or update a key.\n+     * @return Barcode and/or URL of the created OTP key.\n+     */\n+    Optional<KeyDefinition> createKey(String name, CreateKeyParameters createKeyParameters);", "originalCommit": "be73cb73ffd2e1077d3396f910e3b1d0b5248cca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5MjI4Ng==", "url": "https://github.com/quarkusio/quarkus/pull/7873#discussion_r393192286", "bodyText": "This key is a TOTP key with different properties than a standard key, in this case, a key just contains two fields a QR code and a URL.", "author": "lordofthejars", "createdAt": "2020-03-16T17:26:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5MDcxMw=="}], "type": "inlineReview", "revised_code": {"commit": "6e80ce542f2c02253a3d05308f32968a30adb4ef", "chunk": "diff --git a/extensions/vault/runtime/src/main/java/io/quarkus/vault/VaultTOTPSecretEngine.java b/extensions/vault/runtime/src/main/java/io/quarkus/vault/VaultTOTPSecretEngine.java\nindex 6662a1eb6e..d592bded66 100644\n--- a/extensions/vault/runtime/src/main/java/io/quarkus/vault/VaultTOTPSecretEngine.java\n+++ b/extensions/vault/runtime/src/main/java/io/quarkus/vault/VaultTOTPSecretEngine.java\n\n@@ -3,7 +3,6 @@ package io.quarkus.vault;\n import java.util.List;\n import java.util.Optional;\n \n-import io.quarkus.vault.runtime.config.VaultRuntimeConfig;\n import io.quarkus.vault.secrets.totp.CreateKeyParameters;\n import io.quarkus.vault.secrets.totp.KeyConfiguration;\n import io.quarkus.vault.secrets.totp.KeyDefinition;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ5NzEwNA==", "url": "https://github.com/quarkusio/quarkus/pull/7873#discussion_r393497104", "bodyText": "I have used body for local variables and parameters throughout this class for conciseness. same for result in VaultTOTPManager", "author": "vsevel", "createdAt": "2020-03-17T07:56:50Z", "path": "extensions/vault/runtime/src/main/java/io/quarkus/vault/runtime/client/OkHttpVaultClient.java", "diffHunk": "@@ -167,11 +174,61 @@ public VaultTransitEncrypt rewrap(String token, String keyName, VaultTransitRewr\n         return post(\"transit/rewrap/\" + keyName, token, body, VaultTransitEncrypt.class);\n     }\n \n+    @Override\n+    public VaultTOTPCreateKeyResult createTOTPKey(String token, String keyName,\n+            VaultTOTPCreateKeyBody body) {\n+        String path = \"totp/keys/\" + keyName;\n+\n+        // Depending on parameters it might produce an output or not\n+        if (body.isProducingOutput()) {\n+            return post(path, token, body, VaultTOTPCreateKeyResult.class, 200);\n+        } else {\n+            post(path, token, body, 204);\n+            return null;\n+        }\n+    }\n+\n+    @Override\n+    public VaultTOTPReadKeyResult readTOTPKey(String token, String keyName) {\n+        String path = \"totp/keys/\" + keyName;\n+        return get(path, token, VaultTOTPReadKeyResult.class);\n+    }\n+\n+    @Override\n+    public VaultTOTPListKeysResult listTOTPKeys(String token) {\n+        return list(\"totp/keys\", token, VaultTOTPListKeysResult.class);\n+    }\n+\n+    @Override\n+    public void deleteTOTPKey(String token, String keyName) {\n+        String path = \"totp/keys/\" + keyName;\n+        delete(path, token, 204);\n+    }\n+\n+    @Override\n+    public VaultTOTPGenerateCodeResult generateTOTPCode(String token, String keyName) {\n+        String path = \"totp/code/\" + keyName;\n+        return get(path, token, VaultTOTPGenerateCodeResult.class);\n+    }\n+\n+    @Override\n+    public VaultTOTPValidateCodeResult validateTOTPCode(String token, String keyName,\n+            String code) {\n+        String path = \"totp/code/\" + keyName;\n+        VaultTOTPValidateCodeBody vaultTOTPValidateCodeBody = new VaultTOTPValidateCodeBody(code);", "originalCommit": "be73cb73ffd2e1077d3396f910e3b1d0b5248cca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6e80ce542f2c02253a3d05308f32968a30adb4ef", "chunk": "diff --git a/extensions/vault/runtime/src/main/java/io/quarkus/vault/runtime/client/OkHttpVaultClient.java b/extensions/vault/runtime/src/main/java/io/quarkus/vault/runtime/client/OkHttpVaultClient.java\nindex ede9a59bed..a5ea06f68f 100644\n--- a/extensions/vault/runtime/src/main/java/io/quarkus/vault/runtime/client/OkHttpVaultClient.java\n+++ b/extensions/vault/runtime/src/main/java/io/quarkus/vault/runtime/client/OkHttpVaultClient.java\n\n@@ -215,8 +217,8 @@ public class OkHttpVaultClient implements VaultClient {\n     public VaultTOTPValidateCodeResult validateTOTPCode(String token, String keyName,\n             String code) {\n         String path = \"totp/code/\" + keyName;\n-        VaultTOTPValidateCodeBody vaultTOTPValidateCodeBody = new VaultTOTPValidateCodeBody(code);\n-        return post(path, token, vaultTOTPValidateCodeBody, VaultTOTPValidateCodeResult.class);\n+        VaultTOTPValidateCodeBody body = new VaultTOTPValidateCodeBody(code);\n+        return post(path, token, body, VaultTOTPValidateCodeResult.class);\n     }\n \n     // ---\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ5ODUzOQ==", "url": "https://github.com/quarkusio/quarkus/pull/7873#discussion_r393498539", "bodyText": "It is funny I have never spotted that I was sending null to vault in the other use cases.\nI would suggest making it a global default for the extension with mapper.setSerializationInclusion(Include.NON_NULL); rather than having to specify it on each field.", "author": "vsevel", "createdAt": "2020-03-17T08:00:05Z", "path": "extensions/vault/runtime/src/main/java/io/quarkus/vault/runtime/client/dto/totp/VaultTOTPCreateKeyBody.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package io.quarkus.vault.runtime.client.dto.totp;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import io.quarkus.vault.runtime.client.dto.VaultModel;\n+\n+public class VaultTOTPCreateKeyBody implements VaultModel {\n+\n+    @JsonInclude(JsonInclude.Include.NON_NULL)", "originalCommit": "be73cb73ffd2e1077d3396f910e3b1d0b5248cca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6e80ce542f2c02253a3d05308f32968a30adb4ef", "chunk": "diff --git a/extensions/vault/runtime/src/main/java/io/quarkus/vault/runtime/client/dto/totp/VaultTOTPCreateKeyBody.java b/extensions/vault/runtime/src/main/java/io/quarkus/vault/runtime/client/dto/totp/VaultTOTPCreateKeyBody.java\nindex d9135a5e87..6ac0739a57 100644\n--- a/extensions/vault/runtime/src/main/java/io/quarkus/vault/runtime/client/dto/totp/VaultTOTPCreateKeyBody.java\n+++ b/extensions/vault/runtime/src/main/java/io/quarkus/vault/runtime/client/dto/totp/VaultTOTPCreateKeyBody.java\n\n@@ -1,47 +1,38 @@\n package io.quarkus.vault.runtime.client.dto.totp;\n \n-import com.fasterxml.jackson.annotation.JsonInclude;\n import com.fasterxml.jackson.annotation.JsonProperty;\n \n import io.quarkus.vault.runtime.client.dto.VaultModel;\n \n public class VaultTOTPCreateKeyBody implements VaultModel {\n \n-    @JsonInclude(JsonInclude.Include.NON_NULL)\n     public Boolean generate;\n-    @JsonInclude(JsonInclude.Include.NON_NULL)\n     public Boolean exported;\n \n     @JsonProperty(\"key_size\")\n-    @JsonInclude(JsonInclude.Include.NON_NULL)\n     public Integer keySize;\n \n-    @JsonInclude(JsonInclude.Include.NON_NULL)\n     public String url;\n-    @JsonInclude(JsonInclude.Include.NON_NULL)\n     public String key;\n-    @JsonInclude(JsonInclude.Include.NON_NULL)\n     public String issuer;\n \n     @JsonProperty(\"account_name\")\n-    @JsonInclude(JsonInclude.Include.NON_NULL)\n     public String accountName;\n \n-    @JsonInclude(JsonInclude.Include.NON_NULL)\n     public String period;\n-    @JsonInclude(JsonInclude.Include.NON_NULL)\n     public String algorithm;\n-    @JsonInclude(JsonInclude.Include.NON_NULL)\n     public Integer digits;\n-    @JsonInclude(JsonInclude.Include.NON_NULL)\n     public Integer skew;\n \n     @JsonProperty(\"qr_size\")\n-    @JsonInclude(JsonInclude.Include.NON_NULL)\n     public Integer qrSize;\n \n     public boolean isProducingOutput() {\n         // When exported is not set, by default is true\n-        return (exported == null || exported == Boolean.TRUE) && (generate != null && generate == Boolean.TRUE);\n+        return is(exported, true) && is(generate, false);\n+    }\n+\n+    private boolean is(Boolean v, boolean defaultValue) {\n+        return v == null ? defaultValue : v;\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUxNDA2MA==", "url": "https://github.com/quarkusio/quarkus/pull/7873#discussion_r393514060", "bodyText": "(exported == null || exported) && (generate != null && generate)\nit is simpler, and the logic is not broken when the user passes new Boolean(true) instead of Boolean.TRUE\nor (a bit longer but a bit clearer):\n    public boolean isProducingOutput() {\n        return is(exported, true) && is(generate, false);\n    }\n\n    private boolean is(Boolean v, boolean defaultValue) {\n        return v == null ? defaultValue : v;\n    }", "author": "vsevel", "createdAt": "2020-03-17T08:33:06Z", "path": "extensions/vault/runtime/src/main/java/io/quarkus/vault/runtime/client/dto/totp/VaultTOTPCreateKeyBody.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package io.quarkus.vault.runtime.client.dto.totp;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import io.quarkus.vault.runtime.client.dto.VaultModel;\n+\n+public class VaultTOTPCreateKeyBody implements VaultModel {\n+\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public Boolean generate;\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public Boolean exported;\n+\n+    @JsonProperty(\"key_size\")\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public Integer keySize;\n+\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public String url;\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public String key;\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public String issuer;\n+\n+    @JsonProperty(\"account_name\")\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public String accountName;\n+\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public String period;\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public String algorithm;\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public Integer digits;\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public Integer skew;\n+\n+    @JsonProperty(\"qr_size\")\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public Integer qrSize;\n+\n+    public boolean isProducingOutput() {\n+        // When exported is not set, by default is true\n+        return (exported == null || exported == Boolean.TRUE) && (generate != null && generate == Boolean.TRUE);", "originalCommit": "be73cb73ffd2e1077d3396f910e3b1d0b5248cca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUxNDU1OA==", "url": "https://github.com/quarkusio/quarkus/pull/7873#discussion_r393514558", "bodyText": "Good catch thanks.", "author": "lordofthejars", "createdAt": "2020-03-17T08:34:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUxNDA2MA=="}], "type": "inlineReview", "revised_code": {"commit": "6e80ce542f2c02253a3d05308f32968a30adb4ef", "chunk": "diff --git a/extensions/vault/runtime/src/main/java/io/quarkus/vault/runtime/client/dto/totp/VaultTOTPCreateKeyBody.java b/extensions/vault/runtime/src/main/java/io/quarkus/vault/runtime/client/dto/totp/VaultTOTPCreateKeyBody.java\nindex d9135a5e87..6ac0739a57 100644\n--- a/extensions/vault/runtime/src/main/java/io/quarkus/vault/runtime/client/dto/totp/VaultTOTPCreateKeyBody.java\n+++ b/extensions/vault/runtime/src/main/java/io/quarkus/vault/runtime/client/dto/totp/VaultTOTPCreateKeyBody.java\n\n@@ -1,47 +1,38 @@\n package io.quarkus.vault.runtime.client.dto.totp;\n \n-import com.fasterxml.jackson.annotation.JsonInclude;\n import com.fasterxml.jackson.annotation.JsonProperty;\n \n import io.quarkus.vault.runtime.client.dto.VaultModel;\n \n public class VaultTOTPCreateKeyBody implements VaultModel {\n \n-    @JsonInclude(JsonInclude.Include.NON_NULL)\n     public Boolean generate;\n-    @JsonInclude(JsonInclude.Include.NON_NULL)\n     public Boolean exported;\n \n     @JsonProperty(\"key_size\")\n-    @JsonInclude(JsonInclude.Include.NON_NULL)\n     public Integer keySize;\n \n-    @JsonInclude(JsonInclude.Include.NON_NULL)\n     public String url;\n-    @JsonInclude(JsonInclude.Include.NON_NULL)\n     public String key;\n-    @JsonInclude(JsonInclude.Include.NON_NULL)\n     public String issuer;\n \n     @JsonProperty(\"account_name\")\n-    @JsonInclude(JsonInclude.Include.NON_NULL)\n     public String accountName;\n \n-    @JsonInclude(JsonInclude.Include.NON_NULL)\n     public String period;\n-    @JsonInclude(JsonInclude.Include.NON_NULL)\n     public String algorithm;\n-    @JsonInclude(JsonInclude.Include.NON_NULL)\n     public Integer digits;\n-    @JsonInclude(JsonInclude.Include.NON_NULL)\n     public Integer skew;\n \n     @JsonProperty(\"qr_size\")\n-    @JsonInclude(JsonInclude.Include.NON_NULL)\n     public Integer qrSize;\n \n     public boolean isProducingOutput() {\n         // When exported is not set, by default is true\n-        return (exported == null || exported == Boolean.TRUE) && (generate != null && generate == Boolean.TRUE);\n+        return is(exported, true) && is(generate, false);\n+    }\n+\n+    private boolean is(Boolean v, boolean defaultValue) {\n+        return v == null ? defaultValue : v;\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUyNzY5Ng==", "url": "https://github.com/quarkusio/quarkus/pull/7873#discussion_r393527696", "bodyText": "create a constant?", "author": "vsevel", "createdAt": "2020-03-17T08:58:31Z", "path": "integration-tests/vault/src/test/java/io/quarkus/vault/VaultTOTPITCase.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package io.quarkus.vault;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.condition.DisabledOnOs;\n+import org.junit.jupiter.api.condition.OS;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.test.QuarkusUnitTest;\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.vault.secrets.totp.CreateKeyParameters;\n+import io.quarkus.vault.secrets.totp.KeyConfiguration;\n+import io.quarkus.vault.secrets.totp.KeyDefinition;\n+import io.quarkus.vault.test.VaultTestLifecycleManager;\n+\n+@DisabledOnOs(OS.WINDOWS) // https://github.com/quarkusio/quarkus/issues/3796\n+@QuarkusTestResource(VaultTestLifecycleManager.class)\n+public class VaultTOTPITCase {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest config = new QuarkusUnitTest()\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                    .addAsResource(\"application-vault-totp.properties\", \"application.properties\"));\n+\n+    @Inject\n+    VaultTOTPSecretEngine vaultTOTPSecretEngine;\n+\n+    @Test\n+    public void createKey() {\n+        CreateKeyParameters createKeyParameters = new CreateKeyParameters(\n+                \"otpauth://totp/Vault:test@test.com?secret=Y64VEVMBTSXCYIWRSHRNDZW62MPGVU2G&issuer=Vault\");\n+        final Optional<KeyDefinition> myKey = vaultTOTPSecretEngine.createKey(\"my_key\", createKeyParameters);\n+\n+        assertThat(myKey).isNotPresent();\n+    }\n+\n+    @Test\n+    public void createGenerateKey() {\n+        CreateKeyParameters createKeyParameters = new CreateKeyParameters(\"Google\", \"test@gmail.com\");\n+        final Optional<KeyDefinition> myKey = vaultTOTPSecretEngine.createKey(\"my_key_2\", createKeyParameters);\n+\n+        assertThat(myKey)\n+                .isPresent()\n+                .get().hasNoNullFieldsOrProperties();\n+    }\n+\n+    @Test\n+    public void readKey() {\n+        CreateKeyParameters createKeyParameters = new CreateKeyParameters(\n+                \"otpauth://totp/Vault:test@google.com?secret=Y64VEVMBTSXCYIWRSHRNDZW62MPGVU2G&issuer=Vault\");", "originalCommit": "be73cb73ffd2e1077d3396f910e3b1d0b5248cca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6e80ce542f2c02253a3d05308f32968a30adb4ef", "chunk": "diff --git a/integration-tests/vault/src/test/java/io/quarkus/vault/VaultTOTPITCase.java b/integration-tests/vault/src/test/java/io/quarkus/vault/VaultTOTPITCase.java\nindex a848598b26..59d8e675a9 100644\n--- a/integration-tests/vault/src/test/java/io/quarkus/vault/VaultTOTPITCase.java\n+++ b/integration-tests/vault/src/test/java/io/quarkus/vault/VaultTOTPITCase.java\n\n@@ -25,6 +25,8 @@ import io.quarkus.vault.test.VaultTestLifecycleManager;\n @QuarkusTestResource(VaultTestLifecycleManager.class)\n public class VaultTOTPITCase {\n \n+    private static final String TEST_OTP_URL = \"otpauth://totp/Vault:test@google.com?secret=Y64VEVMBTSXCYIWRSHRNDZW62MPGVU2G&issuer=Vault\";\n+\n     @RegisterExtension\n     static final QuarkusUnitTest config = new QuarkusUnitTest()\n             .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYwMzc0NQ==", "url": "https://github.com/quarkusio/quarkus/pull/7873#discussion_r393603745", "bodyText": "actually I do not think you have any config properties.\nthis might be nice to include a link to the official vault doc, such as in: https://github.com/lordofthejars/quarkus/blob/issue-7865/extensions/vault/runtime/src/main/java/io/quarkus/vault/VaultTransitSecretEngine.java#L23", "author": "vsevel", "createdAt": "2020-03-17T11:14:02Z", "path": "extensions/vault/runtime/src/main/java/io/quarkus/vault/VaultTOTPSecretEngine.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package io.quarkus.vault;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import io.quarkus.vault.runtime.config.VaultRuntimeConfig;\n+import io.quarkus.vault.secrets.totp.CreateKeyParameters;\n+import io.quarkus.vault.secrets.totp.KeyConfiguration;\n+import io.quarkus.vault.secrets.totp.KeyDefinition;\n+\n+/**\n+ * This service provides access to the TOTP secret engine.\n+ *\n+ * @see VaultRuntimeConfig", "originalCommit": "e4cdd42abc484299974dc5aa9eaf31a9fc336920", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6e80ce542f2c02253a3d05308f32968a30adb4ef", "chunk": "diff --git a/extensions/vault/runtime/src/main/java/io/quarkus/vault/VaultTOTPSecretEngine.java b/extensions/vault/runtime/src/main/java/io/quarkus/vault/VaultTOTPSecretEngine.java\nindex 6662a1eb6e..d592bded66 100644\n--- a/extensions/vault/runtime/src/main/java/io/quarkus/vault/VaultTOTPSecretEngine.java\n+++ b/extensions/vault/runtime/src/main/java/io/quarkus/vault/VaultTOTPSecretEngine.java\n\n@@ -3,7 +3,6 @@ package io.quarkus.vault;\n import java.util.List;\n import java.util.Optional;\n \n-import io.quarkus.vault.runtime.config.VaultRuntimeConfig;\n import io.quarkus.vault.secrets.totp.CreateKeyParameters;\n import io.quarkus.vault.secrets.totp.KeyConfiguration;\n import io.quarkus.vault.secrets.totp.KeyDefinition;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYwNTQzMw==", "url": "https://github.com/quarkusio/quarkus/pull/7873#discussion_r393605433", "bodyText": "I would rename vaultTOTPCreateKeyBody into body as well here.", "author": "vsevel", "createdAt": "2020-03-17T11:17:27Z", "path": "extensions/vault/runtime/src/main/java/io/quarkus/vault/runtime/VaultTOTPManager.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package io.quarkus.vault.runtime;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import io.quarkus.vault.VaultTOTPSecretEngine;\n+import io.quarkus.vault.runtime.client.VaultClient;\n+import io.quarkus.vault.runtime.client.VaultClientException;\n+import io.quarkus.vault.runtime.client.dto.totp.VaultTOTPCreateKeyBody;\n+import io.quarkus.vault.runtime.client.dto.totp.VaultTOTPCreateKeyResult;\n+import io.quarkus.vault.runtime.client.dto.totp.VaultTOTPReadKeyResult;\n+import io.quarkus.vault.runtime.config.VaultRuntimeConfig;\n+import io.quarkus.vault.secrets.totp.CreateKeyParameters;\n+import io.quarkus.vault.secrets.totp.KeyConfiguration;\n+import io.quarkus.vault.secrets.totp.KeyDefinition;\n+\n+public class VaultTOTPManager implements VaultTOTPSecretEngine {\n+\n+    private VaultAuthManager vaultAuthManager;\n+    private VaultClient vaultClient;\n+    private VaultRuntimeConfig serverConfig;\n+\n+    public VaultTOTPManager(VaultAuthManager vaultAuthManager, VaultClient vaultClient, VaultRuntimeConfig serverConfig) {\n+        this.vaultAuthManager = vaultAuthManager;\n+        this.vaultClient = vaultClient;\n+        this.serverConfig = serverConfig;\n+    }\n+\n+    @Override\n+    public Optional<KeyDefinition> createKey(String name, CreateKeyParameters createKeyParameters) {\n+        VaultTOTPCreateKeyBody vaultTOTPCreateKeyBody = new VaultTOTPCreateKeyBody();", "originalCommit": "e4cdd42abc484299974dc5aa9eaf31a9fc336920", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6e80ce542f2c02253a3d05308f32968a30adb4ef", "chunk": "diff --git a/extensions/vault/runtime/src/main/java/io/quarkus/vault/runtime/VaultTOTPManager.java b/extensions/vault/runtime/src/main/java/io/quarkus/vault/runtime/VaultTOTPManager.java\nindex f96e205a78..a1f933879c 100644\n--- a/extensions/vault/runtime/src/main/java/io/quarkus/vault/runtime/VaultTOTPManager.java\n+++ b/extensions/vault/runtime/src/main/java/io/quarkus/vault/runtime/VaultTOTPManager.java\n\n@@ -10,7 +10,6 @@ import io.quarkus.vault.runtime.client.VaultClientException;\n import io.quarkus.vault.runtime.client.dto.totp.VaultTOTPCreateKeyBody;\n import io.quarkus.vault.runtime.client.dto.totp.VaultTOTPCreateKeyResult;\n import io.quarkus.vault.runtime.client.dto.totp.VaultTOTPReadKeyResult;\n-import io.quarkus.vault.runtime.config.VaultRuntimeConfig;\n import io.quarkus.vault.secrets.totp.CreateKeyParameters;\n import io.quarkus.vault.secrets.totp.KeyConfiguration;\n import io.quarkus.vault.secrets.totp.KeyDefinition;\n"}}, {"oid": "6e80ce542f2c02253a3d05308f32968a30adb4ef", "url": "https://github.com/quarkusio/quarkus/commit/6e80ce542f2c02253a3d05308f32968a30adb4ef", "message": "fix(#7865): Adds support for Vault TOTP secrets", "committedDate": "2020-03-18T16:08:17Z", "type": "commit"}]}