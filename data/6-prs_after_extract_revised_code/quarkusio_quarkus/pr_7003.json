{"pr_number": 7003, "pr_title": "ArC- reduce overhead of metadata initialization in subclass constructors", "pr_createdAt": "2020-02-05T13:15:32Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/7003", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI1MTE5Ng==", "url": "https://github.com/quarkusio/quarkus/pull/7003#discussion_r375251196", "bodyText": "Shouldn't you use the LONG version?", "author": "gsmet", "createdAt": "2020-02-05T13:24:06Z", "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/AnnotationLiteralGenerator.java", "diffHunk": "@@ -241,14 +254,30 @@ static ResultHandle arrayValue(AnnotationValue value, BytecodeCreator valueMetho\n                                 annotationClass);\n                     }\n                 }\n-                retValue = valueMethod.newArray(componentType(method), valueMethod.load(0));\n+                DotName componentName = componentTypeName(method);\n+                // Use empty array constants for common component kinds\n+                if (DotNames.CLASS.equals(componentName)) {\n+                    retValue = valueMethod.readStaticField(FieldDescriptors.ANNOTATION_LITERALS_EMPTY_CLASS_ARRAY);\n+                } else if (DotNames.STRING.equals(componentName)) {\n+                    retValue = valueMethod.readStaticField(FieldDescriptors.ANNOTATION_LITERALS_EMPTY_STRING_ARRAY);\n+                } else if (DotNames.LONG.equals(componentName)) {\n+                    retValue = valueMethod.readStaticField(FieldDescriptors.ANNOTATION_LITERALS_EMPTY_STRING_ARRAY);", "originalCommit": "689a18703ee3af8b634588407dfebdf8a6bf88f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI3ODU2Mg==", "url": "https://github.com/quarkusio/quarkus/pull/7003#discussion_r375278562", "bodyText": "Yes, of course.. I'll fix it.", "author": "mkouba", "createdAt": "2020-02-05T14:15:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI1MTE5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "6fb215ec67d724ee51e93cecc9c4292296ce68e1", "chunk": "diff --git a/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/AnnotationLiteralGenerator.java b/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/AnnotationLiteralGenerator.java\nindex 4fff2a80db..6bfdc2df20 100644\n--- a/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/AnnotationLiteralGenerator.java\n+++ b/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/AnnotationLiteralGenerator.java\n\n@@ -260,10 +261,10 @@ public class AnnotationLiteralGenerator extends AbstractGenerator {\n                     retValue = valueMethod.readStaticField(FieldDescriptors.ANNOTATION_LITERALS_EMPTY_CLASS_ARRAY);\n                 } else if (DotNames.STRING.equals(componentName)) {\n                     retValue = valueMethod.readStaticField(FieldDescriptors.ANNOTATION_LITERALS_EMPTY_STRING_ARRAY);\n-                } else if (DotNames.LONG.equals(componentName)) {\n-                    retValue = valueMethod.readStaticField(FieldDescriptors.ANNOTATION_LITERALS_EMPTY_STRING_ARRAY);\n-                } else if (DotNames.INTEGER.equals(componentName)) {\n-                    retValue = valueMethod.readStaticField(FieldDescriptors.ANNOTATION_LITERALS_EMPTY_STRING_ARRAY);\n+                } else if (PrimitiveType.LONG.name().equals(componentName)) {\n+                    retValue = valueMethod.readStaticField(FieldDescriptors.ANNOTATION_LITERALS_EMPTY_LONG_ARRAY);\n+                } else if (PrimitiveType.INT.name().equals(componentName)) {\n+                    retValue = valueMethod.readStaticField(FieldDescriptors.ANNOTATION_LITERALS_EMPTY_INT_ARRAY);\n                 } else {\n                     retValue = valueMethod.newArray(componentName.toString(), valueMethod.load(0));\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI1MTI2Mg==", "url": "https://github.com/quarkusio/quarkus/pull/7003#discussion_r375251262", "bodyText": "Shouldn't you use the INT version?", "author": "gsmet", "createdAt": "2020-02-05T13:24:14Z", "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/AnnotationLiteralGenerator.java", "diffHunk": "@@ -241,14 +254,30 @@ static ResultHandle arrayValue(AnnotationValue value, BytecodeCreator valueMetho\n                                 annotationClass);\n                     }\n                 }\n-                retValue = valueMethod.newArray(componentType(method), valueMethod.load(0));\n+                DotName componentName = componentTypeName(method);\n+                // Use empty array constants for common component kinds\n+                if (DotNames.CLASS.equals(componentName)) {\n+                    retValue = valueMethod.readStaticField(FieldDescriptors.ANNOTATION_LITERALS_EMPTY_CLASS_ARRAY);\n+                } else if (DotNames.STRING.equals(componentName)) {\n+                    retValue = valueMethod.readStaticField(FieldDescriptors.ANNOTATION_LITERALS_EMPTY_STRING_ARRAY);\n+                } else if (DotNames.LONG.equals(componentName)) {\n+                    retValue = valueMethod.readStaticField(FieldDescriptors.ANNOTATION_LITERALS_EMPTY_STRING_ARRAY);\n+                } else if (DotNames.INTEGER.equals(componentName)) {\n+                    retValue = valueMethod.readStaticField(FieldDescriptors.ANNOTATION_LITERALS_EMPTY_STRING_ARRAY);", "originalCommit": "689a18703ee3af8b634588407dfebdf8a6bf88f2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6fb215ec67d724ee51e93cecc9c4292296ce68e1", "chunk": "diff --git a/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/AnnotationLiteralGenerator.java b/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/AnnotationLiteralGenerator.java\nindex 4fff2a80db..6bfdc2df20 100644\n--- a/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/AnnotationLiteralGenerator.java\n+++ b/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/AnnotationLiteralGenerator.java\n\n@@ -260,10 +261,10 @@ public class AnnotationLiteralGenerator extends AbstractGenerator {\n                     retValue = valueMethod.readStaticField(FieldDescriptors.ANNOTATION_LITERALS_EMPTY_CLASS_ARRAY);\n                 } else if (DotNames.STRING.equals(componentName)) {\n                     retValue = valueMethod.readStaticField(FieldDescriptors.ANNOTATION_LITERALS_EMPTY_STRING_ARRAY);\n-                } else if (DotNames.LONG.equals(componentName)) {\n-                    retValue = valueMethod.readStaticField(FieldDescriptors.ANNOTATION_LITERALS_EMPTY_STRING_ARRAY);\n-                } else if (DotNames.INTEGER.equals(componentName)) {\n-                    retValue = valueMethod.readStaticField(FieldDescriptors.ANNOTATION_LITERALS_EMPTY_STRING_ARRAY);\n+                } else if (PrimitiveType.LONG.name().equals(componentName)) {\n+                    retValue = valueMethod.readStaticField(FieldDescriptors.ANNOTATION_LITERALS_EMPTY_LONG_ARRAY);\n+                } else if (PrimitiveType.INT.name().equals(componentName)) {\n+                    retValue = valueMethod.readStaticField(FieldDescriptors.ANNOTATION_LITERALS_EMPTY_INT_ARRAY);\n                 } else {\n                     retValue = valueMethod.newArray(componentName.toString(), valueMethod.load(0));\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI1MTQzNw==", "url": "https://github.com/quarkusio/quarkus/pull/7003#discussion_r375251437", "bodyText": "Is it normal it's String here?", "author": "gsmet", "createdAt": "2020-02-05T13:24:35Z", "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/FieldDescriptors.java", "diffHunk": "@@ -12,6 +13,22 @@\n     static final FieldDescriptor QUALIFIERS_IP_QUALIFIERS = FieldDescriptor.of(Qualifiers.class, \"IP_DEFAULT_QUALIFIERS\",\n             Set.class);\n \n+    static final FieldDescriptor ANNOTATION_LITERALS_EMPTY_CLASS_ARRAY = FieldDescriptor.of(AnnotationLiterals.class,\n+            \"EMPTY_CLASS_ARRAY\",\n+            Class[].class);\n+\n+    static final FieldDescriptor ANNOTATION_LITERALS_EMPTY_STRING_ARRAY = FieldDescriptor.of(AnnotationLiterals.class,\n+            \"EMPTY_STRING_ARRAY\",\n+            String[].class);\n+\n+    static final FieldDescriptor ANNOTATION_LITERALS_EMPTY_LONG_ARRAY = FieldDescriptor.of(AnnotationLiterals.class,\n+            \"EMPTY_LONG_ARRAY\",\n+            String[].class);", "originalCommit": "689a18703ee3af8b634588407dfebdf8a6bf88f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI3ODkxNQ==", "url": "https://github.com/quarkusio/quarkus/pull/7003#discussion_r375278915", "bodyText": "Eh, of course not. I was just too tired...", "author": "mkouba", "createdAt": "2020-02-05T14:15:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI1MTQzNw=="}], "type": "inlineReview", "revised_code": {"commit": "6fb215ec67d724ee51e93cecc9c4292296ce68e1", "chunk": "diff --git a/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/FieldDescriptors.java b/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/FieldDescriptors.java\nindex 9a9a247819..669ea1aa23 100644\n--- a/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/FieldDescriptors.java\n+++ b/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/FieldDescriptors.java\n\n@@ -23,11 +23,11 @@ final class FieldDescriptors {\n \n     static final FieldDescriptor ANNOTATION_LITERALS_EMPTY_LONG_ARRAY = FieldDescriptor.of(AnnotationLiterals.class,\n             \"EMPTY_LONG_ARRAY\",\n-            String[].class);\n+            long[].class);\n     \n     static final FieldDescriptor ANNOTATION_LITERALS_EMPTY_INT_ARRAY = FieldDescriptor.of(AnnotationLiterals.class,\n             \"EMPTY_INT_ARRAY\",\n-            String[].class);\n+            int[].class);\n     \n     private FieldDescriptors() {\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI1MTUwNQ==", "url": "https://github.com/quarkusio/quarkus/pull/7003#discussion_r375251505", "bodyText": "Same here?", "author": "gsmet", "createdAt": "2020-02-05T13:24:43Z", "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/FieldDescriptors.java", "diffHunk": "@@ -12,6 +13,22 @@\n     static final FieldDescriptor QUALIFIERS_IP_QUALIFIERS = FieldDescriptor.of(Qualifiers.class, \"IP_DEFAULT_QUALIFIERS\",\n             Set.class);\n \n+    static final FieldDescriptor ANNOTATION_LITERALS_EMPTY_CLASS_ARRAY = FieldDescriptor.of(AnnotationLiterals.class,\n+            \"EMPTY_CLASS_ARRAY\",\n+            Class[].class);\n+\n+    static final FieldDescriptor ANNOTATION_LITERALS_EMPTY_STRING_ARRAY = FieldDescriptor.of(AnnotationLiterals.class,\n+            \"EMPTY_STRING_ARRAY\",\n+            String[].class);\n+\n+    static final FieldDescriptor ANNOTATION_LITERALS_EMPTY_LONG_ARRAY = FieldDescriptor.of(AnnotationLiterals.class,\n+            \"EMPTY_LONG_ARRAY\",\n+            String[].class);\n+    \n+    static final FieldDescriptor ANNOTATION_LITERALS_EMPTY_INT_ARRAY = FieldDescriptor.of(AnnotationLiterals.class,\n+            \"EMPTY_INT_ARRAY\",\n+            String[].class);", "originalCommit": "689a18703ee3af8b634588407dfebdf8a6bf88f2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6fb215ec67d724ee51e93cecc9c4292296ce68e1", "chunk": "diff --git a/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/FieldDescriptors.java b/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/FieldDescriptors.java\nindex 9a9a247819..669ea1aa23 100644\n--- a/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/FieldDescriptors.java\n+++ b/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/FieldDescriptors.java\n\n@@ -23,11 +23,11 @@ final class FieldDescriptors {\n \n     static final FieldDescriptor ANNOTATION_LITERALS_EMPTY_LONG_ARRAY = FieldDescriptor.of(AnnotationLiterals.class,\n             \"EMPTY_LONG_ARRAY\",\n-            String[].class);\n+            long[].class);\n     \n     static final FieldDescriptor ANNOTATION_LITERALS_EMPTY_INT_ARRAY = FieldDescriptor.of(AnnotationLiterals.class,\n             \"EMPTY_INT_ARRAY\",\n-            String[].class);\n+            int[].class);\n     \n     private FieldDescriptors() {\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI1MjcwMQ==", "url": "https://github.com/quarkusio/quarkus/pull/7003#discussion_r375252701", "bodyText": "Just to be sure, you call that one often or not? If you do better move that one to the constructor as they look fully immutable.", "author": "gsmet", "createdAt": "2020-02-05T13:27:01Z", "path": "independent-projects/arc/runtime/src/main/java/io/quarkus/arc/impl/AbstractInvocationContext.java", "diffHunk": "@@ -43,7 +44,7 @@ protected AbstractInvocationContext(Object target, Method method,\n \n     @Override\n     public Set<Annotation> getInterceptorBindings() {\n-        return interceptorBindings;\n+        return Collections.unmodifiableSet(interceptorBindings);", "originalCommit": "689a18703ee3af8b634588407dfebdf8a6bf88f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI3OTM2MA==", "url": "https://github.com/quarkusio/quarkus/pull/7003#discussion_r375279360", "bodyText": "No. It's a consumer of the InvocationContext who can invoke this method inside the interceptor...", "author": "mkouba", "createdAt": "2020-02-05T14:16:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI1MjcwMQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "6fb215ec67d724ee51e93cecc9c4292296ce68e1", "url": "https://github.com/quarkusio/quarkus/commit/6fb215ec67d724ee51e93cecc9c4292296ce68e1", "message": "ArC- reduce overhead of metadata initialization in subclass constructors\n\n- use shared literal instances for interceptor bindings\n- use shared interceptor chains", "committedDate": "2020-02-05T14:45:26Z", "type": "commit"}, {"oid": "6fb215ec67d724ee51e93cecc9c4292296ce68e1", "url": "https://github.com/quarkusio/quarkus/commit/6fb215ec67d724ee51e93cecc9c4292296ce68e1", "message": "ArC- reduce overhead of metadata initialization in subclass constructors\n\n- use shared literal instances for interceptor bindings\n- use shared interceptor chains", "committedDate": "2020-02-05T14:45:26Z", "type": "forcePushed"}, {"oid": "e6e2eb3c942fb59af5893b41d453760a006fb56d", "url": "https://github.com/quarkusio/quarkus/commit/e6e2eb3c942fb59af5893b41d453760a006fb56d", "message": "SubclassGenerator - set the initialCapacity for the map of metadata", "committedDate": "2020-02-05T20:42:23Z", "type": "commit"}, {"oid": "e6e2eb3c942fb59af5893b41d453760a006fb56d", "url": "https://github.com/quarkusio/quarkus/commit/e6e2eb3c942fb59af5893b41d453760a006fb56d", "message": "SubclassGenerator - set the initialCapacity for the map of metadata", "committedDate": "2020-02-05T20:42:23Z", "type": "forcePushed"}]}