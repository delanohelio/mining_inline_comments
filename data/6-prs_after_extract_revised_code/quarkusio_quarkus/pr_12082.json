{"pr_number": 12082, "pr_title": "Set a injected CDI CommandListener to the mongodb configuration.", "pr_createdAt": "2020-09-14T14:33:12Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/12082", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAxMTUwNA==", "url": "https://github.com/quarkusio/quarkus/pull/12082#discussion_r488011504", "bodyText": "Shouldn't we support multiple CommandListeners given it looks like MongoDB supports it?", "author": "gsmet", "createdAt": "2020-09-14T15:13:13Z", "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/MongoClientRecorder.java", "diffHunk": "@@ -26,12 +27,19 @@\n         return new Supplier<MongoClientSupport>() {\n             @Override\n             public MongoClientSupport get() {\n+\n                 List<ConnectionPoolListener> connectionPoolListeners = new ArrayList<>(connectionPoolListenerSuppliers.size());\n                 for (Supplier<ConnectionPoolListener> item : connectionPoolListenerSuppliers) {\n                     connectionPoolListeners.add(item.get());\n                 }\n+                final CommandListener commandListener = Arc.container().instance(CommandListener.class).get();", "originalCommit": "28f82b796cdab6709adf041362f1ccaffeca70d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAxNzgzNw==", "url": "https://github.com/quarkusio/quarkus/pull/12082#discussion_r488017837", "bodyText": "Agree", "author": "loicmathieu", "createdAt": "2020-09-14T15:21:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAxMTUwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAxOTM4OA==", "url": "https://github.com/quarkusio/quarkus/pull/12082#discussion_r488019388", "bodyText": "Agree. The limitation is on my knowledge of how to retrieve the List of CDI beans of a given type. any help?", "author": "juazugas", "createdAt": "2020-09-14T15:23:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAxMTUwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI2OTc3MA==", "url": "https://github.com/quarkusio/quarkus/pull/12082#discussion_r493269770", "bodyText": "Set<Bean<?>> beans = Arc.container().beanManager().getBeans(CommandListener.class); will return all beans of type CommandListener.\nThen you can get the bean from Arc by type if the name is null or by name.\nYou can find an example here but there may be an easier way to do it if you don't rely on CDI but instead use Jandex and retrieve all implementors of CommandListener.", "author": "loicmathieu", "createdAt": "2020-09-23T07:48:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAxMTUwNA=="}], "type": "inlineReview", "revised_code": {"commit": "8a5a0208005084d909999c7eadf788a369f44512", "chunk": "diff --git a/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/MongoClientRecorder.java b/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/MongoClientRecorder.java\nindex 0c7dd436c3..1e67a94c45 100644\n--- a/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/MongoClientRecorder.java\n+++ b/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/MongoClientRecorder.java\n\n@@ -23,7 +22,8 @@ import io.quarkus.runtime.annotations.Recorder;\n public class MongoClientRecorder {\n \n     public Supplier<MongoClientSupport> mongoClientSupportSupplier(List<String> codecProviders, List<String> bsonDiscriminators,\n-            List<Supplier<ConnectionPoolListener>> connectionPoolListenerSuppliers, boolean disableSslSupport) {\n+            List<String> commandListeners, List<Supplier<ConnectionPoolListener>> connectionPoolListenerSuppliers,\n+            boolean disableSslSupport) {\n         return new Supplier<MongoClientSupport>() {\n             @Override\n             public MongoClientSupport get() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAxMTgwNA==", "url": "https://github.com/quarkusio/quarkus/pull/12082#discussion_r488011804", "bodyText": "I would drop this method, it's useless, right?", "author": "gsmet", "createdAt": "2020-09-14T15:13:41Z", "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/MongoClientSupport.java", "diffHunk": "@@ -31,6 +45,22 @@ public MongoClientSupport(List<String> codecProviders, List<String> bsonDiscrimi\n         return connectionPoolListeners;\n     }\n \n+    public List<CommandListener> getCommandListeners() {\n+        return commandListeners;\n+    }\n+\n+    public void setCommandListenerList(List<CommandListener> commandListenersList) {", "originalCommit": "28f82b796cdab6709adf041362f1ccaffeca70d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAyMDk4Mw==", "url": "https://github.com/quarkusio/quarkus/pull/12082#discussion_r488020983", "bodyText": "It depends on the above comment (#12082 (comment)). If we need to add a single CommandListener or a full list. But finally it should exist only the one that it's used.", "author": "juazugas", "createdAt": "2020-09-14T15:26:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAxMTgwNA=="}], "type": "inlineReview", "revised_code": {"commit": "b7092f2019e54e7013b3578e5f6aa779064f4e2e", "chunk": "diff --git a/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/MongoClientSupport.java b/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/MongoClientSupport.java\nindex e2995bb332..e371c898e5 100644\n--- a/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/MongoClientSupport.java\n+++ b/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/MongoClientSupport.java\n\n@@ -49,16 +49,8 @@ public class MongoClientSupport {\n         return commandListeners;\n     }\n \n-    public void setCommandListenerList(List<CommandListener> commandListenersList) {\n-        if (null != commandListenersList && !commandListenersList.isEmpty()) {\n-            commandListeners.addAll(commandListenersList);\n-        }\n-    }\n-\n     public void addCommandListener(CommandListener commandListener) {\n-        if (null != commandListener) {\n-            commandListeners.add(commandListener);\n-        }\n+        commandListeners.add(commandListener);\n     }\n \n     public boolean isDisableSslSupport() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAxMjI5MA==", "url": "https://github.com/quarkusio/quarkus/pull/12082#discussion_r488012290", "bodyText": "You already test the caller, I think we can drop this test here and consider it will be called with a non-null commandListener.", "author": "gsmet", "createdAt": "2020-09-14T15:14:22Z", "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/MongoClientSupport.java", "diffHunk": "@@ -31,6 +45,22 @@ public MongoClientSupport(List<String> codecProviders, List<String> bsonDiscrimi\n         return connectionPoolListeners;\n     }\n \n+    public List<CommandListener> getCommandListeners() {\n+        return commandListeners;\n+    }\n+\n+    public void setCommandListenerList(List<CommandListener> commandListenersList) {\n+        if (null != commandListenersList && !commandListenersList.isEmpty()) {\n+            commandListeners.addAll(commandListenersList);\n+        }\n+    }\n+\n+    public void addCommandListener(CommandListener commandListener) {\n+        if (null != commandListener) {", "originalCommit": "28f82b796cdab6709adf041362f1ccaffeca70d6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b7092f2019e54e7013b3578e5f6aa779064f4e2e", "chunk": "diff --git a/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/MongoClientSupport.java b/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/MongoClientSupport.java\nindex e2995bb332..e371c898e5 100644\n--- a/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/MongoClientSupport.java\n+++ b/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/MongoClientSupport.java\n\n@@ -49,16 +49,8 @@ public class MongoClientSupport {\n         return commandListeners;\n     }\n \n-    public void setCommandListenerList(List<CommandListener> commandListenersList) {\n-        if (null != commandListenersList && !commandListenersList.isEmpty()) {\n-            commandListeners.addAll(commandListenersList);\n-        }\n-    }\n-\n     public void addCommandListener(CommandListener commandListener) {\n-        if (null != commandListener) {\n-            commandListeners.add(commandListener);\n-        }\n+        commandListeners.add(commandListener);\n     }\n \n     public boolean isDisableSslSupport() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMzODgwMA==", "url": "https://github.com/quarkusio/quarkus/pull/12082#discussion_r488338800", "bodyText": "What's wrong with passing an empty list? No need to check here I guess", "author": "gastaldi", "createdAt": "2020-09-15T02:07:27Z", "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/MongoClients.java", "diffHunk": "@@ -249,6 +249,10 @@ private MongoClientSettings createMongoConfiguration(MongoClientConfig config) {\n                 CodecRegistries.fromProviders(providers));\n         settings.codecRegistry(registry);\n \n+        if (!mongoClientSupport.getCommandListeners().isEmpty()) {\n+            settings.commandListenerList(mongoClientSupport.getCommandListeners());", "originalCommit": "b1c101a8a8f44cbab7dde57b6ae949bf5ba8da58", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b7092f2019e54e7013b3578e5f6aa779064f4e2e", "chunk": "diff --git a/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/MongoClients.java b/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/MongoClients.java\nindex 05218ceae7..4992b5bee7 100644\n--- a/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/MongoClients.java\n+++ b/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/MongoClients.java\n\n@@ -249,9 +249,7 @@ public class MongoClients {\n                 CodecRegistries.fromProviders(providers));\n         settings.codecRegistry(registry);\n \n-        if (!mongoClientSupport.getCommandListeners().isEmpty()) {\n-            settings.commandListenerList(mongoClientSupport.getCommandListeners());\n-        }\n+        settings.commandListenerList(mongoClientSupport.getCommandListeners());\n \n         config.applicationName.ifPresent(settings::applicationName);\n \n"}}, {"oid": "b7092f2019e54e7013b3578e5f6aa779064f4e2e", "url": "https://github.com/quarkusio/quarkus/commit/b7092f2019e54e7013b3578e5f6aa779064f4e2e", "message": "Add Test for injecting a CommandListener.", "committedDate": "2020-09-16T08:25:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI3MTc5Mg==", "url": "https://github.com/quarkusio/quarkus/pull/12082#discussion_r493271792", "bodyText": "I don't think this is needed to provides methods with and without the List of CommandListener. This method is only used inside the deployment module so it's signature can be modified.", "author": "loicmathieu", "createdAt": "2020-09-23T07:51:49Z", "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/MongoClientSupport.java", "diffHunk": "@@ -1,21 +1,35 @@\n package io.quarkus.mongodb.runtime;\n \n+import java.util.ArrayList;\n import java.util.List;\n \n+import com.mongodb.event.CommandListener;\n import com.mongodb.event.ConnectionPoolListener;\n \n public class MongoClientSupport {\n \n     private final List<String> codecProviders;\n     private final List<String> bsonDiscriminators;\n     private final List<ConnectionPoolListener> connectionPoolListeners;\n+    private final List<CommandListener> commandListeners;\n     private final boolean disableSslSupport;\n \n     public MongoClientSupport(List<String> codecProviders, List<String> bsonDiscriminators,\n             List<ConnectionPoolListener> connectionPoolListeners, boolean disableSslSupport) {\n         this.codecProviders = codecProviders;\n         this.bsonDiscriminators = bsonDiscriminators;\n         this.connectionPoolListeners = connectionPoolListeners;\n+        this.commandListeners = new ArrayList<>();\n+        this.disableSslSupport = disableSslSupport;\n+    }\n+\n+    public MongoClientSupport(List<String> codecProviders, List<String> bsonDiscriminators,\n+            List<ConnectionPoolListener> connectionPoolListeners, List<CommandListener> commandListeners,\n+            boolean disableSslSupport) {\n+        this.codecProviders = codecProviders;\n+        this.bsonDiscriminators = bsonDiscriminators;\n+        this.connectionPoolListeners = connectionPoolListeners;\n+        this.commandListeners = commandListeners;", "originalCommit": "b7092f2019e54e7013b3578e5f6aa779064f4e2e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8a5a0208005084d909999c7eadf788a369f44512", "chunk": "diff --git a/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/MongoClientSupport.java b/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/MongoClientSupport.java\nindex e371c898e5..aeb2bf8525 100644\n--- a/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/MongoClientSupport.java\n+++ b/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/MongoClientSupport.java\n\n@@ -1,9 +1,7 @@\n package io.quarkus.mongodb.runtime;\n \n-import java.util.ArrayList;\n import java.util.List;\n \n-import com.mongodb.event.CommandListener;\n import com.mongodb.event.ConnectionPoolListener;\n \n public class MongoClientSupport {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI3Mjg1Ng==", "url": "https://github.com/quarkusio/quarkus/pull/12082#discussion_r493272856", "bodyText": "This should not be needed, just pass the Command listener list as we do for all other MongoDB related classes", "author": "loicmathieu", "createdAt": "2020-09-23T07:53:08Z", "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/MongoClientRecorder.java", "diffHunk": "@@ -26,12 +27,19 @@\n         return new Supplier<MongoClientSupport>() {\n             @Override\n             public MongoClientSupport get() {\n+\n                 List<ConnectionPoolListener> connectionPoolListeners = new ArrayList<>(connectionPoolListenerSuppliers.size());\n                 for (Supplier<ConnectionPoolListener> item : connectionPoolListenerSuppliers) {\n                     connectionPoolListeners.add(item.get());\n                 }\n+                final CommandListener commandListener = Arc.container().instance(CommandListener.class).get();\n \n-                return new MongoClientSupport(codecProviders, bsonDiscriminators, connectionPoolListeners, disableSslSupport);\n+                MongoClientSupport mongoClientSupport = new MongoClientSupport(codecProviders, bsonDiscriminators,\n+                        connectionPoolListeners, disableSslSupport);\n+                if (null != commandListener) {\n+                    mongoClientSupport.addCommandListener(commandListener);\n+                }", "originalCommit": "b7092f2019e54e7013b3578e5f6aa779064f4e2e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8a5a0208005084d909999c7eadf788a369f44512", "chunk": "diff --git a/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/MongoClientRecorder.java b/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/MongoClientRecorder.java\nindex 0c7dd436c3..1e67a94c45 100644\n--- a/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/MongoClientRecorder.java\n+++ b/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/MongoClientRecorder.java\n\n@@ -23,7 +22,8 @@ import io.quarkus.runtime.annotations.Recorder;\n public class MongoClientRecorder {\n \n     public Supplier<MongoClientSupport> mongoClientSupportSupplier(List<String> codecProviders, List<String> bsonDiscriminators,\n-            List<Supplier<ConnectionPoolListener>> connectionPoolListenerSuppliers, boolean disableSslSupport) {\n+            List<String> commandListeners, List<Supplier<ConnectionPoolListener>> connectionPoolListenerSuppliers,\n+            boolean disableSslSupport) {\n         return new Supplier<MongoClientSupport>() {\n             @Override\n             public MongoClientSupport get() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQyODA4OQ==", "url": "https://github.com/quarkusio/quarkus/pull/12082#discussion_r497428089", "bodyText": "You create a List fo CommandListener in the getCommandListener method so this one is not needed.", "author": "loicmathieu", "createdAt": "2020-09-30T11:12:50Z", "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/MongoClients.java", "diffHunk": "@@ -249,6 +250,12 @@ private MongoClientSettings createMongoConfiguration(MongoClientConfig config) {\n                 CodecRegistries.fromProviders(providers));\n         settings.codecRegistry(registry);\n \n+        List<CommandListener> listeners = new ArrayList<>();", "originalCommit": "b33b286af447efdc2b2150ef05475efc8d150ef4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8a5a0208005084d909999c7eadf788a369f44512", "chunk": "diff --git a/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/MongoClients.java b/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/MongoClients.java\nindex 45fa557910..d2fa816418 100644\n--- a/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/MongoClients.java\n+++ b/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/MongoClients.java\n\n@@ -250,11 +250,7 @@ public class MongoClients {\n                 CodecRegistries.fromProviders(providers));\n         settings.codecRegistry(registry);\n \n-        List<CommandListener> listeners = new ArrayList<>();\n-        if (!mongoClientSupport.getCommandListeners().isEmpty()) {\n-            listeners.addAll(getCommandListeners(mongoClientSupport.getCommandListeners()));\n-        }\n-        settings.commandListenerList(listeners);\n+        settings.commandListenerList(getCommandListeners(mongoClientSupport.getCommandListeners()));\n \n         config.applicationName.ifPresent(settings::applicationName);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ0Mjk1MQ==", "url": "https://github.com/quarkusio/quarkus/pull/12082#discussion_r497442951", "bodyText": "Having the insertions here is not realy readable for a test.\nCan you instead register the CommandEvent in a static List and assert in the test that the event is present inside the list ?", "author": "loicmathieu", "createdAt": "2020-09-30T11:41:55Z", "path": "extensions/mongodb-client/deployment/src/test/java/io/quarkus/mongodb/MockCommandListener.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package io.quarkus.mongodb;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.anyOf;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.notNullValue;\n+\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.event.CommandStartedEvent;\n+\n+public class MockCommandListener implements CommandListener {\n+\n+    private CommandStartedEvent commandStartedEvent;\n+\n+    @Override\n+    public void commandStarted(CommandStartedEvent startedEvent) {\n+        this.commandStartedEvent = startedEvent;\n+        assertThat(startedEvent, notNullValue());\n+        assertThat(startedEvent.getCommandName(), anyOf(equalTo(\"listDatabases\"), equalTo(\"endSessions\")));\n+    }", "originalCommit": "b33b286af447efdc2b2150ef05475efc8d150ef4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8a5a0208005084d909999c7eadf788a369f44512", "chunk": "diff --git a/extensions/mongodb-client/deployment/src/test/java/io/quarkus/mongodb/MockCommandListener.java b/extensions/mongodb-client/deployment/src/test/java/io/quarkus/mongodb/MockCommandListener.java\nindex a5d177e3fa..5557bfd515 100644\n--- a/extensions/mongodb-client/deployment/src/test/java/io/quarkus/mongodb/MockCommandListener.java\n+++ b/extensions/mongodb-client/deployment/src/test/java/io/quarkus/mongodb/MockCommandListener.java\n\n@@ -1,26 +1,18 @@\n package io.quarkus.mongodb;\n \n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.anyOf;\n-import static org.hamcrest.Matchers.equalTo;\n-import static org.hamcrest.Matchers.notNullValue;\n+import java.util.ArrayList;\n+import java.util.List;\n \n import com.mongodb.event.CommandListener;\n import com.mongodb.event.CommandStartedEvent;\n \n public class MockCommandListener implements CommandListener {\n \n-    private CommandStartedEvent commandStartedEvent;\n+    public static final List<String> EVENTS = new ArrayList<>();\n \n     @Override\n     public void commandStarted(CommandStartedEvent startedEvent) {\n-        this.commandStartedEvent = startedEvent;\n-        assertThat(startedEvent, notNullValue());\n-        assertThat(startedEvent.getCommandName(), anyOf(equalTo(\"listDatabases\"), equalTo(\"endSessions\")));\n-    }\n-\n-    public CommandStartedEvent getCommandStartedEvent() {\n-        return commandStartedEvent;\n+        EVENTS.add(startedEvent.getCommandName());\n     }\n \n }\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU0NDIwNQ==", "url": "https://github.com/quarkusio/quarkus/pull/12082#discussion_r497544205", "bodyText": "constants should be uppercase", "author": "loicmathieu", "createdAt": "2020-09-30T14:14:37Z", "path": "extensions/mongodb-client/deployment/src/test/java/io/quarkus/mongodb/MockCommandListener.java", "diffHunk": "@@ -1,26 +1,18 @@\n package io.quarkus.mongodb;\n \n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.anyOf;\n-import static org.hamcrest.Matchers.equalTo;\n-import static org.hamcrest.Matchers.notNullValue;\n+import java.util.ArrayList;\n+import java.util.List;\n \n import com.mongodb.event.CommandListener;\n import com.mongodb.event.CommandStartedEvent;\n \n public class MockCommandListener implements CommandListener {\n \n-    private CommandStartedEvent commandStartedEvent;\n+    public static final List<String> events = new ArrayList<>();", "originalCommit": "7715e922a6e645bdf0e10bc7633055f6955bff92", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8a5a0208005084d909999c7eadf788a369f44512", "chunk": "diff --git a/extensions/mongodb-client/deployment/src/test/java/io/quarkus/mongodb/MockCommandListener.java b/extensions/mongodb-client/deployment/src/test/java/io/quarkus/mongodb/MockCommandListener.java\nindex 8b76b12e6f..5557bfd515 100644\n--- a/extensions/mongodb-client/deployment/src/test/java/io/quarkus/mongodb/MockCommandListener.java\n+++ b/extensions/mongodb-client/deployment/src/test/java/io/quarkus/mongodb/MockCommandListener.java\n\n@@ -8,11 +8,11 @@ import com.mongodb.event.CommandStartedEvent;\n \n public class MockCommandListener implements CommandListener {\n \n-    public static final List<String> events = new ArrayList<>();\n+    public static final List<String> EVENTS = new ArrayList<>();\n \n     @Override\n     public void commandStarted(CommandStartedEvent startedEvent) {\n-        events.add(startedEvent.getCommandName());\n+        EVENTS.add(startedEvent.getCommandName());\n     }\n \n }\n\\ No newline at end of file\n"}}, {"oid": "8a5a0208005084d909999c7eadf788a369f44512", "url": "https://github.com/quarkusio/quarkus/commit/8a5a0208005084d909999c7eadf788a369f44512", "message": "Add CommandListener implementors to the mongoDB configuration.", "committedDate": "2020-09-30T15:15:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUyMjE3MQ==", "url": "https://github.com/quarkusio/quarkus/pull/12082#discussion_r501522171", "bodyText": "I see this is done to be symmetrical. But I fail to see why we need build items for that, rather than just having private methods.\nIs there any point for the others? In this case it makes sense to be consistent and have it here too.", "author": "gsmet", "createdAt": "2020-10-08T08:00:55Z", "path": "extensions/mongodb-client/deployment/src/main/java/io/quarkus/mongodb/deployment/CommandListenerBuildItem.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package io.quarkus.mongodb.deployment;\n+\n+import java.util.List;\n+\n+import io.quarkus.builder.item.SimpleBuildItem;\n+\n+public final class CommandListenerBuildItem extends SimpleBuildItem {", "originalCommit": "8a5a0208005084d909999c7eadf788a369f44512", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMzMDI2Mw==", "url": "https://github.com/quarkusio/quarkus/pull/12082#discussion_r503330263", "bodyText": "I'm not an expert but my guess would be that in case we use private methods,\nwe still would need to pass the CombinedIndexBuildItem to the buildsteps, the index lists process would be run two times and also we would be postponing the class name filtering to the Static init phase instead of doing it during the augmentation.\nAlso having BuildItems and BuildSteps makes the flow more clear about what it is needed to build the final objects.", "author": "juazugas", "createdAt": "2020-10-12T14:22:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUyMjE3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "e09bd88c46cfaf3b6731fe746da5424c4a749687", "chunk": "diff --git a/extensions/mongodb-client/deployment/src/main/java/io/quarkus/mongodb/deployment/CommandListenerBuildItem.java b/extensions/mongodb-client/deployment/src/main/java/io/quarkus/mongodb/deployment/CommandListenerBuildItem.java\nindex 159bb5d856..5dad5b89e0 100644\n--- a/extensions/mongodb-client/deployment/src/main/java/io/quarkus/mongodb/deployment/CommandListenerBuildItem.java\n+++ b/extensions/mongodb-client/deployment/src/main/java/io/quarkus/mongodb/deployment/CommandListenerBuildItem.java\n\n@@ -2,8 +2,13 @@ package io.quarkus.mongodb.deployment;\n \n import java.util.List;\n \n+import com.mongodb.event.CommandListener;\n+\n import io.quarkus.builder.item.SimpleBuildItem;\n \n+/**\n+ * Register additional {@link CommandListener}s for the MongoDB clients.\n+ */\n public final class CommandListenerBuildItem extends SimpleBuildItem {\n \n     private List<String> commandListenerClassNames;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUyMjM5Nw==", "url": "https://github.com/quarkusio/quarkus/pull/12082#discussion_r501522397", "bodyText": "Maybe rename the method to addExtensionPointsToNative ?", "author": "gsmet", "createdAt": "2020-10-08T08:01:21Z", "path": "extensions/mongodb-client/deployment/src/main/java/io/quarkus/mongodb/deployment/MongoClientProcessor.java", "diffHunk": "@@ -82,11 +83,21 @@ BsonDiscriminatorBuildItem collectBsonDiscriminators(CombinedIndexBuildItem inde\n     }\n \n     @BuildStep\n-    List<ReflectiveClassBuildItem> addCodecsAndDiscriminatorsToNative(CodecProviderBuildItem codecProviders,\n-            BsonDiscriminatorBuildItem bsonDiscriminators) {\n+    CommandListenerBuildItem collectCommandListeners(CombinedIndexBuildItem indexBuildItem) {\n+        Collection<ClassInfo> commandListenerClasses = indexBuildItem.getIndex()\n+                .getAllKnownImplementors(DotName.createSimple(CommandListener.class.getName()));\n+        List<String> names = commandListenerClasses.stream().map(ci -> ci.name().toString()).collect(Collectors.toList());\n+        return new CommandListenerBuildItem(names);\n+    }\n+\n+    @BuildStep\n+    List<ReflectiveClassBuildItem> addCodecsAndDiscriminatorsAndListenersToNative(CodecProviderBuildItem codecProviders,", "originalCommit": "8a5a0208005084d909999c7eadf788a369f44512", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMzMDM1Ng==", "url": "https://github.com/quarkusio/quarkus/pull/12082#discussion_r503330356", "bodyText": "Sure", "author": "juazugas", "createdAt": "2020-10-12T14:22:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUyMjM5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "557b58a899c618ba48de745b76741e70f794c398", "chunk": "diff --git a/extensions/mongodb-client/deployment/src/main/java/io/quarkus/mongodb/deployment/MongoClientProcessor.java b/extensions/mongodb-client/deployment/src/main/java/io/quarkus/mongodb/deployment/MongoClientProcessor.java\nindex 533fa7446a..97c8899276 100644\n--- a/extensions/mongodb-client/deployment/src/main/java/io/quarkus/mongodb/deployment/MongoClientProcessor.java\n+++ b/extensions/mongodb-client/deployment/src/main/java/io/quarkus/mongodb/deployment/MongoClientProcessor.java\n\n@@ -91,11 +100,12 @@ public class MongoClientProcessor {\n     }\n \n     @BuildStep\n-    List<ReflectiveClassBuildItem> addCodecsAndDiscriminatorsAndListenersToNative(CodecProviderBuildItem codecProviders,\n-            BsonDiscriminatorBuildItem bsonDiscriminators,\n+    List<ReflectiveClassBuildItem> addExtensionPointsToNative(CodecProviderBuildItem codecProviders,\n+            PropertyCodecProviderBuildItem propertyCodecProviders, BsonDiscriminatorBuildItem bsonDiscriminators,\n             CommandListenerBuildItem commandListeners) {\n         List<String> reflectiveClassNames = new ArrayList<>();\n         reflectiveClassNames.addAll(codecProviders.getCodecProviderClassNames());\n+        reflectiveClassNames.addAll(propertyCodecProviders.getPropertyCodecProviderClassNames());\n         reflectiveClassNames.addAll(bsonDiscriminators.getBsonDiscriminatorClassNames());\n         reflectiveClassNames.addAll(commandListeners.getCommandListenerClassNames());\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUyMzU0Mw==", "url": "https://github.com/quarkusio/quarkus/pull/12082#discussion_r501523543", "bodyText": "Could we use Class.forName here instead?", "author": "gsmet", "createdAt": "2020-10-08T08:03:26Z", "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/MongoClients.java", "diffHunk": "@@ -384,6 +387,21 @@ private AuthenticationMechanism getAuthenticationMechanism(String authMechanism)\n         return providers;\n     }\n \n+    private List<CommandListener> getCommandListeners(List<String> classNames) {\n+        List<CommandListener> listeners = new ArrayList<>();\n+        for (String name : classNames) {\n+            try {\n+                Class<?> clazz = Thread.currentThread().getContextClassLoader().loadClass(name);", "originalCommit": "8a5a0208005084d909999c7eadf788a369f44512", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMzMTI1OA==", "url": "https://github.com/quarkusio/quarkus/pull/12082#discussion_r503331258", "bodyText": "Ok. Tested on a project with the jar and the native image does not make the difference, I suppose because we do\nthe initialization immediately after loading the class.", "author": "juazugas", "createdAt": "2020-10-12T14:23:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUyMzU0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "557b58a899c618ba48de745b76741e70f794c398", "chunk": "diff --git a/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/MongoClients.java b/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/MongoClients.java\nindex d2fa816418..0b994b3274 100644\n--- a/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/MongoClients.java\n+++ b/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/MongoClients.java\n\n@@ -387,11 +393,26 @@ public class MongoClients {\n         return providers;\n     }\n \n+    private List<PropertyCodecProvider> getPropertyCodecProviders(List<String> classNames) {\n+        List<PropertyCodecProvider> providers = new ArrayList<>();\n+        for (String name : classNames) {\n+            try {\n+                Class<?> clazz = Thread.currentThread().getContextClassLoader().loadClass(name);\n+                Constructor clazzConstructor = clazz.getConstructor();\n+                providers.add((PropertyCodecProvider) clazzConstructor.newInstance());\n+            } catch (Exception e) {\n+                LOGGER.warnf(e, \"Unable to load the property codec provider class %s\", name);\n+            }\n+        }\n+\n+        return providers;\n+    }\n+\n     private List<CommandListener> getCommandListeners(List<String> classNames) {\n         List<CommandListener> listeners = new ArrayList<>();\n         for (String name : classNames) {\n             try {\n-                Class<?> clazz = Thread.currentThread().getContextClassLoader().loadClass(name);\n+                Class<?> clazz = Class.forName(name);\n                 Constructor clazzConstructor = clazz.getConstructor();\n                 listeners.add((CommandListener) clazzConstructor.newInstance());\n             } catch (Exception e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUyMzcyNw==", "url": "https://github.com/quarkusio/quarkus/pull/12082#discussion_r501523727", "bodyText": "Maybe call this one commandListeners?", "author": "gsmet", "createdAt": "2020-10-08T08:03:45Z", "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/MongoClients.java", "diffHunk": "@@ -249,6 +250,8 @@ private MongoClientSettings createMongoConfiguration(MongoClientConfig config) {\n                 CodecRegistries.fromProviders(providers));\n         settings.codecRegistry(registry);\n \n+        settings.commandListenerList(getCommandListeners(mongoClientSupport.getCommandListeners()));", "originalCommit": "8a5a0208005084d909999c7eadf788a369f44512", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMzMzI5Nw==", "url": "https://github.com/quarkusio/quarkus/pull/12082#discussion_r503333297", "bodyText": "I'm not sure about this suggestion.\n\nThe settings class is from mongodb driver (com.mongodb.MongoClientSettings.Builder)\nThe MongoClientSupport class has all its fields exposed to getter methods\nThe private method getCommandListeners is called after the same naming pattern as the getCodeProviders method.\n\nIt could be ... extracting the call to the getter function to a variable called commandListeners (very likely to happen in a future PR). For example:\nList<CommandListeners> commandListeners = getCommandListeners(mongoClientSupport.getCommandListeners());\nsettings.commandListenerList(commandListeners);", "author": "juazugas", "createdAt": "2020-10-12T14:26:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUyMzcyNw=="}], "type": "inlineReview", "revised_code": {"commit": "557b58a899c618ba48de745b76741e70f794c398", "chunk": "diff --git a/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/MongoClients.java b/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/MongoClients.java\nindex d2fa816418..0b994b3274 100644\n--- a/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/MongoClients.java\n+++ b/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/MongoClients.java\n\n@@ -245,6 +246,11 @@ public class MongoClients {\n                 // Ignore\n             }\n         }\n+        // register property codec provider\n+        if (!mongoClientSupport.getPropertyCodecProviders().isEmpty()) {\n+            pojoCodecProviderBuilder.register(getPropertyCodecProviders(mongoClientSupport.getPropertyCodecProviders())\n+                    .toArray(new PropertyCodecProvider[0]));\n+        }\n         providers.add(pojoCodecProviderBuilder.build());\n         CodecRegistry registry = CodecRegistries.fromRegistries(defaultCodecRegistry,\n                 CodecRegistries.fromProviders(providers));\n"}}, {"oid": "557b58a899c618ba48de745b76741e70f794c398", "url": "https://github.com/quarkusio/quarkus/commit/557b58a899c618ba48de745b76741e70f794c398", "message": "Change class loading when adding the listeners.", "committedDate": "2020-10-12T15:14:09Z", "type": "forcePushed"}, {"oid": "12302721b651dad84a486bc0183676fc19f39a7c", "url": "https://github.com/quarkusio/quarkus/commit/12302721b651dad84a486bc0183676fc19f39a7c", "message": "Add CommandListener implementors to the mongoDB settings.", "committedDate": "2020-10-13T12:44:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA1MzY0Ng==", "url": "https://github.com/quarkusio/quarkus/pull/12082#discussion_r508053646", "bodyText": "Can you please add some Javadoc to this class? This is necessary for the All Build Items page", "author": "gastaldi", "createdAt": "2020-10-19T20:49:56Z", "path": "extensions/mongodb-client/deployment/src/main/java/io/quarkus/mongodb/deployment/CommandListenerBuildItem.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package io.quarkus.mongodb.deployment;\n+\n+import java.util.List;\n+\n+import io.quarkus.builder.item.SimpleBuildItem;\n+\n+public final class CommandListenerBuildItem extends SimpleBuildItem {", "originalCommit": "12302721b651dad84a486bc0183676fc19f39a7c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e09bd88c46cfaf3b6731fe746da5424c4a749687", "chunk": "diff --git a/extensions/mongodb-client/deployment/src/main/java/io/quarkus/mongodb/deployment/CommandListenerBuildItem.java b/extensions/mongodb-client/deployment/src/main/java/io/quarkus/mongodb/deployment/CommandListenerBuildItem.java\nindex 159bb5d856..5dad5b89e0 100644\n--- a/extensions/mongodb-client/deployment/src/main/java/io/quarkus/mongodb/deployment/CommandListenerBuildItem.java\n+++ b/extensions/mongodb-client/deployment/src/main/java/io/quarkus/mongodb/deployment/CommandListenerBuildItem.java\n\n@@ -2,8 +2,13 @@ package io.quarkus.mongodb.deployment;\n \n import java.util.List;\n \n+import com.mongodb.event.CommandListener;\n+\n import io.quarkus.builder.item.SimpleBuildItem;\n \n+/**\n+ * Register additional {@link CommandListener}s for the MongoDB clients.\n+ */\n public final class CommandListenerBuildItem extends SimpleBuildItem {\n \n     private List<String> commandListenerClassNames;\n"}}, {"oid": "b7f3acc5c7be2df9d20efe241d210152cc900c5f", "url": "https://github.com/quarkusio/quarkus/commit/b7f3acc5c7be2df9d20efe241d210152cc900c5f", "message": "Add CommandListener implementors to the mongoDB settings.", "committedDate": "2020-10-22T13:36:20Z", "type": "commit"}, {"oid": "e09bd88c46cfaf3b6731fe746da5424c4a749687", "url": "https://github.com/quarkusio/quarkus/commit/e09bd88c46cfaf3b6731fe746da5424c4a749687", "message": "Add javadoc for MongoDB client build items", "committedDate": "2020-10-22T13:36:20Z", "type": "commit"}, {"oid": "e09bd88c46cfaf3b6731fe746da5424c4a749687", "url": "https://github.com/quarkusio/quarkus/commit/e09bd88c46cfaf3b6731fe746da5424c4a749687", "message": "Add javadoc for MongoDB client build items", "committedDate": "2020-10-22T13:36:20Z", "type": "forcePushed"}]}