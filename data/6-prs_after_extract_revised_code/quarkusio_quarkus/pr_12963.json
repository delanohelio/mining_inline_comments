{"pr_number": 12963, "pr_title": "support abstract classes for resteasy #12927", "pr_createdAt": "2020-10-26T19:23:00Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/12963", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2MTQwNg==", "url": "https://github.com/quarkusio/quarkus/pull/12963#discussion_r512261406", "bodyText": "Given you get all the known subclasses here, I fail to see while you need the outer while loop?\nThis method also includes the non-direct subclasses.", "author": "gsmet", "createdAt": "2020-10-26T20:53:53Z", "path": "extensions/resteasy-server-common/deployment/src/main/java/io/quarkus/resteasy/server/common/deployment/ResteasyServerCommonProcessor.java", "diffHunk": "@@ -279,6 +284,27 @@ public void build(\n                 }\n             }\n         }\n+        // look for all implementations of abstract classes annotated @Path\n+        do {\n+            Set<DotName> tmpAbstract = new HashSet<>();\n+            for (final DotName iface : pathAbstract) {\n+                final Collection<ClassInfo> implementors = index.getAllKnownSubclasses(iface);", "originalCommit": "771c1ceffc46edec710822e52eafaf1b5d23a1c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2OTYzNg==", "url": "https://github.com/quarkusio/quarkus/pull/12963#discussion_r512269636", "bodyText": "concrete class of subclass of subclass", "author": "patriot1burke", "createdAt": "2020-10-26T21:09:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2MTQwNg=="}], "type": "inlineReview", "revised_code": {"commit": "3452ab87cf12fc272c8987faeda7eb56e9ec330c", "chunk": "diff --git a/extensions/resteasy-server-common/deployment/src/main/java/io/quarkus/resteasy/server/common/deployment/ResteasyServerCommonProcessor.java b/extensions/resteasy-server-common/deployment/src/main/java/io/quarkus/resteasy/server/common/deployment/ResteasyServerCommonProcessor.java\nindex adb19fd32b..26c829286a 100755\n--- a/extensions/resteasy-server-common/deployment/src/main/java/io/quarkus/resteasy/server/common/deployment/ResteasyServerCommonProcessor.java\n+++ b/extensions/resteasy-server-common/deployment/src/main/java/io/quarkus/resteasy/server/common/deployment/ResteasyServerCommonProcessor.java\n\n@@ -285,26 +285,20 @@ public class ResteasyServerCommonProcessor {\n             }\n         }\n         // look for all implementations of abstract classes annotated @Path\n-        do {\n-            Set<DotName> tmpAbstract = new HashSet<>();\n-            for (final DotName iface : pathAbstract) {\n-                final Collection<ClassInfo> implementors = index.getAllKnownSubclasses(iface);\n-                for (final ClassInfo implementor : implementors) {\n-                    String className = implementor.name().toString();\n-                    reflectiveClass.produce(new ReflectiveClassBuildItem(true, true, className));\n-                    if (Modifier.isAbstract(implementor.flags())) {\n-                        tmpAbstract.add(implementor.name());\n-                    } else {\n-                        scannedResources.putIfAbsent(implementor.name(), implementor);\n-                    }\n+        for (final DotName cls : pathAbstract) {\n+            final Collection<ClassInfo> implementors = index.getAllKnownSubclasses(cls);\n+            for (final ClassInfo implementor : implementors) {\n+                String className = implementor.name().toString();\n+                reflectiveClass.produce(new ReflectiveClassBuildItem(true, true, className));\n+                if (!Modifier.isAbstract(implementor.flags())) {\n+                    scannedResources.putIfAbsent(implementor.name(), implementor);\n+                }\n \n-                    if (!implementor.hasNoArgsConstructor()) {\n-                        withoutDefaultCtor.put(implementor.name(), implementor);\n-                    }\n+                if (!implementor.hasNoArgsConstructor()) {\n+                    withoutDefaultCtor.put(implementor.name(), implementor);\n                 }\n             }\n-            pathAbstract = tmpAbstract;\n-        } while (!pathAbstract.isEmpty());\n+        }\n \n         Set<DotName> subresources = findSubresources(beanArchiveIndexBuildItem.getIndex(), scannedResources);\n         if (!subresources.isEmpty()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2MTY1Ng==", "url": "https://github.com/quarkusio/quarkus/pull/12963#discussion_r512261656", "bodyText": "Could we rename the variable? It's not an interface but an abstract class.", "author": "gsmet", "createdAt": "2020-10-26T20:54:19Z", "path": "extensions/resteasy-server-common/deployment/src/main/java/io/quarkus/resteasy/server/common/deployment/ResteasyServerCommonProcessor.java", "diffHunk": "@@ -279,6 +284,27 @@ public void build(\n                 }\n             }\n         }\n+        // look for all implementations of abstract classes annotated @Path\n+        do {\n+            Set<DotName> tmpAbstract = new HashSet<>();\n+            for (final DotName iface : pathAbstract) {", "originalCommit": "771c1ceffc46edec710822e52eafaf1b5d23a1c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3MDE3OQ==", "url": "https://github.com/quarkusio/quarkus/pull/12963#discussion_r512270179", "bodyText": "No offense, but its often hard enough to get a PR approved with these kinds of style reviews.  In other words, these kinds of comments piss me off :)", "author": "patriot1burke", "createdAt": "2020-10-26T21:10:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2MTY1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "3452ab87cf12fc272c8987faeda7eb56e9ec330c", "chunk": "diff --git a/extensions/resteasy-server-common/deployment/src/main/java/io/quarkus/resteasy/server/common/deployment/ResteasyServerCommonProcessor.java b/extensions/resteasy-server-common/deployment/src/main/java/io/quarkus/resteasy/server/common/deployment/ResteasyServerCommonProcessor.java\nindex adb19fd32b..26c829286a 100755\n--- a/extensions/resteasy-server-common/deployment/src/main/java/io/quarkus/resteasy/server/common/deployment/ResteasyServerCommonProcessor.java\n+++ b/extensions/resteasy-server-common/deployment/src/main/java/io/quarkus/resteasy/server/common/deployment/ResteasyServerCommonProcessor.java\n\n@@ -285,26 +285,20 @@ public class ResteasyServerCommonProcessor {\n             }\n         }\n         // look for all implementations of abstract classes annotated @Path\n-        do {\n-            Set<DotName> tmpAbstract = new HashSet<>();\n-            for (final DotName iface : pathAbstract) {\n-                final Collection<ClassInfo> implementors = index.getAllKnownSubclasses(iface);\n-                for (final ClassInfo implementor : implementors) {\n-                    String className = implementor.name().toString();\n-                    reflectiveClass.produce(new ReflectiveClassBuildItem(true, true, className));\n-                    if (Modifier.isAbstract(implementor.flags())) {\n-                        tmpAbstract.add(implementor.name());\n-                    } else {\n-                        scannedResources.putIfAbsent(implementor.name(), implementor);\n-                    }\n+        for (final DotName cls : pathAbstract) {\n+            final Collection<ClassInfo> implementors = index.getAllKnownSubclasses(cls);\n+            for (final ClassInfo implementor : implementors) {\n+                String className = implementor.name().toString();\n+                reflectiveClass.produce(new ReflectiveClassBuildItem(true, true, className));\n+                if (!Modifier.isAbstract(implementor.flags())) {\n+                    scannedResources.putIfAbsent(implementor.name(), implementor);\n+                }\n \n-                    if (!implementor.hasNoArgsConstructor()) {\n-                        withoutDefaultCtor.put(implementor.name(), implementor);\n-                    }\n+                if (!implementor.hasNoArgsConstructor()) {\n+                    withoutDefaultCtor.put(implementor.name(), implementor);\n                 }\n             }\n-            pathAbstract = tmpAbstract;\n-        } while (!pathAbstract.isEmpty());\n+        }\n \n         Set<DotName> subresources = findSubresources(beanArchiveIndexBuildItem.getIndex(), scannedResources);\n         if (!subresources.isEmpty()) {\n"}}, {"oid": "3452ab87cf12fc272c8987faeda7eb56e9ec330c", "url": "https://github.com/quarkusio/quarkus/commit/3452ab87cf12fc272c8987faeda7eb56e9ec330c", "message": "support abstract classes for resteasy\n\nremove do/while\n\niface", "committedDate": "2020-10-26T21:13:53Z", "type": "commit"}, {"oid": "3452ab87cf12fc272c8987faeda7eb56e9ec330c", "url": "https://github.com/quarkusio/quarkus/commit/3452ab87cf12fc272c8987faeda7eb56e9ec330c", "message": "support abstract classes for resteasy\n\nremove do/while\n\niface", "committedDate": "2020-10-26T21:13:53Z", "type": "forcePushed"}]}