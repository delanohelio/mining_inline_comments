{"pr_number": 10324, "pr_title": "Updating FarJarTest for Gradle", "pr_createdAt": "2020-06-28T06:05:23Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/10324", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg3NDcwNA==", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r446874704", "bodyText": "Use Logger.error for dumping error content. Rest looks good", "author": "RotBolt", "createdAt": "2020-06-29T08:58:19Z", "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "diffHunk": "@@ -20,6 +32,59 @@ public void testFastJarFormatWorks() throws Exception {\n         assertThat(quarkusApp).exists();\n         Path jar = quarkusApp.resolve(\"quarkus-run.jar\");\n         assertThat(jar).exists();\n+\n+        File output = new File(projectDir, \"build/output.log\");\n+        output.createNewFile();\n+        Process process = doLaunch(jar, output);\n+        try {\n+            // Wait until server up\n+            dumpFileContentOnFailure(() -> {\n+                await()\n+                        .pollDelay(1, TimeUnit.SECONDS)\n+                        .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(\"/hello\", 200));\n+                return null;\n+            }, output, ConditionTimeoutException.class);\n+\n+            String logs = FileUtils.readFileToString(output, \"UTF-8\");\n+\n+            assertThatOutputWorksCorrectly(logs);\n+            // test that the application name and version are properly set\n+            getHttpResponse();\n+            getHttpResponse(\"\");\n+        } finally {\n+            process.destroy();\n+        }\n+    }\n+\n+    static void assertThatOutputWorksCorrectly(String logs) {\n+        assertThat(logs.isEmpty()).isFalse();\n+        String infoLogLevel = \"INFO\";\n+        assertThat(logs.contains(infoLogLevel)).isTrue();\n+        //Predicate<String> datePattern = Pattern.compile(\"\\\\d{4}-\\\\d{2}-\\\\d{2}\\\\s\\\\d{2}:\\\\d{2}:\\\\d{2},\\\\d{3}\").asPredicate();\n+\n+        //assertThat(datePattern.test(logs)).isTrue();\n+        String basic = \"[io.quarkus] (main)\";\n+        assertThat(logs.contains(basic)).isTrue();\n+        assertThat(logs.contains(\"cdi, resteasy\")).isTrue();\n+        assertThat(logs.contains(\"JBoss Threads version\")).isFalse();\n+    }\n+\n+    private void dumpFileContentOnFailure(final Callable<Void> operation, final File logFile,\n+                                          final Class<? extends Throwable> failureType) throws Exception {\n+        try {\n+            operation.call();\n+        } catch (Throwable t) {\n+            if (failureType != null && failureType.isInstance(t)) {\n+                final String logs = FileUtils.readFileToString(logFile, \"UTF-8\");\n+                System.out.println(\"####### LOG DUMP ON FAILURE (start) ######\");", "originalCommit": "9ea1ab617d7189bbdbf2a20e5858725c0a8c90f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyNzUwOA==", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r446927508", "bodyText": "Will do", "author": "Garima829", "createdAt": "2020-06-29T12:21:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg3NDcwNA=="}], "type": "inlineReview", "revised_code": {"commit": "b7c60fa494b7dd37bfe77e52900e53e44bf0b737", "chunk": "diff --git a/integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java b/integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java\nindex a0f2473d68..e968b148e1 100644\n--- a/integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java\n+++ b/integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java\n\n@@ -49,8 +48,7 @@ public class FastJarFormatWorksTest extends QuarkusGradleWrapperTestBase {\n \n             assertThatOutputWorksCorrectly(logs);\n             // test that the application name and version are properly set\n-            getHttpResponse();\n-            getHttpResponse(\"\");\n+            getHttpResponse(\"/hello\");\n         } finally {\n             process.destroy();\n         }\n"}}, {"oid": "b7c60fa494b7dd37bfe77e52900e53e44bf0b737", "url": "https://github.com/quarkusio/quarkus/commit/b7c60fa494b7dd37bfe77e52900e53e44bf0b737", "message": "Updated FastJarFormatWorksTest and HttpUtils", "committedDate": "2020-06-29T13:30:01Z", "type": "forcePushed"}, {"oid": "bbf8d35ee4e35abec45dcefffc79805964cdac14", "url": "https://github.com/quarkusio/quarkus/commit/bbf8d35ee4e35abec45dcefffc79805964cdac14", "message": "Updated FastJarFormatWorksTest and HttpUtils", "committedDate": "2020-06-29T13:38:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwNTc2NA==", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r446605764", "bodyText": "I am getting a timeout error here", "author": "Garima829", "createdAt": "2020-06-28T06:07:10Z", "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "diffHunk": "@@ -20,6 +32,59 @@ public void testFastJarFormatWorks() throws Exception {\n         assertThat(quarkusApp).exists();\n         Path jar = quarkusApp.resolve(\"quarkus-run.jar\");\n         assertThat(jar).exists();\n+\n+        File output = new File(projectDir, \"build/output.log\");\n+        output.createNewFile();\n+        Process process = doLaunch(jar, output);\n+        try {\n+            // Wait until server up\n+            dumpFileContentOnFailure(() -> {\n+                await()\n+                        .pollDelay(1, TimeUnit.SECONDS)\n+                        .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(\"/hello\", 200));\n+                return null;\n+            }, output, ConditionTimeoutException.class);\n+\n+            String logs = FileUtils.readFileToString(output, \"UTF-8\");\n+\n+            assertThatOutputWorksCorrectly(logs);\n+            // test that the application name and version are properly set\n+            getHttpResponse();", "originalCommit": "9ea1ab617d7189bbdbf2a20e5858725c0a8c90f8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b7c60fa494b7dd37bfe77e52900e53e44bf0b737", "chunk": "diff --git a/integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java b/integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java\nindex a0f2473d68..e968b148e1 100644\n--- a/integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java\n+++ b/integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java\n\n@@ -49,8 +48,7 @@ public class FastJarFormatWorksTest extends QuarkusGradleWrapperTestBase {\n \n             assertThatOutputWorksCorrectly(logs);\n             // test that the application name and version are properly set\n-            getHttpResponse();\n-            getHttpResponse(\"\");\n+            getHttpResponse(\"/hello\");\n         } finally {\n             process.destroy();\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU5NDc5Nw==", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447594797", "bodyText": "We don't want DevModeTestUtils to have an getHttpResponse method. We want your new test and the existing tests that use DevModeTestUtils.getHttpResponse to both use HttpUtils.getHttpResponse.", "author": "geoand", "createdAt": "2020-06-30T10:55:21Z", "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/HttpUtils.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.quarkus.gradle;\n+\n+import io.quarkus.test.devmode.util.DevModeTestUtils;\n+import io.quarkus.utilities.JavaBinFinder;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Future;\n+import java.util.function.Supplier;\n+\n+public class HttpUtils {\n+\n+    private static Future<?> quarkusDev;\n+\n+    protected static Process doLaunch(Path jar, File output) throws IOException {\n+        List<String> commands = new ArrayList<>();\n+        commands.add(JavaBinFinder.findBin());\n+        commands.add(\"-jar\");\n+        commands.add(jar.toString());\n+        ProcessBuilder processBuilder = new ProcessBuilder(commands.toArray(new String[0]));\n+        processBuilder.redirectOutput(output);\n+        processBuilder.redirectError(output);\n+        return processBuilder.start();\n+    }\n+\n+    protected static String getHttpResponse(String path) {\n+        return DevModeTestUtils.getHttpResponse(path, getQuarkusDevBrokenReason());", "originalCommit": "bbf8d35ee4e35abec45dcefffc79805964cdac14", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU5ODEzNQ==", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447598135", "bodyText": "DevModeTestUtils is a read-only file, should I modify it and delete the getHttpResponse method from it and shift all the types of getHttpResponse to HttpUtils ?", "author": "Garima829", "createdAt": "2020-06-30T11:02:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU5NDc5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU5ODY2Mw==", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447598663", "bodyText": "Exactly", "author": "geoand", "createdAt": "2020-06-30T11:03:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU5NDc5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU5OTA2OA==", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447599068", "bodyText": "All the methods in DevModeTestUtils that deal with http response should be moved to your new HttpUtils class", "author": "geoand", "createdAt": "2020-06-30T11:03:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU5NDc5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYwMDkzNQ==", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447600935", "bodyText": "Okkay, on it", "author": "Garima829", "createdAt": "2020-06-30T11:07:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU5NDc5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY4MzEzNQ==", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447683135", "bodyText": "Last thing, let's just drop this class since it's not doing anything after all...\nThe idea was initially to move things out of DevModeTestUtils (since it contains things that are more than dev mode), but let's leave it for later...", "author": "geoand", "createdAt": "2020-06-30T13:30:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU5NDc5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY4NzU2Ng==", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447687566", "bodyText": "This class HttpUtils is using the same getHttpResponse as that of QuarkusDevGradleTestBase which then uses getHttpResponse of DevModeTestUtils, so if I'll remove it, my test will use getHttpResponse straightaway from DevModeTestUtils", "author": "Garima829", "createdAt": "2020-06-30T13:36:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU5NDc5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY4OTI0OQ==", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447689249", "bodyText": "getHttpResponse from HttpUtils currently adds another argument of getQuarkusDevBrokenReason", "author": "Garima829", "createdAt": "2020-06-30T13:38:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU5NDc5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY5MDMzMA==", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447690330", "bodyText": "That doesn't really matter. You can pass the argument from the test", "author": "geoand", "createdAt": "2020-06-30T13:39:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU5NDc5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY5MTY2OQ==", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447691669", "bodyText": "True, I'll remove it", "author": "Garima829", "createdAt": "2020-06-30T13:41:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU5NDc5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "dca35e83d55084780d404a1ee41c56383a520ff9", "chunk": "diff --git a/integration-tests/gradle/src/test/java/io/quarkus/gradle/HttpUtils.java b/integration-tests/gradle/src/test/java/io/quarkus/gradle/HttpUtils.java\nindex b26817aa62..59703074eb 100644\n--- a/integration-tests/gradle/src/test/java/io/quarkus/gradle/HttpUtils.java\n+++ b/integration-tests/gradle/src/test/java/io/quarkus/gradle/HttpUtils.java\n\n@@ -1,13 +1,7 @@\n package io.quarkus.gradle;\n \n import io.quarkus.test.devmode.util.DevModeTestUtils;\n-import io.quarkus.utilities.JavaBinFinder;\n \n-import java.io.File;\n-import java.io.IOException;\n-import java.nio.file.Path;\n-import java.util.ArrayList;\n-import java.util.List;\n import java.util.concurrent.Future;\n import java.util.function.Supplier;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU5NTE4MA==", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447595180", "bodyText": "This method doesn't conceptually belong here. Best move it to a LaunchUtils class and also rename the method to launch.", "author": "geoand", "createdAt": "2020-06-30T10:56:08Z", "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/HttpUtils.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.quarkus.gradle;\n+\n+import io.quarkus.test.devmode.util.DevModeTestUtils;\n+import io.quarkus.utilities.JavaBinFinder;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Future;\n+import java.util.function.Supplier;\n+\n+public class HttpUtils {\n+\n+    private static Future<?> quarkusDev;\n+\n+    protected static Process doLaunch(Path jar, File output) throws IOException {", "originalCommit": "bbf8d35ee4e35abec45dcefffc79805964cdac14", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU5NjE2NQ==", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447596165", "bodyText": "Okayy", "author": "Garima829", "createdAt": "2020-06-30T10:58:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU5NTE4MA=="}], "type": "inlineReview", "revised_code": {"commit": "dca35e83d55084780d404a1ee41c56383a520ff9", "chunk": "diff --git a/integration-tests/gradle/src/test/java/io/quarkus/gradle/HttpUtils.java b/integration-tests/gradle/src/test/java/io/quarkus/gradle/HttpUtils.java\nindex b26817aa62..59703074eb 100644\n--- a/integration-tests/gradle/src/test/java/io/quarkus/gradle/HttpUtils.java\n+++ b/integration-tests/gradle/src/test/java/io/quarkus/gradle/HttpUtils.java\n\n@@ -1,13 +1,7 @@\n package io.quarkus.gradle;\n \n import io.quarkus.test.devmode.util.DevModeTestUtils;\n-import io.quarkus.utilities.JavaBinFinder;\n \n-import java.io.File;\n-import java.io.IOException;\n-import java.nio.file.Path;\n-import java.util.ArrayList;\n-import java.util.List;\n import java.util.concurrent.Future;\n import java.util.function.Supplier;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU5NTQyMg==", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447595422", "bodyText": "You should probably assert that the response is \"hello\"", "author": "geoand", "createdAt": "2020-06-30T10:56:36Z", "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "diffHunk": "@@ -20,6 +31,51 @@ public void testFastJarFormatWorks() throws Exception {\n         assertThat(quarkusApp).exists();\n         Path jar = quarkusApp.resolve(\"quarkus-run.jar\");\n         assertThat(jar).exists();\n+\n+        File output = new File(projectDir, \"build/output.log\");\n+        output.createNewFile();\n+        Process process = doLaunch(jar, output);\n+        try {\n+            // Wait until server up\n+            dumpFileContentOnFailure(() -> {\n+                await()\n+                        .pollDelay(1, TimeUnit.SECONDS)\n+                        .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(\"/hello\", 200));\n+                return null;\n+            }, output, ConditionTimeoutException.class);\n+\n+            String logs = FileUtils.readFileToString(output, \"UTF-8\");\n+\n+            assertThatOutputWorksCorrectly(logs);\n+            // test that the application name and version are properly set\n+            getHttpResponse(\"/hello\");", "originalCommit": "bbf8d35ee4e35abec45dcefffc79805964cdac14", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU5NjMxMA==", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447596310", "bodyText": "Will do", "author": "Garima829", "createdAt": "2020-06-30T10:58:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU5NTQyMg=="}], "type": "inlineReview", "revised_code": {"commit": "dca35e83d55084780d404a1ee41c56383a520ff9", "chunk": "diff --git a/integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java b/integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java\nindex b716e6177a..998c99f4af 100644\n--- a/integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java\n+++ b/integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java\n\n@@ -34,7 +34,7 @@ public class FastJarFormatWorksTest extends QuarkusGradleWrapperTestBase {\n \n         File output = new File(projectDir, \"build/output.log\");\n         output.createNewFile();\n-        Process process = doLaunch(jar, output);\n+        Process process = launch(jar, output);\n         try {\n             // Wait until server up\n             dumpFileContentOnFailure(() -> {\n"}}, {"oid": "dca35e83d55084780d404a1ee41c56383a520ff9", "url": "https://github.com/quarkusio/quarkus/commit/dca35e83d55084780d404a1ee41c56383a520ff9", "message": "Updated FastJarFormatWorksTest, HttpUtils and made LaunchUtils", "committedDate": "2020-06-30T12:37:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY2NTk0NQ==", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447665945", "bodyText": "Since you added this, you should probably remove the previous statement.", "author": "geoand", "createdAt": "2020-06-30T13:05:44Z", "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "diffHunk": "@@ -20,6 +31,53 @@ public void testFastJarFormatWorks() throws Exception {\n         assertThat(quarkusApp).exists();\n         Path jar = quarkusApp.resolve(\"quarkus-run.jar\");\n         assertThat(jar).exists();\n+\n+        File output = new File(projectDir, \"build/output.log\");\n+        output.createNewFile();\n+        Process process = launch(jar, output);\n+        try {\n+            // Wait until server up\n+            dumpFileContentOnFailure(() -> {\n+                await()\n+                        .pollDelay(1, TimeUnit.SECONDS)\n+                        .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(\"/hello\", 200));\n+                return null;\n+            }, output, ConditionTimeoutException.class);\n+\n+            String logs = FileUtils.readFileToString(output, \"UTF-8\");\n+\n+            assertThatOutputWorksCorrectly(logs);\n+            // test that the application name and version are properly set\n+\n+            getHttpResponse(\"/hello\");\n+            assertThat(getHttpResponse(\"/hello\").equals(\"hello\"));", "originalCommit": "dca35e83d55084780d404a1ee41c56383a520ff9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY3MDQ2Nw==", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447670467", "bodyText": "Okayy", "author": "Garima829", "createdAt": "2020-06-30T13:12:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY2NTk0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "6ea3188671b5e58bcad9430e45ce48bdd9ee2458", "chunk": "diff --git a/integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java b/integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java\nindex 998c99f4af..4c59e65b8c 100644\n--- a/integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java\n+++ b/integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java\n\n@@ -47,9 +47,8 @@ public class FastJarFormatWorksTest extends QuarkusGradleWrapperTestBase {\n             String logs = FileUtils.readFileToString(output, \"UTF-8\");\n \n             assertThatOutputWorksCorrectly(logs);\n-            // test that the application name and version are properly set\n \n-            getHttpResponse(\"/hello\");\n+            // test that the application name and version are properly set\n             assertThat(getHttpResponse(\"/hello\").equals(\"hello\"));\n         } finally {\n             process.destroy();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY2NjEwMw==", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447666103", "bodyText": "No need to test this I would say", "author": "geoand", "createdAt": "2020-06-30T13:06:00Z", "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "diffHunk": "@@ -20,6 +31,53 @@ public void testFastJarFormatWorks() throws Exception {\n         assertThat(quarkusApp).exists();\n         Path jar = quarkusApp.resolve(\"quarkus-run.jar\");\n         assertThat(jar).exists();\n+\n+        File output = new File(projectDir, \"build/output.log\");\n+        output.createNewFile();\n+        Process process = launch(jar, output);\n+        try {\n+            // Wait until server up\n+            dumpFileContentOnFailure(() -> {\n+                await()\n+                        .pollDelay(1, TimeUnit.SECONDS)\n+                        .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(\"/hello\", 200));\n+                return null;\n+            }, output, ConditionTimeoutException.class);\n+\n+            String logs = FileUtils.readFileToString(output, \"UTF-8\");\n+\n+            assertThatOutputWorksCorrectly(logs);\n+            // test that the application name and version are properly set\n+\n+            getHttpResponse(\"/hello\");\n+            assertThat(getHttpResponse(\"/hello\").equals(\"hello\"));\n+        } finally {\n+            process.destroy();\n+        }\n+    }\n+\n+    static void assertThatOutputWorksCorrectly(String logs) {\n+        assertThat(logs.isEmpty()).isFalse();\n+        String infoLogLevel = \"INFO\";\n+        assertThat(logs.contains(infoLogLevel)).isTrue();\n+        String basic = \"[io.quarkus] (main)\";", "originalCommit": "dca35e83d55084780d404a1ee41c56383a520ff9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY3MTA2Mw==", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447671063", "bodyText": "But you said to test any string which is always present while removing the regex", "author": "Garima829", "createdAt": "2020-06-30T13:13:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY2NjEwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY3MjIxOA==", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447672218", "bodyText": "Yeah, what am I saying is that this test doesn't make sense because you have assertThat(logs.contains(\"cdi, resteasy\")).isTrue();", "author": "geoand", "createdAt": "2020-06-30T13:15:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY2NjEwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY3MzgzNA==", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447673834", "bodyText": "Okkay", "author": "Garima829", "createdAt": "2020-06-30T13:17:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY2NjEwMw=="}], "type": "inlineReview", "revised_code": {"commit": "6ea3188671b5e58bcad9430e45ce48bdd9ee2458", "chunk": "diff --git a/integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java b/integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java\nindex 998c99f4af..4c59e65b8c 100644\n--- a/integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java\n+++ b/integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java\n\n@@ -47,9 +47,8 @@ public class FastJarFormatWorksTest extends QuarkusGradleWrapperTestBase {\n             String logs = FileUtils.readFileToString(output, \"UTF-8\");\n \n             assertThatOutputWorksCorrectly(logs);\n-            // test that the application name and version are properly set\n \n-            getHttpResponse(\"/hello\");\n+            // test that the application name and version are properly set\n             assertThat(getHttpResponse(\"/hello\").equals(\"hello\"));\n         } finally {\n             process.destroy();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY2NjIxOQ==", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447666219", "bodyText": "This isn't really needed either", "author": "geoand", "createdAt": "2020-06-30T13:06:10Z", "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "diffHunk": "@@ -20,6 +31,53 @@ public void testFastJarFormatWorks() throws Exception {\n         assertThat(quarkusApp).exists();\n         Path jar = quarkusApp.resolve(\"quarkus-run.jar\");\n         assertThat(jar).exists();\n+\n+        File output = new File(projectDir, \"build/output.log\");\n+        output.createNewFile();\n+        Process process = launch(jar, output);\n+        try {\n+            // Wait until server up\n+            dumpFileContentOnFailure(() -> {\n+                await()\n+                        .pollDelay(1, TimeUnit.SECONDS)\n+                        .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(\"/hello\", 200));\n+                return null;\n+            }, output, ConditionTimeoutException.class);\n+\n+            String logs = FileUtils.readFileToString(output, \"UTF-8\");\n+\n+            assertThatOutputWorksCorrectly(logs);\n+            // test that the application name and version are properly set\n+\n+            getHttpResponse(\"/hello\");\n+            assertThat(getHttpResponse(\"/hello\").equals(\"hello\"));\n+        } finally {\n+            process.destroy();\n+        }\n+    }\n+\n+    static void assertThatOutputWorksCorrectly(String logs) {\n+        assertThat(logs.isEmpty()).isFalse();\n+        String infoLogLevel = \"INFO\";\n+        assertThat(logs.contains(infoLogLevel)).isTrue();\n+        String basic = \"[io.quarkus] (main)\";\n+        assertThat(logs.contains(basic)).isTrue();\n+        assertThat(logs.contains(\"cdi, resteasy\")).isTrue();\n+        assertThat(logs.contains(\"JBoss Threads version\")).isFalse();", "originalCommit": "dca35e83d55084780d404a1ee41c56383a520ff9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY3MTc5OA==", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447671798", "bodyText": "Okayy", "author": "Garima829", "createdAt": "2020-06-30T13:14:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY2NjIxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "6ea3188671b5e58bcad9430e45ce48bdd9ee2458", "chunk": "diff --git a/integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java b/integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java\nindex 998c99f4af..4c59e65b8c 100644\n--- a/integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java\n+++ b/integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java\n\n@@ -47,9 +47,8 @@ public class FastJarFormatWorksTest extends QuarkusGradleWrapperTestBase {\n             String logs = FileUtils.readFileToString(output, \"UTF-8\");\n \n             assertThatOutputWorksCorrectly(logs);\n-            // test that the application name and version are properly set\n \n-            getHttpResponse(\"/hello\");\n+            // test that the application name and version are properly set\n             assertThat(getHttpResponse(\"/hello\").equals(\"hello\"));\n         } finally {\n             process.destroy();\n"}}, {"oid": "6ea3188671b5e58bcad9430e45ce48bdd9ee2458", "url": "https://github.com/quarkusio/quarkus/commit/6ea3188671b5e58bcad9430e45ce48bdd9ee2458", "message": "Updated FastJarFormatWorksTest, HttpUtils and made LaunchUtils", "committedDate": "2020-06-30T13:21:06Z", "type": "forcePushed"}, {"oid": "9715e900db8ed282a067bb8edda1ad4148cf6e6e", "url": "https://github.com/quarkusio/quarkus/commit/9715e900db8ed282a067bb8edda1ad4148cf6e6e", "message": "Updated FastJarFormatWorksTest and LaunchUtils", "committedDate": "2020-06-30T13:47:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwODE4Mg==", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447708182", "bodyText": "Let's call jarRun instead.", "author": "geoand", "createdAt": "2020-06-30T14:03:28Z", "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "diffHunk": "@@ -1,13 +1,26 @@\n package io.quarkus.gradle;\n \n+import static io.quarkus.gradle.LaunchUtils.launch;\n import static org.assertj.core.api.Assertions.assertThat;\n \n import java.io.File;\n import java.nio.file.Path;\n \n+import org.apache.log4j.Logger;\n import org.junit.jupiter.api.Test;\n \n+import static org.awaitility.Awaitility.await;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Supplier;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.awaitility.core.ConditionTimeoutException;\n+import io.quarkus.test.devmode.util.DevModeTestUtils;\n+\n public class FastJarFormatWorksTest extends QuarkusGradleWrapperTestBase {\n+    private static Future<?> quarkusDev;", "originalCommit": "9715e900db8ed282a067bb8edda1ad4148cf6e6e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwOTA1NA==", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447709054", "bodyText": "Okayy", "author": "Garima829", "createdAt": "2020-06-30T14:04:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwODE4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "78c36321687ba42b0bd8b763d636d059487672b1", "chunk": "diff --git a/integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java b/integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java\nindex 4e1a863339..3818297bc0 100644\n--- a/integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java\n+++ b/integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java\n\n@@ -20,7 +20,7 @@ import org.awaitility.core.ConditionTimeoutException;\n import io.quarkus.test.devmode.util.DevModeTestUtils;\n \n public class FastJarFormatWorksTest extends QuarkusGradleWrapperTestBase {\n-    private static Future<?> quarkusDev;\n+    private static Future<?> jarRun;\n \n     @Test\n     public void testFastJarFormatWorks() throws Exception {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwODQ2MA==", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447708460", "bodyText": "And the string should be \"jar run mode has terminated\"", "author": "geoand", "createdAt": "2020-06-30T14:03:52Z", "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "diffHunk": "@@ -20,6 +33,55 @@ public void testFastJarFormatWorks() throws Exception {\n         assertThat(quarkusApp).exists();\n         Path jar = quarkusApp.resolve(\"quarkus-run.jar\");\n         assertThat(jar).exists();\n+\n+        File output = new File(projectDir, \"build/output.log\");\n+        output.createNewFile();\n+        Process process = launch(jar, output);\n+        try {\n+            // Wait until server up\n+            dumpFileContentOnFailure(() -> {\n+                await()\n+                        .pollDelay(1, TimeUnit.SECONDS)\n+                        .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(\"/hello\", 200));\n+                return null;\n+            }, output, ConditionTimeoutException.class);\n+\n+            String logs = FileUtils.readFileToString(output, \"UTF-8\");\n+\n+            assertThatOutputWorksCorrectly(logs);\n+\n+            // test that the application name and version are properly set\n+            assertThat(DevModeTestUtils.getHttpResponse(\"/hello\",getQuarkusDevBrokenReason()).equals(\"hello\"));\n+        } finally {\n+            process.destroy();\n+        }\n+    }\n+\n+    static void assertThatOutputWorksCorrectly(String logs) {\n+        assertThat(logs.isEmpty()).isFalse();\n+        String infoLogLevel = \"INFO\";\n+        assertThat(logs.contains(infoLogLevel)).isTrue();\n+        assertThat(logs.contains(\"cdi, resteasy\")).isTrue();\n+    }\n+\n+    private void dumpFileContentOnFailure(final Callable<Void> operation, final File logFile,\n+                                          final Class<? extends Throwable> failureType) throws Exception {\n+\n+        final Logger log = Logger.getLogger(FastJarFormatWorksTest.class);\n+        try {\n+            operation.call();\n+        } catch (Throwable t) {\n+            log.error(\"Dumping logs that were generated in \" + logFile + \" for an operation that resulted in \"\n+                        + t.getClass().getName() + \":\",t);\n+\n+            throw t;\n+        }\n+    }\n+\n+    private static Supplier<String> getQuarkusDevBrokenReason() {\n+        return () -> {\n+            return quarkusDev == null ? null : quarkusDev.isDone() ? \"quarkusDev mode has terminated\" : null;", "originalCommit": "9715e900db8ed282a067bb8edda1ad4148cf6e6e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwOTE4NQ==", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447709185", "bodyText": "Okay", "author": "Garima829", "createdAt": "2020-06-30T14:04:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwODQ2MA=="}], "type": "inlineReview", "revised_code": {"commit": "78c36321687ba42b0bd8b763d636d059487672b1", "chunk": "diff --git a/integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java b/integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java\nindex 4e1a863339..3818297bc0 100644\n--- a/integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java\n+++ b/integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java\n\n@@ -80,7 +80,7 @@ public class FastJarFormatWorksTest extends QuarkusGradleWrapperTestBase {\n \n     private static Supplier<String> getQuarkusDevBrokenReason() {\n         return () -> {\n-            return quarkusDev == null ? null : quarkusDev.isDone() ? \"quarkusDev mode has terminated\" : null;\n+            return jarRun == null ? null : jarRun.isDone() ? \"jar run mode has terminated\" : null;\n         };\n     }\n \n"}}, {"oid": "78c36321687ba42b0bd8b763d636d059487672b1", "url": "https://github.com/quarkusio/quarkus/commit/78c36321687ba42b0bd8b763d636d059487672b1", "message": "Updated FastJarFormatWorksTest and LaunchUtils", "committedDate": "2020-06-30T14:09:48Z", "type": "forcePushed"}, {"oid": "136f16aea8323c615183f58d8bc276eb25fba048", "url": "https://github.com/quarkusio/quarkus/commit/136f16aea8323c615183f58d8bc276eb25fba048", "message": "Updated FastJarFormatWorksTest and LaunchUtils", "committedDate": "2020-06-30T14:46:51Z", "type": "commit"}, {"oid": "136f16aea8323c615183f58d8bc276eb25fba048", "url": "https://github.com/quarkusio/quarkus/commit/136f16aea8323c615183f58d8bc276eb25fba048", "message": "Updated FastJarFormatWorksTest and LaunchUtils", "committedDate": "2020-06-30T14:46:51Z", "type": "forcePushed"}]}