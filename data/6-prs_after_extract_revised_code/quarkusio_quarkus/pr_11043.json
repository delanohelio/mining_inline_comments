{"pr_number": 11043, "pr_title": "implement kotlin support for mongodb panache", "pr_createdAt": "2020-07-28T20:58:25Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/11043", "timeline": [{"oid": "89e49665664f7c1523c6554fc9305e990cfa1a49", "url": "https://github.com/quarkusio/quarkus/commit/89e49665664f7c1523c6554fc9305e990cfa1a49", "message": "rebase against master again", "committedDate": "2020-07-29T18:48:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkxODk0Mg==", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r462918942", "bodyText": "This is legit but a lot of interfaces inside Quarkus defines the default modifier like this.\nPlease, avoid this kind of changes not related to the PR especially for such a big PR as it adds another file to review !\nBut, OK to keep the change now that it's done.", "author": "loicmathieu", "createdAt": "2020-07-30T11:02:03Z", "path": "extensions/panache/mongodb-panache-common/runtime/src/main/java/io/quarkus/mongodb/panache/PanacheUpdate.java", "diffHunk": "@@ -18,7 +18,7 @@\n      * @param params params optional sequence of indexed parameters\n      * @return the number of entities updated.\n      */\n-    public long where(String query, Object... params);\n+    long where(String query, Object... params);", "originalCommit": "89e49665664f7c1523c6554fc9305e990cfa1a49", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk5MDAyMg==", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r462990022", "bodyText": "I actually thought i had cleaned all those up and then saw I'd missed one.  i can roll that one back.  but generally, public shouldn't be added to interface methods because it's redundant.", "author": "evanchooly", "createdAt": "2020-07-30T13:19:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkxODk0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "8bdbbcf5202a629ef0017604ef55ea3558411781", "chunk": "diff --git a/extensions/panache/mongodb-panache-common/runtime/src/main/java/io/quarkus/mongodb/panache/PanacheUpdate.java b/extensions/panache/mongodb-panache-common/runtime/src/main/java/io/quarkus/mongodb/panache/PanacheUpdate.java\nindex 8909fecfae..4f594a9d34 100644\n--- a/extensions/panache/mongodb-panache-common/runtime/src/main/java/io/quarkus/mongodb/panache/PanacheUpdate.java\n+++ b/extensions/panache/mongodb-panache-common/runtime/src/main/java/io/quarkus/mongodb/panache/PanacheUpdate.java\n\n@@ -18,7 +18,7 @@ public interface PanacheUpdate {\n      * @param params params optional sequence of indexed parameters\n      * @return the number of entities updated.\n      */\n-    long where(String query, Object... params);\n+    public long where(String query, Object... params);\n \n     /**\n      * Execute the update query with the update document.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk0MDE3OQ==", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r462940179", "bodyText": "Please don't use System.out", "author": "loicmathieu", "createdAt": "2020-07-30T11:47:29Z", "path": "integration-tests/hibernate-orm-panache/src/main/java/io/quarkus/it/panache/BookResource.java", "diffHunk": "@@ -22,6 +22,8 @@\n     @Produces(MediaType.APPLICATION_JSON)\n     public List<Book> addAndListAll(@PathParam(\"name\") String name, @PathParam(\"author\") String author) {\n         bookDao.persist(new Book(name, author));\n-        return bookDao.listAll();\n+        List<Book> books = bookDao.listAll();\n+        System.out.println(\"****** addAndListAll books = \" + books);\n+        return books;", "originalCommit": "89e49665664f7c1523c6554fc9305e990cfa1a49", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk5NDU5MA==", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r462994590", "bodyText": "It's just debug I missed when cleaning up pre-PR.  I'll clean it up now.", "author": "evanchooly", "createdAt": "2020-07-30T13:26:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk0MDE3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "8bdbbcf5202a629ef0017604ef55ea3558411781", "chunk": "diff --git a/integration-tests/hibernate-orm-panache/src/main/java/io/quarkus/it/panache/BookResource.java b/integration-tests/hibernate-orm-panache/src/main/java/io/quarkus/it/panache/BookResource.java\nindex babcb8d321..3f8a62e33d 100644\n--- a/integration-tests/hibernate-orm-panache/src/main/java/io/quarkus/it/panache/BookResource.java\n+++ b/integration-tests/hibernate-orm-panache/src/main/java/io/quarkus/it/panache/BookResource.java\n\n@@ -22,8 +22,6 @@ public class BookResource {\n     @Produces(MediaType.APPLICATION_JSON)\n     public List<Book> addAndListAll(@PathParam(\"name\") String name, @PathParam(\"author\") String author) {\n         bookDao.persist(new Book(name, author));\n-        List<Book> books = bookDao.listAll();\n-        System.out.println(\"****** addAndListAll books = \" + books);\n-        return books;\n+        return bookDao.listAll();\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk0MDMwNg==", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r462940306", "bodyText": "System.out ?", "author": "loicmathieu", "createdAt": "2020-07-30T11:47:48Z", "path": "integration-tests/hibernate-orm-panache/src/test/java/io/quarkus/it/panache/JacksonTest.java", "diffHunk": "@@ -16,6 +16,8 @@\n     public void testJsonIgnoreHonoured() {\n         List<Book> books = RestAssured.when().get(\"/book/Berlin/Beevor\").then().extract().body().jsonPath().getList(\".\",\n                 Book.class);\n+        System.out.println(\"****** testJsonIgnoreHonoured books = \" + books);\n+", "originalCommit": "89e49665664f7c1523c6554fc9305e990cfa1a49", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8bdbbcf5202a629ef0017604ef55ea3558411781", "chunk": "diff --git a/integration-tests/hibernate-orm-panache/src/test/java/io/quarkus/it/panache/JacksonTest.java b/integration-tests/hibernate-orm-panache/src/test/java/io/quarkus/it/panache/JacksonTest.java\nindex 6dc54ce1d9..81e59b4150 100644\n--- a/integration-tests/hibernate-orm-panache/src/test/java/io/quarkus/it/panache/JacksonTest.java\n+++ b/integration-tests/hibernate-orm-panache/src/test/java/io/quarkus/it/panache/JacksonTest.java\n\n@@ -16,7 +16,6 @@ public class JacksonTest {\n     public void testJsonIgnoreHonoured() {\n         List<Book> books = RestAssured.when().get(\"/book/Berlin/Beevor\").then().extract().body().jsonPath().getList(\".\",\n                 Book.class);\n-        System.out.println(\"****** testJsonIgnoreHonoured books = \" + books);\n \n         assertThat(books).hasSize(1).filteredOn(book -> book.author != null).isEmpty();\n     }\n"}}, {"oid": "8bdbbcf5202a629ef0017604ef55ea3558411781", "url": "https://github.com/quarkusio/quarkus/commit/8bdbbcf5202a629ef0017604ef55ea3558411781", "message": "implement kotlin support for mongodb panache", "committedDate": "2020-07-30T20:12:20Z", "type": "forcePushed"}, {"oid": "1f236a6a6eb710eb068791f60fdcbb00afe8a4b8", "url": "https://github.com/quarkusio/quarkus/commit/1f236a6a6eb710eb068791f60fdcbb00afe8a4b8", "message": "implement kotlin support for mongodb panache", "committedDate": "2020-08-03T18:50:30Z", "type": "forcePushed"}, {"oid": "8a535bb37d125799d8beee7c960f6caa269773cb", "url": "https://github.com/quarkusio/quarkus/commit/8a535bb37d125799d8beee7c960f6caa269773cb", "message": "implement kotlin support for mongodb panache", "committedDate": "2020-08-04T14:19:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ0Mjk3Ng==", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r466442976", "bodyText": "Generally I prefer to split those sort of methods in two, with one taking a mutable List result parameter to avoid creating one collection per class just to throw it away in addAll.\nAlso, won't this behaviour change impact other users?", "author": "FroMage", "createdAt": "2020-08-06T14:13:16Z", "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "diffHunk": "@@ -963,6 +967,15 @@ public String toString() {\n         return chainConfig;\n     }\n \n+    protected static List<Method> getMethods(Class<?> clazz) {\n+        List<Method> declaredMethods = new ArrayList<>();\n+        if (!clazz.getName().equals(Object.class.getName())) {\n+            declaredMethods.addAll(getMethods(clazz.getSuperclass()));", "originalCommit": "11cb12bda558fdcdd9afa2dacb5852a3479b1bfe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1NTI2MQ==", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r466655261", "bodyText": "I generally don't, obviously, but i'm happy to break that up if you want.  It doesn't seem to affect anyone else as it would only affect someone who'd defined BuildStep on a class with a parent which doesn't seem to be happening anywhere else.  All the other tests I've run still pass, though.", "author": "evanchooly", "createdAt": "2020-08-06T20:03:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ0Mjk3Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ0NDA3OA==", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r466444078", "bodyText": "Not sure who calls this, but you can't box Void, so that's dodgy.", "author": "FroMage", "createdAt": "2020-08-06T14:14:55Z", "path": "core/deployment/src/main/java/io/quarkus/deployment/util/AsmUtil.java", "diffHunk": "@@ -20,6 +33,36 @@\n  */\n public class AsmUtil {\n \n+    public static final List<org.objectweb.asm.Type> PRIMITIVES = asList(\n+            VOID_TYPE,\n+            BOOLEAN_TYPE,\n+            CHAR_TYPE,\n+            BYTE_TYPE,\n+            SHORT_TYPE,\n+            INT_TYPE,\n+            FLOAT_TYPE,\n+            LONG_TYPE);\n+    public static final List<org.objectweb.asm.Type> WRAPPERS = asList(\n+            getType(Void.class),\n+            getType(Boolean.class),\n+            getType(Character.class),\n+            getType(Byte.class),\n+            getType(Short.class),\n+            getType(Integer.class),\n+            getType(Float.class),\n+            getType(Long.class));\n+    public static final Map<org.objectweb.asm.Type, org.objectweb.asm.Type> WRAPPER_TO_PRIMITIVE = new HashMap<>();\n+\n+    static {\n+        for (int i = 0; i < AsmUtil.PRIMITIVES.size(); i++) {\n+            AsmUtil.WRAPPER_TO_PRIMITIVE.put(AsmUtil.WRAPPERS.get(i), AsmUtil.PRIMITIVES.get(i));\n+        }\n+    }\n+\n+    public static org.objectweb.asm.Type autobox(org.objectweb.asm.Type primitive) {", "originalCommit": "11cb12bda558fdcdd9afa2dacb5852a3479b1bfe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1Njc1MQ==", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r466656751", "bodyText": "It would actually convert void to Void but in this case that can't happen as it's only applied to method parameters in this case.  It's called here.", "author": "evanchooly", "createdAt": "2020-08-06T20:06:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ0NDA3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1ODA1MA==", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r466658050", "bodyText": "and here.", "author": "evanchooly", "createdAt": "2020-08-06T20:09:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ0NDA3OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ1MDAzMA==", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r466450030", "bodyText": "This introduces confusion wrt what is an internal vs binary name, why?", "author": "FroMage", "createdAt": "2020-08-06T14:23:27Z", "path": "extensions/panache/hibernate-orm-panache-kotlin/deployment/src/main/java/io/quarkus/hibernate/orm/panache/kotlin/deployment/KotlinPanacheEntityClassVisitor.java", "diffHunk": "@@ -52,20 +50,10 @@ public MethodVisitor visitMethod(int access, String name, String descriptor, Str\n     }\n \n     @Override\n-    protected String getModelDescriptor() {\n-        return \"Ljava/lang/Class;\";\n-    }\n-\n-    @Override\n-    protected String getPanacheOperationsBinaryName() {\n+    protected String getPanacheOperationsInternalName() {", "originalCommit": "11cb12bda558fdcdd9afa2dacb5852a3479b1bfe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1NDA3OA==", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r466654078", "bodyText": "I would actually like to entirely eliminate the use of \"binary name\" as that does not appear (that I can find) in either asm or jandex but appears to have been crafted with quarkus.  Usually the use of the different forms of these name is either as a descriptor  (L/java/lang/String;) or an internal name (java/lang/String).  But making that change now is far reaching and I didn't want to unilaterally make that decision.  I think only changed that in this case because I kept getting confused as to what that form should in this case.  But the formal/official term is \"internal name\" at any rate.", "author": "evanchooly", "createdAt": "2020-08-06T20:00:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ1MDAzMA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ1MjcwNA==", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r466452704", "bodyText": "This is confusing because descriptors and signatures are different, and this seems to confuse the two.", "author": "FroMage", "createdAt": "2020-08-06T14:26:51Z", "path": "extensions/panache/mongodb-panache-common/deployment/src/main/java/io/quarkus/mongodb/panache/deployment/BasePanacheMongoResourceProcessor.java", "diffHunk": "@@ -0,0 +1,384 @@\n+package io.quarkus.mongodb.panache.deployment;\n+\n+import static io.quarkus.deployment.util.JandexUtil.resolveTypeParameters;\n+import static org.jboss.jandex.DotName.createSimple;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.stream.Collectors;\n+\n+import org.bson.codecs.pojo.annotations.BsonId;\n+import org.bson.codecs.pojo.annotations.BsonIgnore;\n+import org.bson.codecs.pojo.annotations.BsonProperty;\n+import org.bson.types.ObjectId;\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.AnnotationValue;\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.CompositeIndex;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.FieldInfo;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.jandex.Indexer;\n+import org.jboss.jandex.MethodInfo;\n+import org.jboss.jandex.Type;\n+\n+import io.quarkus.arc.deployment.ValidationPhaseBuildItem;\n+import io.quarkus.builder.BuildException;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.annotations.ExecutionTime;\n+import io.quarkus.deployment.annotations.Record;\n+import io.quarkus.deployment.bean.JavaBeanUtil;\n+import io.quarkus.deployment.builditem.ApplicationArchivesBuildItem;\n+import io.quarkus.deployment.builditem.ApplicationIndexBuildItem;\n+import io.quarkus.deployment.builditem.BytecodeTransformerBuildItem;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveHierarchyBuildItem;\n+import io.quarkus.deployment.index.IndexingUtil;\n+import io.quarkus.deployment.util.JandexUtil;\n+import io.quarkus.jackson.spi.JacksonModuleBuildItem;\n+import io.quarkus.jsonb.spi.JsonbDeserializerBuildItem;\n+import io.quarkus.jsonb.spi.JsonbSerializerBuildItem;\n+import io.quarkus.mongodb.deployment.MongoClientNameBuildItem;\n+import io.quarkus.mongodb.deployment.MongoUnremovableClientsBuildItem;\n+import io.quarkus.mongodb.panache.MongoEntity;\n+import io.quarkus.mongodb.panache.PanacheMongoRecorder;\n+import io.quarkus.mongodb.panache.ProjectionFor;\n+import io.quarkus.mongodb.panache.jackson.ObjectIdDeserializer;\n+import io.quarkus.mongodb.panache.jackson.ObjectIdSerializer;\n+import io.quarkus.panache.common.deployment.PanacheEntityClassesBuildItem;\n+import io.quarkus.panache.common.deployment.PanacheEntityEnhancer;\n+import io.quarkus.panache.common.deployment.PanacheMethodCustomizer;\n+import io.quarkus.panache.common.deployment.PanacheMethodCustomizerBuildItem;\n+import io.quarkus.panache.common.deployment.PanacheRepositoryEnhancer;\n+\n+public abstract class BasePanacheMongoResourceProcessor {\n+    public static final DotName BSON_ID = createSimple(BsonId.class.getName());\n+    public static final DotName BSON_IGNORE = createSimple(BsonIgnore.class.getName());\n+    public static final DotName BSON_PROPERTY = createSimple(BsonProperty.class.getName());\n+    public static final DotName MONGO_ENTITY = createSimple(MongoEntity.class.getName());\n+    public static final DotName OBJECT_ID = createSimple(ObjectId.class.getName());\n+    public static final String OBJECT_SIGNATURE = toBinarySignature(Object.class);\n+    public static final DotName PROJECTION_FOR = createSimple(ProjectionFor.class.getName());\n+\n+    protected static String toBinarySignature(Class<?> type) {", "originalCommit": "11cb12bda558fdcdd9afa2dacb5852a3479b1bfe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1NzYzOQ==", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r466657639", "bodyText": "Yeah.  I can rename it to toDescriptor() but I'm actually hoping to change the type to a ByteCodeType as i feel that's a bit of cleaner type than a raw String.  Makes it easier to under stand in context where it's used.", "author": "evanchooly", "createdAt": "2020-08-06T20:08:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ1MjcwNA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ2OTM3MA==", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r466469370", "bodyText": "Are you really sure about this unboxed type?", "author": "FroMage", "createdAt": "2020-08-06T14:50:05Z", "path": "extensions/panache/mongodb-panache-kotlin/deployment/src/main/java/io/quarkus/mongodb/panache/kotlin/deployment/visitors/KotlinPanacheMongoRepositoryClassVisitor.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package io.quarkus.mongodb.panache.kotlin.deployment.visitors;\n+\n+import static io.quarkus.deployment.util.AsmUtil.getDescriptor;\n+import static io.quarkus.mongodb.panache.kotlin.deployment.KotlinGenerator.findEntityTypeArguments;\n+\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import org.jboss.jandex.AnnotationValue;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.jandex.MethodInfo;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.MethodVisitor;\n+\n+import io.quarkus.mongodb.panache.deployment.ByteCodeType;\n+import io.quarkus.mongodb.panache.deployment.TypeBundle;\n+import io.quarkus.mongodb.panache.kotlin.deployment.KotlinGenerator;\n+import io.quarkus.panache.common.deployment.PanacheEntityEnhancer;\n+import io.quarkus.panache.common.deployment.visitors.PanacheRepositoryClassVisitor;\n+\n+public class KotlinPanacheMongoRepositoryClassVisitor extends PanacheRepositoryClassVisitor {\n+    private final TypeBundle types;\n+    private KotlinGenerator generator;\n+    final Map<String, MethodInfo> toGenerate = new TreeMap<>();\n+    final Map<String, MethodInfo> toElide = new TreeMap<>();\n+\n+    public KotlinPanacheMongoRepositoryClassVisitor(IndexView indexView, ClassVisitor outputClassVisitor, String className,\n+            TypeBundle types) {\n+        super(className, outputClassVisitor, indexView);\n+        this.types = types;\n+    }\n+\n+    @Override\n+    protected final DotName getPanacheRepositoryDotName() {\n+        return types.repository().dotName();\n+    }\n+\n+    @Override\n+    protected final DotName getPanacheRepositoryBaseDotName() {\n+        return types.repositoryBase().dotName();\n+    }\n+\n+    @Override\n+    protected final String getPanacheOperationsInternalName() {\n+        return types.operations().internalName();\n+    }\n+\n+    @Override\n+    public void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {\n+        super.visit(version, access, name, signature, superName, interfaces);\n+        final String repositoryClassName = name.replace('/', '.');\n+\n+        ByteCodeType[] foundTypeArguments = findEntityTypeArguments(indexView, repositoryClassName,\n+                getPanacheRepositoryBaseDotName());\n+\n+        ByteCodeType idType = foundTypeArguments[1].unbox();", "originalCommit": "11cb12bda558fdcdd9afa2dacb5852a3479b1bfe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1OTY5NA==", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r466659694", "bodyText": "In this case, yes, because the Id parameter has an upper bound of Any and not Any? which means the actual type used in method signatures would be the primitive types and not the wrappers.  So it would be safe to unbox() there because any non-wrapper type just gets passed through while the wrappers would get unboxed.", "author": "evanchooly", "createdAt": "2020-08-06T20:12:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ2OTM3MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ3MTA5NA==", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r466471094", "bodyText": "So why don't we have a single impl for java/kotlin of the query like we do for ORM?", "author": "FroMage", "createdAt": "2020-08-06T14:52:31Z", "path": "extensions/panache/mongodb-panache-kotlin/runtime/src/main/java/io/quarkus/mongodb/panache/kotlin/reactive/runtime/ReactivePanacheQueryImpl.java", "diffHunk": "@@ -0,0 +1,256 @@\n+package io.quarkus.mongodb.panache.kotlin.reactive.runtime;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.bson.Document;\n+import org.bson.conversions.Bson;\n+\n+import com.mongodb.client.model.Collation;\n+\n+import io.quarkus.mongodb.FindOptions;\n+import io.quarkus.mongodb.panache.kotlin.reactive.ReactivePanacheQuery;\n+import io.quarkus.mongodb.panache.runtime.MongoPropertyUtil;\n+import io.quarkus.mongodb.reactive.ReactiveMongoCollection;\n+import io.quarkus.panache.common.Page;\n+import io.quarkus.panache.common.Range;\n+import io.quarkus.panache.common.exception.PanacheQueryException;\n+import io.smallrye.mutiny.Multi;\n+import io.smallrye.mutiny.Uni;\n+\n+public class ReactivePanacheQueryImpl<Entity> implements ReactivePanacheQuery<Entity> {", "originalCommit": "11cb12bda558fdcdd9afa2dacb5852a3479b1bfe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2MDI1NQ==", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r466660255", "bodyText": "I actually noticed that delegation after Loic had mentioned it.  I hadn't noticed that detail when you did all that refactoring to common code in the hibernate modules.  It's on my list to rectify today.", "author": "evanchooly", "createdAt": "2020-08-06T20:13:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ3MTA5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzEwOTAwMw==", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r467109003", "bodyText": "just pushed that update", "author": "evanchooly", "createdAt": "2020-08-07T15:23:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ3MTA5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzExMzk3OA==", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r467113978", "bodyText": "You only did it for the imperative PanacheQuery not for the ReactivePanacheQuery.", "author": "loicmathieu", "createdAt": "2020-08-07T15:32:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ3MTA5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzEzMDk0MQ==", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r467130941", "bodyText": "sigh  i knew that was going to happen.  i even made a mental note and then got distracted by the kid.  sorry.  one moment.", "author": "evanchooly", "createdAt": "2020-08-07T16:03:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ3MTA5NA=="}], "type": "inlineReview", "revised_code": {"commit": "f0b3c8f0674227d47342e860b49c6cfd39fb6991", "chunk": "diff --git a/extensions/panache/mongodb-panache-kotlin/runtime/src/main/java/io/quarkus/mongodb/panache/kotlin/reactive/runtime/ReactivePanacheQueryImpl.java b/extensions/panache/mongodb-panache-kotlin/runtime/src/main/java/io/quarkus/mongodb/panache/kotlin/reactive/runtime/ReactivePanacheQueryImpl.java\nindex 6fbe55696b..c68131430b 100644\n--- a/extensions/panache/mongodb-panache-kotlin/runtime/src/main/java/io/quarkus/mongodb/panache/kotlin/reactive/runtime/ReactivePanacheQueryImpl.java\n+++ b/extensions/panache/mongodb-panache-kotlin/runtime/src/main/java/io/quarkus/mongodb/panache/kotlin/reactive/runtime/ReactivePanacheQueryImpl.java\n\n@@ -1,75 +1,39 @@\n package io.quarkus.mongodb.panache.kotlin.reactive.runtime;\n \n import java.util.List;\n-import java.util.Optional;\n-import java.util.Set;\n \n-import org.bson.Document;\n import org.bson.conversions.Bson;\n \n import com.mongodb.client.model.Collation;\n \n-import io.quarkus.mongodb.FindOptions;\n import io.quarkus.mongodb.panache.kotlin.reactive.ReactivePanacheQuery;\n-import io.quarkus.mongodb.panache.runtime.MongoPropertyUtil;\n+import io.quarkus.mongodb.panache.reactive.runtime.CommonReactivePanacheQueryImpl;\n import io.quarkus.mongodb.reactive.ReactiveMongoCollection;\n import io.quarkus.panache.common.Page;\n-import io.quarkus.panache.common.Range;\n-import io.quarkus.panache.common.exception.PanacheQueryException;\n import io.smallrye.mutiny.Multi;\n import io.smallrye.mutiny.Uni;\n \n+@SuppressWarnings(\"unchecked\")\n public class ReactivePanacheQueryImpl<Entity> implements ReactivePanacheQuery<Entity> {\n-    private ReactiveMongoCollection collection;\n-    private Bson mongoQuery;\n-    private Bson sort;\n-    private Bson projections;\n-\n-    private Page page;\n-    private Uni<Long> count;\n-\n-    private Range range;\n-\n-    private Collation collation;\n+    private final CommonReactivePanacheQueryImpl<Entity> delegate;\n \n     ReactivePanacheQueryImpl(ReactiveMongoCollection<? extends Entity> collection, Bson mongoQuery, Bson sort) {\n-        this.collection = collection;\n-        this.mongoQuery = mongoQuery;\n-        this.sort = sort;\n+        this.delegate = new CommonReactivePanacheQueryImpl<>(collection, mongoQuery, sort);\n     }\n \n-    private ReactivePanacheQueryImpl(ReactivePanacheQueryImpl previousQuery, Bson projections, Class<?> type) {\n-        this.collection = previousQuery.collection.withDocumentClass(type);\n-        this.mongoQuery = previousQuery.mongoQuery;\n-        this.sort = previousQuery.sort;\n-        this.projections = projections;\n-        this.page = previousQuery.page;\n-        this.count = previousQuery.count;\n-        this.range = previousQuery.range;\n-        this.collation = previousQuery.collation;\n+    private ReactivePanacheQueryImpl(CommonReactivePanacheQueryImpl<Entity> delegate) {\n+        this.delegate = delegate;\n     }\n \n-    // Builder\n-\n     @Override\n     public <T> ReactivePanacheQuery<T> project(Class<T> type) {\n-        // collect field names from public fields and getters\n-        Set<String> fieldNames = MongoPropertyUtil.collectFields(type);\n-\n-        // create the projection document\n-        Document projections = new Document();\n-        for (String fieldName : fieldNames) {\n-            projections.append(fieldName, 1);\n-        }\n-\n-        return new ReactivePanacheQueryImpl(this, projections, type);\n+        return new ReactivePanacheQueryImpl<>(delegate.project(type));\n     }\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public ReactivePanacheQuery<Entity> page(Page page) {\n-        this.page = page;\n-        this.range = null; // reset the range to be able to switch from range to page\n+        delegate.page(page);\n         return this;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ3NjczOQ==", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r466476739", "bodyText": "Feels weird to have this method defined in the Java base interface if it's only meant for Kotlin implementations. Is it called by the abstract processor? If not, it should probably belong in a Kotlin subinterface.", "author": "FroMage", "createdAt": "2020-08-06T15:00:21Z", "path": "extensions/panache/mongodb-panache/deployment/src/main/java/io/quarkus/mongodb/panache/deployment/ImperativeTypeBundle.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package io.quarkus.mongodb.panache.deployment;\n+\n+import io.quarkus.mongodb.panache.PanacheMongoEntity;\n+import io.quarkus.mongodb.panache.PanacheMongoEntityBase;\n+import io.quarkus.mongodb.panache.PanacheMongoRepository;\n+import io.quarkus.mongodb.panache.PanacheMongoRepositoryBase;\n+import io.quarkus.mongodb.panache.PanacheQuery;\n+import io.quarkus.mongodb.panache.PanacheUpdate;\n+import io.quarkus.mongodb.panache.runtime.MongoOperations;\n+\n+public class ImperativeTypeBundle implements TypeBundle {\n+    @Override\n+    public ByteCodeType entity() {\n+        return new ByteCodeType(PanacheMongoEntity.class);\n+    }\n+\n+    @Override\n+    public ByteCodeType entityBase() {\n+        return new ByteCodeType(PanacheMongoEntityBase.class);\n+    }\n+\n+    @Override\n+    public ByteCodeType entityBaseCompanion() {\n+        throw new UnsupportedOperationException(\"Companions are not supported in Java.\");", "originalCommit": "11cb12bda558fdcdd9afa2dacb5852a3479b1bfe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2MTYwMA==", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r466661600", "bodyText": "Well, the idea was to have a single interface.  Generally the java side would never call that because it doesn't make sense but it means we can simply pass around TypeBundle references and not need to worry about subtypes.  I had actually thought about bumping the definition of those methods to default methods and then the java implementations can simply ignore them.  But I did have a case once early on when I was experimenting with this approach where I had passed in the wrong type and got the java type defs instead and this exception revealed that error quite quickly.", "author": "evanchooly", "createdAt": "2020-08-06T20:16:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ3NjczOQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "a6a7833ea5a0d94fbc561c4c0e960caea9d0fa1a", "url": "https://github.com/quarkusio/quarkus/commit/a6a7833ea5a0d94fbc561c4c0e960caea9d0fa1a", "message": "implement kotlin support for mongodb panache\n\nfix BuildStep scanning to check parent classes as well.\nrefactor to reduce redundant overrides\n\nreuse more of the java side\n\nreorder params.  trivial but now consistent with the other process methods\n\nrefactor to a common implementation", "committedDate": "2020-08-07T15:41:30Z", "type": "forcePushed"}, {"oid": "f0b3c8f0674227d47342e860b49c6cfd39fb6991", "url": "https://github.com/quarkusio/quarkus/commit/f0b3c8f0674227d47342e860b49c6cfd39fb6991", "message": "implement kotlin support for mongodb panache", "committedDate": "2020-08-12T17:42:49Z", "type": "forcePushed"}, {"oid": "0adc1d3d82403733cdaa76e735b1b8f398505172", "url": "https://github.com/quarkusio/quarkus/commit/0adc1d3d82403733cdaa76e735b1b8f398505172", "message": "implement kotlin support for mongodb panache", "committedDate": "2020-08-17T17:32:57Z", "type": "commit"}, {"oid": "0adc1d3d82403733cdaa76e735b1b8f398505172", "url": "https://github.com/quarkusio/quarkus/commit/0adc1d3d82403733cdaa76e735b1b8f398505172", "message": "implement kotlin support for mongodb panache", "committedDate": "2020-08-17T17:32:57Z", "type": "forcePushed"}]}