{"pr_number": 11908, "pr_title": "Support multiple Redis clients", "pr_createdAt": "2020-09-04T20:57:36Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/11908", "timeline": [{"oid": "6851f756c4e11866dd66220ebcc90ab46da78bb3", "url": "https://github.com/quarkusio/quarkus/commit/6851f756c4e11866dd66220ebcc90ab46da78bb3", "message": "feat(redis): support for multiple redis clients\n\nFixes https://github.com/quarkusio/quarkus/issues/11558", "committedDate": "2020-09-04T21:06:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg2MzMwOA==", "url": "https://github.com/quarkusio/quarkus/pull/11908#discussion_r483863308", "bodyText": "The one two lines above is called Api not API. Could we be consistent?", "author": "gsmet", "createdAt": "2020-09-04T22:07:48Z", "path": "extensions/redis-client/deployment/src/main/java/io/quarkus/redis/client/deployment/RedisClientProcessor.java", "diffHunk": "@@ -39,4 +72,101 @@ HealthBuildItem addHealthCheck(RedisBuildTimeConfig buildTimeConfig) {\n     RuntimeInitializedClassBuildItem initializeBulkTypeDuringRuntime() {\n         return new RuntimeInitializedClassBuildItem(BulkType.class.getName());\n     }\n+\n+    @BuildStep\n+    @Record(ExecutionTime.RUNTIME_INIT)\n+    public void produceRedisClient(RedisClientRecorder recorder, ApplicationArchivesBuildItem applicationArchives,\n+            BuildProducer<SyntheticBeanBuildItem> syntheticBeans,\n+            VertxBuildItem vertxBuildItem) {\n+        Set<String> clientNames = new HashSet<>();\n+        clientNames.add(RedisClientUtil.DEFAULT_CLIENT);\n+\n+        IndexView indexView = applicationArchives.getRootArchive().getIndex();\n+        Collection<AnnotationInstance> clientAnnotations = indexView.getAnnotations(REDIS_CLIENT_ANNOTATION);\n+        for (AnnotationInstance annotation : clientAnnotations) {\n+            clientNames.add(annotation.value().asString());\n+        }\n+\n+        for (String clientName : clientNames) {\n+            syntheticBeans.produce(createBlockingSyntheticBean(recorder, clientName));\n+            syntheticBeans.produce(createReactiveSyntheticBean(recorder, clientName));\n+            syntheticBeans.produce(createMutinyRedisApiSyntheticBean(recorder, clientName));\n+            syntheticBeans.produce(createMutinyRedisClientSyntheticBean(recorder, clientName));\n+            syntheticBeans.produce(createVertxRedisAPISyntheticBean(recorder, clientName));", "originalCommit": "6851f756c4e11866dd66220ebcc90ab46da78bb3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg3OTE4NA==", "url": "https://github.com/quarkusio/quarkus/pull/11908#discussion_r483879184", "bodyText": "Good point, thanks for spotting this. I had this mixed up all over the codebase and I've applied some clean up.", "author": "machi1990", "createdAt": "2020-09-04T23:24:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg2MzMwOA=="}], "type": "inlineReview", "revised_code": {"commit": "12653ca4550a8bdb7051746eeeba333fb646ea0d", "chunk": "diff --git a/extensions/redis-client/deployment/src/main/java/io/quarkus/redis/client/deployment/RedisClientProcessor.java b/extensions/redis-client/deployment/src/main/java/io/quarkus/redis/client/deployment/RedisClientProcessor.java\nindex 8e642c140c..750ce6ba5e 100644\n--- a/extensions/redis-client/deployment/src/main/java/io/quarkus/redis/client/deployment/RedisClientProcessor.java\n+++ b/extensions/redis-client/deployment/src/main/java/io/quarkus/redis/client/deployment/RedisClientProcessor.java\n\n@@ -88,16 +88,16 @@ public class RedisClientProcessor {\n         }\n \n         for (String clientName : clientNames) {\n-            syntheticBeans.produce(createBlockingSyntheticBean(recorder, clientName));\n-            syntheticBeans.produce(createReactiveSyntheticBean(recorder, clientName));\n-            syntheticBeans.produce(createMutinyRedisApiSyntheticBean(recorder, clientName));\n-            syntheticBeans.produce(createMutinyRedisClientSyntheticBean(recorder, clientName));\n-            syntheticBeans.produce(createVertxRedisAPISyntheticBean(recorder, clientName));\n-            syntheticBeans.produce(createVertxRedisClientSyntheticBean(recorder, clientName));\n+            syntheticBeans.produce(createRedisClientSyntheticBean(recorder, clientName));\n+            syntheticBeans.produce(createRedisReactiveClientSyntheticBean(recorder, clientName));\n+            syntheticBeans.produce(createMutinyRedisAPISyntheticBean(recorder, clientName));\n+            syntheticBeans.produce(createMutinyRedisSyntheticBean(recorder, clientName));\n+            syntheticBeans.produce(createRedisSyntheticBean(recorder, clientName));\n+            syntheticBeans.produce(createRedisAPISyntheticBean(recorder, clientName));\n         }\n     }\n \n-    private SyntheticBeanBuildItem createBlockingSyntheticBean(RedisClientRecorder recorder, String clientName) {\n+    private SyntheticBeanBuildItem createRedisClientSyntheticBean(RedisClientRecorder recorder, String clientName) {\n         SyntheticBeanBuildItem.ExtendedBeanConfigurator configurator = SyntheticBeanBuildItem\n                 .configure(RedisClient.class)\n                 .scope(ApplicationScoped.class)\n"}}, {"oid": "12653ca4550a8bdb7051746eeeba333fb646ea0d", "url": "https://github.com/quarkusio/quarkus/commit/12653ca4550a8bdb7051746eeeba333fb646ea0d", "message": "feat(redis): support for multiple redis clients\n\nFixes https://github.com/quarkusio/quarkus/issues/11558", "committedDate": "2020-09-04T23:23:20Z", "type": "forcePushed"}, {"oid": "058c4f84ba9ae714aa85e44cbcb95db5ab2a98b8", "url": "https://github.com/quarkusio/quarkus/commit/058c4f84ba9ae714aa85e44cbcb95db5ab2a98b8", "message": "feat(redis): support for multiple redis clients\n\nFixes https://github.com/quarkusio/quarkus/issues/11558", "committedDate": "2020-09-04T23:37:47Z", "type": "forcePushed"}, {"oid": "4df8baca38c5875e30f65a738c7c3a8b77a6ef3b", "url": "https://github.com/quarkusio/quarkus/commit/4df8baca38c5875e30f65a738c7c3a8b77a6ef3b", "message": "feat(redis): support for multiple redis clients\n\nFixes https://github.com/quarkusio/quarkus/issues/11558", "committedDate": "2020-09-08T07:00:10Z", "type": "forcePushed"}, {"oid": "0cc495f12e51722fd32b6cc3455460a1a56b247e", "url": "https://github.com/quarkusio/quarkus/commit/0cc495f12e51722fd32b6cc3455460a1a56b247e", "message": "feat(redis): make the RedisConfiguration matches the upstream `RedisOptions`\n\nThis will make it easier to tweak things like redis connection hosts to match the expected endpoint\nby the upstream library thus avoid manually reconstructing the connection string. See\nhttps://github.com/vert-x3/vertx-redis-client/blob/e9e3c0db349d662e676c04235841c68488d6f6d2/src/main/java/io/vertx/redis/client/RedisOptions.java\nfor more details about the available options. The global default password for cluster and sentinel\nmode will be added once we have the next release of vertx-redis. `NetClientOptions` can be added now\nbut I considered it to be of less importance and we can have separate PR to configure it once users\nasks for it.\n\nFixes https://github.com/quarkusio/quarkus/issues/11986", "committedDate": "2020-09-08T19:16:13Z", "type": "forcePushed"}, {"oid": "f8796d055a6ee3dad1d12f06ad3213df4814b32e", "url": "https://github.com/quarkusio/quarkus/commit/f8796d055a6ee3dad1d12f06ad3213df4814b32e", "message": "feat(redis): make the RedisConfiguration matches the upstream `RedisOptions`\n\nThis will make it easier to tweak things like redis connection hosts to match the expected endpoint\nby the upstream library thus avoid manually reconstructing the connection string. See\nhttps://github.com/vert-x3/vertx-redis-client/blob/e9e3c0db349d662e676c04235841c68488d6f6d2/src/main/java/io/vertx/redis/client/RedisOptions.java\nfor more details about the available options. The global default password for cluster and sentinel\nmode will be added once we have the next release of vertx-redis. `NetClientOptions` can be added now\nbut I considered it to be of less importance and we can have separate PR to configure it once users\nasks for it.\n\nFixes https://github.com/quarkusio/quarkus/issues/11986", "committedDate": "2020-09-08T19:30:02Z", "type": "forcePushed"}, {"oid": "8152dac3ba2bd37cc6974fcef1dd748f97c72e88", "url": "https://github.com/quarkusio/quarkus/commit/8152dac3ba2bd37cc6974fcef1dd748f97c72e88", "message": "feat(redis): make the RedisConfiguration matches the upstream `RedisOptions`\n\nThis will make it easier to tweak things like redis connection hosts to match the expected endpoint\nby the upstream library thus avoid manually reconstructing the connection string. See\nhttps://github.com/vert-x3/vertx-redis-client/blob/e9e3c0db349d662e676c04235841c68488d6f6d2/src/main/java/io/vertx/redis/client/RedisOptions.java\nfor more details about the available options. The global default password for cluster and sentinel\nmode will be added once we have the next release of vertx-redis. `NetClientOptions` can be added now\nbut I considered it to be of less importance and we can have separate PR to configure it once users\nasks for it.\n\nFixes https://github.com/quarkusio/quarkus/issues/11986", "committedDate": "2020-09-08T19:35:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc2ODcwMQ==", "url": "https://github.com/quarkusio/quarkus/pull/11908#discussion_r488768701", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Marker annotation to select redis client\n          \n          \n            \n             * Marker annotation to select the Redis client.", "author": "gsmet", "createdAt": "2020-09-15T15:40:34Z", "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClientName.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package io.quarkus.redis.client;\n+\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+import javax.inject.Qualifier;\n+\n+/**\n+ * Marker annotation to select redis client", "originalCommit": "8152dac3ba2bd37cc6974fcef1dd748f97c72e88", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5086d58e174b666d6152f24a7a43fea3f4bc8842", "chunk": "diff --git a/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClientName.java b/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClientName.java\nindex b0a08e447a..71616eeb43 100644\n--- a/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClientName.java\n+++ b/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClientName.java\n\n@@ -10,16 +10,15 @@ import java.lang.annotation.Target;\n import javax.inject.Qualifier;\n \n /**\n- * Marker annotation to select redis client\n- * Use name parameter to select it\n+ * Marker annotation to select the redis client\n  *\n- * For example, if a redis connection is configured like so in {@code application.properties}:\n+ * For example, if the Redis connection is configured like so in {@code application.properties}:\n  *\n  * <pre>\n  * quarkus.redis.client1.hosts=localhost:6379\n  * </pre>\n  *\n- * Then to inject the proper {@code redisClient}, you would need to use {@code RedisClientName} like so:\n+ * Then to inject the proper {@code redisClient}, you would need to use {@code RedisClientName} like indicated below:\n  *\n  * <pre>\n  *     &#64Inject\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc2ODkxNQ==", "url": "https://github.com/quarkusio/quarkus/pull/11908#discussion_r488768915", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * For example, if a redis connection is configured like so in {@code application.properties}:\n          \n          \n            \n             * For example, if a Redis connection is configured like so in {@code application.properties}:", "author": "gsmet", "createdAt": "2020-09-15T15:40:51Z", "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClientName.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package io.quarkus.redis.client;\n+\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+import javax.inject.Qualifier;\n+\n+/**\n+ * Marker annotation to select redis client\n+ * Use name parameter to select it\n+ *\n+ * For example, if a redis connection is configured like so in {@code application.properties}:", "originalCommit": "8152dac3ba2bd37cc6974fcef1dd748f97c72e88", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5086d58e174b666d6152f24a7a43fea3f4bc8842", "chunk": "diff --git a/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClientName.java b/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClientName.java\nindex b0a08e447a..71616eeb43 100644\n--- a/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClientName.java\n+++ b/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClientName.java\n\n@@ -10,16 +10,15 @@ import java.lang.annotation.Target;\n import javax.inject.Qualifier;\n \n /**\n- * Marker annotation to select redis client\n- * Use name parameter to select it\n+ * Marker annotation to select the redis client\n  *\n- * For example, if a redis connection is configured like so in {@code application.properties}:\n+ * For example, if the Redis connection is configured like so in {@code application.properties}:\n  *\n  * <pre>\n  * quarkus.redis.client1.hosts=localhost:6379\n  * </pre>\n  *\n- * Then to inject the proper {@code redisClient}, you would need to use {@code RedisClientName} like so:\n+ * Then to inject the proper {@code redisClient}, you would need to use {@code RedisClientName} like indicated below:\n  *\n  * <pre>\n  *     &#64Inject\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc2OTE4Ng==", "url": "https://github.com/quarkusio/quarkus/pull/11908#discussion_r488769186", "bodyText": "Let's just drop this sentence, it's just noise.", "author": "gsmet", "createdAt": "2020-09-15T15:41:13Z", "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClientName.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package io.quarkus.redis.client;\n+\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+import javax.inject.Qualifier;\n+\n+/**\n+ * Marker annotation to select redis client\n+ * Use name parameter to select it", "originalCommit": "8152dac3ba2bd37cc6974fcef1dd748f97c72e88", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5086d58e174b666d6152f24a7a43fea3f4bc8842", "chunk": "diff --git a/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClientName.java b/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClientName.java\nindex b0a08e447a..71616eeb43 100644\n--- a/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClientName.java\n+++ b/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClientName.java\n\n@@ -10,16 +10,15 @@ import java.lang.annotation.Target;\n import javax.inject.Qualifier;\n \n /**\n- * Marker annotation to select redis client\n- * Use name parameter to select it\n+ * Marker annotation to select the redis client\n  *\n- * For example, if a redis connection is configured like so in {@code application.properties}:\n+ * For example, if the Redis connection is configured like so in {@code application.properties}:\n  *\n  * <pre>\n  * quarkus.redis.client1.hosts=localhost:6379\n  * </pre>\n  *\n- * Then to inject the proper {@code redisClient}, you would need to use {@code RedisClientName} like so:\n+ * Then to inject the proper {@code redisClient}, you would need to use {@code RedisClientName} like indicated below:\n  *\n  * <pre>\n  *     &#64Inject\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc3MDUyOQ==", "url": "https://github.com/quarkusio/quarkus/pull/11908#discussion_r488770529", "bodyText": "In the other extensions, we call it <default>.", "author": "gsmet", "createdAt": "2020-09-15T15:43:02Z", "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisClientUtil.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package io.quarkus.redis.client.runtime;\n+\n+import java.net.URI;\n+import java.util.Set;\n+\n+import io.quarkus.redis.client.runtime.RedisConfig.RedisConfiguration;\n+import io.quarkus.runtime.configuration.ConfigurationException;\n+import io.vertx.redis.client.RedisClientType;\n+import io.vertx.redis.client.RedisOptions;\n+\n+public class RedisClientUtil {\n+    public static final String DEFAULT_CLIENT = \"__redis_default_client__\";", "originalCommit": "8152dac3ba2bd37cc6974fcef1dd748f97c72e88", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk4MDIzMA==", "url": "https://github.com/quarkusio/quarkus/pull/11908#discussion_r488980230", "bodyText": "Sure, let's be consistent here too. I'll change it.", "author": "machi1990", "createdAt": "2020-09-15T21:21:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc3MDUyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "5086d58e174b666d6152f24a7a43fea3f4bc8842", "chunk": "diff --git a/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisClientUtil.java b/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisClientUtil.java\nindex d46a25b090..94396bbb89 100644\n--- a/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisClientUtil.java\n+++ b/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisClientUtil.java\n\n@@ -9,7 +9,7 @@ import io.vertx.redis.client.RedisClientType;\n import io.vertx.redis.client.RedisOptions;\n \n public class RedisClientUtil {\n-    public static final String DEFAULT_CLIENT = \"__redis_default_client__\";\n+    public static final String DEFAULT_CLIENT = \"<default>\";\n \n     public static RedisOptions buildOptions(RedisConfiguration redisConfig) {\n         RedisOptions options = new RedisOptions();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc3MTEyNA==", "url": "https://github.com/quarkusio/quarkus/pull/11908#discussion_r488771124", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Configures additional redis client connections.\n          \n          \n            \n                 * Configures additional Redis client connections.", "author": "gsmet", "createdAt": "2020-09-15T15:43:45Z", "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisConfig.java", "diffHunk": "@@ -1,77 +1,136 @@\n package io.quarkus.redis.client.runtime;\n \n-import java.net.InetSocketAddress;\n+import java.net.URI;\n import java.time.Duration;\n+import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n \n+import io.quarkus.runtime.annotations.ConfigGroup;\n import io.quarkus.runtime.annotations.ConfigItem;\n import io.quarkus.runtime.annotations.ConfigPhase;\n import io.quarkus.runtime.annotations.ConfigRoot;\n import io.vertx.redis.client.RedisClientType;\n+import io.vertx.redis.client.RedisRole;\n+import io.vertx.redis.client.RedisSlaves;\n \n @ConfigRoot(phase = ConfigPhase.RUN_TIME)\n public class RedisConfig {\n \n     /**\n-     * The redis password\n+     * The default redis client\n      */\n-    @ConfigItem\n-    public Optional<String> password;\n+    @ConfigItem(name = ConfigItem.PARENT)\n+    public RedisConfiguration defaultClient;\n \n     /**\n-     * The redis hosts\n+     * Configures additional redis client connections.", "originalCommit": "8152dac3ba2bd37cc6974fcef1dd748f97c72e88", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5086d58e174b666d6152f24a7a43fea3f4bc8842", "chunk": "diff --git a/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisConfig.java b/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisConfig.java\nindex de1a262ba3..c1ada115e0 100644\n--- a/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisConfig.java\n+++ b/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisConfig.java\n\n@@ -6,6 +6,8 @@ import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n \n+import io.quarkus.redis.client.RedisClient;\n+import io.quarkus.redis.client.RedisClientName;\n import io.quarkus.runtime.annotations.ConfigGroup;\n import io.quarkus.runtime.annotations.ConfigItem;\n import io.quarkus.runtime.annotations.ConfigPhase;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc3MjI3Mg==", "url": "https://github.com/quarkusio/quarkus/pull/11908#discussion_r488772272", "bodyText": "Was it copy/pasted from elsewhere? All this Javadoc block could use some rework.", "author": "gsmet", "createdAt": "2020-09-15T15:45:18Z", "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisConfig.java", "diffHunk": "@@ -1,77 +1,136 @@\n package io.quarkus.redis.client.runtime;\n \n-import java.net.InetSocketAddress;\n+import java.net.URI;\n import java.time.Duration;\n+import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n \n+import io.quarkus.runtime.annotations.ConfigGroup;\n import io.quarkus.runtime.annotations.ConfigItem;\n import io.quarkus.runtime.annotations.ConfigPhase;\n import io.quarkus.runtime.annotations.ConfigRoot;\n import io.vertx.redis.client.RedisClientType;\n+import io.vertx.redis.client.RedisRole;\n+import io.vertx.redis.client.RedisSlaves;\n \n @ConfigRoot(phase = ConfigPhase.RUN_TIME)\n public class RedisConfig {\n \n     /**\n-     * The redis password\n+     * The default redis client\n      */\n-    @ConfigItem\n-    public Optional<String> password;\n+    @ConfigItem(name = ConfigItem.PARENT)\n+    public RedisConfiguration defaultClient;\n \n     /**\n-     * The redis hosts\n+     * Configures additional redis client connections.\n+     * <p>\n+     * each client have a unique identifier witch must be identified to select the right connection.\n+     * example:\n+     * <p>\n+     *\n+     * <pre>\n+     * quarkus.redis.client1.hosts = redis://localhost:6379\n+     * quarkus.redis.client2.hosts = redis://localhost:6380\n+     * </pre>\n+     * <p>\n+     * And then use annotations above the instances of RedisClient to indicate which instance we are going to use\n+     * <p>", "originalCommit": "8152dac3ba2bd37cc6974fcef1dd748f97c72e88", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk4MTc3MA==", "url": "https://github.com/quarkusio/quarkus/pull/11908#discussion_r488981770", "bodyText": "I'll push some updates. Let me know what you think.", "author": "machi1990", "createdAt": "2020-09-15T21:24:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc3MjI3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "5086d58e174b666d6152f24a7a43fea3f4bc8842", "chunk": "diff --git a/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisConfig.java b/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisConfig.java\nindex de1a262ba3..c1ada115e0 100644\n--- a/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisConfig.java\n+++ b/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisConfig.java\n\n@@ -6,6 +6,8 @@ import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n \n+import io.quarkus.redis.client.RedisClient;\n+import io.quarkus.redis.client.RedisClientName;\n import io.quarkus.runtime.annotations.ConfigGroup;\n import io.quarkus.runtime.annotations.ConfigItem;\n import io.quarkus.runtime.annotations.ConfigPhase;\n"}}, {"oid": "5086d58e174b666d6152f24a7a43fea3f4bc8842", "url": "https://github.com/quarkusio/quarkus/commit/5086d58e174b666d6152f24a7a43fea3f4bc8842", "message": "feat(redis): make the RedisConfiguration matches the upstream `RedisOptions`\n\nThis will make it easier to tweak things like redis connection hosts to match the expected endpoint\nby the upstream library thus avoid manually reconstructing the connection string. See\nhttps://github.com/vert-x3/vertx-redis-client/blob/e9e3c0db349d662e676c04235841c68488d6f6d2/src/main/java/io/vertx/redis/client/RedisOptions.java\nfor more details about the available options. The global default password for cluster and sentinel\nmode will be added once we have the next release of vertx-redis. `NetClientOptions` can be added now\nbut I considered it to be of less importance and we can have separate PR to configure it once users\nasks for it.\n\nFixes https://github.com/quarkusio/quarkus/issues/11986", "committedDate": "2020-09-15T21:35:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE0Mjc4OQ==", "url": "https://github.com/quarkusio/quarkus/pull/11908#discussion_r490142789", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Marker annotation to select the redis client\n          \n          \n            \n             * Marker annotation to select the Redis client.\n          \n      \n    \n    \n  \n\n(it's minor but this is public API so let's get it right)", "author": "gsmet", "createdAt": "2020-09-17T10:36:37Z", "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClientName.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.quarkus.redis.client;\n+\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+import javax.inject.Qualifier;\n+\n+/**\n+ * Marker annotation to select the redis client", "originalCommit": "5086d58e174b666d6152f24a7a43fea3f4bc8842", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "706ca0b0b8882fad1101564ae0ef79ea11f83ea9", "chunk": "diff --git a/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClientName.java b/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClientName.java\nindex 71616eeb43..dd6a9be89b 100644\n--- a/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClientName.java\n+++ b/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClientName.java\n\n@@ -10,7 +10,7 @@ import java.lang.annotation.Target;\n import javax.inject.Qualifier;\n \n /**\n- * Marker annotation to select the redis client\n+ * Marker annotation to select the Redis client.\n  *\n  * For example, if the Redis connection is configured like so in {@code application.properties}:\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE0Mjk0Mg==", "url": "https://github.com/quarkusio/quarkus/pull/11908#discussion_r490142942", "bodyText": "Let's drop this.", "author": "gsmet", "createdAt": "2020-09-17T10:36:53Z", "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClientName.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.quarkus.redis.client;\n+\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+import javax.inject.Qualifier;\n+\n+/**\n+ * Marker annotation to select the redis client\n+ *\n+ * For example, if the Redis connection is configured like so in {@code application.properties}:\n+ *\n+ * <pre>\n+ * quarkus.redis.client1.hosts=localhost:6379\n+ * </pre>\n+ *\n+ * Then to inject the proper {@code redisClient}, you would need to use {@code RedisClientName} like indicated below:\n+ *\n+ * <pre>\n+ *     &#64Inject\n+ *     &#64RedisClientName(\"client1\")\n+ *     RedisClient client;\n+ * </pre>\n+ */\n+@Target({ ElementType.TYPE, ElementType.METHOD, ElementType.FIELD })\n+@Retention(RUNTIME)\n+@Documented\n+@Qualifier\n+public @interface RedisClientName {\n+    /**\n+     * Specify the cluster name of the connection.\n+     *\n+     * @return the value", "originalCommit": "5086d58e174b666d6152f24a7a43fea3f4bc8842", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "706ca0b0b8882fad1101564ae0ef79ea11f83ea9", "chunk": "diff --git a/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClientName.java b/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClientName.java\nindex 71616eeb43..dd6a9be89b 100644\n--- a/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClientName.java\n+++ b/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClientName.java\n\n@@ -10,7 +10,7 @@ import java.lang.annotation.Target;\n import javax.inject.Qualifier;\n \n /**\n- * Marker annotation to select the redis client\n+ * Marker annotation to select the Redis client.\n  *\n  * For example, if the Redis connection is configured like so in {@code application.properties}:\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE0MzEyNg==", "url": "https://github.com/quarkusio/quarkus/pull/11908#discussion_r490143126", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Specify the cluster name of the connection.\n          \n          \n            \n                 * The Redis client name.", "author": "gsmet", "createdAt": "2020-09-17T10:37:14Z", "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClientName.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.quarkus.redis.client;\n+\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+import javax.inject.Qualifier;\n+\n+/**\n+ * Marker annotation to select the redis client\n+ *\n+ * For example, if the Redis connection is configured like so in {@code application.properties}:\n+ *\n+ * <pre>\n+ * quarkus.redis.client1.hosts=localhost:6379\n+ * </pre>\n+ *\n+ * Then to inject the proper {@code redisClient}, you would need to use {@code RedisClientName} like indicated below:\n+ *\n+ * <pre>\n+ *     &#64Inject\n+ *     &#64RedisClientName(\"client1\")\n+ *     RedisClient client;\n+ * </pre>\n+ */\n+@Target({ ElementType.TYPE, ElementType.METHOD, ElementType.FIELD })\n+@Retention(RUNTIME)\n+@Documented\n+@Qualifier\n+public @interface RedisClientName {\n+    /**\n+     * Specify the cluster name of the connection.", "originalCommit": "5086d58e174b666d6152f24a7a43fea3f4bc8842", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "706ca0b0b8882fad1101564ae0ef79ea11f83ea9", "chunk": "diff --git a/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClientName.java b/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClientName.java\nindex 71616eeb43..dd6a9be89b 100644\n--- a/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClientName.java\n+++ b/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClientName.java\n\n@@ -10,7 +10,7 @@ import java.lang.annotation.Target;\n import javax.inject.Qualifier;\n \n /**\n- * Marker annotation to select the redis client\n+ * Marker annotation to select the Redis client.\n  *\n  * For example, if the Redis connection is configured like so in {@code application.properties}:\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE0MzQ5NQ==", "url": "https://github.com/quarkusio/quarkus/pull/11908#discussion_r490143495", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Each client have a unique identifier which must be identified to select the right connection.\n          \n          \n            \n                 * Each client has a unique identifier which must be identified to select the right connection.", "author": "gsmet", "createdAt": "2020-09-17T10:37:53Z", "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisConfig.java", "diffHunk": "@@ -1,77 +1,140 @@\n package io.quarkus.redis.client.runtime;\n \n-import java.net.InetSocketAddress;\n+import java.net.URI;\n import java.time.Duration;\n+import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n \n+import io.quarkus.redis.client.RedisClient;\n+import io.quarkus.redis.client.RedisClientName;\n+import io.quarkus.runtime.annotations.ConfigGroup;\n import io.quarkus.runtime.annotations.ConfigItem;\n import io.quarkus.runtime.annotations.ConfigPhase;\n import io.quarkus.runtime.annotations.ConfigRoot;\n import io.vertx.redis.client.RedisClientType;\n+import io.vertx.redis.client.RedisRole;\n+import io.vertx.redis.client.RedisSlaves;\n \n @ConfigRoot(phase = ConfigPhase.RUN_TIME)\n public class RedisConfig {\n \n     /**\n-     * The redis password\n+     * The default redis client\n      */\n-    @ConfigItem\n-    public Optional<String> password;\n+    @ConfigItem(name = ConfigItem.PARENT)\n+    public RedisConfiguration defaultClient;\n \n     /**\n-     * The redis hosts\n+     * Configures additional Redis client connections.\n+     * <p>\n+     * Each client have a unique identifier which must be identified to select the right connection.", "originalCommit": "5086d58e174b666d6152f24a7a43fea3f4bc8842", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "706ca0b0b8882fad1101564ae0ef79ea11f83ea9", "chunk": "diff --git a/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisConfig.java b/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisConfig.java\nindex c1ada115e0..778cf5d612 100644\n--- a/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisConfig.java\n+++ b/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisConfig.java\n\n@@ -28,7 +28,7 @@ public class RedisConfig {\n     /**\n      * Configures additional Redis client connections.\n      * <p>\n-     * Each client have a unique identifier which must be identified to select the right connection.\n+     * Each client has a unique identifier which must be identified to select the right connection.\n      * For example:\n      * <p>\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE0NDAxMg==", "url": "https://github.com/quarkusio/quarkus/pull/11908#discussion_r490144012", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * And then use the {@link RedisClientName} to select the {@link RedisClient} or\n          \n          \n            \n                 * {@link io.quarkus.redis.client.reactive.ReactiveRedisClient}\n          \n          \n            \n                 * we are going to use.\n          \n          \n            \n                 * And then use the {@link RedisClientName} annotation to select the {@link RedisClient} or\n          \n          \n            \n                 * {@link io.quarkus.redis.client.reactive.ReactiveRedisClient}.", "author": "gsmet", "createdAt": "2020-09-17T10:38:52Z", "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisConfig.java", "diffHunk": "@@ -1,77 +1,140 @@\n package io.quarkus.redis.client.runtime;\n \n-import java.net.InetSocketAddress;\n+import java.net.URI;\n import java.time.Duration;\n+import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n \n+import io.quarkus.redis.client.RedisClient;\n+import io.quarkus.redis.client.RedisClientName;\n+import io.quarkus.runtime.annotations.ConfigGroup;\n import io.quarkus.runtime.annotations.ConfigItem;\n import io.quarkus.runtime.annotations.ConfigPhase;\n import io.quarkus.runtime.annotations.ConfigRoot;\n import io.vertx.redis.client.RedisClientType;\n+import io.vertx.redis.client.RedisRole;\n+import io.vertx.redis.client.RedisSlaves;\n \n @ConfigRoot(phase = ConfigPhase.RUN_TIME)\n public class RedisConfig {\n \n     /**\n-     * The redis password\n+     * The default redis client\n      */\n-    @ConfigItem\n-    public Optional<String> password;\n+    @ConfigItem(name = ConfigItem.PARENT)\n+    public RedisConfiguration defaultClient;\n \n     /**\n-     * The redis hosts\n+     * Configures additional Redis client connections.\n+     * <p>\n+     * Each client have a unique identifier which must be identified to select the right connection.\n+     * For example:\n+     * <p>\n+     *\n+     * <pre>\n+     * quarkus.redis.client1.hosts = redis://localhost:6379\n+     * quarkus.redis.client2.hosts = redis://localhost:6380\n+     * </pre>\n+     * <p>\n+     * And then use the {@link RedisClientName} to select the {@link RedisClient} or\n+     * {@link io.quarkus.redis.client.reactive.ReactiveRedisClient}\n+     * we are going to use.", "originalCommit": "5086d58e174b666d6152f24a7a43fea3f4bc8842", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "706ca0b0b8882fad1101564ae0ef79ea11f83ea9", "chunk": "diff --git a/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisConfig.java b/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisConfig.java\nindex c1ada115e0..778cf5d612 100644\n--- a/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisConfig.java\n+++ b/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisConfig.java\n\n@@ -28,7 +28,7 @@ public class RedisConfig {\n     /**\n      * Configures additional Redis client connections.\n      * <p>\n-     * Each client have a unique identifier which must be identified to select the right connection.\n+     * Each client has a unique identifier which must be identified to select the right connection.\n      * For example:\n      * <p>\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE0NDczMQ==", "url": "https://github.com/quarkusio/quarkus/pull/11908#discussion_r490144731", "bodyText": "Is there a reason why we are not being consistent and use the synthetic bean pattern for this too?", "author": "gsmet", "createdAt": "2020-09-17T10:40:13Z", "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisAPIProducer.java", "diffHunk": "@@ -1,137 +1,55 @@\n package io.quarkus.redis.client.runtime;\n \n-import java.net.InetSocketAddress;\n-import java.util.Set;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n \n import javax.annotation.PreDestroy;\n-import javax.enterprise.context.ApplicationScoped;\n-import javax.enterprise.inject.Produces;\n \n import io.quarkus.redis.client.RedisClient;\n import io.quarkus.redis.client.reactive.ReactiveRedisClient;\n-import io.quarkus.runtime.configuration.ConfigurationException;\n import io.vertx.core.Vertx;\n import io.vertx.redis.client.Redis;\n import io.vertx.redis.client.RedisAPI;\n-import io.vertx.redis.client.RedisClientType;\n import io.vertx.redis.client.RedisOptions;\n \n class RedisAPIProducer {", "originalCommit": "5086d58e174b666d6152f24a7a43fea3f4bc8842", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE3NTIwNw==", "url": "https://github.com/quarkusio/quarkus/pull/11908#discussion_r490175207", "bodyText": "You mean drop this build item  \n  \n    \n      quarkus/extensions/redis-client/deployment/src/main/java/io/quarkus/redis/client/deployment/RedisClientProcessor.java\n    \n    \n        Lines 59 to 64\n      in\n      6a7ba55\n    \n    \n    \n    \n\n        \n          \n           AdditionalBeanBuildItem \n        \n\n        \n          \n                   .builder() \n        \n\n        \n          \n                   .addBeanClass(\"io.quarkus.redis.client.runtime.RedisAPIProducer\") \n        \n\n        \n          \n                   .setDefaultScope(SINGLETON.getName()) \n        \n\n        \n          \n                   .setUnremovable() \n        \n\n        \n          \n                   .build(), \n        \n    \n  \n\n  and use a synthetic bean instead?\nIf so, I saw no need of the synthetic bean for this one.", "author": "machi1990", "createdAt": "2020-09-17T11:38:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE0NDczMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE5NjcyNA==", "url": "https://github.com/quarkusio/quarkus/pull/11908#discussion_r490196724", "bodyText": "I was more referring to making the individual API instances beans and remove the producer altogether.\nBut maybe we don't want to expose them directly.\nLet's keep it this way for now and see how it goes.", "author": "gsmet", "createdAt": "2020-09-17T12:16:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE0NDczMQ=="}], "type": "inlineReview", "revised_code": {"commit": "ef18d2cee242e92a46e7b57b9b322162ae588a86", "chunk": "diff --git a/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisAPIProducer.java b/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisAPIProducer.java\nindex a24eed4c80..224bff02d1 100644\n--- a/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisAPIProducer.java\n+++ b/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisAPIProducer.java\n\n@@ -1,55 +1,139 @@\n package io.quarkus.redis.client.runtime;\n \n-import java.util.Map;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.function.Function;\n+import java.net.InetSocketAddress;\n+import java.util.Set;\n \n import javax.annotation.PreDestroy;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Produces;\n \n import io.quarkus.redis.client.RedisClient;\n import io.quarkus.redis.client.reactive.ReactiveRedisClient;\n+import io.quarkus.runtime.configuration.ConfigurationException;\n import io.vertx.core.Vertx;\n import io.vertx.redis.client.Redis;\n import io.vertx.redis.client.RedisAPI;\n+import io.vertx.redis.client.RedisClientType;\n import io.vertx.redis.client.RedisOptions;\n \n class RedisAPIProducer {\n-    private static Map<String, RedisAPIContainer> REDIS_APIS = new ConcurrentHashMap<>();\n+    private static final char AT = '@';\n+    private static final char COLON = ':';\n+    private static final char SLASH = '/';\n+    private static final String REDIS_SCHEME = \"redis://\";\n+    private static final String REDIS_SSL_SCHEME = \"rediss://\";\n \n-    private final Vertx vertx;\n-    private final RedisConfig redisRuntimeConfig;\n+    private long timeout = 10;\n \n-    public RedisAPIProducer(RedisConfig redisConfig, Vertx vertx) {\n-        this.redisRuntimeConfig = redisConfig;\n-        this.vertx = vertx;\n-    }\n+    private final RedisConfig config;\n+\n+    @Produces\n+    @ApplicationScoped\n+    private final Redis vertxRedisClient;\n+\n+    @Produces\n+    @ApplicationScoped\n+    private final RedisAPI redisAPI;\n+\n+    @Produces\n+    @ApplicationScoped\n+    private final RedisClient redisClient;\n+\n+    @Produces\n+    @ApplicationScoped\n+    private final ReactiveRedisClient reactiveClient;\n+\n+    @Produces\n+    @ApplicationScoped\n+    private final MutinyRedisClient mutinyRedisClient;\n+\n+    @Produces\n+    @ApplicationScoped\n+    private final MutinyRedisClientAPI mutinyRedisClientAPI;\n+\n+    public RedisAPIProducer(RedisConfig config, Vertx vertx) {\n+        this.config = config;\n+        RedisOptions options = new RedisOptions();\n+        options.setType(config.clientType);\n \n-    public RedisAPIContainer getRedisAPIContainer(String name) {\n-        return REDIS_APIS.computeIfAbsent(name, new Function<String, RedisAPIContainer>() {\n-            @Override\n-            public RedisAPIContainer apply(String s) {\n-                long timeout = 10;\n-                RedisConfig.RedisConfiguration redisConfig = RedisClientUtil.getConfiguration(redisRuntimeConfig, name);\n-                if (redisConfig.timeout.isPresent()) {\n-                    timeout = redisConfig.timeout.get().getSeconds();\n-                }\n-                RedisOptions options = RedisClientUtil.buildOptions(redisConfig);\n-                Redis redis = Redis.createClient(vertx, options);\n-                RedisAPI redisAPI = RedisAPI.api(redis);\n-                MutinyRedis mutinyRedis = new MutinyRedis(redis);\n-                MutinyRedisAPI mutinyRedisAPI = new MutinyRedisAPI(redisAPI);\n-                RedisClient redisClient = new RedisClientImpl(mutinyRedisAPI, timeout);\n-                ReactiveRedisClient reactiveClient = new ReactiveRedisClientImpl(mutinyRedisAPI);\n-                return new RedisAPIContainer(redis, redisAPI, redisClient, reactiveClient, mutinyRedis, mutinyRedisAPI);\n+        if (RedisClientType.STANDALONE == config.clientType) {\n+            if (config.hosts.isPresent() && config.hosts.get().size() > 1) {\n+                throw new ConfigurationException(\"Multiple hosts supplied for non clustered configuration\");\n             }\n-        });\n+        }\n+\n+        if (config.hosts.isPresent()) {\n+            Set<InetSocketAddress> hosts = config.hosts.get();\n+            for (InetSocketAddress host : hosts) {\n+                String connectionString = buildConnectionString(host);\n+                options.addConnectionString(connectionString);\n+            }\n+        } else {\n+            InetSocketAddress defaultRedisAddress = new InetSocketAddress(\"localhost\", 6379);\n+            String connectionString = buildConnectionString(defaultRedisAddress);\n+            options.addConnectionString(connectionString);\n+        }\n+\n+        if (config.timeout.isPresent()) {\n+            timeout = config.timeout.get().getSeconds();\n+        }\n+\n+        options.setMaxNestedArrays(config.maxNestedArrays);\n+        options.setMaxWaitingHandlers(config.maxWaitingHandlers);\n+        options.setMaxPoolSize(config.maxPoolSize);\n+        options.setMaxPoolWaiting(config.maxPoolWaiting);\n+        options.setPoolRecycleTimeout(Math.toIntExact(config.poolRecycleTimeout.toMillis()));\n+        if (config.poolCleanerInterval.isPresent()) {\n+            options.setPoolCleanerInterval(Math.toIntExact(config.poolCleanerInterval.get().toMillis()));\n+        }\n+\n+        vertxRedisClient = Redis.createClient(vertx, options);\n+        redisAPI = RedisAPI.api(vertxRedisClient);\n+        mutinyRedisClient = new MutinyRedisClient(vertxRedisClient);\n+        mutinyRedisClientAPI = new MutinyRedisClientAPI(redisAPI);\n+        redisClient = new RedisClientImpl(mutinyRedisClientAPI, timeout);\n+        reactiveClient = new ReactiveRedisClientImpl(mutinyRedisClientAPI);\n     }\n \n     @PreDestroy\n     public void close() {\n-        for (RedisAPIContainer container : REDIS_APIS.values()) {\n-            container.close();\n+        this.redisAPI.close();\n+    }\n+\n+    private String buildConnectionString(InetSocketAddress address) {\n+        final StringBuilder builder = config.ssl ? new StringBuilder(REDIS_SSL_SCHEME) : new StringBuilder(REDIS_SCHEME);\n+\n+        if (config.password.isPresent()) {\n+            builder.append(config.password.get());\n+            builder.append(AT);\n         }\n+\n+        builder.append(address.getHostString());\n+        builder.append(COLON);\n+        builder.append(address.getPort());\n+        builder.append(SLASH);\n+        builder.append(config.database);\n+\n+        return builder.toString();\n     }\n \n+    static class MutinyRedisClient extends io.vertx.mutiny.redis.client.Redis {\n+        MutinyRedisClient(Redis delegate) {\n+            super(delegate);\n+        }\n+\n+        MutinyRedisClient() {\n+            super(null);\n+        }\n+    }\n+\n+    static class MutinyRedisClientAPI extends io.vertx.mutiny.redis.client.RedisAPI {\n+        MutinyRedisClientAPI(RedisAPI delegate) {\n+            super(delegate);\n+        }\n+\n+        MutinyRedisClientAPI() {\n+            super(null);\n+        }\n+    }\n }\n"}}, {"oid": "706ca0b0b8882fad1101564ae0ef79ea11f83ea9", "url": "https://github.com/quarkusio/quarkus/commit/706ca0b0b8882fad1101564ae0ef79ea11f83ea9", "message": "docs: various documentation fixes in the redis extension\n\nCo-authored-by: Guillaume Smet <guillaume.smet@gmail.com>", "committedDate": "2020-09-17T11:41:01Z", "type": "forcePushed"}, {"oid": "ef18d2cee242e92a46e7b57b9b322162ae588a86", "url": "https://github.com/quarkusio/quarkus/commit/ef18d2cee242e92a46e7b57b9b322162ae588a86", "message": "feat(redis): add the possibility to configure \"maxWaitingHandlers\" and \"maxNestedArrays\" options", "committedDate": "2020-09-17T11:41:18Z", "type": "commit"}, {"oid": "b61176e46f6325750da1fe787da1388089e52c4e", "url": "https://github.com/quarkusio/quarkus/commit/b61176e46f6325750da1fe787da1388089e52c4e", "message": "feat(redis): support for multiple redis clients\n\nFixes https://github.com/quarkusio/quarkus/issues/11558", "committedDate": "2020-09-17T11:41:19Z", "type": "commit"}, {"oid": "cb5c45494668b77f6677ad4c36b837e40b617c4a", "url": "https://github.com/quarkusio/quarkus/commit/cb5c45494668b77f6677ad4c36b837e40b617c4a", "message": "feat(redis): make the RedisConfiguration matches the upstream `RedisOptions`\n\nThis will make it easier to tweak things like redis connection hosts to match the expected endpoint\nby the upstream library thus avoid manually reconstructing the connection string. See\nhttps://github.com/vert-x3/vertx-redis-client/blob/e9e3c0db349d662e676c04235841c68488d6f6d2/src/main/java/io/vertx/redis/client/RedisOptions.java\nfor more details about the available options. The global default password for cluster and sentinel\nmode will be added once we have the next release of vertx-redis. `NetClientOptions` can be added now\nbut I considered it to be of less importance and we can have separate PR to configure it once users\nasks for it.\n\nFixes https://github.com/quarkusio/quarkus/issues/11986", "committedDate": "2020-09-17T11:41:19Z", "type": "commit"}, {"oid": "26f642ca69403bd38e9968aed727fa8044e98b95", "url": "https://github.com/quarkusio/quarkus/commit/26f642ca69403bd38e9968aed727fa8044e98b95", "message": "docs(redis): various documentation adjustements in the redis extension\n\nCo-authored-by: Guillaume Smet <guillaume.smet@gmail.com>", "committedDate": "2020-09-17T11:41:27Z", "type": "commit"}, {"oid": "26f642ca69403bd38e9968aed727fa8044e98b95", "url": "https://github.com/quarkusio/quarkus/commit/26f642ca69403bd38e9968aed727fa8044e98b95", "message": "docs(redis): various documentation adjustements in the redis extension\n\nCo-authored-by: Guillaume Smet <guillaume.smet@gmail.com>", "committedDate": "2020-09-17T11:41:27Z", "type": "forcePushed"}]}