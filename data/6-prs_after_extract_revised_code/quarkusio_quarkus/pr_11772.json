{"pr_number": 11772, "pr_title": "Support multitenancy with multiple persistence units ", "pr_createdAt": "2020-09-01T10:24:28Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/11772", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTAzODIyNQ==", "url": "https://github.com/quarkusio/quarkus/pull/11772#discussion_r481038225", "bodyText": "@michael-schnell @Sanne I'm not entirely sure this is useful now that we can define a datasource for a PU. Or in the case of the schema do you want to use another datasource when the tenant is defined?", "author": "gsmet", "createdAt": "2020-09-01T10:29:36Z", "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmConfigPersistenceUnit.java", "diffHunk": "@@ -149,16 +149,40 @@\n     @ConfigItem(defaultValue = \"true\")\n     public boolean secondLevelCachingEnabled;\n \n+    /**\n+     * Defines the method for multi-tenancy (DATABASE, NONE, SCHEMA). The complete list of allowed values is available in the\n+     * https://docs.jboss.org/hibernate/stable/orm/javadocs/org/hibernate/MultiTenancyStrategy.html[Hibernate ORM JavaDoc].\n+     * The type DISCRIMINATOR is currently not supported. The default value is NONE (no multi-tenancy).\n+     *\n+     * @asciidoclet\n+     */\n+    @ConfigItem\n+    public Optional<String> multitenant;\n+\n+    /**\n+     * Defines the name of the datasource to use in case of SCHEMA approach. The datasource of the persistence unit will be used\n+     * if not set.\n+     */\n+    @ConfigItem\n+    public Optional<String> multitenantSchemaDatasource;", "originalCommit": "4a6421fbec78e8cdbbf7e5935ba5c8359d40a02d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA3MTkyMA==", "url": "https://github.com/quarkusio/quarkus/pull/11772#discussion_r481071920", "bodyText": "AFAICT there is actually zero difference between SCHEMA and DATABASE in Hibernate multitenancy, so I don't think you need two things.", "author": "gavinking", "createdAt": "2020-09-01T11:36:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTAzODIyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA5ODI3Nw==", "url": "https://github.com/quarkusio/quarkus/pull/11772#discussion_r481098277", "bodyText": "I don't know about Hibernate ORM but it makes a difference here as things are handled in the Quarkus extension. I'm unclear though if we really want this.\nI agree this needs more discussions and thoughts.", "author": "gsmet", "createdAt": "2020-09-01T12:26:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTAzODIyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDAyNjMyOQ==", "url": "https://github.com/quarkusio/quarkus/pull/11772#discussion_r484026329", "bodyText": "There might not be a difference within Hibernatate between SCHEMA and DATABASE, but there is one if you need to generate to database schema with Flyway.", "author": "michael-schnell", "createdAt": "2020-09-06T06:00:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTAzODIyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "0af95bbf8fb7e4df4c9e13b04f324a7a07ebd0bc", "chunk": "diff --git a/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmConfigPersistenceUnit.java b/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmConfigPersistenceUnit.java\nindex c51ee6048d..10698c40cc 100644\n--- a/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmConfigPersistenceUnit.java\n+++ b/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmConfigPersistenceUnit.java\n\n@@ -149,23 +149,6 @@ public class HibernateOrmConfigPersistenceUnit {\n     @ConfigItem(defaultValue = \"true\")\n     public boolean secondLevelCachingEnabled;\n \n-    /**\n-     * Defines the method for multi-tenancy (DATABASE, NONE, SCHEMA). The complete list of allowed values is available in the\n-     * https://docs.jboss.org/hibernate/stable/orm/javadocs/org/hibernate/MultiTenancyStrategy.html[Hibernate ORM JavaDoc].\n-     * The type DISCRIMINATOR is currently not supported. The default value is NONE (no multi-tenancy).\n-     *\n-     * @asciidoclet\n-     */\n-    @ConfigItem\n-    public Optional<String> multitenant;\n-\n-    /**\n-     * Defines the name of the datasource to use in case of SCHEMA approach. The datasource of the persistence unit will be used\n-     * if not set.\n-     */\n-    @ConfigItem\n-    public Optional<String> multitenantSchemaDatasource;\n-\n     public boolean isAnyPropertySet() {\n         return datasource.isPresent() ||\n                 packages.isPresent() ||\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTAzODU4Mw==", "url": "https://github.com/quarkusio/quarkus/pull/11772#discussion_r481038583", "bodyText": "@michael-schnell @Sanne I'm not sure I understand the need to somehow copy the existing datasource?", "author": "gsmet", "createdAt": "2020-09-01T10:30:18Z", "path": "extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/tenant/DataSourceTenantConnectionResolver.java", "diffHunk": "@@ -25,73 +23,90 @@\n  * @author Michael Schnell\n  *\n  */\n-@DefaultBean\n-@ApplicationScoped\n public class DataSourceTenantConnectionResolver implements TenantConnectionResolver {\n \n     private static final Logger LOG = Logger.getLogger(DataSourceTenantConnectionResolver.class);\n \n-    @Inject\n-    JPAConfig jpaConfig;\n+    private String persistenceUnitName;\n+\n+    private String dataSourceName;\n+\n+    private MultiTenancyStrategy multiTenancyStrategy;\n+\n+    private String multiTenancySchemaDataSourceName;\n+\n+    public DataSourceTenantConnectionResolver() {\n+    }\n+\n+    public DataSourceTenantConnectionResolver(String persistenceUnitName, String dataSourceName,\n+            MultiTenancyStrategy multiTenancyStrategy, String multiTenancySchemaDataSourceName) {\n+        this.persistenceUnitName = persistenceUnitName;\n+        this.dataSourceName = dataSourceName;\n+        this.multiTenancyStrategy = multiTenancyStrategy;\n+        this.multiTenancySchemaDataSourceName = multiTenancySchemaDataSourceName;\n+    }\n \n     @Override\n     public ConnectionProvider resolve(String tenantId) {\n+        LOG.debugv(\"resolve((persistenceUnitName={0}, tenantIdentifier={1})\", persistenceUnitName, tenantId);\n+        LOG.debugv(\"multitenancy strategy: {0}\", multiTenancyStrategy);\n \n-        LOG.debugv(\"resolve({0})\", tenantId);\n-\n-        final MultiTenancyStrategy strategy = jpaConfig.getMultiTenancyStrategy();\n-        LOG.debugv(\"multitenancy strategy: {0}\", strategy);\n-        AgroalDataSource dataSource = tenantDataSource(jpaConfig, tenantId, strategy);\n+        AgroalDataSource dataSource = tenantDataSource(dataSourceName, tenantId, multiTenancyStrategy,\n+                multiTenancySchemaDataSourceName);\n         if (dataSource == null) {\n-            throw new IllegalStateException(\"No instance of datasource found for tenant: \" + tenantId);\n+            throw new IllegalStateException(\n+                    String.format(\"No instance of datasource found for persistence unit '%1$s' and tenant '%2$s'\",\n+                            persistenceUnitName, tenantId));\n         }\n-        if (strategy == MultiTenancyStrategy.SCHEMA) {\n-            return new TenantConnectionProvider(tenantId, dataSource);\n+        if (multiTenancyStrategy == MultiTenancyStrategy.SCHEMA) {\n+            return new SchemaTenantConnectionProvider(tenantId, dataSource);\n         }\n         return new QuarkusConnectionProvider(dataSource);\n     }\n \n     /**\n      * Create a new data source from the given configuration.\n-     * \n+     *\n      * @param config Configuration to use.\n-     * \n+     *\n      * @return New data source instance.\n      */\n     private static AgroalDataSource createFrom(AgroalDataSourceConfiguration config) {\n         try {\n             return AgroalDataSource.from(config);\n         } catch (SQLException ex) {\n-            throw new IllegalStateException(\"Failed to create a new data source based on the default config\", ex);\n+            throw new IllegalStateException(\"Failed to create a new data source based on the existing datasource configuration\",\n+                    ex);\n         }\n     }\n \n-    /**\n-     * Returns either the default data source or the tenant specific one.\n-     * \n-     * @param tenantId Tenant identifier. The value is required (non-{@literal null}) in case of\n-     *        {@link MultiTenancyStrategy#DATABASE}.\n-     * @param strategy Current multitenancy strategy Required value that cannot be {@literal null}.\n-     * \n-     * @return Data source.\n-     */\n-    private static AgroalDataSource tenantDataSource(JPAConfig jpaConfig, String tenantId, MultiTenancyStrategy strategy) {\n+    private static AgroalDataSource tenantDataSource(String dataSourceName, String tenantId, MultiTenancyStrategy strategy,\n+            String multiTenancySchemaDataSourceName) {\n         if (strategy != MultiTenancyStrategy.SCHEMA) {\n             return Arc.container().instance(AgroalDataSource.class, new DataSource.DataSourceLiteral(tenantId)).get();\n         }\n-        String dataSourceName = jpaConfig.getMultiTenancySchemaDataSource();\n-        if (dataSourceName == null) {\n-            AgroalDataSource dataSource = Arc.container().instance(AgroalDataSource.class).get();\n+\n+        if (multiTenancySchemaDataSourceName == null) {\n+            AgroalDataSource dataSource = getDataSource(dataSourceName);\n             return createFrom(dataSource.getConfiguration());", "originalCommit": "4a6421fbec78e8cdbbf7e5935ba5c8359d40a02d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0af95bbf8fb7e4df4c9e13b04f324a7a07ebd0bc", "chunk": "diff --git a/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/tenant/DataSourceTenantConnectionResolver.java b/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/tenant/DataSourceTenantConnectionResolver.java\nindex 4ccf32662f..357615c0bb 100644\n--- a/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/tenant/DataSourceTenantConnectionResolver.java\n+++ b/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/tenant/DataSourceTenantConnectionResolver.java\n\n@@ -23,90 +25,73 @@ import io.quarkus.hibernate.orm.runtime.customized.QuarkusConnectionProvider;\n  * @author Michael Schnell\n  *\n  */\n+@DefaultBean\n+@ApplicationScoped\n public class DataSourceTenantConnectionResolver implements TenantConnectionResolver {\n \n     private static final Logger LOG = Logger.getLogger(DataSourceTenantConnectionResolver.class);\n \n-    private String persistenceUnitName;\n-\n-    private String dataSourceName;\n-\n-    private MultiTenancyStrategy multiTenancyStrategy;\n-\n-    private String multiTenancySchemaDataSourceName;\n-\n-    public DataSourceTenantConnectionResolver() {\n-    }\n-\n-    public DataSourceTenantConnectionResolver(String persistenceUnitName, String dataSourceName,\n-            MultiTenancyStrategy multiTenancyStrategy, String multiTenancySchemaDataSourceName) {\n-        this.persistenceUnitName = persistenceUnitName;\n-        this.dataSourceName = dataSourceName;\n-        this.multiTenancyStrategy = multiTenancyStrategy;\n-        this.multiTenancySchemaDataSourceName = multiTenancySchemaDataSourceName;\n-    }\n+    @Inject\n+    JPAConfig jpaConfig;\n \n     @Override\n     public ConnectionProvider resolve(String tenantId) {\n-        LOG.debugv(\"resolve((persistenceUnitName={0}, tenantIdentifier={1})\", persistenceUnitName, tenantId);\n-        LOG.debugv(\"multitenancy strategy: {0}\", multiTenancyStrategy);\n \n-        AgroalDataSource dataSource = tenantDataSource(dataSourceName, tenantId, multiTenancyStrategy,\n-                multiTenancySchemaDataSourceName);\n+        LOG.debugv(\"resolve({0})\", tenantId);\n+\n+        final MultiTenancyStrategy strategy = jpaConfig.getMultiTenancyStrategy();\n+        LOG.debugv(\"multitenancy strategy: {0}\", strategy);\n+        AgroalDataSource dataSource = tenantDataSource(jpaConfig, tenantId, strategy);\n         if (dataSource == null) {\n-            throw new IllegalStateException(\n-                    String.format(\"No instance of datasource found for persistence unit '%1$s' and tenant '%2$s'\",\n-                            persistenceUnitName, tenantId));\n+            throw new IllegalStateException(\"No instance of datasource found for tenant: \" + tenantId);\n         }\n-        if (multiTenancyStrategy == MultiTenancyStrategy.SCHEMA) {\n-            return new SchemaTenantConnectionProvider(tenantId, dataSource);\n+        if (strategy == MultiTenancyStrategy.SCHEMA) {\n+            return new TenantConnectionProvider(tenantId, dataSource);\n         }\n         return new QuarkusConnectionProvider(dataSource);\n     }\n \n     /**\n      * Create a new data source from the given configuration.\n-     *\n+     * \n      * @param config Configuration to use.\n-     *\n+     * \n      * @return New data source instance.\n      */\n     private static AgroalDataSource createFrom(AgroalDataSourceConfiguration config) {\n         try {\n             return AgroalDataSource.from(config);\n         } catch (SQLException ex) {\n-            throw new IllegalStateException(\"Failed to create a new data source based on the existing datasource configuration\",\n-                    ex);\n+            throw new IllegalStateException(\"Failed to create a new data source based on the default config\", ex);\n         }\n     }\n \n-    private static AgroalDataSource tenantDataSource(String dataSourceName, String tenantId, MultiTenancyStrategy strategy,\n-            String multiTenancySchemaDataSourceName) {\n+    /**\n+     * Returns either the default data source or the tenant specific one.\n+     * \n+     * @param tenantId Tenant identifier. The value is required (non-{@literal null}) in case of\n+     *        {@link MultiTenancyStrategy#DATABASE}.\n+     * @param strategy Current multitenancy strategy Required value that cannot be {@literal null}.\n+     * \n+     * @return Data source.\n+     */\n+    private static AgroalDataSource tenantDataSource(JPAConfig jpaConfig, String tenantId, MultiTenancyStrategy strategy) {\n         if (strategy != MultiTenancyStrategy.SCHEMA) {\n             return Arc.container().instance(AgroalDataSource.class, new DataSource.DataSourceLiteral(tenantId)).get();\n         }\n-\n-        if (multiTenancySchemaDataSourceName == null) {\n-            AgroalDataSource dataSource = getDataSource(dataSourceName);\n+        String dataSourceName = jpaConfig.getMultiTenancySchemaDataSource();\n+        if (dataSourceName == null) {\n+            AgroalDataSource dataSource = Arc.container().instance(AgroalDataSource.class).get();\n             return createFrom(dataSource.getConfiguration());\n         }\n-\n-        return getDataSource(multiTenancySchemaDataSourceName);\n-    }\n-\n-    private static AgroalDataSource getDataSource(String dataSourceName) {\n-        if (DataSourceUtil.isDefault(dataSourceName)) {\n-            return Arc.container().instance(AgroalDataSource.class, Default.Literal.INSTANCE).get();\n-        } else {\n-            return Arc.container().instance(AgroalDataSource.class, new DataSource.DataSourceLiteral(dataSourceName)).get();\n-        }\n+        return Arc.container().instance(AgroalDataSource.class, new DataSource.DataSourceLiteral(dataSourceName)).get();\n     }\n \n-    private static class SchemaTenantConnectionProvider extends QuarkusConnectionProvider {\n+    private static class TenantConnectionProvider extends QuarkusConnectionProvider {\n \n         private final String tenantId;\n \n-        public SchemaTenantConnectionProvider(String tenantId, AgroalDataSource dataSource) {\n+        public TenantConnectionProvider(String tenantId, AgroalDataSource dataSource) {\n             super(dataSource);\n             this.tenantId = tenantId;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA0MjAwOQ==", "url": "https://github.com/quarkusio/quarkus/pull/11772#discussion_r481042009", "bodyText": "Shouldn't this be \"name\"?", "author": "geoand", "createdAt": "2020-09-01T10:37:03Z", "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java", "diffHunk": "@@ -504,6 +504,39 @@ public void startPersistenceUnits(HibernateOrmRecorder recorder, BeanContainerBu\n         recorder.startAllPersistenceUnits(beanContainer.getValue());\n     }\n \n+    @BuildStep\n+    @Record(RUNTIME_INIT)\n+    public void multitenancy(HibernateOrmRecorder recorder,\n+            List<PersistenceUnitDescriptorBuildItem> persistenceUnitDescriptors,\n+            BuildProducer<SyntheticBeanBuildItem> syntheticBeans) {\n+        for (PersistenceUnitDescriptorBuildItem persistenceUnitDescriptor : persistenceUnitDescriptors) {\n+            if (persistenceUnitDescriptor.getMultiTenancyStrategy() == MultiTenancyStrategy.NONE) {\n+                continue;\n+            }\n+\n+            ExtendedBeanConfigurator configurator = SyntheticBeanBuildItem.configure(DataSourceTenantConnectionResolver.class)\n+                    .scope(ApplicationScoped.class)\n+                    .types(TenantConnectionResolver.class)\n+                    .setRuntimeInit()\n+                    .defaultBean()\n+                    .unremovable()\n+                    .supplier(recorder.dataSourceTenantConnectionResolver(persistenceUnitDescriptor.getPersistenceUnitName(),\n+                            persistenceUnitDescriptor.getDataSource(), persistenceUnitDescriptor.getMultiTenancyStrategy(),\n+                            persistenceUnitDescriptor.getMultiTenancySchemaDataSource()));\n+\n+            if (PersistenceUnitUtil.isDefaultPersistenceUnit(persistenceUnitDescriptor.getPersistenceUnitName())) {\n+                configurator.addQualifier(Default.class);\n+            } else {\n+                configurator.addQualifier().annotation(DotNames.NAMED)\n+                        .addValue(\"value\", persistenceUnitDescriptor.getPersistenceUnitName()).done();\n+                configurator.addQualifier().annotation(PersistenceUnit.class)\n+                        .addValue(\"value\", persistenceUnitDescriptor.getPersistenceUnitName()).done();", "originalCommit": "4a6421fbec78e8cdbbf7e5935ba5c8359d40a02d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA0Njg2NQ==", "url": "https://github.com/quarkusio/quarkus/pull/11772#discussion_r481046865", "bodyText": "No, this is our own annotation: https://github.com/quarkusio/quarkus/blob/master/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/PersistenceUnit.java#L39", "author": "gsmet", "createdAt": "2020-09-01T10:46:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA0MjAwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA0ODM4Nw==", "url": "https://github.com/quarkusio/quarkus/pull/11772#discussion_r481048387", "bodyText": "Ah OK, I thought it was the javax.persistence annotation", "author": "geoand", "createdAt": "2020-09-01T10:49:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA0MjAwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA1NTg5Ng==", "url": "https://github.com/quarkusio/quarkus/pull/11772#discussion_r481055896", "bodyText": "I decided against it as they are quite confusing.", "author": "gsmet", "createdAt": "2020-09-01T11:04:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA0MjAwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA1NjAxMw==", "url": "https://github.com/quarkusio/quarkus/pull/11772#discussion_r481056013", "bodyText": "And also I needed it to be a qualifier.", "author": "gsmet", "createdAt": "2020-09-01T11:05:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA0MjAwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA1NzAzNQ==", "url": "https://github.com/quarkusio/quarkus/pull/11772#discussion_r481057035", "bodyText": "Makes sense", "author": "geoand", "createdAt": "2020-09-01T11:07:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA0MjAwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "0af95bbf8fb7e4df4c9e13b04f324a7a07ebd0bc", "chunk": "diff --git a/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java b/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java\nindex fdf4c7cfd2..b103e633fa 100644\n--- a/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java\n+++ b/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java\n\n@@ -504,39 +504,6 @@ public final class HibernateOrmProcessor {\n         recorder.startAllPersistenceUnits(beanContainer.getValue());\n     }\n \n-    @BuildStep\n-    @Record(RUNTIME_INIT)\n-    public void multitenancy(HibernateOrmRecorder recorder,\n-            List<PersistenceUnitDescriptorBuildItem> persistenceUnitDescriptors,\n-            BuildProducer<SyntheticBeanBuildItem> syntheticBeans) {\n-        for (PersistenceUnitDescriptorBuildItem persistenceUnitDescriptor : persistenceUnitDescriptors) {\n-            if (persistenceUnitDescriptor.getMultiTenancyStrategy() == MultiTenancyStrategy.NONE) {\n-                continue;\n-            }\n-\n-            ExtendedBeanConfigurator configurator = SyntheticBeanBuildItem.configure(DataSourceTenantConnectionResolver.class)\n-                    .scope(ApplicationScoped.class)\n-                    .types(TenantConnectionResolver.class)\n-                    .setRuntimeInit()\n-                    .defaultBean()\n-                    .unremovable()\n-                    .supplier(recorder.dataSourceTenantConnectionResolver(persistenceUnitDescriptor.getPersistenceUnitName(),\n-                            persistenceUnitDescriptor.getDataSource(), persistenceUnitDescriptor.getMultiTenancyStrategy(),\n-                            persistenceUnitDescriptor.getMultiTenancySchemaDataSource()));\n-\n-            if (PersistenceUnitUtil.isDefaultPersistenceUnit(persistenceUnitDescriptor.getPersistenceUnitName())) {\n-                configurator.addQualifier(Default.class);\n-            } else {\n-                configurator.addQualifier().annotation(DotNames.NAMED)\n-                        .addValue(\"value\", persistenceUnitDescriptor.getPersistenceUnitName()).done();\n-                configurator.addQualifier().annotation(PersistenceUnit.class)\n-                        .addValue(\"value\", persistenceUnitDescriptor.getPersistenceUnitName()).done();\n-            }\n-\n-            syntheticBeans.produce(configurator.done());\n-        }\n-    }\n-\n     @BuildStep\n     public void produceLoggingCategories(HibernateOrmConfig hibernateOrmConfig,\n             BuildProducer<LogCategoryBuildItem> categories) {\n"}}, {"oid": "0af95bbf8fb7e4df4c9e13b04f324a7a07ebd0bc", "url": "https://github.com/quarkusio/quarkus/commit/0af95bbf8fb7e4df4c9e13b04f324a7a07ebd0bc", "message": "Add elements missing in Hibernate ORM config isAnyPropertySet() methods", "committedDate": "2020-09-01T14:03:43Z", "type": "commit"}, {"oid": "aabda577e2b50efc77228192829bf3b93fa3af41", "url": "https://github.com/quarkusio/quarkus/commit/aabda577e2b50efc77228192829bf3b93fa3af41", "message": "Support multitenancy with multiple persistence units", "committedDate": "2020-09-01T14:03:43Z", "type": "commit"}, {"oid": "aabda577e2b50efc77228192829bf3b93fa3af41", "url": "https://github.com/quarkusio/quarkus/commit/aabda577e2b50efc77228192829bf3b93fa3af41", "message": "Support multitenancy with multiple persistence units", "committedDate": "2020-09-01T14:03:43Z", "type": "forcePushed"}]}