{"pr_number": 9171, "pr_title": "Support overriding prefix of @ConfigProperties at the injection point", "pr_createdAt": "2020-05-08T07:59:48Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/9171", "timeline": [{"oid": "04278af261d355be35f85f4c73a7e5da4ce13690", "url": "https://github.com/quarkusio/quarkus/commit/04278af261d355be35f85f4c73a7e5da4ce13690", "message": "Support overriding prefix of @ConfigProperties at the injection point\n\nResolves #9136", "committedDate": "2020-05-08T08:09:25Z", "type": "forcePushed"}, {"oid": "4431e0dfff7e062a0544c63a1009e290318e94f6", "url": "https://github.com/quarkusio/quarkus/commit/4431e0dfff7e062a0544c63a1009e290318e94f6", "message": "Support overriding prefix of @ConfigProperties at the injection point\n\nResolves #9136\n\nCo-authored-by: Manyanda Chitimbo <manyanda.chitimbo@gmail.com>", "committedDate": "2020-05-08T11:09:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA0MDc3OQ==", "url": "https://github.com/quarkusio/quarkus/pull/9171#discussion_r423040779", "bodyText": "This annotation transformer is redundant - ConfigPrefix is a qualifier and so it should be handled by io.quarkus.arc.deployment.AutoInjectFieldProcessor.", "author": "mkouba", "createdAt": "2020-05-11T13:31:33Z", "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/configproperties/ConfigPropertiesBuildStep.java", "diffHunk": "@@ -29,13 +37,76 @@\n     @BuildStep\n     void produceConfigPropertiesMetadata(CombinedIndexBuildItem combinedIndex, ArcConfig arcConfig,\n             BuildProducer<ConfigPropertiesMetadataBuildItem> configPropertiesMetadataProducer) {\n-        for (AnnotationInstance annotation : combinedIndex.getIndex().getAnnotations(DotNames.CONFIG_PROPERTIES)) {\n+\n+        IndexView index = combinedIndex.getIndex();\n+\n+        Map<DotName, ConfigProperties.NamingStrategy> namingStrategies = new HashMap<>();\n+\n+        // handle @ConfigProperties\n+        for (AnnotationInstance instance : index.getAnnotations(DotNames.CONFIG_PROPERTIES)) {\n+            ClassInfo classInfo = instance.target().asClass();\n+\n+            ConfigProperties.NamingStrategy namingStrategy = getNamingStrategy(arcConfig, instance.value(\"namingStrategy\"));\n+            namingStrategies.put(classInfo.name(), namingStrategy);\n+\n+            configPropertiesMetadataProducer\n+                    .produce(new ConfigPropertiesMetadataBuildItem(classInfo, getPrefix(instance), namingStrategy, false));\n+        }\n+\n+        // handle @ConfigPrefix\n+        for (AnnotationInstance instance : index.getAnnotations(DotNames.CONFIG_PREFIX)) {\n+            ClassInfo classInfo;\n+            if (instance.target().kind() == AnnotationTarget.Kind.FIELD) {\n+                classInfo = index.getClassByName(instance.target().asField().type().name());\n+            } else if (instance.target().kind() == AnnotationTarget.Kind.METHOD_PARAMETER) {\n+                short position = instance.target().asMethodParameter().position();\n+                classInfo = index\n+                        .getClassByName(instance.target().asMethodParameter().method().parameters().get(position).name());\n+            } else {\n+                break;\n+            }\n+\n+            // if the class was annotated with @ConfigProperties, use the strategy that was defined there, otherwise fallback to the default\n+            ConfigProperties.NamingStrategy namingStrategy = namingStrategies.getOrDefault(classInfo.name(),\n+                    arcConfig.configPropertiesDefaultNamingStrategy);\n+\n             configPropertiesMetadataProducer\n-                    .produce(\n-                            new ConfigPropertiesMetadataBuildItem(annotation, arcConfig.configPropertiesDefaultNamingStrategy));\n+                    .produce(new ConfigPropertiesMetadataBuildItem(classInfo, instance.value().asString(),\n+                            namingStrategy, true));\n         }\n     }\n \n+    // allow @ConfigPrefix to be used without @Inject\n+    @BuildStep\n+    public AnnotationsTransformerBuildItem annotationsTransformer() {", "originalCommit": "4431e0dfff7e062a0544c63a1009e290318e94f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA3MjQxMw==", "url": "https://github.com/quarkusio/quarkus/pull/9171#discussion_r423072413", "bodyText": "Right! Forgot about that, thanks!", "author": "geoand", "createdAt": "2020-05-11T14:17:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA0MDc3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "dfe1a39cfe1f994f7f746b881e12442106b9499a", "chunk": "diff --git a/extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/configproperties/ConfigPropertiesBuildStep.java b/extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/configproperties/ConfigPropertiesBuildStep.java\nindex 310e048e9a..e7af08fc69 100644\n--- a/extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/configproperties/ConfigPropertiesBuildStep.java\n+++ b/extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/configproperties/ConfigPropertiesBuildStep.java\n\n@@ -76,27 +74,6 @@ public class ConfigPropertiesBuildStep {\n         }\n     }\n \n-    // allow @ConfigPrefix to be used without @Inject\n-    @BuildStep\n-    public AnnotationsTransformerBuildItem annotationsTransformer() {\n-        return new AnnotationsTransformerBuildItem(new AnnotationsTransformer() {\n-\n-            @Override\n-            public boolean appliesTo(AnnotationTarget.Kind kind) {\n-                return AnnotationTarget.Kind.FIELD == kind;\n-            }\n-\n-            @Override\n-            public void transform(TransformationContext context) {\n-                if (context.isField()) {\n-                    if (context.getTarget().asField().hasAnnotation(DotNames.CONFIG_PREFIX)) {\n-                        context.transform().add(io.quarkus.arc.processor.DotNames.INJECT).done();\n-                    }\n-                }\n-            }\n-        });\n-    }\n-\n     private ConfigProperties.NamingStrategy getNamingStrategy(ArcConfig arcConfig, AnnotationValue namingStrategyValue) {\n         return namingStrategyValue == null ? arcConfig.configPropertiesDefaultNamingStrategy\n                 : ConfigProperties.NamingStrategy.valueOf(namingStrategyValue.asEnum());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA0MjIzMg==", "url": "https://github.com/quarkusio/quarkus/pull/9171#discussion_r423042232", "bodyText": "There is no need to use the getters for @Singleton beans - you could save quite a few lines of code ;-).", "author": "mkouba", "createdAt": "2020-05-11T13:33:39Z", "path": "extensions/arc/deployment/src/test/java/io/quarkus/arc/test/configproperties/MultipleClassConfigPrefixTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+package io.quarkus.arc.test.configproperties;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.arc.config.ConfigPrefix;\n+import io.quarkus.arc.config.ConfigProperties;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class MultipleClassConfigPrefixTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest config = new QuarkusUnitTest()\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                    .addClasses(DummyBean.class, DummyProperties.class)\n+                    .addAsResource(new StringAsset(\n+                            \"dummy.name=quarkus\\ndummy.someNumbers=1,2,3,4\\nother.name=redhat\\nother.someNumbers=3,2,1\"),\n+                            \"application.properties\"));\n+\n+    @Inject\n+    DummyBean dummyBean;\n+\n+    @Test\n+    public void testConfiguredValues() {\n+        assertEquals(\"quarkus\", dummyBean.getName());\n+        assertEquals(\"default\", dummyBean.getUnset());\n+        assertEquals(Arrays.asList(1, 2, 3, 4), dummyBean.getSomeNumbers());\n+\n+        assertEquals(\"redhat\", dummyBean.getName2());\n+        assertEquals(\"default\", dummyBean.getUnset2());\n+        assertEquals(Arrays.asList(3, 2, 1), dummyBean.getSomeNumbers2());\n+    }\n+\n+    @Singleton\n+    public static class DummyBean {\n+\n+        @Inject\n+        DummyProperties dummyProperties;\n+\n+        @ConfigPrefix(\"other\")\n+        DummyProperties dummyProperties2;\n+\n+        String getName() {", "originalCommit": "4431e0dfff7e062a0544c63a1009e290318e94f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA3MjMwNg==", "url": "https://github.com/quarkusio/quarkus/pull/9171#discussion_r423072306", "bodyText": "True, I'll do that :)", "author": "geoand", "createdAt": "2020-05-11T14:17:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA0MjIzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgwNTI3OQ==", "url": "https://github.com/quarkusio/quarkus/pull/9171#discussion_r423805279", "bodyText": "It would probably make sense for other tests as well. But it's just nitpicking ;-).", "author": "mkouba", "createdAt": "2020-05-12T15:01:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA0MjIzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgxMTE1OQ==", "url": "https://github.com/quarkusio/quarkus/pull/9171#discussion_r423811159", "bodyText": "Yeah for sure. When I need some very low effort task to do, I'll clean the rest up as well :)", "author": "geoand", "createdAt": "2020-05-12T15:08:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA0MjIzMg=="}], "type": "inlineReview", "revised_code": {"commit": "dfe1a39cfe1f994f7f746b881e12442106b9499a", "chunk": "diff --git a/extensions/arc/deployment/src/test/java/io/quarkus/arc/test/configproperties/MultipleClassConfigPrefixTest.java b/extensions/arc/deployment/src/test/java/io/quarkus/arc/test/configproperties/MultipleClassConfigPrefixTest.java\nindex e41b5b3860..f7b605a439 100644\n--- a/extensions/arc/deployment/src/test/java/io/quarkus/arc/test/configproperties/MultipleClassConfigPrefixTest.java\n+++ b/extensions/arc/deployment/src/test/java/io/quarkus/arc/test/configproperties/MultipleClassConfigPrefixTest.java\n\n@@ -33,13 +33,15 @@ public class MultipleClassConfigPrefixTest {\n \n     @Test\n     public void testConfiguredValues() {\n-        assertEquals(\"quarkus\", dummyBean.getName());\n-        assertEquals(\"default\", dummyBean.getUnset());\n-        assertEquals(Arrays.asList(1, 2, 3, 4), dummyBean.getSomeNumbers());\n-\n-        assertEquals(\"redhat\", dummyBean.getName2());\n-        assertEquals(\"default\", dummyBean.getUnset2());\n-        assertEquals(Arrays.asList(3, 2, 1), dummyBean.getSomeNumbers2());\n+        DummyProperties dummyProperties = dummyBean.dummyProperties;\n+        assertEquals(\"quarkus\", dummyProperties.name);\n+        assertEquals(\"default\", dummyProperties.unset);\n+        assertEquals(Arrays.asList(1, 2, 3, 4), dummyProperties.someNumbers);\n+\n+        DummyProperties dummyProperties2 = dummyBean.dummyProperties2;\n+        assertEquals(\"redhat\", dummyProperties2.name);\n+        assertEquals(\"default\", dummyProperties2.unset);\n+        assertEquals(Arrays.asList(3, 2, 1), dummyProperties2.someNumbers);\n     }\n \n     @Singleton\n"}}, {"oid": "dfe1a39cfe1f994f7f746b881e12442106b9499a", "url": "https://github.com/quarkusio/quarkus/commit/dfe1a39cfe1f994f7f746b881e12442106b9499a", "message": "Support overriding prefix of @ConfigProperties at the injection point\n\nResolves #9136\n\nCo-authored-by: Manyanda Chitimbo <manyanda.chitimbo@gmail.com>\nCo-authored-by: Martin Kouba <mkouba@redhat.com>", "committedDate": "2020-05-11T14:26:16Z", "type": "forcePushed"}, {"oid": "726977138e53ec51bb7b21c80612edbe78a64493", "url": "https://github.com/quarkusio/quarkus/commit/726977138e53ec51bb7b21c80612edbe78a64493", "message": "Support overriding prefix of @ConfigProperties at the injection point\n\nResolves #9136\n\nCo-authored-by: Manyanda Chitimbo <manyanda.chitimbo@gmail.com>\nCo-authored-by: Martin Kouba <mkouba@redhat.com>\nCo-authored-by: Guillaume Smet <guillaume.smet@gmail.com>", "committedDate": "2020-05-11T16:58:36Z", "type": "commit"}, {"oid": "726977138e53ec51bb7b21c80612edbe78a64493", "url": "https://github.com/quarkusio/quarkus/commit/726977138e53ec51bb7b21c80612edbe78a64493", "message": "Support overriding prefix of @ConfigProperties at the injection point\n\nResolves #9136\n\nCo-authored-by: Manyanda Chitimbo <manyanda.chitimbo@gmail.com>\nCo-authored-by: Martin Kouba <mkouba@redhat.com>\nCo-authored-by: Guillaume Smet <guillaume.smet@gmail.com>", "committedDate": "2020-05-11T16:58:36Z", "type": "forcePushed"}]}