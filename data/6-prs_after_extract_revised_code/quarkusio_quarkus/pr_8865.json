{"pr_number": 8865, "pr_title": "New fast-jar packaging format", "pr_createdAt": "2020-04-27T04:50:37Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/8865", "timeline": [{"oid": "259a6a66ef26913b8f032d9b5f5c81f35a99d3f8", "url": "https://github.com/quarkusio/quarkus/commit/259a6a66ef26913b8f032d9b5f5c81f35a99d3f8", "message": "New packaging format\n\nThis new format is now created in a subdirectory in the target dir.\n\nThis also introduces a new faster ClassLoader than improves startup\ntime by around 10%.", "committedDate": "2020-04-27T04:51:36Z", "type": "forcePushed"}, {"oid": "931d532bb6ea357840f435b574ecdfd128fd3b5d", "url": "https://github.com/quarkusio/quarkus/commit/931d532bb6ea357840f435b574ecdfd128fd3b5d", "message": "New packaging format\n\nThis new format is now created in a subdirectory in the target dir.\n\nThis also introduces a new faster ClassLoader than improves startup\ntime by around 10%.", "committedDate": "2020-05-07T22:54:11Z", "type": "forcePushed"}, {"oid": "d4a8944b436d9e9c137bd8929779e27b543b9543", "url": "https://github.com/quarkusio/quarkus/commit/d4a8944b436d9e9c137bd8929779e27b543b9543", "message": "New packaging format\n\nThis new format is now created in a subdirectory in the target dir.\n\nThis also introduces a new faster ClassLoader than improves startup\ntime by around 10%.", "committedDate": "2020-05-07T23:12:37Z", "type": "forcePushed"}, {"oid": "13695f57410805776433255a01317803614ad226", "url": "https://github.com/quarkusio/quarkus/commit/13695f57410805776433255a01317803614ad226", "message": "New packaging format\n\nThis new format is now created in a subdirectory in the target dir.\n\nThis also introduces a new faster ClassLoader than improves startup\ntime by around 10%.", "committedDate": "2020-05-08T01:01:54Z", "type": "forcePushed"}, {"oid": "352597aada42684abb979ceaefa39642cac8dc8c", "url": "https://github.com/quarkusio/quarkus/commit/352597aada42684abb979ceaefa39642cac8dc8c", "message": "New packaging format\n\nThis new format is now created in a subdirectory in the target dir.\n\nThis also introduces a new faster ClassLoader than improves startup\ntime by around 10%.", "committedDate": "2020-05-08T02:49:37Z", "type": "forcePushed"}, {"oid": "338feed118abe1a66480e6924f02d0c62fbae441", "url": "https://github.com/quarkusio/quarkus/commit/338feed118abe1a66480e6924f02d0c62fbae441", "message": "New packaging format\n\nThis new format is now created in a subdirectory in the target dir.\n\nThis also introduces a new faster ClassLoader than improves startup\ntime by around 10%.", "committedDate": "2020-05-11T02:23:43Z", "type": "forcePushed"}, {"oid": "8b82f81cd407520ae800300375693d348ad56ac5", "url": "https://github.com/quarkusio/quarkus/commit/8b82f81cd407520ae800300375693d348ad56ac5", "message": "New packaging format\n\nThis new format is now created in a subdirectory in the target dir.\n\nThis also introduces a new faster ClassLoader than improves startup\ntime by around 10%.", "committedDate": "2020-05-13T00:26:51Z", "type": "forcePushed"}, {"oid": "0ba1ce82c0e8933b1137e54eb96e79c021a409d6", "url": "https://github.com/quarkusio/quarkus/commit/0ba1ce82c0e8933b1137e54eb96e79c021a409d6", "message": "New packaging format\n\nThis new format is now created in a subdirectory in the target dir.\n\nThis also introduces a new faster ClassLoader than improves startup\ntime by around 10%.", "committedDate": "2020-05-13T01:47:05Z", "type": "forcePushed"}, {"oid": "395f07c53fec658276f5159a3498fdf98295c08a", "url": "https://github.com/quarkusio/quarkus/commit/395f07c53fec658276f5159a3498fdf98295c08a", "message": "New packaging format\n\nThis new format is now created in a subdirectory in the target dir.\n\nThis also introduces a new faster ClassLoader than improves startup\ntime by around 10%.", "committedDate": "2020-05-14T03:52:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk2MTU3Mg==", "url": "https://github.com/quarkusio/quarkus/pull/8865#discussion_r424961572", "bodyText": "Shouldn't this be throw new ClassNotFoundException(name);?", "author": "geoand", "createdAt": "2020-05-14T08:31:25Z", "path": "independent-projects/bootstrap/runner/src/main/java/io/quarkus/bootstrap/runner/RunnerClassLoader.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package io.quarkus.bootstrap.runner;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.security.ProtectionDomain;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.function.Function;\n+\n+/**\n+ * Classloader used for production application, using the multi jar strategy\n+ *\n+ */\n+public class RunnerClassLoader extends ClassLoader {\n+\n+    /**\n+     * A map of resources by dir name. Root dir/default package is represented by the empty string\n+     */\n+    private final Map<String, ClassLoadingResource[]> resourceDirectoryMap;\n+\n+    private final ConcurrentMap<ClassLoadingResource, ProtectionDomain> protectionDomains = new ConcurrentHashMap<>();\n+\n+    static {\n+        registerAsParallelCapable();\n+    }\n+\n+    RunnerClassLoader(ClassLoader parent, Map<String, ClassLoadingResource[]> resourceDirectoryMap) {\n+        super(parent);\n+        this.resourceDirectoryMap = resourceDirectoryMap;\n+    }\n+\n+    @Override\n+    protected Class<?> findClass(String name) throws ClassNotFoundException {\n+        String packageName = getPackageNameFromClassName(name);\n+        ClassLoadingResource[] resources;\n+        if (packageName == null) {\n+            resources = resourceDirectoryMap.get(\"\");\n+        } else {\n+            String dirName = packageName.replace(\".\", \"/\");\n+            resources = resourceDirectoryMap.get(dirName);\n+        }\n+        if (resources == null) {\n+            throw new ClassNotFoundException();", "originalCommit": "395f07c53fec658276f5159a3498fdf98295c08a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4b2b8369972e4b82a48a109f66adc9c9d20d620f", "chunk": "diff --git a/independent-projects/bootstrap/runner/src/main/java/io/quarkus/bootstrap/runner/RunnerClassLoader.java b/independent-projects/bootstrap/runner/src/main/java/io/quarkus/bootstrap/runner/RunnerClassLoader.java\nindex e54ffde0fd..c96dd8ec52 100644\n--- a/independent-projects/bootstrap/runner/src/main/java/io/quarkus/bootstrap/runner/RunnerClassLoader.java\n+++ b/independent-projects/bootstrap/runner/src/main/java/io/quarkus/bootstrap/runner/RunnerClassLoader.java\n\n@@ -45,7 +45,7 @@ public class RunnerClassLoader extends ClassLoader {\n             resources = resourceDirectoryMap.get(dirName);\n         }\n         if (resources == null) {\n-            throw new ClassNotFoundException();\n+            throw new ClassNotFoundException(name);\n         }\n         String classResource = name.replace(\".\", \"/\") + \".class\";\n         for (ClassLoadingResource resource : resources) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk2MTcwMA==", "url": "https://github.com/quarkusio/quarkus/pull/8865#discussion_r424961700", "bodyText": "Same comment as above", "author": "geoand", "createdAt": "2020-05-14T08:31:37Z", "path": "independent-projects/bootstrap/runner/src/main/java/io/quarkus/bootstrap/runner/RunnerClassLoader.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package io.quarkus.bootstrap.runner;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.security.ProtectionDomain;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.function.Function;\n+\n+/**\n+ * Classloader used for production application, using the multi jar strategy\n+ *\n+ */\n+public class RunnerClassLoader extends ClassLoader {\n+\n+    /**\n+     * A map of resources by dir name. Root dir/default package is represented by the empty string\n+     */\n+    private final Map<String, ClassLoadingResource[]> resourceDirectoryMap;\n+\n+    private final ConcurrentMap<ClassLoadingResource, ProtectionDomain> protectionDomains = new ConcurrentHashMap<>();\n+\n+    static {\n+        registerAsParallelCapable();\n+    }\n+\n+    RunnerClassLoader(ClassLoader parent, Map<String, ClassLoadingResource[]> resourceDirectoryMap) {\n+        super(parent);\n+        this.resourceDirectoryMap = resourceDirectoryMap;\n+    }\n+\n+    @Override\n+    protected Class<?> findClass(String name) throws ClassNotFoundException {\n+        String packageName = getPackageNameFromClassName(name);\n+        ClassLoadingResource[] resources;\n+        if (packageName == null) {\n+            resources = resourceDirectoryMap.get(\"\");\n+        } else {\n+            String dirName = packageName.replace(\".\", \"/\");\n+            resources = resourceDirectoryMap.get(dirName);\n+        }\n+        if (resources == null) {\n+            throw new ClassNotFoundException();\n+        }\n+        String classResource = name.replace(\".\", \"/\") + \".class\";\n+        for (ClassLoadingResource resource : resources) {\n+            byte[] data = resource.getResourceData(classResource);\n+            if (data == null) {\n+                continue;\n+            }\n+            definePackage(packageName, resources);\n+            return defineClass(name, data, 0, data.length,\n+                    protectionDomains.computeIfAbsent(resource, new Function<ClassLoadingResource, ProtectionDomain>() {\n+                        @Override\n+                        public ProtectionDomain apply(ClassLoadingResource ce) {\n+                            return ce.getProtectionDomain(RunnerClassLoader.this);\n+                        }\n+                    }));\n+        }\n+        throw new ClassNotFoundException();", "originalCommit": "395f07c53fec658276f5159a3498fdf98295c08a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4b2b8369972e4b82a48a109f66adc9c9d20d620f", "chunk": "diff --git a/independent-projects/bootstrap/runner/src/main/java/io/quarkus/bootstrap/runner/RunnerClassLoader.java b/independent-projects/bootstrap/runner/src/main/java/io/quarkus/bootstrap/runner/RunnerClassLoader.java\nindex e54ffde0fd..c96dd8ec52 100644\n--- a/independent-projects/bootstrap/runner/src/main/java/io/quarkus/bootstrap/runner/RunnerClassLoader.java\n+++ b/independent-projects/bootstrap/runner/src/main/java/io/quarkus/bootstrap/runner/RunnerClassLoader.java\n\n@@ -45,7 +45,7 @@ public class RunnerClassLoader extends ClassLoader {\n             resources = resourceDirectoryMap.get(dirName);\n         }\n         if (resources == null) {\n-            throw new ClassNotFoundException();\n+            throw new ClassNotFoundException(name);\n         }\n         String classResource = name.replace(\".\", \"/\") + \".class\";\n         for (ClassLoadingResource resource : resources) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk4MzA5Nw==", "url": "https://github.com/quarkusio/quarkus/pull/8865#discussion_r424983097", "bodyText": "Not really important, but maybe base-lib should be called boot-lib to better reflect what it's about? base-lib sounds a little to generic", "author": "geoand", "createdAt": "2020-05-14T09:04:14Z", "path": "core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/JarResultBuildStep.java", "diffHunk": "@@ -338,6 +346,148 @@ private JarBuildItem buildThinJar(CurateOutcomeBuildItem curateOutcomeBuildItem,\n         return new JarBuildItem(runnerJar, null, libDir);\n     }\n \n+    private JarBuildItem buildThinJar(CurateOutcomeBuildItem curateOutcomeBuildItem,\n+            OutputTargetBuildItem outputTargetBuildItem,\n+            TransformedClassesBuildItem transformedClasses,\n+            ApplicationArchivesBuildItem applicationArchivesBuildItem,\n+            PackageConfig packageConfig,\n+            ApplicationInfoBuildItem applicationInfo,\n+            List<GeneratedClassBuildItem> generatedClasses,\n+            List<GeneratedResourceBuildItem> generatedResources,\n+            MainClassBuildItem mainClassBuildItem) throws Exception {\n+\n+        Path buildDir = outputTargetBuildItem.getOutputDirectory()\n+                .resolve(outputTargetBuildItem.getBaseName());\n+        IoUtils.recursiveDelete(buildDir);\n+        Files.createDirectories(buildDir);\n+\n+        //unmodified 3rd party dependencies\n+        Path libDir = buildDir.resolve(\"lib\");\n+        Files.createDirectories(libDir);\n+        //parent first entries\n+        Path baseLib = buildDir.resolve(\"base-lib\");", "originalCommit": "395f07c53fec658276f5159a3498fdf98295c08a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4b2b8369972e4b82a48a109f66adc9c9d20d620f", "chunk": "diff --git a/core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/JarResultBuildStep.java b/core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/JarResultBuildStep.java\nindex fcbc512f51..36e7d9b712 100644\n--- a/core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/JarResultBuildStep.java\n+++ b/core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/JarResultBuildStep.java\n\n@@ -365,7 +365,7 @@ public class JarResultBuildStep {\n         Path libDir = buildDir.resolve(\"lib\");\n         Files.createDirectories(libDir);\n         //parent first entries\n-        Path baseLib = buildDir.resolve(\"base-lib\");\n+        Path baseLib = buildDir.resolve(\"boot-lib\");\n         Files.createDirectories(baseLib);\n \n         Path appDir = buildDir.resolve(\"app\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk5NzM2MQ==", "url": "https://github.com/quarkusio/quarkus/pull/8865#discussion_r424997361", "bodyText": "This is redundant", "author": "geoand", "createdAt": "2020-05-14T09:26:55Z", "path": "core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/JarResultBuildStep.java", "diffHunk": "@@ -338,6 +346,148 @@ private JarBuildItem buildThinJar(CurateOutcomeBuildItem curateOutcomeBuildItem,\n         return new JarBuildItem(runnerJar, null, libDir);\n     }\n \n+    private JarBuildItem buildThinJar(CurateOutcomeBuildItem curateOutcomeBuildItem,\n+            OutputTargetBuildItem outputTargetBuildItem,\n+            TransformedClassesBuildItem transformedClasses,\n+            ApplicationArchivesBuildItem applicationArchivesBuildItem,\n+            PackageConfig packageConfig,\n+            ApplicationInfoBuildItem applicationInfo,\n+            List<GeneratedClassBuildItem> generatedClasses,\n+            List<GeneratedResourceBuildItem> generatedResources,\n+            MainClassBuildItem mainClassBuildItem) throws Exception {\n+\n+        Path buildDir = outputTargetBuildItem.getOutputDirectory()\n+                .resolve(outputTargetBuildItem.getBaseName());\n+        IoUtils.recursiveDelete(buildDir);\n+        Files.createDirectories(buildDir);\n+\n+        //unmodified 3rd party dependencies\n+        Path libDir = buildDir.resolve(\"lib\");\n+        Files.createDirectories(libDir);\n+        //parent first entries\n+        Path baseLib = buildDir.resolve(\"base-lib\");\n+        Files.createDirectories(baseLib);\n+\n+        Path appDir = buildDir.resolve(\"app\");\n+        Files.createDirectories(appDir);\n+\n+        Path quarkus = buildDir.resolve(\"quarkus\");\n+        Files.createDirectories(quarkus);\n+\n+        List<Path> jars = new ArrayList<>();\n+        //we process in order of priority\n+        //transformed classes first\n+        if (!transformedClasses.getTransformedClassesByJar().isEmpty()) {\n+            Path transformedZip = quarkus.resolve(\"transformed-bytecode.jar\");\n+            jars.add(transformedZip);\n+            try (FileSystem out = ZipUtils.newZip(transformedZip)) {\n+                for (Set<TransformedClassesBuildItem.TransformedClass> transformedSet : transformedClasses\n+                        .getTransformedClassesByJar().values()) {\n+                    for (TransformedClassesBuildItem.TransformedClass transformed : transformedSet) {\n+                        Path target = out.getPath(transformed.getFileName());\n+                        Files.createDirectories(target.getParent());\n+                        Files.write(target, transformed.getData());\n+                    }\n+                }\n+            }\n+        }\n+        //now generated classes and resources\n+        Path generatedZip = quarkus.resolve(\"generated-bytecode.jar\");\n+        jars.add(generatedZip);\n+        try (FileSystem out = ZipUtils.newZip(generatedZip)) {\n+            for (GeneratedClassBuildItem i : generatedClasses) {\n+                String fileName = i.getName().replace(\".\", \"/\") + \".class\";\n+                Path target = out.getPath(fileName);\n+                Files.createDirectories(target.getParent());\n+                Files.write(target, i.getClassData());\n+            }\n+\n+            for (GeneratedResourceBuildItem i : generatedResources) {\n+                Path target = out.getPath(i.getName());\n+                Files.createDirectories(target.getParent());\n+                Files.write(target, i.getClassData());\n+            }\n+        }\n+        //now the application classes\n+        Path runnerJar = appDir\n+                .resolve(outputTargetBuildItem.getBaseName() + \".jar\");\n+        jars.add(runnerJar);\n+\n+        try (FileSystem runnerZipFs = ZipUtils.newZip(runnerJar)) {\n+            for (Path root : applicationArchivesBuildItem.getRootArchive().getRootDirs()) {\n+                copyFiles(root, runnerZipFs, null);\n+            }\n+        }\n+\n+        StringBuilder classPath = new StringBuilder();\n+        for (AppDependency appDep : curateOutcomeBuildItem.getEffectiveModel().getUserDependencies()) {\n+            final AppArtifact depArtifact = appDep.getArtifact();\n+\n+            // Exclude files that are not jars (typically, we can have XML files here, see https://github.com/quarkusio/quarkus/issues/2852)\n+            if (!isAppDepAJar(depArtifact)) {\n+                continue;\n+            }\n+\n+            for (Path resolvedDep : depArtifact.getPaths()) {\n+                if (!Files.isDirectory(resolvedDep)) {\n+                    if (curateOutcomeBuildItem.getEffectiveModel().getParentFirstArtifacts()\n+                            .contains(depArtifact.getKey())) {\n+                        final String fileName = depArtifact.getGroupId() + \".\" + resolvedDep.getFileName();\n+                        final Path targetPath = baseLib.resolve(fileName);\n+                        Files.copy(resolvedDep, targetPath, StandardCopyOption.REPLACE_EXISTING);\n+                        classPath.append(\" base-lib/\" + fileName);\n+                    } else {\n+                        final String fileName = depArtifact.getGroupId() + \".\" + resolvedDep.getFileName();\n+                        final Path targetPath = libDir.resolve(fileName);\n+                        Files.copy(resolvedDep, targetPath, StandardCopyOption.REPLACE_EXISTING);\n+                        jars.add(targetPath);\n+                    }\n+                } else {\n+                    // This case can happen when we are building a jar from inside the Quarkus repository\n+                    // and Quarkus Bootstrap's localProjectDiscovery has been set to true. In such a case\n+                    // the non-jar dependencies are the Quarkus dependencies picked up on the file system\n+                    // these should never be parent first\n+\n+                    final String fileName = depArtifact.getGroupId() + \".\" + resolvedDep.getFileName();\n+                    final Path targetPath = libDir.resolve(fileName);\n+                    jars.add(targetPath);\n+                    try (FileSystem runnerZipFs = ZipUtils.newZip(targetPath)) {\n+                        Files.walkFileTree(resolvedDep, EnumSet.of(FileVisitOption.FOLLOW_LINKS), Integer.MAX_VALUE,\n+                                new SimpleFileVisitor<Path>() {\n+                                    @Override\n+                                    public FileVisitResult visitFile(Path file, BasicFileAttributes attrs)\n+                                            throws IOException {\n+                                        final Path relativePath = resolvedDep.relativize(file);\n+                                        final Path targetPath = runnerZipFs.getPath(relativePath.toString());\n+                                        Files.createDirectories(targetPath.getParent());\n+                                        Files.copy(file, targetPath);\n+                                        return FileVisitResult.CONTINUE;\n+                                    }\n+                                });\n+                    }\n+                }\n+            }\n+        }\n+\n+        Path initJar = buildDir.resolve(\"quarkus-run.jar\");\n+        try (FileSystem runnerZipFs = ZipUtils.newZip(initJar)) {\n+            AppArtifact appArtifact = curateOutcomeBuildItem.getEffectiveModel().getAppArtifact();\n+            generateManifest(runnerZipFs, classPath.toString(), packageConfig, appArtifact, QuarkusEntryPoint.class.getName(),\n+                    applicationInfo);\n+            Path appInfo = runnerZipFs.getPath(QuarkusEntryPoint.QUARKUS_APPLICATION_DAT);\n+            try (OutputStream out = wrapForJDK8232879(Files.newOutputStream(appInfo, DEFAULT_OPEN_OPTIONS))) {\n+                ByteArrayOutputStream bs = new ByteArrayOutputStream();\n+                SerializedApplication.write(bs, mainClassBuildItem.getClassName(), buildDir, jars);\n+                out.write(bs.toByteArray());\n+                out.flush();\n+            }\n+            runnerZipFs.close();", "originalCommit": "395f07c53fec658276f5159a3498fdf98295c08a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4b2b8369972e4b82a48a109f66adc9c9d20d620f", "chunk": "diff --git a/core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/JarResultBuildStep.java b/core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/JarResultBuildStep.java\nindex fcbc512f51..36e7d9b712 100644\n--- a/core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/JarResultBuildStep.java\n+++ b/core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/JarResultBuildStep.java\n\n@@ -365,7 +365,7 @@ public class JarResultBuildStep {\n         Path libDir = buildDir.resolve(\"lib\");\n         Files.createDirectories(libDir);\n         //parent first entries\n-        Path baseLib = buildDir.resolve(\"base-lib\");\n+        Path baseLib = buildDir.resolve(\"boot-lib\");\n         Files.createDirectories(baseLib);\n \n         Path appDir = buildDir.resolve(\"app\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk5NzU2MQ==", "url": "https://github.com/quarkusio/quarkus/pull/8865#discussion_r424997561", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    classPath.append(\" base-lib/\" + fileName);\n          \n          \n            \n                                    classPath.append(\" base-lib/\").append(fileName);", "author": "geoand", "createdAt": "2020-05-14T09:27:13Z", "path": "core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/JarResultBuildStep.java", "diffHunk": "@@ -338,6 +346,148 @@ private JarBuildItem buildThinJar(CurateOutcomeBuildItem curateOutcomeBuildItem,\n         return new JarBuildItem(runnerJar, null, libDir);\n     }\n \n+    private JarBuildItem buildThinJar(CurateOutcomeBuildItem curateOutcomeBuildItem,\n+            OutputTargetBuildItem outputTargetBuildItem,\n+            TransformedClassesBuildItem transformedClasses,\n+            ApplicationArchivesBuildItem applicationArchivesBuildItem,\n+            PackageConfig packageConfig,\n+            ApplicationInfoBuildItem applicationInfo,\n+            List<GeneratedClassBuildItem> generatedClasses,\n+            List<GeneratedResourceBuildItem> generatedResources,\n+            MainClassBuildItem mainClassBuildItem) throws Exception {\n+\n+        Path buildDir = outputTargetBuildItem.getOutputDirectory()\n+                .resolve(outputTargetBuildItem.getBaseName());\n+        IoUtils.recursiveDelete(buildDir);\n+        Files.createDirectories(buildDir);\n+\n+        //unmodified 3rd party dependencies\n+        Path libDir = buildDir.resolve(\"lib\");\n+        Files.createDirectories(libDir);\n+        //parent first entries\n+        Path baseLib = buildDir.resolve(\"base-lib\");\n+        Files.createDirectories(baseLib);\n+\n+        Path appDir = buildDir.resolve(\"app\");\n+        Files.createDirectories(appDir);\n+\n+        Path quarkus = buildDir.resolve(\"quarkus\");\n+        Files.createDirectories(quarkus);\n+\n+        List<Path> jars = new ArrayList<>();\n+        //we process in order of priority\n+        //transformed classes first\n+        if (!transformedClasses.getTransformedClassesByJar().isEmpty()) {\n+            Path transformedZip = quarkus.resolve(\"transformed-bytecode.jar\");\n+            jars.add(transformedZip);\n+            try (FileSystem out = ZipUtils.newZip(transformedZip)) {\n+                for (Set<TransformedClassesBuildItem.TransformedClass> transformedSet : transformedClasses\n+                        .getTransformedClassesByJar().values()) {\n+                    for (TransformedClassesBuildItem.TransformedClass transformed : transformedSet) {\n+                        Path target = out.getPath(transformed.getFileName());\n+                        Files.createDirectories(target.getParent());\n+                        Files.write(target, transformed.getData());\n+                    }\n+                }\n+            }\n+        }\n+        //now generated classes and resources\n+        Path generatedZip = quarkus.resolve(\"generated-bytecode.jar\");\n+        jars.add(generatedZip);\n+        try (FileSystem out = ZipUtils.newZip(generatedZip)) {\n+            for (GeneratedClassBuildItem i : generatedClasses) {\n+                String fileName = i.getName().replace(\".\", \"/\") + \".class\";\n+                Path target = out.getPath(fileName);\n+                Files.createDirectories(target.getParent());\n+                Files.write(target, i.getClassData());\n+            }\n+\n+            for (GeneratedResourceBuildItem i : generatedResources) {\n+                Path target = out.getPath(i.getName());\n+                Files.createDirectories(target.getParent());\n+                Files.write(target, i.getClassData());\n+            }\n+        }\n+        //now the application classes\n+        Path runnerJar = appDir\n+                .resolve(outputTargetBuildItem.getBaseName() + \".jar\");\n+        jars.add(runnerJar);\n+\n+        try (FileSystem runnerZipFs = ZipUtils.newZip(runnerJar)) {\n+            for (Path root : applicationArchivesBuildItem.getRootArchive().getRootDirs()) {\n+                copyFiles(root, runnerZipFs, null);\n+            }\n+        }\n+\n+        StringBuilder classPath = new StringBuilder();\n+        for (AppDependency appDep : curateOutcomeBuildItem.getEffectiveModel().getUserDependencies()) {\n+            final AppArtifact depArtifact = appDep.getArtifact();\n+\n+            // Exclude files that are not jars (typically, we can have XML files here, see https://github.com/quarkusio/quarkus/issues/2852)\n+            if (!isAppDepAJar(depArtifact)) {\n+                continue;\n+            }\n+\n+            for (Path resolvedDep : depArtifact.getPaths()) {\n+                if (!Files.isDirectory(resolvedDep)) {\n+                    if (curateOutcomeBuildItem.getEffectiveModel().getParentFirstArtifacts()\n+                            .contains(depArtifact.getKey())) {\n+                        final String fileName = depArtifact.getGroupId() + \".\" + resolvedDep.getFileName();\n+                        final Path targetPath = baseLib.resolve(fileName);\n+                        Files.copy(resolvedDep, targetPath, StandardCopyOption.REPLACE_EXISTING);\n+                        classPath.append(\" base-lib/\" + fileName);", "originalCommit": "395f07c53fec658276f5159a3498fdf98295c08a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4b2b8369972e4b82a48a109f66adc9c9d20d620f", "chunk": "diff --git a/core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/JarResultBuildStep.java b/core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/JarResultBuildStep.java\nindex fcbc512f51..36e7d9b712 100644\n--- a/core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/JarResultBuildStep.java\n+++ b/core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/JarResultBuildStep.java\n\n@@ -365,7 +365,7 @@ public class JarResultBuildStep {\n         Path libDir = buildDir.resolve(\"lib\");\n         Files.createDirectories(libDir);\n         //parent first entries\n-        Path baseLib = buildDir.resolve(\"base-lib\");\n+        Path baseLib = buildDir.resolve(\"boot-lib\");\n         Files.createDirectories(baseLib);\n \n         Path appDir = buildDir.resolve(\"app\");\n"}}, {"oid": "4b2b8369972e4b82a48a109f66adc9c9d20d620f", "url": "https://github.com/quarkusio/quarkus/commit/4b2b8369972e4b82a48a109f66adc9c9d20d620f", "message": "New packaging format\n\nThis new format is now created in a subdirectory in the target dir.\n\nThis also introduces a new faster ClassLoader than improves startup\ntime by around 10%.", "committedDate": "2020-05-14T12:02:12Z", "type": "forcePushed"}, {"oid": "966b5045e8f874060be06c6c7aaa0a074a93bd9b", "url": "https://github.com/quarkusio/quarkus/commit/966b5045e8f874060be06c6c7aaa0a074a93bd9b", "message": "New packaging format\n\nThis new format is now created in a subdirectory in the target dir.\n\nThis also introduces a new faster ClassLoader than improves startup\ntime by around 10%.", "committedDate": "2020-05-15T05:29:55Z", "type": "commit"}, {"oid": "966b5045e8f874060be06c6c7aaa0a074a93bd9b", "url": "https://github.com/quarkusio/quarkus/commit/966b5045e8f874060be06c6c7aaa0a074a93bd9b", "message": "New packaging format\n\nThis new format is now created in a subdirectory in the target dir.\n\nThis also introduces a new faster ClassLoader than improves startup\ntime by around 10%.", "committedDate": "2020-05-15T05:29:55Z", "type": "forcePushed"}, {"oid": "97a9a461ed22013079a2b8bcafddb57e50e7fb0e", "url": "https://github.com/quarkusio/quarkus/commit/97a9a461ed22013079a2b8bcafddb57e50e7fb0e", "message": "Fix JibProcessor to work with fast-jar", "committedDate": "2020-05-15T05:37:26Z", "type": "commit"}]}