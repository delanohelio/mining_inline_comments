{"pr_number": 10968, "pr_title": "Funqy HTTP query parameter binding", "pr_createdAt": "2020-07-25T19:43:56Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/10968", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY4ODk4Mg==", "url": "https://github.com/quarkusio/quarkus/pull/10968#discussion_r460688982", "bodyText": "I didn't saw any test with OffsetDateTime.", "author": "loicmathieu", "createdAt": "2020-07-27T07:12:48Z", "path": "extensions/funqy/funqy-server-common/runtime/src/main/java/io/quarkus/funqy/runtime/query/QueryObjectMapper.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package io.quarkus.funqy.runtime.query;\n+\n+import java.lang.reflect.Type;\n+import java.time.OffsetDateTime;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import io.quarkus.arc.impl.Reflections;\n+\n+/**\n+ * Turn URI parameter map into an object\n+ *\n+ */\n+public class QueryObjectMapper {\n+    Function<String, Object> extractor(Type type) {\n+        return extractor(Reflections.getRawType(type));\n+    }\n+\n+    Function<String, Object> extractor(Class clz) {\n+        if (String.class.equals(clz)) {\n+            return (strVal) -> {\n+                return strVal;\n+            };\n+        }\n+        if (clz.equals(long.class) || clz.equals(Long.class)) {\n+            return (strVal) -> {\n+                return Long.valueOf(strVal);\n+            };\n+        }\n+        if (clz.equals(int.class) || clz.equals(Integer.class)) {\n+            return (strVal) -> {\n+                return Integer.valueOf(strVal);\n+            };\n+        }\n+        if (clz.equals(short.class) || clz.equals(Short.class)) {\n+            return (strVal) -> {\n+                return Short.valueOf(strVal);\n+            };\n+        }\n+        if (clz.equals(float.class) || clz.equals(Float.class)) {\n+            return (strVal) -> {\n+                return Float.valueOf(strVal);\n+            };\n+        }\n+        if (clz.equals(double.class) || clz.equals(Double.class)) {\n+            return (strVal) -> {\n+                return Double.valueOf(strVal);\n+            };\n+        }\n+        if (clz.equals(boolean.class) || clz.equals(Boolean.class)) {\n+            return (strVal) -> {\n+                return Boolean.valueOf(strVal);\n+            };\n+        }\n+        if (clz.equals(byte.class) || clz.equals(Byte.class)) {\n+            return (strVal) -> {\n+                return Byte.valueOf(strVal);\n+            };\n+        }\n+        if (clz.equals(OffsetDateTime.class)) {\n+            return (strVal) -> {\n+                return OffsetDateTime.parse(strVal);\n+            };\n+        }", "originalCommit": "c5fd09686d1a6fb530880f55a83c98842a2ba8b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYzMzc0MQ==", "url": "https://github.com/quarkusio/quarkus/pull/10968#discussion_r462633741", "bodyText": "test added", "author": "patriot1burke", "createdAt": "2020-07-29T22:48:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY4ODk4Mg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "bfdddacaba1ce38ae766bfe03950f7057bcfacf3", "url": "https://github.com/quarkusio/quarkus/commit/bfdddacaba1ce38ae766bfe03950f7057bcfacf3", "message": "Funqy HTTP query parameter support\n\nfunqy query param list, set, map\n\nquery param doc\n\nfunqy yaml\n\nUpdate docs/src/main/asciidoc/funqy-http.adoc\n\nCo-authored-by: Lo\u00efc Mathieu <loikeseke@gmail.com>\n\noffset datetime", "committedDate": "2020-07-29T22:47:45Z", "type": "commit"}, {"oid": "bfdddacaba1ce38ae766bfe03950f7057bcfacf3", "url": "https://github.com/quarkusio/quarkus/commit/bfdddacaba1ce38ae766bfe03950f7057bcfacf3", "message": "Funqy HTTP query parameter support\n\nfunqy query param list, set, map\n\nquery param doc\n\nfunqy yaml\n\nUpdate docs/src/main/asciidoc/funqy-http.adoc\n\nCo-authored-by: Lo\u00efc Mathieu <loikeseke@gmail.com>\n\noffset datetime", "committedDate": "2020-07-29T22:47:45Z", "type": "forcePushed"}]}