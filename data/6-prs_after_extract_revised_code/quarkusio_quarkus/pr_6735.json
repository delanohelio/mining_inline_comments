{"pr_number": 6735, "pr_title": "Micrometer compatibility mode for Metrics", "pr_createdAt": "2020-01-23T07:51:31Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/6735", "timeline": [{"oid": "bddc9c60646ead7bd92d56d1ce829ed5bc362db0", "url": "https://github.com/quarkusio/quarkus/commit/bddc9c60646ead7bd92d56d1ce829ed5bc362db0", "message": "Micrometer compatibility mode for Metrics", "committedDate": "2020-01-23T07:40:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA0MTAyNQ==", "url": "https://github.com/quarkusio/quarkus/pull/6735#discussion_r371041025", "bodyText": "thanks \ud83d\udc4d", "author": "wedamartinez", "createdAt": "2020-01-27T00:44:25Z", "path": "extensions/smallrye-metrics/deployment/src/main/java/io/quarkus/smallrye/metrics/deployment/SmallRyeMetricsProcessor.java", "diffHunk": "@@ -103,6 +103,15 @@\n         @ConfigItem(name = \"extensions.enabled\", defaultValue = \"true\")\n         public boolean extensionsEnabled;\n \n+        /**\n+         * Apply Micrometer compatibility mode, where instead of regular 'base' and 'vendor' metrics,\n+         * Quarkus exposes the same 'jvm' metrics that Micrometer does. Application metrics are unaffected by this mode.\n+         * The use case is to facilitate migration from Micrometer-based metrics, because original dashboards for JVM metrics\n+         * will continue working without having to rewrite them.", "originalCommit": "bddc9c60646ead7bd92d56d1ce829ed5bc362db0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY0NzU3NA==", "url": "https://github.com/quarkusio/quarkus/pull/6735#discussion_r371647574", "bodyText": "I was just about to ask how the code knows to not expose metrics in GraalVM mode and stumbled upon this before I could :).\n\ud83d\udc4d", "author": "geoand", "createdAt": "2020-01-28T07:47:36Z", "path": "extensions/smallrye-metrics/runtime/src/main/java/io/quarkus/smallrye/metrics/runtime/SmallRyeMetricsRecorder.java", "diffHunk": "@@ -583,4 +604,193 @@ private void memoryPoolMetrics(MetricRegistry registry, List<String> names) {\n         }\n     }\n \n+    private void micrometerJvmGcMetrics(MetricRegistry registry, List<String> names, ShutdownContext shutdown) {\n+        if (!ImageInfo.inImageCode()) {", "originalCommit": "bddc9c60646ead7bd92d56d1ce829ed5bc362db0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}