{"pr_number": 9783, "pr_title": "updated the cli to work similar as the maven and gradle tools", "pr_createdAt": "2020-06-04T11:46:53Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/9783", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE5OTIxNw==", "url": "https://github.com/quarkusio/quarkus/pull/9783#discussion_r435199217", "bodyText": "I guess, it's fine to keep as you are doing a refactoring here but this getGlobalDefault() should not be used. We should get rid of it ASAP. You may be the only one using it now.", "author": "aloubyansky", "createdAt": "2020-06-04T12:00:32Z", "path": "devtools/aesh/src/main/java/io/quarkus/cli/commands/AddExtensionCommand.java", "diffHunk": "@@ -1,73 +1,74 @@\n package io.quarkus.cli.commands;\n \n+import java.io.IOException;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n-import java.util.Collections;\n+import java.util.HashSet;\n import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n import org.aesh.command.Command;\n import org.aesh.command.CommandDefinition;\n import org.aesh.command.CommandException;\n import org.aesh.command.CommandResult;\n import org.aesh.command.invocation.CommandInvocation;\n-import org.aesh.command.option.Argument;\n import org.aesh.command.option.Option;\n+import org.aesh.command.option.OptionList;\n import org.aesh.io.Resource;\n+import org.aesh.selector.MultiSelect;\n \n import io.quarkus.dependencies.Extension;\n import io.quarkus.devtools.project.QuarkusProject;\n-import io.quarkus.platform.descriptor.QuarkusPlatformDescriptor;\n import io.quarkus.platform.tools.config.QuarkusPlatformConfig;\n \n-/**\n- * @author <a href=\"mailto:stalep@gmail.com\">St\u00e5le Pedersen</a>\n- */\n-@CommandDefinition(name = \"add-extension\", description = \"Adds extensions to a project\")\n+@CommandDefinition(name = AddExtensions.NAME, description = \"Adds extensions to a project\")\n public class AddExtensionCommand implements Command<CommandInvocation> {\n \n-    @Option(shortName = 'h', hasValue = false, overrideRequired = true)\n-    private boolean help;\n+    @OptionList(shortName = 'e', //selector = SelectorType.SELECTIONS,\n+            completer = ExtensionCompleter.class, description = \"Name of the extension that will be added to the project\")\n+    private Set<String> extensions;\n \n-    @Option(shortName = 'e', required = true, description = \"Name of the extension that will be added to the project\")\n-    private String extension;\n-\n-    @Argument(description = \"path to the project\", required = true)\n+    @Option(shortName = 'p', description = \"Path to the project, if not set it will use the current working directory\")\n     private Resource path;\n \n     @Override\n-    public CommandResult execute(CommandInvocation commandInvocation) throws CommandException, InterruptedException {\n-        if (help) {\n-            commandInvocation.println(commandInvocation.getHelpInfo(\"quarkus add-extension\"));\n-            return CommandResult.SUCCESS;\n-        } else {\n+    public CommandResult execute(CommandInvocation invocation) throws CommandException, InterruptedException {\n+\n+        try {\n+            Path projectDirectory = path != null ? Paths.get(path.getAbsolutePath())\n+                    : Paths.get(System.getProperty(\"user.dir\"));\n+\n+            QuarkusProject quarkusProject = QuarkusProject.resolveExistingProject(projectDirectory,\n+                    QuarkusPlatformConfig.getGlobalDefault().getPlatformDescriptor());", "originalCommit": "df03348cca2c006daf459b6e4ea823ae448b2386", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIxMDg0NQ==", "url": "https://github.com/quarkusio/quarkus/pull/9783#discussion_r435210845", "bodyText": "I see, what is the preferred way of doing it?\nThere are quite a few changes since I last looked at this so I just used what I thought worked :)", "author": "stalep", "createdAt": "2020-06-04T12:22:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE5OTIxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIxMjg1Mw==", "url": "https://github.com/quarkusio/quarkus/pull/9783#discussion_r435212853", "bodyText": "We are missing a convenient abstraction for that, which is going to complicate it for you and any non-maven/gradle tool. For Maven projects we do that in BuildFileMojoBase (look how we initialize platformDescr). In Gradle that would be QuarkusPlatformTask.platformDescriptor().", "author": "aloubyansky", "createdAt": "2020-06-04T12:26:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE5OTIxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIyNzc4Mw==", "url": "https://github.com/quarkusio/quarkus/pull/9783#discussion_r435227783", "bodyText": "I see, yes it is a bit difficult on the CLI side since the project can be either Maven/Gradle. Some moons ago I used BuildFile/BuildTool to try to figure out what it was. If we could have a fairly simple way to do that it would be helpful for the CLI.", "author": "stalep", "createdAt": "2020-06-04T12:51:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE5OTIxNw=="}], "type": "inlineReview", "revised_code": {"commit": "2a7ef1c0ef39618ca052f30c094c4cddc4f40d07", "chunk": "diff --git a/devtools/aesh/src/main/java/io/quarkus/cli/commands/AddExtensionCommand.java b/devtools/aesh/src/main/java/io/quarkus/cli/commands/InstallExtensionCommand.java\nsimilarity index 72%\nrename from devtools/aesh/src/main/java/io/quarkus/cli/commands/AddExtensionCommand.java\nrename to devtools/aesh/src/main/java/io/quarkus/cli/commands/InstallExtensionCommand.java\nindex 8c5beb5fb7..aa9f8696f1 100644\n--- a/devtools/aesh/src/main/java/io/quarkus/cli/commands/AddExtensionCommand.java\n+++ b/devtools/aesh/src/main/java/io/quarkus/cli/commands/InstallExtensionCommand.java\n\n@@ -13,25 +13,27 @@ import org.aesh.command.CommandDefinition;\n import org.aesh.command.CommandException;\n import org.aesh.command.CommandResult;\n import org.aesh.command.invocation.CommandInvocation;\n+import org.aesh.command.option.Arguments;\n import org.aesh.command.option.Option;\n-import org.aesh.command.option.OptionList;\n import org.aesh.io.Resource;\n import org.aesh.selector.MultiSelect;\n \n import io.quarkus.dependencies.Extension;\n+import io.quarkus.devtools.commands.AddExtensions;\n+import io.quarkus.devtools.commands.data.QuarkusCommandException;\n+import io.quarkus.devtools.commands.data.QuarkusCommandOutcome;\n import io.quarkus.devtools.project.QuarkusProject;\n import io.quarkus.platform.tools.config.QuarkusPlatformConfig;\n \n-@CommandDefinition(name = AddExtensions.NAME, description = \"Adds extensions to a project\")\n-public class AddExtensionCommand implements Command<CommandInvocation> {\n-\n-    @OptionList(shortName = 'e', //selector = SelectorType.SELECTIONS,\n-            completer = ExtensionCompleter.class, description = \"Name of the extension that will be added to the project\")\n-    private Set<String> extensions;\n+@CommandDefinition(name = \"install\", description = \"Install extensions to a project\")\n+public class InstallExtensionCommand implements Command<CommandInvocation> {\n \n     @Option(shortName = 'p', description = \"Path to the project, if not set it will use the current working directory\")\n     private Resource path;\n \n+    @Arguments(completer = ExtensionCompleter.class, description = \"Name of the extension that will be added to the project\")\n+    private Set<String> extensions;\n+\n     @Override\n     public CommandResult execute(CommandInvocation invocation) throws CommandException, InterruptedException {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU4MTM4OA==", "url": "https://github.com/quarkusio/quarkus/pull/9783#discussion_r435581388", "bodyText": "any reason this is not a quarkus command mode main ?", "author": "maxandersen", "createdAt": "2020-06-04T22:12:41Z", "path": "devtools/aesh/src/main/java/io/quarkus/cli/QuarkusCli.java", "diffHunk": "@@ -1,59 +1,17 @@\n package io.quarkus.cli;\n \n-import java.io.IOException;\n+import org.aesh.AeshRuntimeRunner;\n \n-import org.aesh.command.AeshCommandRuntimeBuilder;\n-import org.aesh.command.CommandException;\n-import org.aesh.command.CommandNotFoundException;\n-import org.aesh.command.CommandRuntime;\n-import org.aesh.command.impl.registry.AeshCommandRegistryBuilder;\n-import org.aesh.command.parser.CommandLineParserException;\n-import org.aesh.command.registry.CommandRegistryException;\n-import org.aesh.command.validator.CommandValidatorException;\n-import org.aesh.command.validator.OptionValidatorException;\n-\n-import io.quarkus.cli.commands.QuarkusCommand;\n+import io.quarkus.cli.commands.QuarkusBaseCommand;\n \n public class QuarkusCli {\n \n-    public static void main(String[] args) throws CommandRegistryException {\n-        CommandRuntime runtime = AeshCommandRuntimeBuilder\n-                .builder()\n-                .commandRegistry(AeshCommandRegistryBuilder.builder().command(QuarkusCommand.class).create())\n-                .build();\n-\n-        if (args.length > 0) {\n-            StringBuilder sb = new StringBuilder(QuarkusCommand.COMMAND_NAME).append(\" \");\n-            if (args.length == 1) {\n-                sb.append(args[0]);\n-            } else {\n-                for (String arg : args) {\n-                    if (arg.indexOf(' ') >= 0) {\n-                        sb.append('\"').append(arg).append(\"\\\" \");\n-                    } else {\n-                        sb.append(arg).append(' ');\n-                    }\n-                }\n-            }\n-\n-            try {\n-                runtime.executeCommand(sb.toString());\n-            } catch (CommandNotFoundException e) {\n-                System.err.println(\"Command not found: \" + sb.toString());\n-            } catch (CommandException | CommandLineParserException | CommandValidatorException | OptionValidatorException e) {\n-                showHelpIfNeeded(runtime, e);\n-            } catch (InterruptedException | IOException e) {\n-                System.err.println(e.getMessage());\n-            }\n-        } else {\n-            showHelpIfNeeded(runtime, null);\n-        }\n+    public static void main(String[] args) {", "originalCommit": "df03348cca2c006daf459b6e4ea823ae448b2386", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU4MTYyNw==", "url": "https://github.com/quarkusio/quarkus/pull/9783#discussion_r435581627", "bodyText": "ah neve rmind - this whole sub project is setup as non-quarkus....as command mode didn't exist then. something for future update.", "author": "maxandersen", "createdAt": "2020-06-04T22:13:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU4MTM4OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU4NDEyNw==", "url": "https://github.com/quarkusio/quarkus/pull/9783#discussion_r435584127", "bodyText": "this would be ignoring ./gradlew / gradle wrapper", "author": "maxandersen", "createdAt": "2020-06-04T22:20:14Z", "path": "devtools/aesh/src/main/java/io/quarkus/cli/commands/ExecuteUtil.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package io.quarkus.cli.commands;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.regex.Pattern;\n+import java.util.stream.Stream;\n+\n+import org.aesh.command.invocation.CommandInvocation;\n+import org.apache.maven.shared.invoker.DefaultInvocationRequest;\n+import org.apache.maven.shared.invoker.DefaultInvoker;\n+import org.apache.maven.shared.invoker.InvocationRequest;\n+import org.apache.maven.shared.invoker.InvocationResult;\n+import org.apache.maven.shared.invoker.Invoker;\n+import org.apache.maven.shared.invoker.MavenInvocationException;\n+\n+public class ExecuteUtil {\n+\n+    public static void executeGradle(File projectDirectory, CommandInvocation invocation, String buildTarget) {\n+        String gradleExecutable = findExecutable(\"gradle\");", "originalCommit": "df03348cca2c006daf459b6e4ea823ae448b2386", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU4NDgzMQ==", "url": "https://github.com/quarkusio/quarkus/pull/9783#discussion_r435584831", "bodyText": "nm - wrapper is done inanother method.", "author": "maxandersen", "createdAt": "2020-06-04T22:22:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU4NDEyNw=="}], "type": "inlineReview", "revised_code": {"commit": "2a7ef1c0ef39618ca052f30c094c4cddc4f40d07", "chunk": "diff --git a/devtools/aesh/src/main/java/io/quarkus/cli/commands/ExecuteUtil.java b/devtools/aesh/src/main/java/io/quarkus/cli/commands/ExecuteUtil.java\nindex f4fc207267..4a616f41f1 100644\n--- a/devtools/aesh/src/main/java/io/quarkus/cli/commands/ExecuteUtil.java\n+++ b/devtools/aesh/src/main/java/io/quarkus/cli/commands/ExecuteUtil.java\n\n@@ -22,7 +22,8 @@ import org.apache.maven.shared.invoker.MavenInvocationException;\n \n public class ExecuteUtil {\n \n-    public static void executeGradle(File projectDirectory, CommandInvocation invocation, String buildTarget) {\n+    public static void executeGradle(File projectDirectory, CommandInvocation invocation, String buildTarget)\n+            throws InterruptedException {\n         String gradleExecutable = findExecutable(\"gradle\");\n         if (gradleExecutable == null) {\n             invocation.println(\"unable to find the gradle executable, is it in your path?\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU4NDIyOA==", "url": "https://github.com/quarkusio/quarkus/pull/9783#discussion_r435584228", "bodyText": "this would be ignoring ./mvnw / maven wrapper", "author": "maxandersen", "createdAt": "2020-06-04T22:20:32Z", "path": "devtools/aesh/src/main/java/io/quarkus/cli/commands/ExecuteUtil.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package io.quarkus.cli.commands;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.regex.Pattern;\n+import java.util.stream.Stream;\n+\n+import org.aesh.command.invocation.CommandInvocation;\n+import org.apache.maven.shared.invoker.DefaultInvocationRequest;\n+import org.apache.maven.shared.invoker.DefaultInvoker;\n+import org.apache.maven.shared.invoker.InvocationRequest;\n+import org.apache.maven.shared.invoker.InvocationResult;\n+import org.apache.maven.shared.invoker.Invoker;\n+import org.apache.maven.shared.invoker.MavenInvocationException;\n+\n+public class ExecuteUtil {\n+\n+    public static void executeGradle(File projectDirectory, CommandInvocation invocation, String buildTarget) {\n+        String gradleExecutable = findExecutable(\"gradle\");\n+        if (gradleExecutable == null) {\n+            invocation.println(\"unable to find the gradle executable, is it in your path?\");\n+        } else {\n+            gradleExecutable += File.separator + \"bin\" + File.separator + \"gradle\";\n+\n+            try {\n+                Process process = new ProcessBuilder()\n+                        .command(gradleExecutable, buildTarget)\n+                        .directory(projectDirectory)\n+                        .start();\n+\n+                BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n+\n+                String line;\n+                while ((line = reader.readLine()) != null) {\n+                    invocation.println(line);\n+                }\n+\n+                int exit = process.waitFor();\n+                if (exit != 0)\n+                    invocation.println(\"Build failed.\");\n+            } catch (IOException | InterruptedException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+    }\n+\n+    public static void executeMaven(File projectDirectory, CommandInvocation invocation, String buildTarget) {\n+        String mvnPath = findExecutable(\"mvn\");", "originalCommit": "df03348cca2c006daf459b6e4ea823ae448b2386", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc1Mzk1NA==", "url": "https://github.com/quarkusio/quarkus/pull/9783#discussion_r435753954", "bodyText": "There is a check first to find out if there is a wrapper present or not.", "author": "stalep", "createdAt": "2020-06-05T08:00:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU4NDIyOA=="}], "type": "inlineReview", "revised_code": {"commit": "2a7ef1c0ef39618ca052f30c094c4cddc4f40d07", "chunk": "diff --git a/devtools/aesh/src/main/java/io/quarkus/cli/commands/ExecuteUtil.java b/devtools/aesh/src/main/java/io/quarkus/cli/commands/ExecuteUtil.java\nindex f4fc207267..4a616f41f1 100644\n--- a/devtools/aesh/src/main/java/io/quarkus/cli/commands/ExecuteUtil.java\n+++ b/devtools/aesh/src/main/java/io/quarkus/cli/commands/ExecuteUtil.java\n\n@@ -22,7 +22,8 @@ import org.apache.maven.shared.invoker.MavenInvocationException;\n \n public class ExecuteUtil {\n \n-    public static void executeGradle(File projectDirectory, CommandInvocation invocation, String buildTarget) {\n+    public static void executeGradle(File projectDirectory, CommandInvocation invocation, String buildTarget)\n+            throws InterruptedException {\n         String gradleExecutable = findExecutable(\"gradle\");\n         if (gradleExecutable == null) {\n             invocation.println(\"unable to find the gradle executable, is it in your path?\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU4NTIyMg==", "url": "https://github.com/quarkusio/quarkus/pull/9783#discussion_r435585222", "bodyText": "why is it that you can't just use the same way of running the wrapper and the path executable ?", "author": "maxandersen", "createdAt": "2020-06-04T22:23:27Z", "path": "devtools/aesh/src/main/java/io/quarkus/cli/commands/ExecuteUtil.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package io.quarkus.cli.commands;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.regex.Pattern;\n+import java.util.stream.Stream;\n+\n+import org.aesh.command.invocation.CommandInvocation;\n+import org.apache.maven.shared.invoker.DefaultInvocationRequest;\n+import org.apache.maven.shared.invoker.DefaultInvoker;\n+import org.apache.maven.shared.invoker.InvocationRequest;\n+import org.apache.maven.shared.invoker.InvocationResult;\n+import org.apache.maven.shared.invoker.Invoker;\n+import org.apache.maven.shared.invoker.MavenInvocationException;\n+\n+public class ExecuteUtil {\n+\n+    public static void executeGradle(File projectDirectory, CommandInvocation invocation, String buildTarget) {\n+        String gradleExecutable = findExecutable(\"gradle\");\n+        if (gradleExecutable == null) {\n+            invocation.println(\"unable to find the gradle executable, is it in your path?\");\n+        } else {\n+            gradleExecutable += File.separator + \"bin\" + File.separator + \"gradle\";\n+\n+            try {\n+                Process process = new ProcessBuilder()\n+                        .command(gradleExecutable, buildTarget)\n+                        .directory(projectDirectory)\n+                        .start();\n+\n+                BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n+\n+                String line;\n+                while ((line = reader.readLine()) != null) {\n+                    invocation.println(line);\n+                }\n+\n+                int exit = process.waitFor();\n+                if (exit != 0)\n+                    invocation.println(\"Build failed.\");\n+            } catch (IOException | InterruptedException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+    }\n+\n+    public static void executeMaven(File projectDirectory, CommandInvocation invocation, String buildTarget) {\n+        String mvnPath = findExecutable(\"mvn\");\n+        System.setProperty(\"maven.home\", mvnPath);\n+\n+        InvocationRequest request = new DefaultInvocationRequest();\n+        request.setPomFile(new File(projectDirectory.getAbsolutePath() + File.separatorChar + \"pom.xml\"));\n+        request.setGoals(Collections.singletonList(buildTarget));\n+\n+        Invoker invoker = new DefaultInvoker();\n+\n+        InvocationResult result = null;\n+        try {\n+            result = invoker.execute(request);\n+        } catch (MavenInvocationException e) {\n+            e.printStackTrace();\n+        }\n+\n+        if (result.getExitCode() != 0) {\n+            invocation.println(\"Build failed.\");\n+        }\n+    }\n+\n+    public static String findExecutable(String exec) {\n+        Optional<Path> mvnPath = Stream.of(System.getenv(\"PATH\").split(Pattern.quote(File.pathSeparator)))\n+                .map(Paths::get)\n+                .filter(path -> Files.exists(path.resolve(exec))).findFirst();\n+\n+        return mvnPath.map(value -> value.getParent().toString()).orElse(null);\n+    }\n+\n+    public static void executeWrapper(CommandInvocation invocation, File wrapper, String target) {\n+        try {", "originalCommit": "df03348cca2c006daf459b6e4ea823ae448b2386", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc1MzU1NA==", "url": "https://github.com/quarkusio/quarkus/pull/9783#discussion_r435753554", "bodyText": "If we detect a maven install we use the maven-invocation api to kick off the build. That is what I'll try to do with the gradle-api as well, but since they are called differently now I had to distinct wrapper and executable.", "author": "stalep", "createdAt": "2020-06-05T07:59:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU4NTIyMg=="}], "type": "inlineReview", "revised_code": {"commit": "2a7ef1c0ef39618ca052f30c094c4cddc4f40d07", "chunk": "diff --git a/devtools/aesh/src/main/java/io/quarkus/cli/commands/ExecuteUtil.java b/devtools/aesh/src/main/java/io/quarkus/cli/commands/ExecuteUtil.java\nindex f4fc207267..4a616f41f1 100644\n--- a/devtools/aesh/src/main/java/io/quarkus/cli/commands/ExecuteUtil.java\n+++ b/devtools/aesh/src/main/java/io/quarkus/cli/commands/ExecuteUtil.java\n\n@@ -22,7 +22,8 @@ import org.apache.maven.shared.invoker.MavenInvocationException;\n \n public class ExecuteUtil {\n \n-    public static void executeGradle(File projectDirectory, CommandInvocation invocation, String buildTarget) {\n+    public static void executeGradle(File projectDirectory, CommandInvocation invocation, String buildTarget)\n+            throws InterruptedException {\n         String gradleExecutable = findExecutable(\"gradle\");\n         if (gradleExecutable == null) {\n             invocation.println(\"unable to find the gradle executable, is it in your path?\");\n"}}, {"oid": "2a7ef1c0ef39618ca052f30c094c4cddc4f40d07", "url": "https://github.com/quarkusio/quarkus/commit/2a7ef1c0ef39618ca052f30c094c4cddc4f40d07", "message": "updated the cli to work similar as the maven and gradle tools", "committedDate": "2020-06-10T22:04:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAxODUwMw==", "url": "https://github.com/quarkusio/quarkus/pull/9783#discussion_r439018503", "bodyText": "\u201cbuild\u201d seems more appropriate ?", "author": "maxandersen", "createdAt": "2020-06-11T19:26:40Z", "path": "devtools/aesh/src/main/java/io/quarkus/cli/commands/CompileProjectCommand.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package io.quarkus.cli.commands;\n+\n+import java.io.File;\n+\n+import org.aesh.command.Command;\n+import org.aesh.command.CommandDefinition;\n+import org.aesh.command.CommandException;\n+import org.aesh.command.CommandResult;\n+import org.aesh.command.invocation.CommandInvocation;\n+import org.aesh.command.option.Argument;\n+import org.aesh.command.option.Option;\n+import org.aesh.io.Resource;\n+\n+import io.quarkus.devtools.project.BuildTool;\n+import io.quarkus.devtools.project.QuarkusProject;\n+\n+@CommandDefinition(name = \"compile-project\", description = \"Compiles the targeted project\")", "originalCommit": "2a7ef1c0ef39618ca052f30c094c4cddc4f40d07", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAyOTQ1Mg==", "url": "https://github.com/quarkusio/quarkus/pull/9783#discussion_r440029452", "bodyText": "Yup", "author": "stalep", "createdAt": "2020-06-15T08:59:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAxODUwMw=="}], "type": "inlineReview", "revised_code": {"commit": "a1bb2fb6e9e0cc55f0ec5d5c57bb468f68700f3e", "chunk": "diff --git a/devtools/aesh/src/main/java/io/quarkus/cli/commands/CompileProjectCommand.java b/devtools/aesh/src/main/java/io/quarkus/cli/commands/CompileProjectCommand.java\nindex 98b2311687..2f45ebd6a6 100644\n--- a/devtools/aesh/src/main/java/io/quarkus/cli/commands/CompileProjectCommand.java\n+++ b/devtools/aesh/src/main/java/io/quarkus/cli/commands/CompileProjectCommand.java\n\n@@ -14,7 +14,7 @@ import org.aesh.io.Resource;\n import io.quarkus.devtools.project.BuildTool;\n import io.quarkus.devtools.project.QuarkusProject;\n \n-@CommandDefinition(name = \"compile-project\", description = \"Compiles the targeted project\")\n+@CommandDefinition(name = \"build\", description = \"Compiles the targeted project\")\n public class CompileProjectCommand implements Command<CommandInvocation> {\n     @Option(name = \"clean\", hasValue = false, shortName = 'c', description = \"Clean the project before compiling\")\n     private boolean clean;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAxODgwMw==", "url": "https://github.com/quarkusio/quarkus/pull/9783#discussion_r439018803", "bodyText": "Not critical now but I would say package rather than install would be done here.", "author": "maxandersen", "createdAt": "2020-06-11T19:27:19Z", "path": "devtools/aesh/src/main/java/io/quarkus/cli/commands/CompileProjectCommand.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package io.quarkus.cli.commands;\n+\n+import java.io.File;\n+\n+import org.aesh.command.Command;\n+import org.aesh.command.CommandDefinition;\n+import org.aesh.command.CommandException;\n+import org.aesh.command.CommandResult;\n+import org.aesh.command.invocation.CommandInvocation;\n+import org.aesh.command.option.Argument;\n+import org.aesh.command.option.Option;\n+import org.aesh.io.Resource;\n+\n+import io.quarkus.devtools.project.BuildTool;\n+import io.quarkus.devtools.project.QuarkusProject;\n+\n+@CommandDefinition(name = \"compile-project\", description = \"Compiles the targeted project\")\n+public class CompileProjectCommand implements Command<CommandInvocation> {\n+    @Option(name = \"clean\", hasValue = false, shortName = 'c', description = \"Clean the project before compiling\")\n+    private boolean clean;\n+\n+    @Argument(description = \"Path to the project, if not set it will use the current working directory\")\n+    private Resource path;\n+\n+    @Override\n+    public CommandResult execute(CommandInvocation invocation) throws CommandException, InterruptedException {\n+\n+        File projectPath = path != null ? new File(path.getAbsolutePath()) : new File(System.getProperty(\"user.dir\"));\n+\n+        BuildTool buildTool = QuarkusProject.resolveExistingProjectBuildTool(projectPath.toPath());\n+\n+        if (buildTool.getBuildFiles() != null && buildTool.getBuildFiles().length > 0) {\n+            File buildFile = new File(buildTool.getBuildFiles()[0]);\n+\n+            if (!buildFile.isFile()) {\n+                invocation.println(\"Was not able to find a build file in: \" + projectPath);\n+                return CommandResult.FAILURE;\n+            }\n+\n+            try {\n+                if (buildTool.equals(BuildTool.MAVEN)) {\n+                    File wrapper = ExecuteUtil.getMavenWrapper(projectPath.getAbsolutePath());\n+                    if (wrapper != null) {\n+                        ExecuteUtil.executeWrapper(invocation, wrapper, \"install\");", "originalCommit": "2a7ef1c0ef39618ca052f30c094c4cddc4f40d07", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAyOTI5Nw==", "url": "https://github.com/quarkusio/quarkus/pull/9783#discussion_r440029297", "bodyText": "Fixed", "author": "stalep", "createdAt": "2020-06-15T08:58:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAxODgwMw=="}], "type": "inlineReview", "revised_code": {"commit": "a1bb2fb6e9e0cc55f0ec5d5c57bb468f68700f3e", "chunk": "diff --git a/devtools/aesh/src/main/java/io/quarkus/cli/commands/CompileProjectCommand.java b/devtools/aesh/src/main/java/io/quarkus/cli/commands/CompileProjectCommand.java\nindex 98b2311687..2f45ebd6a6 100644\n--- a/devtools/aesh/src/main/java/io/quarkus/cli/commands/CompileProjectCommand.java\n+++ b/devtools/aesh/src/main/java/io/quarkus/cli/commands/CompileProjectCommand.java\n\n@@ -14,7 +14,7 @@ import org.aesh.io.Resource;\n import io.quarkus.devtools.project.BuildTool;\n import io.quarkus.devtools.project.QuarkusProject;\n \n-@CommandDefinition(name = \"compile-project\", description = \"Compiles the targeted project\")\n+@CommandDefinition(name = \"build\", description = \"Compiles the targeted project\")\n public class CompileProjectCommand implements Command<CommandInvocation> {\n     @Option(name = \"clean\", hasValue = false, shortName = 'c', description = \"Clean the project before compiling\")\n     private boolean clean;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAxOTcwMw==", "url": "https://github.com/quarkusio/quarkus/pull/9783#discussion_r439019703", "bodyText": "create as we use that everywhere else.", "author": "maxandersen", "createdAt": "2020-06-11T19:29:04Z", "path": "devtools/aesh/src/main/java/io/quarkus/cli/commands/CreateProjectCommand.java", "diffHunk": "@@ -1,66 +1,163 @@\n package io.quarkus.cli.commands;\n \n import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n import java.nio.file.Paths;\n import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n import org.aesh.command.Command;\n import org.aesh.command.CommandDefinition;\n import org.aesh.command.CommandResult;\n import org.aesh.command.invocation.CommandInvocation;\n+import org.aesh.command.option.Argument;\n import org.aesh.command.option.Option;\n+import org.aesh.command.option.OptionList;\n+import org.aesh.command.shell.Shell;\n import org.aesh.io.Resource;\n+import org.aesh.readline.action.KeyAction;\n+import org.aesh.readline.terminal.Key;\n+import org.aesh.selector.MultiSelect;\n+import org.aesh.selector.SelectorType;\n+import org.aesh.terminal.utils.Config;\n+import org.apache.commons.lang3.StringUtils;\n \n+import io.quarkus.dependencies.Extension;\n+import io.quarkus.devtools.commands.AddExtensions;\n import io.quarkus.devtools.commands.CreateProject;\n+import io.quarkus.devtools.commands.data.QuarkusCommandException;\n+import io.quarkus.devtools.project.BuildTool;\n+import io.quarkus.devtools.project.QuarkusProject;\n import io.quarkus.platform.tools.config.QuarkusPlatformConfig;\n \n-/**\n- * @author <a href=\"mailto:stalep@gmail.com\">St\u00e5le Pedersen</a>\n- */\n-@CommandDefinition(name = \"create-project\", description = \"Creates a base Quarkus maven project\")\n+@CommandDefinition(name = \"init\", generateHelp = true, description = \"Creates a base Quarkus project\")", "originalCommit": "2a7ef1c0ef39618ca052f30c094c4cddc4f40d07", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA1NDc3NA==", "url": "https://github.com/quarkusio/quarkus/pull/9783#discussion_r439054774", "bodyText": "Everywhere else is Maven?", "author": "aloubyansky", "createdAt": "2020-06-11T20:31:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAxOTcwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAyOTEwOQ==", "url": "https://github.com/quarkusio/quarkus/pull/9783#discussion_r440029109", "bodyText": "I renamed it to init as it was mentioned in a thread recently and I thought it was good. I do not care that much though. I changed it to create now.", "author": "stalep", "createdAt": "2020-06-15T08:58:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAxOTcwMw=="}], "type": "inlineReview", "revised_code": {"commit": "a1bb2fb6e9e0cc55f0ec5d5c57bb468f68700f3e", "chunk": "diff --git a/devtools/aesh/src/main/java/io/quarkus/cli/commands/CreateProjectCommand.java b/devtools/aesh/src/main/java/io/quarkus/cli/commands/CreateProjectCommand.java\nindex 7b74a75c1f..3c88453e72 100644\n--- a/devtools/aesh/src/main/java/io/quarkus/cli/commands/CreateProjectCommand.java\n+++ b/devtools/aesh/src/main/java/io/quarkus/cli/commands/CreateProjectCommand.java\n\n@@ -35,7 +35,7 @@ import io.quarkus.devtools.project.BuildTool;\n import io.quarkus.devtools.project.QuarkusProject;\n import io.quarkus.platform.tools.config.QuarkusPlatformConfig;\n \n-@CommandDefinition(name = \"init\", generateHelp = true, description = \"Creates a base Quarkus project\")\n+@CommandDefinition(name = \"create\", generateHelp = true, description = \"Creates a base Quarkus project\")\n public class CreateProjectCommand implements Command<CommandInvocation> {\n \n     @Option(name = \"groupid\", shortName = 'g', defaultValue = \"org.acme.quarkus.sample\", askIfNotSet = true, description = \"The groupId of the project\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAyMDE5MQ==", "url": "https://github.com/quarkusio/quarkus/pull/9783#discussion_r439020191", "bodyText": "dev\nIt\u2019s called dev everywhere else afaik.", "author": "maxandersen", "createdAt": "2020-06-11T19:30:01Z", "path": "devtools/aesh/src/main/java/io/quarkus/cli/commands/DevModeCommand.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package io.quarkus.cli.commands;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+\n+import org.aesh.command.Command;\n+import org.aesh.command.CommandDefinition;\n+import org.aesh.command.CommandException;\n+import org.aesh.command.CommandNotFoundException;\n+import org.aesh.command.CommandResult;\n+import org.aesh.command.invocation.CommandInvocation;\n+import org.aesh.command.option.Argument;\n+import org.aesh.command.option.Option;\n+import org.aesh.command.option.OptionList;\n+import org.aesh.command.parser.CommandLineParserException;\n+import org.aesh.command.validator.CommandValidatorException;\n+import org.aesh.command.validator.OptionValidatorException;\n+\n+import io.quarkus.devtools.project.BuildTool;\n+import io.quarkus.devtools.project.QuarkusProject;\n+\n+@CommandDefinition(name = \"dev-mode\", description = \"Starts up a development mode process for a Quarkus project.\")", "originalCommit": "2a7ef1c0ef39618ca052f30c094c4cddc4f40d07", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA1Mjk0Ng==", "url": "https://github.com/quarkusio/quarkus/pull/9783#discussion_r439052946", "bodyText": "Only in Maven.", "author": "aloubyansky", "createdAt": "2020-06-11T20:27:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAyMDE5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAyODQ2NA==", "url": "https://github.com/quarkusio/quarkus/pull/9783#discussion_r440028464", "bodyText": "I changed it to dev, TBH I do not have much preferences for names.", "author": "stalep", "createdAt": "2020-06-15T08:57:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAyMDE5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "a1bb2fb6e9e0cc55f0ec5d5c57bb468f68700f3e", "chunk": "diff --git a/devtools/aesh/src/main/java/io/quarkus/cli/commands/DevModeCommand.java b/devtools/aesh/src/main/java/io/quarkus/cli/commands/DevModeCommand.java\nindex 64d506a29f..cb8e59be7b 100644\n--- a/devtools/aesh/src/main/java/io/quarkus/cli/commands/DevModeCommand.java\n+++ b/devtools/aesh/src/main/java/io/quarkus/cli/commands/DevModeCommand.java\n\n@@ -20,10 +20,11 @@ import org.aesh.command.validator.OptionValidatorException;\n import io.quarkus.devtools.project.BuildTool;\n import io.quarkus.devtools.project.QuarkusProject;\n \n-@CommandDefinition(name = \"dev-mode\", description = \"Starts up a development mode process for a Quarkus project.\")\n+@CommandDefinition(name = \"dev\", description = \"Starts up a development mode process for a Quarkus project.\")\n public class DevModeCommand implements Command<CommandInvocation> {\n \n-    @Option(shortName = 'd', completer = DevModeDebugCompleter.class, validator = DevModeDebugValidator.class, description = \"If this server should be started in debug mode. \"\n+    @Option(shortName = 'd', completer = DevModeDebugCompleter.class, defaultValue = {\"true\"},\n+            validator = DevModeDebugValidator.class, description = \"If this server should be started in debug mode. \"\n             +\n             \"The default is to start in debug mode without suspending and listen on port 5005.\" +\n             \" It supports the following options:\\n\" +\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAyMDk1MQ==", "url": "https://github.com/quarkusio/quarkus/pull/9783#discussion_r439020951", "bodyText": "Default is true to match elsewhere ?", "author": "maxandersen", "createdAt": "2020-06-11T19:31:27Z", "path": "devtools/aesh/src/main/java/io/quarkus/cli/commands/DevModeCommand.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package io.quarkus.cli.commands;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+\n+import org.aesh.command.Command;\n+import org.aesh.command.CommandDefinition;\n+import org.aesh.command.CommandException;\n+import org.aesh.command.CommandNotFoundException;\n+import org.aesh.command.CommandResult;\n+import org.aesh.command.invocation.CommandInvocation;\n+import org.aesh.command.option.Argument;\n+import org.aesh.command.option.Option;\n+import org.aesh.command.option.OptionList;\n+import org.aesh.command.parser.CommandLineParserException;\n+import org.aesh.command.validator.CommandValidatorException;\n+import org.aesh.command.validator.OptionValidatorException;\n+\n+import io.quarkus.devtools.project.BuildTool;\n+import io.quarkus.devtools.project.QuarkusProject;\n+\n+@CommandDefinition(name = \"dev-mode\", description = \"Starts up a development mode process for a Quarkus project.\")\n+public class DevModeCommand implements Command<CommandInvocation> {\n+\n+    @Option(shortName = 'd', completer = DevModeDebugCompleter.class, validator = DevModeDebugValidator.class, description = \"If this server should be started in debug mode. \"\n+            +\n+            \"The default is to start in debug mode without suspending and listen on port 5005.\" +\n+            \" It supports the following options:\\n\" +\n+            \" \\\"false\\\" - The JVM is not started in debug mode\\n\" +\n+            \" \\\"true\\\" - The JVM is started in debug mode and suspends until a debugger is attached to port 5005\\n\" +\n+            \" \\\"client\\\" - The JVM is started in client mode, and attempts to connect to localhost:5005\\n\" +\n+            \"\\\"{port}\\\" - The JVM is started in debug mode and suspends until a debugger is attached to {port}\")\n+    private String debug;", "originalCommit": "2a7ef1c0ef39618ca052f30c094c4cddc4f40d07", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a1bb2fb6e9e0cc55f0ec5d5c57bb468f68700f3e", "chunk": "diff --git a/devtools/aesh/src/main/java/io/quarkus/cli/commands/DevModeCommand.java b/devtools/aesh/src/main/java/io/quarkus/cli/commands/DevModeCommand.java\nindex 64d506a29f..cb8e59be7b 100644\n--- a/devtools/aesh/src/main/java/io/quarkus/cli/commands/DevModeCommand.java\n+++ b/devtools/aesh/src/main/java/io/quarkus/cli/commands/DevModeCommand.java\n\n@@ -20,10 +20,11 @@ import org.aesh.command.validator.OptionValidatorException;\n import io.quarkus.devtools.project.BuildTool;\n import io.quarkus.devtools.project.QuarkusProject;\n \n-@CommandDefinition(name = \"dev-mode\", description = \"Starts up a development mode process for a Quarkus project.\")\n+@CommandDefinition(name = \"dev\", description = \"Starts up a development mode process for a Quarkus project.\")\n public class DevModeCommand implements Command<CommandInvocation> {\n \n-    @Option(shortName = 'd', completer = DevModeDebugCompleter.class, validator = DevModeDebugValidator.class, description = \"If this server should be started in debug mode. \"\n+    @Option(shortName = 'd', completer = DevModeDebugCompleter.class, defaultValue = {\"true\"},\n+            validator = DevModeDebugValidator.class, description = \"If this server should be started in debug mode. \"\n             +\n             \"The default is to start in debug mode without suspending and listen on port 5005.\" +\n             \" It supports the following options:\\n\" +\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAyMjE1OA==", "url": "https://github.com/quarkusio/quarkus/pull/9783#discussion_r439022158", "bodyText": "There are no shared base class for these exceptions ?", "author": "maxandersen", "createdAt": "2020-06-11T19:33:53Z", "path": "devtools/aesh/src/main/java/io/quarkus/cli/commands/DevModeCommand.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package io.quarkus.cli.commands;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+\n+import org.aesh.command.Command;\n+import org.aesh.command.CommandDefinition;\n+import org.aesh.command.CommandException;\n+import org.aesh.command.CommandNotFoundException;\n+import org.aesh.command.CommandResult;\n+import org.aesh.command.invocation.CommandInvocation;\n+import org.aesh.command.option.Argument;\n+import org.aesh.command.option.Option;\n+import org.aesh.command.option.OptionList;\n+import org.aesh.command.parser.CommandLineParserException;\n+import org.aesh.command.validator.CommandValidatorException;\n+import org.aesh.command.validator.OptionValidatorException;\n+\n+import io.quarkus.devtools.project.BuildTool;\n+import io.quarkus.devtools.project.QuarkusProject;\n+\n+@CommandDefinition(name = \"dev-mode\", description = \"Starts up a development mode process for a Quarkus project.\")\n+public class DevModeCommand implements Command<CommandInvocation> {\n+\n+    @Option(shortName = 'd', completer = DevModeDebugCompleter.class, validator = DevModeDebugValidator.class, description = \"If this server should be started in debug mode. \"\n+            +\n+            \"The default is to start in debug mode without suspending and listen on port 5005.\" +\n+            \" It supports the following options:\\n\" +\n+            \" \\\"false\\\" - The JVM is not started in debug mode\\n\" +\n+            \" \\\"true\\\" - The JVM is started in debug mode and suspends until a debugger is attached to port 5005\\n\" +\n+            \" \\\"client\\\" - The JVM is started in client mode, and attempts to connect to localhost:5005\\n\" +\n+            \"\\\"{port}\\\" - The JVM is started in debug mode and suspends until a debugger is attached to {port}\")\n+    private String debug;\n+\n+    @Option(shortName = 'u', hasValue = false, name = \"suspend\", description = \"Whether or not the JVM launch, in debug mode, should be suspended.\"\n+            + \"This parameter is only relevant when the JVM is launched in debug mode.\")\n+    private boolean suspend;\n+\n+    @Option(shortName = 'b', name = \"build\", description = \"Build folder, if not set the default folder for the used build tool will be used\")\n+    private File buildDir;\n+\n+    @Option(shortName = 's', name = \"source\", description = \"Source folder, if not set the default folder for the used build tool will be used\")\n+    private File sourceDir;\n+\n+    @Option(name = \"jvm-args\", shortName = 'j', description = \"JVM arguments to the dev mode process\")\n+    private String jvmArgs;\n+\n+    @Option(name = \"delete-dev-jar\", shortName = 'e', hasValue = false, defaultValue = {\n+            \"true\" }, description = \"Delete the dev jar after it finishes\")\n+    private boolean deleteDevJar;\n+\n+    @Option(name = \"prevent-no-verify\", shortName = 'p', defaultValue = {\n+            \"false\" }, hasValue = false, description = \"This value is intended to be set to true when some generated bytecode is eroneous causing \"\n+                    + \" the JVM to crash when the verify:non option is set (which is on by default).\")\n+    private boolean preventNoVerify;\n+\n+    @Option(name = \"no-deps\", shortName = 'n', hasValue = false, defaultValue = {\n+            \"false\" }, description = \"Whether changes in the projects that appear to be dependencies of the project containing the \"\n+                    + \" application to be launched should trigger hot-reload. By default they do.\")\n+\n+    @OptionList(name = \"compiler-args\", shortName = 'c', description = \"Additional parameters to pass to javac when recompiling changed source files.\")\n+    private List<String> compilerArgs;\n+\n+    @Argument(description = \"Path to the project, if not set it will use the current working directory\")\n+    private File projectPath;\n+\n+    private BuildTool buildTool;\n+    private File buildFile;\n+\n+    @Override\n+    public CommandResult execute(CommandInvocation invocation) throws CommandException, InterruptedException {\n+\n+        if (!verifyProjectStatus(invocation))\n+            return CommandResult.FAILURE;\n+\n+        try {\n+            devMode(invocation);\n+        } catch (InterruptedException i) {\n+            invocation.println(\"Stopping dev-mode\");\n+        }\n+\n+        return CommandResult.SUCCESS;\n+    }\n+\n+    private void devMode(CommandInvocation invocation) throws InterruptedException {\n+        if (buildTool.equals(BuildTool.MAVEN)) {\n+            File wrapper = ExecuteUtil.getMavenWrapper(projectPath.getAbsolutePath());\n+            if (wrapper != null) {\n+                ExecuteUtil.executeWrapper(invocation, wrapper, \"quarkus:dev\");\n+            } else {\n+                ExecuteUtil.executeMaven(projectPath, invocation, \"quarkus:dev\");\n+            }\n+\n+        }\n+        //do gradle\n+        else {\n+            File wrapper = ExecuteUtil.getGradleWrapper(projectPath.getAbsolutePath());\n+            if (wrapper != null) {\n+                ExecuteUtil.executeWrapper(invocation, wrapper, \"quarkusDev\");\n+            } else {\n+                ExecuteUtil.executeGradle(projectPath, invocation, \"quarkusDev\");\n+            }\n+        }\n+    }\n+\n+    private boolean verifyProjectStatus(CommandInvocation invocation) {\n+\n+        if (projectPath == null)\n+            projectPath = new File(System.getProperty(\"user.dir\"));\n+\n+        buildTool = QuarkusProject.resolveExistingProjectBuildTool(projectPath.toPath());\n+\n+        if (buildTool.getBuildFiles().length > 0)\n+            buildFile = new File(buildTool.getBuildFiles()[0]);\n+\n+        if (buildFile == null || !buildFile.isFile()) {\n+            invocation.println(\"Was not able to find a build file in: \" + projectPath);\n+            return false;\n+        }\n+\n+        if (buildDir == null)\n+            buildDir = new File(buildTool.getBuildDirectory());\n+\n+        if (sourceDir == null)\n+            sourceDir = resolveSourceDir();\n+\n+        if (!sourceDir.isDirectory()) {\n+            invocation.println(\"ERROR: The project's sources directory does not exists (\" + sourceDir);\n+            return false;\n+        }\n+\n+        if (!buildDir.isDirectory() || !new File(buildDir, \"classes\").isDirectory()) {\n+            invocation.println(\"Build directory (\" + buildDir + \" wasn't found. Compiling...\");\n+            //if we run interactive, the name is 'compile-project', otherwise it's 'quarkus compile-project'\n+            try {\n+                invocation.executeCommand(\"compile-project\");\n+            } catch (CommandNotFoundException e) {\n+                try {\n+                    invocation.executeCommand(\"quarkus compile-project\");\n+                } catch (CommandNotFoundException | CommandLineParserException | OptionValidatorException", "originalCommit": "2a7ef1c0ef39618ca052f30c094c4cddc4f40d07", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAyMjI1Nw==", "url": "https://github.com/quarkusio/quarkus/pull/9783#discussion_r440022257", "bodyText": "No, but that's a good idea, I'll implement that in \u00c6sh asap", "author": "stalep", "createdAt": "2020-06-15T08:47:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAyMjE1OA=="}], "type": "inlineReview", "revised_code": {"commit": "a1bb2fb6e9e0cc55f0ec5d5c57bb468f68700f3e", "chunk": "diff --git a/devtools/aesh/src/main/java/io/quarkus/cli/commands/DevModeCommand.java b/devtools/aesh/src/main/java/io/quarkus/cli/commands/DevModeCommand.java\nindex 64d506a29f..cb8e59be7b 100644\n--- a/devtools/aesh/src/main/java/io/quarkus/cli/commands/DevModeCommand.java\n+++ b/devtools/aesh/src/main/java/io/quarkus/cli/commands/DevModeCommand.java\n\n@@ -20,10 +20,11 @@ import org.aesh.command.validator.OptionValidatorException;\n import io.quarkus.devtools.project.BuildTool;\n import io.quarkus.devtools.project.QuarkusProject;\n \n-@CommandDefinition(name = \"dev-mode\", description = \"Starts up a development mode process for a Quarkus project.\")\n+@CommandDefinition(name = \"dev\", description = \"Starts up a development mode process for a Quarkus project.\")\n public class DevModeCommand implements Command<CommandInvocation> {\n \n-    @Option(shortName = 'd', completer = DevModeDebugCompleter.class, validator = DevModeDebugValidator.class, description = \"If this server should be started in debug mode. \"\n+    @Option(shortName = 'd', completer = DevModeDebugCompleter.class, defaultValue = {\"true\"},\n+            validator = DevModeDebugValidator.class, description = \"If this server should be started in debug mode. \"\n             +\n             \"The default is to start in debug mode without suspending and listen on port 5005.\" +\n             \" It supports the following options:\\n\" +\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAyMzM5Ng==", "url": "https://github.com/quarkusio/quarkus/pull/9783#discussion_r439023396", "bodyText": "We won\u2019t actually be doing install, just adding extension.\nadd, maybe ?", "author": "maxandersen", "createdAt": "2020-06-11T19:36:22Z", "path": "devtools/aesh/src/main/java/io/quarkus/cli/commands/InstallExtensionCommand.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package io.quarkus.cli.commands;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.aesh.command.Command;\n+import org.aesh.command.CommandDefinition;\n+import org.aesh.command.CommandException;\n+import org.aesh.command.CommandResult;\n+import org.aesh.command.invocation.CommandInvocation;\n+import org.aesh.command.option.Arguments;\n+import org.aesh.command.option.Option;\n+import org.aesh.io.Resource;\n+import org.aesh.selector.MultiSelect;\n+\n+import io.quarkus.dependencies.Extension;\n+import io.quarkus.devtools.commands.AddExtensions;\n+import io.quarkus.devtools.commands.data.QuarkusCommandException;\n+import io.quarkus.devtools.commands.data.QuarkusCommandOutcome;\n+import io.quarkus.devtools.project.QuarkusProject;\n+import io.quarkus.platform.tools.config.QuarkusPlatformConfig;\n+\n+@CommandDefinition(name = \"install\", description = \"Install extensions to a project\")\n+public class InstallExtensionCommand implements Command<CommandInvocation> {", "originalCommit": "2a7ef1c0ef39618ca052f30c094c4cddc4f40d07", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDExMDk3OA==", "url": "https://github.com/quarkusio/quarkus/pull/9783#discussion_r440110978", "bodyText": "Yeah, as I mentioned earlier as well I used some names that were brought up in a thread I read. I thought install worked well, but we can use add too.", "author": "stalep", "createdAt": "2020-06-15T11:31:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAyMzM5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "2013ebba69d999a7b5cbefac29ca214bfaa73d1b", "chunk": "diff --git a/devtools/aesh/src/main/java/io/quarkus/cli/commands/InstallExtensionCommand.java b/devtools/aesh/src/main/java/io/quarkus/cli/commands/AddExtensionsCommand.java\nsimilarity index 95%\nrename from devtools/aesh/src/main/java/io/quarkus/cli/commands/InstallExtensionCommand.java\nrename to devtools/aesh/src/main/java/io/quarkus/cli/commands/AddExtensionsCommand.java\nindex aa9f8696f1..578e390028 100644\n--- a/devtools/aesh/src/main/java/io/quarkus/cli/commands/InstallExtensionCommand.java\n+++ b/devtools/aesh/src/main/java/io/quarkus/cli/commands/AddExtensionsCommand.java\n\n@@ -25,8 +25,8 @@ import io.quarkus.devtools.commands.data.QuarkusCommandOutcome;\n import io.quarkus.devtools.project.QuarkusProject;\n import io.quarkus.platform.tools.config.QuarkusPlatformConfig;\n \n-@CommandDefinition(name = \"install\", description = \"Install extensions to a project\")\n-public class InstallExtensionCommand implements Command<CommandInvocation> {\n+@CommandDefinition(name = \"add\", description = \"Install extensions to a project\")\n+public class AddExtensionsCommand implements Command<CommandInvocation> {\n \n     @Option(shortName = 'p', description = \"Path to the project, if not set it will use the current working directory\")\n     private Resource path;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA1NTUwNw==", "url": "https://github.com/quarkusio/quarkus/pull/9783#discussion_r439055507", "bodyText": "Does case matter, btw?", "author": "aloubyansky", "createdAt": "2020-06-11T20:33:04Z", "path": "devtools/aesh/src/main/java/io/quarkus/cli/commands/CreateProjectCommand.java", "diffHunk": "@@ -1,66 +1,163 @@\n package io.quarkus.cli.commands;\n \n import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n import java.nio.file.Paths;\n import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n import org.aesh.command.Command;\n import org.aesh.command.CommandDefinition;\n import org.aesh.command.CommandResult;\n import org.aesh.command.invocation.CommandInvocation;\n+import org.aesh.command.option.Argument;\n import org.aesh.command.option.Option;\n+import org.aesh.command.option.OptionList;\n+import org.aesh.command.shell.Shell;\n import org.aesh.io.Resource;\n+import org.aesh.readline.action.KeyAction;\n+import org.aesh.readline.terminal.Key;\n+import org.aesh.selector.MultiSelect;\n+import org.aesh.selector.SelectorType;\n+import org.aesh.terminal.utils.Config;\n+import org.apache.commons.lang3.StringUtils;\n \n+import io.quarkus.dependencies.Extension;\n+import io.quarkus.devtools.commands.AddExtensions;\n import io.quarkus.devtools.commands.CreateProject;\n+import io.quarkus.devtools.commands.data.QuarkusCommandException;\n+import io.quarkus.devtools.project.BuildTool;\n+import io.quarkus.devtools.project.QuarkusProject;\n import io.quarkus.platform.tools.config.QuarkusPlatformConfig;\n \n-/**\n- * @author <a href=\"mailto:stalep@gmail.com\">St\u00e5le Pedersen</a>\n- */\n-@CommandDefinition(name = \"create-project\", description = \"Creates a base Quarkus maven project\")\n+@CommandDefinition(name = \"init\", generateHelp = true, description = \"Creates a base Quarkus project\")\n public class CreateProjectCommand implements Command<CommandInvocation> {\n \n-    @Option(shortName = 'h', hasValue = false)\n-    private boolean help;\n+    @Option(name = \"groupid\", shortName = 'g', defaultValue = \"org.acme.quarkus.sample\", askIfNotSet = true, description = \"The groupId of the project\")", "originalCommit": "2a7ef1c0ef39618ca052f30c094c4cddc4f40d07", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAyMzI4OA==", "url": "https://github.com/quarkusio/quarkus/pull/9783#discussion_r440023288", "bodyText": "If the name is not set, \u00c6sh will use the field name (including cases) as the name. I personally try to default option names to lower case, but I guess that is mostly personal preference.", "author": "stalep", "createdAt": "2020-06-15T08:48:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA1NTUwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA5MTcxNQ==", "url": "https://github.com/quarkusio/quarkus/pull/9783#discussion_r440091715", "bodyText": "lower case over mixed case - such a pain in mvn ;)", "author": "maxandersen", "createdAt": "2020-06-15T10:51:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA1NTUwNw=="}], "type": "inlineReview", "revised_code": {"commit": "a1bb2fb6e9e0cc55f0ec5d5c57bb468f68700f3e", "chunk": "diff --git a/devtools/aesh/src/main/java/io/quarkus/cli/commands/CreateProjectCommand.java b/devtools/aesh/src/main/java/io/quarkus/cli/commands/CreateProjectCommand.java\nindex 7b74a75c1f..3c88453e72 100644\n--- a/devtools/aesh/src/main/java/io/quarkus/cli/commands/CreateProjectCommand.java\n+++ b/devtools/aesh/src/main/java/io/quarkus/cli/commands/CreateProjectCommand.java\n\n@@ -35,7 +35,7 @@ import io.quarkus.devtools.project.BuildTool;\n import io.quarkus.devtools.project.QuarkusProject;\n import io.quarkus.platform.tools.config.QuarkusPlatformConfig;\n \n-@CommandDefinition(name = \"init\", generateHelp = true, description = \"Creates a base Quarkus project\")\n+@CommandDefinition(name = \"create\", generateHelp = true, description = \"Creates a base Quarkus project\")\n public class CreateProjectCommand implements Command<CommandInvocation> {\n \n     @Option(name = \"groupid\", shortName = 'g', defaultValue = \"org.acme.quarkus.sample\", askIfNotSet = true, description = \"The groupId of the project\")\n"}}, {"oid": "a1bb2fb6e9e0cc55f0ec5d5c57bb468f68700f3e", "url": "https://github.com/quarkusio/quarkus/commit/a1bb2fb6e9e0cc55f0ec5d5c57bb468f68700f3e", "message": "updated the cli to work similar as the maven and gradle tools", "committedDate": "2020-06-15T08:51:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAzNDQwNg==", "url": "https://github.com/quarkusio/quarkus/pull/9783#discussion_r440034406", "bodyText": "Maybe we should throw an exception here (instead of returning null)?", "author": "ia3andy", "createdAt": "2020-06-15T09:07:22Z", "path": "devtools/aesh/src/main/java/io/quarkus/cli/commands/BuildToolConverter.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package io.quarkus.cli.commands;\n+\n+import org.aesh.command.converter.Converter;\n+import org.aesh.command.converter.ConverterInvocation;\n+\n+import io.quarkus.devtools.project.BuildTool;\n+\n+public class BuildToolConverter implements Converter<BuildTool, ConverterInvocation> {\n+    @Override\n+    public BuildTool convert(ConverterInvocation invocation) {\n+        if (invocation.getInput() != null && invocation.getInput().length() > 0)\n+            return BuildTool.findTool(invocation.getInput());\n+        else\n+            return null;", "originalCommit": "a1bb2fb6e9e0cc55f0ec5d5c57bb468f68700f3e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA2NTkxOQ==", "url": "https://github.com/quarkusio/quarkus/pull/9783#discussion_r440065919", "bodyText": "Yes, probably wise. I didn't care as much as the null reference is handled by \u00c6sh, but yeah. I'll change it.", "author": "stalep", "createdAt": "2020-06-15T10:01:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAzNDQwNg=="}], "type": "inlineReview", "revised_code": {"commit": "af6d3412f3e78d698515695ddef99de1544fd4b2", "chunk": "diff --git a/devtools/aesh/src/main/java/io/quarkus/cli/commands/BuildToolConverter.java b/devtools/aesh/src/main/java/io/quarkus/cli/commands/BuildToolConverter.java\nindex 820ac26c7a..3927cfd191 100644\n--- a/devtools/aesh/src/main/java/io/quarkus/cli/commands/BuildToolConverter.java\n+++ b/devtools/aesh/src/main/java/io/quarkus/cli/commands/BuildToolConverter.java\n\n@@ -2,15 +2,16 @@ package io.quarkus.cli.commands;\n \n import org.aesh.command.converter.Converter;\n import org.aesh.command.converter.ConverterInvocation;\n+import org.aesh.command.validator.OptionValidatorException;\n \n import io.quarkus.devtools.project.BuildTool;\n \n public class BuildToolConverter implements Converter<BuildTool, ConverterInvocation> {\n     @Override\n-    public BuildTool convert(ConverterInvocation invocation) {\n+    public BuildTool convert(ConverterInvocation invocation) throws OptionValidatorException {\n         if (invocation.getInput() != null && invocation.getInput().length() > 0)\n             return BuildTool.findTool(invocation.getInput());\n         else\n-            return null;\n+            throw new OptionValidatorException(invocation.getInput() + \" was not recognized as a supported build tool\");\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAzNzExNw==", "url": "https://github.com/quarkusio/quarkus/pull/9783#discussion_r440037117", "bodyText": "Maybe should make this static method part of BuildTool (it's my mistake)?", "author": "ia3andy", "createdAt": "2020-06-15T09:12:05Z", "path": "devtools/aesh/src/main/java/io/quarkus/cli/commands/DevModeCommand.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package io.quarkus.cli.commands;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+\n+import org.aesh.command.Command;\n+import org.aesh.command.CommandDefinition;\n+import org.aesh.command.CommandException;\n+import org.aesh.command.CommandNotFoundException;\n+import org.aesh.command.CommandResult;\n+import org.aesh.command.invocation.CommandInvocation;\n+import org.aesh.command.option.Argument;\n+import org.aesh.command.option.Option;\n+import org.aesh.command.option.OptionList;\n+import org.aesh.command.parser.CommandLineParserException;\n+import org.aesh.command.validator.CommandValidatorException;\n+import org.aesh.command.validator.OptionValidatorException;\n+\n+import io.quarkus.devtools.project.BuildTool;\n+import io.quarkus.devtools.project.QuarkusProject;\n+\n+@CommandDefinition(name = \"dev\", description = \"Starts up a development mode process for a Quarkus project.\")\n+public class DevModeCommand implements Command<CommandInvocation> {\n+\n+    @Option(shortName = 'd', completer = DevModeDebugCompleter.class, defaultValue = {\"true\"},\n+            validator = DevModeDebugValidator.class, description = \"If this server should be started in debug mode. \"\n+            +\n+            \"The default is to start in debug mode without suspending and listen on port 5005.\" +\n+            \" It supports the following options:\\n\" +\n+            \" \\\"false\\\" - The JVM is not started in debug mode\\n\" +\n+            \" \\\"true\\\" - The JVM is started in debug mode and suspends until a debugger is attached to port 5005\\n\" +\n+            \" \\\"client\\\" - The JVM is started in client mode, and attempts to connect to localhost:5005\\n\" +\n+            \"\\\"{port}\\\" - The JVM is started in debug mode and suspends until a debugger is attached to {port}\")\n+    private String debug;\n+\n+    @Option(shortName = 'u', hasValue = false, name = \"suspend\", description = \"Whether or not the JVM launch, in debug mode, should be suspended.\"\n+            + \"This parameter is only relevant when the JVM is launched in debug mode.\")\n+    private boolean suspend;\n+\n+    @Option(shortName = 'b', name = \"build\", description = \"Build folder, if not set the default folder for the used build tool will be used\")\n+    private File buildDir;\n+\n+    @Option(shortName = 's', name = \"source\", description = \"Source folder, if not set the default folder for the used build tool will be used\")\n+    private File sourceDir;\n+\n+    @Option(name = \"jvm-args\", shortName = 'j', description = \"JVM arguments to the dev mode process\")\n+    private String jvmArgs;\n+\n+    @Option(name = \"delete-dev-jar\", shortName = 'e', hasValue = false, defaultValue = {\n+            \"true\" }, description = \"Delete the dev jar after it finishes\")\n+    private boolean deleteDevJar;\n+\n+    @Option(name = \"prevent-no-verify\", shortName = 'p', defaultValue = {\n+            \"false\" }, hasValue = false, description = \"This value is intended to be set to true when some generated bytecode is eroneous causing \"\n+                    + \" the JVM to crash when the verify:non option is set (which is on by default).\")\n+    private boolean preventNoVerify;\n+\n+    @Option(name = \"no-deps\", shortName = 'n', hasValue = false, defaultValue = {\n+            \"false\" }, description = \"Whether changes in the projects that appear to be dependencies of the project containing the \"\n+                    + \" application to be launched should trigger hot-reload. By default they do.\")\n+\n+    @OptionList(name = \"compiler-args\", shortName = 'c', description = \"Additional parameters to pass to javac when recompiling changed source files.\")\n+    private List<String> compilerArgs;\n+\n+    @Argument(description = \"Path to the project, if not set it will use the current working directory\")\n+    private File projectPath;\n+\n+    private BuildTool buildTool;\n+    private File buildFile;\n+\n+    @Override\n+    public CommandResult execute(CommandInvocation invocation) throws CommandException, InterruptedException {\n+\n+        if (!verifyProjectStatus(invocation))\n+            return CommandResult.FAILURE;\n+\n+        try {\n+            devMode(invocation);\n+        } catch (InterruptedException i) {\n+            invocation.println(\"Stopping dev-mode\");\n+        }\n+\n+        return CommandResult.SUCCESS;\n+    }\n+\n+    private void devMode(CommandInvocation invocation) throws InterruptedException {\n+        if (buildTool.equals(BuildTool.MAVEN)) {\n+            File wrapper = ExecuteUtil.getMavenWrapper(projectPath.getAbsolutePath());\n+            if (wrapper != null) {\n+                ExecuteUtil.executeWrapper(invocation, wrapper, \"quarkus:dev\");\n+            } else {\n+                ExecuteUtil.executeMaven(projectPath, invocation, \"quarkus:dev\");\n+            }\n+\n+        }\n+        //do gradle\n+        else {\n+            File wrapper = ExecuteUtil.getGradleWrapper(projectPath.getAbsolutePath());\n+            if (wrapper != null) {\n+                ExecuteUtil.executeWrapper(invocation, wrapper, \"quarkusDev\");\n+            } else {\n+                ExecuteUtil.executeGradle(projectPath, invocation, \"quarkusDev\");\n+            }\n+        }\n+    }\n+\n+    private boolean verifyProjectStatus(CommandInvocation invocation) {\n+\n+        if (projectPath == null)\n+            projectPath = new File(System.getProperty(\"user.dir\"));\n+\n+        buildTool = QuarkusProject.resolveExistingProjectBuildTool(projectPath.toPath());", "originalCommit": "a1bb2fb6e9e0cc55f0ec5d5c57bb468f68700f3e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA2NjMwNw==", "url": "https://github.com/quarkusio/quarkus/pull/9783#discussion_r440066307", "bodyText": "Yes, that's probably useful. I can just change that in this commit. Give me a few min (lunch now).", "author": "stalep", "createdAt": "2020-06-15T10:02:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAzNzExNw=="}], "type": "inlineReview", "revised_code": {"commit": "af6d3412f3e78d698515695ddef99de1544fd4b2", "chunk": "diff --git a/devtools/aesh/src/main/java/io/quarkus/cli/commands/DevModeCommand.java b/devtools/aesh/src/main/java/io/quarkus/cli/commands/DevModeCommand.java\nindex cb8e59be7b..c84beaaadb 100644\n--- a/devtools/aesh/src/main/java/io/quarkus/cli/commands/DevModeCommand.java\n+++ b/devtools/aesh/src/main/java/io/quarkus/cli/commands/DevModeCommand.java\n\n@@ -18,20 +18,19 @@ import org.aesh.command.validator.CommandValidatorException;\n import org.aesh.command.validator.OptionValidatorException;\n \n import io.quarkus.devtools.project.BuildTool;\n-import io.quarkus.devtools.project.QuarkusProject;\n \n @CommandDefinition(name = \"dev\", description = \"Starts up a development mode process for a Quarkus project.\")\n public class DevModeCommand implements Command<CommandInvocation> {\n \n-    @Option(shortName = 'd', completer = DevModeDebugCompleter.class, defaultValue = {\"true\"},\n-            validator = DevModeDebugValidator.class, description = \"If this server should be started in debug mode. \"\n-            +\n-            \"The default is to start in debug mode without suspending and listen on port 5005.\" +\n-            \" It supports the following options:\\n\" +\n-            \" \\\"false\\\" - The JVM is not started in debug mode\\n\" +\n-            \" \\\"true\\\" - The JVM is started in debug mode and suspends until a debugger is attached to port 5005\\n\" +\n-            \" \\\"client\\\" - The JVM is started in client mode, and attempts to connect to localhost:5005\\n\" +\n-            \"\\\"{port}\\\" - The JVM is started in debug mode and suspends until a debugger is attached to {port}\")\n+    @Option(shortName = 'd', completer = DevModeDebugCompleter.class, defaultValue = {\n+            \"true\" }, validator = DevModeDebugValidator.class, description = \"If this server should be started in debug mode. \"\n+                    +\n+                    \"The default is to start in debug mode without suspending and listen on port 5005.\" +\n+                    \" It supports the following options:\\n\" +\n+                    \" \\\"false\\\" - The JVM is not started in debug mode\\n\" +\n+                    \" \\\"true\\\" - The JVM is started in debug mode and suspends until a debugger is attached to port 5005\\n\" +\n+                    \" \\\"client\\\" - The JVM is started in client mode, and attempts to connect to localhost:5005\\n\" +\n+                    \"\\\"{port}\\\" - The JVM is started in debug mode and suspends until a debugger is attached to {port}\")\n     private String debug;\n \n     @Option(shortName = 'u', hasValue = false, name = \"suspend\", description = \"Whether or not the JVM launch, in debug mode, should be suspended.\"\n"}}, {"oid": "af6d3412f3e78d698515695ddef99de1544fd4b2", "url": "https://github.com/quarkusio/quarkus/commit/af6d3412f3e78d698515695ddef99de1544fd4b2", "message": "updated the cli to work similar as the maven and gradle tools", "committedDate": "2020-06-15T11:25:33Z", "type": "forcePushed"}, {"oid": "2013ebba69d999a7b5cbefac29ca214bfaa73d1b", "url": "https://github.com/quarkusio/quarkus/commit/2013ebba69d999a7b5cbefac29ca214bfaa73d1b", "message": "updated the cli to work similar as the maven and gradle tools", "committedDate": "2020-06-15T11:33:01Z", "type": "commit"}, {"oid": "2013ebba69d999a7b5cbefac29ca214bfaa73d1b", "url": "https://github.com/quarkusio/quarkus/commit/2013ebba69d999a7b5cbefac29ca214bfaa73d1b", "message": "updated the cli to work similar as the maven and gradle tools", "committedDate": "2020-06-15T11:33:01Z", "type": "forcePushed"}]}