{"pr_number": 12044, "pr_title": "Allow adding /health endpoint to OpenAPI using config", "pr_createdAt": "2020-09-11T10:39:28Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/12044", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk5MTQ5Ng==", "url": "https://github.com/quarkusio/quarkus/pull/12044#discussion_r486991496", "bodyText": "should also have 503 and 500 - https://github.com/eclipse/microprofile-health/blob/master/spec/src/main/asciidoc/protocol-wireformat.adoc#status-codes", "author": "xstefank", "createdAt": "2020-09-11T11:46:38Z", "path": "extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/HealthOpenAPIFilter.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package io.quarkus.smallrye.health.deployment;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.eclipse.microprofile.openapi.OASFilter;\n+import org.eclipse.microprofile.openapi.models.OpenAPI;\n+import org.eclipse.microprofile.openapi.models.Operation;\n+import org.eclipse.microprofile.openapi.models.PathItem;\n+import org.eclipse.microprofile.openapi.models.Paths;\n+import org.eclipse.microprofile.openapi.models.media.Content;\n+import org.eclipse.microprofile.openapi.models.media.MediaType;\n+import org.eclipse.microprofile.openapi.models.media.Schema;\n+import org.eclipse.microprofile.openapi.models.responses.APIResponse;\n+import org.eclipse.microprofile.openapi.models.responses.APIResponses;\n+\n+import io.smallrye.openapi.api.models.ComponentsImpl;\n+import io.smallrye.openapi.api.models.OperationImpl;\n+import io.smallrye.openapi.api.models.PathItemImpl;\n+import io.smallrye.openapi.api.models.PathsImpl;\n+import io.smallrye.openapi.api.models.media.ContentImpl;\n+import io.smallrye.openapi.api.models.media.MediaTypeImpl;\n+import io.smallrye.openapi.api.models.media.SchemaImpl;\n+import io.smallrye.openapi.api.models.responses.APIResponseImpl;\n+import io.smallrye.openapi.api.models.responses.APIResponsesImpl;\n+\n+/**\n+ * Create OpenAPI entries (if configured)\n+ */\n+public class HealthOpenAPIFilter implements OASFilter {\n+    private static final List<String> MICROPROFILE_HEALTH_TAG = Collections.singletonList(\"MicroProfile Health\");\n+\n+    private final String rootPath;\n+    private final String livenessPath;\n+    private final String readinessPath;\n+\n+    public HealthOpenAPIFilter(String rootPath, String livenessPath, String readinessPath) {\n+        this.rootPath = rootPath;\n+        this.livenessPath = livenessPath;\n+        this.readinessPath = readinessPath;\n+    }\n+\n+    @Override\n+    public void filterOpenAPI(OpenAPI openAPI) {\n+        if (openAPI.getComponents() == null) {\n+            openAPI.setComponents(new ComponentsImpl());\n+        }\n+        openAPI.getComponents().addSchema(\"HealthCheckResponse\", createHealthCheckResponse());\n+        openAPI.getComponents().addSchema(\"State\", createState());\n+\n+        if (openAPI.getPaths() == null) {\n+            openAPI.setPaths(new PathsImpl());\n+        }\n+        Paths paths = openAPI.getPaths();\n+\n+        // Health\n+        paths.addPathItem(rootPath, createHealthPathItem());\n+\n+        // Liveness\n+        paths.addPathItem(livenessPath, createLivenessPathItem());\n+\n+        // Readiness\n+        paths.addPathItem(readinessPath, createReadinessPathItem());\n+    }\n+\n+    private PathItem createHealthPathItem() {\n+        PathItem pathItem = new PathItemImpl();\n+        pathItem.setDescription(\"MicroProfile Health Endpoint\");\n+        pathItem.setSummary(\n+                \"MicroProfile Health provides a way for your application to distribute information about its healthiness state to state whether or not it is able to function properly\");\n+        pathItem.setGET(createHealthOperation());\n+        return pathItem;\n+    }\n+\n+    private PathItem createLivenessPathItem() {\n+        PathItem pathItem = new PathItemImpl();\n+        pathItem.setDescription(\"MicroProfile Health - Liveness Endpoint\");\n+        pathItem.setSummary(\n+                \"Liveness checks are utilized to tell whether the application should be restarted\");\n+        pathItem.setGET(createLivenessOperation());\n+        return pathItem;\n+    }\n+\n+    private PathItem createReadinessPathItem() {\n+        PathItem pathItem = new PathItemImpl();\n+        pathItem.setDescription(\"MicroProfile Health - Readiness Endpoint\");\n+        pathItem.setSummary(\n+                \"Readiness checks are used to tell whether the application is able to process requests\");\n+        pathItem.setGET(createReadinessOperation());\n+        return pathItem;\n+    }\n+\n+    private Operation createHealthOperation() {\n+        Operation operation = new OperationImpl();\n+        operation.setDescription(\"Check the health of the application\");\n+        operation.setOperationId(\"microprofile_health_root\");\n+        operation.setTags(MICROPROFILE_HEALTH_TAG);\n+        operation.setSummary(\"An aggregated view of the Liveness and Readiness of this application\");\n+        operation.setResponses(createAPIResponses());\n+        return operation;\n+    }\n+\n+    private Operation createLivenessOperation() {\n+        Operation operation = new OperationImpl();\n+        operation.setDescription(\"Check the liveness of the application\");\n+        operation.setOperationId(\"microprofile_health_liveness\");\n+        operation.setTags(MICROPROFILE_HEALTH_TAG);\n+        operation.setSummary(\"The Liveness check of this application\");\n+        operation.setResponses(createAPIResponses());\n+        return operation;\n+    }\n+\n+    private Operation createReadinessOperation() {\n+        Operation operation = new OperationImpl();\n+        operation.setDescription(\"Check the readiness of the application\");\n+        operation.setOperationId(\"microprofile_health_readiness\");\n+        operation.setTags(MICROPROFILE_HEALTH_TAG);\n+        operation.setSummary(\"The Readiness check of this application\");\n+        operation.setResponses(createAPIResponses());\n+        return operation;\n+    }\n+\n+    private APIResponses createAPIResponses() {\n+        APIResponses responses = new APIResponsesImpl();\n+        responses.addAPIResponse(\"200\", createAPIResponse());", "originalCommit": "8b1ce2ec32162a0b8c41d1e79a7fc269d0401afc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk5OTgwOQ==", "url": "https://github.com/quarkusio/quarkus/pull/12044#discussion_r486999809", "bodyText": "Thanks @xstefank - I'll add those.\nW.r.t experimental paths, I am easy, I do not really have an opinion on that. Maybe @knutwannheden can comment here as this is requested by him.", "author": "phillip-kruger", "createdAt": "2020-09-11T12:05:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk5MTQ5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA2OTI4Ng==", "url": "https://github.com/quarkusio/quarkus/pull/12044#discussion_r487069286", "bodyText": "I don't understand what you mean by \"experimental paths\", but from my perspective it is only important that the path of every endpoint, which gets called by another service, is registered with the Azure API management. Having the API responses described is not necessary, but of course a nice to have!", "author": "knutwannheden", "createdAt": "2020-09-11T14:07:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk5MTQ5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY2ODI3Nw==", "url": "https://github.com/quarkusio/quarkus/pull/12044#discussion_r487668277", "bodyText": "@knutwannheden sorry, I meant experimental features paths, e.g. /health/group/{name} or /health/well. I guess if you are not using them, it's not necessary, just asking for completeness.", "author": "xstefank", "createdAt": "2020-09-14T06:00:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk5MTQ5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "c19900c331e7568e5e46d5bcaa3e65981e649b17", "chunk": "diff --git a/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/HealthOpenAPIFilter.java b/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/HealthOpenAPIFilter.java\nindex f8323b8d30..de652acb15 100644\n--- a/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/HealthOpenAPIFilter.java\n+++ b/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/HealthOpenAPIFilter.java\n\n@@ -126,6 +126,8 @@ public class HealthOpenAPIFilter implements OASFilter {\n     private APIResponses createAPIResponses() {\n         APIResponses responses = new APIResponsesImpl();\n         responses.addAPIResponse(\"200\", createAPIResponse());\n+        responses.addAPIResponse(\"503\", createAPIResponse());\n+        responses.addAPIResponse(\"500\", createAPIResponse());\n         return responses;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEyMDAyOQ==", "url": "https://github.com/quarkusio/quarkus/pull/12044#discussion_r487120029", "bodyText": "Maybe this should be more specific? Like OpenAPIFilterBuildItem?", "author": "gastaldi", "createdAt": "2020-09-11T15:25:29Z", "path": "extensions/smallrye-openapi/spi/src/main/java/io/quarkus/smallrye/openapi/deployment/spi/OpenAPIBuildItem.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package io.quarkus.smallrye.openapi.deployment.spi;\n+\n+import org.eclipse.microprofile.openapi.OASFilter;\n+\n+import io.quarkus.builder.item.MultiBuildItem;\n+\n+public final class OpenAPIBuildItem extends MultiBuildItem {", "originalCommit": "5298a08f471a91e6f4cc177896c71006368c0e30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEyMzM4MQ==", "url": "https://github.com/quarkusio/quarkus/pull/12044#discussion_r487123381", "bodyText": "I'm wondering if it needs to be super specific to what we're actually doing.\nThough what's being included is an implementation of OASFilter, maybe the build item should be something like IncludeEndpointInOpenAPIDefinitionBuildItem? I know, very wordy, but elaborates what it's for", "author": "kenfinnigan", "createdAt": "2020-09-11T15:30:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEyMDAyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEyNjIzMA==", "url": "https://github.com/quarkusio/quarkus/pull/12044#discussion_r487126230", "bodyText": "Also maybe an OASFilter is just an implementation detail understood by the OpenAPI extension. I wonder if this build item shouldn't just contain the data (Endpoint path, etc)", "author": "gastaldi", "createdAt": "2020-09-11T15:35:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEyMDAyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEyNzExOQ==", "url": "https://github.com/quarkusio/quarkus/pull/12044#discussion_r487127119", "bodyText": "Something like AdditionalOpenAPIEndpointBuildItem", "author": "gastaldi", "createdAt": "2020-09-11T15:36:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEyMDAyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE5MTc4Mw==", "url": "https://github.com/quarkusio/quarkus/pull/12044#discussion_r487191783", "bodyText": "Ken made the same comment, I'll go with his very specific suggestion (IncludeEndpointInOpenAPIDefinitionBuildItem)", "author": "phillip-kruger", "createdAt": "2020-09-11T17:37:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEyMDAyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "c19900c331e7568e5e46d5bcaa3e65981e649b17", "chunk": "diff --git a/extensions/smallrye-openapi/spi/src/main/java/io/quarkus/smallrye/openapi/deployment/spi/OpenAPIBuildItem.java b/extensions/smallrye-openapi/spi/src/main/java/io/quarkus/smallrye/openapi/deployment/spi/AddToOpenAPIDefinitionBuildItem.java\nsimilarity index 74%\nrename from extensions/smallrye-openapi/spi/src/main/java/io/quarkus/smallrye/openapi/deployment/spi/OpenAPIBuildItem.java\nrename to extensions/smallrye-openapi/spi/src/main/java/io/quarkus/smallrye/openapi/deployment/spi/AddToOpenAPIDefinitionBuildItem.java\nindex 99e861ecf4..64e5ead609 100644\n--- a/extensions/smallrye-openapi/spi/src/main/java/io/quarkus/smallrye/openapi/deployment/spi/OpenAPIBuildItem.java\n+++ b/extensions/smallrye-openapi/spi/src/main/java/io/quarkus/smallrye/openapi/deployment/spi/AddToOpenAPIDefinitionBuildItem.java\n\n@@ -4,14 +4,14 @@ import org.eclipse.microprofile.openapi.OASFilter;\n \n import io.quarkus.builder.item.MultiBuildItem;\n \n-public final class OpenAPIBuildItem extends MultiBuildItem {\n+public final class AddToOpenAPIDefinitionBuildItem extends MultiBuildItem {\n \n     private final OASFilter filter;\n \n     /**\n      * @param filter the filter to be applied when building the OpenAPI document\n      */\n-    public OpenAPIBuildItem(OASFilter filter) {\n+    public AddToOpenAPIDefinitionBuildItem(OASFilter filter) {\n         this.filter = filter;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEyMzAzOQ==", "url": "https://github.com/quarkusio/quarkus/pull/12044#discussion_r487123039", "bodyText": "Interesting that this works, I always thought we had to use simple types and build the object when the build item is consumed", "author": "gastaldi", "createdAt": "2020-09-11T15:30:13Z", "path": "extensions/smallrye-openapi/spi/src/main/java/io/quarkus/smallrye/openapi/deployment/spi/OpenAPIBuildItem.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package io.quarkus.smallrye.openapi.deployment.spi;\n+\n+import org.eclipse.microprofile.openapi.OASFilter;\n+\n+import io.quarkus.builder.item.MultiBuildItem;\n+\n+public final class OpenAPIBuildItem extends MultiBuildItem {\n+\n+    private final OASFilter filter;", "originalCommit": "5298a08f471a91e6f4cc177896c71006368c0e30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE5MTUxMQ==", "url": "https://github.com/quarkusio/quarkus/pull/12044#discussion_r487191511", "bodyText": "Not sure about that. But the test in Heath is working and creating the Document so at least it's working in test.", "author": "phillip-kruger", "createdAt": "2020-09-11T17:36:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEyMzAzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "c19900c331e7568e5e46d5bcaa3e65981e649b17", "chunk": "diff --git a/extensions/smallrye-openapi/spi/src/main/java/io/quarkus/smallrye/openapi/deployment/spi/OpenAPIBuildItem.java b/extensions/smallrye-openapi/spi/src/main/java/io/quarkus/smallrye/openapi/deployment/spi/AddToOpenAPIDefinitionBuildItem.java\nsimilarity index 74%\nrename from extensions/smallrye-openapi/spi/src/main/java/io/quarkus/smallrye/openapi/deployment/spi/OpenAPIBuildItem.java\nrename to extensions/smallrye-openapi/spi/src/main/java/io/quarkus/smallrye/openapi/deployment/spi/AddToOpenAPIDefinitionBuildItem.java\nindex 99e861ecf4..64e5ead609 100644\n--- a/extensions/smallrye-openapi/spi/src/main/java/io/quarkus/smallrye/openapi/deployment/spi/OpenAPIBuildItem.java\n+++ b/extensions/smallrye-openapi/spi/src/main/java/io/quarkus/smallrye/openapi/deployment/spi/AddToOpenAPIDefinitionBuildItem.java\n\n@@ -4,14 +4,14 @@ import org.eclipse.microprofile.openapi.OASFilter;\n \n import io.quarkus.builder.item.MultiBuildItem;\n \n-public final class OpenAPIBuildItem extends MultiBuildItem {\n+public final class AddToOpenAPIDefinitionBuildItem extends MultiBuildItem {\n \n     private final OASFilter filter;\n \n     /**\n      * @param filter the filter to be applied when building the OpenAPI document\n      */\n-    public OpenAPIBuildItem(OASFilter filter) {\n+    public AddToOpenAPIDefinitionBuildItem(OASFilter filter) {\n         this.filter = filter;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEyMTc4MA==", "url": "https://github.com/quarkusio/quarkus/pull/12044#discussion_r487121780", "bodyText": "Granted I don't know if this would work.\nBut could the spi dependency be optional and then use a different build step method that is only \"used\" if OpenAPI extension is actually present?", "author": "kenfinnigan", "createdAt": "2020-09-11T15:28:20Z", "path": "extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java", "diffHunk": "@@ -175,6 +176,7 @@ void build(SmallRyeHealthRecorder recorder,\n \n     @BuildStep\n     public void defineHealthRoutes(BuildProducer<RouteBuildItem> routes,\n+            BuildProducer<OpenAPIBuildItem> openAPIProducer,", "originalCommit": "5298a08f471a91e6f4cc177896c71006368c0e30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQxNDU2NQ==", "url": "https://github.com/quarkusio/quarkus/pull/12044#discussion_r487414565", "bodyText": "I am not sure how to do this. asking on zulip...", "author": "phillip-kruger", "createdAt": "2020-09-12T14:22:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEyMTc4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQzNTI4Nw==", "url": "https://github.com/quarkusio/quarkus/pull/12044#discussion_r487435287", "bodyText": "@kenfinnigan - not sure if it's possible to do this at the moment. I think with some changes to BuildItem we can maybe do something like @BuildItem(ifInluded=Capability.SMALLRYE_OPENAPI), but I don't want to make that change as part of this PR or without consulting first. What I did in the mean time is to add SmallRye OpenAPI to the capabilities and do a normal isPresent against it when deciding to add the endpoint. Let me know what you think", "author": "phillip-kruger", "createdAt": "2020-09-12T18:22:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEyMTc4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ0NTU5Ng==", "url": "https://github.com/quarkusio/quarkus/pull/12044#discussion_r487445596", "bodyText": "I have not looked at the code, sorry. But I have one question regarding potential future additions of the same kind: Will other Quarkus extensions be able to contribute additional entries to the OpenAPI document for the application without requiring changes to the OpenAPI extension. While I don't regard this as a requirement, I think it would be nice to have or at least for the design to allow for this evolution.", "author": "knutwannheden", "createdAt": "2020-09-12T20:27:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEyMTc4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ3MDI0MA==", "url": "https://github.com/quarkusio/quarkus/pull/12044#discussion_r487470240", "bodyText": "Yip, other extensions can now just use the build item to contribute", "author": "phillip-kruger", "createdAt": "2020-09-13T02:08:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEyMTc4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1OTYxOQ==", "url": "https://github.com/quarkusio/quarkus/pull/12044#discussion_r487559619", "bodyText": "Oh, I see. You did end up moving the config flag to the health extension. This looks very much like what I was hoping for \ud83d\udc4c", "author": "knutwannheden", "createdAt": "2020-09-13T18:12:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEyMTc4MA=="}], "type": "inlineReview", "revised_code": {"commit": "c19900c331e7568e5e46d5bcaa3e65981e649b17", "chunk": "diff --git a/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java b/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java\nindex 9c2bd2fe19..ece10c0248 100644\n--- a/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java\n+++ b/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java\n\n@@ -176,7 +189,6 @@ class SmallRyeHealthProcessor {\n \n     @BuildStep\n     public void defineHealthRoutes(BuildProducer<RouteBuildItem> routes,\n-            BuildProducer<OpenAPIBuildItem> openAPIProducer,\n             BeanArchiveIndexBuildItem beanArchiveIndex) {\n         IndexView index = beanArchiveIndex.getIndex();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAxMjM3Mw==", "url": "https://github.com/quarkusio/quarkus/pull/12044#discussion_r488012373", "bodyText": "Not a deal breaker, but wondering if there's a better name?\nMaybe \"openapi.included\"?\nTo me, \"openapi.enabled\" doesn't really embody what happens", "author": "kenfinnigan", "createdAt": "2020-09-14T15:14:28Z", "path": "extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/HealthBuildTimeConfig.java", "diffHunk": "@@ -10,4 +10,10 @@\n      */\n     @ConfigItem(name = \"extensions.enabled\", defaultValue = \"true\")\n     public boolean extensionsEnabled;\n+\n+    /**\n+     * Whether or not to include the Liveness and Readiness Health endpoints in the generated OpenAPI document\n+     */\n+    @ConfigItem(name = \"openapi.enabled\", defaultValue = \"false\")", "originalCommit": "a3b69b8287e7b9ec6d89136f1825a9a899bea209", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEyNjU1MQ==", "url": "https://github.com/quarkusio/quarkus/pull/12044#discussion_r488126551", "bodyText": "Changed", "author": "phillip-kruger", "createdAt": "2020-09-14T18:09:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAxMjM3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "c19900c331e7568e5e46d5bcaa3e65981e649b17", "chunk": "diff --git a/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/HealthBuildTimeConfig.java b/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/HealthBuildTimeConfig.java\nindex cdc3193fa6..01491dc3ad 100644\n--- a/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/HealthBuildTimeConfig.java\n+++ b/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/HealthBuildTimeConfig.java\n\n@@ -14,6 +14,6 @@ public class HealthBuildTimeConfig {\n     /**\n      * Whether or not to include the Liveness and Readiness Health endpoints in the generated OpenAPI document\n      */\n-    @ConfigItem(name = \"openapi.enabled\", defaultValue = \"false\")\n-    public boolean openapiEnabled;\n+    @ConfigItem(name = \"openapi.included\", defaultValue = \"false\")\n+    public boolean openapiIncluded;\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAxMzgxOA==", "url": "https://github.com/quarkusio/quarkus/pull/12044#discussion_r488013818", "bodyText": "I think this should be in a separate build step that means it is more easily not included if OpenAPI isn't present.\nCan something like this be done: https://github.com/quarkusio/quarkus/blob/master/extensions/micrometer/deployment/src/main/java/io/quarkus/micrometer/deployment/MicrometerProcessor.java#L58", "author": "kenfinnigan", "createdAt": "2020-09-14T15:16:25Z", "path": "extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java", "diffHunk": "@@ -220,6 +225,13 @@ public void defineHealthRoutes(BuildProducer<RouteBuildItem> routes,\n                     new RouteBuildItem(health.rootPath + health.groupPath + \"/\" + healthGroup,\n                             handler, HandlerType.BLOCKING));\n         }\n+", "originalCommit": "a3b69b8287e7b9ec6d89136f1825a9a899bea209", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEyNjc2Ng==", "url": "https://github.com/quarkusio/quarkus/pull/12044#discussion_r488126766", "bodyText": "Cool, made it a separate method.", "author": "phillip-kruger", "createdAt": "2020-09-14T18:09:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAxMzgxOA=="}], "type": "inlineReview", "revised_code": {"commit": "c19900c331e7568e5e46d5bcaa3e65981e649b17", "chunk": "diff --git a/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java b/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java\nindex c481b77397..ece10c0248 100644\n--- a/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java\n+++ b/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java\n\n@@ -225,9 +234,14 @@ class SmallRyeHealthProcessor {\n                     new RouteBuildItem(health.rootPath + health.groupPath + \"/\" + healthGroup,\n                             handler, HandlerType.BLOCKING));\n         }\n+    }\n+\n+    @BuildStep(onlyIf = OpenAPIIncluded.class)\n+    public void includeInOpenAPIEndpoint(BuildProducer<AddToOpenAPIDefinitionBuildItem> openAPIProducer,\n+            Capabilities capabilities) {\n \n-        // Add to OpenAPI if configured\n-        if (config.openapiEnabled && capabilities.isPresent(Capability.SMALLRYE_OPERAPI)) {\n+        // Add to OpenAPI if OpenAPI is available\n+        if (capabilities.isPresent(Capability.SMALLRYE_OPENAPI)) {\n             HealthOpenAPIFilter filter = new HealthOpenAPIFilter(health.rootPath, health.rootPath + health.livenessPath,\n                     health.rootPath + health.readinessPath);\n             openAPIProducer.produce(new AddToOpenAPIDefinitionBuildItem(filter));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEyNzgyOA==", "url": "https://github.com/quarkusio/quarkus/pull/12044#discussion_r488127828", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                SMALLRYE_OPERAPI;\n          \n          \n            \n                SMALLRYE_OPENAPI;", "author": "gastaldi", "createdAt": "2020-09-14T18:11:45Z", "path": "core/deployment/src/main/java/io/quarkus/deployment/Capability.java", "diffHunk": "@@ -59,7 +59,8 @@\n      * Presence of SmallRye OpenTracing.\n      */\n     SMALLRYE_OPENTRACING,\n-    SPRING_WEB;\n+    SPRING_WEB,\n+    SMALLRYE_OPERAPI;", "originalCommit": "f95d39220818faca88427636e7c00a66d3183159", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEyODYzMg==", "url": "https://github.com/quarkusio/quarkus/pull/12044#discussion_r488128632", "bodyText": "Good catch !! Can't believe I have done that :)", "author": "phillip-kruger", "createdAt": "2020-09-14T18:13:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEyNzgyOA=="}], "type": "inlineReview", "revised_code": {"commit": "c19900c331e7568e5e46d5bcaa3e65981e649b17", "chunk": "diff --git a/core/deployment/src/main/java/io/quarkus/deployment/Capability.java b/core/deployment/src/main/java/io/quarkus/deployment/Capability.java\nindex bebb768b79..b16f38fe80 100644\n--- a/core/deployment/src/main/java/io/quarkus/deployment/Capability.java\n+++ b/core/deployment/src/main/java/io/quarkus/deployment/Capability.java\n\n@@ -60,7 +60,7 @@ public enum Capability {\n      */\n     SMALLRYE_OPENTRACING,\n     SPRING_WEB,\n-    SMALLRYE_OPERAPI;\n+    SMALLRYE_OPENAPI;\n \n     /**\n      *\n"}}, {"oid": "c19900c331e7568e5e46d5bcaa3e65981e649b17", "url": "https://github.com/quarkusio/quarkus/commit/c19900c331e7568e5e46d5bcaa3e65981e649b17", "message": "Allow adding /health endpoint to OpenAPI using config\n\nSigned-off-by: Phillip Kruger <phillip.kruger@gmail.com>", "committedDate": "2020-09-15T08:48:08Z", "type": "commit"}, {"oid": "9b166ad488a8db43b118806c32dbb5e9eb1f100b", "url": "https://github.com/quarkusio/quarkus/commit/9b166ad488a8db43b118806c32dbb5e9eb1f100b", "message": "Merge branch 'master' into openapi-add-health2", "committedDate": "2020-09-15T08:49:48Z", "type": "commit"}]}