{"pr_number": 13096, "pr_title": "Make sure Maven commands use the effective project deps, props and managed deps", "pr_createdAt": "2020-11-03T21:52:34Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/13096", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY4NzAwNQ==", "url": "https://github.com/quarkusio/quarkus/pull/13096#discussion_r518687005", "bodyText": "@aloubyansky  Are the suppliers reading the file each time they are called?", "author": "ia3andy", "createdAt": "2020-11-06T11:17:32Z", "path": "devtools/maven/src/main/java/io/quarkus/maven/MavenProjectBuildFile.java", "diffHunk": "@@ -0,0 +1,195 @@\n+package io.quarkus.maven;\n+\n+import static io.quarkus.devtools.project.extensions.Extensions.toKey;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Properties;\n+import java.util.function.Supplier;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.apache.maven.model.Dependency;\n+import org.apache.maven.model.DependencyManagement;\n+import org.apache.maven.model.Model;\n+\n+import io.quarkus.bootstrap.model.AppArtifactCoords;\n+import io.quarkus.bootstrap.model.AppArtifactKey;\n+import io.quarkus.devtools.project.BuildTool;\n+import io.quarkus.devtools.project.buildfile.BuildFile;\n+import io.quarkus.maven.utilities.MojoUtils;\n+import io.quarkus.platform.descriptor.QuarkusPlatformDescriptor;\n+\n+public class MavenProjectBuildFile extends BuildFile {\n+\n+    private static final Pattern PROPERTY_PATTERN = Pattern.compile(\"\\\\$\\\\{(.+)}\");\n+\n+    private Supplier<Model> modelSupplier;\n+    private Supplier<List<org.eclipse.aether.graph.Dependency>> projectDepsSupplier;\n+    private Supplier<List<org.eclipse.aether.graph.Dependency>> projectManagedDepsSupplier;\n+    private Properties projectPropsSupplier;\n+    protected List<AppArtifactCoords> dependencies;\n+    protected List<AppArtifactCoords> managedDependencies;\n+    protected Model model;\n+\n+    public MavenProjectBuildFile(Path projectDirPath, QuarkusPlatformDescriptor platformDescriptor, Supplier<Model> model,\n+            Supplier<List<org.eclipse.aether.graph.Dependency>> projectDeps,\n+            Supplier<List<org.eclipse.aether.graph.Dependency>> projectManagedDeps,\n+            Properties projectProps) {\n+        super(projectDirPath, platformDescriptor);\n+        this.modelSupplier = model;\n+        this.projectDepsSupplier = projectDeps;\n+        this.projectManagedDepsSupplier = projectManagedDeps;\n+        this.projectPropsSupplier = projectProps;\n+    }\n+\n+    @Override\n+    public BuildTool getBuildTool() {\n+        return BuildTool.MAVEN;\n+    }\n+\n+    @Override\n+    protected boolean addDependency(AppArtifactCoords coords, boolean managed) {\n+        final Dependency d = new Dependency();\n+        d.setGroupId(coords.getGroupId());\n+        d.setArtifactId(coords.getArtifactId());\n+        if (!managed) {\n+            d.setVersion(coords.getVersion());\n+        }\n+        // When classifier is empty, you get  <classifier></classifier> in the pom.xml\n+        if (coords.getClassifier() != null && !coords.getClassifier().isEmpty()) {\n+            d.setClassifier(coords.getClassifier());\n+        }\n+        d.setType(coords.getType());\n+        if (\"pom\".equalsIgnoreCase(coords.getType())) {\n+            d.setScope(\"import\");\n+            DependencyManagement dependencyManagement = model().getDependencyManagement();\n+            if (dependencyManagement == null) {\n+                dependencyManagement = new DependencyManagement();\n+                model().setDependencyManagement(dependencyManagement);\n+            }\n+            if (dependencyManagement.getDependencies()\n+                    .stream()\n+                    .noneMatch(thisDep -> d.getManagementKey().equals(resolveKey(thisDep)))) {\n+                dependencyManagement.addDependency(d);\n+                // the effective managed dependencies set may already include it\n+                if (!getManagedDependencies().contains(coords)) {\n+                    getManagedDependencies().add(coords);\n+                }\n+                return true;\n+            }\n+        } else if (model().getDependencies()\n+                .stream()\n+                .noneMatch(thisDep -> d.getManagementKey().equals(thisDep.getManagementKey()))) {\n+            model().addDependency(d);\n+            // it could still be a transitive dependency or inherited from the parent\n+            if (!getDependencies().contains(coords)) {\n+                getDependencies().add(coords);\n+            }\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    protected void removeDependency(AppArtifactKey key) throws IOException {\n+        if (model() != null) {\n+            final Iterator<AppArtifactCoords> i = getDependencies().iterator();\n+            while (i.hasNext()) {\n+                final AppArtifactCoords a = i.next();\n+                if (a.getKey().equals(key)) {\n+                    i.remove();\n+                    break;\n+                }\n+                model().getDependencies().removeIf(d -> Objects.equals(toKey(d), key));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    protected List<AppArtifactCoords> getDependencies() {\n+        if (dependencies == null) {\n+            final List<org.eclipse.aether.graph.Dependency> projectDeps = projectDepsSupplier.get();\n+            dependencies = new ArrayList<>(projectDeps.size());\n+            for (org.eclipse.aether.graph.Dependency dep : projectDeps) {\n+                org.eclipse.aether.artifact.Artifact a = dep.getArtifact();\n+                dependencies.add(new AppArtifactCoords(a.getGroupId(), a.getArtifactId(), a.getClassifier(),\n+                        a.getExtension(), a.getVersion()));\n+            }\n+        }\n+        return dependencies;\n+    }\n+\n+    protected List<AppArtifactCoords> getManagedDependencies() {\n+        if (managedDependencies == null) {\n+            final List<org.eclipse.aether.graph.Dependency> managedDeps = projectManagedDepsSupplier.get();\n+            managedDependencies = new ArrayList<>(managedDeps.size());\n+            for (org.eclipse.aether.graph.Dependency dep : managedDeps) {\n+                org.eclipse.aether.artifact.Artifact a = dep.getArtifact();\n+                managedDependencies.add(new AppArtifactCoords(a.getGroupId(), a.getArtifactId(), a.getClassifier(),\n+                        a.getExtension(), a.getVersion()));\n+            }\n+        }\n+        return dependencies;\n+    }\n+\n+    @Override\n+    protected void writeToDisk() throws IOException {\n+        if (model == null) {\n+            return;\n+        }\n+        try (ByteArrayOutputStream pomOutputStream = new ByteArrayOutputStream()) {\n+            MojoUtils.write(model(), pomOutputStream);\n+            writeToProjectFile(BuildTool.MAVEN.getDependenciesFile(), pomOutputStream.toByteArray());\n+        }\n+    }\n+\n+    @Override\n+    protected String getProperty(String propertyName) {\n+        return projectPropsSupplier.getProperty(propertyName);\n+    }\n+\n+    @Override\n+    protected void refreshData() {", "originalCommit": "3a7df0e2a82ff0672819ed7f17db9f816632379e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY5MzIxMQ==", "url": "https://github.com/quarkusio/quarkus/pull/13096#discussion_r518693211", "bodyText": "They are supposed to be invoked once to initialize the fields on demand. But I see I didn't do this for the properties.", "author": "aloubyansky", "createdAt": "2020-11-06T11:30:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY4NzAwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY5NzU0Nw==", "url": "https://github.com/quarkusio/quarkus/pull/13096#discussion_r518697547", "bodyText": "Just mind that that they have to be up to date after using install/uninstall", "author": "ia3andy", "createdAt": "2020-11-06T11:39:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY4NzAwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODcwMzQzNw==", "url": "https://github.com/quarkusio/quarkus/pull/13096#discussion_r518703437", "bodyText": "The state of the BuildFile will be up to date. Otherwise the maven will have to be re-launched.", "author": "aloubyansky", "createdAt": "2020-11-06T11:52:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY4NzAwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgwMjI3NA==", "url": "https://github.com/quarkusio/quarkus/pull/13096#discussion_r518802274", "bodyText": "Ah, private Properties projectPropsSupplier; is not actually a supplier. I should just rename the field.", "author": "aloubyansky", "createdAt": "2020-11-06T14:54:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY4NzAwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "0a8b2308a83de871a10e590b59ff9141b4b60dd9", "chunk": "diff --git a/devtools/maven/src/main/java/io/quarkus/maven/MavenProjectBuildFile.java b/devtools/maven/src/main/java/io/quarkus/maven/MavenProjectBuildFile.java\nindex 385c0ce325..8fbf8b6aaa 100644\n--- a/devtools/maven/src/main/java/io/quarkus/maven/MavenProjectBuildFile.java\n+++ b/devtools/maven/src/main/java/io/quarkus/maven/MavenProjectBuildFile.java\n\n@@ -32,7 +32,7 @@ public class MavenProjectBuildFile extends BuildFile {\n     private Supplier<Model> modelSupplier;\n     private Supplier<List<org.eclipse.aether.graph.Dependency>> projectDepsSupplier;\n     private Supplier<List<org.eclipse.aether.graph.Dependency>> projectManagedDepsSupplier;\n-    private Properties projectPropsSupplier;\n+    private Properties projectProps;\n     protected List<AppArtifactCoords> dependencies;\n     protected List<AppArtifactCoords> managedDependencies;\n     protected Model model;\n"}}, {"oid": "0a8b2308a83de871a10e590b59ff9141b4b60dd9", "url": "https://github.com/quarkusio/quarkus/commit/0a8b2308a83de871a10e590b59ff9141b4b60dd9", "message": "Make sure Maven commands include the effective project deps, props and managed deps", "committedDate": "2020-11-06T14:58:18Z", "type": "commit"}, {"oid": "0a8b2308a83de871a10e590b59ff9141b4b60dd9", "url": "https://github.com/quarkusio/quarkus/commit/0a8b2308a83de871a10e590b59ff9141b4b60dd9", "message": "Make sure Maven commands include the effective project deps, props and managed deps", "committedDate": "2020-11-06T14:58:18Z", "type": "forcePushed"}]}