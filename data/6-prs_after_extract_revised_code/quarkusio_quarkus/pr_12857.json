{"pr_number": 12857, "pr_title": "Optimize OIDC code flow to do one less redirect when the original path has to be restored", "pr_createdAt": "2020-10-21T15:02:23Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/12857", "timeline": [{"oid": "870f4605ad80c4e709fdf6901eb5d82d5e02658e", "url": "https://github.com/quarkusio/quarkus/commit/870f4605ad80c4e709fdf6901eb5d82d5e02658e", "message": "Support OIDC code flow custom 'code' query parameter", "committedDate": "2020-10-21T15:04:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk4NzEwNg==", "url": "https://github.com/quarkusio/quarkus/pull/12857#discussion_r512987106", "bodyText": "Isn't just a matter of checking whether or not the state cookie was set and if not just redirect to the IdP ?", "author": "pedroigor", "createdAt": "2020-10-27T19:50:55Z", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -278,13 +277,18 @@ private boolean shouldAutoRedirect(TenantConfigContext configContext, RoutingCon\n                 // Local redirect restoring the original request path, the state cookie is no longer needed\n                 removeCookie(context, configContext, getStateCookieName(configContext));\n             }\n+        } else if (configContext.oidcConfig.authentication.isChallengeWithoutStateCookie()) {\n+            LOG.debug(\"The state cookie is missing after a redirect from IDP, re-authentication is required\");\n+            return Uni.createFrom().optional(Optional.empty());\n         } else {\n             // State cookie must be available to minimize the risk of CSRF\n-            LOG.debug(\"The state cookie is missing after a redirect from IDP\");\n+            LOG.debug(\"The state cookie is missing after a redirect from IDP, authentication has failed\");", "originalCommit": "870f4605ad80c4e709fdf6901eb5d82d5e02658e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM3MjQzOA==", "url": "https://github.com/quarkusio/quarkus/pull/12857#discussion_r513372438", "bodyText": "@pedroigor The current behaviour in Quarkus is what is happening in this branch in this PR, if the state cookie is absent when Quarkus OIDC thinks it is processing a code response from the IDP redirect then it must be 401. Without it we were getting a lot of reports of the browser going into the redirection loop :-) due to the cookie being lost after the redirect, the user is redirected back and the IDP redirects the user back again, etc, so it is a safety check which should remain a default option IMHO.\nMay be you meant a session cookie ? It is still the case that if it is not available then the user is redirected to IDP.", "author": "sberyozkin", "createdAt": "2020-10-28T11:34:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk4NzEwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM5MjMwOA==", "url": "https://github.com/quarkusio/quarkus/pull/12857#discussion_r513392308", "bodyText": "As you said, if the state cookie is absent it may think it is processing a code. But if the state cookie is not set, that means the code flow not even started so we could just force the flow to start.\nMaybe I should try this out and see if I'm missing something.", "author": "pedroigor", "createdAt": "2020-10-28T12:09:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk4NzEwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQyMTQ3Nw==", "url": "https://github.com/quarkusio/quarkus/pull/12857#discussion_r513421477", "bodyText": "Hi Pedro @pedroigor if the state cookie is absent it may think it is processing a code. But if the state cookie is not set... it is the same situation :-).\nSo, putting this PR aside for the moment, when we have a code parameter set we assume it is part of the code flow response and therefore we expect that the state cookie is present. If it is not present, then until this PR, it is 401 (risk of the redirect loops otheriwise if we return the user back to IDP again - typically it is happening when say you access index.html on the 1st request and then /web-app/service on the redirect from IDP, etc, and if no cookie path/domain property is set).\nThe only cookie which we have always used to decide whether to redirect to IDP or not, based on its presence/absence is the session cookie. We only use the state cookie to coordinate the code flow.\nAnd with this PR, we have a situation where a code is coming on the 1st unauthenticated request, or, as it appears in the user case, after the session has expired, so yes, with the new option, we will give the users an option to redirect the users to IDP if the state cookie is absent to resolve the ambiguity with the custom code parameter vs a code returned by IDP.\nDoes it clarify it :-) ?", "author": "sberyozkin", "createdAt": "2020-10-28T12:59:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk4NzEwNg=="}], "type": "inlineReview", "revised_code": {"commit": "809f6d1ded705f2162b6ee665956f66b191bcba4", "chunk": "diff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java\nindex 1ea1e2d441..716d681a11 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java\n\n@@ -232,54 +234,22 @@ public class CodeAuthenticationMechanism extends AbstractOidcAuthenticationMecha\n             } else if (!stateCookie.getValue().startsWith(values.get(0))) {\n                 LOG.debug(\"State cookie value does not match the state query parameter value\");\n                 return Uni.createFrom().failure(new AuthenticationCompletionException());\n-            } else if (context.queryParam(\"pathChecked\").isEmpty()) {\n-                // This is an original redirect from IDP, check if the request path needs to be updated\n-                String[] pair = COOKIE_PATTERN.split(stateCookie.getValue());\n-                if (pair.length == 2) {\n-                    // The extra path that needs to be added to the current request path\n-                    String extraPath = pair[1];\n-\n-                    // The original user query if any will be added to the final redirect URI\n-                    // after the authentication has been complete\n-\n-                    int userQueryIndex = extraPath.indexOf(\"?\");\n-                    if (userQueryIndex != 0) {\n-                        if (userQueryIndex > 0) {\n-                            extraPath = extraPath.substring(0, userQueryIndex);\n-                        }\n-                        // Adding a query marker that the state cookie has already been used to restore the path\n-                        // as deleting it now would increase the risk of CSRF\n-                        String extraQuery = \"?pathChecked=true\";\n-\n-                        // The query parameters returned from IDP need to be included\n-                        if (context.request().query() != null) {\n-                            extraQuery += (\"&\" + context.request().query());\n-                        }\n-\n-                        String localRedirectUri = buildUri(context, isForceHttps(configContext), extraPath + extraQuery);\n-                        LOG.debugf(\"Local redirect URI: %s\", localRedirectUri);\n-                        return Uni.createFrom().failure(new AuthenticationRedirectException(localRedirectUri));\n-                    } else if (userQueryIndex + 1 < extraPath.length()) {\n-                        // only the user query needs to be restored, no need to redirect\n-                        userQuery = extraPath.substring(userQueryIndex + 1);\n-                    }\n-                }\n-                // The original request path does not have to be restored, the state cookie is no longer needed\n-                removeCookie(context, configContext, getStateCookieName(configContext));\n             } else {\n+                // This is an original redirect from IDP, check if the original request path and query need to be restored\n                 String[] pair = COOKIE_PATTERN.split(stateCookie.getValue());\n                 if (pair.length == 2) {\n                     int userQueryIndex = pair[1].indexOf(\"?\");\n-                    if (userQueryIndex >= 0 && userQueryIndex + 1 < pair[1].length()) {\n-                        userQuery = pair[1].substring(userQueryIndex + 1);\n+                    if (userQueryIndex >= 0) {\n+                        userPath = pair[1].substring(0, userQueryIndex);\n+                        if (userQueryIndex + 1 < pair[1].length()) {\n+                            userQuery = pair[1].substring(userQueryIndex + 1);\n+                        }\n+                    } else {\n+                        userPath = pair[1];\n                     }\n                 }\n-                // Local redirect restoring the original request path, the state cookie is no longer needed\n                 removeCookie(context, configContext, getStateCookieName(configContext));\n             }\n-        } else if (configContext.oidcConfig.authentication.isChallengeWithoutStateCookie()) {\n-            LOG.debug(\"The state cookie is missing after a redirect from IDP, re-authentication is required\");\n-            return Uni.createFrom().optional(Optional.empty());\n         } else {\n             // State cookie must be available to minimize the risk of CSRF\n             LOG.debug(\"The state cookie is missing after a redirect from IDP, authentication has failed\");\n"}}, {"oid": "629e1b697f3e5f519b83192ce761c0b5aa45981c", "url": "https://github.com/quarkusio/quarkus/commit/629e1b697f3e5f519b83192ce761c0b5aa45981c", "message": "Support OIDC code flow custom 'code' query parameter", "committedDate": "2020-10-29T13:24:42Z", "type": "forcePushed"}, {"oid": "2cacc58a2484e3da81cf517652dad42e476e3db4", "url": "https://github.com/quarkusio/quarkus/commit/2cacc58a2484e3da81cf517652dad42e476e3db4", "message": "Support OIDC code flow custom 'code' query parameter", "committedDate": "2020-10-30T15:50:09Z", "type": "forcePushed"}, {"oid": "7c6de991ea7192c9743001b9844ed19e93f74e51", "url": "https://github.com/quarkusio/quarkus/commit/7c6de991ea7192c9743001b9844ed19e93f74e51", "message": "Support OIDC code flow custom 'code' query parameter", "committedDate": "2020-11-03T11:12:03Z", "type": "forcePushed"}, {"oid": "809f6d1ded705f2162b6ee665956f66b191bcba4", "url": "https://github.com/quarkusio/quarkus/commit/809f6d1ded705f2162b6ee665956f66b191bcba4", "message": "Support OIDC code flow custom 'code' query parameter", "committedDate": "2020-11-06T18:59:47Z", "type": "forcePushed"}, {"oid": "8657b02b2375f729254d44853e474009b59486fc", "url": "https://github.com/quarkusio/quarkus/commit/8657b02b2375f729254d44853e474009b59486fc", "message": "Support OIDC code flow custom 'code' query parameter", "committedDate": "2020-11-08T16:07:23Z", "type": "forcePushed"}, {"oid": "fa9d71dbbdaaef4c334eadacce7ca97a420bedfa", "url": "https://github.com/quarkusio/quarkus/commit/fa9d71dbbdaaef4c334eadacce7ca97a420bedfa", "message": "Support OIDC code flow custom 'code' query parameter", "committedDate": "2020-11-08T16:09:52Z", "type": "forcePushed"}, {"oid": "290520ea60da476d759db449195711a0e093b6f3", "url": "https://github.com/quarkusio/quarkus/commit/290520ea60da476d759db449195711a0e093b6f3", "message": "Support OIDC code flow custom 'code' query parameter", "committedDate": "2020-11-09T11:05:37Z", "type": "commit"}, {"oid": "290520ea60da476d759db449195711a0e093b6f3", "url": "https://github.com/quarkusio/quarkus/commit/290520ea60da476d759db449195711a0e093b6f3", "message": "Support OIDC code flow custom 'code' query parameter", "committedDate": "2020-11-09T11:05:37Z", "type": "forcePushed"}]}