{"pr_number": 11142, "pr_title": "Support for additional test-to-main directory mappings", "pr_createdAt": "2020-08-01T05:31:10Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/11142", "timeline": [{"oid": "87e2d7355dfaa951f84cb9bd5a3648af73409545", "url": "https://github.com/quarkusio/quarkus/commit/87e2d7355dfaa951f84cb9bd5a3648af73409545", "message": "Support for additional test-to-main directory mappings", "committedDate": "2020-09-21T02:14:05Z", "type": "forcePushed"}, {"oid": "b49c99f67ea8d8afafa3f9cecd07432839035761", "url": "https://github.com/quarkusio/quarkus/commit/b49c99f67ea8d8afafa3f9cecd07432839035761", "message": "Support for additional test-to-main directory mappings", "committedDate": "2020-09-21T02:42:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc3MzMyMw==", "url": "https://github.com/quarkusio/quarkus/pull/11142#discussion_r491773323", "bodyText": "@glefloch Based on my analysis, if we want to keep the code impact to a minimum, then I will need to do the following,\n\nIdentify the test sources and serialize it as part of the plugin (via the tooling API)\nRead that information in this class and associate the test-to-main mapping so that isInTestDir returns true\n\nIf this approach sounds good, then I can serialize it as part of the QuarkusPluginExtension.beforeTest() method.\nApart from the Gradle extension, is there any additional place that needs to be modified?", "author": "roguexz", "createdAt": "2020-09-21T02:52:14Z", "path": "test-framework/common/src/main/java/io/quarkus/test/common/PathTestHelper.java", "diffHunk": "@@ -99,6 +100,20 @@\n                 File.separator + \"test-classes\",\n                 File.separator + \"classes\");\n         //endregion\n+\n+        String mappings = System.getenv(\"ADDITIONAL_TEST_TO_MAIN_MAPPINGS\");", "originalCommit": "b49c99f67ea8d8afafa3f9cecd07432839035761", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg0ODMzMw==", "url": "https://github.com/quarkusio/quarkus/pull/11142#discussion_r491848333", "bodyText": "Yes, actually, we are already scanning workspace here: \n  \n    \n      quarkus/devtools/gradle/src/main/java/io/quarkus/gradle/builder/QuarkusModelBuilder.java\n    \n    \n         Line 126\n      in\n      77b772c\n    \n    \n    \n    \n\n        \n          \n           private WorkspaceModule getWorkspaceModule(Project project, LaunchMode mode) { \n        \n    \n  \n\n\nIf you can add those source set here, you will be able to get them through the model used : \n  \n    \n      quarkus/test-framework/junit5/src/main/java/io/quarkus/test/junit/QuarkusTestExtension.java\n    \n    \n         Line 199\n      in\n      77b772c\n    \n    \n    \n    \n\n        \n          \n           BuildToolHelper.enableGradleAppModel(projectRoot, \"TEST\", QuarkusModelHelper.TEST_REQUIRED_TASKS);", "author": "glefloch", "createdAt": "2020-09-21T07:48:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc3MzMyMw=="}], "type": "inlineReview", "revised_code": {"commit": "f4f780f6b0484ef9cfc71704087a61d2124f2f52", "chunk": "diff --git a/test-framework/common/src/main/java/io/quarkus/test/common/PathTestHelper.java b/test-framework/common/src/main/java/io/quarkus/test/common/PathTestHelper.java\nindex a15565229e..16f3b7b4ee 100644\n--- a/test-framework/common/src/main/java/io/quarkus/test/common/PathTestHelper.java\n+++ b/test-framework/common/src/main/java/io/quarkus/test/common/PathTestHelper.java\n\n@@ -101,7 +102,7 @@ public final class PathTestHelper {\n                 File.separator + \"classes\");\n         //endregion\n \n-        String mappings = System.getenv(\"ADDITIONAL_TEST_TO_MAIN_MAPPINGS\");\n+        String mappings = System.getenv(BootstrapConstants.TEST_TO_MAIN_MAPPINGS);\n         if (mappings != null) {\n             Stream.of(mappings.split(\",\"))\n                     .filter(s -> !s.isEmpty())\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA4OTY2Ng==", "url": "https://github.com/quarkusio/quarkus/pull/11142#discussion_r495089666", "bodyText": "Let's add `TEST_TO_MAIN_MAPPINGS\" to BootstrapConstants.", "author": "aloubyansky", "createdAt": "2020-09-25T16:08:25Z", "path": "devtools/gradle/src/main/java/io/quarkus/gradle/QuarkusPluginExtension.java", "diffHunk": "@@ -55,6 +58,23 @@ void beforeTest(Test task) {\n             final Path serializedModel = QuarkusGradleUtils.serializeAppModel(appModel, task);\n             props.put(BootstrapConstants.SERIALIZED_APP_MODEL, serializedModel.toString());\n \n+            // Identify the folder containing the sources associated with this test task\n+            StringJoiner joiner = new StringJoiner(\",\");\n+            getSourceSets().stream()\n+                    .filter(sourceSet -> Objects.equals(\n+                            task.getTestClassesDirs().getAsPath(),\n+                            sourceSet.getOutput().getClassesDirs().getAsPath()))\n+                    .flatMap(sourceSet -> sourceSet.getOutput().getClassesDirs().getFiles().stream())\n+                    .filter(File::exists)\n+                    .distinct()\n+                    .forEach(testSrcDir -> {\n+                        String mapping = String.format(\"%s:%s\",\n+                                project.relativePath(testSrcDir),\n+                                project.relativePath(outputDirectory()));\n+                        joiner.add(mapping);\n+                    });\n+            task.environment(\"TEST_TO_MAIN_MAPPINGS\", joiner.toString());", "originalCommit": "a86ec6f4deb2290451ef8c67fb956f36a15c28a5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f4f780f6b0484ef9cfc71704087a61d2124f2f52", "chunk": "diff --git a/devtools/gradle/src/main/java/io/quarkus/gradle/QuarkusPluginExtension.java b/devtools/gradle/src/main/java/io/quarkus/gradle/QuarkusPluginExtension.java\nindex a980610c20..6c3c110517 100644\n--- a/devtools/gradle/src/main/java/io/quarkus/gradle/QuarkusPluginExtension.java\n+++ b/devtools/gradle/src/main/java/io/quarkus/gradle/QuarkusPluginExtension.java\n\n@@ -73,7 +73,7 @@ public class QuarkusPluginExtension {\n                                 project.relativePath(outputDirectory()));\n                         joiner.add(mapping);\n                     });\n-            task.environment(\"TEST_TO_MAIN_MAPPINGS\", joiner.toString());\n+            task.environment(BootstrapConstants.TEST_TO_MAIN_MAPPINGS, joiner.toString());\n \n             final String nativeRunner = task.getProject().getBuildDir().toPath().resolve(finalName() + \"-runner\")\n                     .toAbsolutePath()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA5MTM3NA==", "url": "https://github.com/quarkusio/quarkus/pull/11142#discussion_r495091374", "bodyText": "I think we should throw an exception in this case instead.", "author": "aloubyansky", "createdAt": "2020-09-25T16:11:18Z", "path": "test-framework/common/src/main/java/io/quarkus/test/common/PathTestHelper.java", "diffHunk": "@@ -99,6 +100,20 @@\n                 File.separator + \"test-classes\",\n                 File.separator + \"classes\");\n         //endregion\n+\n+        String mappings = System.getenv(\"TEST_TO_MAIN_MAPPINGS\");\n+        if (mappings != null) {\n+            Stream.of(mappings.split(\",\"))\n+                    .filter(s -> !s.isEmpty())\n+                    .forEach(s -> {\n+                        String[] entry = s.split(\":\");\n+                        if (entry.length == 2) {\n+                            TEST_TO_MAIN_DIR_FRAGMENTS.put(entry[0], entry[1]);\n+                        } else {\n+                            System.err.println(\"Unable to parse additional test-to-main mapping: \" + s);", "originalCommit": "a86ec6f4deb2290451ef8c67fb956f36a15c28a5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f4f780f6b0484ef9cfc71704087a61d2124f2f52", "chunk": "diff --git a/test-framework/common/src/main/java/io/quarkus/test/common/PathTestHelper.java b/test-framework/common/src/main/java/io/quarkus/test/common/PathTestHelper.java\nindex ae4935bb5f..16f3b7b4ee 100644\n--- a/test-framework/common/src/main/java/io/quarkus/test/common/PathTestHelper.java\n+++ b/test-framework/common/src/main/java/io/quarkus/test/common/PathTestHelper.java\n\n@@ -101,7 +102,7 @@ public final class PathTestHelper {\n                 File.separator + \"classes\");\n         //endregion\n \n-        String mappings = System.getenv(\"TEST_TO_MAIN_MAPPINGS\");\n+        String mappings = System.getenv(BootstrapConstants.TEST_TO_MAIN_MAPPINGS);\n         if (mappings != null) {\n             Stream.of(mappings.split(\",\"))\n                     .filter(s -> !s.isEmpty())\n"}}, {"oid": "f4f780f6b0484ef9cfc71704087a61d2124f2f52", "url": "https://github.com/quarkusio/quarkus/commit/f4f780f6b0484ef9cfc71704087a61d2124f2f52", "message": "Incorporate review comments\n\n* Use a constant for sharing data between the two processes\n* Raise an exception if the mapping data is invalid.\n* Include a functional-test for verifying the plugin behavior", "committedDate": "2020-09-26T02:13:06Z", "type": "forcePushed"}, {"oid": "c9fe14060e68ef735919a912859a5feb7c4795ba", "url": "https://github.com/quarkusio/quarkus/commit/c9fe14060e68ef735919a912859a5feb7c4795ba", "message": "Relocate tests to the integration-tests/gradle folder", "committedDate": "2020-09-26T18:53:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgwNTQ0Mw==", "url": "https://github.com/quarkusio/quarkus/pull/11142#discussion_r495805443", "bodyText": "Instead of using forEach and an external StringJoiner, would it be better to use something more functional?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        StringJoiner joiner = new StringJoiner(\",\");\n          \n          \n            \n                        getSourceSets().stream()\n          \n          \n            \n                                .filter(sourceSet -> Objects.equals(\n          \n          \n            \n                                        task.getTestClassesDirs().getAsPath(),\n          \n          \n            \n                                        sourceSet.getOutput().getClassesDirs().getAsPath()))\n          \n          \n            \n                                .flatMap(sourceSet -> sourceSet.getOutput().getClassesDirs().getFiles().stream())\n          \n          \n            \n                                .filter(File::exists)\n          \n          \n            \n                                .distinct()\n          \n          \n            \n                                .forEach(testSrcDir -> {\n          \n          \n            \n                                    String mapping = String.format(\"%s:%s\",\n          \n          \n            \n                                            project.relativePath(testSrcDir),\n          \n          \n            \n                                            project.relativePath(outputDirectory()));\n          \n          \n            \n                                    joiner.add(mapping);\n          \n          \n            \n                                });\n          \n          \n            \n                        task.environment(BootstrapConstants.TEST_TO_MAIN_MAPPINGS, joiner.toString());\n          \n          \n            \n                        String fileList = getSourceSets().stream()\n          \n          \n            \n                                .filter(sourceSet -> Objects.equals(\n          \n          \n            \n                                        task.getTestClassesDirs().getAsPath(),\n          \n          \n            \n                                        sourceSet.getOutput().getClassesDirs().getAsPath()))\n          \n          \n            \n                                .flatMap(sourceSet -> sourceSet.getOutput().getClassesDirs().getFiles().stream())\n          \n          \n            \n                                .filter(File::exists)\n          \n          \n            \n                                .distinct()\n          \n          \n            \n                                .map(testSrcDir -> String.format(\"%s:%s\",\n          \n          \n            \n                                            project.relativePath(testSrcDir),\n          \n          \n            \n                                            project.relativePath(outputDirectory())))\n          \n          \n            \n                                .collect( Collectors.joining( \",\" ) );\n          \n          \n            \n                        task.environment(BootstrapConstants.TEST_TO_MAIN_MAPPINGS, fileList);", "author": "ebramirez", "createdAt": "2020-09-28T09:26:44Z", "path": "devtools/gradle/src/main/java/io/quarkus/gradle/QuarkusPluginExtension.java", "diffHunk": "@@ -55,6 +58,23 @@ void beforeTest(Test task) {\n             final Path serializedModel = QuarkusGradleUtils.serializeAppModel(appModel, task);\n             props.put(BootstrapConstants.SERIALIZED_APP_MODEL, serializedModel.toString());\n \n+            // Identify the folder containing the sources associated with this test task\n+            StringJoiner joiner = new StringJoiner(\",\");\n+            getSourceSets().stream()\n+                    .filter(sourceSet -> Objects.equals(\n+                            task.getTestClassesDirs().getAsPath(),\n+                            sourceSet.getOutput().getClassesDirs().getAsPath()))\n+                    .flatMap(sourceSet -> sourceSet.getOutput().getClassesDirs().getFiles().stream())\n+                    .filter(File::exists)\n+                    .distinct()\n+                    .forEach(testSrcDir -> {\n+                        String mapping = String.format(\"%s:%s\",\n+                                project.relativePath(testSrcDir),\n+                                project.relativePath(outputDirectory()));\n+                        joiner.add(mapping);\n+                    });\n+            task.environment(BootstrapConstants.TEST_TO_MAIN_MAPPINGS, joiner.toString());", "originalCommit": "c9fe14060e68ef735919a912859a5feb7c4795ba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "baf6ebbaa5ffbdc34853f6393208a2f7ad351cb9", "chunk": "diff --git a/devtools/gradle/src/main/java/io/quarkus/gradle/QuarkusPluginExtension.java b/devtools/gradle/src/main/java/io/quarkus/gradle/QuarkusPluginExtension.java\nindex 6c3c110517..49f12d0aa3 100644\n--- a/devtools/gradle/src/main/java/io/quarkus/gradle/QuarkusPluginExtension.java\n+++ b/devtools/gradle/src/main/java/io/quarkus/gradle/QuarkusPluginExtension.java\n\n@@ -59,21 +59,20 @@ public class QuarkusPluginExtension {\n             props.put(BootstrapConstants.SERIALIZED_APP_MODEL, serializedModel.toString());\n \n             // Identify the folder containing the sources associated with this test task\n-            StringJoiner joiner = new StringJoiner(\",\");\n-            getSourceSets().stream()\n+            String fileList = getSourceSets().stream()\n                     .filter(sourceSet -> Objects.equals(\n                             task.getTestClassesDirs().getAsPath(),\n                             sourceSet.getOutput().getClassesDirs().getAsPath()))\n                     .flatMap(sourceSet -> sourceSet.getOutput().getClassesDirs().getFiles().stream())\n                     .filter(File::exists)\n                     .distinct()\n-                    .forEach(testSrcDir -> {\n-                        String mapping = String.format(\"%s:%s\",\n-                                project.relativePath(testSrcDir),\n-                                project.relativePath(outputDirectory()));\n-                        joiner.add(mapping);\n-                    });\n-            task.environment(BootstrapConstants.TEST_TO_MAIN_MAPPINGS, joiner.toString());\n+                    .map(testSrcDir ->\n+                            String.format(\"%s:%s\",\n+                                    project.relativePath(testSrcDir),\n+                                    project.relativePath(outputDirectory()))\n+                    )\n+                    .collect(Collectors.joining(\",\"));\n+            task.environment(BootstrapConstants.TEST_TO_MAIN_MAPPINGS, fileList);\n \n             final String nativeRunner = task.getProject().getBuildDir().toPath().resolve(finalName() + \"-runner\")\n                     .toAbsolutePath()\n"}}, {"oid": "baf6ebbaa5ffbdc34853f6393208a2f7ad351cb9", "url": "https://github.com/quarkusio/quarkus/commit/baf6ebbaa5ffbdc34853f6393208a2f7ad351cb9", "message": "Gradle: Support for additional test-to-main directory mappings\n\n* Determine test output directory based on the task\n* Raise an exception if the mapping data is invalid.\n* Include a functional-test for verifying the plugin behavior", "committedDate": "2020-09-28T15:49:13Z", "type": "forcePushed"}, {"oid": "48fa25b0cf0749d690f45107daba28a1b72f06d1", "url": "https://github.com/quarkusio/quarkus/commit/48fa25b0cf0749d690f45107daba28a1b72f06d1", "message": "Gradle: Support for additional test-to-main directory mappings\n\n* Determine test output directory based on the task\n* Raise an exception if the mapping data is invalid.\n* Include a functional-test for verifying the plugin behavior", "committedDate": "2020-09-28T17:52:35Z", "type": "commit"}, {"oid": "48fa25b0cf0749d690f45107daba28a1b72f06d1", "url": "https://github.com/quarkusio/quarkus/commit/48fa25b0cf0749d690f45107daba28a1b72f06d1", "message": "Gradle: Support for additional test-to-main directory mappings\n\n* Determine test output directory based on the task\n* Raise an exception if the mapping data is invalid.\n* Include a functional-test for verifying the plugin behavior", "committedDate": "2020-09-28T17:52:35Z", "type": "forcePushed"}]}