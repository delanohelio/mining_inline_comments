{"pr_number": 13801, "pr_title": "Order REST resources on 404 Resources overview", "pr_createdAt": "2020-12-10T10:24:09Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/13801", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE2Njg2OQ==", "url": "https://github.com/quarkusio/quarkus/pull/13801#discussion_r544166869", "bodyText": "So that's a good idea IMHO and this should get in.\nAny chance you could get rid of the lambdas? We try to avoid them in runtime code as they have a memory cost.\nThanks!", "author": "gsmet", "createdAt": "2020-12-16T10:02:34Z", "path": "extensions/resteasy/runtime/src/main/java/io/quarkus/resteasy/runtime/NotFoundExceptionMapper.java", "diffHunk": "@@ -215,6 +214,13 @@ public Response toResponse(NotFoundException exception) {\n                 .fromBoundResourceInvokers(bounded\n                         .entrySet());\n \n+        descriptions.sort(Comparator.comparing(description -> description.basePath));\n+        for (ResourceDescription description : descriptions) {\n+            description.calls.sort(\n+                    Comparator.comparing((MethodDescription methodDesc) -> methodDesc.fullPath)", "originalCommit": "53eae4d211afdf93620bbaa150ab3c910944cffd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI5ODU2Ng==", "url": "https://github.com/quarkusio/quarkus/pull/13801#discussion_r544298566", "bodyText": "@gsmet\nI changed it. Is it okay to create the Comparator inline like in the current version or do you prefer a static class?", "author": "renegrob", "createdAt": "2020-12-16T13:30:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE2Njg2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMwMDYyNg==", "url": "https://github.com/quarkusio/quarkus/pull/13801#discussion_r544300626", "bodyText": "I would make it a static class.", "author": "gsmet", "createdAt": "2020-12-16T13:33:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE2Njg2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMzOTk3Nw==", "url": "https://github.com/quarkusio/quarkus/pull/13801#discussion_r544339977", "bodyText": "Done. Let me know if there's anything to improve.", "author": "renegrob", "createdAt": "2020-12-16T14:26:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE2Njg2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "80186b7b4ce20c8011a258b64f4a633a12a5dbf2", "chunk": "diff --git a/extensions/resteasy/runtime/src/main/java/io/quarkus/resteasy/runtime/NotFoundExceptionMapper.java b/extensions/resteasy/runtime/src/main/java/io/quarkus/resteasy/runtime/NotFoundExceptionMapper.java\nindex aeda843ceb..41a0db19a2 100644\n--- a/extensions/resteasy/runtime/src/main/java/io/quarkus/resteasy/runtime/NotFoundExceptionMapper.java\n+++ b/extensions/resteasy/runtime/src/main/java/io/quarkus/resteasy/runtime/NotFoundExceptionMapper.java\n\n@@ -214,11 +214,22 @@ public class NotFoundExceptionMapper implements ExceptionMapper<NotFoundExceptio\n                 .fromBoundResourceInvokers(bounded\n                         .entrySet());\n \n-        descriptions.sort(Comparator.comparing(description -> description.basePath));\n+        descriptions.sort(\n+                new Comparator<ResourceDescription>() {\n+                  @Override\n+                  public int compare(ResourceDescription d1, ResourceDescription d2) {\n+                      return d1.basePath.compareTo(d2.basePath);\n+                  }\n+              });\n         for (ResourceDescription description : descriptions) {\n             description.calls.sort(\n-                    Comparator.comparing((MethodDescription methodDesc) -> methodDesc.fullPath)\n-                            .thenComparing(methodDesc -> methodDesc.method));\n+                    new Comparator<MethodDescription>() {\n+                        @Override\n+                        public int compare(MethodDescription m1, MethodDescription m2) {\n+                            int fullPathComparison = m1.fullPath.compareTo(m2.fullPath);\n+                            return fullPathComparison == 0 ? m1.method.compareTo(m2.method) : fullPathComparison;\n+                        }\n+                    });\n         }\n \n         return respond(descriptions);\n"}}, {"oid": "80186b7b4ce20c8011a258b64f4a633a12a5dbf2", "url": "https://github.com/quarkusio/quarkus/commit/80186b7b4ce20c8011a258b64f4a633a12a5dbf2", "message": "Order REST resources on Resources overview alphabetically", "committedDate": "2020-12-16T13:27:36Z", "type": "forcePushed"}, {"oid": "1b5a419673cac2ddccb9821497ddb055d5100fac", "url": "https://github.com/quarkusio/quarkus/commit/1b5a419673cac2ddccb9821497ddb055d5100fac", "message": "Order REST resources on Resources overview alphabetically", "committedDate": "2020-12-16T14:24:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQzMDU4OQ==", "url": "https://github.com/quarkusio/quarkus/pull/13801#discussion_r544430589", "bodyText": "I think I would have moved this to fromBoundResourceInvokers but it's a detail.\nCan you take care of it, squash everything and put this out of draft?", "author": "gsmet", "createdAt": "2020-12-16T16:16:03Z", "path": "extensions/resteasy/runtime/src/main/java/io/quarkus/resteasy/runtime/NotFoundExceptionMapper.java", "diffHunk": "@@ -215,6 +216,11 @@ public Response toResponse(NotFoundException exception) {\n                 .fromBoundResourceInvokers(bounded\n                         .entrySet());\n \n+        descriptions.sort(RESOURCE_DESCRIPTION_COMPARATOR);\n+        for (ResourceDescription description : descriptions) {\n+            description.calls.sort(METHOD_DESCRIPTION_COMPARATOR);\n+        }", "originalCommit": "1b5a419673cac2ddccb9821497ddb055d5100fac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkyMjMyMw==", "url": "https://github.com/quarkusio/quarkus/pull/13801#discussion_r544922323", "bodyText": "Okay, I moved it into fromBoundResourceInvokers.", "author": "renegrob", "createdAt": "2020-12-17T09:05:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQzMDU4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "9a3f2fef93c7511efd70af77491240f4a237c11b", "chunk": "diff --git a/extensions/resteasy/runtime/src/main/java/io/quarkus/resteasy/runtime/NotFoundExceptionMapper.java b/extensions/resteasy/runtime/src/main/java/io/quarkus/resteasy/runtime/NotFoundExceptionMapper.java\nindex e241c43cc6..ffc39c0370 100644\n--- a/extensions/resteasy/runtime/src/main/java/io/quarkus/resteasy/runtime/NotFoundExceptionMapper.java\n+++ b/extensions/resteasy/runtime/src/main/java/io/quarkus/resteasy/runtime/NotFoundExceptionMapper.java\n\n@@ -216,11 +221,6 @@ public class NotFoundExceptionMapper implements ExceptionMapper<NotFoundExceptio\n                 .fromBoundResourceInvokers(bounded\n                         .entrySet());\n \n-        descriptions.sort(RESOURCE_DESCRIPTION_COMPARATOR);\n-        for (ResourceDescription description : descriptions) {\n-            description.calls.sort(METHOD_DESCRIPTION_COMPARATOR);\n-        }\n-\n         return respond(descriptions);\n     }\n \n"}}, {"oid": "9a3f2fef93c7511efd70af77491240f4a237c11b", "url": "https://github.com/quarkusio/quarkus/commit/9a3f2fef93c7511efd70af77491240f4a237c11b", "message": "Order REST resources on Resources overview alphabetically", "committedDate": "2020-12-17T09:03:41Z", "type": "commit"}, {"oid": "9a3f2fef93c7511efd70af77491240f4a237c11b", "url": "https://github.com/quarkusio/quarkus/commit/9a3f2fef93c7511efd70af77491240f4a237c11b", "message": "Order REST resources on Resources overview alphabetically", "committedDate": "2020-12-17T09:03:41Z", "type": "forcePushed"}]}