{"pr_number": 7691, "pr_title": "Add some Kubernetes Client build time improvements", "pr_createdAt": "2020-03-09T11:57:36Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/7691", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYyMDEwNg==", "url": "https://github.com/quarkusio/quarkus/pull/7691#discussion_r389620106", "bodyText": "I think we should keep it as is as it's probably what users will do. At least, we shouldn't see that as solving the issue.", "author": "gsmet", "createdAt": "2020-03-09T12:09:24Z", "path": "integration-tests/kubernetes-client/src/main/java/io/quarkus/it/kubernetes/client/Pods.java", "diffHunk": "@@ -28,8 +28,8 @@ public Pods(KubernetesClient kubernetesClient) {\n     @GET\n     @Produces(MediaType.APPLICATION_JSON)\n     @Path(\"/{namespace}\")\n-    public List<Pod> pods(@PathParam(\"namespace\") String namespace) {\n-        return kubernetesClient.pods().inNamespace(namespace).list().getItems();\n+    public Response pods(@PathParam(\"namespace\") String namespace) {\n+        return Response.ok(kubernetesClient.pods().inNamespace(namespace).list().getItems()).build();", "originalCommit": "2c51ea75fc70ff60b5c69aae2b8c7d13ba806a9b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYyMDc4MQ==", "url": "https://github.com/quarkusio/quarkus/pull/7691#discussion_r389620781", "bodyText": "I don't agree, at least not in the context of the integration test. The fact that we were returning Pod meant that the entire model hierarchy was being registered for reflection, which we definitely want to avoid", "author": "geoand", "createdAt": "2020-03-09T12:10:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYyMDEwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY1ODc1Mg==", "url": "https://github.com/quarkusio/quarkus/pull/7691#discussion_r389658752", "bodyText": "Also if people are looking at integration tests as a model to create their applications, then all the more reason to show them the \"better\" way of doing this for this use case", "author": "geoand", "createdAt": "2020-03-09T13:24:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYyMDEwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc5MzM3NQ==", "url": "https://github.com/quarkusio/quarkus/pull/7691#discussion_r389793375", "bodyText": "I don't know.\nI mean: we need them to be registered for reflection somehow, don't we? Otherwise it won't work well in native image. If our REST-based registration logic doesn't work very well, maybe we need to reconsider it globally?", "author": "gsmet", "createdAt": "2020-03-09T16:07:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYyMDEwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc5Nzc2OA==", "url": "https://github.com/quarkusio/quarkus/pull/7691#discussion_r389797768", "bodyText": "The Kubernetes Model classes are already registered by the Kubernetes extension (weakly) - and that is why the native test works :)", "author": "geoand", "createdAt": "2020-03-09T16:14:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYyMDEwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgwMzgxNQ==", "url": "https://github.com/quarkusio/quarkus/pull/7691#discussion_r389803815", "bodyText": "Yes I know that. What I'm wondering is: should we generalize that or not? So that the model can be used in the REST API calls without thinking twice about it.\nI'm unsure about the consequences thus the reason I ask.", "author": "gsmet", "createdAt": "2020-03-09T16:23:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYyMDEwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgwOTA2Nw==", "url": "https://github.com/quarkusio/quarkus/pull/7691#discussion_r389809067", "bodyText": "You can use it now without having to do anything. The use of Pod as a result type was really an oversight on my part when I created the integration test, it shouldn't have been done that way because it basically shadows the reflection registration that the Kubernetes extensions does by bringing the RESTEasy reflection generation in the mix", "author": "geoand", "createdAt": "2020-03-09T16:31:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYyMDEwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgxMDQyMg==", "url": "https://github.com/quarkusio/quarkus/pull/7691#discussion_r389810422", "bodyText": "Users will do that. You can be sure of that. So should we change the RESTEasy reflection registration to be weak too?\nThat's what I'm trying to ask since the beginning :).", "author": "gsmet", "createdAt": "2020-03-09T16:33:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYyMDEwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgxMjI4Ng==", "url": "https://github.com/quarkusio/quarkus/pull/7691#discussion_r389812286", "bodyText": "We can certainly do that, but I think it should be a following PR. We would need to do introduce a new Build Item that would be consumed by RESTEasy - or maybe it needs to be even more generalized (by forcing the weak flag)", "author": "geoand", "createdAt": "2020-03-09T16:36:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYyMDEwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkyOTc0NQ==", "url": "https://github.com/quarkusio/quarkus/pull/7691#discussion_r389929745", "bodyText": "Furthermore, we haven't had any users complain so far, so I maybe we shouldn't add extra complexity unless it's necessary", "author": "geoand", "createdAt": "2020-03-09T20:03:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYyMDEwNg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "eab6c76a116e9ca0653fb5b91365d95a7132dea9", "url": "https://github.com/quarkusio/quarkus/commit/eab6c76a116e9ca0653fb5b91365d95a7132dea9", "message": "Reduce number of reflection data fed to GraalVM for the k8s model", "committedDate": "2020-03-09T14:34:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg4NjE1OQ==", "url": "https://github.com/quarkusio/quarkus/pull/7691#discussion_r389886159", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    private boolean weak = false;\n          \n          \n            \n                    private boolean weak;", "author": "gastaldi", "createdAt": "2020-03-09T18:38:52Z", "path": "core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/ReflectiveClassBuildItem.java", "diffHunk": "@@ -121,6 +121,7 @@ public static Builder builder(String... className) {\n         private boolean methods;\n         private boolean fields;\n         private boolean finalFieldsWritable;\n+        private boolean weak = false;", "originalCommit": "eab6c76a116e9ca0653fb5b91365d95a7132dea9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkyOTQ0NA==", "url": "https://github.com/quarkusio/quarkus/pull/7691#discussion_r389929444", "bodyText": "Done", "author": "geoand", "createdAt": "2020-03-09T20:02:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg4NjE1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "3dc292d658d737cdb68b0c99884cf3823e5f0edd", "chunk": "diff --git a/core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/ReflectiveClassBuildItem.java b/core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/ReflectiveClassBuildItem.java\nindex ff5a903ebd..b5e9db4f87 100644\n--- a/core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/ReflectiveClassBuildItem.java\n+++ b/core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/ReflectiveClassBuildItem.java\n\n@@ -121,7 +121,6 @@ public final class ReflectiveClassBuildItem extends MultiBuildItem {\n         private boolean methods;\n         private boolean fields;\n         private boolean finalFieldsWritable;\n-        private boolean weak = false;\n \n         private Builder() {\n         }\n"}}, {"oid": "3dc292d658d737cdb68b0c99884cf3823e5f0edd", "url": "https://github.com/quarkusio/quarkus/commit/3dc292d658d737cdb68b0c99884cf3823e5f0edd", "message": "Prevent k8s-client integration test from registering for reflection", "committedDate": "2020-03-09T20:01:36Z", "type": "commit"}, {"oid": "db044008a94c38af491967f5d80097b3b0942d38", "url": "https://github.com/quarkusio/quarkus/commit/db044008a94c38af491967f5d80097b3b0942d38", "message": "Ensure that k8s-client extension doesn't register entire model for reflection", "committedDate": "2020-03-09T20:01:36Z", "type": "commit"}, {"oid": "d6af9299fe29b983d4034e7f17441bd717d421e9", "url": "https://github.com/quarkusio/quarkus/commit/d6af9299fe29b983d4034e7f17441bd717d421e9", "message": "Reduce number of reflection data fed to GraalVM for the k8s model", "committedDate": "2020-03-09T20:02:11Z", "type": "commit"}, {"oid": "d6af9299fe29b983d4034e7f17441bd717d421e9", "url": "https://github.com/quarkusio/quarkus/commit/d6af9299fe29b983d4034e7f17441bd717d421e9", "message": "Reduce number of reflection data fed to GraalVM for the k8s model", "committedDate": "2020-03-09T20:02:11Z", "type": "forcePushed"}]}