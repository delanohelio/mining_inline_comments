{"pr_number": 14053, "pr_title": "@TransactionScoped Context does not call @Predestroy on TransactionScoped Beans", "pr_createdAt": "2020-12-25T08:37:58Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/14053", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0MDU0MA==", "url": "https://github.com/quarkusio/quarkus/pull/14053#discussion_r551440540", "bodyText": "Could you clarify why this needs to be a CopyOnWriteArraySet, and perhaps add a comment to the code?", "author": "Sanne", "createdAt": "2021-01-04T16:55:55Z", "path": "extensions/narayana-jta/runtime/src/main/java/io/quarkus/narayana/jta/runtime/context/TransactionScopeCleanup.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package io.quarkus.narayana.jta.runtime.context;\n+\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+\n+import javax.enterprise.context.spi.Contextual;\n+import javax.enterprise.context.spi.CreationalContext;\n+import javax.transaction.RollbackException;\n+import javax.transaction.Synchronization;\n+import javax.transaction.SystemException;\n+import javax.transaction.Transaction;\n+\n+public class TransactionScopeCleanup<T> implements Synchronization {\n+    private Set<TransactionScopedBean> beans;\n+    private TransactionContext context;\n+    private Transaction transaction;\n+\n+    public TransactionScopeCleanup(TransactionContext context, Transaction transaction) {\n+        this.context = context;\n+        this.transaction = transaction;\n+        this.beans = new CopyOnWriteArraySet<TransactionScopedBean>();", "originalCommit": "cbc452e4d5148ace79021708c412001b5a3820e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0MTU1NA==", "url": "https://github.com/quarkusio/quarkus/pull/14053#discussion_r551441554", "bodyText": "Also, if this instance is meant to be accessed concurrently (which the use of the CopyOnWrite seems to suggest), then the fields perhaps need to be declared final ?", "author": "Sanne", "createdAt": "2021-01-04T16:57:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0MDU0MA=="}], "type": "inlineReview", "revised_code": {"commit": "79cc2a899b2fb56d251fd02ad526462834e9bd21", "chunk": "diff --git a/extensions/narayana-jta/runtime/src/main/java/io/quarkus/narayana/jta/runtime/context/TransactionScopeCleanup.java b/extensions/narayana-jta/runtime/src/main/java/io/quarkus/narayana/jta/runtime/context/TransactionScopeCleanup.java\ndeleted file mode 100644\nindex 5d5b680416..0000000000\n--- a/extensions/narayana-jta/runtime/src/main/java/io/quarkus/narayana/jta/runtime/context/TransactionScopeCleanup.java\n+++ /dev/null\n\n@@ -1,64 +0,0 @@\n-package io.quarkus.narayana.jta.runtime.context;\n-\n-import java.util.Set;\n-import java.util.concurrent.CopyOnWriteArraySet;\n-\n-import javax.enterprise.context.spi.Contextual;\n-import javax.enterprise.context.spi.CreationalContext;\n-import javax.transaction.RollbackException;\n-import javax.transaction.Synchronization;\n-import javax.transaction.SystemException;\n-import javax.transaction.Transaction;\n-\n-public class TransactionScopeCleanup<T> implements Synchronization {\n-    private Set<TransactionScopedBean> beans;\n-    private TransactionContext context;\n-    private Transaction transaction;\n-\n-    public TransactionScopeCleanup(TransactionContext context, Transaction transaction) {\n-        this.context = context;\n-        this.transaction = transaction;\n-        this.beans = new CopyOnWriteArraySet<TransactionScopedBean>();\n-\n-        try {\n-            transaction.registerSynchronization(this);\n-        } catch (RollbackException e) {\n-            throw new RuntimeException(\"Cannot register synchronization because the transaction is in aborted state\");\n-        } catch (SystemException e) {\n-            throw new RuntimeException(\"null synchronization parameter!\");\n-        }\n-    }\n-\n-    public void registerBean(Contextual<T> contextual, CreationalContext<T> creationalContext, T bean) {\n-        beans.add(new TransactionScopedBean<>(contextual, creationalContext, bean));\n-    }\n-\n-    @Override\n-    public void beforeCompletion() {\n-    }\n-\n-    @Override\n-    public void afterCompletion(int i) {\n-        for (TransactionScopedBean bean : beans)\n-            bean.destroy();\n-\n-        context.cleanupScope(transaction);\n-    }\n-\n-    private class TransactionScopedBean<T> {\n-        Contextual<T> contextual;\n-        CreationalContext<T> creationalContext;\n-        T bean;\n-\n-        private TransactionScopedBean(Contextual<T> contextual, CreationalContext<T> creationalContext, T bean) {\n-            this.contextual = contextual;\n-            this.creationalContext = creationalContext;\n-            this.bean = bean;\n-        }\n-\n-        public <T> void destroy() {\n-            contextual.destroy(bean, creationalContext);\n-        }\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0MjQyNQ==", "url": "https://github.com/quarkusio/quarkus/pull/14053#discussion_r551442425", "bodyText": "this could be marked static and final", "author": "Sanne", "createdAt": "2021-01-04T16:58:48Z", "path": "extensions/narayana-jta/runtime/src/main/java/io/quarkus/narayana/jta/runtime/context/TransactionScopeCleanup.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package io.quarkus.narayana.jta.runtime.context;\n+\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+\n+import javax.enterprise.context.spi.Contextual;\n+import javax.enterprise.context.spi.CreationalContext;\n+import javax.transaction.RollbackException;\n+import javax.transaction.Synchronization;\n+import javax.transaction.SystemException;\n+import javax.transaction.Transaction;\n+\n+public class TransactionScopeCleanup<T> implements Synchronization {\n+    private Set<TransactionScopedBean> beans;\n+    private TransactionContext context;\n+    private Transaction transaction;\n+\n+    public TransactionScopeCleanup(TransactionContext context, Transaction transaction) {\n+        this.context = context;\n+        this.transaction = transaction;\n+        this.beans = new CopyOnWriteArraySet<TransactionScopedBean>();\n+\n+        try {\n+            transaction.registerSynchronization(this);\n+        } catch (RollbackException e) {\n+            throw new RuntimeException(\"Cannot register synchronization because the transaction is in aborted state\");\n+        } catch (SystemException e) {\n+            throw new RuntimeException(\"null synchronization parameter!\");\n+        }\n+    }\n+\n+    public void registerBean(Contextual<T> contextual, CreationalContext<T> creationalContext, T bean) {\n+        beans.add(new TransactionScopedBean<>(contextual, creationalContext, bean));\n+    }\n+\n+    @Override\n+    public void beforeCompletion() {\n+    }\n+\n+    @Override\n+    public void afterCompletion(int i) {\n+        for (TransactionScopedBean bean : beans)\n+            bean.destroy();\n+\n+        context.cleanupScope(transaction);\n+    }\n+\n+    private class TransactionScopedBean<T> {", "originalCommit": "cbc452e4d5148ace79021708c412001b5a3820e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "79cc2a899b2fb56d251fd02ad526462834e9bd21", "chunk": "diff --git a/extensions/narayana-jta/runtime/src/main/java/io/quarkus/narayana/jta/runtime/context/TransactionScopeCleanup.java b/extensions/narayana-jta/runtime/src/main/java/io/quarkus/narayana/jta/runtime/context/TransactionScopeCleanup.java\ndeleted file mode 100644\nindex 5d5b680416..0000000000\n--- a/extensions/narayana-jta/runtime/src/main/java/io/quarkus/narayana/jta/runtime/context/TransactionScopeCleanup.java\n+++ /dev/null\n\n@@ -1,64 +0,0 @@\n-package io.quarkus.narayana.jta.runtime.context;\n-\n-import java.util.Set;\n-import java.util.concurrent.CopyOnWriteArraySet;\n-\n-import javax.enterprise.context.spi.Contextual;\n-import javax.enterprise.context.spi.CreationalContext;\n-import javax.transaction.RollbackException;\n-import javax.transaction.Synchronization;\n-import javax.transaction.SystemException;\n-import javax.transaction.Transaction;\n-\n-public class TransactionScopeCleanup<T> implements Synchronization {\n-    private Set<TransactionScopedBean> beans;\n-    private TransactionContext context;\n-    private Transaction transaction;\n-\n-    public TransactionScopeCleanup(TransactionContext context, Transaction transaction) {\n-        this.context = context;\n-        this.transaction = transaction;\n-        this.beans = new CopyOnWriteArraySet<TransactionScopedBean>();\n-\n-        try {\n-            transaction.registerSynchronization(this);\n-        } catch (RollbackException e) {\n-            throw new RuntimeException(\"Cannot register synchronization because the transaction is in aborted state\");\n-        } catch (SystemException e) {\n-            throw new RuntimeException(\"null synchronization parameter!\");\n-        }\n-    }\n-\n-    public void registerBean(Contextual<T> contextual, CreationalContext<T> creationalContext, T bean) {\n-        beans.add(new TransactionScopedBean<>(contextual, creationalContext, bean));\n-    }\n-\n-    @Override\n-    public void beforeCompletion() {\n-    }\n-\n-    @Override\n-    public void afterCompletion(int i) {\n-        for (TransactionScopedBean bean : beans)\n-            bean.destroy();\n-\n-        context.cleanupScope(transaction);\n-    }\n-\n-    private class TransactionScopedBean<T> {\n-        Contextual<T> contextual;\n-        CreationalContext<T> creationalContext;\n-        T bean;\n-\n-        private TransactionScopedBean(Contextual<T> contextual, CreationalContext<T> creationalContext, T bean) {\n-            this.contextual = contextual;\n-            this.creationalContext = creationalContext;\n-            this.bean = bean;\n-        }\n-\n-        public <T> void destroy() {\n-            contextual.destroy(bean, creationalContext);\n-        }\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0MjUzNg==", "url": "https://github.com/quarkusio/quarkus/pull/14053#discussion_r551442536", "bodyText": "fields should be all final ?", "author": "Sanne", "createdAt": "2021-01-04T16:59:01Z", "path": "extensions/narayana-jta/runtime/src/main/java/io/quarkus/narayana/jta/runtime/context/TransactionScopeCleanup.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package io.quarkus.narayana.jta.runtime.context;\n+\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+\n+import javax.enterprise.context.spi.Contextual;\n+import javax.enterprise.context.spi.CreationalContext;\n+import javax.transaction.RollbackException;\n+import javax.transaction.Synchronization;\n+import javax.transaction.SystemException;\n+import javax.transaction.Transaction;\n+\n+public class TransactionScopeCleanup<T> implements Synchronization {\n+    private Set<TransactionScopedBean> beans;\n+    private TransactionContext context;\n+    private Transaction transaction;\n+\n+    public TransactionScopeCleanup(TransactionContext context, Transaction transaction) {\n+        this.context = context;\n+        this.transaction = transaction;\n+        this.beans = new CopyOnWriteArraySet<TransactionScopedBean>();\n+\n+        try {\n+            transaction.registerSynchronization(this);\n+        } catch (RollbackException e) {\n+            throw new RuntimeException(\"Cannot register synchronization because the transaction is in aborted state\");\n+        } catch (SystemException e) {\n+            throw new RuntimeException(\"null synchronization parameter!\");\n+        }\n+    }\n+\n+    public void registerBean(Contextual<T> contextual, CreationalContext<T> creationalContext, T bean) {\n+        beans.add(new TransactionScopedBean<>(contextual, creationalContext, bean));\n+    }\n+\n+    @Override\n+    public void beforeCompletion() {\n+    }\n+\n+    @Override\n+    public void afterCompletion(int i) {\n+        for (TransactionScopedBean bean : beans)\n+            bean.destroy();\n+\n+        context.cleanupScope(transaction);\n+    }\n+\n+    private class TransactionScopedBean<T> {\n+        Contextual<T> contextual;\n+        CreationalContext<T> creationalContext;\n+        T bean;", "originalCommit": "cbc452e4d5148ace79021708c412001b5a3820e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "79cc2a899b2fb56d251fd02ad526462834e9bd21", "chunk": "diff --git a/extensions/narayana-jta/runtime/src/main/java/io/quarkus/narayana/jta/runtime/context/TransactionScopeCleanup.java b/extensions/narayana-jta/runtime/src/main/java/io/quarkus/narayana/jta/runtime/context/TransactionScopeCleanup.java\ndeleted file mode 100644\nindex 5d5b680416..0000000000\n--- a/extensions/narayana-jta/runtime/src/main/java/io/quarkus/narayana/jta/runtime/context/TransactionScopeCleanup.java\n+++ /dev/null\n\n@@ -1,64 +0,0 @@\n-package io.quarkus.narayana.jta.runtime.context;\n-\n-import java.util.Set;\n-import java.util.concurrent.CopyOnWriteArraySet;\n-\n-import javax.enterprise.context.spi.Contextual;\n-import javax.enterprise.context.spi.CreationalContext;\n-import javax.transaction.RollbackException;\n-import javax.transaction.Synchronization;\n-import javax.transaction.SystemException;\n-import javax.transaction.Transaction;\n-\n-public class TransactionScopeCleanup<T> implements Synchronization {\n-    private Set<TransactionScopedBean> beans;\n-    private TransactionContext context;\n-    private Transaction transaction;\n-\n-    public TransactionScopeCleanup(TransactionContext context, Transaction transaction) {\n-        this.context = context;\n-        this.transaction = transaction;\n-        this.beans = new CopyOnWriteArraySet<TransactionScopedBean>();\n-\n-        try {\n-            transaction.registerSynchronization(this);\n-        } catch (RollbackException e) {\n-            throw new RuntimeException(\"Cannot register synchronization because the transaction is in aborted state\");\n-        } catch (SystemException e) {\n-            throw new RuntimeException(\"null synchronization parameter!\");\n-        }\n-    }\n-\n-    public void registerBean(Contextual<T> contextual, CreationalContext<T> creationalContext, T bean) {\n-        beans.add(new TransactionScopedBean<>(contextual, creationalContext, bean));\n-    }\n-\n-    @Override\n-    public void beforeCompletion() {\n-    }\n-\n-    @Override\n-    public void afterCompletion(int i) {\n-        for (TransactionScopedBean bean : beans)\n-            bean.destroy();\n-\n-        context.cleanupScope(transaction);\n-    }\n-\n-    private class TransactionScopedBean<T> {\n-        Contextual<T> contextual;\n-        CreationalContext<T> creationalContext;\n-        T bean;\n-\n-        private TransactionScopedBean(Contextual<T> contextual, CreationalContext<T> creationalContext, T bean) {\n-            this.contextual = contextual;\n-            this.creationalContext = creationalContext;\n-            this.bean = bean;\n-        }\n-\n-        public <T> void destroy() {\n-            contextual.destroy(bean, creationalContext);\n-        }\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0MzQyMg==", "url": "https://github.com/quarkusio/quarkus/pull/14053#discussion_r551443422", "bodyText": "these two fields need to be final", "author": "Sanne", "createdAt": "2021-01-04T17:00:27Z", "path": "integration-tests/narayana-jta/src/main/java/io/quarkus/narayana/jta/TransactionScopedBean.java", "diffHunk": "@@ -1,9 +1,17 @@\n package io.quarkus.narayana.jta;\n \n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import javax.annotation.PostConstruct;\n+import javax.annotation.PreDestroy;\n import javax.transaction.TransactionScoped;\n \n @TransactionScoped\n public class TransactionScopedBean {\n+\n+    private static AtomicInteger initializedCount = new AtomicInteger(0);\n+    private static AtomicInteger destroyedCount = new AtomicInteger(0);", "originalCommit": "cbc452e4d5148ace79021708c412001b5a3820e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "79cc2a899b2fb56d251fd02ad526462834e9bd21", "chunk": "diff --git a/integration-tests/narayana-jta/src/main/java/io/quarkus/narayana/jta/TransactionScopedBean.java b/integration-tests/narayana-jta/src/main/java/io/quarkus/narayana/jta/TransactionScopedBean.java\nindex 726bc2d34b..2ebbe16150 100644\n--- a/integration-tests/narayana-jta/src/main/java/io/quarkus/narayana/jta/TransactionScopedBean.java\n+++ b/integration-tests/narayana-jta/src/main/java/io/quarkus/narayana/jta/TransactionScopedBean.java\n\n@@ -9,8 +9,8 @@ import javax.transaction.TransactionScoped;\n @TransactionScoped\n public class TransactionScopedBean {\n \n-    private static AtomicInteger initializedCount = new AtomicInteger(0);\n-    private static AtomicInteger destroyedCount = new AtomicInteger(0);\n+    private static final AtomicInteger initializedCount = new AtomicInteger(0);\n+    private static final AtomicInteger destroyedCount = new AtomicInteger(0);\n \n     private int value = 0;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0MzgyNA==", "url": "https://github.com/quarkusio/quarkus/pull/14053#discussion_r551443824", "bodyText": "Could you give this a different name? You're adding two classes with this name; I understand it's not a problem as they are in a different package, but it's a bit unpractical to have two around.", "author": "Sanne", "createdAt": "2021-01-04T17:01:14Z", "path": "integration-tests/narayana-jta/src/main/java/io/quarkus/narayana/jta/TransactionScopedBean.java", "diffHunk": "@@ -1,9 +1,17 @@\n package io.quarkus.narayana.jta;\n \n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import javax.annotation.PostConstruct;\n+import javax.annotation.PreDestroy;\n import javax.transaction.TransactionScoped;\n \n @TransactionScoped\n public class TransactionScopedBean {", "originalCommit": "cbc452e4d5148ace79021708c412001b5a3820e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "79cc2a899b2fb56d251fd02ad526462834e9bd21", "chunk": "diff --git a/integration-tests/narayana-jta/src/main/java/io/quarkus/narayana/jta/TransactionScopedBean.java b/integration-tests/narayana-jta/src/main/java/io/quarkus/narayana/jta/TransactionScopedBean.java\nindex 726bc2d34b..2ebbe16150 100644\n--- a/integration-tests/narayana-jta/src/main/java/io/quarkus/narayana/jta/TransactionScopedBean.java\n+++ b/integration-tests/narayana-jta/src/main/java/io/quarkus/narayana/jta/TransactionScopedBean.java\n\n@@ -9,8 +9,8 @@ import javax.transaction.TransactionScoped;\n @TransactionScoped\n public class TransactionScopedBean {\n \n-    private static AtomicInteger initializedCount = new AtomicInteger(0);\n-    private static AtomicInteger destroyedCount = new AtomicInteger(0);\n+    private static final AtomicInteger initializedCount = new AtomicInteger(0);\n+    private static final AtomicInteger destroyedCount = new AtomicInteger(0);\n \n     private int value = 0;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0NTA5Mw==", "url": "https://github.com/quarkusio/quarkus/pull/14053#discussion_r551445093", "bodyText": "I'd prefer this to use a ConcurrentMap, so to not need synchronized on it further below.", "author": "Sanne", "createdAt": "2021-01-04T17:03:20Z", "path": "extensions/narayana-jta/runtime/src/main/java/io/quarkus/narayana/jta/runtime/context/TransactionContext.java", "diffHunk": "@@ -32,6 +33,7 @@\n \n     private final TransactionSynchronizationRegistry transactionSynchronizationRegistry = new TransactionSynchronizationRegistryImple();\n     private final TransactionManager transactionManager = com.arjuna.ats.jta.TransactionManager.transactionManager();\n+    private final Map<Transaction, TransactionScopeCleanup<?>> transactions = new HashMap<>();", "originalCommit": "cbc452e4d5148ace79021708c412001b5a3820e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "79cc2a899b2fb56d251fd02ad526462834e9bd21", "chunk": "diff --git a/extensions/narayana-jta/runtime/src/main/java/io/quarkus/narayana/jta/runtime/context/TransactionContext.java b/extensions/narayana-jta/runtime/src/main/java/io/quarkus/narayana/jta/runtime/context/TransactionContext.java\nindex ab1d2bedc1..4d87fbbfbe 100644\n--- a/extensions/narayana-jta/runtime/src/main/java/io/quarkus/narayana/jta/runtime/context/TransactionContext.java\n+++ b/extensions/narayana-jta/runtime/src/main/java/io/quarkus/narayana/jta/runtime/context/TransactionContext.java\n\n@@ -33,7 +34,6 @@ public class TransactionContext implements InjectableContext {\n \n     private final TransactionSynchronizationRegistry transactionSynchronizationRegistry = new TransactionSynchronizationRegistryImple();\n     private final TransactionManager transactionManager = com.arjuna.ats.jta.TransactionManager.transactionManager();\n-    private final Map<Transaction, TransactionScopeCleanup<?>> transactions = new HashMap<>();\n \n     @Override\n     public void destroy() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0NTQ0MA==", "url": "https://github.com/quarkusio/quarkus/pull/14053#discussion_r551445440", "bodyText": "after making the transactions Map a ConcurrentMap, the synchronized can be removed.", "author": "Sanne", "createdAt": "2021-01-04T17:03:54Z", "path": "extensions/narayana-jta/runtime/src/main/java/io/quarkus/narayana/jta/runtime/context/TransactionContext.java", "diffHunk": "@@ -154,6 +169,12 @@ private Transaction getCurrentTransaction() {\n         }\n     }\n \n+    void cleanupScope(Transaction transaction) {\n+        synchronized (transactions) {", "originalCommit": "cbc452e4d5148ace79021708c412001b5a3820e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "79cc2a899b2fb56d251fd02ad526462834e9bd21", "chunk": "diff --git a/extensions/narayana-jta/runtime/src/main/java/io/quarkus/narayana/jta/runtime/context/TransactionContext.java b/extensions/narayana-jta/runtime/src/main/java/io/quarkus/narayana/jta/runtime/context/TransactionContext.java\nindex ab1d2bedc1..4d87fbbfbe 100644\n--- a/extensions/narayana-jta/runtime/src/main/java/io/quarkus/narayana/jta/runtime/context/TransactionContext.java\n+++ b/extensions/narayana-jta/runtime/src/main/java/io/quarkus/narayana/jta/runtime/context/TransactionContext.java\n\n@@ -169,20 +156,22 @@ public class TransactionContext implements InjectableContext {\n         }\n     }\n \n-    void cleanupScope(Transaction transaction) {\n-        synchronized (transactions) {\n-            transactions.remove(transaction);\n-        }\n-    }\n-\n     /**\n      * Representing of the context state. It's a container for all available beans in the context.\n      * It's filled during bean usage and cleared on destroy.\n      */\n-    private static class TransactionContextState implements ContextState {\n+    private static class TransactionContextState implements ContextState, Synchronization {\n \n         private final ConcurrentMap<Contextual<?>, ContextInstanceHandle<?>> mapBeanToInstanceHandle = new ConcurrentHashMap<>();\n \n+        TransactionContextState(Transaction transaction) {\n+            try {\n+                transaction.registerSynchronization(this);\n+            } catch (RollbackException | SystemException e) {\n+                throw new RuntimeException(\"Cannot register synchronization\", e);\n+            }\n+        }\n+\n         /**\n          * Put the contextual bean and its handle to the container.\n          *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0NzMxNQ==", "url": "https://github.com/quarkusio/quarkus/pull/14053#discussion_r551447315", "bodyText": "after making the transactions Map a ConcurrentMap, the synchronized can be removed; the following operations can be made atomic with a little bit of care, e.g. using computeIfAbsent instead of get.\nEven better, for optimal performance, to a get first, and then resort to computeIfAbsent only if the first optimistic get operation failed.", "author": "Sanne", "createdAt": "2021-01-04T17:07:06Z", "path": "extensions/narayana-jta/runtime/src/main/java/io/quarkus/narayana/jta/runtime/context/TransactionContext.java", "diffHunk": "@@ -105,12 +107,25 @@ public ContextState getState() {\n         if (instanceHandle != null) {\n             return instanceHandle.get();\n         } else if (creationalContext != null) {\n+            Transaction currentTransaction = getCurrentTransaction();\n             T createdInstance = contextual.create(creationalContext);\n             instanceHandle = new ContextInstanceHandleImpl<>((InjectableBean<T>) contextual, createdInstance,\n                     creationalContext);\n \n             contextState.put(contextual, instanceHandle);\n \n+            synchronized (transactions) {", "originalCommit": "cbc452e4d5148ace79021708c412001b5a3820e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "79cc2a899b2fb56d251fd02ad526462834e9bd21", "chunk": "diff --git a/extensions/narayana-jta/runtime/src/main/java/io/quarkus/narayana/jta/runtime/context/TransactionContext.java b/extensions/narayana-jta/runtime/src/main/java/io/quarkus/narayana/jta/runtime/context/TransactionContext.java\nindex ab1d2bedc1..4d87fbbfbe 100644\n--- a/extensions/narayana-jta/runtime/src/main/java/io/quarkus/narayana/jta/runtime/context/TransactionContext.java\n+++ b/extensions/narayana-jta/runtime/src/main/java/io/quarkus/narayana/jta/runtime/context/TransactionContext.java\n\n@@ -99,7 +99,7 @@ public class TransactionContext implements InjectableContext {\n                 .getResource(TRANSACTION_CONTEXT_MARKER);\n \n         if (contextState == null) {\n-            contextState = new TransactionContextState();\n+            contextState = new TransactionContextState(getCurrentTransaction());\n             transactionSynchronizationRegistry.putResource(TRANSACTION_CONTEXT_MARKER, contextState);\n         }\n \n"}}, {"oid": "79cc2a899b2fb56d251fd02ad526462834e9bd21", "url": "https://github.com/quarkusio/quarkus/commit/79cc2a899b2fb56d251fd02ad526462834e9bd21", "message": "Update TransactionScopedTest to check @PostConstruct and @PreDestroy invocations for TransactionScoped bean", "committedDate": "2021-01-05T17:02:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE4NTkxMQ==", "url": "https://github.com/quarkusio/quarkus/pull/14053#discussion_r552185911", "bodyText": "Despite the argument is not used it could be named better.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    public void afterCompletion(int i) {\n          \n          \n            \n                    public void afterCompletion(int status) {", "author": "ochaloup", "createdAt": "2021-01-05T20:49:09Z", "path": "extensions/narayana-jta/runtime/src/main/java/io/quarkus/narayana/jta/runtime/context/TransactionContext.java", "diffHunk": "@@ -212,5 +222,13 @@ void destroy() {\n                     .collect(Collectors.toMap(ContextInstanceHandle::getBean, ContextInstanceHandle::get));\n         }\n \n+        @Override\n+        public void beforeCompletion() {\n+        }\n+\n+        @Override\n+        public void afterCompletion(int i) {", "originalCommit": "79cc2a899b2fb56d251fd02ad526462834e9bd21", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjMxMzc1Mw==", "url": "https://github.com/quarkusio/quarkus/pull/14053#discussion_r552313753", "bodyText": "Got it. I've incorporated the suggestion.", "author": "msfm", "createdAt": "2021-01-06T01:32:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE4NTkxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "de5b88e3445f780784dd851e9e061cf18d83566c", "chunk": "diff --git a/extensions/narayana-jta/runtime/src/main/java/io/quarkus/narayana/jta/runtime/context/TransactionContext.java b/extensions/narayana-jta/runtime/src/main/java/io/quarkus/narayana/jta/runtime/context/TransactionContext.java\nindex 4d87fbbfbe..9d67bdab68 100644\n--- a/extensions/narayana-jta/runtime/src/main/java/io/quarkus/narayana/jta/runtime/context/TransactionContext.java\n+++ b/extensions/narayana-jta/runtime/src/main/java/io/quarkus/narayana/jta/runtime/context/TransactionContext.java\n\n@@ -227,7 +227,7 @@ public class TransactionContext implements InjectableContext {\n         }\n \n         @Override\n-        public void afterCompletion(int i) {\n+        public void afterCompletion(int status) {\n             this.destroy();\n         }\n     }\n"}}, {"oid": "de5b88e3445f780784dd851e9e061cf18d83566c", "url": "https://github.com/quarkusio/quarkus/commit/de5b88e3445f780784dd851e9e061cf18d83566c", "message": "Update TransactionScopedTest to check @PostConstruct and @PreDestroy invocations for TransactionScoped bean", "committedDate": "2021-01-06T00:43:21Z", "type": "forcePushed"}, {"oid": "39e1c0082ee23bb4273f674bd2937bbc2b0c2b0e", "url": "https://github.com/quarkusio/quarkus/commit/39e1c0082ee23bb4273f674bd2937bbc2b0c2b0e", "message": "Call @PreDestroy on TransactionScoped bean", "committedDate": "2021-01-06T08:24:21Z", "type": "commit"}, {"oid": "2f5b2881ef97a298a86633c20d0279f7374f4ab3", "url": "https://github.com/quarkusio/quarkus/commit/2f5b2881ef97a298a86633c20d0279f7374f4ab3", "message": "Update TransactionScopedTest to check @PostConstruct and @PreDestroy invocations for TransactionScoped bean", "committedDate": "2021-01-06T08:24:22Z", "type": "commit"}, {"oid": "2f5b2881ef97a298a86633c20d0279f7374f4ab3", "url": "https://github.com/quarkusio/quarkus/commit/2f5b2881ef97a298a86633c20d0279f7374f4ab3", "message": "Update TransactionScopedTest to check @PostConstruct and @PreDestroy invocations for TransactionScoped bean", "committedDate": "2021-01-06T08:24:22Z", "type": "forcePushed"}]}