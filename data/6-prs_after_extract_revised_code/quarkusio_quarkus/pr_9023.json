{"pr_number": 9023, "pr_title": "Amazon Lambda deployment check for abstract handler", "pr_createdAt": "2020-05-02T09:16:01Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/9023", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk1MzQ3Mw==", "url": "https://github.com/quarkusio/quarkus/pull/9023#discussion_r418953473", "bodyText": "Hello @oztimpower, instead of loading the class in the processor, this can use the Jandex ClassInfo itself to figure out if the class is abstract. Something like:\nfinal boolean isAbstract = (info.flags() & java.lang.reflect.Modifier.ABSTRACT) != 0;", "author": "jaikiran", "createdAt": "2020-05-02T12:33:18Z", "path": "extensions/amazon-lambda/deployment/src/main/java/io/quarkus/amazon/lambda/deployment/AmazonLambdaProcessor.java", "diffHunk": "@@ -92,14 +93,23 @@ AdditionalApplicationArchiveMarkerBuildItem marker() {\n \n         for (ClassInfo info : allKnownImplementors) {\n             final DotName name = info.name();\n-            builder.addBeanClass(name.toString());\n+            final String lambda = name.toString();\n+\n+            // check class is not abstract\n+            try {\n+                Class<?> lambdaClass = Class.forName(lambda);\n+                if (Modifier.isAbstract(lambdaClass.getModifiers())) {", "originalCommit": "e5ff4910e8fc514fb435ba3331694daa9351f0af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk3MTcxMw==", "url": "https://github.com/quarkusio/quarkus/pull/9023#discussion_r418971713", "bodyText": "Also Modifier.isAbstract(info.flasg()) should work", "author": "geoand", "createdAt": "2020-05-02T15:29:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk1MzQ3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "322f2ee80d4f3ab86e1d48101dfcaec0c961880b", "chunk": "diff --git a/extensions/amazon-lambda/deployment/src/main/java/io/quarkus/amazon/lambda/deployment/AmazonLambdaProcessor.java b/extensions/amazon-lambda/deployment/src/main/java/io/quarkus/amazon/lambda/deployment/AmazonLambdaProcessor.java\nindex f4bd8802e4..1ddd2c0db2 100644\n--- a/extensions/amazon-lambda/deployment/src/main/java/io/quarkus/amazon/lambda/deployment/AmazonLambdaProcessor.java\n+++ b/extensions/amazon-lambda/deployment/src/main/java/io/quarkus/amazon/lambda/deployment/AmazonLambdaProcessor.java\n\n@@ -92,25 +92,20 @@ public final class AmazonLambdaProcessor {\n         List<AmazonLambdaBuildItem> ret = new ArrayList<>();\n \n         for (ClassInfo info : allKnownImplementors) {\n+            if (Modifier.isAbstract(info.flags())) {\n+                continue;\n+            }\n+\n             final DotName name = info.name();\n             final String lambda = name.toString();\n-\n-            // check class is not abstract\n-            try {\n-                Class<?> lambdaClass = Class.forName(lambda);\n-                if (Modifier.isAbstract(lambdaClass.getModifiers())) {\n-                    continue;\n-                }\n-            } catch (ClassNotFoundException cnfe) {\n-            }\n+            builder.addBeanClass(lambda);\n+            reflectiveClassBuildItemBuildProducer.produce(new ReflectiveClassBuildItem(true, false, lambda));\n \n             String cdiName = null;\n             List<AnnotationInstance> named = info.annotations().get(NAMED);\n             if (named != null && !named.isEmpty()) {\n                 cdiName = named.get(0).value().asString();\n             }\n-            builder.addBeanClass(lambda);\n-            reflectiveClassBuildItemBuildProducer.produce(new ReflectiveClassBuildItem(true, false, lambda));\n \n             ClassInfo current = info;\n             boolean done = false;\n"}}, {"oid": "322f2ee80d4f3ab86e1d48101dfcaec0c961880b", "url": "https://github.com/quarkusio/quarkus/commit/322f2ee80d4f3ab86e1d48101dfcaec0c961880b", "message": "Check if handler is abstract", "committedDate": "2020-05-03T14:31:43Z", "type": "commit"}, {"oid": "322f2ee80d4f3ab86e1d48101dfcaec0c961880b", "url": "https://github.com/quarkusio/quarkus/commit/322f2ee80d4f3ab86e1d48101dfcaec0c961880b", "message": "Check if handler is abstract", "committedDate": "2020-05-03T14:31:43Z", "type": "forcePushed"}]}