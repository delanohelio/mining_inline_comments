{"pr_number": 9027, "pr_title": "Disable scheduler with runtime config", "pr_createdAt": "2020-05-02T21:01:05Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/9027", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5OTQ2MQ==", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r419399461", "bodyText": "There is no need to introduce this config property. Quartz extension is built on top of the Scheduler extension - it's ok to reuse quarkus.scheduler.enabled.", "author": "mkouba", "createdAt": "2020-05-04T12:30:00Z", "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzRuntimeConfig.java", "diffHunk": "@@ -27,4 +27,10 @@\n     @ConfigItem\n     public boolean forceStart;\n \n+    /**\n+     * If the quartz scheduler is enabled\n+     */\n+    @ConfigItem(defaultValue = \"true\")\n+    public boolean enabled;", "originalCommit": "0108de714c051f87a8095c088d51b946488ae34d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY3MjMzMA==", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r419672330", "bodyText": "Ok, I removed the configItem from QuartzRuntimeConfig. Now there is only one in SchedulerRuntimeConfig called quarkus.scheduler.enabled.", "author": "adrianfiedler", "createdAt": "2020-05-04T19:24:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5OTQ2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "a1f5a3cab78a20f4cdb501ce4c57ae055859e4fc", "chunk": "diff --git a/extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzRuntimeConfig.java b/extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzRuntimeConfig.java\nindex d9c1368d75..6486d3c7df 100644\n--- a/extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzRuntimeConfig.java\n+++ b/extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzRuntimeConfig.java\n\n@@ -27,10 +27,4 @@ public class QuartzRuntimeConfig {\n     @ConfigItem\n     public boolean forceStart;\n \n-    /**\n-     * If the quartz scheduler is enabled\n-     */\n-    @ConfigItem(defaultValue = \"true\")\n-    public boolean enabled;\n-\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5OTk2Mw==", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r419399963", "bodyText": "This test will always take at least 5s :-(", "author": "mkouba", "createdAt": "2020-05-04T12:31:00Z", "path": "extensions/quartz/deployment/src/test/java/io/quarkus/quartz/test/DisabledSchedulerTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.quarkus.quartz.test;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.scheduler.Scheduled;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class DisabledSchedulerTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest test = new QuarkusUnitTest()\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                    .addClasses(Jobs.class)\n+                    .addAsResource(new StringAsset(\"quarkus.quartz.enabled=false\"),\n+                            \"application.properties\"));\n+\n+    @Test\n+    public void testNoSchedulerInvocations() throws InterruptedException {\n+        // Check that @Scheduled method was never called\n+        assertFalse(Jobs.LATCH.await(5, TimeUnit.SECONDS));", "originalCommit": "0108de714c051f87a8095c088d51b946488ae34d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY3MTIwOQ==", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r419671209", "bodyText": "I reduced the wait time for the latch to 1.1 seconds. Not sure how to get under that time with @Scheduled(every = \"1s\").", "author": "adrianfiedler", "createdAt": "2020-05-04T19:22:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5OTk2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk2MjIwOA==", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r419962208", "bodyText": "Hm, maybe we should add boolean isRunning() to the io.quarkus.scheduler.Scheduler so that it would be easier to test the property.\nWe should also clarify that Scheduler#pause() and Scheduler#resume() are no-op if the scheduler is disabled. And probably log a warning if it's disabled and someone attempts to call these methods.", "author": "mkouba", "createdAt": "2020-05-05T09:00:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5OTk2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk3ODgzNA==", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r419978834", "bodyText": "Hm, maybe we should add boolean isRunning() to the io.quarkus.scheduler.Scheduler so that it would be easier to test the property.\n\nEdit: Ah you meant a getter for the already existing boolean. So I guess we need a second one like enabled  so that we can check this property in resume()/pause() and log accordingly. And on creation running will be set to false if scheduler is disabled?", "author": "adrianfiedler", "createdAt": "2020-05-05T09:30:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5OTk2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAwMTc4Ng==", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r420001786", "bodyText": "I'd say that it should always return false if enabled=false. Also don't forget that we have 2 impls of Scheduler. The default one and the quartz one. We need to think it over ;-).", "author": "mkouba", "createdAt": "2020-05-05T10:12:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5OTk2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDExNDgzNg==", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r420114836", "bodyText": "Not sure about QuartzScheduler, should we use something like scheduler.getCurrentlyExecutingJobs() > 0 to check if it (any job) is running? Or is a simple boolean check like in SimpleScheduler enough?", "author": "adrianfiedler", "createdAt": "2020-05-05T13:37:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5OTk2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE0Njg5NQ==", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r420146895", "bodyText": "That's a good question. Maybe we should use org.quartz.Scheduler.isInStandbyMode() but in that case we should modify the behavior of QuartzScheduler.pause() and QuartzScheduler.resume(). Currently, we call pauseAll()/resumeAll() but we should probably call standby()/start() instead. @machi1990 WDYT?", "author": "mkouba", "createdAt": "2020-05-05T14:20:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5OTk2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4MjUwOA==", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r420982508", "bodyText": "Let's do it.", "author": "machi1990", "createdAt": "2020-05-06T17:55:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5OTk2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "a1f5a3cab78a20f4cdb501ce4c57ae055859e4fc", "chunk": "diff --git a/extensions/quartz/deployment/src/test/java/io/quarkus/quartz/test/DisabledSchedulerTest.java b/extensions/quartz/deployment/src/test/java/io/quarkus/quartz/test/DisabledSchedulerTest.java\nindex 45b1b803e6..68a96a0398 100644\n--- a/extensions/quartz/deployment/src/test/java/io/quarkus/quartz/test/DisabledSchedulerTest.java\n+++ b/extensions/quartz/deployment/src/test/java/io/quarkus/quartz/test/DisabledSchedulerTest.java\n\n@@ -2,8 +2,7 @@ package io.quarkus.quartz.test;\n \n import static org.junit.jupiter.api.Assertions.assertFalse;\n \n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n+import javax.inject.Inject;\n \n import org.jboss.shrinkwrap.api.ShrinkWrap;\n import org.jboss.shrinkwrap.api.asset.StringAsset;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQwMDM4Ng==", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r419400386", "bodyText": "As I commented on the issue - the preferred solution is to inject the config group directly.", "author": "mkouba", "createdAt": "2020-05-04T12:31:44Z", "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java", "diffHunk": "@@ -68,7 +68,8 @@\n     }\n \n     public QuartzScheduler(SchedulerContext context, QuartzSupport quartzSupport, Config config) {\n-        if (!quartzSupport.getRuntimeConfig().forceStart && context.getScheduledMethods().isEmpty()) {\n+        if ((!quartzSupport.getRuntimeConfig().forceStart && context.getScheduledMethods().isEmpty())\n+                || !config.getValue(\"quarkus.quartz.enabled\", Boolean.class)) {", "originalCommit": "0108de714c051f87a8095c088d51b946488ae34d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY2OTY5OQ==", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r419669699", "bodyText": "Ok, I tried to inject the runtime config as a variable into QuartzScheduler. Here the tests failed because it was always null. But then I injected it into the constructor and now the tests pass.\nBut if I use the extension directly in any project now, I get those errors with Unsatisfied dependency for type io.quarkus.scheduler.runtime.SchedulerRuntimeConfig and qualifiers [@Default]", "author": "adrianfiedler", "createdAt": "2020-05-04T19:19:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQwMDM4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk1NzMzMQ==", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r419957331", "bodyText": "But then I injected it into the constructor and now the tests pass.\n\nThat's weird. Constructor and field injection should behave identically. I'll try to change the code locally...\n\nBut if I use the extension directly in any project now...\n\nDoes it happen in both the production and the dev mode?", "author": "mkouba", "createdAt": "2020-05-05T08:52:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQwMDM4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk2Mzg2Ng==", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r419963866", "bodyText": "So I've tried to change the code to use field injection (i.e. @Inject SchedulerRuntimeConfig config) and it works fine. However, constructor injection is more appropriate in this particular use case (we don't need to store the config in a field ;-).", "author": "mkouba", "createdAt": "2020-05-05T09:03:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQwMDM4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk3MDY0Nw==", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r419970647", "bodyText": "Thanks for investigating! I guess it is then some local mistake on my side.\nThen I will leave it as injected constructor param.", "author": "adrianfiedler", "createdAt": "2020-05-05T09:16:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQwMDM4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk3OTE0Mw==", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r419979143", "bodyText": "I've also verified that it works with both the dev and the prod mode using the scheduler-quickstart", "author": "mkouba", "createdAt": "2020-05-05T09:31:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQwMDM4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "a1f5a3cab78a20f4cdb501ce4c57ae055859e4fc", "chunk": "diff --git a/extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java b/extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java\nindex 289468ee5c..fb68f01768 100644\n--- a/extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java\n+++ b/extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java\n\n@@ -59,24 +60,29 @@ public class QuartzScheduler implements Scheduler {\n     private static final String INVOKER_KEY = \"invoker\";\n \n     private final org.quartz.Scheduler scheduler;\n-    private final Map<String, ScheduledInvoker> invokers;\n+    private final boolean enabled;\n \n     @Produces\n     @Singleton\n     org.quartz.Scheduler produceQuartzScheduler() {\n+        if (scheduler == null) {\n+            throw new IllegalStateException(\n+                    \"Cannot produce org.quartz.Scheduler - Quartz scheduler is disabled or no schedules were found\");\n+        }\n         return scheduler;\n     }\n \n-    public QuartzScheduler(SchedulerContext context, QuartzSupport quartzSupport, Config config) {\n-        if ((!quartzSupport.getRuntimeConfig().forceStart && context.getScheduledMethods().isEmpty())\n-                || !config.getValue(\"quarkus.quartz.enabled\", Boolean.class)) {\n-            LOGGER.infof(\"No scheduled business methods found - Quartz scheduler will not be started\");\n+    public QuartzScheduler(SchedulerContext context, QuartzSupport quartzSupport, Config config,\n+            SchedulerRuntimeConfig schedulerRuntimeConfig) {\n+        enabled = schedulerRuntimeConfig.enabled;\n+        if (!enabled) {\n+            LOGGER.info(\"Quartz scheduler is disabled by config property and will not be started\");\n+            this.scheduler = null;\n+        } else if (!quartzSupport.getRuntimeConfig().forceStart && context.getScheduledMethods().isEmpty()) {\n+            LOGGER.info(\"No scheduled business methods found - Quartz scheduler will not be started\");\n             this.scheduler = null;\n-            this.invokers = null;\n-\n         } else {\n-            this.invokers = new HashMap<>();\n-\n+            Map<String, ScheduledInvoker> invokers = new HashMap<>();\n             UserTransaction transaction = null;\n \n             try (InstanceHandle<UserTransaction> handle = Arc.container().instance(UserTransaction.class)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk1ODM4OA==", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r419958388", "bodyText": "The log message should probably reflect the conditions...", "author": "mkouba", "createdAt": "2020-05-05T08:54:23Z", "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java", "diffHunk": "@@ -67,8 +68,10 @@\n         return scheduler;\n     }\n \n-    public QuartzScheduler(SchedulerContext context, QuartzSupport quartzSupport, Config config) {\n-        if (!quartzSupport.getRuntimeConfig().forceStart && context.getScheduledMethods().isEmpty()) {\n+    public QuartzScheduler(SchedulerContext context, QuartzSupport quartzSupport, Config config,\n+            SchedulerRuntimeConfig schedulerRuntimeConfig) {\n+        if ((!quartzSupport.getRuntimeConfig().forceStart && context.getScheduledMethods().isEmpty())\n+                || !schedulerRuntimeConfig.enabled) {\n             LOGGER.infof(\"No scheduled business methods found - Quartz scheduler will not be started\");", "originalCommit": "8cacb2e074cbfd1dc4343f61701b020b6f1cb0ba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a1f5a3cab78a20f4cdb501ce4c57ae055859e4fc", "chunk": "diff --git a/extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java b/extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java\nindex 9167846ece..fb68f01768 100644\n--- a/extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java\n+++ b/extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java\n\n@@ -60,25 +60,29 @@ public class QuartzScheduler implements Scheduler {\n     private static final String INVOKER_KEY = \"invoker\";\n \n     private final org.quartz.Scheduler scheduler;\n-    private final Map<String, ScheduledInvoker> invokers;\n+    private final boolean enabled;\n \n     @Produces\n     @Singleton\n     org.quartz.Scheduler produceQuartzScheduler() {\n+        if (scheduler == null) {\n+            throw new IllegalStateException(\n+                    \"Cannot produce org.quartz.Scheduler - Quartz scheduler is disabled or no schedules were found\");\n+        }\n         return scheduler;\n     }\n \n     public QuartzScheduler(SchedulerContext context, QuartzSupport quartzSupport, Config config,\n             SchedulerRuntimeConfig schedulerRuntimeConfig) {\n-        if ((!quartzSupport.getRuntimeConfig().forceStart && context.getScheduledMethods().isEmpty())\n-                || !schedulerRuntimeConfig.enabled) {\n-            LOGGER.infof(\"No scheduled business methods found - Quartz scheduler will not be started\");\n+        enabled = schedulerRuntimeConfig.enabled;\n+        if (!enabled) {\n+            LOGGER.info(\"Quartz scheduler is disabled by config property and will not be started\");\n+            this.scheduler = null;\n+        } else if (!quartzSupport.getRuntimeConfig().forceStart && context.getScheduledMethods().isEmpty()) {\n+            LOGGER.info(\"No scheduled business methods found - Quartz scheduler will not be started\");\n             this.scheduler = null;\n-            this.invokers = null;\n-\n         } else {\n-            this.invokers = new HashMap<>();\n-\n+            Map<String, ScheduledInvoker> invokers = new HashMap<>();\n             UserTransaction transaction = null;\n \n             try (InstanceHandle<UserTransaction> handle = Arc.container().instance(UserTransaction.class)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk1ODc5NQ==", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r419958795", "bodyText": "I think that we should add an INFO log message here as well. WDYT?", "author": "mkouba", "createdAt": "2020-05-05T08:55:07Z", "path": "extensions/scheduler/runtime/src/main/java/io/quarkus/scheduler/runtime/SimpleScheduler.java", "diffHunk": "@@ -51,12 +51,12 @@\n     private volatile boolean running;\n     private final List<ScheduledTask> scheduledTasks;\n \n-    public SimpleScheduler(SchedulerContext context, Config config) {\n+    public SimpleScheduler(SchedulerContext context, Config config, SchedulerRuntimeConfig schedulerRuntimeConfig) {\n         this.running = true;\n         this.scheduledTasks = new ArrayList<>();\n         this.executor = context.getExecutor();\n \n-        if (context.getScheduledMethods().isEmpty()) {\n+        if (context.getScheduledMethods().isEmpty() || !schedulerRuntimeConfig.enabled) {", "originalCommit": "8cacb2e074cbfd1dc4343f61701b020b6f1cb0ba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a1f5a3cab78a20f4cdb501ce4c57ae055859e4fc", "chunk": "diff --git a/extensions/scheduler/runtime/src/main/java/io/quarkus/scheduler/runtime/SimpleScheduler.java b/extensions/scheduler/runtime/src/main/java/io/quarkus/scheduler/runtime/SimpleScheduler.java\nindex 09a2403e58..37b6d99f35 100644\n--- a/extensions/scheduler/runtime/src/main/java/io/quarkus/scheduler/runtime/SimpleScheduler.java\n+++ b/extensions/scheduler/runtime/src/main/java/io/quarkus/scheduler/runtime/SimpleScheduler.java\n\n@@ -50,14 +50,20 @@ public class SimpleScheduler implements Scheduler {\n     private final ExecutorService executor;\n     private volatile boolean running;\n     private final List<ScheduledTask> scheduledTasks;\n+    private final boolean enabled;\n \n     public SimpleScheduler(SchedulerContext context, Config config, SchedulerRuntimeConfig schedulerRuntimeConfig) {\n         this.running = true;\n+        this.enabled = schedulerRuntimeConfig.enabled;\n         this.scheduledTasks = new ArrayList<>();\n         this.executor = context.getExecutor();\n \n-        if (context.getScheduledMethods().isEmpty() || !schedulerRuntimeConfig.enabled) {\n+        if (!schedulerRuntimeConfig.enabled) {\n             this.scheduledExecutor = null;\n+            LOGGER.info(\"Simple scheduler is disabled by config property and will not be started\");\n+        } else if (context.getScheduledMethods().isEmpty()) {\n+            this.scheduledExecutor = null;\n+            LOGGER.info(\"No scheduled business methods found - Simple scheduler will not be started\");\n         } else {\n             this.scheduledExecutor = new JBossScheduledThreadPoolExecutor(1, new Runnable() {\n                 @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4MDIxNg==", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r420980216", "bodyText": "nitpick:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public boolean isRunning() {\n          \n          \n            \n                    if (!enabled) {\n          \n          \n            \n                        return false;\n          \n          \n            \n                    }\n          \n          \n            \n                    return running;\n          \n          \n            \n                }\n          \n          \n            \n                public boolean isRunning() {\n          \n          \n            \n                    return enabled && running;\n          \n          \n            \n                }", "author": "machi1990", "createdAt": "2020-05-06T17:51:32Z", "path": "extensions/scheduler/runtime/src/main/java/io/quarkus/scheduler/runtime/SimpleScheduler.java", "diffHunk": "@@ -137,12 +143,28 @@ public void run() {\n \n     @Override\n     public void pause() {\n-        running = false;\n+        if (!enabled) {\n+            LOGGER.warn(\"Scheduler is disabled and cannot be paused\");\n+        } else {\n+            running = false;\n+        }\n     }\n \n     @Override\n     public void resume() {\n-        running = true;\n+        if (!enabled) {\n+            LOGGER.warn(\"Scheduler is disabled and cannot be resumed\");\n+        } else {\n+            running = true;\n+        }\n+    }\n+\n+    @Override\n+    public boolean isRunning() {\n+        if (!enabled) {\n+            return false;\n+        }\n+        return running;\n     }", "originalCommit": "f1249fd38d8fd01c68e8f2d6d2563ceeb2610aef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a1f5a3cab78a20f4cdb501ce4c57ae055859e4fc", "chunk": "diff --git a/extensions/scheduler/runtime/src/main/java/io/quarkus/scheduler/runtime/SimpleScheduler.java b/extensions/scheduler/runtime/src/main/java/io/quarkus/scheduler/runtime/SimpleScheduler.java\nindex fc8b0e2527..37b6d99f35 100644\n--- a/extensions/scheduler/runtime/src/main/java/io/quarkus/scheduler/runtime/SimpleScheduler.java\n+++ b/extensions/scheduler/runtime/src/main/java/io/quarkus/scheduler/runtime/SimpleScheduler.java\n\n@@ -161,10 +161,7 @@ public class SimpleScheduler implements Scheduler {\n \n     @Override\n     public boolean isRunning() {\n-        if (!enabled) {\n-            return false;\n-        }\n-        return running;\n+        return enabled && running;\n     }\n \n     SimpleTrigger createTrigger(String invokerClass, CronParser parser, Scheduled scheduled, int nameSequence, Config config) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4MzYyMA==", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r420983620", "bodyText": "According to this #8913 (comment), this should be null hence causing a NPE at https://github.com/quarkusio/quarkus/pull/9027/files#diff-b22e0da44e71f897e6899c8e8e9626fbR31 or am I missing something?\n/cc @mkouba", "author": "machi1990", "createdAt": "2020-05-06T17:56:44Z", "path": "extensions/quartz/deployment/src/test/java/io/quarkus/quartz/test/DisabledSchedulerTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.quarkus.quartz.test;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import javax.inject.Inject;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.quartz.runtime.QuartzScheduler;\n+import io.quarkus.scheduler.Scheduled;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class DisabledSchedulerTest {\n+\n+    @Inject\n+    QuartzScheduler quartzScheduler;", "originalCommit": "f1249fd38d8fd01c68e8f2d6d2563ceeb2610aef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4NDc1Ng==", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r420984756", "bodyText": "+1", "author": "mkouba", "createdAt": "2020-05-06T17:58:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4MzYyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk5Njc5MQ==", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r420996791", "bodyText": "So I believe that we should throw IllegalStateException from io.quarkus.quartz.runtime.QuartzScheduler.produceQuartzScheduler() if QuartzScheduler.scheduler is null. However, in this case we inject io.quarkus.quartz.runtime.QuartzScheduler which is OK. @adrianfiedler you should rather inject io.quarkus.scheduler.Scheduler which is part of the API (and is implemented by QuartzScheduler).", "author": "mkouba", "createdAt": "2020-05-06T18:18:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4MzYyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxMTAzNA==", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r421011034", "bodyText": "Totally agree, how about \"Cannot inject not started scheduler\" as message for the ISE?\"", "author": "adrianfiedler", "createdAt": "2020-05-06T18:41:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4MzYyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxMjY1NA==", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r421012654", "bodyText": "I would mention Quartz here. Something like \"Cannot produce org.quartz.Scheduler - Quartz scheduler is disabled\".", "author": "mkouba", "createdAt": "2020-05-06T18:44:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4MzYyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxMzQ0Ng==", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r421013446", "bodyText": "Hm, looking at the CDI spec, we should already throw IllegalProductException because the producer is not @Dependent and returns null. Let me check this...", "author": "mkouba", "createdAt": "2020-05-06T18:45:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4MzYyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxNDEzNA==", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r421014134", "bodyText": "Ah, we only throw IllegalProductException for normal scoped producers. Which is probably OK.", "author": "mkouba", "createdAt": "2020-05-06T18:46:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4MzYyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxNDg0OQ==", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r421014849", "bodyText": "There is also one additonal case where org.quartz.Scheduler is null: When no scheduled methods are found and forceStart config is false.", "author": "adrianfiedler", "createdAt": "2020-05-06T18:48:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4MzYyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxNTUyNw==", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r421015527", "bodyText": "Good point!", "author": "mkouba", "createdAt": "2020-05-06T18:49:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4MzYyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAzNzQ2Ng==", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r421037466", "bodyText": "So because the producer is @singleton and it throws automatically IllegalProductException - no need to explicitly throw an ISE?", "author": "adrianfiedler", "createdAt": "2020-05-06T19:26:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4MzYyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA0MTAxNg==", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r421041016", "bodyText": "Okay I double checked and injected org.quartz.Scheduler directly and did not get an IllegalProductException (value was null). I will throw then explicitly the ISE.", "author": "adrianfiedler", "createdAt": "2020-05-06T19:32:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4MzYyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA1MTE3OA==", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r421051178", "bodyText": "Yes, @Singleton is not a normal scope. +1 for throwing ISE.", "author": "mkouba", "createdAt": "2020-05-06T19:51:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4MzYyMA=="}], "type": "inlineReview", "revised_code": {"commit": "a1f5a3cab78a20f4cdb501ce4c57ae055859e4fc", "chunk": "diff --git a/extensions/quartz/deployment/src/test/java/io/quarkus/quartz/test/DisabledSchedulerTest.java b/extensions/quartz/deployment/src/test/java/io/quarkus/quartz/test/DisabledSchedulerTest.java\nindex 90fef042b9..68a96a0398 100644\n--- a/extensions/quartz/deployment/src/test/java/io/quarkus/quartz/test/DisabledSchedulerTest.java\n+++ b/extensions/quartz/deployment/src/test/java/io/quarkus/quartz/test/DisabledSchedulerTest.java\n\n@@ -10,14 +10,14 @@ import org.jboss.shrinkwrap.api.spec.JavaArchive;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.RegisterExtension;\n \n-import io.quarkus.quartz.runtime.QuartzScheduler;\n import io.quarkus.scheduler.Scheduled;\n+import io.quarkus.scheduler.Scheduler;\n import io.quarkus.test.QuarkusUnitTest;\n \n public class DisabledSchedulerTest {\n \n     @Inject\n-    QuartzScheduler quartzScheduler;\n+    Scheduler quartzScheduler;\n \n     @RegisterExtension\n     static final QuarkusUnitTest test = new QuarkusUnitTest()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4NjAyMA==", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r420986020", "bodyText": "This field should be final.", "author": "mkouba", "createdAt": "2020-05-06T18:00:22Z", "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java", "diffHunk": "@@ -60,19 +61,25 @@\n \n     private final org.quartz.Scheduler scheduler;\n     private final Map<String, ScheduledInvoker> invokers;\n+    private boolean enabled;", "originalCommit": "f1249fd38d8fd01c68e8f2d6d2563ceeb2610aef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a1f5a3cab78a20f4cdb501ce4c57ae055859e4fc", "chunk": "diff --git a/extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java b/extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java\nindex 4647fba7cd..fb68f01768 100644\n--- a/extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java\n+++ b/extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java\n\n@@ -60,12 +60,15 @@ public class QuartzScheduler implements Scheduler {\n     private static final String INVOKER_KEY = \"invoker\";\n \n     private final org.quartz.Scheduler scheduler;\n-    private final Map<String, ScheduledInvoker> invokers;\n-    private boolean enabled;\n+    private final boolean enabled;\n \n     @Produces\n     @Singleton\n     org.quartz.Scheduler produceQuartzScheduler() {\n+        if (scheduler == null) {\n+            throw new IllegalStateException(\n+                    \"Cannot produce org.quartz.Scheduler - Quartz scheduler is disabled or no schedules were found\");\n+        }\n         return scheduler;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4ODI5MQ==", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r420988291", "bodyText": "Message? In fact, I'd just throw an IllegalStateException instead of a warning. Although it seems that isInStandbyMode() never throws an expception...", "author": "mkouba", "createdAt": "2020-05-06T18:04:02Z", "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java", "diffHunk": "@@ -185,24 +192,46 @@ public QuartzScheduler(SchedulerContext context, QuartzSupport quartzSupport, Co\n \n     @Override\n     public void pause() {\n-        try {\n-            if (scheduler != null) {\n-                scheduler.pauseAll();\n+        if (!enabled) {\n+            LOGGER.warn(\"Quartz Scheduler is disabled and cannot be paused\");\n+        } else {\n+            try {\n+                if (scheduler != null) {\n+                    scheduler.standby();\n+                }\n+            } catch (SchedulerException e) {\n+                LOGGER.warn(\"Unable to pause scheduler\", e);\n             }\n-        } catch (SchedulerException e) {\n-            LOGGER.warn(\"Unable to pause scheduler\", e);\n         }\n     }\n \n     @Override\n     public void resume() {\n-        try {\n-            if (scheduler != null) {\n-                scheduler.resumeAll();\n+        if (!enabled) {\n+            LOGGER.warn(\"Quartz Scheduler is disabled and cannot be resumed\");\n+        } else {\n+            try {\n+                if (scheduler != null) {\n+                    scheduler.start();\n+                }\n+            } catch (SchedulerException e) {\n+                LOGGER.warn(\"Unable to resume scheduler\", e);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public boolean isRunning() {\n+        if (!enabled || scheduler == null) {\n+            return false;\n+        } else {\n+            try {\n+                return !scheduler.isInStandbyMode();\n+            } catch (SchedulerException e) {\n+                LOGGER.warn(\"Unable to resume scheduler\", e);", "originalCommit": "f1249fd38d8fd01c68e8f2d6d2563ceeb2610aef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a1f5a3cab78a20f4cdb501ce4c57ae055859e4fc", "chunk": "diff --git a/extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java b/extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java\nindex 4647fba7cd..fb68f01768 100644\n--- a/extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java\n+++ b/extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java\n\n@@ -228,10 +228,9 @@ public class QuartzScheduler implements Scheduler {\n             try {\n                 return !scheduler.isInStandbyMode();\n             } catch (SchedulerException e) {\n-                LOGGER.warn(\"Unable to resume scheduler\", e);\n+                throw new IllegalStateException(\"Could not evaluate standby mode\", e);\n             }\n         }\n-        return false;\n     }\n \n     // Use Interceptor.Priority.PLATFORM_BEFORE to start the scheduler before regular StartupEvent observers\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk5MTY1OA==", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r420991658", "bodyText": "I think that we should be more specific here. Something like \"If a scheduler is running the triggers are fired and jobs are executed.\"", "author": "mkouba", "createdAt": "2020-05-06T18:09:39Z", "path": "extensions/scheduler/runtime/src/main/java/io/quarkus/scheduler/Scheduler.java", "diffHunk": "@@ -18,4 +18,9 @@\n      */\n     void resume();\n \n+    /**\n+     * @return if the scheduler is running", "originalCommit": "f1249fd38d8fd01c68e8f2d6d2563ceeb2610aef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a1f5a3cab78a20f4cdb501ce4c57ae055859e4fc", "chunk": "diff --git a/extensions/scheduler/runtime/src/main/java/io/quarkus/scheduler/Scheduler.java b/extensions/scheduler/runtime/src/main/java/io/quarkus/scheduler/Scheduler.java\nindex 916d165e9e..60f8659fdf 100644\n--- a/extensions/scheduler/runtime/src/main/java/io/quarkus/scheduler/Scheduler.java\n+++ b/extensions/scheduler/runtime/src/main/java/io/quarkus/scheduler/Scheduler.java\n\n@@ -19,7 +19,7 @@ public interface Scheduler {\n     void resume();\n \n     /**\n-     * @return if the scheduler is running\n+     * @return if a scheduler is running the triggers are fired and jobs are executed.\n      */\n     boolean isRunning();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk5MjM5OQ==", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r420992399", "bodyText": "Make it final ;-)", "author": "mkouba", "createdAt": "2020-05-06T18:10:56Z", "path": "extensions/scheduler/runtime/src/main/java/io/quarkus/scheduler/runtime/SimpleScheduler.java", "diffHunk": "@@ -50,14 +50,20 @@\n     private final ExecutorService executor;\n     private volatile boolean running;\n     private final List<ScheduledTask> scheduledTasks;\n+    private boolean enabled;", "originalCommit": "f1249fd38d8fd01c68e8f2d6d2563ceeb2610aef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a1f5a3cab78a20f4cdb501ce4c57ae055859e4fc", "chunk": "diff --git a/extensions/scheduler/runtime/src/main/java/io/quarkus/scheduler/runtime/SimpleScheduler.java b/extensions/scheduler/runtime/src/main/java/io/quarkus/scheduler/runtime/SimpleScheduler.java\nindex fc8b0e2527..37b6d99f35 100644\n--- a/extensions/scheduler/runtime/src/main/java/io/quarkus/scheduler/runtime/SimpleScheduler.java\n+++ b/extensions/scheduler/runtime/src/main/java/io/quarkus/scheduler/runtime/SimpleScheduler.java\n\n@@ -50,7 +50,7 @@ public class SimpleScheduler implements Scheduler {\n     private final ExecutorService executor;\n     private volatile boolean running;\n     private final List<ScheduledTask> scheduledTasks;\n-    private boolean enabled;\n+    private final boolean enabled;\n \n     public SimpleScheduler(SchedulerContext context, Config config, SchedulerRuntimeConfig schedulerRuntimeConfig) {\n         this.running = true;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk5NzUxNw==", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r420997517", "bodyText": "|| scheduler == null is IMHO redundant and adds no value.", "author": "mkouba", "createdAt": "2020-05-06T18:19:16Z", "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java", "diffHunk": "@@ -185,24 +192,46 @@ public QuartzScheduler(SchedulerContext context, QuartzSupport quartzSupport, Co\n \n     @Override\n     public void pause() {\n-        try {\n-            if (scheduler != null) {\n-                scheduler.pauseAll();\n+        if (!enabled) {\n+            LOGGER.warn(\"Quartz Scheduler is disabled and cannot be paused\");\n+        } else {\n+            try {\n+                if (scheduler != null) {\n+                    scheduler.standby();\n+                }\n+            } catch (SchedulerException e) {\n+                LOGGER.warn(\"Unable to pause scheduler\", e);\n             }\n-        } catch (SchedulerException e) {\n-            LOGGER.warn(\"Unable to pause scheduler\", e);\n         }\n     }\n \n     @Override\n     public void resume() {\n-        try {\n-            if (scheduler != null) {\n-                scheduler.resumeAll();\n+        if (!enabled) {\n+            LOGGER.warn(\"Quartz Scheduler is disabled and cannot be resumed\");\n+        } else {\n+            try {\n+                if (scheduler != null) {\n+                    scheduler.start();\n+                }\n+            } catch (SchedulerException e) {\n+                LOGGER.warn(\"Unable to resume scheduler\", e);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public boolean isRunning() {\n+        if (!enabled || scheduler == null) {", "originalCommit": "f1249fd38d8fd01c68e8f2d6d2563ceeb2610aef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAyMDM2OQ==", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r421020369", "bodyText": "It can be enabled = true but scheduler can still be null (When no scheduled methods are found and forceStart config is false.)", "author": "adrianfiedler", "createdAt": "2020-05-06T18:56:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk5NzUxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAyMTEwOA==", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r421021108", "bodyText": "You're right. I'm sorry for the confusion...", "author": "mkouba", "createdAt": "2020-05-06T18:58:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk5NzUxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAyMzA5NA==", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r421023094", "bodyText": "No problem at all, I just wanted to double check in case I oversee something.", "author": "adrianfiedler", "createdAt": "2020-05-06T19:01:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk5NzUxNw=="}], "type": "inlineReview", "revised_code": {"commit": "a1f5a3cab78a20f4cdb501ce4c57ae055859e4fc", "chunk": "diff --git a/extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java b/extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java\nindex 4647fba7cd..fb68f01768 100644\n--- a/extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java\n+++ b/extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java\n\n@@ -228,10 +228,9 @@ public class QuartzScheduler implements Scheduler {\n             try {\n                 return !scheduler.isInStandbyMode();\n             } catch (SchedulerException e) {\n-                LOGGER.warn(\"Unable to resume scheduler\", e);\n+                throw new IllegalStateException(\"Could not evaluate standby mode\", e);\n             }\n         }\n-        return false;\n     }\n \n     // Use Interceptor.Priority.PLATFORM_BEFORE to start the scheduler before regular StartupEvent observers\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUxNDU1NQ==", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r421514555", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Scheduler quartzScheduler;\n          \n          \n            \n                Scheduler scheduler;", "author": "machi1990", "createdAt": "2020-05-07T13:44:04Z", "path": "extensions/quartz/deployment/src/test/java/io/quarkus/quartz/test/DisabledSchedulerTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.quarkus.quartz.test;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import javax.inject.Inject;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.scheduler.Scheduled;\n+import io.quarkus.scheduler.Scheduler;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class DisabledSchedulerTest {\n+\n+    @Inject\n+    Scheduler quartzScheduler;", "originalCommit": "b2da973403d7627de3183f0e1129cd90eba090d2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUxNTc2OA==", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r421515768", "bodyText": "Also this tests is really like this one https://github.com/quarkusio/quarkus/pull/9027/files#diff-5028b2d8d0d2b040363a8c0981f36caeR17, I think we do not need this.", "author": "machi1990", "createdAt": "2020-05-07T13:45:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUxNDU1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUyNzgzNQ==", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r421527835", "bodyText": "Not sure, because this class tests the QuartzScheduler (org.quartz.Scheduler) functionality. While the other test is about SimpleScheduler functionality.", "author": "adrianfiedler", "createdAt": "2020-05-07T14:01:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUxNDU1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYwNDg4Mw==", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r421604883", "bodyText": "Yes, except I am not seeing any quartz related stuff being tested. I think we can remove this test class WDYT? @mkouba.\nOther than that this PR is good to go once all the commits have been squashed.", "author": "machi1990", "createdAt": "2020-05-07T15:42:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUxNDU1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3MjUzNQ==", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r421672535", "bodyText": "Yes, except I am not seeing any quartz related stuff being tested. I think we can remove this test class...\n\nI'd rather keep the test because the injected io.quarkus.scheduler.Scheduler is the io.quarkus.quartz.runtime.QuartzScheduler. So it tests our quartz integration.", "author": "mkouba", "createdAt": "2020-05-07T17:29:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUxNDU1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3MzYxNw==", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r421673617", "bodyText": "Sorry, I confused it with quartz specific scheduler which throws an injection point exception. Let\u2019s keep it then. Ignore the noises!", "author": "machi1990", "createdAt": "2020-05-07T17:31:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUxNDU1NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUxNjgyMw==", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r421516823", "bodyText": "Since we are only testing if scheduler is running or not, I think we can live off this class a.k.a we do not need it.", "author": "machi1990", "createdAt": "2020-05-07T13:46:59Z", "path": "extensions/scheduler/deployment/src/test/java/io/quarkus/scheduler/test/DisabledSchedulerTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.quarkus.scheduler.test;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import javax.inject.Inject;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.scheduler.Scheduled;\n+import io.quarkus.scheduler.Scheduler;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class DisabledSchedulerTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest test = new QuarkusUnitTest()\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                    .addClasses(Jobs.class)\n+                    .addAsResource(new StringAsset(\"quarkus.scheduler.enabled=false\"),\n+                            \"application.properties\"));\n+\n+    @Inject\n+    Scheduler scheduler;\n+\n+    @Test\n+    public void testNoSchedulerInvocations() throws InterruptedException {\n+        assertFalse(scheduler.isRunning());\n+    }\n+\n+    static class Jobs {", "originalCommit": "b2da973403d7627de3183f0e1129cd90eba090d2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3ODgwMA==", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r421678800", "bodyText": "I think that we do need it because if there is no scheduled method then SimpleScheduler is never started.", "author": "mkouba", "createdAt": "2020-05-07T17:39:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUxNjgyMw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "a1f5a3cab78a20f4cdb501ce4c57ae055859e4fc", "url": "https://github.com/quarkusio/quarkus/commit/a1f5a3cab78a20f4cdb501ce4c57ae055859e4fc", "message": "disabled schedulers by runtime config", "committedDate": "2020-05-07T13:53:06Z", "type": "commit"}]}