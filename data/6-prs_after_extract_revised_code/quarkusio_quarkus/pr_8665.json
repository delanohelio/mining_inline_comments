{"pr_number": 8665, "pr_title": "Fix quarkus-quartz duplicating clustered jobs", "pr_createdAt": "2020-04-17T21:06:28Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/8665", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY2NDE1Nw==", "url": "https://github.com/quarkusio/quarkus/pull/8665#discussion_r410664157", "bodyText": "You can't remove the BuildProducer<BeanConfiguratorBuildItem> beans even though it's unused. This ensures this build step is executed before ArcProcessor#validate(). See the BeanRegistrationPhaseBuildItem javadoc.", "author": "mkouba", "createdAt": "2020-04-18T07:48:52Z", "path": "extensions/scheduler/deployment/src/main/java/io/quarkus/scheduler/deployment/SchedulerProcessor.java", "diffHunk": "@@ -117,27 +115,21 @@ public void transform(TransformationContext context) {\n     }\n \n     @BuildStep\n-    void collectScheduledMethods(\n-            SchedulerConfig config,\n-            BeanArchiveIndexBuildItem beanArchives,\n-            BeanRegistrationPhaseBuildItem beanRegistrationPhase,\n-            BuildProducer<ScheduledBusinessMethodItem> scheduledBusinessMethods,\n-            BuildProducer<BeanConfiguratorBuildItem> beans) {\n+    void collectScheduledMethods(BeanArchiveIndexBuildItem beanArchives, BeanRegistrationPhaseBuildItem beanRegistrationPhase,\n+            BuildProducer<ScheduledBusinessMethodItem> scheduledBusinessMethods) {", "originalCommit": "1ecbc37152bbdc48f079f95c0f83da67a97fa347", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3ODg5Ng==", "url": "https://github.com/quarkusio/quarkus/pull/8665#discussion_r410678896", "bodyText": "Good catch. I might have gone a bit fast on that one. Let's keep it.", "author": "machi1990", "createdAt": "2020-04-18T10:19:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY2NDE1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIwNjQzNA==", "url": "https://github.com/quarkusio/quarkus/pull/8665#discussion_r411206434", "bodyText": "Off topic: should we have a documentation-only annotation, called e.g. @Ordering, that would be added to such places to let people know what's the purpose of the dependency?", "author": "Ladicek", "createdAt": "2020-04-20T08:52:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY2NDE1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMyMjAzOA==", "url": "https://github.com/quarkusio/quarkus/pull/8665#discussion_r411322038", "bodyText": "@Ladicek Sounds like a very good idea.", "author": "machi1990", "createdAt": "2020-04-20T12:03:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY2NDE1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "556b32f0c20a4e0c28e3e3465e88c099e76b41b7", "chunk": "diff --git a/extensions/scheduler/deployment/src/main/java/io/quarkus/scheduler/deployment/SchedulerProcessor.java b/extensions/scheduler/deployment/src/main/java/io/quarkus/scheduler/deployment/SchedulerProcessor.java\nindex b2b659f043..431efc80fa 100644\n--- a/extensions/scheduler/deployment/src/main/java/io/quarkus/scheduler/deployment/SchedulerProcessor.java\n+++ b/extensions/scheduler/deployment/src/main/java/io/quarkus/scheduler/deployment/SchedulerProcessor.java\n\n@@ -116,7 +116,8 @@ public class SchedulerProcessor {\n \n     @BuildStep\n     void collectScheduledMethods(BeanArchiveIndexBuildItem beanArchives, BeanRegistrationPhaseBuildItem beanRegistrationPhase,\n-            BuildProducer<ScheduledBusinessMethodItem> scheduledBusinessMethods) {\n+            BuildProducer<ScheduledBusinessMethodItem> scheduledBusinessMethods,\n+            BuildProducer<BeanRegistrationPhaseBuildItem.BeanConfiguratorBuildItem> beans) {\n \n         AnnotationStore annotationStore = beanRegistrationPhase.getContext().get(BuildExtension.Key.ANNOTATION_STORE);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY2NDM2MQ==", "url": "https://github.com/quarkusio/quarkus/pull/8665#discussion_r410664361", "bodyText": "We should also use Scheduled.identity() in the SimpleScheduler.", "author": "mkouba", "createdAt": "2020-04-18T07:51:14Z", "path": "extensions/scheduler/runtime/src/main/java/io/quarkus/scheduler/Scheduled.java", "diffHunk": "@@ -39,6 +39,16 @@\n @Repeatable(Schedules.class)\n public @interface Scheduled {\n \n+    /**\n+     * Optionally defines a unique identifier for this job.\n+     * <p>\n+     * If the value is not given, Quarkus will generate a unique id.\n+     * <p>\n+     * \n+     * @return the unique identity of the schedule\n+     */\n+    String identity() default \"\";", "originalCommit": "1ecbc37152bbdc48f079f95c0f83da67a97fa347", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3OTk3MA==", "url": "https://github.com/quarkusio/quarkus/pull/8665#discussion_r410679970", "bodyText": "Yes, I forgot about that one. Should be good now.", "author": "machi1990", "createdAt": "2020-04-18T10:30:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY2NDM2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "bf9951a49677fc0f622031b8a3a3550400a34e8e", "chunk": "diff --git a/extensions/scheduler/runtime/src/main/java/io/quarkus/scheduler/Scheduled.java b/extensions/scheduler/runtime/src/main/java/io/quarkus/scheduler/Scheduled.java\nindex 6a47e8d519..0183e8c00f 100644\n--- a/extensions/scheduler/runtime/src/main/java/io/quarkus/scheduler/Scheduled.java\n+++ b/extensions/scheduler/runtime/src/main/java/io/quarkus/scheduler/Scheduled.java\n\n@@ -39,16 +39,6 @@ import io.quarkus.scheduler.Scheduled.Schedules;\n @Repeatable(Schedules.class)\n public @interface Scheduled {\n \n-    /**\n-     * Optionally defines a unique identifier for this job.\n-     * <p>\n-     * If the value is not given, Quarkus will generate a unique id.\n-     * <p>\n-     * \n-     * @return the unique identity of the schedule\n-     */\n-    String identity() default \"\";\n-\n     /**\n      * Defines a cron-like expression. For example \"0 15 10 * * ?\" fires at 10:15am every day.\n      * <p>\n"}}, {"oid": "556b32f0c20a4e0c28e3e3465e88c099e76b41b7", "url": "https://github.com/quarkusio/quarkus/commit/556b32f0c20a4e0c28e3e3465e88c099e76b41b7", "message": "feat(scheduler): add a possibility to define Job identity via the Scheduled annotation", "committedDate": "2020-04-18T10:28:00Z", "type": "forcePushed"}, {"oid": "1670e592403e8fe41f0a5eef1260b30b63286ec4", "url": "https://github.com/quarkusio/quarkus/commit/1670e592403e8fe41f0a5eef1260b30b63286ec4", "message": "feat(scheduler): add a possibility to define Job identity via the Scheduled annotation", "committedDate": "2020-04-18T12:20:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg1MzU1Mg==", "url": "https://github.com/quarkusio/quarkus/pull/8665#discussion_r410853552", "bodyText": "We could probably get rid of SimpleScheduler.triggerNameSequence and SimpleScheduler.config fields as they are only used in the constructor, in createTrigger()...", "author": "mkouba", "createdAt": "2020-04-19T08:43:56Z", "path": "extensions/scheduler/runtime/src/main/java/io/quarkus/scheduler/runtime/SimpleScheduler.java", "diffHunk": "@@ -148,7 +148,10 @@ public void resume() {\n     }\n \n     SimpleTrigger createTrigger(String invokerClass, CronParser parser, Scheduled scheduled) {\n-        String id = triggerNameSequence.getAndIncrement() + \"_\" + invokerClass;\n+        String id = scheduled.identity().trim();\n+        if (id.isEmpty()) {\n+            id = triggerNameSequence.getAndIncrement() + \"_\" + invokerClass;", "originalCommit": "1670e592403e8fe41f0a5eef1260b30b63286ec4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bf9951a49677fc0f622031b8a3a3550400a34e8e", "chunk": "diff --git a/extensions/scheduler/runtime/src/main/java/io/quarkus/scheduler/runtime/SimpleScheduler.java b/extensions/scheduler/runtime/src/main/java/io/quarkus/scheduler/runtime/SimpleScheduler.java\nindex ee5542e035..57db593deb 100644\n--- a/extensions/scheduler/runtime/src/main/java/io/quarkus/scheduler/runtime/SimpleScheduler.java\n+++ b/extensions/scheduler/runtime/src/main/java/io/quarkus/scheduler/runtime/SimpleScheduler.java\n\n@@ -148,10 +148,7 @@ public class SimpleScheduler implements Scheduler {\n     }\n \n     SimpleTrigger createTrigger(String invokerClass, CronParser parser, Scheduled scheduled) {\n-        String id = scheduled.identity().trim();\n-        if (id.isEmpty()) {\n-            id = triggerNameSequence.getAndIncrement() + \"_\" + invokerClass;\n-        }\n+        String id = triggerNameSequence.getAndIncrement() + \"_\" + invokerClass;\n         ZonedDateTime start = ZonedDateTime.now().truncatedTo(ChronoUnit.SECONDS);\n         Long millisToAdd = null;\n         if (scheduled.delay() > 0) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg1MzU3OQ==", "url": "https://github.com/quarkusio/quarkus/pull/8665#discussion_r410853579", "bodyText": "Hm, we don't need AtomicInteger here, right? We could use int and triggerNameSequence++...", "author": "mkouba", "createdAt": "2020-04-19T08:44:06Z", "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java", "diffHunk": "@@ -92,11 +89,15 @@ public QuartzScheduler(SchedulerContext context, QuartzSupport quartzSupport, Co\n                 for (ScheduledMethodMetadata method : context.getScheduledMethods()) {\n \n                     invokers.put(method.getInvokerClassName(), context.createInvoker(method.getInvokerClassName()));\n+                    AtomicInteger triggerNameSequence = new AtomicInteger();", "originalCommit": "1670e592403e8fe41f0a5eef1260b30b63286ec4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bf9951a49677fc0f622031b8a3a3550400a34e8e", "chunk": "diff --git a/extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java b/extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java\nindex 46b250cb68..93ba39f646 100644\n--- a/extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java\n+++ b/extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java\n\n@@ -92,12 +92,9 @@ public class QuartzScheduler implements Scheduler {\n                     AtomicInteger triggerNameSequence = new AtomicInteger();\n \n                     for (Scheduled scheduled : method.getSchedules()) {\n-                        String identity = scheduled.identity().trim();\n-                        if (identity.isEmpty()) {\n-                            identity = triggerNameSequence.getAndIncrement() + \"_\" + method.getInvokerClassName();\n-                        }\n+                        String name = triggerNameSequence.getAndIncrement() + \"_\" + method.getInvokerClassName();\n                         JobBuilder jobBuilder = JobBuilder.newJob(InvokerJob.class)\n-                                .withIdentity(identity, Scheduler.class.getName())\n+                                .withIdentity(name, Scheduler.class.getName())\n                                 .usingJobData(INVOKER_KEY, method.getInvokerClassName())\n                                 .requestRecovery();\n                         ScheduleBuilder<?> scheduleBuilder;\n"}}, {"oid": "bf9951a49677fc0f622031b8a3a3550400a34e8e", "url": "https://github.com/quarkusio/quarkus/commit/bf9951a49677fc0f622031b8a3a3550400a34e8e", "message": "fix(quartz): make sure that job identity is unique and deterministic across several builds\n\nFix #8661 - by making sure that the sequence is unique for each invoker class i.e a scheduled methods.", "committedDate": "2020-04-19T09:59:11Z", "type": "commit"}, {"oid": "c918947d0c32c952cf337cc4c1bd122decf0f4af", "url": "https://github.com/quarkusio/quarkus/commit/c918947d0c32c952cf337cc4c1bd122decf0f4af", "message": "refactor: remove some unused parameters", "committedDate": "2020-04-19T09:59:11Z", "type": "commit"}, {"oid": "25ed4d8da8545db9deb7b86ed29d092ff46b0fd5", "url": "https://github.com/quarkusio/quarkus/commit/25ed4d8da8545db9deb7b86ed29d092ff46b0fd5", "message": "feat(scheduler): add a possibility to define Job identity via the Scheduled annotation", "committedDate": "2020-04-19T09:59:11Z", "type": "commit"}, {"oid": "25ed4d8da8545db9deb7b86ed29d092ff46b0fd5", "url": "https://github.com/quarkusio/quarkus/commit/25ed4d8da8545db9deb7b86ed29d092ff46b0fd5", "message": "feat(scheduler): add a possibility to define Job identity via the Scheduled annotation", "committedDate": "2020-04-19T09:59:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIwMDMxOQ==", "url": "https://github.com/quarkusio/quarkus/pull/8665#discussion_r411200319", "bodyText": "I'm not sure I see how this solves the issue?", "author": "gsmet", "createdAt": "2020-04-20T08:43:01Z", "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java", "diffHunk": "@@ -92,11 +88,15 @@ public QuartzScheduler(SchedulerContext context, QuartzSupport quartzSupport, Co\n                 for (ScheduledMethodMetadata method : context.getScheduledMethods()) {\n \n                     invokers.put(method.getInvokerClassName(), context.createInvoker(method.getInvokerClassName()));\n+                    int nameSequence = 0;\n \n                     for (Scheduled scheduled : method.getSchedules()) {\n-                        String name = triggerNameSequence.getAndIncrement() + \"_\" + method.getInvokerClassName();\n+                        String identity = scheduled.identity().trim();\n+                        if (identity.isEmpty()) {\n+                            identity = ++nameSequence + \"_\" + method.getInvokerClassName();", "originalCommit": "25ed4d8da8545db9deb7b86ed29d092ff46b0fd5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI4ODQ5NQ==", "url": "https://github.com/quarkusio/quarkus/pull/8665#discussion_r411288495", "bodyText": "Because of the way beans are registered (in an unordered data structure), the list of scheduled methods (invoked methods) did not guarantee that the order is respected in between builds. So instead of having a global sequence strategy for the whole list - whose order can change in between builds, we just maintain a separate sequence for each method which does not change unless otherwise multiple @Scheduled annotations are re-arranged (source code change) for a given scheduled method which won't be a problem because of - https://github.com/quarkusio/quarkus/blob/master/extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java#L150-L152.", "author": "machi1990", "createdAt": "2020-04-20T11:04:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIwMDMxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI5MjExOA==", "url": "https://github.com/quarkusio/quarkus/pull/8665#discussion_r411292118", "bodyText": "OK. An important thing is: https://stackoverflow.com/questions/26086538/order-of-automatically-wrapped-repeatable-annotations .", "author": "gsmet", "createdAt": "2020-04-20T11:10:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIwMDMxOQ=="}], "type": "inlineReview", "revised_code": null}]}