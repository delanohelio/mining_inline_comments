{"pr_number": 7560, "pr_title": "Qute - loop section -support iterators and arrays", "pr_createdAt": "2020-03-04T12:03:45Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/7560", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYzNzA5Mw==", "url": "https://github.com/quarkusio/quarkus/pull/7560#discussion_r387637093", "bodyText": "No biggie but maybe the null check could be the first statement to check in this if-else chain", "author": "gastaldi", "createdAt": "2020-03-04T12:34:15Z", "path": "independent-projects/qute/core/src/main/java/io/quarkus/qute/LoopSectionHelper.java", "diffHunk": "@@ -40,12 +41,16 @@\n             Iterator<?> iterator;\n             if (it instanceof Iterable) {\n                 iterator = ((Iterable<?>) it).iterator();\n+            } else if (it instanceof Iterator) {\n+                iterator = (Iterator<?>) it;\n             } else if (it instanceof Map) {\n                 iterator = ((Map<?, ?>) it).entrySet().iterator();\n             } else if (it instanceof Stream) {\n                 iterator = ((Stream<?>) it).sequential().iterator();\n             } else if (it instanceof Integer) {\n                 iterator = IntStream.rangeClosed(1, (Integer) it).iterator();\n+            } else if (it != null && it.getClass().isArray()) {", "originalCommit": "8ed3f86aebb49d7bdada180100710f41f1df6044", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1MDUwMQ==", "url": "https://github.com/quarkusio/quarkus/pull/7560#discussion_r387650501", "bodyText": "Well, instanceof handles null values so I don't think it would help in any way...  also the IllegalStateException should be the same for null and types that are not considered iterable. WDYT?", "author": "mkouba", "createdAt": "2020-03-04T13:00:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYzNzA5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1MTkyMQ==", "url": "https://github.com/quarkusio/quarkus/pull/7560#discussion_r387651921", "bodyText": "Hm, I can try to improve the readability a little bit..", "author": "mkouba", "createdAt": "2020-03-04T13:03:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYzNzA5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "dfd65d237f7b879378cd6930856d6cc9c636e564", "chunk": "diff --git a/independent-projects/qute/core/src/main/java/io/quarkus/qute/LoopSectionHelper.java b/independent-projects/qute/core/src/main/java/io/quarkus/qute/LoopSectionHelper.java\nindex 480550e552..f15dbc81c3 100644\n--- a/independent-projects/qute/core/src/main/java/io/quarkus/qute/LoopSectionHelper.java\n+++ b/independent-projects/qute/core/src/main/java/io/quarkus/qute/LoopSectionHelper.java\n\n@@ -36,27 +36,15 @@ public class LoopSectionHelper implements SectionHelper {\n     @Override\n     public CompletionStage<ResultNode> resolve(SectionResolutionContext context) {\n         return context.resolutionContext().evaluate(iterable).thenCompose(it -> {\n-            // Ideally, we should not block here but we still need to retain the order of results \n-            List<CompletionStage<ResultNode>> results = new ArrayList<>();\n-            Iterator<?> iterator;\n-            if (it instanceof Iterable) {\n-                iterator = ((Iterable<?>) it).iterator();\n-            } else if (it instanceof Iterator) {\n-                iterator = (Iterator<?>) it;\n-            } else if (it instanceof Map) {\n-                iterator = ((Map<?, ?>) it).entrySet().iterator();\n-            } else if (it instanceof Stream) {\n-                iterator = ((Stream<?>) it).sequential().iterator();\n-            } else if (it instanceof Integer) {\n-                iterator = IntStream.rangeClosed(1, (Integer) it).iterator();\n-            } else if (it != null && it.getClass().isArray()) {\n-                iterator = Arrays.stream((Object[]) it).iterator();\n-            } else {\n-                throw new IllegalStateException(\n-                        String.format(\"Cannot iterate over [%s] resolved for [%s] in template %s on line %s\", it,\n-                                iterable.toOriginalString(), iterable.origin.getTemplateId(), iterable.origin.getLine()));\n+            if (it == null) {\n+                throw new TemplateException(String.format(\n+                        \"Loop section error in template %s on line %s: [%s] resolved to [null] which is not iterable\",\n+                        iterable.origin.getTemplateId(), iterable.origin.getLine(), iterable.toOriginalString()));\n             }\n+            List<CompletionStage<ResultNode>> results = new ArrayList<>();\n+            Iterator<?> iterator = extractIterator(it);\n             int idx = 0;\n+            // Ideally, we should not block here but we still need to retain the order of results\n             while (iterator.hasNext()) {\n                 results.add(nextElement(iterator.next(), idx++, iterator.hasNext(), context));\n             }\n"}}, {"oid": "dfd65d237f7b879378cd6930856d6cc9c636e564", "url": "https://github.com/quarkusio/quarkus/commit/dfd65d237f7b879378cd6930856d6cc9c636e564", "message": "Qute - loop section -support iterators and arrays", "committedDate": "2020-03-04T13:32:33Z", "type": "commit"}, {"oid": "dfd65d237f7b879378cd6930856d6cc9c636e564", "url": "https://github.com/quarkusio/quarkus/commit/dfd65d237f7b879378cd6930856d6cc9c636e564", "message": "Qute - loop section -support iterators and arrays", "committedDate": "2020-03-04T13:32:33Z", "type": "forcePushed"}]}