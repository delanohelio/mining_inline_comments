{"pr_number": 6822, "pr_title": "Fix broken copy json resources", "pr_createdAt": "2020-01-28T10:15:53Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/6822", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEyOTgzMQ==", "url": "https://github.com/quarkusio/quarkus/pull/6822#discussion_r372129831", "bodyText": "Files.find needs to be in a try with resources block, as the stream needs to be closed.", "author": "stuartwdouglas", "createdAt": "2020-01-29T00:14:41Z", "path": "core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/JarResultBuildStep.java", "diffHunk": "@@ -378,31 +379,43 @@ public NativeImageSourceJarBuildItem buildNativeImageJar(CurateOutcomeBuildItem\n      */\n     private void copyJsonConfigFiles(ApplicationArchivesBuildItem applicationArchivesBuildItem, Path thinJarDirectory)\n             throws IOException {\n-        // archiveLocation contains the location of the application jar at this point\n-        Path appJarPath = applicationArchivesBuildItem.getRootArchive().getArchiveLocation();\n-        try (FileSystem jarFileSystem = FileSystems.newFileSystem(appJarPath, null)) {\n-            try (Stream<Path> stream = Files.find(jarFileSystem.getPath(\"/\"), 1, new BiPredicate<Path, BasicFileAttributes>() {\n+        Path archiveLocation = applicationArchivesBuildItem.getRootArchive().getArchiveLocation();\n+        if (Files.isDirectory(archiveLocation)) { // this is the use case where the native image is built as part of the regular build\n+            Files.find(archiveLocation, 1, IS_JSON_FILE_PREDICATE).forEach(new Consumer<Path>() {", "originalCommit": "226a960fa716bc754eadca5a8ea7f5f2571d282b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIyODYyMA==", "url": "https://github.com/quarkusio/quarkus/pull/6822#discussion_r372228620", "bodyText": "Oops! My bad, it should be fixed now", "author": "geoand", "createdAt": "2020-01-29T07:41:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEyOTgzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "18090bd3ce24ae696ddf9b2cb9fdfaaf85ee864d", "chunk": "diff --git a/core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/JarResultBuildStep.java b/core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/JarResultBuildStep.java\nindex 3c27945971..a6886c4bbd 100644\n--- a/core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/JarResultBuildStep.java\n+++ b/core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/JarResultBuildStep.java\n\n@@ -381,16 +381,18 @@ public class JarResultBuildStep {\n             throws IOException {\n         Path archiveLocation = applicationArchivesBuildItem.getRootArchive().getArchiveLocation();\n         if (Files.isDirectory(archiveLocation)) { // this is the use case where the native image is built as part of the regular build\n-            Files.find(archiveLocation, 1, IS_JSON_FILE_PREDICATE).forEach(new Consumer<Path>() {\n-                @Override\n-                public void accept(Path jsonPath) {\n-                    try {\n-                        Files.copy(jsonPath, thinJarDirectory.resolve(jsonPath.getFileName()));\n-                    } catch (IOException e) {\n-                        toUncheckedException(e, jsonPath, thinJarDirectory);\n+            try (Stream<Path> stream = Files.find(archiveLocation, 1, IS_JSON_FILE_PREDICATE)) {\n+                stream.forEach(new Consumer<Path>() {\n+                    @Override\n+                    public void accept(Path jsonPath) {\n+                        try {\n+                            Files.copy(jsonPath, thinJarDirectory.resolve(jsonPath.getFileName()));\n+                        } catch (IOException e) {\n+                            toUncheckedException(e, jsonPath, thinJarDirectory);\n+                        }\n                     }\n-                }\n-            });\n+                });\n+            }\n         } else {\n             // this is to support building native images using the NativeImageMojo\n             try (FileSystem jarFileSystem = FileSystems.newFileSystem(archiveLocation, null)) {\n"}}, {"oid": "18090bd3ce24ae696ddf9b2cb9fdfaaf85ee864d", "url": "https://github.com/quarkusio/quarkus/commit/18090bd3ce24ae696ddf9b2cb9fdfaaf85ee864d", "message": "Ensure that json config file copying works under all circumstances", "committedDate": "2020-01-29T07:41:16Z", "type": "commit"}, {"oid": "b7dc582c91b907521391735cdd80a0d07f9de1b4", "url": "https://github.com/quarkusio/quarkus/commit/b7dc582c91b907521391735cdd80a0d07f9de1b4", "message": "Make one of the integration tests use the new way of building native image", "committedDate": "2020-01-29T07:41:19Z", "type": "commit"}, {"oid": "b7dc582c91b907521391735cdd80a0d07f9de1b4", "url": "https://github.com/quarkusio/quarkus/commit/b7dc582c91b907521391735cdd80a0d07f9de1b4", "message": "Make one of the integration tests use the new way of building native image", "committedDate": "2020-01-29T07:41:19Z", "type": "forcePushed"}]}