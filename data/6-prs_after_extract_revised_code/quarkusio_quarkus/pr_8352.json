{"pr_number": 8352, "pr_title": "Move the Security API to Mutiny", "pr_createdAt": "2020-04-02T11:46:59Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/8352", "timeline": [{"oid": "5d40ba6b39daeb855c56c86b32485505193d0f28", "url": "https://github.com/quarkusio/quarkus/commit/5d40ba6b39daeb855c56c86b32485505193d0f28", "message": "Move the Security API to Mutiny", "committedDate": "2020-04-02T22:25:25Z", "type": "forcePushed"}, {"oid": "97d6af27054280a071c8b32771bd4a2520e0fdd2", "url": "https://github.com/quarkusio/quarkus/commit/97d6af27054280a071c8b32771bd4a2520e0fdd2", "message": "Move the Security API to Mutiny", "committedDate": "2020-04-02T23:22:24Z", "type": "forcePushed"}, {"oid": "47dc6c9d0357745ce3ff1aa2f52fe2a1160173a5", "url": "https://github.com/quarkusio/quarkus/commit/47dc6c9d0357745ce3ff1aa2f52fe2a1160173a5", "message": "Move the Security API to Mutiny", "committedDate": "2020-04-03T03:30:00Z", "type": "forcePushed"}, {"oid": "75166965a777d30d9638465a216dfe9846f8b26a", "url": "https://github.com/quarkusio/quarkus/commit/75166965a777d30d9638465a216dfe9846f8b26a", "message": "Move the Security API to Mutiny", "committedDate": "2020-04-06T00:23:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA1OTk0OQ==", "url": "https://github.com/quarkusio/quarkus/pull/8352#discussion_r404059949", "bodyText": "Depending on how much laziness you want, you can delay the object creation to subscription time:\nreturn Uni.createFrom().item(() -> {\n    return     .....build();\n});", "author": "cescoffier", "createdAt": "2020-04-06T12:42:37Z", "path": "extensions/elytron-security-oauth2/runtime/src/main/java/io/quarkus/elytron/security/oauth2/runtime/auth/OAuth2Augmentor.java", "diffHunk": "@@ -37,11 +35,10 @@ public int priority() {\n                     builder.addRole(i);\n                 }\n             }\n-            cs.complete(builder.build());\n+            return Uni.createFrom().item(builder.build());", "originalCommit": "75166965a777d30d9638465a216dfe9846f8b26a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dca4b97ef9a5cb1a1528d7ca026bc7996d0d1af8", "chunk": "diff --git a/extensions/elytron-security-oauth2/runtime/src/main/java/io/quarkus/elytron/security/oauth2/runtime/auth/OAuth2Augmentor.java b/extensions/elytron-security-oauth2/runtime/src/main/java/io/quarkus/elytron/security/oauth2/runtime/auth/OAuth2Augmentor.java\nindex 0280fea0bd..d4c3aad579 100644\n--- a/extensions/elytron-security-oauth2/runtime/src/main/java/io/quarkus/elytron/security/oauth2/runtime/auth/OAuth2Augmentor.java\n+++ b/extensions/elytron-security-oauth2/runtime/src/main/java/io/quarkus/elytron/security/oauth2/runtime/auth/OAuth2Augmentor.java\n\n@@ -24,18 +25,24 @@ public class OAuth2Augmentor implements SecurityIdentityAugmentor {\n     @Override\n     public Uni<SecurityIdentity> augment(SecurityIdentity identity, AuthenticationRequestContext context) {\n         if (identity.getPrincipal() instanceof ElytronOAuth2CallerPrincipal) {\n-            QuarkusSecurityIdentity.Builder builder = QuarkusSecurityIdentity.builder()\n-                    .setPrincipal(identity.getPrincipal())\n-                    .addAttributes(identity.getAttributes())\n-                    .addCredentials(identity.getCredentials())\n-                    .addRoles(identity.getRoles());\n-            String[] roles = extractRoles(((ElytronOAuth2CallerPrincipal) identity.getPrincipal()));\n-            if (roles != null) {\n-                for (String i : roles) {\n-                    builder.addRole(i);\n+\n+            return Uni.createFrom().item(new Supplier<SecurityIdentity>() {\n+                @Override\n+                public SecurityIdentity get() {\n+                    QuarkusSecurityIdentity.Builder builder = QuarkusSecurityIdentity.builder()\n+                            .setPrincipal(identity.getPrincipal())\n+                            .addAttributes(identity.getAttributes())\n+                            .addCredentials(identity.getCredentials())\n+                            .addRoles(identity.getRoles());\n+                    String[] roles = extractRoles(((ElytronOAuth2CallerPrincipal) identity.getPrincipal()));\n+                    if (roles != null) {\n+                        for (String i : roles) {\n+                            builder.addRole(i);\n+                        }\n+                    }\n+                    return builder.build();\n                 }\n-            }\n-            return Uni.createFrom().item(builder.build());\n+            });\n         } else {\n             return Uni.createFrom().item(identity);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2MDk5NQ==", "url": "https://github.com/quarkusio/quarkus/pull/8352#discussion_r404060995", "bodyText": "Any reason to change the output?\nInitially, you was redeeming null, now you create null from an Optional.", "author": "cescoffier", "createdAt": "2020-04-06T12:44:16Z", "path": "extensions/elytron-security-oauth2/runtime/src/main/java/io/quarkus/elytron/security/oauth2/runtime/auth/OAuth2AuthMechanism.java", "diffHunk": "@@ -46,16 +46,16 @@\n \n         }\n         // No suitable header has been found in this request,\n-        return CompletableFuture.completedFuture(null);\n+        return Uni.createFrom().optional(Optional.empty());", "originalCommit": "75166965a777d30d9638465a216dfe9846f8b26a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dca4b97ef9a5cb1a1528d7ca026bc7996d0d1af8", "chunk": "diff --git a/extensions/elytron-security-oauth2/runtime/src/main/java/io/quarkus/elytron/security/oauth2/runtime/auth/OAuth2AuthMechanism.java b/extensions/elytron-security-oauth2/runtime/src/main/java/io/quarkus/elytron/security/oauth2/runtime/auth/OAuth2AuthMechanism.java\nindex bf53f95a1f..6e67cbbc7d 100644\n--- a/extensions/elytron-security-oauth2/runtime/src/main/java/io/quarkus/elytron/security/oauth2/runtime/auth/OAuth2AuthMechanism.java\n+++ b/extensions/elytron-security-oauth2/runtime/src/main/java/io/quarkus/elytron/security/oauth2/runtime/auth/OAuth2AuthMechanism.java\n\n@@ -46,16 +50,12 @@ public class OAuth2AuthMechanism implements HttpAuthenticationMechanism {\n \n         }\n         // No suitable header has been found in this request,\n-        return Uni.createFrom().optional(Optional.empty());\n+        return Uni.createFrom().nullItem();\n     }\n \n     @Override\n     public Uni<ChallengeData> getChallenge(RoutingContext context) {\n-        ChallengeData result = new ChallengeData(\n-                HttpResponseStatus.UNAUTHORIZED.code(),\n-                HttpHeaderNames.WWW_AUTHENTICATE,\n-                \"Bearer {token}\");\n-        return Uni.createFrom().item(result);\n+        return Uni.createFrom().item(CHALLENGE_DATA);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2MTY2NQ==", "url": "https://github.com/quarkusio/quarkus/pull/8352#discussion_r404061665", "bodyText": "Depends on the laziness you want, you can delay the result creation with a supplier (() -> {...}).\nIt would only create the object on subscription.", "author": "cescoffier", "createdAt": "2020-04-06T12:45:26Z", "path": "extensions/elytron-security-oauth2/runtime/src/main/java/io/quarkus/elytron/security/oauth2/runtime/auth/OAuth2AuthMechanism.java", "diffHunk": "@@ -46,16 +46,16 @@\n \n         }\n         // No suitable header has been found in this request,\n-        return CompletableFuture.completedFuture(null);\n+        return Uni.createFrom().optional(Optional.empty());\n     }\n \n     @Override\n-    public CompletionStage<ChallengeData> getChallenge(RoutingContext context) {\n+    public Uni<ChallengeData> getChallenge(RoutingContext context) {\n         ChallengeData result = new ChallengeData(\n                 HttpResponseStatus.UNAUTHORIZED.code(),\n                 HttpHeaderNames.WWW_AUTHENTICATE,\n                 \"Bearer {token}\");\n-        return CompletableFuture.completedFuture(result);\n+        return Uni.createFrom().item(result);", "originalCommit": "75166965a777d30d9638465a216dfe9846f8b26a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dca4b97ef9a5cb1a1528d7ca026bc7996d0d1af8", "chunk": "diff --git a/extensions/elytron-security-oauth2/runtime/src/main/java/io/quarkus/elytron/security/oauth2/runtime/auth/OAuth2AuthMechanism.java b/extensions/elytron-security-oauth2/runtime/src/main/java/io/quarkus/elytron/security/oauth2/runtime/auth/OAuth2AuthMechanism.java\nindex bf53f95a1f..6e67cbbc7d 100644\n--- a/extensions/elytron-security-oauth2/runtime/src/main/java/io/quarkus/elytron/security/oauth2/runtime/auth/OAuth2AuthMechanism.java\n+++ b/extensions/elytron-security-oauth2/runtime/src/main/java/io/quarkus/elytron/security/oauth2/runtime/auth/OAuth2AuthMechanism.java\n\n@@ -46,16 +50,12 @@ public class OAuth2AuthMechanism implements HttpAuthenticationMechanism {\n \n         }\n         // No suitable header has been found in this request,\n-        return Uni.createFrom().optional(Optional.empty());\n+        return Uni.createFrom().nullItem();\n     }\n \n     @Override\n     public Uni<ChallengeData> getChallenge(RoutingContext context) {\n-        ChallengeData result = new ChallengeData(\n-                HttpResponseStatus.UNAUTHORIZED.code(),\n-                HttpHeaderNames.WWW_AUTHENTICATE,\n-                \"Bearer {token}\");\n-        return Uni.createFrom().item(result);\n+        return Uni.createFrom().item(CHALLENGE_DATA);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2MjI5OQ==", "url": "https://github.com/quarkusio/quarkus/pull/8352#discussion_r404062299", "bodyText": "I believe you want to emit null right?", "author": "cescoffier", "createdAt": "2020-04-06T12:46:31Z", "path": "extensions/elytron-security-properties-file/deployment/src/test/java/io/quarkus/security/test/CustomAuth.java", "diffHunk": "@@ -65,24 +65,22 @@\n \n                     // By this point we had a header we should have been able to verify but for some reason\n                     // it was not correctly structured.\n-                    CompletableFuture<SecurityIdentity> cf = new CompletableFuture<>();\n-                    cf.completeExceptionally(new AuthenticationFailedException());\n-                    return cf;\n+                    return Uni.createFrom().failure(new AuthenticationFailedException());\n                 }\n             }\n         }\n \n         // No suitable header has been found in this request,\n-        return CompletableFuture.completedFuture(null);\n+        return Uni.createFrom().optional(Optional.empty());", "originalCommit": "75166965a777d30d9638465a216dfe9846f8b26a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dca4b97ef9a5cb1a1528d7ca026bc7996d0d1af8", "chunk": "diff --git a/extensions/elytron-security-properties-file/deployment/src/test/java/io/quarkus/security/test/CustomAuth.java b/extensions/elytron-security-properties-file/deployment/src/test/java/io/quarkus/security/test/CustomAuth.java\nindex ef97ccb313..b6ff714b87 100644\n--- a/extensions/elytron-security-properties-file/deployment/src/test/java/io/quarkus/security/test/CustomAuth.java\n+++ b/extensions/elytron-security-properties-file/deployment/src/test/java/io/quarkus/security/test/CustomAuth.java\n\n@@ -71,16 +74,12 @@ public class CustomAuth implements HttpAuthenticationMechanism {\n         }\n \n         // No suitable header has been found in this request,\n-        return Uni.createFrom().optional(Optional.empty());\n+        return Uni.createFrom().nullItem();\n     }\n \n     @Override\n     public Uni<ChallengeData> getChallenge(RoutingContext context) {\n-        ChallengeData result = new ChallengeData(\n-                HttpResponseStatus.UNAUTHORIZED.code(),\n-                HttpHeaderNames.WWW_AUTHENTICATE,\n-                \"BASIC realm=CUSTOM\");\n-        return Uni.createFrom().item(result);\n+        return Uni.createFrom().item(CHALLENGE_DATA);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2MjU4OQ==", "url": "https://github.com/quarkusio/quarkus/pull/8352#discussion_r404062589", "bodyText": "You can, if you want, delay the creation of the challenge at subscription time.", "author": "cescoffier", "createdAt": "2020-04-06T12:46:59Z", "path": "extensions/elytron-security-properties-file/deployment/src/test/java/io/quarkus/security/test/CustomAuth.java", "diffHunk": "@@ -65,24 +65,22 @@\n \n                     // By this point we had a header we should have been able to verify but for some reason\n                     // it was not correctly structured.\n-                    CompletableFuture<SecurityIdentity> cf = new CompletableFuture<>();\n-                    cf.completeExceptionally(new AuthenticationFailedException());\n-                    return cf;\n+                    return Uni.createFrom().failure(new AuthenticationFailedException());\n                 }\n             }\n         }\n \n         // No suitable header has been found in this request,\n-        return CompletableFuture.completedFuture(null);\n+        return Uni.createFrom().optional(Optional.empty());\n     }\n \n     @Override\n-    public CompletionStage<ChallengeData> getChallenge(RoutingContext context) {\n+    public Uni<ChallengeData> getChallenge(RoutingContext context) {\n         ChallengeData result = new ChallengeData(\n                 HttpResponseStatus.UNAUTHORIZED.code(),\n                 HttpHeaderNames.WWW_AUTHENTICATE,\n                 \"BASIC realm=CUSTOM\");\n-        return CompletableFuture.completedFuture(result);\n+        return Uni.createFrom().item(result);", "originalCommit": "75166965a777d30d9638465a216dfe9846f8b26a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dca4b97ef9a5cb1a1528d7ca026bc7996d0d1af8", "chunk": "diff --git a/extensions/elytron-security-properties-file/deployment/src/test/java/io/quarkus/security/test/CustomAuth.java b/extensions/elytron-security-properties-file/deployment/src/test/java/io/quarkus/security/test/CustomAuth.java\nindex ef97ccb313..b6ff714b87 100644\n--- a/extensions/elytron-security-properties-file/deployment/src/test/java/io/quarkus/security/test/CustomAuth.java\n+++ b/extensions/elytron-security-properties-file/deployment/src/test/java/io/quarkus/security/test/CustomAuth.java\n\n@@ -71,16 +74,12 @@ public class CustomAuth implements HttpAuthenticationMechanism {\n         }\n \n         // No suitable header has been found in this request,\n-        return Uni.createFrom().optional(Optional.empty());\n+        return Uni.createFrom().nullItem();\n     }\n \n     @Override\n     public Uni<ChallengeData> getChallenge(RoutingContext context) {\n-        ChallengeData result = new ChallengeData(\n-                HttpResponseStatus.UNAUTHORIZED.code(),\n-                HttpHeaderNames.WWW_AUTHENTICATE,\n-                \"BASIC realm=CUSTOM\");\n-        return Uni.createFrom().item(result);\n+        return Uni.createFrom().item(CHALLENGE_DATA);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2Mzg5OQ==", "url": "https://github.com/quarkusio/quarkus/pull/8352#discussion_r404063899", "bodyText": "Wondering if this ChallengeData can be cached and singleton.", "author": "cescoffier", "createdAt": "2020-04-06T12:49:19Z", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/BearerAuthenticationMechanism.java", "diffHunk": "@@ -25,18 +25,17 @@\n         if (token != null) {\n             return authenticate(identityProviderManager, new AccessTokenCredential(token, context));\n         }\n-\n-        return CompletableFuture.completedFuture(null);\n+        return Uni.createFrom().optional(Optional.empty());\n     }\n \n-    public CompletionStage<ChallengeData> getChallenge(RoutingContext context, DefaultTenantConfigResolver resolver) {\n+    public Uni<ChallengeData> getChallenge(RoutingContext context, DefaultTenantConfigResolver resolver) {\n         String bearerToken = extractBearerToken(context);\n \n         if (bearerToken == null) {\n-            return CompletableFuture.completedFuture(new ChallengeData(HttpResponseStatus.UNAUTHORIZED.code(), null, null));\n+            return Uni.createFrom().item(new ChallengeData(HttpResponseStatus.UNAUTHORIZED.code(), null, null));", "originalCommit": "75166965a777d30d9638465a216dfe9846f8b26a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dca4b97ef9a5cb1a1528d7ca026bc7996d0d1af8", "chunk": "diff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/BearerAuthenticationMechanism.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/BearerAuthenticationMechanism.java\nindex 510e818b7e..c01277c354 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/BearerAuthenticationMechanism.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/BearerAuthenticationMechanism.java\n\n@@ -25,17 +27,17 @@ public class BearerAuthenticationMechanism extends AbstractOidcAuthenticationMec\n         if (token != null) {\n             return authenticate(identityProviderManager, new AccessTokenCredential(token, context));\n         }\n-        return Uni.createFrom().optional(Optional.empty());\n+        return Uni.createFrom().nullItem();\n     }\n \n     public Uni<ChallengeData> getChallenge(RoutingContext context, DefaultTenantConfigResolver resolver) {\n         String bearerToken = extractBearerToken(context);\n \n         if (bearerToken == null) {\n-            return Uni.createFrom().item(new ChallengeData(HttpResponseStatus.UNAUTHORIZED.code(), null, null));\n+            return Uni.createFrom().item(UNAUTHORIZED_CHALLENGE);\n         }\n \n-        return Uni.createFrom().item(new ChallengeData(HttpResponseStatus.FORBIDDEN.code(), null, null));\n+        return Uni.createFrom().item(FORBIDDEN_CHALLENGE);\n     }\n \n     private String extractBearerToken(RoutingContext context) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2NDAzMQ==", "url": "https://github.com/quarkusio/quarkus/pull/8352#discussion_r404064031", "bodyText": "Wondering if this ChallengeData can be cached and singleton.", "author": "cescoffier", "createdAt": "2020-04-06T12:49:33Z", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/BearerAuthenticationMechanism.java", "diffHunk": "@@ -25,18 +25,17 @@\n         if (token != null) {\n             return authenticate(identityProviderManager, new AccessTokenCredential(token, context));\n         }\n-\n-        return CompletableFuture.completedFuture(null);\n+        return Uni.createFrom().optional(Optional.empty());\n     }\n \n-    public CompletionStage<ChallengeData> getChallenge(RoutingContext context, DefaultTenantConfigResolver resolver) {\n+    public Uni<ChallengeData> getChallenge(RoutingContext context, DefaultTenantConfigResolver resolver) {\n         String bearerToken = extractBearerToken(context);\n \n         if (bearerToken == null) {\n-            return CompletableFuture.completedFuture(new ChallengeData(HttpResponseStatus.UNAUTHORIZED.code(), null, null));\n+            return Uni.createFrom().item(new ChallengeData(HttpResponseStatus.UNAUTHORIZED.code(), null, null));\n         }\n \n-        return CompletableFuture.completedFuture(new ChallengeData(HttpResponseStatus.FORBIDDEN.code(), null, null));\n+        return Uni.createFrom().item(new ChallengeData(HttpResponseStatus.FORBIDDEN.code(), null, null));", "originalCommit": "75166965a777d30d9638465a216dfe9846f8b26a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dca4b97ef9a5cb1a1528d7ca026bc7996d0d1af8", "chunk": "diff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/BearerAuthenticationMechanism.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/BearerAuthenticationMechanism.java\nindex 510e818b7e..c01277c354 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/BearerAuthenticationMechanism.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/BearerAuthenticationMechanism.java\n\n@@ -25,17 +27,17 @@ public class BearerAuthenticationMechanism extends AbstractOidcAuthenticationMec\n         if (token != null) {\n             return authenticate(identityProviderManager, new AccessTokenCredential(token, context));\n         }\n-        return Uni.createFrom().optional(Optional.empty());\n+        return Uni.createFrom().nullItem();\n     }\n \n     public Uni<ChallengeData> getChallenge(RoutingContext context, DefaultTenantConfigResolver resolver) {\n         String bearerToken = extractBearerToken(context);\n \n         if (bearerToken == null) {\n-            return Uni.createFrom().item(new ChallengeData(HttpResponseStatus.UNAUTHORIZED.code(), null, null));\n+            return Uni.createFrom().item(UNAUTHORIZED_CHALLENGE);\n         }\n \n-        return Uni.createFrom().item(new ChallengeData(HttpResponseStatus.FORBIDDEN.code(), null, null));\n+        return Uni.createFrom().item(FORBIDDEN_CHALLENGE);\n     }\n \n     private String extractBearerToken(RoutingContext context) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2NDMxNw==", "url": "https://github.com/quarkusio/quarkus/pull/8352#discussion_r404064317", "bodyText": "Are you trying to emit null?", "author": "cescoffier", "createdAt": "2020-04-06T12:50:03Z", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/BearerAuthenticationMechanism.java", "diffHunk": "@@ -25,18 +25,17 @@\n         if (token != null) {\n             return authenticate(identityProviderManager, new AccessTokenCredential(token, context));\n         }\n-\n-        return CompletableFuture.completedFuture(null);\n+        return Uni.createFrom().optional(Optional.empty());", "originalCommit": "75166965a777d30d9638465a216dfe9846f8b26a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dca4b97ef9a5cb1a1528d7ca026bc7996d0d1af8", "chunk": "diff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/BearerAuthenticationMechanism.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/BearerAuthenticationMechanism.java\nindex 510e818b7e..c01277c354 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/BearerAuthenticationMechanism.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/BearerAuthenticationMechanism.java\n\n@@ -25,17 +27,17 @@ public class BearerAuthenticationMechanism extends AbstractOidcAuthenticationMec\n         if (token != null) {\n             return authenticate(identityProviderManager, new AccessTokenCredential(token, context));\n         }\n-        return Uni.createFrom().optional(Optional.empty());\n+        return Uni.createFrom().nullItem();\n     }\n \n     public Uni<ChallengeData> getChallenge(RoutingContext context, DefaultTenantConfigResolver resolver) {\n         String bearerToken = extractBearerToken(context);\n \n         if (bearerToken == null) {\n-            return Uni.createFrom().item(new ChallengeData(HttpResponseStatus.UNAUTHORIZED.code(), null, null));\n+            return Uni.createFrom().item(UNAUTHORIZED_CHALLENGE);\n         }\n \n-        return Uni.createFrom().item(new ChallengeData(HttpResponseStatus.FORBIDDEN.code(), null, null));\n+        return Uni.createFrom().item(FORBIDDEN_CHALLENGE);\n     }\n \n     private String extractBearerToken(RoutingContext context) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2NDc4Nw==", "url": "https://github.com/quarkusio/quarkus/pull/8352#discussion_r404064787", "bodyText": "Is it something that could be migrated to Uni?", "author": "cescoffier", "createdAt": "2020-04-06T12:50:50Z", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -56,13 +59,13 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                 .addPermissionChecker(new Function<Permission, CompletionStage<Boolean>>() {", "originalCommit": "75166965a777d30d9638465a216dfe9846f8b26a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2NTAwNQ==", "url": "https://github.com/quarkusio/quarkus/pull/8352#discussion_r404065005", "bodyText": "That would avoid the eager subscription.", "author": "cescoffier", "createdAt": "2020-04-06T12:51:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2NDc4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "dca4b97ef9a5cb1a1528d7ca026bc7996d0d1af8", "chunk": "diff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java\nindex 1caed5dd59..deb7a6d354 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java\n\n@@ -56,10 +55,10 @@ public class CodeAuthenticationMechanism extends AbstractOidcAuthenticationMecha\n                 .addCredential(refreshTokenCredential)\n                 .addRoles(securityIdentity.getRoles())\n                 .addAttributes(securityIdentity.getAttributes())\n-                .addPermissionChecker(new Function<Permission, CompletionStage<Boolean>>() {\n+                .addPermissionChecker(new Function<Permission, Uni<Boolean>>() {\n                     @Override\n-                    public CompletionStage<Boolean> apply(Permission permission) {\n-                        return securityIdentity.checkPermission(permission).subscribeAsCompletionStage();\n+                    public Uni<Boolean> apply(Permission permission) {\n+                        return securityIdentity.checkPermission(permission);\n                     }\n                 })\n                 .build();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2NzEyNQ==", "url": "https://github.com/quarkusio/quarkus/pull/8352#discussion_r404067125", "bodyText": "Are we ok with waiting \"indefinitely\"?", "author": "cescoffier", "createdAt": "2020-04-06T12:54:38Z", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java", "diffHunk": "@@ -48,15 +49,15 @@\n             return context.runBlocking(new Supplier<SecurityIdentity>() {\n                 @Override\n                 public SecurityIdentity get() {\n-                    return authenticate(request, vertxContext).join();\n+                    return authenticate(request, vertxContext).await().indefinitely();", "originalCommit": "75166965a777d30d9638465a216dfe9846f8b26a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDExMzA2MQ==", "url": "https://github.com/quarkusio/quarkus/pull/8352#discussion_r404113061", "bodyText": "@cescoffier the expectation here has been that Vertx client will not block itself if establishing a connection to OIDC is required. Can it block ? CC @pmlopes", "author": "sberyozkin", "createdAt": "2020-04-06T13:59:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2NzEyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMzEyNg==", "url": "https://github.com/quarkusio/quarkus/pull/8352#discussion_r406623126", "bodyText": "this code waits for an item, even if the underlying communication and processing in non-blocking, this code is waiting for the result.", "author": "cescoffier", "createdAt": "2020-04-10T06:31:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2NzEyNQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2OTE5Mg==", "url": "https://github.com/quarkusio/quarkus/pull/8352#discussion_r404069192", "bodyText": "you can use flatMap as a shortcut.", "author": "cescoffier", "createdAt": "2020-04-06T12:57:59Z", "path": "extensions/security/runtime/src/main/java/io/quarkus/security/runtime/QuarkusIdentityProviderManagerImpl.java", "diffHunk": "@@ -104,50 +104,49 @@ public SecurityIdentity authenticateBlocking(AuthenticationRequest request) {\n             throw new IllegalArgumentException(\n                     \"No IdentityProviders were registered to handle AuthenticationRequest \" + request);\n         }\n-        return (SecurityIdentity) handleProvider(0, (List) providers, request, blockingRequestContext).toCompletableFuture()\n-                .join();\n+        return (SecurityIdentity) handleProvider(0, (List) providers, request, blockingRequestContext).await().indefinitely();\n     }\n \n-    private <T extends AuthenticationRequest> CompletionStage<SecurityIdentity> handleProvider(int pos,\n+    private <T extends AuthenticationRequest> Uni<SecurityIdentity> handleProvider(int pos,\n             List<IdentityProvider<T>> providers, T request, AuthenticationRequestContext context) {\n         if (pos == providers.size()) {\n             //we failed to authentication\n             log.debug(\"Authentication failed as providers would authenticate the request\");\n-            CompletableFuture<SecurityIdentity> cf = new CompletableFuture<>();\n-            cf.completeExceptionally(new AuthenticationFailedException());\n-            return cf;\n+            return Uni.createFrom().failure(new AuthenticationFailedException());\n         }\n         IdentityProvider<T> current = providers.get(pos);\n-        CompletionStage<SecurityIdentity> cs = current.authenticate(request, context)\n-                .thenCompose(new Function<SecurityIdentity, CompletionStage<SecurityIdentity>>() {\n+        Uni<SecurityIdentity> cs = current.authenticate(request, context)\n+                .onItem().produceUni(new Function<SecurityIdentity, Uni<SecurityIdentity>>() {\n                     @Override\n-                    public CompletionStage<SecurityIdentity> apply(SecurityIdentity identity) {\n-                        if (identity != null) {\n-                            return CompletableFuture.completedFuture(identity);\n+                    public Uni<SecurityIdentity> apply(SecurityIdentity securityIdentity) {\n+                        if (securityIdentity != null) {\n+                            return Uni.createFrom().item(securityIdentity);\n                         }\n                         return handleProvider(pos + 1, providers, request, context);\n                     }\n                 });\n-        return cs.thenCompose(new Function<SecurityIdentity, CompletionStage<SecurityIdentity>>() {\n-            @Override\n-            public CompletionStage<SecurityIdentity> apply(SecurityIdentity identity) {\n-                return handleIdentityFromProvider(0, identity, context);\n-            }\n-        });\n+        return cs.onItem()\n+                .produceUni(new Function<SecurityIdentity, Uni<SecurityIdentity>>() {", "originalCommit": "75166965a777d30d9638465a216dfe9846f8b26a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dca4b97ef9a5cb1a1528d7ca026bc7996d0d1af8", "chunk": "diff --git a/extensions/security/runtime/src/main/java/io/quarkus/security/runtime/QuarkusIdentityProviderManagerImpl.java b/extensions/security/runtime/src/main/java/io/quarkus/security/runtime/QuarkusIdentityProviderManagerImpl.java\nindex 9881c95f6a..c839a300dd 100644\n--- a/extensions/security/runtime/src/main/java/io/quarkus/security/runtime/QuarkusIdentityProviderManagerImpl.java\n+++ b/extensions/security/runtime/src/main/java/io/quarkus/security/runtime/QuarkusIdentityProviderManagerImpl.java\n\n@@ -125,13 +125,12 @@ public class QuarkusIdentityProviderManagerImpl implements IdentityProviderManag\n                         return handleProvider(pos + 1, providers, request, context);\n                     }\n                 });\n-        return cs.onItem()\n-                .produceUni(new Function<SecurityIdentity, Uni<SecurityIdentity>>() {\n-                    @Override\n-                    public Uni<SecurityIdentity> apply(SecurityIdentity identity) {\n-                        return handleIdentityFromProvider(0, identity, context);\n-                    }\n-                });\n+        return cs.flatMap(new Function<SecurityIdentity, Uni<? extends SecurityIdentity>>() {\n+            @Override\n+            public Uni<? extends SecurityIdentity> apply(SecurityIdentity securityIdentity) {\n+                return handleIdentityFromProvider(0, securityIdentity, context);\n+            }\n+        });\n     }\n \n     private Uni<SecurityIdentity> handleIdentityFromProvider(int pos, SecurityIdentity identity,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2OTMxNA==", "url": "https://github.com/quarkusio/quarkus/pull/8352#discussion_r404069314", "bodyText": "you can use flatMap as a shortcut", "author": "cescoffier", "createdAt": "2020-04-06T12:58:10Z", "path": "extensions/security/runtime/src/main/java/io/quarkus/security/runtime/QuarkusIdentityProviderManagerImpl.java", "diffHunk": "@@ -104,50 +104,49 @@ public SecurityIdentity authenticateBlocking(AuthenticationRequest request) {\n             throw new IllegalArgumentException(\n                     \"No IdentityProviders were registered to handle AuthenticationRequest \" + request);\n         }\n-        return (SecurityIdentity) handleProvider(0, (List) providers, request, blockingRequestContext).toCompletableFuture()\n-                .join();\n+        return (SecurityIdentity) handleProvider(0, (List) providers, request, blockingRequestContext).await().indefinitely();\n     }\n \n-    private <T extends AuthenticationRequest> CompletionStage<SecurityIdentity> handleProvider(int pos,\n+    private <T extends AuthenticationRequest> Uni<SecurityIdentity> handleProvider(int pos,\n             List<IdentityProvider<T>> providers, T request, AuthenticationRequestContext context) {\n         if (pos == providers.size()) {\n             //we failed to authentication\n             log.debug(\"Authentication failed as providers would authenticate the request\");\n-            CompletableFuture<SecurityIdentity> cf = new CompletableFuture<>();\n-            cf.completeExceptionally(new AuthenticationFailedException());\n-            return cf;\n+            return Uni.createFrom().failure(new AuthenticationFailedException());\n         }\n         IdentityProvider<T> current = providers.get(pos);\n-        CompletionStage<SecurityIdentity> cs = current.authenticate(request, context)\n-                .thenCompose(new Function<SecurityIdentity, CompletionStage<SecurityIdentity>>() {\n+        Uni<SecurityIdentity> cs = current.authenticate(request, context)\n+                .onItem().produceUni(new Function<SecurityIdentity, Uni<SecurityIdentity>>() {", "originalCommit": "75166965a777d30d9638465a216dfe9846f8b26a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dca4b97ef9a5cb1a1528d7ca026bc7996d0d1af8", "chunk": "diff --git a/extensions/security/runtime/src/main/java/io/quarkus/security/runtime/QuarkusIdentityProviderManagerImpl.java b/extensions/security/runtime/src/main/java/io/quarkus/security/runtime/QuarkusIdentityProviderManagerImpl.java\nindex 9881c95f6a..c839a300dd 100644\n--- a/extensions/security/runtime/src/main/java/io/quarkus/security/runtime/QuarkusIdentityProviderManagerImpl.java\n+++ b/extensions/security/runtime/src/main/java/io/quarkus/security/runtime/QuarkusIdentityProviderManagerImpl.java\n\n@@ -125,13 +125,12 @@ public class QuarkusIdentityProviderManagerImpl implements IdentityProviderManag\n                         return handleProvider(pos + 1, providers, request, context);\n                     }\n                 });\n-        return cs.onItem()\n-                .produceUni(new Function<SecurityIdentity, Uni<SecurityIdentity>>() {\n-                    @Override\n-                    public Uni<SecurityIdentity> apply(SecurityIdentity identity) {\n-                        return handleIdentityFromProvider(0, identity, context);\n-                    }\n-                });\n+        return cs.flatMap(new Function<SecurityIdentity, Uni<? extends SecurityIdentity>>() {\n+            @Override\n+            public Uni<? extends SecurityIdentity> apply(SecurityIdentity securityIdentity) {\n+                return handleIdentityFromProvider(0, securityIdentity, context);\n+            }\n+        });\n     }\n \n     private Uni<SecurityIdentity> handleIdentityFromProvider(int pos, SecurityIdentity identity,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDEwMjcxOA==", "url": "https://github.com/quarkusio/quarkus/pull/8352#discussion_r404102718", "bodyText": "Not totally sure what you are doing here.\nThe subscription will trigger the computation.\nBut you may want to be sure that an error has not been emitted.", "author": "cescoffier", "createdAt": "2020-04-06T13:46:28Z", "path": "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/QuarkusErrorHandler.java", "diffHunk": "@@ -53,7 +53,7 @@ public void handle(RoutingContext event) {\n                     public void run() {\n                         event.response().end();\n                     }\n-                });\n+                }).subscribeAsCompletionStage();", "originalCommit": "75166965a777d30d9638465a216dfe9846f8b26a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dca4b97ef9a5cb1a1528d7ca026bc7996d0d1af8", "chunk": "diff --git a/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/QuarkusErrorHandler.java b/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/QuarkusErrorHandler.java\nindex 18b4ac83d2..f25fe95418 100644\n--- a/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/QuarkusErrorHandler.java\n+++ b/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/QuarkusErrorHandler.java\n\n@@ -48,12 +49,17 @@ public class QuarkusErrorHandler implements Handler<RoutingContext> {\n         if (event.failure() instanceof UnauthorizedException) {\n             HttpAuthenticator authenticator = event.get(HttpAuthenticator.class.getName());\n             if (authenticator != null) {\n-                authenticator.sendChallenge(event, new Runnable() {\n+                authenticator.sendChallenge(event).subscribe().with(new Consumer<Boolean>() {\n                     @Override\n-                    public void run() {\n+                    public void accept(Boolean aBoolean) {\n                         event.response().end();\n                     }\n-                }).subscribeAsCompletionStage();\n+                }, new Consumer<Throwable>() {\n+                    @Override\n+                    public void accept(Throwable throwable) {\n+                        event.fail(throwable);\n+                    }\n+                });\n             } else {\n                 event.response().setStatusCode(HttpResponseStatus.UNAUTHORIZED.code()).end();\n             }\n"}}, {"oid": "dca4b97ef9a5cb1a1528d7ca026bc7996d0d1af8", "url": "https://github.com/quarkusio/quarkus/commit/dca4b97ef9a5cb1a1528d7ca026bc7996d0d1af8", "message": "Move the Security API to Mutiny", "committedDate": "2020-04-07T00:43:10Z", "type": "forcePushed"}, {"oid": "9497cbe244edcd714cdb69b5625c597e4006587e", "url": "https://github.com/quarkusio/quarkus/commit/9497cbe244edcd714cdb69b5625c597e4006587e", "message": "Move the Security API to Mutiny", "committedDate": "2020-04-08T02:04:08Z", "type": "forcePushed"}, {"oid": "122a71d6d7dc5f2891ab34d352e14ebf74ae0efc", "url": "https://github.com/quarkusio/quarkus/commit/122a71d6d7dc5f2891ab34d352e14ebf74ae0efc", "message": "Move the Security API to Mutiny", "committedDate": "2020-04-08T04:53:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMjU4Mg==", "url": "https://github.com/quarkusio/quarkus/pull/8352#discussion_r406622582", "bodyText": "return val?", "author": "cescoffier", "createdAt": "2020-04-10T06:29:32Z", "path": "extensions/security/runtime/src/main/java/io/quarkus/security/runtime/QuarkusSecurityIdentity.java", "diffHunk": "@@ -74,39 +77,42 @@ public boolean isAnonymous() {\n     }\n \n     @Override\n-    public CompletionStage<Boolean> checkPermission(Permission permission) {\n+    public Uni<Boolean> checkPermission(Permission permission) {\n         if (permissionCheckers.isEmpty()) {\n-            return CompletableFuture.completedFuture(true);\n+            return Uni.createFrom().item(true);\n         }\n-        List<CompletableFuture<Boolean>> results = new ArrayList<>(permissionCheckers.size());\n-        for (Function<Permission, CompletionStage<Boolean>> checker : permissionCheckers) {\n-            CompletionStage<Boolean> res = checker.apply(permission);\n+        List<Uni<Boolean>> results = new ArrayList<>(permissionCheckers.size());\n+        for (Function<Permission, Uni<Boolean>> checker : permissionCheckers) {\n+            Uni<Boolean> res = checker.apply(permission);\n             if (res != null) {\n-                results.add(res.toCompletableFuture());\n+                results.add(res);\n             }\n         }\n         if (results.isEmpty()) {\n-            return CompletableFuture.completedFuture(true);\n+            return Uni.createFrom().item(true);\n         }\n         if (results.size() == 1) {\n             return results.get(0);\n         }\n-        CompletionStage<Boolean> ret = results.get(0);\n-        for (int i = 1; i < results.size(); ++i) {\n-            ret = ret.thenCombine(results.get(i), new BiFunction<Boolean, Boolean, Boolean>() {\n-                @Override\n-                public Boolean apply(Boolean aBoolean, Boolean aBoolean2) {\n-                    if (aBoolean == null) {\n-                        return aBoolean2;\n+        return Uni.combine().all().unis(results).combinedWith(new Function<List<?>, Boolean>() {\n+            @Override\n+            public Boolean apply(List<?> o) {\n+                Boolean result = null;\n+                //if any are true we return true\n+                //otherwise if all are null we return null\n+                //if some are false and some null we return false\n+                for (Object i : o) {\n+                    if (i != null) {\n+                        boolean val = (boolean) i;\n+                        if (val) {", "originalCommit": "122a71d6d7dc5f2891ab34d352e14ebf74ae0efc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "68c72b9c32a446be025fad12c583a12f11b1600d", "url": "https://github.com/quarkusio/quarkus/commit/68c72b9c32a446be025fad12c583a12f11b1600d", "message": "Move the Security API to Mutiny", "committedDate": "2020-04-10T12:47:01Z", "type": "forcePushed"}, {"oid": "d56031907d8fb97e21f26aabb9bf27500f6d1578", "url": "https://github.com/quarkusio/quarkus/commit/d56031907d8fb97e21f26aabb9bf27500f6d1578", "message": "Move the Security API to Mutiny", "committedDate": "2020-04-10T13:26:50Z", "type": "forcePushed"}, {"oid": "2ad8937c7d455b7b2e98c34c2811ac8dc4176a03", "url": "https://github.com/quarkusio/quarkus/commit/2ad8937c7d455b7b2e98c34c2811ac8dc4176a03", "message": "Move the Security API to Mutiny", "committedDate": "2020-04-10T13:27:56Z", "type": "commit"}, {"oid": "2ad8937c7d455b7b2e98c34c2811ac8dc4176a03", "url": "https://github.com/quarkusio/quarkus/commit/2ad8937c7d455b7b2e98c34c2811ac8dc4176a03", "message": "Move the Security API to Mutiny", "committedDate": "2020-04-10T13:27:56Z", "type": "forcePushed"}]}