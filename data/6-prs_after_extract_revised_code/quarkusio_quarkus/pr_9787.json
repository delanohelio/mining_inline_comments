{"pr_number": 9787, "pr_title": "Refactor and Introduce ExtensionManager in CodeGen", "pr_createdAt": "2020-06-04T12:50:31Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/9787", "timeline": [{"oid": "4e3abc3b4ad8b1297920cdb8044340b958496768", "url": "https://github.com/quarkusio/quarkus/commit/4e3abc3b4ad8b1297920cdb8044340b958496768", "message": "Refactor and Introduce ExtensionsManager in CodeGen\n\nThis is part of #8178\n\n- Improved packages names and content\n- Improved general readability and consistency\n- Added ExtensionManager to define a high level way of managing (read/write) extensions in any QuarkusProject\n- Removed most unsafe Gradle operations which were outside of the Gradle plugin (we need to figure out a way to improve the \"generic\" gradle support to make it compatible again..)\n- Removed existing project support with the create command (throws an error)\n- Removed compatibility with project without the Quarkus platform bom defined", "committedDate": "2020-06-04T12:52:18Z", "type": "forcePushed"}, {"oid": "56e060f7b4cb79065b8f56b44f9fa39a949ef52d", "url": "https://github.com/quarkusio/quarkus/commit/56e060f7b4cb79065b8f56b44f9fa39a949ef52d", "message": "Refactor and Introduce ExtensionsManager in CodeGen\n\nThis is part of #8178\n\n- Improved packages names and content\n- Improved general readability and consistency\n- Added ExtensionManager to define a high level way of managing (read/write) extensions in any QuarkusProject\n- Removed most unsafe Gradle operations which were outside of the Gradle plugin (we need to figure out a way to improve the \"generic\" gradle support to make it compatible again..)\n- Removed existing project support with the create command (throws an error)\n- Removed compatibility with project without the Quarkus platform bom defined", "committedDate": "2020-06-04T12:58:31Z", "type": "forcePushed"}, {"oid": "256650b5f9fb70ea10c1088e6d37f29f722b0bdc", "url": "https://github.com/quarkusio/quarkus/commit/256650b5f9fb70ea10c1088e6d37f29f722b0bdc", "message": "Improved codegen packages names and content", "committedDate": "2020-06-04T13:11:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI1MDYwOQ==", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r435250609", "bodyText": "Do they have to be Extension or the AppArtifactKey is enough? Also, perhaps it would be nice to use Collection instead", "author": "gastaldi", "createdAt": "2020-06-04T13:25:35Z", "path": "independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/extensions/ExtensionsManager.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package io.quarkus.devtools.project.extensions;\n+\n+import static io.quarkus.devtools.project.extensions.Extensions.equalsIgnoringVersions;\n+\n+import io.quarkus.dependencies.Extension;\n+import io.quarkus.devtools.project.BuildTool;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * This interface defines a high level way of managing (read/write) extensions in any QuarkusProject\n+ */\n+public interface ExtensionsManager {\n+\n+    /**\n+     * @return the {@link BuildTool} of this extension manager\n+     */\n+    BuildTool getBuildTool();\n+\n+    /**\n+     * Read the build file(s) to get the list of extensions installed in this Quarkus project.\n+     *\n+     * @return The list of extensions installed in the project build file(s).\n+     * @throws IOException if a problem occurs while reading the project build file(s)\n+     */\n+    List<Extension> read() throws IOException;\n+\n+    /**\n+     * Read build file(s) to check if an extension is installed in this Quarkus project.\n+     *\n+     * @param e the extensions to check\n+     * @return true if it's installed\n+     * @throws IOException if a problem occurs while reading the project build file(s)\n+     */\n+    default boolean hasExtension(Extension e) throws IOException {\n+        return read().stream().anyMatch(i -> equalsIgnoringVersions(i, e));\n+    }\n+\n+    /**\n+     * Check that the Quarkus Platform bom is defined in the project.\n+     * The Quarkus Platform Bom role is to define version to use for Quarkus extensions.\n+     *\n+     * @return true if it's defined, false else\n+     * @throws IOException if a problem occurs while reading the project build file(s)\n+     */\n+    boolean hasQuarkusPlatformBom() throws IOException;\n+\n+    /**\n+     * This is going to add all the specified extensions to the project build file(s).\n+     *\n+     * Extensions which are already installed are ignored.\n+     *\n+     * @param extensions the list of extensions to add\n+     * @return the number of added extensions (excluding already installed)\n+     * @throws IOException if a problem occurs while reading/writing the project build file(s)\n+     */\n+    int add(List<Extension> extensions) throws IOException;\n+\n+    /**\n+     * This is going to remove all the specified extensions from the project build file(s).\n+     *\n+     * This is ignoring the {@link Extension} version\n+     *\n+     * @param extensions the set of extensions to remove\n+     * @return the number of removed extensions (excluding already not installed)\n+     * @throws IOException if a problem occurs while reading/writing the project build file(s)\n+     */\n+    int remove(Set<Extension> extensions) throws IOException;", "originalCommit": "256650b5f9fb70ea10c1088e6d37f29f722b0bdc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI3MDY2NQ==", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r435270665", "bodyText": "Note that I renamed the different methods since your comment (install, getInstalled, uninstall..), I wanted to do it before to push, but I rushed a bit and forgot..\n@gastaldi this is a good question, TBH I am not sure, what I think is important is to make sure that the input is well formatted, and not just some random string (that are resolved) like we get it the commands. At the end, for install, we need either the GA or the GAV (if the extension is not managed) and for uninstall just the GA, for getInstalled the GAV\nRegarding Set or Collection, it's going to be converted to a Set anyway to remove duplicates..", "author": "ia3andy", "createdAt": "2020-06-04T13:48:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI1MDYwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI3NDA4MQ==", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r435274081", "bodyText": "BTW, even if the extension is present in the platform, a user should still be able to override its version.", "author": "aloubyansky", "createdAt": "2020-06-04T13:51:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI1MDYwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI4MDIzOQ==", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r435280239", "bodyText": "@aloubyansky I am not 100% sure, but I think we said that since it's not a \"recommended\" action, we would advise the user to do it manually?\nA possible middle ground would be to when the specified version is different from the platform one, we add it, but show a warning?", "author": "ia3andy", "createdAt": "2020-06-04T13:59:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI1MDYwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMwMDE3Mg==", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r435300172", "bodyText": "I don't think it costs us anything to respect the version choice.", "author": "aloubyansky", "createdAt": "2020-06-04T14:25:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI1MDYwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2MzgyNQ==", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r435763825", "bodyText": "it is recommended to use a specific version when that is what is needed for the users app.\nThus if user are being explicit we should carry that information through the system to honor it.", "author": "maxandersen", "createdAt": "2020-06-05T08:19:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI1MDYwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc2NDQ2Ng==", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r436764466", "bodyText": "ok user version is now taken into account and I used AppArtifactKey", "author": "ia3andy", "createdAt": "2020-06-08T14:45:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI1MDYwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "9d4b45514ef8b3b1fb8833f7a782870c28c9aa7a", "chunk": "diff --git a/independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/extensions/ExtensionsManager.java b/independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/extensions/ExtensionsManager.java\nindex 796823574e..06900c1a92 100644\n--- a/independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/extensions/ExtensionsManager.java\n+++ b/independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/extensions/ExtensionsManager.java\n\n@@ -19,12 +19,12 @@ public interface ExtensionsManager {\n     BuildTool getBuildTool();\n \n     /**\n-     * Read the build file(s) to get the list of extensions installed in this Quarkus project.\n+     * Read the build file(s) to get the list of installed extensions in this Quarkus project.\n      *\n      * @return The list of extensions installed in the project build file(s).\n      * @throws IOException if a problem occurs while reading the project build file(s)\n      */\n-    List<Extension> read() throws IOException;\n+    List<Extension> getInstalled() throws IOException;\n \n     /**\n      * Read build file(s) to check if an extension is installed in this Quarkus project.\n"}}, {"oid": "9d4b45514ef8b3b1fb8833f7a782870c28c9aa7a", "url": "https://github.com/quarkusio/quarkus/commit/9d4b45514ef8b3b1fb8833f7a782870c28c9aa7a", "message": "Improved codegen packages names and content", "committedDate": "2020-06-04T13:36:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI2ODg4Mw==", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r435268883", "bodyText": "Why remove the ability to add extensions when you create a project?\nI find the feature quite useful.", "author": "stalep", "createdAt": "2020-06-04T13:46:49Z", "path": "devtools/maven/src/main/java/io/quarkus/maven/CreateProjectMojo.java", "diffHunk": "@@ -214,11 +212,6 @@ public void execute() throws MojoExecutionException {\n             success = createProject.execute().isSuccess();\n \n             File createdDependenciesBuildFile = new File(projectRoot, buildToolEnum.getDependenciesFile());\n-            if (success) {\n-                success = new AddExtensions(QuarkusProject.of(projectFolderPath, platform, buildToolEnum))\n-                        .extensions(extensions).execute()\n-                        .isSuccess();\n-            }", "originalCommit": "9d4b45514ef8b3b1fb8833f7a782870c28c9aa7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI3MjQyMw==", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r435272423", "bodyText": "@stalep it's done directly from the create command (no need to call two separate commands)", "author": "ia3andy", "createdAt": "2020-06-04T13:50:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI2ODg4Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2NTAwOQ==", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r435765009", "bodyText": "remove if it should be ignored.", "author": "maxandersen", "createdAt": "2020-06-05T08:21:52Z", "path": "devtools/gradle/src/main/java/io/quarkus/gradle/GradleBuildFileFromConnector.java", "diffHunk": "@@ -13,33 +14,35 @@\n import org.gradle.tooling.model.eclipse.EclipseExternalDependency;\n import org.gradle.tooling.model.eclipse.EclipseProject;\n \n-import io.quarkus.devtools.buildfile.GradleBuildFile;\n-import io.quarkus.devtools.writer.ProjectWriter;\n+import io.quarkus.devtools.project.buildfile.AbstractGradleBuildFile;\n+import io.quarkus.platform.descriptor.QuarkusPlatformDescriptor;\n \n-public class GradleBuildFileFromConnector extends GradleBuildFile {\n+public class GradleBuildFileFromConnector extends AbstractGradleBuildFile {\n \n     private List<Dependency> dependencies = null;\n \n-    public GradleBuildFileFromConnector(ProjectWriter writer) {\n-        super(writer);\n-        // we need to initialize here since there is no other single point of entry\n+    public GradleBuildFileFromConnector(final Path projectFolderPath, final QuarkusPlatformDescriptor platformDescriptor) {\n+        super(projectFolderPath, platformDescriptor);\n+    }\n+\n+    public GradleBuildFileFromConnector(Path projectFolderPath, QuarkusPlatformDescriptor platformDescriptor,\n+            Path rootProjectPath) {\n+        super(projectFolderPath, platformDescriptor, rootProjectPath);\n     }\n \n     @Override\n     public List<Dependency> getDependencies() throws IOException {\n         if (dependencies == null) {\n             EclipseProject eclipseProject = null;\n             if (getBuildContent() != null) {\n-                if (getWriter().hasFile()) {\n-                    try {\n-                        ProjectConnection connection = GradleConnector.newConnector()\n-                                .forProjectDirectory(getWriter().getProjectFolder())\n-                                .connect();\n-                        eclipseProject = connection.getModel(EclipseProject.class);\n-                    } catch (BuildException e) {\n-                        // ignore this error.\n-                        e.printStackTrace();\n-                    }\n+                try {\n+                    ProjectConnection connection = GradleConnector.newConnector()\n+                            .forProjectDirectory(getProjectFolderPath().toFile())\n+                            .connect();\n+                    eclipseProject = connection.getModel(EclipseProject.class);\n+                } catch (BuildException e) {\n+                    // ignore this error.\n+                    e.printStackTrace();", "originalCommit": "81aca5ca6f82bb62b7ba94a472c081e3f170ccb1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY2OTgzMw==", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r436669833", "bodyText": "@maxandersen this is actually existing code, because of too much diff, git won't detect that it's the same file.", "author": "ia3andy", "createdAt": "2020-06-08T12:54:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2NTAwOQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2NzM4NA==", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r435767384", "bodyText": "this code could be more readable to put getProject().getRootProject().getProjectDir()  in var.", "author": "maxandersen", "createdAt": "2020-06-05T08:26:17Z", "path": "devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusPlatformTask.java", "diffHunk": "@@ -66,12 +65,11 @@ protected QuarkusPlatformDescriptor platformDescriptor() {\n     }\n \n     @Internal\n-    protected GradleBuildFile getGradleBuildFile() {\n-        final ProjectWriter writer = new FileProjectWriter(getProject().getProjectDir());\n+    protected BuildFile getGradleBuildFile() {\n         return getProject().getParent() == null\n-                ? new GradleBuildFile(writer)\n-                : new GradleBuildFile(writer,\n-                        new FileProjectWriter(getProject().getRootProject().getProjectDir()));\n+                ? new GradleBuildFileFromConnector(getProject().getProjectDir().toPath(), platformDescriptor())", "originalCommit": "81aca5ca6f82bb62b7ba94a472c081e3f170ccb1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg5OTg0OA==", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r436899848", "bodyText": "Yeah that's better indeed!", "author": "ia3andy", "createdAt": "2020-06-08T18:12:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2NzM4NA=="}], "type": "inlineReview", "revised_code": {"commit": "34f217cc71e4201f349c8b55fc2231e4c7bdf312", "chunk": "diff --git a/devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusPlatformTask.java b/devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusPlatformTask.java\nindex e422cb2593..90fdaa9de1 100644\n--- a/devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusPlatformTask.java\n+++ b/devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusPlatformTask.java\n\n@@ -66,10 +67,11 @@ public abstract class QuarkusPlatformTask extends QuarkusTask {\n \n     @Internal\n     protected BuildFile getGradleBuildFile() {\n-        return getProject().getParent() == null\n-                ? new GradleBuildFileFromConnector(getProject().getProjectDir().toPath(), platformDescriptor())\n-                : new GradleBuildFileFromConnector(getProject().getProjectDir().toPath(), platformDescriptor(),\n-                        getProject().getRootProject().getProjectDir().toPath());\n+        final Path projectFolderPath = getProject().getProjectDir().toPath();\n+        final Path rootProjectPath = getProject().getParent() != null ? getProject().getRootProject().getProjectDir().toPath()\n+                : null;\n+        return new GradleBuildFileFromConnector(projectFolderPath, platformDescriptor(),\n+                rootProjectPath);\n     }\n \n     @Internal\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc3MTEyMQ==", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r435771121", "bodyText": "why the change of order in the signature here ?", "author": "maxandersen", "createdAt": "2020-06-05T08:32:56Z", "path": "independent-projects/tools/common/src/main/java/io/quarkus/devtools/commands/handlers/QuarkusCommandHandlers.java", "diffHunk": "@@ -11,111 +16,86 @@\n import java.util.regex.PatternSyntaxException;\n import java.util.stream.Collectors;\n \n-/**\n- * This class is thread-safe. It extracts extensions to be added to the project from an instance of\n- * {@link QuarkusCommandInvocation}.\n- */\n-public class AddExtensionsCommandHandler implements QuarkusCommand {\n-\n-    final static Printer PRINTER = new Printer();\n-\n-    @Override\n-    public QuarkusCommandOutcome execute(QuarkusCommandInvocation invocation) throws QuarkusCommandException {\n-\n-        final Set<String> extensions = invocation.getValue(AddExtensions.EXTENSIONS, Collections.emptySet());\n-        if (extensions.isEmpty()) {\n-            return QuarkusCommandOutcome.success().setValue(AddExtensions.OUTCOME_UPDATED, false);\n-        }\n-\n-        boolean updated = false;\n-        boolean success = true;\n+final class QuarkusCommandHandlers {\n \n-        final List<Extension> registry = invocation.getPlatformDescriptor().getExtensions();\n+    private QuarkusCommandHandlers() {\n+    }\n \n-        final BuildFile buildFile = invocation.getBuildFile();\n-        try {\n-            for (String query : extensions) {\n-                if (query.contains(\":\")) {\n-                    // GAV case.\n-                    updated = buildFile.addExtensionAsGAV(query) || updated;\n-                } else {\n-                    SelectionResult result = select(query, registry, false);\n-                    if (!result.matches()) {\n-                        StringBuilder sb = new StringBuilder();\n-                        // We have 3 cases, we can still have a single candidate, but the match is on label\n-                        // or we have several candidates, or none\n-                        Set<Extension> candidates = result.getExtensions();\n-                        if (candidates.isEmpty()) {\n-                            // No matches at all.\n-                            PRINTER.nok(\" Cannot find a dependency matching '\" + query + \"', maybe a typo?\");\n-                            success = false;\n-                        } else {\n-                            sb.append(Printer.NOK).append(\" Multiple extensions matching '\").append(query).append(\"'\");\n-                            result.getExtensions()\n-                                    .forEach(extension -> sb.append(System.lineSeparator()).append(\"     * \")\n-                                            .append(extension.managementKey()));\n-                            sb.append(System.lineSeparator())\n-                                    .append(\"     Be more specific e.g using the exact name or the full GAV.\");\n-                            PRINTER.print(sb.toString());\n-                            success = false;\n-                        }\n-                    } else { // Matches.\n-                        for (Extension extension : result) {\n-                            // Don't set success to false even if the dependency is not added; as it's should be idempotent.\n-                            updated = buildFile.addDependency(invocation.getPlatformDescriptor(), extension) || updated;\n-                        }\n+    static List<Extension> computeExtensionsFromQuery(final QuarkusCommandInvocation invocation,\n+            final Set<String> extensionsQuery) {\n+        final ImmutableList.Builder<Extension> builder = ImmutableList.<Extension> builder();\n+        for (String query : extensionsQuery) {\n+            if (query.contains(\":\")) {\n+                builder.add(Extensions.parse(query));\n+            } else {\n+                SelectionResult result = select(invocation.getPlatformDescriptor().getExtensions(), query, false);\n+                if (!result.matches()) {\n+                    StringBuilder sb = new StringBuilder();\n+                    // We have 3 cases, we can still have a single candidate, but the match is on label\n+                    // or we have several candidates, or none\n+                    Set<Extension> candidates = result.getExtensions();\n+                    if (candidates.isEmpty()) {\n+                        // No matches at all.\n+                        invocation.log().info(nok(\" Cannot find a dependency matching '\" + query + \"', maybe a typo?\"));\n+                        return null;\n+                    } else {\n+                        sb.append(NOK).append(\" Multiple extensions matching '\").append(query).append(\"'\");\n+                        result.getExtensions()\n+                                .forEach(extension -> sb.append(System.lineSeparator()).append(\"     * \")\n+                                        .append(extension.managementKey()));\n+                        sb.append(System.lineSeparator())\n+                                .append(\"     Be more specific e.g using the exact name or the full GAV.\");\n+                        invocation.log().info(sb.toString());\n+                        return null;\n+                    }\n+                } else { // Matches.\n+                    for (Extension extension : result) {\n+                        // Don't set success to false even if the dependency is not added; as it's should be idempotent.\n+                        builder.add(extension);\n                     }\n                 }\n             }\n-        } catch (IOException e) {\n-            throw new QuarkusCommandException(\"Failed to add extensions\", e);\n-        }\n-\n-        if (buildFile != null && updated) {\n-            try {\n-                buildFile.close();\n-            } catch (IOException e) {\n-                throw new QuarkusCommandException(\"Failed to update the project\", e);\n-            }\n         }\n-\n-        return new QuarkusCommandOutcome(success).setValue(AddExtensions.OUTCOME_UPDATED, updated);\n+        return builder.build();\n     }\n \n     /**\n      * Selection algorithm.\n      *\n+     * @param allPlatformExtensions the list of all platform extensions\n      * @param query the query\n-     * @param extensions the extension list\n      * @param labelLookup whether or not the query must be tested against the labels of the extensions. Should\n      *        be {@code false} by default.\n      * @return the list of matching candidates and whether or not a match has been found.\n      */\n-    static SelectionResult select(String query, List<Extension> extensions, boolean labelLookup) {\n+    static SelectionResult select(final List<Extension> allPlatformExtensions, final String query, final boolean labelLookup) {", "originalCommit": "81aca5ca6f82bb62b7ba94a472c081e3f170ccb1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ2MTczNw==", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r436461737", "bodyText": "TBH I don't remember \ud83d\ude05 the name is clearer, but the order \ud83e\udd17, I'll switch the order back..", "author": "ia3andy", "createdAt": "2020-06-08T05:20:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc3MTEyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc2NDc1NQ==", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r436764755", "bodyText": "fixed", "author": "ia3andy", "createdAt": "2020-06-08T14:45:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc3MTEyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "e18527211b20cf83d4649de38a53d151818494a8", "chunk": "diff --git a/independent-projects/tools/common/src/main/java/io/quarkus/devtools/commands/handlers/QuarkusCommandHandlers.java b/independent-projects/tools/common/src/main/java/io/quarkus/devtools/commands/handlers/QuarkusCommandHandlers.java\nindex 8ea62d9ea5..4effcd2d65 100644\n--- a/independent-projects/tools/common/src/main/java/io/quarkus/devtools/commands/handlers/QuarkusCommandHandlers.java\n+++ b/independent-projects/tools/common/src/main/java/io/quarkus/devtools/commands/handlers/QuarkusCommandHandlers.java\n\n@@ -21,15 +22,20 @@ final class QuarkusCommandHandlers {\n     private QuarkusCommandHandlers() {\n     }\n \n-    static List<Extension> computeExtensionsFromQuery(final QuarkusCommandInvocation invocation,\n+    static List<AppArtifactCoords> computeCoordsFromQuery(final QuarkusCommandInvocation invocation,\n             final Set<String> extensionsQuery) {\n-        final ImmutableList.Builder<Extension> builder = ImmutableList.<Extension> builder();\n+        final ImmutableList.Builder<AppArtifactCoords> builder = ImmutableList.builder();\n         for (String query : extensionsQuery) {\n             if (query.contains(\":\")) {\n-                builder.add(Extensions.parse(query));\n+                builder.add(AppArtifactCoords.fromString(query));\n             } else {\n-                SelectionResult result = select(invocation.getPlatformDescriptor().getExtensions(), query, false);\n-                if (!result.matches()) {\n+                SelectionResult result = select(query, invocation.getPlatformDescriptor().getExtensions(), false);\n+                if (result.matches()) {\n+                    final Set<AppArtifactCoords> withStrippedVersion = result.getExtensions().stream().map(Extensions::toCoords)\n+                            .map(Extensions::stripVersion).collect(Collectors.toSet());\n+                    // We strip the version because those extensions are managed\n+                    builder.addAll(withStrippedVersion);\n+                } else {\n                     StringBuilder sb = new StringBuilder();\n                     // We have 3 cases, we can still have a single candidate, but the match is on label\n                     // or we have several candidates, or none\n"}}, {"oid": "e18527211b20cf83d4649de38a53d151818494a8", "url": "https://github.com/quarkusio/quarkus/commit/e18527211b20cf83d4649de38a53d151818494a8", "message": "Apply discussed changes", "committedDate": "2020-06-08T14:44:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc5NzQ1Ng==", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r436797456", "bodyText": "@aloubyansky as we discussed \u2b06\ufe0f", "author": "ia3andy", "createdAt": "2020-06-08T15:30:52Z", "path": "independent-projects/tools/platform-descriptor-api/src/main/java/io/quarkus/dependencies/Extension.java", "diffHunk": "@@ -195,6 +195,9 @@ public Dependency toDependency(boolean stripVersion) {\n         if (version != null && !version.isEmpty() && !stripVersion) {\n             dependency.setVersion(version);\n         }\n+        if (type != null && !type.isEmpty()) {\n+            dependency.setType(type);", "originalCommit": "e18527211b20cf83d4649de38a53d151818494a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc5Nzc0MA==", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r436797740", "bodyText": "@aloubyansky as we discussed \u2b06\ufe0f", "author": "ia3andy", "createdAt": "2020-06-08T15:31:16Z", "path": "independent-projects/bootstrap/core/src/main/java/io/quarkus/bootstrap/model/AppArtifactKey.java", "diffHunk": "@@ -73,12 +73,12 @@ public static AppArtifactKey fromString(String str) {\n     protected AppArtifactKey(String[] parts) {\n         this.groupId = parts[0];\n         this.artifactId = parts[1];\n-        if (parts.length == 2) {\n+        if (parts.length == 2 || parts[2] == null) {", "originalCommit": "e18527211b20cf83d4649de38a53d151818494a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "34f217cc71e4201f349c8b55fc2231e4c7bdf312", "url": "https://github.com/quarkusio/quarkus/commit/34f217cc71e4201f349c8b55fc2231e4c7bdf312", "message": "Fix Maven tests", "committedDate": "2020-06-09T07:48:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzIwNjc0OQ==", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r437206749", "bodyText": "@aloubyansky maybe we should change the AppArtifactKey/Coords instead, having empty string classifier seems not working with the maven api?", "author": "ia3andy", "createdAt": "2020-06-09T07:52:40Z", "path": "independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/buildfile/MavenBuildFile.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package io.quarkus.devtools.project.buildfile;\n+\n+import static io.quarkus.devtools.project.extensions.Extensions.toKey;\n+\n+import io.quarkus.bootstrap.model.AppArtifactCoords;\n+import io.quarkus.bootstrap.model.AppArtifactKey;\n+import io.quarkus.devtools.project.BuildTool;\n+import io.quarkus.maven.utilities.MojoUtils;\n+import io.quarkus.platform.descriptor.QuarkusPlatformDescriptor;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicReference;\n+import org.apache.maven.model.Dependency;\n+import org.apache.maven.model.Model;\n+\n+public class MavenBuildFile extends BuildFile {\n+\n+    private AtomicReference<Model> modelRef = new AtomicReference<>();\n+\n+    public MavenBuildFile(final Path projectFolderPath, final QuarkusPlatformDescriptor platformDescriptor) {\n+        super(projectFolderPath, platformDescriptor);\n+    }\n+\n+    @Override\n+    public void writeToDisk() throws IOException {\n+        if (getModel() == null) {\n+            return;\n+        }\n+        try (ByteArrayOutputStream pomOutputStream = new ByteArrayOutputStream()) {\n+            MojoUtils.write(getModel(), pomOutputStream);\n+            writeToProjectFile(BuildTool.MAVEN.getDependenciesFile(), pomOutputStream.toByteArray());\n+        }\n+    }\n+\n+    @Override\n+    protected void addDependencyInBuildFile(AppArtifactCoords coords) throws IOException {\n+        if (getModel() != null) {\n+            final Dependency d = new Dependency();\n+            d.setGroupId(coords.getGroupId());\n+            d.setArtifactId(coords.getArtifactId());\n+            d.setVersion(coords.getVersion());\n+            // When classifier is empty, you get  <classifier></classifier> in the pom.xml\n+            if (coords.getClassifier() != null && !coords.getClassifier().isEmpty()) {", "originalCommit": "34f217cc71e4201f349c8b55fc2231e4c7bdf312", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzIxMzU2NQ==", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r437213565", "bodyText": "What do you mean? The only reason we use an empty classifier is because this is how Maven does it.", "author": "aloubyansky", "createdAt": "2020-06-09T08:04:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzIwNjc0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzMDcxMw==", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r437430713", "bodyText": "We discussed on zulip and concluded that maven api is behavior differently for resolving artifact and dependencies. Making sure we don't put an empty classifier in the dependency prevent from having <classifier></classifier> in the pom.xml.", "author": "ia3andy", "createdAt": "2020-06-09T13:45:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzIwNjc0OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzNTgxNg==", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r437435816", "bodyText": "Better use the singular form here: ExtensionManager. eg. https://github.com/quarkusio/quarkus-registry-descriptor/blob/master/src/main/java/io/quarkus/registry/ExtensionRegistry.java", "author": "gastaldi", "createdAt": "2020-06-09T13:50:39Z", "path": "independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/extensions/ExtensionsManager.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package io.quarkus.devtools.project.extensions;\n+\n+import io.quarkus.bootstrap.model.AppArtifactCoords;\n+import io.quarkus.bootstrap.model.AppArtifactKey;\n+import io.quarkus.dependencies.Extension;\n+import io.quarkus.devtools.project.BuildTool;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * This interface defines a high level way of managing (read/write) extensions in any QuarkusProject\n+ */\n+public interface ExtensionsManager {", "originalCommit": "34f217cc71e4201f349c8b55fc2231e4c7bdf312", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzNjYwNw==", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r437436607", "bodyText": "ok I'll change", "author": "ia3andy", "createdAt": "2020-06-09T13:51:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzNTgxNg=="}], "type": "inlineReview", "revised_code": {"commit": "4315ce7b40fd2d6549394658a96c3f73173c305a", "chunk": "diff --git a/independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/extensions/ExtensionsManager.java b/independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/extensions/ExtensionManager.java\nsimilarity index 99%\nrename from independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/extensions/ExtensionsManager.java\nrename to independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/extensions/ExtensionManager.java\nindex 48df9e0d3a..6d8aa3442b 100644\n--- a/independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/extensions/ExtensionsManager.java\n+++ b/independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/extensions/ExtensionManager.java\n\n@@ -12,7 +12,7 @@ import java.util.Set;\n /**\n  * This interface defines a high level way of managing (read/write) extensions in any QuarkusProject\n  */\n-public interface ExtensionsManager {\n+public interface ExtensionManager {\n \n     /**\n      * @return the {@link BuildTool} of this extension manager\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0Mjc4Mg==", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r437442782", "bodyText": "Since you're refactoring Printer into ConsoleMessageFormat, try to not expose the NOK attribute there otherwise the methods in that class are meaningless", "author": "gastaldi", "createdAt": "2020-06-09T13:57:22Z", "path": "independent-projects/tools/common/src/main/java/io/quarkus/devtools/commands/handlers/QuarkusCommandHandlers.java", "diffHunk": "@@ -11,111 +17,86 @@\n import java.util.regex.PatternSyntaxException;\n import java.util.stream.Collectors;\n \n-/**\n- * This class is thread-safe. It extracts extensions to be added to the project from an instance of\n- * {@link QuarkusCommandInvocation}.\n- */\n-public class AddExtensionsCommandHandler implements QuarkusCommand {\n-\n-    final static Printer PRINTER = new Printer();\n+final class QuarkusCommandHandlers {\n \n-    @Override\n-    public QuarkusCommandOutcome execute(QuarkusCommandInvocation invocation) throws QuarkusCommandException {\n-\n-        final Set<String> extensions = invocation.getValue(AddExtensions.EXTENSIONS, Collections.emptySet());\n-        if (extensions.isEmpty()) {\n-            return QuarkusCommandOutcome.success().setValue(AddExtensions.OUTCOME_UPDATED, false);\n-        }\n-\n-        boolean updated = false;\n-        boolean success = true;\n-\n-        final List<Extension> registry = invocation.getPlatformDescriptor().getExtensions();\n+    private QuarkusCommandHandlers() {\n+    }\n \n-        final BuildFile buildFile = invocation.getBuildFile();\n-        try {\n-            for (String query : extensions) {\n-                if (query.contains(\":\")) {\n-                    // GAV case.\n-                    updated = buildFile.addExtensionAsGAV(query) || updated;\n+    static List<AppArtifactCoords> computeCoordsFromQuery(final QuarkusCommandInvocation invocation,\n+            final Set<String> extensionsQuery) {\n+        final ImmutableList.Builder<AppArtifactCoords> builder = ImmutableList.builder();\n+        for (String query : extensionsQuery) {\n+            if (query.contains(\":\")) {\n+                builder.add(AppArtifactCoords.fromString(query));\n+            } else {\n+                SelectionResult result = select(query, invocation.getPlatformDescriptor().getExtensions(), false);\n+                if (result.matches()) {\n+                    final Set<AppArtifactCoords> withStrippedVersion = result.getExtensions().stream().map(Extensions::toCoords)\n+                            .map(Extensions::stripVersion).collect(Collectors.toSet());\n+                    // We strip the version because those extensions are managed\n+                    builder.addAll(withStrippedVersion);\n                 } else {\n-                    SelectionResult result = select(query, registry, false);\n-                    if (!result.matches()) {\n-                        StringBuilder sb = new StringBuilder();\n-                        // We have 3 cases, we can still have a single candidate, but the match is on label\n-                        // or we have several candidates, or none\n-                        Set<Extension> candidates = result.getExtensions();\n-                        if (candidates.isEmpty()) {\n-                            // No matches at all.\n-                            PRINTER.nok(\" Cannot find a dependency matching '\" + query + \"', maybe a typo?\");\n-                            success = false;\n-                        } else {\n-                            sb.append(Printer.NOK).append(\" Multiple extensions matching '\").append(query).append(\"'\");\n-                            result.getExtensions()\n-                                    .forEach(extension -> sb.append(System.lineSeparator()).append(\"     * \")\n-                                            .append(extension.managementKey()));\n-                            sb.append(System.lineSeparator())\n-                                    .append(\"     Be more specific e.g using the exact name or the full GAV.\");\n-                            PRINTER.print(sb.toString());\n-                            success = false;\n-                        }\n-                    } else { // Matches.\n-                        for (Extension extension : result) {\n-                            // Don't set success to false even if the dependency is not added; as it's should be idempotent.\n-                            updated = buildFile.addDependency(invocation.getPlatformDescriptor(), extension) || updated;\n-                        }\n+                    StringBuilder sb = new StringBuilder();\n+                    // We have 3 cases, we can still have a single candidate, but the match is on label\n+                    // or we have several candidates, or none\n+                    Set<Extension> candidates = result.getExtensions();\n+                    if (candidates.isEmpty()) {\n+                        // No matches at all.\n+                        invocation.log().info(nok(\" Cannot find a dependency matching '\" + query + \"', maybe a typo?\"));\n+                        return null;\n+                    } else {\n+                        sb.append(NOK).append(\" Multiple extensions matching '\").append(query).append(\"'\");", "originalCommit": "34f217cc71e4201f349c8b55fc2231e4c7bdf312", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4315ce7b40fd2d6549394658a96c3f73173c305a", "chunk": "diff --git a/independent-projects/tools/common/src/main/java/io/quarkus/devtools/commands/handlers/QuarkusCommandHandlers.java b/independent-projects/tools/common/src/main/java/io/quarkus/devtools/commands/handlers/QuarkusCommandHandlers.java\nindex 4effcd2d65..ec0110279d 100644\n--- a/independent-projects/tools/common/src/main/java/io/quarkus/devtools/commands/handlers/QuarkusCommandHandlers.java\n+++ b/independent-projects/tools/common/src/main/java/io/quarkus/devtools/commands/handlers/QuarkusCommandHandlers.java\n\n@@ -45,7 +44,7 @@ final class QuarkusCommandHandlers {\n                         invocation.log().info(nok(\" Cannot find a dependency matching '\" + query + \"', maybe a typo?\"));\n                         return null;\n                     } else {\n-                        sb.append(NOK).append(\" Multiple extensions matching '\").append(query).append(\"'\");\n+                        sb.append(nok(\" Multiple extensions matching '\")).append(query).append(\"'\");\n                         result.getExtensions()\n                                 .forEach(extension -> sb.append(System.lineSeparator()).append(\"     * \")\n                                         .append(extension.managementKey()));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0MzcwNw==", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r437443707", "bodyText": "Better make these attributes private otherwise any methods in this class are meaningless", "author": "gastaldi", "createdAt": "2020-06-09T13:58:13Z", "path": "independent-projects/tools/platform-descriptor-api/src/main/java/io/quarkus/platform/tools/ConsoleMessageFormat.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package io.quarkus.platform.tools;\n+\n+public final class ConsoleMessageFormat {\n+\n+    public static final String OK = \"\\u2705\";\n+    public static final String NOK = \"\\u274c\";\n+    public static final String NOOP = \"\\uD83D\\uDC4D\";", "originalCommit": "34f217cc71e4201f349c8b55fc2231e4c7bdf312", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4315ce7b40fd2d6549394658a96c3f73173c305a", "chunk": "diff --git a/independent-projects/tools/platform-descriptor-api/src/main/java/io/quarkus/platform/tools/ConsoleMessageFormat.java b/independent-projects/tools/platform-descriptor-api/src/main/java/io/quarkus/platform/tools/ConsoleMessageFormats.java\nsimilarity index 56%\nrename from independent-projects/tools/platform-descriptor-api/src/main/java/io/quarkus/platform/tools/ConsoleMessageFormat.java\nrename to independent-projects/tools/platform-descriptor-api/src/main/java/io/quarkus/platform/tools/ConsoleMessageFormats.java\nindex d4dc80af5c..bbe5696f22 100644\n--- a/independent-projects/tools/platform-descriptor-api/src/main/java/io/quarkus/platform/tools/ConsoleMessageFormat.java\n+++ b/independent-projects/tools/platform-descriptor-api/src/main/java/io/quarkus/platform/tools/ConsoleMessageFormats.java\n\n@@ -1,12 +1,12 @@\n package io.quarkus.platform.tools;\n \n-public final class ConsoleMessageFormat {\n+public final class ConsoleMessageFormats {\n \n-    public static final String OK = \"\\u2705\";\n-    public static final String NOK = \"\\u274c\";\n-    public static final String NOOP = \"\\uD83D\\uDC4D\";\n+    private static final String OK = \"\\u2705\";\n+    private static final String NOK = \"\\u274c\";\n+    private static final String NOOP = \"\\uD83D\\uDC4D\";\n \n-    private ConsoleMessageFormat() {\n+    private ConsoleMessageFormats() {\n     }\n \n     public static String nok(String content) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0NTE1Nw==", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r437445157", "bodyText": "Why was this test removed?", "author": "gastaldi", "createdAt": "2020-06-09T13:59:58Z", "path": "integration-tests/maven/src/test/java/io/quarkus/maven/it/CreateProjectMojoIT.java", "diffHunk": "@@ -351,23 +304,6 @@ public void testThatDefaultPackageAreReplaced() throws Exception {\n                 \"package org.acme.quarkus.sample;\");\n     }\n \n-    /**", "originalCommit": "34f217cc71e4201f349c8b55fc2231e4c7bdf312", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0OTM2OA==", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r437449368", "bodyText": "same as the previous", "author": "ia3andy", "createdAt": "2020-06-09T14:05:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0NTE1Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0NTgyOA==", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r437445828", "bodyText": "It looks like those asserts are important, why remove them?", "author": "gastaldi", "createdAt": "2020-06-09T14:00:50Z", "path": "integration-tests/maven/src/test/java/io/quarkus/maven/it/CreateProjectMojoIT.java", "diffHunk": "@@ -111,40 +111,13 @@ public void testProjectGenerationFromScratch() throws MavenInvocationException,\n     }\n \n     @Test\n-    public void testProjectGenerationFromEmptyPom() throws Exception {\n+    public void testProjectGenerationWithExistingPomShouldFail() throws Exception {\n         testDir = initProject(\"projects/simple-pom-it\", \"projects/project-generation-from-empty-pom\");\n         assertThat(testDir).isDirectory();\n         invoker = initInvoker(testDir);\n         InvocationResult result = setup(new Properties());\n \n-        assertThat(result.getExitCode()).isZero();\n-\n-        assertThat(new File(testDir, \"pom.xml\")).isFile();\n-        assertThat(new File(testDir, \"src/main/java\")).isDirectory();\n-\n-        assertThat(new File(testDir, \"src/main/resources/application.properties\")).exists();\n-        assertThat(new File(testDir, \"src/main/resources/META-INF/resources/index.html\")).exists();\n-\n-        assertThat(FileUtils.readFileToString(new File(testDir, \"pom.xml\"), \"UTF-8\"))\n-                .contains(getPluginArtifactId(), MojoUtils.TEMPLATE_PROPERTY_QUARKUS_PLUGIN_VERSION_VALUE,\n-                        getPluginGroupId());\n-\n-        final Model model = loadPom(testDir);\n-        assertThat(model.getProperties().getProperty(MojoUtils.TEMPLATE_PROPERTY_QUARKUS_PLUGIN_VERSION_NAME))\n-                .isEqualTo(getPluginVersion());\n-        assertThat(model.getProperties().getProperty(MojoUtils.TEMPLATE_PROPERTY_QUARKUS_PLATFORM_ARTIFACT_ID_NAME))\n-                .isEqualTo(getBomArtifactId());\n-\n-        assertThat(model.getDependencyManagement().getDependencies().stream()\n-                .anyMatch(d -> d.getArtifactId().equals(MojoUtils.TEMPLATE_PROPERTY_QUARKUS_PLATFORM_ARTIFACT_ID_VALUE)\n-                        && d.getVersion().equals(MojoUtils.TEMPLATE_PROPERTY_QUARKUS_PLATFORM_VERSION_VALUE)\n-                        && d.getScope().equals(\"import\")\n-                        && d.getType().equals(\"pom\"))).isTrue();\n-\n-        assertThat(model.getDependencies()).isEmpty();\n-\n-        assertThat(model.getProfiles()).hasSize(1);\n-        assertThat(model.getProfiles().get(0).getId()).isEqualTo(\"native\");", "originalCommit": "34f217cc71e4201f349c8b55fc2231e4c7bdf312", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0ODc0MA==", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r437448740", "bodyText": "Migrating project has been removed from the \"create\" command, those asserts were for it. I am now testing that it fails. Note that the same asserts are already in the other \"fromScratch\" test.", "author": "ia3andy", "createdAt": "2020-06-09T14:04:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0NTgyOA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "4315ce7b40fd2d6549394658a96c3f73173c305a", "url": "https://github.com/quarkusio/quarkus/commit/4315ce7b40fd2d6549394658a96c3f73173c305a", "message": "Apply requested changes\n\n- rename ExtensionsManager to ExtensionManager\n- change visibility of ConsoleMessageFormats attributes\n- rename ConsoleMessageFormat to ConsoleMessageFormats (since it's a helper)", "committedDate": "2020-06-09T14:18:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ2ODY4Nw==", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r437468687", "bodyText": "I'd prefer to use Collection instead. That would prevent cases where the caller has a different Collection implementation and need to convert to List to call this method", "author": "gastaldi", "createdAt": "2020-06-09T14:30:33Z", "path": "independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/extensions/ExtensionManager.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package io.quarkus.devtools.project.extensions;\n+\n+import io.quarkus.bootstrap.model.AppArtifactCoords;\n+import io.quarkus.bootstrap.model.AppArtifactKey;\n+import io.quarkus.dependencies.Extension;\n+import io.quarkus.devtools.project.BuildTool;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * This interface defines a high level way of managing (read/write) extensions in any QuarkusProject\n+ */\n+public interface ExtensionManager {\n+\n+    /**\n+     * @return the {@link BuildTool} of this extension manager\n+     */\n+    BuildTool getBuildTool();\n+\n+    /**\n+     * Read the build file(s) to get the list of installed extensions in this Quarkus project.\n+     *\n+     * @return The list of {@link AppArtifactCoords} installed in the project build file(s).\n+     * @throws IOException if a problem occurs while reading the project build file(s)\n+     */\n+    List<AppArtifactCoords> getInstalled() throws IOException;\n+\n+    /**\n+     * Read build file(s) to check if an extension is installed in this Quarkus project.\n+     *\n+     * @param key the {@link AppArtifactKey} of the extension to check\n+     * @return true if it's installed\n+     * @throws IOException if a problem occurs while reading the project build file(s)\n+     */\n+    default boolean isInstalled(AppArtifactKey key) throws IOException {\n+        return getInstalled().stream().anyMatch(i -> Objects.equals(i.getKey(), key));\n+    }\n+\n+    /**\n+     * Check that the Quarkus Platform bom is defined in the project.\n+     * The Quarkus Platform Bom role is to define version to use for Quarkus extensions.\n+     *\n+     * @return true if it's defined, false else\n+     * @throws IOException if a problem occurs while reading the project build file(s)\n+     */\n+    boolean hasQuarkusPlatformBom() throws IOException;\n+\n+    /**\n+     * This is going to install/add all the specified extensions to the project build file(s).\n+     *\n+     * <pre>\n+     *   - If the project Quarkus platform bom is not defined, an {@link IllegalStateException} will be thrown\n+     *   - Extensions which are already installed will ALWAYS be skipped whatever the specified version\n+     *   - The provided version will be used wasn't already installed\n+     * </pre>\n+     *\n+     * @param coords the list of {@link AppArtifactCoords} for the extensions to install\n+     * @return the {@link InstallResult}\n+     * @throws IOException if a problem occurs while reading/writing the project build file(s)\n+     */\n+    InstallResult install(List<AppArtifactCoords> coords) throws IOException;", "originalCommit": "4315ce7b40fd2d6549394658a96c3f73173c305a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ2OTg4Mw==", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r437469883", "bodyText": "For this one I would really like to have a List since it's ordered and you may want to add them in a specific order..", "author": "ia3andy", "createdAt": "2020-06-09T14:32:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ2ODY4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "f2684d0ff3221ba63625a7c98b1480d319c499b4", "chunk": "diff --git a/independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/extensions/ExtensionManager.java b/independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/extensions/ExtensionManager.java\nindex 6d8aa3442b..ad71e2ff70 100644\n--- a/independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/extensions/ExtensionManager.java\n+++ b/independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/extensions/ExtensionManager.java\n\n@@ -5,9 +5,8 @@ import io.quarkus.bootstrap.model.AppArtifactKey;\n import io.quarkus.dependencies.Extension;\n import io.quarkus.devtools.project.BuildTool;\n import java.io.IOException;\n-import java.util.List;\n+import java.util.Collection;\n import java.util.Objects;\n-import java.util.Set;\n \n /**\n  * This interface defines a high level way of managing (read/write) extensions in any QuarkusProject\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ2ODk4OA==", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r437468988", "bodyText": "Same as above", "author": "gastaldi", "createdAt": "2020-06-09T14:30:55Z", "path": "independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/extensions/ExtensionManager.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package io.quarkus.devtools.project.extensions;\n+\n+import io.quarkus.bootstrap.model.AppArtifactCoords;\n+import io.quarkus.bootstrap.model.AppArtifactKey;\n+import io.quarkus.dependencies.Extension;\n+import io.quarkus.devtools.project.BuildTool;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * This interface defines a high level way of managing (read/write) extensions in any QuarkusProject\n+ */\n+public interface ExtensionManager {\n+\n+    /**\n+     * @return the {@link BuildTool} of this extension manager\n+     */\n+    BuildTool getBuildTool();\n+\n+    /**\n+     * Read the build file(s) to get the list of installed extensions in this Quarkus project.\n+     *\n+     * @return The list of {@link AppArtifactCoords} installed in the project build file(s).\n+     * @throws IOException if a problem occurs while reading the project build file(s)\n+     */\n+    List<AppArtifactCoords> getInstalled() throws IOException;\n+\n+    /**\n+     * Read build file(s) to check if an extension is installed in this Quarkus project.\n+     *\n+     * @param key the {@link AppArtifactKey} of the extension to check\n+     * @return true if it's installed\n+     * @throws IOException if a problem occurs while reading the project build file(s)\n+     */\n+    default boolean isInstalled(AppArtifactKey key) throws IOException {\n+        return getInstalled().stream().anyMatch(i -> Objects.equals(i.getKey(), key));\n+    }\n+\n+    /**\n+     * Check that the Quarkus Platform bom is defined in the project.\n+     * The Quarkus Platform Bom role is to define version to use for Quarkus extensions.\n+     *\n+     * @return true if it's defined, false else\n+     * @throws IOException if a problem occurs while reading the project build file(s)\n+     */\n+    boolean hasQuarkusPlatformBom() throws IOException;\n+\n+    /**\n+     * This is going to install/add all the specified extensions to the project build file(s).\n+     *\n+     * <pre>\n+     *   - If the project Quarkus platform bom is not defined, an {@link IllegalStateException} will be thrown\n+     *   - Extensions which are already installed will ALWAYS be skipped whatever the specified version\n+     *   - The provided version will be used wasn't already installed\n+     * </pre>\n+     *\n+     * @param coords the list of {@link AppArtifactCoords} for the extensions to install\n+     * @return the {@link InstallResult}\n+     * @throws IOException if a problem occurs while reading/writing the project build file(s)\n+     */\n+    InstallResult install(List<AppArtifactCoords> coords) throws IOException;\n+\n+    /**\n+     * This is going to uninstall/remove all the specified extensions from the project build file(s).\n+     *\n+     * This is ignoring the {@link Extension} version\n+     *\n+     * @param keys the set of {@link AppArtifactKey} for the extensions to uninstall\n+     * @return the {@link InstallResult}\n+     * @throws IOException if a problem occurs while reading/writing the project build file(s)\n+     */\n+    UninstallResult uninstall(Set<AppArtifactKey> keys) throws IOException;", "originalCommit": "4315ce7b40fd2d6549394658a96c3f73173c305a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ3MDc0Ng==", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r437470746", "bodyText": "I already answered for this, the Set already takes care of deduplicating, I would convert it to a Set just after if that's was not the case. I think it's ok this way.. @aloubyansky any thoughts?", "author": "ia3andy", "createdAt": "2020-06-09T14:33:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ2ODk4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUyNzIyOQ==", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r437527229", "bodyText": "The use of Set might be because of making sure the items are unique? - if not I'm also for unifying on either List/Set/Collection.", "author": "stalep", "createdAt": "2020-06-09T15:36:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ2ODk4OA=="}], "type": "inlineReview", "revised_code": {"commit": "f2684d0ff3221ba63625a7c98b1480d319c499b4", "chunk": "diff --git a/independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/extensions/ExtensionManager.java b/independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/extensions/ExtensionManager.java\nindex 6d8aa3442b..ad71e2ff70 100644\n--- a/independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/extensions/ExtensionManager.java\n+++ b/independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/extensions/ExtensionManager.java\n\n@@ -5,9 +5,8 @@ import io.quarkus.bootstrap.model.AppArtifactKey;\n import io.quarkus.dependencies.Extension;\n import io.quarkus.devtools.project.BuildTool;\n import java.io.IOException;\n-import java.util.List;\n+import java.util.Collection;\n import java.util.Objects;\n-import java.util.Set;\n \n /**\n  * This interface defines a high level way of managing (read/write) extensions in any QuarkusProject\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ2OTQ4Nw==", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r437469487", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                List<AppArtifactCoords> getInstalled() throws IOException;\n          \n          \n            \n                Collection<AppArtifactCoords> getInstalled() throws IOException;", "author": "gastaldi", "createdAt": "2020-06-09T14:31:35Z", "path": "independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/extensions/ExtensionManager.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package io.quarkus.devtools.project.extensions;\n+\n+import io.quarkus.bootstrap.model.AppArtifactCoords;\n+import io.quarkus.bootstrap.model.AppArtifactKey;\n+import io.quarkus.dependencies.Extension;\n+import io.quarkus.devtools.project.BuildTool;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * This interface defines a high level way of managing (read/write) extensions in any QuarkusProject\n+ */\n+public interface ExtensionManager {\n+\n+    /**\n+     * @return the {@link BuildTool} of this extension manager\n+     */\n+    BuildTool getBuildTool();\n+\n+    /**\n+     * Read the build file(s) to get the list of installed extensions in this Quarkus project.\n+     *\n+     * @return The list of {@link AppArtifactCoords} installed in the project build file(s).\n+     * @throws IOException if a problem occurs while reading the project build file(s)\n+     */\n+    List<AppArtifactCoords> getInstalled() throws IOException;", "originalCommit": "4315ce7b40fd2d6549394658a96c3f73173c305a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ3MTY3NQ==", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r437471675", "bodyText": "Same here you have the notion of order..", "author": "ia3andy", "createdAt": "2020-06-09T14:34:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ2OTQ4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "f2684d0ff3221ba63625a7c98b1480d319c499b4", "chunk": "diff --git a/independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/extensions/ExtensionManager.java b/independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/extensions/ExtensionManager.java\nindex 6d8aa3442b..ad71e2ff70 100644\n--- a/independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/extensions/ExtensionManager.java\n+++ b/independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/extensions/ExtensionManager.java\n\n@@ -5,9 +5,8 @@ import io.quarkus.bootstrap.model.AppArtifactKey;\n import io.quarkus.dependencies.Extension;\n import io.quarkus.devtools.project.BuildTool;\n import java.io.IOException;\n-import java.util.List;\n+import java.util.Collection;\n import java.util.Objects;\n-import java.util.Set;\n \n /**\n  * This interface defines a high level way of managing (read/write) extensions in any QuarkusProject\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ3OTg5Ng==", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r437479896", "bodyText": "Instead of returning how many extensions were installed/uninstalled wouldn't be better to return which extensions were installed/uninstalled (the collection size would return the total of installed/uninstalled items)?", "author": "gastaldi", "createdAt": "2020-06-09T14:44:54Z", "path": "independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/extensions/ExtensionManager.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package io.quarkus.devtools.project.extensions;\n+\n+import io.quarkus.bootstrap.model.AppArtifactCoords;\n+import io.quarkus.bootstrap.model.AppArtifactKey;\n+import io.quarkus.dependencies.Extension;\n+import io.quarkus.devtools.project.BuildTool;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * This interface defines a high level way of managing (read/write) extensions in any QuarkusProject\n+ */\n+public interface ExtensionManager {\n+\n+    /**\n+     * @return the {@link BuildTool} of this extension manager\n+     */\n+    BuildTool getBuildTool();\n+\n+    /**\n+     * Read the build file(s) to get the list of installed extensions in this Quarkus project.\n+     *\n+     * @return The list of {@link AppArtifactCoords} installed in the project build file(s).\n+     * @throws IOException if a problem occurs while reading the project build file(s)\n+     */\n+    List<AppArtifactCoords> getInstalled() throws IOException;\n+\n+    /**\n+     * Read build file(s) to check if an extension is installed in this Quarkus project.\n+     *\n+     * @param key the {@link AppArtifactKey} of the extension to check\n+     * @return true if it's installed\n+     * @throws IOException if a problem occurs while reading the project build file(s)\n+     */\n+    default boolean isInstalled(AppArtifactKey key) throws IOException {\n+        return getInstalled().stream().anyMatch(i -> Objects.equals(i.getKey(), key));\n+    }\n+\n+    /**\n+     * Check that the Quarkus Platform bom is defined in the project.\n+     * The Quarkus Platform Bom role is to define version to use for Quarkus extensions.\n+     *\n+     * @return true if it's defined, false else\n+     * @throws IOException if a problem occurs while reading the project build file(s)\n+     */\n+    boolean hasQuarkusPlatformBom() throws IOException;\n+\n+    /**\n+     * This is going to install/add all the specified extensions to the project build file(s).\n+     *\n+     * <pre>\n+     *   - If the project Quarkus platform bom is not defined, an {@link IllegalStateException} will be thrown\n+     *   - Extensions which are already installed will ALWAYS be skipped whatever the specified version\n+     *   - The provided version will be used wasn't already installed\n+     * </pre>\n+     *\n+     * @param coords the list of {@link AppArtifactCoords} for the extensions to install\n+     * @return the {@link InstallResult}\n+     * @throws IOException if a problem occurs while reading/writing the project build file(s)\n+     */\n+    InstallResult install(List<AppArtifactCoords> coords) throws IOException;\n+\n+    /**\n+     * This is going to uninstall/remove all the specified extensions from the project build file(s).\n+     *\n+     * This is ignoring the {@link Extension} version\n+     *\n+     * @param keys the set of {@link AppArtifactKey} for the extensions to uninstall\n+     * @return the {@link InstallResult}\n+     * @throws IOException if a problem occurs while reading/writing the project build file(s)\n+     */\n+    UninstallResult uninstall(Set<AppArtifactKey> keys) throws IOException;\n+\n+    class InstallResult {\n+        private final int installed;\n+\n+        public InstallResult(int installed) {\n+            this.installed = installed;\n+        }\n+\n+        public int getInstalled() {\n+            return installed;\n+        }\n+\n+        public boolean isSourceUpdated() {\n+            return installed > 0;\n+        }\n+    }\n+\n+    class UninstallResult {\n+        private final int uninstalled;\n+\n+        public UninstallResult(int uninstalled) {\n+            this.uninstalled = uninstalled;\n+        }\n+\n+        public int getUninstalled() {", "originalCommit": "4315ce7b40fd2d6549394658a96c3f73173c305a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ4MDgyNQ==", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r437480825", "bodyText": "@gastaldi that's a good idea! and it could be done without changing the contract. Let's do it in another PR.", "author": "ia3andy", "createdAt": "2020-06-09T14:45:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ3OTg5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ4NjcyNQ==", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r437486725", "bodyText": "yeah and I need to print it too, it's not printed anymore when installing/uninstalling.. i'll create an issue as soon as we merge that one.", "author": "ia3andy", "createdAt": "2020-06-09T14:53:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ3OTg5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "f2684d0ff3221ba63625a7c98b1480d319c499b4", "chunk": "diff --git a/independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/extensions/ExtensionManager.java b/independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/extensions/ExtensionManager.java\nindex 6d8aa3442b..ad71e2ff70 100644\n--- a/independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/extensions/ExtensionManager.java\n+++ b/independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/extensions/ExtensionManager.java\n\n@@ -5,9 +5,8 @@ import io.quarkus.bootstrap.model.AppArtifactKey;\n import io.quarkus.dependencies.Extension;\n import io.quarkus.devtools.project.BuildTool;\n import java.io.IOException;\n-import java.util.List;\n+import java.util.Collection;\n import java.util.Objects;\n-import java.util.Set;\n \n /**\n  * This interface defines a high level way of managing (read/write) extensions in any QuarkusProject\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUwMTg5MA==", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r437501890", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final String EXTENSIONS_MANAGER = ToolsUtils.dotJoin(ToolsConstants.QUARKUS, NAME, \"extensions-manager\");\n          \n          \n            \n                public static final String EXTENSION_MANAGER = ToolsUtils.dotJoin(ToolsConstants.QUARKUS, NAME, \"extension-manager\");", "author": "gastaldi", "createdAt": "2020-06-09T15:11:39Z", "path": "independent-projects/tools/common/src/main/java/io/quarkus/devtools/commands/AddExtensions.java", "diffHunk": "@@ -13,19 +20,26 @@\n     public static final String NAME = \"add-extensions\";\n     public static final String EXTENSIONS = ToolsUtils.dotJoin(ToolsConstants.QUARKUS, NAME, \"extensions\");\n     public static final String OUTCOME_UPDATED = ToolsUtils.dotJoin(ToolsConstants.QUARKUS, NAME, \"outcome\", \"updated\");\n+    public static final String EXTENSIONS_MANAGER = ToolsUtils.dotJoin(ToolsConstants.QUARKUS, NAME, \"extensions-manager\");", "originalCommit": "4315ce7b40fd2d6549394658a96c3f73173c305a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f2684d0ff3221ba63625a7c98b1480d319c499b4", "chunk": "diff --git a/independent-projects/tools/common/src/main/java/io/quarkus/devtools/commands/AddExtensions.java b/independent-projects/tools/common/src/main/java/io/quarkus/devtools/commands/AddExtensions.java\nindex d05c1ad446..abc8a06fd5 100644\n--- a/independent-projects/tools/common/src/main/java/io/quarkus/devtools/commands/AddExtensions.java\n+++ b/independent-projects/tools/common/src/main/java/io/quarkus/devtools/commands/AddExtensions.java\n\n@@ -20,7 +20,7 @@ public class AddExtensions {\n     public static final String NAME = \"add-extensions\";\n     public static final String EXTENSIONS = ToolsUtils.dotJoin(ToolsConstants.QUARKUS, NAME, \"extensions\");\n     public static final String OUTCOME_UPDATED = ToolsUtils.dotJoin(ToolsConstants.QUARKUS, NAME, \"outcome\", \"updated\");\n-    public static final String EXTENSIONS_MANAGER = ToolsUtils.dotJoin(ToolsConstants.QUARKUS, NAME, \"extensions-manager\");\n+    public static final String EXTENSION_MANAGER = ToolsUtils.dotJoin(ToolsConstants.QUARKUS, NAME, \"extension-manager\");\n \n     private final QuarkusCommandInvocation invocation;\n     private final AddExtensionsCommandHandler handler = new AddExtensionsCommandHandler();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUwNDgxMQ==", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r437504811", "bodyText": "Don't expose this method, because the Registry won't be treated as a List of Extensions in the future", "author": "gastaldi", "createdAt": "2020-06-09T15:13:47Z", "path": "independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/buildfile/BuildFile.java", "diffHunk": "@@ -0,0 +1,158 @@\n+package io.quarkus.devtools.project.buildfile;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static io.quarkus.devtools.project.extensions.Extensions.findInRegistry;\n+import static io.quarkus.devtools.project.extensions.Extensions.toCoords;\n+import static io.quarkus.devtools.project.extensions.Extensions.toKey;\n+import static java.util.stream.Collectors.toList;\n+\n+import io.quarkus.bootstrap.model.AppArtifactCoords;\n+import io.quarkus.bootstrap.model.AppArtifactKey;\n+import io.quarkus.dependencies.Extension;\n+import io.quarkus.devtools.project.extensions.ExtensionManager;\n+import io.quarkus.devtools.project.extensions.Extensions;\n+import io.quarkus.platform.descriptor.QuarkusPlatformDescriptor;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.atomic.LongAdder;\n+import java.util.stream.Collectors;\n+import org.apache.maven.model.Dependency;\n+\n+public abstract class BuildFile<T> implements ExtensionManager {\n+\n+    private final Path projectFolderPath;\n+    private final QuarkusPlatformDescriptor platformDescriptor;\n+\n+    public BuildFile(final Path projectFolderPath, final QuarkusPlatformDescriptor platformDescriptor) {\n+        this.projectFolderPath = checkNotNull(projectFolderPath, \"projectPath is required\");\n+        this.platformDescriptor = checkNotNull(platformDescriptor, \"platformDescriptor is required\");\n+    }\n+\n+    @Override\n+    public final boolean hasQuarkusPlatformBom() throws IOException {\n+        return containsBOM(platformDescriptor.getBomGroupId(), platformDescriptor.getBomArtifactId());\n+    }\n+\n+    @Override\n+    public final InstallResult install(List<AppArtifactCoords> coords) throws IOException {\n+        if (!hasQuarkusPlatformBom()) {\n+            throw new IllegalStateException(\"The Quarkus BOM is required to add a Quarkus extension\");\n+        }\n+        this.refreshData();\n+        final Set<AppArtifactKey> existingKeys = getDependenciesKeys();\n+        final LongAdder counter = new LongAdder();\n+        coords.stream()\n+                .filter(a -> !existingKeys.contains(a.getKey()))\n+                .forEach(e -> {\n+                    try {\n+                        addDependencyInBuildFile(e);\n+                        counter.increment();\n+                    } catch (IOException ex) {\n+                        throw new UncheckedIOException(ex);\n+                    }\n+                });\n+        this.writeToDisk();\n+        return new InstallResult(counter.intValue());\n+    }\n+\n+    @Override\n+    public final List<AppArtifactCoords> getInstalled() throws IOException {\n+        this.refreshData();\n+        return this.getDependencies().stream()\n+                .filter(d -> this.isQuarkusExtension(toKey(d)))\n+                .map(d -> toCoords(d, extractVersion(d)))\n+                .collect(toList());\n+    }\n+\n+    @Override\n+    public final UninstallResult uninstall(Set<AppArtifactKey> keys) throws IOException {\n+        this.refreshData();\n+        final Set<AppArtifactKey> existingKeys = getDependenciesKeys();\n+        final LongAdder counter = new LongAdder();\n+        keys.stream()\n+                .filter(existingKeys::contains)\n+                .forEach(k -> {\n+                    try {\n+                        removeDependencyFromBuildFile(k);\n+                        counter.increment();\n+                    } catch (IOException ex) {\n+                        throw new UncheckedIOException(ex);\n+                    }\n+                });\n+        this.writeToDisk();\n+        return new UninstallResult(counter.intValue());\n+    }\n+\n+    protected abstract void addDependencyInBuildFile(AppArtifactCoords coords) throws IOException;\n+\n+    protected abstract void removeDependencyFromBuildFile(AppArtifactKey key) throws IOException;\n+\n+    protected abstract List<Dependency> getDependencies() throws IOException;\n+\n+    protected abstract void writeToDisk() throws IOException;\n+\n+    protected abstract String getProperty(String propertyName) throws IOException;\n+\n+    protected abstract boolean containsBOM(String groupId, String artifactId) throws IOException;\n+\n+    protected abstract void refreshData();\n+\n+    protected Path getProjectFolderPath() {\n+        return projectFolderPath;\n+    }\n+\n+    protected boolean hasProjectFile(final String fileName) throws IOException {\n+        final Path filePath = projectFolderPath.resolve(fileName);\n+        return Files.exists(filePath);\n+    }\n+\n+    protected byte[] readProjectFile(final String fileName) throws IOException {\n+        final Path filePath = projectFolderPath.resolve(fileName);\n+        return Files.readAllBytes(filePath);\n+    }\n+\n+    protected void writeToProjectFile(final String fileName, final byte[] content) throws IOException {\n+        Files.write(projectFolderPath.resolve(fileName), content);\n+    }\n+\n+    private boolean isQuarkusExtension(final AppArtifactKey key) {\n+        // This will not always be true as the platform descriptor does not contain the list of all available extensions\n+        return isDefinedInRegistry(platformDescriptor.getExtensions(), key);\n+    }\n+\n+    private Set<AppArtifactKey> getDependenciesKeys() throws IOException {\n+        return getDependencies().stream().map(Extensions::toKey).collect(Collectors.toSet());\n+    }\n+\n+    private String extractVersion(final Dependency d) {\n+        String version = d != null ? d.getVersion() : null;\n+        if (version != null && version.startsWith(\"$\")) {\n+            String value = null;\n+            try {\n+                value = (String) this.getProperty(propertyName(version));\n+                if (value != null) {\n+                    return value;\n+                }\n+            } catch (IOException e) {\n+                // ignore this error.\n+            }\n+        }\n+        if (version != null) {\n+            return version;\n+        }\n+        return null;\n+    }\n+\n+    private String propertyName(final String variable) {\n+        return variable.substring(2, variable.length() - 1);\n+    }\n+\n+    public static boolean isDefinedInRegistry(List<Extension> registry, final AppArtifactKey key) {\n+        return findInRegistry(registry, key).isPresent();\n+    }", "originalCommit": "4315ce7b40fd2d6549394658a96c3f73173c305a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f2684d0ff3221ba63625a7c98b1480d319c499b4", "chunk": "diff --git a/independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/buildfile/BuildFile.java b/independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/buildfile/BuildFile.java\nindex 0b1ea4373b..ee313991a9 100644\n--- a/independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/buildfile/BuildFile.java\n+++ b/independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/buildfile/BuildFile.java\n\n@@ -1,7 +1,7 @@\n package io.quarkus.devtools.project.buildfile;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n-import static io.quarkus.devtools.project.extensions.Extensions.findInRegistry;\n+import static io.quarkus.devtools.project.extensions.Extensions.findInList;\n import static io.quarkus.devtools.project.extensions.Extensions.toCoords;\n import static io.quarkus.devtools.project.extensions.Extensions.toKey;\n import static java.util.stream.Collectors.toList;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUyMDU4Mg==", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r437520582", "bodyText": "Nice!", "author": "gastaldi", "createdAt": "2020-06-09T15:27:08Z", "path": "independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/codegen/writer/FileProjectWriter.java", "diffHunk": "@@ -19,21 +19,21 @@ public FileProjectWriter(final File file) {\n     }\n \n     @Override\n-    public boolean init() {\n-        if (root.exists() && !root.isDirectory()) {\n-            System.out.println(\"Project root needs to either not exist or be a directory\");\n-            return false;\n-        } else if (!root.exists()) {\n+    public void init() throws IOException {\n+        if (!root.exists()) {\n             boolean mkdirStatus = root.mkdirs();\n             if (!mkdirStatus) {\n-                System.out.println(\"Failed to create root directory\");\n-                return false;\n+                throw new IOException(\"Failed to create root directory\");", "originalCommit": "4315ce7b40fd2d6549394658a96c3f73173c305a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "036f5cda3efce894fcd6c413040b7b125005bf0d", "chunk": "diff --git a/independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/codegen/writer/FileProjectWriter.java b/independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/codegen/writer/FileProjectWriter.java\nindex da284ca0f5..c5c8fdb5df 100644\n--- a/independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/codegen/writer/FileProjectWriter.java\n+++ b/independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/codegen/writer/FileProjectWriter.java\n\n@@ -28,7 +28,7 @@ public class FileProjectWriter implements ProjectWriter {\n             return;\n         }\n         if (!root.isDirectory()) {\n-            throw new IOException(\"Project root needs to either not exist or be a directory\");\n+            throw new IOException(\"Project root needs to be a directory\");\n         }\n         final String[] files = root.list();\n         if (files != null && files.length > 0) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUyMTE2Mg==", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r437521162", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new IOException(\"Project root needs to either not exist or be a directory\");\n          \n          \n            \n                        throw new IOException(\"Project root needs to be a directory\");", "author": "gastaldi", "createdAt": "2020-06-09T15:27:57Z", "path": "independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/codegen/writer/FileProjectWriter.java", "diffHunk": "@@ -19,21 +19,21 @@ public FileProjectWriter(final File file) {\n     }\n \n     @Override\n-    public boolean init() {\n-        if (root.exists() && !root.isDirectory()) {\n-            System.out.println(\"Project root needs to either not exist or be a directory\");\n-            return false;\n-        } else if (!root.exists()) {\n+    public void init() throws IOException {\n+        if (!root.exists()) {\n             boolean mkdirStatus = root.mkdirs();\n             if (!mkdirStatus) {\n-                System.out.println(\"Failed to create root directory\");\n-                return false;\n+                throw new IOException(\"Failed to create root directory\");\n             }\n+            return;\n+        }\n+        if (!root.isDirectory()) {\n+            throw new IOException(\"Project root needs to either not exist or be a directory\");", "originalCommit": "4315ce7b40fd2d6549394658a96c3f73173c305a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "036f5cda3efce894fcd6c413040b7b125005bf0d", "chunk": "diff --git a/independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/codegen/writer/FileProjectWriter.java b/independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/codegen/writer/FileProjectWriter.java\nindex da284ca0f5..c5c8fdb5df 100644\n--- a/independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/codegen/writer/FileProjectWriter.java\n+++ b/independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/codegen/writer/FileProjectWriter.java\n\n@@ -28,7 +28,7 @@ public class FileProjectWriter implements ProjectWriter {\n             return;\n         }\n         if (!root.isDirectory()) {\n-            throw new IOException(\"Project root needs to either not exist or be a directory\");\n+            throw new IOException(\"Project root needs to be a directory\");\n         }\n         final String[] files = root.list();\n         if (files != null && files.length > 0) {\n"}}, {"oid": "f2684d0ff3221ba63625a7c98b1480d319c499b4", "url": "https://github.com/quarkusio/quarkus/commit/f2684d0ff3221ba63625a7c98b1480d319c499b4", "message": "Apply new requested changes", "committedDate": "2020-06-09T16:53:07Z", "type": "forcePushed"}, {"oid": "fb816155adf976ff88f37a58f2ec4a84351fb776", "url": "https://github.com/quarkusio/quarkus/commit/fb816155adf976ff88f37a58f2ec4a84351fb776", "message": "Apply new requested changes", "committedDate": "2020-06-09T16:54:14Z", "type": "forcePushed"}, {"oid": "036f5cda3efce894fcd6c413040b7b125005bf0d", "url": "https://github.com/quarkusio/quarkus/commit/036f5cda3efce894fcd6c413040b7b125005bf0d", "message": "Refactor and Introduce ExtensionsManager in CodeGen\n\nThis is part of #8178\n\n- Improved packages names and content\n- Improved general readability and consistency\n- Added ExtensionManager to define a high level way of managing (read/write) extensions in any QuarkusProject\n- Removed most unsafe Gradle operations which were outside of the Gradle plugin (we need to figure out a way to improve the \"generic\" gradle support to make it compatible again..)\n- Removed existing project support with the create command (throws an error) -> #9875\n- Removed compatibility with project without the Quarkus platform bom defined\n- Remove SetupIT which mostly duplicate CreateProjectMojoIT", "committedDate": "2020-06-09T17:06:00Z", "type": "forcePushed"}, {"oid": "f9787182519221d0243dea1ed73c02f2eafa7b14", "url": "https://github.com/quarkusio/quarkus/commit/f9787182519221d0243dea1ed73c02f2eafa7b14", "message": "Refactor and Introduce ExtensionsManager in CodeGen\n\nThis is part of #8178\n\n- Improved packages names and content\n- Improved general readability and consistency\n- Added ExtensionManager to define a high level way of managing (read/write) extensions in any QuarkusProject\n- Removed most unsafe Gradle operations which were outside of the Gradle plugin (we need to figure out a way to improve the \"generic\" gradle support to make it compatible again..)\n- Removed existing project support with the create command (throws an error) -> #9875\n- Removed compatibility with project without the Quarkus platform bom defined\n- Remove SetupIT which mostly duplicate CreateProjectMojoIT", "committedDate": "2020-06-09T21:08:30Z", "type": "forcePushed"}, {"oid": "97f9981d7091c6355121c33b9aa333d9b81a4e12", "url": "https://github.com/quarkusio/quarkus/commit/97f9981d7091c6355121c33b9aa333d9b81a4e12", "message": "Refactor and Introduce ExtensionsManager in CodeGen\n\nThis is part of #8178\n\n- Improved packages names and content\n- Improved general readability and consistency\n- Added ExtensionManager to define a high level way of managing (read/write) extensions in any QuarkusProject\n- Removed most unsafe Gradle operations which were outside of the Gradle plugin (we need to figure out a way to improve the \"generic\" gradle support to make it compatible again..)\n- Removed existing project support with the create command (throws an error) -> #9875\n- Removed compatibility with project without the Quarkus platform bom defined\n- Remove SetupIT which mostly duplicate CreateProjectMojoIT", "committedDate": "2020-06-10T08:43:28Z", "type": "commit"}, {"oid": "97f9981d7091c6355121c33b9aa333d9b81a4e12", "url": "https://github.com/quarkusio/quarkus/commit/97f9981d7091c6355121c33b9aa333d9b81a4e12", "message": "Refactor and Introduce ExtensionsManager in CodeGen\n\nThis is part of #8178\n\n- Improved packages names and content\n- Improved general readability and consistency\n- Added ExtensionManager to define a high level way of managing (read/write) extensions in any QuarkusProject\n- Removed most unsafe Gradle operations which were outside of the Gradle plugin (we need to figure out a way to improve the \"generic\" gradle support to make it compatible again..)\n- Removed existing project support with the create command (throws an error) -> #9875\n- Removed compatibility with project without the Quarkus platform bom defined\n- Remove SetupIT which mostly duplicate CreateProjectMojoIT", "committedDate": "2020-06-10T08:43:28Z", "type": "forcePushed"}]}