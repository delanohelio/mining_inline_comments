{"pr_number": 9195, "pr_title": "Added a new property to support more algorithms", "pr_createdAt": "2020-05-10T15:01:14Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/9195", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkyNzI1MA==", "url": "https://github.com/quarkusio/quarkus/pull/9195#discussion_r422927250", "bodyText": "I'd consider throwing the exception instead, if the user expects some super secure algorithm then we can't really default to something else IMHO.", "author": "sberyozkin", "createdAt": "2020-05-11T10:01:27Z", "path": "extensions/elytron-security-properties-file/runtime/src/main/java/io/quarkus/elytron/security/runtime/ElytronPropertiesFileRecorder.java", "diffHunk": "@@ -210,4 +211,24 @@ public void run() {\n         SecurityRealm realm = new SimpleMapBackedSecurityRealm(NameRewriter.IDENTITY_REWRITER, providers);\n         return new RuntimeValue<>(realm);\n     }\n+\n+    private static String getAlgorithm(String algorithm) {\n+        switch (algorithm) {\n+            case \"ALGORITHM_DIGEST_MD5\":\n+                return DigestPassword.ALGORITHM_DIGEST_MD5;\n+            case \"ALGORITHM_DIGEST_SHA\":\n+                return DigestPassword.ALGORITHM_DIGEST_SHA;\n+            case \"ALGORITHM_DIGEST_SHA_256\":\n+                return DigestPassword.ALGORITHM_DIGEST_SHA_256;\n+            case \"ALGORITHM_DIGEST_SHA_384\":\n+                return DigestPassword.ALGORITHM_DIGEST_SHA_384;\n+            case \"ALGORITHM_DIGEST_SHA_512\":\n+                return DigestPassword.ALGORITHM_DIGEST_SHA_512;\n+            case \"ALGORITHM_DIGEST_SHA_512_256\":\n+                return DigestPassword.ALGORITHM_DIGEST_SHA_512_256;\n+            default:", "originalCommit": "53b1a11c77a377f5e087b5cb2f665a56049fbe7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkyOTk3MQ==", "url": "https://github.com/quarkusio/quarkus/pull/9195#discussion_r422929971", "bodyText": "Thanks for the feedback. Yes, That does make sense. Will update this.", "author": "lower-case", "createdAt": "2020-05-11T10:06:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkyNzI1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI0Mzg4Mg==", "url": "https://github.com/quarkusio/quarkus/pull/9195#discussion_r423243882", "bodyText": "@sberyozkin I've updated the logic, if the algorithm doesn't match the predefined ones then we'll use it directly in PasswordFactory. This has 2 advantages\n\nNo need to build a custom exception, A predefined exception will be thrown by elytron if no such algorithm exists.\nUsers now can also use short form directly like \"digest-md5\".", "author": "lower-case", "createdAt": "2020-05-11T18:44:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkyNzI1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA1OTQxNQ==", "url": "https://github.com/quarkusio/quarkus/pull/9195#discussion_r424059415", "bodyText": "@lower-case should algorithm property be enum:\nenum Algorithm {\n    DIGEST_MD5(\"digest-md5\")\n    //etc\n}\n\nOtherwise getAlgorithm does not do anything actually, you can pass algorithm as is anyway", "author": "sberyozkin", "createdAt": "2020-05-12T22:01:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkyNzI1MA=="}], "type": "inlineReview", "revised_code": {"commit": "73e1e34454903ad1c5bc182a49bd01649c216457", "chunk": "diff --git a/extensions/elytron-security-properties-file/runtime/src/main/java/io/quarkus/elytron/security/runtime/ElytronPropertiesFileRecorder.java b/extensions/elytron-security-properties-file/runtime/src/main/java/io/quarkus/elytron/security/runtime/ElytronPropertiesFileRecorder.java\nindex 14512e91b0..cd8b0f1183 100644\n--- a/extensions/elytron-security-properties-file/runtime/src/main/java/io/quarkus/elytron/security/runtime/ElytronPropertiesFileRecorder.java\n+++ b/extensions/elytron-security-properties-file/runtime/src/main/java/io/quarkus/elytron/security/runtime/ElytronPropertiesFileRecorder.java\n\n@@ -227,8 +227,7 @@ public class ElytronPropertiesFileRecorder {\n             case \"ALGORITHM_DIGEST_SHA_512_256\":\n                 return DigestPassword.ALGORITHM_DIGEST_SHA_512_256;\n             default:\n-                log.warnf(\"No Algorithm Found with name: %s, using the default MD5\", algorithm);\n-                return DigestPassword.ALGORITHM_DIGEST_MD5;\n+                return algorithm;\n         }\n     }\n }\n"}}, {"oid": "73e1e34454903ad1c5bc182a49bd01649c216457", "url": "https://github.com/quarkusio/quarkus/commit/73e1e34454903ad1c5bc182a49bd01649c216457", "message": "Added a new property to support more algorithms", "committedDate": "2020-05-11T18:35:41Z", "type": "forcePushed"}, {"oid": "7246629123e7f5e6d3e44dd5240495d24073b2ef", "url": "https://github.com/quarkusio/quarkus/commit/7246629123e7f5e6d3e44dd5240495d24073b2ef", "message": "Added a new property to support more algorithms", "committedDate": "2020-05-15T03:09:46Z", "type": "forcePushed"}, {"oid": "fe73cb9ea82feaa4fb1cefc37fa024b08c73cc4b", "url": "https://github.com/quarkusio/quarkus/commit/fe73cb9ea82feaa4fb1cefc37fa024b08c73cc4b", "message": "Added a new property to support more algorithms", "committedDate": "2020-05-15T03:13:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY5NjcxNw==", "url": "https://github.com/quarkusio/quarkus/pull/9195#discussion_r425696717", "bodyText": "The point of having an enum is to enforce that the random value is not entered, returning the invalid value here again makes the use of enum in this case redundant.", "author": "sberyozkin", "createdAt": "2020-05-15T09:59:58Z", "path": "extensions/elytron-security-properties-file/runtime/src/main/java/io/quarkus/elytron/security/runtime/Algorithm.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package io.quarkus.elytron.security.runtime;\n+\n+import org.wildfly.security.password.interfaces.DigestPassword;\n+\n+/**\n+ * Enum to map UserInput Algorithm Values to wildfly Algorithm\n+ * Ex: ALGORITHM_DIGEST_MD5 -> digest-md5\n+ */\n+public enum Algorithm {\n+    ALGORITHM_DIGEST_MD5(DigestPassword.ALGORITHM_DIGEST_MD5),\n+    ALGORITHM_DIGEST_SHA(DigestPassword.ALGORITHM_DIGEST_SHA),\n+    ALGORITHM_DIGEST_SHA_256(DigestPassword.ALGORITHM_DIGEST_SHA_256),\n+    ALGORITHM_DIGEST_SHA_384(DigestPassword.ALGORITHM_DIGEST_SHA_384),\n+    ALGORITHM_DIGEST_SHA_512(DigestPassword.ALGORITHM_DIGEST_SHA_512),\n+    ALGORITHM_DIGEST_SHA_512_256(DigestPassword.ALGORITHM_DIGEST_SHA_512_256);\n+\n+    private final String algorithm;\n+\n+    Algorithm(String algorithm) {\n+        this.algorithm = algorithm;\n+    }\n+\n+    public static String getValue(String name) {\n+        try {\n+            return Algorithm.valueOf(name).algorithm;\n+        } catch (IllegalArgumentException e) {\n+            return name;", "originalCommit": "fe73cb9ea82feaa4fb1cefc37fa024b08c73cc4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTczODI2NA==", "url": "https://github.com/quarkusio/quarkus/pull/9195#discussion_r425738264", "bodyText": "Hey @sberyozkin  I was under the impression that we are giving user flexibility to enter any value and if that value is invalid then elytron will throw error and we added enum so that user can enter either ALGORITHM_DIGEST_MD5 or digest-md5. Please suggest how should we implement this.", "author": "lower-case", "createdAt": "2020-05-15T11:26:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY5NjcxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU2MzAyMA==", "url": "https://github.com/quarkusio/quarkus/pull/9195#discussion_r426563020", "bodyText": "Hi @lower-case, I did not suggest to have multiple values for a single algorithm be supported.\nYour original geAlgorithm() implementation was defaulting to some value if the user entered something unrecognized, which was incorrect IMHO.\nNext I proposed to throw the exception. IMHO it is better to report a Quarkus level error such as \"Algorithm %s\" + algorithm is not supported, only this, that, and that algorithm values are allowed, instead of letting the internal implementation exception be reported (by the way, how would it look if you add an algorithm value a ?)\nYour follow up update made getAlgorithm redundant as you were simply passing the unrecognised value to Elytron, which does not look right either, so next I proposed to use an enum to restrict the values.\nALGORITHM_DIGEST_MD5 is not really a user friendly value, is an internal constant, digest-md5 is. So I proposed to have an enum which accepts digest-md5 and other values known to the users. I believe you can add an MP Config ConfigConverter which will create this enum out  of digest-md5/etc, and make sure that the ConfigurationException is reported early. Or you can have enum values like digest-md5 and don't do anything - but the exception in case of the unrecognized values won't be too useful, so the converter approach seems to be the right one\nThanks. CC @geoand @gsmet - hi, if you think I'm over complicating then please suggest @lower-case a simpler path :-)", "author": "sberyozkin", "createdAt": "2020-05-18T11:40:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY5NjcxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU2ODMzMQ==", "url": "https://github.com/quarkusio/quarkus/pull/9195#discussion_r426568331", "bodyText": "Spot on @sberyozkin", "author": "geoand", "createdAt": "2020-05-18T11:50:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY5NjcxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMyMjU2Ng==", "url": "https://github.com/quarkusio/quarkus/pull/9195#discussion_r427322566", "bodyText": "@geoand thanks for checking it. @lower-case, in quarkus-oidc we use enums a lot, we do not use ConfigConverter but we don't need to map to some internal values either. I also spotted a mistake in my proposal, - is not a valid enum name character, so one can't have 1 one to one mapping with the enum name like digest-md5, hence the converter does seem the best option, it will will take care of converting a user supplied digest-md5 into the enum value.\nIf it proves too tricky then may be return to the original proposal where you check the String algorithm value manually and report an exception. thanks", "author": "sberyozkin", "createdAt": "2020-05-19T13:57:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY5NjcxNw=="}], "type": "inlineReview", "revised_code": {"commit": "26ba735dae6709d92aba0e896391be2dc8aad701", "chunk": "diff --git a/extensions/elytron-security-properties-file/runtime/src/main/java/io/quarkus/elytron/security/runtime/Algorithm.java b/extensions/elytron-security-properties-file/runtime/src/main/java/io/quarkus/elytron/security/runtime/Algorithm.java\ndeleted file mode 100644\nindex bfd4526527..0000000000\n--- a/extensions/elytron-security-properties-file/runtime/src/main/java/io/quarkus/elytron/security/runtime/Algorithm.java\n+++ /dev/null\n\n@@ -1,30 +0,0 @@\n-package io.quarkus.elytron.security.runtime;\n-\n-import org.wildfly.security.password.interfaces.DigestPassword;\n-\n-/**\n- * Enum to map UserInput Algorithm Values to wildfly Algorithm\n- * Ex: ALGORITHM_DIGEST_MD5 -> digest-md5\n- */\n-public enum Algorithm {\n-    ALGORITHM_DIGEST_MD5(DigestPassword.ALGORITHM_DIGEST_MD5),\n-    ALGORITHM_DIGEST_SHA(DigestPassword.ALGORITHM_DIGEST_SHA),\n-    ALGORITHM_DIGEST_SHA_256(DigestPassword.ALGORITHM_DIGEST_SHA_256),\n-    ALGORITHM_DIGEST_SHA_384(DigestPassword.ALGORITHM_DIGEST_SHA_384),\n-    ALGORITHM_DIGEST_SHA_512(DigestPassword.ALGORITHM_DIGEST_SHA_512),\n-    ALGORITHM_DIGEST_SHA_512_256(DigestPassword.ALGORITHM_DIGEST_SHA_512_256);\n-\n-    private final String algorithm;\n-\n-    Algorithm(String algorithm) {\n-        this.algorithm = algorithm;\n-    }\n-\n-    public static String getValue(String name) {\n-        try {\n-            return Algorithm.valueOf(name).algorithm;\n-        } catch (IllegalArgumentException e) {\n-            return name;\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY5Njk1Mw==", "url": "https://github.com/quarkusio/quarkus/pull/9195#discussion_r425696953", "bodyText": "This should be of the new enum type", "author": "sberyozkin", "createdAt": "2020-05-15T10:00:26Z", "path": "extensions/elytron-security-properties-file/runtime/src/main/java/io/quarkus/elytron/security/runtime/MPRealmConfig.java", "diffHunk": "@@ -24,6 +26,13 @@\n      */\n     @ConfigItem\n     public boolean plainText;\n+\n+    /**\n+     * Determine which algorithm to use, defaults to digest-md5. This property is ignored if @plainText is true\n+     */\n+    @ConfigItem(defaultValue = ALGORITHM_DIGEST_MD5)\n+    public String algorithm;", "originalCommit": "fe73cb9ea82feaa4fb1cefc37fa024b08c73cc4b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "26ba735dae6709d92aba0e896391be2dc8aad701", "chunk": "diff --git a/extensions/elytron-security-properties-file/runtime/src/main/java/io/quarkus/elytron/security/runtime/MPRealmConfig.java b/extensions/elytron-security-properties-file/runtime/src/main/java/io/quarkus/elytron/security/runtime/MPRealmConfig.java\nindex 6ddd2d015a..d573b9610e 100644\n--- a/extensions/elytron-security-properties-file/runtime/src/main/java/io/quarkus/elytron/security/runtime/MPRealmConfig.java\n+++ b/extensions/elytron-security-properties-file/runtime/src/main/java/io/quarkus/elytron/security/runtime/MPRealmConfig.java\n\n@@ -20,39 +16,12 @@ public class MPRealmConfig {\n     @ConfigItem(defaultValue = \"Quarkus\")\n     public String realmName;\n \n-    /**\n-     * If the properties are stored in plain text. If this is false (the default) then it is expected\n-     * that the passwords are of the form HEX( MD5( username \":\" realm \":\" password ) )\n-     */\n-    @ConfigItem\n-    public boolean plainText;\n-\n-    /**\n-     * Determine which algorithm to use, defaults to digest-md5. This property is ignored if @plainText is true\n-     */\n-    @ConfigItem(defaultValue = ALGORITHM_DIGEST_MD5)\n-    public String algorithm;\n-\n     /**\n      * Determine whether security via the embedded realm is enabled.\n      */\n     @ConfigItem\n     public boolean enabled;\n \n-    /**\n-     * The realm users user1=password\\nuser2=password2... mapping.\n-     * See <a href=\"#embedded-users\">Embedded Users</a>.\n-     */\n-    @ConfigItem(defaultValueDocumentation = \"none\")\n-    public Map<String, String> users;\n-\n-    /**\n-     * The realm roles user1=role1,role2,...\\nuser2=role1,role2,... mapping\n-     * See <a href=\"#embedded-roles\">Embedded Roles</a>.\n-     */\n-    @ConfigItem(defaultValueDocumentation = \"none\")\n-    public Map<String, String> roles;\n-\n     public String getRealmName() {\n         return realmName;\n     }\n"}}, {"oid": "26ba735dae6709d92aba0e896391be2dc8aad701", "url": "https://github.com/quarkusio/quarkus/commit/26ba735dae6709d92aba0e896391be2dc8aad701", "message": "Added a new property to support more algorithms", "committedDate": "2020-10-12T12:12:34Z", "type": "commit"}, {"oid": "26ba735dae6709d92aba0e896391be2dc8aad701", "url": "https://github.com/quarkusio/quarkus/commit/26ba735dae6709d92aba0e896391be2dc8aad701", "message": "Added a new property to support more algorithms", "committedDate": "2020-10-12T12:12:34Z", "type": "forcePushed"}]}