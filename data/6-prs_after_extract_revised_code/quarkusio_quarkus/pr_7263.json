{"pr_number": 7263, "pr_title": "Implement the Mutiny API for the MongoDB client", "pr_createdAt": "2020-02-18T16:46:22Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/7263", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE0Njg3MQ==", "url": "https://github.com/quarkusio/quarkus/pull/7263#discussion_r381146871", "bodyText": "There is one @deprecated not needed.", "author": "loicmathieu", "createdAt": "2020-02-19T08:45:07Z", "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/ReactiveMongoCollection.java", "diffHunk": "@@ -20,8 +20,9 @@\n  * A reactive API to interact with a Mongo collection.\n  *\n  * @param <T> The type that this collection will encode documents from and decode documents to.\n- * @since 1.0\n+ * @deprecated @deprecated Use {@link io.quarkus.mongodb.reactive.ReactiveMongoCollection} instead.", "originalCommit": "a59e3ec04c5a6f5b58734b991f143a40a39365c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjExMTk5OQ==", "url": "https://github.com/quarkusio/quarkus/pull/7263#discussion_r382111999", "bodyText": "Fixed.", "author": "cescoffier", "createdAt": "2020-02-20T16:27:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE0Njg3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "ffb89d55781f5e28357a251ea5c85dcd31706d9f", "chunk": "diff --git a/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/ReactiveMongoCollection.java b/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/ReactiveMongoCollection.java\nindex 6b29da7483..b669b13f4d 100644\n--- a/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/ReactiveMongoCollection.java\n+++ b/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/ReactiveMongoCollection.java\n\n@@ -20,9 +20,8 @@ import com.mongodb.reactivestreams.client.*;\n  * A reactive API to interact with a Mongo collection.\n  *\n  * @param <T> The type that this collection will encode documents from and decode documents to.\n- * @deprecated @deprecated Use {@link io.quarkus.mongodb.reactive.ReactiveMongoCollection} instead.\n+ * @since 1.0\n  */\n-@Deprecated\n public interface ReactiveMongoCollection<T> {\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE1NDAyMQ==", "url": "https://github.com/quarkusio/quarkus/pull/7263#discussion_r381154021", "bodyText": "Needed for mongodb-panache", "author": "loicmathieu", "createdAt": "2020-02-19T08:59:30Z", "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/impl/ReactiveMongoCollectionImpl.java", "diffHunk": "@@ -60,95 +58,69 @@ public MongoNamespace getNamespace() {\n         return collection.getNamespace();\n     }\n \n-    @Override\n-    public CodecRegistry getCodecRegistry() {\n-        return collection.getCodecRegistry();\n-    }\n-", "originalCommit": "a59e3ec04c5a6f5b58734b991f143a40a39365c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA4NjI1OA==", "url": "https://github.com/quarkusio/quarkus/pull/7263#discussion_r382086258", "bodyText": "The method was just moved but is still there.", "author": "cescoffier", "createdAt": "2020-02-20T15:47:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE1NDAyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "ffb89d55781f5e28357a251ea5c85dcd31706d9f", "chunk": "diff --git a/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/impl/ReactiveMongoCollectionImpl.java b/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/impl/ReactiveMongoCollectionImpl.java\nindex bf2affa636..6a78aff211 100644\n--- a/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/impl/ReactiveMongoCollectionImpl.java\n+++ b/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/impl/ReactiveMongoCollectionImpl.java\n\n@@ -58,69 +60,95 @@ public class ReactiveMongoCollectionImpl<T> implements ReactiveMongoCollection<T\n         return collection.getNamespace();\n     }\n \n+    @Override\n+    public CodecRegistry getCodecRegistry() {\n+        return collection.getCodecRegistry();\n+    }\n+\n     @Override\n     public Class<T> getDocumentClass() {\n         return collection.getDocumentClass();\n     }\n \n     @Override\n-    public Uni<Long> estimatedDocumentCount() {\n-        return Wrappers.toUni(collection.estimatedDocumentCount());\n+    public CompletionStage<Long> estimatedDocumentCount() {\n+        return Wrappers.toCompletionStage(collection.estimatedDocumentCount());\n+    }\n+\n+    @Override\n+    public CompletionStage<Long> estimatedDocumentCount(EstimatedDocumentCountOptions options) {\n+        return Wrappers.toCompletionStage(collection.estimatedDocumentCount(options));\n     }\n \n     @Override\n-    public Uni<Long> estimatedDocumentCount(EstimatedDocumentCountOptions options) {\n-        return Wrappers.toUni(collection.estimatedDocumentCount(options));\n+    public CompletionStage<Long> countDocuments() {\n+        return Wrappers.toCompletionStage(collection.countDocuments());\n     }\n \n     @Override\n-    public Uni<Long> countDocuments() {\n-        return Wrappers.toUni(collection.countDocuments());\n+    public CompletionStage<Long> countDocuments(Bson filter) {\n+        return Wrappers.toCompletionStage(collection.countDocuments(filter));\n     }\n \n     @Override\n-    public Uni<Long> countDocuments(Bson filter) {\n-        return Wrappers.toUni(collection.countDocuments(filter));\n+    public CompletionStage<Long> countDocuments(Bson filter, CountOptions options) {\n+        return Wrappers.toCompletionStage(collection.countDocuments(filter, options));\n     }\n \n     @Override\n-    public Uni<Long> countDocuments(Bson filter, CountOptions options) {\n-        return Wrappers.toUni(collection.countDocuments(filter, options));\n+    public CompletionStage<Long> countDocuments(ClientSession clientSession) {\n+        return Wrappers.toCompletionStage(collection.countDocuments(clientSession));\n     }\n \n     @Override\n-    public Uni<Long> countDocuments(ClientSession clientSession) {\n-        return Wrappers.toUni(collection.countDocuments(clientSession));\n+    public CompletionStage<Long> countDocuments(ClientSession clientSession, Bson filter) {\n+        return Wrappers.toCompletionStage(collection.countDocuments(clientSession, filter));\n     }\n \n     @Override\n-    public Uni<Long> countDocuments(ClientSession clientSession, Bson filter) {\n-        return Wrappers.toUni(collection.countDocuments(clientSession, filter));\n+    public CompletionStage<Long> countDocuments(ClientSession clientSession, Bson filter, CountOptions options) {\n+        return Wrappers.toCompletionStage(collection.countDocuments(clientSession, filter, options));\n     }\n \n     @Override\n-    public Uni<Long> countDocuments(ClientSession clientSession, Bson filter, CountOptions options) {\n-        return Wrappers.toUni(collection.countDocuments(clientSession, filter, options));\n+    public <D> DistinctPublisher<D> distinctAsPublisher(String fieldName, Class<D> clazz) {\n+        return collection.distinct(fieldName, clazz);\n     }\n \n     @Override\n-    public <D> Multi<D> distinct(String fieldName, Class<D> clazz) {\n-        return Wrappers.toMulti(collection.distinct(fieldName, clazz));\n+    public <D> DistinctPublisher<D> distinctAsPublisher(String fieldName, Bson filter, Class<D> clazz) {\n+        return collection.distinct(fieldName, filter, clazz);\n     }\n \n     @Override\n-    public <D> Multi<D> distinct(String fieldName, Bson filter, Class<D> clazz) {\n-        return Wrappers.toMulti(collection.distinct(fieldName, filter, clazz));\n+    public <D> DistinctPublisher<D> distinctAsPublisher(ClientSession clientSession, String fieldName, Class<D> clazz) {\n+        return collection.distinct(clientSession, fieldName, clazz);\n     }\n \n     @Override\n-    public <D> Multi<D> distinct(ClientSession clientSession, String fieldName, Class<D> clazz) {\n-        return Wrappers.toMulti(collection.distinct(clientSession, fieldName, clazz));\n+    public <D> DistinctPublisher<D> distinctAsPublisher(ClientSession clientSession, String fieldName, Bson filter,\n+            Class<D> clazz) {\n+        return collection.distinct(clientSession, fieldName, filter, clazz);\n     }\n \n     @Override\n-    public <D> Multi<D> distinct(ClientSession clientSession, String fieldName, Bson filter, Class<D> clazz) {\n-        return Wrappers.toMulti(collection.distinct(clientSession, fieldName, filter, clazz));\n+    public <D> PublisherBuilder<D> distinct(String fieldName, Class<D> clazz) {\n+        return Wrappers.toPublisherBuilder(collection.distinct(fieldName, clazz));\n+    }\n+\n+    @Override\n+    public <D> PublisherBuilder<D> distinct(String fieldName, Bson filter, Class<D> clazz) {\n+        return Wrappers.toPublisherBuilder(collection.distinct(fieldName, filter, clazz));\n+    }\n+\n+    @Override\n+    public <D> PublisherBuilder<D> distinct(ClientSession clientSession, String fieldName, Class<D> clazz) {\n+        return Wrappers.toPublisherBuilder(collection.distinct(clientSession, fieldName, clazz));\n+    }\n+\n+    @Override\n+    public <D> PublisherBuilder<D> distinct(ClientSession clientSession, String fieldName, Bson filter, Class<D> clazz) {\n+        return Wrappers.toPublisherBuilder(collection.distinct(clientSession, fieldName, filter, clazz));\n     }\n \n     private <D> DistinctPublisher<D> apply(DistinctOptions options, DistinctPublisher<D> stream) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2NTE2OQ==", "url": "https://github.com/quarkusio/quarkus/pull/7263#discussion_r381165169", "bodyText": "Missing an a  in the javadoc ?\n@return an {@link Uni} completed with the estimated number of documents", "author": "loicmathieu", "createdAt": "2020-02-19T09:21:13Z", "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/reactive/ReactiveMongoCollection.java", "diffHunk": "@@ -0,0 +1,1410 @@\n+package io.quarkus.mongodb.reactive;\n+\n+import java.util.List;\n+\n+import org.bson.Document;\n+import org.bson.codecs.configuration.CodecRegistry;\n+import org.bson.conversions.Bson;\n+\n+import com.mongodb.MongoNamespace;\n+import com.mongodb.bulk.BulkWriteResult;\n+import com.mongodb.client.model.BulkWriteOptions;\n+import com.mongodb.client.model.CountOptions;\n+import com.mongodb.client.model.CreateIndexOptions;\n+import com.mongodb.client.model.DeleteOptions;\n+import com.mongodb.client.model.DropIndexOptions;\n+import com.mongodb.client.model.EstimatedDocumentCountOptions;\n+import com.mongodb.client.model.FindOneAndDeleteOptions;\n+import com.mongodb.client.model.FindOneAndReplaceOptions;\n+import com.mongodb.client.model.FindOneAndUpdateOptions;\n+import com.mongodb.client.model.IndexModel;\n+import com.mongodb.client.model.IndexOptions;\n+import com.mongodb.client.model.InsertManyOptions;\n+import com.mongodb.client.model.InsertOneOptions;\n+import com.mongodb.client.model.RenameCollectionOptions;\n+import com.mongodb.client.model.ReplaceOptions;\n+import com.mongodb.client.model.UpdateOptions;\n+import com.mongodb.client.model.WriteModel;\n+import com.mongodb.client.model.changestream.ChangeStreamDocument;\n+import com.mongodb.client.result.DeleteResult;\n+import com.mongodb.client.result.UpdateResult;\n+import com.mongodb.reactivestreams.client.ClientSession;\n+\n+import io.quarkus.mongodb.AggregateOptions;\n+import io.quarkus.mongodb.ChangeStreamOptions;\n+import io.quarkus.mongodb.DistinctOptions;\n+import io.quarkus.mongodb.FindOptions;\n+import io.quarkus.mongodb.MapReduceOptions;\n+import io.smallrye.mutiny.Multi;\n+import io.smallrye.mutiny.Uni;\n+\n+/**\n+ * A reactive API to interact with a Mongo collection.\n+ *\n+ * @param <T> The type that this collection will encode documents from and decode documents to.\n+ * @since 1.0\n+ */\n+public interface ReactiveMongoCollection<T> {\n+\n+    /**\n+     * Gets the namespace of this collection.\n+     *\n+     * @return the namespace\n+     */\n+    MongoNamespace getNamespace();\n+\n+    /**\n+     * Get the class of documents stored in this collection.\n+     *\n+     * @return the class\n+     */\n+    Class<T> getDocumentClass();\n+\n+    /**\n+     * Gets an estimate of the count of documents in a collection using collection metadata.\n+     *\n+     * @return n {@link Uni} completed with the estimated number of documents", "originalCommit": "a59e3ec04c5a6f5b58734b991f143a40a39365c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA4OTU2MA==", "url": "https://github.com/quarkusio/quarkus/pull/7263#discussion_r382089560", "bodyText": "\"replace all\" is a broken pattern! Fixing...", "author": "cescoffier", "createdAt": "2020-02-20T15:52:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2NTE2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjExMjE0Nw==", "url": "https://github.com/quarkusio/quarkus/pull/7263#discussion_r382112147", "bodyText": "Fixed.", "author": "cescoffier", "createdAt": "2020-02-20T16:27:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2NTE2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "ffb89d55781f5e28357a251ea5c85dcd31706d9f", "chunk": "diff --git a/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/reactive/ReactiveMongoCollection.java b/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/reactive/ReactiveMongoCollection.java\ndeleted file mode 100644\nindex 33616ec115..0000000000\n--- a/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/reactive/ReactiveMongoCollection.java\n+++ /dev/null\n\n@@ -1,1410 +0,0 @@\n-package io.quarkus.mongodb.reactive;\n-\n-import java.util.List;\n-\n-import org.bson.Document;\n-import org.bson.codecs.configuration.CodecRegistry;\n-import org.bson.conversions.Bson;\n-\n-import com.mongodb.MongoNamespace;\n-import com.mongodb.bulk.BulkWriteResult;\n-import com.mongodb.client.model.BulkWriteOptions;\n-import com.mongodb.client.model.CountOptions;\n-import com.mongodb.client.model.CreateIndexOptions;\n-import com.mongodb.client.model.DeleteOptions;\n-import com.mongodb.client.model.DropIndexOptions;\n-import com.mongodb.client.model.EstimatedDocumentCountOptions;\n-import com.mongodb.client.model.FindOneAndDeleteOptions;\n-import com.mongodb.client.model.FindOneAndReplaceOptions;\n-import com.mongodb.client.model.FindOneAndUpdateOptions;\n-import com.mongodb.client.model.IndexModel;\n-import com.mongodb.client.model.IndexOptions;\n-import com.mongodb.client.model.InsertManyOptions;\n-import com.mongodb.client.model.InsertOneOptions;\n-import com.mongodb.client.model.RenameCollectionOptions;\n-import com.mongodb.client.model.ReplaceOptions;\n-import com.mongodb.client.model.UpdateOptions;\n-import com.mongodb.client.model.WriteModel;\n-import com.mongodb.client.model.changestream.ChangeStreamDocument;\n-import com.mongodb.client.result.DeleteResult;\n-import com.mongodb.client.result.UpdateResult;\n-import com.mongodb.reactivestreams.client.ClientSession;\n-\n-import io.quarkus.mongodb.AggregateOptions;\n-import io.quarkus.mongodb.ChangeStreamOptions;\n-import io.quarkus.mongodb.DistinctOptions;\n-import io.quarkus.mongodb.FindOptions;\n-import io.quarkus.mongodb.MapReduceOptions;\n-import io.smallrye.mutiny.Multi;\n-import io.smallrye.mutiny.Uni;\n-\n-/**\n- * A reactive API to interact with a Mongo collection.\n- *\n- * @param <T> The type that this collection will encode documents from and decode documents to.\n- * @since 1.0\n- */\n-public interface ReactiveMongoCollection<T> {\n-\n-    /**\n-     * Gets the namespace of this collection.\n-     *\n-     * @return the namespace\n-     */\n-    MongoNamespace getNamespace();\n-\n-    /**\n-     * Get the class of documents stored in this collection.\n-     *\n-     * @return the class\n-     */\n-    Class<T> getDocumentClass();\n-\n-    /**\n-     * Gets an estimate of the count of documents in a collection using collection metadata.\n-     *\n-     * @return n {@link Uni} completed with the estimated number of documents\n-     */\n-    Uni<Long> estimatedDocumentCount();\n-\n-    /**\n-     * Gets an estimate of the count of documents in a collection using collection metadata.\n-     *\n-     * @param options the options describing the count\n-     * @return n {@link Uni} completed with the estimated number of documents\n-     */\n-    Uni<Long> estimatedDocumentCount(EstimatedDocumentCountOptions options);\n-\n-    /**\n-     * Counts the number of documents in the collection.\n-     *\n-     * @return n {@link Uni} completed with the number of documents\n-     */\n-    Uni<Long> countDocuments();\n-\n-    /**\n-     * Counts the number of documents in the collection according to the given options.\n-     *\n-     * @param filter the query filter\n-     * @return n {@link Uni} completed with the number of documents\n-     */\n-    Uni<Long> countDocuments(Bson filter);\n-\n-    /**\n-     * Counts the number of documents in the collection according to the given options.\n-     *\n-     * @param filter the query filter\n-     * @param options the options describing the count\n-     * @return n {@link Uni} completed with the number of documents\n-     */\n-    Uni<Long> countDocuments(Bson filter, CountOptions options);\n-\n-    /**\n-     * Counts the number of documents in the collection according to the given options.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @return n {@link Uni} completed with the number of documents\n-     */\n-    Uni<Long> countDocuments(ClientSession clientSession);\n-\n-    /**\n-     * Counts the number of documents in the collection according to the given options.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter\n-     * @return n {@link Uni} completed with the number of documents\n-     */\n-    Uni<Long> countDocuments(ClientSession clientSession, Bson filter);\n-\n-    /**\n-     * Counts the number of documents in the collection according to the given options.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter\n-     * @param options the options describing the count\n-     * @return n {@link Uni} completed with the number of documents\n-     */\n-    Uni<Long> countDocuments(ClientSession clientSession, Bson filter, CountOptions options);\n-\n-    /**\n-     * Gets the distinct values of the specified field name.\n-     *\n-     * @param fieldName the field name*\n-     * @param clazz the default class to cast any distinct items into.\n-     * @param <D> the target type of the iterable.\n-     * @return a multi emitting the sequence of distinct values\n-     */\n-    <D> Multi<D> distinct(String fieldName, Class<D> clazz);\n-\n-    /**\n-     * Gets the distinct values of the specified field name.\n-     *\n-     * @param fieldName the field name\n-     * @param filter the query filter\n-     * @param clazz the default class to cast any distinct items into.\n-     * @param <D> the target type of the iterable.\n-     * @return a multi emitting the sequence of distinct values\n-     */\n-    <D> Multi<D> distinct(String fieldName, Bson filter, Class<D> clazz);\n-\n-    /**\n-     * Gets the distinct values of the specified field name.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param fieldName the field name\n-     * @param clazz the default class to cast any distinct items into.\n-     * @param <D> the target type of the iterable.\n-     * @return a multi emitting the sequence of distinct values\n-     */\n-    <D> Multi<D> distinct(ClientSession clientSession, String fieldName, Class<D> clazz);\n-\n-    /**\n-     * Gets the distinct values of the specified field name.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param fieldName the field name\n-     * @param filter the query filter\n-     * @param clazz the default class to cast any distinct items into.\n-     * @param <D> the target type of the iterable.\n-     * @return a multi emitting the sequence of distinct values\n-     */\n-    <D> Multi<D> distinct(ClientSession clientSession, String fieldName, Bson filter, Class<D> clazz);\n-\n-    /**\n-     * Gets the distinct values of the specified field name.\n-     *\n-     * @param fieldName the field name\n-     * @param clazz the default class to cast any distinct items into.\n-     * @param <D> the target type of the iterable.\n-     * @param options the stream options\n-     * @return a multi emitting the sequence of distinct values\n-     */\n-    <D> Multi<D> distinct(String fieldName, Class<D> clazz, DistinctOptions options);\n-\n-    /**\n-     * Gets the distinct values of the specified field name.\n-     *\n-     * @param fieldName the field name\n-     * @param filter the query filter\n-     * @param clazz the default class to cast any distinct items into.\n-     * @param <D> the target type of the iterable.\n-     * @param options the stream options\n-     * @return a multi emitting the sequence of distinct values\n-     */\n-    <D> Multi<D> distinct(String fieldName, Bson filter, Class<D> clazz, DistinctOptions options);\n-\n-    /**\n-     * Gets the distinct values of the specified field name.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param fieldName the field name\n-     * @param clazz the default class to cast any distinct items into.\n-     * @param <D> the target type of the iterable.\n-     * @param options the stream options\n-     * @return a multi emitting the sequence of distinct values\n-     */\n-    <D> Multi<D> distinct(ClientSession clientSession, String fieldName, Class<D> clazz,\n-            DistinctOptions options);\n-\n-    /**\n-     * Gets the distinct values of the specified field name.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param fieldName the field name\n-     * @param filter the query filter\n-     * @param clazz the default class to cast any distinct items into.\n-     * @param <D> the target type of the iterable.\n-     * @param options the stream options\n-     * @return a multi emitting the sequence of distinct values\n-     */\n-    <D> Multi<D> distinct(ClientSession clientSession, String fieldName, Bson filter, Class<D> clazz,\n-            DistinctOptions options);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    Multi<T> find();\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    <D> Multi<D> find(Class<D> clazz);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param filter the query filter\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    Multi<T> find(Bson filter);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param filter the query filter\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    <D> Multi<D> find(Bson filter, Class<D> clazz);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    Multi<T> find(ClientSession clientSession);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    <D> Multi<D> find(ClientSession clientSession, Class<D> clazz);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    Multi<T> find(ClientSession clientSession, Bson filter);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    <D> Multi<D> find(ClientSession clientSession, Bson filter, Class<D> clazz);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param options the stream options\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    Multi<T> find(FindOptions options);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @param options the stream options\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    <D> Multi<D> find(Class<D> clazz, FindOptions options);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param filter the query filter\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    Multi<T> find(Bson filter, FindOptions options);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param filter the query filter\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @param options the stream options\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    <D> Multi<D> find(Bson filter, Class<D> clazz, FindOptions options);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param options the stream options\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    Multi<T> find(ClientSession clientSession, FindOptions options);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @param options the stream options\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    <D> Multi<D> find(ClientSession clientSession, Class<D> clazz, FindOptions options);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter\n-     * @param options the stream options\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    Multi<T> find(ClientSession clientSession, Bson filter, FindOptions options);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @param options the stream options\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    <D> Multi<D> find(ClientSession clientSession, Bson filter, Class<D> clazz, FindOptions options);\n-\n-    /**\n-     * Aggregates documents according to the specified aggregation pipeline.\n-     *\n-     * @param pipeline the aggregate pipeline\n-     * @return a stream containing the result of the aggregation operation\n-     */\n-    Multi<Document> aggregate(List<? extends Bson> pipeline);\n-\n-    /**\n-     * Aggregates documents according to the specified aggregation pipeline.\n-     *\n-     * @param pipeline the aggregate pipeline\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return a stream containing the result of the aggregation operation\n-     */\n-    <D> Multi<D> aggregate(List<? extends Bson> pipeline, Class<D> clazz);\n-\n-    /**\n-     * Aggregates documents according to the specified aggregation pipeline.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param pipeline the aggregate pipeline\n-     * @return a stream containing the result of the aggregation operation\n-     */\n-    Multi<Document> aggregate(ClientSession clientSession, List<? extends Bson> pipeline);\n-\n-    /**\n-     * Aggregates documents according to the specified aggregation pipeline.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param pipeline the aggregate pipeline\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return a stream containing the result of the aggregation operation\n-     */\n-    <D> Multi<D> aggregate(ClientSession clientSession, List<? extends Bson> pipeline, Class<D> clazz);\n-\n-    //\n-\n-    /**\n-     * Aggregates documents according to the specified aggregation pipeline.\n-     *\n-     * @param pipeline the aggregate pipeline\n-     * @param options the stream options\n-     * @return a stream containing the result of the aggregation operation\n-     */\n-    Multi<Document> aggregate(List<? extends Bson> pipeline, AggregateOptions options);\n-\n-    /**\n-     * Aggregates documents according to the specified aggregation pipeline.\n-     *\n-     * @param pipeline the aggregate pipeline\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @param options the stream options\n-     * @return a stream containing the result of the aggregation operation\n-     */\n-    <D> Multi<D> aggregate(List<? extends Bson> pipeline, Class<D> clazz, AggregateOptions options);\n-\n-    /**\n-     * Aggregates documents according to the specified aggregation pipeline.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param pipeline the aggregate pipeline\n-     * @param options the stream options\n-     * @return a stream containing the result of the aggregation operation\n-     */\n-    Multi<Document> aggregate(ClientSession clientSession, List<? extends Bson> pipeline,\n-            AggregateOptions options);\n-\n-    /**\n-     * Aggregates documents according to the specified aggregation pipeline.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param pipeline the aggregate pipeline\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @param options the stream options\n-     * @return a stream containing the result of the aggregation operation\n-     */\n-    <D> Multi<D> aggregate(ClientSession clientSession, List<? extends Bson> pipeline, Class<D> clazz,\n-            AggregateOptions options);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @return the stream of changes\n-     */\n-    Multi<ChangeStreamDocument<Document>> watch();\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return the stream of changes\n-     */\n-    <D> Multi<ChangeStreamDocument<D>> watch(Class<D> clazz);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param pipeline the aggregation pipeline to apply to the change stream\n-     * @return the stream of changes\n-     */\n-    Multi<ChangeStreamDocument<Document>> watch(List<? extends Bson> pipeline);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param pipeline the aggregation pipeline to apply to the change stream\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return the stream of changes\n-     */\n-    <D> Multi<ChangeStreamDocument<D>> watch(List<? extends Bson> pipeline, Class<D> clazz);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @return the stream of changes\n-     */\n-    Multi<ChangeStreamDocument<Document>> watch(ClientSession clientSession);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return the stream of changes\n-     */\n-    <D> Multi<ChangeStreamDocument<D>> watch(ClientSession clientSession, Class<D> clazz);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param pipeline the aggregation pipeline to apply to the change stream\n-     * @return the stream of changes\n-     */\n-    Multi<ChangeStreamDocument<Document>> watch(ClientSession clientSession, List<? extends Bson> pipeline);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param pipeline the aggregation pipeline to apply to the change stream\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return the stream of changes\n-     */\n-    <D> Multi<ChangeStreamDocument<D>> watch(ClientSession clientSession, List<? extends Bson> pipeline,\n-            Class<D> clazz);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param options the stream options\n-     * @return the stream of changes\n-     */\n-    Multi<ChangeStreamDocument<Document>> watch(ChangeStreamOptions options);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @param options the stream options\n-     * @return the stream of changes\n-     */\n-    <D> Multi<ChangeStreamDocument<D>> watch(Class<D> clazz,\n-            ChangeStreamOptions options);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param pipeline the aggregation pipeline to apply to the change stream\n-     * @param options the stream options\n-     * @return the stream of changes\n-     */\n-    Multi<ChangeStreamDocument<Document>> watch(List<? extends Bson> pipeline,\n-            ChangeStreamOptions options);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param pipeline the aggregation pipeline to apply to the change stream\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @param options the stream options\n-     * @return the stream of changes\n-     */\n-    <D> Multi<ChangeStreamDocument<D>> watch(List<? extends Bson> pipeline, Class<D> clazz,\n-            ChangeStreamOptions options);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param options the stream options\n-     * @return the stream of changes\n-     */\n-    Multi<ChangeStreamDocument<Document>> watch(ClientSession clientSession,\n-            ChangeStreamOptions options);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @param options the stream options\n-     * @return the stream of changes\n-     */\n-    <D> Multi<ChangeStreamDocument<D>> watch(ClientSession clientSession, Class<D> clazz,\n-            ChangeStreamOptions options);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param pipeline the aggregation pipeline to apply to the change stream\n-     * @param options the stream options\n-     * @return the stream of changes\n-     */\n-    Multi<ChangeStreamDocument<Document>> watch(ClientSession clientSession, List<? extends Bson> pipeline,\n-            ChangeStreamOptions options);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param pipeline the aggregation pipeline to apply to the change stream\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @param options the stream options\n-     * @return the stream of changes\n-     */\n-    <D> Multi<ChangeStreamDocument<D>> watch(ClientSession clientSession, List<? extends Bson> pipeline,\n-            Class<D> clazz, ChangeStreamOptions options);\n-\n-    Multi<Document> mapReduce(String mapFunction, String reduceFunction);\n-\n-    <D> Multi<D> mapReduce(String mapFunction, String reduceFunction, Class<D> clazz);\n-\n-    Multi<Document> mapReduce(ClientSession clientSession, String mapFunction, String reduceFunction);\n-\n-    <D> Multi<D> mapReduce(ClientSession clientSession, String mapFunction, String reduceFunction,\n-            Class<D> clazz);\n-\n-    Multi<Document> mapReduce(String mapFunction, String reduceFunction, MapReduceOptions options);\n-\n-    <D> Multi<D> mapReduce(String mapFunction, String reduceFunction, Class<D> clazz,\n-            MapReduceOptions options);\n-\n-    Multi<Document> mapReduce(ClientSession clientSession, String mapFunction, String reduceFunction,\n-            MapReduceOptions options);\n-\n-    <D> Multi<D> mapReduce(ClientSession clientSession, String mapFunction, String reduceFunction,\n-            Class<D> clazz,\n-            MapReduceOptions options);\n-\n-    /**\n-     * Executes a mix of inserts, updates, replaces, and deletes.\n-     *\n-     * @param requests the writes to execute\n-     * @return n {@link Uni} receiving the {@link BulkWriteResult}\n-     */\n-    Uni<BulkWriteResult> bulkWrite(List<? extends WriteModel<? extends T>> requests);\n-\n-    /**\n-     * Executes a mix of inserts, updates, replaces, and deletes.\n-     *\n-     * @param requests the writes to execute\n-     * @param options the options to apply to the bulk write operation\n-     * @return n {@link Uni} receiving the {@link BulkWriteResult}\n-     */\n-    Uni<BulkWriteResult> bulkWrite(List<? extends WriteModel<? extends T>> requests,\n-            BulkWriteOptions options);\n-\n-    /**\n-     * Executes a mix of inserts, updates, replaces, and deletes.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param requests the writes to execute\n-     * @return n {@link Uni} receiving the {@link BulkWriteResult}\n-     */\n-    Uni<BulkWriteResult> bulkWrite(ClientSession clientSession,\n-            List<? extends WriteModel<? extends T>> requests);\n-\n-    /**\n-     * Executes a mix of inserts, updates, replaces, and deletes.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param requests the writes to execute\n-     * @param options the options to apply to the bulk write operation\n-     * @return n {@link Uni} receiving the {@link BulkWriteResult}\n-     */\n-    Uni<BulkWriteResult> bulkWrite(ClientSession clientSession,\n-            List<? extends WriteModel<? extends T>> requests,\n-            BulkWriteOptions options);\n-\n-    /**\n-     * Inserts the provided document. If the document is missing an identifier, the driver should generate one.\n-     *\n-     * @param document the document to insert\n-     * @return n {@link Uni} completed successfully when the operation completes, or completed exceptionally with\n-     *         either a {@link com.mongodb.DuplicateKeyException} or {@link com.mongodb.MongoException}\n-     */\n-    Uni<Void> insertOne(T document);\n-\n-    /**\n-     * Inserts the provided document. If the document is missing an identifier, the driver should generate one.\n-     *\n-     * @param document the document to insert\n-     * @param options the options to apply to the operation\n-     * @return n {@link Uni} completed successfully when the operation completes, or completed exceptionally with\n-     *         either a {@link com.mongodb.DuplicateKeyException} or {@link com.mongodb.MongoException}\n-     */\n-    Uni<Void> insertOne(T document, InsertOneOptions options);\n-\n-    /**\n-     * Inserts the provided document. If the document is missing an identifier, the driver should generate one.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param document the document to insert\n-     * @return n {@link Uni} completed successfully when the operation completes, or completed exceptionally with\n-     *         either a {@link com.mongodb.DuplicateKeyException} or {@link com.mongodb.MongoException}\n-     */\n-    Uni<Void> insertOne(ClientSession clientSession, T document);\n-\n-    /**\n-     * Inserts the provided document. If the document is missing an identifier, the driver should generate one.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param document the document to insert\n-     * @param options the options to apply to the operation\n-     * @return n {@link Uni} completed successfully when the operation completes, or completed exceptionally with\n-     *         either a {@link com.mongodb.DuplicateKeyException} or {@link com.mongodb.MongoException}\n-     */\n-    Uni<Void> insertOne(ClientSession clientSession, T document, InsertOneOptions options);\n-\n-    /**\n-     * Inserts a batch of documents. The preferred way to perform bulk inserts is to use the BulkWrite API.\n-     *\n-     * @param documents the documents to insert\n-     * @return n {@link Uni} completed successfully when the operation completes, or completed exceptionally with\n-     *         either a {@link com.mongodb.DuplicateKeyException} or {@link com.mongodb.MongoException}\n-     */\n-    Uni<Void> insertMany(List<? extends T> documents);\n-\n-    /**\n-     * Inserts a batch of documents. The preferred way to perform bulk inserts is to use the BulkWrite API.\n-     *\n-     * @param documents the documents to insert\n-     * @param options the options to apply to the operation\n-     * @return n {@link Uni} completed successfully when the operation completes, or completed exceptionally with\n-     *         either a {@link com.mongodb.DuplicateKeyException} or {@link com.mongodb.MongoException}\n-     */\n-    Uni<Void> insertMany(List<? extends T> documents, InsertManyOptions options);\n-\n-    /**\n-     * Inserts a batch of documents. The preferred way to perform bulk inserts is to use the BulkWrite API.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param documents the documents to insert\n-     * @return n {@link Uni} completed successfully when the operation completes, or completed exceptionally with\n-     *         either a {@link com.mongodb.DuplicateKeyException} or {@link com.mongodb.MongoException}\n-     */\n-    Uni<Void> insertMany(ClientSession clientSession, List<? extends T> documents);\n-\n-    /**\n-     * Inserts a batch of documents. The preferred way to perform bulk inserts is to use the BulkWrite API.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param documents the documents to insert\n-     * @param options the options to apply to the operation\n-     * @return n {@link Uni} completed successfully when the operation completes, or completed exceptionally with\n-     *         either a {@link com.mongodb.DuplicateKeyException} or {@link com.mongodb.MongoException}\n-     */\n-    Uni<Void> insertMany(ClientSession clientSession, List<? extends T> documents,\n-            InsertManyOptions options);\n-\n-    /**\n-     * Removes at most one document from the collection that matches the given filter.\n-     * If no documents match, the collection is not modified.\n-     *\n-     * @param filter the query filter to apply the the delete operation\n-     * @return n {@link Uni} receiving the {@link DeleteResult} or completed exceptionally with a\n-     *         {@link com.mongodb.MongoException}\n-     */\n-    Uni<DeleteResult> deleteOne(Bson filter);\n-\n-    /**\n-     * Removes at most one document from the collection that matches the given filter.\n-     * If no documents match, the collection is not modified.\n-     *\n-     * @param filter the query filter to apply the the delete operation\n-     * @param options the options to apply to the delete operation\n-     * @return n {@link Uni} receiving the {@link DeleteResult} or completed exceptionally with a\n-     *         {@link com.mongodb.MongoException}\n-     */\n-    Uni<DeleteResult> deleteOne(Bson filter, DeleteOptions options);\n-\n-    /**\n-     * Removes at most one document from the collection that matches the given filter.\n-     * If no documents match, the collection is not modified.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter to apply the the delete operation\n-     * @return n {@link Uni} receiving the {@link DeleteResult} or completed exceptionally with a\n-     *         {@link com.mongodb.MongoException}\n-     */\n-    Uni<DeleteResult> deleteOne(ClientSession clientSession, Bson filter);\n-\n-    /**\n-     * Removes at most one document from the collection that matches the given filter.\n-     * If no documents match, the collection is not modified.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter to apply the the delete operation\n-     * @param options the options to apply to the delete operation\n-     * @return n {@link Uni} receiving the {@link DeleteResult} or completed exceptionally with a\n-     *         {@link com.mongodb.MongoException}\n-     */\n-    Uni<DeleteResult> deleteOne(ClientSession clientSession, Bson filter, DeleteOptions options);\n-\n-    /**\n-     * Removes all documents from the collection that match the given query filter. If no documents match, the\n-     * collection is not modified.\n-     *\n-     * @param filter the query filter to apply the the delete operation\n-     * @return n {@link Uni} receiving the {@link DeleteResult} or completed exceptionally with a\n-     *         {@link com.mongodb.MongoException}\n-     */\n-    Uni<DeleteResult> deleteMany(Bson filter);\n-\n-    /**\n-     * Removes all documents from the collection that match the given query filter. If no documents match, the\n-     * collection is not modified.\n-     *\n-     * @param filter the query filter to apply the the delete operation\n-     * @param options the options to apply to the delete operation\n-     * @return n {@link Uni} receiving the {@link DeleteResult} or completed exceptionally with a\n-     *         {@link com.mongodb.MongoException}\n-     */\n-    Uni<DeleteResult> deleteMany(Bson filter, DeleteOptions options);\n-\n-    /**\n-     * Removes all documents from the collection that match the given query filter. If no documents match, the\n-     * collection is not modified.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter to apply the the delete operation\n-     * @return n {@link Uni} receiving the {@link DeleteResult} or completed exceptionally with a\n-     *         {@link com.mongodb.MongoException}\n-     */\n-    Uni<DeleteResult> deleteMany(ClientSession clientSession, Bson filter);\n-\n-    /**\n-     * Removes all documents from the collection that match the given query filter. If no documents match, the\n-     * collection is not modified.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter to apply the the delete operation\n-     * @param options the options to apply to the delete operation\n-     * @return n {@link Uni} receiving the {@link DeleteResult} or completed exceptionally with a\n-     *         {@link com.mongodb.MongoException}\n-     */\n-    Uni<DeleteResult> deleteMany(ClientSession clientSession, Bson filter, DeleteOptions options);\n-\n-    /**\n-     * Replace a document in the collection according to the specified arguments.\n-     *\n-     * @param filter the query filter to apply the the replace operation\n-     * @param replacement the replacement document\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> replaceOne(Bson filter, T replacement);\n-\n-    /**\n-     * Replace a document in the collection according to the specified arguments.\n-     *\n-     * @param filter the query filter to apply the the replace operation\n-     * @param replacement the replacement document\n-     * @param options the options to apply to the replace operation\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> replaceOne(Bson filter, T replacement, ReplaceOptions options);\n-\n-    /**\n-     * Replace a document in the collection according to the specified arguments.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter to apply the the replace operation\n-     * @param replacement the replacement document\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> replaceOne(ClientSession clientSession, Bson filter, T replacement);\n-\n-    /**\n-     * Replace a document in the collection according to the specified arguments.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter to apply the the replace operation\n-     * @param replacement the replacement document\n-     * @param options the options to apply to the replace operation\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> replaceOne(ClientSession clientSession, Bson filter, T replacement,\n-            ReplaceOptions options);\n-\n-    /**\n-     * Update a single document in the collection according to the specified arguments.\n-     *\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> updateOne(Bson filter, Bson update);\n-\n-    /**\n-     * Update a single document in the collection according to the specified arguments.\n-     *\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @param options the options to apply to the update operation\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> updateOne(Bson filter, Bson update, UpdateOptions options);\n-\n-    /**\n-     * Update a single document in the collection according to the specified arguments.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> updateOne(ClientSession clientSession, Bson filter, Bson update);\n-\n-    /**\n-     * Update a single document in the collection according to the specified arguments.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @param options the options to apply to the update operation\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> updateOne(ClientSession clientSession, Bson filter, Bson update,\n-            UpdateOptions options);\n-\n-    /**\n-     * Update all documents in the collection according to the specified arguments.\n-     *\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> updateMany(Bson filter, Bson update);\n-\n-    /**\n-     * Update all documents in the collection according to the specified arguments.\n-     *\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @param options the options to apply to the update operation\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> updateMany(Bson filter, Bson update, UpdateOptions options);\n-\n-    /**\n-     * Update all documents in the collection according to the specified arguments.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> updateMany(ClientSession clientSession, Bson filter, Bson update);\n-\n-    /**\n-     * Update all documents in the collection according to the specified arguments.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @param options the options to apply to the update operation\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> updateMany(ClientSession clientSession, Bson filter, Bson update,\n-            UpdateOptions options);\n-\n-    /**\n-     * Atomically find a document and remove it.\n-     *\n-     * @param filter the query filter to find the document with\n-     * @return n {@link Uni} completed with the document that was removed. If no documents matched the query filter,\n-     *         then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndDelete(Bson filter);\n-\n-    /**\n-     * Atomically find a document and remove it.\n-     *\n-     * @param filter the query filter to find the document with\n-     * @param options the options to apply to the operation\n-     * @return n {@link Uni} completed with the document that was removed. If no documents matched the query filter,\n-     *         then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndDelete(Bson filter, FindOneAndDeleteOptions options);\n-\n-    /**\n-     * Atomically find a document and remove it.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter to find the document with\n-     * @return n {@link Uni} completed with the document that was removed. If no documents matched the query filter,\n-     *         then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndDelete(ClientSession clientSession, Bson filter);\n-\n-    /**\n-     * Atomically find a document and remove it.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter to find the document with\n-     * @param options the options to apply to the operation\n-     * @return n {@link Uni} completed with the document that was removed. If no documents matched the query filter,\n-     *         then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndDelete(ClientSession clientSession, Bson filter, FindOneAndDeleteOptions options);\n-\n-    /**\n-     * Atomically find a document and replace it.\n-     *\n-     * @param filter the query filter to apply the the replace operation\n-     * @param replacement the replacement document\n-     * @return n {@link Uni} completed with the document that was replaced. Depending on the value of the\n-     *         {@code returnOriginal}\n-     *         property, this will either be the document as it was before the update or as it is after the update. If no\n-     *         documents matched the\n-     *         query filter, then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndReplace(Bson filter, T replacement);\n-\n-    /**\n-     * Atomically find a document and replace it.\n-     *\n-     * @param filter the query filter to apply the the replace operation\n-     * @param replacement the replacement document\n-     * @param options the options to apply to the operation\n-     * @return n {@link Uni} completed with the document that was replaced. Depending on the value of the\n-     *         {@code returnOriginal}\n-     *         property, this will either be the document as it was before the update or as it is after the update. If no\n-     *         documents matched the\n-     *         query filter, then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndReplace(Bson filter, T replacement, FindOneAndReplaceOptions options);\n-\n-    /**\n-     * Atomically find a document and replace it.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter to apply the the replace operation\n-     * @param replacement the replacement document\n-     * @return n {@link Uni} completed with the document that was replaced. Depending on the value of the\n-     *         {@code returnOriginal}\n-     *         property, this will either be the document as it was before the update or as it is after the update. If no\n-     *         documents matched the\n-     *         query filter, then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndReplace(ClientSession clientSession, Bson filter, T replacement);\n-\n-    /**\n-     * Atomically find a document and replace it.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter to apply the the replace operation\n-     * @param replacement the replacement document\n-     * @param options the options to apply to the operation\n-     * @return n {@link Uni} completed with the document that was replaced. Depending on the value of the\n-     *         {@code returnOriginal}\n-     *         property, this will either be the document as it was before the update or as it is after the update. If no\n-     *         documents matched the\n-     *         query filter, then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndReplace(ClientSession clientSession, Bson filter, T replacement,\n-            FindOneAndReplaceOptions options);\n-\n-    /**\n-     * Atomically find a document and update it.\n-     *\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @return n {@link Uni} completed with the document that was updated. Depending on the value of the\n-     *         {@code returnOriginal}\n-     *         property, this will either be the document as it was before the update or as it is after the update. If no\n-     *         documents matched the\n-     *         query filter, then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndUpdate(Bson filter, Bson update);\n-\n-    /**\n-     * Atomically find a document and update it.\n-     *\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @param options the options to apply to the operation\n-     * @return n {@link Uni} completed with the document that was updated. Depending on the value of the\n-     *         {@code returnOriginal}\n-     *         property, this will either be the document as it was before the update or as it is after the update. If no\n-     *         documents matched the\n-     *         query filter, then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndUpdate(Bson filter, Bson update, FindOneAndUpdateOptions options);\n-\n-    /**\n-     * Atomically find a document and update it.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @return n {@link Uni} completed with the document that was updated. Depending on the value of the\n-     *         {@code returnOriginal}\n-     *         property, this will either be the document as it was before the update or as it is after the update. If no\n-     *         documents matched the\n-     *         query filter, then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndUpdate(ClientSession clientSession, Bson filter, Bson update);\n-\n-    /**\n-     * Atomically find a document and update it.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @param options the options to apply to the operation\n-     * @return n {@link Uni} completed with the document that was updated. Depending on the value of the\n-     *         {@code returnOriginal}\n-     *         property, this will either be the document as it was before the update or as it is after the update. If no\n-     *         documents matched the\n-     *         query filter, then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndUpdate(ClientSession clientSession, Bson filter, Bson update,\n-            FindOneAndUpdateOptions options);\n-\n-    /**\n-     * Drops this collection from the database.\n-     *\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> drop();\n-\n-    /**\n-     * Drops this collection from the database.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> drop(ClientSession clientSession);\n-\n-    /**\n-     * Creates an index.\n-     *\n-     * @param key an object describing the index key(s), which may not be null.\n-     * @return n {@link Uni} receiving the created index name.\n-     */\n-    Uni<String> createIndex(Bson key);\n-\n-    /**\n-     * Creates an index.\n-     *\n-     * @param key an object describing the index key(s), which may not be null.\n-     * @param options the options for the index\n-     * @return n {@link Uni} receiving the created index name.\n-     */\n-    Uni<String> createIndex(Bson key, IndexOptions options);\n-\n-    /**\n-     * Creates an index.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param key an object describing the index key(s), which may not be null.\n-     * @return n {@link Uni} receiving the created index name.\n-     */\n-    Uni<String> createIndex(ClientSession clientSession, Bson key);\n-\n-    /**\n-     * Creates an index.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param key an object describing the index key(s), which may not be null.\n-     * @param options the options for the index\n-     * @return n {@link Uni} receiving the created index name.\n-     */\n-    Uni<String> createIndex(ClientSession clientSession, Bson key, IndexOptions options);\n-\n-    /**\n-     * Create multiple indexes.\n-     *\n-     * @param indexes the list of indexes\n-     * @return n {@link Uni} completed with the result when the operation is done. The redeemed list contains the\n-     *         created index names.\n-     */\n-    Uni<List<String>> createIndexes(List<IndexModel> indexes);\n-\n-    /**\n-     * Create multiple indexes.\n-     *\n-     * @param indexes the list of indexes\n-     * @param createIndexOptions options to use when creating indexes\n-     * @return n {@link Uni} completed with the result when the operation is done. The redeemed list contains the\n-     *         created index names.\n-     */\n-    Uni<List<String>> createIndexes(List<IndexModel> indexes, CreateIndexOptions createIndexOptions);\n-\n-    /**\n-     * Create multiple indexes.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param indexes the list of indexes\n-     * @return n {@link Uni} completed with the result when the operation is done. The redeemed list contains the\n-     *         created index names.\n-     */\n-    Uni<List<String>> createIndexes(ClientSession clientSession, List<IndexModel> indexes);\n-\n-    /**\n-     * Create multiple indexes.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param indexes the list of indexes\n-     * @param createIndexOptions options to use when creating indexes\n-     * @return n {@link Uni} completed with the result when the operation is done. The redeemed list contains the\n-     *         created index names.\n-     */\n-    Uni<List<String>> createIndexes(ClientSession clientSession, List<IndexModel> indexes,\n-            CreateIndexOptions createIndexOptions);\n-\n-    /**\n-     * Get all the indexes in this collection.\n-     *\n-     * @return the stream of indexes\n-     */\n-    Multi<Document> listIndexes();\n-\n-    /**\n-     * Get all the indexes in this collection.\n-     *\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return the stream of indexes\n-     */\n-    <D> Multi<D> listIndexes(Class<D> clazz);\n-\n-    /**\n-     * Get all the indexes in this collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @return the stream of indexes\n-     */\n-    Multi<Document> listIndexes(ClientSession clientSession);\n-\n-    /**\n-     * Get all the indexes in this collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return the stream of indexes\n-     */\n-    <D> Multi<D> listIndexes(ClientSession clientSession, Class<D> clazz);\n-\n-    /**\n-     * Drops the index given the keys used to create it.\n-     *\n-     * @param indexName the name of the index to remove\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndex(String indexName);\n-\n-    /**\n-     * Drops the index given the keys used to create it.\n-     *\n-     * @param keys the keys of the index to remove\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndex(Bson keys);\n-\n-    /**\n-     * Drops the index given the keys used to create it.\n-     *\n-     * @param indexName the name of the index to remove\n-     * @param dropIndexOptions options to use when dropping indexes\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndex(String indexName, DropIndexOptions dropIndexOptions);\n-\n-    /**\n-     * Drops the index given the keys used to create it.\n-     *\n-     * @param keys the keys of the index to remove\n-     * @param dropIndexOptions options to use when dropping indexes\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndex(Bson keys, DropIndexOptions dropIndexOptions);\n-\n-    /**\n-     * Drops the index given the keys used to create it.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param indexName the name of the index to remove\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndex(ClientSession clientSession, String indexName);\n-\n-    /**\n-     * Drops the index given the keys used to create it.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param keys the keys of the index to remove\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndex(ClientSession clientSession, Bson keys);\n-\n-    /**\n-     * Drops the index given the keys used to create it.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param indexName the name of the index to remove\n-     * @param dropIndexOptions options to use when dropping indexes\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndex(ClientSession clientSession, String indexName, DropIndexOptions dropIndexOptions);\n-\n-    /**\n-     * Drops the index given the keys used to create it.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param keys the keys of the index to remove\n-     * @param dropIndexOptions options to use when dropping indexes\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndex(ClientSession clientSession, Bson keys, DropIndexOptions dropIndexOptions);\n-\n-    /**\n-     * Drop all the indexes on this collection, except for the default on _id.\n-     *\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndexes();\n-\n-    /**\n-     * Drop all the indexes on this collection, except for the default on _id.\n-     *\n-     * @param dropIndexOptions options to use when dropping indexes\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndexes(DropIndexOptions dropIndexOptions);\n-\n-    /**\n-     * Drop all the indexes on this collection, except for the default on _id.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndexes(ClientSession clientSession);\n-\n-    /**\n-     * Drop all the indexes on this collection, except for the default on _id.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param dropIndexOptions options to use when dropping indexes\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndexes(ClientSession clientSession, DropIndexOptions dropIndexOptions);\n-\n-    /**\n-     * Rename the collection with oldCollectionName to the newCollectionName.\n-     *\n-     * @param newCollectionNamespace the name the collection will be renamed to\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> renameCollection(MongoNamespace newCollectionNamespace);\n-\n-    /**\n-     * Rename the collection with oldCollectionName to the newCollectionName.\n-     *\n-     * @param newCollectionNamespace the name the collection will be renamed to\n-     * @param options the options for renaming a collection\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> renameCollection(MongoNamespace newCollectionNamespace, RenameCollectionOptions options);\n-\n-    /**\n-     * Rename the collection with oldCollectionName to the newCollectionName.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param newCollectionNamespace the name the collection will be renamed to\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> renameCollection(ClientSession clientSession, MongoNamespace newCollectionNamespace);\n-\n-    /**\n-     * Rename the collection with oldCollectionName to the newCollectionName.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param newCollectionNamespace the name the collection will be renamed to\n-     * @param options the options for renaming a collection\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> renameCollection(ClientSession clientSession, MongoNamespace newCollectionNamespace,\n-            RenameCollectionOptions options);\n-\n-    /**\n-     * Gets the codec registry of this collection.\n-     *\n-     * @return the codec registry\n-     */\n-    CodecRegistry getCodecRegistry();\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2NTM5NQ==", "url": "https://github.com/quarkusio/quarkus/pull/7263#discussion_r381165395", "bodyText": "Same here, missing the ain the javadoc ?", "author": "loicmathieu", "createdAt": "2020-02-19T09:21:37Z", "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/reactive/ReactiveMongoCollection.java", "diffHunk": "@@ -0,0 +1,1410 @@\n+package io.quarkus.mongodb.reactive;\n+\n+import java.util.List;\n+\n+import org.bson.Document;\n+import org.bson.codecs.configuration.CodecRegistry;\n+import org.bson.conversions.Bson;\n+\n+import com.mongodb.MongoNamespace;\n+import com.mongodb.bulk.BulkWriteResult;\n+import com.mongodb.client.model.BulkWriteOptions;\n+import com.mongodb.client.model.CountOptions;\n+import com.mongodb.client.model.CreateIndexOptions;\n+import com.mongodb.client.model.DeleteOptions;\n+import com.mongodb.client.model.DropIndexOptions;\n+import com.mongodb.client.model.EstimatedDocumentCountOptions;\n+import com.mongodb.client.model.FindOneAndDeleteOptions;\n+import com.mongodb.client.model.FindOneAndReplaceOptions;\n+import com.mongodb.client.model.FindOneAndUpdateOptions;\n+import com.mongodb.client.model.IndexModel;\n+import com.mongodb.client.model.IndexOptions;\n+import com.mongodb.client.model.InsertManyOptions;\n+import com.mongodb.client.model.InsertOneOptions;\n+import com.mongodb.client.model.RenameCollectionOptions;\n+import com.mongodb.client.model.ReplaceOptions;\n+import com.mongodb.client.model.UpdateOptions;\n+import com.mongodb.client.model.WriteModel;\n+import com.mongodb.client.model.changestream.ChangeStreamDocument;\n+import com.mongodb.client.result.DeleteResult;\n+import com.mongodb.client.result.UpdateResult;\n+import com.mongodb.reactivestreams.client.ClientSession;\n+\n+import io.quarkus.mongodb.AggregateOptions;\n+import io.quarkus.mongodb.ChangeStreamOptions;\n+import io.quarkus.mongodb.DistinctOptions;\n+import io.quarkus.mongodb.FindOptions;\n+import io.quarkus.mongodb.MapReduceOptions;\n+import io.smallrye.mutiny.Multi;\n+import io.smallrye.mutiny.Uni;\n+\n+/**\n+ * A reactive API to interact with a Mongo collection.\n+ *\n+ * @param <T> The type that this collection will encode documents from and decode documents to.\n+ * @since 1.0\n+ */\n+public interface ReactiveMongoCollection<T> {\n+\n+    /**\n+     * Gets the namespace of this collection.\n+     *\n+     * @return the namespace\n+     */\n+    MongoNamespace getNamespace();\n+\n+    /**\n+     * Get the class of documents stored in this collection.\n+     *\n+     * @return the class\n+     */\n+    Class<T> getDocumentClass();\n+\n+    /**\n+     * Gets an estimate of the count of documents in a collection using collection metadata.\n+     *\n+     * @return n {@link Uni} completed with the estimated number of documents\n+     */\n+    Uni<Long> estimatedDocumentCount();\n+\n+    /**\n+     * Gets an estimate of the count of documents in a collection using collection metadata.\n+     *\n+     * @param options the options describing the count\n+     * @return n {@link Uni} completed with the estimated number of documents", "originalCommit": "a59e3ec04c5a6f5b58734b991f143a40a39365c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA4OTcxMQ==", "url": "https://github.com/quarkusio/quarkus/pull/7263#discussion_r382089711", "bodyText": "see my previous comment...", "author": "cescoffier", "createdAt": "2020-02-20T15:52:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2NTM5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjExMjI0NA==", "url": "https://github.com/quarkusio/quarkus/pull/7263#discussion_r382112244", "bodyText": "Fixed.", "author": "cescoffier", "createdAt": "2020-02-20T16:28:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2NTM5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "ffb89d55781f5e28357a251ea5c85dcd31706d9f", "chunk": "diff --git a/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/reactive/ReactiveMongoCollection.java b/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/reactive/ReactiveMongoCollection.java\ndeleted file mode 100644\nindex 33616ec115..0000000000\n--- a/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/reactive/ReactiveMongoCollection.java\n+++ /dev/null\n\n@@ -1,1410 +0,0 @@\n-package io.quarkus.mongodb.reactive;\n-\n-import java.util.List;\n-\n-import org.bson.Document;\n-import org.bson.codecs.configuration.CodecRegistry;\n-import org.bson.conversions.Bson;\n-\n-import com.mongodb.MongoNamespace;\n-import com.mongodb.bulk.BulkWriteResult;\n-import com.mongodb.client.model.BulkWriteOptions;\n-import com.mongodb.client.model.CountOptions;\n-import com.mongodb.client.model.CreateIndexOptions;\n-import com.mongodb.client.model.DeleteOptions;\n-import com.mongodb.client.model.DropIndexOptions;\n-import com.mongodb.client.model.EstimatedDocumentCountOptions;\n-import com.mongodb.client.model.FindOneAndDeleteOptions;\n-import com.mongodb.client.model.FindOneAndReplaceOptions;\n-import com.mongodb.client.model.FindOneAndUpdateOptions;\n-import com.mongodb.client.model.IndexModel;\n-import com.mongodb.client.model.IndexOptions;\n-import com.mongodb.client.model.InsertManyOptions;\n-import com.mongodb.client.model.InsertOneOptions;\n-import com.mongodb.client.model.RenameCollectionOptions;\n-import com.mongodb.client.model.ReplaceOptions;\n-import com.mongodb.client.model.UpdateOptions;\n-import com.mongodb.client.model.WriteModel;\n-import com.mongodb.client.model.changestream.ChangeStreamDocument;\n-import com.mongodb.client.result.DeleteResult;\n-import com.mongodb.client.result.UpdateResult;\n-import com.mongodb.reactivestreams.client.ClientSession;\n-\n-import io.quarkus.mongodb.AggregateOptions;\n-import io.quarkus.mongodb.ChangeStreamOptions;\n-import io.quarkus.mongodb.DistinctOptions;\n-import io.quarkus.mongodb.FindOptions;\n-import io.quarkus.mongodb.MapReduceOptions;\n-import io.smallrye.mutiny.Multi;\n-import io.smallrye.mutiny.Uni;\n-\n-/**\n- * A reactive API to interact with a Mongo collection.\n- *\n- * @param <T> The type that this collection will encode documents from and decode documents to.\n- * @since 1.0\n- */\n-public interface ReactiveMongoCollection<T> {\n-\n-    /**\n-     * Gets the namespace of this collection.\n-     *\n-     * @return the namespace\n-     */\n-    MongoNamespace getNamespace();\n-\n-    /**\n-     * Get the class of documents stored in this collection.\n-     *\n-     * @return the class\n-     */\n-    Class<T> getDocumentClass();\n-\n-    /**\n-     * Gets an estimate of the count of documents in a collection using collection metadata.\n-     *\n-     * @return n {@link Uni} completed with the estimated number of documents\n-     */\n-    Uni<Long> estimatedDocumentCount();\n-\n-    /**\n-     * Gets an estimate of the count of documents in a collection using collection metadata.\n-     *\n-     * @param options the options describing the count\n-     * @return n {@link Uni} completed with the estimated number of documents\n-     */\n-    Uni<Long> estimatedDocumentCount(EstimatedDocumentCountOptions options);\n-\n-    /**\n-     * Counts the number of documents in the collection.\n-     *\n-     * @return n {@link Uni} completed with the number of documents\n-     */\n-    Uni<Long> countDocuments();\n-\n-    /**\n-     * Counts the number of documents in the collection according to the given options.\n-     *\n-     * @param filter the query filter\n-     * @return n {@link Uni} completed with the number of documents\n-     */\n-    Uni<Long> countDocuments(Bson filter);\n-\n-    /**\n-     * Counts the number of documents in the collection according to the given options.\n-     *\n-     * @param filter the query filter\n-     * @param options the options describing the count\n-     * @return n {@link Uni} completed with the number of documents\n-     */\n-    Uni<Long> countDocuments(Bson filter, CountOptions options);\n-\n-    /**\n-     * Counts the number of documents in the collection according to the given options.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @return n {@link Uni} completed with the number of documents\n-     */\n-    Uni<Long> countDocuments(ClientSession clientSession);\n-\n-    /**\n-     * Counts the number of documents in the collection according to the given options.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter\n-     * @return n {@link Uni} completed with the number of documents\n-     */\n-    Uni<Long> countDocuments(ClientSession clientSession, Bson filter);\n-\n-    /**\n-     * Counts the number of documents in the collection according to the given options.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter\n-     * @param options the options describing the count\n-     * @return n {@link Uni} completed with the number of documents\n-     */\n-    Uni<Long> countDocuments(ClientSession clientSession, Bson filter, CountOptions options);\n-\n-    /**\n-     * Gets the distinct values of the specified field name.\n-     *\n-     * @param fieldName the field name*\n-     * @param clazz the default class to cast any distinct items into.\n-     * @param <D> the target type of the iterable.\n-     * @return a multi emitting the sequence of distinct values\n-     */\n-    <D> Multi<D> distinct(String fieldName, Class<D> clazz);\n-\n-    /**\n-     * Gets the distinct values of the specified field name.\n-     *\n-     * @param fieldName the field name\n-     * @param filter the query filter\n-     * @param clazz the default class to cast any distinct items into.\n-     * @param <D> the target type of the iterable.\n-     * @return a multi emitting the sequence of distinct values\n-     */\n-    <D> Multi<D> distinct(String fieldName, Bson filter, Class<D> clazz);\n-\n-    /**\n-     * Gets the distinct values of the specified field name.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param fieldName the field name\n-     * @param clazz the default class to cast any distinct items into.\n-     * @param <D> the target type of the iterable.\n-     * @return a multi emitting the sequence of distinct values\n-     */\n-    <D> Multi<D> distinct(ClientSession clientSession, String fieldName, Class<D> clazz);\n-\n-    /**\n-     * Gets the distinct values of the specified field name.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param fieldName the field name\n-     * @param filter the query filter\n-     * @param clazz the default class to cast any distinct items into.\n-     * @param <D> the target type of the iterable.\n-     * @return a multi emitting the sequence of distinct values\n-     */\n-    <D> Multi<D> distinct(ClientSession clientSession, String fieldName, Bson filter, Class<D> clazz);\n-\n-    /**\n-     * Gets the distinct values of the specified field name.\n-     *\n-     * @param fieldName the field name\n-     * @param clazz the default class to cast any distinct items into.\n-     * @param <D> the target type of the iterable.\n-     * @param options the stream options\n-     * @return a multi emitting the sequence of distinct values\n-     */\n-    <D> Multi<D> distinct(String fieldName, Class<D> clazz, DistinctOptions options);\n-\n-    /**\n-     * Gets the distinct values of the specified field name.\n-     *\n-     * @param fieldName the field name\n-     * @param filter the query filter\n-     * @param clazz the default class to cast any distinct items into.\n-     * @param <D> the target type of the iterable.\n-     * @param options the stream options\n-     * @return a multi emitting the sequence of distinct values\n-     */\n-    <D> Multi<D> distinct(String fieldName, Bson filter, Class<D> clazz, DistinctOptions options);\n-\n-    /**\n-     * Gets the distinct values of the specified field name.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param fieldName the field name\n-     * @param clazz the default class to cast any distinct items into.\n-     * @param <D> the target type of the iterable.\n-     * @param options the stream options\n-     * @return a multi emitting the sequence of distinct values\n-     */\n-    <D> Multi<D> distinct(ClientSession clientSession, String fieldName, Class<D> clazz,\n-            DistinctOptions options);\n-\n-    /**\n-     * Gets the distinct values of the specified field name.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param fieldName the field name\n-     * @param filter the query filter\n-     * @param clazz the default class to cast any distinct items into.\n-     * @param <D> the target type of the iterable.\n-     * @param options the stream options\n-     * @return a multi emitting the sequence of distinct values\n-     */\n-    <D> Multi<D> distinct(ClientSession clientSession, String fieldName, Bson filter, Class<D> clazz,\n-            DistinctOptions options);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    Multi<T> find();\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    <D> Multi<D> find(Class<D> clazz);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param filter the query filter\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    Multi<T> find(Bson filter);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param filter the query filter\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    <D> Multi<D> find(Bson filter, Class<D> clazz);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    Multi<T> find(ClientSession clientSession);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    <D> Multi<D> find(ClientSession clientSession, Class<D> clazz);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    Multi<T> find(ClientSession clientSession, Bson filter);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    <D> Multi<D> find(ClientSession clientSession, Bson filter, Class<D> clazz);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param options the stream options\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    Multi<T> find(FindOptions options);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @param options the stream options\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    <D> Multi<D> find(Class<D> clazz, FindOptions options);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param filter the query filter\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    Multi<T> find(Bson filter, FindOptions options);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param filter the query filter\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @param options the stream options\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    <D> Multi<D> find(Bson filter, Class<D> clazz, FindOptions options);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param options the stream options\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    Multi<T> find(ClientSession clientSession, FindOptions options);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @param options the stream options\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    <D> Multi<D> find(ClientSession clientSession, Class<D> clazz, FindOptions options);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter\n-     * @param options the stream options\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    Multi<T> find(ClientSession clientSession, Bson filter, FindOptions options);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @param options the stream options\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    <D> Multi<D> find(ClientSession clientSession, Bson filter, Class<D> clazz, FindOptions options);\n-\n-    /**\n-     * Aggregates documents according to the specified aggregation pipeline.\n-     *\n-     * @param pipeline the aggregate pipeline\n-     * @return a stream containing the result of the aggregation operation\n-     */\n-    Multi<Document> aggregate(List<? extends Bson> pipeline);\n-\n-    /**\n-     * Aggregates documents according to the specified aggregation pipeline.\n-     *\n-     * @param pipeline the aggregate pipeline\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return a stream containing the result of the aggregation operation\n-     */\n-    <D> Multi<D> aggregate(List<? extends Bson> pipeline, Class<D> clazz);\n-\n-    /**\n-     * Aggregates documents according to the specified aggregation pipeline.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param pipeline the aggregate pipeline\n-     * @return a stream containing the result of the aggregation operation\n-     */\n-    Multi<Document> aggregate(ClientSession clientSession, List<? extends Bson> pipeline);\n-\n-    /**\n-     * Aggregates documents according to the specified aggregation pipeline.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param pipeline the aggregate pipeline\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return a stream containing the result of the aggregation operation\n-     */\n-    <D> Multi<D> aggregate(ClientSession clientSession, List<? extends Bson> pipeline, Class<D> clazz);\n-\n-    //\n-\n-    /**\n-     * Aggregates documents according to the specified aggregation pipeline.\n-     *\n-     * @param pipeline the aggregate pipeline\n-     * @param options the stream options\n-     * @return a stream containing the result of the aggregation operation\n-     */\n-    Multi<Document> aggregate(List<? extends Bson> pipeline, AggregateOptions options);\n-\n-    /**\n-     * Aggregates documents according to the specified aggregation pipeline.\n-     *\n-     * @param pipeline the aggregate pipeline\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @param options the stream options\n-     * @return a stream containing the result of the aggregation operation\n-     */\n-    <D> Multi<D> aggregate(List<? extends Bson> pipeline, Class<D> clazz, AggregateOptions options);\n-\n-    /**\n-     * Aggregates documents according to the specified aggregation pipeline.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param pipeline the aggregate pipeline\n-     * @param options the stream options\n-     * @return a stream containing the result of the aggregation operation\n-     */\n-    Multi<Document> aggregate(ClientSession clientSession, List<? extends Bson> pipeline,\n-            AggregateOptions options);\n-\n-    /**\n-     * Aggregates documents according to the specified aggregation pipeline.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param pipeline the aggregate pipeline\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @param options the stream options\n-     * @return a stream containing the result of the aggregation operation\n-     */\n-    <D> Multi<D> aggregate(ClientSession clientSession, List<? extends Bson> pipeline, Class<D> clazz,\n-            AggregateOptions options);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @return the stream of changes\n-     */\n-    Multi<ChangeStreamDocument<Document>> watch();\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return the stream of changes\n-     */\n-    <D> Multi<ChangeStreamDocument<D>> watch(Class<D> clazz);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param pipeline the aggregation pipeline to apply to the change stream\n-     * @return the stream of changes\n-     */\n-    Multi<ChangeStreamDocument<Document>> watch(List<? extends Bson> pipeline);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param pipeline the aggregation pipeline to apply to the change stream\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return the stream of changes\n-     */\n-    <D> Multi<ChangeStreamDocument<D>> watch(List<? extends Bson> pipeline, Class<D> clazz);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @return the stream of changes\n-     */\n-    Multi<ChangeStreamDocument<Document>> watch(ClientSession clientSession);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return the stream of changes\n-     */\n-    <D> Multi<ChangeStreamDocument<D>> watch(ClientSession clientSession, Class<D> clazz);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param pipeline the aggregation pipeline to apply to the change stream\n-     * @return the stream of changes\n-     */\n-    Multi<ChangeStreamDocument<Document>> watch(ClientSession clientSession, List<? extends Bson> pipeline);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param pipeline the aggregation pipeline to apply to the change stream\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return the stream of changes\n-     */\n-    <D> Multi<ChangeStreamDocument<D>> watch(ClientSession clientSession, List<? extends Bson> pipeline,\n-            Class<D> clazz);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param options the stream options\n-     * @return the stream of changes\n-     */\n-    Multi<ChangeStreamDocument<Document>> watch(ChangeStreamOptions options);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @param options the stream options\n-     * @return the stream of changes\n-     */\n-    <D> Multi<ChangeStreamDocument<D>> watch(Class<D> clazz,\n-            ChangeStreamOptions options);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param pipeline the aggregation pipeline to apply to the change stream\n-     * @param options the stream options\n-     * @return the stream of changes\n-     */\n-    Multi<ChangeStreamDocument<Document>> watch(List<? extends Bson> pipeline,\n-            ChangeStreamOptions options);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param pipeline the aggregation pipeline to apply to the change stream\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @param options the stream options\n-     * @return the stream of changes\n-     */\n-    <D> Multi<ChangeStreamDocument<D>> watch(List<? extends Bson> pipeline, Class<D> clazz,\n-            ChangeStreamOptions options);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param options the stream options\n-     * @return the stream of changes\n-     */\n-    Multi<ChangeStreamDocument<Document>> watch(ClientSession clientSession,\n-            ChangeStreamOptions options);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @param options the stream options\n-     * @return the stream of changes\n-     */\n-    <D> Multi<ChangeStreamDocument<D>> watch(ClientSession clientSession, Class<D> clazz,\n-            ChangeStreamOptions options);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param pipeline the aggregation pipeline to apply to the change stream\n-     * @param options the stream options\n-     * @return the stream of changes\n-     */\n-    Multi<ChangeStreamDocument<Document>> watch(ClientSession clientSession, List<? extends Bson> pipeline,\n-            ChangeStreamOptions options);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param pipeline the aggregation pipeline to apply to the change stream\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @param options the stream options\n-     * @return the stream of changes\n-     */\n-    <D> Multi<ChangeStreamDocument<D>> watch(ClientSession clientSession, List<? extends Bson> pipeline,\n-            Class<D> clazz, ChangeStreamOptions options);\n-\n-    Multi<Document> mapReduce(String mapFunction, String reduceFunction);\n-\n-    <D> Multi<D> mapReduce(String mapFunction, String reduceFunction, Class<D> clazz);\n-\n-    Multi<Document> mapReduce(ClientSession clientSession, String mapFunction, String reduceFunction);\n-\n-    <D> Multi<D> mapReduce(ClientSession clientSession, String mapFunction, String reduceFunction,\n-            Class<D> clazz);\n-\n-    Multi<Document> mapReduce(String mapFunction, String reduceFunction, MapReduceOptions options);\n-\n-    <D> Multi<D> mapReduce(String mapFunction, String reduceFunction, Class<D> clazz,\n-            MapReduceOptions options);\n-\n-    Multi<Document> mapReduce(ClientSession clientSession, String mapFunction, String reduceFunction,\n-            MapReduceOptions options);\n-\n-    <D> Multi<D> mapReduce(ClientSession clientSession, String mapFunction, String reduceFunction,\n-            Class<D> clazz,\n-            MapReduceOptions options);\n-\n-    /**\n-     * Executes a mix of inserts, updates, replaces, and deletes.\n-     *\n-     * @param requests the writes to execute\n-     * @return n {@link Uni} receiving the {@link BulkWriteResult}\n-     */\n-    Uni<BulkWriteResult> bulkWrite(List<? extends WriteModel<? extends T>> requests);\n-\n-    /**\n-     * Executes a mix of inserts, updates, replaces, and deletes.\n-     *\n-     * @param requests the writes to execute\n-     * @param options the options to apply to the bulk write operation\n-     * @return n {@link Uni} receiving the {@link BulkWriteResult}\n-     */\n-    Uni<BulkWriteResult> bulkWrite(List<? extends WriteModel<? extends T>> requests,\n-            BulkWriteOptions options);\n-\n-    /**\n-     * Executes a mix of inserts, updates, replaces, and deletes.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param requests the writes to execute\n-     * @return n {@link Uni} receiving the {@link BulkWriteResult}\n-     */\n-    Uni<BulkWriteResult> bulkWrite(ClientSession clientSession,\n-            List<? extends WriteModel<? extends T>> requests);\n-\n-    /**\n-     * Executes a mix of inserts, updates, replaces, and deletes.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param requests the writes to execute\n-     * @param options the options to apply to the bulk write operation\n-     * @return n {@link Uni} receiving the {@link BulkWriteResult}\n-     */\n-    Uni<BulkWriteResult> bulkWrite(ClientSession clientSession,\n-            List<? extends WriteModel<? extends T>> requests,\n-            BulkWriteOptions options);\n-\n-    /**\n-     * Inserts the provided document. If the document is missing an identifier, the driver should generate one.\n-     *\n-     * @param document the document to insert\n-     * @return n {@link Uni} completed successfully when the operation completes, or completed exceptionally with\n-     *         either a {@link com.mongodb.DuplicateKeyException} or {@link com.mongodb.MongoException}\n-     */\n-    Uni<Void> insertOne(T document);\n-\n-    /**\n-     * Inserts the provided document. If the document is missing an identifier, the driver should generate one.\n-     *\n-     * @param document the document to insert\n-     * @param options the options to apply to the operation\n-     * @return n {@link Uni} completed successfully when the operation completes, or completed exceptionally with\n-     *         either a {@link com.mongodb.DuplicateKeyException} or {@link com.mongodb.MongoException}\n-     */\n-    Uni<Void> insertOne(T document, InsertOneOptions options);\n-\n-    /**\n-     * Inserts the provided document. If the document is missing an identifier, the driver should generate one.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param document the document to insert\n-     * @return n {@link Uni} completed successfully when the operation completes, or completed exceptionally with\n-     *         either a {@link com.mongodb.DuplicateKeyException} or {@link com.mongodb.MongoException}\n-     */\n-    Uni<Void> insertOne(ClientSession clientSession, T document);\n-\n-    /**\n-     * Inserts the provided document. If the document is missing an identifier, the driver should generate one.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param document the document to insert\n-     * @param options the options to apply to the operation\n-     * @return n {@link Uni} completed successfully when the operation completes, or completed exceptionally with\n-     *         either a {@link com.mongodb.DuplicateKeyException} or {@link com.mongodb.MongoException}\n-     */\n-    Uni<Void> insertOne(ClientSession clientSession, T document, InsertOneOptions options);\n-\n-    /**\n-     * Inserts a batch of documents. The preferred way to perform bulk inserts is to use the BulkWrite API.\n-     *\n-     * @param documents the documents to insert\n-     * @return n {@link Uni} completed successfully when the operation completes, or completed exceptionally with\n-     *         either a {@link com.mongodb.DuplicateKeyException} or {@link com.mongodb.MongoException}\n-     */\n-    Uni<Void> insertMany(List<? extends T> documents);\n-\n-    /**\n-     * Inserts a batch of documents. The preferred way to perform bulk inserts is to use the BulkWrite API.\n-     *\n-     * @param documents the documents to insert\n-     * @param options the options to apply to the operation\n-     * @return n {@link Uni} completed successfully when the operation completes, or completed exceptionally with\n-     *         either a {@link com.mongodb.DuplicateKeyException} or {@link com.mongodb.MongoException}\n-     */\n-    Uni<Void> insertMany(List<? extends T> documents, InsertManyOptions options);\n-\n-    /**\n-     * Inserts a batch of documents. The preferred way to perform bulk inserts is to use the BulkWrite API.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param documents the documents to insert\n-     * @return n {@link Uni} completed successfully when the operation completes, or completed exceptionally with\n-     *         either a {@link com.mongodb.DuplicateKeyException} or {@link com.mongodb.MongoException}\n-     */\n-    Uni<Void> insertMany(ClientSession clientSession, List<? extends T> documents);\n-\n-    /**\n-     * Inserts a batch of documents. The preferred way to perform bulk inserts is to use the BulkWrite API.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param documents the documents to insert\n-     * @param options the options to apply to the operation\n-     * @return n {@link Uni} completed successfully when the operation completes, or completed exceptionally with\n-     *         either a {@link com.mongodb.DuplicateKeyException} or {@link com.mongodb.MongoException}\n-     */\n-    Uni<Void> insertMany(ClientSession clientSession, List<? extends T> documents,\n-            InsertManyOptions options);\n-\n-    /**\n-     * Removes at most one document from the collection that matches the given filter.\n-     * If no documents match, the collection is not modified.\n-     *\n-     * @param filter the query filter to apply the the delete operation\n-     * @return n {@link Uni} receiving the {@link DeleteResult} or completed exceptionally with a\n-     *         {@link com.mongodb.MongoException}\n-     */\n-    Uni<DeleteResult> deleteOne(Bson filter);\n-\n-    /**\n-     * Removes at most one document from the collection that matches the given filter.\n-     * If no documents match, the collection is not modified.\n-     *\n-     * @param filter the query filter to apply the the delete operation\n-     * @param options the options to apply to the delete operation\n-     * @return n {@link Uni} receiving the {@link DeleteResult} or completed exceptionally with a\n-     *         {@link com.mongodb.MongoException}\n-     */\n-    Uni<DeleteResult> deleteOne(Bson filter, DeleteOptions options);\n-\n-    /**\n-     * Removes at most one document from the collection that matches the given filter.\n-     * If no documents match, the collection is not modified.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter to apply the the delete operation\n-     * @return n {@link Uni} receiving the {@link DeleteResult} or completed exceptionally with a\n-     *         {@link com.mongodb.MongoException}\n-     */\n-    Uni<DeleteResult> deleteOne(ClientSession clientSession, Bson filter);\n-\n-    /**\n-     * Removes at most one document from the collection that matches the given filter.\n-     * If no documents match, the collection is not modified.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter to apply the the delete operation\n-     * @param options the options to apply to the delete operation\n-     * @return n {@link Uni} receiving the {@link DeleteResult} or completed exceptionally with a\n-     *         {@link com.mongodb.MongoException}\n-     */\n-    Uni<DeleteResult> deleteOne(ClientSession clientSession, Bson filter, DeleteOptions options);\n-\n-    /**\n-     * Removes all documents from the collection that match the given query filter. If no documents match, the\n-     * collection is not modified.\n-     *\n-     * @param filter the query filter to apply the the delete operation\n-     * @return n {@link Uni} receiving the {@link DeleteResult} or completed exceptionally with a\n-     *         {@link com.mongodb.MongoException}\n-     */\n-    Uni<DeleteResult> deleteMany(Bson filter);\n-\n-    /**\n-     * Removes all documents from the collection that match the given query filter. If no documents match, the\n-     * collection is not modified.\n-     *\n-     * @param filter the query filter to apply the the delete operation\n-     * @param options the options to apply to the delete operation\n-     * @return n {@link Uni} receiving the {@link DeleteResult} or completed exceptionally with a\n-     *         {@link com.mongodb.MongoException}\n-     */\n-    Uni<DeleteResult> deleteMany(Bson filter, DeleteOptions options);\n-\n-    /**\n-     * Removes all documents from the collection that match the given query filter. If no documents match, the\n-     * collection is not modified.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter to apply the the delete operation\n-     * @return n {@link Uni} receiving the {@link DeleteResult} or completed exceptionally with a\n-     *         {@link com.mongodb.MongoException}\n-     */\n-    Uni<DeleteResult> deleteMany(ClientSession clientSession, Bson filter);\n-\n-    /**\n-     * Removes all documents from the collection that match the given query filter. If no documents match, the\n-     * collection is not modified.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter to apply the the delete operation\n-     * @param options the options to apply to the delete operation\n-     * @return n {@link Uni} receiving the {@link DeleteResult} or completed exceptionally with a\n-     *         {@link com.mongodb.MongoException}\n-     */\n-    Uni<DeleteResult> deleteMany(ClientSession clientSession, Bson filter, DeleteOptions options);\n-\n-    /**\n-     * Replace a document in the collection according to the specified arguments.\n-     *\n-     * @param filter the query filter to apply the the replace operation\n-     * @param replacement the replacement document\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> replaceOne(Bson filter, T replacement);\n-\n-    /**\n-     * Replace a document in the collection according to the specified arguments.\n-     *\n-     * @param filter the query filter to apply the the replace operation\n-     * @param replacement the replacement document\n-     * @param options the options to apply to the replace operation\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> replaceOne(Bson filter, T replacement, ReplaceOptions options);\n-\n-    /**\n-     * Replace a document in the collection according to the specified arguments.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter to apply the the replace operation\n-     * @param replacement the replacement document\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> replaceOne(ClientSession clientSession, Bson filter, T replacement);\n-\n-    /**\n-     * Replace a document in the collection according to the specified arguments.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter to apply the the replace operation\n-     * @param replacement the replacement document\n-     * @param options the options to apply to the replace operation\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> replaceOne(ClientSession clientSession, Bson filter, T replacement,\n-            ReplaceOptions options);\n-\n-    /**\n-     * Update a single document in the collection according to the specified arguments.\n-     *\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> updateOne(Bson filter, Bson update);\n-\n-    /**\n-     * Update a single document in the collection according to the specified arguments.\n-     *\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @param options the options to apply to the update operation\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> updateOne(Bson filter, Bson update, UpdateOptions options);\n-\n-    /**\n-     * Update a single document in the collection according to the specified arguments.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> updateOne(ClientSession clientSession, Bson filter, Bson update);\n-\n-    /**\n-     * Update a single document in the collection according to the specified arguments.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @param options the options to apply to the update operation\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> updateOne(ClientSession clientSession, Bson filter, Bson update,\n-            UpdateOptions options);\n-\n-    /**\n-     * Update all documents in the collection according to the specified arguments.\n-     *\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> updateMany(Bson filter, Bson update);\n-\n-    /**\n-     * Update all documents in the collection according to the specified arguments.\n-     *\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @param options the options to apply to the update operation\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> updateMany(Bson filter, Bson update, UpdateOptions options);\n-\n-    /**\n-     * Update all documents in the collection according to the specified arguments.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> updateMany(ClientSession clientSession, Bson filter, Bson update);\n-\n-    /**\n-     * Update all documents in the collection according to the specified arguments.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @param options the options to apply to the update operation\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> updateMany(ClientSession clientSession, Bson filter, Bson update,\n-            UpdateOptions options);\n-\n-    /**\n-     * Atomically find a document and remove it.\n-     *\n-     * @param filter the query filter to find the document with\n-     * @return n {@link Uni} completed with the document that was removed. If no documents matched the query filter,\n-     *         then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndDelete(Bson filter);\n-\n-    /**\n-     * Atomically find a document and remove it.\n-     *\n-     * @param filter the query filter to find the document with\n-     * @param options the options to apply to the operation\n-     * @return n {@link Uni} completed with the document that was removed. If no documents matched the query filter,\n-     *         then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndDelete(Bson filter, FindOneAndDeleteOptions options);\n-\n-    /**\n-     * Atomically find a document and remove it.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter to find the document with\n-     * @return n {@link Uni} completed with the document that was removed. If no documents matched the query filter,\n-     *         then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndDelete(ClientSession clientSession, Bson filter);\n-\n-    /**\n-     * Atomically find a document and remove it.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter to find the document with\n-     * @param options the options to apply to the operation\n-     * @return n {@link Uni} completed with the document that was removed. If no documents matched the query filter,\n-     *         then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndDelete(ClientSession clientSession, Bson filter, FindOneAndDeleteOptions options);\n-\n-    /**\n-     * Atomically find a document and replace it.\n-     *\n-     * @param filter the query filter to apply the the replace operation\n-     * @param replacement the replacement document\n-     * @return n {@link Uni} completed with the document that was replaced. Depending on the value of the\n-     *         {@code returnOriginal}\n-     *         property, this will either be the document as it was before the update or as it is after the update. If no\n-     *         documents matched the\n-     *         query filter, then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndReplace(Bson filter, T replacement);\n-\n-    /**\n-     * Atomically find a document and replace it.\n-     *\n-     * @param filter the query filter to apply the the replace operation\n-     * @param replacement the replacement document\n-     * @param options the options to apply to the operation\n-     * @return n {@link Uni} completed with the document that was replaced. Depending on the value of the\n-     *         {@code returnOriginal}\n-     *         property, this will either be the document as it was before the update or as it is after the update. If no\n-     *         documents matched the\n-     *         query filter, then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndReplace(Bson filter, T replacement, FindOneAndReplaceOptions options);\n-\n-    /**\n-     * Atomically find a document and replace it.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter to apply the the replace operation\n-     * @param replacement the replacement document\n-     * @return n {@link Uni} completed with the document that was replaced. Depending on the value of the\n-     *         {@code returnOriginal}\n-     *         property, this will either be the document as it was before the update or as it is after the update. If no\n-     *         documents matched the\n-     *         query filter, then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndReplace(ClientSession clientSession, Bson filter, T replacement);\n-\n-    /**\n-     * Atomically find a document and replace it.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter to apply the the replace operation\n-     * @param replacement the replacement document\n-     * @param options the options to apply to the operation\n-     * @return n {@link Uni} completed with the document that was replaced. Depending on the value of the\n-     *         {@code returnOriginal}\n-     *         property, this will either be the document as it was before the update or as it is after the update. If no\n-     *         documents matched the\n-     *         query filter, then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndReplace(ClientSession clientSession, Bson filter, T replacement,\n-            FindOneAndReplaceOptions options);\n-\n-    /**\n-     * Atomically find a document and update it.\n-     *\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @return n {@link Uni} completed with the document that was updated. Depending on the value of the\n-     *         {@code returnOriginal}\n-     *         property, this will either be the document as it was before the update or as it is after the update. If no\n-     *         documents matched the\n-     *         query filter, then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndUpdate(Bson filter, Bson update);\n-\n-    /**\n-     * Atomically find a document and update it.\n-     *\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @param options the options to apply to the operation\n-     * @return n {@link Uni} completed with the document that was updated. Depending on the value of the\n-     *         {@code returnOriginal}\n-     *         property, this will either be the document as it was before the update or as it is after the update. If no\n-     *         documents matched the\n-     *         query filter, then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndUpdate(Bson filter, Bson update, FindOneAndUpdateOptions options);\n-\n-    /**\n-     * Atomically find a document and update it.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @return n {@link Uni} completed with the document that was updated. Depending on the value of the\n-     *         {@code returnOriginal}\n-     *         property, this will either be the document as it was before the update or as it is after the update. If no\n-     *         documents matched the\n-     *         query filter, then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndUpdate(ClientSession clientSession, Bson filter, Bson update);\n-\n-    /**\n-     * Atomically find a document and update it.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @param options the options to apply to the operation\n-     * @return n {@link Uni} completed with the document that was updated. Depending on the value of the\n-     *         {@code returnOriginal}\n-     *         property, this will either be the document as it was before the update or as it is after the update. If no\n-     *         documents matched the\n-     *         query filter, then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndUpdate(ClientSession clientSession, Bson filter, Bson update,\n-            FindOneAndUpdateOptions options);\n-\n-    /**\n-     * Drops this collection from the database.\n-     *\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> drop();\n-\n-    /**\n-     * Drops this collection from the database.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> drop(ClientSession clientSession);\n-\n-    /**\n-     * Creates an index.\n-     *\n-     * @param key an object describing the index key(s), which may not be null.\n-     * @return n {@link Uni} receiving the created index name.\n-     */\n-    Uni<String> createIndex(Bson key);\n-\n-    /**\n-     * Creates an index.\n-     *\n-     * @param key an object describing the index key(s), which may not be null.\n-     * @param options the options for the index\n-     * @return n {@link Uni} receiving the created index name.\n-     */\n-    Uni<String> createIndex(Bson key, IndexOptions options);\n-\n-    /**\n-     * Creates an index.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param key an object describing the index key(s), which may not be null.\n-     * @return n {@link Uni} receiving the created index name.\n-     */\n-    Uni<String> createIndex(ClientSession clientSession, Bson key);\n-\n-    /**\n-     * Creates an index.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param key an object describing the index key(s), which may not be null.\n-     * @param options the options for the index\n-     * @return n {@link Uni} receiving the created index name.\n-     */\n-    Uni<String> createIndex(ClientSession clientSession, Bson key, IndexOptions options);\n-\n-    /**\n-     * Create multiple indexes.\n-     *\n-     * @param indexes the list of indexes\n-     * @return n {@link Uni} completed with the result when the operation is done. The redeemed list contains the\n-     *         created index names.\n-     */\n-    Uni<List<String>> createIndexes(List<IndexModel> indexes);\n-\n-    /**\n-     * Create multiple indexes.\n-     *\n-     * @param indexes the list of indexes\n-     * @param createIndexOptions options to use when creating indexes\n-     * @return n {@link Uni} completed with the result when the operation is done. The redeemed list contains the\n-     *         created index names.\n-     */\n-    Uni<List<String>> createIndexes(List<IndexModel> indexes, CreateIndexOptions createIndexOptions);\n-\n-    /**\n-     * Create multiple indexes.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param indexes the list of indexes\n-     * @return n {@link Uni} completed with the result when the operation is done. The redeemed list contains the\n-     *         created index names.\n-     */\n-    Uni<List<String>> createIndexes(ClientSession clientSession, List<IndexModel> indexes);\n-\n-    /**\n-     * Create multiple indexes.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param indexes the list of indexes\n-     * @param createIndexOptions options to use when creating indexes\n-     * @return n {@link Uni} completed with the result when the operation is done. The redeemed list contains the\n-     *         created index names.\n-     */\n-    Uni<List<String>> createIndexes(ClientSession clientSession, List<IndexModel> indexes,\n-            CreateIndexOptions createIndexOptions);\n-\n-    /**\n-     * Get all the indexes in this collection.\n-     *\n-     * @return the stream of indexes\n-     */\n-    Multi<Document> listIndexes();\n-\n-    /**\n-     * Get all the indexes in this collection.\n-     *\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return the stream of indexes\n-     */\n-    <D> Multi<D> listIndexes(Class<D> clazz);\n-\n-    /**\n-     * Get all the indexes in this collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @return the stream of indexes\n-     */\n-    Multi<Document> listIndexes(ClientSession clientSession);\n-\n-    /**\n-     * Get all the indexes in this collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return the stream of indexes\n-     */\n-    <D> Multi<D> listIndexes(ClientSession clientSession, Class<D> clazz);\n-\n-    /**\n-     * Drops the index given the keys used to create it.\n-     *\n-     * @param indexName the name of the index to remove\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndex(String indexName);\n-\n-    /**\n-     * Drops the index given the keys used to create it.\n-     *\n-     * @param keys the keys of the index to remove\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndex(Bson keys);\n-\n-    /**\n-     * Drops the index given the keys used to create it.\n-     *\n-     * @param indexName the name of the index to remove\n-     * @param dropIndexOptions options to use when dropping indexes\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndex(String indexName, DropIndexOptions dropIndexOptions);\n-\n-    /**\n-     * Drops the index given the keys used to create it.\n-     *\n-     * @param keys the keys of the index to remove\n-     * @param dropIndexOptions options to use when dropping indexes\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndex(Bson keys, DropIndexOptions dropIndexOptions);\n-\n-    /**\n-     * Drops the index given the keys used to create it.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param indexName the name of the index to remove\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndex(ClientSession clientSession, String indexName);\n-\n-    /**\n-     * Drops the index given the keys used to create it.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param keys the keys of the index to remove\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndex(ClientSession clientSession, Bson keys);\n-\n-    /**\n-     * Drops the index given the keys used to create it.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param indexName the name of the index to remove\n-     * @param dropIndexOptions options to use when dropping indexes\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndex(ClientSession clientSession, String indexName, DropIndexOptions dropIndexOptions);\n-\n-    /**\n-     * Drops the index given the keys used to create it.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param keys the keys of the index to remove\n-     * @param dropIndexOptions options to use when dropping indexes\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndex(ClientSession clientSession, Bson keys, DropIndexOptions dropIndexOptions);\n-\n-    /**\n-     * Drop all the indexes on this collection, except for the default on _id.\n-     *\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndexes();\n-\n-    /**\n-     * Drop all the indexes on this collection, except for the default on _id.\n-     *\n-     * @param dropIndexOptions options to use when dropping indexes\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndexes(DropIndexOptions dropIndexOptions);\n-\n-    /**\n-     * Drop all the indexes on this collection, except for the default on _id.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndexes(ClientSession clientSession);\n-\n-    /**\n-     * Drop all the indexes on this collection, except for the default on _id.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param dropIndexOptions options to use when dropping indexes\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndexes(ClientSession clientSession, DropIndexOptions dropIndexOptions);\n-\n-    /**\n-     * Rename the collection with oldCollectionName to the newCollectionName.\n-     *\n-     * @param newCollectionNamespace the name the collection will be renamed to\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> renameCollection(MongoNamespace newCollectionNamespace);\n-\n-    /**\n-     * Rename the collection with oldCollectionName to the newCollectionName.\n-     *\n-     * @param newCollectionNamespace the name the collection will be renamed to\n-     * @param options the options for renaming a collection\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> renameCollection(MongoNamespace newCollectionNamespace, RenameCollectionOptions options);\n-\n-    /**\n-     * Rename the collection with oldCollectionName to the newCollectionName.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param newCollectionNamespace the name the collection will be renamed to\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> renameCollection(ClientSession clientSession, MongoNamespace newCollectionNamespace);\n-\n-    /**\n-     * Rename the collection with oldCollectionName to the newCollectionName.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param newCollectionNamespace the name the collection will be renamed to\n-     * @param options the options for renaming a collection\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> renameCollection(ClientSession clientSession, MongoNamespace newCollectionNamespace,\n-            RenameCollectionOptions options);\n-\n-    /**\n-     * Gets the codec registry of this collection.\n-     *\n-     * @return the codec registry\n-     */\n-    CodecRegistry getCodecRegistry();\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2NTc0OA==", "url": "https://github.com/quarkusio/quarkus/pull/7263#discussion_r381165748", "bodyText": "Same in the other places (I didn't add a review comment for all) ...", "author": "loicmathieu", "createdAt": "2020-02-19T09:22:16Z", "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/reactive/ReactiveMongoCollection.java", "diffHunk": "@@ -0,0 +1,1410 @@\n+package io.quarkus.mongodb.reactive;\n+\n+import java.util.List;\n+\n+import org.bson.Document;\n+import org.bson.codecs.configuration.CodecRegistry;\n+import org.bson.conversions.Bson;\n+\n+import com.mongodb.MongoNamespace;\n+import com.mongodb.bulk.BulkWriteResult;\n+import com.mongodb.client.model.BulkWriteOptions;\n+import com.mongodb.client.model.CountOptions;\n+import com.mongodb.client.model.CreateIndexOptions;\n+import com.mongodb.client.model.DeleteOptions;\n+import com.mongodb.client.model.DropIndexOptions;\n+import com.mongodb.client.model.EstimatedDocumentCountOptions;\n+import com.mongodb.client.model.FindOneAndDeleteOptions;\n+import com.mongodb.client.model.FindOneAndReplaceOptions;\n+import com.mongodb.client.model.FindOneAndUpdateOptions;\n+import com.mongodb.client.model.IndexModel;\n+import com.mongodb.client.model.IndexOptions;\n+import com.mongodb.client.model.InsertManyOptions;\n+import com.mongodb.client.model.InsertOneOptions;\n+import com.mongodb.client.model.RenameCollectionOptions;\n+import com.mongodb.client.model.ReplaceOptions;\n+import com.mongodb.client.model.UpdateOptions;\n+import com.mongodb.client.model.WriteModel;\n+import com.mongodb.client.model.changestream.ChangeStreamDocument;\n+import com.mongodb.client.result.DeleteResult;\n+import com.mongodb.client.result.UpdateResult;\n+import com.mongodb.reactivestreams.client.ClientSession;\n+\n+import io.quarkus.mongodb.AggregateOptions;\n+import io.quarkus.mongodb.ChangeStreamOptions;\n+import io.quarkus.mongodb.DistinctOptions;\n+import io.quarkus.mongodb.FindOptions;\n+import io.quarkus.mongodb.MapReduceOptions;\n+import io.smallrye.mutiny.Multi;\n+import io.smallrye.mutiny.Uni;\n+\n+/**\n+ * A reactive API to interact with a Mongo collection.\n+ *\n+ * @param <T> The type that this collection will encode documents from and decode documents to.\n+ * @since 1.0\n+ */\n+public interface ReactiveMongoCollection<T> {\n+\n+    /**\n+     * Gets the namespace of this collection.\n+     *\n+     * @return the namespace\n+     */\n+    MongoNamespace getNamespace();\n+\n+    /**\n+     * Get the class of documents stored in this collection.\n+     *\n+     * @return the class\n+     */\n+    Class<T> getDocumentClass();\n+\n+    /**\n+     * Gets an estimate of the count of documents in a collection using collection metadata.\n+     *\n+     * @return n {@link Uni} completed with the estimated number of documents\n+     */\n+    Uni<Long> estimatedDocumentCount();\n+\n+    /**\n+     * Gets an estimate of the count of documents in a collection using collection metadata.\n+     *\n+     * @param options the options describing the count\n+     * @return n {@link Uni} completed with the estimated number of documents\n+     */\n+    Uni<Long> estimatedDocumentCount(EstimatedDocumentCountOptions options);\n+\n+    /**\n+     * Counts the number of documents in the collection.\n+     *\n+     * @return n {@link Uni} completed with the number of documents", "originalCommit": "a59e3ec04c5a6f5b58734b991f143a40a39365c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjExMjQ4OQ==", "url": "https://github.com/quarkusio/quarkus/pull/7263#discussion_r382112489", "bodyText": "Fixed.", "author": "cescoffier", "createdAt": "2020-02-20T16:28:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2NTc0OA=="}], "type": "inlineReview", "revised_code": {"commit": "ffb89d55781f5e28357a251ea5c85dcd31706d9f", "chunk": "diff --git a/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/reactive/ReactiveMongoCollection.java b/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/reactive/ReactiveMongoCollection.java\ndeleted file mode 100644\nindex 33616ec115..0000000000\n--- a/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/reactive/ReactiveMongoCollection.java\n+++ /dev/null\n\n@@ -1,1410 +0,0 @@\n-package io.quarkus.mongodb.reactive;\n-\n-import java.util.List;\n-\n-import org.bson.Document;\n-import org.bson.codecs.configuration.CodecRegistry;\n-import org.bson.conversions.Bson;\n-\n-import com.mongodb.MongoNamespace;\n-import com.mongodb.bulk.BulkWriteResult;\n-import com.mongodb.client.model.BulkWriteOptions;\n-import com.mongodb.client.model.CountOptions;\n-import com.mongodb.client.model.CreateIndexOptions;\n-import com.mongodb.client.model.DeleteOptions;\n-import com.mongodb.client.model.DropIndexOptions;\n-import com.mongodb.client.model.EstimatedDocumentCountOptions;\n-import com.mongodb.client.model.FindOneAndDeleteOptions;\n-import com.mongodb.client.model.FindOneAndReplaceOptions;\n-import com.mongodb.client.model.FindOneAndUpdateOptions;\n-import com.mongodb.client.model.IndexModel;\n-import com.mongodb.client.model.IndexOptions;\n-import com.mongodb.client.model.InsertManyOptions;\n-import com.mongodb.client.model.InsertOneOptions;\n-import com.mongodb.client.model.RenameCollectionOptions;\n-import com.mongodb.client.model.ReplaceOptions;\n-import com.mongodb.client.model.UpdateOptions;\n-import com.mongodb.client.model.WriteModel;\n-import com.mongodb.client.model.changestream.ChangeStreamDocument;\n-import com.mongodb.client.result.DeleteResult;\n-import com.mongodb.client.result.UpdateResult;\n-import com.mongodb.reactivestreams.client.ClientSession;\n-\n-import io.quarkus.mongodb.AggregateOptions;\n-import io.quarkus.mongodb.ChangeStreamOptions;\n-import io.quarkus.mongodb.DistinctOptions;\n-import io.quarkus.mongodb.FindOptions;\n-import io.quarkus.mongodb.MapReduceOptions;\n-import io.smallrye.mutiny.Multi;\n-import io.smallrye.mutiny.Uni;\n-\n-/**\n- * A reactive API to interact with a Mongo collection.\n- *\n- * @param <T> The type that this collection will encode documents from and decode documents to.\n- * @since 1.0\n- */\n-public interface ReactiveMongoCollection<T> {\n-\n-    /**\n-     * Gets the namespace of this collection.\n-     *\n-     * @return the namespace\n-     */\n-    MongoNamespace getNamespace();\n-\n-    /**\n-     * Get the class of documents stored in this collection.\n-     *\n-     * @return the class\n-     */\n-    Class<T> getDocumentClass();\n-\n-    /**\n-     * Gets an estimate of the count of documents in a collection using collection metadata.\n-     *\n-     * @return n {@link Uni} completed with the estimated number of documents\n-     */\n-    Uni<Long> estimatedDocumentCount();\n-\n-    /**\n-     * Gets an estimate of the count of documents in a collection using collection metadata.\n-     *\n-     * @param options the options describing the count\n-     * @return n {@link Uni} completed with the estimated number of documents\n-     */\n-    Uni<Long> estimatedDocumentCount(EstimatedDocumentCountOptions options);\n-\n-    /**\n-     * Counts the number of documents in the collection.\n-     *\n-     * @return n {@link Uni} completed with the number of documents\n-     */\n-    Uni<Long> countDocuments();\n-\n-    /**\n-     * Counts the number of documents in the collection according to the given options.\n-     *\n-     * @param filter the query filter\n-     * @return n {@link Uni} completed with the number of documents\n-     */\n-    Uni<Long> countDocuments(Bson filter);\n-\n-    /**\n-     * Counts the number of documents in the collection according to the given options.\n-     *\n-     * @param filter the query filter\n-     * @param options the options describing the count\n-     * @return n {@link Uni} completed with the number of documents\n-     */\n-    Uni<Long> countDocuments(Bson filter, CountOptions options);\n-\n-    /**\n-     * Counts the number of documents in the collection according to the given options.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @return n {@link Uni} completed with the number of documents\n-     */\n-    Uni<Long> countDocuments(ClientSession clientSession);\n-\n-    /**\n-     * Counts the number of documents in the collection according to the given options.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter\n-     * @return n {@link Uni} completed with the number of documents\n-     */\n-    Uni<Long> countDocuments(ClientSession clientSession, Bson filter);\n-\n-    /**\n-     * Counts the number of documents in the collection according to the given options.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter\n-     * @param options the options describing the count\n-     * @return n {@link Uni} completed with the number of documents\n-     */\n-    Uni<Long> countDocuments(ClientSession clientSession, Bson filter, CountOptions options);\n-\n-    /**\n-     * Gets the distinct values of the specified field name.\n-     *\n-     * @param fieldName the field name*\n-     * @param clazz the default class to cast any distinct items into.\n-     * @param <D> the target type of the iterable.\n-     * @return a multi emitting the sequence of distinct values\n-     */\n-    <D> Multi<D> distinct(String fieldName, Class<D> clazz);\n-\n-    /**\n-     * Gets the distinct values of the specified field name.\n-     *\n-     * @param fieldName the field name\n-     * @param filter the query filter\n-     * @param clazz the default class to cast any distinct items into.\n-     * @param <D> the target type of the iterable.\n-     * @return a multi emitting the sequence of distinct values\n-     */\n-    <D> Multi<D> distinct(String fieldName, Bson filter, Class<D> clazz);\n-\n-    /**\n-     * Gets the distinct values of the specified field name.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param fieldName the field name\n-     * @param clazz the default class to cast any distinct items into.\n-     * @param <D> the target type of the iterable.\n-     * @return a multi emitting the sequence of distinct values\n-     */\n-    <D> Multi<D> distinct(ClientSession clientSession, String fieldName, Class<D> clazz);\n-\n-    /**\n-     * Gets the distinct values of the specified field name.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param fieldName the field name\n-     * @param filter the query filter\n-     * @param clazz the default class to cast any distinct items into.\n-     * @param <D> the target type of the iterable.\n-     * @return a multi emitting the sequence of distinct values\n-     */\n-    <D> Multi<D> distinct(ClientSession clientSession, String fieldName, Bson filter, Class<D> clazz);\n-\n-    /**\n-     * Gets the distinct values of the specified field name.\n-     *\n-     * @param fieldName the field name\n-     * @param clazz the default class to cast any distinct items into.\n-     * @param <D> the target type of the iterable.\n-     * @param options the stream options\n-     * @return a multi emitting the sequence of distinct values\n-     */\n-    <D> Multi<D> distinct(String fieldName, Class<D> clazz, DistinctOptions options);\n-\n-    /**\n-     * Gets the distinct values of the specified field name.\n-     *\n-     * @param fieldName the field name\n-     * @param filter the query filter\n-     * @param clazz the default class to cast any distinct items into.\n-     * @param <D> the target type of the iterable.\n-     * @param options the stream options\n-     * @return a multi emitting the sequence of distinct values\n-     */\n-    <D> Multi<D> distinct(String fieldName, Bson filter, Class<D> clazz, DistinctOptions options);\n-\n-    /**\n-     * Gets the distinct values of the specified field name.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param fieldName the field name\n-     * @param clazz the default class to cast any distinct items into.\n-     * @param <D> the target type of the iterable.\n-     * @param options the stream options\n-     * @return a multi emitting the sequence of distinct values\n-     */\n-    <D> Multi<D> distinct(ClientSession clientSession, String fieldName, Class<D> clazz,\n-            DistinctOptions options);\n-\n-    /**\n-     * Gets the distinct values of the specified field name.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param fieldName the field name\n-     * @param filter the query filter\n-     * @param clazz the default class to cast any distinct items into.\n-     * @param <D> the target type of the iterable.\n-     * @param options the stream options\n-     * @return a multi emitting the sequence of distinct values\n-     */\n-    <D> Multi<D> distinct(ClientSession clientSession, String fieldName, Bson filter, Class<D> clazz,\n-            DistinctOptions options);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    Multi<T> find();\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    <D> Multi<D> find(Class<D> clazz);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param filter the query filter\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    Multi<T> find(Bson filter);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param filter the query filter\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    <D> Multi<D> find(Bson filter, Class<D> clazz);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    Multi<T> find(ClientSession clientSession);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    <D> Multi<D> find(ClientSession clientSession, Class<D> clazz);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    Multi<T> find(ClientSession clientSession, Bson filter);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    <D> Multi<D> find(ClientSession clientSession, Bson filter, Class<D> clazz);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param options the stream options\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    Multi<T> find(FindOptions options);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @param options the stream options\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    <D> Multi<D> find(Class<D> clazz, FindOptions options);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param filter the query filter\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    Multi<T> find(Bson filter, FindOptions options);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param filter the query filter\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @param options the stream options\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    <D> Multi<D> find(Bson filter, Class<D> clazz, FindOptions options);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param options the stream options\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    Multi<T> find(ClientSession clientSession, FindOptions options);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @param options the stream options\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    <D> Multi<D> find(ClientSession clientSession, Class<D> clazz, FindOptions options);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter\n-     * @param options the stream options\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    Multi<T> find(ClientSession clientSession, Bson filter, FindOptions options);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @param options the stream options\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    <D> Multi<D> find(ClientSession clientSession, Bson filter, Class<D> clazz, FindOptions options);\n-\n-    /**\n-     * Aggregates documents according to the specified aggregation pipeline.\n-     *\n-     * @param pipeline the aggregate pipeline\n-     * @return a stream containing the result of the aggregation operation\n-     */\n-    Multi<Document> aggregate(List<? extends Bson> pipeline);\n-\n-    /**\n-     * Aggregates documents according to the specified aggregation pipeline.\n-     *\n-     * @param pipeline the aggregate pipeline\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return a stream containing the result of the aggregation operation\n-     */\n-    <D> Multi<D> aggregate(List<? extends Bson> pipeline, Class<D> clazz);\n-\n-    /**\n-     * Aggregates documents according to the specified aggregation pipeline.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param pipeline the aggregate pipeline\n-     * @return a stream containing the result of the aggregation operation\n-     */\n-    Multi<Document> aggregate(ClientSession clientSession, List<? extends Bson> pipeline);\n-\n-    /**\n-     * Aggregates documents according to the specified aggregation pipeline.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param pipeline the aggregate pipeline\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return a stream containing the result of the aggregation operation\n-     */\n-    <D> Multi<D> aggregate(ClientSession clientSession, List<? extends Bson> pipeline, Class<D> clazz);\n-\n-    //\n-\n-    /**\n-     * Aggregates documents according to the specified aggregation pipeline.\n-     *\n-     * @param pipeline the aggregate pipeline\n-     * @param options the stream options\n-     * @return a stream containing the result of the aggregation operation\n-     */\n-    Multi<Document> aggregate(List<? extends Bson> pipeline, AggregateOptions options);\n-\n-    /**\n-     * Aggregates documents according to the specified aggregation pipeline.\n-     *\n-     * @param pipeline the aggregate pipeline\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @param options the stream options\n-     * @return a stream containing the result of the aggregation operation\n-     */\n-    <D> Multi<D> aggregate(List<? extends Bson> pipeline, Class<D> clazz, AggregateOptions options);\n-\n-    /**\n-     * Aggregates documents according to the specified aggregation pipeline.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param pipeline the aggregate pipeline\n-     * @param options the stream options\n-     * @return a stream containing the result of the aggregation operation\n-     */\n-    Multi<Document> aggregate(ClientSession clientSession, List<? extends Bson> pipeline,\n-            AggregateOptions options);\n-\n-    /**\n-     * Aggregates documents according to the specified aggregation pipeline.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param pipeline the aggregate pipeline\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @param options the stream options\n-     * @return a stream containing the result of the aggregation operation\n-     */\n-    <D> Multi<D> aggregate(ClientSession clientSession, List<? extends Bson> pipeline, Class<D> clazz,\n-            AggregateOptions options);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @return the stream of changes\n-     */\n-    Multi<ChangeStreamDocument<Document>> watch();\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return the stream of changes\n-     */\n-    <D> Multi<ChangeStreamDocument<D>> watch(Class<D> clazz);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param pipeline the aggregation pipeline to apply to the change stream\n-     * @return the stream of changes\n-     */\n-    Multi<ChangeStreamDocument<Document>> watch(List<? extends Bson> pipeline);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param pipeline the aggregation pipeline to apply to the change stream\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return the stream of changes\n-     */\n-    <D> Multi<ChangeStreamDocument<D>> watch(List<? extends Bson> pipeline, Class<D> clazz);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @return the stream of changes\n-     */\n-    Multi<ChangeStreamDocument<Document>> watch(ClientSession clientSession);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return the stream of changes\n-     */\n-    <D> Multi<ChangeStreamDocument<D>> watch(ClientSession clientSession, Class<D> clazz);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param pipeline the aggregation pipeline to apply to the change stream\n-     * @return the stream of changes\n-     */\n-    Multi<ChangeStreamDocument<Document>> watch(ClientSession clientSession, List<? extends Bson> pipeline);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param pipeline the aggregation pipeline to apply to the change stream\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return the stream of changes\n-     */\n-    <D> Multi<ChangeStreamDocument<D>> watch(ClientSession clientSession, List<? extends Bson> pipeline,\n-            Class<D> clazz);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param options the stream options\n-     * @return the stream of changes\n-     */\n-    Multi<ChangeStreamDocument<Document>> watch(ChangeStreamOptions options);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @param options the stream options\n-     * @return the stream of changes\n-     */\n-    <D> Multi<ChangeStreamDocument<D>> watch(Class<D> clazz,\n-            ChangeStreamOptions options);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param pipeline the aggregation pipeline to apply to the change stream\n-     * @param options the stream options\n-     * @return the stream of changes\n-     */\n-    Multi<ChangeStreamDocument<Document>> watch(List<? extends Bson> pipeline,\n-            ChangeStreamOptions options);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param pipeline the aggregation pipeline to apply to the change stream\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @param options the stream options\n-     * @return the stream of changes\n-     */\n-    <D> Multi<ChangeStreamDocument<D>> watch(List<? extends Bson> pipeline, Class<D> clazz,\n-            ChangeStreamOptions options);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param options the stream options\n-     * @return the stream of changes\n-     */\n-    Multi<ChangeStreamDocument<Document>> watch(ClientSession clientSession,\n-            ChangeStreamOptions options);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @param options the stream options\n-     * @return the stream of changes\n-     */\n-    <D> Multi<ChangeStreamDocument<D>> watch(ClientSession clientSession, Class<D> clazz,\n-            ChangeStreamOptions options);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param pipeline the aggregation pipeline to apply to the change stream\n-     * @param options the stream options\n-     * @return the stream of changes\n-     */\n-    Multi<ChangeStreamDocument<Document>> watch(ClientSession clientSession, List<? extends Bson> pipeline,\n-            ChangeStreamOptions options);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param pipeline the aggregation pipeline to apply to the change stream\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @param options the stream options\n-     * @return the stream of changes\n-     */\n-    <D> Multi<ChangeStreamDocument<D>> watch(ClientSession clientSession, List<? extends Bson> pipeline,\n-            Class<D> clazz, ChangeStreamOptions options);\n-\n-    Multi<Document> mapReduce(String mapFunction, String reduceFunction);\n-\n-    <D> Multi<D> mapReduce(String mapFunction, String reduceFunction, Class<D> clazz);\n-\n-    Multi<Document> mapReduce(ClientSession clientSession, String mapFunction, String reduceFunction);\n-\n-    <D> Multi<D> mapReduce(ClientSession clientSession, String mapFunction, String reduceFunction,\n-            Class<D> clazz);\n-\n-    Multi<Document> mapReduce(String mapFunction, String reduceFunction, MapReduceOptions options);\n-\n-    <D> Multi<D> mapReduce(String mapFunction, String reduceFunction, Class<D> clazz,\n-            MapReduceOptions options);\n-\n-    Multi<Document> mapReduce(ClientSession clientSession, String mapFunction, String reduceFunction,\n-            MapReduceOptions options);\n-\n-    <D> Multi<D> mapReduce(ClientSession clientSession, String mapFunction, String reduceFunction,\n-            Class<D> clazz,\n-            MapReduceOptions options);\n-\n-    /**\n-     * Executes a mix of inserts, updates, replaces, and deletes.\n-     *\n-     * @param requests the writes to execute\n-     * @return n {@link Uni} receiving the {@link BulkWriteResult}\n-     */\n-    Uni<BulkWriteResult> bulkWrite(List<? extends WriteModel<? extends T>> requests);\n-\n-    /**\n-     * Executes a mix of inserts, updates, replaces, and deletes.\n-     *\n-     * @param requests the writes to execute\n-     * @param options the options to apply to the bulk write operation\n-     * @return n {@link Uni} receiving the {@link BulkWriteResult}\n-     */\n-    Uni<BulkWriteResult> bulkWrite(List<? extends WriteModel<? extends T>> requests,\n-            BulkWriteOptions options);\n-\n-    /**\n-     * Executes a mix of inserts, updates, replaces, and deletes.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param requests the writes to execute\n-     * @return n {@link Uni} receiving the {@link BulkWriteResult}\n-     */\n-    Uni<BulkWriteResult> bulkWrite(ClientSession clientSession,\n-            List<? extends WriteModel<? extends T>> requests);\n-\n-    /**\n-     * Executes a mix of inserts, updates, replaces, and deletes.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param requests the writes to execute\n-     * @param options the options to apply to the bulk write operation\n-     * @return n {@link Uni} receiving the {@link BulkWriteResult}\n-     */\n-    Uni<BulkWriteResult> bulkWrite(ClientSession clientSession,\n-            List<? extends WriteModel<? extends T>> requests,\n-            BulkWriteOptions options);\n-\n-    /**\n-     * Inserts the provided document. If the document is missing an identifier, the driver should generate one.\n-     *\n-     * @param document the document to insert\n-     * @return n {@link Uni} completed successfully when the operation completes, or completed exceptionally with\n-     *         either a {@link com.mongodb.DuplicateKeyException} or {@link com.mongodb.MongoException}\n-     */\n-    Uni<Void> insertOne(T document);\n-\n-    /**\n-     * Inserts the provided document. If the document is missing an identifier, the driver should generate one.\n-     *\n-     * @param document the document to insert\n-     * @param options the options to apply to the operation\n-     * @return n {@link Uni} completed successfully when the operation completes, or completed exceptionally with\n-     *         either a {@link com.mongodb.DuplicateKeyException} or {@link com.mongodb.MongoException}\n-     */\n-    Uni<Void> insertOne(T document, InsertOneOptions options);\n-\n-    /**\n-     * Inserts the provided document. If the document is missing an identifier, the driver should generate one.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param document the document to insert\n-     * @return n {@link Uni} completed successfully when the operation completes, or completed exceptionally with\n-     *         either a {@link com.mongodb.DuplicateKeyException} or {@link com.mongodb.MongoException}\n-     */\n-    Uni<Void> insertOne(ClientSession clientSession, T document);\n-\n-    /**\n-     * Inserts the provided document. If the document is missing an identifier, the driver should generate one.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param document the document to insert\n-     * @param options the options to apply to the operation\n-     * @return n {@link Uni} completed successfully when the operation completes, or completed exceptionally with\n-     *         either a {@link com.mongodb.DuplicateKeyException} or {@link com.mongodb.MongoException}\n-     */\n-    Uni<Void> insertOne(ClientSession clientSession, T document, InsertOneOptions options);\n-\n-    /**\n-     * Inserts a batch of documents. The preferred way to perform bulk inserts is to use the BulkWrite API.\n-     *\n-     * @param documents the documents to insert\n-     * @return n {@link Uni} completed successfully when the operation completes, or completed exceptionally with\n-     *         either a {@link com.mongodb.DuplicateKeyException} or {@link com.mongodb.MongoException}\n-     */\n-    Uni<Void> insertMany(List<? extends T> documents);\n-\n-    /**\n-     * Inserts a batch of documents. The preferred way to perform bulk inserts is to use the BulkWrite API.\n-     *\n-     * @param documents the documents to insert\n-     * @param options the options to apply to the operation\n-     * @return n {@link Uni} completed successfully when the operation completes, or completed exceptionally with\n-     *         either a {@link com.mongodb.DuplicateKeyException} or {@link com.mongodb.MongoException}\n-     */\n-    Uni<Void> insertMany(List<? extends T> documents, InsertManyOptions options);\n-\n-    /**\n-     * Inserts a batch of documents. The preferred way to perform bulk inserts is to use the BulkWrite API.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param documents the documents to insert\n-     * @return n {@link Uni} completed successfully when the operation completes, or completed exceptionally with\n-     *         either a {@link com.mongodb.DuplicateKeyException} or {@link com.mongodb.MongoException}\n-     */\n-    Uni<Void> insertMany(ClientSession clientSession, List<? extends T> documents);\n-\n-    /**\n-     * Inserts a batch of documents. The preferred way to perform bulk inserts is to use the BulkWrite API.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param documents the documents to insert\n-     * @param options the options to apply to the operation\n-     * @return n {@link Uni} completed successfully when the operation completes, or completed exceptionally with\n-     *         either a {@link com.mongodb.DuplicateKeyException} or {@link com.mongodb.MongoException}\n-     */\n-    Uni<Void> insertMany(ClientSession clientSession, List<? extends T> documents,\n-            InsertManyOptions options);\n-\n-    /**\n-     * Removes at most one document from the collection that matches the given filter.\n-     * If no documents match, the collection is not modified.\n-     *\n-     * @param filter the query filter to apply the the delete operation\n-     * @return n {@link Uni} receiving the {@link DeleteResult} or completed exceptionally with a\n-     *         {@link com.mongodb.MongoException}\n-     */\n-    Uni<DeleteResult> deleteOne(Bson filter);\n-\n-    /**\n-     * Removes at most one document from the collection that matches the given filter.\n-     * If no documents match, the collection is not modified.\n-     *\n-     * @param filter the query filter to apply the the delete operation\n-     * @param options the options to apply to the delete operation\n-     * @return n {@link Uni} receiving the {@link DeleteResult} or completed exceptionally with a\n-     *         {@link com.mongodb.MongoException}\n-     */\n-    Uni<DeleteResult> deleteOne(Bson filter, DeleteOptions options);\n-\n-    /**\n-     * Removes at most one document from the collection that matches the given filter.\n-     * If no documents match, the collection is not modified.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter to apply the the delete operation\n-     * @return n {@link Uni} receiving the {@link DeleteResult} or completed exceptionally with a\n-     *         {@link com.mongodb.MongoException}\n-     */\n-    Uni<DeleteResult> deleteOne(ClientSession clientSession, Bson filter);\n-\n-    /**\n-     * Removes at most one document from the collection that matches the given filter.\n-     * If no documents match, the collection is not modified.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter to apply the the delete operation\n-     * @param options the options to apply to the delete operation\n-     * @return n {@link Uni} receiving the {@link DeleteResult} or completed exceptionally with a\n-     *         {@link com.mongodb.MongoException}\n-     */\n-    Uni<DeleteResult> deleteOne(ClientSession clientSession, Bson filter, DeleteOptions options);\n-\n-    /**\n-     * Removes all documents from the collection that match the given query filter. If no documents match, the\n-     * collection is not modified.\n-     *\n-     * @param filter the query filter to apply the the delete operation\n-     * @return n {@link Uni} receiving the {@link DeleteResult} or completed exceptionally with a\n-     *         {@link com.mongodb.MongoException}\n-     */\n-    Uni<DeleteResult> deleteMany(Bson filter);\n-\n-    /**\n-     * Removes all documents from the collection that match the given query filter. If no documents match, the\n-     * collection is not modified.\n-     *\n-     * @param filter the query filter to apply the the delete operation\n-     * @param options the options to apply to the delete operation\n-     * @return n {@link Uni} receiving the {@link DeleteResult} or completed exceptionally with a\n-     *         {@link com.mongodb.MongoException}\n-     */\n-    Uni<DeleteResult> deleteMany(Bson filter, DeleteOptions options);\n-\n-    /**\n-     * Removes all documents from the collection that match the given query filter. If no documents match, the\n-     * collection is not modified.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter to apply the the delete operation\n-     * @return n {@link Uni} receiving the {@link DeleteResult} or completed exceptionally with a\n-     *         {@link com.mongodb.MongoException}\n-     */\n-    Uni<DeleteResult> deleteMany(ClientSession clientSession, Bson filter);\n-\n-    /**\n-     * Removes all documents from the collection that match the given query filter. If no documents match, the\n-     * collection is not modified.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter to apply the the delete operation\n-     * @param options the options to apply to the delete operation\n-     * @return n {@link Uni} receiving the {@link DeleteResult} or completed exceptionally with a\n-     *         {@link com.mongodb.MongoException}\n-     */\n-    Uni<DeleteResult> deleteMany(ClientSession clientSession, Bson filter, DeleteOptions options);\n-\n-    /**\n-     * Replace a document in the collection according to the specified arguments.\n-     *\n-     * @param filter the query filter to apply the the replace operation\n-     * @param replacement the replacement document\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> replaceOne(Bson filter, T replacement);\n-\n-    /**\n-     * Replace a document in the collection according to the specified arguments.\n-     *\n-     * @param filter the query filter to apply the the replace operation\n-     * @param replacement the replacement document\n-     * @param options the options to apply to the replace operation\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> replaceOne(Bson filter, T replacement, ReplaceOptions options);\n-\n-    /**\n-     * Replace a document in the collection according to the specified arguments.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter to apply the the replace operation\n-     * @param replacement the replacement document\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> replaceOne(ClientSession clientSession, Bson filter, T replacement);\n-\n-    /**\n-     * Replace a document in the collection according to the specified arguments.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter to apply the the replace operation\n-     * @param replacement the replacement document\n-     * @param options the options to apply to the replace operation\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> replaceOne(ClientSession clientSession, Bson filter, T replacement,\n-            ReplaceOptions options);\n-\n-    /**\n-     * Update a single document in the collection according to the specified arguments.\n-     *\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> updateOne(Bson filter, Bson update);\n-\n-    /**\n-     * Update a single document in the collection according to the specified arguments.\n-     *\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @param options the options to apply to the update operation\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> updateOne(Bson filter, Bson update, UpdateOptions options);\n-\n-    /**\n-     * Update a single document in the collection according to the specified arguments.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> updateOne(ClientSession clientSession, Bson filter, Bson update);\n-\n-    /**\n-     * Update a single document in the collection according to the specified arguments.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @param options the options to apply to the update operation\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> updateOne(ClientSession clientSession, Bson filter, Bson update,\n-            UpdateOptions options);\n-\n-    /**\n-     * Update all documents in the collection according to the specified arguments.\n-     *\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> updateMany(Bson filter, Bson update);\n-\n-    /**\n-     * Update all documents in the collection according to the specified arguments.\n-     *\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @param options the options to apply to the update operation\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> updateMany(Bson filter, Bson update, UpdateOptions options);\n-\n-    /**\n-     * Update all documents in the collection according to the specified arguments.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> updateMany(ClientSession clientSession, Bson filter, Bson update);\n-\n-    /**\n-     * Update all documents in the collection according to the specified arguments.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @param options the options to apply to the update operation\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> updateMany(ClientSession clientSession, Bson filter, Bson update,\n-            UpdateOptions options);\n-\n-    /**\n-     * Atomically find a document and remove it.\n-     *\n-     * @param filter the query filter to find the document with\n-     * @return n {@link Uni} completed with the document that was removed. If no documents matched the query filter,\n-     *         then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndDelete(Bson filter);\n-\n-    /**\n-     * Atomically find a document and remove it.\n-     *\n-     * @param filter the query filter to find the document with\n-     * @param options the options to apply to the operation\n-     * @return n {@link Uni} completed with the document that was removed. If no documents matched the query filter,\n-     *         then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndDelete(Bson filter, FindOneAndDeleteOptions options);\n-\n-    /**\n-     * Atomically find a document and remove it.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter to find the document with\n-     * @return n {@link Uni} completed with the document that was removed. If no documents matched the query filter,\n-     *         then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndDelete(ClientSession clientSession, Bson filter);\n-\n-    /**\n-     * Atomically find a document and remove it.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter to find the document with\n-     * @param options the options to apply to the operation\n-     * @return n {@link Uni} completed with the document that was removed. If no documents matched the query filter,\n-     *         then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndDelete(ClientSession clientSession, Bson filter, FindOneAndDeleteOptions options);\n-\n-    /**\n-     * Atomically find a document and replace it.\n-     *\n-     * @param filter the query filter to apply the the replace operation\n-     * @param replacement the replacement document\n-     * @return n {@link Uni} completed with the document that was replaced. Depending on the value of the\n-     *         {@code returnOriginal}\n-     *         property, this will either be the document as it was before the update or as it is after the update. If no\n-     *         documents matched the\n-     *         query filter, then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndReplace(Bson filter, T replacement);\n-\n-    /**\n-     * Atomically find a document and replace it.\n-     *\n-     * @param filter the query filter to apply the the replace operation\n-     * @param replacement the replacement document\n-     * @param options the options to apply to the operation\n-     * @return n {@link Uni} completed with the document that was replaced. Depending on the value of the\n-     *         {@code returnOriginal}\n-     *         property, this will either be the document as it was before the update or as it is after the update. If no\n-     *         documents matched the\n-     *         query filter, then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndReplace(Bson filter, T replacement, FindOneAndReplaceOptions options);\n-\n-    /**\n-     * Atomically find a document and replace it.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter to apply the the replace operation\n-     * @param replacement the replacement document\n-     * @return n {@link Uni} completed with the document that was replaced. Depending on the value of the\n-     *         {@code returnOriginal}\n-     *         property, this will either be the document as it was before the update or as it is after the update. If no\n-     *         documents matched the\n-     *         query filter, then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndReplace(ClientSession clientSession, Bson filter, T replacement);\n-\n-    /**\n-     * Atomically find a document and replace it.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter to apply the the replace operation\n-     * @param replacement the replacement document\n-     * @param options the options to apply to the operation\n-     * @return n {@link Uni} completed with the document that was replaced. Depending on the value of the\n-     *         {@code returnOriginal}\n-     *         property, this will either be the document as it was before the update or as it is after the update. If no\n-     *         documents matched the\n-     *         query filter, then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndReplace(ClientSession clientSession, Bson filter, T replacement,\n-            FindOneAndReplaceOptions options);\n-\n-    /**\n-     * Atomically find a document and update it.\n-     *\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @return n {@link Uni} completed with the document that was updated. Depending on the value of the\n-     *         {@code returnOriginal}\n-     *         property, this will either be the document as it was before the update or as it is after the update. If no\n-     *         documents matched the\n-     *         query filter, then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndUpdate(Bson filter, Bson update);\n-\n-    /**\n-     * Atomically find a document and update it.\n-     *\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @param options the options to apply to the operation\n-     * @return n {@link Uni} completed with the document that was updated. Depending on the value of the\n-     *         {@code returnOriginal}\n-     *         property, this will either be the document as it was before the update or as it is after the update. If no\n-     *         documents matched the\n-     *         query filter, then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndUpdate(Bson filter, Bson update, FindOneAndUpdateOptions options);\n-\n-    /**\n-     * Atomically find a document and update it.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @return n {@link Uni} completed with the document that was updated. Depending on the value of the\n-     *         {@code returnOriginal}\n-     *         property, this will either be the document as it was before the update or as it is after the update. If no\n-     *         documents matched the\n-     *         query filter, then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndUpdate(ClientSession clientSession, Bson filter, Bson update);\n-\n-    /**\n-     * Atomically find a document and update it.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @param options the options to apply to the operation\n-     * @return n {@link Uni} completed with the document that was updated. Depending on the value of the\n-     *         {@code returnOriginal}\n-     *         property, this will either be the document as it was before the update or as it is after the update. If no\n-     *         documents matched the\n-     *         query filter, then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndUpdate(ClientSession clientSession, Bson filter, Bson update,\n-            FindOneAndUpdateOptions options);\n-\n-    /**\n-     * Drops this collection from the database.\n-     *\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> drop();\n-\n-    /**\n-     * Drops this collection from the database.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> drop(ClientSession clientSession);\n-\n-    /**\n-     * Creates an index.\n-     *\n-     * @param key an object describing the index key(s), which may not be null.\n-     * @return n {@link Uni} receiving the created index name.\n-     */\n-    Uni<String> createIndex(Bson key);\n-\n-    /**\n-     * Creates an index.\n-     *\n-     * @param key an object describing the index key(s), which may not be null.\n-     * @param options the options for the index\n-     * @return n {@link Uni} receiving the created index name.\n-     */\n-    Uni<String> createIndex(Bson key, IndexOptions options);\n-\n-    /**\n-     * Creates an index.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param key an object describing the index key(s), which may not be null.\n-     * @return n {@link Uni} receiving the created index name.\n-     */\n-    Uni<String> createIndex(ClientSession clientSession, Bson key);\n-\n-    /**\n-     * Creates an index.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param key an object describing the index key(s), which may not be null.\n-     * @param options the options for the index\n-     * @return n {@link Uni} receiving the created index name.\n-     */\n-    Uni<String> createIndex(ClientSession clientSession, Bson key, IndexOptions options);\n-\n-    /**\n-     * Create multiple indexes.\n-     *\n-     * @param indexes the list of indexes\n-     * @return n {@link Uni} completed with the result when the operation is done. The redeemed list contains the\n-     *         created index names.\n-     */\n-    Uni<List<String>> createIndexes(List<IndexModel> indexes);\n-\n-    /**\n-     * Create multiple indexes.\n-     *\n-     * @param indexes the list of indexes\n-     * @param createIndexOptions options to use when creating indexes\n-     * @return n {@link Uni} completed with the result when the operation is done. The redeemed list contains the\n-     *         created index names.\n-     */\n-    Uni<List<String>> createIndexes(List<IndexModel> indexes, CreateIndexOptions createIndexOptions);\n-\n-    /**\n-     * Create multiple indexes.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param indexes the list of indexes\n-     * @return n {@link Uni} completed with the result when the operation is done. The redeemed list contains the\n-     *         created index names.\n-     */\n-    Uni<List<String>> createIndexes(ClientSession clientSession, List<IndexModel> indexes);\n-\n-    /**\n-     * Create multiple indexes.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param indexes the list of indexes\n-     * @param createIndexOptions options to use when creating indexes\n-     * @return n {@link Uni} completed with the result when the operation is done. The redeemed list contains the\n-     *         created index names.\n-     */\n-    Uni<List<String>> createIndexes(ClientSession clientSession, List<IndexModel> indexes,\n-            CreateIndexOptions createIndexOptions);\n-\n-    /**\n-     * Get all the indexes in this collection.\n-     *\n-     * @return the stream of indexes\n-     */\n-    Multi<Document> listIndexes();\n-\n-    /**\n-     * Get all the indexes in this collection.\n-     *\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return the stream of indexes\n-     */\n-    <D> Multi<D> listIndexes(Class<D> clazz);\n-\n-    /**\n-     * Get all the indexes in this collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @return the stream of indexes\n-     */\n-    Multi<Document> listIndexes(ClientSession clientSession);\n-\n-    /**\n-     * Get all the indexes in this collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return the stream of indexes\n-     */\n-    <D> Multi<D> listIndexes(ClientSession clientSession, Class<D> clazz);\n-\n-    /**\n-     * Drops the index given the keys used to create it.\n-     *\n-     * @param indexName the name of the index to remove\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndex(String indexName);\n-\n-    /**\n-     * Drops the index given the keys used to create it.\n-     *\n-     * @param keys the keys of the index to remove\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndex(Bson keys);\n-\n-    /**\n-     * Drops the index given the keys used to create it.\n-     *\n-     * @param indexName the name of the index to remove\n-     * @param dropIndexOptions options to use when dropping indexes\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndex(String indexName, DropIndexOptions dropIndexOptions);\n-\n-    /**\n-     * Drops the index given the keys used to create it.\n-     *\n-     * @param keys the keys of the index to remove\n-     * @param dropIndexOptions options to use when dropping indexes\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndex(Bson keys, DropIndexOptions dropIndexOptions);\n-\n-    /**\n-     * Drops the index given the keys used to create it.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param indexName the name of the index to remove\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndex(ClientSession clientSession, String indexName);\n-\n-    /**\n-     * Drops the index given the keys used to create it.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param keys the keys of the index to remove\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndex(ClientSession clientSession, Bson keys);\n-\n-    /**\n-     * Drops the index given the keys used to create it.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param indexName the name of the index to remove\n-     * @param dropIndexOptions options to use when dropping indexes\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndex(ClientSession clientSession, String indexName, DropIndexOptions dropIndexOptions);\n-\n-    /**\n-     * Drops the index given the keys used to create it.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param keys the keys of the index to remove\n-     * @param dropIndexOptions options to use when dropping indexes\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndex(ClientSession clientSession, Bson keys, DropIndexOptions dropIndexOptions);\n-\n-    /**\n-     * Drop all the indexes on this collection, except for the default on _id.\n-     *\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndexes();\n-\n-    /**\n-     * Drop all the indexes on this collection, except for the default on _id.\n-     *\n-     * @param dropIndexOptions options to use when dropping indexes\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndexes(DropIndexOptions dropIndexOptions);\n-\n-    /**\n-     * Drop all the indexes on this collection, except for the default on _id.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndexes(ClientSession clientSession);\n-\n-    /**\n-     * Drop all the indexes on this collection, except for the default on _id.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param dropIndexOptions options to use when dropping indexes\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndexes(ClientSession clientSession, DropIndexOptions dropIndexOptions);\n-\n-    /**\n-     * Rename the collection with oldCollectionName to the newCollectionName.\n-     *\n-     * @param newCollectionNamespace the name the collection will be renamed to\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> renameCollection(MongoNamespace newCollectionNamespace);\n-\n-    /**\n-     * Rename the collection with oldCollectionName to the newCollectionName.\n-     *\n-     * @param newCollectionNamespace the name the collection will be renamed to\n-     * @param options the options for renaming a collection\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> renameCollection(MongoNamespace newCollectionNamespace, RenameCollectionOptions options);\n-\n-    /**\n-     * Rename the collection with oldCollectionName to the newCollectionName.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param newCollectionNamespace the name the collection will be renamed to\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> renameCollection(ClientSession clientSession, MongoNamespace newCollectionNamespace);\n-\n-    /**\n-     * Rename the collection with oldCollectionName to the newCollectionName.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param newCollectionNamespace the name the collection will be renamed to\n-     * @param options the options for renaming a collection\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> renameCollection(ClientSession clientSession, MongoNamespace newCollectionNamespace,\n-            RenameCollectionOptions options);\n-\n-    /**\n-     * Gets the codec registry of this collection.\n-     *\n-     * @return the codec registry\n-     */\n-    CodecRegistry getCodecRegistry();\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2NjIwMg==", "url": "https://github.com/quarkusio/quarkus/pull/7263#discussion_r381166202", "bodyText": "You add a link to Uni in the Javadoc and not to Multi ?", "author": "loicmathieu", "createdAt": "2020-02-19T09:23:08Z", "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/reactive/ReactiveMongoCollection.java", "diffHunk": "@@ -0,0 +1,1410 @@\n+package io.quarkus.mongodb.reactive;\n+\n+import java.util.List;\n+\n+import org.bson.Document;\n+import org.bson.codecs.configuration.CodecRegistry;\n+import org.bson.conversions.Bson;\n+\n+import com.mongodb.MongoNamespace;\n+import com.mongodb.bulk.BulkWriteResult;\n+import com.mongodb.client.model.BulkWriteOptions;\n+import com.mongodb.client.model.CountOptions;\n+import com.mongodb.client.model.CreateIndexOptions;\n+import com.mongodb.client.model.DeleteOptions;\n+import com.mongodb.client.model.DropIndexOptions;\n+import com.mongodb.client.model.EstimatedDocumentCountOptions;\n+import com.mongodb.client.model.FindOneAndDeleteOptions;\n+import com.mongodb.client.model.FindOneAndReplaceOptions;\n+import com.mongodb.client.model.FindOneAndUpdateOptions;\n+import com.mongodb.client.model.IndexModel;\n+import com.mongodb.client.model.IndexOptions;\n+import com.mongodb.client.model.InsertManyOptions;\n+import com.mongodb.client.model.InsertOneOptions;\n+import com.mongodb.client.model.RenameCollectionOptions;\n+import com.mongodb.client.model.ReplaceOptions;\n+import com.mongodb.client.model.UpdateOptions;\n+import com.mongodb.client.model.WriteModel;\n+import com.mongodb.client.model.changestream.ChangeStreamDocument;\n+import com.mongodb.client.result.DeleteResult;\n+import com.mongodb.client.result.UpdateResult;\n+import com.mongodb.reactivestreams.client.ClientSession;\n+\n+import io.quarkus.mongodb.AggregateOptions;\n+import io.quarkus.mongodb.ChangeStreamOptions;\n+import io.quarkus.mongodb.DistinctOptions;\n+import io.quarkus.mongodb.FindOptions;\n+import io.quarkus.mongodb.MapReduceOptions;\n+import io.smallrye.mutiny.Multi;\n+import io.smallrye.mutiny.Uni;\n+\n+/**\n+ * A reactive API to interact with a Mongo collection.\n+ *\n+ * @param <T> The type that this collection will encode documents from and decode documents to.\n+ * @since 1.0\n+ */\n+public interface ReactiveMongoCollection<T> {\n+\n+    /**\n+     * Gets the namespace of this collection.\n+     *\n+     * @return the namespace\n+     */\n+    MongoNamespace getNamespace();\n+\n+    /**\n+     * Get the class of documents stored in this collection.\n+     *\n+     * @return the class\n+     */\n+    Class<T> getDocumentClass();\n+\n+    /**\n+     * Gets an estimate of the count of documents in a collection using collection metadata.\n+     *\n+     * @return n {@link Uni} completed with the estimated number of documents\n+     */\n+    Uni<Long> estimatedDocumentCount();\n+\n+    /**\n+     * Gets an estimate of the count of documents in a collection using collection metadata.\n+     *\n+     * @param options the options describing the count\n+     * @return n {@link Uni} completed with the estimated number of documents\n+     */\n+    Uni<Long> estimatedDocumentCount(EstimatedDocumentCountOptions options);\n+\n+    /**\n+     * Counts the number of documents in the collection.\n+     *\n+     * @return n {@link Uni} completed with the number of documents\n+     */\n+    Uni<Long> countDocuments();\n+\n+    /**\n+     * Counts the number of documents in the collection according to the given options.\n+     *\n+     * @param filter the query filter\n+     * @return n {@link Uni} completed with the number of documents\n+     */\n+    Uni<Long> countDocuments(Bson filter);\n+\n+    /**\n+     * Counts the number of documents in the collection according to the given options.\n+     *\n+     * @param filter the query filter\n+     * @param options the options describing the count\n+     * @return n {@link Uni} completed with the number of documents\n+     */\n+    Uni<Long> countDocuments(Bson filter, CountOptions options);\n+\n+    /**\n+     * Counts the number of documents in the collection according to the given options.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @return n {@link Uni} completed with the number of documents\n+     */\n+    Uni<Long> countDocuments(ClientSession clientSession);\n+\n+    /**\n+     * Counts the number of documents in the collection according to the given options.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param filter the query filter\n+     * @return n {@link Uni} completed with the number of documents\n+     */\n+    Uni<Long> countDocuments(ClientSession clientSession, Bson filter);\n+\n+    /**\n+     * Counts the number of documents in the collection according to the given options.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param filter the query filter\n+     * @param options the options describing the count\n+     * @return n {@link Uni} completed with the number of documents\n+     */\n+    Uni<Long> countDocuments(ClientSession clientSession, Bson filter, CountOptions options);\n+\n+    /**\n+     * Gets the distinct values of the specified field name.\n+     *\n+     * @param fieldName the field name*\n+     * @param clazz the default class to cast any distinct items into.\n+     * @param <D> the target type of the iterable.\n+     * @return a multi emitting the sequence of distinct values", "originalCommit": "a59e3ec04c5a6f5b58734b991f143a40a39365c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjExMjM2MQ==", "url": "https://github.com/quarkusio/quarkus/pull/7263#discussion_r382112361", "bodyText": "Fixed.", "author": "cescoffier", "createdAt": "2020-02-20T16:28:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2NjIwMg=="}], "type": "inlineReview", "revised_code": {"commit": "ffb89d55781f5e28357a251ea5c85dcd31706d9f", "chunk": "diff --git a/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/reactive/ReactiveMongoCollection.java b/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/reactive/ReactiveMongoCollection.java\ndeleted file mode 100644\nindex 33616ec115..0000000000\n--- a/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/reactive/ReactiveMongoCollection.java\n+++ /dev/null\n\n@@ -1,1410 +0,0 @@\n-package io.quarkus.mongodb.reactive;\n-\n-import java.util.List;\n-\n-import org.bson.Document;\n-import org.bson.codecs.configuration.CodecRegistry;\n-import org.bson.conversions.Bson;\n-\n-import com.mongodb.MongoNamespace;\n-import com.mongodb.bulk.BulkWriteResult;\n-import com.mongodb.client.model.BulkWriteOptions;\n-import com.mongodb.client.model.CountOptions;\n-import com.mongodb.client.model.CreateIndexOptions;\n-import com.mongodb.client.model.DeleteOptions;\n-import com.mongodb.client.model.DropIndexOptions;\n-import com.mongodb.client.model.EstimatedDocumentCountOptions;\n-import com.mongodb.client.model.FindOneAndDeleteOptions;\n-import com.mongodb.client.model.FindOneAndReplaceOptions;\n-import com.mongodb.client.model.FindOneAndUpdateOptions;\n-import com.mongodb.client.model.IndexModel;\n-import com.mongodb.client.model.IndexOptions;\n-import com.mongodb.client.model.InsertManyOptions;\n-import com.mongodb.client.model.InsertOneOptions;\n-import com.mongodb.client.model.RenameCollectionOptions;\n-import com.mongodb.client.model.ReplaceOptions;\n-import com.mongodb.client.model.UpdateOptions;\n-import com.mongodb.client.model.WriteModel;\n-import com.mongodb.client.model.changestream.ChangeStreamDocument;\n-import com.mongodb.client.result.DeleteResult;\n-import com.mongodb.client.result.UpdateResult;\n-import com.mongodb.reactivestreams.client.ClientSession;\n-\n-import io.quarkus.mongodb.AggregateOptions;\n-import io.quarkus.mongodb.ChangeStreamOptions;\n-import io.quarkus.mongodb.DistinctOptions;\n-import io.quarkus.mongodb.FindOptions;\n-import io.quarkus.mongodb.MapReduceOptions;\n-import io.smallrye.mutiny.Multi;\n-import io.smallrye.mutiny.Uni;\n-\n-/**\n- * A reactive API to interact with a Mongo collection.\n- *\n- * @param <T> The type that this collection will encode documents from and decode documents to.\n- * @since 1.0\n- */\n-public interface ReactiveMongoCollection<T> {\n-\n-    /**\n-     * Gets the namespace of this collection.\n-     *\n-     * @return the namespace\n-     */\n-    MongoNamespace getNamespace();\n-\n-    /**\n-     * Get the class of documents stored in this collection.\n-     *\n-     * @return the class\n-     */\n-    Class<T> getDocumentClass();\n-\n-    /**\n-     * Gets an estimate of the count of documents in a collection using collection metadata.\n-     *\n-     * @return n {@link Uni} completed with the estimated number of documents\n-     */\n-    Uni<Long> estimatedDocumentCount();\n-\n-    /**\n-     * Gets an estimate of the count of documents in a collection using collection metadata.\n-     *\n-     * @param options the options describing the count\n-     * @return n {@link Uni} completed with the estimated number of documents\n-     */\n-    Uni<Long> estimatedDocumentCount(EstimatedDocumentCountOptions options);\n-\n-    /**\n-     * Counts the number of documents in the collection.\n-     *\n-     * @return n {@link Uni} completed with the number of documents\n-     */\n-    Uni<Long> countDocuments();\n-\n-    /**\n-     * Counts the number of documents in the collection according to the given options.\n-     *\n-     * @param filter the query filter\n-     * @return n {@link Uni} completed with the number of documents\n-     */\n-    Uni<Long> countDocuments(Bson filter);\n-\n-    /**\n-     * Counts the number of documents in the collection according to the given options.\n-     *\n-     * @param filter the query filter\n-     * @param options the options describing the count\n-     * @return n {@link Uni} completed with the number of documents\n-     */\n-    Uni<Long> countDocuments(Bson filter, CountOptions options);\n-\n-    /**\n-     * Counts the number of documents in the collection according to the given options.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @return n {@link Uni} completed with the number of documents\n-     */\n-    Uni<Long> countDocuments(ClientSession clientSession);\n-\n-    /**\n-     * Counts the number of documents in the collection according to the given options.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter\n-     * @return n {@link Uni} completed with the number of documents\n-     */\n-    Uni<Long> countDocuments(ClientSession clientSession, Bson filter);\n-\n-    /**\n-     * Counts the number of documents in the collection according to the given options.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter\n-     * @param options the options describing the count\n-     * @return n {@link Uni} completed with the number of documents\n-     */\n-    Uni<Long> countDocuments(ClientSession clientSession, Bson filter, CountOptions options);\n-\n-    /**\n-     * Gets the distinct values of the specified field name.\n-     *\n-     * @param fieldName the field name*\n-     * @param clazz the default class to cast any distinct items into.\n-     * @param <D> the target type of the iterable.\n-     * @return a multi emitting the sequence of distinct values\n-     */\n-    <D> Multi<D> distinct(String fieldName, Class<D> clazz);\n-\n-    /**\n-     * Gets the distinct values of the specified field name.\n-     *\n-     * @param fieldName the field name\n-     * @param filter the query filter\n-     * @param clazz the default class to cast any distinct items into.\n-     * @param <D> the target type of the iterable.\n-     * @return a multi emitting the sequence of distinct values\n-     */\n-    <D> Multi<D> distinct(String fieldName, Bson filter, Class<D> clazz);\n-\n-    /**\n-     * Gets the distinct values of the specified field name.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param fieldName the field name\n-     * @param clazz the default class to cast any distinct items into.\n-     * @param <D> the target type of the iterable.\n-     * @return a multi emitting the sequence of distinct values\n-     */\n-    <D> Multi<D> distinct(ClientSession clientSession, String fieldName, Class<D> clazz);\n-\n-    /**\n-     * Gets the distinct values of the specified field name.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param fieldName the field name\n-     * @param filter the query filter\n-     * @param clazz the default class to cast any distinct items into.\n-     * @param <D> the target type of the iterable.\n-     * @return a multi emitting the sequence of distinct values\n-     */\n-    <D> Multi<D> distinct(ClientSession clientSession, String fieldName, Bson filter, Class<D> clazz);\n-\n-    /**\n-     * Gets the distinct values of the specified field name.\n-     *\n-     * @param fieldName the field name\n-     * @param clazz the default class to cast any distinct items into.\n-     * @param <D> the target type of the iterable.\n-     * @param options the stream options\n-     * @return a multi emitting the sequence of distinct values\n-     */\n-    <D> Multi<D> distinct(String fieldName, Class<D> clazz, DistinctOptions options);\n-\n-    /**\n-     * Gets the distinct values of the specified field name.\n-     *\n-     * @param fieldName the field name\n-     * @param filter the query filter\n-     * @param clazz the default class to cast any distinct items into.\n-     * @param <D> the target type of the iterable.\n-     * @param options the stream options\n-     * @return a multi emitting the sequence of distinct values\n-     */\n-    <D> Multi<D> distinct(String fieldName, Bson filter, Class<D> clazz, DistinctOptions options);\n-\n-    /**\n-     * Gets the distinct values of the specified field name.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param fieldName the field name\n-     * @param clazz the default class to cast any distinct items into.\n-     * @param <D> the target type of the iterable.\n-     * @param options the stream options\n-     * @return a multi emitting the sequence of distinct values\n-     */\n-    <D> Multi<D> distinct(ClientSession clientSession, String fieldName, Class<D> clazz,\n-            DistinctOptions options);\n-\n-    /**\n-     * Gets the distinct values of the specified field name.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param fieldName the field name\n-     * @param filter the query filter\n-     * @param clazz the default class to cast any distinct items into.\n-     * @param <D> the target type of the iterable.\n-     * @param options the stream options\n-     * @return a multi emitting the sequence of distinct values\n-     */\n-    <D> Multi<D> distinct(ClientSession clientSession, String fieldName, Bson filter, Class<D> clazz,\n-            DistinctOptions options);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    Multi<T> find();\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    <D> Multi<D> find(Class<D> clazz);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param filter the query filter\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    Multi<T> find(Bson filter);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param filter the query filter\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    <D> Multi<D> find(Bson filter, Class<D> clazz);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    Multi<T> find(ClientSession clientSession);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    <D> Multi<D> find(ClientSession clientSession, Class<D> clazz);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    Multi<T> find(ClientSession clientSession, Bson filter);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    <D> Multi<D> find(ClientSession clientSession, Bson filter, Class<D> clazz);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param options the stream options\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    Multi<T> find(FindOptions options);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @param options the stream options\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    <D> Multi<D> find(Class<D> clazz, FindOptions options);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param filter the query filter\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    Multi<T> find(Bson filter, FindOptions options);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param filter the query filter\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @param options the stream options\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    <D> Multi<D> find(Bson filter, Class<D> clazz, FindOptions options);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param options the stream options\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    Multi<T> find(ClientSession clientSession, FindOptions options);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @param options the stream options\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    <D> Multi<D> find(ClientSession clientSession, Class<D> clazz, FindOptions options);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter\n-     * @param options the stream options\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    Multi<T> find(ClientSession clientSession, Bson filter, FindOptions options);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @param options the stream options\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    <D> Multi<D> find(ClientSession clientSession, Bson filter, Class<D> clazz, FindOptions options);\n-\n-    /**\n-     * Aggregates documents according to the specified aggregation pipeline.\n-     *\n-     * @param pipeline the aggregate pipeline\n-     * @return a stream containing the result of the aggregation operation\n-     */\n-    Multi<Document> aggregate(List<? extends Bson> pipeline);\n-\n-    /**\n-     * Aggregates documents according to the specified aggregation pipeline.\n-     *\n-     * @param pipeline the aggregate pipeline\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return a stream containing the result of the aggregation operation\n-     */\n-    <D> Multi<D> aggregate(List<? extends Bson> pipeline, Class<D> clazz);\n-\n-    /**\n-     * Aggregates documents according to the specified aggregation pipeline.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param pipeline the aggregate pipeline\n-     * @return a stream containing the result of the aggregation operation\n-     */\n-    Multi<Document> aggregate(ClientSession clientSession, List<? extends Bson> pipeline);\n-\n-    /**\n-     * Aggregates documents according to the specified aggregation pipeline.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param pipeline the aggregate pipeline\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return a stream containing the result of the aggregation operation\n-     */\n-    <D> Multi<D> aggregate(ClientSession clientSession, List<? extends Bson> pipeline, Class<D> clazz);\n-\n-    //\n-\n-    /**\n-     * Aggregates documents according to the specified aggregation pipeline.\n-     *\n-     * @param pipeline the aggregate pipeline\n-     * @param options the stream options\n-     * @return a stream containing the result of the aggregation operation\n-     */\n-    Multi<Document> aggregate(List<? extends Bson> pipeline, AggregateOptions options);\n-\n-    /**\n-     * Aggregates documents according to the specified aggregation pipeline.\n-     *\n-     * @param pipeline the aggregate pipeline\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @param options the stream options\n-     * @return a stream containing the result of the aggregation operation\n-     */\n-    <D> Multi<D> aggregate(List<? extends Bson> pipeline, Class<D> clazz, AggregateOptions options);\n-\n-    /**\n-     * Aggregates documents according to the specified aggregation pipeline.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param pipeline the aggregate pipeline\n-     * @param options the stream options\n-     * @return a stream containing the result of the aggregation operation\n-     */\n-    Multi<Document> aggregate(ClientSession clientSession, List<? extends Bson> pipeline,\n-            AggregateOptions options);\n-\n-    /**\n-     * Aggregates documents according to the specified aggregation pipeline.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param pipeline the aggregate pipeline\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @param options the stream options\n-     * @return a stream containing the result of the aggregation operation\n-     */\n-    <D> Multi<D> aggregate(ClientSession clientSession, List<? extends Bson> pipeline, Class<D> clazz,\n-            AggregateOptions options);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @return the stream of changes\n-     */\n-    Multi<ChangeStreamDocument<Document>> watch();\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return the stream of changes\n-     */\n-    <D> Multi<ChangeStreamDocument<D>> watch(Class<D> clazz);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param pipeline the aggregation pipeline to apply to the change stream\n-     * @return the stream of changes\n-     */\n-    Multi<ChangeStreamDocument<Document>> watch(List<? extends Bson> pipeline);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param pipeline the aggregation pipeline to apply to the change stream\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return the stream of changes\n-     */\n-    <D> Multi<ChangeStreamDocument<D>> watch(List<? extends Bson> pipeline, Class<D> clazz);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @return the stream of changes\n-     */\n-    Multi<ChangeStreamDocument<Document>> watch(ClientSession clientSession);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return the stream of changes\n-     */\n-    <D> Multi<ChangeStreamDocument<D>> watch(ClientSession clientSession, Class<D> clazz);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param pipeline the aggregation pipeline to apply to the change stream\n-     * @return the stream of changes\n-     */\n-    Multi<ChangeStreamDocument<Document>> watch(ClientSession clientSession, List<? extends Bson> pipeline);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param pipeline the aggregation pipeline to apply to the change stream\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return the stream of changes\n-     */\n-    <D> Multi<ChangeStreamDocument<D>> watch(ClientSession clientSession, List<? extends Bson> pipeline,\n-            Class<D> clazz);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param options the stream options\n-     * @return the stream of changes\n-     */\n-    Multi<ChangeStreamDocument<Document>> watch(ChangeStreamOptions options);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @param options the stream options\n-     * @return the stream of changes\n-     */\n-    <D> Multi<ChangeStreamDocument<D>> watch(Class<D> clazz,\n-            ChangeStreamOptions options);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param pipeline the aggregation pipeline to apply to the change stream\n-     * @param options the stream options\n-     * @return the stream of changes\n-     */\n-    Multi<ChangeStreamDocument<Document>> watch(List<? extends Bson> pipeline,\n-            ChangeStreamOptions options);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param pipeline the aggregation pipeline to apply to the change stream\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @param options the stream options\n-     * @return the stream of changes\n-     */\n-    <D> Multi<ChangeStreamDocument<D>> watch(List<? extends Bson> pipeline, Class<D> clazz,\n-            ChangeStreamOptions options);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param options the stream options\n-     * @return the stream of changes\n-     */\n-    Multi<ChangeStreamDocument<Document>> watch(ClientSession clientSession,\n-            ChangeStreamOptions options);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @param options the stream options\n-     * @return the stream of changes\n-     */\n-    <D> Multi<ChangeStreamDocument<D>> watch(ClientSession clientSession, Class<D> clazz,\n-            ChangeStreamOptions options);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param pipeline the aggregation pipeline to apply to the change stream\n-     * @param options the stream options\n-     * @return the stream of changes\n-     */\n-    Multi<ChangeStreamDocument<Document>> watch(ClientSession clientSession, List<? extends Bson> pipeline,\n-            ChangeStreamOptions options);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param pipeline the aggregation pipeline to apply to the change stream\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @param options the stream options\n-     * @return the stream of changes\n-     */\n-    <D> Multi<ChangeStreamDocument<D>> watch(ClientSession clientSession, List<? extends Bson> pipeline,\n-            Class<D> clazz, ChangeStreamOptions options);\n-\n-    Multi<Document> mapReduce(String mapFunction, String reduceFunction);\n-\n-    <D> Multi<D> mapReduce(String mapFunction, String reduceFunction, Class<D> clazz);\n-\n-    Multi<Document> mapReduce(ClientSession clientSession, String mapFunction, String reduceFunction);\n-\n-    <D> Multi<D> mapReduce(ClientSession clientSession, String mapFunction, String reduceFunction,\n-            Class<D> clazz);\n-\n-    Multi<Document> mapReduce(String mapFunction, String reduceFunction, MapReduceOptions options);\n-\n-    <D> Multi<D> mapReduce(String mapFunction, String reduceFunction, Class<D> clazz,\n-            MapReduceOptions options);\n-\n-    Multi<Document> mapReduce(ClientSession clientSession, String mapFunction, String reduceFunction,\n-            MapReduceOptions options);\n-\n-    <D> Multi<D> mapReduce(ClientSession clientSession, String mapFunction, String reduceFunction,\n-            Class<D> clazz,\n-            MapReduceOptions options);\n-\n-    /**\n-     * Executes a mix of inserts, updates, replaces, and deletes.\n-     *\n-     * @param requests the writes to execute\n-     * @return n {@link Uni} receiving the {@link BulkWriteResult}\n-     */\n-    Uni<BulkWriteResult> bulkWrite(List<? extends WriteModel<? extends T>> requests);\n-\n-    /**\n-     * Executes a mix of inserts, updates, replaces, and deletes.\n-     *\n-     * @param requests the writes to execute\n-     * @param options the options to apply to the bulk write operation\n-     * @return n {@link Uni} receiving the {@link BulkWriteResult}\n-     */\n-    Uni<BulkWriteResult> bulkWrite(List<? extends WriteModel<? extends T>> requests,\n-            BulkWriteOptions options);\n-\n-    /**\n-     * Executes a mix of inserts, updates, replaces, and deletes.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param requests the writes to execute\n-     * @return n {@link Uni} receiving the {@link BulkWriteResult}\n-     */\n-    Uni<BulkWriteResult> bulkWrite(ClientSession clientSession,\n-            List<? extends WriteModel<? extends T>> requests);\n-\n-    /**\n-     * Executes a mix of inserts, updates, replaces, and deletes.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param requests the writes to execute\n-     * @param options the options to apply to the bulk write operation\n-     * @return n {@link Uni} receiving the {@link BulkWriteResult}\n-     */\n-    Uni<BulkWriteResult> bulkWrite(ClientSession clientSession,\n-            List<? extends WriteModel<? extends T>> requests,\n-            BulkWriteOptions options);\n-\n-    /**\n-     * Inserts the provided document. If the document is missing an identifier, the driver should generate one.\n-     *\n-     * @param document the document to insert\n-     * @return n {@link Uni} completed successfully when the operation completes, or completed exceptionally with\n-     *         either a {@link com.mongodb.DuplicateKeyException} or {@link com.mongodb.MongoException}\n-     */\n-    Uni<Void> insertOne(T document);\n-\n-    /**\n-     * Inserts the provided document. If the document is missing an identifier, the driver should generate one.\n-     *\n-     * @param document the document to insert\n-     * @param options the options to apply to the operation\n-     * @return n {@link Uni} completed successfully when the operation completes, or completed exceptionally with\n-     *         either a {@link com.mongodb.DuplicateKeyException} or {@link com.mongodb.MongoException}\n-     */\n-    Uni<Void> insertOne(T document, InsertOneOptions options);\n-\n-    /**\n-     * Inserts the provided document. If the document is missing an identifier, the driver should generate one.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param document the document to insert\n-     * @return n {@link Uni} completed successfully when the operation completes, or completed exceptionally with\n-     *         either a {@link com.mongodb.DuplicateKeyException} or {@link com.mongodb.MongoException}\n-     */\n-    Uni<Void> insertOne(ClientSession clientSession, T document);\n-\n-    /**\n-     * Inserts the provided document. If the document is missing an identifier, the driver should generate one.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param document the document to insert\n-     * @param options the options to apply to the operation\n-     * @return n {@link Uni} completed successfully when the operation completes, or completed exceptionally with\n-     *         either a {@link com.mongodb.DuplicateKeyException} or {@link com.mongodb.MongoException}\n-     */\n-    Uni<Void> insertOne(ClientSession clientSession, T document, InsertOneOptions options);\n-\n-    /**\n-     * Inserts a batch of documents. The preferred way to perform bulk inserts is to use the BulkWrite API.\n-     *\n-     * @param documents the documents to insert\n-     * @return n {@link Uni} completed successfully when the operation completes, or completed exceptionally with\n-     *         either a {@link com.mongodb.DuplicateKeyException} or {@link com.mongodb.MongoException}\n-     */\n-    Uni<Void> insertMany(List<? extends T> documents);\n-\n-    /**\n-     * Inserts a batch of documents. The preferred way to perform bulk inserts is to use the BulkWrite API.\n-     *\n-     * @param documents the documents to insert\n-     * @param options the options to apply to the operation\n-     * @return n {@link Uni} completed successfully when the operation completes, or completed exceptionally with\n-     *         either a {@link com.mongodb.DuplicateKeyException} or {@link com.mongodb.MongoException}\n-     */\n-    Uni<Void> insertMany(List<? extends T> documents, InsertManyOptions options);\n-\n-    /**\n-     * Inserts a batch of documents. The preferred way to perform bulk inserts is to use the BulkWrite API.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param documents the documents to insert\n-     * @return n {@link Uni} completed successfully when the operation completes, or completed exceptionally with\n-     *         either a {@link com.mongodb.DuplicateKeyException} or {@link com.mongodb.MongoException}\n-     */\n-    Uni<Void> insertMany(ClientSession clientSession, List<? extends T> documents);\n-\n-    /**\n-     * Inserts a batch of documents. The preferred way to perform bulk inserts is to use the BulkWrite API.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param documents the documents to insert\n-     * @param options the options to apply to the operation\n-     * @return n {@link Uni} completed successfully when the operation completes, or completed exceptionally with\n-     *         either a {@link com.mongodb.DuplicateKeyException} or {@link com.mongodb.MongoException}\n-     */\n-    Uni<Void> insertMany(ClientSession clientSession, List<? extends T> documents,\n-            InsertManyOptions options);\n-\n-    /**\n-     * Removes at most one document from the collection that matches the given filter.\n-     * If no documents match, the collection is not modified.\n-     *\n-     * @param filter the query filter to apply the the delete operation\n-     * @return n {@link Uni} receiving the {@link DeleteResult} or completed exceptionally with a\n-     *         {@link com.mongodb.MongoException}\n-     */\n-    Uni<DeleteResult> deleteOne(Bson filter);\n-\n-    /**\n-     * Removes at most one document from the collection that matches the given filter.\n-     * If no documents match, the collection is not modified.\n-     *\n-     * @param filter the query filter to apply the the delete operation\n-     * @param options the options to apply to the delete operation\n-     * @return n {@link Uni} receiving the {@link DeleteResult} or completed exceptionally with a\n-     *         {@link com.mongodb.MongoException}\n-     */\n-    Uni<DeleteResult> deleteOne(Bson filter, DeleteOptions options);\n-\n-    /**\n-     * Removes at most one document from the collection that matches the given filter.\n-     * If no documents match, the collection is not modified.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter to apply the the delete operation\n-     * @return n {@link Uni} receiving the {@link DeleteResult} or completed exceptionally with a\n-     *         {@link com.mongodb.MongoException}\n-     */\n-    Uni<DeleteResult> deleteOne(ClientSession clientSession, Bson filter);\n-\n-    /**\n-     * Removes at most one document from the collection that matches the given filter.\n-     * If no documents match, the collection is not modified.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter to apply the the delete operation\n-     * @param options the options to apply to the delete operation\n-     * @return n {@link Uni} receiving the {@link DeleteResult} or completed exceptionally with a\n-     *         {@link com.mongodb.MongoException}\n-     */\n-    Uni<DeleteResult> deleteOne(ClientSession clientSession, Bson filter, DeleteOptions options);\n-\n-    /**\n-     * Removes all documents from the collection that match the given query filter. If no documents match, the\n-     * collection is not modified.\n-     *\n-     * @param filter the query filter to apply the the delete operation\n-     * @return n {@link Uni} receiving the {@link DeleteResult} or completed exceptionally with a\n-     *         {@link com.mongodb.MongoException}\n-     */\n-    Uni<DeleteResult> deleteMany(Bson filter);\n-\n-    /**\n-     * Removes all documents from the collection that match the given query filter. If no documents match, the\n-     * collection is not modified.\n-     *\n-     * @param filter the query filter to apply the the delete operation\n-     * @param options the options to apply to the delete operation\n-     * @return n {@link Uni} receiving the {@link DeleteResult} or completed exceptionally with a\n-     *         {@link com.mongodb.MongoException}\n-     */\n-    Uni<DeleteResult> deleteMany(Bson filter, DeleteOptions options);\n-\n-    /**\n-     * Removes all documents from the collection that match the given query filter. If no documents match, the\n-     * collection is not modified.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter to apply the the delete operation\n-     * @return n {@link Uni} receiving the {@link DeleteResult} or completed exceptionally with a\n-     *         {@link com.mongodb.MongoException}\n-     */\n-    Uni<DeleteResult> deleteMany(ClientSession clientSession, Bson filter);\n-\n-    /**\n-     * Removes all documents from the collection that match the given query filter. If no documents match, the\n-     * collection is not modified.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter to apply the the delete operation\n-     * @param options the options to apply to the delete operation\n-     * @return n {@link Uni} receiving the {@link DeleteResult} or completed exceptionally with a\n-     *         {@link com.mongodb.MongoException}\n-     */\n-    Uni<DeleteResult> deleteMany(ClientSession clientSession, Bson filter, DeleteOptions options);\n-\n-    /**\n-     * Replace a document in the collection according to the specified arguments.\n-     *\n-     * @param filter the query filter to apply the the replace operation\n-     * @param replacement the replacement document\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> replaceOne(Bson filter, T replacement);\n-\n-    /**\n-     * Replace a document in the collection according to the specified arguments.\n-     *\n-     * @param filter the query filter to apply the the replace operation\n-     * @param replacement the replacement document\n-     * @param options the options to apply to the replace operation\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> replaceOne(Bson filter, T replacement, ReplaceOptions options);\n-\n-    /**\n-     * Replace a document in the collection according to the specified arguments.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter to apply the the replace operation\n-     * @param replacement the replacement document\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> replaceOne(ClientSession clientSession, Bson filter, T replacement);\n-\n-    /**\n-     * Replace a document in the collection according to the specified arguments.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter to apply the the replace operation\n-     * @param replacement the replacement document\n-     * @param options the options to apply to the replace operation\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> replaceOne(ClientSession clientSession, Bson filter, T replacement,\n-            ReplaceOptions options);\n-\n-    /**\n-     * Update a single document in the collection according to the specified arguments.\n-     *\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> updateOne(Bson filter, Bson update);\n-\n-    /**\n-     * Update a single document in the collection according to the specified arguments.\n-     *\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @param options the options to apply to the update operation\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> updateOne(Bson filter, Bson update, UpdateOptions options);\n-\n-    /**\n-     * Update a single document in the collection according to the specified arguments.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> updateOne(ClientSession clientSession, Bson filter, Bson update);\n-\n-    /**\n-     * Update a single document in the collection according to the specified arguments.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @param options the options to apply to the update operation\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> updateOne(ClientSession clientSession, Bson filter, Bson update,\n-            UpdateOptions options);\n-\n-    /**\n-     * Update all documents in the collection according to the specified arguments.\n-     *\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> updateMany(Bson filter, Bson update);\n-\n-    /**\n-     * Update all documents in the collection according to the specified arguments.\n-     *\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @param options the options to apply to the update operation\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> updateMany(Bson filter, Bson update, UpdateOptions options);\n-\n-    /**\n-     * Update all documents in the collection according to the specified arguments.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> updateMany(ClientSession clientSession, Bson filter, Bson update);\n-\n-    /**\n-     * Update all documents in the collection according to the specified arguments.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @param options the options to apply to the update operation\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> updateMany(ClientSession clientSession, Bson filter, Bson update,\n-            UpdateOptions options);\n-\n-    /**\n-     * Atomically find a document and remove it.\n-     *\n-     * @param filter the query filter to find the document with\n-     * @return n {@link Uni} completed with the document that was removed. If no documents matched the query filter,\n-     *         then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndDelete(Bson filter);\n-\n-    /**\n-     * Atomically find a document and remove it.\n-     *\n-     * @param filter the query filter to find the document with\n-     * @param options the options to apply to the operation\n-     * @return n {@link Uni} completed with the document that was removed. If no documents matched the query filter,\n-     *         then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndDelete(Bson filter, FindOneAndDeleteOptions options);\n-\n-    /**\n-     * Atomically find a document and remove it.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter to find the document with\n-     * @return n {@link Uni} completed with the document that was removed. If no documents matched the query filter,\n-     *         then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndDelete(ClientSession clientSession, Bson filter);\n-\n-    /**\n-     * Atomically find a document and remove it.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter to find the document with\n-     * @param options the options to apply to the operation\n-     * @return n {@link Uni} completed with the document that was removed. If no documents matched the query filter,\n-     *         then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndDelete(ClientSession clientSession, Bson filter, FindOneAndDeleteOptions options);\n-\n-    /**\n-     * Atomically find a document and replace it.\n-     *\n-     * @param filter the query filter to apply the the replace operation\n-     * @param replacement the replacement document\n-     * @return n {@link Uni} completed with the document that was replaced. Depending on the value of the\n-     *         {@code returnOriginal}\n-     *         property, this will either be the document as it was before the update or as it is after the update. If no\n-     *         documents matched the\n-     *         query filter, then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndReplace(Bson filter, T replacement);\n-\n-    /**\n-     * Atomically find a document and replace it.\n-     *\n-     * @param filter the query filter to apply the the replace operation\n-     * @param replacement the replacement document\n-     * @param options the options to apply to the operation\n-     * @return n {@link Uni} completed with the document that was replaced. Depending on the value of the\n-     *         {@code returnOriginal}\n-     *         property, this will either be the document as it was before the update or as it is after the update. If no\n-     *         documents matched the\n-     *         query filter, then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndReplace(Bson filter, T replacement, FindOneAndReplaceOptions options);\n-\n-    /**\n-     * Atomically find a document and replace it.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter to apply the the replace operation\n-     * @param replacement the replacement document\n-     * @return n {@link Uni} completed with the document that was replaced. Depending on the value of the\n-     *         {@code returnOriginal}\n-     *         property, this will either be the document as it was before the update or as it is after the update. If no\n-     *         documents matched the\n-     *         query filter, then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndReplace(ClientSession clientSession, Bson filter, T replacement);\n-\n-    /**\n-     * Atomically find a document and replace it.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter to apply the the replace operation\n-     * @param replacement the replacement document\n-     * @param options the options to apply to the operation\n-     * @return n {@link Uni} completed with the document that was replaced. Depending on the value of the\n-     *         {@code returnOriginal}\n-     *         property, this will either be the document as it was before the update or as it is after the update. If no\n-     *         documents matched the\n-     *         query filter, then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndReplace(ClientSession clientSession, Bson filter, T replacement,\n-            FindOneAndReplaceOptions options);\n-\n-    /**\n-     * Atomically find a document and update it.\n-     *\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @return n {@link Uni} completed with the document that was updated. Depending on the value of the\n-     *         {@code returnOriginal}\n-     *         property, this will either be the document as it was before the update or as it is after the update. If no\n-     *         documents matched the\n-     *         query filter, then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndUpdate(Bson filter, Bson update);\n-\n-    /**\n-     * Atomically find a document and update it.\n-     *\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @param options the options to apply to the operation\n-     * @return n {@link Uni} completed with the document that was updated. Depending on the value of the\n-     *         {@code returnOriginal}\n-     *         property, this will either be the document as it was before the update or as it is after the update. If no\n-     *         documents matched the\n-     *         query filter, then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndUpdate(Bson filter, Bson update, FindOneAndUpdateOptions options);\n-\n-    /**\n-     * Atomically find a document and update it.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @return n {@link Uni} completed with the document that was updated. Depending on the value of the\n-     *         {@code returnOriginal}\n-     *         property, this will either be the document as it was before the update or as it is after the update. If no\n-     *         documents matched the\n-     *         query filter, then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndUpdate(ClientSession clientSession, Bson filter, Bson update);\n-\n-    /**\n-     * Atomically find a document and update it.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @param options the options to apply to the operation\n-     * @return n {@link Uni} completed with the document that was updated. Depending on the value of the\n-     *         {@code returnOriginal}\n-     *         property, this will either be the document as it was before the update or as it is after the update. If no\n-     *         documents matched the\n-     *         query filter, then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndUpdate(ClientSession clientSession, Bson filter, Bson update,\n-            FindOneAndUpdateOptions options);\n-\n-    /**\n-     * Drops this collection from the database.\n-     *\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> drop();\n-\n-    /**\n-     * Drops this collection from the database.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> drop(ClientSession clientSession);\n-\n-    /**\n-     * Creates an index.\n-     *\n-     * @param key an object describing the index key(s), which may not be null.\n-     * @return n {@link Uni} receiving the created index name.\n-     */\n-    Uni<String> createIndex(Bson key);\n-\n-    /**\n-     * Creates an index.\n-     *\n-     * @param key an object describing the index key(s), which may not be null.\n-     * @param options the options for the index\n-     * @return n {@link Uni} receiving the created index name.\n-     */\n-    Uni<String> createIndex(Bson key, IndexOptions options);\n-\n-    /**\n-     * Creates an index.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param key an object describing the index key(s), which may not be null.\n-     * @return n {@link Uni} receiving the created index name.\n-     */\n-    Uni<String> createIndex(ClientSession clientSession, Bson key);\n-\n-    /**\n-     * Creates an index.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param key an object describing the index key(s), which may not be null.\n-     * @param options the options for the index\n-     * @return n {@link Uni} receiving the created index name.\n-     */\n-    Uni<String> createIndex(ClientSession clientSession, Bson key, IndexOptions options);\n-\n-    /**\n-     * Create multiple indexes.\n-     *\n-     * @param indexes the list of indexes\n-     * @return n {@link Uni} completed with the result when the operation is done. The redeemed list contains the\n-     *         created index names.\n-     */\n-    Uni<List<String>> createIndexes(List<IndexModel> indexes);\n-\n-    /**\n-     * Create multiple indexes.\n-     *\n-     * @param indexes the list of indexes\n-     * @param createIndexOptions options to use when creating indexes\n-     * @return n {@link Uni} completed with the result when the operation is done. The redeemed list contains the\n-     *         created index names.\n-     */\n-    Uni<List<String>> createIndexes(List<IndexModel> indexes, CreateIndexOptions createIndexOptions);\n-\n-    /**\n-     * Create multiple indexes.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param indexes the list of indexes\n-     * @return n {@link Uni} completed with the result when the operation is done. The redeemed list contains the\n-     *         created index names.\n-     */\n-    Uni<List<String>> createIndexes(ClientSession clientSession, List<IndexModel> indexes);\n-\n-    /**\n-     * Create multiple indexes.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param indexes the list of indexes\n-     * @param createIndexOptions options to use when creating indexes\n-     * @return n {@link Uni} completed with the result when the operation is done. The redeemed list contains the\n-     *         created index names.\n-     */\n-    Uni<List<String>> createIndexes(ClientSession clientSession, List<IndexModel> indexes,\n-            CreateIndexOptions createIndexOptions);\n-\n-    /**\n-     * Get all the indexes in this collection.\n-     *\n-     * @return the stream of indexes\n-     */\n-    Multi<Document> listIndexes();\n-\n-    /**\n-     * Get all the indexes in this collection.\n-     *\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return the stream of indexes\n-     */\n-    <D> Multi<D> listIndexes(Class<D> clazz);\n-\n-    /**\n-     * Get all the indexes in this collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @return the stream of indexes\n-     */\n-    Multi<Document> listIndexes(ClientSession clientSession);\n-\n-    /**\n-     * Get all the indexes in this collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return the stream of indexes\n-     */\n-    <D> Multi<D> listIndexes(ClientSession clientSession, Class<D> clazz);\n-\n-    /**\n-     * Drops the index given the keys used to create it.\n-     *\n-     * @param indexName the name of the index to remove\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndex(String indexName);\n-\n-    /**\n-     * Drops the index given the keys used to create it.\n-     *\n-     * @param keys the keys of the index to remove\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndex(Bson keys);\n-\n-    /**\n-     * Drops the index given the keys used to create it.\n-     *\n-     * @param indexName the name of the index to remove\n-     * @param dropIndexOptions options to use when dropping indexes\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndex(String indexName, DropIndexOptions dropIndexOptions);\n-\n-    /**\n-     * Drops the index given the keys used to create it.\n-     *\n-     * @param keys the keys of the index to remove\n-     * @param dropIndexOptions options to use when dropping indexes\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndex(Bson keys, DropIndexOptions dropIndexOptions);\n-\n-    /**\n-     * Drops the index given the keys used to create it.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param indexName the name of the index to remove\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndex(ClientSession clientSession, String indexName);\n-\n-    /**\n-     * Drops the index given the keys used to create it.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param keys the keys of the index to remove\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndex(ClientSession clientSession, Bson keys);\n-\n-    /**\n-     * Drops the index given the keys used to create it.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param indexName the name of the index to remove\n-     * @param dropIndexOptions options to use when dropping indexes\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndex(ClientSession clientSession, String indexName, DropIndexOptions dropIndexOptions);\n-\n-    /**\n-     * Drops the index given the keys used to create it.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param keys the keys of the index to remove\n-     * @param dropIndexOptions options to use when dropping indexes\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndex(ClientSession clientSession, Bson keys, DropIndexOptions dropIndexOptions);\n-\n-    /**\n-     * Drop all the indexes on this collection, except for the default on _id.\n-     *\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndexes();\n-\n-    /**\n-     * Drop all the indexes on this collection, except for the default on _id.\n-     *\n-     * @param dropIndexOptions options to use when dropping indexes\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndexes(DropIndexOptions dropIndexOptions);\n-\n-    /**\n-     * Drop all the indexes on this collection, except for the default on _id.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndexes(ClientSession clientSession);\n-\n-    /**\n-     * Drop all the indexes on this collection, except for the default on _id.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param dropIndexOptions options to use when dropping indexes\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndexes(ClientSession clientSession, DropIndexOptions dropIndexOptions);\n-\n-    /**\n-     * Rename the collection with oldCollectionName to the newCollectionName.\n-     *\n-     * @param newCollectionNamespace the name the collection will be renamed to\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> renameCollection(MongoNamespace newCollectionNamespace);\n-\n-    /**\n-     * Rename the collection with oldCollectionName to the newCollectionName.\n-     *\n-     * @param newCollectionNamespace the name the collection will be renamed to\n-     * @param options the options for renaming a collection\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> renameCollection(MongoNamespace newCollectionNamespace, RenameCollectionOptions options);\n-\n-    /**\n-     * Rename the collection with oldCollectionName to the newCollectionName.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param newCollectionNamespace the name the collection will be renamed to\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> renameCollection(ClientSession clientSession, MongoNamespace newCollectionNamespace);\n-\n-    /**\n-     * Rename the collection with oldCollectionName to the newCollectionName.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param newCollectionNamespace the name the collection will be renamed to\n-     * @param options the options for renaming a collection\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> renameCollection(ClientSession clientSession, MongoNamespace newCollectionNamespace,\n-            RenameCollectionOptions options);\n-\n-    /**\n-     * Gets the codec registry of this collection.\n-     *\n-     * @return the codec registry\n-     */\n-    CodecRegistry getCodecRegistry();\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2ODQ0Nw==", "url": "https://github.com/quarkusio/quarkus/pull/7263#discussion_r381168447", "bodyText": "Missing JavaDoc, I know the original ReactiveMongoCollection didn't have JavaDoc for these methods but as they are part of the API and documented inside the MongoClient they should have some.", "author": "loicmathieu", "createdAt": "2020-02-19T09:27:05Z", "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/reactive/ReactiveMongoCollection.java", "diffHunk": "@@ -0,0 +1,1410 @@\n+package io.quarkus.mongodb.reactive;\n+\n+import java.util.List;\n+\n+import org.bson.Document;\n+import org.bson.codecs.configuration.CodecRegistry;\n+import org.bson.conversions.Bson;\n+\n+import com.mongodb.MongoNamespace;\n+import com.mongodb.bulk.BulkWriteResult;\n+import com.mongodb.client.model.BulkWriteOptions;\n+import com.mongodb.client.model.CountOptions;\n+import com.mongodb.client.model.CreateIndexOptions;\n+import com.mongodb.client.model.DeleteOptions;\n+import com.mongodb.client.model.DropIndexOptions;\n+import com.mongodb.client.model.EstimatedDocumentCountOptions;\n+import com.mongodb.client.model.FindOneAndDeleteOptions;\n+import com.mongodb.client.model.FindOneAndReplaceOptions;\n+import com.mongodb.client.model.FindOneAndUpdateOptions;\n+import com.mongodb.client.model.IndexModel;\n+import com.mongodb.client.model.IndexOptions;\n+import com.mongodb.client.model.InsertManyOptions;\n+import com.mongodb.client.model.InsertOneOptions;\n+import com.mongodb.client.model.RenameCollectionOptions;\n+import com.mongodb.client.model.ReplaceOptions;\n+import com.mongodb.client.model.UpdateOptions;\n+import com.mongodb.client.model.WriteModel;\n+import com.mongodb.client.model.changestream.ChangeStreamDocument;\n+import com.mongodb.client.result.DeleteResult;\n+import com.mongodb.client.result.UpdateResult;\n+import com.mongodb.reactivestreams.client.ClientSession;\n+\n+import io.quarkus.mongodb.AggregateOptions;\n+import io.quarkus.mongodb.ChangeStreamOptions;\n+import io.quarkus.mongodb.DistinctOptions;\n+import io.quarkus.mongodb.FindOptions;\n+import io.quarkus.mongodb.MapReduceOptions;\n+import io.smallrye.mutiny.Multi;\n+import io.smallrye.mutiny.Uni;\n+\n+/**\n+ * A reactive API to interact with a Mongo collection.\n+ *\n+ * @param <T> The type that this collection will encode documents from and decode documents to.\n+ * @since 1.0\n+ */\n+public interface ReactiveMongoCollection<T> {\n+\n+    /**\n+     * Gets the namespace of this collection.\n+     *\n+     * @return the namespace\n+     */\n+    MongoNamespace getNamespace();\n+\n+    /**\n+     * Get the class of documents stored in this collection.\n+     *\n+     * @return the class\n+     */\n+    Class<T> getDocumentClass();\n+\n+    /**\n+     * Gets an estimate of the count of documents in a collection using collection metadata.\n+     *\n+     * @return n {@link Uni} completed with the estimated number of documents\n+     */\n+    Uni<Long> estimatedDocumentCount();\n+\n+    /**\n+     * Gets an estimate of the count of documents in a collection using collection metadata.\n+     *\n+     * @param options the options describing the count\n+     * @return n {@link Uni} completed with the estimated number of documents\n+     */\n+    Uni<Long> estimatedDocumentCount(EstimatedDocumentCountOptions options);\n+\n+    /**\n+     * Counts the number of documents in the collection.\n+     *\n+     * @return n {@link Uni} completed with the number of documents\n+     */\n+    Uni<Long> countDocuments();\n+\n+    /**\n+     * Counts the number of documents in the collection according to the given options.\n+     *\n+     * @param filter the query filter\n+     * @return n {@link Uni} completed with the number of documents\n+     */\n+    Uni<Long> countDocuments(Bson filter);\n+\n+    /**\n+     * Counts the number of documents in the collection according to the given options.\n+     *\n+     * @param filter the query filter\n+     * @param options the options describing the count\n+     * @return n {@link Uni} completed with the number of documents\n+     */\n+    Uni<Long> countDocuments(Bson filter, CountOptions options);\n+\n+    /**\n+     * Counts the number of documents in the collection according to the given options.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @return n {@link Uni} completed with the number of documents\n+     */\n+    Uni<Long> countDocuments(ClientSession clientSession);\n+\n+    /**\n+     * Counts the number of documents in the collection according to the given options.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param filter the query filter\n+     * @return n {@link Uni} completed with the number of documents\n+     */\n+    Uni<Long> countDocuments(ClientSession clientSession, Bson filter);\n+\n+    /**\n+     * Counts the number of documents in the collection according to the given options.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param filter the query filter\n+     * @param options the options describing the count\n+     * @return n {@link Uni} completed with the number of documents\n+     */\n+    Uni<Long> countDocuments(ClientSession clientSession, Bson filter, CountOptions options);\n+\n+    /**\n+     * Gets the distinct values of the specified field name.\n+     *\n+     * @param fieldName the field name*\n+     * @param clazz the default class to cast any distinct items into.\n+     * @param <D> the target type of the iterable.\n+     * @return a multi emitting the sequence of distinct values\n+     */\n+    <D> Multi<D> distinct(String fieldName, Class<D> clazz);\n+\n+    /**\n+     * Gets the distinct values of the specified field name.\n+     *\n+     * @param fieldName the field name\n+     * @param filter the query filter\n+     * @param clazz the default class to cast any distinct items into.\n+     * @param <D> the target type of the iterable.\n+     * @return a multi emitting the sequence of distinct values\n+     */\n+    <D> Multi<D> distinct(String fieldName, Bson filter, Class<D> clazz);\n+\n+    /**\n+     * Gets the distinct values of the specified field name.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param fieldName the field name\n+     * @param clazz the default class to cast any distinct items into.\n+     * @param <D> the target type of the iterable.\n+     * @return a multi emitting the sequence of distinct values\n+     */\n+    <D> Multi<D> distinct(ClientSession clientSession, String fieldName, Class<D> clazz);\n+\n+    /**\n+     * Gets the distinct values of the specified field name.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param fieldName the field name\n+     * @param filter the query filter\n+     * @param clazz the default class to cast any distinct items into.\n+     * @param <D> the target type of the iterable.\n+     * @return a multi emitting the sequence of distinct values\n+     */\n+    <D> Multi<D> distinct(ClientSession clientSession, String fieldName, Bson filter, Class<D> clazz);\n+\n+    /**\n+     * Gets the distinct values of the specified field name.\n+     *\n+     * @param fieldName the field name\n+     * @param clazz the default class to cast any distinct items into.\n+     * @param <D> the target type of the iterable.\n+     * @param options the stream options\n+     * @return a multi emitting the sequence of distinct values\n+     */\n+    <D> Multi<D> distinct(String fieldName, Class<D> clazz, DistinctOptions options);\n+\n+    /**\n+     * Gets the distinct values of the specified field name.\n+     *\n+     * @param fieldName the field name\n+     * @param filter the query filter\n+     * @param clazz the default class to cast any distinct items into.\n+     * @param <D> the target type of the iterable.\n+     * @param options the stream options\n+     * @return a multi emitting the sequence of distinct values\n+     */\n+    <D> Multi<D> distinct(String fieldName, Bson filter, Class<D> clazz, DistinctOptions options);\n+\n+    /**\n+     * Gets the distinct values of the specified field name.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param fieldName the field name\n+     * @param clazz the default class to cast any distinct items into.\n+     * @param <D> the target type of the iterable.\n+     * @param options the stream options\n+     * @return a multi emitting the sequence of distinct values\n+     */\n+    <D> Multi<D> distinct(ClientSession clientSession, String fieldName, Class<D> clazz,\n+            DistinctOptions options);\n+\n+    /**\n+     * Gets the distinct values of the specified field name.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param fieldName the field name\n+     * @param filter the query filter\n+     * @param clazz the default class to cast any distinct items into.\n+     * @param <D> the target type of the iterable.\n+     * @param options the stream options\n+     * @return a multi emitting the sequence of distinct values\n+     */\n+    <D> Multi<D> distinct(ClientSession clientSession, String fieldName, Bson filter, Class<D> clazz,\n+            DistinctOptions options);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    Multi<T> find();\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    <D> Multi<D> find(Class<D> clazz);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param filter the query filter\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    Multi<T> find(Bson filter);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param filter the query filter\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    <D> Multi<D> find(Bson filter, Class<D> clazz);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    Multi<T> find(ClientSession clientSession);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    <D> Multi<D> find(ClientSession clientSession, Class<D> clazz);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param filter the query filter\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    Multi<T> find(ClientSession clientSession, Bson filter);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param filter the query filter\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    <D> Multi<D> find(ClientSession clientSession, Bson filter, Class<D> clazz);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param options the stream options\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    Multi<T> find(FindOptions options);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @param options the stream options\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    <D> Multi<D> find(Class<D> clazz, FindOptions options);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param filter the query filter\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    Multi<T> find(Bson filter, FindOptions options);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param filter the query filter\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @param options the stream options\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    <D> Multi<D> find(Bson filter, Class<D> clazz, FindOptions options);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param options the stream options\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    Multi<T> find(ClientSession clientSession, FindOptions options);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @param options the stream options\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    <D> Multi<D> find(ClientSession clientSession, Class<D> clazz, FindOptions options);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param filter the query filter\n+     * @param options the stream options\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    Multi<T> find(ClientSession clientSession, Bson filter, FindOptions options);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param filter the query filter\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @param options the stream options\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    <D> Multi<D> find(ClientSession clientSession, Bson filter, Class<D> clazz, FindOptions options);\n+\n+    /**\n+     * Aggregates documents according to the specified aggregation pipeline.\n+     *\n+     * @param pipeline the aggregate pipeline\n+     * @return a stream containing the result of the aggregation operation\n+     */\n+    Multi<Document> aggregate(List<? extends Bson> pipeline);\n+\n+    /**\n+     * Aggregates documents according to the specified aggregation pipeline.\n+     *\n+     * @param pipeline the aggregate pipeline\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @return a stream containing the result of the aggregation operation\n+     */\n+    <D> Multi<D> aggregate(List<? extends Bson> pipeline, Class<D> clazz);\n+\n+    /**\n+     * Aggregates documents according to the specified aggregation pipeline.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param pipeline the aggregate pipeline\n+     * @return a stream containing the result of the aggregation operation\n+     */\n+    Multi<Document> aggregate(ClientSession clientSession, List<? extends Bson> pipeline);\n+\n+    /**\n+     * Aggregates documents according to the specified aggregation pipeline.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param pipeline the aggregate pipeline\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @return a stream containing the result of the aggregation operation\n+     */\n+    <D> Multi<D> aggregate(ClientSession clientSession, List<? extends Bson> pipeline, Class<D> clazz);\n+\n+    //\n+\n+    /**\n+     * Aggregates documents according to the specified aggregation pipeline.\n+     *\n+     * @param pipeline the aggregate pipeline\n+     * @param options the stream options\n+     * @return a stream containing the result of the aggregation operation\n+     */\n+    Multi<Document> aggregate(List<? extends Bson> pipeline, AggregateOptions options);\n+\n+    /**\n+     * Aggregates documents according to the specified aggregation pipeline.\n+     *\n+     * @param pipeline the aggregate pipeline\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @param options the stream options\n+     * @return a stream containing the result of the aggregation operation\n+     */\n+    <D> Multi<D> aggregate(List<? extends Bson> pipeline, Class<D> clazz, AggregateOptions options);\n+\n+    /**\n+     * Aggregates documents according to the specified aggregation pipeline.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param pipeline the aggregate pipeline\n+     * @param options the stream options\n+     * @return a stream containing the result of the aggregation operation\n+     */\n+    Multi<Document> aggregate(ClientSession clientSession, List<? extends Bson> pipeline,\n+            AggregateOptions options);\n+\n+    /**\n+     * Aggregates documents according to the specified aggregation pipeline.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param pipeline the aggregate pipeline\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @param options the stream options\n+     * @return a stream containing the result of the aggregation operation\n+     */\n+    <D> Multi<D> aggregate(ClientSession clientSession, List<? extends Bson> pipeline, Class<D> clazz,\n+            AggregateOptions options);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @return the stream of changes\n+     */\n+    Multi<ChangeStreamDocument<Document>> watch();\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @return the stream of changes\n+     */\n+    <D> Multi<ChangeStreamDocument<D>> watch(Class<D> clazz);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param pipeline the aggregation pipeline to apply to the change stream\n+     * @return the stream of changes\n+     */\n+    Multi<ChangeStreamDocument<Document>> watch(List<? extends Bson> pipeline);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param pipeline the aggregation pipeline to apply to the change stream\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @return the stream of changes\n+     */\n+    <D> Multi<ChangeStreamDocument<D>> watch(List<? extends Bson> pipeline, Class<D> clazz);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @return the stream of changes\n+     */\n+    Multi<ChangeStreamDocument<Document>> watch(ClientSession clientSession);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @return the stream of changes\n+     */\n+    <D> Multi<ChangeStreamDocument<D>> watch(ClientSession clientSession, Class<D> clazz);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param pipeline the aggregation pipeline to apply to the change stream\n+     * @return the stream of changes\n+     */\n+    Multi<ChangeStreamDocument<Document>> watch(ClientSession clientSession, List<? extends Bson> pipeline);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param pipeline the aggregation pipeline to apply to the change stream\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @return the stream of changes\n+     */\n+    <D> Multi<ChangeStreamDocument<D>> watch(ClientSession clientSession, List<? extends Bson> pipeline,\n+            Class<D> clazz);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param options the stream options\n+     * @return the stream of changes\n+     */\n+    Multi<ChangeStreamDocument<Document>> watch(ChangeStreamOptions options);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @param options the stream options\n+     * @return the stream of changes\n+     */\n+    <D> Multi<ChangeStreamDocument<D>> watch(Class<D> clazz,\n+            ChangeStreamOptions options);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param pipeline the aggregation pipeline to apply to the change stream\n+     * @param options the stream options\n+     * @return the stream of changes\n+     */\n+    Multi<ChangeStreamDocument<Document>> watch(List<? extends Bson> pipeline,\n+            ChangeStreamOptions options);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param pipeline the aggregation pipeline to apply to the change stream\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @param options the stream options\n+     * @return the stream of changes\n+     */\n+    <D> Multi<ChangeStreamDocument<D>> watch(List<? extends Bson> pipeline, Class<D> clazz,\n+            ChangeStreamOptions options);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param options the stream options\n+     * @return the stream of changes\n+     */\n+    Multi<ChangeStreamDocument<Document>> watch(ClientSession clientSession,\n+            ChangeStreamOptions options);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @param options the stream options\n+     * @return the stream of changes\n+     */\n+    <D> Multi<ChangeStreamDocument<D>> watch(ClientSession clientSession, Class<D> clazz,\n+            ChangeStreamOptions options);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param pipeline the aggregation pipeline to apply to the change stream\n+     * @param options the stream options\n+     * @return the stream of changes\n+     */\n+    Multi<ChangeStreamDocument<Document>> watch(ClientSession clientSession, List<? extends Bson> pipeline,\n+            ChangeStreamOptions options);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param pipeline the aggregation pipeline to apply to the change stream\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @param options the stream options\n+     * @return the stream of changes\n+     */\n+    <D> Multi<ChangeStreamDocument<D>> watch(ClientSession clientSession, List<? extends Bson> pipeline,\n+            Class<D> clazz, ChangeStreamOptions options);\n+\n+    Multi<Document> mapReduce(String mapFunction, String reduceFunction);\n+\n+    <D> Multi<D> mapReduce(String mapFunction, String reduceFunction, Class<D> clazz);\n+\n+    Multi<Document> mapReduce(ClientSession clientSession, String mapFunction, String reduceFunction);\n+\n+    <D> Multi<D> mapReduce(ClientSession clientSession, String mapFunction, String reduceFunction,\n+            Class<D> clazz);\n+\n+    Multi<Document> mapReduce(String mapFunction, String reduceFunction, MapReduceOptions options);\n+\n+    <D> Multi<D> mapReduce(String mapFunction, String reduceFunction, Class<D> clazz,\n+            MapReduceOptions options);\n+\n+    Multi<Document> mapReduce(ClientSession clientSession, String mapFunction, String reduceFunction,\n+            MapReduceOptions options);\n+\n+    <D> Multi<D> mapReduce(ClientSession clientSession, String mapFunction, String reduceFunction,\n+            Class<D> clazz,\n+            MapReduceOptions options);", "originalCommit": "a59e3ec04c5a6f5b58734b991f143a40a39365c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA5MjI0MA==", "url": "https://github.com/quarkusio/quarkus/pull/7263#discussion_r382092240", "bodyText": "Agreed!", "author": "cescoffier", "createdAt": "2020-02-20T15:56:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2ODQ0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjExMjY3NQ==", "url": "https://github.com/quarkusio/quarkus/pull/7263#discussion_r382112675", "bodyText": "I added the missing JavaDoc.", "author": "cescoffier", "createdAt": "2020-02-20T16:28:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2ODQ0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "ffb89d55781f5e28357a251ea5c85dcd31706d9f", "chunk": "diff --git a/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/reactive/ReactiveMongoCollection.java b/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/reactive/ReactiveMongoCollection.java\ndeleted file mode 100644\nindex 33616ec115..0000000000\n--- a/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/reactive/ReactiveMongoCollection.java\n+++ /dev/null\n\n@@ -1,1410 +0,0 @@\n-package io.quarkus.mongodb.reactive;\n-\n-import java.util.List;\n-\n-import org.bson.Document;\n-import org.bson.codecs.configuration.CodecRegistry;\n-import org.bson.conversions.Bson;\n-\n-import com.mongodb.MongoNamespace;\n-import com.mongodb.bulk.BulkWriteResult;\n-import com.mongodb.client.model.BulkWriteOptions;\n-import com.mongodb.client.model.CountOptions;\n-import com.mongodb.client.model.CreateIndexOptions;\n-import com.mongodb.client.model.DeleteOptions;\n-import com.mongodb.client.model.DropIndexOptions;\n-import com.mongodb.client.model.EstimatedDocumentCountOptions;\n-import com.mongodb.client.model.FindOneAndDeleteOptions;\n-import com.mongodb.client.model.FindOneAndReplaceOptions;\n-import com.mongodb.client.model.FindOneAndUpdateOptions;\n-import com.mongodb.client.model.IndexModel;\n-import com.mongodb.client.model.IndexOptions;\n-import com.mongodb.client.model.InsertManyOptions;\n-import com.mongodb.client.model.InsertOneOptions;\n-import com.mongodb.client.model.RenameCollectionOptions;\n-import com.mongodb.client.model.ReplaceOptions;\n-import com.mongodb.client.model.UpdateOptions;\n-import com.mongodb.client.model.WriteModel;\n-import com.mongodb.client.model.changestream.ChangeStreamDocument;\n-import com.mongodb.client.result.DeleteResult;\n-import com.mongodb.client.result.UpdateResult;\n-import com.mongodb.reactivestreams.client.ClientSession;\n-\n-import io.quarkus.mongodb.AggregateOptions;\n-import io.quarkus.mongodb.ChangeStreamOptions;\n-import io.quarkus.mongodb.DistinctOptions;\n-import io.quarkus.mongodb.FindOptions;\n-import io.quarkus.mongodb.MapReduceOptions;\n-import io.smallrye.mutiny.Multi;\n-import io.smallrye.mutiny.Uni;\n-\n-/**\n- * A reactive API to interact with a Mongo collection.\n- *\n- * @param <T> The type that this collection will encode documents from and decode documents to.\n- * @since 1.0\n- */\n-public interface ReactiveMongoCollection<T> {\n-\n-    /**\n-     * Gets the namespace of this collection.\n-     *\n-     * @return the namespace\n-     */\n-    MongoNamespace getNamespace();\n-\n-    /**\n-     * Get the class of documents stored in this collection.\n-     *\n-     * @return the class\n-     */\n-    Class<T> getDocumentClass();\n-\n-    /**\n-     * Gets an estimate of the count of documents in a collection using collection metadata.\n-     *\n-     * @return n {@link Uni} completed with the estimated number of documents\n-     */\n-    Uni<Long> estimatedDocumentCount();\n-\n-    /**\n-     * Gets an estimate of the count of documents in a collection using collection metadata.\n-     *\n-     * @param options the options describing the count\n-     * @return n {@link Uni} completed with the estimated number of documents\n-     */\n-    Uni<Long> estimatedDocumentCount(EstimatedDocumentCountOptions options);\n-\n-    /**\n-     * Counts the number of documents in the collection.\n-     *\n-     * @return n {@link Uni} completed with the number of documents\n-     */\n-    Uni<Long> countDocuments();\n-\n-    /**\n-     * Counts the number of documents in the collection according to the given options.\n-     *\n-     * @param filter the query filter\n-     * @return n {@link Uni} completed with the number of documents\n-     */\n-    Uni<Long> countDocuments(Bson filter);\n-\n-    /**\n-     * Counts the number of documents in the collection according to the given options.\n-     *\n-     * @param filter the query filter\n-     * @param options the options describing the count\n-     * @return n {@link Uni} completed with the number of documents\n-     */\n-    Uni<Long> countDocuments(Bson filter, CountOptions options);\n-\n-    /**\n-     * Counts the number of documents in the collection according to the given options.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @return n {@link Uni} completed with the number of documents\n-     */\n-    Uni<Long> countDocuments(ClientSession clientSession);\n-\n-    /**\n-     * Counts the number of documents in the collection according to the given options.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter\n-     * @return n {@link Uni} completed with the number of documents\n-     */\n-    Uni<Long> countDocuments(ClientSession clientSession, Bson filter);\n-\n-    /**\n-     * Counts the number of documents in the collection according to the given options.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter\n-     * @param options the options describing the count\n-     * @return n {@link Uni} completed with the number of documents\n-     */\n-    Uni<Long> countDocuments(ClientSession clientSession, Bson filter, CountOptions options);\n-\n-    /**\n-     * Gets the distinct values of the specified field name.\n-     *\n-     * @param fieldName the field name*\n-     * @param clazz the default class to cast any distinct items into.\n-     * @param <D> the target type of the iterable.\n-     * @return a multi emitting the sequence of distinct values\n-     */\n-    <D> Multi<D> distinct(String fieldName, Class<D> clazz);\n-\n-    /**\n-     * Gets the distinct values of the specified field name.\n-     *\n-     * @param fieldName the field name\n-     * @param filter the query filter\n-     * @param clazz the default class to cast any distinct items into.\n-     * @param <D> the target type of the iterable.\n-     * @return a multi emitting the sequence of distinct values\n-     */\n-    <D> Multi<D> distinct(String fieldName, Bson filter, Class<D> clazz);\n-\n-    /**\n-     * Gets the distinct values of the specified field name.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param fieldName the field name\n-     * @param clazz the default class to cast any distinct items into.\n-     * @param <D> the target type of the iterable.\n-     * @return a multi emitting the sequence of distinct values\n-     */\n-    <D> Multi<D> distinct(ClientSession clientSession, String fieldName, Class<D> clazz);\n-\n-    /**\n-     * Gets the distinct values of the specified field name.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param fieldName the field name\n-     * @param filter the query filter\n-     * @param clazz the default class to cast any distinct items into.\n-     * @param <D> the target type of the iterable.\n-     * @return a multi emitting the sequence of distinct values\n-     */\n-    <D> Multi<D> distinct(ClientSession clientSession, String fieldName, Bson filter, Class<D> clazz);\n-\n-    /**\n-     * Gets the distinct values of the specified field name.\n-     *\n-     * @param fieldName the field name\n-     * @param clazz the default class to cast any distinct items into.\n-     * @param <D> the target type of the iterable.\n-     * @param options the stream options\n-     * @return a multi emitting the sequence of distinct values\n-     */\n-    <D> Multi<D> distinct(String fieldName, Class<D> clazz, DistinctOptions options);\n-\n-    /**\n-     * Gets the distinct values of the specified field name.\n-     *\n-     * @param fieldName the field name\n-     * @param filter the query filter\n-     * @param clazz the default class to cast any distinct items into.\n-     * @param <D> the target type of the iterable.\n-     * @param options the stream options\n-     * @return a multi emitting the sequence of distinct values\n-     */\n-    <D> Multi<D> distinct(String fieldName, Bson filter, Class<D> clazz, DistinctOptions options);\n-\n-    /**\n-     * Gets the distinct values of the specified field name.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param fieldName the field name\n-     * @param clazz the default class to cast any distinct items into.\n-     * @param <D> the target type of the iterable.\n-     * @param options the stream options\n-     * @return a multi emitting the sequence of distinct values\n-     */\n-    <D> Multi<D> distinct(ClientSession clientSession, String fieldName, Class<D> clazz,\n-            DistinctOptions options);\n-\n-    /**\n-     * Gets the distinct values of the specified field name.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param fieldName the field name\n-     * @param filter the query filter\n-     * @param clazz the default class to cast any distinct items into.\n-     * @param <D> the target type of the iterable.\n-     * @param options the stream options\n-     * @return a multi emitting the sequence of distinct values\n-     */\n-    <D> Multi<D> distinct(ClientSession clientSession, String fieldName, Bson filter, Class<D> clazz,\n-            DistinctOptions options);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    Multi<T> find();\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    <D> Multi<D> find(Class<D> clazz);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param filter the query filter\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    Multi<T> find(Bson filter);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param filter the query filter\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    <D> Multi<D> find(Bson filter, Class<D> clazz);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    Multi<T> find(ClientSession clientSession);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    <D> Multi<D> find(ClientSession clientSession, Class<D> clazz);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    Multi<T> find(ClientSession clientSession, Bson filter);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    <D> Multi<D> find(ClientSession clientSession, Bson filter, Class<D> clazz);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param options the stream options\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    Multi<T> find(FindOptions options);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @param options the stream options\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    <D> Multi<D> find(Class<D> clazz, FindOptions options);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param filter the query filter\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    Multi<T> find(Bson filter, FindOptions options);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param filter the query filter\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @param options the stream options\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    <D> Multi<D> find(Bson filter, Class<D> clazz, FindOptions options);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param options the stream options\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    Multi<T> find(ClientSession clientSession, FindOptions options);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @param options the stream options\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    <D> Multi<D> find(ClientSession clientSession, Class<D> clazz, FindOptions options);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter\n-     * @param options the stream options\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    Multi<T> find(ClientSession clientSession, Bson filter, FindOptions options);\n-\n-    /**\n-     * Finds all documents in the collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @param options the stream options\n-     * @return the stream with the selected documents, can be empty if none matches.\n-     */\n-    <D> Multi<D> find(ClientSession clientSession, Bson filter, Class<D> clazz, FindOptions options);\n-\n-    /**\n-     * Aggregates documents according to the specified aggregation pipeline.\n-     *\n-     * @param pipeline the aggregate pipeline\n-     * @return a stream containing the result of the aggregation operation\n-     */\n-    Multi<Document> aggregate(List<? extends Bson> pipeline);\n-\n-    /**\n-     * Aggregates documents according to the specified aggregation pipeline.\n-     *\n-     * @param pipeline the aggregate pipeline\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return a stream containing the result of the aggregation operation\n-     */\n-    <D> Multi<D> aggregate(List<? extends Bson> pipeline, Class<D> clazz);\n-\n-    /**\n-     * Aggregates documents according to the specified aggregation pipeline.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param pipeline the aggregate pipeline\n-     * @return a stream containing the result of the aggregation operation\n-     */\n-    Multi<Document> aggregate(ClientSession clientSession, List<? extends Bson> pipeline);\n-\n-    /**\n-     * Aggregates documents according to the specified aggregation pipeline.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param pipeline the aggregate pipeline\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return a stream containing the result of the aggregation operation\n-     */\n-    <D> Multi<D> aggregate(ClientSession clientSession, List<? extends Bson> pipeline, Class<D> clazz);\n-\n-    //\n-\n-    /**\n-     * Aggregates documents according to the specified aggregation pipeline.\n-     *\n-     * @param pipeline the aggregate pipeline\n-     * @param options the stream options\n-     * @return a stream containing the result of the aggregation operation\n-     */\n-    Multi<Document> aggregate(List<? extends Bson> pipeline, AggregateOptions options);\n-\n-    /**\n-     * Aggregates documents according to the specified aggregation pipeline.\n-     *\n-     * @param pipeline the aggregate pipeline\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @param options the stream options\n-     * @return a stream containing the result of the aggregation operation\n-     */\n-    <D> Multi<D> aggregate(List<? extends Bson> pipeline, Class<D> clazz, AggregateOptions options);\n-\n-    /**\n-     * Aggregates documents according to the specified aggregation pipeline.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param pipeline the aggregate pipeline\n-     * @param options the stream options\n-     * @return a stream containing the result of the aggregation operation\n-     */\n-    Multi<Document> aggregate(ClientSession clientSession, List<? extends Bson> pipeline,\n-            AggregateOptions options);\n-\n-    /**\n-     * Aggregates documents according to the specified aggregation pipeline.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param pipeline the aggregate pipeline\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @param options the stream options\n-     * @return a stream containing the result of the aggregation operation\n-     */\n-    <D> Multi<D> aggregate(ClientSession clientSession, List<? extends Bson> pipeline, Class<D> clazz,\n-            AggregateOptions options);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @return the stream of changes\n-     */\n-    Multi<ChangeStreamDocument<Document>> watch();\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return the stream of changes\n-     */\n-    <D> Multi<ChangeStreamDocument<D>> watch(Class<D> clazz);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param pipeline the aggregation pipeline to apply to the change stream\n-     * @return the stream of changes\n-     */\n-    Multi<ChangeStreamDocument<Document>> watch(List<? extends Bson> pipeline);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param pipeline the aggregation pipeline to apply to the change stream\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return the stream of changes\n-     */\n-    <D> Multi<ChangeStreamDocument<D>> watch(List<? extends Bson> pipeline, Class<D> clazz);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @return the stream of changes\n-     */\n-    Multi<ChangeStreamDocument<Document>> watch(ClientSession clientSession);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return the stream of changes\n-     */\n-    <D> Multi<ChangeStreamDocument<D>> watch(ClientSession clientSession, Class<D> clazz);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param pipeline the aggregation pipeline to apply to the change stream\n-     * @return the stream of changes\n-     */\n-    Multi<ChangeStreamDocument<Document>> watch(ClientSession clientSession, List<? extends Bson> pipeline);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param pipeline the aggregation pipeline to apply to the change stream\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return the stream of changes\n-     */\n-    <D> Multi<ChangeStreamDocument<D>> watch(ClientSession clientSession, List<? extends Bson> pipeline,\n-            Class<D> clazz);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param options the stream options\n-     * @return the stream of changes\n-     */\n-    Multi<ChangeStreamDocument<Document>> watch(ChangeStreamOptions options);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @param options the stream options\n-     * @return the stream of changes\n-     */\n-    <D> Multi<ChangeStreamDocument<D>> watch(Class<D> clazz,\n-            ChangeStreamOptions options);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param pipeline the aggregation pipeline to apply to the change stream\n-     * @param options the stream options\n-     * @return the stream of changes\n-     */\n-    Multi<ChangeStreamDocument<Document>> watch(List<? extends Bson> pipeline,\n-            ChangeStreamOptions options);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param pipeline the aggregation pipeline to apply to the change stream\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @param options the stream options\n-     * @return the stream of changes\n-     */\n-    <D> Multi<ChangeStreamDocument<D>> watch(List<? extends Bson> pipeline, Class<D> clazz,\n-            ChangeStreamOptions options);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param options the stream options\n-     * @return the stream of changes\n-     */\n-    Multi<ChangeStreamDocument<Document>> watch(ClientSession clientSession,\n-            ChangeStreamOptions options);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @param options the stream options\n-     * @return the stream of changes\n-     */\n-    <D> Multi<ChangeStreamDocument<D>> watch(ClientSession clientSession, Class<D> clazz,\n-            ChangeStreamOptions options);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param pipeline the aggregation pipeline to apply to the change stream\n-     * @param options the stream options\n-     * @return the stream of changes\n-     */\n-    Multi<ChangeStreamDocument<Document>> watch(ClientSession clientSession, List<? extends Bson> pipeline,\n-            ChangeStreamOptions options);\n-\n-    /**\n-     * Creates a change stream for this collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param pipeline the aggregation pipeline to apply to the change stream\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @param options the stream options\n-     * @return the stream of changes\n-     */\n-    <D> Multi<ChangeStreamDocument<D>> watch(ClientSession clientSession, List<? extends Bson> pipeline,\n-            Class<D> clazz, ChangeStreamOptions options);\n-\n-    Multi<Document> mapReduce(String mapFunction, String reduceFunction);\n-\n-    <D> Multi<D> mapReduce(String mapFunction, String reduceFunction, Class<D> clazz);\n-\n-    Multi<Document> mapReduce(ClientSession clientSession, String mapFunction, String reduceFunction);\n-\n-    <D> Multi<D> mapReduce(ClientSession clientSession, String mapFunction, String reduceFunction,\n-            Class<D> clazz);\n-\n-    Multi<Document> mapReduce(String mapFunction, String reduceFunction, MapReduceOptions options);\n-\n-    <D> Multi<D> mapReduce(String mapFunction, String reduceFunction, Class<D> clazz,\n-            MapReduceOptions options);\n-\n-    Multi<Document> mapReduce(ClientSession clientSession, String mapFunction, String reduceFunction,\n-            MapReduceOptions options);\n-\n-    <D> Multi<D> mapReduce(ClientSession clientSession, String mapFunction, String reduceFunction,\n-            Class<D> clazz,\n-            MapReduceOptions options);\n-\n-    /**\n-     * Executes a mix of inserts, updates, replaces, and deletes.\n-     *\n-     * @param requests the writes to execute\n-     * @return n {@link Uni} receiving the {@link BulkWriteResult}\n-     */\n-    Uni<BulkWriteResult> bulkWrite(List<? extends WriteModel<? extends T>> requests);\n-\n-    /**\n-     * Executes a mix of inserts, updates, replaces, and deletes.\n-     *\n-     * @param requests the writes to execute\n-     * @param options the options to apply to the bulk write operation\n-     * @return n {@link Uni} receiving the {@link BulkWriteResult}\n-     */\n-    Uni<BulkWriteResult> bulkWrite(List<? extends WriteModel<? extends T>> requests,\n-            BulkWriteOptions options);\n-\n-    /**\n-     * Executes a mix of inserts, updates, replaces, and deletes.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param requests the writes to execute\n-     * @return n {@link Uni} receiving the {@link BulkWriteResult}\n-     */\n-    Uni<BulkWriteResult> bulkWrite(ClientSession clientSession,\n-            List<? extends WriteModel<? extends T>> requests);\n-\n-    /**\n-     * Executes a mix of inserts, updates, replaces, and deletes.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param requests the writes to execute\n-     * @param options the options to apply to the bulk write operation\n-     * @return n {@link Uni} receiving the {@link BulkWriteResult}\n-     */\n-    Uni<BulkWriteResult> bulkWrite(ClientSession clientSession,\n-            List<? extends WriteModel<? extends T>> requests,\n-            BulkWriteOptions options);\n-\n-    /**\n-     * Inserts the provided document. If the document is missing an identifier, the driver should generate one.\n-     *\n-     * @param document the document to insert\n-     * @return n {@link Uni} completed successfully when the operation completes, or completed exceptionally with\n-     *         either a {@link com.mongodb.DuplicateKeyException} or {@link com.mongodb.MongoException}\n-     */\n-    Uni<Void> insertOne(T document);\n-\n-    /**\n-     * Inserts the provided document. If the document is missing an identifier, the driver should generate one.\n-     *\n-     * @param document the document to insert\n-     * @param options the options to apply to the operation\n-     * @return n {@link Uni} completed successfully when the operation completes, or completed exceptionally with\n-     *         either a {@link com.mongodb.DuplicateKeyException} or {@link com.mongodb.MongoException}\n-     */\n-    Uni<Void> insertOne(T document, InsertOneOptions options);\n-\n-    /**\n-     * Inserts the provided document. If the document is missing an identifier, the driver should generate one.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param document the document to insert\n-     * @return n {@link Uni} completed successfully when the operation completes, or completed exceptionally with\n-     *         either a {@link com.mongodb.DuplicateKeyException} or {@link com.mongodb.MongoException}\n-     */\n-    Uni<Void> insertOne(ClientSession clientSession, T document);\n-\n-    /**\n-     * Inserts the provided document. If the document is missing an identifier, the driver should generate one.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param document the document to insert\n-     * @param options the options to apply to the operation\n-     * @return n {@link Uni} completed successfully when the operation completes, or completed exceptionally with\n-     *         either a {@link com.mongodb.DuplicateKeyException} or {@link com.mongodb.MongoException}\n-     */\n-    Uni<Void> insertOne(ClientSession clientSession, T document, InsertOneOptions options);\n-\n-    /**\n-     * Inserts a batch of documents. The preferred way to perform bulk inserts is to use the BulkWrite API.\n-     *\n-     * @param documents the documents to insert\n-     * @return n {@link Uni} completed successfully when the operation completes, or completed exceptionally with\n-     *         either a {@link com.mongodb.DuplicateKeyException} or {@link com.mongodb.MongoException}\n-     */\n-    Uni<Void> insertMany(List<? extends T> documents);\n-\n-    /**\n-     * Inserts a batch of documents. The preferred way to perform bulk inserts is to use the BulkWrite API.\n-     *\n-     * @param documents the documents to insert\n-     * @param options the options to apply to the operation\n-     * @return n {@link Uni} completed successfully when the operation completes, or completed exceptionally with\n-     *         either a {@link com.mongodb.DuplicateKeyException} or {@link com.mongodb.MongoException}\n-     */\n-    Uni<Void> insertMany(List<? extends T> documents, InsertManyOptions options);\n-\n-    /**\n-     * Inserts a batch of documents. The preferred way to perform bulk inserts is to use the BulkWrite API.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param documents the documents to insert\n-     * @return n {@link Uni} completed successfully when the operation completes, or completed exceptionally with\n-     *         either a {@link com.mongodb.DuplicateKeyException} or {@link com.mongodb.MongoException}\n-     */\n-    Uni<Void> insertMany(ClientSession clientSession, List<? extends T> documents);\n-\n-    /**\n-     * Inserts a batch of documents. The preferred way to perform bulk inserts is to use the BulkWrite API.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param documents the documents to insert\n-     * @param options the options to apply to the operation\n-     * @return n {@link Uni} completed successfully when the operation completes, or completed exceptionally with\n-     *         either a {@link com.mongodb.DuplicateKeyException} or {@link com.mongodb.MongoException}\n-     */\n-    Uni<Void> insertMany(ClientSession clientSession, List<? extends T> documents,\n-            InsertManyOptions options);\n-\n-    /**\n-     * Removes at most one document from the collection that matches the given filter.\n-     * If no documents match, the collection is not modified.\n-     *\n-     * @param filter the query filter to apply the the delete operation\n-     * @return n {@link Uni} receiving the {@link DeleteResult} or completed exceptionally with a\n-     *         {@link com.mongodb.MongoException}\n-     */\n-    Uni<DeleteResult> deleteOne(Bson filter);\n-\n-    /**\n-     * Removes at most one document from the collection that matches the given filter.\n-     * If no documents match, the collection is not modified.\n-     *\n-     * @param filter the query filter to apply the the delete operation\n-     * @param options the options to apply to the delete operation\n-     * @return n {@link Uni} receiving the {@link DeleteResult} or completed exceptionally with a\n-     *         {@link com.mongodb.MongoException}\n-     */\n-    Uni<DeleteResult> deleteOne(Bson filter, DeleteOptions options);\n-\n-    /**\n-     * Removes at most one document from the collection that matches the given filter.\n-     * If no documents match, the collection is not modified.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter to apply the the delete operation\n-     * @return n {@link Uni} receiving the {@link DeleteResult} or completed exceptionally with a\n-     *         {@link com.mongodb.MongoException}\n-     */\n-    Uni<DeleteResult> deleteOne(ClientSession clientSession, Bson filter);\n-\n-    /**\n-     * Removes at most one document from the collection that matches the given filter.\n-     * If no documents match, the collection is not modified.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter to apply the the delete operation\n-     * @param options the options to apply to the delete operation\n-     * @return n {@link Uni} receiving the {@link DeleteResult} or completed exceptionally with a\n-     *         {@link com.mongodb.MongoException}\n-     */\n-    Uni<DeleteResult> deleteOne(ClientSession clientSession, Bson filter, DeleteOptions options);\n-\n-    /**\n-     * Removes all documents from the collection that match the given query filter. If no documents match, the\n-     * collection is not modified.\n-     *\n-     * @param filter the query filter to apply the the delete operation\n-     * @return n {@link Uni} receiving the {@link DeleteResult} or completed exceptionally with a\n-     *         {@link com.mongodb.MongoException}\n-     */\n-    Uni<DeleteResult> deleteMany(Bson filter);\n-\n-    /**\n-     * Removes all documents from the collection that match the given query filter. If no documents match, the\n-     * collection is not modified.\n-     *\n-     * @param filter the query filter to apply the the delete operation\n-     * @param options the options to apply to the delete operation\n-     * @return n {@link Uni} receiving the {@link DeleteResult} or completed exceptionally with a\n-     *         {@link com.mongodb.MongoException}\n-     */\n-    Uni<DeleteResult> deleteMany(Bson filter, DeleteOptions options);\n-\n-    /**\n-     * Removes all documents from the collection that match the given query filter. If no documents match, the\n-     * collection is not modified.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter to apply the the delete operation\n-     * @return n {@link Uni} receiving the {@link DeleteResult} or completed exceptionally with a\n-     *         {@link com.mongodb.MongoException}\n-     */\n-    Uni<DeleteResult> deleteMany(ClientSession clientSession, Bson filter);\n-\n-    /**\n-     * Removes all documents from the collection that match the given query filter. If no documents match, the\n-     * collection is not modified.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter to apply the the delete operation\n-     * @param options the options to apply to the delete operation\n-     * @return n {@link Uni} receiving the {@link DeleteResult} or completed exceptionally with a\n-     *         {@link com.mongodb.MongoException}\n-     */\n-    Uni<DeleteResult> deleteMany(ClientSession clientSession, Bson filter, DeleteOptions options);\n-\n-    /**\n-     * Replace a document in the collection according to the specified arguments.\n-     *\n-     * @param filter the query filter to apply the the replace operation\n-     * @param replacement the replacement document\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> replaceOne(Bson filter, T replacement);\n-\n-    /**\n-     * Replace a document in the collection according to the specified arguments.\n-     *\n-     * @param filter the query filter to apply the the replace operation\n-     * @param replacement the replacement document\n-     * @param options the options to apply to the replace operation\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> replaceOne(Bson filter, T replacement, ReplaceOptions options);\n-\n-    /**\n-     * Replace a document in the collection according to the specified arguments.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter to apply the the replace operation\n-     * @param replacement the replacement document\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> replaceOne(ClientSession clientSession, Bson filter, T replacement);\n-\n-    /**\n-     * Replace a document in the collection according to the specified arguments.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter to apply the the replace operation\n-     * @param replacement the replacement document\n-     * @param options the options to apply to the replace operation\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> replaceOne(ClientSession clientSession, Bson filter, T replacement,\n-            ReplaceOptions options);\n-\n-    /**\n-     * Update a single document in the collection according to the specified arguments.\n-     *\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> updateOne(Bson filter, Bson update);\n-\n-    /**\n-     * Update a single document in the collection according to the specified arguments.\n-     *\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @param options the options to apply to the update operation\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> updateOne(Bson filter, Bson update, UpdateOptions options);\n-\n-    /**\n-     * Update a single document in the collection according to the specified arguments.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> updateOne(ClientSession clientSession, Bson filter, Bson update);\n-\n-    /**\n-     * Update a single document in the collection according to the specified arguments.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @param options the options to apply to the update operation\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> updateOne(ClientSession clientSession, Bson filter, Bson update,\n-            UpdateOptions options);\n-\n-    /**\n-     * Update all documents in the collection according to the specified arguments.\n-     *\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> updateMany(Bson filter, Bson update);\n-\n-    /**\n-     * Update all documents in the collection according to the specified arguments.\n-     *\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @param options the options to apply to the update operation\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> updateMany(Bson filter, Bson update, UpdateOptions options);\n-\n-    /**\n-     * Update all documents in the collection according to the specified arguments.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> updateMany(ClientSession clientSession, Bson filter, Bson update);\n-\n-    /**\n-     * Update all documents in the collection according to the specified arguments.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @param options the options to apply to the update operation\n-     * @return n {@link Uni} receiving the {@link UpdateResult}\n-     */\n-    Uni<UpdateResult> updateMany(ClientSession clientSession, Bson filter, Bson update,\n-            UpdateOptions options);\n-\n-    /**\n-     * Atomically find a document and remove it.\n-     *\n-     * @param filter the query filter to find the document with\n-     * @return n {@link Uni} completed with the document that was removed. If no documents matched the query filter,\n-     *         then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndDelete(Bson filter);\n-\n-    /**\n-     * Atomically find a document and remove it.\n-     *\n-     * @param filter the query filter to find the document with\n-     * @param options the options to apply to the operation\n-     * @return n {@link Uni} completed with the document that was removed. If no documents matched the query filter,\n-     *         then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndDelete(Bson filter, FindOneAndDeleteOptions options);\n-\n-    /**\n-     * Atomically find a document and remove it.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter to find the document with\n-     * @return n {@link Uni} completed with the document that was removed. If no documents matched the query filter,\n-     *         then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndDelete(ClientSession clientSession, Bson filter);\n-\n-    /**\n-     * Atomically find a document and remove it.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter to find the document with\n-     * @param options the options to apply to the operation\n-     * @return n {@link Uni} completed with the document that was removed. If no documents matched the query filter,\n-     *         then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndDelete(ClientSession clientSession, Bson filter, FindOneAndDeleteOptions options);\n-\n-    /**\n-     * Atomically find a document and replace it.\n-     *\n-     * @param filter the query filter to apply the the replace operation\n-     * @param replacement the replacement document\n-     * @return n {@link Uni} completed with the document that was replaced. Depending on the value of the\n-     *         {@code returnOriginal}\n-     *         property, this will either be the document as it was before the update or as it is after the update. If no\n-     *         documents matched the\n-     *         query filter, then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndReplace(Bson filter, T replacement);\n-\n-    /**\n-     * Atomically find a document and replace it.\n-     *\n-     * @param filter the query filter to apply the the replace operation\n-     * @param replacement the replacement document\n-     * @param options the options to apply to the operation\n-     * @return n {@link Uni} completed with the document that was replaced. Depending on the value of the\n-     *         {@code returnOriginal}\n-     *         property, this will either be the document as it was before the update or as it is after the update. If no\n-     *         documents matched the\n-     *         query filter, then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndReplace(Bson filter, T replacement, FindOneAndReplaceOptions options);\n-\n-    /**\n-     * Atomically find a document and replace it.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter to apply the the replace operation\n-     * @param replacement the replacement document\n-     * @return n {@link Uni} completed with the document that was replaced. Depending on the value of the\n-     *         {@code returnOriginal}\n-     *         property, this will either be the document as it was before the update or as it is after the update. If no\n-     *         documents matched the\n-     *         query filter, then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndReplace(ClientSession clientSession, Bson filter, T replacement);\n-\n-    /**\n-     * Atomically find a document and replace it.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter the query filter to apply the the replace operation\n-     * @param replacement the replacement document\n-     * @param options the options to apply to the operation\n-     * @return n {@link Uni} completed with the document that was replaced. Depending on the value of the\n-     *         {@code returnOriginal}\n-     *         property, this will either be the document as it was before the update or as it is after the update. If no\n-     *         documents matched the\n-     *         query filter, then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndReplace(ClientSession clientSession, Bson filter, T replacement,\n-            FindOneAndReplaceOptions options);\n-\n-    /**\n-     * Atomically find a document and update it.\n-     *\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @return n {@link Uni} completed with the document that was updated. Depending on the value of the\n-     *         {@code returnOriginal}\n-     *         property, this will either be the document as it was before the update or as it is after the update. If no\n-     *         documents matched the\n-     *         query filter, then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndUpdate(Bson filter, Bson update);\n-\n-    /**\n-     * Atomically find a document and update it.\n-     *\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @param options the options to apply to the operation\n-     * @return n {@link Uni} completed with the document that was updated. Depending on the value of the\n-     *         {@code returnOriginal}\n-     *         property, this will either be the document as it was before the update or as it is after the update. If no\n-     *         documents matched the\n-     *         query filter, then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndUpdate(Bson filter, Bson update, FindOneAndUpdateOptions options);\n-\n-    /**\n-     * Atomically find a document and update it.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @return n {@link Uni} completed with the document that was updated. Depending on the value of the\n-     *         {@code returnOriginal}\n-     *         property, this will either be the document as it was before the update or as it is after the update. If no\n-     *         documents matched the\n-     *         query filter, then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndUpdate(ClientSession clientSession, Bson filter, Bson update);\n-\n-    /**\n-     * Atomically find a document and update it.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param filter a document describing the query filter, which may not be null.\n-     * @param update a document describing the update, which may not be null. The update to apply must include only update\n-     *        operators.\n-     * @param options the options to apply to the operation\n-     * @return n {@link Uni} completed with the document that was updated. Depending on the value of the\n-     *         {@code returnOriginal}\n-     *         property, this will either be the document as it was before the update or as it is after the update. If no\n-     *         documents matched the\n-     *         query filter, then the uni is completed with {@code null}.\n-     */\n-    Uni<T> findOneAndUpdate(ClientSession clientSession, Bson filter, Bson update,\n-            FindOneAndUpdateOptions options);\n-\n-    /**\n-     * Drops this collection from the database.\n-     *\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> drop();\n-\n-    /**\n-     * Drops this collection from the database.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> drop(ClientSession clientSession);\n-\n-    /**\n-     * Creates an index.\n-     *\n-     * @param key an object describing the index key(s), which may not be null.\n-     * @return n {@link Uni} receiving the created index name.\n-     */\n-    Uni<String> createIndex(Bson key);\n-\n-    /**\n-     * Creates an index.\n-     *\n-     * @param key an object describing the index key(s), which may not be null.\n-     * @param options the options for the index\n-     * @return n {@link Uni} receiving the created index name.\n-     */\n-    Uni<String> createIndex(Bson key, IndexOptions options);\n-\n-    /**\n-     * Creates an index.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param key an object describing the index key(s), which may not be null.\n-     * @return n {@link Uni} receiving the created index name.\n-     */\n-    Uni<String> createIndex(ClientSession clientSession, Bson key);\n-\n-    /**\n-     * Creates an index.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param key an object describing the index key(s), which may not be null.\n-     * @param options the options for the index\n-     * @return n {@link Uni} receiving the created index name.\n-     */\n-    Uni<String> createIndex(ClientSession clientSession, Bson key, IndexOptions options);\n-\n-    /**\n-     * Create multiple indexes.\n-     *\n-     * @param indexes the list of indexes\n-     * @return n {@link Uni} completed with the result when the operation is done. The redeemed list contains the\n-     *         created index names.\n-     */\n-    Uni<List<String>> createIndexes(List<IndexModel> indexes);\n-\n-    /**\n-     * Create multiple indexes.\n-     *\n-     * @param indexes the list of indexes\n-     * @param createIndexOptions options to use when creating indexes\n-     * @return n {@link Uni} completed with the result when the operation is done. The redeemed list contains the\n-     *         created index names.\n-     */\n-    Uni<List<String>> createIndexes(List<IndexModel> indexes, CreateIndexOptions createIndexOptions);\n-\n-    /**\n-     * Create multiple indexes.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param indexes the list of indexes\n-     * @return n {@link Uni} completed with the result when the operation is done. The redeemed list contains the\n-     *         created index names.\n-     */\n-    Uni<List<String>> createIndexes(ClientSession clientSession, List<IndexModel> indexes);\n-\n-    /**\n-     * Create multiple indexes.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param indexes the list of indexes\n-     * @param createIndexOptions options to use when creating indexes\n-     * @return n {@link Uni} completed with the result when the operation is done. The redeemed list contains the\n-     *         created index names.\n-     */\n-    Uni<List<String>> createIndexes(ClientSession clientSession, List<IndexModel> indexes,\n-            CreateIndexOptions createIndexOptions);\n-\n-    /**\n-     * Get all the indexes in this collection.\n-     *\n-     * @return the stream of indexes\n-     */\n-    Multi<Document> listIndexes();\n-\n-    /**\n-     * Get all the indexes in this collection.\n-     *\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return the stream of indexes\n-     */\n-    <D> Multi<D> listIndexes(Class<D> clazz);\n-\n-    /**\n-     * Get all the indexes in this collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @return the stream of indexes\n-     */\n-    Multi<Document> listIndexes(ClientSession clientSession);\n-\n-    /**\n-     * Get all the indexes in this collection.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param clazz the class to decode each document into\n-     * @param <D> the target document type of the iterable.\n-     * @return the stream of indexes\n-     */\n-    <D> Multi<D> listIndexes(ClientSession clientSession, Class<D> clazz);\n-\n-    /**\n-     * Drops the index given the keys used to create it.\n-     *\n-     * @param indexName the name of the index to remove\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndex(String indexName);\n-\n-    /**\n-     * Drops the index given the keys used to create it.\n-     *\n-     * @param keys the keys of the index to remove\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndex(Bson keys);\n-\n-    /**\n-     * Drops the index given the keys used to create it.\n-     *\n-     * @param indexName the name of the index to remove\n-     * @param dropIndexOptions options to use when dropping indexes\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndex(String indexName, DropIndexOptions dropIndexOptions);\n-\n-    /**\n-     * Drops the index given the keys used to create it.\n-     *\n-     * @param keys the keys of the index to remove\n-     * @param dropIndexOptions options to use when dropping indexes\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndex(Bson keys, DropIndexOptions dropIndexOptions);\n-\n-    /**\n-     * Drops the index given the keys used to create it.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param indexName the name of the index to remove\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndex(ClientSession clientSession, String indexName);\n-\n-    /**\n-     * Drops the index given the keys used to create it.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param keys the keys of the index to remove\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndex(ClientSession clientSession, Bson keys);\n-\n-    /**\n-     * Drops the index given the keys used to create it.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param indexName the name of the index to remove\n-     * @param dropIndexOptions options to use when dropping indexes\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndex(ClientSession clientSession, String indexName, DropIndexOptions dropIndexOptions);\n-\n-    /**\n-     * Drops the index given the keys used to create it.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param keys the keys of the index to remove\n-     * @param dropIndexOptions options to use when dropping indexes\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndex(ClientSession clientSession, Bson keys, DropIndexOptions dropIndexOptions);\n-\n-    /**\n-     * Drop all the indexes on this collection, except for the default on _id.\n-     *\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndexes();\n-\n-    /**\n-     * Drop all the indexes on this collection, except for the default on _id.\n-     *\n-     * @param dropIndexOptions options to use when dropping indexes\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndexes(DropIndexOptions dropIndexOptions);\n-\n-    /**\n-     * Drop all the indexes on this collection, except for the default on _id.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndexes(ClientSession clientSession);\n-\n-    /**\n-     * Drop all the indexes on this collection, except for the default on _id.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param dropIndexOptions options to use when dropping indexes\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> dropIndexes(ClientSession clientSession, DropIndexOptions dropIndexOptions);\n-\n-    /**\n-     * Rename the collection with oldCollectionName to the newCollectionName.\n-     *\n-     * @param newCollectionNamespace the name the collection will be renamed to\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> renameCollection(MongoNamespace newCollectionNamespace);\n-\n-    /**\n-     * Rename the collection with oldCollectionName to the newCollectionName.\n-     *\n-     * @param newCollectionNamespace the name the collection will be renamed to\n-     * @param options the options for renaming a collection\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> renameCollection(MongoNamespace newCollectionNamespace, RenameCollectionOptions options);\n-\n-    /**\n-     * Rename the collection with oldCollectionName to the newCollectionName.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param newCollectionNamespace the name the collection will be renamed to\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> renameCollection(ClientSession clientSession, MongoNamespace newCollectionNamespace);\n-\n-    /**\n-     * Rename the collection with oldCollectionName to the newCollectionName.\n-     *\n-     * @param clientSession the client session with which to associate this operation\n-     * @param newCollectionNamespace the name the collection will be renamed to\n-     * @param options the options for renaming a collection\n-     * @return n {@link Uni} completed when the operation is done.\n-     */\n-    Uni<Void> renameCollection(ClientSession clientSession, MongoNamespace newCollectionNamespace,\n-            RenameCollectionOptions options);\n-\n-    /**\n-     * Gets the codec registry of this collection.\n-     *\n-     * @return the codec registry\n-     */\n-    CodecRegistry getCodecRegistry();\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE3ODMzNg==", "url": "https://github.com/quarkusio/quarkus/pull/7263#discussion_r381178336", "bodyText": "Shouldn't it contains the both reactive clients ?", "author": "loicmathieu", "createdAt": "2020-02-19T09:43:18Z", "path": "extensions/mongodb-client/deployment/src/main/java/io/quarkus/mongodb/deployment/MongoClientBuildItem.java", "diffHunk": "@@ -3,7 +3,7 @@\n import com.mongodb.client.MongoClient;\n \n import io.quarkus.builder.item.MultiBuildItem;\n-import io.quarkus.mongodb.ReactiveMongoClient;\n+import io.quarkus.mongodb.reactive.ReactiveMongoClient;", "originalCommit": "a59e3ec04c5a6f5b58734b991f143a40a39365c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEwMzQzNg==", "url": "https://github.com/quarkusio/quarkus/pull/7263#discussion_r382103436", "bodyText": "Except if it's required for Panache, it would be preferable that extensions do not use the deprecated client as it's planed for removal.", "author": "cescoffier", "createdAt": "2020-02-20T16:14:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE3ODMzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjExNTkyOA==", "url": "https://github.com/quarkusio/quarkus/pull/7263#discussion_r382115928", "bodyText": "I don't remember all the discussions but I think the purpose of this BuildItem is to allow extensions depending on mongodb-client (today, only panache) to acess them.\nIf we decide that panache should only provides an implementation based on Mutiny (OK for me as the implementation based on Axle didn't exist in any publicly available Quarkus version), I'm OK with including only one reactive client.", "author": "loicmathieu", "createdAt": "2020-02-20T16:33:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE3ODMzNg=="}], "type": "inlineReview", "revised_code": {"commit": "ffb89d55781f5e28357a251ea5c85dcd31706d9f", "chunk": "diff --git a/extensions/mongodb-client/deployment/src/main/java/io/quarkus/mongodb/deployment/MongoClientBuildItem.java b/extensions/mongodb-client/deployment/src/main/java/io/quarkus/mongodb/deployment/MongoClientBuildItem.java\nindex 353eab886d..ce3f45033e 100644\n--- a/extensions/mongodb-client/deployment/src/main/java/io/quarkus/mongodb/deployment/MongoClientBuildItem.java\n+++ b/extensions/mongodb-client/deployment/src/main/java/io/quarkus/mongodb/deployment/MongoClientBuildItem.java\n\n@@ -3,7 +3,7 @@ package io.quarkus.mongodb.deployment;\n import com.mongodb.client.MongoClient;\n \n import io.quarkus.builder.item.MultiBuildItem;\n-import io.quarkus.mongodb.reactive.ReactiveMongoClient;\n+import io.quarkus.mongodb.ReactiveMongoClient;\n import io.quarkus.runtime.RuntimeValue;\n \n public final class MongoClientBuildItem extends MultiBuildItem {\n"}}, {"oid": "ffb89d55781f5e28357a251ea5c85dcd31706d9f", "url": "https://github.com/quarkusio/quarkus/commit/ffb89d55781f5e28357a251ea5c85dcd31706d9f", "message": "Fix typo on build item name.", "committedDate": "2020-02-20T15:07:25Z", "type": "commit"}, {"oid": "8ac359b12b8845da42af319c64bc36eff621d9a0", "url": "https://github.com/quarkusio/quarkus/commit/8ac359b12b8845da42af319c64bc36eff621d9a0", "message": "Implement the Mutiny API for the MongoDB client", "committedDate": "2020-02-20T16:26:42Z", "type": "commit"}, {"oid": "52a924264334b5dd21a099f17d3c6d21887ecdca", "url": "https://github.com/quarkusio/quarkus/commit/52a924264334b5dd21a099f17d3c6d21887ecdca", "message": "Allows producing both the new mutiny client and the legacy reactive client", "committedDate": "2020-02-20T16:26:47Z", "type": "commit"}, {"oid": "9dc7e2045cf4dea3a77b023bee580552e5f99e92", "url": "https://github.com/quarkusio/quarkus/commit/9dc7e2045cf4dea3a77b023bee580552e5f99e92", "message": "Test the new reactive client\n\nAlso test that the old legacy client is still working and is compatible.\nThe legacy client is implemented on top of the new one.", "committedDate": "2020-02-20T16:26:47Z", "type": "commit"}, {"oid": "342a10886747879698f6071c104bb96f7768533e", "url": "https://github.com/quarkusio/quarkus/commit/342a10886747879698f6071c104bb96f7768533e", "message": "Adapt the MongoClientProcessor to produce the new reactive client and the legacy one.", "committedDate": "2020-02-20T16:26:47Z", "type": "commit"}, {"oid": "30738c23543d4ea34b0007da12529f5c6913d53a", "url": "https://github.com/quarkusio/quarkus/commit/30738c23543d4ea34b0007da12529f5c6913d53a", "message": "Add tests for the new reactive client\n\n* remove duplicated tests (that are in the runtime module)\n* add test verifying the injection on named data source with both the new and legacy clients\n* add test verifying the injection of the default data source", "committedDate": "2020-02-20T16:26:47Z", "type": "commit"}, {"oid": "55a3166ee1560a5e45c770db4b3f5d306a6e23a5", "url": "https://github.com/quarkusio/quarkus/commit/55a3166ee1560a5e45c770db4b3f5d306a6e23a5", "message": "Implement integration tests to test both the legacy reactive client and the new client", "committedDate": "2020-02-20T16:26:47Z", "type": "commit"}, {"oid": "7dce32eefe2bb2b040eb9b685c8a5f667d5b4bde", "url": "https://github.com/quarkusio/quarkus/commit/7dce32eefe2bb2b040eb9b685c8a5f667d5b4bde", "message": "Add a deprecation message when the legacy reactive mongo client is produced.", "committedDate": "2020-02-20T16:26:47Z", "type": "commit"}, {"oid": "ae6d0bc2280b0787115171f1b8dfd98417e11af0", "url": "https://github.com/quarkusio/quarkus/commit/ae6d0bc2280b0787115171f1b8dfd98417e11af0", "message": "Update documentation for the new reactive client", "committedDate": "2020-02-20T16:26:47Z", "type": "commit"}, {"oid": "ae6d0bc2280b0787115171f1b8dfd98417e11af0", "url": "https://github.com/quarkusio/quarkus/commit/ae6d0bc2280b0787115171f1b8dfd98417e11af0", "message": "Update documentation for the new reactive client", "committedDate": "2020-02-20T16:26:47Z", "type": "forcePushed"}]}