{"pr_number": 10882, "pr_title": "Enabling dev mode for jandex plugin", "pr_createdAt": "2020-07-21T10:21:42Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/10882", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI2NzE4OQ==", "url": "https://github.com/quarkusio/quarkus/pull/10882#discussion_r459267189", "bodyText": "I assume this change along with the one AppModelGradleResolver have been vetted by @aloubyansky ?", "author": "geoand", "createdAt": "2020-07-23T07:40:53Z", "path": "core/deployment/src/main/java/io/quarkus/deployment/index/ApplicationArchiveBuildStep.java", "diffHunk": "@@ -247,18 +247,6 @@ private static boolean containsMarker(Path dir, Set<String> applicationArchiveFi\n     }\n \n     private static Index handleFilePath(Path path) throws IOException {", "originalCommit": "72f56a3cae1e8650e9ba13939a26e26bf8732e24", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMxODkxNA==", "url": "https://github.com/quarkusio/quarkus/pull/10882#discussion_r459318914", "bodyText": "Yes, he was guiding me throughout this so most probably", "author": "Garima829", "createdAt": "2020-07-23T09:19:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI2NzE4OQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "8ae405c1539c27a0e794dfeb9a9a595a21153ef2", "url": "https://github.com/quarkusio/quarkus/commit/8ae405c1539c27a0e794dfeb9a9a595a21153ef2", "message": "Enabling dev mode for jandex plugin", "committedDate": "2020-07-23T09:33:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM2ODMxOA==", "url": "https://github.com/quarkusio/quarkus/pull/10882#discussion_r459368318", "bodyText": "\"jandex\" should not be replacing \"processResources\" here. There should be an additional if block for \"jandex\".", "author": "aloubyansky", "createdAt": "2020-07-23T10:57:34Z", "path": "devtools/gradle/src/main/java/io/quarkus/gradle/QuarkusPlugin.java", "diffHunk": "@@ -249,7 +249,7 @@ private void setupQuarkusBuildTaskDeps(Project project, Project dep, Set<String>\n \n         final Task quarkusDev = project.getTasks().findByName(QUARKUS_DEV_TASK_NAME);\n         if (quarkusDev != null) {\n-            final Task resourcesTask = dep.getTasks().findByName(JavaPlugin.PROCESS_RESOURCES_TASK_NAME);\n+            final Task resourcesTask = dep.getTasks().findByName(\"jandex\");", "originalCommit": "8ae405c1539c27a0e794dfeb9a9a595a21153ef2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM4MDAxNQ==", "url": "https://github.com/quarkusio/quarkus/pull/10882#discussion_r459380015", "bodyText": "Okk", "author": "Garima829", "createdAt": "2020-07-23T11:23:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM2ODMxOA=="}], "type": "inlineReview", "revised_code": {"commit": "e99396eb1e45e40d7ed6530611f11dd817e66301", "chunk": "diff --git a/devtools/gradle/src/main/java/io/quarkus/gradle/QuarkusPlugin.java b/devtools/gradle/src/main/java/io/quarkus/gradle/QuarkusPlugin.java\nindex 85bdc34205..8da3b89f6b 100644\n--- a/devtools/gradle/src/main/java/io/quarkus/gradle/QuarkusPlugin.java\n+++ b/devtools/gradle/src/main/java/io/quarkus/gradle/QuarkusPlugin.java\n\n@@ -249,10 +249,15 @@ public class QuarkusPlugin implements Plugin<Project> {\n \n         final Task quarkusDev = project.getTasks().findByName(QUARKUS_DEV_TASK_NAME);\n         if (quarkusDev != null) {\n-            final Task resourcesTask = dep.getTasks().findByName(\"jandex\");\n+            final Task resourcesTask = dep.getTasks().findByName(JavaPlugin.PROCESS_RESOURCES_TASK_NAME);\n             if (resourcesTask != null) {\n                 quarkusDev.dependsOn(resourcesTask);\n             }\n+            final Task resourcesTaskJandex = dep.getTasks().findByName(\"jandex\");\n+            if (resourcesTaskJandex != null) {\n+                quarkusDev.dependsOn(resourcesTaskJandex);\n+            }\n+\n         }\n \n         final Configuration compileConfig = dep.getConfigurations().findByName(JavaPlugin.COMPILE_CLASSPATH_CONFIGURATION_NAME);\n"}}, {"oid": "e99396eb1e45e40d7ed6530611f11dd817e66301", "url": "https://github.com/quarkusio/quarkus/commit/e99396eb1e45e40d7ed6530611f11dd817e66301", "message": "Enabling dev mode for Jandex plugin", "committedDate": "2020-07-23T18:23:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA5NDIzNg==", "url": "https://github.com/quarkusio/quarkus/pull/10882#discussion_r460094236", "bodyText": "This one is checking the content of the index.html. Which you can remove given that you removed the index.xml.", "author": "aloubyansky", "createdAt": "2020-07-24T14:38:17Z", "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/devmode/JandexMultiModuleProjectDevModeTest.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package io.quarkus.gradle.devmode;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+public class JandexMultiModuleProjectDevModeTest extends QuarkusDevGradleTestBase {\n+\n+    @Override\n+    protected String projectDirectoryName() {\n+        return \"jandex-basic-multi-module-project\";\n+    }\n+\n+    @Override\n+    protected String[] buildArguments() {\n+        return new String[] { \"clean\", \":application:quarkusDev\", \"-s\" };\n+    }\n+\n+    protected void testDevMode() throws Exception {\n+\n+        assertThat(getHttpResponse())\n+                .contains(\"ready\")\n+                .contains(\"my-quarkus-project\")\n+                .contains(\"org.acme.quarkus.sample\")\n+                .contains(\"1.0-SNAPSHOT\");", "originalCommit": "e99396eb1e45e40d7ed6530611f11dd817e66301", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEwMTQ1Mw==", "url": "https://github.com/quarkusio/quarkus/pull/10882#discussion_r460101453", "bodyText": "Will remove it", "author": "Garima829", "createdAt": "2020-07-24T14:49:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA5NDIzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEwNjg2OQ==", "url": "https://github.com/quarkusio/quarkus/pull/10882#discussion_r460106869", "bodyText": "The idea behind removing this assert statement is to straightaway check for the /hello endpoint right ?", "author": "Garima829", "createdAt": "2020-07-24T14:58:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA5NDIzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEwOTQyOA==", "url": "https://github.com/quarkusio/quarkus/pull/10882#discussion_r460109428", "bodyText": "The idea is that the application no longer serves the index.html and it suffices to just check /hello - checking the contents of index.html doesn't provide anything useful to this test", "author": "geoand", "createdAt": "2020-07-24T15:02:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA5NDIzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDExMTY1Ng==", "url": "https://github.com/quarkusio/quarkus/pull/10882#discussion_r460111656", "bodyText": "Okk", "author": "Garima829", "createdAt": "2020-07-24T15:05:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA5NDIzNg=="}], "type": "inlineReview", "revised_code": {"commit": "6d13e1c1f442cb5a1a04a59d09c932f2f5bc3e93", "chunk": "diff --git a/integration-tests/gradle/src/test/java/io/quarkus/gradle/devmode/JandexMultiModuleProjectDevModeTest.java b/integration-tests/gradle/src/test/java/io/quarkus/gradle/devmode/JandexMultiModuleProjectDevModeTest.java\nindex 499254f5d5..a799504010 100644\n--- a/integration-tests/gradle/src/test/java/io/quarkus/gradle/devmode/JandexMultiModuleProjectDevModeTest.java\n+++ b/integration-tests/gradle/src/test/java/io/quarkus/gradle/devmode/JandexMultiModuleProjectDevModeTest.java\n\n@@ -16,13 +16,7 @@ public class JandexMultiModuleProjectDevModeTest extends QuarkusDevGradleTestBas\n         return new String[] { \"clean\", \":application:quarkusDev\", \"-s\" };\n     }\n \n-    protected void testDevMode() throws Exception {\n-\n-        assertThat(getHttpResponse())\n-                .contains(\"ready\")\n-                .contains(\"my-quarkus-project\")\n-                .contains(\"org.acme.quarkus.sample\")\n-                .contains(\"1.0-SNAPSHOT\");\n+    protected void testDevMode() {\n \n         assertThat(getHttpResponse(\"/hello\")).contains(\"hello common\");\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE3MDczOQ==", "url": "https://github.com/quarkusio/quarkus/pull/10882#discussion_r460170739", "bodyText": "This change should now move to https://github.com/quarkusio/quarkus/blob/master/devtools/gradle/src/main/java/io/quarkus/gradle/builder/QuarkusModelBuilder.java#L285", "author": "aloubyansky", "createdAt": "2020-07-24T16:49:02Z", "path": "devtools/gradle/src/main/java/io/quarkus/gradle/AppModelGradleResolver.java", "diffHunk": "@@ -273,6 +273,13 @@ private void collectDependencies(Configuration config, AppModel.Builder appBuild\n                             paths.add(resourcesDir.toPath());\n                         }\n                     }\n+\n+                    for (File outputDir : depProject.getTasks().findByName(JavaPlugin.PROCESS_RESOURCES_TASK_NAME)\n+                            .getOutputs().getFiles()) {\n+                        if (outputDir.exists()) {\n+                            paths.add(outputDir.toPath());\n+                        }\n+                    }", "originalCommit": "e99396eb1e45e40d7ed6530611f11dd817e66301", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1NTY0MA==", "url": "https://github.com/quarkusio/quarkus/pull/10882#discussion_r460355640", "bodyText": "Okk", "author": "Garima829", "createdAt": "2020-07-25T02:57:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE3MDczOQ=="}], "type": "inlineReview", "revised_code": {"commit": "6d13e1c1f442cb5a1a04a59d09c932f2f5bc3e93", "chunk": "diff --git a/devtools/gradle/src/main/java/io/quarkus/gradle/AppModelGradleResolver.java b/devtools/gradle/src/main/java/io/quarkus/gradle/AppModelGradleResolver.java\nindex c9b330b25c..501932d1fd 100644\n--- a/devtools/gradle/src/main/java/io/quarkus/gradle/AppModelGradleResolver.java\n+++ b/devtools/gradle/src/main/java/io/quarkus/gradle/AppModelGradleResolver.java\n\n@@ -137,231 +105,16 @@ public class AppModelGradleResolver implements AppModelResolver {\n \n     @Override\n     public AppModel resolveModel(AppArtifact appArtifact) throws AppModelResolverException {\n-        AppModel.Builder appBuilder = new AppModel.Builder();\n-        if (appModel != null && appModel.getAppArtifact().equals(appArtifact)) {\n-            return appModel;\n-        }\n-        final List<Dependency> directExtensionDeps = new ArrayList<>();\n-\n-        // collect enforced platforms\n-        final Configuration impl = project.getConfigurations().getByName(JavaPlugin.IMPLEMENTATION_CONFIGURATION_NAME);\n-        for (Dependency d : impl.getAllDependencies()) {\n-            if (!(d instanceof ModuleDependency)) {\n-                continue;\n-            }\n-            final ModuleDependency module = (ModuleDependency) d;\n-            final Category category = module.getAttributes().getAttribute(Category.CATEGORY_ATTRIBUTE);\n-            if (category != null && Category.ENFORCED_PLATFORM.equals(category.getName())) {\n-                directExtensionDeps.add(d);\n-            }\n-        }\n-\n-        final List<AppDependency> userDeps = new ArrayList<>();\n-        Map<AppArtifactKey, AppDependency> versionMap = new HashMap<>();\n-        Map<ModuleIdentifier, ModuleVersionIdentifier> userModules = new HashMap<>();\n-\n-        final String classpathConfigName = launchMode == LaunchMode.TEST ? JavaPlugin.TEST_RUNTIME_CLASSPATH_CONFIGURATION_NAME\n-                : JavaPlugin.RUNTIME_CLASSPATH_CONFIGURATION_NAME;\n-\n-        collectDependencies(project.getConfigurations().getByName(classpathConfigName),\n-                appBuilder, directExtensionDeps, userDeps,\n-                versionMap, userModules);\n-\n-        if (launchMode == LaunchMode.DEVELOPMENT) {\n-            collectDependencies(project.getConfigurations().getByName(JavaPlugin.COMPILE_ONLY_CONFIGURATION_NAME),\n-                    appBuilder, directExtensionDeps, userDeps,\n-                    versionMap, userModules);\n-        }\n-\n-        final List<AppDependency> deploymentDeps = new ArrayList<>();\n-        final List<AppDependency> fullDeploymentDeps = new ArrayList<>(userDeps);\n-        if (!directExtensionDeps.isEmpty()) {\n-            final Configuration deploymentConfig = project.getConfigurations()\n-                    .detachedConfiguration(directExtensionDeps.toArray(new Dependency[0]));\n-            final ResolvedConfiguration rc = deploymentConfig.getResolvedConfiguration();\n-            for (ResolvedArtifact a : rc.getResolvedArtifacts()) {\n-                final ModuleVersionIdentifier userVersion = userModules.get(getModuleId(a));\n-                if (userVersion != null || !isDependency(a)) {\n-                    continue;\n-                }\n-                final AppDependency dependency = toAppDependency(a);\n-                fullDeploymentDeps.add(dependency);\n-                if (!userDeps.contains(dependency)) {\n-                    AppDependency deploymentDep = alignVersion(dependency, versionMap);\n-                    deploymentDeps.add(deploymentDep);\n-                }\n-            }\n-        }\n-\n-        if (!appArtifact.isResolved()) {\n-            final Jar jarTask = (Jar) project.getTasks().findByName(JavaPlugin.JAR_TASK_NAME);\n-            if (jarTask == null) {\n-                throw new AppModelResolverException(\"Failed to locate task 'jar' in the project.\");\n-            }\n-            if (jarTask.getDidWork()) {\n-                final Provider<RegularFile> jarProvider = jarTask.getArchiveFile();\n-                Path classesDir = null;\n-                if (jarProvider.isPresent()) {\n-                    final File f = jarProvider.get().getAsFile();\n-                    if (f.exists()) {\n-                        classesDir = f.toPath();\n-                    }\n-                }\n-                if (classesDir == null) {\n-                    throw new AppModelResolverException(\"Failed to locate classes directory for \" + appArtifact);\n-                }\n-                appArtifact.setPaths(PathsCollection.of(classesDir));\n+        if (appModel != null) {\n+            if (appModel.getAppArtifact().equals(appArtifact)) {\n+                return appModel;\n             } else {\n-                final Convention convention = project.getConvention();\n-                JavaPluginConvention javaConvention = convention.findPlugin(JavaPluginConvention.class);\n-                if (javaConvention != null) {\n-                    final SourceSet mainSourceSet = javaConvention.getSourceSets().getByName(SourceSet.MAIN_SOURCE_SET_NAME);\n-                    PathsCollection.Builder paths = PathsCollection.builder();\n-                    mainSourceSet.getOutput().filter(s -> s.exists()).forEach(f -> {\n-                        paths.add(f.toPath());\n-                    });\n-                    for (File resourcesDir : mainSourceSet.getResources().getSourceDirectories()) {\n-                        if (resourcesDir.exists()) {\n-                            paths.add(resourcesDir.toPath());\n-                        }\n-                    }\n-                    appArtifact.setPaths(paths.build());\n-                }\n-            }\n-        }\n-\n-        appBuilder.addRuntimeDeps(userDeps)\n-                .addFullDeploymentDeps(fullDeploymentDeps)\n-                .addDeploymentDeps(deploymentDeps)\n-                .setAppArtifact(appArtifact);\n-        return this.appModel = appBuilder.build();\n-    }\n-\n-    private void collectDependencies(Configuration config, AppModel.Builder appBuilder,\n-            final List<Dependency> directExtensionDeps,\n-            final List<AppDependency> userDeps, Map<AppArtifactKey, AppDependency> versionMap,\n-            Map<ModuleIdentifier, ModuleVersionIdentifier> userModules) {\n-\n-        final ResolvedConfiguration resolvedConfig = config.getResolvedConfiguration();\n-        for (ResolvedArtifact a : resolvedConfig.getResolvedArtifacts()) {\n-            if (!isDependency(a)) {\n-                continue;\n-            }\n-            userModules.put(getModuleId(a), a.getModuleVersion().getId());\n-\n-            final AppDependency dependency = toAppDependency(a);\n-            final AppArtifactKey artifactGa = new AppArtifactKey(dependency.getArtifact().getGroupId(),\n-                    dependency.getArtifact().getArtifactId());\n-\n-            // If we are running in dev mode we prefer directories of classes and resources over the JARs\n-            // for local project dependencies\n-            if (LaunchMode.DEVELOPMENT.equals(launchMode)\n-                    && (a.getId().getComponentIdentifier() instanceof ProjectComponentIdentifier)) {\n-                final Project depProject = project.getRootProject()\n-                        .findProject(((ProjectComponentIdentifier) a.getId().getComponentIdentifier()).getProjectPath());\n-                final JavaPluginConvention javaConvention = depProject.getConvention().findPlugin(JavaPluginConvention.class);\n-                if (javaConvention != null) {\n-                    SourceSet mainSourceSet = javaConvention.getSourceSets().getByName(SourceSet.MAIN_SOURCE_SET_NAME);\n-                    final PathsCollection.Builder paths = PathsCollection.builder();\n-                    final Path classesDir = Paths\n-                            .get(QuarkusGradleUtils.getClassesDir(mainSourceSet, depProject.getBuildDir(), false));\n-                    if (Files.exists(classesDir)) {\n-                        paths.add(classesDir);\n-                    }\n-                    for (File resourcesDir : mainSourceSet.getResources().getSourceDirectories()) {\n-                        if (resourcesDir.exists()) {\n-                            paths.add(resourcesDir.toPath());\n-                        }\n-                    }\n-\n-                    for (File outputDir : depProject.getTasks().findByName(JavaPlugin.PROCESS_RESOURCES_TASK_NAME)\n-                            .getOutputs().getFiles()) {\n-                        if (outputDir.exists()) {\n-                            paths.add(outputDir.toPath());\n-                        }\n-                    }\n-                    dependency.getArtifact().setPaths(paths.build());\n-                }\n-            }\n-\n-            if (!dependency.getArtifact().isResolved()) {\n-                throw new IllegalStateException(\"Failed to resolve \" + a.getId());\n+                throw new AppModelResolverException(\n+                        \"Requested artifact : \" + appArtifact + \", does not match loaded model \" + appModel.getAppArtifact());\n             }\n-\n-            userDeps.add(dependency);\n-            versionMap.put(artifactGa, dependency);\n-        }\n-\n-        collectExtensionDeps(resolvedConfig.getFirstLevelModuleDependencies(), versionMap, appBuilder, directExtensionDeps,\n-                true, new HashSet<>());\n-    }\n-\n-    private void collectExtensionDeps(Set<ResolvedDependency> resolvedDeps,\n-            Map<AppArtifactKey, AppDependency> versionMap,\n-            AppModel.Builder appBuilder,\n-            List<Dependency> firstLevelExtensions,\n-            boolean firstLevelExt,\n-            Set<AppArtifactKey> visited) {\n-        for (ResolvedDependency dep : resolvedDeps) {\n-            final AppArtifactKey key = new AppArtifactKey(dep.getModuleGroup(), dep.getModuleName());\n-            if (!visited.add(key)) {\n-                continue;\n-            }\n-            final AppDependency appDep = versionMap.get(key);\n-            if (appDep == null) {\n-                // not a jar\n-                continue;\n-            }\n-\n-            Dependency extDep = null;\n-            for (Path artifactPath : appDep.getArtifact().getPaths()) {\n-                if (!Files.exists(artifactPath)) {\n-                    continue;\n-                }\n-                if (Files.isDirectory(artifactPath)) {\n-                    extDep = processQuarkusDir(appDep.getArtifact(), artifactPath.resolve(BootstrapConstants.META_INF),\n-                            appBuilder);\n-                } else {\n-                    try (FileSystem artifactFs = FileSystems.newFileSystem(artifactPath, null)) {\n-                        extDep = processQuarkusDir(appDep.getArtifact(), artifactFs.getPath(BootstrapConstants.META_INF),\n-                                appBuilder);\n-                    } catch (IOException e) {\n-                        throw new GradleException(\"Failed to process \" + artifactPath, e);\n-                    }\n-                }\n-                if (extDep != null) {\n-                    break;\n-                }\n-            }\n-\n-            boolean addChildExtensions = firstLevelExt;\n-            if (extDep != null && firstLevelExt) {\n-                firstLevelExtensions.add(extDep);\n-                addChildExtensions = false;\n-            }\n-            final Set<ResolvedDependency> resolvedChildren = dep.getChildren();\n-            if (!resolvedChildren.isEmpty()) {\n-                collectExtensionDeps(resolvedChildren, versionMap, appBuilder, firstLevelExtensions, addChildExtensions,\n-                        visited);\n-            }\n-        }\n-    }\n-\n-    /**\n-     * A {@link ResolvedArtifact} is valid if it's a JAR or a directory\n-     */\n-    private static boolean isDependency(ResolvedArtifact a) {\n-        return BootstrapConstants.JAR.equalsIgnoreCase(a.getExtension()) || \"exe\".equalsIgnoreCase(a.getExtension()) ||\n-                a.getFile().isDirectory();\n-    }\n-\n-    private AppDependency alignVersion(AppDependency dependency, Map<AppArtifactKey, AppDependency> versionMap) {\n-        AppArtifactKey appKey = new AppArtifactKey(dependency.getArtifact().getGroupId(),\n-                dependency.getArtifact().getArtifactId());\n-        if (versionMap.containsKey(appKey)) {\n-            return versionMap.get(appKey);\n         }\n-        return dependency;\n+        appModel = QuarkusModelHelper.convert(model, appArtifact);\n+        return appModel;\n     }\n \n     @Override\n"}}, {"oid": "6d13e1c1f442cb5a1a04a59d09c932f2f5bc3e93", "url": "https://github.com/quarkusio/quarkus/commit/6d13e1c1f442cb5a1a04a59d09c932f2f5bc3e93", "message": "Enabling dev mode for Jandex plugin, rebased PR", "committedDate": "2020-07-25T09:01:54Z", "type": "commit"}, {"oid": "6d13e1c1f442cb5a1a04a59d09c932f2f5bc3e93", "url": "https://github.com/quarkusio/quarkus/commit/6d13e1c1f442cb5a1a04a59d09c932f2f5bc3e93", "message": "Enabling dev mode for Jandex plugin, rebased PR", "committedDate": "2020-07-25T09:01:54Z", "type": "forcePushed"}]}