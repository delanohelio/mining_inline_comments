{"pr_number": 13960, "pr_title": "Ability to configure provided capabilities in the extension descriptor and detect conflicts", "pr_createdAt": "2020-12-17T22:07:13Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/13960", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTUwMDQxNA==", "url": "https://github.com/quarkusio/quarkus/pull/13960#discussion_r545500414", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        writer.write(\"Please make sure there is only one provider of the following capabailities.\");\n          \n          \n            \n                        writer.write(\"Please make sure there is only one provider of the following capabilities.\");", "author": "maxandersen", "createdAt": "2020-12-18T00:47:11Z", "path": "independent-projects/bootstrap/app-model/src/main/java/io/quarkus/bootstrap/resolver/CapabilityErrors.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.quarkus.bootstrap.resolver;\n+\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class CapabilityErrors {\n+\n+    private final Map<String, List<String>> conflicts = new HashMap<>();\n+\n+    public void addConflict(String capability, String provider) {\n+        conflicts.computeIfAbsent(capability, k -> new ArrayList<>()).add(provider);\n+    }\n+\n+    public boolean isEmpty() {\n+        return conflicts.isEmpty();\n+    }\n+\n+    public String report() {\n+        final StringWriter sw = new StringWriter();\n+        try (BufferedWriter writer = new BufferedWriter(sw)) {\n+            writer.write(\"Please make sure there is only one provider of the following capabailities.\");", "originalCommit": "8f2115fe51bb30fd4a8f8428fdde57b3548c2e36", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYzMzIwOQ==", "url": "https://github.com/quarkusio/quarkus/pull/13960#discussion_r545633209", "bodyText": "Fixed, thanks!", "author": "aloubyansky", "createdAt": "2020-12-18T08:02:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTUwMDQxNA=="}], "type": "inlineReview", "revised_code": {"commit": "c61eb0eb90bca13d0e5abb3fc62253fcbde7e181", "chunk": "diff --git a/independent-projects/bootstrap/app-model/src/main/java/io/quarkus/bootstrap/resolver/CapabilityErrors.java b/independent-projects/bootstrap/app-model/src/main/java/io/quarkus/bootstrap/resolver/CapabilityErrors.java\nindex 7d3bf66bd2..2696e7c9f9 100644\n--- a/independent-projects/bootstrap/app-model/src/main/java/io/quarkus/bootstrap/resolver/CapabilityErrors.java\n+++ b/independent-projects/bootstrap/app-model/src/main/java/io/quarkus/bootstrap/resolver/CapabilityErrors.java\n\n@@ -23,7 +23,7 @@ public class CapabilityErrors {\n     public String report() {\n         final StringWriter sw = new StringWriter();\n         try (BufferedWriter writer = new BufferedWriter(sw)) {\n-            writer.write(\"Please make sure there is only one provider of the following capabailities.\");\n+            writer.write(\"Please make sure there is only one provider of the following capabilities.\");\n             for (Map.Entry<String, List<String>> conflict : conflicts.entrySet()) {\n                 writer.newLine();\n                 writer.append(\"Capability \").append(conflict.getKey()).append(\" is provided by:\");\n"}}, {"oid": "c61eb0eb90bca13d0e5abb3fc62253fcbde7e181", "url": "https://github.com/quarkusio/quarkus/commit/c61eb0eb90bca13d0e5abb3fc62253fcbde7e181", "message": "Introduction of the notion of capabilities provided by extensions and the capability conflict checks", "committedDate": "2020-12-18T08:01:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTMwMjg2Nw==", "url": "https://github.com/quarkusio/quarkus/pull/13960#discussion_r559302867", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        writer.write(\"Please make sure there is only one provider of the following capabilities.\");\n          \n          \n            \n                        writer.write(\"Please make sure there is only one provider of the following capabilities:\");", "author": "gastaldi", "createdAt": "2021-01-18T03:48:27Z", "path": "independent-projects/bootstrap/app-model/src/main/java/io/quarkus/bootstrap/resolver/CapabilityErrors.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.quarkus.bootstrap.resolver;\n+\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class CapabilityErrors {\n+\n+    private final Map<String, List<String>> conflicts = new HashMap<>();\n+\n+    public void addConflict(String capability, String provider) {\n+        conflicts.computeIfAbsent(capability, k -> new ArrayList<>()).add(provider);\n+    }\n+\n+    public boolean isEmpty() {\n+        return conflicts.isEmpty();\n+    }\n+\n+    public String report() {\n+        final StringWriter sw = new StringWriter();\n+        try (BufferedWriter writer = new BufferedWriter(sw)) {\n+            writer.write(\"Please make sure there is only one provider of the following capabilities.\");", "originalCommit": "c61eb0eb90bca13d0e5abb3fc62253fcbde7e181", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8fa3986c444bb4fae07042ff23223fe1ff12a275", "chunk": "diff --git a/independent-projects/bootstrap/app-model/src/main/java/io/quarkus/bootstrap/resolver/CapabilityErrors.java b/independent-projects/bootstrap/app-model/src/main/java/io/quarkus/bootstrap/model/CapabilityErrors.java\nsimilarity index 90%\nrename from independent-projects/bootstrap/app-model/src/main/java/io/quarkus/bootstrap/resolver/CapabilityErrors.java\nrename to independent-projects/bootstrap/app-model/src/main/java/io/quarkus/bootstrap/model/CapabilityErrors.java\nindex 2696e7c9f9..a924a637c1 100644\n--- a/independent-projects/bootstrap/app-model/src/main/java/io/quarkus/bootstrap/resolver/CapabilityErrors.java\n+++ b/independent-projects/bootstrap/app-model/src/main/java/io/quarkus/bootstrap/model/CapabilityErrors.java\n\n@@ -1,4 +1,4 @@\n-package io.quarkus.bootstrap.resolver;\n+package io.quarkus.bootstrap.model;\n \n import java.io.BufferedWriter;\n import java.io.IOException;\n"}}, {"oid": "8fa3986c444bb4fae07042ff23223fe1ff12a275", "url": "https://github.com/quarkusio/quarkus/commit/8fa3986c444bb4fae07042ff23223fe1ff12a275", "message": "Ability to configure provided capabilities in the extension descriptor and capability conflict detection", "committedDate": "2021-01-27T16:41:40Z", "type": "forcePushed"}, {"oid": "469c2e8cd9fa2310caa3f513dac1c099dcaba656", "url": "https://github.com/quarkusio/quarkus/commit/469c2e8cd9fa2310caa3f513dac1c099dcaba656", "message": "Ability to configure provided capabilities in the extension descriptor and capability conflict detection", "committedDate": "2021-01-27T16:43:12Z", "type": "forcePushed"}, {"oid": "9a3f67d3be7b1a96762667c244ab65bbf5b22f9b", "url": "https://github.com/quarkusio/quarkus/commit/9a3f67d3be7b1a96762667c244ab65bbf5b22f9b", "message": "Ability to configure provided capabilities in the extension descriptor and capability conflict detection", "committedDate": "2021-01-29T11:54:01Z", "type": "forcePushed"}, {"oid": "c905f4b6161a8340e80d3097c4b04e5aa4bdf3e1", "url": "https://github.com/quarkusio/quarkus/commit/c905f4b6161a8340e80d3097c4b04e5aa4bdf3e1", "message": "Ability to configure provided capabilities in the extension descriptor and capability conflict detection", "committedDate": "2021-03-25T11:52:24Z", "type": "forcePushed"}, {"oid": "69b3ae4da203013141f47dffa8bdb43a10eca859", "url": "https://github.com/quarkusio/quarkus/commit/69b3ae4da203013141f47dffa8bdb43a10eca859", "message": "Ability to configure provided capabilities in the extension descriptor and capability conflict detection", "committedDate": "2021-03-25T16:19:59Z", "type": "forcePushed"}, {"oid": "1abe53b1a585d6985b77485494c3bbb2578a792c", "url": "https://github.com/quarkusio/quarkus/commit/1abe53b1a585d6985b77485494c3bbb2578a792c", "message": "* Ability to configure provided capabilities in the extension descriptor and capability conflict detection\n* Make sure only single provider of a given capability is allowed in the application\n* Introduce a possibility to check not only presence of a given capability but also if a specific capability prefix (or subpath of its dot-separated name) is found among all the registered capabilities", "committedDate": "2021-03-26T11:02:49Z", "type": "forcePushed"}, {"oid": "6695c1866fa5114f6b1f0cd16b7dc54bb1cba758", "url": "https://github.com/quarkusio/quarkus/commit/6695c1866fa5114f6b1f0cd16b7dc54bb1cba758", "message": "* Ability to configure provided capabilities in the extension descriptor and capability conflict detection\n* Make sure only single provider of a given capability is allowed in the application\n* Introduce a possibility to check not only presence of a given capability but also if a specific capability prefix (or subpath of its dot-separated name) is found among all the registered capabilities\n* Add the configured in the maven plugin configuration capabilities to the quarkus-extension.yaml consumed by the dev tools", "committedDate": "2021-03-26T11:55:58Z", "type": "forcePushed"}, {"oid": "32ced8e44d2d458f7c2d067b7f68a23cb1481755", "url": "https://github.com/quarkusio/quarkus/commit/32ced8e44d2d458f7c2d067b7f68a23cb1481755", "message": "* Ability to configure provided capabilities in the extension descriptor and capability conflict detection\n* Make sure only single provider of a given capability is allowed in the application\n* Introduce a possibility to check not only presence of a given capability but also if a specific capability prefix (or subpath of its dot-separated name) is found among all the registered capabilities\n* Add the configured in the maven plugin configuration capabilities to the quarkus-extension.yaml consumed by the dev tools", "committedDate": "2021-03-26T13:38:26Z", "type": "forcePushed"}, {"oid": "e7ce66653263c0a98285f257c3c321c0d5a3959b", "url": "https://github.com/quarkusio/quarkus/commit/e7ce66653263c0a98285f257c3c321c0d5a3959b", "message": "* Ability to configure provided capabilities in the extension descriptor and capability conflict detection\n* Make sure only single provider of a given capability is allowed in the application\n* Introduce a possibility to check not only presence of a given capability but also if a specific capability prefix (or subpath of its dot-separated name) is found among all the registered capabilities\n* Add the configured in the maven plugin configuration capabilities to the quarkus-extension.yaml consumed by the dev tools", "committedDate": "2021-03-27T20:12:47Z", "type": "forcePushed"}, {"oid": "127b21015ccb121c3def69bad6e53c5883a05b74", "url": "https://github.com/quarkusio/quarkus/commit/127b21015ccb121c3def69bad6e53c5883a05b74", "message": "* Ability to configure provided capabilities in the extension descriptor and capability conflict detection\n* Make sure only single provider of a given capability is allowed in the application\n* Introduce a possibility to check not only presence of a given capability but also if a specific capability prefix (or subpath of its dot-separated name) is found among all the registered capabilities\n* Add the configured in the maven plugin configuration capabilities to the quarkus-extension.yaml consumed by the dev tools", "committedDate": "2021-03-28T06:21:44Z", "type": "forcePushed"}, {"oid": "125d7a0dfd1a09d44008c60705db416fecae8750", "url": "https://github.com/quarkusio/quarkus/commit/125d7a0dfd1a09d44008c60705db416fecae8750", "message": "* Ability to configure provided capabilities in the extension descriptor and capability conflict detection\n* Make sure only single provider of a given capability is allowed in the application\n* Introduce a possibility to check not only presence of a given capability but also if a specific capability prefix (or subpath of its dot-separated name) is found among all the registered capabilities\n* Add the configured in the maven plugin configuration capabilities to the quarkus-extension.yaml consumed by the dev tools", "committedDate": "2021-03-29T12:26:21Z", "type": "forcePushed"}, {"oid": "8e1c5783e71775ca295e6d5c3fe57152ea31e8fa", "url": "https://github.com/quarkusio/quarkus/commit/8e1c5783e71775ca295e6d5c3fe57152ea31e8fa", "message": "* Ability to configure provided capabilities in the extension descriptor and capability conflict detection\n* Make sure only single provider of a given capability is allowed in the application\n* Introduce a possibility to check not only presence of a given capability but also if a specific capability prefix (or subpath of its dot-separated name) is found among all the registered capabilities\n* Add the configured in the maven plugin configuration capabilities to the quarkus-extension.yaml consumed by the dev tools", "committedDate": "2021-03-29T15:18:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTY0NDExMw==", "url": "https://github.com/quarkusio/quarkus/pull/13960#discussion_r605644113", "bodyText": "This kind of cast can be made safe (and more easily debuggable as a result):\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    testClass = (Class<? extends BooleanSupplier>) classLoader.loadClass(testClassName);\n          \n          \n            \n                                    testClass = classLoader.loadClass(testClassName).asSubclass(BooleanSupplier.class);", "author": "dmlloyd", "createdAt": "2021-04-01T13:08:54Z", "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "diffHunk": "@@ -214,7 +218,45 @@ public boolean canHandleObject(final Object obj, final boolean staticInit) {\n                 .produces(RunTimeConfigurationProxyBuildItem.class)\n                 .produces(BytecodeRecorderObjectLoaderBuildItem.class)\n                 .build());\n-        return result;\n+\n+        return result.andThen(provideCapabilities(classLoader, appModel, readResult, launchMode, devModeType));\n+    }\n+\n+    private static Consumer<BuildChainBuilder> provideCapabilities(ClassLoader classLoader, AppModel appModel,\n+            BuildTimeConfigurationReader.ReadResult readResult, LaunchMode launchMode, DevModeType devModeType) {\n+        Map<Class<? extends BooleanSupplier>, BooleanSupplier> condCache = new HashMap<>();\n+\n+        Consumer<BuildChainBuilder> stepConfig = Functions.discardingConsumer();\n+        BooleanSupplier alwaysAddStep = () -> true;\n+        for (CapabilityContract contract : appModel.getCapabilityContracts().values()) {\n+            final String provider = contract.getExtension();\n+            for (String capability : contract.getProvidesCapabilities()) {\n+                int conditionIndex = capability.indexOf('?');\n+                final String name = conditionIndex < 0 ? capability : capability.substring(0, conditionIndex);\n+                BooleanSupplier buildIf = alwaysAddStep;\n+                int testClassStart;\n+                while (conditionIndex > 0) {\n+                    final boolean inv = conditionIndex < capability.length() - 1\n+                            && capability.charAt(conditionIndex + 1) == '!';\n+                    testClassStart = conditionIndex + (inv ? 2 : 1);\n+                    conditionIndex = capability.indexOf('?', testClassStart + 1);\n+                    final String testClassName = capability\n+                            .substring(testClassStart, conditionIndex > 0 ? conditionIndex : capability.length());\n+                    Class<? extends BooleanSupplier> testClass;\n+                    try {\n+                        testClass = (Class<? extends BooleanSupplier>) classLoader.loadClass(testClassName);", "originalCommit": "8e1c5783e71775ca295e6d5c3fe57152ea31e8fa", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0f1a7a51192313a36424fb0f35b4b4135af46442", "chunk": "diff --git a/core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java b/core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java\nindex c4e30a1343..b91237ed65 100644\n--- a/core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java\n+++ b/core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java\n\n@@ -219,14 +219,14 @@ public final class ExtensionLoader {\n                 .produces(BytecodeRecorderObjectLoaderBuildItem.class)\n                 .build());\n \n-        return result.andThen(provideCapabilities(classLoader, appModel, readResult, launchMode, devModeType));\n+        return provideCapabilities(result, classLoader, appModel, readResult, launchMode, devModeType);\n     }\n \n-    private static Consumer<BuildChainBuilder> provideCapabilities(ClassLoader classLoader, AppModel appModel,\n+    private static Consumer<BuildChainBuilder> provideCapabilities(Consumer<BuildChainBuilder> result, ClassLoader classLoader,\n+            AppModel appModel,\n             BuildTimeConfigurationReader.ReadResult readResult, LaunchMode launchMode, DevModeType devModeType) {\n         Map<Class<? extends BooleanSupplier>, BooleanSupplier> condCache = new HashMap<>();\n \n-        Consumer<BuildChainBuilder> stepConfig = Functions.discardingConsumer();\n         BooleanSupplier alwaysAddStep = () -> true;\n         for (CapabilityContract contract : appModel.getCapabilityContracts().values()) {\n             final String provider = contract.getExtension();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTY0NTM4OA==", "url": "https://github.com/quarkusio/quarkus/pull/13960#discussion_r605645388", "bodyText": "Could this loop not be done as a build step which produces a CapabilityBuildItem?  This kind of change to the extension loader makes it more brittle, and it was definitely intended that the build item system be able to support this kind of thing.", "author": "dmlloyd", "createdAt": "2021-04-01T13:10:49Z", "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "diffHunk": "@@ -214,7 +218,45 @@ public boolean canHandleObject(final Object obj, final boolean staticInit) {\n                 .produces(RunTimeConfigurationProxyBuildItem.class)\n                 .produces(BytecodeRecorderObjectLoaderBuildItem.class)\n                 .build());\n-        return result;\n+\n+        return result.andThen(provideCapabilities(classLoader, appModel, readResult, launchMode, devModeType));\n+    }\n+\n+    private static Consumer<BuildChainBuilder> provideCapabilities(ClassLoader classLoader, AppModel appModel,", "originalCommit": "8e1c5783e71775ca295e6d5c3fe57152ea31e8fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjM4MjI5Nw==", "url": "https://github.com/quarkusio/quarkus/pull/13960#discussion_r606382297", "bodyText": "I changed the loop to add the build steps to the result directly but I am not sure whether that's what you meant. Could you clarify please? Thanks.", "author": "aloubyansky", "createdAt": "2021-04-02T19:19:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTY0NTM4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNzA1OTg2Mg==", "url": "https://github.com/quarkusio/quarkus/pull/13960#discussion_r607059862", "bodyText": "The provideCapabilities method seems to produce one CapabilityBuildItem for each discovered capability.  Why not do this in a build step, which are able to examine the build class path and produce build items?", "author": "dmlloyd", "createdAt": "2021-04-05T12:20:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTY0NTM4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODQ1NjMwMA==", "url": "https://github.com/quarkusio/quarkus/pull/13960#discussion_r608456300", "bodyText": "Could you please review the last commit? Also I noticed the condition cache (condCache) is created per buildIf call. Should we create a global one, e.g. in public static Consumer<BuildChainBuilder> loadStepsFrom(ClassLoader classLoader, Properties buildSystemProps, AppModel appModel, LaunchMode launchMode, DevModeType devModeType, Consumer<ConfigBuilder> configCustomizer)? Thanks!", "author": "aloubyansky", "createdAt": "2021-04-07T08:40:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTY0NTM4OA=="}], "type": "inlineReview", "revised_code": {"commit": "0f1a7a51192313a36424fb0f35b4b4135af46442", "chunk": "diff --git a/core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java b/core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java\nindex c4e30a1343..b91237ed65 100644\n--- a/core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java\n+++ b/core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java\n\n@@ -219,14 +219,14 @@ public final class ExtensionLoader {\n                 .produces(BytecodeRecorderObjectLoaderBuildItem.class)\n                 .build());\n \n-        return result.andThen(provideCapabilities(classLoader, appModel, readResult, launchMode, devModeType));\n+        return provideCapabilities(result, classLoader, appModel, readResult, launchMode, devModeType);\n     }\n \n-    private static Consumer<BuildChainBuilder> provideCapabilities(ClassLoader classLoader, AppModel appModel,\n+    private static Consumer<BuildChainBuilder> provideCapabilities(Consumer<BuildChainBuilder> result, ClassLoader classLoader,\n+            AppModel appModel,\n             BuildTimeConfigurationReader.ReadResult readResult, LaunchMode launchMode, DevModeType devModeType) {\n         Map<Class<? extends BooleanSupplier>, BooleanSupplier> condCache = new HashMap<>();\n \n-        Consumer<BuildChainBuilder> stepConfig = Functions.discardingConsumer();\n         BooleanSupplier alwaysAddStep = () -> true;\n         for (CapabilityContract contract : appModel.getCapabilityContracts().values()) {\n             final String provider = contract.getExtension();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTY0ODU2Ng==", "url": "https://github.com/quarkusio/quarkus/pull/13960#discussion_r605648566", "bodyText": "Is this constructor still used? It might be better to move everything over to the builder constructor.", "author": "dmlloyd", "createdAt": "2021-04-01T13:15:31Z", "path": "independent-projects/bootstrap/app-model/src/main/java/io/quarkus/bootstrap/model/AppModel.java", "diffHunk": "@@ -62,20 +62,14 @@\n \n     private final Map<String, String> platformProperties;\n \n-    private AppModel(AppArtifact appArtifact, List<AppDependency> runtimeDeps, List<AppDependency> deploymentDeps,\n-            List<AppDependency> fullDeploymentDeps, Set<AppArtifactKey> parentFirstArtifacts,\n-            Set<AppArtifactKey> runnerParentFirstArtifacts, Set<AppArtifactKey> lesserPriorityArtifacts,\n-            Set<AppArtifactKey> localProjectArtifacts) {\n-        this(appArtifact, runtimeDeps, deploymentDeps, fullDeploymentDeps, parentFirstArtifacts, runnerParentFirstArtifacts,\n-                lesserPriorityArtifacts,\n-                localProjectArtifacts, Collections.emptyMap());\n-    }\n+    private final Map<String, CapabilityContract> capabilitiesContracts;\n \n     private AppModel(AppArtifact appArtifact, List<AppDependency> runtimeDeps, List<AppDependency> deploymentDeps,", "originalCommit": "8e1c5783e71775ca295e6d5c3fe57152ea31e8fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjM4NDYzOA==", "url": "https://github.com/quarkusio/quarkus/pull/13960#discussion_r606384638", "bodyText": "It isn't, so I removed it. Now I noticed this class implements java.io.Serializable. But it does not declare any non-private constructor. I guess I can also remove Serializable from it.", "author": "aloubyansky", "createdAt": "2021-04-02T19:25:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTY0ODU2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "0f1a7a51192313a36424fb0f35b4b4135af46442", "chunk": "diff --git a/independent-projects/bootstrap/app-model/src/main/java/io/quarkus/bootstrap/model/AppModel.java b/independent-projects/bootstrap/app-model/src/main/java/io/quarkus/bootstrap/model/AppModel.java\nindex b900d0797b..9af2500d57 100644\n--- a/independent-projects/bootstrap/app-model/src/main/java/io/quarkus/bootstrap/model/AppModel.java\n+++ b/independent-projects/bootstrap/app-model/src/main/java/io/quarkus/bootstrap/model/AppModel.java\n\n@@ -64,24 +64,6 @@ public class AppModel implements Serializable {\n \n     private final Map<String, CapabilityContract> capabilitiesContracts;\n \n-    private AppModel(AppArtifact appArtifact, List<AppDependency> runtimeDeps, List<AppDependency> deploymentDeps,\n-            List<AppDependency> fullDeploymentDeps, Set<AppArtifactKey> parentFirstArtifacts,\n-            Set<AppArtifactKey> runnerParentFirstArtifacts, Set<AppArtifactKey> lesserPriorityArtifacts,\n-            Set<AppArtifactKey> localProjectArtifacts,\n-            Map<String, String> platformProperties,\n-            Map<String, CapabilityContract> capabilitiesContract) {\n-        this.appArtifact = appArtifact;\n-        this.runtimeDeps = runtimeDeps;\n-        this.deploymentDeps = deploymentDeps;\n-        this.fullDeploymentDeps = fullDeploymentDeps;\n-        this.parentFirstArtifacts = parentFirstArtifacts;\n-        this.runnerParentFirstArtifacts = runnerParentFirstArtifacts;\n-        this.lesserPriorityArtifacts = lesserPriorityArtifacts;\n-        this.localProjectArtifacts = localProjectArtifacts;\n-        this.platformProperties = platformProperties;\n-        this.capabilitiesContracts = capabilitiesContract;\n-    }\n-\n     private AppModel(Builder builder) {\n         this.appArtifact = builder.appArtifact;\n         this.runtimeDeps = builder.filter(builder.runtimeDeps);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTY0OTM5Nw==", "url": "https://github.com/quarkusio/quarkus/pull/13960#discussion_r605649397", "bodyText": "Is there a compelling reason to make these fields protected?", "author": "dmlloyd", "createdAt": "2021-04-01T13:16:44Z", "path": "independent-projects/bootstrap/maven-plugin/src/main/java/io/quarkus/maven/capabilities/CapabilityConfig.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package io.quarkus.maven.capabilities;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class CapabilityConfig {\n+\n+    protected String name;\n+    protected List<String> onlyIf = new ArrayList<>(0);\n+    protected List<String> onlyIfNot = new ArrayList<>(0);", "originalCommit": "8e1c5783e71775ca295e6d5c3fe57152ea31e8fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjM4NDg1NA==", "url": "https://github.com/quarkusio/quarkus/pull/13960#discussion_r606384854", "bodyText": "I've made them private.", "author": "aloubyansky", "createdAt": "2021-04-02T19:26:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTY0OTM5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "0f1a7a51192313a36424fb0f35b4b4135af46442", "chunk": "diff --git a/independent-projects/bootstrap/maven-plugin/src/main/java/io/quarkus/maven/capabilities/CapabilityConfig.java b/independent-projects/bootstrap/maven-plugin/src/main/java/io/quarkus/maven/capabilities/CapabilityConfig.java\nindex 3a64fd4ad1..d901a20ea5 100644\n--- a/independent-projects/bootstrap/maven-plugin/src/main/java/io/quarkus/maven/capabilities/CapabilityConfig.java\n+++ b/independent-projects/bootstrap/maven-plugin/src/main/java/io/quarkus/maven/capabilities/CapabilityConfig.java\n\n@@ -5,9 +5,9 @@ import java.util.List;\n \n public class CapabilityConfig {\n \n-    protected String name;\n-    protected List<String> onlyIf = new ArrayList<>(0);\n-    protected List<String> onlyIfNot = new ArrayList<>(0);\n+    private String name;\n+    private final List<String> onlyIf = new ArrayList<>(0);\n+    private final List<String> onlyIfNot = new ArrayList<>(0);\n \n     public void set(String name) {\n         this.name = name;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTY0OTUzOQ==", "url": "https://github.com/quarkusio/quarkus/pull/13960#discussion_r605649539", "bodyText": "Can these be final?", "author": "dmlloyd", "createdAt": "2021-04-01T13:16:59Z", "path": "independent-projects/bootstrap/maven-plugin/src/main/java/io/quarkus/maven/capabilities/CapabilityConfig.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package io.quarkus.maven.capabilities;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class CapabilityConfig {\n+\n+    protected String name;\n+    protected List<String> onlyIf = new ArrayList<>(0);\n+    protected List<String> onlyIfNot = new ArrayList<>(0);", "originalCommit": "8e1c5783e71775ca295e6d5c3fe57152ea31e8fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjM4NDk2MA==", "url": "https://github.com/quarkusio/quarkus/pull/13960#discussion_r606384960", "bodyText": "Made them final.", "author": "aloubyansky", "createdAt": "2021-04-02T19:26:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTY0OTUzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "0f1a7a51192313a36424fb0f35b4b4135af46442", "chunk": "diff --git a/independent-projects/bootstrap/maven-plugin/src/main/java/io/quarkus/maven/capabilities/CapabilityConfig.java b/independent-projects/bootstrap/maven-plugin/src/main/java/io/quarkus/maven/capabilities/CapabilityConfig.java\nindex 3a64fd4ad1..d901a20ea5 100644\n--- a/independent-projects/bootstrap/maven-plugin/src/main/java/io/quarkus/maven/capabilities/CapabilityConfig.java\n+++ b/independent-projects/bootstrap/maven-plugin/src/main/java/io/quarkus/maven/capabilities/CapabilityConfig.java\n\n@@ -5,9 +5,9 @@ import java.util.List;\n \n public class CapabilityConfig {\n \n-    protected String name;\n-    protected List<String> onlyIf = new ArrayList<>(0);\n-    protected List<String> onlyIfNot = new ArrayList<>(0);\n+    private String name;\n+    private final List<String> onlyIf = new ArrayList<>(0);\n+    private final List<String> onlyIfNot = new ArrayList<>(0);\n \n     public void set(String name) {\n         this.name = name;\n"}}, {"oid": "0f1a7a51192313a36424fb0f35b4b4135af46442", "url": "https://github.com/quarkusio/quarkus/commit/0f1a7a51192313a36424fb0f35b4b4135af46442", "message": "* Ability to configure provided capabilities in the extension descriptor and capability conflict detection\n* Make sure only single provider of a given capability is allowed in the application\n* Introduce a possibility to check not only presence of a given capability but also if a specific capability prefix (or subpath of its dot-separated name) is found among all the registered capabilities\n* Add the configured in the maven plugin configuration capabilities to the quarkus-extension.yaml consumed by the dev tools\n\nCo-authored-by: David M. Lloyd <david.lloyd@redhat.com>", "committedDate": "2021-04-02T19:15:14Z", "type": "forcePushed"}, {"oid": "a5ea8f6c4c8ff7f5d35b67729352afb42e995b1e", "url": "https://github.com/quarkusio/quarkus/commit/a5ea8f6c4c8ff7f5d35b67729352afb42e995b1e", "message": "Produce all the CapabilityBuildItems from a single build step as a list", "committedDate": "2021-04-07T08:36:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODg3Nzg4Mg==", "url": "https://github.com/quarkusio/quarkus/pull/13960#discussion_r608877882", "bodyText": "Now that this is done as a build step, could it possibly be done as a build step class in io/quarkus/deployment/steps?", "author": "dmlloyd", "createdAt": "2021-04-07T18:03:55Z", "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "diffHunk": "@@ -226,36 +226,38 @@ public boolean canHandleObject(final Object obj, final boolean staticInit) {\n             AppModel appModel,\n             BuildTimeConfigurationReader.ReadResult readResult, LaunchMode launchMode, DevModeType devModeType) {\n         Map<Class<? extends BooleanSupplier>, BooleanSupplier> condCache = new HashMap<>();\n-\n-        BooleanSupplier alwaysAddStep = () -> true;\n-        for (CapabilityContract contract : appModel.getCapabilityContracts().values()) {\n-            final String provider = contract.getExtension();\n-            for (String capability : contract.getProvidesCapabilities()) {\n-                int conditionIndex = capability.indexOf('?');\n-                final String name = conditionIndex < 0 ? capability : capability.substring(0, conditionIndex);\n-                BooleanSupplier buildIf = alwaysAddStep;\n-                int testClassStart;\n-                while (conditionIndex > 0) {\n-                    final boolean inv = conditionIndex < capability.length() - 1\n-                            && capability.charAt(conditionIndex + 1) == '!';\n-                    testClassStart = conditionIndex + (inv ? 2 : 1);\n-                    conditionIndex = capability.indexOf('?', testClassStart + 1);\n-                    final String testClassName = capability\n-                            .substring(testClassStart, conditionIndex > 0 ? conditionIndex : capability.length());\n-                    Class<? extends BooleanSupplier> testClass;\n-                    try {\n-                        testClass = classLoader.loadClass(testClassName).asSubclass(BooleanSupplier.class);\n-                    } catch (ClassNotFoundException e) {\n-                        throw new RuntimeException(\"Failed to load capability condition class \" + testClassName, e);\n+        final BooleanSupplier alwaysAddStep = () -> true;\n+        result = result.andThen(bcb -> bcb.addBuildStep(bc -> {", "originalCommit": "a5ea8f6c4c8ff7f5d35b67729352afb42e995b1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDcwNzQzMg==", "url": "https://github.com/quarkusio/quarkus/pull/13960#discussion_r610707432", "bodyText": "Right, finally I got it. I added ProvideCapabilitiesBuildStep. I didn't want to re-implement BooleanSupplier instantiation code, so I extracted it to a public static method in the ExtensionLoader, which might not be the best idea. Which also means the suppliers will be created on every demand.  Would it make sense to have some global cache for them?", "author": "aloubyansky", "createdAt": "2021-04-09T15:13:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODg3Nzg4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDcwODE0Mw==", "url": "https://github.com/quarkusio/quarkus/pull/13960#discussion_r610708143", "bodyText": "I could probably move the step I added to the CapabilityAggregationStep instead.", "author": "aloubyansky", "createdAt": "2021-04-09T15:14:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODg3Nzg4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDcwOTg4NA==", "url": "https://github.com/quarkusio/quarkus/pull/13960#discussion_r610709884", "bodyText": "A global cache is reasonable.  The ClassValue class exists to associate values with classes in a less-leaky kind of way; that seems like the safest approach.", "author": "dmlloyd", "createdAt": "2021-04-09T15:16:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODg3Nzg4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTk0MTM1Ng==", "url": "https://github.com/quarkusio/quarkus/pull/13960#discussion_r611941356", "bodyText": "@dmlloyd could you please give it another look? I introduced BooleanSupplierFactoryBuildItem as a global factory and cache of BooleanSuppliers.", "author": "aloubyansky", "createdAt": "2021-04-12T20:44:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODg3Nzg4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "6ebcbfc23426088797d273e15244cd63236ea851", "chunk": "diff --git a/core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java b/core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java\nindex aa5443562e..15157b2a9e 100644\n--- a/core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java\n+++ b/core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java\n\n@@ -219,45 +218,6 @@ public final class ExtensionLoader {\n                 .produces(BytecodeRecorderObjectLoaderBuildItem.class)\n                 .build());\n \n-        return provideCapabilities(result, classLoader, appModel, readResult, launchMode, devModeType);\n-    }\n-\n-    private static Consumer<BuildChainBuilder> provideCapabilities(Consumer<BuildChainBuilder> result, ClassLoader classLoader,\n-            AppModel appModel,\n-            BuildTimeConfigurationReader.ReadResult readResult, LaunchMode launchMode, DevModeType devModeType) {\n-        Map<Class<? extends BooleanSupplier>, BooleanSupplier> condCache = new HashMap<>();\n-        final BooleanSupplier alwaysAddStep = () -> true;\n-        result = result.andThen(bcb -> bcb.addBuildStep(bc -> {\n-            final List<CapabilityBuildItem> capItems = new ArrayList<>();\n-            for (CapabilityContract contract : appModel.getCapabilityContracts().values()) {\n-                final String provider = contract.getExtension();\n-                for (String capability : contract.getProvidesCapabilities()) {\n-                    int conditionIndex = capability.indexOf('?');\n-                    final String name = conditionIndex < 0 ? capability : capability.substring(0, conditionIndex);\n-                    BooleanSupplier buildIf = alwaysAddStep;\n-                    int testClassStart;\n-                    while (conditionIndex > 0) {\n-                        final boolean inv = conditionIndex < capability.length() - 1\n-                                && capability.charAt(conditionIndex + 1) == '!';\n-                        testClassStart = conditionIndex + (inv ? 2 : 1);\n-                        conditionIndex = capability.indexOf('?', testClassStart + 1);\n-                        final String testClassName = capability\n-                                .substring(testClassStart, conditionIndex > 0 ? conditionIndex : capability.length());\n-                        Class<? extends BooleanSupplier> testClass;\n-                        try {\n-                            testClass = classLoader.loadClass(testClassName).asSubclass(BooleanSupplier.class);\n-                        } catch (ClassNotFoundException e) {\n-                            throw new RuntimeException(\"Failed to load capability condition class \" + testClassName, e);\n-                        }\n-                        buildIf = buildIf(testClass, inv, readResult, launchMode, devModeType, condCache, buildIf);\n-                    }\n-                    if (buildIf.getAsBoolean()) {\n-                        capItems.add(new CapabilityBuildItem(name, provider));\n-                    }\n-                }\n-            }\n-            bc.produce(capItems);\n-        }).produces(CapabilityBuildItem.class));\n         return result;\n     }\n \n"}}, {"oid": "6ebcbfc23426088797d273e15244cd63236ea851", "url": "https://github.com/quarkusio/quarkus/commit/6ebcbfc23426088797d273e15244cd63236ea851", "message": "Extract ExtensionLoader.provideCapabilities(...) to its own BuildStep class", "committedDate": "2021-04-09T15:00:29Z", "type": "forcePushed"}, {"oid": "4299137e4690fe7d30f483944e180c21f7e7d271", "url": "https://github.com/quarkusio/quarkus/commit/4299137e4690fe7d30f483944e180c21f7e7d271", "message": "Extract ExtensionLoader.provideCapabilities(...) to its own BuildStep class", "committedDate": "2021-04-09T15:09:04Z", "type": "forcePushed"}, {"oid": "beeafbaf4aa8bf2896f0f34476c203e63aa3e53f", "url": "https://github.com/quarkusio/quarkus/commit/beeafbaf4aa8bf2896f0f34476c203e63aa3e53f", "message": "* Ability to configure provided capabilities in the extension descriptor and capability conflict detection\n* Make sure only single provider of a given capability is allowed in the application\n* Introduce a possibility to check not only presence of a given capability but also if a specific capability prefix (or subpath of its dot-separated name) is found among all the registered capabilities\n* Add the configured in the maven plugin configuration capabilities to the quarkus-extension.yaml consumed by the dev tools", "committedDate": "2021-04-12T20:42:13Z", "type": "forcePushed"}, {"oid": "6c3daa7a3c740958b4c3cf7222f3177ee6c80848", "url": "https://github.com/quarkusio/quarkus/commit/6c3daa7a3c740958b4c3cf7222f3177ee6c80848", "message": "* Ability to configure provided capabilities in the extension descriptor and capability conflict detection\n* Make sure only single provider of a given capability is allowed in the application\n* Introduce a possibility to check not only presence of a given capability but also if a specific capability prefix (or subpath of its dot-separated name) is found among all the registered capabilities\n* Add the configured in the maven plugin configuration capabilities to the quarkus-extension.yaml consumed by the dev tools", "committedDate": "2021-04-12T20:47:09Z", "type": "forcePushed"}, {"oid": "881caca3d4bf783a4884469c1a6e7361ff1eb775", "url": "https://github.com/quarkusio/quarkus/commit/881caca3d4bf783a4884469c1a6e7361ff1eb775", "message": "* Ability to configure provided capabilities in the extension descriptor and capability conflict detection\n* Make sure only single provider of a given capability is allowed in the application\n* Introduce a possibility to check not only presence of a given capability but also if a specific capability prefix (or subpath of its dot-separated name) is found among all the registered capabilities\n* Add the configured in the maven plugin configuration capabilities to the quarkus-extension.yaml consumed by the dev tools", "committedDate": "2021-04-13T12:50:01Z", "type": "forcePushed"}, {"oid": "6a31c048077ffc7b06be6f68cdf2a0401e965c8b", "url": "https://github.com/quarkusio/quarkus/commit/6a31c048077ffc7b06be6f68cdf2a0401e965c8b", "message": "more", "committedDate": "2021-04-20T11:07:07Z", "type": "forcePushed"}, {"oid": "9e7a45843598c6b3328ed0870c39aecb1791f26e", "url": "https://github.com/quarkusio/quarkus/commit/9e7a45843598c6b3328ed0870c39aecb1791f26e", "message": "* Ability to configure provided capabilities in the extension descriptor and capability conflict detection\n* Make sure only single provider of a given capability is allowed in the application\n* Introduce a possibility to check not only presence of a given capability but also if a specific capability prefix (or subpath of its dot-separated name) is found among all the registered capabilities\n* Add the configured in the maven plugin configuration capabilities to the quarkus-extension.yaml consumed by the dev tools\n* Replaced direct creation of CapabilityBuildItem with the corresponding extension descriptor configuration", "committedDate": "2021-04-20T15:53:50Z", "type": "forcePushed"}, {"oid": "3950a46a61fef3cf8cb7d14bc20f81b98884d267", "url": "https://github.com/quarkusio/quarkus/commit/3950a46a61fef3cf8cb7d14bc20f81b98884d267", "message": "* Ability to configure provided capabilities in the extension descriptor and capability conflict detection\n* Make sure only single provider of a given capability is allowed in the application\n* Introduce a possibility to check not only presence of a given capability but also if a specific capability prefix (or subpath of its dot-separated name) is found among all the registered capabilities\n* Add the configured in the maven plugin configuration capabilities to the quarkus-extension.yaml consumed by the dev tools\n* Replaced direct creation of CapabilityBuildItem with the corresponding extension descriptor configuration", "committedDate": "2021-04-21T11:03:59Z", "type": "commit"}, {"oid": "3950a46a61fef3cf8cb7d14bc20f81b98884d267", "url": "https://github.com/quarkusio/quarkus/commit/3950a46a61fef3cf8cb7d14bc20f81b98884d267", "message": "* Ability to configure provided capabilities in the extension descriptor and capability conflict detection\n* Make sure only single provider of a given capability is allowed in the application\n* Introduce a possibility to check not only presence of a given capability but also if a specific capability prefix (or subpath of its dot-separated name) is found among all the registered capabilities\n* Add the configured in the maven plugin configuration capabilities to the quarkus-extension.yaml consumed by the dev tools\n* Replaced direct creation of CapabilityBuildItem with the corresponding extension descriptor configuration", "committedDate": "2021-04-21T11:03:59Z", "type": "forcePushed"}]}