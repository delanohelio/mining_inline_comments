{"pr_number": 12732, "pr_title": "Add OAuth support for Kafka client in native mode", "pr_createdAt": "2020-10-15T10:58:19Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/12732", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ3MjU5NA==", "url": "https://github.com/quarkusio/quarkus/pull/12732#discussion_r505472594", "bodyText": "Wondering if these 2 last classes shouldn't be always added. WDYT?", "author": "cescoffier", "createdAt": "2020-10-15T11:39:14Z", "path": "extensions/kafka-client/deployment/src/main/java/io/quarkus/kafka/client/deployment/KafkaProcessor.java", "diffHunk": "@@ -209,6 +209,30 @@ public void build(CombinedIndexBuildItem indexBuildItem, BuildProducer<Reflectiv\n             //ignore, Apicurio Avro is not in the classpath\n         }\n \n+        try {\n+            Class.forName(\"io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\", false,\n+                    Thread.currentThread().getContextClassLoader());\n+\n+            reflectiveClass.produce(new ReflectiveClassBuildItem(true, true, true,\n+                    \"io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\",\n+                    \"org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerRefreshingLogin\",\n+                    \"org.apache.kafka.common.security.oauthbearer.OAuthBearerToken\"));", "originalCommit": "51264a498ad6a53326146c69a8bda69ac61c35df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUwNzkzMA==", "url": "https://github.com/quarkusio/quarkus/pull/12732#discussion_r505507930", "bodyText": "I moved them outside of the strimzi oauth block, so they can be used for general oauth use cases as well.", "author": "dejanb", "createdAt": "2020-10-15T12:40:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ3MjU5NA=="}], "type": "inlineReview", "revised_code": {"commit": "0122ea939a4b5749cf8d61d945fb0f300d090f2a", "chunk": "diff --git a/extensions/kafka-client/deployment/src/main/java/io/quarkus/kafka/client/deployment/KafkaProcessor.java b/extensions/kafka-client/deployment/src/main/java/io/quarkus/kafka/client/deployment/KafkaProcessor.java\nindex 4a4d4dc561..99b2c035fe 100644\n--- a/extensions/kafka-client/deployment/src/main/java/io/quarkus/kafka/client/deployment/KafkaProcessor.java\n+++ b/extensions/kafka-client/deployment/src/main/java/io/quarkus/kafka/client/deployment/KafkaProcessor.java\n\n@@ -214,9 +222,7 @@ public class KafkaProcessor {\n                     Thread.currentThread().getContextClassLoader());\n \n             reflectiveClass.produce(new ReflectiveClassBuildItem(true, true, true,\n-                    \"io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\",\n-                    \"org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerRefreshingLogin\",\n-                    \"org.apache.kafka.common.security.oauthbearer.OAuthBearerToken\"));\n+                    \"io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\"));\n \n             reflectiveClass.produce(new ReflectiveClassBuildItem(true, true, true,\n                     \"org.keycloak.jose.jws.JWSHeader\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ3Mjk5NQ==", "url": "https://github.com/quarkusio/quarkus/pull/12732#discussion_r505472995", "bodyText": "Does that mean that Strimizi Auth depends on keycloak? How can you be sure that these classes are loadable?", "author": "cescoffier", "createdAt": "2020-10-15T11:39:58Z", "path": "extensions/kafka-client/deployment/src/main/java/io/quarkus/kafka/client/deployment/KafkaProcessor.java", "diffHunk": "@@ -209,6 +209,30 @@ public void build(CombinedIndexBuildItem indexBuildItem, BuildProducer<Reflectiv\n             //ignore, Apicurio Avro is not in the classpath\n         }\n \n+        try {\n+            Class.forName(\"io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\", false,\n+                    Thread.currentThread().getContextClassLoader());\n+\n+            reflectiveClass.produce(new ReflectiveClassBuildItem(true, true, true,\n+                    \"io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\",\n+                    \"org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerRefreshingLogin\",\n+                    \"org.apache.kafka.common.security.oauthbearer.OAuthBearerToken\"));\n+\n+            reflectiveClass.produce(new ReflectiveClassBuildItem(true, true, true,\n+                    \"org.keycloak.jose.jws.JWSHeader\",", "originalCommit": "51264a498ad6a53326146c69a8bda69ac61c35df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ4NTE0MA==", "url": "https://github.com/quarkusio/quarkus/pull/12732#discussion_r505485140", "bodyText": "Yeah,  Strimzi's kafka-oauth-client uses keycloak lib and adds it as a dependency. So it should be available if the library is used.", "author": "dejanb", "createdAt": "2020-10-15T12:02:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ3Mjk5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "0122ea939a4b5749cf8d61d945fb0f300d090f2a", "chunk": "diff --git a/extensions/kafka-client/deployment/src/main/java/io/quarkus/kafka/client/deployment/KafkaProcessor.java b/extensions/kafka-client/deployment/src/main/java/io/quarkus/kafka/client/deployment/KafkaProcessor.java\nindex 4a4d4dc561..99b2c035fe 100644\n--- a/extensions/kafka-client/deployment/src/main/java/io/quarkus/kafka/client/deployment/KafkaProcessor.java\n+++ b/extensions/kafka-client/deployment/src/main/java/io/quarkus/kafka/client/deployment/KafkaProcessor.java\n\n@@ -214,9 +222,7 @@ public class KafkaProcessor {\n                     Thread.currentThread().getContextClassLoader());\n \n             reflectiveClass.produce(new ReflectiveClassBuildItem(true, true, true,\n-                    \"io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\",\n-                    \"org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerRefreshingLogin\",\n-                    \"org.apache.kafka.common.security.oauthbearer.OAuthBearerToken\"));\n+                    \"io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\"));\n \n             reflectiveClass.produce(new ReflectiveClassBuildItem(true, true, true,\n                     \"org.keycloak.jose.jws.JWSHeader\",\n"}}, {"oid": "0122ea939a4b5749cf8d61d945fb0f300d090f2a", "url": "https://github.com/quarkusio/quarkus/commit/0122ea939a4b5749cf8d61d945fb0f300d090f2a", "message": "Add OAuth support for Kafka client in native mode", "committedDate": "2020-10-15T12:39:06Z", "type": "forcePushed"}, {"oid": "9e7e5b83e903411820d262641dc9fe1955cd45f4", "url": "https://github.com/quarkusio/quarkus/commit/9e7e5b83e903411820d262641dc9fe1955cd45f4", "message": "Add OAuth support for Kafka client in native mode", "committedDate": "2020-11-03T11:08:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY3NzY1NA==", "url": "https://github.com/quarkusio/quarkus/pull/12732#discussion_r516677654", "bodyText": "Not sure about the name.\nMaybe SubjectHolder ?", "author": "cescoffier", "createdAt": "2020-11-03T13:48:17Z", "path": "extensions/kafka-client/runtime/src/main/java/io/quarkus/kafka/client/runtime/graal/SubstitutionUtils.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package io.quarkus.kafka.client.runtime.graal;\n+\n+import java.security.AccessControlContext;\n+import java.util.HashMap;\n+\n+import javax.security.auth.Subject;\n+\n+public class SubstitutionUtils {", "originalCommit": "9e7e5b83e903411820d262641dc9fe1955cd45f4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "25f51784bac1aec312a0eafd6e32f5106234eb17", "chunk": "diff --git a/extensions/kafka-client/runtime/src/main/java/io/quarkus/kafka/client/runtime/graal/SubstitutionUtils.java b/extensions/kafka-client/runtime/src/main/java/io/quarkus/kafka/client/runtime/graal/SubstitutionUtils.java\ndeleted file mode 100644\nindex 82ee3e8acc..0000000000\n--- a/extensions/kafka-client/runtime/src/main/java/io/quarkus/kafka/client/runtime/graal/SubstitutionUtils.java\n+++ /dev/null\n\n@@ -1,12 +0,0 @@\n-package io.quarkus.kafka.client.runtime.graal;\n-\n-import java.security.AccessControlContext;\n-import java.util.HashMap;\n-\n-import javax.security.auth.Subject;\n-\n-public class SubstitutionUtils {\n-\n-    public static HashMap<AccessControlContext, Subject> subjects = new HashMap<>();\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY3Nzk4Mw==", "url": "https://github.com/quarkusio/quarkus/pull/12732#discussion_r516677983", "bodyText": "Should it be final?", "author": "cescoffier", "createdAt": "2020-11-03T13:48:45Z", "path": "extensions/kafka-client/runtime/src/main/java/io/quarkus/kafka/client/runtime/graal/SubstitutionUtils.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package io.quarkus.kafka.client.runtime.graal;\n+\n+import java.security.AccessControlContext;\n+import java.util.HashMap;\n+\n+import javax.security.auth.Subject;\n+\n+public class SubstitutionUtils {\n+\n+    public static HashMap<AccessControlContext, Subject> subjects = new HashMap<>();", "originalCommit": "9e7e5b83e903411820d262641dc9fe1955cd45f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY4MDc5MQ==", "url": "https://github.com/quarkusio/quarkus/pull/12732#discussion_r516680791", "bodyText": "Should this field be moved to the Subject class?", "author": "cescoffier", "createdAt": "2020-11-03T13:52:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY3Nzk4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI0MTA2NA==", "url": "https://github.com/quarkusio/quarkus/pull/12732#discussion_r517241064", "bodyText": "@cescoffier The field has to be kept outside otherwise IIRC you get an error. The only fields allowed in substituted classes are aliases of existing fields.\nI'm not an expert on this java security APIs, but a couple of things to bear in mind would be:\n\nShould be it be concurrent?\nIs there a chance entries could be stored and not removed? Maybe you need some kind of expiration of entries to avoid a leak?", "author": "galderz", "createdAt": "2020-11-04T10:24:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY3Nzk4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI2Mzk4OA==", "url": "https://github.com/quarkusio/quarkus/pull/12732#discussion_r517263988", "bodyText": "ah, thanks for reminding me of this @galderz! I always forgot.\nHandling expiration might be good as it would avoid the potential growth I mentioned in my review.", "author": "cescoffier", "createdAt": "2020-11-04T11:03:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY3Nzk4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "25f51784bac1aec312a0eafd6e32f5106234eb17", "chunk": "diff --git a/extensions/kafka-client/runtime/src/main/java/io/quarkus/kafka/client/runtime/graal/SubstitutionUtils.java b/extensions/kafka-client/runtime/src/main/java/io/quarkus/kafka/client/runtime/graal/SubstitutionUtils.java\ndeleted file mode 100644\nindex 82ee3e8acc..0000000000\n--- a/extensions/kafka-client/runtime/src/main/java/io/quarkus/kafka/client/runtime/graal/SubstitutionUtils.java\n+++ /dev/null\n\n@@ -1,12 +0,0 @@\n-package io.quarkus.kafka.client.runtime.graal;\n-\n-import java.security.AccessControlContext;\n-import java.util.HashMap;\n-\n-import javax.security.auth.Subject;\n-\n-public class SubstitutionUtils {\n-\n-    public static HashMap<AccessControlContext, Subject> subjects = new HashMap<>();\n-\n-}\n"}}, {"oid": "25f51784bac1aec312a0eafd6e32f5106234eb17", "url": "https://github.com/quarkusio/quarkus/commit/25f51784bac1aec312a0eafd6e32f5106234eb17", "message": "Add OAuth support for Kafka client in native mode", "committedDate": "2020-11-04T11:06:31Z", "type": "forcePushed"}, {"oid": "530bcf77b6950e7cb1c597354a9518a2ee79b048", "url": "https://github.com/quarkusio/quarkus/commit/530bcf77b6950e7cb1c597354a9518a2ee79b048", "message": "Add OAuth support for Kafka client in native mode", "committedDate": "2020-11-09T11:43:03Z", "type": "forcePushed"}, {"oid": "f0ecda80ca88b526eabc73de59adef0cd407cb23", "url": "https://github.com/quarkusio/quarkus/commit/f0ecda80ca88b526eabc73de59adef0cd407cb23", "message": "Add OAuth support for Kafka client in native mode", "committedDate": "2020-11-09T12:58:36Z", "type": "forcePushed"}, {"oid": "dbdccd17042e39ba4518779de4902766293b04d3", "url": "https://github.com/quarkusio/quarkus/commit/dbdccd17042e39ba4518779de4902766293b04d3", "message": "Add OAuth support for Kafka client in native mode", "committedDate": "2020-12-09T10:37:50Z", "type": "commit"}, {"oid": "dbdccd17042e39ba4518779de4902766293b04d3", "url": "https://github.com/quarkusio/quarkus/commit/dbdccd17042e39ba4518779de4902766293b04d3", "message": "Add OAuth support for Kafka client in native mode", "committedDate": "2020-12-09T10:37:50Z", "type": "forcePushed"}]}