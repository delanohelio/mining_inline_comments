{"pr_number": 8162, "pr_title": "Remove unneeded paging when using PanacheQuery", "pr_createdAt": "2020-03-25T17:10:08Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/8162", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU3MzQ1MQ==", "url": "https://github.com/quarkusio/quarkus/pull/8162#discussion_r398573451", "bodyText": "Well that's a change in behaviour: we used to have a single page encompassing all results. Perhaps it's fine, but at the very least, this has to be mentioned in the javadocs for the PanacheQuery interface.", "author": "FroMage", "createdAt": "2020-03-26T13:32:12Z", "path": "extensions/panache/hibernate-orm-panache/runtime/src/main/java/io/quarkus/hibernate/orm/panache/runtime/PanacheQueryImpl.java", "diffHunk": "@@ -100,11 +97,15 @@ public int pageCount() {\n \n     @Override\n     public Page page() {\n-        checkNotInRange();\n+        checkPagination();\n         return page;\n     }\n \n-    private void checkNotInRange() {\n+    private void checkPagination() {\n+        if (page == null) {\n+            throw new UnsupportedOperationException(\"Cannot call a page related method, \" +\n+                    \"call page(Page) or page(int, int) to initiate pagination first\");\n+        }", "originalCommit": "0d7e818c90cf1a0fd18e613ea3ac516044ba5af8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgyNDkzMA==", "url": "https://github.com/quarkusio/quarkus/pull/8162#discussion_r398824930", "bodyText": "Javadoc updated, Noticed too that there is another interface ReactivePanacheQuery that has the same behaviour, so I updated it too so all three of them match.", "author": "robmv", "createdAt": "2020-03-26T19:09:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU3MzQ1MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg4ODY5MQ==", "url": "https://github.com/quarkusio/quarkus/pull/8162#discussion_r408888691", "bodyText": "This worries me a bit, why is it needed and where is it stopped?", "author": "FroMage", "createdAt": "2020-04-15T14:32:04Z", "path": "integration-tests/hibernate-orm-panache/src/test/java/io/quarkus/it/panache/NoPagingPMT.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package io.quarkus.it.panache;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.await;\n+import static org.hamcrest.Matchers.is;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.h2.tools.Server;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.builder.Version;\n+import io.quarkus.test.LogFile;\n+import io.quarkus.test.QuarkusProdModeTest;\n+import io.restassured.RestAssured;\n+\n+/**\n+ * Test if PanacheQuery is using unnecessary SQL for limiting the number of output rows, the log output is tested for the\n+ * presence of <code>offset</code> or <code>limit</code> in the SQL.\n+ */\n+public class NoPagingPMT {\n+\n+    static {\n+        // WORKAROUND\n+        try {\n+            Server.createTcpServer().start();", "originalCommit": "6710ff3ab05d1292b2e216e6c618509e4b26a6eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5OTE4Mg==", "url": "https://github.com/quarkusio/quarkus/pull/8162#discussion_r408899182", "bodyText": "As ProdModeTest build a small JAR and run the test on a different JVM, There is a need to start the H2 Database server, My question to @geoand that I will detail later is about this, The workaround to start it manually is because the ProdModeTest isn't starting it even when I am adding TestResources that has the @QuarkusTestResource(H2DatabaseTestResource.class) annotation\nAs a temporary workaround didn't closed it myself because it is closed when that specific test JVM is closed.", "author": "robmv", "createdAt": "2020-04-15T14:45:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg4ODY5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkwMDkwNQ==", "url": "https://github.com/quarkusio/quarkus/pull/8162#discussion_r408900905", "bodyText": "Yeah, the prod mode test doesn't handle resources...", "author": "geoand", "createdAt": "2020-04-15T14:47:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg4ODY5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkwNTQyNA==", "url": "https://github.com/quarkusio/quarkus/pull/8162#discussion_r408905424", "bodyText": "We could make it handle them for sure, but currently it doesn't.", "author": "geoand", "createdAt": "2020-04-15T14:53:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg4ODY5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "ab908efa5f2fd1c2371714f4e3a31e69ed3e894c", "chunk": "diff --git a/integration-tests/hibernate-orm-panache/src/test/java/io/quarkus/it/panache/NoPagingPMT.java b/integration-tests/hibernate-orm-panache/src/test/java/io/quarkus/it/panache/NoPagingPMT.java\nindex 18d46b8d21..919fea2f0d 100644\n--- a/integration-tests/hibernate-orm-panache/src/test/java/io/quarkus/it/panache/NoPagingPMT.java\n+++ b/integration-tests/hibernate-orm-panache/src/test/java/io/quarkus/it/panache/NoPagingPMT.java\n\n@@ -7,11 +7,9 @@ import static org.hamcrest.Matchers.is;\n import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n-import java.sql.SQLException;\n import java.util.List;\n import java.util.concurrent.TimeUnit;\n \n-import org.h2.tools.Server;\n import org.jboss.shrinkwrap.api.ShrinkWrap;\n import org.jboss.shrinkwrap.api.spec.JavaArchive;\n import org.junit.jupiter.api.Test;\n"}}, {"oid": "ab908efa5f2fd1c2371714f4e3a31e69ed3e894c", "url": "https://github.com/quarkusio/quarkus/commit/ab908efa5f2fd1c2371714f4e3a31e69ed3e894c", "message": "Remove unneeded paging when using *PanacheQuery\n\nAvoid setting paging information on the native query implementation when\nno paging has been set on PanacheQuery and ReactivePanacheQuery", "committedDate": "2020-04-18T14:53:00Z", "type": "commit"}]}