{"pr_number": 12783, "pr_title": "Clean up the config of service integration", "pr_createdAt": "2020-10-19T10:04:20Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/12783", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQyMTk3NA==", "url": "https://github.com/quarkusio/quarkus/pull/12783#discussion_r508421974", "bodyText": "I think we should have a proper parameter to passe the extension name and not the capability.", "author": "gsmet", "createdAt": "2020-10-20T11:26:21Z", "path": "extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLProcessor.java", "diffHunk": "@@ -341,6 +313,106 @@ void openTracingIntegration(Capabilities capabilities,\n         return classes;\n     }\n \n+    // Services Integrations\n+\n+    @BuildStep\n+    void activateMetrics(Capabilities capabilities,\n+            Optional<MetricsCapabilityBuildItem> metricsCapability,\n+            BuildProducer<SystemPropertyBuildItem> systemProperties,\n+            BuildProducer<UnremovableBeanBuildItem> unremovableBeans) {\n+\n+        boolean activate = shouldActivateService(capabilities, quarkusConfig.metricsEnabled, metricsCapability.isPresent(),\n+                \"metrics\", \"quarkus.smallrye-graphql.metrics.enabled\");\n+        if (activate) {\n+            if (metricsCapability.isPresent() && metricsCapability.get().metricsSupported(MetricsFactory.MP_METRICS)) {\n+                unremovableBeans.produce(UnremovableBeanBuildItem.beanClassNames(\"io.smallrye.metrics.MetricRegistries\"));\n+            }\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_METRICS, TRUE));\n+        } else {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_METRICS, FALSE));\n+        }\n+    }\n+\n+    @BuildStep\n+    void activateTracing(Capabilities capabilities,\n+            BuildProducer<SystemPropertyBuildItem> systemProperties) {\n+\n+        boolean activate = shouldActivateService(capabilities, quarkusConfig.tracingEnabled, Capability.OPENTRACING,\n+                \"quarkus.smallrye-graphql.tracing.enabled\");\n+        if (activate) {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_TRACING, TRUE));\n+        } else {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_TRACING, FALSE));\n+        }\n+    }\n+\n+    @BuildStep\n+    void activateValidation(Capabilities capabilities,\n+            BuildProducer<SystemPropertyBuildItem> systemProperties) {\n+\n+        boolean activate = shouldActivateService(capabilities, quarkusConfig.validationEnabled, Capability.HIBERNATE_VALIDATOR,\n+                \"quarkus.smallrye-graphql.validation.enabled\");\n+        if (activate) {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_VALIDATION, TRUE));\n+        } else {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_VALIDATION, FALSE));\n+        }\n+    }\n+\n+    @BuildStep\n+    void activateEventing(BuildProducer<SystemPropertyBuildItem> systemProperties) {\n+        if (quarkusConfig.eventsEnabled) {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_EVENTS, TRUE));\n+        } else {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_EVENTS, FALSE));\n+        }\n+    }\n+\n+    private boolean shouldActivateService(Capabilities capabilities,\n+            Optional<Boolean> serviceEnabled,\n+            Capability linkedCapability,\n+            String configKey) {\n+\n+        return shouldActivateService(capabilities, serviceEnabled, capabilities.isPresent(linkedCapability),\n+                linkedCapability.getName(), configKey);\n+    }\n+\n+    private boolean shouldActivateService(Capabilities capabilities,\n+            Optional<Boolean> serviceEnabled,\n+            boolean linkedCapabilityIsPresent,\n+            String linkedCapabilityName,\n+            String configKey) {\n+\n+        if (serviceEnabled.isPresent()) {\n+            // The user explisitly asked from something\n+            boolean isEnabled = serviceEnabled.get();\n+            if (isEnabled) {\n+                if (linkedCapabilityIsPresent) {\n+                    // enable\n+                    return true;\n+                } else {\n+                    // Warn and disable\n+                    LOG.warnf(SERVICE_NOT_AVAILABLE_WARNING, configKey, linkedCapabilityName, linkedCapabilityName);", "originalCommit": "6c25332abfecab648867c25b15d2b2887742309b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "df99b6e09304acc3e45a9de446c02e24a478ad7e", "chunk": "diff --git a/extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLProcessor.java b/extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLProcessor.java\nindex e1b9fcf4a1..3f6a252739 100644\n--- a/extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLProcessor.java\n+++ b/extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLProcessor.java\n\n@@ -321,8 +321,12 @@ public class SmallRyeGraphQLProcessor {\n             BuildProducer<SystemPropertyBuildItem> systemProperties,\n             BuildProducer<UnremovableBeanBuildItem> unremovableBeans) {\n \n-        boolean activate = shouldActivateService(capabilities, quarkusConfig.metricsEnabled, metricsCapability.isPresent(),\n-                \"metrics\", \"quarkus.smallrye-graphql.metrics.enabled\");\n+        boolean activate = shouldActivateService(capabilities,\n+                quarkusConfig.metricsEnabled,\n+                metricsCapability.isPresent(),\n+                \"quarkus-smallrye-metrics\",\n+                \"metrics\",\n+                \"quarkus.smallrye-graphql.metrics.enabled\");\n         if (activate) {\n             if (metricsCapability.isPresent() && metricsCapability.get().metricsSupported(MetricsFactory.MP_METRICS)) {\n                 unremovableBeans.produce(UnremovableBeanBuildItem.beanClassNames(\"io.smallrye.metrics.MetricRegistries\"));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQyMjQzMA==", "url": "https://github.com/quarkusio/quarkus/pull/12783#discussion_r508422430", "bodyText": "Isn't Micrometer the extension that should be used for Metrics now? Not sure if it's supported by your GraphQL extension though?\n/cc @ebullient @jmartisk", "author": "gsmet", "createdAt": "2020-10-20T11:27:09Z", "path": "extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLProcessor.java", "diffHunk": "@@ -341,6 +313,106 @@ void openTracingIntegration(Capabilities capabilities,\n         return classes;\n     }\n \n+    // Services Integrations\n+\n+    @BuildStep\n+    void activateMetrics(Capabilities capabilities,\n+            Optional<MetricsCapabilityBuildItem> metricsCapability,\n+            BuildProducer<SystemPropertyBuildItem> systemProperties,\n+            BuildProducer<UnremovableBeanBuildItem> unremovableBeans) {\n+\n+        boolean activate = shouldActivateService(capabilities, quarkusConfig.metricsEnabled, metricsCapability.isPresent(),\n+                \"metrics\", \"quarkus.smallrye-graphql.metrics.enabled\");\n+        if (activate) {\n+            if (metricsCapability.isPresent() && metricsCapability.get().metricsSupported(MetricsFactory.MP_METRICS)) {", "originalCommit": "6c25332abfecab648867c25b15d2b2887742309b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ0NTA5NQ==", "url": "https://github.com/quarkusio/quarkus/pull/12783#discussion_r508445095", "bodyText": "there is an additional issue open to sort out graphql and metrics.. this will be revisited at that time.\n(edited: phone keyboards)", "author": "ebullient", "createdAt": "2020-10-20T12:07:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQyMjQzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ2NTQzNA==", "url": "https://github.com/quarkusio/quarkus/pull/12783#discussion_r508465434", "bodyText": "I am leaving the Metrics as is, and we can do a new PR (@jmartisk can help) to update to the micrometer.", "author": "phillip-kruger", "createdAt": "2020-10-20T12:39:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQyMjQzMA=="}], "type": "inlineReview", "revised_code": {"commit": "df99b6e09304acc3e45a9de446c02e24a478ad7e", "chunk": "diff --git a/extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLProcessor.java b/extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLProcessor.java\nindex e1b9fcf4a1..3f6a252739 100644\n--- a/extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLProcessor.java\n+++ b/extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLProcessor.java\n\n@@ -321,8 +321,12 @@ public class SmallRyeGraphQLProcessor {\n             BuildProducer<SystemPropertyBuildItem> systemProperties,\n             BuildProducer<UnremovableBeanBuildItem> unremovableBeans) {\n \n-        boolean activate = shouldActivateService(capabilities, quarkusConfig.metricsEnabled, metricsCapability.isPresent(),\n-                \"metrics\", \"quarkus.smallrye-graphql.metrics.enabled\");\n+        boolean activate = shouldActivateService(capabilities,\n+                quarkusConfig.metricsEnabled,\n+                metricsCapability.isPresent(),\n+                \"quarkus-smallrye-metrics\",\n+                \"metrics\",\n+                \"quarkus.smallrye-graphql.metrics.enabled\");\n         if (activate) {\n             if (metricsCapability.isPresent() && metricsCapability.get().metricsSupported(MetricsFactory.MP_METRICS)) {\n                 unremovableBeans.produce(UnremovableBeanBuildItem.beanClassNames(\"io.smallrye.metrics.MetricRegistries\"));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQyMjU5OA==", "url": "https://github.com/quarkusio/quarkus/pull/12783#discussion_r508422598", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Enable validation. By default this will be enabled if the bean validation extension is added.\n          \n          \n            \n                 * Enable validation. By default this will be enabled if the Hibernate Validator extension is added.", "author": "gsmet", "createdAt": "2020-10-20T11:27:25Z", "path": "extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLConfig.java", "diffHunk": "@@ -15,10 +17,28 @@\n     String rootPath;\n \n     /**\n-     * Enable metrics\n+     * Enable metrics. By default this will be enabled if the metrics extension is added.\n+     */\n+    @ConfigItem(name = \"metrics.enabled\")\n+    Optional<Boolean> metricsEnabled;\n+\n+    /**\n+     * Enable tracing. By default this will be enabled if the tracing extension is added.\n+     */\n+    @ConfigItem(name = \"tracing.enabled\")\n+    Optional<Boolean> tracingEnabled;\n+\n+    /**\n+     * Enable validation. By default this will be enabled if the bean validation extension is added.", "originalCommit": "6c25332abfecab648867c25b15d2b2887742309b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "df99b6e09304acc3e45a9de446c02e24a478ad7e", "chunk": "diff --git a/extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLConfig.java b/extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLConfig.java\nindex 3be9467f0a..c3732d7c59 100644\n--- a/extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLConfig.java\n+++ b/extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLConfig.java\n\n@@ -29,7 +29,7 @@ public class SmallRyeGraphQLConfig {\n     Optional<Boolean> tracingEnabled;\n \n     /**\n-     * Enable validation. By default this will be enabled if the bean validation extension is added.\n+     * Enable validation. By default this will be enabled if the Hibernate Validator extension is added.\n      */\n     @ConfigItem(name = \"validation.enabled\")\n     Optional<Boolean> validationEnabled;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY5MjM5Mw==", "url": "https://github.com/quarkusio/quarkus/pull/12783#discussion_r508692393", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // The user explisitly asked from something\n          \n          \n            \n                        // The user explicitly asked from something", "author": "gastaldi", "createdAt": "2020-10-20T16:59:54Z", "path": "extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLProcessor.java", "diffHunk": "@@ -341,6 +313,118 @@ void openTracingIntegration(Capabilities capabilities,\n         return classes;\n     }\n \n+    // Services Integrations\n+\n+    @BuildStep\n+    void activateMetrics(Capabilities capabilities,\n+            Optional<MetricsCapabilityBuildItem> metricsCapability,\n+            BuildProducer<SystemPropertyBuildItem> systemProperties,\n+            BuildProducer<UnremovableBeanBuildItem> unremovableBeans) {\n+\n+        boolean activate = shouldActivateService(capabilities,\n+                quarkusConfig.metricsEnabled,\n+                metricsCapability.isPresent(),\n+                \"quarkus-smallrye-metrics\",\n+                \"metrics\",\n+                \"quarkus.smallrye-graphql.metrics.enabled\");\n+        if (activate) {\n+            if (metricsCapability.isPresent() && metricsCapability.get().metricsSupported(MetricsFactory.MP_METRICS)) {\n+                unremovableBeans.produce(UnremovableBeanBuildItem.beanClassNames(\"io.smallrye.metrics.MetricRegistries\"));\n+            }\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_METRICS, TRUE));\n+        } else {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_METRICS, FALSE));\n+        }\n+    }\n+\n+    @BuildStep\n+    void activateTracing(Capabilities capabilities,\n+            BuildProducer<SystemPropertyBuildItem> systemProperties) {\n+\n+        boolean activate = shouldActivateService(capabilities,\n+                quarkusConfig.tracingEnabled,\n+                \"quarkus-smallrye-opentracing\",\n+                Capability.OPENTRACING,\n+                \"quarkus.smallrye-graphql.tracing.enabled\");\n+        if (activate) {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_TRACING, TRUE));\n+        } else {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_TRACING, FALSE));\n+        }\n+    }\n+\n+    @BuildStep\n+    void activateValidation(Capabilities capabilities,\n+            BuildProducer<SystemPropertyBuildItem> systemProperties) {\n+\n+        boolean activate = shouldActivateService(capabilities,\n+                quarkusConfig.validationEnabled,\n+                \"quarkus-hibernate-validator\",\n+                Capability.HIBERNATE_VALIDATOR,\n+                \"quarkus.smallrye-graphql.validation.enabled\");\n+        if (activate) {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_VALIDATION, TRUE));\n+        } else {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_VALIDATION, FALSE));\n+        }\n+    }\n+\n+    @BuildStep\n+    void activateEventing(BuildProducer<SystemPropertyBuildItem> systemProperties) {\n+        if (quarkusConfig.eventsEnabled) {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_EVENTS, TRUE));\n+        } else {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_EVENTS, FALSE));\n+        }\n+    }\n+\n+    private boolean shouldActivateService(Capabilities capabilities,\n+            Optional<Boolean> serviceEnabled,\n+            String linkedExtensionName,\n+            Capability linkedCapability,\n+            String configKey) {\n+\n+        return shouldActivateService(capabilities, serviceEnabled, capabilities.isPresent(linkedCapability),\n+                linkedExtensionName, linkedCapability.getName(), configKey);\n+    }\n+\n+    private boolean shouldActivateService(Capabilities capabilities,\n+            Optional<Boolean> serviceEnabled,\n+            boolean linkedCapabilityIsPresent,\n+            String linkedExtensionName,\n+            String linkedCapabilityName,\n+            String configKey) {\n+\n+        if (serviceEnabled.isPresent()) {\n+            // The user explisitly asked from something", "originalCommit": "4e2167e97a0a5873c7816e5ab7ee0827be5fa76e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "df99b6e09304acc3e45a9de446c02e24a478ad7e", "chunk": "diff --git a/extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLProcessor.java b/extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLProcessor.java\nindex 84f1921d21..3f6a252739 100644\n--- a/extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLProcessor.java\n+++ b/extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLProcessor.java\n\n@@ -396,30 +396,16 @@ public class SmallRyeGraphQLProcessor {\n             String configKey) {\n \n         if (serviceEnabled.isPresent()) {\n-            // The user explisitly asked from something\n+            // The user explicitly asked from something\n             boolean isEnabled = serviceEnabled.get();\n-            if (isEnabled) {\n-                if (linkedCapabilityIsPresent) {\n-                    // enable\n-                    return true;\n-                } else {\n-                    // Warn and disable\n-                    LOG.warnf(SERVICE_NOT_AVAILABLE_WARNING, configKey, linkedExtensionName, linkedCapabilityName);\n-                    return false;\n-                }\n-            } else {\n-                // disable\n-                return false;\n+            if (isEnabled && !linkedCapabilityIsPresent) {\n+                // Warn and disable\n+                LOG.warnf(SERVICE_NOT_AVAILABLE_WARNING, configKey, linkedExtensionName, linkedCapabilityName);\n             }\n+            return (isEnabled && linkedCapabilityIsPresent);\n         } else {\n             // Auto dis/enable\n-            if (linkedCapabilityIsPresent) {\n-                // enable\n-                return true;\n-            } else {\n-                // disable\n-                return false;\n-            }\n+            return linkedCapabilityIsPresent;\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY5NDEzNA==", "url": "https://github.com/quarkusio/quarkus/pull/12783#discussion_r508694134", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (isEnabled) {\n          \n          \n            \n                            if (linkedCapabilityIsPresent) {\n          \n          \n            \n                                // enable\n          \n          \n            \n                                return true;\n          \n          \n            \n                            } else {\n          \n          \n            \n                                // Warn and disable\n          \n          \n            \n                                LOG.warnf(SERVICE_NOT_AVAILABLE_WARNING, configKey, linkedExtensionName, linkedCapabilityName);\n          \n          \n            \n                                return false;\n          \n          \n            \n                            }\n          \n          \n            \n                        } else {\n          \n          \n            \n                            // disable\n          \n          \n            \n                            return false;\n          \n          \n            \n                        }\n          \n          \n            \n                    } else {\n          \n          \n            \n                        // Auto dis/enable\n          \n          \n            \n                        if (linkedCapabilityIsPresent) {\n          \n          \n            \n                            // enable\n          \n          \n            \n                            return true;\n          \n          \n            \n                        } else {\n          \n          \n            \n                            // disable\n          \n          \n            \n                            return false;\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                        if (isEnabled && !linkedCapabilityIsPresent) {\n          \n          \n            \n                        \t // Warn and disable\n          \n          \n            \n                                LOG.warnf(SERVICE_NOT_AVAILABLE_WARNING, configKey, linkedExtensionName, linkedCapabilityName);\n          \n          \n            \n                        }\n          \n          \n            \n                        return (isEnabled && linkedCapabilityIsPresent);\n          \n          \n            \n                    } else {\n          \n          \n            \n                       return linkedCapabilityIsPresent;", "author": "gastaldi", "createdAt": "2020-10-20T17:02:45Z", "path": "extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLProcessor.java", "diffHunk": "@@ -341,6 +313,118 @@ void openTracingIntegration(Capabilities capabilities,\n         return classes;\n     }\n \n+    // Services Integrations\n+\n+    @BuildStep\n+    void activateMetrics(Capabilities capabilities,\n+            Optional<MetricsCapabilityBuildItem> metricsCapability,\n+            BuildProducer<SystemPropertyBuildItem> systemProperties,\n+            BuildProducer<UnremovableBeanBuildItem> unremovableBeans) {\n+\n+        boolean activate = shouldActivateService(capabilities,\n+                quarkusConfig.metricsEnabled,\n+                metricsCapability.isPresent(),\n+                \"quarkus-smallrye-metrics\",\n+                \"metrics\",\n+                \"quarkus.smallrye-graphql.metrics.enabled\");\n+        if (activate) {\n+            if (metricsCapability.isPresent() && metricsCapability.get().metricsSupported(MetricsFactory.MP_METRICS)) {\n+                unremovableBeans.produce(UnremovableBeanBuildItem.beanClassNames(\"io.smallrye.metrics.MetricRegistries\"));\n+            }\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_METRICS, TRUE));\n+        } else {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_METRICS, FALSE));\n+        }\n+    }\n+\n+    @BuildStep\n+    void activateTracing(Capabilities capabilities,\n+            BuildProducer<SystemPropertyBuildItem> systemProperties) {\n+\n+        boolean activate = shouldActivateService(capabilities,\n+                quarkusConfig.tracingEnabled,\n+                \"quarkus-smallrye-opentracing\",\n+                Capability.OPENTRACING,\n+                \"quarkus.smallrye-graphql.tracing.enabled\");\n+        if (activate) {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_TRACING, TRUE));\n+        } else {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_TRACING, FALSE));\n+        }\n+    }\n+\n+    @BuildStep\n+    void activateValidation(Capabilities capabilities,\n+            BuildProducer<SystemPropertyBuildItem> systemProperties) {\n+\n+        boolean activate = shouldActivateService(capabilities,\n+                quarkusConfig.validationEnabled,\n+                \"quarkus-hibernate-validator\",\n+                Capability.HIBERNATE_VALIDATOR,\n+                \"quarkus.smallrye-graphql.validation.enabled\");\n+        if (activate) {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_VALIDATION, TRUE));\n+        } else {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_VALIDATION, FALSE));\n+        }\n+    }\n+\n+    @BuildStep\n+    void activateEventing(BuildProducer<SystemPropertyBuildItem> systemProperties) {\n+        if (quarkusConfig.eventsEnabled) {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_EVENTS, TRUE));\n+        } else {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_EVENTS, FALSE));\n+        }\n+    }\n+\n+    private boolean shouldActivateService(Capabilities capabilities,\n+            Optional<Boolean> serviceEnabled,\n+            String linkedExtensionName,\n+            Capability linkedCapability,\n+            String configKey) {\n+\n+        return shouldActivateService(capabilities, serviceEnabled, capabilities.isPresent(linkedCapability),\n+                linkedExtensionName, linkedCapability.getName(), configKey);\n+    }\n+\n+    private boolean shouldActivateService(Capabilities capabilities,\n+            Optional<Boolean> serviceEnabled,\n+            boolean linkedCapabilityIsPresent,\n+            String linkedExtensionName,\n+            String linkedCapabilityName,\n+            String configKey) {\n+\n+        if (serviceEnabled.isPresent()) {\n+            // The user explisitly asked from something\n+            boolean isEnabled = serviceEnabled.get();\n+            if (isEnabled) {\n+                if (linkedCapabilityIsPresent) {\n+                    // enable\n+                    return true;\n+                } else {\n+                    // Warn and disable\n+                    LOG.warnf(SERVICE_NOT_AVAILABLE_WARNING, configKey, linkedExtensionName, linkedCapabilityName);\n+                    return false;\n+                }\n+            } else {\n+                // disable\n+                return false;\n+            }\n+        } else {\n+            // Auto dis/enable\n+            if (linkedCapabilityIsPresent) {\n+                // enable\n+                return true;\n+            } else {\n+                // disable\n+                return false;\n+            }\n+        }", "originalCommit": "4e2167e97a0a5873c7816e5ab7ee0827be5fa76e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "df99b6e09304acc3e45a9de446c02e24a478ad7e", "chunk": "diff --git a/extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLProcessor.java b/extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLProcessor.java\nindex 84f1921d21..3f6a252739 100644\n--- a/extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLProcessor.java\n+++ b/extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLProcessor.java\n\n@@ -396,30 +396,16 @@ public class SmallRyeGraphQLProcessor {\n             String configKey) {\n \n         if (serviceEnabled.isPresent()) {\n-            // The user explisitly asked from something\n+            // The user explicitly asked from something\n             boolean isEnabled = serviceEnabled.get();\n-            if (isEnabled) {\n-                if (linkedCapabilityIsPresent) {\n-                    // enable\n-                    return true;\n-                } else {\n-                    // Warn and disable\n-                    LOG.warnf(SERVICE_NOT_AVAILABLE_WARNING, configKey, linkedExtensionName, linkedCapabilityName);\n-                    return false;\n-                }\n-            } else {\n-                // disable\n-                return false;\n+            if (isEnabled && !linkedCapabilityIsPresent) {\n+                // Warn and disable\n+                LOG.warnf(SERVICE_NOT_AVAILABLE_WARNING, configKey, linkedExtensionName, linkedCapabilityName);\n             }\n+            return (isEnabled && linkedCapabilityIsPresent);\n         } else {\n             // Auto dis/enable\n-            if (linkedCapabilityIsPresent) {\n-                // enable\n-                return true;\n-            } else {\n-                // disable\n-                return false;\n-            }\n+            return linkedCapabilityIsPresent;\n         }\n     }\n \n"}}, {"oid": "df99b6e09304acc3e45a9de446c02e24a478ad7e", "url": "https://github.com/quarkusio/quarkus/commit/df99b6e09304acc3e45a9de446c02e24a478ad7e", "message": "Clean up the config of service integration\n\nSigned-off-by: Phillip Kruger <phillip.kruger@gmail.com>", "committedDate": "2020-10-21T11:02:23Z", "type": "commit"}]}