{"pr_number": 9353, "pr_title": "Add support for Gradle Kotlin DSL", "pr_createdAt": "2020-05-15T16:20:41Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/9353", "timeline": [{"oid": "d1da13fbfc9f021370870e7c37674803778d37ed", "url": "https://github.com/quarkusio/quarkus/commit/d1da13fbfc9f021370870e7c37674803778d37ed", "message": "Add support for Gradle Kotlin DSL", "committedDate": "2020-05-15T17:38:33Z", "type": "forcePushed"}, {"oid": "b5c6b5b0c1884a8447969fe995c9562108d40947", "url": "https://github.com/quarkusio/quarkus/commit/b5c6b5b0c1884a8447969fe995c9562108d40947", "message": "Add support for Gradle Kotlin DSL", "committedDate": "2020-05-16T20:38:18Z", "type": "forcePushed"}, {"oid": "8cf38b8393be440125efca03e7550bf13a3a15c3", "url": "https://github.com/quarkusio/quarkus/commit/8cf38b8393be440125efca03e7550bf13a3a15c3", "message": "Add support for Gradle Kotlin DSL", "committedDate": "2020-05-17T11:50:04Z", "type": "forcePushed"}, {"oid": "b8d38a72d546c2405f27e5c8e4f08677141175f7", "url": "https://github.com/quarkusio/quarkus/commit/b8d38a72d546c2405f27e5c8e4f08677141175f7", "message": "Add support for Gradle Kotlin DSL", "committedDate": "2020-07-14T07:52:32Z", "type": "forcePushed"}, {"oid": "493d0662d4b4a034037aa8baaac6d399d1550496", "url": "https://github.com/quarkusio/quarkus/commit/493d0662d4b4a034037aa8baaac6d399d1550496", "message": "Add support for Gradle Kotlin DSL", "committedDate": "2020-08-05T19:12:44Z", "type": "forcePushed"}, {"oid": "9726174b144b87a808d526194e89f1ee0c49f682", "url": "https://github.com/quarkusio/quarkus/commit/9726174b144b87a808d526194e89f1ee0c49f682", "message": "Add support for Gradle Kotlin DSL", "committedDate": "2020-08-11T13:30:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU4NjQwMA==", "url": "https://github.com/quarkusio/quarkus/pull/9353#discussion_r468586400", "bodyText": "what do you think of editing and using BuildTool.findTool:\n    public static BuildTool findTool(String tool) {\n        if (\"GRADLE\".equalsIgnoreCase(tool))\n            return GRADLE;\n        else if (\"GRADLE_KOTLIN_DSL\".equalsIgnoreCase(tool) || \"gradle-kotlin-dsl\".equalsIgnoreCase(tool))\n            return GRADLE_KOTLIN_DSL;\n        else if (\"MAVEN\".equalsIgnoreCase(tool))\n            return MAVEN;\n        else\n            return null;\n    }\nthen you would just have:\nBuildTool.findTool(buildTool);", "author": "ia3andy", "createdAt": "2020-08-11T13:39:38Z", "path": "devtools/maven/src/main/java/io/quarkus/maven/CreateProjectMojo.java", "diffHunk": "@@ -183,7 +183,7 @@ public void execute() throws MojoExecutionException {\n \n             BuildTool buildToolEnum;\n             try {\n-                buildToolEnum = BuildTool.valueOf(buildTool.toUpperCase());\n+                buildToolEnum = BuildTool.valueOf(buildTool.toUpperCase().replace('-', '_'));", "originalCommit": "9726174b144b87a808d526194e89f1ee0c49f682", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU5MzA0OQ==", "url": "https://github.com/quarkusio/quarkus/pull/9353#discussion_r468593049", "bodyText": "Good idea. I will change this.", "author": "mgorniew", "createdAt": "2020-08-11T13:48:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU4NjQwMA=="}], "type": "inlineReview", "revised_code": {"commit": "5c260f47cde465d92b2843c4dda6486688375dee", "chunk": "diff --git a/devtools/maven/src/main/java/io/quarkus/maven/CreateProjectMojo.java b/devtools/maven/src/main/java/io/quarkus/maven/CreateProjectMojo.java\nindex 65cbc30052..561553527c 100644\n--- a/devtools/maven/src/main/java/io/quarkus/maven/CreateProjectMojo.java\n+++ b/devtools/maven/src/main/java/io/quarkus/maven/CreateProjectMojo.java\n\n@@ -183,7 +183,7 @@ public class CreateProjectMojo extends AbstractMojo {\n \n             BuildTool buildToolEnum;\n             try {\n-                buildToolEnum = BuildTool.valueOf(buildTool.toUpperCase().replace('-', '_'));\n+                buildToolEnum = BuildTool.findTool(buildTool);\n             } catch (IllegalArgumentException e) {\n                 String validBuildTools = String.join(\",\",\n                         Arrays.asList(BuildTool.values()).stream().map(BuildTool::toString).collect(Collectors.toList()));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU4NzMxMA==", "url": "https://github.com/quarkusio/quarkus/pull/9353#discussion_r468587310", "bodyText": "This seem to be only Kotlin compatible no?", "author": "ia3andy", "createdAt": "2020-08-11T13:40:56Z", "path": "independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/project/buildfile/AbstractGradleBuildFile.java", "diffHunk": "@@ -36,81 +34,79 @@ public AbstractGradleBuildFile(final Path projectDirPath, final QuarkusPlatformD\n         this.rootProjectPath = rootProjectPath;\n     }\n \n+    abstract String getSettingsGradlePath();\n+\n+    abstract String getBuildGradlePath();\n+\n     @Override\n     public void writeToDisk() throws IOException {\n         if (rootProjectPath != null) {\n-            Files.write(rootProjectPath.resolve(SETTINGS_GRADLE_PATH), getModel().getRootSettingsContent().getBytes());\n+            Files.write(rootProjectPath.resolve(getSettingsGradlePath()), getModel().getRootSettingsContent().getBytes());\n             try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n                 getModel().getRootPropertiesContent().store(out, \"Gradle properties\");\n                 Files.write(rootProjectPath.resolve(GRADLE_PROPERTIES_PATH),\n                         out.toByteArray());\n             }\n         } else {\n-            writeToProjectFile(SETTINGS_GRADLE_PATH, getModel().getSettingsContent().getBytes());\n+            writeToProjectFile(getSettingsGradlePath(), getModel().getSettingsContent().getBytes());\n             try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n                 getModel().getPropertiesContent().store(out, \"Gradle properties\");\n                 writeToProjectFile(GRADLE_PROPERTIES_PATH, out.toByteArray());\n             }\n         }\n-        writeToProjectFile(BUILD_GRADLE_PATH, getModel().getBuildContent().getBytes());\n-    }\n-\n-    @Override\n-    protected boolean addDependency(AppArtifactCoords coords, boolean managed) {\n-        return addDependencyInModel(getModel(), coords, managed);\n+        writeToProjectFile(getBuildGradlePath(), getModel().getBuildContent().getBytes());\n     }\n \n-    static boolean addDependencyInModel(Model model, AppArtifactCoords coords, boolean managed) {\n+    static String createDependencyCoordinatesString(Model model, AppArtifactCoords coords, boolean managed) {\n         boolean isBOM = \"pom\".equals(coords.getType());\n-        StringBuilder newDependency;\n-        if (isBOM) {\n-            // Check if BOM is not included already\n-            String resolvedPlatform = String\n-                    .format(\"%s:%s\", getProperty(model, \"quarkusPlatformGroupId\"),\n-                            getProperty(model, \"quarkusPlatformArtifactId\"));\n-            String thisBOM = String.format(\"%s:%s\", coords.getGroupId(), coords.getArtifactId());\n-            if (thisBOM.equals(resolvedPlatform)) {\n-                // BOM matches the platform, no need to do anything\n-                return false;\n-            }\n-            newDependency = new StringBuilder()\n-                    .append(\"    implementation enforcedPlatform(\\\"\")\n-                    .append(thisBOM).append(\":\").append(coords.getVersion())\n-                    .append(\"\\\")'\");\n-        } else {\n-            newDependency = new StringBuilder()\n-                    .append(\"    implementation '\")\n-                    .append(coords.getGroupId())\n-                    .append(\":\")\n-                    .append(coords.getArtifactId());\n-        }\n+        // Special case for platform dependency. We will create properties based dependency string.\n+        // It will be ignored if it is already in \"dependencies\" section.\n+        // Note that we ignore version here - if someone tries to add platform with different version, we will still use\n+        // version from properties.\n+        if (isBOM && !managed\n+                && Objects.equals(coords.getGroupId(), getProperty(model, \"quarkusPlatformGroupId\"))\n+                && Objects.equals(coords.getArtifactId(), getProperty(model, \"quarkusPlatformArtifactId\"))) {\n+            return \"enforcedPlatform(\\\"${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}\\\")\";", "originalCommit": "9726174b144b87a808d526194e89f1ee0c49f682", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU5NjQwNg==", "url": "https://github.com/quarkusio/quarkus/pull/9353#discussion_r468596406", "bodyText": "This part should be fine for Groovy and Kotlin DSL (property names are same), but this still will not work since AbstractGroovyGradleBuildFile and AbstractKotlinGradleBuildFile will surround this string with ' and \". Not sure why integration tests didn't catch that. I will fix this.", "author": "mgorniew", "createdAt": "2020-08-11T13:53:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU4NzMxMA=="}], "type": "inlineReview", "revised_code": {"commit": "5c260f47cde465d92b2843c4dda6486688375dee", "chunk": "diff --git a/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/project/buildfile/AbstractGradleBuildFile.java b/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/project/buildfile/AbstractGradleBuildFile.java\nindex eb95492df2..5a0e051ca1 100644\n--- a/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/project/buildfile/AbstractGradleBuildFile.java\n+++ b/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/project/buildfile/AbstractGradleBuildFile.java\n\n@@ -57,7 +57,7 @@ abstract class AbstractGradleBuildFile extends BuildFile {\n         writeToProjectFile(getBuildGradlePath(), getModel().getBuildContent().getBytes());\n     }\n \n-    static String createDependencyCoordinatesString(Model model, AppArtifactCoords coords, boolean managed) {\n+    static String createDependencyCoordinatesString(Model model, AppArtifactCoords coords, boolean managed, char quoteChar) {\n         boolean isBOM = \"pom\".equals(coords.getType());\n         // Special case for platform dependency. We will create properties based dependency string.\n         // It will be ignored if it is already in \"dependencies\" section.\n"}}, {"oid": "5c260f47cde465d92b2843c4dda6486688375dee", "url": "https://github.com/quarkusio/quarkus/commit/5c260f47cde465d92b2843c4dda6486688375dee", "message": "Add support for Gradle Kotlin DSL", "committedDate": "2020-08-11T21:49:37Z", "type": "forcePushed"}, {"oid": "8d04d3c99958612c00fd4d6320bc05b35ddfb922", "url": "https://github.com/quarkusio/quarkus/commit/8d04d3c99958612c00fd4d6320bc05b35ddfb922", "message": "Add support for Gradle Kotlin DSL", "committedDate": "2020-08-12T08:02:18Z", "type": "forcePushed"}, {"oid": "e187e132e07a9687509dd8f6a6723d97596b24b2", "url": "https://github.com/quarkusio/quarkus/commit/e187e132e07a9687509dd8f6a6723d97596b24b2", "message": "Add support for Gradle Kotlin DSL", "committedDate": "2020-08-12T08:43:32Z", "type": "forcePushed"}, {"oid": "e661c7b2ae931dad7c9ab2ba9c182f9053b73a1a", "url": "https://github.com/quarkusio/quarkus/commit/e661c7b2ae931dad7c9ab2ba9c182f9053b73a1a", "message": "Add support for Gradle Kotlin DSL", "committedDate": "2020-08-12T12:36:07Z", "type": "commit"}, {"oid": "e661c7b2ae931dad7c9ab2ba9c182f9053b73a1a", "url": "https://github.com/quarkusio/quarkus/commit/e661c7b2ae931dad7c9ab2ba9c182f9053b73a1a", "message": "Add support for Gradle Kotlin DSL", "committedDate": "2020-08-12T12:36:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIzMDc2OQ==", "url": "https://github.com/quarkusio/quarkus/pull/9353#discussion_r469230769", "bodyText": "cool \ud83d\udc4d", "author": "ia3andy", "createdAt": "2020-08-12T12:43:36Z", "path": "integration-tests/devtools/src/test/java/io/quarkus/devtools/codestarts/CodestartProjectRunTest.java", "diffHunk": "@@ -72,6 +72,8 @@ private void generateProjectRunTests(String buildtool, String language, List<Str\n                 .addData(getTestInputData(Collections.singletonMap(\"artifact-id\", name)))\n                 .addCodestarts(codestarts)\n                 .putData(\"buildtool.name\", buildtool)\n+                // for JVM 8 and 14 this will generate project with java 1.8, for JVM 11 project with java 11", "originalCommit": "e661c7b2ae931dad7c9ab2ba9c182f9053b73a1a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}