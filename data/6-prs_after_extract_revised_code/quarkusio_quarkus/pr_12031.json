{"pr_number": 12031, "pr_title": "Make sure that Funqy types are registered for reflection", "pr_createdAt": "2020-09-10T15:42:41Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/12031", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4NDkzMQ==", "url": "https://github.com/quarkusio/quarkus/pull/12031#discussion_r486484931", "bodyText": "If the return type Uni<T> doesn't this register whole Uni<T>  instead of just T?\nWe do some processing related to this in FunctionInvoker.\nIf possible maybe registration of FunctionInvoker::inputType and FunctionInvoker::outputType should be sufficient.", "author": "matejvasek", "createdAt": "2020-09-10T16:40:48Z", "path": "extensions/funqy/funqy-server-common/deployment/src/main/java/io/quarkus/funqy/deployment/FunctionScannerBuildStep.java", "diffHunk": "@@ -63,6 +70,34 @@ public void scanFunctions(BeanArchiveIndexBuildItem beanArchiveIndexBuildItem,\n             if (functionName != null && functionName.isEmpty())\n                 functionName = null;\n             functions.produce(new FunctionBuildItem(className, methodName, functionName));\n+\n+            String source = FunctionScannerBuildStep.class.getSimpleName() + \" > \" + method.declaringClass() + \"[\" + method\n+                    + \"]\";\n+\n+            Type returnType = method.returnType();\n+            if (returnType.kind() != Type.Kind.VOID) {\n+                reflectiveHierarchy.produce(new ReflectiveHierarchyBuildItem.Builder()", "originalCommit": "8e69cc957d5278be4d867183df8a5fff7a179985", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4NjQ0Mw==", "url": "https://github.com/quarkusio/quarkus/pull/12031#discussion_r486486443", "bodyText": "I'll check it out later on today or tomorrow morning", "author": "geoand", "createdAt": "2020-09-10T16:43:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4NDkzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUyNDM2NA==", "url": "https://github.com/quarkusio/quarkus/pull/12031#discussion_r486524364", "bodyText": "PR updated to exclude Mutiny types (the generics types do get registered however).\nWe don't need the output of FunctionInvoker::inputType or FunctionInvoker::outputType as we already know the types that need to be registered at build time by just looking at the method signatures (same as RESTEasy)", "author": "geoand", "createdAt": "2020-09-10T17:47:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4NDkzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "c0428da3102eb000e930f2dbec370754f6b6e284", "chunk": "diff --git a/extensions/funqy/funqy-server-common/deployment/src/main/java/io/quarkus/funqy/deployment/FunctionScannerBuildStep.java b/extensions/funqy/funqy-server-common/deployment/src/main/java/io/quarkus/funqy/deployment/FunctionScannerBuildStep.java\nindex d84049b474..6d5526e8ce 100644\n--- a/extensions/funqy/funqy-server-common/deployment/src/main/java/io/quarkus/funqy/deployment/FunctionScannerBuildStep.java\n+++ b/extensions/funqy/funqy-server-common/deployment/src/main/java/io/quarkus/funqy/deployment/FunctionScannerBuildStep.java\n\n@@ -70,34 +63,6 @@ public class FunctionScannerBuildStep {\n             if (functionName != null && functionName.isEmpty())\n                 functionName = null;\n             functions.produce(new FunctionBuildItem(className, methodName, functionName));\n-\n-            String source = FunctionScannerBuildStep.class.getSimpleName() + \" > \" + method.declaringClass() + \"[\" + method\n-                    + \"]\";\n-\n-            Type returnType = method.returnType();\n-            if (returnType.kind() != Type.Kind.VOID) {\n-                reflectiveHierarchy.produce(new ReflectiveHierarchyBuildItem.Builder()\n-                        .type(returnType)\n-                        .index(index)\n-                        .ignoreTypePredicate(IGNORE_TYPE_FOR_REFLECTION_PREDICATE)\n-                        .ignoreFieldPredicate(IGNORE_FIELD_FOR_REFLECTION_PREDICATE)\n-                        .ignoreMethodPredicate(IGNORE_METHOD_FOR_REFLECTION_PREDICATE)\n-                        .source(source)\n-                        .build());\n-            }\n-            for (short i = 0; i < method.parameters().size(); i++) {\n-                Type parameterType = method.parameters().get(i);\n-                if (!hasAnnotation(method, i, CONTEXT)) {\n-                    reflectiveHierarchy.produce(new ReflectiveHierarchyBuildItem.Builder()\n-                            .type(parameterType)\n-                            .index(index)\n-                            .ignoreTypePredicate(IGNORE_TYPE_FOR_REFLECTION_PREDICATE)\n-                            .ignoreFieldPredicate(IGNORE_FIELD_FOR_REFLECTION_PREDICATE)\n-                            .ignoreMethodPredicate(IGNORE_METHOD_FOR_REFLECTION_PREDICATE)\n-                            .source(source)\n-                            .build());\n-                }\n-            }\n         }\n         Set<ClassInfo> withoutDefaultCtor = new HashSet<>();\n         for (ClassInfo clazz : classes) {\n"}}, {"oid": "7a5f55d30ed7c9005d4230972075aa520792df9c", "url": "https://github.com/quarkusio/quarkus/commit/7a5f55d30ed7c9005d4230972075aa520792df9c", "message": "Make sure that Funqy types are registered for reflection\n\nDone in a way very similar to what we do for RESTEasy\n\nFixes: #12019", "committedDate": "2020-09-10T17:45:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYxNDY0OA==", "url": "https://github.com/quarkusio/quarkus/pull/12031#discussion_r486614648", "bodyText": "I don't think so. It should be in the RESTEasy ones though.\nBasically, we need to ignore them if we have some special handling for them, which is the case for RESTEasy.", "author": "gsmet", "createdAt": "2020-09-10T20:29:03Z", "path": "extensions/funqy/funqy-server-common/deployment/src/main/java/io/quarkus/funqy/deployment/ReflectionRegistrationUtil.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package io.quarkus.funqy.deployment;\n+\n+import java.util.function.Predicate;\n+\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.FieldInfo;\n+import org.jboss.jandex.MethodInfo;\n+\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveHierarchyBuildItem;\n+\n+final class ReflectionRegistrationUtil {\n+\n+    private ReflectionRegistrationUtil() {\n+    }\n+\n+    static final IgnoreTypeForReflectionPredicate IGNORE_TYPE_FOR_REFLECTION_PREDICATE = new IgnoreTypeForReflectionPredicate();\n+    static final IgnoreFieldForReflectionPredicate IGNORE_FIELD_FOR_REFLECTION_PREDICATE = new IgnoreFieldForReflectionPredicate();\n+    static final IgnoreMethodForReflectionPredicate IGNORE_METHOD_FOR_REFLECTION_PREDICATE = new IgnoreMethodForReflectionPredicate();\n+\n+    private static final DotName JSON_IGNORE = DotName.createSimple(\"com.fasterxml.jackson.annotation.JsonIgnore\");\n+    private static final DotName JSONB_TRANSIENT = DotName.createSimple(\"javax.json.bind.annotation.JsonbTransient\");\n+\n+    private static class IgnoreTypeForReflectionPredicate implements Predicate<DotName> {\n+\n+        @Override\n+        public boolean test(DotName dotName) {\n+            if (ReflectiveHierarchyBuildItem.DefaultIgnoreTypePredicate.INSTANCE.test(dotName)) {\n+                return true;\n+            }\n+\n+            String name = dotName.toString();\n+            for (String packageName : PACKAGES_IGNORED_FOR_REFLECTION) {\n+                if (name.startsWith(packageName)) {\n+                    return true;\n+                }\n+            }\n+            return false;\n+        }\n+    }\n+\n+    private static class IgnoreFieldForReflectionPredicate implements Predicate<FieldInfo> {\n+\n+        @Override\n+        public boolean test(FieldInfo fieldInfo) {\n+            return fieldInfo.hasAnnotation(JSON_IGNORE)\n+                    || fieldInfo.hasAnnotation(JSONB_TRANSIENT);\n+        }\n+    }\n+\n+    private static class IgnoreMethodForReflectionPredicate implements Predicate<MethodInfo> {\n+\n+        @Override\n+        public boolean test(MethodInfo methodInfo) {\n+            return methodInfo.hasAnnotation(JSON_IGNORE)\n+                    || methodInfo.hasAnnotation(JSONB_TRANSIENT);\n+        }\n+    }\n+\n+    private static final String[] PACKAGES_IGNORED_FOR_REFLECTION = {\n+            // Mutiny\n+            // TODO: should this be in ReflectiveHierarchyBuildItem.DefaultIgnoreTypePredicate?", "originalCommit": "7a5f55d30ed7c9005d4230972075aa520792df9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc2OTA2Mg==", "url": "https://github.com/quarkusio/quarkus/pull/12031#discussion_r486769062", "bodyText": "I don't see us ignoring the Mutiny types in RESTEasy, or perhaps I am just missing something?", "author": "geoand", "createdAt": "2020-09-11T04:39:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYxNDY0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE3ODAyMQ==", "url": "https://github.com/quarkusio/quarkus/pull/12031#discussion_r487178021", "bodyText": "Yeah, what I was saying is that we probably should. And definitely not do it in the generic ReflectiveHierarchyBuildItem.", "author": "gsmet", "createdAt": "2020-09-11T17:10:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYxNDY0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE4Mjc3MQ==", "url": "https://github.com/quarkusio/quarkus/pull/12031#discussion_r487182771", "bodyText": "Okay, I'll update the PR later on", "author": "geoand", "createdAt": "2020-09-11T17:19:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYxNDY0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIwNjYyNg==", "url": "https://github.com/quarkusio/quarkus/pull/12031#discussion_r487206626", "bodyText": "Done", "author": "geoand", "createdAt": "2020-09-11T18:06:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYxNDY0OA=="}], "type": "inlineReview", "revised_code": {"commit": "c0428da3102eb000e930f2dbec370754f6b6e284", "chunk": "diff --git a/extensions/funqy/funqy-server-common/deployment/src/main/java/io/quarkus/funqy/deployment/ReflectionRegistrationUtil.java b/extensions/funqy/funqy-server-common/deployment/src/main/java/io/quarkus/funqy/deployment/ReflectionRegistrationUtil.java\ndeleted file mode 100644\nindex 32b240641f..0000000000\n--- a/extensions/funqy/funqy-server-common/deployment/src/main/java/io/quarkus/funqy/deployment/ReflectionRegistrationUtil.java\n+++ /dev/null\n\n@@ -1,64 +0,0 @@\n-package io.quarkus.funqy.deployment;\n-\n-import java.util.function.Predicate;\n-\n-import org.jboss.jandex.DotName;\n-import org.jboss.jandex.FieldInfo;\n-import org.jboss.jandex.MethodInfo;\n-\n-import io.quarkus.deployment.builditem.nativeimage.ReflectiveHierarchyBuildItem;\n-\n-final class ReflectionRegistrationUtil {\n-\n-    private ReflectionRegistrationUtil() {\n-    }\n-\n-    static final IgnoreTypeForReflectionPredicate IGNORE_TYPE_FOR_REFLECTION_PREDICATE = new IgnoreTypeForReflectionPredicate();\n-    static final IgnoreFieldForReflectionPredicate IGNORE_FIELD_FOR_REFLECTION_PREDICATE = new IgnoreFieldForReflectionPredicate();\n-    static final IgnoreMethodForReflectionPredicate IGNORE_METHOD_FOR_REFLECTION_PREDICATE = new IgnoreMethodForReflectionPredicate();\n-\n-    private static final DotName JSON_IGNORE = DotName.createSimple(\"com.fasterxml.jackson.annotation.JsonIgnore\");\n-    private static final DotName JSONB_TRANSIENT = DotName.createSimple(\"javax.json.bind.annotation.JsonbTransient\");\n-\n-    private static class IgnoreTypeForReflectionPredicate implements Predicate<DotName> {\n-\n-        @Override\n-        public boolean test(DotName dotName) {\n-            if (ReflectiveHierarchyBuildItem.DefaultIgnoreTypePredicate.INSTANCE.test(dotName)) {\n-                return true;\n-            }\n-\n-            String name = dotName.toString();\n-            for (String packageName : PACKAGES_IGNORED_FOR_REFLECTION) {\n-                if (name.startsWith(packageName)) {\n-                    return true;\n-                }\n-            }\n-            return false;\n-        }\n-    }\n-\n-    private static class IgnoreFieldForReflectionPredicate implements Predicate<FieldInfo> {\n-\n-        @Override\n-        public boolean test(FieldInfo fieldInfo) {\n-            return fieldInfo.hasAnnotation(JSON_IGNORE)\n-                    || fieldInfo.hasAnnotation(JSONB_TRANSIENT);\n-        }\n-    }\n-\n-    private static class IgnoreMethodForReflectionPredicate implements Predicate<MethodInfo> {\n-\n-        @Override\n-        public boolean test(MethodInfo methodInfo) {\n-            return methodInfo.hasAnnotation(JSON_IGNORE)\n-                    || methodInfo.hasAnnotation(JSONB_TRANSIENT);\n-        }\n-    }\n-\n-    private static final String[] PACKAGES_IGNORED_FOR_REFLECTION = {\n-            // Mutiny\n-            // TODO: should this be in ReflectiveHierarchyBuildItem.DefaultIgnoreTypePredicate?\n-            \"io.smallrye.mutiny.\"\n-    };\n-}\n"}}, {"oid": "c0428da3102eb000e930f2dbec370754f6b6e284", "url": "https://github.com/quarkusio/quarkus/commit/c0428da3102eb000e930f2dbec370754f6b6e284", "message": "Avoid potential NPE in ReflectiveHierarchyStep", "committedDate": "2020-09-11T18:02:23Z", "type": "commit"}, {"oid": "809610fdf6bc4cae4e51f7a6e407abab3655f064", "url": "https://github.com/quarkusio/quarkus/commit/809610fdf6bc4cae4e51f7a6e407abab3655f064", "message": "Make sure that Funqy types are registered for reflection\n\nDone in a way very similar to what we do for RESTEasy\n\nFixes: #12019", "committedDate": "2020-09-11T18:02:23Z", "type": "commit"}, {"oid": "6bf7f6e6b1501542f306ea7ba14f2e6e77059910", "url": "https://github.com/quarkusio/quarkus/commit/6bf7f6e6b1501542f306ea7ba14f2e6e77059910", "message": "Add mutiny to ignored to types for reflection", "committedDate": "2020-09-11T18:02:23Z", "type": "commit"}, {"oid": "6bf7f6e6b1501542f306ea7ba14f2e6e77059910", "url": "https://github.com/quarkusio/quarkus/commit/6bf7f6e6b1501542f306ea7ba14f2e6e77059910", "message": "Add mutiny to ignored to types for reflection", "committedDate": "2020-09-11T18:02:23Z", "type": "forcePushed"}]}