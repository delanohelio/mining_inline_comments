{"pr_number": 9580, "pr_title": "Reactive routes - use end handler to terminate the CDI request context", "pr_createdAt": "2020-05-25T13:13:51Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/9580", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkzMzkyOQ==", "url": "https://github.com/quarkusio/quarkus/pull/9580#discussion_r429933929", "bodyText": "Did you actually run this test without your fix? Did it fail?\nI'm asking because this looks like a synchronous call: there's nothing that would make it switch thread or delay execution.\nIf it does already pass without your fix (as I think it should), try switching your code to:\nUni.createFrom().item(ctx.request().getParam(\"val\")).onItem().delayIt().by(Duration.ofMillis(200)).subscribe().with(...)", "author": "FroMage", "createdAt": "2020-05-25T13:26:11Z", "path": "extensions/vertx-web/deployment/src/test/java/io/quarkus/vertx/web/reactive/RequestContextPropagationTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package io.quarkus.vertx.web.reactive;\n+\n+import static io.restassured.RestAssured.get;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import javax.annotation.PreDestroy;\n+import javax.enterprise.context.RequestScoped;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.test.QuarkusUnitTest;\n+import io.quarkus.vertx.web.Route;\n+import io.smallrye.mutiny.Uni;\n+import io.vertx.ext.web.RoutingContext;\n+\n+public class RequestContextPropagationTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest config = new QuarkusUnitTest()\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                    .addClasses(MyRoutes.class, Ping.class));\n+\n+    @Test\n+    public void test() {\n+        get(\"/ping?val=bar\").then().statusCode(200).body(is(\"foo_bar\"));\n+        assertTrue(Ping.DESTROYED.get());\n+    }\n+\n+    @Singleton\n+    static class MyRoutes {\n+\n+        @Inject\n+        Ping ping;\n+\n+        @Route(path = \"ping\")\n+        void ping(RoutingContext ctx) {\n+            // Init the Ping bean\n+            ping.init(\"foo_\");\n+            Uni.createFrom().item(ctx.request().getParam(\"val\")).subscribe().with(", "originalCommit": "41e3f69b1d938f93a0546eb26810770dda088d30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkzNjk3MQ==", "url": "https://github.com/quarkusio/quarkus/pull/9580#discussion_r429936971", "bodyText": "Yes, I did and it failed. Most probably because my machine is fast and the ping() method completes before the Uni callback. .delayIt().by(Duration.ofMillis(200)) sounds reasonable though. Thanks...", "author": "mkouba", "createdAt": "2020-05-25T13:32:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkzMzkyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkzOTM3MQ==", "url": "https://github.com/quarkusio/quarkus/pull/9580#discussion_r429939371", "bodyText": "The speed of your machine should not be able to explain it failing. Either Uni.createFrom().item(ctx.request().getParam(\"val\")).subscribe().with() is synchronous, or it's not. If it's synchronous your callback will be called before the method returns and before you get into your interceptor, which therefore should not fail the test because we haven't destroyed the context yet.\n@cescoffier where am I wrong here?", "author": "FroMage", "createdAt": "2020-05-25T13:37:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkzMzkyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk0MTIyMQ==", "url": "https://github.com/quarkusio/quarkus/pull/9580#discussion_r429941221", "bodyText": "Hm, why do you think it's synchronous? I'm definitely no expert here but I'd expect it to be async... @cescoffier will tell us ;-).", "author": "mkouba", "createdAt": "2020-05-25T13:41:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkzMzkyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk0MzQzNg==", "url": "https://github.com/quarkusio/quarkus/pull/9580#discussion_r429943436", "bodyText": "Well, item() is synchronous, no?", "author": "FroMage", "createdAt": "2020-05-25T13:45:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkzMzkyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk0ODg1NA==", "url": "https://github.com/quarkusio/quarkus/pull/9580#discussion_r429948854", "bodyText": "Yes, but Uni.subscribe() is not... but I may be completely wrong ;-).", "author": "mkouba", "createdAt": "2020-05-25T13:57:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkzMzkyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk2Nzc0NA==", "url": "https://github.com/quarkusio/quarkus/pull/9580#discussion_r429967744", "bodyText": "The item method will emit the item immediately after subscription in a synchronous fashion (using the thread used for the subscription).\nYou can simulate some delay with delayIt as pointed by @FroMage.", "author": "cescoffier", "createdAt": "2020-05-25T14:36:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkzMzkyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk2OTAzNw==", "url": "https://github.com/quarkusio/quarkus/pull/9580#discussion_r429969037", "bodyText": "Just to clarify:\nUni.createFrom().item(\"hello\").subscribe().with(t -> Systme.out.println(t));\nSystem.out.println(\"Done\");\n\nprints:\nhello\nDone\n\nUni.createFrom().item(\"hello\")\n    .onItem().delayIt().by(Duration.ofSecond(1))\n    .subscribe().with(t -> Systme.out.println(t));\nSystem.out.println(\"Done\");\n\nprints:\nDone\nhello # printed roughly 1 second later", "author": "cescoffier", "createdAt": "2020-05-25T14:39:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkzMzkyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk3MTY4MA==", "url": "https://github.com/quarkusio/quarkus/pull/9580#discussion_r429971680", "bodyText": "Ok, I should double check my test then... Anyway, from my \"reactive noob\" POV it feels weird that onItem().delayIt().by(Duration.ofSecond(1)) causes async execution. I read the javadoc of subscribe() as a non-blocking subscription...", "author": "mkouba", "createdAt": "2020-05-25T14:44:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkzMzkyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk3NTY5Ng==", "url": "https://github.com/quarkusio/quarkus/pull/9580#discussion_r429975696", "bodyText": "Well, subscribe depends on whether the left-hand-side is already completed or not. In the case of a single item it is, so synchronous. In the case of delay, it's not, so it will be completed later, so async.\nNow the much bigger questions is how could this test possibly fail before you put the fix, since it's all synchronous? That's what's worrying me.", "author": "FroMage", "createdAt": "2020-05-25T14:53:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkzMzkyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk3NjU2Nw==", "url": "https://github.com/quarkusio/quarkus/pull/9580#discussion_r429976567", "bodyText": "That's what's worrying me.\n\nMaybe it's just a PEBKAC on my side ;-). I will tell you in few mins...", "author": "mkouba", "createdAt": "2020-05-25T14:55:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkzMzkyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk3ODA5Mw==", "url": "https://github.com/quarkusio/quarkus/pull/9580#discussion_r429978093", "bodyText": "subscribe is non-blocking. It does not block the caller thread. It receives the item once it is emitted.\nSo the interesting aspect is when your item is emitted. In your code, the item is emitted during the subscription (immediately). That's what Uni.createFrom().item() is doing. Then, every processing stage is synchronous in your code - which means each stage is called immediately (well, you don't do any processing so it's obviously synchronous). That explains why the subscriber is called directly (on the subscriber thread).", "author": "cescoffier", "createdAt": "2020-05-25T14:58:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkzMzkyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk4MjcyNQ==", "url": "https://github.com/quarkusio/quarkus/pull/9580#discussion_r429982725", "bodyText": "Good news everyone. It was PEBKAC... I wasn't able to reproduce the failure without onItem().delayIt(). Thanks for clarification guys!", "author": "mkouba", "createdAt": "2020-05-25T15:09:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkzMzkyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk4NDMxMw==", "url": "https://github.com/quarkusio/quarkus/pull/9580#discussion_r429984313", "bodyText": "OK, pfew, at least we are more confident in the test and fix now :)", "author": "FroMage", "createdAt": "2020-05-25T15:13:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkzMzkyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "c2cadaccfde325e3d286bf68e238132a1fd6f901", "chunk": "diff --git a/extensions/vertx-web/deployment/src/test/java/io/quarkus/vertx/web/reactive/RequestContextPropagationTest.java b/extensions/vertx-web/deployment/src/test/java/io/quarkus/vertx/web/reactive/RequestContextPropagationTest.java\nindex a82b59aad1..2550bfe65f 100644\n--- a/extensions/vertx-web/deployment/src/test/java/io/quarkus/vertx/web/reactive/RequestContextPropagationTest.java\n+++ b/extensions/vertx-web/deployment/src/test/java/io/quarkus/vertx/web/reactive/RequestContextPropagationTest.java\n\n@@ -4,6 +4,7 @@ import static io.restassured.RestAssured.get;\n import static org.hamcrest.Matchers.is;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+import java.time.Duration;\n import java.util.concurrent.atomic.AtomicBoolean;\n \n import javax.annotation.PreDestroy;\n"}}, {"oid": "c2cadaccfde325e3d286bf68e238132a1fd6f901", "url": "https://github.com/quarkusio/quarkus/commit/c2cadaccfde325e3d286bf68e238132a1fd6f901", "message": "Reactive routes - use end handler to erminate the CDI request context\n\n- i.e. fix context propagation\n- resolves #9141", "committedDate": "2020-05-25T15:09:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA5NTM4Nw==", "url": "https://github.com/quarkusio/quarkus/pull/9580#discussion_r430095387", "bodyText": "Wouldn't it be more performant to have a terminate(state) method in arc, so you don't have to touch the thread locals?", "author": "stuartwdouglas", "createdAt": "2020-05-25T23:22:00Z", "path": "extensions/vertx-web/runtime/src/main/java/io/quarkus/vertx/web/runtime/RouteHandler.java", "diffHunk": "@@ -33,13 +34,23 @@ default void handle(RoutingContext context) {\n             invoke(context);\n         } else {\n             try {\n+                // Activate the context, i.e. set the thread locals\n                 requestContext.activate();\n                 if (user != null) {\n                     RouteHandlers.fireSecurityIdentity(user.getSecurityIdentity());\n                 }\n+                // Reactive routes can use async processing (e.g. mutiny Uni/Multi) and context propagation\n+                // 1. Store the state (which is basically a shared Map instance)\n+                // 2. Terminate the context correcly when the response is disposed or an exception is thrown \n+                InjectableContext.ContextState state = requestContext.getState();\n+                context.addEndHandler(v -> {\n+                    requestContext.activate(state);", "originalCommit": "c2cadaccfde325e3d286bf68e238132a1fd6f901", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA5NTQzMQ==", "url": "https://github.com/quarkusio/quarkus/pull/9580#discussion_r430095431", "bodyText": "Also we try and avoid lambdas in runtime code.", "author": "stuartwdouglas", "createdAt": "2020-05-25T23:22:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA5NTM4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE3Mjk4Mw==", "url": "https://github.com/quarkusio/quarkus/pull/9580#discussion_r430172983", "bodyText": "so you don't have to touch the thread locals?\n\nHm, yes that would help. We don't need to activate the context here.", "author": "mkouba", "createdAt": "2020-05-26T06:02:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA5NTM4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "c2ca006437db23fba08cb62b7bef82ccc2a45caf", "chunk": "diff --git a/extensions/vertx-web/runtime/src/main/java/io/quarkus/vertx/web/runtime/RouteHandler.java b/extensions/vertx-web/runtime/src/main/java/io/quarkus/vertx/web/runtime/RouteHandler.java\nindex 217fde1865..024d5dd147 100644\n--- a/extensions/vertx-web/runtime/src/main/java/io/quarkus/vertx/web/runtime/RouteHandler.java\n+++ b/extensions/vertx-web/runtime/src/main/java/io/quarkus/vertx/web/runtime/RouteHandler.java\n\n@@ -43,9 +44,11 @@ public interface RouteHandler extends Handler<RoutingContext> {\n                 // 1. Store the state (which is basically a shared Map instance)\n                 // 2. Terminate the context correcly when the response is disposed or an exception is thrown \n                 InjectableContext.ContextState state = requestContext.getState();\n-                context.addEndHandler(v -> {\n-                    requestContext.activate(state);\n-                    requestContext.terminate();\n+                context.addEndHandler(new Handler<AsyncResult<Void>>() {\n+                    @Override\n+                    public void handle(AsyncResult<Void> result) {\n+                        requestContext.destroy(state);\n+                    }\n                 });\n                 invoke(context);\n             } finally {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA5NjA5NQ==", "url": "https://github.com/quarkusio/quarkus/pull/9580#discussion_r430096095", "bodyText": "This is racey.\nAs far as the client is concerned the request is complete when the last bit of data is received from the wire. This happens in the vert.x end() call, and at that point the bean has not been destroyed, as the destruction happens after the data is sent. Usually the test will pass because destroying the bean happens straight after the data is sent, and sending the data is relatively slow, but occasionally it will fail. This is a very common cause of intermittent CI failures.\nIf you change the AtomicBoolean to a CompletableFuture and wait a few seconds for the value this will fix it.", "author": "stuartwdouglas", "createdAt": "2020-05-25T23:26:52Z", "path": "extensions/vertx-web/deployment/src/test/java/io/quarkus/vertx/web/reactive/RequestContextPropagationTest.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package io.quarkus.vertx.web.reactive;\n+\n+import static io.restassured.RestAssured.get;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.time.Duration;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import javax.annotation.PreDestroy;\n+import javax.enterprise.context.RequestScoped;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.test.QuarkusUnitTest;\n+import io.quarkus.vertx.web.Route;\n+import io.smallrye.mutiny.Uni;\n+import io.vertx.ext.web.RoutingContext;\n+\n+public class RequestContextPropagationTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest config = new QuarkusUnitTest()\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                    .addClasses(MyRoutes.class, Ping.class));\n+\n+    @Test\n+    public void test() {\n+        get(\"/ping?val=bar\").then().statusCode(200).body(is(\"foo_bar\"));\n+        assertTrue(Ping.DESTROYED.get());", "originalCommit": "c2cadaccfde325e3d286bf68e238132a1fd6f901", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE3MzM4NA==", "url": "https://github.com/quarkusio/quarkus/pull/9580#discussion_r430173384", "bodyText": "I see. Thanks for spotting this!", "author": "mkouba", "createdAt": "2020-05-26T06:03:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA5NjA5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "c2ca006437db23fba08cb62b7bef82ccc2a45caf", "chunk": "diff --git a/extensions/vertx-web/deployment/src/test/java/io/quarkus/vertx/web/reactive/RequestContextPropagationTest.java b/extensions/vertx-web/deployment/src/test/java/io/quarkus/vertx/web/reactive/RequestContextPropagationTest.java\nindex 2550bfe65f..6b01203b2d 100644\n--- a/extensions/vertx-web/deployment/src/test/java/io/quarkus/vertx/web/reactive/RequestContextPropagationTest.java\n+++ b/extensions/vertx-web/deployment/src/test/java/io/quarkus/vertx/web/reactive/RequestContextPropagationTest.java\n\n@@ -5,7 +5,10 @@ import static org.hamcrest.Matchers.is;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import java.time.Duration;\n-import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n \n import javax.annotation.PreDestroy;\n import javax.enterprise.context.RequestScoped;\n"}}, {"oid": "c2ca006437db23fba08cb62b7bef82ccc2a45caf", "url": "https://github.com/quarkusio/quarkus/commit/c2ca006437db23fba08cb62b7bef82ccc2a45caf", "message": "Reactive routes - use end handler to erminate the CDI request context\n\n- i.e. fix context propagation\n- resolves #9141", "committedDate": "2020-05-26T06:53:27Z", "type": "commit"}, {"oid": "c2ca006437db23fba08cb62b7bef82ccc2a45caf", "url": "https://github.com/quarkusio/quarkus/commit/c2ca006437db23fba08cb62b7bef82ccc2a45caf", "message": "Reactive routes - use end handler to erminate the CDI request context\n\n- i.e. fix context propagation\n- resolves #9141", "committedDate": "2020-05-26T06:53:27Z", "type": "forcePushed"}]}