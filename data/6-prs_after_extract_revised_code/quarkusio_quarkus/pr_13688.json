{"pr_number": 13688, "pr_title": "Add AwsProxyRequestContext to quarkus context", "pr_createdAt": "2020-12-04T03:09:10Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/13688", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE0NzU5MA==", "url": "https://github.com/quarkusio/quarkus/pull/13688#discussion_r536147590", "bodyText": "public String getContextValue(String key).  The @JsonAnyGetter annotation should be removed from this method", "author": "patriot1burke", "createdAt": "2020-12-04T14:42:12Z", "path": "extensions/amazon-lambda-http/runtime/src/main/java/io/quarkus/amazon/lambda/http/model/ApiGatewayAuthorizerContext.java", "diffHunk": "@@ -42,6 +42,11 @@\n     // Methods - Public\n     //-------------------------------------------------------------\n \n+    @JsonAnyGetter\n+    public Map<String, String> getContextProperties() {\n+        return contextProperties;\n+    }\n+\n     @JsonAnyGetter\n     public String getContextValue(String key) {", "originalCommit": "dd3cc5db9a2f30a3a69f6f8199b69db46c92c299", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE1MTY4MQ==", "url": "https://github.com/quarkusio/quarkus/pull/13688#discussion_r537151681", "bodyText": "Removed", "author": "kenkFarmRoad", "createdAt": "2020-12-06T23:42:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE0NzU5MA=="}], "type": "inlineReview", "revised_code": {"commit": "9b46a8e86035f51257daa48f54b8cd436b28cbf6", "chunk": "diff --git a/extensions/amazon-lambda-http/runtime/src/main/java/io/quarkus/amazon/lambda/http/model/ApiGatewayAuthorizerContext.java b/extensions/amazon-lambda-http/runtime/src/main/java/io/quarkus/amazon/lambda/http/model/ApiGatewayAuthorizerContext.java\nindex 0f2496e55b..293ea5f7db 100644\n--- a/extensions/amazon-lambda-http/runtime/src/main/java/io/quarkus/amazon/lambda/http/model/ApiGatewayAuthorizerContext.java\n+++ b/extensions/amazon-lambda-http/runtime/src/main/java/io/quarkus/amazon/lambda/http/model/ApiGatewayAuthorizerContext.java\n\n@@ -47,7 +47,6 @@ public class ApiGatewayAuthorizerContext {\n         return contextProperties;\n     }\n \n-    @JsonAnyGetter\n     public String getContextValue(String key) {\n         return contextProperties.get(key);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE1MDIzMw==", "url": "https://github.com/quarkusio/quarkus/pull/13688#discussion_r536150233", "bodyText": "Why are you adding this as a header?  You should be using setContextObject:\nquarkusHeaders.setContextObject(ApiGatewayAuthorizerContext.class, request.getRequeestContext().getAuthorizer());\nIMO, you should just add a the whole request context instead\nquarkusHeaders.setContextObject(AwsProxyRequestContext.class, request.getRequeestContext());", "author": "patriot1burke", "createdAt": "2020-12-04T14:45:49Z", "path": "extensions/amazon-lambda-http/runtime/src/main/java/io/quarkus/amazon/lambda/http/LambdaHttpHandler.java", "diffHunk": "@@ -176,6 +177,9 @@ private AwsProxyResponse nettyDispatch(InetSocketAddress clientAddress, AwsProxy\n         }\n         QuarkusHttpHeaders quarkusHeaders = new QuarkusHttpHeaders();\n         quarkusHeaders.setContextObject(Context.class, context);\n+        if (request.getRequestContext().getAuthorizer() != null) {\n+            quarkusHeaders.add(ApiGatewayAuthorizerContext.class.getName(), request.getRequestContext().getAuthorizer());", "originalCommit": "dd3cc5db9a2f30a3a69f6f8199b69db46c92c299", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEwNjc3OA==", "url": "https://github.com/quarkusio/quarkus/pull/13688#discussion_r537106778", "bodyText": "That's a much better idea. Thanks!", "author": "kenkFarmRoad", "createdAt": "2020-12-06T19:29:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE1MDIzMw=="}], "type": "inlineReview", "revised_code": {"commit": "9b46a8e86035f51257daa48f54b8cd436b28cbf6", "chunk": "diff --git a/extensions/amazon-lambda-http/runtime/src/main/java/io/quarkus/amazon/lambda/http/LambdaHttpHandler.java b/extensions/amazon-lambda-http/runtime/src/main/java/io/quarkus/amazon/lambda/http/LambdaHttpHandler.java\nindex 6c665c135a..fd21895701 100644\n--- a/extensions/amazon-lambda-http/runtime/src/main/java/io/quarkus/amazon/lambda/http/LambdaHttpHandler.java\n+++ b/extensions/amazon-lambda-http/runtime/src/main/java/io/quarkus/amazon/lambda/http/LambdaHttpHandler.java\n\n@@ -177,9 +177,7 @@ public class LambdaHttpHandler implements RequestHandler<AwsProxyRequest, AwsPro\n         }\n         QuarkusHttpHeaders quarkusHeaders = new QuarkusHttpHeaders();\n         quarkusHeaders.setContextObject(Context.class, context);\n-        if (request.getRequestContext().getAuthorizer() != null) {\n-            quarkusHeaders.add(ApiGatewayAuthorizerContext.class.getName(), request.getRequestContext().getAuthorizer());\n-        }\n+        quarkusHeaders.setContextObject(AwsProxyRequestContext.class, request.getRequestContext());\n         DefaultHttpRequest nettyRequest = new DefaultHttpRequest(HttpVersion.HTTP_1_1,\n                 HttpMethod.valueOf(request.getHttpMethod()), path, quarkusHeaders);\n         if (request.getMultiValueHeaders() != null) { //apparently this can be null if no headers are sent\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE1MTA4Mg==", "url": "https://github.com/quarkusio/quarkus/pull/13688#discussion_r536151082", "bodyText": "Your test is incomplete.  You should have a jaxrs resource or something that injects the context object with @context", "author": "patriot1burke", "createdAt": "2020-12-04T14:46:59Z", "path": "integration-tests/amazon-lambda-http-resteasy/src/test/java/io/quarkus/it/amazon/lambda/AmazonLambdaSimpleTestCase.java", "diffHunk": "@@ -105,4 +107,19 @@ public void testPostEmpty() throws Exception {\n \n     }\n \n+    @Test\n+    public void testAwsProxyRequestContext() throws Exception {\n+        ApiGatewayAuthorizerContext authorizerContext = new ApiGatewayAuthorizerContext();\n+        authorizerContext.setContextValue(\"authorizerValue\", \"testValue\");\n+        AwsProxyRequestContext awsProxyRequestContext = new AwsProxyRequestContext();", "originalCommit": "dd3cc5db9a2f30a3a69f6f8199b69db46c92c299", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9b46a8e86035f51257daa48f54b8cd436b28cbf6", "chunk": "diff --git a/integration-tests/amazon-lambda-http-resteasy/src/test/java/io/quarkus/it/amazon/lambda/AmazonLambdaSimpleTestCase.java b/integration-tests/amazon-lambda-http-resteasy/src/test/java/io/quarkus/it/amazon/lambda/AmazonLambdaSimpleTestCase.java\nindex 09ee136b5f..7f7a9574bf 100644\n--- a/integration-tests/amazon-lambda-http-resteasy/src/test/java/io/quarkus/it/amazon/lambda/AmazonLambdaSimpleTestCase.java\n+++ b/integration-tests/amazon-lambda-http-resteasy/src/test/java/io/quarkus/it/amazon/lambda/AmazonLambdaSimpleTestCase.java\n\n@@ -108,18 +107,13 @@ public class AmazonLambdaSimpleTestCase {\n     }\n \n     @Test\n-    public void testAwsProxyRequestContext() throws Exception {\n-        ApiGatewayAuthorizerContext authorizerContext = new ApiGatewayAuthorizerContext();\n-        authorizerContext.setContextValue(\"authorizerValue\", \"testValue\");\n-        AwsProxyRequestContext awsProxyRequestContext = new AwsProxyRequestContext();\n-        awsProxyRequestContext.setAuthorizer(authorizerContext);\n+    public void testProxyRequestContext() throws Exception {\n         AwsProxyRequest request = new AwsProxyRequest();\n+        request.setRequestContext(new AwsProxyRequestContext());\n         request.setHttpMethod(\"GET\");\n-        request.setPath(\"/hello/context\");\n-        request.setRequestContext(awsProxyRequestContext);\n+        request.setPath(\"/hello/proxyRequestContext\");\n         AwsProxyResponse out = LambdaClient.invoke(AwsProxyResponse.class, request);\n         Assertions.assertEquals(out.getStatusCode(), 204);\n-        // TODO - Assert the ApiGatewayAuthorizerContext is in the dispatched request header\n     }\n \n }\n"}}, {"oid": "9b46a8e86035f51257daa48f54b8cd436b28cbf6", "url": "https://github.com/quarkusio/quarkus/commit/9b46a8e86035f51257daa48f54b8cd436b28cbf6", "message": "Add AwsProxyRequestContext to quarkus context", "committedDate": "2020-12-06T19:47:48Z", "type": "forcePushed"}, {"oid": "bd29b6b064bedf91d382fce3b084c0d01966b0e4", "url": "https://github.com/quarkusio/quarkus/commit/bd29b6b064bedf91d382fce3b084c0d01966b0e4", "message": "Add AwsProxyRequestContext to quarkus context", "committedDate": "2020-12-06T20:23:18Z", "type": "forcePushed"}, {"oid": "f89bc1b8d54df4c03c6efbf823e7e0c21e4c00c7", "url": "https://github.com/quarkusio/quarkus/commit/f89bc1b8d54df4c03c6efbf823e7e0c21e4c00c7", "message": "Add AwsProxyRequestContext to quarkus context", "committedDate": "2020-12-06T22:45:25Z", "type": "commit"}, {"oid": "f89bc1b8d54df4c03c6efbf823e7e0c21e4c00c7", "url": "https://github.com/quarkusio/quarkus/commit/f89bc1b8d54df4c03c6efbf823e7e0c21e4c00c7", "message": "Add AwsProxyRequestContext to quarkus context", "committedDate": "2020-12-06T22:45:25Z", "type": "forcePushed"}]}