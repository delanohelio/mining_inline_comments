{"pr_number": 9303, "pr_title": "If MP-CP is enabled, make REST Client use it as ExecutorService, to allow for CP in filters", "pr_createdAt": "2020-05-14T14:52:09Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/9303", "timeline": [{"oid": "70ab7da38ceb46a98b6d115322ecb856ada051a5", "url": "https://github.com/quarkusio/quarkus/commit/70ab7da38ceb46a98b6d115322ecb856ada051a5", "message": "If MP-CP is enabled, make REST Client use it as ExecutorService, to allow for CP in filters", "committedDate": "2020-05-14T14:51:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU5ODk3NA==", "url": "https://github.com/quarkusio/quarkus/pull/9303#discussion_r425598974", "bodyText": "Maybe add a test with Uni?", "author": "cescoffier", "createdAt": "2020-05-15T06:47:07Z", "path": "extensions/rest-client/deployment/src/test/java/io/quarkus/restclient/registerprovider/EchoResource.java", "diffHunk": "@@ -1,17 +1,108 @@\n package io.quarkus.restclient.registerprovider;\n \n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.Consumes;\n import javax.ws.rs.GET;\n import javax.ws.rs.Path;\n import javax.ws.rs.Produces;\n import javax.ws.rs.QueryParam;\n import javax.ws.rs.core.MediaType;\n \n+import org.eclipse.microprofile.rest.client.inject.RestClient;\n+import org.jboss.resteasy.core.ResteasyContext;\n+import org.junit.jupiter.api.Assertions;\n+\n+import io.quarkus.arc.Arc;\n+import io.quarkus.arc.ManagedContext;\n+\n @Path(\"/echo\")\n public class EchoResource {\n \n+    @RestClient\n+    EchoClient client;\n+\n+    @Inject\n+    MyRequestBean requestBean;\n+\n+    @Inject\n+    MethodsCollector methodsCollector;\n+\n     @GET\n     @Produces(MediaType.TEXT_PLAIN)\n+    @Consumes(MediaType.TEXT_PLAIN)\n     public String echo(@QueryParam(\"message\") String message) {\n         return message;\n     }\n-}\n\\ No newline at end of file\n+\n+    @Path(\"call-client\")\n+    @GET\n+    public String callClient() {\n+        // make sure we have a request context\n+        ManagedContext requestContext = Arc.container().requestContext();\n+        Assertions.assertTrue(requestContext.isActive());\n+        Assertions.assertNotNull(requestBean);\n+        // this should not end up in the client filter context\n+        ResteasyContext.pushContext(String.class, \"callClient SERVER CONTEXT\");\n+        // call the client\n+        String ret = client.calledFromClient(requestBean.getUniqueNumber());\n+        // make sure the filter got the same request context as we have\n+        Assertions.assertEquals(requestBean.getUniqueNumber(), methodsCollector.getRequestBeanFromFilter());\n+        // should not have passed from the client context to here\n+        Assertions.assertNull(ResteasyContext.getContextData(Long.class));\n+        return ret;\n+    }\n+\n+    @Path(\"called-from-client\")\n+    @GET\n+    public String calledFromClient(@QueryParam(\"uniqueNumber\") int uniqueNumber) {\n+        // make sure we have a different request context to call-client\n+        ManagedContext requestContext = Arc.container().requestContext();\n+        Assertions.assertTrue(requestContext.isActive());\n+        Assertions.assertNotNull(requestBean);\n+        Assertions.assertNotEquals(uniqueNumber, requestBean.getUniqueNumber());\n+        // should not have passed from call-client to here\n+        Assertions.assertNull(ResteasyContext.getContextData(String.class));\n+        // should not have passed from call-client to here\n+        Assertions.assertNull(ResteasyContext.getContextData(Long.class));\n+        return \"OK\";\n+    }\n+\n+    @Path(\"async/call-client\")\n+    @GET\n+    public CompletionStage<String> asyncCallClient() {\n+        // make sure we have a request context\n+        ManagedContext requestContext = Arc.container().requestContext();\n+        Assertions.assertTrue(requestContext.isActive());\n+        Assertions.assertNotNull(requestBean);\n+        int req = requestBean.getUniqueNumber();\n+        // this should not end up in the client filter context\n+        ResteasyContext.pushContext(String.class, \"callClient SERVER CONTEXT\");\n+        // call the client\n+        return client.asyncCalledFromClient(req)\n+                .thenApply(ret -> {\n+                    // make sure the filter got the same request context as we have\n+                    Assertions.assertEquals(req, methodsCollector.getRequestBeanFromFilter());\n+                    // should not have passed from the client context to here\n+                    Assertions.assertNull(ResteasyContext.getContextData(Long.class));\n+                    return ret;\n+                });\n+    }\n+\n+    @Path(\"async/called-from-client\")\n+    @GET\n+    public CompletionStage<String> asyncCalledFromClient(@QueryParam(\"uniqueNumber\") int uniqueNumber) {\n+        // make sure we have a different request context to call-client\n+        ManagedContext requestContext = Arc.container().requestContext();\n+        Assertions.assertTrue(requestContext.isActive());\n+        Assertions.assertNotNull(requestBean);\n+        Assertions.assertNotEquals(uniqueNumber, requestBean.getUniqueNumber());\n+        // should not have passed from call-client to here\n+        Assertions.assertNull(ResteasyContext.getContextData(String.class));\n+        // should not have passed from call-client to here\n+        Assertions.assertNull(ResteasyContext.getContextData(Long.class));\n+        return CompletableFuture.completedFuture(\"OK\");\n+    }", "originalCommit": "70ab7da38ceb46a98b6d115322ecb856ada051a5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}