{"pr_number": 12386, "pr_title": "Create Logging JSON Codestart", "pr_createdAt": "2020-09-29T05:14:41Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/12386", "timeline": [{"oid": "adda2a0bfffefb4f358053e3604bf89720b8eea3", "url": "https://github.com/quarkusio/quarkus/commit/adda2a0bfffefb4f358053e3604bf89720b8eea3", "message": "Create Logging JSON Codestart", "committedDate": "2020-10-03T01:17:07Z", "type": "forcePushed"}, {"oid": "5d5196b4e94bdd52144b4ceb9d4864834ebcf83d", "url": "https://github.com/quarkusio/quarkus/commit/5d5196b4e94bdd52144b4ceb9d4864834ebcf83d", "message": "Create Logging JSON Codestart", "committedDate": "2020-10-10T01:42:16Z", "type": "forcePushed"}, {"oid": "17d398e3e77b10038c19f028e1afc928cf67dfb0", "url": "https://github.com/quarkusio/quarkus/commit/17d398e3e77b10038c19f028e1afc928cf67dfb0", "message": "Create Logging JSON Codestart", "committedDate": "2020-10-10T01:49:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1OTEyNQ==", "url": "https://github.com/quarkusio/quarkus/pull/12386#discussion_r502759125", "bodyText": "You can remove that class, your codestart is already automatically tested by the  QuarkusCodestartRunIT. I am currently creating a tool to easily generate a codestart in development which will remove the need of using the tests for this..", "author": "ia3andy", "createdAt": "2020-10-10T07:31:20Z", "path": "integration-tests/devtools/src/test/java/io/quarkus/devtools/codestarts/QuarkusCodestartRunSingleIT.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package io.quarkus.devtools.codestarts;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import io.quarkus.devtools.PlatformAwareTestBase;\n+import io.quarkus.devtools.ProjectTestUtil;\n+import io.quarkus.devtools.codestarts.QuarkusCodestartData.DataKey;\n+import io.quarkus.devtools.messagewriter.MessageWriter;\n+import io.quarkus.devtools.project.BuildTool;\n+\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+class QuarkusCodestartRunSingleIT extends PlatformAwareTestBase {", "originalCommit": "17d398e3e77b10038c19f028e1afc928cf67dfb0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cab8965c3a37641741c9fdad800491cc0457ab8c", "chunk": "diff --git a/integration-tests/devtools/src/test/java/io/quarkus/devtools/codestarts/QuarkusCodestartRunSingleIT.java b/integration-tests/devtools/src/test/java/io/quarkus/devtools/codestarts/QuarkusCodestartRunSingleIT.java\ndeleted file mode 100644\nindex c1e9080e3d..0000000000\n--- a/integration-tests/devtools/src/test/java/io/quarkus/devtools/codestarts/QuarkusCodestartRunSingleIT.java\n+++ /dev/null\n\n@@ -1,89 +0,0 @@\n-package io.quarkus.devtools.codestarts;\n-\n-import static org.assertj.core.api.Assertions.assertThat;\n-\n-import java.io.IOException;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Map;\n-\n-import org.junit.jupiter.api.BeforeAll;\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.TestInstance;\n-\n-import com.google.common.collect.ImmutableList;\n-\n-import io.quarkus.devtools.PlatformAwareTestBase;\n-import io.quarkus.devtools.ProjectTestUtil;\n-import io.quarkus.devtools.codestarts.QuarkusCodestartData.DataKey;\n-import io.quarkus.devtools.messagewriter.MessageWriter;\n-import io.quarkus.devtools.project.BuildTool;\n-\n-@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n-class QuarkusCodestartRunSingleIT extends PlatformAwareTestBase {\n-\n-    private static final Path testDirPath = Paths.get(\"target/codestarts-run-test\");\n-\n-    @BeforeAll\n-    static void setUp() throws IOException {\n-        ProjectTestUtil.delete(testDirPath.toFile());\n-    }\n-\n-    private Map<String, Object> getTestInputData() {\n-        return getTestInputData(null);\n-    }\n-\n-    private Map<String, Object> getTestInputData(final Map<String, Object> override) {\n-        return QuarkusCodestartGenerationTest.getTestInputData(getPlatformDescriptor(), override);\n-    }\n-\n-    @Test\n-    public void generateMavenProjectRun() throws Exception {\n-        generateProjectRunTests(\"maven\", \"java\", ImmutableList.of(\"logging-json\"),\n-                Collections.emptyMap());\n-    }\n-\n-    private void generateProjectRunTests(String buildTool, String language, List<String> codestarts, Map<String, Object> data)\n-            throws Exception {\n-        generateProjectRunTests(buildTool, language, codestarts, data, genName(buildTool, language, codestarts));\n-    }\n-\n-    private void generateProjectRunTests(String buildToolName, String language, List<String> codestarts,\n-            Map<String, Object> data, String name)\n-            throws Exception {\n-        final BuildTool buildTool = BuildTool.findTool(buildToolName);\n-\n-        // for JVM 8 and 14 this will generate project with java 1.8, for JVM 11 project with java 11\n-        final QuarkusCodestartProjectInput input = QuarkusCodestartProjectInput.builder()\n-                .addData(getTestInputData(Collections.singletonMap(\"artifact-id\", name)))\n-                .buildTool(buildTool)\n-                .addCodestarts(codestarts)\n-                .addCodestart(language)\n-                .addData(data)\n-                .putData(DataKey.JAVA_VERSION.getKey(), System.getProperty(\"java.specification.version\"))\n-                .messageWriter(MessageWriter.debug())\n-                .build();\n-        final CodestartProjectDefinition projectDefinition = getCatalog().createProject(input);\n-        Path projectDir = testDirPath.resolve(name);\n-        projectDefinition.generate(projectDir);\n-        final int result = WrapperRunner.run(projectDir,\n-                WrapperRunner.Wrapper.fromBuildtool(buildToolName));\n-        assertThat(result).isZero();\n-    }\n-\n-    private String genName(String buildtool, String language, List<String> codestarts) {\n-        String name = \"project-\" + buildtool + \"-\" + language;\n-        if (codestarts.isEmpty()) {\n-            name += \"-commandmode\";\n-        } else {\n-            name += \"-\" + String.join(\"-\", codestarts);\n-        }\n-        return name;\n-    }\n-\n-    private QuarkusCodestartCatalog getCatalog() throws IOException {\n-        return QuarkusCodestartCatalog.fromQuarkusPlatformDescriptor(getPlatformDescriptor());\n-    }\n-}\n"}}, {"oid": "cab8965c3a37641741c9fdad800491cc0457ab8c", "url": "https://github.com/quarkusio/quarkus/commit/cab8965c3a37641741c9fdad800491cc0457ab8c", "message": "Create Logging JSON Codestart", "committedDate": "2020-10-11T10:57:05Z", "type": "commit"}, {"oid": "cab8965c3a37641741c9fdad800491cc0457ab8c", "url": "https://github.com/quarkusio/quarkus/commit/cab8965c3a37641741c9fdad800491cc0457ab8c", "message": "Create Logging JSON Codestart", "committedDate": "2020-10-11T10:57:05Z", "type": "forcePushed"}]}