{"pr_number": 13964, "pr_title": "Add framework for integrating with RESTEasy Reactive Methods", "pr_createdAt": "2020-12-18T05:14:48Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/13964", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkxODgwMw==", "url": "https://github.com/quarkusio/quarkus/pull/13964#discussion_r545918803", "bodyText": "So how about a @HandlerFor(type = ServerWebSocket.class) annotation? Or we make it implement ParameterExtractor<ServerWebSocket> but I was thinking with an annotation we can make extractors pluggable based on annotations too in the future: @HandlerFor(annotatedWith = FroMage.class) which would support parameters annotated with @FroMage.\nI think this could be simpler than MethodScannerBuildItem and its context.", "author": "FroMage", "createdAt": "2020-12-18T15:43:58Z", "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive/runtime/src/main/java/io/quarkus/resteasy/reactive/server/runtime/websocket/VertxWebSocketParamExtractor.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package io.quarkus.resteasy.reactive.server.runtime.websocket;\n+\n+import org.jboss.resteasy.reactive.server.core.ResteasyReactiveRequestContext;\n+import org.jboss.resteasy.reactive.server.core.parameters.ParameterExtractor;\n+\n+import io.quarkus.resteasy.reactive.server.runtime.QuarkusResteasyReactiveRequestContext;\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.http.HttpServerRequest;\n+import io.vertx.core.http.ServerWebSocket;\n+\n+//TODO: do we actually want vert.x websockets?\n+//they are not our primary API but they are easy to support\n+public class VertxWebSocketParamExtractor implements ParameterExtractor {", "originalCommit": "8ed3efacddba43686aca22ca53affa96f90ddfd8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk5NzU4OQ==", "url": "https://github.com/quarkusio/quarkus/pull/13964#discussion_r546997589", "bodyText": "That would be fine for a user facing API, but we still need the programmatic version to avoid having to index Quarkus itself.", "author": "stuartwdouglas", "createdAt": "2020-12-22T00:19:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkxODgwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM2MDM0OQ==", "url": "https://github.com/quarkusio/quarkus/pull/13964#discussion_r551360349", "bodyText": "True.", "author": "FroMage", "createdAt": "2021-01-04T14:48:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkxODgwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDg3NjQ1Nw==", "url": "https://github.com/quarkusio/quarkus/pull/13964#discussion_r554876457", "bodyText": "I really don't want RR to have to self-index, so I am very much against making an annotation based approach the only way to do this. If we think this is useful for end uses I think building an annotation based API over the programatic impl would be the best way to handle this.", "author": "stuartwdouglas", "createdAt": "2021-01-11T08:14:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkxODgwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDg4MjUwOA==", "url": "https://github.com/quarkusio/quarkus/pull/13964#discussion_r554882508", "bodyText": "Sure, it can wait.", "author": "FroMage", "createdAt": "2021-01-11T08:24:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkxODgwMw=="}], "type": "inlineReview", "revised_code": {"commit": "e6dab3bbb668d73520a8f92e86f0dc0a4a0414f2", "chunk": "diff --git a/extensions/resteasy-reactive/quarkus-resteasy-reactive/runtime/src/main/java/io/quarkus/resteasy/reactive/server/runtime/websocket/VertxWebSocketParamExtractor.java b/extensions/resteasy-reactive/quarkus-resteasy-reactive/runtime/src/main/java/io/quarkus/resteasy/reactive/server/runtime/websocket/VertxWebSocketParamExtractor.java\nindex b6abc85ad9..849402a4d7 100644\n--- a/extensions/resteasy-reactive/quarkus-resteasy-reactive/runtime/src/main/java/io/quarkus/resteasy/reactive/server/runtime/websocket/VertxWebSocketParamExtractor.java\n+++ b/extensions/resteasy-reactive/quarkus-resteasy-reactive/runtime/src/main/java/io/quarkus/resteasy/reactive/server/runtime/websocket/VertxWebSocketParamExtractor.java\n\n@@ -1,5 +1,7 @@\n package io.quarkus.resteasy.reactive.server.runtime.websocket;\n \n+import javax.ws.rs.container.CompletionCallback;\n+\n import org.jboss.resteasy.reactive.server.core.ResteasyReactiveRequestContext;\n import org.jboss.resteasy.reactive.server.core.parameters.ParameterExtractor;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkyMDMwNQ==", "url": "https://github.com/quarkusio/quarkus/pull/13964#discussion_r545920305", "bodyText": "Check out what I did in MultiResponseHandler which is similar to this, where I suspend, then do this:\n            // let's make sure we never restart by accident, also make sure we're not marked as completed\n            requestContext.restart(AWOL, true);", "author": "FroMage", "createdAt": "2020-12-18T15:46:19Z", "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive/runtime/src/main/java/io/quarkus/resteasy/reactive/server/runtime/websocket/VertxWebSocketRestHandler.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.quarkus.resteasy.reactive.server.runtime.websocket;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.jboss.resteasy.reactive.server.core.ResteasyReactiveRequestContext;\n+import org.jboss.resteasy.reactive.server.model.HandlerChainCustomizer;\n+import org.jboss.resteasy.reactive.server.spi.ServerRestHandler;\n+\n+import io.vertx.core.Handler;\n+import io.vertx.core.http.ServerWebSocket;\n+\n+public class VertxWebSocketRestHandler implements HandlerChainCustomizer {\n+\n+    @Override\n+    public List<ServerRestHandler> handlers(Phase phase) {\n+        if (phase == Phase.AFTER_METHOD_INVOKE) {\n+            return Collections.singletonList(new ServerRestHandler() {\n+                @Override\n+                public void handle(ResteasyReactiveRequestContext requestContext) throws Exception {\n+                    for (Object i : requestContext.getParameters()) {\n+                        if (i instanceof ServerWebSocket) {\n+                            ServerWebSocket socket = (ServerWebSocket) i;\n+                            socket.closeHandler(new Handler<Void>() {\n+                                @Override\n+                                public void handle(Void event) {\n+                                    requestContext.close();\n+                                }\n+                            });\n+                        }\n+                    }\n+                    requestContext.suspend(); //we never resume", "originalCommit": "8ed3efacddba43686aca22ca53affa96f90ddfd8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e6dab3bbb668d73520a8f92e86f0dc0a4a0414f2", "chunk": "diff --git a/extensions/resteasy-reactive/quarkus-resteasy-reactive/runtime/src/main/java/io/quarkus/resteasy/reactive/server/runtime/websocket/VertxWebSocketRestHandler.java b/extensions/resteasy-reactive/quarkus-resteasy-reactive/runtime/src/main/java/io/quarkus/resteasy/reactive/server/runtime/websocket/VertxWebSocketRestHandler.java\nindex bff0f8879c..5be9fce400 100644\n--- a/extensions/resteasy-reactive/quarkus-resteasy-reactive/runtime/src/main/java/io/quarkus/resteasy/reactive/server/runtime/websocket/VertxWebSocketRestHandler.java\n+++ b/extensions/resteasy-reactive/quarkus-resteasy-reactive/runtime/src/main/java/io/quarkus/resteasy/reactive/server/runtime/websocket/VertxWebSocketRestHandler.java\n\n@@ -12,6 +12,17 @@ import io.vertx.core.http.ServerWebSocket;\n \n public class VertxWebSocketRestHandler implements HandlerChainCustomizer {\n \n+    private static final ServerRestHandler[] AWOL = new ServerRestHandler[] {\n+            new ServerRestHandler() {\n+\n+                @Override\n+                public void handle(ResteasyReactiveRequestContext requestContext)\n+                        throws Exception {\n+                    throw new IllegalStateException(\"FAILURE: should never be restarted\");\n+                }\n+            }\n+    };\n+\n     @Override\n     public List<ServerRestHandler> handlers(Phase phase) {\n         if (phase == Phase.AFTER_METHOD_INVOKE) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkyMDk2NA==", "url": "https://github.com/quarkusio/quarkus/pull/13964#discussion_r545920964", "bodyText": "Shouldn't we do this when we inject the param? There's always the potential for the method invocation to throw and get directly to the exception handler and we haven't registered the close handler, no?", "author": "FroMage", "createdAt": "2020-12-18T15:47:26Z", "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive/runtime/src/main/java/io/quarkus/resteasy/reactive/server/runtime/websocket/VertxWebSocketRestHandler.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.quarkus.resteasy.reactive.server.runtime.websocket;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.jboss.resteasy.reactive.server.core.ResteasyReactiveRequestContext;\n+import org.jboss.resteasy.reactive.server.model.HandlerChainCustomizer;\n+import org.jboss.resteasy.reactive.server.spi.ServerRestHandler;\n+\n+import io.vertx.core.Handler;\n+import io.vertx.core.http.ServerWebSocket;\n+\n+public class VertxWebSocketRestHandler implements HandlerChainCustomizer {\n+\n+    @Override\n+    public List<ServerRestHandler> handlers(Phase phase) {\n+        if (phase == Phase.AFTER_METHOD_INVOKE) {\n+            return Collections.singletonList(new ServerRestHandler() {\n+                @Override\n+                public void handle(ResteasyReactiveRequestContext requestContext) throws Exception {\n+                    for (Object i : requestContext.getParameters()) {\n+                        if (i instanceof ServerWebSocket) {\n+                            ServerWebSocket socket = (ServerWebSocket) i;\n+                            socket.closeHandler(new Handler<Void>() {", "originalCommit": "8ed3efacddba43686aca22ca53affa96f90ddfd8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDg3NTIwMw==", "url": "https://github.com/quarkusio/quarkus/pull/13964#discussion_r554875203", "bodyText": "I have updated this", "author": "stuartwdouglas", "createdAt": "2021-01-11T08:13:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkyMDk2NA=="}], "type": "inlineReview", "revised_code": {"commit": "e6dab3bbb668d73520a8f92e86f0dc0a4a0414f2", "chunk": "diff --git a/extensions/resteasy-reactive/quarkus-resteasy-reactive/runtime/src/main/java/io/quarkus/resteasy/reactive/server/runtime/websocket/VertxWebSocketRestHandler.java b/extensions/resteasy-reactive/quarkus-resteasy-reactive/runtime/src/main/java/io/quarkus/resteasy/reactive/server/runtime/websocket/VertxWebSocketRestHandler.java\nindex bff0f8879c..5be9fce400 100644\n--- a/extensions/resteasy-reactive/quarkus-resteasy-reactive/runtime/src/main/java/io/quarkus/resteasy/reactive/server/runtime/websocket/VertxWebSocketRestHandler.java\n+++ b/extensions/resteasy-reactive/quarkus-resteasy-reactive/runtime/src/main/java/io/quarkus/resteasy/reactive/server/runtime/websocket/VertxWebSocketRestHandler.java\n\n@@ -12,6 +12,17 @@ import io.vertx.core.http.ServerWebSocket;\n \n public class VertxWebSocketRestHandler implements HandlerChainCustomizer {\n \n+    private static final ServerRestHandler[] AWOL = new ServerRestHandler[] {\n+            new ServerRestHandler() {\n+\n+                @Override\n+                public void handle(ResteasyReactiveRequestContext requestContext)\n+                        throws Exception {\n+                    throw new IllegalStateException(\"FAILURE: should never be restarted\");\n+                }\n+            }\n+    };\n+\n     @Override\n     public List<ServerRestHandler> handlers(Phase phase) {\n         if (phase == Phase.AFTER_METHOD_INVOKE) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkyMjc0Nw==", "url": "https://github.com/quarkusio/quarkus/pull/13964#discussion_r545922747", "bodyText": "Even here I wonder if we couldn't annotate MultiResponseHandler:\n@RegisterRestHandler(phase = HandlerChainCustomizer.Phase.AFTER_METHOD_INVOKE, forType = Multi.class)\npublic class MultiResponseHandler implements ServerRestHandler {\n}", "author": "FroMage", "createdAt": "2020-12-18T15:50:20Z", "path": "independent-projects/resteasy-reactive/server/processor/src/main/java/org/jboss/resteasy/reactive/server/processor/scanning/AsyncReturnTypeScanner.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package org.jboss.resteasy.reactive.server.processor.scanning;\n+\n+import io.smallrye.mutiny.Multi;\n+import io.smallrye.mutiny.Uni;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletionStage;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.MethodInfo;\n+import org.jboss.resteasy.reactive.server.handlers.CompletionStageResponseHandler;\n+import org.jboss.resteasy.reactive.server.handlers.MultiResponseHandler;\n+import org.jboss.resteasy.reactive.server.handlers.UniResponseHandler;\n+import org.jboss.resteasy.reactive.server.model.FixedHandlerChainCustomizer;\n+import org.jboss.resteasy.reactive.server.model.HandlerChainCustomizer;\n+\n+public class AsyncReturnTypeScanner implements MethodScanner {\n+    private static final DotName COMPLETION_STAGE = DotName.createSimple(CompletionStage.class.getName());\n+    private static final DotName UNI = DotName.createSimple(Uni.class.getName());\n+    private static final DotName MULTI = DotName.createSimple(Multi.class.getName());\n+\n+    @Override\n+    public List<HandlerChainCustomizer> scan(MethodInfo method, Map<String, Object> methodContext) {\n+        if (method.returnType().name().equals(COMPLETION_STAGE)) {\n+            return Collections.singletonList(new FixedHandlerChainCustomizer(new CompletionStageResponseHandler(),\n+                    HandlerChainCustomizer.Phase.AFTER_METHOD_INVOKE));\n+        } else if (method.returnType().name().equals(UNI)) {\n+            return Collections.singletonList(new FixedHandlerChainCustomizer(new UniResponseHandler(),\n+                    HandlerChainCustomizer.Phase.AFTER_METHOD_INVOKE));\n+        }\n+        if (method.returnType().name().equals(MULTI)) {\n+            return Collections.singletonList(new FixedHandlerChainCustomizer(new MultiResponseHandler(),", "originalCommit": "8ed3efacddba43686aca22ca53affa96f90ddfd8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkyMzUzOQ==", "url": "https://github.com/quarkusio/quarkus/pull/13964#discussion_r545923539", "bodyText": "Well done :)", "author": "FroMage", "createdAt": "2020-12-18T15:51:35Z", "path": "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/startup/RuntimeResourceDeployment.java", "diffHunk": "@@ -386,8 +390,10 @@ public ParameterExtractor parameterExtractor(Map<String, Integer> pathParameterI\n                 return extractor;\n             case BEAN:\n                 return new BeanParamExtractor((BeanFactory<Object>) info.getFactoryCreator().apply(loadClass(javaType)));\n+            case CUSTOM:\n+                return customExtractor;\n             default:\n-                return new QueryParamExtractor(name, single, encoded);\n+                throw new RuntimeException(\"Unkown param type: \" + type);", "originalCommit": "8ed3efacddba43686aca22ca53affa96f90ddfd8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "e6dab3bbb668d73520a8f92e86f0dc0a4a0414f2", "url": "https://github.com/quarkusio/quarkus/commit/e6dab3bbb668d73520a8f92e86f0dc0a4a0414f2", "message": "Add framework for integrating with RR Methods\n\nThis adds interfaces that allow external code to:\n- Add Handlers at various points in the chain\n- Provide custom ParamExtractors\n\nThis enables integration of more complex things like\nWebSockets. As a test of the intergration Vert.x\nwebsocket support is also provided.", "committedDate": "2020-12-22T00:30:05Z", "type": "forcePushed"}, {"oid": "741f92241202947d03d6dfe5c2f23e9e6a1136d3", "url": "https://github.com/quarkusio/quarkus/commit/741f92241202947d03d6dfe5c2f23e9e6a1136d3", "message": "Add framework for integrating with RR Methods\n\nThis adds interfaces that allow external code to:\n- Add Handlers at various points in the chain\n- Provide custom ParamExtractors\n\nThis enables integration of more complex things like\nWebSockets. As a test of the intergration Vert.x\nwebsocket support is also provided.", "committedDate": "2021-01-08T01:03:44Z", "type": "forcePushed"}, {"oid": "52f7ee91d5fd51ffc54a8e8543290e063a39f50e", "url": "https://github.com/quarkusio/quarkus/commit/52f7ee91d5fd51ffc54a8e8543290e063a39f50e", "message": "Add framework for integrating with RR Methods\n\nThis adds interfaces that allow external code to:\n- Add Handlers at various points in the chain\n- Provide custom ParamExtractors\n\nThis enables integration of more complex things like\nWebSockets. As a test of the intergration Vert.x\nwebsocket support is also provided.", "committedDate": "2021-01-08T04:21:24Z", "type": "forcePushed"}, {"oid": "f42086d24d9ae8b2186b1a6366dfc4e0a50f2533", "url": "https://github.com/quarkusio/quarkus/commit/f42086d24d9ae8b2186b1a6366dfc4e0a50f2533", "message": "Add framework for integrating with RR Methods\n\nThis adds interfaces that allow external code to:\n- Add Handlers at various points in the chain\n- Provide custom ParamExtractors\n\nThis enables integration of more complex things like\nWebSockets. As a test of the intergration Vert.x\nwebsocket support is also provided.", "committedDate": "2021-01-12T12:34:26Z", "type": "forcePushed"}, {"oid": "67e93cff6d29b9e6b7e393daff71b24058bb0838", "url": "https://github.com/quarkusio/quarkus/commit/67e93cff6d29b9e6b7e393daff71b24058bb0838", "message": "Add framework for integrating with RR Methods\n\nThis adds interfaces that allow external code to:\n- Add Handlers at various points in the chain\n- Provide custom ParamExtractors\n\nThis enables integration of more complex things like\nWebSockets. As a test of the intergration Vert.x\nwebsocket support is also provided.", "committedDate": "2021-01-19T04:46:30Z", "type": "forcePushed"}, {"oid": "22c658f4b74786830ff7c655accecfe1ab8ff678", "url": "https://github.com/quarkusio/quarkus/commit/22c658f4b74786830ff7c655accecfe1ab8ff678", "message": "Add framework for integrating with RR Methods\n\nThis adds interfaces that allow external code to:\n- Add Handlers at various points in the chain\n- Provide custom ParamExtractors\n\nThis enables integration of more complex things like\nWebSockets. As a test of the intergration Vert.x\nwebsocket support is also provided.", "committedDate": "2021-01-24T23:40:26Z", "type": "commit"}, {"oid": "22c658f4b74786830ff7c655accecfe1ab8ff678", "url": "https://github.com/quarkusio/quarkus/commit/22c658f4b74786830ff7c655accecfe1ab8ff678", "message": "Add framework for integrating with RR Methods\n\nThis adds interfaces that allow external code to:\n- Add Handlers at various points in the chain\n- Provide custom ParamExtractors\n\nThis enables integration of more complex things like\nWebSockets. As a test of the intergration Vert.x\nwebsocket support is also provided.", "committedDate": "2021-01-24T23:40:26Z", "type": "forcePushed"}]}