{"pr_number": 6752, "pr_title": "Generate Tika XML configuration during build time", "pr_createdAt": "2020-01-23T18:29:15Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/6752", "timeline": [{"oid": "8e0a21fa49852f1d76971c099437d1028faeced0", "url": "https://github.com/quarkusio/quarkus/commit/8e0a21fa49852f1d76971c099437d1028faeced0", "message": "feat(tika): generate tika xml configuration during build time\n\ntest: TikaProcessorTest should use Quarkus test framework\n\nFixes https://github.com/quarkusio/quarkus/issues/6746\nFixes https://github.com/quarkusio/quarkus/issues/5700", "committedDate": "2020-01-23T18:31:18Z", "type": "commit"}, {"oid": "8e0a21fa49852f1d76971c099437d1028faeced0", "url": "https://github.com/quarkusio/quarkus/commit/8e0a21fa49852f1d76971c099437d1028faeced0", "message": "feat(tika): generate tika xml configuration during build time\n\ntest: TikaProcessorTest should use Quarkus test framework\n\nFixes https://github.com/quarkusio/quarkus/issues/6746\nFixes https://github.com/quarkusio/quarkus/issues/5700", "committedDate": "2020-01-23T18:31:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5MDE5MA==", "url": "https://github.com/quarkusio/quarkus/pull/6752#discussion_r370290190", "bodyText": "@machi1990 first of all, thanks for this effort :-)\nI'm not sure about removing a build item containing this Map. My plan, with the current master, has been to make this Map visible to various steps dealing with the individual parsers. For example, I suggested to @tpenakov in the issue where he works on OOXML support to group all PDF related build steps into a single method like preparePdfParser and check this map if PDF parser key is available and only then do all those PDF specific native registrations, the same for OOXML.\nFor example, this method, this one and this one are specific to PDF and the plan has been to make a single method preparePDFParser out of 3 of them and make all of that optional depending on whether org.apache.tika.parser.pdf.PDFParser key is in the map or not.\nSo I think that build item still has to be retained. Let me know please if it makes sense. CC @gsmet", "author": "sberyozkin", "createdAt": "2020-01-23T18:43:40Z", "path": "extensions/tika/deployment/src/main/java/io/quarkus/tika/deployment/TikaProcessor.java", "diffHunk": "@@ -91,42 +79,48 @@ public void registerRuntimeInitializedClasses(BuildProducer<RuntimeInitializedCl\n     }\n \n     @BuildStep\n-    public void registerTikaCoreResources(BuildProducer<NativeImageResourceBuildItem> resource) throws Exception {\n+    public void registerTikaCoreResources(BuildProducer<NativeImageResourceBuildItem> resource) {\n         resource.produce(new NativeImageResourceBuildItem(\"org/apache/tika/mime/tika-mimetypes.xml\"));\n         resource.produce(new NativeImageResourceBuildItem(\"org/apache/tika/parser/external/tika-external-parsers.xml\"));\n     }\n \n     @BuildStep\n-    public void registerTikaParsersResources(BuildProducer<NativeImageResourceBuildItem> resource) throws Exception {\n+    public void registerTikaParsersResources(BuildProducer<NativeImageResourceBuildItem> resource) {\n         resource.produce(new NativeImageResourceBuildItem(\"org/apache/tika/parser/pdf/PDFParser.properties\"));\n     }\n \n     @BuildStep\n-    public void registerPdfBoxResources(BuildProducer<NativeImageResourceBuildItem> resource) throws Exception {\n+    public void registerPdfBoxResources(BuildProducer<NativeImageResourceBuildItem> resource) {\n         resource.produce(new NativeImageResourceBuildItem(\"org/apache/pdfbox/resources/glyphlist/additional.txt\"));\n         resource.produce(new NativeImageResourceBuildItem(\"org/apache/pdfbox/resources/glyphlist/glyphlist.txt\"));\n         resource.produce(new NativeImageResourceBuildItem(\"org/apache/pdfbox/resources/glyphlist/zapfdingbats.txt\"));\n     }\n \n     @BuildStep\n-    public void registerTikaProviders(BuildProducer<ServiceProviderBuildItem> serviceProvider,\n-            TikaParsersConfigBuildItem parserConfigItem) throws Exception {\n-        serviceProvider.produce(\n-                new ServiceProviderBuildItem(Parser.class.getName(),\n-                        new ArrayList<>(parserConfigItem.getConfiguration().keySet())));\n-        serviceProvider.produce(\n-                new ServiceProviderBuildItem(Detector.class.getName(), getProviderNames(Detector.class.getName())));\n-        serviceProvider.produce(\n-                new ServiceProviderBuildItem(EncodingDetector.class.getName(),\n-                        getProviderNames(EncodingDetector.class.getName())));\n-    }\n-\n-    static List<String> getProviderNames(String serviceProviderName) throws Exception {\n+    @Record(ExecutionTime.STATIC_INIT)\n+    void initializeTikaParser(BeanContainerBuildItem beanContainer, TikaRecorder recorder,\n+            BuildProducer<ServiceProviderBuildItem> serviceProvider, TikaConfiguration configuration)\n+            throws Exception {\n+        Map<String, List<TikaParserParameter>> parsers = getSupportedParserConfig(configuration.tikaConfigPath,", "originalCommit": "8e0a21fa49852f1d76971c099437d1028faeced0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5NzgwNA==", "url": "https://github.com/quarkusio/quarkus/pull/6752#discussion_r370297804", "bodyText": "@machi1990 first of all, thanks for this effort :-)\n\nHi @sberyozkin thank you.\n\nI'm not sure about removing a build item containing this Map. My plan, with the current master, has been to make this Map visible to various steps dealing with the individual parsers. For example, I suggested to @tpenakov in the issue where he works on OOXML support to group all PDF related build steps into a single method like preparePdfParser and check this map if PDF parser key is available and only then do all those PDF specific native registrations, the same for OOXML.\n\nOh sorry, I was not aware of the future plans around this class.\nIf I understood the description above correctly, it seems to be that these various methods (e.g preparePdfParser) will be consuming this build item from within the TikaProcessor class, correct?\nIf so, the same be achieved with an invocation of a private method passing the parsers' map as a parameter ?", "author": "machi1990", "createdAt": "2020-01-23T18:59:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5MDE5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM0MzM1Nw==", "url": "https://github.com/quarkusio/quarkus/pull/6752#discussion_r370343357", "bodyText": "@machi1990 sorry, had to sign off for a bit.\nYes, I actually thought about it while being offline :-), but then TikaProcessor would just have a large single method :-), calling preparePdfParser, prepareOOXmlParser, etc. It just looks a bit cleaner to me to have dedicated build steps per specific parser, or does the new CL model does not allow for it as far as Tika is concerned ? Not a big deal but wonder what is the best approach here", "author": "sberyozkin", "createdAt": "2020-01-23T20:41:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5MDE5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc0MDYzMg==", "url": "https://github.com/quarkusio/quarkus/pull/6752#discussion_r370740632", "bodyText": "Hi @machi1990 @gsmet so what do you think; I've been thinking today, I'd like, I think, to have a build step per each parser which requires some support. The main build step is the one which generates the tika config. may be it can be called as such, generateTikaConfig or createTikaConfig, it would return a Map with the build item, and then there would be PDF build step, OOXML build step, etc as required which will optionally register the extra bits if the map has the parser key. Otherwise it would indeed have to be this master build step keeping adding private calls to preparePDF.etc and it would feel a bit less cool to me :-)", "author": "sberyozkin", "createdAt": "2020-01-24T17:02:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5MDE5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc1NTEwNw==", "url": "https://github.com/quarkusio/quarkus/pull/6752#discussion_r370755107", "bodyText": "@machi1990 sorry, had to sign off for a bit.\n\nIt is okay, I missed your ping too.\n\nYes, I actually thought about it while being offline :-), but then TikaProcessor would just have a large single method :-), calling preparePdfParser, prepareOOXmlParser, etc. It just looks a bit cleaner to me to have dedicated build steps per specific parser, or does the new CL model does not allow for it as far as Tika is concerned ?\n\nHi @sberyozkin the change is not CL related but on whether we need the BuildItem to achieve the above.\n\nHi @machi1990 @gsmet so what do you think; I've been thinking today, I'd like, I think, to have a build step per each parser which requires some support. The main build step is the one which generates the tika config. may be it can be called as such, generateTikaConfig or createTikaConfig, it would return a Map with the build item, and then there would be PDF build step, OOXML build step, etc as required which will optionally register the extra bits if the map has the parser key. Otherwise it would indeed have to be this master build step keeping adding private calls to preparePDF.etc and it would feel a bit less cool to me :-)\n\nIf you prefer to keep it around, I can bring it back. @gsmet WDYT?", "author": "machi1990", "createdAt": "2020-01-24T17:35:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5MDE5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkyMjg3MQ==", "url": "https://github.com/quarkusio/quarkus/pull/6752#discussion_r370922871", "bodyText": "@machi1990 sorry, missed your comment. Yeah, it would be nice, I reckon it is not really related to the class loading issue, though I can see why Guillaume saw it being redundant, because the optimizations plans I'm referring to above are not yet implemented :-) and that item was only used to facilitate the sub-optimal tika config generation", "author": "sberyozkin", "createdAt": "2020-01-25T09:01:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5MDE5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk0Mzg5Ng==", "url": "https://github.com/quarkusio/quarkus/pull/6752#discussion_r370943896", "bodyText": "It's not about being redundant. We certainly cannot pass those classes from build time to runtime and expect them to work.\nI don't see the need for a build item if everything is done in the same extension.", "author": "gsmet", "createdAt": "2020-01-25T17:00:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5MDE5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAzMjM4Nw==", "url": "https://github.com/quarkusio/quarkus/pull/6752#discussion_r371032387", "bodyText": "@gsmet This PR itself has preserved a reasonable number of build steps, one generates the configuration now, there are few build steps which deal with loading some resources, common to all of the Tika parsers, and some - common to PDF, and there would be OOXML specific build step coming in, we are not going ahead with collapsing them all into a single step in this PR. So it is clean and nice. Now, if this build item is removed, then for me to implement the optimization idea I had in mind I'd have to basically collapse everything (but a single step involving the Tika-common resources) into a single build step (generate the config, optionally load PDF/OOXML specific resources).\nI appreciate a build item is great for coordinating between different extensions, but in this case it would help the tika processor keep the parser specific build steps separate, keeping the native optimization in mind. Np if you don't agree, please go ahead with the merge.\n@machi1990 thanks for fix, cheers", "author": "sberyozkin", "createdAt": "2020-01-26T21:56:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5MDE5MA=="}], "type": "inlineReview", "revised_code": null}]}