{"pr_number": 10651, "pr_title": "Oidc Code Flow options for SPA's", "pr_createdAt": "2020-07-10T20:00:20Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/10651", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYxODk4Ng==", "url": "https://github.com/quarkusio/quarkus/pull/10651#discussion_r453618986", "bodyText": "typo desirable", "author": "pedroigor", "createdAt": "2020-07-13T12:39:39Z", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/OidcTenantConfig.java", "diffHunk": "@@ -533,6 +533,24 @@ public void setRoleClaimSeparator(String roleClaimSeparator) {\n         @ConfigItem\n         public Optional<String> cookiePath = Optional.empty();\n \n+        /**\n+         * If this property is set to 'true' then a normal 302 redirect response will be returned. If\n+         * the request was initiated via an XMLHttpRequest, then that redirect will automatically be\n+         * followed which may not be desiravle for single page applications.", "originalCommit": "fe17f997eee0e9975e95532cfa2e66cc0287b41d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ea7ce0b4001d9b3a1cbf19a808b62a5cf1ac5c0c", "chunk": "diff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/OidcTenantConfig.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/OidcTenantConfig.java\nindex a2e03773a6..358763209e 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/OidcTenantConfig.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/OidcTenantConfig.java\n\n@@ -534,21 +661,29 @@ public class OidcTenantConfig {\n         public Optional<String> cookiePath = Optional.empty();\n \n         /**\n-         * If this property is set to 'true' then a normal 302 redirect response will be returned. If\n-         * the request was initiated via an XMLHttpRequest, then that redirect will automatically be\n-         * followed which may not be desiravle for single page applications.\n-         * If it is false, a status code of '444' will be returned to allow the client to handle the\n-         * redirect manually.\n+         * If this property is set to 'true' then an OIDC UserInfo endpoint will be called\n+         */\n+        @ConfigItem(defaultValue = \"false\")\n+        public boolean userInfoRequired;\n+\n+        /**\n+         * If this property is set to 'true' then a normal 302 redirect response will be returned\n+         * if the request was initiated via XMLHttpRequest and the current user needs to be\n+         * (re)authenticated which may not be desirable for Single Page Applications since\n+         * XMLHttpRequest automatically following the redirect may not work given that OIDC\n+         * authorization endpoints typically do not support CORS.\n+         * If this property is set to `false` then a status code of '499' will be returned to allow\n+         * the client to handle the redirect manually\n          */\n         @ConfigItem(defaultValue = \"true\")\n-        public boolean autoRedirect;\n+        public boolean xhrAutoRedirect = true;\n \n-        public boolean isAutoRedirect() {\n-            return autoRedirect;\n+        public boolean isXhrAutoRedirect() {\n+            return xhrAutoRedirect;\n         }\n \n-        public void setAutoredirect(boolean autoRedirect) {\n-            this.autoRedirect = autoRedirect;\n+        public void setXhrAutoredirect(boolean autoRedirect) {\n+            this.xhrAutoRedirect = autoRedirect;\n         }\n \n         public Optional<String> getRedirectPath() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYyMTg0MQ==", "url": "https://github.com/quarkusio/quarkus/pull/10651#discussion_r453621841", "bodyText": "I'm not sure about using 444. IMO, we should handle such requests are if they were made to service type applications, when using a bearer token.\nA 401 response would indicate an invalid session at the application so that the SPA can perform the redirect without necessarily having to parse response headers. As for 403 it would mean the session is valid but access is denied.\nFrom a SPA perspective, after receiving a 401 response, it should be just a matter of calling window.reload to start the authentication flow again.", "author": "pedroigor", "createdAt": "2020-07-13T12:44:38Z", "path": "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/AuthenticationRedirectException.java", "diffHunk": "@@ -19,8 +19,12 @@ public AuthenticationRedirectException(int code, String redirectUri) {\n         this.redirectUri = redirectUri;\n     }\n \n+    public AuthenticationRedirectException(Boolean autoRedirect, String redirectUri) {\n+        this(autoRedirect ? 302 : 444, redirectUri);", "originalCommit": "fe17f997eee0e9975e95532cfa2e66cc0287b41d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc4OTY5OA==", "url": "https://github.com/quarkusio/quarkus/pull/10651#discussion_r453789698", "bodyText": "Agreed. 444 was just a placeholder. So, it should return a 401, correct? The 403 would already be handled by the general Auth classes would take care of that case, no?", "author": "boosey", "createdAt": "2020-07-13T16:51:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYyMTg0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY2NTcxMw==", "url": "https://github.com/quarkusio/quarkus/pull/10651#discussion_r454665713", "bodyText": "@pedroigor @boosey Hi. I think there should be some code followed by a custom header indicating it is to do with the XHR. Otherwise SPA will try to reload even if it is a genuine 401 (whenever we decide to return 401, example, we return 401 in case the code flow fails to complete).\nTo be honest I'm not sure it should be 401. At the quarkus OIDC level  we want to redirect, right ? But such that if it is XHR and the option is set, then let XHR fail. Can we set 399, at least it in the 3xx redirect space ? That would also fit better with the fact we throw AuthenticationRedirectException\nBut in any case, it should be accompanied by something like XHR-Location: redirect_uri... or something simpler. This can be done by adding a custom header to the response context and then throwing AuthenticationRedirectException", "author": "sberyozkin", "createdAt": "2020-07-14T21:48:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYyMTg0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY3NjIyOA==", "url": "https://github.com/quarkusio/quarkus/pull/10651#discussion_r454676228", "bodyText": "I think that works too, +1. I thought 401 would be simpler due to the fact that this status would also mean a window.reload at the SPA, the actual authentication flow is managed by the server-side.", "author": "pedroigor", "createdAt": "2020-07-14T22:14:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYyMTg0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY4Mjg5Mw==", "url": "https://github.com/quarkusio/quarkus/pull/10651#discussion_r454682893", "bodyText": "Hi Pedro @pedroigor Yeah, hopefully some non standard 3xx should be enough. 401 would be good too but my concern it can confuse SPA and cause it to loop :-) (401 during the original request, then the redirect happens, something fails with the code flow, we return another 401, etc). We can make the code configurable too going forward for sure", "author": "sberyozkin", "createdAt": "2020-07-14T22:31:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYyMTg0MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYyNDMwOA==", "url": "https://github.com/quarkusio/quarkus/pull/10651#discussion_r453624308", "bodyText": "IMO, this logic belongs to the CodeAuthenticationMechanism as it is really related to this flow. See my other comment around using 401and 403.", "author": "pedroigor", "createdAt": "2020-07-13T12:48:42Z", "path": "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/AuthenticationRedirectException.java", "diffHunk": "@@ -19,8 +19,12 @@ public AuthenticationRedirectException(int code, String redirectUri) {\n         this.redirectUri = redirectUri;\n     }\n \n+    public AuthenticationRedirectException(Boolean autoRedirect, String redirectUri) {", "originalCommit": "fe17f997eee0e9975e95532cfa2e66cc0287b41d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc5MTU2Mg==", "url": "https://github.com/quarkusio/quarkus/pull/10651#discussion_r453791562", "bodyText": "That makes sense. I will remove this and put the logic in CodeAuthenticationMechanism using the exception constructor that allows for the specification of the return code.", "author": "boosey", "createdAt": "2020-07-13T16:54:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYyNDMwOA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY2ODM0Nw==", "url": "https://github.com/quarkusio/quarkus/pull/10651#discussion_r454668347", "bodyText": "@boosey IMHO this property name should be clear it is about XHR, otherwise one may get an impression that if it is auto-redirect=false then we don't redirect in the code flow, but we are only doing an XHR specific exception here,\nAs such I suggest to rename it to something similar to what @pedroigor proposed in the other discussion, redirect-with-xhr, something like that. And update the docs:\nIf this property is set to 'false' and 'X-Requested-With' HTTP request header is equal to `XMLHttpRequest` then a status code of '...' will be returned  to allow the client to handle the redirect manually.\n\n(something like that)", "author": "sberyozkin", "createdAt": "2020-07-14T21:55:04Z", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/OidcTenantConfig.java", "diffHunk": "@@ -533,6 +533,24 @@ public void setRoleClaimSeparator(String roleClaimSeparator) {\n         @ConfigItem\n         public Optional<String> cookiePath = Optional.empty();\n \n+        /**\n+         * If this property is set to 'true' then a normal 302 redirect response will be returned. If\n+         * the request was initiated via an XMLHttpRequest, then that redirect will automatically be\n+         * followed which may not be desiravle for single page applications.\n+         * If it is false, a status code of '444' will be returned to allow the client to handle the\n+         * redirect manually.\n+         */\n+        @ConfigItem(defaultValue = \"true\")\n+        public boolean autoRedirect;", "originalCommit": "fe17f997eee0e9975e95532cfa2e66cc0287b41d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc5OTY3NQ==", "url": "https://github.com/quarkusio/quarkus/pull/10651#discussion_r454799675", "bodyText": "I have committed a working solution that I have been able to verify with a sample client. Actually, I was doing it all wrong. It is not the redirect exception that needs to be updated, but the CHALLENGE_DATA when it is an XHR and autoRedirect=false.\nI didn't see your comments about 401 vs 399 until now, so that is not changed yet. Neither did I see the comment about the setting name which I will also change in the next day or so.\nI've revoked the changes to the AuthenitcationRedirectException except for the getCode method where I actually changed it to return the actual member variable value instead of a hard coded 302.", "author": "boosey", "createdAt": "2020-07-15T05:25:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY2ODM0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAxNDIzOA==", "url": "https://github.com/quarkusio/quarkus/pull/10651#discussion_r455014238", "bodyText": "@boosey Good catch, I forgot why I added it in the first place :-)", "author": "sberyozkin", "createdAt": "2020-07-15T12:30:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY2ODM0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "ea7ce0b4001d9b3a1cbf19a808b62a5cf1ac5c0c", "chunk": "diff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/OidcTenantConfig.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/OidcTenantConfig.java\nindex a2e03773a6..358763209e 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/OidcTenantConfig.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/OidcTenantConfig.java\n\n@@ -534,21 +661,29 @@ public class OidcTenantConfig {\n         public Optional<String> cookiePath = Optional.empty();\n \n         /**\n-         * If this property is set to 'true' then a normal 302 redirect response will be returned. If\n-         * the request was initiated via an XMLHttpRequest, then that redirect will automatically be\n-         * followed which may not be desiravle for single page applications.\n-         * If it is false, a status code of '444' will be returned to allow the client to handle the\n-         * redirect manually.\n+         * If this property is set to 'true' then an OIDC UserInfo endpoint will be called\n+         */\n+        @ConfigItem(defaultValue = \"false\")\n+        public boolean userInfoRequired;\n+\n+        /**\n+         * If this property is set to 'true' then a normal 302 redirect response will be returned\n+         * if the request was initiated via XMLHttpRequest and the current user needs to be\n+         * (re)authenticated which may not be desirable for Single Page Applications since\n+         * XMLHttpRequest automatically following the redirect may not work given that OIDC\n+         * authorization endpoints typically do not support CORS.\n+         * If this property is set to `false` then a status code of '499' will be returned to allow\n+         * the client to handle the redirect manually\n          */\n         @ConfigItem(defaultValue = \"true\")\n-        public boolean autoRedirect;\n+        public boolean xhrAutoRedirect = true;\n \n-        public boolean isAutoRedirect() {\n-            return autoRedirect;\n+        public boolean isXhrAutoRedirect() {\n+            return xhrAutoRedirect;\n         }\n \n-        public void setAutoredirect(boolean autoRedirect) {\n-            this.autoRedirect = autoRedirect;\n+        public void setXhrAutoredirect(boolean autoRedirect) {\n+            this.xhrAutoRedirect = autoRedirect;\n         }\n \n         public Optional<String> getRedirectPath() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyNTc3MQ==", "url": "https://github.com/quarkusio/quarkus/pull/10651#discussion_r455125771", "bodyText": "I messed up something here. This is duplicate code. The version at 140 - 155 is the latest. I obviously didn't quite do the \"update a PR\" incantation correctly.", "author": "boosey", "createdAt": "2020-07-15T15:06:51Z", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -167,12 +183,36 @@ public SecurityIdentity apply(Throwable throwable) {\n             }\n         }\n \n-        challenge = new ChallengeData(HttpResponseStatus.FOUND.code(), HttpHeaders.LOCATION,\n-                configContext.auth.authorizeURL(params));\n+        if (shouldAutoRedirect(configContext, context)) {\n+            challenge = new ChallengeData(HttpResponseStatus.FOUND.code(), HttpHeaders.LOCATION,\n+                    configContext.auth.authorizeURL(params));\n+        } else {\n+            // If the client (usually an SPA) wants to handle the redirect manually, then\n+            // return status code 399 and in the www-authenticate header put the redirect url\n+            // www-authenticate header content; No standard content matched the exact use case\n+            // so the OAuth redirect-url= is an arbitrary string that can be tested\n+            // for on the client side\n+            String headerContent = \"OAuth redirect-url=\" + configContext.auth.authorizeURL(params);\n+            // Vertx HTTPHeaders does noy have a \"WWW_AUTHENTICATE\" static\n+            // So, header name is hard coded for the moment\n+            challenge = new ChallengeData(399, \"WWW-Authenticate\", headerContent);\n+        }\n \n         return Uni.createFrom().item(challenge);\n     }\n \n+    private boolean isXHR(RoutingContext context) {\n+        return \"XMLHttpRequest\".equals(context.request().getHeader(\"X-Requested-With\"));\n+    }\n+\n+    private boolean isAutoRedirectSet(TenantConfigContext configContext) {\n+        return configContext.oidcConfig.authentication.autoRedirect;\n+    }\n+\n+    private boolean shouldAutoRedirect(TenantConfigContext configContext, RoutingContext context) {\n+        return isXHR(context) ? isAutoRedirectSet(configContext) : true;\n+    }\n+", "originalCommit": "57ef7fe7117acc2fbf9b0e3ed7dbef9cf233fa65", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ea7ce0b4001d9b3a1cbf19a808b62a5cf1ac5c0c", "chunk": "diff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java\nindex 2b8515e114..ffa6358f85 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java\n\n@@ -183,34 +185,8 @@ public class CodeAuthenticationMechanism extends AbstractOidcAuthenticationMecha\n             }\n         }\n \n-        if (shouldAutoRedirect(configContext, context)) {\n-            challenge = new ChallengeData(HttpResponseStatus.FOUND.code(), HttpHeaders.LOCATION,\n-                    configContext.auth.authorizeURL(params));\n-        } else {\n-            // If the client (usually an SPA) wants to handle the redirect manually, then\n-            // return status code 399 and in the www-authenticate header put the redirect url\n-            // www-authenticate header content; No standard content matched the exact use case\n-            // so the OAuth redirect-url= is an arbitrary string that can be tested\n-            // for on the client side\n-            String headerContent = \"OAuth redirect-url=\" + configContext.auth.authorizeURL(params);\n-            // Vertx HTTPHeaders does noy have a \"WWW_AUTHENTICATE\" static\n-            // So, header name is hard coded for the moment\n-            challenge = new ChallengeData(399, \"WWW-Authenticate\", headerContent);\n-        }\n-\n-        return Uni.createFrom().item(challenge);\n-    }\n-\n-    private boolean isXHR(RoutingContext context) {\n-        return \"XMLHttpRequest\".equals(context.request().getHeader(\"X-Requested-With\"));\n-    }\n-\n-    private boolean isAutoRedirectSet(TenantConfigContext configContext) {\n-        return configContext.oidcConfig.authentication.autoRedirect;\n-    }\n-\n-    private boolean shouldAutoRedirect(TenantConfigContext configContext, RoutingContext context) {\n-        return isXHR(context) ? isAutoRedirectSet(configContext) : true;\n+        return Uni.createFrom().item(new ChallengeData(HttpResponseStatus.FOUND.code(), HttpHeaders.LOCATION,\n+                configContext.auth.authorizeURL(params)));\n     }\n \n     private Uni<SecurityIdentity> performCodeFlow(IdentityProviderManager identityProviderManager,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyNjc2MA==", "url": "https://github.com/quarkusio/quarkus/pull/10651#discussion_r455126760", "bodyText": "Same here. This constructor doesn't exist for AuthenticationRedirectException. The original code at 297 is the correct version.", "author": "boosey", "createdAt": "2020-07-15T15:08:27Z", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -294,7 +336,10 @@ public void accept(SecurityIdentity identity) {\n                                                 finalRedirectUri += (\"?\" + finalUserQuery);\n                                             }\n                                             LOG.debugf(\"Final redirect URI: %s\", finalRedirectUri);\n-                                            uniEmitter.fail(new AuthenticationRedirectException(finalRedirectUri));\n+                                            //TODO: Does this need to check autoRedirect\n+                                            uniEmitter.fail(new AuthenticationRedirectException(\n+                                                    shouldAutoRedirect(configContext, context),\n+                                                    finalRedirectUri));", "originalCommit": "57ef7fe7117acc2fbf9b0e3ed7dbef9cf233fa65", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ea7ce0b4001d9b3a1cbf19a808b62a5cf1ac5c0c", "chunk": "diff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java\nindex 2b8515e114..ffa6358f85 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java\n\n@@ -329,17 +304,15 @@ public class CodeAuthenticationMechanism extends AbstractOidcAuthenticationMecha\n                                             uniEmitter.fail(new AuthenticationCompletionException());\n                                         }\n                                         processSuccessfulAuthentication(context, configContext, result, identity);\n-                                        if (configContext.oidcConfig.authentication.removeRedirectParameters\n+\n+                                        if (configContext.oidcConfig.authentication.isRemoveRedirectParameters()\n                                                 && context.request().query() != null) {\n                                             String finalRedirectUri = buildUriWithoutQueryParams(context);\n                                             if (finalUserQuery != null) {\n                                                 finalRedirectUri += (\"?\" + finalUserQuery);\n                                             }\n                                             LOG.debugf(\"Final redirect URI: %s\", finalRedirectUri);\n-                                            //TODO: Does this need to check autoRedirect\n-                                            uniEmitter.fail(new AuthenticationRedirectException(\n-                                                    shouldAutoRedirect(configContext, context),\n-                                                    finalRedirectUri));\n+                                            uniEmitter.fail(new AuthenticationRedirectException(finalRedirectUri));\n                                         } else {\n                                             uniEmitter.complete(augmentIdentity(identity, result.opaqueAccessToken(),\n                                                     result.opaqueRefreshToken(), context));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyNjkzNA==", "url": "https://github.com/quarkusio/quarkus/pull/10651#discussion_r455126934", "bodyText": "This constructor doesn't exist for AuthenticationRedirectException. The original code at 224 is the correct version.", "author": "boosey", "createdAt": "2020-07-15T15:08:45Z", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -221,7 +261,9 @@ public SecurityIdentity apply(Throwable throwable) {\n \n                         String localRedirectUri = buildUri(context, isForceHttps(configContext), extraPath + extraQuery);\n                         LOG.debugf(\"Local redirect URI: %s\", localRedirectUri);\n-                        return Uni.createFrom().failure(new AuthenticationRedirectException(localRedirectUri));\n+                        return Uni.createFrom().failure(new AuthenticationRedirectException(\n+                                shouldAutoRedirect(configContext, context),\n+                                localRedirectUri));", "originalCommit": "57ef7fe7117acc2fbf9b0e3ed7dbef9cf233fa65", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ea7ce0b4001d9b3a1cbf19a808b62a5cf1ac5c0c", "chunk": "diff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java\nindex 2b8515e114..ffa6358f85 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java\n\n@@ -261,9 +237,7 @@ public class CodeAuthenticationMechanism extends AbstractOidcAuthenticationMecha\n \n                         String localRedirectUri = buildUri(context, isForceHttps(configContext), extraPath + extraQuery);\n                         LOG.debugf(\"Local redirect URI: %s\", localRedirectUri);\n-                        return Uni.createFrom().failure(new AuthenticationRedirectException(\n-                                shouldAutoRedirect(configContext, context),\n-                                localRedirectUri));\n+                        return Uni.createFrom().failure(new AuthenticationRedirectException(localRedirectUri));\n                     } else if (userQueryIndex + 1 < extraPath.length()) {\n                         // only the user query needs to be restored, no need to redirect\n                         userQuery = extraPath.substring(userQueryIndex + 1);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyNzIwNQ==", "url": "https://github.com/quarkusio/quarkus/pull/10651#discussion_r455127205", "bodyText": "Same here. This constructor doesn't exist for AuthenticationRedirectException. The original code at 500 is the correct version.", "author": "boosey", "createdAt": "2020-07-15T15:09:09Z", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -497,7 +542,8 @@ private boolean isForceHttps(TenantConfigContext configContext) {\n     private AuthenticationRedirectException redirectToLogoutEndpoint(RoutingContext context, TenantConfigContext configContext,\n             String idToken) {\n         removeCookie(context, configContext, getSessionCookieName(configContext));\n-        return new AuthenticationRedirectException(buildLogoutRedirectUri(configContext, idToken, context));\n+        return new AuthenticationRedirectException(shouldAutoRedirect(configContext, context),\n+                buildLogoutRedirectUri(configContext, idToken, context));", "originalCommit": "57ef7fe7117acc2fbf9b0e3ed7dbef9cf233fa65", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ea7ce0b4001d9b3a1cbf19a808b62a5cf1ac5c0c", "chunk": "diff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java\nindex 2b8515e114..ffa6358f85 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java\n\n@@ -542,8 +517,7 @@ public class CodeAuthenticationMechanism extends AbstractOidcAuthenticationMecha\n     private AuthenticationRedirectException redirectToLogoutEndpoint(RoutingContext context, TenantConfigContext configContext,\n             String idToken) {\n         removeCookie(context, configContext, getSessionCookieName(configContext));\n-        return new AuthenticationRedirectException(shouldAutoRedirect(configContext, context),\n-                buildLogoutRedirectUri(configContext, idToken, context));\n+        return new AuthenticationRedirectException(buildLogoutRedirectUri(configContext, idToken, context));\n     }\n \n     private static String getSessionCookieName(TenantConfigContext configContext) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyODE3MA==", "url": "https://github.com/quarkusio/quarkus/pull/10651#discussion_r455128170", "bodyText": "This is the correct version of this file. I removed the constructor I had added in a previous version.", "author": "boosey", "createdAt": "2020-07-15T15:10:33Z", "path": "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/AuthenticationRedirectException.java", "diffHunk": "@@ -20,7 +20,7 @@ public AuthenticationRedirectException(int code, String redirectUri) {\n     }", "originalCommit": "57ef7fe7117acc2fbf9b0e3ed7dbef9cf233fa65", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ea7ce0b4001d9b3a1cbf19a808b62a5cf1ac5c0c", "chunk": "diff --git a/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/AuthenticationRedirectException.java b/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/AuthenticationRedirectException.java\nindex 3c02dc024a..e1f9062ee3 100644\n--- a/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/AuthenticationRedirectException.java\n+++ b/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/AuthenticationRedirectException.java\n\n@@ -19,6 +19,10 @@ public class AuthenticationRedirectException extends RuntimeException {\n         this.redirectUri = redirectUri;\n     }\n \n+    public AuthenticationRedirectException(Boolean autoRedirect, String redirectUri) {\n+        this(autoRedirect ? 302 : 444, redirectUri);\n+    }\n+\n     public int getCode() {\n         return this.code;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyOTE4OQ==", "url": "https://github.com/quarkusio/quarkus/pull/10651#discussion_r455129189", "bodyText": "Needs to be updated with the final status code once decided.", "author": "boosey", "createdAt": "2020-07-15T15:12:04Z", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/OidcTenantConfig.java", "diffHunk": "@@ -533,6 +533,24 @@ public void setRoleClaimSeparator(String roleClaimSeparator) {\n         @ConfigItem\n         public Optional<String> cookiePath = Optional.empty();\n \n+        /*\n+         * If this property is set to 'true' then a normal 302 redirect response will be \n+         * returned. If the request was initiated via an XMLHttpRequest, then that redirect \n+         * will automatically be followed which may not be desirable for single page applications.\n+         * If it is false, a status code of '401' will be returned to allow the client to ", "originalCommit": "57ef7fe7117acc2fbf9b0e3ed7dbef9cf233fa65", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ea7ce0b4001d9b3a1cbf19a808b62a5cf1ac5c0c", "chunk": "diff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/OidcTenantConfig.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/OidcTenantConfig.java\nindex 47bc525c4c..358763209e 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/OidcTenantConfig.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/OidcTenantConfig.java\n\n@@ -533,15 +660,23 @@ public class OidcTenantConfig {\n         @ConfigItem\n         public Optional<String> cookiePath = Optional.empty();\n \n-        /*\n-         * If this property is set to 'true' then a normal 302 redirect response will be \n-         * returned. If the request was initiated via an XMLHttpRequest, then that redirect \n-         * will automatically be followed which may not be desirable for single page applications.\n-         * If it is false, a status code of '401' will be returned to allow the client to \n-         * handle the redirect manually with the redirect url passed back in a header.\n+        /**\n+         * If this property is set to 'true' then an OIDC UserInfo endpoint will be called\n+         */\n+        @ConfigItem(defaultValue = \"false\")\n+        public boolean userInfoRequired;\n+\n+        /**\n+         * If this property is set to 'true' then a normal 302 redirect response will be returned\n+         * if the request was initiated via XMLHttpRequest and the current user needs to be\n+         * (re)authenticated which may not be desirable for Single Page Applications since\n+         * XMLHttpRequest automatically following the redirect may not work given that OIDC\n+         * authorization endpoints typically do not support CORS.\n+         * If this property is set to `false` then a status code of '499' will be returned to allow\n+         * the client to handle the redirect manually\n          */\n         @ConfigItem(defaultValue = \"true\")\n-        public boolean xhrAutoRedirect;\n+        public boolean xhrAutoRedirect = true;\n \n         public boolean isXhrAutoRedirect() {\n             return xhrAutoRedirect;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQyMzE4Ng==", "url": "https://github.com/quarkusio/quarkus/pull/10651#discussion_r455423186", "bodyText": "399 doesn't work - at least on Chrome. If Chrome receives any 3XX code on an XHR request it automatically redirects. 499 allows the client to handle the redirect.", "author": "boosey", "createdAt": "2020-07-15T23:31:47Z", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -188,31 +188,19 @@ private boolean shouldAutoRedirect(TenantConfigContext configContext, RoutingCon\n                     configContext.auth.authorizeURL(params));\n         } else {\n             // If the client (usually an SPA) wants to handle the redirect manually, then\n-            // return status code 399 and in the www-authenticate header put the redirect url\n+            // return status code 499 and in the www-authenticate header put the redirect url\n             // www-authenticate header content; No standard content matched the exact use case\n             // so the OAuth redirect-url= is an arbitrary string that can be tested\n             // for on the client side\n-            String headerContent = \"OAuth redirect-url=\" + configContext.auth.authorizeURL(params);\n+            String headerContent = \"OIDC redirect-url=\" + configContext.auth.authorizeURL(params);\n             // Vertx HTTPHeaders does noy have a \"WWW_AUTHENTICATE\" static\n             // So, header name is hard coded for the moment\n-            challenge = new ChallengeData(399, \"WWW-Authenticate\", headerContent);\n+            challenge = new ChallengeData(499, \"WWW-Authenticate\", headerContent);", "originalCommit": "13644badfeb9a9d38e7499dad108464477009dfc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk1OTE1Ng==", "url": "https://github.com/quarkusio/quarkus/pull/10651#discussion_r455959156", "bodyText": "@boosey Sounds good", "author": "sberyozkin", "createdAt": "2020-07-16T17:40:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQyMzE4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "ea7ce0b4001d9b3a1cbf19a808b62a5cf1ac5c0c", "chunk": "diff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java\nindex 34c8a1bdc5..ffa6358f85 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java\n\n@@ -183,22 +185,8 @@ public class CodeAuthenticationMechanism extends AbstractOidcAuthenticationMecha\n             }\n         }\n \n-        if (shouldAutoRedirect(configContext, context)) {\n-            challenge = new ChallengeData(HttpResponseStatus.FOUND.code(), HttpHeaders.LOCATION,\n-                    configContext.auth.authorizeURL(params));\n-        } else {\n-            // If the client (usually an SPA) wants to handle the redirect manually, then\n-            // return status code 499 and in the www-authenticate header put the redirect url\n-            // www-authenticate header content; No standard content matched the exact use case\n-            // so the OAuth redirect-url= is an arbitrary string that can be tested\n-            // for on the client side\n-            String headerContent = \"OIDC redirect-url=\" + configContext.auth.authorizeURL(params);\n-            // Vertx HTTPHeaders does noy have a \"WWW_AUTHENTICATE\" static\n-            // So, header name is hard coded for the moment\n-            challenge = new ChallengeData(499, \"WWW-Authenticate\", headerContent);\n-        }\n-\n-        return Uni.createFrom().item(challenge);\n+        return Uni.createFrom().item(new ChallengeData(HttpResponseStatus.FOUND.code(), HttpHeaders.LOCATION,\n+                configContext.auth.authorizeURL(params)));\n     }\n \n     private Uni<SecurityIdentity> performCodeFlow(IdentityProviderManager identityProviderManager,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2ODU5MA==", "url": "https://github.com/quarkusio/quarkus/pull/10651#discussion_r455968590", "bodyText": "@boosey I propose to tweak this doc section a bit.\nIf this property is set to 'true' then a normal 302 redirect response will be returned if the request was initiated via XMLHttpRequest and the current user needs to be (re)authenticated which may not be desirable for Single Page Applications since XMLHttpRequest automatically following the redirect may not work given that OIDC authorization endpoints typically do not support CORS.\nIf this property is set to `false` then a status code of '499' will be returned to allow the client to handle the redirect manually\n\nSomething along these lines ( please tweak as needed to make it a better English) as we need to be very clear it is all about XHR and when exactly the users may want to do it.", "author": "sberyozkin", "createdAt": "2020-07-16T17:55:32Z", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/OidcTenantConfig.java", "diffHunk": "@@ -533,6 +533,24 @@ public void setRoleClaimSeparator(String roleClaimSeparator) {\n         @ConfigItem\n         public Optional<String> cookiePath = Optional.empty();\n \n+        /**\n+         * If this property is set to 'true' then a normal 302 redirect response will be", "originalCommit": "13644badfeb9a9d38e7499dad108464477009dfc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAxOTgzMQ==", "url": "https://github.com/quarkusio/quarkus/pull/10651#discussion_r456019831", "bodyText": "Done.", "author": "boosey", "createdAt": "2020-07-16T19:24:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2ODU5MA=="}], "type": "inlineReview", "revised_code": {"commit": "ea7ce0b4001d9b3a1cbf19a808b62a5cf1ac5c0c", "chunk": "diff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/OidcTenantConfig.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/OidcTenantConfig.java\nindex 6445f7ee62..358763209e 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/OidcTenantConfig.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/OidcTenantConfig.java\n\n@@ -534,14 +661,22 @@ public class OidcTenantConfig {\n         public Optional<String> cookiePath = Optional.empty();\n \n         /**\n-         * If this property is set to 'true' then a normal 302 redirect response will be\n-         * returned. If the request was initiated via an XMLHttpRequest, then that redirect\n-         * will automatically be followed which may not be desirable for single page applications.\n-         * If it is false, a status code of '499' will be returned to allow the client to\n-         * handle the redirect manually with the redirect url passed back in a header.\n+         * If this property is set to 'true' then an OIDC UserInfo endpoint will be called\n+         */\n+        @ConfigItem(defaultValue = \"false\")\n+        public boolean userInfoRequired;\n+\n+        /**\n+         * If this property is set to 'true' then a normal 302 redirect response will be returned\n+         * if the request was initiated via XMLHttpRequest and the current user needs to be\n+         * (re)authenticated which may not be desirable for Single Page Applications since\n+         * XMLHttpRequest automatically following the redirect may not work given that OIDC\n+         * authorization endpoints typically do not support CORS.\n+         * If this property is set to `false` then a status code of '499' will be returned to allow\n+         * the client to handle the redirect manually\n          */\n         @ConfigItem(defaultValue = \"true\")\n-        public boolean xhrAutoRedirect;\n+        public boolean xhrAutoRedirect = true;\n \n         public boolean isXhrAutoRedirect() {\n             return xhrAutoRedirect;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2OTc0Mg==", "url": "https://github.com/quarkusio/quarkus/pull/10651#discussion_r455969742", "bodyText": "You can drop this comment, it is OK if you just set WWW-Authenticate", "author": "sberyozkin", "createdAt": "2020-07-16T17:57:30Z", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -167,8 +183,20 @@ public SecurityIdentity apply(Throwable throwable) {\n             }\n         }\n \n-        challenge = new ChallengeData(HttpResponseStatus.FOUND.code(), HttpHeaders.LOCATION,\n-                configContext.auth.authorizeURL(params));\n+        if (shouldAutoRedirect(configContext, context)) {\n+            challenge = new ChallengeData(HttpResponseStatus.FOUND.code(), HttpHeaders.LOCATION,\n+                    configContext.auth.authorizeURL(params));\n+        } else {\n+            // If the client (usually an SPA) wants to handle the redirect manually, then\n+            // return status code 499 and in the www-authenticate header put the redirect url\n+            // www-authenticate header content; No standard content matched the exact use case\n+            // so the OAuth redirect-url= is an arbitrary string that can be tested\n+            // for on the client side\n+            String headerContent = \"OIDC redirect-url=\" + configContext.auth.authorizeURL(params);\n+            // Vertx HTTPHeaders does noy have a \"WWW_AUTHENTICATE\" static", "originalCommit": "13644badfeb9a9d38e7499dad108464477009dfc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAxOTU3OQ==", "url": "https://github.com/quarkusio/quarkus/pull/10651#discussion_r456019579", "bodyText": "Done", "author": "boosey", "createdAt": "2020-07-16T19:23:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2OTc0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "ea7ce0b4001d9b3a1cbf19a808b62a5cf1ac5c0c", "chunk": "diff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java\nindex 34c8a1bdc5..ffa6358f85 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java\n\n@@ -183,22 +185,8 @@ public class CodeAuthenticationMechanism extends AbstractOidcAuthenticationMecha\n             }\n         }\n \n-        if (shouldAutoRedirect(configContext, context)) {\n-            challenge = new ChallengeData(HttpResponseStatus.FOUND.code(), HttpHeaders.LOCATION,\n-                    configContext.auth.authorizeURL(params));\n-        } else {\n-            // If the client (usually an SPA) wants to handle the redirect manually, then\n-            // return status code 499 and in the www-authenticate header put the redirect url\n-            // www-authenticate header content; No standard content matched the exact use case\n-            // so the OAuth redirect-url= is an arbitrary string that can be tested\n-            // for on the client side\n-            String headerContent = \"OIDC redirect-url=\" + configContext.auth.authorizeURL(params);\n-            // Vertx HTTPHeaders does noy have a \"WWW_AUTHENTICATE\" static\n-            // So, header name is hard coded for the moment\n-            challenge = new ChallengeData(499, \"WWW-Authenticate\", headerContent);\n-        }\n-\n-        return Uni.createFrom().item(challenge);\n+        return Uni.createFrom().item(new ChallengeData(HttpResponseStatus.FOUND.code(), HttpHeaders.LOCATION,\n+                configContext.auth.authorizeURL(params)));\n     }\n \n     private Uni<SecurityIdentity> performCodeFlow(IdentityProviderManager identityProviderManager,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk3MDUwNA==", "url": "https://github.com/quarkusio/quarkus/pull/10651#discussion_r455970504", "bodyText": "@boosey, so if we want the users to do location.reload on seeing 499 then we don't really need OIDC redirect-url ?", "author": "sberyozkin", "createdAt": "2020-07-16T17:58:46Z", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -167,8 +183,20 @@ public SecurityIdentity apply(Throwable throwable) {\n             }\n         }\n \n-        challenge = new ChallengeData(HttpResponseStatus.FOUND.code(), HttpHeaders.LOCATION,\n-                configContext.auth.authorizeURL(params));\n+        if (shouldAutoRedirect(configContext, context)) {\n+            challenge = new ChallengeData(HttpResponseStatus.FOUND.code(), HttpHeaders.LOCATION,\n+                    configContext.auth.authorizeURL(params));\n+        } else {\n+            // If the client (usually an SPA) wants to handle the redirect manually, then\n+            // return status code 499 and in the www-authenticate header put the redirect url\n+            // www-authenticate header content; No standard content matched the exact use case\n+            // so the OAuth redirect-url= is an arbitrary string that can be tested\n+            // for on the client side\n+            String headerContent = \"OIDC redirect-url=\" + configContext.auth.authorizeURL(params);", "originalCommit": "13644badfeb9a9d38e7499dad108464477009dfc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAwOTMwMA==", "url": "https://github.com/quarkusio/quarkus/pull/10651#discussion_r456009300", "bodyText": "I was just folllowing the guidance I found on the purpose and usage of WWW-Authenticate. Let me know if you'd like to change it anyway.", "author": "boosey", "createdAt": "2020-07-16T19:06:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk3MDUwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA5NjMyOQ==", "url": "https://github.com/quarkusio/quarkus/pull/10651#discussion_r456096329", "bodyText": "@boosey Right, but this 499 is a workaround as opposed to a genuine 401 which is when WWW-Authenticate is required, i.e it is the authorization code flow. Hmm. Well, since we are transporting this 499 with ChallengeData then may be it is better to at least provide OIDC as the supported authentication method...But I propose to drop  redirect-url (I did propose to return some hint myself - simply because I was not quite getting initially what was happening in the PR :-)  ), we don't really want the user code starting doing something manual around this redirect url, etc...", "author": "sberyozkin", "createdAt": "2020-07-16T21:46:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk3MDUwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE5MjQ5OA==", "url": "https://github.com/quarkusio/quarkus/pull/10651#discussion_r456192498", "bodyText": "Ok. I will remove the redirect-url.", "author": "boosey", "createdAt": "2020-07-17T03:04:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk3MDUwNA=="}], "type": "inlineReview", "revised_code": {"commit": "ea7ce0b4001d9b3a1cbf19a808b62a5cf1ac5c0c", "chunk": "diff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java\nindex 34c8a1bdc5..ffa6358f85 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java\n\n@@ -183,22 +185,8 @@ public class CodeAuthenticationMechanism extends AbstractOidcAuthenticationMecha\n             }\n         }\n \n-        if (shouldAutoRedirect(configContext, context)) {\n-            challenge = new ChallengeData(HttpResponseStatus.FOUND.code(), HttpHeaders.LOCATION,\n-                    configContext.auth.authorizeURL(params));\n-        } else {\n-            // If the client (usually an SPA) wants to handle the redirect manually, then\n-            // return status code 499 and in the www-authenticate header put the redirect url\n-            // www-authenticate header content; No standard content matched the exact use case\n-            // so the OAuth redirect-url= is an arbitrary string that can be tested\n-            // for on the client side\n-            String headerContent = \"OIDC redirect-url=\" + configContext.auth.authorizeURL(params);\n-            // Vertx HTTPHeaders does noy have a \"WWW_AUTHENTICATE\" static\n-            // So, header name is hard coded for the moment\n-            challenge = new ChallengeData(499, \"WWW-Authenticate\", headerContent);\n-        }\n-\n-        return Uni.createFrom().item(challenge);\n+        return Uni.createFrom().item(new ChallengeData(HttpResponseStatus.FOUND.code(), HttpHeaders.LOCATION,\n+                configContext.auth.authorizeURL(params)));\n     }\n \n     private Uni<SecurityIdentity> performCodeFlow(IdentityProviderManager identityProviderManager,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk3MTM2MA==", "url": "https://github.com/quarkusio/quarkus/pull/10651#discussion_r455971360", "bodyText": "You can drop this function and check configContext.oidcConfig.authentication.isXhrAutoRedirect() directly, it is cleaner, true :-), but we access config directly all over the place", "author": "sberyozkin", "createdAt": "2020-07-16T18:00:09Z", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -137,6 +137,22 @@ public SecurityIdentity apply(Throwable throwable) {\n         return performCodeFlow(identityProviderManager, context, resolver);\n     }\n \n+    private boolean isXHR(RoutingContext context) {\n+        return \"XMLHttpRequest\".equals(context.request().getHeader(\"X-Requested-With\"));\n+    }\n+\n+    private boolean isAutoRedirectSet(TenantConfigContext configContext) {", "originalCommit": "13644badfeb9a9d38e7499dad108464477009dfc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAxODc5Mw==", "url": "https://github.com/quarkusio/quarkus/pull/10651#discussion_r456018793", "bodyText": "Done", "author": "boosey", "createdAt": "2020-07-16T19:22:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk3MTM2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA5MjQ3NQ==", "url": "https://github.com/quarkusio/quarkus/pull/10651#discussion_r456092475", "bodyText": "@boosey, for some reasons I'm not seeing the change, I meant\nprivate boolean shouldAutoRedirect(TenantConfigContext configContext, RoutingContext context) {\n        return isXHR(context) ? configContext.oidcConfig.authentication.xhrAutoRedirect : true;\n}\n\nAs I mentioned, isAutoRedirectSet is fine, but then we'd need to be consistent across the code and introduce the wrappers like isAutoRedirectSet everywhere, but if you do prefer to keep, lets keep it :-)", "author": "sberyozkin", "createdAt": "2020-07-16T21:37:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk3MTM2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE5MjkxMg==", "url": "https://github.com/quarkusio/quarkus/pull/10651#discussion_r456192912", "bodyText": "Ah. I misunderstood. I will change.", "author": "boosey", "createdAt": "2020-07-17T03:06:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk3MTM2MA=="}], "type": "inlineReview", "revised_code": {"commit": "ea7ce0b4001d9b3a1cbf19a808b62a5cf1ac5c0c", "chunk": "diff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java\nindex 34c8a1bdc5..ffa6358f85 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java\n\n@@ -141,16 +142,12 @@ public class CodeAuthenticationMechanism extends AbstractOidcAuthenticationMecha\n         return \"XMLHttpRequest\".equals(context.request().getHeader(\"X-Requested-With\"));\n     }\n \n-    private boolean isAutoRedirectSet(TenantConfigContext configContext) {\n-        return configContext.oidcConfig.authentication.isXhrAutoRedirect();\n-    }\n-\n     // This test determines if the default behavior of returning a 302 should go forward\n     // The only case that shouldn't return a 302 is if the call is a XHR and the \n     // user has set the auto direct application property to false indicating that\n     // the client application will manually handle the redirect to account for SPA behavior\n     private boolean shouldAutoRedirect(TenantConfigContext configContext, RoutingContext context) {\n-        return isXHR(context) ? isAutoRedirectSet(configContext) : true;\n+        return isXHR(context) ? configContext.oidcConfig.authentication.xhrAutoRedirect : true;\n     }\n \n     public Uni<ChallengeData> getChallenge(RoutingContext context, DefaultTenantConfigResolver resolver) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA5NzA0OQ==", "url": "https://github.com/quarkusio/quarkus/pull/10651#discussion_r456097049", "bodyText": "You can remove this line, it is the same origin redirect to drop the parameters returned back from OIDC (code, etc)", "author": "sberyozkin", "createdAt": "2020-07-16T21:47:52Z", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -294,6 +320,7 @@ public void accept(SecurityIdentity identity) {\n                                                 finalRedirectUri += (\"?\" + finalUserQuery);\n                                             }\n                                             LOG.debugf(\"Final redirect URI: %s\", finalRedirectUri);\n+                                            //TODO: Does this need to check autoRedirect", "originalCommit": "cfca9508f0e28a3fda3a215e221621d33fc1aba6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE5MzE1MQ==", "url": "https://github.com/quarkusio/quarkus/pull/10651#discussion_r456193151", "bodyText": "Yes. I meant to ask about this so I could remove it. Will do now.", "author": "boosey", "createdAt": "2020-07-17T03:07:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA5NzA0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "ea7ce0b4001d9b3a1cbf19a808b62a5cf1ac5c0c", "chunk": "diff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java\nindex 54f9b257dc..ffa6358f85 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java\n\n@@ -313,14 +304,14 @@ public class CodeAuthenticationMechanism extends AbstractOidcAuthenticationMecha\n                                             uniEmitter.fail(new AuthenticationCompletionException());\n                                         }\n                                         processSuccessfulAuthentication(context, configContext, result, identity);\n-                                        if (configContext.oidcConfig.authentication.removeRedirectParameters\n+\n+                                        if (configContext.oidcConfig.authentication.isRemoveRedirectParameters()\n                                                 && context.request().query() != null) {\n                                             String finalRedirectUri = buildUriWithoutQueryParams(context);\n                                             if (finalUserQuery != null) {\n                                                 finalRedirectUri += (\"?\" + finalUserQuery);\n                                             }\n                                             LOG.debugf(\"Final redirect URI: %s\", finalRedirectUri);\n-                                            //TODO: Does this need to check autoRedirect\n                                             uniEmitter.fail(new AuthenticationRedirectException(finalRedirectUri));\n                                         } else {\n                                             uniEmitter.complete(augmentIdentity(identity, result.opaqueAccessToken(),\n"}}, {"oid": "ea7ce0b4001d9b3a1cbf19a808b62a5cf1ac5c0c", "url": "https://github.com/quarkusio/quarkus/commit/ea7ce0b4001d9b3a1cbf19a808b62a5cf1ac5c0c", "message": "Allow manual redirect for SPA using XHR", "committedDate": "2020-07-17T21:02:30Z", "type": "forcePushed"}, {"oid": "c415f86f5cdd7fe4dbaaf79767a08945e0aa7018", "url": "https://github.com/quarkusio/quarkus/commit/c415f86f5cdd7fe4dbaaf79767a08945e0aa7018", "message": "Allow manual redirect for SPA using XHR", "committedDate": "2020-07-21T14:29:45Z", "type": "commit"}, {"oid": "c415f86f5cdd7fe4dbaaf79767a08945e0aa7018", "url": "https://github.com/quarkusio/quarkus/commit/c415f86f5cdd7fe4dbaaf79767a08945e0aa7018", "message": "Allow manual redirect for SPA using XHR", "committedDate": "2020-07-21T14:29:45Z", "type": "forcePushed"}]}