{"pr_number": 10828, "pr_title": "Upgrade SmallRye Health to 2.2.3 and add Health UI", "pr_createdAt": "2020-07-18T16:19:51Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/10828", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE1MjgzNA==", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457152834", "bodyText": "IIUC, the UI artifacts are only static files so why do we need to reextract them when the path to UI changes? Can't you just reuse already created temp dir and just change the path in the cached instance?", "author": "xstefank", "createdAt": "2020-07-20T08:02:11Z", "path": "extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java", "diffHunk": "@@ -278,4 +326,162 @@ public void transform(TransformationContext ctx) {\n \n         });\n     }\n+\n+    // UI\n+\n+    @BuildStep\n+    @Record(ExecutionTime.STATIC_INIT)\n+    void registerUiExtension(\n+            BuildProducer<RouteBuildItem> routeProducer,\n+            BuildProducer<GeneratedResourceBuildItem> generatedResourceProducer,\n+            BuildProducer<NativeImageResourceBuildItem> nativeImageResourceProducer,\n+            BuildProducer<NotFoundPageDisplayableEndpointBuildItem> notFoundPageDisplayableEndpointProducer,\n+            SmallRyeHealthRecorder recorder,\n+            LaunchModeBuildItem launchMode,\n+            LiveReloadBuildItem liveReload,\n+            HttpRootPathBuildItem httpRootPath,\n+            CurateOutcomeBuildItem curateOutcomeBuildItem) throws Exception {\n+\n+        if (!health.enableUi) {\n+            return;\n+        }\n+        if (\"/\".equals(health.rootPathUi)) {\n+            throw new ConfigurationError(\n+                    \"quarkus.smallrye-health.root-path-ui was set to \\\"/\\\", this is not allowed as it blocks the application from serving anything else.\");\n+        }\n+\n+        String healthPath = httpRootPath.adjustPath(health.rootPath);\n+\n+        if (launchMode.getLaunchMode().isDevOrTest()) {\n+            CachedHealthUI cached = liveReload.getContextObject(CachedHealthUI.class);\n+            boolean extractionNeeded = cached == null;\n+\n+            if (cached != null && !cached.cachedHealthPath.equals(healthPath)) {", "originalCommit": "0eef62c640442acfd44969ee0952332e93b9628f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE2OTY2Nw==", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457169667", "bodyText": "Yea, the idea is actually that you can change the /health path and the UI sould pick this up. But that is not yet implemented, as the user can change that path the settings, but maybe I should just implement it now.", "author": "phillip-kruger", "createdAt": "2020-07-20T08:25:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE1MjgzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE3MDA0OQ==", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457170049", "bodyText": "Point is, then it's not static anymore...", "author": "phillip-kruger", "createdAt": "2020-07-20T08:25:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE1MjgzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIyNDQyNA==", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457224424", "bodyText": "Ok, I now added the dynamic part.", "author": "phillip-kruger", "createdAt": "2020-07-20T09:36:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE1MjgzNA=="}], "type": "inlineReview", "revised_code": {"commit": "765399e6cf23f84b18830c22af49fc41daf89d93", "chunk": "diff --git a/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java b/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java\nindex 572606edd0..8e23b88f2c 100644\n--- a/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java\n+++ b/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java\n\n@@ -342,10 +295,10 @@ class SmallRyeHealthProcessor {\n             HttpRootPathBuildItem httpRootPath,\n             CurateOutcomeBuildItem curateOutcomeBuildItem) throws Exception {\n \n-        if (!health.enableUi) {\n+        if (!health.ui.enable) {\n             return;\n         }\n-        if (\"/\".equals(health.rootPathUi)) {\n+        if (\"/\".equals(health.ui.rootPath)) {\n             throw new ConfigurationError(\n                     \"quarkus.smallrye-health.root-path-ui was set to \\\"/\\\", this is not allowed as it blocks the application from serving anything else.\");\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE1NzQ2MA==", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457157460", "bodyText": "I would suggest incorporating this line in the if statement on the following line so you can avoid some processing which will be discarded for ignored files.", "author": "xstefank", "createdAt": "2020-07-20T08:08:40Z", "path": "extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java", "diffHunk": "@@ -278,4 +326,162 @@ public void transform(TransformationContext ctx) {\n \n         });\n     }\n+\n+    // UI\n+\n+    @BuildStep\n+    @Record(ExecutionTime.STATIC_INIT)\n+    void registerUiExtension(\n+            BuildProducer<RouteBuildItem> routeProducer,\n+            BuildProducer<GeneratedResourceBuildItem> generatedResourceProducer,\n+            BuildProducer<NativeImageResourceBuildItem> nativeImageResourceProducer,\n+            BuildProducer<NotFoundPageDisplayableEndpointBuildItem> notFoundPageDisplayableEndpointProducer,\n+            SmallRyeHealthRecorder recorder,\n+            LaunchModeBuildItem launchMode,\n+            LiveReloadBuildItem liveReload,\n+            HttpRootPathBuildItem httpRootPath,\n+            CurateOutcomeBuildItem curateOutcomeBuildItem) throws Exception {\n+\n+        if (!health.enableUi) {\n+            return;\n+        }\n+        if (\"/\".equals(health.rootPathUi)) {\n+            throw new ConfigurationError(\n+                    \"quarkus.smallrye-health.root-path-ui was set to \\\"/\\\", this is not allowed as it blocks the application from serving anything else.\");\n+        }\n+\n+        String healthPath = httpRootPath.adjustPath(health.rootPath);\n+\n+        if (launchMode.getLaunchMode().isDevOrTest()) {\n+            CachedHealthUI cached = liveReload.getContextObject(CachedHealthUI.class);\n+            boolean extractionNeeded = cached == null;\n+\n+            if (cached != null && !cached.cachedHealthPath.equals(healthPath)) {\n+                try {\n+                    FileUtil.deleteDirectory(Paths.get(cached.cachedDirectory));\n+                } catch (IOException e) {\n+                    LOG.error(\"Failed to clean Health UI temp directory on restart\", e);\n+                }\n+                extractionNeeded = true;\n+            }\n+            if (extractionNeeded) {\n+                if (cached == null) {\n+                    cached = new CachedHealthUI();\n+                    liveReload.setContextObject(CachedHealthUI.class, cached);\n+                    Runtime.getRuntime().addShutdownHook(new Thread(cached, \"Health UI Shutdown Hook\"));\n+                }\n+                try {\n+                    AppArtifact artifact = getHealthUiArtifact(curateOutcomeBuildItem);\n+                    Path tempDir = Files.createTempDirectory(TEMP_DIR_PREFIX).toRealPath();\n+                    extractHealthUi(artifact, tempDir);\n+                    cached.cachedDirectory = tempDir.toAbsolutePath().toString();\n+                    cached.cachedHealthPath = healthPath;\n+                } catch (IOException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            }\n+            Handler<RoutingContext> handler = recorder.uiHandler(cached.cachedDirectory,\n+                    httpRootPath.adjustPath(health.rootPathUi));\n+            routeProducer.produce(new RouteBuildItem(health.rootPathUi, handler));\n+            routeProducer.produce(new RouteBuildItem(health.rootPathUi + \"/*\", handler));\n+            notFoundPageDisplayableEndpointProducer\n+                    .produce(new NotFoundPageDisplayableEndpointBuildItem(health.rootPathUi + \"/\"));\n+        } else if (health.alwaysIncludeUi) {\n+            AppArtifact artifact = getHealthUiArtifact(curateOutcomeBuildItem);\n+            //we are including in a production artifact\n+            //just stick the files in the generated output\n+            //we could do this for dev mode as well but then we need to extract them every time\n+            for (Path p : artifact.getPaths()) {\n+                File artifactFile = p.toFile();\n+                try (JarFile jarFile = new JarFile(artifactFile)) {\n+                    Enumeration<JarEntry> entries = jarFile.entries();\n+\n+                    while (entries.hasMoreElements()) {\n+                        JarEntry entry = entries.nextElement();\n+                        if (entry.getName().startsWith(HEALTH_UI_WEBJAR_PREFIX) && !entry.isDirectory()) {\n+                            try (InputStream inputStream = jarFile.getInputStream(entry)) {\n+                                String filename = entry.getName().replace(HEALTH_UI_WEBJAR_PREFIX + \"/\", \"\");\n+                                byte[] content = FileUtil.readFileContents(inputStream);", "originalCommit": "0eef62c640442acfd44969ee0952332e93b9628f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE3NjI5Mg==", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457176292", "bodyText": "It's used later (outside of the if) - see line 416", "author": "phillip-kruger", "createdAt": "2020-07-20T08:33:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE1NzQ2MA=="}], "type": "inlineReview", "revised_code": {"commit": "765399e6cf23f84b18830c22af49fc41daf89d93", "chunk": "diff --git a/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java b/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java\nindex 572606edd0..8e23b88f2c 100644\n--- a/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java\n+++ b/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java\n\n@@ -342,10 +295,10 @@ class SmallRyeHealthProcessor {\n             HttpRootPathBuildItem httpRootPath,\n             CurateOutcomeBuildItem curateOutcomeBuildItem) throws Exception {\n \n-        if (!health.enableUi) {\n+        if (!health.ui.enable) {\n             return;\n         }\n-        if (\"/\".equals(health.rootPathUi)) {\n+        if (\"/\".equals(health.ui.rootPath)) {\n             throw new ConfigurationError(\n                     \"quarkus.smallrye-health.root-path-ui was set to \\\"/\\\", this is not allowed as it blocks the application from serving anything else.\");\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE2MDM5Mg==", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457160392", "bodyText": "This can be called during dev mode so maybe even taking dep.getArtifact() into a variable may save some time? :) Not sure what is more expensive but there can be a lot of deps potentially so worth thinking about.", "author": "xstefank", "createdAt": "2020-07-20T08:12:42Z", "path": "extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java", "diffHunk": "@@ -278,4 +326,162 @@ public void transform(TransformationContext ctx) {\n \n         });\n     }\n+\n+    // UI\n+\n+    @BuildStep\n+    @Record(ExecutionTime.STATIC_INIT)\n+    void registerUiExtension(\n+            BuildProducer<RouteBuildItem> routeProducer,\n+            BuildProducer<GeneratedResourceBuildItem> generatedResourceProducer,\n+            BuildProducer<NativeImageResourceBuildItem> nativeImageResourceProducer,\n+            BuildProducer<NotFoundPageDisplayableEndpointBuildItem> notFoundPageDisplayableEndpointProducer,\n+            SmallRyeHealthRecorder recorder,\n+            LaunchModeBuildItem launchMode,\n+            LiveReloadBuildItem liveReload,\n+            HttpRootPathBuildItem httpRootPath,\n+            CurateOutcomeBuildItem curateOutcomeBuildItem) throws Exception {\n+\n+        if (!health.enableUi) {\n+            return;\n+        }\n+        if (\"/\".equals(health.rootPathUi)) {\n+            throw new ConfigurationError(\n+                    \"quarkus.smallrye-health.root-path-ui was set to \\\"/\\\", this is not allowed as it blocks the application from serving anything else.\");\n+        }\n+\n+        String healthPath = httpRootPath.adjustPath(health.rootPath);\n+\n+        if (launchMode.getLaunchMode().isDevOrTest()) {\n+            CachedHealthUI cached = liveReload.getContextObject(CachedHealthUI.class);\n+            boolean extractionNeeded = cached == null;\n+\n+            if (cached != null && !cached.cachedHealthPath.equals(healthPath)) {\n+                try {\n+                    FileUtil.deleteDirectory(Paths.get(cached.cachedDirectory));\n+                } catch (IOException e) {\n+                    LOG.error(\"Failed to clean Health UI temp directory on restart\", e);\n+                }\n+                extractionNeeded = true;\n+            }\n+            if (extractionNeeded) {\n+                if (cached == null) {\n+                    cached = new CachedHealthUI();\n+                    liveReload.setContextObject(CachedHealthUI.class, cached);\n+                    Runtime.getRuntime().addShutdownHook(new Thread(cached, \"Health UI Shutdown Hook\"));\n+                }\n+                try {\n+                    AppArtifact artifact = getHealthUiArtifact(curateOutcomeBuildItem);\n+                    Path tempDir = Files.createTempDirectory(TEMP_DIR_PREFIX).toRealPath();\n+                    extractHealthUi(artifact, tempDir);\n+                    cached.cachedDirectory = tempDir.toAbsolutePath().toString();\n+                    cached.cachedHealthPath = healthPath;\n+                } catch (IOException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            }\n+            Handler<RoutingContext> handler = recorder.uiHandler(cached.cachedDirectory,\n+                    httpRootPath.adjustPath(health.rootPathUi));\n+            routeProducer.produce(new RouteBuildItem(health.rootPathUi, handler));\n+            routeProducer.produce(new RouteBuildItem(health.rootPathUi + \"/*\", handler));\n+            notFoundPageDisplayableEndpointProducer\n+                    .produce(new NotFoundPageDisplayableEndpointBuildItem(health.rootPathUi + \"/\"));\n+        } else if (health.alwaysIncludeUi) {\n+            AppArtifact artifact = getHealthUiArtifact(curateOutcomeBuildItem);\n+            //we are including in a production artifact\n+            //just stick the files in the generated output\n+            //we could do this for dev mode as well but then we need to extract them every time\n+            for (Path p : artifact.getPaths()) {\n+                File artifactFile = p.toFile();\n+                try (JarFile jarFile = new JarFile(artifactFile)) {\n+                    Enumeration<JarEntry> entries = jarFile.entries();\n+\n+                    while (entries.hasMoreElements()) {\n+                        JarEntry entry = entries.nextElement();\n+                        if (entry.getName().startsWith(HEALTH_UI_WEBJAR_PREFIX) && !entry.isDirectory()) {\n+                            try (InputStream inputStream = jarFile.getInputStream(entry)) {\n+                                String filename = entry.getName().replace(HEALTH_UI_WEBJAR_PREFIX + \"/\", \"\");\n+                                byte[] content = FileUtil.readFileContents(inputStream);\n+                                if (IGNORE_LIST.contains(filename)) {\n+                                    ClassLoader classLoader = SmallRyeHealthProcessor.class.getClassLoader();\n+                                    try (InputStream resourceAsStream = classLoader\n+                                            .getResourceAsStream(OWN_MEDIA_FOLDER + filename)) {\n+                                        content = IoUtil.readBytes(resourceAsStream);\n+                                    }\n+                                }\n+\n+                                String fileName = HEALTH_UI_FINAL_DESTINATION + \"/\" + filename;\n+\n+                                generatedResourceProducer\n+                                        .produce(new GeneratedResourceBuildItem(fileName, content));\n+\n+                                nativeImageResourceProducer\n+                                        .produce(new NativeImageResourceBuildItem(fileName));\n+\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+\n+            Handler<RoutingContext> handler = recorder\n+                    .uiHandler(HEALTH_UI_FINAL_DESTINATION, httpRootPath.adjustPath(health.rootPathUi));\n+            routeProducer.produce(new RouteBuildItem(health.rootPathUi, handler));\n+            routeProducer.produce(new RouteBuildItem(health.rootPathUi + \"/*\", handler));\n+        }\n+    }\n+\n+    private AppArtifact getHealthUiArtifact(CurateOutcomeBuildItem curateOutcomeBuildItem) {\n+        for (AppDependency dep : curateOutcomeBuildItem.getEffectiveModel().getFullDeploymentDeps()) {\n+            if (dep.getArtifact().getArtifactId().equals(HEALTH_UI_WEBJAR_ARTIFACT_ID)", "originalCommit": "0eef62c640442acfd44969ee0952332e93b9628f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE3OTI5MA==", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457179290", "bodyText": "Dev mode extract this to a local \"cache\" folder, so it's not being called on every reload. Only when the '/health' path change. So I think it's ok.", "author": "phillip-kruger", "createdAt": "2020-07-20T08:36:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE2MDM5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "765399e6cf23f84b18830c22af49fc41daf89d93", "chunk": "diff --git a/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java b/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java\nindex 572606edd0..8e23b88f2c 100644\n--- a/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java\n+++ b/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java\n\n@@ -342,10 +295,10 @@ class SmallRyeHealthProcessor {\n             HttpRootPathBuildItem httpRootPath,\n             CurateOutcomeBuildItem curateOutcomeBuildItem) throws Exception {\n \n-        if (!health.enableUi) {\n+        if (!health.ui.enable) {\n             return;\n         }\n-        if (\"/\".equals(health.rootPathUi)) {\n+        if (\"/\".equals(health.ui.rootPath)) {\n             throw new ConfigurationError(\n                     \"quarkus.smallrye-health.root-path-ui was set to \\\"/\\\", this is not allowed as it blocks the application from serving anything else.\");\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE2MzMxOA==", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457163318", "bodyText": "can extractHealthUi be reused here?", "author": "xstefank", "createdAt": "2020-07-20T08:16:33Z", "path": "extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java", "diffHunk": "@@ -278,4 +326,162 @@ public void transform(TransformationContext ctx) {\n \n         });\n     }\n+\n+    // UI\n+\n+    @BuildStep\n+    @Record(ExecutionTime.STATIC_INIT)\n+    void registerUiExtension(\n+            BuildProducer<RouteBuildItem> routeProducer,\n+            BuildProducer<GeneratedResourceBuildItem> generatedResourceProducer,\n+            BuildProducer<NativeImageResourceBuildItem> nativeImageResourceProducer,\n+            BuildProducer<NotFoundPageDisplayableEndpointBuildItem> notFoundPageDisplayableEndpointProducer,\n+            SmallRyeHealthRecorder recorder,\n+            LaunchModeBuildItem launchMode,\n+            LiveReloadBuildItem liveReload,\n+            HttpRootPathBuildItem httpRootPath,\n+            CurateOutcomeBuildItem curateOutcomeBuildItem) throws Exception {\n+\n+        if (!health.enableUi) {\n+            return;\n+        }\n+        if (\"/\".equals(health.rootPathUi)) {\n+            throw new ConfigurationError(\n+                    \"quarkus.smallrye-health.root-path-ui was set to \\\"/\\\", this is not allowed as it blocks the application from serving anything else.\");\n+        }\n+\n+        String healthPath = httpRootPath.adjustPath(health.rootPath);\n+\n+        if (launchMode.getLaunchMode().isDevOrTest()) {\n+            CachedHealthUI cached = liveReload.getContextObject(CachedHealthUI.class);\n+            boolean extractionNeeded = cached == null;\n+\n+            if (cached != null && !cached.cachedHealthPath.equals(healthPath)) {\n+                try {\n+                    FileUtil.deleteDirectory(Paths.get(cached.cachedDirectory));\n+                } catch (IOException e) {\n+                    LOG.error(\"Failed to clean Health UI temp directory on restart\", e);\n+                }\n+                extractionNeeded = true;\n+            }\n+            if (extractionNeeded) {\n+                if (cached == null) {\n+                    cached = new CachedHealthUI();\n+                    liveReload.setContextObject(CachedHealthUI.class, cached);\n+                    Runtime.getRuntime().addShutdownHook(new Thread(cached, \"Health UI Shutdown Hook\"));\n+                }\n+                try {\n+                    AppArtifact artifact = getHealthUiArtifact(curateOutcomeBuildItem);\n+                    Path tempDir = Files.createTempDirectory(TEMP_DIR_PREFIX).toRealPath();\n+                    extractHealthUi(artifact, tempDir);\n+                    cached.cachedDirectory = tempDir.toAbsolutePath().toString();\n+                    cached.cachedHealthPath = healthPath;\n+                } catch (IOException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            }\n+            Handler<RoutingContext> handler = recorder.uiHandler(cached.cachedDirectory,\n+                    httpRootPath.adjustPath(health.rootPathUi));\n+            routeProducer.produce(new RouteBuildItem(health.rootPathUi, handler));\n+            routeProducer.produce(new RouteBuildItem(health.rootPathUi + \"/*\", handler));\n+            notFoundPageDisplayableEndpointProducer\n+                    .produce(new NotFoundPageDisplayableEndpointBuildItem(health.rootPathUi + \"/\"));\n+        } else if (health.alwaysIncludeUi) {\n+            AppArtifact artifact = getHealthUiArtifact(curateOutcomeBuildItem);\n+            //we are including in a production artifact\n+            //just stick the files in the generated output\n+            //we could do this for dev mode as well but then we need to extract them every time\n+            for (Path p : artifact.getPaths()) {", "originalCommit": "0eef62c640442acfd44969ee0952332e93b9628f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE4MjI5NA==", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457182294", "bodyText": "Not really no, they do different things.", "author": "phillip-kruger", "createdAt": "2020-07-20T08:40:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE2MzMxOA=="}], "type": "inlineReview", "revised_code": {"commit": "765399e6cf23f84b18830c22af49fc41daf89d93", "chunk": "diff --git a/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java b/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java\nindex 572606edd0..8e23b88f2c 100644\n--- a/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java\n+++ b/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java\n\n@@ -342,10 +295,10 @@ class SmallRyeHealthProcessor {\n             HttpRootPathBuildItem httpRootPath,\n             CurateOutcomeBuildItem curateOutcomeBuildItem) throws Exception {\n \n-        if (!health.enableUi) {\n+        if (!health.ui.enable) {\n             return;\n         }\n-        if (\"/\".equals(health.rootPathUi)) {\n+        if (\"/\".equals(health.ui.rootPath)) {\n             throw new ConfigurationError(\n                     \"quarkus.smallrye-health.root-path-ui was set to \\\"/\\\", this is not allowed as it blocks the application from serving anything else.\");\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE2NDYxMw==", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457164613", "bodyText": "probably forgotten implementation of the test :)", "author": "xstefank", "createdAt": "2020-07-20T08:18:29Z", "path": "extensions/smallrye-health/deployment/src/test/java/io/quarkus/smallrye/health/test/ui/ErroneousConfigTest.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package io.quarkus.smallrye.graphql.deployment.ui;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.deployment.configuration.ConfigurationError;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class ErroneousConfigTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest config = new QuarkusUnitTest()\n+            .setExpectedException(ConfigurationError.class)\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                    .addAsResource(new StringAsset(\"quarkus.smallrye-health.root-path-ui=/\\n\"), \"application.properties\"));\n+\n+    @Test\n+    public void shouldNotStartApplicationIfUIPathIsASlash() {\n+        Assertions.fail();", "originalCommit": "0eef62c640442acfd44969ee0952332e93b9628f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE4MDI1Ng==", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457180256", "bodyText": "The app should not startup, as it has invalid config. That is what is being test.", "author": "phillip-kruger", "createdAt": "2020-07-20T08:38:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE2NDYxMw=="}], "type": "inlineReview", "revised_code": {"commit": "765399e6cf23f84b18830c22af49fc41daf89d93", "chunk": "diff --git a/extensions/smallrye-health/deployment/src/test/java/io/quarkus/smallrye/health/test/ui/ErroneousConfigTest.java b/extensions/smallrye-health/deployment/src/test/java/io/quarkus/smallrye/health/test/ui/ErroneousConfigTest.java\nindex 62f0e43830..8e51f227bb 100644\n--- a/extensions/smallrye-health/deployment/src/test/java/io/quarkus/smallrye/health/test/ui/ErroneousConfigTest.java\n+++ b/extensions/smallrye-health/deployment/src/test/java/io/quarkus/smallrye/health/test/ui/ErroneousConfigTest.java\n\n@@ -16,7 +16,7 @@ public class ErroneousConfigTest {\n     static final QuarkusUnitTest config = new QuarkusUnitTest()\n             .setExpectedException(ConfigurationError.class)\n             .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n-                    .addAsResource(new StringAsset(\"quarkus.smallrye-health.root-path-ui=/\\n\"), \"application.properties\"));\n+                    .addAsResource(new StringAsset(\"quarkus.smallrye-health.ui.root-path=/\\n\"), \"application.properties\"));\n \n     @Test\n     public void shouldNotStartApplicationIfUIPathIsASlash() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM3Mzk2NA==", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457373964", "bodyText": "Better move these properties to a ui subgroup", "author": "gastaldi", "createdAt": "2020-07-20T13:18:38Z", "path": "extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java", "diffHunk": "@@ -102,6 +131,26 @@\n          */\n         @ConfigItem(defaultValue = \"/group\")\n         String groupPath;\n+\n+        /**\n+         * The path where Health UI is available.\n+         * The value `/` is not allowed as it blocks the application from serving anything else.\n+         */\n+        @ConfigItem(defaultValue = \"/health-ui\")\n+        String rootPathUi;", "originalCommit": "2705ae6d8b596906008276c0c0373d349e3b4e89", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM4MzA2NA==", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457383064", "bodyText": "@gastaldi - do you have an example of this ? I am not sure how/what to do here ? (I just copied from other with UI)", "author": "phillip-kruger", "createdAt": "2020-07-20T13:28:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM3Mzk2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM4Nzc2Nw==", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457387767", "bodyText": "just create a ui @ConfigGroup and a nested class with the UI elements.", "author": "gsmet", "createdAt": "2020-07-20T13:34:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM3Mzk2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM4OTkwNg==", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457389906", "bodyText": "Thanks @gsmet !", "author": "phillip-kruger", "createdAt": "2020-07-20T13:36:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM3Mzk2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM5NjUzNw==", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457396537", "bodyText": "@gsmet  - This will change the config property right ? If so, probably we need to do this in the other UI services to be consistent ?", "author": "phillip-kruger", "createdAt": "2020-07-20T13:43:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM3Mzk2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQwNDYzMw==", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457404633", "bodyText": "Yes, the config property should be: quarkus.smallrye-health.ui.root-path. About the other UI services that would be good to do too", "author": "gastaldi", "createdAt": "2020-07-20T13:52:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM3Mzk2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQwOTc2Nw==", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457409767", "bodyText": "Cool. Changes done, building local, then I'll push", "author": "phillip-kruger", "createdAt": "2020-07-20T13:58:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM3Mzk2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQyNDE5Mg==", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457424192", "bodyText": "Done :)", "author": "phillip-kruger", "createdAt": "2020-07-20T14:13:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM3Mzk2NA=="}], "type": "inlineReview", "revised_code": {"commit": "765399e6cf23f84b18830c22af49fc41daf89d93", "chunk": "diff --git a/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java b/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java\nindex eda489501a..8e23b88f2c 100644\n--- a/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java\n+++ b/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java\n\n@@ -106,53 +105,6 @@ class SmallRyeHealthProcessor {\n \n     HealthBuildTimeConfig config;\n \n-    @ConfigRoot(name = \"smallrye-health\")\n-    static final class SmallRyeHealthConfig {\n-        /**\n-         * Root path for health-checking endpoints.\n-         */\n-        @ConfigItem(defaultValue = \"/health\")\n-        String rootPath;\n-\n-        /**\n-         * The relative path of the liveness health-checking endpoint.\n-         */\n-        @ConfigItem(defaultValue = \"/live\")\n-        String livenessPath;\n-\n-        /**\n-         * The relative path of the readiness health-checking endpoint.\n-         */\n-        @ConfigItem(defaultValue = \"/ready\")\n-        String readinessPath;\n-\n-        /**\n-         * The relative path of the health group endpoint.\n-         */\n-        @ConfigItem(defaultValue = \"/group\")\n-        String groupPath;\n-\n-        /**\n-         * The path where Health UI is available.\n-         * The value `/` is not allowed as it blocks the application from serving anything else.\n-         */\n-        @ConfigItem(defaultValue = \"/health-ui\")\n-        String rootPathUi;\n-\n-        /**\n-         * Always include the UI. By default this will only be included in dev and test.\n-         * Setting this to true will also include the UI in Prod\n-         */\n-        @ConfigItem(defaultValue = \"false\")\n-        boolean alwaysIncludeUi;\n-\n-        /**\n-         * If Health UI should be enabled. By default, Health UI is enabled.\n-         */\n-        @ConfigItem(defaultValue = \"true\")\n-        boolean enableUi;\n-    }\n-\n     @BuildStep\n     void healthCheck(BuildProducer<AdditionalBeanBuildItem> buildItemBuildProducer,\n             List<HealthBuildItem> healthBuildItems) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg0OTA2OA==", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457849068", "bodyText": "This may throw a NPE", "author": "gastaldi", "createdAt": "2020-07-21T05:41:42Z", "path": "extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java", "diffHunk": "@@ -278,4 +278,179 @@ public void transform(TransformationContext ctx) {\n \n         });\n     }\n+\n+    // UI\n+\n+    @BuildStep\n+    @Record(ExecutionTime.STATIC_INIT)\n+    void registerUiExtension(\n+            BuildProducer<RouteBuildItem> routeProducer,\n+            BuildProducer<GeneratedResourceBuildItem> generatedResourceProducer,\n+            BuildProducer<NativeImageResourceBuildItem> nativeImageResourceProducer,\n+            BuildProducer<NotFoundPageDisplayableEndpointBuildItem> notFoundPageDisplayableEndpointProducer,\n+            SmallRyeHealthRecorder recorder,\n+            LaunchModeBuildItem launchMode,\n+            LiveReloadBuildItem liveReload,\n+            HttpRootPathBuildItem httpRootPath,\n+            CurateOutcomeBuildItem curateOutcomeBuildItem) throws Exception {\n+\n+        if (!health.ui.enable) {\n+            return;\n+        }\n+        if (\"/\".equals(health.ui.rootPath)) {\n+            throw new ConfigurationError(\n+                    \"quarkus.smallrye-health.root-path-ui was set to \\\"/\\\", this is not allowed as it blocks the application from serving anything else.\");\n+        }\n+\n+        String healthPath = httpRootPath.adjustPath(health.rootPath);\n+\n+        if (launchMode.getLaunchMode().isDevOrTest()) {\n+            CachedHealthUI cached = liveReload.getContextObject(CachedHealthUI.class);\n+            boolean extractionNeeded = cached == null;\n+\n+            if (cached != null && !cached.cachedHealthPath.equals(healthPath)) {\n+                try {\n+                    FileUtil.deleteDirectory(Paths.get(cached.cachedDirectory));\n+                } catch (IOException e) {\n+                    LOG.error(\"Failed to clean Health UI temp directory on restart\", e);\n+                }\n+                extractionNeeded = true;\n+            }\n+            if (extractionNeeded) {\n+                if (cached == null) {\n+                    cached = new CachedHealthUI();\n+                    liveReload.setContextObject(CachedHealthUI.class, cached);\n+                    Runtime.getRuntime().addShutdownHook(new Thread(cached, \"Health UI Shutdown Hook\"));\n+                }\n+                try {\n+                    AppArtifact artifact = getHealthUiArtifact(curateOutcomeBuildItem);\n+                    Path tempDir = Files.createTempDirectory(TEMP_DIR_PREFIX).toRealPath();\n+                    extractHealthUi(artifact, tempDir);\n+                    updateApiUrl(tempDir.resolve(FILE_TO_UPDATE), healthPath);\n+                    cached.cachedDirectory = tempDir.toAbsolutePath().toString();\n+                    cached.cachedHealthPath = healthPath;\n+                } catch (IOException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            }\n+            Handler<RoutingContext> handler = recorder.uiHandler(cached.cachedDirectory,\n+                    httpRootPath.adjustPath(health.ui.rootPath));\n+            routeProducer.produce(new RouteBuildItem(health.ui.rootPath, handler));\n+            routeProducer.produce(new RouteBuildItem(health.ui.rootPath + \"/*\", handler));\n+            notFoundPageDisplayableEndpointProducer\n+                    .produce(new NotFoundPageDisplayableEndpointBuildItem(health.ui.rootPath + \"/\"));\n+        } else if (health.ui.alwaysInclude) {\n+            AppArtifact artifact = getHealthUiArtifact(curateOutcomeBuildItem);\n+            //we are including in a production artifact\n+            //just stick the files in the generated output\n+            //we could do this for dev mode as well but then we need to extract them every time\n+            for (Path p : artifact.getPaths()) {\n+                File artifactFile = p.toFile();\n+                try (JarFile jarFile = new JarFile(artifactFile)) {\n+                    Enumeration<JarEntry> entries = jarFile.entries();\n+\n+                    while (entries.hasMoreElements()) {\n+                        JarEntry entry = entries.nextElement();\n+                        if (entry.getName().startsWith(HEALTH_UI_WEBJAR_PREFIX) && !entry.isDirectory()) {\n+                            try (InputStream inputStream = jarFile.getInputStream(entry)) {\n+                                String filename = entry.getName().replace(HEALTH_UI_WEBJAR_PREFIX + \"/\", \"\");\n+                                byte[] content = FileUtil.readFileContents(inputStream);\n+                                if (entry.getName().endsWith(FILE_TO_UPDATE)) {\n+                                    content = updateApiUrl(new String(content, StandardCharsets.UTF_8), healthPath)\n+                                            .getBytes(StandardCharsets.UTF_8);\n+                                }\n+                                if (IGNORE_LIST.contains(filename)) {\n+                                    ClassLoader classLoader = SmallRyeHealthProcessor.class.getClassLoader();\n+                                    try (InputStream resourceAsStream = classLoader", "originalCommit": "464622c898f75c9e59b0a0236bf773435eeb72d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg2NzM5Mg==", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457867392", "bodyText": "Hi @gastaldi - what might be null here ?", "author": "phillip-kruger", "createdAt": "2020-07-21T06:33:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg0OTA2OA=="}], "type": "inlineReview", "revised_code": {"commit": "765399e6cf23f84b18830c22af49fc41daf89d93", "chunk": "diff --git a/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java b/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java\nindex e654dee0e7..8e23b88f2c 100644\n--- a/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java\n+++ b/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java\n\n@@ -330,7 +331,7 @@ class SmallRyeHealthProcessor {\n                     cached.cachedDirectory = tempDir.toAbsolutePath().toString();\n                     cached.cachedHealthPath = healthPath;\n                 } catch (IOException e) {\n-                    throw new RuntimeException(e);\n+                    throw new UncheckedIOException(e);\n                 }\n             }\n             Handler<RoutingContext> handler = recorder.uiHandler(cached.cachedDirectory,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg0OTM3NQ==", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457849375", "bodyText": "Throw UncheckedIoException instead", "author": "gastaldi", "createdAt": "2020-07-21T05:42:40Z", "path": "extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java", "diffHunk": "@@ -278,4 +278,179 @@ public void transform(TransformationContext ctx) {\n \n         });\n     }\n+\n+    // UI\n+\n+    @BuildStep\n+    @Record(ExecutionTime.STATIC_INIT)\n+    void registerUiExtension(\n+            BuildProducer<RouteBuildItem> routeProducer,\n+            BuildProducer<GeneratedResourceBuildItem> generatedResourceProducer,\n+            BuildProducer<NativeImageResourceBuildItem> nativeImageResourceProducer,\n+            BuildProducer<NotFoundPageDisplayableEndpointBuildItem> notFoundPageDisplayableEndpointProducer,\n+            SmallRyeHealthRecorder recorder,\n+            LaunchModeBuildItem launchMode,\n+            LiveReloadBuildItem liveReload,\n+            HttpRootPathBuildItem httpRootPath,\n+            CurateOutcomeBuildItem curateOutcomeBuildItem) throws Exception {\n+\n+        if (!health.ui.enable) {\n+            return;\n+        }\n+        if (\"/\".equals(health.ui.rootPath)) {\n+            throw new ConfigurationError(\n+                    \"quarkus.smallrye-health.root-path-ui was set to \\\"/\\\", this is not allowed as it blocks the application from serving anything else.\");\n+        }\n+\n+        String healthPath = httpRootPath.adjustPath(health.rootPath);\n+\n+        if (launchMode.getLaunchMode().isDevOrTest()) {\n+            CachedHealthUI cached = liveReload.getContextObject(CachedHealthUI.class);\n+            boolean extractionNeeded = cached == null;\n+\n+            if (cached != null && !cached.cachedHealthPath.equals(healthPath)) {\n+                try {\n+                    FileUtil.deleteDirectory(Paths.get(cached.cachedDirectory));\n+                } catch (IOException e) {\n+                    LOG.error(\"Failed to clean Health UI temp directory on restart\", e);\n+                }\n+                extractionNeeded = true;\n+            }\n+            if (extractionNeeded) {\n+                if (cached == null) {\n+                    cached = new CachedHealthUI();\n+                    liveReload.setContextObject(CachedHealthUI.class, cached);\n+                    Runtime.getRuntime().addShutdownHook(new Thread(cached, \"Health UI Shutdown Hook\"));\n+                }\n+                try {\n+                    AppArtifact artifact = getHealthUiArtifact(curateOutcomeBuildItem);\n+                    Path tempDir = Files.createTempDirectory(TEMP_DIR_PREFIX).toRealPath();\n+                    extractHealthUi(artifact, tempDir);\n+                    updateApiUrl(tempDir.resolve(FILE_TO_UPDATE), healthPath);\n+                    cached.cachedDirectory = tempDir.toAbsolutePath().toString();\n+                    cached.cachedHealthPath = healthPath;\n+                } catch (IOException e) {\n+                    throw new RuntimeException(e);", "originalCommit": "464622c898f75c9e59b0a0236bf773435eeb72d3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "765399e6cf23f84b18830c22af49fc41daf89d93", "chunk": "diff --git a/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java b/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java\nindex e654dee0e7..8e23b88f2c 100644\n--- a/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java\n+++ b/extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java\n\n@@ -330,7 +331,7 @@ class SmallRyeHealthProcessor {\n                     cached.cachedDirectory = tempDir.toAbsolutePath().toString();\n                     cached.cachedHealthPath = healthPath;\n                 } catch (IOException e) {\n-                    throw new RuntimeException(e);\n+                    throw new UncheckedIOException(e);\n                 }\n             }\n             Handler<RoutingContext> handler = recorder.uiHandler(cached.cachedDirectory,\n"}}, {"oid": "765399e6cf23f84b18830c22af49fc41daf89d93", "url": "https://github.com/quarkusio/quarkus/commit/765399e6cf23f84b18830c22af49fc41daf89d93", "message": "Upgrade SmallRye Health to 2.2.3 and add Health UI\n\nSigned-off-by: Phillip Kruger <phillip.kruger@gmail.com>", "committedDate": "2020-07-21T08:18:37Z", "type": "commit"}]}