{"pr_number": 9268, "pr_title": "quarkus-mongodb-panache: Added support to $in operator", "pr_createdAt": "2020-05-13T13:32:02Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/9268", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0NDMxMQ==", "url": "https://github.com/quarkusio/quarkus/pull/9268#discussion_r424444311", "bodyText": "Wildcard imports are prohibited", "author": "loicmathieu", "createdAt": "2020-05-13T13:38:23Z", "path": "extensions/panache/mongodb-panache/runtime/src/main/java/io/quarkus/mongodb/panache/binder/CommonQueryBinder.java", "diffHunk": "@@ -6,8 +6,7 @@\n import java.time.LocalDateTime;\n import java.time.ZoneOffset;\n import java.time.format.DateTimeFormatter;\n-import java.util.Date;\n-import java.util.TimeZone;\n+import java.util.*;", "originalCommit": "474b83f59228af2a416db0b0ba29eb0f61a8abc0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUwMzIwMQ==", "url": "https://github.com/quarkusio/quarkus/pull/9268#discussion_r424503201", "bodyText": "Done.", "author": "diogocarleto", "createdAt": "2020-05-13T14:54:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0NDMxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUwMzY2NA==", "url": "https://github.com/quarkusio/quarkus/pull/9268#discussion_r424503664", "bodyText": "I don't know why IntelliJ adds replace this for all the package, I'll check later.", "author": "diogocarleto", "createdAt": "2020-05-13T14:55:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0NDMxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "5f030833e71615fcd8c36f08155521a84bf226e1", "chunk": "diff --git a/extensions/panache/mongodb-panache/runtime/src/main/java/io/quarkus/mongodb/panache/binder/CommonQueryBinder.java b/extensions/panache/mongodb-panache/runtime/src/main/java/io/quarkus/mongodb/panache/binder/CommonQueryBinder.java\nindex e8731c214b..e228a0c6be 100644\n--- a/extensions/panache/mongodb-panache/runtime/src/main/java/io/quarkus/mongodb/panache/binder/CommonQueryBinder.java\n+++ b/extensions/panache/mongodb-panache/runtime/src/main/java/io/quarkus/mongodb/panache/binder/CommonQueryBinder.java\n\n@@ -6,7 +6,11 @@ import java.time.LocalDate;\n import java.time.LocalDateTime;\n import java.time.ZoneOffset;\n import java.time.format.DateTimeFormatter;\n-import java.util.*;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.TimeZone;\n+import java.util.stream.Collectors;\n \n import org.bson.types.ObjectId;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0ODc5OA==", "url": "https://github.com/quarkusio/quarkus/pull/9268#discussion_r424448798", "bodyText": "You can use an iterator or turn you collection into an array to avoid creating a new ArrayList from the collection.\nAnd you can use a StringJoiner to avoid dealing with leading , ...", "author": "loicmathieu", "createdAt": "2020-05-13T13:44:20Z", "path": "extensions/panache/mongodb-panache/runtime/src/main/java/io/quarkus/mongodb/panache/binder/CommonQueryBinder.java", "diffHunk": "@@ -55,4 +57,27 @@ static String escape(Object value) {\n         }\n         return \"'\" + value.toString().replace(\"\\\\\", \"\\\\\\\\\").replace(\"'\", \"\\\\'\") + \"'\";\n     }\n+\n+    /**\n+     * Method used to apply in $in operators\n+     */\n+    private static String arrayValue(Object value) {\n+        StringBuilder arrayValue = new StringBuilder();\n+        List valueList = valueToList(value);\n+        for (int i = 0; i < valueList.size(); i++) {\n+            arrayValue.append(escape(valueList.get(i)));\n+            if (i + 1 < valueList.size()) {\n+                arrayValue.append(\", \");\n+            }\n+        }\n+        return arrayValue.toString();\n+    }\n+\n+    private static List valueToList(Object value) {\n+        if (value.getClass().isArray()) {\n+            return Arrays.asList((Object[]) value);\n+        }\n+\n+        return new ArrayList<>((Collection) value);\n+    }", "originalCommit": "474b83f59228af2a416db0b0ba29eb0f61a8abc0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUwMzc2MA==", "url": "https://github.com/quarkusio/quarkus/pull/9268#discussion_r424503760", "bodyText": "Done.", "author": "diogocarleto", "createdAt": "2020-05-13T14:55:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0ODc5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUxNjEwOA==", "url": "https://github.com/quarkusio/quarkus/pull/9268#discussion_r424516108", "bodyText": "Thanks, it's nicer ;)", "author": "loicmathieu", "createdAt": "2020-05-13T15:11:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0ODc5OA=="}], "type": "inlineReview", "revised_code": {"commit": "5f030833e71615fcd8c36f08155521a84bf226e1", "chunk": "diff --git a/extensions/panache/mongodb-panache/runtime/src/main/java/io/quarkus/mongodb/panache/binder/CommonQueryBinder.java b/extensions/panache/mongodb-panache/runtime/src/main/java/io/quarkus/mongodb/panache/binder/CommonQueryBinder.java\nindex e8731c214b..e228a0c6be 100644\n--- a/extensions/panache/mongodb-panache/runtime/src/main/java/io/quarkus/mongodb/panache/binder/CommonQueryBinder.java\n+++ b/extensions/panache/mongodb-panache/runtime/src/main/java/io/quarkus/mongodb/panache/binder/CommonQueryBinder.java\n\n@@ -59,25 +63,22 @@ final class CommonQueryBinder {\n     }\n \n     /**\n-     * Method used to apply in $in operators\n+     * Converts Collection or Array to a String separated for ','. Used in $in operators\n      */\n-    private static String arrayValue(Object value) {\n-        StringBuilder arrayValue = new StringBuilder();\n-        List valueList = valueToList(value);\n-        for (int i = 0; i < valueList.size(); i++) {\n-            arrayValue.append(escape(valueList.get(i)));\n-            if (i + 1 < valueList.size()) {\n-                arrayValue.append(\", \");\n-            }\n-        }\n-        return arrayValue.toString();\n+    private static String arrayAsString(Object value) {\n+        Object[] valueArray = convertToArray(value);\n+\n+        return Arrays.stream(valueArray)\n+                .map(CommonQueryBinder::escape)\n+                .collect(Collectors.joining(\", \"));\n     }\n \n-    private static List valueToList(Object value) {\n+    private static Object[] convertToArray(Object value) {\n         if (value.getClass().isArray()) {\n-            return Arrays.asList((Object[]) value);\n+            return (Object[]) value;\n         }\n \n-        return new ArrayList<>((Collection) value);\n+        Collection collection = (Collection) value;\n+        return collection.toArray(new Object[collection.size()]);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ1MDkwMA==", "url": "https://github.com/quarkusio/quarkus/pull/9268#discussion_r424450900", "bodyText": "All operators are escaped with single quotes.\nI know this is not mandatory but I prefere to keep it this way", "author": "loicmathieu", "createdAt": "2020-05-13T13:47:03Z", "path": "extensions/panache/mongodb-panache/runtime/src/main/java/io/quarkus/mongodb/panache/binder/MongoParserVisitor.java", "diffHunk": "@@ -100,4 +100,13 @@ public String visitPathExpression(HqlParser.PathExpressionContext ctx) {\n         // this is the name of the field, we apply replacement and escape with '\n         return \"'\" + replacementMap.getOrDefault(ctx.getText(), ctx.getText()) + \"'\";\n     }\n+\n+    @Override\n+    public String visitInPredicate(HqlParser.InPredicateContext ctx) {\n+        StringBuilder sb = new StringBuilder(ctx.expression().accept(this))\n+                .append(\":{$in:[\")", "originalCommit": "474b83f59228af2a416db0b0ba29eb0f61a8abc0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUwMzgzOA==", "url": "https://github.com/quarkusio/quarkus/pull/9268#discussion_r424503838", "bodyText": "Done.", "author": "diogocarleto", "createdAt": "2020-05-13T14:55:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ1MDkwMA=="}], "type": "inlineReview", "revised_code": {"commit": "5f030833e71615fcd8c36f08155521a84bf226e1", "chunk": "diff --git a/extensions/panache/mongodb-panache/runtime/src/main/java/io/quarkus/mongodb/panache/binder/MongoParserVisitor.java b/extensions/panache/mongodb-panache/runtime/src/main/java/io/quarkus/mongodb/panache/binder/MongoParserVisitor.java\nindex 1392cdfb02..b145a0b227 100644\n--- a/extensions/panache/mongodb-panache/runtime/src/main/java/io/quarkus/mongodb/panache/binder/MongoParserVisitor.java\n+++ b/extensions/panache/mongodb-panache/runtime/src/main/java/io/quarkus/mongodb/panache/binder/MongoParserVisitor.java\n\n@@ -104,7 +110,7 @@ class MongoParserVisitor extends HqlParserBaseVisitor<String> {\n     @Override\n     public String visitInPredicate(HqlParser.InPredicateContext ctx) {\n         StringBuilder sb = new StringBuilder(ctx.expression().accept(this))\n-                .append(\":{$in:[\")\n+                .append(\":{'$in':[\")\n                 .append(ctx.inList().accept(this))\n                 .append(\"]}\");\n         return sb.toString();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ1MjA1MA==", "url": "https://github.com/quarkusio/quarkus/pull/9268#discussion_r424452050", "bodyText": "Can you escape field with single quotes as in the other examples ?\nAnd do the same in the other test methods", "author": "loicmathieu", "createdAt": "2020-05-13T13:48:31Z", "path": "extensions/panache/mongodb-panache/runtime/src/test/java/io/quarkus/mongodb/panache/runtime/MongoOperationsTest.java", "diffHunk": "@@ -97,6 +94,24 @@ public void testBindNativeFilterByIndex() {\n \n         query = MongoOperations.bindFilter(Object.class, \"{'field': ?1, 'isOk': ?2}\", new Object[] { \"a value\", true });\n         assertEquals(\"{'field': 'a value', 'isOk': true}\", query);\n+\n+        //queries related to $in operator\n+        List<Object> list = Arrays.asList(\"f1\", \"f2\");\n+        query = MongoOperations.bindFilter(DemoObj.class, \"{ field: { $in: [?1] } }\", new Object[] { list });\n+        assertEquals(\"{ field: { $in: ['f1', 'f2'] } }\", query);\n+\n+        query = MongoOperations.bindFilter(DemoObj.class, \"{ field: { $in: [?1] }, isOk: ?2 }\", new Object[] { list, true });\n+        assertEquals(\"{ field: { $in: ['f1', 'f2'] }, isOk: true }\", query);\n+\n+        query = MongoOperations.bindFilter(DemoObj.class,\n+                \"{ field: { $in: [?1] }, $or: [ {'property': ?2}, {'property': ?3} ] }\",\n+                new Object[] { list, \"jpg\", \"gif\" });\n+        assertEquals(\"{ field: { $in: ['f1', 'f2'] }, $or: [ {'property': 'jpg'}, {'property': 'gif'} ] }\", query);\n+\n+        query = MongoOperations.bindFilter(DemoObj.class,\n+                \"{ field: { $in: [?1] }, isOk: ?2, $or: [ {'property': ?3}, {'property': ?4} ] }\",\n+                new Object[] { list, true, \"jpg\", \"gif\" });\n+        assertEquals(\"{ field: { $in: ['f1', 'f2'] }, isOk: true, $or: [ {'property': 'jpg'}, {'property': 'gif'} ] }\", query);", "originalCommit": "474b83f59228af2a416db0b0ba29eb0f61a8abc0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUwMzg4OA==", "url": "https://github.com/quarkusio/quarkus/pull/9268#discussion_r424503888", "bodyText": "Done.", "author": "diogocarleto", "createdAt": "2020-05-13T14:55:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ1MjA1MA=="}], "type": "inlineReview", "revised_code": {"commit": "5f030833e71615fcd8c36f08155521a84bf226e1", "chunk": "diff --git a/extensions/panache/mongodb-panache/runtime/src/test/java/io/quarkus/mongodb/panache/runtime/MongoOperationsTest.java b/extensions/panache/mongodb-panache/runtime/src/test/java/io/quarkus/mongodb/panache/runtime/MongoOperationsTest.java\nindex 50aca73a93..0fac5fcceb 100644\n--- a/extensions/panache/mongodb-panache/runtime/src/test/java/io/quarkus/mongodb/panache/runtime/MongoOperationsTest.java\n+++ b/extensions/panache/mongodb-panache/runtime/src/test/java/io/quarkus/mongodb/panache/runtime/MongoOperationsTest.java\n\n@@ -95,23 +100,24 @@ class MongoOperationsTest {\n         query = MongoOperations.bindFilter(Object.class, \"{'field': ?1, 'isOk': ?2}\", new Object[] { \"a value\", true });\n         assertEquals(\"{'field': 'a value', 'isOk': true}\", query);\n \n-        //queries related to $in operator\n+        //queries related to '$in' operator\n         List<Object> list = Arrays.asList(\"f1\", \"f2\");\n-        query = MongoOperations.bindFilter(DemoObj.class, \"{ field: { $in: [?1] } }\", new Object[] { list });\n-        assertEquals(\"{ field: { $in: ['f1', 'f2'] } }\", query);\n+        query = MongoOperations.bindFilter(DemoObj.class, \"{ field: { '$in': [?1] } }\", new Object[] { list });\n+        assertEquals(\"{ field: { '$in': ['f1', 'f2'] } }\", query);\n \n-        query = MongoOperations.bindFilter(DemoObj.class, \"{ field: { $in: [?1] }, isOk: ?2 }\", new Object[] { list, true });\n-        assertEquals(\"{ field: { $in: ['f1', 'f2'] }, isOk: true }\", query);\n+        query = MongoOperations.bindFilter(DemoObj.class, \"{ field: { '$in': [?1] }, isOk: ?2 }\", new Object[] { list, true });\n+        assertEquals(\"{ field: { '$in': ['f1', 'f2'] }, isOk: true }\", query);\n \n         query = MongoOperations.bindFilter(DemoObj.class,\n-                \"{ field: { $in: [?1] }, $or: [ {'property': ?2}, {'property': ?3} ] }\",\n+                \"{ field: { '$in': [?1] }, $or: [ {'property': ?2}, {'property': ?3} ] }\",\n                 new Object[] { list, \"jpg\", \"gif\" });\n-        assertEquals(\"{ field: { $in: ['f1', 'f2'] }, $or: [ {'property': 'jpg'}, {'property': 'gif'} ] }\", query);\n+        assertEquals(\"{ field: { '$in': ['f1', 'f2'] }, $or: [ {'property': 'jpg'}, {'property': 'gif'} ] }\", query);\n \n         query = MongoOperations.bindFilter(DemoObj.class,\n-                \"{ field: { $in: [?1] }, isOk: ?2, $or: [ {'property': ?3}, {'property': ?4} ] }\",\n+                \"{ field: { '$in': [?1] }, isOk: ?2, $or: [ {'property': ?3}, {'property': ?4} ] }\",\n                 new Object[] { list, true, \"jpg\", \"gif\" });\n-        assertEquals(\"{ field: { $in: ['f1', 'f2'] }, isOk: true, $or: [ {'property': 'jpg'}, {'property': 'gif'} ] }\", query);\n+        assertEquals(\"{ field: { '$in': ['f1', 'f2'] }, isOk: true, $or: [ {'property': 'jpg'}, {'property': 'gif'} ] }\",\n+                query);\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ1MjU5OA==", "url": "https://github.com/quarkusio/quarkus/pull/9268#discussion_r424452598", "bodyText": "Don't commit commented code.\nRemove it or uncomment it.", "author": "loicmathieu", "createdAt": "2020-05-13T13:49:21Z", "path": "extensions/panache/mongodb-panache/runtime/src/test/java/io/quarkus/mongodb/panache/runtime/MongoOperationsTest.java", "diffHunk": "@@ -273,4 +352,43 @@ public void testBindUpdate() {\n                 Parameters.with(\"field\", \"a value\").map());\n         assertEquals(\"{'$set':{'field':'a value'}}\", update);\n     }\n+\n+    //    @Test\n+    //    public void testBuildNativeQueryWithInOperator() {\n+    //        List<Object> list = Arrays.asList(\"id1\", \"id2\");\n+    //        String query = MongoOperations.bindFilter(DemoObj.class, \"{ id: { $in: [?1] } }\", new Object[]{list});\n+    //        assertEquals(\"{ id: { $in: ['id1', 'id2'] } }\", query);\n+    //    }\n+    //\n+    //    @Test\n+    //    public void testBuildNativeWithInPlusAndOperators() {\n+    //        List<Object> list = Arrays.asList(\"id1\", \"id2\");\n+    //        String query = MongoOperations.bindQuery(DemoObj.class, \"{ id: { $in: [?1] }, isOk: ?2 }\", new Object[]{list, true});\n+    //        assertEquals(\"{ id: { $in: ['id1', 'id2'] }, isOk: true }\", query);\n+    //    }\n+    //\n+    //    @Test\n+    //    public void testBuildNativeWithInPlusOrOperators() {\n+    //        List<Object> list = Arrays.asList(\"id1\", \"id2\");\n+    //        String query = MongoOperations.bindQuery(DemoObj.class,\n+    //                \"{ id: { $in: [?1] }, $or: [ {'property': ?2}, {'property': ?3} ] }\",\n+    //                new Object[]{list, \"jpg\", \"gif\"});\n+    //        assertEquals(\"{ id: { $in: ['id1', 'id2'] }, $or: [ {'property': 'jpg'}, {'property': 'gif'} ] }\", query);\n+    //    }\n+    //\n+    //    @Test\n+    //    public void testBuildNativeWithInPlusAndPlusOrOperators() {\n+    //        List<Object> list = Arrays.asList(\"id1\", \"id2\");\n+    //        String query = MongoOperations.bindQuery(DemoObj.class,\n+    //                \"{ _id: { $in: [?1] }, isOk: ?2, $or: [ {'property': ?3}, {'property': ?4} ] }\",\n+    //                new Object[]{list, true, \"jpg\", \"gif\"});\n+    //        assertEquals(\"{ _id: { $in: ['id1', 'id2'] }, isOk: true, $or: [ {'property': 'jpg'}, {'property': 'gif'} ] }\", query);\n+    //    }\n+    //\n+    //    @Test\n+    //    public void testBuildQueryWithInOperator() {\n+    //        List<Object> list = Arrays.asList(\"id1\", \"id2\");\n+    //        String query = MongoOperations.bindQuery(DemoObj.class, \"id in ?1\", new Object[]{list});\n+    //        assertEquals(\"{ id: { $in: ['id1', 'id2'] } }\", query);\n+    //    }", "originalCommit": "474b83f59228af2a416db0b0ba29eb0f61a8abc0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUwNDE1MA==", "url": "https://github.com/quarkusio/quarkus/pull/9268#discussion_r424504150", "bodyText": "Sorry man, I hate comments in the code also.", "author": "diogocarleto", "createdAt": "2020-05-13T14:55:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ1MjU5OA=="}], "type": "inlineReview", "revised_code": {"commit": "5f030833e71615fcd8c36f08155521a84bf226e1", "chunk": "diff --git a/extensions/panache/mongodb-panache/runtime/src/test/java/io/quarkus/mongodb/panache/runtime/MongoOperationsTest.java b/extensions/panache/mongodb-panache/runtime/src/test/java/io/quarkus/mongodb/panache/runtime/MongoOperationsTest.java\nindex 50aca73a93..0fac5fcceb 100644\n--- a/extensions/panache/mongodb-panache/runtime/src/test/java/io/quarkus/mongodb/panache/runtime/MongoOperationsTest.java\n+++ b/extensions/panache/mongodb-panache/runtime/src/test/java/io/quarkus/mongodb/panache/runtime/MongoOperationsTest.java\n\n@@ -352,43 +359,4 @@ class MongoOperationsTest {\n                 Parameters.with(\"field\", \"a value\").map());\n         assertEquals(\"{'$set':{'field':'a value'}}\", update);\n     }\n-\n-    //    @Test\n-    //    public void testBuildNativeQueryWithInOperator() {\n-    //        List<Object> list = Arrays.asList(\"id1\", \"id2\");\n-    //        String query = MongoOperations.bindFilter(DemoObj.class, \"{ id: { $in: [?1] } }\", new Object[]{list});\n-    //        assertEquals(\"{ id: { $in: ['id1', 'id2'] } }\", query);\n-    //    }\n-    //\n-    //    @Test\n-    //    public void testBuildNativeWithInPlusAndOperators() {\n-    //        List<Object> list = Arrays.asList(\"id1\", \"id2\");\n-    //        String query = MongoOperations.bindQuery(DemoObj.class, \"{ id: { $in: [?1] }, isOk: ?2 }\", new Object[]{list, true});\n-    //        assertEquals(\"{ id: { $in: ['id1', 'id2'] }, isOk: true }\", query);\n-    //    }\n-    //\n-    //    @Test\n-    //    public void testBuildNativeWithInPlusOrOperators() {\n-    //        List<Object> list = Arrays.asList(\"id1\", \"id2\");\n-    //        String query = MongoOperations.bindQuery(DemoObj.class,\n-    //                \"{ id: { $in: [?1] }, $or: [ {'property': ?2}, {'property': ?3} ] }\",\n-    //                new Object[]{list, \"jpg\", \"gif\"});\n-    //        assertEquals(\"{ id: { $in: ['id1', 'id2'] }, $or: [ {'property': 'jpg'}, {'property': 'gif'} ] }\", query);\n-    //    }\n-    //\n-    //    @Test\n-    //    public void testBuildNativeWithInPlusAndPlusOrOperators() {\n-    //        List<Object> list = Arrays.asList(\"id1\", \"id2\");\n-    //        String query = MongoOperations.bindQuery(DemoObj.class,\n-    //                \"{ _id: { $in: [?1] }, isOk: ?2, $or: [ {'property': ?3}, {'property': ?4} ] }\",\n-    //                new Object[]{list, true, \"jpg\", \"gif\"});\n-    //        assertEquals(\"{ _id: { $in: ['id1', 'id2'] }, isOk: true, $or: [ {'property': 'jpg'}, {'property': 'gif'} ] }\", query);\n-    //    }\n-    //\n-    //    @Test\n-    //    public void testBuildQueryWithInOperator() {\n-    //        List<Object> list = Arrays.asList(\"id1\", \"id2\");\n-    //        String query = MongoOperations.bindQuery(DemoObj.class, \"id in ?1\", new Object[]{list});\n-    //        assertEquals(\"{ id: { $in: ['id1', 'id2'] } }\", query);\n-    //    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ1MzEwNg==", "url": "https://github.com/quarkusio/quarkus/pull/9268#discussion_r424453106", "bodyText": "Wildcard imports are prohibited", "author": "loicmathieu", "createdAt": "2020-05-13T13:49:54Z", "path": "extensions/panache/mongodb-panache/runtime/src/test/java/io/quarkus/mongodb/panache/runtime/MongoOperationsTest.java", "diffHunk": "@@ -6,10 +6,7 @@\n import java.time.LocalDateTime;\n import java.time.ZoneId;\n import java.time.ZoneOffset;\n-import java.util.Collections;\n-import java.util.Date;\n-import java.util.HashMap;\n-import java.util.Map;\n+import java.util.*;", "originalCommit": "474b83f59228af2a416db0b0ba29eb0f61a8abc0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUwNDI1Nw==", "url": "https://github.com/quarkusio/quarkus/pull/9268#discussion_r424504257", "bodyText": "done.", "author": "diogocarleto", "createdAt": "2020-05-13T14:56:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ1MzEwNg=="}], "type": "inlineReview", "revised_code": {"commit": "5f030833e71615fcd8c36f08155521a84bf226e1", "chunk": "diff --git a/extensions/panache/mongodb-panache/runtime/src/test/java/io/quarkus/mongodb/panache/runtime/MongoOperationsTest.java b/extensions/panache/mongodb-panache/runtime/src/test/java/io/quarkus/mongodb/panache/runtime/MongoOperationsTest.java\nindex 50aca73a93..0fac5fcceb 100644\n--- a/extensions/panache/mongodb-panache/runtime/src/test/java/io/quarkus/mongodb/panache/runtime/MongoOperationsTest.java\n+++ b/extensions/panache/mongodb-panache/runtime/src/test/java/io/quarkus/mongodb/panache/runtime/MongoOperationsTest.java\n\n@@ -6,7 +6,12 @@ import java.time.LocalDate;\n import java.time.LocalDateTime;\n import java.time.ZoneId;\n import java.time.ZoneOffset;\n-import java.util.*;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n \n import org.bson.codecs.pojo.annotations.BsonProperty;\n import org.junit.jupiter.api.BeforeAll;\n"}}, {"oid": "5f030833e71615fcd8c36f08155521a84bf226e1", "url": "https://github.com/quarkusio/quarkus/commit/5f030833e71615fcd8c36f08155521a84bf226e1", "message": "adding support to $in operator.", "committedDate": "2020-05-15T08:54:52Z", "type": "commit"}, {"oid": "5f030833e71615fcd8c36f08155521a84bf226e1", "url": "https://github.com/quarkusio/quarkus/commit/5f030833e71615fcd8c36f08155521a84bf226e1", "message": "adding support to $in operator.", "committedDate": "2020-05-15T08:54:52Z", "type": "forcePushed"}]}