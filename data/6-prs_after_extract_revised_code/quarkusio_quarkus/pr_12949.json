{"pr_number": 12949, "pr_title": "Allow to define part of the Hibernate ORM config at runtime", "pr_createdAt": "2020-10-26T13:36:59Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/12949", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk5NTk5Ng==", "url": "https://github.com/quarkusio/quarkus/pull/12949#discussion_r511995996", "bodyText": "I'd love to understand the need for this better. Could you elaborate, and maybe evolve the comments for future reference?", "author": "Sanne", "createdAt": "2020-10-26T14:20:25Z", "path": "extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/StaticInitHibernatePersistenceProviderResolver.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package io.quarkus.hibernate.orm.runtime;\n+\n+import java.util.List;\n+\n+import javax.persistence.spi.PersistenceProvider;\n+import javax.persistence.spi.PersistenceProviderResolver;\n+\n+/**\n+ * During the static init phase, we don't access the PersistenceProviderResolver.\n+ */\n+final class StaticInitHibernatePersistenceProviderResolver implements PersistenceProviderResolver {", "originalCommit": "8263258c972c9e118658a03427065c50b77ed76d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk5ODU1Mw==", "url": "https://github.com/quarkusio/quarkus/pull/12949#discussion_r511998553", "bodyText": "This is something we shouldn't access during the static init phase as it's only used when creating the entity manager factory.\nThus, to be extra sure we don't access it, I decided to make it extra safe by throwing exceptions.\nWe now define the PersistenceProviderResolver twice: once at the beginning of the static init phase with this one, which shouldn't be used and the second time at the beginning of the runtime phase where we also push the runtime properties.\nBTW, it was more or less done this way before i.e. I haven't changed anything really, just made it clearer. Mostly because I now need to push the runtime properties in the constructor. I could have define a setter and rely on the order of operations but I prefer having things immutable and fully constructed.", "author": "gsmet", "createdAt": "2020-10-26T14:23:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk5NTk5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "ca4c90dc54d163567b17592ba0dd5b2330c070b6", "chunk": "diff --git a/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/StaticInitHibernatePersistenceProviderResolver.java b/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/StaticInitHibernatePersistenceProviderResolver.java\ndeleted file mode 100644\nindex 0a584f45d1..0000000000\n--- a/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/StaticInitHibernatePersistenceProviderResolver.java\n+++ /dev/null\n\n@@ -1,23 +0,0 @@\n-package io.quarkus.hibernate.orm.runtime;\n-\n-import java.util.List;\n-\n-import javax.persistence.spi.PersistenceProvider;\n-import javax.persistence.spi.PersistenceProviderResolver;\n-\n-/**\n- * During the static init phase, we don't access the PersistenceProviderResolver.\n- */\n-final class StaticInitHibernatePersistenceProviderResolver implements PersistenceProviderResolver {\n-\n-    @Override\n-    public List<PersistenceProvider> getPersistenceProviders() {\n-        throw new IllegalStateException(\"Persistence providers are not available during the static init phase.\");\n-    }\n-\n-    @Override\n-    public void clearCachedProviders() {\n-        throw new IllegalStateException(\"Persistence providers are not available during the static init phase.\");\n-    }\n-\n-}\n"}}, {"oid": "ca4c90dc54d163567b17592ba0dd5b2330c070b6", "url": "https://github.com/quarkusio/quarkus/commit/ca4c90dc54d163567b17592ba0dd5b2330c070b6", "message": "Provide better DCE information when Agroal is not around\n\nWhen Agroal is not around, we should never delegate to the JDBC-based\nPersistenceProvider as things will fail, given we don't have a JDBC\ndatasource around.\n\nObviously, the test we introduce is not sufficient as having Agroal\naround is not enough to have a proper Hibernate ORM setup but that's the\nbest we can do and should be sufficient in most cases.", "committedDate": "2020-10-27T14:08:19Z", "type": "commit"}, {"oid": "c6079e1bb31fa7b7fcfa7a798fb1c6c2314a987f", "url": "https://github.com/quarkusio/quarkus/commit/c6079e1bb31fa7b7fcfa7a798fb1c6c2314a987f", "message": "Allow to define part of the Hibernate ORM config at runtime", "committedDate": "2020-10-27T14:08:19Z", "type": "commit"}, {"oid": "57a3de9a22fdcacc190e542a9433c12ae5c6c537", "url": "https://github.com/quarkusio/quarkus/commit/57a3de9a22fdcacc190e542a9433c12ae5c6c537", "message": "Fix datasource configuration property", "committedDate": "2020-10-27T14:08:19Z", "type": "commit"}, {"oid": "88afebc7157b13f9dd5ce65d67c60e7cb693222a", "url": "https://github.com/quarkusio/quarkus/commit/88afebc7157b13f9dd5ce65d67c60e7cb693222a", "message": "Add toString() for BuildTimeSettings and RuntimeSettings", "committedDate": "2020-10-27T14:08:19Z", "type": "commit"}, {"oid": "88afebc7157b13f9dd5ce65d67c60e7cb693222a", "url": "https://github.com/quarkusio/quarkus/commit/88afebc7157b13f9dd5ce65d67c60e7cb693222a", "message": "Add toString() for BuildTimeSettings and RuntimeSettings", "committedDate": "2020-10-27T14:08:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk5ODE5Mg==", "url": "https://github.com/quarkusio/quarkus/pull/12949#discussion_r512998192", "bodyText": "great idea to add this, I'm going to need it as well.", "author": "Sanne", "createdAt": "2020-10-27T20:09:12Z", "path": "extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/recording/RecordedState.java", "diffHunk": "@@ -79,4 +82,8 @@ public MultiTenancyStrategy getMultiTenancyStrategy() {\n     public boolean isReactive() {\n         return isReactive;\n     }\n+\n+    public boolean isFromPersistenceXml() {", "originalCommit": "88afebc7157b13f9dd5ce65d67c60e7cb693222a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAwMjQ4Mw==", "url": "https://github.com/quarkusio/quarkus/pull/12949#discussion_r513002483", "bodyText": "Very clever! I expected you'd have to bypass the JPA bootstrap, but this seems more effective.", "author": "Sanne", "createdAt": "2020-10-27T20:16:39Z", "path": "extensions/hibernate-reactive/runtime/src/main/java/io/quarkus/hibernate/reactive/runtime/FastBootHibernateReactivePersistenceProviderResolver.java", "diffHunk": "@@ -6,19 +6,24 @@\n import javax.persistence.spi.PersistenceProvider;\n import javax.persistence.spi.PersistenceProviderResolver;\n \n+import io.quarkus.hibernate.orm.runtime.HibernateOrmRuntimeConfig;\n+\n final class FastBootHibernateReactivePersistenceProviderResolver implements PersistenceProviderResolver {\n \n-    private static final List<PersistenceProvider> HARDCODED_PROVIDER_LIST = Collections\n-            .singletonList(new FastBootHibernateReactivePersistenceProvider());\n+    private final List<PersistenceProvider> persistenceProviders;\n+\n+    public FastBootHibernateReactivePersistenceProviderResolver(HibernateOrmRuntimeConfig hibernateOrmRuntimeConfig) {", "originalCommit": "88afebc7157b13f9dd5ce65d67c60e7cb693222a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}