{"pr_number": 6888, "pr_title": "ArC - support synthetic observer methods added at build time", "pr_createdAt": "2020-01-30T13:04:17Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/6888", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk3OTY2OA==", "url": "https://github.com/quarkusio/quarkus/pull/6888#discussion_r372979668", "bodyText": "Hmm if we want to have this unique, we could append object hash of the ObserverInfo object? Something like that instead of listing the params. Depends on whether we want to have it human-readable or unique :)", "author": "manovotn", "createdAt": "2020-01-30T14:28:16Z", "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/ObserverGenerator.java", "diffHunk": "@@ -72,35 +74,52 @@ public ObserverGenerator(AnnotationLiteralProcessor annotationLiterals, Predicat\n      * @return a collection of resources\n      */\n     Collection<Resource> generate(ObserverInfo observer, ReflectionRegistration reflectionRegistration) {\n-\n-        ClassInfo declaringClass = observer.getObserverMethod().declaringClass();\n-        String declaringClassBase;\n-        if (declaringClass.enclosingClass() != null) {\n-            declaringClassBase = DotNames.simpleName(declaringClass.enclosingClass()) + \"_\"\n-                    + DotNames.simpleName(declaringClass);\n+        // The name of the generated class differs:\n+        // \"org.acme.Foo_Observer_fooMethod_hash\" for normal observer where hash represents the signature of the observer method\n+        // \"org.acme.Registrar_Observer_Synthetic_hash\" for synthetic observer where hash represents the basic attrs of the observer\n+        String classBase;\n+        if (observer.isSynthetic()) {\n+            classBase = DotNames.simpleName(observer.getBeanClass());\n         } else {\n-            declaringClassBase = DotNames.simpleName(declaringClass);\n+            ClassInfo declaringClass = observer.getObserverMethod().declaringClass();\n+            if (declaringClass.enclosingClass() != null) {\n+                classBase = DotNames.simpleName(declaringClass.enclosingClass()) + UNDERSCORE\n+                        + DotNames.simpleName(declaringClass);\n+            } else {\n+                classBase = DotNames.simpleName(declaringClass);\n+            }\n         }\n \n         StringBuilder sigBuilder = new StringBuilder();\n-        sigBuilder.append(observer.getObserverMethod().name())\n-                .append(\"_\")\n-                .append(observer.getObserverMethod().returnType().name().toString());\n-        for (org.jboss.jandex.Type paramType : observer.getObserverMethod().parameters()) {\n-            sigBuilder.append(paramType.name().toString());\n+        if (observer.isSynthetic()) {\n+            // This is not unique but best effort", "originalCommit": "3149619933abc3d11fb8b0219a0b7f58abdc48e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk5MTA3Mw==", "url": "https://github.com/quarkusio/quarkus/pull/6888#discussion_r372991073", "bodyText": "Ah, sorry. It should be unique and it should not contain any random element so that it only changes if you change the source. I'm not sure it's 100% needed but use a similar strategy for bean classes where it's definitely needed.", "author": "mkouba", "createdAt": "2020-01-30T14:47:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk3OTY2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk5MjgzOQ==", "url": "https://github.com/quarkusio/quarkus/pull/6888#discussion_r372992839", "bodyText": "Oh, I see what you mean.\nI recall we had one issue where synthetic bean re-generated in between tests was already loaded in the CL in its own version. So I suppose this is going to be the same, right?\nIt was a rare case but I don't think we anyhow solved that (e.g. made it unique on a per-build basis).", "author": "manovotn", "createdAt": "2020-01-30T14:50:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk3OTY2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk5MzE3Ng==", "url": "https://github.com/quarkusio/quarkus/pull/6888#discussion_r372993176", "bodyText": "BTW it might be worth adding something along those lines to the javadoc (of both, observer and bean).", "author": "manovotn", "createdAt": "2020-01-30T14:50:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk3OTY2OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk4MDI3Ng==", "url": "https://github.com/quarkusio/quarkus/pull/6888#discussion_r372980276", "bodyText": "I am thinking this might deserve an ObserverRegistrar instead of merging it into BeanRegistrar.", "author": "manovotn", "createdAt": "2020-01-30T14:29:17Z", "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanRegistrar.java", "diffHunk": "@@ -34,6 +35,14 @@\n             return configure(DotName.createSimple(beanClass.getName()));\n         }\n \n+        /**\n+         * The synthetic observer is not added to the deployment unless the {@link ObserverConfigurator#done()} method is\n+         * called.\n+         * \n+         * @return a new synthetic observer configurator\n+         */\n+        ObserverConfigurator configureObserver();", "originalCommit": "3149619933abc3d11fb8b0219a0b7f58abdc48e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk5Mzg5OQ==", "url": "https://github.com/quarkusio/quarkus/pull/6888#discussion_r372993899", "bodyText": "Well, it would be more correct and so but in fact, I'd rather rename the BeanRegistrar to ComponentRegistrar... but this would require some compatibility tweaks.", "author": "mkouba", "createdAt": "2020-01-30T14:51:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk4MDI3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "84ee1ff3c977a1e5c135765fc9d62574e5f659f7", "chunk": "diff --git a/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanRegistrar.java b/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanRegistrar.java\nindex fd6c5e3336..03c0ad2366 100644\n--- a/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanRegistrar.java\n+++ b/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanRegistrar.java\n\n@@ -35,14 +37,6 @@ public interface BeanRegistrar extends BuildExtension {\n             return configure(DotName.createSimple(beanClass.getName()));\n         }\n \n-        /**\n-         * The synthetic observer is not added to the deployment unless the {@link ObserverConfigurator#done()} method is\n-         * called.\n-         * \n-         * @return a new synthetic observer configurator\n-         */\n-        ObserverConfigurator configureObserver();\n-\n         /**\n          * The returned stream contains all non-synthetic beans (beans derived from classes) and beans\n          * registered by other {@link BeanRegistrar}s before the stream is created.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk4MTU2OA==", "url": "https://github.com/quarkusio/quarkus/pull/6888#discussion_r372981568", "bodyText": "observer method? ;-)", "author": "manovotn", "createdAt": "2020-01-30T14:31:27Z", "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/ObserverInfo.java", "diffHunk": "@@ -75,16 +88,18 @@ static ObserverInfo create(BeanInfo declaringBean, MethodInfo observerMethod, In\n \n         if (!transactionPhase.equals(TransactionPhase.IN_PROGRESS) && !jtaCapabilities) {\n             final ClassInfo clazz = observerMethod.declaringClass();\n-            LOGGER.warnf(\"The method %s#%s makes use of '%s' transactional observers but no \" +\n+            LOGGER.warnf(\"The observer %s#%s makes use of '%s' transactional observers but no \" +", "originalCommit": "3149619933abc3d11fb8b0219a0b7f58abdc48e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk5NTAxMQ==", "url": "https://github.com/quarkusio/quarkus/pull/6888#discussion_r372995011", "bodyText": "Good catch! This could even fail with NPE!", "author": "mkouba", "createdAt": "2020-01-30T14:53:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk4MTU2OA=="}], "type": "inlineReview", "revised_code": {"commit": "bca848875ba5a57b2fef87ff64f29044127b587a", "chunk": "diff --git a/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/ObserverInfo.java b/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/ObserverInfo.java\nindex 64332b73b4..7dfcec10f5 100644\n--- a/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/ObserverInfo.java\n+++ b/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/ObserverInfo.java\n\n@@ -87,10 +92,15 @@ public class ObserverInfo implements InjectionTargetInfo {\n         }\n \n         if (!transactionPhase.equals(TransactionPhase.IN_PROGRESS) && !jtaCapabilities) {\n-            final ClassInfo clazz = observerMethod.declaringClass();\n+            String info;\n+            if (observerMethod != null) {\n+                info = String.format(\"method %s.%s()\", observerMethod.declaringClass().name(),\n+                        observerMethod.name());\n+            } else {\n+                info = beanClass.toString();\n+            }\n             LOGGER.warnf(\"The observer %s#%s makes use of '%s' transactional observers but no \" +\n-                    \"JTA capabilities were detected.\", clazz,\n-                    observerMethod.name(), transactionPhase);\n+                    \"JTA capabilities were detected.\", info, transactionPhase);\n         }\n         return new ObserverInfo(beanDeployment, beanClass, declaringBean, observerMethod, injection, eventParameter, isAsync,\n                 priority,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk4NDI1Mg==", "url": "https://github.com/quarkusio/quarkus/pull/6888#discussion_r372984252", "bodyText": "This will be user facing API, can we have some more verbose javadoc please?", "author": "manovotn", "createdAt": "2020-01-30T14:35:58Z", "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/QualifierConfigurator.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package io.quarkus.arc.processor;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Array;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Consumer;\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.AnnotationValue;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.Type;\n+import org.jboss.jandex.Type.Kind;\n+\n+/**\n+ * This construct is not thread-safe.", "originalCommit": "3149619933abc3d11fb8b0219a0b7f58abdc48e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk5NTU5MA==", "url": "https://github.com/quarkusio/quarkus/pull/6888#discussion_r372995590", "bodyText": "I can try to...", "author": "mkouba", "createdAt": "2020-01-30T14:54:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk4NDI1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzAwNTc4MA==", "url": "https://github.com/quarkusio/quarkus/pull/6888#discussion_r373005780", "bodyText": "@mkouba You know the drill - lorem ipsum ... :-D", "author": "manovotn", "createdAt": "2020-01-30T15:10:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk4NDI1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "bca848875ba5a57b2fef87ff64f29044127b587a", "chunk": "diff --git a/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/QualifierConfigurator.java b/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/QualifierConfigurator.java\nindex db8accb784..ecf7e32137 100644\n--- a/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/QualifierConfigurator.java\n+++ b/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/QualifierConfigurator.java\n\n@@ -12,9 +12,13 @@ import org.jboss.jandex.Type;\n import org.jboss.jandex.Type.Kind;\n \n /**\n+ * Use this configurator to construct an {@link AnnotationInstance} that represents a CDI qualifier.\n+ * <p>\n  * This construct is not thread-safe.\n  * \n  * @param <C>\n+ * @see BeanConfigurator\n+ * @see ObserverConfigurator\n  */\n public final class QualifierConfigurator<C extends Consumer<AnnotationInstance>> {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxMzkxMw==", "url": "https://github.com/quarkusio/quarkus/pull/6888#discussion_r373213913", "bodyText": "Smaller class names mean smaller JARs \ud83d\ude09 Maybe use the abbreviation Syn?", "author": "gastaldi", "createdAt": "2020-01-30T21:53:52Z", "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/AbstractGenerator.java", "diffHunk": "@@ -10,6 +10,8 @@\n abstract class AbstractGenerator {\n \n     static final String DEFAULT_PACKAGE = Arc.class.getPackage().getName() + \".generator\";\n+    static final String UNDERSCORE = \"_\";\n+    static final String SYNTHETIC_SUFFIX = \"Synthetic\";", "originalCommit": "ec0877ca9a10df6951a6997a1cace665aaad265c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM0NDkxOA==", "url": "https://github.com/quarkusio/quarkus/pull/6888#discussion_r373344918", "bodyText": "Well, this is what I call a premature optimization \ud83d\ude04. No seriously the readability is IMHO much more important in this case.", "author": "mkouba", "createdAt": "2020-01-31T07:24:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxMzkxMw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "594af7986678e13d1c516a36a86825886e29976f", "url": "https://github.com/quarkusio/quarkus/commit/594af7986678e13d1c516a36a86825886e29976f", "message": "ArC - support synthetic observer methods added at build time\n\n- resolves #6879", "committedDate": "2020-01-31T09:38:21Z", "type": "commit"}, {"oid": "429c4e9a9e1d567f2537f164bf6a441c13554cb0", "url": "https://github.com/quarkusio/quarkus/commit/429c4e9a9e1d567f2537f164bf6a441c13554cb0", "message": "Add SyntheticObserverTest\n\n- also rename io.quarkus.arc.test.build.extension to\nio.quarkus.arc.test.buildextension to avoid problems with the global\ngitignore file", "committedDate": "2020-01-31T09:38:21Z", "type": "commit"}, {"oid": "bca848875ba5a57b2fef87ff64f29044127b587a", "url": "https://github.com/quarkusio/quarkus/commit/bca848875ba5a57b2fef87ff64f29044127b587a", "message": "Fix possible NPEs in ObserverInfo, add javadoc to QualifierConfigurator", "committedDate": "2020-01-31T09:38:21Z", "type": "commit"}, {"oid": "84ee1ff3c977a1e5c135765fc9d62574e5f659f7", "url": "https://github.com/quarkusio/quarkus/commit/84ee1ff3c977a1e5c135765fc9d62574e5f659f7", "message": "ObserverRegistrar - a dedicated extension point for synthetic observers", "committedDate": "2020-01-31T10:29:59Z", "type": "commit"}, {"oid": "84ee1ff3c977a1e5c135765fc9d62574e5f659f7", "url": "https://github.com/quarkusio/quarkus/commit/84ee1ff3c977a1e5c135765fc9d62574e5f659f7", "message": "ObserverRegistrar - a dedicated extension point for synthetic observers", "committedDate": "2020-01-31T10:29:59Z", "type": "forcePushed"}]}