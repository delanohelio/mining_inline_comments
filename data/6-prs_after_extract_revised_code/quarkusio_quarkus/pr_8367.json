{"pr_number": 8367, "pr_title": "Add support for async functions in funqy-knative", "pr_createdAt": "2020-04-02T20:43:31Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/8367", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYxOTU0Mw==", "url": "https://github.com/quarkusio/quarkus/pull/8367#discussion_r402619543", "bodyText": "Create a separate test for CompletionStage please, don't replace the old one.", "author": "patriot1burke", "createdAt": "2020-04-02T21:57:31Z", "path": "extensions/funqy/funqy-knative/deployment/src/test/java/io/quarkus/funqy/test/GreetingFunctions.java", "diffHunk": "@@ -9,12 +12,12 @@\n     GreetingService service;\n \n     @Funq\n-    public Greeting greet(Identity name) {\n+    public CompletionStage greet(Identity name) {", "originalCommit": "9d56ec791cf7eacee8aaef0a59fcc33e1d513be8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f8ac3617652bfe80d877194ea61853dedf35e07", "chunk": "diff --git a/extensions/funqy/funqy-knative/deployment/src/test/java/io/quarkus/funqy/test/GreetingFunctions.java b/extensions/funqy/funqy-knative/deployment/src/test/java/io/quarkus/funqy/test/GreetingFunctions.java\nindex 36c16971a7..4d725d4887 100644\n--- a/extensions/funqy/funqy-knative/deployment/src/test/java/io/quarkus/funqy/test/GreetingFunctions.java\n+++ b/extensions/funqy/funqy-knative/deployment/src/test/java/io/quarkus/funqy/test/GreetingFunctions.java\n\n@@ -12,12 +15,39 @@ public class GreetingFunctions {\n     GreetingService service;\n \n     @Funq\n-    public CompletionStage greet(Identity name) {\n+    public Greeting greet(Identity name) {\n+        if (name == null) {\n+            throw new IllegalArgumentException(\"Identity cannot be null.\");\n+        }\n         String message = service.hello(name.getName());\n         Greeting greeting = new Greeting();\n         greeting.setMessage(message);\n         greeting.setName(name.getName());\n-        return CompletableFuture.completedFuture(greeting);\n+        return greeting;\n+    }\n+\n+    @Funq\n+    public CompletionStage<Greeting> greetAsync(Identity name) {\n+        CompletableFuture<Greeting> result = new CompletableFuture<>();\n+        if (name == null) {\n+            result.completeExceptionally(new IllegalArgumentException(\"Identity cannot be null.\"));\n+            return result;\n+        }\n+\n+        Timer timer = new Timer();\n+        timer.schedule(new TimerTask() {\n+            @Override\n+            public void run() {\n+                String message = service.hello(name.getName());\n+                Greeting greeting = new Greeting();\n+                greeting.setMessage(message);\n+                greeting.setName(name.getName());\n+                result.complete(greeting);\n+                timer.cancel();\n+            }\n+        }, Duration.ofMillis(1).toMillis());\n+\n+        return result;\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYyMjc3NQ==", "url": "https://github.com/quarkusio/quarkus/pull/8367#discussion_r402622775", "bodyText": "I think we need to require that the CompletionStage generic type be filled in.  Jackson Readers and Writers are initialized at static initialization time to speed up boot time for native.  I don't want to support dynamic marshalling of types.\nThe deployment code (@buildstep) should check that if it is a CompletionStage that the generic type is filled in.  Otherwise it should warn and abort the build.", "author": "patriot1burke", "createdAt": "2020-04-02T22:04:53Z", "path": "extensions/funqy/funqy-server-common/runtime/src/main/java/io/quarkus/funqy/runtime/FunctionInvoker.java", "diffHunk": "@@ -36,8 +37,19 @@ public FunctionInvoker(String name, Class targetClass, Method method) {\n             }\n         }\n         constructor = new FunctionConstructor(targetClass);\n-        if (method.getReturnType() != null) {\n-            outputType = method.getReturnType();\n+        Class rt = method.getReturnType();\n+        if (rt != null) {\n+            if (CompletionStage.class.isAssignableFrom(rt)) {\n+                try {\n+                    Type type = ((ParameterizedType) method.getGenericReturnType()).getActualTypeArguments()[0];\n+                    outputType = (Class) type;\n+                } catch (Exception ex) {\n+                    outputType = Object.class;", "originalCommit": "9d56ec791cf7eacee8aaef0a59fcc33e1d513be8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f8ac3617652bfe80d877194ea61853dedf35e07", "chunk": "diff --git a/extensions/funqy/funqy-server-common/runtime/src/main/java/io/quarkus/funqy/runtime/FunctionInvoker.java b/extensions/funqy/funqy-server-common/runtime/src/main/java/io/quarkus/funqy/runtime/FunctionInvoker.java\nindex 091cd8c91e..00f411c91c 100644\n--- a/extensions/funqy/funqy-server-common/runtime/src/main/java/io/quarkus/funqy/runtime/FunctionInvoker.java\n+++ b/extensions/funqy/funqy-server-common/runtime/src/main/java/io/quarkus/funqy/runtime/FunctionInvoker.java\n\n@@ -37,18 +38,24 @@ public class FunctionInvoker {\n             }\n         }\n         constructor = new FunctionConstructor(targetClass);\n-        Class rt = method.getReturnType();\n-        if (rt != null) {\n-            if (CompletionStage.class.isAssignableFrom(rt)) {\n-                try {\n-                    Type type = ((ParameterizedType) method.getGenericReturnType()).getActualTypeArguments()[0];\n-                    outputType = (Class) type;\n-                } catch (Exception ex) {\n-                    outputType = Object.class;\n-                }\n+        Class<?> returnType = method.getReturnType();\n+        if (returnType != null) {\n+            if (CompletionStage.class.isAssignableFrom(returnType)) {\n+                outputType = null;\n                 isAsync = true;\n+                Type genericReturnType = method.getGenericReturnType();\n+                if (genericReturnType instanceof ParameterizedType) {\n+                    Type[] actualParams = ((ParameterizedType) genericReturnType).getActualTypeArguments();\n+                    if (actualParams.length == 1 && actualParams[0] instanceof Class<?>) {\n+                        outputType = (Class<?>) actualParams[0];\n+                    }\n+                }\n+                if (outputType == null) {\n+                    throw new IllegalArgumentException(\n+                            \"CompletionStage must be used with type parameter (e.g. CompletionStage<String>).\");\n+                }\n             } else {\n-                outputType = rt;\n+                outputType = returnType;\n             }\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ2MjQ2OA==", "url": "https://github.com/quarkusio/quarkus/pull/8367#discussion_r404462468", "bodyText": "Do not delete the old synchronous function.  Write a new test for CompletionStage<> return value.  Also, please duplicate the separate CompletionStage test in Lambda and HTTP.", "author": "patriot1burke", "createdAt": "2020-04-07T00:12:18Z", "path": "extensions/funqy/funqy-knative/deployment/src/test/java/io/quarkus/funqy/test/GreetingFunctions.java", "diffHunk": "@@ -9,12 +15,25 @@\n     GreetingService service;\n \n     @Funq\n-    public Greeting greet(Identity name) {\n-        String message = service.hello(name.getName());\n-        Greeting greeting = new Greeting();\n-        greeting.setMessage(message);\n-        greeting.setName(name.getName());\n-        return greeting;\n+    public CompletionStage<Greeting> greet(Identity name) {", "originalCommit": "719221dfab7e149f04fe3850389ca000ae1642f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f8ac3617652bfe80d877194ea61853dedf35e07", "chunk": "diff --git a/extensions/funqy/funqy-knative/deployment/src/test/java/io/quarkus/funqy/test/GreetingFunctions.java b/extensions/funqy/funqy-knative/deployment/src/test/java/io/quarkus/funqy/test/GreetingFunctions.java\nindex 47c7016e81..4d725d4887 100644\n--- a/extensions/funqy/funqy-knative/deployment/src/test/java/io/quarkus/funqy/test/GreetingFunctions.java\n+++ b/extensions/funqy/funqy-knative/deployment/src/test/java/io/quarkus/funqy/test/GreetingFunctions.java\n\n@@ -15,14 +15,27 @@ public class GreetingFunctions {\n     GreetingService service;\n \n     @Funq\n-    public CompletionStage<Greeting> greet(Identity name) {\n+    public Greeting greet(Identity name) {\n+        if (name == null) {\n+            throw new IllegalArgumentException(\"Identity cannot be null.\");\n+        }\n+        String message = service.hello(name.getName());\n+        Greeting greeting = new Greeting();\n+        greeting.setMessage(message);\n+        greeting.setName(name.getName());\n+        return greeting;\n+    }\n+\n+    @Funq\n+    public CompletionStage<Greeting> greetAsync(Identity name) {\n         CompletableFuture<Greeting> result = new CompletableFuture<>();\n         if (name == null) {\n             result.completeExceptionally(new IllegalArgumentException(\"Identity cannot be null.\"));\n             return result;\n         }\n \n-        new Timer().schedule(new TimerTask() {\n+        Timer timer = new Timer();\n+        timer.schedule(new TimerTask() {\n             @Override\n             public void run() {\n                 String message = service.hello(name.getName());\n"}}, {"oid": "3f8ac3617652bfe80d877194ea61853dedf35e07", "url": "https://github.com/quarkusio/quarkus/commit/3f8ac3617652bfe80d877194ea61853dedf35e07", "message": "fixing build", "committedDate": "2020-04-08T00:42:29Z", "type": "forcePushed"}, {"oid": "68606165b35a859a3f7e3a70be0ff2c3281e7b21", "url": "https://github.com/quarkusio/quarkus/commit/68606165b35a859a3f7e3a70be0ff2c3281e7b21", "message": "added support for async functions in funqy\n\nuser functions now may return CompletionStage", "committedDate": "2020-04-08T15:48:28Z", "type": "commit"}, {"oid": "68606165b35a859a3f7e3a70be0ff2c3281e7b21", "url": "https://github.com/quarkusio/quarkus/commit/68606165b35a859a3f7e3a70be0ff2c3281e7b21", "message": "added support for async functions in funqy\n\nuser functions now may return CompletionStage", "committedDate": "2020-04-08T15:48:28Z", "type": "forcePushed"}, {"oid": "df9a9e8599f5462d73d0c7db23b4bd9f40fc3d99", "url": "https://github.com/quarkusio/quarkus/commit/df9a9e8599f5462d73d0c7db23b4bd9f40fc3d99", "message": "forking for funqy amazon lambda integration tests\n\nneeded due static initialization", "committedDate": "2020-04-08T18:56:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1MjY1MQ==", "url": "https://github.com/quarkusio/quarkus/pull/8367#discussion_r405052651", "bodyText": "This error check should be done in a deployment @buildstep so it pops up at build time.", "author": "patriot1burke", "createdAt": "2020-04-07T19:17:49Z", "path": "extensions/funqy/funqy-server-common/runtime/src/main/java/io/quarkus/funqy/runtime/FunctionInvoker.java", "diffHunk": "@@ -41,16 +41,19 @@ public FunctionInvoker(String name, Class<?> targetClass, Method method) {\n         Class<?> returnType = method.getReturnType();\n         if (returnType != null) {\n             if (CompletionStage.class.isAssignableFrom(returnType)) {\n-                outputType = Object.class;\n+                outputType = null;\n                 isAsync = true;\n-\n                 Type genericReturnType = method.getGenericReturnType();\n                 if (genericReturnType instanceof ParameterizedType) {\n                     Type[] actualParams = ((ParameterizedType) genericReturnType).getActualTypeArguments();\n                     if (actualParams.length == 1 && actualParams[0] instanceof Class<?>) {\n                         outputType = (Class<?>) actualParams[0];\n                     }\n                 }\n+                if (outputType == null) {", "originalCommit": "3b5bd98e440f5140cef67b7a4ff2e05b159cf93b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}