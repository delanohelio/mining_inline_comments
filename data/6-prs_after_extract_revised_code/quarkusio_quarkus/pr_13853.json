{"pr_number": 13853, "pr_title": "Implement Various Reactive fixes", "pr_createdAt": "2020-12-12T12:37:58Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/13853", "timeline": [{"oid": "09a676b1b5699bdd5c8b483db9f4fd02d8b0cfe5", "url": "https://github.com/quarkusio/quarkus/commit/09a676b1b5699bdd5c8b483db9f4fd02d8b0cfe5", "message": "Ensure that param converters for RR aren't under the 'java' package", "committedDate": "2020-12-12T12:52:42Z", "type": "forcePushed"}, {"oid": "26c51fe21bb8358f96f958dfb46463ecc047410a", "url": "https://github.com/quarkusio/quarkus/commit/26c51fe21bb8358f96f958dfb46463ecc047410a", "message": "Prevent multiple HTTP annotations on RESTEasy Reactive endpoints\n\nThe spec doesn't mandate this behavior, but it can lead to unexpected results,\nso let's not allow it", "committedDate": "2020-12-12T14:29:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwODcxOQ==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542508719", "bodyText": "This method signature is a mine field:\n\nType paramType\nParameterType type\nString elementType\nString signature\n\nAnd of course, we reverse the order of type\u2026signature to signature, type in the call below :(", "author": "FroMage", "createdAt": "2020-12-14T16:11:31Z", "path": "extensions/resteasy-reactive/quarkus-jaxrs-client/deployment/src/main/java/io/quarkus/resteasy/reactive/client/deployment/ClientEndpointIndexer.java", "diffHunk": "@@ -79,9 +79,9 @@ protected InjectableBean scanInjectableBean(ClassInfo currentClassInfo,\n \n     protected MethodParameter createMethodParameter(ClassInfo currentClassInfo, ClassInfo actualEndpointInfo, boolean encoded,\n             Type paramType, ClientIndexedParam parameterResult, String name, String defaultValue, ParameterType type,\n-            String elementType, boolean single) {\n+            String elementType, String signature, boolean single) {", "originalCommit": "9f13423f53f88f8ea13d22753499eb4e554bf5ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyOTY2Ng==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542529666", "bodyText": "Indeed... I'll move the signature String to at least make it less likely to fail", "author": "geoand", "createdAt": "2020-12-14T16:38:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwODcxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "df17291bcf49016557cdb21c072a54f376f41e4b", "chunk": "diff --git a/extensions/resteasy-reactive/quarkus-jaxrs-client/deployment/src/main/java/io/quarkus/resteasy/reactive/client/deployment/ClientEndpointIndexer.java b/extensions/resteasy-reactive/quarkus-jaxrs-client/deployment/src/main/java/io/quarkus/resteasy/reactive/client/deployment/ClientEndpointIndexer.java\nindex d2dfe20124..afdac00e53 100644\n--- a/extensions/resteasy-reactive/quarkus-jaxrs-client/deployment/src/main/java/io/quarkus/resteasy/reactive/client/deployment/ClientEndpointIndexer.java\n+++ b/extensions/resteasy-reactive/quarkus-jaxrs-client/deployment/src/main/java/io/quarkus/resteasy/reactive/client/deployment/ClientEndpointIndexer.java\n\n@@ -79,7 +79,7 @@ public class ClientEndpointIndexer\n \n     protected MethodParameter createMethodParameter(ClassInfo currentClassInfo, ClassInfo actualEndpointInfo, boolean encoded,\n             Type paramType, ClientIndexedParam parameterResult, String name, String defaultValue, ParameterType type,\n-            String elementType, String signature, boolean single) {\n+            String elementType, boolean single, String signature) {\n         return new MethodParameter(name,\n                 elementType, toClassName(paramType, currentClassInfo, actualEndpointInfo, index), signature, type, single,\n                 defaultValue, parameterResult.isObtainedAsCollection(), encoded);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUxMjE0NA==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542512144", "bodyText": "Pretty scary that the TCK doesn't test this.", "author": "FroMage", "createdAt": "2020-12-14T16:15:59Z", "path": "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/handlers/RequestDeserializeHandler.java", "diffHunk": "@@ -25,12 +26,15 @@\n     private static final Logger log = Logger.getLogger(RequestDeserializeHandler.class);\n \n     private final Class<?> type;\n+    private final Type genericType;\n     private final MediaType mediaType;\n     private final ServerSerialisers serialisers;\n     private final int parameterIndex;\n \n-    public RequestDeserializeHandler(Class<?> type, MediaType mediaType, ServerSerialisers serialisers, int parameterIndex) {\n+    public RequestDeserializeHandler(Class<?> type, Type genericType, MediaType mediaType, ServerSerialisers serialisers,", "originalCommit": "9f13423f53f88f8ea13d22753499eb4e554bf5ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyNDQxOQ==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542524419", "bodyText": "BTW, do we need a test for generic input types, or is this part of the next commits with List<String> request bodies?", "author": "FroMage", "createdAt": "2020-12-14T16:31:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUxMjE0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUzMDc2Ng==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542530766", "bodyText": "You mean something like List<T> for the input? If so, then we don't have such a test and we should add it.", "author": "geoand", "createdAt": "2020-12-14T16:39:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUxMjE0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUzNzczOA==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542537738", "bodyText": "Well, any generic type, really.", "author": "FroMage", "createdAt": "2020-12-14T16:48:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUxMjE0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU5MDg0MQ==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542590841", "bodyText": "Test added in the last commit", "author": "geoand", "createdAt": "2020-12-14T18:00:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUxMjE0NA=="}], "type": "inlineReview", "revised_code": {"commit": "97ebb21f2be821db7fc4754461c857075e8f6d7f", "chunk": "diff --git a/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/handlers/RequestDeserializeHandler.java b/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/handlers/RequestDeserializeHandler.java\nindex 75c06459e0..3195122816 100644\n--- a/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/handlers/RequestDeserializeHandler.java\n+++ b/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/handlers/RequestDeserializeHandler.java\n\n@@ -26,15 +25,12 @@ public class RequestDeserializeHandler implements ServerRestHandler {\n     private static final Logger log = Logger.getLogger(RequestDeserializeHandler.class);\n \n     private final Class<?> type;\n-    private final Type genericType;\n     private final MediaType mediaType;\n     private final ServerSerialisers serialisers;\n     private final int parameterIndex;\n \n-    public RequestDeserializeHandler(Class<?> type, Type genericType, MediaType mediaType, ServerSerialisers serialisers,\n-            int parameterIndex) {\n+    public RequestDeserializeHandler(Class<?> type, MediaType mediaType, ServerSerialisers serialisers, int parameterIndex) {\n         this.type = type;\n-        this.genericType = genericType;\n         this.mediaType = mediaType;\n         this.serialisers = serialisers;\n         this.parameterIndex = parameterIndex;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMTYwNA==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542521604", "bodyText": "This is confusing given that String is not generic, so if type == String.class  then genericType == String.class must also be true or else something is super wrong in RR.", "author": "FroMage", "createdAt": "2020-12-14T16:28:08Z", "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/runtime/src/main/java/io/quarkus/resteasy/reactive/jackson/runtime/serialisers/JacksonMessageBodyReader.java", "diffHunk": "@@ -56,4 +56,15 @@ private Object doReadFrom(Class<Object> type, Type genericType, InputStream enti\n         return reader.forType(reader.getTypeFactory().constructType(genericType != null ? genericType : type))\n                 .readValue(entityStream);\n     }\n+\n+    private boolean isReadable(MediaType mediaType, Class<?> type, Type genericType) {\n+        if (mediaType == null) {\n+            return false;\n+        }\n+        if (String.class.equals(type) && (String.class.equals(genericType) || (genericType == null))) { // don't attempt to read plain strings", "originalCommit": "8d21ffe522f1a2aead571a33a5fd3c6f8efbb401", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUzMjEyNw==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542532127", "bodyText": "The idea here is to differentiate between String and List<String>. In the latter case, genericType will be a ParameterizedTypeImpl which we assume Jackson can handle.\nA simple String, we know Jackson can't handle.", "author": "geoand", "createdAt": "2020-12-14T16:41:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMTYwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUzNzIwNg==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542537206", "bodyText": "But if genericType is List<String> then type == List.class, not String.class.", "author": "FroMage", "createdAt": "2020-12-14T16:47:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMTYwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUzNzkzNA==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542537934", "bodyText": "Yeah, which is why the method returns false, no?", "author": "geoand", "createdAt": "2020-12-14T16:48:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMTYwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU0MTQxNg==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542541416", "bodyText": "My point is that if String.class.equals(type) then the second part of the condition must ALWAYS be true. So it's redundant.", "author": "FroMage", "createdAt": "2020-12-14T16:52:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMTYwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU1ODk3OA==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542558978", "bodyText": "OK, I see your point", "author": "geoand", "createdAt": "2020-12-14T17:15:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMTYwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU2MzM2Mw==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542563363", "bodyText": "Checked this again and now I see why I did what I did.\nWhen genericType is List<String>, then type is String. This feels very wrong, but I am not sure I want to tackle it... (see my other comment).\nI'll make a lame attempt to fix it, but if things start to break, I really prefer to leave it as is for now and fix later properly on when we are all refreshed :)", "author": "geoand", "createdAt": "2020-12-14T17:21:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMTYwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU2NDk5MA==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542564990", "bodyText": "Ah, so that's another consequence of the other issue. I can try to find the underlying issue tomorrow, I'd prefer to at least know what it is before adding weird stuff like this.", "author": "FroMage", "createdAt": "2020-12-14T17:23:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMTYwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU2NTg0NQ==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542565845", "bodyText": "Yeah. I'll look into it more", "author": "geoand", "createdAt": "2020-12-14T17:24:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMTYwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU2NjI4MA==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542566280", "bodyText": "I'll let you know what I find, but indeed the last commit might have to be changed considerably.", "author": "geoand", "createdAt": "2020-12-14T17:25:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMTYwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU2NzYwNQ==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542567605", "bodyText": "I see where I messed up - looking to see what can be done.\nThanks for insisting :)", "author": "geoand", "createdAt": "2020-12-14T17:27:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMTYwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU5MDQ1OA==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542590458", "bodyText": "Fixed, properly.\nThanks again for being vigilant", "author": "geoand", "createdAt": "2020-12-14T17:59:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMTYwNA=="}], "type": "inlineReview", "revised_code": {"commit": "bf4fdde00d9b8e144cc997fa279cf31fa99e4ba3", "chunk": "diff --git a/extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/runtime/src/main/java/io/quarkus/resteasy/reactive/jackson/runtime/serialisers/JacksonMessageBodyReader.java b/extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/runtime/src/main/java/io/quarkus/resteasy/reactive/jackson/runtime/serialisers/JacksonMessageBodyReader.java\nindex 5bdabca5a8..657dca50a2 100644\n--- a/extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/runtime/src/main/java/io/quarkus/resteasy/reactive/jackson/runtime/serialisers/JacksonMessageBodyReader.java\n+++ b/extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/runtime/src/main/java/io/quarkus/resteasy/reactive/jackson/runtime/serialisers/JacksonMessageBodyReader.java\n\n@@ -56,15 +45,4 @@ public class JacksonMessageBodyReader implements ServerMessageBodyReader<Object>\n         return reader.forType(reader.getTypeFactory().constructType(genericType != null ? genericType : type))\n                 .readValue(entityStream);\n     }\n-\n-    private boolean isReadable(MediaType mediaType, Class<?> type, Type genericType) {\n-        if (mediaType == null) {\n-            return false;\n-        }\n-        if (String.class.equals(type) && (String.class.equals(genericType) || (genericType == null))) { // don't attempt to read plain strings\n-            return false;\n-        }\n-        String subtype = mediaType.getSubtype();\n-        return \"json\".equalsIgnoreCase(subtype) || subtype.endsWith(\"+json\") || \"javascript\".equals(subtype);\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMTk5Mg==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542521992", "bodyText": "Really? javascript?", "author": "FroMage", "createdAt": "2020-12-14T16:28:35Z", "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/runtime/src/main/java/io/quarkus/resteasy/reactive/jackson/runtime/serialisers/JacksonMessageBodyReader.java", "diffHunk": "@@ -56,4 +56,15 @@ private Object doReadFrom(Class<Object> type, Type genericType, InputStream enti\n         return reader.forType(reader.getTypeFactory().constructType(genericType != null ? genericType : type))\n                 .readValue(entityStream);\n     }\n+\n+    private boolean isReadable(MediaType mediaType, Class<?> type, Type genericType) {\n+        if (mediaType == null) {\n+            return false;\n+        }\n+        if (String.class.equals(type) && (String.class.equals(genericType) || (genericType == null))) { // don't attempt to read plain strings\n+            return false;\n+        }\n+        String subtype = mediaType.getSubtype();\n+        return \"json\".equalsIgnoreCase(subtype) || subtype.endsWith(\"+json\") || \"javascript\".equals(subtype);", "originalCommit": "8d21ffe522f1a2aead571a33a5fd3c6f8efbb401", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUzMjYzNA==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542532634", "bodyText": "Well, I copied this from some of JAX-RS specific snippet in the Jackson codebase. I thought it was odd, but said \ud83e\udd37\ud83c\udffc :)", "author": "geoand", "createdAt": "2020-12-14T16:41:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMTk5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUzODk2OQ==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542538969", "bodyText": "It is odd. https://stackoverflow.com/a/477819/56994 says application/javascript is for JSONP. This doesn't even check the main type. It feels wrong.", "author": "FroMage", "createdAt": "2020-12-14T16:49:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMTk5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU1NzY3Nw==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542557677", "bodyText": "OK, I'll remove it", "author": "geoand", "createdAt": "2020-12-14T17:13:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMTk5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "bf4fdde00d9b8e144cc997fa279cf31fa99e4ba3", "chunk": "diff --git a/extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/runtime/src/main/java/io/quarkus/resteasy/reactive/jackson/runtime/serialisers/JacksonMessageBodyReader.java b/extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/runtime/src/main/java/io/quarkus/resteasy/reactive/jackson/runtime/serialisers/JacksonMessageBodyReader.java\nindex 5bdabca5a8..657dca50a2 100644\n--- a/extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/runtime/src/main/java/io/quarkus/resteasy/reactive/jackson/runtime/serialisers/JacksonMessageBodyReader.java\n+++ b/extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/runtime/src/main/java/io/quarkus/resteasy/reactive/jackson/runtime/serialisers/JacksonMessageBodyReader.java\n\n@@ -56,15 +45,4 @@ public class JacksonMessageBodyReader implements ServerMessageBodyReader<Object>\n         return reader.forType(reader.getTypeFactory().constructType(genericType != null ? genericType : type))\n                 .readValue(entityStream);\n     }\n-\n-    private boolean isReadable(MediaType mediaType, Class<?> type, Type genericType) {\n-        if (mediaType == null) {\n-            return false;\n-        }\n-        if (String.class.equals(type) && (String.class.equals(genericType) || (genericType == null))) { // don't attempt to read plain strings\n-            return false;\n-        }\n-        String subtype = mediaType.getSubtype();\n-        return \"json\".equalsIgnoreCase(subtype) || subtype.endsWith(\"+json\") || \"javascript\".equals(subtype);\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMjgyMg==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542522822", "bodyText": "I don't see why we do this, given that we refuse to unserialise a String parameter in the JSON reader. Object above should just work and match List<String> via inheritance.", "author": "FroMage", "createdAt": "2020-12-14T16:29:33Z", "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/ResteasyReactiveJacksonProcessor.java", "diffHunk": "@@ -47,6 +47,9 @@ void additionalProviders(BuildProducer<AdditionalBeanBuildItem> additionalBean,\n         additionalReaders\n                 .produce(new MessageBodyReaderBuildItem(JacksonMessageBodyReader.class.getName(), Object.class.getName(),\n                         Collections.singletonList(MediaType.APPLICATION_JSON)));\n+        additionalReaders\n+                .produce(new MessageBodyReaderBuildItem(JacksonMessageBodyReader.class.getName(), String.class.getName(),", "originalCommit": "8d21ffe522f1a2aead571a33a5fd3c6f8efbb401", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUzMzQ4MA==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542533480", "bodyText": "This is needed, otherwise the order with which the reader is determined turns out to be wrong.", "author": "geoand", "createdAt": "2020-12-14T16:42:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMjgyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU0MDI5OA==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542540298", "bodyText": "OK, but why? Especially for a List<String> I don't think we should ever match with a String type, not for JSON.\nIt could make sense for the parameter convertors we support but those don't use readers.", "author": "FroMage", "createdAt": "2020-12-14T16:51:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMjgyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU0MjkxNA==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542542914", "bodyText": "When I was looking I saw it was because we were looking up readers for String,  not List.\nNow I am pretty sure that is a problem in itself, but I would prefer to keep this fix for now (as it can affect a lot of users) and deal with it more holistically if the need arises (i.e. we encounter more problems with reader selection).", "author": "geoand", "createdAt": "2020-12-14T16:54:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMjgyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU0NTQwNw==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542545407", "bodyText": "I'm not sure, I think looking up readers for String when we have List<String> is wrong and could lead to all sorts of troubles. We should find out why that is and not add weird workarounds that we'll surely forget to remove and then wonder why they are here ;)", "author": "FroMage", "createdAt": "2020-12-14T16:57:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMjgyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU1NzUwNw==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542557507", "bodyText": "I've been burned by the readers too many times to have the will to fix it properly a few days before PTO :).\nIf we add the workaround, we will at least unblock a very common problem the code has now and thus allow us to see if there are any further problem. If there are, then I wholeheartedly agree to take a more extensive look at it.", "author": "geoand", "createdAt": "2020-12-14T17:13:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMjgyMg=="}], "type": "inlineReview", "revised_code": {"commit": "bf4fdde00d9b8e144cc997fa279cf31fa99e4ba3", "chunk": "diff --git a/extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/ResteasyReactiveJacksonProcessor.java b/extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/ResteasyReactiveJacksonProcessor.java\nindex 367a49b0e7..1d498eafa3 100644\n--- a/extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/ResteasyReactiveJacksonProcessor.java\n+++ b/extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/ResteasyReactiveJacksonProcessor.java\n\n@@ -48,7 +49,10 @@ public class ResteasyReactiveJacksonProcessor {\n                 .produce(new MessageBodyReaderBuildItem(JacksonMessageBodyReader.class.getName(), Object.class.getName(),\n                         Collections.singletonList(MediaType.APPLICATION_JSON)));\n         additionalReaders\n-                .produce(new MessageBodyReaderBuildItem(JacksonMessageBodyReader.class.getName(), String.class.getName(),\n+                .produce(new MessageBodyReaderBuildItem(JacksonMessageBodyReader.class.getName(), Collection.class.getName(),\n+                        Collections.singletonList(MediaType.APPLICATION_JSON)));\n+        additionalReaders\n+                .produce(new MessageBodyReaderBuildItem(JacksonMessageBodyReader.class.getName(), Map.class.getName(),\n                         Collections.singletonList(MediaType.APPLICATION_JSON)));\n         additionalWriters\n                 .produce(new MessageBodyWriterBuildItem(JacksonMessageBodyWriter.class.getName(), Object.class.getName(),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMzE2Mg==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542523162", "bodyText": "Is this on purpose?", "author": "FroMage", "createdAt": "2020-12-14T16:29:57Z", "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jsonb/deployment/src/test/java/io/quarkus/resteasy/reactive/jsonb/deployment/test/SimpleJsonTest.java", "diffHunk": "@@ -25,35 +25,45 @@ public JavaArchive get() {\n \n     @Test\n     public void testJson() {\n-        RestAssured.get(\"/simple/person\")\n-                .then()\n-                .statusCode(200)\n-                .contentType(\"application/json\")\n-                .body(\"first\", Matchers.equalTo(\"Bob\"))\n-                .body(\"last\", Matchers.equalTo(\"Builder\"));\n+        //        RestAssured.get(\"/simple/person\")", "originalCommit": "8d21ffe522f1a2aead571a33a5fd3c6f8efbb401", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUzMzUyNw==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542533527", "bodyText": "Nope :)", "author": "geoand", "createdAt": "2020-12-14T16:42:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMzE2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "bf4fdde00d9b8e144cc997fa279cf31fa99e4ba3", "chunk": "diff --git a/extensions/resteasy-reactive/quarkus-resteasy-reactive-jsonb/deployment/src/test/java/io/quarkus/resteasy/reactive/jsonb/deployment/test/SimpleJsonTest.java b/extensions/resteasy-reactive/quarkus-resteasy-reactive-jsonb/deployment/src/test/java/io/quarkus/resteasy/reactive/jsonb/deployment/test/SimpleJsonTest.java\nindex 61b60cfa1f..9955f2c3e0 100644\n--- a/extensions/resteasy-reactive/quarkus-resteasy-reactive-jsonb/deployment/src/test/java/io/quarkus/resteasy/reactive/jsonb/deployment/test/SimpleJsonTest.java\n+++ b/extensions/resteasy-reactive/quarkus-resteasy-reactive-jsonb/deployment/src/test/java/io/quarkus/resteasy/reactive/jsonb/deployment/test/SimpleJsonTest.java\n\n@@ -19,41 +19,41 @@ public class SimpleJsonTest {\n                 @Override\n                 public JavaArchive get() {\n                     return ShrinkWrap.create(JavaArchive.class)\n-                            .addClasses(Person.class, SimpleJsonResource.class);\n+                            .addClasses(Person.class, SimpleJsonResource.class, SuperClass.class);\n                 }\n             });\n \n     @Test\n     public void testJson() {\n-        //        RestAssured.get(\"/simple/person\")\n-        //                .then()\n-        //                .statusCode(200)\n-        //                .contentType(\"application/json\")\n-        //                .body(\"first\", Matchers.equalTo(\"Bob\"))\n-        //                .body(\"last\", Matchers.equalTo(\"Builder\"));\n-        //\n-        //        RestAssured\n-        //                .with()\n-        //                .body(\"{\\\"first\\\": \\\"Bob\\\", \\\"last\\\": \\\"Builder\\\"}\")\n-        //                .contentType(\"application/json; charset=utf-8\")\n-        //                .post(\"/simple/person\")\n-        //                .then()\n-        //                .statusCode(200)\n-        //                .contentType(\"application/json\")\n-        //                .body(\"first\", Matchers.equalTo(\"Bob\")).body(\"last\", Matchers.equalTo(\"Builder\"));\n-        //\n-        //        RestAssured\n-        //                .with()\n-        //                .body(\"[{\\\"first\\\": \\\"Bob\\\", \\\"last\\\": \\\"Builder\\\"}, {\\\"first\\\": \\\"Bob2\\\", \\\"last\\\": \\\"Builder2\\\"}]\")\n-        //                .contentType(\"application/json; charset=utf-8\")\n-        //                .post(\"/simple/people\")\n-        //                .then()\n-        //                .statusCode(200)\n-        //                .contentType(\"application/json\")\n-        //                .body(\"[1].first\", Matchers.equalTo(\"Bob\"))\n-        //                .body(\"[1].last\", Matchers.equalTo(\"Builder\"))\n-        //                .body(\"[0].first\", Matchers.equalTo(\"Bob2\"))\n-        //                .body(\"[0].last\", Matchers.equalTo(\"Builder2\"));\n+        RestAssured.get(\"/simple/person\")\n+                .then()\n+                .statusCode(200)\n+                .contentType(\"application/json\")\n+                .body(\"first\", Matchers.equalTo(\"Bob\"))\n+                .body(\"last\", Matchers.equalTo(\"Builder\"));\n+\n+        RestAssured\n+                .with()\n+                .body(\"{\\\"first\\\": \\\"Bob\\\", \\\"last\\\": \\\"Builder\\\"}\")\n+                .contentType(\"application/json; charset=utf-8\")\n+                .post(\"/simple/person\")\n+                .then()\n+                .statusCode(200)\n+                .contentType(\"application/json\")\n+                .body(\"first\", Matchers.equalTo(\"Bob\")).body(\"last\", Matchers.equalTo(\"Builder\"));\n+\n+        RestAssured\n+                .with()\n+                .body(\"[{\\\"first\\\": \\\"Bob\\\", \\\"last\\\": \\\"Builder\\\"}, {\\\"first\\\": \\\"Bob2\\\", \\\"last\\\": \\\"Builder2\\\"}]\")\n+                .contentType(\"application/json; charset=utf-8\")\n+                .post(\"/simple/people\")\n+                .then()\n+                .statusCode(200)\n+                .contentType(\"application/json\")\n+                .body(\"[1].first\", Matchers.equalTo(\"Bob\"))\n+                .body(\"[1].last\", Matchers.equalTo(\"Builder\"))\n+                .body(\"[0].first\", Matchers.equalTo(\"Bob2\"))\n+                .body(\"[0].last\", Matchers.equalTo(\"Builder2\"));\n \n         RestAssured.with()\n                 .body(\"[\\\"first\\\", \\\"second\\\"]\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMzc4OA==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542523788", "bodyText": "Sounds like this could be abstracted somewhere common. Especially given that it has no json dependency, we could put this in -common", "author": "FroMage", "createdAt": "2020-12-14T16:30:42Z", "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jsonb/runtime/src/main/java/io/quarkus/resteasy/reactive/jsonb/runtime/serialisers/JsonbMessageBodyReader.java", "diffHunk": "@@ -53,4 +53,15 @@ private Object doReadFrom(Class<Object> type, Type genericType, InputStream enti\n         }\n         return json.fromJson(entityStream, genericType != null ? genericType : type);\n     }\n+\n+    private boolean isReadable(MediaType mediaType, Class<?> type, Type genericType) {", "originalCommit": "8d21ffe522f1a2aead571a33a5fd3c6f8efbb401", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUzMzY1Mg==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542533652", "bodyText": "Will do", "author": "geoand", "createdAt": "2020-12-14T16:43:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMzc4OA=="}], "type": "inlineReview", "revised_code": {"commit": "bf4fdde00d9b8e144cc997fa279cf31fa99e4ba3", "chunk": "diff --git a/extensions/resteasy-reactive/quarkus-resteasy-reactive-jsonb/runtime/src/main/java/io/quarkus/resteasy/reactive/jsonb/runtime/serialisers/JsonbMessageBodyReader.java b/extensions/resteasy-reactive/quarkus-resteasy-reactive-jsonb/runtime/src/main/java/io/quarkus/resteasy/reactive/jsonb/runtime/serialisers/JsonbMessageBodyReader.java\nindex 0fe8e69e7e..e96bca33ba 100644\n--- a/extensions/resteasy-reactive/quarkus-resteasy-reactive-jsonb/runtime/src/main/java/io/quarkus/resteasy/reactive/jsonb/runtime/serialisers/JsonbMessageBodyReader.java\n+++ b/extensions/resteasy-reactive/quarkus-resteasy-reactive-jsonb/runtime/src/main/java/io/quarkus/resteasy/reactive/jsonb/runtime/serialisers/JsonbMessageBodyReader.java\n\n@@ -53,15 +42,4 @@ public class JsonbMessageBodyReader implements ServerMessageBodyReader<Object> {\n         }\n         return json.fromJson(entityStream, genericType != null ? genericType : type);\n     }\n-\n-    private boolean isReadable(MediaType mediaType, Class<?> type, Type genericType) {\n-        if (mediaType == null) {\n-            return false;\n-        }\n-        if (String.class.equals(type) && (String.class.equals(genericType) || (genericType == null))) { // don't attempt to read plain strings\n-            return false;\n-        }\n-        String subtype = mediaType.getSubtype();\n-        return \"json\".equalsIgnoreCase(subtype) || subtype.endsWith(\"+json\") || \"javascript\".equals(subtype);\n-    }\n }\n"}}, {"oid": "bf4fdde00d9b8e144cc997fa279cf31fa99e4ba3", "url": "https://github.com/quarkusio/quarkus/commit/bf4fdde00d9b8e144cc997fa279cf31fa99e4ba3", "message": "Add generic handling test for MessageBodyReader", "committedDate": "2020-12-14T17:58:14Z", "type": "forcePushed"}, {"oid": "df17291bcf49016557cdb21c072a54f376f41e4b", "url": "https://github.com/quarkusio/quarkus/commit/df17291bcf49016557cdb21c072a54f376f41e4b", "message": "Add generic handling test for MessageBodyReader", "committedDate": "2020-12-14T18:04:53Z", "type": "forcePushed"}, {"oid": "54ee9a649dc46bb76e3320615a67cdd912deb1b4", "url": "https://github.com/quarkusio/quarkus/commit/54ee9a649dc46bb76e3320615a67cdd912deb1b4", "message": "Don't run ContainerRequestFilters on subresources\n\nThis behavior is similar to how RESTEasy behaves", "committedDate": "2020-12-14T19:21:48Z", "type": "forcePushed"}, {"oid": "97ebb21f2be821db7fc4754461c857075e8f6d7f", "url": "https://github.com/quarkusio/quarkus/commit/97ebb21f2be821db7fc4754461c857075e8f6d7f", "message": "Ensure that param converters for RR aren't under the 'java' package", "committedDate": "2020-12-15T06:21:46Z", "type": "commit"}, {"oid": "0708f4e0e41f5773440bfac00621aa897dd02c93", "url": "https://github.com/quarkusio/quarkus/commit/0708f4e0e41f5773440bfac00621aa897dd02c93", "message": "Prevent NPE and IOOBE when getting matched resources", "committedDate": "2020-12-15T06:21:46Z", "type": "commit"}, {"oid": "19f4876ffffc92e90aa79da3abd68429973affe0", "url": "https://github.com/quarkusio/quarkus/commit/19f4876ffffc92e90aa79da3abd68429973affe0", "message": "Prevent multiple HTTP annotations on RESTEasy Reactive endpoints\n\nThe spec doesn't mandate this behavior, but it can lead to unexpected results,\nso let's not allow it", "committedDate": "2020-12-15T06:21:46Z", "type": "commit"}, {"oid": "99b6b43bcee9b79d97a35367144899f5846469f6", "url": "https://github.com/quarkusio/quarkus/commit/99b6b43bcee9b79d97a35367144899f5846469f6", "message": "Also handle @JsonView on slow path in RESTEasy Reactive", "committedDate": "2020-12-15T06:21:46Z", "type": "commit"}, {"oid": "773cf0ca19b6cd9fc2f82ed80324ae20c80e68c7", "url": "https://github.com/quarkusio/quarkus/commit/773cf0ca19b6cd9fc2f82ed80324ae20c80e68c7", "message": "Properly pass the generic type to message body readers", "committedDate": "2020-12-15T06:21:46Z", "type": "commit"}, {"oid": "96aaa4f2906dd7ebe3c05d30fde8fb9a7578574a", "url": "https://github.com/quarkusio/quarkus/commit/96aaa4f2906dd7ebe3c05d30fde8fb9a7578574a", "message": "Don't use converters for the body of a Request\n\nThe spec is explicit that converters are for types other\nthan body (which are handled by the proper MessageBodyReader).", "committedDate": "2020-12-15T06:21:46Z", "type": "commit"}, {"oid": "6bb99c2081243fcc76b76000558fc403eea06f34", "url": "https://github.com/quarkusio/quarkus/commit/6bb99c2081243fcc76b76000558fc403eea06f34", "message": "Don't run ContainerRequestFilters on subresources\n\nThis behavior is similar to how RESTEasy behaves", "committedDate": "2020-12-15T06:21:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE1NTM3Ng==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r543155376", "bodyText": "Why is this required? Don't we match Collection and Map with Object? Why do we need this for them and not List?", "author": "FroMage", "createdAt": "2020-12-15T08:50:25Z", "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/ResteasyReactiveJacksonProcessor.java", "diffHunk": "@@ -47,6 +48,12 @@ void additionalProviders(BuildProducer<AdditionalBeanBuildItem> additionalBean,\n         additionalReaders\n                 .produce(new MessageBodyReaderBuildItem(JacksonMessageBodyReader.class.getName(), Object.class.getName(),\n                         Collections.singletonList(MediaType.APPLICATION_JSON)));\n+        additionalReaders\n+                .produce(new MessageBodyReaderBuildItem(JacksonMessageBodyReader.class.getName(), Collection.class.getName(),", "originalCommit": "b3f76b4d3f100e8c06f6fe6fd01d351b3f8a8640", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI0NTc2OQ==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r543245769", "bodyText": "We need Collection, because when checking interfaces, Object (as a \"super-class\") doesn't get checked (I am pretty sure that it's spec mandated).\nBy adding Collection, all collections will work just fine.", "author": "geoand", "createdAt": "2020-12-15T10:58:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE1NTM3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI1MTkzOQ==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r543251939", "bodyText": "The spec mandates that we don't check Object for interface types? That'd be insane. I can't believe that.", "author": "FroMage", "createdAt": "2020-12-15T11:08:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE1NTM3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI1NTE3NQ==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r543255175", "bodyText": "My theory is that in code like Serialisers.findReaders we should special case something like this:\n    public List<MessageBodyReader<?>> findReaders(ConfigurationImpl configuration, Class<?> entityType,\n            MediaType mediaType, RuntimeType runtimeType) {\n        List<MediaType> mt = Collections.singletonList(mediaType);\n        List<MessageBodyReader<?>> ret = new ArrayList<>();\n        Deque<Class<?>> toProcess = new LinkedList<>();\n        Class<?> klass = entityType;\n        if (primitivesToWrappers.containsKey(klass))\n            klass = primitivesToWrappers.get(klass);\n        QuarkusMultivaluedMap<Class<?>, ResourceReader> readers;\n        if (configuration != null && !configuration.getResourceReaders().isEmpty()) {\n            readers = new QuarkusMultivaluedHashMap<>();\n            readers.putAll(this.readers);\n            readers.addAll(configuration.getResourceReaders());\n        } else {\n            readers = this.readers;\n        }\n        do {\n            Collections.addAll(toProcess, klass.getInterfaces());\n            if (klass == Object.class || klass.getSuperclass() == null) {\n                //spec extension, look for interfaces as well\n                //we match interfaces before Object\n                Set<Class<?>> seen = new HashSet<>(toProcess);\n                while (!toProcess.isEmpty()) {\n                    Class<?> iface = toProcess.poll();\n                    List<ResourceReader> goodTypeReaders = readers.get(iface);\n                    readerLookup(mediaType, runtimeType, mt, ret, goodTypeReaders);\n                    for (Class<?> i : iface.getInterfaces()) {\n                        if (!seen.contains(i)) {\n                            seen.add(i);\n                            toProcess.add(i);\n                        }\n                    }\n                }\n            }\n            List<ResourceReader> goodTypeReaders = readers.get(klass);\n            readerLookup(mediaType, runtimeType, mt, ret, goodTypeReaders);\n// if we're looking for an interface, pretend it extends Object to make it match,\n// we will still match superinterfaces before we match Object so it will work\nif(klass.isInterface() {\n klass = Object.class;\n} else {\n            klass = klass.getSuperclass();\n}\n        } while (klass != null);\n\n        return ret;\n    }", "author": "FroMage", "createdAt": "2020-12-15T11:13:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE1NTM3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI1NjAxMw==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r543256013", "bodyText": "I do think the interface thing was a special in the spec, but I need to check.", "author": "geoand", "createdAt": "2020-12-15T11:14:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE1NTM3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMwMTQ3Mg==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r543301472", "bodyText": "So it seems like the spec doesn't mention anything. Moreoever, we do that same trick you mentioned for writers, so I updated the PR to use it for readers as well", "author": "geoand", "createdAt": "2020-12-15T12:29:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE1NTM3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "71eac4b802804dfeb903a357d405a240634aaa6b", "chunk": "diff --git a/extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/ResteasyReactiveJacksonProcessor.java b/extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/ResteasyReactiveJacksonProcessor.java\nindex 1d498eafa3..3a5c50d42f 100644\n--- a/extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/ResteasyReactiveJacksonProcessor.java\n+++ b/extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/ResteasyReactiveJacksonProcessor.java\n\n@@ -48,12 +47,6 @@ public class ResteasyReactiveJacksonProcessor {\n         additionalReaders\n                 .produce(new MessageBodyReaderBuildItem(JacksonMessageBodyReader.class.getName(), Object.class.getName(),\n                         Collections.singletonList(MediaType.APPLICATION_JSON)));\n-        additionalReaders\n-                .produce(new MessageBodyReaderBuildItem(JacksonMessageBodyReader.class.getName(), Collection.class.getName(),\n-                        Collections.singletonList(MediaType.APPLICATION_JSON)));\n-        additionalReaders\n-                .produce(new MessageBodyReaderBuildItem(JacksonMessageBodyReader.class.getName(), Map.class.getName(),\n-                        Collections.singletonList(MediaType.APPLICATION_JSON)));\n         additionalWriters\n                 .produce(new MessageBodyWriterBuildItem(JacksonMessageBodyWriter.class.getName(), Object.class.getName(),\n                         Collections.singletonList(MediaType.APPLICATION_JSON)));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE1NjcyNA==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r543156724", "bodyText": "We should check the application main type, because this may match image/* ATM due to ignoring the main type and allowing subtype wildcards.", "author": "FroMage", "createdAt": "2020-12-15T08:52:20Z", "path": "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/providers/serialisers/json/AbstractJsonMessageBodyReader.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.jboss.resteasy.reactive.server.providers.serialisers.json;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Type;\n+import javax.ws.rs.core.MediaType;\n+import org.jboss.resteasy.reactive.server.spi.ResteasyReactiveResourceInfo;\n+import org.jboss.resteasy.reactive.server.spi.ServerMessageBodyReader;\n+\n+public abstract class AbstractJsonMessageBodyReader implements ServerMessageBodyReader<Object> {\n+\n+    @Override\n+    public boolean isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType) {\n+        return isReadable(mediaType, type);\n+    }\n+\n+    @Override\n+    public boolean isReadable(Class<?> type, Type genericType, ResteasyReactiveResourceInfo lazyMethod, MediaType mediaType) {\n+        return isReadable(mediaType, type);\n+    }\n+\n+    private boolean isReadable(MediaType mediaType, Class<?> type) {\n+        if (mediaType == null) {\n+            return false;\n+        }\n+        if (String.class.equals(type)) { // don't attempt to read plain strings\n+            return false;\n+        }\n+        String subtype = mediaType.getSubtype();\n+        return \"json\".equalsIgnoreCase(subtype) || subtype.endsWith(\"+json\") || subtype.equals(\"*\");", "originalCommit": "b3f76b4d3f100e8c06f6fe6fd01d351b3f8a8640", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI0Njc4OA==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r543246788", "bodyText": "Good idea", "author": "geoand", "createdAt": "2020-12-15T11:00:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE1NjcyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI1OTI4OQ==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r543259289", "bodyText": "Fixed", "author": "geoand", "createdAt": "2020-12-15T11:20:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE1NjcyNA=="}], "type": "inlineReview", "revised_code": {"commit": "c54367c8f326cd75bfa3059e97ac326f3ec6a78c", "chunk": "diff --git a/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/providers/serialisers/json/AbstractJsonMessageBodyReader.java b/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/providers/serialisers/json/AbstractJsonMessageBodyReader.java\nindex 18e0f12791..2a8da3d7f8 100644\n--- a/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/providers/serialisers/json/AbstractJsonMessageBodyReader.java\n+++ b/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/providers/serialisers/json/AbstractJsonMessageBodyReader.java\n\n@@ -26,6 +26,8 @@ public abstract class AbstractJsonMessageBodyReader implements ServerMessageBody\n             return false;\n         }\n         String subtype = mediaType.getSubtype();\n-        return \"json\".equalsIgnoreCase(subtype) || subtype.endsWith(\"+json\") || subtype.equals(\"*\");\n+        boolean isApplicationMediaType = \"application\".equals(mediaType.getType());\n+        return (isApplicationMediaType && \"json\".equalsIgnoreCase(subtype) || subtype.endsWith(\"+json\"))\n+                || (mediaType.isWildcardSubtype() && (mediaType.isWildcardType() || isApplicationMediaType));\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE2MDIwMQ==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r543160201", "bodyText": "In theory, @RestPath is not required here", "author": "FroMage", "createdAt": "2020-12-15T08:57:27Z", "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/resource/basic/SubResourceRequestFilterTest.java", "diffHunk": "@@ -49,8 +51,8 @@ public void testAbortingRequestFilter() {\n         @Inject\n         RestSubResource restSubResource;\n \n-        @Path(\"sub-resource/hello\")\n-        public RestSubResource hello() {\n+        @Path(\"sub-resource/{name}\")\n+        public RestSubResource hello(@RestPath String name) {", "originalCommit": "bd1b68598efebbbeafe643570bfabf364aabb2b2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c54367c8f326cd75bfa3059e97ac326f3ec6a78c", "chunk": "diff --git a/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/resource/basic/SubResourceRequestFilterTest.java b/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/resource/basic/SubResourceRequestFilterTest.java\ndeleted file mode 100644\nindex 81687af762..0000000000\n--- a/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/resource/basic/SubResourceRequestFilterTest.java\n+++ /dev/null\n\n@@ -1,81 +0,0 @@\n-package io.quarkus.resteasy.reactive.server.test.resource.basic;\n-\n-import java.io.IOException;\n-import java.util.function.Supplier;\n-\n-import javax.enterprise.context.ApplicationScoped;\n-import javax.inject.Inject;\n-import javax.ws.rs.GET;\n-import javax.ws.rs.Path;\n-import javax.ws.rs.container.ContainerRequestContext;\n-import javax.ws.rs.container.ContainerRequestFilter;\n-import javax.ws.rs.core.HttpHeaders;\n-import javax.ws.rs.core.Response;\n-import javax.ws.rs.ext.Provider;\n-\n-import org.hamcrest.Matchers;\n-import org.jboss.resteasy.reactive.RestPath;\n-import org.jboss.shrinkwrap.api.ShrinkWrap;\n-import org.jboss.shrinkwrap.api.spec.JavaArchive;\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.extension.RegisterExtension;\n-\n-import io.quarkus.test.QuarkusUnitTest;\n-import io.restassured.RestAssured;\n-\n-public class SubResourceRequestFilterTest {\n-\n-    @RegisterExtension\n-    static QuarkusUnitTest testExtension = new QuarkusUnitTest()\n-            .setArchiveProducer(new Supplier<JavaArchive>() {\n-                @Override\n-                public JavaArchive get() {\n-                    JavaArchive war = ShrinkWrap.create(JavaArchive.class);\n-                    war.addClasses(RestResource.class, RestSubResource.class, SingleExecutionFilter.class);\n-                    return war;\n-                }\n-            });\n-\n-    @Test\n-    public void testAbortingRequestFilter() {\n-        RestAssured.get(\"/sub-resource/geo\")\n-                .then()\n-                .header(\"single-filter\", Matchers.equalTo(\"once\"))\n-                .body(Matchers.equalTo(\"geo\"))\n-                .statusCode(200);\n-    }\n-\n-    @Path(\"/\")\n-    public static class RestResource {\n-\n-        @Inject\n-        RestSubResource restSubResource;\n-\n-        @Path(\"sub-resource/{name}\")\n-        public RestSubResource hello(@RestPath String name) {\n-            return restSubResource;\n-        }\n-    }\n-\n-    @ApplicationScoped\n-    public static class RestSubResource {\n-\n-        @GET\n-        public Response hello(HttpHeaders headers, @RestPath String name) {\n-            return Response.ok(name).header(\"single-filter\", headers.getHeaderString(\"single-filter\")).build();\n-        }\n-    }\n-\n-    @Provider\n-    public static class SingleExecutionFilter implements ContainerRequestFilter {\n-\n-        @Override\n-        public void filter(ContainerRequestContext requestContext) throws IOException {\n-            if (requestContext.getProperty(\"been.here\") != null) {\n-                throw new IllegalStateException(\"Filter should not have been called twice\");\n-            }\n-            requestContext.setProperty(\"been.here\", Boolean.TRUE);\n-            requestContext.getHeaders().putSingle(\"single-filter\", \"once\");\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE2Mjc4NA==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r543162784", "bodyText": "Here, though, I do wonder if @RestPath is required. I suppose yes, because there's no @Path matching. I am not sure what the spec says about sub-resources allowing @Path matching. Is it allowed/supported?", "author": "FroMage", "createdAt": "2020-12-15T09:01:14Z", "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/resource/basic/SubResourceRequestFilterTest.java", "diffHunk": "@@ -59,8 +61,8 @@ public RestSubResource hello() {\n     public static class RestSubResource {\n \n         @GET\n-        public Response hello(HttpHeaders headers) {\n-            return Response.ok().header(\"single-filter\", headers.getHeaderString(\"single-filter\")).build();\n+        public Response hello(HttpHeaders headers, @RestPath String name) {", "originalCommit": "bd1b68598efebbbeafe643570bfabf364aabb2b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI1ODE4NA==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r543258184", "bodyText": "Yeah, here it is required because there is no other way to know", "author": "geoand", "createdAt": "2020-12-15T11:18:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE2Mjc4NA=="}], "type": "inlineReview", "revised_code": {"commit": "c54367c8f326cd75bfa3059e97ac326f3ec6a78c", "chunk": "diff --git a/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/resource/basic/SubResourceRequestFilterTest.java b/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/resource/basic/SubResourceRequestFilterTest.java\ndeleted file mode 100644\nindex 81687af762..0000000000\n--- a/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/resource/basic/SubResourceRequestFilterTest.java\n+++ /dev/null\n\n@@ -1,81 +0,0 @@\n-package io.quarkus.resteasy.reactive.server.test.resource.basic;\n-\n-import java.io.IOException;\n-import java.util.function.Supplier;\n-\n-import javax.enterprise.context.ApplicationScoped;\n-import javax.inject.Inject;\n-import javax.ws.rs.GET;\n-import javax.ws.rs.Path;\n-import javax.ws.rs.container.ContainerRequestContext;\n-import javax.ws.rs.container.ContainerRequestFilter;\n-import javax.ws.rs.core.HttpHeaders;\n-import javax.ws.rs.core.Response;\n-import javax.ws.rs.ext.Provider;\n-\n-import org.hamcrest.Matchers;\n-import org.jboss.resteasy.reactive.RestPath;\n-import org.jboss.shrinkwrap.api.ShrinkWrap;\n-import org.jboss.shrinkwrap.api.spec.JavaArchive;\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.extension.RegisterExtension;\n-\n-import io.quarkus.test.QuarkusUnitTest;\n-import io.restassured.RestAssured;\n-\n-public class SubResourceRequestFilterTest {\n-\n-    @RegisterExtension\n-    static QuarkusUnitTest testExtension = new QuarkusUnitTest()\n-            .setArchiveProducer(new Supplier<JavaArchive>() {\n-                @Override\n-                public JavaArchive get() {\n-                    JavaArchive war = ShrinkWrap.create(JavaArchive.class);\n-                    war.addClasses(RestResource.class, RestSubResource.class, SingleExecutionFilter.class);\n-                    return war;\n-                }\n-            });\n-\n-    @Test\n-    public void testAbortingRequestFilter() {\n-        RestAssured.get(\"/sub-resource/geo\")\n-                .then()\n-                .header(\"single-filter\", Matchers.equalTo(\"once\"))\n-                .body(Matchers.equalTo(\"geo\"))\n-                .statusCode(200);\n-    }\n-\n-    @Path(\"/\")\n-    public static class RestResource {\n-\n-        @Inject\n-        RestSubResource restSubResource;\n-\n-        @Path(\"sub-resource/{name}\")\n-        public RestSubResource hello(@RestPath String name) {\n-            return restSubResource;\n-        }\n-    }\n-\n-    @ApplicationScoped\n-    public static class RestSubResource {\n-\n-        @GET\n-        public Response hello(HttpHeaders headers, @RestPath String name) {\n-            return Response.ok(name).header(\"single-filter\", headers.getHeaderString(\"single-filter\")).build();\n-        }\n-    }\n-\n-    @Provider\n-    public static class SingleExecutionFilter implements ContainerRequestFilter {\n-\n-        @Override\n-        public void filter(ContainerRequestContext requestContext) throws IOException {\n-            if (requestContext.getProperty(\"been.here\") != null) {\n-                throw new IllegalStateException(\"Filter should not have been called twice\");\n-            }\n-            requestContext.setProperty(\"been.here\", Boolean.TRUE);\n-            requestContext.getHeaders().putSingle(\"single-filter\", \"once\");\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE2MzkxOA==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r543163918", "bodyText": "Is there a reason to overwrite the pathParamValue for locators? Is it because they can declare new path parameters? Otherwise we can just keep the original pathParamValue and no need to add a field to save them.", "author": "FroMage", "createdAt": "2020-12-15T09:03:03Z", "path": "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/handlers/ResourceLocatorHandler.java", "diffHunk": "@@ -80,7 +80,7 @@ public void onComplete(Throwable throwable) {\n         requestContext.setRemaining(res.remaining);\n         requestContext.setEndpointInstance(locator);\n         requestContext.setResult(null);\n-        requestContext.restart(res.value);\n+        requestContext.restart(res.value, true);", "originalCommit": "bd1b68598efebbbeafe643570bfabf364aabb2b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI1OTA0NA==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r543259044", "bodyText": "The subresource can indeed declare different parameters - they don't need to be same as the original. So to support that case we do indeed need to override", "author": "geoand", "createdAt": "2020-12-15T11:19:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE2MzkxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI2ODgxMg==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r543268812", "bodyText": "OK", "author": "FroMage", "createdAt": "2020-12-15T11:35:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE2MzkxOA=="}], "type": "inlineReview", "revised_code": {"commit": "c54367c8f326cd75bfa3059e97ac326f3ec6a78c", "chunk": "diff --git a/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/handlers/ResourceLocatorHandler.java b/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/handlers/ResourceLocatorHandler.java\nindex 807fd05fe3..cfb0e037bc 100644\n--- a/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/handlers/ResourceLocatorHandler.java\n+++ b/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/handlers/ResourceLocatorHandler.java\n\n@@ -80,7 +80,7 @@ public class ResourceLocatorHandler implements ServerRestHandler {\n         requestContext.setRemaining(res.remaining);\n         requestContext.setEndpointInstance(locator);\n         requestContext.setResult(null);\n-        requestContext.restart(res.value, true);\n+        requestContext.restart(res.value);\n         requestContext.setMaxPathParams(res.pathParamValues.length);\n         for (int i = 0; i < res.pathParamValues.length; ++i) {\n             String pathParamValue = res.pathParamValues[i];\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE2NDMyMA==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r543164320", "bodyText": "Can a locator method return a sub-resource which returns a locator method? As in, can we have two levels of locators? If yes, then we need more than an extra field, we need a stack of them.", "author": "FroMage", "createdAt": "2020-12-15T09:03:43Z", "path": "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/ResteasyReactiveRequestContext.java", "diffHunk": "@@ -161,9 +171,17 @@ public ProvidersImpl getProviders() {\n      * @param target The resource target\n      */\n     public void restart(RuntimeResource target) {\n+        restart(target, false);\n+    }\n+\n+    public void restart(RuntimeResource target, boolean setLocatorTarget) {\n         this.handlers = target.getHandlerChain();\n         position = 0;\n         parameters = new Object[target.getParameterTypes().length];\n+        if (setLocatorTarget) {", "originalCommit": "bd1b68598efebbbeafe643570bfabf364aabb2b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI2MDEwNg==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r543260106", "bodyText": "That's a very good question, but the spec doesn't seem to say anything about that nor do I see any test in the TCK.\nI would say let's not complicate it unless we actually see something like that in the wild", "author": "geoand", "createdAt": "2020-12-15T11:21:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE2NDMyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI2ODcyNQ==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r543268725", "bodyText": "+1", "author": "FroMage", "createdAt": "2020-12-15T11:35:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE2NDMyMA=="}], "type": "inlineReview", "revised_code": {"commit": "c54367c8f326cd75bfa3059e97ac326f3ec6a78c", "chunk": "diff --git a/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/ResteasyReactiveRequestContext.java b/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/ResteasyReactiveRequestContext.java\nindex a0609d0081..79491a7b70 100644\n--- a/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/ResteasyReactiveRequestContext.java\n+++ b/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/ResteasyReactiveRequestContext.java\n\n@@ -171,17 +161,9 @@ public abstract class ResteasyReactiveRequestContext\n      * @param target The resource target\n      */\n     public void restart(RuntimeResource target) {\n-        restart(target, false);\n-    }\n-\n-    public void restart(RuntimeResource target, boolean setLocatorTarget) {\n         this.handlers = target.getHandlerChain();\n         position = 0;\n         parameters = new Object[target.getParameterTypes().length];\n-        if (setLocatorTarget) {\n-            this.locatorTarget = this.target;\n-            this.locatorPathParamValues = this.pathParamValues;\n-        }\n         this.target = target;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE2Nzg2MA==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r543167860", "bodyText": "This appears to imply that you can only access path params in a sub-resource by matching against the locator method, so the sub-resource can't have path params of its own, right?\nSo, is it true? The spec is confusing about this. If it is true, why do we not keep the original path param values then, instead of adding a new field to save the original ones?\nAlso, why can't we use context.getLocatorTarget().getPathParameterIndexes()? I'm sure there's a good reason, but I don't get it.", "author": "FroMage", "createdAt": "2020-12-15T09:08:56Z", "path": "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/parameters/LocatableResourcePathParamExtractor.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package org.jboss.resteasy.reactive.server.core.parameters;\n+\n+import org.jboss.resteasy.reactive.server.core.ResteasyReactiveRequestContext;\n+import org.jboss.resteasy.reactive.server.mapping.URITemplate;\n+\n+public class LocatableResourcePathParamExtractor implements ParameterExtractor {\n+\n+    private final String name;\n+\n+    public LocatableResourcePathParamExtractor(String name) {\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public Object extractParameter(ResteasyReactiveRequestContext context) {\n+        int index = findPathParamIndex(context.getLocatorTarget().getClassPath(), context.getLocatorTarget().getPath());", "originalCommit": "bd1b68598efebbbeafe643570bfabf364aabb2b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI3MjU2OA==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r543272568", "bodyText": "By reading the spec, I can't really tell what the intended behavior is.\nI'll try and see if we can keep the paths of the original request and see how the tests behave", "author": "geoand", "createdAt": "2020-12-15T11:42:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE2Nzg2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI5MTE4MQ==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r543291181", "bodyText": "I tried keeping the original values and some of the tests fail.\nThe approach in this PR however passes all old and new tests", "author": "geoand", "createdAt": "2020-12-15T12:12:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE2Nzg2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ2MjkxNA==", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r543462914", "bodyText": "Then perfect :)", "author": "FroMage", "createdAt": "2020-12-15T15:50:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE2Nzg2MA=="}], "type": "inlineReview", "revised_code": {"commit": "c54367c8f326cd75bfa3059e97ac326f3ec6a78c", "chunk": "diff --git a/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/parameters/LocatableResourcePathParamExtractor.java b/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/parameters/LocatableResourcePathParamExtractor.java\ndeleted file mode 100644\nindex 76bb46097e..0000000000\n--- a/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/parameters/LocatableResourcePathParamExtractor.java\n+++ /dev/null\n\n@@ -1,60 +0,0 @@\n-package org.jboss.resteasy.reactive.server.core.parameters;\n-\n-import org.jboss.resteasy.reactive.server.core.ResteasyReactiveRequestContext;\n-import org.jboss.resteasy.reactive.server.mapping.URITemplate;\n-\n-public class LocatableResourcePathParamExtractor implements ParameterExtractor {\n-\n-    private final String name;\n-\n-    public LocatableResourcePathParamExtractor(String name) {\n-        this.name = name;\n-    }\n-\n-    @Override\n-    public Object extractParameter(ResteasyReactiveRequestContext context) {\n-        int index = findPathParamIndex(context.getLocatorTarget().getClassPath(), context.getLocatorTarget().getPath());\n-        if (index >= 0) {\n-            return context.getLocatorPathParam(index);\n-        }\n-        return null;\n-    }\n-\n-    private int findPathParamIndex(URITemplate classPathTemplate, URITemplate methodPathTemplate) {\n-        int index = 0;\n-        if (classPathTemplate != null) {\n-            for (URITemplate.TemplateComponent component : classPathTemplate.components) {\n-                if (component.name != null) {\n-                    if (component.name.equals(this.name)) {\n-                        return index;\n-                    }\n-                    index++;\n-                } else if (component.names != null) {\n-                    for (String nm : component.names) {\n-                        if (nm.equals(this.name)) {\n-                            return index;\n-                        }\n-                    }\n-                    index++;\n-                }\n-            }\n-        }\n-        for (URITemplate.TemplateComponent component : methodPathTemplate.components) {\n-            if (component.name != null) {\n-                if (component.name.equals(this.name)) {\n-                    return index;\n-                }\n-                index++;\n-            } else if (component.names != null) {\n-                for (String nm : component.names) {\n-                    if (nm.equals(this.name)) {\n-                        return index;\n-                    }\n-                }\n-                index++;\n-            }\n-        }\n-        return -1;\n-    }\n-\n-}\n"}}, {"oid": "c54367c8f326cd75bfa3059e97ac326f3ec6a78c", "url": "https://github.com/quarkusio/quarkus/commit/c54367c8f326cd75bfa3059e97ac326f3ec6a78c", "message": "Make sure that List<String> can be read as JSON input", "committedDate": "2020-12-15T11:15:28Z", "type": "commit"}, {"oid": "12c8376701630dac44b1a418150dbccf52e5dbe4", "url": "https://github.com/quarkusio/quarkus/commit/12c8376701630dac44b1a418150dbccf52e5dbe4", "message": "Handle path params in subresource methods", "committedDate": "2020-12-15T11:17:38Z", "type": "forcePushed"}, {"oid": "71eac4b802804dfeb903a357d405a240634aaa6b", "url": "https://github.com/quarkusio/quarkus/commit/71eac4b802804dfeb903a357d405a240634aaa6b", "message": "Also check for Object when a reader of an interface is needed", "committedDate": "2020-12-15T12:29:03Z", "type": "commit"}, {"oid": "3a792f76fca6418b1a3017d0c6904246918ad607", "url": "https://github.com/quarkusio/quarkus/commit/3a792f76fca6418b1a3017d0c6904246918ad607", "message": "Add generic handling test for MessageBodyReader", "committedDate": "2020-12-15T12:29:03Z", "type": "commit"}, {"oid": "4187c83c37f09d3f0cadc138bc96eab3393e90fa", "url": "https://github.com/quarkusio/quarkus/commit/4187c83c37f09d3f0cadc138bc96eab3393e90fa", "message": "Don't run ContainerRequestFilters on subresources\n\nThis behavior is similar to how RESTEasy behaves", "committedDate": "2020-12-15T12:29:03Z", "type": "commit"}, {"oid": "c3ebc9adea635df73eb099c806b31812ac2e43e8", "url": "https://github.com/quarkusio/quarkus/commit/c3ebc9adea635df73eb099c806b31812ac2e43e8", "message": "Handle path params in subresource methods", "committedDate": "2020-12-15T12:29:03Z", "type": "commit"}, {"oid": "c3ebc9adea635df73eb099c806b31812ac2e43e8", "url": "https://github.com/quarkusio/quarkus/commit/c3ebc9adea635df73eb099c806b31812ac2e43e8", "message": "Handle path params in subresource methods", "committedDate": "2020-12-15T12:29:03Z", "type": "forcePushed"}]}