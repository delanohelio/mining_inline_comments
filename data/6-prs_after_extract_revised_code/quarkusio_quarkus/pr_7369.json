{"pr_number": 7369, "pr_title": "S2i improvements", "pr_createdAt": "2020-02-23T21:05:23Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/7369", "timeline": [{"oid": "cad2f075a2f5f9ecbb7b6f2e838bc5eaedbd6876", "url": "https://github.com/quarkusio/quarkus/commit/cad2f075a2f5f9ecbb7b6f2e838bc5eaedbd6876", "message": "feat: make s2i build timeout configurable.", "committedDate": "2020-02-23T21:03:21Z", "type": "commit"}, {"oid": "60c2eb54335c7ddb7662f000fa5e267f081cc74e", "url": "https://github.com/quarkusio/quarkus/commit/60c2eb54335c7ddb7662f000fa5e267f081cc74e", "message": "feat: fallback to oc start build on stream reset.", "committedDate": "2020-02-23T21:09:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzAzODg5MA==", "url": "https://github.com/quarkusio/quarkus/pull/7369#discussion_r383038890", "bodyText": "I think we shouldn't use the backquotes here and just use regular ones", "author": "geoand", "createdAt": "2020-02-23T21:12:36Z", "path": "extensions/container-image/container-image-s2i/deployment/src/main/java/io/quarkus/container/image/s2i/deployment/S2iProcessor.java", "diffHunk": "@@ -227,9 +242,24 @@ private static void s2iBuild(KubernetesClient client, List<HasMetadata> buildRes\n      * @param buildConfig The build config.\n      * @param binaryFile The binary file.\n      */\n-    private static void s2iBuild(OpenShiftClient client, BuildConfig buildConfig, File binaryFile) {\n-        Build build = client.buildConfigs().withName(buildConfig.getMetadata().getName()).instantiateBinary()\n-                .fromFile(binaryFile);\n+    private static void s2iBuild(OpenShiftClient client, BuildConfig buildConfig, File binaryFile, S2iConfig s2iConfig) {\n+        Build build = null;\n+        try {\n+            build = client.buildConfigs().withName(buildConfig.getMetadata().getName()).instantiateBinary()\n+                    .withTimeoutInMillis(s2iConfig.buildTimeout.toMillis()).fromFile(binaryFile);\n+        } catch (Exception e) {\n+            if (e.getCause() instanceof StreamResetException) {\n+                LOG.warn(\"Stream was reset while building. Falling back to building with the `oc` binary.\");", "originalCommit": "60c2eb54335c7ddb7662f000fa5e267f081cc74e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e2d565de574764f669f189942de7b79fdcdd1623", "chunk": "diff --git a/extensions/container-image/container-image-s2i/deployment/src/main/java/io/quarkus/container/image/s2i/deployment/S2iProcessor.java b/extensions/container-image/container-image-s2i/deployment/src/main/java/io/quarkus/container/image/s2i/deployment/S2iProcessor.java\nindex 9181045883..3e7c93fd2b 100644\n--- a/extensions/container-image/container-image-s2i/deployment/src/main/java/io/quarkus/container/image/s2i/deployment/S2iProcessor.java\n+++ b/extensions/container-image/container-image-s2i/deployment/src/main/java/io/quarkus/container/image/s2i/deployment/S2iProcessor.java\n\n@@ -243,20 +243,20 @@ public class S2iProcessor {\n      * @param binaryFile The binary file.\n      */\n     private static void s2iBuild(OpenShiftClient client, BuildConfig buildConfig, File binaryFile, S2iConfig s2iConfig) {\n-        Build build = null;\n+        Build build;\n         try {\n             build = client.buildConfigs().withName(buildConfig.getMetadata().getName()).instantiateBinary()\n                     .withTimeoutInMillis(s2iConfig.buildTimeout.toMillis()).fromFile(binaryFile);\n         } catch (Exception e) {\n             if (e.getCause() instanceof StreamResetException) {\n-                LOG.warn(\"Stream was reset while building. Falling back to building with the `oc` binary.\");\n+                LOG.warn(\"Stream was reset while building. Falling back to building with the 'oc' binary.\");\n                 if (!ExecUtil.exec(\"oc\", \"start-build\", buildConfig.getMetadata().getName(), \"--from-archive\",\n                         binaryFile.toPath().toAbsolutePath().toString())) {\n-                    s2iException(e);\n+                    throw s2iException(e);\n                 }\n                 return;\n             } else {\n-                s2iException(e);\n+                throw s2iException(e);\n             }\n         }\n \n"}}, {"oid": "e2d565de574764f669f189942de7b79fdcdd1623", "url": "https://github.com/quarkusio/quarkus/commit/e2d565de574764f669f189942de7b79fdcdd1623", "message": "feat: fallback to oc start build on stream reset.", "committedDate": "2020-02-24T06:19:53Z", "type": "commit"}, {"oid": "e2d565de574764f669f189942de7b79fdcdd1623", "url": "https://github.com/quarkusio/quarkus/commit/e2d565de574764f669f189942de7b79fdcdd1623", "message": "feat: fallback to oc start build on stream reset.", "committedDate": "2020-02-24T06:19:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzExNjE5OQ==", "url": "https://github.com/quarkusio/quarkus/pull/7369#discussion_r383116199", "bodyText": "Are we only using binary s2i? For \"code\" s2i, 5 minutes won't be enough.", "author": "cescoffier", "createdAt": "2020-02-24T07:45:18Z", "path": "extensions/container-image/container-image-s2i/deployment/src/main/java/io/quarkus/container/image/s2i/deployment/S2iConfig.java", "diffHunk": "@@ -50,6 +51,12 @@\n     @ConfigItem(defaultValue = \"/home/quarkus/application\")\n     public String nativeBinaryPath;\n \n+    /**\n+     * The build timeout.\n+     */\n+    @ConfigItem(defaultValue = \"PT5M\")\n+    Duration buildTimeout;", "originalCommit": "e2d565de574764f669f189942de7b79fdcdd1623", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzExNjg3MA==", "url": "https://github.com/quarkusio/quarkus/pull/7369#discussion_r383116870", "bodyText": "Only binary at this point", "author": "geoand", "createdAt": "2020-02-24T07:47:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzExNjE5OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzExNjM1NQ==", "url": "https://github.com/quarkusio/quarkus/pull/7369#discussion_r383116355", "bodyText": "use a logger instead?", "author": "cescoffier", "createdAt": "2020-02-24T07:45:49Z", "path": "extensions/container-image/container-image-s2i/deployment/src/main/java/io/quarkus/container/image/s2i/deployment/S2iProcessor.java", "diffHunk": "@@ -227,16 +242,31 @@ private static void s2iBuild(KubernetesClient client, List<HasMetadata> buildRes\n      * @param buildConfig The build config.\n      * @param binaryFile The binary file.\n      */\n-    private static void s2iBuild(OpenShiftClient client, BuildConfig buildConfig, File binaryFile) {\n-        Build build = client.buildConfigs().withName(buildConfig.getMetadata().getName()).instantiateBinary()\n-                .fromFile(binaryFile);\n+    private static void s2iBuild(OpenShiftClient client, BuildConfig buildConfig, File binaryFile, S2iConfig s2iConfig) {\n+        Build build;\n+        try {\n+            build = client.buildConfigs().withName(buildConfig.getMetadata().getName()).instantiateBinary()\n+                    .withTimeoutInMillis(s2iConfig.buildTimeout.toMillis()).fromFile(binaryFile);\n+        } catch (Exception e) {\n+            if (e.getCause() instanceof StreamResetException) {\n+                LOG.warn(\"Stream was reset while building. Falling back to building with the 'oc' binary.\");\n+                if (!ExecUtil.exec(\"oc\", \"start-build\", buildConfig.getMetadata().getName(), \"--from-archive\",\n+                        binaryFile.toPath().toAbsolutePath().toString())) {\n+                    throw s2iException(e);\n+                }\n+                return;\n+            } else {\n+                throw s2iException(e);\n+            }\n+        }\n+\n         try (BufferedReader reader = new BufferedReader(\n                 client.builds().withName(build.getMetadata().getName()).getLogReader())) {\n             for (String line = reader.readLine(); line != null; line = reader.readLine()) {\n                 System.out.println(line);", "originalCommit": "e2d565de574764f669f189942de7b79fdcdd1623", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzExNzk4MA==", "url": "https://github.com/quarkusio/quarkus/pull/7369#discussion_r383117980", "bodyText": "\ud83d\udc4d , fixed", "author": "geoand", "createdAt": "2020-02-24T07:51:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzExNjM1NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzExNjczNw==", "url": "https://github.com/quarkusio/quarkus/pull/7369#discussion_r383116737", "bodyText": "Wondering if at some point we should get the oc client from the OpenShift instance. We had incompatibilities in the past and it would avoid having the user install oc.", "author": "cescoffier", "createdAt": "2020-02-24T07:47:03Z", "path": "extensions/container-image/container-image-s2i/deployment/src/main/java/io/quarkus/container/image/s2i/deployment/S2iProcessor.java", "diffHunk": "@@ -227,16 +242,31 @@ private static void s2iBuild(KubernetesClient client, List<HasMetadata> buildRes\n      * @param buildConfig The build config.\n      * @param binaryFile The binary file.\n      */\n-    private static void s2iBuild(OpenShiftClient client, BuildConfig buildConfig, File binaryFile) {\n-        Build build = client.buildConfigs().withName(buildConfig.getMetadata().getName()).instantiateBinary()\n-                .fromFile(binaryFile);\n+    private static void s2iBuild(OpenShiftClient client, BuildConfig buildConfig, File binaryFile, S2iConfig s2iConfig) {\n+        Build build;\n+        try {\n+            build = client.buildConfigs().withName(buildConfig.getMetadata().getName()).instantiateBinary()\n+                    .withTimeoutInMillis(s2iConfig.buildTimeout.toMillis()).fromFile(binaryFile);\n+        } catch (Exception e) {\n+            if (e.getCause() instanceof StreamResetException) {\n+                LOG.warn(\"Stream was reset while building. Falling back to building with the 'oc' binary.\");\n+                if (!ExecUtil.exec(\"oc\", \"start-build\", buildConfig.getMetadata().getName(), \"--from-archive\",", "originalCommit": "e2d565de574764f669f189942de7b79fdcdd1623", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzExNzE0Mg==", "url": "https://github.com/quarkusio/quarkus/pull/7369#discussion_r383117142", "bodyText": "This is only a fallback that @iocanel added because he saw the client failing is some weird circumstances. I'll leave it up to him to decide", "author": "geoand", "createdAt": "2020-02-24T07:48:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzExNjczNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzExNzU0NA==", "url": "https://github.com/quarkusio/quarkus/pull/7369#discussion_r383117544", "bodyText": "Agree, I don't like the idea of having the user depend on any kind of binary. This is just a fallback mechanism to work around a known issue in the client.", "author": "iocanel", "createdAt": "2020-02-24T07:50:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzExNjczNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzExOTcxNQ==", "url": "https://github.com/quarkusio/quarkus/pull/7369#discussion_r383119715", "bodyText": "Never tried to grab the binary from the instance, I will have a look.", "author": "iocanel", "createdAt": "2020-02-24T07:57:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzExNjczNw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "5e2a9f317e069169a3ee9fcc79bb4ac2d13b2b12", "url": "https://github.com/quarkusio/quarkus/commit/5e2a9f317e069169a3ee9fcc79bb4ac2d13b2b12", "message": "refactor: use generic artifact names in s2i builds", "committedDate": "2020-02-24T13:26:35Z", "type": "commit"}]}