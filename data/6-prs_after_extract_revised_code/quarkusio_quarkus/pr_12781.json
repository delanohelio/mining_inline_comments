{"pr_number": 12781, "pr_title": "Improved MongoHealthCheck to include reactiveClients", "pr_createdAt": "2020-10-19T09:03:35Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/12781", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYxMDc1MQ==", "url": "https://github.com/quarkusio/quarkus/pull/12781#discussion_r507610751", "bodyText": "@mkouba wondering if there is an ArC API allowing to avoid the BeanManager call then the individual ArC calls below?\nLooks like select is not \"cross-qualifiers\" so wouldn't get all the instances or am I wrong?", "author": "gsmet", "createdAt": "2020-10-19T09:40:44Z", "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/health/MongoHealthCheck.java", "diffHunk": "@@ -17,40 +16,78 @@\n import com.mongodb.client.MongoClient;\n \n import io.quarkus.arc.Arc;\n+import io.quarkus.mongodb.MongoClientName;\n+import io.quarkus.mongodb.reactive.ReactiveMongoClient;\n \n @Readiness\n @ApplicationScoped\n public class MongoHealthCheck implements HealthCheck {\n-    private static final String DEFAULT_CLIENT = \"__default__\";\n+\n     private Map<String, MongoClient> clients = new HashMap<>();\n+    private Map<String, ReactiveMongoClient> reactiveClients = new HashMap<>();\n \n     @PostConstruct\n     protected void init() {\n-        Set<Bean<?>> beans = Arc.container().beanManager().getBeans(MongoClient.class);\n-        for (Bean<?> bean : beans) {\n+        for (Bean<?> bean : Arc.container().beanManager().getBeans(MongoClient.class)) {", "originalCommit": "af3c346e6ceb0cb3cef152071b6539281f8c014e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY3NTI4Nw==", "url": "https://github.com/quarkusio/quarkus/pull/12781#discussion_r507675287", "bodyText": "I'm not quite sure what \"cross-qualifiers\" means but you can do Arc.container().select(MongoClient.class, Any.Literal.INSTANCE) to obtain all beans that satisfy the MongoClient required type no matter what other qualifiers are defined. But then in order to be able to access the qualifiers for each bean instance you would have to iterate over the instance handles, i.e. something like:\nfor (InstanceHandle<MongoClient> handle : Arc.container().select(MongoClient.class, Any.Literal.INSTANCE).handles()) {\n     String clientName = getMongoClientName(handle.getBean());\n     .... // I'm not sure about the bean.getName() part?\n     clients.put(clientName == null ? \"default\" : clientName, handle.get());\n}\nIn any case, the (MongoClient) Arc.container().instance(bean.getName()).get() part does not seem to be very safe...", "author": "mkouba", "createdAt": "2020-10-19T11:34:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYxMDc1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcxNjkxNQ==", "url": "https://github.com/quarkusio/quarkus/pull/12781#discussion_r507716915", "bodyText": "The (MongoClient) Arc.container().instance(bean.getName()).get() came really from previous implementation.", "author": "lkrzyzanek", "createdAt": "2020-10-19T12:46:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYxMDc1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzczODc0OA==", "url": "https://github.com/quarkusio/quarkus/pull/12781#discussion_r507738748", "bodyText": "@mkouba If I remember correctly when there is multiple beans of the same type, only one can have no name (so `bean.getName() return null) and the other will have a name. At least for MongoDB this is how we create them (at least when we created the health check).\nThis is also how it is done on the Datasource extension (OK, both are my impl so it's normal): https://github.com/quarkusio/quarkus/blob/master/extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/health/DataSourceHealthCheck.java#L28\nIf we change it here, we may change it in all extensions that have such health checks.", "author": "loicmathieu", "createdAt": "2020-10-19T13:19:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYxMDc1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc0NjE5Mw==", "url": "https://github.com/quarkusio/quarkus/pull/12781#discussion_r507746193", "bodyText": "If I remember correctly when there is multiple beans of the same type, only one can have no name...\n\n@loicmathieu Hm, only one can have the @Default qualifier (i.e. a bean does not explicitly declare a qualifier other than @Named or @Any). bean.getName() merely returns the name if it's annotated with @Named...", "author": "mkouba", "createdAt": "2020-10-19T13:29:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYxMDc1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgzNDEzNQ==", "url": "https://github.com/quarkusio/quarkus/pull/12781#discussion_r507834135", "bodyText": "So it only worked because we programmatically add the @Named annotation whene generating the named client inside the processor.\nI checked on Agroal and this is also the case.", "author": "loicmathieu", "createdAt": "2020-10-19T15:13:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYxMDc1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgzNTU0MA==", "url": "https://github.com/quarkusio/quarkus/pull/12781#discussion_r507835540", "bodyText": "I'll review the other health check impl to align with this one.", "author": "loicmathieu", "createdAt": "2020-10-19T15:15:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYxMDc1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg0NzIxOQ==", "url": "https://github.com/quarkusio/quarkus/pull/12781#discussion_r507847219", "bodyText": "Thanks @mkouba , that's exactly what I was asking. Good to know about Any.\n@lkrzyzanek yeah, I know it was preexisting but it's a good opportunity to fix this! Thanks for making the changes.", "author": "gsmet", "createdAt": "2020-10-19T15:30:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYxMDc1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA2NzQ2Nw==", "url": "https://github.com/quarkusio/quarkus/pull/12781#discussion_r508067467", "bodyText": "Thanks @mkouba @gsmet for raising this one. I think we'll need to do the same for the redis-client extension too. I'll do it in a separate PR sometime this week.", "author": "machi1990", "createdAt": "2020-10-19T21:16:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYxMDc1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "fa625816cdae1528dc50eb84a6ab0e3d5f5f1ac0", "chunk": "diff --git a/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/health/MongoHealthCheck.java b/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/health/MongoHealthCheck.java\nindex e2f717e22f..bd37fefce0 100644\n--- a/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/health/MongoHealthCheck.java\n+++ b/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/health/MongoHealthCheck.java\n\n@@ -23,34 +25,22 @@ import io.quarkus.mongodb.reactive.ReactiveMongoClient;\n @ApplicationScoped\n public class MongoHealthCheck implements HealthCheck {\n \n+    public static final String DEFAULT = \"<default>\";\n+    public static final String DEFAULT_REACTIVE = \"<default-reactive>\";\n+\n     private Map<String, MongoClient> clients = new HashMap<>();\n     private Map<String, ReactiveMongoClient> reactiveClients = new HashMap<>();\n \n     @PostConstruct\n     protected void init() {\n-        for (Bean<?> bean : Arc.container().beanManager().getBeans(MongoClient.class)) {\n-            // Get client name from annotation because InjectableBean.getName() returns always null.\n-            String clientName = getMongoClientName(bean);\n-            MongoClient client;\n-            if (bean.getName() == null) {\n-                // this is the default mongo client: retrieve it by type\n-                client = Arc.container().instance(MongoClient.class).get();\n-            } else {\n-                client = (MongoClient) Arc.container().instance(bean.getName()).get();\n-            }\n-            clients.put(clientName == null ? \"default\" : clientName, client);\n+        for (InstanceHandle<MongoClient> handle : Arc.container().select(MongoClient.class, Any.Literal.INSTANCE).handles()) {\n+            String clientName = getMongoClientName(handle.getBean());\n+            clients.put(clientName == null ? DEFAULT : clientName, handle.get());\n         }\n         // reactive clients\n-        for (Bean<?> bean : Arc.container().beanManager().getBeans(ReactiveMongoClient.class)) {\n-            String clientName = getMongoClientName(bean);\n-            ReactiveMongoClient client;\n-            if (bean.getName() == null) {\n-                // this is the default mongo client: retrieve it by type\n-                client = Arc.container().instance(ReactiveMongoClient.class).get();\n-            } else {\n-                client = (ReactiveMongoClient) Arc.container().instance(bean.getName()).get();\n-            }\n-            reactiveClients.put(clientName == null ? \"defaultReactive\" : clientName, client);\n+        for (InstanceHandle<ReactiveMongoClient> handle : Arc.container().select(ReactiveMongoClient.class, Any.Literal.INSTANCE).handles()) {\n+            String clientName = getMongoClientName(handle.getBean());\n+            reactiveClients.put(clientName == null ? DEFAULT_REACTIVE : clientName, handle.get());\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYxMjMzMw==", "url": "https://github.com/quarkusio/quarkus/pull/12781#discussion_r507612333", "bodyText": "In other parts of the code, we use <default> so I would go with <default> and <default-reactive>.\nAlso let's make them public constants that you can use in the tests. It's more practical and doesn't cost much.", "author": "gsmet", "createdAt": "2020-10-19T09:43:02Z", "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/health/MongoHealthCheck.java", "diffHunk": "@@ -17,40 +16,78 @@\n import com.mongodb.client.MongoClient;\n \n import io.quarkus.arc.Arc;\n+import io.quarkus.mongodb.MongoClientName;\n+import io.quarkus.mongodb.reactive.ReactiveMongoClient;\n \n @Readiness\n @ApplicationScoped\n public class MongoHealthCheck implements HealthCheck {\n-    private static final String DEFAULT_CLIENT = \"__default__\";\n+\n     private Map<String, MongoClient> clients = new HashMap<>();\n+    private Map<String, ReactiveMongoClient> reactiveClients = new HashMap<>();\n \n     @PostConstruct\n     protected void init() {\n-        Set<Bean<?>> beans = Arc.container().beanManager().getBeans(MongoClient.class);\n-        for (Bean<?> bean : beans) {\n+        for (Bean<?> bean : Arc.container().beanManager().getBeans(MongoClient.class)) {\n+            // Get client name from annotation because InjectableBean.getName() returns always null.\n+            String clientName = getMongoClientName(bean);\n+            MongoClient client;\n             if (bean.getName() == null) {\n                 // this is the default mongo client: retrieve it by type\n-                MongoClient defaultClient = Arc.container().instance(MongoClient.class).get();\n-                clients.put(DEFAULT_CLIENT, defaultClient);\n+                client = Arc.container().instance(MongoClient.class).get();\n             } else {\n-                MongoClient client = (MongoClient) Arc.container().instance(bean.getName()).get();\n-                clients.put(bean.getName(), client);\n+                client = (MongoClient) Arc.container().instance(bean.getName()).get();\n+            }\n+            clients.put(clientName == null ? \"default\" : clientName, client);", "originalCommit": "af3c346e6ceb0cb3cef152071b6539281f8c014e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYyNDI1MA==", "url": "https://github.com/quarkusio/quarkus/pull/12781#discussion_r507624250", "bodyText": "This would be a small breaking change in case some people parsed the response and search for __default__ but for cross extension consistancy I'm OK with it.", "author": "loicmathieu", "createdAt": "2020-10-19T10:01:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYxMjMzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYyODcxOQ==", "url": "https://github.com/quarkusio/quarkus/pull/12781#discussion_r507628719", "bodyText": "sure thing. Will change it after first question answer.", "author": "lkrzyzanek", "createdAt": "2020-10-19T10:09:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYxMjMzMw=="}], "type": "inlineReview", "revised_code": {"commit": "fa625816cdae1528dc50eb84a6ab0e3d5f5f1ac0", "chunk": "diff --git a/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/health/MongoHealthCheck.java b/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/health/MongoHealthCheck.java\nindex e2f717e22f..bd37fefce0 100644\n--- a/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/health/MongoHealthCheck.java\n+++ b/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/health/MongoHealthCheck.java\n\n@@ -23,34 +25,22 @@ import io.quarkus.mongodb.reactive.ReactiveMongoClient;\n @ApplicationScoped\n public class MongoHealthCheck implements HealthCheck {\n \n+    public static final String DEFAULT = \"<default>\";\n+    public static final String DEFAULT_REACTIVE = \"<default-reactive>\";\n+\n     private Map<String, MongoClient> clients = new HashMap<>();\n     private Map<String, ReactiveMongoClient> reactiveClients = new HashMap<>();\n \n     @PostConstruct\n     protected void init() {\n-        for (Bean<?> bean : Arc.container().beanManager().getBeans(MongoClient.class)) {\n-            // Get client name from annotation because InjectableBean.getName() returns always null.\n-            String clientName = getMongoClientName(bean);\n-            MongoClient client;\n-            if (bean.getName() == null) {\n-                // this is the default mongo client: retrieve it by type\n-                client = Arc.container().instance(MongoClient.class).get();\n-            } else {\n-                client = (MongoClient) Arc.container().instance(bean.getName()).get();\n-            }\n-            clients.put(clientName == null ? \"default\" : clientName, client);\n+        for (InstanceHandle<MongoClient> handle : Arc.container().select(MongoClient.class, Any.Literal.INSTANCE).handles()) {\n+            String clientName = getMongoClientName(handle.getBean());\n+            clients.put(clientName == null ? DEFAULT : clientName, handle.get());\n         }\n         // reactive clients\n-        for (Bean<?> bean : Arc.container().beanManager().getBeans(ReactiveMongoClient.class)) {\n-            String clientName = getMongoClientName(bean);\n-            ReactiveMongoClient client;\n-            if (bean.getName() == null) {\n-                // this is the default mongo client: retrieve it by type\n-                client = Arc.container().instance(ReactiveMongoClient.class).get();\n-            } else {\n-                client = (ReactiveMongoClient) Arc.container().instance(bean.getName()).get();\n-            }\n-            reactiveClients.put(clientName == null ? \"defaultReactive\" : clientName, client);\n+        for (InstanceHandle<ReactiveMongoClient> handle : Arc.container().select(ReactiveMongoClient.class, Any.Literal.INSTANCE).handles()) {\n+            String clientName = getMongoClientName(handle.getBean());\n+            reactiveClients.put(clientName == null ? DEFAULT_REACTIVE : clientName, handle.get());\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYyNjA0MQ==", "url": "https://github.com/quarkusio/quarkus/pull/12781#discussion_r507626041", "bodyText": "wildcard imports are prohibited", "author": "loicmathieu", "createdAt": "2020-10-19T10:05:02Z", "path": "integration-tests/mongodb-client/src/test/java/io/quarkus/it/mongodb/BookResourceTest.java", "diffHunk": "@@ -1,8 +1,7 @@\n package io.quarkus.it.mongodb;\n \n import static io.restassured.RestAssured.get;\n-import static org.hamcrest.Matchers.containsInAnyOrder;\n-import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.*;", "originalCommit": "af3c346e6ceb0cb3cef152071b6539281f8c014e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY1ODg2OA==", "url": "https://github.com/quarkusio/quarkus/pull/12781#discussion_r507658868", "bodyText": "not sure why IDEA formatted it in this way even I use quarkus formatter. I can change it manually.\nRegarding default - 1.9.0.Final returns default not __default__ (see source ). That's why I kept default in my commit. But changing it to <default> it would be minor breaking change.", "author": "lkrzyzanek", "createdAt": "2020-10-19T11:03:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYyNjA0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY2MDA3NQ==", "url": "https://github.com/quarkusio/quarkus/pull/12781#discussion_r507660075", "bodyText": "I wonder if we should provides two health checks instead of one, when reactive health check will lands we may split synchrone and reactive client health checks.\n\nIt makes sense to me. But I'll leave decision on you folks.", "author": "lkrzyzanek", "createdAt": "2020-10-19T11:05:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYyNjA0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "fa625816cdae1528dc50eb84a6ab0e3d5f5f1ac0", "chunk": "diff --git a/integration-tests/mongodb-client/src/test/java/io/quarkus/it/mongodb/BookResourceTest.java b/integration-tests/mongodb-client/src/test/java/io/quarkus/it/mongodb/BookResourceTest.java\nindex 94d475cde6..47f275b9dc 100644\n--- a/integration-tests/mongodb-client/src/test/java/io/quarkus/it/mongodb/BookResourceTest.java\n+++ b/integration-tests/mongodb-client/src/test/java/io/quarkus/it/mongodb/BookResourceTest.java\n\n@@ -1,7 +1,9 @@\n package io.quarkus.it.mongodb;\n \n import static io.restassured.RestAssured.get;\n-import static org.hamcrest.Matchers.*;\n+import static org.hamcrest.Matchers.containsInAnyOrder;\n+import static org.hamcrest.Matchers.hasKey;\n+import static org.hamcrest.Matchers.is;\n \n import java.util.Arrays;\n import java.util.Collections;\n"}}, {"oid": "fa625816cdae1528dc50eb84a6ab0e3d5f5f1ac0", "url": "https://github.com/quarkusio/quarkus/commit/fa625816cdae1528dc50eb84a6ab0e3d5f5f1ac0", "message": "applying feedback from PR", "committedDate": "2020-10-19T13:25:58Z", "type": "forcePushed"}, {"oid": "639557d74791469f216953af23f858912c1b2a2f", "url": "https://github.com/quarkusio/quarkus/commit/639557d74791469f216953af23f858912c1b2a2f", "message": "applying feedback from PR", "committedDate": "2020-10-19T13:32:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg0NTU5NA==", "url": "https://github.com/quarkusio/quarkus/pull/12781#discussion_r507845594", "bodyText": "Should it be reactive client or will it be clear from the name? I don't know if you can have both with the same name?", "author": "gsmet", "createdAt": "2020-10-19T15:28:38Z", "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/health/MongoHealthCheck.java", "diffHunk": "@@ -17,40 +17,68 @@\n import com.mongodb.client.MongoClient;\n \n import io.quarkus.arc.Arc;\n+import io.quarkus.arc.InstanceHandle;\n+import io.quarkus.mongodb.MongoClientName;\n+import io.quarkus.mongodb.reactive.ReactiveMongoClient;\n \n @Readiness\n @ApplicationScoped\n public class MongoHealthCheck implements HealthCheck {\n-    private static final String DEFAULT_CLIENT = \"__default__\";\n+\n+    public static final String CLIENT_DEFAULT = \"<default>\";\n+    public static final String CLIENT_DEFAULT_REACTIVE = \"<default-reactive>\";\n+\n     private Map<String, MongoClient> clients = new HashMap<>();\n+    private Map<String, ReactiveMongoClient> reactiveClients = new HashMap<>();\n \n     @PostConstruct\n     protected void init() {\n-        Set<Bean<?>> beans = Arc.container().beanManager().getBeans(MongoClient.class);\n-        for (Bean<?> bean : beans) {\n-            if (bean.getName() == null) {\n-                // this is the default mongo client: retrieve it by type\n-                MongoClient defaultClient = Arc.container().instance(MongoClient.class).get();\n-                clients.put(DEFAULT_CLIENT, defaultClient);\n-            } else {\n-                MongoClient client = (MongoClient) Arc.container().instance(bean.getName()).get();\n-                clients.put(bean.getName(), client);\n+        for (InstanceHandle<MongoClient> handle : Arc.container().select(MongoClient.class, Any.Literal.INSTANCE).handles()) {\n+            String clientName = getMongoClientName(handle.getBean());\n+            clients.put(clientName == null ? CLIENT_DEFAULT : clientName, handle.get());\n+        }\n+        // reactive clients\n+        for (InstanceHandle<ReactiveMongoClient> handle : Arc.container()\n+                .select(ReactiveMongoClient.class, Any.Literal.INSTANCE).handles()) {\n+            String clientName = getMongoClientName(handle.getBean());\n+            reactiveClients.put(clientName == null ? CLIENT_DEFAULT_REACTIVE : clientName, handle.get());\n+        }\n+    }\n+\n+    /**\n+     * Get mongoClient name if defined.\n+     *\n+     * @param bean\n+     * @return mongoClient name or null if not defined\n+     * @see MongoClientName\n+     */\n+    private String getMongoClientName(Bean bean) {\n+        for (Object qualifier : bean.getQualifiers()) {\n+            if (qualifier instanceof MongoClientName) {\n+                return ((MongoClientName) qualifier).value();\n             }\n         }\n+        return null;\n     }\n \n     @Override\n     public HealthCheckResponse call() {\n         HealthCheckResponseBuilder builder = HealthCheckResponse.named(\"MongoDB connection health check\").up();\n+        Document command = new Document(\"ping\", 1);\n         for (Map.Entry<String, MongoClient> client : clients.entrySet()) {\n-            boolean isDefault = DEFAULT_CLIENT.equals(client.getKey());\n-            MongoClient mongoClient = client.getValue();\n             try {\n-                Document document = mongoClient.getDatabase(\"admin\").runCommand(new Document(\"ping\", 1));\n-                String mongoClientName = isDefault ? \"default\" : client.getKey();\n-                builder.up().withData(mongoClientName, document.toJson());\n+                Document document = client.getValue().getDatabase(\"admin\").runCommand(command);\n+                builder.up().withData(client.getKey(), document.toJson());\n+            } catch (Exception e) {\n+                return builder.down().withData(\"reason\", \"client [\" + client.getKey() + \"]: \" + e.getMessage()).build();\n+            }\n+        }\n+        for (Map.Entry<String, ReactiveMongoClient> client : reactiveClients.entrySet()) {\n+            try {\n+                Document document = client.getValue().getDatabase(\"admin\").runCommand(command).await().indefinitely();\n+                builder.up().withData(client.getKey(), document.toJson());\n             } catch (Exception e) {\n-                return builder.down().withData(\"reason\", e.getMessage()).build();\n+                return builder.down().withData(\"reason\", \"client [\" + client.getKey() + \"]: \" + e.getMessage()).build();", "originalCommit": "639557d74791469f216953af23f858912c1b2a2f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg0Nzk0OA==", "url": "https://github.com/quarkusio/quarkus/pull/12781#discussion_r507847948", "bodyText": "it will be either <default-reactive> or the given client name.", "author": "lkrzyzanek", "createdAt": "2020-10-19T15:31:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg0NTU5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg0OTA2Ng==", "url": "https://github.com/quarkusio/quarkus/pull/12781#discussion_r507849066", "bodyText": "Good point! @lkrzyzanek may I ask you to update this line with 'reactive' to distinguish the two clients?", "author": "loicmathieu", "createdAt": "2020-10-19T15:33:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg0NTU5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg1MjMxNg==", "url": "https://github.com/quarkusio/quarkus/pull/12781#discussion_r507852316", "bodyText": "done", "author": "lkrzyzanek", "createdAt": "2020-10-19T15:37:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg0NTU5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg1NTE1Mg==", "url": "https://github.com/quarkusio/quarkus/pull/12781#discussion_r507855152", "bodyText": "Also if you can register both with the same name, wondering if the withData will be overridden. I'll let @loicmathieu confirm if it's a problem or not.", "author": "gsmet", "createdAt": "2020-10-19T15:41:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg0NTU5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg2NDE5Mw==", "url": "https://github.com/quarkusio/quarkus/pull/12781#discussion_r507864193", "bodyText": "It's not possible today to register both synchronous and reactive client with the same name as both will have the same @Named annotation as we add it to the client.\nOn MP Health side, this wil generate two data with the same key so it would generates an invalid JSON.\nI propose to keep it this way for now, on normal case, a user should use synchronous or reactive client not both (we may split the extension in two some day).", "author": "loicmathieu", "createdAt": "2020-10-19T15:52:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg0NTU5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg2Njc4Ng==", "url": "https://github.com/quarkusio/quarkus/pull/12781#discussion_r507866786", "bodyText": "On MP Health side, this wil generate two data with the same key so it would generates an invalid JSON.\n\nThis is wrong as we produce one check by client so we are good.", "author": "loicmathieu", "createdAt": "2020-10-19T15:55:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg0NTU5NA=="}], "type": "inlineReview", "revised_code": {"commit": "cefe58bc81fdbc8628fc72a191217f1d77d10901", "chunk": "diff --git a/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/health/MongoHealthCheck.java b/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/health/MongoHealthCheck.java\nindex 417af52160..431afa2752 100644\n--- a/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/health/MongoHealthCheck.java\n+++ b/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/health/MongoHealthCheck.java\n\n@@ -78,7 +78,7 @@ public class MongoHealthCheck implements HealthCheck {\n                 Document document = client.getValue().getDatabase(\"admin\").runCommand(command).await().indefinitely();\n                 builder.up().withData(client.getKey(), document.toJson());\n             } catch (Exception e) {\n-                return builder.down().withData(\"reason\", \"client [\" + client.getKey() + \"]: \" + e.getMessage()).build();\n+                return builder.down().withData(\"reason\", \"reactive-client [\" + client.getKey() + \"]: \" + e.getMessage()).build();\n             }\n         }\n         return builder.build();\n"}}, {"oid": "6dc3d41d9d8d71cb7279c97660b173d869b20c55", "url": "https://github.com/quarkusio/quarkus/commit/6dc3d41d9d8d71cb7279c97660b173d869b20c55", "message": "Improved MongoHealthCheck to include reactiveClients", "committedDate": "2020-10-19T15:32:33Z", "type": "forcePushed"}, {"oid": "cefe58bc81fdbc8628fc72a191217f1d77d10901", "url": "https://github.com/quarkusio/quarkus/commit/cefe58bc81fdbc8628fc72a191217f1d77d10901", "message": "Improved MongoHealthCheck to include reactiveClients", "committedDate": "2020-10-19T15:36:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg1ODE0OA==", "url": "https://github.com/quarkusio/quarkus/pull/12781#discussion_r507858148", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            return builder.down().withData(\"reason\", \"reactive-client [\" + client.getKey() + \"]: \" + e.getMessage()).build();\n          \n          \n            \n                            return builder.down().withData(\"reason\", \"reactive client [\" + client.getKey() + \"]: \" + e.getMessage()).build();", "author": "loicmathieu", "createdAt": "2020-10-19T15:45:16Z", "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/health/MongoHealthCheck.java", "diffHunk": "@@ -17,40 +17,68 @@\n import com.mongodb.client.MongoClient;\n \n import io.quarkus.arc.Arc;\n+import io.quarkus.arc.InstanceHandle;\n+import io.quarkus.mongodb.MongoClientName;\n+import io.quarkus.mongodb.reactive.ReactiveMongoClient;\n \n @Readiness\n @ApplicationScoped\n public class MongoHealthCheck implements HealthCheck {\n-    private static final String DEFAULT_CLIENT = \"__default__\";\n+\n+    public static final String CLIENT_DEFAULT = \"<default>\";\n+    public static final String CLIENT_DEFAULT_REACTIVE = \"<default-reactive>\";\n+\n     private Map<String, MongoClient> clients = new HashMap<>();\n+    private Map<String, ReactiveMongoClient> reactiveClients = new HashMap<>();\n \n     @PostConstruct\n     protected void init() {\n-        Set<Bean<?>> beans = Arc.container().beanManager().getBeans(MongoClient.class);\n-        for (Bean<?> bean : beans) {\n-            if (bean.getName() == null) {\n-                // this is the default mongo client: retrieve it by type\n-                MongoClient defaultClient = Arc.container().instance(MongoClient.class).get();\n-                clients.put(DEFAULT_CLIENT, defaultClient);\n-            } else {\n-                MongoClient client = (MongoClient) Arc.container().instance(bean.getName()).get();\n-                clients.put(bean.getName(), client);\n+        for (InstanceHandle<MongoClient> handle : Arc.container().select(MongoClient.class, Any.Literal.INSTANCE).handles()) {\n+            String clientName = getMongoClientName(handle.getBean());\n+            clients.put(clientName == null ? CLIENT_DEFAULT : clientName, handle.get());\n+        }\n+        // reactive clients\n+        for (InstanceHandle<ReactiveMongoClient> handle : Arc.container()\n+                .select(ReactiveMongoClient.class, Any.Literal.INSTANCE).handles()) {\n+            String clientName = getMongoClientName(handle.getBean());\n+            reactiveClients.put(clientName == null ? CLIENT_DEFAULT_REACTIVE : clientName, handle.get());\n+        }\n+    }\n+\n+    /**\n+     * Get mongoClient name if defined.\n+     *\n+     * @param bean\n+     * @return mongoClient name or null if not defined\n+     * @see MongoClientName\n+     */\n+    private String getMongoClientName(Bean bean) {\n+        for (Object qualifier : bean.getQualifiers()) {\n+            if (qualifier instanceof MongoClientName) {\n+                return ((MongoClientName) qualifier).value();\n             }\n         }\n+        return null;\n     }\n \n     @Override\n     public HealthCheckResponse call() {\n         HealthCheckResponseBuilder builder = HealthCheckResponse.named(\"MongoDB connection health check\").up();\n+        Document command = new Document(\"ping\", 1);\n         for (Map.Entry<String, MongoClient> client : clients.entrySet()) {\n-            boolean isDefault = DEFAULT_CLIENT.equals(client.getKey());\n-            MongoClient mongoClient = client.getValue();\n             try {\n-                Document document = mongoClient.getDatabase(\"admin\").runCommand(new Document(\"ping\", 1));\n-                String mongoClientName = isDefault ? \"default\" : client.getKey();\n-                builder.up().withData(mongoClientName, document.toJson());\n+                Document document = client.getValue().getDatabase(\"admin\").runCommand(command);\n+                builder.up().withData(client.getKey(), document.toJson());\n+            } catch (Exception e) {\n+                return builder.down().withData(\"reason\", \"client [\" + client.getKey() + \"]: \" + e.getMessage()).build();\n+            }\n+        }\n+        for (Map.Entry<String, ReactiveMongoClient> client : reactiveClients.entrySet()) {\n+            try {\n+                Document document = client.getValue().getDatabase(\"admin\").runCommand(command).await().indefinitely();\n+                builder.up().withData(client.getKey(), document.toJson());\n             } catch (Exception e) {\n-                return builder.down().withData(\"reason\", e.getMessage()).build();\n+                return builder.down().withData(\"reason\", \"reactive-client [\" + client.getKey() + \"]: \" + e.getMessage()).build();", "originalCommit": "cefe58bc81fdbc8628fc72a191217f1d77d10901", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk2Mzc2Mg==", "url": "https://github.com/quarkusio/quarkus/pull/12781#discussion_r507963762", "bodyText": "sure thing. done.", "author": "lkrzyzanek", "createdAt": "2020-10-19T18:12:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg1ODE0OA=="}], "type": "inlineReview", "revised_code": {"commit": "617941d96a9f12ce150805e81c01c90dbfe1fc21", "chunk": "diff --git a/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/health/MongoHealthCheck.java b/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/health/MongoHealthCheck.java\nindex 431afa2752..7b4dfba7a7 100644\n--- a/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/health/MongoHealthCheck.java\n+++ b/extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/health/MongoHealthCheck.java\n\n@@ -78,7 +78,7 @@ public class MongoHealthCheck implements HealthCheck {\n                 Document document = client.getValue().getDatabase(\"admin\").runCommand(command).await().indefinitely();\n                 builder.up().withData(client.getKey(), document.toJson());\n             } catch (Exception e) {\n-                return builder.down().withData(\"reason\", \"reactive-client [\" + client.getKey() + \"]: \" + e.getMessage()).build();\n+                return builder.down().withData(\"reason\", \"reactive client [\" + client.getKey() + \"]: \" + e.getMessage()).build();\n             }\n         }\n         return builder.build();\n"}}, {"oid": "617941d96a9f12ce150805e81c01c90dbfe1fc21", "url": "https://github.com/quarkusio/quarkus/commit/617941d96a9f12ce150805e81c01c90dbfe1fc21", "message": "Improved MongoHealthCheck to include reactiveClients", "committedDate": "2020-10-19T18:11:55Z", "type": "forcePushed"}, {"oid": "a950aa79f81f19cdcb05912c3f919d4e2474b887", "url": "https://github.com/quarkusio/quarkus/commit/a950aa79f81f19cdcb05912c3f919d4e2474b887", "message": "Improved MongoHealthCheck to include reactiveClients", "committedDate": "2020-10-19T18:15:06Z", "type": "forcePushed"}, {"oid": "b5d954543b8a3c6f65acfede0bdec88639d151f4", "url": "https://github.com/quarkusio/quarkus/commit/b5d954543b8a3c6f65acfede0bdec88639d151f4", "message": "Improved MongoHealthCheck to include reactiveClients", "committedDate": "2020-10-19T18:58:01Z", "type": "commit"}, {"oid": "b5d954543b8a3c6f65acfede0bdec88639d151f4", "url": "https://github.com/quarkusio/quarkus/commit/b5d954543b8a3c6f65acfede0bdec88639d151f4", "message": "Improved MongoHealthCheck to include reactiveClients", "committedDate": "2020-10-19T18:58:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA2Njc3Mg==", "url": "https://github.com/quarkusio/quarkus/pull/12781#discussion_r508066772", "bodyText": "Instead of blocking indefinitely, maybe we can introduce a timeout of 10s with something like .await()..atMost(Duration.ofSeconds(10));.", "author": "machi1990", "createdAt": "2020-10-19T21:15:16Z", "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/health/MongoHealthCheck.java", "diffHunk": "@@ -17,40 +17,69 @@\n import com.mongodb.client.MongoClient;\n \n import io.quarkus.arc.Arc;\n+import io.quarkus.arc.InstanceHandle;\n+import io.quarkus.mongodb.MongoClientName;\n+import io.quarkus.mongodb.reactive.ReactiveMongoClient;\n \n @Readiness\n @ApplicationScoped\n public class MongoHealthCheck implements HealthCheck {\n-    private static final String DEFAULT_CLIENT = \"__default__\";\n+\n+    public static final String CLIENT_DEFAULT = \"<default>\";\n+    public static final String CLIENT_DEFAULT_REACTIVE = \"<default-reactive>\";\n+\n     private Map<String, MongoClient> clients = new HashMap<>();\n+    private Map<String, ReactiveMongoClient> reactiveClients = new HashMap<>();\n \n     @PostConstruct\n     protected void init() {\n-        Set<Bean<?>> beans = Arc.container().beanManager().getBeans(MongoClient.class);\n-        for (Bean<?> bean : beans) {\n-            if (bean.getName() == null) {\n-                // this is the default mongo client: retrieve it by type\n-                MongoClient defaultClient = Arc.container().instance(MongoClient.class).get();\n-                clients.put(DEFAULT_CLIENT, defaultClient);\n-            } else {\n-                MongoClient client = (MongoClient) Arc.container().instance(bean.getName()).get();\n-                clients.put(bean.getName(), client);\n+        for (InstanceHandle<MongoClient> handle : Arc.container().select(MongoClient.class, Any.Literal.INSTANCE).handles()) {\n+            String clientName = getMongoClientName(handle.getBean());\n+            clients.put(clientName == null ? CLIENT_DEFAULT : clientName, handle.get());\n+        }\n+        // reactive clients\n+        for (InstanceHandle<ReactiveMongoClient> handle : Arc.container()\n+                .select(ReactiveMongoClient.class, Any.Literal.INSTANCE).handles()) {\n+            String clientName = getMongoClientName(handle.getBean());\n+            reactiveClients.put(clientName == null ? CLIENT_DEFAULT_REACTIVE : clientName, handle.get());\n+        }\n+    }\n+\n+    /**\n+     * Get mongoClient name if defined.\n+     *\n+     * @param bean\n+     * @return mongoClient name or null if not defined\n+     * @see MongoClientName\n+     */\n+    private String getMongoClientName(Bean bean) {\n+        for (Object qualifier : bean.getQualifiers()) {\n+            if (qualifier instanceof MongoClientName) {\n+                return ((MongoClientName) qualifier).value();\n             }\n         }\n+        return null;\n     }\n \n     @Override\n     public HealthCheckResponse call() {\n         HealthCheckResponseBuilder builder = HealthCheckResponse.named(\"MongoDB connection health check\").up();\n+        Document command = new Document(\"ping\", 1);\n         for (Map.Entry<String, MongoClient> client : clients.entrySet()) {\n-            boolean isDefault = DEFAULT_CLIENT.equals(client.getKey());\n-            MongoClient mongoClient = client.getValue();\n             try {\n-                Document document = mongoClient.getDatabase(\"admin\").runCommand(new Document(\"ping\", 1));\n-                String mongoClientName = isDefault ? \"default\" : client.getKey();\n-                builder.up().withData(mongoClientName, document.toJson());\n+                Document document = client.getValue().getDatabase(\"admin\").runCommand(command);\n+                builder.up().withData(client.getKey(), document.toJson());\n+            } catch (Exception e) {\n+                return builder.down().withData(\"reason\", \"client [\" + client.getKey() + \"]: \" + e.getMessage()).build();\n+            }\n+        }\n+        for (Map.Entry<String, ReactiveMongoClient> client : reactiveClients.entrySet()) {\n+            try {\n+                Document document = client.getValue().getDatabase(\"admin\").runCommand(command).await().indefinitely();", "originalCommit": "b5d954543b8a3c6f65acfede0bdec88639d151f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI2MDUwNw==", "url": "https://github.com/quarkusio/quarkus/pull/12781#discussion_r508260507", "bodyText": "I was thinking about it as well but the reality is that the timeout is controlled by mongodb driver and its timeouts so once mongodb driver timeout for such operation it throws the exception.", "author": "lkrzyzanek", "createdAt": "2020-10-20T07:13:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA2Njc3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI3NTIxNA==", "url": "https://github.com/quarkusio/quarkus/pull/12781#discussion_r508275214", "bodyText": "OK then I'll merge it as is.", "author": "loicmathieu", "createdAt": "2020-10-20T07:38:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA2Njc3Mg=="}], "type": "inlineReview", "revised_code": null}]}