{"pr_number": 14002, "pr_title": "Transaction support for MongoDB with Panache", "pr_createdAt": "2020-12-21T10:35:30Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/14002", "timeline": [{"oid": "a46b90073772752c2c99ead05185d325214af53f", "url": "https://github.com/quarkusio/quarkus/commit/a46b90073772752c2c99ead05185d325214af53f", "message": "Transaction support for MongoDB with Panache", "committedDate": "2021-03-15T18:20:45Z", "type": "forcePushed"}, {"oid": "b8c30e2480f1307f1a9f6d210b048e32f5564f05", "url": "https://github.com/quarkusio/quarkus/commit/b8c30e2480f1307f1a9f6d210b048e32f5564f05", "message": "IT for MongoDB with Panache transaction", "committedDate": "2021-03-16T13:21:14Z", "type": "forcePushed"}, {"oid": "87a72f9ceb9bf5dea6f2172886ed2422b0e3fe2e", "url": "https://github.com/quarkusio/quarkus/commit/87a72f9ceb9bf5dea6f2172886ed2422b0e3fe2e", "message": "IT for MongoDB with Panache transaction", "committedDate": "2021-03-16T15:03:29Z", "type": "forcePushed"}, {"oid": "37e131b486bfef60d530584ee9c5fd29348be3d8", "url": "https://github.com/quarkusio/quarkus/commit/37e131b486bfef60d530584ee9c5fd29348be3d8", "message": "IT for MongoDB with Panache transaction", "committedDate": "2021-03-19T10:02:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzcxMDk3OQ==", "url": "https://github.com/quarkusio/quarkus/pull/14002#discussion_r597710979", "bodyText": "This doesn't appear to be used.", "author": "evanchooly", "createdAt": "2021-03-19T14:13:25Z", "path": "extensions/panache/mongodb-panache-common/runtime/src/main/java/io/quarkus/mongodb/panache/transaction/MongoTransactionException.java", "diffHunk": "@@ -0,0 +1,7 @@\n+package io.quarkus.mongodb.panache.transaction;\n+\n+public class MongoTransactionException extends RuntimeException {", "originalCommit": "37e131b486bfef60d530584ee9c5fd29348be3d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODY1MTI2OQ==", "url": "https://github.com/quarkusio/quarkus/pull/14002#discussion_r598651269", "bodyText": "This is used to encapsulate the JTA SystemException into a RuntimeException here: https://github.com/quarkusio/quarkus/pull/14002/files#diff-d003b221f9b819da503954b1f03c63b8ddc7fb18b78c6921cc9ae4d9e1483d1aR370", "author": "loicmathieu", "createdAt": "2021-03-22T11:57:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzcxMDk3OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzgyOTY1MA==", "url": "https://github.com/quarkusio/quarkus/pull/14002#discussion_r597829650", "bodyText": "Is this something that could be useful to other people?", "author": "FroMage", "createdAt": "2021-03-19T16:49:07Z", "path": "integration-tests/mongodb-panache/src/test/java/io/quarkus/it/mongodb/panache/MongoReplicaSetTestResource.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package io.quarkus.it.mongodb.panache;\n+\n+import static org.awaitility.Awaitility.await;\n+\n+import java.io.IOException;\n+import java.net.UnknownHostException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.bson.Document;\n+import org.jboss.logging.Logger;\n+\n+import com.mongodb.ConnectionString;\n+import com.mongodb.MongoClientSettings;\n+import com.mongodb.client.MongoClient;\n+import com.mongodb.client.MongoClients;\n+import com.mongodb.client.MongoDatabase;\n+\n+import de.flapdoodle.embed.mongo.MongodExecutable;\n+import de.flapdoodle.embed.mongo.MongodStarter;\n+import de.flapdoodle.embed.mongo.config.IMongodConfig;\n+import de.flapdoodle.embed.mongo.config.MongoCmdOptionsBuilder;\n+import de.flapdoodle.embed.mongo.config.MongodConfigBuilder;\n+import de.flapdoodle.embed.mongo.config.Net;\n+import de.flapdoodle.embed.mongo.distribution.Version;\n+import de.flapdoodle.embed.process.runtime.Network;\n+import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n+\n+public class MongoReplicaSetTestResource implements QuarkusTestResourceLifecycleManager {", "originalCommit": "37e131b486bfef60d530584ee9c5fd29348be3d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODY1MjI2NQ==", "url": "https://github.com/quarkusio/quarkus/pull/14002#discussion_r598652265", "bodyText": "I plan to create a MongoDB test library later on with the two ressources and refactor some integration test to use them.\nI'll do it as a followup issue to avoid a too big PR but it's on my todo list ;)", "author": "loicmathieu", "createdAt": "2021-03-22T11:59:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzgyOTY1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODcxNjI1OQ==", "url": "https://github.com/quarkusio/quarkus/pull/14002#discussion_r598716259", "bodyText": "OK", "author": "FroMage", "createdAt": "2021-03-22T13:31:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzgyOTY1MA=="}], "type": "inlineReview", "revised_code": {"commit": "212bfa803847f5d8eb316e442e4f7591aae725c9", "chunk": "diff --git a/integration-tests/mongodb-panache/src/test/java/io/quarkus/it/mongodb/panache/MongoReplicaSetTestResource.java b/integration-tests/mongodb-panache/src/test/java/io/quarkus/it/mongodb/panache/MongoReplicaSetTestResource.java\ndeleted file mode 100644\nindex 3e8f4f465f..0000000000\n--- a/integration-tests/mongodb-panache/src/test/java/io/quarkus/it/mongodb/panache/MongoReplicaSetTestResource.java\n+++ /dev/null\n\n@@ -1,160 +0,0 @@\n-package io.quarkus.it.mongodb.panache;\n-\n-import static org.awaitility.Awaitility.await;\n-\n-import java.io.IOException;\n-import java.net.UnknownHostException;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.concurrent.TimeUnit;\n-\n-import org.bson.Document;\n-import org.jboss.logging.Logger;\n-\n-import com.mongodb.ConnectionString;\n-import com.mongodb.MongoClientSettings;\n-import com.mongodb.client.MongoClient;\n-import com.mongodb.client.MongoClients;\n-import com.mongodb.client.MongoDatabase;\n-\n-import de.flapdoodle.embed.mongo.MongodExecutable;\n-import de.flapdoodle.embed.mongo.MongodStarter;\n-import de.flapdoodle.embed.mongo.config.IMongodConfig;\n-import de.flapdoodle.embed.mongo.config.MongoCmdOptionsBuilder;\n-import de.flapdoodle.embed.mongo.config.MongodConfigBuilder;\n-import de.flapdoodle.embed.mongo.config.Net;\n-import de.flapdoodle.embed.mongo.distribution.Version;\n-import de.flapdoodle.embed.process.runtime.Network;\n-import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n-\n-public class MongoReplicaSetTestResource implements QuarkusTestResourceLifecycleManager {\n-\n-    private static final Logger LOGGER = Logger.getLogger(MongoReplicaSetTestResource.class);\n-    private static List<MongodExecutable> MONGOS = new ArrayList<>();\n-\n-    @Override\n-    public Map<String, String> start() {\n-        try {\n-            List<IMongodConfig> configs = new ArrayList<>();\n-            for (int i = 0; i < 2; i++) {\n-                int port = 27018 + i;\n-                configs.add(buildMongodConfiguration(\"localhost\", port, true));\n-            }\n-            configs.forEach(config -> {\n-                MongodExecutable exec = MongodStarter.getDefaultInstance().prepare(config);\n-                MONGOS.add(exec);\n-                try {\n-                    exec.start();\n-                } catch (IOException e) {\n-                    LOGGER.error(\"Unable to start the mongo instance\", e);\n-                }\n-            });\n-            initializeReplicaSet(configs);\n-            return Collections.emptyMap();\n-        } catch (Exception e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n-    @Override\n-    public void stop() {\n-        MONGOS.forEach(mongod -> {\n-            try {\n-                mongod.stop();\n-            } catch (Exception e) {\n-                LOGGER.error(\"Unable to stop MongoDB\", e);\n-            }\n-        });\n-    }\n-\n-    private static void initializeReplicaSet(final List<IMongodConfig> mongodConfigList) throws UnknownHostException {\n-        final String arbitrerAddress = \"mongodb://\" + mongodConfigList.get(0).net().getServerAddress().getHostName() + \":\"\n-                + mongodConfigList.get(0).net().getPort();\n-        final MongoClientSettings mo = MongoClientSettings.builder()\n-                .applyConnectionString(new ConnectionString(arbitrerAddress)).build();\n-\n-        try (MongoClient mongo = MongoClients.create(mo)) {\n-            final MongoDatabase mongoAdminDB = mongo.getDatabase(\"admin\");\n-\n-            Document cr = mongoAdminDB.runCommand(new Document(\"isMaster\", 1));\n-            LOGGER.infof(\"isMaster: %s\", cr);\n-\n-            // Build replica set configuration settings\n-            final Document rsConfiguration = buildReplicaSetConfiguration(mongodConfigList);\n-            LOGGER.infof(\"replSetSettings: %s\", rsConfiguration);\n-\n-            // Initialize replica set\n-            cr = mongoAdminDB.runCommand(new Document(\"replSetInitiate\", rsConfiguration));\n-            LOGGER.infof(\"replSetInitiate: %s\", cr);\n-\n-            // Check replica set status before to proceed\n-            await()\n-                    .pollInterval(100, TimeUnit.MILLISECONDS)\n-                    .atMost(1, TimeUnit.MINUTES)\n-                    .until(() -> {\n-                        Document result = mongoAdminDB.runCommand(new Document(\"replSetGetStatus\", 1));\n-                        LOGGER.infof(\"replSetGetStatus: %s\", result);\n-                        return !isReplicaSetStarted(result);\n-                    });\n-        }\n-    }\n-\n-    private static Document buildReplicaSetConfiguration(final List<IMongodConfig> configList) throws UnknownHostException {\n-        final Document replicaSetSetting = new Document();\n-        replicaSetSetting.append(\"_id\", \"test001\");\n-\n-        final List<Document> members = new ArrayList<>();\n-        int i = 0;\n-        for (final IMongodConfig mongoConfig : configList) {\n-            members.add(new Document().append(\"_id\", i++).append(\"host\",\n-                    mongoConfig.net().getServerAddress().getHostName() + \":\" + mongoConfig.net().getPort()));\n-        }\n-\n-        replicaSetSetting.append(\"members\", members);\n-        return replicaSetSetting;\n-    }\n-\n-    private static boolean isReplicaSetStarted(final Document setting) {\n-        if (!setting.containsKey(\"members\")) {\n-            return false;\n-        }\n-\n-        @SuppressWarnings(\"unchecked\")\n-        final List<Document> members = setting.get(\"members\", List.class);\n-        for (final Document member : members) {\n-            LOGGER.infof(\"replica set member %s\", member);\n-            final int state = member.getInteger(\"state\");\n-            LOGGER.infof(\"state: %s\", state);\n-            // 1 - PRIMARY, 2 - SECONDARY, 7 - ARBITER\n-            if (state != 1 && state != 2 && state != 7) {\n-                return false;\n-            }\n-        }\n-        return true;\n-    }\n-\n-    private static IMongodConfig buildMongodConfiguration(String url, int port, final boolean configureReplicaSet)\n-            throws IOException {\n-        try {\n-            //JDK bug workaround\n-            //https://github.com/quarkusio/quarkus/issues/14424\n-            //force class init to prevent possible deadlock when done by mongo threads\n-            Class.forName(\"sun.net.ext.ExtendedSocketOptions\", true, ClassLoader.getSystemClassLoader());\n-        } catch (ClassNotFoundException e) {\n-        }\n-        final MongodConfigBuilder builder = new MongodConfigBuilder()\n-                .version(Version.Main.V4_0)\n-                .net(new Net(url, port, Network.localhostIsIPv6()));\n-        if (configureReplicaSet) {\n-            builder.withLaunchArgument(\"--replSet\", \"test001\");\n-            builder.cmdOptions(new MongoCmdOptionsBuilder()\n-                    .syncDelay(10)\n-                    .useSmallFiles(true)\n-                    .useNoJournal(false)\n-                    .build());\n-        }\n-        return builder.build();\n-    }\n-}\n"}}, {"oid": "212bfa803847f5d8eb316e442e4f7591aae725c9", "url": "https://github.com/quarkusio/quarkus/commit/212bfa803847f5d8eb316e442e4f7591aae725c9", "message": "Transaction support for MongoDB with Panache", "committedDate": "2021-03-23T12:15:49Z", "type": "commit"}, {"oid": "5ea2ff5617af9e2a384491481f46a2ad680d5c41", "url": "https://github.com/quarkusio/quarkus/commit/5ea2ff5617af9e2a384491481f46a2ad680d5c41", "message": "IT for MongoDB with Panache transaction", "committedDate": "2021-03-23T12:15:49Z", "type": "commit"}, {"oid": "3b1122a187780a3cc9658ab55115cc9b34f34c55", "url": "https://github.com/quarkusio/quarkus/commit/3b1122a187780a3cc9658ab55115cc9b34f34c55", "message": "Allow ot use a different UpdateExecutor for MongoDB to avoid having a tx", "committedDate": "2021-03-23T12:15:49Z", "type": "forcePushed"}, {"oid": "20edd61ea9f0de7a50c812af7c15529ec8cd2e55", "url": "https://github.com/quarkusio/quarkus/commit/20edd61ea9f0de7a50c812af7c15529ec8cd2e55", "message": "Allow to use a different UpdateExecutor for MongoDB to avoid having a tx", "committedDate": "2021-03-24T10:11:18Z", "type": "commit"}, {"oid": "20edd61ea9f0de7a50c812af7c15529ec8cd2e55", "url": "https://github.com/quarkusio/quarkus/commit/20edd61ea9f0de7a50c812af7c15529ec8cd2e55", "message": "Allow to use a different UpdateExecutor for MongoDB to avoid having a tx", "committedDate": "2021-03-24T10:11:18Z", "type": "forcePushed"}]}