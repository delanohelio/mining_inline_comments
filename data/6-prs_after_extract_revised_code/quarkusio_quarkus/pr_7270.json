{"pr_number": 7270, "pr_title": " Transfer providers discovered at build-time to new ClientBuilder instances", "pr_createdAt": "2020-02-19T06:43:56Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/7270", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk3ODIwMA==", "url": "https://github.com/quarkusio/quarkus/pull/7270#discussion_r381978200", "bodyText": "Does it make sense to support WriteInterceptor and ReadInterceptor as well ? Though it can be done as part of another PR for sure...", "author": "sberyozkin", "createdAt": "2020-02-20T12:50:03Z", "path": "extensions/rest-client/deployment/src/main/java/io/quarkus/restclient/deployment/RestClientProcessor.java", "diffHunk": "@@ -83,6 +83,9 @@\n     private static final DotName REGISTER_PROVIDER = DotName.createSimple(RegisterProvider.class.getName());\n     private static final DotName REGISTER_PROVIDERS = DotName.createSimple(RegisterProviders.class.getName());\n \n+    private static final DotName CLIENT_REQUEST_FILTER = DotName.createSimple(ClientRequestFilter.class.getName());", "originalCommit": "8a5eccedb2aa73600a98ec0e60b72bb18501f91c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA0NzAxNw==", "url": "https://github.com/quarkusio/quarkus/pull/7270#discussion_r382047017", "bodyText": "hi @sberyozkin, yes I think that would also make sense. Since those interfaces are part of the javax.ws.rs.ext package, it would probably be best to register them in the core \"resteasy-common\" module. I'll open a follow-up PR with the additions and tests in the next day or so", "author": "aguibert", "createdAt": "2020-02-20T14:50:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk3ODIwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI5NDYxMg==", "url": "https://github.com/quarkusio/quarkus/pull/7270#discussion_r382294612", "bodyText": "Hi @aguibert sorry for a delay; thanks, that would be great...Cheers", "author": "sberyozkin", "createdAt": "2020-02-20T22:29:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk3ODIwMA=="}], "type": "inlineReview", "revised_code": {"commit": "4fb2fefb79de884261b2a7ea9cb1e89283623ffe", "chunk": "diff --git a/extensions/rest-client/deployment/src/main/java/io/quarkus/restclient/deployment/RestClientProcessor.java b/extensions/rest-client/deployment/src/main/java/io/quarkus/restclient/deployment/RestClientProcessor.java\nindex 53a5e0eb19..509e8c22cf 100644\n--- a/extensions/rest-client/deployment/src/main/java/io/quarkus/restclient/deployment/RestClientProcessor.java\n+++ b/extensions/rest-client/deployment/src/main/java/io/quarkus/restclient/deployment/RestClientProcessor.java\n\n@@ -83,9 +83,6 @@ class RestClientProcessor {\n     private static final DotName REGISTER_PROVIDER = DotName.createSimple(RegisterProvider.class.getName());\n     private static final DotName REGISTER_PROVIDERS = DotName.createSimple(RegisterProviders.class.getName());\n \n-    private static final DotName CLIENT_REQUEST_FILTER = DotName.createSimple(ClientRequestFilter.class.getName());\n-    private static final DotName CLIENT_RESPONSE_FILTER = DotName.createSimple(ClientResponseFilter.class.getName());\n-\n     private static final String PROVIDERS_SERVICE_FILE = \"META-INF/services/\" + Providers.class.getName();\n \n     @BuildStep\n"}}, {"oid": "7f64724bd62011804c0dac8f687d5b602d233484", "url": "https://github.com/quarkusio/quarkus/commit/7f64724bd62011804c0dac8f687d5b602d233484", "message": "Retain all ClientRequestFilter and ClientResponseFilter impls in case of programmatic registration", "committedDate": "2020-02-20T17:12:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE0MTI5Mg==", "url": "https://github.com/quarkusio/quarkus/pull/7270#discussion_r382141292", "bodyText": "@kenfinnigan can you please re-review? I took your suggestion and moved the ITs to the \"main\" project, which exposed a new bug on the SSL builder path in native mode. I've included the fix on these highlighted lines which mirrors what is done in org.jboss.resteasy.microprofile.client.RestClientBuilderImpl.build(Class<T>)", "author": "aguibert", "createdAt": "2020-02-20T17:16:30Z", "path": "extensions/rest-client/runtime/src/main/java/io/quarkus/restclient/runtime/graal/ClientBuilderReplacement.java", "diffHunk": "@@ -2,16 +2,29 @@\n \n import javax.ws.rs.client.ClientBuilder;\n \n+import org.jboss.resteasy.client.jaxrs.ResteasyClientBuilder;\n+import org.jboss.resteasy.client.jaxrs.engines.URLConnectionClientEngineBuilder;\n+import org.jboss.resteasy.client.jaxrs.internal.LocalResteasyProviderFactory;\n import org.jboss.resteasy.client.jaxrs.internal.ResteasyClientBuilderImpl;\n \n import com.oracle.svm.core.annotate.Substitute;\n import com.oracle.svm.core.annotate.TargetClass;\n \n+import io.quarkus.restclient.runtime.RestClientRecorder;\n+\n @TargetClass(ClientBuilder.class)\n final class ClientBuilderReplacement {\n \n     @Substitute\n     public static ClientBuilder newBuilder() {\n-        return new ResteasyClientBuilderImpl();\n+        ResteasyClientBuilder client = new ResteasyClientBuilderImpl();\n+        client.providerFactory(new LocalResteasyProviderFactory(RestClientRecorder.providerFactory));\n+        if (!RestClientRecorder.SSL_ENABLED) {\n+            client.httpEngine(new URLConnectionClientEngineBuilder().resteasyClientBuilder(client).build());\n+            client.sslContext(null);\n+            client.trustStore(null);\n+            client.keyStore(null, \"\");\n+        }\n+        return client;", "originalCommit": "7f64724bd62011804c0dac8f687d5b602d233484", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4fb2fefb79de884261b2a7ea9cb1e89283623ffe", "chunk": "diff --git a/extensions/rest-client/runtime/src/main/java/io/quarkus/restclient/runtime/graal/ClientBuilderReplacement.java b/extensions/rest-client/runtime/src/main/java/io/quarkus/restclient/runtime/graal/ClientBuilderReplacement.java\nindex 3a72ea7208..60eb99d652 100644\n--- a/extensions/rest-client/runtime/src/main/java/io/quarkus/restclient/runtime/graal/ClientBuilderReplacement.java\n+++ b/extensions/rest-client/runtime/src/main/java/io/quarkus/restclient/runtime/graal/ClientBuilderReplacement.java\n\n@@ -2,29 +2,16 @@ package io.quarkus.restclient.runtime.graal;\n \n import javax.ws.rs.client.ClientBuilder;\n \n-import org.jboss.resteasy.client.jaxrs.ResteasyClientBuilder;\n-import org.jboss.resteasy.client.jaxrs.engines.URLConnectionClientEngineBuilder;\n-import org.jboss.resteasy.client.jaxrs.internal.LocalResteasyProviderFactory;\n import org.jboss.resteasy.client.jaxrs.internal.ResteasyClientBuilderImpl;\n \n import com.oracle.svm.core.annotate.Substitute;\n import com.oracle.svm.core.annotate.TargetClass;\n \n-import io.quarkus.restclient.runtime.RestClientRecorder;\n-\n @TargetClass(ClientBuilder.class)\n final class ClientBuilderReplacement {\n \n     @Substitute\n     public static ClientBuilder newBuilder() {\n-        ResteasyClientBuilder client = new ResteasyClientBuilderImpl();\n-        client.providerFactory(new LocalResteasyProviderFactory(RestClientRecorder.providerFactory));\n-        if (!RestClientRecorder.SSL_ENABLED) {\n-            client.httpEngine(new URLConnectionClientEngineBuilder().resteasyClientBuilder(client).build());\n-            client.sslContext(null);\n-            client.trustStore(null);\n-            client.keyStore(null, \"\");\n-        }\n-        return client;\n+        return new ResteasyClientBuilderImpl();\n     }\n }\n"}}, {"oid": "5a7fb97c2ed21a66d75bbe41edba280193807bcb", "url": "https://github.com/quarkusio/quarkus/commit/5a7fb97c2ed21a66d75bbe41edba280193807bcb", "message": "Retain all ClientRequestFilter and ClientResponseFilter impls in case of programmatic registration", "committedDate": "2020-02-20T17:39:33Z", "type": "forcePushed"}, {"oid": "4fb2fefb79de884261b2a7ea9cb1e89283623ffe", "url": "https://github.com/quarkusio/quarkus/commit/4fb2fefb79de884261b2a7ea9cb1e89283623ffe", "message": "Add integration tests for programmatic JAX-RS client usage", "committedDate": "2020-02-20T17:41:13Z", "type": "commit"}, {"oid": "3f3fbe169b6995af4749fca6b4e53621ea46cae8", "url": "https://github.com/quarkusio/quarkus/commit/3f3fbe169b6995af4749fca6b4e53621ea46cae8", "message": "Transfer providers discovered at build-time to new ClientBuilder instances", "committedDate": "2020-02-20T17:41:15Z", "type": "commit"}, {"oid": "fc1f9bd1d2a1fb18128d11fa462c966bd7eb5d09", "url": "https://github.com/quarkusio/quarkus/commit/fc1f9bd1d2a1fb18128d11fa462c966bd7eb5d09", "message": "Retain all ClientRequestFilter and ClientResponseFilter impls in case of programmatic registration", "committedDate": "2020-02-20T17:41:15Z", "type": "commit"}, {"oid": "fc1f9bd1d2a1fb18128d11fa462c966bd7eb5d09", "url": "https://github.com/quarkusio/quarkus/commit/fc1f9bd1d2a1fb18128d11fa462c966bd7eb5d09", "message": "Retain all ClientRequestFilter and ClientResponseFilter impls in case of programmatic registration", "committedDate": "2020-02-20T17:41:15Z", "type": "forcePushed"}]}