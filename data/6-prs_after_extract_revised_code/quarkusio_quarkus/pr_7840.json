{"pr_number": 7840, "pr_title": "Panache Hibernate REST", "pr_createdAt": "2020-03-13T11:20:08Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/7840", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1NjgzNQ==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r392856835", "bodyText": "Are you sure this correct?", "author": "geoand", "createdAt": "2020-03-16T08:39:36Z", "path": "extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/hibernate/orm/panache/rest/deployment/ControllerImplementor.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package io.quarkus.hibernate.orm.panache.rest.deployment;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.BiFunction;\n+\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.IndexView;\n+\n+import io.quarkus.deployment.util.HashUtil;\n+import io.quarkus.gizmo.ClassCreator;\n+import io.quarkus.gizmo.ClassOutput;\n+import io.quarkus.hibernate.orm.panache.rest.deployment.methods.AddMethodImplementor;\n+import io.quarkus.hibernate.orm.panache.rest.deployment.methods.DeleteMethodImplementor;\n+import io.quarkus.hibernate.orm.panache.rest.deployment.methods.GetMethodImplementor;\n+import io.quarkus.hibernate.orm.panache.rest.deployment.methods.ListMethodImplementor;\n+import io.quarkus.hibernate.orm.panache.rest.deployment.methods.MethodImplementor;\n+import io.quarkus.hibernate.orm.panache.rest.deployment.methods.UpdateMethodImplementor;\n+import io.quarkus.hibernate.orm.panache.rest.deployment.utils.ControllerAnnotator;\n+\n+class ControllerImplementor {\n+\n+    private static final List<BiFunction<ClassInfo, IndexView, MethodImplementor>> METHOD_IMPLEMENTORS = Arrays.asList(\n+            GetMethodImplementor::new,\n+            ListMethodImplementor::new,\n+            AddMethodImplementor::new,\n+            UpdateMethodImplementor::new,\n+            DeleteMethodImplementor::new);\n+\n+    private final ClassOutput classOutput;\n+\n+    ControllerImplementor(ClassOutput classOutput) {\n+        this.classOutput = classOutput;\n+    }\n+\n+    void implement(ClassInfo controllerInterface, IndexView index) {\n+        ClassCreator classCreator = ClassCreator.builder()\n+                .classOutput(classOutput)\n+                .className(controllerInterface.toString() + \"Impl_\" + HashUtil.sha1(controllerInterface.toString()))\n+                .interfaces(controllerInterface.toString())\n+                .build();\n+        ControllerAnnotator.addPath(classCreator, \"/\");", "originalCommit": "025984e97005ab81d89788954f3ed248fc0c4f3e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg3MjExMA==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r392872110", "bodyText": "Yes, the whole path is added on each method. This way ControllerImplementor doesn't need to extract entity type information and can stay a bit simpler. Method implementors need that class information anyway for parameter declarations.", "author": "gytis", "createdAt": "2020-03-16T09:09:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1NjgzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg3NDY4OQ==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r392874689", "bodyText": "I'm fine with this, it's just a little different that what one would right manually. I assume it doesn't really matter for RESTEasy, both ways of doing this should be equivalent.", "author": "geoand", "createdAt": "2020-03-16T09:14:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1NjgzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg5Mjk4Mw==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r392892983", "bodyText": "I agree, but since it's not visible I assumed it wouldn't matter for the end user.", "author": "gytis", "createdAt": "2020-03-16T09:47:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1NjgzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg5NDc5MQ==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r392894791", "bodyText": "Yeah exactly. Let's keep it as is for now (unless someone else has a good reason why it shouldn't be done like this).", "author": "geoand", "createdAt": "2020-03-16T09:50:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1NjgzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "5dce1dd886479c5a9643a229819b160d8fdf550b", "chunk": "diff --git a/extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/hibernate/orm/panache/rest/deployment/ControllerImplementor.java b/extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/hibernate/orm/panache/rest/deployment/ControllerImplementor.java\nindex 35a9bffe18..31cdb4fa32 100644\n--- a/extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/hibernate/orm/panache/rest/deployment/ControllerImplementor.java\n+++ b/extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/hibernate/orm/panache/rest/deployment/ControllerImplementor.java\n\n@@ -6,6 +6,7 @@ import java.util.function.BiFunction;\n \n import org.jboss.jandex.ClassInfo;\n import org.jboss.jandex.IndexView;\n+import org.jboss.logging.Logger;\n \n import io.quarkus.deployment.util.HashUtil;\n import io.quarkus.gizmo.ClassCreator;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1Njk4NA==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r392856984", "bodyText": "I think we can do better with the error message here :)", "author": "geoand", "createdAt": "2020-03-16T08:39:56Z", "path": "extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/hibernate/orm/panache/rest/deployment/HibernateOrmPanacheRestProcessor.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package io.quarkus.hibernate.orm.panache.rest.deployment;\n+\n+import static io.quarkus.deployment.builditem.FeatureBuildItem.HIBERNATE_ORM_PANACHE_REST;\n+\n+import java.lang.reflect.Modifier;\n+import java.util.Arrays;\n+\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.logging.Logger;\n+import org.jboss.resteasy.links.impl.EL;\n+\n+import io.quarkus.arc.deployment.GeneratedBeanBuildItem;\n+import io.quarkus.arc.deployment.GeneratedBeanGizmoAdaptor;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.RuntimeInitializedClassBuildItem;\n+import io.quarkus.hibernate.orm.panache.rest.PanacheCrudController;\n+import io.quarkus.hibernate.orm.panache.rest.hal.HalCollectionWrapper;\n+import io.quarkus.hibernate.orm.panache.rest.hal.HalCollectionWrapperJacksonSerializer;\n+import io.quarkus.hibernate.orm.panache.rest.hal.HalCollectionWrapperJsonbSerializer;\n+import io.quarkus.hibernate.orm.panache.rest.hal.HalEntityWrapper;\n+import io.quarkus.hibernate.orm.panache.rest.hal.HalEntityWrapperJacksonSerializer;\n+import io.quarkus.hibernate.orm.panache.rest.hal.HalEntityWrapperJsonbSerializer;\n+import io.quarkus.hibernate.orm.panache.rest.hal.HalLink;\n+import io.quarkus.hibernate.orm.panache.rest.hal.HalLinkJacksonSerializer;\n+import io.quarkus.hibernate.orm.panache.rest.hal.HalLinkJsonbSerializer;\n+import io.quarkus.jackson.spi.JacksonModuleBuildItem;\n+import io.quarkus.jsonb.spi.JsonbSerializerBuildItem;\n+\n+class HibernateOrmPanacheRestProcessor {\n+\n+    private static final DotName PANACHE_CRUD_CONTROLLER_INTERFACE = DotName\n+            .createSimple(PanacheCrudController.class.getName());\n+\n+    private static final Logger LOGGER = Logger.getLogger(HibernateOrmPanacheRestProcessor.class);\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(HIBERNATE_ORM_PANACHE_REST);\n+    }\n+\n+    @BuildStep\n+    RuntimeInitializedClassBuildItem el() {\n+        return new RuntimeInitializedClassBuildItem(EL.class.getCanonicalName());\n+    }\n+\n+    @BuildStep\n+    void generateControllers(CombinedIndexBuildItem index, BuildProducer<GeneratedBeanBuildItem> implementationsProducer) {\n+        ControllerImplementor implementor = new ControllerImplementor(new GeneratedBeanGizmoAdaptor(implementationsProducer));\n+        for (ClassInfo classInfo : index.getIndex().getKnownClasses()) {\n+            if (isValidCrudController(index.getIndex(), classInfo)) {\n+                implementor.implement(classInfo, index.getIndex());\n+            }\n+        }\n+    }\n+\n+    private boolean isValidCrudController(IndexView index, ClassInfo classInfo) {\n+        if (!Modifier.isInterface(classInfo.flags())\n+                || !classInfo.interfaceNames().contains(PANACHE_CRUD_CONTROLLER_INTERFACE)) {\n+            return false;\n+        }\n+\n+        if (!index.getKnownDirectImplementors(classInfo.name()).isEmpty()) {\n+            LOGGER.warnf(\"Panache CRUD controller '%s' has children - it will be ignored\", classInfo.name());", "originalCommit": "025984e97005ab81d89788954f3ed248fc0c4f3e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5dce1dd886479c5a9643a229819b160d8fdf550b", "chunk": "diff --git a/extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/hibernate/orm/panache/rest/deployment/HibernateOrmPanacheRestProcessor.java b/extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/hibernate/orm/panache/rest/deployment/HibernateOrmPanacheRestProcessor.java\nindex cff3387165..653eabbf45 100644\n--- a/extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/hibernate/orm/panache/rest/deployment/HibernateOrmPanacheRestProcessor.java\n+++ b/extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/hibernate/orm/panache/rest/deployment/HibernateOrmPanacheRestProcessor.java\n\n@@ -19,15 +19,15 @@ import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n import io.quarkus.deployment.builditem.FeatureBuildItem;\n import io.quarkus.deployment.builditem.nativeimage.RuntimeInitializedClassBuildItem;\n import io.quarkus.hibernate.orm.panache.rest.PanacheCrudController;\n-import io.quarkus.hibernate.orm.panache.rest.hal.HalCollectionWrapper;\n-import io.quarkus.hibernate.orm.panache.rest.hal.HalCollectionWrapperJacksonSerializer;\n-import io.quarkus.hibernate.orm.panache.rest.hal.HalCollectionWrapperJsonbSerializer;\n-import io.quarkus.hibernate.orm.panache.rest.hal.HalEntityWrapper;\n-import io.quarkus.hibernate.orm.panache.rest.hal.HalEntityWrapperJacksonSerializer;\n-import io.quarkus.hibernate.orm.panache.rest.hal.HalEntityWrapperJsonbSerializer;\n-import io.quarkus.hibernate.orm.panache.rest.hal.HalLink;\n-import io.quarkus.hibernate.orm.panache.rest.hal.HalLinkJacksonSerializer;\n-import io.quarkus.hibernate.orm.panache.rest.hal.HalLinkJsonbSerializer;\n+import io.quarkus.hibernate.orm.panache.rest.runtime.hal.HalCollectionWrapper;\n+import io.quarkus.hibernate.orm.panache.rest.runtime.hal.HalCollectionWrapperJacksonSerializer;\n+import io.quarkus.hibernate.orm.panache.rest.runtime.hal.HalCollectionWrapperJsonbSerializer;\n+import io.quarkus.hibernate.orm.panache.rest.runtime.hal.HalEntityWrapper;\n+import io.quarkus.hibernate.orm.panache.rest.runtime.hal.HalEntityWrapperJacksonSerializer;\n+import io.quarkus.hibernate.orm.panache.rest.runtime.hal.HalEntityWrapperJsonbSerializer;\n+import io.quarkus.hibernate.orm.panache.rest.runtime.hal.HalLink;\n+import io.quarkus.hibernate.orm.panache.rest.runtime.hal.HalLinkJacksonSerializer;\n+import io.quarkus.hibernate.orm.panache.rest.runtime.hal.HalLinkJsonbSerializer;\n import io.quarkus.jackson.spi.JacksonModuleBuildItem;\n import io.quarkus.jsonb.spi.JsonbSerializerBuildItem;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1ODMwOQ==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r392858309", "bodyText": "I would like to see a couple more entities and controllers in the integration test to make sure than no wires cross paths :)", "author": "geoand", "createdAt": "2020-03-16T08:42:35Z", "path": "integration-tests/hibernate-orm-panache-rest/src/main/java/io/quarkus/it/panache/rest/BookController.java", "diffHunk": "@@ -0,0 +1,9 @@\n+package io.quarkus.it.panache.rest;\n+\n+import io.quarkus.hibernate.orm.panache.rest.PanacheCrudController;\n+import io.quarkus.hibernate.orm.panache.rest.PanacheRestResource;\n+\n+@PanacheRestResource(hal = true)\n+public interface BookController extends PanacheCrudController<Book, Long> {", "originalCommit": "025984e97005ab81d89788954f3ed248fc0c4f3e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "15e31c8c587561a4b41b290a206e4c676313f120", "chunk": "diff --git a/integration-tests/hibernate-orm-panache-rest/src/main/java/io/quarkus/it/panache/rest/BookController.java b/integration-tests/hibernate-orm-panache-rest/src/main/java/io/quarkus/it/panache/rest/BookController.java\ndeleted file mode 100644\nindex 1cac7c7579..0000000000\n--- a/integration-tests/hibernate-orm-panache-rest/src/main/java/io/quarkus/it/panache/rest/BookController.java\n+++ /dev/null\n\n@@ -1,9 +0,0 @@\n-package io.quarkus.it.panache.rest;\n-\n-import io.quarkus.hibernate.orm.panache.rest.PanacheCrudController;\n-import io.quarkus.hibernate.orm.panache.rest.PanacheRestResource;\n-\n-@PanacheRestResource(hal = true)\n-public interface BookController extends PanacheCrudController<Book, Long> {\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1OTYyOQ==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r392859629", "bodyText": "Is there a reason why exposed would ever be false?", "author": "geoand", "createdAt": "2020-03-16T08:45:09Z", "path": "extensions/panache/hibernate-orm-panache-rest/runtime/src/main/java/io/quarkus/hibernate/orm/panache/rest/PanacheRestResource.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package io.quarkus.hibernate.orm.panache.rest;\n+\n+import static java.lang.annotation.ElementType.METHOD;\n+import static java.lang.annotation.ElementType.TYPE;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+@Documented\n+@Retention(RUNTIME)\n+@Target({ TYPE, METHOD })\n+public @interface PanacheRestResource {\n+\n+    boolean exposed() default true;", "originalCommit": "025984e97005ab81d89788954f3ed248fc0c4f3e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg3MjY2OA==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r392872668", "bodyText": "If, for example, you don't want to expose a DELETE or POST method.", "author": "gytis", "createdAt": "2020-03-16T09:11:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1OTYyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg3NTE2NQ==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r392875165", "bodyText": "Oh I see!\nI wouldn't have guessed this to be honest, so one more reason to have some good javadoc :)", "author": "geoand", "createdAt": "2020-03-16T09:15:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1OTYyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "5dce1dd886479c5a9643a229819b160d8fdf550b", "chunk": "diff --git a/extensions/panache/hibernate-orm-panache-rest/runtime/src/main/java/io/quarkus/hibernate/orm/panache/rest/PanacheRestResource.java b/extensions/panache/hibernate-orm-panache-rest/runtime/src/main/java/io/quarkus/hibernate/orm/panache/rest/PanacheRestResource.java\nindex 7cc1a62ce2..252811d202 100644\n--- a/extensions/panache/hibernate-orm-panache-rest/runtime/src/main/java/io/quarkus/hibernate/orm/panache/rest/PanacheRestResource.java\n+++ b/extensions/panache/hibernate-orm-panache-rest/runtime/src/main/java/io/quarkus/hibernate/orm/panache/rest/PanacheRestResource.java\n\n@@ -13,7 +13,21 @@ import java.lang.annotation.Target;\n @Target({ TYPE, METHOD })\n public @interface PanacheRestResource {\n \n+    /**\n+     * Whether a particular method or all controller methods should be exposed as JAX-RS resources.\n+     * For example, hide a `delete` method if it shouldn't be exposed via REST API.\n+     *\n+     * Default: true.\n+     */\n     boolean exposed() default true;\n \n+    /**\n+     * Whether HAL version of a method or all controller methods should be generated.\n+     * HAL methods are generated in addition to the standard methods. They accept the same parameters but return a content of\n+     * `application/hal+json` type.\n+     * The methods that support HAL responses are `get`, `list`, `add` and `update`.\n+     *\n+     * Default: false.\n+     */\n     boolean hal() default false;\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2MDkwOQ==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r392860909", "bodyText": "I think that this and all classes in the hal package are \"private\" classes of the runtime module, while PanacheCrudController and PanacheRestResource are the public part.\nThe way we usually deal with that is have all the \"private\" classes under a runtime package, so this class would be io.quarkus.hibernate.orm.panache.rest.runtime.utils", "author": "geoand", "createdAt": "2020-03-16T08:47:37Z", "path": "extensions/panache/hibernate-orm-panache-rest/runtime/src/main/java/io/quarkus/hibernate/orm/panache/rest/utils/StringUtil.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package io.quarkus.hibernate.orm.panache.rest.utils;\n+\n+import static io.quarkus.runtime.util.StringUtil.camelHumpsIterator;\n+import static io.quarkus.runtime.util.StringUtil.lowerCase;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.StringJoiner;\n+\n+public final class StringUtil {", "originalCommit": "025984e97005ab81d89788954f3ed248fc0c4f3e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5dce1dd886479c5a9643a229819b160d8fdf550b", "chunk": "diff --git a/extensions/panache/hibernate-orm-panache-rest/runtime/src/main/java/io/quarkus/hibernate/orm/panache/rest/utils/StringUtil.java b/extensions/panache/hibernate-orm-panache-rest/runtime/src/main/java/io/quarkus/hibernate/orm/panache/rest/runtime/utils/StringUtil.java\nsimilarity index 97%\nrename from extensions/panache/hibernate-orm-panache-rest/runtime/src/main/java/io/quarkus/hibernate/orm/panache/rest/utils/StringUtil.java\nrename to extensions/panache/hibernate-orm-panache-rest/runtime/src/main/java/io/quarkus/hibernate/orm/panache/rest/runtime/utils/StringUtil.java\nindex 46ba9f1799..4501b46c92 100644\n--- a/extensions/panache/hibernate-orm-panache-rest/runtime/src/main/java/io/quarkus/hibernate/orm/panache/rest/utils/StringUtil.java\n+++ b/extensions/panache/hibernate-orm-panache-rest/runtime/src/main/java/io/quarkus/hibernate/orm/panache/rest/runtime/utils/StringUtil.java\n\n@@ -1,4 +1,4 @@\n-package io.quarkus.hibernate.orm.panache.rest.utils;\n+package io.quarkus.hibernate.orm.panache.rest.runtime.utils;\n \n import static io.quarkus.runtime.util.StringUtil.camelHumpsIterator;\n import static io.quarkus.runtime.util.StringUtil.lowerCase;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2NDIwMg==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r392864202", "bodyText": "Is there any reason you chose not to use index.getIndex().getAllKnownImplementors(PANACHE_CRUD_CONTROLLER_INTERFACE)?", "author": "geoand", "createdAt": "2020-03-16T08:54:05Z", "path": "extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/hibernate/orm/panache/rest/deployment/HibernateOrmPanacheRestProcessor.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package io.quarkus.hibernate.orm.panache.rest.deployment;\n+\n+import static io.quarkus.deployment.builditem.FeatureBuildItem.HIBERNATE_ORM_PANACHE_REST;\n+\n+import java.lang.reflect.Modifier;\n+import java.util.Arrays;\n+\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.logging.Logger;\n+import org.jboss.resteasy.links.impl.EL;\n+\n+import io.quarkus.arc.deployment.GeneratedBeanBuildItem;\n+import io.quarkus.arc.deployment.GeneratedBeanGizmoAdaptor;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.RuntimeInitializedClassBuildItem;\n+import io.quarkus.hibernate.orm.panache.rest.PanacheCrudController;\n+import io.quarkus.hibernate.orm.panache.rest.hal.HalCollectionWrapper;\n+import io.quarkus.hibernate.orm.panache.rest.hal.HalCollectionWrapperJacksonSerializer;\n+import io.quarkus.hibernate.orm.panache.rest.hal.HalCollectionWrapperJsonbSerializer;\n+import io.quarkus.hibernate.orm.panache.rest.hal.HalEntityWrapper;\n+import io.quarkus.hibernate.orm.panache.rest.hal.HalEntityWrapperJacksonSerializer;\n+import io.quarkus.hibernate.orm.panache.rest.hal.HalEntityWrapperJsonbSerializer;\n+import io.quarkus.hibernate.orm.panache.rest.hal.HalLink;\n+import io.quarkus.hibernate.orm.panache.rest.hal.HalLinkJacksonSerializer;\n+import io.quarkus.hibernate.orm.panache.rest.hal.HalLinkJsonbSerializer;\n+import io.quarkus.jackson.spi.JacksonModuleBuildItem;\n+import io.quarkus.jsonb.spi.JsonbSerializerBuildItem;\n+\n+class HibernateOrmPanacheRestProcessor {\n+\n+    private static final DotName PANACHE_CRUD_CONTROLLER_INTERFACE = DotName\n+            .createSimple(PanacheCrudController.class.getName());\n+\n+    private static final Logger LOGGER = Logger.getLogger(HibernateOrmPanacheRestProcessor.class);\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(HIBERNATE_ORM_PANACHE_REST);\n+    }\n+\n+    @BuildStep\n+    RuntimeInitializedClassBuildItem el() {\n+        return new RuntimeInitializedClassBuildItem(EL.class.getCanonicalName());\n+    }\n+\n+    @BuildStep\n+    void generateControllers(CombinedIndexBuildItem index, BuildProducer<GeneratedBeanBuildItem> implementationsProducer) {\n+        ControllerImplementor implementor = new ControllerImplementor(new GeneratedBeanGizmoAdaptor(implementationsProducer));\n+        for (ClassInfo classInfo : index.getIndex().getKnownClasses()) {", "originalCommit": "025984e97005ab81d89788954f3ed248fc0c4f3e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg3MzU4MA==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r392873580", "bodyText": "Good point, I forgot about it.", "author": "gytis", "createdAt": "2020-03-16T09:12:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2NDIwMg=="}], "type": "inlineReview", "revised_code": {"commit": "5dce1dd886479c5a9643a229819b160d8fdf550b", "chunk": "diff --git a/extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/hibernate/orm/panache/rest/deployment/HibernateOrmPanacheRestProcessor.java b/extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/hibernate/orm/panache/rest/deployment/HibernateOrmPanacheRestProcessor.java\nindex cff3387165..653eabbf45 100644\n--- a/extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/hibernate/orm/panache/rest/deployment/HibernateOrmPanacheRestProcessor.java\n+++ b/extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/hibernate/orm/panache/rest/deployment/HibernateOrmPanacheRestProcessor.java\n\n@@ -19,15 +19,15 @@ import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n import io.quarkus.deployment.builditem.FeatureBuildItem;\n import io.quarkus.deployment.builditem.nativeimage.RuntimeInitializedClassBuildItem;\n import io.quarkus.hibernate.orm.panache.rest.PanacheCrudController;\n-import io.quarkus.hibernate.orm.panache.rest.hal.HalCollectionWrapper;\n-import io.quarkus.hibernate.orm.panache.rest.hal.HalCollectionWrapperJacksonSerializer;\n-import io.quarkus.hibernate.orm.panache.rest.hal.HalCollectionWrapperJsonbSerializer;\n-import io.quarkus.hibernate.orm.panache.rest.hal.HalEntityWrapper;\n-import io.quarkus.hibernate.orm.panache.rest.hal.HalEntityWrapperJacksonSerializer;\n-import io.quarkus.hibernate.orm.panache.rest.hal.HalEntityWrapperJsonbSerializer;\n-import io.quarkus.hibernate.orm.panache.rest.hal.HalLink;\n-import io.quarkus.hibernate.orm.panache.rest.hal.HalLinkJacksonSerializer;\n-import io.quarkus.hibernate.orm.panache.rest.hal.HalLinkJsonbSerializer;\n+import io.quarkus.hibernate.orm.panache.rest.runtime.hal.HalCollectionWrapper;\n+import io.quarkus.hibernate.orm.panache.rest.runtime.hal.HalCollectionWrapperJacksonSerializer;\n+import io.quarkus.hibernate.orm.panache.rest.runtime.hal.HalCollectionWrapperJsonbSerializer;\n+import io.quarkus.hibernate.orm.panache.rest.runtime.hal.HalEntityWrapper;\n+import io.quarkus.hibernate.orm.panache.rest.runtime.hal.HalEntityWrapperJacksonSerializer;\n+import io.quarkus.hibernate.orm.panache.rest.runtime.hal.HalEntityWrapperJsonbSerializer;\n+import io.quarkus.hibernate.orm.panache.rest.runtime.hal.HalLink;\n+import io.quarkus.hibernate.orm.panache.rest.runtime.hal.HalLinkJacksonSerializer;\n+import io.quarkus.hibernate.orm.panache.rest.runtime.hal.HalLinkJsonbSerializer;\n import io.quarkus.jackson.spi.JacksonModuleBuildItem;\n import io.quarkus.jsonb.spi.JsonbSerializerBuildItem;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2NTQyOQ==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r392865429", "bodyText": "This will need some good javadoc as will its methods", "author": "geoand", "createdAt": "2020-03-16T08:56:29Z", "path": "extensions/panache/hibernate-orm-panache-rest/runtime/src/main/java/io/quarkus/hibernate/orm/panache/rest/PanacheRestResource.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package io.quarkus.hibernate.orm.panache.rest;\n+\n+import static java.lang.annotation.ElementType.METHOD;\n+import static java.lang.annotation.ElementType.TYPE;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+@Documented\n+@Retention(RUNTIME)\n+@Target({ TYPE, METHOD })\n+public @interface PanacheRestResource {", "originalCommit": "025984e97005ab81d89788954f3ed248fc0c4f3e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5dce1dd886479c5a9643a229819b160d8fdf550b", "chunk": "diff --git a/extensions/panache/hibernate-orm-panache-rest/runtime/src/main/java/io/quarkus/hibernate/orm/panache/rest/PanacheRestResource.java b/extensions/panache/hibernate-orm-panache-rest/runtime/src/main/java/io/quarkus/hibernate/orm/panache/rest/PanacheRestResource.java\nindex 7cc1a62ce2..252811d202 100644\n--- a/extensions/panache/hibernate-orm-panache-rest/runtime/src/main/java/io/quarkus/hibernate/orm/panache/rest/PanacheRestResource.java\n+++ b/extensions/panache/hibernate-orm-panache-rest/runtime/src/main/java/io/quarkus/hibernate/orm/panache/rest/PanacheRestResource.java\n\n@@ -13,7 +13,21 @@ import java.lang.annotation.Target;\n @Target({ TYPE, METHOD })\n public @interface PanacheRestResource {\n \n+    /**\n+     * Whether a particular method or all controller methods should be exposed as JAX-RS resources.\n+     * For example, hide a `delete` method if it shouldn't be exposed via REST API.\n+     *\n+     * Default: true.\n+     */\n     boolean exposed() default true;\n \n+    /**\n+     * Whether HAL version of a method or all controller methods should be generated.\n+     * HAL methods are generated in addition to the standard methods. They accept the same parameters but return a content of\n+     * `application/hal+json` type.\n+     * The methods that support HAL responses are `get`, `list`, `add` and `update`.\n+     *\n+     * Default: false.\n+     */\n     boolean hal() default false;\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2NjEyMQ==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r392866121", "bodyText": "What is the rationale for this? Why implement anything at all?", "author": "geoand", "createdAt": "2020-03-16T08:57:49Z", "path": "extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/hibernate/orm/panache/rest/deployment/methods/MethodImplementor.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package io.quarkus.hibernate.orm.panache.rest.deployment.methods;\n+\n+import java.util.List;\n+\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.jandex.Type;\n+\n+import io.quarkus.gizmo.BytecodeCreator;\n+import io.quarkus.gizmo.ClassCreator;\n+import io.quarkus.gizmo.MethodCreator;\n+import io.quarkus.gizmo.MethodDescriptor;\n+import io.quarkus.gizmo.ResultHandle;\n+import io.quarkus.hibernate.orm.panache.PanacheEntityBase;\n+import io.quarkus.hibernate.orm.panache.rest.PanacheCrudController;\n+import io.quarkus.hibernate.orm.panache.rest.deployment.utils.PanacheRestResourceReader;\n+import io.quarkus.hibernate.orm.panache.rest.hal.HalEntityWrapper;\n+\n+public abstract class MethodImplementor {\n+\n+    private static final DotName PANACHE_CRUD_CONTROLLER_INTERFACE = DotName\n+            .createSimple(PanacheCrudController.class.getName());\n+\n+    private final ClassInfo controllerInterface;\n+\n+    private final PanacheRestResourceReader panacheRestResourceReader;\n+\n+    private final String entityType;\n+\n+    private final String idType;\n+\n+    protected MethodImplementor(ClassInfo controllerInterface, IndexView index) {\n+        this.controllerInterface = controllerInterface;\n+        this.panacheRestResourceReader = new PanacheRestResourceReader(index);\n+\n+        List<Type> types = getControllerTypes(controllerInterface);\n+        this.entityType = types.get(0).name().toString();\n+        this.idType = types.get(1).name().toString();\n+    }\n+\n+    public void implement(ClassCreator classCreator) {\n+        if (panacheRestResourceReader.isExposed(controllerInterface, getName(), getParameterTypes())) {\n+            implementRegular(classCreator);\n+            if (panacheRestResourceReader.isHal(controllerInterface, getName(), getParameterTypes())) {\n+                implementHal(classCreator);\n+            }\n+        } else {\n+            implementNotExposed(classCreator);", "originalCommit": "025984e97005ab81d89788954f3ed248fc0c4f3e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg3NDQwOA==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r392874408", "bodyText": "We're implementing an interface. Don't we need to implement all abstract methods for this to work for Quarkus?", "author": "gytis", "createdAt": "2020-03-16T09:14:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2NjEyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg3ODUwNw==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r392878507", "bodyText": "Now I see exactly what the flow of the code is, so I guess my comment doesn't make sense.\nWhat I did have in mind was the class probably shouldn't be generated if there are no exposed methods.\nAlso perhaps we should have some debug logging at build informing the user about what was implemented and why.", "author": "geoand", "createdAt": "2020-03-16T09:21:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2NjEyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg4MDkwNg==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r392880906", "bodyText": "+1 on debug messages", "author": "gytis", "createdAt": "2020-03-16T09:25:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2NjEyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "5dce1dd886479c5a9643a229819b160d8fdf550b", "chunk": "diff --git a/extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/hibernate/orm/panache/rest/deployment/methods/MethodImplementor.java b/extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/hibernate/orm/panache/rest/deployment/methods/MethodImplementor.java\nindex da43816be8..27607501dd 100644\n--- a/extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/hibernate/orm/panache/rest/deployment/methods/MethodImplementor.java\n+++ b/extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/hibernate/orm/panache/rest/deployment/methods/MethodImplementor.java\n\n@@ -6,6 +6,7 @@ import org.jboss.jandex.ClassInfo;\n import org.jboss.jandex.DotName;\n import org.jboss.jandex.IndexView;\n import org.jboss.jandex.Type;\n+import org.jboss.logging.Logger;\n \n import io.quarkus.gizmo.BytecodeCreator;\n import io.quarkus.gizmo.ClassCreator;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2Njg0OA==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r392866848", "bodyText": "What happens here is the interface type also extends other (non-panache) interfaces? It looks like it will blow up. Do we want that? If so, then we should at least have a proper error message specifying this restriction.", "author": "geoand", "createdAt": "2020-03-16T08:59:10Z", "path": "extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/hibernate/orm/panache/rest/deployment/methods/MethodImplementor.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package io.quarkus.hibernate.orm.panache.rest.deployment.methods;\n+\n+import java.util.List;\n+\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.jandex.Type;\n+\n+import io.quarkus.gizmo.BytecodeCreator;\n+import io.quarkus.gizmo.ClassCreator;\n+import io.quarkus.gizmo.MethodCreator;\n+import io.quarkus.gizmo.MethodDescriptor;\n+import io.quarkus.gizmo.ResultHandle;\n+import io.quarkus.hibernate.orm.panache.PanacheEntityBase;\n+import io.quarkus.hibernate.orm.panache.rest.PanacheCrudController;\n+import io.quarkus.hibernate.orm.panache.rest.deployment.utils.PanacheRestResourceReader;\n+import io.quarkus.hibernate.orm.panache.rest.hal.HalEntityWrapper;\n+\n+public abstract class MethodImplementor {\n+\n+    private static final DotName PANACHE_CRUD_CONTROLLER_INTERFACE = DotName\n+            .createSimple(PanacheCrudController.class.getName());\n+\n+    private final ClassInfo controllerInterface;\n+\n+    private final PanacheRestResourceReader panacheRestResourceReader;\n+\n+    private final String entityType;\n+\n+    private final String idType;\n+\n+    protected MethodImplementor(ClassInfo controllerInterface, IndexView index) {\n+        this.controllerInterface = controllerInterface;\n+        this.panacheRestResourceReader = new PanacheRestResourceReader(index);\n+\n+        List<Type> types = getControllerTypes(controllerInterface);\n+        this.entityType = types.get(0).name().toString();\n+        this.idType = types.get(1).name().toString();\n+    }\n+\n+    public void implement(ClassCreator classCreator) {\n+        if (panacheRestResourceReader.isExposed(controllerInterface, getName(), getParameterTypes())) {\n+            implementRegular(classCreator);\n+            if (panacheRestResourceReader.isHal(controllerInterface, getName(), getParameterTypes())) {\n+                implementHal(classCreator);\n+            }\n+        } else {\n+            implementNotExposed(classCreator);\n+        }\n+    }\n+\n+    protected abstract void implementRegular(ClassCreator classCreator);\n+\n+    protected abstract void implementHal(ClassCreator classCreator);\n+\n+    protected abstract String getName();\n+\n+    protected abstract String getReturnType();\n+\n+    protected abstract String[] getParameterTypes();\n+\n+    protected String getEntityType() {\n+        return entityType;\n+    }\n+\n+    protected String getIdType() {\n+        return idType;\n+    }\n+\n+    protected ResultHandle findEntity(BytecodeCreator creator, ResultHandle id, String type) {\n+        return creator.invokeStaticMethod(\n+                MethodDescriptor.ofMethod(type, \"findById\", PanacheEntityBase.class, Object.class), id);\n+    }\n+\n+    protected ResultHandle wrapHalEntity(BytecodeCreator creator, ResultHandle entity) {\n+        return creator.newInstance(MethodDescriptor.ofConstructor(HalEntityWrapper.class, Object.class), entity);\n+    }\n+\n+    private void implementNotExposed(ClassCreator classCreator) {\n+        MethodCreator methodCreator = classCreator.getMethodCreator(getName(), getReturnType(), getParameterTypes());\n+        methodCreator.throwException(RuntimeException.class, String.format(\"'%s' method is not exposed\", getName()));\n+        methodCreator.close();\n+    }\n+\n+    private List<Type> getControllerTypes(ClassInfo controllerInterface) {", "originalCommit": "025984e97005ab81d89788954f3ed248fc0c4f3e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg3OTIwOA==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r392879208", "bodyText": "Hmm good point. Maybe we should only allow a single interface for now, what do you think? We could consider adding support for multiple interfaces in later versions.", "author": "gytis", "createdAt": "2020-03-16T09:22:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2Njg0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg4MDA3MQ==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r392880071", "bodyText": "Yes, I think that is a good compromise for a first version", "author": "geoand", "createdAt": "2020-03-16T09:24:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2Njg0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg4MDIzNg==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r392880236", "bodyText": "I'm scanning for intermediate interfaces like interface BookController extends GenericBookController interface GenericBookController extends PanacheCrudController and ignore them with an error message. I could add similar thing for multiple interfaces.", "author": "gytis", "createdAt": "2020-03-16T09:24:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2Njg0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg4MzU1MA==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r392883550", "bodyText": "\ud83d\udc4d", "author": "geoand", "createdAt": "2020-03-16T09:30:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2Njg0OA=="}], "type": "inlineReview", "revised_code": {"commit": "5dce1dd886479c5a9643a229819b160d8fdf550b", "chunk": "diff --git a/extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/hibernate/orm/panache/rest/deployment/methods/MethodImplementor.java b/extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/hibernate/orm/panache/rest/deployment/methods/MethodImplementor.java\nindex da43816be8..27607501dd 100644\n--- a/extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/hibernate/orm/panache/rest/deployment/methods/MethodImplementor.java\n+++ b/extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/hibernate/orm/panache/rest/deployment/methods/MethodImplementor.java\n\n@@ -6,6 +6,7 @@ import org.jboss.jandex.ClassInfo;\n import org.jboss.jandex.DotName;\n import org.jboss.jandex.IndexView;\n import org.jboss.jandex.Type;\n+import org.jboss.logging.Logger;\n \n import io.quarkus.gizmo.BytecodeCreator;\n import io.quarkus.gizmo.ClassCreator;\n"}}, {"oid": "5dce1dd886479c5a9643a229819b160d8fdf550b", "url": "https://github.com/quarkusio/quarkus/commit/5dce1dd886479c5a9643a229819b160d8fdf550b", "message": "[Squash] Move @JsonIgnore to a getter", "committedDate": "2020-03-25T15:04:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIwNDgwMA==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r399204800", "bodyText": "Minor comment: Seems like all implementations return Response. Can't we get rid of this, or is this some forward looking thing?", "author": "geoand", "createdAt": "2020-03-27T11:39:39Z", "path": "extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/hibernate/orm/panache/rest/deployment/methods/MethodImplementor.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package io.quarkus.hibernate.orm.panache.rest.deployment.methods;\n+\n+import java.util.List;\n+\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.jandex.Type;\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.gizmo.BytecodeCreator;\n+import io.quarkus.gizmo.ClassCreator;\n+import io.quarkus.gizmo.MethodCreator;\n+import io.quarkus.gizmo.MethodDescriptor;\n+import io.quarkus.gizmo.ResultHandle;\n+import io.quarkus.hibernate.orm.panache.PanacheEntityBase;\n+import io.quarkus.hibernate.orm.panache.rest.PanacheCrudController;\n+import io.quarkus.hibernate.orm.panache.rest.deployment.utils.PanacheRestResourceReader;\n+import io.quarkus.hibernate.orm.panache.rest.runtime.hal.HalEntityWrapper;\n+\n+public abstract class MethodImplementor {\n+\n+    private static final DotName PANACHE_CRUD_CONTROLLER_INTERFACE = DotName\n+            .createSimple(PanacheCrudController.class.getName());\n+\n+    private static final Logger LOGGER = Logger.getLogger(MethodImplementor.class);\n+\n+    private final ClassInfo controllerInterface;\n+\n+    private final PanacheRestResourceReader panacheRestResourceReader;\n+\n+    private final String entityType;\n+\n+    private final String idType;\n+\n+    protected MethodImplementor(ClassInfo controllerInterface, IndexView index) {\n+        this.controllerInterface = controllerInterface;\n+        this.panacheRestResourceReader = new PanacheRestResourceReader(index);\n+\n+        List<Type> types = getControllerTypes(controllerInterface);\n+        this.entityType = types.get(0).name().toString();\n+        this.idType = types.get(1).name().toString();\n+    }\n+\n+    public void implement(ClassCreator classCreator) {\n+        if (panacheRestResourceReader.isExposed(controllerInterface, getName(), getParameterTypes())) {\n+            LOGGER.tracef(\"Implementing '%s#%s' method\", classCreator.getClassName(), getName());\n+            implementRegular(classCreator);\n+            if (panacheRestResourceReader.isHal(controllerInterface, getName(), getParameterTypes())) {\n+                LOGGER.tracef(\"Implementing '%s#%s' HAL method\", classCreator.getClassName(), getName());\n+                implementHal(classCreator);\n+            }\n+        } else {\n+            LOGGER.tracef(\"Skipping '%s#%s', method not exposed\", classCreator.getClassName(), getName());\n+            implementNotExposed(classCreator);\n+        }\n+    }\n+\n+    protected abstract void implementRegular(ClassCreator classCreator);\n+\n+    protected abstract void implementHal(ClassCreator classCreator);\n+\n+    protected abstract String getName();\n+\n+    protected abstract String getReturnType();", "originalCommit": "144235910eafa4762367f9c7e139ac49e2d54d4c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3c1607e048061fda7aa3d0bf171f28f085dff0f7", "chunk": "diff --git a/extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/hibernate/orm/panache/rest/deployment/methods/MethodImplementor.java b/extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/hibernate/orm/panache/rest/deployment/methods/MethodImplementor.java\nindex 27607501dd..08f2e017e1 100644\n--- a/extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/hibernate/orm/panache/rest/deployment/methods/MethodImplementor.java\n+++ b/extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/hibernate/orm/panache/rest/deployment/methods/MethodImplementor.java\n\n@@ -2,6 +2,8 @@ package io.quarkus.hibernate.orm.panache.rest.deployment.methods;\n \n import java.util.List;\n \n+import javax.ws.rs.core.Response;\n+\n import org.jboss.jandex.ClassInfo;\n import org.jboss.jandex.DotName;\n import org.jboss.jandex.IndexView;\n"}}, {"oid": "3c1607e048061fda7aa3d0bf171f28f085dff0f7", "url": "https://github.com/quarkusio/quarkus/commit/3c1607e048061fda7aa3d0bf171f28f085dff0f7", "message": "Panache Hibernate REST", "committedDate": "2020-04-01T08:34:31Z", "type": "forcePushed"}, {"oid": "50d3f20fb7398fad22b0506402bbbc044f6e57bc", "url": "https://github.com/quarkusio/quarkus/commit/50d3f20fb7398fad22b0506402bbbc044f6e57bc", "message": "Panache Hibernate REST", "committedDate": "2020-04-01T09:26:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAwNDUzMg==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r403004532", "bodyText": "This looks like an @Override, right? It's a bit annoying to have to override methods and get their signatures right just to say they should not be exposed. Can't we trade that with a @Crud(disable = {CrudMethod.Add, CrudMethod.Update, CrudMethod.Delete}) on the type instead?", "author": "FroMage", "createdAt": "2020-04-03T13:27:58Z", "path": "integration-tests/hibernate-orm-panache-rest/src/main/java/io/quarkus/it/panache/rest/AuthorController.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package io.quarkus.it.panache.rest;\n+\n+import javax.ws.rs.core.Response;\n+\n+import io.quarkus.hibernate.orm.panache.rest.PanacheCrudController;\n+import io.quarkus.hibernate.orm.panache.rest.PanacheRestResource;\n+\n+public interface AuthorController extends PanacheCrudController<Author, Long> {\n+\n+    @PanacheRestResource(exposed = false)", "originalCommit": "50d3f20fb7398fad22b0506402bbbc044f6e57bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkyODA5Ng==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r403928096", "bodyText": "If we would go away from an override, maybe it would be better to consider avoiding extending an interface all together? User could specify what methods to expose with the annotations like @PanacheList, @PanacheAdd etc.\nPlus in the future we could add @PanacheListBy(fieldName=\"\").\nI just wonder what is the more appropriate way for Quarkus? Annotations or methods?", "author": "gytis", "createdAt": "2020-04-06T08:51:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAwNDUzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkyOTg5NA==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r403929894", "bodyText": "Well, IMO override is for overriding the behaviour of the method. Change its implementation. This is disabling, so rewriting the entire signature feels like overkill, no?", "author": "FroMage", "createdAt": "2020-04-06T08:54:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAwNDUzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk0NTQ5MQ==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r403945491", "bodyText": "I agree, that's why I'm raising the point of maybe getting rid of override in the first place and relying only on annotations to define which methods should be implemented. Since all the definitions are in the interfaces user cannot really override any implementation anyway (at lest not at the moment).", "author": "gytis", "createdAt": "2020-04-06T09:19:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAwNDUzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk0OTUxMg==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r403949512", "bodyText": "Well I imagine you can override it by declaring a default method.\nOTOH if you want to override it and at the same time require more parameters such as query params or context objects then you can't use an override and your approach with annotating a method with @PanacheList (which would automatically remove the list generation we would normally add) sounds indeed like a more flexible approach.", "author": "FroMage", "createdAt": "2020-04-06T09:25:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAwNDUzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk1MjQzMg==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r403952432", "bodyText": "@geoand want to pitch in?", "author": "gytis", "createdAt": "2020-04-06T09:30:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAwNDUzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk1ODgzNw==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r403958837", "bodyText": "I like @FroMage's approach more TBH. I don't think we need to make things fully flexible (otherwise the user could just create their own Resource, no?) and  the @Crud seems to me like a good idea to add just enough flexibility", "author": "geoand", "createdAt": "2020-04-06T09:40:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAwNDUzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk2NjU2Mg==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r403966562", "bodyText": "This is disabling, so rewriting the entire signature feels like overkill\nAlso agree: to disable a method, some annotation on the interface level should be OK. (maybe @Crud is too generic, @RestCrud seems better as it's a CRUD over REST right?)\n\nBut as I said in a comment, this is very common to add security, openapi and metrics to a REST endpoint, so a user may ends up overriding very often those methods (except if we provides @EnablesMetrics, @EnableOpenApi and @EnabledSecurity annotations that triggers generation of default implementation for them ...)", "author": "loicmathieu", "createdAt": "2020-04-06T09:53:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAwNDUzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk3MzU4MQ==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r403973581", "bodyText": "So, it depends on how you would write code to override an otherwise-generate method. Which comes down to our discussion about creating an override or using @PanacheList to annotate a method replacement.\nIn either approaches, do we allow calling the original method (as declared in the PanacheCrudController interface) to get the default implementation (and thus, just change the annotations) or would that method throw?\nI guess we do need to test it out for size.", "author": "FroMage", "createdAt": "2020-04-06T10:04:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAwNDUzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk3OTg2MQ==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r403979861", "bodyText": "I would not allow to provides a custom implementation at this stage, but only to allow to override the method definition inside the interface to add security, open-api and metrics annotation.\nSomething like this should works\npublic interface AuthorController extends PanacheCrudController<Author, Long> {\n  @Metered\n  @RolesAllowed(\"READER\")\n  @Operation(summary = \"List all authors\")\n  @Override\n  Response list();\n}", "author": "loicmathieu", "createdAt": "2020-04-06T10:16:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAwNDUzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk4NTcwOQ==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r403985709", "bodyText": "Hm... the more use cases come up, the more it does seem that we have to allow users to add custom annotations on methods... So it seems like having something @Crud on the class won't fly well, since we would need to adding such annotations for things like OpenAPI, metrics etc...\nSo maybe just overriding the method is the way to go. What are the chances that a user will get the signature wrong when you have IDEs to help you (not to mention the @Override annotation that the compiler will check)?", "author": "geoand", "createdAt": "2020-04-06T10:26:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAwNDUzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAwNzQ1Mg==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r404007452", "bodyText": "The I'd suggest to keep enable/disable as is as well.", "author": "gytis", "createdAt": "2020-04-06T11:06:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAwNDUzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2NzM0NA==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r404067344", "bodyText": "Well, there are really three different use-cases here.\n1/ Keeping the behaviour but altering annotations:\npublic interface AuthorController extends PanacheCrudController<Author, Long> {\n// TODO: are the original annotations inherited? @GET, etc\u2026\n  @Metered\n  @RolesAllowed(\"READER\")\n  @Operation(summary = \"List all authors\")\n  @Override\n  Response list();\n}\n2/ Changing the behaviour by delegating to original impl:\npublic interface AuthorController extends PanacheCrudController<Author, Long> {\n// TODO: original annotations?\n  @Metered\n  @RolesAllowed(\"READER\")\n  @Operation(summary = \"List all authors\")\n  @Override\n  default Response list(){\n    Logger.info(\"We're doing a list, baby, yeah!\");\n    return PanacheCrudController::super.list(); // ATM this won't fly since it's not default\n  }\n}\n3/ Changing the behaviour entirely:\npublic interface AuthorController extends PanacheCrudController<Author, Long> {\n// TODO: original annotations?\n  @Metered\n  @RolesAllowed(\"READER\")\n  @Operation(summary = \"List all authors\")\n  @SomeAnnotationToSayThisReplacesList\n  default Response list(@QueryParam String user){\n    Logger.info(\"We're doing a list for %s, baby, yeah!\", user);\n    return Response.ok(Author.byName(user).list()).build();\n  }\n}\nAll three use-cases have open questions:\n1/ Do we have to repeat the original annotations? I guess yes otherwise we can't change/remove them\n2/ How can we delegate to the original method? ATM we can't because the method is not defaulted, and if it's not we can't invoke it. Supporting the use-case from 3/ would allow us to specify the new method with a new name and still generate (and manually invoke) the original method (unexposed).\n3/ We need an annotation to specify that this method replaces another one, but it allows us to extend the parameters and solve 2/ as well.\nNone of those requirements force us towards any direction as to how to disable one method (as opposed to altering it), and so I still think an annotation on the class is easier than specifying the signature just to remove it. It feels really awkward.", "author": "FroMage", "createdAt": "2020-04-06T12:54:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAwNDUzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA3NDc5Ng==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r404074796", "bodyText": "PanacheCrudController does not have any annotations, they are added automatically when generating implementation. There were issues with generics declaration and RestEasy ended up registering two resources for the same path. For example with POST it would register one resource at /books that accepts Book as a body and another that accepts Object. If there is a way to work around this I'm happy to look into it again.\nAlso right now none of these default implementations will work. Code is always generated for these methods. Of course this is something that could be changed in the future.", "author": "gytis", "createdAt": "2020-04-06T13:06:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAwNDUzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA4MTE2OQ==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r404081169", "bodyText": "PanacheCrudController does not have any annotations, they are added automatically when generating implementation\n\nYeah, I know. What I'm asking is should the enhancer add those annotations here too? If we don't add them the endpoint method will not work if you override it only with new annotations. OTOH if we do add them (at build-time) then the user can't remove them or alter them (replace a PUT by a PATCH).\n\nAlso right now none of these default implementations will work. Code is always generated for these methods. Of course this is something that could be changed in the future.\n\nSure. And it's fine to add support for overriding them later, but if possible we could agree on a strategy right now and implement it later, this way users won't have to rewrite their code.", "author": "FroMage", "createdAt": "2020-04-06T13:15:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAwNDUzMg=="}], "type": "inlineReview", "revised_code": {"commit": "15e31c8c587561a4b41b290a206e4c676313f120", "chunk": "diff --git a/integration-tests/hibernate-orm-panache-rest/src/main/java/io/quarkus/it/panache/rest/AuthorController.java b/integration-tests/hibernate-orm-panache-rest/src/main/java/io/quarkus/it/panache/rest/AuthorController.java\ndeleted file mode 100644\nindex 6a31151731..0000000000\n--- a/integration-tests/hibernate-orm-panache-rest/src/main/java/io/quarkus/it/panache/rest/AuthorController.java\n+++ /dev/null\n\n@@ -1,18 +0,0 @@\n-package io.quarkus.it.panache.rest;\n-\n-import javax.ws.rs.core.Response;\n-\n-import io.quarkus.hibernate.orm.panache.rest.PanacheCrudController;\n-import io.quarkus.hibernate.orm.panache.rest.PanacheRestResource;\n-\n-public interface AuthorController extends PanacheCrudController<Author, Long> {\n-\n-    @PanacheRestResource(exposed = false)\n-    Response add(Author entity);\n-\n-    @PanacheRestResource(exposed = false)\n-    Response update(Long id, Author entity);\n-\n-    @PanacheRestResource(exposed = false)\n-    Response delete(Long id);\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAxMTUzNg==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r403011536", "bodyText": "What's the use-case for having a \"method not allowed\" instead of a 404? I assume the method does exist, but why? What does \"not exposed\" mean? Is there a way to invoke it internally? Is it useful to have it but not invokable?", "author": "FroMage", "createdAt": "2020-04-03T13:39:01Z", "path": "integration-tests/hibernate-orm-panache-rest/src/test/java/io/quarkus/it/panache/rest/AuthorControllerTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package io.quarkus.it.panache.rest;\n+\n+import static io.restassured.RestAssured.given;\n+import static io.restassured.RestAssured.when;\n+import static javax.ws.rs.core.MediaType.APPLICATION_JSON;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.is;\n+\n+import java.time.LocalDate;\n+import java.time.format.DateTimeFormatter;\n+\n+import javax.ws.rs.core.Response;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+\n+@QuarkusTest\n+class AuthorControllerTest {\n+\n+    private static final String APPLICATION_HAL_JSON = \"application/hal+json\";\n+\n+    private static final Author DOSTOEVSKY = Author.create(1L, \"Fyodor Dostoevsky\", LocalDate.of(1821, 11, 11));\n+\n+    private static final Author ORWELL = Author.create(2L, \"George Orwell\", LocalDate.of(1903, 06, 25));\n+\n+    @Test\n+    void shouldGetOne() {\n+        when().get(\"/authors/\" + DOSTOEVSKY.id)\n+                .then().statusCode(200)\n+                .and().body(\"name\", is(equalTo(DOSTOEVSKY.name)))\n+                .and().body(\"dob\", is(equalTo(DOSTOEVSKY.dob.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")))));\n+    }\n+\n+    @Test\n+    void shouldGetAll() {\n+        when().get(\"/authors\")\n+                .then().statusCode(200)\n+                .and().body(\"name[0]\", is(equalTo(DOSTOEVSKY.name)))\n+                .and().body(\"dob[0]\", is(equalTo(DOSTOEVSKY.dob.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")))))\n+                .and().body(\"name[1]\", is(equalTo(ORWELL.name)))\n+                .and().body(\"dob[1]\", is(equalTo(ORWELL.dob.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")))));\n+    }\n+\n+    @Test\n+    void halGetShouldNotBeExposed() {\n+        given().accept(APPLICATION_HAL_JSON)\n+                .when().get(\"/authors/\" + DOSTOEVSKY.id)\n+                .then().statusCode(Response.Status.NOT_ACCEPTABLE.getStatusCode());\n+        given().accept(APPLICATION_HAL_JSON)\n+                .when().get(\"/authors\")\n+                .then().statusCode(Response.Status.NOT_ACCEPTABLE.getStatusCode());\n+    }\n+\n+    @Test\n+    void postShouldNotBeExposed() {\n+        given().contentType(APPLICATION_JSON)\n+                .and().body(new BookDto.AuthorDto(ORWELL))\n+                .when().post(\"/authors\")\n+                .then().statusCode(Response.Status.METHOD_NOT_ALLOWED.getStatusCode());", "originalCommit": "50d3f20fb7398fad22b0506402bbbc044f6e57bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkyMTYzMw==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r403921633", "bodyText": "404 would mean that the resource was not found. 405 is returned if a method is not available (e.g. DELETE).\nWith @PanacheRestResource(exposed=false) you can hide specific methods of a resource. So for example /books/{id} resource could be accessible via GET but not via DELETE. If a DELETE request is attempted, its response would be 405 Method not allowed", "author": "gytis", "createdAt": "2020-04-06T08:41:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAxMTUzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkyODg5MQ==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r403928891", "bodyText": "Ah, OK, that's a good point. Do you check that there's at least one method for that URL, though? What if I unexpose all methods for a given URL (GET, UPDATE, DELETE I guess)?", "author": "FroMage", "createdAt": "2020-04-06T08:52:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAxMTUzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk0NjY0MA==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r403946640", "bodyText": "No it's not checking for that. But because all the methods are exposed by default, user would have to purposefully do this. We could add it later if it's an issue.", "author": "gytis", "createdAt": "2020-04-06T09:20:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAxMTUzNg=="}], "type": "inlineReview", "revised_code": {"commit": "15e31c8c587561a4b41b290a206e4c676313f120", "chunk": "diff --git a/integration-tests/hibernate-orm-panache-rest/src/test/java/io/quarkus/it/panache/rest/AuthorControllerTest.java b/integration-tests/hibernate-orm-panache-rest/src/test/java/io/quarkus/it/panache/rest/common/AbstractAuthorCrudResourceTest.java\nsimilarity index 56%\nrename from integration-tests/hibernate-orm-panache-rest/src/test/java/io/quarkus/it/panache/rest/AuthorControllerTest.java\nrename to integration-tests/hibernate-orm-panache-rest/src/test/java/io/quarkus/it/panache/rest/common/AbstractAuthorCrudResourceTest.java\nindex 5fbfa74460..8557ef5532 100644\n--- a/integration-tests/hibernate-orm-panache-rest/src/test/java/io/quarkus/it/panache/rest/AuthorControllerTest.java\n+++ b/integration-tests/hibernate-orm-panache-rest/src/test/java/io/quarkus/it/panache/rest/common/AbstractAuthorCrudResourceTest.java\n\n@@ -1,4 +1,4 @@\n-package io.quarkus.it.panache.rest;\n+package io.quarkus.it.panache.rest.common;\n \n import static io.restassured.RestAssured.given;\n import static io.restassured.RestAssured.when;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk0MzMwOA==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r403943308", "bodyText": "I'm not very found of having a method to compute the plural rules, maybe we need to ask the user to give us the root path of the controller istead of generating it automatically by computing the plural of the name of the entity. After all, having the plural of the name of the entity as a root path is a convention that some may not want to use.\nAnd also, we only covers plurals in english and a lot of people are not using english inside their URL. So we may end up with a lot of feature request to support multiple languages ...", "author": "loicmathieu", "createdAt": "2020-04-06T09:15:32Z", "path": "extensions/panache/hibernate-orm-panache-rest/runtime/src/main/java/io/quarkus/hibernate/orm/panache/rest/runtime/utils/StringUtil.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package io.quarkus.hibernate.orm.panache.rest.runtime.utils;\n+\n+import static io.quarkus.runtime.util.StringUtil.camelHumpsIterator;\n+import static io.quarkus.runtime.util.StringUtil.lowerCase;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.StringJoiner;\n+\n+public final class StringUtil {\n+\n+    private static final List<String> REQUIRE_ES = Arrays.asList(\"s\", \"sh\", \"ch\", \"x\", \"z\", \"o\");\n+\n+    private static final Map<String, String> IRREGULARS = new HashMap<>();\n+\n+    static {\n+        IRREGULARS.put(\"child\", \"children\");\n+        IRREGULARS.put(\"goose\", \"geese\");\n+        IRREGULARS.put(\"man\", \"men\");\n+        IRREGULARS.put(\"woman\", \"women\");\n+        IRREGULARS.put(\"tooth\", \"teeth\");\n+        IRREGULARS.put(\"foot\", \"feet\");\n+        IRREGULARS.put(\"mouse\", \"mice\");\n+        IRREGULARS.put(\"person\", \"people\");\n+        IRREGULARS.put(\"photo\", \"photos\");\n+        IRREGULARS.put(\"piano\", \"pianos\");\n+        IRREGULARS.put(\"halo\", \"halos\");\n+        IRREGULARS.put(\"roof\", \"roofs\");\n+        IRREGULARS.put(\"belief\", \"beliefs\");\n+        IRREGULARS.put(\"chef\", \"chefs\");\n+        IRREGULARS.put(\"chief\", \"chiefs\");\n+    }\n+\n+    public static String camelToHyphenated(String camelString) {\n+        if (camelString == null) {\n+            return null;\n+        }\n+\n+        StringJoiner joiner = new StringJoiner(\"-\");\n+        Iterator<String> strings = lowerCase(camelHumpsIterator(camelString));\n+\n+        while (strings.hasNext()) {\n+            joiner.add(strings.next());\n+        }\n+\n+        return joiner.toString();\n+    }\n+\n+    public static String toPlural(String singular) {", "originalCommit": "50d3f20fb7398fad22b0506402bbbc044f6e57bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk2OTQwNg==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r403969406", "bodyText": "I think it's a good default to have which would cover the majority of the cases. I'll add an option to override it though to @PanacheRestResource annotation for the next iteration. WDYT?", "author": "gytis", "createdAt": "2020-04-06T09:58:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk0MzMwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk2OTk0Ng==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r403969946", "bodyText": "I like supporting creation of urls by default in english. Later we can add support for multi-language pluralisation rules or having the user specify them entirely.", "author": "FroMage", "createdAt": "2020-04-06T09:58:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk0MzMwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk3MjI1Mg==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r403972252", "bodyText": "Please, at least let the user specify it ...", "author": "loicmathieu", "createdAt": "2020-04-06T10:02:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk0MzMwOA=="}], "type": "inlineReview", "revised_code": {"commit": "15e31c8c587561a4b41b290a206e4c676313f120", "chunk": "diff --git a/extensions/panache/hibernate-orm-panache-rest/runtime/src/main/java/io/quarkus/hibernate/orm/panache/rest/runtime/utils/StringUtil.java b/extensions/panache/panache-rest-common/runtime/src/main/java/io/quarkus/panache/rest/runtime/utils/StringUtil.java\nsimilarity index 96%\nrename from extensions/panache/hibernate-orm-panache-rest/runtime/src/main/java/io/quarkus/hibernate/orm/panache/rest/runtime/utils/StringUtil.java\nrename to extensions/panache/panache-rest-common/runtime/src/main/java/io/quarkus/panache/rest/runtime/utils/StringUtil.java\nindex 4501b46c92..c01c07c43f 100644\n--- a/extensions/panache/hibernate-orm-panache-rest/runtime/src/main/java/io/quarkus/hibernate/orm/panache/rest/runtime/utils/StringUtil.java\n+++ b/extensions/panache/panache-rest-common/runtime/src/main/java/io/quarkus/panache/rest/runtime/utils/StringUtil.java\n\n@@ -1,4 +1,4 @@\n-package io.quarkus.hibernate.orm.panache.rest.runtime.utils;\n+package io.quarkus.panache.rest.runtime.utils;\n \n import static io.quarkus.runtime.util.StringUtil.camelHumpsIterator;\n import static io.quarkus.runtime.util.StringUtil.lowerCase;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk0NDUwOA==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r403944508", "bodyText": "Why not throwing and exception instead of logging in WARN ?\nAfter all, it will not work as expected so better to throw ?", "author": "loicmathieu", "createdAt": "2020-04-06T09:17:33Z", "path": "extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/hibernate/orm/panache/rest/deployment/HibernateOrmPanacheRestProcessor.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package io.quarkus.hibernate.orm.panache.rest.deployment;\n+\n+import static io.quarkus.deployment.builditem.FeatureBuildItem.HIBERNATE_ORM_PANACHE_REST;\n+\n+import java.lang.reflect.Modifier;\n+import java.util.Arrays;\n+\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.logging.Logger;\n+import org.jboss.resteasy.links.impl.EL;\n+\n+import io.quarkus.arc.deployment.GeneratedBeanBuildItem;\n+import io.quarkus.arc.deployment.GeneratedBeanGizmoAdaptor;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.RuntimeInitializedClassBuildItem;\n+import io.quarkus.hibernate.orm.panache.rest.PanacheCrudController;\n+import io.quarkus.hibernate.orm.panache.rest.runtime.hal.HalCollectionWrapper;\n+import io.quarkus.hibernate.orm.panache.rest.runtime.hal.HalCollectionWrapperJacksonSerializer;\n+import io.quarkus.hibernate.orm.panache.rest.runtime.hal.HalCollectionWrapperJsonbSerializer;\n+import io.quarkus.hibernate.orm.panache.rest.runtime.hal.HalEntityWrapper;\n+import io.quarkus.hibernate.orm.panache.rest.runtime.hal.HalEntityWrapperJacksonSerializer;\n+import io.quarkus.hibernate.orm.panache.rest.runtime.hal.HalEntityWrapperJsonbSerializer;\n+import io.quarkus.hibernate.orm.panache.rest.runtime.hal.HalLink;\n+import io.quarkus.hibernate.orm.panache.rest.runtime.hal.HalLinkJacksonSerializer;\n+import io.quarkus.hibernate.orm.panache.rest.runtime.hal.HalLinkJsonbSerializer;\n+import io.quarkus.jackson.spi.JacksonModuleBuildItem;\n+import io.quarkus.jsonb.spi.JsonbSerializerBuildItem;\n+\n+class HibernateOrmPanacheRestProcessor {\n+\n+    private static final DotName PANACHE_CRUD_CONTROLLER_INTERFACE = DotName\n+            .createSimple(PanacheCrudController.class.getName());\n+\n+    private static final Logger LOGGER = Logger.getLogger(HibernateOrmPanacheRestProcessor.class);\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(HIBERNATE_ORM_PANACHE_REST);\n+    }\n+\n+    @BuildStep\n+    RuntimeInitializedClassBuildItem el() {\n+        return new RuntimeInitializedClassBuildItem(EL.class.getCanonicalName());\n+    }\n+\n+    @BuildStep\n+    void generateControllers(CombinedIndexBuildItem index, BuildProducer<GeneratedBeanBuildItem> implementationsProducer) {\n+        ControllerImplementor implementor = new ControllerImplementor(new GeneratedBeanGizmoAdaptor(implementationsProducer));\n+        for (ClassInfo classInfo : index.getIndex().getKnownDirectImplementors(PANACHE_CRUD_CONTROLLER_INTERFACE)) {\n+            if (isValidCrudController(index.getIndex(), classInfo)) {\n+                implementor.implement(classInfo, index.getIndex());\n+            }\n+        }\n+    }\n+\n+    private boolean isValidCrudController(IndexView index, ClassInfo classInfo) {", "originalCommit": "50d3f20fb7398fad22b0506402bbbc044f6e57bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk2ODY1NA==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r403968654", "bodyText": "Could do that if it's a more appropriate for Quarkus.", "author": "gytis", "createdAt": "2020-04-06T09:56:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk0NDUwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk4Njk3NA==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r403986974", "bodyText": "Yeah, I think failing the build would be more appropriate. We do that in other places, like Spring Data JPA.", "author": "geoand", "createdAt": "2020-04-06T10:28:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk0NDUwOA=="}], "type": "inlineReview", "revised_code": {"commit": "15e31c8c587561a4b41b290a206e4c676313f120", "chunk": "diff --git a/extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/hibernate/orm/panache/rest/deployment/HibernateOrmPanacheRestProcessor.java b/extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/hibernate/orm/panache/rest/deployment/HibernateOrmPanacheRestProcessor.java\ndeleted file mode 100644\nindex 653eabbf45..0000000000\n--- a/extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/hibernate/orm/panache/rest/deployment/HibernateOrmPanacheRestProcessor.java\n+++ /dev/null\n\n@@ -1,96 +0,0 @@\n-package io.quarkus.hibernate.orm.panache.rest.deployment;\n-\n-import static io.quarkus.deployment.builditem.FeatureBuildItem.HIBERNATE_ORM_PANACHE_REST;\n-\n-import java.lang.reflect.Modifier;\n-import java.util.Arrays;\n-\n-import org.jboss.jandex.ClassInfo;\n-import org.jboss.jandex.DotName;\n-import org.jboss.jandex.IndexView;\n-import org.jboss.logging.Logger;\n-import org.jboss.resteasy.links.impl.EL;\n-\n-import io.quarkus.arc.deployment.GeneratedBeanBuildItem;\n-import io.quarkus.arc.deployment.GeneratedBeanGizmoAdaptor;\n-import io.quarkus.deployment.annotations.BuildProducer;\n-import io.quarkus.deployment.annotations.BuildStep;\n-import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n-import io.quarkus.deployment.builditem.FeatureBuildItem;\n-import io.quarkus.deployment.builditem.nativeimage.RuntimeInitializedClassBuildItem;\n-import io.quarkus.hibernate.orm.panache.rest.PanacheCrudController;\n-import io.quarkus.hibernate.orm.panache.rest.runtime.hal.HalCollectionWrapper;\n-import io.quarkus.hibernate.orm.panache.rest.runtime.hal.HalCollectionWrapperJacksonSerializer;\n-import io.quarkus.hibernate.orm.panache.rest.runtime.hal.HalCollectionWrapperJsonbSerializer;\n-import io.quarkus.hibernate.orm.panache.rest.runtime.hal.HalEntityWrapper;\n-import io.quarkus.hibernate.orm.panache.rest.runtime.hal.HalEntityWrapperJacksonSerializer;\n-import io.quarkus.hibernate.orm.panache.rest.runtime.hal.HalEntityWrapperJsonbSerializer;\n-import io.quarkus.hibernate.orm.panache.rest.runtime.hal.HalLink;\n-import io.quarkus.hibernate.orm.panache.rest.runtime.hal.HalLinkJacksonSerializer;\n-import io.quarkus.hibernate.orm.panache.rest.runtime.hal.HalLinkJsonbSerializer;\n-import io.quarkus.jackson.spi.JacksonModuleBuildItem;\n-import io.quarkus.jsonb.spi.JsonbSerializerBuildItem;\n-\n-class HibernateOrmPanacheRestProcessor {\n-\n-    private static final DotName PANACHE_CRUD_CONTROLLER_INTERFACE = DotName\n-            .createSimple(PanacheCrudController.class.getName());\n-\n-    private static final Logger LOGGER = Logger.getLogger(HibernateOrmPanacheRestProcessor.class);\n-\n-    @BuildStep\n-    FeatureBuildItem feature() {\n-        return new FeatureBuildItem(HIBERNATE_ORM_PANACHE_REST);\n-    }\n-\n-    @BuildStep\n-    RuntimeInitializedClassBuildItem el() {\n-        return new RuntimeInitializedClassBuildItem(EL.class.getCanonicalName());\n-    }\n-\n-    @BuildStep\n-    void generateControllers(CombinedIndexBuildItem index, BuildProducer<GeneratedBeanBuildItem> implementationsProducer) {\n-        ControllerImplementor implementor = new ControllerImplementor(new GeneratedBeanGizmoAdaptor(implementationsProducer));\n-        for (ClassInfo classInfo : index.getIndex().getKnownDirectImplementors(PANACHE_CRUD_CONTROLLER_INTERFACE)) {\n-            if (isValidCrudController(index.getIndex(), classInfo)) {\n-                implementor.implement(classInfo, index.getIndex());\n-            }\n-        }\n-    }\n-\n-    private boolean isValidCrudController(IndexView index, ClassInfo classInfo) {\n-        if (!Modifier.isInterface(classInfo.flags())) {\n-            return false;\n-        }\n-\n-        if (classInfo.interfaceNames().size() > 1) {\n-            LOGGER.warnf(\"Controller interface '%s' should only extend '%s'\", classInfo.name(),\n-                    PanacheCrudController.class.getName());\n-            return false;\n-        }\n-\n-        if (!index.getKnownDirectImplementors(classInfo.name()).isEmpty()) {\n-            LOGGER.warnf(\"Controller interface '%s' should not be extended or implemented\", classInfo.name());\n-            return false;\n-        }\n-\n-        return true;\n-    }\n-\n-    @BuildStep\n-    JacksonModuleBuildItem registerJacksonSerializers() {\n-        return new JacksonModuleBuildItem.Builder(\"hal-wrappers\")\n-                .addSerializer(HalEntityWrapperJacksonSerializer.class.getName(), HalEntityWrapper.class.getName())\n-                .addSerializer(HalCollectionWrapperJacksonSerializer.class.getName(), HalCollectionWrapper.class.getName())\n-                .addSerializer(HalLinkJacksonSerializer.class.getName(), HalLink.class.getName())\n-                .build();\n-    }\n-\n-    @BuildStep\n-    JsonbSerializerBuildItem registerJsonbSerializers() {\n-        return new JsonbSerializerBuildItem(Arrays.asList(\n-                HalEntityWrapperJsonbSerializer.class.getName(),\n-                HalCollectionWrapperJsonbSerializer.class.getName(),\n-                HalLinkJsonbSerializer.class.getName()));\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk1MDM1MA==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r403950350", "bodyText": "I think this should be provided by the user not automatically generated.\nURL are the central point of the design of an API so a user must be able to manage them.", "author": "loicmathieu", "createdAt": "2020-04-06T09:27:05Z", "path": "extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/hibernate/orm/panache/rest/deployment/utils/EntityUrlProvider.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package io.quarkus.hibernate.orm.panache.rest.deployment.utils;\n+\n+import java.net.URI;\n+\n+import io.quarkus.gizmo.BytecodeCreator;\n+import io.quarkus.gizmo.MethodDescriptor;\n+import io.quarkus.gizmo.ResultHandle;\n+import io.quarkus.hibernate.orm.panache.rest.runtime.utils.StringUtil;\n+\n+public final class EntityUrlProvider {\n+\n+    private final EntityFieldAccessor fieldAccessor;\n+\n+    public EntityUrlProvider(EntityFieldAccessor fieldAccessor) {\n+        this.fieldAccessor = fieldAccessor;\n+    }\n+\n+    public static String getCollectionUrl(String entityType) {\n+        return StringUtil.toPlural(StringUtil.camelToHyphenated(removePackage(entityType)));\n+    }\n+\n+    private static String removePackage(String className) {\n+        return className.substring(className.lastIndexOf(\".\") + 1);\n+    }\n+\n+    public ResultHandle getEntityUrl(BytecodeCreator creator, ResultHandle entity, String entityType) {", "originalCommit": "50d3f20fb7398fad22b0506402bbbc044f6e57bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk2NzE0MA==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r403967140", "bodyText": "We could allow a user to override a path segment (e.g. by default we use /books for Book.class) but we still need to generate a URL for each entity based on its ID (/books/1, /books/2...)", "author": "gytis", "createdAt": "2020-04-06T09:54:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk1MDM1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk3NDQ0Mg==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r403974442", "bodyText": "We should support overriding this, but it can wait. We can make this an annotation on the controller like @CRUD(singleUrl = \"book\", url = \"books\").", "author": "FroMage", "createdAt": "2020-04-06T10:06:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk1MDM1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk3NjA1MA==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r403976050", "bodyText": "Yes, that's what I was thinking. I just don't think that CRUD is a correct name if we plan to add more that these four methods. For now I've been using @PanacheRestResource annotation to define these things (so far enable and hal).", "author": "gytis", "createdAt": "2020-04-06T10:09:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk1MDM1MA=="}], "type": "inlineReview", "revised_code": {"commit": "15e31c8c587561a4b41b290a206e4c676313f120", "chunk": "diff --git a/extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/hibernate/orm/panache/rest/deployment/utils/EntityUrlProvider.java b/extensions/panache/panache-rest-common/deployment/src/main/java/io/quarkus/panache/rest/deployment/utils/UrlImplementor.java\nsimilarity index 74%\nrename from extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/hibernate/orm/panache/rest/deployment/utils/EntityUrlProvider.java\nrename to extensions/panache/panache-rest-common/deployment/src/main/java/io/quarkus/panache/rest/deployment/utils/UrlImplementor.java\nindex 6bc47bbe0e..7eabfdfdec 100644\n--- a/extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/hibernate/orm/panache/rest/deployment/utils/EntityUrlProvider.java\n+++ b/extensions/panache/panache-rest-common/deployment/src/main/java/io/quarkus/panache/rest/deployment/utils/UrlImplementor.java\n\n@@ -1,22 +1,24 @@\n-package io.quarkus.hibernate.orm.panache.rest.deployment.utils;\n+package io.quarkus.panache.rest.deployment.utils;\n \n import java.net.URI;\n \n import io.quarkus.gizmo.BytecodeCreator;\n import io.quarkus.gizmo.MethodDescriptor;\n import io.quarkus.gizmo.ResultHandle;\n-import io.quarkus.hibernate.orm.panache.rest.runtime.utils.StringUtil;\n+import io.quarkus.panache.rest.runtime.utils.StringUtil;\n \n-public final class EntityUrlProvider {\n+public final class UrlImplementor {\n \n-    private final EntityFieldAccessor fieldAccessor;\n+    private final FieldAccessImplementor fieldAccessor;\n \n-    public EntityUrlProvider(EntityFieldAccessor fieldAccessor) {\n+    public UrlImplementor(FieldAccessImplementor fieldAccessor) {\n         this.fieldAccessor = fieldAccessor;\n     }\n \n     public static String getCollectionUrl(String entityType) {\n-        return StringUtil.toPlural(StringUtil.camelToHyphenated(removePackage(entityType)));\n+        String[] pieces = StringUtil.camelToHyphenated(removePackage(entityType)).split(\"-\");\n+        pieces[pieces.length - 1] = StringUtil.toPlural(pieces[pieces.length - 1]);\n+        return String.join(\"-\", pieces);\n     }\n \n     private static String removePackage(String className) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk1MTA1NA==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r403951054", "bodyText": "Why not returing the type T/void/Listinstead of aResponse` object ?", "author": "loicmathieu", "createdAt": "2020-04-06T09:28:11Z", "path": "extensions/panache/hibernate-orm-panache-rest/runtime/src/main/java/io/quarkus/hibernate/orm/panache/rest/PanacheCrudController.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package io.quarkus.hibernate.orm.panache.rest;\n+\n+import javax.ws.rs.core.Response;\n+\n+import io.quarkus.hibernate.orm.panache.PanacheEntityBase;\n+\n+public interface PanacheCrudController<T extends PanacheEntityBase, ID> {", "originalCommit": "50d3f20fb7398fad22b0506402bbbc044f6e57bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk2Mzc4Mw==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r403963783", "bodyText": "Having a Response as a return type was a bit easier for code generation. I was able to reuse the same code bits for different methods (GET, POST...). Since user doesn't see the generated code, I think this shouldn't be an issue.", "author": "gytis", "createdAt": "2020-04-06T09:48:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk1MTA1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk2Mzk0Mg==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r403963942", "bodyText": "Initially I did have it as T", "author": "gytis", "createdAt": "2020-04-06T09:49:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk1MTA1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk2ODkwNw==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r403968907", "bodyText": "Since user doesn't see the generated code\n\nWill not always be true, see my other comments.\nReturing Response can also lead to issues for GraalVM as the entity type may not been discovered at native image generation time (should not be an issue with Hibernate as all entities are registered for relfection but for MongoDB with the repository pattern it's still possible).", "author": "loicmathieu", "createdAt": "2020-04-06T09:57:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk1MTA1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk3NDczNw==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r403974737", "bodyText": "This depends on how we do method override and super-delegation. We already have another discussion open about this.", "author": "FroMage", "createdAt": "2020-04-06T10:06:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk1MTA1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk3NzQ3NQ==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r403977475", "bodyText": "So would this be an issue with the methods that return an entity via a Response or for all methods that return Response?", "author": "gytis", "createdAt": "2020-04-06T10:11:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk1MTA1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk4NjY2Ng==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r403986666", "bodyText": "With the one returning an entity via a Response.\nIf it's too much work, I'm OK with Response but reflection is tricky on GraalVM and having the entity return type instead of Response guarantee that the type will be correctly registered for reflection.\nBut as @FroMage said, it depends how we override methods because if the correct type is not used at code generation type this would be useless.", "author": "loicmathieu", "createdAt": "2020-04-06T10:27:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk1MTA1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk5NjM4NA==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r403996384", "bodyText": "I don't see why returning Response would be a problem, since we always know what to register for reflection this case (the entity itself).", "author": "geoand", "createdAt": "2020-04-06T10:45:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk1MTA1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA3MTI0Ng==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r404071246", "bodyText": "A Response is annoying because it's not typed. If you need to do something on the super method's response type (add an entry to a List or iterate it, or set a field on the returned Order you lose that info).\nOTOH it's much more capable as a return type because it allows you to set response headers and status codes.\nIMO, if we make it possible to invoke/delegate to the super method (I think we should), and we do that by declaring a new method (to be able to invoke the old one) then it makes sense to make the super method have the type-safe return type (Order, say) since we have control over the overriding method's return type and we can choose to make it return an Order too or a Response if we need extra stuff.", "author": "FroMage", "createdAt": "2020-04-06T13:01:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk1MTA1NA=="}], "type": "inlineReview", "revised_code": {"commit": "15e31c8c587561a4b41b290a206e4c676313f120", "chunk": "diff --git a/extensions/panache/hibernate-orm-panache-rest/runtime/src/main/java/io/quarkus/hibernate/orm/panache/rest/PanacheCrudController.java b/extensions/panache/panache-rest-common/runtime/src/main/java/io/quarkus/panache/rest/runtime/PanacheCrudResource.java\nsimilarity index 77%\nrename from extensions/panache/hibernate-orm-panache-rest/runtime/src/main/java/io/quarkus/hibernate/orm/panache/rest/PanacheCrudController.java\nrename to extensions/panache/panache-rest-common/runtime/src/main/java/io/quarkus/panache/rest/runtime/PanacheCrudResource.java\nindex ac03b65037..be29df55ad 100644\n--- a/extensions/panache/hibernate-orm-panache-rest/runtime/src/main/java/io/quarkus/hibernate/orm/panache/rest/PanacheCrudController.java\n+++ b/extensions/panache/panache-rest-common/runtime/src/main/java/io/quarkus/panache/rest/runtime/PanacheCrudResource.java\n\n@@ -1,10 +1,10 @@\n-package io.quarkus.hibernate.orm.panache.rest;\n+package io.quarkus.panache.rest.runtime;\n \n-import javax.ws.rs.core.Response;\n+import java.util.List;\n \n-import io.quarkus.hibernate.orm.panache.PanacheEntityBase;\n+import javax.ws.rs.core.Response;\n \n-public interface PanacheCrudController<T extends PanacheEntityBase, ID> {\n+public interface PanacheCrudResource<Entity, ID> {\n \n     /**\n      * Return all entities as a JSON array.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk1MTYxMQ==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r403951611", "bodyText": "Non-paginated list is very bad design, so maybe we should provides a paginated version by default ?", "author": "loicmathieu", "createdAt": "2020-04-06T09:29:02Z", "path": "extensions/panache/hibernate-orm-panache-rest/runtime/src/main/java/io/quarkus/hibernate/orm/panache/rest/PanacheCrudController.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package io.quarkus.hibernate.orm.panache.rest;\n+\n+import javax.ws.rs.core.Response;\n+\n+import io.quarkus.hibernate.orm.panache.PanacheEntityBase;\n+\n+public interface PanacheCrudController<T extends PanacheEntityBase, ID> {\n+\n+    /**\n+     * Return all entities as a JSON array.\n+     * Response content type: application/json.\n+     *\n+     * @return A response with a JSON array of all entities.\n+     */\n+    Response list();", "originalCommit": "50d3f20fb7398fad22b0506402bbbc044f6e57bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk2MjczMA==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r403962730", "bodyText": "For sure. I'll add paging, sorting and limiting once we're done with the initial PR.", "author": "gytis", "createdAt": "2020-04-06T09:46:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk1MTYxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "15e31c8c587561a4b41b290a206e4c676313f120", "chunk": "diff --git a/extensions/panache/hibernate-orm-panache-rest/runtime/src/main/java/io/quarkus/hibernate/orm/panache/rest/PanacheCrudController.java b/extensions/panache/panache-rest-common/runtime/src/main/java/io/quarkus/panache/rest/runtime/PanacheCrudResource.java\nsimilarity index 77%\nrename from extensions/panache/hibernate-orm-panache-rest/runtime/src/main/java/io/quarkus/hibernate/orm/panache/rest/PanacheCrudController.java\nrename to extensions/panache/panache-rest-common/runtime/src/main/java/io/quarkus/panache/rest/runtime/PanacheCrudResource.java\nindex ac03b65037..be29df55ad 100644\n--- a/extensions/panache/hibernate-orm-panache-rest/runtime/src/main/java/io/quarkus/hibernate/orm/panache/rest/PanacheCrudController.java\n+++ b/extensions/panache/panache-rest-common/runtime/src/main/java/io/quarkus/panache/rest/runtime/PanacheCrudResource.java\n\n@@ -1,10 +1,10 @@\n-package io.quarkus.hibernate.orm.panache.rest;\n+package io.quarkus.panache.rest.runtime;\n \n-import javax.ws.rs.core.Response;\n+import java.util.List;\n \n-import io.quarkus.hibernate.orm.panache.PanacheEntityBase;\n+import javax.ws.rs.core.Response;\n \n-public interface PanacheCrudController<T extends PanacheEntityBase, ID> {\n+public interface PanacheCrudResource<Entity, ID> {\n \n     /**\n      * Return all entities as a JSON array.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQxNjc3Mw==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r405416773", "bodyText": "@FroMage I cannot resist but to ask you the question. Here merge is used and I know you are against its usage, so should this PR provides an other implementation ?", "author": "loicmathieu", "createdAt": "2020-04-08T10:18:28Z", "path": "extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/hibernate/orm/panache/rest/deployment/methods/UpdateMethodImplementor.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package io.quarkus.hibernate.orm.panache.rest.deployment.methods;\n+\n+import javax.persistence.EntityManager;\n+import javax.ws.rs.core.Response;\n+\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.IndexView;\n+\n+import io.quarkus.gizmo.BranchResult;\n+import io.quarkus.gizmo.BytecodeCreator;\n+import io.quarkus.gizmo.ClassCreator;\n+import io.quarkus.gizmo.MethodCreator;\n+import io.quarkus.gizmo.MethodDescriptor;\n+import io.quarkus.gizmo.ResultHandle;\n+import io.quarkus.hibernate.orm.panache.rest.deployment.utils.ControllerAnnotator;\n+import io.quarkus.hibernate.orm.panache.rest.deployment.utils.ControllerResponseFactory;\n+import io.quarkus.hibernate.orm.panache.rest.deployment.utils.EntityFieldAccessor;\n+import io.quarkus.hibernate.orm.panache.rest.deployment.utils.EntityUrlProvider;\n+import io.quarkus.hibernate.orm.panache.runtime.JpaOperations;\n+\n+public final class UpdateMethodImplementor extends MethodImplementor {\n+\n+    private final EntityFieldAccessor fieldAccessor;\n+\n+    private final EntityUrlProvider urlProvider;\n+\n+    public UpdateMethodImplementor(ClassInfo controllerInterface, IndexView index) {\n+        super(controllerInterface, index);\n+        this.fieldAccessor = new EntityFieldAccessor(index);\n+        this.urlProvider = new EntityUrlProvider(fieldAccessor);\n+    }\n+\n+    @Override\n+    protected String getName() {\n+        return \"update\";\n+    }\n+\n+    @Override\n+    protected String[] getParameterTypes() {\n+        return new String[] { getIdType(), getEntityType() };\n+    }\n+\n+    @Override\n+    protected void implementRegular(ClassCreator classCreator) {\n+        MethodCreator methodCreator = classCreator.getMethodCreator(\"update\", Response.class, getIdType(), getEntityType());\n+        ControllerAnnotator.addTransactional(methodCreator);\n+        ControllerAnnotator.addPut(methodCreator);\n+        ControllerAnnotator.addPath(methodCreator, EntityUrlProvider.getCollectionUrl(getEntityType()) + \"/{id}\");\n+        ControllerAnnotator.addPathParam(methodCreator.getParameterAnnotations(0), \"id\");\n+        ControllerAnnotator.addConsumes(methodCreator, ControllerAnnotator.APPLICATION_JSON);\n+        ControllerAnnotator.addProduces(methodCreator, ControllerAnnotator.APPLICATION_JSON);\n+        ControllerAnnotator.addLinks(methodCreator, getEntityType(), \"update\");\n+\n+        BranchResult entityDoesNotExist = methodCreator\n+                .ifNull(findEntity(methodCreator, methodCreator.getMethodParam(0), getEntityType()));\n+\n+        createAndReturn(entityDoesNotExist.trueBranch());\n+        updateAndReturn(entityDoesNotExist.falseBranch());\n+\n+        methodCreator.close();\n+    }\n+\n+    @Override\n+    protected void implementHal(ClassCreator classCreator) {\n+        MethodCreator methodCreator = classCreator.getMethodCreator(\"updateHal\", Response.class, getIdType(), getEntityType());\n+        ControllerAnnotator.addTransactional(methodCreator);\n+        ControllerAnnotator.addPut(methodCreator);\n+        ControllerAnnotator.addPath(methodCreator, EntityUrlProvider.getCollectionUrl(getEntityType()) + \"/{id}\");\n+        ControllerAnnotator.addPathParam(methodCreator.getParameterAnnotations(0), \"id\");\n+        ControllerAnnotator.addConsumes(methodCreator, ControllerAnnotator.APPLICATION_JSON);\n+        ControllerAnnotator.addProduces(methodCreator, ControllerAnnotator.APPLICATION_HAL_JSON);\n+\n+        BranchResult entityDoesNotExist = methodCreator\n+                .ifNull(findEntity(methodCreator, methodCreator.getMethodParam(0), getEntityType()));\n+\n+        createAndReturnHal(entityDoesNotExist.trueBranch());\n+        updateAndReturn(entityDoesNotExist.falseBranch());\n+\n+        methodCreator.close();\n+    }\n+\n+    private void createAndReturn(BytecodeCreator creator) {\n+        ResultHandle entity = merge(creator, creator.getMethodParam(0), creator.getMethodParam(1));\n+        ResultHandle url = urlProvider.getEntityUrl(creator, entity, getEntityType());\n+        ResultHandle response = ControllerResponseFactory.created(creator, entity, url);\n+        creator.returnValue(response);\n+    }\n+\n+    private void createAndReturnHal(BytecodeCreator creator) {\n+        ResultHandle entity = merge(creator, creator.getMethodParam(0), creator.getMethodParam(1));\n+        ResultHandle url = urlProvider.getEntityUrl(creator, entity, getEntityType());\n+        ResultHandle response = ControllerResponseFactory.created(creator, wrapHalEntity(creator, entity), url);\n+        creator.returnValue(response);\n+    }\n+\n+    private void updateAndReturn(BytecodeCreator creator) {\n+        merge(creator, creator.getMethodParam(0), creator.getMethodParam(1));\n+        creator.returnValue(ControllerResponseFactory.noContent(creator));\n+    }\n+\n+    private ResultHandle merge(BytecodeCreator creator, ResultHandle id, ResultHandle entity) {\n+        fieldAccessor.setId(creator, getEntityType(), entity, id);\n+        ResultHandle entityManager = creator.invokeStaticMethod(\n+                MethodDescriptor.ofMethod(JpaOperations.class, \"getEntityManager\", EntityManager.class));\n+        return creator.invokeInterfaceMethod(\n+                MethodDescriptor.ofMethod(EntityManager.class, \"merge\", Object.class, Object.class), entityManager, entity);", "originalCommit": "50d3f20fb7398fad22b0506402bbbc044f6e57bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQzMTcyMA==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r405431720", "bodyText": "Pfff\u2026 Well yeah, this feature uses the entities as DTOs which we're advising against, but OTOH we don't have a better solution yet, so probably this has to be allowed here until we have time to come up with our DTO story.", "author": "FroMage", "createdAt": "2020-04-08T10:45:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQxNjc3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "15e31c8c587561a4b41b290a206e4c676313f120", "chunk": "diff --git a/extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/hibernate/orm/panache/rest/deployment/methods/UpdateMethodImplementor.java b/extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/hibernate/orm/panache/rest/deployment/methods/UpdateMethodImplementor.java\ndeleted file mode 100644\nindex 899206abfc..0000000000\n--- a/extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/hibernate/orm/panache/rest/deployment/methods/UpdateMethodImplementor.java\n+++ /dev/null\n\n@@ -1,108 +0,0 @@\n-package io.quarkus.hibernate.orm.panache.rest.deployment.methods;\n-\n-import javax.persistence.EntityManager;\n-import javax.ws.rs.core.Response;\n-\n-import org.jboss.jandex.ClassInfo;\n-import org.jboss.jandex.IndexView;\n-\n-import io.quarkus.gizmo.BranchResult;\n-import io.quarkus.gizmo.BytecodeCreator;\n-import io.quarkus.gizmo.ClassCreator;\n-import io.quarkus.gizmo.MethodCreator;\n-import io.quarkus.gizmo.MethodDescriptor;\n-import io.quarkus.gizmo.ResultHandle;\n-import io.quarkus.hibernate.orm.panache.rest.deployment.utils.ControllerAnnotator;\n-import io.quarkus.hibernate.orm.panache.rest.deployment.utils.ControllerResponseFactory;\n-import io.quarkus.hibernate.orm.panache.rest.deployment.utils.EntityFieldAccessor;\n-import io.quarkus.hibernate.orm.panache.rest.deployment.utils.EntityUrlProvider;\n-import io.quarkus.hibernate.orm.panache.runtime.JpaOperations;\n-\n-public final class UpdateMethodImplementor extends MethodImplementor {\n-\n-    private final EntityFieldAccessor fieldAccessor;\n-\n-    private final EntityUrlProvider urlProvider;\n-\n-    public UpdateMethodImplementor(ClassInfo controllerInterface, IndexView index) {\n-        super(controllerInterface, index);\n-        this.fieldAccessor = new EntityFieldAccessor(index);\n-        this.urlProvider = new EntityUrlProvider(fieldAccessor);\n-    }\n-\n-    @Override\n-    protected String getName() {\n-        return \"update\";\n-    }\n-\n-    @Override\n-    protected String[] getParameterTypes() {\n-        return new String[] { getIdType(), getEntityType() };\n-    }\n-\n-    @Override\n-    protected void implementRegular(ClassCreator classCreator) {\n-        MethodCreator methodCreator = classCreator.getMethodCreator(\"update\", Response.class, getIdType(), getEntityType());\n-        ControllerAnnotator.addTransactional(methodCreator);\n-        ControllerAnnotator.addPut(methodCreator);\n-        ControllerAnnotator.addPath(methodCreator, EntityUrlProvider.getCollectionUrl(getEntityType()) + \"/{id}\");\n-        ControllerAnnotator.addPathParam(methodCreator.getParameterAnnotations(0), \"id\");\n-        ControllerAnnotator.addConsumes(methodCreator, ControllerAnnotator.APPLICATION_JSON);\n-        ControllerAnnotator.addProduces(methodCreator, ControllerAnnotator.APPLICATION_JSON);\n-        ControllerAnnotator.addLinks(methodCreator, getEntityType(), \"update\");\n-\n-        BranchResult entityDoesNotExist = methodCreator\n-                .ifNull(findEntity(methodCreator, methodCreator.getMethodParam(0), getEntityType()));\n-\n-        createAndReturn(entityDoesNotExist.trueBranch());\n-        updateAndReturn(entityDoesNotExist.falseBranch());\n-\n-        methodCreator.close();\n-    }\n-\n-    @Override\n-    protected void implementHal(ClassCreator classCreator) {\n-        MethodCreator methodCreator = classCreator.getMethodCreator(\"updateHal\", Response.class, getIdType(), getEntityType());\n-        ControllerAnnotator.addTransactional(methodCreator);\n-        ControllerAnnotator.addPut(methodCreator);\n-        ControllerAnnotator.addPath(methodCreator, EntityUrlProvider.getCollectionUrl(getEntityType()) + \"/{id}\");\n-        ControllerAnnotator.addPathParam(methodCreator.getParameterAnnotations(0), \"id\");\n-        ControllerAnnotator.addConsumes(methodCreator, ControllerAnnotator.APPLICATION_JSON);\n-        ControllerAnnotator.addProduces(methodCreator, ControllerAnnotator.APPLICATION_HAL_JSON);\n-\n-        BranchResult entityDoesNotExist = methodCreator\n-                .ifNull(findEntity(methodCreator, methodCreator.getMethodParam(0), getEntityType()));\n-\n-        createAndReturnHal(entityDoesNotExist.trueBranch());\n-        updateAndReturn(entityDoesNotExist.falseBranch());\n-\n-        methodCreator.close();\n-    }\n-\n-    private void createAndReturn(BytecodeCreator creator) {\n-        ResultHandle entity = merge(creator, creator.getMethodParam(0), creator.getMethodParam(1));\n-        ResultHandle url = urlProvider.getEntityUrl(creator, entity, getEntityType());\n-        ResultHandle response = ControllerResponseFactory.created(creator, entity, url);\n-        creator.returnValue(response);\n-    }\n-\n-    private void createAndReturnHal(BytecodeCreator creator) {\n-        ResultHandle entity = merge(creator, creator.getMethodParam(0), creator.getMethodParam(1));\n-        ResultHandle url = urlProvider.getEntityUrl(creator, entity, getEntityType());\n-        ResultHandle response = ControllerResponseFactory.created(creator, wrapHalEntity(creator, entity), url);\n-        creator.returnValue(response);\n-    }\n-\n-    private void updateAndReturn(BytecodeCreator creator) {\n-        merge(creator, creator.getMethodParam(0), creator.getMethodParam(1));\n-        creator.returnValue(ControllerResponseFactory.noContent(creator));\n-    }\n-\n-    private ResultHandle merge(BytecodeCreator creator, ResultHandle id, ResultHandle entity) {\n-        fieldAccessor.setId(creator, getEntityType(), entity, id);\n-        ResultHandle entityManager = creator.invokeStaticMethod(\n-                MethodDescriptor.ofMethod(JpaOperations.class, \"getEntityManager\", EntityManager.class));\n-        return creator.invokeInterfaceMethod(\n-                MethodDescriptor.ofMethod(EntityManager.class, \"merge\", Object.class, Object.class), entityManager, entity);\n-    }\n-}\n"}}, {"oid": "15e31c8c587561a4b41b290a206e4c676313f120", "url": "https://github.com/quarkusio/quarkus/commit/15e31c8c587561a4b41b290a206e4c676313f120", "message": "[squash] PR improvements", "committedDate": "2020-04-20T11:21:12Z", "type": "forcePushed"}, {"oid": "b9332eab3d4f2300ed5cc8bb699aa50f11aaa9d0", "url": "https://github.com/quarkusio/quarkus/commit/b9332eab3d4f2300ed5cc8bb699aa50f11aaa9d0", "message": "[squash] PR improvements", "committedDate": "2020-04-20T11:31:57Z", "type": "forcePushed"}, {"oid": "ee72902e37ad7f66ff2c3634e3b27263942d1a7d", "url": "https://github.com/quarkusio/quarkus/commit/ee72902e37ad7f66ff2c3634e3b27263942d1a7d", "message": "[squash] PR improvements", "committedDate": "2020-04-20T12:19:09Z", "type": "forcePushed"}, {"oid": "d3d9823e0812e2910dd21ae9d89f9610ad285203", "url": "https://github.com/quarkusio/quarkus/commit/d3d9823e0812e2910dd21ae9d89f9610ad285203", "message": "[squash] PR improvements", "committedDate": "2020-04-20T14:14:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQxNzc0Ng==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r411417746", "bodyText": "This needs Javadoc.", "author": "FroMage", "createdAt": "2020-04-20T14:20:33Z", "path": "extensions/panache/hibernate-orm-panache-rest/runtime/src/main/java/io/quarkus/panache/rest/hibernate/orm/PanacheEntityCrudResource.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package io.quarkus.panache.rest.hibernate.orm;\n+\n+import io.quarkus.hibernate.orm.panache.PanacheEntityBase;\n+import io.quarkus.panache.rest.runtime.PanacheCrudResource;\n+\n+public interface PanacheEntityCrudResource<Entity extends PanacheEntityBase, ID> extends PanacheCrudResource<Entity, ID> {", "originalCommit": "d3d9823e0812e2910dd21ae9d89f9610ad285203", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c32a9adcdebc01d35f5b6f6d8f67658ad62bb0cf", "chunk": "diff --git a/extensions/panache/hibernate-orm-panache-rest/runtime/src/main/java/io/quarkus/panache/rest/hibernate/orm/PanacheEntityCrudResource.java b/extensions/panache/hibernate-orm-panache-rest/runtime/src/main/java/io/quarkus/panache/rest/hibernate/orm/PanacheEntityCrudResource.java\nindex 0209269d28..b3eb5b2937 100644\n--- a/extensions/panache/hibernate-orm-panache-rest/runtime/src/main/java/io/quarkus/panache/rest/hibernate/orm/PanacheEntityCrudResource.java\n+++ b/extensions/panache/hibernate-orm-panache-rest/runtime/src/main/java/io/quarkus/panache/rest/hibernate/orm/PanacheEntityCrudResource.java\n\n@@ -1,8 +1,18 @@\n package io.quarkus.panache.rest.hibernate.orm;\n \n import io.quarkus.hibernate.orm.panache.PanacheEntityBase;\n-import io.quarkus.panache.rest.runtime.PanacheCrudResource;\n+import io.quarkus.panache.rest.common.PanacheCrudResource;\n \n+/**\n+ * Panache CRUD resource that uses {@link PanacheEntityBase} instance for data access and exposes it as a JAX-RS resource.\n+ * <p>\n+ * See {@link PanacheCrudResource} for the methods provided by this resource.\n+ * <p>\n+ * See {@link io.quarkus.panache.rest.common.PanacheRestResource} for the ways to customize this resource.\n+ *\n+ * @param <Entity> {@link PanacheEntityBase} that is handled by this resource.\n+ * @param <ID> ID type of the entity.\n+ */\n public interface PanacheEntityCrudResource<Entity extends PanacheEntityBase, ID> extends PanacheCrudResource<Entity, ID> {\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQxNzc5OQ==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r411417799", "bodyText": "This needs Javadoc.", "author": "FroMage", "createdAt": "2020-04-20T14:20:38Z", "path": "extensions/panache/hibernate-orm-panache-rest/runtime/src/main/java/io/quarkus/panache/rest/hibernate/orm/PanacheRepositoryCrudResource.java", "diffHunk": "@@ -0,0 +1,9 @@\n+package io.quarkus.panache.rest.hibernate.orm;\n+\n+import io.quarkus.hibernate.orm.panache.PanacheRepositoryBase;\n+import io.quarkus.panache.rest.runtime.PanacheCrudResource;\n+\n+public interface PanacheRepositoryCrudResource<Repository extends PanacheRepositoryBase<Entity, ID>, Entity, ID>", "originalCommit": "d3d9823e0812e2910dd21ae9d89f9610ad285203", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c32a9adcdebc01d35f5b6f6d8f67658ad62bb0cf", "chunk": "diff --git a/extensions/panache/hibernate-orm-panache-rest/runtime/src/main/java/io/quarkus/panache/rest/hibernate/orm/PanacheRepositoryCrudResource.java b/extensions/panache/hibernate-orm-panache-rest/runtime/src/main/java/io/quarkus/panache/rest/hibernate/orm/PanacheRepositoryCrudResource.java\nindex 39f518b0e4..7a8fd1b749 100644\n--- a/extensions/panache/hibernate-orm-panache-rest/runtime/src/main/java/io/quarkus/panache/rest/hibernate/orm/PanacheRepositoryCrudResource.java\n+++ b/extensions/panache/hibernate-orm-panache-rest/runtime/src/main/java/io/quarkus/panache/rest/hibernate/orm/PanacheRepositoryCrudResource.java\n\n@@ -1,8 +1,19 @@\n package io.quarkus.panache.rest.hibernate.orm;\n \n import io.quarkus.hibernate.orm.panache.PanacheRepositoryBase;\n-import io.quarkus.panache.rest.runtime.PanacheCrudResource;\n+import io.quarkus.panache.rest.common.PanacheCrudResource;\n \n+/**\n+ * Panache CRUD resource that uses {@link PanacheRepositoryBase} instance for data access and exposes it as a JAX-RS resource.\n+ * <p>\n+ * See {@link PanacheCrudResource} for the methods provided by this resource.\n+ * <p>\n+ * See {@link io.quarkus.panache.rest.common.PanacheRestResource} for the ways to customize this resource.\n+ *\n+ * @param <Repository> {@link PanacheRepositoryBase} instance that should be used for data access.\n+ * @param <Entity> Entity type that is handled by this resource and the linked {@link PanacheRepositoryBase} instance.\n+ * @param <ID> ID type of the entity.\n+ */\n public interface PanacheRepositoryCrudResource<Repository extends PanacheRepositoryBase<Entity, ID>, Entity, ID>\n         extends PanacheCrudResource<Entity, ID> {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyMTUxMA==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r411421510", "bodyText": "Shouldn't those be in io.quarkus.panache.rest.common.deployment?", "author": "FroMage", "createdAt": "2020-04-20T14:25:13Z", "path": "extensions/panache/panache-rest-common/deployment/src/main/java/io/quarkus/panache/rest/deployment/CrudResourceImplementor.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package io.quarkus.panache.rest.deployment;", "originalCommit": "d3d9823e0812e2910dd21ae9d89f9610ad285203", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU2NDA4OQ==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r414564089", "bodyText": "This doesn't appear to have been fixed.", "author": "FroMage", "createdAt": "2020-04-24T13:11:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyMTUxMA=="}], "type": "inlineReview", "revised_code": {"commit": "c32a9adcdebc01d35f5b6f6d8f67658ad62bb0cf", "chunk": "diff --git a/extensions/panache/panache-rest-common/deployment/src/main/java/io/quarkus/panache/rest/deployment/CrudResourceImplementor.java b/extensions/panache/panache-rest-common/deployment/src/main/java/io/quarkus/panache/rest/deployment/CrudResourceImplementor.java\nindex 12bdd9d302..69ad9bbf1d 100644\n--- a/extensions/panache/panache-rest-common/deployment/src/main/java/io/quarkus/panache/rest/deployment/CrudResourceImplementor.java\n+++ b/extensions/panache/panache-rest-common/deployment/src/main/java/io/quarkus/panache/rest/deployment/CrudResourceImplementor.java\n\n@@ -31,16 +31,13 @@ class CrudResourceImplementor {\n \n     private static final Logger LOGGER = Logger.getLogger(CrudResourceImplementor.class);\n \n-    private final PanacheRestResourceAccessor panacheRestResourceAccessor;\n-\n-    private final FieldAccessImplementor fieldAccessImplementor;\n+    private final IndexView index;\n \n-    private final UrlImplementor urlImplementor;\n+    private final PanacheRestResourceAccessor panacheRestResourceAccessor;\n \n     public CrudResourceImplementor(IndexView index) {\n+        this.index = index;\n         this.panacheRestResourceAccessor = new PanacheRestResourceAccessor(index);\n-        this.fieldAccessImplementor = new FieldAccessImplementor(index);\n-        this.urlImplementor = new UrlImplementor(fieldAccessImplementor);\n     }\n \n     void implement(ClassOutput classOutput, PanacheCrudResourceBuildItem resource) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzMjU4MQ==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r411432581", "bodyText": "Shouldn't this be io.quarkus.panache.rest.common?", "author": "FroMage", "createdAt": "2020-04-20T14:39:20Z", "path": "extensions/panache/panache-rest-common/runtime/src/main/java/io/quarkus/panache/rest/PanacheRestResource.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package io.quarkus.panache.rest;", "originalCommit": "d3d9823e0812e2910dd21ae9d89f9610ad285203", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxMzQ1OA==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r411513458", "bodyText": "Do you think it's better? It's the user facing API so I thought maybe keeping it in a higher level might be nicer. But I could move it to the common if that's more acceptable.", "author": "gytis", "createdAt": "2020-04-20T16:21:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzMjU4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjAxMzU5Mw==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r412013593", "bodyText": "In ORM with Panache we already have a common module and it's using the common package suffix, and it's user-facing, so we're fine with that.", "author": "FroMage", "createdAt": "2020-04-21T09:11:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzMjU4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "c32a9adcdebc01d35f5b6f6d8f67658ad62bb0cf", "chunk": "diff --git a/extensions/panache/panache-rest-common/runtime/src/main/java/io/quarkus/panache/rest/PanacheRestResource.java b/extensions/panache/panache-rest-common/runtime/src/main/java/io/quarkus/panache/rest/common/PanacheRestResource.java\nsimilarity index 96%\nrename from extensions/panache/panache-rest-common/runtime/src/main/java/io/quarkus/panache/rest/PanacheRestResource.java\nrename to extensions/panache/panache-rest-common/runtime/src/main/java/io/quarkus/panache/rest/common/PanacheRestResource.java\nindex 3afe18654d..76bb62a1ab 100644\n--- a/extensions/panache/panache-rest-common/runtime/src/main/java/io/quarkus/panache/rest/PanacheRestResource.java\n+++ b/extensions/panache/panache-rest-common/runtime/src/main/java/io/quarkus/panache/rest/common/PanacheRestResource.java\n\n@@ -1,4 +1,4 @@\n-package io.quarkus.panache.rest;\n+package io.quarkus.panache.rest.common;\n \n import static java.lang.annotation.ElementType.METHOD;\n import static java.lang.annotation.ElementType.TYPE;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzNDAyMQ==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r411434021", "bodyText": "Why is this in the runtime subpackage? We usually put hidden/impl stuff there, but this is a supertype so it's visible, no? Besides, the methods are documented, so it looks like public-facing.", "author": "FroMage", "createdAt": "2020-04-20T14:41:03Z", "path": "extensions/panache/panache-rest-common/runtime/src/main/java/io/quarkus/panache/rest/runtime/PanacheCrudResource.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package io.quarkus.panache.rest.runtime;", "originalCommit": "d3d9823e0812e2910dd21ae9d89f9610ad285203", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxMjA5Ng==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r411512096", "bodyText": "Hmm now that you asked it makes me wonder if this won't confused the users too. Maybe I should get rid of this supertype and duplicate the methods in each interface? Otherwise somebody might try to use this interface directly.", "author": "gytis", "createdAt": "2020-04-20T16:19:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzNDAyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxMjQ3MA==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r411512470", "bodyText": "Initially I put it in a runtime package to indicate that it shouldn't be used directly.", "author": "gytis", "createdAt": "2020-04-20T16:19:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzNDAyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjAxMzA2MQ==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r412013061", "bodyText": "Well, why should these methods not be used? Probably this should just be made public.", "author": "FroMage", "createdAt": "2020-04-21T09:10:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzNDAyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjAyMzk1Mg==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r412023952", "bodyText": "Not the methods, but this interface shouldn't be used directly. The Processor scans for PanacheEntityCrudResource and PanacheRepositoryCrudResource which extend this interface.", "author": "gytis", "createdAt": "2020-04-21T09:26:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzNDAyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjAyNDE1Nw==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r412024157", "bodyText": "And then Mongo would have similar alternatives", "author": "gytis", "createdAt": "2020-04-21T09:26:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzNDAyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE1NDk5NA==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r412154994", "bodyText": "The type hierarchy is public in Java, so there's no point trying to hide this interface. Own it ;) Unless you want to hide it to avoid errors where the users would implement it directly by mistake, but even then it's still public, so they'll see it just the same and the risk is not reduced.\nIf that's such a danger, then yes, duplicate the methods in the two interfaces and remove this one, but I really doubt it's so dangerous.", "author": "FroMage", "createdAt": "2020-04-21T12:49:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzNDAyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE2MDcyMw==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r412160723", "bodyText": "OK I agree.  Moving it to the common package.", "author": "gytis", "createdAt": "2020-04-21T12:57:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzNDAyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "c32a9adcdebc01d35f5b6f6d8f67658ad62bb0cf", "chunk": "diff --git a/extensions/panache/panache-rest-common/runtime/src/main/java/io/quarkus/panache/rest/runtime/PanacheCrudResource.java b/extensions/panache/panache-rest-common/runtime/src/main/java/io/quarkus/panache/rest/common/PanacheCrudResource.java\nsimilarity index 76%\nrename from extensions/panache/panache-rest-common/runtime/src/main/java/io/quarkus/panache/rest/runtime/PanacheCrudResource.java\nrename to extensions/panache/panache-rest-common/runtime/src/main/java/io/quarkus/panache/rest/common/PanacheCrudResource.java\nindex be29df55ad..65c4397c34 100644\n--- a/extensions/panache/panache-rest-common/runtime/src/main/java/io/quarkus/panache/rest/runtime/PanacheCrudResource.java\n+++ b/extensions/panache/panache-rest-common/runtime/src/main/java/io/quarkus/panache/rest/common/PanacheCrudResource.java\n\n@@ -1,9 +1,19 @@\n-package io.quarkus.panache.rest.runtime;\n+package io.quarkus.panache.rest.common;\n \n import java.util.List;\n \n import javax.ws.rs.core.Response;\n \n+/**\n+ * Base Panache CRUD resource interface.\n+ * Defines JAX-RS CRUD operations that will be implemented by the data store specific extensions such as Hibernate ORB or\n+ * MongoDB.\n+ * <p>\n+ * User shouldn't use this interface directly but rather its sub-interfaces defined by the data store specific extensions.\n+ *\n+ * @param <Entity> Entity type that is handled by this CRUD resource.\n+ * @param <ID> ID type of the entity.\n+ */\n public interface PanacheCrudResource<Entity, ID> {\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzNDIyNg==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r411434226", "bodyText": "If the methods are documented, likely this class also needs docs, no?", "author": "FroMage", "createdAt": "2020-04-20T14:41:17Z", "path": "extensions/panache/panache-rest-common/runtime/src/main/java/io/quarkus/panache/rest/runtime/PanacheCrudResource.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package io.quarkus.panache.rest.runtime;\n+\n+import java.util.List;\n+\n+import javax.ws.rs.core.Response;\n+\n+public interface PanacheCrudResource<Entity, ID> {", "originalCommit": "d3d9823e0812e2910dd21ae9d89f9610ad285203", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c32a9adcdebc01d35f5b6f6d8f67658ad62bb0cf", "chunk": "diff --git a/extensions/panache/panache-rest-common/runtime/src/main/java/io/quarkus/panache/rest/runtime/PanacheCrudResource.java b/extensions/panache/panache-rest-common/runtime/src/main/java/io/quarkus/panache/rest/common/PanacheCrudResource.java\nsimilarity index 76%\nrename from extensions/panache/panache-rest-common/runtime/src/main/java/io/quarkus/panache/rest/runtime/PanacheCrudResource.java\nrename to extensions/panache/panache-rest-common/runtime/src/main/java/io/quarkus/panache/rest/common/PanacheCrudResource.java\nindex be29df55ad..65c4397c34 100644\n--- a/extensions/panache/panache-rest-common/runtime/src/main/java/io/quarkus/panache/rest/runtime/PanacheCrudResource.java\n+++ b/extensions/panache/panache-rest-common/runtime/src/main/java/io/quarkus/panache/rest/common/PanacheCrudResource.java\n\n@@ -1,9 +1,19 @@\n-package io.quarkus.panache.rest.runtime;\n+package io.quarkus.panache.rest.common;\n \n import java.util.List;\n \n import javax.ws.rs.core.Response;\n \n+/**\n+ * Base Panache CRUD resource interface.\n+ * Defines JAX-RS CRUD operations that will be implemented by the data store specific extensions such as Hibernate ORB or\n+ * MongoDB.\n+ * <p>\n+ * User shouldn't use this interface directly but rather its sub-interfaces defined by the data store specific extensions.\n+ *\n+ * @param <Entity> Entity type that is handled by this CRUD resource.\n+ * @param <ID> ID type of the entity.\n+ */\n public interface PanacheCrudResource<Entity, ID> {\n \n     /**\n"}}, {"oid": "c32a9adcdebc01d35f5b6f6d8f67658ad62bb0cf", "url": "https://github.com/quarkusio/quarkus/commit/c32a9adcdebc01d35f5b6f6d8f67658ad62bb0cf", "message": "[squash] PR improvements", "committedDate": "2020-04-21T13:10:45Z", "type": "forcePushed"}, {"oid": "ecaa2323c4c871320549a911d9077d729b159f2f", "url": "https://github.com/quarkusio/quarkus/commit/ecaa2323c4c871320549a911d9077d729b159f2f", "message": "[squash] PR improvements", "committedDate": "2020-04-22T09:56:58Z", "type": "forcePushed"}, {"oid": "1ac8d5799cf47b57815f87aae437baf6c3ede26d", "url": "https://github.com/quarkusio/quarkus/commit/1ac8d5799cf47b57815f87aae437baf6c3ede26d", "message": "[squash] PR improvements", "committedDate": "2020-04-22T16:48:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU2MjI0Mw==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r414562243", "bodyText": "The extension name is quarkus-hibernate-orm-panache-rest, which is consistent with quarkus-hibernate-orm-panache, but this package is upside-down. Shouldn't it be io.quarkus.hibernate.orm.panache.rest.deplayment, which would be consistent with io.quarkus.hibernate.orm.panache.deployment?", "author": "FroMage", "createdAt": "2020-04-24T13:08:55Z", "path": "extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/panache/rest/hibernate/orm/deployment/EntityDataAccessImplementor.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package io.quarkus.panache.rest.hibernate.orm.deployment;", "originalCommit": "1ac8d5799cf47b57815f87aae437baf6c3ede26d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY0Mzc1MQ==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r415643751", "bodyText": "Hmm good question. We should take into account the common and future mongo modules.\nI think the panache prefix io.quarkus.panache.rest.* makes more sense to group them all together.  Maybe we should rename the module to quarkus-panache-rest-hibernate-orm?", "author": "gytis", "createdAt": "2020-04-27T09:09:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU2MjI0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE0ODU3Ng==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r417148576", "bodyText": "Well, the mongo module name would work using both name options. I tend to think that because it's tightly related to ORM or Mongo, it's a sub-module of them, so I'd favour quarkus-hibernate-orm-panache-rest over quarkus-panache-rest-hibernate-orm.\nBut perhaps @emmanuelbernard or @loicmathieu have opinions?", "author": "FroMage", "createdAt": "2020-04-29T08:28:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU2MjI0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE1NjE5NQ==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r417156195", "bodyText": "Do we plan to have a common quide for both extension or separate guides ?\nIf we plan to have a common guide quarkus-panache-rest-hibernate-orm is more logical so we can name the guide \"Automatic REST endpoint with Panache\"  saying  that it comes in two implementations Hibernate and Mogodb in the two flavors of Panache repository and entity.\nIf we plan to have a guide for each implementation (or to integrate the documentation in the existing guides) so it's more logical to use quarkus-panache-hibernate-orm-rest as the REST entpoint will be a functionality of hibernate ORM Panache ...", "author": "loicmathieu", "createdAt": "2020-04-29T08:41:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU2MjI0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE4NTcyMw==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r417185723", "bodyText": "I prefer the common approach", "author": "gytis", "createdAt": "2020-04-29T09:33:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU2MjI0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA5NjM4Mg==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r418096382", "bodyText": "That's a good question. OTOH we currently have two guides mongo-panache and orm-panache.\nReally not sure how to proceed. @emmanuelbernard ?", "author": "FroMage", "createdAt": "2020-04-30T15:28:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU2MjI0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEwODcxMw==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r418108713", "bodyText": "I'd be inclined to not do common guide for Panache stuff.\nJust create \"Technology Foo\" with Panache and its own guide.\nBut here what is the use case? REST endpoints form the database so we could have a guide explaining how to do it with ORM and Mongo etc (if there are specificities). Id id not check the PR sorry.", "author": "emmanuelbernard", "createdAt": "2020-04-30T15:46:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU2MjI0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTMwNzI1MQ==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r419307251", "bodyText": "I don't think he meant a common guide for the whole Panache, just for the REST extensions for Hibernate and Mongo.\nThis extension generates REST endpoints for the specified entities or repositories in a similar way like Spring Data REST does. This PR only includes Hibernate, but it's easily extendable for Mongo.", "author": "gytis", "createdAt": "2020-05-04T09:17:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU2MjI0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAwMTYyNw==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r420001627", "bodyText": "Ah ok sorry. I\u2019d use a single doc then and see how that evolves.", "author": "emmanuelbernard", "createdAt": "2020-05-05T10:12:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU2MjI0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAwNjE2NQ==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r420006165", "bodyText": "So I'll keep the packages io.quarkus.panache.rest.hibernate.orm.* and rename the module hibernate-orm-panache-rest to panache-rest-hibernate-orm. Then we can add panache-rest-mongo later.\n@FroMage what do you think?", "author": "gytis", "createdAt": "2020-05-05T10:21:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU2MjI0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc1NTU5MQ==", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r420755591", "bodyText": "OK fine, thanks.", "author": "FroMage", "createdAt": "2020-05-06T12:36:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU2MjI0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "690dff5d6c0b9c2ba3d8ade49f09b89a4cf88949", "chunk": "diff --git a/extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/panache/rest/hibernate/orm/deployment/EntityDataAccessImplementor.java b/extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/panache/rest/hibernate/orm/deployment/EntityDataAccessImplementor.java\nindex b32e27865d..74fb919f3e 100644\n--- a/extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/panache/rest/hibernate/orm/deployment/EntityDataAccessImplementor.java\n+++ b/extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/panache/rest/hibernate/orm/deployment/EntityDataAccessImplementor.java\n\n@@ -10,7 +10,7 @@ import io.quarkus.gizmo.BytecodeCreator;\n import io.quarkus.gizmo.ResultHandle;\n import io.quarkus.hibernate.orm.panache.PanacheEntityBase;\n import io.quarkus.hibernate.orm.panache.runtime.JpaOperations;\n-import io.quarkus.panache.rest.deployment.DataAccessImplementor;\n+import io.quarkus.panache.rest.common.deployment.DataAccessImplementor;\n \n final class EntityDataAccessImplementor implements DataAccessImplementor {\n \n"}}, {"oid": "690dff5d6c0b9c2ba3d8ade49f09b89a4cf88949", "url": "https://github.com/quarkusio/quarkus/commit/690dff5d6c0b9c2ba3d8ade49f09b89a4cf88949", "message": "Panache Hibernate REST", "committedDate": "2020-04-29T09:08:22Z", "type": "forcePushed"}, {"oid": "1e423fa85119ef97f65ae4795123a04566d8ab14", "url": "https://github.com/quarkusio/quarkus/commit/1e423fa85119ef97f65ae4795123a04566d8ab14", "message": "Panache Hibernate REST", "committedDate": "2020-05-06T15:12:17Z", "type": "commit"}, {"oid": "1e423fa85119ef97f65ae4795123a04566d8ab14", "url": "https://github.com/quarkusio/quarkus/commit/1e423fa85119ef97f65ae4795123a04566d8ab14", "message": "Panache Hibernate REST", "committedDate": "2020-05-06T15:12:17Z", "type": "forcePushed"}]}