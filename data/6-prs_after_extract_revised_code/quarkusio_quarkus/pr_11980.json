{"pr_number": 11980, "pr_title": "ArC - distinguish \"bean archive\" and \"additional\" index", "pr_createdAt": "2020-09-08T14:35:53Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/11980", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk3MTk2Mg==", "url": "https://github.com/quarkusio/quarkus/pull/11980#discussion_r484971962", "bodyText": "I decided to use a more general name (additionalIndex) because it may be useful for other use cases as well...", "author": "mkouba", "createdAt": "2020-09-08T14:37:46Z", "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanProcessor.java", "diffHunk": "@@ -291,7 +292,29 @@ public Builder setName(String name) {\n         }\n \n         public Builder setIndex(IndexView index) {\n-            this.index = index;\n+            return setBeanArchiveIndex(index);\n+        }\n+\n+        /**\n+         * Set the bean archive index used to discover beans, interceptors, qualifiers, etc.\n+         * \n+         * @param beanArchiveIndex\n+         * @return self\n+         */\n+        public Builder setBeanArchiveIndex(IndexView beanArchiveIndex) {\n+            this.beanArchiveIndex = beanArchiveIndex;\n+            return this;\n+        }\n+\n+        /**\n+         * Set the (optional) additional index used to discover types during type-safe resolution. These types may not be part\n+         * of the bean archive index.\n+         * \n+         * @param additionalIndex\n+         * @return self\n+         */\n+        public Builder setAdditionalIndex(IndexView additionalIndex) {", "originalCommit": "2de4da4f759d3cb22d8934a40a0b64776cf4e712", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk3NTg4Ng==", "url": "https://github.com/quarkusio/quarkus/pull/11980#discussion_r484975886", "bodyText": "Perhaps applicationIndex would be a better name?", "author": "geoand", "createdAt": "2020-09-08T14:42:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk3MTk2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk3NjgwNQ==", "url": "https://github.com/quarkusio/quarkus/pull/11980#discussion_r484976805", "bodyText": "Hmm, that's a better name, yes...", "author": "mkouba", "createdAt": "2020-09-08T14:44:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk3MTk2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "e0b16605531e5f176dad6a3146061e827296d1a2", "chunk": "diff --git a/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanProcessor.java b/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanProcessor.java\nindex 8693bf854e..53a92ace5d 100644\n--- a/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanProcessor.java\n+++ b/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanProcessor.java\n\n@@ -296,7 +296,8 @@ public class BeanProcessor {\n         }\n \n         /**\n-         * Set the bean archive index used to discover beans, interceptors, qualifiers, etc.\n+         * Set the bean archive index. This index is mandatory and is used to discover beans, interceptors, qualifiers, etc. and\n+         * during type-safe resolution.\n          * \n          * @param beanArchiveIndex\n          * @return self\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk3Nzg2Ng==", "url": "https://github.com/quarkusio/quarkus/pull/11980#discussion_r484977866", "bodyText": "Perhaps this can be improved? I'm bringing it up because I don't even remember what a type variable is :P", "author": "geoand", "createdAt": "2020-09-08T14:45:33Z", "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/Types.java", "diffHunk": "@@ -164,13 +165,16 @@ static Type getProviderType(ClassInfo classInfo) {\n     static Set<Type> getProducerMethodTypeClosure(MethodInfo producerMethod, BeanDeployment beanDeployment) {\n         Set<Type> types;\n         Type returnType = producerMethod.returnType();\n+        if (returnType.kind() == Kind.TYPE_VARIABLE) {\n+            throw new DefinitionException(\"A type variable is not a legal bean type: \" + producerMethod);", "originalCommit": "2de4da4f759d3cb22d8934a40a0b64776cf4e712", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk4MTYxNQ==", "url": "https://github.com/quarkusio/quarkus/pull/11980#discussion_r484981615", "bodyText": "I don't even remember what a type variable is...\n\nI will pretend that you've never written this ;-).\nType variables are type parameters, e.g.:\nclass ProducingBean<T> {\n\n   // This is illegal...\n   @Produces\n   T produce() {\n    // ...\n   }\n}", "author": "mkouba", "createdAt": "2020-09-08T14:50:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk3Nzg2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk4MzE0Mg==", "url": "https://github.com/quarkusio/quarkus/pull/11980#discussion_r484983142", "bodyText": "Hahaha\nI meant that just mentioning type parameter as a Jandex term is unlikely to help a user understand what's going on. Perhaps just mention generics - that way everyone will know what the problem is", "author": "geoand", "createdAt": "2020-09-08T14:52:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk3Nzg2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk4NjMxMQ==", "url": "https://github.com/quarkusio/quarkus/pull/11980#discussion_r484986311", "bodyText": "Hm, the message contains the declaring class, method signature and return type... and it's a definition error as defined by the spec. I'd keep it simple for now. It's not a common use case...", "author": "mkouba", "createdAt": "2020-09-08T14:56:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk3Nzg2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk4OTIzOA==", "url": "https://github.com/quarkusio/quarkus/pull/11980#discussion_r484989238", "bodyText": "OK :)", "author": "geoand", "createdAt": "2020-09-08T14:58:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk3Nzg2Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk3ODI4OQ==", "url": "https://github.com/quarkusio/quarkus/pull/11980#discussion_r484978289", "bodyText": "Same here", "author": "geoand", "createdAt": "2020-09-08T14:46:06Z", "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/Types.java", "diffHunk": "@@ -192,12 +196,15 @@ static Type getProviderType(ClassInfo classInfo) {\n     static Set<Type> getProducerFieldTypeClosure(FieldInfo producerField, BeanDeployment beanDeployment) {\n         Set<Type> types;\n         Type fieldType = producerField.type();\n+        if (fieldType.kind() == Kind.TYPE_VARIABLE) {\n+            throw new DefinitionException(\"A type variable is not a legal bean type: \" + producerField);", "originalCommit": "2de4da4f759d3cb22d8934a40a0b64776cf4e712", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "e0b16605531e5f176dad6a3146061e827296d1a2", "url": "https://github.com/quarkusio/quarkus/commit/e0b16605531e5f176dad6a3146061e827296d1a2", "message": "ArC - distinguish \"bean archive\" and \"additional\" index\n\n- the first one is used to discover beans, etc.\n- the latter one is also used to discover types during type-safe\ndiscovery\n- fixes #11863", "committedDate": "2020-09-08T14:52:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ4NDUyMw==", "url": "https://github.com/quarkusio/quarkus/pull/11980#discussion_r485484523", "bodyText": "Do we need to keep this original method? It is considered public API?", "author": "manovotn", "createdAt": "2020-09-09T09:48:43Z", "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanDeployment.java", "diffHunk": "@@ -357,7 +361,19 @@ ValidationContext validate(List<BeanDeploymentValidator> validators,\n     }\n \n     public IndexView getIndex() {\n-        return index;\n+        return getBeanArchiveIndex();", "originalCommit": "e0b16605531e5f176dad6a3146061e827296d1a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ5MzcxMA==", "url": "https://github.com/quarkusio/quarkus/pull/11980#discussion_r485493710", "bodyText": "Well, it's a public method on a public class that can be used by an integrator... On the other hand, Quarkus and the ArcTestContainer are probably the only integrators so far. So I'm going to remove this method...", "author": "mkouba", "createdAt": "2020-09-09T10:04:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ4NDUyMw=="}], "type": "inlineReview", "revised_code": {"commit": "3e4c578df9d5f4a876cf606aebfa8dce655f1851", "chunk": "diff --git a/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanDeployment.java b/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanDeployment.java\nindex 5f2eb8dd15..58e864df5d 100644\n--- a/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanDeployment.java\n+++ b/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanDeployment.java\n\n@@ -360,14 +360,22 @@ public class BeanDeployment {\n         return interceptors;\n     }\n \n-    public IndexView getIndex() {\n-        return getBeanArchiveIndex();\n-    }\n-\n+    /**\n+     * This index was used to discover components (beans, interceptors, qualifiers, etc.) and during type-safe resolution.\n+     * \n+     * @return the bean archive index\n+     */\n     public IndexView getBeanArchiveIndex() {\n         return beanArchiveIndex;\n     }\n \n+    /**\n+     * This index is optional and is used to discover types during type-safe resolution.\n+     * <p>\n+     * Some types may not be part of the bean archive index but are still needed during type-safe resolution.\n+     * \n+     * @return the application index or {@code null}\n+     */\n     public IndexView getApplicationIndex() {\n         return applicationIndex;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ4NDkwNg==", "url": "https://github.com/quarkusio/quarkus/pull/11980#discussion_r485484906", "bodyText": "Similar to previous comment, is this needed?", "author": "manovotn", "createdAt": "2020-09-09T09:49:16Z", "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanProcessor.java", "diffHunk": "@@ -291,7 +292,31 @@ public Builder setName(String name) {\n         }\n \n         public Builder setIndex(IndexView index) {\n-            this.index = index;\n+            return setBeanArchiveIndex(index);", "originalCommit": "e0b16605531e5f176dad6a3146061e827296d1a2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3e4c578df9d5f4a876cf606aebfa8dce655f1851", "chunk": "diff --git a/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanProcessor.java b/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanProcessor.java\nindex 53a92ace5d..951a3c97f4 100644\n--- a/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanProcessor.java\n+++ b/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanProcessor.java\n\n@@ -291,13 +291,9 @@ public class BeanProcessor {\n             return this;\n         }\n \n-        public Builder setIndex(IndexView index) {\n-            return setBeanArchiveIndex(index);\n-        }\n-\n         /**\n-         * Set the bean archive index. This index is mandatory and is used to discover beans, interceptors, qualifiers, etc. and\n-         * during type-safe resolution.\n+         * Set the bean archive index. This index is mandatory and is used to discover components (beans, interceptors,\n+         * qualifiers, etc.) and during type-safe resolution.\n          * \n          * @param beanArchiveIndex\n          * @return self\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ5MTk4Ng==", "url": "https://github.com/quarkusio/quarkus/pull/11980#discussion_r485491986", "bodyText": "@mkouba ClassInfo doesn't override equals/hashCode(as noted in wildfly/jandex#83), can you be sure you won't get duplicates from both indexes?", "author": "manovotn", "createdAt": "2020-09-09T10:01:05Z", "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanResolver.java", "diffHunk": "@@ -45,14 +43,20 @@ public BeanResolver(BeanDeployment beanDeployment) {\n         this.assignableFromMap = new ConcurrentHashMap<>();\n         this.assignableFromMapFunction = name -> {\n             Set<DotName> assignables = new HashSet<>();\n-            Collection<ClassInfo> subclasses = beanDeployment.getIndex().getAllKnownSubclasses(name);\n-            for (ClassInfo subclass : subclasses) {\n+            for (ClassInfo subclass : beanDeployment.getBeanArchiveIndex().getAllKnownSubclasses(name)) {\n                 assignables.add(subclass.name());\n             }\n-            Collection<ClassInfo> implementors = beanDeployment.getIndex().getAllKnownImplementors(name);\n-            for (ClassInfo implementor : implementors) {\n+            for (ClassInfo implementor : beanDeployment.getBeanArchiveIndex().getAllKnownImplementors(name)) {\n                 assignables.add(implementor.name());\n             }\n+            if (beanDeployment.hasApplicationIndex()) {\n+                for (ClassInfo subclass : beanDeployment.getApplicationIndex().getAllKnownSubclasses(name)) {\n+                    assignables.add(subclass.name());", "originalCommit": "e0b16605531e5f176dad6a3146061e827296d1a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ5NDAxMQ==", "url": "https://github.com/quarkusio/quarkus/pull/11980#discussion_r485494011", "bodyText": "That's OK. assignables is a set of dot names.", "author": "mkouba", "createdAt": "2020-09-09T10:04:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ5MTk4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUwNDg1Mg==", "url": "https://github.com/quarkusio/quarkus/pull/11980#discussion_r485504852", "bodyText": "Oops my bad, I thought its set of ClassInfo.", "author": "manovotn", "createdAt": "2020-09-09T10:24:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ5MTk4Ng=="}], "type": "inlineReview", "revised_code": null}, {"oid": "3e4c578df9d5f4a876cf606aebfa8dce655f1851", "url": "https://github.com/quarkusio/quarkus/commit/3e4c578df9d5f4a876cf606aebfa8dce655f1851", "message": "ArC - distinguish \"bean archive\" and \"application\" index\n\n- the first one is used to discover components and during type-safe\nresolution\n- the latter one is also used to discover types during type-safe\nresolution\n- fixes #11863", "committedDate": "2020-09-09T10:31:44Z", "type": "forcePushed"}, {"oid": "8880a95ffbd43e47605c6f8caac4b9051fbdd267", "url": "https://github.com/quarkusio/quarkus/commit/8880a95ffbd43e47605c6f8caac4b9051fbdd267", "message": "ArC - distinguish \"bean archive\" and \"application\" index\n\n- the first one is used to discover components and during type-safe\nresolution\n- the latter one is also used to discover types during type-safe\nresolution\n- fixes #11863", "committedDate": "2020-09-09T11:09:13Z", "type": "commit"}, {"oid": "8880a95ffbd43e47605c6f8caac4b9051fbdd267", "url": "https://github.com/quarkusio/quarkus/commit/8880a95ffbd43e47605c6f8caac4b9051fbdd267", "message": "ArC - distinguish \"bean archive\" and \"application\" index\n\n- the first one is used to discover components and during type-safe\nresolution\n- the latter one is also used to discover types during type-safe\nresolution\n- fixes #11863", "committedDate": "2020-09-09T11:09:13Z", "type": "forcePushed"}]}