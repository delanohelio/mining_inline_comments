{"pr_number": 8602, "pr_title": "Qute if section - consider truthy/falsy values during evaluation", "pr_createdAt": "2020-04-15T19:20:13Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/8602", "timeline": [{"oid": "0fd696ac6c03eac2f93d9f96351f7e7df261447d", "url": "https://github.com/quarkusio/quarkus/commit/0fd696ac6c03eac2f93d9f96351f7e7df261447d", "message": "Qute if section - consider truthy/falsy values during evaluation\n\n- resolves #8582", "committedDate": "2020-04-15T21:21:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMyNjY3MQ==", "url": "https://github.com/quarkusio/quarkus/pull/8602#discussion_r409326671", "bodyText": "BigInteger?\nAlso perhaps AtomicInteger and AtomicLong and AtomicDouble?", "author": "Ladicek", "createdAt": "2020-04-16T07:04:22Z", "path": "independent-projects/qute/core/src/main/java/io/quarkus/qute/Booleans.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package io.quarkus.qute;\n+\n+import io.quarkus.qute.Results.Result;\n+import java.lang.reflect.Array;\n+import java.math.BigDecimal;\n+import java.util.Collection;\n+import java.util.Map;\n+\n+public final class Booleans {\n+\n+    private static final Long LONG_ZERO = 0L;\n+    private static final Integer INTEGER_ZERO = 0;\n+    private static final Short SHORT_ZERO = 0;\n+    private static final Byte BYTE_ZERO = 0;\n+    private static final Double DOUBLE_ZERO = 0.0;\n+    private static final Float FLOAT_ZERO = 0.0F;\n+\n+    private Booleans() {\n+    }\n+\n+    /**\n+     * A value is considered falsy if it's null, {@link Result#NOT_FOUND}, {code false}, an empty collection, an empty map, an\n+     * empty array, an empty string/char sequence or a number equal to zero.\n+     * \n+     * @param value\n+     * @return {@code true} if the value is falsy\n+     */\n+    public static boolean isFalsy(Object value) {\n+        if (value == null || Results.Result.NOT_FOUND.equals(value)) {\n+            return true;\n+        } else if (value instanceof Boolean) {\n+            return !(Boolean) value;\n+        } else if (value instanceof Collection) {\n+            return ((Collection<?>) value).isEmpty();\n+        } else if (value instanceof Map) {\n+            return ((Map<?, ?>) value).isEmpty();\n+        } else if (value.getClass().isArray()) {\n+            return Array.getLength(value) == 0;\n+        } else if (value instanceof CharSequence) {\n+            return ((CharSequence) value).length() == 0;\n+        } else if (value instanceof Number) {\n+            return isZero((Number) value);\n+        }\n+        return false;\n+    }\n+\n+    private static boolean isZero(Number number) {\n+        if (number instanceof BigDecimal) {", "originalCommit": "0fd696ac6c03eac2f93d9f96351f7e7df261447d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMyNzkzNQ==", "url": "https://github.com/quarkusio/quarkus/pull/8602#discussion_r409327935", "bodyText": "+1 for BigInteger. I'm not so sure about the atomic variants. I mean you can always test the current value...", "author": "mkouba", "createdAt": "2020-04-16T07:07:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMyNjY3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMyODA0NQ==", "url": "https://github.com/quarkusio/quarkus/pull/8602#discussion_r409328045", "bodyText": "In fact, should this entire method be just\nprivate static boolean isZero(Number number) {\n    return number.longValue() == 0L; // || number.doubleValue() == 0.0;\n}\nThat would also cover numeric values from other libraries, such as Guava or Apache Commons Lang.", "author": "Ladicek", "createdAt": "2020-04-16T07:07:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMyNjY3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMzMjQ4NA==", "url": "https://github.com/quarkusio/quarkus/pull/8602#discussion_r409332484", "bodyText": "Hm, number.longValue() == 0L || number.doubleValue() == 0.0d would not work. E.g. 0.2d would be considered falsy (the first condition is true) which is not correct. Or am I missing something?", "author": "mkouba", "createdAt": "2020-04-16T07:16:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMyNjY3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM0NDg4Ng==", "url": "https://github.com/quarkusio/quarkus/pull/8602#discussion_r409344886", "bodyText": "@Ladicek What about this? -> force push", "author": "mkouba", "createdAt": "2020-04-16T07:39:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMyNjY3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM2MTA3NQ==", "url": "https://github.com/quarkusio/quarkus/pull/8602#discussion_r409361075", "bodyText": "It's a trap and I probably shouldn't have suggested this :-) Because Atomic* numbers are also Numbers, so you'll have Double going through the doubleValue() path, while AtomicDouble going through the longValue() path :-)\nIn retrospective, this was probably a bad idea. (Too bad Number doesn't prescribe isZero!)", "author": "Ladicek", "createdAt": "2020-04-16T08:05:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMyNjY3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM2OTUxNQ==", "url": "https://github.com/quarkusio/quarkus/pull/8602#discussion_r409369515", "bodyText": "Hm, what about using new java.math.BigDecimal(number.toString()) for any other numbers?", "author": "mkouba", "createdAt": "2020-04-16T08:19:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMyNjY3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "fc5529e577a24362f0e56737839ae8a8e89ae82c", "chunk": "diff --git a/independent-projects/qute/core/src/main/java/io/quarkus/qute/Booleans.java b/independent-projects/qute/core/src/main/java/io/quarkus/qute/Booleans.java\nindex 5942298c9a..203ec34bea 100644\n--- a/independent-projects/qute/core/src/main/java/io/quarkus/qute/Booleans.java\n+++ b/independent-projects/qute/core/src/main/java/io/quarkus/qute/Booleans.java\n\n@@ -3,18 +3,12 @@ package io.quarkus.qute;\n import io.quarkus.qute.Results.Result;\n import java.lang.reflect.Array;\n import java.math.BigDecimal;\n+import java.math.BigInteger;\n import java.util.Collection;\n import java.util.Map;\n \n public final class Booleans {\n \n-    private static final Long LONG_ZERO = 0L;\n-    private static final Integer INTEGER_ZERO = 0;\n-    private static final Short SHORT_ZERO = 0;\n-    private static final Byte BYTE_ZERO = 0;\n-    private static final Double DOUBLE_ZERO = 0.0;\n-    private static final Float FLOAT_ZERO = 0.0F;\n-\n     private Booleans() {\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMyNjc0Mg==", "url": "https://github.com/quarkusio/quarkus/pull/8602#discussion_r409326742", "bodyText": "AtomicBoolean perhaps?", "author": "Ladicek", "createdAt": "2020-04-16T07:04:33Z", "path": "independent-projects/qute/core/src/main/java/io/quarkus/qute/Booleans.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package io.quarkus.qute;\n+\n+import io.quarkus.qute.Results.Result;\n+import java.lang.reflect.Array;\n+import java.math.BigDecimal;\n+import java.util.Collection;\n+import java.util.Map;\n+\n+public final class Booleans {\n+\n+    private static final Long LONG_ZERO = 0L;\n+    private static final Integer INTEGER_ZERO = 0;\n+    private static final Short SHORT_ZERO = 0;\n+    private static final Byte BYTE_ZERO = 0;\n+    private static final Double DOUBLE_ZERO = 0.0;\n+    private static final Float FLOAT_ZERO = 0.0F;\n+\n+    private Booleans() {\n+    }\n+\n+    /**\n+     * A value is considered falsy if it's null, {@link Result#NOT_FOUND}, {code false}, an empty collection, an empty map, an\n+     * empty array, an empty string/char sequence or a number equal to zero.\n+     * \n+     * @param value\n+     * @return {@code true} if the value is falsy\n+     */\n+    public static boolean isFalsy(Object value) {\n+        if (value == null || Results.Result.NOT_FOUND.equals(value)) {\n+            return true;\n+        } else if (value instanceof Boolean) {", "originalCommit": "0fd696ac6c03eac2f93d9f96351f7e7df261447d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc5529e577a24362f0e56737839ae8a8e89ae82c", "chunk": "diff --git a/independent-projects/qute/core/src/main/java/io/quarkus/qute/Booleans.java b/independent-projects/qute/core/src/main/java/io/quarkus/qute/Booleans.java\nindex 5942298c9a..203ec34bea 100644\n--- a/independent-projects/qute/core/src/main/java/io/quarkus/qute/Booleans.java\n+++ b/independent-projects/qute/core/src/main/java/io/quarkus/qute/Booleans.java\n\n@@ -3,18 +3,12 @@ package io.quarkus.qute;\n import io.quarkus.qute.Results.Result;\n import java.lang.reflect.Array;\n import java.math.BigDecimal;\n+import java.math.BigInteger;\n import java.util.Collection;\n import java.util.Map;\n \n public final class Booleans {\n \n-    private static final Long LONG_ZERO = 0L;\n-    private static final Integer INTEGER_ZERO = 0;\n-    private static final Short SHORT_ZERO = 0;\n-    private static final Byte BYTE_ZERO = 0;\n-    private static final Double DOUBLE_ZERO = 0.0;\n-    private static final Float FLOAT_ZERO = 0.0F;\n-\n     private Booleans() {\n     }\n \n"}}, {"oid": "fc5529e577a24362f0e56737839ae8a8e89ae82c", "url": "https://github.com/quarkusio/quarkus/commit/fc5529e577a24362f0e56737839ae8a8e89ae82c", "message": "Qute if section - consider truthy/falsy values during evaluation\n\n- resolves #8582", "committedDate": "2020-04-16T07:37:58Z", "type": "forcePushed"}, {"oid": "dfb19948c27aa9910765eca7feaef63ae2bc2acc", "url": "https://github.com/quarkusio/quarkus/commit/dfb19948c27aa9910765eca7feaef63ae2bc2acc", "message": "Qute if section - consider truthy/falsy values during evaluation\n\n- resolves #8582", "committedDate": "2020-04-16T07:41:40Z", "type": "forcePushed"}, {"oid": "3c031d82fb80b354cbfd0d71735f31afdcd7eaf4", "url": "https://github.com/quarkusio/quarkus/commit/3c031d82fb80b354cbfd0d71735f31afdcd7eaf4", "message": "Qute if section - consider truthy/falsy values during evaluation\n\n- resolves #8582", "committedDate": "2020-04-16T07:51:34Z", "type": "forcePushed"}, {"oid": "aea98a187e88dfc4e1a06c4369dd63eac3a24ac5", "url": "https://github.com/quarkusio/quarkus/commit/aea98a187e88dfc4e1a06c4369dd63eac3a24ac5", "message": "Qute if section - consider truthy/falsy values during evaluation\n\n- resolves #8582", "committedDate": "2020-04-16T14:11:25Z", "type": "commit"}, {"oid": "aea98a187e88dfc4e1a06c4369dd63eac3a24ac5", "url": "https://github.com/quarkusio/quarkus/commit/aea98a187e88dfc4e1a06c4369dd63eac3a24ac5", "message": "Qute if section - consider truthy/falsy values during evaluation\n\n- resolves #8582", "committedDate": "2020-04-16T14:11:25Z", "type": "forcePushed"}]}