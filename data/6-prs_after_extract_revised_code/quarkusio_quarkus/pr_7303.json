{"pr_number": 7303, "pr_title": "Implement Context Propagation support for Mutiny", "pr_createdAt": "2020-02-20T09:26:53Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/7303", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg4ODI5Mw==", "url": "https://github.com/quarkusio/quarkus/pull/7303#discussion_r381888293", "bodyText": "Why did you drop this clause? We don't have to convert it if it's a Publisher.", "author": "FroMage", "createdAt": "2020-02-20T09:46:10Z", "path": "extensions/narayana-jta/runtime/src/main/java/io/quarkus/narayana/jta/runtime/interceptor/TransactionalInterceptorBase.java", "diffHunk": "@@ -124,8 +124,7 @@ protected Object invokeInOurTx(InvocationContext ic, TransactionManager tm, Runn\n             // handle asynchronously if not throwing\n             if (!throwing && ret != null) {\n                 ReactiveTypeConverter<Object> converter = null;\n-                if (ret instanceof CompletionStage == false\n-                        && ret instanceof Publisher == false) {\n+                if (ret instanceof CompletionStage == false) {", "originalCommit": "6ca9fad6d743bd23d4ef678fb6f453cd816a0acc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg5NzU4MQ==", "url": "https://github.com/quarkusio/quarkus/pull/7303#discussion_r381897581", "bodyText": "We actually do.\nIf we don't, then the following block does not work as expected (line 145):\nret = handleAsync(tm, tx, ic, ret, afterEndTransaction);\n// convert back\nif (converter != null)\n       ret = converter.fromPublisher((Publisher<?>) ret);\n\nImagine we have a Multi. As Multi is an instance of Publisher, you don't look up for the converter (in the current code, before this PR). However, this Publisher gets decorated in handleAsync which returns a Publisher. As we don't have a converter, it is not converted back to a Multi... boom ClassCastException.  It works with RX Java because the implementation of Reactive Streams Operators (used in handleAsync) returned a Flowable, but if you use a Flux or a Multi it does not work.", "author": "cescoffier", "createdAt": "2020-02-20T10:02:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg4ODI5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTkwNTE1Mw==", "url": "https://github.com/quarkusio/quarkus/pull/7303#discussion_r381905153", "bodyText": "Ah, damn. Well, OK. Perhaps we could check the intercepted method's return type and allow reusing the Publisher if its return type is Publisher (as opposed to Multi)?", "author": "FroMage", "createdAt": "2020-02-20T10:16:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg4ODI5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTkyNDMzNw==", "url": "https://github.com/quarkusio/quarkus/pull/7303#discussion_r381924337", "bodyText": "That would remove the need to call the converter in this case. Something like:\nif (ret instanceof CompletionStage == false && ! ret.getClass().equals(Publisher.class)) {", "author": "cescoffier", "createdAt": "2020-02-20T10:52:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg4ODI5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTkyNzU1MA==", "url": "https://github.com/quarkusio/quarkus/pull/7303#discussion_r381927550", "bodyText": "Fixed.", "author": "cescoffier", "createdAt": "2020-02-20T10:58:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg4ODI5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "c99c91f0865c4b8f674de9f212552a714ecd7213", "chunk": "diff --git a/extensions/narayana-jta/runtime/src/main/java/io/quarkus/narayana/jta/runtime/interceptor/TransactionalInterceptorBase.java b/extensions/narayana-jta/runtime/src/main/java/io/quarkus/narayana/jta/runtime/interceptor/TransactionalInterceptorBase.java\nindex 9186a439ef..17e7b3e013 100644\n--- a/extensions/narayana-jta/runtime/src/main/java/io/quarkus/narayana/jta/runtime/interceptor/TransactionalInterceptorBase.java\n+++ b/extensions/narayana-jta/runtime/src/main/java/io/quarkus/narayana/jta/runtime/interceptor/TransactionalInterceptorBase.java\n\n@@ -124,7 +124,7 @@ public abstract class TransactionalInterceptorBase implements Serializable {\n             // handle asynchronously if not throwing\n             if (!throwing && ret != null) {\n                 ReactiveTypeConverter<Object> converter = null;\n-                if (ret instanceof CompletionStage == false) {\n+                if (ret instanceof CompletionStage == false && !ret.getClass().equals(Publisher.class)) {\n                     @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n                     Optional<ReactiveTypeConverter<Object>> lookup = Registry.lookup((Class) ret.getClass());\n                     if (lookup.isPresent()) {\n"}}, {"oid": "57430cb99d303d3e0a98e829d7fe972a4e2dd7b2", "url": "https://github.com/quarkusio/quarkus/commit/57430cb99d303d3e0a98e829d7fe972a4e2dd7b2", "message": "Update documentation with the Mutiny / Context propagation support\n\nRemove the example using Reactive Streams Operators (Axle) as this model is now deprecated.", "committedDate": "2020-02-20T10:42:10Z", "type": "forcePushed"}, {"oid": "c99c91f0865c4b8f674de9f212552a714ecd7213", "url": "https://github.com/quarkusio/quarkus/commit/c99c91f0865c4b8f674de9f212552a714ecd7213", "message": "Update documentation with the Mutiny / Context propagation support\n\nRemove the example using Reactive Streams Operators (Axle) as this model is now deprecated.", "committedDate": "2020-02-20T10:58:16Z", "type": "forcePushed"}, {"oid": "d093bb567b948d053c2d473a87ca63a75123a6cf", "url": "https://github.com/quarkusio/quarkus/commit/d093bb567b948d053c2d473a87ca63a75123a6cf", "message": "Update documentation with the Mutiny / Context propagation support\n\nRemove the example using Reactive Streams Operators (Axle) as this model is now deprecated.", "committedDate": "2020-02-20T12:38:02Z", "type": "forcePushed"}, {"oid": "e25a8bf4925b416731632d9eb17fd662523111a1", "url": "https://github.com/quarkusio/quarkus/commit/e25a8bf4925b416731632d9eb17fd662523111a1", "message": "Update documentation with the Mutiny / Context propagation support\n\nRemove the example using Reactive Streams Operators (Axle) as this model is now deprecated.", "committedDate": "2020-02-20T13:07:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAyMjUwNw==", "url": "https://github.com/quarkusio/quarkus/pull/7303#discussion_r382022507", "bodyText": "Shouldn't it be:\nif(ret instanceof CompletionStage == false\n && (ret instanceof Publisher == false || !ic.getMethod().getReturnType() == Publisher.class))\nYou need to check the method's declared return type, not the instance exact type, which can never be Publisher since it's an interface.\nNote that I wonder if we don't have the same issue with CompletionStage and CompletableFuture. Could you add a test to see what happens if an intercepted method is declared to return a CompletableFuture?", "author": "FroMage", "createdAt": "2020-02-20T14:12:11Z", "path": "extensions/narayana-jta/runtime/src/main/java/io/quarkus/narayana/jta/runtime/interceptor/TransactionalInterceptorBase.java", "diffHunk": "@@ -124,8 +124,7 @@ protected Object invokeInOurTx(InvocationContext ic, TransactionManager tm, Runn\n             // handle asynchronously if not throwing\n             if (!throwing && ret != null) {\n                 ReactiveTypeConverter<Object> converter = null;\n-                if (ret instanceof CompletionStage == false\n-                        && ret instanceof Publisher == false) {\n+                if (ret instanceof CompletionStage == false && !ret.getClass().equals(Publisher.class)) {", "originalCommit": "e25a8bf4925b416731632d9eb17fd662523111a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA0NDMyNg==", "url": "https://github.com/quarkusio/quarkus/pull/7303#discussion_r382044326", "bodyText": "Adding the test right now.", "author": "cescoffier", "createdAt": "2020-02-20T14:46:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAyMjUwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA1MjY4NA==", "url": "https://github.com/quarkusio/quarkus/pull/7303#discussion_r382052684", "bodyText": "I fixed the condition.", "author": "cescoffier", "createdAt": "2020-02-20T14:58:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAyMjUwNw=="}], "type": "inlineReview", "revised_code": {"commit": "e21ab2d1ba485a81fc7675214ffb7d4b9ee4eab7", "chunk": "diff --git a/extensions/narayana-jta/runtime/src/main/java/io/quarkus/narayana/jta/runtime/interceptor/TransactionalInterceptorBase.java b/extensions/narayana-jta/runtime/src/main/java/io/quarkus/narayana/jta/runtime/interceptor/TransactionalInterceptorBase.java\nindex 17e7b3e013..337882fe88 100644\n--- a/extensions/narayana-jta/runtime/src/main/java/io/quarkus/narayana/jta/runtime/interceptor/TransactionalInterceptorBase.java\n+++ b/extensions/narayana-jta/runtime/src/main/java/io/quarkus/narayana/jta/runtime/interceptor/TransactionalInterceptorBase.java\n\n@@ -124,7 +124,8 @@ public abstract class TransactionalInterceptorBase implements Serializable {\n             // handle asynchronously if not throwing\n             if (!throwing && ret != null) {\n                 ReactiveTypeConverter<Object> converter = null;\n-                if (ret instanceof CompletionStage == false && !ret.getClass().equals(Publisher.class)) {\n+                if (ret instanceof CompletionStage == false\n+                        && ret instanceof Publisher == false) {\n                     @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n                     Optional<ReactiveTypeConverter<Object>> lookup = Registry.lookup((Class) ret.getClass());\n                     if (lookup.isPresent()) {\n"}}, {"oid": "e21ab2d1ba485a81fc7675214ffb7d4b9ee4eab7", "url": "https://github.com/quarkusio/quarkus/commit/e21ab2d1ba485a81fc7675214ffb7d4b9ee4eab7", "message": "Update Mutiny to 0.4.0", "committedDate": "2020-02-20T14:38:31Z", "type": "commit"}, {"oid": "2b23b1e9976c8903fa259c9720d13df519ccf042", "url": "https://github.com/quarkusio/quarkus/commit/2b23b1e9976c8903fa259c9720d13df519ccf042", "message": "Add the Mutiny Context Propagation dependency to the BOM", "committedDate": "2020-02-20T14:38:31Z", "type": "commit"}, {"oid": "11a36194ca261b8ab4df7de935f03116c639cd1a", "url": "https://github.com/quarkusio/quarkus/commit/11a36194ca261b8ab4df7de935f03116c639cd1a", "message": "Add test to verify the failure behavior.\n\nCheck the response is processed correctly when an endpoint fails (intentionally or not)", "committedDate": "2020-02-20T14:38:31Z", "type": "commit"}, {"oid": "3facd752f2812dfa8a989768234f0517d94d4d2d", "url": "https://github.com/quarkusio/quarkus/commit/3facd752f2812dfa8a989768234f0517d94d4d2d", "message": "Implement the reactive converters for Uni and Multi\n\nAlso add the SPI to the native image.", "committedDate": "2020-02-20T14:38:31Z", "type": "commit"}, {"oid": "2bd5d8e092b9ef4e43327b5f32ccab932a5034de", "url": "https://github.com/quarkusio/quarkus/commit/2bd5d8e092b9ef4e43327b5f32ccab932a5034de", "message": "Add support for Mutiny in the context propagation extension\n\n* Add the dependency on mutiny-context-propagation\n* Extract the version of the smallrye-reactive-converter-rxjava2 used in context propagation tests\n* Implement tests verifying the context propagation when using resteasy, transactions, servlets and when the returned Unis are created from direct values or from completion stages", "committedDate": "2020-02-20T14:38:31Z", "type": "commit"}, {"oid": "acca039c8ab60e0d41eca00edd510dc590168b3b", "url": "https://github.com/quarkusio/quarkus/commit/acca039c8ab60e0d41eca00edd510dc590168b3b", "message": "Improve the Transactional Interceptor to handle other Publisher types\n\nConverters should also be searched for Publisher instances, or you won't be able to re-create the Publisher instance (Flux, Mono, Multi) after the async handling.", "committedDate": "2020-02-20T14:38:31Z", "type": "commit"}, {"oid": "dac5d32e9a78511c28ea1421945ff5fde715b477", "url": "https://github.com/quarkusio/quarkus/commit/dac5d32e9a78511c28ea1421945ff5fde715b477", "message": "Add integration tests verifying the context propagation with Mutiny", "committedDate": "2020-02-20T14:38:36Z", "type": "commit"}, {"oid": "b4029976ee9621fe5f123e6b8699bf06ecce8c31", "url": "https://github.com/quarkusio/quarkus/commit/b4029976ee9621fe5f123e6b8699bf06ecce8c31", "message": "Update documentation with the Mutiny / Context propagation support\n\nRemove the example using Reactive Streams Operators (Axle) as this model is now deprecated.", "committedDate": "2020-02-20T14:38:36Z", "type": "commit"}, {"oid": "b4029976ee9621fe5f123e6b8699bf06ecce8c31", "url": "https://github.com/quarkusio/quarkus/commit/b4029976ee9621fe5f123e6b8699bf06ecce8c31", "message": "Update documentation with the Mutiny / Context propagation support\n\nRemove the example using Reactive Streams Operators (Axle) as this model is now deprecated.", "committedDate": "2020-02-20T14:38:36Z", "type": "forcePushed"}]}