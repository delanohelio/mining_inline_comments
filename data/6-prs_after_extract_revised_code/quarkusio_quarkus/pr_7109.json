{"pr_number": 7109, "pr_title": "Add support for graceful shutdown", "pr_createdAt": "2020-02-10T02:52:12Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/7109", "timeline": [{"oid": "8cd36b8c4642bb10a757e7d835237841911fb4ab", "url": "https://github.com/quarkusio/quarkus/commit/8cd36b8c4642bb10a757e7d835237841911fb4ab", "message": "Add support for graceful shutdown\n\nThis adds the core support for waiting for requests\nto finish before shutting down, and a HTTP implementation\nfor web requests.", "committedDate": "2020-02-10T04:21:00Z", "type": "forcePushed"}, {"oid": "262fdeb0b7629146da76294d2d1d632d621149c0", "url": "https://github.com/quarkusio/quarkus/commit/262fdeb0b7629146da76294d2d1d632d621149c0", "message": "Add support for graceful shutdown\n\nThis adds the core support for waiting for requests\nto finish before shutting down, and a HTTP implementation\nfor web requests.", "committedDate": "2020-02-11T06:34:40Z", "type": "forcePushed"}, {"oid": "8cecfcf997bc092c42dc624f23e06325c9366f00", "url": "https://github.com/quarkusio/quarkus/commit/8cecfcf997bc092c42dc624f23e06325c9366f00", "message": "Add support for graceful shutdown\n\nThis adds the core support for waiting for requests\nto finish before shutting down, and a HTTP implementation\nfor web requests.", "committedDate": "2020-02-12T01:26:17Z", "type": "forcePushed"}, {"oid": "42164b4a743904cf5085528ed14bf7d406c57a2c", "url": "https://github.com/quarkusio/quarkus/commit/42164b4a743904cf5085528ed14bf7d406c57a2c", "message": "Add support for graceful shutdown\n\nThis adds the core support for waiting for requests\nto finish before shutting down, and a HTTP implementation\nfor web requests.", "committedDate": "2020-02-12T22:19:28Z", "type": "forcePushed"}, {"oid": "b004b7b4d1ea891b4ff3351181edbf7869333042", "url": "https://github.com/quarkusio/quarkus/commit/b004b7b4d1ea891b4ff3351181edbf7869333042", "message": "Add support for graceful shutdown\n\nThis adds the core support for waiting for requests\nto finish before shutting down, and a HTTP implementation\nfor web requests.", "committedDate": "2020-02-14T08:55:01Z", "type": "forcePushed"}, {"oid": "0688ab38451b4432ba91222a67d986f1a82b5d4e", "url": "https://github.com/quarkusio/quarkus/commit/0688ab38451b4432ba91222a67d986f1a82b5d4e", "message": "Add support for graceful shutdown\n\nThis adds the core support for waiting for requests\nto finish before shutting down, and a HTTP implementation\nfor web requests.", "committedDate": "2020-02-15T20:12:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1NTYwNg==", "url": "https://github.com/quarkusio/quarkus/pull/7109#discussion_r379855606", "bodyText": "@vietj is there a better way to handle this?\nBasically I need a reliable way to know when a request is done so I know how many requests are running (that can't be overridden in a downstream handler), and wrapping the request and response like this was the only way I could figure out to do it.", "author": "stuartwdouglas", "createdAt": "2020-02-15T20:56:37Z", "path": "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/filters/GracefulShutdownFilter.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package io.quarkus.vertx.http.runtime.filters;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.quarkus.runtime.shutdown.ShutdownListener;\n+import io.vertx.core.Handler;\n+import io.vertx.core.http.HttpServerRequest;\n+\n+public class GracefulShutdownFilter implements ShutdownListener, Handler<HttpServerRequest> {\n+\n+    private static Logger log = Logger.getLogger(GracefulShutdownFilter.class);\n+\n+    private volatile Handler<HttpServerRequest> next;\n+    private volatile boolean running = true;\n+    private final AtomicInteger currentRequestCount = new AtomicInteger();\n+    private final AtomicReference<ShutdownNotification> notification = new AtomicReference<>();\n+\n+    private final Handler<Void> requestDoneHandler = new Handler<Void>() {\n+        @Override\n+        public void handle(Void event) {\n+            int count = currentRequestCount.decrementAndGet();\n+            if (!running) {\n+                if (count == 0) {\n+                    ShutdownNotification n = notification.get();\n+                    if (n != null) {\n+                        if (notification.compareAndSet(n, null)) {\n+                            n.done();\n+                            log.info(\"All HTTP requests complete\");\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    };\n+\n+    @Override\n+    public void handle(HttpServerRequest event) {\n+        if (!running) {\n+            event.response().setStatusCode(HttpResponseStatus.SERVICE_UNAVAILABLE.code()).end();\n+            return;\n+        }\n+        currentRequestCount.incrementAndGet();\n+        //todo: some way to do this without a wrapper solution\n+        next.handle(new ShutdownRequestWrapper(event, requestDoneHandler));", "originalCommit": "0688ab38451b4432ba91222a67d986f1a82b5d4e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIxMTkzOA==", "url": "https://github.com/quarkusio/quarkus/pull/7109#discussion_r388211938", "bodyText": "on the HTTP Server Response, you can attach a https://vertx.io/docs/apidocs/io/vertx/core/http/HttpServerResponse.html#endHandler-io.vertx.core.Handler- to be notified when the response has been written.", "author": "cescoffier", "createdAt": "2020-03-05T10:42:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1NTYwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIxMjQ2MQ==", "url": "https://github.com/quarkusio/quarkus/pull/7109#discussion_r388212461", "bodyText": "It would need to be coupled with the closeHandler when the connection is closed (abruptly).", "author": "cescoffier", "createdAt": "2020-03-05T10:43:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1NTYwNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjkxMzQxNA==", "url": "https://github.com/quarkusio/quarkus/pull/7109#discussion_r386913414", "bodyText": "Maybe add a runtime config phase so that it is runtime overridable?", "author": "machi1990", "createdAt": "2020-03-03T10:03:50Z", "path": "core/runtime/src/main/java/io/quarkus/runtime/shutdown/ShutdownConfig.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package io.quarkus.runtime.shutdown;\n+\n+import java.time.Duration;\n+import java.util.Optional;\n+\n+import io.quarkus.runtime.annotations.ConfigItem;\n+import io.quarkus.runtime.annotations.ConfigRoot;\n+\n+@ConfigRoot", "originalCommit": "0688ab38451b4432ba91222a67d986f1a82b5d4e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4239c357540c0d19d96095ff0ebc98affe950ace", "chunk": "diff --git a/core/runtime/src/main/java/io/quarkus/runtime/shutdown/ShutdownConfig.java b/core/runtime/src/main/java/io/quarkus/runtime/shutdown/ShutdownConfig.java\nindex be57c7253d..370a84d21d 100644\n--- a/core/runtime/src/main/java/io/quarkus/runtime/shutdown/ShutdownConfig.java\n+++ b/core/runtime/src/main/java/io/quarkus/runtime/shutdown/ShutdownConfig.java\n\n@@ -4,9 +4,10 @@ import java.time.Duration;\n import java.util.Optional;\n \n import io.quarkus.runtime.annotations.ConfigItem;\n+import io.quarkus.runtime.annotations.ConfigPhase;\n import io.quarkus.runtime.annotations.ConfigRoot;\n \n-@ConfigRoot\n+@ConfigRoot(phase = ConfigPhase.RUN_TIME)\n public class ShutdownConfig {\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjkxODAyNQ==", "url": "https://github.com/quarkusio/quarkus/pull/7109#discussion_r386918025", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Tests that shutddown will wait for current requests to finish.\n          \n          \n            \n             * Tests that shutdown will wait for current requests to finish.", "author": "machi1990", "createdAt": "2020-03-03T10:12:23Z", "path": "extensions/vertx-http/deployment/src/test/java/io/quarkus/vertx/http/shutdown/ShutdownTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package io.quarkus.vertx.http.shutdown;\n+\n+import java.io.IOException;\n+import java.net.Socket;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.function.Supplier;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Observes;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.test.QuarkusUnitTest;\n+import io.quarkus.test.common.http.TestHTTPResource;\n+import io.vertx.core.Handler;\n+import io.vertx.ext.web.Router;\n+import io.vertx.ext.web.RoutingContext;\n+\n+/**\n+ * Tests that shutddown will wait for current requests to finish.", "originalCommit": "0688ab38451b4432ba91222a67d986f1a82b5d4e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4239c357540c0d19d96095ff0ebc98affe950ace", "chunk": "diff --git a/extensions/vertx-http/deployment/src/test/java/io/quarkus/vertx/http/shutdown/ShutdownTest.java b/extensions/vertx-http/deployment/src/test/java/io/quarkus/vertx/http/shutdown/ShutdownTest.java\nindex 74eda312c2..fdb6952853 100644\n--- a/extensions/vertx-http/deployment/src/test/java/io/quarkus/vertx/http/shutdown/ShutdownTest.java\n+++ b/extensions/vertx-http/deployment/src/test/java/io/quarkus/vertx/http/shutdown/ShutdownTest.java\n\n@@ -23,7 +23,7 @@ import io.vertx.ext.web.Router;\n import io.vertx.ext.web.RoutingContext;\n \n /**\n- * Tests that shutddown will wait for current requests to finish.\n+ * Tests that shutdown will wait for current requests to finish.\n  * \n  * This test records the current time, then sends a request to an endpoint that will take 5s to finish.\n  * \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjkxODY4NQ==", "url": "https://github.com/quarkusio/quarkus/pull/7109#discussion_r386918685", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Tests that shutddown will wait for current requests to finish, up to the timeout specified.\n          \n          \n            \n             * Tests that shutdown will wait for current requests to finish, up to the timeout specified.", "author": "machi1990", "createdAt": "2020-03-03T10:13:34Z", "path": "extensions/vertx-http/deployment/src/test/java/io/quarkus/vertx/http/shutdown/ShutdownTimeoutTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package io.quarkus.vertx.http.shutdown;\n+\n+import java.io.IOException;\n+import java.net.Socket;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.function.Supplier;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Observes;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.test.QuarkusUnitTest;\n+import io.quarkus.test.common.http.TestHTTPResource;\n+import io.vertx.core.Handler;\n+import io.vertx.ext.web.Router;\n+import io.vertx.ext.web.RoutingContext;\n+\n+/**\n+ * Tests that shutddown will wait for current requests to finish, up to the timeout specified.", "originalCommit": "0688ab38451b4432ba91222a67d986f1a82b5d4e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4239c357540c0d19d96095ff0ebc98affe950ace", "chunk": "diff --git a/extensions/vertx-http/deployment/src/test/java/io/quarkus/vertx/http/shutdown/ShutdownTimeoutTest.java b/extensions/vertx-http/deployment/src/test/java/io/quarkus/vertx/http/shutdown/ShutdownTimeoutTest.java\nindex abd1c81d6b..e02a5ba726 100644\n--- a/extensions/vertx-http/deployment/src/test/java/io/quarkus/vertx/http/shutdown/ShutdownTimeoutTest.java\n+++ b/extensions/vertx-http/deployment/src/test/java/io/quarkus/vertx/http/shutdown/ShutdownTimeoutTest.java\n\n@@ -23,7 +23,7 @@ import io.vertx.ext.web.Router;\n import io.vertx.ext.web.RoutingContext;\n \n /**\n- * Tests that shutddown will wait for current requests to finish, up to the timeout specified.\n+ * Tests that shutdown will wait for current requests to finish, up to the timeout specified.\n  * \n  * This test records the current time, then sends a request to an endpoint that will take 50s to finish.\n  * \n"}}, {"oid": "4239c357540c0d19d96095ff0ebc98affe950ace", "url": "https://github.com/quarkusio/quarkus/commit/4239c357540c0d19d96095ff0ebc98affe950ace", "message": "Add support for graceful shutdown\n\nThis adds the core support for waiting for requests\nto finish before shutting down, and a HTTP implementation\nfor web requests.", "committedDate": "2020-03-04T01:43:04Z", "type": "commit"}, {"oid": "4239c357540c0d19d96095ff0ebc98affe950ace", "url": "https://github.com/quarkusio/quarkus/commit/4239c357540c0d19d96095ff0ebc98affe950ace", "message": "Add support for graceful shutdown\n\nThis adds the core support for waiting for requests\nto finish before shutting down, and a HTTP implementation\nfor web requests.", "committedDate": "2020-03-04T01:43:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwODMwNA==", "url": "https://github.com/quarkusio/quarkus/pull/7109#discussion_r388208304", "bodyText": "in terms of API, any reason to not return a CompletionStage?", "author": "cescoffier", "createdAt": "2020-03-05T10:35:35Z", "path": "core/runtime/src/main/java/io/quarkus/runtime/shutdown/ShutdownListener.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package io.quarkus.runtime.shutdown;\n+\n+/**\n+ * A listener that can be registered to control the shutdown process and implement\n+ * graceful shutdown.\n+ *\n+ * Shutdown happens in two phases. In the pre shutdown phase the application should\n+ * function normally, but should notify external systems that it is about to go away.\n+ *\n+ * In the shutdown phase the app should disallow new external requests, however\n+ * allow existing requests to complete normally.\n+ */\n+public interface ShutdownListener {\n+\n+    /**\n+     * Pre shutdown notification, the listener can use this to notify external\n+     * systems this application is about to shut down.\n+     * \n+     * @param notification The notification event\n+     */\n+    default void preShutdown(ShutdownNotification notification) {", "originalCommit": "4239c357540c0d19d96095ff0ebc98affe950ace", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwODQ1OQ==", "url": "https://github.com/quarkusio/quarkus/pull/7109#discussion_r388208459", "bodyText": "Typically how are failures reported?", "author": "cescoffier", "createdAt": "2020-03-05T10:35:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwODMwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIyMDg0Mw==", "url": "https://github.com/quarkusio/quarkus/pull/7109#discussion_r388220843", "bodyText": "Failures don't really matter, we are shutting down anyway, if a stage has failed then it needs to log and notify, so I am not sure if completion stage works here.", "author": "stuartwdouglas", "createdAt": "2020-03-05T10:58:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwODMwNA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwOTYzNw==", "url": "https://github.com/quarkusio/quarkus/pull/7109#discussion_r388209637", "bodyText": "One day I would understand why sometimes we use @ApplicationScoped, and sometimes @singleton (I know it's not coming from the same spec, but still puzzled by when use which).", "author": "cescoffier", "createdAt": "2020-03-05T10:37:50Z", "path": "extensions/smallrye-health/runtime/src/main/java/io/quarkus/smallrye/health/runtime/ShutdownReadinessCheck.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package io.quarkus.smallrye.health.runtime;\n+\n+import javax.inject.Singleton;\n+\n+import org.eclipse.microprofile.health.HealthCheck;\n+import org.eclipse.microprofile.health.HealthCheckResponse;\n+import org.eclipse.microprofile.health.Readiness;\n+\n+@Singleton", "originalCommit": "4239c357540c0d19d96095ff0ebc98affe950ace", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIyMTM1Ng==", "url": "https://github.com/quarkusio/quarkus/pull/7109#discussion_r388221356", "bodyText": "ApplicationScoped requires a proxy to comply with the spec, Singleton is usually better, but because it is not actually in the CDI spec a lot of people just default to application scoped.", "author": "stuartwdouglas", "createdAt": "2020-03-05T10:59:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwOTYzNw=="}], "type": "inlineReview", "revised_code": null}]}