{"pr_number": 10261, "pr_title": "Provide warning for unsupported rest-client features in native", "pr_createdAt": "2020-06-25T11:46:58Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/10261", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyODY0Nw==", "url": "https://github.com/quarkusio/quarkus/pull/10261#discussion_r445628647", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // so lets warn users about it's use\n          \n          \n            \n                // so lets warn users about its use", "author": "gsmet", "createdAt": "2020-06-25T15:04:51Z", "path": "extensions/rest-client/deployment/src/main/java/io/quarkus/restclient/deployment/RestClientProcessor.java", "diffHunk": "@@ -220,6 +227,40 @@ public void register(RegistrationContext registrationContext) {\n         extensionSslNativeSupport.produce(new ExtensionSslNativeSupportBuildItem(Feature.REST_CLIENT));\n     }\n \n+    // currently default methods on a rest-client interface\n+    // that is annotated with ClientHeaderParam\n+    // leads to NPEs (see https://github.com/quarkusio/quarkus/issues/10249)\n+    // so lets warn users about it's use", "originalCommit": "aba30563bed279008eefd240081e85ec928f17a2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1182c18fe08653d1c4ba3d5bc1d0e0d1cb934f6e", "chunk": "diff --git a/extensions/rest-client/deployment/src/main/java/io/quarkus/restclient/deployment/RestClientProcessor.java b/extensions/rest-client/deployment/src/main/java/io/quarkus/restclient/deployment/RestClientProcessor.java\nindex 3627d48387..55ea0a9319 100644\n--- a/extensions/rest-client/deployment/src/main/java/io/quarkus/restclient/deployment/RestClientProcessor.java\n+++ b/extensions/rest-client/deployment/src/main/java/io/quarkus/restclient/deployment/RestClientProcessor.java\n\n@@ -230,13 +230,13 @@ class RestClientProcessor {\n     // currently default methods on a rest-client interface\n     // that is annotated with ClientHeaderParam\n     // leads to NPEs (see https://github.com/quarkusio/quarkus/issues/10249)\n-    // so lets warn users about it's use\n+    // so lets warn users about its use\n     private void warnAboutNotWorkingFeaturesInNative(PackageConfig packageConfig, Map<DotName, ClassInfo> interfaces) {\n         if (!packageConfig.type.equalsIgnoreCase(PackageConfig.NATIVE)) {\n             return;\n         }\n         Set<DotName> dotNames = new HashSet<>();\n-        for (ClassInfo intefaze : interfaces.values()) {\n+        for (ClassInfo interfaze : interfaces.values()) {\n             if (intefaze.classAnnotation(CLIENT_HEADER_PARAM) != null) {\n                 boolean hasDefault = false;\n                 for (MethodInfo method : intefaze.methods()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyODg5OA==", "url": "https://github.com/quarkusio/quarkus/pull/10261#discussion_r445628898", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (ClassInfo intefaze : interfaces.values()) {\n          \n          \n            \n                    for (ClassInfo interfaze : interfaces.values()) {", "author": "gsmet", "createdAt": "2020-06-25T15:05:11Z", "path": "extensions/rest-client/deployment/src/main/java/io/quarkus/restclient/deployment/RestClientProcessor.java", "diffHunk": "@@ -220,6 +227,40 @@ public void register(RegistrationContext registrationContext) {\n         extensionSslNativeSupport.produce(new ExtensionSslNativeSupportBuildItem(Feature.REST_CLIENT));\n     }\n \n+    // currently default methods on a rest-client interface\n+    // that is annotated with ClientHeaderParam\n+    // leads to NPEs (see https://github.com/quarkusio/quarkus/issues/10249)\n+    // so lets warn users about it's use\n+    private void warnAboutNotWorkingFeaturesInNative(PackageConfig packageConfig, Map<DotName, ClassInfo> interfaces) {\n+        if (!packageConfig.type.equalsIgnoreCase(PackageConfig.NATIVE)) {\n+            return;\n+        }\n+        Set<DotName> dotNames = new HashSet<>();\n+        for (ClassInfo intefaze : interfaces.values()) {", "originalCommit": "aba30563bed279008eefd240081e85ec928f17a2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1182c18fe08653d1c4ba3d5bc1d0e0d1cb934f6e", "chunk": "diff --git a/extensions/rest-client/deployment/src/main/java/io/quarkus/restclient/deployment/RestClientProcessor.java b/extensions/rest-client/deployment/src/main/java/io/quarkus/restclient/deployment/RestClientProcessor.java\nindex 3627d48387..55ea0a9319 100644\n--- a/extensions/rest-client/deployment/src/main/java/io/quarkus/restclient/deployment/RestClientProcessor.java\n+++ b/extensions/rest-client/deployment/src/main/java/io/quarkus/restclient/deployment/RestClientProcessor.java\n\n@@ -230,13 +230,13 @@ class RestClientProcessor {\n     // currently default methods on a rest-client interface\n     // that is annotated with ClientHeaderParam\n     // leads to NPEs (see https://github.com/quarkusio/quarkus/issues/10249)\n-    // so lets warn users about it's use\n+    // so lets warn users about its use\n     private void warnAboutNotWorkingFeaturesInNative(PackageConfig packageConfig, Map<DotName, ClassInfo> interfaces) {\n         if (!packageConfig.type.equalsIgnoreCase(PackageConfig.NATIVE)) {\n             return;\n         }\n         Set<DotName> dotNames = new HashSet<>();\n-        for (ClassInfo intefaze : interfaces.values()) {\n+        for (ClassInfo interfaze : interfaces.values()) {\n             if (intefaze.classAnnotation(CLIENT_HEADER_PARAM) != null) {\n                 boolean hasDefault = false;\n                 for (MethodInfo method : intefaze.methods()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyOTQ2MA==", "url": "https://github.com/quarkusio/quarkus/pull/10261#discussion_r445629460", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                + \"' might not work properly in native-mode. Offending interfaces are: \"\n          \n          \n            \n                                + \"' might not work properly in native mode. Offending interfaces are: \"", "author": "gsmet", "createdAt": "2020-06-25T15:05:55Z", "path": "extensions/rest-client/deployment/src/main/java/io/quarkus/restclient/deployment/RestClientProcessor.java", "diffHunk": "@@ -220,6 +227,40 @@ public void register(RegistrationContext registrationContext) {\n         extensionSslNativeSupport.produce(new ExtensionSslNativeSupportBuildItem(Feature.REST_CLIENT));\n     }\n \n+    // currently default methods on a rest-client interface\n+    // that is annotated with ClientHeaderParam\n+    // leads to NPEs (see https://github.com/quarkusio/quarkus/issues/10249)\n+    // so lets warn users about it's use\n+    private void warnAboutNotWorkingFeaturesInNative(PackageConfig packageConfig, Map<DotName, ClassInfo> interfaces) {\n+        if (!packageConfig.type.equalsIgnoreCase(PackageConfig.NATIVE)) {\n+            return;\n+        }\n+        Set<DotName> dotNames = new HashSet<>();\n+        for (ClassInfo intefaze : interfaces.values()) {\n+            if (intefaze.classAnnotation(CLIENT_HEADER_PARAM) != null) {\n+                boolean hasDefault = false;\n+                for (MethodInfo method : intefaze.methods()) {\n+                    if (isDefault(method.flags())) {\n+                        hasDefault = true;\n+                        break;\n+                    }\n+                }\n+                if (hasDefault) {\n+                    dotNames.add(intefaze.name());\n+                }\n+            }\n+        }\n+        if (!dotNames.isEmpty()) {\n+            log.warnf(\"rest-client interfaces that contain default methods and are annotated with '@\" + CLIENT_HEADER_PARAM\n+                    + \"' might not work properly in native-mode. Offending interfaces are: \"", "originalCommit": "aba30563bed279008eefd240081e85ec928f17a2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1182c18fe08653d1c4ba3d5bc1d0e0d1cb934f6e", "chunk": "diff --git a/extensions/rest-client/deployment/src/main/java/io/quarkus/restclient/deployment/RestClientProcessor.java b/extensions/rest-client/deployment/src/main/java/io/quarkus/restclient/deployment/RestClientProcessor.java\nindex 3627d48387..55ea0a9319 100644\n--- a/extensions/rest-client/deployment/src/main/java/io/quarkus/restclient/deployment/RestClientProcessor.java\n+++ b/extensions/rest-client/deployment/src/main/java/io/quarkus/restclient/deployment/RestClientProcessor.java\n\n@@ -230,13 +230,13 @@ class RestClientProcessor {\n     // currently default methods on a rest-client interface\n     // that is annotated with ClientHeaderParam\n     // leads to NPEs (see https://github.com/quarkusio/quarkus/issues/10249)\n-    // so lets warn users about it's use\n+    // so lets warn users about its use\n     private void warnAboutNotWorkingFeaturesInNative(PackageConfig packageConfig, Map<DotName, ClassInfo> interfaces) {\n         if (!packageConfig.type.equalsIgnoreCase(PackageConfig.NATIVE)) {\n             return;\n         }\n         Set<DotName> dotNames = new HashSet<>();\n-        for (ClassInfo intefaze : interfaces.values()) {\n+        for (ClassInfo interfaze : interfaces.values()) {\n             if (intefaze.classAnnotation(CLIENT_HEADER_PARAM) != null) {\n                 boolean hasDefault = false;\n                 for (MethodInfo method : intefaze.methods()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyOTU2OQ==", "url": "https://github.com/quarkusio/quarkus/pull/10261#discussion_r445629569", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                + dotNames.stream().map(d -> \"'\" + d.toString() + \"'\").collect(Collectors.joining(\",\")));\n          \n          \n            \n                                + dotNames.stream().map(d -> \"'\" + d.toString() + \"'\").collect(Collectors.joining(\", \")));", "author": "gsmet", "createdAt": "2020-06-25T15:06:05Z", "path": "extensions/rest-client/deployment/src/main/java/io/quarkus/restclient/deployment/RestClientProcessor.java", "diffHunk": "@@ -220,6 +227,40 @@ public void register(RegistrationContext registrationContext) {\n         extensionSslNativeSupport.produce(new ExtensionSslNativeSupportBuildItem(Feature.REST_CLIENT));\n     }\n \n+    // currently default methods on a rest-client interface\n+    // that is annotated with ClientHeaderParam\n+    // leads to NPEs (see https://github.com/quarkusio/quarkus/issues/10249)\n+    // so lets warn users about it's use\n+    private void warnAboutNotWorkingFeaturesInNative(PackageConfig packageConfig, Map<DotName, ClassInfo> interfaces) {\n+        if (!packageConfig.type.equalsIgnoreCase(PackageConfig.NATIVE)) {\n+            return;\n+        }\n+        Set<DotName> dotNames = new HashSet<>();\n+        for (ClassInfo intefaze : interfaces.values()) {\n+            if (intefaze.classAnnotation(CLIENT_HEADER_PARAM) != null) {\n+                boolean hasDefault = false;\n+                for (MethodInfo method : intefaze.methods()) {\n+                    if (isDefault(method.flags())) {\n+                        hasDefault = true;\n+                        break;\n+                    }\n+                }\n+                if (hasDefault) {\n+                    dotNames.add(intefaze.name());\n+                }\n+            }\n+        }\n+        if (!dotNames.isEmpty()) {\n+            log.warnf(\"rest-client interfaces that contain default methods and are annotated with '@\" + CLIENT_HEADER_PARAM\n+                    + \"' might not work properly in native-mode. Offending interfaces are: \"\n+                    + dotNames.stream().map(d -> \"'\" + d.toString() + \"'\").collect(Collectors.joining(\",\")));", "originalCommit": "aba30563bed279008eefd240081e85ec928f17a2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1182c18fe08653d1c4ba3d5bc1d0e0d1cb934f6e", "chunk": "diff --git a/extensions/rest-client/deployment/src/main/java/io/quarkus/restclient/deployment/RestClientProcessor.java b/extensions/rest-client/deployment/src/main/java/io/quarkus/restclient/deployment/RestClientProcessor.java\nindex 3627d48387..55ea0a9319 100644\n--- a/extensions/rest-client/deployment/src/main/java/io/quarkus/restclient/deployment/RestClientProcessor.java\n+++ b/extensions/rest-client/deployment/src/main/java/io/quarkus/restclient/deployment/RestClientProcessor.java\n\n@@ -230,13 +230,13 @@ class RestClientProcessor {\n     // currently default methods on a rest-client interface\n     // that is annotated with ClientHeaderParam\n     // leads to NPEs (see https://github.com/quarkusio/quarkus/issues/10249)\n-    // so lets warn users about it's use\n+    // so lets warn users about its use\n     private void warnAboutNotWorkingFeaturesInNative(PackageConfig packageConfig, Map<DotName, ClassInfo> interfaces) {\n         if (!packageConfig.type.equalsIgnoreCase(PackageConfig.NATIVE)) {\n             return;\n         }\n         Set<DotName> dotNames = new HashSet<>();\n-        for (ClassInfo intefaze : interfaces.values()) {\n+        for (ClassInfo interfaze : interfaces.values()) {\n             if (intefaze.classAnnotation(CLIENT_HEADER_PARAM) != null) {\n                 boolean hasDefault = false;\n                 for (MethodInfo method : intefaze.methods()) {\n"}}, {"oid": "1182c18fe08653d1c4ba3d5bc1d0e0d1cb934f6e", "url": "https://github.com/quarkusio/quarkus/commit/1182c18fe08653d1c4ba3d5bc1d0e0d1cb934f6e", "message": "Provide warning for unsupported rest-client features in native\n\nThis doesn't fix anything, but does at the least warn users building\na native binary that rest-client with @ClientHeaderParam\nand default methods may not work.\n\nRelates to #10249\n\nCo-authored-by: Guillaume Smet <guillaume.smet@gmail.com>", "committedDate": "2020-06-25T15:25:25Z", "type": "forcePushed"}, {"oid": "40ae7414ba808976ef2fe6a26c873b90056d3f37", "url": "https://github.com/quarkusio/quarkus/commit/40ae7414ba808976ef2fe6a26c873b90056d3f37", "message": "Provide warning for unsupported rest-client features in native\n\nThis doesn't fix anything, but does at the least warn users building\na native binary that rest-client with @ClientHeaderParam\nand default methods may not work.\n\nRelates to #10249\n\nCo-authored-by: Guillaume Smet <guillaume.smet@gmail.com>", "committedDate": "2020-06-25T15:26:26Z", "type": "commit"}, {"oid": "40ae7414ba808976ef2fe6a26c873b90056d3f37", "url": "https://github.com/quarkusio/quarkus/commit/40ae7414ba808976ef2fe6a26c873b90056d3f37", "message": "Provide warning for unsupported rest-client features in native\n\nThis doesn't fix anything, but does at the least warn users building\na native binary that rest-client with @ClientHeaderParam\nand default methods may not work.\n\nRelates to #10249\n\nCo-authored-by: Guillaume Smet <guillaume.smet@gmail.com>", "committedDate": "2020-06-25T15:26:26Z", "type": "forcePushed"}]}