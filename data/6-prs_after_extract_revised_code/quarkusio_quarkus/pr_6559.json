{"pr_number": 6559, "pr_title": "Expose metrics from Hibernate ORM", "pr_createdAt": "2020-01-15T08:24:53Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/6559", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE0NTU2MA==", "url": "https://github.com/quarkusio/quarkus/pull/6559#discussion_r367145560", "bodyText": "It's very minor but it would be easier to understand if this variable was called statistics.", "author": "gsmet", "createdAt": "2020-01-15T22:40:29Z", "path": "extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/metrics/HibernateCounter.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package io.quarkus.hibernate.orm.runtime.metrics;\n+\n+import org.hibernate.SessionFactory;\n+import org.hibernate.stat.Statistics;\n+\n+import io.quarkus.arc.Arc;\n+import io.quarkus.hibernate.orm.runtime.JPAConfig;\n+\n+public class HibernateCounter implements org.eclipse.microprofile.metrics.Counter {\n+\n+    private volatile SessionFactory sessionFactory;\n+    private String persistenceUnitName;\n+    private String metric;\n+\n+    public HibernateCounter() {\n+    }\n+\n+    public HibernateCounter(String persistenceUnitName, String metric) {\n+        this.persistenceUnitName = persistenceUnitName;\n+        this.metric = metric;\n+    }\n+\n+    public String getPersistenceUnitName() {\n+        return persistenceUnitName;\n+    }\n+\n+    public void setPersistenceUnitName(String persistenceUnitName) {\n+        this.persistenceUnitName = persistenceUnitName;\n+    }\n+\n+    public String getMetric() {\n+        return metric;\n+    }\n+\n+    public void setMetric(String metric) {\n+        this.metric = metric;\n+    }\n+\n+    @Override\n+    public long getCount() {\n+        Statistics metrics = getSessionFactory().getStatistics();", "originalCommit": "f35a70fa423bc48b308970fd258e3a9cf8c8c80b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff77c36b608bc1128b09e09678c29fa7bc0d08fa", "chunk": "diff --git a/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/metrics/HibernateCounter.java b/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/metrics/HibernateCounter.java\nindex 29339ed892..277ab68957 100644\n--- a/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/metrics/HibernateCounter.java\n+++ b/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/metrics/HibernateCounter.java\n\n@@ -38,74 +38,74 @@ public class HibernateCounter implements org.eclipse.microprofile.metrics.Counte\n \n     @Override\n     public long getCount() {\n-        Statistics metrics = getSessionFactory().getStatistics();\n+        Statistics statistics = getSessionFactory().getStatistics();\n         switch (metric) {\n             case \"sessionsOpened\":\n-                return metrics.getSessionOpenCount();\n+                return statistics.getSessionOpenCount();\n             case \"sessionsClosed\":\n-                return metrics.getSessionCloseCount();\n+                return statistics.getSessionCloseCount();\n             case \"transactionCount\":\n-                return metrics.getTransactionCount();\n+                return statistics.getTransactionCount();\n             case \"successfulTransactions\":\n-                return metrics.getSuccessfulTransactionCount();\n+                return statistics.getSuccessfulTransactionCount();\n             case \"optimisticLockFailures\":\n-                return metrics.getOptimisticFailureCount();\n+                return statistics.getOptimisticFailureCount();\n             case \"flushes\":\n-                return metrics.getFlushCount();\n+                return statistics.getFlushCount();\n             case \"connectionsObtained\":\n-                return metrics.getConnectCount();\n+                return statistics.getConnectCount();\n             case \"statementsPrepared\":\n-                return metrics.getPrepareStatementCount();\n+                return statistics.getPrepareStatementCount();\n             case \"statementsClosed\":\n-                return metrics.getCloseStatementCount();\n+                return statistics.getCloseStatementCount();\n             case \"secondLevelCachePuts\":\n-                return metrics.getSecondLevelCachePutCount();\n+                return statistics.getSecondLevelCachePutCount();\n             case \"secondLevelCacheHits\":\n-                return metrics.getSecondLevelCacheHitCount();\n+                return statistics.getSecondLevelCacheHitCount();\n             case \"secondLevelCacheMisses\":\n-                return metrics.getSecondLevelCacheMissCount();\n+                return statistics.getSecondLevelCacheMissCount();\n             case \"entitiesLoaded\":\n-                return metrics.getEntityLoadCount();\n+                return statistics.getEntityLoadCount();\n             case \"entitiesUpdated\":\n-                return metrics.getEntityUpdateCount();\n+                return statistics.getEntityUpdateCount();\n             case \"entitiesInserted\":\n-                return metrics.getEntityInsertCount();\n+                return statistics.getEntityInsertCount();\n             case \"entitiesDeleted\":\n-                return metrics.getEntityDeleteCount();\n+                return statistics.getEntityDeleteCount();\n             case \"entitiesFetched\":\n-                return metrics.getEntityFetchCount();\n+                return statistics.getEntityFetchCount();\n             case \"collectionsLoaded\":\n-                return metrics.getCollectionLoadCount();\n+                return statistics.getCollectionLoadCount();\n             case \"collectionsUpdated\":\n-                return metrics.getCollectionUpdateCount();\n+                return statistics.getCollectionUpdateCount();\n             case \"collectionsRemoved\":\n-                return metrics.getCollectionRemoveCount();\n+                return statistics.getCollectionRemoveCount();\n             case \"collectionsRecreated\":\n-                return metrics.getCollectionRecreateCount();\n+                return statistics.getCollectionRecreateCount();\n             case \"collectionsFetched\":\n-                return metrics.getCollectionFetchCount();\n+                return statistics.getCollectionFetchCount();\n             case \"naturalIdQueriesExecutedToDatabase\":\n-                return metrics.getNaturalIdQueryExecutionCount();\n+                return statistics.getNaturalIdQueryExecutionCount();\n             case \"naturalIdCachePuts\":\n-                return metrics.getNaturalIdCachePutCount();\n+                return statistics.getNaturalIdCachePutCount();\n             case \"naturalIdCacheHits\":\n-                return metrics.getNaturalIdCacheHitCount();\n+                return statistics.getNaturalIdCacheHitCount();\n             case \"naturalIdCacheMisses\":\n-                return metrics.getNaturalIdCacheMissCount();\n+                return statistics.getNaturalIdCacheMissCount();\n             case \"queriesExecutedToDatabase\":\n-                return metrics.getQueryExecutionCount();\n+                return statistics.getQueryExecutionCount();\n             case \"queryCachePuts\":\n-                return metrics.getQueryCachePutCount();\n+                return statistics.getQueryCachePutCount();\n             case \"queryCacheHits\":\n-                return metrics.getQueryCacheHitCount();\n+                return statistics.getQueryCacheHitCount();\n             case \"queryCacheMisses\":\n-                return metrics.getQueryCacheMissCount();\n+                return statistics.getQueryCacheMissCount();\n             case \"updateTimestampsCachePuts\":\n-                return metrics.getUpdateTimestampsCachePutCount();\n+                return statistics.getUpdateTimestampsCachePutCount();\n             case \"updateTimestampsCacheHits\":\n-                return metrics.getUpdateTimestampsCacheHitCount();\n+                return statistics.getUpdateTimestampsCacheHitCount();\n             case \"updateTimestampsCacheMisses\":\n-                return metrics.getUpdateTimestampsCacheMissCount();\n+                return statistics.getUpdateTimestampsCacheMissCount();\n             default:\n                 throw new IllegalArgumentException(\"Unknown data source metric\");\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE0NjE3Mw==", "url": "https://github.com/quarkusio/quarkus/pull/6559#discussion_r367146173", "bodyText": "Is it the norm to use dots everywhere? hibernate.second-level-cache.puts would have felt more natural to me.", "author": "gsmet", "createdAt": "2020-01-15T22:42:07Z", "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java", "diffHunk": "@@ -345,6 +349,163 @@ public void startPersistenceUnits(HibernateOrmRecorder recorder, BeanContainerBu\n         recorder.startAllPersistenceUnits(beanContainer.getValue());\n     }\n \n+    @BuildStep\n+    public void metrics(HibernateOrmConfig config,\n+            BuildProducer<MetricBuildItem> metrics) {\n+        // TODO: When multiple PUs are supported, create metrics for each PU. For now we only assume the \"default\" PU.\n+        boolean metricsEnabled = config.metricsEnabled && config.statistics.orElse(true);\n+        metrics.produce(createMetricBuildItem(\"hibernate.sessions.open\",\n+                \"Global number of sessions opened\",\n+                \"sessionsOpened\",\n+                metricsEnabled));\n+        metrics.produce(createMetricBuildItem(\"hibernate.sessions.closed\",\n+                \"Global number of sessions closed\",\n+                \"sessionsClosed\",\n+                metricsEnabled));\n+        metrics.produce(createMetricBuildItem(\"hibernate.sessions.closed\",\n+                \"Global number of sessions closed\",\n+                \"sessionsClosed\",\n+                metricsEnabled));\n+        metrics.produce(createMetricBuildItem(\"hibernate.transactions\",\n+                \"The number of transactions we know to have completed\",\n+                \"transactionCount\",\n+                metricsEnabled));\n+        metrics.produce(createMetricBuildItem(\"hibernate.transactions.successful\",\n+                \"The number of transactions we know to have been successful\",\n+                \"successfulTransactions\",\n+                metricsEnabled));\n+        metrics.produce(createMetricBuildItem(\"hibernate.optimistic.lock.failures\",\n+                \"The number of Hibernate StaleObjectStateExceptions or JPA OptimisticLockExceptions that occurred.\",\n+                \"optimisticLockFailures\",\n+                metricsEnabled));\n+        metrics.produce(createMetricBuildItem(\"hibernate.flushes\",\n+                \"Global number of flush operations executed (either manual or automatic).\",\n+                \"flushes\",\n+                metricsEnabled));\n+        metrics.produce(createMetricBuildItem(\"hibernate.connections.obtained\",\n+                \"Get the global number of connections asked by the sessions \" +\n+                        \"(the actual number of connections used may be much smaller depending \" +\n+                        \"whether you use a connection pool or not)\",\n+                \"connectionsObtained\",\n+                metricsEnabled));\n+        metrics.produce(createMetricBuildItem(\"hibernate.statements.prepared\",\n+                \"The number of prepared statements that were acquired\",\n+                \"statementsPrepared\",\n+                metricsEnabled));\n+        metrics.produce(createMetricBuildItem(\"hibernate.statements.closed\",\n+                \"The number of prepared statements that were released\",\n+                \"statementsClosed\",\n+                metricsEnabled));\n+        metrics.produce(createMetricBuildItem(\"hibernate.second.level.cache.puts\",", "originalCommit": "f35a70fa423bc48b308970fd258e3a9cf8c8c80b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI0NDI0MQ==", "url": "https://github.com/quarkusio/quarkus/pull/6559#discussion_r367244241", "bodyText": "Ok. I changed natural.id and query.cache and timestamps.cache too in a similar fashion", "author": "jmartisk", "createdAt": "2020-01-16T06:04:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE0NjE3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "ff77c36b608bc1128b09e09678c29fa7bc0d08fa", "chunk": "diff --git a/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java b/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java\nindex 578ca9a7b4..10a5ff887b 100644\n--- a/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java\n+++ b/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java\n\n@@ -354,141 +354,141 @@ public final class HibernateOrmProcessor {\n             BuildProducer<MetricBuildItem> metrics) {\n         // TODO: When multiple PUs are supported, create metrics for each PU. For now we only assume the \"default\" PU.\n         boolean metricsEnabled = config.metricsEnabled && config.statistics.orElse(true);\n-        metrics.produce(createMetricBuildItem(\"hibernate.sessions.open\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.sessions.open\",\n                 \"Global number of sessions opened\",\n                 \"sessionsOpened\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.sessions.closed\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.sessions.closed\",\n                 \"Global number of sessions closed\",\n                 \"sessionsClosed\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.sessions.closed\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.sessions.closed\",\n                 \"Global number of sessions closed\",\n                 \"sessionsClosed\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.transactions\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.transactions\",\n                 \"The number of transactions we know to have completed\",\n                 \"transactionCount\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.transactions.successful\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.transactions.successful\",\n                 \"The number of transactions we know to have been successful\",\n                 \"successfulTransactions\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.optimistic.lock.failures\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.optimistic.lock.failures\",\n                 \"The number of Hibernate StaleObjectStateExceptions or JPA OptimisticLockExceptions that occurred.\",\n                 \"optimisticLockFailures\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.flushes\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.flushes\",\n                 \"Global number of flush operations executed (either manual or automatic).\",\n                 \"flushes\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.connections.obtained\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.connections.obtained\",\n                 \"Get the global number of connections asked by the sessions \" +\n                         \"(the actual number of connections used may be much smaller depending \" +\n                         \"whether you use a connection pool or not)\",\n                 \"connectionsObtained\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.statements.prepared\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.statements.prepared\",\n                 \"The number of prepared statements that were acquired\",\n                 \"statementsPrepared\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.statements.closed\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.statements.closed\",\n                 \"The number of prepared statements that were released\",\n                 \"statementsClosed\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.second.level.cache.puts\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.second-level-cache.puts\",\n                 \"Global number of cacheable entities/collections put in the cache\",\n                 \"secondLevelCachePuts\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.second.level.cache.hits\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.second-level-cache.hits\",\n                 \"Global number of cacheable entities/collections successfully retrieved from the cache\",\n                 \"secondLevelCacheHits\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.second.level.cache.misses\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.second-level-cache.misses\",\n                 \"Global number of cacheable entities/collections not found in the cache and loaded from the database.\",\n                 \"secondLevelCacheMisses\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.entities.loaded\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.entities.loaded\",\n                 \"Global number of entity loads\",\n                 \"entitiesLoaded\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.entities.updated\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.entities.updated\",\n                 \"Global number of entity updates\",\n                 \"entitiesUpdated\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.entities.inserted\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.entities.inserted\",\n                 \"Global number of entity inserts\",\n                 \"entitiesInserted\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.entities.deleted\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.entities.deleted\",\n                 \"Global number of entity deletes\",\n                 \"entitiesDeleted\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.entities.fetched\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.entities.fetched\",\n                 \"Global number of entity fetches\",\n                 \"entitiesFetched\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.collections.loaded\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.collections.loaded\",\n                 \"Global number of collections loaded\",\n                 \"collectionsLoaded\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.collections.updated\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.collections.updated\",\n                 \"Global number of collections updated\",\n                 \"collectionsUpdated\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.collections.removed\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.collections.removed\",\n                 \"Global number of collections removed\",\n                 \"collectionsRemoved\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.collections.recreated\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.collections.recreated\",\n                 \"Global number of collections recreated\",\n                 \"collectionsRecreated\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.collections.fetched\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.collections.fetched\",\n                 \"Global number of collections fetched\",\n                 \"collectionsFetched\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.natural.id.queries.executions\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.natural-id.queries.executions\",\n                 \"Global number of natural id queries executed against the database\",\n                 \"naturalIdQueriesExecutedToDatabase\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.natural.id.cache.hits\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.natural-id.cache.hits\",\n                 \"Global number of cached natural id lookups successfully retrieved from cache\",\n                 \"naturalIdCacheHits\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.natural.id.cache.puts\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.natural-id.cache.puts\",\n                 \"Global number of cacheable natural id lookups put in cache\",\n                 \"naturalIdCachePuts\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.natural.id.cache.misses\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.natural-id.cache.misses\",\n                 \"Global number of cached natural id lookups *not* found in cache\",\n                 \"naturalIdCacheMisses\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.queries.executed\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.queries.executed\",\n                 \"Global number of executed queries\",\n                 \"queriesExecutedToDatabase\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.query.cache.puts\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.query-cache.puts\",\n                 \"Global number of cacheable queries put in cache\",\n                 \"queryCachePuts\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.query.cache.hits\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.query-cache.hits\",\n                 \"Global number of cached queries successfully retrieved from cache\",\n                 \"queryCacheHits\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.query.cache.misses\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.query-cache.misses\",\n                 \"Global number of cached queries *not* found in cache\",\n                 \"queryCacheMisses\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.update.timestamps.cache.puts\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.timestamps-cache.puts\",\n                 \"Global number of timestamps put in cache\",\n                 \"updateTimestampsCachePuts\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.update.timestamps.cache.hits\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.timestamps-cache.hits\",\n                 \"Global number of timestamps successfully retrieved from cache\",\n                 \"updateTimestampsCacheHits\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.update.timestamps.cache.misses\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.timestamps-cache.misses\",\n                 \"Global number of timestamp requests that were not found in the cache\",\n                 \"updateTimestampsCacheMisses\",\n                 metricsEnabled));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE0NjQzNA==", "url": "https://github.com/quarkusio/quarkus/pull/6559#discussion_r367146434", "bodyText": "Could you use an hibernate-orm prefix instead to be consistent with the extension? Moreover, we really want it to be branded as Hibernate ORM because we also have Validator and Search.", "author": "gsmet", "createdAt": "2020-01-15T22:42:52Z", "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java", "diffHunk": "@@ -345,6 +349,163 @@ public void startPersistenceUnits(HibernateOrmRecorder recorder, BeanContainerBu\n         recorder.startAllPersistenceUnits(beanContainer.getValue());\n     }\n \n+    @BuildStep\n+    public void metrics(HibernateOrmConfig config,\n+            BuildProducer<MetricBuildItem> metrics) {\n+        // TODO: When multiple PUs are supported, create metrics for each PU. For now we only assume the \"default\" PU.\n+        boolean metricsEnabled = config.metricsEnabled && config.statistics.orElse(true);\n+        metrics.produce(createMetricBuildItem(\"hibernate.sessions.open\",", "originalCommit": "f35a70fa423bc48b308970fd258e3a9cf8c8c80b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff77c36b608bc1128b09e09678c29fa7bc0d08fa", "chunk": "diff --git a/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java b/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java\nindex 578ca9a7b4..10a5ff887b 100644\n--- a/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java\n+++ b/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java\n\n@@ -354,141 +354,141 @@ public final class HibernateOrmProcessor {\n             BuildProducer<MetricBuildItem> metrics) {\n         // TODO: When multiple PUs are supported, create metrics for each PU. For now we only assume the \"default\" PU.\n         boolean metricsEnabled = config.metricsEnabled && config.statistics.orElse(true);\n-        metrics.produce(createMetricBuildItem(\"hibernate.sessions.open\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.sessions.open\",\n                 \"Global number of sessions opened\",\n                 \"sessionsOpened\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.sessions.closed\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.sessions.closed\",\n                 \"Global number of sessions closed\",\n                 \"sessionsClosed\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.sessions.closed\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.sessions.closed\",\n                 \"Global number of sessions closed\",\n                 \"sessionsClosed\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.transactions\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.transactions\",\n                 \"The number of transactions we know to have completed\",\n                 \"transactionCount\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.transactions.successful\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.transactions.successful\",\n                 \"The number of transactions we know to have been successful\",\n                 \"successfulTransactions\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.optimistic.lock.failures\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.optimistic.lock.failures\",\n                 \"The number of Hibernate StaleObjectStateExceptions or JPA OptimisticLockExceptions that occurred.\",\n                 \"optimisticLockFailures\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.flushes\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.flushes\",\n                 \"Global number of flush operations executed (either manual or automatic).\",\n                 \"flushes\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.connections.obtained\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.connections.obtained\",\n                 \"Get the global number of connections asked by the sessions \" +\n                         \"(the actual number of connections used may be much smaller depending \" +\n                         \"whether you use a connection pool or not)\",\n                 \"connectionsObtained\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.statements.prepared\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.statements.prepared\",\n                 \"The number of prepared statements that were acquired\",\n                 \"statementsPrepared\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.statements.closed\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.statements.closed\",\n                 \"The number of prepared statements that were released\",\n                 \"statementsClosed\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.second.level.cache.puts\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.second-level-cache.puts\",\n                 \"Global number of cacheable entities/collections put in the cache\",\n                 \"secondLevelCachePuts\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.second.level.cache.hits\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.second-level-cache.hits\",\n                 \"Global number of cacheable entities/collections successfully retrieved from the cache\",\n                 \"secondLevelCacheHits\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.second.level.cache.misses\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.second-level-cache.misses\",\n                 \"Global number of cacheable entities/collections not found in the cache and loaded from the database.\",\n                 \"secondLevelCacheMisses\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.entities.loaded\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.entities.loaded\",\n                 \"Global number of entity loads\",\n                 \"entitiesLoaded\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.entities.updated\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.entities.updated\",\n                 \"Global number of entity updates\",\n                 \"entitiesUpdated\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.entities.inserted\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.entities.inserted\",\n                 \"Global number of entity inserts\",\n                 \"entitiesInserted\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.entities.deleted\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.entities.deleted\",\n                 \"Global number of entity deletes\",\n                 \"entitiesDeleted\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.entities.fetched\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.entities.fetched\",\n                 \"Global number of entity fetches\",\n                 \"entitiesFetched\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.collections.loaded\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.collections.loaded\",\n                 \"Global number of collections loaded\",\n                 \"collectionsLoaded\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.collections.updated\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.collections.updated\",\n                 \"Global number of collections updated\",\n                 \"collectionsUpdated\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.collections.removed\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.collections.removed\",\n                 \"Global number of collections removed\",\n                 \"collectionsRemoved\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.collections.recreated\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.collections.recreated\",\n                 \"Global number of collections recreated\",\n                 \"collectionsRecreated\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.collections.fetched\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.collections.fetched\",\n                 \"Global number of collections fetched\",\n                 \"collectionsFetched\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.natural.id.queries.executions\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.natural-id.queries.executions\",\n                 \"Global number of natural id queries executed against the database\",\n                 \"naturalIdQueriesExecutedToDatabase\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.natural.id.cache.hits\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.natural-id.cache.hits\",\n                 \"Global number of cached natural id lookups successfully retrieved from cache\",\n                 \"naturalIdCacheHits\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.natural.id.cache.puts\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.natural-id.cache.puts\",\n                 \"Global number of cacheable natural id lookups put in cache\",\n                 \"naturalIdCachePuts\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.natural.id.cache.misses\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.natural-id.cache.misses\",\n                 \"Global number of cached natural id lookups *not* found in cache\",\n                 \"naturalIdCacheMisses\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.queries.executed\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.queries.executed\",\n                 \"Global number of executed queries\",\n                 \"queriesExecutedToDatabase\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.query.cache.puts\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.query-cache.puts\",\n                 \"Global number of cacheable queries put in cache\",\n                 \"queryCachePuts\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.query.cache.hits\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.query-cache.hits\",\n                 \"Global number of cached queries successfully retrieved from cache\",\n                 \"queryCacheHits\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.query.cache.misses\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.query-cache.misses\",\n                 \"Global number of cached queries *not* found in cache\",\n                 \"queryCacheMisses\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.update.timestamps.cache.puts\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.timestamps-cache.puts\",\n                 \"Global number of timestamps put in cache\",\n                 \"updateTimestampsCachePuts\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.update.timestamps.cache.hits\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.timestamps-cache.hits\",\n                 \"Global number of timestamps successfully retrieved from cache\",\n                 \"updateTimestampsCacheHits\",\n                 metricsEnabled));\n-        metrics.produce(createMetricBuildItem(\"hibernate.update.timestamps.cache.misses\",\n+        metrics.produce(createMetricBuildItem(\"hibernate-orm.timestamps-cache.misses\",\n                 \"Global number of timestamp requests that were not found in the cache\",\n                 \"updateTimestampsCacheMisses\",\n                 metricsEnabled));\n"}}, {"oid": "ff77c36b608bc1128b09e09678c29fa7bc0d08fa", "url": "https://github.com/quarkusio/quarkus/commit/ff77c36b608bc1128b09e09678c29fa7bc0d08fa", "message": "Expose metrics from Hibernate ORM", "committedDate": "2020-01-16T06:01:51Z", "type": "forcePushed"}, {"oid": "cffcfe35c116cc114b4c7862add23964abdbab22", "url": "https://github.com/quarkusio/quarkus/commit/cffcfe35c116cc114b4c7862add23964abdbab22", "message": "Expose metrics from Hibernate ORM", "committedDate": "2020-01-20T05:45:28Z", "type": "commit"}, {"oid": "cffcfe35c116cc114b4c7862add23964abdbab22", "url": "https://github.com/quarkusio/quarkus/commit/cffcfe35c116cc114b4c7862add23964abdbab22", "message": "Expose metrics from Hibernate ORM", "committedDate": "2020-01-20T05:45:28Z", "type": "forcePushed"}]}