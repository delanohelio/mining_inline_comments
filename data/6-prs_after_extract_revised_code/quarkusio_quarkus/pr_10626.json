{"pr_number": 10626, "pr_title": "Remove/reduce usage of MetricBuildItem", "pr_createdAt": "2020-07-10T01:04:21Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/10626", "timeline": [{"oid": "0209901a10cb064fe1fe3a464cba9202cf65737c", "url": "https://github.com/quarkusio/quarkus/commit/0209901a10cb064fe1fe3a464cba9202cf65737c", "message": "Support all persistence units; remove MetricBuildItems", "committedDate": "2020-07-10T01:22:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYyMTY1MA==", "url": "https://github.com/quarkusio/quarkus/pull/10626#discussion_r452621650", "bodyText": "persistence-unit would sound more suitable to me for the tag key", "author": "jmartisk", "createdAt": "2020-07-10T04:55:50Z", "path": "extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/metrics/HibernateMpMetricsProvider.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package io.quarkus.hibernate.orm.runtime.metrics;\n+\n+import java.util.function.ToLongFunction;\n+\n+import javax.annotation.Priority;\n+import javax.enterprise.event.Observes;\n+import javax.enterprise.inject.Instance;\n+import javax.inject.Inject;\n+\n+import org.eclipse.microprofile.metrics.*;\n+import org.eclipse.microprofile.metrics.annotation.RegistryType;\n+import org.hibernate.SessionFactory;\n+import org.hibernate.stat.Statistics;\n+\n+import io.quarkus.hibernate.orm.runtime.JPAConfig;\n+import io.quarkus.runtime.StartupEvent;\n+\n+/**\n+ * This is only discovered if\n+ */\n+public class HibernateMpMetricsProvider {\n+    private static final String SESSION_FACTORY_TAG_NAME = \"entityManagerFactory\";", "originalCommit": "0209901a10cb064fe1fe3a464cba9202cf65737c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYyNDUzNQ==", "url": "https://github.com/quarkusio/quarkus/pull/10626#discussion_r452624535", "bodyText": "Meh. I used what micrometer uses. Allows metrics to be aggregated across spring/micronaut/quarkus runtimes.", "author": "ebullient", "createdAt": "2020-07-10T05:08:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYyMTY1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYyNzU5Nw==", "url": "https://github.com/quarkusio/quarkus/pull/10626#discussion_r452627597", "bodyText": "Ah, now I get it, ok then", "author": "jmartisk", "createdAt": "2020-07-10T05:21:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYyMTY1MA=="}], "type": "inlineReview", "revised_code": {"commit": "ef9065df5dfa05b1411740ea9d864487d1e4c289", "chunk": "diff --git a/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/metrics/HibernateMpMetricsProvider.java b/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/metrics/HibernateMpMetricsProvider.java\nindex 866510315e..8508916345 100644\n--- a/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/metrics/HibernateMpMetricsProvider.java\n+++ b/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/metrics/HibernateMpMetricsProvider.java\n\n@@ -16,7 +16,7 @@ import io.quarkus.hibernate.orm.runtime.JPAConfig;\n import io.quarkus.runtime.StartupEvent;\n \n /**\n- * This is only discovered if\n+ * This bean is added IFF MP metrics, Hibernate metrics and Hibernate statistics are all enabled\n  */\n public class HibernateMpMetricsProvider {\n     private static final String SESSION_FACTORY_TAG_NAME = \"entityManagerFactory\";\n"}}, {"oid": "896a43d7123f96ad941d11040a026d488682797f", "url": "https://github.com/quarkusio/quarkus/commit/896a43d7123f96ad941d11040a026d488682797f", "message": "Support all persistence units; remove MetricBuildItems", "committedDate": "2020-07-10T12:50:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgyOTI1MA==", "url": "https://github.com/quarkusio/quarkus/pull/10626#discussion_r452829250", "bodyText": "I think there's some sentence missing?", "author": "kenfinnigan", "createdAt": "2020-07-10T13:03:37Z", "path": "extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/metrics/HibernateMpMetricsProvider.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package io.quarkus.hibernate.orm.runtime.metrics;\n+\n+import java.util.function.ToLongFunction;\n+\n+import javax.annotation.Priority;\n+import javax.enterprise.event.Observes;\n+import javax.enterprise.inject.Instance;\n+import javax.inject.Inject;\n+\n+import org.eclipse.microprofile.metrics.*;\n+import org.eclipse.microprofile.metrics.annotation.RegistryType;\n+import org.hibernate.SessionFactory;\n+import org.hibernate.stat.Statistics;\n+\n+import io.quarkus.hibernate.orm.runtime.JPAConfig;\n+import io.quarkus.runtime.StartupEvent;\n+\n+/**\n+ * This is only discovered if", "originalCommit": "896a43d7123f96ad941d11040a026d488682797f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk4MTM5OA==", "url": "https://github.com/quarkusio/quarkus/pull/10626#discussion_r452981398", "bodyText": "woops. indeed there is.", "author": "ebullient", "createdAt": "2020-07-10T17:37:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgyOTI1MA=="}], "type": "inlineReview", "revised_code": {"commit": "ef9065df5dfa05b1411740ea9d864487d1e4c289", "chunk": "diff --git a/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/metrics/HibernateMpMetricsProvider.java b/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/metrics/HibernateMpMetricsProvider.java\nindex 866510315e..8508916345 100644\n--- a/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/metrics/HibernateMpMetricsProvider.java\n+++ b/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/metrics/HibernateMpMetricsProvider.java\n\n@@ -16,7 +16,7 @@ import io.quarkus.hibernate.orm.runtime.JPAConfig;\n import io.quarkus.runtime.StartupEvent;\n \n /**\n- * This is only discovered if\n+ * This bean is added IFF MP metrics, Hibernate metrics and Hibernate statistics are all enabled\n  */\n public class HibernateMpMetricsProvider {\n     private static final String SESSION_FACTORY_TAG_NAME = \"entityManagerFactory\";\n"}}, {"oid": "ef9065df5dfa05b1411740ea9d864487d1e4c289", "url": "https://github.com/quarkusio/quarkus/commit/ef9065df5dfa05b1411740ea9d864487d1e4c289", "message": "Support all persistence units; remove MetricBuildItems", "committedDate": "2020-07-13T17:05:50Z", "type": "forcePushed"}, {"oid": "135723086419b42221bf5afb7a7c7b4ea44b2e94", "url": "https://github.com/quarkusio/quarkus/commit/135723086419b42221bf5afb7a7c7b4ea44b2e94", "message": "Register metrics w/ runtime recorder", "committedDate": "2020-07-15T16:59:02Z", "type": "forcePushed"}, {"oid": "349ba936813ce56828c20e15b964e7e50e42dc47", "url": "https://github.com/quarkusio/quarkus/commit/349ba936813ce56828c20e15b964e7e50e42dc47", "message": "Register metrics w/ runtime recorder", "committedDate": "2020-07-15T18:08:47Z", "type": "forcePushed"}, {"oid": "817fd23ebc14915561ca0f0705c12764ee12ff83", "url": "https://github.com/quarkusio/quarkus/commit/817fd23ebc14915561ca0f0705c12764ee12ff83", "message": "Remove MetricBuildItem from hibernate-orm", "committedDate": "2020-07-16T13:25:41Z", "type": "forcePushed"}, {"oid": "581e53fa9dba29d8678a00c3db60c0193a3ca852", "url": "https://github.com/quarkusio/quarkus/commit/581e53fa9dba29d8678a00c3db60c0193a3ca852", "message": "Remove MetricBuildItem from agroal", "committedDate": "2020-07-16T20:35:04Z", "type": "forcePushed"}, {"oid": "021161695e44c2863214356a144998bf14666f61", "url": "https://github.com/quarkusio/quarkus/commit/021161695e44c2863214356a144998bf14666f61", "message": "Remove MetricBuildItem from agroal", "committedDate": "2020-07-16T23:23:29Z", "type": "forcePushed"}, {"oid": "e495e901fe00e677b66b39605bdd3c137ded21ba", "url": "https://github.com/quarkusio/quarkus/commit/e495e901fe00e677b66b39605bdd3c137ded21ba", "message": "Remove MetricBuildItem from agroal", "committedDate": "2020-07-17T15:23:19Z", "type": "forcePushed"}, {"oid": "1708e4a7207f36dd2122ddcf5738f420af41a6b3", "url": "https://github.com/quarkusio/quarkus/commit/1708e4a7207f36dd2122ddcf5738f420af41a6b3", "message": "Remove MetricBuildItem from agroal", "committedDate": "2020-07-17T16:53:56Z", "type": "forcePushed"}, {"oid": "daffce8cce9729b6d446df401172fd9223ae680d", "url": "https://github.com/quarkusio/quarkus/commit/daffce8cce9729b6d446df401172fd9223ae680d", "message": "Remove MetricBuildItem from agroal", "committedDate": "2020-07-17T16:57:46Z", "type": "forcePushed"}, {"oid": "1c8c1d24c35a41f2ec4ddffcfb865e6ad89cf020", "url": "https://github.com/quarkusio/quarkus/commit/1c8c1d24c35a41f2ec4ddffcfb865e6ad89cf020", "message": "Remove MetricBuildItem from agroal", "committedDate": "2020-07-17T17:04:21Z", "type": "forcePushed"}, {"oid": "81bfcf1727b6cff377c22c14c931c6d4907d1539", "url": "https://github.com/quarkusio/quarkus/commit/81bfcf1727b6cff377c22c14c931c6d4907d1539", "message": "Remove MetricBuildItem from agroal", "committedDate": "2020-07-17T17:08:30Z", "type": "forcePushed"}, {"oid": "286ec65e370cf459ac1779d1c191c5418d8c00f7", "url": "https://github.com/quarkusio/quarkus/commit/286ec65e370cf459ac1779d1c191c5418d8c00f7", "message": "Remove MetricBuildItem from agroal", "committedDate": "2020-07-17T17:49:19Z", "type": "forcePushed"}, {"oid": "961634874715f99d148cb8c44c0227af19182f05", "url": "https://github.com/quarkusio/quarkus/commit/961634874715f99d148cb8c44c0227af19182f05", "message": "Remove MetricBuildItem from agroal", "committedDate": "2020-07-17T17:50:15Z", "type": "forcePushed"}, {"oid": "ca19ae206072f546a93a88529595040b206b4da9", "url": "https://github.com/quarkusio/quarkus/commit/ca19ae206072f546a93a88529595040b206b4da9", "message": "Remove MetricBuildItem from agroal", "committedDate": "2020-07-17T17:58:15Z", "type": "forcePushed"}, {"oid": "0e4734f887aeda7553e26590eb36e30edd9b3a59", "url": "https://github.com/quarkusio/quarkus/commit/0e4734f887aeda7553e26590eb36e30edd9b3a59", "message": "Remove MetricBuildItem from agroal", "committedDate": "2020-07-17T17:58:35Z", "type": "forcePushed"}, {"oid": "1b01cebe4d4723f0f5eb957f7742f8269a0af979", "url": "https://github.com/quarkusio/quarkus/commit/1b01cebe4d4723f0f5eb957f7742f8269a0af979", "message": "Remove MetricBuildItem from agroal", "committedDate": "2020-07-17T18:01:18Z", "type": "forcePushed"}, {"oid": "d187ace389f50b9d296cc9b01a1476dfbf21ceb4", "url": "https://github.com/quarkusio/quarkus/commit/d187ace389f50b9d296cc9b01a1476dfbf21ceb4", "message": "Remove MetricBuildItem from agroal", "committedDate": "2020-07-17T18:02:42Z", "type": "forcePushed"}, {"oid": "a096c5c6b6045c11a8bafa9f0fdbe7a18b8e2b7b", "url": "https://github.com/quarkusio/quarkus/commit/a096c5c6b6045c11a8bafa9f0fdbe7a18b8e2b7b", "message": "Remove MetricBuildItem from agroal", "committedDate": "2020-07-17T19:13:40Z", "type": "forcePushed"}, {"oid": "b7fc6ee2e841dbbea6b996d68f3657da27e94be2", "url": "https://github.com/quarkusio/quarkus/commit/b7fc6ee2e841dbbea6b996d68f3657da27e94be2", "message": "Remove MetricBuildItem from agroal", "committedDate": "2020-07-17T19:34:38Z", "type": "forcePushed"}, {"oid": "8dfedf12a3c0c9bc4805cd27949b16cbc9cc8e25", "url": "https://github.com/quarkusio/quarkus/commit/8dfedf12a3c0c9bc4805cd27949b16cbc9cc8e25", "message": "Remove MetricBuildItem from agroal", "committedDate": "2020-07-17T20:10:34Z", "type": "forcePushed"}, {"oid": "3773d79c12658e50e2d356b310433aea9764658f", "url": "https://github.com/quarkusio/quarkus/commit/3773d79c12658e50e2d356b310433aea9764658f", "message": "Remove MetricBuildItem from agroal", "committedDate": "2020-07-17T20:47:50Z", "type": "forcePushed"}, {"oid": "17a38c69bf5fccf78b7e1e8840b10df0b5a7e297", "url": "https://github.com/quarkusio/quarkus/commit/17a38c69bf5fccf78b7e1e8840b10df0b5a7e297", "message": "Remove MetricBuildItem from agroal", "committedDate": "2020-07-20T12:27:28Z", "type": "forcePushed"}, {"oid": "82b771dd2226b9bee20621cfc6b658ffff661570", "url": "https://github.com/quarkusio/quarkus/commit/82b771dd2226b9bee20621cfc6b658ffff661570", "message": "Docs: update extension guide", "committedDate": "2020-07-21T03:50:45Z", "type": "forcePushed"}, {"oid": "fa5c0d5c6c18de089f8e181e8c5fdf9b21167cc8", "url": "https://github.com/quarkusio/quarkus/commit/fa5c0d5c6c18de089f8e181e8c5fdf9b21167cc8", "message": "Docs: update extension guide", "committedDate": "2020-07-21T03:51:40Z", "type": "forcePushed"}, {"oid": "2606e7d823441c134f93af4d11554a3af699c595", "url": "https://github.com/quarkusio/quarkus/commit/2606e7d823441c134f93af4d11554a3af699c595", "message": "Docs: update extension guide", "committedDate": "2020-07-21T13:17:13Z", "type": "forcePushed"}, {"oid": "429b1add4161019fc4ef051c1015b7c00654bca8", "url": "https://github.com/quarkusio/quarkus/commit/429b1add4161019fc4ef051c1015b7c00654bca8", "message": "Docs: update extension guide", "committedDate": "2020-07-21T15:00:36Z", "type": "forcePushed"}, {"oid": "1b7eb790196bc14dc68985dc5b5666f9ad10ff50", "url": "https://github.com/quarkusio/quarkus/commit/1b7eb790196bc14dc68985dc5b5666f9ad10ff50", "message": "Docs: update extension guide", "committedDate": "2020-07-21T15:31:22Z", "type": "forcePushed"}, {"oid": "9587033c14746a322d934066312c4e0e55bc4205", "url": "https://github.com/quarkusio/quarkus/commit/9587033c14746a322d934066312c4e0e55bc4205", "message": "Docs: update extension guide", "committedDate": "2020-07-21T17:00:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU3NDM3NA==", "url": "https://github.com/quarkusio/quarkus/pull/10626#discussion_r458574374", "bodyText": "incorrect description on this one", "author": "jmartisk", "createdAt": "2020-07-22T06:55:53Z", "path": "core/runtime/src/main/java/io/quarkus/runtime/metrics/MetricsFactory.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package io.quarkus.runtime.metrics;\n+\n+import java.time.Duration;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Supplier;\n+import java.util.function.ToDoubleFunction;\n+\n+/**\n+ * Extensions can create or register metrics using this factory\n+ * independent of the enabled metrics provider\n+ */\n+public interface MetricsFactory {\n+\n+    /** A well-known string for MicroProfile metrics provided by the SmallRye Metrics quarkus extension */\n+    final String MP_METRICS = \"smallrye-metrics\";\n+\n+    /** A well-known string for MicroProfile metrics provided by the SmallRye Metrics quarkus extension */", "originalCommit": "9587033c14746a322d934066312c4e0e55bc4205", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ccc6e04c765c3f6c5181559e2d46c2b489f2403c", "chunk": "diff --git a/core/runtime/src/main/java/io/quarkus/runtime/metrics/MetricsFactory.java b/core/runtime/src/main/java/io/quarkus/runtime/metrics/MetricsFactory.java\nindex 91fb6b89c1..c51b00e96b 100644\n--- a/core/runtime/src/main/java/io/quarkus/runtime/metrics/MetricsFactory.java\n+++ b/core/runtime/src/main/java/io/quarkus/runtime/metrics/MetricsFactory.java\n\n@@ -15,9 +15,16 @@ public interface MetricsFactory {\n     /** A well-known string for MicroProfile metrics provided by the SmallRye Metrics quarkus extension */\n     final String MP_METRICS = \"smallrye-metrics\";\n \n-    /** A well-known string for MicroProfile metrics provided by the SmallRye Metrics quarkus extension */\n+    /** A well-known string for Micrometer metrics provided by the Micrometer Metrics quarkus extension */\n     final String MICROMETER = \"micrometer\";\n \n+    /** Registry type or scope. This may not be used by all metrics extensions. */\n+    public static enum Type {\n+        APPLICATION,\n+        BASE,\n+        VENDOR;\n+    }\n+\n     /**\n      * @return true if this factory supports the named metrics system. Arbitrary\n      *         strings are allowed. Constants are present for a few.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU3ODU0NQ==", "url": "https://github.com/quarkusio/quarkus/pull/10626#discussion_r458578545", "bodyText": "Some metrics created by extensions go to BASE, so this needs to be a changeable", "author": "jmartisk", "createdAt": "2020-07-22T07:05:06Z", "path": "extensions/smallrye-metrics/runtime/src/main/java/io/quarkus/smallrye/metrics/runtime/SmallRyeMetricsFactory.java", "diffHunk": "@@ -0,0 +1,203 @@\n+package io.quarkus.smallrye.metrics.runtime;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Supplier;\n+import java.util.function.ToDoubleFunction;\n+\n+import org.eclipse.microprofile.metrics.Counter;\n+import org.eclipse.microprofile.metrics.Gauge;\n+import org.eclipse.microprofile.metrics.MetricRegistry;\n+import org.eclipse.microprofile.metrics.MetricType;\n+import org.eclipse.microprofile.metrics.Tag;\n+import org.eclipse.microprofile.metrics.Timer;\n+\n+import io.quarkus.runtime.metrics.MetricsFactory;\n+import io.smallrye.metrics.MetricRegistries;\n+\n+public class SmallRyeMetricsFactory implements MetricsFactory {\n+    MetricRegistry registry = MetricRegistries.get(MetricRegistry.Type.VENDOR);", "originalCommit": "9587033c14746a322d934066312c4e0e55bc4205", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODcxOTk4Mw==", "url": "https://github.com/quarkusio/quarkus/pull/10626#discussion_r458719983", "bodyText": "this is hard to translate as the notion of base or vendor doesn't apply.. but I will note it as optional/ignored in some contexts", "author": "ebullient", "createdAt": "2020-07-22T11:21:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU3ODU0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODczODg2NQ==", "url": "https://github.com/quarkusio/quarkus/pull/10626#discussion_r458738865", "bodyText": "This is smallrye-specific so here this notion does apply (at least for the time being), doesn't it? Could we make the registry type a field of this class and set it by a constructor parameter?", "author": "jmartisk", "createdAt": "2020-07-22T11:59:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU3ODU0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc0Mzg4Mw==", "url": "https://github.com/quarkusio/quarkus/pull/10626#discussion_r458743883", "bodyText": "Yes, this is what I was thinking. Would be a simple enum on this interface, rather than pulling in MP Metrics API.", "author": "ebullient", "createdAt": "2020-07-22T12:09:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU3ODU0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "ccc6e04c765c3f6c5181559e2d46c2b489f2403c", "chunk": "diff --git a/extensions/smallrye-metrics/runtime/src/main/java/io/quarkus/smallrye/metrics/runtime/SmallRyeMetricsFactory.java b/extensions/smallrye-metrics/runtime/src/main/java/io/quarkus/smallrye/metrics/runtime/SmallRyeMetricsFactory.java\nindex 350d123aac..eefc1e3036 100644\n--- a/extensions/smallrye-metrics/runtime/src/main/java/io/quarkus/smallrye/metrics/runtime/SmallRyeMetricsFactory.java\n+++ b/extensions/smallrye-metrics/runtime/src/main/java/io/quarkus/smallrye/metrics/runtime/SmallRyeMetricsFactory.java\n\n@@ -18,23 +18,33 @@ import io.quarkus.runtime.metrics.MetricsFactory;\n import io.smallrye.metrics.MetricRegistries;\n \n public class SmallRyeMetricsFactory implements MetricsFactory {\n-    MetricRegistry registry = MetricRegistries.get(MetricRegistry.Type.VENDOR);\n-\n     public boolean metricsSystemSupported(String name) {\n         return MetricsFactory.MP_METRICS.equals(name);\n     }\n \n     @Override\n-    public MetricBuilder builder(String name) {\n-        return new SmallRyeMetricBuilder(name);\n+    public MetricBuilder builder(String name, MetricsFactory.Type type) {\n+        return new SmallRyeMetricBuilder(name, type);\n     }\n \n     class SmallRyeMetricBuilder implements MetricsFactory.MetricBuilder {\n-\n-        org.eclipse.microprofile.metrics.MetadataBuilder builder;\n+        final MetricRegistry registry;\n+        final org.eclipse.microprofile.metrics.MetadataBuilder builder;\n         List<Tag> tags = new ArrayList<>();\n \n-        SmallRyeMetricBuilder(String name) {\n+        SmallRyeMetricBuilder(String name, MetricsFactory.Type type) {\n+            switch (type) {\n+                case APPLICATION:\n+                    registry = MetricRegistries.get(MetricRegistry.Type.APPLICATION);\n+                    break;\n+                case BASE:\n+                    registry = MetricRegistries.get(MetricRegistry.Type.BASE);\n+                    break;\n+                default:\n+                case VENDOR:\n+                    registry = MetricRegistries.get(MetricRegistry.Type.VENDOR);\n+                    break;\n+            }\n             builder = org.eclipse.microprofile.metrics.Metadata.builder()\n                     .withName(name);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU4NDc4MQ==", "url": "https://github.com/quarkusio/quarkus/pull/10626#discussion_r458584781", "bodyText": "What if an extension needs to create a counter that will be updated via calls to inc() rather than be a supplier or function? I guess we need a counter() function here without parameters that just registers  a plain counter", "author": "jmartisk", "createdAt": "2020-07-22T07:18:27Z", "path": "core/runtime/src/main/java/io/quarkus/runtime/metrics/MetricsFactory.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package io.quarkus.runtime.metrics;\n+\n+import java.time.Duration;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Supplier;\n+import java.util.function.ToDoubleFunction;\n+\n+/**\n+ * Extensions can create or register metrics using this factory\n+ * independent of the enabled metrics provider\n+ */\n+public interface MetricsFactory {\n+\n+    /** A well-known string for MicroProfile metrics provided by the SmallRye Metrics quarkus extension */\n+    final String MP_METRICS = \"smallrye-metrics\";\n+\n+    /** A well-known string for MicroProfile metrics provided by the SmallRye Metrics quarkus extension */\n+    final String MICROMETER = \"micrometer\";\n+\n+    /**\n+     * @return true if this factory supports the named metrics system. Arbitrary\n+     *         strings are allowed. Constants are present for a few.\n+     * @see #MICROMETER\n+     * @see #MP_METRICS\n+     */\n+    boolean metricsSystemSupported(String name);\n+\n+    /** Create a fluid builder for registering counters and gauges */\n+    MetricBuilder builder(String name);\n+\n+    interface MetricBuilder {\n+        /**\n+         * @param description Description text of the eventual metric (optional).\n+         * @return The builder with added description.\n+         */\n+        MetricBuilder description(String description);\n+\n+        /**\n+         * @param key The tag key.\n+         * @param value The tag value.\n+         * @return The builder with added tag.\n+         */\n+        MetricBuilder tag(String key, String value);\n+\n+        /**\n+         * Specify the metric unit (optional)\n+         * \n+         * @param unit Base unit of the eventual metric\n+         * @return The builder with added base unit.\n+         */\n+        MetricBuilder unit(String unit);\n+\n+        /**\n+         * Register a counter that retrieves its value from a supplier function\n+         * \n+         * @param countFunction Function supplying a monotonically increasing number value\n+         */\n+        void counter(Supplier<Number> countFunction);", "originalCommit": "9587033c14746a322d934066312c4e0e55bc4205", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODcyMDgxOQ==", "url": "https://github.com/quarkusio/quarkus/pull/10626#discussion_r458720819", "bodyText": "my intent was to use supplier or ToDoubleFunction always via the shared API. IMO, it is a best practice for reusable libraries anyway.", "author": "ebullient", "createdAt": "2020-07-22T11:22:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU4NDc4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODczOTkwMw==", "url": "https://github.com/quarkusio/quarkus/pull/10626#discussion_r458739903", "bodyText": "Well, but it would force some libraries to make significant changes, because they work by calling inc() and don't create any state objects for their counters.", "author": "jmartisk", "createdAt": "2020-07-22T12:01:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU4NDc4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc0MjY1NA==", "url": "https://github.com/quarkusio/quarkus/pull/10626#discussion_r458742654", "bodyText": "I am going to go find out how common that is. So far, it isn't very. And yes, this is on me to achieve. The goal of this common facade is to make that transition easier... but the model here is what Hibernate, Agroal, and Vert.x use..\nCreating any kind of additional Counter interface introduces a lot of wrapper items (which is essentially what the Counter type is.. it just isn't managed by the library.\nMP Metrics, FWIW, uses long values with inc() for counters, while Micrometer uses double values with increment(). This is why a simple \"counter\" interface isn't as simple as it sounds. A MeterBinder pattern works best to cover this case (using metricsSystemSupported method to do something more advanced/native/specific).\nIn the case of http (for example), I'm doing something native to micrometer for tracking http/eventbus/... metrics within the micrometer extension. I imagine the MP Metrics extension will do the same, and I think (for that case) it is the wiser thing to do. For Micrometer, there are existing MeterBinders that can be reused/pulled in (still @ bytecode recording time), and I prefer to reuse those where we can (this is where metricsSystemSupported can be used for deferred imports to ensure optional/compile-only dependencies.", "author": "ebullient", "createdAt": "2020-07-22T12:06:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU4NDc4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "ccc6e04c765c3f6c5181559e2d46c2b489f2403c", "chunk": "diff --git a/core/runtime/src/main/java/io/quarkus/runtime/metrics/MetricsFactory.java b/core/runtime/src/main/java/io/quarkus/runtime/metrics/MetricsFactory.java\nindex 91fb6b89c1..c51b00e96b 100644\n--- a/core/runtime/src/main/java/io/quarkus/runtime/metrics/MetricsFactory.java\n+++ b/core/runtime/src/main/java/io/quarkus/runtime/metrics/MetricsFactory.java\n\n@@ -15,9 +15,16 @@ public interface MetricsFactory {\n     /** A well-known string for MicroProfile metrics provided by the SmallRye Metrics quarkus extension */\n     final String MP_METRICS = \"smallrye-metrics\";\n \n-    /** A well-known string for MicroProfile metrics provided by the SmallRye Metrics quarkus extension */\n+    /** A well-known string for Micrometer metrics provided by the Micrometer Metrics quarkus extension */\n     final String MICROMETER = \"micrometer\";\n \n+    /** Registry type or scope. This may not be used by all metrics extensions. */\n+    public static enum Type {\n+        APPLICATION,\n+        BASE,\n+        VENDOR;\n+    }\n+\n     /**\n      * @return true if this factory supports the named metrics system. Arbitrary\n      *         strings are allowed. Constants are present for a few.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU5Mzc4Mw==", "url": "https://github.com/quarkusio/quarkus/pull/10626#discussion_r458593783", "bodyText": "I find it a bit odd when something called *Builder doesn't have any build() method to be called last, but it seems it would be quite hard to add one here because we build distinct types of objects. Just thinking, would it help if we renamed the counter, gauge, etc. methods to buildCounter, buildGauge?", "author": "jmartisk", "createdAt": "2020-07-22T07:35:18Z", "path": "core/runtime/src/main/java/io/quarkus/runtime/metrics/MetricsFactory.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package io.quarkus.runtime.metrics;\n+\n+import java.time.Duration;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Supplier;\n+import java.util.function.ToDoubleFunction;\n+\n+/**\n+ * Extensions can create or register metrics using this factory\n+ * independent of the enabled metrics provider\n+ */\n+public interface MetricsFactory {\n+\n+    /** A well-known string for MicroProfile metrics provided by the SmallRye Metrics quarkus extension */\n+    final String MP_METRICS = \"smallrye-metrics\";\n+\n+    /** A well-known string for MicroProfile metrics provided by the SmallRye Metrics quarkus extension */\n+    final String MICROMETER = \"micrometer\";\n+\n+    /**\n+     * @return true if this factory supports the named metrics system. Arbitrary\n+     *         strings are allowed. Constants are present for a few.\n+     * @see #MICROMETER\n+     * @see #MP_METRICS\n+     */\n+    boolean metricsSystemSupported(String name);\n+\n+    /** Create a fluid builder for registering counters and gauges */\n+    MetricBuilder builder(String name);\n+\n+    interface MetricBuilder {", "originalCommit": "9587033c14746a322d934066312c4e0e55bc4205", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc0OTgyMA==", "url": "https://github.com/quarkusio/quarkus/pull/10626#discussion_r458749820", "bodyText": "Naming things is hard. ;)\nWill make some changes and see what you think.", "author": "ebullient", "createdAt": "2020-07-22T12:20:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU5Mzc4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "ccc6e04c765c3f6c5181559e2d46c2b489f2403c", "chunk": "diff --git a/core/runtime/src/main/java/io/quarkus/runtime/metrics/MetricsFactory.java b/core/runtime/src/main/java/io/quarkus/runtime/metrics/MetricsFactory.java\nindex 91fb6b89c1..c51b00e96b 100644\n--- a/core/runtime/src/main/java/io/quarkus/runtime/metrics/MetricsFactory.java\n+++ b/core/runtime/src/main/java/io/quarkus/runtime/metrics/MetricsFactory.java\n\n@@ -15,9 +15,16 @@ public interface MetricsFactory {\n     /** A well-known string for MicroProfile metrics provided by the SmallRye Metrics quarkus extension */\n     final String MP_METRICS = \"smallrye-metrics\";\n \n-    /** A well-known string for MicroProfile metrics provided by the SmallRye Metrics quarkus extension */\n+    /** A well-known string for Micrometer metrics provided by the Micrometer Metrics quarkus extension */\n     final String MICROMETER = \"micrometer\";\n \n+    /** Registry type or scope. This may not be used by all metrics extensions. */\n+    public static enum Type {\n+        APPLICATION,\n+        BASE,\n+        VENDOR;\n+    }\n+\n     /**\n      * @return true if this factory supports the named metrics system. Arbitrary\n      *         strings are allowed. Constants are present for a few.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYyNjk4Mg==", "url": "https://github.com/quarkusio/quarkus/pull/10626#discussion_r458626982", "bodyText": "\u26d4", "author": "jmartisk", "createdAt": "2020-07-22T08:32:32Z", "path": "core/runtime/src/main/java/io/quarkus/runtime/metrics/MetricsFactory.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package io.quarkus.runtime.metrics;\n+\n+import java.time.Duration;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Supplier;\n+import java.util.function.ToDoubleFunction;\n+\n+/**\n+ * Extensions can create or register metrics using this factory\n+ * independent of the enabled metrics provider\n+ */\n+public interface MetricsFactory {\n+\n+    /** A well-known string for MicroProfile metrics provided by the SmallRye Metrics quarkus extension */\n+    final String MP_METRICS = \"smallrye-metrics\";\n+\n+    /** A well-known string for MicroProfile metrics provided by the SmallRye Metrics quarkus extension */\n+    final String MICROMETER = \"micrometer\";\n+\n+    /**\n+     * @return true if this factory supports the named metrics system. Arbitrary\n+     *         strings are allowed. Constants are present for a few.\n+     * @see #MICROMETER\n+     * @see #MP_METRICS\n+     */\n+    boolean metricsSystemSupported(String name);\n+\n+    /** Create a fluid builder for registering counters and gauges */\n+    MetricBuilder builder(String name);\n+\n+    interface MetricBuilder {\n+        /**\n+         * @param description Description text of the eventual metric (optional).\n+         * @return The builder with added description.\n+         */\n+        MetricBuilder description(String description);\n+\n+        /**\n+         * @param key The tag key.\n+         * @param value The tag value.\n+         * @return The builder with added tag.\n+         */\n+        MetricBuilder tag(String key, String value);\n+\n+        /**\n+         * Specify the metric unit (optional)\n+         * \n+         * @param unit Base unit of the eventual metric\n+         * @return The builder with added base unit.\n+         */\n+        MetricBuilder unit(String unit);\n+\n+        /**\n+         * Register a counter that retrieves its value from a supplier function\n+         * \n+         * @param countFunction Function supplying a monotonically increasing number value\n+         */\n+        void counter(Supplier<Number> countFunction);\n+\n+        /**\n+         * Register a counter that retrieves its value by the applying a function\n+         * to an object\n+         * \n+         * @param obj Object instance to observe\n+         * @param countFunction Function returning a monotonically increasing double value\n+         */\n+        <S> void counter(S obj, ToDoubleFunction<S> countFunction);\n+\n+        /**\n+         * Register a gauge that retrieves its value from a supplier function\n+         * \n+         * @param gaugeFunction Function supplying number value\n+         */\n+        void gauge(Supplier<Number> gaugeFunction);\n+\n+        /**\n+         * Register a gauge that retrieves its value by applying a function\n+         * to an object\n+         * \n+         * @param obj Object instance to observe\n+         * @param gaugeFunction Function returning a long value\n+         */\n+        <S> void gauge(S obj, ToDoubleFunction<S> gaugeFunction);\n+\n+        /**\n+         * @return TimeRecorder to measure passage of time using\n+         *         incremental updates.\n+         */\n+        TimeRecorder timeRecorder();\n+\n+        /**\n+         * Wrap a {@link Runnable} so that it is timed when invoked.\n+         *\n+         * @param f The Runnable to time when it is invoked.\n+         * @return The wrapped Runnable.\n+         */\n+        Runnable timed(Runnable f);\n+\n+        /**\n+         * Wrap a {@link Callable} so that it is timed when invoked.\n+         *\n+         * @param f The Callable to time when it is invoked.\n+         * @param <T> The return type of the callable.\n+         * @return The wrapped callable.\n+         */\n+        <T> Callable<T> timed(Callable<T> f);\n+\n+        /**\n+         * Wrap a {@link Supplier} so that it is timed when invoked.\n+         *\n+         * @param f The {@code Supplier} to time when it is invoked.\n+         * @param <T> The return type of the {@code Supplier} result.\n+         * @return The wrapped supplier.\n+         * @since 1.2.0", "originalCommit": "9587033c14746a322d934066312c4e0e55bc4205", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYzMjAwMw==", "url": "https://github.com/quarkusio/quarkus/pull/10626#discussion_r458632003", "bodyText": "Better avoid emoji comments for reviews as the intent might not be clear :). And if you get a question about it, it's not going to be a win.", "author": "gsmet", "createdAt": "2020-07-22T08:40:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYyNjk4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY1NjQwMQ==", "url": "https://github.com/quarkusio/quarkus/pull/10626#discussion_r458656401", "bodyText": "Right. Also I'm not sure what you mean @jmartisk ? suggesting that the since attribute should be removed?", "author": "Sanne", "createdAt": "2020-07-22T09:21:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYyNjk4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY4MTU1OA==", "url": "https://github.com/quarkusio/quarkus/pull/10626#discussion_r458681558", "bodyText": "Ok, noted. I'm saying that this is clearly not since Quarkus 1.2.0, so either the version number should be corrected, or the attribute removed :)", "author": "jmartisk", "createdAt": "2020-07-22T10:04:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYyNjk4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc0MTgyNQ==", "url": "https://github.com/quarkusio/quarkus/pull/10626#discussion_r458741825", "bodyText": "HA! Yes. I can remove that. Thanks for asking for emoji clarity @gsmet and @Sanne =)", "author": "ebullient", "createdAt": "2020-07-22T12:05:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYyNjk4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "ccc6e04c765c3f6c5181559e2d46c2b489f2403c", "chunk": "diff --git a/core/runtime/src/main/java/io/quarkus/runtime/metrics/MetricsFactory.java b/core/runtime/src/main/java/io/quarkus/runtime/metrics/MetricsFactory.java\nindex 91fb6b89c1..c51b00e96b 100644\n--- a/core/runtime/src/main/java/io/quarkus/runtime/metrics/MetricsFactory.java\n+++ b/core/runtime/src/main/java/io/quarkus/runtime/metrics/MetricsFactory.java\n\n@@ -15,9 +15,16 @@ public interface MetricsFactory {\n     /** A well-known string for MicroProfile metrics provided by the SmallRye Metrics quarkus extension */\n     final String MP_METRICS = \"smallrye-metrics\";\n \n-    /** A well-known string for MicroProfile metrics provided by the SmallRye Metrics quarkus extension */\n+    /** A well-known string for Micrometer metrics provided by the Micrometer Metrics quarkus extension */\n     final String MICROMETER = \"micrometer\";\n \n+    /** Registry type or scope. This may not be used by all metrics extensions. */\n+    public static enum Type {\n+        APPLICATION,\n+        BASE,\n+        VENDOR;\n+    }\n+\n     /**\n      * @return true if this factory supports the named metrics system. Arbitrary\n      *         strings are allowed. Constants are present for a few.\n"}}, {"oid": "ccc6e04c765c3f6c5181559e2d46c2b489f2403c", "url": "https://github.com/quarkusio/quarkus/commit/ccc6e04c765c3f6c5181559e2d46c2b489f2403c", "message": "Docs: update extension guide", "committedDate": "2020-07-22T13:10:45Z", "type": "forcePushed"}, {"oid": "312e63a4b4360f5bbfe298caeeac4fcb06a9fe6b", "url": "https://github.com/quarkusio/quarkus/commit/312e63a4b4360f5bbfe298caeeac4fcb06a9fe6b", "message": "Docs: update extension guide", "committedDate": "2020-07-22T13:29:27Z", "type": "forcePushed"}, {"oid": "9e99f7b3104223eb7a780deea4d5e972dfbb05b2", "url": "https://github.com/quarkusio/quarkus/commit/9e99f7b3104223eb7a780deea4d5e972dfbb05b2", "message": "simplify consumer init", "committedDate": "2020-07-22T14:25:34Z", "type": "forcePushed"}, {"oid": "312e63a4b4360f5bbfe298caeeac4fcb06a9fe6b", "url": "https://github.com/quarkusio/quarkus/commit/312e63a4b4360f5bbfe298caeeac4fcb06a9fe6b", "message": "Docs: update extension guide", "committedDate": "2020-07-22T13:29:27Z", "type": "forcePushed"}, {"oid": "315f616c9b441486302f85f2942984fe2350093b", "url": "https://github.com/quarkusio/quarkus/commit/315f616c9b441486302f85f2942984fe2350093b", "message": "Docs: update extension guide", "committedDate": "2020-07-22T15:47:46Z", "type": "forcePushed"}, {"oid": "8c334972c7da05614b7341e6370c0fbae091fda9", "url": "https://github.com/quarkusio/quarkus/commit/8c334972c7da05614b7341e6370c0fbae091fda9", "message": "Docs: update extension guide", "committedDate": "2020-07-22T19:49:31Z", "type": "forcePushed"}, {"oid": "f99ae0b657ceff5e9d8df347d6bd668eb88699b0", "url": "https://github.com/quarkusio/quarkus/commit/f99ae0b657ceff5e9d8df347d6bd668eb88699b0", "message": "Docs: update extension guide", "committedDate": "2020-07-22T20:21:43Z", "type": "forcePushed"}, {"oid": "4666b60fac97aaf564d3aa213506e4a8e3cd890d", "url": "https://github.com/quarkusio/quarkus/commit/4666b60fac97aaf564d3aa213506e4a8e3cd890d", "message": "Docs: update extension guide", "committedDate": "2020-07-22T21:22:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQxMDkzMg==", "url": "https://github.com/quarkusio/quarkus/pull/10626#discussion_r459410932", "bodyText": "Does it need a new factory for each consumer, or because each consumer creates a new builder from the factory, the factory can be the same?", "author": "kenfinnigan", "createdAt": "2020-07-23T12:28:20Z", "path": "extensions/smallrye-metrics/runtime/src/main/java/io/quarkus/smallrye/metrics/runtime/SmallRyeMetricsRecorder.java", "diffHunk": "@@ -209,6 +211,11 @@ public void registerMetric(MetricRegistry.Type scope,\n         }\n     }\n \n+    public void registerMetrics(Consumer<MetricsFactory> consumer) {\n+        SmallRyeMetricsFactory factory = new SmallRyeMetricsFactory();", "originalCommit": "4666b60fac97aaf564d3aa213506e4a8e3cd890d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cb2dc0b8ebb071a14e9da6cfcbd6e1fd487751c6", "chunk": "diff --git a/extensions/smallrye-metrics/runtime/src/main/java/io/quarkus/smallrye/metrics/runtime/SmallRyeMetricsRecorder.java b/extensions/smallrye-metrics/runtime/src/main/java/io/quarkus/smallrye/metrics/runtime/SmallRyeMetricsRecorder.java\nindex ff38d29879..e9a16c7a8b 100644\n--- a/extensions/smallrye-metrics/runtime/src/main/java/io/quarkus/smallrye/metrics/runtime/SmallRyeMetricsRecorder.java\n+++ b/extensions/smallrye-metrics/runtime/src/main/java/io/quarkus/smallrye/metrics/runtime/SmallRyeMetricsRecorder.java\n\n@@ -212,7 +214,6 @@ public class SmallRyeMetricsRecorder {\n     }\n \n     public void registerMetrics(Consumer<MetricsFactory> consumer) {\n-        SmallRyeMetricsFactory factory = new SmallRyeMetricsFactory();\n         consumer.accept(factory);\n     }\n \n"}}, {"oid": "cb2dc0b8ebb071a14e9da6cfcbd6e1fd487751c6", "url": "https://github.com/quarkusio/quarkus/commit/cb2dc0b8ebb071a14e9da6cfcbd6e1fd487751c6", "message": "Docs: update extension guide", "committedDate": "2020-07-23T12:56:58Z", "type": "forcePushed"}, {"oid": "5932d186e595e403941b4b13c310dc2ab851d7b5", "url": "https://github.com/quarkusio/quarkus/commit/5932d186e595e403941b4b13c310dc2ab851d7b5", "message": "Docs: update extension guide", "committedDate": "2020-07-23T19:28:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg4MDI2OA==", "url": "https://github.com/quarkusio/quarkus/pull/10626#discussion_r459880268", "bodyText": "Why is this inside the method registerMetricsFromProducers? Metrics from producers will go away in MP Metrics 3.0 and so will this method. Perhaps this can be moved to a new method with a RUNTIME_INIT recorder?", "author": "jmartisk", "createdAt": "2020-07-24T06:52:31Z", "path": "extensions/smallrye-metrics/deployment/src/main/java/io/quarkus/smallrye/metrics/deployment/SmallRyeMetricsProcessor.java", "diffHunk": "@@ -495,6 +507,12 @@ void registerMetricsFromProducers(\n                 }\n             }\n         }\n+\n+        for (MetricsFactoryConsumerBuildItem item : metricsFactoryConsumerBuildItems) {", "originalCommit": "5932d186e595e403941b4b13c310dc2ab851d7b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEwNjI1Mw==", "url": "https://github.com/quarkusio/quarkus/pull/10626#discussion_r460106253", "bodyText": "Ah. I will rename that method -- the reason is mostly parameters (that takes place at runtime init after bean validation, which means the beans that some of the consumers will need will all be resolved (ValidationPhaseBuildItem / BeanArchiveIndexBuildItem)", "author": "ebullient", "createdAt": "2020-07-24T14:57:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg4MDI2OA=="}], "type": "inlineReview", "revised_code": {"commit": "e5a0e585e7f85568f3318adde9775df5f1c3f00e", "chunk": "diff --git a/extensions/smallrye-metrics/deployment/src/main/java/io/quarkus/smallrye/metrics/deployment/SmallRyeMetricsProcessor.java b/extensions/smallrye-metrics/deployment/src/main/java/io/quarkus/smallrye/metrics/deployment/SmallRyeMetricsProcessor.java\nindex f245ef4585..f268678ed6 100644\n--- a/extensions/smallrye-metrics/deployment/src/main/java/io/quarkus/smallrye/metrics/deployment/SmallRyeMetricsProcessor.java\n+++ b/extensions/smallrye-metrics/deployment/src/main/java/io/quarkus/smallrye/metrics/deployment/SmallRyeMetricsProcessor.java\n\n@@ -507,7 +508,6 @@ public class SmallRyeMetricsProcessor {\n                 }\n             }\n         }\n-\n         for (MetricsFactoryConsumerBuildItem item : metricsFactoryConsumerBuildItems) {\n             if (item.executionTime() == RUNTIME_INIT) {\n                 recorder.registerMetrics(item.getConsumer());\n"}}, {"oid": "13923620cb0affd397ca6b681bd9bae640da4dbf", "url": "https://github.com/quarkusio/quarkus/commit/13923620cb0affd397ca6b681bd9bae640da4dbf", "message": "Docs: update extension guide", "committedDate": "2020-07-24T13:53:37Z", "type": "forcePushed"}, {"oid": "e5a0e585e7f85568f3318adde9775df5f1c3f00e", "url": "https://github.com/quarkusio/quarkus/commit/e5a0e585e7f85568f3318adde9775df5f1c3f00e", "message": "K8s: Path from MetricsCapabilityBuildItem", "committedDate": "2020-07-24T15:11:22Z", "type": "forcePushed"}, {"oid": "cb005abaf42c6eb294e070630c5b5c15cf6912b7", "url": "https://github.com/quarkusio/quarkus/commit/cb005abaf42c6eb294e070630c5b5c15cf6912b7", "message": "K8s: Path from MetricsCapabilityBuildItem", "committedDate": "2020-07-24T22:43:33Z", "type": "forcePushed"}, {"oid": "51595cf9ba5ecebd1df978d7312c9b4c51c0d471", "url": "https://github.com/quarkusio/quarkus/commit/51595cf9ba5ecebd1df978d7312c9b4c51c0d471", "message": "K8s: Path from MetricsCapabilityBuildItem", "committedDate": "2020-07-27T13:16:18Z", "type": "forcePushed"}, {"oid": "b31ded643a6339a75565eb9c07fa12adb1dc2448", "url": "https://github.com/quarkusio/quarkus/commit/b31ded643a6339a75565eb9c07fa12adb1dc2448", "message": "K8s: Path from MetricsCapabilityBuildItem", "committedDate": "2020-07-27T19:25:02Z", "type": "forcePushed"}, {"oid": "64f63040c7068bd71276d8eafc8c6b0df3efe9ba", "url": "https://github.com/quarkusio/quarkus/commit/64f63040c7068bd71276d8eafc8c6b0df3efe9ba", "message": "K8s: Path from MetricsCapabilityBuildItem", "committedDate": "2020-07-28T13:13:21Z", "type": "forcePushed"}, {"oid": "e8d5c03f92e9d857af1aa79b9a366b1b19b7e7dd", "url": "https://github.com/quarkusio/quarkus/commit/e8d5c03f92e9d857af1aa79b9a366b1b19b7e7dd", "message": "K8s: Path from MetricsCapabilityBuildItem", "committedDate": "2020-07-28T13:22:57Z", "type": "forcePushed"}, {"oid": "d90e022f19aa3a2e90d4f7e0f21cd9b07267026a", "url": "https://github.com/quarkusio/quarkus/commit/d90e022f19aa3a2e90d4f7e0f21cd9b07267026a", "message": "core: MetricsFactory, Metrics*BuildItem\n\nMetricsFactoryConsumerBuildItem, MetricsCapabilityBuildItem", "committedDate": "2020-07-28T14:36:32Z", "type": "commit"}, {"oid": "d4469af5e0a263e20a719e4a169180568717a405", "url": "https://github.com/quarkusio/quarkus/commit/d4469af5e0a263e20a719e4a169180568717a405", "message": "hibernate-orm with MetricsFactoryConsumerBuildItem", "committedDate": "2020-07-28T14:36:32Z", "type": "commit"}, {"oid": "07948c145529be784bd2d9843b5a9c48a435a161", "url": "https://github.com/quarkusio/quarkus/commit/07948c145529be784bd2d9843b5a9c48a435a161", "message": "agroal with MetricsFactoryConsumerBuildItem", "committedDate": "2020-07-28T14:36:32Z", "type": "commit"}, {"oid": "e1b5af71a6c365c16d79d4a9ea337d38ef0340dc", "url": "https://github.com/quarkusio/quarkus/commit/e1b5af71a6c365c16d79d4a9ea337d38ef0340dc", "message": "jaeger with MetricsCapabilityBuildItem", "committedDate": "2020-07-28T14:36:32Z", "type": "commit"}, {"oid": "885bcac40340a623033d5368c7e574a4625b46a2", "url": "https://github.com/quarkusio/quarkus/commit/885bcac40340a623033d5368c7e574a4625b46a2", "message": "MongoDB with MetricsCapabilityBuildItem", "committedDate": "2020-07-28T14:36:32Z", "type": "commit"}, {"oid": "31947efbb67be4ea29d08ddafae3999027c6f5a4", "url": "https://github.com/quarkusio/quarkus/commit/31947efbb67be4ea29d08ddafae3999027c6f5a4", "message": "Docs: update extension guide", "committedDate": "2020-07-28T14:36:32Z", "type": "commit"}, {"oid": "19d65388b55f01ddd9ec33cb59b731410a3b5a63", "url": "https://github.com/quarkusio/quarkus/commit/19d65388b55f01ddd9ec33cb59b731410a3b5a63", "message": "K8s: Path from MetricsCapabilityBuildItem", "committedDate": "2020-07-28T14:36:32Z", "type": "commit"}, {"oid": "19d65388b55f01ddd9ec33cb59b731410a3b5a63", "url": "https://github.com/quarkusio/quarkus/commit/19d65388b55f01ddd9ec33cb59b731410a3b5a63", "message": "K8s: Path from MetricsCapabilityBuildItem", "committedDate": "2020-07-28T14:36:32Z", "type": "forcePushed"}]}