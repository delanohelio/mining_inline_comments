{"pr_number": 8116, "pr_title": "Liquibase - Record service classes implementation instead of  generating a native resource file for each service interface", "pr_createdAt": "2020-03-24T17:36:05Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/8116", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU4NTYwNg==", "url": "https://github.com/quarkusio/quarkus/pull/8116#discussion_r397585606", "bodyText": "Should we care about the order here (LinkedHashMap) ?", "author": "gastaldi", "createdAt": "2020-03-25T03:11:01Z", "path": "extensions/liquibase/deployment/src/main/java/io/quarkus/liquibase/LiquibaseProcessor.java", "diffHunk": "@@ -96,6 +97,7 @@ void nativeImageConfiguration(\n                 liquibase.sql.visitor.SqlVisitor.class);\n \n         // load the liquibase services\n+        Map<String, List<String>> serviceClassesImplementationRegistry = new HashMap<>();", "originalCommit": "0ef1b61ca278273628d43f4afbfd3a96337cc739", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU4NTg1MA==", "url": "https://github.com/quarkusio/quarkus/pull/8116#discussion_r397585850", "bodyText": "Should we care about the order here (LinkedHashMap) ?\n\nProbably yes, to avoid uncertainty while loading all services, WDYT?", "author": "gastaldi", "createdAt": "2020-03-25T03:12:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU4NTYwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY3Njk4OA==", "url": "https://github.com/quarkusio/quarkus/pull/8116#discussion_r397676988", "bodyText": "Should we care about the order here (LinkedHashMap) ?\n\nProbably yes, to avoid uncertainty while loading all services, WDYT?\n\nI do not think so. I think we just need a lookup table here, order is irrelevant. What uncertainty are you thinking of?", "author": "machi1990", "createdAt": "2020-03-25T08:25:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU4NTYwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc0NTM3Mw==", "url": "https://github.com/quarkusio/quarkus/pull/8116#discussion_r397745373", "bodyText": "Ah nevermind, I thought you were iterating entries. I should stop reviewing code late at night \ud83d\ude1b", "author": "gastaldi", "createdAt": "2020-03-25T10:21:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU4NTYwNg=="}], "type": "inlineReview", "revised_code": {"commit": "9aba6b40371bcd10d376421ee7e9db4847613ff4", "chunk": "diff --git a/extensions/liquibase/deployment/src/main/java/io/quarkus/liquibase/LiquibaseProcessor.java b/extensions/liquibase/deployment/src/main/java/io/quarkus/liquibase/LiquibaseProcessor.java\nindex 0da8565b29..08858de854 100644\n--- a/extensions/liquibase/deployment/src/main/java/io/quarkus/liquibase/LiquibaseProcessor.java\n+++ b/extensions/liquibase/deployment/src/main/java/io/quarkus/liquibase/LiquibaseProcessor.java\n\n@@ -98,8 +98,8 @@ class LiquibaseProcessor {\n \n         // load the liquibase services\n         Map<String, List<String>> serviceClassesImplementationRegistry = new HashMap<>();\n-        Stream.of(liquibase.license.LicenseService.class,\n-                liquibase.diff.compare.DatabaseObjectComparator.class,\n+\n+        Stream.of(liquibase.diff.compare.DatabaseObjectComparator.class,\n                 liquibase.parser.NamespaceDetails.class,\n                 liquibase.precondition.Precondition.class,\n                 liquibase.database.Database.class,\n"}}, {"oid": "9aba6b40371bcd10d376421ee7e9db4847613ff4", "url": "https://github.com/quarkusio/quarkus/commit/9aba6b40371bcd10d376421ee7e9db4847613ff4", "message": "refactor(liquibase): record service classes implementation instead of generating a native resource file for each service interface\n\nThis cleans up the extension processing part a little bit as we can record these info in a registry\nand do a map lookup during runtime instead of reading the generated resource file for each service\nclass", "committedDate": "2020-04-03T16:09:18Z", "type": "forcePushed"}, {"oid": "7029e5d5be03affe6c594eacc795bc023e21ce5c", "url": "https://github.com/quarkusio/quarkus/commit/7029e5d5be03affe6c594eacc795bc023e21ce5c", "message": "refactor(liquibase): record service classes implementation instead of generating a native resource file for each service interface\n\nThis cleans up the extension processing part a little bit as we can record these info in a registry\nand do a map lookup during runtime instead of reading the generated resource file for each service\nclass", "committedDate": "2020-04-08T16:02:16Z", "type": "forcePushed"}, {"oid": "074168dea8ea4107e14b9e788eca8bb3f006a50a", "url": "https://github.com/quarkusio/quarkus/commit/074168dea8ea4107e14b9e788eca8bb3f006a50a", "message": "refactor(liquibase): record service classes implementation instead of generating a native resource file for each service interface\n\nThis cleans up the extension processing part a little bit as we can record these info in a registry\nand do a map lookup during runtime instead of reading the generated resource file for each service\nclass", "committedDate": "2020-04-14T17:52:13Z", "type": "commit"}, {"oid": "074168dea8ea4107e14b9e788eca8bb3f006a50a", "url": "https://github.com/quarkusio/quarkus/commit/074168dea8ea4107e14b9e788eca8bb3f006a50a", "message": "refactor(liquibase): record service classes implementation instead of generating a native resource file for each service interface\n\nThis cleans up the extension processing part a little bit as we can record these info in a registry\nand do a map lookup during runtime instead of reading the generated resource file for each service\nclass", "committedDate": "2020-04-14T17:52:13Z", "type": "forcePushed"}]}