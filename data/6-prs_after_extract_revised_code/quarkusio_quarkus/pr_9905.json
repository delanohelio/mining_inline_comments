{"pr_number": 9905, "pr_title": "Qute - replace the map-based html escaper with simplified impl", "pr_createdAt": "2020-06-10T10:41:03Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/9905", "timeline": [{"oid": "82ccd78b5879413bd1254eafc3bda0060f76d3ab", "url": "https://github.com/quarkusio/quarkus/commit/82ccd78b5879413bd1254eafc3bda0060f76d3ab", "message": "Qute - replace the map-based html escaper with simplified impl\n\n- this result mapper is used to replace some characters for HTML/XML\ntemplates", "committedDate": "2020-06-10T10:40:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE2MDUyOA==", "url": "https://github.com/quarkusio/quarkus/pull/9905#discussion_r438160528", "bodyText": "Instead of iterating through each character, maybe it's easier to create a Regexp?", "author": "gastaldi", "createdAt": "2020-06-10T14:21:09Z", "path": "extensions/qute/runtime/src/main/java/io/quarkus/qute/runtime/HtmlEscaper.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package io.quarkus.qute.runtime;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import io.quarkus.qute.Expression;\n+import io.quarkus.qute.RawString;\n+import io.quarkus.qute.ResultMapper;\n+import io.quarkus.qute.TemplateNode.Origin;\n+import io.quarkus.qute.Variant;\n+\n+class HtmlEscaper implements ResultMapper {\n+\n+    @Override\n+    public boolean appliesTo(Origin origin, Object result) {\n+        if (result instanceof RawString) {\n+            return false;\n+        }\n+        Optional<Variant> variant = origin.getVariant();\n+        if (variant.isPresent()) {\n+            return requiresDefaultEscaping(variant.get());\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public String map(Object result, Expression expression) {\n+        return escape(result.toString());\n+    }\n+\n+    String escape(CharSequence value) {\n+        if (Objects.requireNonNull(value).length() == 0) {\n+            return value.toString();\n+        }\n+        for (int i = 0; i < value.length(); i++) {", "originalCommit": "82ccd78b5879413bd1254eafc3bda0060f76d3ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE2NTA4Ng==", "url": "https://github.com/quarkusio/quarkus/pull/9905#discussion_r438165086", "bodyText": "Or simply call String.replaceAll for each character in the switch statement \ud83d\ude03", "author": "gastaldi", "createdAt": "2020-06-10T14:27:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE2MDUyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM0MDA4OA==", "url": "https://github.com/quarkusio/quarkus/pull/9905#discussion_r438340088", "bodyText": "Hm, I think that regex is quite expensive in terms of allocations ;-).", "author": "mkouba", "createdAt": "2020-06-10T18:52:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE2MDUyOA=="}], "type": "inlineReview", "revised_code": null}]}