{"pr_number": 701, "pr_title": "CAM-11302: add support for two configuration yml files", "pr_createdAt": "2020-03-03T08:49:55Z", "pr_url": "https://github.com/camunda/camunda-bpm-platform/pull/701", "timeline": [{"oid": "6e2ca0f5ba707aad84caea598bc686cd326a01ea", "url": "https://github.com/camunda/camunda-bpm-platform/commit/6e2ca0f5ba707aad84caea598bc686cd326a01ea", "message": "feat(run): add support for two configuration yml files\n\nRelated to CAM-11302", "committedDate": "2020-03-03T08:49:14Z", "type": "commit"}, {"oid": "d21413b4dd292ef6e39f49294a1019ff7f1e8cfd", "url": "https://github.com/camunda/camunda-bpm-platform/commit/d21413b4dd292ef6e39f49294a1019ff7f1e8cfd", "message": "feat(run): add integration test for production yml\n\nRelated to CAM-11302", "committedDate": "2020-03-03T09:48:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk4MDc5Mg==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/701#discussion_r386980792", "bodyText": "Let's use java.nio.file.Files here.\nThis expects for example an InputStream as source (can be received with #getResourceAsStream from the class loader) and a Path as target (can be build easily by using java.nio.file.Paths#get).", "author": "tmetzke", "createdAt": "2020-03-03T12:16:22Z", "path": "distro/run/qa/src/test/java/org/camunda/bpm/run/qa/util/SpringBootManagedContainer.java", "diffHunk": "@@ -267,27 +270,27 @@ protected static Integer windowsProcessId(Process process) {\n     return null;\n   }\n \n-  private void createTestYml() {\n+  public void createConfigurationYml(String filePath, File source) {\n     try {\n-      File baseYml = new File(SpringBootManagedContainer.class.getClassLoader().getResource(BASE_TEST_APPLICATION_YML).getFile());\n-      File testYml = new File(new File(baseDirectory), APPLICATION_YML_PATH);\n-      Files.copy(baseYml, testYml);\n+      File testYml = new File(new File(baseDirectory), filePath);\n+      Files.copy(source, testYml);", "originalCommit": "d21413b4dd292ef6e39f49294a1019ff7f1e8cfd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7e07a9b987df1315002d1fc9c81fc09303a5eac0", "chunk": "diff --git a/distro/run/qa/src/test/java/org/camunda/bpm/run/qa/util/SpringBootManagedContainer.java b/distro/run/qa/src/test/java/org/camunda/bpm/run/qa/util/SpringBootManagedContainer.java\nindex e61d582048..edbf536484 100644\n--- a/distro/run/qa/src/test/java/org/camunda/bpm/run/qa/util/SpringBootManagedContainer.java\n+++ b/distro/run/qa/src/test/java/org/camunda/bpm/run/qa/util/SpringBootManagedContainer.java\n\n@@ -270,13 +275,15 @@ public class SpringBootManagedContainer {\n     return null;\n   }\n \n-  public void createConfigurationYml(String filePath, File source) {\n+  public void createConfigurationYml(String filePath, InputStream source) {\n     try {\n-      File testYml = new File(new File(baseDirectory), filePath);\n-      Files.copy(source, testYml);\n-      configurationFiles.add(testYml);\n+      \n+      Path testYmlPath = Paths.get(baseDirectory, filePath);\n+      \n+      Files.copy(source, testYmlPath);\n+      configurationFiles.add(testYmlPath.toFile());\n     } catch (IOException e) {\n-      log.error(\"Could not copy default.yml\", e);\n+      log.error(\"Could not create \" + filePath, e);\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk4MTE3NA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/701#discussion_r386981174", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  log.error(\"Could not copy default.yml\", e);\n          \n          \n            \n                  log.error(\"Could not create \" + filePath, e);", "author": "tmetzke", "createdAt": "2020-03-03T12:17:11Z", "path": "distro/run/qa/src/test/java/org/camunda/bpm/run/qa/util/SpringBootManagedContainer.java", "diffHunk": "@@ -267,27 +270,27 @@ protected static Integer windowsProcessId(Process process) {\n     return null;\n   }\n \n-  private void createTestYml() {\n+  public void createConfigurationYml(String filePath, File source) {\n     try {\n-      File baseYml = new File(SpringBootManagedContainer.class.getClassLoader().getResource(BASE_TEST_APPLICATION_YML).getFile());\n-      File testYml = new File(new File(baseDirectory), APPLICATION_YML_PATH);\n-      Files.copy(baseYml, testYml);\n+      File testYml = new File(new File(baseDirectory), filePath);\n+      Files.copy(source, testYml);\n+      configurationFiles.add(testYml);\n     } catch (IOException e) {\n-      log.error(\"Could not copy application.yml\", e);\n+      log.error(\"Could not copy default.yml\", e);", "originalCommit": "d21413b4dd292ef6e39f49294a1019ff7f1e8cfd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7e07a9b987df1315002d1fc9c81fc09303a5eac0", "chunk": "diff --git a/distro/run/qa/src/test/java/org/camunda/bpm/run/qa/util/SpringBootManagedContainer.java b/distro/run/qa/src/test/java/org/camunda/bpm/run/qa/util/SpringBootManagedContainer.java\nindex e61d582048..edbf536484 100644\n--- a/distro/run/qa/src/test/java/org/camunda/bpm/run/qa/util/SpringBootManagedContainer.java\n+++ b/distro/run/qa/src/test/java/org/camunda/bpm/run/qa/util/SpringBootManagedContainer.java\n\n@@ -270,13 +275,15 @@ public class SpringBootManagedContainer {\n     return null;\n   }\n \n-  public void createConfigurationYml(String filePath, File source) {\n+  public void createConfigurationYml(String filePath, InputStream source) {\n     try {\n-      File testYml = new File(new File(baseDirectory), filePath);\n-      Files.copy(source, testYml);\n-      configurationFiles.add(testYml);\n+      \n+      Path testYmlPath = Paths.get(baseDirectory, filePath);\n+      \n+      Files.copy(source, testYmlPath);\n+      configurationFiles.add(testYmlPath.toFile());\n     } catch (IOException e) {\n-      log.error(\"Could not copy default.yml\", e);\n+      log.error(\"Could not create \" + filePath, e);\n     }\n   }\n \n"}}, {"oid": "7e07a9b987df1315002d1fc9c81fc09303a5eac0", "url": "https://github.com/camunda/camunda-bpm-platform/commit/7e07a9b987df1315002d1fc9c81fc09303a5eac0", "message": "chore(run): Change YAML handling to use nio Paths\n\nRelated to CAM-11302", "committedDate": "2020-03-03T13:57:47Z", "type": "commit"}]}