{"pr_number": 614, "pr_title": "CAM-11182 I can configure the invocations per batch job by batch type", "pr_createdAt": "2020-01-08T14:40:21Z", "pr_url": "https://github.com/camunda/camunda-bpm-platform/pull/614", "timeline": [{"oid": "da947e34d13766cfd3327b3593dba876977a19b1", "url": "https://github.com/camunda/camunda-bpm-platform/commit/da947e34d13766cfd3327b3593dba876977a19b1", "message": "feat(engine): add property to set invocations per job by batch type\n\nrelated to CAM-11182", "committedDate": "2020-01-08T16:28:52Z", "type": "forcePushed"}, {"oid": "695f9875b5ebd872dcc2ca9cd92eef5d2d592821", "url": "https://github.com/camunda/camunda-bpm-platform/commit/695f9875b5ebd872dcc2ca9cd92eef5d2d592821", "message": "feat(engine): add property to set invocations per job by batch type\n\nrelated to CAM-11182", "committedDate": "2020-01-09T10:44:40Z", "type": "commit"}, {"oid": "0476d05a2733abf6c935c71a57eb3ecd8183812c", "url": "https://github.com/camunda/camunda-bpm-platform/commit/0476d05a2733abf6c935c71a57eb3ecd8183812c", "message": "fix(engine): allow to change global batch operation ttl on post init\n\n* fixes the bug that `batchOperationHistoryTimeToLive` cannot be changed\nwith an engine plugin listening on post init\n* aligns the behavior with `invocationsPerBatchJobByBatchType`\n\nrelated to CAM-11182", "committedDate": "2020-01-09T10:57:16Z", "type": "forcePushed"}, {"oid": "7f1974f6ebf22cb62322b8f33fd0317c3b361615", "url": "https://github.com/camunda/camunda-bpm-platform/commit/7f1974f6ebf22cb62322b8f33fd0317c3b361615", "message": "test(engine): restructure cleanup batch tests\n\nrelated to CAM-11182", "committedDate": "2020-01-10T07:55:47Z", "type": "forcePushed"}, {"oid": "7f1974f6ebf22cb62322b8f33fd0317c3b361615", "url": "https://github.com/camunda/camunda-bpm-platform/commit/7f1974f6ebf22cb62322b8f33fd0317c3b361615", "message": "test(engine): restructure cleanup batch tests\n\nrelated to CAM-11182", "committedDate": "2020-01-10T07:55:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY2OTk3Ng==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/614#discussion_r365669976", "bodyText": "Can we use the new ProcessEngineRule(PROCESS_ENGINE_CONFIG) here? I have the impression that this could remove the initialization from this test class.", "author": "tmetzke", "createdAt": "2020-01-13T07:32:38Z", "path": "engine/src/test/java/org/camunda/bpm/engine/impl/batch/BatchInvocationsPerJobByBatchTypeConfigTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.engine.impl.batch;\n+\n+import ch.qos.logback.classic.Level;\n+import org.camunda.bpm.engine.ProcessEngine;\n+import org.camunda.bpm.engine.ProcessEngineConfiguration;\n+import org.camunda.bpm.engine.batch.Batch;\n+import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;\n+import org.camunda.commons.testing.ProcessEngineLoggingRule;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import java.util.Map;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.entry;\n+\n+public class BatchInvocationsPerJobByBatchTypeConfigTest {\n+\n+  protected static final String PROCESS_ENGINE_CONFIG =\n+      \"camunda.cfg.invocationsPerJobByBatchType.xml\";\n+\n+  protected static final String CONFIG_LOGGER = \"org.camunda.bpm.engine.cfg\";\n+\n+  @Rule\n+  public ProcessEngineLoggingRule loggingRule = new ProcessEngineLoggingRule()\n+      .watch(CONFIG_LOGGER)\n+      .level(Level.WARN);\n+\n+  protected ProcessEngine processEngine;\n+  protected ProcessEngineConfigurationImpl engineConfiguration;\n+\n+  @Before\n+  public void setup() {\n+    processEngine = ProcessEngineConfiguration\n+        .createProcessEngineConfigurationFromResource(PROCESS_ENGINE_CONFIG)\n+        .buildProcessEngine();\n+\n+    engineConfiguration =\n+        (ProcessEngineConfigurationImpl) processEngine.getProcessEngineConfiguration();\n+  }\n+\n+  @After\n+  public void teardown() {\n+    processEngine.close();\n+  }", "originalCommit": "7f1974f6ebf22cb62322b8f33fd0317c3b361615", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY3NjIzNg==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/614#discussion_r365676236", "bodyText": "I decided not to use it because the logging rule wouldn't work. The log is written on bootstrap level and can therefore not be captured if bootstrapping is not part of the test.", "author": "tasso94", "createdAt": "2020-01-13T08:01:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY2OTk3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY3ODAyMw==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/614#discussion_r365678023", "bodyText": "That sounds reasonable \ud83d\udc4d", "author": "tmetzke", "createdAt": "2020-01-13T08:08:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY2OTk3Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY3MjE4Mg==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/614#discussion_r365672182", "bodyText": "Is this necessary in order to test what the test case title indicates? Should this rather be part of a second test case 'shouldUseConfiguredInvocationsForBatchType'?", "author": "tmetzke", "createdAt": "2020-01-13T07:43:22Z", "path": "engine/src/test/java/org/camunda/bpm/engine/impl/batch/BatchInvocationsPerJobByBatchTypeTest.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.engine.impl.batch;\n+\n+import org.camunda.bpm.engine.HistoryService;\n+import org.camunda.bpm.engine.ManagementService;\n+import org.camunda.bpm.engine.ProcessEngineConfiguration;\n+import org.camunda.bpm.engine.RuntimeService;\n+import org.camunda.bpm.engine.batch.Batch;\n+import org.camunda.bpm.engine.history.HistoricProcessInstanceQuery;\n+import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;\n+import org.camunda.bpm.engine.runtime.ProcessInstanceQuery;\n+import org.camunda.bpm.engine.test.Deployment;\n+import org.camunda.bpm.engine.test.RequiredHistoryLevel;\n+import org.camunda.bpm.engine.test.util.ProvidedProcessEngineRule;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class BatchInvocationsPerJobByBatchTypeTest {\n+\n+  @Rule\n+  public ProvidedProcessEngineRule processEngineRule = new ProvidedProcessEngineRule();\n+\n+  protected ManagementService managementService;\n+  protected RuntimeService runtimeService;\n+  protected HistoryService historyService;\n+  protected ProcessEngineConfigurationImpl engineConfiguration;\n+\n+  @Before\n+  public void assignServices() {\n+    managementService = processEngineRule.getManagementService();\n+    runtimeService = processEngineRule.getRuntimeService();\n+    historyService = processEngineRule.getHistoryService();\n+    engineConfiguration = processEngineRule.getProcessEngineConfiguration();\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    int defaultInvocationsPerJob =\n+        ProcessEngineConfigurationImpl.DEFAULT_INVOCATIONS_PER_BATCH_JOB;\n+\n+    engineConfiguration\n+        .setInvocationsPerBatchJobByBatchType(new HashMap<>())\n+        .setInvocationsPerBatchJob(defaultInvocationsPerJob);\n+\n+    managementService.createBatchQuery()\n+        .list()\n+        .forEach(this::cascadeDeleteBatch);\n+  }\n+\n+  @Test\n+  @Deployment(resources = \"org/camunda/bpm/engine/test/api/oneTaskProcess.bpmn20.xml\")\n+  public void shouldFallbackToDefaultConfigurationWhenBatchTypeIsNotConfigured() {\n+    // given\n+    runtimeService.startProcessInstanceByKey(\"oneTaskProcess\");\n+\n+    ProcessInstanceQuery processInstanceQuery = runtimeService.createProcessInstanceQuery();\n+\n+    // when\n+    Batch batchOne = runtimeService.deleteProcessInstancesAsync(processInstanceQuery, \"\");\n+\n+    // then\n+    assertThat(batchOne.getInvocationsPerBatchJob()).isEqualTo(1);\n+  }\n+\n+  @Test\n+  @RequiredHistoryLevel(ProcessEngineConfiguration.HISTORY_ACTIVITY)\n+  @Deployment(resources = \"org/camunda/bpm/engine/test/api/oneTaskProcess.bpmn20.xml\")\n+  public void shouldFallbackToGlobalConfigurationWhenBatchTypeIsNotConfigured() {\n+    // given\n+    Map<String, Integer> invocationsPerBatchJobByBatchType =\n+        Collections.singletonMap(Batch.TYPE_PROCESS_INSTANCE_DELETION, 10);\n+\n+    engineConfiguration\n+        .setInvocationsPerBatchJobByBatchType(invocationsPerBatchJobByBatchType)\n+        .setInvocationsPerBatchJob(42);\n+\n+    runtimeService.startProcessInstanceByKey(\"oneTaskProcess\");\n+\n+    ProcessInstanceQuery processInstanceQuery = runtimeService.createProcessInstanceQuery();\n+\n+    Batch batchOne =\n+        runtimeService.deleteProcessInstancesAsync(processInstanceQuery, \"\");", "originalCommit": "7f1974f6ebf22cb62322b8f33fd0317c3b361615", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY3OTc3Nw==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/614#discussion_r365679777", "bodyText": "What we already cover by other tests:\n\ninvocations by specific batch type\nglobal configuration (by older test cases already present in the code base)\n\nHowever, I think it makes sense to have a scenario in which we assert that a mixed configuration works as expected. I'm open for proposals how to rename this test case.", "author": "tasso94", "createdAt": "2020-01-13T08:15:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY3MjE4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY4NzA1MQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/614#discussion_r365687051", "bodyText": "I totally agree with all points. \ud83d\udc4d\nLeaves the question: is it technically necessary to start a process instance here and such, or is it enough to simply create the second batch and assert its configuration?", "author": "tmetzke", "createdAt": "2020-01-13T08:39:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY3MjE4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY4ODA5OQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/614#discussion_r365688099", "bodyText": "The creation of this batch type would fail if no process instance is available [1]\n[1] https://github.com/camunda/camunda-bpm-platform/blob/master/engine/src/main/java/org/camunda/bpm/engine/impl/cmd/batch/DeleteProcessInstanceBatchCmd.java#L73", "author": "tasso94", "createdAt": "2020-01-13T08:42:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY3MjE4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY4OTMwNA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/614#discussion_r365689304", "bodyText": "OK, I see, thanks for the clarification!\nThe test case title is fine then as well. \ud83d\udc4d", "author": "tmetzke", "createdAt": "2020-01-13T08:45:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY3MjE4Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY3NDQ0MQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/614#discussion_r365674441", "bodyText": "See comment on BatchInvocationsPerJobByBatchTypeConfigTest", "author": "tmetzke", "createdAt": "2020-01-13T07:53:29Z", "path": "engine/src/test/java/org/camunda/bpm/engine/test/standalone/history/HistoryCleanupBatchTest.java", "diffHunk": "@@ -1,44 +1,95 @@\n-/*\r\n- * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\r\n- * under one or more contributor license agreements. See the NOTICE file\r\n- * distributed with this work for additional information regarding copyright\r\n- * ownership. Camunda licenses this file to you under the Apache License,\r\n- * Version 2.0; you may not use this file except in compliance with the License.\r\n- * You may obtain a copy of the License at\r\n- *\r\n- *     http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-package org.camunda.bpm.engine.test.standalone.history;\r\n-\r\n-import java.util.Map;\r\n-\r\n-import org.camunda.bpm.engine.impl.test.ResourceProcessEngineTestCase;\r\n-import org.junit.Test;\r\n-\r\n-public class HistoryCleanupBatchTest extends ResourceProcessEngineTestCase {\r\n-\r\n-  public HistoryCleanupBatchTest() {\r\n-    super(\"org/camunda/bpm/engine/test/standalone/history/camunda.cfg.xml\");\r\n-  }\r\n-\r\n-  @Test\r\n-  public void testBatchHistoryTimeToLiveConfiguration() {\r\n-\r\n-    String batchOperationHistoryTimeToLive = processEngineConfiguration.getBatchOperationHistoryTimeToLive();\r\n-    assertEquals(\"P5D\", batchOperationHistoryTimeToLive);\r\n-\r\n-    Map<String, String> map = processEngineConfiguration.getBatchOperationsForHistoryCleanup();\r\n-    assertEquals(13, map.size());\r\n-    assertEquals(\"P10D\", map.get(\"instance-migration\"));\r\n-    assertEquals(\"P7D\", map.get(\"instance-modification\"));\r\n-    assertEquals(\"P5D\", map.get(\"instance-restart\"));\r\n-    assertEquals(\"P3D\", map.get(\"uknown-operation\"));\r\n-  }\r\n-\r\n-}\r\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.engine.test.standalone.history;\n+\n+import ch.qos.logback.classic.Level;\n+import org.camunda.bpm.engine.ProcessEngine;\n+import org.camunda.bpm.engine.ProcessEngineConfiguration;\n+import org.camunda.bpm.engine.batch.Batch;\n+import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;\n+import org.camunda.commons.testing.ProcessEngineLoggingRule;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import java.util.Map;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.entry;\n+\n+public class HistoryCleanupBatchTest {\n+\n+  protected static final String PROCESS_ENGINE_CONFIG =\n+      \"org/camunda/bpm/engine/test/standalone/history/camunda.cfg.xml\";\n+\n+  protected static final String CONFIG_LOGGER = \"org.camunda.bpm.engine.cfg\";\n+\n+  @Rule\n+  public ProcessEngineLoggingRule loggingRule = new ProcessEngineLoggingRule()\n+      .watch(CONFIG_LOGGER)\n+      .level(Level.WARN);\n+\n+  protected ProcessEngine processEngine;\n+  protected ProcessEngineConfigurationImpl engineConfiguration;\n+\n+  @Before\n+  public void setup() {\n+    processEngine = ProcessEngineConfiguration\n+        .createProcessEngineConfigurationFromResource(PROCESS_ENGINE_CONFIG)\n+        .buildProcessEngine();\n+\n+    engineConfiguration =\n+        (ProcessEngineConfigurationImpl) processEngine.getProcessEngineConfiguration();\n+  }\n+\n+  @After\n+  public void teardown() {\n+    processEngine.close();\n+  }", "originalCommit": "7f1974f6ebf22cb62322b8f33fd0317c3b361615", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY3ODEwOQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/614#discussion_r365678109", "bodyText": "Same resolution as BatchInvocationsPerJobByBatchTypeConfigTest", "author": "tmetzke", "createdAt": "2020-01-13T08:09:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY3NDQ0MQ=="}], "type": "inlineReview", "revised_code": null}]}