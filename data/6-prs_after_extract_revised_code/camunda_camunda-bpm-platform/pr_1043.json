{"pr_number": 1043, "pr_title": "[CAM-12091] fix(engine): add error when parsing process without start event", "pr_createdAt": "2020-10-04T10:19:30Z", "pr_url": "https://github.com/camunda/camunda-bpm-platform/pull/1043", "timeline": [{"oid": "39022c9a64dc783eb614c39f777ac6da34beb613", "url": "https://github.com/camunda/camunda-bpm-platform/commit/39022c9a64dc783eb614c39f777ac6da34beb613", "message": "fix(engine): add error when parsing process without start event\n\nrelated to CAM-12091", "committedDate": "2020-10-04T10:22:40Z", "type": "commit"}, {"oid": "39022c9a64dc783eb614c39f777ac6da34beb613", "url": "https://github.com/camunda/camunda-bpm-platform/commit/39022c9a64dc783eb614c39f777ac6da34beb613", "message": "fix(engine): add error when parsing process without start event\n\nrelated to CAM-12091", "committedDate": "2020-10-04T10:22:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQxNTU3Mg==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1043#discussion_r505415572", "bodyText": "Consider using a method name, that includes where the startEvent is missing (process).\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void testParseWithoutStartEvent() {\n          \n          \n            \n              public void testInvalidProcessWithoutStartEvent() {", "author": "mboskamp", "createdAt": "2020-10-15T09:56:40Z", "path": "engine/src/test/java/org/camunda/bpm/engine/test/bpmn/parse/BpmnParseTest.java", "diffHunk": "@@ -370,6 +370,18 @@ public void testInvalidSequenceFlowInAndOutEventSubProcess() {\n     }\n   }\n \n+  @Test\n+  public void testParseWithoutStartEvent() {", "originalCommit": "39022c9a64dc783eb614c39f777ac6da34beb613", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "811532406c7320ed6f30b8629bc59bcc97f7b84f", "chunk": "diff --git a/engine/src/test/java/org/camunda/bpm/engine/test/bpmn/parse/BpmnParseTest.java b/engine/src/test/java/org/camunda/bpm/engine/test/bpmn/parse/BpmnParseTest.java\nindex 0d413208b5..05570d0d59 100644\n--- a/engine/src/test/java/org/camunda/bpm/engine/test/bpmn/parse/BpmnParseTest.java\n+++ b/engine/src/test/java/org/camunda/bpm/engine/test/bpmn/parse/BpmnParseTest.java\n\n@@ -371,9 +371,9 @@ public class BpmnParseTest {\n   }\n \n   @Test\n-  public void testParseWithoutStartEvent() {\n+  public void testInvalidProcessWithoutStartEvent() {\n     try {\n-      String resource = TestHelper.getBpmnProcessDefinitionResource(getClass(), \"testParseWithoutStartEvent\");\n+      String resource = TestHelper.getBpmnProcessDefinitionResource(getClass(), \"testInvalidProcessWithoutStartEvent\");\n       repositoryService.createDeployment().name(resource).addClasspathResource(resource).deploy();\n       fail(\"Process definition could be parsed, although the process did not contain a start event.\");\n     } catch (ParseException e) {\n"}}, {"oid": "811532406c7320ed6f30b8629bc59bcc97f7b84f", "url": "https://github.com/camunda/camunda-bpm-platform/commit/811532406c7320ed6f30b8629bc59bcc97f7b84f", "message": "fix(engine): add error when parsing process without start event\n\nrelated to CAM-12091", "committedDate": "2020-10-17T08:40:12Z", "type": "commit"}]}