{"pr_number": 1185, "pr_title": "[CAM-12040]: Add support for nested errorEventDefinitions on external Tasks", "pr_createdAt": "2020-12-10T14:15:41Z", "pr_url": "https://github.com/camunda/camunda-bpm-platform/pull/1185", "timeline": [{"oid": "4b6af16ee34acb58c23556d872c1738001ebb456", "url": "https://github.com/camunda/camunda-bpm-platform/commit/4b6af16ee34acb58c23556d872c1738001ebb456", "message": "feat(model): add support for error event definitions on external tasks\n\nRelated to CAM-12040, CAM-12784", "committedDate": "2021-01-04T12:42:41Z", "type": "forcePushed"}, {"oid": "1b65fb88a362b6fed59f5bd97871577515dbd195", "url": "https://github.com/camunda/camunda-bpm-platform/commit/1b65fb88a362b6fed59f5bd97871577515dbd195", "message": "feat(engine): parse nested errorEventDefinition for external tasks\n\nRelated to CAM-12040, CAM-12782", "committedDate": "2021-01-05T13:52:31Z", "type": "commit"}, {"oid": "7330b52f72e80c03fe1dbc3ff408353bc91e1c22", "url": "https://github.com/camunda/camunda-bpm-platform/commit/7330b52f72e80c03fe1dbc3ff408353bc91e1c22", "message": "feat(engine): extend external task API with errorEventDefinition\n\n* fail with BPMN error on complete and handleFailure if the expression\non the errorEventDefinition evaluates to true\n* some code cleanup left and right\n\nRelated to CAM-12040, CAM-12783", "committedDate": "2021-01-05T13:52:32Z", "type": "commit"}, {"oid": "b3b1c4025c76dd07a05203c528a199c40abc31a1", "url": "https://github.com/camunda/camunda-bpm-platform/commit/b3b1c4025c76dd07a05203c528a199c40abc31a1", "message": "feat(engine-rest): support for variables in external task handleFailure", "committedDate": "2021-01-05T13:52:32Z", "type": "commit"}, {"oid": "d5d0f2a370af0409f895f89153bab15b9ef5ef0a", "url": "https://github.com/camunda/camunda-bpm-platform/commit/d5d0f2a370af0409f895f89153bab15b9ef5ef0a", "message": "feat(model): add support for error event definitions on external tasks\n\nRelated to CAM-12040, CAM-12784", "committedDate": "2021-01-05T13:52:33Z", "type": "commit"}, {"oid": "d5d0f2a370af0409f895f89153bab15b9ef5ef0a", "url": "https://github.com/camunda/camunda-bpm-platform/commit/d5d0f2a370af0409f895f89153bab15b9ef5ef0a", "message": "feat(model): add support for error event definitions on external tasks\n\nRelated to CAM-12040, CAM-12784", "committedDate": "2021-01-05T13:52:33Z", "type": "forcePushed"}, {"oid": "725c93e0e6006178c3abcb53886e2d1e0bdb0d6b", "url": "https://github.com/camunda/camunda-bpm-platform/commit/725c93e0e6006178c3abcb53886e2d1e0bdb0d6b", "message": "chore(engine): add error message to nested error event definition", "committedDate": "2021-01-06T09:01:51Z", "type": "commit"}, {"oid": "07691b7283c9e22545d8a533654f7383c23cf5f9", "url": "https://github.com/camunda/camunda-bpm-platform/commit/07691b7283c9e22545d8a533654f7383c23cf5f9", "message": "chore(engine): expose externalTask in el expressions\n\nRelated to CAM-12040, CAM-12848", "committedDate": "2021-01-11T12:29:49Z", "type": "commit"}, {"oid": "bfccb5583b185eec0536439c95961c629cd0436f", "url": "https://github.com/camunda/camunda-bpm-platform/commit/bfccb5583b185eec0536439c95961c629cd0436f", "message": "chore(engine): improve external task lookup in el resolver\n\nRelated CAM-12040, CAM-12848", "committedDate": "2021-01-12T14:04:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjAzOTE3MQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1185#discussion_r556039171", "bodyText": "The method is used in several places (e.g. here, here, and here), if I am not mistaken. So I guess we cannot remove it.", "author": "tmetzke", "createdAt": "2021-01-12T19:49:34Z", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/util/ReflectUtil.java", "diffHunk": "@@ -331,44 +328,21 @@ private static Method findMethod(Class< ? extends Object> clazz, String methodNa\n     return null;\n   }\n \n-  public static Object instantiate(String className, Object[] args) {", "originalCommit": "bfccb5583b185eec0536439c95961c629cd0436f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQzNDg3Mg==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1185#discussion_r556434872", "bodyText": "Fair point. I only checked in the IDE. Should have consulted the full codebase on GitHub :D", "author": "mboskamp", "createdAt": "2021-01-13T10:58:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjAzOTE3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "5964be069e67e6bb8ae42e0f4a64540d09e6d887", "chunk": "diff --git a/engine/src/main/java/org/camunda/bpm/engine/impl/util/ReflectUtil.java b/engine/src/main/java/org/camunda/bpm/engine/impl/util/ReflectUtil.java\nindex 8f9c9c0fd5..d8667c9170 100644\n--- a/engine/src/main/java/org/camunda/bpm/engine/impl/util/ReflectUtil.java\n+++ b/engine/src/main/java/org/camunda/bpm/engine/impl/util/ReflectUtil.java\n\n@@ -328,6 +331,28 @@ public abstract class ReflectUtil {\n     return null;\n   }\n \n+  public static Object instantiate(String className, Object[] args) {\n+  Class<?> clazz = loadClass(className);\n+  Constructor<?> constructor = findMatchingConstructor(clazz, args);\n+  ensureNotNull(\"couldn't find constructor for \" + className + \" with args \" + Arrays.asList(args), \"constructor\", constructor);\n+  try {\n+    return constructor.newInstance(args);\n+  }\n+  catch (Exception e) {\n+    throw LOG.exceptionWhileInstantiatingClass(className, e);\n+  }\n+}\n+\n+@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+private static <T> Constructor<T> findMatchingConstructor(Class<T> clazz, Object[] args) {\n+  for (Constructor constructor: clazz.getDeclaredConstructors()) { // cannot use <?> or <T> due to JDK 5/6 incompatibility\n+    if (matches(constructor.getParameterTypes(), (Class<?>[]) Arrays.stream(args).map(Object::getClass).toArray())){\n+      return constructor;\n+    }\n+  }\n+  return null;\n+}\n+\n   private static boolean matches(Class< ? >[] parameterTypes, Class< ? >[] args) {\n     if ( parameterTypes==null\n          || parameterTypes.length==0\n"}}, {"oid": "5964be069e67e6bb8ae42e0f4a64540d09e6d887", "url": "https://github.com/camunda/camunda-bpm-platform/commit/5964be069e67e6bb8ae42e0f4a64540d09e6d887", "message": "chore(engine): bring back deleted methods\n\nRelated CAM-12040, CAM-12848", "committedDate": "2021-01-13T11:03:02Z", "type": "commit"}, {"oid": "a1731a250b5f7003b8be2296c6be95d7f884d8b0", "url": "https://github.com/camunda/camunda-bpm-platform/commit/a1731a250b5f7003b8be2296c6be95d7f884d8b0", "message": "chore(engine): correct indentation", "committedDate": "2021-01-13T11:30:05Z", "type": "commit"}, {"oid": "ee9610509221d2151d7c05b825be1ccc80cacc8a", "url": "https://github.com/camunda/camunda-bpm-platform/commit/ee9610509221d2151d7c05b825be1ccc80cacc8a", "message": "chore(engine): correct indentation", "committedDate": "2021-01-13T11:34:24Z", "type": "commit"}, {"oid": "38692aef0db519f7f3aa9dca2bb79b474b0bf922", "url": "https://github.com/camunda/camunda-bpm-platform/commit/38692aef0db519f7f3aa9dca2bb79b474b0bf922", "message": "chore(engine): Add more tests for expression edge cases\n\nRelated to CAM-12040", "committedDate": "2021-01-13T15:19:49Z", "type": "commit"}, {"oid": "82ec0d8e45d9129ad36987d85bebf1bcc2486f0e", "url": "https://github.com/camunda/camunda-bpm-platform/commit/82ec0d8e45d9129ad36987d85bebf1bcc2486f0e", "message": "chore(engine): cleanup new tests", "committedDate": "2021-01-14T07:20:14Z", "type": "commit"}]}