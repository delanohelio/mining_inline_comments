{"pr_number": 979, "pr_title": "chore(engine): extend telemetry data with integration flag", "pr_createdAt": "2020-09-10T11:55:28Z", "pr_url": "https://github.com/camunda/camunda-bpm-platform/pull/979", "timeline": [{"oid": "833d670a5cec053398bab6655c9bd2f7415fe1f0", "url": "https://github.com/camunda/camunda-bpm-platform/commit/833d670a5cec053398bab6655c9bd2f7415fe1f0", "message": "wip", "committedDate": "2020-09-10T12:25:39Z", "type": "forcePushed"}, {"oid": "e416b58fa59c900c7f3d5ae477dc87c49fb24963", "url": "https://github.com/camunda/camunda-bpm-platform/commit/e416b58fa59c900c7f3d5ae477dc87c49fb24963", "message": "chore(telemetry): extend telemetry data with integration flags\n\n* spring boot starter\n* camunda bpm run\n* wildfly/jboss subsystem\n* ejb-service\n\nRelated to CAM-12227", "committedDate": "2020-09-10T15:02:33Z", "type": "forcePushed"}, {"oid": "1cd2feb61d27da72a5f71a05d46a841ec4d9672c", "url": "https://github.com/camunda/camunda-bpm-platform/commit/1cd2feb61d27da72a5f71a05d46a841ec4d9672c", "message": "chore(telemetry): extend telemetry data with integration flags\n\n* spring boot starter\n* camunda bpm run\n* wildfly/jboss subsystem\n* ejb-service\n\nRelated to CAM-12227", "committedDate": "2020-09-11T14:46:33Z", "type": "forcePushed"}, {"oid": "6884cd00b22d1cb10c12510230fade818dc2aa98", "url": "https://github.com/camunda/camunda-bpm-platform/commit/6884cd00b22d1cb10c12510230fade818dc2aa98", "message": "squash me", "committedDate": "2020-09-11T16:04:42Z", "type": "forcePushed"}, {"oid": "f91ab9cdbdfeacbac618528daa1a327b99d5a2ee", "url": "https://github.com/camunda/camunda-bpm-platform/commit/f91ab9cdbdfeacbac618528daa1a327b99d5a2ee", "message": "chore(telemetry): extend telemetry data with integration flags\n\n* spring boot starter\n* camunda bpm run\n* wildfly/jboss subsystem\n* ejb-service\n\nRelated to CAM-12227", "committedDate": "2020-09-14T06:53:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ2OTkwNw==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/979#discussion_r488469907", "bodyText": "Just an understanding question: do we need a map here, would a list/set of Strings be sufficient? we are not adding entries with false here, are we? Being in the list already means it's used, right?", "author": "tmetzke", "createdAt": "2020-09-15T08:07:36Z", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/dto/Internals.java", "diffHunk": "@@ -24,11 +24,14 @@\n public class Internals {\n \n   public static final String SERIALIZED_APPLICATION_SERVER = \"application-server\";\n+  public static final String SERIALIZED_CAMUNDA_INTEGRATION = \"camunda-integration\";\n \n   protected Database database;\n   @SerializedName(value = SERIALIZED_APPLICATION_SERVER)\n   protected ApplicationServer applicationServer;\n   protected Map<String, Command> commands;\n+  @SerializedName(value = SERIALIZED_CAMUNDA_INTEGRATION)\n+  protected Map<String, Object> camundaIntegration;", "originalCommit": "225def8dd0367e503cd244c75ca755f91ba012bc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "83fc2d6949dc864c4557c5048421045c540a188f", "chunk": "diff --git a/engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/dto/Internals.java b/engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/dto/Internals.java\nindex 681aefc509..22c1638607 100644\n--- a/engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/dto/Internals.java\n+++ b/engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/dto/Internals.java\n\n@@ -35,19 +35,22 @@ public class Internals {\n \n   protected Map<String, Metric> metrics;\n \n+  protected Jdk jdk;\n+\n   public Internals() {\n-    this(null, null);\n+    this(null, null, null);\n   }\n \n-  public Internals(Database database, ApplicationServer server) {\n+  public Internals(Database database, ApplicationServer server, Jdk jdk) {\n     this.database = database;\n     this.applicationServer = server;\n     this.commands = new HashMap<>();\n+    this.jdk = jdk;\n     this.camundaIntegration = new HashMap<>();\n   }\n \n   public Internals(Internals internals) {\n-    this(internals.database, internals.applicationServer);\n+    this(internals.database, internals.applicationServer, internals.jdk);\n     this.commands = internals.getCommands();\n     this.metrics = internals.getMetrics();\n   }\n"}}, {"oid": "83fc2d6949dc864c4557c5048421045c540a188f", "url": "https://github.com/camunda/camunda-bpm-platform/commit/83fc2d6949dc864c4557c5048421045c540a188f", "message": "chore(telemetry): extend telemetry data with integration flags\n\n* spring boot starter\n* camunda bpm run\n* wildfly/jboss subsystem\n* ejb-service\n\nRelated to CAM-12227", "committedDate": "2020-09-15T13:35:17Z", "type": "commit"}, {"oid": "fee62bad5d79f22c3aad535c6f922607238c91f1", "url": "https://github.com/camunda/camunda-bpm-platform/commit/fee62bad5d79f22c3aad535c6f922607238c91f1", "message": "adjust adding ejb-service integration", "committedDate": "2020-09-15T13:35:20Z", "type": "commit"}, {"oid": "2c56fc8cbcd01db5e1ca45c1cd194f47142e843b", "url": "https://github.com/camunda/camunda-bpm-platform/commit/2c56fc8cbcd01db5e1ca45c1cd194f47142e843b", "message": "replace map with list\n\n+ improve test structure in starter", "committedDate": "2020-09-15T13:44:51Z", "type": "commit"}, {"oid": "2c56fc8cbcd01db5e1ca45c1cd194f47142e843b", "url": "https://github.com/camunda/camunda-bpm-platform/commit/2c56fc8cbcd01db5e1ca45c1cd194f47142e843b", "message": "replace map with list\n\n+ improve test structure in starter", "committedDate": "2020-09-15T13:44:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY4MjM4MA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/979#discussion_r488682380", "bodyText": "this might be redundant considering the bellow assertion", "author": "yanavasileva", "createdAt": "2020-09-15T13:48:37Z", "path": "distro/run/core/src/test/java/org/camunda/bpm/run/test/TelemetryDataTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.run.test;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.Set;\n+\n+import org.camunda.bpm.engine.ProcessEngine;\n+import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;\n+import org.camunda.bpm.engine.impl.telemetry.CamundaIntegration;\n+import org.camunda.bpm.engine.impl.telemetry.dto.Data;\n+import org.camunda.bpm.run.CamundaBpmRun;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(classes = { CamundaBpmRun.class }, webEnvironment = WebEnvironment.DEFINED_PORT)\n+public class TelemetryDataTest {\n+\n+  @Autowired\n+  ProcessEngine engine;\n+\n+  @Test\n+  public void shouldAddCamundaIntegration() {\n+    // given\n+    ProcessEngineConfigurationImpl processEngineConfiguration = (ProcessEngineConfigurationImpl) engine.getProcessEngineConfiguration();\n+\n+    // then\n+    Data telemetryData = processEngineConfiguration.getTelemetryData();\n+    Set<String> camundaIntegration = telemetryData.getProduct().getInternals().getCamundaIntegration();\n+    assertThat(camundaIntegration.size()).isEqualTo(2);", "originalCommit": "2c56fc8cbcd01db5e1ca45c1cd194f47142e843b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY4NDQ3NA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/979#discussion_r488684474", "bodyText": "I would agree, yeah. \ud83d\udc4d", "author": "tmetzke", "createdAt": "2020-09-15T13:51:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY4MjM4MA=="}], "type": "inlineReview", "revised_code": {"commit": "7b85a49261f317bb804b0cbdb943ed69328878fe", "chunk": "diff --git a/distro/run/core/src/test/java/org/camunda/bpm/run/test/TelemetryDataTest.java b/distro/run/core/src/test/java/org/camunda/bpm/run/test/TelemetryDataTest.java\nindex 76709f0379..9c9cefc6fc 100644\n--- a/distro/run/core/src/test/java/org/camunda/bpm/run/test/TelemetryDataTest.java\n+++ b/distro/run/core/src/test/java/org/camunda/bpm/run/test/TelemetryDataTest.java\n\n@@ -47,7 +47,6 @@ public class TelemetryDataTest {\n     // then\n     Data telemetryData = processEngineConfiguration.getTelemetryData();\n     Set<String> camundaIntegration = telemetryData.getProduct().getInternals().getCamundaIntegration();\n-    assertThat(camundaIntegration.size()).isEqualTo(2);\n     assertThat(camundaIntegration)\n       .containsExactlyInAnyOrder(CamundaIntegration.CAMUNDA_BPM_RUN, CamundaIntegration.SPRING_BOOT_STARTER);\n   }\n"}}, {"oid": "7b85a49261f317bb804b0cbdb943ed69328878fe", "url": "https://github.com/camunda/camunda-bpm-platform/commit/7b85a49261f317bb804b0cbdb943ed69328878fe", "message": "improve test", "committedDate": "2020-09-16T06:36:06Z", "type": "commit"}, {"oid": "05551c1a027933677c4b9dfb377ae960fc059b88", "url": "https://github.com/camunda/camunda-bpm-platform/commit/05551c1a027933677c4b9dfb377ae960fc059b88", "message": "remove unnecessary web config", "committedDate": "2020-09-16T06:58:45Z", "type": "commit"}, {"oid": "0ca8fca1945555919924de428567755ce1f67923", "url": "https://github.com/camunda/camunda-bpm-platform/commit/0ca8fca1945555919924de428567755ce1f67923", "message": "adjust spacing and javadoc", "committedDate": "2020-09-17T05:26:21Z", "type": "commit"}]}