{"pr_number": 906, "pr_title": "fix(large-data): only cleanup DeleteDeploymentCascadeTest data", "pr_createdAt": "2020-07-23T09:32:06Z", "pr_url": "https://github.com/camunda/camunda-bpm-platform/pull/906", "timeline": [{"oid": "a9024fd79077545c8701acc593b710818e833452", "url": "https://github.com/camunda/camunda-bpm-platform/commit/a9024fd79077545c8701acc593b710818e833452", "message": "fix(large-data): cleanup DeleteDeploymentCascadeTest data\n\nRelated to CAM-12205", "committedDate": "2020-07-27T08:51:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI0MzcyOA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/906#discussion_r462243728", "bodyText": "let's return it to 2 500.", "author": "yanavasileva", "createdAt": "2020-07-29T11:58:20Z", "path": "qa/large-data-tests/src/test/java/org/camunda/bpm/qa/largedata/DeleteDeploymentCascadeTest.java", "diffHunk": "@@ -19,57 +19,71 @@\n import static org.assertj.core.api.Assertions.assertThat;\n \n import java.util.List;\n+import java.util.stream.Collectors;\n \n import org.camunda.bpm.engine.HistoryService;\n import org.camunda.bpm.engine.RepositoryService;\n import org.camunda.bpm.engine.history.HistoricProcessInstance;\n-import org.camunda.bpm.engine.impl.test.TestHelper;\n+import org.camunda.bpm.engine.impl.db.sql.DbSqlSessionFactory;\n+import org.camunda.bpm.engine.impl.util.CollectionUtil;\n import org.camunda.bpm.engine.repository.Deployment;\n import org.camunda.bpm.engine.test.ProcessEngineRule;\n import org.camunda.bpm.qa.largedata.util.EngineDataGenerator;\n import org.junit.After;\n import org.junit.Before;\n-import org.junit.ClassRule;\n+import org.junit.Rule;\n import org.junit.Test;\n \n public class DeleteDeploymentCascadeTest {\n \n-  @ClassRule\n-  public static ProcessEngineRule processEngineRule = new ProcessEngineRule(\"camunda.cfg.xml\");\n+  @Rule\n+  public ProcessEngineRule processEngineRule = new ProcessEngineRule(\"camunda.cfg.xml\");\n \n-  protected int GENERATE_PROCESS_INSTANCES_COUNT = 2500;\n+  protected static final String DATA_PREFIX = DeleteDeploymentCascadeTest.class.getSimpleName();\n+\n+  protected int GENERATE_PROCESS_INSTANCES_COUNT = 10_000;", "originalCommit": "a9024fd79077545c8701acc593b710818e833452", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "632f0cd252664849a7d987cb209324127446ae0e", "chunk": "diff --git a/qa/large-data-tests/src/test/java/org/camunda/bpm/qa/largedata/DeleteDeploymentCascadeTest.java b/qa/large-data-tests/src/test/java/org/camunda/bpm/qa/largedata/DeleteDeploymentCascadeTest.java\nindex 947ac8ef41..d1655f067c 100644\n--- a/qa/large-data-tests/src/test/java/org/camunda/bpm/qa/largedata/DeleteDeploymentCascadeTest.java\n+++ b/qa/large-data-tests/src/test/java/org/camunda/bpm/qa/largedata/DeleteDeploymentCascadeTest.java\n\n@@ -41,7 +41,7 @@ public class DeleteDeploymentCascadeTest {\n \n   protected static final String DATA_PREFIX = DeleteDeploymentCascadeTest.class.getSimpleName();\n \n-  protected int GENERATE_PROCESS_INSTANCES_COUNT = 10_000;\n+  protected int GENERATE_PROCESS_INSTANCES_COUNT = 2500;\n   protected RepositoryService repositoryService;\n   protected HistoryService historyService;\n   protected EngineDataGenerator generator;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI0NDMxOQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/906#discussion_r462244319", "bodyText": "let's add null check, if the test is successful the deployment will be null so no need of clean up", "author": "yanavasileva", "createdAt": "2020-07-29T11:59:29Z", "path": "qa/large-data-tests/src/test/java/org/camunda/bpm/qa/largedata/DeleteDeploymentCascadeTest.java", "diffHunk": "@@ -19,57 +19,71 @@\n import static org.assertj.core.api.Assertions.assertThat;\n \n import java.util.List;\n+import java.util.stream.Collectors;\n \n import org.camunda.bpm.engine.HistoryService;\n import org.camunda.bpm.engine.RepositoryService;\n import org.camunda.bpm.engine.history.HistoricProcessInstance;\n-import org.camunda.bpm.engine.impl.test.TestHelper;\n+import org.camunda.bpm.engine.impl.db.sql.DbSqlSessionFactory;\n+import org.camunda.bpm.engine.impl.util.CollectionUtil;\n import org.camunda.bpm.engine.repository.Deployment;\n import org.camunda.bpm.engine.test.ProcessEngineRule;\n import org.camunda.bpm.qa.largedata.util.EngineDataGenerator;\n import org.junit.After;\n import org.junit.Before;\n-import org.junit.ClassRule;\n+import org.junit.Rule;\n import org.junit.Test;\n \n public class DeleteDeploymentCascadeTest {\n \n-  @ClassRule\n-  public static ProcessEngineRule processEngineRule = new ProcessEngineRule(\"camunda.cfg.xml\");\n+  @Rule\n+  public ProcessEngineRule processEngineRule = new ProcessEngineRule(\"camunda.cfg.xml\");\n \n-  protected int GENERATE_PROCESS_INSTANCES_COUNT = 2500;\n+  protected static final String DATA_PREFIX = DeleteDeploymentCascadeTest.class.getSimpleName();\n+\n+  protected int GENERATE_PROCESS_INSTANCES_COUNT = 10_000;\n   protected RepositoryService repositoryService;\n   protected HistoryService historyService;\n-\n+  protected EngineDataGenerator generator;\n+  \n   @Before\n   public void init() {\n-    repositoryService = processEngineRule.getRepositoryService();\n-    historyService = processEngineRule.getHistoryService();\n+    repositoryService = processEngineRule.getProcessEngine().getRepositoryService();\n+    historyService = processEngineRule.getProcessEngine().getHistoryService();\n \n     // generate data\n-    EngineDataGenerator generator = new EngineDataGenerator(processEngineRule.getProcessEngine(), GENERATE_PROCESS_INSTANCES_COUNT);\n+    generator = new EngineDataGenerator(processEngineRule.getProcessEngine(), GENERATE_PROCESS_INSTANCES_COUNT, DATA_PREFIX);\n     generator.deployDefinitions();\n     generator.generateCompletedProcessInstanceData();\n   }\n \n   @After\n-  public void tearDown() {\n-    TestHelper.assertAndEnsureCleanDbAndCache(processEngineRule.getProcessEngine(), false);\n+  public void teardown() {\n+    Deployment deplyoment = repositoryService.createDeploymentQuery().deploymentName(generator.getDeploymentName()).singleResult();\n+    repositoryService.deleteDeployment(deplyoment.getId(), false);\n+    List<HistoricProcessInstance> processInstances = historyService.createHistoricProcessInstanceQuery().processDefinitionKey(generator.getAutoCompleteProcessKey()).list();\n+    if(!processInstances.isEmpty()) {\n+      List<String> processInstanceIds = processInstances.stream().map(HistoricProcessInstance::getId).collect(Collectors.toList());\n+      List<List<String>> partitions = CollectionUtil.partition(processInstanceIds, DbSqlSessionFactory.MAXIMUM_NUMBER_PARAMS);\n+      for (List<String> partition : partitions) {\n+        historyService.deleteHistoricProcessInstances(partition);\n+      }\n+    }", "originalCommit": "a9024fd79077545c8701acc593b710818e833452", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "632f0cd252664849a7d987cb209324127446ae0e", "chunk": "diff --git a/qa/large-data-tests/src/test/java/org/camunda/bpm/qa/largedata/DeleteDeploymentCascadeTest.java b/qa/large-data-tests/src/test/java/org/camunda/bpm/qa/largedata/DeleteDeploymentCascadeTest.java\nindex 947ac8ef41..d1655f067c 100644\n--- a/qa/large-data-tests/src/test/java/org/camunda/bpm/qa/largedata/DeleteDeploymentCascadeTest.java\n+++ b/qa/large-data-tests/src/test/java/org/camunda/bpm/qa/largedata/DeleteDeploymentCascadeTest.java\n\n@@ -41,7 +41,7 @@ public class DeleteDeploymentCascadeTest {\n \n   protected static final String DATA_PREFIX = DeleteDeploymentCascadeTest.class.getSimpleName();\n \n-  protected int GENERATE_PROCESS_INSTANCES_COUNT = 10_000;\n+  protected int GENERATE_PROCESS_INSTANCES_COUNT = 2500;\n   protected RepositoryService repositoryService;\n   protected HistoryService historyService;\n   protected EngineDataGenerator generator;\n"}}, {"oid": "632f0cd252664849a7d987cb209324127446ae0e", "url": "https://github.com/camunda/camunda-bpm-platform/commit/632f0cd252664849a7d987cb209324127446ae0e", "message": "fix(large-data): cleanup DeleteDeploymentCascadeTest data\n\nRelated to CAM-12205", "committedDate": "2020-07-30T08:10:46Z", "type": "commit"}, {"oid": "632f0cd252664849a7d987cb209324127446ae0e", "url": "https://github.com/camunda/camunda-bpm-platform/commit/632f0cd252664849a7d987cb209324127446ae0e", "message": "fix(large-data): cleanup DeleteDeploymentCascadeTest data\n\nRelated to CAM-12205", "committedDate": "2020-07-30T08:10:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg4MjUwNw==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/906#discussion_r462882507", "bodyText": "I suggest a small reorder of the cleanup, otherwise, the historic process instances won't be pick up as the process definition will be deleted with the deployment:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  repositoryService.deleteDeployment(deployment.getId(), false);\n          \n          \n            \n                  List<HistoricProcessInstance> processInstances = historyService.createHistoricProcessInstanceQuery()\n          \n          \n            \n                      .processDefinitionKey(generator.getAutoCompleteProcessKey()).list();\n          \n          \n            \n                  if (!processInstances.isEmpty()) {\n          \n          \n            \n                    List<String> processInstanceIds = processInstances.stream().map(HistoricProcessInstance::getId).collect(Collectors.toList());\n          \n          \n            \n                    List<List<String>> partitions = CollectionUtil.partition(processInstanceIds, DbSqlSessionFactory.MAXIMUM_NUMBER_PARAMS);\n          \n          \n            \n                    for (List<String> partition : partitions) {\n          \n          \n            \n                      historyService.deleteHistoricProcessInstances(partition);\n          \n          \n            \n                    }\n          \n          \n            \n                  }\n          \n          \n            \n                  List<HistoricProcessInstance> processInstances = historyService.createHistoricProcessInstanceQuery()\n          \n          \n            \n                      .processDefinitionKey(generator.getAutoCompleteProcessKey()).list();\n          \n          \n            \n                  if (!processInstances.isEmpty()) {\n          \n          \n            \n                    List<String> processInstanceIds = processInstances.stream().map(HistoricProcessInstance::getId).collect(Collectors.toList());\n          \n          \n            \n                    List<List<String>> partitions = CollectionUtil.partition(processInstanceIds, DbSqlSessionFactory.MAXIMUM_NUMBER_PARAMS);\n          \n          \n            \n                    for (List<String> partition : partitions) {\n          \n          \n            \n                      historyService.deleteHistoricProcessInstances(partition);\n          \n          \n            \n                    }\n          \n          \n            \n                  }\n          \n          \n            \n                  repositoryService.deleteDeployment(deployment.getId(), false);", "author": "yanavasileva", "createdAt": "2020-07-30T09:49:50Z", "path": "qa/large-data-tests/src/test/java/org/camunda/bpm/qa/largedata/DeleteDeploymentCascadeTest.java", "diffHunk": "@@ -19,57 +19,74 @@\n import static org.assertj.core.api.Assertions.assertThat;\n \n import java.util.List;\n+import java.util.stream.Collectors;\n \n import org.camunda.bpm.engine.HistoryService;\n import org.camunda.bpm.engine.RepositoryService;\n import org.camunda.bpm.engine.history.HistoricProcessInstance;\n-import org.camunda.bpm.engine.impl.test.TestHelper;\n+import org.camunda.bpm.engine.impl.db.sql.DbSqlSessionFactory;\n+import org.camunda.bpm.engine.impl.util.CollectionUtil;\n import org.camunda.bpm.engine.repository.Deployment;\n import org.camunda.bpm.engine.test.ProcessEngineRule;\n import org.camunda.bpm.qa.largedata.util.EngineDataGenerator;\n import org.junit.After;\n import org.junit.Before;\n-import org.junit.ClassRule;\n+import org.junit.Rule;\n import org.junit.Test;\n \n public class DeleteDeploymentCascadeTest {\n \n-  @ClassRule\n-  public static ProcessEngineRule processEngineRule = new ProcessEngineRule(\"camunda.cfg.xml\");\n+  @Rule\n+  public ProcessEngineRule processEngineRule = new ProcessEngineRule(\"camunda.cfg.xml\");\n+\n+  protected static final String DATA_PREFIX = DeleteDeploymentCascadeTest.class.getSimpleName();\n \n   protected int GENERATE_PROCESS_INSTANCES_COUNT = 2500;\n   protected RepositoryService repositoryService;\n   protected HistoryService historyService;\n-\n+  protected EngineDataGenerator generator;\n+  \n   @Before\n   public void init() {\n-    repositoryService = processEngineRule.getRepositoryService();\n-    historyService = processEngineRule.getHistoryService();\n+    repositoryService = processEngineRule.getProcessEngine().getRepositoryService();\n+    historyService = processEngineRule.getProcessEngine().getHistoryService();\n \n     // generate data\n-    EngineDataGenerator generator = new EngineDataGenerator(processEngineRule.getProcessEngine(), GENERATE_PROCESS_INSTANCES_COUNT);\n+    generator = new EngineDataGenerator(processEngineRule.getProcessEngine(), GENERATE_PROCESS_INSTANCES_COUNT, DATA_PREFIX);\n     generator.deployDefinitions();\n     generator.generateCompletedProcessInstanceData();\n   }\n \n   @After\n-  public void tearDown() {\n-    TestHelper.assertAndEnsureCleanDbAndCache(processEngineRule.getProcessEngine(), false);\n+  public void teardown() {\n+    Deployment deployment = repositoryService.createDeploymentQuery().deploymentName(generator.getDeploymentName()).singleResult();\n+    if (deployment != null) {\n+      repositoryService.deleteDeployment(deployment.getId(), false);\n+      List<HistoricProcessInstance> processInstances = historyService.createHistoricProcessInstanceQuery()\n+          .processDefinitionKey(generator.getAutoCompleteProcessKey()).list();\n+      if (!processInstances.isEmpty()) {\n+        List<String> processInstanceIds = processInstances.stream().map(HistoricProcessInstance::getId).collect(Collectors.toList());\n+        List<List<String>> partitions = CollectionUtil.partition(processInstanceIds, DbSqlSessionFactory.MAXIMUM_NUMBER_PARAMS);\n+        for (List<String> partition : partitions) {\n+          historyService.deleteHistoricProcessInstances(partition);\n+        }\n+      }", "originalCommit": "632f0cd252664849a7d987cb209324127446ae0e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9034994d776390acc7fa39bad599d0d7934b56c3", "chunk": "diff --git a/qa/large-data-tests/src/test/java/org/camunda/bpm/qa/largedata/DeleteDeploymentCascadeTest.java b/qa/large-data-tests/src/test/java/org/camunda/bpm/qa/largedata/DeleteDeploymentCascadeTest.java\nindex d1655f067c..6abec92912 100644\n--- a/qa/large-data-tests/src/test/java/org/camunda/bpm/qa/largedata/DeleteDeploymentCascadeTest.java\n+++ b/qa/large-data-tests/src/test/java/org/camunda/bpm/qa/largedata/DeleteDeploymentCascadeTest.java\n\n@@ -61,7 +61,6 @@ public class DeleteDeploymentCascadeTest {\n   public void teardown() {\n     Deployment deployment = repositoryService.createDeploymentQuery().deploymentName(generator.getDeploymentName()).singleResult();\n     if (deployment != null) {\n-      repositoryService.deleteDeployment(deployment.getId(), false);\n       List<HistoricProcessInstance> processInstances = historyService.createHistoricProcessInstanceQuery()\n           .processDefinitionKey(generator.getAutoCompleteProcessKey()).list();\n       if (!processInstances.isEmpty()) {\n"}}, {"oid": "9034994d776390acc7fa39bad599d0d7934b56c3", "url": "https://github.com/camunda/camunda-bpm-platform/commit/9034994d776390acc7fa39bad599d0d7934b56c3", "message": "chore(test): reorder cleanup\r\n\r\nRelated to CAM-12205\n\nCo-authored-by: yanavasileva <yanavasileva@users.noreply.github.com>", "committedDate": "2020-08-03T11:11:11Z", "type": "commit"}]}