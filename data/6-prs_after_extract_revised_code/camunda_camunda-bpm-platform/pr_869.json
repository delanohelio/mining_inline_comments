{"pr_number": 869, "pr_title": "chore(engine): adjust telemetry configuration property", "pr_createdAt": "2020-06-23T09:08:47Z", "pr_url": "https://github.com/camunda/camunda-bpm-platform/pull/869", "timeline": [{"oid": "bed26948e7c7110aca81693b973fca26647a9246", "url": "https://github.com/camunda/camunda-bpm-platform/commit/bed26948e7c7110aca81693b973fca26647a9246", "message": "chore(engine): adjust telemetry configuration property\n\n* renamed to `telemetryInitialized`\n* considered only for the initial value of the telemetryEnabled db property\n\nRelated to CAM-12023", "committedDate": "2020-06-23T09:03:26Z", "type": "commit"}, {"oid": "30a05dfe711a3d2fa7647ab9374c876d740ec55d", "url": "https://github.com/camunda/camunda-bpm-platform/commit/30a05dfe711a3d2fa7647ab9374c876d740ec55d", "message": "improve(test): improve telemetry authoration test", "committedDate": "2020-06-23T15:11:47Z", "type": "commit"}, {"oid": "30a05dfe711a3d2fa7647ab9374c876d740ec55d", "url": "https://github.com/camunda/camunda-bpm-platform/commit/30a05dfe711a3d2fa7647ab9374c876d740ec55d", "message": "improve(test): improve telemetry authoration test", "committedDate": "2020-06-23T15:11:47Z", "type": "forcePushed"}, {"oid": "9205d9e8067e841c3023ce0089b6f7976bfa549d", "url": "https://github.com/camunda/camunda-bpm-platform/commit/9205d9e8067e841c3023ce0089b6f7976bfa549d", "message": "improve(test): cleanup db property only if the test is run", "committedDate": "2020-06-24T07:00:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc3NDUwNQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/869#discussion_r444774505", "bodyText": "I would prefer an active verb for this property, e.g. initializeTelemetry. The reason is that this property refers to something the engine does once on startup. Other properties that use passive voice (e.g. authorizationEnabled) refer to a state of the engine during its lifetime.", "author": "ThorbenLindhauer", "createdAt": "2020-06-24T09:44:29Z", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java", "diffHunk": "@@ -865,7 +865,8 @@\n \n \n   // telemetry ///////////////////////////////////////////////////////\n-  protected boolean telemetryEnabled = false;\n+  /** if set to true the telemetry will be enabled from the first engine start*/\n+  protected boolean telemetryInitialized = false;", "originalCommit": "9205d9e8067e841c3023ce0089b6f7976bfa549d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98b7a59059edc60cbf235e0f6878966f568057c4", "chunk": "diff --git a/engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java b/engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java\nindex 7de7aac21e..05237d165f 100644\n--- a/engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java\n+++ b/engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java\n\n@@ -865,8 +865,13 @@ public abstract class ProcessEngineConfigurationImpl extends ProcessEngineConfig\n \n \n   // telemetry ///////////////////////////////////////////////////////\n-  /** if set to true the telemetry will be enabled from the first engine start*/\n-  protected boolean telemetryInitialized = false;\n+  /**\n+   * Sets the initial property value of telemetry configuration only once\n+   * when it has never been enabled/disabled before.\n+   * Subsequent changes can be done only via the\n+   * {@link ManagementService#enableTelemetry(boolean) Telemetry} API in {@link ManagementService}\n+   */\n+  protected boolean initializeTelemetry = false;\n   /** The endpoint which telemetry is sent to */\n   protected String telemetryEndpoint = \"https://api.telemetry.camunda.cloud/pings\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc3NDg4Mg==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/869#discussion_r444774882", "bodyText": "The Javadoc should be a bit more verbose to make it more clear what the configuration does. E.g. explain that this will initialize the telemetry configuration only once when it has never been enabled/disabled before. After that, it can only be changed via API.", "author": "ThorbenLindhauer", "createdAt": "2020-06-24T09:45:09Z", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java", "diffHunk": "@@ -865,7 +865,8 @@\n \n \n   // telemetry ///////////////////////////////////////////////////////\n-  protected boolean telemetryEnabled = false;\n+  /** if set to true the telemetry will be enabled from the first engine start*/", "originalCommit": "9205d9e8067e841c3023ce0089b6f7976bfa549d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg0Mjg4NQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/869#discussion_r444842885", "bodyText": "I extended the javadoc, could you please have a look", "author": "yanavasileva", "createdAt": "2020-06-24T12:00:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc3NDg4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "98b7a59059edc60cbf235e0f6878966f568057c4", "chunk": "diff --git a/engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java b/engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java\nindex 7de7aac21e..05237d165f 100644\n--- a/engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java\n+++ b/engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java\n\n@@ -865,8 +865,13 @@ public abstract class ProcessEngineConfigurationImpl extends ProcessEngineConfig\n \n \n   // telemetry ///////////////////////////////////////////////////////\n-  /** if set to true the telemetry will be enabled from the first engine start*/\n-  protected boolean telemetryInitialized = false;\n+  /**\n+   * Sets the initial property value of telemetry configuration only once\n+   * when it has never been enabled/disabled before.\n+   * Subsequent changes can be done only via the\n+   * {@link ManagementService#enableTelemetry(boolean) Telemetry} API in {@link ManagementService}\n+   */\n+  protected boolean initializeTelemetry = false;\n   /** The endpoint which telemetry is sent to */\n   protected String telemetryEndpoint = \"https://api.telemetry.camunda.cloud/pings\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc3NTk1MA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/869#discussion_r444775950", "bodyText": "Not directly related to the topic of this ticket: I think this API design is a bit confusing. To disable delemetry, I would write managementService.enableTelemetry(false) which is not intuitive to read. Maybe toggleTelemetry instead of enableTelemetry is more clear.", "author": "ThorbenLindhauer", "createdAt": "2020-06-24T09:46:57Z", "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/ManagementAuthorizationTest.java", "diffHunk": "@@ -252,14 +252,17 @@ public void testTelemetryEnabledWithoutAutorization() {\n \n   public void testTelemetryEnabledAsCamundaAdmin() {\n     // given\n+    disableAuthorization();\n+    managementService.enableTelemetry(true);\n+    enableAuthorization();\n     identityService.setAuthentication(userId, Collections.singletonList(Groups.CAMUNDA_ADMIN));\n \n     // when\n-    managementService.enableTelemetry(true);\n+    managementService.enableTelemetry(false);", "originalCommit": "9205d9e8067e841c3023ce0089b6f7976bfa549d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgzMDIzMg==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/869#discussion_r444830232", "bodyText": "I will change it in CAM-12078", "author": "yanavasileva", "createdAt": "2020-06-24T11:35:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc3NTk1MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc3NjE2OA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/869#discussion_r444776168", "bodyText": "Not directly related to the topic of this ticket: Why is there no API method to check if telemetry is enabled?", "author": "ThorbenLindhauer", "createdAt": "2020-06-24T09:47:18Z", "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/ManagementAuthorizationTest.java", "diffHunk": "@@ -252,14 +252,17 @@ public void testTelemetryEnabledWithoutAutorization() {\n \n   public void testTelemetryEnabledAsCamundaAdmin() {\n     // given\n+    disableAuthorization();\n+    managementService.enableTelemetry(true);\n+    enableAuthorization();\n     identityService.setAuthentication(userId, Collections.singletonList(Groups.CAMUNDA_ADMIN));\n \n     // when\n-    managementService.enableTelemetry(true);\n+    managementService.enableTelemetry(false);\n \n     // then\n     String telemetryPropertyValue = TelemetryHelper.fetchConfigurationProperty(processEngineConfiguration).getValue();", "originalCommit": "9205d9e8067e841c3023ce0089b6f7976bfa549d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgzMDE4OQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/869#discussion_r444830189", "bodyText": "I created CAM-12078 for this.", "author": "yanavasileva", "createdAt": "2020-06-24T11:35:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc3NjE2OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc3NjYwOQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/869#discussion_r444776609", "bodyText": "Not directly related to the topic of this ticket: Why does the test method sleep for 2 seconds?", "author": "ThorbenLindhauer", "createdAt": "2020-06-24T09:48:00Z", "path": "engine/src/test/java/org/camunda/bpm/engine/test/concurrency/ConcurrentTelemetryConfigurationTest.java", "diffHunk": "@@ -52,6 +46,8 @@ protected void runTest() throws Throwable {\n         || (transactionIsolationLevel != null && !transactionIsolationLevel.equals(Connection.TRANSACTION_READ_COMMITTED))) {\n       // skip test method - if database is H2\n     } else {\n+      // clean up the db property\n+      TestHelper.deleteTelemetryProperty(processEngineConfiguration);", "originalCommit": "9205d9e8067e841c3023ce0089b6f7976bfa549d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgzNjI4Nw==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/869#discussion_r444836287", "bodyText": "thread2 to make progress before thread1 continues and finishes, otherwise, the concurrent situation might not happen if thread1 is faster. I guess this can be rewritten and improved (I didn't come up with how).", "author": "yanavasileva", "createdAt": "2020-06-24T11:47:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc3NjYwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk4NjkyMg==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/869#discussion_r444986922", "bodyText": "Yana and I discussed this and understood that the Thread.sleep is necessary. The threads block on the pessismistic lock and in the concurrency test we have no chance to be notified of that waiting, so the best solution to is to choose a timeout that makes it quite likely that a thread reaches that waiting point.", "author": "ThorbenLindhauer", "createdAt": "2020-06-24T15:36:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc3NjYwOQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "98b7a59059edc60cbf235e0f6878966f568057c4", "url": "https://github.com/camunda/camunda-bpm-platform/commit/98b7a59059edc60cbf235e0f6878966f568057c4", "message": "improve(engine): rename telemetry configuration property\n\nand extend its javadoc", "committedDate": "2020-06-24T11:59:06Z", "type": "commit"}]}