{"pr_number": 777, "pr_title": "I can grant Historic Process Instance Authorizations", "pr_createdAt": "2020-04-06T16:29:44Z", "pr_url": "https://github.com/camunda/camunda-bpm-platform/pull/777", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEwMjM1MQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/777#discussion_r408102351", "bodyText": "Shouldn't this check HistoricProcessInstancePermissions.READ?", "author": "mboskamp", "createdAt": "2020-04-14T12:38:53Z", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/AuthorizationManager.java", "diffHunk": "@@ -676,13 +690,51 @@ public void configureJobQuery(JobQueryImpl query) {\n   // historic process instance query ///////////////////////////////////\n \n   public void configureHistoricProcessInstanceQuery(HistoricProcessInstanceQueryImpl query) {\n-    configureQuery(query, PROCESS_DEFINITION, \"SELF.PROC_DEF_KEY_\", READ_HISTORY);\n+    AuthorizationCheck authCheck = query.getAuthCheck();\n+\n+    boolean isHistoricInstancePermissionsEnabled = isHistoricInstancePermissionsEnabled();\n+    authCheck.setHistoricInstancePermissionsEnabled(isHistoricInstancePermissionsEnabled);\n+\n+    if (!isHistoricInstancePermissionsEnabled) {\n+      configureQuery(query, PROCESS_DEFINITION, \"SELF.PROC_DEF_KEY_\", READ_HISTORY);\n+\n+    } else {\n+      configureQuery(query);\n+\n+      CompositePermissionCheck permissionCheck = new PermissionCheckBuilder()\n+          .disjunctive()\n+          .atomicCheck(PROCESS_DEFINITION, \"SELF.PROC_DEF_KEY_\", READ_HISTORY)\n+          .atomicCheck(HISTORIC_PROCESS_INSTANCE, \"SELF.ID_\", READ)", "originalCommit": "47c90e14aaff79e0c6495b00f1bbb8fd227a8cf8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI0NzMwNQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/777#discussion_r411247305", "bodyText": "\ud83d\udc4d", "author": "tasso94", "createdAt": "2020-04-20T09:54:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEwMjM1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "ba6fc0f3dc552abbf87831b3e7af498ad473b692", "chunk": "diff --git a/engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/AuthorizationManager.java b/engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/AuthorizationManager.java\nindex da7f1469d3..fdd4a1b91d 100644\n--- a/engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/AuthorizationManager.java\n+++ b/engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/AuthorizationManager.java\n\n@@ -690,51 +676,13 @@ public class AuthorizationManager extends AbstractManager {\n   // historic process instance query ///////////////////////////////////\n \n   public void configureHistoricProcessInstanceQuery(HistoricProcessInstanceQueryImpl query) {\n-    AuthorizationCheck authCheck = query.getAuthCheck();\n-\n-    boolean isHistoricInstancePermissionsEnabled = isHistoricInstancePermissionsEnabled();\n-    authCheck.setHistoricInstancePermissionsEnabled(isHistoricInstancePermissionsEnabled);\n-\n-    if (!isHistoricInstancePermissionsEnabled) {\n-      configureQuery(query, PROCESS_DEFINITION, \"SELF.PROC_DEF_KEY_\", READ_HISTORY);\n-\n-    } else {\n-      configureQuery(query);\n-\n-      CompositePermissionCheck permissionCheck = new PermissionCheckBuilder()\n-          .disjunctive()\n-          .atomicCheck(PROCESS_DEFINITION, \"SELF.PROC_DEF_KEY_\", READ_HISTORY)\n-          .atomicCheck(HISTORIC_PROCESS_INSTANCE, \"SELF.ID_\", READ)\n-          .build();\n-\n-      addPermissionCheck(authCheck, permissionCheck);\n-\n-    }\n+    configureQuery(query, PROCESS_DEFINITION, \"SELF.PROC_DEF_KEY_\", READ_HISTORY);\n   }\n \n   // historic activity instance query /////////////////////////////////\n \n   public void configureHistoricActivityInstanceQuery(HistoricActivityInstanceQueryImpl query) {\n-    AuthorizationCheck authCheck = query.getAuthCheck();\n-\n-    boolean isHistoricInstancePermissionsEnabled = isHistoricInstancePermissionsEnabled();\n-    authCheck.setHistoricInstancePermissionsEnabled(isHistoricInstancePermissionsEnabled);\n-\n-    if (!isHistoricInstancePermissionsEnabled) {\n-      configureQuery(query, PROCESS_DEFINITION, \"RES.PROC_DEF_KEY_\", READ_HISTORY);\n-\n-    } else {\n-      configureQuery(query);\n-\n-      CompositePermissionCheck permissionCheck = new PermissionCheckBuilder()\n-          .disjunctive()\n-          .atomicCheck(PROCESS_DEFINITION, \"RES.PROC_DEF_KEY_\", READ_HISTORY)\n-          .atomicCheck(HISTORIC_PROCESS_INSTANCE, \"RES.PROC_INST_ID_\", READ)\n-          .build();\n-\n-      addPermissionCheck(authCheck, permissionCheck);\n-\n-    }\n+    configureQuery(query, PROCESS_DEFINITION, \"RES.PROC_DEF_KEY_\", READ_HISTORY);\n   }\n \n   // historic task instance query ////////////////////////////////////\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEyMTQ4OA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/777#discussion_r408121488", "bodyText": "Shouldn't this check HistoricProcessInstancePermissions.READ?", "author": "mboskamp", "createdAt": "2020-04-14T13:08:11Z", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/AuthorizationManager.java", "diffHunk": "@@ -676,13 +690,51 @@ public void configureJobQuery(JobQueryImpl query) {\n   // historic process instance query ///////////////////////////////////\n \n   public void configureHistoricProcessInstanceQuery(HistoricProcessInstanceQueryImpl query) {\n-    configureQuery(query, PROCESS_DEFINITION, \"SELF.PROC_DEF_KEY_\", READ_HISTORY);\n+    AuthorizationCheck authCheck = query.getAuthCheck();\n+\n+    boolean isHistoricInstancePermissionsEnabled = isHistoricInstancePermissionsEnabled();\n+    authCheck.setHistoricInstancePermissionsEnabled(isHistoricInstancePermissionsEnabled);\n+\n+    if (!isHistoricInstancePermissionsEnabled) {\n+      configureQuery(query, PROCESS_DEFINITION, \"SELF.PROC_DEF_KEY_\", READ_HISTORY);\n+\n+    } else {\n+      configureQuery(query);\n+\n+      CompositePermissionCheck permissionCheck = new PermissionCheckBuilder()\n+          .disjunctive()\n+          .atomicCheck(PROCESS_DEFINITION, \"SELF.PROC_DEF_KEY_\", READ_HISTORY)\n+          .atomicCheck(HISTORIC_PROCESS_INSTANCE, \"SELF.ID_\", READ)\n+          .build();\n+\n+      addPermissionCheck(authCheck, permissionCheck);\n+\n+    }\n   }\n \n   // historic activity instance query /////////////////////////////////\n \n   public void configureHistoricActivityInstanceQuery(HistoricActivityInstanceQueryImpl query) {\n-    configureQuery(query, PROCESS_DEFINITION, \"RES.PROC_DEF_KEY_\", READ_HISTORY);\n+    AuthorizationCheck authCheck = query.getAuthCheck();\n+\n+    boolean isHistoricInstancePermissionsEnabled = isHistoricInstancePermissionsEnabled();\n+    authCheck.setHistoricInstancePermissionsEnabled(isHistoricInstancePermissionsEnabled);\n+\n+    if (!isHistoricInstancePermissionsEnabled) {\n+      configureQuery(query, PROCESS_DEFINITION, \"RES.PROC_DEF_KEY_\", READ_HISTORY);\n+\n+    } else {\n+      configureQuery(query);\n+\n+      CompositePermissionCheck permissionCheck = new PermissionCheckBuilder()\n+          .disjunctive()\n+          .atomicCheck(PROCESS_DEFINITION, \"RES.PROC_DEF_KEY_\", READ_HISTORY)\n+          .atomicCheck(HISTORIC_PROCESS_INSTANCE, \"RES.PROC_INST_ID_\", READ)", "originalCommit": "47c90e14aaff79e0c6495b00f1bbb8fd227a8cf8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI0NzQzNQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/777#discussion_r411247435", "bodyText": "\ud83d\udc4d", "author": "tasso94", "createdAt": "2020-04-20T09:54:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEyMTQ4OA=="}], "type": "inlineReview", "revised_code": {"commit": "ba6fc0f3dc552abbf87831b3e7af498ad473b692", "chunk": "diff --git a/engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/AuthorizationManager.java b/engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/AuthorizationManager.java\nindex da7f1469d3..fdd4a1b91d 100644\n--- a/engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/AuthorizationManager.java\n+++ b/engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/AuthorizationManager.java\n\n@@ -690,51 +676,13 @@ public class AuthorizationManager extends AbstractManager {\n   // historic process instance query ///////////////////////////////////\n \n   public void configureHistoricProcessInstanceQuery(HistoricProcessInstanceQueryImpl query) {\n-    AuthorizationCheck authCheck = query.getAuthCheck();\n-\n-    boolean isHistoricInstancePermissionsEnabled = isHistoricInstancePermissionsEnabled();\n-    authCheck.setHistoricInstancePermissionsEnabled(isHistoricInstancePermissionsEnabled);\n-\n-    if (!isHistoricInstancePermissionsEnabled) {\n-      configureQuery(query, PROCESS_DEFINITION, \"SELF.PROC_DEF_KEY_\", READ_HISTORY);\n-\n-    } else {\n-      configureQuery(query);\n-\n-      CompositePermissionCheck permissionCheck = new PermissionCheckBuilder()\n-          .disjunctive()\n-          .atomicCheck(PROCESS_DEFINITION, \"SELF.PROC_DEF_KEY_\", READ_HISTORY)\n-          .atomicCheck(HISTORIC_PROCESS_INSTANCE, \"SELF.ID_\", READ)\n-          .build();\n-\n-      addPermissionCheck(authCheck, permissionCheck);\n-\n-    }\n+    configureQuery(query, PROCESS_DEFINITION, \"SELF.PROC_DEF_KEY_\", READ_HISTORY);\n   }\n \n   // historic activity instance query /////////////////////////////////\n \n   public void configureHistoricActivityInstanceQuery(HistoricActivityInstanceQueryImpl query) {\n-    AuthorizationCheck authCheck = query.getAuthCheck();\n-\n-    boolean isHistoricInstancePermissionsEnabled = isHistoricInstancePermissionsEnabled();\n-    authCheck.setHistoricInstancePermissionsEnabled(isHistoricInstancePermissionsEnabled);\n-\n-    if (!isHistoricInstancePermissionsEnabled) {\n-      configureQuery(query, PROCESS_DEFINITION, \"RES.PROC_DEF_KEY_\", READ_HISTORY);\n-\n-    } else {\n-      configureQuery(query);\n-\n-      CompositePermissionCheck permissionCheck = new PermissionCheckBuilder()\n-          .disjunctive()\n-          .atomicCheck(PROCESS_DEFINITION, \"RES.PROC_DEF_KEY_\", READ_HISTORY)\n-          .atomicCheck(HISTORIC_PROCESS_INSTANCE, \"RES.PROC_INST_ID_\", READ)\n-          .build();\n-\n-      addPermissionCheck(authCheck, permissionCheck);\n-\n-    }\n+    configureQuery(query, PROCESS_DEFINITION, \"RES.PROC_DEF_KEY_\", READ_HISTORY);\n   }\n \n   // historic task instance query ////////////////////////////////////\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3OTczNQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/777#discussion_r408879735", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void testCheckNoneOnHHistoricProcessInstanceAndReadHistoryPermissionOnProcessDefinition() {\n          \n          \n            \n              public void testCheckNoneOnHistoricProcessInstanceAndReadHistoryPermissionOnProcessDefinition() {", "author": "mboskamp", "createdAt": "2020-04-15T14:20:24Z", "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/history/HistoricDetailAuthorizationTest.java", "diffHunk": "@@ -998,6 +1000,137 @@ public void testHistoricTaskPermissionsAuthorizationDisabled() {\n     assertEquals(1, result.size());\n   }\n \n+  public void testCheckNonePermissionOnHistoricProcessInstance() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = startProcessInstanceByKey(PROCESS_KEY).getId();\n+    String taskId = selectSingleTask().getId();\n+    disableAuthorization();\n+    taskService.setVariable(taskId, \"foo\", \"bar\");\n+    enableAuthorization();\n+\n+    createGrantAuthorization(HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n+        HistoricProcessInstancePermissions.NONE);\n+\n+    // when\n+    List<HistoricDetail> result = historyService.createHistoricDetailQuery()\n+        .list();\n+\n+    // then\n+    assertEquals(0, result.size());\n+  }\n+\n+  public void testCheckReadPermissionOnHistoricProcessInstance_GlobalVariable() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = startProcessInstanceByKey(PROCESS_KEY).getId();\n+    disableAuthorization();\n+    runtimeService.setVariable(processInstanceId, \"foo\", \"bar\");\n+    enableAuthorization();\n+\n+    createGrantAuthorization(HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n+        HistoricProcessInstancePermissions.READ);\n+\n+    // when\n+    List<HistoricDetail> result = historyService.createHistoricDetailQuery()\n+        .list();\n+\n+    // then\n+    assertEquals(1, result.size());\n+  }\n+\n+  public void testCheckReadPermissionOnHistoricProcessInstance_LocalVariable() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = startProcessInstanceByKey(PROCESS_KEY).getId();\n+    String taskId = selectSingleTask().getId();\n+    disableAuthorization();\n+    taskService.setVariable(taskId, \"foo\", \"bar\");\n+    enableAuthorization();\n+\n+    createGrantAuthorization(HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n+        HistoricProcessInstancePermissions.READ);\n+\n+    // when\n+    List<HistoricDetail> result = historyService.createHistoricDetailQuery()\n+        .list();\n+\n+    // then\n+    assertEquals(1, result.size());\n+  }\n+\n+  public void testCheckReadPermissionOnCompletedHistoricProcessInstance() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = startProcessInstanceByKey(PROCESS_KEY).getId();\n+    String taskId = selectSingleTask().getId();\n+    disableAuthorization();\n+    taskService.setVariable(taskId, \"foo\", \"bar\");\n+    taskService.complete(taskId);\n+    enableAuthorization();\n+\n+    createGrantAuthorization(HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n+        HistoricProcessInstancePermissions.READ);\n+\n+    // when\n+    List<HistoricDetail> result = historyService.createHistoricDetailQuery()\n+        .list();\n+\n+    // then\n+    assertEquals(1, result.size());\n+  }\n+\n+  public void testCheckNoneOnHHistoricProcessInstanceAndReadHistoryPermissionOnProcessDefinition() {", "originalCommit": "47c90e14aaff79e0c6495b00f1bbb8fd227a8cf8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI0NzUwMA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/777#discussion_r411247500", "bodyText": "\ud83d\udc4d", "author": "tasso94", "createdAt": "2020-04-20T09:54:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3OTczNQ=="}], "type": "inlineReview", "revised_code": {"commit": "ba6fc0f3dc552abbf87831b3e7af498ad473b692", "chunk": "diff --git a/engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/history/HistoricDetailAuthorizationTest.java b/engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/history/HistoricDetailAuthorizationTest.java\nindex e9b090b882..06d700e59f 100644\n--- a/engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/history/HistoricDetailAuthorizationTest.java\n+++ b/engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/history/HistoricDetailAuthorizationTest.java\n\n@@ -1000,137 +998,6 @@ public class HistoricDetailAuthorizationTest extends AuthorizationTest {\n     assertEquals(1, result.size());\n   }\n \n-  public void testCheckNonePermissionOnHistoricProcessInstance() {\n-    // given\n-    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n-\n-    String processInstanceId = startProcessInstanceByKey(PROCESS_KEY).getId();\n-    String taskId = selectSingleTask().getId();\n-    disableAuthorization();\n-    taskService.setVariable(taskId, \"foo\", \"bar\");\n-    enableAuthorization();\n-\n-    createGrantAuthorization(HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n-        HistoricProcessInstancePermissions.NONE);\n-\n-    // when\n-    List<HistoricDetail> result = historyService.createHistoricDetailQuery()\n-        .list();\n-\n-    // then\n-    assertEquals(0, result.size());\n-  }\n-\n-  public void testCheckReadPermissionOnHistoricProcessInstance_GlobalVariable() {\n-    // given\n-    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n-\n-    String processInstanceId = startProcessInstanceByKey(PROCESS_KEY).getId();\n-    disableAuthorization();\n-    runtimeService.setVariable(processInstanceId, \"foo\", \"bar\");\n-    enableAuthorization();\n-\n-    createGrantAuthorization(HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n-        HistoricProcessInstancePermissions.READ);\n-\n-    // when\n-    List<HistoricDetail> result = historyService.createHistoricDetailQuery()\n-        .list();\n-\n-    // then\n-    assertEquals(1, result.size());\n-  }\n-\n-  public void testCheckReadPermissionOnHistoricProcessInstance_LocalVariable() {\n-    // given\n-    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n-\n-    String processInstanceId = startProcessInstanceByKey(PROCESS_KEY).getId();\n-    String taskId = selectSingleTask().getId();\n-    disableAuthorization();\n-    taskService.setVariable(taskId, \"foo\", \"bar\");\n-    enableAuthorization();\n-\n-    createGrantAuthorization(HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n-        HistoricProcessInstancePermissions.READ);\n-\n-    // when\n-    List<HistoricDetail> result = historyService.createHistoricDetailQuery()\n-        .list();\n-\n-    // then\n-    assertEquals(1, result.size());\n-  }\n-\n-  public void testCheckReadPermissionOnCompletedHistoricProcessInstance() {\n-    // given\n-    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n-\n-    String processInstanceId = startProcessInstanceByKey(PROCESS_KEY).getId();\n-    String taskId = selectSingleTask().getId();\n-    disableAuthorization();\n-    taskService.setVariable(taskId, \"foo\", \"bar\");\n-    taskService.complete(taskId);\n-    enableAuthorization();\n-\n-    createGrantAuthorization(HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n-        HistoricProcessInstancePermissions.READ);\n-\n-    // when\n-    List<HistoricDetail> result = historyService.createHistoricDetailQuery()\n-        .list();\n-\n-    // then\n-    assertEquals(1, result.size());\n-  }\n-\n-  public void testCheckNoneOnHHistoricProcessInstanceAndReadHistoryPermissionOnProcessDefinition() {\n-    // given\n-    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n-\n-    String processInstanceId = startProcessInstanceByKey(PROCESS_KEY).getId();\n-    String taskId = selectSingleTask().getId();\n-    disableAuthorization();\n-    taskService.setVariable(taskId, \"foo\", \"bar\");\n-    taskService.complete(taskId);\n-    enableAuthorization();\n-\n-    createGrantAuthorization(HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n-        HistoricProcessInstancePermissions.NONE);\n-    createGrantAuthorization(PROCESS_DEFINITION, PROCESS_KEY, userId, READ_HISTORY);\n-\n-    // when\n-    List<HistoricDetail> result = historyService.createHistoricDetailQuery()\n-        .list();\n-\n-    // then\n-    assertEquals(1, result.size());\n-  }\n-\n-  public void testCheckReadOnHistoricProcessInstanceAndNonePermissionOnProcessDefinition() {\n-    // given\n-    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n-\n-    String processInstanceId = startProcessInstanceByKey(PROCESS_KEY).getId();\n-    String taskId = selectSingleTask().getId();\n-    disableAuthorization();\n-    taskService.setVariable(taskId, \"foo\", \"bar\");\n-    taskService.complete(taskId);\n-    enableAuthorization();\n-\n-    createGrantAuthorization(HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n-        HistoricProcessInstancePermissions.READ);\n-    createGrantAuthorization(PROCESS_DEFINITION, PROCESS_KEY, userId,\n-        ProcessDefinitionPermissions.NONE);\n-\n-    // when\n-    List<HistoricDetail> result = historyService.createHistoricDetailQuery()\n-        .list();\n-\n-    // then\n-    assertEquals(1, result.size());\n-  }\n-\n   // helper ////////////////////////////////////////////////////////\n \n   protected void verifyQueryResults(HistoricDetailQuery query, int countExpected) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQxNzgyNg==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/777#discussion_r409417826", "bodyText": "Should go into @ After method to make sure it clears authorizations even if an assert statement fails.", "author": "mboskamp", "createdAt": "2020-04-16T09:34:09Z", "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/RemovalTimeStrategyEndTest.java", "diffHunk": "@@ -506,6 +506,169 @@ public void shouldResolveAuthorizationAfterUpdate() {\n     clearAuthorization();\n   }\n \n+  @Test\n+  public void shouldResolveHistoricTaskAuthorization_HistoricProcessInstance() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    testRule.deploy(CALLING_PROCESS);\n+\n+    testRule.deploy(CALLED_PROCESS);\n+\n+    ClockUtil.setCurrentTime(START_DATE);\n+\n+    String processInstanceId = runtimeService.startProcessInstanceByKey(CALLING_PROCESS_KEY)\n+        .getProcessInstanceId();\n+\n+    Authorization authorization =\n+        authorizationService.createNewAuthorization(Authorization.AUTH_TYPE_GRANT);\n+\n+    authorization.setUserId(\"myUserId\");\n+    authorization.setResource(Resources.HISTORIC_PROCESS_INSTANCE);\n+    authorization.setResourceId(processInstanceId);\n+\n+    authorizationService.saveAuthorization(authorization);\n+\n+    // assume\n+    authorization = authorizationService.createAuthorizationQuery()\n+        .resourceType(Resources.HISTORIC_PROCESS_INSTANCE)\n+        .singleResult();\n+\n+    assertThat(authorization.getRemovalTime(), nullValue());\n+\n+    // when\n+    String taskId = taskService.createTaskQuery().singleResult().getId();\n+\n+    ClockUtil.setCurrentTime(END_DATE);\n+\n+    taskService.complete(taskId);\n+\n+    // then\n+    Date removalTime = addDays(END_DATE, 5);\n+\n+    authorization = authorizationService.createAuthorizationQuery()\n+        .resourceType(Resources.HISTORIC_PROCESS_INSTANCE)\n+        .singleResult();\n+\n+    assertThat(authorization.getRemovalTime(), is(removalTime));\n+\n+    // clear\n+    clearAuthorization();", "originalCommit": "67e7a3a84d3213b8b6ac3e3e2416b663a9683352", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI0NzU1OA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/777#discussion_r411247558", "bodyText": "\ud83d\udc4d", "author": "tasso94", "createdAt": "2020-04-20T09:54:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQxNzgyNg=="}], "type": "inlineReview", "revised_code": {"commit": "ba6fc0f3dc552abbf87831b3e7af498ad473b692", "chunk": "diff --git a/engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/RemovalTimeStrategyEndTest.java b/engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/RemovalTimeStrategyEndTest.java\nindex 263ca8935b..5886694a15 100644\n--- a/engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/RemovalTimeStrategyEndTest.java\n+++ b/engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/RemovalTimeStrategyEndTest.java\n\n@@ -506,169 +506,6 @@ public class RemovalTimeStrategyEndTest extends AbstractRemovalTimeTest {\n     clearAuthorization();\n   }\n \n-  @Test\n-  public void shouldResolveHistoricTaskAuthorization_HistoricProcessInstance() {\n-    // given\n-    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n-\n-    testRule.deploy(CALLING_PROCESS);\n-\n-    testRule.deploy(CALLED_PROCESS);\n-\n-    ClockUtil.setCurrentTime(START_DATE);\n-\n-    String processInstanceId = runtimeService.startProcessInstanceByKey(CALLING_PROCESS_KEY)\n-        .getProcessInstanceId();\n-\n-    Authorization authorization =\n-        authorizationService.createNewAuthorization(Authorization.AUTH_TYPE_GRANT);\n-\n-    authorization.setUserId(\"myUserId\");\n-    authorization.setResource(Resources.HISTORIC_PROCESS_INSTANCE);\n-    authorization.setResourceId(processInstanceId);\n-\n-    authorizationService.saveAuthorization(authorization);\n-\n-    // assume\n-    authorization = authorizationService.createAuthorizationQuery()\n-        .resourceType(Resources.HISTORIC_PROCESS_INSTANCE)\n-        .singleResult();\n-\n-    assertThat(authorization.getRemovalTime(), nullValue());\n-\n-    // when\n-    String taskId = taskService.createTaskQuery().singleResult().getId();\n-\n-    ClockUtil.setCurrentTime(END_DATE);\n-\n-    taskService.complete(taskId);\n-\n-    // then\n-    Date removalTime = addDays(END_DATE, 5);\n-\n-    authorization = authorizationService.createAuthorizationQuery()\n-        .resourceType(Resources.HISTORIC_PROCESS_INSTANCE)\n-        .singleResult();\n-\n-    assertThat(authorization.getRemovalTime(), is(removalTime));\n-\n-    // clear\n-    clearAuthorization();\n-  }\n-\n-  @Test\n-  public void shouldResetAuthorizationAfterUpdate_HistoricProcessInstance() {\n-    // given\n-    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n-\n-    testRule.deploy(CALLING_PROCESS);\n-\n-    testRule.deploy(CALLED_PROCESS);\n-\n-    ClockUtil.setCurrentTime(START_DATE);\n-\n-    enabledAuth();\n-    String processInstanceId = runtimeService.startProcessInstanceByKey(CALLING_PROCESS_KEY)\n-        .getProcessInstanceId();\n-    disableAuth();\n-\n-    Authorization authorization =\n-        authorizationService.createNewAuthorization(Authorization.AUTH_TYPE_GRANT);\n-\n-    authorization.setUserId(\"myUserId\");\n-    authorization.setResource(Resources.HISTORIC_PROCESS_INSTANCE);\n-    authorization.setResourceId(processInstanceId);\n-\n-    authorizationService.saveAuthorization(authorization);\n-\n-    ClockUtil.setCurrentTime(END_DATE);\n-\n-    String taskId = taskService.createTaskQuery().singleResult().getId();\n-\n-    taskService.complete(taskId);\n-\n-    // assume\n-    authorization = authorizationService.createAuthorizationQuery()\n-        .resourceType(Resources.HISTORIC_PROCESS_INSTANCE)\n-        .singleResult();\n-\n-    Date removalTime = addDays(END_DATE, 5);\n-\n-    assertThat(authorization.getRootProcessInstanceId(), is(processInstanceId));\n-    assertThat(authorization.getRemovalTime(), is(removalTime));\n-\n-    // when\n-    authorization.setResourceId(\"*\");\n-    authorizationService.saveAuthorization(authorization);\n-\n-    // then\n-    authorization = authorizationService.createAuthorizationQuery()\n-        .resourceType(Resources.HISTORIC_PROCESS_INSTANCE)\n-        .singleResult();\n-\n-    assertThat(authorization.getRootProcessInstanceId(), nullValue());\n-    assertThat(authorization.getRemovalTime(), nullValue());\n-\n-    // clear\n-    clearAuthorization();\n-  }\n-\n-  @Test\n-  public void shouldResolveAuthorizationAfterUpdate_HistoricProcessInstance() {\n-    // given\n-    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n-\n-    testRule.deploy(CALLING_PROCESS);\n-\n-    testRule.deploy(CALLED_PROCESS);\n-\n-    ClockUtil.setCurrentTime(START_DATE);\n-\n-    ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(CALLING_PROCESS_KEY);\n-\n-    ClockUtil.setCurrentTime(END_DATE);\n-\n-    String taskId = taskService.createTaskQuery().singleResult().getId();\n-\n-    taskService.complete(taskId);\n-\n-    Authorization authorization =\n-        authorizationService.createNewAuthorization(Authorization.AUTH_TYPE_GRANT);\n-    authorization.setResource(Resources.HISTORIC_PROCESS_INSTANCE);\n-    authorization.setResourceId(\"*\");\n-    authorization.setUserId(\"foo\");\n-\n-    authorizationService.saveAuthorization(authorization);\n-\n-    // assume\n-    authorization = authorizationService.createAuthorizationQuery()\n-        .resourceType(Resources.HISTORIC_PROCESS_INSTANCE)\n-        .singleResult();\n-\n-    assertThat(authorization.getRootProcessInstanceId(), nullValue());\n-    assertThat(authorization.getRemovalTime(), nullValue());\n-\n-    // when\n-    String processInstanceId = processInstance.getProcessInstanceId();\n-    authorization.setResourceId(processInstanceId);\n-\n-    authorizationService.saveAuthorization(authorization);\n-\n-    // then\n-    authorization = authorizationService.createAuthorizationQuery()\n-        .resourceType(Resources.HISTORIC_PROCESS_INSTANCE)\n-        .singleResult();\n-\n-    Date removalTime = addDays(END_DATE, 5);\n-    assertThat(authorization.getRemovalTime(), is(removalTime));\n-\n-    String rootProcessInstanceId = processInstance.getRootProcessInstanceId();\n-    assertThat(authorization.getRootProcessInstanceId(), is(rootProcessInstanceId));\n-\n-    // clear\n-    clearAuthorization();\n-  }\n-\n   @Test\n   public void shouldWriteHistoryAndResolveHistoricTaskAuthorizationInDifferentTransactions() {\n     // given\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQxODM4Mw==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/777#discussion_r409418383", "bodyText": "Should go into @After method to make sure it clears authorizations even if an assert statement fails.", "author": "mboskamp", "createdAt": "2020-04-16T09:35:02Z", "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/RemovalTimeStrategyStartTest.java", "diffHunk": "@@ -577,6 +577,143 @@ public void shouldResolveAuthorizationAfterUpdate() {\n     clearAuthorization();\n   }\n \n+  @Test\n+  public void shouldResolveHistoricTaskAuthorization_HistoricProcessInstance() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    testRule.deploy(CALLING_PROCESS);\n+\n+    testRule.deploy(CALLED_PROCESS);\n+\n+    ClockUtil.setCurrentTime(START_DATE);\n+\n+    ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(CALLING_PROCESS_KEY);\n+\n+    // when\n+    Authorization authorization =\n+        authorizationService.createNewAuthorization(Authorization.AUTH_TYPE_GRANT);\n+\n+    authorization.setUserId(\"myUserId\");\n+    authorization.setResource(Resources.HISTORIC_PROCESS_INSTANCE);\n+\n+    String processInstanceId = processInstance.getProcessInstanceId();\n+    authorization.setResourceId(processInstanceId);\n+\n+    authorizationService.saveAuthorization(authorization);\n+\n+    // then\n+    Date removalTime = addDays(START_DATE, 5);\n+\n+    assertThat(authorization.getRootProcessInstanceId(), is(processInstance.getRootProcessInstanceId()));\n+    assertThat(authorization.getRemovalTime(), is(removalTime));\n+\n+    // clear\n+    clearAuthorization();", "originalCommit": "67e7a3a84d3213b8b6ac3e3e2416b663a9683352", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI0NzYxNQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/777#discussion_r411247615", "bodyText": "\ud83d\udc4d", "author": "tasso94", "createdAt": "2020-04-20T09:54:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQxODM4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "ba6fc0f3dc552abbf87831b3e7af498ad473b692", "chunk": "diff --git a/engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/RemovalTimeStrategyStartTest.java b/engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/RemovalTimeStrategyStartTest.java\nindex 95877d33f9..d15de42aca 100644\n--- a/engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/RemovalTimeStrategyStartTest.java\n+++ b/engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/RemovalTimeStrategyStartTest.java\n\n@@ -577,143 +577,6 @@ public class RemovalTimeStrategyStartTest extends AbstractRemovalTimeTest {\n     clearAuthorization();\n   }\n \n-  @Test\n-  public void shouldResolveHistoricTaskAuthorization_HistoricProcessInstance() {\n-    // given\n-    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n-\n-    testRule.deploy(CALLING_PROCESS);\n-\n-    testRule.deploy(CALLED_PROCESS);\n-\n-    ClockUtil.setCurrentTime(START_DATE);\n-\n-    ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(CALLING_PROCESS_KEY);\n-\n-    // when\n-    Authorization authorization =\n-        authorizationService.createNewAuthorization(Authorization.AUTH_TYPE_GRANT);\n-\n-    authorization.setUserId(\"myUserId\");\n-    authorization.setResource(Resources.HISTORIC_PROCESS_INSTANCE);\n-\n-    String processInstanceId = processInstance.getProcessInstanceId();\n-    authorization.setResourceId(processInstanceId);\n-\n-    authorizationService.saveAuthorization(authorization);\n-\n-    // then\n-    Date removalTime = addDays(START_DATE, 5);\n-\n-    assertThat(authorization.getRootProcessInstanceId(), is(processInstance.getRootProcessInstanceId()));\n-    assertThat(authorization.getRemovalTime(), is(removalTime));\n-\n-    // clear\n-    clearAuthorization();\n-  }\n-\n-  @Test\n-  public void shouldResetAuthorizationAfterUpdate_HistoricProcessInstance() {\n-    // given\n-    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n-\n-    testRule.deploy(CALLING_PROCESS);\n-\n-    testRule.deploy(CALLED_PROCESS);\n-\n-    ClockUtil.setCurrentTime(START_DATE);\n-\n-    enabledAuth();\n-    ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(CALLING_PROCESS_KEY);\n-    disableAuth();\n-\n-    Authorization authorization =\n-        authorizationService.createNewAuthorization(Authorization.AUTH_TYPE_GRANT);\n-\n-    authorization.setUserId(\"myUserId\");\n-    authorization.setResource(Resources.HISTORIC_PROCESS_INSTANCE);\n-\n-    String processInstanceId = processInstance.getProcessInstanceId();\n-    authorization.setResourceId(processInstanceId);\n-\n-    authorizationService.saveAuthorization(authorization);\n-\n-    // assume\n-    authorization = authorizationService.createAuthorizationQuery()\n-        .resourceType(Resources.HISTORIC_PROCESS_INSTANCE)\n-        .singleResult();\n-\n-    assertThat(authorization.getRootProcessInstanceId(), is(processInstanceId));\n-\n-    Date removalTime = addDays(START_DATE, 5);\n-    assertThat(authorization.getRemovalTime(), is(removalTime));\n-\n-    // when\n-    authorization.setResourceId(\"*\");\n-    authorizationService.saveAuthorization(authorization);\n-\n-    // then\n-    authorization = authorizationService.createAuthorizationQuery()\n-        .resourceType(Resources.HISTORIC_PROCESS_INSTANCE)\n-        .singleResult();\n-\n-    assertThat(authorization.getRootProcessInstanceId(), nullValue());\n-    assertThat(authorization.getRemovalTime(), nullValue());\n-\n-    // clear\n-    clearAuthorization();\n-  }\n-\n-  @Test\n-  public void shouldResolveAuthorizationAfterUpdate_HistoricProcessInstance() {\n-    // given\n-    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n-\n-    testRule.deploy(CALLING_PROCESS);\n-\n-    testRule.deploy(CALLED_PROCESS);\n-\n-    ClockUtil.setCurrentTime(START_DATE);\n-\n-    ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(CALLING_PROCESS_KEY);\n-\n-    Authorization authorization =\n-        authorizationService.createNewAuthorization(Authorization.AUTH_TYPE_GRANT);\n-    authorization.setResource(Resources.HISTORIC_PROCESS_INSTANCE);\n-    authorization.setResourceId(\"*\");\n-    authorization.setUserId(\"foo\");\n-\n-    authorizationService.saveAuthorization(authorization);\n-\n-    // assume\n-    authorization = authorizationService.createAuthorizationQuery()\n-        .resourceType(Resources.HISTORIC_PROCESS_INSTANCE)\n-        .singleResult();\n-\n-    assertThat(authorization.getRootProcessInstanceId(), nullValue());\n-    assertThat(authorization.getRemovalTime(), nullValue());\n-\n-    // when\n-    String processInstanceId = processInstance.getProcessInstanceId();\n-    authorization.setResourceId(processInstanceId);\n-\n-    authorizationService.saveAuthorization(authorization);\n-\n-    // then\n-    authorization = authorizationService.createAuthorizationQuery()\n-        .resourceType(Resources.HISTORIC_PROCESS_INSTANCE)\n-        .singleResult();\n-\n-    String rootProcessInstanceId = processInstance.getRootProcessInstanceId();\n-    assertThat(authorization.getRootProcessInstanceId(), is(rootProcessInstanceId));\n-\n-    Date removalTime = addDays(START_DATE, 5);\n-    assertThat(authorization.getRemovalTime(), is(removalTime));\n-\n-    // clear\n-    clearAuthorization();\n-  }\n-\n   @Test\n   public void shouldWriteHistoryAndResolveHistoricTaskAuthorizationInDifferentTransactions() {\n     // given\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQyNTU4Mw==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/777#discussion_r409425583", "bodyText": "Should go into @After method to make sure it clears authorizations even if an assert statement fails.", "author": "mboskamp", "createdAt": "2020-04-16T09:46:39Z", "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/batch/BatchSetRemovalTimeNonHierarchicalTest.java", "diffHunk": "@@ -503,6 +503,80 @@ public void shouldNotSetRemovalTime_HistoricInstancePermissionsDisabled() {\n     testRule.clearAuthorization();\n   }\n \n+  @Test\n+  public void shouldSetRemovalTime_HistoricProcessInstanceAuthorization() {\n+    // given\n+    testRule.getProcessEngineConfiguration()\n+        .setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = testRule.process().userTask().deploy().start();\n+\n+    Authorization authorization =\n+        authorizationService.createNewAuthorization(Authorization.AUTH_TYPE_GRANT);\n+    authorization.setResource(Resources.HISTORIC_PROCESS_INSTANCE);\n+    authorization.setResourceId(processInstanceId);\n+    authorization.setUserId(\"foo\");\n+\n+    authorizationService.saveAuthorization(authorization);\n+\n+    // when\n+    HistoricProcessInstanceQuery query = historyService.createHistoricProcessInstanceQuery();\n+\n+    testRule.syncExec(\n+        historyService.setRemovalTimeToHistoricProcessInstances()\n+            .absoluteRemovalTime(REMOVAL_TIME)\n+            .byQuery(query)\n+            .executeAsync()\n+    );\n+\n+    // then\n+    authorization = authorizationService.createAuthorizationQuery()\n+            .resourceType(Resources.HISTORIC_PROCESS_INSTANCE)\n+            .singleResult();\n+\n+    assertThat(authorization.getRemovalTime()).isEqualTo(REMOVAL_TIME);\n+\n+    // clear\n+    testRule.clearAuthorization();", "originalCommit": "47c90e14aaff79e0c6495b00f1bbb8fd227a8cf8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI0NzY3MQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/777#discussion_r411247671", "bodyText": "\ud83d\udc4d", "author": "tasso94", "createdAt": "2020-04-20T09:54:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQyNTU4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "ba6fc0f3dc552abbf87831b3e7af498ad473b692", "chunk": "diff --git a/engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/batch/BatchSetRemovalTimeNonHierarchicalTest.java b/engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/batch/BatchSetRemovalTimeNonHierarchicalTest.java\nindex 120508431e..345138d0b7 100644\n--- a/engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/batch/BatchSetRemovalTimeNonHierarchicalTest.java\n+++ b/engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/batch/BatchSetRemovalTimeNonHierarchicalTest.java\n\n@@ -503,80 +503,6 @@ public class BatchSetRemovalTimeNonHierarchicalTest {\n     testRule.clearAuthorization();\n   }\n \n-  @Test\n-  public void shouldSetRemovalTime_HistoricProcessInstanceAuthorization() {\n-    // given\n-    testRule.getProcessEngineConfiguration()\n-        .setEnableHistoricInstancePermissions(true);\n-\n-    String processInstanceId = testRule.process().userTask().deploy().start();\n-\n-    Authorization authorization =\n-        authorizationService.createNewAuthorization(Authorization.AUTH_TYPE_GRANT);\n-    authorization.setResource(Resources.HISTORIC_PROCESS_INSTANCE);\n-    authorization.setResourceId(processInstanceId);\n-    authorization.setUserId(\"foo\");\n-\n-    authorizationService.saveAuthorization(authorization);\n-\n-    // when\n-    HistoricProcessInstanceQuery query = historyService.createHistoricProcessInstanceQuery();\n-\n-    testRule.syncExec(\n-        historyService.setRemovalTimeToHistoricProcessInstances()\n-            .absoluteRemovalTime(REMOVAL_TIME)\n-            .byQuery(query)\n-            .executeAsync()\n-    );\n-\n-    // then\n-    authorization = authorizationService.createAuthorizationQuery()\n-            .resourceType(Resources.HISTORIC_PROCESS_INSTANCE)\n-            .singleResult();\n-\n-    assertThat(authorization.getRemovalTime()).isEqualTo(REMOVAL_TIME);\n-\n-    // clear\n-    testRule.clearAuthorization();\n-  }\n-\n-  @Test\n-  public void shouldNotSetRemovalTime_HistoricProcessInstancePermissionsDisabled() {\n-    // given\n-    testRule.getProcessEngineConfiguration()\n-        .setEnableHistoricInstancePermissions(false);\n-\n-    String processInstanceId = testRule.process().userTask().deploy().start();\n-\n-    Authorization authorization =\n-        authorizationService.createNewAuthorization(Authorization.AUTH_TYPE_GRANT);\n-    authorization.setResource(Resources.HISTORIC_PROCESS_INSTANCE);\n-    authorization.setResourceId(processInstanceId);\n-    authorization.setUserId(\"foo\");\n-\n-    authorizationService.saveAuthorization(authorization);\n-\n-    HistoricProcessInstanceQuery query = historyService.createHistoricProcessInstanceQuery();\n-\n-    // when\n-    testRule.syncExec(\n-        historyService.setRemovalTimeToHistoricProcessInstances()\n-            .absoluteRemovalTime(REMOVAL_TIME)\n-            .byQuery(query)\n-            .executeAsync()\n-    );\n-\n-    authorization = authorizationService.createAuthorizationQuery()\n-        .resourceType(Resources.HISTORIC_PROCESS_INSTANCE)\n-        .singleResult();\n-\n-    // then\n-    assertThat(authorization.getRemovalTime()).isNull();\n-\n-    // clear\n-    testRule.clearAuthorization();\n-  }\n-\n   @Test\n   public void shouldSetRemovalTime_VariableInstance() {\n     // given\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQyNTY0MA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/777#discussion_r409425640", "bodyText": "Should go into @After method to make sure it clears authorizations even if an assert statement fails.", "author": "mboskamp", "createdAt": "2020-04-16T09:46:45Z", "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/batch/BatchSetRemovalTimeNonHierarchicalTest.java", "diffHunk": "@@ -503,6 +503,80 @@ public void shouldNotSetRemovalTime_HistoricInstancePermissionsDisabled() {\n     testRule.clearAuthorization();\n   }\n \n+  @Test\n+  public void shouldSetRemovalTime_HistoricProcessInstanceAuthorization() {\n+    // given\n+    testRule.getProcessEngineConfiguration()\n+        .setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = testRule.process().userTask().deploy().start();\n+\n+    Authorization authorization =\n+        authorizationService.createNewAuthorization(Authorization.AUTH_TYPE_GRANT);\n+    authorization.setResource(Resources.HISTORIC_PROCESS_INSTANCE);\n+    authorization.setResourceId(processInstanceId);\n+    authorization.setUserId(\"foo\");\n+\n+    authorizationService.saveAuthorization(authorization);\n+\n+    // when\n+    HistoricProcessInstanceQuery query = historyService.createHistoricProcessInstanceQuery();\n+\n+    testRule.syncExec(\n+        historyService.setRemovalTimeToHistoricProcessInstances()\n+            .absoluteRemovalTime(REMOVAL_TIME)\n+            .byQuery(query)\n+            .executeAsync()\n+    );\n+\n+    // then\n+    authorization = authorizationService.createAuthorizationQuery()\n+            .resourceType(Resources.HISTORIC_PROCESS_INSTANCE)\n+            .singleResult();\n+\n+    assertThat(authorization.getRemovalTime()).isEqualTo(REMOVAL_TIME);\n+\n+    // clear\n+    testRule.clearAuthorization();\n+  }\n+\n+  @Test\n+  public void shouldNotSetRemovalTime_HistoricProcessInstancePermissionsDisabled() {\n+    // given\n+    testRule.getProcessEngineConfiguration()\n+        .setEnableHistoricInstancePermissions(false);\n+\n+    String processInstanceId = testRule.process().userTask().deploy().start();\n+\n+    Authorization authorization =\n+        authorizationService.createNewAuthorization(Authorization.AUTH_TYPE_GRANT);\n+    authorization.setResource(Resources.HISTORIC_PROCESS_INSTANCE);\n+    authorization.setResourceId(processInstanceId);\n+    authorization.setUserId(\"foo\");\n+\n+    authorizationService.saveAuthorization(authorization);\n+\n+    HistoricProcessInstanceQuery query = historyService.createHistoricProcessInstanceQuery();\n+\n+    // when\n+    testRule.syncExec(\n+        historyService.setRemovalTimeToHistoricProcessInstances()\n+            .absoluteRemovalTime(REMOVAL_TIME)\n+            .byQuery(query)\n+            .executeAsync()\n+    );\n+\n+    authorization = authorizationService.createAuthorizationQuery()\n+        .resourceType(Resources.HISTORIC_PROCESS_INSTANCE)\n+        .singleResult();\n+\n+    // then\n+    assertThat(authorization.getRemovalTime()).isNull();\n+\n+    // clear\n+    testRule.clearAuthorization();", "originalCommit": "47c90e14aaff79e0c6495b00f1bbb8fd227a8cf8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI0NzczNQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/777#discussion_r411247735", "bodyText": "\ud83d\udc4d", "author": "tasso94", "createdAt": "2020-04-20T09:55:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQyNTY0MA=="}], "type": "inlineReview", "revised_code": {"commit": "ba6fc0f3dc552abbf87831b3e7af498ad473b692", "chunk": "diff --git a/engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/batch/BatchSetRemovalTimeNonHierarchicalTest.java b/engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/batch/BatchSetRemovalTimeNonHierarchicalTest.java\nindex 120508431e..345138d0b7 100644\n--- a/engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/batch/BatchSetRemovalTimeNonHierarchicalTest.java\n+++ b/engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/batch/BatchSetRemovalTimeNonHierarchicalTest.java\n\n@@ -503,80 +503,6 @@ public class BatchSetRemovalTimeNonHierarchicalTest {\n     testRule.clearAuthorization();\n   }\n \n-  @Test\n-  public void shouldSetRemovalTime_HistoricProcessInstanceAuthorization() {\n-    // given\n-    testRule.getProcessEngineConfiguration()\n-        .setEnableHistoricInstancePermissions(true);\n-\n-    String processInstanceId = testRule.process().userTask().deploy().start();\n-\n-    Authorization authorization =\n-        authorizationService.createNewAuthorization(Authorization.AUTH_TYPE_GRANT);\n-    authorization.setResource(Resources.HISTORIC_PROCESS_INSTANCE);\n-    authorization.setResourceId(processInstanceId);\n-    authorization.setUserId(\"foo\");\n-\n-    authorizationService.saveAuthorization(authorization);\n-\n-    // when\n-    HistoricProcessInstanceQuery query = historyService.createHistoricProcessInstanceQuery();\n-\n-    testRule.syncExec(\n-        historyService.setRemovalTimeToHistoricProcessInstances()\n-            .absoluteRemovalTime(REMOVAL_TIME)\n-            .byQuery(query)\n-            .executeAsync()\n-    );\n-\n-    // then\n-    authorization = authorizationService.createAuthorizationQuery()\n-            .resourceType(Resources.HISTORIC_PROCESS_INSTANCE)\n-            .singleResult();\n-\n-    assertThat(authorization.getRemovalTime()).isEqualTo(REMOVAL_TIME);\n-\n-    // clear\n-    testRule.clearAuthorization();\n-  }\n-\n-  @Test\n-  public void shouldNotSetRemovalTime_HistoricProcessInstancePermissionsDisabled() {\n-    // given\n-    testRule.getProcessEngineConfiguration()\n-        .setEnableHistoricInstancePermissions(false);\n-\n-    String processInstanceId = testRule.process().userTask().deploy().start();\n-\n-    Authorization authorization =\n-        authorizationService.createNewAuthorization(Authorization.AUTH_TYPE_GRANT);\n-    authorization.setResource(Resources.HISTORIC_PROCESS_INSTANCE);\n-    authorization.setResourceId(processInstanceId);\n-    authorization.setUserId(\"foo\");\n-\n-    authorizationService.saveAuthorization(authorization);\n-\n-    HistoricProcessInstanceQuery query = historyService.createHistoricProcessInstanceQuery();\n-\n-    // when\n-    testRule.syncExec(\n-        historyService.setRemovalTimeToHistoricProcessInstances()\n-            .absoluteRemovalTime(REMOVAL_TIME)\n-            .byQuery(query)\n-            .executeAsync()\n-    );\n-\n-    authorization = authorizationService.createAuthorizationQuery()\n-        .resourceType(Resources.HISTORIC_PROCESS_INSTANCE)\n-        .singleResult();\n-\n-    // then\n-    assertThat(authorization.getRemovalTime()).isNull();\n-\n-    // clear\n-    testRule.clearAuthorization();\n-  }\n-\n   @Test\n   public void shouldSetRemovalTime_VariableInstance() {\n     // given\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQzODU3OA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/777#discussion_r409438578", "bodyText": "Should go into @After method to make sure it clears authorizations even if an assert statement fails.", "author": "mboskamp", "createdAt": "2020-04-16T10:07:31Z", "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/batch/BatchSetRemovalTimeHierarchicalTest.java", "diffHunk": "@@ -702,6 +702,93 @@ public void shouldNotSetRemovalTime_HistoricInstancePermissionsDisabled() {\n     testRule.clearAuthorization();\n   }\n \n+  @Test\n+  public void shouldSetRemovalTime_HistoricProcessInstanceAuthorization() {\n+    // given\n+    testRule.getProcessEngineConfiguration()\n+        .setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = testRule.process().call().userTask().deploy().start();\n+\n+    Authorization authorization =\n+        authorizationService.createNewAuthorization(Authorization.AUTH_TYPE_GRANT);\n+    authorization.setResource(Resources.HISTORIC_PROCESS_INSTANCE);\n+    authorization.setResourceId(processInstanceId);\n+    authorization.setUserId(\"foo\");\n+\n+    authorizationService.saveAuthorization(authorization);\n+\n+    // assume\n+    authorization = authorizationService.createAuthorizationQuery().singleResult();\n+\n+    assertThat(authorization.getRemovalTime()).isNull();\n+\n+    // when\n+    testRule.updateHistoryTimeToLive(\"rootProcess\", 5);\n+\n+    HistoricProcessInstanceQuery query =\n+        historyService.createHistoricProcessInstanceQuery().rootProcessInstances();\n+\n+    testRule.syncExec(\n+        historyService.setRemovalTimeToHistoricProcessInstances()\n+            .calculatedRemovalTime()\n+            .byQuery(query)\n+            .hierarchical()\n+            .executeAsync()\n+    );\n+\n+    // then\n+    authorization = authorizationService.createAuthorizationQuery()\n+            .resourceType(Resources.HISTORIC_PROCESS_INSTANCE)\n+            .singleResult();\n+\n+    assertThat(authorization.getRemovalTime()).isEqualTo(addDays(CURRENT_DATE, 5));\n+\n+    // clear\n+    testRule.clearAuthorization();", "originalCommit": "47c90e14aaff79e0c6495b00f1bbb8fd227a8cf8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI0Nzg0OA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/777#discussion_r411247848", "bodyText": "\ud83d\udc4d", "author": "tasso94", "createdAt": "2020-04-20T09:55:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQzODU3OA=="}], "type": "inlineReview", "revised_code": {"commit": "ba6fc0f3dc552abbf87831b3e7af498ad473b692", "chunk": "diff --git a/engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/batch/BatchSetRemovalTimeHierarchicalTest.java b/engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/batch/BatchSetRemovalTimeHierarchicalTest.java\nindex 1153574341..971c2855b0 100644\n--- a/engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/batch/BatchSetRemovalTimeHierarchicalTest.java\n+++ b/engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/batch/BatchSetRemovalTimeHierarchicalTest.java\n\n@@ -702,93 +702,6 @@ public class BatchSetRemovalTimeHierarchicalTest {\n     testRule.clearAuthorization();\n   }\n \n-  @Test\n-  public void shouldSetRemovalTime_HistoricProcessInstanceAuthorization() {\n-    // given\n-    testRule.getProcessEngineConfiguration()\n-        .setEnableHistoricInstancePermissions(true);\n-\n-    String processInstanceId = testRule.process().call().userTask().deploy().start();\n-\n-    Authorization authorization =\n-        authorizationService.createNewAuthorization(Authorization.AUTH_TYPE_GRANT);\n-    authorization.setResource(Resources.HISTORIC_PROCESS_INSTANCE);\n-    authorization.setResourceId(processInstanceId);\n-    authorization.setUserId(\"foo\");\n-\n-    authorizationService.saveAuthorization(authorization);\n-\n-    // assume\n-    authorization = authorizationService.createAuthorizationQuery().singleResult();\n-\n-    assertThat(authorization.getRemovalTime()).isNull();\n-\n-    // when\n-    testRule.updateHistoryTimeToLive(\"rootProcess\", 5);\n-\n-    HistoricProcessInstanceQuery query =\n-        historyService.createHistoricProcessInstanceQuery().rootProcessInstances();\n-\n-    testRule.syncExec(\n-        historyService.setRemovalTimeToHistoricProcessInstances()\n-            .calculatedRemovalTime()\n-            .byQuery(query)\n-            .hierarchical()\n-            .executeAsync()\n-    );\n-\n-    // then\n-    authorization = authorizationService.createAuthorizationQuery()\n-            .resourceType(Resources.HISTORIC_PROCESS_INSTANCE)\n-            .singleResult();\n-\n-    assertThat(authorization.getRemovalTime()).isEqualTo(addDays(CURRENT_DATE, 5));\n-\n-    // clear\n-    testRule.clearAuthorization();\n-  }\n-\n-  @Test\n-  public void shouldNotSetRemovalTime_HistoricProcessInstancePermissionsDisabled() {\n-    // given\n-    testRule.getProcessEngineConfiguration()\n-        .setEnableHistoricInstancePermissions(false);\n-\n-    String processInstanceId = testRule.process().call().userTask().deploy().start();\n-\n-    Authorization authorization =\n-        authorizationService.createNewAuthorization(Authorization.AUTH_TYPE_GRANT);\n-    authorization.setResource(Resources.HISTORIC_PROCESS_INSTANCE);\n-    authorization.setResourceId(processInstanceId);\n-    authorization.setUserId(\"foo\");\n-\n-    authorizationService.saveAuthorization(authorization);\n-\n-    testRule.updateHistoryTimeToLive(\"rootProcess\", 5);\n-\n-    // when\n-    HistoricProcessInstanceQuery query =\n-        historyService.createHistoricProcessInstanceQuery().rootProcessInstances();\n-\n-    testRule.syncExec(\n-        historyService.setRemovalTimeToHistoricProcessInstances()\n-            .calculatedRemovalTime()\n-            .byQuery(query)\n-            .hierarchical()\n-            .executeAsync()\n-    );\n-\n-    // then\n-    authorization = authorizationService.createAuthorizationQuery()\n-        .resourceType(Resources.HISTORIC_PROCESS_INSTANCE)\n-        .singleResult();\n-\n-    assertThat(authorization.getRemovalTime()).isNull();\n-\n-    // clear\n-    testRule.clearAuthorization();\n-  }\n-\n   @Test\n   public void shouldSetRemovalTime_VariableInstance() {\n     // given\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQzODYzMg==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/777#discussion_r409438632", "bodyText": "Should go into @After method to make sure it clears authorizations even if an assert statement fails.", "author": "mboskamp", "createdAt": "2020-04-16T10:07:36Z", "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/batch/BatchSetRemovalTimeHierarchicalTest.java", "diffHunk": "@@ -702,6 +702,93 @@ public void shouldNotSetRemovalTime_HistoricInstancePermissionsDisabled() {\n     testRule.clearAuthorization();\n   }\n \n+  @Test\n+  public void shouldSetRemovalTime_HistoricProcessInstanceAuthorization() {\n+    // given\n+    testRule.getProcessEngineConfiguration()\n+        .setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = testRule.process().call().userTask().deploy().start();\n+\n+    Authorization authorization =\n+        authorizationService.createNewAuthorization(Authorization.AUTH_TYPE_GRANT);\n+    authorization.setResource(Resources.HISTORIC_PROCESS_INSTANCE);\n+    authorization.setResourceId(processInstanceId);\n+    authorization.setUserId(\"foo\");\n+\n+    authorizationService.saveAuthorization(authorization);\n+\n+    // assume\n+    authorization = authorizationService.createAuthorizationQuery().singleResult();\n+\n+    assertThat(authorization.getRemovalTime()).isNull();\n+\n+    // when\n+    testRule.updateHistoryTimeToLive(\"rootProcess\", 5);\n+\n+    HistoricProcessInstanceQuery query =\n+        historyService.createHistoricProcessInstanceQuery().rootProcessInstances();\n+\n+    testRule.syncExec(\n+        historyService.setRemovalTimeToHistoricProcessInstances()\n+            .calculatedRemovalTime()\n+            .byQuery(query)\n+            .hierarchical()\n+            .executeAsync()\n+    );\n+\n+    // then\n+    authorization = authorizationService.createAuthorizationQuery()\n+            .resourceType(Resources.HISTORIC_PROCESS_INSTANCE)\n+            .singleResult();\n+\n+    assertThat(authorization.getRemovalTime()).isEqualTo(addDays(CURRENT_DATE, 5));\n+\n+    // clear\n+    testRule.clearAuthorization();\n+  }\n+\n+  @Test\n+  public void shouldNotSetRemovalTime_HistoricProcessInstancePermissionsDisabled() {\n+    // given\n+    testRule.getProcessEngineConfiguration()\n+        .setEnableHistoricInstancePermissions(false);\n+\n+    String processInstanceId = testRule.process().call().userTask().deploy().start();\n+\n+    Authorization authorization =\n+        authorizationService.createNewAuthorization(Authorization.AUTH_TYPE_GRANT);\n+    authorization.setResource(Resources.HISTORIC_PROCESS_INSTANCE);\n+    authorization.setResourceId(processInstanceId);\n+    authorization.setUserId(\"foo\");\n+\n+    authorizationService.saveAuthorization(authorization);\n+\n+    testRule.updateHistoryTimeToLive(\"rootProcess\", 5);\n+\n+    // when\n+    HistoricProcessInstanceQuery query =\n+        historyService.createHistoricProcessInstanceQuery().rootProcessInstances();\n+\n+    testRule.syncExec(\n+        historyService.setRemovalTimeToHistoricProcessInstances()\n+            .calculatedRemovalTime()\n+            .byQuery(query)\n+            .hierarchical()\n+            .executeAsync()\n+    );\n+\n+    // then\n+    authorization = authorizationService.createAuthorizationQuery()\n+        .resourceType(Resources.HISTORIC_PROCESS_INSTANCE)\n+        .singleResult();\n+\n+    assertThat(authorization.getRemovalTime()).isNull();\n+\n+    // clear\n+    testRule.clearAuthorization();", "originalCommit": "47c90e14aaff79e0c6495b00f1bbb8fd227a8cf8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI0NzkwOQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/777#discussion_r411247909", "bodyText": "\ud83d\udc4d", "author": "tasso94", "createdAt": "2020-04-20T09:55:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQzODYzMg=="}], "type": "inlineReview", "revised_code": {"commit": "ba6fc0f3dc552abbf87831b3e7af498ad473b692", "chunk": "diff --git a/engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/batch/BatchSetRemovalTimeHierarchicalTest.java b/engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/batch/BatchSetRemovalTimeHierarchicalTest.java\nindex 1153574341..971c2855b0 100644\n--- a/engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/batch/BatchSetRemovalTimeHierarchicalTest.java\n+++ b/engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/batch/BatchSetRemovalTimeHierarchicalTest.java\n\n@@ -702,93 +702,6 @@ public class BatchSetRemovalTimeHierarchicalTest {\n     testRule.clearAuthorization();\n   }\n \n-  @Test\n-  public void shouldSetRemovalTime_HistoricProcessInstanceAuthorization() {\n-    // given\n-    testRule.getProcessEngineConfiguration()\n-        .setEnableHistoricInstancePermissions(true);\n-\n-    String processInstanceId = testRule.process().call().userTask().deploy().start();\n-\n-    Authorization authorization =\n-        authorizationService.createNewAuthorization(Authorization.AUTH_TYPE_GRANT);\n-    authorization.setResource(Resources.HISTORIC_PROCESS_INSTANCE);\n-    authorization.setResourceId(processInstanceId);\n-    authorization.setUserId(\"foo\");\n-\n-    authorizationService.saveAuthorization(authorization);\n-\n-    // assume\n-    authorization = authorizationService.createAuthorizationQuery().singleResult();\n-\n-    assertThat(authorization.getRemovalTime()).isNull();\n-\n-    // when\n-    testRule.updateHistoryTimeToLive(\"rootProcess\", 5);\n-\n-    HistoricProcessInstanceQuery query =\n-        historyService.createHistoricProcessInstanceQuery().rootProcessInstances();\n-\n-    testRule.syncExec(\n-        historyService.setRemovalTimeToHistoricProcessInstances()\n-            .calculatedRemovalTime()\n-            .byQuery(query)\n-            .hierarchical()\n-            .executeAsync()\n-    );\n-\n-    // then\n-    authorization = authorizationService.createAuthorizationQuery()\n-            .resourceType(Resources.HISTORIC_PROCESS_INSTANCE)\n-            .singleResult();\n-\n-    assertThat(authorization.getRemovalTime()).isEqualTo(addDays(CURRENT_DATE, 5));\n-\n-    // clear\n-    testRule.clearAuthorization();\n-  }\n-\n-  @Test\n-  public void shouldNotSetRemovalTime_HistoricProcessInstancePermissionsDisabled() {\n-    // given\n-    testRule.getProcessEngineConfiguration()\n-        .setEnableHistoricInstancePermissions(false);\n-\n-    String processInstanceId = testRule.process().call().userTask().deploy().start();\n-\n-    Authorization authorization =\n-        authorizationService.createNewAuthorization(Authorization.AUTH_TYPE_GRANT);\n-    authorization.setResource(Resources.HISTORIC_PROCESS_INSTANCE);\n-    authorization.setResourceId(processInstanceId);\n-    authorization.setUserId(\"foo\");\n-\n-    authorizationService.saveAuthorization(authorization);\n-\n-    testRule.updateHistoryTimeToLive(\"rootProcess\", 5);\n-\n-    // when\n-    HistoricProcessInstanceQuery query =\n-        historyService.createHistoricProcessInstanceQuery().rootProcessInstances();\n-\n-    testRule.syncExec(\n-        historyService.setRemovalTimeToHistoricProcessInstances()\n-            .calculatedRemovalTime()\n-            .byQuery(query)\n-            .hierarchical()\n-            .executeAsync()\n-    );\n-\n-    // then\n-    authorization = authorizationService.createAuthorizationQuery()\n-        .resourceType(Resources.HISTORIC_PROCESS_INSTANCE)\n-        .singleResult();\n-\n-    assertThat(authorization.getRemovalTime()).isNull();\n-\n-    // clear\n-    testRule.clearAuthorization();\n-  }\n-\n   @Test\n   public void shouldSetRemovalTime_VariableInstance() {\n     // given\n"}}, {"oid": "ba6fc0f3dc552abbf87831b3e7af498ad473b692", "url": "https://github.com/camunda/camunda-bpm-platform/commit/ba6fc0f3dc552abbf87831b3e7af498ad473b692", "message": "feat(engine): introduce historic process instance permissions\n\nrelated to CAM-11630", "committedDate": "2020-04-20T13:54:55Z", "type": "commit"}, {"oid": "61347289d0fe3208af23ec4f30a5a94dfd072542", "url": "https://github.com/camunda/camunda-bpm-platform/commit/61347289d0fe3208af23ec4f30a5a94dfd072542", "message": "feat(engine): reuse config flag for hist. process instance permissions\n\nrelated to CAM-11638", "committedDate": "2020-04-20T13:54:55Z", "type": "commit"}, {"oid": "2f01cf17ea4204abe702e8e136623a4c9e7da6a0", "url": "https://github.com/camunda/camunda-bpm-platform/commit/2f01cf17ea4204abe702e8e136623a4c9e7da6a0", "message": "feat(engine): enforce hist. process auth. for process query\n\nrelated to CAM-11631", "committedDate": "2020-04-20T14:06:05Z", "type": "commit"}, {"oid": "a9ee66a386f4f67bf5e1a25aac2f06bf178f92bc", "url": "https://github.com/camunda/camunda-bpm-platform/commit/a9ee66a386f4f67bf5e1a25aac2f06bf178f92bc", "message": "feat(engine): enforce hist. process auth. for act. inst. query\n\nrelated to CAM-11632", "committedDate": "2020-04-20T14:06:05Z", "type": "commit"}, {"oid": "ad052d2dfaed6ee1c3ef87964393cfaa1323981b", "url": "https://github.com/camunda/camunda-bpm-platform/commit/ad052d2dfaed6ee1c3ef87964393cfaa1323981b", "message": "feat(engine): enforce hist. process auth. for variab.&detail query\n\nrelated to CAM-11633", "committedDate": "2020-04-20T14:06:05Z", "type": "commit"}, {"oid": "9385d56bfa436723f86b1b6b89c16b2bf635db9c", "url": "https://github.com/camunda/camunda-bpm-platform/commit/9385d56bfa436723f86b1b6b89c16b2bf635db9c", "message": "feat(engine): enforce hist. process auth. for task query\n\nrelated to CAM-11635", "committedDate": "2020-04-20T14:06:05Z", "type": "commit"}, {"oid": "bbcbf47bce566fa319cd4580745b5ab00c45c634", "url": "https://github.com/camunda/camunda-bpm-platform/commit/bbcbf47bce566fa319cd4580745b5ab00c45c634", "message": "feat(engine): enforce hist. process auth. for ident.link log\n\nrelated to CAM-11637", "committedDate": "2020-04-20T14:06:05Z", "type": "commit"}, {"oid": "66e1a7df6732b01277cb407e021b0e7374ac1a6d", "url": "https://github.com/camunda/camunda-bpm-platform/commit/66e1a7df6732b01277cb407e021b0e7374ac1a6d", "message": "feat(engine): set remov. time to hist.proc.inst. related authorization\n\nrelated to CAM-11640", "committedDate": "2020-04-20T14:06:05Z", "type": "commit"}, {"oid": "bc9e7ad1188eea2bf914e9937e2c2b553a8396fd", "url": "https://github.com/camunda/camunda-bpm-platform/commit/bc9e7ad1188eea2bf914e9937e2c2b553a8396fd", "message": "feat(engine): add deletion of hist. proc. inst. authorization\n\nrelated to CAM-11728", "committedDate": "2020-04-20T14:06:05Z", "type": "commit"}, {"oid": "dd9cec880868b198452ef2c37745b121a1dc3e30", "url": "https://github.com/camunda/camunda-bpm-platform/commit/dd9cec880868b198452ef2c37745b121a1dc3e30", "message": "fix(engine): improve query of hist.inst.auth. for detail & variable\n\nrelated to CAM-11741", "committedDate": "2020-04-20T14:06:05Z", "type": "commit"}, {"oid": "70583ae292cd20608e5b10960a571d10122b7b86", "url": "https://github.com/camunda/camunda-bpm-platform/commit/70583ae292cd20608e5b10960a571d10122b7b86", "message": "feat(engine): add non-hierarch. set remo. time to hist.proc.inst. auth\n\nrelated to CAM-11744", "committedDate": "2020-04-20T14:06:05Z", "type": "commit"}, {"oid": "70583ae292cd20608e5b10960a571d10122b7b86", "url": "https://github.com/camunda/camunda-bpm-platform/commit/70583ae292cd20608e5b10960a571d10122b7b86", "message": "feat(engine): add non-hierarch. set remo. time to hist.proc.inst. auth\n\nrelated to CAM-11744", "committedDate": "2020-04-20T14:06:05Z", "type": "forcePushed"}]}