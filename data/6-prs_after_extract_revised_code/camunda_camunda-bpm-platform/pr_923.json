{"pr_number": 923, "pr_title": "chore(engine): send telemetry data for application server vendor/version", "pr_createdAt": "2020-08-04T12:36:07Z", "pr_url": "https://github.com/camunda/camunda-bpm-platform/pull/923", "timeline": [{"oid": "949af8699ae341c1edf0d3a137862a2fb2178cfa", "url": "https://github.com/camunda/camunda-bpm-platform/commit/949af8699ae341c1edf0d3a137862a2fb2178cfa", "message": "chore(engine-rest): fetch server info via ServletContextListener\n\n* introduce RestContainerBootstrap to fetch the server info\n* extract getProcessEngineProvider() to EngineUtil\n* register the listener to all web.xml", "committedDate": "2020-08-18T13:02:32Z", "type": "forcePushed"}, {"oid": "260aae148535629c4104f0c7214625328cea0bad", "url": "https://github.com/camunda/camunda-bpm-platform/commit/260aae148535629c4104f0c7214625328cea0bad", "message": "chore(engine-rest): fetch server info via ServletContextListener\n\n* introduce RestContainerBootstrap to fetch the server info\n* extract getProcessEngineProvider() to EngineUtil\n* register the listener to all web.xml", "committedDate": "2020-08-19T06:19:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ4NjYwMQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/923#discussion_r474486601", "bodyText": "This method should be also thread safe\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void setApplicationServer(String applicationServerVersion) {\n          \n          \n            \n              public synchronized void setApplicationServer(String applicationServerVersion) {", "author": "yanavasileva", "createdAt": "2020-08-21T07:50:02Z", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/TelemetryRegistry.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.engine.impl.telemetry;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.camunda.bpm.engine.impl.telemetry.dto.ApplicationServer;\n+\n+public class TelemetryRegistry {\n+\n+  protected Map<String, Object> entries = new HashMap<>();\n+  protected ApplicationServer applicationServer;\n+\n+  public synchronized ApplicationServer getApplicationServer() {\n+    return applicationServer;\n+  }\n+\n+  public synchronized void setApplicationServer(ApplicationServer applicationServer) {\n+    this.applicationServer = applicationServer;\n+  }\n+\n+  public void setApplicationServer(String applicationServerVersion) {", "originalCommit": "260aae148535629c4104f0c7214625328cea0bad", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0d04f46ff413a4560096dc42b1c8e185f5562d6e", "chunk": "diff --git a/engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/TelemetryRegistry.java b/engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/TelemetryRegistry.java\nindex 719d73d327..4b06074b74 100644\n--- a/engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/TelemetryRegistry.java\n+++ b/engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/TelemetryRegistry.java\n\n@@ -34,7 +34,7 @@ public class TelemetryRegistry {\n     this.applicationServer = applicationServer;\n   }\n \n-  public void setApplicationServer(String applicationServerVersion) {\n+  public synchronized void setApplicationServer(String applicationServerVersion) {\n     this.applicationServer = new ApplicationServer(applicationServerVersion);\n   }\n }\n"}}, {"oid": "0d04f46ff413a4560096dc42b1c8e185f5562d6e", "url": "https://github.com/camunda/camunda-bpm-platform/commit/0d04f46ff413a4560096dc42b1c8e185f5562d6e", "message": "fixup! chore(engine): extend telemetry data with application server information", "committedDate": "2020-08-21T10:08:13Z", "type": "forcePushed"}, {"oid": "472c6d4f9598f19e717e2bce319795c26016abe8", "url": "https://github.com/camunda/camunda-bpm-platform/commit/472c6d4f9598f19e717e2bce319795c26016abe8", "message": "chore(engine): extend telemetry data with application server information\n\n* introduce TelemetryRegistry and initialize it during initTelemetry\n* add ApplicationServer dto\n* fetch the registry during telemetry send\n* add test for parsing the server info and sending the data", "committedDate": "2020-08-21T11:01:19Z", "type": "commit"}, {"oid": "e19e69749bcd65f8c4d21cbe38c84ce65a27dc29", "url": "https://github.com/camunda/camunda-bpm-platform/commit/e19e69749bcd65f8c4d21cbe38c84ce65a27dc29", "message": "chore(engine-rest): fetch server info via ServletContextListener\n\n* introduce RestContainerBootstrap to fetch the server info\n* extract getProcessEngineProvider() to EngineUtil\n* register the listener to all web.xml", "committedDate": "2020-08-21T11:01:19Z", "type": "commit"}, {"oid": "e19e69749bcd65f8c4d21cbe38c84ce65a27dc29", "url": "https://github.com/camunda/camunda-bpm-platform/commit/e19e69749bcd65f8c4d21cbe38c84ce65a27dc29", "message": "chore(engine-rest): fetch server info via ServletContextListener\n\n* introduce RestContainerBootstrap to fetch the server info\n* extract getProcessEngineProvider() to EngineUtil\n* register the listener to all web.xml", "committedDate": "2020-08-21T11:01:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMxNDY4Mg==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/923#discussion_r479314682", "bodyText": "I don't like this setter. It is much cleaner if we just get the respective object and then set it.", "author": "tasso94", "createdAt": "2020-08-28T13:55:32Z", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/dto/Data.java", "diffHunk": "@@ -43,4 +45,12 @@ public void setProduct(Product product) {\n     this.product = product;\n   }\n \n+  public void setApplicationServer(ApplicationServer applicationServer) {\n+    this.product.internals.applicationServer = applicationServer;", "originalCommit": "e19e69749bcd65f8c4d21cbe38c84ce65a27dc29", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f4f5d771f34a9194d6e21144cae29c4bc79eeab9", "chunk": "diff --git a/engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/dto/Data.java b/engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/dto/Data.java\nindex 2250775459..ca0d38ca33 100644\n--- a/engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/dto/Data.java\n+++ b/engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/dto/Data.java\n\n@@ -45,10 +45,6 @@ public class Data {\n     this.product = product;\n   }\n \n-  public void setApplicationServer(ApplicationServer applicationServer) {\n-    this.product.internals.applicationServer = applicationServer;\n-  }\n-\n   @Override\n   public String toString() {\n     return JsonUtil.asString(this);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMxODEwMQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/923#discussion_r479318101", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Pattern pattern = Pattern.compile(\"[ A-Za-z]+\");\n          \n          \n            \n                Pattern pattern = Pattern.compile(\"[\\\\sA-Za-z]+\");", "author": "tasso94", "createdAt": "2020-08-28T13:59:12Z", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/util/ParseUtil.java", "diffHunk": "@@ -116,4 +116,18 @@ public static ProcessEngineDetails parseProcessEngineVersion(String packageImple\n \n     return new ProcessEngineDetails(version, edition);\n   }\n+\n+  public static String parseServerVendor(String applicationServerInfo) {\n+    String serverVendor = null;\n+    Pattern pattern = Pattern.compile(\"[ A-Za-z]+\");", "originalCommit": "e19e69749bcd65f8c4d21cbe38c84ce65a27dc29", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "95ea34f3ea0c86c952a5678788be23c0e20929c5", "chunk": "diff --git a/engine/src/main/java/org/camunda/bpm/engine/impl/util/ParseUtil.java b/engine/src/main/java/org/camunda/bpm/engine/impl/util/ParseUtil.java\nindex cc9047a55b..e8b44ba63d 100644\n--- a/engine/src/main/java/org/camunda/bpm/engine/impl/util/ParseUtil.java\n+++ b/engine/src/main/java/org/camunda/bpm/engine/impl/util/ParseUtil.java\n\n@@ -119,13 +119,13 @@ public class ParseUtil {\n \n   public static String parseServerVendor(String applicationServerInfo) {\n     String serverVendor = null;\n-    Pattern pattern = Pattern.compile(\"[ A-Za-z]+\");\n+    Pattern pattern = Pattern.compile(\"[\\\\sA-Za-z]+\");\n     Matcher matcher = pattern.matcher(applicationServerInfo);\n     if (matcher.find()) {\n       serverVendor = matcher.group(0).trim();\n     }\n     if (serverVendor.contains(\"WildFly\")) {\n-      return \"JBoss WildFly\";\n+      return \"WildFly\";\n     }\n     return serverVendor;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMxOTk2NQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/923#discussion_r479319965", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  return \"JBoss WildFly\";\n          \n          \n            \n                  return \"WildFly\";\n          \n      \n    \n    \n  \n\nI think the official name is not JBoss Wildfly. What is the idea behind this wording?", "author": "tasso94", "createdAt": "2020-08-28T14:01:03Z", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/util/ParseUtil.java", "diffHunk": "@@ -116,4 +116,18 @@ public static ProcessEngineDetails parseProcessEngineVersion(String packageImple\n \n     return new ProcessEngineDetails(version, edition);\n   }\n+\n+  public static String parseServerVendor(String applicationServerInfo) {\n+    String serverVendor = null;\n+    Pattern pattern = Pattern.compile(\"[ A-Za-z]+\");\n+    Matcher matcher = pattern.matcher(applicationServerInfo);\n+    if (matcher.find()) {\n+      serverVendor = matcher.group(0).trim();\n+    }\n+    if (serverVendor.contains(\"WildFly\")) {\n+      return \"JBoss WildFly\";", "originalCommit": "e19e69749bcd65f8c4d21cbe38c84ce65a27dc29", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "95ea34f3ea0c86c952a5678788be23c0e20929c5", "chunk": "diff --git a/engine/src/main/java/org/camunda/bpm/engine/impl/util/ParseUtil.java b/engine/src/main/java/org/camunda/bpm/engine/impl/util/ParseUtil.java\nindex cc9047a55b..e8b44ba63d 100644\n--- a/engine/src/main/java/org/camunda/bpm/engine/impl/util/ParseUtil.java\n+++ b/engine/src/main/java/org/camunda/bpm/engine/impl/util/ParseUtil.java\n\n@@ -119,13 +119,13 @@ public class ParseUtil {\n \n   public static String parseServerVendor(String applicationServerInfo) {\n     String serverVendor = null;\n-    Pattern pattern = Pattern.compile(\"[ A-Za-z]+\");\n+    Pattern pattern = Pattern.compile(\"[\\\\sA-Za-z]+\");\n     Matcher matcher = pattern.matcher(applicationServerInfo);\n     if (matcher.find()) {\n       serverVendor = matcher.group(0).trim();\n     }\n     if (serverVendor.contains(\"WildFly\")) {\n-      return \"JBoss WildFly\";\n+      return \"WildFly\";\n     }\n     return serverVendor;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMzOTU4Nw==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/923#discussion_r479339587", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (data.getProduct().getInternals().getApplicationServer() == null &&\n          \n          \n            \n                    processEngineConfiguration.getTelemetryRegistry().getApplicationServer() != null) {\n          \n          \n            \n                  data.setApplicationServer(processEngineConfiguration.getTelemetryRegistry().getApplicationServer());\n          \n          \n            \n                }\n          \n          \n            \n                Internals internals = data.getProduct().getInternals();\n          \n          \n            \n                ApplicationServer applicationServer = processEngineConfiguration.getTelemetryRegistry().getApplicationServer();\n          \n          \n            \n                if (internals.getApplicationServer() == null && applicationServer != null) {\n          \n          \n            \n                  internals.setApplicationServer(applicationServer);\n          \n          \n            \n                }", "author": "tasso94", "createdAt": "2020-08-28T14:24:09Z", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/reporter/TelemetrySendingTask.java", "diffHunk": "@@ -98,5 +102,11 @@ protected void sendData() {\n     });\n   }\n \n+  protected void resolveDataFromRegistry(ProcessEngineConfigurationImpl processEngineConfiguration) {\n+    if (data.getProduct().getInternals().getApplicationServer() == null &&\n+        processEngineConfiguration.getTelemetryRegistry().getApplicationServer() != null) {\n+      data.setApplicationServer(processEngineConfiguration.getTelemetryRegistry().getApplicationServer());\n+    }", "originalCommit": "e19e69749bcd65f8c4d21cbe38c84ce65a27dc29", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "95ea34f3ea0c86c952a5678788be23c0e20929c5", "chunk": "diff --git a/engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/reporter/TelemetrySendingTask.java b/engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/reporter/TelemetrySendingTask.java\nindex 072377b9cb..51105660d7 100644\n--- a/engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/reporter/TelemetrySendingTask.java\n+++ b/engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/reporter/TelemetrySendingTask.java\n\n@@ -103,9 +103,10 @@ public class TelemetrySendingTask extends TimerTask {\n   }\n \n   protected void resolveDataFromRegistry(ProcessEngineConfigurationImpl processEngineConfiguration) {\n-    if (data.getProduct().getInternals().getApplicationServer() == null &&\n-        processEngineConfiguration.getTelemetryRegistry().getApplicationServer() != null) {\n-      data.setApplicationServer(processEngineConfiguration.getTelemetryRegistry().getApplicationServer());\n+    Internals internals = data.getProduct().getInternals();\n+    ApplicationServer applicationServer = processEngineConfiguration.getTelemetryRegistry().getApplicationServer();\n+    if (internals.getApplicationServer() == null && applicationServer != null) {\n+      internals.setApplicationServer(applicationServer);\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM0MTI3OQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/923#discussion_r479341279", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (serverInfo != null && !sce.getServletContext().getServerInfo().isEmpty() ) {\n          \n          \n            \n                  Set<String> processEngineNames = getProcessEngineProvider().getProcessEngineNames();\n          \n          \n            \n                  for (String engineName : processEngineNames) {\n          \n          \n            \n                    ProcessEngine processEngine = lookupProcessEngine(engineName);\n          \n          \n            \n                    try {\n          \n          \n            \n                      if (processEngine.getProcessEngineConfiguration().getTelemetryRegistry() != null &&\n          \n          \n            \n                          processEngine.getProcessEngineConfiguration().getTelemetryRegistry().getApplicationServer() == null) {\n          \n          \n            \n            \n          \n          \n            \n                        processEngine.getProcessEngineConfiguration()\n          \n          \n            \n                            .getTelemetryRegistry()\n          \n          \n            \n                            .setApplicationServer(serverInfo);\n          \n          \n            \n                      }\n          \n          \n            \n                    } catch (Exception e) {\n          \n          \n            \n                      // do nothing\n          \n          \n            \n                    }\n          \n          \n            \n                  }\n          \n          \n            \n                }\n          \n          \n            \n                if (serverInfo != null && !serverInfo.isEmpty() ) {\n          \n          \n            \n                  Set<String> processEngineNames = getProcessEngineProvider().getProcessEngineNames();\n          \n          \n            \n                  for (String engineName : processEngineNames) {\n          \n          \n            \n                    ProcessEngine processEngine = lookupProcessEngine(engineName);\n          \n          \n            \n                    ProcessEngineConfiguration configuration = processEngine.getProcessEngineConfiguration();\n          \n          \n            \n                    TelemetryRegistry telemetryRegistry = configuration.getTelemetryRegistry();\n          \n          \n            \n                    if (telemetryRegistry != null && telemetryRegistry.getApplicationServer() == null) {\n          \n          \n            \n                        telemetryRegistry.setApplicationServer(serverInfo);\n          \n          \n            \n                    }\n          \n          \n            \n                  }\n          \n          \n            \n                }", "author": "tasso94", "createdAt": "2020-08-28T14:26:54Z", "path": "engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/web/bootstrap/RestContainerBootstrap.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.engine.rest.impl.web.bootstrap;\n+\n+import static org.camunda.bpm.engine.rest.util.EngineUtil.getProcessEngineProvider;\n+import static org.camunda.bpm.engine.rest.util.EngineUtil.lookupProcessEngine;\n+\n+import java.util.Set;\n+\n+import javax.servlet.ServletContextEvent;\n+import javax.servlet.ServletContextListener;\n+\n+import org.camunda.bpm.engine.ProcessEngine;\n+\n+public class RestContainerBootstrap implements ServletContextListener {\n+\n+  @Override\n+  public void contextInitialized(ServletContextEvent sce) {\n+    String serverInfo = sce.getServletContext().getServerInfo();\n+    if (serverInfo != null && !sce.getServletContext().getServerInfo().isEmpty() ) {\n+      Set<String> processEngineNames = getProcessEngineProvider().getProcessEngineNames();\n+      for (String engineName : processEngineNames) {\n+        ProcessEngine processEngine = lookupProcessEngine(engineName);\n+        try {\n+          if (processEngine.getProcessEngineConfiguration().getTelemetryRegistry() != null &&\n+              processEngine.getProcessEngineConfiguration().getTelemetryRegistry().getApplicationServer() == null) {\n+\n+            processEngine.getProcessEngineConfiguration()\n+                .getTelemetryRegistry()\n+                .setApplicationServer(serverInfo);\n+          }\n+        } catch (Exception e) {\n+          // do nothing\n+        }\n+      }\n+    }", "originalCommit": "e19e69749bcd65f8c4d21cbe38c84ce65a27dc29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM0MTgzMw==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/923#discussion_r479341833", "bodyText": "Instead of this exception handling, let's just take care that in ParseUtil#parseServerVendor no exceptions are thrown.", "author": "tasso94", "createdAt": "2020-08-28T14:27:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM0MTI3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "95ea34f3ea0c86c952a5678788be23c0e20929c5", "chunk": "diff --git a/engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/web/bootstrap/RestContainerBootstrap.java b/engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/web/bootstrap/RestContainerBootstrap.java\nindex 2ac0a95e5a..370b8a4a7a 100644\n--- a/engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/web/bootstrap/RestContainerBootstrap.java\n+++ b/engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/web/bootstrap/RestContainerBootstrap.java\n\n@@ -31,20 +31,14 @@ public class RestContainerBootstrap implements ServletContextListener {\n   @Override\n   public void contextInitialized(ServletContextEvent sce) {\n     String serverInfo = sce.getServletContext().getServerInfo();\n-    if (serverInfo != null && !sce.getServletContext().getServerInfo().isEmpty() ) {\n+    if (serverInfo != null && !serverInfo.isEmpty() ) {\n       Set<String> processEngineNames = getProcessEngineProvider().getProcessEngineNames();\n       for (String engineName : processEngineNames) {\n         ProcessEngine processEngine = lookupProcessEngine(engineName);\n-        try {\n-          if (processEngine.getProcessEngineConfiguration().getTelemetryRegistry() != null &&\n-              processEngine.getProcessEngineConfiguration().getTelemetryRegistry().getApplicationServer() == null) {\n-\n-            processEngine.getProcessEngineConfiguration()\n-                .getTelemetryRegistry()\n-                .setApplicationServer(serverInfo);\n-          }\n-        } catch (Exception e) {\n-          // do nothing\n+        ProcessEngineConfiguration configuration = processEngine.getProcessEngineConfiguration();\n+        TelemetryRegistry telemetryRegistry = configuration.getTelemetryRegistry();\n+        if (telemetryRegistry != null && telemetryRegistry.getApplicationServer() == null) {\n+            telemetryRegistry.setApplicationServer(serverInfo);\n         }\n       }\n     }\n"}}, {"oid": "95ea34f3ea0c86c952a5678788be23c0e20929c5", "url": "https://github.com/camunda/camunda-bpm-platform/commit/95ea34f3ea0c86c952a5678788be23c0e20929c5", "message": "chore(engine/rest): apply suggestions from code review\n\nCo-authored-by: Tassilo Weidner <tassilo.weidner@camunda.com>", "committedDate": "2020-08-31T13:53:34Z", "type": "commit"}, {"oid": "f4f5d771f34a9194d6e21144cae29c4bc79eeab9", "url": "https://github.com/camunda/camunda-bpm-platform/commit/f4f5d771f34a9194d6e21144cae29c4bc79eeab9", "message": "improve(engine/rest): improve set app server info in telemetry", "committedDate": "2020-08-31T15:11:53Z", "type": "commit"}, {"oid": "f4f5d771f34a9194d6e21144cae29c4bc79eeab9", "url": "https://github.com/camunda/camunda-bpm-platform/commit/f4f5d771f34a9194d6e21144cae29c4bc79eeab9", "message": "improve(engine/rest): improve set app server info in telemetry", "committedDate": "2020-08-31T15:11:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTE4NDc1OA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/923#discussion_r481184758", "bodyText": "A proposal to be super sure that an exception is never thrown:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                String serverVendor = null;\n          \n          \n            \n                Pattern pattern = Pattern.compile(\"[\\\\sA-Za-z]+\");\n          \n          \n            \n                Matcher matcher = pattern.matcher(applicationServerInfo);\n          \n          \n            \n                if (matcher.find()) {\n          \n          \n            \n                  serverVendor = matcher.group(0).trim();\n          \n          \n            \n                }\n          \n          \n            \n                if (serverVendor.contains(\"WildFly\")) {\n          \n          \n            \n                  return \"WildFly\";\n          \n          \n            \n                }\n          \n          \n            \n                return serverVendor;\n          \n          \n            \n                String serverVendor = \"\";\n          \n          \n            \n            \n          \n          \n            \n                Pattern pattern = Pattern.compile(\"[\\\\sA-Za-z]+\");\n          \n          \n            \n                Matcher matcher = pattern.matcher(applicationServerInfo);\n          \n          \n            \n                if (matcher.find()) {\n          \n          \n            \n                  try {\n          \n          \n            \n                    serverVendor = matcher.group();\n          \n          \n            \n                  } catch (IllegalStateException ignored) {\n          \n          \n            \n                  }\n          \n          \n            \n            \n          \n          \n            \n                  serverVendor = serverVendor.trim();\n          \n          \n            \n            \n          \n          \n            \n                  if (serverVendor.contains(\"WildFly\")) {\n          \n          \n            \n                    return \"WildFly\";\n          \n          \n            \n                  }\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                return serverVendor;", "author": "tasso94", "createdAt": "2020-09-01T14:34:24Z", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/util/ParseUtil.java", "diffHunk": "@@ -116,4 +116,18 @@ public static ProcessEngineDetails parseProcessEngineVersion(String packageImple\n \n     return new ProcessEngineDetails(version, edition);\n   }\n+\n+  public static String parseServerVendor(String applicationServerInfo) {\n+    String serverVendor = null;\n+    Pattern pattern = Pattern.compile(\"[\\\\sA-Za-z]+\");\n+    Matcher matcher = pattern.matcher(applicationServerInfo);\n+    if (matcher.find()) {\n+      serverVendor = matcher.group(0).trim();\n+    }\n+    if (serverVendor.contains(\"WildFly\")) {\n+      return \"WildFly\";\n+    }\n+    return serverVendor;", "originalCommit": "f4f5d771f34a9194d6e21144cae29c4bc79eeab9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9506f031ca163e281fde222905767ab80f4a4862", "chunk": "diff --git a/engine/src/main/java/org/camunda/bpm/engine/impl/util/ParseUtil.java b/engine/src/main/java/org/camunda/bpm/engine/impl/util/ParseUtil.java\nindex e8b44ba63d..6133727205 100644\n--- a/engine/src/main/java/org/camunda/bpm/engine/impl/util/ParseUtil.java\n+++ b/engine/src/main/java/org/camunda/bpm/engine/impl/util/ParseUtil.java\n\n@@ -118,15 +118,23 @@ public class ParseUtil {\n   }\n \n   public static String parseServerVendor(String applicationServerInfo) {\n-    String serverVendor = null;\n+    String serverVendor = \"\";\n+\n     Pattern pattern = Pattern.compile(\"[\\\\sA-Za-z]+\");\n     Matcher matcher = pattern.matcher(applicationServerInfo);\n     if (matcher.find()) {\n-      serverVendor = matcher.group(0).trim();\n-    }\n-    if (serverVendor.contains(\"WildFly\")) {\n-      return \"WildFly\";\n+      try {\n+        serverVendor = matcher.group();\n+      } catch (IllegalStateException ignored) {\n+      }\n+\n+      serverVendor = serverVendor.trim();\n+\n+      if (serverVendor.contains(\"WildFly\")) {\n+        return \"WildFly\";\n+      }\n     }\n+\n     return serverVendor;\n   }\n \n"}}, {"oid": "9506f031ca163e281fde222905767ab80f4a4862", "url": "https://github.com/camunda/camunda-bpm-platform/commit/9506f031ca163e281fde222905767ab80f4a4862", "message": "chore(engine): apply suggestions from code review\n\nCo-authored-by: Tassilo Weidner <tassilo.weidner@camunda.com>", "committedDate": "2020-09-01T14:52:08Z", "type": "commit"}]}