{"pr_number": 935, "pr_title": "chore(engine): add command counter", "pr_createdAt": "2020-08-19T15:23:24Z", "pr_url": "https://github.com/camunda/camunda-bpm-platform/pull/935", "timeline": [{"oid": "6b9e938216f6d7ab1eebbde2e6b9d79b1ff298ec", "url": "https://github.com/camunda/camunda-bpm-platform/commit/6b9e938216f6d7ab1eebbde2e6b9d79b1ff298ec", "message": "chore(engine): add command counter", "committedDate": "2020-08-19T15:23:54Z", "type": "forcePushed"}, {"oid": "bfc78dde1f34755ace51e68ba892c5603bf8e84b", "url": "https://github.com/camunda/camunda-bpm-platform/commit/bfc78dde1f34755ace51e68ba892c5603bf8e84b", "message": "chore(engine): extend telemetry data with command count\n\n* introduce command counter interceptor that keep track of all executed\ncommand counts in the telemetry registry\n* upon sending telemetry data including command counts, the counts are\nreset\n\nRelated to CAM-12176", "committedDate": "2020-08-21T12:08:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM1NTkwOQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/935#discussion_r479355909", "bodyText": "I don't like this setter. It is much cleaner if we just get the respective object and then set it.", "author": "tasso94", "createdAt": "2020-08-28T14:50:30Z", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/dto/Data.java", "diffHunk": "@@ -49,8 +51,14 @@ public void setApplicationServer(ApplicationServer applicationServer) {\n     this.product.internals.applicationServer = applicationServer;\n   }\n \n+  public void setCommands(Map<String, Command> commands) {\n+    this.product.internals.commands = commands;", "originalCommit": "bfc78dde1f34755ace51e68ba892c5603bf8e84b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1a6ee8fdf5c282631717ed20c570f4d725415ea1", "chunk": "diff --git a/engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/dto/Data.java b/engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/dto/Data.java\nindex 687023e51b..3f55ed6dfa 100644\n--- a/engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/dto/Data.java\n+++ b/engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/dto/Data.java\n\n@@ -47,18 +45,9 @@ public class Data {\n     this.product = product;\n   }\n \n-  public void setApplicationServer(ApplicationServer applicationServer) {\n-    this.product.internals.applicationServer = applicationServer;\n-  }\n-\n-  public void setCommands(Map<String, Command> commands) {\n-    this.product.internals.commands = commands;\n-  }\n-\n   @Override\n   public String toString() {\n     return JsonUtil.asString(this);\n   }\n \n-\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM1OTY1NA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/935#discussion_r479359654", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                super();", "author": "tasso94", "createdAt": "2020-08-28T14:56:36Z", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/CommandCounter.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.engine.impl.telemetry;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+public class CommandCounter {\n+\n+  protected String name;\n+  protected AtomicLong count = new AtomicLong(0);\n+\n+  public CommandCounter(String name) {\n+    super();", "originalCommit": "bfc78dde1f34755ace51e68ba892c5603bf8e84b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1a6ee8fdf5c282631717ed20c570f4d725415ea1", "chunk": "diff --git a/engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/CommandCounter.java b/engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/CommandCounter.java\nindex 1be5595fc9..b83ce34805 100644\n--- a/engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/CommandCounter.java\n+++ b/engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/CommandCounter.java\n\n@@ -24,7 +24,6 @@ public class CommandCounter {\n   protected AtomicLong count = new AtomicLong(0);\n \n   public CommandCounter(String name) {\n-    super();\n     this.name = name;\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkyNjQ2Ng==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/935#discussion_r479926466", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public long getAndClear() {\n          \n          \n            \n                return count.getAndSet(0);\n          \n          \n            \n              }", "author": "tasso94", "createdAt": "2020-08-31T06:44:07Z", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/CommandCounter.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.engine.impl.telemetry;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+public class CommandCounter {\n+\n+  protected String name;\n+  protected AtomicLong count = new AtomicLong(0);\n+\n+  public CommandCounter(String name) {\n+    super();\n+    this.name = name;\n+  }\n+\n+  public String getName() {\n+    return name;\n+  }\n+\n+  public void setName(String name) {\n+    this.name = name;\n+  }\n+\n+\n+  public void mark() {\n+    count.incrementAndGet();\n+  }\n+\n+  public long getAndClear() {\n+    return count.getAndSet(0);\n+  }", "originalCommit": "bfc78dde1f34755ace51e68ba892c5603bf8e84b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1a6ee8fdf5c282631717ed20c570f4d725415ea1", "chunk": "diff --git a/engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/CommandCounter.java b/engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/CommandCounter.java\nindex 1be5595fc9..b83ce34805 100644\n--- a/engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/CommandCounter.java\n+++ b/engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/CommandCounter.java\n\n@@ -24,7 +24,6 @@ public class CommandCounter {\n   protected AtomicLong count = new AtomicLong(0);\n \n   public CommandCounter(String name) {\n-    super();\n     this.name = name;\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkyODU3MA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/935#discussion_r479928570", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                CommandCounter counter = commands.get(name);\n          \n          \n            \n                if (counter == null) {\n          \n          \n            \n                  counter = new CommandCounter(name);\n          \n          \n            \n                  counter.mark();\n          \n          \n            \n                  commands.put(name, counter);\n          \n          \n            \n                } else {\n          \n          \n            \n                  counter.mark();\n          \n          \n            \n                }\n          \n          \n            \n                CommandCounter counter = commands.get(name);\n          \n          \n            \n                if (counter == null) {\n          \n          \n            \n                  counter = new CommandCounter(name);\n          \n          \n            \n                  commands.put(name, counter);\n          \n          \n            \n                }\n          \n          \n            \n                \n          \n          \n            \n                counter.mark();", "author": "tasso94", "createdAt": "2020-08-31T06:46:43Z", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/TelemetryRegistry.java", "diffHunk": "@@ -37,4 +37,20 @@ public synchronized void setApplicationServer(ApplicationServer applicationServe\n   public synchronized void setApplicationServer(String applicationServerVersion) {\n     this.applicationServer = new ApplicationServer(applicationServerVersion);\n   }\n+\n+  public Map<String, CommandCounter> getCommands() {\n+    return commands;\n+  }\n+\n+  public synchronized void markOccurrence(String name) {\n+    CommandCounter counter = commands.get(name);\n+    if (counter == null) {\n+      counter = new CommandCounter(name);\n+      counter.mark();\n+      commands.put(name, counter);\n+    } else {\n+      counter.mark();\n+    }", "originalCommit": "bfc78dde1f34755ace51e68ba892c5603bf8e84b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1a6ee8fdf5c282631717ed20c570f4d725415ea1", "chunk": "diff --git a/engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/TelemetryRegistry.java b/engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/TelemetryRegistry.java\nindex 696b1d2533..0433577be1 100644\n--- a/engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/TelemetryRegistry.java\n+++ b/engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/TelemetryRegistry.java\n\n@@ -42,15 +42,18 @@ public class TelemetryRegistry {\n     return commands;\n   }\n \n-  public synchronized void markOccurrence(String name) {\n+  public void markOccurrence(String name) {\n     CommandCounter counter = commands.get(name);\n     if (counter == null) {\n-      counter = new CommandCounter(name);\n-      counter.mark();\n-      commands.put(name, counter);\n-    } else {\n-      counter.mark();\n+      synchronized (commands) {\n+        if (counter == null) {\n+          counter = new CommandCounter(name);\n+          commands.put(name, counter);\n+        }\n+      }\n     }\n+\n+    counter.mark();\n   }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA3ODkwMw==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/935#discussion_r480078903", "bodyText": "In the current implementation, we don't need the AtomicLong since TelemetryRegistry#markOccurrence is synchronized.", "author": "tasso94", "createdAt": "2020-08-31T11:52:18Z", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/CommandCounter.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.engine.impl.telemetry;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+public class CommandCounter {\n+\n+  protected String name;\n+  protected AtomicLong count = new AtomicLong(0);", "originalCommit": "bfc78dde1f34755ace51e68ba892c5603bf8e84b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1a6ee8fdf5c282631717ed20c570f4d725415ea1", "chunk": "diff --git a/engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/CommandCounter.java b/engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/CommandCounter.java\nindex 1be5595fc9..b83ce34805 100644\n--- a/engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/CommandCounter.java\n+++ b/engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/CommandCounter.java\n\n@@ -24,7 +24,6 @@ public class CommandCounter {\n   protected AtomicLong count = new AtomicLong(0);\n \n   public CommandCounter(String name) {\n-    super();\n     this.name = name;\n   }\n \n"}}, {"oid": "1a6ee8fdf5c282631717ed20c570f4d725415ea1", "url": "https://github.com/camunda/camunda-bpm-platform/commit/1a6ee8fdf5c282631717ed20c570f4d725415ea1", "message": "improve(engine): improve synchronization in telemetry", "committedDate": "2020-08-31T15:17:45Z", "type": "forcePushed"}, {"oid": "975e299eb638cc419ee5450fcab2d74af9870b27", "url": "https://github.com/camunda/camunda-bpm-platform/commit/975e299eb638cc419ee5450fcab2d74af9870b27", "message": "improve(engine): improve synchronization in telemetry", "committedDate": "2020-08-31T15:20:13Z", "type": "forcePushed"}, {"oid": "eb88a28fa29179919e2cbe255c2f5de8b6e714f1", "url": "https://github.com/camunda/camunda-bpm-platform/commit/eb88a28fa29179919e2cbe255c2f5de8b6e714f1", "message": "chore(engine): extend telemetry data with command count\n\n* introduce command counter interceptor that keep track of all executed\ncommand counts in the telemetry registry\n* upon sending telemetry data including command counts, the counts are\nreset\n\nRelated to CAM-12176", "committedDate": "2020-09-01T15:21:01Z", "type": "commit"}, {"oid": "eb88a28fa29179919e2cbe255c2f5de8b6e714f1", "url": "https://github.com/camunda/camunda-bpm-platform/commit/eb88a28fa29179919e2cbe255c2f5de8b6e714f1", "message": "chore(engine): extend telemetry data with command count\n\n* introduce command counter interceptor that keep track of all executed\ncommand counts in the telemetry registry\n* upon sending telemetry data including command counts, the counts are\nreset\n\nRelated to CAM-12176", "committedDate": "2020-09-01T15:21:01Z", "type": "forcePushed"}]}