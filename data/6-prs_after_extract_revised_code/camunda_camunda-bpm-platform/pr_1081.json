{"pr_number": 1081, "pr_title": "fix(engine-rest): return invalid request for double quoted date value", "pr_createdAt": "2020-10-22T08:17:25Z", "pr_url": "https://github.com/camunda/camunda-bpm-platform/pull/1081", "timeline": [{"oid": "ccdc191ead2691437948e0bf913e49b1af0d055d", "url": "https://github.com/camunda/camunda-bpm-platform/commit/ccdc191ead2691437948e0bf913e49b1af0d055d", "message": "fix(engine-rest): return invalid request for double quoted date value\n\nRelated to CAM-10076", "committedDate": "2020-10-16T10:31:24Z", "type": "commit"}, {"oid": "5d4d7e4e9d31ad52d216e499c5c8176a607ab088", "url": "https://github.com/camunda/camunda-bpm-platform/commit/5d4d7e4e9d31ad52d216e499c5c8176a607ab088", "message": "fix(engine-rest): return invalid request for double quoted date value\n\n* add check for null value\nRelated to CAM-10076", "committedDate": "2020-10-22T09:38:42Z", "type": "commit"}, {"oid": "c246769c386c88a9cbddfbce0efbab08d690e783", "url": "https://github.com/camunda/camunda-bpm-platform/commit/c246769c386c88a9cbddfbce0efbab08d690e783", "message": "Add unit tests for DataConverter", "committedDate": "2020-10-22T12:09:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDczNjI2NQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1081#discussion_r510736265", "bodyText": "You can declare a static imports of Mockito to reduce the length of this call, e.g.:\nimport static org.mockito.Matchers.anyString;\nimport static org.mockito.Mockito.anyString;\nimport static org.mockito.Mockito.eq;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\nThat's cosmetic improvement, it's ok to leave it as it is as well.", "author": "yanavasileva", "createdAt": "2020-10-23T08:54:17Z", "path": "engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/dto/converter/DateConverterTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.engine.rest.dto.converter;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.camunda.bpm.engine.impl.calendar.DateTimeUtil;\n+import org.camunda.bpm.engine.rest.exception.InvalidRequestException;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.Date;\n+\n+public class DateConverterTest {\n+  private DateConverter converter;\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    converter = new DateConverter();\n+\n+  }\n+\n+  @Test(expected = InvalidRequestException.class)\n+  public void shouldFailForDoubleQuotedValue() {\n+    //when\n+    converter.convertQueryParameterToType(\"\\\"pizza\\\"\");\n+  }\n+\n+  @Test(expected = InvalidRequestException.class)\n+  public void shouldFailForSingleDoubleQuotedValue() {\n+    //when\n+    converter.convertQueryParameterToType(\"2014-01-01T00:00:00+0200\\\"\");\n+  }\n+\n+  @Test\n+  public void shouldConvertDate() throws JsonProcessingException {\n+    //given\n+    String value = \"2014-01-01T00:00:00+0200\";\n+    ObjectMapper mock = Mockito.mock(ObjectMapper.class);\n+    converter.setObjectMapper(mock);\n+    Mockito.when(mock.readValue(Mockito.anyString(), Mockito.eq(Date.class))).thenReturn(DateTimeUtil.parseDate(value));", "originalCommit": "c246769c386c88a9cbddfbce0efbab08d690e783", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0e76b2a27374b3d5c9bf70643dd9e4c0fc583b81", "chunk": "diff --git a/engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/dto/converter/DateConverterTest.java b/engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/converter/DateConverterTest.java\nsimilarity index 82%\nrename from engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/dto/converter/DateConverterTest.java\nrename to engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/converter/DateConverterTest.java\nindex 43a0cf25af..62078f1f02 100644\n--- a/engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/dto/converter/DateConverterTest.java\n+++ b/engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/converter/DateConverterTest.java\n\n@@ -14,15 +14,19 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package org.camunda.bpm.engine.rest.dto.converter;\n+package org.camunda.bpm.engine.rest.converter;\n \n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import org.camunda.bpm.engine.impl.calendar.DateTimeUtil;\n+import org.camunda.bpm.engine.rest.dto.converter.DateConverter;\n import org.camunda.bpm.engine.rest.exception.InvalidRequestException;\n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.Mockito;\n+import static org.mockito.Matchers.anyString;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n \n import static org.junit.Assert.assertEquals;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDczNjYyOA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1081#discussion_r510736628", "bodyText": "Could consider removing the empty line here.\n\n  \n    \n      \n        Suggested change", "author": "yanavasileva", "createdAt": "2020-10-23T08:54:54Z", "path": "engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/dto/converter/DateConverterTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.engine.rest.dto.converter;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.camunda.bpm.engine.impl.calendar.DateTimeUtil;\n+import org.camunda.bpm.engine.rest.exception.InvalidRequestException;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.Date;\n+\n+public class DateConverterTest {\n+  private DateConverter converter;\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    converter = new DateConverter();\n+", "originalCommit": "c246769c386c88a9cbddfbce0efbab08d690e783", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0e76b2a27374b3d5c9bf70643dd9e4c0fc583b81", "chunk": "diff --git a/engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/dto/converter/DateConverterTest.java b/engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/converter/DateConverterTest.java\nsimilarity index 82%\nrename from engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/dto/converter/DateConverterTest.java\nrename to engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/converter/DateConverterTest.java\nindex 43a0cf25af..62078f1f02 100644\n--- a/engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/dto/converter/DateConverterTest.java\n+++ b/engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/converter/DateConverterTest.java\n\n@@ -14,15 +14,19 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package org.camunda.bpm.engine.rest.dto.converter;\n+package org.camunda.bpm.engine.rest.converter;\n \n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import org.camunda.bpm.engine.impl.calendar.DateTimeUtil;\n+import org.camunda.bpm.engine.rest.dto.converter.DateConverter;\n import org.camunda.bpm.engine.rest.exception.InvalidRequestException;\n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.Mockito;\n+import static org.mockito.Matchers.anyString;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n \n import static org.junit.Assert.assertEquals;\n \n"}}, {"oid": "0e76b2a27374b3d5c9bf70643dd9e4c0fc583b81", "url": "https://github.com/camunda/camunda-bpm-platform/commit/0e76b2a27374b3d5c9bf70643dd9e4c0fc583b81", "message": "Include PR feedback", "committedDate": "2020-10-23T12:24:44Z", "type": "commit"}]}