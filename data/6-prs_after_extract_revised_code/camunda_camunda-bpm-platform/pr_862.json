{"pr_number": 862, "pr_title": "CAM-12024: configure telemetry via Java and Rest API", "pr_createdAt": "2020-06-16T13:12:43Z", "pr_url": "https://github.com/camunda/camunda-bpm-platform/pull/862", "timeline": [{"oid": "ea9d2e09ec14468b836e519f0790a68d044640cd", "url": "https://github.com/camunda/camunda-bpm-platform/commit/ea9d2e09ec14468b836e519f0790a68d044640cd", "message": "feat(engine/rest): expose telemetry configuration in Java/REST API\n\n* add openapi documentation\n\nRelated to CAM-12024", "committedDate": "2020-06-16T14:23:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1ODg5NQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/862#discussion_r442158895", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static final String PATH = \"/telemetry\";\n          \n          \n            \n              String PATH = \"/telemetry\";", "author": "tasso94", "createdAt": "2020-06-18T11:31:21Z", "path": "engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/TelemetryRestService.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.engine.rest;\n+\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+import org.camunda.bpm.engine.rest.dto.TelemetryConfigurationDto;\n+\n+@Produces(MediaType.APPLICATION_JSON)\n+public interface TelemetryRestService {\n+\n+  public static final String PATH = \"/telemetry\";", "originalCommit": "ea9d2e09ec14468b836e519f0790a68d044640cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ec7980dfa4dae02150abc27aea5e98c00ecbf043", "chunk": "diff --git a/engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/TelemetryRestService.java b/engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/TelemetryRestService.java\nindex d6690fd7e4..993a8954fc 100644\n--- a/engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/TelemetryRestService.java\n+++ b/engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/TelemetryRestService.java\n\n@@ -26,7 +26,7 @@ import org.camunda.bpm.engine.rest.dto.TelemetryConfigurationDto;\n @Produces(MediaType.APPLICATION_JSON)\n public interface TelemetryRestService {\n \n-  public static final String PATH = \"/telemetry\";\n+  String PATH = \"/telemetry/configuration\";\n \n   @POST\n   @Consumes(MediaType.APPLICATION_JSON)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1OTMzMA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/862#discussion_r442159330", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private boolean enableTelemetry;\n          \n          \n            \n              protected boolean enableTelemetry;", "author": "tasso94", "createdAt": "2020-06-18T11:32:18Z", "path": "engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/TelemetryConfigurationDto.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.engine.rest.dto;\n+\n+public class TelemetryConfigurationDto {\n+\n+  private boolean enableTelemetry;", "originalCommit": "ea9d2e09ec14468b836e519f0790a68d044640cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ec7980dfa4dae02150abc27aea5e98c00ecbf043", "chunk": "diff --git a/engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/TelemetryConfigurationDto.java b/engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/TelemetryConfigurationDto.java\nindex 419a98fbd2..4887d8c1e4 100644\n--- a/engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/TelemetryConfigurationDto.java\n+++ b/engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/TelemetryConfigurationDto.java\n\n@@ -18,9 +18,14 @@ package org.camunda.bpm.engine.rest.dto;\n \n public class TelemetryConfigurationDto {\n \n-  private boolean enableTelemetry;\n+  protected  boolean enableTelemetry;\n \n   public boolean isEnableTelemetry() {\n     return enableTelemetry;\n   }\n+\n+  public void setEnableTelemetry(boolean enableTelemetry) {\n+    this.enableTelemetry = enableTelemetry;\n+  }\n+ \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1OTQ1Mg==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/862#discussion_r442159452", "bodyText": "Do we need a setter as well?", "author": "tasso94", "createdAt": "2020-06-18T11:32:35Z", "path": "engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/TelemetryConfigurationDto.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.engine.rest.dto;\n+\n+public class TelemetryConfigurationDto {\n+\n+  private boolean enableTelemetry;\n+\n+  public boolean isEnableTelemetry() {", "originalCommit": "ea9d2e09ec14468b836e519f0790a68d044640cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ec7980dfa4dae02150abc27aea5e98c00ecbf043", "chunk": "diff --git a/engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/TelemetryConfigurationDto.java b/engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/TelemetryConfigurationDto.java\nindex 419a98fbd2..4887d8c1e4 100644\n--- a/engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/TelemetryConfigurationDto.java\n+++ b/engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/TelemetryConfigurationDto.java\n\n@@ -18,9 +18,14 @@ package org.camunda.bpm.engine.rest.dto;\n \n public class TelemetryConfigurationDto {\n \n-  private boolean enableTelemetry;\n+  protected  boolean enableTelemetry;\n \n   public boolean isEnableTelemetry() {\n     return enableTelemetry;\n   }\n+\n+  public void setEnableTelemetry(boolean enableTelemetry) {\n+    this.enableTelemetry = enableTelemetry;\n+  }\n+ \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1OTYyOA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/862#discussion_r442159628", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private ManagementService managementServiceMock;\n          \n          \n            \n              protected ManagementService managementServiceMock;", "author": "tasso94", "createdAt": "2020-06-18T11:32:58Z", "path": "engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/TelemetryRestServiceTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.engine.rest;\n+\n+import org.camunda.bpm.engine.AuthorizationException;\n+import org.camunda.bpm.engine.ManagementService;\n+import org.camunda.bpm.engine.rest.util.container.TestContainerRule;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+\n+import io.restassured.http.ContentType;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.ws.rs.core.Response.Status;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.mockito.Mockito.*;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+public class TelemetryRestServiceTest extends AbstractRestServiceTest {\n+\n+  @ClassRule\n+  public static TestContainerRule rule = new TestContainerRule();\n+\n+  protected static final String TELEMETRY_URL = TEST_RESOURCE_ROOT_PATH +  TelemetryRestService.PATH;\n+\n+  private ManagementService managementServiceMock;", "originalCommit": "ea9d2e09ec14468b836e519f0790a68d044640cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ec7980dfa4dae02150abc27aea5e98c00ecbf043", "chunk": "diff --git a/engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/TelemetryRestServiceTest.java b/engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/TelemetryRestServiceTest.java\nindex e323eb377e..d34373e484 100644\n--- a/engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/TelemetryRestServiceTest.java\n+++ b/engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/TelemetryRestServiceTest.java\n\n@@ -42,7 +42,7 @@ public class TelemetryRestServiceTest extends AbstractRestServiceTest {\n \n   protected static final String TELEMETRY_URL = TEST_RESOURCE_ROOT_PATH +  TelemetryRestService.PATH;\n \n-  private ManagementService managementServiceMock;\n+  protected ManagementService managementServiceMock;\n \n   @Before\n   public void setupMocks() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1OTg4Ng==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/862#discussion_r442159886", "bodyText": "Let's add @throws java docs to document the authorization exception.", "author": "tasso94", "createdAt": "2020-06-18T11:33:31Z", "path": "engine/src/main/java/org/camunda/bpm/engine/ManagementService.java", "diffHunk": "@@ -1343,4 +1343,7 @@ Batch setJobRetriesAsync (List<String> processInstanceIds,\n    */\n   SchemaLogQuery createSchemaLogQuery();\n \n+  /** Enable/disable telemetry */", "originalCommit": "ea9d2e09ec14468b836e519f0790a68d044640cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ec7980dfa4dae02150abc27aea5e98c00ecbf043", "chunk": "diff --git a/engine/src/main/java/org/camunda/bpm/engine/ManagementService.java b/engine/src/main/java/org/camunda/bpm/engine/ManagementService.java\nindex 925743b872..eb125e816f 100644\n--- a/engine/src/main/java/org/camunda/bpm/engine/ManagementService.java\n+++ b/engine/src/main/java/org/camunda/bpm/engine/ManagementService.java\n\n@@ -1343,7 +1343,12 @@ public interface ManagementService {\n    */\n   SchemaLogQuery createSchemaLogQuery();\n \n-  /** Enable/disable telemetry */\n-  void configureTelemetry(boolean enabled);\n+  /**\n+   * Enable/disable sending telemetry data to Camunda\n+   * \n+   * @throws AuthorizationException\n+   *          If the user is not a member of the group {@link Groups#CAMUNDA_ADMIN}.\n+   */\n+  void enableTelemetry(boolean enabled);\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE2MDc2MA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/862#discussion_r442160760", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              void configureTelemetry(boolean enabled);\n          \n          \n            \n              void enableTelemetry(boolean enabled);\n          \n      \n    \n    \n  \n\nThe term configure makes from my point of view only sense if there is more to specify than just enable or disable the feature. If we used a fluent builder pattern instead, I would go for configure otherwise enable.", "author": "tasso94", "createdAt": "2020-06-18T11:35:30Z", "path": "engine/src/main/java/org/camunda/bpm/engine/ManagementService.java", "diffHunk": "@@ -1343,4 +1343,7 @@ Batch setJobRetriesAsync (List<String> processInstanceIds,\n    */\n   SchemaLogQuery createSchemaLogQuery();\n \n+  /** Enable/disable telemetry */\n+  void configureTelemetry(boolean enabled);", "originalCommit": "ea9d2e09ec14468b836e519f0790a68d044640cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ec7980dfa4dae02150abc27aea5e98c00ecbf043", "chunk": "diff --git a/engine/src/main/java/org/camunda/bpm/engine/ManagementService.java b/engine/src/main/java/org/camunda/bpm/engine/ManagementService.java\nindex 925743b872..eb125e816f 100644\n--- a/engine/src/main/java/org/camunda/bpm/engine/ManagementService.java\n+++ b/engine/src/main/java/org/camunda/bpm/engine/ManagementService.java\n\n@@ -1343,7 +1343,12 @@ public interface ManagementService {\n    */\n   SchemaLogQuery createSchemaLogQuery();\n \n-  /** Enable/disable telemetry */\n-  void configureTelemetry(boolean enabled);\n+  /**\n+   * Enable/disable sending telemetry data to Camunda\n+   * \n+   * @throws AuthorizationException\n+   *          If the user is not a member of the group {@link Groups#CAMUNDA_ADMIN}.\n+   */\n+  void enableTelemetry(boolean enabled);\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE2MTg3NA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/862#discussion_r442161874", "bodyText": "Since we discussed to always insert the property into the database on engine startup, it would be more performant just to update the property and not go again through the exclusive lock logic. Also, no OptimisticLockingException is thrown with the exclusive lock approach, which is counterintuitive for the user.", "author": "tasso94", "createdAt": "2020-06-18T11:37:49Z", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/cmd/TelemetryConfigureCmd.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.engine.impl.cmd;\n+\n+import org.camunda.bpm.engine.impl.interceptor.Command;\n+import org.camunda.bpm.engine.impl.interceptor.CommandContext;\n+import org.camunda.bpm.engine.impl.persistence.entity.AuthorizationManager;\n+\n+public class TelemetryConfigureCmd implements Command<Object> {\n+\n+  protected boolean telemetryEnabled;\n+\n+  public TelemetryConfigureCmd(boolean telemetryEnabled) {\n+    this.telemetryEnabled = telemetryEnabled;\n+  }\n+\n+  public Object execute(CommandContext commandContext) {\n+\n+    AuthorizationManager authorizationManager = commandContext.getAuthorizationManager();\n+    authorizationManager.checkCamundaAdmin();\n+\n+    new TelemetrySetupCommand(telemetryEnabled).execute(commandContext);", "originalCommit": "ea9d2e09ec14468b836e519f0790a68d044640cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ec7980dfa4dae02150abc27aea5e98c00ecbf043", "chunk": "diff --git a/engine/src/main/java/org/camunda/bpm/engine/impl/cmd/TelemetryConfigureCmd.java b/engine/src/main/java/org/camunda/bpm/engine/impl/cmd/TelemetryConfigureCmd.java\nindex 18b007d173..d34fdb027c 100644\n--- a/engine/src/main/java/org/camunda/bpm/engine/impl/cmd/TelemetryConfigureCmd.java\n+++ b/engine/src/main/java/org/camunda/bpm/engine/impl/cmd/TelemetryConfigureCmd.java\n\n@@ -19,6 +19,7 @@ package org.camunda.bpm.engine.impl.cmd;\n import org.camunda.bpm.engine.impl.interceptor.Command;\n import org.camunda.bpm.engine.impl.interceptor.CommandContext;\n import org.camunda.bpm.engine.impl.persistence.entity.AuthorizationManager;\n+import org.camunda.bpm.engine.impl.persistence.entity.PropertyEntity;\n \n public class TelemetryConfigureCmd implements Command<Object> {\n \n"}}, {"oid": "ec7980dfa4dae02150abc27aea5e98c00ecbf043", "url": "https://github.com/camunda/camunda-bpm-platform/commit/ec7980dfa4dae02150abc27aea5e98c00ecbf043", "message": "improve(engine/rest): improve telemetry API", "committedDate": "2020-06-19T13:57:08Z", "type": "forcePushed"}, {"oid": "549c84584e58eb81f424139b8b957c0e70dbde04", "url": "https://github.com/camunda/camunda-bpm-platform/commit/549c84584e58eb81f424139b8b957c0e70dbde04", "message": "feat(engine/rest): expose telemetry configuration in Java/REST API\n\n* add openapi documentation\n\nRelated to CAM-12024", "committedDate": "2020-06-22T09:26:42Z", "type": "commit"}, {"oid": "98bb021574ce73445796914e9c02ebb8e47463cf", "url": "https://github.com/camunda/camunda-bpm-platform/commit/98bb021574ce73445796914e9c02ebb8e47463cf", "message": "improve(engine/rest): improve telemetry API", "committedDate": "2020-06-22T09:26:42Z", "type": "commit"}, {"oid": "98bb021574ce73445796914e9c02ebb8e47463cf", "url": "https://github.com/camunda/camunda-bpm-platform/commit/98bb021574ce73445796914e9c02ebb8e47463cf", "message": "improve(engine/rest): improve telemetry API", "committedDate": "2020-06-22T09:26:42Z", "type": "forcePushed"}]}