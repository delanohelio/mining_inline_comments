{"pr_number": 4904, "pr_title": "FISH-315 Camel Case Testing", "pr_createdAt": "2020-09-24T11:18:04Z", "pr_url": "https://github.com/payara/Payara/pull/4904", "timeline": [{"oid": "d8d567e57fd8698550656c3fc41b6f307d1dd9cc", "url": "https://github.com/payara/Payara/commit/d8d567e57fd8698550656c3fc41b6f307d1dd9cc", "message": "FISH-215 Camel Case Testing\n\nAdded testing for the camel casing function to make sure that notifier\nproperties are calculated correctly the majority of the time. This is to\nensure that notifier implementations don't see any unexpected results.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-09-24T11:20:34Z", "type": "forcePushed"}, {"oid": "09b2652ecb7035acbe05719570eef591163e3143", "url": "https://github.com/payara/Payara/commit/09b2652ecb7035acbe05719570eef591163e3143", "message": "FISH-315 Camel Case Testing\n\nAdded testing for the camel casing function to make sure that notifier\nproperties are calculated correctly the majority of the time. This is to\nensure that notifier implementations don't see any unexpected results.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-09-24T11:32:23Z", "type": "commit"}, {"oid": "09b2652ecb7035acbe05719570eef591163e3143", "url": "https://github.com/payara/Payara/commit/09b2652ecb7035acbe05719570eef591163e3143", "message": "FISH-315 Camel Case Testing\n\nAdded testing for the camel casing function to make sure that notifier\nproperties are calculated correctly the majority of the time. This is to\nensure that notifier implementations don't see any unexpected results.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-09-24T11:32:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI0MjgzMw==", "url": "https://github.com/payara/Payara/pull/4904#discussion_r494242833", "bodyText": "Perhaps a assert for white space before or after a internal symbol", "author": "AlanRoth", "createdAt": "2020-09-24T11:37:11Z", "path": "nucleus/common/internal-api/src/test/java/fish/payara/internal/notification/CamelCaseConversionTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.internal.notification;\n+\n+import static fish.payara.internal.notification.NotifierUtils.convertToCamelCase;\n+import static org.junit.Assert.assertEquals;\n+\n+import org.junit.Test;\n+\n+public class CamelCaseConversionTest {\n+\n+    @Test\n+    public void if_empty_expect_same() {\n+        assertEquals(null, convertToCamelCase(null));\n+        assertEquals(\"\", convertToCamelCase(\"\"));\n+    }\n+\n+    @Test\n+    public void if_lower_case_expect_same() {\n+        assertEquals(\"accountid\", convertToCamelCase(\"accountid\"));\n+    }\n+\n+    @Test\n+    public void if_upper_case_expect_lower_case() {\n+        assertEquals(\"accountid\", convertToCamelCase(\"ACCOUNTID\"));\n+    }\n+\n+    @Test\n+    public void if_numbers_expect_same() {\n+        assertEquals(\"a123\", convertToCamelCase(\"a123\"));\n+        assertEquals(\"a123b\", convertToCamelCase(\"a123b\"));\n+        assertEquals(\"123\", convertToCamelCase(\"123\"));\n+    }\n+\n+    @Test\n+    public void if_leading_symbols_expect_removed() {\n+        assertEquals(\"abc\", convertToCamelCase(\"_abc\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"&abc\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"-abc\"));\n+    }\n+\n+    @Test\n+    public void if_trailing_symbols_expect_removed() {\n+        assertEquals(\"abc\", convertToCamelCase(\"abc_\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"abc&\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"abc-\"));\n+    }\n+\n+    @Test\n+    public void if_internal_symbols_expect_next_character_capitalised() {\n+        assertEquals(\"aBc\", convertToCamelCase(\"a_bc\"));\n+        assertEquals(\"aBc\", convertToCamelCase(\"a-bc\"));", "originalCommit": "09b2652ecb7035acbe05719570eef591163e3143", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e71db0d22d76378eeb4afe7a92a65934acb49f1d", "chunk": "diff --git a/nucleus/common/internal-api/src/test/java/fish/payara/internal/notification/CamelCaseConversionTest.java b/nucleus/common/internal-api/src/test/java/fish/payara/internal/notification/CamelCaseConversionTest.java\nindex 3a55daa6f2..239b0dfd83 100644\n--- a/nucleus/common/internal-api/src/test/java/fish/payara/internal/notification/CamelCaseConversionTest.java\n+++ b/nucleus/common/internal-api/src/test/java/fish/payara/internal/notification/CamelCaseConversionTest.java\n\n@@ -70,37 +70,29 @@ public class CamelCaseConversionTest {\n     }\n \n     @Test\n-    public void if_leading_symbols_expect_removed() {\n-        assertEquals(\"abc\", convertToCamelCase(\"_abc\"));\n-        assertEquals(\"abc\", convertToCamelCase(\"&abc\"));\n+    public void if_leading_non_alphanumeric_characters_expect_removed() {\n+        assertEquals(\"abc\", convertToCamelCase(\" abc\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"  abc\"));\n         assertEquals(\"abc\", convertToCamelCase(\"-abc\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"_-abc\"));\n+        assertEquals(\"abc\", convertToCamelCase(\" -abc\"));\n     }\n \n     @Test\n-    public void if_trailing_symbols_expect_removed() {\n-        assertEquals(\"abc\", convertToCamelCase(\"abc_\"));\n-        assertEquals(\"abc\", convertToCamelCase(\"abc&\"));\n-        assertEquals(\"abc\", convertToCamelCase(\"abc-\"));\n-    }\n-\n-    @Test\n-    public void if_internal_symbols_expect_next_character_capitalised() {\n-        assertEquals(\"aBc\", convertToCamelCase(\"a_bc\"));\n-        assertEquals(\"aBc\", convertToCamelCase(\"a-bc\"));\n-    }\n-\n-    @Test\n-    public void if_surrounding_whitespace_expect_removed() {\n+    public void if_trailing_non_alphanumeric_characters_expect_removed() {\n         assertEquals(\"abc\", convertToCamelCase(\"abc \"));\n         assertEquals(\"abc\", convertToCamelCase(\"abc  \"));\n-        assertEquals(\"abc\", convertToCamelCase(\" abc\"));\n-        assertEquals(\"abc\", convertToCamelCase(\"  abc\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"abc-\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"abc-_\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"abc- \"));\n     }\n \n     @Test\n-    public void if_internal_whitespace_expect_next_character_capitalised() {\n+    public void if_internal_non_alphanumeric_characters_expect_next_character_capitalised() {\n+        assertEquals(\"aBc\", convertToCamelCase(\"a_bc\"));\n+        assertEquals(\"aBc\", convertToCamelCase(\"a-_bc\"));\n         assertEquals(\"aBc\", convertToCamelCase(\"a bc\"));\n-        assertEquals(\"abC\", convertToCamelCase(\"ab c\"));\n+        assertEquals(\"aBc\", convertToCamelCase(\"a  bc\"));\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI0MzkzNw==", "url": "https://github.com/payara/Payara/pull/4904#discussion_r494243937", "bodyText": "Assert for multiple internal symbols?", "author": "AlanRoth", "createdAt": "2020-09-24T11:39:19Z", "path": "nucleus/common/internal-api/src/test/java/fish/payara/internal/notification/CamelCaseConversionTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.internal.notification;\n+\n+import static fish.payara.internal.notification.NotifierUtils.convertToCamelCase;\n+import static org.junit.Assert.assertEquals;\n+\n+import org.junit.Test;\n+\n+public class CamelCaseConversionTest {\n+\n+    @Test\n+    public void if_empty_expect_same() {\n+        assertEquals(null, convertToCamelCase(null));\n+        assertEquals(\"\", convertToCamelCase(\"\"));\n+    }\n+\n+    @Test\n+    public void if_lower_case_expect_same() {\n+        assertEquals(\"accountid\", convertToCamelCase(\"accountid\"));\n+    }\n+\n+    @Test\n+    public void if_upper_case_expect_lower_case() {\n+        assertEquals(\"accountid\", convertToCamelCase(\"ACCOUNTID\"));\n+    }\n+\n+    @Test\n+    public void if_numbers_expect_same() {\n+        assertEquals(\"a123\", convertToCamelCase(\"a123\"));\n+        assertEquals(\"a123b\", convertToCamelCase(\"a123b\"));\n+        assertEquals(\"123\", convertToCamelCase(\"123\"));\n+    }\n+\n+    @Test\n+    public void if_leading_symbols_expect_removed() {\n+        assertEquals(\"abc\", convertToCamelCase(\"_abc\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"&abc\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"-abc\"));\n+    }\n+\n+    @Test\n+    public void if_trailing_symbols_expect_removed() {\n+        assertEquals(\"abc\", convertToCamelCase(\"abc_\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"abc&\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"abc-\"));\n+    }\n+\n+    @Test\n+    public void if_internal_symbols_expect_next_character_capitalised() {\n+        assertEquals(\"aBc\", convertToCamelCase(\"a_bc\"));\n+        assertEquals(\"aBc\", convertToCamelCase(\"a-bc\"));", "originalCommit": "09b2652ecb7035acbe05719570eef591163e3143", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e71db0d22d76378eeb4afe7a92a65934acb49f1d", "chunk": "diff --git a/nucleus/common/internal-api/src/test/java/fish/payara/internal/notification/CamelCaseConversionTest.java b/nucleus/common/internal-api/src/test/java/fish/payara/internal/notification/CamelCaseConversionTest.java\nindex 3a55daa6f2..239b0dfd83 100644\n--- a/nucleus/common/internal-api/src/test/java/fish/payara/internal/notification/CamelCaseConversionTest.java\n+++ b/nucleus/common/internal-api/src/test/java/fish/payara/internal/notification/CamelCaseConversionTest.java\n\n@@ -70,37 +70,29 @@ public class CamelCaseConversionTest {\n     }\n \n     @Test\n-    public void if_leading_symbols_expect_removed() {\n-        assertEquals(\"abc\", convertToCamelCase(\"_abc\"));\n-        assertEquals(\"abc\", convertToCamelCase(\"&abc\"));\n+    public void if_leading_non_alphanumeric_characters_expect_removed() {\n+        assertEquals(\"abc\", convertToCamelCase(\" abc\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"  abc\"));\n         assertEquals(\"abc\", convertToCamelCase(\"-abc\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"_-abc\"));\n+        assertEquals(\"abc\", convertToCamelCase(\" -abc\"));\n     }\n \n     @Test\n-    public void if_trailing_symbols_expect_removed() {\n-        assertEquals(\"abc\", convertToCamelCase(\"abc_\"));\n-        assertEquals(\"abc\", convertToCamelCase(\"abc&\"));\n-        assertEquals(\"abc\", convertToCamelCase(\"abc-\"));\n-    }\n-\n-    @Test\n-    public void if_internal_symbols_expect_next_character_capitalised() {\n-        assertEquals(\"aBc\", convertToCamelCase(\"a_bc\"));\n-        assertEquals(\"aBc\", convertToCamelCase(\"a-bc\"));\n-    }\n-\n-    @Test\n-    public void if_surrounding_whitespace_expect_removed() {\n+    public void if_trailing_non_alphanumeric_characters_expect_removed() {\n         assertEquals(\"abc\", convertToCamelCase(\"abc \"));\n         assertEquals(\"abc\", convertToCamelCase(\"abc  \"));\n-        assertEquals(\"abc\", convertToCamelCase(\" abc\"));\n-        assertEquals(\"abc\", convertToCamelCase(\"  abc\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"abc-\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"abc-_\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"abc- \"));\n     }\n \n     @Test\n-    public void if_internal_whitespace_expect_next_character_capitalised() {\n+    public void if_internal_non_alphanumeric_characters_expect_next_character_capitalised() {\n+        assertEquals(\"aBc\", convertToCamelCase(\"a_bc\"));\n+        assertEquals(\"aBc\", convertToCamelCase(\"a-_bc\"));\n         assertEquals(\"aBc\", convertToCamelCase(\"a bc\"));\n-        assertEquals(\"abC\", convertToCamelCase(\"ab c\"));\n+        assertEquals(\"aBc\", convertToCamelCase(\"a  bc\"));\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI0NzQ5NA==", "url": "https://github.com/payara/Payara/pull/4904#discussion_r494247494", "bodyText": "Could add a case for \"   \" expect \"\" or expect same, whichever is correct\nif (string == null || string.isEmpty()) { return string; }\nCan do string.trim().isEmpty() and return string.trim(), so \"\" is returned if a whitespace string of any length is entered", "author": "AlanRoth", "createdAt": "2020-09-24T11:44:18Z", "path": "nucleus/common/internal-api/src/test/java/fish/payara/internal/notification/CamelCaseConversionTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.internal.notification;\n+\n+import static fish.payara.internal.notification.NotifierUtils.convertToCamelCase;\n+import static org.junit.Assert.assertEquals;\n+\n+import org.junit.Test;\n+\n+public class CamelCaseConversionTest {", "originalCommit": "09b2652ecb7035acbe05719570eef591163e3143", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e71db0d22d76378eeb4afe7a92a65934acb49f1d", "chunk": "diff --git a/nucleus/common/internal-api/src/test/java/fish/payara/internal/notification/CamelCaseConversionTest.java b/nucleus/common/internal-api/src/test/java/fish/payara/internal/notification/CamelCaseConversionTest.java\nindex 3a55daa6f2..239b0dfd83 100644\n--- a/nucleus/common/internal-api/src/test/java/fish/payara/internal/notification/CamelCaseConversionTest.java\n+++ b/nucleus/common/internal-api/src/test/java/fish/payara/internal/notification/CamelCaseConversionTest.java\n\n@@ -70,37 +70,29 @@ public class CamelCaseConversionTest {\n     }\n \n     @Test\n-    public void if_leading_symbols_expect_removed() {\n-        assertEquals(\"abc\", convertToCamelCase(\"_abc\"));\n-        assertEquals(\"abc\", convertToCamelCase(\"&abc\"));\n+    public void if_leading_non_alphanumeric_characters_expect_removed() {\n+        assertEquals(\"abc\", convertToCamelCase(\" abc\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"  abc\"));\n         assertEquals(\"abc\", convertToCamelCase(\"-abc\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"_-abc\"));\n+        assertEquals(\"abc\", convertToCamelCase(\" -abc\"));\n     }\n \n     @Test\n-    public void if_trailing_symbols_expect_removed() {\n-        assertEquals(\"abc\", convertToCamelCase(\"abc_\"));\n-        assertEquals(\"abc\", convertToCamelCase(\"abc&\"));\n-        assertEquals(\"abc\", convertToCamelCase(\"abc-\"));\n-    }\n-\n-    @Test\n-    public void if_internal_symbols_expect_next_character_capitalised() {\n-        assertEquals(\"aBc\", convertToCamelCase(\"a_bc\"));\n-        assertEquals(\"aBc\", convertToCamelCase(\"a-bc\"));\n-    }\n-\n-    @Test\n-    public void if_surrounding_whitespace_expect_removed() {\n+    public void if_trailing_non_alphanumeric_characters_expect_removed() {\n         assertEquals(\"abc\", convertToCamelCase(\"abc \"));\n         assertEquals(\"abc\", convertToCamelCase(\"abc  \"));\n-        assertEquals(\"abc\", convertToCamelCase(\" abc\"));\n-        assertEquals(\"abc\", convertToCamelCase(\"  abc\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"abc-\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"abc-_\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"abc- \"));\n     }\n \n     @Test\n-    public void if_internal_whitespace_expect_next_character_capitalised() {\n+    public void if_internal_non_alphanumeric_characters_expect_next_character_capitalised() {\n+        assertEquals(\"aBc\", convertToCamelCase(\"a_bc\"));\n+        assertEquals(\"aBc\", convertToCamelCase(\"a-_bc\"));\n         assertEquals(\"aBc\", convertToCamelCase(\"a bc\"));\n-        assertEquals(\"abC\", convertToCamelCase(\"ab c\"));\n+        assertEquals(\"aBc\", convertToCamelCase(\"a  bc\"));\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI0OTE0Mw==", "url": "https://github.com/payara/Payara/pull/4904#discussion_r494249143", "bodyText": "Assert for multiple whitespaces?", "author": "AlanRoth", "createdAt": "2020-09-24T11:45:52Z", "path": "nucleus/common/internal-api/src/test/java/fish/payara/internal/notification/CamelCaseConversionTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.internal.notification;\n+\n+import static fish.payara.internal.notification.NotifierUtils.convertToCamelCase;\n+import static org.junit.Assert.assertEquals;\n+\n+import org.junit.Test;\n+\n+public class CamelCaseConversionTest {\n+\n+    @Test\n+    public void if_empty_expect_same() {\n+        assertEquals(null, convertToCamelCase(null));\n+        assertEquals(\"\", convertToCamelCase(\"\"));\n+    }\n+\n+    @Test\n+    public void if_lower_case_expect_same() {\n+        assertEquals(\"accountid\", convertToCamelCase(\"accountid\"));\n+    }\n+\n+    @Test\n+    public void if_upper_case_expect_lower_case() {\n+        assertEquals(\"accountid\", convertToCamelCase(\"ACCOUNTID\"));\n+    }\n+\n+    @Test\n+    public void if_numbers_expect_same() {\n+        assertEquals(\"a123\", convertToCamelCase(\"a123\"));\n+        assertEquals(\"a123b\", convertToCamelCase(\"a123b\"));\n+        assertEquals(\"123\", convertToCamelCase(\"123\"));\n+    }\n+\n+    @Test\n+    public void if_leading_symbols_expect_removed() {\n+        assertEquals(\"abc\", convertToCamelCase(\"_abc\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"&abc\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"-abc\"));\n+    }\n+\n+    @Test\n+    public void if_trailing_symbols_expect_removed() {\n+        assertEquals(\"abc\", convertToCamelCase(\"abc_\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"abc&\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"abc-\"));\n+    }\n+\n+    @Test\n+    public void if_internal_symbols_expect_next_character_capitalised() {\n+        assertEquals(\"aBc\", convertToCamelCase(\"a_bc\"));\n+        assertEquals(\"aBc\", convertToCamelCase(\"a-bc\"));\n+    }\n+\n+    @Test\n+    public void if_surrounding_whitespace_expect_removed() {\n+        assertEquals(\"abc\", convertToCamelCase(\"abc \"));\n+        assertEquals(\"abc\", convertToCamelCase(\"abc  \"));\n+        assertEquals(\"abc\", convertToCamelCase(\" abc\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"  abc\"));\n+    }\n+\n+    @Test\n+    public void if_internal_whitespace_expect_next_character_capitalised() {\n+        assertEquals(\"aBc\", convertToCamelCase(\"a bc\"));\n+        assertEquals(\"abC\", convertToCamelCase(\"ab c\"));", "originalCommit": "09b2652ecb7035acbe05719570eef591163e3143", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e71db0d22d76378eeb4afe7a92a65934acb49f1d", "chunk": "diff --git a/nucleus/common/internal-api/src/test/java/fish/payara/internal/notification/CamelCaseConversionTest.java b/nucleus/common/internal-api/src/test/java/fish/payara/internal/notification/CamelCaseConversionTest.java\nindex 3a55daa6f2..239b0dfd83 100644\n--- a/nucleus/common/internal-api/src/test/java/fish/payara/internal/notification/CamelCaseConversionTest.java\n+++ b/nucleus/common/internal-api/src/test/java/fish/payara/internal/notification/CamelCaseConversionTest.java\n\n@@ -70,37 +70,29 @@ public class CamelCaseConversionTest {\n     }\n \n     @Test\n-    public void if_leading_symbols_expect_removed() {\n-        assertEquals(\"abc\", convertToCamelCase(\"_abc\"));\n-        assertEquals(\"abc\", convertToCamelCase(\"&abc\"));\n+    public void if_leading_non_alphanumeric_characters_expect_removed() {\n+        assertEquals(\"abc\", convertToCamelCase(\" abc\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"  abc\"));\n         assertEquals(\"abc\", convertToCamelCase(\"-abc\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"_-abc\"));\n+        assertEquals(\"abc\", convertToCamelCase(\" -abc\"));\n     }\n \n     @Test\n-    public void if_trailing_symbols_expect_removed() {\n-        assertEquals(\"abc\", convertToCamelCase(\"abc_\"));\n-        assertEquals(\"abc\", convertToCamelCase(\"abc&\"));\n-        assertEquals(\"abc\", convertToCamelCase(\"abc-\"));\n-    }\n-\n-    @Test\n-    public void if_internal_symbols_expect_next_character_capitalised() {\n-        assertEquals(\"aBc\", convertToCamelCase(\"a_bc\"));\n-        assertEquals(\"aBc\", convertToCamelCase(\"a-bc\"));\n-    }\n-\n-    @Test\n-    public void if_surrounding_whitespace_expect_removed() {\n+    public void if_trailing_non_alphanumeric_characters_expect_removed() {\n         assertEquals(\"abc\", convertToCamelCase(\"abc \"));\n         assertEquals(\"abc\", convertToCamelCase(\"abc  \"));\n-        assertEquals(\"abc\", convertToCamelCase(\" abc\"));\n-        assertEquals(\"abc\", convertToCamelCase(\"  abc\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"abc-\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"abc-_\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"abc- \"));\n     }\n \n     @Test\n-    public void if_internal_whitespace_expect_next_character_capitalised() {\n+    public void if_internal_non_alphanumeric_characters_expect_next_character_capitalised() {\n+        assertEquals(\"aBc\", convertToCamelCase(\"a_bc\"));\n+        assertEquals(\"aBc\", convertToCamelCase(\"a-_bc\"));\n         assertEquals(\"aBc\", convertToCamelCase(\"a bc\"));\n-        assertEquals(\"abC\", convertToCamelCase(\"ab c\"));\n+        assertEquals(\"aBc\", convertToCamelCase(\"a  bc\"));\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI1MTg4NA==", "url": "https://github.com/payara/Payara/pull/4904#discussion_r494251884", "bodyText": "Whats expected if there is a number followed by a whitespace and vice versa?", "author": "AlanRoth", "createdAt": "2020-09-24T11:50:51Z", "path": "nucleus/common/internal-api/src/test/java/fish/payara/internal/notification/CamelCaseConversionTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.internal.notification;\n+\n+import static fish.payara.internal.notification.NotifierUtils.convertToCamelCase;\n+import static org.junit.Assert.assertEquals;\n+\n+import org.junit.Test;\n+\n+public class CamelCaseConversionTest {\n+\n+    @Test\n+    public void if_empty_expect_same() {\n+        assertEquals(null, convertToCamelCase(null));\n+        assertEquals(\"\", convertToCamelCase(\"\"));\n+    }\n+\n+    @Test\n+    public void if_lower_case_expect_same() {\n+        assertEquals(\"accountid\", convertToCamelCase(\"accountid\"));\n+    }\n+\n+    @Test\n+    public void if_upper_case_expect_lower_case() {\n+        assertEquals(\"accountid\", convertToCamelCase(\"ACCOUNTID\"));\n+    }\n+\n+    @Test\n+    public void if_numbers_expect_same() {\n+        assertEquals(\"a123\", convertToCamelCase(\"a123\"));\n+        assertEquals(\"a123b\", convertToCamelCase(\"a123b\"));\n+        assertEquals(\"123\", convertToCamelCase(\"123\"));\n+    }\n+\n+    @Test\n+    public void if_leading_symbols_expect_removed() {\n+        assertEquals(\"abc\", convertToCamelCase(\"_abc\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"&abc\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"-abc\"));\n+    }\n+\n+    @Test\n+    public void if_trailing_symbols_expect_removed() {\n+        assertEquals(\"abc\", convertToCamelCase(\"abc_\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"abc&\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"abc-\"));\n+    }\n+\n+    @Test\n+    public void if_internal_symbols_expect_next_character_capitalised() {\n+        assertEquals(\"aBc\", convertToCamelCase(\"a_bc\"));\n+        assertEquals(\"aBc\", convertToCamelCase(\"a-bc\"));\n+    }\n+\n+    @Test\n+    public void if_surrounding_whitespace_expect_removed() {\n+        assertEquals(\"abc\", convertToCamelCase(\"abc \"));\n+        assertEquals(\"abc\", convertToCamelCase(\"abc  \"));\n+        assertEquals(\"abc\", convertToCamelCase(\" abc\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"  abc\"));\n+    }\n+\n+    @Test\n+    public void if_internal_whitespace_expect_next_character_capitalised() {\n+        assertEquals(\"aBc\", convertToCamelCase(\"a bc\"));\n+        assertEquals(\"abC\", convertToCamelCase(\"ab c\"));", "originalCommit": "09b2652ecb7035acbe05719570eef591163e3143", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI1Mjk3Mw==", "url": "https://github.com/payara/Payara/pull/4904#discussion_r494252973", "bodyText": "Or number + internal symbol + whitespace? __l33t - code-", "author": "AlanRoth", "createdAt": "2020-09-24T11:52:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI1MTg4NA=="}], "type": "inlineReview", "revised_code": {"commit": "e71db0d22d76378eeb4afe7a92a65934acb49f1d", "chunk": "diff --git a/nucleus/common/internal-api/src/test/java/fish/payara/internal/notification/CamelCaseConversionTest.java b/nucleus/common/internal-api/src/test/java/fish/payara/internal/notification/CamelCaseConversionTest.java\nindex 3a55daa6f2..239b0dfd83 100644\n--- a/nucleus/common/internal-api/src/test/java/fish/payara/internal/notification/CamelCaseConversionTest.java\n+++ b/nucleus/common/internal-api/src/test/java/fish/payara/internal/notification/CamelCaseConversionTest.java\n\n@@ -70,37 +70,29 @@ public class CamelCaseConversionTest {\n     }\n \n     @Test\n-    public void if_leading_symbols_expect_removed() {\n-        assertEquals(\"abc\", convertToCamelCase(\"_abc\"));\n-        assertEquals(\"abc\", convertToCamelCase(\"&abc\"));\n+    public void if_leading_non_alphanumeric_characters_expect_removed() {\n+        assertEquals(\"abc\", convertToCamelCase(\" abc\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"  abc\"));\n         assertEquals(\"abc\", convertToCamelCase(\"-abc\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"_-abc\"));\n+        assertEquals(\"abc\", convertToCamelCase(\" -abc\"));\n     }\n \n     @Test\n-    public void if_trailing_symbols_expect_removed() {\n-        assertEquals(\"abc\", convertToCamelCase(\"abc_\"));\n-        assertEquals(\"abc\", convertToCamelCase(\"abc&\"));\n-        assertEquals(\"abc\", convertToCamelCase(\"abc-\"));\n-    }\n-\n-    @Test\n-    public void if_internal_symbols_expect_next_character_capitalised() {\n-        assertEquals(\"aBc\", convertToCamelCase(\"a_bc\"));\n-        assertEquals(\"aBc\", convertToCamelCase(\"a-bc\"));\n-    }\n-\n-    @Test\n-    public void if_surrounding_whitespace_expect_removed() {\n+    public void if_trailing_non_alphanumeric_characters_expect_removed() {\n         assertEquals(\"abc\", convertToCamelCase(\"abc \"));\n         assertEquals(\"abc\", convertToCamelCase(\"abc  \"));\n-        assertEquals(\"abc\", convertToCamelCase(\" abc\"));\n-        assertEquals(\"abc\", convertToCamelCase(\"  abc\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"abc-\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"abc-_\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"abc- \"));\n     }\n \n     @Test\n-    public void if_internal_whitespace_expect_next_character_capitalised() {\n+    public void if_internal_non_alphanumeric_characters_expect_next_character_capitalised() {\n+        assertEquals(\"aBc\", convertToCamelCase(\"a_bc\"));\n+        assertEquals(\"aBc\", convertToCamelCase(\"a-_bc\"));\n         assertEquals(\"aBc\", convertToCamelCase(\"a bc\"));\n-        assertEquals(\"abC\", convertToCamelCase(\"ab c\"));\n+        assertEquals(\"aBc\", convertToCamelCase(\"a  bc\"));\n     }\n \n }\n"}}, {"oid": "e71db0d22d76378eeb4afe7a92a65934acb49f1d", "url": "https://github.com/payara/Payara/commit/e71db0d22d76378eeb4afe7a92a65934acb49f1d", "message": "FISH-315 Add Extra Edge Case Tests\n\nModified the camel case method to fix the extra edge case tests.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-09-24T15:35:35Z", "type": "commit"}, {"oid": "1d0bea41c8a1bdc6559acff6a1a1c3b18cde2a17", "url": "https://github.com/payara/Payara/commit/1d0bea41c8a1bdc6559acff6a1a1c3b18cde2a17", "message": "FISH-315 Optimise Camel Case Conversion\n\nExit early if the passed string contains only whitespace or symbols.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-09-24T15:39:25Z", "type": "commit"}, {"oid": "f4515a258773be4fe1c2064741d50da729019feb", "url": "https://github.com/payara/Payara/commit/f4515a258773be4fe1c2064741d50da729019feb", "message": "FISH-315 Test Non-Alphanumeric String\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-09-24T15:42:19Z", "type": "commit"}]}