{"pr_number": 5009, "pr_title": "FISH- 652 Fixed Error in MP JWT validation when retrieving JWKS key from remote location", "pr_createdAt": "2020-11-26T16:18:51Z", "pr_url": "https://github.com/payara/Payara/pull/5009", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTI1MDY5MA==", "url": "https://github.com/payara/Payara/pull/5009#discussion_r531250690", "bodyText": "Shouldn't you explicitly use a CharSet to read from the stream (using the InputStreamReader ctor with CharSet) instead of using the system default CharSet? You might be able to determine the correct encoding by using  getContentEncoding() before actually reading the content.", "author": "svendiedrichsen", "createdAt": "2020-11-26T23:17:37Z", "path": "appserver/payara-appserver-modules/microprofile/jwt-auth/src/main/java/fish/payara/microprofile/jwtauth/eesecurity/SignedJWTIdentityStore.java", "diffHunk": "@@ -211,10 +214,10 @@ public CredentialValidationResult validate(SignedJWTCredential signedJWTCredenti\n             return Optional.empty();\n         }\n \n-        byte[] byteBuffer = new byte[16384];\n-        try (InputStream inputStream = publicKeyURL.openStream()) {\n-            String key = new String(byteBuffer, 0, inputStream.read(byteBuffer));\n-            return createPublicKey(key, keyID);\n+        try (InputStream inputStream = publicKeyURL.openStream();\n+             BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))){", "originalCommit": "fde71f84d731e66a02045c5b7d706efc16f52985", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcwMDQyMw==", "url": "https://github.com/payara/Payara/pull/5009#discussion_r535700423", "bodyText": "Thanks for the suggestion", "author": "fturizo", "createdAt": "2020-12-03T22:47:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTI1MDY5MA=="}], "type": "inlineReview", "revised_code": {"commit": "deaad8c982922a04933262668523d9615307d88b", "chunk": "diff --git a/appserver/payara-appserver-modules/microprofile/jwt-auth/src/main/java/fish/payara/microprofile/jwtauth/eesecurity/SignedJWTIdentityStore.java b/appserver/payara-appserver-modules/microprofile/jwt-auth/src/main/java/fish/payara/microprofile/jwtauth/eesecurity/SignedJWTIdentityStore.java\nindex 8eb5caf2fa..c76f97a240 100644\n--- a/appserver/payara-appserver-modules/microprofile/jwt-auth/src/main/java/fish/payara/microprofile/jwtauth/eesecurity/SignedJWTIdentityStore.java\n+++ b/appserver/payara-appserver-modules/microprofile/jwt-auth/src/main/java/fish/payara/microprofile/jwtauth/eesecurity/SignedJWTIdentityStore.java\n\n@@ -214,8 +218,12 @@ public class SignedJWTIdentityStore implements IdentityStore {\n             return Optional.empty();\n         }\n \n-        try (InputStream inputStream = publicKeyURL.openStream();\n-             BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))){\n+        URLConnection urlConnection = publicKeyURL.openConnection();\n+        ContentType contentType = ContentType.newContentType(urlConnection.getContentType());\n+\n+        Charset charset = contentType.getCharacterEncoding() != null ? Charset.forName(contentType.getCharacterEncoding()) : Charset.defaultCharset();\n+        try (InputStream inputStream = urlConnection.getInputStream();\n+             BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, charset))){\n             String keyContents = reader.lines().collect(Collectors.joining(System.lineSeparator()));\n             return createPublicKey(keyContents, keyID);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc0MTA5NA==", "url": "https://github.com/payara/Payara/pull/5009#discussion_r535741094", "bodyText": "You might set the Accept-Charset header before opening the connection thus asking for a Charset. Charset.availableCharsets(), https://tools.ietf.org/html/rfc2616#page-102", "author": "svendiedrichsen", "createdAt": "2020-12-04T00:15:14Z", "path": "appserver/payara-appserver-modules/microprofile/jwt-auth/src/main/java/fish/payara/microprofile/jwtauth/eesecurity/SignedJWTIdentityStore.java", "diffHunk": "@@ -214,8 +223,12 @@ public CredentialValidationResult validate(SignedJWTCredential signedJWTCredenti\n             return Optional.empty();\n         }\n \n-        try (InputStream inputStream = publicKeyURL.openStream();\n-             BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))){\n+        URLConnection urlConnection = publicKeyURL.openConnection();", "originalCommit": "9d0a249d3e0488950f7a520a3106cef2765a315e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM4NzgyOA==", "url": "https://github.com/payara/Payara/pull/5009#discussion_r536387828", "bodyText": "Not needed at the moment", "author": "fturizo", "createdAt": "2020-12-04T21:24:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc0MTA5NA=="}], "type": "inlineReview", "revised_code": {"commit": "bc0f924090f4f32a0943db0ed501331f9178dfce", "chunk": "diff --git a/appserver/payara-appserver-modules/microprofile/jwt-auth/src/main/java/fish/payara/microprofile/jwtauth/eesecurity/SignedJWTIdentityStore.java b/appserver/payara-appserver-modules/microprofile/jwt-auth/src/main/java/fish/payara/microprofile/jwtauth/eesecurity/SignedJWTIdentityStore.java\nindex a7378373f2..91ad84974b 100644\n--- a/appserver/payara-appserver-modules/microprofile/jwt-auth/src/main/java/fish/payara/microprofile/jwtauth/eesecurity/SignedJWTIdentityStore.java\n+++ b/appserver/payara-appserver-modules/microprofile/jwt-auth/src/main/java/fish/payara/microprofile/jwtauth/eesecurity/SignedJWTIdentityStore.java\n\n@@ -224,9 +219,16 @@ public class SignedJWTIdentityStore implements IdentityStore {\n         }\n \n         URLConnection urlConnection = publicKeyURL.openConnection();\n+        Charset charset = Charset.defaultCharset();\n         ContentType contentType = ContentType.newContentType(urlConnection.getContentType());\n-\n-        Charset charset = contentType.getCharacterEncoding() != null ? Charset.forName(contentType.getCharacterEncoding()) : Charset.defaultCharset();\n+        if(contentType != null) {\n+            String charEncoding = contentType.getCharacterEncoding();\n+            if(!Charset.isSupported(charEncoding)){\n+                LOGGER.severe(\"Charset \" + charEncoding + \" for remote public key not supported, using default charset instead\");\n+            }else {\n+                charset = contentType.getCharacterEncoding() != null ? Charset.forName(contentType.getCharacterEncoding()) : Charset.defaultCharset();\n+            }\n+        }\n         try (InputStream inputStream = urlConnection.getInputStream();\n              BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, charset))){\n             String keyContents = reader.lines().collect(Collectors.joining(System.lineSeparator()));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc0NzA3Nw==", "url": "https://github.com/payara/Payara/pull/5009#discussion_r535747077", "bodyText": "You might want to check if the charset from the contentType is supported besides if the contentType contains one. Otherwise you might get an UnsupportedCharsetException here. Charset.isSupported()", "author": "svendiedrichsen", "createdAt": "2020-12-04T00:30:28Z", "path": "appserver/payara-appserver-modules/microprofile/jwt-auth/src/main/java/fish/payara/microprofile/jwtauth/eesecurity/SignedJWTIdentityStore.java", "diffHunk": "@@ -214,8 +223,12 @@ public CredentialValidationResult validate(SignedJWTCredential signedJWTCredenti\n             return Optional.empty();\n         }\n \n-        try (InputStream inputStream = publicKeyURL.openStream();\n-             BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))){\n+        URLConnection urlConnection = publicKeyURL.openConnection();\n+        ContentType contentType = ContentType.newContentType(urlConnection.getContentType());\n+\n+        Charset charset = contentType.getCharacterEncoding() != null ? Charset.forName(contentType.getCharacterEncoding()) : Charset.defaultCharset();", "originalCommit": "9d0a249d3e0488950f7a520a3106cef2765a315e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM4ODA4OQ==", "url": "https://github.com/payara/Payara/pull/5009#discussion_r536388089", "bodyText": "Agreed", "author": "fturizo", "createdAt": "2020-12-04T21:24:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc0NzA3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "bc0f924090f4f32a0943db0ed501331f9178dfce", "chunk": "diff --git a/appserver/payara-appserver-modules/microprofile/jwt-auth/src/main/java/fish/payara/microprofile/jwtauth/eesecurity/SignedJWTIdentityStore.java b/appserver/payara-appserver-modules/microprofile/jwt-auth/src/main/java/fish/payara/microprofile/jwtauth/eesecurity/SignedJWTIdentityStore.java\nindex a7378373f2..91ad84974b 100644\n--- a/appserver/payara-appserver-modules/microprofile/jwt-auth/src/main/java/fish/payara/microprofile/jwtauth/eesecurity/SignedJWTIdentityStore.java\n+++ b/appserver/payara-appserver-modules/microprofile/jwt-auth/src/main/java/fish/payara/microprofile/jwtauth/eesecurity/SignedJWTIdentityStore.java\n\n@@ -224,9 +219,16 @@ public class SignedJWTIdentityStore implements IdentityStore {\n         }\n \n         URLConnection urlConnection = publicKeyURL.openConnection();\n+        Charset charset = Charset.defaultCharset();\n         ContentType contentType = ContentType.newContentType(urlConnection.getContentType());\n-\n-        Charset charset = contentType.getCharacterEncoding() != null ? Charset.forName(contentType.getCharacterEncoding()) : Charset.defaultCharset();\n+        if(contentType != null) {\n+            String charEncoding = contentType.getCharacterEncoding();\n+            if(!Charset.isSupported(charEncoding)){\n+                LOGGER.severe(\"Charset \" + charEncoding + \" for remote public key not supported, using default charset instead\");\n+            }else {\n+                charset = contentType.getCharacterEncoding() != null ? Charset.forName(contentType.getCharacterEncoding()) : Charset.defaultCharset();\n+            }\n+        }\n         try (InputStream inputStream = urlConnection.getInputStream();\n              BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, charset))){\n             String keyContents = reader.lines().collect(Collectors.joining(System.lineSeparator()));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc0Nzk5NA==", "url": "https://github.com/payara/Payara/pull/5009#discussion_r535747994", "bodyText": "ContentType may be NULL here.", "author": "svendiedrichsen", "createdAt": "2020-12-04T00:32:55Z", "path": "appserver/payara-appserver-modules/microprofile/jwt-auth/src/main/java/fish/payara/microprofile/jwtauth/eesecurity/SignedJWTIdentityStore.java", "diffHunk": "@@ -214,8 +223,12 @@ public CredentialValidationResult validate(SignedJWTCredential signedJWTCredenti\n             return Optional.empty();\n         }\n \n-        try (InputStream inputStream = publicKeyURL.openStream();\n-             BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))){\n+        URLConnection urlConnection = publicKeyURL.openConnection();\n+        ContentType contentType = ContentType.newContentType(urlConnection.getContentType());", "originalCommit": "9d0a249d3e0488950f7a520a3106cef2765a315e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM4Nzk1MQ==", "url": "https://github.com/payara/Payara/pull/5009#discussion_r536387951", "bodyText": "Agreed", "author": "fturizo", "createdAt": "2020-12-04T21:24:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc0Nzk5NA=="}], "type": "inlineReview", "revised_code": {"commit": "bc0f924090f4f32a0943db0ed501331f9178dfce", "chunk": "diff --git a/appserver/payara-appserver-modules/microprofile/jwt-auth/src/main/java/fish/payara/microprofile/jwtauth/eesecurity/SignedJWTIdentityStore.java b/appserver/payara-appserver-modules/microprofile/jwt-auth/src/main/java/fish/payara/microprofile/jwtauth/eesecurity/SignedJWTIdentityStore.java\nindex a7378373f2..91ad84974b 100644\n--- a/appserver/payara-appserver-modules/microprofile/jwt-auth/src/main/java/fish/payara/microprofile/jwtauth/eesecurity/SignedJWTIdentityStore.java\n+++ b/appserver/payara-appserver-modules/microprofile/jwt-auth/src/main/java/fish/payara/microprofile/jwtauth/eesecurity/SignedJWTIdentityStore.java\n\n@@ -224,9 +219,16 @@ public class SignedJWTIdentityStore implements IdentityStore {\n         }\n \n         URLConnection urlConnection = publicKeyURL.openConnection();\n+        Charset charset = Charset.defaultCharset();\n         ContentType contentType = ContentType.newContentType(urlConnection.getContentType());\n-\n-        Charset charset = contentType.getCharacterEncoding() != null ? Charset.forName(contentType.getCharacterEncoding()) : Charset.defaultCharset();\n+        if(contentType != null) {\n+            String charEncoding = contentType.getCharacterEncoding();\n+            if(!Charset.isSupported(charEncoding)){\n+                LOGGER.severe(\"Charset \" + charEncoding + \" for remote public key not supported, using default charset instead\");\n+            }else {\n+                charset = contentType.getCharacterEncoding() != null ? Charset.forName(contentType.getCharacterEncoding()) : Charset.defaultCharset();\n+            }\n+        }\n         try (InputStream inputStream = urlConnection.getInputStream();\n              BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, charset))){\n             String keyContents = reader.lines().collect(Collectors.joining(System.lineSeparator()));\n"}}, {"oid": "deaad8c982922a04933262668523d9615307d88b", "url": "https://github.com/payara/Payara/commit/deaad8c982922a04933262668523d9615307d88b", "message": "Fixed public key retrieval from remote URL", "committedDate": "2020-12-04T20:00:08Z", "type": "commit"}, {"oid": "deaad8c982922a04933262668523d9615307d88b", "url": "https://github.com/payara/Payara/commit/deaad8c982922a04933262668523d9615307d88b", "message": "Fixed public key retrieval from remote URL", "committedDate": "2020-12-04T20:00:08Z", "type": "forcePushed"}, {"oid": "bc0f924090f4f32a0943db0ed501331f9178dfce", "url": "https://github.com/payara/Payara/commit/bc0f924090f4f32a0943db0ed501331f9178dfce", "message": "Minor fixes to charset encoding usage", "committedDate": "2020-12-04T21:23:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA4MTUxOQ==", "url": "https://github.com/payara/Payara/pull/5009#discussion_r537081519", "bodyText": "Charset.isSupported() may throw exceptions if anything funny or NULL is provided. And if it is not supported it might rather be worth a warning than a severe message. Sorry for all the picky comments.", "author": "svendiedrichsen", "createdAt": "2020-12-06T17:06:19Z", "path": "appserver/payara-appserver-modules/microprofile/jwt-auth/src/main/java/fish/payara/microprofile/jwtauth/eesecurity/SignedJWTIdentityStore.java", "diffHunk": "@@ -217,10 +218,21 @@ public CredentialValidationResult validate(SignedJWTCredential signedJWTCredenti\n             return Optional.empty();\n         }\n \n-        byte[] byteBuffer = new byte[16384];\n-        try (InputStream inputStream = publicKeyURL.openStream()) {\n-            String key = new String(byteBuffer, 0, inputStream.read(byteBuffer));\n-            return createPublicKey(key, keyID);\n+        URLConnection urlConnection = publicKeyURL.openConnection();\n+        Charset charset = Charset.defaultCharset();\n+        ContentType contentType = ContentType.newContentType(urlConnection.getContentType());\n+        if(contentType != null) {\n+            String charEncoding = contentType.getCharacterEncoding();\n+            if(!Charset.isSupported(charEncoding)){\n+                LOGGER.severe(\"Charset \" + charEncoding + \" for remote public key not supported, using default charset instead\");", "originalCommit": "bc0f924090f4f32a0943db0ed501331f9178dfce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM2Nzk1Nw==", "url": "https://github.com/payara/Payara/pull/5009#discussion_r541367957", "bodyText": "Thanks for the suggestions", "author": "fturizo", "createdAt": "2020-12-11T22:31:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA4MTUxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "53712e2d65f4be49eaff7ea2b6d5a3ddaed06b54", "chunk": "diff --git a/appserver/payara-appserver-modules/microprofile/jwt-auth/src/main/java/fish/payara/microprofile/jwtauth/eesecurity/SignedJWTIdentityStore.java b/appserver/payara-appserver-modules/microprofile/jwt-auth/src/main/java/fish/payara/microprofile/jwtauth/eesecurity/SignedJWTIdentityStore.java\nindex 91ad84974b..00872c6030 100644\n--- a/appserver/payara-appserver-modules/microprofile/jwt-auth/src/main/java/fish/payara/microprofile/jwtauth/eesecurity/SignedJWTIdentityStore.java\n+++ b/appserver/payara-appserver-modules/microprofile/jwt-auth/src/main/java/fish/payara/microprofile/jwtauth/eesecurity/SignedJWTIdentityStore.java\n\n@@ -223,10 +224,16 @@ public class SignedJWTIdentityStore implements IdentityStore {\n         ContentType contentType = ContentType.newContentType(urlConnection.getContentType());\n         if(contentType != null) {\n             String charEncoding = contentType.getCharacterEncoding();\n-            if(!Charset.isSupported(charEncoding)){\n-                LOGGER.severe(\"Charset \" + charEncoding + \" for remote public key not supported, using default charset instead\");\n-            }else {\n-                charset = contentType.getCharacterEncoding() != null ? Charset.forName(contentType.getCharacterEncoding()) : Charset.defaultCharset();\n+            if(charEncoding != null) {\n+                try {\n+                    if (!Charset.isSupported(charEncoding)) {\n+                        LOGGER.warning(\"Charset \" + charEncoding + \" for remote public key not supported, using default charset instead\");\n+                    } else {\n+                        charset = Charset.forName(contentType.getCharacterEncoding());\n+                    }\n+                }catch (IllegalCharsetNameException ex){\n+                    LOGGER.severe(\"Charset \" + ex.getCharsetName() + \" for remote public key not support, Cause: \" + ex.getMessage());\n+                }\n             }\n         }\n         try (InputStream inputStream = urlConnection.getInputStream();\n"}}, {"oid": "53712e2d65f4be49eaff7ea2b6d5a3ddaed06b54", "url": "https://github.com/payara/Payara/commit/53712e2d65f4be49eaff7ea2b6d5a3ddaed06b54", "message": "Minor fixes to charset encoding usage", "committedDate": "2020-12-11T22:22:45Z", "type": "commit"}, {"oid": "dcbf36f1522637d6964224213e004855afe79c48", "url": "https://github.com/payara/Payara/commit/dcbf36f1522637d6964224213e004855afe79c48", "message": "Merge branch 'FISH-652_JWT_public_key_retrieval_jwks_fix' of https://github.com/fturizo/Payara into FISH-652_JWT_public_key_retrieval_jwks_fix\n\n\u0001 Conflicts:\n\u0001\tappserver/payara-appserver-modules/microprofile/jwt-auth/src/main/java/fish/payara/microprofile/jwtauth/eesecurity/SignedJWTIdentityStore.java", "committedDate": "2020-12-11T22:29:03Z", "type": "commit"}]}