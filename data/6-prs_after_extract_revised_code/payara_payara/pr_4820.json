{"pr_number": 4820, "pr_title": "FISH-244 FISH-53 Trace calls from EJB clients", "pr_createdAt": "2020-08-06T17:11:29Z", "pr_url": "https://github.com/payara/Payara/pull/4820", "timeline": [{"oid": "da0758e64e1e35e8df955dc609d1cb5a4a5f6e8e", "url": "https://github.com/payara/Payara/commit/da0758e64e1e35e8df955dc609d1cb5a4a5f6e8e", "message": "FISH-244 Add simple test case", "committedDate": "2020-08-06T11:53:33Z", "type": "commit"}, {"oid": "12f73589b90ab3f98cef6c0bc4a5d3fd4a60b4fc", "url": "https://github.com/payara/Payara/commit/12f73589b90ab3f98cef6c0bc4a5d3fd4a60b4fc", "message": "FISH-244 add client and server interceptors for propagating context", "committedDate": "2020-08-06T11:53:40Z", "type": "commit"}, {"oid": "18284302401fdf1d6302231927e184903b884985", "url": "https://github.com/payara/Payara/commit/18284302401fdf1d6302231927e184903b884985", "message": "FISH-244 Fix span being referenced twice", "committedDate": "2020-08-06T11:54:14Z", "type": "commit"}, {"oid": "e424b923072024a9d457f7004fbad7832d61d626", "url": "https://github.com/payara/Payara/commit/e424b923072024a9d457f7004fbad7832d61d626", "message": "FISH-244 Formatting and comments", "committedDate": "2020-08-06T11:54:20Z", "type": "commit"}, {"oid": "412f8f058e1bb7496e994bd320f097aee6e008c2", "url": "https://github.com/payara/Payara/commit/412f8f058e1bb7496e994bd320f097aee6e008c2", "message": "FISH-244 Clean up test", "committedDate": "2020-08-06T11:54:26Z", "type": "commit"}, {"oid": "e148c021274c084a693549ca504c2dbf147f97fc", "url": "https://github.com/payara/Payara/commit/e148c021274c084a693549ca504c2dbf147f97fc", "message": "FISH-244 Remove unused imports", "committedDate": "2020-08-06T12:15:07Z", "type": "commit"}, {"oid": "2d1d6413076dbfc414e9ec0f8e5c02c0b4c638f4", "url": "https://github.com/payara/Payara/commit/2d1d6413076dbfc414e9ec0f8e5c02c0b4c638f4", "message": "FISH-244 fix failures from OpenTracing TCK", "committedDate": "2020-08-06T17:01:35Z", "type": "commit"}, {"oid": "119ba6178c83eee4040a9b2047211a4f4ba9b2ec", "url": "https://github.com/payara/Payara/commit/119ba6178c83eee4040a9b2047211a4f4ba9b2ec", "message": "FISH-244 Don't arbitrarily udpate versions", "committedDate": "2020-08-07T08:06:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyNzk0Nw==", "url": "https://github.com/payara/Payara/pull/4820#discussion_r466927947", "bodyText": "Shouldn't out also be part of the try with resources block?", "author": "jbee", "createdAt": "2020-08-07T09:26:08Z", "path": "appserver/ejb/ejb-opentracing/src/main/java/fish/payara/ejb/opentracing/OpenTracingIiopClientInterceptor.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) 2020 Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.ejb.opentracing;\n+\n+import fish.payara.opentracing.OpenTracingService;\n+import io.opentracing.Span;\n+import io.opentracing.Tracer;\n+import io.opentracing.propagation.Format;\n+import io.opentracing.util.GlobalTracer;\n+import org.omg.CORBA.LocalObject;\n+import org.omg.IOP.ServiceContext;\n+import org.omg.PortableInterceptor.ClientRequestInfo;\n+import org.omg.PortableInterceptor.ClientRequestInterceptor;\n+import org.omg.PortableInterceptor.ForwardRequest;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectOutputStream;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import static fish.payara.ejb.opentracing.OpenTracingIiopInterceptorFactory.OPENTRACING_IIOP_ID;\n+import static fish.payara.opentracing.OpenTracingService.PAYARA_CORBA_RMI_TRACER_NAME;\n+\n+/**\n+ * IIOP Client Interceptor for propagating OpenTracing SpanContext to Payara Server.\n+ *\n+ * @author Andrew Pielage <andrew.pielage@payara.fish>\n+ */\n+public class OpenTracingIiopClientInterceptor extends LocalObject implements ClientRequestInterceptor {\n+\n+    private OpenTracingService openTracingService;\n+\n+    public OpenTracingIiopClientInterceptor(OpenTracingService openTracingService) {\n+        this.openTracingService = openTracingService;\n+    }\n+\n+    @Override\n+    public void send_request(ClientRequestInfo clientRequestInfo) throws ForwardRequest {\n+        if (openTracingService == null) {\n+            return;\n+        }\n+        // Register global tracer if it hasn't been already\n+        Tracer tracer = GlobalTracer.get();\n+        if (!GlobalTracer.isRegistered()) {\n+            Tracer tracerImpl = openTracingService.getTracer(PAYARA_CORBA_RMI_TRACER_NAME);\n+            if (tracerImpl == null) {\n+                return;\n+            } else {\n+                GlobalTracer.register(tracerImpl);\n+            }\n+        }\n+\n+        // Check if there's an active span\n+        Span activeSpan = tracer.activeSpan();\n+        if (activeSpan == null) {\n+            // Nothing to propagate, so simply return\n+            return;\n+        }\n+\n+        // Inject active span context for propagation\n+        OpenTracingIiopTextMap textMap = new OpenTracingIiopTextMap();\n+        tracer.inject(activeSpan.context(), Format.Builtin.TEXT_MAP, textMap);\n+\n+        // Convert text map to bytes and attach to service context\n+        try (ByteArrayOutputStream bos = new ByteArrayOutputStream()) {\n+            ObjectOutputStream out = new ObjectOutputStream(bos);", "originalCommit": "119ba6178c83eee4040a9b2047211a4f4ba9b2ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2308eee780dd5f1f8ced6481590b44ed49cc322a", "chunk": "diff --git a/appserver/ejb/ejb-opentracing/src/main/java/fish/payara/ejb/opentracing/OpenTracingIiopClientInterceptor.java b/appserver/ejb/ejb-opentracing/src/main/java/fish/payara/ejb/opentracing/OpenTracingIiopClientInterceptor.java\nindex fd6307ed56..8a2a7f3a2e 100644\n--- a/appserver/ejb/ejb-opentracing/src/main/java/fish/payara/ejb/opentracing/OpenTracingIiopClientInterceptor.java\n+++ b/appserver/ejb/ejb-opentracing/src/main/java/fish/payara/ejb/opentracing/OpenTracingIiopClientInterceptor.java\n\n@@ -67,24 +67,24 @@ import static fish.payara.opentracing.OpenTracingService.PAYARA_CORBA_RMI_TRACER\n public class OpenTracingIiopClientInterceptor extends LocalObject implements ClientRequestInterceptor {\n \n     private OpenTracingService openTracingService;\n+    private Tracer tracer;\n \n     public OpenTracingIiopClientInterceptor(OpenTracingService openTracingService) {\n         this.openTracingService = openTracingService;\n+        // Register global tracer if it hasn't been already\n+        this.tracer = GlobalTracer.get();\n+        if (!GlobalTracer.isRegistered()) {\n+            registerTracer();\n+        }\n     }\n \n     @Override\n     public void send_request(ClientRequestInfo clientRequestInfo) throws ForwardRequest {\n-        if (openTracingService == null) {\n-            return;\n-        }\n-        // Register global tracer if it hasn't been already\n-        Tracer tracer = GlobalTracer.get();\n+        // Double check we have a tracer and try and get one again if we don't\n         if (!GlobalTracer.isRegistered()) {\n-            Tracer tracerImpl = openTracingService.getTracer(PAYARA_CORBA_RMI_TRACER_NAME);\n-            if (tracerImpl == null) {\n+            registerTracer();\n+            if (!GlobalTracer.isRegistered()) {\n                 return;\n-            } else {\n-                GlobalTracer.register(tracerImpl);\n             }\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyOTMyNA==", "url": "https://github.com/payara/Payara/pull/4820#discussion_r466929324", "bodyText": "This and the above method basically do the same just for different types. Could be extracted.", "author": "jbee", "createdAt": "2020-08-07T09:28:54Z", "path": "appserver/ejb/ejb-opentracing/src/main/java/fish/payara/ejb/opentracing/OpenTracingIiopInterceptorFactory.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) 2020 Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.ejb.opentracing;\n+\n+import fish.payara.opentracing.OpenTracingService;\n+import org.glassfish.enterprise.iiop.api.IIOPInterceptorFactory;\n+import org.glassfish.hk2.api.ServiceLocator;\n+import org.glassfish.internal.api.Globals;\n+import org.jvnet.hk2.annotations.Service;\n+import org.omg.IOP.Codec;\n+import org.omg.PortableInterceptor.ClientRequestInterceptor;\n+import org.omg.PortableInterceptor.ORBInitInfo;\n+import org.omg.PortableInterceptor.ServerRequestInterceptor;\n+\n+import javax.inject.Singleton;\n+\n+/**\n+ * Factory for creating IIOP client and server interceptors that propagate OpenTracing SpanContext.\n+ *\n+ * @author Andrew Pielage <andrew.pielage@payara.fish>\n+ */\n+@Service(name = \"OpenTracingIiopInterceptorFactory\")\n+@Singleton\n+public class OpenTracingIiopInterceptorFactory implements IIOPInterceptorFactory {\n+\n+    public static final int OPENTRACING_IIOP_ID = 3226428;\n+    public static final long OPENTRACING_IIOP_SERIAL_VERSION_UID = 20200731171822L;\n+\n+\n+    private ClientRequestInterceptor clientRequestInterceptor;\n+    private ServerRequestInterceptor serverRequestInterceptor;\n+\n+    @Override\n+    public ClientRequestInterceptor createClientRequestInterceptor(ORBInitInfo info, Codec codec) {\n+        ServiceLocator staticBaseServiceLocator = Globals.getStaticBaseServiceLocator();\n+        if (clientRequestInterceptor == null) {\n+            OpenTracingService openTracingService = staticBaseServiceLocator.getService(OpenTracingService.class);\n+\n+            if (openTracingService != null) {\n+                clientRequestInterceptor = new OpenTracingIiopClientInterceptor(openTracingService);\n+            }\n+        }\n+\n+        return clientRequestInterceptor;\n+    }\n+\n+    @Override\n+    public ServerRequestInterceptor createServerRequestInterceptor(ORBInitInfo info, Codec codec) {", "originalCommit": "119ba6178c83eee4040a9b2047211a4f4ba9b2ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2308eee780dd5f1f8ced6481590b44ed49cc322a", "chunk": "diff --git a/appserver/ejb/ejb-opentracing/src/main/java/fish/payara/ejb/opentracing/OpenTracingIiopInterceptorFactory.java b/appserver/ejb/ejb-opentracing/src/main/java/fish/payara/ejb/opentracing/OpenTracingIiopInterceptorFactory.java\nindex d155ac9ce9..066e7d8fa1 100644\n--- a/appserver/ejb/ejb-opentracing/src/main/java/fish/payara/ejb/opentracing/OpenTracingIiopInterceptorFactory.java\n+++ b/appserver/ejb/ejb-opentracing/src/main/java/fish/payara/ejb/opentracing/OpenTracingIiopInterceptorFactory.java\n\n@@ -67,13 +67,13 @@ public class OpenTracingIiopInterceptorFactory implements IIOPInterceptorFactory\n     private ClientRequestInterceptor clientRequestInterceptor;\n     private ServerRequestInterceptor serverRequestInterceptor;\n \n+    private OpenTracingService openTracingService;\n+    private ServiceLocator serviceLocator;\n+\n     @Override\n     public ClientRequestInterceptor createClientRequestInterceptor(ORBInitInfo info, Codec codec) {\n-        ServiceLocator staticBaseServiceLocator = Globals.getStaticBaseServiceLocator();\n         if (clientRequestInterceptor == null) {\n-            OpenTracingService openTracingService = staticBaseServiceLocator.getService(OpenTracingService.class);\n-\n-            if (openTracingService != null) {\n+            if (attemptCreation()) {\n                 clientRequestInterceptor = new OpenTracingIiopClientInterceptor(openTracingService);\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzMDM3OA==", "url": "https://github.com/payara/Payara/pull/4820#discussion_r466930378", "bodyText": "Is there a reason to not do this in the constructor?", "author": "jbee", "createdAt": "2020-08-07T09:30:46Z", "path": "appserver/ejb/ejb-opentracing/src/main/java/fish/payara/ejb/opentracing/OpenTracingIiopServerInterceptor.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) 2020 Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.ejb.opentracing;\n+\n+import fish.payara.opentracing.OpenTracingService;\n+import io.opentracing.Scope;\n+import io.opentracing.SpanContext;\n+import io.opentracing.Tracer;\n+import io.opentracing.propagation.Format;\n+import io.opentracing.tag.Tags;\n+import org.omg.CORBA.LocalObject;\n+import org.omg.IOP.ServiceContext;\n+import org.omg.PortableInterceptor.ForwardRequest;\n+import org.omg.PortableInterceptor.ServerRequestInfo;\n+import org.omg.PortableInterceptor.ServerRequestInterceptor;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInput;\n+\n+import static fish.payara.ejb.opentracing.OpenTracingIiopInterceptorFactory.OPENTRACING_IIOP_ID;\n+import static fish.payara.opentracing.OpenTracingService.PAYARA_CORBA_RMI_TRACER_NAME;\n+\n+/**\n+ * IIOP Server Interceptor for propagating OpenTracing SpanContext to Payara Server.\n+ *\n+ * @author Andrew Pielage <andrew.pielage@payara.fish>\n+ */\n+public class OpenTracingIiopServerInterceptor extends LocalObject implements ServerRequestInterceptor {\n+\n+    private OpenTracingService openTracingService;\n+\n+    public OpenTracingIiopServerInterceptor(OpenTracingService openTracingService) {\n+        this.openTracingService = openTracingService;\n+    }\n+\n+    @Override\n+    public void receive_request_service_contexts(ServerRequestInfo ri) throws ForwardRequest {\n+\n+    }\n+\n+    @Override\n+    public void receive_request(ServerRequestInfo serverRequestInfo) throws ForwardRequest {\n+        if (openTracingService == null) {\n+            return;\n+        }\n+\n+        Tracer tracer = openTracingService.getTracer(PAYARA_CORBA_RMI_TRACER_NAME);", "originalCommit": "119ba6178c83eee4040a9b2047211a4f4ba9b2ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2308eee780dd5f1f8ced6481590b44ed49cc322a", "chunk": "diff --git a/appserver/ejb/ejb-opentracing/src/main/java/fish/payara/ejb/opentracing/OpenTracingIiopServerInterceptor.java b/appserver/ejb/ejb-opentracing/src/main/java/fish/payara/ejb/opentracing/OpenTracingIiopServerInterceptor.java\nindex 204a9a51f8..510c61715c 100644\n--- a/appserver/ejb/ejb-opentracing/src/main/java/fish/payara/ejb/opentracing/OpenTracingIiopServerInterceptor.java\n+++ b/appserver/ejb/ejb-opentracing/src/main/java/fish/payara/ejb/opentracing/OpenTracingIiopServerInterceptor.java\n\n@@ -66,24 +66,30 @@ import static fish.payara.opentracing.OpenTracingService.PAYARA_CORBA_RMI_TRACER\n public class OpenTracingIiopServerInterceptor extends LocalObject implements ServerRequestInterceptor {\n \n     private OpenTracingService openTracingService;\n+    private Tracer tracer;\n \n     public OpenTracingIiopServerInterceptor(OpenTracingService openTracingService) {\n         this.openTracingService = openTracingService;\n+\n+        if (openTracingService == null) {\n+            return;\n+        }\n+        this.tracer = openTracingService.getTracer(PAYARA_CORBA_RMI_TRACER_NAME);\n+        if (tracer == null) {\n+            return;\n+        }\n     }\n \n     @Override\n     public void receive_request_service_contexts(ServerRequestInfo ri) throws ForwardRequest {\n-\n+        // Noop\n+        return;\n     }\n \n     @Override\n     public void receive_request(ServerRequestInfo serverRequestInfo) throws ForwardRequest {\n-        if (openTracingService == null) {\n-            return;\n-        }\n-\n-        Tracer tracer = openTracingService.getTracer(PAYARA_CORBA_RMI_TRACER_NAME);\n-        if (tracer == null) {\n+        // Double check we have a tracer\n+        if (!tracerAvailable()) {\n             return;\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzMTMwNA==", "url": "https://github.com/payara/Payara/pull/4820#discussion_r466931304", "bodyText": "nothing happens with activeScope, seems wrong...", "author": "jbee", "createdAt": "2020-08-07T09:32:43Z", "path": "appserver/ejb/ejb-opentracing/src/main/java/fish/payara/ejb/opentracing/OpenTracingIiopServerInterceptor.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) 2020 Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.ejb.opentracing;\n+\n+import fish.payara.opentracing.OpenTracingService;\n+import io.opentracing.Scope;\n+import io.opentracing.SpanContext;\n+import io.opentracing.Tracer;\n+import io.opentracing.propagation.Format;\n+import io.opentracing.tag.Tags;\n+import org.omg.CORBA.LocalObject;\n+import org.omg.IOP.ServiceContext;\n+import org.omg.PortableInterceptor.ForwardRequest;\n+import org.omg.PortableInterceptor.ServerRequestInfo;\n+import org.omg.PortableInterceptor.ServerRequestInterceptor;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInput;\n+\n+import static fish.payara.ejb.opentracing.OpenTracingIiopInterceptorFactory.OPENTRACING_IIOP_ID;\n+import static fish.payara.opentracing.OpenTracingService.PAYARA_CORBA_RMI_TRACER_NAME;\n+\n+/**\n+ * IIOP Server Interceptor for propagating OpenTracing SpanContext to Payara Server.\n+ *\n+ * @author Andrew Pielage <andrew.pielage@payara.fish>\n+ */\n+public class OpenTracingIiopServerInterceptor extends LocalObject implements ServerRequestInterceptor {\n+\n+    private OpenTracingService openTracingService;\n+\n+    public OpenTracingIiopServerInterceptor(OpenTracingService openTracingService) {\n+        this.openTracingService = openTracingService;\n+    }\n+\n+    @Override\n+    public void receive_request_service_contexts(ServerRequestInfo ri) throws ForwardRequest {\n+\n+    }\n+\n+    @Override\n+    public void receive_request(ServerRequestInfo serverRequestInfo) throws ForwardRequest {\n+        if (openTracingService == null) {\n+            return;\n+        }\n+\n+        Tracer tracer = openTracingService.getTracer(PAYARA_CORBA_RMI_TRACER_NAME);\n+        if (tracer == null) {\n+            return;\n+        }\n+\n+        ServiceContext serviceContext = serverRequestInfo.get_request_service_context(OPENTRACING_IIOP_ID);\n+        if (serviceContext == null) {\n+            return;\n+        }\n+\n+        ByteArrayInputStream bis = new ByteArrayInputStream(serviceContext.context_data);\n+        OpenTracingIiopTextMap openTracingIiopTextMap = null;\n+        try (ObjectInput in = new OpenTracingIiopObjectInputStream(bis)) {\n+            openTracingIiopTextMap = (OpenTracingIiopTextMap) in.readObject();\n+        } catch (IOException | ClassNotFoundException exception) {\n+            throw new ForwardRequest(exception.getMessage(), serverRequestInfo);\n+        }\n+\n+        Tracer.SpanBuilder spanBuilder = tracer.buildSpan(\"rmi\")\n+                .withTag(Tags.COMPONENT.getKey(), \"ejb\");\n+\n+        if (openTracingIiopTextMap != null) {\n+            SpanContext spanContext = tracer.extract(Format.Builtin.TEXT_MAP, openTracingIiopTextMap);\n+\n+            // Add the propagated span as a parent\n+            spanBuilder.asChildOf(spanContext);\n+        }\n+\n+        // Start the span and mark it as active\n+        spanBuilder.startActive(true).span();\n+    }\n+\n+    @Override\n+    public void send_reply(ServerRequestInfo serverRequestInfo) {\n+        closeScope();\n+    }\n+\n+    @Override\n+    public void send_exception(ServerRequestInfo serverRequestInfo) throws ForwardRequest {\n+        closeScope();\n+    }\n+\n+    @Override\n+    public void send_other(ServerRequestInfo serverRequestInfo) throws ForwardRequest {\n+        closeScope();\n+    }\n+\n+    private void closeScope() {\n+        if (openTracingService == null) {\n+            return;\n+        }\n+        Tracer tracer = openTracingService.getTracer(PAYARA_CORBA_RMI_TRACER_NAME);\n+        if (tracer == null) {\n+            return;\n+        }\n+\n+        // Make sure active scope is closed - this is an entry point to the server so the currently active span\n+        // **should** be the one started in receive_request\n+        try (Scope activeScope = tracer.scopeManager().active()) {", "originalCommit": "119ba6178c83eee4040a9b2047211a4f4ba9b2ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk0MDY3NA==", "url": "https://github.com/payara/Payara/pull/4820#discussion_r466940674", "bodyText": "It closes it (and the span it references too), scope is Closeable.", "author": "Pandrex247", "createdAt": "2020-08-07T09:52:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzMTMwNA=="}], "type": "inlineReview", "revised_code": {"commit": "2308eee780dd5f1f8ced6481590b44ed49cc322a", "chunk": "diff --git a/appserver/ejb/ejb-opentracing/src/main/java/fish/payara/ejb/opentracing/OpenTracingIiopServerInterceptor.java b/appserver/ejb/ejb-opentracing/src/main/java/fish/payara/ejb/opentracing/OpenTracingIiopServerInterceptor.java\nindex 204a9a51f8..510c61715c 100644\n--- a/appserver/ejb/ejb-opentracing/src/main/java/fish/payara/ejb/opentracing/OpenTracingIiopServerInterceptor.java\n+++ b/appserver/ejb/ejb-opentracing/src/main/java/fish/payara/ejb/opentracing/OpenTracingIiopServerInterceptor.java\n\n@@ -66,24 +66,30 @@ import static fish.payara.opentracing.OpenTracingService.PAYARA_CORBA_RMI_TRACER\n public class OpenTracingIiopServerInterceptor extends LocalObject implements ServerRequestInterceptor {\n \n     private OpenTracingService openTracingService;\n+    private Tracer tracer;\n \n     public OpenTracingIiopServerInterceptor(OpenTracingService openTracingService) {\n         this.openTracingService = openTracingService;\n+\n+        if (openTracingService == null) {\n+            return;\n+        }\n+        this.tracer = openTracingService.getTracer(PAYARA_CORBA_RMI_TRACER_NAME);\n+        if (tracer == null) {\n+            return;\n+        }\n     }\n \n     @Override\n     public void receive_request_service_contexts(ServerRequestInfo ri) throws ForwardRequest {\n-\n+        // Noop\n+        return;\n     }\n \n     @Override\n     public void receive_request(ServerRequestInfo serverRequestInfo) throws ForwardRequest {\n-        if (openTracingService == null) {\n-            return;\n-        }\n-\n-        Tracer tracer = openTracingService.getTracer(PAYARA_CORBA_RMI_TRACER_NAME);\n-        if (tracer == null) {\n+        // Double check we have a tracer\n+        if (!tracerAvailable()) {\n             return;\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzMzA2OA==", "url": "https://github.com/payara/Payara/pull/4820#discussion_r466933068", "bodyText": "Some duplication going on...", "author": "jbee", "createdAt": "2020-08-07T09:36:24Z", "path": "appserver/tests/payara-samples/samples/remote-ejb-tracing/remote-ejb-tracing-client/src/test/java/fish/payara/samples/remote/ejb/tracing/RemoteEjbClientIT.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) 2020 Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.samples.remote.ejb.tracing;\n+\n+import io.opentracing.Scope;\n+import io.opentracing.Span;\n+import io.opentracing.Tracer;\n+import io.opentracing.util.GlobalTracer;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import javax.naming.Context;\n+import javax.naming.InitialContext;\n+import javax.naming.NamingException;\n+import java.util.Properties;\n+\n+public class RemoteEjbClientIT {\n+\n+    @Test\n+    public void executeRemoteEjbMethodIT() {\n+        Properties contextProperties = new Properties();\n+        contextProperties.setProperty(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.enterprise.naming.SerialInitContextFactory\");\n+        contextProperties.setProperty(\"org.omg.CORBA.ORBInitialHost\", \"localhost\");\n+        contextProperties.setProperty(\"org.omg.CORBA.ORBInitialPort\", \"3700\");\n+\n+        try {\n+            Context context = new InitialContext(contextProperties);\n+            EjbRemote ejb = (EjbRemote) context.lookup(\"java:global/remote-ejb-tracing-server/Ejb\");\n+\n+            Tracer tracer = GlobalTracer.get();\n+\n+            try (Scope scope = tracer.buildSpan(\"ExecuteEjb\").startActive(true)) {\n+                Span span = scope.span();\n+                span.setBaggageItem(\"Wibbles\", \"Wobbles\");\n+                String baggageItems = ejb.annotatedMethod();\n+                Assert.assertTrue(\"Baggage items didn't match, received: \" + baggageItems,\n+                        baggageItems.equals(\"\\nWibbles : Wobbles\\n\"));\n+\n+                span.setBaggageItem(\"Nibbles\", \"Nobbles\");\n+                baggageItems = ejb.nonAnnotatedMethod();\n+                Assert.assertTrue(\"Baggage items didn't match, received: \" + baggageItems,\n+                        baggageItems.contains(\"Wibbles : Wobbles\"));\n+                Assert.assertTrue(\"Baggage items didn't match, received: \" + baggageItems,\n+                        baggageItems.contains(\"Nibbles : Nobbles\"));\n+\n+                span.setBaggageItem(\"Bibbles\", \"Bobbles\");\n+                baggageItems = ejb.shouldNotBeTraced();\n+                Assert.assertTrue(\"Baggage items didn't match, received: \" + baggageItems,\n+                        baggageItems.contains(\"Wibbles : Wobbles\"));\n+                Assert.assertTrue(\"Baggage items didn't match, received: \" + baggageItems,\n+                        baggageItems.contains(\"Nibbles : Nobbles\"));\n+                Assert.assertTrue(\"Baggage items didn't match, received: \" + baggageItems,\n+                        baggageItems.contains(\"Bibbles : Bobbles\"));\n+\n+                baggageItems = ejb.editBaggageItems();\n+                Assert.assertTrue(\"Baggage items didn't match, received: \" + baggageItems,\n+                        baggageItems.contains(\"Wibbles : Wabbles\"));\n+                Assert.assertTrue(\"Baggage items didn't match, received: \" + baggageItems,\n+                        baggageItems.contains(\"Nibbles : Nabbles\"));\n+                Assert.assertTrue(\"Baggage items didn't match, received: \" + baggageItems,", "originalCommit": "119ba6178c83eee4040a9b2047211a4f4ba9b2ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzExMTExOA==", "url": "https://github.com/payara/Payara/pull/4820#discussion_r467111118", "bodyText": "Better use MatcherAssert.assertThat(\"Baggage items \" + baggageItems, baggageItems, hasItems(....));", "author": "dmatej", "createdAt": "2020-08-07T15:27:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzMzA2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzExMTQ2MQ==", "url": "https://github.com/payara/Payara/pull/4820#discussion_r467111461", "bodyText": "And traditional convention in tests: use static imports for all assert* methods.", "author": "dmatej", "createdAt": "2020-08-07T15:28:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzMzA2OA=="}], "type": "inlineReview", "revised_code": {"commit": "2308eee780dd5f1f8ced6481590b44ed49cc322a", "chunk": "diff --git a/appserver/tests/payara-samples/samples/remote-ejb-tracing/remote-ejb-tracing-client/src/test/java/fish/payara/samples/remote/ejb/tracing/RemoteEjbClientIT.java b/appserver/tests/payara-samples/samples/remote-ejb-tracing/remote-ejb-tracing-client/src/test/java/fish/payara/samples/remote/ejb/tracing/RemoteEjbClientIT.java\nindex 30fc31168a..fcbd4710f5 100644\n--- a/appserver/tests/payara-samples/samples/remote-ejb-tracing/remote-ejb-tracing-client/src/test/java/fish/payara/samples/remote/ejb/tracing/RemoteEjbClientIT.java\n+++ b/appserver/tests/payara-samples/samples/remote-ejb-tracing/remote-ejb-tracing-client/src/test/java/fish/payara/samples/remote/ejb/tracing/RemoteEjbClientIT.java\n\n@@ -51,6 +51,11 @@ import javax.naming.InitialContext;\n import javax.naming.NamingException;\n import java.util.Properties;\n \n+/**\n+ * Test that verifies the automatic propagation of baggage items across process boundaries when using Remote EJBs.\n+ *\n+ * @author Andrew Pielage <andrew.pielage@payara.fish>\n+ */\n public class RemoteEjbClientIT {\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzMzY3Mg==", "url": "https://github.com/payara/Payara/pull/4820#discussion_r466933672", "bodyText": "A word on what the test verifies would be nice.", "author": "jbee", "createdAt": "2020-08-07T09:37:40Z", "path": "appserver/tests/payara-samples/samples/remote-ejb-tracing/remote-ejb-tracing-client/src/test/java/fish/payara/samples/remote/ejb/tracing/RemoteEjbClientIT.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) 2020 Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.samples.remote.ejb.tracing;\n+\n+import io.opentracing.Scope;\n+import io.opentracing.Span;\n+import io.opentracing.Tracer;\n+import io.opentracing.util.GlobalTracer;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import javax.naming.Context;\n+import javax.naming.InitialContext;\n+import javax.naming.NamingException;\n+import java.util.Properties;\n+\n+public class RemoteEjbClientIT {", "originalCommit": "119ba6178c83eee4040a9b2047211a4f4ba9b2ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2308eee780dd5f1f8ced6481590b44ed49cc322a", "chunk": "diff --git a/appserver/tests/payara-samples/samples/remote-ejb-tracing/remote-ejb-tracing-client/src/test/java/fish/payara/samples/remote/ejb/tracing/RemoteEjbClientIT.java b/appserver/tests/payara-samples/samples/remote-ejb-tracing/remote-ejb-tracing-client/src/test/java/fish/payara/samples/remote/ejb/tracing/RemoteEjbClientIT.java\nindex 30fc31168a..fcbd4710f5 100644\n--- a/appserver/tests/payara-samples/samples/remote-ejb-tracing/remote-ejb-tracing-client/src/test/java/fish/payara/samples/remote/ejb/tracing/RemoteEjbClientIT.java\n+++ b/appserver/tests/payara-samples/samples/remote-ejb-tracing/remote-ejb-tracing-client/src/test/java/fish/payara/samples/remote/ejb/tracing/RemoteEjbClientIT.java\n\n@@ -51,6 +51,11 @@ import javax.naming.InitialContext;\n import javax.naming.NamingException;\n import java.util.Properties;\n \n+/**\n+ * Test that verifies the automatic propagation of baggage items across process boundaries when using Remote EJBs.\n+ *\n+ * @author Andrew Pielage <andrew.pielage@payara.fish>\n+ */\n public class RemoteEjbClientIT {\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzNTg2OQ==", "url": "https://github.com/payara/Payara/pull/4820#discussion_r466935869", "bodyText": "I wonder what it means where we fail here.\nI assume the correct behaviour of this service kind of depends upon receiving the events.\nIsn't logging a warning good manners?", "author": "jbee", "createdAt": "2020-08-07T09:42:08Z", "path": "nucleus/payara-modules/opentracing-adapter/src/main/java/fish/payara/opentracing/OpenTracingService.java", "diffHunk": "@@ -76,10 +78,17 @@\n     // The tracer instances\n     private static final Map<String, Tracer> tracers = new ConcurrentHashMap<>();\n     \n+    // The name of the Corba RMI Tracer\n+    public static final String PAYARA_CORBA_RMI_TRACER_NAME = \"__PAYARA_CORBA_RMI\";\n+\n     @PostConstruct\n     void postConstruct() {\n         // Listen for events\n-        Globals.getDefaultBaseServiceLocator().getService(Events.class).register(this);\n+        Events events = getFromServiceHandle(Globals.getDefaultBaseServiceLocator(), Events.class);\n+\n+        if (events != null) {\n+            events.register(this);\n+        }", "originalCommit": "119ba6178c83eee4040a9b2047211a4f4ba9b2ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk1ODE3NA==", "url": "https://github.com/payara/Payara/pull/4820#discussion_r466958174", "bodyText": "If events aren't present it means it won't be listening to the internal event bus.\nIt's only used in the next method, listening for when an application is unloaded so as to remove the tracer for that particular application.\nI can add a warning though instead of just carrying on", "author": "Pandrex247", "createdAt": "2020-08-07T10:30:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzNTg2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk2MTQ4Nw==", "url": "https://github.com/payara/Payara/pull/4820#discussion_r466961487", "bodyText": "If missing the event is no biggie no warning is needed IMHO.", "author": "jbee", "createdAt": "2020-08-07T10:38:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzNTg2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "2308eee780dd5f1f8ced6481590b44ed49cc322a", "chunk": "diff --git a/nucleus/payara-modules/opentracing-adapter/src/main/java/fish/payara/opentracing/OpenTracingService.java b/nucleus/payara-modules/opentracing-adapter/src/main/java/fish/payara/opentracing/OpenTracingService.java\nindex a9421e269e..f5ec1cb364 100644\n--- a/nucleus/payara-modules/opentracing-adapter/src/main/java/fish/payara/opentracing/OpenTracingService.java\n+++ b/nucleus/payara-modules/opentracing-adapter/src/main/java/fish/payara/opentracing/OpenTracingService.java\n\n@@ -81,6 +81,8 @@ public class OpenTracingService implements EventListener {\n     // The name of the Corba RMI Tracer\n     public static final String PAYARA_CORBA_RMI_TRACER_NAME = \"__PAYARA_CORBA_RMI\";\n \n+    private static final Logger logger = Logger.getLogger(OpenTracingService.class.getName());\n+\n     @PostConstruct\n     void postConstruct() {\n         // Listen for events\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzNjMxOQ==", "url": "https://github.com/payara/Payara/pull/4820#discussion_r466936319", "bodyText": "Is there a reason to not have these injected and kept in a field?", "author": "jbee", "createdAt": "2020-08-07T09:43:09Z", "path": "nucleus/payara-modules/opentracing-adapter/src/main/java/fish/payara/opentracing/OpenTracingService.java", "diffHunk": "@@ -131,11 +146,17 @@ public synchronized Tracer getTracer(String applicationName) {\n \n     /**\n      * Pass-through method that checks if Request Tracing is enabled.\n-     * \n+     *\n      * @return True if the Request Tracing Service is enabled\n      */\n     public boolean isEnabled() {\n-        return Globals.getDefaultBaseServiceLocator().getService(RequestTracingService.class).isRequestTracingEnabled();\n+        RequestTracingService requestTracingService = getFromServiceHandle(Globals.getDefaultBaseServiceLocator(),", "originalCommit": "119ba6178c83eee4040a9b2047211a4f4ba9b2ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk1ODM5OQ==", "url": "https://github.com/payara/Payara/pull/4820#discussion_r466958399", "bodyText": "Same reason as given above.\nInjection attempts to start the service, something not necessarily desired when running on a Java SE client.\nParticularly important for this service since it starts at run level 10, whereas starting via injection is typically run level -2. While I could make it non-validating, request tracing has quite a big chain of other services it injects which I'd also have to make non-validating.\nSimply checking if the service is actually running before checking if it's enabled seems cleaner.", "author": "Pandrex247", "createdAt": "2020-08-07T10:31:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzNjMxOQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzNjM4Nw==", "url": "https://github.com/payara/Payara/pull/4820#discussion_r466936387", "bodyText": "Is there a reason to not have these injected and kept in a field?", "author": "jbee", "createdAt": "2020-08-07T09:43:17Z", "path": "nucleus/payara-modules/opentracing-adapter/src/main/java/fish/payara/opentracing/OpenTracingService.java", "diffHunk": "@@ -76,10 +78,17 @@\n     // The tracer instances\n     private static final Map<String, Tracer> tracers = new ConcurrentHashMap<>();\n     \n+    // The name of the Corba RMI Tracer\n+    public static final String PAYARA_CORBA_RMI_TRACER_NAME = \"__PAYARA_CORBA_RMI\";\n+\n     @PostConstruct\n     void postConstruct() {\n         // Listen for events\n-        Globals.getDefaultBaseServiceLocator().getService(Events.class).register(this);\n+        Events events = getFromServiceHandle(Globals.getDefaultBaseServiceLocator(), Events.class);", "originalCommit": "119ba6178c83eee4040a9b2047211a4f4ba9b2ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk1NjM1MA==", "url": "https://github.com/payara/Payara/pull/4820#discussion_r466956350", "bodyText": "Injection attempts to start the service, something not necessarily desired when running on a Java SE client.", "author": "Pandrex247", "createdAt": "2020-08-07T10:26:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzNjM4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "2308eee780dd5f1f8ced6481590b44ed49cc322a", "chunk": "diff --git a/nucleus/payara-modules/opentracing-adapter/src/main/java/fish/payara/opentracing/OpenTracingService.java b/nucleus/payara-modules/opentracing-adapter/src/main/java/fish/payara/opentracing/OpenTracingService.java\nindex a9421e269e..f5ec1cb364 100644\n--- a/nucleus/payara-modules/opentracing-adapter/src/main/java/fish/payara/opentracing/OpenTracingService.java\n+++ b/nucleus/payara-modules/opentracing-adapter/src/main/java/fish/payara/opentracing/OpenTracingService.java\n\n@@ -81,6 +81,8 @@ public class OpenTracingService implements EventListener {\n     // The name of the Corba RMI Tracer\n     public static final String PAYARA_CORBA_RMI_TRACER_NAME = \"__PAYARA_CORBA_RMI\";\n \n+    private static final Logger logger = Logger.getLogger(OpenTracingService.class.getName());\n+\n     @PostConstruct\n     void postConstruct() {\n         // Listen for events\n"}}, {"oid": "2308eee780dd5f1f8ced6481590b44ed49cc322a", "url": "https://github.com/payara/Payara/commit/2308eee780dd5f1f8ced6481590b44ed49cc322a", "message": "FISH-244 Review comments\nAdds a warning if events aren't present, reduces some duplication in iiop factory, get tracer upon iiop interceptor initialisation, and move into request tracing package", "committedDate": "2020-08-07T11:57:53Z", "type": "commit"}, {"oid": "d8d8a62d7aaa612d427239cdcc1842a65d3ee21a", "url": "https://github.com/payara/Payara/commit/d8d8a62d7aaa612d427239cdcc1842a65d3ee21a", "message": "FISH-244 Add null check for opentracingservice in Iiop factory", "committedDate": "2020-08-07T12:24:55Z", "type": "commit"}]}