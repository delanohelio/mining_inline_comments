{"pr_number": 4430, "pr_title": "CUSTCOM-76 WebappClassLoader Synchronisation Test", "pr_createdAt": "2020-01-13T16:41:50Z", "pr_url": "https://github.com/payara/Payara/pull/4430", "timeline": [{"oid": "21414e6489cbe68c3b5a08f6e72593875b078cca", "url": "https://github.com/payara/Payara/commit/21414e6489cbe68c3b5a08f6e72593875b078cca", "message": "Add a WebappClassLoader synchronisation test\n\nSynchronisation issues in the WebappClassLoader have already been fixed,\nbut not tested properly. This commit adds a test for the synchronisation\nissues that caused CUSTCOM-76.", "committedDate": "2020-01-13T16:37:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk2MjEwMg==", "url": "https://github.com/payara/Payara/pull/4430#discussion_r365962102", "bodyText": "As javadoc suggests, you should add following line to avoid interaction with other tests. It can also detect that some threads cannot finish:\nassertTrue(\"Deadlock detected!\", executor.awaitTermination(10, TimeUnit.SECONDS));\nEDIT: I updated this several times, I was sleepy yesterday and could not decide between assertTrue/assertFalse, sorry :D", "author": "dmatej", "createdAt": "2020-01-13T18:37:58Z", "path": "appserver/web/war-util/src/test/java/org/glassfish/web/loader/WebappClassLoaderTest.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package org.glassfish.web.loader;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarFile;\n+\n+import org.apache.naming.resources.FileDirContext;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class WebappClassLoaderTest {\n+\n+    private static CyclicBarrier lock;\n+    private static ExecutorService executor;\n+    private static File junitJarFile;\n+\n+    @BeforeClass\n+    public static void setup() throws URISyntaxException {\n+        // Run 3 methods at the same time, and make the pool large enough to increase\n+        // the chance of a race condition\n+        lock = new CyclicBarrier(3);\n+        executor = Executors.newFixedThreadPool(60);\n+\n+        // Fetch any JAR to use for classloading\n+        junitJarFile = new File(Test.class.getProtectionDomain().getCodeSource().getLocation().toURI());\n+    }\n+\n+    @AfterClass\n+    public static void shutdown() {\n+        if (executor != null) {\n+            executor.shutdownNow();\n+        }", "originalCommit": "21414e6489cbe68c3b5a08f6e72593875b078cca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7b6ac6abee24142153a37a2792c44a8c9178b0d3", "chunk": "diff --git a/appserver/web/war-util/src/test/java/org/glassfish/web/loader/WebappClassLoaderTest.java b/appserver/web/war-util/src/test/java/org/glassfish/web/loader/WebappClassLoaderTest.java\nindex cb2bfd52ee..6a0f341f3c 100644\n--- a/appserver/web/war-util/src/test/java/org/glassfish/web/loader/WebappClassLoaderTest.java\n+++ b/appserver/web/war-util/src/test/java/org/glassfish/web/loader/WebappClassLoaderTest.java\n\n@@ -39,6 +39,8 @@\n  */\n package org.glassfish.web.loader;\n \n+import static org.junit.Assert.assertTrue;\n+\n import java.io.File;\n import java.io.IOException;\n import java.net.URISyntaxException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk3NzA5OQ==", "url": "https://github.com/payara/Payara/pull/4430#discussion_r365977099", "bodyText": "I would add this, but it depends on the purpose of the test - if deadlock was acceptable result, then this would only break the test:\n        List<Runnable> notExecutedYet = executor.shutdownNow();\n        assertTrue(\"some jobs never executed: \" + notExecutedYet.size(), notExecutedYet.isEmpty());\n\nIt will fail if the executor pool is so small that it can execute some of tasks and some must wait in a queue. If tasks are not ending, the pool will not be capable to run more ...\nSo now we have 60 threads in pool for 300 tasks (3*100). Easy.", "author": "dmatej", "createdAt": "2020-01-13T19:10:56Z", "path": "appserver/web/war-util/src/test/java/org/glassfish/web/loader/WebappClassLoaderTest.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package org.glassfish.web.loader;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarFile;\n+\n+import org.apache.naming.resources.FileDirContext;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class WebappClassLoaderTest {\n+\n+    private static CyclicBarrier lock;\n+    private static ExecutorService executor;\n+    private static File junitJarFile;\n+\n+    @BeforeClass\n+    public static void setup() throws URISyntaxException {\n+        // Run 3 methods at the same time, and make the pool large enough to increase\n+        // the chance of a race condition\n+        lock = new CyclicBarrier(3);\n+        executor = Executors.newFixedThreadPool(60);\n+\n+        // Fetch any JAR to use for classloading\n+        junitJarFile = new File(Test.class.getProtectionDomain().getCodeSource().getLocation().toURI());\n+    }\n+\n+    @AfterClass\n+    public static void shutdown() {\n+        if (executor != null) {\n+            executor.shutdownNow();\n+        }\n+    }\n+\n+    @Test\n+    public void check_findResourceInternalFromJars_thread_safety() throws Exception {\n+        final ClassLoader classLoader = this.getClass().getClassLoader();\n+        final WebappClassLoader webappClassLoader = new WebappClassLoader(classLoader, null);\n+        webappClassLoader.start();\n+        webappClassLoader.setResources(new FileDirContext());\n+\n+        CompletableFuture<Exception> result = new CompletableFuture<>();\n+\n+        // Create the tasks, and have them each run at the same time\n+        // using the cyclic barrier\n+        Runnable lookupTask = waitAndDo(lock, result, () -> lookup(classLoader, webappClassLoader));\n+        Runnable addTask = waitAndDo(lock, result, () -> add(classLoader, webappClassLoader));\n+        Runnable closeTask = waitAndDo(lock, result, () -> webappClassLoader.closeJARs(true));\n+\n+        try {\n+            // Run the methods at the same time\n+            for (int i = 0; i < 100; i++) {\n+                executor.execute(addTask);\n+                executor.execute(lookupTask);\n+                executor.execute(closeTask);\n+            }\n+            // Check to see if any completed exceptionally\n+            Exception ex = result.get(200, TimeUnit.MILLISECONDS);\n+            if (ex != null) {\n+                throw ex;\n+            }\n+        } catch (TimeoutException ex) {\n+            // Success!\n+        } finally {\n+            webappClassLoader.close();\n+        }\n+    }", "originalCommit": "21414e6489cbe68c3b5a08f6e72593875b078cca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7b6ac6abee24142153a37a2792c44a8c9178b0d3", "chunk": "diff --git a/appserver/web/war-util/src/test/java/org/glassfish/web/loader/WebappClassLoaderTest.java b/appserver/web/war-util/src/test/java/org/glassfish/web/loader/WebappClassLoaderTest.java\nindex cb2bfd52ee..6a0f341f3c 100644\n--- a/appserver/web/war-util/src/test/java/org/glassfish/web/loader/WebappClassLoaderTest.java\n+++ b/appserver/web/war-util/src/test/java/org/glassfish/web/loader/WebappClassLoaderTest.java\n\n@@ -39,6 +39,8 @@\n  */\n package org.glassfish.web.loader;\n \n+import static org.junit.Assert.assertTrue;\n+\n import java.io.File;\n import java.io.IOException;\n import java.net.URISyntaxException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk3ODQ3MQ==", "url": "https://github.com/payara/Payara/pull/4430#discussion_r365978471", "bodyText": "This causes slowing down of all lookup tasks. When I tried to run much more threads to cause deadlock, I replaced this with Thread.yield(). But it is not generally better, it depends on what we hunt.", "author": "dmatej", "createdAt": "2020-01-13T19:14:06Z", "path": "appserver/web/war-util/src/test/java/org/glassfish/web/loader/WebappClassLoaderTest.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package org.glassfish.web.loader;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarFile;\n+\n+import org.apache.naming.resources.FileDirContext;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class WebappClassLoaderTest {\n+\n+    private static CyclicBarrier lock;\n+    private static ExecutorService executor;\n+    private static File junitJarFile;\n+\n+    @BeforeClass\n+    public static void setup() throws URISyntaxException {\n+        // Run 3 methods at the same time, and make the pool large enough to increase\n+        // the chance of a race condition\n+        lock = new CyclicBarrier(3);\n+        executor = Executors.newFixedThreadPool(60);\n+\n+        // Fetch any JAR to use for classloading\n+        junitJarFile = new File(Test.class.getProtectionDomain().getCodeSource().getLocation().toURI());\n+    }\n+\n+    @AfterClass\n+    public static void shutdown() {\n+        if (executor != null) {\n+            executor.shutdownNow();\n+        }\n+    }\n+\n+    @Test\n+    public void check_findResourceInternalFromJars_thread_safety() throws Exception {\n+        final ClassLoader classLoader = this.getClass().getClassLoader();\n+        final WebappClassLoader webappClassLoader = new WebappClassLoader(classLoader, null);\n+        webappClassLoader.start();\n+        webappClassLoader.setResources(new FileDirContext());\n+\n+        CompletableFuture<Exception> result = new CompletableFuture<>();\n+\n+        // Create the tasks, and have them each run at the same time\n+        // using the cyclic barrier\n+        Runnable lookupTask = waitAndDo(lock, result, () -> lookup(classLoader, webappClassLoader));\n+        Runnable addTask = waitAndDo(lock, result, () -> add(classLoader, webappClassLoader));\n+        Runnable closeTask = waitAndDo(lock, result, () -> webappClassLoader.closeJARs(true));\n+\n+        try {\n+            // Run the methods at the same time\n+            for (int i = 0; i < 100; i++) {\n+                executor.execute(addTask);\n+                executor.execute(lookupTask);\n+                executor.execute(closeTask);\n+            }\n+            // Check to see if any completed exceptionally\n+            Exception ex = result.get(200, TimeUnit.MILLISECONDS);\n+            if (ex != null) {\n+                throw ex;\n+            }\n+        } catch (TimeoutException ex) {\n+            // Success!\n+        } finally {\n+            webappClassLoader.close();\n+        }\n+    }\n+\n+    private void add(ClassLoader realClassLoader, WebappClassLoader webappClassLoader) throws IOException {\n+        List<JarFile> jarFiles = findJarFiles(realClassLoader);\n+\n+        for (JarFile j : jarFiles) {\n+            try {\n+                webappClassLoader.addJar(junitJarFile.getName(), j, junitJarFile);\n+            } catch (IOException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+    }\n+\n+    private void lookup(ClassLoader realClassLoader, WebappClassLoader webappClassLoader) throws Exception {\n+        for (JarFile jarFile : findJarFiles(realClassLoader)) {\n+            for (JarEntry entry : Collections.list(jarFile.entries())) {\n+                webappClassLoader.findResource(entry.getName());\n+                // System.out.println(\"Looked up \" + resourceEntry);\n+                Thread.sleep(0, 100);", "originalCommit": "21414e6489cbe68c3b5a08f6e72593875b078cca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7b6ac6abee24142153a37a2792c44a8c9178b0d3", "chunk": "diff --git a/appserver/web/war-util/src/test/java/org/glassfish/web/loader/WebappClassLoaderTest.java b/appserver/web/war-util/src/test/java/org/glassfish/web/loader/WebappClassLoaderTest.java\nindex cb2bfd52ee..6a0f341f3c 100644\n--- a/appserver/web/war-util/src/test/java/org/glassfish/web/loader/WebappClassLoaderTest.java\n+++ b/appserver/web/war-util/src/test/java/org/glassfish/web/loader/WebappClassLoaderTest.java\n\n@@ -39,6 +39,8 @@\n  */\n package org.glassfish.web.loader;\n \n+import static org.junit.Assert.assertTrue;\n+\n import java.io.File;\n import java.io.IOException;\n import java.net.URISyntaxException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk3OTAyNA==", "url": "https://github.com/payara/Payara/pull/4430#discussion_r365979024", "bodyText": "GOTO for cycle with executor.", "author": "dmatej", "createdAt": "2020-01-13T19:15:21Z", "path": "appserver/web/war-util/src/test/java/org/glassfish/web/loader/WebappClassLoaderTest.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package org.glassfish.web.loader;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarFile;\n+\n+import org.apache.naming.resources.FileDirContext;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class WebappClassLoaderTest {\n+\n+    private static CyclicBarrier lock;\n+    private static ExecutorService executor;\n+    private static File junitJarFile;\n+\n+    @BeforeClass\n+    public static void setup() throws URISyntaxException {\n+        // Run 3 methods at the same time, and make the pool large enough to increase\n+        // the chance of a race condition\n+        lock = new CyclicBarrier(3);\n+        executor = Executors.newFixedThreadPool(60);\n+\n+        // Fetch any JAR to use for classloading\n+        junitJarFile = new File(Test.class.getProtectionDomain().getCodeSource().getLocation().toURI());\n+    }\n+\n+    @AfterClass\n+    public static void shutdown() {\n+        if (executor != null) {\n+            executor.shutdownNow();\n+        }\n+    }\n+\n+    @Test\n+    public void check_findResourceInternalFromJars_thread_safety() throws Exception {\n+        final ClassLoader classLoader = this.getClass().getClassLoader();\n+        final WebappClassLoader webappClassLoader = new WebappClassLoader(classLoader, null);\n+        webappClassLoader.start();\n+        webappClassLoader.setResources(new FileDirContext());\n+\n+        CompletableFuture<Exception> result = new CompletableFuture<>();\n+\n+        // Create the tasks, and have them each run at the same time\n+        // using the cyclic barrier\n+        Runnable lookupTask = waitAndDo(lock, result, () -> lookup(classLoader, webappClassLoader));\n+        Runnable addTask = waitAndDo(lock, result, () -> add(classLoader, webappClassLoader));\n+        Runnable closeTask = waitAndDo(lock, result, () -> webappClassLoader.closeJARs(true));\n+\n+        try {\n+            // Run the methods at the same time\n+            for (int i = 0; i < 100; i++) {\n+                executor.execute(addTask);\n+                executor.execute(lookupTask);\n+                executor.execute(closeTask);\n+            }\n+            // Check to see if any completed exceptionally\n+            Exception ex = result.get(200, TimeUnit.MILLISECONDS);\n+            if (ex != null) {\n+                throw ex;\n+            }\n+        } catch (TimeoutException ex) {\n+            // Success!\n+        } finally {\n+            webappClassLoader.close();\n+        }\n+    }\n+\n+    private void add(ClassLoader realClassLoader, WebappClassLoader webappClassLoader) throws IOException {\n+        List<JarFile> jarFiles = findJarFiles(realClassLoader);\n+\n+        for (JarFile j : jarFiles) {\n+            try {\n+                webappClassLoader.addJar(junitJarFile.getName(), j, junitJarFile);\n+            } catch (IOException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+    }\n+\n+    private void lookup(ClassLoader realClassLoader, WebappClassLoader webappClassLoader) throws Exception {\n+        for (JarFile jarFile : findJarFiles(realClassLoader)) {\n+            for (JarEntry entry : Collections.list(jarFile.entries())) {\n+                webappClassLoader.findResource(entry.getName());\n+                // System.out.println(\"Looked up \" + resourceEntry);\n+                Thread.sleep(0, 100);\n+            }\n+        }\n+    }\n+\n+    private List<JarFile> findJarFiles(ClassLoader realClassLoader) throws IOException {\n+        List<JarFile> jarFiles = new LinkedList<>();\n+        for (int i = 0; i < 10; i++) {\n+            jarFiles.add(new JarFile(junitJarFile));\n+        }\n+        return jarFiles;\n+    }\n+\n+    /**\n+     * Generate a task that will wait on the passed cyclic barrier before running\n+     * the passed task. Record the result in the passed future\n+     * \n+     * @param lock   the lock to wait on before execution\n+     * @param result where to store any encountered exceptions\n+     * @param task   the task to run\n+     * @return a new task\n+     */\n+    private static Runnable waitAndDo(final CyclicBarrier lock, final CompletableFuture<Exception> result,\n+            final ExceptionalRunnable task) {\n+        return () -> {\n+            try {\n+                lock.await();", "originalCommit": "21414e6489cbe68c3b5a08f6e72593875b078cca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7b6ac6abee24142153a37a2792c44a8c9178b0d3", "chunk": "diff --git a/appserver/web/war-util/src/test/java/org/glassfish/web/loader/WebappClassLoaderTest.java b/appserver/web/war-util/src/test/java/org/glassfish/web/loader/WebappClassLoaderTest.java\nindex cb2bfd52ee..6a0f341f3c 100644\n--- a/appserver/web/war-util/src/test/java/org/glassfish/web/loader/WebappClassLoaderTest.java\n+++ b/appserver/web/war-util/src/test/java/org/glassfish/web/loader/WebappClassLoaderTest.java\n\n@@ -39,6 +39,8 @@\n  */\n package org.glassfish.web.loader;\n \n+import static org.junit.Assert.assertTrue;\n+\n import java.io.File;\n import java.io.IOException;\n import java.net.URISyntaxException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk3MTE1Mw==", "url": "https://github.com/payara/Payara/pull/4430#discussion_r365971153", "bodyText": "static redundant for inner interfaces", "author": "rdebusscher", "createdAt": "2020-01-13T18:57:43Z", "path": "appserver/web/war-util/src/test/java/org/glassfish/web/loader/WebappClassLoaderTest.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package org.glassfish.web.loader;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarFile;\n+\n+import org.apache.naming.resources.FileDirContext;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class WebappClassLoaderTest {\n+\n+    private static CyclicBarrier lock;\n+    private static ExecutorService executor;\n+    private static File junitJarFile;\n+\n+    @BeforeClass\n+    public static void setup() throws URISyntaxException {\n+        // Run 3 methods at the same time, and make the pool large enough to increase\n+        // the chance of a race condition\n+        lock = new CyclicBarrier(3);\n+        executor = Executors.newFixedThreadPool(60);\n+\n+        // Fetch any JAR to use for classloading\n+        junitJarFile = new File(Test.class.getProtectionDomain().getCodeSource().getLocation().toURI());\n+    }\n+\n+    @AfterClass\n+    public static void shutdown() {\n+        if (executor != null) {\n+            executor.shutdownNow();\n+        }\n+    }\n+\n+    @Test\n+    public void check_findResourceInternalFromJars_thread_safety() throws Exception {\n+        final ClassLoader classLoader = this.getClass().getClassLoader();\n+        final WebappClassLoader webappClassLoader = new WebappClassLoader(classLoader, null);\n+        webappClassLoader.start();\n+        webappClassLoader.setResources(new FileDirContext());\n+\n+        CompletableFuture<Exception> result = new CompletableFuture<>();\n+\n+        // Create the tasks, and have them each run at the same time\n+        // using the cyclic barrier\n+        Runnable lookupTask = waitAndDo(lock, result, () -> lookup(classLoader, webappClassLoader));\n+        Runnable addTask = waitAndDo(lock, result, () -> add(classLoader, webappClassLoader));\n+        Runnable closeTask = waitAndDo(lock, result, () -> webappClassLoader.closeJARs(true));\n+\n+        try {\n+            // Run the methods at the same time\n+            for (int i = 0; i < 100; i++) {\n+                executor.execute(addTask);\n+                executor.execute(lookupTask);\n+                executor.execute(closeTask);\n+            }\n+            // Check to see if any completed exceptionally\n+            Exception ex = result.get(200, TimeUnit.MILLISECONDS);\n+            if (ex != null) {\n+                throw ex;\n+            }\n+        } catch (TimeoutException ex) {\n+            // Success!\n+        } finally {\n+            webappClassLoader.close();\n+        }\n+    }\n+\n+    private void add(ClassLoader realClassLoader, WebappClassLoader webappClassLoader) throws IOException {\n+        List<JarFile> jarFiles = findJarFiles(realClassLoader);\n+\n+        for (JarFile j : jarFiles) {\n+            try {\n+                webappClassLoader.addJar(junitJarFile.getName(), j, junitJarFile);\n+            } catch (IOException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+    }\n+\n+    private void lookup(ClassLoader realClassLoader, WebappClassLoader webappClassLoader) throws Exception {\n+        for (JarFile jarFile : findJarFiles(realClassLoader)) {\n+            for (JarEntry entry : Collections.list(jarFile.entries())) {\n+                webappClassLoader.findResource(entry.getName());\n+                // System.out.println(\"Looked up \" + resourceEntry);\n+                Thread.sleep(0, 100);\n+            }\n+        }\n+    }\n+\n+    private List<JarFile> findJarFiles(ClassLoader realClassLoader) throws IOException {\n+        List<JarFile> jarFiles = new LinkedList<>();\n+        for (int i = 0; i < 10; i++) {\n+            jarFiles.add(new JarFile(junitJarFile));\n+        }\n+        return jarFiles;\n+    }\n+\n+    /**\n+     * Generate a task that will wait on the passed cyclic barrier before running\n+     * the passed task. Record the result in the passed future\n+     * \n+     * @param lock   the lock to wait on before execution\n+     * @param result where to store any encountered exceptions\n+     * @param task   the task to run\n+     * @return a new task\n+     */\n+    private static Runnable waitAndDo(final CyclicBarrier lock, final CompletableFuture<Exception> result,\n+            final ExceptionalRunnable task) {\n+        return () -> {\n+            try {\n+                lock.await();\n+                task.run();\n+            } catch (Exception ex) {\n+                result.complete(ex);\n+            }\n+        };\n+    }\n+\n+    /**\n+     * A runnable interface that allows exceptions\n+     */\n+    @FunctionalInterface\n+    private static interface ExceptionalRunnable {", "originalCommit": "21414e6489cbe68c3b5a08f6e72593875b078cca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7b6ac6abee24142153a37a2792c44a8c9178b0d3", "chunk": "diff --git a/appserver/web/war-util/src/test/java/org/glassfish/web/loader/WebappClassLoaderTest.java b/appserver/web/war-util/src/test/java/org/glassfish/web/loader/WebappClassLoaderTest.java\nindex cb2bfd52ee..6a0f341f3c 100644\n--- a/appserver/web/war-util/src/test/java/org/glassfish/web/loader/WebappClassLoaderTest.java\n+++ b/appserver/web/war-util/src/test/java/org/glassfish/web/loader/WebappClassLoaderTest.java\n\n@@ -39,6 +39,8 @@\n  */\n package org.glassfish.web.loader;\n \n+import static org.junit.Assert.assertTrue;\n+\n import java.io.File;\n import java.io.IOException;\n import java.net.URISyntaxException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk3MTI1Nw==", "url": "https://github.com/payara/Payara/pull/4430#discussion_r365971257", "bodyText": "realClassLoader unused", "author": "rdebusscher", "createdAt": "2020-01-13T18:57:57Z", "path": "appserver/web/war-util/src/test/java/org/glassfish/web/loader/WebappClassLoaderTest.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package org.glassfish.web.loader;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarFile;\n+\n+import org.apache.naming.resources.FileDirContext;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class WebappClassLoaderTest {\n+\n+    private static CyclicBarrier lock;\n+    private static ExecutorService executor;\n+    private static File junitJarFile;\n+\n+    @BeforeClass\n+    public static void setup() throws URISyntaxException {\n+        // Run 3 methods at the same time, and make the pool large enough to increase\n+        // the chance of a race condition\n+        lock = new CyclicBarrier(3);\n+        executor = Executors.newFixedThreadPool(60);\n+\n+        // Fetch any JAR to use for classloading\n+        junitJarFile = new File(Test.class.getProtectionDomain().getCodeSource().getLocation().toURI());\n+    }\n+\n+    @AfterClass\n+    public static void shutdown() {\n+        if (executor != null) {\n+            executor.shutdownNow();\n+        }\n+    }\n+\n+    @Test\n+    public void check_findResourceInternalFromJars_thread_safety() throws Exception {\n+        final ClassLoader classLoader = this.getClass().getClassLoader();\n+        final WebappClassLoader webappClassLoader = new WebappClassLoader(classLoader, null);\n+        webappClassLoader.start();\n+        webappClassLoader.setResources(new FileDirContext());\n+\n+        CompletableFuture<Exception> result = new CompletableFuture<>();\n+\n+        // Create the tasks, and have them each run at the same time\n+        // using the cyclic barrier\n+        Runnable lookupTask = waitAndDo(lock, result, () -> lookup(classLoader, webappClassLoader));\n+        Runnable addTask = waitAndDo(lock, result, () -> add(classLoader, webappClassLoader));\n+        Runnable closeTask = waitAndDo(lock, result, () -> webappClassLoader.closeJARs(true));\n+\n+        try {\n+            // Run the methods at the same time\n+            for (int i = 0; i < 100; i++) {\n+                executor.execute(addTask);\n+                executor.execute(lookupTask);\n+                executor.execute(closeTask);\n+            }\n+            // Check to see if any completed exceptionally\n+            Exception ex = result.get(200, TimeUnit.MILLISECONDS);\n+            if (ex != null) {\n+                throw ex;\n+            }\n+        } catch (TimeoutException ex) {\n+            // Success!\n+        } finally {\n+            webappClassLoader.close();\n+        }\n+    }\n+\n+    private void add(ClassLoader realClassLoader, WebappClassLoader webappClassLoader) throws IOException {\n+        List<JarFile> jarFiles = findJarFiles(realClassLoader);\n+\n+        for (JarFile j : jarFiles) {\n+            try {\n+                webappClassLoader.addJar(junitJarFile.getName(), j, junitJarFile);\n+            } catch (IOException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+    }\n+\n+    private void lookup(ClassLoader realClassLoader, WebappClassLoader webappClassLoader) throws Exception {\n+        for (JarFile jarFile : findJarFiles(realClassLoader)) {\n+            for (JarEntry entry : Collections.list(jarFile.entries())) {\n+                webappClassLoader.findResource(entry.getName());\n+                // System.out.println(\"Looked up \" + resourceEntry);\n+                Thread.sleep(0, 100);\n+            }\n+        }\n+    }\n+\n+    private List<JarFile> findJarFiles(ClassLoader realClassLoader) throws IOException {", "originalCommit": "21414e6489cbe68c3b5a08f6e72593875b078cca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7b6ac6abee24142153a37a2792c44a8c9178b0d3", "chunk": "diff --git a/appserver/web/war-util/src/test/java/org/glassfish/web/loader/WebappClassLoaderTest.java b/appserver/web/war-util/src/test/java/org/glassfish/web/loader/WebappClassLoaderTest.java\nindex cb2bfd52ee..6a0f341f3c 100644\n--- a/appserver/web/war-util/src/test/java/org/glassfish/web/loader/WebappClassLoaderTest.java\n+++ b/appserver/web/war-util/src/test/java/org/glassfish/web/loader/WebappClassLoaderTest.java\n\n@@ -39,6 +39,8 @@\n  */\n package org.glassfish.web.loader;\n \n+import static org.junit.Assert.assertTrue;\n+\n import java.io.File;\n import java.io.IOException;\n import java.net.URISyntaxException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk3ODk2Mg==", "url": "https://github.com/payara/Payara/pull/4430#discussion_r365978962", "bodyText": "This also mean that all tasks must be finished 200 ms after the lasts task is scheduled.\nI tested this on my machine and the time between the end of the last task finished and the timeout was only about 35 ms.\nSo this should help\n        boolean stopped = executor.awaitTermination(500, TimeUnit.MILLISECONDS);\n        if (!stopped) {\n            fail(\"Tasks are not finished in a timely manner\");\n        }\n\nBut it revealed another issue, all the tasks are not finished when retrieving the Future.get() :  the lookup task never ends and seems blocked in a deadlock.", "author": "rdebusscher", "createdAt": "2020-01-13T19:15:14Z", "path": "appserver/web/war-util/src/test/java/org/glassfish/web/loader/WebappClassLoaderTest.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package org.glassfish.web.loader;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarFile;\n+\n+import org.apache.naming.resources.FileDirContext;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class WebappClassLoaderTest {\n+\n+    private static CyclicBarrier lock;\n+    private static ExecutorService executor;\n+    private static File junitJarFile;\n+\n+    @BeforeClass\n+    public static void setup() throws URISyntaxException {\n+        // Run 3 methods at the same time, and make the pool large enough to increase\n+        // the chance of a race condition\n+        lock = new CyclicBarrier(3);\n+        executor = Executors.newFixedThreadPool(60);\n+\n+        // Fetch any JAR to use for classloading\n+        junitJarFile = new File(Test.class.getProtectionDomain().getCodeSource().getLocation().toURI());\n+    }\n+\n+    @AfterClass\n+    public static void shutdown() {\n+        if (executor != null) {\n+            executor.shutdownNow();\n+        }\n+    }\n+\n+    @Test\n+    public void check_findResourceInternalFromJars_thread_safety() throws Exception {\n+        final ClassLoader classLoader = this.getClass().getClassLoader();\n+        final WebappClassLoader webappClassLoader = new WebappClassLoader(classLoader, null);\n+        webappClassLoader.start();\n+        webappClassLoader.setResources(new FileDirContext());\n+\n+        CompletableFuture<Exception> result = new CompletableFuture<>();\n+\n+        // Create the tasks, and have them each run at the same time\n+        // using the cyclic barrier\n+        Runnable lookupTask = waitAndDo(lock, result, () -> lookup(classLoader, webappClassLoader));\n+        Runnable addTask = waitAndDo(lock, result, () -> add(classLoader, webappClassLoader));\n+        Runnable closeTask = waitAndDo(lock, result, () -> webappClassLoader.closeJARs(true));\n+\n+        try {\n+            // Run the methods at the same time\n+            for (int i = 0; i < 100; i++) {\n+                executor.execute(addTask);\n+                executor.execute(lookupTask);\n+                executor.execute(closeTask);\n+            }\n+            // Check to see if any completed exceptionally\n+            Exception ex = result.get(200, TimeUnit.MILLISECONDS);", "originalCommit": "21414e6489cbe68c3b5a08f6e72593875b078cca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk4MzM0Ng==", "url": "https://github.com/payara/Payara/pull/4430#discussion_r365983346", "bodyText": "Running the test on my system suggests that there is a deadlock.\n\nI had to change values, but I can cause the deadlock too under some circumstances ...", "author": "dmatej", "createdAt": "2020-01-13T19:24:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk3ODk2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk4NDk1NQ==", "url": "https://github.com/payara/Payara/pull/4430#discussion_r365984955", "bodyText": "This also mean that all tasks must be finished 200 ms after the lasts task is scheduled.\n\nIt does not, it waits only to first result.complete(ex) call.", "author": "dmatej", "createdAt": "2020-01-13T19:27:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk3ODk2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk4NjM3OA==", "url": "https://github.com/payara/Payara/pull/4430#discussion_r365986378", "bodyText": "It seems not to be a deadlock, but the lookup tasks just takes to long by the use of\nThread.sleep(0, 100);\n\nSo that lookup tasks are not finished.\nBy replacing it with\nThread.yield();\n\nTests runs normal and all tasks are finished 500 ms after the last one is launched (with .awaitTermination() )", "author": "rdebusscher", "createdAt": "2020-01-13T19:30:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk3ODk2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE2NjI0Mg==", "url": "https://github.com/payara/Payara/pull/4430#discussion_r366166242", "bodyText": "With more threads it still does not finish ... I will try yet to use jcmd if it would see the deadlock or not, but even my cpu load dropped after a while far before timeout.\nEDIT: not true, I enhanced test a bit today and it passes.", "author": "dmatej", "createdAt": "2020-01-14T06:13:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk3ODk2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "7b6ac6abee24142153a37a2792c44a8c9178b0d3", "chunk": "diff --git a/appserver/web/war-util/src/test/java/org/glassfish/web/loader/WebappClassLoaderTest.java b/appserver/web/war-util/src/test/java/org/glassfish/web/loader/WebappClassLoaderTest.java\nindex cb2bfd52ee..6a0f341f3c 100644\n--- a/appserver/web/war-util/src/test/java/org/glassfish/web/loader/WebappClassLoaderTest.java\n+++ b/appserver/web/war-util/src/test/java/org/glassfish/web/loader/WebappClassLoaderTest.java\n\n@@ -39,6 +39,8 @@\n  */\n package org.glassfish.web.loader;\n \n+import static org.junit.Assert.assertTrue;\n+\n import java.io.File;\n import java.io.IOException;\n import java.net.URISyntaxException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk4MDMwMg==", "url": "https://github.com/payara/Payara/pull/4430#discussion_r365980302", "bodyText": "This will only synchronize the start of the first 3 tasks. The 4th tasks will start immediately. Comment is a bit misleading in that regard.", "author": "rdebusscher", "createdAt": "2020-01-13T19:18:05Z", "path": "appserver/web/war-util/src/test/java/org/glassfish/web/loader/WebappClassLoaderTest.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package org.glassfish.web.loader;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarFile;\n+\n+import org.apache.naming.resources.FileDirContext;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class WebappClassLoaderTest {\n+\n+    private static CyclicBarrier lock;\n+    private static ExecutorService executor;\n+    private static File junitJarFile;\n+\n+    @BeforeClass\n+    public static void setup() throws URISyntaxException {\n+        // Run 3 methods at the same time, and make the pool large enough to increase\n+        // the chance of a race condition\n+        lock = new CyclicBarrier(3);", "originalCommit": "21414e6489cbe68c3b5a08f6e72593875b078cca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7b6ac6abee24142153a37a2792c44a8c9178b0d3", "chunk": "diff --git a/appserver/web/war-util/src/test/java/org/glassfish/web/loader/WebappClassLoaderTest.java b/appserver/web/war-util/src/test/java/org/glassfish/web/loader/WebappClassLoaderTest.java\nindex cb2bfd52ee..6a0f341f3c 100644\n--- a/appserver/web/war-util/src/test/java/org/glassfish/web/loader/WebappClassLoaderTest.java\n+++ b/appserver/web/war-util/src/test/java/org/glassfish/web/loader/WebappClassLoaderTest.java\n\n@@ -39,6 +39,8 @@\n  */\n package org.glassfish.web.loader;\n \n+import static org.junit.Assert.assertTrue;\n+\n import java.io.File;\n import java.io.IOException;\n import java.net.URISyntaxException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk4MjI0Ng==", "url": "https://github.com/payara/Payara/pull/4430#discussion_r365982246", "bodyText": "LABEL for cycle with executor: note that the pool uses a queue, so first three tasks will get their time at once and then all other (do I remember it well?), until the pool will be empty. Following requests will wait in the queue for free (finished) threads.", "author": "dmatej", "createdAt": "2020-01-13T19:21:53Z", "path": "appserver/web/war-util/src/test/java/org/glassfish/web/loader/WebappClassLoaderTest.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package org.glassfish.web.loader;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarFile;\n+\n+import org.apache.naming.resources.FileDirContext;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class WebappClassLoaderTest {\n+\n+    private static CyclicBarrier lock;\n+    private static ExecutorService executor;\n+    private static File junitJarFile;\n+\n+    @BeforeClass\n+    public static void setup() throws URISyntaxException {\n+        // Run 3 methods at the same time, and make the pool large enough to increase\n+        // the chance of a race condition\n+        lock = new CyclicBarrier(3);\n+        executor = Executors.newFixedThreadPool(60);\n+\n+        // Fetch any JAR to use for classloading\n+        junitJarFile = new File(Test.class.getProtectionDomain().getCodeSource().getLocation().toURI());\n+    }\n+\n+    @AfterClass\n+    public static void shutdown() {\n+        if (executor != null) {\n+            executor.shutdownNow();\n+        }\n+    }\n+\n+    @Test\n+    public void check_findResourceInternalFromJars_thread_safety() throws Exception {\n+        final ClassLoader classLoader = this.getClass().getClassLoader();\n+        final WebappClassLoader webappClassLoader = new WebappClassLoader(classLoader, null);\n+        webappClassLoader.start();\n+        webappClassLoader.setResources(new FileDirContext());\n+\n+        CompletableFuture<Exception> result = new CompletableFuture<>();\n+\n+        // Create the tasks, and have them each run at the same time\n+        // using the cyclic barrier\n+        Runnable lookupTask = waitAndDo(lock, result, () -> lookup(classLoader, webappClassLoader));\n+        Runnable addTask = waitAndDo(lock, result, () -> add(classLoader, webappClassLoader));\n+        Runnable closeTask = waitAndDo(lock, result, () -> webappClassLoader.closeJARs(true));\n+\n+        try {\n+            // Run the methods at the same time\n+            for (int i = 0; i < 100; i++) {\n+                executor.execute(addTask);", "originalCommit": "21414e6489cbe68c3b5a08f6e72593875b078cca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7b6ac6abee24142153a37a2792c44a8c9178b0d3", "chunk": "diff --git a/appserver/web/war-util/src/test/java/org/glassfish/web/loader/WebappClassLoaderTest.java b/appserver/web/war-util/src/test/java/org/glassfish/web/loader/WebappClassLoaderTest.java\nindex cb2bfd52ee..6a0f341f3c 100644\n--- a/appserver/web/war-util/src/test/java/org/glassfish/web/loader/WebappClassLoaderTest.java\n+++ b/appserver/web/war-util/src/test/java/org/glassfish/web/loader/WebappClassLoaderTest.java\n\n@@ -39,6 +39,8 @@\n  */\n package org.glassfish.web.loader;\n \n+import static org.junit.Assert.assertTrue;\n+\n import java.io.File;\n import java.io.IOException;\n import java.net.URISyntaxException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE4NzEzMw==", "url": "https://github.com/payara/Payara/pull/4430#discussion_r366187133", "bodyText": "If you would use completeExceptionally, you don't need this check.", "author": "dmatej", "createdAt": "2020-01-14T07:38:28Z", "path": "appserver/web/war-util/src/test/java/org/glassfish/web/loader/WebappClassLoaderTest.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package org.glassfish.web.loader;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarFile;\n+\n+import org.apache.naming.resources.FileDirContext;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class WebappClassLoaderTest {\n+\n+    private static CyclicBarrier lock;\n+    private static ExecutorService executor;\n+    private static File junitJarFile;\n+\n+    @BeforeClass\n+    public static void setup() throws URISyntaxException {\n+        // Run 3 methods at the same time, and make the pool large enough to increase\n+        // the chance of a race condition\n+        lock = new CyclicBarrier(3);\n+        executor = Executors.newFixedThreadPool(60);\n+\n+        // Fetch any JAR to use for classloading\n+        junitJarFile = new File(Test.class.getProtectionDomain().getCodeSource().getLocation().toURI());\n+    }\n+\n+    @AfterClass\n+    public static void shutdown() {\n+        if (executor != null) {\n+            executor.shutdownNow();\n+        }\n+    }\n+\n+    @Test\n+    public void check_findResourceInternalFromJars_thread_safety() throws Exception {\n+        final ClassLoader classLoader = this.getClass().getClassLoader();\n+        final WebappClassLoader webappClassLoader = new WebappClassLoader(classLoader, null);\n+        webappClassLoader.start();\n+        webappClassLoader.setResources(new FileDirContext());\n+\n+        CompletableFuture<Exception> result = new CompletableFuture<>();\n+\n+        // Create the tasks, and have them each run at the same time\n+        // using the cyclic barrier\n+        Runnable lookupTask = waitAndDo(lock, result, () -> lookup(classLoader, webappClassLoader));\n+        Runnable addTask = waitAndDo(lock, result, () -> add(classLoader, webappClassLoader));\n+        Runnable closeTask = waitAndDo(lock, result, () -> webappClassLoader.closeJARs(true));\n+\n+        try {\n+            // Run the methods at the same time\n+            for (int i = 0; i < 100; i++) {\n+                executor.execute(addTask);\n+                executor.execute(lookupTask);\n+                executor.execute(closeTask);\n+            }\n+            // Check to see if any completed exceptionally\n+            Exception ex = result.get(200, TimeUnit.MILLISECONDS);\n+            if (ex != null) {", "originalCommit": "21414e6489cbe68c3b5a08f6e72593875b078cca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7b6ac6abee24142153a37a2792c44a8c9178b0d3", "chunk": "diff --git a/appserver/web/war-util/src/test/java/org/glassfish/web/loader/WebappClassLoaderTest.java b/appserver/web/war-util/src/test/java/org/glassfish/web/loader/WebappClassLoaderTest.java\nindex cb2bfd52ee..6a0f341f3c 100644\n--- a/appserver/web/war-util/src/test/java/org/glassfish/web/loader/WebappClassLoaderTest.java\n+++ b/appserver/web/war-util/src/test/java/org/glassfish/web/loader/WebappClassLoaderTest.java\n\n@@ -39,6 +39,8 @@\n  */\n package org.glassfish.web.loader;\n \n+import static org.junit.Assert.assertTrue;\n+\n import java.io.File;\n import java.io.IOException;\n import java.net.URISyntaxException;\n"}}, {"oid": "7b6ac6abee24142153a37a2792c44a8c9178b0d3", "url": "https://github.com/payara/Payara/commit/7b6ac6abee24142153a37a2792c44a8c9178b0d3", "message": "Improve the WebappClassLoaderTest\n\nThe test could pass without any threads running in time when running on\na slow machine. This commit makes sure that a minimum number of threads\nrun before completing. A few other changes were made to make the test\nmore reliable.", "committedDate": "2020-01-14T11:57:24Z", "type": "commit"}, {"oid": "7b6ac6abee24142153a37a2792c44a8c9178b0d3", "url": "https://github.com/payara/Payara/commit/7b6ac6abee24142153a37a2792c44a8c9178b0d3", "message": "Improve the WebappClassLoaderTest\n\nThe test could pass without any threads running in time when running on\na slow machine. This commit makes sure that a minimum number of threads\nrun before completing. A few other changes were made to make the test\nmore reliable.", "committedDate": "2020-01-14T11:57:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjczNjQ5OQ==", "url": "https://github.com/payara/Payara/pull/4430#discussion_r366736499", "bodyText": "This means we just wait fore the first 100 tasks of the 300 tasks to be finished.  With the current code (Thread.sleep(0, 100); in the lookup() method) this means only the 'add' and 'closeJar' tasks are finished. No 'lookup' task is finished by the time the test checks for an error.", "author": "rdebusscher", "createdAt": "2020-01-15T08:03:40Z", "path": "appserver/web/war-util/src/test/java/org/glassfish/web/loader/WebappClassLoaderTest.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package org.glassfish.web.loader;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarFile;\n+\n+import org.apache.naming.resources.FileDirContext;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class WebappClassLoaderTest {\n+\n+    private static final int EXECUTION_COUNT = 100;\n+\n+    private CountDownLatch latch;\n+\n+    private ExecutorService executor;\n+    private File junitJarFile;\n+\n+    @Before\n+    public void setup() throws URISyntaxException {\n+        // Run 3 methods at the same time, and make the pool large enough to increase\n+        // the chance of a race condition\n+        executor = Executors.newFixedThreadPool(60);\n+\n+        // Require a minimum number of executions before completing\n+        latch = new CountDownLatch(EXECUTION_COUNT);", "originalCommit": "7b6ac6abee24142153a37a2792c44a8c9178b0d3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjczNzEwMQ==", "url": "https://github.com/payara/Payara/pull/4430#discussion_r366737101", "bodyText": "executor.awaitTermination termination always return true, also in the case the tasks isn't finished. In that case, the executor send an interrupted signal and InterruptedException occurs (verified with try catch in lookup method).", "author": "rdebusscher", "createdAt": "2020-01-15T08:05:46Z", "path": "appserver/web/war-util/src/test/java/org/glassfish/web/loader/WebappClassLoaderTest.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package org.glassfish.web.loader;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarFile;\n+\n+import org.apache.naming.resources.FileDirContext;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class WebappClassLoaderTest {\n+\n+    private static final int EXECUTION_COUNT = 100;\n+\n+    private CountDownLatch latch;\n+\n+    private ExecutorService executor;\n+    private File junitJarFile;\n+\n+    @Before\n+    public void setup() throws URISyntaxException {\n+        // Run 3 methods at the same time, and make the pool large enough to increase\n+        // the chance of a race condition\n+        executor = Executors.newFixedThreadPool(60);\n+\n+        // Require a minimum number of executions before completing\n+        latch = new CountDownLatch(EXECUTION_COUNT);\n+\n+        // Fetch any JAR to use for classloading\n+        junitJarFile = new File(Test.class.getProtectionDomain().getCodeSource().getLocation().toURI());\n+    }\n+\n+    @After\n+    public void shutdown() throws InterruptedException {\n+        if (executor != null) {\n+            executor.shutdownNow();\n+            assertTrue(\"Executor could not shutdown. This could mean there is a deadlock.\",", "originalCommit": "7b6ac6abee24142153a37a2792c44a8c9178b0d3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjczNzU4MA==", "url": "https://github.com/payara/Payara/pull/4430#discussion_r366737580", "bodyText": "It waits only for 100 tasks of the 300 submitted. Since 'add' and 'closeJar' are small/fast tasks, this will never be an issue (except in case of deadlock)", "author": "rdebusscher", "createdAt": "2020-01-15T08:07:16Z", "path": "appserver/web/war-util/src/test/java/org/glassfish/web/loader/WebappClassLoaderTest.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package org.glassfish.web.loader;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarFile;\n+\n+import org.apache.naming.resources.FileDirContext;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class WebappClassLoaderTest {\n+\n+    private static final int EXECUTION_COUNT = 100;\n+\n+    private CountDownLatch latch;\n+\n+    private ExecutorService executor;\n+    private File junitJarFile;\n+\n+    @Before\n+    public void setup() throws URISyntaxException {\n+        // Run 3 methods at the same time, and make the pool large enough to increase\n+        // the chance of a race condition\n+        executor = Executors.newFixedThreadPool(60);\n+\n+        // Require a minimum number of executions before completing\n+        latch = new CountDownLatch(EXECUTION_COUNT);\n+\n+        // Fetch any JAR to use for classloading\n+        junitJarFile = new File(Test.class.getProtectionDomain().getCodeSource().getLocation().toURI());\n+    }\n+\n+    @After\n+    public void shutdown() throws InterruptedException {\n+        if (executor != null) {\n+            executor.shutdownNow();\n+            assertTrue(\"Executor could not shutdown. This could mean there is a deadlock.\",\n+                    executor.awaitTermination(10, TimeUnit.SECONDS));\n+        }\n+    }\n+\n+    @Test\n+    public void check_findResourceInternalFromJars_thread_safety() throws Exception {\n+        final WebappClassLoader webappClassLoader = new WebappClassLoader(getClass().getClassLoader(), null);\n+        webappClassLoader.start();\n+        webappClassLoader.setResources(new FileDirContext());\n+\n+        CompletableFuture<Void> result = new CompletableFuture<>();\n+\n+        // Create the tasks to run\n+        Runnable lookupTask = waitAndDo(result, () -> lookup(webappClassLoader));\n+        Runnable addTask = waitAndDo(result, () -> add(webappClassLoader));\n+        Runnable closeTask = waitAndDo(result, () -> webappClassLoader.closeJARs(true));\n+\n+        try {\n+            // Run the methods at the same time\n+            for (int i = 0; i < EXECUTION_COUNT; i++) {\n+                executor.execute(addTask);\n+                executor.execute(lookupTask);\n+                executor.execute(closeTask);\n+            }\n+\n+            // Wait for tasks to execute\n+            assertTrue(\"The tasks didn't finish in the allowed time.\",", "originalCommit": "7b6ac6abee24142153a37a2792c44a8c9178b0d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc2NTk4NQ==", "url": "https://github.com/payara/Payara/pull/4430#discussion_r366765985", "bodyText": "Yep, this is there exclusively for deadlocks", "author": "MattGill98", "createdAt": "2020-01-15T09:18:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjczNzU4MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjczOTcxMg==", "url": "https://github.com/payara/Payara/pull/4430#discussion_r366739712", "bodyText": "This sleep means that only a 'few' lookups are performed (in my test, around 3000 in the 130 ms the test is running).\nBy replacing it with Thread.yield(), the number of lookup actions is increased to around 21000 which mean the chance of having a concurrency issue (which we like to detect with this test) is increased significantly.", "author": "rdebusscher", "createdAt": "2020-01-15T08:13:40Z", "path": "appserver/web/war-util/src/test/java/org/glassfish/web/loader/WebappClassLoaderTest.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package org.glassfish.web.loader;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarFile;\n+\n+import org.apache.naming.resources.FileDirContext;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class WebappClassLoaderTest {\n+\n+    private static final int EXECUTION_COUNT = 100;\n+\n+    private CountDownLatch latch;\n+\n+    private ExecutorService executor;\n+    private File junitJarFile;\n+\n+    @Before\n+    public void setup() throws URISyntaxException {\n+        // Run 3 methods at the same time, and make the pool large enough to increase\n+        // the chance of a race condition\n+        executor = Executors.newFixedThreadPool(60);\n+\n+        // Require a minimum number of executions before completing\n+        latch = new CountDownLatch(EXECUTION_COUNT);\n+\n+        // Fetch any JAR to use for classloading\n+        junitJarFile = new File(Test.class.getProtectionDomain().getCodeSource().getLocation().toURI());\n+    }\n+\n+    @After\n+    public void shutdown() throws InterruptedException {\n+        if (executor != null) {\n+            executor.shutdownNow();\n+            assertTrue(\"Executor could not shutdown. This could mean there is a deadlock.\",\n+                    executor.awaitTermination(10, TimeUnit.SECONDS));\n+        }\n+    }\n+\n+    @Test\n+    public void check_findResourceInternalFromJars_thread_safety() throws Exception {\n+        final WebappClassLoader webappClassLoader = new WebappClassLoader(getClass().getClassLoader(), null);\n+        webappClassLoader.start();\n+        webappClassLoader.setResources(new FileDirContext());\n+\n+        CompletableFuture<Void> result = new CompletableFuture<>();\n+\n+        // Create the tasks to run\n+        Runnable lookupTask = waitAndDo(result, () -> lookup(webappClassLoader));\n+        Runnable addTask = waitAndDo(result, () -> add(webappClassLoader));\n+        Runnable closeTask = waitAndDo(result, () -> webappClassLoader.closeJARs(true));\n+\n+        try {\n+            // Run the methods at the same time\n+            for (int i = 0; i < EXECUTION_COUNT; i++) {\n+                executor.execute(addTask);\n+                executor.execute(lookupTask);\n+                executor.execute(closeTask);\n+            }\n+\n+            // Wait for tasks to execute\n+            assertTrue(\"The tasks didn't finish in the allowed time.\",\n+                    latch.await(20, TimeUnit.SECONDS));\n+\n+            // Check to see if any tasks completed exceptionally\n+            result.getNow(null);\n+        } finally {\n+            webappClassLoader.close();\n+        }\n+    }\n+\n+    private void add(WebappClassLoader webappClassLoader) throws IOException {\n+        List<JarFile> jarFiles = findJarFiles();\n+\n+        for (JarFile j : jarFiles) {\n+            try {\n+                webappClassLoader.addJar(junitJarFile.getName(), j, junitJarFile);\n+            } catch (IOException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+    }\n+\n+    private void lookup(WebappClassLoader webappClassLoader) throws Exception {\n+        for (JarFile jarFile : findJarFiles()) {\n+            for (JarEntry entry : Collections.list(jarFile.entries())) {\n+                webappClassLoader.findResource(entry.getName());\n+                // System.out.println(\"Looked up \" + resourceEntry);\n+                Thread.sleep(0, 100);", "originalCommit": "7b6ac6abee24142153a37a2792c44a8c9178b0d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc2NTcxNA==", "url": "https://github.com/payara/Payara/pull/4430#discussion_r366765714", "bodyText": "Thread.yield() causes a huge amount of false positives on the test. I imagine this is because it reduces the total time spent on this task", "author": "MattGill98", "createdAt": "2020-01-15T09:18:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjczOTcxMg=="}], "type": "inlineReview", "revised_code": null}]}