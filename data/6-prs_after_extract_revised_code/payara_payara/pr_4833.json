{"pr_number": 4833, "pr_title": "FISH-59 Payara Micro --enableRequestTracing argument not accepting values ", "pr_createdAt": "2020-08-12T10:58:35Z", "pr_url": "https://github.com/payara/Payara/pull/4833", "timeline": [{"oid": "06320aed7f2b728b7ae601fc86c17ab8543441ab", "url": "https://github.com/payara/Payara/commit/06320aed7f2b728b7ae601fc86c17ab8543441ab", "message": "FISH-59 Fix --enablerequesttracing configuration shortcut", "committedDate": "2020-08-12T10:53:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU4NDIzMQ==", "url": "https://github.com/payara/Payara/pull/4833#discussion_r470584231", "bodyText": "Looks like this can only end in true (or exception) so this isn't needed.", "author": "jbee", "createdAt": "2020-08-14T12:07:09Z", "path": "appserver/extras/payara-micro/payara-micro-core/src/main/java/fish/payara/micro/cmd/options/RequestTracingValidator.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) 2016-2020 Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.micro.cmd.options;\n+\n+import java.text.MessageFormat;\n+\n+public class RequestTracingValidator extends Validator {\n+\n+    @Override\n+    boolean validate(String optionValue) throws ValidationException {\n+        if (optionValue != null) {\n+            String[] requestTracingValues = optionValue.split(\"(?<=\\\\d)(?=\\\\D)|(?=\\\\d)(?<=\\\\D)\");\n+            // If valid, there should be no more than 2 entries\n+            if (requestTracingValues.length <= 2) {\n+                // If the first entry is a number, the second entry should be a String\n+                if (requestTracingValues[0].matches(\"\\\\d+\") &&\n+                        (requestTracingValues.length == 2 && !requestTracingValues[1].matches(\"\\\\D+\"))) {\n+                    // If there is a second entry, and it's not a String\n+                    throw new ValidationException(MessageFormat.format(\n+                            RuntimeOptions.commandlogstrings.getString(\"requestTracingIncorrect\"), optionValue));\n+                }\n+\n+                // If the first entry is a String, there shouldn't be a second entry\n+                if (requestTracingValues[0].matches(\"\\\\D+\") && (requestTracingValues.length == 2)) {\n+                    throw new ValidationException(MessageFormat.format(\n+                            RuntimeOptions.commandlogstrings.getString(\"requestTracingIncorrect\"), optionValue));\n+                }\n+            } else {\n+                throw new ValidationException(MessageFormat.format(\n+                        RuntimeOptions.commandlogstrings.getString(\"requestTracingIncorrect\"), optionValue));\n+            }\n+\n+            return true;", "originalCommit": "06320aed7f2b728b7ae601fc86c17ab8543441ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a101c2b4078a8aa7178a135fe6e33e7c4e2cb191", "chunk": "diff --git a/appserver/extras/payara-micro/payara-micro-core/src/main/java/fish/payara/micro/cmd/options/RequestTracingValidator.java b/appserver/extras/payara-micro/payara-micro-core/src/main/java/fish/payara/micro/cmd/options/RequestTracingValidator.java\nindex 46ebad6cb4..8c5ba4671e 100644\n--- a/appserver/extras/payara-micro/payara-micro-core/src/main/java/fish/payara/micro/cmd/options/RequestTracingValidator.java\n+++ b/appserver/extras/payara-micro/payara-micro-core/src/main/java/fish/payara/micro/cmd/options/RequestTracingValidator.java\n\n@@ -66,8 +66,6 @@ public class RequestTracingValidator extends Validator {\n                 throw new ValidationException(MessageFormat.format(\n                         RuntimeOptions.commandlogstrings.getString(\"requestTracingIncorrect\"), optionValue));\n             }\n-\n-            return true;\n         }\n \n         return true;\n"}}, {"oid": "a101c2b4078a8aa7178a135fe6e33e7c4e2cb191", "url": "https://github.com/payara/Payara/commit/a101c2b4078a8aa7178a135fe6e33e7c4e2cb191", "message": "FISH-59 Remove redundant return", "committedDate": "2020-08-18T11:52:04Z", "type": "commit"}]}