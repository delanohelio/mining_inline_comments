{"pr_number": 4548, "pr_title": "CUSTCOM-12 Fixed node configuration in admin UI", "pr_createdAt": "2020-03-04T11:28:53Z", "pr_url": "https://github.com/payara/Payara/pull/4548", "timeline": [{"oid": "90de770fc2f73bde17f84a2826334384f2a26783", "url": "https://github.com/payara/Payara/commit/90de770fc2f73bde17f84a2826334384f2a26783", "message": "CUSTCOM-12 Trivial fixes, formatting and licenses", "committedDate": "2020-03-04T11:31:35Z", "type": "forcePushed"}, {"oid": "28366141c6ed30a8c970d47b587a00eb44da4648", "url": "https://github.com/payara/Payara/commit/28366141c6ed30a8c970d47b587a00eb44da4648", "message": "CUSTCOM-12 Trivial fixes, formatting and licenses", "committedDate": "2020-03-18T13:51:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUzNTEzMg==", "url": "https://github.com/payara/Payara/pull/4548#discussion_r395535132", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Param(name = \"sshauthtype\", optional=true)\n          \n          \n            \n                @Param(name = \"sshauthtype\", optional = true)\n          \n      \n    \n    \n  \n\n\u0ca0_\u0ca0", "author": "Pandrex247", "createdAt": "2020-03-20T09:59:23Z", "path": "nucleus/cluster/admin/src/main/java/com/sun/enterprise/v3/admin/cluster/UpdateNodeSshCommand.java", "diffHunk": "@@ -72,6 +73,9 @@\n     private String sshportInSubClass;\n     @Param(name = \"sshuser\", optional = true)\n     private String sshuserInSubClass;\n+    /** {@link SshAuthType} name */\n+    @Param(name = \"sshauthtype\", optional=true)", "originalCommit": "13adba24347055d1bd6b63a1c204fb6c92a28d54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU0Mjc3Nw==", "url": "https://github.com/payara/Payara/pull/4548#discussion_r395542777", "bodyText": "Copy paste effect from another class \ud83d\udc83\nI agree :-)", "author": "dmatej", "createdAt": "2020-03-20T10:15:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUzNTEzMg=="}], "type": "inlineReview", "revised_code": {"commit": "34ca25ecba5ff8913d6212a5cf550c6f15f7fa8a", "chunk": "diff --git a/nucleus/cluster/admin/src/main/java/com/sun/enterprise/v3/admin/cluster/UpdateNodeSshCommand.java b/nucleus/cluster/admin/src/main/java/com/sun/enterprise/v3/admin/cluster/UpdateNodeSshCommand.java\nindex 86bc82b46d..3b3a5d1759 100644\n--- a/nucleus/cluster/admin/src/main/java/com/sun/enterprise/v3/admin/cluster/UpdateNodeSshCommand.java\n+++ b/nucleus/cluster/admin/src/main/java/com/sun/enterprise/v3/admin/cluster/UpdateNodeSshCommand.java\n\n@@ -69,12 +69,13 @@ import org.jvnet.hk2.annotations.Service;\n         })\n })\n public class UpdateNodeSshCommand extends UpdateNodeRemoteCommand {\n+\n     @Param(name = \"sshport\", optional = true)\n     private String sshportInSubClass;\n     @Param(name = \"sshuser\", optional = true)\n     private String sshuserInSubClass;\n     /** {@link SshAuthType} name */\n-    @Param(name = \"sshauthtype\", optional=true)\n+    @Param(name = \"sshauthtype\", optional = true)\n     private String sshAuthTypeInSubClass;\n     @Param(name = \"sshkeyfile\", optional = true)\n     private String sshkeyfileInSubClass;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUzNTQwNQ==", "url": "https://github.com/payara/Payara/pull/4548#discussion_r395535405", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            parameters.insert(NodeUtils.PARAM_SSHKEYPASSPHRASE, //\n          \n          \n            \n                            parameters.insert(NodeUtils.PARAM_SSHKEYPASSPHRASE,", "author": "Pandrex247", "createdAt": "2020-03-20T09:59:56Z", "path": "nucleus/cluster/admin/src/main/java/com/sun/enterprise/v3/admin/cluster/UpdateNodeRemoteCommand.java", "diffHunk": "@@ -203,21 +203,28 @@ private ParameterMap createValidationParameters(final Node node) {\n \n         final SshAuth ssha = sshc.getSshAuth();\n         parameters.insert(NodeUtils.PARAM_REMOTEUSER, remoteUser, getSupplier(ssha, ssha::getUserName));\n-\n-        if (sshkeyfile == null && remotepassword == null) {\n-            // use previous values if they are set\n-            parameters.insert(NodeUtils.PARAM_SSHPASSWORD, null, getSupplier(ssha, ssha::getPassword));\n-            parameters.insert(NodeUtils.PARAM_SSHKEYFILE, null, getSupplier(ssha, ssha::getKeyfile));\n-            parameters.insert(NodeUtils.PARAM_SSHKEYPASSPHRASE, null, getSupplier(ssha, ssha::getKeyPassphrase));\n-        } else if (sshkeyfile == null) {\n-            // keyfile is preferred over password.\n-            // if keyfile is not set, configure password.\n-            parameters.insert(NodeUtils.PARAM_SSHPASSWORD, remotepassword, getSupplier(ssha, ssha::getPassword));\n+        parameters.insert(NodeUtils.PARAM_SSHAUTHTYPE, sshAuthType, getSupplier(ssha, () -> null));\n+\n+        if (sshAuthType == null) {\n+            if (sshkeyfile == null && remotepassword == null) {\n+                parameters.insert(NodeUtils.PARAM_SSHPASSWORD, null, getSupplier(ssha, ssha::getPassword));\n+                parameters.insert(NodeUtils.PARAM_SSHKEYFILE, null, getSupplier(ssha, ssha::getKeyfile));\n+                parameters.insert(NodeUtils.PARAM_SSHKEYPASSPHRASE, null, getSupplier(ssha, ssha::getKeyPassphrase));\n+            } else if (remotepassword != null) {\n+                parameters.insert(NodeUtils.PARAM_SSHPASSWORD, remotepassword, getSupplier(ssha, ssha::getPassword));\n+            } else {\n+                parameters.insert(NodeUtils.PARAM_SSHKEYFILE, sshkeyfile, getSupplier(ssha, ssha::getKeyfile));\n+                parameters.insert(NodeUtils.PARAM_SSHKEYPASSPHRASE, //", "originalCommit": "13adba24347055d1bd6b63a1c204fb6c92a28d54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU2OTAxOQ==", "url": "https://github.com/payara/Payara/pull/4548#discussion_r395569019", "bodyText": "Disagree. This prevents random reformatting to less readable code and it is still less annoying than using // @formatter:off (supported by Eclipse and Idea, but ugly)", "author": "dmatej", "createdAt": "2020-03-20T11:10:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUzNTQwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU4MTUzMA==", "url": "https://github.com/payara/Payara/pull/4548#discussion_r395581530", "bodyText": "Better to properly configure formatter than this kind of hacky comments. We used to do this too, but it is just a pain in the... if you have to refactor this kind of \"prettyfied\" code.", "author": "sgflt", "createdAt": "2020-03-20T11:38:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUzNTQwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYxNjA1OQ==", "url": "https://github.com/payara/Payara/pull/4548#discussion_r395616059", "bodyText": "Some formatting cannot be done automatically. I don't see any possible issue with refactoring.\nI assume you only configured your editor to NOT formatting. Or tell me more, better on chat :)", "author": "dmatej", "createdAt": "2020-03-20T12:53:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUzNTQwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYyNDg0OA==", "url": "https://github.com/payara/Payara/pull/4548#discussion_r395624848", "bodyText": "Compromise: static imports -> no need for formatting.", "author": "dmatej", "createdAt": "2020-03-20T13:10:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUzNTQwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "34ca25ecba5ff8913d6212a5cf550c6f15f7fa8a", "chunk": "diff --git a/nucleus/cluster/admin/src/main/java/com/sun/enterprise/v3/admin/cluster/UpdateNodeRemoteCommand.java b/nucleus/cluster/admin/src/main/java/com/sun/enterprise/v3/admin/cluster/UpdateNodeRemoteCommand.java\nindex dc108d934e..ae4c1c02b9 100644\n--- a/nucleus/cluster/admin/src/main/java/com/sun/enterprise/v3/admin/cluster/UpdateNodeRemoteCommand.java\n+++ b/nucleus/cluster/admin/src/main/java/com/sun/enterprise/v3/admin/cluster/UpdateNodeRemoteCommand.java\n\n@@ -192,38 +210,36 @@ public abstract class UpdateNodeRemoteCommand implements AdminCommand  {\n     private ParameterMap createValidationParameters(final Node node) {\n         final ParameterMap parameters = new ParameterMap();\n         parameters.insert(\"DEFAULT\", name);\n-        parameters.insert(NodeUtils.PARAM_TYPE, getType().toString());\n-        parameters.insert(NodeUtils.PARAM_NODEHOST, nodehost, node.getNodeHost());\n-        parameters.insert(NodeUtils.PARAM_INSTALLDIR, installdir, node.getInstallDir());\n-        parameters.insert(NodeUtils.PARAM_NODEDIR, nodedir, node.getNodeDir());\n-        parameters.insert(NodeUtils.PARAM_WINDOWSDOMAINNAME, windowsdomain, node.getWindowsDomain());\n+        parameters.insert(PARAM_TYPE, getType().toString());\n+        parameters.insert(PARAM_NODEHOST, nodehost, node.getNodeHost());\n+        parameters.insert(PARAM_INSTALLDIR, installdir, node.getInstallDir());\n+        parameters.insert(PARAM_NODEDIR, nodedir, node.getNodeDir());\n+        parameters.insert(PARAM_WINDOWSDOMAINNAME, windowsdomain, node.getWindowsDomain());\n \n         final SshConnector sshc = node.getSshConnector();\n-        parameters.insert(NodeUtils.PARAM_REMOTEPORT, remotePort, getSupplier(sshc, sshc::getSshPort));\n+        parameters.insert(PARAM_REMOTEPORT, remotePort, getSupplier(sshc, sshc::getSshPort));\n \n         final SshAuth ssha = sshc.getSshAuth();\n-        parameters.insert(NodeUtils.PARAM_REMOTEUSER, remoteUser, getSupplier(ssha, ssha::getUserName));\n-        parameters.insert(NodeUtils.PARAM_SSHAUTHTYPE, sshAuthType, getSupplier(ssha, () -> null));\n+        parameters.insert(PARAM_REMOTEUSER, remoteUser, getSupplier(ssha, ssha::getUserName));\n+        parameters.insert(PARAM_SSHAUTHTYPE, sshAuthType, getSupplier(ssha, () -> null));\n \n         if (sshAuthType == null) {\n             if (sshkeyfile == null && remotepassword == null) {\n-                parameters.insert(NodeUtils.PARAM_SSHPASSWORD, null, getSupplier(ssha, ssha::getPassword));\n-                parameters.insert(NodeUtils.PARAM_SSHKEYFILE, null, getSupplier(ssha, ssha::getKeyfile));\n-                parameters.insert(NodeUtils.PARAM_SSHKEYPASSPHRASE, null, getSupplier(ssha, ssha::getKeyPassphrase));\n+                parameters.insert(PARAM_SSHPASSWORD, null, getSupplier(ssha, ssha::getPassword));\n+                parameters.insert(PARAM_SSHKEYFILE, null, getSupplier(ssha, ssha::getKeyfile));\n+                parameters.insert(PARAM_SSHKEYPASSPHRASE, null, getSupplier(ssha, ssha::getKeyPassphrase));\n             } else if (remotepassword != null) {\n-                parameters.insert(NodeUtils.PARAM_SSHPASSWORD, remotepassword, getSupplier(ssha, ssha::getPassword));\n+                parameters.insert(PARAM_SSHPASSWORD, remotepassword, getSupplier(ssha, ssha::getPassword));\n             } else {\n-                parameters.insert(NodeUtils.PARAM_SSHKEYFILE, sshkeyfile, getSupplier(ssha, ssha::getKeyfile));\n-                parameters.insert(NodeUtils.PARAM_SSHKEYPASSPHRASE, //\n-                    sshkeypassphrase, getSupplier(ssha, ssha::getKeyPassphrase));\n+                parameters.insert(PARAM_SSHKEYFILE, sshkeyfile, getSupplier(ssha, ssha::getKeyfile));\n+                parameters.insert(PARAM_SSHKEYPASSPHRASE, sshkeypassphrase, getSupplier(ssha, ssha::getKeyPassphrase));\n             }\n         } else {\n             if (SshAuthType.KEY.name().equals(sshAuthType)) {\n-                parameters.insert(NodeUtils.PARAM_SSHKEYFILE, sshkeyfile, getSupplier(ssha, ssha::getKeyfile));\n-                parameters.insert(NodeUtils.PARAM_SSHKEYPASSPHRASE, //\n-                    sshkeypassphrase, getSupplier(ssha, ssha::getKeyPassphrase));\n+                parameters.insert(PARAM_SSHKEYFILE, sshkeyfile, getSupplier(ssha, ssha::getKeyfile));\n+                parameters.insert(PARAM_SSHKEYPASSPHRASE, sshkeypassphrase, getSupplier(ssha, ssha::getKeyPassphrase));\n             } else if (SshAuthType.PASSWORD.name().equals(sshAuthType)) {\n-                parameters.insert(NodeUtils.PARAM_SSHPASSWORD, remotepassword, getSupplier(ssha, ssha::getPassword));\n+                parameters.insert(PARAM_SSHPASSWORD, remotepassword, getSupplier(ssha, ssha::getPassword));\n             }\n         }\n         return parameters;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUzNTQ4Nw==", "url": "https://github.com/payara/Payara/pull/4548#discussion_r395535487", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            parameters.insert(NodeUtils.PARAM_SSHKEYPASSPHRASE, //\n          \n          \n            \n                            parameters.insert(NodeUtils.PARAM_SSHKEYPASSPHRASE,", "author": "Pandrex247", "createdAt": "2020-03-20T10:00:07Z", "path": "nucleus/cluster/admin/src/main/java/com/sun/enterprise/v3/admin/cluster/UpdateNodeRemoteCommand.java", "diffHunk": "@@ -203,21 +203,28 @@ private ParameterMap createValidationParameters(final Node node) {\n \n         final SshAuth ssha = sshc.getSshAuth();\n         parameters.insert(NodeUtils.PARAM_REMOTEUSER, remoteUser, getSupplier(ssha, ssha::getUserName));\n-\n-        if (sshkeyfile == null && remotepassword == null) {\n-            // use previous values if they are set\n-            parameters.insert(NodeUtils.PARAM_SSHPASSWORD, null, getSupplier(ssha, ssha::getPassword));\n-            parameters.insert(NodeUtils.PARAM_SSHKEYFILE, null, getSupplier(ssha, ssha::getKeyfile));\n-            parameters.insert(NodeUtils.PARAM_SSHKEYPASSPHRASE, null, getSupplier(ssha, ssha::getKeyPassphrase));\n-        } else if (sshkeyfile == null) {\n-            // keyfile is preferred over password.\n-            // if keyfile is not set, configure password.\n-            parameters.insert(NodeUtils.PARAM_SSHPASSWORD, remotepassword, getSupplier(ssha, ssha::getPassword));\n+        parameters.insert(NodeUtils.PARAM_SSHAUTHTYPE, sshAuthType, getSupplier(ssha, () -> null));\n+\n+        if (sshAuthType == null) {\n+            if (sshkeyfile == null && remotepassword == null) {\n+                parameters.insert(NodeUtils.PARAM_SSHPASSWORD, null, getSupplier(ssha, ssha::getPassword));\n+                parameters.insert(NodeUtils.PARAM_SSHKEYFILE, null, getSupplier(ssha, ssha::getKeyfile));\n+                parameters.insert(NodeUtils.PARAM_SSHKEYPASSPHRASE, null, getSupplier(ssha, ssha::getKeyPassphrase));\n+            } else if (remotepassword != null) {\n+                parameters.insert(NodeUtils.PARAM_SSHPASSWORD, remotepassword, getSupplier(ssha, ssha::getPassword));\n+            } else {\n+                parameters.insert(NodeUtils.PARAM_SSHKEYFILE, sshkeyfile, getSupplier(ssha, ssha::getKeyfile));\n+                parameters.insert(NodeUtils.PARAM_SSHKEYPASSPHRASE, //\n+                    sshkeypassphrase, getSupplier(ssha, ssha::getKeyPassphrase));\n+            }\n         } else {\n-            // if keyfile is set, don't configure password.\n-            parameters.insert(NodeUtils.PARAM_SSHKEYFILE, sshkeyfile, getSupplier(ssha, ssha::getKeyfile));\n-            parameters.insert(NodeUtils.PARAM_SSHKEYPASSPHRASE, //\n-                sshkeypassphrase, getSupplier(ssha, ssha::getKeyPassphrase));\n+            if (SshAuthType.KEY.name().equals(sshAuthType)) {\n+                parameters.insert(NodeUtils.PARAM_SSHKEYFILE, sshkeyfile, getSupplier(ssha, ssha::getKeyfile));\n+                parameters.insert(NodeUtils.PARAM_SSHKEYPASSPHRASE, //", "originalCommit": "13adba24347055d1bd6b63a1c204fb6c92a28d54", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "34ca25ecba5ff8913d6212a5cf550c6f15f7fa8a", "chunk": "diff --git a/nucleus/cluster/admin/src/main/java/com/sun/enterprise/v3/admin/cluster/UpdateNodeRemoteCommand.java b/nucleus/cluster/admin/src/main/java/com/sun/enterprise/v3/admin/cluster/UpdateNodeRemoteCommand.java\nindex dc108d934e..ae4c1c02b9 100644\n--- a/nucleus/cluster/admin/src/main/java/com/sun/enterprise/v3/admin/cluster/UpdateNodeRemoteCommand.java\n+++ b/nucleus/cluster/admin/src/main/java/com/sun/enterprise/v3/admin/cluster/UpdateNodeRemoteCommand.java\n\n@@ -192,38 +210,36 @@ public abstract class UpdateNodeRemoteCommand implements AdminCommand  {\n     private ParameterMap createValidationParameters(final Node node) {\n         final ParameterMap parameters = new ParameterMap();\n         parameters.insert(\"DEFAULT\", name);\n-        parameters.insert(NodeUtils.PARAM_TYPE, getType().toString());\n-        parameters.insert(NodeUtils.PARAM_NODEHOST, nodehost, node.getNodeHost());\n-        parameters.insert(NodeUtils.PARAM_INSTALLDIR, installdir, node.getInstallDir());\n-        parameters.insert(NodeUtils.PARAM_NODEDIR, nodedir, node.getNodeDir());\n-        parameters.insert(NodeUtils.PARAM_WINDOWSDOMAINNAME, windowsdomain, node.getWindowsDomain());\n+        parameters.insert(PARAM_TYPE, getType().toString());\n+        parameters.insert(PARAM_NODEHOST, nodehost, node.getNodeHost());\n+        parameters.insert(PARAM_INSTALLDIR, installdir, node.getInstallDir());\n+        parameters.insert(PARAM_NODEDIR, nodedir, node.getNodeDir());\n+        parameters.insert(PARAM_WINDOWSDOMAINNAME, windowsdomain, node.getWindowsDomain());\n \n         final SshConnector sshc = node.getSshConnector();\n-        parameters.insert(NodeUtils.PARAM_REMOTEPORT, remotePort, getSupplier(sshc, sshc::getSshPort));\n+        parameters.insert(PARAM_REMOTEPORT, remotePort, getSupplier(sshc, sshc::getSshPort));\n \n         final SshAuth ssha = sshc.getSshAuth();\n-        parameters.insert(NodeUtils.PARAM_REMOTEUSER, remoteUser, getSupplier(ssha, ssha::getUserName));\n-        parameters.insert(NodeUtils.PARAM_SSHAUTHTYPE, sshAuthType, getSupplier(ssha, () -> null));\n+        parameters.insert(PARAM_REMOTEUSER, remoteUser, getSupplier(ssha, ssha::getUserName));\n+        parameters.insert(PARAM_SSHAUTHTYPE, sshAuthType, getSupplier(ssha, () -> null));\n \n         if (sshAuthType == null) {\n             if (sshkeyfile == null && remotepassword == null) {\n-                parameters.insert(NodeUtils.PARAM_SSHPASSWORD, null, getSupplier(ssha, ssha::getPassword));\n-                parameters.insert(NodeUtils.PARAM_SSHKEYFILE, null, getSupplier(ssha, ssha::getKeyfile));\n-                parameters.insert(NodeUtils.PARAM_SSHKEYPASSPHRASE, null, getSupplier(ssha, ssha::getKeyPassphrase));\n+                parameters.insert(PARAM_SSHPASSWORD, null, getSupplier(ssha, ssha::getPassword));\n+                parameters.insert(PARAM_SSHKEYFILE, null, getSupplier(ssha, ssha::getKeyfile));\n+                parameters.insert(PARAM_SSHKEYPASSPHRASE, null, getSupplier(ssha, ssha::getKeyPassphrase));\n             } else if (remotepassword != null) {\n-                parameters.insert(NodeUtils.PARAM_SSHPASSWORD, remotepassword, getSupplier(ssha, ssha::getPassword));\n+                parameters.insert(PARAM_SSHPASSWORD, remotepassword, getSupplier(ssha, ssha::getPassword));\n             } else {\n-                parameters.insert(NodeUtils.PARAM_SSHKEYFILE, sshkeyfile, getSupplier(ssha, ssha::getKeyfile));\n-                parameters.insert(NodeUtils.PARAM_SSHKEYPASSPHRASE, //\n-                    sshkeypassphrase, getSupplier(ssha, ssha::getKeyPassphrase));\n+                parameters.insert(PARAM_SSHKEYFILE, sshkeyfile, getSupplier(ssha, ssha::getKeyfile));\n+                parameters.insert(PARAM_SSHKEYPASSPHRASE, sshkeypassphrase, getSupplier(ssha, ssha::getKeyPassphrase));\n             }\n         } else {\n             if (SshAuthType.KEY.name().equals(sshAuthType)) {\n-                parameters.insert(NodeUtils.PARAM_SSHKEYFILE, sshkeyfile, getSupplier(ssha, ssha::getKeyfile));\n-                parameters.insert(NodeUtils.PARAM_SSHKEYPASSPHRASE, //\n-                    sshkeypassphrase, getSupplier(ssha, ssha::getKeyPassphrase));\n+                parameters.insert(PARAM_SSHKEYFILE, sshkeyfile, getSupplier(ssha, ssha::getKeyfile));\n+                parameters.insert(PARAM_SSHKEYPASSPHRASE, sshkeypassphrase, getSupplier(ssha, ssha::getKeyPassphrase));\n             } else if (SshAuthType.PASSWORD.name().equals(sshAuthType)) {\n-                parameters.insert(NodeUtils.PARAM_SSHPASSWORD, remotepassword, getSupplier(ssha, ssha::getPassword));\n+                parameters.insert(PARAM_SSHPASSWORD, remotepassword, getSupplier(ssha, ssha::getPassword));\n             }\n         }\n         return parameters;\n"}}, {"oid": "34ca25ecba5ff8913d6212a5cf550c6f15f7fa8a", "url": "https://github.com/payara/Payara/commit/34ca25ecba5ff8913d6212a5cf550c6f15f7fa8a", "message": "CUSTCOM-12 Fixed SSH node configuration in UI\n\n- created enum SshAuthType (KEY/PASSWORD) to distinguish which variant should\n  be saved if we don't set neither password nor keyfile\n- new parameter sshauthtype to allow switching with defaults", "committedDate": "2020-03-20T13:09:24Z", "type": "forcePushed"}, {"oid": "944d7cd6a9e87ff3a9762a05ce29d538460600fb", "url": "https://github.com/payara/Payara/commit/944d7cd6a9e87ff3a9762a05ce29d538460600fb", "message": "CUSTCOM-12 Added some documentation for sshauthtype parameter", "committedDate": "2020-03-21T19:38:16Z", "type": "forcePushed"}, {"oid": "b012860eb855f13f0c842309f7f10095cc7a4b6d", "url": "https://github.com/payara/Payara/commit/b012860eb855f13f0c842309f7f10095cc7a4b6d", "message": "CUSTCOM-12 Fixed GUI editation of Node settings\n\n- removed \"random\" settings of psSelected/winPsSelected\n- removed configuration of psSelect from convertNodePswd\n- created presetNodeAuthSelectBox\n- enabled autocomplete, without it was configuration hostile except password,\n  which were still remembered by Firefox\n- fixed nodeButtons.inc - password/keystore gui\n- fixed UpdateNodeCommand\n  - password/keystore gui, old version used previous version\n  - reimplemented validation\n- renamed PARAM_REMOTEPASSWORD to PARAM_SSHPASSWORD\n- ParameterMap - implemented additional methods for better readibility", "committedDate": "2020-03-21T19:38:16Z", "type": "commit"}, {"oid": "e6978f30d9e0787ba4bf9390d9fb24d2f318bc64", "url": "https://github.com/payara/Payara/commit/e6978f30d9e0787ba4bf9390d9fb24d2f318bc64", "message": "CUSTCOM-12 Fixed error logging and showing errors to user in GUI\n\n- report classes have toString now (useful for debugging and logging)\n- GuiUtil - reduced copy and paste and using sane filtering\n- RestUtil2 + RestApiHandlers\n  - fixed processing error messages using new method in GuiUtil\n  - expecting JSON, but it will not fail if the response would be unparseable,\n    it would only print error to log.", "committedDate": "2020-03-21T19:38:16Z", "type": "commit"}, {"oid": "eb7e2e91f8ac6e0264b6406ed95c7f84cf40d9ae", "url": "https://github.com/payara/Payara/commit/eb7e2e91f8ac6e0264b6406ed95c7f84cf40d9ae", "message": "CUSTCOM-12 Trivial fixes, formatting and licenses", "committedDate": "2020-03-21T19:38:16Z", "type": "commit"}, {"oid": "754be0e2b1bd98039e0ddf0f7968187f8fc140e0", "url": "https://github.com/payara/Payara/commit/754be0e2b1bd98039e0ddf0f7968187f8fc140e0", "message": "CUSTCOM-12 Fixed SSH node configuration in UI\n\n- created enum SshAuthType (KEY/PASSWORD) to distinguish which variant should\n  be saved if we don't set neither password nor keyfile\n- new parameter sshauthtype to allow switching with defaults", "committedDate": "2020-03-21T19:38:16Z", "type": "commit"}, {"oid": "4f9c432c5c8a78cee148e3276fa057ebe4647f3b", "url": "https://github.com/payara/Payara/commit/4f9c432c5c8a78cee148e3276fa057ebe4647f3b", "message": "CUSTCOM-12 ConfigSupport logging, removed DcomUtils unused imports", "committedDate": "2020-03-21T19:38:16Z", "type": "commit"}, {"oid": "944d7cd6a9e87ff3a9762a05ce29d538460600fb", "url": "https://github.com/payara/Payara/commit/944d7cd6a9e87ff3a9762a05ce29d538460600fb", "message": "CUSTCOM-12 Added some documentation for sshauthtype parameter", "committedDate": "2020-03-21T19:38:16Z", "type": "commit"}, {"oid": "5922b6630567e34a9b66762f4dd53c959401ba81", "url": "https://github.com/payara/Payara/commit/5922b6630567e34a9b66762f4dd53c959401ba81", "message": "CUSTCOM-12 Fixed \"service has been unbound\" when updating sshuser\n\n- seems that when we are updating sshauth element, setSshConnector must be\n  already called", "committedDate": "2020-03-23T14:44:29Z", "type": "commit"}]}