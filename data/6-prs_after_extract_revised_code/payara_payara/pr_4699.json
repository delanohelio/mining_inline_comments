{"pr_number": 4699, "pr_title": "CUSTCOM-14 Improvements in stop-domain process", "pr_createdAt": "2020-06-04T14:42:25Z", "pr_url": "https://github.com/payara/Payara/pull/4699", "timeline": [{"oid": "3207e1130e128102d148df3b2e7a9b9b98ae5452", "url": "https://github.com/payara/Payara/commit/3207e1130e128102d148df3b2e7a9b9b98ae5452", "message": "CUSTCOM-14 Improvements in stop-domain process", "committedDate": "2020-06-04T14:15:02Z", "type": "commit"}, {"oid": "a32d0a75bbedfba50b1650b180bce0c79b002da0", "url": "https://github.com/payara/Payara/commit/a32d0a75bbedfba50b1650b180bce0c79b002da0", "message": "Removed debugging code", "committedDate": "2020-06-04T14:25:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM5Njc3Ng==", "url": "https://github.com/payara/Payara/pull/4699#discussion_r435396776", "bodyText": "Doesn't this change make the TODO comment obsolete?", "author": "svendiedrichsen", "createdAt": "2020-06-04T16:38:34Z", "path": "nucleus/admin/server-mgmt/src/main/java/com/sun/enterprise/admin/servermgmt/cli/StopDomainCommand.java", "diffHunk": "@@ -98,7 +99,7 @@ protected void initDomain() throws CommandException {\n         // TODO Byron said in April 2013 that we should probably just check if\n         // NetUtils says that the getHost() --> isThisMe() rather than merely\n         // checking for the magic \"localhost\" string.  Too risky to fool with it today.\n-        if (programOpts.getHost().equals(CLIConstants.DEFAULT_HOSTNAME)) {\n+        if (NetUtils.isThisHostLocal(programOpts.getHost())) {", "originalCommit": "a32d0a75bbedfba50b1650b180bce0c79b002da0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b9a52c2c53767f5a22f459052a6011f353da4ca2", "chunk": "diff --git a/nucleus/admin/server-mgmt/src/main/java/com/sun/enterprise/admin/servermgmt/cli/StopDomainCommand.java b/nucleus/admin/server-mgmt/src/main/java/com/sun/enterprise/admin/servermgmt/cli/StopDomainCommand.java\nindex 6ee81cec85..339012af4b 100644\n--- a/nucleus/admin/server-mgmt/src/main/java/com/sun/enterprise/admin/servermgmt/cli/StopDomainCommand.java\n+++ b/nucleus/admin/server-mgmt/src/main/java/com/sun/enterprise/admin/servermgmt/cli/StopDomainCommand.java\n\n@@ -96,9 +96,6 @@ public class StopDomainCommand extends LocalDomainCommand {\n     protected void initDomain() throws CommandException {\n         // only initialize local domain information if it's a local operation\n \n-        // TODO Byron said in April 2013 that we should probably just check if\n-        // NetUtils says that the getHost() --> isThisMe() rather than merely\n-        // checking for the magic \"localhost\" string.  Too risky to fool with it today.\n         if (NetUtils.isThisHostLocal(programOpts.getHost())) {\n             super.initDomain();\n         } else if (userArgDomainName != null) {  // remote case\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc5MTgxNQ==", "url": "https://github.com/payara/Payara/pull/4699#discussion_r435791815", "bodyText": "This seems like a stronger way of checking the startup state of the server - why has this been removed?", "author": "MattGill98", "createdAt": "2020-06-05T09:10:04Z", "path": "nucleus/core/kernel/src/main/java/com/sun/enterprise/v3/server/AppServerStartup.java", "diffHunk": "@@ -222,18 +220,10 @@ public synchronized void start() {\n             // See issue #5596 to know why we set context CL as common CL.\n             Thread.currentThread().setContextClassLoader(\n                     commonCLS.getCommonClassLoader());\n-            if (state.compareAndSet(State.INITIAL, State.STARTING) || state.compareAndSet(State.SHUT_DOWN, State.STARTING)) {", "originalCommit": "a32d0a75bbedfba50b1650b180bce0c79b002da0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkyMzg1OQ==", "url": "https://github.com/payara/Payara/pull/4699#discussion_r435923859", "bodyText": "I messed up my commit history and mistakenly removed the previous commit made by Patrick. I will fix it and update the PR. Thanks for pointing out", "author": "MeroRai", "createdAt": "2020-06-05T13:33:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc5MTgxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "b9a52c2c53767f5a22f459052a6011f353da4ca2", "chunk": "diff --git a/nucleus/core/kernel/src/main/java/com/sun/enterprise/v3/server/AppServerStartup.java b/nucleus/core/kernel/src/main/java/com/sun/enterprise/v3/server/AppServerStartup.java\nindex ef15dbda1a..fe71486149 100644\n--- a/nucleus/core/kernel/src/main/java/com/sun/enterprise/v3/server/AppServerStartup.java\n+++ b/nucleus/core/kernel/src/main/java/com/sun/enterprise/v3/server/AppServerStartup.java\n\n@@ -220,10 +222,18 @@ public class AppServerStartup implements PostConstruct, ModuleStartup {\n             // See issue #5596 to know why we set context CL as common CL.\n             Thread.currentThread().setContextClassLoader(\n                     commonCLS.getCommonClassLoader());\n-            doStart();\n+            if (state.compareAndSet(State.INITIAL, State.STARTING) || state.compareAndSet(State.SHUT_DOWN, State.STARTING)) {\n+                doStart();\n+            } else {\n+                throw new GlassFishException(\"Server cannot start, because it's in state \"+state.get());\n+            }\n         } catch (GlassFishException ex) {\n             throw new RuntimeException (ex);\n         } finally {\n+            if (!state.compareAndSet(State.STARTING, State.STARTED)) {\n+                // the state is no longer STARTING, therefore it has to be SHUTDOWN_REQUESTED\n+                stop();\n+            }\n             // reset the context classloader. See issue GLASSFISH-15775\n             Thread.currentThread().setContextClassLoader(origCL);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc5MjIxOQ==", "url": "https://github.com/payara/Payara/pull/4699#discussion_r435792219", "bodyText": "Who's Jerome? \ud83d\ude02", "author": "MattGill98", "createdAt": "2020-06-05T09:10:42Z", "path": "nucleus/core/kernel/src/main/java/com/sun/enterprise/v3/server/AppServerStartup.java", "diffHunk": "@@ -475,23 +466,31 @@ public static void printModuleStatus(ModulesRegistry registry, Level level) {\n         logger.log(level, sb.toString());\n     }\n \n+    // TODO(Sahoo): Revisit this method after discussing with Jerome.", "originalCommit": "a32d0a75bbedfba50b1650b180bce0c79b002da0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkyNDAyNQ==", "url": "https://github.com/payara/Payara/pull/4699#discussion_r435924025", "bodyText": "Read the above comment", "author": "MeroRai", "createdAt": "2020-06-05T13:34:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc5MjIxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "b9a52c2c53767f5a22f459052a6011f353da4ca2", "chunk": "diff --git a/nucleus/core/kernel/src/main/java/com/sun/enterprise/v3/server/AppServerStartup.java b/nucleus/core/kernel/src/main/java/com/sun/enterprise/v3/server/AppServerStartup.java\nindex ef15dbda1a..fe71486149 100644\n--- a/nucleus/core/kernel/src/main/java/com/sun/enterprise/v3/server/AppServerStartup.java\n+++ b/nucleus/core/kernel/src/main/java/com/sun/enterprise/v3/server/AppServerStartup.java\n\n@@ -466,31 +475,23 @@ public class AppServerStartup implements PostConstruct, ModuleStartup {\n         logger.log(level, sb.toString());\n     }\n \n-    // TODO(Sahoo): Revisit this method after discussing with Jerome.\n     private void shutdown() {\n-        CommandRunner runner = commandRunnerProvider.get();\n-\n-        if (runner!=null) {\n-           final ParameterMap params = new ParameterMap();\n-            // By default we don't want to shutdown forcefully, as that will cause the VM to exit and that's not\n-            // a very good behavior for a code known to be embedded in other processes.\n-        final boolean noForcedShutdown =\n-                Boolean.parseBoolean(context.getArguments().getProperty(\n-                        com.sun.enterprise.glassfish.bootstrap.Constants.NO_FORCED_SHUTDOWN, \"true\"));\n-            if (noForcedShutdown) {\n-                params.set(\"force\", \"false\");\n-            }\n-            final InternalSystemAdministrator kernelIdentity = locator.getService(InternalSystemAdministrator.class);\n-            if (env.isDas()) {\n-                runner.getCommandInvocation(\"stop-domain\", new DoNothingActionReporter(), kernelIdentity.getSubject()).parameters(params).execute();\n-            } else {\n-                runner.getCommandInvocation(\"_stop-instance\", new DoNothingActionReporter(), kernelIdentity.getSubject()).parameters(params).execute();\n-            }\n+        if (    state.compareAndSet(State.STARTING, State.SHUTDOWN_REQUESTED) ||\n+                state.compareAndSet(State.INITIAL, State.SHUT_DOWN)) {\n+            // SHUTDOWN_REQUESTED is handled at end of START\n+            // INITIAL --> SHUT_DOWN is trivial case of shutdown before we started\n+            return;\n+        }\n+        // state doesn't change on SHUT_DOWN, SHUTTING_DOWN and SHUTDOWN_REQUESTED\n+        if (state.compareAndSet(State.STARTED, State.SHUTDOWN_REQUESTED)) {\n+            // directly stop only if server already completed startup sequence\n+            stop();\n         }\n     }\n \n-    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n+    @Override\n     public synchronized void stop() {\n+        state.set(State.SHUTTING_DOWN);\n         if(env.getStatus() == ServerEnvironment.Status.stopped) {\n             // During shutdown because of shutdown hooks, we can be stopped multiple times.\n             // In such a case, ignore any subsequent stop operations.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk3NTMzMQ==", "url": "https://github.com/payara/Payara/pull/4699#discussion_r435975331", "bodyText": "Is there a parameter AppServerActivator missing? At least you have added the comment about one.", "author": "svendiedrichsen", "createdAt": "2020-06-05T14:53:05Z", "path": "nucleus/core/kernel/src/main/java/com/sun/enterprise/v3/server/AppServerStartup.java", "diffHunk": "@@ -543,9 +543,11 @@ public synchronized void stop() {\n     }\n \n     /**\n-     * Proceed to the given run level.\n+     * Proceed to the given run level using the given {@link AppServerActivator}.\n      *\n      * @param runLevel   the run level to proceed to\n+     * @param activator  an {@link AppServerActivator activator} used to\n+     *                   activate/deactivate the services\n      * @return false if an error occurred that required server shutdown; true otherwise\n      */\n     private boolean proceedTo(int runLevel) {", "originalCommit": "a32d0a75bbedfba50b1650b180bce0c79b002da0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b9a52c2c53767f5a22f459052a6011f353da4ca2", "chunk": "diff --git a/nucleus/core/kernel/src/main/java/com/sun/enterprise/v3/server/AppServerStartup.java b/nucleus/core/kernel/src/main/java/com/sun/enterprise/v3/server/AppServerStartup.java\nindex ef15dbda1a..fe71486149 100644\n--- a/nucleus/core/kernel/src/main/java/com/sun/enterprise/v3/server/AppServerStartup.java\n+++ b/nucleus/core/kernel/src/main/java/com/sun/enterprise/v3/server/AppServerStartup.java\n\n@@ -543,11 +543,9 @@ public class AppServerStartup implements PostConstruct, ModuleStartup {\n     }\n \n     /**\n-     * Proceed to the given run level using the given {@link AppServerActivator}.\n+     * Proceed to the given run level.\n      *\n      * @param runLevel   the run level to proceed to\n-     * @param activator  an {@link AppServerActivator activator} used to\n-     *                   activate/deactivate the services\n      * @return false if an error occurred that required server shutdown; true otherwise\n      */\n     private boolean proceedTo(int runLevel) {\n"}}, {"oid": "b9a52c2c53767f5a22f459052a6011f353da4ca2", "url": "https://github.com/payara/Payara/commit/b9a52c2c53767f5a22f459052a6011f353da4ca2", "message": "* Removed obsolete comments\n* Added back Patrik's commit which was removed by mistake\"", "committedDate": "2020-06-09T09:50:50Z", "type": "commit"}]}