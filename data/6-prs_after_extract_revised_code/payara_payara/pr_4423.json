{"pr_number": 4423, "pr_title": "CUSTCOM-13 A REST management DELETE command returns 415 code instead of 404", "pr_createdAt": "2020-01-10T16:51:45Z", "pr_url": "https://github.com/payara/Payara/pull/4423", "timeline": [{"oid": "5629858fd5d013163d8c3df4ecab491d5f8f7c58", "url": "https://github.com/payara/Payara/commit/5629858fd5d013163d8c3df4ecab491d5f8f7c58", "message": "Create an admin REST API test\n\nCreated a test to make sure that the REST management API continues\nto return a 404 for non-existing resources.", "committedDate": "2020-01-10T17:15:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY5OTU4MQ==", "url": "https://github.com/payara/Payara/pull/4423#discussion_r365699581", "bodyText": "Shouldn't it be Map now?", "author": "jbee", "createdAt": "2020-01-13T09:14:32Z", "path": "nucleus/admin/rest/rest-service/src/main/java/org/glassfish/admin/rest/readers/FormReader.java", "diffHunk": "@@ -64,22 +65,22 @@\n  */\n @Consumes({MediaType.APPLICATION_FORM_URLENCODED, MediaType.APPLICATION_OCTET_STREAM})\n @Provider\n-public class FormReader implements MessageBodyReader<HashMap<String, String>> {\n+public class FormReader implements MessageBodyReader<Map<String, String>> {\n     \n     private static final String DEFAULT_CHARSET = StandardCharsets.UTF_8.toString();\n \n     @Override\n     public boolean isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType) {\n-        return type.equals(HashMap.class);\n+        return type.isAssignableFrom(HashMap.class);", "originalCommit": "5629858fd5d013163d8c3df4ecab491d5f8f7c58", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f31a45806a7bf13b0c1cb03430af53112f7ad9c0", "chunk": "diff --git a/nucleus/admin/rest/rest-service/src/main/java/org/glassfish/admin/rest/readers/FormReader.java b/nucleus/admin/rest/rest-service/src/main/java/org/glassfish/admin/rest/readers/FormReader.java\nindex 3825bd6915..01ade0f3f1 100644\n--- a/nucleus/admin/rest/rest-service/src/main/java/org/glassfish/admin/rest/readers/FormReader.java\n+++ b/nucleus/admin/rest/rest-service/src/main/java/org/glassfish/admin/rest/readers/FormReader.java\n\n@@ -71,7 +71,7 @@ public class FormReader implements MessageBodyReader<Map<String, String>> {\n \n     @Override\n     public boolean isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType) {\n-        return type.isAssignableFrom(HashMap.class);\n+        return Map.class.isAssignableFrom(type);\n     }\n \n     @Override\n"}}, {"oid": "f31a45806a7bf13b0c1cb03430af53112f7ad9c0", "url": "https://github.com/payara/Payara/commit/f31a45806a7bf13b0c1cb03430af53112f7ad9c0", "message": "Allow the FormReader to read generic maps\n\nWhen sending null or non-map data to an endpoint with the\nx-www-form-urlencoded media type, a generic Map object is created\nrather than a specific Map implementation. Because of this no\nreader would mark the content as readable and a 415 would be\nincorrectly returned.", "committedDate": "2020-01-13T09:49:11Z", "type": "commit"}, {"oid": "07976194c2a352e21f913b8542bdee70e1132986", "url": "https://github.com/payara/Payara/commit/07976194c2a352e21f913b8542bdee70e1132986", "message": "Create an admin REST API test\n\nCreated a test to make sure that the REST management API continues\nto return a 404 for non-existing resources.", "committedDate": "2020-01-13T09:49:28Z", "type": "commit"}, {"oid": "07976194c2a352e21f913b8542bdee70e1132986", "url": "https://github.com/payara/Payara/commit/07976194c2a352e21f913b8542bdee70e1132986", "message": "Create an admin REST API test\n\nCreated a test to make sure that the REST management API continues\nto return a 404 for non-existing resources.", "committedDate": "2020-01-13T09:49:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkyNzk1Ng==", "url": "https://github.com/payara/Payara/pull/4423#discussion_r365927956", "bodyText": "camel case would be better, but ok.", "author": "dmatej", "createdAt": "2020-01-13T17:23:46Z", "path": "appserver/tests/payara-samples/samples/rest-management/src/test/java/fish/payara/samples/rest/management/HttpResponsesTest.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.samples.rest.management;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import com.gargoylesoftware.htmlunit.HttpMethod;\n+\n+import org.junit.Test;\n+\n+import fish.payara.samples.NotMicroCompatible;\n+\n+/**\n+ * Test the REST management interface for it's basic HTTP responses\n+ */\n+@NotMicroCompatible\n+public class HttpResponsesTest extends RestManagementTest {\n+\n+    /**\n+     * Tests that when deleting a non-existent resource a 404 is returned instead of\n+     * a 415. See CUSTCOM-13 for details.\n+     */\n+    @Test\n+    public void when_DELETE_non_existent_resource_expect_404() {", "originalCommit": "07976194c2a352e21f913b8542bdee70e1132986", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMwMjUwOA==", "url": "https://github.com/payara/Payara/pull/4423#discussion_r366302508", "bodyText": "Noooo slaps on the wrist are owed for camel case in unit tests", "author": "MattGill98", "createdAt": "2020-01-14T12:08:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkyNzk1Ng=="}], "type": "inlineReview", "revised_code": null}]}