{"pr_number": 4712, "pr_title": "MicroProfile Config Value Resolver API POC", "pr_createdAt": "2020-06-12T10:42:05Z", "pr_url": "https://github.com/payara/Payara/pull/4712", "timeline": [{"oid": "854ff14dc1f11bff608fbab366eb4ab830f3ceaf", "url": "https://github.com/payara/Payara/commit/854ff14dc1f11bff608fbab366eb4ab830f3ceaf", "message": "incomplete state - context switch", "committedDate": "2020-06-02T08:46:03Z", "type": "commit"}, {"oid": "7d313e522325cae226089dc5e2ce02e17c88ef2f", "url": "https://github.com/payara/Payara/commit/7d313e522325cae226089dc5e2ce02e17c88ef2f", "message": "Initial implementation of ConfigValueResolver and some tests (needs more tests)", "committedDate": "2020-06-09T12:21:34Z", "type": "commit"}, {"oid": "07178329f514fd0490f62d3cc0d106e7dd7c70ef", "url": "https://github.com/payara/Payara/commit/07178329f514fd0490f62d3cc0d106e7dd7c70ef", "message": "adds more unit tests for ConfigValueResolver", "committedDate": "2020-06-10T10:06:38Z", "type": "commit"}, {"oid": "946514822799ba616eb32483fa21b07a9f8c0229", "url": "https://github.com/payara/Payara/commit/946514822799ba616eb32483fa21b07a9f8c0229", "message": "fixes CDI provider behaviour for missing properties in connection with defaults", "committedDate": "2020-06-10T11:26:29Z", "type": "commit"}, {"oid": "51c18b37469cd077abc4a5e3b5cdea34929a4a16", "url": "https://github.com/payara/Payara/commit/51c18b37469cd077abc4a5e3b5cdea34929a4a16", "message": "adds tests for arrays and TTL", "committedDate": "2020-06-10T13:34:36Z", "type": "commit"}, {"oid": "5f4994a6ddae5048a7286c0d55a1db59d4811c4c", "url": "https://github.com/payara/Payara/commit/5f4994a6ddae5048a7286c0d55a1db59d4811c4c", "message": "adds copyright headers, extracts ArrayConverter to top level class", "committedDate": "2020-06-10T14:52:39Z", "type": "commit"}, {"oid": "6d194a813e7862ebc2e358260970b471070936a1", "url": "https://github.com/payara/Payara/commit/6d194a813e7862ebc2e358260970b471070936a1", "message": "adds javadoc", "committedDate": "2020-06-10T15:08:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg1OTA1Ng==", "url": "https://github.com/payara/Payara/pull/4712#discussion_r446859056", "bodyText": "Nitpick - wouldn't immutable empty collections work better as default?", "author": "pdudits", "createdAt": "2020-06-29T08:31:40Z", "path": "appserver/payara-appserver-modules/microprofile/config/src/main/java/fish/payara/microprofile/config/cdi/ConfigProducer.java", "diffHunk": "@@ -92,17 +92,20 @@ public Config getConfig() {\n     @ConfigProperty\n     public <T> Set<T> getSetProperty(InjectionPoint ip) {\n         ConfigProperty property = ip.getAnnotated().getAnnotation(ConfigProperty.class);\n-        PayaraConfig config = (PayaraConfig) ConfigProvider.getConfig();\n-        Set<T> result = new HashSet<>();\n+        Config config = ConfigProvider.getConfig();\n         Type type = ip.getType();\n         if (type instanceof ParameterizedType) {\n-            // it is an Optional\n-            // get the class of the generic parameterized Optional\n+         // it is an List, get the element type of the List\n             @SuppressWarnings(\"unchecked\")\n-            Class<T> clazzValue = (Class<T>) ((ParameterizedType) type).getActualTypeArguments()[0];\n-            result = config.getSetValues(property.name(), property.defaultValue(), clazzValue);\n+            Class<T> elementType = (Class<T>) ((ParameterizedType) type).getActualTypeArguments()[0];\n+            String defaultValue = property.defaultValue();\n+            return config.getValue(property.name(), ConfigValueResolver.class)\n+                    .throwOnMissingProperty(defaultValue == null)\n+                    .throwOnFailedConversion()\n+                    .withDefault(defaultValue)\n+                    .asSet(elementType);\n         }\n-        return result;\n+        return new HashSet<>();", "originalCommit": "5f4994a6ddae5048a7286c0d55a1db59d4811c4c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk5Mjc1MQ==", "url": "https://github.com/payara/Payara/pull/4712#discussion_r446992751", "bodyText": "Maybe - did not want to change the previous behaviour.", "author": "jbee", "createdAt": "2020-06-29T13:58:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg1OTA1Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4MDkwNA==", "url": "https://github.com/payara/Payara/pull/4712#discussion_r446980904", "bodyText": "I don't agree. There's no universal rule when this makes sense and when it doesn't. And there are too many options on how things can be handled.\nThere is large ommision in the TCK not giving out enough negative testcases, and taskcases that would clean confusion around trimming, empty values and so forth. But I think current wording does not give us the freedom to do more things in the stardard converter. There are tests for primitive converters, which do expect IllegalArgumentException to be thrown, just as javadoc of Converter  suggests.\nI see that this behavior is expected in realm classes above, but I think it would be more secure to just extend your nice resolver API, where collection methods would have methods to specify:\n\nTo trim value before converting\nTo ignore some parsing errors (or all parsing errors returning empty collection)\nTo allow empty values (as nulls), to skip them, or to throw errors.", "author": "pdudits", "createdAt": "2020-06-29T13:42:34Z", "path": "nucleus/payara-modules/nucleus-microprofile/config-service/src/main/java/fish/payara/nucleus/microprofile/config/converters/ArrayConverter.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) 2020 Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.nucleus.microprofile.config.converters;\n+\n+import java.lang.reflect.Array;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import org.eclipse.microprofile.config.spi.Converter;\n+\n+/**\n+ * Converts reference and primitive arrays.\n+ *\n+ * For convenience the converter skips empty elements as well as elements for which conversion fails. If all\n+ * elements fail to convert the conversion exception is forwarded (thrown). Otherwise a warning is logged and the\n+ * working elements as kept.\n+ *\n+ * This is a grey-area in the standard but from a users point of view it most often makes sense to work with the\n+ * elements that are well defined and ignore the others.", "originalCommit": "5f4994a6ddae5048a7286c0d55a1db59d4811c4c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4d6c23e09b0ad5aa2fae2ad197cfae503ddf9805", "chunk": "diff --git a/nucleus/payara-modules/nucleus-microprofile/config-service/src/main/java/fish/payara/nucleus/microprofile/config/converters/ArrayConverter.java b/nucleus/payara-modules/nucleus-microprofile/config-service/src/main/java/fish/payara/nucleus/microprofile/config/converters/ArrayConverter.java\nindex 3b6f937556..37c433fcbc 100644\n--- a/nucleus/payara-modules/nucleus-microprofile/config-service/src/main/java/fish/payara/nucleus/microprofile/config/converters/ArrayConverter.java\n+++ b/nucleus/payara-modules/nucleus-microprofile/config-service/src/main/java/fish/payara/nucleus/microprofile/config/converters/ArrayConverter.java\n\n@@ -45,16 +45,11 @@ import java.util.logging.Logger;\n \n import org.eclipse.microprofile.config.spi.Converter;\n \n+import fish.payara.nucleus.microprofile.config.spi.ConfigValueResolver;\n+\n /**\n  * Converts reference and primitive arrays.\n  *\n- * For convenience the converter skips empty elements as well as elements for which conversion fails. If all\n- * elements fail to convert the conversion exception is forwarded (thrown). Otherwise a warning is logged and the\n- * working elements as kept.\n- *\n- * This is a grey-area in the standard but from a users point of view it most often makes sense to work with the\n- * elements that are well defined and ignore the others.\n- *\n  * Argument for {@link Converter} can only be {@link Object} as both reference and primitive arrays are created.\n  *\n  * @param <T> element type of the array, can be both a primitive or a reference type\n"}}, {"oid": "4d6c23e09b0ad5aa2fae2ad197cfae503ddf9805", "url": "https://github.com/payara/Payara/commit/4d6c23e09b0ad5aa2fae2ad197cfae503ddf9805", "message": "addresses Patrik's review feedback: array converter fails when using Config#getValue, resolver skips by default and allows configuration, adds trimming to resolver", "committedDate": "2020-07-01T08:02:13Z", "type": "commit"}]}