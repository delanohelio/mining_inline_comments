{"pr_number": 5010, "pr_title": "FISH-790 Refactor, fix bugs in  JavaEE Context Utility", "pr_createdAt": "2020-11-27T06:59:35Z", "pr_url": "https://github.com/payara/Payara/pull/5010", "timeline": [{"oid": "b4f88f35c6ec6491d5aac4f5f6d35a92d3c6c203", "url": "https://github.com/payara/Payara/commit/b4f88f35c6ec6491d5aac4f5f6d35a92d3c6c203", "message": "PayaraValueHolder fixes from Hz migration branch", "committedDate": "2020-11-28T03:32:53Z", "type": "forcePushed"}, {"oid": "65dc1ab7d307d2ff434c57d002bff8b0be846ec2", "url": "https://github.com/payara/Payara/commit/65dc1ab7d307d2ff434c57d002bff8b0be846ec2", "message": "PayaraValueHolder fixes from Hz migration branch", "committedDate": "2020-11-28T04:11:02Z", "type": "forcePushed"}, {"oid": "333d8ccf05be7c0d8413b455f94b5ad7f380c937", "url": "https://github.com/payara/Payara/commit/333d8ccf05be7c0d8413b455f94b5ad7f380c937", "message": "immutable, serializable, refactored JavaEEContextUtil and added Payara API for EE context", "committedDate": "2020-11-28T04:59:18Z", "type": "forcePushed"}, {"oid": "460aa7c13338149fb38e4ce750285fbe346508c5", "url": "https://github.com/payara/Payara/commit/460aa7c13338149fb38e4ce750285fbe346508c5", "message": "immutable, serializable, refactored JavaEEContextUtil and added Payara API for EE context", "committedDate": "2020-11-28T05:39:26Z", "type": "commit"}, {"oid": "460aa7c13338149fb38e4ce750285fbe346508c5", "url": "https://github.com/payara/Payara/commit/460aa7c13338149fb38e4ce750285fbe346508c5", "message": "immutable, serializable, refactored JavaEEContextUtil and added Payara API for EE context", "committedDate": "2020-11-28T05:39:26Z", "type": "forcePushed"}, {"oid": "8f24ea13ca1044c3b97fa30ae7c05b73d7973b11", "url": "https://github.com/payara/Payara/commit/8f24ea13ca1044c3b97fa30ae7c05b73d7973b11", "message": "using member reference, diamond infrerence", "committedDate": "2020-11-28T17:24:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ0MDMxNQ==", "url": "https://github.com/payara/Payara/pull/5010#discussion_r532440315", "bodyText": "Is this really something we encourage users to use in their applications, and promise to keep API binary compatible?\nI think this should have home elsewhere, somewhere under nucleus/common.", "author": "pdudits", "createdAt": "2020-11-30T09:06:44Z", "path": "api/payara-api/src/main/java/fish/payara/context/ContextProducer.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ *  Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ *  The contents of this file are subject to the terms of either the GNU\n+ *  General Public License Version 2 only (\"GPL\") or the Common Development\n+ *  and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ *  may not use this file except in compliance with the License.  You can\n+ *  obtain a copy of the License at\n+ *  https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ *  See the License for the specific\n+ *  language governing permissions and limitations under the License.\n+ *\n+ *  When distributing the software, include this License Header Notice in each\n+ *  file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ *  GPL Classpath Exception:\n+ *  The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ *  exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ *  file that accompanied this code.\n+ *\n+ *  Modifications:\n+ *  If applicable, add the following below the License Header, with the fields\n+ *  enclosed by brackets [] replaced by your own identifying information:\n+ *  \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ *  Contributor(s):\n+ *  If you wish your version of this file to be governed by only the CDDL or\n+ *  only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ *  elects to include this software in this distribution under the [CDDL or GPL\n+ *  Version 2] license.\"  If you don't indicate a single choice of license, a\n+ *  recipient has the option to distribute your version of this file under\n+ *  either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ *  its licensees as provided above.  However, if you add GPL Version 2 code\n+ *  and therefore, elected the GPL Version 2 license, then the option applies\n+ *  only if the new code is made subject to such option by the copyright\n+ *  holder.\n+ */\n+package fish.payara.context;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Utility to create / push Jakarta EE and CDI thread contexts\n+ *\n+ * Example:\n+ * @Inject ContextProducer producer;\n+ * // EJB/CDI thread:\n+ * Instance saved = producer.currentInvocation*();\n+ * // insure 'saved' is not leaked when application undeployed,\n+ * // otherwise use producer.fromComponentId(producer.getInvocationComponentId())\n+ * // and in another, non EJB/CDI thread:\n+ * try (Context ctx = saved.pushRequestContext()) {\n+ *     // runs with EJB / CDI context\n+ * }\n+ *\n+ * @author lprimak\n+ */\n+public interface ContextProducer {", "originalCommit": "8f24ea13ca1044c3b97fa30ae7c05b73d7973b11", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY0MzYwOA==", "url": "https://github.com/payara/Payara/pull/5010#discussion_r532643608", "bodyText": "nucleus/common is where I started with this before migrating to Payara-api.\nThis was designed before MP context propagation, and perhaps we should use that in the future,\nbut it's not a reason to hold up this PR currently.", "author": "lprimak", "createdAt": "2020-11-30T14:38:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ0MDMxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY1MzQxNg==", "url": "https://github.com/payara/Payara/pull/5010#discussion_r532653416", "bodyText": "There's also Java EE Concurrency API, that deals with context propagation. But neither of these APIs expose internals of application servers, like invocation stack or underlying classloaders and give explicit control over them to user application. They only allow propagating current context to async calls.\nI don't believe this belongs into application server's public api.", "author": "pdudits", "createdAt": "2020-11-30T14:51:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ0MDMxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY2MDgxNg==", "url": "https://github.com/payara/Payara/pull/5010#discussion_r532660816", "bodyText": "Do you have an alternative? How else is Hazelcast callback supposed to deal with EJB/CDI objects?\nI don't look at it as 'App server internals' rather than an integration point that let's apps use Jakarta EE.\nOther frameworks always touted 'we have a main method' type approach, this gives and entry-way to do something like that on a hybrid basis at least, which is very useful", "author": "lprimak", "createdAt": "2020-11-30T15:00:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ0MDMxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY2OTU0OA==", "url": "https://github.com/payara/Payara/pull/5010#discussion_r532669548", "bodyText": "I cannot offer an alternative, because I don't know what the exact requirements are. Does any of the other PRs demonstrate how would user app use these?\nJakarta EE is all about integration, yet so far they seemed to solve this without giving fine-grained control over invocation context to user. I can give you lots of examples that are probably not relevant, but may help understanding the motivation. And then we can look at whether the API could be more opaque, and then look at security implications of this.\nIs there anything in JCA's inbound flows (so special kind of message driven bean) that would cover these use cases? Could CDI events be produced by application server instead of user app directly interacting with hazelcast over callback? An interceptor that would get installed around Hazelcast callback by the application server and manage the stack?", "author": "pdudits", "createdAt": "2020-11-30T15:12:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ0MDMxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY3MzM3Ng==", "url": "https://github.com/payara/Payara/pull/5010#discussion_r532673376", "bodyText": "Ah I now saw the example in the PR description, I can see few alternatives to write it:", "author": "pdudits", "createdAt": "2020-11-30T15:17:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ0MDMxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY3NzQ2NA==", "url": "https://github.com/payara/Payara/pull/5010#discussion_r532677464", "bodyText": "I edited the top of the PR with an example.\nYou do raise a good point about security, as this API makes it much easier to switch context into another application running on the same server (if ran without security manager)", "author": "lprimak", "createdAt": "2020-11-30T15:23:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ0MDMxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY5NjQyNg==", "url": "https://github.com/payara/Payara/pull/5010#discussion_r532696426", "bodyText": "I found out, that I'm not entirely sure what the code sample is trying to achive.\n        map.addEntryListener(contextualizer.contextualize(listener, EntryAddedListener.class), true); // (1)\n        map.put(\"hello\", \"world\"); \n        map2.put(\"bye\", listener); // (2)\n\nWhat I think that (1) does is, that when when entry is added to map, it will invoke @Inject MyListener listener asynchronoulsy in current context. i.e invocation of Singleton EJB.\nFor this I can imagine\n\nUsing javax.enterprise.concurrent.ContextService, its api is strinkingly similar.\nSet of Hazelcast specific APIs, i. e. CDI extension that would install map listeners and then invoke event observers (void entryAdded(@Observes @EntryAdded(mapName = \"hallo\") String entry) {})\n\nI'm not sure what (2) is trying to achieve. What should happen when we put managed object into distributed map? How do we manage it serializes properly since it the reference might be just a proxy (to a proxy) of the application class? How do we guarantee that map is updated when object's (or proxies') internal state changes? How do we cope with that fact, that the grid is not running single version of an application all the time and therefore serialization compatibility of the managed object must be retained? What if effects of invoking a method on the objects are local only?", "author": "pdudits", "createdAt": "2020-11-30T15:47:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ0MDMxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY5NzY0OQ==", "url": "https://github.com/payara/Payara/pull/5010#discussion_r532697649", "bodyText": "Jakarta EE has 'solved' - not really? this problem by mandating that objects can be used only in App server control flow. If we want true Hazelcast integration (which people are asking for), some sort of context API needs to be exposed.\nAlso, keep this in mind: #5013\nI am also working on tenant control for Hazelcast which will make it possible for some Hazelcast objects to automatically propagate Payara app context, but some cannot and still need an API to do this", "author": "lprimak", "createdAt": "2020-11-30T15:49:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ0MDMxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcwMjQ1MQ==", "url": "https://github.com/payara/Payara/pull/5010#discussion_r532702451", "bodyText": "Set of Hazelcast specific APIs, i. e. CDI extension that would install map listeners and then invoke event observers (void entryAdded(@observes @EntryAdded(mapName = \"hallo\") String entry) {})\n\nThis is clearly out of scope for this PR\n\nUsing javax.enterprise.concurrent.ContextService, its api is strinkingly similar.\n\nAgain, this was pre-MP context propagation, and if we are going to use something, it's MP stuff I would think\nI thin it would also be out of scope here", "author": "lprimak", "createdAt": "2020-11-30T15:55:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ0MDMxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "bcde05e86caeab6c1ffc2e45b333824ba005f734", "chunk": "diff --git a/api/payara-api/src/main/java/fish/payara/context/ContextProducer.java b/nucleus/common/internal-api/src/main/java/org/glassfish/internal/api/ContextProducer.java\nsimilarity index 95%\nrename from api/payara-api/src/main/java/fish/payara/context/ContextProducer.java\nrename to nucleus/common/internal-api/src/main/java/org/glassfish/internal/api/ContextProducer.java\nindex eeaf43aeda..5301029144 100644\n--- a/api/payara-api/src/main/java/fish/payara/context/ContextProducer.java\n+++ b/nucleus/common/internal-api/src/main/java/org/glassfish/internal/api/ContextProducer.java\n\n@@ -37,7 +37,7 @@\n  *  only if the new code is made subject to such option by the copyright\n  *  holder.\n  */\n-package fish.payara.context;\n+package org.glassfish.internal.api;\n \n import java.io.Serializable;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ0NTQwOQ==", "url": "https://github.com/payara/Payara/pull/5010#discussion_r532445409", "bodyText": "Making it user-facing API is apparently your intent here, I'm not convinced that we should.", "author": "pdudits", "createdAt": "2020-11-30T09:15:24Z", "path": "appserver/web/gf-web-connector/src/main/java/fish/payara/appserver/context/CDIExtension.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ *  Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ *  The contents of this file are subject to the terms of either the GNU\n+ *  General Public License Version 2 only (\"GPL\") or the Common Development\n+ *  and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ *  may not use this file except in compliance with the License.  You can\n+ *  obtain a copy of the License at\n+ *  https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ *  See the License for the specific\n+ *  language governing permissions and limitations under the License.\n+ *\n+ *  When distributing the software, include this License Header Notice in each\n+ *  file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ *  GPL Classpath Exception:\n+ *  The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ *  exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ *  file that accompanied this code.\n+ *\n+ *  Modifications:\n+ *  If applicable, add the following below the License Header, with the fields\n+ *  enclosed by brackets [] replaced by your own identifying information:\n+ *  \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ *  Contributor(s):\n+ *  If you wish your version of this file to be governed by only the CDDL or\n+ *  only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ *  elects to include this software in this distribution under the [CDDL or GPL\n+ *  Version 2] license.\"  If you don't indicate a single choice of license, a\n+ *  recipient has the option to distribute your version of this file under\n+ *  either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ *  its licensees as provided above.  However, if you add GPL Version 2 code\n+ *  and therefore, elected the GPL Version 2 license, then the option applies\n+ *  only if the new code is made subject to such option by the copyright\n+ *  holder.\n+ */\n+package fish.payara.appserver.context;\n+\n+import javax.enterprise.event.Observes;\n+import javax.enterprise.inject.spi.AnnotatedType;\n+import javax.enterprise.inject.spi.BeanManager;\n+import javax.enterprise.inject.spi.BeforeBeanDiscovery;\n+import javax.enterprise.inject.spi.Extension;\n+\n+/**\n+ * adds context producer\n+ *\n+ * @author lprimak\n+ */\n+public class CDIExtension implements Extension {", "originalCommit": "8f24ea13ca1044c3b97fa30ae7c05b73d7973b11", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bcde05e86caeab6c1ffc2e45b333824ba005f734", "chunk": "diff --git a/appserver/web/gf-web-connector/src/main/java/fish/payara/appserver/context/CDIExtension.java b/appserver/web/gf-web-connector/src/main/java/fish/payara/appserver/context/CDIExtension.java\ndeleted file mode 100644\nindex e409a701ac..0000000000\n--- a/appserver/web/gf-web-connector/src/main/java/fish/payara/appserver/context/CDIExtension.java\n+++ /dev/null\n\n@@ -1,58 +0,0 @@\n-/*\n- *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n- *\n- *  Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n- *\n- *  The contents of this file are subject to the terms of either the GNU\n- *  General Public License Version 2 only (\"GPL\") or the Common Development\n- *  and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n- *  may not use this file except in compliance with the License.  You can\n- *  obtain a copy of the License at\n- *  https://github.com/payara/Payara/blob/master/LICENSE.txt\n- *  See the License for the specific\n- *  language governing permissions and limitations under the License.\n- *\n- *  When distributing the software, include this License Header Notice in each\n- *  file and include the License file at glassfish/legal/LICENSE.txt.\n- *\n- *  GPL Classpath Exception:\n- *  The Payara Foundation designates this particular file as subject to the \"Classpath\"\n- *  exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n- *  file that accompanied this code.\n- *\n- *  Modifications:\n- *  If applicable, add the following below the License Header, with the fields\n- *  enclosed by brackets [] replaced by your own identifying information:\n- *  \"Portions Copyright [year] [name of copyright owner]\"\n- *\n- *  Contributor(s):\n- *  If you wish your version of this file to be governed by only the CDDL or\n- *  only the GPL Version 2, indicate your decision by adding \"[Contributor]\n- *  elects to include this software in this distribution under the [CDDL or GPL\n- *  Version 2] license.\"  If you don't indicate a single choice of license, a\n- *  recipient has the option to distribute your version of this file under\n- *  either the CDDL, the GPL Version 2 or to extend the choice of license to\n- *  its licensees as provided above.  However, if you add GPL Version 2 code\n- *  and therefore, elected the GPL Version 2 license, then the option applies\n- *  only if the new code is made subject to such option by the copyright\n- *  holder.\n- */\n-package fish.payara.appserver.context;\n-\n-import javax.enterprise.event.Observes;\n-import javax.enterprise.inject.spi.AnnotatedType;\n-import javax.enterprise.inject.spi.BeanManager;\n-import javax.enterprise.inject.spi.BeforeBeanDiscovery;\n-import javax.enterprise.inject.spi.Extension;\n-\n-/**\n- * adds context producer\n- *\n- * @author lprimak\n- */\n-public class CDIExtension implements Extension {\n-      void beforeBeanDiscovery(@Observes BeforeBeanDiscovery bbd, BeanManager bm) {\n-        AnnotatedType<ContextCDIProducer> at = bm.createAnnotatedType(ContextCDIProducer.class);\n-        bbd.addAnnotatedType(at, ContextCDIProducer.class.getName());\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ1NTAzOA==", "url": "https://github.com/payara/Payara/pull/5010#discussion_r532455038", "bodyText": "I'm all for short names but in this case I cannot see what type of Instance we talk about. An extra word might be needed. Similarly Context makes me wonder what context we talk about exactly. Or this needs to be in a package that helps identify the context of this context :)", "author": "jbee", "createdAt": "2020-11-30T09:31:02Z", "path": "api/payara-api/src/main/java/fish/payara/context/ContextProducer.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ *  Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ *  The contents of this file are subject to the terms of either the GNU\n+ *  General Public License Version 2 only (\"GPL\") or the Common Development\n+ *  and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ *  may not use this file except in compliance with the License.  You can\n+ *  obtain a copy of the License at\n+ *  https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ *  See the License for the specific\n+ *  language governing permissions and limitations under the License.\n+ *\n+ *  When distributing the software, include this License Header Notice in each\n+ *  file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ *  GPL Classpath Exception:\n+ *  The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ *  exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ *  file that accompanied this code.\n+ *\n+ *  Modifications:\n+ *  If applicable, add the following below the License Header, with the fields\n+ *  enclosed by brackets [] replaced by your own identifying information:\n+ *  \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ *  Contributor(s):\n+ *  If you wish your version of this file to be governed by only the CDDL or\n+ *  only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ *  elects to include this software in this distribution under the [CDDL or GPL\n+ *  Version 2] license.\"  If you don't indicate a single choice of license, a\n+ *  recipient has the option to distribute your version of this file under\n+ *  either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ *  its licensees as provided above.  However, if you add GPL Version 2 code\n+ *  and therefore, elected the GPL Version 2 license, then the option applies\n+ *  only if the new code is made subject to such option by the copyright\n+ *  holder.\n+ */\n+package fish.payara.context;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Utility to create / push Jakarta EE and CDI thread contexts\n+ *\n+ * Example:\n+ * @Inject ContextProducer producer;\n+ * // EJB/CDI thread:\n+ * Instance saved = producer.currentInvocation*();\n+ * // insure 'saved' is not leaked when application undeployed,\n+ * // otherwise use producer.fromComponentId(producer.getInvocationComponentId())\n+ * // and in another, non EJB/CDI thread:\n+ * try (Context ctx = saved.pushRequestContext()) {\n+ *     // runs with EJB / CDI context\n+ * }\n+ *\n+ * @author lprimak\n+ */\n+public interface ContextProducer {\n+    /**\n+     * Creates an empty instance, i.e. if the empty context is pushed\n+     * on top of another context, the other context will be 'suppressed'\n+     * for the duration of this context\n+     *\n+     * @return new empty instance\n+     */\n+    Instance empty();\n+\n+    /**\n+     * captures current invocation and returns it as an instance\n+     *\n+     * @return new captured instance\n+     */\n+    Instance currentInvocation() throws IllegalStateException;\n+\n+    /**\n+     *\n+     * @param componentId component id for this instance, non-null\n+     *\n+     * @return new instance based on componentId\n+     */\n+    Instance fromComponentId(String componentId) throws IllegalArgumentException;\n+\n+    /**\n+     * @return Class Loader that's associated with current invocation or null if\n+     * there is no current invocation\n+     */\n+    ClassLoader getInvocationClassLoader();\n+\n+    /**\n+     * @return component ID for the current invocation or null\n+     */\n+    String getInvocationComponentId();\n+\n+    /**\n+     * This is different from class loaded, as there are some situations\n+     * where class is loaded but initialization is not complete,\n+     * such as CDI initializations, extensions start, etc.\n+     *\n+     * @return true if current invocation exists and is loaded / ready\n+     */\n+    boolean isInvocationLoaded();\n+\n+    /**\n+     * specific, immutable, thread-safe instance of the context\n+     */\n+    interface Instance extends Serializable {", "originalCommit": "8f24ea13ca1044c3b97fa30ae7c05b73d7973b11", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY1MDQ0NQ==", "url": "https://github.com/payara/Payara/pull/5010#discussion_r532650445", "bodyText": "When I use this in NetBeans, it always puts in ContextProducer.Interface and I would not use Interface as a standalone type, so IMHO this isn't an issue", "author": "lprimak", "createdAt": "2020-11-30T14:47:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ1NTAzOA=="}], "type": "inlineReview", "revised_code": {"commit": "bcde05e86caeab6c1ffc2e45b333824ba005f734", "chunk": "diff --git a/api/payara-api/src/main/java/fish/payara/context/ContextProducer.java b/nucleus/common/internal-api/src/main/java/org/glassfish/internal/api/ContextProducer.java\nsimilarity index 95%\nrename from api/payara-api/src/main/java/fish/payara/context/ContextProducer.java\nrename to nucleus/common/internal-api/src/main/java/org/glassfish/internal/api/ContextProducer.java\nindex eeaf43aeda..5301029144 100644\n--- a/api/payara-api/src/main/java/fish/payara/context/ContextProducer.java\n+++ b/nucleus/common/internal-api/src/main/java/org/glassfish/internal/api/ContextProducer.java\n\n@@ -37,7 +37,7 @@\n  *  only if the new code is made subject to such option by the copyright\n  *  holder.\n  */\n-package fish.payara.context;\n+package org.glassfish.internal.api;\n \n import java.io.Serializable;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ1OTA3OA==", "url": "https://github.com/payara/Payara/pull/5010#discussion_r532459078", "bodyText": "Could do with some javadoc explaining what is going on", "author": "jbee", "createdAt": "2020-11-30T09:37:41Z", "path": "appserver/web/gf-web-connector/src/main/java/fish/payara/appserver/context/ContextualizerImpl.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ *  Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ *  The contents of this file are subject to the terms of either the GNU\n+ *  General Public License Version 2 only (\"GPL\") or the Common Development\n+ *  and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ *  may not use this file except in compliance with the License.  You can\n+ *  obtain a copy of the License at\n+ *  https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ *  See the License for the specific\n+ *  language governing permissions and limitations under the License.\n+ *\n+ *  When distributing the software, include this License Header Notice in each\n+ *  file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ *  GPL Classpath Exception:\n+ *  The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ *  exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ *  file that accompanied this code.\n+ *\n+ *  Modifications:\n+ *  If applicable, add the following below the License Header, with the fields\n+ *  enclosed by brackets [] replaced by your own identifying information:\n+ *  \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ *  Contributor(s):\n+ *  If you wish your version of this file to be governed by only the CDDL or\n+ *  only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ *  elects to include this software in this distribution under the [CDDL or GPL\n+ *  Version 2] license.\"  If you don't indicate a single choice of license, a\n+ *  recipient has the option to distribute your version of this file under\n+ *  either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ *  its licensees as provided above.  However, if you add GPL Version 2 code\n+ *  and therefore, elected the GPL Version 2 license, then the option applies\n+ *  only if the new code is made subject to such option by the copyright\n+ *  holder.\n+ */\n+package fish.payara.appserver.context;\n+\n+import fish.payara.context.ContextProducer;\n+import fish.payara.context.Contextualizer;\n+import java.lang.reflect.InvocationHandler;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Proxy;\n+import java.util.stream.Stream;\n+import javax.inject.Inject;\n+import org.glassfish.internal.api.JavaEEContextUtil;\n+import org.jvnet.hk2.annotations.Service;\n+\n+/**\n+ *\n+ * @author lprimak\n+ */", "originalCommit": "8f24ea13ca1044c3b97fa30ae7c05b73d7973b11", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY0OTgyNA==", "url": "https://github.com/payara/Payara/pull/5010#discussion_r532649824", "bodyText": "Javadoc is in the Contextualizer API itself", "author": "lprimak", "createdAt": "2020-11-30T14:46:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ1OTA3OA=="}], "type": "inlineReview", "revised_code": {"commit": "bcde05e86caeab6c1ffc2e45b333824ba005f734", "chunk": "diff --git a/appserver/web/gf-web-connector/src/main/java/fish/payara/appserver/context/ContextualizerImpl.java b/appserver/web/gf-web-connector/src/main/java/fish/payara/appserver/context/ContextualizerImpl.java\nindex 9373055284..8b1448d726 100644\n--- a/appserver/web/gf-web-connector/src/main/java/fish/payara/appserver/context/ContextualizerImpl.java\n+++ b/appserver/web/gf-web-connector/src/main/java/fish/payara/appserver/context/ContextualizerImpl.java\n\n@@ -39,8 +39,8 @@\n  */\n package fish.payara.appserver.context;\n \n-import fish.payara.context.ContextProducer;\n-import fish.payara.context.Contextualizer;\n+import org.glassfish.internal.api.ContextProducer;\n+import org.glassfish.internal.api.Contextualizer;\n import java.lang.reflect.InvocationHandler;\n import java.lang.reflect.Method;\n import java.lang.reflect.Proxy;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ2NTEwNw==", "url": "https://github.com/payara/Payara/pull/5010#discussion_r532465107", "bodyText": "I feel this deserves a explaining comment as it looks to me you try to address an issue here - was there one? which?", "author": "jbee", "createdAt": "2020-11-30T09:47:01Z", "path": "appserver/web/weld-integration/src/main/java/org/glassfish/cdi/transaction/TransactionScopedCDIUtil.java", "diffHunk": "@@ -219,7 +219,7 @@ public BeanWrapper(Class<?> beanClass) {\n             catch(MultiException e) {\n                 log(e.getMessage());\n             }\n-            this.ctxUtil = ctxUtil;\n+            this.ctxUtil = ctxUtil.map(JavaEEContextUtil::currentInvocation);", "originalCommit": "8f24ea13ca1044c3b97fa30ae7c05b73d7973b11", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY0OTQ4Mg==", "url": "https://github.com/payara/Payara/pull/5010#discussion_r532649482", "bodyText": "Context Util API changed, this line just tracks that change, it would be a compile error otherwise.\nIt's self-explanatory for me here and shouldn't require a comment, as it would be like\n\"tracking API changes\"", "author": "lprimak", "createdAt": "2020-11-30T14:46:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ2NTEwNw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ2NjYwMw==", "url": "https://github.com/payara/Payara/pull/5010#discussion_r532466603", "bodyText": "I'm confused - this extends the new API but this API is \"internal\" while the other is not. Isn't that backwards?", "author": "jbee", "createdAt": "2020-11-30T09:49:17Z", "path": "nucleus/common/internal-api/src/main/java/org/glassfish/internal/api/JavaEEContextUtil.java", "diffHunk": "@@ -47,68 +48,21 @@\n  * @author lprimak\n  */\n @Contract\n-public interface JavaEEContextUtil {\n-    /**\n-     * pushes Java EE invocation context onto the invocation stack\n-     * use try-with-resources to pop the context\n-     *\n-     * @return the new context that was created\n-     */\n-    Context pushContext();\n+public interface JavaEEContextUtil extends ContextProducer {", "originalCommit": "8f24ea13ca1044c3b97fa30ae7c05b73d7973b11", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY0ODcwNg==", "url": "https://github.com/payara/Payara/pull/5010#discussion_r532648706", "bodyText": "The internal API is a superset of the external one now, which is correct.", "author": "lprimak", "createdAt": "2020-11-30T14:45:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ2NjYwMw=="}], "type": "inlineReview", "revised_code": {"commit": "bcde05e86caeab6c1ffc2e45b333824ba005f734", "chunk": "diff --git a/nucleus/common/internal-api/src/main/java/org/glassfish/internal/api/JavaEEContextUtil.java b/nucleus/common/internal-api/src/main/java/org/glassfish/internal/api/JavaEEContextUtil.java\nindex e135174c2a..0b3e61776f 100644\n--- a/nucleus/common/internal-api/src/main/java/org/glassfish/internal/api/JavaEEContextUtil.java\n+++ b/nucleus/common/internal-api/src/main/java/org/glassfish/internal/api/JavaEEContextUtil.java\n\n@@ -51,7 +50,14 @@ import org.jvnet.hk2.annotations.Contract;\n public interface JavaEEContextUtil extends ContextProducer {\n     @Override Instance empty();\n     @Override Instance currentInvocation() throws IllegalStateException;\n-    @Override Instance fromComponentId(String componentId) throws IllegalArgumentException;\n+\n+    /**\n+     *\n+     * @param componentId component id for this instance, non-null\n+     *\n+     * @return new instance based on componentId\n+     */\n+    ContextProducer.Instance fromComponentId(String componentId) throws IllegalArgumentException;\n \n     interface Instance extends ContextProducer.Instance {\n         @Override Context pushContext();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ2NzQxMA==", "url": "https://github.com/payara/Payara/pull/5010#discussion_r532467410", "bodyText": "field order...", "author": "jbee", "createdAt": "2020-11-30T09:50:21Z", "path": "nucleus/payara-modules/hazelcast-bootstrap/src/main/java/fish/payara/nucleus/hazelcast/PayaraHazelcastSerializer.java", "diffHunk": "@@ -44,15 +44,24 @@\n import com.hazelcast.nio.ObjectDataInput;\n import com.hazelcast.nio.ObjectDataOutput;\n import com.hazelcast.nio.serialization.StreamSerializer;\n+import com.sun.enterprise.util.ExceptionUtil;\n import java.io.IOException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n import org.glassfish.internal.api.JavaEEContextUtil.Context;\n+import org.glassfish.internal.api.JavaEEContextUtil.Instance;\n \n /**\n  *\n  * @author lprimak\n  * @since 4.1.2.173\n  */\n public class PayaraHazelcastSerializer implements StreamSerializer<Object> {\n+    private final JavaEEContextUtil ctxUtil;\n+    private final StreamSerializer<Object> delegate;\n+    private static final Logger log = Logger.getLogger(PayaraHazelcastSerializer.class.getName());", "originalCommit": "8f24ea13ca1044c3b97fa30ae7c05b73d7973b11", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY5ODY1Mw==", "url": "https://github.com/payara/Payara/pull/5010#discussion_r532698653", "bodyText": "fixed, but not pushed yet", "author": "lprimak", "createdAt": "2020-11-30T15:50:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ2NzQxMA=="}], "type": "inlineReview", "revised_code": {"commit": "4993faf76c122c4ff03d025ccb0781ce71025a4a", "chunk": "diff --git a/nucleus/payara-modules/hazelcast-bootstrap/src/main/java/fish/payara/nucleus/hazelcast/PayaraHazelcastSerializer.java b/nucleus/payara-modules/hazelcast-bootstrap/src/main/java/fish/payara/nucleus/hazelcast/PayaraHazelcastSerializer.java\nindex ea9f3ea450..a7c394fdca 100644\n--- a/nucleus/payara-modules/hazelcast-bootstrap/src/main/java/fish/payara/nucleus/hazelcast/PayaraHazelcastSerializer.java\n+++ b/nucleus/payara-modules/hazelcast-bootstrap/src/main/java/fish/payara/nucleus/hazelcast/PayaraHazelcastSerializer.java\n\n@@ -57,9 +57,9 @@ import org.glassfish.internal.api.JavaEEContextUtil.Instance;\n  * @since 4.1.2.173\n  */\n public class PayaraHazelcastSerializer implements StreamSerializer<Object> {\n+    private static final Logger log = Logger.getLogger(PayaraHazelcastSerializer.class.getName());\n     private final JavaEEContextUtil ctxUtil;\n     private final StreamSerializer<Object> delegate;\n-    private static final Logger log = Logger.getLogger(PayaraHazelcastSerializer.class.getName());\n \n \n     @SuppressWarnings(\"unchecked\")\n"}}, {"oid": "4993faf76c122c4ff03d025ccb0781ce71025a4a", "url": "https://github.com/payara/Payara/commit/4993faf76c122c4ff03d025ccb0781ce71025a4a", "message": "field order", "committedDate": "2020-11-30T15:50:02Z", "type": "commit"}, {"oid": "bcde05e86caeab6c1ffc2e45b333824ba005f734", "url": "https://github.com/payara/Payara/commit/bcde05e86caeab6c1ffc2e45b333824ba005f734", "message": "removed public context API since it was such a hot-button issue", "committedDate": "2020-11-30T16:47:57Z", "type": "commit"}, {"oid": "034db30aa16ac8d704c347a81fbd214e312b4c59", "url": "https://github.com/payara/Payara/commit/034db30aa16ac8d704c347a81fbd214e312b4c59", "message": "fixed compile error", "committedDate": "2020-11-30T17:16:14Z", "type": "commit"}]}