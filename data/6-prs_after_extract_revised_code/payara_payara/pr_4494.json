{"pr_number": 4494, "pr_title": "CUSTCOM-203 Referenced component name in OpenApi 'paths' sec\u2026", "pr_createdAt": "2020-02-14T14:25:22Z", "pr_url": "https://github.com/payara/Payara/pull/4494", "timeline": [{"oid": "0b48687705b336f4f4c261c9cd1595d591a344e3", "url": "https://github.com/payara/Payara/commit/0b48687705b336f4f4c261c9cd1595d591a344e3", "message": "MICROPROFILE #4490 - Referenced component name in OpenApi 'paths' section use name from the Schema annotation", "committedDate": "2020-02-14T14:29:22Z", "type": "forcePushed"}, {"oid": "4a049a5fb6f864a6e0fdab572dea4372d1086601", "url": "https://github.com/payara/Payara/commit/4a049a5fb6f864a6e0fdab572dea4372d1086601", "message": "MICROPROFILE #4490 - Referenced component name in OpenApi 'paths' section use name from the Schema annotation", "committedDate": "2020-02-14T14:34:28Z", "type": "forcePushed"}, {"oid": "cda0b02e527242900977fc87b4811d3239259b37", "url": "https://github.com/payara/Payara/commit/cda0b02e527242900977fc87b4811d3239259b37", "message": "MICROPROFILE #4490 - Referenced component name in OpenApi 'paths' section use name from the Schema annotation", "committedDate": "2020-02-14T14:36:28Z", "type": "forcePushed"}, {"oid": "3591fcc3aa74a22cfaba307c25e4905846ccfe02", "url": "https://github.com/payara/Payara/commit/3591fcc3aa74a22cfaba307c25e4905846ccfe02", "message": "MICROPROFILE #4490 - Referenced component name in OpenApi 'paths' section use name from the Schema annotation", "committedDate": "2020-02-14T14:39:12Z", "type": "forcePushed"}, {"oid": "e7d2918993191312bbd37d2582951a8c9b2d52d1", "url": "https://github.com/payara/Payara/commit/e7d2918993191312bbd37d2582951a8c9b2d52d1", "message": "MICROPROFILE #4490 - Referenced component name in OpenApi 'paths' section use name from the Schema annotation", "committedDate": "2020-02-14T14:52:20Z", "type": "commit"}, {"oid": "e7d2918993191312bbd37d2582951a8c9b2d52d1", "url": "https://github.com/payara/Payara/commit/e7d2918993191312bbd37d2582951a8c9b2d52d1", "message": "MICROPROFILE #4490 - Referenced component name in OpenApi 'paths' section use name from the Schema annotation", "committedDate": "2020-02-14T14:52:20Z", "type": "forcePushed"}, {"oid": "5d0e54f6d8d27105cf375aa1c86f3cafee7f56db", "url": "https://github.com/payara/Payara/commit/5d0e54f6d8d27105cf375aa1c86f3cafee7f56db", "message": "Removed the original (now duplicated) referee.setRef(referenceClass.getSimpleName());", "committedDate": "2020-02-14T16:05:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUwMjg1OA==", "url": "https://github.com/payara/Payara/pull/4494#discussion_r380502858", "bodyText": "The visitSchema() is now called twice with the same parameters.", "author": "rdebusscher", "createdAt": "2020-02-18T07:46:49Z", "path": "appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/processor/ApplicationProcessor.java", "diffHunk": "@@ -1031,11 +1031,18 @@ private boolean insertObjectReference(ApiContext context, Reference<?> referee,\n             return false;\n         }\n \n+        final Schema schema = AnnotationInfo.valueOf(referenceClass).getAnnotation(Schema.class);\n+\n         // Set the reference name\n-        referee.setRef(referenceClass.getSimpleName());\n+        if (schema == null || schema.name().isEmpty()) {\n+            referee.setRef(referenceClass.getSimpleName());\n+        } else {\n+            referee.setRef(schema.name());\n+        }\n \n         // Create the schema\n         visitSchema(AnnotationInfo.valueOf(referenceClass).getAnnotation(Schema.class), referenceClass, context);\n+        visitSchema(schema, referenceClass, context);", "originalCommit": "5d0e54f6d8d27105cf375aa1c86f3cafee7f56db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU1MDU4Nw==", "url": "https://github.com/payara/Payara/pull/4494#discussion_r380550587", "bodyText": "Thank you. That line is completely in vain there. Removed in e3fd7d2", "author": "Pscheidl", "createdAt": "2020-02-18T09:28:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUwMjg1OA=="}], "type": "inlineReview", "revised_code": {"commit": "e3fd7d2e2920ac58a126d0434caf61b588e4738b", "chunk": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/processor/ApplicationProcessor.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/processor/ApplicationProcessor.java\nindex 5e6104468e..5aeffe2ee3 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/processor/ApplicationProcessor.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/processor/ApplicationProcessor.java\n\n@@ -1041,7 +1041,6 @@ public class ApplicationProcessor implements OASProcessor, ApiVisitor {\n         }\n \n         // Create the schema\n-        visitSchema(AnnotationInfo.valueOf(referenceClass).getAnnotation(Schema.class), referenceClass, context);\n         visitSchema(schema, referenceClass, context);\n \n         return true;\n"}}, {"oid": "e3fd7d2e2920ac58a126d0434caf61b588e4738b", "url": "https://github.com/payara/Payara/commit/e3fd7d2e2920ac58a126d0434caf61b588e4738b", "message": "Removed duplicated call of visitSchema method.", "committedDate": "2020-02-18T10:45:31Z", "type": "commit"}, {"oid": "e3fd7d2e2920ac58a126d0434caf61b588e4738b", "url": "https://github.com/payara/Payara/commit/e3fd7d2e2920ac58a126d0434caf61b588e4738b", "message": "Removed duplicated call of visitSchema method.", "committedDate": "2020-02-18T10:45:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2ODkyMQ==", "url": "https://github.com/payara/Payara/pull/4494#discussion_r381168921", "bodyText": "2020", "author": "jbee", "createdAt": "2020-02-19T09:27:59Z", "path": "appserver/payara-appserver-modules/microprofile/openapi/src/test/java/fish/payara/microprofile/openapi/test/app/application/OASchemaReferenceNameTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2019] Payara Foundation and/or its affiliates. All rights reserved.", "originalCommit": "e3fd7d2e2920ac58a126d0434caf61b588e4738b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE4ODM3Nw==", "url": "https://github.com/payara/Payara/pull/4494#discussion_r381188377", "bodyText": "Done.", "author": "Pscheidl", "createdAt": "2020-02-19T09:59:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2ODkyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "ad0e8243f6a84298456c40465cf45cfee510560f", "chunk": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/test/java/fish/payara/microprofile/openapi/test/app/application/OASchemaReferenceNameTest.java b/appserver/payara-appserver-modules/microprofile/openapi/src/test/java/fish/payara/microprofile/openapi/test/app/application/OASchemaReferenceNameTest.java\nindex 8a33cc16c8..c6fa41cd64 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/test/java/fish/payara/microprofile/openapi/test/app/application/OASchemaReferenceNameTest.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/test/java/fish/payara/microprofile/openapi/test/app/application/OASchemaReferenceNameTest.java\n\n@@ -1,7 +1,7 @@\n /*\n  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n  *\n- * Copyright (c) [2019] Payara Foundation and/or its affiliates. All rights reserved.\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n  *\n  * The contents of this file are subject to the terms of either the GNU\n  * General Public License Version 2 only (\"GPL\") or the Common Development\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2OTYwMQ==", "url": "https://github.com/payara/Payara/pull/4494#discussion_r381169601", "bodyText": "I'd prefer a single referee.setRef(...) with a conditional expression but that is personal preference.", "author": "jbee", "createdAt": "2020-02-19T09:29:10Z", "path": "appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/processor/ApplicationProcessor.java", "diffHunk": "@@ -1031,11 +1031,17 @@ private boolean insertObjectReference(ApiContext context, Reference<?> referee,\n             return false;\n         }\n \n+        final Schema schema = AnnotationInfo.valueOf(referenceClass).getAnnotation(Schema.class);\n+\n         // Set the reference name\n-        referee.setRef(referenceClass.getSimpleName());\n+        if (schema == null || schema.name().isEmpty()) {\n+            referee.setRef(referenceClass.getSimpleName());\n+        } else {\n+            referee.setRef(schema.name());\n+        }", "originalCommit": "e3fd7d2e2920ac58a126d0434caf61b588e4738b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE4ODI1NQ==", "url": "https://github.com/payara/Payara/pull/4494#discussion_r381188255", "bodyText": "Why not ? Can be squeezed into a single line quite easily.\nreferee.setRef(schema == null || schema.name().isEmpty() ? referenceClass.getSimpleName() : schema.name());\n\nChanged in 2e2e6f6.", "author": "Pscheidl", "createdAt": "2020-02-19T09:59:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2OTYwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE5MjgzMQ==", "url": "https://github.com/payara/Payara/pull/4494#discussion_r381192831", "bodyText": "Don't know why, some people do not like conditionals.", "author": "jbee", "createdAt": "2020-02-19T10:07:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2OTYwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIyODEyMw==", "url": "https://github.com/payara/Payara/pull/4494#discussion_r381228123", "bodyText": "ternary operators make it far less readable, compiler can do this optimization.", "author": "rdebusscher", "createdAt": "2020-02-19T11:14:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2OTYwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI2Mzc4NA==", "url": "https://github.com/payara/Payara/pull/4494#discussion_r381263784", "bodyText": "ternary operators make it far less readable\n\nThat is subjective. I can read conditions \"better\".\n\ncompiler can do this optimization.\n\nIts not a readability or performance optimization as far as I am concerned but a semantic one.  With the conditional it is very clear that we want to do this (here setRef) with some value in any branch. This is much clearer expressed by not doing that in an if-else where both branches do it but a single call with a argument that is either this or that.", "author": "jbee", "createdAt": "2020-02-19T12:37:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2OTYwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM0MDA4Mw==", "url": "https://github.com/payara/Payara/pull/4494#discussion_r381340083", "bodyText": "I'm fine with both. I can read almost any code of any style. Feel free to adjust it to your liking.", "author": "Pscheidl", "createdAt": "2020-02-19T14:50:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2OTYwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "2e2e6f6f7a85351e4243eaf6fbf2b6b9248a5bc2", "chunk": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/processor/ApplicationProcessor.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/processor/ApplicationProcessor.java\nindex 5aeffe2ee3..9d16fa1836 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/processor/ApplicationProcessor.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/processor/ApplicationProcessor.java\n\n@@ -1032,13 +1032,8 @@ public class ApplicationProcessor implements OASProcessor, ApiVisitor {\n         }\n \n         final Schema schema = AnnotationInfo.valueOf(referenceClass).getAnnotation(Schema.class);\n-\n         // Set the reference name\n-        if (schema == null || schema.name().isEmpty()) {\n-            referee.setRef(referenceClass.getSimpleName());\n-        } else {\n-            referee.setRef(schema.name());\n-        }\n+        referee.setRef(schema == null || schema.name().isEmpty() ? referenceClass.getSimpleName() : schema.name());\n \n         // Create the schema\n         visitSchema(schema, referenceClass, context);\n"}}, {"oid": "ad0e8243f6a84298456c40465cf45cfee510560f", "url": "https://github.com/payara/Payara/commit/ad0e8243f6a84298456c40465cf45cfee510560f", "message": "Copyright dated to 2020", "committedDate": "2020-02-19T09:54:24Z", "type": "commit"}, {"oid": "2e2e6f6f7a85351e4243eaf6fbf2b6b9248a5bc2", "url": "https://github.com/payara/Payara/commit/2e2e6f6f7a85351e4243eaf6fbf2b6b9248a5bc2", "message": "Ternary op for single-line referee.setRef()", "committedDate": "2020-02-19T09:58:24Z", "type": "commit"}]}