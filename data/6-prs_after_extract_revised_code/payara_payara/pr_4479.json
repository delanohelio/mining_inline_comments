{"pr_number": 4479, "pr_title": " FISH-766 Improper session synchronization of session map", "pr_createdAt": "2020-02-09T12:11:30Z", "pr_url": "https://github.com/payara/Payara/pull/4479", "timeline": [{"oid": "5d6e7cde9c2f3bc0a6c4f229eaf4290f10fb9c28", "url": "https://github.com/payara/Payara/commit/5d6e7cde9c2f3bc0a6c4f229eaf4290f10fb9c28", "message": "#4280 Fixed synchronization issue\n\n- cache could be read by another thread and put caused ConcurrentModificationException", "committedDate": "2020-02-09T12:05:25Z", "type": "commit"}, {"oid": "3215ce90e977dbc79fa334fdb174056564e123ab", "url": "https://github.com/payara/Payara/commit/3215ce90e977dbc79fa334fdb174056564e123ab", "message": "#4281 Added final modifier to field\n\n- synchronization object should be final, that is what Sonar said", "committedDate": "2020-02-09T12:06:28Z", "type": "commit"}, {"oid": "6c64922eddf44cb95778c2944fab169ae49ba07a", "url": "https://github.com/payara/Payara/commit/6c64922eddf44cb95778c2944fab169ae49ba07a", "message": "Merge remote-tracking branch 'upstream/master' into issue-4280-improper-session-synchronization", "committedDate": "2020-07-19T09:42:19Z", "type": "commit"}, {"oid": "b298f292cd383ea3aab7ad244f0d4ce649a6a4e9", "url": "https://github.com/payara/Payara/commit/b298f292cd383ea3aab7ad244f0d4ce649a6a4e9", "message": "#4280 Replaced HashMap by ConcurrentHashMap in SingleSignOn", "committedDate": "2020-07-19T14:36:06Z", "type": "commit"}, {"oid": "a00f8661257c07e46957518030db647cc9a2f5eb", "url": "https://github.com/payara/Payara/commit/a00f8661257c07e46957518030db647cc9a2f5eb", "message": "#4280 clean up code in GlassFishSingleSignOn", "committedDate": "2020-07-19T14:51:07Z", "type": "commit"}, {"oid": "1754479be3492e23a792c72b09b5dc18fbef66b4", "url": "https://github.com/payara/Payara/commit/1754479be3492e23a792c72b09b5dc18fbef66b4", "message": "#4280 Fixed unwanted double expiration\n\n- as found before isValid has expiration side effect\n- checkValid flag is meant to be short circuit", "committedDate": "2020-07-19T16:41:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkzMjk3Mw==", "url": "https://github.com/payara/Payara/pull/4479#discussion_r456932973", "bodyText": "There is a little change in behavior.\nOld implementation locked SSOs and created a list of expired SSOs. No one could create a new SSO.\nNew implementation uses what is available and does not block creation of a new SSO (which is not taken for expiration in given round). However probability of a new SSO being expired is so small so I think this change should be OK for a real world usage.", "author": "sgflt", "createdAt": "2020-07-19T17:19:16Z", "path": "appserver/web/web-glue/src/main/java/com/sun/enterprise/security/web/GlassFishSingleSignOn.java", "diffHunk": "@@ -464,44 +461,38 @@ private void processExpires() {\n         long tooOld = System.currentTimeMillis() - ssoMaxInactive * 1000L;\n         // S1AS8 6155481 START\n         if (logger.isLoggable(Level.FINE)) {\n-            logger.log(Level.FINE, LogFacade.SSO_EXPIRATION_STARTED, cache.size());\n+            logger.log(Level.FINE, LogFacade.SSO_EXPIRATION_STARTED, this.cache.size());\n         }\n         // S1AS8 6155481 END\n-        ArrayList<String> removals = new ArrayList<String>(cache.size() / 2);\n+        final ArrayList<String> removals = new ArrayList<>(this.cache.size() / 2);\n \n         // build list of removal targets\n \n         // Note that only those SSO entries which are NOT associated with\n-        // any session are elegible for removal here.\n+        // any session are eligible for removal here.\n         // Currently no session association ever happens so this covers all\n         // SSO entries. However, this should be addressed separately.\n \n         try {\n-            synchronized (cache) {\n-\n-                Iterator<String> it = cache.keySet().iterator();\n-                while (it.hasNext()) {\n-                    String key = it.next();\n-                    SingleSignOnEntry sso = (SingleSignOnEntry) cache.get(key);\n-                    if (sso.isEmpty() && sso.getLastAccessTime() < tooOld) {\n-                        removals.add(key);\n-                    }\n+            this.cache.forEach((ssoId, sso) -> {\n+                if (sso.isEmpty() && sso.getLastAccessTime() < tooOld) {\n+                    removals.add(ssoId);\n                 }", "originalCommit": "b298f292cd383ea3aab7ad244f0d4ce649a6a4e9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "dc434539515df15138c4d743f91f744c8e843037", "url": "https://github.com/payara/Payara/commit/dc434539515df15138c4d743f91f744c8e843037", "message": "#4280 Deleted unused variable", "committedDate": "2020-07-19T18:04:04Z", "type": "commit"}, {"oid": "bef9a8250ea63bfbb8c6c5a03b5e85580bcad80b", "url": "https://github.com/payara/Payara/commit/bef9a8250ea63bfbb8c6c5a03b5e85580bcad80b", "message": "#4280 Fixed contract violation of findSessions\n\n- no null is allowed, only empty collection", "committedDate": "2020-07-19T18:07:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0MDE3Ng==", "url": "https://github.com/payara/Payara/pull/4479#discussion_r456940176", "bodyText": "nullcheck for broken contract removed", "author": "sgflt", "createdAt": "2020-07-19T18:32:32Z", "path": "appserver/web/web-core/src/main/java/org/apache/catalina/session/StandardManager.java", "diffHunk": "@@ -985,16 +982,14 @@ public void processExpires() {\n \n         long timeNow = System.currentTimeMillis();\n \n-        Session[] sessions = findSessions();\n-        if (sessions != null) {", "originalCommit": "bef9a8250ea63bfbb8c6c5a03b5e85580bcad80b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0MDE5Mg==", "url": "https://github.com/payara/Payara/pull/4479#discussion_r456940192", "bodyText": "nullcheck for broken contract removed", "author": "sgflt", "createdAt": "2020-07-19T18:32:45Z", "path": "appserver/web/web-core/src/main/java/org/apache/catalina/session/StandardManager.java", "diffHunk": "@@ -882,21 +881,19 @@ public void stop(boolean isShutdown) throws LifecycleException {\n         }\n \n         // Expire all active sessions and notify their listeners\n-        Session sessions[] = findSessions();\n-        if (sessions != null) {", "originalCommit": "bef9a8250ea63bfbb8c6c5a03b5e85580bcad80b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0MDIzMQ==", "url": "https://github.com/payara/Payara/pull/4479#discussion_r456940231", "bodyText": "broken contract fixed", "author": "sgflt", "createdAt": "2020-07-19T18:33:06Z", "path": "appserver/web/web-core/src/main/java/org/apache/catalina/session/CookiePersistentManager.java", "diffHunk": "@@ -111,8 +111,8 @@ public void clearSessions() {\n     }\n \n     @Override\n-    public Session[] findSessions() {\n-        return null;", "originalCommit": "bef9a8250ea63bfbb8c6c5a03b5e85580bcad80b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}