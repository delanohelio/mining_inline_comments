{"pr_number": 4946, "pr_title": "FISH-336 Support to use a database as MicroProfile Config source", "pr_createdAt": "2020-10-12T18:48:35Z", "pr_url": "https://github.com/payara/Payara/pull/4946", "timeline": [{"oid": "28045bb117f61784b274095b865573dc0a58201f", "url": "https://github.com/payara/Payara/commit/28045bb117f61784b274095b865573dc0a58201f", "message": "Laid down the foundation for JDBC Config Source.", "committedDate": "2020-10-09T10:52:08Z", "type": "commit"}, {"oid": "0d9bb6e65f918019c9c85f40fbe3c382796ab904", "url": "https://github.com/payara/Payara/commit/0d9bb6e65f918019c9c85f40fbe3c382796ab904", "message": "Updated all of the Microprofile Config asadmin commands to support JDBC Config source", "committedDate": "2020-10-09T11:02:50Z", "type": "commit"}, {"oid": "9d80eed8e8c5611529b9858429d33518c30f0199", "url": "https://github.com/payara/Payara/commit/9d80eed8e8c5611529b9858429d33518c30f0199", "message": "Admin Console integration for JDBC Config source", "committedDate": "2020-10-12T18:19:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzkxMjEzNQ==", "url": "https://github.com/payara/Payara/pull/4946#discussion_r503912135", "bodyText": "This makes it look like the JDBC Config Source can connect to multiple JDBC resources? But the put method seems to show that the properties from one would overwrite the other. What's the precedence here?", "author": "MattGill98", "createdAt": "2020-10-13T12:33:01Z", "path": "nucleus/payara-modules/nucleus-microprofile/config-service/src/main/java/fish/payara/nucleus/microprofile/config/source/JDBCConfigSource.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.nucleus.microprofile.config.source;\n+\n+import java.beans.PropertyVetoException;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import org.eclipse.microprofile.config.spi.ConfigSource;\n+import org.glassfish.jdbc.config.JdbcResource;\n+import org.jvnet.hk2.config.ConfigBean;\n+import org.jvnet.hk2.config.ConfigSupport;\n+import org.jvnet.hk2.config.SingleConfigCode;\n+import org.jvnet.hk2.config.TransactionFailure;\n+import org.jvnet.hk2.config.types.Property;\n+\n+public class JDBCConfigSource extends PayaraConfigSource implements ConfigSource {\n+\n+    private static final String JDBC_CONFIG_PROPERTY_PREFIX = PROPERTY_PREFIX + \"jdbc.\";\n+    private final JDBCConfigSourceHelper jdbcConfigHelper;\n+    private final String jndiName;\n+\n+    public JDBCConfigSource(String jndiName) {\n+        this.jndiName = jndiName;\n+        this.jdbcConfigHelper = new JDBCConfigSourceHelper(getJDBCConfigProperties());\n+    }\n+\n+    @Override\n+    public Map<String, String> getProperties() {\n+        return jdbcConfigHelper.getAllConfigValues();\n+    }\n+\n+    @Override\n+    public int getOrdinal() {\n+        return 400;\n+    }\n+\n+    @Override\n+    public String getValue(String propertyName) {\n+        return jdbcConfigHelper.getConfigValue(propertyName);\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"JDBC\";\n+    }\n+\n+    private Map<String, String> getJDBCConfigProperties() {\n+        HashMap<String, String> result = new HashMap<>();\n+\n+        if (jndiName == null) {\n+            Iterator<JdbcResource> jdbcResources = domainConfiguration.getResources().getResources(JdbcResource.class).iterator();\n+            while (jdbcResources.hasNext()) {\n+                JdbcResource resource = jdbcResources.next();\n+                putJDBCConfigProperties(result, resource.getProperty());", "originalCommit": "9d80eed8e8c5611529b9858429d33518c30f0199", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5fdbabc4f6422704d9ad29dd521887ba2ce52404", "chunk": "diff --git a/nucleus/payara-modules/nucleus-microprofile/config-service/src/main/java/fish/payara/nucleus/microprofile/config/source/JDBCConfigSource.java b/nucleus/payara-modules/nucleus-microprofile/config-service/src/main/java/fish/payara/nucleus/microprofile/config/source/JDBCConfigSource.java\nindex 46a89f438f..5cd159e15d 100644\n--- a/nucleus/payara-modules/nucleus-microprofile/config-service/src/main/java/fish/payara/nucleus/microprofile/config/source/JDBCConfigSource.java\n+++ b/nucleus/payara-modules/nucleus-microprofile/config-service/src/main/java/fish/payara/nucleus/microprofile/config/source/JDBCConfigSource.java\n\n@@ -39,28 +39,17 @@\n  */\n package fish.payara.nucleus.microprofile.config.source;\n \n-import java.beans.PropertyVetoException;\n-import java.util.HashMap;\n-import java.util.Iterator;\n-import java.util.List;\n+import fish.payara.nucleus.microprofile.config.spi.JDBCConfigSourceConfiguration;\n import java.util.Map;\n import org.eclipse.microprofile.config.spi.ConfigSource;\n-import org.glassfish.jdbc.config.JdbcResource;\n-import org.jvnet.hk2.config.ConfigBean;\n-import org.jvnet.hk2.config.ConfigSupport;\n-import org.jvnet.hk2.config.SingleConfigCode;\n-import org.jvnet.hk2.config.TransactionFailure;\n-import org.jvnet.hk2.config.types.Property;\n+import org.glassfish.internal.api.Globals;\n \n public class JDBCConfigSource extends PayaraConfigSource implements ConfigSource {\n \n-    private static final String JDBC_CONFIG_PROPERTY_PREFIX = PROPERTY_PREFIX + \"jdbc.\";\n-    private final JDBCConfigSourceHelper jdbcConfigHelper;\n-    private final String jndiName;\n+    private JDBCConfigSourceHelper jdbcConfigHelper;\n \n-    public JDBCConfigSource(String jndiName) {\n-        this.jndiName = jndiName;\n-        this.jdbcConfigHelper = new JDBCConfigSourceHelper(getJDBCConfigProperties());\n+    public JDBCConfigSource() {\n+      init();\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzkxNTM2OA==", "url": "https://github.com/payara/Payara/pull/4946#discussion_r503915368", "bodyText": "Does this MP config source uses MP config properties to configure itself? I'm a little confused about how this Config Source is configured.", "author": "MattGill98", "createdAt": "2020-10-13T12:38:05Z", "path": "nucleus/payara-modules/nucleus-microprofile/config-service/src/main/java/fish/payara/nucleus/microprofile/config/source/JDBCConfigSource.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.nucleus.microprofile.config.source;\n+\n+import java.beans.PropertyVetoException;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import org.eclipse.microprofile.config.spi.ConfigSource;\n+import org.glassfish.jdbc.config.JdbcResource;\n+import org.jvnet.hk2.config.ConfigBean;\n+import org.jvnet.hk2.config.ConfigSupport;\n+import org.jvnet.hk2.config.SingleConfigCode;\n+import org.jvnet.hk2.config.TransactionFailure;\n+import org.jvnet.hk2.config.types.Property;\n+\n+public class JDBCConfigSource extends PayaraConfigSource implements ConfigSource {\n+\n+    private static final String JDBC_CONFIG_PROPERTY_PREFIX = PROPERTY_PREFIX + \"jdbc.\";\n+    private final JDBCConfigSourceHelper jdbcConfigHelper;\n+    private final String jndiName;\n+\n+    public JDBCConfigSource(String jndiName) {\n+        this.jndiName = jndiName;\n+        this.jdbcConfigHelper = new JDBCConfigSourceHelper(getJDBCConfigProperties());\n+    }\n+\n+    @Override\n+    public Map<String, String> getProperties() {\n+        return jdbcConfigHelper.getAllConfigValues();\n+    }\n+\n+    @Override\n+    public int getOrdinal() {\n+        return 400;\n+    }\n+\n+    @Override\n+    public String getValue(String propertyName) {\n+        return jdbcConfigHelper.getConfigValue(propertyName);\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"JDBC\";\n+    }\n+\n+    private Map<String, String> getJDBCConfigProperties() {\n+        HashMap<String, String> result = new HashMap<>();\n+\n+        if (jndiName == null) {\n+            Iterator<JdbcResource> jdbcResources = domainConfiguration.getResources().getResources(JdbcResource.class).iterator();\n+            while (jdbcResources.hasNext()) {\n+                JdbcResource resource = jdbcResources.next();\n+                putJDBCConfigProperties(result, resource.getProperty());\n+            }\n+            return result;\n+        }\n+\n+        JdbcResource resource = (JdbcResource) domainConfiguration.getResources().getResourceByName(JdbcResource.class, jndiName);\n+        if (resource != null) {\n+            putJDBCConfigProperties(result, resource.getProperty());\n+        }\n+        return result;\n+    }\n+\n+    private void putJDBCConfigProperties(Map<String, String> result, List<Property> properties) {", "originalCommit": "9d80eed8e8c5611529b9858429d33518c30f0199", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5fdbabc4f6422704d9ad29dd521887ba2ce52404", "chunk": "diff --git a/nucleus/payara-modules/nucleus-microprofile/config-service/src/main/java/fish/payara/nucleus/microprofile/config/source/JDBCConfigSource.java b/nucleus/payara-modules/nucleus-microprofile/config-service/src/main/java/fish/payara/nucleus/microprofile/config/source/JDBCConfigSource.java\nindex 46a89f438f..5cd159e15d 100644\n--- a/nucleus/payara-modules/nucleus-microprofile/config-service/src/main/java/fish/payara/nucleus/microprofile/config/source/JDBCConfigSource.java\n+++ b/nucleus/payara-modules/nucleus-microprofile/config-service/src/main/java/fish/payara/nucleus/microprofile/config/source/JDBCConfigSource.java\n\n@@ -39,28 +39,17 @@\n  */\n package fish.payara.nucleus.microprofile.config.source;\n \n-import java.beans.PropertyVetoException;\n-import java.util.HashMap;\n-import java.util.Iterator;\n-import java.util.List;\n+import fish.payara.nucleus.microprofile.config.spi.JDBCConfigSourceConfiguration;\n import java.util.Map;\n import org.eclipse.microprofile.config.spi.ConfigSource;\n-import org.glassfish.jdbc.config.JdbcResource;\n-import org.jvnet.hk2.config.ConfigBean;\n-import org.jvnet.hk2.config.ConfigSupport;\n-import org.jvnet.hk2.config.SingleConfigCode;\n-import org.jvnet.hk2.config.TransactionFailure;\n-import org.jvnet.hk2.config.types.Property;\n+import org.glassfish.internal.api.Globals;\n \n public class JDBCConfigSource extends PayaraConfigSource implements ConfigSource {\n \n-    private static final String JDBC_CONFIG_PROPERTY_PREFIX = PROPERTY_PREFIX + \"jdbc.\";\n-    private final JDBCConfigSourceHelper jdbcConfigHelper;\n-    private final String jndiName;\n+    private JDBCConfigSourceHelper jdbcConfigHelper;\n \n-    public JDBCConfigSource(String jndiName) {\n-        this.jndiName = jndiName;\n-        this.jdbcConfigHelper = new JDBCConfigSourceHelper(getJDBCConfigProperties());\n+    public JDBCConfigSource() {\n+      init();\n     }\n \n     @Override\n"}}, {"oid": "5fdbabc4f6422704d9ad29dd521887ba2ce52404", "url": "https://github.com/payara/Payara/commit/5fdbabc4f6422704d9ad29dd521887ba2ce52404", "message": "JDBC config source no longer uses MicroProfile config properties to configure itself, it now uses regular config properties. Added `get-jdbc-config-source-configuration` and `get-jdbc-config-source-configuration` asadmin commands to configure JDBC config source configuration.", "committedDate": "2020-10-14T12:55:46Z", "type": "commit"}]}