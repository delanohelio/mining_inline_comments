{"pr_number": 8599, "pr_title": "Load GoCD configurations from config repositories on GoCD startup.", "pr_createdAt": "2020-09-26T13:34:35Z", "pr_url": "https://github.com/gocd/gocd/pull/8599", "timeline": [{"oid": "97fbc6ee749050a4b6a670f1abfdf5cd7f8ec170", "url": "https://github.com/gocd/gocd/commit/97fbc6ee749050a4b6a670f1abfdf5cd7f8ec170", "message": "Initialize config repositories only after cruise-config.xml is initialized and plugin is loaded.\n\nImplementation:\n\n* Implement ConfigChangedListener and PluginChangeListener as part\n  of ConfigRepositoryInitializer to listen to cruise-config.xml\n  initialized and plugin loaded events\n\n* Perform config repositories initialization only when all the\n  in use config repository plugins are loaded.\n\n* Make sure config repositories are initialized only once, even\n  when multiple config change event is called or the config repo\n  plugins are unloaded and loaded again.\n\nNeed:\n\nPlugins are loaded in a separate thread as that of the application\ninitializer. Hence, there is possibility of race condition, where,\nthe config repository initializer is called before the cruise-config\nis loaded, which possibly can cause config validation errors as\nentities coming from config repository may depend on/refer to entities\nfrom basic cruise-config.xml", "committedDate": "2020-09-29T02:55:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ0MDEwNQ==", "url": "https://github.com/gocd/gocd/pull/8599#discussion_r496440105", "bodyText": "@GaneshSPatil with this check, in cases where multiple ConfigRepo plugins are used none of the repos will be parsed if a single plugin is missing. Guess this was not intended.", "author": "maheshp", "createdAt": "2020-09-29T06:12:43Z", "path": "server/src/main/java/com/thoughtworks/go/server/service/ConfigRepositoryInitializer.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2020 ThoughtWorks, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.thoughtworks.go.server.service;\n+\n+import com.thoughtworks.go.config.CruiseConfig;\n+import com.thoughtworks.go.config.GoConfigRepoConfigDataSource;\n+import com.thoughtworks.go.config.materials.MaterialConfigs;\n+import com.thoughtworks.go.config.materials.Materials;\n+import com.thoughtworks.go.config.remote.ConfigRepoConfig;\n+import com.thoughtworks.go.config.rules.RuleAwarePluginProfile;\n+import com.thoughtworks.go.domain.MaterialInstance;\n+import com.thoughtworks.go.domain.MaterialRevisions;\n+import com.thoughtworks.go.domain.materials.Material;\n+import com.thoughtworks.go.domain.materials.MaterialConfig;\n+import com.thoughtworks.go.domain.materials.Modification;\n+import com.thoughtworks.go.listener.ConfigChangedListener;\n+import com.thoughtworks.go.plugin.infra.PluginChangeListener;\n+import com.thoughtworks.go.plugin.infra.PluginManager;\n+import com.thoughtworks.go.plugin.infra.plugininfo.GoPluginDescriptor;\n+import com.thoughtworks.go.server.initializers.Initializer;\n+import com.thoughtworks.go.server.persistence.MaterialRepository;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static com.thoughtworks.go.plugin.domain.common.PluginConstants.CONFIG_REPO_EXTENSION;\n+\n+/**\n+ * @understands initializing config repositories. Loads the configurations from the last checked out modification on server startup.\n+ */\n+@Service\n+public class ConfigRepositoryInitializer implements ConfigChangedListener, PluginChangeListener, Initializer {\n+    private PluginManager pluginManager;\n+    private final ConfigRepoService configRepoService;\n+    private final MaterialRepository materialRepository;\n+    private final GoConfigRepoConfigDataSource goConfigRepoConfigDataSource;\n+    private GoConfigService goConfigService;\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ConfigRepositoryInitializer.class);\n+\n+    private boolean isConfigLoaded = false;\n+    private boolean hasConfigRepoInitializationCompleted = false;\n+    private List<String> loadedConfigRepoPlugins = new ArrayList<>();\n+\n+    @Autowired\n+    public ConfigRepositoryInitializer(PluginManager pluginManager, ConfigRepoService configRepoService, MaterialRepository materialRepository, GoConfigRepoConfigDataSource goConfigRepoConfigDataSource, GoConfigService goConfigService) {\n+        this.pluginManager = pluginManager;\n+        this.configRepoService = configRepoService;\n+        this.materialRepository = materialRepository;\n+        this.goConfigRepoConfigDataSource = goConfigRepoConfigDataSource;\n+        this.goConfigService = goConfigService;\n+\n+        this.pluginManager.addPluginChangeListener(this);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        this.goConfigService.register(this);\n+    }\n+\n+    @Override\n+    public void startDaemon() {\n+    }\n+\n+    @Override\n+    public void onConfigChange(CruiseConfig newCruiseConfig) {\n+        // mark config loaded only once!\n+        if (!this.isConfigLoaded) {\n+            this.isConfigLoaded = true;\n+            this.initializeConfigRepositories();\n+        }\n+    }\n+\n+    @Override\n+    public void pluginLoaded(GoPluginDescriptor pluginDescriptor) {\n+        String pluginId = pluginDescriptor.id();\n+        boolean isConfigRepoPlugin = pluginManager.isPluginOfType(CONFIG_REPO_EXTENSION, pluginId);\n+\n+        if (isConfigRepoPlugin) {\n+            this.loadedConfigRepoPlugins.add(pluginId);\n+            this.initializeConfigRepositories();\n+        }\n+    }\n+\n+    @Override\n+    public void pluginUnLoaded(GoPluginDescriptor pluginDescriptor) {\n+        //do nothing\n+    }\n+\n+    private void initializeConfigRepositories() {\n+        // return if config repositories have already been initialized.\n+        if (this.hasConfigRepoInitializationCompleted) {\n+            return;\n+        }\n+\n+        // do nothing if the cruise config is not loaded yet..\n+        if (!this.isConfigLoaded) {\n+            return;\n+        }\n+\n+        List<String> inUseConfigRepoPlugins = this.configRepoService.getConfigRepos().stream().map(RuleAwarePluginProfile::getPluginId).collect(Collectors.toList());\n+        if (this.loadedConfigRepoPlugins.containsAll(inUseConfigRepoPlugins)) {", "originalCommit": "73fe5f07156a5b276d3754b5dca88559613ebd78", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ1NTUxNA==", "url": "https://github.com/gocd/gocd/pull/8599#discussion_r496455514", "bodyText": "@maheshp - yes, you're right. Will change this check to process the config repositories as and when plugins are laoded.", "author": "GaneshSPatil", "createdAt": "2020-09-29T06:49:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ0MDEwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "d0e084e92d403c9cde40e7c6419a1930ec8916f6", "chunk": "diff --git a/server/src/main/java/com/thoughtworks/go/server/service/ConfigRepositoryInitializer.java b/server/src/main/java/com/thoughtworks/go/server/service/ConfigRepositoryInitializerImpl.java\nsimilarity index 52%\nrename from server/src/main/java/com/thoughtworks/go/server/service/ConfigRepositoryInitializer.java\nrename to server/src/main/java/com/thoughtworks/go/server/service/ConfigRepositoryInitializerImpl.java\nindex ab31f6998d..4591cc19d8 100644\n--- a/server/src/main/java/com/thoughtworks/go/server/service/ConfigRepositoryInitializer.java\n+++ b/server/src/main/java/com/thoughtworks/go/server/service/ConfigRepositoryInitializerImpl.java\n\n@@ -16,22 +16,19 @@\n \n package com.thoughtworks.go.server.service;\n \n-import com.thoughtworks.go.config.CruiseConfig;\n import com.thoughtworks.go.config.GoConfigRepoConfigDataSource;\n import com.thoughtworks.go.config.materials.MaterialConfigs;\n import com.thoughtworks.go.config.materials.Materials;\n import com.thoughtworks.go.config.remote.ConfigRepoConfig;\n-import com.thoughtworks.go.config.rules.RuleAwarePluginProfile;\n import com.thoughtworks.go.domain.MaterialInstance;\n import com.thoughtworks.go.domain.MaterialRevisions;\n import com.thoughtworks.go.domain.materials.Material;\n import com.thoughtworks.go.domain.materials.MaterialConfig;\n import com.thoughtworks.go.domain.materials.Modification;\n-import com.thoughtworks.go.listener.ConfigChangedListener;\n-import com.thoughtworks.go.plugin.infra.PluginChangeListener;\n+import com.thoughtworks.go.plugin.infra.ConfigRepositoryInitializer;\n import com.thoughtworks.go.plugin.infra.PluginManager;\n+import com.thoughtworks.go.plugin.infra.PluginPostLoadHook;\n import com.thoughtworks.go.plugin.infra.plugininfo.GoPluginDescriptor;\n-import com.thoughtworks.go.server.initializers.Initializer;\n import com.thoughtworks.go.server.persistence.MaterialRepository;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n"}}, {"oid": "d0e084e92d403c9cde40e7c6419a1930ec8916f6", "url": "https://github.com/gocd/gocd/commit/d0e084e92d403c9cde40e7c6419a1930ec8916f6", "message": "Load GoCD configurations from config repositories on GoCD startup.\n\n* Add a config repo plugin load listener to initialize the GoCD\n  configuration from the existing config repo material repository\n  from flyweight folder.\n\n* Skip initializing config repositories which are not available\n  under flyweight folder (which are not cloned by GoCD yet).\n\n* Always return plugin post load hook result as success, even\n  on config repo initialization failure due to errors (such as\n  config validation / rules violations). As returning a failure\n  response on plugin post load hook will mark plugin as invalid.", "committedDate": "2020-09-30T06:30:05Z", "type": "commit"}, {"oid": "17f74d41df8578d1e763ccbf8db37b4689e58a53", "url": "https://github.com/gocd/gocd/commit/17f74d41df8578d1e763ccbf8db37b4689e58a53", "message": "Initialize config repositories only after cruise-config.xml is initialized and plugin is loaded.\n\nImplementation:\n\n* Implement ConfigChangedListener and PluginChangeListener as part\n  of ConfigRepositoryInitializer to listen to cruise-config.xml\n  initialized and plugin loaded events\n\n* Perform config repositories initialization only when all the\n  in use config repository plugins are loaded.\n\n* Make sure config repositories are initialized only once, even\n  when multiple config change event is called or the config repo\n  plugins are unloaded and loaded again.\n\nNeed:\n\nPlugins are loaded in a separate thread as that of the application\ninitializer. Hence, there is possibility of race condition, where,\nthe config repository initializer is called before the cruise-config\nis loaded, which possibly can cause config validation errors as\nentities coming from config repository may depend on/refer to entities\nfrom basic cruise-config.xml", "committedDate": "2020-09-30T06:30:05Z", "type": "commit"}, {"oid": "2109cd801ad16f82090e38d4e1aaaaff541a212e", "url": "https://github.com/gocd/gocd/commit/2109cd801ad16f82090e38d4e1aaaaff541a212e", "message": "Fix specs", "committedDate": "2020-09-30T06:30:05Z", "type": "commit"}, {"oid": "8b64a23f3ab8c58606ccd92c71ac40f4ba12420b", "url": "https://github.com/gocd/gocd/commit/8b64a23f3ab8c58606ccd92c71ac40f4ba12420b", "message": "Initialize config repositories immediately when plugin is loaded", "committedDate": "2020-09-30T06:30:05Z", "type": "commit"}, {"oid": "153e558b912d2e5d1047b23f749f2633598d1b43", "url": "https://github.com/gocd/gocd/commit/153e558b912d2e5d1047b23f749f2633598d1b43", "message": "Use queue", "committedDate": "2020-09-30T06:34:31Z", "type": "commit"}, {"oid": "153e558b912d2e5d1047b23f749f2633598d1b43", "url": "https://github.com/gocd/gocd/commit/153e558b912d2e5d1047b23f749f2633598d1b43", "message": "Use queue", "committedDate": "2020-09-30T06:34:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQxMDYxNA==", "url": "https://github.com/gocd/gocd/pull/8599#discussion_r497410614", "bodyText": "@GaneshSPatil can we register for ConfigChange in the constructor over the intitalize method. If we register in the intialize method, the config repos will most likely be parsed as part of the main thread and this will lead to increased startup time for GoCD instances with larger configs and multiple config repos. WDYT?", "author": "maheshp", "createdAt": "2020-09-30T10:38:11Z", "path": "server/src/main/java/com/thoughtworks/go/server/service/ConfigRepositoryInitializer.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 ThoughtWorks, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.thoughtworks.go.server.service;\n+\n+import com.thoughtworks.go.config.CruiseConfig;\n+import com.thoughtworks.go.config.GoConfigRepoConfigDataSource;\n+import com.thoughtworks.go.config.materials.MaterialConfigs;\n+import com.thoughtworks.go.config.materials.Materials;\n+import com.thoughtworks.go.config.remote.ConfigRepoConfig;\n+import com.thoughtworks.go.domain.MaterialInstance;\n+import com.thoughtworks.go.domain.MaterialRevisions;\n+import com.thoughtworks.go.domain.materials.Material;\n+import com.thoughtworks.go.domain.materials.MaterialConfig;\n+import com.thoughtworks.go.domain.materials.Modification;\n+import com.thoughtworks.go.listener.ConfigChangedListener;\n+import com.thoughtworks.go.plugin.infra.PluginChangeListener;\n+import com.thoughtworks.go.plugin.infra.PluginManager;\n+import com.thoughtworks.go.plugin.infra.plugininfo.GoPluginDescriptor;\n+import com.thoughtworks.go.server.initializers.Initializer;\n+import com.thoughtworks.go.server.persistence.MaterialRepository;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.File;\n+import java.util.LinkedList;\n+\n+import static com.thoughtworks.go.plugin.domain.common.PluginConstants.CONFIG_REPO_EXTENSION;\n+\n+/**\n+ * @understands initializing config repositories. Loads the configurations from the last checked out modification on server startup.\n+ */\n+@Service\n+public class ConfigRepositoryInitializer implements ConfigChangedListener, PluginChangeListener, Initializer {\n+    private PluginManager pluginManager;\n+    private final ConfigRepoService configRepoService;\n+    private final MaterialRepository materialRepository;\n+    private final GoConfigRepoConfigDataSource goConfigRepoConfigDataSource;\n+    private GoConfigService goConfigService;\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ConfigRepositoryInitializer.class);\n+\n+    private boolean isConfigLoaded = false;\n+\n+    // list of config repo plugins which are loaded, but not yet processed. Once processed, these plugins will be removed from the list.\n+    private final LinkedList<String> pluginsQueue = new LinkedList<>();\n+\n+    @Autowired\n+    public ConfigRepositoryInitializer(PluginManager pluginManager, ConfigRepoService configRepoService, MaterialRepository materialRepository, GoConfigRepoConfigDataSource goConfigRepoConfigDataSource, GoConfigService goConfigService) {\n+        this.pluginManager = pluginManager;\n+        this.configRepoService = configRepoService;\n+        this.materialRepository = materialRepository;\n+        this.goConfigRepoConfigDataSource = goConfigRepoConfigDataSource;\n+        this.goConfigService = goConfigService;\n+\n+        this.pluginManager.addPluginChangeListener(this);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        this.goConfigService.register(this);", "originalCommit": "153e558b912d2e5d1047b23f749f2633598d1b43", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de92c06498af1d08f056b0c503b295e70e5aedce", "chunk": "diff --git a/server/src/main/java/com/thoughtworks/go/server/service/ConfigRepositoryInitializer.java b/server/src/main/java/com/thoughtworks/go/server/service/ConfigRepositoryInitializer.java\nindex a2908d11c5..c0676bd101 100644\n--- a/server/src/main/java/com/thoughtworks/go/server/service/ConfigRepositoryInitializer.java\n+++ b/server/src/main/java/com/thoughtworks/go/server/service/ConfigRepositoryInitializer.java\n\n@@ -30,8 +30,8 @@ import com.thoughtworks.go.listener.ConfigChangedListener;\n import com.thoughtworks.go.plugin.infra.PluginChangeListener;\n import com.thoughtworks.go.plugin.infra.PluginManager;\n import com.thoughtworks.go.plugin.infra.plugininfo.GoPluginDescriptor;\n-import com.thoughtworks.go.server.initializers.Initializer;\n import com.thoughtworks.go.server.persistence.MaterialRepository;\n+import com.thoughtworks.go.util.SystemEnvironment;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n"}}, {"oid": "de92c06498af1d08f056b0c503b295e70e5aedce", "url": "https://github.com/gocd/gocd/commit/de92c06498af1d08f056b0c503b295e70e5aedce", "message": "Fix comments\n\n* Move registering config change listener to constructor.\n* Log an error when config repository parsing fails.\n* Add a system property to initialize config repositories\n  on startup.\n  Based on the system property value, register the config\n  change and plugin load listeners.", "committedDate": "2020-10-01T05:00:35Z", "type": "commit"}]}