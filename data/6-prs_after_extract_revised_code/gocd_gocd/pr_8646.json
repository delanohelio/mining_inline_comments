{"pr_number": 8646, "pr_title": "Update webhook endpoints to support `SCM_NAME`", "pr_createdAt": "2020-10-12T11:34:22Z", "pr_url": "https://github.com/gocd/gocd/pull/8646", "timeline": [{"oid": "4d7824676191816418e7eaa2a177e58a175ef46e", "url": "https://github.com/gocd/gocd/commit/4d7824676191816418e7eaa2a177e58a175ef46e", "message": "Fix the bitbucket authentication check: we accept token as user but were checking with password which lead to no token provided error", "committedDate": "2020-10-13T04:40:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY3MDQ1OA==", "url": "https://github.com/gocd/gocd/pull/8646#discussion_r503670458", "bodyText": "Wouldn't this take the username and not the personal token?", "author": "marques-work", "createdAt": "2020-10-13T05:11:00Z", "path": "api/api-webhook-v1/src/main/java/com/thoughtworks/go/apiv1/webhook/request/mixins/bitbucketcloud/BitBucketCloudAuth.java", "diffHunk": "@@ -63,7 +63,7 @@ private String getTokenFromHeader(Request request) {\n             }\n \n             String encodedCredentials = new String(Base64.getDecoder().decode(credentials), UTF_8);\n-            return encodedCredentials.contains(\":\") ? split(encodedCredentials, \":\", 2)[1] : encodedCredentials;\n+            return encodedCredentials.contains(\":\") ? split(encodedCredentials, \":\", 2)[0] : encodedCredentials;", "originalCommit": "4d7824676191816418e7eaa2a177e58a175ef46e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY3NTI1OQ==", "url": "https://github.com/gocd/gocd/pull/8646#discussion_r503675259", "bodyText": "In our API docs, we have mentioned to put the webhook secret as username and some random value as password: https://api.gocd.org/current/#hosting-on-bitbucket\nI think Bitbucket does not recognize personal token in url - it only takes username:password format.", "author": "kritika-singh3", "createdAt": "2020-10-13T05:28:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY3MDQ1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY3NjQxMw==", "url": "https://github.com/gocd/gocd/pull/8646#discussion_r503676413", "bodyText": "@kritika-singh3 ah ok, disregard my first point in my review summary then", "author": "marques-work", "createdAt": "2020-10-13T05:32:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY3MDQ1OA=="}], "type": "inlineReview", "revised_code": {"commit": "a556e479b927c9f6657bdab73ab317fad34b9b35", "chunk": "diff --git a/api/api-webhook-v1/src/main/java/com/thoughtworks/go/apiv1/webhook/request/mixins/bitbucketcloud/BitBucketCloudAuth.java b/api/api-webhook-v1/src/main/java/com/thoughtworks/go/apiv1/webhook/request/mixins/bitbucketcloud/BitBucketCloudAuth.java\nindex 9bac959c20..8d9bf78ce3 100644\n--- a/api/api-webhook-v1/src/main/java/com/thoughtworks/go/apiv1/webhook/request/mixins/bitbucketcloud/BitBucketCloudAuth.java\n+++ b/api/api-webhook-v1/src/main/java/com/thoughtworks/go/apiv1/webhook/request/mixins/bitbucketcloud/BitBucketCloudAuth.java\n\n@@ -63,7 +63,7 @@ public interface BitBucketCloudAuth extends HasAuth {\n             }\n \n             String encodedCredentials = new String(Base64.getDecoder().decode(credentials), UTF_8);\n-            return encodedCredentials.contains(\":\") ? split(encodedCredentials, \":\", 2)[0] : encodedCredentials;\n+            return encodedCredentials.contains(\":\") ? split(encodedCredentials, \":\", 2)[1] : encodedCredentials;\n         }\n         return null;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY3MTUzMQ==", "url": "https://github.com/gocd/gocd/pull/8646#discussion_r503671531", "bodyText": "This isn't wrong, but isn't this more simply new String[]{\"scm1\"}?", "author": "marques-work", "createdAt": "2020-10-13T05:14:58Z", "path": "api/api-webhook-v1/src/test/groovy/com/thoughtworks/go/apiv1/webhook/request/push/BitBucketCloudPushRequestTest.java", "diffHunk": "@@ -93,6 +96,26 @@ void shouldGuessTheWebhookUrls(String body) {\n                 );\n     }\n \n+    @ParameterizedTest\n+    @FileSource(files = \"/bitbucket-payload.json\")\n+    void shouldReturnScmNameIfAny(String body) {\n+        Request request = newRequestWithAuthorizationHeader(\"repo:push\", \"\", body);\n+\n+        BitBucketCloudPushRequest bitBucketCloudPushRequest = new BitBucketCloudPushRequest(request);\n+        QueryParamsMap map = mock(QueryParamsMap.class);\n+        when(request.queryMap()).thenReturn(map);\n+        when(map.hasKey(KEY_SCM_NAME)).thenReturn(false);\n+        assertThat(bitBucketCloudPushRequest.getScmNames()).isEmpty();\n+\n+        when(request.queryMap()).thenReturn(map);\n+        when(map.hasKey(KEY_SCM_NAME)).thenReturn(true);\n+\n+        QueryParamsMap value = mock(QueryParamsMap.class);\n+        when(map.get(KEY_SCM_NAME)).thenReturn(value);\n+        when(value.values()).thenReturn(singletonList(\"scm1\").toArray(new String[]{}));", "originalCommit": "4d7824676191816418e7eaa2a177e58a175ef46e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY3NTM0Mw==", "url": "https://github.com/gocd/gocd/pull/8646#discussion_r503675343", "bodyText": "Yes u r right - will update it", "author": "kritika-singh3", "createdAt": "2020-10-13T05:28:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY3MTUzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "a556e479b927c9f6657bdab73ab317fad34b9b35", "chunk": "diff --git a/api/api-webhook-v1/src/test/groovy/com/thoughtworks/go/apiv1/webhook/request/push/BitBucketCloudPushRequestTest.java b/api/api-webhook-v1/src/test/groovy/com/thoughtworks/go/apiv1/webhook/request/push/BitBucketCloudPushRequestTest.java\nindex 412c88c40e..21d7ceac55 100644\n--- a/api/api-webhook-v1/src/test/groovy/com/thoughtworks/go/apiv1/webhook/request/push/BitBucketCloudPushRequestTest.java\n+++ b/api/api-webhook-v1/src/test/groovy/com/thoughtworks/go/apiv1/webhook/request/push/BitBucketCloudPushRequestTest.java\n\n@@ -112,7 +111,7 @@ class BitBucketCloudPushRequestTest {\n \n         QueryParamsMap value = mock(QueryParamsMap.class);\n         when(map.get(KEY_SCM_NAME)).thenReturn(value);\n-        when(value.values()).thenReturn(singletonList(\"scm1\").toArray(new String[]{}));\n+        when(value.values()).thenReturn(new String[]{\"scm1\"});\n         assertThat(bitBucketCloudPushRequest.getScmNames()).containsExactly(\"scm1\");\n     }\n \n"}}, {"oid": "a556e479b927c9f6657bdab73ab317fad34b9b35", "url": "https://github.com/gocd/gocd/commit/a556e479b927c9f6657bdab73ab317fad34b9b35", "message": "Update webhook endpoints to support `SCM_NAME`\n\n - added support for query param `SCM_NAME`. The param can be specified multiple times.\n - the names if received will be mapped w.r.t. schedulable pluggable scm materials - if matched, a MDU will be triggered fr the same.\n - the none-matches will be silently ignored", "committedDate": "2020-10-13T05:35:59Z", "type": "commit"}, {"oid": "4ff35b24f6fd8e4e652ed950c2f56ce7f5ca2aed", "url": "https://github.com/gocd/gocd/commit/4ff35b24f6fd8e4e652ed950c2f56ce7f5ca2aed", "message": "Fix the bitbucket authentication check: we accept token as user but were checking with password which lead to no token provided error", "committedDate": "2020-10-13T05:35:59Z", "type": "commit"}, {"oid": "4ff35b24f6fd8e4e652ed950c2f56ce7f5ca2aed", "url": "https://github.com/gocd/gocd/commit/4ff35b24f6fd8e4e652ed950c2f56ce7f5ca2aed", "message": "Fix the bitbucket authentication check: we accept token as user but were checking with password which lead to no token provided error", "committedDate": "2020-10-13T05:35:59Z", "type": "forcePushed"}]}