{"pr_number": 8503, "pr_title": "Adding support for secrets in pluggable scm materials", "pr_createdAt": "2020-08-31T06:38:12Z", "pr_url": "https://github.com/gocd/gocd/pull/8503", "timeline": [{"oid": "f18070860b9123207eff63cf387816ff264496e4", "url": "https://github.com/gocd/gocd/commit/f18070860b9123207eff63cf387816ff264496e4", "message": "Adding support for secrets in pluggable scm materials (#8234)\n\n - added support for secrets in secure configurations only\n - resolved values will be send to the plugin while MDU\n - MDU: will pass if one of the usages is allowed access to secret config\n - pipeline will get triggered on successful MDU but will fail with Rule Violation Exception", "committedDate": "2020-09-04T10:41:29Z", "type": "forcePushed"}, {"oid": "6cb9ff766642da857ce45c7216f0d982b0bde480", "url": "https://github.com/gocd/gocd/commit/6cb9ff766642da857ce45c7216f0d982b0bde480", "message": "Adding support for secrets in pluggable scm materials (#8234)\n\n - updated the entity for secret config rules to include `pluggable_scm`.\n - added support for secrets in plugin configurations\n - resolved values will be send to the plugin while MDU\n - MDU: will pass if the pluggable scm config is allowed access to secret config\n - pipeline will get triggered on successful MDU", "committedDate": "2020-09-07T03:30:40Z", "type": "forcePushed"}, {"oid": "2702d32aeac59e152ec54c2527c810deae246012", "url": "https://github.com/gocd/gocd/commit/2702d32aeac59e152ec54c2527c810deae246012", "message": "Update secret configs API to v2 as we are introducing support for pluggable scms", "committedDate": "2020-09-07T05:56:39Z", "type": "forcePushed"}, {"oid": "449aa5acb9b0167a5c49ebd627de6a9354094e83", "url": "https://github.com/gocd/gocd/commit/449aa5acb9b0167a5c49ebd627de6a9354094e83", "message": "Update secret configs API to v2 as we are introducing support for pluggable scms", "committedDate": "2020-09-07T10:10:38Z", "type": "forcePushed"}, {"oid": "2b32c30963a759764d4219a4e9bfb16f4616b3dc", "url": "https://github.com/gocd/gocd/commit/2b32c30963a759764d4219a4e9bfb16f4616b3dc", "message": "Update the secret config UI to support pluggable scm", "committedDate": "2020-09-07T10:57:49Z", "type": "forcePushed"}, {"oid": "605e31ef8a30e6e5cd2b35076392103b0b35413c", "url": "https://github.com/gocd/gocd/commit/605e31ef8a30e6e5cd2b35076392103b0b35413c", "message": "Update the secret config UI to support pluggable scm", "committedDate": "2020-09-08T05:07:44Z", "type": "forcePushed"}, {"oid": "5d1edec4e9f01a404b56f76337f346c0e15157b0", "url": "https://github.com/gocd/gocd/commit/5d1edec4e9f01a404b56f76337f346c0e15157b0", "message": "Update the secret config UI to support pluggable scm", "committedDate": "2020-09-08T09:08:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMxNjM1Ng==", "url": "https://github.com/gocd/gocd/pull/8503#discussion_r485316356", "bodyText": "Reason behind introducing a new method: parsing of a secret param and substituting the same needs to check the following cases:\n\nnot secure values: null nd not blank\nsecure values: null nd successful decryption.\n\nThese checks are already performed in getValue() method. Hence, to avoid code duplication, decided to introduce a new method. Let me know if this is not ok.", "author": "kritika-singh3", "createdAt": "2020-09-09T03:33:08Z", "path": "config/config-api/src/main/java/com/thoughtworks/go/domain/config/ConfigurationProperty.java", "diffHunk": "@@ -349,4 +348,26 @@ public ConfigurationProperty deserialize(String name, String value, String encry\n         }\n         return this;\n     }\n+\n+    private void parseSecretParams() {\n+        this.secretParamsForValue = SecretParams.parse(getValue());\n+    }\n+\n+    @Override\n+    public boolean hasSecretParams() {\n+        return !this.secretParamsForValue.isEmpty();\n+    }\n+\n+    @Override\n+    public SecretParams getSecretParams() {\n+        return this.secretParamsForValue;\n+    }\n+\n+    public String getResolvedValue() {\n+        if (hasSecretParams()) {\n+            return getSecretParams().substitute(getValue());\n+        }\n+\n+        return getValue();\n+    }", "originalCommit": "a1b6a59018d1a268220624b49bdd2d1f584024a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg2Nzg5Nw==", "url": "https://github.com/gocd/gocd/pull/8503#discussion_r486867897", "bodyText": "Also, this method is required because there are places wherein we just need the value configured(e.g in API's) and there are times when we would need the values to resolved if it contains secrets (e.g during MDU the resolved values needs to be sent to the plugin)", "author": "maheshp", "createdAt": "2020-09-11T08:46:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMxNjM1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "eeb4414cc9d025dbce7f15de9ca6df15461a3478", "chunk": "diff --git a/config/config-api/src/main/java/com/thoughtworks/go/domain/config/ConfigurationProperty.java b/config/config-api/src/main/java/com/thoughtworks/go/domain/config/ConfigurationProperty.java\nindex 923569273f..b4250d8249 100644\n--- a/config/config-api/src/main/java/com/thoughtworks/go/domain/config/ConfigurationProperty.java\n+++ b/config/config-api/src/main/java/com/thoughtworks/go/domain/config/ConfigurationProperty.java\n\n@@ -350,7 +350,10 @@ public class ConfigurationProperty implements Serializable, Validatable, SecretP\n     }\n \n     private void parseSecretParams() {\n-        this.secretParamsForValue = SecretParams.parse(getValue());\n+        try {\n+            this.secretParamsForValue = SecretParams.parse(getValue());\n+        } catch (Exception ignored) {\n+        }\n     }\n \n     @Override\n"}}, {"oid": "eeb4414cc9d025dbce7f15de9ca6df15461a3478", "url": "https://github.com/gocd/gocd/commit/eeb4414cc9d025dbce7f15de9ca6df15461a3478", "message": "Add support for secrets in plugin configs\n\n - Make ConfigurationProperty implement SecretParamAware\n - Update PluggableScmMaterial to use these secrets\n - add getResolvedValue method which will give the resolved value", "committedDate": "2020-09-09T03:41:03Z", "type": "forcePushed"}, {"oid": "c91e9b164636e93b254c3ee715e7311b8bfc319d", "url": "https://github.com/gocd/gocd/commit/c91e9b164636e93b254c3ee715e7311b8bfc319d", "message": "Add support for secrets in plugin configs\n\n - Make ConfigurationProperty implement SecretParamAware\n - Update PluggableScmMaterial to use these secrets\n - add getResolvedValue method which will give the resolved value", "committedDate": "2020-09-09T03:52:13Z", "type": "forcePushed"}, {"oid": "25aaa39c5114e8eabf3d0a94c4e1712c15f2b998", "url": "https://github.com/gocd/gocd/commit/25aaa39c5114e8eabf3d0a94c4e1712c15f2b998", "message": "Add support for secrets in plugin configs\n\n - Make ConfigurationProperty implement SecretParamAware\n - Update PluggableScmMaterial to use these secrets\n - add getResolvedValue method which will give the resolved value", "committedDate": "2020-09-09T06:06:11Z", "type": "forcePushed"}, {"oid": "3acf3f1c793c671c69d8f3cbae551e84877ddbce", "url": "https://github.com/gocd/gocd/commit/3acf3f1c793c671c69d8f3cbae551e84877ddbce", "message": "Update the secret config UI to support pluggable scm", "committedDate": "2020-09-09T10:29:50Z", "type": "forcePushed"}, {"oid": "6a8c0ef47c72006ba7de160a3a36d7dfe9619921", "url": "https://github.com/gocd/gocd/commit/6a8c0ef47c72006ba7de160a3a36d7dfe9619921", "message": "Update the secret config UI to support pluggable scm", "committedDate": "2020-09-09T10:43:31Z", "type": "forcePushed"}, {"oid": "586f6ec548f41d51ea920311509b40ee40cf8e01", "url": "https://github.com/gocd/gocd/commit/586f6ec548f41d51ea920311509b40ee40cf8e01", "message": "Changes:\n - resolve pluggable scm materials before creating build assignment as the scm configs are added to the intial environmental context", "committedDate": "2020-09-10T08:28:47Z", "type": "forcePushed"}, {"oid": "545c40eefe5ee5b5aa3d41ce2ee876c807421d02", "url": "https://github.com/gocd/gocd/commit/545c40eefe5ee5b5aa3d41ce2ee876c807421d02", "message": "Resolve secrets in pluggable scm config while validation\n\n - during checking connection and is valid call to the plugin - the secret resolution will be done", "committedDate": "2020-09-10T10:51:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg3NjM0MA==", "url": "https://github.com/gocd/gocd/pull/8503#discussion_r486876340", "bodyText": "Can we change configurationProperty.isSecure to have an additional check for secretParams over calling configurationProperty.hasSecretParams()", "author": "maheshp", "createdAt": "2020-09-11T08:57:49Z", "path": "domain/src/main/java/com/thoughtworks/go/config/materials/PluggableSCMMaterial.java", "diffHunk": "@@ -270,28 +269,14 @@ public void populateEnvironmentContext(EnvironmentVariableContext context, Mater\n         context.setProperty(getEnvironmentVariableKey(\"GO_SCM_%s_%s\", \"LABEL\"), materialRevision.getRevision().getRevision(), false);\n         for (ConfigurationProperty configurationProperty : scmConfig.getConfiguration()) {\n             context.setProperty(getEnvironmentVariableKey(\"GO_SCM_%s_%s\", configurationProperty.getConfigurationKey().getName()),\n-                    configurationProperty.getValue(), configurationProperty.isSecure());\n+                    configurationProperty.getResolvedValue(), configurationProperty.isSecure() || configurationProperty.hasSecretParams());", "originalCommit": "4ff9bc9064a88ca671cd5273fa89379d75fd65a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY1NjM3NA==", "url": "https://github.com/gocd/gocd/pull/8503#discussion_r487656374", "bodyText": "The isSecure method is used to decide whether to send the encrypted value or the normal value. Hence, the same was not altered.", "author": "kritika-singh3", "createdAt": "2020-09-14T05:16:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg3NjM0MA=="}], "type": "inlineReview", "revised_code": {"commit": "4c0d1a9e11f0f0b07d13cab74ab7a41c9f6744e3", "chunk": "diff --git a/domain/src/main/java/com/thoughtworks/go/config/materials/PluggableSCMMaterial.java b/domain/src/main/java/com/thoughtworks/go/config/materials/PluggableSCMMaterial.java\nindex f79941c941..ec458b4024 100644\n--- a/domain/src/main/java/com/thoughtworks/go/config/materials/PluggableSCMMaterial.java\n+++ b/domain/src/main/java/com/thoughtworks/go/config/materials/PluggableSCMMaterial.java\n\n@@ -269,14 +270,28 @@ public class PluggableSCMMaterial extends AbstractMaterial implements SecretPara\n         context.setProperty(getEnvironmentVariableKey(\"GO_SCM_%s_%s\", \"LABEL\"), materialRevision.getRevision().getRevision(), false);\n         for (ConfigurationProperty configurationProperty : scmConfig.getConfiguration()) {\n             context.setProperty(getEnvironmentVariableKey(\"GO_SCM_%s_%s\", configurationProperty.getConfigurationKey().getName()),\n-                    configurationProperty.getResolvedValue(), configurationProperty.isSecure() || configurationProperty.hasSecretParams());\n+                    configurationProperty.getValue(), configurationProperty.isSecure());\n         }\n         HashMap<String, String> additionalData = materialRevision.getLatestModification().getAdditionalDataMap();\n         if (additionalData != null) {\n             for (Map.Entry<String, String> entry : additionalData.entrySet()) {\n+                boolean isSecure = false;\n+                for (EnvironmentVariableContext.EnvironmentVariable secureEnvironmentVariable : context.getSecureEnvironmentVariables()) {\n+                    String urlEncodedValue = null;\n+                    try {\n+                        urlEncodedValue = URLEncoder.encode(secureEnvironmentVariable.value(), \"UTF-8\");\n+                    } catch (UnsupportedEncodingException e) {\n+                    }\n+                    boolean isSecureEnvironmentVariableEncoded = !StringUtils.isBlank(urlEncodedValue) && !secureEnvironmentVariable.value().equals(urlEncodedValue);\n+                    if (isSecureEnvironmentVariableEncoded && entry.getValue().contains(urlEncodedValue)) {\n+                        isSecure = true;\n+                        break;\n+                    }\n+                }\n+\n                 String key = entry.getKey();\n                 String value = entry.getValue();\n-                context.setProperty(getEnvironmentVariableKey(\"GO_SCM_%s_%s\", key), value, dataHasSecureValue(context, entry));\n+                context.setProperty(getEnvironmentVariableKey(\"GO_SCM_%s_%s\", key), value, isSecure);\n             }\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjkwNTk4Nw==", "url": "https://github.com/gocd/gocd/pull/8503#discussion_r486905987", "bodyText": "Can we have a resolve method on SecretParamResolver which takes any type of material over having multiple methods for each material type.", "author": "maheshp", "createdAt": "2020-09-11T09:27:02Z", "path": "server/src/main/java/com/thoughtworks/go/server/service/MaterialService.java", "diffHunk": "@@ -160,7 +160,11 @@ public Modifications getModificationsFor(MaterialConfig materialConfig, Paginati\n \n     private void resolveSecretParams(Material material) {\n         if ((material instanceof SecretParamAware) && ((SecretParamAware) material).hasSecretParams()) {\n-            this.secretParamResolver.resolve((ScmMaterial) material);\n+            if (material instanceof ScmMaterial) {\n+                this.secretParamResolver.resolve((ScmMaterial) material);", "originalCommit": "4ff9bc9064a88ca671cd5273fa89379d75fd65a9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4c0d1a9e11f0f0b07d13cab74ab7a41c9f6744e3", "chunk": "diff --git a/server/src/main/java/com/thoughtworks/go/server/service/MaterialService.java b/server/src/main/java/com/thoughtworks/go/server/service/MaterialService.java\nindex 1305f3a1ad..2379fa6215 100644\n--- a/server/src/main/java/com/thoughtworks/go/server/service/MaterialService.java\n+++ b/server/src/main/java/com/thoughtworks/go/server/service/MaterialService.java\n\n@@ -160,11 +160,7 @@ public class MaterialService {\n \n     private void resolveSecretParams(Material material) {\n         if ((material instanceof SecretParamAware) && ((SecretParamAware) material).hasSecretParams()) {\n-            if (material instanceof ScmMaterial) {\n-                this.secretParamResolver.resolve((ScmMaterial) material);\n-            } else if (material instanceof PluggableSCMMaterial) {\n-                this.secretParamResolver.resolve((PluggableSCMMaterial) material);\n-            }\n+            this.secretParamResolver.resolve((ScmMaterial) material);\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjkwNzk1Mg==", "url": "https://github.com/gocd/gocd/pull/8503#discussion_r486907952", "bodyText": "Do not log an error here. We are throwing an exception, leave it to services to handle exception and log errors.", "author": "maheshp", "createdAt": "2020-09-11T09:28:59Z", "path": "server/src/main/java/com/thoughtworks/go/server/service/RulesService.java", "diffHunk": "@@ -78,15 +80,32 @@ public boolean validateSecretConfigReferences(ScmMaterial scmMaterial) {\n         return true;\n     }\n \n-    private void addError(HashMap<CaseInsensitiveString, StringBuilder> pipelinesWithErrors, CaseInsensitiveString pipelineName, String message) {\n-        if (pipelinesWithErrors == null) {\n-            pipelinesWithErrors = new HashMap<>();\n+    public void validateSecretConfigReferences(PluggableSCMMaterial pluggableSCMMaterial) {\n+        SCM scmConfig = pluggableSCMMaterial.getScmConfig();\n+        SecretParams secretParams = pluggableSCMMaterial.getSecretParams();\n+        if (secretParams.isEmpty()) {\n+            LOGGER.debug(\"No secret params available in pluggable SCM {}.\", pluggableSCMMaterial.getDisplayName());\n+            return;\n         }\n-        if (!pipelinesWithErrors.containsKey(pipelineName)) {\n-            pipelinesWithErrors.put(pipelineName, new StringBuilder());\n+        HashMap<CaseInsensitiveString, StringBuilder> pipelinesWithErrors = new HashMap<>();\n+        String scmConfigName = scmConfig.getName();\n+\n+        secretParams.groupBySecretConfigId()\n+                .forEach((secretConfigId, secretParamsToResolve) -> {\n+                    SecretConfig secretConfig = goConfigService.getSecretConfigById(secretConfigId);\n+                    if (secretConfig == null) {\n+                        addError(pipelinesWithErrors, new CaseInsensitiveString(scmConfigName), format(\"Pluggable SCM '%s' is referring to none-existent secret config '%s'.\", scmConfigName, secretConfigId));\n+                    } else if (!secretConfig.canRefer(scmConfig.getClass(), scmConfigName)) {\n+                        addError(pipelinesWithErrors, new CaseInsensitiveString(scmConfigName), format(\"Pluggable SCM '%s' does not have permission to refer to secrets using secret config '%s'\", scmConfigName, secretConfigId));\n+                    }\n+                });\n+\n+        StringBuilder errorMessage = new StringBuilder();\n+        if (!pipelinesWithErrors.isEmpty()) {\n+            errorMessage.append(StringUtils.join(pipelinesWithErrors.values(), '\\n').trim());\n+            LOGGER.error(\"[Material Update] Failure: {}\", errorMessage.toString());", "originalCommit": "4ff9bc9064a88ca671cd5273fa89379d75fd65a9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4c0d1a9e11f0f0b07d13cab74ab7a41c9f6744e3", "chunk": "diff --git a/server/src/main/java/com/thoughtworks/go/server/service/RulesService.java b/server/src/main/java/com/thoughtworks/go/server/service/RulesService.java\nindex 4d9dc7f045..834320b157 100644\n--- a/server/src/main/java/com/thoughtworks/go/server/service/RulesService.java\n+++ b/server/src/main/java/com/thoughtworks/go/server/service/RulesService.java\n\n@@ -80,32 +78,15 @@ public class RulesService {\n         return true;\n     }\n \n-    public void validateSecretConfigReferences(PluggableSCMMaterial pluggableSCMMaterial) {\n-        SCM scmConfig = pluggableSCMMaterial.getScmConfig();\n-        SecretParams secretParams = pluggableSCMMaterial.getSecretParams();\n-        if (secretParams.isEmpty()) {\n-            LOGGER.debug(\"No secret params available in pluggable SCM {}.\", pluggableSCMMaterial.getDisplayName());\n-            return;\n+    private void addError(HashMap<CaseInsensitiveString, StringBuilder> pipelinesWithErrors, CaseInsensitiveString pipelineName, String message) {\n+        if (pipelinesWithErrors == null) {\n+            pipelinesWithErrors = new HashMap<>();\n         }\n-        HashMap<CaseInsensitiveString, StringBuilder> pipelinesWithErrors = new HashMap<>();\n-        String scmConfigName = scmConfig.getName();\n-\n-        secretParams.groupBySecretConfigId()\n-                .forEach((secretConfigId, secretParamsToResolve) -> {\n-                    SecretConfig secretConfig = goConfigService.getSecretConfigById(secretConfigId);\n-                    if (secretConfig == null) {\n-                        addError(pipelinesWithErrors, new CaseInsensitiveString(scmConfigName), format(\"Pluggable SCM '%s' is referring to none-existent secret config '%s'.\", scmConfigName, secretConfigId));\n-                    } else if (!secretConfig.canRefer(scmConfig.getClass(), scmConfigName)) {\n-                        addError(pipelinesWithErrors, new CaseInsensitiveString(scmConfigName), format(\"Pluggable SCM '%s' does not have permission to refer to secrets using secret config '%s'\", scmConfigName, secretConfigId));\n-                    }\n-                });\n-\n-        StringBuilder errorMessage = new StringBuilder();\n-        if (!pipelinesWithErrors.isEmpty()) {\n-            errorMessage.append(StringUtils.join(pipelinesWithErrors.values(), '\\n').trim());\n-            LOGGER.error(\"[Material Update] Failure: {}\", errorMessage.toString());\n-            throw new RulesViolationException(errorMessage.toString());\n+        if (!pipelinesWithErrors.containsKey(pipelineName)) {\n+            pipelinesWithErrors.put(pipelineName, new StringBuilder());\n         }\n+        StringBuilder stringBuilder = pipelinesWithErrors.get(pipelineName).append(message);\n+        pipelinesWithErrors.put(pipelineName, stringBuilder);\n     }\n \n     public boolean validateSecretConfigReferences(EnvironmentConfig environmentConfig) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjkxODYxMg==", "url": "https://github.com/gocd/gocd/pull/8503#discussion_r486918612", "bodyText": "Does it make sense to move hasSecretParams() check inside the resolve method?", "author": "maheshp", "createdAt": "2020-09-11T09:39:55Z", "path": "server/src/main/java/com/thoughtworks/go/server/service/SecretParamResolver.java", "diffHunk": "@@ -49,6 +50,18 @@ public SecretParamResolver(SecretsExtension secretsExtension, GoConfigService go\n         this.rulesService = rulesService;\n     }\n \n+    public void resolve(List<Material> materials) {\n+        materials.stream()\n+                .filter((material) -> material instanceof SecretParamAware && ((SecretParamAware) material).hasSecretParams())", "originalCommit": "aa5a9dae275b3e9544059e5477a22ecc5461ee79", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4c0d1a9e11f0f0b07d13cab74ab7a41c9f6744e3", "chunk": "diff --git a/server/src/main/java/com/thoughtworks/go/server/service/SecretParamResolver.java b/server/src/main/java/com/thoughtworks/go/server/service/SecretParamResolver.java\nindex 1b66d1ce31..e0694a0a0c 100644\n--- a/server/src/main/java/com/thoughtworks/go/server/service/SecretParamResolver.java\n+++ b/server/src/main/java/com/thoughtworks/go/server/service/SecretParamResolver.java\n\n@@ -50,30 +48,12 @@ public class SecretParamResolver {\n         this.rulesService = rulesService;\n     }\n \n-    public void resolve(List<Material> materials) {\n-        materials.stream()\n-                .filter((material) -> material instanceof SecretParamAware && ((SecretParamAware) material).hasSecretParams())\n-                .forEach((material) -> {\n-                    if (material instanceof ScmMaterial) {\n-                        this.resolve((ScmMaterial) material);\n-                    } else if (material instanceof PluggableSCMMaterial) {\n-                        this.resolve((PluggableSCMMaterial) material);\n-                    }\n-                });\n-    }\n-\n     public void resolve(ScmMaterial scmMaterial) {\n         rulesService.validateSecretConfigReferences(scmMaterial);\n \n         resolve(scmMaterial.getSecretParams());\n     }\n \n-    public void resolve(PluggableSCMMaterial material) {\n-        rulesService.validateSecretConfigReferences(material);\n-\n-        resolve(material.getSecretParams());\n-    }\n-\n     // Method used for check_connection in new pipeline flow\n     public void resolve(ScmMaterial scmMaterial, String pipelineGroupName) {\n         rulesService.validateSecretConfigReferences(scmMaterial.getSecretParams(), PipelineConfigs.class, pipelineGroupName, format(\"Material with url: '%s' in Pipeline Group:\", scmMaterial.getUriForDisplay()));\n"}}, {"oid": "4c0d1a9e11f0f0b07d13cab74ab7a41c9f6744e3", "url": "https://github.com/gocd/gocd/commit/4c0d1a9e11f0f0b07d13cab74ab7a41c9f6744e3", "message": "Add support for secrets in plugin configs\n  - Make ConfigurationProperty implement SecretParamAware\n  - add getResolvedValue method which will give the resolved value", "committedDate": "2020-09-14T04:44:41Z", "type": "commit"}, {"oid": "46ec03f672d3581400566d08afa944a5ec9cf36a", "url": "https://github.com/gocd/gocd/commit/46ec03f672d3581400566d08afa944a5ec9cf36a", "message": "Adding support for secrets in pluggable scm materials\n  - updated the entity for secret config rules to include `pluggable_scm`.\n  - resolved values will be send to the plugin while MDU\n  - MDU: will pass if the pluggable scm config is allowed access to secret config\n  - pipeline will get triggered on successful MDU", "committedDate": "2020-09-14T04:44:41Z", "type": "commit"}, {"oid": "24bd16f57b1239de3a5d6841decbb2408327cca2", "url": "https://github.com/gocd/gocd/commit/24bd16f57b1239de3a5d6841decbb2408327cca2", "message": "Update secret configs API to v2 as we are introducing support for pluggable scms", "committedDate": "2020-09-14T04:44:41Z", "type": "commit"}, {"oid": "368e39cf92c28c24cc9aaf0df61c0dbf24a12c23", "url": "https://github.com/gocd/gocd/commit/368e39cf92c28c24cc9aaf0df61c0dbf24a12c23", "message": "Update the secret config UI to support pluggable scm", "committedDate": "2020-09-14T04:44:41Z", "type": "commit"}, {"oid": "2c37ff557673ec8c869bd4d774f61e5996c13e20", "url": "https://github.com/gocd/gocd/commit/2c37ff557673ec8c869bd4d774f61e5996c13e20", "message": "Changes:\n - resolve pluggable scm materials before creating build assignment as the scm configs are added to the intial environmental context", "committedDate": "2020-09-14T04:44:41Z", "type": "commit"}, {"oid": "cc72f91c4d58484951f9333ffbc46973021ee0cd", "url": "https://github.com/gocd/gocd/commit/cc72f91c4d58484951f9333ffbc46973021ee0cd", "message": "Resolve secrets in pluggable scm config while validation\n\n - during checking connection and is valid call to the plugin - the secret resolution will be done", "committedDate": "2020-09-14T05:15:29Z", "type": "forcePushed"}, {"oid": "3dd21913662b5e33d360b62c03f43dfe71a6b7cd", "url": "https://github.com/gocd/gocd/commit/3dd21913662b5e33d360b62c03f43dfe71a6b7cd", "message": "Resolve secrets in pluggable scm config while validation\n\n - during checking connection and is valid call to the plugin - the secret resolution will be done", "committedDate": "2020-09-14T09:27:10Z", "type": "forcePushed"}, {"oid": "8527094c4080aae0861a7a37e62812473d992360", "url": "https://github.com/gocd/gocd/commit/8527094c4080aae0861a7a37e62812473d992360", "message": "Resolve secrets in pluggable scm config while validation\n\n - during checking connection and is valid call to the plugin - the secret resolution will be done", "committedDate": "2020-09-14T09:29:20Z", "type": "commit"}, {"oid": "8527094c4080aae0861a7a37e62812473d992360", "url": "https://github.com/gocd/gocd/commit/8527094c4080aae0861a7a37e62812473d992360", "message": "Resolve secrets in pluggable scm config while validation\n\n - during checking connection and is valid call to the plugin - the secret resolution will be done", "committedDate": "2020-09-14T09:29:20Z", "type": "forcePushed"}]}