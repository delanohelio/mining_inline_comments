{"pr_number": 7745, "pr_title": "Migrate Package Repositories SPA to typescript", "pr_createdAt": "2020-02-18T06:26:10Z", "pr_url": "https://github.com/gocd/gocd/pull/7745", "timeline": [{"oid": "984bfc669702165bfddda3ec1c1c7a2bdbb35f00", "url": "https://github.com/gocd/gocd/commit/984bfc669702165bfddda3ec1c1c7a2bdbb35f00", "message": "Added search functionality for package repo spa", "committedDate": "2020-02-18T07:10:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU4NTEyMw==", "url": "https://github.com/gocd/gocd/pull/7745#discussion_r380585123", "bodyText": "@kritika-singh3 - can we use the publicly documented Package Repositories and Packages API to fetch this information.\nIMO, we should always prefer public APIs for rendering entity information on the SPAs, unless its absolutely required to build a newer internal API.", "author": "GaneshSPatil", "createdAt": "2020-02-18T10:28:38Z", "path": "api/api-internal-package-repositories-v1/src/main/java/com/thoughtworks/go/apiv1/internalpackagerepositories/InternalPackageRepositoriesControllerV1.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 ThoughtWorks, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.thoughtworks.go.apiv1.internalpackagerepositories;\n+\n+import com.thoughtworks.go.api.ApiController;\n+import com.thoughtworks.go.api.ApiVersion;\n+import com.thoughtworks.go.api.CrudController;\n+import com.thoughtworks.go.api.base.OutputWriter;\n+import com.thoughtworks.go.api.spring.ApiAuthenticationHelper;\n+import com.thoughtworks.go.apiv1.internalpackagerepositories.representers.PackageRepositoriesRepresenter;\n+import com.thoughtworks.go.config.exceptions.EntityType;\n+import com.thoughtworks.go.config.exceptions.HttpException;\n+import com.thoughtworks.go.domain.packagerepository.PackageRepositories;\n+import com.thoughtworks.go.server.service.EntityHashingService;\n+import com.thoughtworks.go.server.service.materials.PackageRepositoryService;\n+import com.thoughtworks.go.spark.Routes;\n+import com.thoughtworks.go.spark.spring.SparkSpringController;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import spark.Request;\n+import spark.Response;\n+\n+import java.io.IOException;\n+import java.util.function.Consumer;\n+\n+import static spark.Spark.*;\n+\n+@Component\n+public class InternalPackageRepositoriesControllerV1 extends ApiController implements SparkSpringController {\n+\n+    private final ApiAuthenticationHelper apiAuthenticationHelper;\n+    private final PackageRepositoryService packageRepositoryService;\n+\n+    @Autowired\n+    public InternalPackageRepositoriesControllerV1(ApiAuthenticationHelper apiAuthenticationHelper, PackageRepositoryService packageRepositoryService) {\n+        super(ApiVersion.v1);\n+        this.apiAuthenticationHelper = apiAuthenticationHelper;\n+        this.packageRepositoryService = packageRepositoryService;\n+    }\n+\n+    @Override\n+    public String controllerBasePath() {\n+        return Routes.PackageRepository.INTERNAL_BASE;\n+    }\n+\n+    @Override\n+    public void setupRoutes() {\n+        path(controllerBasePath(), () -> {\n+             before(\"\", mimeType, this::setContentType);\n+             before(\"/*\", mimeType, this::setContentType);\n+\n+            before(\"\", mimeType, this.apiAuthenticationHelper::checkAdminUserOrGroupAdminUserAnd403);", "originalCommit": "2aec3029d9fbeacbe8808eaebe50f75d1a21f818", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU4OTkyNg==", "url": "https://github.com/gocd/gocd/pull/7745#discussion_r380589926", "bodyText": "Reason for going with an internal API:\n\nThe public API for Package Repositories does not contain all the info related to the packages (i.e. auto_update and configurations)\nYes, I make two API calls to get all package repositories and packages. But, the package name is not unique across the GoCD instance - it is unique only inside a particular package repository. Hence, merging the two list (IMO) got a bit of a overhead (checking with both repo id and package name).\n\nLet me know if you think otherwise.", "author": "kritika-singh3", "createdAt": "2020-02-18T10:37:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU4NTEyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDYwODY4Ng==", "url": "https://github.com/gocd/gocd/pull/7745#discussion_r380608686", "bodyText": "As per the API documentation,\n\nThe public API for Package Repositories does not contain all the info related to the packages (i.e. auto_update and configurations)\n\nThe package repositories API will not contain detailed packages information (as it is a referenced entity). But, the public packages API does contain the auto_update and configurations information.\n\nYes, I make two API calls to get all package repositories and packages. But, the package name is not unique across the GoCD instance - it is unique only inside a particular package repository. Hence, merging the two list (IMO) got a bit of a overhead (checking with both repo id and package name).\n\nWhat is the overhead? I mean, it is the part of the validation that both repo-id and package-name can not be duplicated, we're not doing anything extra.\n\nNevertheless, If we ourselves can not use the entity API on the entity SPA, then the usability of such API is questionable :)", "author": "GaneshSPatil", "createdAt": "2020-02-18T11:15:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU4NTEyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA2MzA2MA==", "url": "https://github.com/gocd/gocd/pull/7745#discussion_r381063060", "bodyText": "Agree with you. Will make the change.", "author": "kritika-singh3", "createdAt": "2020-02-19T03:45:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU4NTEyMw=="}], "type": "inlineReview", "revised_code": {"commit": "6b612117091541bf18d8b7dc0740d6aa018ef56f", "chunk": "diff --git a/api/api-internal-package-repositories-v1/src/main/java/com/thoughtworks/go/apiv1/internalpackagerepositories/InternalPackageRepositoriesControllerV1.java b/api/api-internal-package-repositories-v1/src/main/java/com/thoughtworks/go/apiv1/internalpackagerepositories/InternalPackageRepositoriesControllerV1.java\ndeleted file mode 100644\nindex 3d7ed835ab..0000000000\n--- a/api/api-internal-package-repositories-v1/src/main/java/com/thoughtworks/go/apiv1/internalpackagerepositories/InternalPackageRepositoriesControllerV1.java\n+++ /dev/null\n\n@@ -1,76 +0,0 @@\n-/*\n- * Copyright 2020 ThoughtWorks, Inc.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.thoughtworks.go.apiv1.internalpackagerepositories;\n-\n-import com.thoughtworks.go.api.ApiController;\n-import com.thoughtworks.go.api.ApiVersion;\n-import com.thoughtworks.go.api.CrudController;\n-import com.thoughtworks.go.api.base.OutputWriter;\n-import com.thoughtworks.go.api.spring.ApiAuthenticationHelper;\n-import com.thoughtworks.go.apiv1.internalpackagerepositories.representers.PackageRepositoriesRepresenter;\n-import com.thoughtworks.go.config.exceptions.EntityType;\n-import com.thoughtworks.go.config.exceptions.HttpException;\n-import com.thoughtworks.go.domain.packagerepository.PackageRepositories;\n-import com.thoughtworks.go.server.service.EntityHashingService;\n-import com.thoughtworks.go.server.service.materials.PackageRepositoryService;\n-import com.thoughtworks.go.spark.Routes;\n-import com.thoughtworks.go.spark.spring.SparkSpringController;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n-import spark.Request;\n-import spark.Response;\n-\n-import java.io.IOException;\n-import java.util.function.Consumer;\n-\n-import static spark.Spark.*;\n-\n-@Component\n-public class InternalPackageRepositoriesControllerV1 extends ApiController implements SparkSpringController {\n-\n-    private final ApiAuthenticationHelper apiAuthenticationHelper;\n-    private final PackageRepositoryService packageRepositoryService;\n-\n-    @Autowired\n-    public InternalPackageRepositoriesControllerV1(ApiAuthenticationHelper apiAuthenticationHelper, PackageRepositoryService packageRepositoryService) {\n-        super(ApiVersion.v1);\n-        this.apiAuthenticationHelper = apiAuthenticationHelper;\n-        this.packageRepositoryService = packageRepositoryService;\n-    }\n-\n-    @Override\n-    public String controllerBasePath() {\n-        return Routes.PackageRepository.INTERNAL_BASE;\n-    }\n-\n-    @Override\n-    public void setupRoutes() {\n-        path(controllerBasePath(), () -> {\n-             before(\"\", mimeType, this::setContentType);\n-             before(\"/*\", mimeType, this::setContentType);\n-\n-            before(\"\", mimeType, this.apiAuthenticationHelper::checkAdminUserOrGroupAdminUserAnd403);\n-\n-             get(\"\", mimeType, this::index);\n-        });\n-    }\n-\n-     public String index(Request request, Response response) throws IOException {\n-         PackageRepositories packageRepositories = packageRepositoryService.getPackageRepositories();\n-         return writerForTopLevelObject(request, response, outputWriter -> PackageRepositoriesRepresenter.toJSON(outputWriter, packageRepositories));\n-     }\n-}\n"}}, {"oid": "6b612117091541bf18d8b7dc0740d6aa018ef56f", "url": "https://github.com/gocd/gocd/commit/6b612117091541bf18d8b7dc0740d6aa018ef56f", "message": "update packages repo spa to fetch all pkg repos and pkgs separately and merge them during rendering", "committedDate": "2020-02-19T06:18:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE1MDUxOQ==", "url": "https://github.com/gocd/gocd/pull/7745#discussion_r381150519", "bodyText": "remove this controller?", "author": "GaneshSPatil", "createdAt": "2020-02-19T08:52:41Z", "path": "api/api-packages-v1/src/main/java/com/thoughtworks/go/apiv1/packages/InternalPackagesControllerV1.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 ThoughtWorks, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.thoughtworks.go.apiv1.packages;\n+\n+import com.thoughtworks.go.api.ApiController;\n+import com.thoughtworks.go.api.ApiVersion;\n+import com.thoughtworks.go.api.spring.ApiAuthenticationHelper;\n+import com.thoughtworks.go.apiv1.packages.representers.PackageUsageRepresenter;\n+import com.thoughtworks.go.config.PipelineConfig;\n+import com.thoughtworks.go.config.PipelineConfigs;\n+import com.thoughtworks.go.server.service.GoConfigService;\n+import com.thoughtworks.go.server.service.materials.PackageRepositoryService;\n+import com.thoughtworks.go.spark.Routes;\n+import com.thoughtworks.go.spark.spring.SparkSpringController;\n+import com.thoughtworks.go.util.Pair;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import spark.Request;\n+import spark.Response;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static java.util.Collections.emptyList;\n+import static spark.Spark.*;\n+\n+public class InternalPackagesControllerV1 extends ApiController implements SparkSpringController {", "originalCommit": "6b612117091541bf18d8b7dc0740d6aa018ef56f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE1NDYxNQ==", "url": "https://github.com/gocd/gocd/pull/7745#discussion_r381154615", "bodyText": "Should I make the Usages API public?", "author": "kritika-singh3", "createdAt": "2020-02-19T09:00:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE1MDUxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE1OTcxOA==", "url": "https://github.com/gocd/gocd/pull/7745#discussion_r381159718", "bodyText": "yes", "author": "GaneshSPatil", "createdAt": "2020-02-19T09:10:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE1MDUxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc1OTMwNQ==", "url": "https://github.com/gocd/gocd/pull/7745#discussion_r390759305", "bodyText": "#7841", "author": "kritika-singh3", "createdAt": "2020-03-11T05:57:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE1MDUxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "1a4ede7ed65cf9740109303ed11ec7b106ba396b", "chunk": "diff --git a/api/api-packages-v1/src/main/java/com/thoughtworks/go/apiv1/packages/InternalPackagesControllerV1.java b/api/api-packages-v1/src/main/java/com/thoughtworks/go/apiv1/packages/InternalPackagesControllerV1.java\ndeleted file mode 100644\nindex 0b1683fa55..0000000000\n--- a/api/api-packages-v1/src/main/java/com/thoughtworks/go/apiv1/packages/InternalPackagesControllerV1.java\n+++ /dev/null\n\n@@ -1,76 +0,0 @@\n-/*\n- * Copyright 2020 ThoughtWorks, Inc.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.thoughtworks.go.apiv1.packages;\n-\n-import com.thoughtworks.go.api.ApiController;\n-import com.thoughtworks.go.api.ApiVersion;\n-import com.thoughtworks.go.api.spring.ApiAuthenticationHelper;\n-import com.thoughtworks.go.apiv1.packages.representers.PackageUsageRepresenter;\n-import com.thoughtworks.go.config.PipelineConfig;\n-import com.thoughtworks.go.config.PipelineConfigs;\n-import com.thoughtworks.go.server.service.GoConfigService;\n-import com.thoughtworks.go.server.service.materials.PackageRepositoryService;\n-import com.thoughtworks.go.spark.Routes;\n-import com.thoughtworks.go.spark.spring.SparkSpringController;\n-import com.thoughtworks.go.util.Pair;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import spark.Request;\n-import spark.Response;\n-\n-import java.io.IOException;\n-import java.util.List;\n-import java.util.Map;\n-\n-import static java.util.Collections.emptyList;\n-import static spark.Spark.*;\n-\n-public class InternalPackagesControllerV1 extends ApiController implements SparkSpringController {\n-    private final ApiAuthenticationHelper apiAuthenticationHelper;\n-    private final GoConfigService goConfigService;\n-\n-    @Autowired\n-    public InternalPackagesControllerV1(ApiAuthenticationHelper apiAuthenticationHelper, GoConfigService goConfigService) {\n-        super(ApiVersion.v1);\n-        this.apiAuthenticationHelper = apiAuthenticationHelper;\n-        this.goConfigService = goConfigService;\n-    }\n-    @Override\n-    public String controllerBasePath() {\n-        return Routes.Packages.INTERNAL_BASE;\n-    }\n-\n-    @Override\n-    public void setupRoutes() {\n-        path(controllerBasePath(), () -> {\n-            before(\"\", mimeType, this::setContentType);\n-            before(\"/*\", mimeType, this::setContentType);\n-\n-            before(Routes.Packages.USAGES, mimeType, this.apiAuthenticationHelper::checkAdminUserOrGroupAdminUserAnd403);\n-\n-            get(Routes.Packages.USAGES, mimeType, this::usagesForPackage);\n-        });\n-    }\n-\n-    public String usagesForPackage(Request request, Response response) throws IOException {\n-        String packageId = request.params(\"package_id\");\n-\n-        Map<String, List<Pair<PipelineConfig, PipelineConfigs>>> allUsages = goConfigService.getPackageUsageInPipelines();\n-        List<Pair<PipelineConfig, PipelineConfigs>> packageUsageInPipelines = allUsages.getOrDefault(packageId, emptyList());\n-\n-        return writerForTopLevelObject(request, response, outputWriter -> PackageUsageRepresenter.toJSON(outputWriter, packageUsageInPipelines));\n-    }\n-}\n"}}, {"oid": "1a4ede7ed65cf9740109303ed11ec7b106ba396b", "url": "https://github.com/gocd/gocd/commit/1a4ede7ed65cf9740109303ed11ec7b106ba396b", "message": "Fix failing tests", "committedDate": "2020-03-18T14:25:59Z", "type": "forcePushed"}, {"oid": "c891b164c9ef7e91abd3ea11e6ef70c3a3259a60", "url": "https://github.com/gocd/gocd/commit/c891b164c9ef7e91abd3ea11e6ef70c3a3259a60", "message": "Fix failing tests", "committedDate": "2020-03-18T14:28:54Z", "type": "forcePushed"}, {"oid": "9b6b0de8f0e178e7c8c57c0f318f054a34c5c9f8", "url": "https://github.com/gocd/gocd/commit/9b6b0de8f0e178e7c8c57c0f318f054a34c5c9f8", "message": "Fix failing tests", "committedDate": "2020-03-18T14:43:39Z", "type": "forcePushed"}, {"oid": "5a7ce49a2269a075d632ad163b263bf57005c426", "url": "https://github.com/gocd/gocd/commit/5a7ce49a2269a075d632ad163b263bf57005c426", "message": "Fix failing tests", "committedDate": "2020-03-19T03:15:10Z", "type": "forcePushed"}, {"oid": "8e64943d1f78f5c2cdd5f2876b222bcb3b5e45c7", "url": "https://github.com/gocd/gocd/commit/8e64943d1f78f5c2cdd5f2876b222bcb3b5e45c7", "message": "Move package repositories page to typescript\n\n - added a toggle `show_old_pkg_repos_spa` for the page. Default is false.\n - initial commit for the new spa", "committedDate": "2020-03-24T15:42:17Z", "type": "commit"}, {"oid": "36625cc8fa4dcafa782435e88608a3e065114429", "url": "https://github.com/gocd/gocd/commit/36625cc8fa4dcafa782435e88608a3e065114429", "message": "Added CRUD and relevant models\nAdded CRUD operations for package repository and packages - Updated the models for validations", "committedDate": "2020-03-24T15:48:20Z", "type": "commit"}, {"oid": "31975798425afd92e0df08cc285c4a39f1001180", "url": "https://github.com/gocd/gocd/commit/31975798425afd92e0df08cc285c4a39f1001180", "message": "Update CollapsiblePanel component to recognize nonExpandable attribute which will prevent any user interactions to collapse the panel. It will always be in expanded state", "committedDate": "2020-03-24T15:48:20Z", "type": "commit"}, {"oid": "558555513655808ea12816f921a8d0715d14abc7", "url": "https://github.com/gocd/gocd/commit/558555513655808ea12816f921a8d0715d14abc7", "message": "Showcase all the package repositories and the associated packages in a read-only view.", "committedDate": "2020-03-24T15:48:21Z", "type": "commit"}, {"oid": "551807d8acd00aa97ccb2e35462fdf032b369a20", "url": "https://github.com/gocd/gocd/commit/551807d8acd00aa97ccb2e35462fdf032b369a20", "message": "Added usages api to get the usages of a particular package id", "committedDate": "2020-03-24T15:48:43Z", "type": "commit"}, {"oid": "8cef5be1e6f997f35d62b1aa76328f7fe0172e15", "url": "https://github.com/gocd/gocd/commit/8cef5be1e6f997f35d62b1aa76328f7fe0172e15", "message": "Updated the package repository and package widget to showcase action buttons as applicable.\n\nCurrently the plugin view is not rendered as the plugin does not send any view template.", "committedDate": "2020-03-24T15:48:44Z", "type": "commit"}, {"oid": "2bfd948f4bf00ab1bae7494949466e96c4a336dd", "url": "https://github.com/gocd/gocd/commit/2bfd948f4bf00ab1bae7494949466e96c4a336dd", "message": "Added specs", "committedDate": "2020-03-24T15:49:04Z", "type": "commit"}, {"oid": "59c5ea62d4ef38527c46ceac821682e66bba6e4b", "url": "https://github.com/gocd/gocd/commit/59c5ea62d4ef38527c46ceac821682e66bba6e4b", "message": "Added search functionality for package repo spa", "committedDate": "2020-03-24T15:49:05Z", "type": "commit"}, {"oid": "2c044122118fcfa675505bf1d4b164953bd1a410", "url": "https://github.com/gocd/gocd/commit/2c044122118fcfa675505bf1d4b164953bd1a410", "message": "Showcase no plugin installed msg along side package repos installed.\n - removed the plugin info passed down the hierarchy", "committedDate": "2020-03-24T15:49:05Z", "type": "commit"}, {"oid": "603a163561bdb9f2c81c49b44d2c8edd77dd332e", "url": "https://github.com/gocd/gocd/commit/603a163561bdb9f2c81c49b44d2c8edd77dd332e", "message": "update packages repo spa to fetch all pkg repos and pkgs separately and merge them during rendering", "committedDate": "2020-03-24T15:49:05Z", "type": "commit"}, {"oid": "ab33e260463a40f063c977245d8f4e7a7b6e4718", "url": "https://github.com/gocd/gocd/commit/ab33e260463a40f063c977245d8f4e7a7b6e4718", "message": "Render plugin view", "committedDate": "2020-03-24T15:49:05Z", "type": "commit"}, {"oid": "d8517dd7557b731a0c0a6ade680344f7b161ad49", "url": "https://github.com/gocd/gocd/commit/d8517dd7557b731a0c0a6ade680344f7b161ad49", "message": "Showcase some info abt pkg repos if none are configured\n\n - updated models to recognise errors from server", "committedDate": "2020-03-24T15:49:25Z", "type": "commit"}, {"oid": "f2359debdf20735569436039117343c472c7e0d6", "url": "https://github.com/gocd/gocd/commit/f2359debdf20735569436039117343c472c7e0d6", "message": "Fix failing tests", "committedDate": "2020-03-24T15:49:27Z", "type": "commit"}, {"oid": "f2359debdf20735569436039117343c472c7e0d6", "url": "https://github.com/gocd/gocd/commit/f2359debdf20735569436039117343c472c7e0d6", "message": "Fix failing tests", "committedDate": "2020-03-24T15:49:27Z", "type": "forcePushed"}]}