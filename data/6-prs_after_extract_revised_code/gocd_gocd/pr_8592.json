{"pr_number": 8592, "pr_title": "Add secrets support elastic agent configurations", "pr_createdAt": "2020-09-24T09:36:28Z", "pr_url": "https://github.com/gocd/gocd/pull/8592", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzk5OTQyNQ==", "url": "https://github.com/gocd/gocd/pull/8592#discussion_r497999425", "bodyText": "Will there be case wherein we want to add secure fields and not resolve them?", "author": "maheshp", "createdAt": "2020-10-01T05:57:06Z", "path": "config/config-api/src/main/java/com/thoughtworks/go/domain/config/Configuration.java", "diffHunk": "@@ -158,10 +159,23 @@ public void addError(String fieldName, String message) {\n     }\n \n     public Map<String, String> getConfigurationAsMap(boolean addSecureFields) {\n+        return getConfigurationAsMap(addSecureFields, false);\n+    }\n+\n+\n+    /**\n+     * Returns the configuration values a map of key-value pair\n+     * @param addSecureFields should add secure fields\n+     * @param useResolvedValue should try to resolve any secret params found.\n+     * @throws UnresolvedSecretParamException if useResolvedValue is set to true and the secrets are not resolved\n+     * @return map of configs\n+     */\n+    public Map<String, String> getConfigurationAsMap(boolean addSecureFields, boolean useResolvedValue) {", "originalCommit": "7b09e0d6d4e9d27bb240fcd847ab906262bab330", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA2NDU0Mg==", "url": "https://github.com/gocd/gocd/pull/8592#discussion_r498064542", "bodyText": "Yes. When we are calling the plugins which does not support secrets as of yet.\nE.g. authorization, artifact.", "author": "kritika-singh3", "createdAt": "2020-10-01T08:17:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzk5OTQyNQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODAwNjc3Ng==", "url": "https://github.com/gocd/gocd/pull/8592#discussion_r498006776", "bodyText": "If secrets resolution for one of the cluster profile fails, the plugin would not get a ping for any of the clusters.\nHow do we notify users in cases of secret resolution failures?", "author": "maheshp", "createdAt": "2020-10-01T06:19:38Z", "path": "server/src/main/java/com/thoughtworks/go/server/service/ElasticAgentPluginService.java", "diffHunk": "@@ -134,14 +139,15 @@ public void heartbeat() {\n \n         for (PluginDescriptor descriptor : elasticAgentPluginRegistry.getPlugins()) {\n             List<ClusterProfile> clusterProfiles = clusterProfilesService.getPluginProfiles().findByPluginId(descriptor.id());\n+            resolveSecrets(clusterProfiles);", "originalCommit": "58dbf7e42e31c9d4a537ed970e47972bdf7f0344", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA3NzU3MA==", "url": "https://github.com/gocd/gocd/pull/8592#discussion_r498077570", "bodyText": "If secret resolution fails for any cluster profiles, the server ping call will not go for the remaining of the clusters. Also, we will not be able to notify the users about the agents for which the plugin has been deleted.\nWhile the error gets logged in server logs, do you think we should catch them nd display a server health message?", "author": "kritika-singh3", "createdAt": "2020-10-01T08:38:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODAwNjc3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "5e984a1d5a80eed9cf1fd5e77c025350866ea087", "chunk": "diff --git a/server/src/main/java/com/thoughtworks/go/server/service/ElasticAgentPluginService.java b/server/src/main/java/com/thoughtworks/go/server/service/ElasticAgentPluginService.java\nindex ce34fb67c9..33268d8569 100644\n--- a/server/src/main/java/com/thoughtworks/go/server/service/ElasticAgentPluginService.java\n+++ b/server/src/main/java/com/thoughtworks/go/server/service/ElasticAgentPluginService.java\n\n@@ -138,10 +143,11 @@ public class ElasticAgentPluginService {\n         long pingMessageTimeToLive = elasticPluginHeartBeatInterval - 10000L;\n \n         for (PluginDescriptor descriptor : elasticAgentPluginRegistry.getPlugins()) {\n+            elasticAgentsOfMissingPlugins.remove(descriptor.id());\n             List<ClusterProfile> clusterProfiles = clusterProfilesService.getPluginProfiles().findByPluginId(descriptor.id());\n-            resolveSecrets(clusterProfiles);\n+            boolean secretsResolved = resolveSecrets(descriptor.id(), clusterProfiles);\n+            if (!secretsResolved) continue;\n             serverPingQueue.post(new ServerPingMessage(descriptor.id(), clusterProfiles), pingMessageTimeToLive);\n-            elasticAgentsOfMissingPlugins.remove(descriptor.id());\n             serverHealthService.removeByScope(scope(descriptor.id()));\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODAwODYwOA==", "url": "https://github.com/gocd/gocd/pull/8592#discussion_r498008608", "bodyText": "In what cases would the clusterProfile be null, I am guessing for the Azure plugin. Can you please check?\nReturning false in these conditions might break things?", "author": "maheshp", "createdAt": "2020-10-01T06:24:47Z", "path": "server/src/main/java/com/thoughtworks/go/server/service/ElasticAgentPluginService.java", "diffHunk": "@@ -237,14 +244,15 @@ private void logToJobConsole(JobIdentifier identifier, String message) {\n     }\n \n     public boolean shouldAssignWork(ElasticAgentMetadata metadata, String environment, ElasticProfile elasticProfile, ClusterProfile clusterProfile, JobIdentifier identifier) {\n-        Map<String, String> clusterProfileProperties = clusterProfile != null ? clusterProfile.getConfigurationAsMap(true) : Collections.EMPTY_MAP;\n-        GoPluginDescriptor pluginDescriptor = pluginManager.getPluginDescriptorFor(metadata.elasticPluginId());\n-        Map<String, String> configuration = elasticProfile.getConfigurationAsMap(true);\n-\n-        if (!StringUtils.equals(clusterProfile.getPluginId(), metadata.elasticPluginId())) {\n+        if (clusterProfile == null || !StringUtils.equals(clusterProfile.getPluginId(), metadata.elasticPluginId())) {", "originalCommit": "58dbf7e42e31c9d4a537ed970e47972bdf7f0344", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA2OTczOQ==", "url": "https://github.com/gocd/gocd/pull/8592#discussion_r498069739", "bodyText": "Yes, in case the GoCD server was upgraded and their were few scheduled jobs which now won't have a cluster profile.\nNo it would not. The check was preset earlier as well. Also, we do a job reload based on timer, which checks for the above scenario and cancels the job with a message. Hence, sending false won't break things.", "author": "kritika-singh3", "createdAt": "2020-10-01T08:26:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODAwODYwOA=="}], "type": "inlineReview", "revised_code": {"commit": "5e984a1d5a80eed9cf1fd5e77c025350866ea087", "chunk": "diff --git a/server/src/main/java/com/thoughtworks/go/server/service/ElasticAgentPluginService.java b/server/src/main/java/com/thoughtworks/go/server/service/ElasticAgentPluginService.java\nindex ce34fb67c9..33268d8569 100644\n--- a/server/src/main/java/com/thoughtworks/go/server/service/ElasticAgentPluginService.java\n+++ b/server/src/main/java/com/thoughtworks/go/server/service/ElasticAgentPluginService.java\n\n@@ -207,48 +209,42 @@ public class ElasticAgentPluginService {\n             jobCreationTimeMap.put(plan.getJobId(), timeProvider.currentTimeMillis());\n             ElasticProfile elasticProfile = plan.getElasticProfile();\n             ClusterProfile clusterProfile = plan.getClusterProfile();\n+            JobIdentifier jobIdentifier = plan.getIdentifier();\n             if (clusterProfile == null) {\n                 String cancellationMessage = \"\\nThis job was cancelled by GoCD. The version of your GoCD server requires elastic profiles to be associated with a cluster(required from Version 19.3.0). \" +\n                         \"This job is configured to run on an Elastic Agent, but the associated elastic profile does not have information about the cluster.  \\n\\n\" +\n                         \"The possible reason for the missing cluster information on the elastic profile could be, an upgrade of the GoCD server to a version >= 19.3.0 before the completion of the job.\\n\\n\" +\n                         \"A re-run of this job should fix this issue.\";\n-                logToJobConsole(plan.getIdentifier(), cancellationMessage);\n-                scheduleService.cancelJob(plan.getIdentifier());\n+                logToJobConsole(jobIdentifier, cancellationMessage);\n+                scheduleService.cancelJob(jobIdentifier);\n             } else if (elasticAgentPluginRegistry.has(clusterProfile.getPluginId())) {\n                 String environment = environmentConfigService.envForPipeline(plan.getPipelineName());\n-                resolveSecrets(clusterProfile, elasticProfile);\n-                createAgentQueue.post(new CreateAgentMessage(ephemeralAutoRegisterKeyService.autoRegisterKey(), environment, elasticProfile, clusterProfile, plan.getIdentifier()), messageTimeToLive);\n-                serverHealthService.removeByScope(forJob(plan.getIdentifier().getPipelineName(), plan.getIdentifier().getStageName(), plan.getIdentifier().getBuildName()));\n+                boolean secretsResolved = resolveSecrets(jobIdentifier, clusterProfile, elasticProfile);\n+                if (secretsResolved) {\n+                    createAgentQueue.post(new CreateAgentMessage(ephemeralAutoRegisterKeyService.autoRegisterKey(), environment, elasticProfile, clusterProfile, jobIdentifier), messageTimeToLive);\n+                    serverHealthService.removeByScope(scopeForJob(jobIdentifier));\n+                }\n             } else {\n-                String jobConfigIdentifier = plan.getIdentifier().jobConfigIdentifier().toString();\n+                String jobConfigIdentifier = jobIdentifier.jobConfigIdentifier().toString();\n                 String description = format(\"Plugin [%s] associated with %s is missing. Either the plugin is not \" +\n                         \"installed or could not be registered. Please check plugins tab \" +\n                         \"and server logs for more details.\", clusterProfile.getPluginId(), jobConfigIdentifier);\n-                serverHealthService.update(ServerHealthState.error(format(\"Unable to find agent for %s\",\n-                        jobConfigIdentifier), description, HealthStateType.general(forJob(plan.getIdentifier().getPipelineName(), plan.getIdentifier().getStageName(), plan.getIdentifier().getBuildName()))));\n+                serverHealthService.update(error(format(\"Unable to find agent for %s\",\n+                        jobConfigIdentifier), description, general(scopeForJob(jobIdentifier))));\n                 LOGGER.error(description);\n             }\n         }\n     }\n \n-    private void logToJobConsole(JobIdentifier identifier, String message) {\n-        try {\n-            consoleService.appendToConsoleLog(identifier, message);\n-        } catch (IllegalArtifactLocationException | IOException e) {\n-            LOGGER.error(format(\"Failed to add message(%s) to the job(%s) console\", message, identifier), e);\n-        }\n-    }\n-\n-    private Predicate<JobPlan> isElasticAgent() {\n-        return JobPlan::requiresElasticAgent;\n-    }\n-\n     public boolean shouldAssignWork(ElasticAgentMetadata metadata, String environment, ElasticProfile elasticProfile, ClusterProfile clusterProfile, JobIdentifier identifier) {\n         if (clusterProfile == null || !StringUtils.equals(clusterProfile.getPluginId(), metadata.elasticPluginId())) {\n             return false;\n         }\n \n-        resolveSecrets(clusterProfile, elasticProfile);\n+        boolean secretsResolved = resolveSecrets(identifier, clusterProfile, elasticProfile);\n+        if (!secretsResolved) {\n+            return false;\n+        }\n         Map<String, String> clusterProfileProperties = clusterProfile.getConfigurationAsMap(true, true);\n         GoPluginDescriptor pluginDescriptor = pluginManager.getPluginDescriptorFor(metadata.elasticPluginId());\n         Map<String, String> configuration = elasticProfile.getConfigurationAsMap(true, true);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODAwOTg3Mw==", "url": "https://github.com/gocd/gocd/pull/8592#discussion_r498009873", "bodyText": "What happens when secret resolution fails and what should we do on failure?", "author": "maheshp", "createdAt": "2020-10-01T06:28:15Z", "path": "server/src/main/java/com/thoughtworks/go/server/service/ElasticAgentPluginService.java", "diffHunk": "@@ -237,14 +244,15 @@ private void logToJobConsole(JobIdentifier identifier, String message) {\n     }\n \n     public boolean shouldAssignWork(ElasticAgentMetadata metadata, String environment, ElasticProfile elasticProfile, ClusterProfile clusterProfile, JobIdentifier identifier) {\n-        Map<String, String> clusterProfileProperties = clusterProfile != null ? clusterProfile.getConfigurationAsMap(true) : Collections.EMPTY_MAP;\n-        GoPluginDescriptor pluginDescriptor = pluginManager.getPluginDescriptorFor(metadata.elasticPluginId());\n-        Map<String, String> configuration = elasticProfile.getConfigurationAsMap(true);\n-\n-        if (!StringUtils.equals(clusterProfile.getPluginId(), metadata.elasticPluginId())) {\n+        if (clusterProfile == null || !StringUtils.equals(clusterProfile.getPluginId(), metadata.elasticPluginId())) {\n             return false;\n         }\n \n+        resolveSecrets(clusterProfile, elasticProfile);", "originalCommit": "58dbf7e42e31c9d4a537ed970e47972bdf7f0344", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA4NTIwMw==", "url": "https://github.com/gocd/gocd/pull/8592#discussion_r498085203", "bodyText": "The shouldAssignWork is called when a elastic agent registers with GoCD. In case, secret resolution fails, the agent will not be assigned any job nd will remain idle.\nWe can catch them nd ignore it.", "author": "kritika-singh3", "createdAt": "2020-10-01T08:51:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODAwOTg3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "5e984a1d5a80eed9cf1fd5e77c025350866ea087", "chunk": "diff --git a/server/src/main/java/com/thoughtworks/go/server/service/ElasticAgentPluginService.java b/server/src/main/java/com/thoughtworks/go/server/service/ElasticAgentPluginService.java\nindex ce34fb67c9..33268d8569 100644\n--- a/server/src/main/java/com/thoughtworks/go/server/service/ElasticAgentPluginService.java\n+++ b/server/src/main/java/com/thoughtworks/go/server/service/ElasticAgentPluginService.java\n\n@@ -207,48 +209,42 @@ public class ElasticAgentPluginService {\n             jobCreationTimeMap.put(plan.getJobId(), timeProvider.currentTimeMillis());\n             ElasticProfile elasticProfile = plan.getElasticProfile();\n             ClusterProfile clusterProfile = plan.getClusterProfile();\n+            JobIdentifier jobIdentifier = plan.getIdentifier();\n             if (clusterProfile == null) {\n                 String cancellationMessage = \"\\nThis job was cancelled by GoCD. The version of your GoCD server requires elastic profiles to be associated with a cluster(required from Version 19.3.0). \" +\n                         \"This job is configured to run on an Elastic Agent, but the associated elastic profile does not have information about the cluster.  \\n\\n\" +\n                         \"The possible reason for the missing cluster information on the elastic profile could be, an upgrade of the GoCD server to a version >= 19.3.0 before the completion of the job.\\n\\n\" +\n                         \"A re-run of this job should fix this issue.\";\n-                logToJobConsole(plan.getIdentifier(), cancellationMessage);\n-                scheduleService.cancelJob(plan.getIdentifier());\n+                logToJobConsole(jobIdentifier, cancellationMessage);\n+                scheduleService.cancelJob(jobIdentifier);\n             } else if (elasticAgentPluginRegistry.has(clusterProfile.getPluginId())) {\n                 String environment = environmentConfigService.envForPipeline(plan.getPipelineName());\n-                resolveSecrets(clusterProfile, elasticProfile);\n-                createAgentQueue.post(new CreateAgentMessage(ephemeralAutoRegisterKeyService.autoRegisterKey(), environment, elasticProfile, clusterProfile, plan.getIdentifier()), messageTimeToLive);\n-                serverHealthService.removeByScope(forJob(plan.getIdentifier().getPipelineName(), plan.getIdentifier().getStageName(), plan.getIdentifier().getBuildName()));\n+                boolean secretsResolved = resolveSecrets(jobIdentifier, clusterProfile, elasticProfile);\n+                if (secretsResolved) {\n+                    createAgentQueue.post(new CreateAgentMessage(ephemeralAutoRegisterKeyService.autoRegisterKey(), environment, elasticProfile, clusterProfile, jobIdentifier), messageTimeToLive);\n+                    serverHealthService.removeByScope(scopeForJob(jobIdentifier));\n+                }\n             } else {\n-                String jobConfigIdentifier = plan.getIdentifier().jobConfigIdentifier().toString();\n+                String jobConfigIdentifier = jobIdentifier.jobConfigIdentifier().toString();\n                 String description = format(\"Plugin [%s] associated with %s is missing. Either the plugin is not \" +\n                         \"installed or could not be registered. Please check plugins tab \" +\n                         \"and server logs for more details.\", clusterProfile.getPluginId(), jobConfigIdentifier);\n-                serverHealthService.update(ServerHealthState.error(format(\"Unable to find agent for %s\",\n-                        jobConfigIdentifier), description, HealthStateType.general(forJob(plan.getIdentifier().getPipelineName(), plan.getIdentifier().getStageName(), plan.getIdentifier().getBuildName()))));\n+                serverHealthService.update(error(format(\"Unable to find agent for %s\",\n+                        jobConfigIdentifier), description, general(scopeForJob(jobIdentifier))));\n                 LOGGER.error(description);\n             }\n         }\n     }\n \n-    private void logToJobConsole(JobIdentifier identifier, String message) {\n-        try {\n-            consoleService.appendToConsoleLog(identifier, message);\n-        } catch (IllegalArtifactLocationException | IOException e) {\n-            LOGGER.error(format(\"Failed to add message(%s) to the job(%s) console\", message, identifier), e);\n-        }\n-    }\n-\n-    private Predicate<JobPlan> isElasticAgent() {\n-        return JobPlan::requiresElasticAgent;\n-    }\n-\n     public boolean shouldAssignWork(ElasticAgentMetadata metadata, String environment, ElasticProfile elasticProfile, ClusterProfile clusterProfile, JobIdentifier identifier) {\n         if (clusterProfile == null || !StringUtils.equals(clusterProfile.getPluginId(), metadata.elasticPluginId())) {\n             return false;\n         }\n \n-        resolveSecrets(clusterProfile, elasticProfile);\n+        boolean secretsResolved = resolveSecrets(identifier, clusterProfile, elasticProfile);\n+        if (!secretsResolved) {\n+            return false;\n+        }\n         Map<String, String> clusterProfileProperties = clusterProfile.getConfigurationAsMap(true, true);\n         GoPluginDescriptor pluginDescriptor = pluginManager.getPluginDescriptorFor(metadata.elasticPluginId());\n         Map<String, String> configuration = elasticProfile.getConfigurationAsMap(true, true);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODAxMTgxNg==", "url": "https://github.com/gocd/gocd/pull/8592#discussion_r498011816", "bodyText": "How do we handle secret resolution failures?\nWe are removing the job from jobCreationTimeMap before secrets are resolved. Will there be any repercussions of secret resolution failures after removing it from the map.", "author": "maheshp", "createdAt": "2020-10-01T06:33:34Z", "path": "server/src/main/java/com/thoughtworks/go/server/service/ElasticAgentPluginService.java", "diffHunk": "@@ -311,9 +330,25 @@ public void jobCompleted(JobInstance job) {\n \n         ElasticProfile elasticProfile = job.getPlan().getElasticProfile();\n         ClusterProfile clusterProfile = job.getPlan().getClusterProfile();\n-        Map<String, String> elasticProfileConfiguration = elasticProfile.getConfigurationAsMap(true);\n-        Map<String, String> clusterProfileConfiguration = clusterProfile != null ? clusterProfile.getConfigurationAsMap(true) : Collections.EMPTY_MAP;\n-\n+        secretParamResolver.resolve(elasticProfile);\n+        Map<String, String> elasticProfileConfiguration = elasticProfile.getConfigurationAsMap(true, true);\n+        Map<String, String> clusterProfileConfiguration = emptyMap();\n+        if (clusterProfile != null) {\n+            secretParamResolver.resolve(clusterProfile);", "originalCommit": "58dbf7e42e31c9d4a537ed970e47972bdf7f0344", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA4NjUyOQ==", "url": "https://github.com/gocd/gocd/pull/8592#discussion_r498086529", "bodyText": "This is called when a job gets completed. Secret resolution failure would mean that the plugin is not notified nd hence will not be able to delete the job. Also, the job plan related information in DB is also not deleted.", "author": "kritika-singh3", "createdAt": "2020-10-01T08:53:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODAxMTgxNg=="}], "type": "inlineReview", "revised_code": {"commit": "5e984a1d5a80eed9cf1fd5e77c025350866ea087", "chunk": "diff --git a/server/src/main/java/com/thoughtworks/go/server/service/ElasticAgentPluginService.java b/server/src/main/java/com/thoughtworks/go/server/service/ElasticAgentPluginService.java\nindex ce34fb67c9..33268d8569 100644\n--- a/server/src/main/java/com/thoughtworks/go/server/service/ElasticAgentPluginService.java\n+++ b/server/src/main/java/com/thoughtworks/go/server/service/ElasticAgentPluginService.java\n\n@@ -327,28 +323,73 @@ public class ElasticAgentPluginService {\n \n         String pluginId = agentInstance.elasticAgentMetadata().elasticPluginId();\n         String elasticAgentId = agentInstance.elasticAgentMetadata().elasticAgentId();\n-\n+        JobIdentifier jobIdentifier = job.getIdentifier();\n         ElasticProfile elasticProfile = job.getPlan().getElasticProfile();\n         ClusterProfile clusterProfile = job.getPlan().getClusterProfile();\n-        secretParamResolver.resolve(elasticProfile);\n-        Map<String, String> elasticProfileConfiguration = elasticProfile.getConfigurationAsMap(true, true);\n-        Map<String, String> clusterProfileConfiguration = emptyMap();\n-        if (clusterProfile != null) {\n-            secretParamResolver.resolve(clusterProfile);\n-            clusterProfileConfiguration = clusterProfile.getConfigurationAsMap(true, true);\n+        try {\n+            secretParamResolver.resolve(elasticProfile);\n+            Map<String, String> elasticProfileConfiguration = elasticProfile.getConfigurationAsMap(true, true);\n+            Map<String, String> clusterProfileConfiguration = emptyMap();\n+            if (clusterProfile != null) {\n+                secretParamResolver.resolve(clusterProfile);\n+                clusterProfileConfiguration = clusterProfile.getConfigurationAsMap(true, true);\n+            }\n+            elasticAgentPluginRegistry.reportJobCompletion(pluginId, elasticAgentId, jobIdentifier, elasticProfileConfiguration, clusterProfileConfiguration);\n+        } catch (RulesViolationException | SecretResolutionFailureException e) {\n+            String description = format(\"The job completion call to the plugin for the job identifier [%s] failed for secrets resolution: %s \", jobIdentifier.toString(), e.getMessage());\n+            ServerHealthState healthState = error(\"Failed to notify plugin\", description, general(scopeForJob(jobIdentifier)));\n+            healthState.setTimeout(Timeout.FIVE_MINUTES);\n+            serverHealthService.update(healthState);\n+            LOGGER.error(description);\n         }\n-        elasticAgentPluginRegistry.reportJobCompletion(pluginId, elasticAgentId, job.getIdentifier(), elasticProfileConfiguration, clusterProfileConfiguration);\n     }\n \n-    private void resolveSecrets(List<ClusterProfile> clusterProfiles) {\n-        for (ClusterProfile clusterProfile : clusterProfiles) {\n-            secretParamResolver.resolve(clusterProfile);\n+    private void logToJobConsole(JobIdentifier identifier, String message) {\n+        try {\n+            consoleService.appendToConsoleLog(identifier, message);\n+        } catch (IllegalArtifactLocationException | IOException e) {\n+            LOGGER.error(format(\"Failed to add message(%s) to the job(%s) console\", message, identifier), e);\n         }\n     }\n \n-    private void resolveSecrets(ClusterProfile clusterProfile, ElasticProfile elasticProfile) {\n-        if (clusterProfile != null)\n-            secretParamResolver.resolve(clusterProfile);\n-        secretParamResolver.resolve(elasticProfile);\n+    private Predicate<JobPlan> isElasticAgent() {\n+        return JobPlan::requiresElasticAgent;\n+    }\n+\n+    private HealthStateScope scope(String pluginId) {\n+        return HealthStateScope.aboutPlugin(pluginId, \"missingPlugin\");\n+    }\n+\n+    @NotNull\n+    private HealthStateScope scopeForJob(JobIdentifier jobIdentifier) {\n+        return forJob(jobIdentifier.getPipelineName(), jobIdentifier.getStageName(), jobIdentifier.getBuildName());\n+    }\n+\n+    private boolean resolveSecrets(String pluginId, List<ClusterProfile> clusterProfiles) {\n+        try {\n+            for (ClusterProfile clusterProfile : clusterProfiles) {\n+                secretParamResolver.resolve(clusterProfile);\n+            }\n+        } catch (RulesViolationException | SecretResolutionFailureException e) {\n+            String description = format(\"Secrets resolution failed for cluster profile associated with plugin [%s]: %s \", pluginId, e.getMessage());\n+            serverHealthService.update(error(format(\"Ping failed for '%s' plugin\", pluginId), description, general(scope(pluginId))));\n+            LOGGER.error(description);\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    private boolean resolveSecrets(JobIdentifier jobIdentifier, ClusterProfile clusterProfile, ElasticProfile elasticProfile) {\n+        try {\n+            if (clusterProfile != null)\n+                secretParamResolver.resolve(clusterProfile);\n+            secretParamResolver.resolve(elasticProfile);\n+        } catch (RulesViolationException | SecretResolutionFailureException e) {\n+            String cancellationMessage = format(\"\\nThis job was cancelled by GoCD. This job is configured to run on an elastic agent, but the associated elastic configurations failed for secrets resolution: %s\", e.getMessage());\n+            logToJobConsole(jobIdentifier, cancellationMessage);\n+            scheduleService.cancelJob(jobIdentifier);\n+            return false;\n+        }\n+        return true;\n     }\n }\n"}}, {"oid": "4c45f5db78fa004a81e84fde5b6dcf12b35e1813", "url": "https://github.com/gocd/gocd/commit/4c45f5db78fa004a81e84fde5b6dcf12b35e1813", "message": "Resolving secrets for `clusterProfileChanges`\n - secrets will be resolved for both original/older cluster profile and the updated/newer one", "committedDate": "2020-10-06T04:34:34Z", "type": "forcePushed"}, {"oid": "5e984a1d5a80eed9cf1fd5e77c025350866ea087", "url": "https://github.com/gocd/gocd/commit/5e984a1d5a80eed9cf1fd5e77c025350866ea087", "message": "Changes:\n - for createAgents and shouldAssign call: on secret failure - cancel the job. This is similar to wht we do for secret failure in pipelines\n - for job completed call - catch the rules related exception - add a server health message with a 5 minute timeout and log it\n - for heartbeat - catch the rules exception - add a server health message. This will get cleared up on a heartbeat call with the secrets fixed\n - for status reports - updated the controller to return 422 with the exception message", "committedDate": "2020-10-06T10:03:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQ3MzYzNw==", "url": "https://github.com/gocd/gocd/pull/8592#discussion_r501473637", "bodyText": "As discussed we need to add a server health message if secret resolution fails and log it as well.", "author": "maheshp", "createdAt": "2020-10-08T06:21:19Z", "path": "server/src/main/java/com/thoughtworks/go/server/service/ClusterProfilesChangedPluginNotifier.java", "diffHunk": "@@ -22,47 +22,59 @@\n import com.thoughtworks.go.listener.ConfigChangedListener;\n import com.thoughtworks.go.listener.EntityConfigChangedListener;\n import com.thoughtworks.go.plugin.access.elastic.ElasticAgentPluginRegistry;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n+import java.util.Map;\n+\n @Component\n public class ClusterProfilesChangedPluginNotifier extends EntityConfigChangedListener<ClusterProfile> implements ConfigChangedListener {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ClusterProfilesChangedPluginNotifier.class);\n     private ClusterProfiles existingClusterProfiles;\n     private ElasticAgentPluginRegistry registry;\n+    private final SecretParamResolver secretParamResolver;\n     private GoConfigService goConfigService;\n \n     @Autowired\n-    public ClusterProfilesChangedPluginNotifier(GoConfigService goConfigService, ElasticAgentPluginRegistry registry) {\n+    public ClusterProfilesChangedPluginNotifier(GoConfigService goConfigService, ElasticAgentPluginRegistry registry, SecretParamResolver secretParamResolver) {\n         this.goConfigService = goConfigService;\n         this.existingClusterProfiles = goConfigService.getElasticConfig().getClusterProfiles();\n         this.registry = registry;\n+        this.secretParamResolver = secretParamResolver;\n         goConfigService.register(this);\n     }\n \n     @Override\n     public void onEntityConfigChange(ClusterProfile updatedClusterProfile) {\n+        LOGGER.debug(\"Resolving the updated cluster profile {} for secrets\", updatedClusterProfile);\n+        secretParamResolver.resolve(updatedClusterProfile);", "originalCommit": "5e984a1d5a80eed9cf1fd5e77c025350866ea087", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f74ccc061beb3d3b35c43dbcd83311494ea9270a", "chunk": "diff --git a/server/src/main/java/com/thoughtworks/go/server/service/ClusterProfilesChangedPluginNotifier.java b/server/src/main/java/com/thoughtworks/go/server/service/ClusterProfilesChangedPluginNotifier.java\nindex a29515279d..9f223414ac 100644\n--- a/server/src/main/java/com/thoughtworks/go/server/service/ClusterProfilesChangedPluginNotifier.java\n+++ b/server/src/main/java/com/thoughtworks/go/server/service/ClusterProfilesChangedPluginNotifier.java\n\n@@ -22,12 +22,20 @@ import com.thoughtworks.go.domain.ClusterProfilesChangedStatus;\n import com.thoughtworks.go.listener.ConfigChangedListener;\n import com.thoughtworks.go.listener.EntityConfigChangedListener;\n import com.thoughtworks.go.plugin.access.elastic.ElasticAgentPluginRegistry;\n+import com.thoughtworks.go.plugin.access.exceptions.SecretResolutionFailureException;\n+import com.thoughtworks.go.server.exceptions.RulesViolationException;\n+import com.thoughtworks.go.serverhealth.ServerHealthService;\n+import com.thoughtworks.go.serverhealth.ServerHealthState;\n+import com.thoughtworks.go.utils.Timeout;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n-import java.util.Map;\n+import static com.thoughtworks.go.serverhealth.HealthStateScope.aboutPlugin;\n+import static com.thoughtworks.go.serverhealth.HealthStateType.general;\n+import static com.thoughtworks.go.serverhealth.ServerHealthState.error;\n+import static java.lang.String.format;\n \n @Component\n public class ClusterProfilesChangedPluginNotifier extends EntityConfigChangedListener<ClusterProfile> implements ConfigChangedListener {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQ3NDI1Mg==", "url": "https://github.com/gocd/gocd/pull/8592#discussion_r501474252", "bodyText": "Resolving secrets for updated cluster profile: {}", "author": "maheshp", "createdAt": "2020-10-08T06:22:59Z", "path": "server/src/main/java/com/thoughtworks/go/server/service/ClusterProfilesChangedPluginNotifier.java", "diffHunk": "@@ -22,47 +22,59 @@\n import com.thoughtworks.go.listener.ConfigChangedListener;\n import com.thoughtworks.go.listener.EntityConfigChangedListener;\n import com.thoughtworks.go.plugin.access.elastic.ElasticAgentPluginRegistry;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n+import java.util.Map;\n+\n @Component\n public class ClusterProfilesChangedPluginNotifier extends EntityConfigChangedListener<ClusterProfile> implements ConfigChangedListener {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ClusterProfilesChangedPluginNotifier.class);\n     private ClusterProfiles existingClusterProfiles;\n     private ElasticAgentPluginRegistry registry;\n+    private final SecretParamResolver secretParamResolver;\n     private GoConfigService goConfigService;\n \n     @Autowired\n-    public ClusterProfilesChangedPluginNotifier(GoConfigService goConfigService, ElasticAgentPluginRegistry registry) {\n+    public ClusterProfilesChangedPluginNotifier(GoConfigService goConfigService, ElasticAgentPluginRegistry registry, SecretParamResolver secretParamResolver) {\n         this.goConfigService = goConfigService;\n         this.existingClusterProfiles = goConfigService.getElasticConfig().getClusterProfiles();\n         this.registry = registry;\n+        this.secretParamResolver = secretParamResolver;\n         goConfigService.register(this);\n     }\n \n     @Override\n     public void onEntityConfigChange(ClusterProfile updatedClusterProfile) {\n+        LOGGER.debug(\"Resolving the updated cluster profile {} for secrets\", updatedClusterProfile);", "originalCommit": "5e984a1d5a80eed9cf1fd5e77c025350866ea087", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f74ccc061beb3d3b35c43dbcd83311494ea9270a", "chunk": "diff --git a/server/src/main/java/com/thoughtworks/go/server/service/ClusterProfilesChangedPluginNotifier.java b/server/src/main/java/com/thoughtworks/go/server/service/ClusterProfilesChangedPluginNotifier.java\nindex a29515279d..9f223414ac 100644\n--- a/server/src/main/java/com/thoughtworks/go/server/service/ClusterProfilesChangedPluginNotifier.java\n+++ b/server/src/main/java/com/thoughtworks/go/server/service/ClusterProfilesChangedPluginNotifier.java\n\n@@ -22,12 +22,20 @@ import com.thoughtworks.go.domain.ClusterProfilesChangedStatus;\n import com.thoughtworks.go.listener.ConfigChangedListener;\n import com.thoughtworks.go.listener.EntityConfigChangedListener;\n import com.thoughtworks.go.plugin.access.elastic.ElasticAgentPluginRegistry;\n+import com.thoughtworks.go.plugin.access.exceptions.SecretResolutionFailureException;\n+import com.thoughtworks.go.server.exceptions.RulesViolationException;\n+import com.thoughtworks.go.serverhealth.ServerHealthService;\n+import com.thoughtworks.go.serverhealth.ServerHealthState;\n+import com.thoughtworks.go.utils.Timeout;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n-import java.util.Map;\n+import static com.thoughtworks.go.serverhealth.HealthStateScope.aboutPlugin;\n+import static com.thoughtworks.go.serverhealth.HealthStateType.general;\n+import static com.thoughtworks.go.serverhealth.ServerHealthState.error;\n+import static java.lang.String.format;\n \n @Component\n public class ClusterProfilesChangedPluginNotifier extends EntityConfigChangedListener<ClusterProfile> implements ConfigChangedListener {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQ4MjE4Mg==", "url": "https://github.com/gocd/gocd/pull/8592#discussion_r501482182", "bodyText": "Guess we need to fail the job, not cancel. We fail in case of BuildAssignmentService as well.\nThe message needs to be update appropriately.\nYou will also need to add a message on the JobStatusTopic so that the JobStatusListener is called.\nAlso, I think the resolveSecrets methods should only resolve the secrets and not handle the errors. Let the callers handle exception and take necessary actions.", "author": "maheshp", "createdAt": "2020-10-08T06:43:04Z", "path": "server/src/main/java/com/thoughtworks/go/server/service/ElasticAgentPluginService.java", "diffHunk": "@@ -308,12 +323,73 @@ public void jobCompleted(JobInstance job) {\n \n         String pluginId = agentInstance.elasticAgentMetadata().elasticPluginId();\n         String elasticAgentId = agentInstance.elasticAgentMetadata().elasticAgentId();\n-\n+        JobIdentifier jobIdentifier = job.getIdentifier();\n         ElasticProfile elasticProfile = job.getPlan().getElasticProfile();\n         ClusterProfile clusterProfile = job.getPlan().getClusterProfile();\n-        Map<String, String> elasticProfileConfiguration = elasticProfile.getConfigurationAsMap(true);\n-        Map<String, String> clusterProfileConfiguration = clusterProfile != null ? clusterProfile.getConfigurationAsMap(true) : Collections.EMPTY_MAP;\n+        try {\n+            secretParamResolver.resolve(elasticProfile);\n+            Map<String, String> elasticProfileConfiguration = elasticProfile.getConfigurationAsMap(true, true);\n+            Map<String, String> clusterProfileConfiguration = emptyMap();\n+            if (clusterProfile != null) {\n+                secretParamResolver.resolve(clusterProfile);\n+                clusterProfileConfiguration = clusterProfile.getConfigurationAsMap(true, true);\n+            }\n+            elasticAgentPluginRegistry.reportJobCompletion(pluginId, elasticAgentId, jobIdentifier, elasticProfileConfiguration, clusterProfileConfiguration);\n+        } catch (RulesViolationException | SecretResolutionFailureException e) {\n+            String description = format(\"The job completion call to the plugin for the job identifier [%s] failed for secrets resolution: %s \", jobIdentifier.toString(), e.getMessage());\n+            ServerHealthState healthState = error(\"Failed to notify plugin\", description, general(scopeForJob(jobIdentifier)));\n+            healthState.setTimeout(Timeout.FIVE_MINUTES);\n+            serverHealthService.update(healthState);\n+            LOGGER.error(description);\n+        }\n+    }\n+\n+    private void logToJobConsole(JobIdentifier identifier, String message) {\n+        try {\n+            consoleService.appendToConsoleLog(identifier, message);\n+        } catch (IllegalArtifactLocationException | IOException e) {\n+            LOGGER.error(format(\"Failed to add message(%s) to the job(%s) console\", message, identifier), e);\n+        }\n+    }\n+\n+    private Predicate<JobPlan> isElasticAgent() {\n+        return JobPlan::requiresElasticAgent;\n+    }\n+\n+    private HealthStateScope scope(String pluginId) {\n+        return HealthStateScope.aboutPlugin(pluginId, \"missingPlugin\");\n+    }\n+\n+    @NotNull\n+    private HealthStateScope scopeForJob(JobIdentifier jobIdentifier) {\n+        return forJob(jobIdentifier.getPipelineName(), jobIdentifier.getStageName(), jobIdentifier.getBuildName());\n+    }\n+\n+    private boolean resolveSecrets(String pluginId, List<ClusterProfile> clusterProfiles) {\n+        try {\n+            for (ClusterProfile clusterProfile : clusterProfiles) {\n+                secretParamResolver.resolve(clusterProfile);\n+            }\n+        } catch (RulesViolationException | SecretResolutionFailureException e) {\n+            String description = format(\"Secrets resolution failed for cluster profile associated with plugin [%s]: %s \", pluginId, e.getMessage());\n+            serverHealthService.update(error(format(\"Ping failed for '%s' plugin\", pluginId), description, general(scope(pluginId))));\n+            LOGGER.error(description);\n+            return false;\n+        }\n+        return true;\n+    }\n \n-        elasticAgentPluginRegistry.reportJobCompletion(pluginId, elasticAgentId, job.getIdentifier(), elasticProfileConfiguration, clusterProfileConfiguration);\n+    private boolean resolveSecrets(JobIdentifier jobIdentifier, ClusterProfile clusterProfile, ElasticProfile elasticProfile) {\n+        try {\n+            if (clusterProfile != null)\n+                secretParamResolver.resolve(clusterProfile);\n+            secretParamResolver.resolve(elasticProfile);\n+        } catch (RulesViolationException | SecretResolutionFailureException e) {\n+            String cancellationMessage = format(\"\\nThis job was cancelled by GoCD. This job is configured to run on an elastic agent, but the associated elastic configurations failed for secrets resolution: %s\", e.getMessage());\n+            logToJobConsole(jobIdentifier, cancellationMessage);\n+            scheduleService.cancelJob(jobIdentifier);", "originalCommit": "5e984a1d5a80eed9cf1fd5e77c025350866ea087", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUyNzk3NA==", "url": "https://github.com/gocd/gocd/pull/8592#discussion_r501527974", "bodyText": "You will also need to add a message on the JobStatusTopic so that the JobStatusListener is called.\n\nThis is taken care by the schedule service class. Done.", "author": "kritika-singh3", "createdAt": "2020-10-08T08:10:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQ4MjE4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "f74ccc061beb3d3b35c43dbcd83311494ea9270a", "chunk": "diff --git a/server/src/main/java/com/thoughtworks/go/server/service/ElasticAgentPluginService.java b/server/src/main/java/com/thoughtworks/go/server/service/ElasticAgentPluginService.java\nindex 33268d8569..16f2905c0b 100644\n--- a/server/src/main/java/com/thoughtworks/go/server/service/ElasticAgentPluginService.java\n+++ b/server/src/main/java/com/thoughtworks/go/server/service/ElasticAgentPluginService.java\n\n@@ -379,17 +387,9 @@ public class ElasticAgentPluginService {\n         return true;\n     }\n \n-    private boolean resolveSecrets(JobIdentifier jobIdentifier, ClusterProfile clusterProfile, ElasticProfile elasticProfile) {\n-        try {\n-            if (clusterProfile != null)\n-                secretParamResolver.resolve(clusterProfile);\n-            secretParamResolver.resolve(elasticProfile);\n-        } catch (RulesViolationException | SecretResolutionFailureException e) {\n-            String cancellationMessage = format(\"\\nThis job was cancelled by GoCD. This job is configured to run on an elastic agent, but the associated elastic configurations failed for secrets resolution: %s\", e.getMessage());\n-            logToJobConsole(jobIdentifier, cancellationMessage);\n-            scheduleService.cancelJob(jobIdentifier);\n-            return false;\n-        }\n-        return true;\n+    private void resolveSecrets(ClusterProfile clusterProfile, ElasticProfile elasticProfile) {\n+        if (clusterProfile != null)\n+            secretParamResolver.resolve(clusterProfile);\n+        secretParamResolver.resolve(elasticProfile);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQ5MTE4Mw==", "url": "https://github.com/gocd/gocd/pull/8592#discussion_r501491183", "bodyText": "It seems wrong for the shouldAssignWork method cancelling the job here. I think the caller of this method should handle the secret resolution exceptions and take necessary actions.", "author": "maheshp", "createdAt": "2020-10-08T07:03:34Z", "path": "server/src/main/java/com/thoughtworks/go/server/service/ElasticAgentPluginService.java", "diffHunk": "@@ -193,68 +201,70 @@ public void createAgentsFor(List<JobPlan> old, List<JobPlan> newPlan) {\n         jobsThatRequireAgent.addAll(Sets.difference(new HashSet<>(newPlan), new HashSet<>(old)));\n         jobsThatRequireAgent.addAll(starvingJobs);\n \n-        List<JobPlan> plansThatRequireElasticAgent = jobsThatRequireAgent.stream().filter(isElasticAgent()).collect(Collectors.toList());\n+        List<JobPlan> plansThatRequireElasticAgent = jobsThatRequireAgent.stream().filter(isElasticAgent()).collect(toList());\n //      messageTimeToLive is lesser than the starvation threshold to ensure there are no duplicate create agent message\n         long messageTimeToLive = goConfigService.elasticJobStarvationThreshold() - 10000;\n \n         for (JobPlan plan : plansThatRequireElasticAgent) {\n             jobCreationTimeMap.put(plan.getJobId(), timeProvider.currentTimeMillis());\n             ElasticProfile elasticProfile = plan.getElasticProfile();\n             ClusterProfile clusterProfile = plan.getClusterProfile();\n+            JobIdentifier jobIdentifier = plan.getIdentifier();\n             if (clusterProfile == null) {\n                 String cancellationMessage = \"\\nThis job was cancelled by GoCD. The version of your GoCD server requires elastic profiles to be associated with a cluster(required from Version 19.3.0). \" +\n                         \"This job is configured to run on an Elastic Agent, but the associated elastic profile does not have information about the cluster.  \\n\\n\" +\n                         \"The possible reason for the missing cluster information on the elastic profile could be, an upgrade of the GoCD server to a version >= 19.3.0 before the completion of the job.\\n\\n\" +\n                         \"A re-run of this job should fix this issue.\";\n-                logToJobConsole(plan.getIdentifier(), cancellationMessage);\n-                scheduleService.cancelJob(plan.getIdentifier());\n+                logToJobConsole(jobIdentifier, cancellationMessage);\n+                scheduleService.cancelJob(jobIdentifier);\n             } else if (elasticAgentPluginRegistry.has(clusterProfile.getPluginId())) {\n                 String environment = environmentConfigService.envForPipeline(plan.getPipelineName());\n-                createAgentQueue.post(new CreateAgentMessage(ephemeralAutoRegisterKeyService.autoRegisterKey(), environment, elasticProfile, clusterProfile, plan.getIdentifier()), messageTimeToLive);\n-                serverHealthService.removeByScope(HealthStateScope.forJob(plan.getIdentifier().getPipelineName(), plan.getIdentifier().getStageName(), plan.getIdentifier().getBuildName()));\n+                boolean secretsResolved = resolveSecrets(jobIdentifier, clusterProfile, elasticProfile);\n+                if (secretsResolved) {\n+                    createAgentQueue.post(new CreateAgentMessage(ephemeralAutoRegisterKeyService.autoRegisterKey(), environment, elasticProfile, clusterProfile, jobIdentifier), messageTimeToLive);\n+                    serverHealthService.removeByScope(scopeForJob(jobIdentifier));\n+                }\n             } else {\n-                String jobConfigIdentifier = plan.getIdentifier().jobConfigIdentifier().toString();\n+                String jobConfigIdentifier = jobIdentifier.jobConfigIdentifier().toString();\n                 String description = format(\"Plugin [%s] associated with %s is missing. Either the plugin is not \" +\n                         \"installed or could not be registered. Please check plugins tab \" +\n                         \"and server logs for more details.\", clusterProfile.getPluginId(), jobConfigIdentifier);\n-                serverHealthService.update(ServerHealthState.error(format(\"Unable to find agent for %s\",\n-                        jobConfigIdentifier), description, HealthStateType.general(HealthStateScope.forJob(plan.getIdentifier().getPipelineName(), plan.getIdentifier().getStageName(), plan.getIdentifier().getBuildName()))));\n+                serverHealthService.update(error(format(\"Unable to find agent for %s\",\n+                        jobConfigIdentifier), description, general(scopeForJob(jobIdentifier))));\n                 LOGGER.error(description);\n             }\n         }\n     }\n \n-    private void logToJobConsole(JobIdentifier identifier, String message) {\n-        try {\n-            consoleService.appendToConsoleLog(identifier, message);\n-        } catch (IllegalArtifactLocationException | IOException e) {\n-            LOGGER.error(format(\"Failed to add message(%s) to the job(%s) console\", message, identifier), e);\n-        }\n-    }\n-\n-    private Predicate<JobPlan> isElasticAgent() {\n-        return JobPlan::requiresElasticAgent;\n-    }\n-\n     public boolean shouldAssignWork(ElasticAgentMetadata metadata, String environment, ElasticProfile elasticProfile, ClusterProfile clusterProfile, JobIdentifier identifier) {\n-        Map<String, String> clusterProfileProperties = clusterProfile != null ? clusterProfile.getConfigurationAsMap(true) : Collections.EMPTY_MAP;\n-        GoPluginDescriptor pluginDescriptor = pluginManager.getPluginDescriptorFor(metadata.elasticPluginId());\n-        Map<String, String> configuration = elasticProfile.getConfigurationAsMap(true);\n+        if (clusterProfile == null || !StringUtils.equals(clusterProfile.getPluginId(), metadata.elasticPluginId())) {\n+            return false;\n+        }\n \n-        if (!StringUtils.equals(clusterProfile.getPluginId(), metadata.elasticPluginId())) {\n+        boolean secretsResolved = resolveSecrets(identifier, clusterProfile, elasticProfile);", "originalCommit": "5e984a1d5a80eed9cf1fd5e77c025350866ea087", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUwNzk5Mw==", "url": "https://github.com/gocd/gocd/pull/8592#discussion_r501507993", "bodyText": "I don't get it. If the service can cancel the job in the createAgent call, why can't it do so in shouldAssignWork?", "author": "kritika-singh3", "createdAt": "2020-10-08T07:36:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQ5MTE4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU0MDQ2MA==", "url": "https://github.com/gocd/gocd/pull/8592#discussion_r501540460", "bodyText": "Hmmm, I think in both the cases I would have preferred the ElasticAgentPluginService not cancelling the job, the way create createAgent is implemented it makes it tough to make those changes.", "author": "maheshp", "createdAt": "2020-10-08T08:31:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQ5MTE4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "f74ccc061beb3d3b35c43dbcd83311494ea9270a", "chunk": "diff --git a/server/src/main/java/com/thoughtworks/go/server/service/ElasticAgentPluginService.java b/server/src/main/java/com/thoughtworks/go/server/service/ElasticAgentPluginService.java\nindex 33268d8569..16f2905c0b 100644\n--- a/server/src/main/java/com/thoughtworks/go/server/service/ElasticAgentPluginService.java\n+++ b/server/src/main/java/com/thoughtworks/go/server/service/ElasticAgentPluginService.java\n\n@@ -219,10 +224,16 @@ public class ElasticAgentPluginService {\n                 scheduleService.cancelJob(jobIdentifier);\n             } else if (elasticAgentPluginRegistry.has(clusterProfile.getPluginId())) {\n                 String environment = environmentConfigService.envForPipeline(plan.getPipelineName());\n-                boolean secretsResolved = resolveSecrets(jobIdentifier, clusterProfile, elasticProfile);\n-                if (secretsResolved) {\n+                try {\n+                    resolveSecrets(clusterProfile, elasticProfile);\n                     createAgentQueue.post(new CreateAgentMessage(ephemeralAutoRegisterKeyService.autoRegisterKey(), environment, elasticProfile, clusterProfile, jobIdentifier), messageTimeToLive);\n                     serverHealthService.removeByScope(scopeForJob(jobIdentifier));\n+                } catch (RulesViolationException | SecretResolutionFailureException e) {\n+                    JobInstance jobInstance = jobInstanceSqlMapDao.buildById(plan.getJobId());\n+                    String failureMessage = format(\"\\nThis job was failed by GoCD. This job is configured to run on an elastic agent, but the associated elastic configurations failed for secrets resolution: %s\", e.getMessage());\n+                    logToJobConsole(jobIdentifier, failureMessage);\n+                    scheduleService.failJob(jobInstance);\n+                    jobStatusTopic.post(new JobStatusMessage(jobIdentifier, jobInstance.getState(), plan.getAgentUuid()));\n                 }\n             } else {\n                 String jobConfigIdentifier = jobIdentifier.jobConfigIdentifier().toString();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQ5OTcyOQ==", "url": "https://github.com/gocd/gocd/pull/8592#discussion_r501499729", "bodyText": "This should not be 422, it's not a user error.", "author": "maheshp", "createdAt": "2020-10-08T07:20:54Z", "path": "spark/spark-spa/src/main/java/com/thoughtworks/go/spark/spa/StatusReportsController.java", "diffHunk": "@@ -91,6 +93,9 @@ public ModelAndView pluginStatusReport(Request request, Response response) {\n         } catch (UnsupportedOperationException e) {\n             String message = String.format(\"Status Report for plugin with id: '%s' is not found.\", pluginId);\n             return errorPage(response, 404, \"Plugin Status Report\", message);\n+        } catch (RulesViolationException | SecretResolutionFailureException e) {\n+            LOGGER.error(e.getMessage(), e);\n+            return errorPage(response, 422, \"Plugin Status Report\", e.getMessage());", "originalCommit": "5e984a1d5a80eed9cf1fd5e77c025350866ea087", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUwNDAzMQ==", "url": "https://github.com/gocd/gocd/pull/8592#discussion_r501504031", "bodyText": "The exception can be raised due to a secret being configured for a non-existent secret config id. Which is a user error.\nIf not 422, then what? 500?", "author": "kritika-singh3", "createdAt": "2020-10-08T07:28:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQ5OTcyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUyNzI4NQ==", "url": "https://github.com/gocd/gocd/pull/8592#discussion_r501527285", "bodyText": "The exception can be raised due to a secret being configured for a non-existent secret config id. Which is a user error.\n\nThese would be user errors during config update right.", "author": "maheshp", "createdAt": "2020-10-08T08:09:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQ5OTcyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUyOTA5MA==", "url": "https://github.com/gocd/gocd/pull/8592#discussion_r501529090", "bodyText": "Yes but these are not caught during full config save.", "author": "kritika-singh3", "createdAt": "2020-10-08T08:12:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQ5OTcyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "f74ccc061beb3d3b35c43dbcd83311494ea9270a", "chunk": "diff --git a/spark/spark-spa/src/main/java/com/thoughtworks/go/spark/spa/StatusReportsController.java b/spark/spark-spa/src/main/java/com/thoughtworks/go/spark/spa/StatusReportsController.java\nindex c7cc0cf4a4..ef73e2a619 100644\n--- a/spark/spark-spa/src/main/java/com/thoughtworks/go/spark/spa/StatusReportsController.java\n+++ b/spark/spark-spa/src/main/java/com/thoughtworks/go/spark/spa/StatusReportsController.java\n\n@@ -95,7 +95,7 @@ public class StatusReportsController implements SparkController {\n             return errorPage(response, 404, \"Plugin Status Report\", message);\n         } catch (RulesViolationException | SecretResolutionFailureException e) {\n             LOGGER.error(e.getMessage(), e);\n-            return errorPage(response, 422, \"Plugin Status Report\", e.getMessage());\n+            return errorPage(response, 500, \"Plugin Status Report\", e.getMessage());\n         } catch (Exception e) {\n             LOGGER.error(e.getMessage(), e);\n             return errorPage(response, 500, \"Plugin Status Report\", UNKNOWN_ERROR_MESSAGE);\n"}}, {"oid": "f74ccc061beb3d3b35c43dbcd83311494ea9270a", "url": "https://github.com/gocd/gocd/commit/f74ccc061beb3d3b35c43dbcd83311494ea9270a", "message": "Changes:\n - Don't handle exception for shouldAssign in elastic service. Let build assignment service handle it\n - for create agent - fail the job rather than cancelling it. Also post a message on job status topic\n - same goes for shouldAssign as well\n - For cluster profile changed notification call to plugin: catch the exception and add a timeout based server health message", "committedDate": "2020-10-08T10:35:45Z", "type": "forcePushed"}, {"oid": "82f68251d6e8de06149ec9565ac4201b5cee04b1", "url": "https://github.com/gocd/gocd/commit/82f68251d6e8de06149ec9565ac4201b5cee04b1", "message": "Changes:\n - Don't handle exception for shouldAssign in elastic service. Let build assignment service handle it\n - for create agent - fail the job rather than cancelling it. Also post a message on job status topic\n - same goes for shouldAssign as well\n - For cluster profile changed notification call to plugin: catch the exception and add a timeout based server health message\n - Also send 500 instead of 422 for status controllers in case of error", "committedDate": "2020-10-08T10:44:02Z", "type": "forcePushed"}, {"oid": "b1391ecb98e81ed0a7171fe92a42daa83d4e8ebd", "url": "https://github.com/gocd/gocd/commit/b1391ecb98e81ed0a7171fe92a42daa83d4e8ebd", "message": "Changes:\n - Don't handle exception for shouldAssign in elastic service. Let build assignment service handle it\n - for create agent - fail the job rather than cancelling it. Also post a message on job status topic\n - same goes for shouldAssign as well\n - For cluster profile changed notification call to plugin: catch the exception and add a timeout based server health message\n - Also send 500 instead of 422 for status controllers in case of error", "committedDate": "2020-10-12T11:12:55Z", "type": "forcePushed"}, {"oid": "a0de943362b91b97c746558bcd66d4abd505db12", "url": "https://github.com/gocd/gocd/commit/a0de943362b91b97c746558bcd66d4abd505db12", "message": "Update internal api to render autocomplete suggestion on secret config spa", "committedDate": "2020-10-15T03:43:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAyMDYyNA==", "url": "https://github.com/gocd/gocd/pull/8592#discussion_r509020624", "bodyText": "This job was failed by GoCD. This job is configured to run on an elastic agent, there were errors while resolving secrets for the the associated elastic configurations.\nReasons: blah blah blah", "author": "maheshp", "createdAt": "2020-10-21T06:31:32Z", "path": "server/src/main/java/com/thoughtworks/go/server/service/BuildAssignmentService.java", "diffHunk": "@@ -202,9 +202,18 @@ JobPlan findMatchingJob(AgentInstance agent) {\n             match = agent.firstMatching(filteredJobPlans);\n         } else {\n             for (JobPlan jobPlan : filteredJobPlans) {\n-                if (jobPlan.requiresElasticAgent() && elasticAgentPluginService.shouldAssignWork(agent.elasticAgentMetadata(), environmentConfigService.envForPipeline(jobPlan.getPipelineName()), jobPlan.getElasticProfile(), jobPlan.getClusterProfile(), jobPlan.getIdentifier())) {\n-                    match = jobPlan;\n-                    break;\n+                try {\n+                    if (jobPlan.requiresElasticAgent() && elasticAgentPluginService.shouldAssignWork(agent.elasticAgentMetadata(), environmentConfigService.envForPipeline(jobPlan.getPipelineName()), jobPlan.getElasticProfile(), jobPlan.getClusterProfile(), jobPlan.getIdentifier())) {\n+                        match = jobPlan;\n+                        break;\n+                    }\n+                } catch (RulesViolationException | SecretResolutionFailureException e) {\n+                    JobInstance instance = jobInstanceService.buildById(jobPlan.getJobId());\n+                    JobIdentifier jobIdentifier = jobPlan.getIdentifier();\n+                    String failureMessage = format(\"\\nThis job was failed by GoCD. This job is configured to run on an elastic agent, but the associated elastic configurations failed for secrets resolution: %s\", e.getMessage());", "originalCommit": "a0de943362b91b97c746558bcd66d4abd505db12", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bcc23fd6ff15837a152997ff910eb6ece567a238", "chunk": "diff --git a/server/src/main/java/com/thoughtworks/go/server/service/BuildAssignmentService.java b/server/src/main/java/com/thoughtworks/go/server/service/BuildAssignmentService.java\nindex af44650454..1f90627c80 100644\n--- a/server/src/main/java/com/thoughtworks/go/server/service/BuildAssignmentService.java\n+++ b/server/src/main/java/com/thoughtworks/go/server/service/BuildAssignmentService.java\n\n@@ -202,18 +202,9 @@ public class BuildAssignmentService implements ConfigChangedListener {\n             match = agent.firstMatching(filteredJobPlans);\n         } else {\n             for (JobPlan jobPlan : filteredJobPlans) {\n-                try {\n-                    if (jobPlan.requiresElasticAgent() && elasticAgentPluginService.shouldAssignWork(agent.elasticAgentMetadata(), environmentConfigService.envForPipeline(jobPlan.getPipelineName()), jobPlan.getElasticProfile(), jobPlan.getClusterProfile(), jobPlan.getIdentifier())) {\n-                        match = jobPlan;\n-                        break;\n-                    }\n-                } catch (RulesViolationException | SecretResolutionFailureException e) {\n-                    JobInstance instance = jobInstanceService.buildById(jobPlan.getJobId());\n-                    JobIdentifier jobIdentifier = jobPlan.getIdentifier();\n-                    String failureMessage = format(\"\\nThis job was failed by GoCD. This job is configured to run on an elastic agent, but the associated elastic configurations failed for secrets resolution: %s\", e.getMessage());\n-                    logToJobConsole(jobIdentifier, failureMessage);\n-                    scheduleService.failJob(instance);\n-                    jobStatusTopic.post(new JobStatusMessage(jobIdentifier, instance.getState(), agent.getUuid()));\n+                if (jobPlan.requiresElasticAgent() && elasticAgentPluginService.shouldAssignWork(agent.elasticAgentMetadata(), environmentConfigService.envForPipeline(jobPlan.getPipelineName()), jobPlan.getElasticProfile(), jobPlan.getClusterProfile(), jobPlan.getIdentifier())) {\n+                    match = jobPlan;\n+                    break;\n                 }\n             }\n         }\n"}}, {"oid": "bcc23fd6ff15837a152997ff910eb6ece567a238", "url": "https://github.com/gocd/gocd/commit/bcc23fd6ff15837a152997ff910eb6ece567a238", "message": "Update:\n - SecretConfig to accept entity of type `cluster_profile`\n - Added method in RulesService to validate secret params in elastic configurations\n - Added method in SecretParamResolver to validate and resolve secret params in elastic configurations", "committedDate": "2020-10-23T03:39:30Z", "type": "commit"}, {"oid": "0342c98cded347c2ca160e756c4989ce4ad45418", "url": "https://github.com/gocd/gocd/commit/0342c98cded347c2ca160e756c4989ce4ad45418", "message": "Adding support for secrets in elastic configurations\n\n - Validating and resolving secrets related to cluster profile and elastic profile before sending the values to the plugin\n - All except `migrateConfig` and `clusterProfileChanged` - would attempt secret resolution", "committedDate": "2020-10-23T03:39:30Z", "type": "commit"}, {"oid": "2793f5ac9006756e4cbc9a80018d4a1349dbbe5c", "url": "https://github.com/gocd/gocd/commit/2793f5ac9006756e4cbc9a80018d4a1349dbbe5c", "message": "Upgrade secret configs api to v3", "committedDate": "2020-10-23T03:39:30Z", "type": "commit"}, {"oid": "a684f8e1be55732e424b82ec20ff9b10089da79d", "url": "https://github.com/gocd/gocd/commit/a684f8e1be55732e424b82ec20ff9b10089da79d", "message": "Update secret config spa to support cluster_profile as valid rule type\nAlso update the elastic page modals to show the errors from rules validation", "committedDate": "2020-10-23T03:39:30Z", "type": "commit"}, {"oid": "50147682887347c01fbf423a3694f12f3205ffc2", "url": "https://github.com/gocd/gocd/commit/50147682887347c01fbf423a3694f12f3205ffc2", "message": "Resolving secrets for `clusterProfileChanges`\n - secrets will be resolved for both original/older cluster profile and the updated/newer one", "committedDate": "2020-10-23T03:39:30Z", "type": "commit"}, {"oid": "16b102f795808f2aa9da8a23986aec87e069840c", "url": "https://github.com/gocd/gocd/commit/16b102f795808f2aa9da8a23986aec87e069840c", "message": "Changes:\n - for createAgents and shouldAssign call: on secret failure - cancel the job. This is similar to wht we do for secret failure in pipelines\n - for job completed call - catch the rules related exception - add a server health message with a 5 minute timeout and log it\n - for heartbeat - catch the rules exception - add a server health message. This will get cleared up on a heartbeat call with the secrets fixed\n - for status reports - updated the controller to return 422 with the exception message", "committedDate": "2020-10-23T03:39:30Z", "type": "commit"}, {"oid": "2b94bf04bd41918783f267f05ae00fa736de1c93", "url": "https://github.com/gocd/gocd/commit/2b94bf04bd41918783f267f05ae00fa736de1c93", "message": "Changes:\n - Don't handle exception for shouldAssign in elastic service. Let build assignment service handle it\n - for create agent - fail the job rather than cancelling it. Also post a message on job status topic\n - same goes for shouldAssign as well\n - For cluster profile changed notification call to plugin: catch the exception and add a timeout based server health message\n - Also send 500 instead of 422 for status controllers in case of error", "committedDate": "2020-10-23T03:39:31Z", "type": "commit"}, {"oid": "184c7cbcfbeabe576f9851f9bff84978bd48a716", "url": "https://github.com/gocd/gocd/commit/184c7cbcfbeabe576f9851f9bff84978bd48a716", "message": "Update internal api to render autocomplete suggestion on secret config spa", "committedDate": "2020-10-23T03:39:31Z", "type": "commit"}, {"oid": "184c7cbcfbeabe576f9851f9bff84978bd48a716", "url": "https://github.com/gocd/gocd/commit/184c7cbcfbeabe576f9851f9bff84978bd48a716", "message": "Update internal api to render autocomplete suggestion on secret config spa", "committedDate": "2020-10-23T03:39:31Z", "type": "forcePushed"}, {"oid": "2193075652304c376a5eb3cde99268465093fa9f", "url": "https://github.com/gocd/gocd/commit/2193075652304c376a5eb3cde99268465093fa9f", "message": "Update the console log message when a job is failed due to secret resolution failure", "committedDate": "2020-10-23T04:48:49Z", "type": "commit"}]}