{"pr_number": 1688, "pr_title": "[SCB-1828] Support @JSONVIEW ", "pr_createdAt": "2020-04-02T17:09:57Z", "pr_url": "https://github.com/apache/servicecomb-java-chassis/pull/1688", "timeline": [{"oid": "e7c8662ccd135416be4276e4b499c45f8e55176b", "url": "https://github.com/apache/servicecomb-java-chassis/commit/e7c8662ccd135416be4276e4b499c45f8e55176b", "message": "[SCB-1828] Support @JsonView : add ut", "committedDate": "2020-04-03T01:20:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ2Njg2Mg==", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1688#discussion_r404466862", "bodyText": "It's better to add a log and throw an exception. This is an invalid usage when happens that users need to know.", "author": "liubao68", "createdAt": "2020-04-07T00:27:32Z", "path": "common/common-rest/src/main/java/org/apache/servicecomb/common/rest/codec/param/BodyProcessorCreator.java", "diffHunk": "@@ -64,16 +67,34 @@\n   public static class BodyProcessor implements ParamValueProcessor {\n     protected JavaType targetType;\n \n+    protected Class<?> serialViewClass;\n+\n     private boolean isString;\n \n     protected boolean isRequired;\n \n     public BodyProcessor(JavaType targetType, boolean isString, boolean isRequired) {\n+      this(targetType, null, isString, isRequired);\n+    }\n+\n+    public BodyProcessor(JavaType targetType, String serialViewClass, boolean isString, boolean isRequired) {\n+      if (serialViewClass != null) {\n+        try {\n+          this.serialViewClass = Class.forName(serialViewClass);\n+        } catch (Throwable e) {\n+          //ignore", "originalCommit": "9dd1a8a5df9cf68972713b3deed0779b01d89d92", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUwNDQwMA==", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1688#discussion_r404504400", "bodyText": "If there is sth wrong when gets serialViewClass, it shouldn't affect the operation of the main process, so just add a log is enough?", "author": "heyile", "createdAt": "2020-04-07T02:47:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ2Njg2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "2e82e2d438fd141e65aff6eed52000cc7240b882", "chunk": "diff --git a/common/common-rest/src/main/java/org/apache/servicecomb/common/rest/codec/param/BodyProcessorCreator.java b/common/common-rest/src/main/java/org/apache/servicecomb/common/rest/codec/param/BodyProcessorCreator.java\nindex ffce8339e..0fdda6151 100644\n--- a/common/common-rest/src/main/java/org/apache/servicecomb/common/rest/codec/param/BodyProcessorCreator.java\n+++ b/common/common-rest/src/main/java/org/apache/servicecomb/common/rest/codec/param/BodyProcessorCreator.java\n\n@@ -67,34 +64,16 @@ public class BodyProcessorCreator implements ParamValueProcessorCreator {\n   public static class BodyProcessor implements ParamValueProcessor {\n     protected JavaType targetType;\n \n-    protected Class<?> serialViewClass;\n-\n     private boolean isString;\n \n     protected boolean isRequired;\n \n     public BodyProcessor(JavaType targetType, boolean isString, boolean isRequired) {\n-      this(targetType, null, isString, isRequired);\n-    }\n-\n-    public BodyProcessor(JavaType targetType, String serialViewClass, boolean isString, boolean isRequired) {\n-      if (serialViewClass != null) {\n-        try {\n-          this.serialViewClass = Class.forName(serialViewClass);\n-        } catch (Throwable e) {\n-          //ignore\n-        }\n-      }\n       this.targetType = targetType;\n       this.isString = isString;\n       this.isRequired = isRequired;\n     }\n \n-    @Override\n-    public Class<?> getSerialViewClass() {\n-      return serialViewClass;\n-    }\n-\n     @Override\n     public Object getValue(HttpServletRequest request) throws Exception {\n       Object body = request.getAttribute(RestConst.BODY_PARAMETER);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ2OTk5NA==", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1688#discussion_r404469994", "bodyText": "LOGGER.error(\"Failed to create produceProcessor with {}\", acceptType, e);   will handle formation.", "author": "liubao68", "createdAt": "2020-04-07T00:38:34Z", "path": "common/common-rest/src/main/java/org/apache/servicecomb/common/rest/codec/produce/ProduceProcessorManager.java", "diffHunk": "@@ -17,40 +17,89 @@\n \n package org.apache.servicecomb.common.rest.codec.produce;\n \n-import java.util.HashSet;\n+import java.util.HashMap;\n import java.util.List;\n-import java.util.Set;\n+import java.util.Map;\n \n import javax.ws.rs.core.MediaType;\n \n import org.apache.servicecomb.foundation.common.RegisterManager;\n import org.apache.servicecomb.foundation.common.utils.SPIServiceUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public final class ProduceProcessorManager extends RegisterManager<String, Map<String, ProduceProcessor>> {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ProduceProcessorManager.class);\n \n-public final class ProduceProcessorManager extends RegisterManager<String, ProduceProcessor> {\n   private static final List<ProduceProcessor> produceProcessor =\n       SPIServiceUtils.getSortedService(ProduceProcessor.class);\n \n   private static final String NAME = \"produce processor mgr\";\n \n   public static final String DEFAULT_TYPE = MediaType.APPLICATION_JSON;\n \n+  public static final String DEFAULT_SERIAL_CLASS = \"servicecomb_default_class\";\n+\n   public static final ProduceProcessorManager INSTANCE = new ProduceProcessorManager();\n \n-  public static final ProduceProcessor JSON_PROCESSOR =\n-      SPIServiceUtils.getTargetService(ProduceProcessor.class, ProduceJsonProcessor.class);\n+  private Map<String, ProduceProcessor> jsonProcessorMap;\n \n-  public static final ProduceProcessor PLAIN_PROCESSOR =\n-      SPIServiceUtils.getTargetService(ProduceProcessor.class, ProduceTextPlainProcessor.class);\n+  private Map<String, ProduceProcessor> plainProcessorMap;\n \n-  public static final ProduceProcessor DEFAULT_PROCESSOR = JSON_PROCESSOR;\n+  private Map<String, ProduceProcessor> defaultProcessorMap;\n \n   private ProduceProcessorManager() {\n     super(NAME);\n-    Set<String> set = new HashSet<>();\n     produceProcessor.forEach(processor -> {\n-      if (set.add(processor.getName())) {\n-        register(processor.getName(), processor);\n-      }\n+      Map<String, ProduceProcessor> prodProcessorMap = getObjMap()\n+          .computeIfAbsent(processor.getName(), key -> new HashMap<>());\n+      prodProcessorMap.putIfAbsent(processor.getSerializationView(), processor);\n     });\n+    jsonProcessorMap = ensureFindValue(MediaType.APPLICATION_JSON);\n+    plainProcessorMap = ensureFindValue(MediaType.TEXT_PLAIN);\n+    defaultProcessorMap = jsonProcessorMap;\n+  }\n+\n+  public static ProduceProcessor cloneNewProduceProcessor(String acceptType, Class<?> serialViewClass,\n+      Map<String, ProduceProcessor> produceViewMap) {\n+    ProduceProcessor newInstance;\n+    try {\n+      newInstance = produceViewMap.get(DEFAULT_SERIAL_CLASS).getClass().newInstance();\n+      newInstance.setSerializationView(serialViewClass);\n+      return newInstance;\n+    } catch (Throwable e) {\n+      LOGGER.error(String.format(\"Failed to create produceProcessor with %s\", acceptType), e);", "originalCommit": "9dd1a8a5df9cf68972713b3deed0779b01d89d92", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUwNjU2MQ==", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1688#discussion_r404506561", "bodyText": "done", "author": "heyile", "createdAt": "2020-04-07T02:56:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ2OTk5NA=="}], "type": "inlineReview", "revised_code": {"commit": "2e82e2d438fd141e65aff6eed52000cc7240b882", "chunk": "diff --git a/common/common-rest/src/main/java/org/apache/servicecomb/common/rest/codec/produce/ProduceProcessorManager.java b/common/common-rest/src/main/java/org/apache/servicecomb/common/rest/codec/produce/ProduceProcessorManager.java\nindex b7ad3dc28..911b7776a 100644\n--- a/common/common-rest/src/main/java/org/apache/servicecomb/common/rest/codec/produce/ProduceProcessorManager.java\n+++ b/common/common-rest/src/main/java/org/apache/servicecomb/common/rest/codec/produce/ProduceProcessorManager.java\n\n@@ -53,7 +53,7 @@ public final class ProduceProcessorManager extends RegisterManager<String, Map<S\n     produceProcessor.forEach(processor -> {\n       Map<String, ProduceProcessor> prodProcessorMap = getObjMap()\n           .computeIfAbsent(processor.getName(), key -> new HashMap<>());\n-      prodProcessorMap.putIfAbsent(processor.getSerializationView(), processor);\n+      prodProcessorMap.put(processor.getSerializationView(), processor);\n     });\n     jsonProcessorMap = ensureFindValue(MediaType.APPLICATION_JSON);\n     plainProcessorMap = ensureFindValue(MediaType.TEXT_PLAIN);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ3MTI2MQ==", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1688#discussion_r404471261", "bodyText": "It's not good to expose Map to callers. Maybe\npublic ProduceProcessor getProduceProcessor(String name) \n\nis better. Following code are the same.\nAnd for setters, they seam not used, and can deleted.", "author": "liubao68", "createdAt": "2020-04-07T00:42:57Z", "path": "common/common-rest/src/main/java/org/apache/servicecomb/common/rest/codec/produce/ProduceProcessorManager.java", "diffHunk": "@@ -17,40 +17,89 @@\n \n package org.apache.servicecomb.common.rest.codec.produce;\n \n-import java.util.HashSet;\n+import java.util.HashMap;\n import java.util.List;\n-import java.util.Set;\n+import java.util.Map;\n \n import javax.ws.rs.core.MediaType;\n \n import org.apache.servicecomb.foundation.common.RegisterManager;\n import org.apache.servicecomb.foundation.common.utils.SPIServiceUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public final class ProduceProcessorManager extends RegisterManager<String, Map<String, ProduceProcessor>> {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ProduceProcessorManager.class);\n \n-public final class ProduceProcessorManager extends RegisterManager<String, ProduceProcessor> {\n   private static final List<ProduceProcessor> produceProcessor =\n       SPIServiceUtils.getSortedService(ProduceProcessor.class);\n \n   private static final String NAME = \"produce processor mgr\";\n \n   public static final String DEFAULT_TYPE = MediaType.APPLICATION_JSON;\n \n+  public static final String DEFAULT_SERIAL_CLASS = \"servicecomb_default_class\";\n+\n   public static final ProduceProcessorManager INSTANCE = new ProduceProcessorManager();\n \n-  public static final ProduceProcessor JSON_PROCESSOR =\n-      SPIServiceUtils.getTargetService(ProduceProcessor.class, ProduceJsonProcessor.class);\n+  private Map<String, ProduceProcessor> jsonProcessorMap;\n \n-  public static final ProduceProcessor PLAIN_PROCESSOR =\n-      SPIServiceUtils.getTargetService(ProduceProcessor.class, ProduceTextPlainProcessor.class);\n+  private Map<String, ProduceProcessor> plainProcessorMap;\n \n-  public static final ProduceProcessor DEFAULT_PROCESSOR = JSON_PROCESSOR;\n+  private Map<String, ProduceProcessor> defaultProcessorMap;\n \n   private ProduceProcessorManager() {\n     super(NAME);\n-    Set<String> set = new HashSet<>();\n     produceProcessor.forEach(processor -> {\n-      if (set.add(processor.getName())) {\n-        register(processor.getName(), processor);\n-      }\n+      Map<String, ProduceProcessor> prodProcessorMap = getObjMap()\n+          .computeIfAbsent(processor.getName(), key -> new HashMap<>());\n+      prodProcessorMap.putIfAbsent(processor.getSerializationView(), processor);\n     });\n+    jsonProcessorMap = ensureFindValue(MediaType.APPLICATION_JSON);\n+    plainProcessorMap = ensureFindValue(MediaType.TEXT_PLAIN);\n+    defaultProcessorMap = jsonProcessorMap;\n+  }\n+\n+  public static ProduceProcessor cloneNewProduceProcessor(String acceptType, Class<?> serialViewClass,\n+      Map<String, ProduceProcessor> produceViewMap) {\n+    ProduceProcessor newInstance;\n+    try {\n+      newInstance = produceViewMap.get(DEFAULT_SERIAL_CLASS).getClass().newInstance();\n+      newInstance.setSerializationView(serialViewClass);\n+      return newInstance;\n+    } catch (Throwable e) {\n+      LOGGER.error(String.format(\"Failed to create produceProcessor with %s\", acceptType), e);\n+    }\n+    return produceViewMap.get(DEFAULT_SERIAL_CLASS);\n+  }\n+\n+  public Map<String, ProduceProcessor> getJsonProcessorMap() {", "originalCommit": "9dd1a8a5df9cf68972713b3deed0779b01d89d92", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc1Mzk0MQ==", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1688#discussion_r404753941", "bodyText": "done", "author": "heyile", "createdAt": "2020-04-07T12:02:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ3MTI2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "2e82e2d438fd141e65aff6eed52000cc7240b882", "chunk": "diff --git a/common/common-rest/src/main/java/org/apache/servicecomb/common/rest/codec/produce/ProduceProcessorManager.java b/common/common-rest/src/main/java/org/apache/servicecomb/common/rest/codec/produce/ProduceProcessorManager.java\nindex b7ad3dc28..911b7776a 100644\n--- a/common/common-rest/src/main/java/org/apache/servicecomb/common/rest/codec/produce/ProduceProcessorManager.java\n+++ b/common/common-rest/src/main/java/org/apache/servicecomb/common/rest/codec/produce/ProduceProcessorManager.java\n\n@@ -53,7 +53,7 @@ public final class ProduceProcessorManager extends RegisterManager<String, Map<S\n     produceProcessor.forEach(processor -> {\n       Map<String, ProduceProcessor> prodProcessorMap = getObjMap()\n           .computeIfAbsent(processor.getName(), key -> new HashMap<>());\n-      prodProcessorMap.putIfAbsent(processor.getSerializationView(), processor);\n+      prodProcessorMap.put(processor.getSerializationView(), processor);\n     });\n     jsonProcessorMap = ensureFindValue(MediaType.APPLICATION_JSON);\n     plainProcessorMap = ensureFindValue(MediaType.TEXT_PLAIN);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ4MTExMg==", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1688#discussion_r404481112", "bodyText": "Maybe this code can be better. Because:\nProduceProcessor can be constructed at initialization, and will not change when excepting requests. So only findProduceProcessor(String type) can expose to the callers. findProduceProcessor(String type, String serialView) is not needed. And ensureFindProduceProcessor do not need to processing annotations for each request, but process once when initialization.", "author": "liubao68", "createdAt": "2020-04-07T01:18:57Z", "path": "common/common-rest/src/main/java/org/apache/servicecomb/common/rest/definition/RestOperationMeta.java", "diffHunk": "@@ -257,31 +263,71 @@ private void addParam(RestParam param) {\n     paramMap.put(param.getParamName(), param);\n   }\n \n+  public ProduceProcessor findProduceProcessor(String type, String serialView) {", "originalCommit": "9dd1a8a5df9cf68972713b3deed0779b01d89d92", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc1NTA4NA==", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1688#discussion_r404755084", "bodyText": "done, I will init it at RestOperationMeta#createProduceProcessors .", "author": "heyile", "createdAt": "2020-04-07T12:04:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ4MTExMg=="}], "type": "inlineReview", "revised_code": {"commit": "2e82e2d438fd141e65aff6eed52000cc7240b882", "chunk": "diff --git a/common/common-rest/src/main/java/org/apache/servicecomb/common/rest/definition/RestOperationMeta.java b/common/common-rest/src/main/java/org/apache/servicecomb/common/rest/definition/RestOperationMeta.java\nindex c952221bd..d55923160 100644\n--- a/common/common-rest/src/main/java/org/apache/servicecomb/common/rest/definition/RestOperationMeta.java\n+++ b/common/common-rest/src/main/java/org/apache/servicecomb/common/rest/definition/RestOperationMeta.java\n\n@@ -279,9 +279,6 @@ public class RestOperationMeta {\n   public ProduceProcessor ensureFindProduceProcessor(HttpServletRequestEx requestEx) {\n     String acceptType = requestEx.getHeader(HttpHeaders.ACCEPT);\n     SwaggerProducerOperation producerOperation = operationMeta.getExtData(Const.PRODUCER_OPERATION);\n-    if (producerOperation == null || producerOperation.getProducerMethod() == null) {\n-      return ensureFindProduceProcessor(acceptType);\n-    }\n     return ensureFindProduceProcessor(acceptType, producerOperation.getProducerMethod().getDeclaredAnnotations());\n   }\n \n"}}, {"oid": "2e82e2d438fd141e65aff6eed52000cc7240b882", "url": "https://github.com/apache/servicecomb-java-chassis/commit/2e82e2d438fd141e65aff6eed52000cc7240b882", "message": "[SCB-1828] Support @JsonView", "committedDate": "2020-04-08T00:51:01Z", "type": "commit"}, {"oid": "92c3e21952d6f1985a60f76ea8551bf46f01ceca", "url": "https://github.com/apache/servicecomb-java-chassis/commit/92c3e21952d6f1985a60f76ea8551bf46f01ceca", "message": "[SCB-1828] Support @JsonView : add ut", "committedDate": "2020-04-08T00:51:01Z", "type": "commit"}, {"oid": "d8a494ba743dc449f9eb3edd22b364857f986565", "url": "https://github.com/apache/servicecomb-java-chassis/commit/d8a494ba743dc449f9eb3edd22b364857f986565", "message": "[SCB-1828] Support @JsonView: support @requestBody", "committedDate": "2020-04-08T00:51:01Z", "type": "commit"}, {"oid": "0e361c2e24c43a68627152a73aa6ac7342b8688d", "url": "https://github.com/apache/servicecomb-java-chassis/commit/0e361c2e24c43a68627152a73aa6ac7342b8688d", "message": "[SCB-1828] Support @JsonView: fixed as reviewed", "committedDate": "2020-04-08T00:51:01Z", "type": "commit"}, {"oid": "0e361c2e24c43a68627152a73aa6ac7342b8688d", "url": "https://github.com/apache/servicecomb-java-chassis/commit/0e361c2e24c43a68627152a73aa6ac7342b8688d", "message": "[SCB-1828] Support @JsonView: fixed as reviewed", "committedDate": "2020-04-08T00:51:01Z", "type": "forcePushed"}]}