{"pr_number": 1827, "pr_title": "[SCB-1997] Small improvement when Muticastscoket receive data", "pr_createdAt": "2020-06-10T20:37:12Z", "pr_url": "https://github.com/apache/servicecomb-java-chassis/pull/1827", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3OTg2Mw==", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1827#discussion_r438479863", "bodyText": "Maybe need look at the outer try, if IOException is thrown, the task is exit.", "author": "liubao68", "createdAt": "2020-06-11T00:34:52Z", "path": "service-registry/registry-zero-config/src/main/java/org/apache/servicecomb/zeroconfig/server/ServerUtil.java", "diffHunk": "@@ -172,16 +172,29 @@ private static ServerMicroserviceInstance buildServerMicroserviceInstanceFromMap\n     return map;\n   }\n \n+  private static void initMulticastSocket() throws IOException{\n+    multicastSocket = new MulticastSocket(PORT);\n+    group = InetAddress.getByName(GROUP);\n+    multicastSocket.joinGroup(group); // need to join the group to be able to receive the data\n+  }\n+\n   private static void startListenerForRegisterUnregisterEvent() {\n     try {\n       byte[] buffer = new byte[DATA_PACKET_BUFFER_SIZE];\n-      multicastSocket = new MulticastSocket(PORT);\n-      group = InetAddress.getByName(GROUP);\n-      multicastSocket.joinGroup(group); // need to join the group to be able to receive the data\n-\n+      initMulticastSocket();\n       while (true) {\n         DatagramPacket receivePacketBuffer = new DatagramPacket(buffer, buffer.length);\n-        multicastSocket.receive(receivePacketBuffer);\n+        try {", "originalCommit": "40505871fb490afad3f6b0acf4391a6b81ea9a1f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUwMjY5NQ==", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1827#discussion_r438502695", "bodyText": "Correct. But the outer try/catch(IOException) is for initializing the Multicastsocket object ......the failure should rarely happen. I don't think we need to handle this for now.  I'm thinkg to throw exception, (like our servicecomb init task)...instead of the just logging.\nthrow new IllegalStateException(\"Zero-Config init failed.\", e);", "author": "jungan21", "createdAt": "2020-06-11T02:05:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3OTg2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "366296cec6dd02011627f64020d49846881f9d10", "chunk": "diff --git a/service-registry/registry-zero-config/src/main/java/org/apache/servicecomb/zeroconfig/server/ServerUtil.java b/service-registry/registry-zero-config/src/main/java/org/apache/servicecomb/zeroconfig/server/ServerUtil.java\nindex dbe2394ac..387874062 100644\n--- a/service-registry/registry-zero-config/src/main/java/org/apache/servicecomb/zeroconfig/server/ServerUtil.java\n+++ b/service-registry/registry-zero-config/src/main/java/org/apache/servicecomb/zeroconfig/server/ServerUtil.java\n\n@@ -172,7 +172,7 @@ public class ServerUtil {\n     return map;\n   }\n \n-  private static void initMulticastSocket() throws IOException{\n+  private static void initMulticastSocket() throws IOException {\n     multicastSocket = new MulticastSocket(PORT);\n     group = InetAddress.getByName(GROUP);\n     multicastSocket.joinGroup(group); // need to join the group to be able to receive the data\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE2MTc4Ng==", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1827#discussion_r439161786", "bodyText": "cyclomatic complexity of startListenerForRegisterUnregisterEvent is a bit too high, can be refactored.", "author": "liubao68", "createdAt": "2020-06-12T01:37:04Z", "path": "service-registry/registry-zero-config/src/main/java/org/apache/servicecomb/zeroconfig/server/ServerUtil.java", "diffHunk": "@@ -172,16 +172,29 @@ private static ServerMicroserviceInstance buildServerMicroserviceInstanceFromMap\n     return map;\n   }\n \n+  private static void initMulticastSocket() throws IOException {\n+    multicastSocket = new MulticastSocket(PORT);\n+    group = InetAddress.getByName(GROUP);\n+    multicastSocket.joinGroup(group); // need to join the group to be able to receive the data\n+  }\n+\n   private static void startListenerForRegisterUnregisterEvent() {\n     try {\n       byte[] buffer = new byte[DATA_PACKET_BUFFER_SIZE];", "originalCommit": "0d3fc41c60e81ba542fc961cdceee8a4856a4fee", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "366296cec6dd02011627f64020d49846881f9d10", "chunk": "diff --git a/service-registry/registry-zero-config/src/main/java/org/apache/servicecomb/zeroconfig/server/ServerUtil.java b/service-registry/registry-zero-config/src/main/java/org/apache/servicecomb/zeroconfig/server/ServerUtil.java\nindex ca84fbbb7..387874062 100644\n--- a/service-registry/registry-zero-config/src/main/java/org/apache/servicecomb/zeroconfig/server/ServerUtil.java\n+++ b/service-registry/registry-zero-config/src/main/java/org/apache/servicecomb/zeroconfig/server/ServerUtil.java\n\n@@ -195,41 +195,9 @@ public class ServerUtil {\n           continue;\n         }\n \n-        int receivePacketBufferLength = receivePacketBuffer.getLength();\n-        if (receivePacketBufferLength > 0) {\n-          String receivedPacketString = new String(receivePacketBuffer.getData(), 0,\n-              receivePacketBufferLength, ENCODE).trim();\n-\n-          if (receivedPacketString.length() < 2\n-              || !receivedPacketString.startsWith(MAP_STRING_LEFT) || !receivedPacketString\n-              .endsWith(MAP_STRING_RIGHT)) {\n-            LOGGER.error(\"Wrong format of the input received string: {}\", receivedPacketString);\n-            continue;\n-          }\n-\n-          Map<String, String> receivedStringMap = getMapFromString(receivedPacketString);\n-          String event = receivedStringMap.get(EVENT);\n-          if (StringUtils.isEmpty(event)) {\n-            LOGGER.warn(\"Received event is null or doesn't have event type. {}\", receivedStringMap);\n-            continue;\n-          }\n-\n-          if (event.equals(REGISTER_EVENT)) {\n-            LOGGER.info(\"Received REGISTER event{}\", receivedStringMap);\n-            zeroConfigRegistryService.registerMicroserviceInstance(receivedStringMap);\n-          } else if (event.equals(UNREGISTER_EVENT)) {\n-            LOGGER.info(\"Received UNREGISTER event{}\", receivedStringMap);\n-            zeroConfigRegistryService.unregisterMicroserviceInstance(receivedStringMap);\n-          } else if (event.equals(HEARTBEAT_EVENT)) {\n-            // check if received event is for service instance itself\n-            if (isSelfServiceInstance(receivedStringMap)) {\n-              continue;\n-            }\n-            zeroConfigRegistryService.heartbeat(receivedStringMap);\n-          } else {\n-            LOGGER.error(\"Unrecognized event type. event: {}\", event);\n-          }\n-        }\n+        String receivedEventString = new String(receivePacketBuffer.getData(), 0,\n+            receivePacketBuffer.getLength(), ENCODE).trim();\n+        handleReceivedEvent(receivedEventString);\n       }\n     } catch (IOException e) {\n       throw new IllegalStateException(\n"}}, {"oid": "366296cec6dd02011627f64020d49846881f9d10", "url": "https://github.com/apache/servicecomb-java-chassis/commit/366296cec6dd02011627f64020d49846881f9d10", "message": "[SCB-1997] Small improvement when Muticastscoket receive data", "committedDate": "2020-06-12T03:20:03Z", "type": "commit"}]}