{"pr_number": 1825, "pr_title": "[SCB-1995]Fix incorrect message issue identifed through testing", "pr_createdAt": "2020-06-09T19:05:34Z", "pr_url": "https://github.com/apache/servicecomb-java-chassis/pull/1825", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgwMzA4Nw==", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1825#discussion_r437803087", "bodyText": "This logic seams not correct. Maybe you'd check the length of data actually received and using the correct data.", "author": "liubao68", "createdAt": "2020-06-10T01:02:25Z", "path": "service-registry/registry-zero-config/src/main/java/org/apache/servicecomb/zeroconfig/server/ServerUtil.java", "diffHunk": "@@ -179,12 +179,12 @@ private static ServerMicroserviceInstance buildServerMicroserviceInstanceFromMap\n \n   private static void startListenerForRegisterUnregisterEvent() {\n     try {\n-      byte[] buffer = new byte[DATA_PACKET_BUFFER_SIZE];\n       multicastSocket = new MulticastSocket(PORT);\n       group = InetAddress.getByName(GROUP);\n       multicastSocket.joinGroup(group); // need to join the group to be able to receive the data\n \n       while (true) {\n+        byte[] buffer = new byte[DATA_PACKET_BUFFER_SIZE];\n         DatagramPacket receivePacketBuffer = new DatagramPacket(buffer, buffer.length);\n         multicastSocket.receive(receivePacketBuffer);\n         String receivedPacketString = new String(receivePacketBuffer.getData(), ENCODE);", "originalCommit": "b73ad72402b03002428a1896ac853485c436b6f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyMjY2MA==", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1825#discussion_r437822660", "bodyText": "good point. Unfortunately, based on the Multicast working mechanism, we have to create a buffer before data is received.  After data is received, then buffer is filled with the received data.   So we can't create a buffer with size exactly same as the received data.\nBy the way, it's also mentioned in the JDK source code comments:\nhttps://github.com/frohoff/jdk8u-jdk/blob/master/src/share/classes/java/net/DatagramSocket.java#L698-L700", "author": "jungan21", "createdAt": "2020-06-10T02:20:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgwMzA4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyMzcxNw==", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1825#discussion_r437823717", "bodyText": "Maybe you misunderstanding my point. You should do this\n multicastSocket.receive(receivePacketBuffer);\nint len = receivePacketBuffer.getLength() ;\nif(len > 0) {\n   String receivedPacketString = new String(receivePacketBuffer.getData(), 0, len, ENCODE);\n}\n\nAnd you can avoid creating new buffers for each receive, though this is not very important because the next receive happens in seconds.", "author": "liubao68", "createdAt": "2020-06-10T02:24:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgwMzA4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "c497ee142e3af48f7e38b051cad0e309505449ce", "chunk": "diff --git a/service-registry/registry-zero-config/src/main/java/org/apache/servicecomb/zeroconfig/server/ServerUtil.java b/service-registry/registry-zero-config/src/main/java/org/apache/servicecomb/zeroconfig/server/ServerUtil.java\nindex 96023c5b9..657f4cd4a 100644\n--- a/service-registry/registry-zero-config/src/main/java/org/apache/servicecomb/zeroconfig/server/ServerUtil.java\n+++ b/service-registry/registry-zero-config/src/main/java/org/apache/servicecomb/zeroconfig/server/ServerUtil.java\n\n@@ -156,43 +157,50 @@ public class ServerUtil {\n     return resultList;\n   }\n \n-  private static Map<String, String> getMapFromString(String str) {\n+  private static Map<String, String> getMapFromString(String inputStr) {\n     Map<String, String> map = new HashMap<>();\n-    String trimedString = str.trim();\n-    if (trimedString.startsWith(MAP_STRING_LEFT) && trimedString.endsWith(MAP_STRING_RIGHT)\n-        && trimedString.length() > 2) {\n-      trimedString = trimedString.substring(1, trimedString.length() - 1);\n-      String[] keyValue = trimedString.split(MAP_ELEMENT_SPILITER);\n-      for (int i = 0; i < keyValue.length; i++) {\n-        String[] str2 = keyValue[i].split(MAP_KV_SPILITER);\n-        if (str2.length - 1 == 0) {\n-          map.put(str2[0].trim(), \"\");\n-        } else {\n-          map.put(str2[0].trim(), str2[1].trim());\n-        }\n+    String str = inputStr.substring(1, inputStr.length() - 1);\n+    String[] keyValue = str.split(MAP_ELEMENT_SPILITER);\n+    for (int i = 0; i < keyValue.length; i++) {\n+      String[] str2 = keyValue[i].split(MAP_KV_SPILITER);\n+      if (str2.length - 1 == 0) {\n+        map.put(str2[0].trim(), \"\");\n+      } else {\n+        map.put(str2[0].trim(), str2[1].trim());\n       }\n-    } else {\n-      LOGGER.error(\"Wrong format of the input received string: {}\", trimedString);\n     }\n     return map;\n   }\n \n   private static void startListenerForRegisterUnregisterEvent() {\n     try {\n+      byte[] buffer = new byte[DATA_PACKET_BUFFER_SIZE];\n       multicastSocket = new MulticastSocket(PORT);\n       group = InetAddress.getByName(GROUP);\n       multicastSocket.joinGroup(group); // need to join the group to be able to receive the data\n \n       while (true) {\n-        byte[] buffer = new byte[DATA_PACKET_BUFFER_SIZE];\n         DatagramPacket receivePacketBuffer = new DatagramPacket(buffer, buffer.length);\n         multicastSocket.receive(receivePacketBuffer);\n-        String receivedPacketString = new String(receivePacketBuffer.getData(), ENCODE);\n+        int receivePacketBufferLength = receivePacketBuffer.getLength();\n+        if (receivePacketBufferLength > 0) {\n+          String receivedPacketString = new String(receivePacketBuffer.getData(), 0,\n+              receivePacketBufferLength, ENCODE).trim();\n \n-        Map<String, String> receivedStringMap = getMapFromString(receivedPacketString);\n+          if (receivedPacketString.length() < 2\n+              || !receivedPacketString.startsWith(MAP_STRING_LEFT) || !receivedPacketString\n+              .endsWith(MAP_STRING_RIGHT)) {\n+            LOGGER.error(\"Wrong format of the input received string: {}\", receivedPacketString);\n+            continue;\n+          }\n \n-        if (receivedStringMap != null && receivedStringMap.containsKey(EVENT)) {\n+          Map<String, String> receivedStringMap = getMapFromString(receivedPacketString);\n           String event = receivedStringMap.get(EVENT);\n+          if (StringUtils.isEmpty(event)) {\n+            LOGGER.warn(\"Received event is null or doesn't have event type. {}\", receivedStringMap);\n+            continue;\n+          }\n+\n           if (event.equals(REGISTER_EVENT)) {\n             LOGGER.info(\"Received REGISTER event{}\", receivedStringMap);\n             zeroConfigRegistryService.registerMicroserviceInstance(receivedStringMap);\n"}}, {"oid": "c497ee142e3af48f7e38b051cad0e309505449ce", "url": "https://github.com/apache/servicecomb-java-chassis/commit/c497ee142e3af48f7e38b051cad0e309505449ce", "message": "[SCB-1995]Fix incorrect message issue identifed through testing", "committedDate": "2020-06-10T03:32:56Z", "type": "commit"}]}