{"pr_number": 1936, "pr_title": "[SCB-2077] fix instance isolation trying chance not released problem", "pr_createdAt": "2020-09-01T14:46:29Z", "pr_url": "https://github.com/apache/servicecomb-java-chassis/pull/1936", "timeline": [{"oid": "f7ab067dda21cbb6027c57fdd5bc33ee2a54e1d5", "url": "https://github.com/apache/servicecomb-java-chassis/commit/f7ab067dda21cbb6027c57fdd5bc33ee2a54e1d5", "message": "[SCB-2077] fix instance isolation trying chance not released problem", "committedDate": "2020-09-01T14:45:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTU4NzkxMw==", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1936#discussion_r481587913", "bodyText": "lock is never read", "author": "liubao68", "createdAt": "2020-09-02T03:03:22Z", "path": "handlers/handler-loadbalance/src/main/java/org/apache/servicecomb/loadbalance/ServiceCombServerStats.java", "diffHunk": "@@ -35,15 +36,14 @@\n \n   private static final Logger LOGGER = LoggerFactory.getLogger(ServiceCombServerStats.class);\n \n+  private final Object lock = new Object();", "originalCommit": "f7ab067dda21cbb6027c57fdd5bc33ee2a54e1d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg3NDgyMA==", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1936#discussion_r481874820", "bodyText": "The lock is used in method ensureWindow. It does not get involved in this issue.", "author": "yhs0092", "createdAt": "2020-09-02T08:19:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTU4NzkxMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTY0MDI5OA==", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1936#discussion_r481640298", "bodyText": "This method is not thread safe.", "author": "liubao68", "createdAt": "2020-09-02T04:04:07Z", "path": "handlers/handler-loadbalance/src/main/java/org/apache/servicecomb/loadbalance/ServiceCombServerStats.java", "diffHunk": "@@ -84,20 +84,35 @@ private void init(){\n   }\n \n   public static boolean isolatedServerCanTry() {\n-    return globalAllowIsolatedServerTryingFlag.get();\n+    TryingIsolatedServerMarker marker = globalAllowIsolatedServerTryingFlag.get();\n+    if (marker == null) {\n+      return true;\n+    }\n+    return marker.isOutdated();\n   }\n \n   /**\n    * Applying for a trying chance for the isolated server. There is only 1 trying chance globally concurrently.\n    *\n    * @return true if the chance is applied successfully, otherwise false\n    */\n-  public static boolean applyForTryingChance() {\n-    return isolatedServerCanTry() && globalAllowIsolatedServerTryingFlag.compareAndSet(true, false);\n+  public static boolean applyForTryingChance(Invocation invocation) {", "originalCommit": "f7ab067dda21cbb6027c57fdd5bc33ee2a54e1d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg3NTkwMA==", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1936#discussion_r481875900", "bodyText": "The thread safty is ensured by the CAS operation AtomicReference#compareAndSet", "author": "yhs0092", "createdAt": "2020-09-02T08:20:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTY0MDI5OA=="}], "type": "inlineReview", "revised_code": null}]}