{"pr_number": 1310, "pr_title": "Introduce an EventTypeUpcaster", "pr_createdAt": "2020-01-07T14:24:29Z", "pr_url": "https://github.com/AxonFramework/AxonFramework/pull/1310", "timeline": [{"oid": "f02479f7c925167d17f846d995e2448d89a01867", "url": "https://github.com/AxonFramework/AxonFramework/commit/f02479f7c925167d17f846d995e2448d89a01867", "message": "Introduce an EventTypeUpcaster\n\nOn the user group somebody asked for my insights into an upcaster which\nwould only allow for upcasting the event type. As I already had the\nrough pseudo code available, I figured an actual implementation wouldn't\n hurt too. To this end an abstract implementation of the\n SingleEventUpcaster should be provided, with abstract function to\n retrieve the expected and upcasted payload type / revision. Other\n methods used during canUpcast and doUpcast should be made protected to\n allow overriding by the user\n\n#event-type-upcaster", "committedDate": "2020-01-07T14:17:49Z", "type": "commit"}, {"oid": "63aa0977f3a82bd1d162055728843477f2f3ad57", "url": "https://github.com/AxonFramework/AxonFramework/commit/63aa0977f3a82bd1d162055728843477f2f3ad57", "message": "Use interface instead of concrete type\n\nThe test should utilize IntermediateEventRepresentation objects instead\nof InitialEventRepresentation for consistency\n\n#1310", "committedDate": "2020-01-07T14:25:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ0ODkyMw==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1310#discussion_r364448923", "bodyText": "Curious, why an abstract class and not a class where the expectedPayloadType, expectedRevision and their upcast countertypes are passed as constructor parameters?", "author": "abuijze", "createdAt": "2020-01-08T21:21:25Z", "path": "messaging/src/main/java/org/axonframework/serialization/upcasting/event/EventTypeUpcaster.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright (c) 2010-2020. Axon Framework\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.axonframework.serialization.upcasting.event;\n+\n+import org.axonframework.serialization.SerializedType;\n+import org.axonframework.serialization.SimpleSerializedType;\n+\n+import java.util.Objects;\n+import java.util.function.Function;\n+\n+/**\n+ * A {@link SingleEventUpcaster} implementation which allows for type upcasting only. This could be used if the event's\n+ * class name did not follow the desired naming convention or if an event's package name has been adjusted.\n+ * <p>\n+ * Note that this upcaster <b>should not</b> be used to change the semantic meaning of an event. Such a requirement\n+ * points towards a new event type instead of adjusting an existing one.\n+ *\n+ * @author Steven van Beelen\n+ * @since 4.3\n+ */\n+public abstract class EventTypeUpcaster extends SingleEventUpcaster {\n+\n+    /**\n+     * Retrieve the expected event payload type this upcaster should react on.\n+     *\n+     * @return the expected event payload type this upcaster should react on\n+     */\n+    public abstract String expectedPayloadType();", "originalCommit": "63aa0977f3a82bd1d162055728843477f2f3ad57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY1NTE4NA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1310#discussion_r364655184", "bodyText": "That's,,, a good question. Guess I felt like making an abstract class with abstract methods?\nRegardless, I feel a constructor is more sensible too, as it'll require less work from our users. Hence, I'll change this around.", "author": "smcvb", "createdAt": "2020-01-09T10:11:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ0ODkyMw=="}], "type": "inlineReview", "revised_code": {"commit": "b686be691dfecb501637a415178e0ddb23f72b5d", "chunk": "diff --git a/messaging/src/main/java/org/axonframework/serialization/upcasting/event/EventTypeUpcaster.java b/messaging/src/main/java/org/axonframework/serialization/upcasting/event/EventTypeUpcaster.java\nindex 75e61f5e8..7bb6964be 100644\n--- a/messaging/src/main/java/org/axonframework/serialization/upcasting/event/EventTypeUpcaster.java\n+++ b/messaging/src/main/java/org/axonframework/serialization/upcasting/event/EventTypeUpcaster.java\n\n@@ -32,35 +32,31 @@\n  * @author Steven van Beelen\n  * @since 4.3\n  */\n-public abstract class EventTypeUpcaster extends SingleEventUpcaster {\n+public class EventTypeUpcaster extends SingleEventUpcaster {\n \n-    /**\n-     * Retrieve the expected event payload type this upcaster should react on.\n-     *\n-     * @return the expected event payload type this upcaster should react on\n-     */\n-    public abstract String expectedPayloadType();\n-\n-    /**\n-     * Retrieve the expected event revision this upcaster should react on.\n-     *\n-     * @return the expected event revision this upcaster should react on\n-     */\n-    public abstract String expectedRevision();\n+    private final String expectedPayloadType;\n+    private final String expectedRevision;\n+    private final String upcastedPayloadType;\n+    private final String upcastedRevision;\n \n     /**\n-     * Retrieve the event payload type to upcast towards.\n+     * Instantiate an {@link EventTypeUpcaster} using the given expected and upcasted payload types and revisions.\n+     * <b>Note</b> that the payload type normally represents the fully qualified class name of the event to upcast.\n      *\n-     * @return the event payload type to upcast towards\n+     * @param expectedPayloadType the expected event payload type this upcaster should react on\n+     * @param expectedRevision    the expected event revision this upcaster should react on\n+     * @param upcastedPayloadType the event payload type to upcast towards\n+     * @param upcastedRevision    the event revision to upcast towards\n      */\n-    public abstract String upcastedPayloadType();\n-\n-    /**\n-     * Retrieve the event revision to upcast towards.\n-     *\n-     * @return the event revision to upcast towards\n-     */\n-    public abstract String upcastedRevision();\n+    public EventTypeUpcaster(String expectedPayloadType,\n+                             String expectedRevision,\n+                             String upcastedPayloadType,\n+                             String upcastedRevision) {\n+        this.expectedPayloadType = expectedPayloadType;\n+        this.expectedRevision = expectedRevision;\n+        this.upcastedPayloadType = upcastedPayloadType;\n+        this.upcastedRevision = upcastedRevision;\n+    }\n \n     @Override\n     protected boolean canUpcast(IntermediateEventRepresentation intermediateRepresentation) {\n"}}, {"oid": "b686be691dfecb501637a415178e0ddb23f72b5d", "url": "https://github.com/AxonFramework/AxonFramework/commit/b686be691dfecb501637a415178e0ddb23f72b5d", "message": "Use a constructor instead of abstract methods\n\nThe EventTypeUpcaster can be greatly simplified by having a constructor\nwith the required fields instead of making it an abstract class.\n\n#1310", "committedDate": "2020-01-09T10:45:55Z", "type": "commit"}]}