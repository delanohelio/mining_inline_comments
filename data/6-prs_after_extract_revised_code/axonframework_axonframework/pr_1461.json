{"pr_number": 1461, "pr_title": "Allow specific return types on creation policy always", "pr_createdAt": "2020-06-29T15:10:36Z", "pr_url": "https://github.com/AxonFramework/AxonFramework/pull/1461", "timeline": [{"oid": "9a2a7ec69322edaaab4ebe980c7d6228baf8d627", "url": "https://github.com/AxonFramework/AxonFramework/commit/9a2a7ec69322edaaab4ebe980c7d6228baf8d627", "message": "Allow specific returns type on creation policy always\n\nThe AggregateCreationPolicy#ALWAYS will default to returning the\naggregate identifier after command handling. Similar to a command\nhandling constructor. However, this policy allows to be placed on\nregular methods thus opening up to several return values. Hence, default\n to the aggregate identifier if no result is returned. Otherwise, return\n the result of command handling.\n\n#creation-policy-always-return-value", "committedDate": "2020-06-29T15:05:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ3MTA3MQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1461#discussion_r447471071", "bodyText": "I'd rather resolve return value if the handler is of type Void. In other situations, it's fine to return null:\n@CommandHandler\npublic MySuperAwesomeReturnType handle(MyCommand cmd) {\n  if (iDontLikeMyCmd(cmd)) {\n    return null;\n  }\n  return nonNullValue;\n}", "author": "m1l4n54v1c", "createdAt": "2020-06-30T07:32:38Z", "path": "modelling/src/main/java/org/axonframework/modelling/command/AggregateAnnotationCommandHandler.java", "diffHunk": "@@ -393,12 +394,14 @@ private AlwaysCreateAggregateCommandHandler(MessageHandlingMember<? super T> han\n \n         @Override\n         public Object handle(CommandMessage<?> command) throws Exception {\n+            AtomicReference<Object> resultReference = new AtomicReference<>();\n             Aggregate<T> aggregate = repository.newInstance(() -> {\n                 T newInstance = factoryMethod.call();\n-                handler.handle(command, newInstance);\n+                resultReference.set(handler.handle(command, newInstance));\n                 return newInstance;\n             });\n-            return resolveReturnValue(command, aggregate);\n+            Object commandHandlingResult = resultReference.get();\n+            return commandHandlingResult != null ? commandHandlingResult : resolveReturnValue(command, aggregate);", "originalCommit": "9a2a7ec69322edaaab4ebe980c7d6228baf8d627", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ4NjA4OQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1461#discussion_r447486089", "bodyText": "Couldn't agree more, so added this just now.", "author": "smcvb", "createdAt": "2020-06-30T07:57:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ3MTA3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU0OTI3Ng==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1461#discussion_r447549276", "bodyText": "I'm wondering, why do we need to \"resolve\" anything? It's a method, so the return value of that method could simply be used as the result of the command, just like any other command handler.\nIn the constructor, we didn't have a choice. The result value of a constructor is always the created instance. Since it's pretty bad practice to return an aggregate as a command's result, we added the resolver there.", "author": "abuijze", "createdAt": "2020-06-30T09:35:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ3MTA3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU1MzQ3Mw==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1461#discussion_r447553473", "bodyText": "So if I follow you correctly, you wouldn't want to resolve the aggregate identifier if the return type is void?", "author": "smcvb", "createdAt": "2020-06-30T09:42:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ3MTA3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "47e2e89c2e249355d5583ab992773cf34edd2dfc", "chunk": "diff --git a/modelling/src/main/java/org/axonframework/modelling/command/AggregateAnnotationCommandHandler.java b/modelling/src/main/java/org/axonframework/modelling/command/AggregateAnnotationCommandHandler.java\nindex a82e91051..d1baa05ed 100644\n--- a/modelling/src/main/java/org/axonframework/modelling/command/AggregateAnnotationCommandHandler.java\n+++ b/modelling/src/main/java/org/axonframework/modelling/command/AggregateAnnotationCommandHandler.java\n\n@@ -400,8 +401,14 @@ public Object handle(CommandMessage<?> command) throws Exception {\n                 resultReference.set(handler.handle(command, newInstance));\n                 return newInstance;\n             });\n-            Object commandHandlingResult = resultReference.get();\n-            return commandHandlingResult != null ? commandHandlingResult : resolveReturnValue(command, aggregate);\n+            return handlerHasVoidReturnType() ? resolveReturnValue(command, aggregate) : resultReference.get();\n+        }\n+\n+        public boolean handlerHasVoidReturnType() {\n+            return handler.unwrap(Method.class)\n+                          .map(Method::getReturnType)\n+                          .filter(void.class::equals)\n+                          .isPresent();\n         }\n \n         @Override\n"}}, {"oid": "47e2e89c2e249355d5583ab992773cf34edd2dfc", "url": "https://github.com/AxonFramework/AxonFramework/commit/47e2e89c2e249355d5583ab992773cf34edd2dfc", "message": "Allow null result\n\nAllow null result if the handler's return type is not void.\n\n#1461", "committedDate": "2020-06-30T07:59:11Z", "type": "commit"}]}