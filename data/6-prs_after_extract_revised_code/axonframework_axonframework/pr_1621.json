{"pr_number": 1621, "pr_title": "Deprecating MessageHandlingMember annotation specific methods", "pr_createdAt": "2020-12-01T14:37:24Z", "pr_url": "https://github.com/AxonFramework/AxonFramework/pull/1621", "timeline": [{"oid": "982dd3db7ff8c48ed18fdd4594bcefa4afd01f9a", "url": "https://github.com/AxonFramework/AxonFramework/commit/982dd3db7ff8c48ed18fdd4594bcefa4afd01f9a", "message": "Introduce HandlerAttributes and HasHandlerAttributes\n\nIntroduce the handler attributes container HandlerAttributes alongside\nthe meta-annotation HasHandlerAttributes. The annotation can be used to\nmeta-annotate all annotations which contain attributes of importance for\n message handling members. The HandlerAttributes will be used to store\n the attributes in, per annotation/handlerType found\n\n#annotation-api-deprecation", "committedDate": "2020-12-01T13:14:37Z", "type": "commit"}, {"oid": "b76db79c7471b8eb9a2b545cd5896056de3fa10a", "url": "https://github.com/AxonFramework/AxonFramework/commit/b76db79c7471b8eb9a2b545cd5896056de3fa10a", "message": "Multitude of adjustments in the util classes\n\n- Move the null or empty string check from BuilderUtils to ObjectUtils\n- Adjust AnnotationUtils#findAnnotationAttributes to specify whether all\n attributes on any level of the meta-annotations should be included, or\n if only attributes of the target annotation and overrides on other\n levels should be included\n- Add a methods to AnnotationUtils which validates whether a given\nAnnotation is meta-annotated with another annotation. In doing so, it\nshould collect all annotations which are, directly or indirectly,\nannotated with the subject annotation\n\n#annotation-api-deprecation", "committedDate": "2020-12-01T13:18:49Z", "type": "commit"}, {"oid": "611b6e6915f518c71c39493c80772365db293d6b", "url": "https://github.com/AxonFramework/AxonFramework/commit/611b6e6915f518c71c39493c80772365db293d6b", "message": "Meta-annotate handler annotation with HasHandlerAttributes\n\nMeta-annotated all message handling member annotations with\nHasHandlerAttributes so that we can inspect all handlers for the\npresence of this annotation\n\n#annotation-api-deprecation", "committedDate": "2020-12-01T13:30:01Z", "type": "commit"}, {"oid": "be922ed189abff2bbf784b4364083037930f284b", "url": "https://github.com/AxonFramework/AxonFramework/commit/be922ed189abff2bbf784b4364083037930f284b", "message": "Introduce HandlerAttributesUtils\n\nIntroduce a static method which can construct a HandlerAttributes object\n by using the new AnnotationUtils functionality to retrieve attributes\n with potential overridden attributes from indirectly annotated\n annotations, combined with the new functionality to validate whether a\n given annotation is meta-annotated with HasHandlerAttributes.\n\n#annotation-api-deprecation", "committedDate": "2020-12-01T13:35:08Z", "type": "commit"}, {"oid": "6c7f4adb9e936f872e3e54b6b729e86359c4f6ed", "url": "https://github.com/AxonFramework/AxonFramework/commit/6c7f4adb9e936f872e3e54b6b729e86359c4f6ed", "message": "Adjust the MessageHandlingMember\n\nAdjust the MessageHandlingMember by deprecating the annotation focused\nmethods in favor of generic methods based on handler type. The\nAnnotatedMessageHandlingMember will use the HandlerAttributes to return\nsimilar results as were previously provided through the annotation\nfocused methods. On top of that, resolve some warnings\n\n#annotation-api-deprecation", "committedDate": "2020-12-01T14:07:08Z", "type": "commit"}, {"oid": "c98aa7039f693a68e466460eec47741f53ee70df", "url": "https://github.com/AxonFramework/AxonFramework/commit/c98aa7039f693a68e466460eec47741f53ee70df", "message": "Rename field\n\nRename field to attributes\n\n#annotation-api-deprecation", "committedDate": "2020-12-01T16:34:38Z", "type": "commit"}, {"oid": "dbfd5a163736a9db664372a2bf1ad6d4d8addcde", "url": "https://github.com/AxonFramework/AxonFramework/commit/dbfd5a163736a9db664372a2bf1ad6d4d8addcde", "message": "Fine tune tests\n\n- Remove private classes in favor of public methods\n- Make local annotations protected\n- Add test case for non HasHandlerAttributes annotated handling member\n\n#annotation-api-deprecation", "committedDate": "2020-12-02T08:46:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg5MDM4MQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1621#discussion_r547890381", "bodyText": "Nit: This looks like it belongs more to StringUtils instead of ObjectUtils", "author": "sandjelkovic", "createdAt": "2020-12-23T10:33:15Z", "path": "messaging/src/main/java/org/axonframework/common/ObjectUtils.java", "diffHunk": "@@ -121,4 +124,16 @@ public static long getRemainingOfDeadline(long deadline) {\n         leftTimeout = leftTimeout < 0 ? 0 : leftTimeout;\n         return leftTimeout;\n     }\n+\n+    /**\n+     * Validate whether the given {@link String} {@code s} is not {@code null} and not empty (where empty is defined as\n+     * {@code \"\"}.\n+     *\n+     * @param s the {@link String} to validate whether it is not {@code null} and not empty\n+     * @return {@code true} if the given {@link String} {@code s} is not {@code null} and not empty, {@code false}\n+     * otherwise\n+     */\n+    public static boolean nonEmptyOrNull(String s) {", "originalCommit": "dbfd5a163736a9db664372a2bf1ad6d4d8addcde", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ0NjUzNQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1621#discussion_r550446535", "bodyText": "Fair point, added.", "author": "smcvb", "createdAt": "2020-12-31T10:03:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg5MDM4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "28655240497a30bbe42b9c7b440d82e2970b4496", "chunk": "diff --git a/messaging/src/main/java/org/axonframework/common/ObjectUtils.java b/messaging/src/main/java/org/axonframework/common/ObjectUtils.java\nindex 4a1a484cd..150ca419c 100644\n--- a/messaging/src/main/java/org/axonframework/common/ObjectUtils.java\n+++ b/messaging/src/main/java/org/axonframework/common/ObjectUtils.java\n\n@@ -124,16 +121,4 @@ public static long getRemainingOfDeadline(long deadline) {\n         leftTimeout = leftTimeout < 0 ? 0 : leftTimeout;\n         return leftTimeout;\n     }\n-\n-    /**\n-     * Validate whether the given {@link String} {@code s} is not {@code null} and not empty (where empty is defined as\n-     * {@code \"\"}.\n-     *\n-     * @param s the {@link String} to validate whether it is not {@code null} and not empty\n-     * @return {@code true} if the given {@link String} {@code s} is not {@code null} and not empty, {@code false}\n-     * otherwise\n-     */\n-    public static boolean nonEmptyOrNull(String s) {\n-        return Objects.nonNull(s) && !EMPTY_STRING.equals(s);\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg5NzcxMA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1621#discussion_r547897710", "bodyText": "If returning unmodifiable maps, inner maps should be unmodifiable as well. Or at least copied", "author": "sandjelkovic", "createdAt": "2020-12-23T10:51:10Z", "path": "messaging/src/main/java/org/axonframework/messaging/annotation/HandlerAttributes.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package org.axonframework.messaging.annotation;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Container for message handler attributes. Can store several {@link Map}s of {@link String} to {@link Object} under\n+ * their own key, resembling a message handling method which serves several handling functions.\n+ *\n+ * @author Steven van Beelen\n+ * @since 4.5\n+ */\n+public class HandlerAttributes {\n+\n+    private final Map<String, Map<String, Object>> attributes;\n+\n+    /**\n+     * Constructs an empty handler attributes object.\n+     */\n+    public HandlerAttributes() {\n+        this(new HashMap<>());\n+    }\n+\n+    /**\n+     * Construct a handler attributes object based on the given {@code handlerAttributes} {@link Map}.\n+     *\n+     * @param attributes a {@link Map} from handler type to attributes {@code Map} to base a {@link\n+     *                          HandlerAttributes} on\n+     */\n+    public HandlerAttributes(Map<String, Map<String, Object>> attributes) {\n+        this.attributes = attributes;\n+    }\n+\n+    /**\n+     * Put new {@code attributes} for the given {@code handlerType}.\n+     *\n+     * @param handlerType the type of handler to add {@code attributes} for\n+     * @param attributes  the {@link Map} of attribute information to add for the given {@code handlerType}\n+     */\n+    public void put(String handlerType, Map<String, Object> attributes) {\n+        this.attributes.put(handlerType, attributes);\n+    }\n+\n+    /**\n+     * Retrieve the attributes for the given {@code handlerType}. Might be {@code null} if there are no attributes\n+     * present for the specified type.\n+     *\n+     * @param handlerType the type of handler to retrieve attributes for\n+     * @return the attributes for the given {@code handlerType}\n+     */\n+    public Map<String, Object> get(String handlerType) {\n+        return Collections.unmodifiableMap(attributes.get(handlerType));\n+    }\n+\n+    /**\n+     * Retrieve all attributes for all handler types stored in this {@link HandlerAttributes} object. The returned\n+     * {@link Map} contains a {@link Map} of attribute name to attribute value, per handler type present.\n+     *\n+     * @return all attributes for all handler types stored in this {@link HandlerAttributes} object\n+     */\n+    public Map<String, Map<String, Object>> getAll() {\n+        return Collections.unmodifiableMap(attributes);", "originalCommit": "dbfd5a163736a9db664372a2bf1ad6d4d8addcde", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ0OTkwOA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1621#discussion_r550449908", "bodyText": "But of course, that's beneficial. Consider it changed.", "author": "smcvb", "createdAt": "2020-12-31T10:19:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg5NzcxMA=="}], "type": "inlineReview", "revised_code": {"commit": "227c86ae177e1ff651e6d20324a4f912d1652528", "chunk": "diff --git a/messaging/src/main/java/org/axonframework/messaging/annotation/HandlerAttributes.java b/messaging/src/main/java/org/axonframework/messaging/annotation/HandlerAttributes.java\nindex 4327941b4..c95581891 100644\n--- a/messaging/src/main/java/org/axonframework/messaging/annotation/HandlerAttributes.java\n+++ b/messaging/src/main/java/org/axonframework/messaging/annotation/HandlerAttributes.java\n\n@@ -27,8 +27,8 @@ public HandlerAttributes() {\n     /**\n      * Construct a handler attributes object based on the given {@code handlerAttributes} {@link Map}.\n      *\n-     * @param attributes a {@link Map} from handler type to attributes {@code Map} to base a {@link\n-     *                          HandlerAttributes} on\n+     * @param attributes a {@link Map} from handler type to attributes {@code Map} to base a {@link HandlerAttributes}\n+     *                   on\n      */\n     public HandlerAttributes(Map<String, Map<String, Object>> attributes) {\n         this.attributes = attributes;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkxMDQ3Mg==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1621#discussion_r547910472", "bodyText": "Might be worth splitting this method into 2 or 3 specialised methods.\n\nLooking up and gathering of targets annotated with the subject can be a separate method. As this is a recursive method with state passed trough, it might be better to hide this fact (visited and annotatedWithSubject parameters) from the outside.\nisAnnotatedWith implies a boolean return value to answer if the target is annotated with the subject. This can use the method that will gather all targets annotated with the subject from the above point to do the complex work. If performance is critical, it can have its own search but short-circuit the moment the annotation is found", "author": "sandjelkovic", "createdAt": "2020-12-23T11:22:37Z", "path": "messaging/src/main/java/org/axonframework/common/annotation/AnnotationUtils.java", "diffHunk": "@@ -179,8 +270,51 @@ private static String resolveName(Method method) {\n         return method.getName();\n     }\n \n-    private AnnotationUtils() {\n-        // utility class\n+    /**\n+     * Validate whether the given {@code target} annotation {@link Class} is meta-annotated with the given {@code\n+     * subject}. If this is the case for the {@code target} itself or any meta-annotation on any level of the {@code\n+     * target}, {@code true} will be returned.\n+     * <p>\n+     * Any {@link Annotation} classes which are directly annotated or meta-annotated with the given {@code subject} will\n+     * be stored in the {@code annotatedWithSubject} {@link Set}. The {@code visited} {@code Set} is used to ignore\n+     * annotations which have already been validated.\n+     *\n+     * @param target               the annotation {@link Class} to validate if it is annotated with the given {@code\n+     *                             subject}\n+     * @param subject              the annotation {@link Class} to check whether it is present on the given {@code\n+     *                             target}, directly or through meta-annotations\n+     * @param annotatedWithSubject a {@link Set} to store all class' in which are annotated with the {@code subject},\n+     *                             either directly or through meta-annotations\n+     * @param visited              a {@link Set} containing all annotation class' which have been visited in the process\n+     *                             to overcome an endless validation loop\n+     * @return {@code true} if the {@code target} or any meta-annotations of the {@code target} are annotated with the\n+     * {@code subject}, {@code false} otherwise\n+     */\n+    public static boolean isAnnotatedWith(Class<? extends Annotation> target,", "originalCommit": "dbfd5a163736a9db664372a2bf1ad6d4d8addcde", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ1MTQ1Nw==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1621#discussion_r550451457", "bodyText": "Although yes, I can create an isAnnotatedWith which does not expose visited (the second method) and/or annotatedWithSubject (the third method), there is nothing using at all at this stage. I was in doubt about doing it anyway, but it felt like premature optimization to me as long as nothing will be using that function at all.\nIf you feel strongly it clarifies things for our (future) selves and users, I'd gladly add it too. At any point, let me know. :-)", "author": "smcvb", "createdAt": "2020-12-31T10:27:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkxMDQ3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTA2Nzc3MA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1621#discussion_r555067770", "bodyText": "I'm with it either way for now as long it's only used in one place. When we expand the usage to another place, it will make way more sense to at least remove mutability", "author": "sandjelkovic", "createdAt": "2021-01-11T14:04:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkxMDQ3Mg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "28655240497a30bbe42b9c7b440d82e2970b4496", "url": "https://github.com/AxonFramework/AxonFramework/commit/28655240497a30bbe42b9c7b440d82e2970b4496", "message": "Move string specific method to a StringUtils class\n\nMove string specific method to a StringUtils class\n\n#1621", "committedDate": "2020-12-31T10:02:41Z", "type": "commit"}, {"oid": "227c86ae177e1ff651e6d20324a4f912d1652528", "url": "https://github.com/AxonFramework/AxonFramework/commit/227c86ae177e1ff651e6d20324a4f912d1652528", "message": "Enforce deep unmodifiable map\n\nEnforce deep unmodifiable map by moving through all entries and making\neach value unmodifiable too.\n\n#1621", "committedDate": "2020-12-31T10:20:47Z", "type": "commit"}, {"oid": "cfc2eb11dfc1f89cf8e44d99bf271562a8628ccd", "url": "https://github.com/AxonFramework/AxonFramework/commit/cfc2eb11dfc1f89cf8e44d99bf271562a8628ccd", "message": "Merge remote-tracking branch 'origin/master' into feature/annotation-api-deprecation\n\n# Conflicts:\n#\tmessaging/src/main/java/org/axonframework/messaging/annotation/AnnotatedMessageHandlingMember.java", "committedDate": "2021-02-16T12:42:11Z", "type": "commit"}, {"oid": "a23b0e46fd7021e44b0b636e56d7493453ec5e19", "url": "https://github.com/AxonFramework/AxonFramework/commit/a23b0e46fd7021e44b0b636e56d7493453ec5e19", "message": "Merge remote-tracking branch 'origin/master' into feature/annotation-api-deprecation", "committedDate": "2021-02-18T11:53:39Z", "type": "commit"}, {"oid": "e5f2c819f4dc884d185097c590c16feb52a937ef", "url": "https://github.com/AxonFramework/AxonFramework/commit/e5f2c819f4dc884d185097c590c16feb52a937ef", "message": "Introduce MessageHandlingMember#attribute method\n\nInstead of claiming the entire set of attributes, allowing to retrieve a\n single attribute would be helpful too. Add a dictionary to simplify the\n retrieval of Axon specific attributes\n\n#1621", "committedDate": "2021-02-18T12:36:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODQ5Njk1NA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1621#discussion_r578496954", "bodyText": "I suggest adding these to the HandlerAttributes class, as that's where these keys are expected to be used.", "author": "abuijze", "createdAt": "2021-02-18T15:10:36Z", "path": "messaging/src/main/java/org/axonframework/messaging/annotation/HandlerAttributeDictionary.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package org.axonframework.messaging.annotation;\n+\n+/**\n+ * Dictionary containing the possible attributes a {@link MessageHandlingMember} can have. Can be used as input for\n+ * {@link MessageHandlingMember#attribute(String)}.\n+ *\n+ * @author Steven van Beelen\n+ * @since 4.5\n+ */\n+public abstract class HandlerAttributeDictionary {", "originalCommit": "e5f2c819f4dc884d185097c590c16feb52a937ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTM3OTI2MA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1621#discussion_r585379260", "bodyText": "Make sense, will do.", "author": "smcvb", "createdAt": "2021-03-02T08:59:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODQ5Njk1NA=="}], "type": "inlineReview", "revised_code": {"commit": "58e1cdea563adcf295c534b6473eebde52c7485f", "chunk": "diff --git a/messaging/src/main/java/org/axonframework/messaging/annotation/HandlerAttributeDictionary.java b/messaging/src/main/java/org/axonframework/messaging/annotation/HandlerAttributeDictionary.java\ndeleted file mode 100644\nindex daeb52a21..000000000\n--- a/messaging/src/main/java/org/axonframework/messaging/annotation/HandlerAttributeDictionary.java\n+++ /dev/null\n\n@@ -1,81 +0,0 @@\n-package org.axonframework.messaging.annotation;\n-\n-/**\n- * Dictionary containing the possible attributes a {@link MessageHandlingMember} can have. Can be used as input for\n- * {@link MessageHandlingMember#attribute(String)}.\n- *\n- * @author Steven van Beelen\n- * @since 4.5\n- */\n-public abstract class HandlerAttributeDictionary {\n-\n-    /**\n-     * Attribute key referencing the {@link org.axonframework.messaging.Message} type being handled by the handler.\n-     */\n-    public static final String MESSAGE_TYPE = \"MessageHandler.messageType\";\n-    /**\n-     * Attribute key referencing the payload type contained in the {@link org.axonframework.messaging.Message}.\n-     */\n-    public static final String PAYLOAD_TYPE = \"MessageHandler.payloadType\";\n-    /**\n-     * Attribute key referencing the name of the {@link org.axonframework.commandhandling.CommandMessage} the handler\n-     * can handle.\n-     */\n-    public static final String COMMAND_NAME = \"CommandHandler.commandName\";\n-    /**\n-     * Attribute key referencing the routing key used to route a {@link org.axonframework.commandhandling.CommandMessage}\n-     * to the handler.\n-     */\n-    public static final String COMMAND_ROUTING_KEY = \"CommandHandler.routingKey\";\n-    /**\n-     * Attribute key referencing the name of the {@link org.axonframework.queryhandling.QueryMessage} the handler can\n-     * handle.\n-     */\n-    public static final String QUERY_NAME = \"QueryHandler.queryName\";\n-    /**\n-     * Attribute key referencing the exception result type the handler can handle.\n-     */\n-    public static final String EXCEPTION_RESULT_TYPE = \"ExceptionHandler.resultType\";\n-\n-    /**\n-     * Attribute key referencing whether the handler forces the creation of a new saga instance.\n-     */\n-    public static final String FORCE_NEW_SAGA = \"StartSaga.forceNew\";\n-    /**\n-     * Attribute key referencing the property in the handled {@link org.axonframework.eventhandling.EventMessage} to\n-     * associate a saga instance with.\n-     */\n-    public static final String SAGA_ASSOCIATION_PROPERTY = \"SagaEventHandler.associationProperty\";\n-    /**\n-     * Attribute key referencing the saga event handler's association property key name used.\n-     */\n-    public static final String SAGA_ASSOCIATION_PROPERTY_KEY_NAME = \"SagaEventHandler.keyName\";\n-    /**\n-     * Attribute key referencing the type of association resolver used by a saga event handler.\n-     */\n-    public static final String SAGA_ASSOCIATION_RESOLVER = \"SagaEventHandler.associationResolver\";\n-\n-    /**\n-     * Attribute key referencing the {@link org.axonframework.lifecycle.Phase} to invoke a start handler in.\n-     */\n-    public static final String START_PHASE = \"StartHandler.phase\";\n-    /**\n-     * Attribute key referencing the {@link org.axonframework.lifecycle.Phase} to invoke a shutdown handler in.\n-     */\n-    public static final String SHUTDOWN_PHASE = \"ShutdownHandler.phase\";\n-\n-    /**\n-     * Attribute key referencing an aggregate creation policy to be used when handling a command.\n-     */\n-    public static final String AGGREGATE_CREATION_POLICY = \"CreationPolicy.creationPolicy\";\n-\n-    /**\n-     * Attribute key referencing whether the handler is allowed to be invoked on replays.\n-     */\n-    public static final String ALLOW_REPLAY = \"AllowReplay.allowReplay\";\n-\n-    private HandlerAttributeDictionary() {\n-        // Utility class\n-    }\n-}\n-\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODQ5OTkyMQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1621#discussion_r578499921", "bodyText": "Shouldn't we just create a subclass of HandlerAttributes (called AnnotatedHandlerAttributes) that takes an AnnotatedElement as a constructor and populates its internal Map?\nOr otherwise, maybe HandlerAttributes should be an interface with different implementations.... \ud83e\udd37\u200d\u2642\ufe0f", "author": "abuijze", "createdAt": "2021-02-18T15:14:29Z", "path": "messaging/src/main/java/org/axonframework/messaging/annotation/HandlerAttributesUtils.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.axonframework.messaging.annotation;\n+\n+import org.axonframework.common.annotation.AnnotationUtils;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.AnnotatedElement;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import static org.axonframework.common.annotation.AnnotationUtils.findAnnotationAttributes;\n+import static org.axonframework.common.annotation.AnnotationUtils.isAnnotatedWith;\n+\n+/**\n+ * Utility class which can generate a {@link HandlerAttributes} object for a given {@link AnnotatedElement}. It does so\n+ * by validating all (meta-)annotations of the given element for the presence of the {@link HasHandlerAttributes}\n+ * annotation. Each found (meta-)annotation's attributes will be included in the {@code HandlerAttributes}.\n+ * <p>\n+ * This utility can be used to support annotation driven {@link MessageHandlingMember} implementations to automatically\n+ * generate the attributes collection.\n+ *\n+ * @author Steven van Beelen\n+ * @since 4.5\n+ */\n+public abstract class HandlerAttributesUtils {", "originalCommit": "e5f2c819f4dc884d185097c590c16feb52a937ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTM3OTYzMA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1621#discussion_r585379630", "bodyText": "Nice, liking this idea too. Gonna implement this asap.", "author": "smcvb", "createdAt": "2021-03-02T08:59:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODQ5OTkyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "58e1cdea563adcf295c534b6473eebde52c7485f", "chunk": "diff --git a/messaging/src/main/java/org/axonframework/messaging/annotation/HandlerAttributesUtils.java b/messaging/src/main/java/org/axonframework/messaging/annotation/HandlerAttributesUtils.java\ndeleted file mode 100644\nindex a4f5d7e29..000000000\n--- a/messaging/src/main/java/org/axonframework/messaging/annotation/HandlerAttributesUtils.java\n+++ /dev/null\n\n@@ -1,59 +0,0 @@\n-package org.axonframework.messaging.annotation;\n-\n-import org.axonframework.common.annotation.AnnotationUtils;\n-\n-import java.lang.annotation.Annotation;\n-import java.lang.reflect.AnnotatedElement;\n-import java.util.HashSet;\n-import java.util.Set;\n-\n-import static org.axonframework.common.annotation.AnnotationUtils.findAnnotationAttributes;\n-import static org.axonframework.common.annotation.AnnotationUtils.isAnnotatedWith;\n-\n-/**\n- * Utility class which can generate a {@link HandlerAttributes} object for a given {@link AnnotatedElement}. It does so\n- * by validating all (meta-)annotations of the given element for the presence of the {@link HasHandlerAttributes}\n- * annotation. Each found (meta-)annotation's attributes will be included in the {@code HandlerAttributes}.\n- * <p>\n- * This utility can be used to support annotation driven {@link MessageHandlingMember} implementations to automatically\n- * generate the attributes collection.\n- *\n- * @author Steven van Beelen\n- * @since 4.5\n- */\n-public abstract class HandlerAttributesUtils {\n-\n-    private HandlerAttributesUtils() {\n-        // Utility class\n-    }\n-\n-    /**\n-     * Create a {@link HandlerAttributes} containing all attributes of annotations (meta-)annotated with {@link\n-     * HasHandlerAttributes} on the given {@code element}. Attributes will be stored based on the simple name of the\n-     * annotation (meta-)annotated with {@code HasHandlerAttributes}.\n-     *\n-     * @param element the {@link AnnotatedElement} to extract handler attributes for.\n-     * @return a {@link HandlerAttributes} containing all attributes of annotations (meta-)annotated with {@link\n-     * HasHandlerAttributes} on the given {@code element}\n-     */\n-    public static HandlerAttributes handlerAttributes(AnnotatedElement element) {\n-        HandlerAttributes result = new HandlerAttributes();\n-        Set<Class<? extends Annotation>> visitedAnnotations = new HashSet<>();\n-\n-        for (Annotation annotation : element.getAnnotations()) {\n-            Set<Class<? extends Annotation>> annotatedWithHasHandlerAttributes = new HashSet<>();\n-            if (isAnnotatedWith(annotation.annotationType(),\n-                                HasHandlerAttributes.class,\n-                                annotatedWithHasHandlerAttributes,\n-                                visitedAnnotations)) {\n-                for (Class<? extends Annotation> handlerAnnotation : annotatedWithHasHandlerAttributes) {\n-                    findAnnotationAttributes(element, handlerAnnotation, AnnotationUtils.OVERRIDE_ONLY).ifPresent(\n-                            attributes -> result.put(handlerAnnotation.getSimpleName(), attributes)\n-                    );\n-                }\n-            }\n-        }\n-\n-        return result;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODk4NzA0OA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1621#discussion_r578987048", "bodyText": "Should this just be key->value mapping, instead of key->key->value?", "author": "abuijze", "createdAt": "2021-02-19T07:46:14Z", "path": "messaging/src/main/java/org/axonframework/messaging/annotation/HandlerAttributes.java", "diffHunk": "@@ -0,0 +1,144 @@\n+package org.axonframework.messaging.annotation;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Container for message handler attributes. Can store several {@link Map}s of {@link String} to {@link Object} under\n+ * their own key, resembling a message handling method which serves several handling functions.\n+ *\n+ * @author Steven van Beelen\n+ * @since 4.5\n+ */\n+public class HandlerAttributes {\n+\n+    private final Map<String, Map<String, Object>> attributes;\n+\n+    /**\n+     * Constructs an empty handler attributes object.\n+     */\n+    public HandlerAttributes() {\n+        this(new HashMap<>());\n+    }\n+\n+    /**\n+     * Construct a handler attributes object based on the given {@code handlerAttributes} {@link Map}.\n+     *\n+     * @param attributes a {@link Map} from handler type to attributes {@code Map} to base a {@link HandlerAttributes}\n+     *                   on\n+     */\n+    public HandlerAttributes(Map<String, Map<String, Object>> attributes) {", "originalCommit": "e5f2c819f4dc884d185097c590c16feb52a937ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTYxMzY3Mg==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1621#discussion_r585613672", "bodyText": "My initial idea was \"no\", but let's adjust the API more thoroughly by no longer providing a means to retrieve all attributes for a given handler type. With that in place, I'd say \"yes\" to this.", "author": "smcvb", "createdAt": "2021-03-02T14:32:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODk4NzA0OA=="}], "type": "inlineReview", "revised_code": {"commit": "58e1cdea563adcf295c534b6473eebde52c7485f", "chunk": "diff --git a/messaging/src/main/java/org/axonframework/messaging/annotation/HandlerAttributes.java b/messaging/src/main/java/org/axonframework/messaging/annotation/HandlerAttributes.java\nindex c95581891..68fe46131 100644\n--- a/messaging/src/main/java/org/axonframework/messaging/annotation/HandlerAttributes.java\n+++ b/messaging/src/main/java/org/axonframework/messaging/annotation/HandlerAttributes.java\n\n@@ -1,144 +1,116 @@\n package org.axonframework.messaging.annotation;\n \n-import java.util.Collections;\n-import java.util.HashMap;\n import java.util.Map;\n-import java.util.Objects;\n-import java.util.stream.Collectors;\n \n /**\n- * Container for message handler attributes. Can store several {@link Map}s of {@link String} to {@link Object} under\n- * their own key, resembling a message handling method which serves several handling functions.\n+ * Container for message handler attributes. Typically used by {@link MessageHandlingMember} implementations. Stores\n+ * handler attributes in a {@link Map} of {@link String} to {@link Object}. Some default keys used by {@link\n+ * HandlerAttributes} implementations, like {@link #MESSAGE_TYPE} can be used to {@link #get(String)} entries.\n  *\n  * @author Steven van Beelen\n  * @since 4.5\n  */\n-public class HandlerAttributes {\n+public interface HandlerAttributes {\n \n-    private final Map<String, Map<String, Object>> attributes;\n+    /**\n+     * Attribute key referencing the {@link org.axonframework.messaging.Message} type being handled by the handler.\n+     */\n+    String MESSAGE_TYPE = \"MessageHandler.messageType\";\n+    /**\n+     * Attribute key referencing the payload type contained in the {@link org.axonframework.messaging.Message}.\n+     */\n+    String PAYLOAD_TYPE = \"MessageHandler.payloadType\";\n+    /**\n+     * Attribute key referencing the name of the {@link org.axonframework.commandhandling.CommandMessage} the handler\n+     * can handle.\n+     */\n+    String COMMAND_NAME = \"CommandHandler.commandName\";\n+    /**\n+     * Attribute key referencing the routing key used to route a {@link org.axonframework.commandhandling.CommandMessage}\n+     * to the handler.\n+     */\n+    String COMMAND_ROUTING_KEY = \"CommandHandler.routingKey\";\n+    /**\n+     * Attribute key referencing the name of the {@link org.axonframework.queryhandling.QueryMessage} the handler can\n+     * handle.\n+     */\n+    String QUERY_NAME = \"QueryHandler.queryName\";\n \n     /**\n-     * Constructs an empty handler attributes object.\n+     * Attribute key referencing the result type the handler can handle.\n+     */\n+    String RESULT_TYPE = \"ResultHandler.resultType\";\n+    /**\n+     * Attribute key referencing the exception result type the handler can handle.\n      */\n-    public HandlerAttributes() {\n-        this(new HashMap<>());\n-    }\n+    String EXCEPTION_RESULT_TYPE = \"ExceptionHandler.resultType\";\n \n     /**\n-     * Construct a handler attributes object based on the given {@code handlerAttributes} {@link Map}.\n-     *\n-     * @param attributes a {@link Map} from handler type to attributes {@code Map} to base a {@link HandlerAttributes}\n-     *                   on\n+     * Attribute key referencing whether the handler forces the creation of a new saga instance.\n+     */\n+    String FORCE_NEW_SAGA = \"StartSaga.forceNew\";\n+    /**\n+     * Attribute key referencing the property in the handled {@link org.axonframework.eventhandling.EventMessage} to\n+     * associate a saga instance with.\n+     */\n+    String SAGA_ASSOCIATION_PROPERTY = \"SagaEventHandler.associationProperty\";\n+    /**\n+     * Attribute key referencing the saga event handler's association property key name used.\n+     */\n+    String SAGA_ASSOCIATION_PROPERTY_KEY_NAME = \"SagaEventHandler.keyName\";\n+    /**\n+     * Attribute key referencing the type of association resolver used by a saga event handler.\n      */\n-    public HandlerAttributes(Map<String, Map<String, Object>> attributes) {\n-        this.attributes = attributes;\n-    }\n+    String SAGA_ASSOCIATION_RESOLVER = \"SagaEventHandler.associationResolver\";\n \n     /**\n-     * Put new {@code attributes} for the given {@code handlerType}.\n-     *\n-     * @param handlerType the type of handler to add {@code attributes} for\n-     * @param attributes  the {@link Map} of attribute information to add for the given {@code handlerType}\n+     * Attribute key referencing the {@link org.axonframework.lifecycle.Phase} to invoke a start handler in.\n      */\n-    public void put(String handlerType, Map<String, Object> attributes) {\n-        this.attributes.put(handlerType, attributes);\n-    }\n+    String START_PHASE = \"StartHandler.phase\";\n+    /**\n+     * Attribute key referencing the {@link org.axonframework.lifecycle.Phase} to invoke a shutdown handler in.\n+     */\n+    String SHUTDOWN_PHASE = \"ShutdownHandler.phase\";\n \n     /**\n-     * Retrieve the attributes for the given {@code handlerType}. Might be {@code null} if there are no attributes\n-     * present for the specified type.\n-     *\n-     * @param handlerType the type of handler to retrieve attributes for\n-     * @return the attributes for the given {@code handlerType}\n+     * Attribute key referencing an aggregate creation policy to be used when handling a command.\n      */\n-    public Map<String, Object> get(String handlerType) {\n-        return Collections.unmodifiableMap(attributes.get(handlerType));\n-    }\n+    String AGGREGATE_CREATION_POLICY = \"CreationPolicy.creationPolicy\";\n \n     /**\n-     * Retrieve all attributes for all handler types stored in this {@link HandlerAttributes} object. The returned\n-     * {@link Map} contains a {@link Map} of attribute name to attribute value, per handler type present.\n-     *\n-     * @return all attributes for all handler types stored in this {@link HandlerAttributes} object\n-     */\n-    public Map<String, Map<String, Object>> getAll() {\n-        return Collections.unmodifiableMap(\n-                attributes.entrySet().stream()\n-                          .collect(Collectors.toMap(\n-                                  Map.Entry::getKey,\n-                                  entry -> Collections.unmodifiableMap(entry.getValue())\n-                          ))\n-        );\n-    }\n+     * Attribute key referencing whether the handler is allowed to be invoked on replays.\n+     */\n+    String ALLOW_REPLAY = \"AllowReplay.allowReplay\";\n \n     /**\n-     * Retrieve all attributes for all handler types stored in this {@link HandlerAttributes} object in a prefixed\n-     * format. The returned {@link Map} contains keys representing a format of {@code \"[handlerType].[attributeName]\"}\n-     * with the respective attribute value corresponding to the attribute name.\n-     * <p>\n-     * Serves the purpose a of providing a {@code Map} containing a property file like structure.\n+     * Retrieve the attribute for the given {@code attributeKey}. Might be {@code null} if there is no attribute present\n+     * for the given key.\n      *\n-     * @return all attributes for all handler types stored in this {@link HandlerAttributes} object in a prefixed format\n-     */\n-    public Map<String, Object> getAllPrefixed() {\n-        Map<String, Object> allPrefixedAttributes = new HashMap<>();\n-        for (Map.Entry<String, Map<String, Object>> attributeEntry : attributes.entrySet()) {\n-            String handlerType = attributeEntry.getKey();\n-            Map<String, Object> prefixedAttributes =\n-                    attributeEntry.getValue().entrySet().stream()\n-                                  .collect(Collectors.toMap(\n-                                          entry -> prefixedKey(handlerType, entry.getKey()),\n-                                          Map.Entry::getValue\n-                                  ));\n-            allPrefixedAttributes.putAll(prefixedAttributes);\n-        }\n-        return Collections.unmodifiableMap(allPrefixedAttributes);\n-    }\n+     * @param attributeKey the attribute key to retrieve an attribute for\n+     * @param <R>          the type of attribute to retrieve\n+     * @return the attribute for the given {@code attributeKey}\n+     */\n+    <R> R get(String attributeKey);\n \n-    private String prefixedKey(String handlerType, String attributeName) {\n-        return handlerType + \".\" + attributeName;\n-    }\n+    /**\n+     * Retrieve all attributes stored in this {@link HandlerAttributes} object.\n+     *\n+     * @return all attributes stored in this {@link HandlerAttributes} object\n+     */\n+    Map<String, Object> getAll();\n \n     /**\n-     * Validates whether the given {@code handlerType} has attributes in this object.\n+     * Validates whether the given {@code attributeKey} is present in this object.\n      *\n-     * @param handlerType the type of handler to validate if it has attributes present in this object\n-     * @return {@code true} if there are attributes for the given {@code handlerType} present, {@code false} otherwise\n+     * @param attributeKey the attribute key to validate if it is present in this object\n+     * @return {@code true} if there is an attribute for the given {@code attributeKey} present, {@code false} otherwise\n      */\n-    public boolean containsAttributesFor(String handlerType) {\n-        return attributes.containsKey(handlerType);\n-    }\n+    boolean contains(String attributeKey);\n \n     /**\n      * Validate whether zero attributes are present in this object.\n      *\n      * @return {@code true} if there are no attributes present, {@code false} otherwise\n      */\n-    public boolean isEmpty() {\n-        return attributes.isEmpty();\n-    }\n-\n-    @Override\n-    public boolean equals(Object o) {\n-        if (this == o) {\n-            return true;\n-        }\n-        if (o == null || getClass() != o.getClass()) {\n-            return false;\n-        }\n-        HandlerAttributes that = (HandlerAttributes) o;\n-        return Objects.equals(attributes, that.attributes);\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return Objects.hash(attributes);\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return \"HandlerAttributes{\" +\n-                \"handlerAttributes=\" + attributes +\n-                '}';\n-    }\n+    boolean isEmpty();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODk4NzgyOQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1621#discussion_r578987829", "bodyText": "This sentence doesn't make things much clearer. Let's remove it. It's just a bunch of key->value tuples, where we get all the tuples whose key starts with the given prefix.", "author": "abuijze", "createdAt": "2021-02-19T07:47:54Z", "path": "messaging/src/main/java/org/axonframework/messaging/annotation/HandlerAttributes.java", "diffHunk": "@@ -0,0 +1,144 @@\n+package org.axonframework.messaging.annotation;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Container for message handler attributes. Can store several {@link Map}s of {@link String} to {@link Object} under\n+ * their own key, resembling a message handling method which serves several handling functions.\n+ *\n+ * @author Steven van Beelen\n+ * @since 4.5\n+ */\n+public class HandlerAttributes {\n+\n+    private final Map<String, Map<String, Object>> attributes;\n+\n+    /**\n+     * Constructs an empty handler attributes object.\n+     */\n+    public HandlerAttributes() {\n+        this(new HashMap<>());\n+    }\n+\n+    /**\n+     * Construct a handler attributes object based on the given {@code handlerAttributes} {@link Map}.\n+     *\n+     * @param attributes a {@link Map} from handler type to attributes {@code Map} to base a {@link HandlerAttributes}\n+     *                   on\n+     */\n+    public HandlerAttributes(Map<String, Map<String, Object>> attributes) {\n+        this.attributes = attributes;\n+    }\n+\n+    /**\n+     * Put new {@code attributes} for the given {@code handlerType}.\n+     *\n+     * @param handlerType the type of handler to add {@code attributes} for\n+     * @param attributes  the {@link Map} of attribute information to add for the given {@code handlerType}\n+     */\n+    public void put(String handlerType, Map<String, Object> attributes) {\n+        this.attributes.put(handlerType, attributes);\n+    }\n+\n+    /**\n+     * Retrieve the attributes for the given {@code handlerType}. Might be {@code null} if there are no attributes\n+     * present for the specified type.\n+     *\n+     * @param handlerType the type of handler to retrieve attributes for\n+     * @return the attributes for the given {@code handlerType}\n+     */\n+    public Map<String, Object> get(String handlerType) {\n+        return Collections.unmodifiableMap(attributes.get(handlerType));\n+    }\n+\n+    /**\n+     * Retrieve all attributes for all handler types stored in this {@link HandlerAttributes} object. The returned\n+     * {@link Map} contains a {@link Map} of attribute name to attribute value, per handler type present.\n+     *\n+     * @return all attributes for all handler types stored in this {@link HandlerAttributes} object\n+     */\n+    public Map<String, Map<String, Object>> getAll() {\n+        return Collections.unmodifiableMap(\n+                attributes.entrySet().stream()\n+                          .collect(Collectors.toMap(\n+                                  Map.Entry::getKey,\n+                                  entry -> Collections.unmodifiableMap(entry.getValue())\n+                          ))\n+        );\n+    }\n+\n+    /**\n+     * Retrieve all attributes for all handler types stored in this {@link HandlerAttributes} object in a prefixed\n+     * format. The returned {@link Map} contains keys representing a format of {@code \"[handlerType].[attributeName]\"}\n+     * with the respective attribute value corresponding to the attribute name.\n+     * <p>\n+     * Serves the purpose a of providing a {@code Map} containing a property file like structure.", "originalCommit": "e5f2c819f4dc884d185097c590c16feb52a937ef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58e1cdea563adcf295c534b6473eebde52c7485f", "chunk": "diff --git a/messaging/src/main/java/org/axonframework/messaging/annotation/HandlerAttributes.java b/messaging/src/main/java/org/axonframework/messaging/annotation/HandlerAttributes.java\nindex c95581891..68fe46131 100644\n--- a/messaging/src/main/java/org/axonframework/messaging/annotation/HandlerAttributes.java\n+++ b/messaging/src/main/java/org/axonframework/messaging/annotation/HandlerAttributes.java\n\n@@ -1,144 +1,116 @@\n package org.axonframework.messaging.annotation;\n \n-import java.util.Collections;\n-import java.util.HashMap;\n import java.util.Map;\n-import java.util.Objects;\n-import java.util.stream.Collectors;\n \n /**\n- * Container for message handler attributes. Can store several {@link Map}s of {@link String} to {@link Object} under\n- * their own key, resembling a message handling method which serves several handling functions.\n+ * Container for message handler attributes. Typically used by {@link MessageHandlingMember} implementations. Stores\n+ * handler attributes in a {@link Map} of {@link String} to {@link Object}. Some default keys used by {@link\n+ * HandlerAttributes} implementations, like {@link #MESSAGE_TYPE} can be used to {@link #get(String)} entries.\n  *\n  * @author Steven van Beelen\n  * @since 4.5\n  */\n-public class HandlerAttributes {\n+public interface HandlerAttributes {\n \n-    private final Map<String, Map<String, Object>> attributes;\n+    /**\n+     * Attribute key referencing the {@link org.axonframework.messaging.Message} type being handled by the handler.\n+     */\n+    String MESSAGE_TYPE = \"MessageHandler.messageType\";\n+    /**\n+     * Attribute key referencing the payload type contained in the {@link org.axonframework.messaging.Message}.\n+     */\n+    String PAYLOAD_TYPE = \"MessageHandler.payloadType\";\n+    /**\n+     * Attribute key referencing the name of the {@link org.axonframework.commandhandling.CommandMessage} the handler\n+     * can handle.\n+     */\n+    String COMMAND_NAME = \"CommandHandler.commandName\";\n+    /**\n+     * Attribute key referencing the routing key used to route a {@link org.axonframework.commandhandling.CommandMessage}\n+     * to the handler.\n+     */\n+    String COMMAND_ROUTING_KEY = \"CommandHandler.routingKey\";\n+    /**\n+     * Attribute key referencing the name of the {@link org.axonframework.queryhandling.QueryMessage} the handler can\n+     * handle.\n+     */\n+    String QUERY_NAME = \"QueryHandler.queryName\";\n \n     /**\n-     * Constructs an empty handler attributes object.\n+     * Attribute key referencing the result type the handler can handle.\n+     */\n+    String RESULT_TYPE = \"ResultHandler.resultType\";\n+    /**\n+     * Attribute key referencing the exception result type the handler can handle.\n      */\n-    public HandlerAttributes() {\n-        this(new HashMap<>());\n-    }\n+    String EXCEPTION_RESULT_TYPE = \"ExceptionHandler.resultType\";\n \n     /**\n-     * Construct a handler attributes object based on the given {@code handlerAttributes} {@link Map}.\n-     *\n-     * @param attributes a {@link Map} from handler type to attributes {@code Map} to base a {@link HandlerAttributes}\n-     *                   on\n+     * Attribute key referencing whether the handler forces the creation of a new saga instance.\n+     */\n+    String FORCE_NEW_SAGA = \"StartSaga.forceNew\";\n+    /**\n+     * Attribute key referencing the property in the handled {@link org.axonframework.eventhandling.EventMessage} to\n+     * associate a saga instance with.\n+     */\n+    String SAGA_ASSOCIATION_PROPERTY = \"SagaEventHandler.associationProperty\";\n+    /**\n+     * Attribute key referencing the saga event handler's association property key name used.\n+     */\n+    String SAGA_ASSOCIATION_PROPERTY_KEY_NAME = \"SagaEventHandler.keyName\";\n+    /**\n+     * Attribute key referencing the type of association resolver used by a saga event handler.\n      */\n-    public HandlerAttributes(Map<String, Map<String, Object>> attributes) {\n-        this.attributes = attributes;\n-    }\n+    String SAGA_ASSOCIATION_RESOLVER = \"SagaEventHandler.associationResolver\";\n \n     /**\n-     * Put new {@code attributes} for the given {@code handlerType}.\n-     *\n-     * @param handlerType the type of handler to add {@code attributes} for\n-     * @param attributes  the {@link Map} of attribute information to add for the given {@code handlerType}\n+     * Attribute key referencing the {@link org.axonframework.lifecycle.Phase} to invoke a start handler in.\n      */\n-    public void put(String handlerType, Map<String, Object> attributes) {\n-        this.attributes.put(handlerType, attributes);\n-    }\n+    String START_PHASE = \"StartHandler.phase\";\n+    /**\n+     * Attribute key referencing the {@link org.axonframework.lifecycle.Phase} to invoke a shutdown handler in.\n+     */\n+    String SHUTDOWN_PHASE = \"ShutdownHandler.phase\";\n \n     /**\n-     * Retrieve the attributes for the given {@code handlerType}. Might be {@code null} if there are no attributes\n-     * present for the specified type.\n-     *\n-     * @param handlerType the type of handler to retrieve attributes for\n-     * @return the attributes for the given {@code handlerType}\n+     * Attribute key referencing an aggregate creation policy to be used when handling a command.\n      */\n-    public Map<String, Object> get(String handlerType) {\n-        return Collections.unmodifiableMap(attributes.get(handlerType));\n-    }\n+    String AGGREGATE_CREATION_POLICY = \"CreationPolicy.creationPolicy\";\n \n     /**\n-     * Retrieve all attributes for all handler types stored in this {@link HandlerAttributes} object. The returned\n-     * {@link Map} contains a {@link Map} of attribute name to attribute value, per handler type present.\n-     *\n-     * @return all attributes for all handler types stored in this {@link HandlerAttributes} object\n-     */\n-    public Map<String, Map<String, Object>> getAll() {\n-        return Collections.unmodifiableMap(\n-                attributes.entrySet().stream()\n-                          .collect(Collectors.toMap(\n-                                  Map.Entry::getKey,\n-                                  entry -> Collections.unmodifiableMap(entry.getValue())\n-                          ))\n-        );\n-    }\n+     * Attribute key referencing whether the handler is allowed to be invoked on replays.\n+     */\n+    String ALLOW_REPLAY = \"AllowReplay.allowReplay\";\n \n     /**\n-     * Retrieve all attributes for all handler types stored in this {@link HandlerAttributes} object in a prefixed\n-     * format. The returned {@link Map} contains keys representing a format of {@code \"[handlerType].[attributeName]\"}\n-     * with the respective attribute value corresponding to the attribute name.\n-     * <p>\n-     * Serves the purpose a of providing a {@code Map} containing a property file like structure.\n+     * Retrieve the attribute for the given {@code attributeKey}. Might be {@code null} if there is no attribute present\n+     * for the given key.\n      *\n-     * @return all attributes for all handler types stored in this {@link HandlerAttributes} object in a prefixed format\n-     */\n-    public Map<String, Object> getAllPrefixed() {\n-        Map<String, Object> allPrefixedAttributes = new HashMap<>();\n-        for (Map.Entry<String, Map<String, Object>> attributeEntry : attributes.entrySet()) {\n-            String handlerType = attributeEntry.getKey();\n-            Map<String, Object> prefixedAttributes =\n-                    attributeEntry.getValue().entrySet().stream()\n-                                  .collect(Collectors.toMap(\n-                                          entry -> prefixedKey(handlerType, entry.getKey()),\n-                                          Map.Entry::getValue\n-                                  ));\n-            allPrefixedAttributes.putAll(prefixedAttributes);\n-        }\n-        return Collections.unmodifiableMap(allPrefixedAttributes);\n-    }\n+     * @param attributeKey the attribute key to retrieve an attribute for\n+     * @param <R>          the type of attribute to retrieve\n+     * @return the attribute for the given {@code attributeKey}\n+     */\n+    <R> R get(String attributeKey);\n \n-    private String prefixedKey(String handlerType, String attributeName) {\n-        return handlerType + \".\" + attributeName;\n-    }\n+    /**\n+     * Retrieve all attributes stored in this {@link HandlerAttributes} object.\n+     *\n+     * @return all attributes stored in this {@link HandlerAttributes} object\n+     */\n+    Map<String, Object> getAll();\n \n     /**\n-     * Validates whether the given {@code handlerType} has attributes in this object.\n+     * Validates whether the given {@code attributeKey} is present in this object.\n      *\n-     * @param handlerType the type of handler to validate if it has attributes present in this object\n-     * @return {@code true} if there are attributes for the given {@code handlerType} present, {@code false} otherwise\n+     * @param attributeKey the attribute key to validate if it is present in this object\n+     * @return {@code true} if there is an attribute for the given {@code attributeKey} present, {@code false} otherwise\n      */\n-    public boolean containsAttributesFor(String handlerType) {\n-        return attributes.containsKey(handlerType);\n-    }\n+    boolean contains(String attributeKey);\n \n     /**\n      * Validate whether zero attributes are present in this object.\n      *\n      * @return {@code true} if there are no attributes present, {@code false} otherwise\n      */\n-    public boolean isEmpty() {\n-        return attributes.isEmpty();\n-    }\n-\n-    @Override\n-    public boolean equals(Object o) {\n-        if (this == o) {\n-            return true;\n-        }\n-        if (o == null || getClass() != o.getClass()) {\n-            return false;\n-        }\n-        HandlerAttributes that = (HandlerAttributes) o;\n-        return Objects.equals(attributes, that.attributes);\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return Objects.hash(attributes);\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return \"HandlerAttributes{\" +\n-                \"handlerAttributes=\" + attributes +\n-                '}';\n-    }\n+    boolean isEmpty();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODk4ODA3Mw==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1621#discussion_r578988073", "bodyText": "We should abstract this logic away into whatever component inspects the attributes. This still seems quite specific to the annotation approach.", "author": "abuijze", "createdAt": "2021-02-19T07:48:30Z", "path": "messaging/src/main/java/org/axonframework/messaging/annotation/HandlerAttributes.java", "diffHunk": "@@ -0,0 +1,144 @@\n+package org.axonframework.messaging.annotation;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Container for message handler attributes. Can store several {@link Map}s of {@link String} to {@link Object} under\n+ * their own key, resembling a message handling method which serves several handling functions.\n+ *\n+ * @author Steven van Beelen\n+ * @since 4.5\n+ */\n+public class HandlerAttributes {\n+\n+    private final Map<String, Map<String, Object>> attributes;\n+\n+    /**\n+     * Constructs an empty handler attributes object.\n+     */\n+    public HandlerAttributes() {\n+        this(new HashMap<>());\n+    }\n+\n+    /**\n+     * Construct a handler attributes object based on the given {@code handlerAttributes} {@link Map}.\n+     *\n+     * @param attributes a {@link Map} from handler type to attributes {@code Map} to base a {@link HandlerAttributes}\n+     *                   on\n+     */\n+    public HandlerAttributes(Map<String, Map<String, Object>> attributes) {\n+        this.attributes = attributes;\n+    }\n+\n+    /**\n+     * Put new {@code attributes} for the given {@code handlerType}.\n+     *\n+     * @param handlerType the type of handler to add {@code attributes} for\n+     * @param attributes  the {@link Map} of attribute information to add for the given {@code handlerType}\n+     */\n+    public void put(String handlerType, Map<String, Object> attributes) {\n+        this.attributes.put(handlerType, attributes);\n+    }\n+\n+    /**\n+     * Retrieve the attributes for the given {@code handlerType}. Might be {@code null} if there are no attributes\n+     * present for the specified type.\n+     *\n+     * @param handlerType the type of handler to retrieve attributes for\n+     * @return the attributes for the given {@code handlerType}\n+     */\n+    public Map<String, Object> get(String handlerType) {\n+        return Collections.unmodifiableMap(attributes.get(handlerType));\n+    }\n+\n+    /**\n+     * Retrieve all attributes for all handler types stored in this {@link HandlerAttributes} object. The returned\n+     * {@link Map} contains a {@link Map} of attribute name to attribute value, per handler type present.\n+     *\n+     * @return all attributes for all handler types stored in this {@link HandlerAttributes} object\n+     */\n+    public Map<String, Map<String, Object>> getAll() {\n+        return Collections.unmodifiableMap(\n+                attributes.entrySet().stream()\n+                          .collect(Collectors.toMap(\n+                                  Map.Entry::getKey,\n+                                  entry -> Collections.unmodifiableMap(entry.getValue())\n+                          ))\n+        );\n+    }\n+\n+    /**\n+     * Retrieve all attributes for all handler types stored in this {@link HandlerAttributes} object in a prefixed\n+     * format. The returned {@link Map} contains keys representing a format of {@code \"[handlerType].[attributeName]\"}\n+     * with the respective attribute value corresponding to the attribute name.\n+     * <p>\n+     * Serves the purpose a of providing a {@code Map} containing a property file like structure.\n+     *\n+     * @return all attributes for all handler types stored in this {@link HandlerAttributes} object in a prefixed format\n+     */\n+    public Map<String, Object> getAllPrefixed() {\n+        Map<String, Object> allPrefixedAttributes = new HashMap<>();\n+        for (Map.Entry<String, Map<String, Object>> attributeEntry : attributes.entrySet()) {\n+            String handlerType = attributeEntry.getKey();\n+            Map<String, Object> prefixedAttributes =\n+                    attributeEntry.getValue().entrySet().stream()\n+                                  .collect(Collectors.toMap(\n+                                          entry -> prefixedKey(handlerType, entry.getKey()),\n+                                          Map.Entry::getValue\n+                                  ));\n+            allPrefixedAttributes.putAll(prefixedAttributes);\n+        }\n+        return Collections.unmodifiableMap(allPrefixedAttributes);\n+    }\n+\n+    private String prefixedKey(String handlerType, String attributeName) {", "originalCommit": "e5f2c819f4dc884d185097c590c16feb52a937ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTQwNjk4NA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1621#discussion_r585406984", "bodyText": "I've taken your idea of constructing an AnnotatedHandlerAttributes class. It's this object which currently contains all this logic, so essentially it's abstracted away to be annotation specific right now.", "author": "smcvb", "createdAt": "2021-03-02T09:35:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODk4ODA3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "58e1cdea563adcf295c534b6473eebde52c7485f", "chunk": "diff --git a/messaging/src/main/java/org/axonframework/messaging/annotation/HandlerAttributes.java b/messaging/src/main/java/org/axonframework/messaging/annotation/HandlerAttributes.java\nindex c95581891..68fe46131 100644\n--- a/messaging/src/main/java/org/axonframework/messaging/annotation/HandlerAttributes.java\n+++ b/messaging/src/main/java/org/axonframework/messaging/annotation/HandlerAttributes.java\n\n@@ -1,144 +1,116 @@\n package org.axonframework.messaging.annotation;\n \n-import java.util.Collections;\n-import java.util.HashMap;\n import java.util.Map;\n-import java.util.Objects;\n-import java.util.stream.Collectors;\n \n /**\n- * Container for message handler attributes. Can store several {@link Map}s of {@link String} to {@link Object} under\n- * their own key, resembling a message handling method which serves several handling functions.\n+ * Container for message handler attributes. Typically used by {@link MessageHandlingMember} implementations. Stores\n+ * handler attributes in a {@link Map} of {@link String} to {@link Object}. Some default keys used by {@link\n+ * HandlerAttributes} implementations, like {@link #MESSAGE_TYPE} can be used to {@link #get(String)} entries.\n  *\n  * @author Steven van Beelen\n  * @since 4.5\n  */\n-public class HandlerAttributes {\n+public interface HandlerAttributes {\n \n-    private final Map<String, Map<String, Object>> attributes;\n+    /**\n+     * Attribute key referencing the {@link org.axonframework.messaging.Message} type being handled by the handler.\n+     */\n+    String MESSAGE_TYPE = \"MessageHandler.messageType\";\n+    /**\n+     * Attribute key referencing the payload type contained in the {@link org.axonframework.messaging.Message}.\n+     */\n+    String PAYLOAD_TYPE = \"MessageHandler.payloadType\";\n+    /**\n+     * Attribute key referencing the name of the {@link org.axonframework.commandhandling.CommandMessage} the handler\n+     * can handle.\n+     */\n+    String COMMAND_NAME = \"CommandHandler.commandName\";\n+    /**\n+     * Attribute key referencing the routing key used to route a {@link org.axonframework.commandhandling.CommandMessage}\n+     * to the handler.\n+     */\n+    String COMMAND_ROUTING_KEY = \"CommandHandler.routingKey\";\n+    /**\n+     * Attribute key referencing the name of the {@link org.axonframework.queryhandling.QueryMessage} the handler can\n+     * handle.\n+     */\n+    String QUERY_NAME = \"QueryHandler.queryName\";\n \n     /**\n-     * Constructs an empty handler attributes object.\n+     * Attribute key referencing the result type the handler can handle.\n+     */\n+    String RESULT_TYPE = \"ResultHandler.resultType\";\n+    /**\n+     * Attribute key referencing the exception result type the handler can handle.\n      */\n-    public HandlerAttributes() {\n-        this(new HashMap<>());\n-    }\n+    String EXCEPTION_RESULT_TYPE = \"ExceptionHandler.resultType\";\n \n     /**\n-     * Construct a handler attributes object based on the given {@code handlerAttributes} {@link Map}.\n-     *\n-     * @param attributes a {@link Map} from handler type to attributes {@code Map} to base a {@link HandlerAttributes}\n-     *                   on\n+     * Attribute key referencing whether the handler forces the creation of a new saga instance.\n+     */\n+    String FORCE_NEW_SAGA = \"StartSaga.forceNew\";\n+    /**\n+     * Attribute key referencing the property in the handled {@link org.axonframework.eventhandling.EventMessage} to\n+     * associate a saga instance with.\n+     */\n+    String SAGA_ASSOCIATION_PROPERTY = \"SagaEventHandler.associationProperty\";\n+    /**\n+     * Attribute key referencing the saga event handler's association property key name used.\n+     */\n+    String SAGA_ASSOCIATION_PROPERTY_KEY_NAME = \"SagaEventHandler.keyName\";\n+    /**\n+     * Attribute key referencing the type of association resolver used by a saga event handler.\n      */\n-    public HandlerAttributes(Map<String, Map<String, Object>> attributes) {\n-        this.attributes = attributes;\n-    }\n+    String SAGA_ASSOCIATION_RESOLVER = \"SagaEventHandler.associationResolver\";\n \n     /**\n-     * Put new {@code attributes} for the given {@code handlerType}.\n-     *\n-     * @param handlerType the type of handler to add {@code attributes} for\n-     * @param attributes  the {@link Map} of attribute information to add for the given {@code handlerType}\n+     * Attribute key referencing the {@link org.axonframework.lifecycle.Phase} to invoke a start handler in.\n      */\n-    public void put(String handlerType, Map<String, Object> attributes) {\n-        this.attributes.put(handlerType, attributes);\n-    }\n+    String START_PHASE = \"StartHandler.phase\";\n+    /**\n+     * Attribute key referencing the {@link org.axonframework.lifecycle.Phase} to invoke a shutdown handler in.\n+     */\n+    String SHUTDOWN_PHASE = \"ShutdownHandler.phase\";\n \n     /**\n-     * Retrieve the attributes for the given {@code handlerType}. Might be {@code null} if there are no attributes\n-     * present for the specified type.\n-     *\n-     * @param handlerType the type of handler to retrieve attributes for\n-     * @return the attributes for the given {@code handlerType}\n+     * Attribute key referencing an aggregate creation policy to be used when handling a command.\n      */\n-    public Map<String, Object> get(String handlerType) {\n-        return Collections.unmodifiableMap(attributes.get(handlerType));\n-    }\n+    String AGGREGATE_CREATION_POLICY = \"CreationPolicy.creationPolicy\";\n \n     /**\n-     * Retrieve all attributes for all handler types stored in this {@link HandlerAttributes} object. The returned\n-     * {@link Map} contains a {@link Map} of attribute name to attribute value, per handler type present.\n-     *\n-     * @return all attributes for all handler types stored in this {@link HandlerAttributes} object\n-     */\n-    public Map<String, Map<String, Object>> getAll() {\n-        return Collections.unmodifiableMap(\n-                attributes.entrySet().stream()\n-                          .collect(Collectors.toMap(\n-                                  Map.Entry::getKey,\n-                                  entry -> Collections.unmodifiableMap(entry.getValue())\n-                          ))\n-        );\n-    }\n+     * Attribute key referencing whether the handler is allowed to be invoked on replays.\n+     */\n+    String ALLOW_REPLAY = \"AllowReplay.allowReplay\";\n \n     /**\n-     * Retrieve all attributes for all handler types stored in this {@link HandlerAttributes} object in a prefixed\n-     * format. The returned {@link Map} contains keys representing a format of {@code \"[handlerType].[attributeName]\"}\n-     * with the respective attribute value corresponding to the attribute name.\n-     * <p>\n-     * Serves the purpose a of providing a {@code Map} containing a property file like structure.\n+     * Retrieve the attribute for the given {@code attributeKey}. Might be {@code null} if there is no attribute present\n+     * for the given key.\n      *\n-     * @return all attributes for all handler types stored in this {@link HandlerAttributes} object in a prefixed format\n-     */\n-    public Map<String, Object> getAllPrefixed() {\n-        Map<String, Object> allPrefixedAttributes = new HashMap<>();\n-        for (Map.Entry<String, Map<String, Object>> attributeEntry : attributes.entrySet()) {\n-            String handlerType = attributeEntry.getKey();\n-            Map<String, Object> prefixedAttributes =\n-                    attributeEntry.getValue().entrySet().stream()\n-                                  .collect(Collectors.toMap(\n-                                          entry -> prefixedKey(handlerType, entry.getKey()),\n-                                          Map.Entry::getValue\n-                                  ));\n-            allPrefixedAttributes.putAll(prefixedAttributes);\n-        }\n-        return Collections.unmodifiableMap(allPrefixedAttributes);\n-    }\n+     * @param attributeKey the attribute key to retrieve an attribute for\n+     * @param <R>          the type of attribute to retrieve\n+     * @return the attribute for the given {@code attributeKey}\n+     */\n+    <R> R get(String attributeKey);\n \n-    private String prefixedKey(String handlerType, String attributeName) {\n-        return handlerType + \".\" + attributeName;\n-    }\n+    /**\n+     * Retrieve all attributes stored in this {@link HandlerAttributes} object.\n+     *\n+     * @return all attributes stored in this {@link HandlerAttributes} object\n+     */\n+    Map<String, Object> getAll();\n \n     /**\n-     * Validates whether the given {@code handlerType} has attributes in this object.\n+     * Validates whether the given {@code attributeKey} is present in this object.\n      *\n-     * @param handlerType the type of handler to validate if it has attributes present in this object\n-     * @return {@code true} if there are attributes for the given {@code handlerType} present, {@code false} otherwise\n+     * @param attributeKey the attribute key to validate if it is present in this object\n+     * @return {@code true} if there is an attribute for the given {@code attributeKey} present, {@code false} otherwise\n      */\n-    public boolean containsAttributesFor(String handlerType) {\n-        return attributes.containsKey(handlerType);\n-    }\n+    boolean contains(String attributeKey);\n \n     /**\n      * Validate whether zero attributes are present in this object.\n      *\n      * @return {@code true} if there are no attributes present, {@code false} otherwise\n      */\n-    public boolean isEmpty() {\n-        return attributes.isEmpty();\n-    }\n-\n-    @Override\n-    public boolean equals(Object o) {\n-        if (this == o) {\n-            return true;\n-        }\n-        if (o == null || getClass() != o.getClass()) {\n-            return false;\n-        }\n-        HandlerAttributes that = (HandlerAttributes) o;\n-        return Objects.equals(attributes, that.attributes);\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return Objects.hash(attributes);\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return \"HandlerAttributes{\" +\n-                \"handlerAttributes=\" + attributes +\n-                '}';\n-    }\n+    boolean isEmpty();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODk4OTUyMw==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1621#discussion_r578989523", "bodyText": "We should be clear about whether this method does a simple \"string prefix\" approach, or whether the prefix approach is \"dot-aware\".\nFor example, given a key \"SomeAttribute.value\", will the prefix \"Some\" match, or not?\nAlso, I wonder what the value of this method is. HandlerWrappers will generally know what keys they need to interact with. If not, they can get all the attributes and simply iterate over those, ignoring whatever they don't care about. Right?", "author": "abuijze", "createdAt": "2021-02-19T07:51:43Z", "path": "messaging/src/main/java/org/axonframework/messaging/annotation/HandlerAttributes.java", "diffHunk": "@@ -0,0 +1,144 @@\n+package org.axonframework.messaging.annotation;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Container for message handler attributes. Can store several {@link Map}s of {@link String} to {@link Object} under\n+ * their own key, resembling a message handling method which serves several handling functions.\n+ *\n+ * @author Steven van Beelen\n+ * @since 4.5\n+ */\n+public class HandlerAttributes {\n+\n+    private final Map<String, Map<String, Object>> attributes;\n+\n+    /**\n+     * Constructs an empty handler attributes object.\n+     */\n+    public HandlerAttributes() {\n+        this(new HashMap<>());\n+    }\n+\n+    /**\n+     * Construct a handler attributes object based on the given {@code handlerAttributes} {@link Map}.\n+     *\n+     * @param attributes a {@link Map} from handler type to attributes {@code Map} to base a {@link HandlerAttributes}\n+     *                   on\n+     */\n+    public HandlerAttributes(Map<String, Map<String, Object>> attributes) {\n+        this.attributes = attributes;\n+    }\n+\n+    /**\n+     * Put new {@code attributes} for the given {@code handlerType}.\n+     *\n+     * @param handlerType the type of handler to add {@code attributes} for\n+     * @param attributes  the {@link Map} of attribute information to add for the given {@code handlerType}\n+     */\n+    public void put(String handlerType, Map<String, Object> attributes) {\n+        this.attributes.put(handlerType, attributes);\n+    }\n+\n+    /**\n+     * Retrieve the attributes for the given {@code handlerType}. Might be {@code null} if there are no attributes\n+     * present for the specified type.\n+     *\n+     * @param handlerType the type of handler to retrieve attributes for\n+     * @return the attributes for the given {@code handlerType}\n+     */\n+    public Map<String, Object> get(String handlerType) {\n+        return Collections.unmodifiableMap(attributes.get(handlerType));\n+    }\n+\n+    /**\n+     * Retrieve all attributes for all handler types stored in this {@link HandlerAttributes} object. The returned\n+     * {@link Map} contains a {@link Map} of attribute name to attribute value, per handler type present.\n+     *\n+     * @return all attributes for all handler types stored in this {@link HandlerAttributes} object\n+     */\n+    public Map<String, Map<String, Object>> getAll() {\n+        return Collections.unmodifiableMap(\n+                attributes.entrySet().stream()\n+                          .collect(Collectors.toMap(\n+                                  Map.Entry::getKey,\n+                                  entry -> Collections.unmodifiableMap(entry.getValue())\n+                          ))\n+        );\n+    }\n+\n+    /**\n+     * Retrieve all attributes for all handler types stored in this {@link HandlerAttributes} object in a prefixed", "originalCommit": "e5f2c819f4dc884d185097c590c16feb52a937ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTYxMzk3NA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1621#discussion_r585613974", "bodyText": "Yep, done in the JavaDoc of the (new) AnnotatedHandlerAttributes.", "author": "smcvb", "createdAt": "2021-03-02T14:32:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODk4OTUyMw=="}], "type": "inlineReview", "revised_code": {"commit": "58e1cdea563adcf295c534b6473eebde52c7485f", "chunk": "diff --git a/messaging/src/main/java/org/axonframework/messaging/annotation/HandlerAttributes.java b/messaging/src/main/java/org/axonframework/messaging/annotation/HandlerAttributes.java\nindex c95581891..68fe46131 100644\n--- a/messaging/src/main/java/org/axonframework/messaging/annotation/HandlerAttributes.java\n+++ b/messaging/src/main/java/org/axonframework/messaging/annotation/HandlerAttributes.java\n\n@@ -1,144 +1,116 @@\n package org.axonframework.messaging.annotation;\n \n-import java.util.Collections;\n-import java.util.HashMap;\n import java.util.Map;\n-import java.util.Objects;\n-import java.util.stream.Collectors;\n \n /**\n- * Container for message handler attributes. Can store several {@link Map}s of {@link String} to {@link Object} under\n- * their own key, resembling a message handling method which serves several handling functions.\n+ * Container for message handler attributes. Typically used by {@link MessageHandlingMember} implementations. Stores\n+ * handler attributes in a {@link Map} of {@link String} to {@link Object}. Some default keys used by {@link\n+ * HandlerAttributes} implementations, like {@link #MESSAGE_TYPE} can be used to {@link #get(String)} entries.\n  *\n  * @author Steven van Beelen\n  * @since 4.5\n  */\n-public class HandlerAttributes {\n+public interface HandlerAttributes {\n \n-    private final Map<String, Map<String, Object>> attributes;\n+    /**\n+     * Attribute key referencing the {@link org.axonframework.messaging.Message} type being handled by the handler.\n+     */\n+    String MESSAGE_TYPE = \"MessageHandler.messageType\";\n+    /**\n+     * Attribute key referencing the payload type contained in the {@link org.axonframework.messaging.Message}.\n+     */\n+    String PAYLOAD_TYPE = \"MessageHandler.payloadType\";\n+    /**\n+     * Attribute key referencing the name of the {@link org.axonframework.commandhandling.CommandMessage} the handler\n+     * can handle.\n+     */\n+    String COMMAND_NAME = \"CommandHandler.commandName\";\n+    /**\n+     * Attribute key referencing the routing key used to route a {@link org.axonframework.commandhandling.CommandMessage}\n+     * to the handler.\n+     */\n+    String COMMAND_ROUTING_KEY = \"CommandHandler.routingKey\";\n+    /**\n+     * Attribute key referencing the name of the {@link org.axonframework.queryhandling.QueryMessage} the handler can\n+     * handle.\n+     */\n+    String QUERY_NAME = \"QueryHandler.queryName\";\n \n     /**\n-     * Constructs an empty handler attributes object.\n+     * Attribute key referencing the result type the handler can handle.\n+     */\n+    String RESULT_TYPE = \"ResultHandler.resultType\";\n+    /**\n+     * Attribute key referencing the exception result type the handler can handle.\n      */\n-    public HandlerAttributes() {\n-        this(new HashMap<>());\n-    }\n+    String EXCEPTION_RESULT_TYPE = \"ExceptionHandler.resultType\";\n \n     /**\n-     * Construct a handler attributes object based on the given {@code handlerAttributes} {@link Map}.\n-     *\n-     * @param attributes a {@link Map} from handler type to attributes {@code Map} to base a {@link HandlerAttributes}\n-     *                   on\n+     * Attribute key referencing whether the handler forces the creation of a new saga instance.\n+     */\n+    String FORCE_NEW_SAGA = \"StartSaga.forceNew\";\n+    /**\n+     * Attribute key referencing the property in the handled {@link org.axonframework.eventhandling.EventMessage} to\n+     * associate a saga instance with.\n+     */\n+    String SAGA_ASSOCIATION_PROPERTY = \"SagaEventHandler.associationProperty\";\n+    /**\n+     * Attribute key referencing the saga event handler's association property key name used.\n+     */\n+    String SAGA_ASSOCIATION_PROPERTY_KEY_NAME = \"SagaEventHandler.keyName\";\n+    /**\n+     * Attribute key referencing the type of association resolver used by a saga event handler.\n      */\n-    public HandlerAttributes(Map<String, Map<String, Object>> attributes) {\n-        this.attributes = attributes;\n-    }\n+    String SAGA_ASSOCIATION_RESOLVER = \"SagaEventHandler.associationResolver\";\n \n     /**\n-     * Put new {@code attributes} for the given {@code handlerType}.\n-     *\n-     * @param handlerType the type of handler to add {@code attributes} for\n-     * @param attributes  the {@link Map} of attribute information to add for the given {@code handlerType}\n+     * Attribute key referencing the {@link org.axonframework.lifecycle.Phase} to invoke a start handler in.\n      */\n-    public void put(String handlerType, Map<String, Object> attributes) {\n-        this.attributes.put(handlerType, attributes);\n-    }\n+    String START_PHASE = \"StartHandler.phase\";\n+    /**\n+     * Attribute key referencing the {@link org.axonframework.lifecycle.Phase} to invoke a shutdown handler in.\n+     */\n+    String SHUTDOWN_PHASE = \"ShutdownHandler.phase\";\n \n     /**\n-     * Retrieve the attributes for the given {@code handlerType}. Might be {@code null} if there are no attributes\n-     * present for the specified type.\n-     *\n-     * @param handlerType the type of handler to retrieve attributes for\n-     * @return the attributes for the given {@code handlerType}\n+     * Attribute key referencing an aggregate creation policy to be used when handling a command.\n      */\n-    public Map<String, Object> get(String handlerType) {\n-        return Collections.unmodifiableMap(attributes.get(handlerType));\n-    }\n+    String AGGREGATE_CREATION_POLICY = \"CreationPolicy.creationPolicy\";\n \n     /**\n-     * Retrieve all attributes for all handler types stored in this {@link HandlerAttributes} object. The returned\n-     * {@link Map} contains a {@link Map} of attribute name to attribute value, per handler type present.\n-     *\n-     * @return all attributes for all handler types stored in this {@link HandlerAttributes} object\n-     */\n-    public Map<String, Map<String, Object>> getAll() {\n-        return Collections.unmodifiableMap(\n-                attributes.entrySet().stream()\n-                          .collect(Collectors.toMap(\n-                                  Map.Entry::getKey,\n-                                  entry -> Collections.unmodifiableMap(entry.getValue())\n-                          ))\n-        );\n-    }\n+     * Attribute key referencing whether the handler is allowed to be invoked on replays.\n+     */\n+    String ALLOW_REPLAY = \"AllowReplay.allowReplay\";\n \n     /**\n-     * Retrieve all attributes for all handler types stored in this {@link HandlerAttributes} object in a prefixed\n-     * format. The returned {@link Map} contains keys representing a format of {@code \"[handlerType].[attributeName]\"}\n-     * with the respective attribute value corresponding to the attribute name.\n-     * <p>\n-     * Serves the purpose a of providing a {@code Map} containing a property file like structure.\n+     * Retrieve the attribute for the given {@code attributeKey}. Might be {@code null} if there is no attribute present\n+     * for the given key.\n      *\n-     * @return all attributes for all handler types stored in this {@link HandlerAttributes} object in a prefixed format\n-     */\n-    public Map<String, Object> getAllPrefixed() {\n-        Map<String, Object> allPrefixedAttributes = new HashMap<>();\n-        for (Map.Entry<String, Map<String, Object>> attributeEntry : attributes.entrySet()) {\n-            String handlerType = attributeEntry.getKey();\n-            Map<String, Object> prefixedAttributes =\n-                    attributeEntry.getValue().entrySet().stream()\n-                                  .collect(Collectors.toMap(\n-                                          entry -> prefixedKey(handlerType, entry.getKey()),\n-                                          Map.Entry::getValue\n-                                  ));\n-            allPrefixedAttributes.putAll(prefixedAttributes);\n-        }\n-        return Collections.unmodifiableMap(allPrefixedAttributes);\n-    }\n+     * @param attributeKey the attribute key to retrieve an attribute for\n+     * @param <R>          the type of attribute to retrieve\n+     * @return the attribute for the given {@code attributeKey}\n+     */\n+    <R> R get(String attributeKey);\n \n-    private String prefixedKey(String handlerType, String attributeName) {\n-        return handlerType + \".\" + attributeName;\n-    }\n+    /**\n+     * Retrieve all attributes stored in this {@link HandlerAttributes} object.\n+     *\n+     * @return all attributes stored in this {@link HandlerAttributes} object\n+     */\n+    Map<String, Object> getAll();\n \n     /**\n-     * Validates whether the given {@code handlerType} has attributes in this object.\n+     * Validates whether the given {@code attributeKey} is present in this object.\n      *\n-     * @param handlerType the type of handler to validate if it has attributes present in this object\n-     * @return {@code true} if there are attributes for the given {@code handlerType} present, {@code false} otherwise\n+     * @param attributeKey the attribute key to validate if it is present in this object\n+     * @return {@code true} if there is an attribute for the given {@code attributeKey} present, {@code false} otherwise\n      */\n-    public boolean containsAttributesFor(String handlerType) {\n-        return attributes.containsKey(handlerType);\n-    }\n+    boolean contains(String attributeKey);\n \n     /**\n      * Validate whether zero attributes are present in this object.\n      *\n      * @return {@code true} if there are no attributes present, {@code false} otherwise\n      */\n-    public boolean isEmpty() {\n-        return attributes.isEmpty();\n-    }\n-\n-    @Override\n-    public boolean equals(Object o) {\n-        if (this == o) {\n-            return true;\n-        }\n-        if (o == null || getClass() != o.getClass()) {\n-            return false;\n-        }\n-        HandlerAttributes that = (HandlerAttributes) o;\n-        return Objects.equals(attributes, that.attributes);\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return Objects.hash(attributes);\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return \"HandlerAttributes{\" +\n-                \"handlerAttributes=\" + attributes +\n-                '}';\n-    }\n+    boolean isEmpty();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODk5MDE3NA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1621#discussion_r578990174", "bodyText": "Not sure about this method. Isn't this a question of checking whether expected attributes are present?", "author": "abuijze", "createdAt": "2021-02-19T07:53:05Z", "path": "messaging/src/main/java/org/axonframework/messaging/annotation/MessageHandlingMember.java", "diffHunk": "@@ -140,9 +140,26 @@ default String signature() {\n      *\n      * @param annotationType Annotation to check for on the target method\n      * @return {@code true} if the annotation is present on the target method, {@code false} otherwise\n+     * @deprecated in favor of {@link #isA(String)}\n      */\n+    @Deprecated\n     boolean hasAnnotation(Class<? extends Annotation> annotationType);\n \n+    /**\n+     * Validates whether this {@link MessageHandlingMember} is an implementation of the given {@code handlerType}.\n+     * <p>\n+     * Note that a given message handling member can be several handler types at once. For example an Event Handler is\n+     * also a Message Handler of type Event Message.\n+     *\n+     * @param handlerType the {@link MessageHandlingMember} type to validate whether this handler is an implementation\n+     *                    of\n+     * @return {@code true} if this {@link MessageHandlingMember} is an implementation of the given {@code handlerType},\n+     * {@code false} otherwise\n+     */\n+    default boolean isA(String handlerType) {", "originalCommit": "e5f2c819f4dc884d185097c590c16feb52a937ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTQwNjI3OA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1621#discussion_r585406278", "bodyText": "That is indeed what it comes down to in the implementation. This is why the HandlerAttributes store everything as a Map<String, Map<String, Object>>.\nIt is the first key in the map which contains \"the type of handler\" since that is the annotation class name.\nIf we would combine the key of the handler and the attribute immediately, I assumed the operation would be less efficient, since we need to move through all the entries ourselves and perform a String#contains.", "author": "smcvb", "createdAt": "2021-03-02T09:34:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODk5MDE3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTYxNDU3NQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1621#discussion_r585614575", "bodyText": "As stated on another comment, decided against the isA() and attributes() methods, in favour of just keeping the attribute() method.,", "author": "smcvb", "createdAt": "2021-03-02T14:33:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODk5MDE3NA=="}], "type": "inlineReview", "revised_code": {"commit": "58e1cdea563adcf295c534b6473eebde52c7485f", "chunk": "diff --git a/messaging/src/main/java/org/axonframework/messaging/annotation/MessageHandlingMember.java b/messaging/src/main/java/org/axonframework/messaging/annotation/MessageHandlingMember.java\nindex f93e62d06..d22d08bb8 100644\n--- a/messaging/src/main/java/org/axonframework/messaging/annotation/MessageHandlingMember.java\n+++ b/messaging/src/main/java/org/axonframework/messaging/annotation/MessageHandlingMember.java\n\n@@ -140,26 +140,11 @@ default String signature() {\n      *\n      * @param annotationType Annotation to check for on the target method\n      * @return {@code true} if the annotation is present on the target method, {@code false} otherwise\n-     * @deprecated in favor of {@link #isA(String)}\n+     * @deprecated in favor of {@link #attribute(String)}\n      */\n     @Deprecated\n     boolean hasAnnotation(Class<? extends Annotation> annotationType);\n \n-    /**\n-     * Validates whether this {@link MessageHandlingMember} is an implementation of the given {@code handlerType}.\n-     * <p>\n-     * Note that a given message handling member can be several handler types at once. For example an Event Handler is\n-     * also a Message Handler of type Event Message.\n-     *\n-     * @param handlerType the {@link MessageHandlingMember} type to validate whether this handler is an implementation\n-     *                    of\n-     * @return {@code true} if this {@link MessageHandlingMember} is an implementation of the given {@code handlerType},\n-     * {@code false} otherwise\n-     */\n-    default boolean isA(String handlerType) {\n-        return false;\n-    }\n-\n     /**\n      * Get the attributes of an annotation of given {@code annotationType} on the method of the target entity. If the\n      * annotation is present on the target method an Optional is returned containing the properties mapped by their\n"}}, {"oid": "5e1ea6725ed82196caf1a1f364ae06963d2177aa", "url": "https://github.com/AxonFramework/AxonFramework/commit/5e1ea6725ed82196caf1a1f364ae06963d2177aa", "message": "Merge remote-tracking branch 'origin/master' into feature/annotation-api-deprecation", "committedDate": "2021-03-02T08:57:08Z", "type": "commit"}, {"oid": "58e1cdea563adcf295c534b6473eebde52c7485f", "url": "https://github.com/AxonFramework/AxonFramework/commit/58e1cdea563adcf295c534b6473eebde52c7485f", "message": "Adjust attributes storage solution\n\nInstead of having a single HandlerAttributes object, change it into an\ninterface with two implementations: an annotation based version and a\ndefault Map version. The former should be used by the\nAnnotatedMessageHandlingMember, whereas the latter serves the purpose of\n opening up custom MessageHandlingMember which decide to not use\n annotations at all. Additionally, remove the attributes() and isA()\n methods from the MessageHandlingMember, as they do not add any value.\n\n#1621", "committedDate": "2021-03-02T14:30:49Z", "type": "commit"}, {"oid": "1363ad57f0c1e466ca0f2fa6ebc4102cba9ae44d", "url": "https://github.com/AxonFramework/AxonFramework/commit/1363ad57f0c1e466ca0f2fa6ebc4102cba9ae44d", "message": "Move HandlerAttributes and construct AbstractHandlerAttributes\n\nThe HandlerAttributes are not annotation specific, so should not reside\nin the annotation package. Furthermore, we can benefit from an\nAbstractHandlerAttributes, to deduplicate code in the Annotated- and\nGenericHandlerAttributes class'\n\n#1621", "committedDate": "2021-03-02T15:57:18Z", "type": "commit"}, {"oid": "7a0a00b8369b4b2f92482817e1759a74a660a97a", "url": "https://github.com/AxonFramework/AxonFramework/commit/7a0a00b8369b4b2f92482817e1759a74a660a97a", "message": "Fix sonar issue\n\nAdjust inspection order of fields to comply with sonar rules.\n\n#1621", "committedDate": "2021-03-02T15:59:48Z", "type": "commit"}, {"oid": "de9238d8af0a6570b28872568be110c4d35c5d0a", "url": "https://github.com/AxonFramework/AxonFramework/commit/de9238d8af0a6570b28872568be110c4d35c5d0a", "message": "Add tests for additional coverage\n\nAdd tests for additional coverage\n\n#1621", "committedDate": "2021-03-02T16:36:26Z", "type": "commit"}, {"oid": "7c1cc5f433a8a0ef466128199a901feec45c8c61", "url": "https://github.com/AxonFramework/AxonFramework/commit/7c1cc5f433a8a0ef466128199a901feec45c8c61", "message": "Merge remote-tracking branch 'origin/master' into feature/annotation-api-deprecation", "committedDate": "2021-03-09T09:26:27Z", "type": "commit"}, {"oid": "fe2ab329ae3cc654b4ada05636fef32b975ad49c", "url": "https://github.com/AxonFramework/AxonFramework/commit/fe2ab329ae3cc654b4ada05636fef32b975ad49c", "message": "Process review comments\n\n- Remove AbstractHandlerAttributes\n- Rename Generic- to SimpleHandlerAttributes\n- Let AnnotatedHandlerAttributes hold a reference to a\nSimpleHandlerAttributes\n- Delegate AnnotatedHandlerAttributes operations to the\nSimpleHandlerAttributes\n- Adjust mergeWith operation to take in a HandlerAttributes\n- Add mergeWith to HandlerAttributes interface\n- Fine tune javadoc\n\n#1621", "committedDate": "2021-03-11T10:26:24Z", "type": "commit"}, {"oid": "279e7522a0ad619d0653f227bebb95e3183dce77", "url": "https://github.com/AxonFramework/AxonFramework/commit/279e7522a0ad619d0653f227bebb95e3183dce77", "message": "Add tests for higher coverage\n\nAdd tests for higher coverage\n\n#1621", "committedDate": "2021-03-11T11:09:43Z", "type": "commit"}, {"oid": "dbab02c6d8346e2fe12a2cfe0fb362ed49f37333", "url": "https://github.com/AxonFramework/AxonFramework/commit/dbab02c6d8346e2fe12a2cfe0fb362ed49f37333", "message": "Process review comments\n\n- Rename mergeWith to mergedWith, as it returns a new object instead of\nadjusting the existing object\n- Drop default constructor for the SimpleHandlerAttributes, as it\ndoesn't add any direct value\n- Add comment specifying attributes map changes are not reflected by a\nconstructed SimpleHandlerAttributes\n\n#1621", "committedDate": "2021-03-15T08:51:07Z", "type": "commit"}, {"oid": "93acee139fdc4b8ca90bd02a7aee5298df0590a8", "url": "https://github.com/AxonFramework/AxonFramework/commit/93acee139fdc4b8ca90bd02a7aee5298df0590a8", "message": "Merge remote-tracking branch 'origin/master' into feature/annotation-api-deprecation", "committedDate": "2021-03-15T08:51:35Z", "type": "commit"}]}