{"pr_number": 1652, "pr_title": "Fixed latency monitor to measure actual latency of event processing", "pr_createdAt": "2020-12-21T21:41:39Z", "pr_url": "https://github.com/AxonFramework/AxonFramework/pull/1652", "timeline": [{"oid": "dd292413dcf74fc14cf75a7b0e97ae4233453ba5", "url": "https://github.com/AxonFramework/AxonFramework/commit/dd292413dcf74fc14cf75a7b0e97ae4233453ba5", "message": "Fixed latency monitor to measure actual latency of event processing\n\nIt should measure the difference between the current wall clock time and the timestamp of the event being processed.", "committedDate": "2020-12-21T21:37:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE0ODU4NQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1652#discussion_r547148585", "bodyText": "Did you intent this constructor to be protected?", "author": "smcvb", "createdAt": "2020-12-22T08:53:10Z", "path": "metrics-micrometer/src/main/java/org/axonframework/micrometer/EventProcessorLatencyMonitor.java", "diffHunk": "@@ -41,21 +45,32 @@\n     private final String meterNamePrefix;\n     private final MeterRegistry meterRegistry;\n     private final Function<Message<?>, Iterable<Tag>> tagsBuilder;\n-    private final AtomicLong lastReceivedTime = new AtomicLong(-1);\n-    private final AtomicLong lastProcessedTime = new AtomicLong(-1);\n+    private final Clock clock;\n+    private final ConcurrentMap<Tags, AtomicLong> gauges = new ConcurrentHashMap<>();\n \n     private EventProcessorLatencyMonitor(String meterNamePrefix, MeterRegistry meterRegistry) {\n         this(meterNamePrefix,\n              meterRegistry,\n-             message -> Tags.empty());\n+             message -> Tags.empty(),\n+             Clock.SYSTEM);\n     }\n \n-    private EventProcessorLatencyMonitor(String meterNamePrefix,\n-                                         MeterRegistry meterRegistry,\n-                                         Function<Message<?>, Iterable<Tag>> tagsBuilder) {\n+    /**\n+     * Initialize the monitor with given properties.\n+     *\n+     * @param meterNamePrefix The prefix to use on this meter. It will be suffixed with \".latency\".\n+     * @param meterRegistry   The registry to register this meter with\n+     * @param tagsBuilder     The function that provides the Tags to measure latency under for each message\n+     * @param clock           The clock to use to measure time\n+     */\n+    protected EventProcessorLatencyMonitor(String meterNamePrefix,", "originalCommit": "dd292413dcf74fc14cf75a7b0e97ae4233453ba5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "625d355abe2ac2a977019c0ad1ab516b0664c9e3", "chunk": "diff --git a/metrics-micrometer/src/main/java/org/axonframework/micrometer/EventProcessorLatencyMonitor.java b/metrics-micrometer/src/main/java/org/axonframework/micrometer/EventProcessorLatencyMonitor.java\nindex 16f071c52..11de388b4 100644\n--- a/metrics-micrometer/src/main/java/org/axonframework/micrometer/EventProcessorLatencyMonitor.java\n+++ b/metrics-micrometer/src/main/java/org/axonframework/micrometer/EventProcessorLatencyMonitor.java\n\n@@ -41,61 +44,75 @@\n  */\n public class EventProcessorLatencyMonitor implements MessageMonitor<EventMessage<?>> {\n \n-\n     private final String meterNamePrefix;\n     private final MeterRegistry meterRegistry;\n     private final Function<Message<?>, Iterable<Tag>> tagsBuilder;\n     private final Clock clock;\n+\n     private final ConcurrentMap<Tags, AtomicLong> gauges = new ConcurrentHashMap<>();\n \n-    private EventProcessorLatencyMonitor(String meterNamePrefix, MeterRegistry meterRegistry) {\n-        this(meterNamePrefix,\n-             meterRegistry,\n-             message -> Tags.empty(),\n-             Clock.SYSTEM);\n+    /**\n+     * Instantiate a Builder to be able to create a {@link EventProcessorLatencyMonitor}.\n+     * <p>\n+     * The {@code tagsBuilder} is defaulted to a {@link Function} returning {@link Tags#empty()} and the {@link Clock}\n+     * to a a {@link Clock#SYSTEM}. The {@code meterNamePrefix} and {@link MeterRegistry} are <b>hard requirements</b>\n+     * and as such should be provided.\n+     *\n+     * @return a Builder to be able to create a {@link EventProcessorLatencyMonitor}\n+     */\n+    public static Builder builder() {\n+        return new Builder();\n     }\n \n     /**\n-     * Initialize the monitor with given properties.\n+     * Instantiate a {@link EventProcessorLatencyMonitor} based on the fields contained in the {@link Builder}.\n+     * <p>\n+     * Will assert that the {@code meterNamePrefix} and {@link MeterRegistry} are not {@code null} and will throw an\n+     * {@link org.axonframework.common.AxonConfigurationException} if this is the case.\n      *\n-     * @param meterNamePrefix The prefix to use on this meter. It will be suffixed with \".latency\".\n-     * @param meterRegistry   The registry to register this meter with\n-     * @param tagsBuilder     The function that provides the Tags to measure latency under for each message\n-     * @param clock           The clock to use to measure time\n+     * @param builder the {@link Builder} used to instantiate a {@link EventProcessorLatencyMonitor} instance\n      */\n-    protected EventProcessorLatencyMonitor(String meterNamePrefix,\n-                                           MeterRegistry meterRegistry,\n-                                           Function<Message<?>, Iterable<Tag>> tagsBuilder,\n-                                           Clock clock) {\n-        this.meterNamePrefix = meterNamePrefix;\n-        this.meterRegistry = meterRegistry;\n-        this.tagsBuilder = tagsBuilder;\n-        this.clock = clock;\n+    protected EventProcessorLatencyMonitor(Builder builder) {\n+        builder.validate();\n+        this.meterNamePrefix = builder.meterNamePrefix;\n+        this.meterRegistry = builder.meterRegistry;\n+        this.tagsBuilder = builder.tagsBuilder;\n+        this.clock = builder.clock;\n     }\n \n     /**\n-     * Creates an event processor latency monitor\n+     * Build an {@link EventProcessorLatencyMonitor}\n      *\n-     * @param meterNamePrefix The prefix for the meter name that will be created in the given meterRegistry\n-     * @param meterRegistry   The meter registry used to create and register the meters\n-     * @return The created event processor latency monitor\n+     * @param meterNamePrefix the prefix for the meter name that will be created in the given {@code meterRegistry}\n+     * @param meterRegistry   the meter registry used to create and register the meters\n+     * @return the created {@link EventProcessorLatencyMonitor}\n+     * @deprecated in favor of using the {@link #builder()}\n      */\n+    @Deprecated\n     public static EventProcessorLatencyMonitor buildMonitor(String meterNamePrefix, MeterRegistry meterRegistry) {\n-        return new EventProcessorLatencyMonitor(meterNamePrefix, meterRegistry);\n+        return builder().meterNamePrefix(meterNamePrefix)\n+                        .meterRegistry(meterRegistry)\n+                        .build();\n     }\n \n     /**\n-     * Creates an event processor latency monitor.\n+     * Build an {@link EventProcessorLatencyMonitor}.\n      *\n-     * @param meterNamePrefix The prefix for the meter name that will be created in the given meterRegistry\n-     * @param meterRegistry   The meter registry used to create and register the meters\n-     * @param tagsBuilder     The function used to construct the list of micrometer {@link Tag}, based on the ingested\n+     * @param meterNamePrefix the prefix for the meter name that will be created in the given {@code meterRegistry}\n+     * @param meterRegistry   the meter registry used to create and register the meters\n+     * @param tagsBuilder     the function used to construct the list of micrometer {@link Tag}, based on the ingested\n      *                        message\n-     * @return The created event processor latency monitor\n+     * @return the created {@link EventProcessorLatencyMonitor}\n+     * @deprecated in favor of using the {@link #builder()}\n      */\n-    public static EventProcessorLatencyMonitor buildMonitor(String meterNamePrefix, MeterRegistry meterRegistry,\n+    @Deprecated\n+    public static EventProcessorLatencyMonitor buildMonitor(String meterNamePrefix,\n+                                                            MeterRegistry meterRegistry,\n                                                             Function<Message<?>, Iterable<Tag>> tagsBuilder) {\n-        return new EventProcessorLatencyMonitor(meterNamePrefix, meterRegistry, tagsBuilder, Clock.SYSTEM);\n+        return builder().meterNamePrefix(meterNamePrefix)\n+                        .meterRegistry(meterRegistry)\n+                        .tagsBuilder(tagsBuilder)\n+                        .build();\n     }\n \n     @SuppressWarnings(\"PackageAccessibility\")\n"}}, {"oid": "625d355abe2ac2a977019c0ad1ab516b0664c9e3", "url": "https://github.com/AxonFramework/AxonFramework/commit/625d355abe2ac2a977019c0ad1ab516b0664c9e3", "message": "Fine tuning\n\n- Use the Builder paradigm for the micrometer\nEventProcessorLatencyMonitor\n- Deprecate static build methods in favor of builder class\n- Remove usages of static build methods in favor of builder\n- Add javadoc wherever it's missing\n- Adjust warning suppressions\n- Adjust indentation according to style guide\n\n#1652", "committedDate": "2021-01-14T13:57:33Z", "type": "commit"}, {"oid": "64880ccb376f8c2126d9d25f5c8bdd018ba09d2c", "url": "https://github.com/AxonFramework/AxonFramework/commit/64880ccb376f8c2126d9d25f5c8bdd018ba09d2c", "message": "Merge branch 'axon-4.4.x' into fix-latency-monitor", "committedDate": "2021-01-14T14:00:06Z", "type": "commit"}]}