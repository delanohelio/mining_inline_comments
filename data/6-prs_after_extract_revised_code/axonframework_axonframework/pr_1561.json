{"pr_number": 1561, "pr_title": "[#1560] Feature/intermediate representation data format", "pr_createdAt": "2020-10-20T16:13:34Z", "pr_url": "https://github.com/AxonFramework/AxonFramework/pull/1561", "timeline": [{"oid": "88fac47add3b6cea7a099efd7520d6ba2377cbf2", "url": "https://github.com/AxonFramework/AxonFramework/commit/88fac47add3b6cea7a099efd7520d6ba2377cbf2", "message": "Merge pull request #1 from AxonFramework/master\n\nMerge current master", "committedDate": "2020-10-20T11:40:11Z", "type": "commit"}, {"oid": "f222bf0280c134c9cbd76f3bd2afbec80180fc49", "url": "https://github.com/AxonFramework/AxonFramework/commit/f222bf0280c134c9cbd76f3bd2afbec80180fc49", "message": "feature: implement intermediate representation extension to access serializer and detect converter capabilities, fix #1560", "committedDate": "2020-10-20T16:10:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEwNjE5MA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1561#discussion_r509106190", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Checks if the data can be converted to required type.\n          \n          \n            \n                 *\n          \n          \n            \n                 * @param requiredType the type to convert to\n          \n          \n            \n                 * @return true, if the intermediate representation can be converted to desired type.\n          \n          \n            \n                 * Checks if the data can be converted to the given {@code requiredType}.\n          \n          \n            \n                 *\n          \n          \n            \n                 * @param requiredType the type to validate if the contained data can be converted to\n          \n          \n            \n                 * @return true, if the intermediate representation's data can be converted to desired type, false otherwise", "author": "smcvb", "createdAt": "2020-10-21T08:54:56Z", "path": "messaging/src/main/java/org/axonframework/serialization/upcasting/event/IntermediateEventRepresentation.java", "diffHunk": "@@ -139,4 +140,18 @@\n      * @return the MetaData of the message wrapping the object to upcast, if available\n      */\n     LazyDeserializingObject<MetaData> getMetaData();\n+\n+    /**\n+     * Checks if the data can be converted to required type.\n+     *\n+     * @param requiredType the type to convert to\n+     * @return true, if the intermediate representation can be converted to desired type.", "originalCommit": "f222bf0280c134c9cbd76f3bd2afbec80180fc49", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "69ced8e7b409a7f606854b2f8065e1c728745b78", "chunk": "diff --git a/messaging/src/main/java/org/axonframework/serialization/upcasting/event/IntermediateEventRepresentation.java b/messaging/src/main/java/org/axonframework/serialization/upcasting/event/IntermediateEventRepresentation.java\nindex 1267615b3..dab2220b8 100644\n--- a/messaging/src/main/java/org/axonframework/serialization/upcasting/event/IntermediateEventRepresentation.java\n+++ b/messaging/src/main/java/org/axonframework/serialization/upcasting/event/IntermediateEventRepresentation.java\n\n@@ -150,8 +150,9 @@\n     <D> Boolean canConvertDataTo(Class<D> requiredType);\n \n     /**\n-     * Retrieves the serializer used to retrieve data.\n-     * @return serializer configured for event serialization.\n+     * Retrieve the {@link Serializer} used to convert the contained {@link #getData()} and to deserialize the contained {@link #getMetaData()}.\n+     *\n+     * @return serializer used to convert and deserialize the the contained {@link #getData()} and  {@link #getMetaData()} respectively\n      */\n     Serializer getSerializer();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEwOTA1NQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1561#discussion_r509109055", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Retrieves the serializer used to retrieve data.\n          \n          \n            \n                 * @return serializer configured for event serialization.\n          \n          \n            \n                 * Retrieve the {@link Serializer} used to convert the contained {@link #getData()} and to deserialize the contained {@link #getMetaData()}.\n          \n          \n            \n                 *\n          \n          \n            \n                 * @return serializer used to convert and deserialize the the contained {@link #getData()} and  {@link #getMetaData()} respectively", "author": "smcvb", "createdAt": "2020-10-21T08:58:43Z", "path": "messaging/src/main/java/org/axonframework/serialization/upcasting/event/IntermediateEventRepresentation.java", "diffHunk": "@@ -139,4 +140,18 @@\n      * @return the MetaData of the message wrapping the object to upcast, if available\n      */\n     LazyDeserializingObject<MetaData> getMetaData();\n+\n+    /**\n+     * Checks if the data can be converted to required type.\n+     *\n+     * @param requiredType the type to convert to\n+     * @return true, if the intermediate representation can be converted to desired type.\n+     */\n+    <D> Boolean canConvertDataTo(Class<D> requiredType);\n+\n+    /**\n+     * Retrieves the serializer used to retrieve data.\n+     * @return serializer configured for event serialization.", "originalCommit": "f222bf0280c134c9cbd76f3bd2afbec80180fc49", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "69ced8e7b409a7f606854b2f8065e1c728745b78", "chunk": "diff --git a/messaging/src/main/java/org/axonframework/serialization/upcasting/event/IntermediateEventRepresentation.java b/messaging/src/main/java/org/axonframework/serialization/upcasting/event/IntermediateEventRepresentation.java\nindex 1267615b3..dab2220b8 100644\n--- a/messaging/src/main/java/org/axonframework/serialization/upcasting/event/IntermediateEventRepresentation.java\n+++ b/messaging/src/main/java/org/axonframework/serialization/upcasting/event/IntermediateEventRepresentation.java\n\n@@ -150,8 +150,9 @@\n     <D> Boolean canConvertDataTo(Class<D> requiredType);\n \n     /**\n-     * Retrieves the serializer used to retrieve data.\n-     * @return serializer configured for event serialization.\n+     * Retrieve the {@link Serializer} used to convert the contained {@link #getData()} and to deserialize the contained {@link #getMetaData()}.\n+     *\n+     * @return serializer used to convert and deserialize the the contained {@link #getData()} and  {@link #getMetaData()} respectively\n      */\n     Serializer getSerializer();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTExMDA5NQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1561#discussion_r509110095", "bodyText": "Missing a javadoc description for @param D here.", "author": "smcvb", "createdAt": "2020-10-21T09:00:06Z", "path": "messaging/src/main/java/org/axonframework/serialization/upcasting/event/IntermediateEventRepresentation.java", "diffHunk": "@@ -139,4 +140,18 @@\n      * @return the MetaData of the message wrapping the object to upcast, if available\n      */\n     LazyDeserializingObject<MetaData> getMetaData();\n+\n+    /**\n+     * Checks if the data can be converted to required type.\n+     *\n+     * @param requiredType the type to convert to\n+     * @return true, if the intermediate representation can be converted to desired type.\n+     */\n+    <D> Boolean canConvertDataTo(Class<D> requiredType);", "originalCommit": "f222bf0280c134c9cbd76f3bd2afbec80180fc49", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "69ced8e7b409a7f606854b2f8065e1c728745b78", "chunk": "diff --git a/messaging/src/main/java/org/axonframework/serialization/upcasting/event/IntermediateEventRepresentation.java b/messaging/src/main/java/org/axonframework/serialization/upcasting/event/IntermediateEventRepresentation.java\nindex 1267615b3..dab2220b8 100644\n--- a/messaging/src/main/java/org/axonframework/serialization/upcasting/event/IntermediateEventRepresentation.java\n+++ b/messaging/src/main/java/org/axonframework/serialization/upcasting/event/IntermediateEventRepresentation.java\n\n@@ -150,8 +150,9 @@\n     <D> Boolean canConvertDataTo(Class<D> requiredType);\n \n     /**\n-     * Retrieves the serializer used to retrieve data.\n-     * @return serializer configured for event serialization.\n+     * Retrieve the {@link Serializer} used to convert the contained {@link #getData()} and to deserialize the contained {@link #getMetaData()}.\n+     *\n+     * @return serializer used to convert and deserialize the the contained {@link #getData()} and  {@link #getMetaData()} respectively\n      */\n     Serializer getSerializer();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTExMDY2Mw==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1561#discussion_r509110663", "bodyText": "As we're on JUnit 5, you can remove the use of public on the class and methods.", "author": "smcvb", "createdAt": "2020-10-21T09:00:51Z", "path": "messaging/src/test/java/org/axonframework/serialization/upcasting/event/IntermediateRepresentationTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright (c) 2010-2020. Axon Framework\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.axonframework.serialization.upcasting.event;\n+\n+import org.axonframework.eventhandling.EventData;\n+import org.axonframework.eventhandling.GenericDomainEventMessage;\n+import org.axonframework.serialization.Converter;\n+import org.axonframework.serialization.Serializer;\n+import org.axonframework.serialization.xml.XStreamSerializer;\n+import org.axonframework.utils.TestDomainEventEntry;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.stream.Stream;\n+\n+import static java.util.stream.Collectors.toList;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.Mockito.*;\n+\n+/**\n+ * Test for intermediate representation.\n+ *\n+ * @author Simon Zambrovski\n+ */\n+public class IntermediateRepresentationTest {", "originalCommit": "f222bf0280c134c9cbd76f3bd2afbec80180fc49", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "204a1b37596e471c5f30c6c4150778be63a84b88", "chunk": "diff --git a/messaging/src/test/java/org/axonframework/serialization/upcasting/event/IntermediateRepresentationTest.java b/messaging/src/test/java/org/axonframework/serialization/upcasting/event/IntermediateRepresentationTest.java\nindex 7de25b456..940acb356 100644\n--- a/messaging/src/test/java/org/axonframework/serialization/upcasting/event/IntermediateRepresentationTest.java\n+++ b/messaging/src/test/java/org/axonframework/serialization/upcasting/event/IntermediateRepresentationTest.java\n\n@@ -20,6 +20,7 @@\n import org.axonframework.eventhandling.GenericDomainEventMessage;\n import org.axonframework.serialization.Converter;\n import org.axonframework.serialization.Serializer;\n+import org.axonframework.serialization.TestSerializer;\n import org.axonframework.serialization.xml.XStreamSerializer;\n import org.axonframework.utils.TestDomainEventEntry;\n import org.junit.jupiter.api.Test;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTExMTUwOA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1561#discussion_r509111508", "bodyText": "Nit: To remove the XStream warning of not having set the security context, you can use the org.axonframework.serialization.TestSerializer.XSTREAM instance.", "author": "smcvb", "createdAt": "2020-10-21T09:02:04Z", "path": "messaging/src/test/java/org/axonframework/serialization/upcasting/event/IntermediateRepresentationTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright (c) 2010-2020. Axon Framework\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.axonframework.serialization.upcasting.event;\n+\n+import org.axonframework.eventhandling.EventData;\n+import org.axonframework.eventhandling.GenericDomainEventMessage;\n+import org.axonframework.serialization.Converter;\n+import org.axonframework.serialization.Serializer;\n+import org.axonframework.serialization.xml.XStreamSerializer;\n+import org.axonframework.utils.TestDomainEventEntry;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.stream.Stream;\n+\n+import static java.util.stream.Collectors.toList;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.Mockito.*;\n+\n+/**\n+ * Test for intermediate representation.\n+ *\n+ * @author Simon Zambrovski\n+ */\n+public class IntermediateRepresentationTest {\n+\n+    private final static Serializer serializer = XStreamSerializer.defaultSerializer();", "originalCommit": "f222bf0280c134c9cbd76f3bd2afbec80180fc49", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "204a1b37596e471c5f30c6c4150778be63a84b88", "chunk": "diff --git a/messaging/src/test/java/org/axonframework/serialization/upcasting/event/IntermediateRepresentationTest.java b/messaging/src/test/java/org/axonframework/serialization/upcasting/event/IntermediateRepresentationTest.java\nindex 7de25b456..940acb356 100644\n--- a/messaging/src/test/java/org/axonframework/serialization/upcasting/event/IntermediateRepresentationTest.java\n+++ b/messaging/src/test/java/org/axonframework/serialization/upcasting/event/IntermediateRepresentationTest.java\n\n@@ -20,6 +20,7 @@\n import org.axonframework.eventhandling.GenericDomainEventMessage;\n import org.axonframework.serialization.Converter;\n import org.axonframework.serialization.Serializer;\n+import org.axonframework.serialization.TestSerializer;\n import org.axonframework.serialization.xml.XStreamSerializer;\n import org.axonframework.utils.TestDomainEventEntry;\n import org.junit.jupiter.api.Test;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTExMjAzMA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1561#discussion_r509112030", "bodyText": "We typically don't use the underscore test naming format, although to be honest I am not overly religious about it. Regard this more as a note, not something I think you should change.", "author": "smcvb", "createdAt": "2020-10-21T09:02:52Z", "path": "messaging/src/test/java/org/axonframework/serialization/upcasting/event/IntermediateRepresentationTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright (c) 2010-2020. Axon Framework\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.axonframework.serialization.upcasting.event;\n+\n+import org.axonframework.eventhandling.EventData;\n+import org.axonframework.eventhandling.GenericDomainEventMessage;\n+import org.axonframework.serialization.Converter;\n+import org.axonframework.serialization.Serializer;\n+import org.axonframework.serialization.xml.XStreamSerializer;\n+import org.axonframework.utils.TestDomainEventEntry;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.stream.Stream;\n+\n+import static java.util.stream.Collectors.toList;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.Mockito.*;\n+\n+/**\n+ * Test for intermediate representation.\n+ *\n+ * @author Simon Zambrovski\n+ */\n+public class IntermediateRepresentationTest {\n+\n+    private final static Serializer serializer = XStreamSerializer.defaultSerializer();\n+\n+    @Test\n+    public void should_deliver_serializer() {", "originalCommit": "f222bf0280c134c9cbd76f3bd2afbec80180fc49", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "204a1b37596e471c5f30c6c4150778be63a84b88", "chunk": "diff --git a/messaging/src/test/java/org/axonframework/serialization/upcasting/event/IntermediateRepresentationTest.java b/messaging/src/test/java/org/axonframework/serialization/upcasting/event/IntermediateRepresentationTest.java\nindex 7de25b456..940acb356 100644\n--- a/messaging/src/test/java/org/axonframework/serialization/upcasting/event/IntermediateRepresentationTest.java\n+++ b/messaging/src/test/java/org/axonframework/serialization/upcasting/event/IntermediateRepresentationTest.java\n\n@@ -20,6 +20,7 @@\n import org.axonframework.eventhandling.GenericDomainEventMessage;\n import org.axonframework.serialization.Converter;\n import org.axonframework.serialization.Serializer;\n+import org.axonframework.serialization.TestSerializer;\n import org.axonframework.serialization.xml.XStreamSerializer;\n import org.axonframework.utils.TestDomainEventEntry;\n import org.junit.jupiter.api.Test;\n"}}, {"oid": "69ced8e7b409a7f606854b2f8065e1c728745b78", "url": "https://github.com/AxonFramework/AxonFramework/commit/69ced8e7b409a7f606854b2f8065e1c728745b78", "message": "Update messaging/src/main/java/org/axonframework/serialization/upcasting/event/IntermediateEventRepresentation.java\n\nCo-authored-by: Steven van Beelen <steven.vanbeelen@axoniq.io>", "committedDate": "2020-10-21T12:27:05Z", "type": "commit"}, {"oid": "1acaf17ff55d5e54dfa901fb4739cabdc77a7cb1", "url": "https://github.com/AxonFramework/AxonFramework/commit/1acaf17ff55d5e54dfa901fb4739cabdc77a7cb1", "message": "Update messaging/src/main/java/org/axonframework/serialization/upcasting/event/IntermediateEventRepresentation.java\n\nCo-authored-by: Steven van Beelen <steven.vanbeelen@axoniq.io>", "committedDate": "2020-10-21T12:27:12Z", "type": "commit"}, {"oid": "204a1b37596e471c5f30c6c4150778be63a84b88", "url": "https://github.com/AxonFramework/AxonFramework/commit/204a1b37596e471c5f30c6c4150778be63a84b88", "message": "chore: work in comments of @smbcvb", "committedDate": "2020-10-21T12:33:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI0NDExNw==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1561#discussion_r509244117", "bodyText": "I to prevent unnecessary (un)boxing, please use a boolean as return type", "author": "abuijze", "createdAt": "2020-10-21T12:41:44Z", "path": "messaging/src/main/java/org/axonframework/serialization/upcasting/event/InitialEventRepresentation.java", "diffHunk": "@@ -148,4 +148,14 @@ public Instant getTimestamp() {\n     public LazyDeserializingObject<MetaData> getMetaData() {\n         return metaData;\n     }\n+\n+    @Override\n+    public <D> Boolean canConvertDataTo(Class<D> requiredType) {", "originalCommit": "f222bf0280c134c9cbd76f3bd2afbec80180fc49", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ2OTgyMw==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1561#discussion_r509469823", "bodyText": "fixed  in 64b00fd", "author": "zambrovski", "createdAt": "2020-10-21T17:22:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI0NDExNw=="}], "type": "inlineReview", "revised_code": {"commit": "64b00fd50f3aac8de0261bfc718c44e919abcd43", "chunk": "diff --git a/messaging/src/main/java/org/axonframework/serialization/upcasting/event/InitialEventRepresentation.java b/messaging/src/main/java/org/axonframework/serialization/upcasting/event/InitialEventRepresentation.java\nindex facfc68a7..c8431e199 100644\n--- a/messaging/src/main/java/org/axonframework/serialization/upcasting/event/InitialEventRepresentation.java\n+++ b/messaging/src/main/java/org/axonframework/serialization/upcasting/event/InitialEventRepresentation.java\n\n@@ -150,12 +150,7 @@ public Instant getTimestamp() {\n     }\n \n     @Override\n-    public <D> Boolean canConvertDataTo(Class<D> requiredType) {\n+    public <D> boolean canConvertDataTo(Class<D> requiredType) {\n         return serializer.getConverter().canConvert(data.getContentType(), requiredType);\n     }\n-\n-    @Override\n-    public Serializer getSerializer() {\n-        return serializer;\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI0NTQ0NQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1561#discussion_r509245445", "bodyText": "As I mentioned in the discussion (https://discuss.axoniq.io/t/upcasters-for-json-and-xml/2799/4), it might be tricky to share the serializer. There is not much you can do with the serializer that makes sense at this stage. The only thing would be to access the converters, which is basically already taken care of by the other method.\nWhat do you think?", "author": "abuijze", "createdAt": "2020-10-21T12:43:48Z", "path": "messaging/src/main/java/org/axonframework/serialization/upcasting/event/InitialEventRepresentation.java", "diffHunk": "@@ -148,4 +148,14 @@ public Instant getTimestamp() {\n     public LazyDeserializingObject<MetaData> getMetaData() {\n         return metaData;\n     }\n+\n+    @Override\n+    public <D> Boolean canConvertDataTo(Class<D> requiredType) {\n+        return serializer.getConverter().canConvert(data.getContentType(), requiredType);\n+    }\n+\n+    @Override\n+    public Serializer getSerializer() {", "originalCommit": "f222bf0280c134c9cbd76f3bd2afbec80180fc49", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ3MDIzNg==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1561#discussion_r509470236", "bodyText": "fixed in 64b00fd", "author": "zambrovski", "createdAt": "2020-10-21T17:22:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI0NTQ0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "64b00fd50f3aac8de0261bfc718c44e919abcd43", "chunk": "diff --git a/messaging/src/main/java/org/axonframework/serialization/upcasting/event/InitialEventRepresentation.java b/messaging/src/main/java/org/axonframework/serialization/upcasting/event/InitialEventRepresentation.java\nindex facfc68a7..c8431e199 100644\n--- a/messaging/src/main/java/org/axonframework/serialization/upcasting/event/InitialEventRepresentation.java\n+++ b/messaging/src/main/java/org/axonframework/serialization/upcasting/event/InitialEventRepresentation.java\n\n@@ -150,12 +150,7 @@ public Instant getTimestamp() {\n     }\n \n     @Override\n-    public <D> Boolean canConvertDataTo(Class<D> requiredType) {\n+    public <D> boolean canConvertDataTo(Class<D> requiredType) {\n         return serializer.getConverter().canConvert(data.getContentType(), requiredType);\n     }\n-\n-    @Override\n-    public Serializer getSerializer() {\n-        return serializer;\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM5MDU1Mg==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1561#discussion_r509390552", "bodyText": "see above. Please use boolean instead.", "author": "abuijze", "createdAt": "2020-10-21T15:34:15Z", "path": "messaging/src/main/java/org/axonframework/serialization/upcasting/event/IntermediateEventRepresentation.java", "diffHunk": "@@ -139,4 +140,18 @@\n      * @return the MetaData of the message wrapping the object to upcast, if available\n      */\n     LazyDeserializingObject<MetaData> getMetaData();\n+\n+    /**\n+     * Checks if the data can be converted to required type.\n+     *\n+     * @param requiredType the type to convert to\n+     * @return true, if the intermediate representation can be converted to desired type.\n+     */\n+    <D> Boolean canConvertDataTo(Class<D> requiredType);", "originalCommit": "f222bf0280c134c9cbd76f3bd2afbec80180fc49", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ3MDA0Mg==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1561#discussion_r509470042", "bodyText": "fixed in 64b00fd", "author": "zambrovski", "createdAt": "2020-10-21T17:22:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM5MDU1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "64b00fd50f3aac8de0261bfc718c44e919abcd43", "chunk": "diff --git a/messaging/src/main/java/org/axonframework/serialization/upcasting/event/IntermediateEventRepresentation.java b/messaging/src/main/java/org/axonframework/serialization/upcasting/event/IntermediateEventRepresentation.java\nindex 1267615b3..74d5eafd1 100644\n--- a/messaging/src/main/java/org/axonframework/serialization/upcasting/event/IntermediateEventRepresentation.java\n+++ b/messaging/src/main/java/org/axonframework/serialization/upcasting/event/IntermediateEventRepresentation.java\n\n@@ -142,16 +142,11 @@\n     LazyDeserializingObject<MetaData> getMetaData();\n \n     /**\n-     * Checks if the data can be converted to required type.\n+     * Checks if the data can be converted to the given {@code requiredType}.\n      *\n-     * @param requiredType the type to convert to\n-     * @return true, if the intermediate representation can be converted to desired type.\n-     */\n-    <D> Boolean canConvertDataTo(Class<D> requiredType);\n-\n-    /**\n-     * Retrieves the serializer used to retrieve data.\n-     * @return serializer configured for event serialization.\n+     * @param requiredType the type to validate if the contained data can be converted to.\n+     * @param <D> class of the required type.\n+     * @return true, if the intermediate representation's data can be converted to desired type, false otherwise\n      */\n-    Serializer getSerializer();\n+    <D> boolean canConvertDataTo(Class<D> requiredType);\n }\n"}}, {"oid": "64b00fd50f3aac8de0261bfc718c44e919abcd43", "url": "https://github.com/AxonFramework/AxonFramework/commit/64b00fd50f3aac8de0261bfc718c44e919abcd43", "message": "feature: remove serializer access method", "committedDate": "2020-10-21T17:21:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU1NTc4OA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1561#discussion_r509555788", "bodyText": "This is getting really nitty gritty (sorry for that), but the explicit generic parameter (<D> doesn't seem to add much value. Perhaps just using Class<?> expectedType is enough?", "author": "abuijze", "createdAt": "2020-10-21T18:30:13Z", "path": "messaging/src/main/java/org/axonframework/serialization/upcasting/event/InitialEventRepresentation.java", "diffHunk": "@@ -148,4 +148,9 @@ public Instant getTimestamp() {\n     public LazyDeserializingObject<MetaData> getMetaData() {\n         return metaData;\n     }\n+\n+    @Override\n+    public <D> boolean canConvertDataTo(Class<D> requiredType) {", "originalCommit": "64b00fd50f3aac8de0261bfc718c44e919abcd43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU5MjcyOQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1561#discussion_r509592729", "bodyText": "Thank you @abuijze!\nYou are completely right and I'm happy you take it seriously with every bit that gets into the product. This is true quality, since it is not just your habit or a personal style but is technically reasonable and correct.\nSo I rather get a review with five corrections than an accept of bogus code...\nI've just corrected it and pushed....", "author": "zambrovski", "createdAt": "2020-10-21T19:03:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU1NTc4OA=="}], "type": "inlineReview", "revised_code": {"commit": "d52a16b66fe31753fb1df36889b728bf186b6adb", "chunk": "diff --git a/messaging/src/main/java/org/axonframework/serialization/upcasting/event/InitialEventRepresentation.java b/messaging/src/main/java/org/axonframework/serialization/upcasting/event/InitialEventRepresentation.java\nindex c8431e199..7d6ba6695 100644\n--- a/messaging/src/main/java/org/axonframework/serialization/upcasting/event/InitialEventRepresentation.java\n+++ b/messaging/src/main/java/org/axonframework/serialization/upcasting/event/InitialEventRepresentation.java\n\n@@ -150,7 +150,7 @@ public Instant getTimestamp() {\n     }\n \n     @Override\n-    public <D> boolean canConvertDataTo(Class<D> requiredType) {\n+    public boolean canConvertDataTo(Class<?> requiredType) {\n         return serializer.getConverter().canConvert(data.getContentType(), requiredType);\n     }\n }\n"}}, {"oid": "d52a16b66fe31753fb1df36889b728bf186b6adb", "url": "https://github.com/AxonFramework/AxonFramework/commit/d52a16b66fe31753fb1df36889b728bf186b6adb", "message": "corrected parameter type comment of @abuijze", "committedDate": "2020-10-21T19:03:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDIzMDMzMQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1561#discussion_r510230331", "bodyText": "Given the changes which have occurred, we should remove this import statement too.", "author": "smcvb", "createdAt": "2020-10-22T14:56:02Z", "path": "messaging/src/main/java/org/axonframework/serialization/upcasting/event/IntermediateEventRepresentation.java", "diffHunk": "@@ -21,6 +21,7 @@\n import org.axonframework.serialization.LazyDeserializingObject;\n import org.axonframework.serialization.SerializedObject;\n import org.axonframework.serialization.SerializedType;\n+import org.axonframework.serialization.Serializer;", "originalCommit": "d52a16b66fe31753fb1df36889b728bf186b6adb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0f17b80c847b1a9841b53a9785d96fe744527ce8", "chunk": "diff --git a/messaging/src/main/java/org/axonframework/serialization/upcasting/event/IntermediateEventRepresentation.java b/messaging/src/main/java/org/axonframework/serialization/upcasting/event/IntermediateEventRepresentation.java\nindex 389abd3d5..d1b7fa30e 100644\n--- a/messaging/src/main/java/org/axonframework/serialization/upcasting/event/IntermediateEventRepresentation.java\n+++ b/messaging/src/main/java/org/axonframework/serialization/upcasting/event/IntermediateEventRepresentation.java\n\n@@ -21,7 +21,6 @@\n import org.axonframework.serialization.LazyDeserializingObject;\n import org.axonframework.serialization.SerializedObject;\n import org.axonframework.serialization.SerializedType;\n-import org.axonframework.serialization.Serializer;\n \n import java.time.Instant;\n import java.util.Optional;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDIzMTMwNw==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1561#discussion_r510231307", "bodyText": "Don't think this was intended? Currently the test cases invoke this private method which doesn't really do an assertion. I would expect Assertions#assertTrue(...) to be invoked instead.", "author": "smcvb", "createdAt": "2020-10-22T14:57:15Z", "path": "messaging/src/test/java/org/axonframework/serialization/upcasting/event/IntermediateRepresentationTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright (c) 2010-2020. Axon Framework\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.axonframework.serialization.upcasting.event;\n+\n+import org.axonframework.eventhandling.EventData;\n+import org.axonframework.eventhandling.GenericDomainEventMessage;\n+import org.axonframework.serialization.Converter;\n+import org.axonframework.serialization.Serializer;\n+import org.axonframework.serialization.TestSerializer;\n+import org.axonframework.utils.TestDomainEventEntry;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.stream.Stream;\n+\n+import static java.util.stream.Collectors.toList;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.Mockito.*;\n+\n+/**\n+ * Test for intermediate representation.\n+ *\n+ * @author Simon Zambrovski\n+ */\n+class IntermediateRepresentationTest {\n+\n+    private final static Serializer serializer = TestSerializer.XSTREAM.getSerializer();\n+\n+    @Test\n+    public void canConvertDataTo() {\n+        EventData<?> eventData = new TestDomainEventEntry(\n+            new GenericDomainEventMessage<>(\"test\", \"aggregateId\", 0, \"someString\"), serializer\n+        );\n+        Serializer serializer = mock(Serializer.class);\n+        Converter converter = mock(Converter.class);\n+        when(serializer.getConverter()).thenReturn(converter);\n+        when(converter.canConvert(any(), eq(String.class))).thenReturn(true);\n+\n+        IntermediateEventRepresentation input = new InitialEventRepresentation(eventData, serializer);\n+        EventUpcasterChain eventUpcasterChain = new EventUpcasterChain(\n+            new IntermediateRepresentationTest.MyEventUpcaster()\n+        );\n+        List<IntermediateEventRepresentation> result = eventUpcasterChain.upcast(Stream.of(input)).collect(toList());\n+        assertEquals(1, result.size());\n+\n+\n+        assertTrue(input.canConvertDataTo(String.class));\n+        assertTrue(result.get(0).canConvertDataTo(String.class));\n+\n+        verify(converter, atMostOnce()).canConvert(String.class, String.class);\n+    }\n+\n+    private void assertTrue(boolean canConvertDataTo) {", "originalCommit": "d52a16b66fe31753fb1df36889b728bf186b6adb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0f17b80c847b1a9841b53a9785d96fe744527ce8", "chunk": "diff --git a/messaging/src/test/java/org/axonframework/serialization/upcasting/event/IntermediateRepresentationTest.java b/messaging/src/test/java/org/axonframework/serialization/upcasting/event/IntermediateRepresentationTest.java\nindex 7498af4ba..6e4c26bd4 100644\n--- a/messaging/src/test/java/org/axonframework/serialization/upcasting/event/IntermediateRepresentationTest.java\n+++ b/messaging/src/test/java/org/axonframework/serialization/upcasting/event/IntermediateRepresentationTest.java\n\n@@ -30,6 +30,7 @@\n \n import static java.util.stream.Collectors.toList;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.mockito.Mockito.*;\n \n /**\n"}}, {"oid": "0f17b80c847b1a9841b53a9785d96fe744527ce8", "url": "https://github.com/AxonFramework/AxonFramework/commit/0f17b80c847b1a9841b53a9785d96fe744527ce8", "message": "fixing changes from review", "committedDate": "2020-10-22T17:36:30Z", "type": "commit"}]}