{"pr_number": 1321, "pr_title": "[#1187] Ability to configure all the SqlStatements used by JdbcEventStorageEngine", "pr_createdAt": "2020-01-20T10:23:49Z", "pr_url": "https://github.com/AxonFramework/AxonFramework/pull/1321", "timeline": [{"oid": "156c7f5c3664d09866831ab790cd2c7ed501981b", "url": "https://github.com/AxonFramework/AxonFramework/commit/156c7f5c3664d09866831ab790cd2c7ed501981b", "message": "Added the ability to configure all the SqlStatements used by JdbcEventStorageEngine", "committedDate": "2020-01-20T10:18:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ5MjQyNg==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1321#discussion_r368492426", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return a new builder for the event eventSchema\n          \n          \n            \n                 * @return a new builder for the event schema", "author": "smcvb", "createdAt": "2020-01-20T11:11:09Z", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/EventSchema.java", "diffHunk": "@@ -48,12 +66,27 @@ private EventSchema(Builder builder) {\n         payloadRevisionColumn = builder.payloadRevisionColumn;\n         payloadColumn = builder.payloadColumn;\n         metaDataColumn = builder.metaDataColumn;\n+        domainEventFields = builder.domainEventFields;\n+        trackedEventFields = builder.trackedEventFields;\n+        createTokenAtSqlStatement = builder.createTokenAtSqlStatement;\n+        appendEventsSqlStatement = builder.appendEventsSqlStatement;\n+        lastSequenceNumberForSqlStatement = builder.lastSequenceNumberForSqlStatement;\n+        createTailTokenSqlStatement = builder.createTailTokenSqlStatement;\n+        createHeadTokenSqlStatement = builder.createHeadTokenSqlStatement;\n+        appendSnapshotSqlStatement = builder.appendSnapshotSqlStatement;\n+        deleteSnapshotsSqlStatement = builder.deleteSnapshotsSqlStatement;\n+        fetchTrackedEventsSqlStatement = builder.fetchTrackedEventsSqlStatement;\n+        cleanGapsSqlStatement = builder.cleanGapsSqlStatement;\n+        readEventDataForAggregateSqlStatement = builder.readEventDataForAggregateSqlStatement;\n+        readSnapshotDataSqlStatement = builder.readSnapshotDataSqlStatement;\n+        readEventDataWithoutGapsSqlStatement = builder.readEventDataWithoutGapsSqlStatement;\n+        readEventDataWithGapsSqlStatement = builder.readEventDataWithGapsSqlStatement;\n     }\n \n     /**\n      * Returns a new {@link Builder} initialized with default settings.\n      *\n-     * @return a new builder for the event schema\n+     * @return a new builder for the event eventSchema", "originalCommit": "156c7f5c3664d09866831ab790cd2c7ed501981b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9ffbff71547c5820730ada02f72211bb595852b1", "chunk": "diff --git a/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/EventSchema.java b/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/EventSchema.java\nindex 779594ee6..8642625eb 100644\n--- a/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/EventSchema.java\n+++ b/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/EventSchema.java\n\n@@ -68,25 +54,12 @@ private EventSchema(Builder builder) {\n         metaDataColumn = builder.metaDataColumn;\n         domainEventFields = builder.domainEventFields;\n         trackedEventFields = builder.trackedEventFields;\n-        createTokenAtSqlStatement = builder.createTokenAtSqlStatement;\n-        appendEventsSqlStatement = builder.appendEventsSqlStatement;\n-        lastSequenceNumberForSqlStatement = builder.lastSequenceNumberForSqlStatement;\n-        createTailTokenSqlStatement = builder.createTailTokenSqlStatement;\n-        createHeadTokenSqlStatement = builder.createHeadTokenSqlStatement;\n-        appendSnapshotSqlStatement = builder.appendSnapshotSqlStatement;\n-        deleteSnapshotsSqlStatement = builder.deleteSnapshotsSqlStatement;\n-        fetchTrackedEventsSqlStatement = builder.fetchTrackedEventsSqlStatement;\n-        cleanGapsSqlStatement = builder.cleanGapsSqlStatement;\n-        readEventDataForAggregateSqlStatement = builder.readEventDataForAggregateSqlStatement;\n-        readSnapshotDataSqlStatement = builder.readSnapshotDataSqlStatement;\n-        readEventDataWithoutGapsSqlStatement = builder.readEventDataWithoutGapsSqlStatement;\n-        readEventDataWithGapsSqlStatement = builder.readEventDataWithGapsSqlStatement;\n     }\n \n     /**\n      * Returns a new {@link Builder} initialized with default settings.\n      *\n-     * @return a new builder for the event eventSchema\n+     * @return a new builder for the event schema\n      */\n     public static Builder builder() {\n         return new Builder();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUwMjA2OA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1321#discussion_r368502068", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * int)} a} for aggregate. Defaults to:\n          \n          \n            \n                     * int)} for aggregate. Defaults to:", "author": "smcvb", "createdAt": "2020-01-20T11:35:54Z", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/EventSchema.java", "diffHunk": "@@ -318,6 +561,241 @@ public Builder metaDataColumn(String metaDataColumn) {\n             return this;\n         }\n \n+        /**\n+         * Set a comma separated list of domain event column names to select from an event or snapshot entry. Defaults\n+         * to:\n+         * <p/>\n+         * {@code \"[eventIdentifierColumn], [aggregateIdentifierColumn], [sequenceNumberColumn], [typeColumn],\n+         * [timestampColumn], [payloadTypeColumn], [payloadRevisionColumn], [payloadColumn], [metaDataColumn]\" }\n+         * <p/>\n+         *\n+         * @return the modified Builder instance\n+         */\n+        public Builder domainEventFields(Function<EventSchema, String> domainEventFields) {\n+            this.domainEventFields = domainEventFields;\n+            return this;\n+        }\n+\n+        /**\n+         * Set a comma separated list of tracked domain event column names to select from an event entry. Defaults to:\n+         * <p/>\n+         * {@code \"[globalIndexColumn], [domainEventFields]\" }\n+         * <p/>\n+         *\n+         * @return the modified Builder instance\n+         */\n+        public Builder trackedEventFields(Function<EventSchema, String> trackedEventFields) {\n+            this.trackedEventFields = trackedEventFields;\n+            return this;\n+        }\n+\n+        /**\n+         * Set the SqlStatement to be used on {@link JdbcEventStorageEngine#createTokenAt}. Defaults to:\n+         * <p/>\n+         * {@code \"SELECT min([globalIndexColumn]) - 1 FROM [domainEventTable] WHERE [timestampColumn] >= ?\" }\n+         * <p/>\n+         * <b>NOTE:</b> \"?\" is the Instant parameter from {@link JdbcEventStorageEngine#createTokenAt} and should\n+         * <b>always</b> be present for the SqlStatement to work.\n+         *\n+         * @return the modified Builder instance\n+         */\n+        public Builder createTokenAtSqlStatement(Function<EventSchema, String> createTokenAtSqlStatement) {\n+            this.createTokenAtSqlStatement = createTokenAtSqlStatement;\n+            return this;\n+        }\n+\n+        /**\n+         * Set the SqlStatement to be used on {@link JdbcEventStorageEngine#appendEvents}. Defaults to:\n+         * <p/>\n+         * {@code \"INSERT INTO [domainEventTable] ([domainEventFields]) VALUES (?,?,?,?,?,?,?,?,?)\" }\n+         * <p/>\n+         * <b>NOTE:</b> each \"?\" is a domain event field from {@link EventSchema#domainEventFields()} and should\n+         * <b>always</b> be present for the SqlStatement to work.\n+         *\n+         * @return the modified Builder instance\n+         */\n+        public Builder appendEventsSqlStatement(Function<EventSchema, String> appendEventsSqlStatement) {\n+            this.appendEventsSqlStatement = appendEventsSqlStatement;\n+            return this;\n+        }\n+\n+        /**\n+         * Set the SqlStatement to be used on {@link JdbcEventStorageEngine#lastSequenceNumberFor}. Defaults to:\n+         * <p/>\n+         * {@code \"SELECT max([sequenceNumberColumn]) FROM [domainEventTable] WHERE [aggregateIdentifierColumn] = ?\" }\n+         * <p/>\n+         * <b>NOTE:</b> \"?\" is the aggregateIdentifier parameter from {@link JdbcEventStorageEngine#lastSequenceNumberFor}\n+         * and should <b>always</b> be present for the SqlStatement to work.\n+         *\n+         * @return the modified Builder instance\n+         */\n+        public Builder lastSequenceNumberForSqlStatement(\n+                Function<EventSchema, String> lastSequenceNumberForSqlStatement) {\n+            this.lastSequenceNumberForSqlStatement = lastSequenceNumberForSqlStatement;\n+            return this;\n+        }\n+\n+        /**\n+         * Set the SqlStatement to be used on {@link JdbcEventStorageEngine#createTailToken}. Defaults to:\n+         * <p/>\n+         * {@code \"SELECT min([globalIndexColumn]) - 1 FROM [domainEventTable]\" }\n+         * <p/>\n+         *\n+         * @return the modified Builder instance\n+         */\n+        public Builder createTailTokenSqlStatement(Function<EventSchema, String> createTailTokenSqlStatement) {\n+            this.createTailTokenSqlStatement = createTailTokenSqlStatement;\n+            return this;\n+        }\n+\n+        /**\n+         * Set the SqlStatement to be used on {@link JdbcEventStorageEngine#createHeadToken}. Defaults to:\n+         * <p/>\n+         * {@code \"SELECT max([globalIndexColumn]) FROM [domainEventTable]\" }\n+         * <p/>\n+         *\n+         * @return the modified Builder instance\n+         */\n+        public Builder createHeadTokenSqlStatement(Function<EventSchema, String> createHeadTokenSqlStatement) {\n+            this.createHeadTokenSqlStatement = createHeadTokenSqlStatement;\n+            return this;\n+        }\n+\n+        /**\n+         * Set the SqlStatement to be used on {@link JdbcEventStorageEngine#appendSnapshot}. Defaults to:\n+         * <p/>\n+         * {@code \"INSERT INTO [snapshotTable] ([domainEventFields]) VALUES (?,?,?,?,?,?,?,?,?)\" }\n+         * <p/>\n+         * <b>NOTE:</b> each \"?\" is a domain event field from {@link EventSchema#domainEventFields()} and should\n+         * <b>always</b> be present for the SqlStatement to work.\n+         *\n+         * @return the modified Builder instance\n+         */\n+        public Builder appendSnapshotSqlStatement(Function<EventSchema, String> appendSnapshotSqlStatement) {\n+            this.appendSnapshotSqlStatement = appendSnapshotSqlStatement;\n+            return this;\n+        }\n+\n+        /**\n+         * Set the SqlStatement to be used on {@link JdbcEventStorageEngine#deleteSnapshots}. Defaults to:\n+         * <p/>\n+         * {@code \"DELETE FROM [snapshotTable] WHERE [aggregateIdentifierColumn] = ?1 AND [sequenceNumberColumn] < ?2\"\n+         * }\n+         * <p/>\n+         * <b>NOTE:</b> \"?1\" is the aggregateIdentifier and \"?2\" is the sequenceNumber parameters from {@link\n+         * JdbcEventStorageEngine#deleteSnapshots} and they should <b>always</b> be present for the SqlStatement to\n+         * work.\n+         *\n+         * @return the modified Builder instance\n+         */\n+        public Builder deleteSnapshotsSqlStatement(Function<EventSchema, String> deleteSnapshotsSqlStatement) {\n+            this.deleteSnapshotsSqlStatement = deleteSnapshotsSqlStatement;\n+            return this;\n+        }\n+\n+        /**\n+         * Set the SqlStatement to be used on {@link JdbcEventStorageEngine#fetchTrackedEvents}. Defaults to:\n+         * <p/>\n+         * {@code \"SELECT min([globalIndexColumn]) FROM [domainEventTable] WHERE [globalIndexColumn] > ?\" }\n+         * <p/>\n+         * <b>NOTE:</b> \"?\" is based on the lastToken parameter from {@link JdbcEventStorageEngine#fetchTrackedEvents}\n+         * and should <b>always</b> be present for the SqlStatement to work.\n+         *\n+         * @return the modified Builder instance\n+         */\n+        public Builder fetchTrackedEventsSqlStatement(Function<EventSchema, String> fetchTrackedEventsSqlStatement) {\n+            this.fetchTrackedEventsSqlStatement = fetchTrackedEventsSqlStatement;\n+            return this;\n+        }\n+\n+        /**\n+         * Set the SqlStatement to be used on internal cleanGaps operation. Defaults to:\n+         * <p/>\n+         * {@code \"SELECT [globalIndexColumn], [timestampColumn] FROM [domainEventTable] WHERE [globalIndexColumn] >= ?1\n+         * AND [globalIndexColumn] <= ?2\" }\n+         * <p/>\n+         * <b>NOTE:</b> \"?1\" and \"?2\" are taken from the {@link GapAwareTrackingToken#getGaps()} first and last.\n+         *\n+         * @return the modified Builder instance\n+         */\n+        public Builder cleanGapsSqlStatement(Function<EventSchema, String> cleanGapsSqlStatement) {\n+            this.cleanGapsSqlStatement = cleanGapsSqlStatement;\n+            return this;\n+        }\n+\n+        /**\n+         * Set the SqlStatement to be used on {@link JdbcEventStorageEngine#readEventData(Connection, String, long,\n+         * int)} a} for aggregate. Defaults to:", "originalCommit": "156c7f5c3664d09866831ab790cd2c7ed501981b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9ffbff71547c5820730ada02f72211bb595852b1", "chunk": "diff --git a/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/EventSchema.java b/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/EventSchema.java\nindex 779594ee6..8642625eb 100644\n--- a/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/EventSchema.java\n+++ b/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/EventSchema.java\n\n@@ -589,213 +385,6 @@ public Builder trackedEventFields(Function<EventSchema, String> trackedEventFiel\n             return this;\n         }\n \n-        /**\n-         * Set the SqlStatement to be used on {@link JdbcEventStorageEngine#createTokenAt}. Defaults to:\n-         * <p/>\n-         * {@code \"SELECT min([globalIndexColumn]) - 1 FROM [domainEventTable] WHERE [timestampColumn] >= ?\" }\n-         * <p/>\n-         * <b>NOTE:</b> \"?\" is the Instant parameter from {@link JdbcEventStorageEngine#createTokenAt} and should\n-         * <b>always</b> be present for the SqlStatement to work.\n-         *\n-         * @return the modified Builder instance\n-         */\n-        public Builder createTokenAtSqlStatement(Function<EventSchema, String> createTokenAtSqlStatement) {\n-            this.createTokenAtSqlStatement = createTokenAtSqlStatement;\n-            return this;\n-        }\n-\n-        /**\n-         * Set the SqlStatement to be used on {@link JdbcEventStorageEngine#appendEvents}. Defaults to:\n-         * <p/>\n-         * {@code \"INSERT INTO [domainEventTable] ([domainEventFields]) VALUES (?,?,?,?,?,?,?,?,?)\" }\n-         * <p/>\n-         * <b>NOTE:</b> each \"?\" is a domain event field from {@link EventSchema#domainEventFields()} and should\n-         * <b>always</b> be present for the SqlStatement to work.\n-         *\n-         * @return the modified Builder instance\n-         */\n-        public Builder appendEventsSqlStatement(Function<EventSchema, String> appendEventsSqlStatement) {\n-            this.appendEventsSqlStatement = appendEventsSqlStatement;\n-            return this;\n-        }\n-\n-        /**\n-         * Set the SqlStatement to be used on {@link JdbcEventStorageEngine#lastSequenceNumberFor}. Defaults to:\n-         * <p/>\n-         * {@code \"SELECT max([sequenceNumberColumn]) FROM [domainEventTable] WHERE [aggregateIdentifierColumn] = ?\" }\n-         * <p/>\n-         * <b>NOTE:</b> \"?\" is the aggregateIdentifier parameter from {@link JdbcEventStorageEngine#lastSequenceNumberFor}\n-         * and should <b>always</b> be present for the SqlStatement to work.\n-         *\n-         * @return the modified Builder instance\n-         */\n-        public Builder lastSequenceNumberForSqlStatement(\n-                Function<EventSchema, String> lastSequenceNumberForSqlStatement) {\n-            this.lastSequenceNumberForSqlStatement = lastSequenceNumberForSqlStatement;\n-            return this;\n-        }\n-\n-        /**\n-         * Set the SqlStatement to be used on {@link JdbcEventStorageEngine#createTailToken}. Defaults to:\n-         * <p/>\n-         * {@code \"SELECT min([globalIndexColumn]) - 1 FROM [domainEventTable]\" }\n-         * <p/>\n-         *\n-         * @return the modified Builder instance\n-         */\n-        public Builder createTailTokenSqlStatement(Function<EventSchema, String> createTailTokenSqlStatement) {\n-            this.createTailTokenSqlStatement = createTailTokenSqlStatement;\n-            return this;\n-        }\n-\n-        /**\n-         * Set the SqlStatement to be used on {@link JdbcEventStorageEngine#createHeadToken}. Defaults to:\n-         * <p/>\n-         * {@code \"SELECT max([globalIndexColumn]) FROM [domainEventTable]\" }\n-         * <p/>\n-         *\n-         * @return the modified Builder instance\n-         */\n-        public Builder createHeadTokenSqlStatement(Function<EventSchema, String> createHeadTokenSqlStatement) {\n-            this.createHeadTokenSqlStatement = createHeadTokenSqlStatement;\n-            return this;\n-        }\n-\n-        /**\n-         * Set the SqlStatement to be used on {@link JdbcEventStorageEngine#appendSnapshot}. Defaults to:\n-         * <p/>\n-         * {@code \"INSERT INTO [snapshotTable] ([domainEventFields]) VALUES (?,?,?,?,?,?,?,?,?)\" }\n-         * <p/>\n-         * <b>NOTE:</b> each \"?\" is a domain event field from {@link EventSchema#domainEventFields()} and should\n-         * <b>always</b> be present for the SqlStatement to work.\n-         *\n-         * @return the modified Builder instance\n-         */\n-        public Builder appendSnapshotSqlStatement(Function<EventSchema, String> appendSnapshotSqlStatement) {\n-            this.appendSnapshotSqlStatement = appendSnapshotSqlStatement;\n-            return this;\n-        }\n-\n-        /**\n-         * Set the SqlStatement to be used on {@link JdbcEventStorageEngine#deleteSnapshots}. Defaults to:\n-         * <p/>\n-         * {@code \"DELETE FROM [snapshotTable] WHERE [aggregateIdentifierColumn] = ?1 AND [sequenceNumberColumn] < ?2\"\n-         * }\n-         * <p/>\n-         * <b>NOTE:</b> \"?1\" is the aggregateIdentifier and \"?2\" is the sequenceNumber parameters from {@link\n-         * JdbcEventStorageEngine#deleteSnapshots} and they should <b>always</b> be present for the SqlStatement to\n-         * work.\n-         *\n-         * @return the modified Builder instance\n-         */\n-        public Builder deleteSnapshotsSqlStatement(Function<EventSchema, String> deleteSnapshotsSqlStatement) {\n-            this.deleteSnapshotsSqlStatement = deleteSnapshotsSqlStatement;\n-            return this;\n-        }\n-\n-        /**\n-         * Set the SqlStatement to be used on {@link JdbcEventStorageEngine#fetchTrackedEvents}. Defaults to:\n-         * <p/>\n-         * {@code \"SELECT min([globalIndexColumn]) FROM [domainEventTable] WHERE [globalIndexColumn] > ?\" }\n-         * <p/>\n-         * <b>NOTE:</b> \"?\" is based on the lastToken parameter from {@link JdbcEventStorageEngine#fetchTrackedEvents}\n-         * and should <b>always</b> be present for the SqlStatement to work.\n-         *\n-         * @return the modified Builder instance\n-         */\n-        public Builder fetchTrackedEventsSqlStatement(Function<EventSchema, String> fetchTrackedEventsSqlStatement) {\n-            this.fetchTrackedEventsSqlStatement = fetchTrackedEventsSqlStatement;\n-            return this;\n-        }\n-\n-        /**\n-         * Set the SqlStatement to be used on internal cleanGaps operation. Defaults to:\n-         * <p/>\n-         * {@code \"SELECT [globalIndexColumn], [timestampColumn] FROM [domainEventTable] WHERE [globalIndexColumn] >= ?1\n-         * AND [globalIndexColumn] <= ?2\" }\n-         * <p/>\n-         * <b>NOTE:</b> \"?1\" and \"?2\" are taken from the {@link GapAwareTrackingToken#getGaps()} first and last.\n-         *\n-         * @return the modified Builder instance\n-         */\n-        public Builder cleanGapsSqlStatement(Function<EventSchema, String> cleanGapsSqlStatement) {\n-            this.cleanGapsSqlStatement = cleanGapsSqlStatement;\n-            return this;\n-        }\n-\n-        /**\n-         * Set the SqlStatement to be used on {@link JdbcEventStorageEngine#readEventData(Connection, String, long,\n-         * int)} a} for aggregate. Defaults to:\n-         * <p/>\n-         * {@code \"SELECT [trackedEventFields] FROM [domainEventTable] WHERE [aggregateIdentifierColumn] = ?1 AND\n-         * [sequenceNumberColumn] >= ?2 AND [sequenceNumberColumn] < ?3 ORDER BY [sequenceNumberColumn] ASC\" }\n-         * <p/>\n-         * <b>NOTE:</b> \"?1\" is the identifier, \"?2\" is the firstSequenceNumber and \"?3\" is based on batchSize\n-         * parameters from {@link JdbcEventStorageEngine#readEventData(Connection, String, long, int)} and they should\n-         * <b>always</b> be present for the SqlStatement to work.\n-         *\n-         * @return the modified Builder instance\n-         */\n-        public Builder readEventDataForAggregateSqlStatement(\n-                Function<EventSchema, String> readEventDataForAggregateSqlStatement) {\n-            this.readEventDataForAggregateSqlStatement = readEventDataForAggregateSqlStatement;\n-            return this;\n-        }\n-\n-        /**\n-         * Set the SqlStatement to be used on {@link JdbcEventStorageEngine#readSnapshotData}. Defaults to:\n-         * <p/>\n-         * {@code \"SELECT [domainEventFields] FROM [snapshotTable] WHERE [aggregateIdentifierColumn] = ? ORDER BY\n-         * [sequenceNumberColumn] DESC\" }\n-         * <p/>\n-         * <b>NOTE:</b> \"?\" is the identifier parameter from {@link JdbcEventStorageEngine#readSnapshotData}\n-         * and should <b>always</b> be present for the SqlStatement to work.\n-         *\n-         * @return the modified Builder instance\n-         */\n-        public Builder readSnapshotDataSqlStatement(Function<EventSchema, String> readSnapshotDataSqlStatement) {\n-            this.readSnapshotDataSqlStatement = readSnapshotDataSqlStatement;\n-            return this;\n-        }\n-\n-        /**\n-         * Set the SqlStatement to be used on {@link JdbcEventStorageEngine#readEventData(Connection, TrackingToken,\n-         * int)} when there is no gaps on the {@link GapAwareTrackingToken}. Defaults to:\n-         * <p/>\n-         * {@code \"SELECT [trackedEventFields] FROM [domainEventTable] WHERE ([globalIndexColumn] > ?1 AND\n-         * [globalIndexColumn] <= ?2) ORDER BY [globalIndexColumn] ASC\" }\n-         * <p/>\n-         * <b>NOTE:</b> \"?1\" is the globalIndex and \"?2\" is the batchSize parameters from {@link\n-         * JdbcEventStorageEngine#readEventData(Connection, TrackingToken, int)} and they should <b>always</b> be\n-         * present for the SqlStatement to work.\n-         *\n-         * @return the modified Builder instance\n-         */\n-        public Builder readEventDataWithoutGapsSqlStatement(\n-                Function<EventSchema, String> readEventDataWithoutGapsSqlStatement) {\n-            this.readEventDataWithoutGapsSqlStatement = readEventDataWithoutGapsSqlStatement;\n-            return this;\n-        }\n-\n-        /**\n-         * Set the SqlStatement to be used on {@link JdbcEventStorageEngine#readEventData(Connection, TrackingToken,\n-         * int)} when there are gaps on the {@link GapAwareTrackingToken}. Defaults to:\n-         * <p/>\n-         * {@code \"SELECT [trackedEventFields] FROM [domainEventTable] WHERE ([globalIndexColumn] > ?1 AND\n-         * [globalIndexColumn] <= ?2) OR [globalIndexColumn] IN (?3 .. ?n) ORDER BY [globalIndexColumn] ASC\" }\n-         * <p/>\n-         * <b>NOTE:</b> \"?1\" is the globalIndex and \"?2\" is the batchSize parameters from {@link\n-         * JdbcEventStorageEngine#readEventData(Connection, TrackingToken, int)}. \"?3 .. ?n\" is taken from the {@link\n-         * GapAwareTrackingToken#getGaps()} and they should <b>always</b> be present for the SqlStatement to work.\n-         *\n-         * @return the modified Builder instance\n-         */\n-        public Builder readEventDataWithGapsSqlStatement(\n-                BiFunction<EventSchema, Integer, String> readEventDataWithGapsSqlStatement) {\n-            this.readEventDataWithGapsSqlStatement = readEventDataWithGapsSqlStatement;\n-            return this;\n-        }\n-\n         /**\n          * Builds a new {@link EventSchema} from builder values.\n          *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUxMDEwMQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1321#discussion_r368510101", "bodyText": "Hmmm... This pretty tightly couples SQL string with the prepared statement in terms of parameters. I'd go with approach that schema creates the statement with given parameters (aggregateIdentifier, and sequenceNumber in this case). What do you think?", "author": "m1l4n54v1c", "createdAt": "2020-01-20T11:56:33Z", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/JdbcEventStorageEngine.java", "diffHunk": "@@ -301,15 +302,12 @@ protected PreparedStatement appendSnapshot(Connection connection, DomainEventMes\n      * @param connection          The connection to the database.\n      * @param aggregateIdentifier The identifier of the aggregate whose snapshots to delete.\n      * @return A {@link PreparedStatement} that deletes all the aggregate's snapshots when executed.\n-     *\n      * @throws SQLException when an exception occurs while creating the prepared statement.\n      */\n     protected PreparedStatement deleteSnapshots(Connection connection, String aggregateIdentifier, long sequenceNumber)\n             throws SQLException {\n-        PreparedStatement preparedStatement = connection.prepareStatement(\n-                \"DELETE FROM \" + schema.snapshotTable() + \" WHERE \" + schema.aggregateIdentifierColumn() + \" = ? \"\n-                        + \"AND \" + schema.sequenceNumberColumn() + \" < ?\"\n-        );\n+        final String sql = schema.deleteSnapshotsSqlStatement();\n+        PreparedStatement preparedStatement = connection.prepareStatement(sql);\n         preparedStatement.setString(1, aggregateIdentifier);", "originalCommit": "156c7f5c3664d09866831ab790cd2c7ed501981b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUzMTk5MQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1321#discussion_r369531991", "bodyText": "Changes are done as discussed.", "author": "lfgcampos", "createdAt": "2020-01-22T12:30:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUxMDEwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "9ffbff71547c5820730ada02f72211bb595852b1", "chunk": "diff --git a/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/JdbcEventStorageEngine.java b/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/JdbcEventStorageEngine.java\nindex 65b2833f9..c6d1803ae 100644\n--- a/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/JdbcEventStorageEngine.java\n+++ b/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/JdbcEventStorageEngine.java\n\n@@ -268,51 +442,6 @@ public TrackingToken createTokenAt(Instant dateTime) {\n         return GapAwareTrackingToken.newInstance(index, Collections.emptySet());\n     }\n \n-    /**\n-     * Creates a statement to append the given {@code snapshot} to the event storage using given {@code connection} to\n-     * the database. Use the given {@code serializer} to serialize the payload and metadata of the event.\n-     *\n-     * @param connection The connection to the database.\n-     * @param snapshot   The snapshot to append.\n-     * @param serializer The serializer that should be used when serializing the event's payload and metadata.\n-     * @return A {@link PreparedStatement} that appends the snapshot when executed.\n-     * @throws SQLException when an exception occurs while creating the prepared statement\n-     */\n-    protected PreparedStatement appendSnapshot(Connection connection, DomainEventMessage<?> snapshot,\n-                                               Serializer serializer) throws SQLException {\n-        SerializedObject<?> payload = snapshot.serializePayload(serializer, dataType);\n-        SerializedObject<?> metaData = snapshot.serializeMetaData(serializer, dataType);\n-        final String sql = schema.appendSnapshotSqlStatement();\n-        PreparedStatement preparedStatement = connection.prepareStatement(sql); // NOSONAR\n-        preparedStatement.setString(1, snapshot.getIdentifier());\n-        preparedStatement.setString(2, snapshot.getAggregateIdentifier());\n-        preparedStatement.setLong(3, snapshot.getSequenceNumber());\n-        preparedStatement.setString(4, snapshot.getType());\n-        writeTimestamp(preparedStatement, 5, snapshot.getTimestamp());\n-        preparedStatement.setString(6, payload.getType().getName());\n-        preparedStatement.setString(7, payload.getType().getRevision());\n-        preparedStatement.setObject(8, payload.getData());\n-        preparedStatement.setObject(9, metaData.getData());\n-        return preparedStatement;\n-    }\n-\n-    /**\n-     * Creates a statement to delete all snapshots of the aggregate with given {@code aggregateIdentifier}.\n-     *\n-     * @param connection          The connection to the database.\n-     * @param aggregateIdentifier The identifier of the aggregate whose snapshots to delete.\n-     * @return A {@link PreparedStatement} that deletes all the aggregate's snapshots when executed.\n-     * @throws SQLException when an exception occurs while creating the prepared statement.\n-     */\n-    protected PreparedStatement deleteSnapshots(Connection connection, String aggregateIdentifier, long sequenceNumber)\n-            throws SQLException {\n-        final String sql = schema.deleteSnapshotsSqlStatement();\n-        PreparedStatement preparedStatement = connection.prepareStatement(sql);\n-        preparedStatement.setString(1, aggregateIdentifier);\n-        preparedStatement.setLong(2, sequenceNumber);\n-        return preparedStatement;\n-    }\n-\n     @Override\n     protected List<? extends DomainEventData<?>> fetchDomainEvents(String aggregateIdentifier, long firstSequenceNumber,\n                                                                    int batchSize) {\n"}}, {"oid": "9ffbff71547c5820730ada02f72211bb595852b1", "url": "https://github.com/AxonFramework/AxonFramework/commit/9ffbff71547c5820730ada02f72211bb595852b1", "message": "Added a FunctionalInterface for building each Statement and made them part of the JdbcEventStorageEngine", "committedDate": "2020-01-22T12:26:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk5Mzk5OQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1321#discussion_r369993999", "bodyText": "I am missing the copyright statement which should be on top of this file.\nYou can add it to your Intellij env. by adding the copyright-template.xml file at the root folder of this project.", "author": "smcvb", "createdAt": "2020-01-23T08:54:57Z", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/AppendEventsStatementBuilder.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package org.axonframework.eventsourcing.eventstore.jdbc;", "originalCommit": "9ffbff71547c5820730ada02f72211bb595852b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "df9dcae9ac5560efd6cc8a4f751bd4038e881f24", "chunk": "diff --git a/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/AppendEventsStatementBuilder.java b/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/AppendEventsStatementBuilder.java\ndeleted file mode 100644\nindex f0524a7a0..000000000\n--- a/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/AppendEventsStatementBuilder.java\n+++ /dev/null\n\n@@ -1,16 +0,0 @@\n-package org.axonframework.eventsourcing.eventstore.jdbc;\n-\n-import org.axonframework.eventhandling.EventMessage;\n-import org.axonframework.serialization.Serializer;\n-\n-import java.sql.Connection;\n-import java.sql.PreparedStatement;\n-import java.sql.SQLException;\n-import java.util.List;\n-\n-@FunctionalInterface\n-public interface AppendEventsStatementBuilder {\n-\n-    PreparedStatement apply(Connection connection, List<? extends EventMessage<?>> events, Serializer serializer)\n-            throws SQLException;\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk5NDIxMQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1321#discussion_r369994211", "bodyText": "This interface will require javadoc, as it's public code. Thus both on class level (with author and since tag) as well as the apply method.", "author": "smcvb", "createdAt": "2020-01-23T08:55:26Z", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/AppendEventsStatementBuilder.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package org.axonframework.eventsourcing.eventstore.jdbc;\n+\n+import org.axonframework.eventhandling.EventMessage;\n+import org.axonframework.serialization.Serializer;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.util.List;\n+\n+@FunctionalInterface", "originalCommit": "9ffbff71547c5820730ada02f72211bb595852b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "df9dcae9ac5560efd6cc8a4f751bd4038e881f24", "chunk": "diff --git a/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/AppendEventsStatementBuilder.java b/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/AppendEventsStatementBuilder.java\ndeleted file mode 100644\nindex f0524a7a0..000000000\n--- a/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/AppendEventsStatementBuilder.java\n+++ /dev/null\n\n@@ -1,16 +0,0 @@\n-package org.axonframework.eventsourcing.eventstore.jdbc;\n-\n-import org.axonframework.eventhandling.EventMessage;\n-import org.axonframework.serialization.Serializer;\n-\n-import java.sql.Connection;\n-import java.sql.PreparedStatement;\n-import java.sql.SQLException;\n-import java.util.List;\n-\n-@FunctionalInterface\n-public interface AppendEventsStatementBuilder {\n-\n-    PreparedStatement apply(Connection connection, List<? extends EventMessage<?>> events, Serializer serializer)\n-            throws SQLException;\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk5NDU4NQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1321#discussion_r369994585", "bodyText": "What about we move these files to org.axonframework.eventsourcing.eventstore.jdbc.statements? Or at least a dedicated package.", "author": "smcvb", "createdAt": "2020-01-23T08:56:19Z", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/AppendSnapshotStatementBuilder.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package org.axonframework.eventsourcing.eventstore.jdbc;", "originalCommit": "9ffbff71547c5820730ada02f72211bb595852b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "df9dcae9ac5560efd6cc8a4f751bd4038e881f24", "chunk": "diff --git a/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/AppendSnapshotStatementBuilder.java b/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/AppendSnapshotStatementBuilder.java\ndeleted file mode 100644\nindex 4d5ec90eb..000000000\n--- a/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/AppendSnapshotStatementBuilder.java\n+++ /dev/null\n\n@@ -1,15 +0,0 @@\n-package org.axonframework.eventsourcing.eventstore.jdbc;\n-\n-import org.axonframework.eventhandling.DomainEventMessage;\n-import org.axonframework.serialization.Serializer;\n-\n-import java.sql.Connection;\n-import java.sql.PreparedStatement;\n-import java.sql.SQLException;\n-\n-@FunctionalInterface\n-public interface AppendSnapshotStatementBuilder {\n-\n-    PreparedStatement apply(Connection connection, DomainEventMessage<?> snapshot,\n-                            Serializer serializer) throws SQLException;\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk5NTEyNw==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1321#discussion_r369995127", "bodyText": "Same copyright and javadoc remarks as with the previous file", "author": "smcvb", "createdAt": "2020-01-23T08:57:37Z", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/AppendSnapshotStatementBuilder.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package org.axonframework.eventsourcing.eventstore.jdbc;", "originalCommit": "9ffbff71547c5820730ada02f72211bb595852b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "df9dcae9ac5560efd6cc8a4f751bd4038e881f24", "chunk": "diff --git a/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/AppendSnapshotStatementBuilder.java b/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/AppendSnapshotStatementBuilder.java\ndeleted file mode 100644\nindex 4d5ec90eb..000000000\n--- a/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/AppendSnapshotStatementBuilder.java\n+++ /dev/null\n\n@@ -1,15 +0,0 @@\n-package org.axonframework.eventsourcing.eventstore.jdbc;\n-\n-import org.axonframework.eventhandling.DomainEventMessage;\n-import org.axonframework.serialization.Serializer;\n-\n-import java.sql.Connection;\n-import java.sql.PreparedStatement;\n-import java.sql.SQLException;\n-\n-@FunctionalInterface\n-public interface AppendSnapshotStatementBuilder {\n-\n-    PreparedStatement apply(Connection connection, DomainEventMessage<?> snapshot,\n-                            Serializer serializer) throws SQLException;\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk5NTI3OQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1321#discussion_r369995279", "bodyText": "Same copyright, javadoc and packaging remarks as with the previous file", "author": "smcvb", "createdAt": "2020-01-23T08:57:56Z", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/CleanGapsStatementBuilder.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package org.axonframework.eventsourcing.eventstore.jdbc;", "originalCommit": "9ffbff71547c5820730ada02f72211bb595852b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "df9dcae9ac5560efd6cc8a4f751bd4038e881f24", "chunk": "diff --git a/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/CleanGapsStatementBuilder.java b/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/CleanGapsStatementBuilder.java\ndeleted file mode 100644\nindex 6b8b9d895..000000000\n--- a/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/CleanGapsStatementBuilder.java\n+++ /dev/null\n\n@@ -1,12 +0,0 @@\n-package org.axonframework.eventsourcing.eventstore.jdbc;\n-\n-import java.sql.Connection;\n-import java.sql.PreparedStatement;\n-import java.sql.SQLException;\n-import java.util.SortedSet;\n-\n-@FunctionalInterface\n-public interface CleanGapsStatementBuilder {\n-\n-    PreparedStatement apply(Connection connection, SortedSet<Long> gaps) throws SQLException;\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk5NTMzOQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1321#discussion_r369995339", "bodyText": "Same copyright, javadoc and packaging remarks as with the previous file", "author": "smcvb", "createdAt": "2020-01-23T08:58:03Z", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/CreateHeadTokenStatementBuilder.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package org.axonframework.eventsourcing.eventstore.jdbc;", "originalCommit": "9ffbff71547c5820730ada02f72211bb595852b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "df9dcae9ac5560efd6cc8a4f751bd4038e881f24", "chunk": "diff --git a/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/CreateHeadTokenStatementBuilder.java b/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/CreateHeadTokenStatementBuilder.java\ndeleted file mode 100644\nindex a622bca2d..000000000\n--- a/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/CreateHeadTokenStatementBuilder.java\n+++ /dev/null\n\n@@ -1,11 +0,0 @@\n-package org.axonframework.eventsourcing.eventstore.jdbc;\n-\n-import java.sql.Connection;\n-import java.sql.PreparedStatement;\n-import java.sql.SQLException;\n-\n-@FunctionalInterface\n-public interface CreateHeadTokenStatementBuilder {\n-\n-    PreparedStatement apply(Connection connection) throws SQLException;\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk5NTQwNA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1321#discussion_r369995404", "bodyText": "Same copyright, javadoc and packaging remarks as with the previous file", "author": "smcvb", "createdAt": "2020-01-23T08:58:10Z", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/CreateTailTokenStatementBuilder.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package org.axonframework.eventsourcing.eventstore.jdbc;", "originalCommit": "9ffbff71547c5820730ada02f72211bb595852b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "df9dcae9ac5560efd6cc8a4f751bd4038e881f24", "chunk": "diff --git a/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/CreateTailTokenStatementBuilder.java b/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/CreateTailTokenStatementBuilder.java\ndeleted file mode 100644\nindex 172ef8910..000000000\n--- a/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/CreateTailTokenStatementBuilder.java\n+++ /dev/null\n\n@@ -1,11 +0,0 @@\n-package org.axonframework.eventsourcing.eventstore.jdbc;\n-\n-import java.sql.Connection;\n-import java.sql.PreparedStatement;\n-import java.sql.SQLException;\n-\n-@FunctionalInterface\n-public interface CreateTailTokenStatementBuilder {\n-\n-    PreparedStatement apply(Connection connection) throws SQLException;\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk5NTQ5NA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1321#discussion_r369995494", "bodyText": "Same copyright, javadoc and packaging remarks as with the previous file", "author": "smcvb", "createdAt": "2020-01-23T08:58:19Z", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/CreateTokenAtStatementBuilder.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package org.axonframework.eventsourcing.eventstore.jdbc;", "originalCommit": "9ffbff71547c5820730ada02f72211bb595852b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "df9dcae9ac5560efd6cc8a4f751bd4038e881f24", "chunk": "diff --git a/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/CreateTokenAtStatementBuilder.java b/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/CreateTokenAtStatementBuilder.java\ndeleted file mode 100644\nindex c31ae52fd..000000000\n--- a/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/CreateTokenAtStatementBuilder.java\n+++ /dev/null\n\n@@ -1,12 +0,0 @@\n-package org.axonframework.eventsourcing.eventstore.jdbc;\n-\n-import java.sql.Connection;\n-import java.sql.PreparedStatement;\n-import java.sql.SQLException;\n-import java.time.Instant;\n-\n-@FunctionalInterface\n-public interface CreateTokenAtStatementBuilder {\n-\n-    PreparedStatement apply(Connection connection, Instant datetime) throws SQLException;\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk5NTU0OA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1321#discussion_r369995548", "bodyText": "Same copyright, javadoc and packaging remarks as with the previous file", "author": "smcvb", "createdAt": "2020-01-23T08:58:27Z", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/DeleteSnapshotsStatementBuilder.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package org.axonframework.eventsourcing.eventstore.jdbc;", "originalCommit": "9ffbff71547c5820730ada02f72211bb595852b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "df9dcae9ac5560efd6cc8a4f751bd4038e881f24", "chunk": "diff --git a/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/DeleteSnapshotsStatementBuilder.java b/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/DeleteSnapshotsStatementBuilder.java\ndeleted file mode 100644\nindex 0b1ecfe57..000000000\n--- a/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/DeleteSnapshotsStatementBuilder.java\n+++ /dev/null\n\n@@ -1,11 +0,0 @@\n-package org.axonframework.eventsourcing.eventstore.jdbc;\n-\n-import java.sql.Connection;\n-import java.sql.PreparedStatement;\n-import java.sql.SQLException;\n-\n-@FunctionalInterface\n-public interface DeleteSnapshotsStatementBuilder {\n-\n-    PreparedStatement apply(Connection connection, String aggregateIdentifier, long sequenceNumber) throws SQLException;\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDAyNTAzNg==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1321#discussion_r370025036", "bodyText": "Same copyright, javadoc and packaging remarks as with the previous file", "author": "smcvb", "createdAt": "2020-01-23T10:00:02Z", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/FetchTrackedEventsStatementBuilder.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package org.axonframework.eventsourcing.eventstore.jdbc;", "originalCommit": "9ffbff71547c5820730ada02f72211bb595852b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "df9dcae9ac5560efd6cc8a4f751bd4038e881f24", "chunk": "diff --git a/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/FetchTrackedEventsStatementBuilder.java b/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/FetchTrackedEventsStatementBuilder.java\ndeleted file mode 100644\nindex 10ac68c1f..000000000\n--- a/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/FetchTrackedEventsStatementBuilder.java\n+++ /dev/null\n\n@@ -1,11 +0,0 @@\n-package org.axonframework.eventsourcing.eventstore.jdbc;\n-\n-import java.sql.Connection;\n-import java.sql.PreparedStatement;\n-import java.sql.SQLException;\n-\n-@FunctionalInterface\n-public interface FetchTrackedEventsStatementBuilder {\n-\n-    PreparedStatement apply(Connection connection, long index) throws SQLException;\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDAyNTA5NA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1321#discussion_r370025094", "bodyText": "Same copyright, javadoc and packaging remarks as with the previous file", "author": "smcvb", "createdAt": "2020-01-23T10:00:07Z", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/LastSequenceNumberForStatementBuilder.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package org.axonframework.eventsourcing.eventstore.jdbc;", "originalCommit": "9ffbff71547c5820730ada02f72211bb595852b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "df9dcae9ac5560efd6cc8a4f751bd4038e881f24", "chunk": "diff --git a/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/LastSequenceNumberForStatementBuilder.java b/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/LastSequenceNumberForStatementBuilder.java\ndeleted file mode 100644\nindex ffca24cfc..000000000\n--- a/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/LastSequenceNumberForStatementBuilder.java\n+++ /dev/null\n\n@@ -1,11 +0,0 @@\n-package org.axonframework.eventsourcing.eventstore.jdbc;\n-\n-import java.sql.Connection;\n-import java.sql.PreparedStatement;\n-import java.sql.SQLException;\n-\n-@FunctionalInterface\n-public interface LastSequenceNumberForStatementBuilder {\n-\n-    PreparedStatement apply(Connection connection, String aggregateIdentifier) throws SQLException;\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDAyNTEzNQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1321#discussion_r370025135", "bodyText": "Same copyright, javadoc and packaging remarks as with the previous file", "author": "smcvb", "createdAt": "2020-01-23T10:00:12Z", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/ReadEventDataForAggregateStatementBuilder.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package org.axonframework.eventsourcing.eventstore.jdbc;", "originalCommit": "9ffbff71547c5820730ada02f72211bb595852b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "df9dcae9ac5560efd6cc8a4f751bd4038e881f24", "chunk": "diff --git a/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/ReadEventDataForAggregateStatementBuilder.java b/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/ReadEventDataForAggregateStatementBuilder.java\ndeleted file mode 100644\nindex 8ff9f895f..000000000\n--- a/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/ReadEventDataForAggregateStatementBuilder.java\n+++ /dev/null\n\n@@ -1,12 +0,0 @@\n-package org.axonframework.eventsourcing.eventstore.jdbc;\n-\n-import java.sql.Connection;\n-import java.sql.PreparedStatement;\n-import java.sql.SQLException;\n-\n-@FunctionalInterface\n-public interface ReadEventDataForAggregateStatementBuilder {\n-\n-    PreparedStatement apply(Connection connection, String identifier, long firstSequenceNumber, int batchSize)\n-            throws SQLException;\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDAyNTIwOA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1321#discussion_r370025208", "bodyText": "Same copyright, javadoc and packaging remarks as with the previous file", "author": "smcvb", "createdAt": "2020-01-23T10:00:21Z", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/ReadEventDataWithGapsStatementBuilder.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package org.axonframework.eventsourcing.eventstore.jdbc;", "originalCommit": "9ffbff71547c5820730ada02f72211bb595852b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "df9dcae9ac5560efd6cc8a4f751bd4038e881f24", "chunk": "diff --git a/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/ReadEventDataWithGapsStatementBuilder.java b/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/ReadEventDataWithGapsStatementBuilder.java\ndeleted file mode 100644\nindex c3856c966..000000000\n--- a/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/ReadEventDataWithGapsStatementBuilder.java\n+++ /dev/null\n\n@@ -1,13 +0,0 @@\n-package org.axonframework.eventsourcing.eventstore.jdbc;\n-\n-import java.sql.Connection;\n-import java.sql.PreparedStatement;\n-import java.sql.SQLException;\n-import java.util.List;\n-\n-@FunctionalInterface\n-public interface ReadEventDataWithGapsStatementBuilder {\n-\n-    PreparedStatement apply(Connection connection, long globalIndex, int batchSize, List<Long> gaps)\n-            throws SQLException;\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDAyNTI3OA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1321#discussion_r370025278", "bodyText": "Same copyright, javadoc and packaging remarks as with the previous file", "author": "smcvb", "createdAt": "2020-01-23T10:00:29Z", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/ReadSnapshotDataStatementBuilder.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package org.axonframework.eventsourcing.eventstore.jdbc;", "originalCommit": "9ffbff71547c5820730ada02f72211bb595852b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "df9dcae9ac5560efd6cc8a4f751bd4038e881f24", "chunk": "diff --git a/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/ReadSnapshotDataStatementBuilder.java b/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/ReadSnapshotDataStatementBuilder.java\ndeleted file mode 100644\nindex d924a254a..000000000\n--- a/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/ReadSnapshotDataStatementBuilder.java\n+++ /dev/null\n\n@@ -1,11 +0,0 @@\n-package org.axonframework.eventsourcing.eventstore.jdbc;\n-\n-import java.sql.Connection;\n-import java.sql.PreparedStatement;\n-import java.sql.SQLException;\n-\n-@FunctionalInterface\n-public interface ReadSnapshotDataStatementBuilder {\n-\n-    PreparedStatement apply(Connection connection, String identifier) throws SQLException;\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDAyNTMyMw==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1321#discussion_r370025323", "bodyText": "Same copyright, javadoc and packaging remarks as with the previous file", "author": "smcvb", "createdAt": "2020-01-23T10:00:35Z", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/ReadEventDataWithoutGapsStatementBuilder.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package org.axonframework.eventsourcing.eventstore.jdbc;", "originalCommit": "9ffbff71547c5820730ada02f72211bb595852b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "df9dcae9ac5560efd6cc8a4f751bd4038e881f24", "chunk": "diff --git a/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/ReadEventDataWithoutGapsStatementBuilder.java b/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/ReadEventDataWithoutGapsStatementBuilder.java\ndeleted file mode 100644\nindex a3cd065d6..000000000\n--- a/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/ReadEventDataWithoutGapsStatementBuilder.java\n+++ /dev/null\n\n@@ -1,11 +0,0 @@\n-package org.axonframework.eventsourcing.eventstore.jdbc;\n-\n-import java.sql.Connection;\n-import java.sql.PreparedStatement;\n-import java.sql.SQLException;\n-\n-@FunctionalInterface\n-public interface ReadEventDataWithoutGapsStatementBuilder {\n-\n-    PreparedStatement apply(Connection connection, long globalIndex, int batchSize) throws SQLException;\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDAzMzQ0NQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1321#discussion_r370033445", "bodyText": "As just discussed, it would be cleaner to move these lambdas to a utility class as static functions.", "author": "smcvb", "createdAt": "2020-01-23T10:16:46Z", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/JdbcEventStorageEngine.java", "diffHunk": "@@ -764,6 +835,356 @@ public void setGapCleaningThreshold(int gapCleaningThreshold) {\n         private int gapCleaningThreshold = DEFAULT_GAP_CLEANING_THRESHOLD;\n         private boolean extendedGapCheckEnabled = DEFAULT_EXTENDED_GAP_CHECK_ENABLED;\n \n+        private CreateTokenAtStatementBuilder createTokenAt = (connection, dateTime) -> {", "originalCommit": "9ffbff71547c5820730ada02f72211bb595852b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEzMjMwOQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1321#discussion_r370132309", "bodyText": "As agreed, all the lambdas are now on a utility class.", "author": "lfgcampos", "createdAt": "2020-01-23T13:59:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDAzMzQ0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "2e1ec284e1467aa75ccc8d00a36509e2b110d812", "chunk": "diff --git a/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/JdbcEventStorageEngine.java b/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/JdbcEventStorageEngine.java\nindex c6d1803ae..bfd2aa16e 100644\n--- a/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/JdbcEventStorageEngine.java\n+++ b/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/JdbcEventStorageEngine.java\n\n@@ -835,160 +876,23 @@ public void setGapCleaningThreshold(int gapCleaningThreshold) {\n         private int gapCleaningThreshold = DEFAULT_GAP_CLEANING_THRESHOLD;\n         private boolean extendedGapCheckEnabled = DEFAULT_EXTENDED_GAP_CHECK_ENABLED;\n \n-        private CreateTokenAtStatementBuilder createTokenAt = (connection, dateTime) -> {\n-            final String sql =\n-                    \"SELECT min(\" + schema.globalIndexColumn() + \") - 1 FROM \" + schema.domainEventTable() + \" WHERE \"\n-                            + schema.timestampColumn() + \" >= ?\";\n-            PreparedStatement statement = connection.prepareStatement(sql);\n-            statement.setString(1, formatInstant(dateTime));\n-            return statement;\n-        };\n-\n-        private AppendEventsStatementBuilder appendEvents = (connection, events, serializer) -> {\n-            final String sql = \"INSERT INTO \" + schema.domainEventTable() + \" (\" + schema.domainEventFields()\n-                    + \") VALUES (?,?,?,?,?,?,?,?,?)\";\n-            PreparedStatement statement = connection.prepareStatement(sql);\n-            for (EventMessage eventMessage : events) {\n-                DomainEventMessage<?> event = asDomainEventMessage(eventMessage);\n-                SerializedObject<?> payload = event.serializePayload(serializer, dataType);\n-                SerializedObject<?> metaData = event.serializeMetaData(serializer, dataType);\n-                statement.setString(1, event.getIdentifier());\n-                statement.setString(2, event.getAggregateIdentifier());\n-                statement.setLong(3, event.getSequenceNumber());\n-                statement.setString(4, event.getType());\n-                statement.setString(5, formatInstant(event.getTimestamp()));\n-                statement.setString(6, payload.getType().getName());\n-                statement.setString(7, payload.getType().getRevision());\n-                statement.setObject(8, payload.getData());\n-                statement.setObject(9, metaData.getData());\n-                statement.addBatch();\n-            }\n-            return statement;\n-        };\n-\n-        private LastSequenceNumberForStatementBuilder lastSequenceNumberFor = (connection, aggregateIdentifier) -> {\n-            final String sql = \"SELECT max(\"\n-                    + schema.sequenceNumberColumn() + \") FROM \" + schema.domainEventTable() + \" WHERE \"\n-                    + schema.aggregateIdentifierColumn() + \" = ?\";\n-            PreparedStatement statement = connection.prepareStatement(sql);\n-            statement.setString(1, aggregateIdentifier);\n-            return statement;\n-        };\n-\n-        private CreateTailTokenStatementBuilder createTailToken = connection -> {\n-            final String sql = \"SELECT min(\" + schema.globalIndexColumn() + \") - 1 FROM \" + schema.domainEventTable();\n-            return connection.prepareStatement(sql);\n-        };\n-\n-        private CreateHeadTokenStatementBuilder createHeadToken = connection -> {\n-            final String sql = \"SELECT max(\" + schema.globalIndexColumn() + \") FROM \" + schema.domainEventTable();\n-            return connection.prepareStatement(sql);\n-        };\n-\n-        private AppendSnapshotStatementBuilder appendSnapshot = (connection, snapshot, serializer) -> {\n-            final String sql = \"INSERT INTO \"\n-                    + schema.snapshotTable() + \" (\" + schema.domainEventFields() + \") VALUES (?,?,?,?,?,?,?,?,?)\";\n-            PreparedStatement statement = connection.prepareStatement(sql);\n-            SerializedObject<?> payload = snapshot.serializePayload(serializer, dataType);\n-            SerializedObject<?> metaData = snapshot.serializeMetaData(serializer, dataType);\n-            statement.setString(1, snapshot.getIdentifier());\n-            statement.setString(2, snapshot.getAggregateIdentifier());\n-            statement.setLong(3, snapshot.getSequenceNumber());\n-            statement.setString(4, snapshot.getType());\n-            statement.setString(5, formatInstant(snapshot.getTimestamp()));\n-            statement.setString(6, payload.getType().getName());\n-            statement.setString(7, payload.getType().getRevision());\n-            statement.setObject(8, payload.getData());\n-            statement.setObject(9, metaData.getData());\n-            return statement;\n-        };\n-\n-        private DeleteSnapshotsStatementBuilder deleteSnapshots = (connection, aggregateIdentifier, sequenceNumber) -> {\n-            final String sql = \"DELETE FROM \" + schema.snapshotTable() + \" WHERE \" + schema.aggregateIdentifierColumn()\n-                    + \" = ? AND \" + schema.sequenceNumberColumn() + \" < ?\";\n-            PreparedStatement statement = connection.prepareStatement(sql);\n-            statement.setString(1, aggregateIdentifier);\n-            statement.setLong(2, sequenceNumber);\n-            return statement;\n-        };\n-\n-        private FetchTrackedEventsStatementBuilder fetchTrackedEvents = (connection, index) -> {\n-            final String sql =\n-                    \"SELECT min(\" + schema.globalIndexColumn() + \") FROM \" + schema.domainEventTable() + \" WHERE \"\n-                            + schema.globalIndexColumn() + \" > ?\";\n-            PreparedStatement statement = connection.prepareStatement(sql);\n-            statement.setLong(1, index);\n-            return statement;\n-        };\n-\n-        private CleanGapsStatementBuilder cleanGaps = (connection, gaps) -> {\n-            final String sql = \"SELECT \"\n-                    + schema.globalIndexColumn() + \", \" + schema.timestampColumn() + \" FROM \" + schema\n-                    .domainEventTable() + \" WHERE \" + schema.globalIndexColumn() + \" >= ? AND \" + schema\n-                    .globalIndexColumn() + \" <= ?\";\n-            PreparedStatement statement = connection.prepareStatement(sql);\n-            statement.setLong(1, gaps.first());\n-            statement.setLong(2, gaps.last() + 1L);\n-            return statement;\n-        };\n-\n-        private ReadEventDataForAggregateStatementBuilder readEventDataForAggregate = (connection, identifier, firstSequenceNumber, batchSize) -> {\n-            final String sql =\n-                    \"SELECT \" + schema.trackedEventFields() + \" FROM \" + schema.domainEventTable() + \" WHERE \" + schema\n-                            .aggregateIdentifierColumn() + \" = ? AND \" + schema.sequenceNumberColumn() + \" >= ? AND \"\n-                            + schema.sequenceNumberColumn() + \" < ? ORDER BY \"\n-                            + schema.sequenceNumberColumn() + \" ASC\";\n-            PreparedStatement statement = connection.prepareStatement(sql);\n-            statement.setString(1, identifier);\n-            statement.setLong(2, firstSequenceNumber);\n-            statement.setLong(3, firstSequenceNumber + batchSize);\n-            return statement;\n-        };\n-\n-        private ReadSnapshotDataStatementBuilder readSnapshotData = (connection, identifier) -> {\n-            final String sql = \"SELECT \"\n-                    + schema.domainEventFields() + \" FROM \" + schema.snapshotTable() + \" WHERE \"\n-                    + schema.aggregateIdentifierColumn() + \" = ? ORDER BY \" + schema.sequenceNumberColumn()\n-                    + \" DESC\";\n-            PreparedStatement statement = connection.prepareStatement(sql);\n-            statement.setString(1, identifier);\n-            return statement;\n-        };\n-\n-        private ReadEventDataWithoutGapsStatementBuilder readEventDataWithoutGaps = (connection, globalIndex, batchSize) -> {\n-            final String sql = \"SELECT \"\n-                    + schema.trackedEventFields() + \" FROM \" + schema.domainEventTable() + \" WHERE (\"\n-                    + schema.globalIndexColumn() + \" > ? AND \" + schema.globalIndexColumn()\n-                    + \" <= ?) ORDER BY \" + schema.globalIndexColumn() + \" ASC\";\n-            PreparedStatement statement = connection.prepareStatement(sql);\n-            statement.setLong(1, globalIndex);\n-            statement.setLong(2, globalIndex + batchSize);\n-            return statement;\n-        };\n-\n-        private ReadEventDataWithGapsStatementBuilder readEventDataWithGaps = (connection, globalIndex, batchSize, gaps) -> {\n-            final Integer gapSize = gaps.size();\n-            final String sql =\n-                    \"SELECT \" + schema.trackedEventFields() + \" FROM \" + schema.domainEventTable() + \" WHERE (\"\n-                            + schema.globalIndexColumn() + \" > ? AND \" + schema.globalIndexColumn() + \" <= ?) OR \"\n-                            + schema.globalIndexColumn() + \" IN (\" + String.join(\",\", Collections.nCopies(gapSize, \"?\"))\n-                            + \") ORDER BY \" + schema.globalIndexColumn() + \" ASC\";\n-            PreparedStatement statement = connection.prepareStatement(sql);\n-            statement.setLong(1, globalIndex);\n-            statement.setLong(2, globalIndex + batchSize);\n-            for (int i = 0; i < gapSize; i++) {\n-                statement.setLong(i + 3, gaps.get(i));\n-            }\n-            return statement;\n-        };\n+        private CreateTokenAtStatementBuilder createTokenAt = JdbcEventStorageEngineStatements::createTokenAt;\n+        private AppendEventsStatementBuilder appendEvents = JdbcEventStorageEngineStatements::appendEvents;\n+        private LastSequenceNumberForStatementBuilder lastSequenceNumberFor = JdbcEventStorageEngineStatements::lastSequenceNumberFor;\n+        private CreateTailTokenStatementBuilder createTailToken = JdbcEventStorageEngineStatements::createTailToken;\n+        private CreateHeadTokenStatementBuilder createHeadToken = JdbcEventStorageEngineStatements::createHeadToken;\n+        private AppendSnapshotStatementBuilder appendSnapshot = JdbcEventStorageEngineStatements::appendSnapshot;\n+        private DeleteSnapshotsStatementBuilder deleteSnapshots = JdbcEventStorageEngineStatements::deleteSnapshots;\n+        private FetchTrackedEventsStatementBuilder fetchTrackedEvents = JdbcEventStorageEngineStatements::fetchTrackedEvents;\n+        private CleanGapsStatementBuilder cleanGaps = JdbcEventStorageEngineStatements::cleanGaps;\n+        private ReadEventDataForAggregateStatementBuilder readEventDataForAggregate = JdbcEventStorageEngineStatements::readEventDataForAggregate;\n+        private ReadSnapshotDataStatementBuilder readSnapshotData = JdbcEventStorageEngineStatements::readSnapshotData;\n+        private ReadEventDataWithoutGapsStatementBuilder readEventDataWithoutGaps = JdbcEventStorageEngineStatements::readEventDataWithoutGaps;\n+        private ReadEventDataWithGapsStatementBuilder readEventDataWithGaps = JdbcEventStorageEngineStatements::readEventDataWithGaps;\n \n         /**\n-         * Set the PreparedStatement to be used on {@link JdbcEventStorageEngine#createTokenAt}. Defaults to:\n-         * <p/>\n-         * {@code \"SELECT min([globalIndexColumn]) - 1 FROM [domainEventTable] WHERE [timestampColumn] >= ?\" }\n-         * <p/>\n-         * <b>NOTE:</b> \"?\" is the Instant parameter from {@link JdbcEventStorageEngine#createTokenAt} and should\n-         * <b>always</b> be present for the PreparedStatement to work.\n+         * Set the PreparedStatement to be used on {@link JdbcEventStorageEngine#createTokenAt}. Defaults to {@link\n+         * JdbcEventStorageEngineStatements#createTokenAt(Connection, EventSchema, Instant)}.\n          *\n          * @return the modified Builder instance\n          */\n"}}, {"oid": "df9dcae9ac5560efd6cc8a4f751bd4038e881f24", "url": "https://github.com/AxonFramework/AxonFramework/commit/df9dcae9ac5560efd6cc8a4f751bd4038e881f24", "message": "Moved the FunctionalInterfaces to a dedicated package, added javadoc and copyright", "committedDate": "2020-01-23T13:57:29Z", "type": "commit"}, {"oid": "2e1ec284e1467aa75ccc8d00a36509e2b110d812", "url": "https://github.com/AxonFramework/AxonFramework/commit/2e1ec284e1467aa75ccc8d00a36509e2b110d812", "message": "Replaced the lambdas by utility class functions and fixed/added javadocs", "committedDate": "2020-01-23T13:58:33Z", "type": "commit"}, {"oid": "21d06b6eb665a038754c04ac600797d94208960e", "url": "https://github.com/AxonFramework/AxonFramework/commit/21d06b6eb665a038754c04ac600797d94208960e", "message": "Removed not needed params on methods and adjusted javadoc", "committedDate": "2020-01-23T14:19:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUxMjM5OQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1321#discussion_r370512399", "bodyText": "Nit: this piece of documentation should link to the util class I think, not the result of the builder.", "author": "smcvb", "createdAt": "2020-01-24T08:12:35Z", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/JdbcEventStorageEngine.java", "diffHunk": "@@ -123,6 +174,19 @@ protected JdbcEventStorageEngine(Builder builder) {\n      * <li>The {@code gapTimeout} defaults to an integer of size {@code 60000} (1 minute).</li>\n      * <li>The {@code gapCleaningThreshold} defaults to an integer of size {@code 250}.</li>\n      * <li>The {@code extendedGapCheckEnabled} defaults to {@code true}.</li>\n+     * <li>The {@code createTokenAt} defaults to {@link Builder#createTokenAt}.</li>", "originalCommit": "21d06b6eb665a038754c04ac600797d94208960e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7815185b0e5953647ae486f9bff8fc648039a82b", "chunk": "diff --git a/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/JdbcEventStorageEngine.java b/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/JdbcEventStorageEngine.java\nindex 168eebcf5..7a01af047 100644\n--- a/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/JdbcEventStorageEngine.java\n+++ b/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/JdbcEventStorageEngine.java\n\n@@ -174,19 +174,19 @@ protected JdbcEventStorageEngine(Builder builder) {\n      * <li>The {@code gapTimeout} defaults to an integer of size {@code 60000} (1 minute).</li>\n      * <li>The {@code gapCleaningThreshold} defaults to an integer of size {@code 250}.</li>\n      * <li>The {@code extendedGapCheckEnabled} defaults to {@code true}.</li>\n-     * <li>The {@code createTokenAt} defaults to {@link Builder#createTokenAt}.</li>\n-     * <li>The {@code appendEvents} defaults to {@link Builder#appendEvents}.</li>\n-     * <li>The {@code lastSequenceNumberFor} defaults to {@link Builder#lastSequenceNumberFor}.</li>\n-     * <li>The {@code createTailToken} defaults to {@link Builder#createTailToken}.</li>\n-     * <li>The {@code createHeadToken} defaults to {@link Builder#createHeadToken}.</li>\n-     * <li>The {@code appendSnapshot} defaults to {@link Builder#appendSnapshot}.</li>\n-     * <li>The {@code deleteSnapshots} defaults to {@link Builder#deleteSnapshots}.</li>\n-     * <li>The {@code fetchTrackedEvents} defaults to {@link Builder#fetchTrackedEvents}.</li>\n-     * <li>The {@code cleanGaps} defaults to {@link Builder#cleanGaps}.</li>\n-     * <li>The {@code readEventDataForAggregate} defaults to {@link Builder#readEventDataForAggregate}.</li>\n-     * <li>The {@code readSnapshotData} defaults to {@link Builder#readSnapshotData}.</li>\n-     * <li>The {@code readEventDataWithoutGaps} defaults to {@link Builder#readEventDataWithoutGaps}.</li>\n-     * <li>The {@code readEventDataWithGaps} defaults to {@link Builder#readEventDataWithGaps}.</li>\n+     * <li>The {@code createTokenAt} defaults to {@link JdbcEventStorageEngineStatements#createTokenAt}.</li>\n+     * <li>The {@code appendEvents} defaults to {@link JdbcEventStorageEngineStatements#appendEvents}.</li>\n+     * <li>The {@code lastSequenceNumberFor} defaults to {@link JdbcEventStorageEngineStatements#lastSequenceNumberFor}.</li>\n+     * <li>The {@code createTailToken} defaults to {@link JdbcEventStorageEngineStatements#createTailToken}.</li>\n+     * <li>The {@code createHeadToken} defaults to {@link JdbcEventStorageEngineStatements#createHeadToken}.</li>\n+     * <li>The {@code appendSnapshot} defaults to {@link JdbcEventStorageEngineStatements#appendSnapshot}.</li>\n+     * <li>The {@code deleteSnapshots} defaults to {@link JdbcEventStorageEngineStatements#deleteSnapshots}.</li>\n+     * <li>The {@code fetchTrackedEvents} defaults to {@link JdbcEventStorageEngineStatements#fetchTrackedEvents}.</li>\n+     * <li>The {@code cleanGaps} defaults to {@link JdbcEventStorageEngineStatements#cleanGaps}.</li>\n+     * <li>The {@code readEventDataForAggregate} defaults to {@link JdbcEventStorageEngineStatements#readEventDataForAggregate}.</li>\n+     * <li>The {@code readSnapshotData} defaults to {@link JdbcEventStorageEngineStatements#readSnapshotData}.</li>\n+     * <li>The {@code readEventDataWithoutGaps} defaults to {@link JdbcEventStorageEngineStatements#readEventDataWithoutGaps}.</li>\n+     * <li>The {@code readEventDataWithGaps} defaults to {@link JdbcEventStorageEngineStatements#readEventDataWithGaps}.</li>\n      * </ul>\n      * <p>\n      * The {@link ConnectionProvider} and {@link TransactionManager} are <b>hard requirements</b> and as such should\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUxMzg1NA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1321#discussion_r370513854", "bodyText": "Nit: At the moment, the defaults of a Builder are not only defined on the builder() method, but also on class level of the Builder class.", "author": "smcvb", "createdAt": "2020-01-24T08:17:19Z", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/JdbcEventStorageEngine.java", "diffHunk": "@@ -764,6 +851,170 @@ public void setGapCleaningThreshold(int gapCleaningThreshold) {\n         private int gapCleaningThreshold = DEFAULT_GAP_CLEANING_THRESHOLD;", "originalCommit": "21d06b6eb665a038754c04ac600797d94208960e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7815185b0e5953647ae486f9bff8fc648039a82b", "chunk": "diff --git a/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/JdbcEventStorageEngine.java b/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/JdbcEventStorageEngine.java\nindex 168eebcf5..7a01af047 100644\n--- a/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/JdbcEventStorageEngine.java\n+++ b/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/JdbcEventStorageEngine.java\n\n@@ -869,9 +882,10 @@ public void setGapCleaningThreshold(int gapCleaningThreshold) {\n          * Set the PreparedStatement to be used on {@link JdbcEventStorageEngine#createTokenAt}. Defaults to {@link\n          * JdbcEventStorageEngineStatements#createTokenAt(Connection, EventSchema, Instant)}.\n          *\n-         * @return the modified Builder instance\n+         * @return the current Builder instance, for fluent interfacing\n          */\n         public Builder createTokenAt(CreateTokenAtStatementBuilder createTokenAt) {\n+            assertNonNull(createTokenAt, \"createTokenAt may not be null\");\n             this.createTokenAt = createTokenAt;\n             return this;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUxNDQwMA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1321#discussion_r370514400", "bodyText": "Doing a BuilderUtils#assertNonNull calls for every statement builder  would be a clean safe guard on these methods I think.", "author": "smcvb", "createdAt": "2020-01-24T08:19:08Z", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/JdbcEventStorageEngine.java", "diffHunk": "@@ -764,6 +851,170 @@ public void setGapCleaningThreshold(int gapCleaningThreshold) {\n         private int gapCleaningThreshold = DEFAULT_GAP_CLEANING_THRESHOLD;\n         private boolean extendedGapCheckEnabled = DEFAULT_EXTENDED_GAP_CHECK_ENABLED;\n \n+        private CreateTokenAtStatementBuilder createTokenAt = JdbcEventStorageEngineStatements::createTokenAt;\n+        private AppendEventsStatementBuilder appendEvents = JdbcEventStorageEngineStatements::appendEvents;\n+        private LastSequenceNumberForStatementBuilder lastSequenceNumberFor = JdbcEventStorageEngineStatements::lastSequenceNumberFor;\n+        private CreateTailTokenStatementBuilder createTailToken = JdbcEventStorageEngineStatements::createTailToken;\n+        private CreateHeadTokenStatementBuilder createHeadToken = JdbcEventStorageEngineStatements::createHeadToken;\n+        private AppendSnapshotStatementBuilder appendSnapshot = JdbcEventStorageEngineStatements::appendSnapshot;\n+        private DeleteSnapshotsStatementBuilder deleteSnapshots = JdbcEventStorageEngineStatements::deleteSnapshots;\n+        private FetchTrackedEventsStatementBuilder fetchTrackedEvents = JdbcEventStorageEngineStatements::fetchTrackedEvents;\n+        private CleanGapsStatementBuilder cleanGaps = JdbcEventStorageEngineStatements::cleanGaps;\n+        private ReadEventDataForAggregateStatementBuilder readEventDataForAggregate = JdbcEventStorageEngineStatements::readEventDataForAggregate;\n+        private ReadSnapshotDataStatementBuilder readSnapshotData = JdbcEventStorageEngineStatements::readSnapshotData;\n+        private ReadEventDataWithoutGapsStatementBuilder readEventDataWithoutGaps = JdbcEventStorageEngineStatements::readEventDataWithoutGaps;\n+        private ReadEventDataWithGapsStatementBuilder readEventDataWithGaps = JdbcEventStorageEngineStatements::readEventDataWithGaps;\n+\n+        /**\n+         * Set the PreparedStatement to be used on {@link JdbcEventStorageEngine#createTokenAt}. Defaults to {@link\n+         * JdbcEventStorageEngineStatements#createTokenAt(Connection, EventSchema, Instant)}.\n+         *\n+         * @return the modified Builder instance\n+         */\n+        public Builder createTokenAt(CreateTokenAtStatementBuilder createTokenAt) {\n+            this.createTokenAt = createTokenAt;", "originalCommit": "21d06b6eb665a038754c04ac600797d94208960e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7815185b0e5953647ae486f9bff8fc648039a82b", "chunk": "diff --git a/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/JdbcEventStorageEngine.java b/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/JdbcEventStorageEngine.java\nindex 168eebcf5..7a01af047 100644\n--- a/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/JdbcEventStorageEngine.java\n+++ b/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/JdbcEventStorageEngine.java\n\n@@ -869,9 +882,10 @@ public void setGapCleaningThreshold(int gapCleaningThreshold) {\n          * Set the PreparedStatement to be used on {@link JdbcEventStorageEngine#createTokenAt}. Defaults to {@link\n          * JdbcEventStorageEngineStatements#createTokenAt(Connection, EventSchema, Instant)}.\n          *\n-         * @return the modified Builder instance\n+         * @return the current Builder instance, for fluent interfacing\n          */\n         public Builder createTokenAt(CreateTokenAtStatementBuilder createTokenAt) {\n+            assertNonNull(createTokenAt, \"createTokenAt may not be null\");\n             this.createTokenAt = createTokenAt;\n             return this;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUxNDYwMw==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1321#discussion_r370514603", "bodyText": "Mega nit: the other builder methods in this Builder use @return the current Builder instance, for fluent interfacing as the javadoc return line. Minor thing, but I'd favor the consistency.", "author": "smcvb", "createdAt": "2020-01-24T08:19:56Z", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/JdbcEventStorageEngine.java", "diffHunk": "@@ -764,6 +851,170 @@ public void setGapCleaningThreshold(int gapCleaningThreshold) {\n         private int gapCleaningThreshold = DEFAULT_GAP_CLEANING_THRESHOLD;\n         private boolean extendedGapCheckEnabled = DEFAULT_EXTENDED_GAP_CHECK_ENABLED;\n \n+        private CreateTokenAtStatementBuilder createTokenAt = JdbcEventStorageEngineStatements::createTokenAt;\n+        private AppendEventsStatementBuilder appendEvents = JdbcEventStorageEngineStatements::appendEvents;\n+        private LastSequenceNumberForStatementBuilder lastSequenceNumberFor = JdbcEventStorageEngineStatements::lastSequenceNumberFor;\n+        private CreateTailTokenStatementBuilder createTailToken = JdbcEventStorageEngineStatements::createTailToken;\n+        private CreateHeadTokenStatementBuilder createHeadToken = JdbcEventStorageEngineStatements::createHeadToken;\n+        private AppendSnapshotStatementBuilder appendSnapshot = JdbcEventStorageEngineStatements::appendSnapshot;\n+        private DeleteSnapshotsStatementBuilder deleteSnapshots = JdbcEventStorageEngineStatements::deleteSnapshots;\n+        private FetchTrackedEventsStatementBuilder fetchTrackedEvents = JdbcEventStorageEngineStatements::fetchTrackedEvents;\n+        private CleanGapsStatementBuilder cleanGaps = JdbcEventStorageEngineStatements::cleanGaps;\n+        private ReadEventDataForAggregateStatementBuilder readEventDataForAggregate = JdbcEventStorageEngineStatements::readEventDataForAggregate;\n+        private ReadSnapshotDataStatementBuilder readSnapshotData = JdbcEventStorageEngineStatements::readSnapshotData;\n+        private ReadEventDataWithoutGapsStatementBuilder readEventDataWithoutGaps = JdbcEventStorageEngineStatements::readEventDataWithoutGaps;\n+        private ReadEventDataWithGapsStatementBuilder readEventDataWithGaps = JdbcEventStorageEngineStatements::readEventDataWithGaps;\n+\n+        /**\n+         * Set the PreparedStatement to be used on {@link JdbcEventStorageEngine#createTokenAt}. Defaults to {@link\n+         * JdbcEventStorageEngineStatements#createTokenAt(Connection, EventSchema, Instant)}.\n+         *\n+         * @return the modified Builder instance", "originalCommit": "21d06b6eb665a038754c04ac600797d94208960e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7815185b0e5953647ae486f9bff8fc648039a82b", "chunk": "diff --git a/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/JdbcEventStorageEngine.java b/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/JdbcEventStorageEngine.java\nindex 168eebcf5..7a01af047 100644\n--- a/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/JdbcEventStorageEngine.java\n+++ b/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/JdbcEventStorageEngine.java\n\n@@ -869,9 +882,10 @@ public void setGapCleaningThreshold(int gapCleaningThreshold) {\n          * Set the PreparedStatement to be used on {@link JdbcEventStorageEngine#createTokenAt}. Defaults to {@link\n          * JdbcEventStorageEngineStatements#createTokenAt(Connection, EventSchema, Instant)}.\n          *\n-         * @return the modified Builder instance\n+         * @return the current Builder instance, for fluent interfacing\n          */\n         public Builder createTokenAt(CreateTokenAtStatementBuilder createTokenAt) {\n+            assertNonNull(createTokenAt, \"createTokenAt may not be null\");\n             this.createTokenAt = createTokenAt;\n             return this;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUxNTQyNQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1321#discussion_r370515425", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Class which holds the defaults PreparedStatement for use on {@link JdbcEventStorageEngine}.\n          \n          \n            \n             * Class which holds the default {@link PreparedStatement} builder methods for use in the {@link JdbcEventStorageEngine}.", "author": "smcvb", "createdAt": "2020-01-24T08:22:28Z", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/statements/JdbcEventStorageEngineStatements.java", "diffHunk": "@@ -0,0 +1,414 @@\n+/*\n+ * Copyright (c) 2010-2020. Axon Framework\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.axonframework.eventsourcing.eventstore.jdbc.statements;\n+\n+import org.axonframework.eventhandling.DomainEventMessage;\n+import org.axonframework.eventhandling.EventMessage;\n+import org.axonframework.eventhandling.GapAwareTrackingToken;\n+import org.axonframework.eventhandling.TrackingToken;\n+import org.axonframework.eventsourcing.eventstore.jdbc.EventSchema;\n+import org.axonframework.eventsourcing.eventstore.jdbc.JdbcEventStorageEngine;\n+import org.axonframework.serialization.SerializedObject;\n+import org.axonframework.serialization.Serializer;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.time.Instant;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.SortedSet;\n+\n+import static org.axonframework.common.DateTimeUtils.formatInstant;\n+import static org.axonframework.eventhandling.EventUtils.asDomainEventMessage;\n+\n+/**\n+ * Class which holds the defaults PreparedStatement for use on {@link JdbcEventStorageEngine}.", "originalCommit": "21d06b6eb665a038754c04ac600797d94208960e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7815185b0e5953647ae486f9bff8fc648039a82b", "chunk": "diff --git a/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/statements/JdbcEventStorageEngineStatements.java b/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/statements/JdbcEventStorageEngineStatements.java\nindex 460401243..01ed031bb 100644\n--- a/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/statements/JdbcEventStorageEngineStatements.java\n+++ b/eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/statements/JdbcEventStorageEngineStatements.java\n\n@@ -37,7 +37,8 @@\n import static org.axonframework.eventhandling.EventUtils.asDomainEventMessage;\n \n /**\n- * Class which holds the defaults PreparedStatement for use on {@link JdbcEventStorageEngine}.\n+ * Class which holds the default {@link PreparedStatement} builder methods for use in the {@link\n+ * JdbcEventStorageEngine}.\n  *\n  * @author Lucas Campos\n  * @since 4.3\n"}}, {"oid": "7815185b0e5953647ae486f9bff8fc648039a82b", "url": "https://github.com/AxonFramework/AxonFramework/commit/7815185b0e5953647ae486f9bff8fc648039a82b", "message": "Requested review changes, most of them javadoc related", "committedDate": "2020-01-24T09:32:11Z", "type": "commit"}]}