{"pr_number": 1632, "pr_title": "Resolve Spring beans using Spring dependency resolution", "pr_createdAt": "2020-12-09T22:01:20Z", "pr_url": "https://github.com/AxonFramework/AxonFramework/pull/1632", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk3OTE1OA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1632#discussion_r539979158", "bodyText": "This is \"static\" inspection, please move to the ParameterResolverFactory.", "author": "abuijze", "createdAt": "2020-12-10T08:44:39Z", "path": "spring/src/main/java/org/axonframework/spring/config/annotation/SpringBeanParameterResolverFactory.java", "diffHunk": "@@ -133,19 +85,31 @@ public void setApplicationContext(ApplicationContext applicationContext) throws\n         this.applicationContext = applicationContext;\n     }\n \n-    private static class SpringBeanParameterResolver implements ParameterResolver<Object> {\n+    private static class SpringBeanMethodParameterParameterResolver implements ParameterResolver<Object> {\n \n         private final AutowireCapableBeanFactory beanFactory;\n-        private final String beanName;\n+        private final Executable executable;\n+        private final int parameterIndex;\n \n-        public SpringBeanParameterResolver(AutowireCapableBeanFactory beanFactory, String beanName) {\n+        public SpringBeanMethodParameterParameterResolver(AutowireCapableBeanFactory beanFactory, Executable executable, int parameterIndex) {\n             this.beanFactory = beanFactory;\n-            this.beanName = beanName;\n+            this.executable = executable;\n+            this.parameterIndex = parameterIndex;\n         }\n \n         @Override\n         public Object resolveParameterValue(Message<?> message) {\n-            return beanFactory.getBean(beanName);\n+            final Autowired ann = executable.getAnnotation(Autowired.class);\n+            final boolean required = ann == null || ann.required(); // Defaults to true\n+            final MethodParameter methodParameter;\n+\n+            if (executable instanceof Method) {\n+                methodParameter = new MethodParameter((Method) executable, parameterIndex);\n+            } else {\n+                methodParameter = new MethodParameter((Constructor<?>) executable, parameterIndex);\n+            }", "originalCommit": "b1cc30f3167963edeae96e4dc6411cfd39e1b577", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f84dc5c381a2b1069656a783e6558518e6225002", "chunk": "diff --git a/spring/src/main/java/org/axonframework/spring/config/annotation/SpringBeanParameterResolverFactory.java b/spring/src/main/java/org/axonframework/spring/config/annotation/SpringBeanParameterResolverFactory.java\nindex d3d85ec57..a5958fe06 100644\n--- a/spring/src/main/java/org/axonframework/spring/config/annotation/SpringBeanParameterResolverFactory.java\n+++ b/spring/src/main/java/org/axonframework/spring/config/annotation/SpringBeanParameterResolverFactory.java\n\n@@ -88,28 +100,17 @@ public void setApplicationContext(ApplicationContext applicationContext) throws\n     private static class SpringBeanMethodParameterParameterResolver implements ParameterResolver<Object> {\n \n         private final AutowireCapableBeanFactory beanFactory;\n-        private final Executable executable;\n-        private final int parameterIndex;\n+        private final DependencyDescriptor dependencyDescriptor;\n+        private final AtomicReference<Object> resolvedParameterValue = new AtomicReference();\n \n-        public SpringBeanMethodParameterParameterResolver(AutowireCapableBeanFactory beanFactory, Executable executable, int parameterIndex) {\n+        public SpringBeanMethodParameterParameterResolver(AutowireCapableBeanFactory beanFactory, DependencyDescriptor dependencyDescriptor) {\n             this.beanFactory = beanFactory;\n-            this.executable = executable;\n-            this.parameterIndex = parameterIndex;\n+            this.dependencyDescriptor = dependencyDescriptor;\n         }\n \n         @Override\n         public Object resolveParameterValue(Message<?> message) {\n-            final Autowired ann = executable.getAnnotation(Autowired.class);\n-            final boolean required = ann == null || ann.required(); // Defaults to true\n-            final MethodParameter methodParameter;\n-\n-            if (executable instanceof Method) {\n-                methodParameter = new MethodParameter((Method) executable, parameterIndex);\n-            } else {\n-                methodParameter = new MethodParameter((Constructor<?>) executable, parameterIndex);\n-            }\n-\n-            return beanFactory.resolveDependency(new DependencyDescriptor(methodParameter, required), null);\n+            return beanFactory.resolveDependency(dependencyDescriptor, null);\n         }\n \n         @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk4MDAzNQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1632#discussion_r539980035", "bodyText": "This should resolve to the exact same instance on each invocation. I wonder if it wouldn't be best to \"cache\" the result in an AtomicReference. This prevents the dependency resolution to be invoked on each handler invocation.", "author": "abuijze", "createdAt": "2020-12-10T08:45:57Z", "path": "spring/src/main/java/org/axonframework/spring/config/annotation/SpringBeanParameterResolverFactory.java", "diffHunk": "@@ -133,19 +85,31 @@ public void setApplicationContext(ApplicationContext applicationContext) throws\n         this.applicationContext = applicationContext;\n     }\n \n-    private static class SpringBeanParameterResolver implements ParameterResolver<Object> {\n+    private static class SpringBeanMethodParameterParameterResolver implements ParameterResolver<Object> {\n \n         private final AutowireCapableBeanFactory beanFactory;\n-        private final String beanName;\n+        private final Executable executable;\n+        private final int parameterIndex;\n \n-        public SpringBeanParameterResolver(AutowireCapableBeanFactory beanFactory, String beanName) {\n+        public SpringBeanMethodParameterParameterResolver(AutowireCapableBeanFactory beanFactory, Executable executable, int parameterIndex) {\n             this.beanFactory = beanFactory;\n-            this.beanName = beanName;\n+            this.executable = executable;\n+            this.parameterIndex = parameterIndex;\n         }\n \n         @Override\n         public Object resolveParameterValue(Message<?> message) {\n-            return beanFactory.getBean(beanName);\n+            final Autowired ann = executable.getAnnotation(Autowired.class);\n+            final boolean required = ann == null || ann.required(); // Defaults to true\n+            final MethodParameter methodParameter;\n+\n+            if (executable instanceof Method) {\n+                methodParameter = new MethodParameter((Method) executable, parameterIndex);\n+            } else {\n+                methodParameter = new MethodParameter((Constructor<?>) executable, parameterIndex);\n+            }\n+\n+            return beanFactory.resolveDependency(new DependencyDescriptor(methodParameter, required), null);", "originalCommit": "b1cc30f3167963edeae96e4dc6411cfd39e1b577", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDEyNDkyNg==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1632#discussion_r540124926", "bodyText": "@abuijze this appears to not be the case.  A bean marked         @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE) will receive a new instance each time.  There is a test for this case, testNewInstanceIsCreatedEachTimePrototypeResourceIsInjected that broke when I cached in the manner you've suggested.", "author": "jnfeinstein", "createdAt": "2020-12-10T12:21:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk4MDAzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE0ODg4Ng==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1632#discussion_r540148886", "bodyText": "Fair point. Let's abandon the idea for caching :)", "author": "abuijze", "createdAt": "2020-12-10T12:59:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk4MDAzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "f84dc5c381a2b1069656a783e6558518e6225002", "chunk": "diff --git a/spring/src/main/java/org/axonframework/spring/config/annotation/SpringBeanParameterResolverFactory.java b/spring/src/main/java/org/axonframework/spring/config/annotation/SpringBeanParameterResolverFactory.java\nindex d3d85ec57..a5958fe06 100644\n--- a/spring/src/main/java/org/axonframework/spring/config/annotation/SpringBeanParameterResolverFactory.java\n+++ b/spring/src/main/java/org/axonframework/spring/config/annotation/SpringBeanParameterResolverFactory.java\n\n@@ -88,28 +100,17 @@ public void setApplicationContext(ApplicationContext applicationContext) throws\n     private static class SpringBeanMethodParameterParameterResolver implements ParameterResolver<Object> {\n \n         private final AutowireCapableBeanFactory beanFactory;\n-        private final Executable executable;\n-        private final int parameterIndex;\n+        private final DependencyDescriptor dependencyDescriptor;\n+        private final AtomicReference<Object> resolvedParameterValue = new AtomicReference();\n \n-        public SpringBeanMethodParameterParameterResolver(AutowireCapableBeanFactory beanFactory, Executable executable, int parameterIndex) {\n+        public SpringBeanMethodParameterParameterResolver(AutowireCapableBeanFactory beanFactory, DependencyDescriptor dependencyDescriptor) {\n             this.beanFactory = beanFactory;\n-            this.executable = executable;\n-            this.parameterIndex = parameterIndex;\n+            this.dependencyDescriptor = dependencyDescriptor;\n         }\n \n         @Override\n         public Object resolveParameterValue(Message<?> message) {\n-            final Autowired ann = executable.getAnnotation(Autowired.class);\n-            final boolean required = ann == null || ann.required(); // Defaults to true\n-            final MethodParameter methodParameter;\n-\n-            if (executable instanceof Method) {\n-                methodParameter = new MethodParameter((Method) executable, parameterIndex);\n-            } else {\n-                methodParameter = new MethodParameter((Constructor<?>) executable, parameterIndex);\n-            }\n-\n-            return beanFactory.resolveDependency(new DependencyDescriptor(methodParameter, required), null);\n+            return beanFactory.resolveDependency(dependencyDescriptor, null);\n         }\n \n         @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk4MDY5Nw==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1632#discussion_r539980697", "bodyText": "Would be really nice to also add a dependency that has more than one candidate and uses Spring's @Qualifier to resolve one. This \"proves\" that Spring's dependency injection mechanism is used.", "author": "abuijze", "createdAt": "2020-12-10T08:47:04Z", "path": "spring/src/test/java/org/axonframework/spring/config/annotation/SpringBeanParameterResolverFactoryTest.java", "diffHunk": "@@ -314,10 +314,11 @@ public void handle(String message, PrototypeResource resource) {\n     public static class AnnotatedEventHandlerWithResources {\n \n         @EventHandler\n-        public void handle(String message, CommandBus commandBus, EventBus eventBus) {\n+        public void handle(String message, CommandBus commandBus, EventBus eventBus, ApplicationContext applicationContext) {", "originalCommit": "b1cc30f3167963edeae96e4dc6411cfd39e1b577", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDEyNTM1Ng==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1632#discussion_r540125356", "bodyText": "@abuijze testMethodsAreProperlyInjected_QualifierPrecedesPrimary should cover this case.", "author": "jnfeinstein", "createdAt": "2020-12-10T12:22:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk4MDY5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "13bf5865bd18662cea30325f0b8991e76f9136fc", "chunk": "diff --git a/spring/src/test/java/org/axonframework/spring/config/annotation/SpringBeanParameterResolverFactoryTest.java b/spring/src/test/java/org/axonframework/spring/config/annotation/SpringBeanParameterResolverFactoryTest.java\nindex 93a46be76..41710fc38 100644\n--- a/spring/src/test/java/org/axonframework/spring/config/annotation/SpringBeanParameterResolverFactoryTest.java\n+++ b/spring/src/test/java/org/axonframework/spring/config/annotation/SpringBeanParameterResolverFactoryTest.java\n\n@@ -314,11 +365,10 @@ public void handle(String message, PrototypeResource resource) {\n     public static class AnnotatedEventHandlerWithResources {\n \n         @EventHandler\n-        public void handle(String message, CommandBus commandBus, EventBus eventBus, ApplicationContext applicationContext) {\n+        public void handle(String message, CommandBus commandBus, EventBus eventBus) {\n             assertNotNull(message);\n             assertNotNull(commandBus);\n             assertNotNull(eventBus);\n-            assertNotNull(applicationContext);\n             counter.incrementAndGet();\n         }\n     }\n"}}, {"oid": "f84dc5c381a2b1069656a783e6558518e6225002", "url": "https://github.com/AxonFramework/AxonFramework/commit/f84dc5c381a2b1069656a783e6558518e6225002", "message": "Resolve Spring beans using Spring dependency resolution", "committedDate": "2020-12-10T12:19:29Z", "type": "forcePushed"}, {"oid": "1d4147536bbce6bb7405a0271f10a901b1829daf", "url": "https://github.com/AxonFramework/AxonFramework/commit/1d4147536bbce6bb7405a0271f10a901b1829daf", "message": "Resolve Spring beans using Spring dependency resolution", "committedDate": "2020-12-10T12:32:10Z", "type": "forcePushed"}, {"oid": "d1d55b68144e778d212aa53142a828469873e488", "url": "https://github.com/AxonFramework/AxonFramework/commit/d1d55b68144e778d212aa53142a828469873e488", "message": "Resolve Spring beans using Spring dependency resolution", "committedDate": "2020-12-10T12:34:11Z", "type": "forcePushed"}, {"oid": "ffb15f04dff0cdc89d22ff44fb336b981fb44059", "url": "https://github.com/AxonFramework/AxonFramework/commit/ffb15f04dff0cdc89d22ff44fb336b981fb44059", "message": "Resolve Spring beans using Spring dependency resolution", "committedDate": "2020-12-16T13:29:18Z", "type": "forcePushed"}, {"oid": "13bf5865bd18662cea30325f0b8991e76f9136fc", "url": "https://github.com/AxonFramework/AxonFramework/commit/13bf5865bd18662cea30325f0b8991e76f9136fc", "message": "Add paramter resolver using core Spring dependency resolution", "committedDate": "2021-01-18T15:39:53Z", "type": "forcePushed"}, {"oid": "5ec800309e2b2fdb525d5ae9982df3885696b42e", "url": "https://github.com/AxonFramework/AxonFramework/commit/5ec800309e2b2fdb525d5ae9982df3885696b42e", "message": "Add paramter resolver using core Spring dependency resolution", "committedDate": "2021-01-18T15:44:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDI5MjYxMQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1632#discussion_r560292611", "bodyText": "The priority of this guy should be higher than the soon-to-be-deprecated SpringBeanParameterResolverFactory.\nOtherwise, they'd be competing, whilst in essence, we want this to win and replace the old variant eventually.", "author": "smcvb", "createdAt": "2021-01-19T16:06:30Z", "path": "spring/src/main/java/org/axonframework/spring/config/annotation/SpringBeanDependencyResolverFactory.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright (c) 2010-2020. Axon Framework\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.axonframework.spring.config.annotation;\n+\n+import org.axonframework.common.Priority;\n+import org.axonframework.eventhandling.AnnotationEventHandlerAdapter;\n+import org.axonframework.messaging.Message;\n+import org.axonframework.messaging.annotation.ParameterResolver;\n+import org.axonframework.messaging.annotation.ParameterResolverFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeansException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.config.AutowireCapableBeanFactory;\n+import org.springframework.beans.factory.config.DependencyDescriptor;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.ApplicationContextAware;\n+import org.springframework.core.MethodParameter;\n+import org.springframework.lang.NonNull;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Executable;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Parameter;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static org.axonframework.eventhandling.GenericEventMessage.asEventMessage;\n+\n+/**\n+ * ParameterResolverFactory implementation that resolves parameters using Spring dependency resolution.\n+ * Mark a parameter as {@link org.springframework.beans.factory.annotation.Autowired} to resolve said parameter\n+ * using Spring dependency resolution.\n+ *\n+ * @author Joel Feinstein\n+ * @since 4.5\n+ * @see Autowired\n+ */\n+@Priority(Priority.LOW)", "originalCommit": "5ec800309e2b2fdb525d5ae9982df3885696b42e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7beabb231370ebcb1a9a5a482d20e7418f8ae08b", "chunk": "diff --git a/spring/src/main/java/org/axonframework/spring/config/annotation/SpringBeanDependencyResolverFactory.java b/spring/src/main/java/org/axonframework/spring/config/annotation/SpringBeanDependencyResolverFactory.java\nindex 0fe0e01c7..64ec34ae5 100644\n--- a/spring/src/main/java/org/axonframework/spring/config/annotation/SpringBeanDependencyResolverFactory.java\n+++ b/spring/src/main/java/org/axonframework/spring/config/annotation/SpringBeanDependencyResolverFactory.java\n\n@@ -17,10 +17,12 @@\n package org.axonframework.spring.config.annotation;\n \n import org.axonframework.common.Priority;\n+import org.axonframework.common.annotation.AnnotationUtils;\n import org.axonframework.eventhandling.AnnotationEventHandlerAdapter;\n import org.axonframework.messaging.Message;\n import org.axonframework.messaging.annotation.ParameterResolver;\n import org.axonframework.messaging.annotation.ParameterResolverFactory;\n+import org.axonframework.modelling.command.EntityId;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.BeansException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDI5MzA4MQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1632#discussion_r560293081", "bodyText": "It's nitty and lame, but I do feel the constructor should have a short piece of Javadoc. Even though it's gonna be along the lines of \"this constructs a SpringBeanDependencyResolverFactory`\".", "author": "smcvb", "createdAt": "2021-01-19T16:07:05Z", "path": "spring/src/main/java/org/axonframework/spring/config/annotation/SpringBeanDependencyResolverFactory.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright (c) 2010-2020. Axon Framework\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.axonframework.spring.config.annotation;\n+\n+import org.axonframework.common.Priority;\n+import org.axonframework.eventhandling.AnnotationEventHandlerAdapter;\n+import org.axonframework.messaging.Message;\n+import org.axonframework.messaging.annotation.ParameterResolver;\n+import org.axonframework.messaging.annotation.ParameterResolverFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeansException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.config.AutowireCapableBeanFactory;\n+import org.springframework.beans.factory.config.DependencyDescriptor;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.ApplicationContextAware;\n+import org.springframework.core.MethodParameter;\n+import org.springframework.lang.NonNull;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Executable;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Parameter;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static org.axonframework.eventhandling.GenericEventMessage.asEventMessage;\n+\n+/**\n+ * ParameterResolverFactory implementation that resolves parameters using Spring dependency resolution.\n+ * Mark a parameter as {@link org.springframework.beans.factory.annotation.Autowired} to resolve said parameter\n+ * using Spring dependency resolution.\n+ *\n+ * @author Joel Feinstein\n+ * @since 4.5\n+ * @see Autowired\n+ */\n+@Priority(Priority.LOW)\n+public class SpringBeanDependencyResolverFactory implements ParameterResolverFactory {\n+\n+    private final ApplicationContext applicationContext;\n+\n+    public SpringBeanDependencyResolverFactory(@NonNull ApplicationContext applicationContext) {", "originalCommit": "5ec800309e2b2fdb525d5ae9982df3885696b42e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7beabb231370ebcb1a9a5a482d20e7418f8ae08b", "chunk": "diff --git a/spring/src/main/java/org/axonframework/spring/config/annotation/SpringBeanDependencyResolverFactory.java b/spring/src/main/java/org/axonframework/spring/config/annotation/SpringBeanDependencyResolverFactory.java\nindex 0fe0e01c7..64ec34ae5 100644\n--- a/spring/src/main/java/org/axonframework/spring/config/annotation/SpringBeanDependencyResolverFactory.java\n+++ b/spring/src/main/java/org/axonframework/spring/config/annotation/SpringBeanDependencyResolverFactory.java\n\n@@ -17,10 +17,12 @@\n package org.axonframework.spring.config.annotation;\n \n import org.axonframework.common.Priority;\n+import org.axonframework.common.annotation.AnnotationUtils;\n import org.axonframework.eventhandling.AnnotationEventHandlerAdapter;\n import org.axonframework.messaging.Message;\n import org.axonframework.messaging.annotation.ParameterResolver;\n import org.axonframework.messaging.annotation.ParameterResolverFactory;\n+import org.axonframework.modelling.command.EntityId;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.BeansException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDMwMDM1Mg==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1632#discussion_r560300352", "bodyText": "So, this change did me frown a little, since a HandlerDefinition has nothing to do with parameter resolution.\nChecked the git history, but this piece of Javadoc was wrongly copied over from the SpringParameterResolverFactoryBean#setAdditionalFactories(List<ParameterResolverFactory>) back in the day...\nNo need to change this in your PR by the way, but adding this line is also unnessary.", "author": "smcvb", "createdAt": "2021-01-19T16:16:12Z", "path": "spring/src/main/java/org/axonframework/spring/config/annotation/SpringHandlerDefinitionBean.java", "diffHunk": "@@ -89,6 +89,7 @@ public void afterPropertiesSet() {\n      *\n      * @param additionalFactories The extra definitions to register\n      * @see SpringBeanParameterResolverFactory\n+     * @see SpringBeanDependencyResolverFactory", "originalCommit": "5ec800309e2b2fdb525d5ae9982df3885696b42e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7beabb231370ebcb1a9a5a482d20e7418f8ae08b", "chunk": "diff --git a/spring/src/main/java/org/axonframework/spring/config/annotation/SpringHandlerDefinitionBean.java b/spring/src/main/java/org/axonframework/spring/config/annotation/SpringHandlerDefinitionBean.java\nindex 0a2738c61..ed9475416 100644\n--- a/spring/src/main/java/org/axonframework/spring/config/annotation/SpringHandlerDefinitionBean.java\n+++ b/spring/src/main/java/org/axonframework/spring/config/annotation/SpringHandlerDefinitionBean.java\n\n@@ -89,7 +89,6 @@ public void afterPropertiesSet() {\n      *\n      * @param additionalFactories The extra definitions to register\n      * @see SpringBeanParameterResolverFactory\n-     * @see SpringBeanDependencyResolverFactory\n      * @see ClasspathHandlerDefinition\n      */\n     public void setAdditionalHandlers(List<HandlerDefinition> additionalFactories) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDMwMTAwMQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1632#discussion_r560301001", "bodyText": "Similar as with the SpringHandlerDefinitionBean, the SpringHandlerEnhancerDefinitionBean is about HandlerEnhancerDefinitions, not about ParameterResolverFactory instances.\nAgain, wrongly copied over back in the day, making this added line unnecessary too.", "author": "smcvb", "createdAt": "2021-01-19T16:17:04Z", "path": "spring/src/main/java/org/axonframework/spring/config/annotation/SpringHandlerEnhancerDefinitionBean.java", "diffHunk": "@@ -99,6 +99,7 @@ public void setApplicationContext(ApplicationContext applicationContext) throws\n      *\n      * @param additionalFactories The extra definitions to register\n      * @see SpringBeanParameterResolverFactory\n+     * @see SpringBeanDependencyResolverFactory", "originalCommit": "5ec800309e2b2fdb525d5ae9982df3885696b42e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7beabb231370ebcb1a9a5a482d20e7418f8ae08b", "chunk": "diff --git a/spring/src/main/java/org/axonframework/spring/config/annotation/SpringHandlerEnhancerDefinitionBean.java b/spring/src/main/java/org/axonframework/spring/config/annotation/SpringHandlerEnhancerDefinitionBean.java\nindex e823c5779..287f6d2fd 100644\n--- a/spring/src/main/java/org/axonframework/spring/config/annotation/SpringHandlerEnhancerDefinitionBean.java\n+++ b/spring/src/main/java/org/axonframework/spring/config/annotation/SpringHandlerEnhancerDefinitionBean.java\n\n@@ -99,7 +99,6 @@ public void setApplicationContext(ApplicationContext applicationContext) throws\n      *\n      * @param additionalFactories The extra definitions to register\n      * @see SpringBeanParameterResolverFactory\n-     * @see SpringBeanDependencyResolverFactory\n      * @see ClasspathHandlerEnhancerDefinition\n      */\n     public void setAdditionalHandlers(List<HandlerEnhancerDefinition> additionalFactories) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDMyMDQxMg==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1632#discussion_r560320412", "bodyText": "Although this works, we aim to allow meta-annotations too.\nIf my mind serves me right, Parameter#getAnnotation(Class<T>) will only return if the given annotation is actually present.\nSlightly debatable if it makes sense for Spring @Autowired annotation, as the behaviour is mainly aimed so that users are not required to uses Axon's @CommandHandler annotation directly for example.\nStill, I feel there's a benefit to allowing this.\nLuckily, Axon Framework has an AnnotationUtils class for this, which does check for meta-annotations as well.\nBy using AnnotationUtils#isAnnotationPresent(AnnotatedElement, Class<? extends Annotation>) you will receive a boolean if the Autowired annotation is present on the parameter, or on an annotation on the parameter.\nYou can see the AbstractAnnotatedParameterResolverFactory to get a feel how the framework uses this for parameter resolvers.", "author": "smcvb", "createdAt": "2021-01-19T16:41:58Z", "path": "spring/src/main/java/org/axonframework/spring/config/annotation/SpringBeanDependencyResolverFactory.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright (c) 2010-2020. Axon Framework\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.axonframework.spring.config.annotation;\n+\n+import org.axonframework.common.Priority;\n+import org.axonframework.eventhandling.AnnotationEventHandlerAdapter;\n+import org.axonframework.messaging.Message;\n+import org.axonframework.messaging.annotation.ParameterResolver;\n+import org.axonframework.messaging.annotation.ParameterResolverFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeansException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.config.AutowireCapableBeanFactory;\n+import org.springframework.beans.factory.config.DependencyDescriptor;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.ApplicationContextAware;\n+import org.springframework.core.MethodParameter;\n+import org.springframework.lang.NonNull;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Executable;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Parameter;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static org.axonframework.eventhandling.GenericEventMessage.asEventMessage;\n+\n+/**\n+ * ParameterResolverFactory implementation that resolves parameters using Spring dependency resolution.\n+ * Mark a parameter as {@link org.springframework.beans.factory.annotation.Autowired} to resolve said parameter\n+ * using Spring dependency resolution.\n+ *\n+ * @author Joel Feinstein\n+ * @since 4.5\n+ * @see Autowired\n+ */\n+@Priority(Priority.LOW)\n+public class SpringBeanDependencyResolverFactory implements ParameterResolverFactory {\n+\n+    private final ApplicationContext applicationContext;\n+\n+    public SpringBeanDependencyResolverFactory(@NonNull ApplicationContext applicationContext) {\n+        this.applicationContext = applicationContext;\n+    }\n+\n+    @Override\n+    public ParameterResolver<?> createInstance(Executable executable, Parameter[] parameters, int parameterIndex) {\n+        final Autowired ann = parameters[parameterIndex].getAnnotation(Autowired.class);", "originalCommit": "5ec800309e2b2fdb525d5ae9982df3885696b42e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7beabb231370ebcb1a9a5a482d20e7418f8ae08b", "chunk": "diff --git a/spring/src/main/java/org/axonframework/spring/config/annotation/SpringBeanDependencyResolverFactory.java b/spring/src/main/java/org/axonframework/spring/config/annotation/SpringBeanDependencyResolverFactory.java\nindex 0fe0e01c7..64ec34ae5 100644\n--- a/spring/src/main/java/org/axonframework/spring/config/annotation/SpringBeanDependencyResolverFactory.java\n+++ b/spring/src/main/java/org/axonframework/spring/config/annotation/SpringBeanDependencyResolverFactory.java\n\n@@ -17,10 +17,12 @@\n package org.axonframework.spring.config.annotation;\n \n import org.axonframework.common.Priority;\n+import org.axonframework.common.annotation.AnnotationUtils;\n import org.axonframework.eventhandling.AnnotationEventHandlerAdapter;\n import org.axonframework.messaging.Message;\n import org.axonframework.messaging.annotation.ParameterResolver;\n import org.axonframework.messaging.annotation.ParameterResolverFactory;\n+import org.axonframework.modelling.command.EntityId;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.BeansException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDMyMDkxNg==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1632#discussion_r560320916", "bodyText": "Just to get my head straight, but this approach also allows the @Qualifier annotation on the parameters, since Spring's DependencyDescriptor simply includes that logic, correct?\nIf so, it would be nice to see a test case for that combination in the SpringBeanParameterResolverFactoryTest class.\nNext to calling this out in the JavaDoc :-)", "author": "smcvb", "createdAt": "2021-01-19T16:42:37Z", "path": "spring/src/main/java/org/axonframework/spring/config/annotation/SpringBeanDependencyResolverFactory.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright (c) 2010-2020. Axon Framework\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.axonframework.spring.config.annotation;\n+\n+import org.axonframework.common.Priority;\n+import org.axonframework.eventhandling.AnnotationEventHandlerAdapter;\n+import org.axonframework.messaging.Message;\n+import org.axonframework.messaging.annotation.ParameterResolver;\n+import org.axonframework.messaging.annotation.ParameterResolverFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeansException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.config.AutowireCapableBeanFactory;\n+import org.springframework.beans.factory.config.DependencyDescriptor;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.ApplicationContextAware;\n+import org.springframework.core.MethodParameter;\n+import org.springframework.lang.NonNull;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Executable;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Parameter;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static org.axonframework.eventhandling.GenericEventMessage.asEventMessage;\n+\n+/**\n+ * ParameterResolverFactory implementation that resolves parameters using Spring dependency resolution.", "originalCommit": "5ec800309e2b2fdb525d5ae9982df3885696b42e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDM3MTkxMQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1632#discussion_r560371911", "bodyText": "This approach allows everything that Spring is capable of on the parameters.  I don't think it makes sense to check every Spring annotation since you'd be retesting the wheel.  The NoUniqueBeanDefinitionException test ensures that it is in fact using Spring dependency resolution.", "author": "jnfeinstein", "createdAt": "2021-01-19T17:53:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDMyMDkxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDkwMjkxOA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1632#discussion_r560902918", "bodyText": "Awesome, then my mind was serving me right.\nFair point on testing, going the stretch to do everything is definitely overboard.\nI was pointing out the request for a @Qualifier test since we supported this already.\nI simply want to make sure that support is maintained/taken over by your implementation, as we will be phasing out the old solution eventually.", "author": "smcvb", "createdAt": "2021-01-20T11:53:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDMyMDkxNg=="}], "type": "inlineReview", "revised_code": {"commit": "7beabb231370ebcb1a9a5a482d20e7418f8ae08b", "chunk": "diff --git a/spring/src/main/java/org/axonframework/spring/config/annotation/SpringBeanDependencyResolverFactory.java b/spring/src/main/java/org/axonframework/spring/config/annotation/SpringBeanDependencyResolverFactory.java\nindex 0fe0e01c7..64ec34ae5 100644\n--- a/spring/src/main/java/org/axonframework/spring/config/annotation/SpringBeanDependencyResolverFactory.java\n+++ b/spring/src/main/java/org/axonframework/spring/config/annotation/SpringBeanDependencyResolverFactory.java\n\n@@ -17,10 +17,12 @@\n package org.axonframework.spring.config.annotation;\n \n import org.axonframework.common.Priority;\n+import org.axonframework.common.annotation.AnnotationUtils;\n import org.axonframework.eventhandling.AnnotationEventHandlerAdapter;\n import org.axonframework.messaging.Message;\n import org.axonframework.messaging.annotation.ParameterResolver;\n import org.axonframework.messaging.annotation.ParameterResolverFactory;\n+import org.axonframework.modelling.command.EntityId;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.BeansException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDMyNDA2Mg==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1632#discussion_r560324062", "bodyText": "It would be good to note in the class level JavaDoc of this test class, that both the SpringBeanParameterResolverFactory as well as the SpringBeanDependencyResolverFactory are tested through this class.\nMaybe even change the class name to be a bit clearer there too.", "author": "smcvb", "createdAt": "2021-01-19T16:46:51Z", "path": "spring/src/test/java/org/axonframework/spring/config/annotation/SpringBeanParameterResolverFactoryTest.java", "diffHunk": "@@ -27,6 +27,7 @@\n import org.axonframework.spring.config.AnnotationDriven;\n import org.junit.jupiter.api.*;\n import org.junit.jupiter.api.extension.ExtendWith;\n+import org.springframework.beans.factory.NoUniqueBeanDefinitionException;", "originalCommit": "5ec800309e2b2fdb525d5ae9982df3885696b42e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "7beabb231370ebcb1a9a5a482d20e7418f8ae08b", "url": "https://github.com/AxonFramework/AxonFramework/commit/7beabb231370ebcb1a9a5a482d20e7418f8ae08b", "message": "Add paramter resolver using core Spring dependency resolution", "committedDate": "2021-01-19T18:09:43Z", "type": "forcePushed"}, {"oid": "299285f87c58986c5dd97277fe5518171a9c307a", "url": "https://github.com/AxonFramework/AxonFramework/commit/299285f87c58986c5dd97277fe5518171a9c307a", "message": "Add paramter resolver using core Spring dependency resolution", "committedDate": "2021-01-19T18:17:18Z", "type": "commit"}, {"oid": "299285f87c58986c5dd97277fe5518171a9c307a", "url": "https://github.com/AxonFramework/AxonFramework/commit/299285f87c58986c5dd97277fe5518171a9c307a", "message": "Add paramter resolver using core Spring dependency resolution", "committedDate": "2021-01-19T18:17:18Z", "type": "forcePushed"}]}