{"pr_number": 1006, "pr_title": "Guard against regex and range expansion by default", "pr_createdAt": "2020-12-10T06:49:52Z", "pr_url": "https://github.com/NationalSecurityAgency/datawave/pull/1006", "timeline": [{"oid": "309138ae7258c9ecf5499d913ed6bddb9df57a85", "url": "https://github.com/NationalSecurityAgency/datawave/commit/309138ae7258c9ecf5499d913ed6bddb9df57a85", "message": "Guard against regex and range expansion by default\n\nThe DefaultQueryPlanner will attempt to expand regex and bounded ranges\nby default, even when no regex nodes exist in the query.\n\nAdd a visitor to count each type of node in a query, and use this to\nonly expand the query when the relevant nodes are present.\n\nFixes #888", "committedDate": "2020-12-15T17:58:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA1NzA1Ng==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/1006#discussion_r548057056", "bodyText": "Given #926 has been merged in, we can now detect bounded ranges precisely.  Update the node counter to also count the different types of QueryPropertyMarkers.  This can then be if (nodeCount.asBoundedRange()).", "author": "ivakegg", "createdAt": "2020-12-23T17:07:08Z", "path": "warehouse/query-core/src/main/java/datawave/query/planner/DefaultQueryPlanner.java", "diffHunk": "@@ -1177,22 +1178,33 @@ protected ASTJexlScript processTree(final ASTJexlScript originalQueryTree, Shard\n             \n             // Expand any bounded ranges into a conjunction of discrete terms\n             try {\n-                innerStopwatch = timers.newStartedStopwatch(\"DefaultQueryPlanner - Expand regex\");\n+                // Count each type of node in the query.\n+                NodeTypeCountVisitor nodeCount = NodeTypeCountVisitor.countNodes(queryTree);\n+                \n                 ParallelIndexExpansion regexExpansion = new ParallelIndexExpansion(config, scannerFactory, metadataHelper, expansionFields,\n                                 config.isExpandFields(), config.isExpandValues(), config.isExpandUnfieldedNegations());\n-                queryTree = (ASTJexlScript) regexExpansion.visit(queryTree, null);\n-                if (log.isDebugEnabled()) {\n-                    logQuery(queryTree, \"Query after expanding regex:\");\n+                if (nodeCount.hasRegexNodes()) {\n+                    innerStopwatch = timers.newStartedStopwatch(\"DefaultQueryPlanner - Expand regex\");\n+                    queryTree = (ASTJexlScript) regexExpansion.visit(queryTree, null);\n+                    if (log.isDebugEnabled()) {\n+                        logQuery(queryTree, \"Query after expanding regex:\");\n+                    }\n+                    innerStopwatch.stop();\n+                } else {\n+                    log.debug(\"No regex to expand\");\n                 }\n-                innerStopwatch.stop();\n                 \n-                innerStopwatch = timers.newStartedStopwatch(\"DefaultQueryPlanner - Expand ranges\");\n-                queryTree = RangeConjunctionRebuildingVisitor.expandRanges(config, scannerFactory, metadataHelper, queryTree, config.isExpandFields(),\n-                                config.isExpandValues());\n-                if (log.isDebugEnabled()) {\n-                    logQuery(queryTree, \"Query after expanding ranges:\");\n+                if (nodeCount.hasPossibleBoundedRange()) {", "originalCommit": "309138ae7258c9ecf5499d913ed6bddb9df57a85", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTUwMzM5NA==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/1006#discussion_r555503394", "bodyText": "Done.", "author": "lbschanno", "createdAt": "2021-01-12T04:15:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA1NzA1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "faf9ba4cc08e008009be2f537e4de3f099d5ae9a", "chunk": "diff --git a/warehouse/query-core/src/main/java/datawave/query/planner/DefaultQueryPlanner.java b/warehouse/query-core/src/main/java/datawave/query/planner/DefaultQueryPlanner.java\nindex b5eb7cbd3..a713b7b50 100644\n--- a/warehouse/query-core/src/main/java/datawave/query/planner/DefaultQueryPlanner.java\n+++ b/warehouse/query-core/src/main/java/datawave/query/planner/DefaultQueryPlanner.java\n\n@@ -1206,6 +1273,19 @@ public class DefaultQueryPlanner extends QueryPlanner implements Cloneable {\n                     log.debug(\"No ranges to expand\");\n                 }\n                 \n+                if (reduceQuery) {\n+                    innerStopwatch = timers.newStartedStopwatch(\"DefaultQueryPlanner - reduce after range expansion\");\n+                    \n+                    // only show pruned sections of the tree's via assignments if debug to reduce runtime when possible\n+                    queryTree = (ASTJexlScript) QueryPruningVisitor.reduce(queryTree, showReducedQueryPrune);\n+                    \n+                    if (log.isDebugEnabled()) {\n+                        logQuery(queryTree, \"Query after range expansion reduction:\");\n+                    }\n+                    \n+                    innerStopwatch.stop();\n+                }\n+                \n                 innerStopwatch = timers.newStartedStopwatch(\"DefaultQueryPlanner - Prune GeoWave terms\");\n                 Multimap<String,String> prunedTerms = HashMultimap.create();\n                 queryTree = GeoWavePruningVisitor.pruneTree(queryTree, prunedTerms, metadataHelper);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA1NzI1OA==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/1006#discussion_r548057258", "bodyText": "see comment above", "author": "ivakegg", "createdAt": "2020-12-23T17:07:37Z", "path": "warehouse/query-core/src/main/java/datawave/query/planner/DefaultQueryPlanner.java", "diffHunk": "@@ -1235,19 +1251,30 @@ protected ASTJexlScript processTree(final ASTJexlScript originalQueryTree, Shard\n                     // predicates based on cost...\n                     config.setExpandAllTerms(true);\n                     \n-                    queryTree = (ASTJexlScript) regexExpansion.visit(queryTree, null);\n-                    if (log.isDebugEnabled()) {\n-                        logQuery(queryTree, \"Query after expanding regex again:\");\n+                    // Recount the nodes of each type.\n+                    nodeCount = NodeTypeCountVisitor.countNodes(queryTree);\n+                    \n+                    if (nodeCount.hasRegexNodes()) {\n+                        queryTree = (ASTJexlScript) regexExpansion.visit(queryTree, null);\n+                        if (log.isDebugEnabled()) {\n+                            logQuery(queryTree, \"Query after expanding regex again:\");\n+                        }\n                     }\n-                    queryTree = RangeConjunctionRebuildingVisitor.expandRanges(config, scannerFactory, metadataHelper, queryTree, config.isExpandFields(),\n-                                    config.isExpandValues());\n-                    if (log.isDebugEnabled()) {\n-                        logQuery(queryTree, \"Query after expanding ranges again:\");\n+                    \n+                    if (nodeCount.hasPossibleBoundedRange()) {", "originalCommit": "309138ae7258c9ecf5499d913ed6bddb9df57a85", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTUwMzQxOA==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/1006#discussion_r555503418", "bodyText": "Done.", "author": "lbschanno", "createdAt": "2021-01-12T04:15:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA1NzI1OA=="}], "type": "inlineReview", "revised_code": {"commit": "faf9ba4cc08e008009be2f537e4de3f099d5ae9a", "chunk": "diff --git a/warehouse/query-core/src/main/java/datawave/query/planner/DefaultQueryPlanner.java b/warehouse/query-core/src/main/java/datawave/query/planner/DefaultQueryPlanner.java\nindex b5eb7cbd3..a713b7b50 100644\n--- a/warehouse/query-core/src/main/java/datawave/query/planner/DefaultQueryPlanner.java\n+++ b/warehouse/query-core/src/main/java/datawave/query/planner/DefaultQueryPlanner.java\n\n@@ -1260,7 +1340,6 @@ public class DefaultQueryPlanner extends QueryPlanner implements Cloneable {\n                             logQuery(queryTree, \"Query after expanding regex again:\");\n                         }\n                     }\n-                    \n                     if (nodeCount.hasPossibleBoundedRange()) {\n                         queryTree = RangeConjunctionRebuildingVisitor.expandRanges(config, scannerFactory, metadataHelper, queryTree, config.isExpandFields(),\n                                         config.isExpandValues());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODUwNDQ3Nw==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/1006#discussion_r588504477", "bodyText": "Do we have to call the visitor every time or can we count the nodes once?  There may be places where we need to recount but certainly not at line 1211", "author": "ivakegg", "createdAt": "2021-03-05T17:32:12Z", "path": "warehouse/query-core/src/main/java/datawave/query/planner/DefaultQueryPlanner.java", "diffHunk": "@@ -1188,22 +1194,29 @@ protected ASTJexlScript processTree(final ASTJexlScript originalQueryTree, Shard\n             \n             // Expand any bounded ranges into a conjunction of discrete terms\n             try {\n-                innerStopwatch = timers.newStartedStopwatch(\"DefaultQueryPlanner - Expand regex\");\n                 ParallelIndexExpansion regexExpansion = new ParallelIndexExpansion(config, scannerFactory, metadataHelper, expansionFields,\n                                 config.isExpandFields(), config.isExpandValues(), config.isExpandUnfieldedNegations());\n-                queryTree = (ASTJexlScript) regexExpansion.visit(queryTree, null);\n-                if (log.isDebugEnabled()) {\n-                    logQuery(queryTree, \"Query after expanding regex:\");\n+                \n+                // Check if there is any regex to expand.\n+                if (NodeTypeCountVisitor.countNodes(queryTree).hasAny(ASTNRNode.class, ASTERNode.class)) {", "originalCommit": "d0324169a576bfdd378001f479ccb073987f5319", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MTk4MDE2OA==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/1006#discussion_r591980168", "bodyText": "@ivakegg I made a modification so that the nodes are recounted only when we know the query tree has been modified. Let me know if this works for you.", "author": "lbschanno", "createdAt": "2021-03-11T00:32:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODUwNDQ3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MjQxMDQ0Mw==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/1006#discussion_r592410443", "bodyText": "I believe we are still calling it too often.  If we expand regexs and ranges, that will only produce more equality nodes and maybe ExceededValue markers.  I don't think any of the subsequent calls actually depend on those counts so why recount?", "author": "ivakegg", "createdAt": "2021-03-11T14:34:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODUwNDQ3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Mjc1NTYzNQ==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/1006#discussion_r592755635", "bodyText": "Edited the code to only count the nodes twice, once before the first round of expanding regex and ranges, and once before the second round of expanding regex and ranges after pulling up delayed predicates.", "author": "lbschanno", "createdAt": "2021-03-11T22:06:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODUwNDQ3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "faf9ba4cc08e008009be2f537e4de3f099d5ae9a", "chunk": "diff --git a/warehouse/query-core/src/main/java/datawave/query/planner/DefaultQueryPlanner.java b/warehouse/query-core/src/main/java/datawave/query/planner/DefaultQueryPlanner.java\nindex 37fdabfc5..a713b7b50 100644\n--- a/warehouse/query-core/src/main/java/datawave/query/planner/DefaultQueryPlanner.java\n+++ b/warehouse/query-core/src/main/java/datawave/query/planner/DefaultQueryPlanner.java\n\n@@ -1194,21 +1245,23 @@ public class DefaultQueryPlanner extends QueryPlanner implements Cloneable {\n             \n             // Expand any bounded ranges into a conjunction of discrete terms\n             try {\n+                // Count each type of node in the query.\n+                NodeTypeCountVisitor nodeCount = NodeTypeCountVisitor.countNodes(queryTree);\n+                \n                 ParallelIndexExpansion regexExpansion = new ParallelIndexExpansion(config, scannerFactory, metadataHelper, expansionFields,\n                                 config.isExpandFields(), config.isExpandValues(), config.isExpandUnfieldedNegations());\n-                \n-                // Check if there is any regex to expand.\n-                if (NodeTypeCountVisitor.countNodes(queryTree).hasAny(ASTNRNode.class, ASTERNode.class)) {\n+                if (nodeCount.hasRegexNodes()) {\n                     innerStopwatch = timers.newStartedStopwatch(\"DefaultQueryPlanner - Expand regex\");\n                     queryTree = (ASTJexlScript) regexExpansion.visit(queryTree, null);\n                     if (log.isDebugEnabled()) {\n                         logQuery(queryTree, \"Query after expanding regex:\");\n                     }\n                     innerStopwatch.stop();\n+                } else {\n+                    log.debug(\"No regex to expand\");\n                 }\n                 \n-                // Check if there are any bounded ranges to expand.\n-                if (NodeTypeCountVisitor.countNodes(queryTree).isPresent(BoundedRange.class)) {\n+                if (nodeCount.hasPossibleBoundedRange()) {\n                     innerStopwatch = timers.newStartedStopwatch(\"DefaultQueryPlanner - Expand ranges\");\n                     queryTree = RangeConjunctionRebuildingVisitor.expandRanges(config, scannerFactory, metadataHelper, queryTree, config.isExpandFields(),\n                                     config.isExpandValues());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MjQwNDI3OQ==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/1006#discussion_r592404279", "bodyText": "I don't think we need to do this here.  Just do it once after expanding regexes and ranges.", "author": "ivakegg", "createdAt": "2021-03-11T14:26:58Z", "path": "warehouse/query-core/src/main/java/datawave/query/planner/DefaultQueryPlanner.java", "diffHunk": "@@ -1236,22 +1243,34 @@ protected ASTJexlScript processTree(final ASTJexlScript originalQueryTree, Shard\n             \n             // Expand any bounded ranges into a conjunction of discrete terms\n             try {\n-                innerStopwatch = timers.newStartedStopwatch(\"DefaultQueryPlanner - Expand regex\");\n                 ParallelIndexExpansion regexExpansion = new ParallelIndexExpansion(config, scannerFactory, metadataHelper, expansionFields,\n                                 config.isExpandFields(), config.isExpandValues(), config.isExpandUnfieldedNegations());\n-                queryTree = (ASTJexlScript) regexExpansion.visit(queryTree, null);\n-                if (log.isDebugEnabled()) {\n-                    logQuery(queryTree, \"Query after expanding regex:\");\n+                \n+                // Check if there is any regex to expand.\n+                NodeTypeCount nodeCount = NodeTypeCountVisitor.countNodes(queryTree);\n+                if (nodeCount.hasAny(ASTNRNode.class, ASTERNode.class)) {\n+                    innerStopwatch = timers.newStartedStopwatch(\"DefaultQueryPlanner - Expand regex\");\n+                    queryTree = (ASTJexlScript) regexExpansion.visit(queryTree, null);\n+                    if (log.isDebugEnabled()) {\n+                        logQuery(queryTree, \"Query after expanding regex:\");\n+                    }\n+                    innerStopwatch.stop();\n+                    \n+                    // The query tree was modified. Recount nodes.\n+                    nodeCount = NodeTypeCountVisitor.countNodes(queryTree);", "originalCommit": "922a2715f8c06e3f417f0963e0a2d122ecec43bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Mjc1NTA5Nw==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/1006#discussion_r592755097", "bodyText": "Removed.", "author": "lbschanno", "createdAt": "2021-03-11T22:05:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MjQwNDI3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "faf9ba4cc08e008009be2f537e4de3f099d5ae9a", "chunk": "diff --git a/warehouse/query-core/src/main/java/datawave/query/planner/DefaultQueryPlanner.java b/warehouse/query-core/src/main/java/datawave/query/planner/DefaultQueryPlanner.java\nindex 377642bcc..a713b7b50 100644\n--- a/warehouse/query-core/src/main/java/datawave/query/planner/DefaultQueryPlanner.java\n+++ b/warehouse/query-core/src/main/java/datawave/query/planner/DefaultQueryPlanner.java\n\n@@ -1243,25 +1245,23 @@ public class DefaultQueryPlanner extends QueryPlanner implements Cloneable {\n             \n             // Expand any bounded ranges into a conjunction of discrete terms\n             try {\n+                // Count each type of node in the query.\n+                NodeTypeCountVisitor nodeCount = NodeTypeCountVisitor.countNodes(queryTree);\n+                \n                 ParallelIndexExpansion regexExpansion = new ParallelIndexExpansion(config, scannerFactory, metadataHelper, expansionFields,\n                                 config.isExpandFields(), config.isExpandValues(), config.isExpandUnfieldedNegations());\n-                \n-                // Check if there is any regex to expand.\n-                NodeTypeCount nodeCount = NodeTypeCountVisitor.countNodes(queryTree);\n-                if (nodeCount.hasAny(ASTNRNode.class, ASTERNode.class)) {\n+                if (nodeCount.hasRegexNodes()) {\n                     innerStopwatch = timers.newStartedStopwatch(\"DefaultQueryPlanner - Expand regex\");\n                     queryTree = (ASTJexlScript) regexExpansion.visit(queryTree, null);\n                     if (log.isDebugEnabled()) {\n                         logQuery(queryTree, \"Query after expanding regex:\");\n                     }\n                     innerStopwatch.stop();\n-                    \n-                    // The query tree was modified. Recount nodes.\n-                    nodeCount = NodeTypeCountVisitor.countNodes(queryTree);\n+                } else {\n+                    log.debug(\"No regex to expand\");\n                 }\n                 \n-                // Check if there are any bounded ranges to expand.\n-                if (nodeCount.isPresent(BoundedRange.class)) {\n+                if (nodeCount.hasPossibleBoundedRange()) {\n                     innerStopwatch = timers.newStartedStopwatch(\"DefaultQueryPlanner - Expand ranges\");\n                     queryTree = RangeConjunctionRebuildingVisitor.expandRanges(config, scannerFactory, metadataHelper, queryTree, config.isExpandFields(),\n                                     config.isExpandValues());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MjQwNzEzNA==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/1006#discussion_r592407134", "bodyText": "may not need this call as this would not affect the call at 1301.", "author": "ivakegg", "createdAt": "2021-03-11T14:30:14Z", "path": "warehouse/query-core/src/main/java/datawave/query/planner/DefaultQueryPlanner.java", "diffHunk": "@@ -1275,12 +1294,18 @@ protected ASTJexlScript processTree(final ASTJexlScript originalQueryTree, Shard\n                 }\n                 innerStopwatch.stop();\n                 \n-                innerStopwatch = timers.newStartedStopwatch(\"DefaultQueryPlanner - Expand pushing functions into exceeded value ranges\");\n-                queryTree = PushFunctionsIntoExceededValueRanges.pushFunctions(queryTree, metadataHelper, config.getDatatypeFilter());\n-                if (log.isDebugEnabled()) {\n-                    logQuery(queryTree, \"Query after expanding pushing functions into exceeded value ranges:\");\n+                // The query tree was modified. Recount nodes.\n+                nodeCount = NodeTypeCountVisitor.countNodes(queryTree);", "originalCommit": "922a2715f8c06e3f417f0963e0a2d122ecec43bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Mjc1NTAwNQ==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/1006#discussion_r592755005", "bodyText": "Removed.", "author": "lbschanno", "createdAt": "2021-03-11T22:05:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MjQwNzEzNA=="}], "type": "inlineReview", "revised_code": {"commit": "faf9ba4cc08e008009be2f537e4de3f099d5ae9a", "chunk": "diff --git a/warehouse/query-core/src/main/java/datawave/query/planner/DefaultQueryPlanner.java b/warehouse/query-core/src/main/java/datawave/query/planner/DefaultQueryPlanner.java\nindex 377642bcc..a713b7b50 100644\n--- a/warehouse/query-core/src/main/java/datawave/query/planner/DefaultQueryPlanner.java\n+++ b/warehouse/query-core/src/main/java/datawave/query/planner/DefaultQueryPlanner.java\n\n@@ -1294,17 +1295,15 @@ public class DefaultQueryPlanner extends QueryPlanner implements Cloneable {\n                 }\n                 innerStopwatch.stop();\n                 \n-                // The query tree was modified. Recount nodes.\n-                nodeCount = NodeTypeCountVisitor.countNodes(queryTree);\n-                \n-                // Check if there are functions that can be pushed into exceeded value ranges.\n-                if (nodeCount.hasAll(ASTFunctionNode.class, ExceededValueThresholdMarkerJexlNode.class)) {\n+                if (nodeCount.hasFunctionNodes()) {\n                     innerStopwatch = timers.newStartedStopwatch(\"DefaultQueryPlanner - Expand pushing functions into exceeded value ranges\");\n                     queryTree = PushFunctionsIntoExceededValueRanges.pushFunctions(queryTree, metadataHelper, config.getDatatypeFilter());\n                     if (log.isDebugEnabled()) {\n                         logQuery(queryTree, \"Query after expanding pushing functions into exceeded value ranges:\");\n                     }\n                     innerStopwatch.stop();\n+                } else {\n+                    log.debug(\"No functions to push into exceeded value ranges\");\n                 }\n                 \n                 innerStopwatch = timers.newStartedStopwatch(\"DefaultQueryPlanner - Remove delayed predicates\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MjQwNzg0NQ==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/1006#discussion_r592407845", "bodyText": "Don't need this call.  Just call once after expanding regexes and ranges", "author": "ivakegg", "createdAt": "2021-03-11T14:31:04Z", "path": "warehouse/query-core/src/main/java/datawave/query/planner/DefaultQueryPlanner.java", "diffHunk": "@@ -1307,30 +1332,49 @@ protected ASTJexlScript processTree(final ASTJexlScript originalQueryTree, Shard\n                     // predicates based on cost...\n                     config.setExpandAllTerms(true);\n                     \n-                    queryTree = (ASTJexlScript) regexExpansion.visit(queryTree, null);\n-                    if (log.isDebugEnabled()) {\n-                        logQuery(queryTree, \"Query after expanding regex again:\");\n+                    nodeCount = NodeTypeCountVisitor.countNodes(queryTree);\n+                    // Check if there is any regex to expand.\n+                    if (nodeCount.hasAny(ASTNRNode.class, ASTERNode.class)) {\n+                        queryTree = (ASTJexlScript) regexExpansion.visit(queryTree, null);\n+                        if (log.isDebugEnabled()) {\n+                            logQuery(queryTree, \"Query after expanding regex again:\");\n+                        }\n+                        // The query tree was modified. Recount nodes.\n+                        nodeCount = NodeTypeCountVisitor.countNodes(queryTree);", "originalCommit": "922a2715f8c06e3f417f0963e0a2d122ecec43bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Mjc1NDk0Ng==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/1006#discussion_r592754946", "bodyText": "Removed.", "author": "lbschanno", "createdAt": "2021-03-11T22:05:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MjQwNzg0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "faf9ba4cc08e008009be2f537e4de3f099d5ae9a", "chunk": "diff --git a/warehouse/query-core/src/main/java/datawave/query/planner/DefaultQueryPlanner.java b/warehouse/query-core/src/main/java/datawave/query/planner/DefaultQueryPlanner.java\nindex 377642bcc..a713b7b50 100644\n--- a/warehouse/query-core/src/main/java/datawave/query/planner/DefaultQueryPlanner.java\n+++ b/warehouse/query-core/src/main/java/datawave/query/planner/DefaultQueryPlanner.java\n\n@@ -1332,49 +1331,40 @@ public class DefaultQueryPlanner extends QueryPlanner implements Cloneable {\n                     // predicates based on cost...\n                     config.setExpandAllTerms(true);\n                     \n+                    // Recount the nodes of each type.\n                     nodeCount = NodeTypeCountVisitor.countNodes(queryTree);\n-                    // Check if there is any regex to expand.\n-                    if (nodeCount.hasAny(ASTNRNode.class, ASTERNode.class)) {\n+                    \n+                    if (nodeCount.hasRegexNodes()) {\n                         queryTree = (ASTJexlScript) regexExpansion.visit(queryTree, null);\n                         if (log.isDebugEnabled()) {\n                             logQuery(queryTree, \"Query after expanding regex again:\");\n                         }\n-                        // The query tree was modified. Recount nodes.\n-                        nodeCount = NodeTypeCountVisitor.countNodes(queryTree);\n                     }\n-                    \n-                    // Check if there are any bounded ranges to expand.\n-                    if (nodeCount.isPresent(BoundedRange.class)) {\n+                    if (nodeCount.hasPossibleBoundedRange()) {\n                         queryTree = RangeConjunctionRebuildingVisitor.expandRanges(config, scannerFactory, metadataHelper, queryTree, config.isExpandFields(),\n                                         config.isExpandValues());\n                         if (log.isDebugEnabled()) {\n                             logQuery(queryTree, \"Query after expanding ranges again:\");\n                         }\n-                        // The query tree was modified. Recount nodes.\n-                        nodeCount = NodeTypeCountVisitor.countNodes(queryTree);\n                     }\n                     \n                     if (reduceQuery) {\n+                        \n                         // only show pruned sections of the tree's via assignments if debug to reduce runtime when possible\n                         queryTree = (ASTJexlScript) QueryPruningVisitor.reduce(queryTree, showReducedQueryPrune);\n                         \n                         if (log.isDebugEnabled()) {\n                             logQuery(queryTree, \"Query after range expansion reduction again:\");\n                         }\n-                        // The query tree was modified. Recount nodes.\n-                        nodeCount = NodeTypeCountVisitor.countNodes(queryTree);\n                     }\n                     \n-                    // Check if there are functions that can be pushed into exceeded value ranges.\n-                    if (nodeCount.hasAll(ASTFunctionNode.class, ExceededValueThresholdMarkerJexlNode.class)) {\n+                    if (nodeCount.hasFunctionNodes()) {\n                         queryTree = PushFunctionsIntoExceededValueRanges.pushFunctions(queryTree, metadataHelper, config.getDatatypeFilter());\n+                        config.setExpandAllTerms(expandAllTerms);\n                         if (log.isDebugEnabled()) {\n                             logQuery(queryTree, \"Query after expanding pushing functions into exceeded value ranges again:\");\n                         }\n                     }\n-                    \n-                    // Reset the original expandAllTerms value.\n-                    config.setExpandAllTerms(expandAllTerms);\n                 }\n                 innerStopwatch.stop();\n                 \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MjQwODgzMQ==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/1006#discussion_r592408831", "bodyText": "probably dont' need to do this here.", "author": "ivakegg", "createdAt": "2021-03-11T14:32:19Z", "path": "warehouse/query-core/src/main/java/datawave/query/planner/DefaultQueryPlanner.java", "diffHunk": "@@ -1307,30 +1332,49 @@ protected ASTJexlScript processTree(final ASTJexlScript originalQueryTree, Shard\n                     // predicates based on cost...\n                     config.setExpandAllTerms(true);\n                     \n-                    queryTree = (ASTJexlScript) regexExpansion.visit(queryTree, null);\n-                    if (log.isDebugEnabled()) {\n-                        logQuery(queryTree, \"Query after expanding regex again:\");\n+                    nodeCount = NodeTypeCountVisitor.countNodes(queryTree);\n+                    // Check if there is any regex to expand.\n+                    if (nodeCount.hasAny(ASTNRNode.class, ASTERNode.class)) {\n+                        queryTree = (ASTJexlScript) regexExpansion.visit(queryTree, null);\n+                        if (log.isDebugEnabled()) {\n+                            logQuery(queryTree, \"Query after expanding regex again:\");\n+                        }\n+                        // The query tree was modified. Recount nodes.\n+                        nodeCount = NodeTypeCountVisitor.countNodes(queryTree);\n                     }\n-                    queryTree = RangeConjunctionRebuildingVisitor.expandRanges(config, scannerFactory, metadataHelper, queryTree, config.isExpandFields(),\n-                                    config.isExpandValues());\n-                    if (log.isDebugEnabled()) {\n-                        logQuery(queryTree, \"Query after expanding ranges again:\");\n+                    \n+                    // Check if there are any bounded ranges to expand.\n+                    if (nodeCount.isPresent(BoundedRange.class)) {\n+                        queryTree = RangeConjunctionRebuildingVisitor.expandRanges(config, scannerFactory, metadataHelper, queryTree, config.isExpandFields(),\n+                                        config.isExpandValues());\n+                        if (log.isDebugEnabled()) {\n+                            logQuery(queryTree, \"Query after expanding ranges again:\");\n+                        }\n+                        // The query tree was modified. Recount nodes.\n+                        nodeCount = NodeTypeCountVisitor.countNodes(queryTree);", "originalCommit": "922a2715f8c06e3f417f0963e0a2d122ecec43bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Mjc1NDg4OQ==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/1006#discussion_r592754889", "bodyText": "Removed.", "author": "lbschanno", "createdAt": "2021-03-11T22:05:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MjQwODgzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "faf9ba4cc08e008009be2f537e4de3f099d5ae9a", "chunk": "diff --git a/warehouse/query-core/src/main/java/datawave/query/planner/DefaultQueryPlanner.java b/warehouse/query-core/src/main/java/datawave/query/planner/DefaultQueryPlanner.java\nindex 377642bcc..a713b7b50 100644\n--- a/warehouse/query-core/src/main/java/datawave/query/planner/DefaultQueryPlanner.java\n+++ b/warehouse/query-core/src/main/java/datawave/query/planner/DefaultQueryPlanner.java\n\n@@ -1332,49 +1331,40 @@ public class DefaultQueryPlanner extends QueryPlanner implements Cloneable {\n                     // predicates based on cost...\n                     config.setExpandAllTerms(true);\n                     \n+                    // Recount the nodes of each type.\n                     nodeCount = NodeTypeCountVisitor.countNodes(queryTree);\n-                    // Check if there is any regex to expand.\n-                    if (nodeCount.hasAny(ASTNRNode.class, ASTERNode.class)) {\n+                    \n+                    if (nodeCount.hasRegexNodes()) {\n                         queryTree = (ASTJexlScript) regexExpansion.visit(queryTree, null);\n                         if (log.isDebugEnabled()) {\n                             logQuery(queryTree, \"Query after expanding regex again:\");\n                         }\n-                        // The query tree was modified. Recount nodes.\n-                        nodeCount = NodeTypeCountVisitor.countNodes(queryTree);\n                     }\n-                    \n-                    // Check if there are any bounded ranges to expand.\n-                    if (nodeCount.isPresent(BoundedRange.class)) {\n+                    if (nodeCount.hasPossibleBoundedRange()) {\n                         queryTree = RangeConjunctionRebuildingVisitor.expandRanges(config, scannerFactory, metadataHelper, queryTree, config.isExpandFields(),\n                                         config.isExpandValues());\n                         if (log.isDebugEnabled()) {\n                             logQuery(queryTree, \"Query after expanding ranges again:\");\n                         }\n-                        // The query tree was modified. Recount nodes.\n-                        nodeCount = NodeTypeCountVisitor.countNodes(queryTree);\n                     }\n                     \n                     if (reduceQuery) {\n+                        \n                         // only show pruned sections of the tree's via assignments if debug to reduce runtime when possible\n                         queryTree = (ASTJexlScript) QueryPruningVisitor.reduce(queryTree, showReducedQueryPrune);\n                         \n                         if (log.isDebugEnabled()) {\n                             logQuery(queryTree, \"Query after range expansion reduction again:\");\n                         }\n-                        // The query tree was modified. Recount nodes.\n-                        nodeCount = NodeTypeCountVisitor.countNodes(queryTree);\n                     }\n                     \n-                    // Check if there are functions that can be pushed into exceeded value ranges.\n-                    if (nodeCount.hasAll(ASTFunctionNode.class, ExceededValueThresholdMarkerJexlNode.class)) {\n+                    if (nodeCount.hasFunctionNodes()) {\n                         queryTree = PushFunctionsIntoExceededValueRanges.pushFunctions(queryTree, metadataHelper, config.getDatatypeFilter());\n+                        config.setExpandAllTerms(expandAllTerms);\n                         if (log.isDebugEnabled()) {\n                             logQuery(queryTree, \"Query after expanding pushing functions into exceeded value ranges again:\");\n                         }\n                     }\n-                    \n-                    // Reset the original expandAllTerms value.\n-                    config.setExpandAllTerms(expandAllTerms);\n                 }\n                 innerStopwatch.stop();\n                 \n"}}, {"oid": "faf9ba4cc08e008009be2f537e4de3f099d5ae9a", "url": "https://github.com/NationalSecurityAgency/datawave/commit/faf9ba4cc08e008009be2f537e4de3f099d5ae9a", "message": "Guard against regex and range expansion by default\n\nThe DefaultQueryPlanner will attempt to expand regex and bounded ranges\nby default, even when no regex nodes exist in the query.\n\nAdd a visitor to count each type of node in a query, and use this to\nonly expand the query when the relevant nodes are present.\n\nFixes #888", "committedDate": "2021-06-15T17:26:50Z", "type": "commit"}, {"oid": "4d2f78a1f516be11ef300a9c97fce83ec8f16434", "url": "https://github.com/NationalSecurityAgency/datawave/commit/4d2f78a1f516be11ef300a9c97fce83ec8f16434", "message": "Count QueryPropertyMarker types", "committedDate": "2021-06-15T17:52:22Z", "type": "commit"}, {"oid": "1b162fa99ae0b130eaeb29e9a13ab5ceccd77902", "url": "https://github.com/NationalSecurityAgency/datawave/commit/1b162fa99ae0b130eaeb29e9a13ab5ceccd77902", "message": "Fix test failures", "committedDate": "2021-06-15T18:05:57Z", "type": "commit"}, {"oid": "1d2de059aac606ca9417a25486106f2e019ddeba", "url": "https://github.com/NationalSecurityAgency/datawave/commit/1d2de059aac606ca9417a25486106f2e019ddeba", "message": "Ensure expandAllTerms is reset", "committedDate": "2021-06-15T18:06:35Z", "type": "commit"}, {"oid": "14820b896f414552b237a814db32a0c7e09769e6", "url": "https://github.com/NationalSecurityAgency/datawave/commit/14820b896f414552b237a814db32a0c7e09769e6", "message": "Only recount nodes when the query tree is modified", "committedDate": "2021-06-15T18:18:07Z", "type": "commit"}, {"oid": "3db7eef2335328b31d9588a051e77424b1b94f15", "url": "https://github.com/NationalSecurityAgency/datawave/commit/3db7eef2335328b31d9588a051e77424b1b94f15", "message": "Fix failing tests", "committedDate": "2021-06-15T18:18:11Z", "type": "commit"}, {"oid": "f08a0863bc57b4d539c11a671950f6a94acac0a3", "url": "https://github.com/NationalSecurityAgency/datawave/commit/f08a0863bc57b4d539c11a671950f6a94acac0a3", "message": "Remove unnecessary node recounts", "committedDate": "2021-06-15T18:19:06Z", "type": "commit"}, {"oid": "291be8a96b1e0837a7abd25ffbb727d234137ee3", "url": "https://github.com/NationalSecurityAgency/datawave/commit/291be8a96b1e0837a7abd25ffbb727d234137ee3", "message": "Fix class import", "committedDate": "2021-06-15T18:21:44Z", "type": "commit"}, {"oid": "291be8a96b1e0837a7abd25ffbb727d234137ee3", "url": "https://github.com/NationalSecurityAgency/datawave/commit/291be8a96b1e0837a7abd25ffbb727d234137ee3", "message": "Fix class import", "committedDate": "2021-06-15T18:21:44Z", "type": "forcePushed"}, {"oid": "10a2ae29be44841fef2a2dcb56c2789a83da9179", "url": "https://github.com/NationalSecurityAgency/datawave/commit/10a2ae29be44841fef2a2dcb56c2789a83da9179", "message": "Merge branch 'integration' into 888-queryPlanMetadata", "committedDate": "2021-08-10T14:30:28Z", "type": "commit"}]}