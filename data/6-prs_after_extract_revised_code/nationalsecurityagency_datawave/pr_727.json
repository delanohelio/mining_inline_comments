{"pr_number": 727, "pr_title": "Updated the ivarators to wait to add runnables to the ivarator execut\u2026", "pr_createdAt": "2020-01-24T21:42:52Z", "pr_url": "https://github.com/NationalSecurityAgency/datawave/pull/727", "timeline": [{"oid": "60bcac19059905be53c0e28191773931a088ba7d", "url": "https://github.com/NationalSecurityAgency/datawave/commit/60bcac19059905be53c0e28191773931a088ba7d", "message": "Updated the ivarators to wait to add runnables to the ivarator executor until those runnables have a valid source.", "committedDate": "2020-01-24T21:39:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM3MDMxMw==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/727#discussion_r371370313", "bodyText": "fix comment", "author": "ivakegg", "createdAt": "2020-01-27T17:13:35Z", "path": "warehouse/query-core/src/main/java/datawave/core/iterators/DatawaveFieldIndexCachingIteratorJexl.java", "diffHunk": "@@ -888,20 +902,38 @@ protected boolean isTimedOut() {\n     /**\n      * Get a source copy. If the source is setup as a ThreadLocalPooledSource, then no copy is needed.", "originalCommit": "60bcac19059905be53c0e28191773931a088ba7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM3MDUxNQ==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/727#discussion_r371370515", "bodyText": "perhaps add comment that this should only be used for the unsorted case", "author": "ivakegg", "createdAt": "2020-01-27T17:13:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM3MDMxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM4NjU5NQ==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/727#discussion_r371386595", "bodyText": "done.", "author": "jwomeara", "createdAt": "2020-01-27T17:45:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM3MDMxMw=="}], "type": "inlineReview", "revised_code": {"commit": "8571f91738b768a47968eaae157a12ffbea9b1d2", "chunk": "diff --git a/warehouse/query-core/src/main/java/datawave/core/iterators/DatawaveFieldIndexCachingIteratorJexl.java b/warehouse/query-core/src/main/java/datawave/core/iterators/DatawaveFieldIndexCachingIteratorJexl.java\nindex eeab77482..3eebd2357 100644\n--- a/warehouse/query-core/src/main/java/datawave/core/iterators/DatawaveFieldIndexCachingIteratorJexl.java\n+++ b/warehouse/query-core/src/main/java/datawave/core/iterators/DatawaveFieldIndexCachingIteratorJexl.java\n\n@@ -900,7 +900,7 @@ public abstract class DatawaveFieldIndexCachingIteratorJexl extends WrappingIter\n     }\n     \n     /**\n-     * Get a source copy. If the source is setup as a ThreadLocalPooledSource, then no copy is needed.\n+     * Get a source copy. This is only used when retrieving unsorted values.\n      *\n      * @return a source\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM3MjYzNg==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/727#discussion_r371372636", "bodyText": "Does the QueryIterator still need to implement SourceFactory after these changes?", "author": "ivakegg", "createdAt": "2020-01-27T17:18:07Z", "path": "warehouse/query-core/src/main/java/datawave/query/iterator/QueryIterator.java", "diffHunk": "@@ -1328,7 +1329,8 @@ protected IteratorBuildingVisitor createIteratorBuildingVisitor(Class<? extends\n                         .setIvaratorCacheBufferSize(this.getIvaratorCacheBufferSize())\n                         .setIvaratorCacheScanPersistThreshold(this.getIvaratorCacheScanPersistThreshold())\n                         .setIvaratorCacheScanTimeout(this.getIvaratorCacheScanTimeout()).setMaxRangeSplit(this.getMaxIndexRangeSplit())\n-                        .setIvaratorMaxOpenFiles(this.getIvaratorMaxOpenFiles()).setIvaratorSources(this, this.getMaxIvaratorSources())", "originalCommit": "60bcac19059905be53c0e28191773931a088ba7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM4NjE5OQ==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/727#discussion_r371386199", "bodyText": "Yes, because it is used by the SourceManager which determines how many non-ivarator iterators can be made.", "author": "jwomeara", "createdAt": "2020-01-27T17:44:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM3MjYzNg=="}], "type": "inlineReview", "revised_code": {"commit": "8571f91738b768a47968eaae157a12ffbea9b1d2", "chunk": "diff --git a/warehouse/query-core/src/main/java/datawave/query/iterator/QueryIterator.java b/warehouse/query-core/src/main/java/datawave/query/iterator/QueryIterator.java\nindex f0caf1d08..12d314a12 100644\n--- a/warehouse/query-core/src/main/java/datawave/query/iterator/QueryIterator.java\n+++ b/warehouse/query-core/src/main/java/datawave/query/iterator/QueryIterator.java\n\n@@ -1329,22 +1335,43 @@ public class QueryIterator extends QueryOptions implements YieldingKeyValueItera\n                         .setIvaratorCacheBufferSize(this.getIvaratorCacheBufferSize())\n                         .setIvaratorCacheScanPersistThreshold(this.getIvaratorCacheScanPersistThreshold())\n                         .setIvaratorCacheScanTimeout(this.getIvaratorCacheScanTimeout()).setMaxRangeSplit(this.getMaxIndexRangeSplit())\n-                        .setIvaratorMaxOpenFiles(this.getIvaratorMaxOpenFiles()).setIvaratorSource(this.sourceForDeepCopies)\n-                        .setIvaratorSourcePool(createIvaratorSourcePool(this.sourceForDeepCopies, this.maxIvaratorSources, this.myEnvironment))\n-                        .setIncludes(indexedFields).setTermFrequencyFields(this.getTermFrequencyFields()).setIsQueryFullySatisfied(isQueryFullySatisfied)\n-                        .setSortedUIDs(sortedUIDs).limit(documentRange).disableIndexOnly(disableFiEval).limit(this.sourceLimit)\n-                        .setCollectTimingDetails(this.collectTimingDetails).setQuerySpanCollector(this.querySpanCollector)\n-                        .setIndexOnlyFields(this.getAllIndexOnlyFields()).setAllowTermFrequencyLookup(this.allowTermFrequencyLookup)\n-                        .setCompositeMetadata(compositeMetadata).setExceededOrEvaluationCache(exceededOrEvaluationCache);\n+                        .setIvaratorMaxOpenFiles(this.getIvaratorMaxOpenFiles()).setUnsortedIvaratorSource(this.sourceForDeepCopies)\n+                        .setIvaratorSourcePool(createIvaratorSourcePool(this.maxIvaratorSources)).setIncludes(indexedFields)\n+                        .setTermFrequencyFields(this.getTermFrequencyFields()).setIsQueryFullySatisfied(isQueryFullySatisfied).setSortedUIDs(sortedUIDs)\n+                        .limit(documentRange).disableIndexOnly(disableFiEval).limit(this.sourceLimit).setCollectTimingDetails(this.collectTimingDetails)\n+                        .setQuerySpanCollector(this.querySpanCollector).setIndexOnlyFields(this.getAllIndexOnlyFields())\n+                        .setAllowTermFrequencyLookup(this.allowTermFrequencyLookup).setCompositeMetadata(compositeMetadata)\n+                        .setExceededOrEvaluationCache(exceededOrEvaluationCache);\n         // TODO: .setStatsPort(this.statsdHostAndPort);\n     }\n     \n-    protected ArrayBlockingQueue<SortedKeyValueIterator<Key,Value>> createIvaratorSourcePool(SortedKeyValueIterator<Key,Value> sourceForDeepCopies,\n-                    int maxIvaratorSources, IteratorEnvironment env) {\n-        ArrayBlockingQueue<SortedKeyValueIterator<Key,Value>> ivaratorSourcePool = new ArrayBlockingQueue<>(maxIvaratorSources, true);\n-        for (int i = 0; i < maxIvaratorSources; i++)\n-            ivaratorSourcePool.add(sourceForDeepCopies.deepCopy(env));\n-        return ivaratorSourcePool;\n+    protected GenericObjectPool<SortedKeyValueIterator<Key,Value>> createIvaratorSourcePool(int maxIvaratorSources) {\n+        return new GenericObjectPool<>(createIvaratorSourceFactory(this), createIvaratorSourcePoolConfig(maxIvaratorSources));\n+    }\n+    \n+    private BasePooledObjectFactory<SortedKeyValueIterator<Key,Value>> createIvaratorSourceFactory(SourceFactory<Key,Value> sourceFactory) {\n+        return new BasePooledObjectFactory<SortedKeyValueIterator<Key,Value>>() {\n+            @Override\n+            public SortedKeyValueIterator<Key,Value> create() throws Exception {\n+                return sourceFactory.getSourceDeepCopy();\n+            }\n+            \n+            @Override\n+            public PooledObject<SortedKeyValueIterator<Key,Value>> wrap(SortedKeyValueIterator<Key,Value> obj) {\n+                return new DefaultPooledObject<>(obj);\n+            }\n+        };\n+    }\n+    \n+    private GenericObjectPoolConfig<SortedKeyValueIterator<Key,Value>> createIvaratorSourcePoolConfig(int maxIvaratorSources) {\n+        GenericObjectPoolConfig<SortedKeyValueIterator<Key,Value>> poolConfig = new GenericObjectPoolConfig<>();\n+        poolConfig.setMaxTotal(maxIvaratorSources);\n+        poolConfig.setMaxIdle(maxIvaratorSources);\n+        poolConfig.setMinIdle(0);\n+        poolConfig.setFairness(true);\n+        poolConfig.setBlockWhenExhausted(true);\n+        poolConfig.setJmxEnabled(false);\n+        return poolConfig;\n     }\n     \n     protected String getHdfsCacheSubDirPrefix() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM3MzI2NQ==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/727#discussion_r371373265", "bodyText": "maybe setIvaratorSource should be setUnsortedIvaratorSource", "author": "ivakegg", "createdAt": "2020-01-27T17:19:20Z", "path": "warehouse/query-core/src/main/java/datawave/query/iterator/QueryIterator.java", "diffHunk": "@@ -1328,7 +1329,8 @@ protected IteratorBuildingVisitor createIteratorBuildingVisitor(Class<? extends\n                         .setIvaratorCacheBufferSize(this.getIvaratorCacheBufferSize())\n                         .setIvaratorCacheScanPersistThreshold(this.getIvaratorCacheScanPersistThreshold())\n                         .setIvaratorCacheScanTimeout(this.getIvaratorCacheScanTimeout()).setMaxRangeSplit(this.getMaxIndexRangeSplit())\n-                        .setIvaratorMaxOpenFiles(this.getIvaratorMaxOpenFiles()).setIvaratorSources(this, this.getMaxIvaratorSources())\n+                        .setIvaratorMaxOpenFiles(this.getIvaratorMaxOpenFiles()).setIvaratorSource(this.sourceForDeepCopies)", "originalCommit": "60bcac19059905be53c0e28191773931a088ba7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM4NzQzNg==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/727#discussion_r371387436", "bodyText": "sure.  done.", "author": "jwomeara", "createdAt": "2020-01-27T17:46:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM3MzI2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "8571f91738b768a47968eaae157a12ffbea9b1d2", "chunk": "diff --git a/warehouse/query-core/src/main/java/datawave/query/iterator/QueryIterator.java b/warehouse/query-core/src/main/java/datawave/query/iterator/QueryIterator.java\nindex f0caf1d08..12d314a12 100644\n--- a/warehouse/query-core/src/main/java/datawave/query/iterator/QueryIterator.java\n+++ b/warehouse/query-core/src/main/java/datawave/query/iterator/QueryIterator.java\n\n@@ -1329,22 +1335,43 @@ public class QueryIterator extends QueryOptions implements YieldingKeyValueItera\n                         .setIvaratorCacheBufferSize(this.getIvaratorCacheBufferSize())\n                         .setIvaratorCacheScanPersistThreshold(this.getIvaratorCacheScanPersistThreshold())\n                         .setIvaratorCacheScanTimeout(this.getIvaratorCacheScanTimeout()).setMaxRangeSplit(this.getMaxIndexRangeSplit())\n-                        .setIvaratorMaxOpenFiles(this.getIvaratorMaxOpenFiles()).setIvaratorSource(this.sourceForDeepCopies)\n-                        .setIvaratorSourcePool(createIvaratorSourcePool(this.sourceForDeepCopies, this.maxIvaratorSources, this.myEnvironment))\n-                        .setIncludes(indexedFields).setTermFrequencyFields(this.getTermFrequencyFields()).setIsQueryFullySatisfied(isQueryFullySatisfied)\n-                        .setSortedUIDs(sortedUIDs).limit(documentRange).disableIndexOnly(disableFiEval).limit(this.sourceLimit)\n-                        .setCollectTimingDetails(this.collectTimingDetails).setQuerySpanCollector(this.querySpanCollector)\n-                        .setIndexOnlyFields(this.getAllIndexOnlyFields()).setAllowTermFrequencyLookup(this.allowTermFrequencyLookup)\n-                        .setCompositeMetadata(compositeMetadata).setExceededOrEvaluationCache(exceededOrEvaluationCache);\n+                        .setIvaratorMaxOpenFiles(this.getIvaratorMaxOpenFiles()).setUnsortedIvaratorSource(this.sourceForDeepCopies)\n+                        .setIvaratorSourcePool(createIvaratorSourcePool(this.maxIvaratorSources)).setIncludes(indexedFields)\n+                        .setTermFrequencyFields(this.getTermFrequencyFields()).setIsQueryFullySatisfied(isQueryFullySatisfied).setSortedUIDs(sortedUIDs)\n+                        .limit(documentRange).disableIndexOnly(disableFiEval).limit(this.sourceLimit).setCollectTimingDetails(this.collectTimingDetails)\n+                        .setQuerySpanCollector(this.querySpanCollector).setIndexOnlyFields(this.getAllIndexOnlyFields())\n+                        .setAllowTermFrequencyLookup(this.allowTermFrequencyLookup).setCompositeMetadata(compositeMetadata)\n+                        .setExceededOrEvaluationCache(exceededOrEvaluationCache);\n         // TODO: .setStatsPort(this.statsdHostAndPort);\n     }\n     \n-    protected ArrayBlockingQueue<SortedKeyValueIterator<Key,Value>> createIvaratorSourcePool(SortedKeyValueIterator<Key,Value> sourceForDeepCopies,\n-                    int maxIvaratorSources, IteratorEnvironment env) {\n-        ArrayBlockingQueue<SortedKeyValueIterator<Key,Value>> ivaratorSourcePool = new ArrayBlockingQueue<>(maxIvaratorSources, true);\n-        for (int i = 0; i < maxIvaratorSources; i++)\n-            ivaratorSourcePool.add(sourceForDeepCopies.deepCopy(env));\n-        return ivaratorSourcePool;\n+    protected GenericObjectPool<SortedKeyValueIterator<Key,Value>> createIvaratorSourcePool(int maxIvaratorSources) {\n+        return new GenericObjectPool<>(createIvaratorSourceFactory(this), createIvaratorSourcePoolConfig(maxIvaratorSources));\n+    }\n+    \n+    private BasePooledObjectFactory<SortedKeyValueIterator<Key,Value>> createIvaratorSourceFactory(SourceFactory<Key,Value> sourceFactory) {\n+        return new BasePooledObjectFactory<SortedKeyValueIterator<Key,Value>>() {\n+            @Override\n+            public SortedKeyValueIterator<Key,Value> create() throws Exception {\n+                return sourceFactory.getSourceDeepCopy();\n+            }\n+            \n+            @Override\n+            public PooledObject<SortedKeyValueIterator<Key,Value>> wrap(SortedKeyValueIterator<Key,Value> obj) {\n+                return new DefaultPooledObject<>(obj);\n+            }\n+        };\n+    }\n+    \n+    private GenericObjectPoolConfig<SortedKeyValueIterator<Key,Value>> createIvaratorSourcePoolConfig(int maxIvaratorSources) {\n+        GenericObjectPoolConfig<SortedKeyValueIterator<Key,Value>> poolConfig = new GenericObjectPoolConfig<>();\n+        poolConfig.setMaxTotal(maxIvaratorSources);\n+        poolConfig.setMaxIdle(maxIvaratorSources);\n+        poolConfig.setMinIdle(0);\n+        poolConfig.setFairness(true);\n+        poolConfig.setBlockWhenExhausted(true);\n+        poolConfig.setJmxEnabled(false);\n+        return poolConfig;\n     }\n     \n     protected String getHdfsCacheSubDirPrefix() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM3Mzk4Ng==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/727#discussion_r371373986", "bodyText": "does this deepCopy do the opening of the RFiles, or is that lazy and not done until the first seek?  Just curious if we need to create these lazily.", "author": "ivakegg", "createdAt": "2020-01-27T17:20:41Z", "path": "warehouse/query-core/src/main/java/datawave/query/iterator/QueryIterator.java", "diffHunk": "@@ -1337,6 +1339,14 @@ protected IteratorBuildingVisitor createIteratorBuildingVisitor(Class<? extends\n         // TODO: .setStatsPort(this.statsdHostAndPort);\n     }\n     \n+    protected ArrayBlockingQueue<SortedKeyValueIterator<Key,Value>> createIvaratorSourcePool(SortedKeyValueIterator<Key,Value> sourceForDeepCopies,\n+                    int maxIvaratorSources, IteratorEnvironment env) {\n+        ArrayBlockingQueue<SortedKeyValueIterator<Key,Value>> ivaratorSourcePool = new ArrayBlockingQueue<>(maxIvaratorSources, true);\n+        for (int i = 0; i < maxIvaratorSources; i++)\n+            ivaratorSourcePool.add(sourceForDeepCopies.deepCopy(env));", "originalCommit": "60bcac19059905be53c0e28191773931a088ba7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQzOTkzNA==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/727#discussion_r371439934", "bodyText": "Now you've done it...  Fix coming soon...", "author": "jwomeara", "createdAt": "2020-01-27T19:34:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM3Mzk4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "8571f91738b768a47968eaae157a12ffbea9b1d2", "chunk": "diff --git a/warehouse/query-core/src/main/java/datawave/query/iterator/QueryIterator.java b/warehouse/query-core/src/main/java/datawave/query/iterator/QueryIterator.java\nindex f0caf1d08..12d314a12 100644\n--- a/warehouse/query-core/src/main/java/datawave/query/iterator/QueryIterator.java\n+++ b/warehouse/query-core/src/main/java/datawave/query/iterator/QueryIterator.java\n\n@@ -1329,22 +1335,43 @@ public class QueryIterator extends QueryOptions implements YieldingKeyValueItera\n                         .setIvaratorCacheBufferSize(this.getIvaratorCacheBufferSize())\n                         .setIvaratorCacheScanPersistThreshold(this.getIvaratorCacheScanPersistThreshold())\n                         .setIvaratorCacheScanTimeout(this.getIvaratorCacheScanTimeout()).setMaxRangeSplit(this.getMaxIndexRangeSplit())\n-                        .setIvaratorMaxOpenFiles(this.getIvaratorMaxOpenFiles()).setIvaratorSource(this.sourceForDeepCopies)\n-                        .setIvaratorSourcePool(createIvaratorSourcePool(this.sourceForDeepCopies, this.maxIvaratorSources, this.myEnvironment))\n-                        .setIncludes(indexedFields).setTermFrequencyFields(this.getTermFrequencyFields()).setIsQueryFullySatisfied(isQueryFullySatisfied)\n-                        .setSortedUIDs(sortedUIDs).limit(documentRange).disableIndexOnly(disableFiEval).limit(this.sourceLimit)\n-                        .setCollectTimingDetails(this.collectTimingDetails).setQuerySpanCollector(this.querySpanCollector)\n-                        .setIndexOnlyFields(this.getAllIndexOnlyFields()).setAllowTermFrequencyLookup(this.allowTermFrequencyLookup)\n-                        .setCompositeMetadata(compositeMetadata).setExceededOrEvaluationCache(exceededOrEvaluationCache);\n+                        .setIvaratorMaxOpenFiles(this.getIvaratorMaxOpenFiles()).setUnsortedIvaratorSource(this.sourceForDeepCopies)\n+                        .setIvaratorSourcePool(createIvaratorSourcePool(this.maxIvaratorSources)).setIncludes(indexedFields)\n+                        .setTermFrequencyFields(this.getTermFrequencyFields()).setIsQueryFullySatisfied(isQueryFullySatisfied).setSortedUIDs(sortedUIDs)\n+                        .limit(documentRange).disableIndexOnly(disableFiEval).limit(this.sourceLimit).setCollectTimingDetails(this.collectTimingDetails)\n+                        .setQuerySpanCollector(this.querySpanCollector).setIndexOnlyFields(this.getAllIndexOnlyFields())\n+                        .setAllowTermFrequencyLookup(this.allowTermFrequencyLookup).setCompositeMetadata(compositeMetadata)\n+                        .setExceededOrEvaluationCache(exceededOrEvaluationCache);\n         // TODO: .setStatsPort(this.statsdHostAndPort);\n     }\n     \n-    protected ArrayBlockingQueue<SortedKeyValueIterator<Key,Value>> createIvaratorSourcePool(SortedKeyValueIterator<Key,Value> sourceForDeepCopies,\n-                    int maxIvaratorSources, IteratorEnvironment env) {\n-        ArrayBlockingQueue<SortedKeyValueIterator<Key,Value>> ivaratorSourcePool = new ArrayBlockingQueue<>(maxIvaratorSources, true);\n-        for (int i = 0; i < maxIvaratorSources; i++)\n-            ivaratorSourcePool.add(sourceForDeepCopies.deepCopy(env));\n-        return ivaratorSourcePool;\n+    protected GenericObjectPool<SortedKeyValueIterator<Key,Value>> createIvaratorSourcePool(int maxIvaratorSources) {\n+        return new GenericObjectPool<>(createIvaratorSourceFactory(this), createIvaratorSourcePoolConfig(maxIvaratorSources));\n+    }\n+    \n+    private BasePooledObjectFactory<SortedKeyValueIterator<Key,Value>> createIvaratorSourceFactory(SourceFactory<Key,Value> sourceFactory) {\n+        return new BasePooledObjectFactory<SortedKeyValueIterator<Key,Value>>() {\n+            @Override\n+            public SortedKeyValueIterator<Key,Value> create() throws Exception {\n+                return sourceFactory.getSourceDeepCopy();\n+            }\n+            \n+            @Override\n+            public PooledObject<SortedKeyValueIterator<Key,Value>> wrap(SortedKeyValueIterator<Key,Value> obj) {\n+                return new DefaultPooledObject<>(obj);\n+            }\n+        };\n+    }\n+    \n+    private GenericObjectPoolConfig<SortedKeyValueIterator<Key,Value>> createIvaratorSourcePoolConfig(int maxIvaratorSources) {\n+        GenericObjectPoolConfig<SortedKeyValueIterator<Key,Value>> poolConfig = new GenericObjectPoolConfig<>();\n+        poolConfig.setMaxTotal(maxIvaratorSources);\n+        poolConfig.setMaxIdle(maxIvaratorSources);\n+        poolConfig.setMinIdle(0);\n+        poolConfig.setFairness(true);\n+        poolConfig.setBlockWhenExhausted(true);\n+        poolConfig.setJmxEnabled(false);\n+        return poolConfig;\n     }\n     \n     protected String getHdfsCacheSubDirPrefix() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM3NjkzNg==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/727#discussion_r371376936", "bodyText": "I think the fst check needs to be first the way we were doing before.  If we are favoring the fst too much then the fst threshold needs to be set larger.", "author": "ivakegg", "createdAt": "2020-01-27T17:26:14Z", "path": "warehouse/query-core/src/main/java/datawave/query/jexl/visitors/PushdownLargeFieldedListsVisitor.java", "diffHunk": "@@ -127,14 +127,14 @@ public Object visit(ASTOrNode node, Object data) {\n                 List<JexlNode> markers = new ArrayList<>();\n                 \n                 try {\n-                    // if we have an hdfs cache directory and if past the fst threshold, then create the fst and replace the list with an assignment\n-                    if (fstHdfsUri != null && (eqNodes.size() >= config.getMaxOrExpansionFstThreshold())) {\n+                    // if we have an hdfs cache directory and if past the fst/list threshold, then create the fst/list and replace the list with an assignment\n+                    if (eqNodes.size() >= config.getMaxOrExpansionThreshold()) {\n+                        markers.add(ExceededOrThresholdMarkerJexlNode.createFromValues(field, values));\n+                        eqNodes = null;\n+                    } else if (fstHdfsUri != null && (eqNodes.size() >= config.getMaxOrExpansionFstThreshold())) {", "originalCommit": "60bcac19059905be53c0e28191773931a088ba7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ0MDEyNw==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/727#discussion_r371440127", "bodyText": "i suppose you're right.  fixed.", "author": "jwomeara", "createdAt": "2020-01-27T19:35:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM3NjkzNg=="}], "type": "inlineReview", "revised_code": {"commit": "8571f91738b768a47968eaae157a12ffbea9b1d2", "chunk": "diff --git a/warehouse/query-core/src/main/java/datawave/query/jexl/visitors/PushdownLargeFieldedListsVisitor.java b/warehouse/query-core/src/main/java/datawave/query/jexl/visitors/PushdownLargeFieldedListsVisitor.java\nindex 2e30abf96..e0bfef949 100644\n--- a/warehouse/query-core/src/main/java/datawave/query/jexl/visitors/PushdownLargeFieldedListsVisitor.java\n+++ b/warehouse/query-core/src/main/java/datawave/query/jexl/visitors/PushdownLargeFieldedListsVisitor.java\n\n@@ -128,13 +128,13 @@ public class PushdownLargeFieldedListsVisitor extends RebuildingVisitor {\n                 \n                 try {\n                     // if we have an hdfs cache directory and if past the fst/list threshold, then create the fst/list and replace the list with an assignment\n-                    if (eqNodes.size() >= config.getMaxOrExpansionThreshold()) {\n-                        markers.add(ExceededOrThresholdMarkerJexlNode.createFromValues(field, values));\n-                        eqNodes = null;\n-                    } else if (fstHdfsUri != null && (eqNodes.size() >= config.getMaxOrExpansionFstThreshold())) {\n+                    if (fstHdfsUri != null && (eqNodes.size() >= config.getMaxOrExpansionFstThreshold())) {\n                         URI fstPath = createFst(values);\n                         markers.add(ExceededOrThresholdMarkerJexlNode.createFromFstURI(field, fstPath));\n                         eqNodes = null;\n+                    } else if (eqNodes.size() >= config.getMaxOrExpansionThreshold()) {\n+                        markers.add(ExceededOrThresholdMarkerJexlNode.createFromValues(field, values));\n+                        eqNodes = null;\n                     }\n                     \n                     // handle range nodes separately\n"}}, {"oid": "8571f91738b768a47968eaae157a12ffbea9b1d2", "url": "https://github.com/NationalSecurityAgency/datawave/commit/8571f91738b768a47968eaae157a12ffbea9b1d2", "message": "PR Feedback", "committedDate": "2020-01-27T20:47:32Z", "type": "commit"}, {"oid": "61e514f1992b96ab1652ddd3f1af09bf743bdf9b", "url": "https://github.com/NationalSecurityAgency/datawave/commit/61e514f1992b96ab1652ddd3f1af09bf743bdf9b", "message": "Updated to use pool artifact which is already part of the assembly.", "committedDate": "2020-01-28T15:20:05Z", "type": "commit"}]}