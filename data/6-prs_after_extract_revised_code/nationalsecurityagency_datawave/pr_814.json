{"pr_number": 814, "pr_title": "fixed #810: efficient sorted set seeking", "pr_createdAt": "2020-04-30T21:08:11Z", "pr_url": "https://github.com/NationalSecurityAgency/datawave/pull/814", "timeline": [{"oid": "3e5aff73683668122a216d322f6e3142af8c6552", "url": "https://github.com/NationalSecurityAgency/datawave/commit/3e5aff73683668122a216d322f6e3142af8c6552", "message": "fixed #810: efficient sorted set seeking\n* reworked the sorted sets to allow for seeking by using the tailSet method.", "committedDate": "2020-04-30T21:02:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ4MDk3NA==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/814#discussion_r418480974", "bodyText": "Should the number of objects to verify be configurable? Not in this pr, but as a general comment.", "author": "apmoriarty", "createdAt": "2020-05-01T09:43:58Z", "path": "warehouse/query-core/src/main/java/datawave/query/util/sortedset/FileSortedSet.java", "diffHunk": "@@ -201,12 +215,12 @@ private void persist(SortedSet<E> set, SortedSetFileHandler handler) throws IOEx\n                 throw new IOException(\"Failed to verify file existence\");\n             }\n             // now verify the first 100 objects were written correctly", "originalCommit": "3e5aff73683668122a216d322f6e3142af8c6552", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU4MTEwOQ==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/814#discussion_r418581109", "bodyText": "I could add that in here.... not too hard to parameterize.", "author": "ivakegg", "createdAt": "2020-05-01T15:03:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ4MDk3NA=="}], "type": "inlineReview", "revised_code": {"commit": "25b9391b2c3524de7c30d5bc19fbe158240cfd2c", "chunk": "diff --git a/warehouse/query-core/src/main/java/datawave/query/util/sortedset/FileSortedSet.java b/warehouse/query-core/src/main/java/datawave/query/util/sortedset/FileSortedSet.java\nindex f150448ad..f21b3e842 100644\n--- a/warehouse/query-core/src/main/java/datawave/query/util/sortedset/FileSortedSet.java\n+++ b/warehouse/query-core/src/main/java/datawave/query/util/sortedset/FileSortedSet.java\n\n@@ -196,44 +196,41 @@ public abstract class FileSortedSet<E> implements SortedSet<E>, Cloneable {\n             this.handler = handler;\n             \n             int actualSize = 0;\n-            List<E> firstOneHundred = new ArrayList<>();\n-            SortedSetOutputStream<E> stream = handler.getOutputStream();\n-            try {\n+            PersistOptions persistOptions = handler.getPersistOptions();\n+            List<E> setToVerify = new ArrayList<>();\n+            try (SortedSetOutputStream<E> stream = handler.getOutputStream()) {\n                 for (E t : set) {\n                     stream.writeObject(t);\n-                    if (firstOneHundred.size() < 100) {\n-                        firstOneHundred.add(t);\n+                    if (persistOptions.isVerifyElements() && setToVerify.size() < persistOptions.getNumElementsToVerify()) {\n+                        setToVerify.add(t);\n                     }\n                     actualSize++;\n                 }\n                 stream.writeSize(actualSize);\n-            } finally {\n-                stream.close();\n             }\n             // verify we wrote at least the size....\n             if (handler.getSize() == 0) {\n                 throw new IOException(\"Failed to verify file existence\");\n             }\n-            // now verify the first 100 objects were written correctly\n-            SortedSetInputStream<E> inStream = handler.getInputStream();\n-            try {\n-                int count = 0;\n-                for (E t : firstOneHundred) {\n-                    count++;\n-                    E input = inStream.readObject();\n-                    if (!equals(t, input)) {\n-                        throw new IOException(\"Failed to verify element \" + count + \" was written\");\n+            // now verify the first n objects were written correctly\n+            if (persistOptions.isVerifyElements()) {\n+                try (SortedSetInputStream<E> inStream = handler.getInputStream()) {\n+                    int count = 0;\n+                    for (E t : setToVerify) {\n+                        count++;\n+                        E input = inStream.readObject();\n+                        if (!equals(t, input)) {\n+                            throw new IOException(\"Failed to verify element \" + count + \" was written\");\n+                        }\n                     }\n                 }\n-            } finally {\n-                inStream.close();\n             }\n             \n             // now verify the size was written at the end\n-            inStream = handler.getInputStream();\n-            int test = inStream.readSize();\n-            if (test != actualSize) {\n-                throw new IOException(\"Failed to verify file size was written\");\n+            if (persistOptions.isVerifySize()) {\n+                if (readSize() != actualSize) {\n+                    throw new IOException(\"Failed to verify file size was written\");\n+                }\n             }\n         } catch (IOException e) {\n             handler.deleteFile();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ4MjI0NA==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/814#discussion_r418482244", "bodyText": "Are we sure we want to double the length of the array? ArrayList resizes with (size + size/2).", "author": "apmoriarty", "createdAt": "2020-05-01T09:48:42Z", "path": "warehouse/query-core/src/main/java/datawave/query/util/sortedset/FileSortedSet.java", "diffHunk": "@@ -414,28 +404,32 @@ public boolean contains(Object o) {\n     public <T> T[] toArray(T[] a) {\n         if (persisted) {\n             try {\n-                int size = readSize();\n-                InputStream stream = getInputStream();\n+                SortedSetInputStream<E> stream = getBoundedFileHandler().getInputStream(getStart(), getEnd());\n                 try {\n-                    T[] dest = a;\n-                    int i = 0;\n-                    for (; i < size; i++) {\n-                        T obj = (T) readObject(stream);\n-                        if (dest.length <= i) {\n-                            T[] newDest = (T[]) (Array.newInstance(a.getClass().getComponentType(), size));\n-                            System.arraycopy(dest, 0, newDest, 0, i);\n-                            dest = newDest;\n+                    T[] data = a;\n+                    int index = 0;\n+                    T obj = (T) stream.readObject();\n+                    while (obj != null) {\n+                        if (index > data.length) {\n+                            T[] dataCpy = (T[]) (Array.newInstance(a.getClass().getComponentType(), data.length * 2));", "originalCommit": "3e5aff73683668122a216d322f6e3142af8c6552", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU4MTI1NA==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/814#discussion_r418581254", "bodyText": "I agree.  Will do.", "author": "ivakegg", "createdAt": "2020-05-01T15:04:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ4MjI0NA=="}], "type": "inlineReview", "revised_code": {"commit": "25b9391b2c3524de7c30d5bc19fbe158240cfd2c", "chunk": "diff --git a/warehouse/query-core/src/main/java/datawave/query/util/sortedset/FileSortedSet.java b/warehouse/query-core/src/main/java/datawave/query/util/sortedset/FileSortedSet.java\nindex f150448ad..f21b3e842 100644\n--- a/warehouse/query-core/src/main/java/datawave/query/util/sortedset/FileSortedSet.java\n+++ b/warehouse/query-core/src/main/java/datawave/query/util/sortedset/FileSortedSet.java\n\n@@ -403,37 +385,32 @@ public abstract class FileSortedSet<E> implements SortedSet<E>, Cloneable {\n     @Override\n     public <T> T[] toArray(T[] a) {\n         if (persisted) {\n-            try {\n-                SortedSetInputStream<E> stream = getBoundedFileHandler().getInputStream(getStart(), getEnd());\n-                try {\n-                    T[] data = a;\n-                    int index = 0;\n-                    T obj = (T) stream.readObject();\n-                    while (obj != null) {\n-                        if (index > data.length) {\n-                            T[] dataCpy = (T[]) (Array.newInstance(a.getClass().getComponentType(), data.length * 2));\n-                            System.arraycopy(data, 0, dataCpy, 0, data.length);\n-                            data = dataCpy;\n-                        }\n-                        data[index++] = obj;\n-                        obj = (T) stream.readObject();\n-                    }\n-                    // if not resized\n-                    if (data == a) {\n-                        // ensure extra elements are set to null\n-                        for (; index < data.length; index++) {\n-                            data[index] = null;\n-                        }\n-                    } else if (index < data.length) {\n-                        T[] dataCpy = (T[]) (Array.newInstance(a.getClass().getComponentType(), index));\n-                        System.arraycopy(data, 0, dataCpy, 0, index);\n+            try (SortedSetInputStream<E> stream = getBoundedFileHandler().getInputStream(getStart(), getEnd())) {\n+                T[] data = a;\n+                int index = 0;\n+                T obj = (T) stream.readObject();\n+                while (obj != null) {\n+                    if (index > data.length) {\n+                        T[] dataCpy = (T[]) (Array.newInstance(a.getClass().getComponentType(), data.length + (data.length / 2)));\n+                        System.arraycopy(data, 0, dataCpy, 0, data.length);\n                         data = dataCpy;\n                     }\n-                    return data;\n-                } finally {\n-                    stream.close();\n+                    data[index++] = obj;\n+                    obj = (T) stream.readObject();\n                 }\n-            } catch (Exception e) {\n+                // if not resized\n+                if (data == a) {\n+                    // ensure extra elements are set to null\n+                    for (; index < data.length; index++) {\n+                        data[index] = null;\n+                    }\n+                } else if (index < data.length) {\n+                    T[] dataCpy = (T[]) (Array.newInstance(a.getClass().getComponentType(), index));\n+                    System.arraycopy(data, 0, dataCpy, 0, index);\n+                    data = dataCpy;\n+                }\n+                return data;\n+            } catch (IOException e) {\n                 throw new IllegalStateException(\"Unable to read file into a complete set\", e);\n             }\n         } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ4NDMzMg==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/814#discussion_r418484332", "bodyText": "There's an opportunity for a try-with-resources block here", "author": "apmoriarty", "createdAt": "2020-05-01T09:55:56Z", "path": "warehouse/query-core/src/main/java/datawave/query/util/sortedset/FileSortedSet.java", "diffHunk": "@@ -610,13 +586,15 @@ public E last() {\n         E last = null;\n         if (persisted) {\n             try {\n-                int size = readSize();\n-                InputStream stream = getInputStream();\n+                SortedSetInputStream<E> stream = getBoundedFileHandler().getInputStream(getStart(), getEnd());\n                 try {", "originalCommit": "3e5aff73683668122a216d322f6e3142af8c6552", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU4MTMyNQ==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/814#discussion_r418581325", "bodyText": "ok", "author": "ivakegg", "createdAt": "2020-05-01T15:04:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ4NDMzMg=="}], "type": "inlineReview", "revised_code": {"commit": "25b9391b2c3524de7c30d5bc19fbe158240cfd2c", "chunk": "diff --git a/warehouse/query-core/src/main/java/datawave/query/util/sortedset/FileSortedSet.java b/warehouse/query-core/src/main/java/datawave/query/util/sortedset/FileSortedSet.java\nindex f150448ad..f21b3e842 100644\n--- a/warehouse/query-core/src/main/java/datawave/query/util/sortedset/FileSortedSet.java\n+++ b/warehouse/query-core/src/main/java/datawave/query/util/sortedset/FileSortedSet.java\n\n@@ -585,19 +554,14 @@ public abstract class FileSortedSet<E> implements SortedSet<E>, Cloneable {\n         boolean gotLast = false;\n         E last = null;\n         if (persisted) {\n-            try {\n-                SortedSetInputStream<E> stream = getBoundedFileHandler().getInputStream(getStart(), getEnd());\n-                try {\n-                    last = stream.readObject();\n-                    E next = stream.readObject();\n-                    while (next != null) {\n-                        last = next;\n-                        next = stream.readObject();\n-                    }\n-                    gotLast = true;\n-                } finally {\n-                    stream.close();\n+            try (SortedSetInputStream<E> stream = getBoundedFileHandler().getInputStream(getStart(), getEnd())) {\n+                last = stream.readObject();\n+                E next = stream.readObject();\n+                while (next != null) {\n+                    last = next;\n+                    next = stream.readObject();\n                 }\n+                gotLast = true;\n             } catch (Exception e) {\n                 throw new IllegalStateException(\"Unable to get last from file\", e);\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ4NDk1NA==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/814#discussion_r418484954", "bodyText": "Remove commented code", "author": "apmoriarty", "createdAt": "2020-05-01T09:58:33Z", "path": "warehouse/query-core/src/main/java/datawave/query/util/sortedset/MultiSetBackedSortedSet.java", "diffHunk": "@@ -152,13 +155,16 @@ public E first() {\n     public E last() {\n         SortedSet<E> lastSet = new TreeSet<>(comparator());\n         for (SortedSet<E> set : sets) {\n-            lastSet.add(set.last());\n+            E s = set.last();\n+            if (s != null) {\n+                lastSet.add(s);\n+            }\n         }\n         return lastSet.last();\n     }\n     \n-    @Override\n-    public String toString() {\n-        return sets.toString();\n-    }\n+    // @Override", "originalCommit": "3e5aff73683668122a216d322f6e3142af8c6552", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU4MTQyMg==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/814#discussion_r418581422", "bodyText": "oops, forgot about that one.  Thanks.", "author": "ivakegg", "createdAt": "2020-05-01T15:04:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ4NDk1NA=="}], "type": "inlineReview", "revised_code": {"commit": "25b9391b2c3524de7c30d5bc19fbe158240cfd2c", "chunk": "diff --git a/warehouse/query-core/src/main/java/datawave/query/util/sortedset/MultiSetBackedSortedSet.java b/warehouse/query-core/src/main/java/datawave/query/util/sortedset/MultiSetBackedSortedSet.java\nindex 2b916d327..ea15ea893 100644\n--- a/warehouse/query-core/src/main/java/datawave/query/util/sortedset/MultiSetBackedSortedSet.java\n+++ b/warehouse/query-core/src/main/java/datawave/query/util/sortedset/MultiSetBackedSortedSet.java\n\n@@ -162,9 +162,4 @@ public class MultiSetBackedSortedSet<E> extends AbstractSet<E> implements Sorted\n         }\n         return lastSet.last();\n     }\n-    \n-    // @Override\n-    // public String toString() {\n-    // return sets.toString();\n-    // }\n }\n"}}, {"oid": "25b9391b2c3524de7c30d5bc19fbe158240cfd2c", "url": "https://github.com/NationalSecurityAgency/datawave/commit/25b9391b2c3524de7c30d5bc19fbe158240cfd2c", "message": "re #810: review comment updates.  Includes parameterizing the persist\nverification options.", "committedDate": "2020-05-01T18:13:32Z", "type": "commit"}]}