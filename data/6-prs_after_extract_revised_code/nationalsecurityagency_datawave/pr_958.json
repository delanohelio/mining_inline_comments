{"pr_number": 958, "pr_title": "Verify lineage for ExpandMultinormalizedTerms", "pr_createdAt": "2020-10-20T21:01:55Z", "pr_url": "https://github.com/NationalSecurityAgency/datawave/pull/958", "timeline": [{"oid": "73c8b0d6ace4ab640c74f8794b74c4c33b44d23d", "url": "https://github.com/NationalSecurityAgency/datawave/commit/73c8b0d6ace4ab640c74f8794b74c4c33b44d23d", "message": "Verify lineage for ExpandMultinormalizedTerms\n\nAdd an assert to tests for ExpandMultinormalizedTerms to verify that it\nreturns a query tree with valid lineage.\n\nPart of #880.", "committedDate": "2020-10-20T21:00:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDY0MzM0MQ==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/958#discussion_r514643341", "bodyText": "return QueryPropertyMarkerVisitor.instanceOf(currNode, Arrays.asList(ASTDelayedPredicate.class, ExceededOrThresholdMarkerJexlNode.class,\n                        ExceededValueThresholdMarkerJexlNode.class, ExceededTermThresholdMarkerJexlNode.class, IndexHoleMarkerJexlNode.class,\n                        ASTEvaluationOnly.class), null);\n\nThis method is a dupe of (erroneously protected) JexlASTHelper.isDelayedPredicate.  We should rip this out, update the JexlASTHelper method to be public, and use that instead.\nAlso, instead of visiting the tree six times for each instanceof call, we should pass the list of types to the QueryPropertyMarkerVisitor, and run instanceof once (as shown above);", "author": "jwomeara", "createdAt": "2020-10-30T00:35:50Z", "path": "warehouse/query-core/src/main/java/datawave/query/jexl/visitors/ExpandMultiNormalizedTerms.java", "diffHunk": "@@ -155,12 +155,9 @@ public Object visit(ASTReference node, Object data) {\n      * @return\n      */\n     protected boolean isDelayedPredicate(JexlNode currNode) {\n-        if (ASTDelayedPredicate.instanceOf(currNode) || ExceededOrThresholdMarkerJexlNode.instanceOf(currNode)\n+        return ASTDelayedPredicate.instanceOf(currNode) || ExceededOrThresholdMarkerJexlNode.instanceOf(currNode)\n                         || ExceededValueThresholdMarkerJexlNode.instanceOf(currNode) || ExceededTermThresholdMarkerJexlNode.instanceOf(currNode)\n-                        || IndexHoleMarkerJexlNode.instanceOf(currNode) || ASTEvaluationOnly.instanceOf(currNode))\n-            return true;\n-        else\n-            return false;\n+                        || IndexHoleMarkerJexlNode.instanceOf(currNode) || ASTEvaluationOnly.instanceOf(currNode);", "originalCommit": "73c8b0d6ace4ab640c74f8794b74c4c33b44d23d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDc1MTgyNA==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/958#discussion_r514751824", "bodyText": "I've deduped the method and used QueryPropertyMarkerVisitor. One change I made was to use QueryPropertyMarkerVisitor.instanceOfAny(node) instead, since that will default to the TYPE_IDENTIFIERS set that already contains the delayed predicate instance types.", "author": "lbschanno", "createdAt": "2020-10-30T03:00:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDY0MzM0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTExMjU3MQ==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/958#discussion_r515112571", "bodyText": "Good call.  I didn't realize that there were only 6 marker nodes.  D'oh!  Nice work!", "author": "jwomeara", "createdAt": "2020-10-30T13:52:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDY0MzM0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "8c649cd2305114ef4f75e189e786b01d450a1bf1", "chunk": "diff --git a/warehouse/query-core/src/main/java/datawave/query/jexl/visitors/ExpandMultiNormalizedTerms.java b/warehouse/query-core/src/main/java/datawave/query/jexl/visitors/ExpandMultiNormalizedTerms.java\nindex 04d89c41b..10ebc1d3e 100644\n--- a/warehouse/query-core/src/main/java/datawave/query/jexl/visitors/ExpandMultiNormalizedTerms.java\n+++ b/warehouse/query-core/src/main/java/datawave/query/jexl/visitors/ExpandMultiNormalizedTerms.java\n\n@@ -148,28 +143,15 @@ public class ExpandMultiNormalizedTerms extends RebuildingVisitor {\n         \n     }\n     \n-    /**\n-     * method to return if the current node is an instance of a delayed predicate\n-     * \n-     * @param currNode\n-     * @return\n-     */\n-    protected boolean isDelayedPredicate(JexlNode currNode) {\n-        return ASTDelayedPredicate.instanceOf(currNode) || ExceededOrThresholdMarkerJexlNode.instanceOf(currNode)\n-                        || ExceededValueThresholdMarkerJexlNode.instanceOf(currNode) || ExceededTermThresholdMarkerJexlNode.instanceOf(currNode)\n-                        || IndexHoleMarkerJexlNode.instanceOf(currNode) || ASTEvaluationOnly.instanceOf(currNode);\n-    }\n-    \n     @Override\n     public Object visit(ASTAndNode node, Object data) {\n         if (this.expandedNodes.contains(node)) {\n             return node;\n         }\n         \n-        ASTAndNode smashed = TreeFlatteningRebuildingVisitor.flatten(node);\n         HashMap<String,JexlNode> lowerBounds = Maps.newHashMap(), upperBounds = Maps.newHashMap();\n         List<JexlNode> others = Lists.newArrayList();\n-        for (JexlNode child : JexlNodes.children(smashed)) {\n+        for (JexlNode child : JexlNodes.children(node)) {\n             // if the child has a method attached, it is not eligible for ranges\n             if (JexlASTHelper.HasMethodVisitor.hasMethod(child)) {\n                 others.add(child);\n"}}, {"oid": "31b850c8beae5f370620330951d3587189ba355d", "url": "https://github.com/NationalSecurityAgency/datawave/commit/31b850c8beae5f370620330951d3587189ba355d", "message": "Merge branch 'master' into 880-ExpandMultinormalizedTerms", "committedDate": "2020-10-30T02:33:59Z", "type": "commit"}, {"oid": "8c649cd2305114ef4f75e189e786b01d450a1bf1", "url": "https://github.com/NationalSecurityAgency/datawave/commit/8c649cd2305114ef4f75e189e786b01d450a1bf1", "message": "Dedupe and optimize JexlASTHelper.isDelayedPredicate", "committedDate": "2020-10-30T02:57:40Z", "type": "commit"}, {"oid": "33fe59f69defa7569142ea22ff5aae369f43cb7d", "url": "https://github.com/NationalSecurityAgency/datawave/commit/33fe59f69defa7569142ea22ff5aae369f43cb7d", "message": "Merge branch 'master' into 880-ExpandMultinormalizedTerms", "committedDate": "2020-11-02T14:07:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAyMDg4Mw==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/958#discussion_r516020883", "bodyText": "I don't believe this should be changed.  isDelayedPredictate is specific to a certain set of query property markers.  BoundedRange is coming along in #926 which is specifically not a delayed predicate.  Please revert this to it original state.", "author": "ivakegg", "createdAt": "2020-11-02T14:46:37Z", "path": "warehouse/query-core/src/main/java/datawave/query/jexl/JexlASTHelper.java", "diffHunk": "@@ -1204,13 +1201,15 @@ private static void getERNodes(JexlNode node, List<ASTERNode> erNodes) {\n         return nodes;\n     }\n     \n-    protected static boolean isDelayedPredicate(JexlNode currNode) {\n-        if (ASTDelayedPredicate.instanceOf(currNode) || ExceededOrThresholdMarkerJexlNode.instanceOf(currNode)\n-                        || ExceededValueThresholdMarkerJexlNode.instanceOf(currNode) || ExceededTermThresholdMarkerJexlNode.instanceOf(currNode)\n-                        || IndexHoleMarkerJexlNode.instanceOf(currNode) || ASTEvaluationOnly.instanceOf(currNode))\n-            return true;\n-        else\n-            return false;\n+    /**\n+     * Return whether to not the provided node is an instance of a delayed predicate.\n+     * \n+     * @param node\n+     *            the node\n+     * @return true if the node is an instance of a delayed predicate, or false otherwise\n+     */\n+    public static boolean isDelayedPredicate(JexlNode node) {\n+        return QueryPropertyMarkerVisitor.instanceOfAny(node);", "originalCommit": "33fe59f69defa7569142ea22ff5aae369f43cb7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI0NzE0OA==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/958#discussion_r516247148", "bodyText": "Fixed.", "author": "lbschanno", "createdAt": "2020-11-02T20:52:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAyMDg4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM4NDM5Mg==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/958#discussion_r516384392", "bodyText": "Wait wait wait!  I still think we should avoid multiple recursions of the entire jexl tree.  Can we revert the revert, but update the isDelayedPredicate call to be...\nreturn QueryPropertyMarkerVisitor.instanceOf(currNode, Arrays.asList(ASTDelayedPredicate.class, ExceededOrThresholdMarkerJexlNode.class,\n                        ExceededValueThresholdMarkerJexlNode.class, ExceededTermThresholdMarkerJexlNode.class, IndexHoleMarkerJexlNode.class,\n                        ASTEvaluationOnly.class), null);\n\nI think this satisfies both my and Ivan's issue, right?", "author": "jwomeara", "createdAt": "2020-11-03T01:32:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAyMDg4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM5NjQzOQ==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/958#discussion_r516396439", "bodyText": "Third time's the charm? Fixed.", "author": "lbschanno", "createdAt": "2020-11-03T02:24:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAyMDg4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "fb2a52223dbb3d137159fe632809072267c96315", "chunk": "diff --git a/warehouse/query-core/src/main/java/datawave/query/jexl/JexlASTHelper.java b/warehouse/query-core/src/main/java/datawave/query/jexl/JexlASTHelper.java\nindex bcde7f854..9a92f30fd 100644\n--- a/warehouse/query-core/src/main/java/datawave/query/jexl/JexlASTHelper.java\n+++ b/warehouse/query-core/src/main/java/datawave/query/jexl/JexlASTHelper.java\n\n@@ -1201,15 +1204,10 @@ public class JexlASTHelper {\n         return nodes;\n     }\n     \n-    /**\n-     * Return whether to not the provided node is an instance of a delayed predicate.\n-     * \n-     * @param node\n-     *            the node\n-     * @return true if the node is an instance of a delayed predicate, or false otherwise\n-     */\n-    public static boolean isDelayedPredicate(JexlNode node) {\n-        return QueryPropertyMarkerVisitor.instanceOfAny(node);\n+    public static boolean isDelayedPredicate(JexlNode currNode) {\n+        return ASTDelayedPredicate.instanceOf(currNode) || ExceededOrThresholdMarkerJexlNode.instanceOf(currNode)\n+                        || ExceededValueThresholdMarkerJexlNode.instanceOf(currNode) || ExceededTermThresholdMarkerJexlNode.instanceOf(currNode)\n+                        || IndexHoleMarkerJexlNode.instanceOf(currNode) || ASTEvaluationOnly.instanceOf(currNode);\n     }\n     \n     /**\n"}}, {"oid": "fb2a52223dbb3d137159fe632809072267c96315", "url": "https://github.com/NationalSecurityAgency/datawave/commit/fb2a52223dbb3d137159fe632809072267c96315", "message": "Revert isDelayedPredicate changes", "committedDate": "2020-11-02T20:51:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM4NDczOA==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/958#discussion_r516384738", "bodyText": "If we do it this way, we only traverse the tree once:\nreturn QueryPropertyMarkerVisitor.instanceOf(currNode, Arrays.asList(ASTDelayedPredicate.class, ExceededOrThresholdMarkerJexlNode.class,\n                        ExceededValueThresholdMarkerJexlNode.class, ExceededTermThresholdMarkerJexlNode.class, IndexHoleMarkerJexlNode.class,\n                        ASTEvaluationOnly.class), null);", "author": "jwomeara", "createdAt": "2020-11-03T01:34:16Z", "path": "warehouse/query-core/src/main/java/datawave/query/jexl/JexlASTHelper.java", "diffHunk": "@@ -1204,13 +1204,10 @@ private static void getERNodes(JexlNode node, List<ASTERNode> erNodes) {\n         return nodes;\n     }\n     \n-    protected static boolean isDelayedPredicate(JexlNode currNode) {\n-        if (ASTDelayedPredicate.instanceOf(currNode) || ExceededOrThresholdMarkerJexlNode.instanceOf(currNode)\n+    public static boolean isDelayedPredicate(JexlNode currNode) {\n+        return ASTDelayedPredicate.instanceOf(currNode) || ExceededOrThresholdMarkerJexlNode.instanceOf(currNode)\n                         || ExceededValueThresholdMarkerJexlNode.instanceOf(currNode) || ExceededTermThresholdMarkerJexlNode.instanceOf(currNode)\n-                        || IndexHoleMarkerJexlNode.instanceOf(currNode) || ASTEvaluationOnly.instanceOf(currNode))\n-            return true;\n-        else\n-            return false;\n+                        || IndexHoleMarkerJexlNode.instanceOf(currNode) || ASTEvaluationOnly.instanceOf(currNode);", "originalCommit": "fb2a52223dbb3d137159fe632809072267c96315", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM5NjU4Mw==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/958#discussion_r516396583", "bodyText": "Fixed in latest commit.", "author": "lbschanno", "createdAt": "2020-11-03T02:25:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM4NDczOA=="}], "type": "inlineReview", "revised_code": {"commit": "c26e9d2e786d476ac291cd4a8dfcda9e77bbc268", "chunk": "diff --git a/warehouse/query-core/src/main/java/datawave/query/jexl/JexlASTHelper.java b/warehouse/query-core/src/main/java/datawave/query/jexl/JexlASTHelper.java\nindex 9a92f30fd..625128050 100644\n--- a/warehouse/query-core/src/main/java/datawave/query/jexl/JexlASTHelper.java\n+++ b/warehouse/query-core/src/main/java/datawave/query/jexl/JexlASTHelper.java\n\n@@ -1204,10 +1206,19 @@ public class JexlASTHelper {\n         return nodes;\n     }\n     \n-    public static boolean isDelayedPredicate(JexlNode currNode) {\n-        return ASTDelayedPredicate.instanceOf(currNode) || ExceededOrThresholdMarkerJexlNode.instanceOf(currNode)\n-                        || ExceededValueThresholdMarkerJexlNode.instanceOf(currNode) || ExceededTermThresholdMarkerJexlNode.instanceOf(currNode)\n-                        || IndexHoleMarkerJexlNode.instanceOf(currNode) || ASTEvaluationOnly.instanceOf(currNode);\n+    private static final List<Class<? extends QueryPropertyMarker>> DELAYED_PREDICATE_TYPES = Collections.unmodifiableList(Arrays.asList(\n+                    ASTDelayedPredicate.class, ExceededOrThresholdMarkerJexlNode.class, ExceededValueThresholdMarkerJexlNode.class,\n+                    ExceededTermThresholdMarkerJexlNode.class, IndexHoleMarkerJexlNode.class, ASTEvaluationOnly.class));\n+    \n+    /**\n+     * Return whether or not the provided node is a delayed predicate type.\n+     * \n+     * @param node\n+     *            the node\n+     * @return true if the node is a delayed predicate, or false otherwise\n+     */\n+    public static boolean isDelayedPredicate(JexlNode node) {\n+        return QueryPropertyMarkerVisitor.instanceOf(node, DELAYED_PREDICATE_TYPES, null);\n     }\n     \n     /**\n"}}, {"oid": "c26e9d2e786d476ac291cd4a8dfcda9e77bbc268", "url": "https://github.com/NationalSecurityAgency/datawave/commit/c26e9d2e786d476ac291cd4a8dfcda9e77bbc268", "message": "Avoid multiple recursions", "committedDate": "2020-11-03T02:24:04Z", "type": "commit"}, {"oid": "00a113c5965f6c339dd6a706de0936e58e3076fc", "url": "https://github.com/NationalSecurityAgency/datawave/commit/00a113c5965f6c339dd6a706de0936e58e3076fc", "message": "Move isDelayedPredicate method to QueryPropertyMarkerVisitor", "committedDate": "2020-11-03T22:50:34Z", "type": "commit"}, {"oid": "89842633910c1b586fdc3802d6a13a87d43a6441", "url": "https://github.com/NationalSecurityAgency/datawave/commit/89842633910c1b586fdc3802d6a13a87d43a6441", "message": "Merge branch 'master' into 880-ExpandMultinormalizedTerms", "committedDate": "2020-11-03T22:52:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU2NzMzNQ==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/958#discussion_r520567335", "bodyText": "This constant is not needed?", "author": "ivakegg", "createdAt": "2020-11-10T13:38:33Z", "path": "warehouse/query-core/src/main/java/datawave/query/jexl/JexlASTHelper.java", "diffHunk": "@@ -1204,14 +1206,9 @@ private static void getERNodes(JexlNode node, List<ASTERNode> erNodes) {\n         return nodes;\n     }\n     \n-    protected static boolean isDelayedPredicate(JexlNode currNode) {\n-        if (ASTDelayedPredicate.instanceOf(currNode) || ExceededOrThresholdMarkerJexlNode.instanceOf(currNode)\n-                        || ExceededValueThresholdMarkerJexlNode.instanceOf(currNode) || ExceededTermThresholdMarkerJexlNode.instanceOf(currNode)\n-                        || IndexHoleMarkerJexlNode.instanceOf(currNode) || ASTEvaluationOnly.instanceOf(currNode))\n-            return true;\n-        else\n-            return false;\n-    }\n+    private static final List<Class<? extends QueryPropertyMarker>> DELAYED_PREDICATE_TYPES = Collections.unmodifiableList(Arrays.asList(", "originalCommit": "89842633910c1b586fdc3802d6a13a87d43a6441", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY1NjUyOQ==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/958#discussion_r520656529", "bodyText": "Good catch, I forgot to remove this. Fixed.", "author": "lbschanno", "createdAt": "2020-11-10T15:34:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU2NzMzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "45b204176c08df7f8f963cf1e2e8f232efb39198", "chunk": "diff --git a/warehouse/query-core/src/main/java/datawave/query/jexl/JexlASTHelper.java b/warehouse/query-core/src/main/java/datawave/query/jexl/JexlASTHelper.java\nindex e03a92922..6e65cd1d1 100644\n--- a/warehouse/query-core/src/main/java/datawave/query/jexl/JexlASTHelper.java\n+++ b/warehouse/query-core/src/main/java/datawave/query/jexl/JexlASTHelper.java\n\n@@ -1206,10 +1201,6 @@ public class JexlASTHelper {\n         return nodes;\n     }\n     \n-    private static final List<Class<? extends QueryPropertyMarker>> DELAYED_PREDICATE_TYPES = Collections.unmodifiableList(Arrays.asList(\n-                    ASTDelayedPredicate.class, ExceededOrThresholdMarkerJexlNode.class, ExceededValueThresholdMarkerJexlNode.class,\n-                    ExceededTermThresholdMarkerJexlNode.class, IndexHoleMarkerJexlNode.class, ASTEvaluationOnly.class));\n-    \n     /**\n      * Get the range operator nodes. If \"mustBeIndexed\" is true, then a config and helper must be supplied to check if the fields are indexed.\n      * \n"}}, {"oid": "45b204176c08df7f8f963cf1e2e8f232efb39198", "url": "https://github.com/NationalSecurityAgency/datawave/commit/45b204176c08df7f8f963cf1e2e8f232efb39198", "message": "Remove obsolete constant", "committedDate": "2020-11-10T15:34:35Z", "type": "commit"}, {"oid": "f4612e2a2a939686eade2969e41e1c3b77b73090", "url": "https://github.com/NationalSecurityAgency/datawave/commit/f4612e2a2a939686eade2969e41e1c3b77b73090", "message": "Merge branch 'release/version3.0' into 880-ExpandMultinormalizedTerms", "committedDate": "2020-12-11T16:34:06Z", "type": "commit"}, {"oid": "34ca9242c70f7e33390bf5ebd9b98578d90503ca", "url": "https://github.com/NationalSecurityAgency/datawave/commit/34ca9242c70f7e33390bf5ebd9b98578d90503ca", "message": "Merge branch 'release/version3.0' into 880-ExpandMultinormalizedTerms", "committedDate": "2020-12-11T21:09:44Z", "type": "commit"}]}