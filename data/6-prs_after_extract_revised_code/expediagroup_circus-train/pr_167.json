{"pr_number": 167, "pr_title": "Issue #166 - Replica.updateMetastore calls metastore with batched partition lists.", "pr_createdAt": "2020-02-05T07:24:33Z", "pr_url": "https://github.com/ExpediaGroup/circus-train/pull/167", "timeline": [{"oid": "5d17ae3368b4ca34f59277c7c3b857dede166107", "url": "https://github.com/ExpediaGroup/circus-train/commit/5d17ae3368b4ca34f59277c7c3b857dede166107", "message": "Merge pull request #1 from HotelsDotCom/master\n\nmerge upstream master into my branch", "committedDate": "2020-02-04T15:04:39Z", "type": "commit"}, {"oid": "3fd60973b60f997c6c80069826598161282ea4c3", "url": "https://github.com/ExpediaGroup/circus-train/commit/3fd60973b60f997c6c80069826598161282ea4c3", "message": "Issue 166 - call metastore with batched partition lists", "committedDate": "2020-02-05T07:20:08Z", "type": "commit"}, {"oid": "92d556ad13977fda339f0cfb16aaa3bc45349317", "url": "https://github.com/ExpediaGroup/circus-train/commit/92d556ad13977fda339f0cfb16aaa3bc45349317", "message": "follow import order", "committedDate": "2020-02-05T07:33:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE5Mjc1Mw==", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375192753", "bodyText": "shouldn't this be sublist instead of partitionsToAlter.\nclient.alter_partitions(replicaDatabaseName, replicaTableName, partitionsToAlter);", "author": "abhimanyugupta07", "createdAt": "2020-02-05T11:07:11Z", "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java", "diffHunk": "@@ -189,7 +222,13 @@ public void updateMetadata(\n       if (!partitionsToAlter.isEmpty()) {\n         LOG.info(\"Altering {} existing partitions.\", partitionsToAlter.size());\n         try {\n-          client.alter_partitions(replicaDatabaseName, replicaTableName, partitionsToAlter);\n+          int counter = 0;\n+          for (List<Partition> sublist : Lists.partition(partitionsToAlter, partitionBatchSize)) {\n+            int start = counter * partitionBatchSize;\n+            LOG.info(\"Altering partitions {} through {}\", start, start + sublist.size() - 1);\n+            client.alter_partitions(replicaDatabaseName, replicaTableName, partitionsToAlter);", "originalCommit": "92d556ad13977fda339f0cfb16aaa3bc45349317", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI5NTExOA==", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375295118", "bodyText": "good catch, thanks!", "author": "barnharts4", "createdAt": "2020-02-05T14:41:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE5Mjc1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "16181026e39d0716bc05590ca18589368b4852d1", "chunk": "diff --git a/circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java b/circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java\nindex 4e32551..82d5813 100644\n--- a/circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java\n+++ b/circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java\n\n@@ -226,7 +224,7 @@ public class Replica extends HiveEndpoint {\n           for (List<Partition> sublist : Lists.partition(partitionsToAlter, partitionBatchSize)) {\n             int start = counter * partitionBatchSize;\n             LOG.info(\"Altering partitions {} through {}\", start, start + sublist.size() - 1);\n-            client.alter_partitions(replicaDatabaseName, replicaTableName, partitionsToAlter);\n+            client.alter_partitions(replicaDatabaseName, replicaTableName, sublist);\n             counter++;\n           }\n         } catch (TException e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE5MzYxOA==", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375193618", "bodyText": "here too. sublist instead of statisticsToSet ?", "author": "abhimanyugupta07", "createdAt": "2020-02-05T11:09:05Z", "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java", "diffHunk": "@@ -203,7 +242,13 @@ public void updateMetadata(\n       if (!statisticsToSet.isEmpty()) {\n         LOG.info(\"Setting column statistics for {} partitions.\", statisticsToSet.size());\n         try {\n-          client.setPartitionColumnStatistics(new SetPartitionsStatsRequest(statisticsToSet));\n+          int counter = 0;\n+          for (List<ColumnStatistics> sublist : Lists.partition(statisticsToSet, partitionBatchSize)) {\n+            int start = counter * partitionBatchSize;\n+            LOG.info(\"Setting column statistics for partitions {} through {}\", start, start + sublist.size() - 1);\n+            client.setPartitionColumnStatistics(new SetPartitionsStatsRequest(statisticsToSet));", "originalCommit": "92d556ad13977fda339f0cfb16aaa3bc45349317", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI5NTI3Ng==", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375295276", "bodyText": "yep, thanks", "author": "barnharts4", "createdAt": "2020-02-05T14:41:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE5MzYxOA=="}], "type": "inlineReview", "revised_code": {"commit": "16181026e39d0716bc05590ca18589368b4852d1", "chunk": "diff --git a/circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java b/circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java\nindex 4e32551..82d5813 100644\n--- a/circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java\n+++ b/circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java\n\n@@ -246,7 +244,7 @@ public class Replica extends HiveEndpoint {\n           for (List<ColumnStatistics> sublist : Lists.partition(statisticsToSet, partitionBatchSize)) {\n             int start = counter * partitionBatchSize;\n             LOG.info(\"Setting column statistics for partitions {} through {}\", start, start + sublist.size() - 1);\n-            client.setPartitionColumnStatistics(new SetPartitionsStatsRequest(statisticsToSet));\n+            client.setPartitionColumnStatistics(new SetPartitionsStatsRequest(sublist));\n             counter++;\n           }\n         } catch (TException e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIwMjc3MA==", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375202770", "bodyText": "I think to test the batching for alter_partition and setPartitionColumnStatistics usecase, it will be nice to have more than one existing partitions.", "author": "abhimanyugupta07", "createdAt": "2020-02-05T11:30:21Z", "path": "circus-train-core/src/test/java/com/hotels/bdp/circustrain/core/replica/ReplicaTest.java", "diffHunk": "@@ -425,18 +440,28 @@ public void alteringExistingPartitionedReplicaTableWithPartitionsSucceeds() thro\n     verify(mockMetaStoreClient).updateTableColumnStatistics(columnStatistics);\n     verify(mockReplicaLocationManager).addCleanUpLocation(anyString(), any(Path.class));\n     verify(mockMetaStoreClient).alter_partitions(eq(DB_NAME), eq(TABLE_NAME), alterPartitionCaptor.capture());\n-    verify(mockMetaStoreClient).add_partitions(addPartitionCaptor.capture());\n+    verify(mockMetaStoreClient, times(2)).add_partitions(addPartitionCaptor.capture());\n \n     assertThat(alterPartitionCaptor.getValue().size(), is(1));\n-    assertThat(addPartitionCaptor.getValue().size(), is(1));\n+\n+    // Validate that the args were expected number of batches (2), and expected batch sizes (2, then 1) since\n+    // we sent a list of 3 new partitions and used a partitionBatchSize of 2\n+\n+    List<List<Partition>> addCaptorValues = addPartitionCaptor.getAllValues();\n+    List<Partition> firstBatch = addCaptorValues.get(0);\n+    List<Partition> secondBatch = addCaptorValues.get(1);\n+    assertThat(addCaptorValues.size(), is(2));\n+    assertThat(firstBatch.size(), is(2));\n+    assertThat(secondBatch.size(), is(1));\n \n     Partition altered = alterPartitionCaptor.getValue().get(0);", "originalCommit": "92d556ad13977fda339f0cfb16aaa3bc45349317", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxMjk5Mg==", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375212992", "bodyText": "Yeah, it feels like we are missing some tests that would have caught the issues you called out above. I'd suggest writing new tests (or modifying existing) and getting them to fail with the current code and then fixing the code and they should then pass.", "author": "massdosage", "createdAt": "2020-02-05T11:55:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIwMjc3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI5NzM1NQ==", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375297355", "bodyText": "hmm, I agree with adding more tests for for alter_partition and setPartitionColumnStatistics but how would you suggest I get current(old) code to fail?  I guess I could mock a failure of the metastore client if the size of the list was longer than the partitionBatchSize, but that seems fairly contrived and not really testing anything except my ability to mock stuff.", "author": "barnharts4", "createdAt": "2020-02-05T14:45:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIwMjc3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTMwMzY3OQ==", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375303679", "bodyText": "or maybe you didn't mean the issue of overwhelming the HMS with the full list, but rather the issue that I forgot to use sublist above?  In that case, yes, good point.", "author": "barnharts4", "createdAt": "2020-02-05T14:55:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIwMjc3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTMwNTEyNw==", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375305127", "bodyText": "Yes. Your last comment is what I meant. Just adding two more existing partitions in the test should give you a batch to trigger the changes you made.", "author": "abhimanyugupta07", "createdAt": "2020-02-05T14:57:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIwMjc3MA=="}], "type": "inlineReview", "revised_code": {"commit": "16181026e39d0716bc05590ca18589368b4852d1", "chunk": "diff --git a/circus-train-core/src/test/java/com/hotels/bdp/circustrain/core/replica/ReplicaTest.java b/circus-train-core/src/test/java/com/hotels/bdp/circustrain/core/replica/ReplicaTest.java\nindex 18437fd..8b8e794 100644\n--- a/circus-train-core/src/test/java/com/hotels/bdp/circustrain/core/replica/ReplicaTest.java\n+++ b/circus-train-core/src/test/java/com/hotels/bdp/circustrain/core/replica/ReplicaTest.java\n\n@@ -438,62 +465,102 @@ public class ReplicaTest {\n \n     verify(mockMetaStoreClient).alter_table(eq(DB_NAME), eq(TABLE_NAME), any(Table.class));\n     verify(mockMetaStoreClient).updateTableColumnStatistics(columnStatistics);\n-    verify(mockReplicaLocationManager).addCleanUpLocation(anyString(), any(Path.class));\n-    verify(mockMetaStoreClient).alter_partitions(eq(DB_NAME), eq(TABLE_NAME), alterPartitionCaptor.capture());\n-    verify(mockMetaStoreClient, times(2)).add_partitions(addPartitionCaptor.capture());\n+    verify(mockReplicaLocationManager, times(numTestAlterPartitions)).addCleanUpLocation(anyString(), any(Path.class));\n+    verify(mockMetaStoreClient, times(numAlterBatches)).alter_partitions(eq(DB_NAME), eq(TABLE_NAME), alterPartitionCaptor.capture());\n+    verify(mockMetaStoreClient, times(numAddBatches)).add_partitions(addPartitionCaptor.capture());\n \n-    assertThat(alterPartitionCaptor.getValue().size(), is(1));\n+    // Validate that the args were expected number of batches , and expected batch sizes\n+    List<List<Partition>> addCaptorValues = addPartitionCaptor.getAllValues();\n+    assertThat(addCaptorValues.size(), is(numAddBatches));\n+    for (int i = 0; i < numAddBatches; i++) {\n+      int thisBatchSize = i < (numAddBatches - 1) ? TEST_PARTITION_BATCH_SIZE : lastAddBatchSize;\n+      List<Partition> addBatch = addCaptorValues.get(i);\n+      assertThat(addBatch.size(), is(thisBatchSize));\n+      for (int j = 0; j < addBatch.size(); j++) {\n+        assertThat(addBatch.get(j).getValues(),\n+                is(Arrays.asList(String.format(\"new_%s\", (i * TEST_PARTITION_BATCH_SIZE) + j),\n+                        String.format(\"new_%s_sub\", (i * TEST_PARTITION_BATCH_SIZE) + j))));\n+      }\n+    }\n \n-    // Validate that the args were expected number of batches (2), and expected batch sizes (2, then 1) since\n-    // we sent a list of 3 new partitions and used a partitionBatchSize of 2\n+    List<List<Partition>> alterCaptorValues = alterPartitionCaptor.getAllValues();\n+    assertThat(alterCaptorValues.size(), is(numAlterBatches));\n+    for (int i = 0; i < numAlterBatches; i++) {\n+      int thisBatchSize = i < (numAlterBatches - 1) ? TEST_PARTITION_BATCH_SIZE : lastAlterBatchSize;\n+      List<Partition> alterBatch = alterCaptorValues.get(i);\n+      assertThat(alterBatch.size(), is(thisBatchSize));\n+      for (int j = 0; j < alterBatch.size(); j++) {\n+        assertThat(alterBatch.get(j).getValues(),\n+                is(Arrays.asList(String.format(\"exist_%s\", (i * TEST_PARTITION_BATCH_SIZE) + j),\n+                        String.format(\"exist_%s_sub\", (i * TEST_PARTITION_BATCH_SIZE) + j))));\n+      }\n+    }\n \n-    List<List<Partition>> addCaptorValues = addPartitionCaptor.getAllValues();\n-    List<Partition> firstBatch = addCaptorValues.get(0);\n-    List<Partition> secondBatch = addCaptorValues.get(1);\n-    assertThat(addCaptorValues.size(), is(2));\n-    assertThat(firstBatch.size(), is(2));\n-    assertThat(secondBatch.size(), is(1));\n+    verify(mockMetaStoreClient, times(numStatisticsBatches)).setPartitionColumnStatistics(setStatsRequestCaptor.capture());\n+    List<SetPartitionsStatsRequest> statsRequestList = setStatsRequestCaptor.getAllValues();\n+    assertThat(statsRequestList.size(), is(numStatisticsBatches));\n \n-    Partition altered = alterPartitionCaptor.getValue().get(0);\n-    assertThat(altered.getValues(), is(Arrays.asList(\"one\", \"two\")));\n+    List<ColumnStatistics> columnStats = new ArrayList<>();\n+    for (int i = 0; i < numStatisticsBatches; i++) {\n+      int thisBatchSize = i < (numStatisticsBatches - 1) ? TEST_PARTITION_BATCH_SIZE : lastStatisticsBatchSize;\n+      assertThat(statsRequestList.get(i).getColStats().size(), is(thisBatchSize));\n+      columnStats.addAll(statsRequestList.get(i).getColStats());\n+    }\n \n-    assertThat(firstBatch.get(0).getValues(), is(Arrays.asList(\"three\", \"four\")));\n-    assertThat(firstBatch.get(1).getValues(), is(Arrays.asList(\"five\", \"six\")));\n-    assertThat(secondBatch.get(0).getValues(), is(Arrays.asList(\"seven\", \"eight\")));\n+    assertThat(columnStats.size(), is(numTestAlterPartitions + numTestAddPartitions));\n \n-    verify(mockMetaStoreClient, times(2)).setPartitionColumnStatistics(setStatsRequestCaptor.capture());\n-    SetPartitionsStatsRequest statsRequest = setStatsRequestCaptor.getValue();\n+    for (int i = 0; i < numTestAlterPartitions; i++) {\n+      assertThat(columnStats.get(i).getStatsDesc().isIsTblLevel(), is(false));\n+      assertThat(columnStats.get(i).getStatsDesc().getDbName(), is(DB_NAME));\n+      assertThat(columnStats.get(i).getStatsDesc().getTableName(), is(TABLE_NAME));\n+      assertThat(columnStats.get(i).getStatsDesc().getPartName(), is(String.format(\"c=exist_%s/d=exist_%s_sub\", i, i)));\n+      assertThat(columnStats.get(i).getStatsObj().size(), is(2));\n+    }\n \n-    List<ColumnStatistics> columnStats = new ArrayList<>(statsRequest.getColStats());\n-    Collections.sort(columnStats, new Comparator<ColumnStatistics>() {\n-      @Override\n-      public int compare(ColumnStatistics o1, ColumnStatistics o2) {\n-        return o1.getStatsDesc().getPartName().compareTo(o2.getStatsDesc().getPartName());\n-      }\n-    });\n-    assertThat(columnStats.size(), is(4));\n+    for (int i = numTestAlterPartitions; i < numTestAlterPartitions + numTestAddPartitions; i++) {\n+      assertThat(columnStats.get(i).getStatsDesc().isIsTblLevel(), is(false));\n+      assertThat(columnStats.get(i).getStatsDesc().getDbName(), is(DB_NAME));\n+      assertThat(columnStats.get(i).getStatsDesc().getTableName(), is(TABLE_NAME));\n+      assertThat(columnStats.get(i).getStatsDesc().getPartName(),\n+              is(String.format(\"c=new_%s/d=new_%s_sub\", i - numTestAlterPartitions, i - numTestAlterPartitions)));\n+      assertThat(columnStats.get(i).getStatsObj().size(), is(2));\n+    }\n+  }\n \n-    // List was sorted by partName, so make sure elements in list occur in that order\n-    assertThat(columnStats.get(0).getStatsDesc().isIsTblLevel(), is(false));\n-    assertThat(columnStats.get(0).getStatsDesc().getDbName(), is(DB_NAME));\n-    assertThat(columnStats.get(0).getStatsDesc().getTableName(), is(TABLE_NAME));\n-    assertThat(columnStats.get(0).getStatsDesc().getPartName(), is(\"c=five/d=six\"));\n-    assertThat(columnStats.get(0).getStatsObj().size(), is(2));\n-    assertThat(columnStats.get(1).getStatsDesc().isIsTblLevel(), is(false));\n-    assertThat(columnStats.get(1).getStatsDesc().getDbName(), is(DB_NAME));\n-    assertThat(columnStats.get(1).getStatsDesc().getTableName(), is(TABLE_NAME));\n-    assertThat(columnStats.get(1).getStatsDesc().getPartName(), is(\"c=one/d=two\"));\n-    assertThat(columnStats.get(1).getStatsObj().size(), is(2));\n-    assertThat(columnStats.get(2).getStatsDesc().isIsTblLevel(), is(false));\n-    assertThat(columnStats.get(2).getStatsDesc().getDbName(), is(DB_NAME));\n-    assertThat(columnStats.get(2).getStatsDesc().getTableName(), is(TABLE_NAME));\n-    assertThat(columnStats.get(2).getStatsDesc().getPartName(), is(\"c=seven/d=eight\"));\n-    assertThat(columnStats.get(2).getStatsObj().size(), is(2));\n-    assertThat(columnStats.get(3).getStatsDesc().isIsTblLevel(), is(false));\n-    assertThat(columnStats.get(3).getStatsDesc().getDbName(), is(DB_NAME));\n-    assertThat(columnStats.get(3).getStatsDesc().getTableName(), is(TABLE_NAME));\n-    assertThat(columnStats.get(3).getStatsDesc().getPartName(), is(\"c=three/d=four\"));\n-    assertThat(columnStats.get(3).getStatsObj().size(), is(2));\n+\n+  @Test\n+  public void alteringExistingPartitionedReplicaTableWithNewPartitionsInBatchesSucceeds_0_0() throws TException, IOException {\n+    alterExistingPartitionedReplicaTableWithNewPartitionsInBatches(0,0);\n+  }\n+\n+  @Test\n+  public void alteringExistingPartitionedReplicaTableWithNewPartitionsInBatchesSucceeds_0_1() throws TException, IOException {\n+    alterExistingPartitionedReplicaTableWithNewPartitionsInBatches(0,1);\n+  }\n+\n+  @Test\n+  public void alteringExistingPartitionedReplicaTableWithNewPartitionsInBatchesSucceeds_1_0() throws TException, IOException {\n+    alterExistingPartitionedReplicaTableWithNewPartitionsInBatches(1,0);\n+  }\n+\n+  @Test\n+  public void alteringExistingPartitionedReplicaTableWithNewPartitionsInBatchesSucceeds_1_1() throws TException, IOException {\n+    alterExistingPartitionedReplicaTableWithNewPartitionsInBatches(1,1);\n+  }\n+\n+  @Test\n+  public void alteringExistingPartitionedReplicaTableWithNewPartitionsInBatchesSucceeds_boundaries() throws TException, IOException {\n+    alterExistingPartitionedReplicaTableWithNewPartitionsInBatches(TEST_PARTITION_BATCH_SIZE,TEST_PARTITION_BATCH_SIZE);\n+  }\n+\n+  @Test\n+  public void alteringExistingPartitionedReplicaTableWithNewPartitionsInBatchesSucceeds_many() throws TException, IOException {\n+    alterExistingPartitionedReplicaTableWithNewPartitionsInBatches(17,28);\n+  }\n+\n+  @Test\n+  public void alteringExistingPartitionedReplicaTableWithNewPartitionsInBatchesSucceeds_lots() throws TException, IOException {\n+    alterExistingPartitionedReplicaTableWithNewPartitionsInBatches(172,333);\n   }\n \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIwOTE5NA==", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375209194", "bodyText": "Minor, but these imports should go along with the other google imports. I've made a mental note to update our hotels-oss-parent with a plugin that automatically does this that we've started using in EG org on GitHub so this is automated by Maven.", "author": "massdosage", "createdAt": "2020-02-05T11:45:58Z", "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java", "diffHunk": "@@ -30,6 +30,8 @@\n import java.util.Map;\n import java.util.Objects;\n \n+import com.google.common.annotations.VisibleForTesting;", "originalCommit": "92d556ad13977fda339f0cfb16aaa3bc45349317", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI5ODQzNQ==", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375298435", "bodyText": "Yeah, I am struggling with the correct IntelliJ settings to match circus train's preferred import layout.  Obviously DSP standards are not matching up well with HCOM in this circumstance. Do you have a doc or a settings file or something so that I can update?", "author": "barnharts4", "createdAt": "2020-02-05T14:46:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIwOTE5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTMwMDYzOA==", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375300638", "bodyText": "This will do it once I've merged and released the parent - https://github.com/HotelsDotCom/circus-train/pull/168/files\nI'm getting timeouts publishing to Maven Central right now, they've had lots of scalability issues in the last few months so I'm going to leave it for today and try again tomorrow.", "author": "massdosage", "createdAt": "2020-02-05T14:50:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIwOTE5NA=="}], "type": "inlineReview", "revised_code": {"commit": "0d1aa30f9bdcad23cf1efaf1125fffb0d5f7f0a4", "chunk": "diff --git a/circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java b/circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java\nindex 4e32551..6438065 100644\n--- a/circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java\n+++ b/circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java\n\n@@ -30,8 +30,6 @@ import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n \n-import com.google.common.annotations.VisibleForTesting;\n-import com.google.common.collect.Lists;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.hadoop.fs.Path;\n import org.apache.hadoop.hive.conf.HiveConf;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxMDMyNg==", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375210326", "bodyText": "NABD but you could inline this on line 77 and then only have the assignment in the constructor below which actually allows you to override the value.", "author": "massdosage", "createdAt": "2020-02-05T11:48:34Z", "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java", "diffHunk": "@@ -89,6 +93,29 @@\n     this.housekeepingListener = housekeepingListener;\n     replicationMode = tableReplication.getReplicationMode();\n     this.tableReplication = tableReplication;\n+    this.partitionBatchSize = DEFAULT_PARTITION_BATCH_SIZE;", "originalCommit": "92d556ad13977fda339f0cfb16aaa3bc45349317", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "16181026e39d0716bc05590ca18589368b4852d1", "chunk": "diff --git a/circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java b/circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java\nindex 4e32551..82d5813 100644\n--- a/circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java\n+++ b/circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java\n\n@@ -93,7 +92,6 @@ public class Replica extends HiveEndpoint {\n     this.housekeepingListener = housekeepingListener;\n     replicationMode = tableReplication.getReplicationMode();\n     this.tableReplication = tableReplication;\n-    this.partitionBatchSize = DEFAULT_PARTITION_BATCH_SIZE;\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxMDQ2MQ==", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375210461", "bodyText": "What does this comment mean?", "author": "massdosage", "createdAt": "2020-02-05T11:48:52Z", "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java", "diffHunk": "@@ -89,6 +93,29 @@\n     this.housekeepingListener = housekeepingListener;\n     replicationMode = tableReplication.getReplicationMode();\n     this.tableReplication = tableReplication;\n+    this.partitionBatchSize = DEFAULT_PARTITION_BATCH_SIZE;\n+  }\n+\n+  /**\n+   * Use {@link ReplicaFactory}", "originalCommit": "92d556ad13977fda339f0cfb16aaa3bc45349317", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI5OTA2NA==", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375299064", "bodyText": "It was copied from the other constructor, and it means that this constructor is package-private and to construct this, you need to use ReplicaFactory.", "author": "barnharts4", "createdAt": "2020-02-05T14:47:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxMDQ2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTczMTAyNw==", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375731027", "bodyText": "Ah, OK.", "author": "massdosage", "createdAt": "2020-02-06T09:44:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxMDQ2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "16181026e39d0716bc05590ca18589368b4852d1", "chunk": "diff --git a/circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java b/circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java\nindex 4e32551..82d5813 100644\n--- a/circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java\n+++ b/circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java\n\n@@ -93,7 +92,6 @@ public class Replica extends HiveEndpoint {\n     this.housekeepingListener = housekeepingListener;\n     replicationMode = tableReplication.getReplicationMode();\n     this.tableReplication = tableReplication;\n-    this.partitionBatchSize = DEFAULT_PARTITION_BATCH_SIZE;\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxMTUxNg==", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375211516", "bodyText": "I've never come across Lists.partition before, looks good.", "author": "massdosage", "createdAt": "2020-02-05T11:51:24Z", "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java", "diffHunk": "@@ -175,7 +202,13 @@ public void updateMetadata(\n       if (!partitionsToCreate.isEmpty()) {\n         LOG.info(\"Creating {} new partitions.\", partitionsToCreate.size());\n         try {\n-          client.add_partitions(partitionsToCreate);\n+          int counter = 0;\n+          for (List<Partition> sublist : Lists.partition(partitionsToCreate, partitionBatchSize)) {", "originalCommit": "92d556ad13977fda339f0cfb16aaa3bc45349317", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxMjM2OA==", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375212368", "bodyText": "I know it's not the most readable format but our import ordering is this: https://github.com/ExpediaGroup/eg-oss-parent/blob/master/pom.xml#L102", "author": "massdosage", "createdAt": "2020-02-05T11:53:33Z", "path": "circus-train-core/src/test/java/com/hotels/bdp/circustrain/core/replica/ReplicaTest.java", "diffHunk": "@@ -22,22 +22,29 @@\n import static org.mockito.Matchers.anyString;\n import static org.mockito.Matchers.eq;\n import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.verifyNoMoreInteractions;\n import static org.mockito.Mockito.when;\n \n import static com.hotels.bdp.circustrain.api.CircusTrainTableParameter.REPLICATION_EVENT;\n import static com.hotels.bdp.circustrain.api.CircusTrainTableParameter.REPLICATION_MODE;\n \n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.Comparator;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n+import com.google.common.base.Supplier;", "originalCommit": "92d556ad13977fda339f0cfb16aaa3bc45349317", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI5OTI1NQ==", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375299255", "bodyText": "ah, thanks, just what I was looking for!", "author": "barnharts4", "createdAt": "2020-02-05T14:48:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxMjM2OA=="}], "type": "inlineReview", "revised_code": {"commit": "16181026e39d0716bc05590ca18589368b4852d1", "chunk": "diff --git a/circus-train-core/src/test/java/com/hotels/bdp/circustrain/core/replica/ReplicaTest.java b/circus-train-core/src/test/java/com/hotels/bdp/circustrain/core/replica/ReplicaTest.java\nindex 18437fd..8b8e794 100644\n--- a/circus-train-core/src/test/java/com/hotels/bdp/circustrain/core/replica/ReplicaTest.java\n+++ b/circus-train-core/src/test/java/com/hotels/bdp/circustrain/core/replica/ReplicaTest.java\n\n@@ -45,6 +45,7 @@ import com.hotels.bdp.circustrain.api.metadata.TableTransformation;\n import com.hotels.bdp.circustrain.core.PartitionsAndStatistics;\n import com.hotels.bdp.circustrain.core.TableAndStatistics;\n import com.hotels.hcommon.hive.metastore.client.api.CloseableMetaStoreClient;\n+import org.apache.commons.collections.ListUtils;\n import org.apache.hadoop.fs.Path;\n import org.apache.hadoop.hive.common.StatsSetupConst;\n import org.apache.hadoop.hive.conf.HiveConf;\n"}}, {"oid": "16181026e39d0716bc05590ca18589368b4852d1", "url": "https://github.com/ExpediaGroup/circus-train/commit/16181026e39d0716bc05590ca18589368b4852d1", "message": "PR comments, restructure test to accomodate any number of altered/added partitions, and test combinations", "committedDate": "2020-02-05T22:27:27Z", "type": "commit"}, {"oid": "0d1aa30f9bdcad23cf1efaf1125fffb0d5f7f0a4", "url": "https://github.com/ExpediaGroup/circus-train/commit/0d1aa30f9bdcad23cf1efaf1125fffb0d5f7f0a4", "message": "optimize imports", "committedDate": "2020-02-05T22:53:23Z", "type": "commit"}, {"oid": "bf76303f2a823029fa5aedc2374125b5e71cf9f7", "url": "https://github.com/ExpediaGroup/circus-train/commit/bf76303f2a823029fa5aedc2374125b5e71cf9f7", "message": "add releaese data to changelog - let's be optimistic", "committedDate": "2020-02-05T22:57:33Z", "type": "commit"}, {"oid": "0aa35464dd74f0a4fef65d8cb7e67f8befb430cd", "url": "https://github.com/ExpediaGroup/circus-train/commit/0aa35464dd74f0a4fef65d8cb7e67f8befb430cd", "message": "test cleanup", "committedDate": "2020-02-06T00:43:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTczMjUwMQ==", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375732501", "bodyText": "For another day but I wonder if we could use JUnit's \"parameterised\" feature to do this.", "author": "massdosage", "createdAt": "2020-02-06T09:46:57Z", "path": "circus-train-core/src/test/java/com/hotels/bdp/circustrain/core/replica/ReplicaTest.java", "diffHunk": "@@ -423,41 +466,106 @@ public void alteringExistingPartitionedReplicaTableWithPartitionsSucceeds() thro\n \n     verify(mockMetaStoreClient).alter_table(eq(DB_NAME), eq(TABLE_NAME), any(Table.class));\n     verify(mockMetaStoreClient).updateTableColumnStatistics(columnStatistics);\n-    verify(mockReplicaLocationManager).addCleanUpLocation(anyString(), any(Path.class));\n-    verify(mockMetaStoreClient).alter_partitions(eq(DB_NAME), eq(TABLE_NAME), alterPartitionCaptor.capture());\n-    verify(mockMetaStoreClient).add_partitions(addPartitionCaptor.capture());\n+    verify(mockReplicaLocationManager, times(numTestAlterPartitions)).addCleanUpLocation(anyString(), any(Path.class));\n+    verify(mockMetaStoreClient, times(numAlterBatches)).alter_partitions(eq(DB_NAME), eq(TABLE_NAME), alterPartitionCaptor.capture());\n+    verify(mockMetaStoreClient, times(numAddBatches)).add_partitions(addPartitionCaptor.capture());\n+\n+    // Validate that the args were expected number of batches , and expected batch sizes\n+    List<List<Partition>> addCaptorValues = addPartitionCaptor.getAllValues();\n+    assertThat(addCaptorValues.size(), is(numAddBatches));\n+\n+    for (int batchNdx = 0; batchNdx < numAddBatches; batchNdx++) {\n+      int thisBatchSize = batchNdx < (numAddBatches - 1) ? TEST_PARTITION_BATCH_SIZE : lastAddBatchSize;\n+      List<Partition> addBatch = addCaptorValues.get(batchNdx);\n+      assertThat(addBatch.size(), is(thisBatchSize));\n+      for (int entryInBatchNdx = 0; entryInBatchNdx < addBatch.size(); entryInBatchNdx++) {\n+        assertThat(addBatch.get(entryInBatchNdx).getValues(),\n+                is(Arrays.asList(String.format(\"new_%s\", (batchNdx * TEST_PARTITION_BATCH_SIZE) + entryInBatchNdx),\n+                        String.format(\"new_%s_sub\", (batchNdx * TEST_PARTITION_BATCH_SIZE) + entryInBatchNdx))));\n+      }\n+    }\n \n-    assertThat(alterPartitionCaptor.getValue().size(), is(1));\n-    assertThat(addPartitionCaptor.getValue().size(), is(1));\n+    List<List<Partition>> alterCaptorValues = alterPartitionCaptor.getAllValues();\n+    assertThat(alterCaptorValues.size(), is(numAlterBatches));\n+    for (int batchNdx = 0; batchNdx < numAlterBatches; batchNdx++) {\n+      int thisBatchSize = batchNdx < (numAlterBatches - 1) ? TEST_PARTITION_BATCH_SIZE : lastAlterBatchSize;\n+      List<Partition> alterBatch = alterCaptorValues.get(batchNdx);\n+      assertThat(alterBatch.size(), is(thisBatchSize));\n+      for (int entryInBatchNdx = 0; entryInBatchNdx < alterBatch.size(); entryInBatchNdx++) {\n+        assertThat(alterBatch.get(entryInBatchNdx).getValues(),\n+                is(Arrays.asList(String.format(\"exist_%s\", (batchNdx * TEST_PARTITION_BATCH_SIZE) + entryInBatchNdx),\n+                        String.format(\"exist_%s_sub\", (batchNdx * TEST_PARTITION_BATCH_SIZE) + entryInBatchNdx))));\n+      }\n+    }\n \n-    Partition altered = alterPartitionCaptor.getValue().get(0);\n-    assertThat(altered.getValues(), is(Arrays.asList(\"one\", \"two\")));\n+    verify(mockMetaStoreClient, times(numStatisticsBatches)).setPartitionColumnStatistics(setStatsRequestCaptor.capture());\n+    List<SetPartitionsStatsRequest> statsRequestList = setStatsRequestCaptor.getAllValues();\n+    assertThat(statsRequestList.size(), is(numStatisticsBatches));\n \n-    Partition added = addPartitionCaptor.getValue().get(0);\n-    assertThat(added.getValues(), is(Arrays.asList(\"three\", \"four\")));\n+    List<ColumnStatistics> columnStats = new ArrayList<>();\n+    for (int colStatNdx = 0; colStatNdx < numStatisticsBatches; colStatNdx++) {\n+      int thisBatchSize = colStatNdx < (numStatisticsBatches - 1) ? TEST_PARTITION_BATCH_SIZE : lastStatisticsBatchSize;\n+      assertThat(statsRequestList.get(colStatNdx).getColStats().size(), is(thisBatchSize));\n+      columnStats.addAll(statsRequestList.get(colStatNdx).getColStats());\n+    }\n \n-    verify(mockMetaStoreClient).setPartitionColumnStatistics(setStatsRequestCaptor.capture());\n-    SetPartitionsStatsRequest statsRequest = setStatsRequestCaptor.getValue();\n+    assertThat(columnStats.size(), is(numTestAlterPartitions + numTestAddPartitions));\n \n-    List<ColumnStatistics> columnStats = new ArrayList<>(statsRequest.getColStats());\n-    Collections.sort(columnStats, new Comparator<ColumnStatistics>() {\n-      @Override\n-      public int compare(ColumnStatistics o1, ColumnStatistics o2) {\n-        return o1.getStatsDesc().getPartName().compareTo(o2.getStatsDesc().getPartName());\n-      }\n-    });\n-    assertThat(columnStats.size(), is(2));\n+    for (int colStatNdx = 0; colStatNdx < numTestAlterPartitions; colStatNdx++) {\n+      assertThat(columnStats.get(colStatNdx).getStatsDesc().isIsTblLevel(), is(false));\n+      assertThat(columnStats.get(colStatNdx).getStatsDesc().getDbName(), is(DB_NAME));\n+      assertThat(columnStats.get(colStatNdx).getStatsDesc().getTableName(), is(TABLE_NAME));\n+      assertThat(columnStats.get(colStatNdx).getStatsDesc().getPartName(),\n+              is(String.format(\"c=exist_%s/d=exist_%s_sub\", colStatNdx, colStatNdx)));\n+      assertThat(columnStats.get(colStatNdx).getStatsObj().size(), is(2));\n+    }\n \n-    assertThat(columnStats.get(0).getStatsDesc().isIsTblLevel(), is(false));\n-    assertThat(columnStats.get(0).getStatsDesc().getDbName(), is(DB_NAME));\n-    assertThat(columnStats.get(0).getStatsDesc().getTableName(), is(TABLE_NAME));\n-    assertThat(columnStats.get(0).getStatsDesc().getPartName(), is(\"c=one/d=two\"));\n-    assertThat(columnStats.get(0).getStatsObj().size(), is(2));\n-    assertThat(columnStats.get(1).getStatsDesc().isIsTblLevel(), is(false));\n-    assertThat(columnStats.get(1).getStatsDesc().getDbName(), is(DB_NAME));\n-    assertThat(columnStats.get(1).getStatsDesc().getTableName(), is(TABLE_NAME));\n-    assertThat(columnStats.get(1).getStatsDesc().getPartName(), is(\"c=three/d=four\"));\n-    assertThat(columnStats.get(1).getStatsObj().size(), is(2));\n+    for (int colStatNdx = numTestAlterPartitions, addPartColStatNdx = 0;\n+         colStatNdx < numTestAlterPartitions + numTestAddPartitions;\n+         colStatNdx++, addPartColStatNdx++) {\n+      assertThat(columnStats.get(colStatNdx).getStatsDesc().isIsTblLevel(), is(false));\n+      assertThat(columnStats.get(colStatNdx).getStatsDesc().getDbName(), is(DB_NAME));\n+      assertThat(columnStats.get(colStatNdx).getStatsDesc().getTableName(), is(TABLE_NAME));\n+      assertThat(columnStats.get(colStatNdx).getStatsDesc().getPartName(),\n+              is(String.format(\"c=new_%s/d=new_%s_sub\", addPartColStatNdx, addPartColStatNdx)));\n+      assertThat(columnStats.get(colStatNdx).getStatsObj().size(), is(2));\n+    }\n+  }\n+\n+\n+  @Test\n+  public void alteringExistingPartitionedReplicaTableWithNewPartitionsInBatchesSucceeds_0_0() throws TException, IOException {\n+    alterExistingPartitionedReplicaTableWithNewPartitionsInBatches(0,0);", "originalCommit": "0aa35464dd74f0a4fef65d8cb7e67f8befb430cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTg1OTE5NQ==", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375859195", "bodyText": "I looked into that, but found references to Parameterized not working with MockitoJUnitRunner (https://stackoverflow.com/questions/12606148/passing-parameterized-input-using-mockitos) so I didn't pursue further in the interest of time.  But yes, that would be the perfect for this situation.", "author": "barnharts4", "createdAt": "2020-02-06T14:19:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTczMjUwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk4MTU4MA==", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375981580", "bodyText": "Ah, OK. We should move to JUnit5 at some point as then it can definitely be done, see https://github.com/ExpediaGroup/beekeeper/blob/master/beekeeper-path-scheduler-apiary/src/test/java/com/expediagroup/beekeeper/scheduler/filter/WhitelistedListenerEventFilterTest.java", "author": "massdosage", "createdAt": "2020-02-06T17:38:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTczMjUwMQ=="}], "type": "inlineReview", "revised_code": null}]}