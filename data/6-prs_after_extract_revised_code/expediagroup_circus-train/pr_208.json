{"pr_number": 208, "pr_title": "Add check for empty list delete", "pr_createdAt": "2020-12-08T09:37:59Z", "pr_url": "https://github.com/ExpediaGroup/circus-train/pull/208", "timeline": [{"oid": "a66f7d7f770293ffe67ba745340cd02aca825ca0", "url": "https://github.com/ExpediaGroup/circus-train/commit/a66f7d7f770293ffe67ba745340cd02aca825ca0", "message": "add check for empty list to delete", "committedDate": "2020-12-08T09:24:37Z", "type": "commit"}, {"oid": "211c39cc3259b36c65bd6b2a1ae97dd42dd07c9d", "url": "https://github.com/ExpediaGroup/circus-train/commit/211c39cc3259b36c65bd6b2a1ae97dd42dd07c9d", "message": "Update CHANGELOG.md", "committedDate": "2020-12-08T09:34:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE5MTA5NQ==", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#discussion_r538191095", "bodyText": "Is false the most appropriate return value here? Although this is a special case, we have that 0 files have been deleted out of 0 requested (unless the return value is also an indication that a delete operation did actually take place).", "author": "nvitucci", "createdAt": "2020-12-08T09:49:50Z", "path": "circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/S3DataManipulator.java", "diffHunk": "@@ -54,6 +54,11 @@ public boolean delete(String path) {\n     List<KeyVersion> keysToDelete = getKeysToDelete(bucket, uri.getKey());\n     log.debug(\"Deleting keys: {}\", keysToDelete.stream().map(k -> k.getKey()).collect(Collectors.toList()));\n \n+    if (keysToDelete.isEmpty()) {\n+      log.info(\"Nothing to delete at location: {}\", path);\n+      return false;", "originalCommit": "211c39cc3259b36c65bd6b2a1ae97dd42dd07c9d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE5NDg2Mg==", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#discussion_r538194862", "bodyText": "Hmm, I'm not actually sure, I couldn't find the result of this method used anywhere", "author": "andreeapad", "createdAt": "2020-12-08T09:54:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE5MTA5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODIwMDU0MQ==", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#discussion_r538200541", "bodyText": "Same here, the only call I have found for this method discards the return value. @patduin, what do you think?", "author": "nvitucci", "createdAt": "2020-12-08T10:02:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE5MTA5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM3NzY1NQ==", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#discussion_r538377655", "bodyText": "I think it's ok, false is what io.File.delete() does.\nUnfortunately this class does not have a test, luckily that will soon be fixed right @andreeapad ?!? :)", "author": "patduin", "createdAt": "2020-12-08T13:37:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE5MTA5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQzNjYyMQ==", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#discussion_r538436621", "bodyText": "yes, good point @patduin  \ud83d\ude04", "author": "andreeapad", "createdAt": "2020-12-08T14:32:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE5MTA5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "84cbe071a9802ec28fe37b515ec6113ef7d0a511", "chunk": "diff --git a/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/S3DataManipulator.java b/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/S3DataManipulator.java\nindex f03874df..6e9d38b1 100644\n--- a/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/S3DataManipulator.java\n+++ b/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/S3DataManipulator.java\n\n@@ -50,15 +50,14 @@ public class S3DataManipulator implements DataManipulator {\n     log.info(\"Deleting all data at location: {}\", path);\n     AmazonS3URI uri = toAmazonS3URI(URI.create(path));\n     String bucket = uri.getBucket();\n-\n     List<KeyVersion> keysToDelete = getKeysToDelete(bucket, uri.getKey());\n-    log.debug(\"Deleting keys: {}\", keysToDelete.stream().map(k -> k.getKey()).collect(Collectors.toList()));\n \n     if (keysToDelete.isEmpty()) {\n       log.info(\"Nothing to delete at location: {}\", path);\n       return false;\n     }\n \n+    log.debug(\"Deleting keys: {}\", keysToDelete.stream().map(k -> k.getKey()).collect(Collectors.toList()));\n     DeleteObjectsResult result = s3Client.deleteObjects(new DeleteObjectsRequest(bucket).withKeys(keysToDelete));\n     return successfulDeletion(result, keysToDelete.size());\n   }\n"}}, {"oid": "b50aa22d1c97270301ad74002cb11b6d8a9a3b9b", "url": "https://github.com/ExpediaGroup/circus-train/commit/b50aa22d1c97270301ad74002cb11b6d8a9a3b9b", "message": "Add test for S3DataManipulator", "committedDate": "2020-12-08T16:17:12Z", "type": "commit"}, {"oid": "ed72141ea25f41ccb185c4e234575c74463fd1fb", "url": "https://github.com/ExpediaGroup/circus-train/commit/ed72141ea25f41ccb185c4e234575c74463fd1fb", "message": "Add test dependency", "committedDate": "2020-12-08T16:17:23Z", "type": "commit"}, {"oid": "8bd12f4651738060a6a61c9eceed32095433dc86", "url": "https://github.com/ExpediaGroup/circus-train/commit/8bd12f4651738060a6a61c9eceed32095433dc86", "message": "licence", "committedDate": "2020-12-08T16:24:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYwMzU3OA==", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#discussion_r538603578", "bodyText": "This may be slightly pedantic, but this test is testing that calling delete on s3://empty-bucket does what is expected.  The situation of the error is just slightly different - calling delete on s3://bucket/empty-folder/, where empty-folder has no sub-keys.  Maybe we should add a test for this (or change this test)?", "author": "barnharts4", "createdAt": "2020-12-08T16:59:58Z", "path": "circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.aws;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.*;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.apache.hadoop.fs.s3a.BasicAWSCredentialsProvider;\n+import org.gaul.s3proxy.junit.S3ProxyRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.regions.Regions;\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3ClientBuilder;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class S3DataManipulatorTest {\n+\n+  private static final String AWS_ACCESS_KEY = \"access\";\n+  private static final String AWS_SECRET_KEY = \"secret\";\n+  private static final String BUCKET = \"bucket\";\n+  private static final String EMPTY_BUCKET = \"empty-bucket\";\n+  private static final String PATH =\"s3://\" + BUCKET;\n+  private static final String EMPTY_PATH =\"s3://\" + EMPTY_BUCKET;\n+\n+  public @Rule TemporaryFolder temp = new TemporaryFolder();\n+  public @Rule S3ProxyRule s3Proxy = S3ProxyRule.builder().withCredentials(AWS_ACCESS_KEY, AWS_SECRET_KEY).build();\n+\n+  private S3DataManipulator s3DataManipulator;\n+  private AmazonS3 s3Client;\n+\n+  @Before\n+  public void setUp() {\n+    s3Client = newClient();\n+    s3DataManipulator = new S3DataManipulator(s3Client);\n+  }\n+\n+  private AmazonS3 newClient() {\n+    AwsClientBuilder.EndpointConfiguration endpointConfiguration = new AwsClientBuilder.EndpointConfiguration(s3Proxy.getUri().toString(),\n+        Regions.DEFAULT_REGION.getName());\n+    AmazonS3 newClient = AmazonS3ClientBuilder\n+        .standard()\n+        .withCredentials(new BasicAWSCredentialsProvider(AWS_ACCESS_KEY, AWS_SECRET_KEY))\n+        .withEndpointConfiguration(endpointConfiguration)\n+        .build();\n+    return newClient;\n+  }\n+\n+  @Test\n+  public void deleteFails() {\n+    s3Client.createBucket(EMPTY_BUCKET);\n+    boolean result = s3DataManipulator.delete(EMPTY_PATH);\n+    assertThat(result, is(false));\n+  }", "originalCommit": "8bd12f4651738060a6a61c9eceed32095433dc86", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY1MDQ1MQ==", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#discussion_r538650451", "bodyText": "yes, I updated the tests \ud83d\udc4d", "author": "andreeapad", "createdAt": "2020-12-08T17:43:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYwMzU3OA=="}], "type": "inlineReview", "revised_code": {"commit": "950e9e1b07250a3f232662e4f47cefffad9e7120", "chunk": "diff --git a/circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java b/circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java\nindex 8afa7172..17bf7db0 100644\n--- a/circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java\n+++ b/circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java\n\n@@ -41,9 +41,10 @@ public class S3DataManipulatorTest {\n   private static final String AWS_ACCESS_KEY = \"access\";\n   private static final String AWS_SECRET_KEY = \"secret\";\n   private static final String BUCKET = \"bucket\";\n+  private static final String BUCKET_PATH = \"s3://\" + BUCKET;\n+  private static final String FOLDER = \"folder\";\n+  private static final String EMPTY_FOLDER = \"empty-folder\";\n   private static final String EMPTY_BUCKET = \"empty-bucket\";\n-  private static final String PATH =\"s3://\" + BUCKET;\n-  private static final String EMPTY_PATH =\"s3://\" + EMPTY_BUCKET;\n \n   public @Rule TemporaryFolder temp = new TemporaryFolder();\n   public @Rule S3ProxyRule s3Proxy = S3ProxyRule.builder().withCredentials(AWS_ACCESS_KEY, AWS_SECRET_KEY).build();\n"}}, {"oid": "950e9e1b07250a3f232662e4f47cefffad9e7120", "url": "https://github.com/ExpediaGroup/circus-train/commit/950e9e1b07250a3f232662e4f47cefffad9e7120", "message": "Modify tests", "committedDate": "2020-12-08T17:41:22Z", "type": "commit"}, {"oid": "2ea693a5ae062aeb3354ab0611e6ad15fdd6c1b9", "url": "https://github.com/ExpediaGroup/circus-train/commit/2ea693a5ae062aeb3354ab0611e6ad15fdd6c1b9", "message": "Change test names + add test", "committedDate": "2020-12-08T17:46:30Z", "type": "commit"}, {"oid": "2bbe36b209dce26d55cf9140e8c0bc2bf99854b8", "url": "https://github.com/ExpediaGroup/circus-train/commit/2bbe36b209dce26d55cf9140e8c0bc2bf99854b8", "message": "Fix tests", "committedDate": "2020-12-08T17:51:56Z", "type": "commit"}, {"oid": "ea80dd69b3602cabcb38567d923443720a3eb803", "url": "https://github.com/ExpediaGroup/circus-train/commit/ea80dd69b3602cabcb38567d923443720a3eb803", "message": "delete test", "committedDate": "2020-12-08T18:17:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE4NjA3Mw==", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#discussion_r539186073", "bodyText": "Maybe move this to line 61 as there's no point outputting this if there's nothing to delete?", "author": "massdosage", "createdAt": "2020-12-09T10:25:30Z", "path": "circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/S3DataManipulator.java", "diffHunk": "@@ -54,6 +54,11 @@ public boolean delete(String path) {\n     List<KeyVersion> keysToDelete = getKeysToDelete(bucket, uri.getKey());\n     log.debug(\"Deleting keys: {}\", keysToDelete.stream().map(k -> k.getKey()).collect(Collectors.toList()));", "originalCommit": "ea80dd69b3602cabcb38567d923443720a3eb803", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE5NzQ2Mw==", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#discussion_r539197463", "bodyText": "yeah", "author": "andreeapad", "createdAt": "2020-12-09T10:41:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE4NjA3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "84cbe071a9802ec28fe37b515ec6113ef7d0a511", "chunk": "diff --git a/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/S3DataManipulator.java b/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/S3DataManipulator.java\nindex f03874df..6e9d38b1 100644\n--- a/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/S3DataManipulator.java\n+++ b/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/S3DataManipulator.java\n\n@@ -50,15 +50,14 @@ public class S3DataManipulator implements DataManipulator {\n     log.info(\"Deleting all data at location: {}\", path);\n     AmazonS3URI uri = toAmazonS3URI(URI.create(path));\n     String bucket = uri.getBucket();\n-\n     List<KeyVersion> keysToDelete = getKeysToDelete(bucket, uri.getKey());\n-    log.debug(\"Deleting keys: {}\", keysToDelete.stream().map(k -> k.getKey()).collect(Collectors.toList()));\n \n     if (keysToDelete.isEmpty()) {\n       log.info(\"Nothing to delete at location: {}\", path);\n       return false;\n     }\n \n+    log.debug(\"Deleting keys: {}\", keysToDelete.stream().map(k -> k.getKey()).collect(Collectors.toList()));\n     DeleteObjectsResult result = s3Client.deleteObjects(new DeleteObjectsRequest(bucket).withKeys(keysToDelete));\n     return successfulDeletion(result, keysToDelete.size());\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE4NzEwNg==", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#discussion_r539187106", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void deleteInexistentFolderFails() {\n          \n          \n            \n              public void deleteNonexistentFolderFails() {", "author": "massdosage", "createdAt": "2020-12-09T10:27:00Z", "path": "circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.aws;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.*;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.apache.hadoop.fs.s3a.BasicAWSCredentialsProvider;\n+import org.gaul.s3proxy.junit.S3ProxyRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.regions.Regions;\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3ClientBuilder;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class S3DataManipulatorTest {\n+\n+  private static final String AWS_ACCESS_KEY = \"access\";\n+  private static final String AWS_SECRET_KEY = \"secret\";\n+  private static final String BUCKET = \"bucket\";\n+  private static final String BUCKET_PATH = \"s3://\" + BUCKET;\n+  private static final String FOLDER = \"folder\";\n+  private static final String EMPTY_BUCKET = \"empty-bucket\";\n+\n+  public @Rule TemporaryFolder temp = new TemporaryFolder();\n+  public @Rule S3ProxyRule s3Proxy = S3ProxyRule.builder().withCredentials(AWS_ACCESS_KEY, AWS_SECRET_KEY).build();\n+\n+  private S3DataManipulator s3DataManipulator;\n+  private AmazonS3 s3Client;\n+\n+  @Before\n+  public void setUp() {\n+    s3Client = newClient();\n+    s3DataManipulator = new S3DataManipulator(s3Client);\n+  }\n+\n+  private AmazonS3 newClient() {\n+    AwsClientBuilder.EndpointConfiguration endpointConfiguration = new AwsClientBuilder.EndpointConfiguration(s3Proxy.getUri().toString(),\n+        Regions.DEFAULT_REGION.getName());\n+    AmazonS3 newClient = AmazonS3ClientBuilder\n+        .standard()\n+        .withCredentials(new BasicAWSCredentialsProvider(AWS_ACCESS_KEY, AWS_SECRET_KEY))\n+        .withEndpointConfiguration(endpointConfiguration)\n+        .build();\n+    return newClient;\n+  }\n+\n+  @Test\n+  public void deleteFolderSucceeds() throws IOException {\n+    s3Client.createBucket(BUCKET);\n+    File inputData = temp.newFile(\"data\");\n+    s3Client.putObject(BUCKET, FOLDER, inputData);\n+    boolean result = s3DataManipulator.delete(BUCKET_PATH + \"/\" + FOLDER);\n+    assertThat(result, is(true));\n+  }\n+\n+  @Test\n+  public void deleteInexistentFolderFails() {", "originalCommit": "ea80dd69b3602cabcb38567d923443720a3eb803", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d55040ccb432c387a29015d146b281173f61f50d", "chunk": "diff --git a/circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java b/circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java\nindex 062e70eb..4d90d365 100644\n--- a/circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java\n+++ b/circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java\n\n@@ -78,14 +78,14 @@ public class S3DataManipulatorTest {\n   }\n \n   @Test\n-  public void deleteInexistentFolderFails() {\n+  public void deleteNonexistentFolderFails() {\n     s3Client.createBucket(BUCKET);\n-    boolean result = s3DataManipulator.delete(BUCKET_PATH + \"/inexistent-folder\");\n+    boolean result = s3DataManipulator.delete(BUCKET_PATH + \"/nonexistent-folder\");\n     assertThat(result, is(false));\n   }\n \n   @Test\n-  public void deleteBucketSucceeds() {\n+  public void deleteBucketFails() {\n     s3Client.createBucket(BUCKET);\n     boolean result = s3DataManipulator.delete(BUCKET_PATH);\n     assertThat(result, is(false));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE4NzMyNg==", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#discussion_r539187326", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                boolean result = s3DataManipulator.delete(BUCKET_PATH + \"/inexistent-folder\");\n          \n          \n            \n                boolean result = s3DataManipulator.delete(BUCKET_PATH + \"/nonexistent-folder\");", "author": "massdosage", "createdAt": "2020-12-09T10:27:15Z", "path": "circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.aws;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.*;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.apache.hadoop.fs.s3a.BasicAWSCredentialsProvider;\n+import org.gaul.s3proxy.junit.S3ProxyRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.regions.Regions;\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3ClientBuilder;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class S3DataManipulatorTest {\n+\n+  private static final String AWS_ACCESS_KEY = \"access\";\n+  private static final String AWS_SECRET_KEY = \"secret\";\n+  private static final String BUCKET = \"bucket\";\n+  private static final String BUCKET_PATH = \"s3://\" + BUCKET;\n+  private static final String FOLDER = \"folder\";\n+  private static final String EMPTY_BUCKET = \"empty-bucket\";\n+\n+  public @Rule TemporaryFolder temp = new TemporaryFolder();\n+  public @Rule S3ProxyRule s3Proxy = S3ProxyRule.builder().withCredentials(AWS_ACCESS_KEY, AWS_SECRET_KEY).build();\n+\n+  private S3DataManipulator s3DataManipulator;\n+  private AmazonS3 s3Client;\n+\n+  @Before\n+  public void setUp() {\n+    s3Client = newClient();\n+    s3DataManipulator = new S3DataManipulator(s3Client);\n+  }\n+\n+  private AmazonS3 newClient() {\n+    AwsClientBuilder.EndpointConfiguration endpointConfiguration = new AwsClientBuilder.EndpointConfiguration(s3Proxy.getUri().toString(),\n+        Regions.DEFAULT_REGION.getName());\n+    AmazonS3 newClient = AmazonS3ClientBuilder\n+        .standard()\n+        .withCredentials(new BasicAWSCredentialsProvider(AWS_ACCESS_KEY, AWS_SECRET_KEY))\n+        .withEndpointConfiguration(endpointConfiguration)\n+        .build();\n+    return newClient;\n+  }\n+\n+  @Test\n+  public void deleteFolderSucceeds() throws IOException {\n+    s3Client.createBucket(BUCKET);\n+    File inputData = temp.newFile(\"data\");\n+    s3Client.putObject(BUCKET, FOLDER, inputData);\n+    boolean result = s3DataManipulator.delete(BUCKET_PATH + \"/\" + FOLDER);\n+    assertThat(result, is(true));\n+  }\n+\n+  @Test\n+  public void deleteInexistentFolderFails() {\n+    s3Client.createBucket(BUCKET);\n+    boolean result = s3DataManipulator.delete(BUCKET_PATH + \"/inexistent-folder\");", "originalCommit": "ea80dd69b3602cabcb38567d923443720a3eb803", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d55040ccb432c387a29015d146b281173f61f50d", "chunk": "diff --git a/circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java b/circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java\nindex 062e70eb..4d90d365 100644\n--- a/circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java\n+++ b/circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java\n\n@@ -78,14 +78,14 @@ public class S3DataManipulatorTest {\n   }\n \n   @Test\n-  public void deleteInexistentFolderFails() {\n+  public void deleteNonexistentFolderFails() {\n     s3Client.createBucket(BUCKET);\n-    boolean result = s3DataManipulator.delete(BUCKET_PATH + \"/inexistent-folder\");\n+    boolean result = s3DataManipulator.delete(BUCKET_PATH + \"/nonexistent-folder\");\n     assertThat(result, is(false));\n   }\n \n   @Test\n-  public void deleteBucketSucceeds() {\n+  public void deleteBucketFails() {\n     s3Client.createBucket(BUCKET);\n     boolean result = s3DataManipulator.delete(BUCKET_PATH);\n     assertThat(result, is(false));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE4ODMzMQ==", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#discussion_r539188331", "bodyText": "Method says \"succeeds\" but assertion is on method returning false. Is the behaviour here that it will return false as it can't actually delete a bucket?", "author": "massdosage", "createdAt": "2020-12-09T10:28:46Z", "path": "circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.aws;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.*;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.apache.hadoop.fs.s3a.BasicAWSCredentialsProvider;\n+import org.gaul.s3proxy.junit.S3ProxyRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.regions.Regions;\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3ClientBuilder;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class S3DataManipulatorTest {\n+\n+  private static final String AWS_ACCESS_KEY = \"access\";\n+  private static final String AWS_SECRET_KEY = \"secret\";\n+  private static final String BUCKET = \"bucket\";\n+  private static final String BUCKET_PATH = \"s3://\" + BUCKET;\n+  private static final String FOLDER = \"folder\";\n+  private static final String EMPTY_BUCKET = \"empty-bucket\";\n+\n+  public @Rule TemporaryFolder temp = new TemporaryFolder();\n+  public @Rule S3ProxyRule s3Proxy = S3ProxyRule.builder().withCredentials(AWS_ACCESS_KEY, AWS_SECRET_KEY).build();\n+\n+  private S3DataManipulator s3DataManipulator;\n+  private AmazonS3 s3Client;\n+\n+  @Before\n+  public void setUp() {\n+    s3Client = newClient();\n+    s3DataManipulator = new S3DataManipulator(s3Client);\n+  }\n+\n+  private AmazonS3 newClient() {\n+    AwsClientBuilder.EndpointConfiguration endpointConfiguration = new AwsClientBuilder.EndpointConfiguration(s3Proxy.getUri().toString(),\n+        Regions.DEFAULT_REGION.getName());\n+    AmazonS3 newClient = AmazonS3ClientBuilder\n+        .standard()\n+        .withCredentials(new BasicAWSCredentialsProvider(AWS_ACCESS_KEY, AWS_SECRET_KEY))\n+        .withEndpointConfiguration(endpointConfiguration)\n+        .build();\n+    return newClient;\n+  }\n+\n+  @Test\n+  public void deleteFolderSucceeds() throws IOException {\n+    s3Client.createBucket(BUCKET);\n+    File inputData = temp.newFile(\"data\");\n+    s3Client.putObject(BUCKET, FOLDER, inputData);\n+    boolean result = s3DataManipulator.delete(BUCKET_PATH + \"/\" + FOLDER);\n+    assertThat(result, is(true));\n+  }\n+\n+  @Test\n+  public void deleteInexistentFolderFails() {\n+    s3Client.createBucket(BUCKET);\n+    boolean result = s3DataManipulator.delete(BUCKET_PATH + \"/inexistent-folder\");\n+    assertThat(result, is(false));\n+  }\n+\n+  @Test\n+  public void deleteBucketSucceeds() {", "originalCommit": "ea80dd69b3602cabcb38567d923443720a3eb803", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE5NDI4MQ==", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#discussion_r539194281", "bodyText": "oops, it should be fails in this case, I have to modify the test to make it succeed actually", "author": "andreeapad", "createdAt": "2020-12-09T10:37:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE4ODMzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "d55040ccb432c387a29015d146b281173f61f50d", "chunk": "diff --git a/circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java b/circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java\nindex 062e70eb..4d90d365 100644\n--- a/circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java\n+++ b/circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java\n\n@@ -78,14 +78,14 @@ public class S3DataManipulatorTest {\n   }\n \n   @Test\n-  public void deleteInexistentFolderFails() {\n+  public void deleteNonexistentFolderFails() {\n     s3Client.createBucket(BUCKET);\n-    boolean result = s3DataManipulator.delete(BUCKET_PATH + \"/inexistent-folder\");\n+    boolean result = s3DataManipulator.delete(BUCKET_PATH + \"/nonexistent-folder\");\n     assertThat(result, is(false));\n   }\n \n   @Test\n-  public void deleteBucketSucceeds() {\n+  public void deleteBucketFails() {\n     s3Client.createBucket(BUCKET);\n     boolean result = s3DataManipulator.delete(BUCKET_PATH);\n     assertThat(result, is(false));\n"}}, {"oid": "d55040ccb432c387a29015d146b281173f61f50d", "url": "https://github.com/ExpediaGroup/circus-train/commit/d55040ccb432c387a29015d146b281173f61f50d", "message": "typo", "committedDate": "2020-12-09T10:37:43Z", "type": "commit"}, {"oid": "84cbe071a9802ec28fe37b515ec6113ef7d0a511", "url": "https://github.com/ExpediaGroup/circus-train/commit/84cbe071a9802ec28fe37b515ec6113ef7d0a511", "message": "move log", "committedDate": "2020-12-09T10:42:06Z", "type": "commit"}, {"oid": "f9f728266ff5f04457b4a10e544b903398da4f4f", "url": "https://github.com/ExpediaGroup/circus-train/commit/f9f728266ff5f04457b4a10e544b903398da4f4f", "message": "Update tests", "committedDate": "2020-12-09T10:42:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIwMzU0MQ==", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#discussion_r539203541", "bodyText": "I think this is actually non-existent bucket not empty right? As we don't create it anywhere.", "author": "massdosage", "createdAt": "2020-12-09T10:50:59Z", "path": "circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.aws;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.*;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.apache.hadoop.fs.s3a.BasicAWSCredentialsProvider;\n+import org.gaul.s3proxy.junit.S3ProxyRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.regions.Regions;\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3ClientBuilder;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class S3DataManipulatorTest {\n+\n+  private static final String AWS_ACCESS_KEY = \"access\";\n+  private static final String AWS_SECRET_KEY = \"secret\";\n+  private static final String BUCKET = \"bucket\";\n+  private static final String BUCKET_PATH = \"s3://\" + BUCKET;\n+  private static final String FOLDER = \"folder\";\n+  private static final String EMPTY_BUCKET = \"empty-bucket\";", "originalCommit": "f9f728266ff5f04457b4a10e544b903398da4f4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIwNTQwNA==", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#discussion_r539205404", "bodyText": "We create it in the last test. If we try to delete a non-existent bucket, we get an AmazonS3Exception. Should I add a test for that as well?", "author": "andreeapad", "createdAt": "2020-12-09T10:53:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIwMzU0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIwNjQ2OA==", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#discussion_r539206468", "bodyText": "Ah you're right, sorry,  I missed that. Might as well add a test for a non-existent bucket, it's an edge case we should never run into but to be thorough would be good to test it.", "author": "massdosage", "createdAt": "2020-12-09T10:55:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIwMzU0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "775991bef427d18f040ccbd11238504ce2df73b3", "chunk": "diff --git a/circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java b/circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java\nindex 75915851..697886e6 100644\n--- a/circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java\n+++ b/circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java\n\n@@ -34,6 +34,7 @@ import com.amazonaws.client.builder.AwsClientBuilder;\n import com.amazonaws.regions.Regions;\n import com.amazonaws.services.s3.AmazonS3;\n import com.amazonaws.services.s3.AmazonS3ClientBuilder;\n+import com.amazonaws.services.s3.model.AmazonS3Exception;\n \n @RunWith(MockitoJUnitRunner.class)\n public class S3DataManipulatorTest {\n"}}, {"oid": "775991bef427d18f040ccbd11238504ce2df73b3", "url": "https://github.com/ExpediaGroup/circus-train/commit/775991bef427d18f040ccbd11238504ce2df73b3", "message": "Add test", "committedDate": "2020-12-09T10:57:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIxMDY1NQ==", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#discussion_r539210655", "bodyText": "If this throws an exception you don't need to store the result or assert on it as that code will never execute.", "author": "massdosage", "createdAt": "2020-12-09T11:01:32Z", "path": "circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.aws;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.*;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.apache.hadoop.fs.s3a.BasicAWSCredentialsProvider;\n+import org.gaul.s3proxy.junit.S3ProxyRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.regions.Regions;\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3ClientBuilder;\n+import com.amazonaws.services.s3.model.AmazonS3Exception;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class S3DataManipulatorTest {\n+\n+  private static final String AWS_ACCESS_KEY = \"access\";\n+  private static final String AWS_SECRET_KEY = \"secret\";\n+  private static final String BUCKET = \"bucket\";\n+  private static final String BUCKET_PATH = \"s3://\" + BUCKET;\n+  private static final String FOLDER = \"folder\";\n+  private static final String EMPTY_BUCKET = \"empty-bucket\";\n+\n+  public @Rule TemporaryFolder temp = new TemporaryFolder();\n+  public @Rule S3ProxyRule s3Proxy = S3ProxyRule.builder().withCredentials(AWS_ACCESS_KEY, AWS_SECRET_KEY).build();\n+\n+  private S3DataManipulator s3DataManipulator;\n+  private AmazonS3 s3Client;\n+\n+  @Before\n+  public void setUp() throws IOException {\n+    s3Client = newClient();\n+    s3DataManipulator = new S3DataManipulator(s3Client);\n+    s3Client.createBucket(BUCKET);\n+    File inputData = temp.newFile(\"data\");\n+    s3Client.putObject(BUCKET, FOLDER, inputData);\n+  }\n+\n+  private AmazonS3 newClient() {\n+    AwsClientBuilder.EndpointConfiguration endpointConfiguration = new AwsClientBuilder.EndpointConfiguration(s3Proxy.getUri().toString(),\n+        Regions.DEFAULT_REGION.getName());\n+    AmazonS3 newClient = AmazonS3ClientBuilder\n+        .standard()\n+        .withCredentials(new BasicAWSCredentialsProvider(AWS_ACCESS_KEY, AWS_SECRET_KEY))\n+        .withEndpointConfiguration(endpointConfiguration)\n+        .build();\n+    return newClient;\n+  }\n+\n+  @Test\n+  public void deleteFolderSucceeds() {\n+    boolean result = s3DataManipulator.delete(BUCKET_PATH + \"/\" + FOLDER);\n+    assertThat(result, is(true));\n+  }\n+\n+  @Test\n+  public void deleteNonexistentFolderFails() {\n+    boolean result = s3DataManipulator.delete(BUCKET_PATH + \"/nonexistent-folder\");\n+    assertThat(result, is(false));\n+  }\n+\n+  @Test\n+  public void deleteBucketSucceeds() {\n+    boolean result = s3DataManipulator.delete(BUCKET_PATH);\n+    assertThat(result, is(true));\n+  }\n+\n+  @Test\n+  public void deleteEmptyBucketFails() {\n+    s3Client.createBucket(EMPTY_BUCKET);\n+    boolean result = s3DataManipulator.delete(\"s3://\" + EMPTY_BUCKET);\n+    assertThat(result, is(false));\n+  }\n+\n+  @Test(expected = AmazonS3Exception.class)\n+  public void deleteNonExistentBucketThrowsException() {\n+    boolean result = s3DataManipulator.delete(\"s3://\" + \"nonexistent-bucket\");", "originalCommit": "775991bef427d18f040ccbd11238504ce2df73b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIxNjAwOQ==", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#discussion_r539216009", "bodyText": "true, copy pasted and forgot to update \ud83d\ude04", "author": "andreeapad", "createdAt": "2020-12-09T11:09:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIxMDY1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "ffebcfff8005c8537a6cef454f483764a3795b9a", "chunk": "diff --git a/circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java b/circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java\nindex 697886e6..bc1c7903 100644\n--- a/circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java\n+++ b/circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java\n\n@@ -99,7 +99,6 @@ public class S3DataManipulatorTest {\n \n   @Test(expected = AmazonS3Exception.class)\n   public void deleteNonExistentBucketThrowsException() {\n-    boolean result = s3DataManipulator.delete(\"s3://\" + \"nonexistent-bucket\");\n-    assertThat(result, is(false));\n+    s3DataManipulator.delete(\"s3://\" + \"nonexistent-bucket\");\n   }\n }\n"}}, {"oid": "ffebcfff8005c8537a6cef454f483764a3795b9a", "url": "https://github.com/ExpediaGroup/circus-train/commit/ffebcfff8005c8537a6cef454f483764a3795b9a", "message": "Remove redundant assert in test", "committedDate": "2020-12-09T11:10:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI0MTU2Mg==", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#discussion_r539241562", "bodyText": "OMG, not sure how this slipped through but we don't want * imports, please get your IDE to expand these.", "author": "massdosage", "createdAt": "2020-12-09T11:50:03Z", "path": "circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.aws;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.*;", "originalCommit": "ffebcfff8005c8537a6cef454f483764a3795b9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI1NDk0Mw==", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#discussion_r539254943", "bodyText": "fixed, not sure what happened either", "author": "andreeapad", "createdAt": "2020-12-09T12:12:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI0MTU2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "4fe05743fbfb58a380c540ecac8ce256f7a01889", "chunk": "diff --git a/circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java b/circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java\nindex bc1c7903..67b6f015 100644\n--- a/circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java\n+++ b/circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java\n\n@@ -16,7 +16,7 @@\n package com.hotels.bdp.circustrain.aws;\n \n import static org.hamcrest.CoreMatchers.is;\n-import static org.junit.Assert.*;\n+import static org.hamcrest.MatcherAssert.assertThat;\n \n import java.io.File;\n import java.io.IOException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI0MTkwOA==", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#discussion_r539241908", "bodyText": "You don't need the + :)", "author": "massdosage", "createdAt": "2020-12-09T11:50:37Z", "path": "circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.aws;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.*;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.apache.hadoop.fs.s3a.BasicAWSCredentialsProvider;\n+import org.gaul.s3proxy.junit.S3ProxyRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.regions.Regions;\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3ClientBuilder;\n+import com.amazonaws.services.s3.model.AmazonS3Exception;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class S3DataManipulatorTest {\n+\n+  private static final String AWS_ACCESS_KEY = \"access\";\n+  private static final String AWS_SECRET_KEY = \"secret\";\n+  private static final String BUCKET = \"bucket\";\n+  private static final String BUCKET_PATH = \"s3://\" + BUCKET;\n+  private static final String FOLDER = \"folder\";\n+  private static final String EMPTY_BUCKET = \"empty-bucket\";\n+\n+  public @Rule TemporaryFolder temp = new TemporaryFolder();\n+  public @Rule S3ProxyRule s3Proxy = S3ProxyRule.builder().withCredentials(AWS_ACCESS_KEY, AWS_SECRET_KEY).build();\n+\n+  private S3DataManipulator s3DataManipulator;\n+  private AmazonS3 s3Client;\n+\n+  @Before\n+  public void setUp() throws IOException {\n+    s3Client = newClient();\n+    s3DataManipulator = new S3DataManipulator(s3Client);\n+    s3Client.createBucket(BUCKET);\n+    File inputData = temp.newFile(\"data\");\n+    s3Client.putObject(BUCKET, FOLDER, inputData);\n+  }\n+\n+  private AmazonS3 newClient() {\n+    AwsClientBuilder.EndpointConfiguration endpointConfiguration = new AwsClientBuilder.EndpointConfiguration(s3Proxy.getUri().toString(),\n+        Regions.DEFAULT_REGION.getName());\n+    AmazonS3 newClient = AmazonS3ClientBuilder\n+        .standard()\n+        .withCredentials(new BasicAWSCredentialsProvider(AWS_ACCESS_KEY, AWS_SECRET_KEY))\n+        .withEndpointConfiguration(endpointConfiguration)\n+        .build();\n+    return newClient;\n+  }\n+\n+  @Test\n+  public void deleteFolderSucceeds() {\n+    boolean result = s3DataManipulator.delete(BUCKET_PATH + \"/\" + FOLDER);\n+    assertThat(result, is(true));\n+  }\n+\n+  @Test\n+  public void deleteNonexistentFolderFails() {\n+    boolean result = s3DataManipulator.delete(BUCKET_PATH + \"/nonexistent-folder\");\n+    assertThat(result, is(false));\n+  }\n+\n+  @Test\n+  public void deleteBucketSucceeds() {\n+    boolean result = s3DataManipulator.delete(BUCKET_PATH);\n+    assertThat(result, is(true));\n+  }\n+\n+  @Test\n+  public void deleteEmptyBucketFails() {\n+    s3Client.createBucket(EMPTY_BUCKET);\n+    boolean result = s3DataManipulator.delete(\"s3://\" + EMPTY_BUCKET);\n+    assertThat(result, is(false));\n+  }\n+\n+  @Test(expected = AmazonS3Exception.class)\n+  public void deleteNonExistentBucketThrowsException() {\n+    s3DataManipulator.delete(\"s3://\" + \"nonexistent-bucket\");", "originalCommit": "ffebcfff8005c8537a6cef454f483764a3795b9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI1MjI0Mg==", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#discussion_r539252242", "bodyText": "ahhhhh", "author": "andreeapad", "createdAt": "2020-12-09T12:07:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI0MTkwOA=="}], "type": "inlineReview", "revised_code": {"commit": "4fe05743fbfb58a380c540ecac8ce256f7a01889", "chunk": "diff --git a/circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java b/circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java\nindex bc1c7903..67b6f015 100644\n--- a/circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java\n+++ b/circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java\n\n@@ -16,7 +16,7 @@\n package com.hotels.bdp.circustrain.aws;\n \n import static org.hamcrest.CoreMatchers.is;\n-import static org.junit.Assert.*;\n+import static org.hamcrest.MatcherAssert.assertThat;\n \n import java.io.File;\n import java.io.IOException;\n"}}, {"oid": "4fe05743fbfb58a380c540ecac8ce256f7a01889", "url": "https://github.com/ExpediaGroup/circus-train/commit/4fe05743fbfb58a380c540ecac8ce256f7a01889", "message": "Fix stuff", "committedDate": "2020-12-09T12:09:12Z", "type": "commit"}]}