{"pr_number": 2365, "pr_title": "Use specific name prefix in preemptive timeout threads", "pr_createdAt": "2020-07-29T16:45:49Z", "pr_url": "https://github.com/junit-team/junit5/pull/2365", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4OTk0Mw==", "url": "https://github.com/junit-team/junit5/pull/2365#discussion_r462489943", "bodyText": "There's no need to do this, Thread already does this if no group is specified explicitly.", "author": "marcphilipp", "createdAt": "2020-07-29T18:07:56Z", "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java", "diffHunk": "@@ -180,4 +182,30 @@ static void assertTimeoutPreemptively(Duration timeout, Executable executable, S\n \t\t}\n \t}\n \n+\t/**\n+\t * The thread factory used for preemptive timeout.\n+\t *\n+\t * This factory is the same with {@link Executors#defaultThreadFactory()} but provides more meaningful thread names,\n+\t * helpful for debugging purposes.\n+\t *\n+\t */\n+\tprivate static class TimeoutThreadFactory implements ThreadFactory {\n+\t\tprivate static final AtomicInteger threadNumber = new AtomicInteger(1);\n+\t\tprivate final ThreadGroup group;\n+\n+\t\tTimeoutThreadFactory() {\n+\t\t\tSecurityManager s = System.getSecurityManager();\n+\t\t\tgroup = (s != null) ? s.getThreadGroup() : Thread.currentThread().getThreadGroup();", "originalCommit": "12ddf80ed1c7ba6fd35c47c4f35548ddaa771a05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU5NDM3Nw==", "url": "https://github.com/junit-team/junit5/pull/2365#discussion_r462594377", "bodyText": "I think it makes sense if the factory is about to create many threads but given that at the moment we have a factory per thread it can be removed.", "author": "zabetak", "createdAt": "2020-07-29T21:16:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4OTk0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "4bc15ee47c7190e7efc76f168f1503a35f668002", "chunk": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\nindex 72f9fb8505..8660bc95a1 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n\n@@ -185,26 +185,13 @@ class AssertTimeout {\n \t/**\n \t * The thread factory used for preemptive timeout.\n \t *\n-\t * This factory is the same with {@link Executors#defaultThreadFactory()} but provides more meaningful thread names,\n-\t * helpful for debugging purposes.\n-\t *\n+\t * The factory creates threads with meaningful names, helpful for debugging purposes.\n \t */\n \tprivate static class TimeoutThreadFactory implements ThreadFactory {\n \t\tprivate static final AtomicInteger threadNumber = new AtomicInteger(1);\n-\t\tprivate final ThreadGroup group;\n-\n-\t\tTimeoutThreadFactory() {\n-\t\t\tSecurityManager s = System.getSecurityManager();\n-\t\t\tgroup = (s != null) ? s.getThreadGroup() : Thread.currentThread().getThreadGroup();\n-\t\t}\n \n \t\tpublic Thread newThread(Runnable r) {\n-\t\t\tThread t = new Thread(group, r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement(), 0);\n-\t\t\tif (t.isDaemon())\n-\t\t\t\tt.setDaemon(false);\n-\t\t\tif (t.getPriority() != Thread.NORM_PRIORITY)\n-\t\t\t\tt.setPriority(Thread.NORM_PRIORITY);\n-\t\t\treturn t;\n+\t\t\treturn new Thread(null, r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement(), 0);\n \t\t}\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ5MDEzNQ==", "url": "https://github.com/junit-team/junit5/pull/2365#discussion_r462490135", "bodyText": "I don't think we need these two ifs as we shut down the executor afterwards.", "author": "marcphilipp", "createdAt": "2020-07-29T18:08:22Z", "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java", "diffHunk": "@@ -180,4 +182,30 @@ static void assertTimeoutPreemptively(Duration timeout, Executable executable, S\n \t\t}\n \t}\n \n+\t/**\n+\t * The thread factory used for preemptive timeout.\n+\t *\n+\t * This factory is the same with {@link Executors#defaultThreadFactory()} but provides more meaningful thread names,\n+\t * helpful for debugging purposes.\n+\t *\n+\t */\n+\tprivate static class TimeoutThreadFactory implements ThreadFactory {\n+\t\tprivate static final AtomicInteger threadNumber = new AtomicInteger(1);\n+\t\tprivate final ThreadGroup group;\n+\n+\t\tTimeoutThreadFactory() {\n+\t\t\tSecurityManager s = System.getSecurityManager();\n+\t\t\tgroup = (s != null) ? s.getThreadGroup() : Thread.currentThread().getThreadGroup();\n+\t\t}\n+\n+\t\tpublic Thread newThread(Runnable r) {\n+\t\t\tThread t = new Thread(group, r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement(), 0);\n+\t\t\tif (t.isDaemon())\n+\t\t\t\tt.setDaemon(false);\n+\t\t\tif (t.getPriority() != Thread.NORM_PRIORITY)\n+\t\t\t\tt.setPriority(Thread.NORM_PRIORITY);", "originalCommit": "12ddf80ed1c7ba6fd35c47c4f35548ddaa771a05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYxNTg2Nw==", "url": "https://github.com/junit-team/junit5/pull/2365#discussion_r462615867", "bodyText": "I don't think it matters if we shutdown the executor or not. Even after shutdown the thread is not guaranteed to terminate so being a daemon or not matters.\nMoreover, in a setting where there many threads competing for CPU if these ones have low/high priority it might have an impact.", "author": "zabetak", "createdAt": "2020-07-29T22:02:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ5MDEzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc5NjQ4Nw==", "url": "https://github.com/junit-team/junit5/pull/2365#discussion_r462796487", "bodyText": "Even after shutdown the thread is not guaranteed to terminate so being a daemon or not matters.\n\nDo you mean we should make it a daemon thread to avoid it from preventing the VM to shut down?", "author": "marcphilipp", "createdAt": "2020-07-30T07:16:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ5MDEzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzcxNjY3Nw==", "url": "https://github.com/junit-team/junit5/pull/2365#discussion_r463716677", "bodyText": "Basically, I am saying that we should decide if we want daemon or non daemon threads. If we don't specify it then we rely on the status of the parent thread. In this case, I could prefer non-daemon threads.", "author": "zabetak", "createdAt": "2020-07-31T16:43:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ5MDEzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "4bc15ee47c7190e7efc76f168f1503a35f668002", "chunk": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\nindex 72f9fb8505..8660bc95a1 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n\n@@ -185,26 +185,13 @@ class AssertTimeout {\n \t/**\n \t * The thread factory used for preemptive timeout.\n \t *\n-\t * This factory is the same with {@link Executors#defaultThreadFactory()} but provides more meaningful thread names,\n-\t * helpful for debugging purposes.\n-\t *\n+\t * The factory creates threads with meaningful names, helpful for debugging purposes.\n \t */\n \tprivate static class TimeoutThreadFactory implements ThreadFactory {\n \t\tprivate static final AtomicInteger threadNumber = new AtomicInteger(1);\n-\t\tprivate final ThreadGroup group;\n-\n-\t\tTimeoutThreadFactory() {\n-\t\t\tSecurityManager s = System.getSecurityManager();\n-\t\t\tgroup = (s != null) ? s.getThreadGroup() : Thread.currentThread().getThreadGroup();\n-\t\t}\n \n \t\tpublic Thread newThread(Runnable r) {\n-\t\t\tThread t = new Thread(group, r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement(), 0);\n-\t\t\tif (t.isDaemon())\n-\t\t\t\tt.setDaemon(false);\n-\t\t\tif (t.getPriority() != Thread.NORM_PRIORITY)\n-\t\t\t\tt.setPriority(Thread.NORM_PRIORITY);\n-\t\t\treturn t;\n+\t\t\treturn new Thread(null, r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement(), 0);\n \t\t}\n \t}\n \n"}}, {"oid": "4bc15ee47c7190e7efc76f168f1503a35f668002", "url": "https://github.com/junit-team/junit5/commit/4bc15ee47c7190e7efc76f168f1503a35f668002", "message": "Increase timeout in test to avoid flakiness in slow machines", "committedDate": "2020-07-29T21:55:24Z", "type": "forcePushed"}, {"oid": "87920a39547d9a662d6e941883f139c46206f8ec", "url": "https://github.com/junit-team/junit5/commit/87920a39547d9a662d6e941883f139c46206f8ec", "message": "Increase timeout in test to avoid flakiness in slow machines", "committedDate": "2020-07-29T22:00:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc5NDcwOA==", "url": "https://github.com/junit-team/junit5/pull/2365#discussion_r462794708", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\treturn new Thread(null, r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement(), 0);\n          \n          \n            \n            \t\t\treturn new Thread(r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement());", "author": "marcphilipp", "createdAt": "2020-07-30T07:13:35Z", "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java", "diffHunk": "@@ -180,4 +182,17 @@ static void assertTimeoutPreemptively(Duration timeout, Executable executable, S\n \t\t}\n \t}\n \n+\t/**\n+\t * The thread factory used for preemptive timeout.\n+\t *\n+\t * The factory creates threads with meaningful names, helpful for debugging purposes.\n+\t */\n+\tprivate static class TimeoutThreadFactory implements ThreadFactory {\n+\t\tprivate static final AtomicInteger threadNumber = new AtomicInteger(1);\n+\n+\t\tpublic Thread newThread(Runnable r) {\n+\t\t\treturn new Thread(null, r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement(), 0);", "originalCommit": "87920a39547d9a662d6e941883f139c46206f8ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7e877d64b34b848ea7a4efe41079fd092c93e779", "chunk": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\nindex 8660bc95a1..72f9fb8505 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n\n@@ -185,13 +185,26 @@ class AssertTimeout {\n \t/**\n \t * The thread factory used for preemptive timeout.\n \t *\n-\t * The factory creates threads with meaningful names, helpful for debugging purposes.\n+\t * This factory is the same with {@link Executors#defaultThreadFactory()} but provides more meaningful thread names,\n+\t * helpful for debugging purposes.\n+\t *\n \t */\n \tprivate static class TimeoutThreadFactory implements ThreadFactory {\n \t\tprivate static final AtomicInteger threadNumber = new AtomicInteger(1);\n+\t\tprivate final ThreadGroup group;\n+\n+\t\tTimeoutThreadFactory() {\n+\t\t\tSecurityManager s = System.getSecurityManager();\n+\t\t\tgroup = (s != null) ? s.getThreadGroup() : Thread.currentThread().getThreadGroup();\n+\t\t}\n \n \t\tpublic Thread newThread(Runnable r) {\n-\t\t\treturn new Thread(null, r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement(), 0);\n+\t\t\tThread t = new Thread(group, r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement(), 0);\n+\t\t\tif (t.isDaemon())\n+\t\t\t\tt.setDaemon(false);\n+\t\t\tif (t.getPriority() != Thread.NORM_PRIORITY)\n+\t\t\t\tt.setPriority(Thread.NORM_PRIORITY);\n+\t\t\treturn t;\n \t\t}\n \t}\n \n"}}, {"oid": "7e877d64b34b848ea7a4efe41079fd092c93e779", "url": "https://github.com/junit-team/junit5/commit/7e877d64b34b848ea7a4efe41079fd092c93e779", "message": "Use specific name prefix in preemptive timeout threads\n\nHaving a specific name prefix is useful when debugging stack traces to\nquickly identify which threads are created by the junit framework and\nfrom where exactly.", "committedDate": "2020-08-03T21:36:51Z", "type": "commit"}, {"oid": "9e547690c655fb7588c05226e037e8ba915f5b2e", "url": "https://github.com/junit-team/junit5/commit/9e547690c655fb7588c05226e037e8ba915f5b2e", "message": "Remove ThreadGroup resolution from the constructor of the thread factory\n\nThe same resolution takes place inside the constructor of Thread class\nif group is null.", "committedDate": "2020-08-03T21:36:51Z", "type": "commit"}, {"oid": "d271cb30dcc09327bf35555bd9f7cd468dbf9636", "url": "https://github.com/junit-team/junit5/commit/d271cb30dcc09327bf35555bd9f7cd468dbf9636", "message": "Let timeout thread inherit daemon status and priority from parent", "committedDate": "2020-08-03T21:36:51Z", "type": "commit"}, {"oid": "1e72c284d4be3e6d4a56ee5835ee9c0588313785", "url": "https://github.com/junit-team/junit5/commit/1e72c284d4be3e6d4a56ee5835ee9c0588313785", "message": "Update TimeoutThreadFactory javadoc", "committedDate": "2020-08-03T21:36:51Z", "type": "commit"}, {"oid": "f8d44a585ee9b82d1f4d208755d941385862656a", "url": "https://github.com/junit-team/junit5/commit/f8d44a585ee9b82d1f4d208755d941385862656a", "message": "Increase timeout in test to avoid flakiness in slow machines", "committedDate": "2020-08-03T21:36:51Z", "type": "commit"}, {"oid": "e4b01d959f705f711b27f3a6954078b37775cd0a", "url": "https://github.com/junit-team/junit5/commit/e4b01d959f705f711b27f3a6954078b37775cd0a", "message": "Remove explicit group and stacksize from the Thread constructor", "committedDate": "2020-08-03T21:36:51Z", "type": "commit"}, {"oid": "3a3f116bc160a0cc09da8fbb86c88bf1c0e85df9", "url": "https://github.com/junit-team/junit5/commit/3a3f116bc160a0cc09da8fbb86c88bf1c0e85df9", "message": "Fix checkstyle violations", "committedDate": "2020-08-03T21:36:51Z", "type": "commit"}, {"oid": "37b6a25c23c7098fd7a46aabd6dfe3bd11d4e752", "url": "https://github.com/junit-team/junit5/commit/37b6a25c23c7098fd7a46aabd6dfe3bd11d4e752", "message": "Update release-notes-5.7.0-M2.adoc", "committedDate": "2020-08-03T21:37:32Z", "type": "commit"}, {"oid": "37b6a25c23c7098fd7a46aabd6dfe3bd11d4e752", "url": "https://github.com/junit-team/junit5/commit/37b6a25c23c7098fd7a46aabd6dfe3bd11d4e752", "message": "Update release-notes-5.7.0-M2.adoc", "committedDate": "2020-08-03T21:37:32Z", "type": "forcePushed"}]}