{"pr_number": 2342, "pr_title": "Add maxCharsPerColumn attribute to @CsvFileSource and @CsvSource", "pr_createdAt": "2020-06-25T22:06:10Z", "pr_url": "https://github.com/junit-team/junit5/pull/2342", "timeline": [{"oid": "1912bea3bffc5e6f5eab785f5d51759b2fc2bdc2", "url": "https://github.com/junit-team/junit5/commit/1912bea3bffc5e6f5eab785f5d51759b2fc2bdc2", "message": "MaxCharsPerColumn configuration is added to CsvFileSource and  CsvSource", "committedDate": "2020-06-25T22:00:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQwNTMyMg==", "url": "https://github.com/junit-team/junit5/pull/2342#discussion_r460405322", "bodyText": "\u2753 Since both annotations define a default value when is this ever 0?", "author": "marcphilipp", "createdAt": "2020-07-25T13:31:15Z", "path": "junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvParserFactory.java", "diffHunk": "@@ -65,6 +69,7 @@ private static CsvParserSettings createParserSettings(String delimiter, String l\n \t\tsettings.getFormat().setQuoteEscape(quote);\n \t\tsettings.setEmptyValue(emptyValue);\n \t\tsettings.setAutoConfigurationEnabled(false);\n+\t\tsettings.setMaxCharsPerColumn(maxCharsPerColumn == 0 ? DEFAULT_MAX_CHARS_PER_COLUMN : maxCharsPerColumn);", "originalCommit": "1912bea3bffc5e6f5eab785f5d51759b2fc2bdc2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg4NTgyOQ==", "url": "https://github.com/junit-team/junit5/pull/2342#discussion_r464885829", "bodyText": "@cemurat Have you seen my question?", "author": "marcphilipp", "createdAt": "2020-08-04T08:27:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQwNTMyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk1NDc0NQ==", "url": "https://github.com/junit-team/junit5/pull/2342#discussion_r466954745", "bodyText": "Team Decision: In line with the previous comment, use the maxCharsPerColumn as-is at this point in the code base.", "author": "sbrannen", "createdAt": "2020-08-07T10:22:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQwNTMyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI2MDcwNw==", "url": "https://github.com/junit-team/junit5/pull/2342#discussion_r470260707", "bodyText": "Thanks for your review. Updated", "author": "cemurat", "createdAt": "2020-08-13T21:31:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQwNTMyMg=="}], "type": "inlineReview", "revised_code": {"commit": "3f8fb94f14252554968aac35d5c7ecf54bd90e06", "chunk": "diff --git a/junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvParserFactory.java b/junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvParserFactory.java\nindex a4fef6230b..9711fbd050 100644\n--- a/junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvParserFactory.java\n+++ b/junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvParserFactory.java\n\n@@ -69,7 +68,9 @@ class CsvParserFactory {\n \t\tsettings.getFormat().setQuoteEscape(quote);\n \t\tsettings.setEmptyValue(emptyValue);\n \t\tsettings.setAutoConfigurationEnabled(false);\n-\t\tsettings.setMaxCharsPerColumn(maxCharsPerColumn == 0 ? DEFAULT_MAX_CHARS_PER_COLUMN : maxCharsPerColumn);\n+\t\tPreconditions.condition(maxCharsPerColumn > 0,\n+\t\t\t() -> \"maxCharsPerColumn must be a positive number: \" + maxCharsPerColumn);\n+\t\tsettings.setMaxCharsPerColumn(maxCharsPerColumn);\n \t\t// Do not use the built-in support for skipping rows/lines since it will\n \t\t// throw an IllegalArgumentException if the file does not contain at least\n \t\t// the number of specified lines to skip.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk1NDM1Nw==", "url": "https://github.com/junit-team/junit5/pull/2342#discussion_r466954357", "bodyText": "Team Decision: Let's not support the -1 feature of the underlying parser. Instead, let's document that the configured value must be positive and validate that.", "author": "sbrannen", "createdAt": "2020-08-07T10:21:58Z", "path": "junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvFileSource.java", "diffHunk": "@@ -137,4 +137,16 @@\n \t@API(status = EXPERIMENTAL, since = \"5.6\")\n \tString[] nullValues() default {};\n \n+\t/**\n+\t * The maximum characters of per CSV column allowed.\n+\t *\n+\t * <p>To enable auto-expansion of the internal array, set this property to -1", "originalCommit": "1912bea3bffc5e6f5eab785f5d51759b2fc2bdc2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI2MTM4Nw==", "url": "https://github.com/junit-team/junit5/pull/2342#discussion_r470261387", "bodyText": "Thanks for review. Validation is added.", "author": "cemurat", "createdAt": "2020-08-13T21:32:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk1NDM1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "3f8fb94f14252554968aac35d5c7ecf54bd90e06", "chunk": "diff --git a/junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvFileSource.java b/junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvFileSource.java\nindex 78558a120f..217912bad0 100644\n--- a/junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvFileSource.java\n+++ b/junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvFileSource.java\n\n@@ -140,7 +140,7 @@ public @interface CsvFileSource {\n \t/**\n \t * The maximum characters of per CSV column allowed.\n \t *\n-\t * <p>To enable auto-expansion of the internal array, set this property to -1\n+\t * <p>Must be a positive number.\n \t *\n \t * <p>Defaults to {@code 4096}.\n \t *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk1NTI3MA==", "url": "https://github.com/junit-team/junit5/pull/2342#discussion_r466955270", "bodyText": "Team Decision: validate that maxCharsPerColumn is a positive value using Preconditions.", "author": "sbrannen", "createdAt": "2020-08-07T10:24:01Z", "path": "junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvParserFactory.java", "diffHunk": "@@ -51,12 +54,13 @@ private static String selectDelimiter(Annotation annotation, char delimiter, Str\n \t\treturn DEFAULT_DELIMITER;\n \t}\n \n-\tprivate static CsvParser createParser(String delimiter, String lineSeparator, char quote, String emptyValue) {\n-\t\treturn new CsvParser(createParserSettings(delimiter, lineSeparator, quote, emptyValue));\n+\tprivate static CsvParser createParser(String delimiter, String lineSeparator, char quote, String emptyValue,\n+\t\t\tint maxCharsPerColumn) {\n+\t\treturn new CsvParser(createParserSettings(delimiter, lineSeparator, quote, emptyValue, maxCharsPerColumn));\n \t}\n \n \tprivate static CsvParserSettings createParserSettings(String delimiter, String lineSeparator, char quote,\n-\t\t\tString emptyValue) {\n+\t\t\tString emptyValue, int maxCharsPerColumn) {\n ", "originalCommit": "1912bea3bffc5e6f5eab785f5d51759b2fc2bdc2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI2MTU2NA==", "url": "https://github.com/junit-team/junit5/pull/2342#discussion_r470261564", "bodyText": "Updated.", "author": "cemurat", "createdAt": "2020-08-13T21:33:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk1NTI3MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk1NjY0Ng==", "url": "https://github.com/junit-team/junit5/pull/2342#discussion_r466956646", "bodyText": "Team Decision: In line with related comments, this constant is no longer necessary.", "author": "sbrannen", "createdAt": "2020-08-07T10:27:10Z", "path": "junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvParserFactory.java", "diffHunk": "@@ -27,15 +27,18 @@\n \tprivate static final char SINGLE_QUOTE = '\\'';\n \tprivate static final char DOUBLE_QUOTE = '\"';\n \tprivate static final char EMPTY_CHAR = '\\0';\n+\tprivate static final int DEFAULT_MAX_CHARS_PER_COLUMN = 4096;", "originalCommit": "1912bea3bffc5e6f5eab785f5d51759b2fc2bdc2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI2MTYzMQ==", "url": "https://github.com/junit-team/junit5/pull/2342#discussion_r470261631", "bodyText": "Removed.", "author": "cemurat", "createdAt": "2020-08-13T21:33:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk1NjY0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "3f8fb94f14252554968aac35d5c7ecf54bd90e06", "chunk": "diff --git a/junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvParserFactory.java b/junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvParserFactory.java\nindex a4fef6230b..9711fbd050 100644\n--- a/junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvParserFactory.java\n+++ b/junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvParserFactory.java\n\n@@ -27,7 +27,6 @@ class CsvParserFactory {\n \tprivate static final char SINGLE_QUOTE = '\\'';\n \tprivate static final char DOUBLE_QUOTE = '\"';\n \tprivate static final char EMPTY_CHAR = '\\0';\n-\tprivate static final int DEFAULT_MAX_CHARS_PER_COLUMN = 4096;\n \n \tstatic CsvParser createParserFor(CsvSource annotation) {\n \t\tString delimiter = selectDelimiter(annotation, annotation.delimiter(), annotation.delimiterString());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk1NzcwMw==", "url": "https://github.com/junit-team/junit5/pull/2342#discussion_r466957703", "bodyText": "Team Decision: Apply same changes as for @CsvFileSource.", "author": "sbrannen", "createdAt": "2020-08-07T10:29:42Z", "path": "junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvSource.java", "diffHunk": "@@ -105,4 +105,16 @@\n \t@API(status = EXPERIMENTAL, since = \"5.6\")\n \tString[] nullValues() default {};\n \n+\t/**\n+\t * The maximum characters of per CSV column allowed.\n+\t *\n+\t * <p>To enable auto-expansion of the internal array, set this property to -1\n+\t *\n+\t * <p>Defaults to {@code 4096}.\n+\t *\n+\t * @since 5.7\n+\t */\n+\t@API(status = EXPERIMENTAL, since = \"5.7\")\n+\tint maxCharsPerColumn() default 4096;", "originalCommit": "1912bea3bffc5e6f5eab785f5d51759b2fc2bdc2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI2MTY3MQ==", "url": "https://github.com/junit-team/junit5/pull/2342#discussion_r470261671", "bodyText": "Updated", "author": "cemurat", "createdAt": "2020-08-13T21:33:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk1NzcwMw=="}], "type": "inlineReview", "revised_code": {"commit": "3f8fb94f14252554968aac35d5c7ecf54bd90e06", "chunk": "diff --git a/junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvSource.java b/junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvSource.java\nindex 0c3f08a710..40d4b96999 100644\n--- a/junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvSource.java\n+++ b/junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvSource.java\n\n@@ -108,7 +108,7 @@ public @interface CsvSource {\n \t/**\n \t * The maximum characters of per CSV column allowed.\n \t *\n-\t * <p>To enable auto-expansion of the internal array, set this property to -1\n+\t * <p>Must be a positive number.\n \t *\n \t * <p>Defaults to {@code 4096}.\n \t *\n"}}, {"oid": "3f8fb94f14252554968aac35d5c7ecf54bd90e06", "url": "https://github.com/junit-team/junit5/commit/3f8fb94f14252554968aac35d5c7ecf54bd90e06", "message": "maxCharsPerColumn is supported only for positive numbers according to pr comments.", "committedDate": "2020-08-13T21:27:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ2OTI0MA==", "url": "https://github.com/junit-team/junit5/pull/2342#discussion_r470469240", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t.maxCharsPerColumn(4097).files(csvFile.toAbsolutePath().toString())//\n          \n          \n            \n            \t\t\t\t.maxCharsPerColumn(4097)//\n          \n          \n            \n            \t\t\t\t.files(csvFile.toAbsolutePath().toString())//", "author": "marcphilipp", "createdAt": "2020-08-14T07:56:33Z", "path": "junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/CsvFileArgumentsProviderTests.java", "diffHunk": "@@ -368,6 +368,74 @@ void emptyValueIsAnEmptyWithCustomNullValueString() {\n \t\tassertThat(arguments).containsExactly(array(\"apple\", null, null, \"''\"), array(null, null, \"foo\", \"bar\"));\n \t}\n \n+\t@Test\n+\tvoid readsLineFromDefaultMaxCharsFileWithDefaultConfig(@TempDir Path tempDir) throws Exception {\n+\t\tPath csvFile = writeClasspathResourceToFile(\"/default-max-chars.csv\", tempDir.resolve(\"default-max-chars.csv\"));\n+\t\tCsvFileSource annotation = csvFileSource()//\n+\t\t\t\t.encoding(\"ISO-8859-1\")//\n+\t\t\t\t.resources(\"/default-max-chars.csv\")//\n+\t\t\t\t.files(csvFile.toAbsolutePath().toString())//\n+\t\t\t\t.build();\n+\n+\t\tStream<Object[]> arguments = provideArguments(new CsvFileArgumentsProvider(), annotation);\n+\n+\t\tassertThat(arguments).hasSize(2 * 1);\n+\t}\n+\n+\t@Test\n+\tvoid readsLineFromExceedsMaxCharsFileWithCustomConfig(@TempDir Path tempDir) throws java.io.IOException {\n+\t\tPath csvFile = writeClasspathResourceToFile(\"/exceeds-default-max-chars.csv\",\n+\t\t\ttempDir.resolve(\"exceeds-default-max-chars.csv\"));\n+\t\tCsvFileSource annotation = csvFileSource()//\n+\t\t\t\t.encoding(\"ISO-8859-1\")//\n+\t\t\t\t.resources(\"/exceeds-default-max-chars.csv\")//\n+\t\t\t\t.maxCharsPerColumn(4097).files(csvFile.toAbsolutePath().toString())//", "originalCommit": "3f8fb94f14252554968aac35d5c7ecf54bd90e06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg5NzQ4Mg==", "url": "https://github.com/junit-team/junit5/pull/2342#discussion_r470897482", "bodyText": "Updated", "author": "cemurat", "createdAt": "2020-08-14T22:57:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ2OTI0MA=="}], "type": "inlineReview", "revised_code": {"commit": "1c282c17331878d04a4bd3e5f02f7c840317cfee", "chunk": "diff --git a/junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/CsvFileArgumentsProviderTests.java b/junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/CsvFileArgumentsProviderTests.java\nindex 9d74344212..49b60a764b 100644\n--- a/junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/CsvFileArgumentsProviderTests.java\n+++ b/junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/CsvFileArgumentsProviderTests.java\n\n@@ -379,7 +379,7 @@ class CsvFileArgumentsProviderTests {\n \n \t\tStream<Object[]> arguments = provideArguments(new CsvFileArgumentsProvider(), annotation);\n \n-\t\tassertThat(arguments).hasSize(2 * 1);\n+\t\tassertThat(arguments).hasSize(2);\n \t}\n \n \t@Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ3MDA1OA==", "url": "https://github.com/junit-team/junit5/pull/2342#discussion_r470470058", "bodyText": "\u2753 Why 2? default-max-chars.csv has a single line so it should have a single set of arguments?", "author": "marcphilipp", "createdAt": "2020-08-14T07:58:12Z", "path": "junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/CsvFileArgumentsProviderTests.java", "diffHunk": "@@ -368,6 +368,74 @@ void emptyValueIsAnEmptyWithCustomNullValueString() {\n \t\tassertThat(arguments).containsExactly(array(\"apple\", null, null, \"''\"), array(null, null, \"foo\", \"bar\"));\n \t}\n \n+\t@Test\n+\tvoid readsLineFromDefaultMaxCharsFileWithDefaultConfig(@TempDir Path tempDir) throws Exception {\n+\t\tPath csvFile = writeClasspathResourceToFile(\"/default-max-chars.csv\", tempDir.resolve(\"default-max-chars.csv\"));\n+\t\tCsvFileSource annotation = csvFileSource()//\n+\t\t\t\t.encoding(\"ISO-8859-1\")//\n+\t\t\t\t.resources(\"/default-max-chars.csv\")//\n+\t\t\t\t.files(csvFile.toAbsolutePath().toString())//\n+\t\t\t\t.build();\n+\n+\t\tStream<Object[]> arguments = provideArguments(new CsvFileArgumentsProvider(), annotation);\n+\n+\t\tassertThat(arguments).hasSize(2 * 1);", "originalCommit": "3f8fb94f14252554968aac35d5c7ecf54bd90e06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU0NTkyMg==", "url": "https://github.com/junit-team/junit5/pull/2342#discussion_r470545922", "bodyText": "Thanks to @sbrannen I now understand why... there's a file and a resource.", "author": "marcphilipp", "createdAt": "2020-08-14T10:32:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ3MDA1OA=="}], "type": "inlineReview", "revised_code": {"commit": "1c282c17331878d04a4bd3e5f02f7c840317cfee", "chunk": "diff --git a/junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/CsvFileArgumentsProviderTests.java b/junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/CsvFileArgumentsProviderTests.java\nindex 9d74344212..49b60a764b 100644\n--- a/junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/CsvFileArgumentsProviderTests.java\n+++ b/junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/CsvFileArgumentsProviderTests.java\n\n@@ -379,7 +379,7 @@ class CsvFileArgumentsProviderTests {\n \n \t\tStream<Object[]> arguments = provideArguments(new CsvFileArgumentsProvider(), annotation);\n \n-\t\tassertThat(arguments).hasSize(2 * 1);\n+\t\tassertThat(arguments).hasSize(2);\n \t}\n \n \t@Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ3MTc1MA==", "url": "https://github.com/junit-team/junit5/pull/2342#discussion_r470471750", "bodyText": "I think we should replace these blocks with \"0\".repeat(4096) etc.", "author": "marcphilipp", "createdAt": "2020-08-14T08:01:41Z", "path": "junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/CsvArgumentsProviderTests.java", "diffHunk": "@@ -161,6 +161,189 @@ void convertsEmptyValuesToNullInLinesAfterFirstLine() {\n \t\tassertThat(arguments).containsExactly(new Object[][] { { \"\", \"\" }, { null, null } });\n \t}\n \n+\t@Test\n+\tvoid throwsExceptionIfSourceExceedsMaxCharsPerColumnConfig() {\n+\t\tCsvSource annotation = csvSource().lines(\"413\").maxCharsPerColumn(2).build();\n+\n+\t\tStream<Object[]> arguments = provideArguments(annotation);\n+\n+\t\tassertThatExceptionOfType(CsvParsingException.class)//\n+\t\t\t\t.isThrownBy(() -> arguments.toArray())//\n+\t\t\t\t.withMessageStartingWith(\"Failed to parse CSV input configured via Mock for CsvSource\")//\n+\t\t\t\t.withRootCauseInstanceOf(ArrayIndexOutOfBoundsException.class);\n+\t}\n+\n+\t@Test\n+\tvoid providesArgumentWithDefaultMaxCharsPerColumnConfig() {\n+\t\tCsvSource annotation = csvSource().lines( //4096 chars\n+\t\t\t\"41,6,8469,0,22,6336,9177,null,3,15,31,5734,6509,8770,9379,2,4,10,20,28,39,1490,5775,6410,6986,8493,8823,\"\n+\t\t\t\t\t+ \"9298,9975,1,null,null,5,8,12,16,21,26,29,34,40,506,4491,5737,6034,6384,6434,6853,8178,8492,\"\n+\t\t\t\t\t+ \"8503,8779,9106,9283,9339,9774,9982,null,null,null,null,7,9,11,13,null,17,null,null,23,27,null,30,\"\n+\t\t\t\t\t+ \"32,35,null,null,176,837,3317,5715,5735,5743,5944,6310,6338,6398,6425,6436,6802,6917,7473,8397,\"\n+\t\t\t\t\t+ \"8472,null,8494,8711,8776,8782,9009,9153,9210,9289,9336,9371,9400,9953,9980,9993,null,null,null,\"\n+\t\t\t\t\t+ \"null,null,null,null,14,null,18,null,25,null,null,null,null,null,33,null,36,53,316,739,1409,3011,\"\n+\t\t\t\t\t+ \"3924,4845,5730,null,5736,5741,5754,5807,5968,6056,6329,6337,6345,6387,6400,6420,6428,6435,6467,\"\n+\t\t\t\t\t+ \"6575,6814,6911,6970,7111,7761,8283,8461,8470,8473,null,8496,8674,8722,8773,8778,8780,8803,8924,\"\n+\t\t\t\t\t+ \"9078,9111,9172,9185,9270,9285,9296,9307,9337,9369,9376,9391,9633,9933,9967,9979,9981,9989,9994,\"\n+\t\t\t\t\t+ \"null,null,null,19,24,null,null,null,null,37,46,140,199,505,669,814,1281,1430,1976,3096,3627,3934,\"\n+\t\t\t\t\t+ \"4646,5455,5719,5733,null,null,5740,5742,5752,5758,5790,5828,5948,5974,6051,6278,6326,6331,null,\"\n+\t\t\t\t\t+ \"null,6339,6365,6385,6388,6399,6405,6417,6424,6426,6433,null,null,6441,6492,6572,6739,6808,6845,\"\n+\t\t\t\t\t+ \"6867,6915,6931,6985,7086,7463,7758,7797,8179,8349,8421,8467,null,8471,null,8476,8495,8497,8576,\"\n+\t\t\t\t\t+ \"8708,8719,8761,8771,8774,8777,null,null,8781,8793,8806,8882,8937,9054,9084,9107,9134,9166,9175,\"\n+\t\t\t\t\t+ \"9181,9187,9255,9282,9284,9287,9292,9297,9305,9319,null,9338,9342,9370,9375,9378,9380,9396,9546,\"\n+\t\t\t\t\t+ \"9713,9798,9946,9956,9973,9978,null,null,null,9986,9991,null,9999,null,null,null,null,null,38,45,\"\n+\t\t\t\t\t+ \"49,111,175,196,203,352,null,631,673,799,832,1056,1366,1415,1480,1819,2471,3016,3223,3532,3770,\"\n+\t\t\t\t\t+ \"3931,4018,4592,4835,5233,5477,5718,5728,5732,null,5739,null,null,null,5745,5753,5756,5766,5785,\"\n+\t\t\t\t\t+ \"5803,5823,5875,5946,5950,5971,5994,6043,6052,6124,6298,6317,6328,6330,6332,null,6341,6348,6369,\"\n+\t\t\t\t\t+ \"null,6386,null,6396,null,null,6404,6408,6415,6419,6422,null,null,6427,6430,null,6440,6458,6471,\"\n+\t\t\t\t\t+ \"6503,6520,6574,6721,6750,6807,6810,6843,6849,6863,6893,6912,6916,6919,6947,6983,null,6993,7088,\"\n+\t\t\t\t\t+ \"7124,7466,7703,7759,7787,7962,null,8195,8331,8362,8411,8453,8462,8468,null,null,8474,8482,null,\"\n+\t\t\t\t\t+ \"null,null,8500,8573,8619,8682,8710,8712,8721,8755,8767,null,8772,null,8775,null,null,null,null,\"\n+\t\t\t\t\t+ \"8787,8795,8805,8819,8862,8886,8929,8978,9014,9076,9080,9087,null,9110,9112,9139,9163,9170,9173,\"\n+\t\t\t\t\t+ \"9176,9178,9183,9186,9188,9240,9267,9278,null,null,null,9286,9288,9290,9293,null,null,9303,9306,\"\n+\t\t\t\t\t+ \"9312,9326,null,null,9340,9366,null,null,9374,null,9377,null,null,9383,9393,9397,9493,9601,9652,\"\n+\t\t\t\t\t+ \"9726,9789,9905,9942,9947,9954,9959,9969,9974,9976,null,9984,9988,9990,9992,9997,null,null,null,\"\n+\t\t\t\t\t+ \"44,null,48,52,92,125,156,null,183,197,202,235,325,366,629,656,670,712,746,802,816,835,1026,1212,\"\n+\t\t\t\t\t+ \"1293,1403,1414,1420,1471,1483,1604,1903,2432,2870,3014,3062,3219,3311,3336,3565,3730,3918,3927,\"\n+\t\t\t\t\t+ \"3933,3975,4330,4546,4627,4709,4840,5158,5399,5456,5697,5716,null,5727,5729,5731,null,5738,null,\"\n+\t\t\t\t\t+ \"5744,5746,null,null,5755,5757,5762,5774,5778,5786,5795,5805,5822,5824,5848,5895,5945,5947,5949,\"\n+\t\t\t\t\t+ \"5961,5969,5973,5976,6014,6042,6049,null,6053,6117,6139,6290,6308,6314,6320,6327,null,null,null,\"\n+\t\t\t\t\t+ \"null,6335,6340,6344,6346,6354,6366,6383,null,null,6390,6397,6401,null,6406,6409,6413,6416,6418,\"\n+\t\t\t\t\t+ \"null,6421,6423,null,null,6429,6431,6438,null,6443,6462,6470,6472,6497,6506,6512,6528,6573,null,\"\n+\t\t\t\t\t+ \"6648,6733,6748,6767,6805,null,6809,6813,6828,6844,6847,6852,6854,6864,6875,6910,null,6914,null,\"\n+\t\t\t\t\t+ \"null,6918,6922,6944,6968,6976,6984,6991,7047,7087,7091,7112,7260,7464,7467,7656,7740,null,7760,\"\n+\t\t\t\t\t+ \"7774,7795,7876,8110,8187,8202,8315,8341,8359,8391,8410,8414,8448,8455,null,8463,null,null,null,\"\n+\t\t\t\t\t+ \"8475,8478,8483,8498,8502,8531,8575,8600,8624,8681,8688,8709,null,null,8716,8720,null,8735,8760,\"\n+\t\t\t\t\t+ \"8766,8768,null,null,null,null,8784,8791,8794,8797,8804,null,8815,8820,8825,8867,8884,8887,8927,\"\n+\t\t\t\t\t+ \"8936,8974,8986,9013,9041,9067,9077,9079,9081,9086,9093,9109,null,null,9119,9138,9144,9159,9164,\"\n+\t\t\t\t\t+ \"9167,9171,null,9174,null,null,null,9179,9182,9184,null,null,null,9189,9223,9247,9258,9269,9275,\"\n+\t\t\t\t\t+ \"9279,null,null,null,null,null,9291,null,9295,9301,9304,null,null,9310,9315,9324,9330,null,9341,\"\n+\t\t\t\t\t+ \"9358,9367,9372,null,null,null,9382,9386,9392,9395,null,9398,9488,9509,9547,9616,9643,9702,94,122\").delimiter(", "originalCommit": "3f8fb94f14252554968aac35d5c7ecf54bd90e06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg5NzQ0NA==", "url": "https://github.com/junit-team/junit5/pull/2342#discussion_r470897444", "bodyText": "Yes you are right, i have updated. Thanks for review", "author": "cemurat", "createdAt": "2020-08-14T22:57:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ3MTc1MA=="}], "type": "inlineReview", "revised_code": {"commit": "1c282c17331878d04a4bd3e5f02f7c840317cfee", "chunk": "diff --git a/junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/CsvArgumentsProviderTests.java b/junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/CsvArgumentsProviderTests.java\nindex 96a4695794..fb6684844a 100644\n--- a/junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/CsvArgumentsProviderTests.java\n+++ b/junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/CsvArgumentsProviderTests.java\n\n@@ -175,51 +175,7 @@ class CsvArgumentsProviderTests {\n \n \t@Test\n \tvoid providesArgumentWithDefaultMaxCharsPerColumnConfig() {\n-\t\tCsvSource annotation = csvSource().lines( //4096 chars\n-\t\t\t\"41,6,8469,0,22,6336,9177,null,3,15,31,5734,6509,8770,9379,2,4,10,20,28,39,1490,5775,6410,6986,8493,8823,\"\n-\t\t\t\t\t+ \"9298,9975,1,null,null,5,8,12,16,21,26,29,34,40,506,4491,5737,6034,6384,6434,6853,8178,8492,\"\n-\t\t\t\t\t+ \"8503,8779,9106,9283,9339,9774,9982,null,null,null,null,7,9,11,13,null,17,null,null,23,27,null,30,\"\n-\t\t\t\t\t+ \"32,35,null,null,176,837,3317,5715,5735,5743,5944,6310,6338,6398,6425,6436,6802,6917,7473,8397,\"\n-\t\t\t\t\t+ \"8472,null,8494,8711,8776,8782,9009,9153,9210,9289,9336,9371,9400,9953,9980,9993,null,null,null,\"\n-\t\t\t\t\t+ \"null,null,null,null,14,null,18,null,25,null,null,null,null,null,33,null,36,53,316,739,1409,3011,\"\n-\t\t\t\t\t+ \"3924,4845,5730,null,5736,5741,5754,5807,5968,6056,6329,6337,6345,6387,6400,6420,6428,6435,6467,\"\n-\t\t\t\t\t+ \"6575,6814,6911,6970,7111,7761,8283,8461,8470,8473,null,8496,8674,8722,8773,8778,8780,8803,8924,\"\n-\t\t\t\t\t+ \"9078,9111,9172,9185,9270,9285,9296,9307,9337,9369,9376,9391,9633,9933,9967,9979,9981,9989,9994,\"\n-\t\t\t\t\t+ \"null,null,null,19,24,null,null,null,null,37,46,140,199,505,669,814,1281,1430,1976,3096,3627,3934,\"\n-\t\t\t\t\t+ \"4646,5455,5719,5733,null,null,5740,5742,5752,5758,5790,5828,5948,5974,6051,6278,6326,6331,null,\"\n-\t\t\t\t\t+ \"null,6339,6365,6385,6388,6399,6405,6417,6424,6426,6433,null,null,6441,6492,6572,6739,6808,6845,\"\n-\t\t\t\t\t+ \"6867,6915,6931,6985,7086,7463,7758,7797,8179,8349,8421,8467,null,8471,null,8476,8495,8497,8576,\"\n-\t\t\t\t\t+ \"8708,8719,8761,8771,8774,8777,null,null,8781,8793,8806,8882,8937,9054,9084,9107,9134,9166,9175,\"\n-\t\t\t\t\t+ \"9181,9187,9255,9282,9284,9287,9292,9297,9305,9319,null,9338,9342,9370,9375,9378,9380,9396,9546,\"\n-\t\t\t\t\t+ \"9713,9798,9946,9956,9973,9978,null,null,null,9986,9991,null,9999,null,null,null,null,null,38,45,\"\n-\t\t\t\t\t+ \"49,111,175,196,203,352,null,631,673,799,832,1056,1366,1415,1480,1819,2471,3016,3223,3532,3770,\"\n-\t\t\t\t\t+ \"3931,4018,4592,4835,5233,5477,5718,5728,5732,null,5739,null,null,null,5745,5753,5756,5766,5785,\"\n-\t\t\t\t\t+ \"5803,5823,5875,5946,5950,5971,5994,6043,6052,6124,6298,6317,6328,6330,6332,null,6341,6348,6369,\"\n-\t\t\t\t\t+ \"null,6386,null,6396,null,null,6404,6408,6415,6419,6422,null,null,6427,6430,null,6440,6458,6471,\"\n-\t\t\t\t\t+ \"6503,6520,6574,6721,6750,6807,6810,6843,6849,6863,6893,6912,6916,6919,6947,6983,null,6993,7088,\"\n-\t\t\t\t\t+ \"7124,7466,7703,7759,7787,7962,null,8195,8331,8362,8411,8453,8462,8468,null,null,8474,8482,null,\"\n-\t\t\t\t\t+ \"null,null,8500,8573,8619,8682,8710,8712,8721,8755,8767,null,8772,null,8775,null,null,null,null,\"\n-\t\t\t\t\t+ \"8787,8795,8805,8819,8862,8886,8929,8978,9014,9076,9080,9087,null,9110,9112,9139,9163,9170,9173,\"\n-\t\t\t\t\t+ \"9176,9178,9183,9186,9188,9240,9267,9278,null,null,null,9286,9288,9290,9293,null,null,9303,9306,\"\n-\t\t\t\t\t+ \"9312,9326,null,null,9340,9366,null,null,9374,null,9377,null,null,9383,9393,9397,9493,9601,9652,\"\n-\t\t\t\t\t+ \"9726,9789,9905,9942,9947,9954,9959,9969,9974,9976,null,9984,9988,9990,9992,9997,null,null,null,\"\n-\t\t\t\t\t+ \"44,null,48,52,92,125,156,null,183,197,202,235,325,366,629,656,670,712,746,802,816,835,1026,1212,\"\n-\t\t\t\t\t+ \"1293,1403,1414,1420,1471,1483,1604,1903,2432,2870,3014,3062,3219,3311,3336,3565,3730,3918,3927,\"\n-\t\t\t\t\t+ \"3933,3975,4330,4546,4627,4709,4840,5158,5399,5456,5697,5716,null,5727,5729,5731,null,5738,null,\"\n-\t\t\t\t\t+ \"5744,5746,null,null,5755,5757,5762,5774,5778,5786,5795,5805,5822,5824,5848,5895,5945,5947,5949,\"\n-\t\t\t\t\t+ \"5961,5969,5973,5976,6014,6042,6049,null,6053,6117,6139,6290,6308,6314,6320,6327,null,null,null,\"\n-\t\t\t\t\t+ \"null,6335,6340,6344,6346,6354,6366,6383,null,null,6390,6397,6401,null,6406,6409,6413,6416,6418,\"\n-\t\t\t\t\t+ \"null,6421,6423,null,null,6429,6431,6438,null,6443,6462,6470,6472,6497,6506,6512,6528,6573,null,\"\n-\t\t\t\t\t+ \"6648,6733,6748,6767,6805,null,6809,6813,6828,6844,6847,6852,6854,6864,6875,6910,null,6914,null,\"\n-\t\t\t\t\t+ \"null,6918,6922,6944,6968,6976,6984,6991,7047,7087,7091,7112,7260,7464,7467,7656,7740,null,7760,\"\n-\t\t\t\t\t+ \"7774,7795,7876,8110,8187,8202,8315,8341,8359,8391,8410,8414,8448,8455,null,8463,null,null,null,\"\n-\t\t\t\t\t+ \"8475,8478,8483,8498,8502,8531,8575,8600,8624,8681,8688,8709,null,null,8716,8720,null,8735,8760,\"\n-\t\t\t\t\t+ \"8766,8768,null,null,null,null,8784,8791,8794,8797,8804,null,8815,8820,8825,8867,8884,8887,8927,\"\n-\t\t\t\t\t+ \"8936,8974,8986,9013,9041,9067,9077,9079,9081,9086,9093,9109,null,null,9119,9138,9144,9159,9164,\"\n-\t\t\t\t\t+ \"9167,9171,null,9174,null,null,null,9179,9182,9184,null,null,null,9189,9223,9247,9258,9269,9275,\"\n-\t\t\t\t\t+ \"9279,null,null,null,null,null,9291,null,9295,9301,9304,null,null,9310,9315,9324,9330,null,9341,\"\n-\t\t\t\t\t+ \"9358,9367,9372,null,null,null,9382,9386,9392,9395,null,9398,9488,9509,9547,9616,9643,9702,94,122\").delimiter(\n-\t\t\t\t\t\t';').build();\n+\t\tCsvSource annotation = csvSource().lines(\"0\".repeat(4096)).delimiter(';').build();\n \n \t\tStream<Object[]> arguments = provideArguments(annotation);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ3Mjk4Mg==", "url": "https://github.com/junit-team/junit5/pull/2342#discussion_r470472982", "bodyText": "Suggested change", "author": "marcphilipp", "createdAt": "2020-08-14T08:04:19Z", "path": "junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/CsvFileArgumentsProviderTests.java", "diffHunk": "@@ -368,6 +368,74 @@ void emptyValueIsAnEmptyWithCustomNullValueString() {\n \t\tassertThat(arguments).containsExactly(array(\"apple\", null, null, \"''\"), array(null, null, \"foo\", \"bar\"));\n \t}\n \n+\t@Test\n+\tvoid readsLineFromDefaultMaxCharsFileWithDefaultConfig(@TempDir Path tempDir) throws Exception {\n+\t\tPath csvFile = writeClasspathResourceToFile(\"/default-max-chars.csv\", tempDir.resolve(\"default-max-chars.csv\"));\n+\t\tCsvFileSource annotation = csvFileSource()//\n+\t\t\t\t.encoding(\"ISO-8859-1\")//\n+\t\t\t\t.resources(\"/default-max-chars.csv\")//\n+\t\t\t\t.files(csvFile.toAbsolutePath().toString())//\n+\t\t\t\t.build();\n+\n+\t\tStream<Object[]> arguments = provideArguments(new CsvFileArgumentsProvider(), annotation);\n+\n+\t\tassertThat(arguments).hasSize(2 * 1);\n+\t}\n+\n+\t@Test\n+\tvoid readsLineFromExceedsMaxCharsFileWithCustomConfig(@TempDir Path tempDir) throws java.io.IOException {\n+\t\tPath csvFile = writeClasspathResourceToFile(\"/exceeds-default-max-chars.csv\",\n+\t\t\ttempDir.resolve(\"exceeds-default-max-chars.csv\"));\n+\t\tCsvFileSource annotation = csvFileSource()//\n+\t\t\t\t.encoding(\"ISO-8859-1\")//\n+\t\t\t\t.resources(\"/exceeds-default-max-chars.csv\")//\n+\t\t\t\t.maxCharsPerColumn(4097).files(csvFile.toAbsolutePath().toString())//\n+\t\t\t\t.build();\n+\n+\t\tStream<Object[]> arguments = provideArguments(new CsvFileArgumentsProvider(), annotation);\n+\n+\t\tassertThat(arguments).hasSize(2 * 1);\n+\t}\n+\n+\t@Test\n+\tvoid throwsExceptionWhenMaxCharsPerColumnIsNotPositiveNumber(@TempDir Path tempDir) throws java.io.IOException {\n+\t\tPath csvFile = writeClasspathResourceToFile(\"/exceeds-default-max-chars.csv\",\n+\t\t\ttempDir.resolve(\"exceeds-default-max-chars.csv\"));\n+\t\tCsvFileSource annotation = csvFileSource()//\n+\t\t\t\t.encoding(\"ISO-8859-1\")//\n+\t\t\t\t.resources(\"/exceeds-default-max-chars.csv\")//\n+\t\t\t\t.maxCharsPerColumn(-1).files(csvFile.toAbsolutePath().toString())//\n+\t\t\t\t.build();\n+\n+\t\tPreconditionViolationException exception = assertThrows(PreconditionViolationException.class, //\n+\t\t\t() -> provideArguments(new CsvFileArgumentsProvider(), annotation));\n+\n+\t\tassertThat(exception)//\n+\t\t\t\t.hasMessageStartingWith(\"maxCharsPerColumn must be a positive number: -1\");\n+\n+\t}\n+\n+\t@Test\n+\tvoid throwsExceptionForExceedsMaxCharsFileWithDefaultConfig(@TempDir Path tempDir) throws java.io.IOException {\n+\t\tPath csvFile = writeClasspathResourceToFile(\"/exceeds-default-max-chars.csv\",\n+\t\t\ttempDir.resolve(\"exceeds-default-max-chars.csv\"));\n+\t\tCsvFileSource annotation = csvFileSource()//\n+\t\t\t\t.encoding(\"ISO-8859-1\")//\n+\t\t\t\t.resources(\"/exceeds-default-max-chars.csv\")//\n+\t\t\t\t.files(csvFile.toAbsolutePath().toString())//\n+\t\t\t\t.build();\n+\n+\t\tStream<Object[]> arguments = provideArguments(new CsvFileArgumentsProvider(), annotation);\n+\n+\t\tCsvParsingException exception = assertThrows(CsvParsingException.class,\n+\t\t\t() -> provideArguments(new CsvFileArgumentsProvider(), annotation).toArray());\n+\n+\t\tassertThat(exception)//\n+\t\t\t\t.hasMessageStartingWith(\"Failed to parse CSV input configured via Mock for CsvFileSource\")//\n+\t\t\t\t.hasRootCauseInstanceOf(ArrayIndexOutOfBoundsException.class);\n+", "originalCommit": "3f8fb94f14252554968aac35d5c7ecf54bd90e06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg5NzM0Mw==", "url": "https://github.com/junit-team/junit5/pull/2342#discussion_r470897343", "bodyText": "Updated", "author": "cemurat", "createdAt": "2020-08-14T22:56:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ3Mjk4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "1c282c17331878d04a4bd3e5f02f7c840317cfee", "chunk": "diff --git a/junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/CsvFileArgumentsProviderTests.java b/junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/CsvFileArgumentsProviderTests.java\nindex 9d74344212..49b60a764b 100644\n--- a/junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/CsvFileArgumentsProviderTests.java\n+++ b/junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/CsvFileArgumentsProviderTests.java\n\n@@ -379,7 +379,7 @@ class CsvFileArgumentsProviderTests {\n \n \t\tStream<Object[]> arguments = provideArguments(new CsvFileArgumentsProvider(), annotation);\n \n-\t\tassertThat(arguments).hasSize(2 * 1);\n+\t\tassertThat(arguments).hasSize(2);\n \t}\n \n \t@Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ3MzAxMg==", "url": "https://github.com/junit-team/junit5/pull/2342#discussion_r470473012", "bodyText": "Suggested change", "author": "marcphilipp", "createdAt": "2020-08-14T08:04:24Z", "path": "junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/CsvFileArgumentsProviderTests.java", "diffHunk": "@@ -368,6 +368,74 @@ void emptyValueIsAnEmptyWithCustomNullValueString() {\n \t\tassertThat(arguments).containsExactly(array(\"apple\", null, null, \"''\"), array(null, null, \"foo\", \"bar\"));\n \t}\n \n+\t@Test\n+\tvoid readsLineFromDefaultMaxCharsFileWithDefaultConfig(@TempDir Path tempDir) throws Exception {\n+\t\tPath csvFile = writeClasspathResourceToFile(\"/default-max-chars.csv\", tempDir.resolve(\"default-max-chars.csv\"));\n+\t\tCsvFileSource annotation = csvFileSource()//\n+\t\t\t\t.encoding(\"ISO-8859-1\")//\n+\t\t\t\t.resources(\"/default-max-chars.csv\")//\n+\t\t\t\t.files(csvFile.toAbsolutePath().toString())//\n+\t\t\t\t.build();\n+\n+\t\tStream<Object[]> arguments = provideArguments(new CsvFileArgumentsProvider(), annotation);\n+\n+\t\tassertThat(arguments).hasSize(2 * 1);\n+\t}\n+\n+\t@Test\n+\tvoid readsLineFromExceedsMaxCharsFileWithCustomConfig(@TempDir Path tempDir) throws java.io.IOException {\n+\t\tPath csvFile = writeClasspathResourceToFile(\"/exceeds-default-max-chars.csv\",\n+\t\t\ttempDir.resolve(\"exceeds-default-max-chars.csv\"));\n+\t\tCsvFileSource annotation = csvFileSource()//\n+\t\t\t\t.encoding(\"ISO-8859-1\")//\n+\t\t\t\t.resources(\"/exceeds-default-max-chars.csv\")//\n+\t\t\t\t.maxCharsPerColumn(4097).files(csvFile.toAbsolutePath().toString())//\n+\t\t\t\t.build();\n+\n+\t\tStream<Object[]> arguments = provideArguments(new CsvFileArgumentsProvider(), annotation);\n+\n+\t\tassertThat(arguments).hasSize(2 * 1);\n+\t}\n+\n+\t@Test\n+\tvoid throwsExceptionWhenMaxCharsPerColumnIsNotPositiveNumber(@TempDir Path tempDir) throws java.io.IOException {\n+\t\tPath csvFile = writeClasspathResourceToFile(\"/exceeds-default-max-chars.csv\",\n+\t\t\ttempDir.resolve(\"exceeds-default-max-chars.csv\"));\n+\t\tCsvFileSource annotation = csvFileSource()//\n+\t\t\t\t.encoding(\"ISO-8859-1\")//\n+\t\t\t\t.resources(\"/exceeds-default-max-chars.csv\")//\n+\t\t\t\t.maxCharsPerColumn(-1).files(csvFile.toAbsolutePath().toString())//\n+\t\t\t\t.build();\n+\n+\t\tPreconditionViolationException exception = assertThrows(PreconditionViolationException.class, //\n+\t\t\t() -> provideArguments(new CsvFileArgumentsProvider(), annotation));\n+\n+\t\tassertThat(exception)//\n+\t\t\t\t.hasMessageStartingWith(\"maxCharsPerColumn must be a positive number: -1\");\n+", "originalCommit": "3f8fb94f14252554968aac35d5c7ecf54bd90e06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg5NzI5MQ==", "url": "https://github.com/junit-team/junit5/pull/2342#discussion_r470897291", "bodyText": "Fixed", "author": "cemurat", "createdAt": "2020-08-14T22:56:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ3MzAxMg=="}], "type": "inlineReview", "revised_code": {"commit": "1c282c17331878d04a4bd3e5f02f7c840317cfee", "chunk": "diff --git a/junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/CsvFileArgumentsProviderTests.java b/junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/CsvFileArgumentsProviderTests.java\nindex 9d74344212..49b60a764b 100644\n--- a/junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/CsvFileArgumentsProviderTests.java\n+++ b/junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/CsvFileArgumentsProviderTests.java\n\n@@ -379,7 +379,7 @@ class CsvFileArgumentsProviderTests {\n \n \t\tStream<Object[]> arguments = provideArguments(new CsvFileArgumentsProvider(), annotation);\n \n-\t\tassertThat(arguments).hasSize(2 * 1);\n+\t\tassertThat(arguments).hasSize(2);\n \t}\n \n \t@Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU0NjAzOA==", "url": "https://github.com/junit-team/junit5/pull/2342#discussion_r470546038", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertThat(arguments).hasSize(2 * 1);\n          \n          \n            \n            \t\tassertThat(arguments).hasSize(2);", "author": "marcphilipp", "createdAt": "2020-08-14T10:32:19Z", "path": "junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/CsvFileArgumentsProviderTests.java", "diffHunk": "@@ -368,6 +368,74 @@ void emptyValueIsAnEmptyWithCustomNullValueString() {\n \t\tassertThat(arguments).containsExactly(array(\"apple\", null, null, \"''\"), array(null, null, \"foo\", \"bar\"));\n \t}\n \n+\t@Test\n+\tvoid readsLineFromDefaultMaxCharsFileWithDefaultConfig(@TempDir Path tempDir) throws Exception {\n+\t\tPath csvFile = writeClasspathResourceToFile(\"/default-max-chars.csv\", tempDir.resolve(\"default-max-chars.csv\"));\n+\t\tCsvFileSource annotation = csvFileSource()//\n+\t\t\t\t.encoding(\"ISO-8859-1\")//\n+\t\t\t\t.resources(\"/default-max-chars.csv\")//\n+\t\t\t\t.files(csvFile.toAbsolutePath().toString())//\n+\t\t\t\t.build();\n+\n+\t\tStream<Object[]> arguments = provideArguments(new CsvFileArgumentsProvider(), annotation);\n+\n+\t\tassertThat(arguments).hasSize(2 * 1);", "originalCommit": "3f8fb94f14252554968aac35d5c7ecf54bd90e06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg5NzI1OA==", "url": "https://github.com/junit-team/junit5/pull/2342#discussion_r470897258", "bodyText": "Fixed", "author": "cemurat", "createdAt": "2020-08-14T22:56:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU0NjAzOA=="}], "type": "inlineReview", "revised_code": {"commit": "1c282c17331878d04a4bd3e5f02f7c840317cfee", "chunk": "diff --git a/junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/CsvFileArgumentsProviderTests.java b/junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/CsvFileArgumentsProviderTests.java\nindex 9d74344212..49b60a764b 100644\n--- a/junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/CsvFileArgumentsProviderTests.java\n+++ b/junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/CsvFileArgumentsProviderTests.java\n\n@@ -379,7 +379,7 @@ class CsvFileArgumentsProviderTests {\n \n \t\tStream<Object[]> arguments = provideArguments(new CsvFileArgumentsProvider(), annotation);\n \n-\t\tassertThat(arguments).hasSize(2 * 1);\n+\t\tassertThat(arguments).hasSize(2);\n \t}\n \n \t@Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU0NjA3Mw==", "url": "https://github.com/junit-team/junit5/pull/2342#discussion_r470546073", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertThat(arguments).hasSize(2 * 1);\n          \n          \n            \n            \t\tassertThat(arguments).hasSize(2);", "author": "marcphilipp", "createdAt": "2020-08-14T10:32:27Z", "path": "junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/CsvFileArgumentsProviderTests.java", "diffHunk": "@@ -368,6 +368,74 @@ void emptyValueIsAnEmptyWithCustomNullValueString() {\n \t\tassertThat(arguments).containsExactly(array(\"apple\", null, null, \"''\"), array(null, null, \"foo\", \"bar\"));\n \t}\n \n+\t@Test\n+\tvoid readsLineFromDefaultMaxCharsFileWithDefaultConfig(@TempDir Path tempDir) throws Exception {\n+\t\tPath csvFile = writeClasspathResourceToFile(\"/default-max-chars.csv\", tempDir.resolve(\"default-max-chars.csv\"));\n+\t\tCsvFileSource annotation = csvFileSource()//\n+\t\t\t\t.encoding(\"ISO-8859-1\")//\n+\t\t\t\t.resources(\"/default-max-chars.csv\")//\n+\t\t\t\t.files(csvFile.toAbsolutePath().toString())//\n+\t\t\t\t.build();\n+\n+\t\tStream<Object[]> arguments = provideArguments(new CsvFileArgumentsProvider(), annotation);\n+\n+\t\tassertThat(arguments).hasSize(2 * 1);\n+\t}\n+\n+\t@Test\n+\tvoid readsLineFromExceedsMaxCharsFileWithCustomConfig(@TempDir Path tempDir) throws java.io.IOException {\n+\t\tPath csvFile = writeClasspathResourceToFile(\"/exceeds-default-max-chars.csv\",\n+\t\t\ttempDir.resolve(\"exceeds-default-max-chars.csv\"));\n+\t\tCsvFileSource annotation = csvFileSource()//\n+\t\t\t\t.encoding(\"ISO-8859-1\")//\n+\t\t\t\t.resources(\"/exceeds-default-max-chars.csv\")//\n+\t\t\t\t.maxCharsPerColumn(4097).files(csvFile.toAbsolutePath().toString())//\n+\t\t\t\t.build();\n+\n+\t\tStream<Object[]> arguments = provideArguments(new CsvFileArgumentsProvider(), annotation);\n+\n+\t\tassertThat(arguments).hasSize(2 * 1);", "originalCommit": "3f8fb94f14252554968aac35d5c7ecf54bd90e06", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1c282c17331878d04a4bd3e5f02f7c840317cfee", "chunk": "diff --git a/junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/CsvFileArgumentsProviderTests.java b/junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/CsvFileArgumentsProviderTests.java\nindex 9d74344212..49b60a764b 100644\n--- a/junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/CsvFileArgumentsProviderTests.java\n+++ b/junit-jupiter-params/src/test/java/org/junit/jupiter/params/provider/CsvFileArgumentsProviderTests.java\n\n@@ -379,7 +379,7 @@ class CsvFileArgumentsProviderTests {\n \n \t\tStream<Object[]> arguments = provideArguments(new CsvFileArgumentsProvider(), annotation);\n \n-\t\tassertThat(arguments).hasSize(2 * 1);\n+\t\tassertThat(arguments).hasSize(2);\n \t}\n \n \t@Test\n"}}, {"oid": "1c282c17331878d04a4bd3e5f02f7c840317cfee", "url": "https://github.com/junit-team/junit5/commit/1c282c17331878d04a4bd3e5f02f7c840317cfee", "message": "Updates according to code review", "committedDate": "2020-08-14T22:55:13Z", "type": "commit"}, {"oid": "9db32bb543d1b0f2ce50b64b2c27e6503e85e0f2", "url": "https://github.com/junit-team/junit5/commit/9db32bb543d1b0f2ce50b64b2c27e6503e85e0f2", "message": "Updated release notes", "committedDate": "2020-08-15T09:10:53Z", "type": "commit"}, {"oid": "863e4d3a425dadb2f45db8dd7ed3c5cf372fb561", "url": "https://github.com/junit-team/junit5/commit/863e4d3a425dadb2f45db8dd7ed3c5cf372fb561", "message": "Merge branch 'main' into issues/1476-max-chars-support-per-column-csv\n\n# Conflicts:\n#\tdocumentation/src/docs/asciidoc/release-notes/release-notes-5.7.0-M2.adoc", "committedDate": "2020-08-15T09:15:08Z", "type": "commit"}, {"oid": "cc4b5f0a129ab8c50c8f5624459e056b28acc277", "url": "https://github.com/junit-team/junit5/commit/cc4b5f0a129ab8c50c8f5624459e056b28acc277", "message": "remove duplicate lines for doc", "committedDate": "2020-08-15T09:20:34Z", "type": "commit"}, {"oid": "cb2c75de153f8fe381c97ae8ab28e42a46eecacf", "url": "https://github.com/junit-team/junit5/commit/cb2c75de153f8fe381c97ae8ab28e42a46eecacf", "message": "added missing import after merge", "committedDate": "2020-08-15T09:46:32Z", "type": "commit"}, {"oid": "fa1815a779bdb764cdc99d6ffc36cba49b3638f6", "url": "https://github.com/junit-team/junit5/commit/fa1815a779bdb764cdc99d6ffc36cba49b3638f6", "message": "Merge branch 'main' into issues/1476-max-chars-support-per-column-csv\n\n# Conflicts:\n#\tdocumentation/src/docs/asciidoc/release-notes/release-notes-5.7.0-M2.adoc", "committedDate": "2020-08-15T21:48:24Z", "type": "commit"}, {"oid": "91c9b428b1aea1d11947c27b3cda55347b0fc7fa", "url": "https://github.com/junit-team/junit5/commit/91c9b428b1aea1d11947c27b3cda55347b0fc7fa", "message": "Polishing", "committedDate": "2020-08-16T12:13:17Z", "type": "commit"}, {"oid": "f9717c319a089098372e61ae064a6cffaa8621e9", "url": "https://github.com/junit-team/junit5/commit/f9717c319a089098372e61ae064a6cffaa8621e9", "message": "More polishing", "committedDate": "2020-08-16T12:15:57Z", "type": "commit"}]}