{"pr_number": 2214, "pr_title": "Introduce `@EnabledIf`/`@DisabledIf` annotations", "pr_createdAt": "2020-03-13T19:34:50Z", "pr_url": "https://github.com/junit-team/junit5/pull/2214", "timeline": [{"oid": "6fc3abc5e44c0eab6db0ec4a1088353002d3310e", "url": "https://github.com/junit-team/junit5/commit/6fc3abc5e44c0eab6db0ec4a1088353002d3310e", "message": "Introduce `@EnabledIf`/`@DisabledIf` annotations based on static condition methods", "committedDate": "2020-03-13T19:46:51Z", "type": "forcePushed"}, {"oid": "d3e6c02d42f58c5f99f85cffd623c7436c499b0a", "url": "https://github.com/junit-team/junit5/commit/d3e6c02d42f58c5f99f85cffd623c7436c499b0a", "message": "Introduce `@EnabledIf`/`@DisabledIf` annotations based on static condition methods", "committedDate": "2020-03-13T19:59:24Z", "type": "forcePushed"}, {"oid": "08a0db885b3bc89b4432f74a2625fcc20e462afa", "url": "https://github.com/junit-team/junit5/commit/08a0db885b3bc89b4432f74a2625fcc20e462afa", "message": "Introduce `@EnabledIf`/`@DisabledIf` annotations based on static condition methods", "committedDate": "2020-03-13T20:14:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ0ODkwMg==", "url": "https://github.com/junit-team/junit5/pull/2214#discussion_r392448902", "bodyText": "I believe you might have copied that from somewhere. \ud83d\ude09", "author": "marcphilipp", "createdAt": "2020-03-13T20:21:21Z", "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/DisabledIf.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.jupiter.api.condition;\n+\n+import static org.apiguardian.api.API.Status.STABLE;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.apiguardian.api.API;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+/**\n+ * {@code @DisabledIf} is used to signal that the annotated test class or\n+ * test method is <em>disabled</em> only if the provided condition\n+ * evaluates to {@code true}.\n+ *\n+ * <p>When applied at the class level, all test methods within that class\n+ * will be disabled on the same specified operating systems.", "originalCommit": "08a0db885b3bc89b4432f74a2625fcc20e462afa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ2MDY3Nw==", "url": "https://github.com/junit-team/junit5/pull/2214#discussion_r392460677", "bodyText": "Oopsie, you got me! \ud83d\ude01", "author": "juliette-derancourt", "createdAt": "2020-03-13T20:39:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ0ODkwMg=="}], "type": "inlineReview", "revised_code": {"commit": "eebf1d6824839f6898830d06f7b157f168e01bc7", "chunk": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/DisabledIf.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/DisabledIf.java\nindex 0b81b4430b..fb09822601 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/DisabledIf.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/DisabledIf.java\n\n@@ -27,7 +27,7 @@ import org.junit.jupiter.api.extension.ExtendWith;\n  * evaluates to {@code true}.\n  *\n  * <p>When applied at the class level, all test methods within that class\n- * will be disabled on the same specified operating systems.\n+ * will be disabled on the same condition.\n  *\n  * <p>If a test method is disabled via this annotation, that does not prevent\n  * the test class from being instantiated. Rather, it prevents the execution of\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ1MDI5MQ==", "url": "https://github.com/junit-team/junit5/pull/2214#discussion_r392450291", "bodyText": "I think this class can be package-private.", "author": "marcphilipp", "createdAt": "2020-03-13T20:23:28Z", "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/MethodBasedCondition.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.jupiter.api.condition;\n+\n+import static java.lang.String.format;\n+\n+import java.lang.reflect.Method;\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.extension.ConditionEvaluationResult;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.platform.commons.JUnitException;\n+import org.junit.platform.commons.util.Preconditions;\n+import org.junit.platform.commons.util.ReflectionUtils;\n+\n+public abstract class MethodBasedCondition implements ExecutionCondition {", "originalCommit": "08a0db885b3bc89b4432f74a2625fcc20e462afa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ2MDc2MA==", "url": "https://github.com/junit-team/junit5/pull/2214#discussion_r392460760", "bodyText": "Indeed, it was even making the build fail ^^", "author": "juliette-derancourt", "createdAt": "2020-03-13T20:39:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ1MDI5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "6ed42576b598af549207609f8cdf88c5b8b67837", "chunk": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/MethodBasedCondition.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/MethodBasedCondition.java\nindex 506b0b1fb0..48765a14b7 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/MethodBasedCondition.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/MethodBasedCondition.java\n\n@@ -22,7 +22,7 @@ import org.junit.platform.commons.JUnitException;\n import org.junit.platform.commons.util.Preconditions;\n import org.junit.platform.commons.util.ReflectionUtils;\n \n-public abstract class MethodBasedCondition implements ExecutionCondition {\n+abstract class MethodBasedCondition implements ExecutionCondition {\n \n \tabstract Optional<String> getMethodName(ExtensionContext context);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ1MjQ5Mw==", "url": "https://github.com/junit-team/junit5/pull/2214#discussion_r392452493", "bodyText": "Can we reuse this logic from MethodArgumentsProvider somehow?", "author": "marcphilipp", "createdAt": "2020-03-13T20:26:33Z", "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/MethodBasedCondition.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.jupiter.api.condition;\n+\n+import static java.lang.String.format;\n+\n+import java.lang.reflect.Method;\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.extension.ConditionEvaluationResult;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.platform.commons.JUnitException;\n+import org.junit.platform.commons.util.Preconditions;\n+import org.junit.platform.commons.util.ReflectionUtils;\n+\n+public abstract class MethodBasedCondition implements ExecutionCondition {\n+\n+\tabstract Optional<String> getMethodName(ExtensionContext context);\n+\n+\tabstract ConditionEvaluationResult getDefaultResult();\n+\n+\tabstract ConditionEvaluationResult getResultBasedOnBoolean(boolean result);\n+\n+\t@Override\n+\tpublic ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext context) {\n+\t\treturn getMethodName(context) //\n+\t\t\t\t.map(methodName -> getConditionMethod(methodName, context)) //\n+\t\t\t\t.map(method -> (boolean) evaluateCondition(method, context)) //\n+\t\t\t\t.map(this::getResultBasedOnBoolean).orElse(getDefaultResult());\n+\t}\n+\n+\tprivate Method getConditionMethod(String methodName, ExtensionContext context) {\n+\t\tif (methodName.contains(\"#\")) {\n+\t\t\treturn findMethodByFullyQualifiedName(methodName);\n+\t\t}\n+\t\treturn findMethod(context.getRequiredTestClass(), methodName);\n+\t}\n+\n+\tprivate Method findMethodByFullyQualifiedName(String fullyQualifiedMethodName) {\n+\t\tString[] methodParts = ReflectionUtils.parseFullyQualifiedMethodName(fullyQualifiedMethodName);\n+\t\tString className = methodParts[0];\n+\t\tString methodName = methodParts[1];\n+\t\tClass<?> clazz = ReflectionUtils.tryToLoadClass(className).getOrThrow(\n+\t\t\tcause -> new JUnitException(format(\"Could not load class [%s]\", className), cause));\n+\t\treturn findMethod(clazz, methodName);\n+\t}\n+\n+\tprivate Method findMethod(Class<?> clazz, String methodName) {\n+\t\treturn ReflectionUtils.findMethod(clazz, methodName) //\n+\t\t\t\t.orElseGet(() -> ReflectionUtils.findMethod(clazz, methodName, ExtensionContext.class) //\n+\t\t\t\t\t\t.orElseThrow(() -> new JUnitException(\n+\t\t\t\t\t\t\tformat(\"Could not find method [%s] in class [%s]\", methodName, clazz.getName()))));", "originalCommit": "08a0db885b3bc89b4432f74a2625fcc20e462afa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ2MjY3MQ==", "url": "https://github.com/junit-team/junit5/pull/2214#discussion_r392462671", "bodyText": "Hmm I thought about that at first, but since the classes were in two different modules I put that aside for now. But I agree.\nWhere would you put the logic in common? In ReflectionUtils?", "author": "juliette-derancourt", "createdAt": "2020-03-13T20:42:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ1MjQ5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ2NDU4Ng==", "url": "https://github.com/junit-team/junit5/pull/2214#discussion_r392464586", "bodyText": "Where would you put the logic in common? In ReflectionUtils?\n\nSounds like a good place. We may export that logic to external users later, if requested.", "author": "sormuras", "createdAt": "2020-03-13T20:45:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ1MjQ5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "6ed42576b598af549207609f8cdf88c5b8b67837", "chunk": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/MethodBasedCondition.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/MethodBasedCondition.java\nindex 506b0b1fb0..48765a14b7 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/MethodBasedCondition.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/MethodBasedCondition.java\n\n@@ -22,7 +22,7 @@ import org.junit.platform.commons.JUnitException;\n import org.junit.platform.commons.util.Preconditions;\n import org.junit.platform.commons.util.ReflectionUtils;\n \n-public abstract class MethodBasedCondition implements ExecutionCondition {\n+abstract class MethodBasedCondition implements ExecutionCondition {\n \n \tabstract Optional<String> getMethodName(ExtensionContext context);\n \n"}}, {"oid": "6ed42576b598af549207609f8cdf88c5b8b67837", "url": "https://github.com/junit-team/junit5/commit/6ed42576b598af549207609f8cdf88c5b8b67837", "message": "Introduce `@EnabledIf`/`@DisabledIf` annotations based on static condition methods", "committedDate": "2020-03-13T20:32:42Z", "type": "forcePushed"}, {"oid": "eebf1d6824839f6898830d06f7b157f168e01bc7", "url": "https://github.com/junit-team/junit5/commit/eebf1d6824839f6898830d06f7b157f168e01bc7", "message": "Introduce `@EnabledIf`/`@DisabledIf` annotations based on static condition methods", "committedDate": "2020-03-13T20:56:15Z", "type": "forcePushed"}, {"oid": "542e607309602f89db3ecc27095c01a56d157ffb", "url": "https://github.com/junit-team/junit5/commit/542e607309602f89db3ecc27095c01a56d157ffb", "message": "Update release notes", "committedDate": "2020-03-21T16:27:21Z", "type": "forcePushed"}, {"oid": "ee1eef90569893d22858079cf33d42cd2e6d6ab7", "url": "https://github.com/junit-team/junit5/commit/ee1eef90569893d22858079cf33d42cd2e6d6ab7", "message": "Add documentation in the user guide", "committedDate": "2020-03-21T17:02:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY0Nzk0MQ==", "url": "https://github.com/junit-team/junit5/pull/2214#discussion_r399647941", "bodyText": "This method needs Javadoc, including @since, and an @API annotation.", "author": "marcphilipp", "createdAt": "2020-03-28T10:47:10Z", "path": "junit-platform-commons/src/main/java/org/junit/platform/commons/util/ReflectionUtils.java", "diffHunk": "@@ -1314,6 +1315,11 @@ public static boolean isMethodPresent(Class<?> clazz, Predicate<Method> predicat\n \t\treturn Optional.empty();\n \t}\n \n+\tpublic static Method getRequiredMethod(Class<?> clazz, String methodName, Class<?>... parameterTypes) {", "originalCommit": "ee1eef90569893d22858079cf33d42cd2e6d6ab7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY1MzgxMQ==", "url": "https://github.com/junit-team/junit5/pull/2214#discussion_r399653811", "bodyText": "Ah yes, this one slipped under my radar \ud83d\ude04", "author": "juliette-derancourt", "createdAt": "2020-03-28T11:54:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY0Nzk0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY1NDI1Mg==", "url": "https://github.com/junit-team/junit5/pull/2214#discussion_r399654252", "bodyText": "Would this make more sense to throw a NoSuchMethodException here instead of JUnitException? \ud83e\udd14", "author": "juliette-derancourt", "createdAt": "2020-03-28T11:58:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY0Nzk0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY3NzAxNA==", "url": "https://github.com/junit-team/junit5/pull/2214#discussion_r399677014", "bodyText": "When we throw exceptions, we generally only use JUnitException or one of its subclasses to avoid confusion with exceptions thrown from tests. Thus, I'd keep it as is.", "author": "marcphilipp", "createdAt": "2020-03-28T15:51:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY0Nzk0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "49747a0e6731b70c2154a473a70b6061e213ce53", "chunk": "diff --git a/junit-platform-commons/src/main/java/org/junit/platform/commons/util/ReflectionUtils.java b/junit-platform-commons/src/main/java/org/junit/platform/commons/util/ReflectionUtils.java\nindex 5fe48aa5ca..2a70371003 100644\n--- a/junit-platform-commons/src/main/java/org/junit/platform/commons/util/ReflectionUtils.java\n+++ b/junit-platform-commons/src/main/java/org/junit/platform/commons/util/ReflectionUtils.java\n\n@@ -1315,6 +1316,29 @@ public final class ReflectionUtils {\n \t\treturn Optional.empty();\n \t}\n \n+\t/**\n+\t * Find the first {@link Method} of the supplied class or interface that\n+\t * meets the specified criteria, beginning with the specified class or\n+\t * interface and traversing up the type hierarchy until such a method is\n+\t * found or the type hierarchy is exhausted.\n+\t *\n+\t * <p>Use this method as an alternative to\n+\t * {@link #findMethod(Class, String, Class...)} for use cases in which the\n+\t * method is required to be present.\n+\t *\n+\t * @param clazz the class or interface in which to find the method;\n+\t * never {@code null}\n+\t * @param methodName the name of the method to find; never {@code null}\n+\t * or empty\n+\t * @param parameterTypes the types of parameters accepted by the method,\n+\t * if any; never {@code null}\n+\t * @return the {@code Method} found; never {@code null}\n+\t * @throws JUnitException if no method is found\n+\t *\n+\t * @since 1.7\n+\t * @see #findMethod(Class, String, Class...)\n+\t */\n+\t@API(status = STABLE, since = \"1.7\")\n \tpublic static Method getRequiredMethod(Class<?> clazz, String methodName, Class<?>... parameterTypes) {\n \t\treturn ReflectionUtils.findMethod(clazz, methodName, parameterTypes).orElseThrow(\n \t\t\t() -> new JUnitException(format(\"Could not find method [%s] in class [%s]\", methodName, clazz.getName())));\n"}}, {"oid": "49747a0e6731b70c2154a473a70b6061e213ce53", "url": "https://github.com/junit-team/junit5/commit/49747a0e6731b70c2154a473a70b6061e213ce53", "message": "Add Javadoc for `getRequiredMethod(Class, String, Class...)`", "committedDate": "2020-03-28T16:34:34Z", "type": "forcePushed"}, {"oid": "1a22ff2adad2d27a5dfec491ae7f23f98f24f9e1", "url": "https://github.com/junit-team/junit5/commit/1a22ff2adad2d27a5dfec491ae7f23f98f24f9e1", "message": "Introduce `@EnabledIf`/`@DisabledIf` annotations based on static condition methods", "committedDate": "2020-04-01T19:46:15Z", "type": "commit"}, {"oid": "0d064777ed18d0b1ace548c5634e0d8fc287ef2e", "url": "https://github.com/junit-team/junit5/commit/0d064777ed18d0b1ace548c5634e0d8fc287ef2e", "message": "Extract logic to ReflectionUtils", "committedDate": "2020-04-01T19:46:15Z", "type": "commit"}, {"oid": "5dbcbf217ec769a3881246ed2c5a84ef232de0fa", "url": "https://github.com/junit-team/junit5/commit/5dbcbf217ec769a3881246ed2c5a84ef232de0fa", "message": "Update release notes", "committedDate": "2020-04-01T19:46:15Z", "type": "commit"}, {"oid": "9ce647d44839ccbbef338bc3a4ff3674caa596f6", "url": "https://github.com/junit-team/junit5/commit/9ce647d44839ccbbef338bc3a4ff3674caa596f6", "message": "Add documentation in the user guide", "committedDate": "2020-04-01T19:46:15Z", "type": "commit"}, {"oid": "f7b594bca2b95f03cd106f851730ee57aef38b0e", "url": "https://github.com/junit-team/junit5/commit/f7b594bca2b95f03cd106f851730ee57aef38b0e", "message": "Update link-attributes.adoc", "committedDate": "2020-04-01T19:46:15Z", "type": "commit"}, {"oid": "5f08fe9d7b45c21f767591b9ba522e7ddd5af158", "url": "https://github.com/junit-team/junit5/commit/5f08fe9d7b45c21f767591b9ba522e7ddd5af158", "message": "Add Javadoc for `getRequiredMethod(Class, String, Class...)`", "committedDate": "2020-04-01T19:46:15Z", "type": "commit"}, {"oid": "f7224428e7d0323fe11f8998a78298eda79221d9", "url": "https://github.com/junit-team/junit5/commit/f7224428e7d0323fe11f8998a78298eda79221d9", "message": "Add tests with non-static method and per class lifecycle", "committedDate": "2020-04-01T19:58:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg3NTIxMQ==", "url": "https://github.com/junit-team/junit5/pull/2214#discussion_r401875211", "bodyText": "@marcphilipp Am I wrong to assume that the testInstance will always be present in this case?\nIf so, is the presence of @TestInstance(Lifecycle.PER_CLASS) even required in the case of a non-static method?", "author": "juliette-derancourt", "createdAt": "2020-04-01T20:01:37Z", "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/MethodBasedCondition.java", "diffHunk": "@@ -66,7 +66,7 @@ private Object evaluateCondition(Method method, ExtensionContext context) {\n \t\tPreconditions.condition(areParametersSupported(method),\n \t\t\t() -> format(\"method [%s] should take either an ExtensionContext or no parameters\", method.getName()));\n \n-\t\tObject testInstance = context.getTestInstance().orElse(null);\n+\t\tObject testInstance = context.getRequiredTestInstance();", "originalCommit": "f7224428e7d0323fe11f8998a78298eda79221d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2MzQ5MQ==", "url": "https://github.com/junit-team/junit5/pull/2214#discussion_r402263491", "bodyText": "I think we're missing integration test for applying the condition on the class level in which case the test instance would not be present.", "author": "marcphilipp", "createdAt": "2020-04-02T12:10:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg3NTIxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "4f367023ba3415da34cfa7261548d8271429f0d8", "chunk": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/MethodBasedCondition.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/MethodBasedCondition.java\nindex 689a92dea2..64718474bd 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/MethodBasedCondition.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/MethodBasedCondition.java\n\n@@ -66,7 +66,7 @@ abstract class MethodBasedCondition implements ExecutionCondition {\n \t\tPreconditions.condition(areParametersSupported(method),\n \t\t\t() -> format(\"method [%s] should take either an ExtensionContext or no parameters\", method.getName()));\n \n-\t\tObject testInstance = context.getRequiredTestInstance();\n+\t\tObject testInstance = context.getTestInstance().orElse(null);\n \t\tif (method.getParameterCount() == 0) {\n \t\t\treturn ReflectionUtils.invokeMethod(method, testInstance);\n \t\t}\n"}}, {"oid": "4f367023ba3415da34cfa7261548d8271429f0d8", "url": "https://github.com/junit-team/junit5/commit/4f367023ba3415da34cfa7261548d8271429f0d8", "message": "Add tests with non-static method and per class lifecycle", "committedDate": "2020-04-03T19:47:12Z", "type": "commit"}, {"oid": "4f367023ba3415da34cfa7261548d8271429f0d8", "url": "https://github.com/junit-team/junit5/commit/4f367023ba3415da34cfa7261548d8271429f0d8", "message": "Add tests with non-static method and per class lifecycle", "committedDate": "2020-04-03T19:47:12Z", "type": "forcePushed"}, {"oid": "3a2dceaaf75b5609511dd4f1fec4ea1c3e686b79", "url": "https://github.com/junit-team/junit5/commit/3a2dceaaf75b5609511dd4f1fec4ea1c3e686b79", "message": "Add integration tests for annotations at class level", "committedDate": "2020-04-09T09:10:46Z", "type": "commit"}, {"oid": "800d3680419977283f63f0f4aea42b2ba793b4ad", "url": "https://github.com/junit-team/junit5/commit/800d3680419977283f63f0f4aea42b2ba793b4ad", "message": "Update documentation", "committedDate": "2020-04-10T20:27:16Z", "type": "commit"}]}