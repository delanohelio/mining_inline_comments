{"pr_number": 2270, "pr_title": "Execute explicitly selected classes regardless of class name filters", "pr_createdAt": "2020-04-23T18:31:42Z", "pr_url": "https://github.com/junit-team/junit5/pull/2270", "timeline": [{"oid": "687306d4bf032468ce3d4bf4ceb8e408809015a2", "url": "https://github.com/junit-team/junit5/commit/687306d4bf032468ce3d4bf4ceb8e408809015a2", "message": "Add explicitly selected classes from --select-class and --select-method to the include patterns", "committedDate": "2020-04-23T18:25:22Z", "type": "commit"}, {"oid": "e351b32e64fdd449491d3e4c110cca526b3c7b13", "url": "https://github.com/junit-team/junit5/commit/e351b32e64fdd449491d3e4c110cca526b3c7b13", "message": "Use `ReflectionUtils.parseFullyQualifiedMethodName()` for readability", "committedDate": "2020-04-23T18:35:10Z", "type": "commit"}, {"oid": "ea95ec2ba8b27c42052613315d9177520631cd94", "url": "https://github.com/junit-team/junit5/commit/ea95ec2ba8b27c42052613315d9177520631cd94", "message": "Extract recurring filter assertion", "committedDate": "2020-04-23T18:35:10Z", "type": "commit"}, {"oid": "eb41e46206a1447b0e0f0e3db21ff128b1862d01", "url": "https://github.com/junit-team/junit5/commit/eb41e46206a1447b0e0f0e3db21ff128b1862d01", "message": "Update release notes", "committedDate": "2020-04-23T18:35:10Z", "type": "commit"}, {"oid": "eb41e46206a1447b0e0f0e3db21ff128b1862d01", "url": "https://github.com/junit-team/junit5/commit/eb41e46206a1447b0e0f0e3db21ff128b1862d01", "message": "Update release notes", "committedDate": "2020-04-23T18:35:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAzMjQzNQ==", "url": "https://github.com/junit-team/junit5/pull/2270#discussion_r414032435", "bodyText": "Not sure if this is a good idea... Might need a better name \ud83e\udd14", "author": "juliette-derancourt", "createdAt": "2020-04-23T18:36:36Z", "path": "platform-tests/src/test/java/org/junit/platform/console/tasks/DiscoveryRequestCreatorTests.java", "diffHunk": "@@ -282,6 +298,10 @@ private LauncherDiscoveryRequest convert() {\n \t\treturn creator.toDiscoveryRequest(options);\n \t}\n \n+\tprivate void assertFilters(Filter<?> filter, String filteredElement) {", "originalCommit": "eb41e46206a1447b0e0f0e3db21ff128b1862d01", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAzNjkyNQ==", "url": "https://github.com/junit-team/junit5/pull/2270#discussion_r415036925", "bodyText": "assertFilterDescriptionContains?\nShould we rather call the filter and check it includes/excludes the expected names?", "author": "marcphilipp", "createdAt": "2020-04-25T10:49:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAzMjQzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMzNzI4Mw==", "url": "https://github.com/junit-team/junit5/pull/2270#discussion_r415337283", "bodyText": "Indeed!", "author": "juliette-derancourt", "createdAt": "2020-04-26T15:38:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAzMjQzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "41aa3a2b07e45ec083407e2aa267d75777f0a74c", "chunk": "diff --git a/platform-tests/src/test/java/org/junit/platform/console/tasks/DiscoveryRequestCreatorTests.java b/platform-tests/src/test/java/org/junit/platform/console/tasks/DiscoveryRequestCreatorTests.java\nindex 4657e5d445..1435efe614 100644\n--- a/platform-tests/src/test/java/org/junit/platform/console/tasks/DiscoveryRequestCreatorTests.java\n+++ b/platform-tests/src/test/java/org/junit/platform/console/tasks/DiscoveryRequestCreatorTests.java\n\n@@ -298,8 +298,12 @@ class DiscoveryRequestCreatorTests {\n \t\treturn creator.toDiscoveryRequest(options);\n \t}\n \n-\tprivate void assertFilters(Filter<?> filter, String filteredElement) {\n-\t\tassertThat(filter.toString()).contains(filteredElement);\n+\tprivate void assertIncludes(Filter<String> filter, String included) {\n+\t\tassertThat(filter.apply(included).included()).isTrue();\n+\t}\n+\n+\tprivate void assertExcludes(Filter<String> filter, String excluded) {\n+\t\tassertThat(filter.apply(excluded).excluded()).isTrue();\n \t}\n \n \t@SafeVarargs\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAzNjUzOA==", "url": "https://github.com/junit-team/junit5/pull/2270#discussion_r415036538", "bodyText": "We should quote the literal class names using Pattern.quote, e.g. like this:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tprivate ClassNameFilter includedClassNamePatterns(CommandLineOptions patterns) {\n          \n          \n            \n            \t\tList<String> classNamePatterns = new ArrayList<>();\n          \n          \n            \n            \t\tclassNamePatterns.addAll(patterns.getIncludedClassNamePatterns());\n          \n          \n            \n            \t\tclassNamePatterns.addAll(patterns.getSelectedClasses());\n          \n          \n            \n            \t\tclassNamePatterns.addAll(patterns.getSelectedMethods().stream() //\n          \n          \n            \n            \t\t\t\t.map(name -> ReflectionUtils.parseFullyQualifiedMethodName(name)[0]) //\n          \n          \n            \n            \t\t\t\t.collect(Collectors.toList()));\n          \n          \n            \n            \t\treturn includeClassNamePatterns(classNamePatterns.toArray(new String[0]));\n          \n          \n            \n            \t}\n          \n          \n            \n            \tprivate ClassNameFilter includedClassNamePatterns(CommandLineOptions options) {\n          \n          \n            \n            \t\tStream<Stream<String>> patternStreams = Stream.of( //\n          \n          \n            \n            \t\t\toptions.getIncludedClassNamePatterns().stream(), //\n          \n          \n            \n            \t\t\toptions.getSelectedClasses().stream() //\n          \n          \n            \n            \t\t\t\t\t.map(Pattern::quote), //\n          \n          \n            \n            \t\t\toptions.getSelectedMethods().stream() //\n          \n          \n            \n            \t\t\t\t\t.map(name -> ReflectionUtils.parseFullyQualifiedMethodName(name)[0]) //\n          \n          \n            \n            \t\t\t\t\t.map(Pattern::quote));\n          \n          \n            \n            \t\treturn includeClassNamePatterns(patternStreams //\n          \n          \n            \n            \t\t\t\t.flatMap(Function.identity()) //\n          \n          \n            \n            \t\t\t\t.toArray(String[]::new));\n          \n          \n            \n            \t}", "author": "marcphilipp", "createdAt": "2020-04-25T10:46:33Z", "path": "junit-platform-console/src/main/java/org/junit/platform/console/tasks/DiscoveryRequestCreator.java", "diffHunk": "@@ -127,4 +129,14 @@ private void addFilters(LauncherDiscoveryRequestBuilder requestBuilder, CommandL\n \t\t}\n \t}\n \n+\tprivate ClassNameFilter includedClassNamePatterns(CommandLineOptions patterns) {\n+\t\tList<String> classNamePatterns = new ArrayList<>();\n+\t\tclassNamePatterns.addAll(patterns.getIncludedClassNamePatterns());\n+\t\tclassNamePatterns.addAll(patterns.getSelectedClasses());\n+\t\tclassNamePatterns.addAll(patterns.getSelectedMethods().stream() //\n+\t\t\t\t.map(name -> ReflectionUtils.parseFullyQualifiedMethodName(name)[0]) //\n+\t\t\t\t.collect(Collectors.toList()));\n+\t\treturn includeClassNamePatterns(classNamePatterns.toArray(new String[0]));\n+\t}", "originalCommit": "eb41e46206a1447b0e0f0e3db21ff128b1862d01", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMzNzA5NQ==", "url": "https://github.com/junit-team/junit5/pull/2270#discussion_r415337095", "bodyText": "Haven't thought of that, thanks! \ud83d\udc4d", "author": "juliette-derancourt", "createdAt": "2020-04-26T15:37:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAzNjUzOA=="}], "type": "inlineReview", "revised_code": {"commit": "41aa3a2b07e45ec083407e2aa267d75777f0a74c", "chunk": "diff --git a/junit-platform-console/src/main/java/org/junit/platform/console/tasks/DiscoveryRequestCreator.java b/junit-platform-console/src/main/java/org/junit/platform/console/tasks/DiscoveryRequestCreator.java\nindex fa1617d0f8..8ebd090979 100644\n--- a/junit-platform-console/src/main/java/org/junit/platform/console/tasks/DiscoveryRequestCreator.java\n+++ b/junit-platform-console/src/main/java/org/junit/platform/console/tasks/DiscoveryRequestCreator.java\n\n@@ -129,14 +131,17 @@ class DiscoveryRequestCreator {\n \t\t}\n \t}\n \n-\tprivate ClassNameFilter includedClassNamePatterns(CommandLineOptions patterns) {\n-\t\tList<String> classNamePatterns = new ArrayList<>();\n-\t\tclassNamePatterns.addAll(patterns.getIncludedClassNamePatterns());\n-\t\tclassNamePatterns.addAll(patterns.getSelectedClasses());\n-\t\tclassNamePatterns.addAll(patterns.getSelectedMethods().stream() //\n-\t\t\t\t.map(name -> ReflectionUtils.parseFullyQualifiedMethodName(name)[0]) //\n-\t\t\t\t.collect(Collectors.toList()));\n-\t\treturn includeClassNamePatterns(classNamePatterns.toArray(new String[0]));\n+\tprivate ClassNameFilter includedClassNamePatterns(CommandLineOptions options) {\n+\t\tStream<Stream<String>> patternStreams = Stream.of( //\n+\t\t\toptions.getIncludedClassNamePatterns().stream(), //\n+\t\t\toptions.getSelectedClasses().stream() //\n+\t\t\t\t\t.map(Pattern::quote), //\n+\t\t\toptions.getSelectedMethods().stream() //\n+\t\t\t\t\t.map(name -> ReflectionUtils.parseFullyQualifiedMethodName(name)[0]) //\n+\t\t\t\t\t.map(Pattern::quote));\n+\t\treturn includeClassNamePatterns(patternStreams //\n+\t\t\t\t.flatMap(Function.identity()) //\n+\t\t\t\t.toArray(String[]::new));\n \t}\n \n }\n"}}, {"oid": "41aa3a2b07e45ec083407e2aa267d75777f0a74c", "url": "https://github.com/junit-team/junit5/commit/41aa3a2b07e45ec083407e2aa267d75777f0a74c", "message": "Improvements", "committedDate": "2020-04-26T15:49:08Z", "type": "commit"}]}