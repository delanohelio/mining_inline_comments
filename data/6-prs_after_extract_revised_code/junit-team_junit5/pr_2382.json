{"pr_number": 2382, "pr_title": "Introduce global default lock to facilitate isolated test execution", "pr_createdAt": "2020-08-13T15:05:01Z", "pr_url": "https://github.com/junit-team/junit5/pull/2382", "timeline": [{"oid": "8b7c6dfbecc2fa67b3db72e62d835439d99089fc", "url": "https://github.com/junit-team/junit5/commit/8b7c6dfbecc2fa67b3db72e62d835439d99089fc", "message": "Introduce global default lock to facilitate isolated test execution\n\nThis commit introduces a new global resource lock \"__global__\" that all\ntest descriptors that are children of the engine descriptor acquire by\ndefault in READ mode. Using the `@Isolated` annotation in the Jupiter\nAPI causes the mode to be changed to READ_WRITE.\n\nCo-authored-by: Leonard Br\u00fcnings <lord_damokles@gmx.net>", "committedDate": "2020-08-13T15:01:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAzOTg1OQ==", "url": "https://github.com/junit-team/junit5/pull/2382#discussion_r470039859", "bodyText": "This can be moved into the else branch again.", "author": "marcphilipp", "createdAt": "2020-08-13T15:31:37Z", "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/NodeTreeWalker.java", "diffHunk": "@@ -10,39 +10,62 @@\n \n package org.junit.platform.engine.support.hierarchical;\n \n+import static java.util.Collections.singleton;\n+import static org.junit.platform.engine.support.hierarchical.ExclusiveResource.GLOBAL_RESOURCE_LOCK_KEY;\n import static org.junit.platform.engine.support.hierarchical.Node.ExecutionMode.SAME_THREAD;\n \n import java.util.HashSet;\n import java.util.Set;\n import java.util.function.Consumer;\n \n+import org.junit.platform.commons.util.Preconditions;\n import org.junit.platform.engine.TestDescriptor;\n \n /**\n  * @since 1.3\n  */\n class NodeTreeWalker {\n \n+\tprivate static final ExclusiveResource GLOBAL_WRITE_LOCK = new ExclusiveResource(GLOBAL_RESOURCE_LOCK_KEY,\n+\t\tExclusiveResource.LockMode.READ_WRITE);\n+\tprivate static final ExclusiveResource GLOBAL_READ_LOCK = new ExclusiveResource(GLOBAL_RESOURCE_LOCK_KEY,\n+\t\tExclusiveResource.LockMode.READ);\n+\n \tprivate final LockManager lockManager = new LockManager();\n \n-\tNodeExecutionAdvisor walk(TestDescriptor testDescriptor) {\n+\tNodeExecutionAdvisor walk(TestDescriptor rootDescriptor) {\n \t\tNodeExecutionAdvisor advisor = new NodeExecutionAdvisor();\n-\t\twalk(testDescriptor, advisor);\n+\t\tPreconditions.condition(getExclusiveResources(rootDescriptor).isEmpty(),\n+\t\t\t\"Engine descriptor must not declare exclusive resources\");\n+\t\trootDescriptor.getChildren().forEach(child -> {\n+\t\t\twalk(child, child, advisor);\n+\t\t});\n \t\treturn advisor;\n \t}\n \n-\tprivate void walk(TestDescriptor testDescriptor, NodeExecutionAdvisor advisor) {\n+\tprivate void walk(TestDescriptor globalLockDescriptor, TestDescriptor testDescriptor,\n+\t\t\tNodeExecutionAdvisor advisor) {\n \t\tSet<ExclusiveResource> exclusiveResources = getExclusiveResources(testDescriptor);\n+\t\tSet<ExclusiveResource> allResources = new HashSet<>(exclusiveResources);", "originalCommit": "8b7c6dfbecc2fa67b3db72e62d835439d99089fc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "54009fff7e36f94c29b5a587f52e774f791b6e10", "chunk": "diff --git a/junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/NodeTreeWalker.java b/junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/NodeTreeWalker.java\nindex 71d4b43774..3cefcf6906 100644\n--- a/junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/NodeTreeWalker.java\n+++ b/junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/NodeTreeWalker.java\n\n@@ -46,12 +46,12 @@ class NodeTreeWalker {\n \tprivate void walk(TestDescriptor globalLockDescriptor, TestDescriptor testDescriptor,\n \t\t\tNodeExecutionAdvisor advisor) {\n \t\tSet<ExclusiveResource> exclusiveResources = getExclusiveResources(testDescriptor);\n-\t\tSet<ExclusiveResource> allResources = new HashSet<>(exclusiveResources);\n \t\tif (exclusiveResources.isEmpty()) {\n \t\t\tadvisor.useResourceLock(testDescriptor, lockManager.getLockForResources(singleton(GLOBAL_READ_LOCK)));\n \t\t\ttestDescriptor.getChildren().forEach(child -> walk(globalLockDescriptor, child, advisor));\n \t\t}\n \t\telse {\n+\t\t\tSet<ExclusiveResource> allResources = new HashSet<>(exclusiveResources);\n \t\t\tadvisor.forceDescendantExecutionMode(testDescriptor, SAME_THREAD);\n \t\t\tdoForChildrenRecursively(testDescriptor, child -> {\n \t\t\t\tallResources.addAll(getExclusiveResources(child));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA0MDQ5MA==", "url": "https://github.com/junit-team/junit5/pull/2382#discussion_r470040490", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tnew ExclusiveResource(GLOBAL_RESOURCE_LOCK_KEY, globalLockMode), new ExclusiveResource(\"bar\", READ_WRITE));\n          \n          \n            \n            \t\t\tnew ExclusiveResource(GLOBAL_RESOURCE_LOCK_KEY, globalLockMode), //\n          \n          \n            \n            \t\t\tnew ExclusiveResource(\"bar\", READ_WRITE));", "author": "marcphilipp", "createdAt": "2020-08-13T15:32:36Z", "path": "platform-tests/src/test/java/org/junit/platform/engine/support/hierarchical/LockManagerTests.java", "diffHunk": "@@ -93,6 +97,27 @@ void returnsWriteLockForExclusiveResourceWithBothLockModes() {\n \t\tassertThat(locks.get(1)).isInstanceOf(WriteLock.class);\n \t}\n \n+\t@ParameterizedTest\n+\t@EnumSource\n+\tvoid globalLockComesFirst(LockMode globalLockMode) {\n+\t\tCollection<ExclusiveResource> resources = asList( //\n+\t\t\tnew ExclusiveResource(\"___foo\", READ), //\n+\t\t\tnew ExclusiveResource(\"foo\", READ_WRITE), //\n+\t\t\tnew ExclusiveResource(GLOBAL_RESOURCE_LOCK_KEY, globalLockMode), new ExclusiveResource(\"bar\", READ_WRITE));", "originalCommit": "8b7c6dfbecc2fa67b3db72e62d835439d99089fc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ee12be4c2f435951c729d0b5d201cd2c24fa6e4e", "chunk": "diff --git a/platform-tests/src/test/java/org/junit/platform/engine/support/hierarchical/LockManagerTests.java b/platform-tests/src/test/java/org/junit/platform/engine/support/hierarchical/LockManagerTests.java\nindex 8a25910bf1..1dfddaff21 100644\n--- a/platform-tests/src/test/java/org/junit/platform/engine/support/hierarchical/LockManagerTests.java\n+++ b/platform-tests/src/test/java/org/junit/platform/engine/support/hierarchical/LockManagerTests.java\n\n@@ -103,7 +103,8 @@ class LockManagerTests {\n \t\tCollection<ExclusiveResource> resources = asList( //\n \t\t\tnew ExclusiveResource(\"___foo\", READ), //\n \t\t\tnew ExclusiveResource(\"foo\", READ_WRITE), //\n-\t\t\tnew ExclusiveResource(GLOBAL_RESOURCE_LOCK_KEY, globalLockMode), new ExclusiveResource(\"bar\", READ_WRITE));\n+\t\t\tnew ExclusiveResource(GLOBAL_RESOURCE_LOCK_KEY, globalLockMode), //\n+\t\t\tnew ExclusiveResource(\"bar\", READ_WRITE));\n \n \t\tList<Lock> locks = getLocks(resources, CompositeLock.class);\n \n"}}, {"oid": "e3f5a4dbb98cccc0bd198d54d3047e91644cd29f", "url": "https://github.com/junit-team/junit5/commit/e3f5a4dbb98cccc0bd198d54d3047e91644cd29f", "message": "Add more tests", "committedDate": "2020-08-13T17:02:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUzNjA2OA==", "url": "https://github.com/junit-team/junit5/pull/2382#discussion_r470536068", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @Target({ ElementType.TYPE, ElementType.METHOD })\n          \n          \n            \n            @Target(ElementType.TYPE)", "author": "marcphilipp", "createdAt": "2020-08-14T10:10:07Z", "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/parallel/Isolated.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.jupiter.api.parallel;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Inherited;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.apiguardian.api.API;\n+\n+@API(status = EXPERIMENTAL, since = \"5.7\")\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target({ ElementType.TYPE, ElementType.METHOD })", "originalCommit": "e3f5a4dbb98cccc0bd198d54d3047e91644cd29f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "662c8e1558f9dff065f2f44b6328d4caca01f8a6", "chunk": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/parallel/Isolated.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/parallel/Isolated.java\nindex 8b0717a39f..cf2ddcc8a6 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/parallel/Isolated.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/parallel/Isolated.java\n\n@@ -22,7 +22,7 @@ import org.apiguardian.api.API;\n \n @API(status = EXPERIMENTAL, since = \"5.7\")\n @Retention(RetentionPolicy.RUNTIME)\n-@Target({ ElementType.TYPE, ElementType.METHOD })\n+@Target(ElementType.TYPE)\n @Inherited\n @ResourceLock(\"__global__\")\n public @interface Isolated {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU0MTk1Ng==", "url": "https://github.com/junit-team/junit5/pull/2382#discussion_r470541956", "bodyText": "\u2753 Feedback from JUnit team call: maybe call the lock __isolated__? Or namespace it (e.g. junit.platform.isolation)?", "author": "marcphilipp", "createdAt": "2020-08-14T10:23:13Z", "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/parallel/Isolated.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.jupiter.api.parallel;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Inherited;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.apiguardian.api.API;\n+\n+@API(status = EXPERIMENTAL, since = \"5.7\")\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target({ ElementType.TYPE, ElementType.METHOD })\n+@Inherited\n+@ResourceLock(\"__global__\")", "originalCommit": "e3f5a4dbb98cccc0bd198d54d3047e91644cd29f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc4ODQyOA==", "url": "https://github.com/junit-team/junit5/pull/2382#discussion_r470788428", "bodyText": "IMHO the name of the lock is fitting, as the lock is used by every TestDescriptor, I would find it more confusing if every such descriptor would acquire a read lock on __isolated__.\nJust as a side note: https://en.wikipedia.org/wiki/Global_interpreter_lock\nMaybe we could change the annotation to @GlobalIsolation if @Isolated to __global__ is too surprising.\nFurthermore, not every engine will call their annotation @Isolated.", "author": "leonard84", "createdAt": "2020-08-14T18:23:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU0MTk1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk1Nzg3Mg==", "url": "https://github.com/junit-team/junit5/pull/2382#discussion_r470957872", "bodyText": "I went with org.junit.platform.engine.support.hierarchical.ExclusiveResource.GLOBAL_KEY now for consistency with the constants in the Resources class.", "author": "marcphilipp", "createdAt": "2020-08-15T09:16:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU0MTk1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "662c8e1558f9dff065f2f44b6328d4caca01f8a6", "chunk": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/parallel/Isolated.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/parallel/Isolated.java\nindex 8b0717a39f..cf2ddcc8a6 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/parallel/Isolated.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/parallel/Isolated.java\n\n@@ -22,7 +22,7 @@ import org.apiguardian.api.API;\n \n @API(status = EXPERIMENTAL, since = \"5.7\")\n @Retention(RetentionPolicy.RUNTIME)\n-@Target({ ElementType.TYPE, ElementType.METHOD })\n+@Target(ElementType.TYPE)\n @Inherited\n @ResourceLock(\"__global__\")\n public @interface Isolated {\n"}}, {"oid": "662c8e1558f9dff065f2f44b6328d4caca01f8a6", "url": "https://github.com/junit-team/junit5/commit/662c8e1558f9dff065f2f44b6328d4caca01f8a6", "message": "Reduce applicability of Isolated annotation", "committedDate": "2020-08-14T18:12:46Z", "type": "commit"}, {"oid": "ee12be4c2f435951c729d0b5d201cd2c24fa6e4e", "url": "https://github.com/junit-team/junit5/commit/ee12be4c2f435951c729d0b5d201cd2c24fa6e4e", "message": "Improve formatting", "committedDate": "2020-08-14T18:13:13Z", "type": "commit"}, {"oid": "aa115a6b4eeeea6f0f1db8822296e198073128be", "url": "https://github.com/junit-team/junit5/commit/aa115a6b4eeeea6f0f1db8822296e198073128be", "message": "Fix tests", "committedDate": "2020-08-14T18:32:03Z", "type": "commit"}, {"oid": "54009fff7e36f94c29b5a587f52e774f791b6e10", "url": "https://github.com/junit-team/junit5/commit/54009fff7e36f94c29b5a587f52e774f791b6e10", "message": "Move allResources back into else branch", "committedDate": "2020-08-14T18:34:42Z", "type": "commit"}, {"oid": "2be0236b5cde5d85ec77d557ecd69ae3a56a7bdd", "url": "https://github.com/junit-team/junit5/commit/2be0236b5cde5d85ec77d557ecd69ae3a56a7bdd", "message": "Simplify comparator", "committedDate": "2020-08-14T18:51:58Z", "type": "commit"}, {"oid": "d6b4e496f36a6fc976d5d9a6875979c11b7181aa", "url": "https://github.com/junit-team/junit5/commit/d6b4e496f36a6fc976d5d9a6875979c11b7181aa", "message": "Document Isolated annotation", "committedDate": "2020-08-15T09:01:56Z", "type": "commit"}, {"oid": "99683df4d29ccec7b185319ef2ee1f8f5a4d9490", "url": "https://github.com/junit-team/junit5/commit/99683df4d29ccec7b185319ef2ee1f8f5a4d9490", "message": "Rename global lock and make constant public", "committedDate": "2020-08-15T09:02:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk2MDg0NA==", "url": "https://github.com/junit-team/junit5/pull/2382#discussion_r470960844", "bodyText": "You could create a constant for the singleton locks, no real need to create new instances, same for the read_write below", "author": "leonard84", "createdAt": "2020-08-15T09:55:50Z", "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/NodeTreeWalker.java", "diffHunk": "@@ -25,16 +29,20 @@\n \n \tprivate final LockManager lockManager = new LockManager();\n \n-\tNodeExecutionAdvisor walk(TestDescriptor testDescriptor) {\n+\tNodeExecutionAdvisor walk(TestDescriptor rootDescriptor) {\n \t\tNodeExecutionAdvisor advisor = new NodeExecutionAdvisor();\n-\t\twalk(testDescriptor, advisor);\n+\t\tPreconditions.condition(getExclusiveResources(rootDescriptor).isEmpty(),\n+\t\t\t\"Engine descriptor must not declare exclusive resources\");\n+\t\trootDescriptor.getChildren().forEach(child -> walk(child, child, advisor));\n \t\treturn advisor;\n \t}\n \n-\tprivate void walk(TestDescriptor testDescriptor, NodeExecutionAdvisor advisor) {\n+\tprivate void walk(TestDescriptor globalLockDescriptor, TestDescriptor testDescriptor,\n+\t\t\tNodeExecutionAdvisor advisor) {\n \t\tSet<ExclusiveResource> exclusiveResources = getExclusiveResources(testDescriptor);\n \t\tif (exclusiveResources.isEmpty()) {\n-\t\t\ttestDescriptor.getChildren().forEach(child -> walk(child, advisor));\n+\t\t\tadvisor.useResourceLock(testDescriptor, lockManager.getLockForResources(singleton(GLOBAL_READ)));", "originalCommit": "99683df4d29ccec7b185319ef2ee1f8f5a4d9490", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk2MzIwNA==", "url": "https://github.com/junit-team/junit5/pull/2382#discussion_r470963204", "bodyText": "Good catch. I added a getLockForResource method that takes a single ExclusiveResource now.", "author": "marcphilipp", "createdAt": "2020-08-15T10:25:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk2MDg0NA=="}], "type": "inlineReview", "revised_code": {"commit": "65029a222d382dd0fabaff9fcbd231ee8b1971bb", "chunk": "diff --git a/junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/NodeTreeWalker.java b/junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/NodeTreeWalker.java\nindex 9ccb764eb7..29d37a4052 100644\n--- a/junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/NodeTreeWalker.java\n+++ b/junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/NodeTreeWalker.java\n\n@@ -41,7 +40,7 @@ class NodeTreeWalker {\n \t\t\tNodeExecutionAdvisor advisor) {\n \t\tSet<ExclusiveResource> exclusiveResources = getExclusiveResources(testDescriptor);\n \t\tif (exclusiveResources.isEmpty()) {\n-\t\t\tadvisor.useResourceLock(testDescriptor, lockManager.getLockForResources(singleton(GLOBAL_READ)));\n+\t\t\tadvisor.useResourceLock(testDescriptor, lockManager.getLockForResource(GLOBAL_READ));\n \t\t\ttestDescriptor.getChildren().forEach(child -> walk(globalLockDescriptor, child, advisor));\n \t\t}\n \t\telse {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk2MjE3Ng==", "url": "https://github.com/junit-team/junit5/pull/2382#discussion_r470962176", "bodyText": "Maybe extend the explanation a bit with the additional effects if any such child requests READ_WRITE for this key, i.e. lock coarsening to top-level descriptor, forced same thread execution", "author": "leonard84", "createdAt": "2020-08-15T10:12:13Z", "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/ExclusiveResource.java", "diffHunk": "@@ -29,6 +29,19 @@\n @API(status = EXPERIMENTAL, since = \"1.3\")\n public class ExclusiveResource {\n \n+\t/**\n+\t * The key for the global resource lock that all direct children of the\n+\t * engine descriptor acquire in {@linkplain LockMode#READ read} mode by\n+\t * default.\n+\t *", "originalCommit": "99683df4d29ccec7b185319ef2ee1f8f5a4d9490", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk2NDE1Mg==", "url": "https://github.com/junit-team/junit5/pull/2382#discussion_r470964152", "bodyText": "Done in f7a7742.", "author": "marcphilipp", "createdAt": "2020-08-15T10:38:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk2MjE3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "f7a7742ba8c4c8dab6956a2265262920e22b9434", "chunk": "diff --git a/junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/ExclusiveResource.java b/junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/ExclusiveResource.java\nindex 60de368f95..72f54c3963 100644\n--- a/junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/ExclusiveResource.java\n+++ b/junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/ExclusiveResource.java\n\n@@ -30,9 +31,15 @@ import org.junit.platform.commons.util.ToStringBuilder;\n public class ExclusiveResource {\n \n \t/**\n-\t * The key for the global resource lock that all direct children of the\n-\t * engine descriptor acquire in {@linkplain LockMode#READ read} mode by\n-\t * default.\n+\t * Key of the global resource lock that all direct children of the engine\n+\t * descriptor acquire in {@linkplain LockMode#READ read mode} by default.\n+\t *\n+\t * <p>If any node {@linkplain Node#getExclusiveResources() requires} an\n+\t * exclusive resource with the same key in\n+\t * {@linkplain LockMode#READ_WRITE read-write mode}, the lock will be\n+\t * coarsened to be acquired by the node's ancestor that is a direct child of\n+\t * the engine descriptor and all of the ancestor's descendants will be\n+\t * forced to run in the {@linkplain ExecutionMode#SAME_THREAD same thread}.\n \t *\n \t * @since 1.7\n \t */\n"}}, {"oid": "65029a222d382dd0fabaff9fcbd231ee8b1971bb", "url": "https://github.com/junit-team/junit5/commit/65029a222d382dd0fabaff9fcbd231ee8b1971bb", "message": "Minimize allocations for single resource lock", "committedDate": "2020-08-15T10:23:12Z", "type": "commit"}, {"oid": "f7a7742ba8c4c8dab6956a2265262920e22b9434", "url": "https://github.com/junit-team/junit5/commit/f7a7742ba8c4c8dab6956a2265262920e22b9434", "message": "Document current semantics of global resource lock", "committedDate": "2020-08-15T10:38:11Z", "type": "commit"}, {"oid": "61fbbaedb54995e6cf4372cd311d1e5c615018f9", "url": "https://github.com/junit-team/junit5/commit/61fbbaedb54995e6cf4372cd311d1e5c615018f9", "message": "Polishing", "committedDate": "2020-08-15T10:40:08Z", "type": "commit"}, {"oid": "dce2d61d391564892173d0b7293a3d6ede38cb47", "url": "https://github.com/junit-team/junit5/commit/dce2d61d391564892173d0b7293a3d6ede38cb47", "message": "Add test for NodeTreeWalker's lock coarsening", "committedDate": "2020-08-15T11:14:45Z", "type": "commit"}, {"oid": "f0c2dabdb0f06adc1072231071a0b84174aabe8d", "url": "https://github.com/junit-team/junit5/commit/f0c2dabdb0f06adc1072231071a0b84174aabe8d", "message": "Only allocate ResourceLocks for global locks once", "committedDate": "2020-08-15T11:29:13Z", "type": "commit"}, {"oid": "9afd579efcde6f148b0e41fb8beaa9a0e4c7abf1", "url": "https://github.com/junit-team/junit5/commit/9afd579efcde6f148b0e41fb8beaa9a0e4c7abf1", "message": "Polishing", "committedDate": "2020-08-15T11:30:37Z", "type": "commit"}, {"oid": "30f1955235456c1cba70ee34b33a676b4f938b62", "url": "https://github.com/junit-team/junit5/commit/30f1955235456c1cba70ee34b33a676b4f938b62", "message": "Use switch", "committedDate": "2020-08-15T11:33:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAxMDI2NQ==", "url": "https://github.com/junit-team/junit5/pull/2382#discussion_r471010265", "bodyText": "I wonder if the constant could be declared in the interface, so it could be referenced from ExclusiveResource", "author": "vlsi", "createdAt": "2020-08-15T16:16:20Z", "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/parallel/Isolated.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.jupiter.api.parallel;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Inherited;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.apiguardian.api.API;\n+\n+/**\n+ * {@code @Isolated} is used to declare that the annotated test class should be\n+ * executed in isolation from other test classes.\n+ *\n+ * <p>When a test class is run in isolation, no other test class is executed\n+ * concurrently. This can be used to enable parallel test execution for the\n+ * entire test suite while running some tests in isolation (e.g. if they modify\n+ * some global resource).\n+ *\n+ * @since 5.7\n+ * @see ExecutionMode\n+ * @see ResourceLock\n+ */\n+@API(status = EXPERIMENTAL, since = \"5.7\")\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target(ElementType.TYPE)\n+@Inherited\n+@ResourceLock(\"org.junit.platform.engine.support.hierarchical.ExclusiveResource.GLOBAL_KEY\")", "originalCommit": "30f1955235456c1cba70ee34b33a676b4f938b62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5NzAyMw==", "url": "https://github.com/junit-team/junit5/pull/2382#discussion_r471097023", "bodyText": "jupiter-api doesn't have a dependency on platform-engine or vice versa.", "author": "marcphilipp", "createdAt": "2020-08-16T10:47:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAxMDI2NQ=="}], "type": "inlineReview", "revised_code": null}]}