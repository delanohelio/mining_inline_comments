{"pr_number": 2292, "pr_title": "Add support for local files to CsvFileSource", "pr_createdAt": "2020-05-09T13:21:06Z", "pr_url": "https://github.com/junit-team/junit5/pull/2292", "timeline": [{"oid": "c0779b88f6d8a6b83e6cd81f7908d78d39223a40", "url": "https://github.com/junit-team/junit5/commit/c0779b88f6d8a6b83e6cd81f7908d78d39223a40", "message": "Add support for local files to CsvFileSource\n\nIn addition to classpath resources, CsvFileSource now supports files\nfrom the local file system.\n\nResolves #2281.", "committedDate": "2020-05-09T13:19:54Z", "type": "commit"}, {"oid": "d1c59c7d323e4b9335e730c15316a61c2d72c3a4", "url": "https://github.com/junit-team/junit5/commit/d1c59c7d323e4b9335e730c15316a61c2d72c3a4", "message": "Fix integration test", "committedDate": "2020-05-09T13:38:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUwNzE2OQ==", "url": "https://github.com/junit-team/junit5/pull/2292#discussion_r422507169", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tPreconditions.notBlank(path, \"Classpath resource [\" + path + \"] must not be null or blank\");\n          \n          \n            \n            \t\t\tPreconditions.notBlank(path, () -> \"Classpath resource [\" + path + \"] must not be null or blank\");", "author": "sbrannen", "createdAt": "2020-05-09T15:16:43Z", "path": "junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvFileArgumentsProvider.java", "diffHunk": "@@ -160,4 +161,50 @@ private void advance() {\n \n \t}\n \n+\tprivate interface Source {\n+\n+\t\tInputStream open(ExtensionContext context);\n+\n+\t}\n+\n+\tinterface InputStreamProvider {\n+\n+\t\tInputStream openClasspathResource(Class<?> baseClass, String path);\n+\n+\t\tInputStream openFile(String path);\n+\n+\t\tdefault Source classpathResource(String path) {\n+\t\t\treturn context -> openClasspathResource(context.getRequiredTestClass(), path);\n+\t\t}\n+\n+\t\tdefault Source file(String path) {\n+\t\t\treturn context -> openFile(path);\n+\t\t}\n+\n+\t}\n+\n+\tprivate static class DefaultInputStreamProvider implements InputStreamProvider {\n+\n+\t\tprivate static final DefaultInputStreamProvider INSTANCE = new DefaultInputStreamProvider();\n+\n+\t\t@Override\n+\t\tpublic InputStream openClasspathResource(Class<?> baseClass, String path) {\n+\t\t\tPreconditions.notBlank(path, \"Classpath resource [\" + path + \"] must not be null or blank\");", "originalCommit": "d1c59c7d323e4b9335e730c15316a61c2d72c3a4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "66e6c36a026092d6aa8560a8afffefe134b8d2d9", "chunk": "diff --git a/junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvFileArgumentsProvider.java b/junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvFileArgumentsProvider.java\nindex 4f4ec8a47b..8a9205aaf1 100644\n--- a/junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvFileArgumentsProvider.java\n+++ b/junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvFileArgumentsProvider.java\n\n@@ -189,14 +189,14 @@ class CsvFileArgumentsProvider implements ArgumentsProvider, AnnotationConsumer<\n \n \t\t@Override\n \t\tpublic InputStream openClasspathResource(Class<?> baseClass, String path) {\n-\t\t\tPreconditions.notBlank(path, \"Classpath resource [\" + path + \"] must not be null or blank\");\n+\t\t\tPreconditions.notBlank(path, () -> \"Classpath resource [\" + path + \"] must not be null or blank\");\n \t\t\tInputStream inputStream = baseClass.getResourceAsStream(path);\n \t\t\treturn Preconditions.notNull(inputStream, () -> \"Classpath resource [\" + path + \"] does not exist\");\n \t\t}\n \n \t\t@Override\n \t\tpublic InputStream openFile(String path) {\n-\t\t\tPreconditions.notBlank(path, \"File [\" + path + \"] must not be null or blank\");\n+\t\t\tPreconditions.notBlank(path, () -> \"File [\" + path + \"] must not be null or blank\");\n \t\t\ttry {\n \t\t\t\treturn Files.newInputStream(Paths.get(path));\n \t\t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUwNzE4Ng==", "url": "https://github.com/junit-team/junit5/pull/2292#discussion_r422507186", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tPreconditions.notBlank(path, \"File [\" + path + \"] must not be null or blank\");\n          \n          \n            \n            \t\t\tPreconditions.notBlank(path, () -> \"File [\" + path + \"] must not be null or blank\");", "author": "sbrannen", "createdAt": "2020-05-09T15:16:54Z", "path": "junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvFileArgumentsProvider.java", "diffHunk": "@@ -160,4 +161,50 @@ private void advance() {\n \n \t}\n \n+\tprivate interface Source {\n+\n+\t\tInputStream open(ExtensionContext context);\n+\n+\t}\n+\n+\tinterface InputStreamProvider {\n+\n+\t\tInputStream openClasspathResource(Class<?> baseClass, String path);\n+\n+\t\tInputStream openFile(String path);\n+\n+\t\tdefault Source classpathResource(String path) {\n+\t\t\treturn context -> openClasspathResource(context.getRequiredTestClass(), path);\n+\t\t}\n+\n+\t\tdefault Source file(String path) {\n+\t\t\treturn context -> openFile(path);\n+\t\t}\n+\n+\t}\n+\n+\tprivate static class DefaultInputStreamProvider implements InputStreamProvider {\n+\n+\t\tprivate static final DefaultInputStreamProvider INSTANCE = new DefaultInputStreamProvider();\n+\n+\t\t@Override\n+\t\tpublic InputStream openClasspathResource(Class<?> baseClass, String path) {\n+\t\t\tPreconditions.notBlank(path, \"Classpath resource [\" + path + \"] must not be null or blank\");\n+\t\t\tInputStream inputStream = baseClass.getResourceAsStream(path);\n+\t\t\treturn Preconditions.notNull(inputStream, () -> \"Classpath resource [\" + path + \"] does not exist\");\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic InputStream openFile(String path) {\n+\t\t\tPreconditions.notBlank(path, \"File [\" + path + \"] must not be null or blank\");", "originalCommit": "d1c59c7d323e4b9335e730c15316a61c2d72c3a4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "66e6c36a026092d6aa8560a8afffefe134b8d2d9", "chunk": "diff --git a/junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvFileArgumentsProvider.java b/junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvFileArgumentsProvider.java\nindex 4f4ec8a47b..8a9205aaf1 100644\n--- a/junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvFileArgumentsProvider.java\n+++ b/junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvFileArgumentsProvider.java\n\n@@ -189,14 +189,14 @@ class CsvFileArgumentsProvider implements ArgumentsProvider, AnnotationConsumer<\n \n \t\t@Override\n \t\tpublic InputStream openClasspathResource(Class<?> baseClass, String path) {\n-\t\t\tPreconditions.notBlank(path, \"Classpath resource [\" + path + \"] must not be null or blank\");\n+\t\t\tPreconditions.notBlank(path, () -> \"Classpath resource [\" + path + \"] must not be null or blank\");\n \t\t\tInputStream inputStream = baseClass.getResourceAsStream(path);\n \t\t\treturn Preconditions.notNull(inputStream, () -> \"Classpath resource [\" + path + \"] does not exist\");\n \t\t}\n \n \t\t@Override\n \t\tpublic InputStream openFile(String path) {\n-\t\t\tPreconditions.notBlank(path, \"File [\" + path + \"] must not be null or blank\");\n+\t\t\tPreconditions.notBlank(path, () -> \"File [\" + path + \"] must not be null or blank\");\n \t\t\ttry {\n \t\t\t\treturn Files.newInputStream(Paths.get(path));\n \t\t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUwNzI1MA==", "url": "https://github.com/junit-team/junit5/pull/2292#discussion_r422507250", "bodyText": "Shouldn't this rather be a JUnitException (or subclass thereof)?", "author": "sbrannen", "createdAt": "2020-05-09T15:17:38Z", "path": "junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvFileArgumentsProvider.java", "diffHunk": "@@ -160,4 +161,50 @@ private void advance() {\n \n \t}\n \n+\tprivate interface Source {\n+\n+\t\tInputStream open(ExtensionContext context);\n+\n+\t}\n+\n+\tinterface InputStreamProvider {\n+\n+\t\tInputStream openClasspathResource(Class<?> baseClass, String path);\n+\n+\t\tInputStream openFile(String path);\n+\n+\t\tdefault Source classpathResource(String path) {\n+\t\t\treturn context -> openClasspathResource(context.getRequiredTestClass(), path);\n+\t\t}\n+\n+\t\tdefault Source file(String path) {\n+\t\t\treturn context -> openFile(path);\n+\t\t}\n+\n+\t}\n+\n+\tprivate static class DefaultInputStreamProvider implements InputStreamProvider {\n+\n+\t\tprivate static final DefaultInputStreamProvider INSTANCE = new DefaultInputStreamProvider();\n+\n+\t\t@Override\n+\t\tpublic InputStream openClasspathResource(Class<?> baseClass, String path) {\n+\t\t\tPreconditions.notBlank(path, \"Classpath resource [\" + path + \"] must not be null or blank\");\n+\t\t\tInputStream inputStream = baseClass.getResourceAsStream(path);\n+\t\t\treturn Preconditions.notNull(inputStream, () -> \"Classpath resource [\" + path + \"] does not exist\");\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic InputStream openFile(String path) {\n+\t\t\tPreconditions.notBlank(path, \"File [\" + path + \"] must not be null or blank\");\n+\t\t\ttry {\n+\t\t\t\treturn Files.newInputStream(Paths.get(path));\n+\t\t\t}\n+\t\t\tcatch (IOException e) {\n+\t\t\t\tthrow new UncheckedIOException(\"File [\" + path + \"] could not be read\", e);", "originalCommit": "d1c59c7d323e4b9335e730c15316a61c2d72c3a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY1MDc2Nw==", "url": "https://github.com/junit-team/junit5/pull/2292#discussion_r422650767", "bodyText": "You're right. I changed it.", "author": "marcphilipp", "createdAt": "2020-05-10T14:11:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUwNzI1MA=="}], "type": "inlineReview", "revised_code": {"commit": "66e6c36a026092d6aa8560a8afffefe134b8d2d9", "chunk": "diff --git a/junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvFileArgumentsProvider.java b/junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvFileArgumentsProvider.java\nindex 4f4ec8a47b..8a9205aaf1 100644\n--- a/junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvFileArgumentsProvider.java\n+++ b/junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvFileArgumentsProvider.java\n\n@@ -189,14 +189,14 @@ class CsvFileArgumentsProvider implements ArgumentsProvider, AnnotationConsumer<\n \n \t\t@Override\n \t\tpublic InputStream openClasspathResource(Class<?> baseClass, String path) {\n-\t\t\tPreconditions.notBlank(path, \"Classpath resource [\" + path + \"] must not be null or blank\");\n+\t\t\tPreconditions.notBlank(path, () -> \"Classpath resource [\" + path + \"] must not be null or blank\");\n \t\t\tInputStream inputStream = baseClass.getResourceAsStream(path);\n \t\t\treturn Preconditions.notNull(inputStream, () -> \"Classpath resource [\" + path + \"] does not exist\");\n \t\t}\n \n \t\t@Override\n \t\tpublic InputStream openFile(String path) {\n-\t\t\tPreconditions.notBlank(path, \"File [\" + path + \"] must not be null or blank\");\n+\t\t\tPreconditions.notBlank(path, () -> \"File [\" + path + \"] must not be null or blank\");\n \t\t\ttry {\n \t\t\t\treturn Files.newInputStream(Paths.get(path));\n \t\t\t}\n"}}, {"oid": "66e6c36a026092d6aa8560a8afffefe134b8d2d9", "url": "https://github.com/junit-team/junit5/commit/66e6c36a026092d6aa8560a8afffefe134b8d2d9", "message": "Make preconditions lazy\n\nCo-authored-by: Sam Brannen <sbrannen@pivotal.io>", "committedDate": "2020-05-10T14:06:04Z", "type": "commit"}, {"oid": "7883bcc2694b7939787664b5bf7a186fcbfc2b05", "url": "https://github.com/junit-team/junit5/commit/7883bcc2694b7939787664b5bf7a186fcbfc2b05", "message": "Use JUnitException", "committedDate": "2020-05-10T14:10:34Z", "type": "commit"}, {"oid": "14b6d61742d8c69e7bcfe824e9d8e2b4ac9125fa", "url": "https://github.com/junit-team/junit5/commit/14b6d61742d8c69e7bcfe824e9d8e2b4ac9125fa", "message": "Merge branch 'master' into issues/2281-csvfilesource-file-support", "committedDate": "2020-05-31T18:42:18Z", "type": "commit"}]}