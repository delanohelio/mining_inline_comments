{"pr_number": 2416, "pr_title": "Introduce junit-platform-suite-engine", "pr_createdAt": "2020-09-21T16:01:22Z", "pr_url": "https://github.com/junit-team/junit5/pull/2416", "timeline": [{"oid": "d2c8982eaca4da848155f1fc3bc7009e6a69c31e", "url": "https://github.com/junit-team/junit5/commit/d2c8982eaca4da848155f1fc3bc7009e6a69c31e", "message": "Allow cycles\n\nCycle detection is limited to the suite engine launching other suite engines.\nWe're using the configuration parameters to smuggle in the parent suite id\nfor each launching request.", "committedDate": "2020-09-23T22:16:15Z", "type": "forcePushed"}, {"oid": "04e7397231b4690bf34c5174b008e240451326e2", "url": "https://github.com/junit-team/junit5/commit/04e7397231b4690bf34c5174b008e240451326e2", "message": "Forbid cycles\n\nCycle detection is limited to the suite engine launching other suite engines.\nWe're using the configuration parameters to smuggle in the parent suite id\nfor each launching request.", "committedDate": "2020-09-23T22:17:39Z", "type": "forcePushed"}, {"oid": "3abe7c4ab232aeaf2b93204fb06b8cd2e8944574", "url": "https://github.com/junit-team/junit5/commit/3abe7c4ab232aeaf2b93204fb06b8cd2e8944574", "message": "Spotless", "committedDate": "2020-09-23T22:41:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc1Njk0Nw==", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r546756947", "bodyText": "Consider explicitly disabling the discovery of launcher-discovery listeners via SPI when introduced by #2457.", "author": "mpkorstanje", "createdAt": "2020-12-21T15:06:22Z", "path": "junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/SuiteTestDescriptor.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.suite.engine;\n+\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import org.junit.platform.commons.util.AnnotationUtils;\n+import org.junit.platform.commons.util.Preconditions;\n+import org.junit.platform.commons.util.StringUtils;\n+import org.junit.platform.engine.TestDescriptor;\n+import org.junit.platform.engine.UniqueId;\n+import org.junit.platform.engine.support.descriptor.AbstractTestDescriptor;\n+import org.junit.platform.engine.support.descriptor.ClassSource;\n+import org.junit.platform.launcher.Launcher;\n+import org.junit.platform.launcher.LauncherDiscoveryRequest;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+import org.junit.platform.launcher.core.LauncherConfig;\n+import org.junit.platform.launcher.core.LauncherFactory;\n+import org.junit.platform.suite.api.SuiteDisplayName;\n+\n+/**\n+ * {@link TestDescriptor} for tests based on the JUnit Platform Launcher API.\n+ *\n+ * <h3>Default Display Names</h3>\n+ *\n+ * <p>The default display name is the simple name of the class.\n+ *\n+ * @since 1.8\n+ * @see SuiteDisplayName\n+ */\n+final class SuiteTestDescriptor extends AbstractTestDescriptor {\n+\n+\tstatic final String SEGMENT_TYPE = \"suite\";\n+\n+\tprivate final SuiteLauncherDiscoveryRequestBuilder requestBuilder;\n+\n+\tprivate TestPlan testPlan;\n+\tprivate Launcher launcher;\n+\n+\tSuiteTestDescriptor(UniqueId id, Class<?> suiteClass, SuiteConfiguration configuration) {\n+\t\tsuper(id, getSuiteDisplayName(suiteClass), ClassSource.from(suiteClass));\n+\t\t// @formatter:off\n+\t\tUniqueId requestingSuiteId = requireNoCycles(configuration).parentSuiteId()\n+\t\t\t\t.map(parentId -> UniqueIdHelper.append(parentId, getUniqueId()))\n+\t\t\t\t.orElseGet(this::getUniqueId);\n+\t\t// @formatter:on\n+\t\tSuiteLauncherDiscoveryRequestBuilder requestBuilder = new SuiteLauncherDiscoveryRequestBuilder();\n+\t\tthis.requestBuilder = requestBuilder.configureRequestingSuiteId(requestingSuiteId);\n+\t}\n+\n+\tprivate SuiteConfiguration requireNoCycles(SuiteConfiguration configuration) {\n+\t\tconfiguration.parentSuiteId().ifPresent(parentSuiteId -> {\n+\t\t\tUniqueId fullSuiteId = UniqueIdHelper.append(parentSuiteId, getUniqueId());\n+\t\t\tSupplier<String> message = () -> String.format(\n+\t\t\t\t\"Configuration error: The suite configuration may not contain a cycle [%s]\", fullSuiteId);\n+\t\t\tPreconditions.condition(!UniqueIdHelper.containCycle(fullSuiteId, SEGMENT_TYPE), message);\n+\t\t});\n+\t\treturn configuration;\n+\t}\n+\n+\tUniqueId uniqueIdInSuite(TestIdentifier testDescriptor) {\n+\t\tPreconditions.notNull(testDescriptor, \"uniqueId most not be null\");\n+\t\tUniqueId uniqueIdInTestPlan = UniqueId.parse(testDescriptor.getUniqueId());\n+\t\tUniqueId uniqueIdInSuite = getUniqueId();\n+\t\treturn UniqueIdHelper.append(uniqueIdInSuite, uniqueIdInTestPlan);\n+\t}\n+\n+\tSuiteTestDescriptor addDiscoveryRequestFrom(Class<?> testClass) {\n+\t\tPreconditions.condition(testPlan == null, \"discovery request can not be modified after discovery\");\n+\t\trequestBuilder.addRequestFrom(testClass);\n+\t\treturn this;\n+\t}\n+\n+\tSuiteTestDescriptor addDiscoveryRequestFrom(UniqueId uniqueId) {\n+\t\tPreconditions.condition(testPlan == null, \"discovery request can not be modified after discovery\");\n+\t\trequestBuilder.addRequestFrom(uniqueId);\n+\t\treturn this;\n+\t}\n+\n+\tvoid discover() {\n+\t\tPreconditions.condition(testPlan == null, \"discovery can only happen once\");\n+\n+\t\tLauncherDiscoveryRequest request = requestBuilder.build();\n+\t\t// @formatter:off\n+\t\tLauncherConfig launcherConfig = LauncherConfig.builder()\n+\t\t\t\t.enableTestExecutionListenerAutoRegistration(false)\n+\t\t\t\t.enablePostDiscoveryFilterAutoRegistration(false)", "originalCommit": "e024c150baec914fc601cd4de0cb8ec2e2439ec6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE1Njk1MA==", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r549156950", "bodyText": "We can keep this enabled. While we try to hide that a suite is discovering and executing tests using the junit platform internally, we don't need to hide that launcher discovery is started multiple times.", "author": "mpkorstanje", "createdAt": "2020-12-27T19:49:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc1Njk0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "fd64804a9f4d4fa74ec026b067ba001cb0076a35", "chunk": "diff --git a/junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/SuiteTestDescriptor.java b/junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/SuiteTestDescriptor.java\nindex 3a774bce5b..672029c636 100644\n--- a/junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/SuiteTestDescriptor.java\n+++ b/junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/SuiteTestDescriptor.java\n\n@@ -10,7 +10,6 @@\n \n package org.junit.platform.suite.engine;\n \n-import java.util.function.Function;\n import java.util.function.Supplier;\n \n import org.junit.platform.commons.util.AnnotationUtils;\n"}}, {"oid": "abf9dc5afd490b73ef67fb3510b8e3fae1900393", "url": "https://github.com/junit-team/junit5/commit/abf9dc5afd490b73ef67fb3510b8e3fae1900393", "message": "Implement junit-platform-suite-engine #2416\n\nImplements a test engine that allows declarative execution of test suites using\nthe `@Suite` annotation.\n\nInternally the Suite Engine uses the JUnit Platform Launcher. The engine works\nby mapping the `TestIdentifier` used by the launcher to `TestDescriptor` used\nby the engine during discovery and execution.\n\n```\npackage org.junit.platform.suite;\n\nimport org.junit.platform.suite.api.SelectPackages;\n\n@suite\n@SelectPackages(\"org.junit.suite.testcases\")\nclass SelectPackageSuite {\n\n}\n```\n\nIs equivalent to:\n\n```\nimport org.junit.platform.engine.discovery.DiscoverySelectors;\nimport org.junit.platform.launcher.Launcher;\nimport org.junit.platform.launcher.LauncherDiscoveryRequest;\nimport org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder;\nimport org.junit.platform.launcher.core.LauncherFactory;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Launcher launcher = LauncherFactory.create();\n        LauncherDiscoveryRequest request = LauncherDiscoveryRequestBuilder.request()\n                .selectors(DiscoverySelectors.selectPackage(\"org.junit.suite.testcases\"))\n                .build();\n        launcher.execute(request);\n    }\n}\n```\n\nThe suite engine converts an annotated class into a discovery request. This\nrequest is executed and the resulting test plan is mapped to a tree of test\ndescriptors. In essence the tree of test descriptors are a view on the test\nplan. So suppose the discovery requests produces this test plan:\n\n```\nJUnit Jupiter\n|- TestA\n||- method1\n||- method2\n|- TestB\n||- method1\n||- method2\n```\n\nThen that test plan is mapped to a tree of test descriptors like so:\n\n```\nSuiteEngine\n|- ExampleSuite\n||-JUnit Jupiter\n|||- TestA\n||||- method1\n||||- method2\n|||- TestB\n||||- method1\n||||- method2\n````\n\nThe unique identifiers are remapped by pre-pending the unique identifier of the suite. So:\n\n```\njunit-jupiter/TestA/method1() ->  junit-suite/ExampleSuite/junit-jupiter/TestA/method1()\n```\n\nIssue: #744", "committedDate": "2020-12-27T22:49:19Z", "type": "forcePushed"}, {"oid": "f71be7220aa55a7ab6b8e46f792f9b44a512f73d", "url": "https://github.com/junit-team/junit5/commit/f71be7220aa55a7ab6b8e46f792f9b44a512f73d", "message": "Implement junit-platform-suite-engine\n\nImplements a test engine that allows declarative execution of test suites using\nthe `@Suite` annotation.\n\nInternally the Suite Engine uses the JUnit Platform Launcher. The engine works\nby mapping the `TestIdentifier` used by the launcher to `TestDescriptor` used\nby the engine during discovery and execution.\n\n```\npackage org.junit.platform.suite;\n\nimport org.junit.platform.suite.api.SelectPackages;\n\n@suite\n@SelectPackages(\"org.junit.suite.testcases\")\nclass SelectPackageSuite {\n\n}\n```\n\nIs equivalent to:\n\n```\nimport org.junit.platform.engine.discovery.DiscoverySelectors;\nimport org.junit.platform.launcher.Launcher;\nimport org.junit.platform.launcher.LauncherDiscoveryRequest;\nimport org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder;\nimport org.junit.platform.launcher.core.LauncherFactory;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Launcher launcher = LauncherFactory.create();\n        LauncherDiscoveryRequest request = LauncherDiscoveryRequestBuilder.request()\n                .selectors(DiscoverySelectors.selectPackage(\"org.junit.suite.testcases\"))\n                .build();\n        launcher.execute(request);\n    }\n}\n```\n\nThe suite engine converts an annotated class into a discovery request. This\nrequest is executed and the resulting test plan is mapped to a tree of test\ndescriptors. In essence the tree of test descriptors are a view on the test\nplan. So suppose the discovery requests produces this test plan:\n\n```\nJUnit Jupiter\n|- TestA\n||- method1\n||- method2\n|- TestB\n||- method1\n||- method2\n```\n\nThen that test plan is mapped to a tree of test descriptors like so:\n\n```\nSuiteEngine\n|- ExampleSuite\n||-JUnit Jupiter\n|||- TestA\n||||- method1\n||||- method2\n|||- TestB\n||||- method1\n||||- method2\n````\n\nThe unique identifiers are remapped by pre-pending the unique identifier of the suite. So:\n\n```\njunit-jupiter/TestA/method1() ->  junit-suite/ExampleSuite/junit-jupiter/TestA/method1()\n```\n\nIssue: #744", "committedDate": "2020-12-27T22:49:55Z", "type": "forcePushed"}, {"oid": "4cabd7b1df53fab932d892f206dbf00e5b4d74f3", "url": "https://github.com/junit-team/junit5/commit/4cabd7b1df53fab932d892f206dbf00e5b4d74f3", "message": "Implement junit-platform-suite-engine\n\nImplements a test engine that allows declarative execution of test suites using\nthe `@Suite` annotation.\n\nInternally the Suite Engine uses the JUnit Platform Launcher. The engine works\nby mapping the `TestIdentifier` used by the launcher to `TestDescriptor` used\nby the engine during discovery and execution.\n\n```\npackage org.junit.platform.suite;\n\nimport org.junit.platform.suite.api.SelectPackages;\n\n@Suite\n@SelectPackages(\"org.junit.suite.testcases\")\nclass SelectPackageSuite {\n\n}\n```\n\nIs equivalent to:\n\n```\nimport org.junit.platform.engine.discovery.DiscoverySelectors;\nimport org.junit.platform.launcher.Launcher;\nimport org.junit.platform.launcher.LauncherDiscoveryRequest;\nimport org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder;\nimport org.junit.platform.launcher.core.LauncherFactory;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Launcher launcher = LauncherFactory.create();\n        LauncherDiscoveryRequest request = LauncherDiscoveryRequestBuilder.request()\n                .selectors(DiscoverySelectors.selectPackage(\"org.junit.suite.testcases\"))\n                .build();\n        launcher.execute(request);\n    }\n}\n```\n\nThe suite engine converts an annotated class into a discovery request. This\nrequest is executed and the resulting test plan is mapped to a tree of test\ndescriptors. In essence the tree of test descriptors are a view on the test\nplan. So suppose the discovery requests produces this test plan:\n\n```\nJUnit Jupiter\n|- TestA\n||- method1\n||- method2\n|- TestB\n||- method1\n||- method2\n```\n\nThen that test plan is mapped to a tree of test descriptors like so:\n\n```\nSuiteEngine\n|- ExampleSuite\n||-JUnit Jupiter\n|||- TestA\n||||- method1\n||||- method2\n|||- TestB\n||||- method1\n||||- method2\n````\n\nThe unique identifiers are remapped by pre-pending the unique identifier of the suite. So:\n\n```\njunit-jupiter/TestA/method1() ->  junit-suite/ExampleSuite/junit-jupiter/TestA/method1()\n```\n\nIssue: #744", "committedDate": "2020-12-27T22:50:18Z", "type": "forcePushed"}, {"oid": "b227adb3283af8b8b40ebab7b979cdd55608f1b2", "url": "https://github.com/junit-team/junit5/commit/b227adb3283af8b8b40ebab7b979cdd55608f1b2", "message": "Implement junit-platform-suite-engine\n\nImplements a test engine that allows declarative execution of test suites using\nthe `@Suite` annotation.\n\nInternally the Suite Engine uses the JUnit Platform Launcher. The engine works\nby mapping the `TestIdentifier` used by the launcher to `TestDescriptor` used\nby the engine during discovery and execution.\n\n```\npackage org.junit.platform.suite;\n\nimport org.junit.platform.suite.api.SelectPackages;\n\n@Suite\n@SelectPackages(\"org.junit.suite.testcases\")\nclass SelectPackageSuite {\n\n}\n```\n\nIs equivalent to:\n\n```\nimport org.junit.platform.engine.discovery.DiscoverySelectors;\nimport org.junit.platform.launcher.Launcher;\nimport org.junit.platform.launcher.LauncherDiscoveryRequest;\nimport org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder;\nimport org.junit.platform.launcher.core.LauncherFactory;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Launcher launcher = LauncherFactory.create();\n        LauncherDiscoveryRequest request = LauncherDiscoveryRequestBuilder.request()\n                .selectors(DiscoverySelectors.selectPackage(\"org.junit.suite.testcases\"))\n                .build();\n        launcher.execute(request);\n    }\n}\n```\n\nThe suite engine converts an annotated class into a discovery request. This\nrequest is executed and the resulting test plan is mapped to a tree of test\ndescriptors. In essence the tree of test descriptors are a view on the test\nplan. So suppose the discovery requests produces this test plan:\n\n```\nJUnit Jupiter\n|- TestA\n||- method1\n||- method2\n|- TestB\n||- method1\n||- method2\n```\n\nThen that test plan is mapped to a tree of test descriptors like so:\n\n```\nSuiteEngine\n|- ExampleSuite\n||-JUnit Jupiter\n|||- TestA\n||||- method1\n||||- method2\n|||- TestB\n||||- method1\n||||- method2\n````\n\nThe unique identifiers are remapped by pre-pending the unique identifier of the suite. So:\n\n```\njunit-jupiter/TestA/method1() ->  junit-suite/ExampleSuite/junit-jupiter/TestA/method1()\n```\n\nIssue: #744", "committedDate": "2021-01-01T18:13:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDg5OTIxOQ==", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r550899219", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\treturn Optional.of(\"org.junit.platform.suite\");\n          \n          \n            \n            \t\treturn Optional.of(\"org.junit.platform\");", "author": "marcphilipp", "createdAt": "2021-01-02T16:50:52Z", "path": "junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/SuiteTestEngine.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.suite.engine;\n+\n+import static org.apiguardian.api.API.Status.INTERNAL;\n+\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.EngineDiscoveryRequest;\n+import org.junit.platform.engine.EngineExecutionListener;\n+import org.junit.platform.engine.ExecutionRequest;\n+import org.junit.platform.engine.TestDescriptor;\n+import org.junit.platform.engine.TestEngine;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.UniqueId;\n+import org.junit.platform.launcher.Launcher;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * The JUnit Platform Suite {@link org.junit.platform.engine.TestEngine TestEngine}.\n+ *\n+ * @since 5.8\n+ */\n+@API(status = INTERNAL, since = \"5.8\")\n+public final class SuiteTestEngine implements TestEngine {\n+\n+\t@Override\n+\tpublic String getId() {\n+\t\treturn SuiteEngineDescriptor.ENGINE_ID;\n+\t}\n+\n+\t/**\n+\t * Returns {@code org.junit.platform.suite} as the group ID.\n+\t */\n+\t@Override\n+\tpublic Optional<String> getGroupId() {\n+\t\treturn Optional.of(\"org.junit.platform.suite\");", "originalCommit": "b227adb3283af8b8b40ebab7b979cdd55608f1b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkxMzk0Ng==", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r550913946", "bodyText": "Fixed in f064ebb", "author": "mpkorstanje", "createdAt": "2021-01-02T19:40:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDg5OTIxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "a32923aecb8aed5e8bd27c86dec7c54bde3fdfe2", "chunk": "diff --git a/junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/SuiteTestEngine.java b/junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/SuiteTestEngine.java\nindex 278cc2c305..fa9d23980e 100644\n--- a/junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/SuiteTestEngine.java\n+++ b/junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/SuiteTestEngine.java\n\n@@ -45,7 +45,7 @@ public final class SuiteTestEngine implements TestEngine {\n \t */\n \t@Override\n \tpublic Optional<String> getGroupId() {\n-\t\treturn Optional.of(\"org.junit.platform.suite\");\n+\t\treturn Optional.of(\"org.junit.platform\");\n \t}\n \n \t/**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDg5OTMzMg==", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r550899332", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t// Nested tests are never filtered out", "author": "marcphilipp", "createdAt": "2021-01-02T16:52:47Z", "path": "junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/ClassSelectorResolver.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.suite.engine;\n+\n+import static org.junit.platform.engine.support.discovery.SelectorResolver.Resolution.unresolved;\n+import static org.junit.platform.suite.engine.UniqueIdHelper.removePrefix;\n+import static org.junit.platform.suite.engine.UniqueIdHelper.uniqueIdOfSegment;\n+\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+\n+import org.junit.platform.commons.util.ReflectionUtils;\n+import org.junit.platform.engine.TestDescriptor;\n+import org.junit.platform.engine.UniqueId;\n+import org.junit.platform.engine.discovery.ClassSelector;\n+import org.junit.platform.engine.discovery.UniqueIdSelector;\n+import org.junit.platform.engine.support.discovery.SelectorResolver;\n+\n+final class ClassSelectorResolver implements SelectorResolver {\n+\n+\tprivate static final IsSuiteClass isSuiteClass = new IsSuiteClass();\n+\n+\tprivate final Predicate<String> classNameFilter;\n+\tprivate final SuiteConfiguration configuration;\n+\n+\tClassSelectorResolver(Predicate<String> classNameFilter, SuiteConfiguration configuration) {\n+\t\tthis.classNameFilter = classNameFilter;\n+\t\tthis.configuration = configuration;\n+\t}\n+\n+\t@Override\n+\tpublic Resolution resolve(ClassSelector selector, Context context) {\n+\t\tClass<?> testClass = selector.getJavaClass();\n+\t\tif (isSuiteClass.test(testClass)) {\n+\t\t\t// Nested tests are never filtered out", "originalCommit": "b227adb3283af8b8b40ebab7b979cdd55608f1b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkxMzg3Mg==", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r550913872", "bodyText": "Fixed in f064ebb", "author": "mpkorstanje", "createdAt": "2021-01-02T19:39:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDg5OTMzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkyMDI2MQ==", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r550920261", "bodyText": "The comment in jupiter-engine should stay, the one in suite-engine (originally copied, I assume) should be removed.", "author": "marcphilipp", "createdAt": "2021-01-02T20:54:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDg5OTMzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDk5NDc5MA==", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r550994790", "bodyText": "Derp.", "author": "mpkorstanje", "createdAt": "2021-01-03T11:44:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDg5OTMzMg=="}], "type": "inlineReview", "revised_code": {"commit": "fd64804a9f4d4fa74ec026b067ba001cb0076a35", "chunk": "diff --git a/junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/ClassSelectorResolver.java b/junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/ClassSelectorResolver.java\nindex 1f4929ebec..8e4ff25db9 100644\n--- a/junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/ClassSelectorResolver.java\n+++ b/junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/ClassSelectorResolver.java\n\n@@ -29,18 +29,17 @@ final class ClassSelectorResolver implements SelectorResolver {\n \tprivate static final IsSuiteClass isSuiteClass = new IsSuiteClass();\n \n \tprivate final Predicate<String> classNameFilter;\n-\tprivate final SuiteConfiguration configuration;\n+\tprivate final SuiteEngineDescriptor suiteEngineDescriptor;\n \n-\tClassSelectorResolver(Predicate<String> classNameFilter, SuiteConfiguration configuration) {\n+\tClassSelectorResolver(Predicate<String> classNameFilter, SuiteEngineDescriptor suiteEngineDescriptor) {\n \t\tthis.classNameFilter = classNameFilter;\n-\t\tthis.configuration = configuration;\n+\t\tthis.suiteEngineDescriptor = suiteEngineDescriptor;\n \t}\n \n \t@Override\n \tpublic Resolution resolve(ClassSelector selector, Context context) {\n \t\tClass<?> testClass = selector.getJavaClass();\n \t\tif (isSuiteClass.test(testClass)) {\n-\t\t\t// Nested tests are never filtered out\n \t\t\tif (classNameFilter.test(testClass.getName())) {\n \t\t\t\t// @formatter:off\n \t\t\t\treturn toResolution(context.addToParent(parent -> newSuiteDescriptor(testClass, parent))\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDg5OTg2OA==", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r550899868", "bodyText": "\u274c getLegacyReportingName() and getTags() should be overridden.", "author": "marcphilipp", "createdAt": "2021-01-02T16:58:26Z", "path": "junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/TestIdentifierAsTestDescriptor.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.suite.engine;\n+\n+import org.junit.platform.engine.ExecutionRequest;\n+import org.junit.platform.engine.TestDescriptor;\n+import org.junit.platform.engine.UniqueId;\n+import org.junit.platform.engine.support.descriptor.AbstractTestDescriptor;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * Represents a {@link TestIdentifier} from a {@link TestPlan} as a\n+ * {@link TestDescriptor} in an {@link ExecutionRequest}.\n+ *\n+ * @see EngineExecutionListenerAdaptor\n+ */\n+final class TestIdentifierAsTestDescriptor extends AbstractTestDescriptor {", "originalCommit": "b227adb3283af8b8b40ebab7b979cdd55608f1b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkxMzg5MA==", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r550913890", "bodyText": "Fixed in f064ebb", "author": "mpkorstanje", "createdAt": "2021-01-02T19:39:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDg5OTg2OA=="}], "type": "inlineReview", "revised_code": {"commit": "a32923aecb8aed5e8bd27c86dec7c54bde3fdfe2", "chunk": "diff --git a/junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/TestIdentifierAsTestDescriptor.java b/junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/TestIdentifierAsTestDescriptor.java\nindex cfc695a4ba..3f43735c6b 100644\n--- a/junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/TestIdentifierAsTestDescriptor.java\n+++ b/junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/TestIdentifierAsTestDescriptor.java\n\n@@ -10,8 +10,11 @@\n \n package org.junit.platform.suite.engine;\n \n+import java.util.Set;\n+\n import org.junit.platform.engine.ExecutionRequest;\n import org.junit.platform.engine.TestDescriptor;\n+import org.junit.platform.engine.TestTag;\n import org.junit.platform.engine.UniqueId;\n import org.junit.platform.engine.support.descriptor.AbstractTestDescriptor;\n import org.junit.platform.launcher.TestIdentifier;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkwMDE3OQ==", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r550900179", "bodyText": "Can we share this with junit-platform-runner?", "author": "marcphilipp", "createdAt": "2021-01-02T17:02:17Z", "path": "junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/SuiteLauncherDiscoveryRequestBuilder.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.suite.engine;\n+\n+import static java.util.stream.Collectors.toList;\n+import static org.junit.platform.commons.support.AnnotationSupport.findAnnotation;\n+import static org.junit.platform.commons.support.AnnotationSupport.findRepeatableAnnotations;\n+import static org.junit.platform.engine.discovery.ClassNameFilter.excludeClassNamePatterns;\n+import static org.junit.platform.engine.discovery.ClassNameFilter.includeClassNamePatterns;\n+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClasspathResource;\n+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectDirectory;\n+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectFile;\n+import static org.junit.platform.engine.discovery.PackageNameFilter.excludePackageNames;\n+import static org.junit.platform.engine.discovery.PackageNameFilter.includePackageNames;\n+import static org.junit.platform.launcher.EngineFilter.excludeEngines;\n+import static org.junit.platform.launcher.EngineFilter.includeEngines;\n+import static org.junit.platform.launcher.TagFilter.excludeTags;\n+import static org.junit.platform.launcher.TagFilter.includeTags;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.junit.platform.engine.UniqueId;\n+import org.junit.platform.engine.discovery.ClassSelector;\n+import org.junit.platform.engine.discovery.ClasspathResourceSelector;\n+import org.junit.platform.engine.discovery.ClasspathRootSelector;\n+import org.junit.platform.engine.discovery.DiscoverySelectors;\n+import org.junit.platform.engine.discovery.FilePosition;\n+import org.junit.platform.engine.discovery.FileSelector;\n+import org.junit.platform.engine.discovery.ModuleSelector;\n+import org.junit.platform.engine.discovery.PackageSelector;\n+import org.junit.platform.engine.discovery.UriSelector;\n+import org.junit.platform.launcher.LauncherDiscoveryRequest;\n+import org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder;\n+import org.junit.platform.suite.api.Configuration;\n+import org.junit.platform.suite.api.ExcludeClassNamePatterns;\n+import org.junit.platform.suite.api.ExcludeEngines;\n+import org.junit.platform.suite.api.ExcludePackages;\n+import org.junit.platform.suite.api.ExcludeTags;\n+import org.junit.platform.suite.api.IncludeClassNamePatterns;\n+import org.junit.platform.suite.api.IncludeEngines;\n+import org.junit.platform.suite.api.IncludePackages;\n+import org.junit.platform.suite.api.IncludeTags;\n+import org.junit.platform.suite.api.SelectClasses;\n+import org.junit.platform.suite.api.SelectClasspathResource;\n+import org.junit.platform.suite.api.SelectClasspathRoots;\n+import org.junit.platform.suite.api.SelectDirectories;\n+import org.junit.platform.suite.api.SelectFile;\n+import org.junit.platform.suite.api.SelectModules;\n+import org.junit.platform.suite.api.SelectPackages;\n+import org.junit.platform.suite.api.SelectUris;\n+\n+final class SuiteLauncherDiscoveryRequestBuilder {", "originalCommit": "b227adb3283af8b8b40ebab7b979cdd55608f1b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkxNzE5MQ==", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r550917191", "bodyText": "While the name might create the impression that it can be used by a user to build requests to discover test suites, it is only a utility that the suite engine uses to create launcher discovery requests to discover the tests in a suite. In essence it maps suite annotations to a launcher discovery request.\nPerhaps a better name is in order.", "author": "mpkorstanje", "createdAt": "2021-01-02T20:17:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkwMDE3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkxODU0NA==", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r550918544", "bodyText": "This is exactly what junit-platform-runner does with the annotations, isn't it?", "author": "marcphilipp", "createdAt": "2021-01-02T20:34:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkwMDE3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTAwNTAxNA==", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r551005014", "bodyText": "Ah I see. It'd be a single class/module. I'll see about extracting that after everything else.", "author": "mpkorstanje", "createdAt": "2021-01-03T13:17:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkwMDE3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjIxNTIzMw==", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r552215233", "bodyText": "On second thought. This would require solving quite a few problems that I'd consider out of scope of this PR. I'm also not convinced the effort to remove a relatively trivial amount of not-quite-duplication is worth the added complexity of adding another module and satisfying two somewhat dissimilar use-cases..\nWhile functionally almost the same the JUnitPlatformRunner is applying some introspection to work out if it is used as a suite or not. Unfortunately this is determined by the implicit use of either @SelectPackages or @SelectClasses rather then an explicit annotation (e.g. @Suite).\n\tprivate LauncherDiscoveryRequest createDiscoveryRequest() {\n\t\tList<DiscoverySelector> selectors = getSelectorsFromAnnotations();\n\n\t\t// Allows to simply add @RunWith(JUnitPlatform.class) to any test case\n\t\tboolean isSuite = !selectors.isEmpty();\n\t\tif (!isSuite) {\n\t\t\tselectors.add(selectClass(this.testClass));\n\t\t}\n\n\t\tLauncherDiscoveryRequestBuilder requestBuilder = request().selectors(selectors);\n\t\taddFiltersFromAnnotations(requestBuilder, isSuite);\n\t\treturn requestBuilder.build();\n\t}\nThis could be worked around by making the SuiteLauncherDiscoveryRequestBuilder build a LauncherDiscoveryRequestBuilder rather then a DiscoveryRequestBuilder. Using that LauncherDiscoveryRequestBuilder to build the LauncherDiscoveryRequest. Inspecting the  LauncherDiscoveryRequest and adding the defaults when absent.\nThis would also require making IncludeClassNameFilter and friends public.\n                LauncherDiscoveryRequestBuilder requestBuilder = suiteLauncherDiscoveryRequestBuilder.build();\n                LauncherDiscoveryRequest build = requestBuilder.build();\n\t\tList<ClassSelector> classSelectors = build.getSelectorsByType(ClassSelector.class);\n\t\tList<PackageSelector> packageSelectors = build.getSelectorsByType(PackageSelector.class);\n\t\tList<IncludeClassNameFilter> includeClassNameFilters = build.getFiltersByType(IncludeClassNameFilter.class);\n\n\t\t// Allows to simply add @RunWith(JUnitPlatform.class) to any test case\n\t\tboolean isSuite = !classSelectors.isEmpty() && !packageSelectors.isEmpty();\n\t\tif (!isSuite) {\n\t\t\trequestBuilder.selectors(selectClass(this.testClass));\n\t\t} else {\n\t\t\tif(includeClassNameFilters.isEmpty()) {\n\t\t\t\trequestBuilder.filters(includeClassNamePatterns(STANDARD_INCLUDE_PATTERN_ARRAY));\n\t\t\t}\n\t\t}\n\t\treturn requestBuilder.build();\nFrom the other side, the SuiteLauncherDiscoveryRequestBuilder currently supports adding a requests from a class by looking at it's annotations and adding a request from a unique id. The latter is needed because suites may be selected by their unique id (the class) or by the unique id of a test in that suite, or both.\nThis could be worked around by making the SuiteLauncherDiscoveryRequestBuilder build a LauncherDiscoveryRequestBuilder rather then a DiscoveryRequestBuilder but would introduce another layer of indirection as the SuiteTestDescriptor would have store unique ids and test classes and build the discovery request after all selectors have been resolved delaying feedback on incorrectly used annotations.\nSo overall we'd remove some duplication but we'd get back two more complicated solutions and a module containing a single class. It seems a bit much.", "author": "mpkorstanje", "createdAt": "2021-01-05T21:39:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkwMDE3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzMxMTg5MA==", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r567311890", "bodyText": "Ooh. I found a solution!", "author": "mpkorstanje", "createdAt": "2021-01-30T20:39:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkwMDE3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzM0MDY5NQ==", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r567340695", "bodyText": "Done. See: SuiteLauncherDiscoveryRequestBuilder.", "author": "mpkorstanje", "createdAt": "2021-01-30T23:54:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkwMDE3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "fd64804a9f4d4fa74ec026b067ba001cb0076a35", "chunk": "diff --git a/junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/SuiteLauncherDiscoveryRequestBuilder.java b/junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/SuiteLauncherDiscoveryRequestBuilder.java\nindex 8d3266ed98..67a9dc158a 100644\n--- a/junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/SuiteLauncherDiscoveryRequestBuilder.java\n+++ b/junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/SuiteLauncherDiscoveryRequestBuilder.java\n\n@@ -65,12 +65,7 @@ import org.junit.platform.suite.api.SelectUris;\n \n final class SuiteLauncherDiscoveryRequestBuilder {\n \n-\tprivate final LauncherDiscoveryRequestBuilder request = new LauncherDiscoveryRequestBuilder();\n-\n-\tSuiteLauncherDiscoveryRequestBuilder configureRequestingSuiteId(UniqueId uniqueId) {\n-\t\trequest.configurationParameter(SuiteConfiguration.PARENT_SUITE_ID, uniqueId.toString());\n-\t\treturn this;\n-\t}\n+\tprivate final LauncherDiscoveryRequestBuilder request = LauncherDiscoveryRequestBuilder.request();\n \n \tSuiteLauncherDiscoveryRequestBuilder addRequestFrom(UniqueId uniqueId) {\n \t\trequest.selectors(DiscoverySelectors.selectUniqueId(uniqueId));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkwMDY0Ng==", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r550900646", "bodyText": "We should use the java-test-fixtures Gradle plugin and move the two sample packages to the testFixtures source set like we do in junit-vintage-engine.", "author": "marcphilipp", "createdAt": "2021-01-02T17:07:07Z", "path": "junit-platform-suite-engine/src/test/java/org/junit/platform/suite/engine/testsuites/SuiteSuite.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.suite.engine.testsuites;\n+\n+import org.junit.platform.suite.api.SelectClasses;\n+import org.junit.platform.suite.api.Suite;\n+\n+@Suite\n+@SelectClasses(SelectClassesSuite.class)\n+public class SuiteSuite {\n+\n+}", "originalCommit": "b227adb3283af8b8b40ebab7b979cdd55608f1b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkxOTc4Mw==", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r550919783", "bodyText": "Ah. This is pretty nice.\nResolved with 08feabb.", "author": "mpkorstanje", "createdAt": "2021-01-02T20:48:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkwMDY0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "d5d816d7468c1a1e06e79d95fef4ca0af24f144c", "chunk": "diff --git a/junit-platform-suite-engine/src/test/java/org/junit/platform/suite/engine/testsuites/SuiteSuite.java b/junit-platform-suite-engine/src/testFixtures/java/org/junit/platform/suite/engine/testsuites/SuiteSuite.java\nsimilarity index 89%\nrename from junit-platform-suite-engine/src/test/java/org/junit/platform/suite/engine/testsuites/SuiteSuite.java\nrename to junit-platform-suite-engine/src/testFixtures/java/org/junit/platform/suite/engine/testsuites/SuiteSuite.java\nindex 6da56efeeb..81a2a52af3 100644\n--- a/junit-platform-suite-engine/src/test/java/org/junit/platform/suite/engine/testsuites/SuiteSuite.java\n+++ b/junit-platform-suite-engine/src/testFixtures/java/org/junit/platform/suite/engine/testsuites/SuiteSuite.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2015-2020 the original author or authors.\n+ * Copyright 2015-2021 the original author or authors.\n  *\n  * All rights reserved. This program and the accompanying materials are\n  * made available under the terms of the Eclipse Public License v2.0 which\n"}}, {"oid": "a32923aecb8aed5e8bd27c86dec7c54bde3fdfe2", "url": "https://github.com/junit-team/junit5/commit/a32923aecb8aed5e8bd27c86dec7c54bde3fdfe2", "message": "Use test-fixtures plugin for test fixtures", "committedDate": "2021-01-03T11:43:40Z", "type": "forcePushed"}, {"oid": "fd64804a9f4d4fa74ec026b067ba001cb0076a35", "url": "https://github.com/junit-team/junit5/commit/fd64804a9f4d4fa74ec026b067ba001cb0076a35", "message": "WIP: Pass parentId along with discovery selection", "committedDate": "2021-01-03T16:40:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTAyODg5Nw==", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r551028897", "bodyText": "@marcphilipp wdyt? Would it break the expectation of the LauncherDiscoveryListener to provide the executionId rather then the uniqueEngineId?", "author": "mpkorstanje", "createdAt": "2021-01-03T16:51:59Z", "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/EngineDiscoveryOrchestrator.java", "diffHunk": "@@ -115,13 +119,14 @@ private LauncherDiscoveryResult discoverSafely(LauncherDiscoveryRequest request,\n \t}\n \n \tprivate TestDescriptor discoverEngineRoot(TestEngine testEngine, LauncherDiscoveryRequest request,\n-\t\t\tLauncherDiscoveryListener listener) {\n+\t\t\tLauncherDiscoveryListener listener, UniqueId parentId) {\n \t\tUniqueId uniqueEngineId = UniqueId.forEngine(testEngine.getId());\n+\t\tUniqueId executionId = parentId == null ? uniqueEngineId : parentId.append(uniqueEngineId.getLastSegment()); // TODO: Do better\n \t\ttry {\n-\t\t\tlistener.engineDiscoveryStarted(uniqueEngineId);\n-\t\t\tTestDescriptor engineRoot = testEngine.discover(request, uniqueEngineId);\n+\t\t\tlistener.engineDiscoveryStarted(uniqueEngineId); // TODO: uniqueEngineId ok?\n+\t\t\tTestDescriptor engineRoot = testEngine.discover(request, executionId);", "originalCommit": "fd64804a9f4d4fa74ec026b067ba001cb0076a35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTAzNDI4NA==", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r551034284", "bodyText": "Good question. I think we should pass in executionId because otherwise it would be inconsistent with what the engine passes to selectorProcessed and it's documented to be \"the unique ID of the engine descriptor\". I took a quick look and the internal implementation looked like they don't make any such assumptions.", "author": "marcphilipp", "createdAt": "2021-01-03T17:43:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTAyODg5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "84c494efb7c04db1ba55c2acf4d25e6aa7ab0281", "chunk": "diff --git a/junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/EngineDiscoveryOrchestrator.java b/junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/EngineDiscoveryOrchestrator.java\nindex 9873a904dd..bf60e27d9d 100644\n--- a/junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/EngineDiscoveryOrchestrator.java\n+++ b/junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/EngineDiscoveryOrchestrator.java\n\n@@ -118,15 +119,20 @@ public class EngineDiscoveryOrchestrator {\n \t\treturn new LauncherDiscoveryResult(testEngineDescriptors, request.getConfigurationParameters());\n \t}\n \n-\tprivate TestDescriptor discoverEngineRoot(TestEngine testEngine, LauncherDiscoveryRequest request,\n-\t\t\tLauncherDiscoveryListener listener, UniqueId parentId) {\n-\t\tUniqueId uniqueEngineId = UniqueId.forEngine(testEngine.getId());\n-\t\tUniqueId executionId = parentId == null ? uniqueEngineId : parentId.append(uniqueEngineId.getLastSegment()); // TODO: Do better\n+\tprivate UniqueId createUniqueEngineId(UniqueId parentEngineId, TestEngine testEngine) {\n+\t\tif (parentEngineId == null) {\n+\t\t\treturn UniqueId.forEngine(testEngine.getId());\n+\t\t}\n+\t\treturn parentEngineId.appendEngine(testEngine.getId());\n+\t}\n+\n+\tprivate TestDescriptor discoverEngineRoot(TestEngine testEngine, UniqueId uniqueEngineId,\n+\t\t\tLauncherDiscoveryListener listener, LauncherDiscoveryRequest request) {\n \t\ttry {\n-\t\t\tlistener.engineDiscoveryStarted(uniqueEngineId); // TODO: uniqueEngineId ok?\n-\t\t\tTestDescriptor engineRoot = testEngine.discover(request, executionId);\n+\t\t\tlistener.engineDiscoveryStarted(uniqueEngineId);\n+\t\t\tTestDescriptor engineRoot = testEngine.discover(request, uniqueEngineId);\n \t\t\tdiscoveryResultValidator.validate(testEngine, engineRoot);\n-\t\t\tlistener.engineDiscoveryFinished(uniqueEngineId, EngineDiscoveryResult.successful()); // TODO: uniqueEngineId ok?\n+\t\t\tlistener.engineDiscoveryFinished(uniqueEngineId, EngineDiscoveryResult.successful());\n \t\t\treturn engineRoot;\n \t\t}\n \t\tcatch (Throwable throwable) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTAyODk5MA==", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r551028990", "bodyText": "I'm surpriced that this isn't already use by test kit.", "author": "mpkorstanje", "createdAt": "2021-01-03T16:53:12Z", "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/EngineIdValidator.java", "diffHunk": "@@ -21,14 +24,15 @@\n /**\n  * @since 1.7\n  */\n-class EngineIdValidator {\n+@API(status = INTERNAL, since = \"1.7\", consumers = \"suite\") //TODO: Why isn't this used in testkit?", "originalCommit": "fd64804a9f4d4fa74ec026b067ba001cb0076a35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTAzNDQ4Nw==", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r551034487", "bodyText": "Good catch! I think this should be done in the EngineDiscoveryOrchestrator constructor instead so we can avoid making it public.", "author": "marcphilipp", "createdAt": "2021-01-03T17:45:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTAyODk5MA=="}], "type": "inlineReview", "revised_code": {"commit": "84c494efb7c04db1ba55c2acf4d25e6aa7ab0281", "chunk": "diff --git a/junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/EngineIdValidator.java b/junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/EngineIdValidator.java\nindex 810895f9c3..a46d07d67d 100644\n--- a/junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/EngineIdValidator.java\n+++ b/junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/EngineIdValidator.java\n\n@@ -24,15 +21,14 @@ import org.junit.platform.engine.TestEngine;\n /**\n  * @since 1.7\n  */\n-@API(status = INTERNAL, since = \"1.7\", consumers = \"suite\") //TODO: Why isn't this used in testkit?\n-public class EngineIdValidator {\n+class EngineIdValidator {\n \n \tprivate static final Logger logger = LoggerFactory.getLogger(EngineIdValidator.class);\n \n \tprivate EngineIdValidator() {\n \t}\n \n-\tpublic static Iterable<TestEngine> validate(Iterable<TestEngine> testEngines) {\n+\tstatic Iterable<TestEngine> validate(Iterable<TestEngine> testEngines) {\n \t\tSet<String> ids = new HashSet<>();\n \t\tfor (TestEngine testEngine : testEngines) {\n \t\t\t// check usage of reserved id prefix\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTAyOTc3Mw==", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r551029773", "bodyText": "Could have opened up getEngineTestDescriptors but given  getEngineTestDescriptor needs a matching getTestEngines for the API to be usable I opened up this one instead.", "author": "mpkorstanje", "createdAt": "2021-01-03T16:59:39Z", "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/LauncherDiscoveryResult.java", "diffHunk": "@@ -48,7 +48,7 @@ ConfigurationParameters getConfigurationParameters() {\n \t\treturn configurationParameters;\n \t}\n \n-\tCollection<TestEngine> getTestEngines() {\n+\tpublic Collection<TestEngine> getTestEngines() {", "originalCommit": "fd64804a9f4d4fa74ec026b067ba001cb0076a35", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "153b3488d7b4b5ea253c8378a17764f392db9b0f", "chunk": "diff --git a/junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/LauncherDiscoveryResult.java b/junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/LauncherDiscoveryResult.java\nindex 2138e75e26..fb1bd04de2 100644\n--- a/junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/LauncherDiscoveryResult.java\n+++ b/junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/LauncherDiscoveryResult.java\n\n@@ -48,7 +48,7 @@ public class LauncherDiscoveryResult {\n \t\treturn configurationParameters;\n \t}\n \n-\tpublic Collection<TestEngine> getTestEngines() {\n+\tCollection<TestEngine> getTestEngines() {\n \t\treturn this.testEngineDescriptors.keySet();\n \t}\n \n"}}, {"oid": "84c494efb7c04db1ba55c2acf4d25e6aa7ab0281", "url": "https://github.com/junit-team/junit5/commit/84c494efb7c04db1ba55c2acf4d25e6aa7ab0281", "message": "Enable jacoco for suite module", "committedDate": "2021-01-05T19:58:32Z", "type": "forcePushed"}, {"oid": "9dbd712e37876be9f731062aad120c958b203fda", "url": "https://github.com/junit-team/junit5/commit/9dbd712e37876be9f731062aad120c958b203fda", "message": "Enable jacoco for suite module", "committedDate": "2021-01-05T20:10:42Z", "type": "forcePushed"}, {"oid": "7156feb81209f512f753fa46fc6992ad6c5c0d98", "url": "https://github.com/junit-team/junit5/commit/7156feb81209f512f753fa46fc6992ad6c5c0d98", "message": "Trim tags and manually pretty format discovery request builder", "committedDate": "2021-01-05T21:06:20Z", "type": "forcePushed"}, {"oid": "11165e195e6759c536c69ffe367a7f4cedec61bc", "url": "https://github.com/junit-team/junit5/commit/11165e195e6759c536c69ffe367a7f4cedec61bc", "message": "Trim tags and manually pretty format discovery request builder", "committedDate": "2021-01-05T21:22:51Z", "type": "forcePushed"}, {"oid": "52cbe001a5734490a7ee8830cd1e42b6a807d590", "url": "https://github.com/junit-team/junit5/commit/52cbe001a5734490a7ee8830cd1e42b6a807d590", "message": "Trim tags and manually pretty format discovery request builder", "committedDate": "2021-01-05T21:46:47Z", "type": "forcePushed"}, {"oid": "bfe2cc28eb741a139d0c5776f84c64c4b8e336c0", "url": "https://github.com/junit-team/junit5/commit/bfe2cc28eb741a139d0c5776f84c64c4b8e336c0", "message": "Trim patterns and manually pretty format discovery request builder", "committedDate": "2021-01-05T21:49:06Z", "type": "forcePushed"}, {"oid": "09aadb6770129c95530092648bfc88c55335657d", "url": "https://github.com/junit-team/junit5/commit/09aadb6770129c95530092648bfc88c55335657d", "message": "Trim patterns and manually pretty format discovery request builder", "committedDate": "2021-01-09T09:33:03Z", "type": "forcePushed"}, {"oid": "58aa333dcf541d6d62ee5ac156835fabc59f1606", "url": "https://github.com/junit-team/junit5/commit/58aa333dcf541d6d62ee5ac156835fabc59f1606", "message": "WIP: Doc stuff", "committedDate": "2021-01-10T00:10:35Z", "type": "forcePushed"}, {"oid": "bd8498ce4a98fe58c7a32a68fc894d7a31dbe0c3", "url": "https://github.com/junit-team/junit5/commit/bd8498ce4a98fe58c7a32a68fc894d7a31dbe0c3", "message": "Docs", "committedDate": "2021-01-10T02:48:49Z", "type": "forcePushed"}, {"oid": "0d048074b8f113cf9edf90a5ace7ec2fd32eb577", "url": "https://github.com/junit-team/junit5/commit/0d048074b8f113cf9edf90a5ace7ec2fd32eb577", "message": "Docs", "committedDate": "2021-01-10T02:50:56Z", "type": "forcePushed"}, {"oid": "94b232de90bbf22a3081036440ee6319313085a2", "url": "https://github.com/junit-team/junit5/commit/94b232de90bbf22a3081036440ee6319313085a2", "message": "Document the junit platform suite engine", "committedDate": "2021-01-10T19:29:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYxMjk5OA==", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r554612998", "bodyText": "Both the platform launcher and platform runner only include classes with specific names when no other pattern is provided. In doing so they ignore ExampleTestCase.failingTest which would fail the build. So we have to explicitly configure the include patterns.\nI don't think it is a good idea to repeat this feature in the suite engine. It is a \"hidden\" requirement in addition to the use of the annotations. However I'm also unaware of the rationale for including it in the first place.\nWhat was is reason to only include classes with certain names by default?", "author": "mpkorstanje", "createdAt": "2021-01-10T19:40:13Z", "path": "documentation/src/test/java/example/SuiteDemo.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package example;\n+\n+//tag::user_guide[]\n+import org.junit.platform.suite.api.SelectPackages;\n+import org.junit.platform.suite.api.Suite;\n+import org.junit.platform.suite.api.SuiteDisplayName;\n+\n+@Suite\n+@SuiteDisplayName(\"JUnit Platform Suite Demo\")\n+@SelectPackages(\"example\")\n+//end::user_guide[]\n+@org.junit.platform.suite.api.IncludeClassNamePatterns", "originalCommit": "94b232de90bbf22a3081036440ee6319313085a2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "153b3488d7b4b5ea253c8378a17764f392db9b0f", "chunk": "diff --git a/documentation/src/test/java/example/SuiteDemo.java b/documentation/src/test/java/example/SuiteDemo.java\ndeleted file mode 100644\nindex 7215e269f3..0000000000\n--- a/documentation/src/test/java/example/SuiteDemo.java\n+++ /dev/null\n\n@@ -1,27 +0,0 @@\n-/*\n- * Copyright 2015-2020 the original author or authors.\n- *\n- * All rights reserved. This program and the accompanying materials are\n- * made available under the terms of the Eclipse Public License v2.0 which\n- * accompanies this distribution and is available at\n- *\n- * https://www.eclipse.org/legal/epl-v20.html\n- */\n-\n-package example;\n-\n-//tag::user_guide[]\n-import org.junit.platform.suite.api.SelectPackages;\n-import org.junit.platform.suite.api.Suite;\n-import org.junit.platform.suite.api.SuiteDisplayName;\n-\n-@Suite\n-@SuiteDisplayName(\"JUnit Platform Suite Demo\")\n-@SelectPackages(\"example\")\n-//end::user_guide[]\n-@org.junit.platform.suite.api.IncludeClassNamePatterns\n-@org.junit.platform.suite.api.ExcludeTags(\"exclude\")\n-//tag::user_guide[]\n-public class SuiteDemo {\n-}\n-//end::user_guide[]\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYxMzM1MQ==", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r554613351", "bodyText": "The usage of consumers is rather inconsistent. What is the preferred usage?\n@API(status = EXPERIMENTAL, since = \"1.3\", consumers = \"org.junit.platform.engine.support.hierarchical\")\n@API(status = INTERNAL, since = \"5.8\", consumers = \"org.junit.vintage.**\")\n@API(status = INTERNAL, since = \"1.7\", consumers = { \"testkit\", \"suite\" })", "author": "mpkorstanje", "createdAt": "2021-01-10T19:43:17Z", "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/EngineDiscoveryOrchestrator.java", "diffHunk": "@@ -45,7 +48,7 @@\n  *\n  * @since 1.7\n  */\n-@API(status = INTERNAL, since = \"1.7\", consumers = \"testkit\")\n+@API(status = INTERNAL, since = \"1.7\", consumers = { \"testkit\", \"suite\" })", "originalCommit": "697db7c78603a77189d9408a5af0d23deb9fc079", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a36f3ac3c1f14b37781635c49ffad0f5e451e05b", "chunk": "diff --git a/junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/EngineDiscoveryOrchestrator.java b/junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/EngineDiscoveryOrchestrator.java\nindex c9a095206f..c595fa1909 100644\n--- a/junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/EngineDiscoveryOrchestrator.java\n+++ b/junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/EngineDiscoveryOrchestrator.java\n\n@@ -41,7 +40,6 @@ import org.junit.platform.launcher.EngineDiscoveryResult;\n import org.junit.platform.launcher.LauncherDiscoveryListener;\n import org.junit.platform.launcher.LauncherDiscoveryRequest;\n import org.junit.platform.launcher.PostDiscoveryFilter;\n-import org.junit.platform.launcher.listeners.discovery.LauncherDiscoveryListeners;\n \n /**\n  * Orchestrates test discovery using the configured test engines.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYxMzgwMw==", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r554613803", "bodyText": "Pruning the test engines is necessary because their test descriptors no longer root containers. This results in them being pruned when added as children to the parent engine. However because the LauncherDiscoveryResult is executed as a whole events for these empty test engine are still emitted resulting exceptions when trying to look up these nodes in in the test plan.\nI'm not sure where and if I should convey this information.\nPruning here also avoids the need to open up the LauncherDiscoveryResult more.", "author": "mpkorstanje", "createdAt": "2021-01-10T19:46:57Z", "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/EngineDiscoveryOrchestrator.java", "diffHunk": "@@ -72,18 +75,40 @@ public EngineDiscoveryOrchestrator(Iterable<TestEngine> testEngines,\n \t * {@linkplain TestDescriptor#prune() prunes} the resulting test tree.\n \t */\n \tpublic LauncherDiscoveryResult discover(LauncherDiscoveryRequest request, Phase phase) {\n+\t\tMap<TestEngine, TestDescriptor> result = discover(request, phase, UniqueId::forEngine);\n+\t\treturn new LauncherDiscoveryResult(result, request.getConfigurationParameters());\n+\t}\n+\n+\t/**\n+\t * Discovers tests for the supplied request in the supplied phase using the\n+\t * configured test engines.\n+\t *\n+\t * <p>Applies {@linkplain org.junit.platform.launcher.EngineFilter engine\n+\t * filters} and {@linkplain PostDiscoveryFilter post-discovery filters} and\n+\t * {@linkplain TestDescriptor#prune() prunes} the resulting test tree.\n+\t *\n+\t * Additionally test engines without tests are pruned from from the discovery\n+\t * result and the engines unique id will be prefixed with {@code parentId}.\n+\t */\n+\tpublic LauncherDiscoveryResult discover(LauncherDiscoveryRequest request, Phase phase, UniqueId parentId) {\n+\t\tMap<TestEngine, TestDescriptor> result = discover(request, phase, parentId::appendEngine);\n+\t\treturn new LauncherDiscoveryResult(pruneEngines(result), request.getConfigurationParameters());", "originalCommit": "697db7c78603a77189d9408a5af0d23deb9fc079", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a36f3ac3c1f14b37781635c49ffad0f5e451e05b", "chunk": "diff --git a/junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/EngineDiscoveryOrchestrator.java b/junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/EngineDiscoveryOrchestrator.java\nindex c9a095206f..c595fa1909 100644\n--- a/junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/EngineDiscoveryOrchestrator.java\n+++ b/junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/EngineDiscoveryOrchestrator.java\n\n@@ -81,14 +83,17 @@ public class EngineDiscoveryOrchestrator {\n \n \t/**\n \t * Discovers tests for the supplied request in the supplied phase using the\n-\t * configured test engines.\n+\t * configured test engines to be used by the suite engine.\n \t *\n \t * <p>Applies {@linkplain org.junit.platform.launcher.EngineFilter engine\n \t * filters} and {@linkplain PostDiscoveryFilter post-discovery filters} and\n \t * {@linkplain TestDescriptor#prune() prunes} the resulting test tree.\n \t *\n-\t * Additionally test engines without tests are pruned from from the discovery\n-\t * result and the engines unique id will be prefixed with {@code parentId}.\n+\t * Note: The test descriptors in the discovery result can safely be used as\n+\t * non-root descriptors. Engine-test descriptor entries are pruned from\n+\t * the returned result. As such execution by\n+\t * {@link EngineExecutionOrchestrator#execute(LauncherDiscoveryResult, EngineExecutionListener)}\n+\t * will not emit start or emit events for engines without tests.\n \t */\n \tpublic LauncherDiscoveryResult discover(LauncherDiscoveryRequest request, Phase phase, UniqueId parentId) {\n \t\tMap<TestEngine, TestDescriptor> result = discover(request, phase, parentId::appendEngine);\n"}}, {"oid": "bc71101989a5d66e42dfbe12ffcf684d2111e8b8", "url": "https://github.com/junit-team/junit5/commit/bc71101989a5d66e42dfbe12ffcf684d2111e8b8", "message": "Document the junit platform suite engine", "committedDate": "2021-01-10T19:59:21Z", "type": "forcePushed"}, {"oid": "78fca289c4312a67b41de3140dfbb4e2c8cae499", "url": "https://github.com/junit-team/junit5/commit/78fca289c4312a67b41de3140dfbb4e2c8cae499", "message": "Document the junit platform suite engine", "committedDate": "2021-01-10T20:00:14Z", "type": "forcePushed"}, {"oid": "a36f3ac3c1f14b37781635c49ffad0f5e451e05b", "url": "https://github.com/junit-team/junit5/commit/a36f3ac3c1f14b37781635c49ffad0f5e451e05b", "message": "Explain that test descriptors in the discovery result can be used as non-root", "committedDate": "2021-01-16T01:48:59Z", "type": "forcePushed"}, {"oid": "153b3488d7b4b5ea253c8378a17764f392db9b0f", "url": "https://github.com/junit-team/junit5/commit/153b3488d7b4b5ea253c8378a17764f392db9b0f", "message": "Implement junit-platform-suite-engine\n\nImplements a test engine that allows declarative execution of test suites using\nthe `@Suite` annotation.\n\nInternally the Suite Engine uses the JUnit Platform Launcher. The engine works\nby mapping the `TestIdentifier` used by the launcher to `TestDescriptor` used\nby the engine during discovery and execution.\n\n```\npackage org.junit.platform.suite;\n\nimport org.junit.platform.suite.api.SelectPackages;\n\n@Suite\n@SelectPackages(\"org.junit.suite.testcases\")\nclass SelectPackageSuite {\n\n}\n```\n\nIs equivalent to:\n\n```\nimport org.junit.platform.engine.discovery.DiscoverySelectors;\nimport org.junit.platform.launcher.Launcher;\nimport org.junit.platform.launcher.LauncherDiscoveryRequest;\nimport org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder;\nimport org.junit.platform.launcher.core.LauncherFactory;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Launcher launcher = LauncherFactory.create();\n        LauncherDiscoveryRequest request = LauncherDiscoveryRequestBuilder.request()\n                .selectors(DiscoverySelectors.selectPackage(\"org.junit.suite.testcases\"))\n                .build();\n        launcher.execute(request);\n    }\n}\n```\n\nThe suite engine converts an annotated class into a discovery request. This\nrequest is executed and the resulting test plan is mapped to a tree of test\ndescriptors. In essence the tree of test descriptors are a view on the test\nplan. So suppose the discovery requests produces this test plan:\n\n```\nJUnit Jupiter\n|- TestA\n||- method1\n||- method2\n|- TestB\n||- method1\n||- method2\n```\n\nThen that test plan is mapped to a tree of test descriptors like so:\n\n```\nSuiteEngine\n|- ExampleSuite\n||-JUnit Jupiter\n|||- TestA\n||||- method1\n||||- method2\n|||- TestB\n||||- method1\n||||- method2\n````\n\nThe unique identifiers are remapped by pre-pending the unique identifier of the suite. So:\n\n```\njunit-jupiter/TestA/method1() ->  junit-suite/ExampleSuite/junit-jupiter/TestA/method1()\n```\n\nIssue: #744", "committedDate": "2021-01-17T15:51:31Z", "type": "commit"}, {"oid": "dd009acaf37a518d208a4d69be02270f8dc33b25", "url": "https://github.com/junit-team/junit5/commit/dd009acaf37a518d208a4d69be02270f8dc33b25", "message": "Apply review comments", "committedDate": "2021-01-17T15:51:31Z", "type": "commit"}, {"oid": "c7ad80f11883bfa21e24e5d48a60f2e9f46f4a6a", "url": "https://github.com/junit-team/junit5/commit/c7ad80f11883bfa21e24e5d48a60f2e9f46f4a6a", "message": "Pass parentId along with discovery selection", "committedDate": "2021-01-17T15:51:31Z", "type": "commit"}, {"oid": "a82d55038486d9ea210c9c7b0a23a7fa33f7ac09", "url": "https://github.com/junit-team/junit5/commit/a82d55038486d9ea210c9c7b0a23a7fa33f7ac09", "message": "Document the junit platform suite engine", "committedDate": "2021-01-17T15:51:31Z", "type": "commit"}, {"oid": "e21db43323dd1bc3318869ff154de6fb0dbaaf33", "url": "https://github.com/junit-team/junit5/commit/e21db43323dd1bc3318869ff154de6fb0dbaaf33", "message": "Use more distance for cross package connections", "committedDate": "2021-01-17T15:51:31Z", "type": "commit"}, {"oid": "30379d76a8aa6057ce4bf08c69c65d2d2672994f", "url": "https://github.com/junit-team/junit5/commit/30379d76a8aa6057ce4bf08c69c65d2d2672994f", "message": "Explain that test descriptors in the discovery result can be used as non-root", "committedDate": "2021-01-17T15:51:31Z", "type": "commit"}, {"oid": "9a15714a08f71ea3b22427c60ff3611a01e60019", "url": "https://github.com/junit-team/junit5/commit/9a15714a08f71ea3b22427c60ff3611a01e60019", "message": "Reference correct group id in java doc", "committedDate": "2021-01-17T15:51:31Z", "type": "commit"}, {"oid": "9a15714a08f71ea3b22427c60ff3611a01e60019", "url": "https://github.com/junit-team/junit5/commit/9a15714a08f71ea3b22427c60ff3611a01e60019", "message": "Reference correct group id in java doc", "committedDate": "2021-01-17T15:51:31Z", "type": "forcePushed"}, {"oid": "d5d816d7468c1a1e06e79d95fef4ca0af24f144c", "url": "https://github.com/junit-team/junit5/commit/d5d816d7468c1a1e06e79d95fef4ca0af24f144c", "message": "Spotless", "committedDate": "2021-01-17T17:20:32Z", "type": "commit"}, {"oid": "d5d816d7468c1a1e06e79d95fef4ca0af24f144c", "url": "https://github.com/junit-team/junit5/commit/d5d816d7468c1a1e06e79d95fef4ca0af24f144c", "message": "Spotless", "committedDate": "2021-01-17T17:20:32Z", "type": "forcePushed"}, {"oid": "354a47b9b44f9bfddfcd1c0dc4e3f837b0baf6dd", "url": "https://github.com/junit-team/junit5/commit/354a47b9b44f9bfddfcd1c0dc4e3f837b0baf6dd", "message": "Merge remote-tracking branch 'origin/main' into junit-platform-suite-engine", "committedDate": "2021-01-30T14:40:28Z", "type": "commit"}, {"oid": "c9e76fbd037aecc7e19825e55c759b3955c0051c", "url": "https://github.com/junit-team/junit5/commit/c9e76fbd037aecc7e19825e55c759b3955c0051c", "message": "Consistently use fqn package names in @API(consumer) field", "committedDate": "2021-01-30T14:46:40Z", "type": "commit"}, {"oid": "3662638a3d48733a428f5a62c183fbb509b14a59", "url": "https://github.com/junit-team/junit5/commit/3662638a3d48733a428f5a62c183fbb509b14a59", "message": "Fix warnings on OpenJDK 17.", "committedDate": "2021-01-30T15:10:15Z", "type": "commit"}, {"oid": "3662638a3d48733a428f5a62c183fbb509b14a59", "url": "https://github.com/junit-team/junit5/commit/3662638a3d48733a428f5a62c183fbb509b14a59", "message": "Fix warnings on OpenJDK 17.", "committedDate": "2021-01-30T15:10:15Z", "type": "forcePushed"}, {"oid": "1a6c97c9ebb5a578d0d16d04c253232a8a82b6ad", "url": "https://github.com/junit-team/junit5/commit/1a6c97c9ebb5a578d0d16d04c253232a8a82b6ad", "message": "Move selector variations to DiscoverySelectors\n\nDropped SelectClasspathRoots; it doesn't make sense inside an annotation based engine", "committedDate": "2021-01-30T16:32:35Z", "type": "commit"}, {"oid": "757977ebd0181f29fd778a780ea0a5fe1c0df558", "url": "https://github.com/junit-team/junit5/commit/757977ebd0181f29fd778a780ea0a5fe1c0df558", "message": "Reduce repetition", "committedDate": "2021-01-30T17:59:38Z", "type": "commit"}, {"oid": "e5e5a925c771ed7bc525db64053f6b020d8f487f", "url": "https://github.com/junit-team/junit5/commit/e5e5a925c771ed7bc525db64053f6b020d8f487f", "message": "Remove duplication from suite-api-documentation", "committedDate": "2021-01-30T20:38:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzMzNTg2Mw==", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r567335863", "bodyText": "What about meta-annotations?", "author": "mpkorstanje", "createdAt": "2021-01-30T23:28:08Z", "path": "junit-platform-runner/src/main/java/org/junit/platform/runner/JUnitPlatform.java", "diffHunk": "@@ -145,160 +157,23 @@ private JUnitPlatformTestTree generateTestTree(LauncherDiscoveryRequest discover\n \t}\n \n \tprivate LauncherDiscoveryRequest createDiscoveryRequest() {\n-\t\tList<DiscoverySelector> selectors = getSelectorsFromAnnotations();\n-\n+\t\tLauncherDiscoveryRequestBuilder requestBuilder = request();\n \t\t// Allows @RunWith(JUnitPlatform.class) to be added to any test case\n-\t\tboolean isSuite = !selectors.isEmpty();\n+\t\tboolean isSuite = isSuite();\n \t\tif (!isSuite) {\n-\t\t\tselectors.add(selectClass(this.testClass));\n+\t\t\trequestBuilder.selectors(selectClass(this.testClass));\n \t\t}\n \n-\t\tLauncherDiscoveryRequestBuilder requestBuilder = request().selectors(selectors);\n-\t\taddFiltersFromAnnotations(requestBuilder, isSuite);\n-\t\treturn requestBuilder.build();\n-\t}\n-\n-\tprivate void addFiltersFromAnnotations(LauncherDiscoveryRequestBuilder requestBuilder, boolean isSuite) {\n-\t\taddIncludeClassNamePatternFilter(requestBuilder, isSuite);\n-\t\taddExcludeClassNamePatternFilter(requestBuilder);\n-\n-\t\taddIncludePackagesFilter(requestBuilder);\n-\t\taddExcludePackagesFilter(requestBuilder);\n-\n-\t\taddIncludedTagsFilter(requestBuilder);\n-\t\taddExcludedTagsFilter(requestBuilder);\n-\n-\t\taddIncludedEnginesFilter(requestBuilder);\n-\t\taddExcludedEnginesFilter(requestBuilder);\n-\t}\n-\n-\tprivate List<DiscoverySelector> getSelectorsFromAnnotations() {\n-\t\tList<DiscoverySelector> selectors = new ArrayList<>();\n-\n-\t\tselectors.addAll(transform(getSelectedClasses(), DiscoverySelectors::selectClass));\n-\t\tselectors.addAll(transform(getSelectedPackageNames(), DiscoverySelectors::selectPackage));\n-\n-\t\treturn selectors;\n-\t}\n-\n-\tprivate <T> List<DiscoverySelector> transform(T[] sourceElements, Function<T, DiscoverySelector> transformer) {\n-\t\treturn stream(sourceElements).map(transformer).collect(toList());\n-\t}\n-\n-\tprivate void addIncludeClassNamePatternFilter(LauncherDiscoveryRequestBuilder requestBuilder, boolean isSuite) {\n-\t\tString[] patterns = getIncludeClassNamePatterns(isSuite);\n-\t\tif (patterns.length > 0) {\n-\t\t\trequestBuilder.filters(includeClassNamePatterns(patterns));\n-\t\t}\n-\t}\n-\n-\tprivate void addExcludeClassNamePatternFilter(LauncherDiscoveryRequestBuilder requestBuilder) {\n-\t\tString[] patterns = getExcludeClassNamePatterns();\n-\t\tif (patterns.length > 0) {\n-\t\t\trequestBuilder.filters(excludeClassNamePatterns(patterns));\n-\t\t}\n-\t}\n-\n-\tprivate void addIncludePackagesFilter(LauncherDiscoveryRequestBuilder requestBuilder) {\n-\t\tString[] includedPackages = getIncludedPackages();\n-\t\tif (includedPackages.length > 0) {\n-\t\t\trequestBuilder.filters(includePackageNames(includedPackages));\n-\t\t}\n-\t}\n-\n-\tprivate void addExcludePackagesFilter(LauncherDiscoveryRequestBuilder requestBuilder) {\n-\t\tString[] excludedPackages = getExcludedPackages();\n-\t\tif (excludedPackages.length > 0) {\n-\t\t\trequestBuilder.filters(excludePackageNames(excludedPackages));\n-\t\t}\n-\t}\n-\n-\tprivate void addIncludedTagsFilter(LauncherDiscoveryRequestBuilder requestBuilder) {\n-\t\tString[] includedTags = getIncludedTags();\n-\t\tif (includedTags.length > 0) {\n-\t\t\trequestBuilder.filters(includeTags(includedTags));\n-\t\t}\n-\t}\n-\n-\tprivate void addExcludedTagsFilter(LauncherDiscoveryRequestBuilder requestBuilder) {\n-\t\tString[] excludedTags = getExcludedTags();\n-\t\tif (excludedTags.length > 0) {\n-\t\t\trequestBuilder.filters(excludeTags(excludedTags));\n-\t\t}\n-\t}\n-\n-\tprivate void addIncludedEnginesFilter(LauncherDiscoveryRequestBuilder requestBuilder) {\n-\t\tString[] engineIds = getIncludedEngineIds();\n-\t\tif (engineIds.length > 0) {\n-\t\t\trequestBuilder.filters(includeEngines(engineIds));\n-\t\t}\n-\t}\n-\n-\tprivate void addExcludedEnginesFilter(LauncherDiscoveryRequestBuilder requestBuilder) {\n-\t\tString[] engineIds = getExcludedEngineIds();\n-\t\tif (engineIds.length > 0) {\n-\t\t\trequestBuilder.filters(excludeEngines(engineIds));\n-\t\t}\n-\t}\n-\n-\tprivate Class<?>[] getSelectedClasses() {\n-\t\treturn getValueFromAnnotation(SelectClasses.class, SelectClasses::value, EMPTY_CLASS_ARRAY);\n-\t}\n-\n-\tprivate String[] getSelectedPackageNames() {\n-\t\treturn getValueFromAnnotation(SelectPackages.class, SelectPackages::value, EMPTY_STRING_ARRAY);\n-\t}\n-\n-\tprivate String[] getIncludedPackages() {\n-\t\treturn getValueFromAnnotation(IncludePackages.class, IncludePackages::value, EMPTY_STRING_ARRAY);\n-\t}\n-\n-\tprivate String[] getExcludedPackages() {\n-\t\treturn getValueFromAnnotation(ExcludePackages.class, ExcludePackages::value, EMPTY_STRING_ARRAY);\n-\t}\n-\n-\tprivate String[] getIncludedTags() {\n-\t\treturn getValueFromAnnotation(IncludeTags.class, IncludeTags::value, EMPTY_STRING_ARRAY);\n-\t}\n-\n-\tprivate String[] getExcludedTags() {\n-\t\treturn getValueFromAnnotation(ExcludeTags.class, ExcludeTags::value, EMPTY_STRING_ARRAY);\n-\t}\n-\n-\tprivate String[] getIncludedEngineIds() {\n-\t\treturn getValueFromAnnotation(IncludeEngines.class, IncludeEngines::value, EMPTY_STRING_ARRAY);\n-\t}\n-\n-\tprivate String[] getExcludedEngineIds() {\n-\t\treturn getValueFromAnnotation(ExcludeEngines.class, ExcludeEngines::value, EMPTY_STRING_ARRAY);\n-\t}\n-\n-\tprivate String[] getIncludeClassNamePatterns(boolean isSuite) {\n-\t\tString[] patterns = trimmed(getValueFromAnnotation(IncludeClassNamePatterns.class,\n-\t\t\tIncludeClassNamePatterns::value, EMPTY_STRING_ARRAY));\n-\t\tif (patterns.length == 0 && isSuite) {\n-\t\t\treturn STANDARD_INCLUDE_PATTERN_ARRAY;\n-\t\t}\n-\t\treturn patterns;\n-\t}\n-\n-\tprivate String[] getExcludeClassNamePatterns() {\n-\t\treturn trimmed(getValueFromAnnotation(ExcludeClassNamePatterns.class, ExcludeClassNamePatterns::value,\n-\t\t\tEMPTY_STRING_ARRAY));\n-\t}\n-\n-\tprivate String[] trimmed(String[] patterns) {\n-\t\tif (patterns.length == 0) {\n-\t\t\treturn patterns;\n-\t\t}\n-\t\treturn Arrays.stream(patterns).filter(StringUtils::isNotBlank).map(String::trim).toArray(String[]::new);\n+\t\t// @formatter:off\n+\t\treturn SuiteLauncherDiscoveryRequestBuilder.request(requestBuilder)\n+\t\t\t\t.filterStandardClassNamePatterns(isSuite)\n+\t\t\t\t.suite(this.testClass)\n+\t\t\t\t.build();\n+\t\t// @formatter:on\n \t}\n \n-\tprivate <A extends Annotation, V> V getValueFromAnnotation(Class<A> annotationClass, Function<A, V> extractor,\n-\t\t\tV defaultValue) {\n-\n-\t\tA annotation = this.testClass.getAnnotation(annotationClass);\n-\t\treturn (annotation != null ? extractor.apply(annotation) : defaultValue);\n+\tprivate boolean isSuite() {\n+\t\treturn SUITE_ANNOTATIONS.stream().anyMatch(annotation -> testClass.getAnnotation(annotation) != null);", "originalCommit": "37230ccccbf8d699a665950161fce4e0c93fe515", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b7e540d874203814ebf41868d7eb8909b030ab13", "chunk": "diff --git a/junit-platform-runner/src/main/java/org/junit/platform/runner/JUnitPlatform.java b/junit-platform-runner/src/main/java/org/junit/platform/runner/JUnitPlatform.java\nindex 228697ccd0..6cccf8623f 100644\n--- a/junit-platform-runner/src/main/java/org/junit/platform/runner/JUnitPlatform.java\n+++ b/junit-platform-runner/src/main/java/org/junit/platform/runner/JUnitPlatform.java\n\n@@ -157,7 +154,7 @@ public class JUnitPlatform extends Runner implements Filterable {\n \t}\n \n \tprivate LauncherDiscoveryRequest createDiscoveryRequest() {\n-\t\tLauncherDiscoveryRequestBuilder requestBuilder = request();\n+\t\tSuiteLauncherDiscoveryRequestBuilder requestBuilder = request();\n \t\t// Allows @RunWith(JUnitPlatform.class) to be added to any test case\n \t\tboolean isSuite = isSuite();\n \t\tif (!isSuite) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzMzNjQwMg==", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r567336402", "bodyText": "For consistency.", "author": "mpkorstanje", "createdAt": "2021-01-30T23:35:26Z", "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/DiscoverySelectors.java", "diffHunk": "@@ -343,8 +343,8 @@ public static ModuleSelector selectModule(String moduleName) {\n \t */\n \t@API(status = EXPERIMENTAL, since = \"1.1\")\n \tpublic static List<ModuleSelector> selectModules(Set<String> moduleNames) {\n-\t\tPreconditions.notNull(moduleNames, \"moduleNames must not be null\");\n-\t\tPreconditions.containsNoNullElements(moduleNames, \"individual module name must not be null\");\n+\t\tPreconditions.notNull(moduleNames, \"Module names must not be null\");\n+\t\tPreconditions.containsNoNullElements(moduleNames, \"Individual module name must not be null\");", "originalCommit": "37230ccccbf8d699a665950161fce4e0c93fe515", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzMzOTYwMw==", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r567339603", "bodyText": "@Suite\n@SelectPackages(\"org.junit.suite.testcases\")\nThis is starting to look kinda redundant. A suite without selectors doesn't work anyway. Though on the other hand, it would make it harder if multiple suite engines were used in the same project.\nSelectClasses\nSelectClasspathResource\nSelectDirectories\nSelectFile\nSelectFile\nSelectModules.\nSelectPackages\nSelectUris", "author": "mpkorstanje", "createdAt": "2021-01-30T23:47:45Z", "path": "junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/IsSuiteClass.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2015-2021 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.suite.engine;\n+\n+import java.util.function.Predicate;\n+\n+import org.junit.platform.commons.support.AnnotationSupport;\n+import org.junit.platform.suite.api.Suite;\n+\n+final class IsSuiteClass implements Predicate<Class<?>> {\n+\n+\tprivate static final IsPotentialTestContainer isPotentialTestContainer = new IsPotentialTestContainer();\n+\n+\t@Override\n+\tpublic boolean test(Class<?> testClass) {\n+\t\treturn isPotentialTestContainer.test(testClass) && hasSuiteAnnotation(testClass);\n+\t}\n+\n+\tprivate boolean hasSuiteAnnotation(Class<?> testClass) {\n+\t\treturn AnnotationSupport.isAnnotated(testClass, Suite.class);", "originalCommit": "450ff2024d6f692e51855d98b77b1b4c6a4e2ed7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "b7e540d874203814ebf41868d7eb8909b030ab13", "url": "https://github.com/junit-team/junit5/commit/b7e540d874203814ebf41868d7eb8909b030ab13", "message": "Fix release notes", "committedDate": "2021-02-06T14:13:00Z", "type": "forcePushed"}, {"oid": "a1f12ba7c2f7b0679044cb61c49a4ff4a5a62077", "url": "https://github.com/junit-team/junit5/commit/a1f12ba7c2f7b0679044cb61c49a4ff4a5a62077", "message": "Fix release notes", "committedDate": "2021-02-06T14:15:49Z", "type": "forcePushed"}, {"oid": "f9a1f7b6c56a8ef2a8beec932d10b3701d69e05c", "url": "https://github.com/junit-team/junit5/commit/f9a1f7b6c56a8ef2a8beec932d10b3701d69e05c", "message": "Untangle SuiteDiscoveryRequestBuilder from LauncherDiscoveryRequestBuilder", "committedDate": "2021-02-06T14:17:58Z", "type": "commit"}, {"oid": "bb86ebe8b6f3af5cfd6ee5c78c5bdd38e58e9f48", "url": "https://github.com/junit-team/junit5/commit/bb86ebe8b6f3af5cfd6ee5c78c5bdd38e58e9f48", "message": "Use standard include patterns when IncludeClassNamePatterns is omitted", "committedDate": "2021-02-06T14:17:58Z", "type": "commit"}, {"oid": "f0cb4e2a63a5747fa9893dba1837153c550d5a1e", "url": "https://github.com/junit-team/junit5/commit/f0cb4e2a63a5747fa9893dba1837153c550d5a1e", "message": "Reuse SuiteLauncherDiscoveryRequestBuilder through duplication", "committedDate": "2021-02-06T14:17:58Z", "type": "commit"}, {"oid": "2a8d843c7e0b5c3cf986de28f2d5d072870f6a18", "url": "https://github.com/junit-team/junit5/commit/2a8d843c7e0b5c3cf986de28f2d5d072870f6a18", "message": "Remove duplication from suite-api-documentation", "committedDate": "2021-02-06T14:17:58Z", "type": "commit"}, {"oid": "91137887df04ff6229f9d9b0f0fb8c4fe74a56df", "url": "https://github.com/junit-team/junit5/commit/91137887df04ff6229f9d9b0f0fb8c4fe74a56df", "message": "Extract SuiteLauncherDiscoveryRequestBuilder to junit-platform-suite-commons", "committedDate": "2021-02-06T14:17:58Z", "type": "commit"}, {"oid": "fabc3a3415f975b02609df400c607f0a4484b6be", "url": "https://github.com/junit-team/junit5/commit/fabc3a3415f975b02609df400c607f0a4484b6be", "message": "Add junit-platform-suite-commons to dependency diagram", "committedDate": "2021-02-06T14:17:58Z", "type": "commit"}, {"oid": "5500c67bfc18291df1c54e994072ab00c66eed63", "url": "https://github.com/junit-team/junit5/commit/5500c67bfc18291df1c54e994072ab00c66eed63", "message": "Clean up accessors", "committedDate": "2021-02-06T14:17:58Z", "type": "commit"}, {"oid": "32fe7e44b8aec59213ec1b0c81abf4444d36d0df", "url": "https://github.com/junit-team/junit5/commit/32fe7e44b8aec59213ec1b0c81abf4444d36d0df", "message": "Clean up naming", "committedDate": "2021-02-06T14:17:58Z", "type": "commit"}, {"oid": "0d9f9d83764cfac7ec9e453ba05773c594ab6c78", "url": "https://github.com/junit-team/junit5/commit/0d9f9d83764cfac7ec9e453ba05773c594ab6c78", "message": "Update dependency list in docs", "committedDate": "2021-02-06T14:17:58Z", "type": "commit"}, {"oid": "e02608b49f15035d6299b386987d27b537bb6406", "url": "https://github.com/junit-team/junit5/commit/e02608b49f15035d6299b386987d27b537bb6406", "message": "Support meta annotations", "committedDate": "2021-02-06T14:17:58Z", "type": "commit"}, {"oid": "f11f18ed667c828437c6937c9e4e9c29e283320b", "url": "https://github.com/junit-team/junit5/commit/f11f18ed667c828437c6937c9e4e9c29e283320b", "message": "Fix update documentation check", "committedDate": "2021-02-06T14:17:58Z", "type": "commit"}, {"oid": "aa7befad1a3d0ac5446d33a40a0a5f4906c85d18", "url": "https://github.com/junit-team/junit5/commit/aa7befad1a3d0ac5446d33a40a0a5f4906c85d18", "message": "Nits", "committedDate": "2021-02-06T14:17:58Z", "type": "commit"}, {"oid": "f4f4b0d636ffcb5d6f7c99a34b3b1fb2b6ab437f", "url": "https://github.com/junit-team/junit5/commit/f4f4b0d636ffcb5d6f7c99a34b3b1fb2b6ab437f", "message": "Nits", "committedDate": "2021-02-06T14:17:58Z", "type": "commit"}, {"oid": "5f7328aa8feba5788f1d3b915a806f9f3990d93c", "url": "https://github.com/junit-team/junit5/commit/5f7328aa8feba5788f1d3b915a806f9f3990d93c", "message": "Use delegation to keep purpose of suite request builder clear", "committedDate": "2021-02-06T14:17:58Z", "type": "commit"}, {"oid": "c59900f49fd81568eb03a66cc5fe58b26a40bba1", "url": "https://github.com/junit-team/junit5/commit/c59900f49fd81568eb03a66cc5fe58b26a40bba1", "message": "Add test for meta-annotations", "committedDate": "2021-02-06T14:17:58Z", "type": "commit"}, {"oid": "a0e92f0ff593af01e6d8beef2b7b4e7b2c8626d8", "url": "https://github.com/junit-team/junit5/commit/a0e92f0ff593af01e6d8beef2b7b4e7b2c8626d8", "message": "Fix java doc", "committedDate": "2021-02-06T14:17:58Z", "type": "commit"}, {"oid": "659f71c0eba33746392a09f5049bd0be4a569c62", "url": "https://github.com/junit-team/junit5/commit/659f71c0eba33746392a09f5049bd0be4a569c62", "message": "Fix release notes", "committedDate": "2021-02-06T14:17:58Z", "type": "commit"}, {"oid": "659f71c0eba33746392a09f5049bd0be4a569c62", "url": "https://github.com/junit-team/junit5/commit/659f71c0eba33746392a09f5049bd0be4a569c62", "message": "Fix release notes", "committedDate": "2021-02-06T14:17:58Z", "type": "forcePushed"}, {"oid": "dbe8cb001d0cef1f5df7e957dcdfacaccede175f", "url": "https://github.com/junit-team/junit5/commit/dbe8cb001d0cef1f5df7e957dcdfacaccede175f", "message": "Nits", "committedDate": "2021-02-06T14:27:35Z", "type": "commit"}, {"oid": "89dc3d597765ea21e4750b68cd9d353a852dbe77", "url": "https://github.com/junit-team/junit5/commit/89dc3d597765ea21e4750b68cd9d353a852dbe77", "message": "Keep apiguardian as a transitive dependency", "committedDate": "2021-02-06T14:32:44Z", "type": "commit"}, {"oid": "10cfe8db6b185fec4db9cbddfd0f045ac4d46128", "url": "https://github.com/junit-team/junit5/commit/10cfe8db6b185fec4db9cbddfd0f045ac4d46128", "message": "Merge remote-tracking branch 'origin/main' into junit-platform-suite-engine", "committedDate": "2021-02-06T14:35:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTYyNjY3OQ==", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r571626679", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tPreconditions.condition(hasTestEngineOtherThenSuiteEngine(testEngines),\n          \n          \n            \n            \t\t\t() -> \"Cannot create SuiteLauncher without at least one other TestEngine; \"\n          \n          \n            \n            \t\t\t\t\t+ \"consider adding an engine implementation JAR to the classpath\");\n          \n          \n            \n            \t\tthis.discoveryOrchestrator = new EngineDiscoveryOrchestrator(testEngines, emptyList());\n          \n          \n            \n            \t}\n          \n          \n            \n            \n          \n          \n            \n            \tprivate boolean hasTestEngineOtherThenSuiteEngine(Set<TestEngine> testEngines) {\n          \n          \n            \n            \t\tPreconditions.condition(hasTestEngineOtherThanSuiteEngine(testEngines),\n          \n          \n            \n            \t\t\t() -> \"Cannot create SuiteLauncher without at least one other TestEngine; \"\n          \n          \n            \n            \t\t\t\t\t+ \"consider adding an engine implementation JAR to the classpath\");\n          \n          \n            \n            \t\tthis.discoveryOrchestrator = new EngineDiscoveryOrchestrator(testEngines, emptyList());\n          \n          \n            \n            \t}\n          \n          \n            \n            \n          \n          \n            \n            \tprivate boolean hasTestEngineOtherThanSuiteEngine(Set<TestEngine> testEngines) {", "author": "marcphilipp", "createdAt": "2021-02-07T14:36:35Z", "path": "junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/SuiteLauncher.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2015-2021 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.suite.engine;\n+\n+import static java.util.Collections.emptyList;\n+\n+import java.util.LinkedHashSet;\n+import java.util.Set;\n+\n+import org.junit.platform.commons.util.Preconditions;\n+import org.junit.platform.engine.EngineExecutionListener;\n+import org.junit.platform.engine.TestEngine;\n+import org.junit.platform.engine.UniqueId;\n+import org.junit.platform.launcher.LauncherDiscoveryRequest;\n+import org.junit.platform.launcher.core.EngineDiscoveryOrchestrator;\n+import org.junit.platform.launcher.core.EngineDiscoveryOrchestrator.Phase;\n+import org.junit.platform.launcher.core.EngineExecutionOrchestrator;\n+import org.junit.platform.launcher.core.LauncherDiscoveryResult;\n+import org.junit.platform.launcher.core.ServiceLoaderTestEngineRegistry;\n+\n+class SuiteLauncher {\n+\n+\tprivate final EngineExecutionOrchestrator executionOrchestrator = new EngineExecutionOrchestrator();\n+\tprivate final EngineDiscoveryOrchestrator discoveryOrchestrator;\n+\n+\tstatic SuiteLauncher create() {\n+\t\tSet<TestEngine> engines = new LinkedHashSet<>();\n+\t\tnew ServiceLoaderTestEngineRegistry().loadTestEngines().forEach(engines::add);\n+\t\treturn new SuiteLauncher(engines);\n+\t}\n+\n+\tprivate SuiteLauncher(Set<TestEngine> testEngines) {\n+\t\tPreconditions.condition(hasTestEngineOtherThenSuiteEngine(testEngines),\n+\t\t\t() -> \"Cannot create SuiteLauncher without at least one other TestEngine; \"\n+\t\t\t\t\t+ \"consider adding an engine implementation JAR to the classpath\");\n+\t\tthis.discoveryOrchestrator = new EngineDiscoveryOrchestrator(testEngines, emptyList());\n+\t}\n+\n+\tprivate boolean hasTestEngineOtherThenSuiteEngine(Set<TestEngine> testEngines) {", "originalCommit": "10cfe8db6b185fec4db9cbddfd0f045ac4d46128", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "da654f2a1fb3b42ddde0873fec3cb2394178f38c", "chunk": "diff --git a/junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/SuiteLauncher.java b/junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/SuiteLauncher.java\nindex c8db4bad8d..18a5737a07 100644\n--- a/junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/SuiteLauncher.java\n+++ b/junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/SuiteLauncher.java\n\n@@ -38,13 +38,13 @@ class SuiteLauncher {\n \t}\n \n \tprivate SuiteLauncher(Set<TestEngine> testEngines) {\n-\t\tPreconditions.condition(hasTestEngineOtherThenSuiteEngine(testEngines),\n+\t\tPreconditions.condition(hasTestEngineOtherThanSuiteEngine(testEngines),\n \t\t\t() -> \"Cannot create SuiteLauncher without at least one other TestEngine; \"\n \t\t\t\t\t+ \"consider adding an engine implementation JAR to the classpath\");\n \t\tthis.discoveryOrchestrator = new EngineDiscoveryOrchestrator(testEngines, emptyList());\n \t}\n \n-\tprivate boolean hasTestEngineOtherThenSuiteEngine(Set<TestEngine> testEngines) {\n+\tprivate boolean hasTestEngineOtherThanSuiteEngine(Set<TestEngine> testEngines) {\n \t\treturn testEngines.stream().anyMatch(testEngine -> !SuiteEngineDescriptor.ENGINE_ID.equals(testEngine.getId()));\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTYyOTkyNA==", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r571629924", "bodyText": "\u2b55 Does this work?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * {@link Segment#getType type} {@code \"engine\"}.\n          \n          \n            \n            \t * {@link Segment#getType type} {@value ENGINE_SEGMENT_TYPE}.", "author": "marcphilipp", "createdAt": "2021-02-07T14:59:56Z", "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/UniqueId.java", "diffHunk": "@@ -162,6 +163,24 @@ public final UniqueId append(Segment segment) {\n \t\treturn new UniqueId(this.uniqueIdFormat, baseSegments);\n \t}\n \n+\t/**\n+\t * Construct a new {@code UniqueId} by appending a new {@link Segment}, based\n+\t * on the supplied {@code engineId}, to the end of this {@code UniqueId}.\n+\t *\n+\t * <p>This {@code UniqueId} will not be modified.\n+\t *\n+\t * <p>The engine ID will be stored in a {@link Segment} with\n+\t * {@link Segment#getType type} {@code \"engine\"}.", "originalCommit": "10cfe8db6b185fec4db9cbddfd0f045ac4d46128", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "01a611a00c810a4ba80445822f9cb0ebd7ee34fc", "chunk": "diff --git a/junit-platform-engine/src/main/java/org/junit/platform/engine/UniqueId.java b/junit-platform-engine/src/main/java/org/junit/platform/engine/UniqueId.java\nindex 347e513e34..8e601904a0 100644\n--- a/junit-platform-engine/src/main/java/org/junit/platform/engine/UniqueId.java\n+++ b/junit-platform-engine/src/main/java/org/junit/platform/engine/UniqueId.java\n\n@@ -170,7 +170,7 @@ public class UniqueId implements Cloneable, Serializable {\n \t * <p>This {@code UniqueId} will not be modified.\n \t *\n \t * <p>The engine ID will be stored in a {@link Segment} with\n-\t * {@link Segment#getType type} {@code \"engine\"}.\n+\t * {@link Segment#getType type} {@value ENGINE_SEGMENT_TYPE}.\n \t *\n \t * @param engineId the engine ID; never {@code null} or blank\n \t *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTYzMDQ1Mw==", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r571630453", "bodyText": "\u274c Although I don't know of any engine that is completely dynamic, we should call containsTests here:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t.filter(entry -> !entry.getValue().getChildren().isEmpty())\n          \n          \n            \n            \t\t\t\t.filter(entry -> TestDescriptor.containsTests(entry.getValue())", "author": "marcphilipp", "createdAt": "2021-02-07T15:04:41Z", "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/EngineDiscoveryOrchestrator.java", "diffHunk": "@@ -173,6 +202,15 @@ private void logTestDescriptorExclusionReasons(Map<String, List<TestDescriptor>>\n \t\t});\n \t}\n \n+\tprivate Map<TestEngine, TestDescriptor> pruneEngines(Map<TestEngine, TestDescriptor> result) {\n+\t\t// @formatter:off\n+\t\treturn result.entrySet()\n+\t\t\t\t.stream()\n+\t\t\t\t.filter(entry -> !entry.getValue().getChildren().isEmpty())", "originalCommit": "10cfe8db6b185fec4db9cbddfd0f045ac4d46128", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7749b906fa8bb31b8f028a1c1ad0cdc2e4677d26", "chunk": "diff --git a/junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/EngineDiscoveryOrchestrator.java b/junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/EngineDiscoveryOrchestrator.java\nindex 2198031765..a2571030be 100644\n--- a/junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/EngineDiscoveryOrchestrator.java\n+++ b/junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/EngineDiscoveryOrchestrator.java\n\n@@ -206,7 +206,7 @@ public class EngineDiscoveryOrchestrator {\n \t\t// @formatter:off\n \t\treturn result.entrySet()\n \t\t\t\t.stream()\n-\t\t\t\t.filter(entry -> !entry.getValue().getChildren().isEmpty())\n+\t\t\t\t.filter(entry -> TestDescriptor.containsTests(entry.getValue()))\n \t\t\t\t.collect(toMap(Entry::getKey, Entry::getValue));\n \t\t// @formatter:on\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTYzMDY0Mw==", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r571630643", "bodyText": "\u2753 You opted for brevity here?", "author": "marcphilipp", "createdAt": "2021-02-07T15:06:03Z", "path": "junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/Configuration.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2015-2021 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.suite.api;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Inherited;\n+import java.lang.annotation.Repeatable;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.apiguardian.api.API;\n+import org.apiguardian.api.API.Status;\n+\n+/**\n+ * {@code @Configuration} specifies the configuration {@linkplain #key key} and\n+ * {@linkplain #value value} pairs to be added to the discovery request when running\n+ * a test suite on the JUnit Platform.\n+ *\n+ * @since 1.8\n+ * @see Suite\n+ * @see org.junit.platform.runner.JUnitPlatform\n+ * @see org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder#configurationParameter(String, String)\n+ */\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target(ElementType.TYPE)\n+@Inherited\n+@Documented\n+@API(status = Status.EXPERIMENTAL, since = \"1.8\")\n+@Repeatable(Configurations.class)\n+public @interface Configuration {", "originalCommit": "10cfe8db6b185fec4db9cbddfd0f045ac4d46128", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTY0MzI1MA==", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r571643250", "bodyText": "I never noticed. But yes, it would be better to use ConfigurationParameter to retain the similarity to the launcher api.", "author": "mpkorstanje", "createdAt": "2021-02-07T16:34:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTYzMDY0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "4ade1c4889c6d5e32b6481f8f2b267b1141102cb", "chunk": "diff --git a/junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/Configuration.java b/junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/ConfigurationParameter.java\nsimilarity index 94%\nrename from junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/Configuration.java\nrename to junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/ConfigurationParameter.java\nindex d07edc212b..6e8c44d8c7 100644\n--- a/junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/Configuration.java\n+++ b/junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/ConfigurationParameter.java\n\n@@ -36,8 +36,8 @@ import org.apiguardian.api.API.Status;\n @Inherited\n @Documented\n @API(status = Status.EXPERIMENTAL, since = \"1.8\")\n-@Repeatable(Configurations.class)\n-public @interface Configuration {\n+@Repeatable(ConfigurationParameters.class)\n+public @interface ConfigurationParameter {\n \n \t/**\n \t * The configuration parameter key under which to add the\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTYzMDk4OA==", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r571630988", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * {@code @Suite} with the {@code junit-platform-suite-engine}.\n          \n          \n            \n             * {@link Suite @Suite} with the {@code junit-platform-suite-engine}.", "author": "marcphilipp", "createdAt": "2021-02-07T15:08:20Z", "path": "junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/package-info.java", "diffHunk": "@@ -1,5 +1,13 @@\n /**\n  * Annotations for configuring a <em>test suite</em> on the JUnit Platform.\n+ *\n+ * <h4>JUnit 4 Suite Support</h4>\n+ * <p>Test suites can be run on the JUnit Platform in a JUnit 4 environment via\n+ * {@code @RunWith(JUnitPlatform.class)} with the {@code junit-platform-runner}.\n+ *\n+ * <h4>JUnit 5 Suite Support</h4>\n+ * <p>Test suites can be run on the JUnit Platform in a JUnit 5 environment via\n+ * {@code @Suite} with the {@code junit-platform-suite-engine}.", "originalCommit": "10cfe8db6b185fec4db9cbddfd0f045ac4d46128", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d1b7d1a26b1304eb1497691acb92b8712b5b1da", "chunk": "diff --git a/junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/package-info.java b/junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/package-info.java\nindex ebb3fcc4a3..27a247baea 100644\n--- a/junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/package-info.java\n+++ b/junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/package-info.java\n\n@@ -7,7 +7,7 @@\n  *\n  * <h4>JUnit 5 Suite Support</h4>\n  * <p>Test suites can be run on the JUnit Platform in a JUnit 5 environment via\n- * {@code @Suite} with the {@code junit-platform-suite-engine}.\n+ * {@link Suite @Suite} with the {@code junit-platform-suite-engine}.\n  */\n \n package org.junit.platform.suite.api;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTYzMTc0NA==", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r571631744", "bodyText": "\u274c We shouldn't do this recursively, just for the engine descriptor's direct children.", "author": "marcphilipp", "createdAt": "2021-02-07T15:13:13Z", "path": "junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/DiscoverySelectorResolver.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2015-2021 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.suite.engine;\n+\n+import org.junit.platform.engine.EngineDiscoveryRequest;\n+import org.junit.platform.engine.TestDescriptor;\n+import org.junit.platform.engine.support.discovery.EngineDiscoveryRequestResolver;\n+\n+final class DiscoverySelectorResolver {\n+\n+\t// @formatter:off\n+\tprivate static final EngineDiscoveryRequestResolver<SuiteEngineDescriptor> resolver = EngineDiscoveryRequestResolver.<SuiteEngineDescriptor>builder()\n+\t\t\t.addClassContainerSelectorResolver(new IsSuiteClass())\n+\t\t\t.addSelectorResolver(context -> new ClassSelectorResolver(context.getClassNameFilter(), context.getEngineDescriptor()))\n+\t\t\t.addTestDescriptorVisitor(context -> DiscoverySelectorResolver::discoverSuite)", "originalCommit": "10cfe8db6b185fec4db9cbddfd0f045ac4d46128", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "94e47a2d66468829bc1ea6cad18c7b7e5086a8a0", "chunk": "diff --git a/junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/DiscoverySelectorResolver.java b/junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/DiscoverySelectorResolver.java\nindex b13081b021..ae7251ec36 100644\n--- a/junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/DiscoverySelectorResolver.java\n+++ b/junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/DiscoverySelectorResolver.java\n\n@@ -20,7 +20,6 @@ final class DiscoverySelectorResolver {\n \tprivate static final EngineDiscoveryRequestResolver<SuiteEngineDescriptor> resolver = EngineDiscoveryRequestResolver.<SuiteEngineDescriptor>builder()\n \t\t\t.addClassContainerSelectorResolver(new IsSuiteClass())\n \t\t\t.addSelectorResolver(context -> new ClassSelectorResolver(context.getClassNameFilter(), context.getEngineDescriptor()))\n-\t\t\t.addTestDescriptorVisitor(context -> DiscoverySelectorResolver::discoverSuite)\n \t\t\t.addTestDescriptorVisitor(context -> TestDescriptor::prune)\n \t\t\t.build();\n \t// @formatter:on\n"}}, {"oid": "2d1b7d1a26b1304eb1497691acb92b8712b5b1da", "url": "https://github.com/junit-team/junit5/commit/2d1b7d1a26b1304eb1497691acb92b8712b5b1da", "message": "Update junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/package-info.java\n\nCo-authored-by: Marc Philipp <marc@gradle.com>", "committedDate": "2021-02-07T16:19:52Z", "type": "commit"}, {"oid": "7749b906fa8bb31b8f028a1c1ad0cdc2e4677d26", "url": "https://github.com/junit-team/junit5/commit/7749b906fa8bb31b8f028a1c1ad0cdc2e4677d26", "message": "Update junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/EngineDiscoveryOrchestrator.java\n\nCo-authored-by: Marc Philipp <marc@gradle.com>", "committedDate": "2021-02-07T16:27:51Z", "type": "commit"}, {"oid": "01a611a00c810a4ba80445822f9cb0ebd7ee34fc", "url": "https://github.com/junit-team/junit5/commit/01a611a00c810a4ba80445822f9cb0ebd7ee34fc", "message": "Update junit-platform-engine/src/main/java/org/junit/platform/engine/UniqueId.java\n\nCo-authored-by: Marc Philipp <marc@gradle.com>", "committedDate": "2021-02-07T16:27:51Z", "type": "commit"}, {"oid": "8723325766bd0b7e3a6d380b9db8055962713481", "url": "https://github.com/junit-team/junit5/commit/8723325766bd0b7e3a6d380b9db8055962713481", "message": "Update documentation/src/docs/asciidoc/release-notes/release-notes-5.8.0-M1.adoc\n\nCo-authored-by: Marc Philipp <marc@gradle.com>", "committedDate": "2021-02-07T16:27:51Z", "type": "commit"}, {"oid": "da654f2a1fb3b42ddde0873fec3cb2394178f38c", "url": "https://github.com/junit-team/junit5/commit/da654f2a1fb3b42ddde0873fec3cb2394178f38c", "message": "Update junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/SuiteLauncher.java\n\nCo-authored-by: Marc Philipp <marc@gradle.com>", "committedDate": "2021-02-07T16:27:51Z", "type": "commit"}, {"oid": "4ade1c4889c6d5e32b6481f8f2b267b1141102cb", "url": "https://github.com/junit-team/junit5/commit/4ade1c4889c6d5e32b6481f8f2b267b1141102cb", "message": "Rename Configuration to ConfigurationParameter", "committedDate": "2021-02-07T16:30:43Z", "type": "commit"}, {"oid": "4ade1c4889c6d5e32b6481f8f2b267b1141102cb", "url": "https://github.com/junit-team/junit5/commit/4ade1c4889c6d5e32b6481f8f2b267b1141102cb", "message": "Rename Configuration to ConfigurationParameter", "committedDate": "2021-02-07T16:30:43Z", "type": "forcePushed"}, {"oid": "94e47a2d66468829bc1ea6cad18c7b7e5086a8a0", "url": "https://github.com/junit-team/junit5/commit/94e47a2d66468829bc1ea6cad18c7b7e5086a8a0", "message": "Only discover test in suit for engines direct descendents", "committedDate": "2021-02-07T16:42:24Z", "type": "commit"}, {"oid": "a7bb95529986d856f66b1992ee6158965634558d", "url": "https://github.com/junit-team/junit5/commit/a7bb95529986d856f66b1992ee6158965634558d", "message": "Delay prune until after suits have been discovered", "committedDate": "2021-02-07T17:12:26Z", "type": "commit"}, {"oid": "6b4a1f30d1293b3102be4459cf42a8a440e3de59", "url": "https://github.com/junit-team/junit5/commit/6b4a1f30d1293b3102be4459cf42a8a440e3de59", "message": "Add note about aggregator", "committedDate": "2021-02-07T17:28:56Z", "type": "commit"}, {"oid": "b9911f665753b5e497e2f014c289c28dfb077fa2", "url": "https://github.com/junit-team/junit5/commit/b9911f665753b5e497e2f014c289c28dfb077fa2", "message": "Use note styling", "committedDate": "2021-02-07T17:30:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTY2NDg5OA==", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r571664898", "bodyText": "\u2753 Shouldn't this be done before pruning the tree?", "author": "marcphilipp", "createdAt": "2021-02-07T18:46:48Z", "path": "junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/DiscoverySelectorResolver.java", "diffHunk": "@@ -34,6 +33,7 @@ private static void discoverSuite(TestDescriptor descriptor) {\n \n \tvoid resolveSelectors(EngineDiscoveryRequest request, SuiteEngineDescriptor engineDescriptor) {\n \t\tresolver.resolve(request, engineDescriptor);\n+\t\tengineDescriptor.getChildren().forEach(DiscoverySelectorResolver::discoverSuite);", "originalCommit": "94e47a2d66468829bc1ea6cad18c7b7e5086a8a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTY5NTc1Ng==", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r571695756", "bodyText": "Yup. \ud83e\udd15", "author": "mpkorstanje", "createdAt": "2021-02-07T21:04:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTY2NDg5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Mjg0ODMxNQ==", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r572848315", "bodyText": "Fixed  a7bb955 .", "author": "mpkorstanje", "createdAt": "2021-02-09T12:35:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTY2NDg5OA=="}], "type": "inlineReview", "revised_code": null}]}