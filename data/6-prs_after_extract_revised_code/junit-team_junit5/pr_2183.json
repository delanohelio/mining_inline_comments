{"pr_number": 2183, "pr_title": "Add config parameter for deactivating auto-registered listeners", "pr_createdAt": "2020-02-14T15:42:37Z", "pr_url": "https://github.com/junit-team/junit5/pull/2183", "timeline": [{"oid": "1a535395ab34c636a32cda57bd18c5706405225c", "url": "https://github.com/junit-team/junit5/commit/1a535395ab34c636a32cda57bd18c5706405225c", "message": "#2181, Add conditional property to be able to deactivate listeners being registered from ServiceLoader\nUpdate conditions deactivate to support csv parameters", "committedDate": "2020-02-14T15:39:53Z", "type": "commit"}, {"oid": "fc7b4dcbd43d35ea394fb4bda40c3af4908a6aea", "url": "https://github.com/junit-team/junit5/commit/fc7b4dcbd43d35ea394fb4bda40c3af4908a6aea", "message": "Formatter spotlessApply", "committedDate": "2020-02-14T15:54:34Z", "type": "commit"}, {"oid": "3f3f3a4bb5086a2bd5b58bc674eadea52a16cccb", "url": "https://github.com/junit-team/junit5/commit/3f3f3a4bb5086a2bd5b58bc674eadea52a16cccb", "message": "Add @API annotation", "committedDate": "2020-02-14T16:14:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU5ODgxNQ==", "url": "https://github.com/junit-team/junit5/pull/2183#discussion_r379598815", "bodyText": "\u2753 Why a Supplier?", "author": "marcphilipp", "createdAt": "2020-02-14T19:12:46Z", "path": "junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassNameFilterUtil.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.commons.util;\n+\n+import static org.apiguardian.api.API.Status.INTERNAL;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.function.Supplier;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import org.apiguardian.api.API;\n+\n+/**\n+ * Class-related predicate holder used by execution listener, execution condition predicates\n+ *\n+ * <h3>DISCLAIMER</h3>\n+ *\n+ * <p>These utilities are intended solely for usage within the JUnit framework\n+ * itself. <strong>Any usage by external parties is not supported.</strong>\n+ * Use at your own risk!\n+ *\n+ */\n+@API(status = INTERNAL, since = \"5.5\")\n+public class ClassNameFilterUtil {\n+\n+\tprivate ClassNameFilterUtil() {\n+\t\t/* no-op */\n+\t}\n+\tprivate static final Predicate<?> alwaysActivated = object -> true;\n+\tprivate static final Predicate<?> alwaysDeactivated = object -> false;\n+\n+\tpublic static final String DEACTIVATE_ALL_PATTERN = \"*\";\n+\tpublic static final String DEACTIVATE_CONDITIONS_PATTERN_PROPERTY_NAME = \"junit.jupiter.conditions.deactivate\";\n+\tpublic static final String DEACTIVATE_LISTENERS_PATTERN_PROPERTY_NAME = \"junit.platform.execution.listeners.deactivate\";\n+\n+\tpublic static Predicate<?> get(Supplier<Optional<String>> pattern) {", "originalCommit": "3f3f3a4bb5086a2bd5b58bc674eadea52a16cccb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYyMTYyNA==", "url": "https://github.com/junit-team/junit5/pull/2183#discussion_r379621624", "bodyText": "Wanted to circumnavigate using an Optional as a method parameter along with trying to remove the dependency on Configuration parameter.\nUsing Optional as method parameters (or class members) isn't really ideal since they take only delegate a state of the variable while exposing a deceiving NPE potential on themselves.\nDo you suggest any other way?", "author": "nishantvas", "createdAt": "2020-02-14T20:06:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU5ODgxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgyMDMwNA==", "url": "https://github.com/junit-team/junit5/pull/2183#discussion_r379820304", "bodyText": "Can we just take a String and handle the Optional on the outside? If that ends up being too much duplication, I think Optional<String> would be better here and we don't have a general rule in this project (even though IntelliJ might disagree) against Optional as method parameter. A Supplier can be null, too. \ud83d\ude09", "author": "marcphilipp", "createdAt": "2020-02-15T09:22:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU5ODgxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "c88906fe3067c24e8e3dcdc1fdd4a4027e401f58", "chunk": "diff --git a/junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassNameFilterUtil.java b/junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassNameFilterUtil.java\nindex 11397fe355..0a806cd196 100644\n--- a/junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassNameFilterUtil.java\n+++ b/junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassNameFilterUtil.java\n\n@@ -13,9 +13,9 @@ package org.junit.platform.commons.util;\n import static org.apiguardian.api.API.Status.INTERNAL;\n \n import java.util.Arrays;\n+import java.util.List;\n import java.util.Optional;\n import java.util.function.Predicate;\n-import java.util.function.Supplier;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU5OTIwNA==", "url": "https://github.com/junit-team/junit5/pull/2183#discussion_r379599204", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @API(status = INTERNAL, since = \"5.5\")\n          \n          \n            \n            @API(status = INTERNAL, since = \"5.7\")", "author": "marcphilipp", "createdAt": "2020-02-14T19:13:41Z", "path": "junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassNameFilterUtil.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.commons.util;\n+\n+import static org.apiguardian.api.API.Status.INTERNAL;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.function.Supplier;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import org.apiguardian.api.API;\n+\n+/**\n+ * Class-related predicate holder used by execution listener, execution condition predicates\n+ *\n+ * <h3>DISCLAIMER</h3>\n+ *\n+ * <p>These utilities are intended solely for usage within the JUnit framework\n+ * itself. <strong>Any usage by external parties is not supported.</strong>\n+ * Use at your own risk!\n+ *\n+ */\n+@API(status = INTERNAL, since = \"5.5\")", "originalCommit": "3f3f3a4bb5086a2bd5b58bc674eadea52a16cccb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c88906fe3067c24e8e3dcdc1fdd4a4027e401f58", "chunk": "diff --git a/junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassNameFilterUtil.java b/junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassNameFilterUtil.java\nindex 11397fe355..0a806cd196 100644\n--- a/junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassNameFilterUtil.java\n+++ b/junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassNameFilterUtil.java\n\n@@ -13,9 +13,9 @@ package org.junit.platform.commons.util;\n import static org.apiguardian.api.API.Status.INTERNAL;\n \n import java.util.Arrays;\n+import java.util.List;\n import java.util.Optional;\n import java.util.function.Predicate;\n-import java.util.function.Supplier;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU5OTQ4Mw==", "url": "https://github.com/junit-team/junit5/pull/2183#discussion_r379599483", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *\n          \n          \n            \n             *\n          \n          \n            \n             * @since 5.7", "author": "marcphilipp", "createdAt": "2020-02-14T19:14:17Z", "path": "junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassNameFilterUtil.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.commons.util;\n+\n+import static org.apiguardian.api.API.Status.INTERNAL;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.function.Supplier;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import org.apiguardian.api.API;\n+\n+/**\n+ * Class-related predicate holder used by execution listener, execution condition predicates\n+ *\n+ * <h3>DISCLAIMER</h3>\n+ *\n+ * <p>These utilities are intended solely for usage within the JUnit framework\n+ * itself. <strong>Any usage by external parties is not supported.</strong>\n+ * Use at your own risk!\n+ *", "originalCommit": "3f3f3a4bb5086a2bd5b58bc674eadea52a16cccb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDEyOTg3Nw==", "url": "https://github.com/junit-team/junit5/pull/2183#discussion_r380129877", "bodyText": "Updated", "author": "nishantvas", "createdAt": "2020-02-17T11:31:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU5OTQ4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "c88906fe3067c24e8e3dcdc1fdd4a4027e401f58", "chunk": "diff --git a/junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassNameFilterUtil.java b/junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassNameFilterUtil.java\nindex 11397fe355..0a806cd196 100644\n--- a/junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassNameFilterUtil.java\n+++ b/junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassNameFilterUtil.java\n\n@@ -13,9 +13,9 @@ package org.junit.platform.commons.util;\n import static org.apiguardian.api.API.Status.INTERNAL;\n \n import java.util.Arrays;\n+import java.util.List;\n import java.util.Optional;\n import java.util.function.Predicate;\n-import java.util.function.Supplier;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYwMDIyNw==", "url": "https://github.com/junit-team/junit5/pull/2183#discussion_r379600227", "bodyText": "\u274c These two constants should be moved to junit-jupiter-engine and junit-platform-launcher, respectively.", "author": "marcphilipp", "createdAt": "2020-02-14T19:15:59Z", "path": "junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassNameFilterUtil.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.commons.util;\n+\n+import static org.apiguardian.api.API.Status.INTERNAL;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.function.Supplier;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import org.apiguardian.api.API;\n+\n+/**\n+ * Class-related predicate holder used by execution listener, execution condition predicates\n+ *\n+ * <h3>DISCLAIMER</h3>\n+ *\n+ * <p>These utilities are intended solely for usage within the JUnit framework\n+ * itself. <strong>Any usage by external parties is not supported.</strong>\n+ * Use at your own risk!\n+ *\n+ */\n+@API(status = INTERNAL, since = \"5.5\")\n+public class ClassNameFilterUtil {\n+\n+\tprivate ClassNameFilterUtil() {\n+\t\t/* no-op */\n+\t}\n+\tprivate static final Predicate<?> alwaysActivated = object -> true;\n+\tprivate static final Predicate<?> alwaysDeactivated = object -> false;\n+\n+\tpublic static final String DEACTIVATE_ALL_PATTERN = \"*\";\n+\tpublic static final String DEACTIVATE_CONDITIONS_PATTERN_PROPERTY_NAME = \"junit.jupiter.conditions.deactivate\";\n+\tpublic static final String DEACTIVATE_LISTENERS_PATTERN_PROPERTY_NAME = \"junit.platform.execution.listeners.deactivate\";", "originalCommit": "3f3f3a4bb5086a2bd5b58bc674eadea52a16cccb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c88906fe3067c24e8e3dcdc1fdd4a4027e401f58", "chunk": "diff --git a/junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassNameFilterUtil.java b/junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassNameFilterUtil.java\nindex 11397fe355..0a806cd196 100644\n--- a/junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassNameFilterUtil.java\n+++ b/junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassNameFilterUtil.java\n\n@@ -13,9 +13,9 @@ package org.junit.platform.commons.util;\n import static org.apiguardian.api.API.Status.INTERNAL;\n \n import java.util.Arrays;\n+import java.util.List;\n import java.util.Optional;\n import java.util.function.Predicate;\n-import java.util.function.Supplier;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYwMTMxNA==", "url": "https://github.com/junit-team/junit5/pull/2183#discussion_r379601314", "bodyText": "\u274c Let's only support ,.", "author": "marcphilipp", "createdAt": "2020-02-14T19:18:36Z", "path": "junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassNameFilterUtil.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.commons.util;\n+\n+import static org.apiguardian.api.API.Status.INTERNAL;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.function.Supplier;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import org.apiguardian.api.API;\n+\n+/**\n+ * Class-related predicate holder used by execution listener, execution condition predicates\n+ *\n+ * <h3>DISCLAIMER</h3>\n+ *\n+ * <p>These utilities are intended solely for usage within the JUnit framework\n+ * itself. <strong>Any usage by external parties is not supported.</strong>\n+ * Use at your own risk!\n+ *\n+ */\n+@API(status = INTERNAL, since = \"5.5\")\n+public class ClassNameFilterUtil {\n+\n+\tprivate ClassNameFilterUtil() {\n+\t\t/* no-op */\n+\t}\n+\tprivate static final Predicate<?> alwaysActivated = object -> true;\n+\tprivate static final Predicate<?> alwaysDeactivated = object -> false;\n+\n+\tpublic static final String DEACTIVATE_ALL_PATTERN = \"*\";\n+\tpublic static final String DEACTIVATE_CONDITIONS_PATTERN_PROPERTY_NAME = \"junit.jupiter.conditions.deactivate\";\n+\tpublic static final String DEACTIVATE_LISTENERS_PATTERN_PROPERTY_NAME = \"junit.platform.execution.listeners.deactivate\";\n+\n+\tpublic static Predicate<?> get(Supplier<Optional<String>> pattern) {\n+\t// @formatter:off\n+    return pattern.get()\n+        .filter(StringUtils::isNotBlank)\n+        .map(String::trim)\n+        .map(patternString -> {\n+          if (DEACTIVATE_ALL_PATTERN.equals(patternString)) {\n+            return alwaysDeactivated;\n+          }\n+          return matchesRegex(patternString);\n+        })\n+        .orElse(alwaysActivated);\n+    // @formatter:on\n+\t}\n+\n+\tprivate static Predicate<?> matchesRegex(String patternString) {\n+\t\tPattern pattern = Pattern.compile(convertToRegEx(patternString));\n+\t\treturn object -> !pattern.matcher(object.getClass().getName()).matches();\n+\t}\n+\n+\tprivate static String convertToRegEx(String pattern) {\n+\t\tpattern = Matcher.quoteReplacement(pattern);\n+\t\t// Splitting CSV Separated Pattens\n+\t\tpattern = Arrays.stream(pattern.split(\"[,;]\")).map(ClassNameFilterUtil::replaceRegExElements).collect(", "originalCommit": "3f3f3a4bb5086a2bd5b58bc674eadea52a16cccb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYyMjQ5NQ==", "url": "https://github.com/junit-team/junit5/pull/2183#discussion_r379622495", "bodyText": "In a dot separated class naming, wouldn't semi-colon be helpful for readability?", "author": "nishantvas", "createdAt": "2020-02-14T20:08:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYwMTMxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgyMDQ3Mg==", "url": "https://github.com/junit-team/junit5/pull/2183#discussion_r379820472", "bodyText": "I think we should instead allow whitespace, i.e. trim each pattern.", "author": "marcphilipp", "createdAt": "2020-02-15T09:24:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYwMTMxNA=="}], "type": "inlineReview", "revised_code": {"commit": "c88906fe3067c24e8e3dcdc1fdd4a4027e401f58", "chunk": "diff --git a/junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassNameFilterUtil.java b/junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassNameFilterUtil.java\nindex 11397fe355..0a806cd196 100644\n--- a/junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassNameFilterUtil.java\n+++ b/junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassNameFilterUtil.java\n\n@@ -13,9 +13,9 @@ package org.junit.platform.commons.util;\n import static org.apiguardian.api.API.Status.INTERNAL;\n \n import java.util.Arrays;\n+import java.util.List;\n import java.util.Optional;\n import java.util.function.Predicate;\n-import java.util.function.Supplier;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYwMTU3MA==", "url": "https://github.com/junit-team/junit5/pull/2183#discussion_r379601570", "bodyText": "\u274c Please add tests for comma-separated patterns to ExecutionConditionTests.", "author": "marcphilipp", "createdAt": "2020-02-14T19:19:11Z", "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/config/DefaultJupiterConfiguration.java", "diffHunk": "@@ -83,8 +84,8 @@ public Lifecycle getDefaultTestInstanceLifecycle() {\n \t@Override\n \t@SuppressWarnings(\"unchecked\")\n \tpublic Predicate<ExecutionCondition> getExecutionConditionFilter() {\n-\t\treturn (Predicate<ExecutionCondition>) new ClassNamePatternParameterConverter().get(configurationParameters,\n-\t\t\tDEACTIVATE_CONDITIONS_PATTERN_PROPERTY_NAME);\n+\t\treturn (Predicate<ExecutionCondition>) ClassNameFilterUtil.get(\n+\t\t\t() -> configurationParameters.get(DEACTIVATE_CONDITIONS_PATTERN_PROPERTY_NAME));", "originalCommit": "3f3f3a4bb5086a2bd5b58bc674eadea52a16cccb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c88906fe3067c24e8e3dcdc1fdd4a4027e401f58", "chunk": "diff --git a/junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/config/DefaultJupiterConfiguration.java b/junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/config/DefaultJupiterConfiguration.java\nindex 1388e0a556..dcc15b4082 100644\n--- a/junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/config/DefaultJupiterConfiguration.java\n+++ b/junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/config/DefaultJupiterConfiguration.java\n\n@@ -84,8 +84,8 @@ public class DefaultJupiterConfiguration implements JupiterConfiguration {\n \t@Override\n \t@SuppressWarnings(\"unchecked\")\n \tpublic Predicate<ExecutionCondition> getExecutionConditionFilter() {\n-\t\treturn (Predicate<ExecutionCondition>) ClassNameFilterUtil.get(\n-\t\t\t() -> configurationParameters.get(DEACTIVATE_CONDITIONS_PATTERN_PROPERTY_NAME));\n+\t\treturn (Predicate<ExecutionCondition>) ClassNameFilterUtil.filterForClassName(\n+\t\t\tconfigurationParameters.get(DEACTIVATE_CONDITIONS_PATTERN_PROPERTY_NAME).orElse(null));\n \t}\n \n \t@Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYwMzI5Mw==", "url": "https://github.com/junit-team/junit5/pull/2183#discussion_r379603293", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertThat(unused).isEmpty();\n          \n          \n            \n            \t\tassertThat(listeners).filteredOn(UnusedTestExecutionListener.class::isInstance).isEmpty();", "author": "marcphilipp", "createdAt": "2020-02-14T19:23:11Z", "path": "platform-tests/src/test/java/org/junit/platform/launcher/core/LauncherFactoryTests.java", "diffHunk": "@@ -48,6 +50,25 @@ void noopTestExecutionListenerIsLoadedViaServiceApi() {\n \t\tassertThat(listener).isPresent();\n \t}\n \n+\t@Test\n+\tvoid unusedTestExecutionListenerIsNotLoadedViaServiceApi() {\n+\t\tDefaultLauncher launcher = (DefaultLauncher) LauncherFactory.create();\n+\t\tList<TestExecutionListener> listeners = launcher.getTestExecutionListenerRegistry().getTestExecutionListeners();\n+\n+\t\tOptional<TestExecutionListener> noop = listeners.stream().filter(\n+\t\t\tNoopTestExecutionListener.class::isInstance).findFirst();\n+\n+\t\tOptional<TestExecutionListener> unused = listeners.stream().filter(\n+\t\t\tUnusedTestExecutionListener.class::isInstance).findFirst();\n+\n+\t\tOptional<TestExecutionListener> anotherUnused = listeners.stream().filter(\n+\t\t\tAnotherUnusedTestExecutionListener.class::isInstance).findFirst();\n+\n+\t\tassertThat(unused).isEmpty();", "originalCommit": "3f3f3a4bb5086a2bd5b58bc674eadea52a16cccb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA1Nzc2Nw==", "url": "https://github.com/junit-team/junit5/pull/2183#discussion_r380057767", "bodyText": "This seems to update the list itself and can only be used once after which it'll filter the list leaving it blank\n\nFilter the iterable under test keeping only elements matching the given {@link Predicate}.", "author": "nishantvas", "createdAt": "2020-02-17T09:09:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYwMzI5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMyMTQwNQ==", "url": "https://github.com/junit-team/junit5/pull/2183#discussion_r380321405", "bodyText": "That Javadoc is misleading, it does not modify the supplied list.", "author": "marcphilipp", "createdAt": "2020-02-17T18:24:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYwMzI5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "3b60e2277500ac4b455f0e0d407e0c3b38e6e09d", "chunk": "diff --git a/platform-tests/src/test/java/org/junit/platform/launcher/core/LauncherFactoryTests.java b/platform-tests/src/test/java/org/junit/platform/launcher/core/LauncherFactoryTests.java\nindex e7e2ccb383..b22bf4f387 100644\n--- a/platform-tests/src/test/java/org/junit/platform/launcher/core/LauncherFactoryTests.java\n+++ b/platform-tests/src/test/java/org/junit/platform/launcher/core/LauncherFactoryTests.java\n\n@@ -55,18 +55,9 @@ class LauncherFactoryTests {\n \t\tDefaultLauncher launcher = (DefaultLauncher) LauncherFactory.create();\n \t\tList<TestExecutionListener> listeners = launcher.getTestExecutionListenerRegistry().getTestExecutionListeners();\n \n-\t\tOptional<TestExecutionListener> noop = listeners.stream().filter(\n-\t\t\tNoopTestExecutionListener.class::isInstance).findFirst();\n-\n-\t\tOptional<TestExecutionListener> unused = listeners.stream().filter(\n-\t\t\tUnusedTestExecutionListener.class::isInstance).findFirst();\n-\n-\t\tOptional<TestExecutionListener> anotherUnused = listeners.stream().filter(\n-\t\t\tAnotherUnusedTestExecutionListener.class::isInstance).findFirst();\n-\n-\t\tassertThat(unused).isEmpty();\n-\t\tassertThat(anotherUnused).isEmpty();\n-\t\tassertThat(noop).isPresent();\n+\t\tassertThat(listeners).filteredOn(AnotherUnusedTestExecutionListener.class::isInstance).isEmpty();\n+\t\tassertThat(listeners).filteredOn(UnusedTestExecutionListener.class::isInstance).isEmpty();\n+\t\tassertThat(listeners).filteredOn(NoopTestExecutionListener.class::isInstance).isNotEmpty();\n \t}\n \n \t@Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYwMzc4MQ==", "url": "https://github.com/junit-team/junit5/pull/2183#discussion_r379603781", "bodyText": "\u2b55\ufe0f I think we should write a unit test for this class now. It should probably have existed earlier. \ud83d\ude09", "author": "marcphilipp", "createdAt": "2020-02-14T19:24:18Z", "path": "junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassNameFilterUtil.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.commons.util;\n+\n+import static org.apiguardian.api.API.Status.INTERNAL;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.function.Supplier;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import org.apiguardian.api.API;\n+\n+/**\n+ * Class-related predicate holder used by execution listener, execution condition predicates\n+ *\n+ * <h3>DISCLAIMER</h3>\n+ *\n+ * <p>These utilities are intended solely for usage within the JUnit framework\n+ * itself. <strong>Any usage by external parties is not supported.</strong>\n+ * Use at your own risk!\n+ *\n+ */\n+@API(status = INTERNAL, since = \"5.5\")\n+public class ClassNameFilterUtil {", "originalCommit": "3f3f3a4bb5086a2bd5b58bc674eadea52a16cccb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDEyOTU5Nw==", "url": "https://github.com/junit-team/junit5/pull/2183#discussion_r380129597", "bodyText": "Added UnitTests for the class", "author": "nishantvas", "createdAt": "2020-02-17T11:30:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYwMzc4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "c88906fe3067c24e8e3dcdc1fdd4a4027e401f58", "chunk": "diff --git a/junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassNameFilterUtil.java b/junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassNameFilterUtil.java\nindex 11397fe355..0a806cd196 100644\n--- a/junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassNameFilterUtil.java\n+++ b/junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassNameFilterUtil.java\n\n@@ -13,9 +13,9 @@ package org.junit.platform.commons.util;\n import static org.apiguardian.api.API.Status.INTERNAL;\n \n import java.util.Arrays;\n+import java.util.List;\n import java.util.Optional;\n import java.util.function.Predicate;\n-import java.util.function.Supplier;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n"}}, {"oid": "c88906fe3067c24e8e3dcdc1fdd4a4027e401f58", "url": "https://github.com/junit-team/junit5/commit/c88906fe3067c24e8e3dcdc1fdd4a4027e401f58", "message": "Add Unittests for ClassNameFilterUtil, documentations, more review comments", "committedDate": "2020-02-17T11:28:03Z", "type": "commit"}, {"oid": "4828b0236ac35db1d4f4078ae3d9e0f8ca59d2be", "url": "https://github.com/junit-team/junit5/commit/4828b0236ac35db1d4f4078ae3d9e0f8ca59d2be", "message": "@Since 5.7", "committedDate": "2020-02-17T11:31:02Z", "type": "commit"}, {"oid": "2fd50015337e3aa3d1d30cdb2eaf9842aa93a014", "url": "https://github.com/junit-team/junit5/commit/2fd50015337e3aa3d1d30cdb2eaf9842aa93a014", "message": "Format managed for parameterized test", "committedDate": "2020-02-17T11:36:53Z", "type": "commit"}, {"oid": "119d9c84936a8c3ca2c1d864b914e7f7f0d7ae55", "url": "https://github.com/junit-team/junit5/commit/119d9c84936a8c3ca2c1d864b914e7f7f0d7ae55", "message": "Merge branches '#2181' and 'master' of https://github.com/nishantvas/junit5 into #2181", "committedDate": "2020-02-17T12:23:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMyNDM4MQ==", "url": "https://github.com/junit-team/junit5/pull/2183#discussion_r380324381", "bodyText": "Sorry, this is probably a matter of taste but I'd rather see you reverting this formatting change.", "author": "marcphilipp", "createdAt": "2020-02-17T18:35:18Z", "path": "platform-tests/src/test/java/org/junit/platform/commons/util/ClassNameFilterUtilTests.java", "diffHunk": "@@ -41,103 +41,119 @@\n @TestInstance(Lifecycle.PER_CLASS)\n class ClassNameFilterUtilTests {\n \n+\t//@formatter:off", "originalCommit": "2fd50015337e3aa3d1d30cdb2eaf9842aa93a014", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM3NDM2NQ==", "url": "https://github.com/junit-team/junit5/pull/2183#discussion_r380374365", "bodyText": "Revert to keeping the formatter off to methods? Or remove from tests altogether?\nI'm perfectly fine with either", "author": "nishantvas", "createdAt": "2020-02-17T21:40:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMyNDM4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ5OTkwMw==", "url": "https://github.com/junit-team/junit5/pull/2183#discussion_r380499903", "bodyText": "Yes, please keep it's scope smaller. It should not extend beyond a method body.", "author": "marcphilipp", "createdAt": "2020-02-18T07:38:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMyNDM4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU4NDU2Nw==", "url": "https://github.com/junit-team/junit5/pull/2183#discussion_r380584567", "bodyText": "Makes sense... Will update", "author": "nishantvas", "createdAt": "2020-02-18T10:27:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMyNDM4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "3b60e2277500ac4b455f0e0d407e0c3b38e6e09d", "chunk": "diff --git a/platform-tests/src/test/java/org/junit/platform/commons/util/ClassNameFilterUtilTests.java b/platform-tests/src/test/java/org/junit/platform/commons/util/ClassNameFilterUtilTests.java\nindex f4af927a1a..1fff417b88 100644\n--- a/platform-tests/src/test/java/org/junit/platform/commons/util/ClassNameFilterUtilTests.java\n+++ b/platform-tests/src/test/java/org/junit/platform/commons/util/ClassNameFilterUtilTests.java\n\n@@ -42,130 +39,102 @@ import org.junit.platform.launcher.TestExecutionListener;\n class ClassNameFilterUtilTests {\n \n \t//@formatter:off\n-\tStream<Arguments> alwaysEnabledConditions() {\n-\t\treturn Stream.of(\n-\t\t\t\targuments(\"org.junit.jupiter.*\"),\n-\t\t\t\targuments(\"org.junit.platform.*.NonExistentClass\"),\n-\t\t\t\targuments(\"*.NonExistentClass*\"),\n-\t\t\t\targuments(\"*NonExistentClass*\"),\n-\t\t\t\targuments(\"AExecutionConditionClass, BExecutionConditionClass\"));\n-\t}\n-\n-\t@MethodSource\n+\t@ValueSource(strings = {\n+\t\t\t\"org.junit.jupiter.*\",\n+\t\t\t\"org.junit.platform.*.NonExistentClass\",\n+\t\t\t\"*.NonExistentClass*\",\n+\t\t\t\"*NonExistentClass*\",\n+\t\t\t\"AExecutionConditionClass, BExecutionConditionClass\"\n+\t})\n+\t//@formatter:on\n \t@ParameterizedTest\n \tvoid alwaysEnabledConditions(String pattern) {\n \t\tList<? extends ExecutionCondition> executionConditions = asList(new AExecutionConditionClass(),\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnew BExecutionConditionClass());\n-\t\tassertThat(executionConditions)\n-\t\t\t\t.filteredOn(\n-\t\t\t\t\t\t(Predicate<ExecutionCondition>)\n-\t\t\t\tClassNameFilterUtil.filterForClassName(pattern))\n-\t\t\t\t.isNotEmpty();\n+\t\t\tnew BExecutionConditionClass());\n+\t\tassertThat(executionConditions).filteredOn(\n+\t\t\t(Predicate<ExecutionCondition>) ClassNameFilterUtil.filterForClassName(pattern)).isNotEmpty();\n \t}\n \n-\tStream<Arguments> alwaysDisabledConditions() {\n-\n-\t\treturn Stream.of(\n-\t\t\t\targuments(\"org.junit.platform.*\"),\n-\t\t\t\targuments(\"*.platform.*\"),\n-\t\t\t\targuments(\"*\"),\n-\t\t\t\targuments(\"*AExecutionConditionClass, *BExecutionConditionClass\"),\n-\t\t\t\targuments(\"*ExecutionConditionClass\"));\n-\t}\n-\n-\t@MethodSource\n+\t//@formatter:off\n+\t@ValueSource(strings = {\n+\t\t\t\"org.junit.platform.*\",\n+\t\t\t\"*.platform.*\",\n+\t\t\t\"*\",\n+\t\t\t\"*AExecutionConditionClass, *BExecutionConditionClass\",\n+\t\t\t\"*ExecutionConditionClass\"\n+\t})\n+\t//@formatter:on\n \t@ParameterizedTest\n \tvoid alwaysDisabledConditions(String pattern) {\n \t\tList<? extends ExecutionCondition> executionConditions = asList(new AExecutionConditionClass(),\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnew BExecutionConditionClass());\n-\t\tassertThat(executionConditions)\n-\t\t\t\t.filteredOn(\n-\t\t\t\t\t\t(Predicate<ExecutionCondition>)\n-\t\t\t\t\t\t\t\tClassNameFilterUtil.filterForClassName(pattern))\n-\t\t\t\t.isEmpty();\n-\t}\n-\n-\tStream<Arguments> alwaysEnabledListeners() {\n-\t\treturn Stream.of(\n-\t\t\t\targuments(\"org.junit.jupiter.*\"),\n-\t\t\t\targuments(\"org.junit.platform.*.NonExistentClass\"),\n-\t\t\t\targuments(\"*.NonExistentClass*\"),\n-\t\t\t\targuments(\"*NonExistentClass*\"),\n-\t\t\t\targuments(\"ATestExecutionListenerClass, BTestExecutionListenerClass\"));\n+\t\t\tnew BExecutionConditionClass());\n+\t\tassertThat(executionConditions).filteredOn(\n+\t\t\t(Predicate<ExecutionCondition>) ClassNameFilterUtil.filterForClassName(pattern)).isEmpty();\n \t}\n \n-\t@MethodSource\n+\t//@formatter:off\n+\t@ValueSource(strings = {\n+\t\t\t\"org.junit.jupiter.*\",\n+\t\t\t\"org.junit.platform.*.NonExistentClass\",\n+\t\t\t\"*.NonExistentClass*\",\n+\t\t\t\"*NonExistentClass*\",\n+\t\t\t\"ATestExecutionListenerClass, BTestExecutionListenerClass\"\n+\t})\n+\t//@formatter:on\n \t@ParameterizedTest\n \tvoid alwaysEnabledListeners(String pattern) {\n \t\tList<? extends TestExecutionListener> executionConditions = asList(new ATestExecutionListenerClass(),\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnew BTestExecutionListenerClass());\n-\t\tassertThat(executionConditions)\n-\t\t\t\t.filteredOn(\n-\t\t\t\t\t\t(Predicate<TestExecutionListener>)\n-\t\t\t\t\t\t\t\tClassNameFilterUtil.filterForClassName(pattern))\n-\t\t\t\t.isNotEmpty();\n+\t\t\tnew BTestExecutionListenerClass());\n+\t\tassertThat(executionConditions).filteredOn(\n+\t\t\t(Predicate<TestExecutionListener>) ClassNameFilterUtil.filterForClassName(pattern)).isNotEmpty();\n \t}\n \n-\tStream<Arguments> alwaysDisabledListeners() {\n-\t\treturn Stream.of(\n-\t\t\t\targuments(\"org.junit.platform.*\"),\n-\t\t\t\targuments(\"*.platform.*\"),\n-\t\t\t\targuments(\"*\"),\n-\t\t\t\targuments(\"*ATestExecutionListenerClass, *BTestExecutionListenerClass\"),\n-\t\t\t\targuments(\"*TestExecutionListenerClass\"));\n-\t}\n-\n-\t@MethodSource\n+\t//@formatter:off\n+\t@ValueSource(strings = {\n+\t\t\t\"org.junit.platform.*\",\n+\t\t\t\"*.platform.*\",\n+\t\t\t\"*\",\n+\t\t\t\"*ATestExecutionListenerClass, *BTestExecutionListenerClass\",\n+\t\t\t\"*TestExecutionListenerClass\"\n+\t})\n+\t//@formatter:on\n \t@ParameterizedTest\n \tvoid alwaysDisabledListeners(String pattern) {\n \t\tList<? extends TestExecutionListener> executionConditions = asList(new ATestExecutionListenerClass(),\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnew BTestExecutionListenerClass());\n-\t\tassertThat(executionConditions)\n-\t\t\t\t.filteredOn(\n-\t\t\t\t\t\t(Predicate<TestExecutionListener>)\n-\t\t\t\t\t\t\t\tClassNameFilterUtil.filterForClassName(pattern))\n-\t\t\t\t.isEmpty();\n+\t\t\tnew BTestExecutionListenerClass());\n+\t\tassertThat(executionConditions).filteredOn(\n+\t\t\t(Predicate<TestExecutionListener>) ClassNameFilterUtil.filterForClassName(pattern)).isEmpty();\n \t}\n \n-\tStream<Arguments> alwaysEnabledClass() {\n-\t\treturn Stream.of(\n-\t\t\t\targuments(\"org.junit.jupiter.*\"),\n-\t\t\t\targuments(\"org.junit.platform.*.NonExistentClass\"),\n-\t\t\t\targuments(\"*.NonExistentClass*\"),\n-\t\t\t\targuments(\"*NonExistentClass*\"),\n-\t\t\t\targuments(\"AVanillaEmpty, BVanillaEmpty\"));\n-\t}\n-\n-\t@MethodSource\n+\t//@formatter:off\n+\t@ValueSource(strings = {\n+\t\t\t\"org.junit.jupiter.*\",\n+\t\t\t\"org.junit.platform.*.NonExistentClass\",\n+\t\t\t\"*.NonExistentClass*\",\n+\t\t\t\"*NonExistentClass*\",\n+\t\t\t\"AVanillaEmpty, BVanillaEmpty\"\n+\t})\n+\t//@formatter:on\n \t@ParameterizedTest\n \tvoid alwaysEnabledClass(String pattern) {\n \t\tList<Object> executionConditions = asList(new AVanillaEmpty(), new BVanillaEmpty());\n-\t\tassertThat(executionConditions)\n-\t\t\t\t.filteredOn(\n-\t\t\t\t\t\t(Predicate<Object>)\n-\t\t\t\t\t\t\t\tClassNameFilterUtil.filterForClassName(pattern))\n-\t\t\t\t.isNotEmpty();\n-\t}\n-\n-\tStream<Arguments> alwaysDisabledClass() {\n-\t\treturn Stream.of(\n-\t\t\t\targuments(\"org.junit.platform.*\"),\n-\t\t\t\targuments(\"*.platform.*\"),\n-\t\t\t\targuments(\"*\"),\n-\t\t\t\targuments(\"*AVanillaEmpty, *BVanillaEmpty\"),\n-\t\t\t\targuments(\"*VanillaEmpty\"));\n+\t\tassertThat(executionConditions).filteredOn(\n+\t\t\t(Predicate<Object>) ClassNameFilterUtil.filterForClassName(pattern)).isNotEmpty();\n \t}\n \n-\t@MethodSource\n+\t//@formatter:off\n+\t@ValueSource(strings = {\n+\t\t\t\"org.junit.platform.*\",\n+\t\t\t\"*.platform.*\",\n+\t\t\t\"*\",\n+\t\t\t\"*AVanillaEmpty, *BVanillaEmpty\",\n+\t\t\t\"*VanillaEmpty\"\n+\t})\n+\t//@formatter:on\n \t@ParameterizedTest\n \tvoid alwaysDisabledClass(String pattern) {\n-\t\t//@formatter:off\n \t\tList<Object> executionConditions = asList(new AVanillaEmpty(), new BVanillaEmpty());\n-\t\tassertThat(executionConditions)\n-\t\t\t\t.filteredOn(\n-\t\t\t\t\t\t(Predicate<Object>)\n-\t\t\t\t\t\t\t\tClassNameFilterUtil.filterForClassName(pattern))\n-\t\t\t\t.isEmpty();\n+\t\tassertThat(executionConditions).filteredOn(\n+\t\t\t(Predicate<Object>) ClassNameFilterUtil.filterForClassName(pattern)).isEmpty();\n \t}\n-\t//@formatter:on\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUwMDE4Ng==", "url": "https://github.com/junit-team/junit5/pull/2183#discussion_r380500186", "bodyText": "I'd rather use @ValueSource(strings = {}) for these tests.", "author": "marcphilipp", "createdAt": "2020-02-18T07:39:09Z", "path": "platform-tests/src/test/java/org/junit/platform/commons/util/ClassNameFilterUtilTests.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.commons.util;\n+\n+import static java.util.Arrays.asList;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.params.provider.Arguments.arguments;\n+\n+import java.util.List;\n+import java.util.function.Predicate;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.api.TestInstance.Lifecycle;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.junit.platform.commons.util.classes.AExecutionConditionClass;\n+import org.junit.platform.commons.util.classes.ATestExecutionListenerClass;\n+import org.junit.platform.commons.util.classes.AVanillaEmpty;\n+import org.junit.platform.commons.util.classes.BExecutionConditionClass;\n+import org.junit.platform.commons.util.classes.BTestExecutionListenerClass;\n+import org.junit.platform.commons.util.classes.BVanillaEmpty;\n+import org.junit.platform.launcher.TestExecutionListener;\n+\n+/**\n+ * Unit tests for {@link ClassNameFilterUtil}.\n+ *\n+ * @since 5.7\n+ */\n+@SuppressWarnings({ \"unchecked\", \"unused\" })\n+@TestInstance(Lifecycle.PER_CLASS)\n+class ClassNameFilterUtilTests {\n+\n+\t//@formatter:off\n+\tStream<Arguments> alwaysEnabledConditions() {\n+\t\treturn Stream.of(\n+\t\t\t\targuments(\"org.junit.jupiter.*\"),\n+\t\t\t\targuments(\"org.junit.platform.*.NonExistentClass\"),\n+\t\t\t\targuments(\"*.NonExistentClass*\"),\n+\t\t\t\targuments(\"*NonExistentClass*\"),\n+\t\t\t\targuments(\"AExecutionConditionClass, BExecutionConditionClass\"));\n+\t}\n+\n+\t@MethodSource", "originalCommit": "2fd50015337e3aa3d1d30cdb2eaf9842aa93a014", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU4NDY5Mg==", "url": "https://github.com/junit-team/junit5/pull/2183#discussion_r380584692", "bodyText": "Not sure why I didn't think of that.", "author": "nishantvas", "createdAt": "2020-02-18T10:27:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUwMDE4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "3b60e2277500ac4b455f0e0d407e0c3b38e6e09d", "chunk": "diff --git a/platform-tests/src/test/java/org/junit/platform/commons/util/ClassNameFilterUtilTests.java b/platform-tests/src/test/java/org/junit/platform/commons/util/ClassNameFilterUtilTests.java\nindex f4af927a1a..1fff417b88 100644\n--- a/platform-tests/src/test/java/org/junit/platform/commons/util/ClassNameFilterUtilTests.java\n+++ b/platform-tests/src/test/java/org/junit/platform/commons/util/ClassNameFilterUtilTests.java\n\n@@ -12,18 +12,15 @@ package org.junit.platform.commons.util;\n \n import static java.util.Arrays.asList;\n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.junit.jupiter.params.provider.Arguments.arguments;\n \n import java.util.List;\n import java.util.function.Predicate;\n-import java.util.stream.Stream;\n \n import org.junit.jupiter.api.TestInstance;\n import org.junit.jupiter.api.TestInstance.Lifecycle;\n import org.junit.jupiter.api.extension.ExecutionCondition;\n import org.junit.jupiter.params.ParameterizedTest;\n-import org.junit.jupiter.params.provider.Arguments;\n-import org.junit.jupiter.params.provider.MethodSource;\n+import org.junit.jupiter.params.provider.ValueSource;\n import org.junit.platform.commons.util.classes.AExecutionConditionClass;\n import org.junit.platform.commons.util.classes.ATestExecutionListenerClass;\n import org.junit.platform.commons.util.classes.AVanillaEmpty;\n"}}, {"oid": "3b60e2277500ac4b455f0e0d407e0c3b38e6e09d", "url": "https://github.com/junit-team/junit5/commit/3b60e2277500ac4b455f0e0d407e0c3b38e6e09d", "message": "Update formatting for tests", "committedDate": "2020-02-18T10:38:17Z", "type": "commit"}, {"oid": "31739a2a5ed826caa4d66368dd379576547ffd96", "url": "https://github.com/junit-team/junit5/commit/31739a2a5ed826caa4d66368dd379576547ffd96", "message": "Polish contribution", "committedDate": "2020-03-28T16:58:18Z", "type": "commit"}, {"oid": "8be53541ed2d3d45e4486ece8eb48f43d0aaf56d", "url": "https://github.com/junit-team/junit5/commit/8be53541ed2d3d45e4486ece8eb48f43d0aaf56d", "message": "Document #2181 in release notes", "committedDate": "2020-03-28T17:01:22Z", "type": "commit"}, {"oid": "6d26467e044950f7bce8b065bcbc6e994542970f", "url": "https://github.com/junit-team/junit5/commit/6d26467e044950f7bce8b065bcbc6e994542970f", "message": "More polishing", "committedDate": "2020-03-29T09:08:40Z", "type": "commit"}]}