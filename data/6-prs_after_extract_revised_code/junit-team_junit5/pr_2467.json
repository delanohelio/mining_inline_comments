{"pr_number": 2467, "pr_title": "More straightforward usage of Optional", "pr_createdAt": "2020-10-29T06:42:00Z", "pr_url": "https://github.com/junit-team/junit5/pull/2467", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI3NDE1OA==", "url": "https://github.com/junit-team/junit5/pull/2467#discussion_r515274158", "bodyText": "Why not use flatMap here?", "author": "marcphilipp", "createdAt": "2020-10-30T17:44:13Z", "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/extension/DisabledCondition.java", "diffHunk": "@@ -39,15 +39,16 @@\n \t */\n \t@Override\n \tpublic ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext context) {\n-\t\tOptional<AnnotatedElement> element = context.getElement();\n-\t\tOptional<Disabled> disabled = findAnnotation(element, Disabled.class);\n-\t\tif (disabled.isPresent()) {\n-\t\t\tString reason = disabled.map(Disabled::value).filter(StringUtils::isNotBlank).orElseGet(\n-\t\t\t\t() -> element.get() + \" is @Disabled\");\n-\t\t\treturn ConditionEvaluationResult.disabled(reason);\n-\t\t}\n-\n-\t\treturn ENABLED;\n+\t\tAnnotatedElement element = context.getElement().orElse(null);\n+\t\t// @formatter:off\n+\t\treturn findAnnotation(element, Disabled.class)", "originalCommit": "83fb22c7aab91eb8954e792054956ba66b9afe0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ3Njc0OA==", "url": "https://github.com/junit-team/junit5/pull/2467#discussion_r515476748", "bodyText": "Did you mean like this?\nreturn context.getElement()\n\t.flatMap(element ->\n\t\tfindAnnotation(element, Ignore.class)\n\t\t\t.map(annotation -> Optional.of(annotation)\n\t\t\t\t.map(Ignore::value)\n\t\t\t\t.filter(StringUtils::isNotBlank)\n\t\t\t\t.orElseGet(() -> element + \" is disabled via @org.junit.Ignore\"))\n\t\t\t.map(ConditionEvaluationResult::disabled))\n\t.orElse(ENABLED);\nThat's like callback hell to my mind", "author": "yorlov", "createdAt": "2020-10-31T09:20:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI3NDE1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY4NzQ0NQ==", "url": "https://github.com/junit-team/junit5/pull/2467#discussion_r519687445", "bodyText": "I guess the key question here is why don't you use .flatMap(...) instead of .map(annotation -> Optional.of(annotation)?", "author": "vlsi", "createdAt": "2020-11-09T10:03:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI3NDE1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ3NjgzMQ==", "url": "https://github.com/junit-team/junit5/pull/2467#discussion_r521476831", "bodyText": "That's like callback hell to my mind\n\nTo make it easier to read, you could extract some methods \ud83d\ude09 (e.g. the part that gets the disabled reason out of the annotation)", "author": "juliette-derancourt", "createdAt": "2020-11-11T16:24:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI3NDE1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA2ODQ4Mg==", "url": "https://github.com/junit-team/junit5/pull/2467#discussion_r531068482", "bodyText": "@yorlov So, what do you say? :)\nMaybe something like that would be a trade-off:\nConditionEvaluationResult evaluateExecutionCondition(ExtensionContext context) {\n\treturn context.getElement()\n\t\t\t.flatMap(element -> findAnnotation(element, Disabled.class)\n\t\t\t\t\t.map(annotation -> getReason(element, annotation))\n\t\t\t\t\t.map(ConditionEvaluationResult::disabled))\n\t\t\t.orElse(ENABLED);\n}\n\nprivate String getReason(AnnotatedElement element, Disabled disabled) {\n\treturn Optional.of(disabled)\n\t\t\t.map(Disabled::value)\n\t\t\t.filter(StringUtils::isNotBlank)\n\t\t\t.orElseGet(() -> element + \" is @Disabled\");\n}", "author": "juliette-derancourt", "createdAt": "2020-11-26T14:33:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI3NDE1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA3MzMzNw==", "url": "https://github.com/junit-team/junit5/pull/2467#discussion_r531073337", "bodyText": "https://frameweb.com/article/this-japanese-house-was-entirely-built-without-a-single-nail\n...\n\"without a single if\" :)", "author": "vlsi", "createdAt": "2020-11-26T14:41:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI3NDE1OA=="}], "type": "inlineReview", "revised_code": {"commit": "00d9413c08a1f007090206f8b384a3adc8ade372", "chunk": "diff --git a/junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/extension/DisabledCondition.java b/junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/extension/DisabledCondition.java\nindex 1194904fec..2d9169e7fa 100644\n--- a/junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/extension/DisabledCondition.java\n+++ b/junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/extension/DisabledCondition.java\n\n@@ -30,25 +30,25 @@ import org.junit.platform.commons.util.StringUtils;\n  */\n class DisabledCondition implements ExecutionCondition {\n \n-\tprivate static final ConditionEvaluationResult ENABLED = ConditionEvaluationResult.enabled(\n-\t\t\"@Disabled is not present\");\n-\n-\t/**\n-\t * Containers/tests are disabled if {@code @Disabled} is present on the test\n-\t * class or method.\n-\t */\n-\t@Override\n-\tpublic ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext context) {\n-\t\tAnnotatedElement element = context.getElement().orElse(null);\n-\t\t// @formatter:off\n-\t\treturn findAnnotation(element, Disabled.class)\n-\t\t\t\t.map(disabled -> Optional.of(disabled)\n-\t\t\t\t\t\t.map(Disabled::value)\n-\t\t\t\t\t\t.filter(StringUtils::isNotBlank)\n-\t\t\t\t\t\t.orElseGet(() -> element + \" is @Disabled\"))\n-\t\t\t\t.map(ConditionEvaluationResult::disabled)\n-\t\t\t\t.orElse(ENABLED);\n-\t\t// @formatter:on\n-\t}\n+    private static final ConditionEvaluationResult ENABLED = ConditionEvaluationResult.enabled(\n+            \"@Disabled is not present\");\n+\n+    /**\n+     * Containers/tests are disabled if {@code @Disabled} is present on the test\n+     * class or method.\n+     */\n+    @Override\n+    public ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext context) {\n+        AnnotatedElement element = context.getElement().orElse(null);\n+        // @formatter:off\n+        return findAnnotation(element, Disabled.class)\n+                .map(disabled -> Optional.of(disabled)\n+                        .map(Disabled::value)\n+                        .filter(StringUtils::isNotBlank)\n+                        .orElseGet(() -> element + \" is @Disabled\"))\n+                .map(ConditionEvaluationResult::disabled)\n+                .orElse(ENABLED);\n+        // @formatter:on\n+    }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU0MDcyOA==", "url": "https://github.com/junit-team/junit5/pull/2467#discussion_r515540728", "bodyText": "Why the orElse?", "author": "juliette-derancourt", "createdAt": "2020-10-31T21:18:20Z", "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/extension/DisabledCondition.java", "diffHunk": "@@ -39,15 +39,16 @@\n \t */\n \t@Override\n \tpublic ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext context) {\n-\t\tOptional<AnnotatedElement> element = context.getElement();\n-\t\tOptional<Disabled> disabled = findAnnotation(element, Disabled.class);\n-\t\tif (disabled.isPresent()) {\n-\t\t\tString reason = disabled.map(Disabled::value).filter(StringUtils::isNotBlank).orElseGet(\n-\t\t\t\t() -> element.get() + \" is @Disabled\");\n-\t\t\treturn ConditionEvaluationResult.disabled(reason);\n-\t\t}\n-\n-\t\treturn ENABLED;\n+\t\tAnnotatedElement element = context.getElement().orElse(null);", "originalCommit": "83fb22c7aab91eb8954e792054956ba66b9afe0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU0MzY2Nw==", "url": "https://github.com/junit-team/junit5/pull/2467#discussion_r515543667", "bodyText": "Because\n.orElseGet(() -> element.get() + \" is @Disabled\"))\nlook ugly imho and IDE highlights element.get() as possible nullability problem", "author": "yorlov", "createdAt": "2020-10-31T21:48:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU0MDcyOA=="}], "type": "inlineReview", "revised_code": {"commit": "00d9413c08a1f007090206f8b384a3adc8ade372", "chunk": "diff --git a/junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/extension/DisabledCondition.java b/junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/extension/DisabledCondition.java\nindex 1194904fec..2d9169e7fa 100644\n--- a/junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/extension/DisabledCondition.java\n+++ b/junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/extension/DisabledCondition.java\n\n@@ -30,25 +30,25 @@ import org.junit.platform.commons.util.StringUtils;\n  */\n class DisabledCondition implements ExecutionCondition {\n \n-\tprivate static final ConditionEvaluationResult ENABLED = ConditionEvaluationResult.enabled(\n-\t\t\"@Disabled is not present\");\n-\n-\t/**\n-\t * Containers/tests are disabled if {@code @Disabled} is present on the test\n-\t * class or method.\n-\t */\n-\t@Override\n-\tpublic ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext context) {\n-\t\tAnnotatedElement element = context.getElement().orElse(null);\n-\t\t// @formatter:off\n-\t\treturn findAnnotation(element, Disabled.class)\n-\t\t\t\t.map(disabled -> Optional.of(disabled)\n-\t\t\t\t\t\t.map(Disabled::value)\n-\t\t\t\t\t\t.filter(StringUtils::isNotBlank)\n-\t\t\t\t\t\t.orElseGet(() -> element + \" is @Disabled\"))\n-\t\t\t\t.map(ConditionEvaluationResult::disabled)\n-\t\t\t\t.orElse(ENABLED);\n-\t\t// @formatter:on\n-\t}\n+    private static final ConditionEvaluationResult ENABLED = ConditionEvaluationResult.enabled(\n+            \"@Disabled is not present\");\n+\n+    /**\n+     * Containers/tests are disabled if {@code @Disabled} is present on the test\n+     * class or method.\n+     */\n+    @Override\n+    public ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext context) {\n+        AnnotatedElement element = context.getElement().orElse(null);\n+        // @formatter:off\n+        return findAnnotation(element, Disabled.class)\n+                .map(disabled -> Optional.of(disabled)\n+                        .map(Disabled::value)\n+                        .filter(StringUtils::isNotBlank)\n+                        .orElseGet(() -> element + \" is @Disabled\"))\n+                .map(ConditionEvaluationResult::disabled)\n+                .orElse(ENABLED);\n+        // @formatter:on\n+    }\n \n }\n"}}, {"oid": "00d9413c08a1f007090206f8b384a3adc8ade372", "url": "https://github.com/junit-team/junit5/commit/00d9413c08a1f007090206f8b384a3adc8ade372", "message": "More straightforward usage of Optional", "committedDate": "2020-11-09T09:57:15Z", "type": "forcePushed"}, {"oid": "ad4729377df63e6d58449ad1929ff02b85c591d4", "url": "https://github.com/junit-team/junit5/commit/ad4729377df63e6d58449ad1929ff02b85c591d4", "message": "More straightforward usage of Optional", "committedDate": "2020-11-09T10:10:28Z", "type": "forcePushed"}, {"oid": "5597d0eae8ee7303bcff8231416a142b6ec21947", "url": "https://github.com/junit-team/junit5/commit/5597d0eae8ee7303bcff8231416a142b6ec21947", "message": "More straightforward usage of Optional", "committedDate": "2020-11-12T07:43:55Z", "type": "forcePushed"}, {"oid": "49851e8c90f252f0f60ccf4763d3ef092996be61", "url": "https://github.com/junit-team/junit5/commit/49851e8c90f252f0f60ccf4763d3ef092996be61", "message": "More straightforward usage of Optional", "committedDate": "2020-11-26T15:26:54Z", "type": "forcePushed"}, {"oid": "031889d0a2a344384f1b846c1f806ce54cf4ef2d", "url": "https://github.com/junit-team/junit5/commit/031889d0a2a344384f1b846c1f806ce54cf4ef2d", "message": "More straightforward usage of Optional", "committedDate": "2020-11-26T15:46:51Z", "type": "commit"}, {"oid": "031889d0a2a344384f1b846c1f806ce54cf4ef2d", "url": "https://github.com/junit-team/junit5/commit/031889d0a2a344384f1b846c1f806ce54cf4ef2d", "message": "More straightforward usage of Optional", "committedDate": "2020-11-26T15:46:51Z", "type": "forcePushed"}]}