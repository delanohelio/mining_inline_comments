{"pr_number": 3312, "pr_title": "[STORM-3652] Last error not displayed in Topology summary storm ui", "pr_createdAt": "2020-07-21T00:23:45Z", "pr_url": "https://github.com/apache/storm/pull/3312", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc2NTM0NA==", "url": "https://github.com/apache/storm/pull/3312#discussion_r457765344", "bodyText": "The existing getComponentErrorInfo() method adds the remaining properties that the UI is expecting to properly render the error.  See topology-page-template.html", "author": "Crim", "createdAt": "2020-07-21T00:27:41Z", "path": "storm-webapp/src/main/java/org/apache/storm/daemon/ui/UIHelpers.java", "diffHunk": "@@ -1519,8 +1518,12 @@ private static Double nullToZero(Double value) {\n         result.put(\"executeLatency\", StatsUtil.floatStr(boltAggregateStats.get_execute_latency_ms()));\n         result.put(\"executed\", boltAggregateStats.get_executed());\n         result.put(\"processLatency\", StatsUtil.floatStr(boltAggregateStats.get_process_latency_ms()));\n+\n         ErrorInfo lastError = componentAggregateStats.get_last_error();\n         result.put(\"lastError\", Objects.isNull(lastError) ?  \"\" : getTruncatedErrorString(lastError.get_error()));\n+        if (!Objects.isNull(lastError)) {", "originalCommit": "9112081e59255325a0d4719fa8cf53811969110a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI1ODIzOA==", "url": "https://github.com/apache/storm/pull/3312#discussion_r467258238", "bodyText": "We can add a parameter to getComponentErrorInfo(xxx, boolean asLastError) and when it is lastError,\nif (asLastError) {\nresult.put(\"lastError\",getTruncatedErrorString)errorInfo.get_error()));  \n} else {\nresult.put(\"error\", errorInfo.get_error());\n}\n\nto avoid unnecessary results", "author": "Ethanlm", "createdAt": "2020-08-07T20:38:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc2NTM0NA=="}], "type": "inlineReview", "revised_code": {"commit": "47f6225030bae0f0d90055196ed89e684530b081", "chunk": "diff --git a/storm-webapp/src/main/java/org/apache/storm/daemon/ui/UIHelpers.java b/storm-webapp/src/main/java/org/apache/storm/daemon/ui/UIHelpers.java\nindex 8afe01bd3..ff8963e5e 100644\n--- a/storm-webapp/src/main/java/org/apache/storm/daemon/ui/UIHelpers.java\n+++ b/storm-webapp/src/main/java/org/apache/storm/daemon/ui/UIHelpers.java\n\n@@ -1520,9 +1533,11 @@ public class UIHelpers {\n         result.put(\"processLatency\", StatsUtil.floatStr(boltAggregateStats.get_process_latency_ms()));\n \n         ErrorInfo lastError = componentAggregateStats.get_last_error();\n-        result.put(\"lastError\", Objects.isNull(lastError) ?  \"\" : getTruncatedErrorString(lastError.get_error()));\n         if (!Objects.isNull(lastError)) {\n-            result.putAll(getComponentErrorInfo(lastError, config, topologyId));\n+            result.putAll(getComponentErrorInfo(lastError, config, topologyId, true));\n+        } else {\n+            // Maintain backwards compatibility in the API response by setting empty string value\n+            result.put(\"lastError\", \"\");\n         }\n         return result;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc2NTYyNQ==", "url": "https://github.com/apache/storm/pull/3312#discussion_r457765625", "bodyText": "Populates the thrift response with the last error for this bolt, if it exists.", "author": "Crim", "createdAt": "2020-07-21T00:28:48Z", "path": "storm-server/src/main/java/org/apache/storm/daemon/nimbus/Nimbus.java", "diffHunk": "@@ -4363,6 +4363,7 @@ private void addBoltAggStats(TopologyPageInfo topoPageInfo, StormTopology topolo\n                 CommonAggregateStats commonStats = entry.getValue().get_common_stats();", "originalCommit": "9112081e59255325a0d4719fa8cf53811969110a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "47f6225030bae0f0d90055196ed89e684530b081", "chunk": "diff --git a/storm-server/src/main/java/org/apache/storm/daemon/nimbus/Nimbus.java b/storm-server/src/main/java/org/apache/storm/daemon/nimbus/Nimbus.java\nindex 3198b5559..672ad58fe 100644\n--- a/storm-server/src/main/java/org/apache/storm/daemon/nimbus/Nimbus.java\n+++ b/storm-server/src/main/java/org/apache/storm/daemon/nimbus/Nimbus.java\n\n@@ -4363,7 +4367,6 @@ public class Nimbus implements Iface, Shutdownable, DaemonCommon {\n                 CommonAggregateStats commonStats = entry.getValue().get_common_stats();\n                 setResourcesDefaultIfNotSet(boltResources, entry.getKey(), topoConf);\n                 commonStats.set_resources_map(boltResources.get(entry.getKey()).toNormalizedMap());\n-                entry.getValue().set_last_error(stormClusterState.lastError(topoPageInfo.get_id(), entry.getKey()));\n             }\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgyNTg0Mw==", "url": "https://github.com/apache/storm/pull/3312#discussion_r459825843", "bodyText": "Added to make consistent with how other floats are returned.", "author": "Crim", "createdAt": "2020-07-24T02:34:43Z", "path": "storm-webapp/src/main/java/org/apache/storm/daemon/ui/UIHelpers.java", "diffHunk": "@@ -1488,16 +1487,21 @@ private static Double nullToZero(Double value) {\n      * @return getTopologySpoutAggStatsMap\n      */\n     private static Map<String, Object> getTopologySpoutAggStatsMap(ComponentAggregateStats componentAggregateStats,\n-                                                                   String spoutId) {\n+                                                                   String spoutId, Map<String, Object> config, String topologyId) {\n         Map<String, Object> result = new HashMap();\n         CommonAggregateStats commonStats = componentAggregateStats.get_common_stats();\n         result.putAll(getCommonAggStatsMap(commonStats));\n         result.put(\"spoutId\", spoutId);\n         result.put(\"encodedSpoutId\", Utils.urlEncodeUtf8(spoutId));\n         SpoutAggregateStats spoutAggregateStats = componentAggregateStats.get_specific_stats().get_spout();\n-        result.put(\"completeLatency\", spoutAggregateStats.get_complete_latency_ms());", "originalCommit": "34d65fe6742ea13a38493a8dbb0692fe90f444d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bdfce14a92b6f32c2c719521e543a9ef2726f1ec", "chunk": "diff --git a/storm-webapp/src/main/java/org/apache/storm/daemon/ui/UIHelpers.java b/storm-webapp/src/main/java/org/apache/storm/daemon/ui/UIHelpers.java\nindex 4b1ec8e20..8afe01bd3 100644\n--- a/storm-webapp/src/main/java/org/apache/storm/daemon/ui/UIHelpers.java\n+++ b/storm-webapp/src/main/java/org/apache/storm/daemon/ui/UIHelpers.java\n\n@@ -1487,21 +1487,16 @@ public class UIHelpers {\n      * @return getTopologySpoutAggStatsMap\n      */\n     private static Map<String, Object> getTopologySpoutAggStatsMap(ComponentAggregateStats componentAggregateStats,\n-                                                                   String spoutId, Map<String, Object> config, String topologyId) {\n+                                                                   String spoutId) {\n         Map<String, Object> result = new HashMap();\n         CommonAggregateStats commonStats = componentAggregateStats.get_common_stats();\n         result.putAll(getCommonAggStatsMap(commonStats));\n         result.put(\"spoutId\", spoutId);\n         result.put(\"encodedSpoutId\", Utils.urlEncodeUtf8(spoutId));\n         SpoutAggregateStats spoutAggregateStats = componentAggregateStats.get_specific_stats().get_spout();\n-        result.put(\"completeLatency\", StatsUtil.floatStr(spoutAggregateStats.get_complete_latency_ms()));\n+        result.put(\"completeLatency\", spoutAggregateStats.get_complete_latency_ms());\n         ErrorInfo lastError = componentAggregateStats.get_last_error();\n         result.put(\"lastError\", Objects.isNull(lastError) ?  \"\" : getTruncatedErrorString(lastError.get_error()));\n-\n-        if (!Objects.isNull(lastError)) {\n-            result.putAll(getComponentErrorInfo(lastError, config, topologyId));\n-        }\n-\n         return result;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI0Njk4Nw==", "url": "https://github.com/apache/storm/pull/3312#discussion_r467246987", "bodyText": "I believe the bug is here:\nit puts \"last-error\" in the stat (wrongly),\n\n  \n    \n      storm/storm-server/src/main/java/org/apache/storm/stats/StatsUtil.java\n    \n    \n         Line 663\n      in\n      e82b9a7\n    \n    \n    \n    \n\n        \n          \n           m.put(\"last-error\", getLastError(clusterState, topologyId, id)); \n        \n    \n  \n\n\nbut retrieves it with \"lastError\"\n\n  \n    \n      storm/storm-server/src/main/java/org/apache/storm/stats/StatsUtil.java\n    \n    \n         Line 1907\n      in\n      e82b9a7\n    \n    \n    \n    \n\n        \n          \n           stats.set_last_error((ErrorInfo) m.get(LAST_ERROR)); \n        \n    \n  \n\n\nThis is a translation error from clojure to java since in clojure (1.x):\nhttps://github.com/apache/storm/blob/1.x-branch/storm-core/src/clj/org/apache/storm/daemon/nimbus.clj#L2269\nhttps://github.com/apache/storm/blob/1.x-branch/storm-core/src/clj/org/apache/storm/stats.clj#L915", "author": "Ethanlm", "createdAt": "2020-08-07T20:10:37Z", "path": "storm-server/src/main/java/org/apache/storm/daemon/nimbus/Nimbus.java", "diffHunk": "@@ -4309,6 +4309,7 @@ private void addSpoutAggStats(TopologyPageInfo topoPageInfo, StormTopology topol\n                 CommonAggregateStats commonStats = entry.getValue().get_common_stats();\n                 setResourcesDefaultIfNotSet(spoutResources, entry.getKey(), topoConf);\n                 commonStats.set_resources_map(spoutResources.get(entry.getKey()).toNormalizedMap());\n+                entry.getValue().set_last_error(stormClusterState.lastError(topoPageInfo.get_id(), entry.getKey()));", "originalCommit": "34d65fe6742ea13a38493a8dbb0692fe90f444d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bdfce14a92b6f32c2c719521e543a9ef2726f1ec", "chunk": "diff --git a/storm-server/src/main/java/org/apache/storm/daemon/nimbus/Nimbus.java b/storm-server/src/main/java/org/apache/storm/daemon/nimbus/Nimbus.java\nindex 626d356a1..6de73a53c 100644\n--- a/storm-server/src/main/java/org/apache/storm/daemon/nimbus/Nimbus.java\n+++ b/storm-server/src/main/java/org/apache/storm/daemon/nimbus/Nimbus.java\n\n@@ -4309,7 +4313,6 @@ public class Nimbus implements Iface, Shutdownable, DaemonCommon {\n                 CommonAggregateStats commonStats = entry.getValue().get_common_stats();\n                 setResourcesDefaultIfNotSet(spoutResources, entry.getKey(), topoConf);\n                 commonStats.set_resources_map(spoutResources.get(entry.getKey()).toNormalizedMap());\n-                entry.getValue().set_last_error(stormClusterState.lastError(topoPageInfo.get_id(), entry.getKey()));\n             }\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI2MTk3Ng==", "url": "https://github.com/apache/storm/pull/3312#discussion_r467261976", "bodyText": "You can use simulatedTime https://github.com/apache/storm/blob/master/storm-client/src/jvm/org/apache/storm/utils/Time.java#L30.\nAnd then the check can be accurate.\nAlso please check if https://github.com/apache/storm/blob/master/docs/STORM-UI-REST-API.md#apiv1topologyid-get needs to be updated.", "author": "Ethanlm", "createdAt": "2020-08-07T20:48:59Z", "path": "storm-webapp/src/test/java/org/apache/storm/daemon/ui/UIHelpersTest.java", "diffHunk": "@@ -0,0 +1,543 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.storm.daemon.ui;\n+\n+import org.apache.storm.Config;\n+import org.apache.storm.Constants;\n+import org.apache.storm.generated.BoltAggregateStats;\n+import org.apache.storm.generated.CommonAggregateStats;\n+import org.apache.storm.generated.ComponentAggregateStats;\n+import org.apache.storm.generated.ErrorInfo;\n+import org.apache.storm.generated.SpecificAggregateStats;\n+import org.apache.storm.generated.SpoutAggregateStats;\n+import org.apache.storm.generated.TopologyPageInfo;\n+import org.apache.storm.generated.TopologyStats;\n+import org.json.simple.JSONValue;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+class UIHelpersTest {\n+    private static final String TOPOLOGY_ID = \"Test-Topology-Id\";\n+    private static final long TOPOLOGY_MESSAGE_TIMEOUT_SECS = 100L;\n+    private static final String WINDOW = \":all-time\";\n+\n+    /**\n+     * Default empty TopologyPageInfo instance to be extended in each test case.\n+     */\n+    private TopologyPageInfo topoPageInfo;\n+\n+    /**\n+     * Setups up bare minimum TopologyPageInfo instance such that we can pass to\n+     * UIHelpers.getTopologySummary() without it throwing a NPE.\n+     *\n+     * This should provide a base for which other tests can be written, but will\n+     * require populating additional values as needed for each test case.\n+     */\n+    @BeforeEach\n+    void setup() {\n+        // Create topology config and serialize to JSON.\n+        final Map<String, Object> topologyConfig = new HashMap<>();\n+        topologyConfig.put(Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS, TOPOLOGY_MESSAGE_TIMEOUT_SECS);\n+        final String topoConfigJson = JSONValue.toJSONString(topologyConfig);\n+\n+        // Create empty TopologyStats instance\n+        final TopologyStats topologyStats = new TopologyStats();\n+        topologyStats.set_window_to_emitted(new HashMap<>());\n+        topologyStats.set_window_to_transferred(new HashMap<>());\n+        topologyStats.set_window_to_acked(new HashMap<>());\n+        topologyStats.set_window_to_complete_latencies_ms(new HashMap<>());\n+        topologyStats.set_window_to_failed(new HashMap<>());\n+\n+        // Create empty AggregateStats instances.\n+        final Map<String,ComponentAggregateStats> idToSpoutAggStats = new HashMap<>();\n+\n+        final Map<String,ComponentAggregateStats> idToBoltAggStats = new HashMap<>();\n+\n+        // Build up TopologyPageInfo instance\n+        topoPageInfo = new TopologyPageInfo();\n+        topoPageInfo.set_topology_conf(topoConfigJson);\n+        topoPageInfo.set_id(TOPOLOGY_ID);\n+        topoPageInfo.set_topology_stats(topologyStats);\n+        topoPageInfo.set_id_to_spout_agg_stats(idToSpoutAggStats);\n+        topoPageInfo.set_id_to_bolt_agg_stats(idToBoltAggStats);\n+    }\n+\n+    /**\n+     * Very narrow test case to validate that 'last error' fields are populated for a bolt\n+     * with an error is present.\n+     */\n+    @Test\n+    void test_getTopologyBoltAggStatsMap_includesLastError() {\n+        // Define inputs\n+        final String expectedBoltId = \"MyBoltId\";\n+        final String expectedErrorMsg = \"This is my test error message\";\n+        final int expectedErrorTime = (int) TimeUnit.MILLISECONDS.toSeconds(System.currentTimeMillis());\n+        final int expectedErrorPort = 4321;\n+        final String expectedErrorHost = \"my.errored.host\";\n+\n+        // Define our Last Error\n+        final ErrorInfo expectedLastError = new ErrorInfo(expectedErrorMsg, expectedErrorTime);\n+        expectedLastError.set_port(expectedErrorPort);\n+        expectedLastError.set_host(expectedErrorHost);\n+\n+        // Build stats instance for our bolt\n+        final ComponentAggregateStats aggregateStats = buildBoltAggregateStatsBase();\n+        aggregateStats.set_last_error(expectedLastError);\n+        addBoltStats(expectedBoltId, aggregateStats);\n+\n+        // Call method under test.\n+        final Map<String, Object> result = UIHelpers.getTopologySummary(\n+            topoPageInfo,\n+            WINDOW,\n+            new HashMap<>(),\n+            \"spp\"\n+        );\n+\n+        // Validate\n+        assertNotNull(result, \"Should never return null\");\n+\n+        // Validate our Bolt result\n+        final Map<String, Object> boltResult = getBoltStatsFromTopologySummaryResult(result, expectedBoltId);\n+        assertNotNull(boltResult, \"Should have an entry for bolt\");\n+\n+        // Verify each piece\n+        assertEquals(expectedBoltId, boltResult.get(\"boltId\"));\n+        assertEquals(expectedBoltId, boltResult.get(\"encodedBoltId\"));\n+\n+        // Verify error\n+        assertEquals(expectedErrorMsg, boltResult.get(\"error\"));\n+        assertEquals(expectedErrorMsg, boltResult.get(\"lastError\"));\n+        assertEquals(expectedErrorPort, boltResult.get(\"errorPort\"));\n+        assertEquals(expectedErrorHost, boltResult.get(\"errorHost\"));\n+        assertEquals(expectedErrorTime, boltResult.get(\"errorTime\"));\n+\n+        // Fuzzy matching", "originalCommit": "34d65fe6742ea13a38493a8dbb0692fe90f444d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bdfce14a92b6f32c2c719521e543a9ef2726f1ec", "chunk": "diff --git a/storm-webapp/src/test/java/org/apache/storm/daemon/ui/UIHelpersTest.java b/storm-webapp/src/test/java/org/apache/storm/daemon/ui/UIHelpersTest.java\ndeleted file mode 100644\nindex c2bc54ab6..000000000\n--- a/storm-webapp/src/test/java/org/apache/storm/daemon/ui/UIHelpersTest.java\n+++ /dev/null\n\n@@ -1,543 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.storm.daemon.ui;\n-\n-import org.apache.storm.Config;\n-import org.apache.storm.Constants;\n-import org.apache.storm.generated.BoltAggregateStats;\n-import org.apache.storm.generated.CommonAggregateStats;\n-import org.apache.storm.generated.ComponentAggregateStats;\n-import org.apache.storm.generated.ErrorInfo;\n-import org.apache.storm.generated.SpecificAggregateStats;\n-import org.apache.storm.generated.SpoutAggregateStats;\n-import org.apache.storm.generated.TopologyPageInfo;\n-import org.apache.storm.generated.TopologyStats;\n-import org.json.simple.JSONValue;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n-\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.concurrent.TimeUnit;\n-\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertFalse;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-\n-class UIHelpersTest {\n-    private static final String TOPOLOGY_ID = \"Test-Topology-Id\";\n-    private static final long TOPOLOGY_MESSAGE_TIMEOUT_SECS = 100L;\n-    private static final String WINDOW = \":all-time\";\n-\n-    /**\n-     * Default empty TopologyPageInfo instance to be extended in each test case.\n-     */\n-    private TopologyPageInfo topoPageInfo;\n-\n-    /**\n-     * Setups up bare minimum TopologyPageInfo instance such that we can pass to\n-     * UIHelpers.getTopologySummary() without it throwing a NPE.\n-     *\n-     * This should provide a base for which other tests can be written, but will\n-     * require populating additional values as needed for each test case.\n-     */\n-    @BeforeEach\n-    void setup() {\n-        // Create topology config and serialize to JSON.\n-        final Map<String, Object> topologyConfig = new HashMap<>();\n-        topologyConfig.put(Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS, TOPOLOGY_MESSAGE_TIMEOUT_SECS);\n-        final String topoConfigJson = JSONValue.toJSONString(topologyConfig);\n-\n-        // Create empty TopologyStats instance\n-        final TopologyStats topologyStats = new TopologyStats();\n-        topologyStats.set_window_to_emitted(new HashMap<>());\n-        topologyStats.set_window_to_transferred(new HashMap<>());\n-        topologyStats.set_window_to_acked(new HashMap<>());\n-        topologyStats.set_window_to_complete_latencies_ms(new HashMap<>());\n-        topologyStats.set_window_to_failed(new HashMap<>());\n-\n-        // Create empty AggregateStats instances.\n-        final Map<String,ComponentAggregateStats> idToSpoutAggStats = new HashMap<>();\n-\n-        final Map<String,ComponentAggregateStats> idToBoltAggStats = new HashMap<>();\n-\n-        // Build up TopologyPageInfo instance\n-        topoPageInfo = new TopologyPageInfo();\n-        topoPageInfo.set_topology_conf(topoConfigJson);\n-        topoPageInfo.set_id(TOPOLOGY_ID);\n-        topoPageInfo.set_topology_stats(topologyStats);\n-        topoPageInfo.set_id_to_spout_agg_stats(idToSpoutAggStats);\n-        topoPageInfo.set_id_to_bolt_agg_stats(idToBoltAggStats);\n-    }\n-\n-    /**\n-     * Very narrow test case to validate that 'last error' fields are populated for a bolt\n-     * with an error is present.\n-     */\n-    @Test\n-    void test_getTopologyBoltAggStatsMap_includesLastError() {\n-        // Define inputs\n-        final String expectedBoltId = \"MyBoltId\";\n-        final String expectedErrorMsg = \"This is my test error message\";\n-        final int expectedErrorTime = (int) TimeUnit.MILLISECONDS.toSeconds(System.currentTimeMillis());\n-        final int expectedErrorPort = 4321;\n-        final String expectedErrorHost = \"my.errored.host\";\n-\n-        // Define our Last Error\n-        final ErrorInfo expectedLastError = new ErrorInfo(expectedErrorMsg, expectedErrorTime);\n-        expectedLastError.set_port(expectedErrorPort);\n-        expectedLastError.set_host(expectedErrorHost);\n-\n-        // Build stats instance for our bolt\n-        final ComponentAggregateStats aggregateStats = buildBoltAggregateStatsBase();\n-        aggregateStats.set_last_error(expectedLastError);\n-        addBoltStats(expectedBoltId, aggregateStats);\n-\n-        // Call method under test.\n-        final Map<String, Object> result = UIHelpers.getTopologySummary(\n-            topoPageInfo,\n-            WINDOW,\n-            new HashMap<>(),\n-            \"spp\"\n-        );\n-\n-        // Validate\n-        assertNotNull(result, \"Should never return null\");\n-\n-        // Validate our Bolt result\n-        final Map<String, Object> boltResult = getBoltStatsFromTopologySummaryResult(result, expectedBoltId);\n-        assertNotNull(boltResult, \"Should have an entry for bolt\");\n-\n-        // Verify each piece\n-        assertEquals(expectedBoltId, boltResult.get(\"boltId\"));\n-        assertEquals(expectedBoltId, boltResult.get(\"encodedBoltId\"));\n-\n-        // Verify error\n-        assertEquals(expectedErrorMsg, boltResult.get(\"error\"));\n-        assertEquals(expectedErrorMsg, boltResult.get(\"lastError\"));\n-        assertEquals(expectedErrorPort, boltResult.get(\"errorPort\"));\n-        assertEquals(expectedErrorHost, boltResult.get(\"errorHost\"));\n-        assertEquals(expectedErrorTime, boltResult.get(\"errorTime\"));\n-\n-        // Fuzzy matching\n-        assertTrue(((int) boltResult.get(\"errorLapsedSecs\")) >= 0);\n-        assertTrue(((int) boltResult.get(\"errorLapsedSecs\")) <= 10);\n-    }\n-\n-    /**\n-     * Very narrow test case to validate that 'last error' fields are NOT populated for a bolt\n-     * that does NOT have a last error associated.\n-     */\n-    @Test\n-    void test_getTopologyBoltAggStatsMap_hasNoLastError() {\n-        // Define inputs\n-        final String expectedBoltId = \"MyBoltId\";\n-\n-        // Build stats instance for our bolt\n-        final ComponentAggregateStats aggregateStats = buildBoltAggregateStatsBase();\n-        addBoltStats(expectedBoltId, aggregateStats);\n-\n-        // Call method under test.\n-        final Map<String, Object> result = UIHelpers.getTopologySummary(\n-            topoPageInfo,\n-            WINDOW,\n-            new HashMap<>(),\n-            \"spp\"\n-        );\n-\n-        // Validate\n-        assertNotNull(result, \"Should never return null\");\n-\n-        // Validate our Bolt result\n-        final Map<String, Object> boltResult = getBoltStatsFromTopologySummaryResult(result, expectedBoltId);\n-        assertNotNull(boltResult, \"Should have an entry for bolt\");\n-\n-        // Verify each piece\n-        assertEquals(expectedBoltId, boltResult.get(\"boltId\"));\n-        assertEquals(expectedBoltId, boltResult.get(\"encodedBoltId\"));\n-\n-        // Verify error fields are not populated.\n-        assertEquals(\"\", boltResult.get(\"lastError\"), \"Should have empty value\");\n-        assertFalse(boltResult.containsKey(\"error\"));\n-        assertFalse(boltResult.containsKey(\"errorPort\"));\n-        assertFalse(boltResult.containsKey(\"errorHost\"));\n-        assertFalse(boltResult.containsKey(\"errorTime\"));\n-        assertFalse(boltResult.containsKey(\"errorLapsedSecs\"));\n-    }\n-\n-    /**\n-     * A more general test case that a bolt's aggregate stats are\n-     * correctly populated into the resulting map.\n-     */\n-    @Test\n-    void test_getTopologyBoltAggStatsMap_generalFields() {\n-        // Define inputs\n-        final String expectedBoltId = \"MyBoltId\";\n-        final float expectedCapacity = 0.97f;\n-        final double expectedProcessLatency = 432.0D;\n-        final double expectedExecuteLatency = 122.0D;\n-        final long expectedExecuted = 153343L;\n-        final long expectedEmitted = 43234L;\n-        final long expectedAcked = 5553L;\n-        final long expectedFailed = 220L;\n-        final int expectedExecutors = 2;\n-        final int expectedTasks = 3;\n-        final long expectedTransferred = 3423423L;\n-        final double expectedOnMemoryHeap = 1024D;\n-        final double expectedOffMemoryHeap = 2048D;\n-        final double expectedCpuCorePercent = 75D;\n-\n-        // Build stats instance for our bolt\n-        final ComponentAggregateStats aggregateStats = buildBoltAggregateStatsBase();\n-\n-        // Common stats\n-        final CommonAggregateStats commonStats = aggregateStats.get_common_stats();\n-        commonStats.set_acked(expectedAcked);\n-        commonStats.set_emitted(expectedEmitted);\n-        commonStats.set_failed(expectedFailed);\n-        commonStats.set_num_executors(expectedExecutors);\n-        commonStats.set_num_tasks(expectedTasks);\n-        commonStats.set_transferred(expectedTransferred);\n-\n-        // Bolt stats\n-        final BoltAggregateStats boltStats = aggregateStats.get_specific_stats().get_bolt();\n-        boltStats.set_capacity(expectedCapacity);\n-        boltStats.set_execute_latency_ms(expectedExecuteLatency);\n-        boltStats.set_process_latency_ms(expectedProcessLatency);\n-        boltStats.set_executed(expectedExecuted);\n-\n-        // Build Resources Map\n-        final Map<String, Double> resourcesMap = new HashMap<>();\n-        resourcesMap.put(Constants.COMMON_ONHEAP_MEMORY_RESOURCE_NAME, expectedOnMemoryHeap);\n-        resourcesMap.put(Constants.COMMON_OFFHEAP_MEMORY_RESOURCE_NAME, expectedOffMemoryHeap);\n-        resourcesMap.put(Constants.COMMON_CPU_RESOURCE_NAME, expectedCpuCorePercent);\n-        commonStats.set_resources_map(resourcesMap);\n-\n-        // Add to TopologyPageInfo\n-        addBoltStats(expectedBoltId, aggregateStats);\n-\n-        // Call method under test.\n-        final Map<String, Object> result = UIHelpers.getTopologySummary(\n-            topoPageInfo,\n-            WINDOW,\n-            new HashMap<>(),\n-            \"spp\"\n-        );\n-\n-        // Validate\n-        assertNotNull(result, \"Should never return null\");\n-\n-        // Validate our Bolt result\n-        final Map<String, Object> boltResult = getBoltStatsFromTopologySummaryResult(result, expectedBoltId);\n-        assertNotNull(boltResult, \"Should have an entry for bolt\");\n-\n-        // Validate fields\n-        assertEquals(expectedBoltId, boltResult.get(\"boltId\"));\n-        assertEquals(expectedBoltId, boltResult.get(\"encodedBoltId\"));\n-        assertEquals(expectedTransferred, boltResult.get(\"transferred\"));\n-        assertEquals(String.format(\"%.3f\", expectedExecuteLatency), boltResult.get(\"executeLatency\"));\n-        assertEquals(String.format(\"%.3f\", expectedProcessLatency), boltResult.get(\"processLatency\"));\n-        assertEquals(expectedExecuted, boltResult.get(\"executed\"));\n-        assertEquals(expectedFailed, boltResult.get(\"failed\"));\n-        assertEquals(expectedAcked, boltResult.get(\"acked\"));\n-        assertEquals(String.format(\"%.3f\", expectedCapacity), boltResult.get(\"capacity\"));\n-        assertEquals(expectedEmitted, boltResult.get(\"emitted\"));\n-        assertEquals(expectedExecutors, boltResult.get(\"executors\"));\n-        assertEquals(expectedTasks, boltResult.get(\"tasks\"));\n-\n-        // Validate resources\n-        assertEquals(expectedOnMemoryHeap, (double) boltResult.get(\"requestedMemOnHeap\"), 0.01);\n-        assertEquals(expectedOffMemoryHeap, (double) boltResult.get(\"requestedMemOffHeap\"), 0.01);\n-        assertEquals(expectedCpuCorePercent, (double) boltResult.get(\"requestedCpu\"), 0.01);\n-        assertEquals(\"\", boltResult.get(\"requestedGenericResourcesComp\"));\n-\n-        // We expect there to be no error populated.\n-        assertEquals(\"\", boltResult.get(\"lastError\"), \"Should have empty value\");\n-    }\n-\n-    /**\n-     * Very narrow test case to validate that 'last error' fields are populated for a spout\n-     * with an error is present.\n-     */\n-    @Test\n-    void test_getTopologySpoutAggStatsMap_includesLastError() {\n-        // Define inputs\n-        final String expectedSpoutId = \"MySpoutId\";\n-        final String expectedErrorMsg = \"This is my test error message\";\n-        final int expectedErrorTime = (int) TimeUnit.MILLISECONDS.toSeconds(System.currentTimeMillis());\n-        final int expectedErrorPort = 4321;\n-        final String expectedErrorHost = \"my.errored.host\";\n-\n-        // Define our Last Error\n-        final ErrorInfo expectedLastError = new ErrorInfo(expectedErrorMsg, expectedErrorTime);\n-        expectedLastError.set_port(expectedErrorPort);\n-        expectedLastError.set_host(expectedErrorHost);\n-\n-        // Build stats instance for our spout\n-        final ComponentAggregateStats aggregateStats = buildSpoutAggregateStatsBase();\n-        aggregateStats.set_last_error(expectedLastError);\n-        addSpoutStats(expectedSpoutId, aggregateStats);\n-\n-        // Call method under test.\n-        final Map<String, Object> result = UIHelpers.getTopologySummary(\n-            topoPageInfo,\n-            WINDOW,\n-            new HashMap<>(),\n-            \"spp\"\n-        );\n-\n-        // Validate\n-        assertNotNull(result, \"Should never return null\");\n-\n-        // Validate our Spout result\n-        final Map<String, Object> spoutResult = getSpoutStatsFromTopologySummaryResult(result, expectedSpoutId);\n-        assertNotNull(spoutResult, \"Should have an entry for spout\");\n-\n-        // Verify each piece\n-        assertEquals(expectedSpoutId, spoutResult.get(\"spoutId\"));\n-        assertEquals(expectedSpoutId, spoutResult.get(\"encodedSpoutId\"));\n-\n-        // Verify error\n-        assertEquals(expectedErrorMsg, spoutResult.get(\"error\"));\n-        assertEquals(expectedErrorMsg, spoutResult.get(\"lastError\"));\n-        assertEquals(expectedErrorPort, spoutResult.get(\"errorPort\"));\n-        assertEquals(expectedErrorHost, spoutResult.get(\"errorHost\"));\n-        assertEquals(expectedErrorTime, spoutResult.get(\"errorTime\"));\n-\n-        // Fuzzy matching\n-        assertTrue(((int) spoutResult.get(\"errorLapsedSecs\")) >= 0);\n-        assertTrue(((int) spoutResult.get(\"errorLapsedSecs\")) <= 10);\n-    }\n-\n-    /**\n-     * Very narrow test case to validate that 'last error' fields are NOT populated for a spout\n-     * that does NOT have a last error associated.\n-     */\n-    @Test\n-    void test_getTopologySpoutAggStatsMap_hasNoLastError() {\n-        // Define inputs\n-        final String expectedSpoutId = \"MySpoutId\";\n-\n-        // Build stats instance for our spout\n-        final ComponentAggregateStats aggregateStats = buildSpoutAggregateStatsBase();\n-        addSpoutStats(expectedSpoutId, aggregateStats);\n-\n-        // Call method under test.\n-        final Map<String, Object> result = UIHelpers.getTopologySummary(\n-            topoPageInfo,\n-            WINDOW,\n-            new HashMap<>(),\n-            \"spp\"\n-        );\n-\n-        // Validate\n-        assertNotNull(result, \"Should never return null\");\n-\n-        // Validate our Spout result\n-        final Map<String, Object> spoutResult = getSpoutStatsFromTopologySummaryResult(result, expectedSpoutId);\n-        assertNotNull(spoutResult, \"Should have an entry for spout\");\n-\n-        // Verify each piece\n-        assertEquals(expectedSpoutId, spoutResult.get(\"spoutId\"));\n-        assertEquals(expectedSpoutId, spoutResult.get(\"encodedSpoutId\"));\n-\n-        // Verify error fields are not populated.\n-        assertEquals(\"\", spoutResult.get(\"lastError\"), \"Should have empty value\");\n-        assertFalse(spoutResult.containsKey(\"error\"));\n-        assertFalse(spoutResult.containsKey(\"errorPort\"));\n-        assertFalse(spoutResult.containsKey(\"errorHost\"));\n-        assertFalse(spoutResult.containsKey(\"errorTime\"));\n-        assertFalse(spoutResult.containsKey(\"errorLapsedSecs\"));\n-    }\n-\n-    /**\n-     * A more general test case that a spout's aggregate stats are\n-     * correctly populated into the resulting map.\n-     */\n-    @Test\n-    void test_getTopologySpoutAggStatsMap_generalFields() {\n-        // Define inputs\n-        final String expectedSpoutId = \"MySpoutId\";\n-        final double expectedCompleteLatency = 432.0D;\n-        final long expectedEmitted = 43234L;\n-        final long expectedAcked = 5553L;\n-        final long expectedFailed = 220L;\n-        final int expectedExecutors = 2;\n-        final int expectedTasks = 3;\n-        final long expectedTransferred = 3423423L;\n-        final double expectedOnMemoryHeap = 1024D;\n-        final double expectedOffMemoryHeap = 2048D;\n-        final double expectedCpuCorePercent = 75D;\n-\n-        // Build stats instance for our spout\n-        final ComponentAggregateStats aggregateStats = buildSpoutAggregateStatsBase();\n-\n-        // Common stats\n-        final CommonAggregateStats commonStats = aggregateStats.get_common_stats();\n-        commonStats.set_acked(expectedAcked);\n-        commonStats.set_emitted(expectedEmitted);\n-        commonStats.set_failed(expectedFailed);\n-        commonStats.set_num_executors(expectedExecutors);\n-        commonStats.set_num_tasks(expectedTasks);\n-        commonStats.set_transferred(expectedTransferred);\n-\n-        // Spout stats\n-        final SpoutAggregateStats spoutStats = aggregateStats.get_specific_stats().get_spout();\n-        spoutStats.set_complete_latency_ms(expectedCompleteLatency);\n-\n-        // Build Resources Map\n-        final Map<String, Double> resourcesMap = new HashMap<>();\n-        resourcesMap.put(Constants.COMMON_ONHEAP_MEMORY_RESOURCE_NAME, expectedOnMemoryHeap);\n-        resourcesMap.put(Constants.COMMON_OFFHEAP_MEMORY_RESOURCE_NAME, expectedOffMemoryHeap);\n-        resourcesMap.put(Constants.COMMON_CPU_RESOURCE_NAME, expectedCpuCorePercent);\n-        commonStats.set_resources_map(resourcesMap);\n-\n-        // Add to TopologyPageInfo\n-        addSpoutStats(expectedSpoutId, aggregateStats);\n-\n-        // Call method under test.\n-        final Map<String, Object> result = UIHelpers.getTopologySummary(\n-            topoPageInfo,\n-            WINDOW,\n-            new HashMap<>(),\n-            \"spp\"\n-        );\n-\n-        // Validate\n-        assertNotNull(result, \"Should never return null\");\n-\n-        // Validate our Spout result\n-        final Map<String, Object> spoutResult = getSpoutStatsFromTopologySummaryResult(result, expectedSpoutId);\n-        assertNotNull(spoutResult, \"Should have an entry for spout\");\n-\n-        // Validate fields\n-        assertEquals(expectedSpoutId, spoutResult.get(\"spoutId\"));\n-        assertEquals(expectedSpoutId, spoutResult.get(\"encodedSpoutId\"));\n-        assertEquals(expectedTransferred, spoutResult.get(\"transferred\"));\n-        assertEquals(String.format(\"%.3f\", expectedCompleteLatency), spoutResult.get(\"completeLatency\"));\n-        assertEquals(expectedFailed, spoutResult.get(\"failed\"));\n-        assertEquals(expectedAcked, spoutResult.get(\"acked\"));\n-        assertEquals(expectedEmitted, spoutResult.get(\"emitted\"));\n-        assertEquals(expectedExecutors, spoutResult.get(\"executors\"));\n-        assertEquals(expectedTasks, spoutResult.get(\"tasks\"));\n-\n-        // Validate resources\n-        assertEquals(expectedOnMemoryHeap, (double) spoutResult.get(\"requestedMemOnHeap\"), 0.01);\n-        assertEquals(expectedOffMemoryHeap, (double) spoutResult.get(\"requestedMemOffHeap\"), 0.01);\n-        assertEquals(expectedCpuCorePercent, (double) spoutResult.get(\"requestedCpu\"), 0.01);\n-        assertEquals(\"\", spoutResult.get(\"requestedGenericResourcesComp\"));\n-\n-        // We expect there to be no error populated.\n-        assertEquals(\"\", spoutResult.get(\"lastError\"), \"Should have empty value\");\n-    }\n-\n-    /**\n-     * Add an AggregateStats entry to the TopologyPageInfo instance.\n-     * @param boltId Id of the bolt to add the entry for.\n-     * @param aggregateStats Defines the entry.\n-     */\n-    private void addBoltStats(final String boltId, final ComponentAggregateStats aggregateStats) {\n-        topoPageInfo.get_id_to_bolt_agg_stats().put(boltId, aggregateStats);\n-    }\n-\n-    /**\n-     * Add an AggregateStats entry to the TopologyPageInfo instance.\n-     * @param spoutId Id of the spout to add the entry for.\n-     * @param aggregateStats Defines the entry.\n-     */\n-    private void addSpoutStats(final String spoutId, final ComponentAggregateStats aggregateStats) {\n-        topoPageInfo.get_id_to_spout_agg_stats().put(spoutId, aggregateStats);\n-    }\n-\n-    /**\n-     * Builds an empty ComponentAggregateStats instance for bolts.\n-     * @return empty ComponentAggregateStats instance.\n-     */\n-    private ComponentAggregateStats buildBoltAggregateStatsBase() {\n-        final CommonAggregateStats commonStats = new CommonAggregateStats();\n-        final BoltAggregateStats boltAggregateStats = new BoltAggregateStats();\n-\n-        final SpecificAggregateStats specificStats = new SpecificAggregateStats();\n-        specificStats.set_bolt(boltAggregateStats);\n-\n-        final ComponentAggregateStats aggregateStats = new ComponentAggregateStats();\n-        aggregateStats.set_common_stats(commonStats);\n-        aggregateStats.set_specific_stats(specificStats);\n-\n-        return aggregateStats;\n-    }\n-\n-    /**\n-     * Builds an empty ComponentAggregateStats instance for spouts.\n-     * @return empty ComponentAggregateStats instance.\n-     */\n-    private ComponentAggregateStats buildSpoutAggregateStatsBase() {\n-        final CommonAggregateStats commonStats = new CommonAggregateStats();\n-        final SpoutAggregateStats spoutAggregateStats = new SpoutAggregateStats();\n-\n-        final SpecificAggregateStats specificStats = new SpecificAggregateStats();\n-        specificStats.set_spout(spoutAggregateStats);\n-\n-        final ComponentAggregateStats aggregateStats = new ComponentAggregateStats();\n-        aggregateStats.set_common_stats(commonStats);\n-        aggregateStats.set_specific_stats(specificStats);\n-\n-        return aggregateStats;\n-    }\n-\n-    /**\n-     * Given the results Map from UIHelper.getTopologySummary(), return the entry for\n-     * the requested boltId.\n-     *\n-     * @param result Map from UIHelper.getTopologySummary()\n-     * @param boltId Id of the bolt to return the entry for.\n-     * @return Map for the given boltId.\n-     * @throws IllegalArgumentException if passed an invalid BoltId.\n-     */\n-    private Map<String, Object> getBoltStatsFromTopologySummaryResult(final Map<String, Object> result, final String boltId) {\n-        assertNotNull(result.get(\"bolts\"), \"Should have non-null 'bolts' property\");\n-        final List<HashMap<String, Object>> bolts = (List<HashMap<String, Object>>) result.get(\"bolts\");\n-\n-        return bolts.stream()\n-            .filter((entry) -> boltId.equals(entry.get(\"boltId\")))\n-            .findFirst()\n-            .orElseThrow(() -> new IllegalArgumentException(\"Unable to find entry for boltId '\" + boltId + \"'\"));\n-    }\n-\n-    /**\n-     * Given the results Map from UIHelper.getTopologySummary(), return the entry for\n-     * the requested spoutId.\n-     *\n-     * @param result Map from UIHelper.getTopologySummary()\n-     * @param spoutId Id of the spout to return the entry for.\n-     * @return Map for the given boltId.\n-     * @throws IllegalArgumentException if passed an invalid BoltId.\n-     */\n-    private Map<String, Object> getSpoutStatsFromTopologySummaryResult(final Map<String, Object> result, final String spoutId) {\n-        assertNotNull(result.get(\"spouts\"), \"Should have non-null 'spouts' property\");\n-        final List<HashMap<String, Object>> bolts = (List<HashMap<String, Object>>) result.get(\"spouts\");\n-\n-        return bolts.stream()\n-            .filter((entry) -> spoutId.equals(entry.get(\"spoutId\")))\n-            .findFirst()\n-            .orElseThrow(() -> new IllegalArgumentException(\"Unable to find entry for spoutId '\" + spoutId + \"'\"));\n-    }\n-}\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM2MzgyNQ==", "url": "https://github.com/apache/storm/pull/3312#discussion_r467363825", "bodyText": "Since the previous behavior always defaulted lastError to empty string, and the API docs show it defaulting to empty string, I've left this here for backwards compatibility.\nIf you think it'd be better to just exclude it (as we do with the other keys like errorPort, errorHost, errorTime etc.. let me know and I can remove the else block.\nOr alternatively, we could default the missing keys (errorPort, errorHost, errorTime) to null/empty string when no error has been reported to make their behavior consistent with lastError\nThoughts?", "author": "Crim", "createdAt": "2020-08-08T05:14:35Z", "path": "storm-webapp/src/main/java/org/apache/storm/daemon/ui/UIHelpers.java", "diffHunk": "@@ -1488,16 +1495,21 @@ private static Double nullToZero(Double value) {\n      * @return getTopologySpoutAggStatsMap\n      */\n     private static Map<String, Object> getTopologySpoutAggStatsMap(ComponentAggregateStats componentAggregateStats,\n-                                                                   String spoutId) {\n+                                                                   String spoutId, Map<String, Object> config, String topologyId) {\n         Map<String, Object> result = new HashMap();\n         CommonAggregateStats commonStats = componentAggregateStats.get_common_stats();\n         result.putAll(getCommonAggStatsMap(commonStats));\n         result.put(\"spoutId\", spoutId);\n         result.put(\"encodedSpoutId\", Utils.urlEncodeUtf8(spoutId));\n         SpoutAggregateStats spoutAggregateStats = componentAggregateStats.get_specific_stats().get_spout();\n-        result.put(\"completeLatency\", spoutAggregateStats.get_complete_latency_ms());\n+        result.put(\"completeLatency\", StatsUtil.floatStr(spoutAggregateStats.get_complete_latency_ms()));\n         ErrorInfo lastError = componentAggregateStats.get_last_error();\n-        result.put(\"lastError\", Objects.isNull(lastError) ?  \"\" : getTruncatedErrorString(lastError.get_error()));\n+        if (!Objects.isNull(lastError)) {\n+            result.putAll(getComponentErrorInfo(lastError, config, topologyId, true));\n+        } else {\n+            // Maintain backwards compatibility in the API response by setting empty string value", "originalCommit": "9a93ed34c4f9a6656d41867d867b8defa0709002", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMwMTA4NQ==", "url": "https://github.com/apache/storm/pull/3312#discussion_r468301085", "bodyText": "You are right. Sorry I overlooked. I think we can default those keys to empty like you said", "author": "Ethanlm", "createdAt": "2020-08-11T03:10:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM2MzgyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE5MDk1Mg==", "url": "https://github.com/apache/storm/pull/3312#discussion_r469190952", "bodyText": "Sorry, it's unclear, would you prefer that I also default errorPort, errorHost, and errorTime to empty string?\nThanks!", "author": "Crim", "createdAt": "2020-08-12T11:30:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM2MzgyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY2NzAwNw==", "url": "https://github.com/apache/storm/pull/3312#discussion_r469667007", "bodyText": "Sorry for not being clear. I think lastError, errorHost, errorPort, errorWorkerLogLink can default to empty string, and errorTime, errorLapsedSecs can default to null . What do you think?", "author": "Ethanlm", "createdAt": "2020-08-13T02:55:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM2MzgyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY3MjY4Mg==", "url": "https://github.com/apache/storm/pull/3312#discussion_r469672682", "bodyText": "Sounds good.  I'll update the code and API docs to reflect that.\nThanks!", "author": "Crim", "createdAt": "2020-08-13T03:18:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM2MzgyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE4NjExMQ==", "url": "https://github.com/apache/storm/pull/3312#discussion_r471186111", "bodyText": "Updated the code as well as the API docs.\nThanks!", "author": "Crim", "createdAt": "2020-08-17T01:07:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM2MzgyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "bdfce14a92b6f32c2c719521e543a9ef2726f1ec", "chunk": "diff --git a/storm-webapp/src/main/java/org/apache/storm/daemon/ui/UIHelpers.java b/storm-webapp/src/main/java/org/apache/storm/daemon/ui/UIHelpers.java\nindex ff8963e5e..8afe01bd3 100644\n--- a/storm-webapp/src/main/java/org/apache/storm/daemon/ui/UIHelpers.java\n+++ b/storm-webapp/src/main/java/org/apache/storm/daemon/ui/UIHelpers.java\n\n@@ -1495,21 +1487,16 @@ public class UIHelpers {\n      * @return getTopologySpoutAggStatsMap\n      */\n     private static Map<String, Object> getTopologySpoutAggStatsMap(ComponentAggregateStats componentAggregateStats,\n-                                                                   String spoutId, Map<String, Object> config, String topologyId) {\n+                                                                   String spoutId) {\n         Map<String, Object> result = new HashMap();\n         CommonAggregateStats commonStats = componentAggregateStats.get_common_stats();\n         result.putAll(getCommonAggStatsMap(commonStats));\n         result.put(\"spoutId\", spoutId);\n         result.put(\"encodedSpoutId\", Utils.urlEncodeUtf8(spoutId));\n         SpoutAggregateStats spoutAggregateStats = componentAggregateStats.get_specific_stats().get_spout();\n-        result.put(\"completeLatency\", StatsUtil.floatStr(spoutAggregateStats.get_complete_latency_ms()));\n+        result.put(\"completeLatency\", spoutAggregateStats.get_complete_latency_ms());\n         ErrorInfo lastError = componentAggregateStats.get_last_error();\n-        if (!Objects.isNull(lastError)) {\n-            result.putAll(getComponentErrorInfo(lastError, config, topologyId, true));\n-        } else {\n-            // Maintain backwards compatibility in the API response by setting empty string value\n-            result.put(\"lastError\", \"\");\n-        }\n+        result.put(\"lastError\", Objects.isNull(lastError) ?  \"\" : getTruncatedErrorString(lastError.get_error()));\n         return result;\n     }\n \n"}}, {"oid": "bdfce14a92b6f32c2c719521e543a9ef2726f1ec", "url": "https://github.com/apache/storm/commit/bdfce14a92b6f32c2c719521e543a9ef2726f1ec", "message": "[STORM-3652] Fix error reporting on topology page", "committedDate": "2020-08-08T12:55:09Z", "type": "commit"}, {"oid": "fcb7d2226239739766f7d450babde185d9ef533c", "url": "https://github.com/apache/storm/commit/fcb7d2226239739766f7d450babde185d9ef533c", "message": "Start writing basic test case", "committedDate": "2020-08-08T12:55:09Z", "type": "commit"}, {"oid": "d2eb19accfe0395211959458797a4d01ca158db0", "url": "https://github.com/apache/storm/commit/d2eb19accfe0395211959458797a4d01ca158db0", "message": "Add more test coverage", "committedDate": "2020-08-08T12:55:09Z", "type": "commit"}, {"oid": "04f400f9a194ae5688dcba3e177042c9e3468562", "url": "https://github.com/apache/storm/commit/04f400f9a194ae5688dcba3e177042c9e3468562", "message": "add missing license header", "committedDate": "2020-08-08T12:55:09Z", "type": "commit"}, {"oid": "1ca0f45b8dfd9472b9bdfe05c3062bdd59e01bca", "url": "https://github.com/apache/storm/commit/1ca0f45b8dfd9472b9bdfe05c3062bdd59e01bca", "message": "[STORM-3652] Also fix Spout last error display from topology page", "committedDate": "2020-08-08T12:55:09Z", "type": "commit"}, {"oid": "5880f06975c6bdbf9e6ab0620d377f8a929d469c", "url": "https://github.com/apache/storm/commit/5880f06975c6bdbf9e6ab0620d377f8a929d469c", "message": "[STORM-3652] Add test coverage, format spout stat complete latency", "committedDate": "2020-08-08T12:55:09Z", "type": "commit"}, {"oid": "e52b64d4f39cce976d88334e1408f88f2baf69ae", "url": "https://github.com/apache/storm/commit/e52b64d4f39cce976d88334e1408f88f2baf69ae", "message": "remove file accidentally committed", "committedDate": "2020-08-08T12:55:09Z", "type": "commit"}, {"oid": "47f6225030bae0f0d90055196ed89e684530b081", "url": "https://github.com/apache/storm/commit/47f6225030bae0f0d90055196ed89e684530b081", "message": "[STORM-3652] Code review adjustments", "committedDate": "2020-08-08T12:55:09Z", "type": "commit"}, {"oid": "b3a27617c9a45b5b1f26582b6e1115de9d9d2698", "url": "https://github.com/apache/storm/commit/b3a27617c9a45b5b1f26582b6e1115de9d9d2698", "message": "Update API doc", "committedDate": "2020-08-08T12:55:09Z", "type": "commit"}, {"oid": "b3a27617c9a45b5b1f26582b6e1115de9d9d2698", "url": "https://github.com/apache/storm/commit/b3a27617c9a45b5b1f26582b6e1115de9d9d2698", "message": "Update API doc", "committedDate": "2020-08-08T12:55:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMwMzQyMQ==", "url": "https://github.com/apache/storm/pull/3312#discussion_r468303421", "bodyText": "Bolt and spout have different stats\nhttps://github.com/apache/storm/blob/master/storm-server/src/main/java/org/apache/storm/stats/StatsUtil.java#L2049-L2085\nIt would be nice to reflect that here even though the information is not really used  .", "author": "Ethanlm", "createdAt": "2020-08-11T03:20:27Z", "path": "storm-core/test/jvm/org/apache/storm/stats/TestStatsUtil.java", "diffHunk": "@@ -92,6 +113,33 @@ public void makeTopoInfo() {\n         worker2Resources.put(new WorkerSlot(\"node3\", 3), ws3);\n     }\n \n+    private Map<String, Object> createBeatBoltStats() {\n+        return createBeatStats(\"bolt\");\n+    }\n+\n+    private Map<String, Object> createBeatSpoutStats() {\n+        return createBeatStats(\"spout\");\n+    }\n+\n+    private Map<String, Object> createBeatStats(final String type) {\n+        Map<String, Object> stats = new HashMap<>();\n+        stats.put(\"type\", type);\n+\n+        stats.put(\"acked\", new HashMap<>());", "originalCommit": "b3a27617c9a45b5b1f26582b6e1115de9d9d2698", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE5MDE4OQ==", "url": "https://github.com/apache/storm/pull/3312#discussion_r469190189", "bodyText": "Updated to only include the fields required for each component type.", "author": "Crim", "createdAt": "2020-08-12T11:28:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMwMzQyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "5487cd6c4433535652846d88fc37f0fc2d734598", "chunk": "diff --git a/storm-core/test/jvm/org/apache/storm/stats/TestStatsUtil.java b/storm-core/test/jvm/org/apache/storm/stats/TestStatsUtil.java\nindex a350046ad..f5026e005 100644\n--- a/storm-core/test/jvm/org/apache/storm/stats/TestStatsUtil.java\n+++ b/storm-core/test/jvm/org/apache/storm/stats/TestStatsUtil.java\n\n@@ -113,17 +113,13 @@ public class TestStatsUtil {\n         worker2Resources.put(new WorkerSlot(\"node3\", 3), ws3);\n     }\n \n+    /**\n+     * Utility method for creating a template for Bolt stats.\n+     * @return Empty template map for Bolt statistics.\n+     */\n     private Map<String, Object> createBeatBoltStats() {\n-        return createBeatStats(\"bolt\");\n-    }\n-\n-    private Map<String, Object> createBeatSpoutStats() {\n-        return createBeatStats(\"spout\");\n-    }\n-\n-    private Map<String, Object> createBeatStats(final String type) {\n         Map<String, Object> stats = new HashMap<>();\n-        stats.put(\"type\", type);\n+        stats.put(\"type\", \"bolt\");\n \n         stats.put(\"acked\", new HashMap<>());\n         stats.put(\"emitted\", new HashMap<>());\n"}}, {"oid": "5487cd6c4433535652846d88fc37f0fc2d734598", "url": "https://github.com/apache/storm/commit/5487cd6c4433535652846d88fc37f0fc2d734598", "message": "Update test cases to have unique stats template for spout and bolt components", "committedDate": "2020-08-12T11:27:39Z", "type": "commit"}, {"oid": "03b0d59b77c35c62a158fa4f1dbbc3bac0e6cc4b", "url": "https://github.com/apache/storm/commit/03b0d59b77c35c62a158fa4f1dbbc3bac0e6cc4b", "message": "[STORM-3652] Code review adjustments.  Updated API docs to reflect reality, and example of populated lastError values", "committedDate": "2020-08-17T01:05:38Z", "type": "commit"}, {"oid": "9b66fd735c03f29ed335354dffecad3e28156bbc", "url": "https://github.com/apache/storm/commit/9b66fd735c03f29ed335354dffecad3e28156bbc", "message": "Update API Docs example values to be consisted with the rest of the example", "committedDate": "2020-08-17T01:15:17Z", "type": "commit"}]}