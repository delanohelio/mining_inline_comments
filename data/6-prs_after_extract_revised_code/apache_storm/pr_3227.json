{"pr_number": 3227, "pr_title": "STORM-3602 fix switching on low water mark for loadaware shuffle", "pr_createdAt": "2020-03-12T16:22:40Z", "pr_url": "https://github.com/apache/storm/pull/3227", "timeline": [{"oid": "5b5b4ed1503d8da8564bb6245ea3ce063d3112f7", "url": "https://github.com/apache/storm/commit/5b5b4ed1503d8da8564bb6245ea3ce063d3112f7", "message": "STORM-3602 fix switching on low water mark for loadaware shuffle", "committedDate": "2020-03-12T16:19:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI2NTI4NQ==", "url": "https://github.com/apache/storm/pull/3227#discussion_r392265285", "bodyText": "This name can be a little confusing.  upgradeFromWorker implies the current scope is WORKER_LOCAL.\nI would prefer to keep downgrade  and  upgrade.", "author": "Ethanlm", "createdAt": "2020-03-13T14:33:52Z", "path": "storm-client/src/jvm/org/apache/storm/grouping/LoadAwareShuffleGrouping.java", "diffHunk": "@@ -305,7 +309,7 @@ public static Scope downgrade(Scope current) {\n             }\n         }\n \n-        public static Scope upgrade(Scope current) {\n+        public static LocalityScope upgradeFromWorker(LocalityScope current) {", "originalCommit": "5b5b4ed1503d8da8564bb6245ea3ce063d3112f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dc167ff2419ce829f6c278427556142f462d0e8b", "chunk": "diff --git a/storm-client/src/jvm/org/apache/storm/grouping/LoadAwareShuffleGrouping.java b/storm-client/src/jvm/org/apache/storm/grouping/LoadAwareShuffleGrouping.java\nindex 3a5f3faaf..f969adee7 100644\n--- a/storm-client/src/jvm/org/apache/storm/grouping/LoadAwareShuffleGrouping.java\n+++ b/storm-client/src/jvm/org/apache/storm/grouping/LoadAwareShuffleGrouping.java\n\n@@ -309,7 +313,7 @@ public class LoadAwareShuffleGrouping implements LoadAwareCustomStreamGrouping,\n             }\n         }\n \n-        public static LocalityScope upgradeFromWorker(LocalityScope current) {\n+        public static LocalityScope upgrade(LocalityScope current) {\n             switch (current) {\n                 case WORKER_LOCAL:\n                     return HOST_LOCAL;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI2OTMwOQ==", "url": "https://github.com/apache/storm/pull/3227#discussion_r392269309", "bodyText": "I would keep this as private and add a getCurrentScope function for test only with @VisibleForTesting annotation.", "author": "Ethanlm", "createdAt": "2020-03-13T14:40:38Z", "path": "storm-client/src/jvm/org/apache/storm/grouping/LoadAwareShuffleGrouping.java", "diffHunk": "@@ -47,13 +47,14 @@\n     private Random random;\n     private volatile int[] prepareChoices;\n     private AtomicInteger current;\n-    private Scope currentScope;\n+    @VisibleForTesting\n+    LocalityScope currentScope;", "originalCommit": "5b5b4ed1503d8da8564bb6245ea3ce063d3112f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dc167ff2419ce829f6c278427556142f462d0e8b", "chunk": "diff --git a/storm-client/src/jvm/org/apache/storm/grouping/LoadAwareShuffleGrouping.java b/storm-client/src/jvm/org/apache/storm/grouping/LoadAwareShuffleGrouping.java\nindex 3a5f3faaf..f969adee7 100644\n--- a/storm-client/src/jvm/org/apache/storm/grouping/LoadAwareShuffleGrouping.java\n+++ b/storm-client/src/jvm/org/apache/storm/grouping/LoadAwareShuffleGrouping.java\n\n@@ -47,8 +47,7 @@ public class LoadAwareShuffleGrouping implements LoadAwareCustomStreamGrouping,\n     private Random random;\n     private volatile int[] prepareChoices;\n     private AtomicInteger current;\n-    @VisibleForTesting\n-    LocalityScope currentScope;\n+    private LocalityScope currentScope;\n     private NodeInfo sourceNodeInfo;\n     private List<Integer> targetTasks;\n     private AtomicReference<Map<Integer, NodeInfo>> taskToNodePort;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3MDY5Nw==", "url": "https://github.com/apache/storm/pull/3227#discussion_r392270697", "bodyText": "Good unit test!", "author": "Ethanlm", "createdAt": "2020-03-13T14:42:48Z", "path": "storm-client/test/jvm/org/apache/storm/grouping/LoadAwareShuffleGroupingTest.java", "diffHunk": "@@ -496,4 +499,75 @@ public Long call() throws Exception {\n \n         refreshService.shutdownNow();\n     }\n+\n+    @Test\n+    public void testLoadSwitching() throws Exception {", "originalCommit": "5b5b4ed1503d8da8564bb6245ea3ce063d3112f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dc167ff2419ce829f6c278427556142f462d0e8b", "chunk": "diff --git a/storm-client/test/jvm/org/apache/storm/grouping/LoadAwareShuffleGroupingTest.java b/storm-client/test/jvm/org/apache/storm/grouping/LoadAwareShuffleGroupingTest.java\nindex 32319e6e0..678d803dc 100644\n--- a/storm-client/test/jvm/org/apache/storm/grouping/LoadAwareShuffleGroupingTest.java\n+++ b/storm-client/test/jvm/org/apache/storm/grouping/LoadAwareShuffleGroupingTest.java\n\n@@ -506,39 +506,39 @@ public class LoadAwareShuffleGroupingTest {\n         WorkerTopologyContext context = createLoadSwitchingContext();\n         grouping.prepare(context, new GlobalStreamId(\"a\", \"default\"), Arrays.asList(1, 2, 3));\n         // startup should default to worker local\n-        assertEquals(LoadAwareShuffleGrouping.LocalityScope.WORKER_LOCAL, grouping.currentScope);\n+        assertEquals(LoadAwareShuffleGrouping.LocalityScope.WORKER_LOCAL, grouping.getCurrentScope());\n \n         // with high load, switch to host local\n         LoadMapping lm = createLoadMapping(1.0, 1.0, 1.0);\n         grouping.refreshLoad(lm);\n-        assertEquals(LoadAwareShuffleGrouping.LocalityScope.HOST_LOCAL, grouping.currentScope);\n+        assertEquals(LoadAwareShuffleGrouping.LocalityScope.HOST_LOCAL, grouping.getCurrentScope());\n \n         // load remains high, switch to rack local\n         grouping.refreshLoad(lm);\n-        assertEquals(LoadAwareShuffleGrouping.LocalityScope.RACK_LOCAL, grouping.currentScope);\n+        assertEquals(LoadAwareShuffleGrouping.LocalityScope.RACK_LOCAL, grouping.getCurrentScope());\n \n         // load remains high. switch to everything\n         grouping.refreshLoad(lm);\n-        assertEquals(LoadAwareShuffleGrouping.LocalityScope.EVERYTHING, grouping.currentScope);\n+        assertEquals(LoadAwareShuffleGrouping.LocalityScope.EVERYTHING, grouping.getCurrentScope());\n \n         // lower load below low water threshold, but worker local load remains too high\n         // should switch to rack local\n         lm = createLoadMapping(0.2, 0.1, 0.1);\n         grouping.refreshLoad(lm);\n-        assertEquals(LoadAwareShuffleGrouping.LocalityScope.RACK_LOCAL, grouping.currentScope);\n+        assertEquals(LoadAwareShuffleGrouping.LocalityScope.RACK_LOCAL, grouping.getCurrentScope());\n \n         // lower load continues, switch to host local\n         grouping.refreshLoad(lm);\n-        assertEquals(LoadAwareShuffleGrouping.LocalityScope.HOST_LOCAL, grouping.currentScope);\n+        assertEquals(LoadAwareShuffleGrouping.LocalityScope.HOST_LOCAL, grouping.getCurrentScope());\n \n         // lower load continues, should NOT be able to switch to worker local yet\n         grouping.refreshLoad(lm);\n-        assertEquals(LoadAwareShuffleGrouping.LocalityScope.HOST_LOCAL, grouping.currentScope);\n+        assertEquals(LoadAwareShuffleGrouping.LocalityScope.HOST_LOCAL, grouping.getCurrentScope());\n \n         // reduce load on local worker task, should switch to worker local\n         lm = createLoadMapping(0.1, 0.1, 0.1);\n         grouping.refreshLoad(lm);\n-        assertEquals(LoadAwareShuffleGrouping.LocalityScope.WORKER_LOCAL, grouping.currentScope);\n+        assertEquals(LoadAwareShuffleGrouping.LocalityScope.WORKER_LOCAL, grouping.getCurrentScope());\n     }\n \n     private LoadMapping createLoadMapping(double load1, double load2, double load3) {\n"}}, {"oid": "dc167ff2419ce829f6c278427556142f462d0e8b", "url": "https://github.com/apache/storm/commit/dc167ff2419ce829f6c278427556142f462d0e8b", "message": "STORM-3602 revert method rename", "committedDate": "2020-03-13T15:35:05Z", "type": "commit"}]}