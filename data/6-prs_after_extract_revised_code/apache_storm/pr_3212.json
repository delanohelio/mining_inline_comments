{"pr_number": 3212, "pr_title": "[STORM-3587] Allow Scheduler futureTask to gracefully exit before TimeoutException.", "pr_createdAt": "2020-02-21T20:36:46Z", "pr_url": "https://github.com/apache/storm/pull/3212", "timeline": [{"oid": "e5ff5375327e0a5e980a2590daf7101c9c066391", "url": "https://github.com/apache/storm/commit/e5ff5375327e0a5e980a2590daf7101c9c066391", "message": "[STORM-3587] Allow Scheduler futureTask to gracefully exit and register message on timeout.", "committedDate": "2020-02-21T20:17:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxOTAzMg==", "url": "https://github.com/apache/storm/pull/3212#discussion_r382819032", "bodyText": "Why do we need  + 1", "author": "Ethanlm", "createdAt": "2020-02-21T21:41:35Z", "path": "storm-server/src/main/java/org/apache/storm/scheduler/resource/ResourceAwareScheduler.java", "diffHunk": "@@ -166,7 +166,7 @@ private void scheduleTopology(TopologyDetails td, Cluster cluster, final User to\n                     Future<SchedulingResult> schedulingFuture = backgroundScheduling.submit(\n                         () -> finalRasStrategy.schedule(toSchedule, td));\n                     try {\n-                        result = schedulingFuture.get(schedulingTimeoutSeconds, TimeUnit.SECONDS);\n+                        result = schedulingFuture.get(schedulingTimeoutSeconds + 1, TimeUnit.SECONDS);", "originalCommit": "e5ff5375327e0a5e980a2590daf7101c9c066391", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgyMjU2Nw==", "url": "https://github.com/apache/storm/pull/3212#discussion_r382822567", "bodyText": "The timeout is checked in strategy to determine when to terminate. However, if the future task is killed at or around the same time - this results in a TimeOut exception on the task and the result is not propagated back to the caller. +1 gives an additional second before the FutureTask is rudely terminated and allows the result to be returned and examined for the actual message in the result.", "author": "bipinprasad", "createdAt": "2020-02-21T21:51:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxOTAzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE4Mjg1MA==", "url": "https://github.com/apache/storm/pull/3212#discussion_r385182850", "bodyText": "I think we should discuss about whether we want to do this or not. Essentially this applies to every timeout. If our \"timeout=x second\" in Storm means things will fail/time out at x+1 seconds, then everywhere with timeout configs, we need +1 to make the semantic consistent. I think this is not very necessary", "author": "Ethanlm", "createdAt": "2020-02-27T15:24:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxOTAzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMwNDM2Nw==", "url": "https://github.com/apache/storm/pull/3212#discussion_r385304367", "bodyText": "Should not apply to every timeout. If the scheduled task is a cooperating task that is also using the same timeout to determine when to stop, then we have this situation where scheduler is interrupting the FutureTask before the task is allowed to gracefully exit and return a result.\nIf the scheduled task is a non-cooperating task (i.e. .not using the timeout), then it is fine to use the specified number.", "author": "bipinprasad", "createdAt": "2020-02-27T18:52:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxOTAzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMyMTExMA==", "url": "https://github.com/apache/storm/pull/3212#discussion_r385321110", "bodyText": "Probably I misunderstood. Could you point out to me where we are using SCHEDULING_TIMEOUT_SECONDS_PER_TOPOLOGY too?  It looks to me here is the only place the schedulingTimeoutSeconds is being used. I don't see cooperations.", "author": "Ethanlm", "createdAt": "2020-02-27T19:23:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxOTAzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUwNTgwNA==", "url": "https://github.com/apache/storm/pull/3212#discussion_r385505804", "bodyText": "I see your point.\nWhen I think about cooperating process, is that the strategy is a time-bound task and part of the same code base running in the same JVM - so there never should be a a need to kill a FutureTask except as a precaution against bug introduced inadvertently.\nCurrent ConstraintSolver uses a different (but redundant) config variable for time limit - which is accidentally set to the same default value.\nIn light of this - it may be better to explicitly pass \"max\" time limit to the constraint solver. And then determine how much the margin needs to be, and then add the margin to the FutureTask timeout. Note that this extra margin (and the timeout exception should only happen in exceptional  case when there is bug in ConstraintSolver. Normally it will/should exit by the timeout duration.\nAnd the result should be available.", "author": "bipinprasad", "createdAt": "2020-02-28T04:46:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxOTAzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgwNjEwNA==", "url": "https://github.com/apache/storm/pull/3212#discussion_r385806104", "bodyText": "It makes sense to me. Thanks.", "author": "Ethanlm", "createdAt": "2020-02-28T16:51:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxOTAzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgwNzAyNQ==", "url": "https://github.com/apache/storm/pull/3212#discussion_r385807025", "bodyText": "Can you please add some brief comments about the purpose of +1 so future me will not be surprised when I come back to this. Thanks.\nSomething like Allow the Scheduler futureTask to gracefully exit is good enough for me.", "author": "Ethanlm", "createdAt": "2020-02-28T16:53:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxOTAzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI0MzUyNg==", "url": "https://github.com/apache/storm/pull/3212#discussion_r387243526", "bodyText": "Pushed the change into ConstrainstSolverStrategy where there is millisecond granularity and avoid hitting the ceiling. Removed +1 from ResourceAwareStrategy.", "author": "bipinprasad", "createdAt": "2020-03-03T19:28:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxOTAzMg=="}], "type": "inlineReview", "revised_code": {"commit": "3a00cd4de20b49de085369f329ac75c67f0e223a", "chunk": "diff --git a/storm-server/src/main/java/org/apache/storm/scheduler/resource/ResourceAwareScheduler.java b/storm-server/src/main/java/org/apache/storm/scheduler/resource/ResourceAwareScheduler.java\nindex 1c724982f..953d93415 100644\n--- a/storm-server/src/main/java/org/apache/storm/scheduler/resource/ResourceAwareScheduler.java\n+++ b/storm-server/src/main/java/org/apache/storm/scheduler/resource/ResourceAwareScheduler.java\n\n@@ -166,7 +166,7 @@ public class ResourceAwareScheduler implements IScheduler {\n                     Future<SchedulingResult> schedulingFuture = backgroundScheduling.submit(\n                         () -> finalRasStrategy.schedule(toSchedule, td));\n                     try {\n-                        result = schedulingFuture.get(schedulingTimeoutSeconds + 1, TimeUnit.SECONDS);\n+                        result = schedulingFuture.get(schedulingTimeoutSeconds, TimeUnit.SECONDS);\n                     } catch (TimeoutException te) {\n                         markFailedTopology(topologySubmitter, cluster, td, \"Scheduling took too long for \"\n                                 + td.getId() + \" using strategy \" + rasStrategy.getClass().getName() + \" timeout after \"\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxOTE3MA==", "url": "https://github.com/apache/storm/pull/3212#discussion_r382819170", "bodyText": "failed to schedule does not necessarily the topology is invalid.", "author": "Ethanlm", "createdAt": "2020-02-21T21:41:58Z", "path": "storm-server/src/main/java/org/apache/storm/scheduler/resource/User.java", "diffHunk": "@@ -79,15 +79,18 @@ public String getId() {\n         return ret;\n     }\n \n-    public void markTopoUnsuccess(TopologyDetails topo, Cluster cluster) {\n+    public void markTopoUnsuccess(TopologyDetails topo, Cluster cluster, String msg) {\n         unsuccess.add(topo);\n         if (cluster != null) {\n-            cluster.setStatus(topo.getId(), \"Scheduling Attempted but topology is invalid\");\n+            if (msg == null) {\n+                msg = \"Scheduling Attempted but topology is invalid\";", "originalCommit": "e5ff5375327e0a5e980a2590daf7101c9c066391", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgyMzk1MA==", "url": "https://github.com/apache/storm/pull/3212#discussion_r382823950", "bodyText": "That message is a generic default - same as prior default. I believe there is one other caller to this method.", "author": "bipinprasad", "createdAt": "2020-02-21T21:54:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxOTE3MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE4ODc3OQ==", "url": "https://github.com/apache/storm/pull/3212#discussion_r385188779", "bodyText": "This can be replaced by result.toString()", "author": "Ethanlm", "createdAt": "2020-02-27T15:32:38Z", "path": "storm-server/src/main/java/org/apache/storm/scheduler/resource/ResourceAwareScheduler.java", "diffHunk": "@@ -226,7 +226,17 @@ private void scheduleTopology(TopologyDetails td, Cluster cluster, final User to\n                         //Only place we fall though to do the loop over again...\n                     } else { //Any other failure result\n                         //The assumption is that the strategy set the status...\n-                        topologySubmitter.markTopoUnsuccess(td, cluster);\n+                        String msg = \"\";", "originalCommit": "e5ff5375327e0a5e980a2590daf7101c9c066391", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f282df8be6166eb1d223c4bd553ecd5678e07118", "chunk": "diff --git a/storm-server/src/main/java/org/apache/storm/scheduler/resource/ResourceAwareScheduler.java b/storm-server/src/main/java/org/apache/storm/scheduler/resource/ResourceAwareScheduler.java\nindex 1c724982f..26fd13672 100644\n--- a/storm-server/src/main/java/org/apache/storm/scheduler/resource/ResourceAwareScheduler.java\n+++ b/storm-server/src/main/java/org/apache/storm/scheduler/resource/ResourceAwareScheduler.java\n\n@@ -225,18 +225,7 @@ public class ResourceAwareScheduler implements IScheduler {\n                         }\n                         //Only place we fall though to do the loop over again...\n                     } else { //Any other failure result\n-                        //The assumption is that the strategy set the status...\n-                        String msg = \"\";\n-                        if (result.getStatus() != null) {\n-                            msg += result.getStatus().name() + \":\";\n-                        }\n-                        if (result.getErrorMessage() != null && !result.getErrorMessage().isEmpty()) {\n-                            msg += result.getErrorMessage();\n-                        }\n-                        if (result.getMessage() != null && !result.getMessage().isEmpty()) {\n-                            msg += \" \" + result.getMessage();\n-                        }\n-                        topologySubmitter.markTopoUnsuccess(td, cluster, msg);\n+                        topologySubmitter.markTopoUnsuccess(td, cluster, result.toString());\n                         return;\n                     }\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE4OTEyNA==", "url": "https://github.com/apache/storm/pull/3212#discussion_r385189124", "bodyText": "This can be replaced by result.toString()", "author": "Ethanlm", "createdAt": "2020-02-27T15:33:09Z", "path": "storm-server/src/main/java/org/apache/storm/scheduler/resource/ResourceAwareScheduler.java", "diffHunk": "@@ -226,7 +226,17 @@ private void scheduleTopology(TopologyDetails td, Cluster cluster, final User to\n                         //Only place we fall though to do the loop over again...\n                     } else { //Any other failure result\n                         //The assumption is that the strategy set the status...\n-                        topologySubmitter.markTopoUnsuccess(td, cluster);\n+                        String msg = \"\";", "originalCommit": "e5ff5375327e0a5e980a2590daf7101c9c066391", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMxOTA1MA==", "url": "https://github.com/apache/storm/pull/3212#discussion_r385319050", "bodyText": "Changed", "author": "bipinprasad", "createdAt": "2020-02-27T19:19:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE4OTEyNA=="}], "type": "inlineReview", "revised_code": {"commit": "f282df8be6166eb1d223c4bd553ecd5678e07118", "chunk": "diff --git a/storm-server/src/main/java/org/apache/storm/scheduler/resource/ResourceAwareScheduler.java b/storm-server/src/main/java/org/apache/storm/scheduler/resource/ResourceAwareScheduler.java\nindex 1c724982f..26fd13672 100644\n--- a/storm-server/src/main/java/org/apache/storm/scheduler/resource/ResourceAwareScheduler.java\n+++ b/storm-server/src/main/java/org/apache/storm/scheduler/resource/ResourceAwareScheduler.java\n\n@@ -225,18 +225,7 @@ public class ResourceAwareScheduler implements IScheduler {\n                         }\n                         //Only place we fall though to do the loop over again...\n                     } else { //Any other failure result\n-                        //The assumption is that the strategy set the status...\n-                        String msg = \"\";\n-                        if (result.getStatus() != null) {\n-                            msg += result.getStatus().name() + \":\";\n-                        }\n-                        if (result.getErrorMessage() != null && !result.getErrorMessage().isEmpty()) {\n-                            msg += result.getErrorMessage();\n-                        }\n-                        if (result.getMessage() != null && !result.getMessage().isEmpty()) {\n-                            msg += \" \" + result.getMessage();\n-                        }\n-                        topologySubmitter.markTopoUnsuccess(td, cluster, msg);\n+                        topologySubmitter.markTopoUnsuccess(td, cluster, result.toString());\n                         return;\n                     }\n                 }\n"}}, {"oid": "f282df8be6166eb1d223c4bd553ecd5678e07118", "url": "https://github.com/apache/storm/commit/f282df8be6166eb1d223c4bd553ecd5678e07118", "message": "[STORM-3587] Use result.toString() instead of reconstructing error message.", "committedDate": "2020-02-27T19:17:23Z", "type": "commit"}, {"oid": "3a00cd4de20b49de085369f329ac75c67f0e223a", "url": "https://github.com/apache/storm/commit/3a00cd4de20b49de085369f329ac75c67f0e223a", "message": "[STORM-3587] Change ConstraintSolverStrategy to expect to be killed at DaemonConfig.SCHEDULING_TIMEOUT_SECONDS_PER_TOPOLOGY seconds and set it own maximum time to be at most 200 ms before.", "committedDate": "2020-03-03T19:21:37Z", "type": "commit"}]}