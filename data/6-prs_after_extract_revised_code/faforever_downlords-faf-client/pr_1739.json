{"pr_number": 1739, "pr_title": "Download proxy", "pr_createdAt": "2020-05-31T21:42:38Z", "pr_url": "https://github.com/FAForever/downlords-faf-client/pull/1739", "timeline": [{"oid": "12c02a3be69a3399bdf7891b956d2b4861881745", "url": "https://github.com/FAForever/downlords-faf-client/commit/12c02a3be69a3399bdf7891b956d2b4861881745", "message": "Download proxy", "committedDate": "2020-05-31T22:21:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg5Mjg5NA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r433892894", "bodyText": "This should not be hard coded", "author": "1-alex98", "createdAt": "2020-06-02T13:53:51Z", "path": "src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package com.faforever.client.io;\n+\n+import com.faforever.client.api.dto.FeaturedModFile;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.task.ResourceLocks;\n+import lombok.extern.slf4j.Slf4j;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.lang.invoke.MethodHandles;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileTime;\n+import java.util.Calendar;\n+\n+@Service\n+@Slf4j\n+public class FeaturedModFileCacheService implements InitializingBean {\n+  private final Path cacheDirectory;\n+  private int cacheLifeTime;\n+  private Calendar calendar;\n+  private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n+\n+  public FeaturedModFileCacheService(PreferencesService preferencesService) {\n+    this.cacheDirectory = preferencesService.getCacheDirectory();\n+    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTime() * 1000 * 3600 * 24;\n+    this.calendar = Calendar.getInstance();\n+  }\n+\n+  private String getCachedFileName(FeaturedModFile featuredModFile) {\n+    return String.format(\n+        \"%s.%s.%s.%s\",\n+        featuredModFile.getId(),\n+        featuredModFile.getVersion(),\n+        featuredModFile.getMd5(),\n+        featuredModFile.getName()\n+    );\n+  }\n+\n+  public Path getCachedFilePath(FeaturedModFile featuredModFile) {\n+    return cacheDirectory.resolve(featuredModFile.getGroup()).resolve(getCachedFileName(featuredModFile));\n+  }\n+\n+  public void copyFeaturedModFileFromCache(Path cacheFilePath, Path targetPath) throws java.io.IOException {\n+    Files.createDirectories(targetPath.getParent());\n+    ResourceLocks.acquireDiskLock();\n+\n+    try {\n+      Files.copy(cacheFilePath, targetPath, StandardCopyOption.REPLACE_EXISTING);\n+    } catch (Exception e) {\n+      logger.error(e.toString());\n+    } finally {\n+      ResourceLocks.freeDiskLock();\n+    }\n+  }\n+\n+  /**\n+   * Cleanup method, on service start, we'll get rid of old files.\n+   */\n+  @Override\n+  public void afterPropertiesSet() {\n+    Path[] directoryPaths = new Path[] {\n+        this.cacheDirectory.resolve(\"bin\"),", "originalCommit": "12c02a3be69a3399bdf7891b956d2b4861881745", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg5MzEyOA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r433893128", "bodyText": "take all flders in there", "author": "1-alex98", "createdAt": "2020-06-02T13:54:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg5Mjg5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI2ODAzOA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r436268038", "bodyText": "oukay. but i'll need to rename the class, cause we'll remove more than only featured mod files, we'll remove much more.", "author": "norraxx", "createdAt": "2020-06-06T13:11:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg5Mjg5NA=="}], "type": "inlineReview", "revised_code": {"commit": "431896fadb2b9d685ee2c599e8e75091b17f6235", "chunk": "diff --git a/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java b/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\nindex a50f6ddc..82e13294 100644\n--- a/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\n+++ b/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\n\n@@ -4,32 +4,26 @@ import com.faforever.client.api.dto.FeaturedModFile;\n import com.faforever.client.preferences.PreferencesService;\n import com.faforever.client.task.ResourceLocks;\n import lombok.extern.slf4j.Slf4j;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.InitializingBean;\n import org.springframework.stereotype.Service;\n \n import java.io.IOException;\n-import java.lang.invoke.MethodHandles;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.StandardCopyOption;\n import java.nio.file.attribute.BasicFileAttributes;\n import java.nio.file.attribute.FileTime;\n-import java.util.Calendar;\n+\n \n @Service\n @Slf4j\n public class FeaturedModFileCacheService implements InitializingBean {\n   private final Path cacheDirectory;\n   private int cacheLifeTime;\n-  private Calendar calendar;\n-  private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n \n   public FeaturedModFileCacheService(PreferencesService preferencesService) {\n     this.cacheDirectory = preferencesService.getCacheDirectory();\n-    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTime() * 1000 * 3600 * 24;\n-    this.calendar = Calendar.getInstance();\n+    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTimeInDays() * 1000 * 3600 * 24;\n   }\n \n   private String getCachedFileName(FeaturedModFile featuredModFile) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg5MzYwMA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r433893600", "bodyText": "There are dedicated methods to make that transition", "author": "1-alex98", "createdAt": "2020-06-02T13:54:45Z", "path": "src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package com.faforever.client.io;\n+\n+import com.faforever.client.api.dto.FeaturedModFile;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.task.ResourceLocks;\n+import lombok.extern.slf4j.Slf4j;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.lang.invoke.MethodHandles;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileTime;\n+import java.util.Calendar;\n+\n+@Service\n+@Slf4j\n+public class FeaturedModFileCacheService implements InitializingBean {\n+  private final Path cacheDirectory;\n+  private int cacheLifeTime;\n+  private Calendar calendar;\n+  private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n+\n+  public FeaturedModFileCacheService(PreferencesService preferencesService) {\n+    this.cacheDirectory = preferencesService.getCacheDirectory();\n+    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTime() * 1000 * 3600 * 24;", "originalCommit": "12c02a3be69a3399bdf7891b956d2b4861881745", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI2ODAzMA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r436268030", "bodyText": "Don't get it. Can you show me, where i can find them?", "author": "norraxx", "createdAt": "2020-06-06T13:11:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg5MzYwMA=="}], "type": "inlineReview", "revised_code": {"commit": "431896fadb2b9d685ee2c599e8e75091b17f6235", "chunk": "diff --git a/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java b/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\nindex a50f6ddc..82e13294 100644\n--- a/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\n+++ b/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\n\n@@ -4,32 +4,26 @@ import com.faforever.client.api.dto.FeaturedModFile;\n import com.faforever.client.preferences.PreferencesService;\n import com.faforever.client.task.ResourceLocks;\n import lombok.extern.slf4j.Slf4j;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.InitializingBean;\n import org.springframework.stereotype.Service;\n \n import java.io.IOException;\n-import java.lang.invoke.MethodHandles;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.StandardCopyOption;\n import java.nio.file.attribute.BasicFileAttributes;\n import java.nio.file.attribute.FileTime;\n-import java.util.Calendar;\n+\n \n @Service\n @Slf4j\n public class FeaturedModFileCacheService implements InitializingBean {\n   private final Path cacheDirectory;\n   private int cacheLifeTime;\n-  private Calendar calendar;\n-  private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n \n   public FeaturedModFileCacheService(PreferencesService preferencesService) {\n     this.cacheDirectory = preferencesService.getCacheDirectory();\n-    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTime() * 1000 * 3600 * 24;\n-    this.calendar = Calendar.getInstance();\n+    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTimeInDays() * 1000 * 3600 * 24;\n   }\n \n   private String getCachedFileName(FeaturedModFile featuredModFile) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg5NDQzOA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r433894438", "bodyText": "We normally use more modern classes like OffsetDateTime or Instant", "author": "1-alex98", "createdAt": "2020-06-02T13:55:43Z", "path": "src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package com.faforever.client.io;\n+\n+import com.faforever.client.api.dto.FeaturedModFile;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.task.ResourceLocks;\n+import lombok.extern.slf4j.Slf4j;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.lang.invoke.MethodHandles;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileTime;\n+import java.util.Calendar;\n+\n+@Service\n+@Slf4j\n+public class FeaturedModFileCacheService implements InitializingBean {\n+  private final Path cacheDirectory;\n+  private int cacheLifeTime;\n+  private Calendar calendar;", "originalCommit": "12c02a3be69a3399bdf7891b956d2b4861881745", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI2NzkyMg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r436267922", "bodyText": "I'll get rid of Calendar and use only System.currentTimeMillis(). Imho, it's better, cause any other funcitonality  i don't need.", "author": "norraxx", "createdAt": "2020-06-06T13:09:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg5NDQzOA=="}], "type": "inlineReview", "revised_code": {"commit": "431896fadb2b9d685ee2c599e8e75091b17f6235", "chunk": "diff --git a/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java b/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\nindex a50f6ddc..82e13294 100644\n--- a/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\n+++ b/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\n\n@@ -4,32 +4,26 @@ import com.faforever.client.api.dto.FeaturedModFile;\n import com.faforever.client.preferences.PreferencesService;\n import com.faforever.client.task.ResourceLocks;\n import lombok.extern.slf4j.Slf4j;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.InitializingBean;\n import org.springframework.stereotype.Service;\n \n import java.io.IOException;\n-import java.lang.invoke.MethodHandles;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.StandardCopyOption;\n import java.nio.file.attribute.BasicFileAttributes;\n import java.nio.file.attribute.FileTime;\n-import java.util.Calendar;\n+\n \n @Service\n @Slf4j\n public class FeaturedModFileCacheService implements InitializingBean {\n   private final Path cacheDirectory;\n   private int cacheLifeTime;\n-  private Calendar calendar;\n-  private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n \n   public FeaturedModFileCacheService(PreferencesService preferencesService) {\n     this.cacheDirectory = preferencesService.getCacheDirectory();\n-    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTime() * 1000 * 3600 * 24;\n-    this.calendar = Calendar.getInstance();\n+    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTimeInDays() * 1000 * 3600 * 24;\n   }\n \n   private String getCachedFileName(FeaturedModFile featuredModFile) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg5NTA5OQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r433895099", "bodyText": "aquie disk lock maybe", "author": "1-alex98", "createdAt": "2020-06-02T13:56:37Z", "path": "src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package com.faforever.client.io;\n+\n+import com.faforever.client.api.dto.FeaturedModFile;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.task.ResourceLocks;\n+import lombok.extern.slf4j.Slf4j;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.lang.invoke.MethodHandles;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileTime;\n+import java.util.Calendar;\n+\n+@Service\n+@Slf4j\n+public class FeaturedModFileCacheService implements InitializingBean {\n+  private final Path cacheDirectory;\n+  private int cacheLifeTime;\n+  private Calendar calendar;\n+  private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n+\n+  public FeaturedModFileCacheService(PreferencesService preferencesService) {\n+    this.cacheDirectory = preferencesService.getCacheDirectory();\n+    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTime() * 1000 * 3600 * 24;\n+    this.calendar = Calendar.getInstance();\n+  }\n+\n+  private String getCachedFileName(FeaturedModFile featuredModFile) {\n+    return String.format(\n+        \"%s.%s.%s.%s\",\n+        featuredModFile.getId(),\n+        featuredModFile.getVersion(),\n+        featuredModFile.getMd5(),\n+        featuredModFile.getName()\n+    );\n+  }\n+\n+  public Path getCachedFilePath(FeaturedModFile featuredModFile) {\n+    return cacheDirectory.resolve(featuredModFile.getGroup()).resolve(getCachedFileName(featuredModFile));\n+  }\n+\n+  public void copyFeaturedModFileFromCache(Path cacheFilePath, Path targetPath) throws java.io.IOException {\n+    Files.createDirectories(targetPath.getParent());\n+    ResourceLocks.acquireDiskLock();\n+\n+    try {\n+      Files.copy(cacheFilePath, targetPath, StandardCopyOption.REPLACE_EXISTING);\n+    } catch (Exception e) {\n+      logger.error(e.toString());\n+    } finally {\n+      ResourceLocks.freeDiskLock();\n+    }\n+  }\n+\n+  /**\n+   * Cleanup method, on service start, we'll get rid of old files.\n+   */\n+  @Override\n+  public void afterPropertiesSet() {\n+    Path[] directoryPaths = new Path[] {\n+        this.cacheDirectory.resolve(\"bin\"),\n+        this.cacheDirectory.resolve(\"gamedata\")\n+    };\n+\n+    try {\n+      for (Path directoryPath : directoryPaths) {\n+        Files.createDirectories(directoryPath);\n+        Files.walk(directoryPath).forEach(this::deleteCachedFileIfNeeded);\n+      }\n+    } catch (IOException e) {\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  private void deleteCachedFileIfNeeded(Path filePath) {", "originalCommit": "12c02a3be69a3399bdf7891b956d2b4861881745", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI2ODYzNw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r436268637", "bodyText": "done", "author": "norraxx", "createdAt": "2020-06-06T13:20:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg5NTA5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "431896fadb2b9d685ee2c599e8e75091b17f6235", "chunk": "diff --git a/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java b/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\nindex a50f6ddc..82e13294 100644\n--- a/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\n+++ b/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\n\n@@ -4,32 +4,26 @@ import com.faforever.client.api.dto.FeaturedModFile;\n import com.faforever.client.preferences.PreferencesService;\n import com.faforever.client.task.ResourceLocks;\n import lombok.extern.slf4j.Slf4j;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.InitializingBean;\n import org.springframework.stereotype.Service;\n \n import java.io.IOException;\n-import java.lang.invoke.MethodHandles;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.StandardCopyOption;\n import java.nio.file.attribute.BasicFileAttributes;\n import java.nio.file.attribute.FileTime;\n-import java.util.Calendar;\n+\n \n @Service\n @Slf4j\n public class FeaturedModFileCacheService implements InitializingBean {\n   private final Path cacheDirectory;\n   private int cacheLifeTime;\n-  private Calendar calendar;\n-  private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n \n   public FeaturedModFileCacheService(PreferencesService preferencesService) {\n     this.cacheDirectory = preferencesService.getCacheDirectory();\n-    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTime() * 1000 * 3600 * 24;\n-    this.calendar = Calendar.getInstance();\n+    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTimeInDays() * 1000 * 3600 * 24;\n   }\n \n   private String getCachedFileName(FeaturedModFile featuredModFile) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg5NTgwMA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r433895800", "bodyText": "we do never call printStackTrace that is like System.out.println and we use a logger @slf4j above the class give u an instance logger", "author": "1-alex98", "createdAt": "2020-06-02T13:57:38Z", "path": "src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package com.faforever.client.io;\n+\n+import com.faforever.client.api.dto.FeaturedModFile;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.task.ResourceLocks;\n+import lombok.extern.slf4j.Slf4j;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.lang.invoke.MethodHandles;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileTime;\n+import java.util.Calendar;\n+\n+@Service\n+@Slf4j\n+public class FeaturedModFileCacheService implements InitializingBean {\n+  private final Path cacheDirectory;\n+  private int cacheLifeTime;\n+  private Calendar calendar;\n+  private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n+\n+  public FeaturedModFileCacheService(PreferencesService preferencesService) {\n+    this.cacheDirectory = preferencesService.getCacheDirectory();\n+    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTime() * 1000 * 3600 * 24;\n+    this.calendar = Calendar.getInstance();\n+  }\n+\n+  private String getCachedFileName(FeaturedModFile featuredModFile) {\n+    return String.format(\n+        \"%s.%s.%s.%s\",\n+        featuredModFile.getId(),\n+        featuredModFile.getVersion(),\n+        featuredModFile.getMd5(),\n+        featuredModFile.getName()\n+    );\n+  }\n+\n+  public Path getCachedFilePath(FeaturedModFile featuredModFile) {\n+    return cacheDirectory.resolve(featuredModFile.getGroup()).resolve(getCachedFileName(featuredModFile));\n+  }\n+\n+  public void copyFeaturedModFileFromCache(Path cacheFilePath, Path targetPath) throws java.io.IOException {\n+    Files.createDirectories(targetPath.getParent());\n+    ResourceLocks.acquireDiskLock();\n+\n+    try {\n+      Files.copy(cacheFilePath, targetPath, StandardCopyOption.REPLACE_EXISTING);\n+    } catch (Exception e) {\n+      logger.error(e.toString());\n+    } finally {\n+      ResourceLocks.freeDiskLock();\n+    }\n+  }\n+\n+  /**\n+   * Cleanup method, on service start, we'll get rid of old files.\n+   */\n+  @Override\n+  public void afterPropertiesSet() {\n+    Path[] directoryPaths = new Path[] {\n+        this.cacheDirectory.resolve(\"bin\"),\n+        this.cacheDirectory.resolve(\"gamedata\")\n+    };\n+\n+    try {\n+      for (Path directoryPath : directoryPaths) {\n+        Files.createDirectories(directoryPath);\n+        Files.walk(directoryPath).forEach(this::deleteCachedFileIfNeeded);\n+      }\n+    } catch (IOException e) {\n+      e.printStackTrace();", "originalCommit": "12c02a3be69a3399bdf7891b956d2b4861881745", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI2ODQ1Nw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r436268457", "bodyText": "done", "author": "norraxx", "createdAt": "2020-06-06T13:17:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg5NTgwMA=="}], "type": "inlineReview", "revised_code": {"commit": "431896fadb2b9d685ee2c599e8e75091b17f6235", "chunk": "diff --git a/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java b/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\nindex a50f6ddc..82e13294 100644\n--- a/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\n+++ b/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\n\n@@ -4,32 +4,26 @@ import com.faforever.client.api.dto.FeaturedModFile;\n import com.faforever.client.preferences.PreferencesService;\n import com.faforever.client.task.ResourceLocks;\n import lombok.extern.slf4j.Slf4j;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.InitializingBean;\n import org.springframework.stereotype.Service;\n \n import java.io.IOException;\n-import java.lang.invoke.MethodHandles;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.StandardCopyOption;\n import java.nio.file.attribute.BasicFileAttributes;\n import java.nio.file.attribute.FileTime;\n-import java.util.Calendar;\n+\n \n @Service\n @Slf4j\n public class FeaturedModFileCacheService implements InitializingBean {\n   private final Path cacheDirectory;\n   private int cacheLifeTime;\n-  private Calendar calendar;\n-  private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n \n   public FeaturedModFileCacheService(PreferencesService preferencesService) {\n     this.cacheDirectory = preferencesService.getCacheDirectory();\n-    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTime() * 1000 * 3600 * 24;\n-    this.calendar = Calendar.getInstance();\n+    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTimeInDays() * 1000 * 3600 * 24;\n   }\n \n   private String getCachedFileName(FeaturedModFile featuredModFile) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg5NjA2OA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r433896068", "bodyText": "done by @slf4j", "author": "1-alex98", "createdAt": "2020-06-02T13:57:58Z", "path": "src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package com.faforever.client.io;\n+\n+import com.faforever.client.api.dto.FeaturedModFile;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.task.ResourceLocks;\n+import lombok.extern.slf4j.Slf4j;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.lang.invoke.MethodHandles;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileTime;\n+import java.util.Calendar;\n+\n+@Service\n+@Slf4j\n+public class FeaturedModFileCacheService implements InitializingBean {\n+  private final Path cacheDirectory;\n+  private int cacheLifeTime;\n+  private Calendar calendar;\n+  private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());", "originalCommit": "12c02a3be69a3399bdf7891b956d2b4861881745", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI2NzkyMw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r436267923", "bodyText": "done", "author": "norraxx", "createdAt": "2020-06-06T13:09:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg5NjA2OA=="}], "type": "inlineReview", "revised_code": {"commit": "431896fadb2b9d685ee2c599e8e75091b17f6235", "chunk": "diff --git a/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java b/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\nindex a50f6ddc..82e13294 100644\n--- a/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\n+++ b/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\n\n@@ -4,32 +4,26 @@ import com.faforever.client.api.dto.FeaturedModFile;\n import com.faforever.client.preferences.PreferencesService;\n import com.faforever.client.task.ResourceLocks;\n import lombok.extern.slf4j.Slf4j;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.InitializingBean;\n import org.springframework.stereotype.Service;\n \n import java.io.IOException;\n-import java.lang.invoke.MethodHandles;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.StandardCopyOption;\n import java.nio.file.attribute.BasicFileAttributes;\n import java.nio.file.attribute.FileTime;\n-import java.util.Calendar;\n+\n \n @Service\n @Slf4j\n public class FeaturedModFileCacheService implements InitializingBean {\n   private final Path cacheDirectory;\n   private int cacheLifeTime;\n-  private Calendar calendar;\n-  private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n \n   public FeaturedModFileCacheService(PreferencesService preferencesService) {\n     this.cacheDirectory = preferencesService.getCacheDirectory();\n-    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTime() * 1000 * 3600 * 24;\n-    this.calendar = Calendar.getInstance();\n+    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTimeInDays() * 1000 * 3600 * 24;\n   }\n \n   private String getCachedFileName(FeaturedModFile featuredModFile) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg5NjMyMg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r433896322", "bodyText": "1 Euro for every System.out.println pls", "author": "1-alex98", "createdAt": "2020-06-02T13:58:18Z", "path": "src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package com.faforever.client.io;\n+\n+import com.faforever.client.api.dto.FeaturedModFile;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.task.ResourceLocks;\n+import lombok.extern.slf4j.Slf4j;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.lang.invoke.MethodHandles;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileTime;\n+import java.util.Calendar;\n+\n+@Service\n+@Slf4j\n+public class FeaturedModFileCacheService implements InitializingBean {\n+  private final Path cacheDirectory;\n+  private int cacheLifeTime;\n+  private Calendar calendar;\n+  private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n+\n+  public FeaturedModFileCacheService(PreferencesService preferencesService) {\n+    this.cacheDirectory = preferencesService.getCacheDirectory();\n+    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTime() * 1000 * 3600 * 24;\n+    this.calendar = Calendar.getInstance();\n+  }\n+\n+  private String getCachedFileName(FeaturedModFile featuredModFile) {\n+    return String.format(\n+        \"%s.%s.%s.%s\",\n+        featuredModFile.getId(),\n+        featuredModFile.getVersion(),\n+        featuredModFile.getMd5(),\n+        featuredModFile.getName()\n+    );\n+  }\n+\n+  public Path getCachedFilePath(FeaturedModFile featuredModFile) {\n+    return cacheDirectory.resolve(featuredModFile.getGroup()).resolve(getCachedFileName(featuredModFile));\n+  }\n+\n+  public void copyFeaturedModFileFromCache(Path cacheFilePath, Path targetPath) throws java.io.IOException {\n+    Files.createDirectories(targetPath.getParent());\n+    ResourceLocks.acquireDiskLock();\n+\n+    try {\n+      Files.copy(cacheFilePath, targetPath, StandardCopyOption.REPLACE_EXISTING);\n+    } catch (Exception e) {\n+      logger.error(e.toString());\n+    } finally {\n+      ResourceLocks.freeDiskLock();\n+    }\n+  }\n+\n+  /**\n+   * Cleanup method, on service start, we'll get rid of old files.\n+   */\n+  @Override\n+  public void afterPropertiesSet() {\n+    Path[] directoryPaths = new Path[] {\n+        this.cacheDirectory.resolve(\"bin\"),\n+        this.cacheDirectory.resolve(\"gamedata\")\n+    };\n+\n+    try {\n+      for (Path directoryPath : directoryPaths) {\n+        Files.createDirectories(directoryPath);\n+        Files.walk(directoryPath).forEach(this::deleteCachedFileIfNeeded);\n+      }\n+    } catch (IOException e) {\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  private void deleteCachedFileIfNeeded(Path filePath) {\n+    try {\n+      if (Files.isDirectory(filePath)) {\n+        return;\n+      }\n+\n+      FileTime lastAccessTime = Files.readAttributes(filePath, BasicFileAttributes.class).lastAccessTime();\n+      if (lastAccessTime.toMillis() + cacheLifeTime < calendar.getTimeInMillis()) {\n+        System.out.println(\"deleting: \" + filePath.toString());", "originalCommit": "12c02a3be69a3399bdf7891b956d2b4861881745", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI2ODYzOQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r436268639", "bodyText": "done", "author": "norraxx", "createdAt": "2020-06-06T13:20:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg5NjMyMg=="}], "type": "inlineReview", "revised_code": {"commit": "431896fadb2b9d685ee2c599e8e75091b17f6235", "chunk": "diff --git a/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java b/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\nindex a50f6ddc..82e13294 100644\n--- a/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\n+++ b/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\n\n@@ -4,32 +4,26 @@ import com.faforever.client.api.dto.FeaturedModFile;\n import com.faforever.client.preferences.PreferencesService;\n import com.faforever.client.task.ResourceLocks;\n import lombok.extern.slf4j.Slf4j;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.InitializingBean;\n import org.springframework.stereotype.Service;\n \n import java.io.IOException;\n-import java.lang.invoke.MethodHandles;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.StandardCopyOption;\n import java.nio.file.attribute.BasicFileAttributes;\n import java.nio.file.attribute.FileTime;\n-import java.util.Calendar;\n+\n \n @Service\n @Slf4j\n public class FeaturedModFileCacheService implements InitializingBean {\n   private final Path cacheDirectory;\n   private int cacheLifeTime;\n-  private Calendar calendar;\n-  private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n \n   public FeaturedModFileCacheService(PreferencesService preferencesService) {\n     this.cacheDirectory = preferencesService.getCacheDirectory();\n-    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTime() * 1000 * 3600 * 24;\n-    this.calendar = Calendar.getInstance();\n+    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTimeInDays() * 1000 * 3600 * 24;\n   }\n \n   private String getCachedFileName(FeaturedModFile featuredModFile) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg5NjQwNQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r433896405", "bodyText": "nope", "author": "1-alex98", "createdAt": "2020-06-02T13:58:25Z", "path": "src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package com.faforever.client.io;\n+\n+import com.faforever.client.api.dto.FeaturedModFile;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.task.ResourceLocks;\n+import lombok.extern.slf4j.Slf4j;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.lang.invoke.MethodHandles;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileTime;\n+import java.util.Calendar;\n+\n+@Service\n+@Slf4j\n+public class FeaturedModFileCacheService implements InitializingBean {\n+  private final Path cacheDirectory;\n+  private int cacheLifeTime;\n+  private Calendar calendar;\n+  private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n+\n+  public FeaturedModFileCacheService(PreferencesService preferencesService) {\n+    this.cacheDirectory = preferencesService.getCacheDirectory();\n+    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTime() * 1000 * 3600 * 24;\n+    this.calendar = Calendar.getInstance();\n+  }\n+\n+  private String getCachedFileName(FeaturedModFile featuredModFile) {\n+    return String.format(\n+        \"%s.%s.%s.%s\",\n+        featuredModFile.getId(),\n+        featuredModFile.getVersion(),\n+        featuredModFile.getMd5(),\n+        featuredModFile.getName()\n+    );\n+  }\n+\n+  public Path getCachedFilePath(FeaturedModFile featuredModFile) {\n+    return cacheDirectory.resolve(featuredModFile.getGroup()).resolve(getCachedFileName(featuredModFile));\n+  }\n+\n+  public void copyFeaturedModFileFromCache(Path cacheFilePath, Path targetPath) throws java.io.IOException {\n+    Files.createDirectories(targetPath.getParent());\n+    ResourceLocks.acquireDiskLock();\n+\n+    try {\n+      Files.copy(cacheFilePath, targetPath, StandardCopyOption.REPLACE_EXISTING);\n+    } catch (Exception e) {\n+      logger.error(e.toString());\n+    } finally {\n+      ResourceLocks.freeDiskLock();\n+    }\n+  }\n+\n+  /**\n+   * Cleanup method, on service start, we'll get rid of old files.\n+   */\n+  @Override\n+  public void afterPropertiesSet() {\n+    Path[] directoryPaths = new Path[] {\n+        this.cacheDirectory.resolve(\"bin\"),\n+        this.cacheDirectory.resolve(\"gamedata\")\n+    };\n+\n+    try {\n+      for (Path directoryPath : directoryPaths) {\n+        Files.createDirectories(directoryPath);\n+        Files.walk(directoryPath).forEach(this::deleteCachedFileIfNeeded);\n+      }\n+    } catch (IOException e) {\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  private void deleteCachedFileIfNeeded(Path filePath) {\n+    try {\n+      if (Files.isDirectory(filePath)) {\n+        return;\n+      }\n+\n+      FileTime lastAccessTime = Files.readAttributes(filePath, BasicFileAttributes.class).lastAccessTime();\n+      if (lastAccessTime.toMillis() + cacheLifeTime < calendar.getTimeInMillis()) {\n+        System.out.println(\"deleting: \" + filePath.toString());\n+        Files.deleteIfExists(filePath);\n+      }\n+    } catch (IOException e) {\n+      e.printStackTrace();", "originalCommit": "12c02a3be69a3399bdf7891b956d2b4861881745", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI2ODY1Mg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r436268652", "bodyText": "done", "author": "norraxx", "createdAt": "2020-06-06T13:20:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg5NjQwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "431896fadb2b9d685ee2c599e8e75091b17f6235", "chunk": "diff --git a/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java b/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\nindex a50f6ddc..82e13294 100644\n--- a/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\n+++ b/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\n\n@@ -4,32 +4,26 @@ import com.faforever.client.api.dto.FeaturedModFile;\n import com.faforever.client.preferences.PreferencesService;\n import com.faforever.client.task.ResourceLocks;\n import lombok.extern.slf4j.Slf4j;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.InitializingBean;\n import org.springframework.stereotype.Service;\n \n import java.io.IOException;\n-import java.lang.invoke.MethodHandles;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.StandardCopyOption;\n import java.nio.file.attribute.BasicFileAttributes;\n import java.nio.file.attribute.FileTime;\n-import java.util.Calendar;\n+\n \n @Service\n @Slf4j\n public class FeaturedModFileCacheService implements InitializingBean {\n   private final Path cacheDirectory;\n   private int cacheLifeTime;\n-  private Calendar calendar;\n-  private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n \n   public FeaturedModFileCacheService(PreferencesService preferencesService) {\n     this.cacheDirectory = preferencesService.getCacheDirectory();\n-    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTime() * 1000 * 3600 * 24;\n-    this.calendar = Calendar.getInstance();\n+    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTimeInDays() * 1000 * 3600 * 24;\n   }\n \n   private String getCachedFileName(FeaturedModFile featuredModFile) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg5NzM4NQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r433897385", "bodyText": "Maybe reflect unit in name", "author": "1-alex98", "createdAt": "2020-06-02T13:59:46Z", "path": "src/main/java/com/faforever/client/preferences/Preferences.java", "diffHunk": "@@ -81,6 +84,7 @@ public Preferences() {\n     showGameDetailsSidePane = new SimpleBooleanProperty(false);\n     advancedIceLogEnabled = new SimpleBooleanProperty(false);\n     prereleaseCheckEnabled = new SimpleBooleanProperty(false);\n+    cacheLifeTime = new SimpleIntegerProperty(30);", "originalCommit": "12c02a3be69a3399bdf7891b956d2b4861881745", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "431896fadb2b9d685ee2c599e8e75091b17f6235", "chunk": "diff --git a/src/main/java/com/faforever/client/preferences/Preferences.java b/src/main/java/com/faforever/client/preferences/Preferences.java\nindex 7ce94ba8..fac7fc4a 100644\n--- a/src/main/java/com/faforever/client/preferences/Preferences.java\n+++ b/src/main/java/com/faforever/client/preferences/Preferences.java\n\n@@ -84,7 +84,7 @@ public class Preferences {\n     showGameDetailsSidePane = new SimpleBooleanProperty(false);\n     advancedIceLogEnabled = new SimpleBooleanProperty(false);\n     prereleaseCheckEnabled = new SimpleBooleanProperty(false);\n-    cacheLifeTime = new SimpleIntegerProperty(30);\n+    cacheLifeTimeInDays = new SimpleIntegerProperty(30);\n   }\n \n   public VaultPrefs getVaultPrefs() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI2NDQ0Ng==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r436264446", "bodyText": "logger.info(\"Downloading {}\", cacheFilePath)", "author": "micheljung", "createdAt": "2020-06-06T12:20:01Z", "path": "src/main/java/com/faforever/client/patch/SimpleHttpFeaturedModUpdaterTask.java", "diffHunk": "@@ -54,32 +68,50 @@ protected PatchResult call() throws Exception {\n     updateMessage(i18n.get(\"updater.readingFileList\"));\n \n     List<FeaturedModFile> featuredModFiles = fafService.getFeaturedModFiles(featuredMod, version).get();\n+    Path fafDataDirectory = preferencesService.getFafDataDirectory();\n \n     Path initFile = null;\n+    Path cacheFilePath;\n+    Path targetPath;\n+\n+    Map<String, String> knownTargetHashes = new HashMap<>();\n+\n+    // Download to cache if file exists in target place, otherwise, download to direct place.\n     for (FeaturedModFile featuredModFile : featuredModFiles) {\n-      Path fafDataDirectory = preferencesService.getFafDataDirectory();\n-      Path targetPath = fafDataDirectory\n-          .resolve(featuredModFile.getGroup())\n-          .resolve(featuredModFile.getName());\n-\n-      if (Files.exists(targetPath)\n-          && featuredModFile.getMd5().equals(com.google.common.io.Files.hash(targetPath.toFile(), Hashing.md5()).toString())) {\n-        logger.debug(\"Already up to date: {}\", targetPath);\n+      targetPath = fafDataDirectory.resolve(featuredModFile.getGroup()).resolve(featuredModFile.getName());\n+      cacheFilePath = featuredModFileCacheService.getCachedFilePath(featuredModFile);\n+\n+      String existingTargetFileHash = null;\n+      if (Files.exists(targetPath)) {\n+        existingTargetFileHash = com.google.common.io.Files.hash(targetPath.toFile(), Hashing.md5()).toString();\n+        knownTargetHashes.put(targetPath.toString(), existingTargetFileHash);\n+\n+        if (!featuredModFile.getMd5().equals(existingTargetFileHash)) {\n+          logger.info(String.format(\"downloading: %s\", cacheFilePath.toString()));", "originalCommit": "12c02a3be69a3399bdf7891b956d2b4861881745", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI2OTYwNQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r436269605", "bodyText": "Welcome back! :-)", "author": "norraxx", "createdAt": "2020-06-06T13:35:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI2NDQ0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI2OTc1MA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r436269750", "bodyText": "Done", "author": "norraxx", "createdAt": "2020-06-06T13:37:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI2NDQ0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "431896fadb2b9d685ee2c599e8e75091b17f6235", "chunk": "diff --git a/src/main/java/com/faforever/client/patch/SimpleHttpFeaturedModUpdaterTask.java b/src/main/java/com/faforever/client/patch/SimpleHttpFeaturedModUpdaterTask.java\nindex 3d27b3aa..271a794b 100644\n--- a/src/main/java/com/faforever/client/patch/SimpleHttpFeaturedModUpdaterTask.java\n+++ b/src/main/java/com/faforever/client/patch/SimpleHttpFeaturedModUpdaterTask.java\n\n@@ -85,15 +85,11 @@ public class SimpleHttpFeaturedModUpdaterTask extends CompletableTask<PatchResul\n       if (Files.exists(targetPath)) {\n         existingTargetFileHash = com.google.common.io.Files.hash(targetPath.toFile(), Hashing.md5()).toString();\n         knownTargetHashes.put(targetPath.toString(), existingTargetFileHash);\n+      }\n \n-        if (!featuredModFile.getMd5().equals(existingTargetFileHash)) {\n-          logger.info(String.format(\"downloading: %s\", cacheFilePath.toString()));\n-          downloadFeaturedModFile(featuredModFile, cacheFilePath);\n-        }\n-      } else {\n-        logger.info(String.format(\"downloading: %s\", targetPath.toString()));\n-        downloadFeaturedModFile(featuredModFile, targetPath);\n-        knownTargetHashes.put(targetPath.toString(), featuredModFile.getMd5());\n+      if (!featuredModFile.getMd5().equals(existingTargetFileHash)) {\n+        logger.info(String.format(\"downloading: %s\", cacheFilePath.toString()));\n+        downloadFeaturedModFile(featuredModFile, cacheFilePath);\n       }\n \n       if (\"bin\".equals(featuredModFile.getGroup()) && initFileName.equalsIgnoreCase(featuredModFile.getName())) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI2NDQ3Nw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r436264477", "bodyText": "logger.info(\"Downloading {}\", targetPath)", "author": "micheljung", "createdAt": "2020-06-06T12:20:12Z", "path": "src/main/java/com/faforever/client/patch/SimpleHttpFeaturedModUpdaterTask.java", "diffHunk": "@@ -54,32 +68,50 @@ protected PatchResult call() throws Exception {\n     updateMessage(i18n.get(\"updater.readingFileList\"));\n \n     List<FeaturedModFile> featuredModFiles = fafService.getFeaturedModFiles(featuredMod, version).get();\n+    Path fafDataDirectory = preferencesService.getFafDataDirectory();\n \n     Path initFile = null;\n+    Path cacheFilePath;\n+    Path targetPath;\n+\n+    Map<String, String> knownTargetHashes = new HashMap<>();\n+\n+    // Download to cache if file exists in target place, otherwise, download to direct place.\n     for (FeaturedModFile featuredModFile : featuredModFiles) {\n-      Path fafDataDirectory = preferencesService.getFafDataDirectory();\n-      Path targetPath = fafDataDirectory\n-          .resolve(featuredModFile.getGroup())\n-          .resolve(featuredModFile.getName());\n-\n-      if (Files.exists(targetPath)\n-          && featuredModFile.getMd5().equals(com.google.common.io.Files.hash(targetPath.toFile(), Hashing.md5()).toString())) {\n-        logger.debug(\"Already up to date: {}\", targetPath);\n+      targetPath = fafDataDirectory.resolve(featuredModFile.getGroup()).resolve(featuredModFile.getName());\n+      cacheFilePath = featuredModFileCacheService.getCachedFilePath(featuredModFile);\n+\n+      String existingTargetFileHash = null;\n+      if (Files.exists(targetPath)) {\n+        existingTargetFileHash = com.google.common.io.Files.hash(targetPath.toFile(), Hashing.md5()).toString();\n+        knownTargetHashes.put(targetPath.toString(), existingTargetFileHash);\n+\n+        if (!featuredModFile.getMd5().equals(existingTargetFileHash)) {\n+          logger.info(String.format(\"downloading: %s\", cacheFilePath.toString()));\n+          downloadFeaturedModFile(featuredModFile, cacheFilePath);\n+        }\n       } else {\n-        Files.createDirectories(targetPath.getParent());\n-        updateMessage(i18n.get(\"updater.downloadingFile\", targetPath.getFileName()));\n-\n-        String url = featuredModFile.getUrl();\n-        downloadService.downloadFile(new URL(url), targetPath, this::updateProgress);\n-        UpdaterUtil.extractMoviesIfPresent(targetPath, fafDataDirectory);\n+        logger.info(String.format(\"downloading: %s\", targetPath.toString()));", "originalCommit": "12c02a3be69a3399bdf7891b956d2b4861881745", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI2OTc1NA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r436269754", "bodyText": "done", "author": "norraxx", "createdAt": "2020-06-06T13:37:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI2NDQ3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "431896fadb2b9d685ee2c599e8e75091b17f6235", "chunk": "diff --git a/src/main/java/com/faforever/client/patch/SimpleHttpFeaturedModUpdaterTask.java b/src/main/java/com/faforever/client/patch/SimpleHttpFeaturedModUpdaterTask.java\nindex 3d27b3aa..271a794b 100644\n--- a/src/main/java/com/faforever/client/patch/SimpleHttpFeaturedModUpdaterTask.java\n+++ b/src/main/java/com/faforever/client/patch/SimpleHttpFeaturedModUpdaterTask.java\n\n@@ -85,15 +85,11 @@ public class SimpleHttpFeaturedModUpdaterTask extends CompletableTask<PatchResul\n       if (Files.exists(targetPath)) {\n         existingTargetFileHash = com.google.common.io.Files.hash(targetPath.toFile(), Hashing.md5()).toString();\n         knownTargetHashes.put(targetPath.toString(), existingTargetFileHash);\n+      }\n \n-        if (!featuredModFile.getMd5().equals(existingTargetFileHash)) {\n-          logger.info(String.format(\"downloading: %s\", cacheFilePath.toString()));\n-          downloadFeaturedModFile(featuredModFile, cacheFilePath);\n-        }\n-      } else {\n-        logger.info(String.format(\"downloading: %s\", targetPath.toString()));\n-        downloadFeaturedModFile(featuredModFile, targetPath);\n-        knownTargetHashes.put(targetPath.toString(), featuredModFile.getMd5());\n+      if (!featuredModFile.getMd5().equals(existingTargetFileHash)) {\n+        logger.info(String.format(\"downloading: %s\", cacheFilePath.toString()));\n+        downloadFeaturedModFile(featuredModFile, cacheFilePath);\n       }\n \n       if (\"bin\".equals(featuredModFile.getGroup()) && initFileName.equalsIgnoreCase(featuredModFile.getName())) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI2NDUyNg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r436264526", "bodyText": "logger.info(\"Copying featured mod file '{}' to '{}'\", cacheFilePath, targetPath);", "author": "micheljung", "createdAt": "2020-06-06T12:20:54Z", "path": "src/main/java/com/faforever/client/patch/SimpleHttpFeaturedModUpdaterTask.java", "diffHunk": "@@ -54,32 +68,50 @@ protected PatchResult call() throws Exception {\n     updateMessage(i18n.get(\"updater.readingFileList\"));\n \n     List<FeaturedModFile> featuredModFiles = fafService.getFeaturedModFiles(featuredMod, version).get();\n+    Path fafDataDirectory = preferencesService.getFafDataDirectory();\n \n     Path initFile = null;\n+    Path cacheFilePath;\n+    Path targetPath;\n+\n+    Map<String, String> knownTargetHashes = new HashMap<>();\n+\n+    // Download to cache if file exists in target place, otherwise, download to direct place.\n     for (FeaturedModFile featuredModFile : featuredModFiles) {\n-      Path fafDataDirectory = preferencesService.getFafDataDirectory();\n-      Path targetPath = fafDataDirectory\n-          .resolve(featuredModFile.getGroup())\n-          .resolve(featuredModFile.getName());\n-\n-      if (Files.exists(targetPath)\n-          && featuredModFile.getMd5().equals(com.google.common.io.Files.hash(targetPath.toFile(), Hashing.md5()).toString())) {\n-        logger.debug(\"Already up to date: {}\", targetPath);\n+      targetPath = fafDataDirectory.resolve(featuredModFile.getGroup()).resolve(featuredModFile.getName());\n+      cacheFilePath = featuredModFileCacheService.getCachedFilePath(featuredModFile);\n+\n+      String existingTargetFileHash = null;\n+      if (Files.exists(targetPath)) {\n+        existingTargetFileHash = com.google.common.io.Files.hash(targetPath.toFile(), Hashing.md5()).toString();\n+        knownTargetHashes.put(targetPath.toString(), existingTargetFileHash);\n+\n+        if (!featuredModFile.getMd5().equals(existingTargetFileHash)) {\n+          logger.info(String.format(\"downloading: %s\", cacheFilePath.toString()));\n+          downloadFeaturedModFile(featuredModFile, cacheFilePath);\n+        }\n       } else {\n-        Files.createDirectories(targetPath.getParent());\n-        updateMessage(i18n.get(\"updater.downloadingFile\", targetPath.getFileName()));\n-\n-        String url = featuredModFile.getUrl();\n-        downloadService.downloadFile(new URL(url), targetPath, this::updateProgress);\n-        UpdaterUtil.extractMoviesIfPresent(targetPath, fafDataDirectory);\n+        logger.info(String.format(\"downloading: %s\", targetPath.toString()));\n+        downloadFeaturedModFile(featuredModFile, targetPath);\n+        knownTargetHashes.put(targetPath.toString(), featuredModFile.getMd5());\n       }\n \n-\n       if (\"bin\".equals(featuredModFile.getGroup()) && initFileName.equalsIgnoreCase(featuredModFile.getName())) {\n         initFile = targetPath;\n       }\n     }\n \n+    for (FeaturedModFile featuredModFile : featuredModFiles) {\n+      targetPath = fafDataDirectory.resolve(featuredModFile.getGroup()).resolve(featuredModFile.getName());\n+      cacheFilePath = featuredModFileCacheService.getCachedFilePath(featuredModFile);\n+      String existingTargetFileHash = knownTargetHashes.get(targetPath.toString());\n+\n+      if (!featuredModFile.getMd5().equals(existingTargetFileHash)) {\n+        logger.info(String.format(\"copying featured mod file: %s to %s\", cacheFilePath.toString(), targetPath.toString()));", "originalCommit": "12c02a3be69a3399bdf7891b956d2b4861881745", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI2OTgwOA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r436269808", "bodyText": "done", "author": "norraxx", "createdAt": "2020-06-06T13:38:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI2NDUyNg=="}], "type": "inlineReview", "revised_code": {"commit": "431896fadb2b9d685ee2c599e8e75091b17f6235", "chunk": "diff --git a/src/main/java/com/faforever/client/patch/SimpleHttpFeaturedModUpdaterTask.java b/src/main/java/com/faforever/client/patch/SimpleHttpFeaturedModUpdaterTask.java\nindex 3d27b3aa..271a794b 100644\n--- a/src/main/java/com/faforever/client/patch/SimpleHttpFeaturedModUpdaterTask.java\n+++ b/src/main/java/com/faforever/client/patch/SimpleHttpFeaturedModUpdaterTask.java\n\n@@ -85,15 +85,11 @@ public class SimpleHttpFeaturedModUpdaterTask extends CompletableTask<PatchResul\n       if (Files.exists(targetPath)) {\n         existingTargetFileHash = com.google.common.io.Files.hash(targetPath.toFile(), Hashing.md5()).toString();\n         knownTargetHashes.put(targetPath.toString(), existingTargetFileHash);\n+      }\n \n-        if (!featuredModFile.getMd5().equals(existingTargetFileHash)) {\n-          logger.info(String.format(\"downloading: %s\", cacheFilePath.toString()));\n-          downloadFeaturedModFile(featuredModFile, cacheFilePath);\n-        }\n-      } else {\n-        logger.info(String.format(\"downloading: %s\", targetPath.toString()));\n-        downloadFeaturedModFile(featuredModFile, targetPath);\n-        knownTargetHashes.put(targetPath.toString(), featuredModFile.getMd5());\n+      if (!featuredModFile.getMd5().equals(existingTargetFileHash)) {\n+        logger.info(String.format(\"downloading: %s\", cacheFilePath.toString()));\n+        downloadFeaturedModFile(featuredModFile, cacheFilePath);\n       }\n \n       if (\"bin\".equals(featuredModFile.getGroup()) && initFileName.equalsIgnoreCase(featuredModFile.getName())) {\n"}}, {"oid": "431896fadb2b9d685ee2c599e8e75091b17f6235", "url": "https://github.com/FAForever/downlords-faf-client/commit/431896fadb2b9d685ee2c599e8e75091b17f6235", "message": "Fixing logging, removing all files in directory, 1 euro fixes, to be continued", "committedDate": "2020-06-06T13:35:36Z", "type": "forcePushed"}, {"oid": "21270effe3102b5be809ad110ac9e52323ae73dc", "url": "https://github.com/FAForever/downlords-faf-client/commit/21270effe3102b5be809ad110ac9e52323ae73dc", "message": "Logger fixing", "committedDate": "2020-06-06T18:57:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNDY3MA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r436304670", "bodyText": "There are metods to make this calculation. Instant or OffsetDateTime", "author": "1-alex98", "createdAt": "2020-06-06T22:12:46Z", "path": "src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.faforever.client.io;\n+\n+import com.faforever.client.api.dto.FeaturedModFile;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.task.ResourceLocks;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileTime;\n+\n+\n+@Service\n+@Slf4j\n+public class FeaturedModFileCacheService implements InitializingBean {\n+  private final Path cacheDirectory;\n+  private int cacheLifeTime;\n+\n+  public FeaturedModFileCacheService(PreferencesService preferencesService) {\n+    this.cacheDirectory = preferencesService.getCacheDirectory();\n+    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTimeInDays() * 1000 * 3600 * 24;", "originalCommit": "21270effe3102b5be809ad110ac9e52323ae73dc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "196687d0dfcf30ddbd09ca24067088d1ace00018", "chunk": "diff --git a/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java b/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\nindex 82e13294..1d34c924 100644\n--- a/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\n+++ b/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\n\n@@ -4,26 +4,32 @@ import com.faforever.client.api.dto.FeaturedModFile;\n import com.faforever.client.preferences.PreferencesService;\n import com.faforever.client.task.ResourceLocks;\n import lombok.extern.slf4j.Slf4j;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.InitializingBean;\n import org.springframework.stereotype.Service;\n \n import java.io.IOException;\n+import java.lang.invoke.MethodHandles;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.StandardCopyOption;\n import java.nio.file.attribute.BasicFileAttributes;\n import java.nio.file.attribute.FileTime;\n-\n+import java.util.Calendar;\n \n @Service\n @Slf4j\n public class FeaturedModFileCacheService implements InitializingBean {\n   private final Path cacheDirectory;\n   private int cacheLifeTime;\n+  private Calendar calendar;\n+  private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n \n   public FeaturedModFileCacheService(PreferencesService preferencesService) {\n     this.cacheDirectory = preferencesService.getCacheDirectory();\n-    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTimeInDays() * 1000 * 3600 * 24;\n+    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTime() * 1000 * 3600 * 24;\n+    this.calendar = Calendar.getInstance();\n   }\n \n   private String getCachedFileName(FeaturedModFile featuredModFile) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNDk1MA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r436304950", "bodyText": "throw new RuntimeException(e)", "author": "1-alex98", "createdAt": "2020-06-06T22:16:13Z", "path": "src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.faforever.client.io;\n+\n+import com.faforever.client.api.dto.FeaturedModFile;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.task.ResourceLocks;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileTime;\n+\n+\n+@Service\n+@Slf4j\n+public class FeaturedModFileCacheService implements InitializingBean {\n+  private final Path cacheDirectory;\n+  private int cacheLifeTime;\n+\n+  public FeaturedModFileCacheService(PreferencesService preferencesService) {\n+    this.cacheDirectory = preferencesService.getCacheDirectory();\n+    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTimeInDays() * 1000 * 3600 * 24;\n+  }\n+\n+  private String getCachedFileName(FeaturedModFile featuredModFile) {\n+    return String.format(\n+        \"%s.%s.%s.%s\",\n+        featuredModFile.getId(),\n+        featuredModFile.getVersion(),\n+        featuredModFile.getMd5(),\n+        featuredModFile.getName()\n+    );\n+  }\n+\n+  public Path getCachedFilePath(FeaturedModFile featuredModFile) {\n+    return cacheDirectory.resolve(featuredModFile.getGroup()).resolve(getCachedFileName(featuredModFile));\n+  }\n+\n+  public void copyFeaturedModFileFromCache(Path cacheFilePath, Path targetPath) throws java.io.IOException {\n+    Files.createDirectories(targetPath.getParent());\n+    ResourceLocks.acquireDiskLock();\n+\n+    try {\n+      Files.copy(cacheFilePath, targetPath, StandardCopyOption.REPLACE_EXISTING);\n+    } catch (Exception e) {\n+      log.error(e.toString());", "originalCommit": "21270effe3102b5be809ad110ac9e52323ae73dc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "196687d0dfcf30ddbd09ca24067088d1ace00018", "chunk": "diff --git a/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java b/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\nindex 82e13294..1d34c924 100644\n--- a/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\n+++ b/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\n\n@@ -4,26 +4,32 @@ import com.faforever.client.api.dto.FeaturedModFile;\n import com.faforever.client.preferences.PreferencesService;\n import com.faforever.client.task.ResourceLocks;\n import lombok.extern.slf4j.Slf4j;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.InitializingBean;\n import org.springframework.stereotype.Service;\n \n import java.io.IOException;\n+import java.lang.invoke.MethodHandles;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.StandardCopyOption;\n import java.nio.file.attribute.BasicFileAttributes;\n import java.nio.file.attribute.FileTime;\n-\n+import java.util.Calendar;\n \n @Service\n @Slf4j\n public class FeaturedModFileCacheService implements InitializingBean {\n   private final Path cacheDirectory;\n   private int cacheLifeTime;\n+  private Calendar calendar;\n+  private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n \n   public FeaturedModFileCacheService(PreferencesService preferencesService) {\n     this.cacheDirectory = preferencesService.getCacheDirectory();\n-    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTimeInDays() * 1000 * 3600 * 24;\n+    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTime() * 1000 * 3600 * 24;\n+    this.calendar = Calendar.getInstance();\n   }\n \n   private String getCachedFileName(FeaturedModFile featuredModFile) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNDk2Mg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r436304962", "bodyText": "@SneakyThrows", "author": "1-alex98", "createdAt": "2020-06-06T22:16:27Z", "path": "src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.faforever.client.io;\n+\n+import com.faforever.client.api.dto.FeaturedModFile;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.task.ResourceLocks;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileTime;\n+\n+\n+@Service\n+@Slf4j\n+public class FeaturedModFileCacheService implements InitializingBean {\n+  private final Path cacheDirectory;\n+  private int cacheLifeTime;\n+\n+  public FeaturedModFileCacheService(PreferencesService preferencesService) {\n+    this.cacheDirectory = preferencesService.getCacheDirectory();\n+    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTimeInDays() * 1000 * 3600 * 24;\n+  }\n+\n+  private String getCachedFileName(FeaturedModFile featuredModFile) {\n+    return String.format(\n+        \"%s.%s.%s.%s\",\n+        featuredModFile.getId(),\n+        featuredModFile.getVersion(),\n+        featuredModFile.getMd5(),\n+        featuredModFile.getName()\n+    );\n+  }\n+\n+  public Path getCachedFilePath(FeaturedModFile featuredModFile) {\n+    return cacheDirectory.resolve(featuredModFile.getGroup()).resolve(getCachedFileName(featuredModFile));\n+  }\n+\n+  public void copyFeaturedModFileFromCache(Path cacheFilePath, Path targetPath) throws java.io.IOException {", "originalCommit": "21270effe3102b5be809ad110ac9e52323ae73dc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "196687d0dfcf30ddbd09ca24067088d1ace00018", "chunk": "diff --git a/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java b/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\nindex 82e13294..1d34c924 100644\n--- a/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\n+++ b/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\n\n@@ -4,26 +4,32 @@ import com.faforever.client.api.dto.FeaturedModFile;\n import com.faforever.client.preferences.PreferencesService;\n import com.faforever.client.task.ResourceLocks;\n import lombok.extern.slf4j.Slf4j;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.InitializingBean;\n import org.springframework.stereotype.Service;\n \n import java.io.IOException;\n+import java.lang.invoke.MethodHandles;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.StandardCopyOption;\n import java.nio.file.attribute.BasicFileAttributes;\n import java.nio.file.attribute.FileTime;\n-\n+import java.util.Calendar;\n \n @Service\n @Slf4j\n public class FeaturedModFileCacheService implements InitializingBean {\n   private final Path cacheDirectory;\n   private int cacheLifeTime;\n+  private Calendar calendar;\n+  private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n \n   public FeaturedModFileCacheService(PreferencesService preferencesService) {\n     this.cacheDirectory = preferencesService.getCacheDirectory();\n-    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTimeInDays() * 1000 * 3600 * 24;\n+    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTime() * 1000 * 3600 * 24;\n+    this.calendar = Calendar.getInstance();\n   }\n \n   private String getCachedFileName(FeaturedModFile featuredModFile) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNDk4NA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r436304984", "bodyText": "just purge that", "author": "1-alex98", "createdAt": "2020-06-06T22:17:01Z", "path": "src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.faforever.client.io;\n+\n+import com.faforever.client.api.dto.FeaturedModFile;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.task.ResourceLocks;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileTime;\n+\n+\n+@Service\n+@Slf4j\n+public class FeaturedModFileCacheService implements InitializingBean {\n+  private final Path cacheDirectory;\n+  private int cacheLifeTime;\n+\n+  public FeaturedModFileCacheService(PreferencesService preferencesService) {\n+    this.cacheDirectory = preferencesService.getCacheDirectory();\n+    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTimeInDays() * 1000 * 3600 * 24;\n+  }\n+\n+  private String getCachedFileName(FeaturedModFile featuredModFile) {\n+    return String.format(\n+        \"%s.%s.%s.%s\",\n+        featuredModFile.getId(),\n+        featuredModFile.getVersion(),\n+        featuredModFile.getMd5(),\n+        featuredModFile.getName()\n+    );\n+  }\n+\n+  public Path getCachedFilePath(FeaturedModFile featuredModFile) {\n+    return cacheDirectory.resolve(featuredModFile.getGroup()).resolve(getCachedFileName(featuredModFile));\n+  }\n+\n+  public void copyFeaturedModFileFromCache(Path cacheFilePath, Path targetPath) throws java.io.IOException {\n+    Files.createDirectories(targetPath.getParent());\n+    ResourceLocks.acquireDiskLock();\n+\n+    try {\n+      Files.copy(cacheFilePath, targetPath, StandardCopyOption.REPLACE_EXISTING);\n+    } catch (Exception e) {", "originalCommit": "21270effe3102b5be809ad110ac9e52323ae73dc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "196687d0dfcf30ddbd09ca24067088d1ace00018", "chunk": "diff --git a/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java b/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\nindex 82e13294..1d34c924 100644\n--- a/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\n+++ b/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\n\n@@ -4,26 +4,32 @@ import com.faforever.client.api.dto.FeaturedModFile;\n import com.faforever.client.preferences.PreferencesService;\n import com.faforever.client.task.ResourceLocks;\n import lombok.extern.slf4j.Slf4j;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.InitializingBean;\n import org.springframework.stereotype.Service;\n \n import java.io.IOException;\n+import java.lang.invoke.MethodHandles;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.StandardCopyOption;\n import java.nio.file.attribute.BasicFileAttributes;\n import java.nio.file.attribute.FileTime;\n-\n+import java.util.Calendar;\n \n @Service\n @Slf4j\n public class FeaturedModFileCacheService implements InitializingBean {\n   private final Path cacheDirectory;\n   private int cacheLifeTime;\n+  private Calendar calendar;\n+  private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n \n   public FeaturedModFileCacheService(PreferencesService preferencesService) {\n     this.cacheDirectory = preferencesService.getCacheDirectory();\n-    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTimeInDays() * 1000 * 3600 * 24;\n+    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTime() * 1000 * 3600 * 24;\n+    this.calendar = Calendar.getInstance();\n   }\n \n   private String getCachedFileName(FeaturedModFile featuredModFile) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNTAxMg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r436305012", "bodyText": "warn", "author": "1-alex98", "createdAt": "2020-06-06T22:17:24Z", "path": "src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.faforever.client.io;\n+\n+import com.faforever.client.api.dto.FeaturedModFile;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.task.ResourceLocks;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileTime;\n+\n+\n+@Service\n+@Slf4j\n+public class FeaturedModFileCacheService implements InitializingBean {\n+  private final Path cacheDirectory;\n+  private int cacheLifeTime;\n+\n+  public FeaturedModFileCacheService(PreferencesService preferencesService) {\n+    this.cacheDirectory = preferencesService.getCacheDirectory();\n+    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTimeInDays() * 1000 * 3600 * 24;\n+  }\n+\n+  private String getCachedFileName(FeaturedModFile featuredModFile) {\n+    return String.format(\n+        \"%s.%s.%s.%s\",\n+        featuredModFile.getId(),\n+        featuredModFile.getVersion(),\n+        featuredModFile.getMd5(),\n+        featuredModFile.getName()\n+    );\n+  }\n+\n+  public Path getCachedFilePath(FeaturedModFile featuredModFile) {\n+    return cacheDirectory.resolve(featuredModFile.getGroup()).resolve(getCachedFileName(featuredModFile));\n+  }\n+\n+  public void copyFeaturedModFileFromCache(Path cacheFilePath, Path targetPath) throws java.io.IOException {\n+    Files.createDirectories(targetPath.getParent());\n+    ResourceLocks.acquireDiskLock();\n+\n+    try {\n+      Files.copy(cacheFilePath, targetPath, StandardCopyOption.REPLACE_EXISTING);\n+    } catch (Exception e) {\n+      log.error(e.toString());\n+    } finally {\n+      ResourceLocks.freeDiskLock();\n+    }\n+  }\n+\n+  /**\n+   * Cleanup method, on service start, we'll get rid of old files.\n+   */\n+  @Override\n+  public void afterPropertiesSet() {\n+    try {\n+      Files.walk(this.cacheDirectory).forEach(this::walkDirectoriesAndDeleteCachedFiles);\n+    } catch (IOException e) {\n+      log.error(\"Exception during gathering files\", e);", "originalCommit": "21270effe3102b5be809ad110ac9e52323ae73dc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "196687d0dfcf30ddbd09ca24067088d1ace00018", "chunk": "diff --git a/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java b/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\nindex 82e13294..1d34c924 100644\n--- a/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\n+++ b/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\n\n@@ -4,26 +4,32 @@ import com.faforever.client.api.dto.FeaturedModFile;\n import com.faforever.client.preferences.PreferencesService;\n import com.faforever.client.task.ResourceLocks;\n import lombok.extern.slf4j.Slf4j;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.InitializingBean;\n import org.springframework.stereotype.Service;\n \n import java.io.IOException;\n+import java.lang.invoke.MethodHandles;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.StandardCopyOption;\n import java.nio.file.attribute.BasicFileAttributes;\n import java.nio.file.attribute.FileTime;\n-\n+import java.util.Calendar;\n \n @Service\n @Slf4j\n public class FeaturedModFileCacheService implements InitializingBean {\n   private final Path cacheDirectory;\n   private int cacheLifeTime;\n+  private Calendar calendar;\n+  private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n \n   public FeaturedModFileCacheService(PreferencesService preferencesService) {\n     this.cacheDirectory = preferencesService.getCacheDirectory();\n-    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTimeInDays() * 1000 * 3600 * 24;\n+    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTime() * 1000 * 3600 * 24;\n+    this.calendar = Calendar.getInstance();\n   }\n \n   private String getCachedFileName(FeaturedModFile featuredModFile) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNTE3OA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r436305178", "bodyText": "debug", "author": "1-alex98", "createdAt": "2020-06-06T22:20:36Z", "path": "src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.faforever.client.io;\n+\n+import com.faforever.client.api.dto.FeaturedModFile;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.task.ResourceLocks;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileTime;\n+\n+\n+@Service\n+@Slf4j\n+public class FeaturedModFileCacheService implements InitializingBean {\n+  private final Path cacheDirectory;\n+  private int cacheLifeTime;\n+\n+  public FeaturedModFileCacheService(PreferencesService preferencesService) {\n+    this.cacheDirectory = preferencesService.getCacheDirectory();\n+    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTimeInDays() * 1000 * 3600 * 24;\n+  }\n+\n+  private String getCachedFileName(FeaturedModFile featuredModFile) {\n+    return String.format(\n+        \"%s.%s.%s.%s\",\n+        featuredModFile.getId(),\n+        featuredModFile.getVersion(),\n+        featuredModFile.getMd5(),\n+        featuredModFile.getName()\n+    );\n+  }\n+\n+  public Path getCachedFilePath(FeaturedModFile featuredModFile) {\n+    return cacheDirectory.resolve(featuredModFile.getGroup()).resolve(getCachedFileName(featuredModFile));\n+  }\n+\n+  public void copyFeaturedModFileFromCache(Path cacheFilePath, Path targetPath) throws java.io.IOException {\n+    Files.createDirectories(targetPath.getParent());\n+    ResourceLocks.acquireDiskLock();\n+\n+    try {\n+      Files.copy(cacheFilePath, targetPath, StandardCopyOption.REPLACE_EXISTING);\n+    } catch (Exception e) {\n+      log.error(e.toString());\n+    } finally {\n+      ResourceLocks.freeDiskLock();\n+    }\n+  }\n+\n+  /**\n+   * Cleanup method, on service start, we'll get rid of old files.\n+   */\n+  @Override\n+  public void afterPropertiesSet() {\n+    try {\n+      Files.walk(this.cacheDirectory).forEach(this::walkDirectoriesAndDeleteCachedFiles);\n+    } catch (IOException e) {\n+      log.error(\"Exception during gathering files\", e);\n+    }\n+  }\n+\n+  private void walkDirectoriesAndDeleteCachedFiles(Path directoryPath) {\n+    try {\n+      Files.walk(directoryPath).forEach(this::deleteCachedFileIfNeeded);\n+    } catch (IOException e) {\n+      log.error(\"Exception during gathering files per directory\", e);\n+    }\n+  }\n+\n+  /**\n+   * Per directory cleanup old files.\n+   */\n+  private void deleteCachedFileIfNeeded(Path filePath) {\n+    if (Files.isDirectory(filePath)) {\n+      return;", "originalCommit": "21270effe3102b5be809ad110ac9e52323ae73dc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "196687d0dfcf30ddbd09ca24067088d1ace00018", "chunk": "diff --git a/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java b/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\nindex 82e13294..1d34c924 100644\n--- a/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\n+++ b/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\n\n@@ -4,26 +4,32 @@ import com.faforever.client.api.dto.FeaturedModFile;\n import com.faforever.client.preferences.PreferencesService;\n import com.faforever.client.task.ResourceLocks;\n import lombok.extern.slf4j.Slf4j;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.InitializingBean;\n import org.springframework.stereotype.Service;\n \n import java.io.IOException;\n+import java.lang.invoke.MethodHandles;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.StandardCopyOption;\n import java.nio.file.attribute.BasicFileAttributes;\n import java.nio.file.attribute.FileTime;\n-\n+import java.util.Calendar;\n \n @Service\n @Slf4j\n public class FeaturedModFileCacheService implements InitializingBean {\n   private final Path cacheDirectory;\n   private int cacheLifeTime;\n+  private Calendar calendar;\n+  private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n \n   public FeaturedModFileCacheService(PreferencesService preferencesService) {\n     this.cacheDirectory = preferencesService.getCacheDirectory();\n-    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTimeInDays() * 1000 * 3600 * 24;\n+    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTime() * 1000 * 3600 * 24;\n+    this.calendar = Calendar.getInstance();\n   }\n \n   private String getCachedFileName(FeaturedModFile featuredModFile) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNTIyNA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r436305224", "bodyText": "Instant", "author": "1-alex98", "createdAt": "2020-06-06T22:21:19Z", "path": "src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.faforever.client.io;\n+\n+import com.faforever.client.api.dto.FeaturedModFile;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.task.ResourceLocks;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileTime;\n+\n+\n+@Service\n+@Slf4j\n+public class FeaturedModFileCacheService implements InitializingBean {\n+  private final Path cacheDirectory;\n+  private int cacheLifeTime;\n+\n+  public FeaturedModFileCacheService(PreferencesService preferencesService) {\n+    this.cacheDirectory = preferencesService.getCacheDirectory();\n+    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTimeInDays() * 1000 * 3600 * 24;\n+  }\n+\n+  private String getCachedFileName(FeaturedModFile featuredModFile) {\n+    return String.format(\n+        \"%s.%s.%s.%s\",\n+        featuredModFile.getId(),\n+        featuredModFile.getVersion(),\n+        featuredModFile.getMd5(),\n+        featuredModFile.getName()\n+    );\n+  }\n+\n+  public Path getCachedFilePath(FeaturedModFile featuredModFile) {\n+    return cacheDirectory.resolve(featuredModFile.getGroup()).resolve(getCachedFileName(featuredModFile));\n+  }\n+\n+  public void copyFeaturedModFileFromCache(Path cacheFilePath, Path targetPath) throws java.io.IOException {\n+    Files.createDirectories(targetPath.getParent());\n+    ResourceLocks.acquireDiskLock();\n+\n+    try {\n+      Files.copy(cacheFilePath, targetPath, StandardCopyOption.REPLACE_EXISTING);\n+    } catch (Exception e) {\n+      log.error(e.toString());\n+    } finally {\n+      ResourceLocks.freeDiskLock();\n+    }\n+  }\n+\n+  /**\n+   * Cleanup method, on service start, we'll get rid of old files.\n+   */\n+  @Override\n+  public void afterPropertiesSet() {\n+    try {\n+      Files.walk(this.cacheDirectory).forEach(this::walkDirectoriesAndDeleteCachedFiles);\n+    } catch (IOException e) {\n+      log.error(\"Exception during gathering files\", e);\n+    }\n+  }\n+\n+  private void walkDirectoriesAndDeleteCachedFiles(Path directoryPath) {\n+    try {\n+      Files.walk(directoryPath).forEach(this::deleteCachedFileIfNeeded);\n+    } catch (IOException e) {\n+      log.error(\"Exception during gathering files per directory\", e);\n+    }\n+  }\n+\n+  /**\n+   * Per directory cleanup old files.\n+   */\n+  private void deleteCachedFileIfNeeded(Path filePath) {\n+    if (Files.isDirectory(filePath)) {\n+      return;\n+    }\n+\n+    try {\n+      ResourceLocks.acquireDiskLock();\n+\n+      FileTime lastAccessTime = Files.readAttributes(filePath, BasicFileAttributes.class).lastAccessTime();\n+      if (lastAccessTime.toMillis() + cacheLifeTime < System.currentTimeMillis()) {", "originalCommit": "21270effe3102b5be809ad110ac9e52323ae73dc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "196687d0dfcf30ddbd09ca24067088d1ace00018", "chunk": "diff --git a/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java b/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\nindex 82e13294..1d34c924 100644\n--- a/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\n+++ b/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\n\n@@ -4,26 +4,32 @@ import com.faforever.client.api.dto.FeaturedModFile;\n import com.faforever.client.preferences.PreferencesService;\n import com.faforever.client.task.ResourceLocks;\n import lombok.extern.slf4j.Slf4j;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.InitializingBean;\n import org.springframework.stereotype.Service;\n \n import java.io.IOException;\n+import java.lang.invoke.MethodHandles;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.StandardCopyOption;\n import java.nio.file.attribute.BasicFileAttributes;\n import java.nio.file.attribute.FileTime;\n-\n+import java.util.Calendar;\n \n @Service\n @Slf4j\n public class FeaturedModFileCacheService implements InitializingBean {\n   private final Path cacheDirectory;\n   private int cacheLifeTime;\n+  private Calendar calendar;\n+  private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n \n   public FeaturedModFileCacheService(PreferencesService preferencesService) {\n     this.cacheDirectory = preferencesService.getCacheDirectory();\n-    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTimeInDays() * 1000 * 3600 * 24;\n+    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTime() * 1000 * 3600 * 24;\n+    this.calendar = Calendar.getInstance();\n   }\n \n   private String getCachedFileName(FeaturedModFile featuredModFile) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNTI0Mg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r436305242", "bodyText": "Also {}", "author": "1-alex98", "createdAt": "2020-06-06T22:21:48Z", "path": "src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.faforever.client.io;\n+\n+import com.faforever.client.api.dto.FeaturedModFile;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.task.ResourceLocks;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileTime;\n+\n+\n+@Service\n+@Slf4j\n+public class FeaturedModFileCacheService implements InitializingBean {\n+  private final Path cacheDirectory;\n+  private int cacheLifeTime;\n+\n+  public FeaturedModFileCacheService(PreferencesService preferencesService) {\n+    this.cacheDirectory = preferencesService.getCacheDirectory();\n+    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTimeInDays() * 1000 * 3600 * 24;\n+  }\n+\n+  private String getCachedFileName(FeaturedModFile featuredModFile) {\n+    return String.format(\n+        \"%s.%s.%s.%s\",\n+        featuredModFile.getId(),\n+        featuredModFile.getVersion(),\n+        featuredModFile.getMd5(),\n+        featuredModFile.getName()\n+    );\n+  }\n+\n+  public Path getCachedFilePath(FeaturedModFile featuredModFile) {\n+    return cacheDirectory.resolve(featuredModFile.getGroup()).resolve(getCachedFileName(featuredModFile));\n+  }\n+\n+  public void copyFeaturedModFileFromCache(Path cacheFilePath, Path targetPath) throws java.io.IOException {\n+    Files.createDirectories(targetPath.getParent());\n+    ResourceLocks.acquireDiskLock();\n+\n+    try {\n+      Files.copy(cacheFilePath, targetPath, StandardCopyOption.REPLACE_EXISTING);\n+    } catch (Exception e) {\n+      log.error(e.toString());\n+    } finally {\n+      ResourceLocks.freeDiskLock();\n+    }\n+  }\n+\n+  /**\n+   * Cleanup method, on service start, we'll get rid of old files.\n+   */\n+  @Override\n+  public void afterPropertiesSet() {\n+    try {\n+      Files.walk(this.cacheDirectory).forEach(this::walkDirectoriesAndDeleteCachedFiles);\n+    } catch (IOException e) {\n+      log.error(\"Exception during gathering files\", e);\n+    }\n+  }\n+\n+  private void walkDirectoriesAndDeleteCachedFiles(Path directoryPath) {\n+    try {\n+      Files.walk(directoryPath).forEach(this::deleteCachedFileIfNeeded);\n+    } catch (IOException e) {\n+      log.error(\"Exception during gathering files per directory\", e);\n+    }\n+  }\n+\n+  /**\n+   * Per directory cleanup old files.\n+   */\n+  private void deleteCachedFileIfNeeded(Path filePath) {\n+    if (Files.isDirectory(filePath)) {\n+      return;\n+    }\n+\n+    try {\n+      ResourceLocks.acquireDiskLock();\n+\n+      FileTime lastAccessTime = Files.readAttributes(filePath, BasicFileAttributes.class).lastAccessTime();\n+      if (lastAccessTime.toMillis() + cacheLifeTime < System.currentTimeMillis()) {\n+        log.info(\"deleting: \" + filePath.toString());", "originalCommit": "21270effe3102b5be809ad110ac9e52323ae73dc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "196687d0dfcf30ddbd09ca24067088d1ace00018", "chunk": "diff --git a/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java b/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\nindex 82e13294..1d34c924 100644\n--- a/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\n+++ b/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\n\n@@ -4,26 +4,32 @@ import com.faforever.client.api.dto.FeaturedModFile;\n import com.faforever.client.preferences.PreferencesService;\n import com.faforever.client.task.ResourceLocks;\n import lombok.extern.slf4j.Slf4j;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.InitializingBean;\n import org.springframework.stereotype.Service;\n \n import java.io.IOException;\n+import java.lang.invoke.MethodHandles;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.StandardCopyOption;\n import java.nio.file.attribute.BasicFileAttributes;\n import java.nio.file.attribute.FileTime;\n-\n+import java.util.Calendar;\n \n @Service\n @Slf4j\n public class FeaturedModFileCacheService implements InitializingBean {\n   private final Path cacheDirectory;\n   private int cacheLifeTime;\n+  private Calendar calendar;\n+  private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n \n   public FeaturedModFileCacheService(PreferencesService preferencesService) {\n     this.cacheDirectory = preferencesService.getCacheDirectory();\n-    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTimeInDays() * 1000 * 3600 * 24;\n+    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTime() * 1000 * 3600 * 24;\n+    this.calendar = Calendar.getInstance();\n   }\n \n   private String getCachedFileName(FeaturedModFile featuredModFile) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNTM2Mw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r436305363", "bodyText": "maybe static import", "author": "1-alex98", "createdAt": "2020-06-06T22:24:00Z", "path": "src/main/java/com/faforever/client/patch/SimpleHttpFeaturedModUpdaterTask.java", "diffHunk": "@@ -54,32 +61,46 @@ protected PatchResult call() throws Exception {\n     updateMessage(i18n.get(\"updater.readingFileList\"));\n \n     List<FeaturedModFile> featuredModFiles = fafService.getFeaturedModFiles(featuredMod, version).get();\n+    Path fafDataDirectory = preferencesService.getFafDataDirectory();\n \n     Path initFile = null;\n+    Path cacheFilePath;\n+    Path targetPath;\n+\n+    Map<String, String> knownTargetHashes = new HashMap<>();\n+\n+    // Download to cache if file exists in target place, otherwise, download to direct place.\n     for (FeaturedModFile featuredModFile : featuredModFiles) {\n-      Path fafDataDirectory = preferencesService.getFafDataDirectory();\n-      Path targetPath = fafDataDirectory\n-          .resolve(featuredModFile.getGroup())\n-          .resolve(featuredModFile.getName());\n-\n-      if (Files.exists(targetPath)\n-          && featuredModFile.getMd5().equals(com.google.common.io.Files.hash(targetPath.toFile(), Hashing.md5()).toString())) {\n-        logger.debug(\"Already up to date: {}\", targetPath);\n-      } else {\n-        Files.createDirectories(targetPath.getParent());\n-        updateMessage(i18n.get(\"updater.downloadingFile\", targetPath.getFileName()));\n-\n-        String url = featuredModFile.getUrl();\n-        downloadService.downloadFile(new URL(url), targetPath, this::updateProgress);\n-        UpdaterUtil.extractMoviesIfPresent(targetPath, fafDataDirectory);\n+      targetPath = fafDataDirectory.resolve(featuredModFile.getGroup()).resolve(featuredModFile.getName());\n+      cacheFilePath = featuredModFileCacheService.getCachedFilePath(featuredModFile);\n+\n+      String existingTargetFileHash = null;\n+      if (Files.exists(targetPath)) {\n+        existingTargetFileHash = com.google.common.io.Files.hash(targetPath.toFile(), Hashing.md5()).toString();", "originalCommit": "21270effe3102b5be809ad110ac9e52323ae73dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYyMDA2NA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r490620064", "bodyText": "import java.nio.file.Files; vs com.google.common.io.Files, it will fight each other, how to solve such?", "author": "norraxx", "createdAt": "2020-09-17T23:40:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNTM2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU5ODcyNg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r506598726", "bodyText": "static import just the function", "author": "Brutus5000", "createdAt": "2020-10-16T16:49:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNTM2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "196687d0dfcf30ddbd09ca24067088d1ace00018", "chunk": "diff --git a/src/main/java/com/faforever/client/patch/SimpleHttpFeaturedModUpdaterTask.java b/src/main/java/com/faforever/client/patch/SimpleHttpFeaturedModUpdaterTask.java\nindex 765b3f3b..271a794b 100644\n--- a/src/main/java/com/faforever/client/patch/SimpleHttpFeaturedModUpdaterTask.java\n+++ b/src/main/java/com/faforever/client/patch/SimpleHttpFeaturedModUpdaterTask.java\n\n@@ -81,7 +88,7 @@ public class SimpleHttpFeaturedModUpdaterTask extends CompletableTask<PatchResul\n       }\n \n       if (!featuredModFile.getMd5().equals(existingTargetFileHash)) {\n-        log.info(\"Downloading: {}\", cacheFilePath);\n+        logger.info(String.format(\"downloading: %s\", cacheFilePath.toString()));\n         downloadFeaturedModFile(featuredModFile, cacheFilePath);\n       }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNTk4OQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r436305989", "bodyText": "check if in cache first", "author": "1-alex98", "createdAt": "2020-06-06T22:35:55Z", "path": "src/main/java/com/faforever/client/patch/SimpleHttpFeaturedModUpdaterTask.java", "diffHunk": "@@ -54,32 +61,46 @@ protected PatchResult call() throws Exception {\n     updateMessage(i18n.get(\"updater.readingFileList\"));\n \n     List<FeaturedModFile> featuredModFiles = fafService.getFeaturedModFiles(featuredMod, version).get();\n+    Path fafDataDirectory = preferencesService.getFafDataDirectory();\n \n     Path initFile = null;\n+    Path cacheFilePath;\n+    Path targetPath;\n+\n+    Map<String, String> knownTargetHashes = new HashMap<>();\n+\n+    // Download to cache if file exists in target place, otherwise, download to direct place.\n     for (FeaturedModFile featuredModFile : featuredModFiles) {\n-      Path fafDataDirectory = preferencesService.getFafDataDirectory();\n-      Path targetPath = fafDataDirectory\n-          .resolve(featuredModFile.getGroup())\n-          .resolve(featuredModFile.getName());\n-\n-      if (Files.exists(targetPath)\n-          && featuredModFile.getMd5().equals(com.google.common.io.Files.hash(targetPath.toFile(), Hashing.md5()).toString())) {\n-        logger.debug(\"Already up to date: {}\", targetPath);\n-      } else {\n-        Files.createDirectories(targetPath.getParent());\n-        updateMessage(i18n.get(\"updater.downloadingFile\", targetPath.getFileName()));\n-\n-        String url = featuredModFile.getUrl();\n-        downloadService.downloadFile(new URL(url), targetPath, this::updateProgress);\n-        UpdaterUtil.extractMoviesIfPresent(targetPath, fafDataDirectory);\n+      targetPath = fafDataDirectory.resolve(featuredModFile.getGroup()).resolve(featuredModFile.getName());\n+      cacheFilePath = featuredModFileCacheService.getCachedFilePath(featuredModFile);\n+\n+      String existingTargetFileHash = null;\n+      if (Files.exists(targetPath)) {\n+        existingTargetFileHash = com.google.common.io.Files.hash(targetPath.toFile(), Hashing.md5()).toString();\n+        knownTargetHashes.put(targetPath.toString(), existingTargetFileHash);\n       }\n \n+      if (!featuredModFile.getMd5().equals(existingTargetFileHash)) {\n+        log.info(\"Downloading: {}\", cacheFilePath);\n+        downloadFeaturedModFile(featuredModFile, cacheFilePath);", "originalCommit": "21270effe3102b5be809ad110ac9e52323ae73dc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "196687d0dfcf30ddbd09ca24067088d1ace00018", "chunk": "diff --git a/src/main/java/com/faforever/client/patch/SimpleHttpFeaturedModUpdaterTask.java b/src/main/java/com/faforever/client/patch/SimpleHttpFeaturedModUpdaterTask.java\nindex 765b3f3b..271a794b 100644\n--- a/src/main/java/com/faforever/client/patch/SimpleHttpFeaturedModUpdaterTask.java\n+++ b/src/main/java/com/faforever/client/patch/SimpleHttpFeaturedModUpdaterTask.java\n\n@@ -81,7 +88,7 @@ public class SimpleHttpFeaturedModUpdaterTask extends CompletableTask<PatchResul\n       }\n \n       if (!featuredModFile.getMd5().equals(existingTargetFileHash)) {\n-        log.info(\"Downloading: {}\", cacheFilePath);\n+        logger.info(String.format(\"downloading: %s\", cacheFilePath.toString()));\n         downloadFeaturedModFile(featuredModFile, cacheFilePath);\n       }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNjEzOA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r436306138", "bodyText": "copyMissingFilesFromCache", "author": "1-alex98", "createdAt": "2020-06-06T22:38:52Z", "path": "src/main/java/com/faforever/client/patch/SimpleHttpFeaturedModUpdaterTask.java", "diffHunk": "@@ -54,32 +61,46 @@ protected PatchResult call() throws Exception {\n     updateMessage(i18n.get(\"updater.readingFileList\"));\n \n     List<FeaturedModFile> featuredModFiles = fafService.getFeaturedModFiles(featuredMod, version).get();\n+    Path fafDataDirectory = preferencesService.getFafDataDirectory();\n \n     Path initFile = null;\n+    Path cacheFilePath;\n+    Path targetPath;\n+\n+    Map<String, String> knownTargetHashes = new HashMap<>();\n+\n+    // Download to cache if file exists in target place, otherwise, download to direct place.\n     for (FeaturedModFile featuredModFile : featuredModFiles) {\n-      Path fafDataDirectory = preferencesService.getFafDataDirectory();\n-      Path targetPath = fafDataDirectory\n-          .resolve(featuredModFile.getGroup())\n-          .resolve(featuredModFile.getName());\n-\n-      if (Files.exists(targetPath)\n-          && featuredModFile.getMd5().equals(com.google.common.io.Files.hash(targetPath.toFile(), Hashing.md5()).toString())) {\n-        logger.debug(\"Already up to date: {}\", targetPath);\n-      } else {\n-        Files.createDirectories(targetPath.getParent());\n-        updateMessage(i18n.get(\"updater.downloadingFile\", targetPath.getFileName()));\n-\n-        String url = featuredModFile.getUrl();\n-        downloadService.downloadFile(new URL(url), targetPath, this::updateProgress);\n-        UpdaterUtil.extractMoviesIfPresent(targetPath, fafDataDirectory);\n+      targetPath = fafDataDirectory.resolve(featuredModFile.getGroup()).resolve(featuredModFile.getName());\n+      cacheFilePath = featuredModFileCacheService.getCachedFilePath(featuredModFile);\n+\n+      String existingTargetFileHash = null;\n+      if (Files.exists(targetPath)) {\n+        existingTargetFileHash = com.google.common.io.Files.hash(targetPath.toFile(), Hashing.md5()).toString();\n+        knownTargetHashes.put(targetPath.toString(), existingTargetFileHash);\n       }\n \n+      if (!featuredModFile.getMd5().equals(existingTargetFileHash)) {\n+        log.info(\"Downloading: {}\", cacheFilePath);\n+        downloadFeaturedModFile(featuredModFile, cacheFilePath);\n+      }\n \n       if (\"bin\".equals(featuredModFile.getGroup()) && initFileName.equalsIgnoreCase(featuredModFile.getName())) {\n         initFile = targetPath;\n       }\n     }\n \n+    for (FeaturedModFile featuredModFile : featuredModFiles) {\n+      targetPath = fafDataDirectory.resolve(featuredModFile.getGroup()).resolve(featuredModFile.getName());\n+      cacheFilePath = featuredModFileCacheService.getCachedFilePath(featuredModFile);\n+      String existingTargetFileHash = knownTargetHashes.get(targetPath.toString());\n+\n+      if (!featuredModFile.getMd5().equals(existingTargetFileHash)) {\n+        log.info(\"copying featured mod file: {} to {}\", cacheFilePath, targetPath);\n+        featuredModFileCacheService.copyFeaturedModFileFromCache(cacheFilePath, targetPath);\n+      }\n+    }", "originalCommit": "21270effe3102b5be809ad110ac9e52323ae73dc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "196687d0dfcf30ddbd09ca24067088d1ace00018", "chunk": "diff --git a/src/main/java/com/faforever/client/patch/SimpleHttpFeaturedModUpdaterTask.java b/src/main/java/com/faforever/client/patch/SimpleHttpFeaturedModUpdaterTask.java\nindex 765b3f3b..271a794b 100644\n--- a/src/main/java/com/faforever/client/patch/SimpleHttpFeaturedModUpdaterTask.java\n+++ b/src/main/java/com/faforever/client/patch/SimpleHttpFeaturedModUpdaterTask.java\n\n@@ -81,7 +88,7 @@ public class SimpleHttpFeaturedModUpdaterTask extends CompletableTask<PatchResul\n       }\n \n       if (!featuredModFile.getMd5().equals(existingTargetFileHash)) {\n-        log.info(\"Downloading: {}\", cacheFilePath);\n+        logger.info(String.format(\"downloading: %s\", cacheFilePath.toString()));\n         downloadFeaturedModFile(featuredModFile, cacheFilePath);\n       }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNjUwMg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r436306502", "bodyText": "Apply TextFormatter setTextFormatter", "author": "1-alex98", "createdAt": "2020-06-06T22:45:40Z", "path": "src/main/java/com/faforever/client/preferences/ui/SettingsController.java", "diffHunk": "@@ -142,6 +142,7 @@\n   private ChangeListener<Theme> selectedThemeChangeListener;\n   private ChangeListener<Theme> currentThemeChangeListener;\n   public ComboBox<NavigationItem> startTabChoiceBox;\n+  public TextField cacheLifeTimeTextField;", "originalCommit": "21270effe3102b5be809ad110ac9e52323ae73dc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ae6095b1556167638a3b500fcd2e22240e13fd88", "chunk": "diff --git a/src/main/java/com/faforever/client/preferences/ui/SettingsController.java b/src/main/java/com/faforever/client/preferences/ui/SettingsController.java\nindex a660a5e0..60099970 100644\n--- a/src/main/java/com/faforever/client/preferences/ui/SettingsController.java\n+++ b/src/main/java/com/faforever/client/preferences/ui/SettingsController.java\n\n@@ -129,16 +131,23 @@ public class SettingsController implements Controller<Node> {\n   public Label passwordChangeErrorLabel;\n   public Label passwordChangeSuccessLabel;\n   public ComboBox<UnitDataBaseType> unitDatabaseComboBox;\n-  public Toggle notifyOnAtMentionOnlyToggle;\n+  public CheckBox notifyOnAtMentionOnlyToggle;\n   public Pane languagesContainer;\n   public TextField backgroundImageLocation;\n-  public ToggleButton disallowJoinsCheckBox;\n-  public ToggleButton secondaryVaultLocationToggleButton;\n-  public Button autoJoinChannelsButton;\n-  public ToggleButton advancedIceLogToggleButton;\n-  public ToggleButton prereleaseToggleButton;\n+  public CheckBox disallowJoinsCheckBox;\n+  public CheckBox secondaryVaultLocationToggle;\n+  public CheckBox advancedIceLogToggle;\n+  public CheckBox prereleaseToggle;\n+  public Region settingsHeader;\n+  public ComboBox<NavigationItem> startTabChoiceBox;\n+  public Label notifyAtMentionTitle;\n+  public Label notifyAtMentionDescription;\n+  public TextField channelTextField;\n+  public Button addChannelButton;\n+  public ListView<String> autoChannelListView;\n+\n   private final InvalidationListener availableLanguagesListener;\n-  private Popup autojoinChannelsPopUp;\n+\n   private ChangeListener<Theme> selectedThemeChangeListener;\n   private ChangeListener<Theme> currentThemeChangeListener;\n   public ComboBox<NavigationItem> startTabChoiceBox;\n"}}, {"oid": "ae6095b1556167638a3b500fcd2e22240e13fd88", "url": "https://github.com/FAForever/downlords-faf-client/commit/ae6095b1556167638a3b500fcd2e22240e13fd88", "message": "Logger fixing", "committedDate": "2020-09-17T23:01:45Z", "type": "forcePushed"}, {"oid": "196687d0dfcf30ddbd09ca24067088d1ace00018", "url": "https://github.com/FAForever/downlords-faf-client/commit/196687d0dfcf30ddbd09ca24067088d1ace00018", "message": "Download proxy", "committedDate": "2020-10-16T21:10:19Z", "type": "commit"}, {"oid": "f15230c3916bbf4e008fb2158e31c91945bbb1d7", "url": "https://github.com/FAForever/downlords-faf-client/commit/f15230c3916bbf4e008fb2158e31c91945bbb1d7", "message": "Fixing logging, removing all files in directory, 1 euro fixes, to be continued", "committedDate": "2020-10-16T21:10:19Z", "type": "commit"}, {"oid": "64b3d7d1500b6cc449908a956f616ebe33c6bd3f", "url": "https://github.com/FAForever/downlords-faf-client/commit/64b3d7d1500b6cc449908a956f616ebe33c6bd3f", "message": "Logger fixing", "committedDate": "2020-10-16T21:10:19Z", "type": "commit"}, {"oid": "ce3a7f13099cb36b135f726ac7b2bca2f1121fc9", "url": "https://github.com/FAForever/downlords-faf-client/commit/ce3a7f13099cb36b135f726ac7b2bca2f1121fc9", "message": "hate windows", "committedDate": "2020-10-16T21:10:19Z", "type": "commit"}, {"oid": "984720373f275bc19110d63695dfe70d43918387", "url": "https://github.com/FAForever/downlords-faf-client/commit/984720373f275bc19110d63695dfe70d43918387", "message": "hate windows 2", "committedDate": "2020-10-16T21:10:19Z", "type": "commit"}, {"oid": "113b7450d597c4250bda6e0cdec3559e2cbad902", "url": "https://github.com/FAForever/downlords-faf-client/commit/113b7450d597c4250bda6e0cdec3559e2cbad902", "message": "Usage of OffsetDateTime", "committedDate": "2020-10-16T21:10:19Z", "type": "commit"}, {"oid": "24176e9cce1da616e16a3b5ab836a60e73f04b5e", "url": "https://github.com/FAForever/downlords-faf-client/commit/24176e9cce1da616e16a3b5ab836a60e73f04b5e", "message": "#! WIP", "committedDate": "2020-10-16T21:10:19Z", "type": "commit"}, {"oid": "c58ea8d686a070313ee124338eff1fe66e1c8200", "url": "https://github.com/FAForever/downlords-faf-client/commit/c58ea8d686a070313ee124338eff1fe66e1c8200", "message": "Refactor FeatureMod downloading with cache", "committedDate": "2020-10-16T21:10:19Z", "type": "commit"}, {"oid": "c58ea8d686a070313ee124338eff1fe66e1c8200", "url": "https://github.com/FAForever/downlords-faf-client/commit/c58ea8d686a070313ee124338eff1fe66e1c8200", "message": "Refactor FeatureMod downloading with cache", "committedDate": "2020-10-16T21:10:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjkyNzU4OQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r506927589", "bodyText": ". seems to be a dangrous delimiter. Could there not be mod files that have a . in the name \ud83e\udd14", "author": "1-alex98", "createdAt": "2020-10-17T10:18:12Z", "path": "src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package com.faforever.client.io;\n+\n+import com.faforever.client.api.dto.FeaturedModFile;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.task.ResourceLocks;\n+import lombok.SneakyThrows;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileTime;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneId;\n+import java.util.stream.Stream;\n+\n+\n+@Service\n+@Slf4j\n+public class FeaturedModFileCacheService implements InitializingBean {\n+  private final Path cacheDirectory;\n+  private final int cacheLifeTimeInDays;\n+\n+  public FeaturedModFileCacheService(PreferencesService preferencesService) {\n+    this.cacheDirectory = preferencesService.getCacheDirectory();\n+    this.cacheLifeTimeInDays = preferencesService.getPreferences().getCacheLifeTimeInDays();\n+  }\n+\n+  public boolean isCached(FeaturedModFile featuredModFile) {\n+    return Files.exists(getCachedFilePath(featuredModFile));\n+  }\n+\n+  private String readHashFromFile(Path filePath) {\n+    // see buildCachedFileName\n+    return filePath.getFileName().toString().split(\"\\\\.\")[3];\n+  }\n+\n+  private String buildCachedFileName(FeaturedModFile featuredModFile) {\n+    return String.format(\n+        \"%s.%s.%s.%s\",", "originalCommit": "c58ea8d686a070313ee124338eff1fe66e1c8200", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjkyNzk3OQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r506927979", "bodyText": "is that possible?", "author": "1-alex98", "createdAt": "2020-10-17T10:23:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjkyNzU4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjkzMDc1NA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r506930754", "bodyText": "And yes file name as almost always a . in it.... But anyway what do you need the file name for???", "author": "1-alex98", "createdAt": "2020-10-17T10:58:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjkyNzU4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "94193129c65dc6b878c96188b24cb6973bf7b8f5", "chunk": "diff --git a/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java b/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\nindex 87c5b707..789dbe4c 100644\n--- a/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\n+++ b/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\n\n@@ -3,7 +3,9 @@ package com.faforever.client.io;\n import com.faforever.client.api.dto.FeaturedModFile;\n import com.faforever.client.preferences.PreferencesService;\n import com.faforever.client.task.ResourceLocks;\n-import lombok.SneakyThrows;\n+import com.faforever.client.util.UpdaterUtil;\n+import com.google.common.hash.Hashing;\n+import lombok.RequiredArgsConstructor;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.beans.factory.InitializingBean;\n import org.springframework.stereotype.Service;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjkyNzc2NA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r506927764", "bodyText": "If they are cached here changes to this variables are later not reflected. While this does not matter for cacheLifeTime it might be for the cache driectory(even that is also unlikely)", "author": "1-alex98", "createdAt": "2020-10-17T10:20:26Z", "path": "src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package com.faforever.client.io;\n+\n+import com.faforever.client.api.dto.FeaturedModFile;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.task.ResourceLocks;\n+import lombok.SneakyThrows;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileTime;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneId;\n+import java.util.stream.Stream;\n+\n+\n+@Service\n+@Slf4j\n+public class FeaturedModFileCacheService implements InitializingBean {\n+  private final Path cacheDirectory;\n+  private final int cacheLifeTimeInDays;\n+\n+  public FeaturedModFileCacheService(PreferencesService preferencesService) {\n+    this.cacheDirectory = preferencesService.getCacheDirectory();\n+    this.cacheLifeTimeInDays = preferencesService.getPreferences().getCacheLifeTimeInDays();", "originalCommit": "c58ea8d686a070313ee124338eff1fe66e1c8200", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "94193129c65dc6b878c96188b24cb6973bf7b8f5", "chunk": "diff --git a/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java b/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\nindex 87c5b707..789dbe4c 100644\n--- a/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\n+++ b/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\n\n@@ -3,7 +3,9 @@ package com.faforever.client.io;\n import com.faforever.client.api.dto.FeaturedModFile;\n import com.faforever.client.preferences.PreferencesService;\n import com.faforever.client.task.ResourceLocks;\n-import lombok.SneakyThrows;\n+import com.faforever.client.util.UpdaterUtil;\n+import com.google.common.hash.Hashing;\n+import lombok.RequiredArgsConstructor;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.beans.factory.InitializingBean;\n import org.springframework.stereotype.Service;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjkzMDE3MA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r506930170", "bodyText": "should be debug cause that gets really verbose", "author": "1-alex98", "createdAt": "2020-10-17T10:51:36Z", "path": "src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package com.faforever.client.io;\n+\n+import com.faforever.client.api.dto.FeaturedModFile;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.task.ResourceLocks;\n+import lombok.SneakyThrows;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileTime;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneId;\n+import java.util.stream.Stream;\n+\n+\n+@Service\n+@Slf4j\n+public class FeaturedModFileCacheService implements InitializingBean {\n+  private final Path cacheDirectory;\n+  private final int cacheLifeTimeInDays;\n+\n+  public FeaturedModFileCacheService(PreferencesService preferencesService) {\n+    this.cacheDirectory = preferencesService.getCacheDirectory();\n+    this.cacheLifeTimeInDays = preferencesService.getPreferences().getCacheLifeTimeInDays();\n+  }\n+\n+  public boolean isCached(FeaturedModFile featuredModFile) {\n+    return Files.exists(getCachedFilePath(featuredModFile));\n+  }\n+\n+  private String readHashFromFile(Path filePath) {\n+    // see buildCachedFileName\n+    return filePath.getFileName().toString().split(\"\\\\.\")[3];\n+  }\n+\n+  private String buildCachedFileName(FeaturedModFile featuredModFile) {\n+    return String.format(\n+        \"%s.%s.%s.%s\",\n+        featuredModFile.getId(),\n+        featuredModFile.getVersion(),\n+        featuredModFile.getMd5(),\n+        featuredModFile.getName()\n+    );\n+  }\n+\n+  public Path getCachedFilePath(FeaturedModFile featuredModFile) {\n+    return cacheDirectory\n+        .resolve(featuredModFile.getGroup())\n+        .resolve(buildCachedFileName(featuredModFile));\n+  }\n+\n+  public void copyFeaturedModFileFromCache(FeaturedModFile featuredModFile, Path targetPath) throws IOException {\n+    Files.createDirectories(targetPath.getParent());\n+    ResourceLocks.acquireDiskLock();\n+\n+    try {\n+      Files.copy(getCachedFilePath(featuredModFile), targetPath, StandardCopyOption.REPLACE_EXISTING);\n+    } finally {\n+      ResourceLocks.freeDiskLock();\n+    }\n+  }\n+\n+  @SneakyThrows\n+  public void copyFeaturedModFileFromCache(Path cacheFilePath, Path targetPath) {\n+    Files.createDirectories(targetPath.getParent());\n+    ResourceLocks.acquireDiskLock();\n+\n+    try {\n+      Files.copy(cacheFilePath, targetPath, StandardCopyOption.REPLACE_EXISTING);\n+    } finally {\n+      ResourceLocks.freeDiskLock();\n+    }\n+  }\n+\n+  /**\n+   * Cleanup method, on service start, we'll get rid of old files.\n+   */\n+  @Override\n+  public void afterPropertiesSet() {\n+    cleanUnusedFilesFromCache();\n+  }\n+\n+  private void cleanUnusedFilesFromCache() {\n+    try (Stream<Path> pathElements = Files.walk(this.cacheDirectory)) {\n+      pathElements\n+          .filter(Files::isRegularFile)\n+          .forEach(this::deleteCachedFileIfNeeded);\n+    } catch (IOException e) {\n+      log.error(\"Cleaning featured mod files cache failed\", e);\n+    }\n+  }\n+\n+  /**\n+   * Per directory cleanup old files.\n+   */\n+  private void deleteCachedFileIfNeeded(Path filePath) {\n+    try {\n+      ResourceLocks.acquireDiskLock();\n+\n+      FileTime lastAccessTime = Files.readAttributes(filePath, BasicFileAttributes.class).lastAccessTime();\n+      OffsetDateTime comparableLastAccessTime = OffsetDateTime.ofInstant(lastAccessTime.toInstant(), ZoneId.systemDefault());\n+      if (comparableLastAccessTime.plusDays(this.cacheLifeTimeInDays).isBefore(OffsetDateTime.now())) {\n+        log.info(\"Deleting cached file ''{}'' (last access:\", filePath.toString());", "originalCommit": "c58ea8d686a070313ee124338eff1fe66e1c8200", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjkzMDMwMQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r506930301", "bodyText": "Also log statement is incomplete...", "author": "1-alex98", "createdAt": "2020-10-17T10:53:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjkzMDE3MA=="}], "type": "inlineReview", "revised_code": {"commit": "94193129c65dc6b878c96188b24cb6973bf7b8f5", "chunk": "diff --git a/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java b/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\nindex 87c5b707..789dbe4c 100644\n--- a/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\n+++ b/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\n\n@@ -3,7 +3,9 @@ package com.faforever.client.io;\n import com.faforever.client.api.dto.FeaturedModFile;\n import com.faforever.client.preferences.PreferencesService;\n import com.faforever.client.task.ResourceLocks;\n-import lombok.SneakyThrows;\n+import com.faforever.client.util.UpdaterUtil;\n+import com.google.common.hash.Hashing;\n+import lombok.RequiredArgsConstructor;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.beans.factory.InitializingBean;\n import org.springframework.stereotype.Service;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjkzMDM3OQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r506930379", "bodyText": "this is obsolete", "author": "1-alex98", "createdAt": "2020-10-17T10:54:25Z", "path": "src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package com.faforever.client.io;\n+\n+import com.faforever.client.api.dto.FeaturedModFile;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.task.ResourceLocks;\n+import lombok.SneakyThrows;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileTime;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneId;\n+import java.util.stream.Stream;\n+\n+\n+@Service\n+@Slf4j\n+public class FeaturedModFileCacheService implements InitializingBean {\n+  private final Path cacheDirectory;\n+  private final int cacheLifeTimeInDays;\n+\n+  public FeaturedModFileCacheService(PreferencesService preferencesService) {\n+    this.cacheDirectory = preferencesService.getCacheDirectory();\n+    this.cacheLifeTimeInDays = preferencesService.getPreferences().getCacheLifeTimeInDays();\n+  }\n+\n+  public boolean isCached(FeaturedModFile featuredModFile) {\n+    return Files.exists(getCachedFilePath(featuredModFile));\n+  }\n+\n+  private String readHashFromFile(Path filePath) {\n+    // see buildCachedFileName\n+    return filePath.getFileName().toString().split(\"\\\\.\")[3];\n+  }\n+\n+  private String buildCachedFileName(FeaturedModFile featuredModFile) {\n+    return String.format(\n+        \"%s.%s.%s.%s\",\n+        featuredModFile.getId(),\n+        featuredModFile.getVersion(),\n+        featuredModFile.getMd5(),\n+        featuredModFile.getName()\n+    );\n+  }\n+\n+  public Path getCachedFilePath(FeaturedModFile featuredModFile) {\n+    return cacheDirectory\n+        .resolve(featuredModFile.getGroup())\n+        .resolve(buildCachedFileName(featuredModFile));\n+  }\n+\n+  public void copyFeaturedModFileFromCache(FeaturedModFile featuredModFile, Path targetPath) throws IOException {\n+    Files.createDirectories(targetPath.getParent());\n+    ResourceLocks.acquireDiskLock();\n+\n+    try {\n+      Files.copy(getCachedFilePath(featuredModFile), targetPath, StandardCopyOption.REPLACE_EXISTING);\n+    } finally {\n+      ResourceLocks.freeDiskLock();\n+    }\n+  }\n+\n+  @SneakyThrows\n+  public void copyFeaturedModFileFromCache(Path cacheFilePath, Path targetPath) {\n+    Files.createDirectories(targetPath.getParent());\n+    ResourceLocks.acquireDiskLock();\n+\n+    try {\n+      Files.copy(cacheFilePath, targetPath, StandardCopyOption.REPLACE_EXISTING);\n+    } finally {\n+      ResourceLocks.freeDiskLock();\n+    }\n+  }\n+\n+  /**\n+   * Cleanup method, on service start, we'll get rid of old files.\n+   */\n+  @Override\n+  public void afterPropertiesSet() {\n+    cleanUnusedFilesFromCache();\n+  }\n+\n+  private void cleanUnusedFilesFromCache() {\n+    try (Stream<Path> pathElements = Files.walk(this.cacheDirectory)) {", "originalCommit": "c58ea8d686a070313ee124338eff1fe66e1c8200", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjkzMDU2NA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r506930564", "bodyText": "also cacheDirectory is C:\\ProgramData\\FAForever\\cache so that the FeaturedModFileCacheService deletes files from all caches not only the featured mod files.", "author": "1-alex98", "createdAt": "2020-10-17T10:56:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjkzMDM3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "94193129c65dc6b878c96188b24cb6973bf7b8f5", "chunk": "diff --git a/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java b/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\nindex 87c5b707..789dbe4c 100644\n--- a/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\n+++ b/src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java\n\n@@ -3,7 +3,9 @@ package com.faforever.client.io;\n import com.faforever.client.api.dto.FeaturedModFile;\n import com.faforever.client.preferences.PreferencesService;\n import com.faforever.client.task.ResourceLocks;\n-import lombok.SneakyThrows;\n+import com.faforever.client.util.UpdaterUtil;\n+import com.google.common.hash.Hashing;\n+import lombok.RequiredArgsConstructor;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.beans.factory.InitializingBean;\n import org.springframework.stereotype.Service;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjkzMDgyNg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r506930826", "bodyText": "should be used by cache service but is not", "author": "1-alex98", "createdAt": "2020-10-17T10:59:49Z", "path": "src/main/java/com/faforever/client/preferences/PreferencesService.java", "diffHunk": "@@ -344,6 +347,10 @@ public Path getCacheDirectory() {\n     return CACHE_DIRECTORY;\n   }\n \n+  public Path getFeaturedModCachePath() {\n+    return FEATURED_MOD_CACHE_PATH;\n+  }", "originalCommit": "c58ea8d686a070313ee124338eff1fe66e1c8200", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "94193129c65dc6b878c96188b24cb6973bf7b8f5", "url": "https://github.com/FAForever/downlords-faf-client/commit/94193129c65dc6b878c96188b24cb6973bf7b8f5", "message": "Alex version", "committedDate": "2020-10-17T11:05:34Z", "type": "commit"}, {"oid": "a12588363eb03e8db57ff22ff9ca3f4899f1b406", "url": "https://github.com/FAForever/downlords-faf-client/commit/a12588363eb03e8db57ff22ff9ca3f4899f1b406", "message": "Tests and settings", "committedDate": "2020-10-17T15:41:44Z", "type": "forcePushed"}, {"oid": "2c45eeffc3885ed37646f453461e11dea20a9e80", "url": "https://github.com/FAForever/downlords-faf-client/commit/2c45eeffc3885ed37646f453461e11dea20a9e80", "message": "Tests and settings", "committedDate": "2020-10-17T17:34:21Z", "type": "forcePushed"}, {"oid": "476c9b4bf9b035b7e86802fe81a9e3fa4dee5533", "url": "https://github.com/FAForever/downlords-faf-client/commit/476c9b4bf9b035b7e86802fe81a9e3fa4dee5533", "message": "Tests and settings", "committedDate": "2020-10-17T17:55:58Z", "type": "commit"}, {"oid": "476c9b4bf9b035b7e86802fe81a9e3fa4dee5533", "url": "https://github.com/FAForever/downlords-faf-client/commit/476c9b4bf9b035b7e86802fe81a9e3fa4dee5533", "message": "Tests and settings", "committedDate": "2020-10-17T17:55:58Z", "type": "forcePushed"}]}