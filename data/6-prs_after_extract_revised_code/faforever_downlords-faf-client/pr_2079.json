{"pr_number": 2079, "pr_title": "Management of installed maps", "pr_createdAt": "2020-12-27T16:56:42Z", "pr_url": "https://github.com/FAForever/downlords-faf-client/pull/2079", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTEzNzE2NQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2079#discussion_r549137165", "bodyText": "I think this would be best placed in the map vault. There is a button used to manage mods in the mod vault which is hidden in the map vault", "author": "Sheikah45", "createdAt": "2020-12-27T17:05:01Z", "path": "src/main/java/com/faforever/client/game/CustomGamesController.java", "diffHunk": "@@ -259,4 +264,24 @@ public void onHide() {\n     // Hide all games to free up memory\n     filteredItems.setPredicate(game -> false);\n   }\n+\n+  public void onMapsManagementButtonClicked() {\n+\n+    // TODO: Move button to another space in future", "originalCommit": "f4bbf538f056754e00caec2dce6b364430f1771f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bede7405249a386efe7ec8aec5e52407b49af2eb", "chunk": "diff --git a/src/main/java/com/faforever/client/game/CustomGamesController.java b/src/main/java/com/faforever/client/game/CustomGamesController.java\nindex 0f14416f..3dfffbdb 100644\n--- a/src/main/java/com/faforever/client/game/CustomGamesController.java\n+++ b/src/main/java/com/faforever/client/game/CustomGamesController.java\n\n@@ -264,24 +259,4 @@ public class CustomGamesController extends AbstractViewController<Node> {\n     // Hide all games to free up memory\n     filteredItems.setPredicate(game -> false);\n   }\n-\n-  public void onMapsManagementButtonClicked() {\n-\n-    // TODO: Move button to another space in future\n-    ManageMapsController controller = uiService.loadFxml(\"theme/maps/manage_maps.fxml\");\n-    FxStage fxStage = FxStage.create(controller.getRoot())\n-        .initOwner(gamesRoot.getScene().getWindow())\n-        .initModality(Modality.WINDOW_MODAL)\n-        .withSceneFactory(uiService::createScene)\n-        .allowMinimize(false)\n-        .allowTopResize(false)\n-        .apply();\n-\n-    Stage stage = fxStage.getStage();\n-    stage.setResizable(false);\n-    stage.initStyle(StageStyle.UTILITY);\n-    stage.setMaximized(false);\n-    stage.setTitle(i18n.get(\"management.maps.windowTitle\"));\n-    stage.show();\n-  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTEzNzQxNw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2079#discussion_r549137417", "bodyText": "I would make this a stack pane in the maps vault rather than a new window i think", "author": "Sheikah45", "createdAt": "2020-12-27T17:06:52Z", "path": "src/main/java/com/faforever/client/game/CustomGamesController.java", "diffHunk": "@@ -259,4 +264,24 @@ public void onHide() {\n     // Hide all games to free up memory\n     filteredItems.setPredicate(game -> false);\n   }\n+\n+  public void onMapsManagementButtonClicked() {\n+\n+    // TODO: Move button to another space in future\n+    ManageMapsController controller = uiService.loadFxml(\"theme/maps/manage_maps.fxml\");\n+    FxStage fxStage = FxStage.create(controller.getRoot())", "originalCommit": "f4bbf538f056754e00caec2dce6b364430f1771f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bede7405249a386efe7ec8aec5e52407b49af2eb", "chunk": "diff --git a/src/main/java/com/faforever/client/game/CustomGamesController.java b/src/main/java/com/faforever/client/game/CustomGamesController.java\nindex 0f14416f..3dfffbdb 100644\n--- a/src/main/java/com/faforever/client/game/CustomGamesController.java\n+++ b/src/main/java/com/faforever/client/game/CustomGamesController.java\n\n@@ -264,24 +259,4 @@ public class CustomGamesController extends AbstractViewController<Node> {\n     // Hide all games to free up memory\n     filteredItems.setPredicate(game -> false);\n   }\n-\n-  public void onMapsManagementButtonClicked() {\n-\n-    // TODO: Move button to another space in future\n-    ManageMapsController controller = uiService.loadFxml(\"theme/maps/manage_maps.fxml\");\n-    FxStage fxStage = FxStage.create(controller.getRoot())\n-        .initOwner(gamesRoot.getScene().getWindow())\n-        .initModality(Modality.WINDOW_MODAL)\n-        .withSceneFactory(uiService::createScene)\n-        .allowMinimize(false)\n-        .allowTopResize(false)\n-        .apply();\n-\n-    Stage stage = fxStage.getStage();\n-    stage.setResizable(false);\n-    stage.initStyle(StageStyle.UTILITY);\n-    stage.setMaximized(false);\n-    stage.setTitle(i18n.get(\"management.maps.windowTitle\"));\n-    stage.show();\n-  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTEzNzc0OA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2079#discussion_r549137748", "bodyText": "Why create a new service rather than use the current mapService?", "author": "Sheikah45", "createdAt": "2020-12-27T17:10:34Z", "path": "src/main/java/com/faforever/client/map/management/MapsManagementService.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package com.faforever.client.map.management;\n+\n+import com.faforever.client.map.MapBean;\n+import com.faforever.client.map.MapService;\n+import com.faforever.client.remote.FafService;\n+import javafx.collections.FXCollections;\n+import javafx.collections.transformation.FilteredList;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.maven.artifact.versioning.ComparableVersion;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.context.annotation.Lazy;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+\n+@Lazy\n+@Service\n+@Slf4j\n+@RequiredArgsConstructor\n+public class MapsManagementService implements InitializingBean {", "originalCommit": "f4bbf538f056754e00caec2dce6b364430f1771f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bede7405249a386efe7ec8aec5e52407b49af2eb", "chunk": "diff --git a/src/main/java/com/faforever/client/map/management/MapsManagementService.java b/src/main/java/com/faforever/client/map/management/MapsManagementService.java\ndeleted file mode 100644\nindex d86bd669..00000000\n--- a/src/main/java/com/faforever/client/map/management/MapsManagementService.java\n+++ /dev/null\n\n@@ -1,120 +0,0 @@\n-package com.faforever.client.map.management;\n-\n-import com.faforever.client.map.MapBean;\n-import com.faforever.client.map.MapService;\n-import com.faforever.client.remote.FafService;\n-import javafx.collections.FXCollections;\n-import javafx.collections.transformation.FilteredList;\n-import lombok.RequiredArgsConstructor;\n-import lombok.extern.slf4j.Slf4j;\n-import org.apache.maven.artifact.versioning.ComparableVersion;\n-import org.springframework.beans.factory.InitializingBean;\n-import org.springframework.context.annotation.Lazy;\n-import org.springframework.stereotype.Service;\n-\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.concurrent.CompletableFuture;\n-\n-@Lazy\n-@Service\n-@Slf4j\n-@RequiredArgsConstructor\n-public class MapsManagementService implements InitializingBean {\n-\n-  private FilteredList<MapItem> items = new FilteredList<>(FXCollections.emptyObservableList());\n-  private Map<String, MapBean> newVersionsOfMaps = new HashMap<>();\n-\n-  private final MapService mapService;\n-  private final FafService fafService;\n-\n-  @Override\n-  public void afterPropertiesSet() throws Exception {\n-    initializeMapItems();\n-  }\n-\n-  private FilteredList<MapItem> initializeMapItems() {\n-    List<MapItem> items = new ArrayList<>();\n-    List<MapBean> clonedList = new ArrayList<>(mapService.getInstalledMaps());\n-    clonedList.forEach(currentMap -> {\n-      String name = currentMap.getDisplayName();\n-      if (!newVersionsOfMaps.containsKey(name)) {\n-        items.add(new MapItem(currentMap, mapService.isOfficialMap(currentMap)));\n-      } else {\n-        MapBean newMap = newVersionsOfMaps.get(name);\n-        if (currentMap.getFolderName().compareToIgnoreCase(newMap.getFolderName()) != 0 ||\n-            areThereDifferentVersions(currentMap, newMap)) {\n-          items.add(new MapItem(currentMap, newVersionsOfMaps.get(name)));\n-        } else {\n-          items.add(new MapItem(currentMap, false));\n-        }\n-      }\n-    });\n-    this.items = new FilteredList<>(FXCollections.observableArrayList(items).sorted());\n-    return this.items;\n-  }\n-\n-  @SuppressWarnings(\"ConstantConditions\") // Latest version of map from the server cannot be null\n-  private boolean areThereDifferentVersions(MapBean currentMap, MapBean latestMap) {\n-    ComparableVersion currentVersion = currentMap.getVersion();\n-    ComparableVersion latestVersion = latestMap.getVersion();\n-\n-    if (currentVersion == null) {\n-      if (latestVersion != null) {\n-        return true;\n-      }\n-    }\n-    return latestVersion.compareTo(currentVersion) > 0;\n-  }\n-\n-  public CompletableFuture<Map<String, MapBean>> detectNewVersionOfMaps() {\n-    List<MapBean> customMaps = mapService.getCustomMaps();\n-    return fafService.getLatestVersionMaps(customMaps).thenApply(latestVersionMaps -> {\n-      Map<String, MapBean> detectedMaps = new HashMap<>();\n-      customMaps.forEach(currentMap -> {\n-        String name = currentMap.getDisplayName();\n-        if (latestVersionMaps.containsKey(name)) {\n-          MapBean latestMap = latestVersionMaps.get(name);\n-          if (isThereNewVersion(currentMap, latestMap)) {\n-            detectedMaps.putIfAbsent(name, latestMap);\n-          }\n-        }\n-      });\n-      this.newVersionsOfMaps = new HashMap<>(detectedMaps);\n-      return detectedMaps;\n-    });\n-  }\n-\n-  @SuppressWarnings(\"ConstantConditions\") // Latest version of map from the server cannot be null\n-  private boolean isThereNewVersion(MapBean currentMap, MapBean latestMap) {\n-    ComparableVersion currentVersion = currentMap.getVersion();\n-    ComparableVersion latestVersion = latestMap.getVersion();\n-    if (currentVersion == null) {\n-      return !latestVersion.equals(new ComparableVersion(\"1\"));\n-    }\n-    return (latestVersion.compareTo(currentVersion) > 0);\n-  }\n-\n-  public FilteredList<MapItem> getMapItems(boolean reload) {\n-    return reload ? initializeMapItems() : this.items;\n-  }\n-\n-  public CompletableFuture<Void> updateToLatestVersionOfMap(MapItem item) {\n-    return CompletableFuture.runAsync(() -> {\n-      MapBean currentMap = item.getCurrentMap();\n-      if (!newVersionsOfMaps.containsKey(currentMap.getDisplayName())) {\n-        log.warn(\"Map {} is no in list of latest version of map\", currentMap.getDisplayName());\n-        return;\n-      }\n-      mapService.uninstallMap(currentMap).join();\n-      newVersionsOfMaps.remove(currentMap.getDisplayName());\n-\n-      MapBean newMap = item.getNewMap();\n-      if (mapService.getMapLocallyFromName(newMap.getFolderName()).isEmpty()) {\n-        mapService.downloadAndInstallMap(newMap, null, null).join();\n-      }\n-    });\n-  }\n-}\n"}}, {"oid": "bede7405249a386efe7ec8aec5e52407b49af2eb", "url": "https://github.com/FAForever/downlords-faf-client/commit/bede7405249a386efe7ec8aec5e52407b49af2eb", "message": "implement management of installed maps", "committedDate": "2021-01-15T23:59:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDE0MjMzNg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2079#discussion_r560142336", "bodyText": "You don't need create a clonedList here since you are using it to create streams. Also if you use the InstalledMaps Observable List itself the filteredList should update if the map list changes", "author": "Sheikah45", "createdAt": "2021-01-19T12:30:04Z", "path": "src/main/java/com/faforever/client/map/management/MapsManagementController.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package com.faforever.client.map.management;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.fx.StringCell;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.map.MapBean;\n+import com.faforever.client.map.MapService;\n+import com.faforever.client.map.MapService.PreviewSize;\n+import com.faforever.client.map.UninstallMapException;\n+import com.faforever.client.map.management.table.factory.CheckBoxCell;\n+import com.faforever.client.map.management.table.factory.MapBeanRow;\n+import com.faforever.client.map.management.table.factory.PreviewMapCell;\n+import com.faforever.client.notification.NotificationService;\n+import com.google.common.annotations.VisibleForTesting;\n+import javafx.beans.property.SimpleListProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ChoiceBox;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableView;\n+import javafx.scene.image.Image;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.Region;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.maven.artifact.versioning.ComparableVersion;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class MapsManagementController implements Controller<Node> {\n+\n+  public GridPane root;\n+  public ChoiceBox<MapFilter> filterMapsChoiceBox;\n+  public Button removeButton;\n+  public Button closeButton;\n+  public TableView<MapBean> tableView;\n+  public TableColumn<MapBean, Image> previewMapColumn;\n+  public TableColumn<MapBean, MapBean> mapNameColumn;\n+  public TableColumn<MapBean, MapBean> checkboxColumn;\n+\n+  private final MapService mapService;\n+  private final I18n i18n;\n+  private final NotificationService notificationService;\n+\n+  private final ObservableList<MapBean> selectedMaps = FXCollections.observableArrayList();\n+\n+  private FilteredList<MapBean> maps = new FilteredList<>(FXCollections.emptyObservableList());\n+  private List<String> duplicatedMapNames; // duplicated map names but with different versions\n+  private Runnable closeButtonAction;\n+\n+  @Override\n+  public void initialize() {\n+    settingChoiceBox();\n+    settingTableView();\n+    JavaFxUtil.bind(removeButton.disableProperty(), new SimpleListProperty<>(selectedMaps).emptyProperty());\n+    updateTableContent();\n+  }\n+\n+  private void updateTableContent() {\n+    List<MapBean> clonedList = new ArrayList<>(mapService.getInstalledMaps());\n+    List<String> mapNames = clonedList.stream().map(MapBean::getDisplayName).collect(Collectors.toList());\n+    this.maps = new FilteredList<>(FXCollections.observableArrayList(clonedList).sorted(), getPredicateByCurrentFilter());\n+    this.duplicatedMapNames = clonedList.stream()\n+        .filter(map -> map.getVersion() != null && Collections.frequency(mapNames, map.getDisplayName()) > 1)\n+        .map(MapBean::getDisplayName).distinct().collect(Collectors.toList());\n+    tableView.setItems(this.maps);", "originalCommit": "60a1d4bab36c8f7045f7951b247ce61ed1ad5b38", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0c4847ed0ee0d584aedc01aeb08672b06e030c99", "chunk": "diff --git a/src/main/java/com/faforever/client/map/management/MapsManagementController.java b/src/main/java/com/faforever/client/map/management/MapsManagementController.java\nindex c93520bf..3332aba0 100644\n--- a/src/main/java/com/faforever/client/map/management/MapsManagementController.java\n+++ b/src/main/java/com/faforever/client/map/management/MapsManagementController.java\n\n@@ -1,88 +1,61 @@\n package com.faforever.client.map.management;\n \n import com.faforever.client.fx.Controller;\n-import com.faforever.client.fx.JavaFxUtil;\n-import com.faforever.client.fx.StringCell;\n import com.faforever.client.i18n.I18n;\n import com.faforever.client.map.MapBean;\n import com.faforever.client.map.MapService;\n-import com.faforever.client.map.MapService.PreviewSize;\n-import com.faforever.client.map.UninstallMapException;\n-import com.faforever.client.map.management.table.factory.CheckBoxCell;\n-import com.faforever.client.map.management.table.factory.MapBeanRow;\n-import com.faforever.client.map.management.table.factory.PreviewMapCell;\n-import com.faforever.client.notification.NotificationService;\n-import com.google.common.annotations.VisibleForTesting;\n-import javafx.beans.property.SimpleListProperty;\n-import javafx.beans.property.SimpleObjectProperty;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.ui.list.NoSelectionModel;\n import javafx.collections.FXCollections;\n-import javafx.collections.ObservableList;\n import javafx.collections.transformation.FilteredList;\n import javafx.scene.Node;\n import javafx.scene.control.Button;\n import javafx.scene.control.ChoiceBox;\n-import javafx.scene.control.TableColumn;\n-import javafx.scene.control.TableView;\n-import javafx.scene.image.Image;\n+import javafx.scene.control.ListView;\n import javafx.scene.layout.GridPane;\n import javafx.scene.layout.Region;\n import javafx.util.StringConverter;\n-import lombok.RequiredArgsConstructor;\n import lombok.extern.slf4j.Slf4j;\n-import org.apache.maven.artifact.versioning.ComparableVersion;\n import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n import org.springframework.context.annotation.Scope;\n import org.springframework.stereotype.Component;\n \n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.concurrent.CompletableFuture;\n import java.util.function.Predicate;\n-import java.util.stream.Collectors;\n \n @Component\n @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n-@RequiredArgsConstructor\n @Slf4j\n public class MapsManagementController implements Controller<Node> {\n \n   public GridPane root;\n   public ChoiceBox<MapFilter> filterMapsChoiceBox;\n-  public Button removeButton;\n+  public ListView<MapBean> listView;\n   public Button closeButton;\n-  public TableView<MapBean> tableView;\n-  public TableColumn<MapBean, Image> previewMapColumn;\n-  public TableColumn<MapBean, MapBean> mapNameColumn;\n-  public TableColumn<MapBean, MapBean> checkboxColumn;\n \n   private final MapService mapService;\n+  private final UiService uiService;\n   private final I18n i18n;\n-  private final NotificationService notificationService;\n \n-  private final ObservableList<MapBean> selectedMaps = FXCollections.observableArrayList();\n-\n-  private FilteredList<MapBean> maps = new FilteredList<>(FXCollections.emptyObservableList());\n-  private List<String> duplicatedMapNames; // duplicated map names but with different versions\n+  private final FilteredList<MapBean> maps;\n   private Runnable closeButtonAction;\n \n+  public MapsManagementController(UiService uiService, MapService mapService, I18n i18n) {\n+    this.uiService = uiService;\n+    this.mapService = mapService;\n+    this.i18n = i18n;\n+    maps = new FilteredList<>(mapService.getInstalledMaps());\n+  }\n+\n   @Override\n   public void initialize() {\n     settingChoiceBox();\n-    settingTableView();\n-    JavaFxUtil.bind(removeButton.disableProperty(), new SimpleListProperty<>(selectedMaps).emptyProperty());\n-    updateTableContent();\n+    settingListView();\n   }\n \n-  private void updateTableContent() {\n-    List<MapBean> clonedList = new ArrayList<>(mapService.getInstalledMaps());\n-    List<String> mapNames = clonedList.stream().map(MapBean::getDisplayName).collect(Collectors.toList());\n-    this.maps = new FilteredList<>(FXCollections.observableArrayList(clonedList).sorted(), getPredicateByCurrentFilter());\n-    this.duplicatedMapNames = clonedList.stream()\n-        .filter(map -> map.getVersion() != null && Collections.frequency(mapNames, map.getDisplayName()) > 1)\n-        .map(MapBean::getDisplayName).distinct().collect(Collectors.toList());\n-    tableView.setItems(this.maps);\n+  private void settingListView() {\n+    listView.setCellFactory(param -> uiService.<RemovableMapCellController>loadFxml(\"theme/vault/map/removable_map_cell.fxml\"));\n+    listView.setSelectionModel(new NoSelectionModel<>());\n+    listView.setItems(maps);\n   }\n \n   private void settingChoiceBox() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDE0NjMwOQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2079#discussion_r560146309", "bodyText": "If it is going to be displayed to the user it should be a message and use i18n rather than String.format", "author": "Sheikah45", "createdAt": "2021-01-19T12:37:09Z", "path": "src/main/java/com/faforever/client/map/management/MapsManagementController.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package com.faforever.client.map.management;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.fx.StringCell;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.map.MapBean;\n+import com.faforever.client.map.MapService;\n+import com.faforever.client.map.MapService.PreviewSize;\n+import com.faforever.client.map.UninstallMapException;\n+import com.faforever.client.map.management.table.factory.CheckBoxCell;\n+import com.faforever.client.map.management.table.factory.MapBeanRow;\n+import com.faforever.client.map.management.table.factory.PreviewMapCell;\n+import com.faforever.client.notification.NotificationService;\n+import com.google.common.annotations.VisibleForTesting;\n+import javafx.beans.property.SimpleListProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ChoiceBox;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableView;\n+import javafx.scene.image.Image;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.Region;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.maven.artifact.versioning.ComparableVersion;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class MapsManagementController implements Controller<Node> {\n+\n+  public GridPane root;\n+  public ChoiceBox<MapFilter> filterMapsChoiceBox;\n+  public Button removeButton;\n+  public Button closeButton;\n+  public TableView<MapBean> tableView;\n+  public TableColumn<MapBean, Image> previewMapColumn;\n+  public TableColumn<MapBean, MapBean> mapNameColumn;\n+  public TableColumn<MapBean, MapBean> checkboxColumn;\n+\n+  private final MapService mapService;\n+  private final I18n i18n;\n+  private final NotificationService notificationService;\n+\n+  private final ObservableList<MapBean> selectedMaps = FXCollections.observableArrayList();\n+\n+  private FilteredList<MapBean> maps = new FilteredList<>(FXCollections.emptyObservableList());\n+  private List<String> duplicatedMapNames; // duplicated map names but with different versions\n+  private Runnable closeButtonAction;\n+\n+  @Override\n+  public void initialize() {\n+    settingChoiceBox();\n+    settingTableView();\n+    JavaFxUtil.bind(removeButton.disableProperty(), new SimpleListProperty<>(selectedMaps).emptyProperty());\n+    updateTableContent();\n+  }\n+\n+  private void updateTableContent() {\n+    List<MapBean> clonedList = new ArrayList<>(mapService.getInstalledMaps());\n+    List<String> mapNames = clonedList.stream().map(MapBean::getDisplayName).collect(Collectors.toList());\n+    this.maps = new FilteredList<>(FXCollections.observableArrayList(clonedList).sorted(), getPredicateByCurrentFilter());\n+    this.duplicatedMapNames = clonedList.stream()\n+        .filter(map -> map.getVersion() != null && Collections.frequency(mapNames, map.getDisplayName()) > 1)\n+        .map(MapBean::getDisplayName).distinct().collect(Collectors.toList());\n+    tableView.setItems(this.maps);\n+  }\n+\n+  private void settingChoiceBox() {\n+    filterMapsChoiceBox.setConverter(new StringConverter<>() {\n+      @Override\n+      public String toString(MapFilter object) {\n+        return i18n.get(object.getI18n());\n+      }\n+\n+      @Override\n+      public MapFilter fromString(String string) {\n+        throw new UnsupportedOperationException(); // not required\n+      }\n+    });\n+    filterMapsChoiceBox.getSelectionModel().selectedItemProperty().addListener((obs, oldFilter, newFilter) -> {\n+      selectedMaps.clear();\n+      maps.setPredicate(getPredicateBy(newFilter));\n+      tableView.scrollTo(0);\n+    });\n+    filterMapsChoiceBox.setItems(FXCollections.observableArrayList(MapFilter.values()));\n+    filterMapsChoiceBox.setValue(MapFilter.CUSTOM_MAPS);\n+  }\n+\n+  private Predicate<MapBean> getPredicateByCurrentFilter() {\n+    return getPredicateBy(filterMapsChoiceBox.getValue());\n+  }\n+\n+  private Predicate<MapBean> getPredicateBy(MapFilter filter) {\n+    return switch (filter) {\n+      case OFFICIAL_MAPS -> mapService::isOfficialMap;\n+      case CUSTOM_MAPS -> mapService::isCustomMap;\n+      case ALL_MAPS -> null;\n+    };\n+  }\n+\n+  private void settingTableView() {\n+    tableView.setSelectionModel(null);\n+    tableView.setRowFactory(param -> new MapBeanRow());\n+\n+    previewMapColumn.setCellFactory(param -> new PreviewMapCell());\n+    previewMapColumn.setCellValueFactory(param -> new SimpleObjectProperty<>\n+        (mapService.loadPreview(param.getValue().getFolderName(), PreviewSize.SMALL)));\n+\n+    mapNameColumn.setCellFactory(param -> new StringCell<>(item -> {\n+      String name = item.getDisplayName();\n+      ComparableVersion v = item.getVersion();\n+      return v != null && duplicatedMapNames.contains(name)\n+          ? String.format(\"%s | %s %s\", name, i18n.get(\"map.version\"), v.toString())\n+          : name;", "originalCommit": "60a1d4bab36c8f7045f7951b247ce61ed1ad5b38", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0c4847ed0ee0d584aedc01aeb08672b06e030c99", "chunk": "diff --git a/src/main/java/com/faforever/client/map/management/MapsManagementController.java b/src/main/java/com/faforever/client/map/management/MapsManagementController.java\nindex c93520bf..3332aba0 100644\n--- a/src/main/java/com/faforever/client/map/management/MapsManagementController.java\n+++ b/src/main/java/com/faforever/client/map/management/MapsManagementController.java\n\n@@ -1,88 +1,61 @@\n package com.faforever.client.map.management;\n \n import com.faforever.client.fx.Controller;\n-import com.faforever.client.fx.JavaFxUtil;\n-import com.faforever.client.fx.StringCell;\n import com.faforever.client.i18n.I18n;\n import com.faforever.client.map.MapBean;\n import com.faforever.client.map.MapService;\n-import com.faforever.client.map.MapService.PreviewSize;\n-import com.faforever.client.map.UninstallMapException;\n-import com.faforever.client.map.management.table.factory.CheckBoxCell;\n-import com.faforever.client.map.management.table.factory.MapBeanRow;\n-import com.faforever.client.map.management.table.factory.PreviewMapCell;\n-import com.faforever.client.notification.NotificationService;\n-import com.google.common.annotations.VisibleForTesting;\n-import javafx.beans.property.SimpleListProperty;\n-import javafx.beans.property.SimpleObjectProperty;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.ui.list.NoSelectionModel;\n import javafx.collections.FXCollections;\n-import javafx.collections.ObservableList;\n import javafx.collections.transformation.FilteredList;\n import javafx.scene.Node;\n import javafx.scene.control.Button;\n import javafx.scene.control.ChoiceBox;\n-import javafx.scene.control.TableColumn;\n-import javafx.scene.control.TableView;\n-import javafx.scene.image.Image;\n+import javafx.scene.control.ListView;\n import javafx.scene.layout.GridPane;\n import javafx.scene.layout.Region;\n import javafx.util.StringConverter;\n-import lombok.RequiredArgsConstructor;\n import lombok.extern.slf4j.Slf4j;\n-import org.apache.maven.artifact.versioning.ComparableVersion;\n import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n import org.springframework.context.annotation.Scope;\n import org.springframework.stereotype.Component;\n \n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.concurrent.CompletableFuture;\n import java.util.function.Predicate;\n-import java.util.stream.Collectors;\n \n @Component\n @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n-@RequiredArgsConstructor\n @Slf4j\n public class MapsManagementController implements Controller<Node> {\n \n   public GridPane root;\n   public ChoiceBox<MapFilter> filterMapsChoiceBox;\n-  public Button removeButton;\n+  public ListView<MapBean> listView;\n   public Button closeButton;\n-  public TableView<MapBean> tableView;\n-  public TableColumn<MapBean, Image> previewMapColumn;\n-  public TableColumn<MapBean, MapBean> mapNameColumn;\n-  public TableColumn<MapBean, MapBean> checkboxColumn;\n \n   private final MapService mapService;\n+  private final UiService uiService;\n   private final I18n i18n;\n-  private final NotificationService notificationService;\n \n-  private final ObservableList<MapBean> selectedMaps = FXCollections.observableArrayList();\n-\n-  private FilteredList<MapBean> maps = new FilteredList<>(FXCollections.emptyObservableList());\n-  private List<String> duplicatedMapNames; // duplicated map names but with different versions\n+  private final FilteredList<MapBean> maps;\n   private Runnable closeButtonAction;\n \n+  public MapsManagementController(UiService uiService, MapService mapService, I18n i18n) {\n+    this.uiService = uiService;\n+    this.mapService = mapService;\n+    this.i18n = i18n;\n+    maps = new FilteredList<>(mapService.getInstalledMaps());\n+  }\n+\n   @Override\n   public void initialize() {\n     settingChoiceBox();\n-    settingTableView();\n-    JavaFxUtil.bind(removeButton.disableProperty(), new SimpleListProperty<>(selectedMaps).emptyProperty());\n-    updateTableContent();\n+    settingListView();\n   }\n \n-  private void updateTableContent() {\n-    List<MapBean> clonedList = new ArrayList<>(mapService.getInstalledMaps());\n-    List<String> mapNames = clonedList.stream().map(MapBean::getDisplayName).collect(Collectors.toList());\n-    this.maps = new FilteredList<>(FXCollections.observableArrayList(clonedList).sorted(), getPredicateByCurrentFilter());\n-    this.duplicatedMapNames = clonedList.stream()\n-        .filter(map -> map.getVersion() != null && Collections.frequency(mapNames, map.getDisplayName()) > 1)\n-        .map(MapBean::getDisplayName).distinct().collect(Collectors.toList());\n-    tableView.setItems(this.maps);\n+  private void settingListView() {\n+    listView.setCellFactory(param -> uiService.<RemovableMapCellController>loadFxml(\"theme/vault/map/removable_map_cell.fxml\"));\n+    listView.setSelectionModel(new NoSelectionModel<>());\n+    listView.setItems(maps);\n   }\n \n   private void settingChoiceBox() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDE0NzIyOQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2079#discussion_r560147229", "bodyText": "Use selectedMaps.forEach rather than an explicit iterator", "author": "Sheikah45", "createdAt": "2021-01-19T12:38:36Z", "path": "src/main/java/com/faforever/client/map/management/MapsManagementController.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package com.faforever.client.map.management;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.fx.StringCell;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.map.MapBean;\n+import com.faforever.client.map.MapService;\n+import com.faforever.client.map.MapService.PreviewSize;\n+import com.faforever.client.map.UninstallMapException;\n+import com.faforever.client.map.management.table.factory.CheckBoxCell;\n+import com.faforever.client.map.management.table.factory.MapBeanRow;\n+import com.faforever.client.map.management.table.factory.PreviewMapCell;\n+import com.faforever.client.notification.NotificationService;\n+import com.google.common.annotations.VisibleForTesting;\n+import javafx.beans.property.SimpleListProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ChoiceBox;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableView;\n+import javafx.scene.image.Image;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.Region;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.maven.artifact.versioning.ComparableVersion;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class MapsManagementController implements Controller<Node> {\n+\n+  public GridPane root;\n+  public ChoiceBox<MapFilter> filterMapsChoiceBox;\n+  public Button removeButton;\n+  public Button closeButton;\n+  public TableView<MapBean> tableView;\n+  public TableColumn<MapBean, Image> previewMapColumn;\n+  public TableColumn<MapBean, MapBean> mapNameColumn;\n+  public TableColumn<MapBean, MapBean> checkboxColumn;\n+\n+  private final MapService mapService;\n+  private final I18n i18n;\n+  private final NotificationService notificationService;\n+\n+  private final ObservableList<MapBean> selectedMaps = FXCollections.observableArrayList();\n+\n+  private FilteredList<MapBean> maps = new FilteredList<>(FXCollections.emptyObservableList());\n+  private List<String> duplicatedMapNames; // duplicated map names but with different versions\n+  private Runnable closeButtonAction;\n+\n+  @Override\n+  public void initialize() {\n+    settingChoiceBox();\n+    settingTableView();\n+    JavaFxUtil.bind(removeButton.disableProperty(), new SimpleListProperty<>(selectedMaps).emptyProperty());\n+    updateTableContent();\n+  }\n+\n+  private void updateTableContent() {\n+    List<MapBean> clonedList = new ArrayList<>(mapService.getInstalledMaps());\n+    List<String> mapNames = clonedList.stream().map(MapBean::getDisplayName).collect(Collectors.toList());\n+    this.maps = new FilteredList<>(FXCollections.observableArrayList(clonedList).sorted(), getPredicateByCurrentFilter());\n+    this.duplicatedMapNames = clonedList.stream()\n+        .filter(map -> map.getVersion() != null && Collections.frequency(mapNames, map.getDisplayName()) > 1)\n+        .map(MapBean::getDisplayName).distinct().collect(Collectors.toList());\n+    tableView.setItems(this.maps);\n+  }\n+\n+  private void settingChoiceBox() {\n+    filterMapsChoiceBox.setConverter(new StringConverter<>() {\n+      @Override\n+      public String toString(MapFilter object) {\n+        return i18n.get(object.getI18n());\n+      }\n+\n+      @Override\n+      public MapFilter fromString(String string) {\n+        throw new UnsupportedOperationException(); // not required\n+      }\n+    });\n+    filterMapsChoiceBox.getSelectionModel().selectedItemProperty().addListener((obs, oldFilter, newFilter) -> {\n+      selectedMaps.clear();\n+      maps.setPredicate(getPredicateBy(newFilter));\n+      tableView.scrollTo(0);\n+    });\n+    filterMapsChoiceBox.setItems(FXCollections.observableArrayList(MapFilter.values()));\n+    filterMapsChoiceBox.setValue(MapFilter.CUSTOM_MAPS);\n+  }\n+\n+  private Predicate<MapBean> getPredicateByCurrentFilter() {\n+    return getPredicateBy(filterMapsChoiceBox.getValue());\n+  }\n+\n+  private Predicate<MapBean> getPredicateBy(MapFilter filter) {\n+    return switch (filter) {\n+      case OFFICIAL_MAPS -> mapService::isOfficialMap;\n+      case CUSTOM_MAPS -> mapService::isCustomMap;\n+      case ALL_MAPS -> null;\n+    };\n+  }\n+\n+  private void settingTableView() {\n+    tableView.setSelectionModel(null);\n+    tableView.setRowFactory(param -> new MapBeanRow());\n+\n+    previewMapColumn.setCellFactory(param -> new PreviewMapCell());\n+    previewMapColumn.setCellValueFactory(param -> new SimpleObjectProperty<>\n+        (mapService.loadPreview(param.getValue().getFolderName(), PreviewSize.SMALL)));\n+\n+    mapNameColumn.setCellFactory(param -> new StringCell<>(item -> {\n+      String name = item.getDisplayName();\n+      ComparableVersion v = item.getVersion();\n+      return v != null && duplicatedMapNames.contains(name)\n+          ? String.format(\"%s | %s %s\", name, i18n.get(\"map.version\"), v.toString())\n+          : name;\n+    }));\n+    mapNameColumn.setCellValueFactory(param -> new SimpleObjectProperty<>(param.getValue()));\n+\n+    checkboxColumn.setCellFactory(param -> new CheckBoxCell(selectedMaps, mapService));\n+    checkboxColumn.setCellValueFactory(param -> new SimpleObjectProperty<>(param.getValue()));\n+  }\n+\n+  public void onRemoveButtonClicked() {\n+    CompletableFuture.runAsync( () -> {\n+      Iterator<MapBean> iterator = selectedMaps.iterator();\n+      while (iterator.hasNext()) {", "originalCommit": "60a1d4bab36c8f7045f7951b247ce61ed1ad5b38", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0c4847ed0ee0d584aedc01aeb08672b06e030c99", "chunk": "diff --git a/src/main/java/com/faforever/client/map/management/MapsManagementController.java b/src/main/java/com/faforever/client/map/management/MapsManagementController.java\nindex c93520bf..3332aba0 100644\n--- a/src/main/java/com/faforever/client/map/management/MapsManagementController.java\n+++ b/src/main/java/com/faforever/client/map/management/MapsManagementController.java\n\n@@ -1,88 +1,61 @@\n package com.faforever.client.map.management;\n \n import com.faforever.client.fx.Controller;\n-import com.faforever.client.fx.JavaFxUtil;\n-import com.faforever.client.fx.StringCell;\n import com.faforever.client.i18n.I18n;\n import com.faforever.client.map.MapBean;\n import com.faforever.client.map.MapService;\n-import com.faforever.client.map.MapService.PreviewSize;\n-import com.faforever.client.map.UninstallMapException;\n-import com.faforever.client.map.management.table.factory.CheckBoxCell;\n-import com.faforever.client.map.management.table.factory.MapBeanRow;\n-import com.faforever.client.map.management.table.factory.PreviewMapCell;\n-import com.faforever.client.notification.NotificationService;\n-import com.google.common.annotations.VisibleForTesting;\n-import javafx.beans.property.SimpleListProperty;\n-import javafx.beans.property.SimpleObjectProperty;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.ui.list.NoSelectionModel;\n import javafx.collections.FXCollections;\n-import javafx.collections.ObservableList;\n import javafx.collections.transformation.FilteredList;\n import javafx.scene.Node;\n import javafx.scene.control.Button;\n import javafx.scene.control.ChoiceBox;\n-import javafx.scene.control.TableColumn;\n-import javafx.scene.control.TableView;\n-import javafx.scene.image.Image;\n+import javafx.scene.control.ListView;\n import javafx.scene.layout.GridPane;\n import javafx.scene.layout.Region;\n import javafx.util.StringConverter;\n-import lombok.RequiredArgsConstructor;\n import lombok.extern.slf4j.Slf4j;\n-import org.apache.maven.artifact.versioning.ComparableVersion;\n import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n import org.springframework.context.annotation.Scope;\n import org.springframework.stereotype.Component;\n \n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.concurrent.CompletableFuture;\n import java.util.function.Predicate;\n-import java.util.stream.Collectors;\n \n @Component\n @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n-@RequiredArgsConstructor\n @Slf4j\n public class MapsManagementController implements Controller<Node> {\n \n   public GridPane root;\n   public ChoiceBox<MapFilter> filterMapsChoiceBox;\n-  public Button removeButton;\n+  public ListView<MapBean> listView;\n   public Button closeButton;\n-  public TableView<MapBean> tableView;\n-  public TableColumn<MapBean, Image> previewMapColumn;\n-  public TableColumn<MapBean, MapBean> mapNameColumn;\n-  public TableColumn<MapBean, MapBean> checkboxColumn;\n \n   private final MapService mapService;\n+  private final UiService uiService;\n   private final I18n i18n;\n-  private final NotificationService notificationService;\n \n-  private final ObservableList<MapBean> selectedMaps = FXCollections.observableArrayList();\n-\n-  private FilteredList<MapBean> maps = new FilteredList<>(FXCollections.emptyObservableList());\n-  private List<String> duplicatedMapNames; // duplicated map names but with different versions\n+  private final FilteredList<MapBean> maps;\n   private Runnable closeButtonAction;\n \n+  public MapsManagementController(UiService uiService, MapService mapService, I18n i18n) {\n+    this.uiService = uiService;\n+    this.mapService = mapService;\n+    this.i18n = i18n;\n+    maps = new FilteredList<>(mapService.getInstalledMaps());\n+  }\n+\n   @Override\n   public void initialize() {\n     settingChoiceBox();\n-    settingTableView();\n-    JavaFxUtil.bind(removeButton.disableProperty(), new SimpleListProperty<>(selectedMaps).emptyProperty());\n-    updateTableContent();\n+    settingListView();\n   }\n \n-  private void updateTableContent() {\n-    List<MapBean> clonedList = new ArrayList<>(mapService.getInstalledMaps());\n-    List<String> mapNames = clonedList.stream().map(MapBean::getDisplayName).collect(Collectors.toList());\n-    this.maps = new FilteredList<>(FXCollections.observableArrayList(clonedList).sorted(), getPredicateByCurrentFilter());\n-    this.duplicatedMapNames = clonedList.stream()\n-        .filter(map -> map.getVersion() != null && Collections.frequency(mapNames, map.getDisplayName()) > 1)\n-        .map(MapBean::getDisplayName).distinct().collect(Collectors.toList());\n-    tableView.setItems(this.maps);\n+  private void settingListView() {\n+    listView.setCellFactory(param -> uiService.<RemovableMapCellController>loadFxml(\"theme/vault/map/removable_map_cell.fxml\"));\n+    listView.setSelectionModel(new NoSelectionModel<>());\n+    listView.setItems(maps);\n   }\n \n   private void settingChoiceBox() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDE0ODY3Mw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2079#discussion_r560148673", "bodyText": "Rather than using whenComplete since you are only checking for an exception you can use .exceptionally", "author": "Sheikah45", "createdAt": "2021-01-19T12:41:10Z", "path": "src/main/java/com/faforever/client/map/management/MapsManagementController.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package com.faforever.client.map.management;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.fx.StringCell;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.map.MapBean;\n+import com.faforever.client.map.MapService;\n+import com.faforever.client.map.MapService.PreviewSize;\n+import com.faforever.client.map.UninstallMapException;\n+import com.faforever.client.map.management.table.factory.CheckBoxCell;\n+import com.faforever.client.map.management.table.factory.MapBeanRow;\n+import com.faforever.client.map.management.table.factory.PreviewMapCell;\n+import com.faforever.client.notification.NotificationService;\n+import com.google.common.annotations.VisibleForTesting;\n+import javafx.beans.property.SimpleListProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ChoiceBox;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableView;\n+import javafx.scene.image.Image;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.Region;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.maven.artifact.versioning.ComparableVersion;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class MapsManagementController implements Controller<Node> {\n+\n+  public GridPane root;\n+  public ChoiceBox<MapFilter> filterMapsChoiceBox;\n+  public Button removeButton;\n+  public Button closeButton;\n+  public TableView<MapBean> tableView;\n+  public TableColumn<MapBean, Image> previewMapColumn;\n+  public TableColumn<MapBean, MapBean> mapNameColumn;\n+  public TableColumn<MapBean, MapBean> checkboxColumn;\n+\n+  private final MapService mapService;\n+  private final I18n i18n;\n+  private final NotificationService notificationService;\n+\n+  private final ObservableList<MapBean> selectedMaps = FXCollections.observableArrayList();\n+\n+  private FilteredList<MapBean> maps = new FilteredList<>(FXCollections.emptyObservableList());\n+  private List<String> duplicatedMapNames; // duplicated map names but with different versions\n+  private Runnable closeButtonAction;\n+\n+  @Override\n+  public void initialize() {\n+    settingChoiceBox();\n+    settingTableView();\n+    JavaFxUtil.bind(removeButton.disableProperty(), new SimpleListProperty<>(selectedMaps).emptyProperty());\n+    updateTableContent();\n+  }\n+\n+  private void updateTableContent() {\n+    List<MapBean> clonedList = new ArrayList<>(mapService.getInstalledMaps());\n+    List<String> mapNames = clonedList.stream().map(MapBean::getDisplayName).collect(Collectors.toList());\n+    this.maps = new FilteredList<>(FXCollections.observableArrayList(clonedList).sorted(), getPredicateByCurrentFilter());\n+    this.duplicatedMapNames = clonedList.stream()\n+        .filter(map -> map.getVersion() != null && Collections.frequency(mapNames, map.getDisplayName()) > 1)\n+        .map(MapBean::getDisplayName).distinct().collect(Collectors.toList());\n+    tableView.setItems(this.maps);\n+  }\n+\n+  private void settingChoiceBox() {\n+    filterMapsChoiceBox.setConverter(new StringConverter<>() {\n+      @Override\n+      public String toString(MapFilter object) {\n+        return i18n.get(object.getI18n());\n+      }\n+\n+      @Override\n+      public MapFilter fromString(String string) {\n+        throw new UnsupportedOperationException(); // not required\n+      }\n+    });\n+    filterMapsChoiceBox.getSelectionModel().selectedItemProperty().addListener((obs, oldFilter, newFilter) -> {\n+      selectedMaps.clear();\n+      maps.setPredicate(getPredicateBy(newFilter));\n+      tableView.scrollTo(0);\n+    });\n+    filterMapsChoiceBox.setItems(FXCollections.observableArrayList(MapFilter.values()));\n+    filterMapsChoiceBox.setValue(MapFilter.CUSTOM_MAPS);\n+  }\n+\n+  private Predicate<MapBean> getPredicateByCurrentFilter() {\n+    return getPredicateBy(filterMapsChoiceBox.getValue());\n+  }\n+\n+  private Predicate<MapBean> getPredicateBy(MapFilter filter) {\n+    return switch (filter) {\n+      case OFFICIAL_MAPS -> mapService::isOfficialMap;\n+      case CUSTOM_MAPS -> mapService::isCustomMap;\n+      case ALL_MAPS -> null;\n+    };\n+  }\n+\n+  private void settingTableView() {\n+    tableView.setSelectionModel(null);\n+    tableView.setRowFactory(param -> new MapBeanRow());\n+\n+    previewMapColumn.setCellFactory(param -> new PreviewMapCell());\n+    previewMapColumn.setCellValueFactory(param -> new SimpleObjectProperty<>\n+        (mapService.loadPreview(param.getValue().getFolderName(), PreviewSize.SMALL)));\n+\n+    mapNameColumn.setCellFactory(param -> new StringCell<>(item -> {\n+      String name = item.getDisplayName();\n+      ComparableVersion v = item.getVersion();\n+      return v != null && duplicatedMapNames.contains(name)\n+          ? String.format(\"%s | %s %s\", name, i18n.get(\"map.version\"), v.toString())\n+          : name;\n+    }));\n+    mapNameColumn.setCellValueFactory(param -> new SimpleObjectProperty<>(param.getValue()));\n+\n+    checkboxColumn.setCellFactory(param -> new CheckBoxCell(selectedMaps, mapService));\n+    checkboxColumn.setCellValueFactory(param -> new SimpleObjectProperty<>(param.getValue()));\n+  }\n+\n+  public void onRemoveButtonClicked() {\n+    CompletableFuture.runAsync( () -> {\n+      Iterator<MapBean> iterator = selectedMaps.iterator();\n+      while (iterator.hasNext()) {\n+        MapBean map = iterator.next();\n+        mapService.uninstallMap(map).whenComplete((unused, throwable) -> {\n+          if (throwable == null) {\n+            iterator.remove();\n+          } else {\n+            throw new UninstallMapException(String.format(\"error when uninstall map '%s'\", map), throwable);\n+          }", "originalCommit": "60a1d4bab36c8f7045f7951b247ce61ed1ad5b38", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0c4847ed0ee0d584aedc01aeb08672b06e030c99", "chunk": "diff --git a/src/main/java/com/faforever/client/map/management/MapsManagementController.java b/src/main/java/com/faforever/client/map/management/MapsManagementController.java\nindex c93520bf..3332aba0 100644\n--- a/src/main/java/com/faforever/client/map/management/MapsManagementController.java\n+++ b/src/main/java/com/faforever/client/map/management/MapsManagementController.java\n\n@@ -1,88 +1,61 @@\n package com.faforever.client.map.management;\n \n import com.faforever.client.fx.Controller;\n-import com.faforever.client.fx.JavaFxUtil;\n-import com.faforever.client.fx.StringCell;\n import com.faforever.client.i18n.I18n;\n import com.faforever.client.map.MapBean;\n import com.faforever.client.map.MapService;\n-import com.faforever.client.map.MapService.PreviewSize;\n-import com.faforever.client.map.UninstallMapException;\n-import com.faforever.client.map.management.table.factory.CheckBoxCell;\n-import com.faforever.client.map.management.table.factory.MapBeanRow;\n-import com.faforever.client.map.management.table.factory.PreviewMapCell;\n-import com.faforever.client.notification.NotificationService;\n-import com.google.common.annotations.VisibleForTesting;\n-import javafx.beans.property.SimpleListProperty;\n-import javafx.beans.property.SimpleObjectProperty;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.ui.list.NoSelectionModel;\n import javafx.collections.FXCollections;\n-import javafx.collections.ObservableList;\n import javafx.collections.transformation.FilteredList;\n import javafx.scene.Node;\n import javafx.scene.control.Button;\n import javafx.scene.control.ChoiceBox;\n-import javafx.scene.control.TableColumn;\n-import javafx.scene.control.TableView;\n-import javafx.scene.image.Image;\n+import javafx.scene.control.ListView;\n import javafx.scene.layout.GridPane;\n import javafx.scene.layout.Region;\n import javafx.util.StringConverter;\n-import lombok.RequiredArgsConstructor;\n import lombok.extern.slf4j.Slf4j;\n-import org.apache.maven.artifact.versioning.ComparableVersion;\n import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n import org.springframework.context.annotation.Scope;\n import org.springframework.stereotype.Component;\n \n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.concurrent.CompletableFuture;\n import java.util.function.Predicate;\n-import java.util.stream.Collectors;\n \n @Component\n @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n-@RequiredArgsConstructor\n @Slf4j\n public class MapsManagementController implements Controller<Node> {\n \n   public GridPane root;\n   public ChoiceBox<MapFilter> filterMapsChoiceBox;\n-  public Button removeButton;\n+  public ListView<MapBean> listView;\n   public Button closeButton;\n-  public TableView<MapBean> tableView;\n-  public TableColumn<MapBean, Image> previewMapColumn;\n-  public TableColumn<MapBean, MapBean> mapNameColumn;\n-  public TableColumn<MapBean, MapBean> checkboxColumn;\n \n   private final MapService mapService;\n+  private final UiService uiService;\n   private final I18n i18n;\n-  private final NotificationService notificationService;\n \n-  private final ObservableList<MapBean> selectedMaps = FXCollections.observableArrayList();\n-\n-  private FilteredList<MapBean> maps = new FilteredList<>(FXCollections.emptyObservableList());\n-  private List<String> duplicatedMapNames; // duplicated map names but with different versions\n+  private final FilteredList<MapBean> maps;\n   private Runnable closeButtonAction;\n \n+  public MapsManagementController(UiService uiService, MapService mapService, I18n i18n) {\n+    this.uiService = uiService;\n+    this.mapService = mapService;\n+    this.i18n = i18n;\n+    maps = new FilteredList<>(mapService.getInstalledMaps());\n+  }\n+\n   @Override\n   public void initialize() {\n     settingChoiceBox();\n-    settingTableView();\n-    JavaFxUtil.bind(removeButton.disableProperty(), new SimpleListProperty<>(selectedMaps).emptyProperty());\n-    updateTableContent();\n+    settingListView();\n   }\n \n-  private void updateTableContent() {\n-    List<MapBean> clonedList = new ArrayList<>(mapService.getInstalledMaps());\n-    List<String> mapNames = clonedList.stream().map(MapBean::getDisplayName).collect(Collectors.toList());\n-    this.maps = new FilteredList<>(FXCollections.observableArrayList(clonedList).sorted(), getPredicateByCurrentFilter());\n-    this.duplicatedMapNames = clonedList.stream()\n-        .filter(map -> map.getVersion() != null && Collections.frequency(mapNames, map.getDisplayName()) > 1)\n-        .map(MapBean::getDisplayName).distinct().collect(Collectors.toList());\n-    tableView.setItems(this.maps);\n+  private void settingListView() {\n+    listView.setCellFactory(param -> uiService.<RemovableMapCellController>loadFxml(\"theme/vault/map/removable_map_cell.fxml\"));\n+    listView.setSelectionModel(new NoSelectionModel<>());\n+    listView.setItems(maps);\n   }\n \n   private void settingChoiceBox() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDE0ODgxMA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2079#discussion_r560148810", "bodyText": "Log the error", "author": "Sheikah45", "createdAt": "2021-01-19T12:41:21Z", "path": "src/main/java/com/faforever/client/map/management/MapsManagementController.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package com.faforever.client.map.management;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.fx.StringCell;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.map.MapBean;\n+import com.faforever.client.map.MapService;\n+import com.faforever.client.map.MapService.PreviewSize;\n+import com.faforever.client.map.UninstallMapException;\n+import com.faforever.client.map.management.table.factory.CheckBoxCell;\n+import com.faforever.client.map.management.table.factory.MapBeanRow;\n+import com.faforever.client.map.management.table.factory.PreviewMapCell;\n+import com.faforever.client.notification.NotificationService;\n+import com.google.common.annotations.VisibleForTesting;\n+import javafx.beans.property.SimpleListProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ChoiceBox;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableView;\n+import javafx.scene.image.Image;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.Region;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.maven.artifact.versioning.ComparableVersion;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class MapsManagementController implements Controller<Node> {\n+\n+  public GridPane root;\n+  public ChoiceBox<MapFilter> filterMapsChoiceBox;\n+  public Button removeButton;\n+  public Button closeButton;\n+  public TableView<MapBean> tableView;\n+  public TableColumn<MapBean, Image> previewMapColumn;\n+  public TableColumn<MapBean, MapBean> mapNameColumn;\n+  public TableColumn<MapBean, MapBean> checkboxColumn;\n+\n+  private final MapService mapService;\n+  private final I18n i18n;\n+  private final NotificationService notificationService;\n+\n+  private final ObservableList<MapBean> selectedMaps = FXCollections.observableArrayList();\n+\n+  private FilteredList<MapBean> maps = new FilteredList<>(FXCollections.emptyObservableList());\n+  private List<String> duplicatedMapNames; // duplicated map names but with different versions\n+  private Runnable closeButtonAction;\n+\n+  @Override\n+  public void initialize() {\n+    settingChoiceBox();\n+    settingTableView();\n+    JavaFxUtil.bind(removeButton.disableProperty(), new SimpleListProperty<>(selectedMaps).emptyProperty());\n+    updateTableContent();\n+  }\n+\n+  private void updateTableContent() {\n+    List<MapBean> clonedList = new ArrayList<>(mapService.getInstalledMaps());\n+    List<String> mapNames = clonedList.stream().map(MapBean::getDisplayName).collect(Collectors.toList());\n+    this.maps = new FilteredList<>(FXCollections.observableArrayList(clonedList).sorted(), getPredicateByCurrentFilter());\n+    this.duplicatedMapNames = clonedList.stream()\n+        .filter(map -> map.getVersion() != null && Collections.frequency(mapNames, map.getDisplayName()) > 1)\n+        .map(MapBean::getDisplayName).distinct().collect(Collectors.toList());\n+    tableView.setItems(this.maps);\n+  }\n+\n+  private void settingChoiceBox() {\n+    filterMapsChoiceBox.setConverter(new StringConverter<>() {\n+      @Override\n+      public String toString(MapFilter object) {\n+        return i18n.get(object.getI18n());\n+      }\n+\n+      @Override\n+      public MapFilter fromString(String string) {\n+        throw new UnsupportedOperationException(); // not required\n+      }\n+    });\n+    filterMapsChoiceBox.getSelectionModel().selectedItemProperty().addListener((obs, oldFilter, newFilter) -> {\n+      selectedMaps.clear();\n+      maps.setPredicate(getPredicateBy(newFilter));\n+      tableView.scrollTo(0);\n+    });\n+    filterMapsChoiceBox.setItems(FXCollections.observableArrayList(MapFilter.values()));\n+    filterMapsChoiceBox.setValue(MapFilter.CUSTOM_MAPS);\n+  }\n+\n+  private Predicate<MapBean> getPredicateByCurrentFilter() {\n+    return getPredicateBy(filterMapsChoiceBox.getValue());\n+  }\n+\n+  private Predicate<MapBean> getPredicateBy(MapFilter filter) {\n+    return switch (filter) {\n+      case OFFICIAL_MAPS -> mapService::isOfficialMap;\n+      case CUSTOM_MAPS -> mapService::isCustomMap;\n+      case ALL_MAPS -> null;\n+    };\n+  }\n+\n+  private void settingTableView() {\n+    tableView.setSelectionModel(null);\n+    tableView.setRowFactory(param -> new MapBeanRow());\n+\n+    previewMapColumn.setCellFactory(param -> new PreviewMapCell());\n+    previewMapColumn.setCellValueFactory(param -> new SimpleObjectProperty<>\n+        (mapService.loadPreview(param.getValue().getFolderName(), PreviewSize.SMALL)));\n+\n+    mapNameColumn.setCellFactory(param -> new StringCell<>(item -> {\n+      String name = item.getDisplayName();\n+      ComparableVersion v = item.getVersion();\n+      return v != null && duplicatedMapNames.contains(name)\n+          ? String.format(\"%s | %s %s\", name, i18n.get(\"map.version\"), v.toString())\n+          : name;\n+    }));\n+    mapNameColumn.setCellValueFactory(param -> new SimpleObjectProperty<>(param.getValue()));\n+\n+    checkboxColumn.setCellFactory(param -> new CheckBoxCell(selectedMaps, mapService));\n+    checkboxColumn.setCellValueFactory(param -> new SimpleObjectProperty<>(param.getValue()));\n+  }\n+\n+  public void onRemoveButtonClicked() {\n+    CompletableFuture.runAsync( () -> {\n+      Iterator<MapBean> iterator = selectedMaps.iterator();\n+      while (iterator.hasNext()) {\n+        MapBean map = iterator.next();\n+        mapService.uninstallMap(map).whenComplete((unused, throwable) -> {\n+          if (throwable == null) {\n+            iterator.remove();\n+          } else {\n+            throw new UninstallMapException(String.format(\"error when uninstall map '%s'\", map), throwable);", "originalCommit": "60a1d4bab36c8f7045f7951b247ce61ed1ad5b38", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0c4847ed0ee0d584aedc01aeb08672b06e030c99", "chunk": "diff --git a/src/main/java/com/faforever/client/map/management/MapsManagementController.java b/src/main/java/com/faforever/client/map/management/MapsManagementController.java\nindex c93520bf..3332aba0 100644\n--- a/src/main/java/com/faforever/client/map/management/MapsManagementController.java\n+++ b/src/main/java/com/faforever/client/map/management/MapsManagementController.java\n\n@@ -1,88 +1,61 @@\n package com.faforever.client.map.management;\n \n import com.faforever.client.fx.Controller;\n-import com.faforever.client.fx.JavaFxUtil;\n-import com.faforever.client.fx.StringCell;\n import com.faforever.client.i18n.I18n;\n import com.faforever.client.map.MapBean;\n import com.faforever.client.map.MapService;\n-import com.faforever.client.map.MapService.PreviewSize;\n-import com.faforever.client.map.UninstallMapException;\n-import com.faforever.client.map.management.table.factory.CheckBoxCell;\n-import com.faforever.client.map.management.table.factory.MapBeanRow;\n-import com.faforever.client.map.management.table.factory.PreviewMapCell;\n-import com.faforever.client.notification.NotificationService;\n-import com.google.common.annotations.VisibleForTesting;\n-import javafx.beans.property.SimpleListProperty;\n-import javafx.beans.property.SimpleObjectProperty;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.ui.list.NoSelectionModel;\n import javafx.collections.FXCollections;\n-import javafx.collections.ObservableList;\n import javafx.collections.transformation.FilteredList;\n import javafx.scene.Node;\n import javafx.scene.control.Button;\n import javafx.scene.control.ChoiceBox;\n-import javafx.scene.control.TableColumn;\n-import javafx.scene.control.TableView;\n-import javafx.scene.image.Image;\n+import javafx.scene.control.ListView;\n import javafx.scene.layout.GridPane;\n import javafx.scene.layout.Region;\n import javafx.util.StringConverter;\n-import lombok.RequiredArgsConstructor;\n import lombok.extern.slf4j.Slf4j;\n-import org.apache.maven.artifact.versioning.ComparableVersion;\n import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n import org.springframework.context.annotation.Scope;\n import org.springframework.stereotype.Component;\n \n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.concurrent.CompletableFuture;\n import java.util.function.Predicate;\n-import java.util.stream.Collectors;\n \n @Component\n @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n-@RequiredArgsConstructor\n @Slf4j\n public class MapsManagementController implements Controller<Node> {\n \n   public GridPane root;\n   public ChoiceBox<MapFilter> filterMapsChoiceBox;\n-  public Button removeButton;\n+  public ListView<MapBean> listView;\n   public Button closeButton;\n-  public TableView<MapBean> tableView;\n-  public TableColumn<MapBean, Image> previewMapColumn;\n-  public TableColumn<MapBean, MapBean> mapNameColumn;\n-  public TableColumn<MapBean, MapBean> checkboxColumn;\n \n   private final MapService mapService;\n+  private final UiService uiService;\n   private final I18n i18n;\n-  private final NotificationService notificationService;\n \n-  private final ObservableList<MapBean> selectedMaps = FXCollections.observableArrayList();\n-\n-  private FilteredList<MapBean> maps = new FilteredList<>(FXCollections.emptyObservableList());\n-  private List<String> duplicatedMapNames; // duplicated map names but with different versions\n+  private final FilteredList<MapBean> maps;\n   private Runnable closeButtonAction;\n \n+  public MapsManagementController(UiService uiService, MapService mapService, I18n i18n) {\n+    this.uiService = uiService;\n+    this.mapService = mapService;\n+    this.i18n = i18n;\n+    maps = new FilteredList<>(mapService.getInstalledMaps());\n+  }\n+\n   @Override\n   public void initialize() {\n     settingChoiceBox();\n-    settingTableView();\n-    JavaFxUtil.bind(removeButton.disableProperty(), new SimpleListProperty<>(selectedMaps).emptyProperty());\n-    updateTableContent();\n+    settingListView();\n   }\n \n-  private void updateTableContent() {\n-    List<MapBean> clonedList = new ArrayList<>(mapService.getInstalledMaps());\n-    List<String> mapNames = clonedList.stream().map(MapBean::getDisplayName).collect(Collectors.toList());\n-    this.maps = new FilteredList<>(FXCollections.observableArrayList(clonedList).sorted(), getPredicateByCurrentFilter());\n-    this.duplicatedMapNames = clonedList.stream()\n-        .filter(map -> map.getVersion() != null && Collections.frequency(mapNames, map.getDisplayName()) > 1)\n-        .map(MapBean::getDisplayName).distinct().collect(Collectors.toList());\n-    tableView.setItems(this.maps);\n+  private void settingListView() {\n+    listView.setCellFactory(param -> uiService.<RemovableMapCellController>loadFxml(\"theme/vault/map/removable_map_cell.fxml\"));\n+    listView.setSelectionModel(new NoSelectionModel<>());\n+    listView.setItems(maps);\n   }\n \n   private void settingChoiceBox() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDE1MDIzOQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2079#discussion_r560150239", "bodyText": "We don't really want to make this a blocking process as that defeats the purpose of using the CompletableFuture. It looks like you want to make sure all of these tasks finish so that you can update the table. This can be done either by using a completeableFuture.allOf on the list of removal futures. Additionally if the installedMaps list backs the filtered maps list itself as mentioned above it should update automatically", "author": "Sheikah45", "createdAt": "2021-01-19T12:43:59Z", "path": "src/main/java/com/faforever/client/map/management/MapsManagementController.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package com.faforever.client.map.management;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.fx.StringCell;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.map.MapBean;\n+import com.faforever.client.map.MapService;\n+import com.faforever.client.map.MapService.PreviewSize;\n+import com.faforever.client.map.UninstallMapException;\n+import com.faforever.client.map.management.table.factory.CheckBoxCell;\n+import com.faforever.client.map.management.table.factory.MapBeanRow;\n+import com.faforever.client.map.management.table.factory.PreviewMapCell;\n+import com.faforever.client.notification.NotificationService;\n+import com.google.common.annotations.VisibleForTesting;\n+import javafx.beans.property.SimpleListProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ChoiceBox;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableView;\n+import javafx.scene.image.Image;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.Region;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.maven.artifact.versioning.ComparableVersion;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class MapsManagementController implements Controller<Node> {\n+\n+  public GridPane root;\n+  public ChoiceBox<MapFilter> filterMapsChoiceBox;\n+  public Button removeButton;\n+  public Button closeButton;\n+  public TableView<MapBean> tableView;\n+  public TableColumn<MapBean, Image> previewMapColumn;\n+  public TableColumn<MapBean, MapBean> mapNameColumn;\n+  public TableColumn<MapBean, MapBean> checkboxColumn;\n+\n+  private final MapService mapService;\n+  private final I18n i18n;\n+  private final NotificationService notificationService;\n+\n+  private final ObservableList<MapBean> selectedMaps = FXCollections.observableArrayList();\n+\n+  private FilteredList<MapBean> maps = new FilteredList<>(FXCollections.emptyObservableList());\n+  private List<String> duplicatedMapNames; // duplicated map names but with different versions\n+  private Runnable closeButtonAction;\n+\n+  @Override\n+  public void initialize() {\n+    settingChoiceBox();\n+    settingTableView();\n+    JavaFxUtil.bind(removeButton.disableProperty(), new SimpleListProperty<>(selectedMaps).emptyProperty());\n+    updateTableContent();\n+  }\n+\n+  private void updateTableContent() {\n+    List<MapBean> clonedList = new ArrayList<>(mapService.getInstalledMaps());\n+    List<String> mapNames = clonedList.stream().map(MapBean::getDisplayName).collect(Collectors.toList());\n+    this.maps = new FilteredList<>(FXCollections.observableArrayList(clonedList).sorted(), getPredicateByCurrentFilter());\n+    this.duplicatedMapNames = clonedList.stream()\n+        .filter(map -> map.getVersion() != null && Collections.frequency(mapNames, map.getDisplayName()) > 1)\n+        .map(MapBean::getDisplayName).distinct().collect(Collectors.toList());\n+    tableView.setItems(this.maps);\n+  }\n+\n+  private void settingChoiceBox() {\n+    filterMapsChoiceBox.setConverter(new StringConverter<>() {\n+      @Override\n+      public String toString(MapFilter object) {\n+        return i18n.get(object.getI18n());\n+      }\n+\n+      @Override\n+      public MapFilter fromString(String string) {\n+        throw new UnsupportedOperationException(); // not required\n+      }\n+    });\n+    filterMapsChoiceBox.getSelectionModel().selectedItemProperty().addListener((obs, oldFilter, newFilter) -> {\n+      selectedMaps.clear();\n+      maps.setPredicate(getPredicateBy(newFilter));\n+      tableView.scrollTo(0);\n+    });\n+    filterMapsChoiceBox.setItems(FXCollections.observableArrayList(MapFilter.values()));\n+    filterMapsChoiceBox.setValue(MapFilter.CUSTOM_MAPS);\n+  }\n+\n+  private Predicate<MapBean> getPredicateByCurrentFilter() {\n+    return getPredicateBy(filterMapsChoiceBox.getValue());\n+  }\n+\n+  private Predicate<MapBean> getPredicateBy(MapFilter filter) {\n+    return switch (filter) {\n+      case OFFICIAL_MAPS -> mapService::isOfficialMap;\n+      case CUSTOM_MAPS -> mapService::isCustomMap;\n+      case ALL_MAPS -> null;\n+    };\n+  }\n+\n+  private void settingTableView() {\n+    tableView.setSelectionModel(null);\n+    tableView.setRowFactory(param -> new MapBeanRow());\n+\n+    previewMapColumn.setCellFactory(param -> new PreviewMapCell());\n+    previewMapColumn.setCellValueFactory(param -> new SimpleObjectProperty<>\n+        (mapService.loadPreview(param.getValue().getFolderName(), PreviewSize.SMALL)));\n+\n+    mapNameColumn.setCellFactory(param -> new StringCell<>(item -> {\n+      String name = item.getDisplayName();\n+      ComparableVersion v = item.getVersion();\n+      return v != null && duplicatedMapNames.contains(name)\n+          ? String.format(\"%s | %s %s\", name, i18n.get(\"map.version\"), v.toString())\n+          : name;\n+    }));\n+    mapNameColumn.setCellValueFactory(param -> new SimpleObjectProperty<>(param.getValue()));\n+\n+    checkboxColumn.setCellFactory(param -> new CheckBoxCell(selectedMaps, mapService));\n+    checkboxColumn.setCellValueFactory(param -> new SimpleObjectProperty<>(param.getValue()));\n+  }\n+\n+  public void onRemoveButtonClicked() {\n+    CompletableFuture.runAsync( () -> {\n+      Iterator<MapBean> iterator = selectedMaps.iterator();\n+      while (iterator.hasNext()) {\n+        MapBean map = iterator.next();\n+        mapService.uninstallMap(map).whenComplete((unused, throwable) -> {\n+          if (throwable == null) {\n+            iterator.remove();\n+          } else {\n+            throw new UninstallMapException(String.format(\"error when uninstall map '%s'\", map), throwable);\n+          }\n+        }).join();", "originalCommit": "60a1d4bab36c8f7045f7951b247ce61ed1ad5b38", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0c4847ed0ee0d584aedc01aeb08672b06e030c99", "chunk": "diff --git a/src/main/java/com/faforever/client/map/management/MapsManagementController.java b/src/main/java/com/faforever/client/map/management/MapsManagementController.java\nindex c93520bf..3332aba0 100644\n--- a/src/main/java/com/faforever/client/map/management/MapsManagementController.java\n+++ b/src/main/java/com/faforever/client/map/management/MapsManagementController.java\n\n@@ -1,88 +1,61 @@\n package com.faforever.client.map.management;\n \n import com.faforever.client.fx.Controller;\n-import com.faforever.client.fx.JavaFxUtil;\n-import com.faforever.client.fx.StringCell;\n import com.faforever.client.i18n.I18n;\n import com.faforever.client.map.MapBean;\n import com.faforever.client.map.MapService;\n-import com.faforever.client.map.MapService.PreviewSize;\n-import com.faforever.client.map.UninstallMapException;\n-import com.faforever.client.map.management.table.factory.CheckBoxCell;\n-import com.faforever.client.map.management.table.factory.MapBeanRow;\n-import com.faforever.client.map.management.table.factory.PreviewMapCell;\n-import com.faforever.client.notification.NotificationService;\n-import com.google.common.annotations.VisibleForTesting;\n-import javafx.beans.property.SimpleListProperty;\n-import javafx.beans.property.SimpleObjectProperty;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.ui.list.NoSelectionModel;\n import javafx.collections.FXCollections;\n-import javafx.collections.ObservableList;\n import javafx.collections.transformation.FilteredList;\n import javafx.scene.Node;\n import javafx.scene.control.Button;\n import javafx.scene.control.ChoiceBox;\n-import javafx.scene.control.TableColumn;\n-import javafx.scene.control.TableView;\n-import javafx.scene.image.Image;\n+import javafx.scene.control.ListView;\n import javafx.scene.layout.GridPane;\n import javafx.scene.layout.Region;\n import javafx.util.StringConverter;\n-import lombok.RequiredArgsConstructor;\n import lombok.extern.slf4j.Slf4j;\n-import org.apache.maven.artifact.versioning.ComparableVersion;\n import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n import org.springframework.context.annotation.Scope;\n import org.springframework.stereotype.Component;\n \n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.concurrent.CompletableFuture;\n import java.util.function.Predicate;\n-import java.util.stream.Collectors;\n \n @Component\n @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n-@RequiredArgsConstructor\n @Slf4j\n public class MapsManagementController implements Controller<Node> {\n \n   public GridPane root;\n   public ChoiceBox<MapFilter> filterMapsChoiceBox;\n-  public Button removeButton;\n+  public ListView<MapBean> listView;\n   public Button closeButton;\n-  public TableView<MapBean> tableView;\n-  public TableColumn<MapBean, Image> previewMapColumn;\n-  public TableColumn<MapBean, MapBean> mapNameColumn;\n-  public TableColumn<MapBean, MapBean> checkboxColumn;\n \n   private final MapService mapService;\n+  private final UiService uiService;\n   private final I18n i18n;\n-  private final NotificationService notificationService;\n \n-  private final ObservableList<MapBean> selectedMaps = FXCollections.observableArrayList();\n-\n-  private FilteredList<MapBean> maps = new FilteredList<>(FXCollections.emptyObservableList());\n-  private List<String> duplicatedMapNames; // duplicated map names but with different versions\n+  private final FilteredList<MapBean> maps;\n   private Runnable closeButtonAction;\n \n+  public MapsManagementController(UiService uiService, MapService mapService, I18n i18n) {\n+    this.uiService = uiService;\n+    this.mapService = mapService;\n+    this.i18n = i18n;\n+    maps = new FilteredList<>(mapService.getInstalledMaps());\n+  }\n+\n   @Override\n   public void initialize() {\n     settingChoiceBox();\n-    settingTableView();\n-    JavaFxUtil.bind(removeButton.disableProperty(), new SimpleListProperty<>(selectedMaps).emptyProperty());\n-    updateTableContent();\n+    settingListView();\n   }\n \n-  private void updateTableContent() {\n-    List<MapBean> clonedList = new ArrayList<>(mapService.getInstalledMaps());\n-    List<String> mapNames = clonedList.stream().map(MapBean::getDisplayName).collect(Collectors.toList());\n-    this.maps = new FilteredList<>(FXCollections.observableArrayList(clonedList).sorted(), getPredicateByCurrentFilter());\n-    this.duplicatedMapNames = clonedList.stream()\n-        .filter(map -> map.getVersion() != null && Collections.frequency(mapNames, map.getDisplayName()) > 1)\n-        .map(MapBean::getDisplayName).distinct().collect(Collectors.toList());\n-    tableView.setItems(this.maps);\n+  private void settingListView() {\n+    listView.setCellFactory(param -> uiService.<RemovableMapCellController>loadFxml(\"theme/vault/map/removable_map_cell.fxml\"));\n+    listView.setSelectionModel(new NoSelectionModel<>());\n+    listView.setItems(maps);\n   }\n \n   private void settingChoiceBox() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDE1MTUzNQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2079#discussion_r560151535", "bodyText": "Use .thenAccept and .exceptionally", "author": "Sheikah45", "createdAt": "2021-01-19T12:46:21Z", "path": "src/main/java/com/faforever/client/map/management/MapsManagementController.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package com.faforever.client.map.management;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.fx.StringCell;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.map.MapBean;\n+import com.faforever.client.map.MapService;\n+import com.faforever.client.map.MapService.PreviewSize;\n+import com.faforever.client.map.UninstallMapException;\n+import com.faforever.client.map.management.table.factory.CheckBoxCell;\n+import com.faforever.client.map.management.table.factory.MapBeanRow;\n+import com.faforever.client.map.management.table.factory.PreviewMapCell;\n+import com.faforever.client.notification.NotificationService;\n+import com.google.common.annotations.VisibleForTesting;\n+import javafx.beans.property.SimpleListProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ChoiceBox;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableView;\n+import javafx.scene.image.Image;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.Region;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.maven.artifact.versioning.ComparableVersion;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class MapsManagementController implements Controller<Node> {\n+\n+  public GridPane root;\n+  public ChoiceBox<MapFilter> filterMapsChoiceBox;\n+  public Button removeButton;\n+  public Button closeButton;\n+  public TableView<MapBean> tableView;\n+  public TableColumn<MapBean, Image> previewMapColumn;\n+  public TableColumn<MapBean, MapBean> mapNameColumn;\n+  public TableColumn<MapBean, MapBean> checkboxColumn;\n+\n+  private final MapService mapService;\n+  private final I18n i18n;\n+  private final NotificationService notificationService;\n+\n+  private final ObservableList<MapBean> selectedMaps = FXCollections.observableArrayList();\n+\n+  private FilteredList<MapBean> maps = new FilteredList<>(FXCollections.emptyObservableList());\n+  private List<String> duplicatedMapNames; // duplicated map names but with different versions\n+  private Runnable closeButtonAction;\n+\n+  @Override\n+  public void initialize() {\n+    settingChoiceBox();\n+    settingTableView();\n+    JavaFxUtil.bind(removeButton.disableProperty(), new SimpleListProperty<>(selectedMaps).emptyProperty());\n+    updateTableContent();\n+  }\n+\n+  private void updateTableContent() {\n+    List<MapBean> clonedList = new ArrayList<>(mapService.getInstalledMaps());\n+    List<String> mapNames = clonedList.stream().map(MapBean::getDisplayName).collect(Collectors.toList());\n+    this.maps = new FilteredList<>(FXCollections.observableArrayList(clonedList).sorted(), getPredicateByCurrentFilter());\n+    this.duplicatedMapNames = clonedList.stream()\n+        .filter(map -> map.getVersion() != null && Collections.frequency(mapNames, map.getDisplayName()) > 1)\n+        .map(MapBean::getDisplayName).distinct().collect(Collectors.toList());\n+    tableView.setItems(this.maps);\n+  }\n+\n+  private void settingChoiceBox() {\n+    filterMapsChoiceBox.setConverter(new StringConverter<>() {\n+      @Override\n+      public String toString(MapFilter object) {\n+        return i18n.get(object.getI18n());\n+      }\n+\n+      @Override\n+      public MapFilter fromString(String string) {\n+        throw new UnsupportedOperationException(); // not required\n+      }\n+    });\n+    filterMapsChoiceBox.getSelectionModel().selectedItemProperty().addListener((obs, oldFilter, newFilter) -> {\n+      selectedMaps.clear();\n+      maps.setPredicate(getPredicateBy(newFilter));\n+      tableView.scrollTo(0);\n+    });\n+    filterMapsChoiceBox.setItems(FXCollections.observableArrayList(MapFilter.values()));\n+    filterMapsChoiceBox.setValue(MapFilter.CUSTOM_MAPS);\n+  }\n+\n+  private Predicate<MapBean> getPredicateByCurrentFilter() {\n+    return getPredicateBy(filterMapsChoiceBox.getValue());\n+  }\n+\n+  private Predicate<MapBean> getPredicateBy(MapFilter filter) {\n+    return switch (filter) {\n+      case OFFICIAL_MAPS -> mapService::isOfficialMap;\n+      case CUSTOM_MAPS -> mapService::isCustomMap;\n+      case ALL_MAPS -> null;\n+    };\n+  }\n+\n+  private void settingTableView() {\n+    tableView.setSelectionModel(null);\n+    tableView.setRowFactory(param -> new MapBeanRow());\n+\n+    previewMapColumn.setCellFactory(param -> new PreviewMapCell());\n+    previewMapColumn.setCellValueFactory(param -> new SimpleObjectProperty<>\n+        (mapService.loadPreview(param.getValue().getFolderName(), PreviewSize.SMALL)));\n+\n+    mapNameColumn.setCellFactory(param -> new StringCell<>(item -> {\n+      String name = item.getDisplayName();\n+      ComparableVersion v = item.getVersion();\n+      return v != null && duplicatedMapNames.contains(name)\n+          ? String.format(\"%s | %s %s\", name, i18n.get(\"map.version\"), v.toString())\n+          : name;\n+    }));\n+    mapNameColumn.setCellValueFactory(param -> new SimpleObjectProperty<>(param.getValue()));\n+\n+    checkboxColumn.setCellFactory(param -> new CheckBoxCell(selectedMaps, mapService));\n+    checkboxColumn.setCellValueFactory(param -> new SimpleObjectProperty<>(param.getValue()));\n+  }\n+\n+  public void onRemoveButtonClicked() {\n+    CompletableFuture.runAsync( () -> {\n+      Iterator<MapBean> iterator = selectedMaps.iterator();\n+      while (iterator.hasNext()) {\n+        MapBean map = iterator.next();\n+        mapService.uninstallMap(map).whenComplete((unused, throwable) -> {\n+          if (throwable == null) {\n+            iterator.remove();\n+          } else {\n+            throw new UninstallMapException(String.format(\"error when uninstall map '%s'\", map), throwable);\n+          }\n+        }).join();\n+      }\n+    }).whenComplete((unused, throwable) -> {\n+      if (throwable != null) {\n+        notificationService.addImmediateErrorNotification(throwable, \"management.maps.uninstall.error\");\n+      }\n+      updateTableContent();\n+    });", "originalCommit": "60a1d4bab36c8f7045f7951b247ce61ed1ad5b38", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0c4847ed0ee0d584aedc01aeb08672b06e030c99", "chunk": "diff --git a/src/main/java/com/faforever/client/map/management/MapsManagementController.java b/src/main/java/com/faforever/client/map/management/MapsManagementController.java\nindex c93520bf..3332aba0 100644\n--- a/src/main/java/com/faforever/client/map/management/MapsManagementController.java\n+++ b/src/main/java/com/faforever/client/map/management/MapsManagementController.java\n\n@@ -1,88 +1,61 @@\n package com.faforever.client.map.management;\n \n import com.faforever.client.fx.Controller;\n-import com.faforever.client.fx.JavaFxUtil;\n-import com.faforever.client.fx.StringCell;\n import com.faforever.client.i18n.I18n;\n import com.faforever.client.map.MapBean;\n import com.faforever.client.map.MapService;\n-import com.faforever.client.map.MapService.PreviewSize;\n-import com.faforever.client.map.UninstallMapException;\n-import com.faforever.client.map.management.table.factory.CheckBoxCell;\n-import com.faforever.client.map.management.table.factory.MapBeanRow;\n-import com.faforever.client.map.management.table.factory.PreviewMapCell;\n-import com.faforever.client.notification.NotificationService;\n-import com.google.common.annotations.VisibleForTesting;\n-import javafx.beans.property.SimpleListProperty;\n-import javafx.beans.property.SimpleObjectProperty;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.ui.list.NoSelectionModel;\n import javafx.collections.FXCollections;\n-import javafx.collections.ObservableList;\n import javafx.collections.transformation.FilteredList;\n import javafx.scene.Node;\n import javafx.scene.control.Button;\n import javafx.scene.control.ChoiceBox;\n-import javafx.scene.control.TableColumn;\n-import javafx.scene.control.TableView;\n-import javafx.scene.image.Image;\n+import javafx.scene.control.ListView;\n import javafx.scene.layout.GridPane;\n import javafx.scene.layout.Region;\n import javafx.util.StringConverter;\n-import lombok.RequiredArgsConstructor;\n import lombok.extern.slf4j.Slf4j;\n-import org.apache.maven.artifact.versioning.ComparableVersion;\n import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n import org.springframework.context.annotation.Scope;\n import org.springframework.stereotype.Component;\n \n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.concurrent.CompletableFuture;\n import java.util.function.Predicate;\n-import java.util.stream.Collectors;\n \n @Component\n @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n-@RequiredArgsConstructor\n @Slf4j\n public class MapsManagementController implements Controller<Node> {\n \n   public GridPane root;\n   public ChoiceBox<MapFilter> filterMapsChoiceBox;\n-  public Button removeButton;\n+  public ListView<MapBean> listView;\n   public Button closeButton;\n-  public TableView<MapBean> tableView;\n-  public TableColumn<MapBean, Image> previewMapColumn;\n-  public TableColumn<MapBean, MapBean> mapNameColumn;\n-  public TableColumn<MapBean, MapBean> checkboxColumn;\n \n   private final MapService mapService;\n+  private final UiService uiService;\n   private final I18n i18n;\n-  private final NotificationService notificationService;\n \n-  private final ObservableList<MapBean> selectedMaps = FXCollections.observableArrayList();\n-\n-  private FilteredList<MapBean> maps = new FilteredList<>(FXCollections.emptyObservableList());\n-  private List<String> duplicatedMapNames; // duplicated map names but with different versions\n+  private final FilteredList<MapBean> maps;\n   private Runnable closeButtonAction;\n \n+  public MapsManagementController(UiService uiService, MapService mapService, I18n i18n) {\n+    this.uiService = uiService;\n+    this.mapService = mapService;\n+    this.i18n = i18n;\n+    maps = new FilteredList<>(mapService.getInstalledMaps());\n+  }\n+\n   @Override\n   public void initialize() {\n     settingChoiceBox();\n-    settingTableView();\n-    JavaFxUtil.bind(removeButton.disableProperty(), new SimpleListProperty<>(selectedMaps).emptyProperty());\n-    updateTableContent();\n+    settingListView();\n   }\n \n-  private void updateTableContent() {\n-    List<MapBean> clonedList = new ArrayList<>(mapService.getInstalledMaps());\n-    List<String> mapNames = clonedList.stream().map(MapBean::getDisplayName).collect(Collectors.toList());\n-    this.maps = new FilteredList<>(FXCollections.observableArrayList(clonedList).sorted(), getPredicateByCurrentFilter());\n-    this.duplicatedMapNames = clonedList.stream()\n-        .filter(map -> map.getVersion() != null && Collections.frequency(mapNames, map.getDisplayName()) > 1)\n-        .map(MapBean::getDisplayName).distinct().collect(Collectors.toList());\n-    tableView.setItems(this.maps);\n+  private void settingListView() {\n+    listView.setCellFactory(param -> uiService.<RemovableMapCellController>loadFxml(\"theme/vault/map/removable_map_cell.fxml\"));\n+    listView.setSelectionModel(new NoSelectionModel<>());\n+    listView.setItems(maps);\n   }\n \n   private void settingChoiceBox() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDE1MTY3MA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2079#discussion_r560151670", "bodyText": "Log the error", "author": "Sheikah45", "createdAt": "2021-01-19T12:46:39Z", "path": "src/main/java/com/faforever/client/map/management/MapsManagementController.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package com.faforever.client.map.management;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.fx.StringCell;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.map.MapBean;\n+import com.faforever.client.map.MapService;\n+import com.faforever.client.map.MapService.PreviewSize;\n+import com.faforever.client.map.UninstallMapException;\n+import com.faforever.client.map.management.table.factory.CheckBoxCell;\n+import com.faforever.client.map.management.table.factory.MapBeanRow;\n+import com.faforever.client.map.management.table.factory.PreviewMapCell;\n+import com.faforever.client.notification.NotificationService;\n+import com.google.common.annotations.VisibleForTesting;\n+import javafx.beans.property.SimpleListProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ChoiceBox;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableView;\n+import javafx.scene.image.Image;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.Region;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.maven.artifact.versioning.ComparableVersion;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class MapsManagementController implements Controller<Node> {\n+\n+  public GridPane root;\n+  public ChoiceBox<MapFilter> filterMapsChoiceBox;\n+  public Button removeButton;\n+  public Button closeButton;\n+  public TableView<MapBean> tableView;\n+  public TableColumn<MapBean, Image> previewMapColumn;\n+  public TableColumn<MapBean, MapBean> mapNameColumn;\n+  public TableColumn<MapBean, MapBean> checkboxColumn;\n+\n+  private final MapService mapService;\n+  private final I18n i18n;\n+  private final NotificationService notificationService;\n+\n+  private final ObservableList<MapBean> selectedMaps = FXCollections.observableArrayList();\n+\n+  private FilteredList<MapBean> maps = new FilteredList<>(FXCollections.emptyObservableList());\n+  private List<String> duplicatedMapNames; // duplicated map names but with different versions\n+  private Runnable closeButtonAction;\n+\n+  @Override\n+  public void initialize() {\n+    settingChoiceBox();\n+    settingTableView();\n+    JavaFxUtil.bind(removeButton.disableProperty(), new SimpleListProperty<>(selectedMaps).emptyProperty());\n+    updateTableContent();\n+  }\n+\n+  private void updateTableContent() {\n+    List<MapBean> clonedList = new ArrayList<>(mapService.getInstalledMaps());\n+    List<String> mapNames = clonedList.stream().map(MapBean::getDisplayName).collect(Collectors.toList());\n+    this.maps = new FilteredList<>(FXCollections.observableArrayList(clonedList).sorted(), getPredicateByCurrentFilter());\n+    this.duplicatedMapNames = clonedList.stream()\n+        .filter(map -> map.getVersion() != null && Collections.frequency(mapNames, map.getDisplayName()) > 1)\n+        .map(MapBean::getDisplayName).distinct().collect(Collectors.toList());\n+    tableView.setItems(this.maps);\n+  }\n+\n+  private void settingChoiceBox() {\n+    filterMapsChoiceBox.setConverter(new StringConverter<>() {\n+      @Override\n+      public String toString(MapFilter object) {\n+        return i18n.get(object.getI18n());\n+      }\n+\n+      @Override\n+      public MapFilter fromString(String string) {\n+        throw new UnsupportedOperationException(); // not required\n+      }\n+    });\n+    filterMapsChoiceBox.getSelectionModel().selectedItemProperty().addListener((obs, oldFilter, newFilter) -> {\n+      selectedMaps.clear();\n+      maps.setPredicate(getPredicateBy(newFilter));\n+      tableView.scrollTo(0);\n+    });\n+    filterMapsChoiceBox.setItems(FXCollections.observableArrayList(MapFilter.values()));\n+    filterMapsChoiceBox.setValue(MapFilter.CUSTOM_MAPS);\n+  }\n+\n+  private Predicate<MapBean> getPredicateByCurrentFilter() {\n+    return getPredicateBy(filterMapsChoiceBox.getValue());\n+  }\n+\n+  private Predicate<MapBean> getPredicateBy(MapFilter filter) {\n+    return switch (filter) {\n+      case OFFICIAL_MAPS -> mapService::isOfficialMap;\n+      case CUSTOM_MAPS -> mapService::isCustomMap;\n+      case ALL_MAPS -> null;\n+    };\n+  }\n+\n+  private void settingTableView() {\n+    tableView.setSelectionModel(null);\n+    tableView.setRowFactory(param -> new MapBeanRow());\n+\n+    previewMapColumn.setCellFactory(param -> new PreviewMapCell());\n+    previewMapColumn.setCellValueFactory(param -> new SimpleObjectProperty<>\n+        (mapService.loadPreview(param.getValue().getFolderName(), PreviewSize.SMALL)));\n+\n+    mapNameColumn.setCellFactory(param -> new StringCell<>(item -> {\n+      String name = item.getDisplayName();\n+      ComparableVersion v = item.getVersion();\n+      return v != null && duplicatedMapNames.contains(name)\n+          ? String.format(\"%s | %s %s\", name, i18n.get(\"map.version\"), v.toString())\n+          : name;\n+    }));\n+    mapNameColumn.setCellValueFactory(param -> new SimpleObjectProperty<>(param.getValue()));\n+\n+    checkboxColumn.setCellFactory(param -> new CheckBoxCell(selectedMaps, mapService));\n+    checkboxColumn.setCellValueFactory(param -> new SimpleObjectProperty<>(param.getValue()));\n+  }\n+\n+  public void onRemoveButtonClicked() {\n+    CompletableFuture.runAsync( () -> {\n+      Iterator<MapBean> iterator = selectedMaps.iterator();\n+      while (iterator.hasNext()) {\n+        MapBean map = iterator.next();\n+        mapService.uninstallMap(map).whenComplete((unused, throwable) -> {\n+          if (throwable == null) {\n+            iterator.remove();\n+          } else {\n+            throw new UninstallMapException(String.format(\"error when uninstall map '%s'\", map), throwable);\n+          }\n+        }).join();\n+      }\n+    }).whenComplete((unused, throwable) -> {\n+      if (throwable != null) {\n+        notificationService.addImmediateErrorNotification(throwable, \"management.maps.uninstall.error\");", "originalCommit": "60a1d4bab36c8f7045f7951b247ce61ed1ad5b38", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0c4847ed0ee0d584aedc01aeb08672b06e030c99", "chunk": "diff --git a/src/main/java/com/faforever/client/map/management/MapsManagementController.java b/src/main/java/com/faforever/client/map/management/MapsManagementController.java\nindex c93520bf..3332aba0 100644\n--- a/src/main/java/com/faforever/client/map/management/MapsManagementController.java\n+++ b/src/main/java/com/faforever/client/map/management/MapsManagementController.java\n\n@@ -1,88 +1,61 @@\n package com.faforever.client.map.management;\n \n import com.faforever.client.fx.Controller;\n-import com.faforever.client.fx.JavaFxUtil;\n-import com.faforever.client.fx.StringCell;\n import com.faforever.client.i18n.I18n;\n import com.faforever.client.map.MapBean;\n import com.faforever.client.map.MapService;\n-import com.faforever.client.map.MapService.PreviewSize;\n-import com.faforever.client.map.UninstallMapException;\n-import com.faforever.client.map.management.table.factory.CheckBoxCell;\n-import com.faforever.client.map.management.table.factory.MapBeanRow;\n-import com.faforever.client.map.management.table.factory.PreviewMapCell;\n-import com.faforever.client.notification.NotificationService;\n-import com.google.common.annotations.VisibleForTesting;\n-import javafx.beans.property.SimpleListProperty;\n-import javafx.beans.property.SimpleObjectProperty;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.ui.list.NoSelectionModel;\n import javafx.collections.FXCollections;\n-import javafx.collections.ObservableList;\n import javafx.collections.transformation.FilteredList;\n import javafx.scene.Node;\n import javafx.scene.control.Button;\n import javafx.scene.control.ChoiceBox;\n-import javafx.scene.control.TableColumn;\n-import javafx.scene.control.TableView;\n-import javafx.scene.image.Image;\n+import javafx.scene.control.ListView;\n import javafx.scene.layout.GridPane;\n import javafx.scene.layout.Region;\n import javafx.util.StringConverter;\n-import lombok.RequiredArgsConstructor;\n import lombok.extern.slf4j.Slf4j;\n-import org.apache.maven.artifact.versioning.ComparableVersion;\n import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n import org.springframework.context.annotation.Scope;\n import org.springframework.stereotype.Component;\n \n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.concurrent.CompletableFuture;\n import java.util.function.Predicate;\n-import java.util.stream.Collectors;\n \n @Component\n @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n-@RequiredArgsConstructor\n @Slf4j\n public class MapsManagementController implements Controller<Node> {\n \n   public GridPane root;\n   public ChoiceBox<MapFilter> filterMapsChoiceBox;\n-  public Button removeButton;\n+  public ListView<MapBean> listView;\n   public Button closeButton;\n-  public TableView<MapBean> tableView;\n-  public TableColumn<MapBean, Image> previewMapColumn;\n-  public TableColumn<MapBean, MapBean> mapNameColumn;\n-  public TableColumn<MapBean, MapBean> checkboxColumn;\n \n   private final MapService mapService;\n+  private final UiService uiService;\n   private final I18n i18n;\n-  private final NotificationService notificationService;\n \n-  private final ObservableList<MapBean> selectedMaps = FXCollections.observableArrayList();\n-\n-  private FilteredList<MapBean> maps = new FilteredList<>(FXCollections.emptyObservableList());\n-  private List<String> duplicatedMapNames; // duplicated map names but with different versions\n+  private final FilteredList<MapBean> maps;\n   private Runnable closeButtonAction;\n \n+  public MapsManagementController(UiService uiService, MapService mapService, I18n i18n) {\n+    this.uiService = uiService;\n+    this.mapService = mapService;\n+    this.i18n = i18n;\n+    maps = new FilteredList<>(mapService.getInstalledMaps());\n+  }\n+\n   @Override\n   public void initialize() {\n     settingChoiceBox();\n-    settingTableView();\n-    JavaFxUtil.bind(removeButton.disableProperty(), new SimpleListProperty<>(selectedMaps).emptyProperty());\n-    updateTableContent();\n+    settingListView();\n   }\n \n-  private void updateTableContent() {\n-    List<MapBean> clonedList = new ArrayList<>(mapService.getInstalledMaps());\n-    List<String> mapNames = clonedList.stream().map(MapBean::getDisplayName).collect(Collectors.toList());\n-    this.maps = new FilteredList<>(FXCollections.observableArrayList(clonedList).sorted(), getPredicateByCurrentFilter());\n-    this.duplicatedMapNames = clonedList.stream()\n-        .filter(map -> map.getVersion() != null && Collections.frequency(mapNames, map.getDisplayName()) > 1)\n-        .map(MapBean::getDisplayName).distinct().collect(Collectors.toList());\n-    tableView.setItems(this.maps);\n+  private void settingListView() {\n+    listView.setCellFactory(param -> uiService.<RemovableMapCellController>loadFxml(\"theme/vault/map/removable_map_cell.fxml\"));\n+    listView.setSelectionModel(new NoSelectionModel<>());\n+    listView.setItems(maps);\n   }\n \n   private void settingChoiceBox() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDE1MjExMg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2079#discussion_r560152112", "bodyText": "If this is only for Maps I would reflect that in the name", "author": "Sheikah45", "createdAt": "2021-01-19T12:47:25Z", "path": "src/main/java/com/faforever/client/map/management/table/factory/CheckBoxCell.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package com.faforever.client.map.management.table.factory;\n+\n+import com.faforever.client.map.MapBean;\n+import com.faforever.client.map.MapService;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.TableCell;\n+\n+import java.util.List;\n+\n+public class CheckBoxCell extends TableCell<MapBean, MapBean> {", "originalCommit": "60a1d4bab36c8f7045f7951b247ce61ed1ad5b38", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0c4847ed0ee0d584aedc01aeb08672b06e030c99", "chunk": "diff --git a/src/main/java/com/faforever/client/map/management/table/factory/CheckBoxCell.java b/src/main/java/com/faforever/client/map/management/table/factory/CheckBoxCell.java\ndeleted file mode 100644\nindex 4f368e1e..00000000\n--- a/src/main/java/com/faforever/client/map/management/table/factory/CheckBoxCell.java\n+++ /dev/null\n\n@@ -1,52 +0,0 @@\n-package com.faforever.client.map.management.table.factory;\n-\n-import com.faforever.client.map.MapBean;\n-import com.faforever.client.map.MapService;\n-import javafx.scene.control.CheckBox;\n-import javafx.scene.control.TableCell;\n-\n-import java.util.List;\n-\n-public class CheckBoxCell extends TableCell<MapBean, MapBean> {\n-\n-  private final MapService mapService;\n-  protected final CheckBox checkBox = new CheckBox();\n-  protected final List<MapBean> selectedMaps;\n-\n-  private MapBean item;\n-  private volatile boolean updatingItem;\n-\n-  public CheckBoxCell(List<MapBean> selectedMaps, MapService mapService) {\n-    this.selectedMaps = selectedMaps;\n-    this.mapService = mapService;\n-    this.checkBox.selectedProperty().addListener((obs, v, selected) -> {\n-      if (item != null && !updatingItem) {\n-        if (selected) {\n-          selectedMaps.add(item);\n-        } else {\n-          selectedMaps.remove(item);\n-        }\n-      }\n-    });\n-  }\n-\n-  @Override\n-  protected void updateItem(MapBean item, boolean empty) {\n-    super.updateItem(item, empty);\n-    if (item == null || empty) {\n-      setGraphic(null);\n-    } else {\n-      this.updatingItem = true;\n-      this.item = item;\n-      if (mapService.isOfficialMap(item)) {\n-        checkBox.setSelected(false);\n-        checkBox.setDisable(true);\n-      } else {\n-        checkBox.setDisable(false);\n-        checkBox.setSelected(selectedMaps.contains(item));\n-      }\n-      setGraphic(checkBox);\n-      this.updatingItem = false;\n-    }\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDE1NDY0MQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2079#discussion_r560154641", "bodyText": "Rather than adding a new management button to the abstract class make one of them abstract and set the actions and text in the subclass. Similar to the upload button. I like the placement you have for the maps one.", "author": "Sheikah45", "createdAt": "2021-01-19T12:51:47Z", "path": "src/main/java/com/faforever/client/vault/VaultEntityController.java", "diffHunk": "@@ -69,6 +69,7 @@\n   public Pagination pagination;\n   public Button lastPageButton;\n   public Button manageModsButton;\n+  public Button mapsManagementButton;", "originalCommit": "60a1d4bab36c8f7045f7951b247ce61ed1ad5b38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODc4NjI1MQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2079#discussion_r578786251", "bodyText": "Done. Yes, I like this placement.", "author": "ivan-gryzunov", "createdAt": "2021-02-18T22:22:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDE1NDY0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "3f99f3729f29754df501077e0e7461151a53baa7", "chunk": "diff --git a/src/main/java/com/faforever/client/vault/VaultEntityController.java b/src/main/java/com/faforever/client/vault/VaultEntityController.java\nindex 6e4f1477..277a97b3 100644\n--- a/src/main/java/com/faforever/client/vault/VaultEntityController.java\n+++ b/src/main/java/com/faforever/client/vault/VaultEntityController.java\n\n@@ -68,8 +67,7 @@ public abstract class VaultEntityController<T> extends AbstractViewController<No\n   public SearchController searchController;\n   public Pagination pagination;\n   public Button lastPageButton;\n-  public Button manageModsButton;\n-  public Button mapsManagementButton;\n+  public Button manageVaultButton;\n   public Button firstPageButton;\n   public SearchType searchType;\n   public int pageSize;\n"}}, {"oid": "0c4847ed0ee0d584aedc01aeb08672b06e030c99", "url": "https://github.com/FAForever/downlords-faf-client/commit/0c4847ed0ee0d584aedc01aeb08672b06e030c99", "message": "implement management of installed maps (only uninstall)", "committedDate": "2021-02-18T21:39:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTU0NzYyOA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2079#discussion_r579547628", "bodyText": "I would use initializeListView over settingListView", "author": "Sheikah45", "createdAt": "2021-02-20T00:10:18Z", "path": "src/main/java/com/faforever/client/map/management/MapsManagementController.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package com.faforever.client.map.management;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.map.MapBean;\n+import com.faforever.client.map.MapService;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.ui.list.NoSelectionModel;\n+import javafx.collections.FXCollections;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ChoiceBox;\n+import javafx.scene.control.ListView;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.Region;\n+import javafx.util.StringConverter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.function.Predicate;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@Slf4j\n+public class MapsManagementController implements Controller<Node> {\n+\n+  public GridPane root;\n+  public ChoiceBox<MapFilter> filterMapsChoiceBox;\n+  public ListView<MapBean> listView;\n+  public Button closeButton;\n+\n+  private final MapService mapService;\n+  private final UiService uiService;\n+  private final I18n i18n;\n+\n+  private final FilteredList<MapBean> maps;\n+  private Runnable closeButtonAction;\n+\n+  public MapsManagementController(UiService uiService, MapService mapService, I18n i18n) {\n+    this.uiService = uiService;\n+    this.mapService = mapService;\n+    this.i18n = i18n;\n+    maps = new FilteredList<>(mapService.getInstalledMaps());\n+  }\n+\n+  @Override\n+  public void initialize() {\n+    settingChoiceBox();\n+    settingListView();\n+  }\n+\n+  private void settingListView() {", "originalCommit": "8f7eb5765252f63dcc5ac5768d416b3bbc074720", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "da71b6dfd40661fb366748f590d1537a54393d19", "chunk": "diff --git a/src/main/java/com/faforever/client/map/management/MapsManagementController.java b/src/main/java/com/faforever/client/map/management/MapsManagementController.java\nindex 3332aba0..60f613d0 100644\n--- a/src/main/java/com/faforever/client/map/management/MapsManagementController.java\n+++ b/src/main/java/com/faforever/client/map/management/MapsManagementController.java\n\n@@ -48,17 +48,17 @@ public class MapsManagementController implements Controller<Node> {\n \n   @Override\n   public void initialize() {\n-    settingChoiceBox();\n-    settingListView();\n+    initializeChoiceBox();\n+    initializeListView();\n   }\n \n-  private void settingListView() {\n+  private void initializeListView() {\n     listView.setCellFactory(param -> uiService.<RemovableMapCellController>loadFxml(\"theme/vault/map/removable_map_cell.fxml\"));\n     listView.setSelectionModel(new NoSelectionModel<>());\n     listView.setItems(maps);\n   }\n \n-  private void settingChoiceBox() {\n+  private void initializeChoiceBox() {\n     filterMapsChoiceBox.setConverter(new StringConverter<>() {\n       @Override\n       public String toString(MapFilter object) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTU0NzY2MQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2079#discussion_r579547661", "bodyText": "initialize over setting", "author": "Sheikah45", "createdAt": "2021-02-20T00:10:29Z", "path": "src/main/java/com/faforever/client/map/management/MapsManagementController.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package com.faforever.client.map.management;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.map.MapBean;\n+import com.faforever.client.map.MapService;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.ui.list.NoSelectionModel;\n+import javafx.collections.FXCollections;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ChoiceBox;\n+import javafx.scene.control.ListView;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.Region;\n+import javafx.util.StringConverter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.function.Predicate;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@Slf4j\n+public class MapsManagementController implements Controller<Node> {\n+\n+  public GridPane root;\n+  public ChoiceBox<MapFilter> filterMapsChoiceBox;\n+  public ListView<MapBean> listView;\n+  public Button closeButton;\n+\n+  private final MapService mapService;\n+  private final UiService uiService;\n+  private final I18n i18n;\n+\n+  private final FilteredList<MapBean> maps;\n+  private Runnable closeButtonAction;\n+\n+  public MapsManagementController(UiService uiService, MapService mapService, I18n i18n) {\n+    this.uiService = uiService;\n+    this.mapService = mapService;\n+    this.i18n = i18n;\n+    maps = new FilteredList<>(mapService.getInstalledMaps());\n+  }\n+\n+  @Override\n+  public void initialize() {\n+    settingChoiceBox();\n+    settingListView();\n+  }\n+\n+  private void settingListView() {\n+    listView.setCellFactory(param -> uiService.<RemovableMapCellController>loadFxml(\"theme/vault/map/removable_map_cell.fxml\"));\n+    listView.setSelectionModel(new NoSelectionModel<>());\n+    listView.setItems(maps);\n+  }\n+\n+  private void settingChoiceBox() {", "originalCommit": "8f7eb5765252f63dcc5ac5768d416b3bbc074720", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "da71b6dfd40661fb366748f590d1537a54393d19", "chunk": "diff --git a/src/main/java/com/faforever/client/map/management/MapsManagementController.java b/src/main/java/com/faforever/client/map/management/MapsManagementController.java\nindex 3332aba0..60f613d0 100644\n--- a/src/main/java/com/faforever/client/map/management/MapsManagementController.java\n+++ b/src/main/java/com/faforever/client/map/management/MapsManagementController.java\n\n@@ -48,17 +48,17 @@ public class MapsManagementController implements Controller<Node> {\n \n   @Override\n   public void initialize() {\n-    settingChoiceBox();\n-    settingListView();\n+    initializeChoiceBox();\n+    initializeListView();\n   }\n \n-  private void settingListView() {\n+  private void initializeListView() {\n     listView.setCellFactory(param -> uiService.<RemovableMapCellController>loadFxml(\"theme/vault/map/removable_map_cell.fxml\"));\n     listView.setSelectionModel(new NoSelectionModel<>());\n     listView.setItems(maps);\n   }\n \n-  private void settingChoiceBox() {\n+  private void initializeChoiceBox() {\n     filterMapsChoiceBox.setConverter(new StringConverter<>() {\n       @Override\n       public String toString(MapFilter object) {\n"}}, {"oid": "f4936e2094a9dd1ed39bf8ae0f11e4677d042c60", "url": "https://github.com/FAForever/downlords-faf-client/commit/f4936e2094a9dd1ed39bf8ae0f11e4677d042c60", "message": "implement management of installed maps (only uninstall)", "committedDate": "2021-02-21T15:14:50Z", "type": "commit"}, {"oid": "77d7eafbabceed927f0527a1558db5973215a078", "url": "https://github.com/FAForever/downlords-faf-client/commit/77d7eafbabceed927f0527a1558db5973215a078", "message": "remove unused imports from MapsManagementControllerTest.java", "committedDate": "2021-02-21T15:14:52Z", "type": "commit"}, {"oid": "9bf1ff281971e086bbbb841162b08dd1594facb7", "url": "https://github.com/FAForever/downlords-faf-client/commit/9bf1ff281971e086bbbb841162b08dd1594facb7", "message": "remove unused methods", "committedDate": "2021-02-21T15:14:52Z", "type": "commit"}, {"oid": "3f99f3729f29754df501077e0e7461151a53baa7", "url": "https://github.com/FAForever/downlords-faf-client/commit/3f99f3729f29754df501077e0e7461151a53baa7", "message": "make manage vault button as general and implement it in subclasses", "committedDate": "2021-02-21T15:14:53Z", "type": "commit"}, {"oid": "da71b6dfd40661fb366748f590d1537a54393d19", "url": "https://github.com/FAForever/downlords-faf-client/commit/da71b6dfd40661fb366748f590d1537a54393d19", "message": "improve method names", "committedDate": "2021-02-21T15:14:54Z", "type": "commit"}, {"oid": "cd30d50d1d013666477452f40c387c5bba9ee83b", "url": "https://github.com/FAForever/downlords-faf-client/commit/cd30d50d1d013666477452f40c387c5bba9ee83b", "message": "add a log when error of uninstall a map", "committedDate": "2021-02-21T15:14:54Z", "type": "commit"}, {"oid": "cd30d50d1d013666477452f40c387c5bba9ee83b", "url": "https://github.com/FAForever/downlords-faf-client/commit/cd30d50d1d013666477452f40c387c5bba9ee83b", "message": "add a log when error of uninstall a map", "committedDate": "2021-02-21T15:14:54Z", "type": "forcePushed"}]}