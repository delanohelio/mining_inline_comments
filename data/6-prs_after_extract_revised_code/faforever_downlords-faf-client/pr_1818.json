{"pr_number": 1818, "pr_title": "Native window behavior and design brush-up", "pr_createdAt": "2020-07-09T00:03:02Z", "pr_url": "https://github.com/FAForever/downlords-faf-client/pull/1818", "timeline": [{"oid": "97d45972d13f3ee217db822cef3deef0cca4a429", "url": "https://github.com/FAForever/downlords-faf-client/commit/97d45972d13f3ee217db822cef3deef0cca4a429", "message": "Native window behavior and design brush-up\n\nFixes #1007\nFixes #1033\nFixes #1038\nFixes #1075\nFixes #1751\nFixes #1760\nFixes #1766\nFixes #1815\nFixes #1816", "committedDate": "2020-07-09T00:04:55Z", "type": "forcePushed"}, {"oid": "f09d36fdfb6cdc64cc25fa8e8316cfb873ed98b9", "url": "https://github.com/FAForever/downlords-faf-client/commit/f09d36fdfb6cdc64cc25fa8e8316cfb873ed98b9", "message": "Native window behavior and design brush-up\n\nFixes #1007\nFixes #1033\nFixes #1038\nFixes #1075\nFixes #1685\nFixes #1751\nFixes #1760\nFixes #1766\nFixes #1815\nFixes #1816", "committedDate": "2020-07-09T11:46:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA2NzM1Nw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r452067357", "bodyText": "This seems like 2 calls  the UI service could do as well (or at least the setFxStage). What do you think?", "author": "Brutus5000", "createdAt": "2020-07-09T08:55:36Z", "path": "src/main/java/com/faforever/client/FafClientApplication.java", "diffHunk": "@@ -115,8 +117,12 @@ public PlatformService platformService() {\n     return new PlatformService(getHostServices());\n   }\n \n-  private void showMainWindow() {\n-    MainController controller = applicationContext.getBean(UiService.class).loadFxml(\"theme/main.fxml\");\n+  private void showMainWindow(FxStage fxWindow) {\n+    UiService uiService = applicationContext.getBean(UiService.class);\n+\n+    MainController controller = uiService.loadFxml(\"theme/main.fxml\");\n+\n+    controller.setFxStage(fxWindow);\n     controller.display();", "originalCommit": "97d45972d13f3ee217db822cef3deef0cca4a429", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUyNzI4OQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r452527289", "bodyText": "How would that look like?", "author": "micheljung", "createdAt": "2020-07-09T22:36:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA2NzM1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "28fcc6df125feaeddb56a4b6ad709aa217f1c928", "chunk": "diff --git a/src/main/java/com/faforever/client/FafClientApplication.java b/src/main/java/com/faforever/client/FafClientApplication.java\nindex e4a0ac4b..d4a56f03 100644\n--- a/src/main/java/com/faforever/client/FafClientApplication.java\n+++ b/src/main/java/com/faforever/client/FafClientApplication.java\n\n@@ -117,12 +117,11 @@ public class FafClientApplication extends Application {\n     return new PlatformService(getHostServices());\n   }\n \n-  private void showMainWindow(FxStage fxWindow) {\n+  private void showMainWindow(FxStage fxStage) {\n     UiService uiService = applicationContext.getBean(UiService.class);\n \n     MainController controller = uiService.loadFxml(\"theme/main.fxml\");\n-\n-    controller.setFxStage(fxWindow);\n+    controller.setFxStage(fxStage);\n     controller.display();\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA2ODQ5MQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r452068491", "bodyText": "Unrelated question: Why is there no return here? Or at least a log statement to catch potential user problems?", "author": "Brutus5000", "createdAt": "2020-07-09T08:57:28Z", "path": "src/main/java/com/faforever/client/FafClientApplication.java", "diffHunk": "@@ -127,7 +133,7 @@ public void stop() throws Exception {\n \n     Thread timeoutThread = new Thread(() -> {\n       try {\n-        Thread.sleep(Duration.ofSeconds(30).toMillis());\n+        Thread.sleep(Duration.ofSeconds(10).toMillis());\n       } catch (InterruptedException e) {\n       }", "originalCommit": "97d45972d13f3ee217db822cef3deef0cca4a429", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUyODM0Nw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r452528347", "bodyText": "This code runs when the application is shutting down. Geosearchef added it to help finding which non-daemon threads keep the client alive. There isn't much to be handled", "author": "micheljung", "createdAt": "2020-07-09T22:40:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA2ODQ5MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA2OTg5Mw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r452069893", "bodyText": "Could be replaced by Lomboks AllArgConstructor", "author": "Brutus5000", "createdAt": "2020-07-09T08:59:46Z", "path": "src/main/java/com/faforever/client/fx/IconCell.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package com.faforever.client.fx;\n+\n+import com.faforever.client.theme.UiService;\n+import com.google.common.base.Strings;\n+import javafx.geometry.Pos;\n+import javafx.scene.control.TableCell;\n+import javafx.scene.layout.Region;\n+\n+import java.util.function.Function;\n+\n+public class IconCell<S, T> extends TableCell<S, T> {\n+\n+  private Function<T, String> iconCssClassFunction;\n+  private Pos alignment;\n+  private String[] containerCssClasses;\n+\n+  public IconCell(Function<T, String> iconCssClassFunction) {\n+    this(iconCssClassFunction, Pos.CENTER_LEFT);\n+  }\n+\n+  public IconCell(Function<T, String> iconCssClassFunction, Pos alignment, String... containerCssClasses) {\n+    this.iconCssClassFunction = iconCssClassFunction;\n+    this.alignment = alignment;\n+    this.containerCssClasses = containerCssClasses;\n+  }", "originalCommit": "97d45972d13f3ee217db822cef3deef0cca4a429", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUyODY0Nw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r452528647", "bodyText": "Unfortunately not, because of the varargs parameter", "author": "micheljung", "createdAt": "2020-07-09T22:40:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA2OTg5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "28fcc6df125feaeddb56a4b6ad709aa217f1c928", "chunk": "diff --git a/src/main/java/com/faforever/client/fx/IconCell.java b/src/main/java/com/faforever/client/fx/IconCell.java\nindex 70e80b69..9e44fb62 100644\n--- a/src/main/java/com/faforever/client/fx/IconCell.java\n+++ b/src/main/java/com/faforever/client/fx/IconCell.java\n\n@@ -5,14 +5,15 @@ import com.google.common.base.Strings;\n import javafx.geometry.Pos;\n import javafx.scene.control.TableCell;\n import javafx.scene.layout.Region;\n+import lombok.RequiredArgsConstructor;\n \n import java.util.function.Function;\n \n public class IconCell<S, T> extends TableCell<S, T> {\n \n-  private Function<T, String> iconCssClassFunction;\n-  private Pos alignment;\n-  private String[] containerCssClasses;\n+  private final Function<T, String> iconCssClassFunction;\n+  private final Pos alignment;\n+  private final String[] containerCssClasses;\n \n   public IconCell(Function<T, String> iconCssClassFunction) {\n     this(iconCssClassFunction, Pos.CENTER_LEFT);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA3NzIxOA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r452077218", "bodyText": "Instead of collection and addAll you could do a foreach and add\nMaybe extract the stream into a tiny method", "author": "Brutus5000", "createdAt": "2020-07-09T09:12:25Z", "path": "src/main/java/com/faforever/client/main/MainController.java", "diffHunk": "@@ -201,16 +205,33 @@ public void initialize() {\n     // Always load chat immediately so messages or joined channels don't need to be cached until we display them.\n     getView(NavigationItem.CHAT);\n \n-    listenOnMinimizedToSetExtraDragBar();\n     vaultFileSystemLocationChecker.checkVaultFileSystemLocation();\n-  }\n-\n-  private void listenOnMinimizedToSetExtraDragBar() {\n-    WindowPrefs windowPrefs = preferencesService.getPreferences()\n-        .getMainWindow();\n-    InvalidationListener invalidationListener = observable -> mainHeaderPane.pseudoClassStateChanged(MAIN_WINDOW_RESTORED, !windowPrefs.getMaximized());\n-    JavaFxUtil.addListener(windowPrefs.maximizedProperty(), invalidationListener);\n-    invalidationListener.invalidated(windowPrefs.maximizedProperty());\n+    notificationButton.managedProperty().bind(notificationButton.visibleProperty());\n+\n+    List<MenuItem> menuItems = leftMenuPane.getChildrenUnmodifiable().stream()\n+        .filter(menuItem -> menuItem.getUserData() instanceof NavigationItem)\n+        .map(menuButton -> {\n+          MenuItem menuItem = new MenuItem(((Labeled) menuButton).getText());\n+          menuItem.setOnAction(event -> eventBus.post(new NavigateEvent((NavigationItem) menuButton.getUserData())));\n+          return menuItem;\n+        })\n+        .collect(Collectors.toList());\n+    navigationDropdown.getItems().setAll(menuItems);", "originalCommit": "97d45972d13f3ee217db822cef3deef0cca4a429", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUyOTQ3Nw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r452529477", "bodyText": "ObservableList.setAll() triggers one change event, repeatedly calling add() triggers multiple change events.", "author": "micheljung", "createdAt": "2020-07-09T22:43:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA3NzIxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY2MjYyNg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r452662626", "bodyText": "Good to know", "author": "Brutus5000", "createdAt": "2020-07-10T07:10:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA3NzIxOA=="}], "type": "inlineReview", "revised_code": {"commit": "28fcc6df125feaeddb56a4b6ad709aa217f1c928", "chunk": "diff --git a/src/main/java/com/faforever/client/main/MainController.java b/src/main/java/com/faforever/client/main/MainController.java\nindex 162c7cc8..b8d81edb 100644\n--- a/src/main/java/com/faforever/client/main/MainController.java\n+++ b/src/main/java/com/faforever/client/main/MainController.java\n\n@@ -208,15 +208,7 @@ public class MainController implements Controller<Node> {\n     vaultFileSystemLocationChecker.checkVaultFileSystemLocation();\n     notificationButton.managedProperty().bind(notificationButton.visibleProperty());\n \n-    List<MenuItem> menuItems = leftMenuPane.getChildrenUnmodifiable().stream()\n-        .filter(menuItem -> menuItem.getUserData() instanceof NavigationItem)\n-        .map(menuButton -> {\n-          MenuItem menuItem = new MenuItem(((Labeled) menuButton).getText());\n-          menuItem.setOnAction(event -> eventBus.post(new NavigateEvent((NavigationItem) menuButton.getUserData())));\n-          return menuItem;\n-        })\n-        .collect(Collectors.toList());\n-    navigationDropdown.getItems().setAll(menuItems);\n+    navigationDropdown.getItems().setAll(createMenuItemsFromNavigation());\n     navigationDropdown.managedProperty().bind(navigationDropdown.visibleProperty());\n \n     leftMenuPane.layoutBoundsProperty().addListener(observable -> {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA5MzY3NQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r452093675", "bodyText": "The complexity of this class is very high and self-explanatory code is not given here anymore imho.\nEither a Javadoc or some other kind of restructuring is necessary:\n\nThe parent is implicitly expected to be a list cell - but you only see this from the cast in line 23.\nThere is a onRemoveButtonClicked method, but nowhere is stated that this controller is supposed to contain a button. So the name is misleading here.\nAlso the purpose of the label remains unclear. What is \"channel\" supposed to be?", "author": "Brutus5000", "createdAt": "2020-07-09T09:40:10Z", "path": "src/main/java/com/faforever/client/preferences/ui/RemovableListCellController.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.faforever.client.preferences.ui;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.NodeListCell;\n+import javafx.scene.Parent;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ListView;\n+import javafx.scene.layout.Pane;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+public class RemovableListCellController implements Controller<Pane> {\n+\n+  public Pane removableCellRoot;\n+  public Label label;\n+\n+  public void onRemoveButtonClicked() {\n+    Parent parent = removableCellRoot.getParent();\n+    NodeListCell<?> cell = (NodeListCell<?>) parent;\n+    ListView<?> listView = cell.getListView();\n+    listView.getItems().remove(cell.getItem());\n+  }\n+\n+  @Override\n+  public Pane getRoot() {\n+    return removableCellRoot;\n+  }\n+\n+  public void setChannel(String channel) {\n+    label.setText(channel);\n+  }\n+}", "originalCommit": "97d45972d13f3ee217db822cef3deef0cca4a429", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUzMzkyNg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r452533926", "bodyText": "I was able to simplify this; it's now a ListCell that's a controller at the same time. Code is simpler and JavaDoc added.", "author": "micheljung", "createdAt": "2020-07-09T22:57:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA5MzY3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "28fcc6df125feaeddb56a4b6ad709aa217f1c928", "chunk": "diff --git a/src/main/java/com/faforever/client/preferences/ui/RemovableListCellController.java b/src/main/java/com/faforever/client/preferences/ui/RemovableListCellController.java\nindex 15deda6a..dee09f34 100644\n--- a/src/main/java/com/faforever/client/preferences/ui/RemovableListCellController.java\n+++ b/src/main/java/com/faforever/client/preferences/ui/RemovableListCellController.java\n\n@@ -1,36 +1,53 @@\n package com.faforever.client.preferences.ui;\n \n import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.JavaFxUtil;\n import com.faforever.client.fx.NodeListCell;\n+import javafx.scene.Node;\n import javafx.scene.Parent;\n import javafx.scene.control.Label;\n+import javafx.scene.control.ListCell;\n import javafx.scene.control.ListView;\n import javafx.scene.layout.Pane;\n import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n import org.springframework.context.annotation.Scope;\n import org.springframework.stereotype.Component;\n \n+import java.util.function.Function;\n \n+\n+/**\n+ * A {@link javafx.scene.control.ListCell} containing a 'remove' button that removes the represented item from the\n+ * parent {@link ListView}.\n+ */\n @Component\n @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n-public class RemovableListCellController implements Controller<Pane> {\n+public class RemovableListCellController extends ListCell<String> implements Controller<Pane> {\n \n   public Pane removableCellRoot;\n   public Label label;\n \n+  @Override\n+  protected void updateItem(String item, boolean empty) {\n+    super.updateItem(item, empty);\n+\n+    JavaFxUtil.assertApplicationThread();\n+\n+    setText(null);\n+    if (empty || item == null) {\n+      setGraphic(null);\n+    } else {\n+      setGraphic(removableCellRoot);\n+      label.setText(item);\n+    }\n+  }\n+\n   public void onRemoveButtonClicked() {\n-    Parent parent = removableCellRoot.getParent();\n-    NodeListCell<?> cell = (NodeListCell<?>) parent;\n-    ListView<?> listView = cell.getListView();\n-    listView.getItems().remove(cell.getItem());\n+    getListView().getItems().remove(getItem());\n   }\n \n   @Override\n   public Pane getRoot() {\n     return removableCellRoot;\n   }\n-\n-  public void setChannel(String channel) {\n-    label.setText(channel);\n-  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE5OTM3NA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r452199374", "bodyText": "What is this value referring to? A translation code?", "author": "Brutus5000", "createdAt": "2020-07-09T13:01:15Z", "path": "src/main/java/com/faforever/client/ui/dialog/Dialog.java", "diffHunk": "@@ -0,0 +1,540 @@\n+package com.faforever.client.ui.dialog;\n+\n+import com.faforever.client.ui.converter.DialogTransitionConverter;\n+import com.faforever.client.ui.effects.DepthManager;\n+import com.faforever.client.ui.transitions.CachedTransition;\n+import javafx.animation.Interpolator;\n+import javafx.animation.KeyFrame;\n+import javafx.animation.KeyValue;\n+import javafx.animation.Timeline;\n+import javafx.animation.Transition;\n+import javafx.beans.DefaultProperty;\n+import javafx.beans.property.BooleanProperty;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.ObjectPropertyBase;\n+import javafx.beans.property.SimpleBooleanProperty;\n+import javafx.css.CssMetaData;\n+import javafx.css.SimpleStyleableObjectProperty;\n+import javafx.css.Styleable;\n+import javafx.css.StyleableObjectProperty;\n+import javafx.css.StyleableProperty;\n+import javafx.event.Event;\n+import javafx.event.EventHandler;\n+import javafx.event.EventType;\n+import javafx.geometry.Pos;\n+import javafx.scene.CacheHint;\n+import javafx.scene.Node;\n+import javafx.scene.SnapshotParameters;\n+import javafx.scene.effect.BoxBlur;\n+import javafx.scene.effect.Effect;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.image.WritableImage;\n+import javafx.scene.input.MouseEvent;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.Region;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.paint.Color;\n+import javafx.util.Duration;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+@DefaultProperty(value = \"content\")\n+public class Dialog extends StackPane {\n+\n+  private static final String DEFAULT_STYLE_CLASS = \"dialog\";\n+\n+  private final ObjectProperty<EventHandler<? super DialogEvent>> onDialogClosedProperty = new ObjectPropertyBase<>() {\n+    @Override\n+    protected void invalidated() {\n+      setEventHandler(DialogEvent.CLOSED, get());\n+    }\n+\n+    @Override\n+    public Object getBean() {\n+      return Dialog.this;\n+    }\n+\n+    @Override\n+    public String getName() {\n+      return \"onClosed\";\n+    }\n+  };\n+  /** Whether the dialog will close when clicking on the overlay. */\n+  private final BooleanProperty overlayClose = new SimpleBooleanProperty(true);\n+  /**\n+   * If {@code true}, the content of dialog container will be cached and replaced with an image when displaying the\n+   * dialog (better performance). This is recommended if the content behind the dialog will not change during the\n+   * showing period\n+   */\n+  private final BooleanProperty cacheContainer = new SimpleBooleanProperty(false);\n+  private final StyleableObjectProperty<DialogTransition> transitionType = new SimpleStyleableObjectProperty<>(\n+      StyleableProperties.DIALOG_TRANSITION,\n+      Dialog.this,\n+      \"dialogTransition\",\n+      DialogTransition.CENTER);\n+  private final ObjectProperty<EventHandler<? super DialogEvent>> onDialogOpenedProperty = new ObjectPropertyBase<>() {\n+    @Override\n+    protected void invalidated() {\n+      setEventHandler(DialogEvent.OPENED, get());\n+    }\n+\n+    @Override\n+    public Object getBean() {\n+      return Dialog.this;\n+    }\n+\n+    @Override\n+    public String getName() {\n+      return \"onOpened\";", "originalCommit": "f09d36fdfb6cdc64cc25fa8e8316cfb873ed98b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUzNTQ2Nw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r452535467", "bodyText": "ReadOnlyProperty.getName():\n\nReturns the name of this property. If the property does not have a name, this method returns an empty String.", "author": "micheljung", "createdAt": "2020-07-09T23:02:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE5OTM3NA=="}], "type": "inlineReview", "revised_code": {"commit": "28fcc6df125feaeddb56a4b6ad709aa217f1c928", "chunk": "diff --git a/src/main/java/com/faforever/client/ui/dialog/Dialog.java b/src/main/java/com/faforever/client/ui/dialog/Dialog.java\nindex 2ec97ccc..0c7633f6 100644\n--- a/src/main/java/com/faforever/client/ui/dialog/Dialog.java\n+++ b/src/main/java/com/faforever/client/ui/dialog/Dialog.java\n\n@@ -41,6 +41,7 @@ import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n \n+/** Ported from JFoenix since we wanted to get rid of the JFoenix dependency */\n @DefaultProperty(value = \"content\")\n public class Dialog extends StackPane {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE5OTgxOQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r452199819", "bodyText": "Thanks captain! Comment can be removed", "author": "Brutus5000", "createdAt": "2020-07-09T13:02:01Z", "path": "src/main/java/com/faforever/client/ui/dialog/Dialog.java", "diffHunk": "@@ -0,0 +1,540 @@\n+package com.faforever.client.ui.dialog;\n+\n+import com.faforever.client.ui.converter.DialogTransitionConverter;\n+import com.faforever.client.ui.effects.DepthManager;\n+import com.faforever.client.ui.transitions.CachedTransition;\n+import javafx.animation.Interpolator;\n+import javafx.animation.KeyFrame;\n+import javafx.animation.KeyValue;\n+import javafx.animation.Timeline;\n+import javafx.animation.Transition;\n+import javafx.beans.DefaultProperty;\n+import javafx.beans.property.BooleanProperty;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.ObjectPropertyBase;\n+import javafx.beans.property.SimpleBooleanProperty;\n+import javafx.css.CssMetaData;\n+import javafx.css.SimpleStyleableObjectProperty;\n+import javafx.css.Styleable;\n+import javafx.css.StyleableObjectProperty;\n+import javafx.css.StyleableProperty;\n+import javafx.event.Event;\n+import javafx.event.EventHandler;\n+import javafx.event.EventType;\n+import javafx.geometry.Pos;\n+import javafx.scene.CacheHint;\n+import javafx.scene.Node;\n+import javafx.scene.SnapshotParameters;\n+import javafx.scene.effect.BoxBlur;\n+import javafx.scene.effect.Effect;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.image.WritableImage;\n+import javafx.scene.input.MouseEvent;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.Region;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.paint.Color;\n+import javafx.util.Duration;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+@DefaultProperty(value = \"content\")\n+public class Dialog extends StackPane {\n+\n+  private static final String DEFAULT_STYLE_CLASS = \"dialog\";\n+\n+  private final ObjectProperty<EventHandler<? super DialogEvent>> onDialogClosedProperty = new ObjectPropertyBase<>() {\n+    @Override\n+    protected void invalidated() {\n+      setEventHandler(DialogEvent.CLOSED, get());\n+    }\n+\n+    @Override\n+    public Object getBean() {\n+      return Dialog.this;\n+    }\n+\n+    @Override\n+    public String getName() {\n+      return \"onClosed\";\n+    }\n+  };\n+  /** Whether the dialog will close when clicking on the overlay. */\n+  private final BooleanProperty overlayClose = new SimpleBooleanProperty(true);\n+  /**\n+   * If {@code true}, the content of dialog container will be cached and replaced with an image when displaying the\n+   * dialog (better performance). This is recommended if the content behind the dialog will not change during the\n+   * showing period\n+   */\n+  private final BooleanProperty cacheContainer = new SimpleBooleanProperty(false);\n+  private final StyleableObjectProperty<DialogTransition> transitionType = new SimpleStyleableObjectProperty<>(\n+      StyleableProperties.DIALOG_TRANSITION,\n+      Dialog.this,\n+      \"dialogTransition\",\n+      DialogTransition.CENTER);\n+  private final ObjectProperty<EventHandler<? super DialogEvent>> onDialogOpenedProperty = new ObjectPropertyBase<>() {\n+    @Override\n+    protected void invalidated() {\n+      setEventHandler(DialogEvent.OPENED, get());\n+    }\n+\n+    @Override\n+    public Object getBean() {\n+      return Dialog.this;\n+    }\n+\n+    @Override\n+    public String getName() {\n+      return \"onOpened\";\n+    }\n+  };\n+  private StackPane contentHolder;\n+  private double offsetX;\n+  private double offsetY;\n+  private StackPane dialogContainer;\n+  private Region content;\n+  private Transition animation;\n+  private ArrayList<Node> tempContent;\n+  EventHandler<? super MouseEvent> closeHandler = e -> close();\n+\n+  /** Creates an empty Dialog with CENTER animation type. */\n+  public Dialog() {\n+    this(null, null, DialogTransition.CENTER);\n+  }\n+\n+  public Dialog(StackPane dialogContainer, Region content, DialogTransition transitionType) {\n+    initialize();\n+    setContent(content);\n+    setDialogContainer(dialogContainer);\n+    this.transitionType.set(transitionType);\n+    initChangeListeners();\n+  }\n+\n+  public Dialog(StackPane dialogContainer, Region content, DialogTransition transitionType, boolean overlayClose) {\n+    setOverlayClose(overlayClose);\n+    initialize();\n+    setContent(content);\n+    setDialogContainer(dialogContainer);\n+    this.transitionType.set(transitionType);\n+    // init change listeners", "originalCommit": "f09d36fdfb6cdc64cc25fa8e8316cfb873ed98b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUzNTgxNA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r452535814", "bodyText": "Dialog and Alert are ported from JFoenix. I cleaned up the code but didn't catch it all :-)", "author": "micheljung", "createdAt": "2020-07-09T23:03:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE5OTgxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "28fcc6df125feaeddb56a4b6ad709aa217f1c928", "chunk": "diff --git a/src/main/java/com/faforever/client/ui/dialog/Dialog.java b/src/main/java/com/faforever/client/ui/dialog/Dialog.java\nindex 2ec97ccc..0c7633f6 100644\n--- a/src/main/java/com/faforever/client/ui/dialog/Dialog.java\n+++ b/src/main/java/com/faforever/client/ui/dialog/Dialog.java\n\n@@ -41,6 +41,7 @@ import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n \n+/** Ported from JFoenix since we wanted to get rid of the JFoenix dependency */\n @DefaultProperty(value = \"content\")\n public class Dialog extends StackPane {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIwMjE3MQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r452202171", "bodyText": "A JavaDoc would be helpful here:\nHow is this different from a VBox?\nWhen should this be used?\nHow to use this from SceneBuilder or fxml?", "author": "Brutus5000", "createdAt": "2020-07-09T13:05:55Z", "path": "src/main/java/com/faforever/client/ui/dialog/DialogLayout.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package com.faforever.client.ui.dialog;\n+\n+import javafx.collections.ObservableList;\n+import javafx.scene.Node;\n+import javafx.scene.layout.FlowPane;\n+import javafx.scene.layout.Priority;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+\n+import java.util.List;\n+\n+public class DialogLayout extends VBox {", "originalCommit": "f09d36fdfb6cdc64cc25fa8e8316cfb873ed98b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUzNjEyNg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r452536126", "bodyText": "Ported from JFoenix. A DialogLayout has a header, a body and action buttons and is the content of a Dialog. Eventually, we might get rid of it but for now, we're transitioning away from JFoenix so we kept this class.", "author": "micheljung", "createdAt": "2020-07-09T23:04:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIwMjE3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "28fcc6df125feaeddb56a4b6ad709aa217f1c928", "chunk": "diff --git a/src/main/java/com/faforever/client/ui/dialog/DialogLayout.java b/src/main/java/com/faforever/client/ui/dialog/DialogLayout.java\nindex 6704f9b4..bac34d78 100644\n--- a/src/main/java/com/faforever/client/ui/dialog/DialogLayout.java\n+++ b/src/main/java/com/faforever/client/ui/dialog/DialogLayout.java\n\n@@ -9,6 +9,7 @@ import javafx.scene.layout.VBox;\n \n import java.util.List;\n \n+/** Ported from JFoenix since we wanted to get rid of the JFoenix dependency */\n public class DialogLayout extends VBox {\n   private static final String DEFAULT_STYLE_CLASS = \"dialog-layout\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIwMzk1Nw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r452203957", "bodyText": "If only one case is covered I'd prefer if/else", "author": "Brutus5000", "createdAt": "2020-07-09T13:08:51Z", "path": "src/main/java/com/faforever/client/ui/transitions/CachedTransition.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.faforever.client.ui.transitions;\n+\n+import com.jfoenix.transitions.CacheMemento;\n+import javafx.animation.Timeline;\n+import javafx.animation.Transition;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.scene.Node;\n+import javafx.util.Duration;\n+\n+public class CachedTransition extends Transition {\n+  protected final Node node;\n+  protected ObjectProperty<Timeline> timeline = new SimpleObjectProperty<>();\n+  private CacheMemento[] mementos = new CacheMemento[0];\n+\n+  public CachedTransition(final Node node, final Timeline timeline) {\n+    this.node = node;\n+    this.timeline.set(timeline);\n+    mementos = node == null ? mementos : new CacheMemento[]{new CacheMemento(node)};\n+    statusProperty().addListener(observable -> {\n+      switch (getStatus()) {\n+        case RUNNING:\n+          starting();\n+          break;\n+        default:\n+          stopping();\n+          break;\n+      }\n+    });", "originalCommit": "f09d36fdfb6cdc64cc25fa8e8316cfb873ed98b9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "28fcc6df125feaeddb56a4b6ad709aa217f1c928", "chunk": "diff --git a/src/main/java/com/faforever/client/ui/transitions/CachedTransition.java b/src/main/java/com/faforever/client/ui/transitions/CachedTransition.java\nindex 030db287..e2ee0a0b 100644\n--- a/src/main/java/com/faforever/client/ui/transitions/CachedTransition.java\n+++ b/src/main/java/com/faforever/client/ui/transitions/CachedTransition.java\n\n@@ -8,23 +8,24 @@ import javafx.beans.property.SimpleObjectProperty;\n import javafx.scene.Node;\n import javafx.util.Duration;\n \n+import java.util.Arrays;\n+\n+/** Ported from JFoenix since we wanted to get rid of the JFoenix dependency */\n public class CachedTransition extends Transition {\n   protected final Node node;\n-  protected ObjectProperty<Timeline> timeline = new SimpleObjectProperty<>();\n-  private CacheMemento[] mementos = new CacheMemento[0];\n+  protected final ObjectProperty<Timeline> timeline = new SimpleObjectProperty<>();\n+\n+  private final CacheMemento[] mementos;\n \n   public CachedTransition(final Node node, final Timeline timeline) {\n     this.node = node;\n     this.timeline.set(timeline);\n-    mementos = node == null ? mementos : new CacheMemento[]{new CacheMemento(node)};\n+    mementos = node == null ? new CacheMemento[0] : new CacheMemento[]{new CacheMemento(node)};\n     statusProperty().addListener(observable -> {\n-      switch (getStatus()) {\n-        case RUNNING:\n-          starting();\n-          break;\n-        default:\n-          stopping();\n-          break;\n+      if (getStatus() == Status.RUNNING) {\n+        starting();\n+      } else {\n+        stopping();\n       }\n     });\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIwNTI5Mg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r452205292", "bodyText": "From what I see mementos can never be null.\nAlso I'd suggest Arrays.stream(mementos).foreach(CacheMemento::cache)", "author": "Brutus5000", "createdAt": "2020-07-09T13:11:03Z", "path": "src/main/java/com/faforever/client/ui/transitions/CachedTransition.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.faforever.client.ui.transitions;\n+\n+import com.jfoenix.transitions.CacheMemento;\n+import javafx.animation.Timeline;\n+import javafx.animation.Transition;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.scene.Node;\n+import javafx.util.Duration;\n+\n+public class CachedTransition extends Transition {\n+  protected final Node node;\n+  protected ObjectProperty<Timeline> timeline = new SimpleObjectProperty<>();\n+  private CacheMemento[] mementos = new CacheMemento[0];\n+\n+  public CachedTransition(final Node node, final Timeline timeline) {\n+    this.node = node;\n+    this.timeline.set(timeline);\n+    mementos = node == null ? mementos : new CacheMemento[]{new CacheMemento(node)};\n+    statusProperty().addListener(observable -> {\n+      switch (getStatus()) {\n+        case RUNNING:\n+          starting();\n+          break;\n+        default:\n+          stopping();\n+          break;\n+      }\n+    });\n+  }\n+\n+  public CachedTransition(final Node node, final Timeline timeline, CacheMemento... cacheMomentos) {\n+    this.node = node;\n+    this.timeline.set(timeline);\n+    mementos = new CacheMemento[(node == null ? 0 : 1) + cacheMomentos.length];\n+    if (node != null) {\n+      mementos[0] = new CacheMemento(node);\n+    }\n+    System.arraycopy(cacheMomentos, 0, mementos, node == null ? 0 : 1, cacheMomentos.length);\n+    statusProperty().addListener(observable -> {\n+      switch (getStatus()) {\n+        case RUNNING:\n+          starting();\n+          break;\n+        default:\n+          stopping();\n+          break;\n+      }\n+    });\n+  }\n+\n+  protected void starting() {\n+    if (mementos != null) {\n+      for (CacheMemento memento : mementos) {\n+        memento.cache();\n+      }\n+    }\n+  }", "originalCommit": "f09d36fdfb6cdc64cc25fa8e8316cfb873ed98b9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "28fcc6df125feaeddb56a4b6ad709aa217f1c928", "chunk": "diff --git a/src/main/java/com/faforever/client/ui/transitions/CachedTransition.java b/src/main/java/com/faforever/client/ui/transitions/CachedTransition.java\nindex 030db287..e2ee0a0b 100644\n--- a/src/main/java/com/faforever/client/ui/transitions/CachedTransition.java\n+++ b/src/main/java/com/faforever/client/ui/transitions/CachedTransition.java\n\n@@ -8,23 +8,24 @@ import javafx.beans.property.SimpleObjectProperty;\n import javafx.scene.Node;\n import javafx.util.Duration;\n \n+import java.util.Arrays;\n+\n+/** Ported from JFoenix since we wanted to get rid of the JFoenix dependency */\n public class CachedTransition extends Transition {\n   protected final Node node;\n-  protected ObjectProperty<Timeline> timeline = new SimpleObjectProperty<>();\n-  private CacheMemento[] mementos = new CacheMemento[0];\n+  protected final ObjectProperty<Timeline> timeline = new SimpleObjectProperty<>();\n+\n+  private final CacheMemento[] mementos;\n \n   public CachedTransition(final Node node, final Timeline timeline) {\n     this.node = node;\n     this.timeline.set(timeline);\n-    mementos = node == null ? mementos : new CacheMemento[]{new CacheMemento(node)};\n+    mementos = node == null ? new CacheMemento[0] : new CacheMemento[]{new CacheMemento(node)};\n     statusProperty().addListener(observable -> {\n-      switch (getStatus()) {\n-        case RUNNING:\n-          starting();\n-          break;\n-        default:\n-          stopping();\n-          break;\n+      if (getStatus() == Status.RUNNING) {\n+        starting();\n+      } else {\n+        stopping();\n       }\n     });\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIwNTQxNg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r452205416", "bodyText": "From what I see mementos can never be null.\nAlso I'd suggest Arrays.stream(mementos).foreach(CacheMemento::restore)", "author": "Brutus5000", "createdAt": "2020-07-09T13:11:14Z", "path": "src/main/java/com/faforever/client/ui/transitions/CachedTransition.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.faforever.client.ui.transitions;\n+\n+import com.jfoenix.transitions.CacheMemento;\n+import javafx.animation.Timeline;\n+import javafx.animation.Transition;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.scene.Node;\n+import javafx.util.Duration;\n+\n+public class CachedTransition extends Transition {\n+  protected final Node node;\n+  protected ObjectProperty<Timeline> timeline = new SimpleObjectProperty<>();\n+  private CacheMemento[] mementos = new CacheMemento[0];\n+\n+  public CachedTransition(final Node node, final Timeline timeline) {\n+    this.node = node;\n+    this.timeline.set(timeline);\n+    mementos = node == null ? mementos : new CacheMemento[]{new CacheMemento(node)};\n+    statusProperty().addListener(observable -> {\n+      switch (getStatus()) {\n+        case RUNNING:\n+          starting();\n+          break;\n+        default:\n+          stopping();\n+          break;\n+      }\n+    });\n+  }\n+\n+  public CachedTransition(final Node node, final Timeline timeline, CacheMemento... cacheMomentos) {\n+    this.node = node;\n+    this.timeline.set(timeline);\n+    mementos = new CacheMemento[(node == null ? 0 : 1) + cacheMomentos.length];\n+    if (node != null) {\n+      mementos[0] = new CacheMemento(node);\n+    }\n+    System.arraycopy(cacheMomentos, 0, mementos, node == null ? 0 : 1, cacheMomentos.length);\n+    statusProperty().addListener(observable -> {\n+      switch (getStatus()) {\n+        case RUNNING:\n+          starting();\n+          break;\n+        default:\n+          stopping();\n+          break;\n+      }\n+    });\n+  }\n+\n+  protected void starting() {\n+    if (mementos != null) {\n+      for (CacheMemento memento : mementos) {\n+        memento.cache();\n+      }\n+    }\n+  }\n+\n+  protected void stopping() {\n+    if (mementos != null) {\n+      for (CacheMemento memento : mementos) {\n+        memento.restore();\n+      }\n+    }", "originalCommit": "f09d36fdfb6cdc64cc25fa8e8316cfb873ed98b9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "28fcc6df125feaeddb56a4b6ad709aa217f1c928", "chunk": "diff --git a/src/main/java/com/faforever/client/ui/transitions/CachedTransition.java b/src/main/java/com/faforever/client/ui/transitions/CachedTransition.java\nindex 030db287..e2ee0a0b 100644\n--- a/src/main/java/com/faforever/client/ui/transitions/CachedTransition.java\n+++ b/src/main/java/com/faforever/client/ui/transitions/CachedTransition.java\n\n@@ -8,23 +8,24 @@ import javafx.beans.property.SimpleObjectProperty;\n import javafx.scene.Node;\n import javafx.util.Duration;\n \n+import java.util.Arrays;\n+\n+/** Ported from JFoenix since we wanted to get rid of the JFoenix dependency */\n public class CachedTransition extends Transition {\n   protected final Node node;\n-  protected ObjectProperty<Timeline> timeline = new SimpleObjectProperty<>();\n-  private CacheMemento[] mementos = new CacheMemento[0];\n+  protected final ObjectProperty<Timeline> timeline = new SimpleObjectProperty<>();\n+\n+  private final CacheMemento[] mementos;\n \n   public CachedTransition(final Node node, final Timeline timeline) {\n     this.node = node;\n     this.timeline.set(timeline);\n-    mementos = node == null ? mementos : new CacheMemento[]{new CacheMemento(node)};\n+    mementos = node == null ? new CacheMemento[0] : new CacheMemento[]{new CacheMemento(node)};\n     statusProperty().addListener(observable -> {\n-      switch (getStatus()) {\n-        case RUNNING:\n-          starting();\n-          break;\n-        default:\n-          stopping();\n-          break;\n+      if (getStatus() == Status.RUNNING) {\n+        starting();\n+      } else {\n+        stopping();\n       }\n     });\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIwNTY2MA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r452205660", "bodyText": "same here", "author": "Brutus5000", "createdAt": "2020-07-09T13:11:38Z", "path": "src/main/java/com/faforever/client/ui/transitions/CachedTransition.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.faforever.client.ui.transitions;\n+\n+import com.jfoenix.transitions.CacheMemento;\n+import javafx.animation.Timeline;\n+import javafx.animation.Transition;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.scene.Node;\n+import javafx.util.Duration;\n+\n+public class CachedTransition extends Transition {\n+  protected final Node node;\n+  protected ObjectProperty<Timeline> timeline = new SimpleObjectProperty<>();\n+  private CacheMemento[] mementos = new CacheMemento[0];\n+\n+  public CachedTransition(final Node node, final Timeline timeline) {\n+    this.node = node;\n+    this.timeline.set(timeline);\n+    mementos = node == null ? mementos : new CacheMemento[]{new CacheMemento(node)};\n+    statusProperty().addListener(observable -> {\n+      switch (getStatus()) {\n+        case RUNNING:\n+          starting();\n+          break;\n+        default:\n+          stopping();\n+          break;\n+      }\n+    });\n+  }\n+\n+  public CachedTransition(final Node node, final Timeline timeline, CacheMemento... cacheMomentos) {\n+    this.node = node;\n+    this.timeline.set(timeline);\n+    mementos = new CacheMemento[(node == null ? 0 : 1) + cacheMomentos.length];\n+    if (node != null) {\n+      mementos[0] = new CacheMemento(node);\n+    }\n+    System.arraycopy(cacheMomentos, 0, mementos, node == null ? 0 : 1, cacheMomentos.length);\n+    statusProperty().addListener(observable -> {\n+      switch (getStatus()) {\n+        case RUNNING:\n+          starting();\n+          break;\n+        default:\n+          stopping();\n+          break;\n+      }", "originalCommit": "f09d36fdfb6cdc64cc25fa8e8316cfb873ed98b9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "28fcc6df125feaeddb56a4b6ad709aa217f1c928", "chunk": "diff --git a/src/main/java/com/faforever/client/ui/transitions/CachedTransition.java b/src/main/java/com/faforever/client/ui/transitions/CachedTransition.java\nindex 030db287..e2ee0a0b 100644\n--- a/src/main/java/com/faforever/client/ui/transitions/CachedTransition.java\n+++ b/src/main/java/com/faforever/client/ui/transitions/CachedTransition.java\n\n@@ -8,23 +8,24 @@ import javafx.beans.property.SimpleObjectProperty;\n import javafx.scene.Node;\n import javafx.util.Duration;\n \n+import java.util.Arrays;\n+\n+/** Ported from JFoenix since we wanted to get rid of the JFoenix dependency */\n public class CachedTransition extends Transition {\n   protected final Node node;\n-  protected ObjectProperty<Timeline> timeline = new SimpleObjectProperty<>();\n-  private CacheMemento[] mementos = new CacheMemento[0];\n+  protected final ObjectProperty<Timeline> timeline = new SimpleObjectProperty<>();\n+\n+  private final CacheMemento[] mementos;\n \n   public CachedTransition(final Node node, final Timeline timeline) {\n     this.node = node;\n     this.timeline.set(timeline);\n-    mementos = node == null ? mementos : new CacheMemento[]{new CacheMemento(node)};\n+    mementos = node == null ? new CacheMemento[0] : new CacheMemento[]{new CacheMemento(node)};\n     statusProperty().addListener(observable -> {\n-      switch (getStatus()) {\n-        case RUNNING:\n-          starting();\n-          break;\n-        default:\n-          stopping();\n-          break;\n+      if (getStatus() == Status.RUNNING) {\n+        starting();\n+      } else {\n+        stopping();\n       }\n     });\n   }\n"}}, {"oid": "b3048f0828a094a2358b0ad40840fa69c7e54b58", "url": "https://github.com/FAForever/downlords-faf-client/commit/b3048f0828a094a2358b0ad40840fa69c7e54b58", "message": "Native window behavior and design brush-up\n\nFixes #1007\nFixes #1033\nFixes #1038\nFixes #1075\nFixes #1685\nFixes #1751\nFixes #1760\nFixes #1766\nFixes #1815\nFixes #1816", "committedDate": "2020-07-09T22:07:11Z", "type": "forcePushed"}, {"oid": "ddb3433bb480e1c3d1109028b33949489b336e6f", "url": "https://github.com/FAForever/downlords-faf-client/commit/ddb3433bb480e1c3d1109028b33949489b336e6f", "message": "Native window behavior and design brush-up\n\nFixes #1007\nFixes #1033\nFixes #1038\nFixes #1075\nFixes #1685\nFixes #1751\nFixes #1760\nFixes #1766\nFixes #1815\nFixes #1816", "committedDate": "2020-07-09T22:30:54Z", "type": "forcePushed"}, {"oid": "28fcc6df125feaeddb56a4b6ad709aa217f1c928", "url": "https://github.com/FAForever/downlords-faf-client/commit/28fcc6df125feaeddb56a4b6ad709aa217f1c928", "message": "Native window behavior and design brush-up\n\nFixes #1007\nFixes #1033\nFixes #1038\nFixes #1075\nFixes #1685\nFixes #1751\nFixes #1760\nFixes #1766\nFixes #1815\nFixes #1816", "committedDate": "2020-07-09T23:07:35Z", "type": "forcePushed"}, {"oid": "b5234edabde5d4ca4ab1927dbc1f9317065de379", "url": "https://github.com/FAForever/downlords-faf-client/commit/b5234edabde5d4ca4ab1927dbc1f9317065de379", "message": "Native window behavior and design brush-up\n\nFixes #1007\nFixes #1033\nFixes #1038\nFixes #1075\nFixes #1685\nFixes #1751\nFixes #1760\nFixes #1766\nFixes #1815\nFixes #1816\nFixes #1817", "committedDate": "2020-07-09T23:10:38Z", "type": "forcePushed"}, {"oid": "c939e9ce550682944283335e1d02d8aef0015d9c", "url": "https://github.com/FAForever/downlords-faf-client/commit/c939e9ce550682944283335e1d02d8aef0015d9c", "message": "Native window behavior and design brush-up\n\nFixes #1007\nFixes #1033\nFixes #1038\nFixes #1075\nFixes #1685\nFixes #1751\nFixes #1760\nFixes #1766\nFixes #1815\nFixes #1816\nFixes #1817", "committedDate": "2020-07-09T23:19:25Z", "type": "forcePushed"}, {"oid": "f3aaf9d0b5466747771ae2d2f346fca6ea530acf", "url": "https://github.com/FAForever/downlords-faf-client/commit/f3aaf9d0b5466747771ae2d2f346fca6ea530acf", "message": "Native window behavior and design brush-up\n\nFixes #1007\nFixes #1033\nFixes #1038\nFixes #1075\nFixes #1685\nFixes #1751\nFixes #1760\nFixes #1766\nFixes #1815\nFixes #1816\nFixes #1817", "committedDate": "2020-07-09T23:28:19Z", "type": "forcePushed"}, {"oid": "181c3ebd99858ca49c4a126a4cc0a1bf8471b8e4", "url": "https://github.com/FAForever/downlords-faf-client/commit/181c3ebd99858ca49c4a126a4cc0a1bf8471b8e4", "message": "Native window behavior and design brush-up\n\nFixes #1007\nFixes #1033\nFixes #1038\nFixes #1075\nFixes #1685\nFixes #1751\nFixes #1760\nFixes #1766\nFixes #1815\nFixes #1816\nFixes #1817", "committedDate": "2020-07-09T23:39:25Z", "type": "forcePushed"}, {"oid": "f5ff9bfc6165f479d9f0eab6fe61307976dcc1cb", "url": "https://github.com/FAForever/downlords-faf-client/commit/f5ff9bfc6165f479d9f0eab6fe61307976dcc1cb", "message": "Native window behavior and design brush-up\n\nFixes #1007\nFixes #1033\nFixes #1038\nFixes #1075\nFixes #1685\nFixes #1751\nFixes #1760\nFixes #1766\nFixes #1815\nFixes #1816\nFixes #1817\nFixes #1821", "committedDate": "2020-07-10T09:17:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk5NzY5NQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r452997695", "bodyText": "Not sure what u mean here. But I guess u need to find out what icon corresponds to this unicode. I guess if u dont, then leave the old code and add the fix me", "author": "1-alex98", "createdAt": "2020-07-10T18:11:49Z", "path": "src/main/java/com/faforever/client/replay/ReplayCardController.java", "diffHunk": "@@ -101,7 +101,9 @@ public void setReplay(Replay replay) {\n     Integer replayTicks = replay.getReplayTicks();\n     if (replayTicks != null) {\n       durationLabel.setText(timeService.shortDuration(Duration.ofMillis(replayTicks * 100)));\n-      ((Label) durationLabel.getGraphic()).setText(\"\ue953\");\n+      // FIXME which icon was added in https://github.com/FAForever/downlords-faf-client/commit/58357c603eafead218ef7cceb8907e86c5d864b6#r40460680\n+//      durationLabel.getGraphic().getStyleClass().remove(\"duration-icon\");\n+//      durationLabel.getGraphic().getStyleClass().remove(\"time-icon\");", "originalCommit": "f5ff9bfc6165f479d9f0eab6fe61307976dcc1cb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA5Mjk2Mw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r453092963", "bodyText": "Did you look at the discussion 58357c6#r40460680? An icon was added, but it was done by directly modifying the font rather than adding it via icomoon. This icon is lost in current client version and I wasn't even able to look it up using the font from his commit. So whether or not I leave the old code, there is no icon.", "author": "micheljung", "createdAt": "2020-07-10T21:51:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk5NzY5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE2OTQ5MA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r453169490", "bodyText": "ok", "author": "1-alex98", "createdAt": "2020-07-11T07:56:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk5NzY5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "d58b41a69632595fab5158ec83194f85aa5d84d3", "chunk": "diff --git a/src/main/java/com/faforever/client/replay/ReplayCardController.java b/src/main/java/com/faforever/client/replay/ReplayCardController.java\nindex e2f88334..938b5d87 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayCardController.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayCardController.java\n\n@@ -110,10 +109,19 @@ public class ReplayCardController implements Controller<Node> {\n           .orElse(i18n.get(\"notAvailable\")));\n     }\n \n-    String players = replay.getTeams().values().stream()\n-        .map(team -> Joiner.on(i18n.get(\"textSeparator\")).join(team))\n-        .collect(Collectors.joining(i18n.get(\"vsSeparator\")));\n-    playerListLabel.setText(players);\n+    replay.getTeams()\n+        .forEach((id, team) -> {\n+          VBox teamBox = new VBox();\n+\n+          String teamLabelText = id.equals(\"1\") ? i18n.get(\"replay.noTeam\") : i18n.get(\"replay.team\", Integer.parseInt(id) - 1);\n+          Label teamLabel = new Label(teamLabelText);\n+          teamLabel.getStyleClass().add(\"replay-card-team-label\");\n+          teamLabel.setPadding(new Insets(0, 0, 5, 0));\n+          teamBox.getChildren().add(teamLabel);\n+          team.forEach(player -> teamBox.getChildren().add(new Label(player)));\n+\n+          teamsContainer.getChildren().add(teamBox);\n+        });\n \n     ObservableList<Review> reviews = replay.getReviews();\n     JavaFxUtil.addListener(reviews, new WeakInvalidationListener(reviewsChangedListener));\n"}}, {"oid": "af8d11268faf8218fd58434c248fa4636a993734", "url": "https://github.com/FAForever/downlords-faf-client/commit/af8d11268faf8218fd58434c248fa4636a993734", "message": "Native window behavior and design brush-up\n\nFixes #1007\nFixes #1033\nFixes #1038\nFixes #1075\nFixes #1685\nFixes #1751\nFixes #1760\nFixes #1766\nFixes #1815\nFixes #1816\nFixes #1817\nFixes #1821", "committedDate": "2020-07-17T13:50:07Z", "type": "forcePushed"}, {"oid": "d58b41a69632595fab5158ec83194f85aa5d84d3", "url": "https://github.com/FAForever/downlords-faf-client/commit/d58b41a69632595fab5158ec83194f85aa5d84d3", "message": "Native window behavior and design brush-up\n\nFixes #1007\nFixes #1033\nFixes #1038\nFixes #1075\nFixes #1685\nFixes #1751\nFixes #1760\nFixes #1766\nFixes #1815\nFixes #1816\nFixes #1817\nFixes #1821", "committedDate": "2020-08-19T14:08:20Z", "type": "commit"}, {"oid": "dbebb342b1bc9f02df0d213fb5a6a80e6e7effb9", "url": "https://github.com/FAForever/downlords-faf-client/commit/dbebb342b1bc9f02df0d213fb5a6a80e6e7effb9", "message": "Fixes from Alex", "committedDate": "2020-08-19T17:11:23Z", "type": "forcePushed"}, {"oid": "c80da2ed268a4307dcd7a4d3547666035e609763", "url": "https://github.com/FAForever/downlords-faf-client/commit/c80da2ed268a4307dcd7a4d3547666035e609763", "message": "Fixes from Alex", "committedDate": "2020-08-19T20:39:49Z", "type": "forcePushed"}, {"oid": "07d9934c582a2fad0629b23fe17d965c7a11c23a", "url": "https://github.com/FAForever/downlords-faf-client/commit/07d9934c582a2fad0629b23fe17d965c7a11c23a", "message": "Fixes from Alex", "committedDate": "2020-08-19T21:28:18Z", "type": "forcePushed"}, {"oid": "076f093edf3067029b792ea554eb1a277c8d62fa", "url": "https://github.com/FAForever/downlords-faf-client/commit/076f093edf3067029b792ea554eb1a277c8d62fa", "message": "Fixes from Alex", "committedDate": "2020-08-19T21:59:33Z", "type": "commit"}, {"oid": "076f093edf3067029b792ea554eb1a277c8d62fa", "url": "https://github.com/FAForever/downlords-faf-client/commit/076f093edf3067029b792ea554eb1a277c8d62fa", "message": "Fixes from Alex", "committedDate": "2020-08-19T21:59:33Z", "type": "forcePushed"}, {"oid": "6bd336d2a763603642323b44233f74bbb53fb47a", "url": "https://github.com/FAForever/downlords-faf-client/commit/6bd336d2a763603642323b44233f74bbb53fb47a", "message": "Fixes from Alex", "committedDate": "2020-08-19T22:11:57Z", "type": "commit"}, {"oid": "1fa9761869b1bde980b65f8ee288a3ea198250a5", "url": "https://github.com/FAForever/downlords-faf-client/commit/1fa9761869b1bde980b65f8ee288a3ea198250a5", "message": "Fixes from Alex", "committedDate": "2020-08-19T22:29:19Z", "type": "commit"}, {"oid": "1fa9761869b1bde980b65f8ee288a3ea198250a5", "url": "https://github.com/FAForever/downlords-faf-client/commit/1fa9761869b1bde980b65f8ee288a3ea198250a5", "message": "Fixes from Alex", "committedDate": "2020-08-19T22:29:19Z", "type": "forcePushed"}, {"oid": "4050194db595adbf563758581db8eb9d758f4b9c", "url": "https://github.com/FAForever/downlords-faf-client/commit/4050194db595adbf563758581db8eb9d758f4b9c", "message": "Fixes from Alex", "committedDate": "2020-08-19T22:38:05Z", "type": "commit"}, {"oid": "91f4f5bfb35bbb8c4c7a003a368387a5a1503424", "url": "https://github.com/FAForever/downlords-faf-client/commit/91f4f5bfb35bbb8c4c7a003a368387a5a1503424", "message": "Fix Pagination Formatting", "committedDate": "2020-08-20T11:45:37Z", "type": "commit"}, {"oid": "3b0480a6ee5815b10d083e1760caf7a67d6e089c", "url": "https://github.com/FAForever/downlords-faf-client/commit/3b0480a6ee5815b10d083e1760caf7a67d6e089c", "message": "Fix X not displaying in vault details", "committedDate": "2020-08-20T11:46:38Z", "type": "commit"}, {"oid": "5adbb2417941c8bf87efcae088703fb3ca2ffbfa", "url": "https://github.com/FAForever/downlords-faf-client/commit/5adbb2417941c8bf87efcae088703fb3ca2ffbfa", "message": "Fix show rating change not enabling", "committedDate": "2020-08-20T11:47:01Z", "type": "commit"}, {"oid": "a605c811c75c9adb3c34ab5bfd69a28d2f799051", "url": "https://github.com/FAForever/downlords-faf-client/commit/a605c811c75c9adb3c34ab5bfd69a28d2f799051", "message": "Add correct icons to coop tab", "committedDate": "2020-08-20T20:27:48Z", "type": "commit"}, {"oid": "6f80056ccd328620603dc3f0f777dcd1d0b1eb07", "url": "https://github.com/FAForever/downlords-faf-client/commit/6f80056ccd328620603dc3f0f777dcd1d0b1eb07", "message": "Fix PasswordField getting no focus", "committedDate": "2020-08-21T07:33:50Z", "type": "commit"}, {"oid": "773930f8584a6802786fd5484588be8a0e39809a", "url": "https://github.com/FAForever/downlords-faf-client/commit/773930f8584a6802786fd5484588be8a0e39809a", "message": "Fix unit tests", "committedDate": "2020-08-21T07:46:45Z", "type": "commit"}, {"oid": "773930f8584a6802786fd5484588be8a0e39809a", "url": "https://github.com/FAForever/downlords-faf-client/commit/773930f8584a6802786fd5484588be8a0e39809a", "message": "Fix unit tests", "committedDate": "2020-08-21T07:46:45Z", "type": "forcePushed"}, {"oid": "6849573bfac7cd22f3014a03e8b67d229ede7bfe", "url": "https://github.com/FAForever/downlords-faf-client/commit/6849573bfac7cd22f3014a03e8b67d229ede7bfe", "message": "Fix alert dialogs stretching over the whole screen", "committedDate": "2020-08-21T10:48:45Z", "type": "commit"}, {"oid": "9c6c46679cf6095672f49fe814d04f78c1389a94", "url": "https://github.com/FAForever/downlords-faf-client/commit/9c6c46679cf6095672f49fe814d04f78c1389a94", "message": "fixup! Native window behavior and design brush-up\n\nColorize selected language instead of using icon", "committedDate": "2020-08-21T19:06:15Z", "type": "commit"}, {"oid": "d9b16c5ba0dfa22c6f4b55768929a27941bbf9d0", "url": "https://github.com/FAForever/downlords-faf-client/commit/d9b16c5ba0dfa22c6f4b55768929a27941bbf9d0", "message": "fixup! Native window behavior and design brush-up\n\nUse `game.create.generateMap`", "committedDate": "2020-08-21T19:08:14Z", "type": "commit"}, {"oid": "5d06fb61ae6c056678fc1d3c7091082c916b46ab", "url": "https://github.com/FAForever/downlords-faf-client/commit/5d06fb61ae6c056678fc1d3c7091082c916b46ab", "message": "fixup! Native window behavior and design brush-up\n\nApply hover effect only to hoverable cards", "committedDate": "2020-08-21T19:08:15Z", "type": "commit"}, {"oid": "74e92a01b1e38791a55a48069189a82925a2df3a", "url": "https://github.com/FAForever/downlords-faf-client/commit/74e92a01b1e38791a55a48069189a82925a2df3a", "message": "fixup! Native window behavior and design brush-up\n\nImport colors.css instead of style.css", "committedDate": "2020-08-21T19:08:15Z", "type": "commit"}, {"oid": "eb8fa9c8abd733a0ebdf9815fbdbe87c413fce5d", "url": "https://github.com/FAForever/downlords-faf-client/commit/eb8fa9c8abd733a0ebdf9815fbdbe87c413fce5d", "message": "fixup! Native window behavior and design brush-up\n\nClean up code that validates the game title", "committedDate": "2020-08-21T19:09:08Z", "type": "commit"}, {"oid": "235d4c2f5ae05241608de8318409f588917627ff", "url": "https://github.com/FAForever/downlords-faf-client/commit/235d4c2f5ae05241608de8318409f588917627ff", "message": "Update to fxstage 0.7.3\n\nAdds support for Windows display scaling", "committedDate": "2020-08-21T21:05:55Z", "type": "commit"}, {"oid": "a6af85ce53490f8fbba47eff05a65d657ccbd8ae", "url": "https://github.com/FAForever/downlords-faf-client/commit/a6af85ce53490f8fbba47eff05a65d657ccbd8ae", "message": "Improve map generator message keys\n\n\"game.generate\" is too ambiguous.", "committedDate": "2020-08-21T21:19:40Z", "type": "commit"}, {"oid": "3b7f3301d5cc50a31266a2998da545af763afe27", "url": "https://github.com/FAForever/downlords-faf-client/commit/3b7f3301d5cc50a31266a2998da545af763afe27", "message": "Make card hoverable", "committedDate": "2020-08-22T08:28:57Z", "type": "commit"}, {"oid": "d1d6e3ac657f3a3b22acd5ade432d1ad2c65f830", "url": "https://github.com/FAForever/downlords-faf-client/commit/d1d6e3ac657f3a3b22acd5ade432d1ad2c65f830", "message": "Fix window not restoring correctly", "committedDate": "2020-08-27T18:05:18Z", "type": "commit"}, {"oid": "d1d6e3ac657f3a3b22acd5ade432d1ad2c65f830", "url": "https://github.com/FAForever/downlords-faf-client/commit/d1d6e3ac657f3a3b22acd5ade432d1ad2c65f830", "message": "Fix window not restoring correctly", "committedDate": "2020-08-27T18:05:18Z", "type": "forcePushed"}]}