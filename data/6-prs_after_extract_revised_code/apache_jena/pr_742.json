{"pr_number": 742, "pr_title": "JENA-1881: Support RDF* triple terms in SPARQL XML results", "pr_createdAt": "2020-05-11T18:01:53Z", "pr_url": "https://github.com/apache/jena/pull/742", "timeline": [{"oid": "e87a8729f7416f183f0cd82819ab2ec0b5ed9d56", "url": "https://github.com/apache/jena/commit/e87a8729f7416f183f0cd82819ab2ec0b5ed9d56", "message": "JENA-1881: Support RDF* triple terms in SPARQL XML results", "committedDate": "2020-05-11T17:58:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2MzEzMQ==", "url": "https://github.com/apache/jena/pull/742#discussion_r423363131", "bodyText": "Extra white space", "author": "kinow", "createdAt": "2020-05-11T22:47:46Z", "path": "jena-arq/src/main/java/org/apache/jena/riot/resultset/rw/ResultSetWriterXML.java", "diffHunk": "@@ -253,84 +254,138 @@ public void binding(String varName, RDFNode node) {\n             out.print(varName);\n             out.println(\"\\\">\");\n             out.incIndent(INDENT);\n-            printBindingValue(node);\n+            printBindingValue(rdfNode);\n             out.decIndent(INDENT);\n             out.print(\"</\");\n             out.print(dfBinding);\n             out.println(\">\");\n         }\n \n-        void printBindingValue(RDFNode node) {\n-            if ( node == null ) {\n+        private void printBindingValue(RDFNode rdfNode) {\n+            if ( rdfNode == null ) {\n                 // Unbound\n                 out.print(\"<\");\n                 out.print(dfUnbound);\n                 out.println(\"/>\");\n                 return;\n             }\n \n-            if ( node instanceof Literal ) {\n-                printLiteral((Literal)node);\n+            Node node = rdfNode.asNode();\n+            printBindingValue(node);\n+        }\n+        \n+        private void printBindingValue(Node node) {\n+            if ( node == null )\n+                return;\n+        \n+            if ( node.isLiteral() ) {\n+                printLiteral(node);\n                 return;\n             }\n \n-            if ( node instanceof Resource ) {\n-                printResource((Resource)node);\n+            if ( node.isURI() ) {\n+                printURI(node);\n+                return;\n+            }\n+            \n+            if ( node.isBlank() ) {\n+                printBlankNode(node);\n+                return;\n+            }\n+            if ( node.isNodeTriple() ) {\n+                printTripleTerm(node);\n                 return;\n             }\n+            \n+            if ( node.isNodeGraph() )\n+                throw new UnsupportedOperationException(\"Graph terms\");\n \n-            Log.warn(this, \"Unknown RDFNode type in result set: \" + node.getClass());\n+            Log.warn(this, \"Unknown RDFNode type in result set: \" + node);\n         }\n \n-        void printLiteral(Literal literal) {\n+        private void printURI(Node nodeURI) {\n+            String uri = nodeURI.getURI();\n             out.print(\"<\");\n-            out.print(dfLiteral);\n+            out.print(dfURI);\n+            out.print(\">\");\n+            out.print(xml_escape(uri));\n+            out.print(\"</\");\n+            out.print(dfURI);\n+            out.println(\">\");\n+        }            \n+            \n+        private void printBlankNode(Node node) {\n+            String label = bNodeMap.get(null, node);\n+            // Comes with leading \"_:\"\n+            label = label.substring(2);\n+            out.print(\"<\");\n+            out.print(dfBNode);\n+            out.print(\">\");\n+            out.print(xml_escape(label));\n+            out.print(\"</\");\n+            out.print(dfBNode);\n+            out.println(\">\");\n+        }\n \n+        private void printLiteral(Node literal) {\n+            out.print(\"<\");\n+            out.print(dfLiteral);\n+        \n             if ( Util.isLangString(literal) ) {\n-                String lang = literal.getLanguage();\n+                String lang = literal.getLiteralLanguage();\n                 out.print(\" xml:lang=\\\"\");\n-                out.print(literal.getLanguage());\n+                out.print(lang);\n                 out.print(\"\\\"\");\n             } else if ( !Util.isSimpleString(literal) ) {\n                 // Datatype\n                 // (RDF 1.1) not xsd:string nor rdf:langString.\n                 // (RDF 1.0) any datatype.\n-                String datatype = literal.getDatatypeURI();\n+                String datatype = literal.getLiteralDatatypeURI();\n                 out.print(\" \");\n                 out.print(dfAttrDatatype);\n                 out.print(\"=\\\"\");\n                 out.print(datatype);\n                 out.print(\"\\\"\");\n             }\n-\n+        ", "originalCommit": "e87a8729f7416f183f0cd82819ab2ec0b5ed9d56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU2MDEwNg==", "url": "https://github.com/apache/jena/pull/742#discussion_r423560106", "bodyText": "I didn't remove all trailing WS because it is all over the place.", "author": "afs", "createdAt": "2020-05-12T08:36:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2MzEzMQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2Mzg3MA==", "url": "https://github.com/apache/jena/pull/742#discussion_r423363870", "bodyText": "The new methods openTag/closeTag cannot be used in printBlankNode too, as in printTripleTerm? (asking because I noticed that method also increments indentation, so maybe not supposed to be always used?)", "author": "kinow", "createdAt": "2020-05-11T22:50:03Z", "path": "jena-arq/src/main/java/org/apache/jena/riot/resultset/rw/ResultSetWriterXML.java", "diffHunk": "@@ -253,84 +254,138 @@ public void binding(String varName, RDFNode node) {\n             out.print(varName);\n             out.println(\"\\\">\");\n             out.incIndent(INDENT);\n-            printBindingValue(node);\n+            printBindingValue(rdfNode);\n             out.decIndent(INDENT);\n             out.print(\"</\");\n             out.print(dfBinding);\n             out.println(\">\");\n         }\n \n-        void printBindingValue(RDFNode node) {\n-            if ( node == null ) {\n+        private void printBindingValue(RDFNode rdfNode) {\n+            if ( rdfNode == null ) {\n                 // Unbound\n                 out.print(\"<\");\n                 out.print(dfUnbound);\n                 out.println(\"/>\");\n                 return;\n             }\n \n-            if ( node instanceof Literal ) {\n-                printLiteral((Literal)node);\n+            Node node = rdfNode.asNode();\n+            printBindingValue(node);\n+        }\n+        \n+        private void printBindingValue(Node node) {\n+            if ( node == null )\n+                return;\n+        \n+            if ( node.isLiteral() ) {\n+                printLiteral(node);\n                 return;\n             }\n \n-            if ( node instanceof Resource ) {\n-                printResource((Resource)node);\n+            if ( node.isURI() ) {\n+                printURI(node);\n+                return;\n+            }\n+            \n+            if ( node.isBlank() ) {\n+                printBlankNode(node);\n+                return;\n+            }\n+            if ( node.isNodeTriple() ) {\n+                printTripleTerm(node);\n                 return;\n             }\n+            \n+            if ( node.isNodeGraph() )\n+                throw new UnsupportedOperationException(\"Graph terms\");\n \n-            Log.warn(this, \"Unknown RDFNode type in result set: \" + node.getClass());\n+            Log.warn(this, \"Unknown RDFNode type in result set: \" + node);\n         }\n \n-        void printLiteral(Literal literal) {\n+        private void printURI(Node nodeURI) {\n+            String uri = nodeURI.getURI();\n             out.print(\"<\");\n-            out.print(dfLiteral);\n+            out.print(dfURI);\n+            out.print(\">\");\n+            out.print(xml_escape(uri));\n+            out.print(\"</\");\n+            out.print(dfURI);\n+            out.println(\">\");\n+        }            \n+            \n+        private void printBlankNode(Node node) {\n+            String label = bNodeMap.get(null, node);\n+            // Comes with leading \"_:\"\n+            label = label.substring(2);\n+            out.print(\"<\");\n+            out.print(dfBNode);\n+            out.print(\">\");", "originalCommit": "e87a8729f7416f183f0cd82819ab2ec0b5ed9d56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU2MTExOA==", "url": "https://github.com/apache/jena/pull/742#discussion_r423561118", "bodyText": "The XML results writer is very, very, very old! I can't even track its history in git properly.\nThe new openTag/closeTag made writing the nested structures for printTripleTerm.\nI tried to limit the scope of changes and not do a whole-class clear-up, though I was sorely tempted to because the code is very un-DRY.", "author": "afs", "createdAt": "2020-05-12T08:37:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2Mzg3MA=="}], "type": "inlineReview", "revised_code": null}]}