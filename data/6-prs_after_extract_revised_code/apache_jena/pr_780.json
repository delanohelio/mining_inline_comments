{"pr_number": 780, "pr_title": "JENA-1929: Detect and use TDB database type for existing database.", "pr_createdAt": "2020-08-11T19:11:43Z", "pr_url": "https://github.com/apache/jena/pull/780", "timeline": [{"oid": "260793723dc78d4590925ff4b6ba5f3a34d2b096", "url": "https://github.com/apache/jena/commit/260793723dc78d4590925ff4b6ba5f3a34d2b096", "message": "JENA-1929: Detect and use TDB database type for existing database.", "committedDate": "2020-08-11T19:15:39Z", "type": "forcePushed"}, {"oid": "ecab7675c0698c2fe08718737d96d49fe853f654", "url": "https://github.com/apache/jena/commit/ecab7675c0698c2fe08718737d96d49fe853f654", "message": "JENA-1929: Detect and use TDB database type for existing database.", "committedDate": "2020-08-11T21:05:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkwOTI3OQ==", "url": "https://github.com/apache/jena/pull/780#discussion_r468909279", "bodyText": "The simplified if looks good to me. Maybe we won't need this commented code any longer?", "author": "kinow", "createdAt": "2020-08-11T22:54:38Z", "path": "jena-fuseki2/jena-fuseki-webapp/src/main/java/org/apache/jena/fuseki/webapp/FusekiWebapp.java", "diffHunk": "@@ -284,13 +287,15 @@ private static DataAccessPoint configFromTemplate(String templateFile, String da\n         Fuseki.configLog.info(\"Template file: \" + templateFile);\n         String dir = params.get(Template.DIR);\n         if ( dir != null ) {\n-            if ( Objects.equals(dir, Names.memName) ) {\n-                Fuseki.configLog.info(\"TDB dataset: in-memory\");\n-            } else {\n-                if ( !FileOps.exists(dir) )\n-                    throw new CmdException(\"Directory not found: \" + dir);\n-                Fuseki.configLog.info(\"TDB dataset: directory=\" + dir);\n-            }\n+            if ( ! Objects.equals(dir, Names.memName) && !FileOps.exists(dir) )\n+                throw new CmdException(\"Directory not found: \" + dir);\n+//            if ( Objects.equals(dir, Names.memName) ) {\n+//                Fuseki.configLog.info(\"TDB dataset: in-memory\");\n+//            } else {\n+//                if ( !FileOps.exists(dir) )\n+//                    throw new CmdException(\"Directory not found: \" + dir);\n+//                Fuseki.configLog.info(\"TDB dataset: directory=\" + dir);\n+//            }", "originalCommit": "ecab7675c0698c2fe08718737d96d49fe853f654", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEzNjkwNw==", "url": "https://github.com/apache/jena/pull/780#discussion_r471136907", "bodyText": "Done!", "author": "afs", "createdAt": "2020-08-16T17:21:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkwOTI3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "796b064b84f258c2d448361580d075b7426f9c5d", "chunk": "diff --git a/jena-fuseki2/jena-fuseki-webapp/src/main/java/org/apache/jena/fuseki/webapp/FusekiWebapp.java b/jena-fuseki2/jena-fuseki-webapp/src/main/java/org/apache/jena/fuseki/webapp/FusekiWebapp.java\nindex ad7fddf45d..fd963ed275 100644\n--- a/jena-fuseki2/jena-fuseki-webapp/src/main/java/org/apache/jena/fuseki/webapp/FusekiWebapp.java\n+++ b/jena-fuseki2/jena-fuseki-webapp/src/main/java/org/apache/jena/fuseki/webapp/FusekiWebapp.java\n\n@@ -289,13 +289,6 @@ public class FusekiWebapp\n         if ( dir != null ) {\n             if ( ! Objects.equals(dir, Names.memName) && !FileOps.exists(dir) )\n                 throw new CmdException(\"Directory not found: \" + dir);\n-//            if ( Objects.equals(dir, Names.memName) ) {\n-//                Fuseki.configLog.info(\"TDB dataset: in-memory\");\n-//            } else {\n-//                if ( !FileOps.exists(dir) )\n-//                    throw new CmdException(\"Directory not found: \" + dir);\n-//                Fuseki.configLog.info(\"TDB dataset: directory=\" + dir);\n-//            }\n         }\n         //-- Logging\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkxMTE1MQ==", "url": "https://github.com/apache/jena/pull/780#discussion_r468911151", "bodyText": "Would it make sense to combine cmds/DSGSetup and this DSGSetup? Or maybe add a comment saying that that one is for ServerConfig, and this one for FusekiArgs?", "author": "kinow", "createdAt": "2020-08-11T23:00:18Z", "path": "jena-fuseki2/jena-fuseki-webapp/src/main/java/org/apache/jena/fuseki/cmd/DSGSetup.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.jena.fuseki.cmd;\n+\n+import jena.cmd.CmdException;\n+import org.apache.jena.atlas.io.IO;\n+import org.apache.jena.fuseki.mgt.Template;\n+import org.apache.jena.fuseki.system.spot.TDBOps;\n+\n+public class DSGSetup {", "originalCommit": "ecab7675c0698c2fe08718737d96d49fe853f654", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEzNjg5Ng==", "url": "https://github.com/apache/jena/pull/780#discussion_r471136896", "bodyText": "Good point. renamed one and also made them package scoped.", "author": "afs", "createdAt": "2020-08-16T17:21:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkxMTE1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "796b064b84f258c2d448361580d075b7426f9c5d", "chunk": "diff --git a/jena-fuseki2/jena-fuseki-webapp/src/main/java/org/apache/jena/fuseki/cmd/DSGSetup.java b/jena-fuseki2/jena-fuseki-webapp/src/main/java/org/apache/jena/fuseki/cmd/WebappDSGSetup.java\nsimilarity index 98%\nrename from jena-fuseki2/jena-fuseki-webapp/src/main/java/org/apache/jena/fuseki/cmd/DSGSetup.java\nrename to jena-fuseki2/jena-fuseki-webapp/src/main/java/org/apache/jena/fuseki/cmd/WebappDSGSetup.java\nindex a34b2f2b21..2aead286bd 100644\n--- a/jena-fuseki2/jena-fuseki-webapp/src/main/java/org/apache/jena/fuseki/cmd/DSGSetup.java\n+++ b/jena-fuseki2/jena-fuseki-webapp/src/main/java/org/apache/jena/fuseki/cmd/WebappDSGSetup.java\n\n@@ -23,7 +23,7 @@ import org.apache.jena.atlas.io.IO;\n import org.apache.jena.fuseki.mgt.Template;\n import org.apache.jena.fuseki.system.spot.TDBOps;\n \n-public class DSGSetup {\n+public class WebappDSGSetup {\n \n     /**\n      * Given a path name and a preference of TDB1/TDB2 for new databases, return\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkxMjU2Ng==", "url": "https://github.com/apache/jena/pull/780#discussion_r468912566", "bodyText": "I think this is being validated a few lines above already?", "author": "kinow", "createdAt": "2020-08-11T23:04:51Z", "path": "jena-fuseki2/jena-fuseki-core/src/main/java/org/apache/jena/fuseki/system/spot/SpotTDB1.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.jena.fuseki.system.spot;\n+\n+import java.io.IOException;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.apache.jena.atlas.io.IO;\n+import org.apache.jena.tdb.TDBException;\n+import org.apache.jena.tdb.base.file.Location;\n+import org.apache.jena.tdb.setup.StoreParams;\n+import org.apache.jena.tdb.setup.StoreParamsCodec;\n+import org.apache.jena.tdb.sys.Names;\n+\n+class SpotTDB1 {\n+    /* TDB1 layout\n+     *\n+     * GOSP.dat  GSPO.dat      node2id.idn  OSPG.idn  POSG.idn       prefixes.dat   SPOG.dat\n+     * GOSP.idn  GSPO.idn      nodes.dat    OSP.idn   POS.idn        prefixIdx.dat  SPOG.idn\n+     * GPOS.dat  journal.jrnl  OSP.dat      POS.dat   prefix2id.dat  prefixIdx.idn  SPO.idn\n+     * GPOS.idn  node2id.dat   OSPG.dat     POSG.dat  prefix2id.idn  SPO.dat\n+     */\n+\n+    /* StoreParams\n+     * primaryIndexTriples    dft:SPO\n+     * tripleIndexes          dft:[SPO, POS, OSP]\n+     *\n+     * primaryIndexQuads      dft:GSPO\n+     * quadIndexes            dft:[GSPO, GPOS, GOSP, POSG, OSPG, SPOG]\n+     *\n+     * primaryIndexPrefix     dft:GPU\n+     * prefixIndexes          dft:[GPU]\n+     * -- Actual name of GPU index.\n+     * indexPrefix            dft:prefixIdx BPT\n+     *\n+     * -- NodeTable\n+     * indexNode2Id           dft:node2id\n+     * indexId2Node           dft:nodes\n+     *\n+     * -- NodeTable\n+     * prefixNode2Id          dft:prefix2id BPT *\n+     * prefixId2Node          dft:prefixes DAT *\n+     */\n+\n+    /**\n+     * Test to see is a location is either empty (and a fresh TDB1 database can be\n+     * created there) or has looks like it is an existing TDB1 database. See\n+     * {@link #checkTDB1(Location)} for a test that the location is a valid, existing\n+     * database.\n+     */\n+    public static boolean isTDB1(String pathname) {\n+        return isTDB1(Location.create(pathname));\n+    }\n+\n+    /**\n+     * Test to see is a location is either empty (and a fresh TDB1 database can be\n+     * created there) or has looks like it is an existing TDB1 database. See\n+     * {@link #checkTDB1(Location)} for a test that the location is a valid, existing\n+     * database.\n+     */\n+    public static boolean isTDB1(Location location) {\n+        if ( location.isMem() )\n+            return true;\n+\n+        if ( ! location.exists() )\n+            return false;\n+        if ( isEmpty(location) )\n+            return true;\n+\n+        // Very occasionally, deleting the journal makes sense.\n+\n+        return isTDB1_Storage(location);\n+    }\n+\n+    /** Quick check for TDB1. Does not check for validity. */\n+    private static boolean isTDB1_Storage(Location location) {\n+        // Has a journal.\n+        //return exists(location, Names.journalFileBase, Names.extJournal);\n+        // Test for triples primary index\n+        StoreParams params = getStoreParams(location);\n+        return exists(location, params.getPrimaryIndexTriples(), Names.bptExtTree, Names.bptExtRecords);\n+    }\n+\n+    /**\n+     * Check all files exist for a TDB1 database, or the area is empty (and so a new\n+     * database can be created in the location). Throw an exception if a file\n+     * is missing.\n+     */\n+    public static void checkTDB1(String pathname) {\n+        checkTDB1(Location.create(pathname));\n+    }\n+\n+    /**\n+     * Check all files exist for a TDB1 database, or the area is empty (and so a new\n+     * database can be created in the location). Throw an exception if a file\n+     * is missing.\n+     */\n+    public static void checkTDB1(Location location) {\n+        if ( location.isMem() )\n+            return;\n+\n+        if ( isEmpty(location) )\n+            return;\n+\n+        // Journal, fixed name.\n+        validate(location, Names.journalFileBase, Names.extJournal);\n+\n+        if ( ! isTDB1(location) )\n+            throw new TDBException(\"Not a TDB1 location: \"+location);\n+\n+        // Places for StoreParams: location or default\n+        StoreParams params = getStoreParams(location);\n+\n+        validate(location, Names.journalFileBase, Names.extJournal);", "originalCommit": "ecab7675c0698c2fe08718737d96d49fe853f654", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEzNjg5NA==", "url": "https://github.com/apache/jena/pull/780#discussion_r471136894", "bodyText": "Fixed", "author": "afs", "createdAt": "2020-08-16T17:21:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkxMjU2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "796b064b84f258c2d448361580d075b7426f9c5d", "chunk": "diff --git a/jena-fuseki2/jena-fuseki-core/src/main/java/org/apache/jena/fuseki/system/spot/SpotTDB1.java b/jena-fuseki2/jena-fuseki-core/src/main/java/org/apache/jena/fuseki/system/spot/SpotTDB1.java\nindex b37e055e32..5da5933b83 100644\n--- a/jena-fuseki2/jena-fuseki-core/src/main/java/org/apache/jena/fuseki/system/spot/SpotTDB1.java\n+++ b/jena-fuseki2/jena-fuseki-core/src/main/java/org/apache/jena/fuseki/system/spot/SpotTDB1.java\n\n@@ -88,14 +88,12 @@ class SpotTDB1 {\n         if ( isEmpty(location) )\n             return true;\n \n-        // Very occasionally, deleting the journal makes sense.\n-\n         return isTDB1_Storage(location);\n     }\n \n     /** Quick check for TDB1. Does not check for validity. */\n     private static boolean isTDB1_Storage(Location location) {\n-        // Has a journal.\n+        // Very occasionally, deleting the journal makes sense.\n         //return exists(location, Names.journalFileBase, Names.extJournal);\n         // Test for triples primary index\n         StoreParams params = getStoreParams(location);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkxMjkxNw==", "url": "https://github.com/apache/jena/pull/780#discussion_r468912917", "bodyText": "Repeated validation? \u261d\ufe0f", "author": "kinow", "createdAt": "2020-08-11T23:05:57Z", "path": "jena-fuseki2/jena-fuseki-core/src/main/java/org/apache/jena/fuseki/system/spot/SpotTDB2.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.jena.fuseki.system.spot;\n+\n+import java.io.IOException;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.apache.jena.atlas.io.IO;\n+import org.apache.jena.dboe.base.file.Location;\n+import org.apache.jena.dboe.sys.Names;\n+import org.apache.jena.tdb2.TDBException;\n+import org.apache.jena.tdb2.params.StoreParams;\n+import org.apache.jena.tdb2.params.StoreParamsCodec;\n+import org.apache.jena.tdb2.sys.DatabaseOps;\n+import org.apache.jena.tdb2.sys.IOX;\n+import org.apache.jena.tdb2.sys.Util;\n+\n+class SpotTDB2 {\n+\n+    /* TDB2 layout\n+     * top:\n+     *\n+     * Data-0001/  tdb.lock\n+     *\n+     * Data-0001:\n+     * GOSP.bpt  GPU.dat       nodes.dat       OSPG.dat  POSG.idn           SPO.bpt\n+     * GOSP.dat  GPU.idn       nodes-data.bdf  OSPG.idn  POS.idn            SPO.dat\n+     * GOSP.idn  GSPO.bpt      nodes-data.obj  OSP.idn   prefixes.bpt       SPOG.bpt\n+     * GPOS.bpt  GSPO.dat      nodes.idn       POS.bpt   prefixes.dat       SPOG.dat\n+     * GPOS.dat  GSPO.idn      OSP.bpt         POS.dat   prefixes-data.bdf  SPOG.idn\n+     * GPOS.idn  journal.jrnl  OSP.dat         POSG.bpt  prefixes-data.obj  SPO.idn\n+     * GPU.bpt   nodes.bpt     OSPG.bpt        POSG.dat  prefixes.idn       tdb.lock\n+     */\n+//\n+//    // TEMP\n+//    // These are in DatabaseOps\n+//    private static final String dbPrefix     = \"Data\";\n+//    private static final String SEP          = \"-\";\n+\n+    public static boolean isTDB2(String pathname) {\n+        return isTDB2(Location.create(pathname));\n+    }\n+\n+    /**\n+     * Test to see is a location is either empty (and a fresh TDB2 database can be\n+     * created there) or has looks like it is an existing TDB2 database.\n+     * See {@link #checkTDB2(Location)} for a test that the location is a valid, existing\n+     * database.\n+     */\n+    public static boolean isTDB2(Location location) {\n+        if ( location.isMem() )\n+            return true;\n+        if ( ! location.exists() )\n+            return false;\n+        if ( isEmpty(location) )\n+            return true;\n+        // Look for Data-*\n+        Path db = storageDir(location);\n+        if ( db == null )\n+            // Uninitialized?\n+            // Or TDB1?\n+            return ! SpotTDB1.isTDB1(location.getDirectoryPath());\n+        // Validate storage.\n+        Location storageLocation = IOX.asLocation(db);\n+        return isTDB2_Storage(storageLocation);\n+    }\n+\n+    /** Quick check for TDB2. Does not check for validity. */\n+    private static boolean isTDB2_Storage(Location location) {\n+        // Journal check.\n+        //return exists(location, Names.journalFileBase, Names.extJournal);\n+        // Test for triples primary index\n+        StoreParams params = getStoreParams(location);\n+        return exists(location, params.getPrimaryIndexTriples(),\n+            Names.extBptTree, Names.extBptRecords, Names.extBptState);\n+    }\n+\n+    public static void checkTDB2(String pathname) {\n+        checkTDB2(Location.create(pathname));\n+    }\n+\n+    public static void checkTDB2(Location location) {\n+        if ( location.isMem() )\n+            return;\n+        if ( isEmpty(location) )\n+            return;\n+        Path db = storageDir(location);\n+        if ( db == null )\n+            // Uninitialized\n+            return ;\n+        // Storage. Easier to work in \"Location\".\n+        Location locStorage = Location.create(db);\n+        checkStorageArea(locStorage);\n+    }\n+\n+    /** Return the current active database area within a database directory. */\n+    private static Path storageDir(Location location) {\n+        // Database directory\n+        Path path = IOX.asPath(location);\n+        // Storage directory in database directory.\n+        Path db = findLocation(path, DatabaseOps.dbPrefix);\n+        return db;\n+    }\n+\n+    private static Path findLocation(Path directory, String namebase) {\n+        if ( ! Files.exists(directory) )\n+            return null;\n+        // In-order, low to high.\n+        List<Path> maybe = IOX.scanForDirByPattern(directory, namebase, DatabaseOps.SEP);\n+        return Util.getLastOrNull(maybe);\n+    }\n+\n+    // Places for StoreParams: location or default\n+    private static StoreParams getStoreParams(Location location) {\n+        StoreParams params = StoreParamsCodec.read(location);\n+        if ( params == null )\n+            params = StoreParams.getDftStoreParams();\n+        return params;\n+    }\n+\n+    /**\n+     * Check all files exist for a TDB2 database, or the area is empty (and so a new\n+     * database can be created in the location). Throw {@link TDBException} is a file\n+     * is missing.\n+     */\n+    private static void checkStorageArea(Location location) {\n+\n+        if ( location.isMem() )\n+            return;\n+\n+        if ( isEmpty(location) )\n+            return;\n+\n+        // Journal, fixed name.\n+        validate(location, Names.journalFileBase, Names.extJournal);\n+\n+        // Places for StoreParams: location or default\n+        StoreParams params = getStoreParams(location);\n+\n+        validate(location, Names.journalFileBase, Names.extJournal);", "originalCommit": "ecab7675c0698c2fe08718737d96d49fe853f654", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEzNjg4OQ==", "url": "https://github.com/apache/jena/pull/780#discussion_r471136889", "bodyText": "Fixed.", "author": "afs", "createdAt": "2020-08-16T17:21:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkxMjkxNw=="}], "type": "inlineReview", "revised_code": {"commit": "796b064b84f258c2d448361580d075b7426f9c5d", "chunk": "diff --git a/jena-fuseki2/jena-fuseki-core/src/main/java/org/apache/jena/fuseki/system/spot/SpotTDB2.java b/jena-fuseki2/jena-fuseki-core/src/main/java/org/apache/jena/fuseki/system/spot/SpotTDB2.java\nindex dca114ff3b..5e16493c40 100644\n--- a/jena-fuseki2/jena-fuseki-core/src/main/java/org/apache/jena/fuseki/system/spot/SpotTDB2.java\n+++ b/jena-fuseki2/jena-fuseki-core/src/main/java/org/apache/jena/fuseki/system/spot/SpotTDB2.java\n\n@@ -158,8 +158,6 @@ class SpotTDB2 {\n         // Places for StoreParams: location or default\n         StoreParams params = getStoreParams(location);\n \n-        validate(location, Names.journalFileBase, Names.extJournal);\n-\n         // Check for indexes\n         containsIndex(params.getPrimaryIndexTriples(), params.getTripleIndexes());\n         validateBPT(location, params.getTripleIndexes());\n"}}, {"oid": "796b064b84f258c2d448361580d075b7426f9c5d", "url": "https://github.com/apache/jena/commit/796b064b84f258c2d448361580d075b7426f9c5d", "message": "JENA-1929: Detect and use TDB database type for existing database.", "committedDate": "2020-08-16T17:21:36Z", "type": "forcePushed"}, {"oid": "655e605cbe219e929707931c160f90d8896b3ec5", "url": "https://github.com/apache/jena/commit/655e605cbe219e929707931c160f90d8896b3ec5", "message": "JENA-1929: Detect and use TDB database type for existing database.", "committedDate": "2020-08-16T17:32:27Z", "type": "commit"}, {"oid": "655e605cbe219e929707931c160f90d8896b3ec5", "url": "https://github.com/apache/jena/commit/655e605cbe219e929707931c160f90d8896b3ec5", "message": "JENA-1929: Detect and use TDB database type for existing database.", "committedDate": "2020-08-16T17:32:27Z", "type": "forcePushed"}]}