{"pr_number": 870, "pr_title": "JENA-2002: Add public getters to SHACL constraint implementations", "pr_createdAt": "2020-11-24T19:00:48Z", "pr_url": "https://github.com/apache/jena/pull/870", "timeline": [{"oid": "80e7db1ab7c966e3f8c9c3ba156a7a63b5d2c0db", "url": "https://github.com/apache/jena/commit/80e7db1ab7c966e3f8c9c3ba156a7a63b5d2c0db", "message": "Add public getters to SHACL constraint implementations\n\nAs documented in https://issues.apache.org/jira/browse/JENA-2002, this commit adds public getters for accessing internal data in SHACL constraints.", "committedDate": "2020-11-24T18:54:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0MDkzMA==", "url": "https://github.com/apache/jena/pull/870#discussion_r529840930", "bodyText": "Not sure if there's any risk here (or in the other getters that return objects and lists) to have concurrency issues. If so, we could copy the underlying object/collection.", "author": "kinow", "createdAt": "2020-11-24T19:55:42Z", "path": "jena-shacl/src/main/java/org/apache/jena/shacl/engine/constraint/ConstraintComponentSPARQL.java", "diffHunk": "@@ -59,6 +59,18 @@ public ConstraintComponentSPARQL(SparqlComponent sparqlConstraintComponent,\n         }\n     }\n \n+    public SparqlComponent getSparqlConstraintComponent() {\n+        return sparqlConstraintComponent;\n+    }\n+\n+    public Multimap<Parameter, Node> getParameterMap() {\n+        return parameterMap;", "originalCommit": "80e7db1ab7c966e3f8c9c3ba156a7a63b5d2c0db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0ODIxNQ==", "url": "https://github.com/apache/jena/pull/870#discussion_r529848215", "bodyText": "Yes, it does matter. .equals relies on all parts of the shape and shapes go into datastructures so hashCode and equals must be stable. A Collections.unmodifiable (on \"get\" or in the constructor, not sure which is better) or a structure copy is needed. The current code probably isn't perfect.\nOr documentation!\nAnother to look at is whether internal calculated members should be made public.", "author": "afs", "createdAt": "2020-11-24T20:09:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0MDkzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI1Mzc0Nw==", "url": "https://github.com/apache/jena/pull/870#discussion_r530253747", "bodyText": "Sorry, good catch. I think wrapping with unmodifiable collections or cloning in the getter should do. I'll add another commit.", "author": "fkleedorfer", "createdAt": "2020-11-25T10:10:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0MDkzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI1NjY4OQ==", "url": "https://github.com/apache/jena/pull/870#discussion_r530256689", "bodyText": "For the Multimap in ConstraintComponentSPARQL I am not sure how to proceed, I think it's best to revert the change on that one.", "author": "fkleedorfer", "createdAt": "2020-11-25T10:14:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0MDkzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI2OTAxNg==", "url": "https://github.com/apache/jena/pull/870#discussion_r530269016", "bodyText": "For the Multimap in ConstraintComponentSPARQL I am not sure how to proceed, I think it's best to revert the change on that one.\n\nIf that's OK for you for now, then all good :-)", "author": "kinow", "createdAt": "2020-11-25T10:33:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0MDkzMA=="}], "type": "inlineReview", "revised_code": {"commit": "d18a98ac109d71e16f4f41f42f5d5c682c95ac16", "chunk": "diff --git a/jena-shacl/src/main/java/org/apache/jena/shacl/engine/constraint/ConstraintComponentSPARQL.java b/jena-shacl/src/main/java/org/apache/jena/shacl/engine/constraint/ConstraintComponentSPARQL.java\nindex b8da2a3a58..150d49ea14 100644\n--- a/jena-shacl/src/main/java/org/apache/jena/shacl/engine/constraint/ConstraintComponentSPARQL.java\n+++ b/jena-shacl/src/main/java/org/apache/jena/shacl/engine/constraint/ConstraintComponentSPARQL.java\n\n@@ -59,18 +59,6 @@ public class ConstraintComponentSPARQL implements Constraint {\n         }\n     }\n \n-    public SparqlComponent getSparqlConstraintComponent() {\n-        return sparqlConstraintComponent;\n-    }\n-\n-    public Multimap<Parameter, Node> getParameterMap() {\n-        return parameterMap;\n-    }\n-\n-    public Query getQuery() {\n-        return query;\n-    }\n-\n     @Override\n     public void validateNodeShape(ValidationContext vCxt, Graph data, Shape shape, Node focusNode) {\n         SparqlValidation.validate(vCxt, data, shape, focusNode, null, focusNode, query, parameterMap,\n"}}, {"oid": "d18a98ac109d71e16f4f41f42f5d5c682c95ac16", "url": "https://github.com/apache/jena/commit/d18a98ac109d71e16f4f41f42f5d5c682c95ac16", "message": "Change getters on SHACL Constraints to return unmodifiable / cloned data", "committedDate": "2020-11-25T10:24:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYyMTQwMQ==", "url": "https://github.com/apache/jena/pull/870#discussion_r533621401", "bodyText": "Not sure if this the best thing to do. The subclass for max and min already have accessors.\nBeing an abstract class, CardinalityConstraint can't be created directly.\n\"MaxCount\" have a \"getMinCount\" function is a bit strange. If there were a general min and max at the same time constraint, then on the superclass would make more sense but there isn't.\nPlease remove theses and use overrides in the subclasses.", "author": "afs", "createdAt": "2020-12-01T18:13:58Z", "path": "jena-shacl/src/main/java/org/apache/jena/shacl/engine/constraint/CardinalityConstraint.java", "diffHunk": "@@ -38,7 +38,15 @@ public void validateNodeShape(ValidationContext vCxt, Graph data, Shape shape, N\n         // Node shape with cardinality. Can this usefully be checked for in the parser?\n         throw new ShaclParseException(\"Cardinality constraint on a node shape\");\n     }\n-    \n+\n+    public int getMinCount(){", "originalCommit": "d18a98ac109d71e16f4f41f42f5d5c682c95ac16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDcxNzU3NQ==", "url": "https://github.com/apache/jena/pull/870#discussion_r534717575", "bodyText": "ok", "author": "fkleedorfer", "createdAt": "2020-12-03T06:16:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYyMTQwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "6517871a5736e6283e37e0d3c393b1d3a2b88f80", "chunk": "diff --git a/jena-shacl/src/main/java/org/apache/jena/shacl/engine/constraint/CardinalityConstraint.java b/jena-shacl/src/main/java/org/apache/jena/shacl/engine/constraint/CardinalityConstraint.java\nindex 69c7112e1d..13745bad44 100644\n--- a/jena-shacl/src/main/java/org/apache/jena/shacl/engine/constraint/CardinalityConstraint.java\n+++ b/jena-shacl/src/main/java/org/apache/jena/shacl/engine/constraint/CardinalityConstraint.java\n\n@@ -39,14 +39,6 @@ public abstract class CardinalityConstraint extends ConstraintEntity {\n         throw new ShaclParseException(\"Cardinality constraint on a node shape\");\n     }\n \n-    public int getMinCount(){\n-        return minCount;\n-    }\n-\n-    public int getMaxCount(){\n-        return maxCount;\n-    }\n-\n     // -1 => no test\n     protected CardinalityConstraint(int minCardinality, int maxCardinality) {\n         this.minCount = minCardinality;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYyMjczMA==", "url": "https://github.com/apache/jena/pull/870#discussion_r533622730", "bodyText": "Minor: \"generateViolation\" read better.", "author": "afs", "createdAt": "2020-12-01T18:16:06Z", "path": "jena-shacl/src/main/java/org/apache/jena/shacl/engine/constraint/JViolationConstraint.java", "diffHunk": "@@ -35,6 +35,10 @@ public JViolationConstraint(boolean generateViolation) {\n         this.generateViolation = generateViolation;\n     }\n \n+    public boolean isGenerateViolation() {", "originalCommit": "d18a98ac109d71e16f4f41f42f5d5c682c95ac16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDcyMjkxOQ==", "url": "https://github.com/apache/jena/pull/870#discussion_r534722919", "bodyText": "going with generatesViolation()?", "author": "fkleedorfer", "createdAt": "2020-12-03T06:22:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYyMjczMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ0NTY1OQ==", "url": "https://github.com/apache/jena/pull/870#discussion_r535445659", "bodyText": "Yes", "author": "afs", "createdAt": "2020-12-03T17:41:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYyMjczMA=="}], "type": "inlineReview", "revised_code": {"commit": "6517871a5736e6283e37e0d3c393b1d3a2b88f80", "chunk": "diff --git a/jena-shacl/src/main/java/org/apache/jena/shacl/engine/constraint/JViolationConstraint.java b/jena-shacl/src/main/java/org/apache/jena/shacl/engine/constraint/JViolationConstraint.java\nindex 2d54c08fa5..e44e2b30cc 100644\n--- a/jena-shacl/src/main/java/org/apache/jena/shacl/engine/constraint/JViolationConstraint.java\n+++ b/jena-shacl/src/main/java/org/apache/jena/shacl/engine/constraint/JViolationConstraint.java\n\n@@ -35,7 +35,7 @@ public class JViolationConstraint extends ConstraintTerm {\n         this.generateViolation = generateViolation;\n     }\n \n-    public boolean isGenerateViolation() {\n+    public boolean generatesViolation() {\n         return generateViolation;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYyNTEwNw==", "url": "https://github.com/apache/jena/pull/870#discussion_r533625107", "bodyText": "Minor: I'd prefer not the Pattern because it is an internal term, and then have the pattern string as getPattern().\nIt is exposing the information once, not in two different ways.", "author": "afs", "createdAt": "2020-12-01T18:19:51Z", "path": "jena-shacl/src/main/java/org/apache/jena/shacl/engine/constraint/PatternConstraint.java", "diffHunk": "@@ -53,6 +53,18 @@ public PatternConstraint(String pattern, String flagsStr) {\n         this.pattern = Pattern.compile(pattern, flags);\n     }\n \n+    public Pattern getPattern() {", "originalCommit": "d18a98ac109d71e16f4f41f42f5d5c682c95ac16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDcyOTkwMg==", "url": "https://github.com/apache/jena/pull/870#discussion_r534729902", "bodyText": "ok", "author": "fkleedorfer", "createdAt": "2020-12-03T06:29:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYyNTEwNw=="}], "type": "inlineReview", "revised_code": {"commit": "6517871a5736e6283e37e0d3c393b1d3a2b88f80", "chunk": "diff --git a/jena-shacl/src/main/java/org/apache/jena/shacl/engine/constraint/PatternConstraint.java b/jena-shacl/src/main/java/org/apache/jena/shacl/engine/constraint/PatternConstraint.java\nindex 49dd37085a..9384599f26 100644\n--- a/jena-shacl/src/main/java/org/apache/jena/shacl/engine/constraint/PatternConstraint.java\n+++ b/jena-shacl/src/main/java/org/apache/jena/shacl/engine/constraint/PatternConstraint.java\n\n@@ -53,11 +53,7 @@ public class PatternConstraint extends ConstraintTerm {\n         this.pattern = Pattern.compile(pattern, flags);\n     }\n \n-    public Pattern getPattern() {\n-        return pattern;\n-    }\n-\n-    public String getPatternString() {\n+    public String getPattern() {\n         return patternString;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYyNjAzNA==", "url": "https://github.com/apache/jena/pull/870#discussion_r533626034", "bodyText": "AutoCase does not work out! And \"Q\" does work that well either! How about public int qMin()?", "author": "afs", "createdAt": "2020-12-01T18:21:19Z", "path": "jena-shacl/src/main/java/org/apache/jena/shacl/engine/constraint/QualifiedValueShape.java", "diffHunk": "@@ -50,6 +50,22 @@ public QualifiedValueShape(Shape sub, int qMin, int qMax, boolean qDisjoint) {\n         this.qDisjoint = qDisjoint;\n     }\n \n+    public Shape getSub() {\n+        return sub;\n+    }\n+\n+    public int getqMin() {", "originalCommit": "d18a98ac109d71e16f4f41f42f5d5c682c95ac16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDczMDkxNQ==", "url": "https://github.com/apache/jena/pull/870#discussion_r534730915", "bodyText": "ok (getQMin() has its merits, but your call)", "author": "fkleedorfer", "createdAt": "2020-12-03T06:30:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYyNjAzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ0NTkzMA==", "url": "https://github.com/apache/jena/pull/870#discussion_r535445930", "bodyText": "Ok", "author": "afs", "createdAt": "2020-12-03T17:41:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYyNjAzNA=="}], "type": "inlineReview", "revised_code": {"commit": "6517871a5736e6283e37e0d3c393b1d3a2b88f80", "chunk": "diff --git a/jena-shacl/src/main/java/org/apache/jena/shacl/engine/constraint/QualifiedValueShape.java b/jena-shacl/src/main/java/org/apache/jena/shacl/engine/constraint/QualifiedValueShape.java\nindex 2a7c3e2de0..4e5831a5a0 100644\n--- a/jena-shacl/src/main/java/org/apache/jena/shacl/engine/constraint/QualifiedValueShape.java\n+++ b/jena-shacl/src/main/java/org/apache/jena/shacl/engine/constraint/QualifiedValueShape.java\n\n@@ -54,15 +54,15 @@ public class QualifiedValueShape implements Constraint {\n         return sub;\n     }\n \n-    public int getqMin() {\n+    public int qMin() {\n         return qMin;\n     }\n \n-    public int getqMax() {\n+    public int qMax() {\n         return qMax;\n     }\n \n-    public boolean isqDisjoint() {\n+    public boolean qDisjoint() {\n         return qDisjoint;\n     }\n \n"}}, {"oid": "6517871a5736e6283e37e0d3c393b1d3a2b88f80", "url": "https://github.com/apache/jena/commit/6517871a5736e6283e37e0d3c393b1d3a2b88f80", "message": "Minor adaptations to SHACL Constraint getters", "committedDate": "2020-12-03T06:33:44Z", "type": "commit"}]}