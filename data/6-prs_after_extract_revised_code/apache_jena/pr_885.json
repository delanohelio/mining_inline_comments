{"pr_number": 885, "pr_title": "Several tickets: JENA-2011 : JENA-2013 :  JENA-2014", "pr_createdAt": "2020-12-11T16:11:14Z", "pr_url": "https://github.com/apache/jena/pull/885", "timeline": [{"oid": "1495ad88eb4fa6ab52f7e866d148cc6999a701e0", "url": "https://github.com/apache/jena/commit/1495ad88eb4fa6ab52f7e866d148cc6999a701e0", "message": "Remove inactive code", "committedDate": "2020-12-11T11:09:13Z", "type": "commit"}, {"oid": "04bae43e5f77778a218639c5d0eb0e6b6740567a", "url": "https://github.com/apache/jena/commit/04bae43e5f77778a218639c5d0eb0e6b6740567a", "message": "JENA-2014: Fix for comparing fractional seconds", "committedDate": "2020-12-11T15:26:14Z", "type": "commit"}, {"oid": "1967e174200af7a355d6ccd3c01a46f9e26f894c", "url": "https://github.com/apache/jena/commit/1967e174200af7a355d6ccd3c01a46f9e26f894c", "message": "JENA-2013: Treat xsd:dateTimeStamp as a derived type of xsd:dateTime", "committedDate": "2020-12-11T15:26:57Z", "type": "commit"}, {"oid": "a254043a14fe916edcfff7c15025f297d986a03f", "url": "https://github.com/apache/jena/commit/a254043a14fe916edcfff7c15025f297d986a03f", "message": "JENA-2011: Handle IPv6 localhost address for Jetty", "committedDate": "2020-12-11T16:33:10Z", "type": "commit"}, {"oid": "a254043a14fe916edcfff7c15025f297d986a03f", "url": "https://github.com/apache/jena/commit/a254043a14fe916edcfff7c15025f297d986a03f", "message": "JENA-2011: Handle IPv6 localhost address for Jetty", "committedDate": "2020-12-11T16:33:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIyMDUzMQ==", "url": "https://github.com/apache/jena/pull/885#discussion_r541220531", "bodyText": "Extra spaces?", "author": "kinow", "createdAt": "2020-12-11T19:53:50Z", "path": "jena-core/src/main/java/org/apache/jena/ext/xerces/jaxp/datatype/DurationImpl.java", "diffHunk": "@@ -832,42 +832,45 @@ public int compare(Duration rhs) {\n \t\t\t\t\t);\n     \t}\n \n-    \t// turn this Duration into a GregorianCalendar\n-    \tGregorianCalendar lhsCalendar = new GregorianCalendar(\n-    \t\t\t1970,\n-\t\t\t\t1,\n-\t\t\t\t1,\n-\t\t\t\t0,\n-\t\t\t\t0,\n-\t\t\t\t0);\n-   \t\tlhsCalendar.add(GregorianCalendar.YEAR, getYears() * getSign());\n-   \t\tlhsCalendar.add(GregorianCalendar.MONTH, getMonths() * getSign());\n-   \t\tlhsCalendar.add(GregorianCalendar.DAY_OF_YEAR, getDays() * getSign());\n-   \t\tlhsCalendar.add(GregorianCalendar.HOUR_OF_DAY, getHours() * getSign());\n-   \t\tlhsCalendar.add(GregorianCalendar.MINUTE, getMinutes() * getSign());\n-   \t\tlhsCalendar.add(GregorianCalendar.SECOND, getSeconds() * getSign());\n-   \t\t\n-   \t\t// turn compare Duration into a GregorianCalendar\n-    \tGregorianCalendar rhsCalendar = new GregorianCalendar(\n-\t\t\t\t1970,\n-\t\t\t\t1,\n-\t\t\t\t1,\n-\t\t\t\t0,\n-\t\t\t\t0,\n-\t\t\t\t0);\n-   \t\trhsCalendar.add(GregorianCalendar.YEAR, rhs.getYears() * rhs.getSign());\n-   \t\trhsCalendar.add(GregorianCalendar.MONTH, rhs.getMonths() * rhs.getSign());\n-   \t\trhsCalendar.add(GregorianCalendar.DAY_OF_YEAR, rhs.getDays() * rhs.getSign());\n-   \t\trhsCalendar.add(GregorianCalendar.HOUR_OF_DAY, rhs.getHours() * rhs.getSign());\n-   \t\trhsCalendar.add(GregorianCalendar.MINUTE, rhs.getMinutes() * rhs.getSign());\n-   \t\trhsCalendar.add(GregorianCalendar.SECOND, rhs.getSeconds() * rhs.getSign());\n-   \t\n-   \t\t\n-   \t\tif (lhsCalendar.equals(rhsCalendar)) {\n-   \t\t\treturn DatatypeConstants.EQUAL;\n-   \t\t}\n-\n-   \t\treturn compareDates(this, rhs);\n+    \tif ( rhsSecondsAsBigDecimal == null || seconds == null ) {\n+    \t    // Jena: change: this only works for durations with no fractional seconds.\n+    \t    // Fix is to only use if no seconds in LHS or RHS.\n+    \t    \n+    \t    // turn this Duration into a GregorianCalendar\n+    \t    GregorianCalendar lhsCalendar = new GregorianCalendar(\n+    \t        1970,\n+    \t        1,\n+    \t        1,\n+    \t        0,\n+    \t        0,\n+    \t        0);\n+    \t    lhsCalendar.add(GregorianCalendar.YEAR, getYears() * getSign());\n+    \t    lhsCalendar.add(GregorianCalendar.MONTH, getMonths() * getSign());\n+    \t    lhsCalendar.add(GregorianCalendar.DAY_OF_YEAR, getDays() * getSign());\n+    \t    lhsCalendar.add(GregorianCalendar.HOUR_OF_DAY, getHours() * getSign());\n+    \t    lhsCalendar.add(GregorianCalendar.MINUTE, getMinutes() * getSign());\n+    \t    lhsCalendar.add(GregorianCalendar.SECOND, getSeconds() * getSign());\n+\n+    \t    // turn compare Duration into a GregorianCalendar\n+    \t    GregorianCalendar rhsCalendar = new GregorianCalendar(\n+    \t        1970,\n+    \t        1,\n+    \t        1,\n+    \t        0,\n+    \t        0,\n+    \t        0);\n+    \t    rhsCalendar.add(GregorianCalendar.YEAR, rhs.getYears() * rhs.getSign());\n+    \t    rhsCalendar.add(GregorianCalendar.MONTH, rhs.getMonths() * rhs.getSign());\n+    \t    rhsCalendar.add(GregorianCalendar.DAY_OF_YEAR, rhs.getDays() * rhs.getSign());\n+    \t    rhsCalendar.add(GregorianCalendar.HOUR_OF_DAY, rhs.getHours() * rhs.getSign());\n+    \t    rhsCalendar.add(GregorianCalendar.MINUTE, rhs.getMinutes() * rhs.getSign());\n+    \t    rhsCalendar.add(GregorianCalendar.SECOND, rhs.getSeconds() * rhs.getSign());\n+\n+    \t    if (lhsCalendar.equals(rhsCalendar)) {\n+    \t        return DatatypeConstants.EQUAL;\n+    \t    }\n+    \t}\n+   \t\treturn compareDuration(this, rhs);", "originalCommit": "a254043a14fe916edcfff7c15025f297d986a03f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU1NTA4OA==", "url": "https://github.com/apache/jena/pull/885#discussion_r541555088", "bodyText": "Worse than that - tabs!\nTurns out this file (taken from Xerces) is a mix of tabs and spaces.\nI'll reset to all spaces. Some methods (we have never touched) are tabs, some spaces.", "author": "afs", "createdAt": "2020-12-12T11:06:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIyMDUzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "ef67c34070169336544e37503decca6d59cff165", "chunk": "diff --git a/jena-core/src/main/java/org/apache/jena/ext/xerces/jaxp/datatype/DurationImpl.java b/jena-core/src/main/java/org/apache/jena/ext/xerces/jaxp/datatype/DurationImpl.java\nindex 68a984060a..0e475ccd99 100644\n--- a/jena-core/src/main/java/org/apache/jena/ext/xerces/jaxp/datatype/DurationImpl.java\n+++ b/jena-core/src/main/java/org/apache/jena/ext/xerces/jaxp/datatype/DurationImpl.java\n\n@@ -664,213 +662,213 @@ class DurationImpl\n         XMLGregorianCalendarImpl.parse(\"1903-07-01T00:00:00Z\")\n     };\n     \n-\t/**\n-\t * <p>Partial order relation comparison with this <code>Duration</code> instance.</p>\n-\t * \n-\t * <p>Comparison result must be in accordance with\n-\t * <a href=\"http://www.w3.org/TR/xmlschema-2/#duration-order\">W3C XML Schema 1.0 Part 2, Section 3.2.7.6.2,\n-\t * <i>Order relation on duration</i></a>.</p>\n-\t * \n-\t * <p>Return:</p>\n-\t * <ul>\n-\t *   <li>{@link DatatypeConstants#LESSER} if this <code>Duration</code> is shorter than <code>duration</code> parameter</li>\n-\t *   <li>{@link DatatypeConstants#EQUAL} if this <code>Duration</code> is equal to <code>duration</code> parameter</li>\n-\t *   <li>{@link DatatypeConstants#GREATER} if this <code>Duration</code> is longer than <code>duration</code> parameter</li>\n-\t *   <li>{@link DatatypeConstants#INDETERMINATE} if a conclusive partial order relation cannot be determined</li>\n-\t * </ul>\n-\t *\n-\t * @param duration to compare\n-\t * \n-\t * @return the relationship between <code>this</code> <code>Duration</code>and <code>duration</code> parameter as\n-\t *   {@link DatatypeConstants#LESSER}, {@link DatatypeConstants#EQUAL}, {@link DatatypeConstants#GREATER}\n-\t *   or {@link DatatypeConstants#INDETERMINATE}.\n-\t * \n-\t * @throws UnsupportedOperationException If the underlying implementation\n-\t *   cannot reasonably process the request, e.g. W3C XML Schema allows for\n-\t *   arbitrarily large/small/precise values, the request may be beyond the\n-\t *   implementations capability.\n-\t * @throws NullPointerException if <code>duration</code> is <code>null</code>. \n-\t *\n-\t * @see #isShorterThan(Duration)\n-\t * @see #isLongerThan(Duration)\n-\t */\n+    /**\n+     * <p>Partial order relation comparison with this <code>Duration</code> instance.</p>\n+     * \n+     * <p>Comparison result must be in accordance with\n+     * <a href=\"http://www.w3.org/TR/xmlschema-2/#duration-order\">W3C XML Schema 1.0 Part 2, Section 3.2.7.6.2,\n+     * <i>Order relation on duration</i></a>.</p>\n+     * \n+     * <p>Return:</p>\n+     * <ul>\n+     *   <li>{@link DatatypeConstants#LESSER} if this <code>Duration</code> is shorter than <code>duration</code> parameter</li>\n+     *   <li>{@link DatatypeConstants#EQUAL} if this <code>Duration</code> is equal to <code>duration</code> parameter</li>\n+     *   <li>{@link DatatypeConstants#GREATER} if this <code>Duration</code> is longer than <code>duration</code> parameter</li>\n+     *   <li>{@link DatatypeConstants#INDETERMINATE} if a conclusive partial order relation cannot be determined</li>\n+     * </ul>\n+     *\n+     * @param duration to compare\n+     * \n+     * @return the relationship between <code>this</code> <code>Duration</code>and <code>duration</code> parameter as\n+     *   {@link DatatypeConstants#LESSER}, {@link DatatypeConstants#EQUAL}, {@link DatatypeConstants#GREATER}\n+     *   or {@link DatatypeConstants#INDETERMINATE}.\n+     * \n+     * @throws UnsupportedOperationException If the underlying implementation\n+     *   cannot reasonably process the request, e.g. W3C XML Schema allows for\n+     *   arbitrarily large/small/precise values, the request may be beyond the\n+     *   implementations capability.\n+     * @throws NullPointerException if <code>duration</code> is <code>null</code>. \n+     *\n+     * @see #isShorterThan(Duration)\n+     * @see #isLongerThan(Duration)\n+     */\n     @Override\n     public int compare(Duration rhs) {\n-    \t\n-    \tBigInteger maxintAsBigInteger = BigInteger.valueOf(Integer.MAX_VALUE);\n+        \n+        BigInteger maxintAsBigInteger = BigInteger.valueOf(Integer.MAX_VALUE);\n \n-    \t// check for fields that are too large in this Duration\n-    \tif (years != null && years.compareTo(maxintAsBigInteger) == 1) {    \t\t\n+        // check for fields that are too large in this Duration\n+        if (years != null && years.compareTo(maxintAsBigInteger) == 1) {            \n             throw new UnsupportedOperationException(\n                         DatatypeMessageFormatter.formatMessage(null, \"TooLarge\", \n                             new Object[]{this.getClass().getName() + \"#compare(Duration duration)\" + DatatypeConstants.YEARS.toString(), years.toString()})\n-    \t\t\t\t\t//this.getClass().getName() + \"#compare(Duration duration)\"\n-\t\t\t\t\t\t//+ \" years too large to be supported by this implementation \"\n-\t\t\t\t\t\t//+ years.toString()\n-\t\t\t\t\t);\n-    \t}\n-    \tif (months != null && months.compareTo(maxintAsBigInteger) == 1) {\n-    \t\tthrow new UnsupportedOperationException(\n+                        //this.getClass().getName() + \"#compare(Duration duration)\"\n+                        //+ \" years too large to be supported by this implementation \"\n+                        //+ years.toString()\n+                    );\n+        }\n+        if (months != null && months.compareTo(maxintAsBigInteger) == 1) {\n+            throw new UnsupportedOperationException(\n                         DatatypeMessageFormatter.formatMessage(null, \"TooLarge\", \n                             new Object[]{this.getClass().getName() + \"#compare(Duration duration)\" + DatatypeConstants.MONTHS.toString(), months.toString()})\n             \n-    \t\t\t\t\t//this.getClass().getName() + \"#compare(Duration duration)\"\n-\t\t\t\t\t\t//+ \" months too large to be supported by this implementation \"\n-\t\t\t\t\t\t//+ months.toString()\n-\t\t\t\t\t);\n-    \t}\n-    \tif (days != null && days.compareTo(maxintAsBigInteger) == 1) {\n-    \t\tthrow new UnsupportedOperationException(\n+                        //this.getClass().getName() + \"#compare(Duration duration)\"\n+                        //+ \" months too large to be supported by this implementation \"\n+                        //+ months.toString()\n+                    );\n+        }\n+        if (days != null && days.compareTo(maxintAsBigInteger) == 1) {\n+            throw new UnsupportedOperationException(\n                         DatatypeMessageFormatter.formatMessage(null, \"TooLarge\", \n                             new Object[]{this.getClass().getName() + \"#compare(Duration duration)\" + DatatypeConstants.DAYS.toString(), days.toString()})\n             \n-    \t\t\t\t\t//this.getClass().getName() + \"#compare(Duration duration)\"\n-\t\t\t\t\t\t//+ \" days too large to be supported by this implementation \"\n-\t\t\t\t\t\t//+ days.toString()\n-\t\t\t\t\t);\n-    \t}\n-    \tif (hours != null && hours.compareTo(maxintAsBigInteger) == 1) {\n-    \t\tthrow new UnsupportedOperationException(\n+                        //this.getClass().getName() + \"#compare(Duration duration)\"\n+                        //+ \" days too large to be supported by this implementation \"\n+                        //+ days.toString()\n+                    );\n+        }\n+        if (hours != null && hours.compareTo(maxintAsBigInteger) == 1) {\n+            throw new UnsupportedOperationException(\n                         DatatypeMessageFormatter.formatMessage(null, \"TooLarge\", \n                             new Object[]{this.getClass().getName() + \"#compare(Duration duration)\" + DatatypeConstants.HOURS.toString(), hours.toString()})\n             \n-    \t\t\t\t\t//this.getClass().getName() + \"#compare(Duration duration)\"\n-\t\t\t\t\t\t//+ \" hours too large to be supported by this implementation \"\n-\t\t\t\t\t\t//+ hours.toString()\n-\t\t\t\t\t);\n-    \t}\n-    \tif (minutes != null && minutes.compareTo(maxintAsBigInteger) == 1) {\n-    \t\tthrow new UnsupportedOperationException(\n+                        //this.getClass().getName() + \"#compare(Duration duration)\"\n+                        //+ \" hours too large to be supported by this implementation \"\n+                        //+ hours.toString()\n+                    );\n+        }\n+        if (minutes != null && minutes.compareTo(maxintAsBigInteger) == 1) {\n+            throw new UnsupportedOperationException(\n                         DatatypeMessageFormatter.formatMessage(null, \"TooLarge\", \n                             new Object[]{this.getClass().getName() + \"#compare(Duration duration)\" + DatatypeConstants.MINUTES.toString(), minutes.toString()})\n             \n-    \t\t\t\t\t//this.getClass().getName() + \"#compare(Duration duration)\"\n-\t\t\t\t\t\t//+ \" minutes too large to be supported by this implementation \"\n-\t\t\t\t\t\t//+ minutes.toString()\n-\t\t\t\t\t);\n-    \t}\n-    \tif (seconds != null && seconds.toBigInteger().compareTo(maxintAsBigInteger) == 1) {\n-    \t\tthrow new UnsupportedOperationException(\n+                        //this.getClass().getName() + \"#compare(Duration duration)\"\n+                        //+ \" minutes too large to be supported by this implementation \"\n+                        //+ minutes.toString()\n+                    );\n+        }\n+        if (seconds != null && seconds.toBigInteger().compareTo(maxintAsBigInteger) == 1) {\n+            throw new UnsupportedOperationException(\n                         DatatypeMessageFormatter.formatMessage(null, \"TooLarge\", \n                             new Object[]{this.getClass().getName() + \"#compare(Duration duration)\" + DatatypeConstants.SECONDS.toString(), toString(seconds)})\n             \n-    \t\t\t\t\t//this.getClass().getName() + \"#compare(Duration duration)\"\n-\t\t\t\t\t\t//+ \" seconds too large to be supported by this implementation \"\n-\t\t\t\t\t\t//+ seconds.toString()\n-\t\t\t\t\t);\n-    \t}\n-    \t\n-    \t// check for fields that are too large in rhs Duration\n-    \tBigInteger rhsYears = (BigInteger) rhs.getField(DatatypeConstants.YEARS);\n-    \tif (rhsYears != null && rhsYears.compareTo(maxintAsBigInteger) == 1) {\n-    \t\tthrow new UnsupportedOperationException(\n+                        //this.getClass().getName() + \"#compare(Duration duration)\"\n+                        //+ \" seconds too large to be supported by this implementation \"\n+                        //+ seconds.toString()\n+                    );\n+        }\n+        \n+        // check for fields that are too large in rhs Duration\n+        BigInteger rhsYears = (BigInteger) rhs.getField(DatatypeConstants.YEARS);\n+        if (rhsYears != null && rhsYears.compareTo(maxintAsBigInteger) == 1) {\n+            throw new UnsupportedOperationException(\n                         DatatypeMessageFormatter.formatMessage(null, \"TooLarge\", \n                             new Object[]{this.getClass().getName() + \"#compare(Duration duration)\" + DatatypeConstants.YEARS.toString(), rhsYears.toString()})\n             \n-    \t\t\t\t\t//this.getClass().getName() + \"#compare(Duration duration)\"\n-\t\t\t\t\t\t//+ \" years too large to be supported by this implementation \"\n-\t\t\t\t\t\t//+ rhsYears.toString()\n-\t\t\t\t\t);\n-    \t}\n-    \tBigInteger rhsMonths = (BigInteger) rhs.getField(DatatypeConstants.MONTHS);\n-    \tif (rhsMonths != null && rhsMonths.compareTo(maxintAsBigInteger) == 1) {\n-    \t\tthrow new UnsupportedOperationException(\n+                        //this.getClass().getName() + \"#compare(Duration duration)\"\n+                        //+ \" years too large to be supported by this implementation \"\n+                        //+ rhsYears.toString()\n+                    );\n+        }\n+        BigInteger rhsMonths = (BigInteger) rhs.getField(DatatypeConstants.MONTHS);\n+        if (rhsMonths != null && rhsMonths.compareTo(maxintAsBigInteger) == 1) {\n+            throw new UnsupportedOperationException(\n                         DatatypeMessageFormatter.formatMessage(null, \"TooLarge\", \n                             new Object[]{this.getClass().getName() + \"#compare(Duration duration)\" + DatatypeConstants.MONTHS.toString(), rhsMonths.toString()})\n             \n-    \t\t\t\t\t//this.getClass().getName() + \"#compare(Duration duration)\"\n-\t\t\t\t\t\t//+ \" months too large to be supported by this implementation \"\n-\t\t\t\t\t\t//+ rhsMonths.toString()\n-\t\t\t\t\t);\n-    \t}\n-    \tBigInteger rhsDays = (BigInteger) rhs.getField(DatatypeConstants.DAYS);\n-    \tif (rhsDays != null && rhsDays.compareTo(maxintAsBigInteger) == 1) {\n-    \t\tthrow new UnsupportedOperationException(\n+                        //this.getClass().getName() + \"#compare(Duration duration)\"\n+                        //+ \" months too large to be supported by this implementation \"\n+                        //+ rhsMonths.toString()\n+                    );\n+        }\n+        BigInteger rhsDays = (BigInteger) rhs.getField(DatatypeConstants.DAYS);\n+        if (rhsDays != null && rhsDays.compareTo(maxintAsBigInteger) == 1) {\n+            throw new UnsupportedOperationException(\n                         DatatypeMessageFormatter.formatMessage(null, \"TooLarge\", \n                             new Object[]{this.getClass().getName() + \"#compare(Duration duration)\" + DatatypeConstants.DAYS.toString(), rhsDays.toString()})\n             \n-    \t\t\t\t\t//this.getClass().getName() + \"#compare(Duration duration)\"\n-\t\t\t\t\t\t//+ \" days too large to be supported by this implementation \"\n-\t\t\t\t\t\t//+ rhsDays.toString()\n-\t\t\t\t\t);\n-    \t}\n-    \tBigInteger rhsHours = (BigInteger) rhs.getField(DatatypeConstants.HOURS);\n-    \tif (rhsHours != null && rhsHours.compareTo(maxintAsBigInteger) == 1) {\n-    \t\tthrow new UnsupportedOperationException(\n+                        //this.getClass().getName() + \"#compare(Duration duration)\"\n+                        //+ \" days too large to be supported by this implementation \"\n+                        //+ rhsDays.toString()\n+                    );\n+        }\n+        BigInteger rhsHours = (BigInteger) rhs.getField(DatatypeConstants.HOURS);\n+        if (rhsHours != null && rhsHours.compareTo(maxintAsBigInteger) == 1) {\n+            throw new UnsupportedOperationException(\n                         DatatypeMessageFormatter.formatMessage(null, \"TooLarge\", \n                             new Object[]{this.getClass().getName() + \"#compare(Duration duration)\" + DatatypeConstants.HOURS.toString(), rhsHours.toString()})\n             \n-    \t\t\t\t\t//this.getClass().getName() + \"#compare(Duration duration)\"\n-\t\t\t\t\t\t//+ \" hours too large to be supported by this implementation \"\n-\t\t\t\t\t\t//+ rhsHours.toString()\n-\t\t\t\t\t);\n-    \t}\n-    \tBigInteger rhsMinutes = (BigInteger) rhs.getField(DatatypeConstants.MINUTES);\n-    \tif (rhsMinutes != null && rhsMinutes.compareTo(maxintAsBigInteger) == 1) {\n-    \t\tthrow new UnsupportedOperationException(\n+                        //this.getClass().getName() + \"#compare(Duration duration)\"\n+                        //+ \" hours too large to be supported by this implementation \"\n+                        //+ rhsHours.toString()\n+                    );\n+        }\n+        BigInteger rhsMinutes = (BigInteger) rhs.getField(DatatypeConstants.MINUTES);\n+        if (rhsMinutes != null && rhsMinutes.compareTo(maxintAsBigInteger) == 1) {\n+            throw new UnsupportedOperationException(\n                         DatatypeMessageFormatter.formatMessage(null, \"TooLarge\", \n                             new Object[]{this.getClass().getName() + \"#compare(Duration duration)\" + DatatypeConstants.MINUTES.toString(), rhsMinutes.toString()})\n             \n-    \t\t\t\t\t//this.getClass().getName() + \"#compare(Duration duration)\"\n-\t\t\t\t\t\t//+ \" minutes too large to be supported by this implementation \"\n-\t\t\t\t\t\t//+ rhsMinutes.toString()\n-\t\t\t\t\t);\n-    \t}\n-    \tBigDecimal rhsSecondsAsBigDecimal = (BigDecimal) rhs.getField(DatatypeConstants.SECONDS);\n-    \tBigInteger rhsSeconds = null;\n+                        //this.getClass().getName() + \"#compare(Duration duration)\"\n+                        //+ \" minutes too large to be supported by this implementation \"\n+                        //+ rhsMinutes.toString()\n+                    );\n+        }\n+        BigDecimal rhsSecondsAsBigDecimal = (BigDecimal) rhs.getField(DatatypeConstants.SECONDS);\n+        BigInteger rhsSeconds = null;\n         if ( rhsSecondsAsBigDecimal != null ) {\n                 rhsSeconds =  rhsSecondsAsBigDecimal.toBigInteger();\n         }\n-    \tif (rhsSeconds != null && rhsSeconds.compareTo(maxintAsBigInteger) == 1) {\n-    \t\tthrow new UnsupportedOperationException(\n+        if (rhsSeconds != null && rhsSeconds.compareTo(maxintAsBigInteger) == 1) {\n+            throw new UnsupportedOperationException(\n                         DatatypeMessageFormatter.formatMessage(null, \"TooLarge\", \n                             new Object[]{this.getClass().getName() + \"#compare(Duration duration)\" + DatatypeConstants.SECONDS.toString(), rhsSeconds.toString()})\n             \n-    \t\t\t\t\t//this.getClass().getName() + \"#compare(Duration duration)\"\n-\t\t\t\t\t\t//+ \" seconds too large to be supported by this implementation \"\n-\t\t\t\t\t\t//+ rhsSeconds.toString()\n-\t\t\t\t\t);\n-    \t}\n-\n-    \tif ( rhsSecondsAsBigDecimal == null || seconds == null ) {\n-    \t    // Jena: change: this only works for durations with no fractional seconds.\n-    \t    // Fix is to only use if no seconds in LHS or RHS.\n-    \t    \n-    \t    // turn this Duration into a GregorianCalendar\n-    \t    GregorianCalendar lhsCalendar = new GregorianCalendar(\n-    \t        1970,\n-    \t        1,\n-    \t        1,\n-    \t        0,\n-    \t        0,\n-    \t        0);\n-    \t    lhsCalendar.add(GregorianCalendar.YEAR, getYears() * getSign());\n-    \t    lhsCalendar.add(GregorianCalendar.MONTH, getMonths() * getSign());\n-    \t    lhsCalendar.add(GregorianCalendar.DAY_OF_YEAR, getDays() * getSign());\n-    \t    lhsCalendar.add(GregorianCalendar.HOUR_OF_DAY, getHours() * getSign());\n-    \t    lhsCalendar.add(GregorianCalendar.MINUTE, getMinutes() * getSign());\n-    \t    lhsCalendar.add(GregorianCalendar.SECOND, getSeconds() * getSign());\n-\n-    \t    // turn compare Duration into a GregorianCalendar\n-    \t    GregorianCalendar rhsCalendar = new GregorianCalendar(\n-    \t        1970,\n-    \t        1,\n-    \t        1,\n-    \t        0,\n-    \t        0,\n-    \t        0);\n-    \t    rhsCalendar.add(GregorianCalendar.YEAR, rhs.getYears() * rhs.getSign());\n-    \t    rhsCalendar.add(GregorianCalendar.MONTH, rhs.getMonths() * rhs.getSign());\n-    \t    rhsCalendar.add(GregorianCalendar.DAY_OF_YEAR, rhs.getDays() * rhs.getSign());\n-    \t    rhsCalendar.add(GregorianCalendar.HOUR_OF_DAY, rhs.getHours() * rhs.getSign());\n-    \t    rhsCalendar.add(GregorianCalendar.MINUTE, rhs.getMinutes() * rhs.getSign());\n-    \t    rhsCalendar.add(GregorianCalendar.SECOND, rhs.getSeconds() * rhs.getSign());\n-\n-    \t    if (lhsCalendar.equals(rhsCalendar)) {\n-    \t        return DatatypeConstants.EQUAL;\n-    \t    }\n-    \t}\n-   \t\treturn compareDuration(this, rhs);\n+                        //this.getClass().getName() + \"#compare(Duration duration)\"\n+                        //+ \" seconds too large to be supported by this implementation \"\n+                        //+ rhsSeconds.toString()\n+                    );\n+        }\n+\n+        if ( rhsSecondsAsBigDecimal == null || seconds == null ) {\n+            // Jena: change: this only works for durations with no fractional seconds.\n+            // Fix is to only use if no seconds in LHS or RHS.\n+            \n+            // turn this Duration into a GregorianCalendar\n+            GregorianCalendar lhsCalendar = new GregorianCalendar(\n+                1970,\n+                1,\n+                1,\n+                0,\n+                0,\n+                0);\n+            lhsCalendar.add(GregorianCalendar.YEAR, getYears() * getSign());\n+            lhsCalendar.add(GregorianCalendar.MONTH, getMonths() * getSign());\n+            lhsCalendar.add(GregorianCalendar.DAY_OF_YEAR, getDays() * getSign());\n+            lhsCalendar.add(GregorianCalendar.HOUR_OF_DAY, getHours() * getSign());\n+            lhsCalendar.add(GregorianCalendar.MINUTE, getMinutes() * getSign());\n+            lhsCalendar.add(GregorianCalendar.SECOND, getSeconds() * getSign());\n+\n+            // turn compare Duration into a GregorianCalendar\n+            GregorianCalendar rhsCalendar = new GregorianCalendar(\n+                1970,\n+                1,\n+                1,\n+                0,\n+                0,\n+                0);\n+            rhsCalendar.add(GregorianCalendar.YEAR, rhs.getYears() * rhs.getSign());\n+            rhsCalendar.add(GregorianCalendar.MONTH, rhs.getMonths() * rhs.getSign());\n+            rhsCalendar.add(GregorianCalendar.DAY_OF_YEAR, rhs.getDays() * rhs.getSign());\n+            rhsCalendar.add(GregorianCalendar.HOUR_OF_DAY, rhs.getHours() * rhs.getSign());\n+            rhsCalendar.add(GregorianCalendar.MINUTE, rhs.getMinutes() * rhs.getSign());\n+            rhsCalendar.add(GregorianCalendar.SECOND, rhs.getSeconds() * rhs.getSign());\n+\n+            if (lhsCalendar.equals(rhsCalendar)) {\n+                return DatatypeConstants.EQUAL;\n+            }\n+        }\n+        return compareDuration(this, rhs);\n     }\n     \n     /**\n"}}, {"oid": "ef67c34070169336544e37503decca6d59cff165", "url": "https://github.com/apache/jena/commit/ef67c34070169336544e37503decca6d59cff165", "message": "Fix up tabs/spaces", "committedDate": "2020-12-12T11:04:20Z", "type": "commit"}]}