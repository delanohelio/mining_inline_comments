{"pr_number": 598, "pr_title": "[eclipse/xtext#1679]ported more test code to java", "pr_createdAt": "2020-05-05T11:10:08Z", "pr_url": "https://github.com/eclipse/xtext-extras/pull/598", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYxMjM1Mg==", "url": "https://github.com/eclipse/xtext-extras/pull/598#discussion_r420612352", "bodyText": "Strings", "author": "tivervac", "createdAt": "2020-05-06T08:05:47Z", "path": "org.eclipse.xtext.extras.tests/generator/src/org/eclipse/xtext/tests/TestsEMFGeneratorFragment.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.tests;\n+\n+import org.eclipse.xtext.Grammar;\n+import org.eclipse.xtext.xbase.lib.StringExtensions;\n+import org.eclipse.xtext.xtext.generator.ecore.EMFGeneratorFragment2;\n+\n+/**\n+ * @author spoenemann - Initial contribution and API\n+ */\n+public class TestsEMFGeneratorFragment extends EMFGeneratorFragment2 {\n+\tprivate String ecoreModel;\n+\n+\tprivate String genModel;\n+\n+\tpublic TestsEMFGeneratorFragment() {\n+\t\tsetUpdateBuildProperties(false);\n+\t}\n+\n+\t@Override\n+\tpublic void setGenModel(final String genModel) {\n+\t\tthis.genModel = genModel;\n+\t\tsuper.setGenModel(genModel);\n+\t}\n+\n+\t@Override\n+\tprotected String getEcoreFilePath(final Grammar grammar) {\n+\t\tif (!StringExtensions.isNullOrEmpty(ecoreModel)) {", "originalCommit": "0b2e75b92fd613127fa6f89e816186ae88f901f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "92a31940c0e75506e54845a8e4fa6ec2f3e30f29", "chunk": "diff --git a/org.eclipse.xtext.extras.tests/generator/src/org/eclipse/xtext/tests/TestsEMFGeneratorFragment.java b/org.eclipse.xtext.extras.tests/generator/src/org/eclipse/xtext/tests/TestsEMFGeneratorFragment.java\nindex cf0187a8b..1af121fe7 100644\n--- a/org.eclipse.xtext.extras.tests/generator/src/org/eclipse/xtext/tests/TestsEMFGeneratorFragment.java\n+++ b/org.eclipse.xtext.extras.tests/generator/src/org/eclipse/xtext/tests/TestsEMFGeneratorFragment.java\n\n@@ -9,9 +9,10 @@\n package org.eclipse.xtext.tests;\n \n import org.eclipse.xtext.Grammar;\n-import org.eclipse.xtext.xbase.lib.StringExtensions;\n import org.eclipse.xtext.xtext.generator.ecore.EMFGeneratorFragment2;\n \n+import com.google.common.base.Strings;\n+\n /**\n  * @author spoenemann - Initial contribution and API\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYxMjQ4NQ==", "url": "https://github.com/eclipse/xtext-extras/pull/598#discussion_r420612485", "bodyText": "Strings", "author": "tivervac", "createdAt": "2020-05-06T08:06:04Z", "path": "org.eclipse.xtext.extras.tests/generator/src/org/eclipse/xtext/tests/TestsEMFGeneratorFragment.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.tests;\n+\n+import org.eclipse.xtext.Grammar;\n+import org.eclipse.xtext.xbase.lib.StringExtensions;\n+import org.eclipse.xtext.xtext.generator.ecore.EMFGeneratorFragment2;\n+\n+/**\n+ * @author spoenemann - Initial contribution and API\n+ */\n+public class TestsEMFGeneratorFragment extends EMFGeneratorFragment2 {\n+\tprivate String ecoreModel;\n+\n+\tprivate String genModel;\n+\n+\tpublic TestsEMFGeneratorFragment() {\n+\t\tsetUpdateBuildProperties(false);\n+\t}\n+\n+\t@Override\n+\tpublic void setGenModel(final String genModel) {\n+\t\tthis.genModel = genModel;\n+\t\tsuper.setGenModel(genModel);\n+\t}\n+\n+\t@Override\n+\tprotected String getEcoreFilePath(final Grammar grammar) {\n+\t\tif (!StringExtensions.isNullOrEmpty(ecoreModel)) {\n+\t\t\treturn ecoreModel;\n+\t\t} else {\n+\t\t\treturn getJavaModelDirectory() + \"/\"\n+\t\t\t\t\t+ grammar.getName().substring(0, grammar.getName().lastIndexOf(\".\")).replace(\".\", \"/\") + \"/\"\n+\t\t\t\t\t+ getModelName(grammar) + \".ecore\";\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tprotected String getGenModelPath(final Grammar grammar) {\n+\t\tif (!StringExtensions.isNullOrEmpty(genModel)) {", "originalCommit": "0b2e75b92fd613127fa6f89e816186ae88f901f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "92a31940c0e75506e54845a8e4fa6ec2f3e30f29", "chunk": "diff --git a/org.eclipse.xtext.extras.tests/generator/src/org/eclipse/xtext/tests/TestsEMFGeneratorFragment.java b/org.eclipse.xtext.extras.tests/generator/src/org/eclipse/xtext/tests/TestsEMFGeneratorFragment.java\nindex cf0187a8b..1af121fe7 100644\n--- a/org.eclipse.xtext.extras.tests/generator/src/org/eclipse/xtext/tests/TestsEMFGeneratorFragment.java\n+++ b/org.eclipse.xtext.extras.tests/generator/src/org/eclipse/xtext/tests/TestsEMFGeneratorFragment.java\n\n@@ -9,9 +9,10 @@\n package org.eclipse.xtext.tests;\n \n import org.eclipse.xtext.Grammar;\n-import org.eclipse.xtext.xbase.lib.StringExtensions;\n import org.eclipse.xtext.xtext.generator.ecore.EMFGeneratorFragment2;\n \n+import com.google.common.base.Strings;\n+\n /**\n  * @author spoenemann - Initial contribution and API\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYxMjU4Ng==", "url": "https://github.com/eclipse/xtext-extras/pull/598#discussion_r420612586", "bodyText": "No need for final\nThere's more of these in this file", "author": "tivervac", "createdAt": "2020-05-06T08:06:17Z", "path": "org.eclipse.xtext.extras.tests/generator/src/org/eclipse/xtext/tests/TestsEMFGeneratorFragment.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.tests;\n+\n+import org.eclipse.xtext.Grammar;\n+import org.eclipse.xtext.xbase.lib.StringExtensions;\n+import org.eclipse.xtext.xtext.generator.ecore.EMFGeneratorFragment2;\n+\n+/**\n+ * @author spoenemann - Initial contribution and API\n+ */\n+public class TestsEMFGeneratorFragment extends EMFGeneratorFragment2 {\n+\tprivate String ecoreModel;\n+\n+\tprivate String genModel;\n+\n+\tpublic TestsEMFGeneratorFragment() {\n+\t\tsetUpdateBuildProperties(false);\n+\t}\n+\n+\t@Override\n+\tpublic void setGenModel(final String genModel) {\n+\t\tthis.genModel = genModel;\n+\t\tsuper.setGenModel(genModel);\n+\t}\n+\n+\t@Override\n+\tprotected String getEcoreFilePath(final Grammar grammar) {\n+\t\tif (!StringExtensions.isNullOrEmpty(ecoreModel)) {\n+\t\t\treturn ecoreModel;\n+\t\t} else {\n+\t\t\treturn getJavaModelDirectory() + \"/\"\n+\t\t\t\t\t+ grammar.getName().substring(0, grammar.getName().lastIndexOf(\".\")).replace(\".\", \"/\") + \"/\"\n+\t\t\t\t\t+ getModelName(grammar) + \".ecore\";\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tprotected String getGenModelPath(final Grammar grammar) {\n+\t\tif (!StringExtensions.isNullOrEmpty(genModel)) {\n+\t\t\treturn genModel;\n+\t\t} else {\n+\t\t\treturn getJavaModelDirectory() + \"/\"\n+\t\t\t\t\t+ grammar.getName().substring(0, grammar.getName().lastIndexOf(\".\")).replace(\".\", \"/\") + \"/\"\n+\t\t\t\t\t+ getModelName(grammar) + \".genmodel\";\n+\t\t}\n+\t}\n+\n+\tpublic void setEcoreModel(final String ecoreModel) {", "originalCommit": "0b2e75b92fd613127fa6f89e816186ae88f901f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "92a31940c0e75506e54845a8e4fa6ec2f3e30f29", "chunk": "diff --git a/org.eclipse.xtext.extras.tests/generator/src/org/eclipse/xtext/tests/TestsEMFGeneratorFragment.java b/org.eclipse.xtext.extras.tests/generator/src/org/eclipse/xtext/tests/TestsEMFGeneratorFragment.java\nindex cf0187a8b..1af121fe7 100644\n--- a/org.eclipse.xtext.extras.tests/generator/src/org/eclipse/xtext/tests/TestsEMFGeneratorFragment.java\n+++ b/org.eclipse.xtext.extras.tests/generator/src/org/eclipse/xtext/tests/TestsEMFGeneratorFragment.java\n\n@@ -9,9 +9,10 @@\n package org.eclipse.xtext.tests;\n \n import org.eclipse.xtext.Grammar;\n-import org.eclipse.xtext.xbase.lib.StringExtensions;\n import org.eclipse.xtext.xtext.generator.ecore.EMFGeneratorFragment2;\n \n+import com.google.common.base.Strings;\n+\n /**\n  * @author spoenemann - Initial contribution and API\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYxMzE3NQ==", "url": "https://github.com/eclipse/xtext-extras/pull/598#discussion_r420613175", "bodyText": "Unneeded parenthesis", "author": "tivervac", "createdAt": "2020-05-06T08:07:32Z", "path": "org.eclipse.xtext.java.tests/src/org/eclipse/xtext/java/tests/ReusedTypeProviderTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.java.tests;\n+\n+import java.io.BufferedReader;\n+import java.io.InputStreamReader;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.xtext.build.BuildRequest;\n+import org.eclipse.xtext.build.IncrementalBuilder;\n+import org.eclipse.xtext.build.IndexState;\n+import org.eclipse.xtext.build.Source2GeneratedMapping;\n+import org.eclipse.xtext.common.types.JvmFormalParameter;\n+import org.eclipse.xtext.common.types.JvmGenericType;\n+import org.eclipse.xtext.common.types.JvmOperation;\n+import org.eclipse.xtext.common.types.access.IJvmTypeProvider;\n+import org.eclipse.xtext.common.types.access.impl.AbstractTypeProviderTest;\n+import org.eclipse.xtext.common.types.testSetups.AbstractMethods;\n+import org.eclipse.xtext.common.types.testSetups.Bug347739ThreeTypeParamsSuperSuper;\n+import org.eclipse.xtext.common.types.testSetups.ClassWithVarArgs;\n+import org.eclipse.xtext.resource.IResourceServiceProvider;\n+import org.eclipse.xtext.resource.XtextResourceSet;\n+import org.eclipse.xtext.resource.impl.ChunkedResourceDescriptions;\n+import org.eclipse.xtext.resource.impl.ProjectDescription;\n+import org.eclipse.xtext.resource.impl.ResourceDescriptionsData;\n+import org.eclipse.xtext.testing.InjectWith;\n+import org.eclipse.xtext.testing.XtextRunner;\n+import org.junit.Assert;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.google.common.collect.Iterables;\n+import com.google.inject.Inject;\n+import com.google.inject.Provider;\n+\n+@RunWith(XtextRunner.class)\n+@InjectWith(JavaInjectorProvider.class)\n+public class ReusedTypeProviderTest extends AbstractTypeProviderTest {\n+\t@Inject\n+\tprivate IncrementalBuilder builder;\n+\n+\t@Inject\n+\tprivate IResourceServiceProvider.Registry resourceServiceProviderRegistry;\n+\n+\t@Inject\n+\tprivate IJvmTypeProvider.Factory typeProviderFactory;\n+\n+\t@Inject\n+\tprivate Provider<XtextResourceSet> resourceSetProvider;\n+\n+\tprivate static IJvmTypeProvider typeProvider;\n+\n+\tpublic static List<String> readResource(String name) throws Exception {\n+\t\ttry (BufferedReader reader = new BufferedReader(\n+\t\t\t\tnew InputStreamReader(ReusedTypeProviderTest.class.getResourceAsStream(name)))) {\n+\t\t\tString line = null;\n+\t\t\tList<String> result = new ArrayList<>();\n+\t\t\twhile ((line = reader.readLine()) != null) {\n+\t\t\t\tresult.add(line);\n+\t\t\t}\n+\t\t\treturn result;\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void setUp() throws Exception {\n+\t\tsuper.setUp();\n+\t\tif (ReusedTypeProviderTest.typeProvider == null) {\n+\t\t\tString pathToSources = \"/org/eclipse/xtext/common/types/testSetups\";\n+\t\t\tList<String> files = ReusedTypeProviderTest.readResource((pathToSources + \"/files.list\"));", "originalCommit": "0b2e75b92fd613127fa6f89e816186ae88f901f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "92a31940c0e75506e54845a8e4fa6ec2f3e30f29", "chunk": "diff --git a/org.eclipse.xtext.java.tests/src/org/eclipse/xtext/java/tests/ReusedTypeProviderTest.java b/org.eclipse.xtext.java.tests/src/org/eclipse/xtext/java/tests/ReusedTypeProviderTest.java\nindex 4ad5216e8..fb5f8aed6 100644\n--- a/org.eclipse.xtext.java.tests/src/org/eclipse/xtext/java/tests/ReusedTypeProviderTest.java\n+++ b/org.eclipse.xtext.java.tests/src/org/eclipse/xtext/java/tests/ReusedTypeProviderTest.java\n\n@@ -78,7 +78,7 @@ public class ReusedTypeProviderTest extends AbstractTypeProviderTest {\n \t\tsuper.setUp();\n \t\tif (ReusedTypeProviderTest.typeProvider == null) {\n \t\t\tString pathToSources = \"/org/eclipse/xtext/common/types/testSetups\";\n-\t\t\tList<String> files = ReusedTypeProviderTest.readResource((pathToSources + \"/files.list\"));\n+\t\t\tList<String> files = ReusedTypeProviderTest.readResource(pathToSources + \"/files.list\");\n \t\t\tResourceDescriptionsData part = new ResourceDescriptionsData(Collections.emptySet());\n \t\t\tXtextResourceSet resourceSet = resourceSetProvider.get();\n \t\t\tProjectDescription projectDesc = new ProjectDescription();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYxMzc4Mw==", "url": "https://github.com/eclipse/xtext-extras/pull/598#discussion_r420613783", "bodyText": "Unneeded parenthesis", "author": "tivervac", "createdAt": "2020-05-06T08:08:45Z", "path": "org.eclipse.xtext.purexbase.tests/src/org/eclipse/xtext/purexbase/test/PureXbaseInterpreterTest.java", "diffHunk": "@@ -0,0 +1,332 @@\n+/**\n+ * Copyright (c) 2019, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.purexbase.test;\n+\n+import org.eclipse.xtext.purexbase.pureXbase.Model;\n+import org.eclipse.xtext.testing.InjectWith;\n+import org.eclipse.xtext.testing.XtextRunner;\n+import org.eclipse.xtext.testing.util.ParseHelper;\n+import org.eclipse.xtext.testing.validation.ValidationTestHelper;\n+import org.eclipse.xtext.util.IResourceScopeCache;\n+import org.eclipse.xtext.xbase.XExpression;\n+import org.eclipse.xtext.xbase.interpreter.IEvaluationResult;\n+import org.eclipse.xtext.xbase.interpreter.IExpressionInterpreter;\n+import org.eclipse.xtext.xbase.junit.evaluation.AbstractXbaseEvaluationTest;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author Eva Poell - Tests for Try with Resources and ternary if\n+ */\n+@RunWith(XtextRunner.class)\n+@InjectWith(RuntimeInjectorProvider.class)\n+public class PureXbaseInterpreterTest extends AbstractXbaseEvaluationTest {\n+\t@Inject\n+\tprivate ParseHelper<Model> parseHelper;\n+\n+\t@Inject\n+\tprivate ValidationTestHelper validationHelper;\n+\n+\t@Inject\n+\tprivate IExpressionInterpreter interpreter;\n+\n+\t@Inject\n+\tprivate IResourceScopeCache cache;\n+\n+\t@After\n+\tpublic void tearDown() throws Exception {\n+\t\tinterpreter = null;\n+\t\tparseHelper = null;\n+\t}\n+\n+\t@Test\n+\tpublic void testInvokeProtectedMethod() throws Exception {\n+\t\tassertEvaluatesTo(\"\", \"{ val x = new testdata.VisibilitySuperType() x.protectedProperty }\", false);\n+\t}\n+\n+\t@Override\n+\tpublic void assertEvaluatesTo(Object expectation, String model) throws Exception {\n+\t\tassertEvaluatesTo(expectation, model, true);\n+\t}\n+\n+\t@Override\n+\tpublic void assertEvaluatesToArray(Object[] expectation, String model) throws Exception {\n+\t\tassertEvaluatesTo(expectation, model, true);\n+\t}\n+\n+\tpublic void assertEvaluatesTo(Object expectation, String model, boolean validate) throws Exception {\n+\t\tXExpression expression = null;\n+\t\ttry {\n+\t\t\texpression = expression(model, validate);\n+\t\t\tIEvaluationResult result = interpreter.evaluate(expression);\n+\t\t\tAssert.assertNull(\n+\t\t\t\t\t\"Expected no exception. Model was: \" + model + \", Exception was: \" + result.getException(),\n+\t\t\t\t\tresult.getException());\n+\t\t\tif (expectation != null && expectation.getClass().isArray()) {\n+\t\t\t\tAssert.assertArrayEquals(\"Model was: \" + model, ((Object[]) expectation), ((Object[]) result.getResult()));", "originalCommit": "0b2e75b92fd613127fa6f89e816186ae88f901f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "92a31940c0e75506e54845a8e4fa6ec2f3e30f29", "chunk": "diff --git a/org.eclipse.xtext.purexbase.tests/src/org/eclipse/xtext/purexbase/test/PureXbaseInterpreterTest.java b/org.eclipse.xtext.purexbase.tests/src/org/eclipse/xtext/purexbase/test/PureXbaseInterpreterTest.java\nindex 923e2e210..cbdea76e4 100644\n--- a/org.eclipse.xtext.purexbase.tests/src/org/eclipse/xtext/purexbase/test/PureXbaseInterpreterTest.java\n+++ b/org.eclipse.xtext.purexbase.tests/src/org/eclipse/xtext/purexbase/test/PureXbaseInterpreterTest.java\n\n@@ -74,7 +74,7 @@ public class PureXbaseInterpreterTest extends AbstractXbaseEvaluationTest {\n \t\t\t\t\t\"Expected no exception. Model was: \" + model + \", Exception was: \" + result.getException(),\n \t\t\t\t\tresult.getException());\n \t\t\tif (expectation != null && expectation.getClass().isArray()) {\n-\t\t\t\tAssert.assertArrayEquals(\"Model was: \" + model, ((Object[]) expectation), ((Object[]) result.getResult()));\n+\t\t\t\tAssert.assertArrayEquals(\"Model was: \" + model, (Object[]) expectation, (Object[]) result.getResult());\n \t\t\t} else {\n \t\t\t\tAssert.assertEquals(\"Model was: \" + model, expectation, result.getResult());\n \t\t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYxMzgyOQ==", "url": "https://github.com/eclipse/xtext-extras/pull/598#discussion_r420613829", "bodyText": "Unneeded parenthesis", "author": "tivervac", "createdAt": "2020-05-06T08:08:49Z", "path": "org.eclipse.xtext.purexbase.tests/src/org/eclipse/xtext/purexbase/test/PureXbaseInterpreterTest.java", "diffHunk": "@@ -0,0 +1,332 @@\n+/**\n+ * Copyright (c) 2019, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.purexbase.test;\n+\n+import org.eclipse.xtext.purexbase.pureXbase.Model;\n+import org.eclipse.xtext.testing.InjectWith;\n+import org.eclipse.xtext.testing.XtextRunner;\n+import org.eclipse.xtext.testing.util.ParseHelper;\n+import org.eclipse.xtext.testing.validation.ValidationTestHelper;\n+import org.eclipse.xtext.util.IResourceScopeCache;\n+import org.eclipse.xtext.xbase.XExpression;\n+import org.eclipse.xtext.xbase.interpreter.IEvaluationResult;\n+import org.eclipse.xtext.xbase.interpreter.IExpressionInterpreter;\n+import org.eclipse.xtext.xbase.junit.evaluation.AbstractXbaseEvaluationTest;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author Eva Poell - Tests for Try with Resources and ternary if\n+ */\n+@RunWith(XtextRunner.class)\n+@InjectWith(RuntimeInjectorProvider.class)\n+public class PureXbaseInterpreterTest extends AbstractXbaseEvaluationTest {\n+\t@Inject\n+\tprivate ParseHelper<Model> parseHelper;\n+\n+\t@Inject\n+\tprivate ValidationTestHelper validationHelper;\n+\n+\t@Inject\n+\tprivate IExpressionInterpreter interpreter;\n+\n+\t@Inject\n+\tprivate IResourceScopeCache cache;\n+\n+\t@After\n+\tpublic void tearDown() throws Exception {\n+\t\tinterpreter = null;\n+\t\tparseHelper = null;\n+\t}\n+\n+\t@Test\n+\tpublic void testInvokeProtectedMethod() throws Exception {\n+\t\tassertEvaluatesTo(\"\", \"{ val x = new testdata.VisibilitySuperType() x.protectedProperty }\", false);\n+\t}\n+\n+\t@Override\n+\tpublic void assertEvaluatesTo(Object expectation, String model) throws Exception {\n+\t\tassertEvaluatesTo(expectation, model, true);\n+\t}\n+\n+\t@Override\n+\tpublic void assertEvaluatesToArray(Object[] expectation, String model) throws Exception {\n+\t\tassertEvaluatesTo(expectation, model, true);\n+\t}\n+\n+\tpublic void assertEvaluatesTo(Object expectation, String model, boolean validate) throws Exception {\n+\t\tXExpression expression = null;\n+\t\ttry {\n+\t\t\texpression = expression(model, validate);\n+\t\t\tIEvaluationResult result = interpreter.evaluate(expression);\n+\t\t\tAssert.assertNull(\n+\t\t\t\t\t\"Expected no exception. Model was: \" + model + \", Exception was: \" + result.getException(),\n+\t\t\t\t\tresult.getException());\n+\t\t\tif (expectation != null && expectation.getClass().isArray()) {\n+\t\t\t\tAssert.assertArrayEquals(\"Model was: \" + model, ((Object[]) expectation), ((Object[]) result.getResult()));\n+\t\t\t} else {\n+\t\t\t\tAssert.assertEquals(\"Model was: \" + model, expectation, result.getResult());\n+\t\t\t}\n+\t\t} finally {\n+\t\t\tif ((expression != null)) {", "originalCommit": "0b2e75b92fd613127fa6f89e816186ae88f901f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "92a31940c0e75506e54845a8e4fa6ec2f3e30f29", "chunk": "diff --git a/org.eclipse.xtext.purexbase.tests/src/org/eclipse/xtext/purexbase/test/PureXbaseInterpreterTest.java b/org.eclipse.xtext.purexbase.tests/src/org/eclipse/xtext/purexbase/test/PureXbaseInterpreterTest.java\nindex 923e2e210..cbdea76e4 100644\n--- a/org.eclipse.xtext.purexbase.tests/src/org/eclipse/xtext/purexbase/test/PureXbaseInterpreterTest.java\n+++ b/org.eclipse.xtext.purexbase.tests/src/org/eclipse/xtext/purexbase/test/PureXbaseInterpreterTest.java\n\n@@ -74,7 +74,7 @@ public class PureXbaseInterpreterTest extends AbstractXbaseEvaluationTest {\n \t\t\t\t\t\"Expected no exception. Model was: \" + model + \", Exception was: \" + result.getException(),\n \t\t\t\t\tresult.getException());\n \t\t\tif (expectation != null && expectation.getClass().isArray()) {\n-\t\t\t\tAssert.assertArrayEquals(\"Model was: \" + model, ((Object[]) expectation), ((Object[]) result.getResult()));\n+\t\t\t\tAssert.assertArrayEquals(\"Model was: \" + model, (Object[]) expectation, (Object[]) result.getResult());\n \t\t\t} else {\n \t\t\t\tAssert.assertEquals(\"Model was: \" + model, expectation, result.getResult());\n \t\t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYxNDcwMA==", "url": "https://github.com/eclipse/xtext-extras/pull/598#discussion_r420614700", "bodyText": "Initialize as type != null?", "author": "tivervac", "createdAt": "2020-05-06T08:10:36Z", "path": "org.eclipse.xtext.xbase.tests/src/org/eclipse/xtext/xbase/junit/typesystem/Oven.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/**\n+ * Copyright (c) 2013, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xbase.junit.typesystem;\n+\n+import java.lang.reflect.Method;\n+\n+import org.eclipse.emf.common.util.TreeIterator;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.xtext.common.types.JvmFormalParameter;\n+import org.eclipse.xtext.common.types.JvmIdentifiableElement;\n+import org.eclipse.xtext.testing.util.ParseHelper;\n+import org.eclipse.xtext.xbase.XAbstractFeatureCall;\n+import org.eclipse.xtext.xbase.XClosure;\n+import org.eclipse.xtext.xbase.XExpression;\n+import org.eclipse.xtext.xbase.lib.util.ReflectExtensions;\n+import org.eclipse.xtext.xbase.typesystem.IBatchTypeResolver;\n+import org.eclipse.xtext.xbase.typesystem.IResolvedTypes;\n+import org.eclipse.xtext.xbase.typesystem.internal.CompoundReentrantTypeResolver;\n+import org.eclipse.xtext.xbase.typesystem.internal.RootResolvedTypes;\n+import org.eclipse.xtext.xbase.typesystem.internal.TypeData;\n+import org.eclipse.xtext.xbase.typesystem.references.LightweightTypeReference;\n+import org.junit.Assert;\n+import org.junit.ComparisonFailure;\n+\n+import com.google.common.annotations.Beta;\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+\n+/**\n+ * Utility to check a given expression for exceptions and integrity after it was processed by the {@link IBatchTypeResolver}\n+ * \n+ * @author Sebastian Zarnekow - Initial contribution and API\n+ */\n+@Beta\n+@Singleton\n+public class Oven extends Assert {\n+\t@Inject\n+\tprivate IBatchTypeResolver typeResolver;\n+\n+\t@Inject\n+\tprivate ReflectExtensions reflectExtensions;\n+\n+\t@Inject\n+\tprivate ParseHelper<EObject> parseHelper;\n+\n+\tpublic void fireproof(CharSequence input) throws Exception {\n+\t\tfireproof(input.toString());\n+\t}\n+\n+\tpublic void fireproof(String input) throws Exception {\n+\t\ttry {\n+\t\t\tEObject file = parseHelper.parse(input);\n+\t\t\tIResolvedTypes resolvedTypes = typeResolver.resolveTypes(file);\n+\t\t\tAssert.assertNotNull(resolvedTypes);\n+\t\t\tif (file != null) {\n+\t\t\t\tTreeIterator<EObject> allContents = file.eAllContents();\n+\t\t\t\twhile (allContents.hasNext()) {\n+\t\t\t\t\tEObject content = allContents.next();\n+\t\t\t\t\tif (content instanceof XAbstractFeatureCall) {\n+\t\t\t\t\t\tassertExpressionTypeIsResolved((XExpression) content, resolvedTypes);\n+\t\t\t\t\t\tXAbstractFeatureCall abstractFeatureCall = (XAbstractFeatureCall) content;\n+\t\t\t\t\t\tif (abstractFeatureCall.getImplicitReceiver() != null) {\n+\t\t\t\t\t\t\tassertExpressionTypeIsResolved(abstractFeatureCall.getImplicitReceiver(), resolvedTypes);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tif (abstractFeatureCall.getImplicitFirstArgument() != null) {\n+\t\t\t\t\t\t\tassertExpressionTypeIsResolved(abstractFeatureCall.getImplicitFirstArgument(), resolvedTypes);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else if (content instanceof XClosure) {\n+\t\t\t\t\t\tassertExpressionTypeIsResolved((XExpression) content, resolvedTypes);\n+\t\t\t\t\t\tfor (JvmFormalParameter p : ((XClosure) content).getImplicitFormalParameters()) {\n+\t\t\t\t\t\t\tassertIdentifiableTypeIsResolved(p, resolvedTypes);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else if (content instanceof XExpression) {\n+\t\t\t\t\t\tassertExpressionTypeIsResolved((XExpression) content, resolvedTypes);\n+\t\t\t\t\t} else if (content instanceof JvmIdentifiableElement) {\n+\t\t\t\t\t\tassertIdentifiableTypeIsResolved((JvmIdentifiableElement) content, resolvedTypes);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} catch (Throwable e) {\n+\t\t\tComparisonFailure error = new ComparisonFailure(e.getMessage(), input, \"\");\n+\t\t\terror.setStackTrace(e.getStackTrace());\n+\t\t\tthrow error;\n+\t\t}\n+\t}\n+\n+\tpublic void assertExpressionTypeIsResolved(XExpression expression, IResolvedTypes types) throws Exception {\n+\t\tObject internalTypes = reflectExtensions.invoke(types, \"delegate\");\n+\t\tTypeData type = null;\n+\t\tif (internalTypes instanceof CompoundReentrantTypeResolver) {\n+\t\t\tMethod method = CompoundReentrantTypeResolver.class.getDeclaredMethod(\"getDelegate\", XExpression.class);\n+\t\t\tmethod.setAccessible(true);\n+\t\t\tObject delegate = method.invoke(internalTypes, expression);\n+\t\t\tif (delegate instanceof RootResolvedTypes) {\n+\t\t\t\ttype = (TypeData) reflectExtensions.invoke(delegate, \"getTypeData\", expression, Boolean.FALSE);\n+\t\t\t}\n+\t\t} else {\n+\t\t\ttype = (TypeData) reflectExtensions.invoke(internalTypes, \"getTypeData\", expression, Boolean.FALSE);\n+\t\t}\n+\t\tboolean isOk = false;", "originalCommit": "0b2e75b92fd613127fa6f89e816186ae88f901f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYxNTAxNg==", "url": "https://github.com/eclipse/xtext-extras/pull/598#discussion_r420615016", "bodyText": "Don't need to the type info", "author": "tivervac", "createdAt": "2020-05-06T08:11:15Z", "path": "org.eclipse.xtext.xbase.tests/src/org/eclipse/xtext/xbase/tests/jvmmodel/JvmModelTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/**\n+ * Copyright (c) 2011, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xbase.tests.jvmmodel;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.xtext.resource.IEObjectDescription;\n+import org.eclipse.xtext.resource.IResourceDescription;\n+import org.eclipse.xtext.resource.XtextResourceSet;\n+import org.eclipse.xtext.testing.validation.ValidationTestHelper;\n+import org.eclipse.xtext.util.StringInputStream;\n+import org.eclipse.xtext.xbase.XExpression;\n+import org.eclipse.xtext.xbase.XbasePackage;\n+import org.eclipse.xtext.xbase.lib.util.ReflectExtensions;\n+import org.eclipse.xtext.xbase.validation.IssueCodes;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import com.google.common.collect.Lists;\n+import com.google.inject.Inject;\n+import com.google.inject.Provider;\n+\n+public class JvmModelTest extends AbstractJvmModelTest {\n+\t@Inject\n+\tprivate ValidationTestHelper helper;\n+\n+\t@Inject\n+\tprivate IResourceDescription.Manager manager;\n+\n+\t@Inject\n+\tprivate ReflectExtensions reflectExtensions;\n+\n+\t@Inject\n+\tprivate Provider<XtextResourceSet> resourceSetProvider;\n+\n+\t@Test\n+\tpublic void testSimple() throws Exception {\n+\t\tXExpression expression = expression(\"return s.toUpperCase\", false);\n+\t\tAssert.assertEquals(expression.eResource().getContents().toString(), 2, expression.eResource().getContents().size());\n+\t\thelper.assertNoErrors(expression);\n+\t}\n+\n+\t@Test\n+\tpublic void testResourceDescriptionsAreCorrect() throws Exception {\n+\t\tResource resource = newResource(\"return s.toUpperCase\");\n+\t\tboolean initialized = reflectExtensions.<Boolean> get(resource, \"fullyInitialized\").booleanValue();\n+\t\tAssert.assertFalse(initialized);\n+\t\tIResourceDescription desc = manager.getResourceDescription(resource);\n+\t\tList<Iterable<IEObjectDescription>> list = Lists.<Iterable<IEObjectDescription>> newArrayList(desc.getExportedObjects());", "originalCommit": "0b2e75b92fd613127fa6f89e816186ae88f901f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYxNTU0NQ==", "url": "https://github.com/eclipse/xtext-extras/pull/598#discussion_r420615545", "bodyText": "List instead of EList", "author": "tivervac", "createdAt": "2020-05-06T08:12:17Z", "path": "org.eclipse.xtext.xbase.tests/src/org/eclipse/xtext/xbase/tests/jvmmodel/JvmTypeReferenceBuilderTest.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/**\n+ * Copyright (c) 2014, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xbase.tests.jvmmodel;\n+\n+import java.util.List;\n+\n+import org.eclipse.emf.common.util.EList;\n+import org.eclipse.xtext.common.types.JvmLowerBound;\n+import org.eclipse.xtext.common.types.JvmParameterizedTypeReference;\n+import org.eclipse.xtext.common.types.JvmTypeConstraint;\n+import org.eclipse.xtext.common.types.JvmTypeReference;\n+import org.eclipse.xtext.common.types.JvmUnknownTypeReference;\n+import org.eclipse.xtext.common.types.JvmUpperBound;\n+import org.eclipse.xtext.common.types.JvmWildcardTypeReference;\n+import org.eclipse.xtext.resource.XtextResourceSet;\n+import org.eclipse.xtext.xbase.jvmmodel.JvmTypeReferenceBuilder;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.google.common.collect.Iterables;\n+import com.google.inject.Inject;\n+import com.google.inject.Provider;\n+\n+/**\n+ * @author Sven Efftinge - Initial contribution and API\n+ */\n+public class JvmTypeReferenceBuilderTest extends AbstractJvmModelTest {\n+\t@Inject\n+\tprivate JvmTypeReferenceBuilder.Factory typeReferenceBuilderFactory;\n+\n+\t@Inject\n+\tprivate Provider<XtextResourceSet> resourceSetProvider;\n+\n+\tprivate JvmTypeReferenceBuilder typeReferenceBuilder;\n+\n+\t@Before\n+\tpublic void setUp() {\n+\t\ttypeReferenceBuilder = typeReferenceBuilderFactory.create(resourceSetProvider.get());\n+\t}\n+\n+\t@Test\n+\tpublic void testTypeRef_01() {\n+\t\tJvmTypeReference stringType = typeReferenceBuilder.typeRef(String.class);\n+\t\tAssert.assertEquals(\"java.lang.String\", stringType.getIdentifier());\n+\t}\n+\n+\t@Test\n+\tpublic void testTypeRef_02() {\n+\t\tJvmParameterizedTypeReference type = (JvmParameterizedTypeReference) typeReferenceBuilder.typeRef(List.class);\n+\t\tAssert.assertEquals(\"java.util.List\", type.getIdentifier());\n+\t\tAssert.assertTrue(type.getArguments().isEmpty());\n+\t}\n+\n+\t@Test\n+\tpublic void testTypeRef_03() {\n+\t\ttry {\n+\t\t\ttypeReferenceBuilder.typeRef(List.class, typeReferenceBuilder.typeRef(String.class),\n+\t\t\t\t\ttypeReferenceBuilder.typeRef(String.class));\n+\t\t\tAssert.fail();\n+\t\t} catch (IllegalArgumentException e) {\n+\t\t\t// ok\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void testTypeRef_04() {\n+\t\ttry {\n+\t\t\ttypeReferenceBuilder.typeRef(List[].class, typeReferenceBuilder.typeRef(String.class));\n+\t\t\tAssert.fail();\n+\t\t} catch (IllegalArgumentException e) {\n+\t\t\t// ok\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void testTypeRef_05() {\n+\t\tJvmTypeReference typeRef = typeReferenceBuilder.typeRef(\"hubble.Fubble\", typeReferenceBuilder.typeRef(String.class));\n+\t\tAssert.assertTrue(typeRef instanceof JvmUnknownTypeReference);\n+\t\tAssert.assertEquals(\"hubble.Fubble\", typeRef.getQualifiedName());\n+\t}\n+\n+\t@Test\n+\tpublic void testWildcard_01() {\n+\t\tAssert.assertEquals(\"java.lang.Object\",\n+\t\t\t\tIterables.getFirst(((JvmWildcardTypeReference) typeReferenceBuilder.wildcard()).getConstraints(), null).getTypeReference()\n+\t\t\t\t\t\t.getIdentifier());\n+\t}\n+\n+\t@Test\n+\tpublic void testWildcard_02() {\n+\t\tEList<JvmTypeConstraint> constraints = ((JvmWildcardTypeReference) typeReferenceBuilder", "originalCommit": "0b2e75b92fd613127fa6f89e816186ae88f901f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "92a31940c0e75506e54845a8e4fa6ec2f3e30f29", "chunk": "diff --git a/org.eclipse.xtext.xbase.tests/src/org/eclipse/xtext/xbase/tests/jvmmodel/JvmTypeReferenceBuilderTest.java b/org.eclipse.xtext.xbase.tests/src/org/eclipse/xtext/xbase/tests/jvmmodel/JvmTypeReferenceBuilderTest.java\nindex 418a2f207..2f5cee8b7 100644\n--- a/org.eclipse.xtext.xbase.tests/src/org/eclipse/xtext/xbase/tests/jvmmodel/JvmTypeReferenceBuilderTest.java\n+++ b/org.eclipse.xtext.xbase.tests/src/org/eclipse/xtext/xbase/tests/jvmmodel/JvmTypeReferenceBuilderTest.java\n\n@@ -10,7 +10,6 @@ package org.eclipse.xtext.xbase.tests.jvmmodel;\n \n import java.util.List;\n \n-import org.eclipse.emf.common.util.EList;\n import org.eclipse.xtext.common.types.JvmLowerBound;\n import org.eclipse.xtext.common.types.JvmParameterizedTypeReference;\n import org.eclipse.xtext.common.types.JvmTypeConstraint;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYxNTYzMQ==", "url": "https://github.com/eclipse/xtext-extras/pull/598#discussion_r420615631", "bodyText": "Same", "author": "tivervac", "createdAt": "2020-05-06T08:12:27Z", "path": "org.eclipse.xtext.xbase.tests/src/org/eclipse/xtext/xbase/tests/jvmmodel/JvmTypeReferenceBuilderTest.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/**\n+ * Copyright (c) 2014, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xbase.tests.jvmmodel;\n+\n+import java.util.List;\n+\n+import org.eclipse.emf.common.util.EList;\n+import org.eclipse.xtext.common.types.JvmLowerBound;\n+import org.eclipse.xtext.common.types.JvmParameterizedTypeReference;\n+import org.eclipse.xtext.common.types.JvmTypeConstraint;\n+import org.eclipse.xtext.common.types.JvmTypeReference;\n+import org.eclipse.xtext.common.types.JvmUnknownTypeReference;\n+import org.eclipse.xtext.common.types.JvmUpperBound;\n+import org.eclipse.xtext.common.types.JvmWildcardTypeReference;\n+import org.eclipse.xtext.resource.XtextResourceSet;\n+import org.eclipse.xtext.xbase.jvmmodel.JvmTypeReferenceBuilder;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.google.common.collect.Iterables;\n+import com.google.inject.Inject;\n+import com.google.inject.Provider;\n+\n+/**\n+ * @author Sven Efftinge - Initial contribution and API\n+ */\n+public class JvmTypeReferenceBuilderTest extends AbstractJvmModelTest {\n+\t@Inject\n+\tprivate JvmTypeReferenceBuilder.Factory typeReferenceBuilderFactory;\n+\n+\t@Inject\n+\tprivate Provider<XtextResourceSet> resourceSetProvider;\n+\n+\tprivate JvmTypeReferenceBuilder typeReferenceBuilder;\n+\n+\t@Before\n+\tpublic void setUp() {\n+\t\ttypeReferenceBuilder = typeReferenceBuilderFactory.create(resourceSetProvider.get());\n+\t}\n+\n+\t@Test\n+\tpublic void testTypeRef_01() {\n+\t\tJvmTypeReference stringType = typeReferenceBuilder.typeRef(String.class);\n+\t\tAssert.assertEquals(\"java.lang.String\", stringType.getIdentifier());\n+\t}\n+\n+\t@Test\n+\tpublic void testTypeRef_02() {\n+\t\tJvmParameterizedTypeReference type = (JvmParameterizedTypeReference) typeReferenceBuilder.typeRef(List.class);\n+\t\tAssert.assertEquals(\"java.util.List\", type.getIdentifier());\n+\t\tAssert.assertTrue(type.getArguments().isEmpty());\n+\t}\n+\n+\t@Test\n+\tpublic void testTypeRef_03() {\n+\t\ttry {\n+\t\t\ttypeReferenceBuilder.typeRef(List.class, typeReferenceBuilder.typeRef(String.class),\n+\t\t\t\t\ttypeReferenceBuilder.typeRef(String.class));\n+\t\t\tAssert.fail();\n+\t\t} catch (IllegalArgumentException e) {\n+\t\t\t// ok\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void testTypeRef_04() {\n+\t\ttry {\n+\t\t\ttypeReferenceBuilder.typeRef(List[].class, typeReferenceBuilder.typeRef(String.class));\n+\t\t\tAssert.fail();\n+\t\t} catch (IllegalArgumentException e) {\n+\t\t\t// ok\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void testTypeRef_05() {\n+\t\tJvmTypeReference typeRef = typeReferenceBuilder.typeRef(\"hubble.Fubble\", typeReferenceBuilder.typeRef(String.class));\n+\t\tAssert.assertTrue(typeRef instanceof JvmUnknownTypeReference);\n+\t\tAssert.assertEquals(\"hubble.Fubble\", typeRef.getQualifiedName());\n+\t}\n+\n+\t@Test\n+\tpublic void testWildcard_01() {\n+\t\tAssert.assertEquals(\"java.lang.Object\",\n+\t\t\t\tIterables.getFirst(((JvmWildcardTypeReference) typeReferenceBuilder.wildcard()).getConstraints(), null).getTypeReference()\n+\t\t\t\t\t\t.getIdentifier());\n+\t}\n+\n+\t@Test\n+\tpublic void testWildcard_02() {\n+\t\tEList<JvmTypeConstraint> constraints = ((JvmWildcardTypeReference) typeReferenceBuilder\n+\t\t\t\t.wildcardExtends(typeReferenceBuilder.typeRef(CharSequence.class))).getConstraints();\n+\t\tAssert.assertEquals(1, constraints.size());\n+\t\tAssert.assertEquals(\"java.lang.CharSequence\",\n+\t\t\t\tIterables.getFirst(Iterables.filter(constraints, JvmUpperBound.class), null).getTypeReference().getIdentifier());\n+\t}\n+\n+\t@Test\n+\tpublic void testWildcard_03() {\n+\t\tEList<JvmTypeConstraint> constraints = ((JvmWildcardTypeReference) typeReferenceBuilder", "originalCommit": "0b2e75b92fd613127fa6f89e816186ae88f901f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "92a31940c0e75506e54845a8e4fa6ec2f3e30f29", "chunk": "diff --git a/org.eclipse.xtext.xbase.tests/src/org/eclipse/xtext/xbase/tests/jvmmodel/JvmTypeReferenceBuilderTest.java b/org.eclipse.xtext.xbase.tests/src/org/eclipse/xtext/xbase/tests/jvmmodel/JvmTypeReferenceBuilderTest.java\nindex 418a2f207..2f5cee8b7 100644\n--- a/org.eclipse.xtext.xbase.tests/src/org/eclipse/xtext/xbase/tests/jvmmodel/JvmTypeReferenceBuilderTest.java\n+++ b/org.eclipse.xtext.xbase.tests/src/org/eclipse/xtext/xbase/tests/jvmmodel/JvmTypeReferenceBuilderTest.java\n\n@@ -10,7 +10,6 @@ package org.eclipse.xtext.xbase.tests.jvmmodel;\n \n import java.util.List;\n \n-import org.eclipse.emf.common.util.EList;\n import org.eclipse.xtext.common.types.JvmLowerBound;\n import org.eclipse.xtext.common.types.JvmParameterizedTypeReference;\n import org.eclipse.xtext.common.types.JvmTypeConstraint;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYxNTg1OA==", "url": "https://github.com/eclipse/xtext-extras/pull/598#discussion_r420615858", "bodyText": "Is this still true?", "author": "tivervac", "createdAt": "2020-05-06T08:12:56Z", "path": "org.eclipse.xtext.xbase.tests/src/org/eclipse/xtext/xbase/tests/jvmmodel/TypeSignatureHashTest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/**\n+ * Copyright (c) 2011, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xbase.tests.jvmmodel;\n+\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.EcoreFactory;\n+import org.eclipse.xtext.common.types.JvmConstructor;\n+import org.eclipse.xtext.common.types.JvmDeclaredType;\n+import org.eclipse.xtext.common.types.JvmGenericType;\n+import org.eclipse.xtext.common.types.descriptions.JvmDeclaredTypeSignatureHashProvider;\n+import org.eclipse.xtext.common.types.util.TypeReferences;\n+import org.eclipse.xtext.util.Strings;\n+import org.eclipse.xtext.xbase.XExpression;\n+import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder;\n+import org.eclipse.xtext.xbase.tests.AbstractXbaseTestCase;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * The remaining tests are in xtend.core.tests, as it is a lot easier to specify JvmModels in Xtend ;-)", "originalCommit": "0b2e75b92fd613127fa6f89e816186ae88f901f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYyMTk3Ng==", "url": "https://github.com/eclipse/xtext-extras/pull/598#discussion_r420621976", "bodyText": "yes", "author": "cdietrich", "createdAt": "2020-05-06T08:24:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYxNTg1OA=="}], "type": "inlineReview", "revised_code": {"commit": "92a31940c0e75506e54845a8e4fa6ec2f3e30f29", "chunk": "diff --git a/org.eclipse.xtext.xbase.tests/src/org/eclipse/xtext/xbase/tests/jvmmodel/TypeSignatureHashTest.java b/org.eclipse.xtext.xbase.tests/src/org/eclipse/xtext/xbase/tests/jvmmodel/TypeSignatureHashTest.java\nindex e2cd0e56e..38d6f171a 100644\n--- a/org.eclipse.xtext.xbase.tests/src/org/eclipse/xtext/xbase/tests/jvmmodel/TypeSignatureHashTest.java\n+++ b/org.eclipse.xtext.xbase.tests/src/org/eclipse/xtext/xbase/tests/jvmmodel/TypeSignatureHashTest.java\n\n@@ -69,8 +69,7 @@ public class TypeSignatureHashTest extends AbstractXbaseTestCase {\n \t\tbar.getSuperTypes().add(typeReferences.createTypeRef(foo));\n \t\tfoo.getSuperTypes().add(typeReferences.createTypeRef(bar));\n \t\tAssert.assertNotNull(jvmDeclaredTypeSignatureHashProvider.getHash(foo));\n-\t\tAssert.assertFalse(\n-\t\t\t\tStrings.equal(jvmDeclaredTypeSignatureHashProvider.getHash(foo), jvmDeclaredTypeSignatureHashProvider.getHash(bar)));\n+\t\tAssert.assertNotEquals(jvmDeclaredTypeSignatureHashProvider.getHash(foo), jvmDeclaredTypeSignatureHashProvider.getHash(bar));\n \t}\n \n \t@Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYxNjE2MA==", "url": "https://github.com/eclipse/xtext-extras/pull/598#discussion_r420616160", "bodyText": "AssertEquals", "author": "tivervac", "createdAt": "2020-05-06T08:13:33Z", "path": "org.eclipse.xtext.xbase.tests/src/org/eclipse/xtext/xbase/tests/jvmmodel/TypeSignatureHashTest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/**\n+ * Copyright (c) 2011, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xbase.tests.jvmmodel;\n+\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.EcoreFactory;\n+import org.eclipse.xtext.common.types.JvmConstructor;\n+import org.eclipse.xtext.common.types.JvmDeclaredType;\n+import org.eclipse.xtext.common.types.JvmGenericType;\n+import org.eclipse.xtext.common.types.descriptions.JvmDeclaredTypeSignatureHashProvider;\n+import org.eclipse.xtext.common.types.util.TypeReferences;\n+import org.eclipse.xtext.util.Strings;\n+import org.eclipse.xtext.xbase.XExpression;\n+import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder;\n+import org.eclipse.xtext.xbase.tests.AbstractXbaseTestCase;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * The remaining tests are in xtend.core.tests, as it is a lot easier to specify JvmModels in Xtend ;-)\n+ * \n+ * @author Jan Koehnlein - Initial contribution and API\n+ */\n+public class TypeSignatureHashTest extends AbstractXbaseTestCase {\n+\t@Inject\n+\tprivate JvmDeclaredTypeSignatureHashProvider jvmDeclaredTypeSignatureHashProvider;\n+\n+\t@Inject\n+\tprivate JvmTypesBuilder jvmTypesBuilder;\n+\n+\t@Inject\n+\tprivate TypeReferences typeReferences;\n+\n+\t@Test\n+\tpublic void testSubType() {\n+\t\tEObject eObject = EcoreFactory.eINSTANCE.createEObject();\n+\t\tJvmGenericType bar = jvmTypesBuilder.toClass(eObject, \"Bar\");\n+\t\tJvmGenericType foo = jvmTypesBuilder.toClass(eObject, \"Foo\", (JvmGenericType it) -> {\n+\t\t\tit.getMembers().add(bar);\n+\t\t});\n+\t\tString hash = jvmDeclaredTypeSignatureHashProvider.getHash(foo);\n+\t\tbar.getMembers().add(jvmTypesBuilder.toConstructor(eObject, (JvmConstructor it) -> {\n+\t\t}));\n+\t\tAssert.assertEquals(hash, jvmDeclaredTypeSignatureHashProvider.getHash(foo));\n+\t\tbar.setSimpleName(\"Baz\");\n+\t\tAssert.assertFalse(\"Expected different hashes\", Strings.equal(hash, jvmDeclaredTypeSignatureHashProvider.getHash(foo)));\n+\t}\n+\n+\t@Test\n+\tpublic void testUnsealedType() {\n+\t\tEObject eObject = EcoreFactory.eINSTANCE.createEObject();\n+\t\tJvmGenericType bar = jvmTypesBuilder.toClass(eObject, \"Bar\");\n+\t\tAssert.assertFalse(Strings.equal(\"Bar\", jvmDeclaredTypeSignatureHashProvider.getHash(bar)));", "originalCommit": "0b2e75b92fd613127fa6f89e816186ae88f901f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYyMzcyNA==", "url": "https://github.com/eclipse/xtext-extras/pull/598#discussion_r420623724", "bodyText": "changed to assertNotEquals", "author": "cdietrich", "createdAt": "2020-05-06T08:27:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYxNjE2MA=="}], "type": "inlineReview", "revised_code": {"commit": "92a31940c0e75506e54845a8e4fa6ec2f3e30f29", "chunk": "diff --git a/org.eclipse.xtext.xbase.tests/src/org/eclipse/xtext/xbase/tests/jvmmodel/TypeSignatureHashTest.java b/org.eclipse.xtext.xbase.tests/src/org/eclipse/xtext/xbase/tests/jvmmodel/TypeSignatureHashTest.java\nindex e2cd0e56e..38d6f171a 100644\n--- a/org.eclipse.xtext.xbase.tests/src/org/eclipse/xtext/xbase/tests/jvmmodel/TypeSignatureHashTest.java\n+++ b/org.eclipse.xtext.xbase.tests/src/org/eclipse/xtext/xbase/tests/jvmmodel/TypeSignatureHashTest.java\n\n@@ -69,8 +69,7 @@ public class TypeSignatureHashTest extends AbstractXbaseTestCase {\n \t\tbar.getSuperTypes().add(typeReferences.createTypeRef(foo));\n \t\tfoo.getSuperTypes().add(typeReferences.createTypeRef(bar));\n \t\tAssert.assertNotNull(jvmDeclaredTypeSignatureHashProvider.getHash(foo));\n-\t\tAssert.assertFalse(\n-\t\t\t\tStrings.equal(jvmDeclaredTypeSignatureHashProvider.getHash(foo), jvmDeclaredTypeSignatureHashProvider.getHash(bar)));\n+\t\tAssert.assertNotEquals(jvmDeclaredTypeSignatureHashProvider.getHash(foo), jvmDeclaredTypeSignatureHashProvider.getHash(bar));\n \t}\n \n \t@Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYxNjcwOQ==", "url": "https://github.com/eclipse/xtext-extras/pull/598#discussion_r420616709", "bodyText": "Inline?", "author": "tivervac", "createdAt": "2020-05-06T08:14:34Z", "path": "org.eclipse.xtext.xbase.tests/src/org/eclipse/xtext/xbase/tests/linking/BatchLinkingTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/**\n+ * Copyright (c) 2012, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xbase.tests.linking;\n+\n+import org.eclipse.emf.common.util.TreeIterator;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.InternalEObject;\n+import org.eclipse.xtext.common.types.JvmIdentifiableElement;\n+import org.eclipse.xtext.xbase.XAbstractFeatureCall;\n+import org.eclipse.xtext.xbase.XConstructorCall;\n+import org.eclipse.xtext.xbase.XExpression;\n+import org.eclipse.xtext.xbase.XbasePackage;\n+import org.eclipse.xtext.xbase.typesystem.IBatchTypeResolver;\n+import org.eclipse.xtext.xbase.typesystem.IResolvedTypes;\n+import org.eclipse.xtext.xbase.typesystem.references.LightweightTypeReference;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author Sebastian Zarnekow - Initial contribution and API\n+ */\n+public class BatchLinkingTest extends AbstractXbaseLinkingTest {\n+\t@Inject\n+\tprivate IBatchTypeResolver typeResolver;\n+\n+\tprivate boolean failOnUnresolvedProxy = true;\n+\n+\t@Before\n+\tpublic void init() {\n+\t\tfailOnUnresolvedProxy = true;\n+\t}\n+\n+\t@Override\n+\tpublic XExpression expression(CharSequence string, boolean resolve) throws Exception {\n+\t\tfailOnUnresolvedProxy = resolve;\n+\t\tXExpression result = super.expression(string, false);\n+\t\tIResolvedTypes resolvedTypes = typeResolver.resolveTypes(result);\n+\t\tTreeIterator<EObject> allContents = result.eAllContents();\n+\t\twhile (allContents.hasNext()) {\n+\t\t\tEObject content = allContents.next();\n+\t\t\tif (content instanceof XAbstractFeatureCall) {\n+\t\t\t\tassertExpressionTypeIsResolved(((XExpression) content), resolvedTypes);\n+\t\t\t\tXAbstractFeatureCall abstractFeatureCall = (XAbstractFeatureCall) content;\n+\t\t\t\tif (abstractFeatureCall.getImplicitReceiver() != null) {\n+\t\t\t\t\tassertExpressionTypeIsResolved(abstractFeatureCall.getImplicitReceiver(), resolvedTypes);\n+\t\t\t\t}\n+\t\t\t} else if (content instanceof XExpression) {\n+\t\t\t\tassertExpressionTypeIsResolved(((XExpression) content), resolvedTypes);\n+\t\t\t} else if (content instanceof JvmIdentifiableElement) {\n+\t\t\t\tassertIdentifiableTypeIsResolved(((JvmIdentifiableElement) content), resolvedTypes);\n+\t\t\t}\n+\t\t}\n+\t\tif (failOnUnresolvedProxy) {\n+\t\t\tallContents = result.eAllContents();\n+\t\t\twhile (allContents.hasNext()) {\n+\t\t\t\tEObject content = allContents.next();\n+\t\t\t\tif (content instanceof XConstructorCall) {\n+\t\t\t\t\tXConstructorCall constructorCall = (XConstructorCall) content;\n+\t\t\t\t\tObject _eGet = constructorCall.eGet(XbasePackage.Literals.XCONSTRUCTOR_CALL__CONSTRUCTOR, false);", "originalCommit": "0b2e75b92fd613127fa6f89e816186ae88f901f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "92a31940c0e75506e54845a8e4fa6ec2f3e30f29", "chunk": "diff --git a/org.eclipse.xtext.xbase.tests/src/org/eclipse/xtext/xbase/tests/linking/BatchLinkingTest.java b/org.eclipse.xtext.xbase.tests/src/org/eclipse/xtext/xbase/tests/linking/BatchLinkingTest.java\nindex dea498181..f767e211c 100644\n--- a/org.eclipse.xtext.xbase.tests/src/org/eclipse/xtext/xbase/tests/linking/BatchLinkingTest.java\n+++ b/org.eclipse.xtext.xbase.tests/src/org/eclipse/xtext/xbase/tests/linking/BatchLinkingTest.java\n\n@@ -65,8 +65,8 @@ public class BatchLinkingTest extends AbstractXbaseLinkingTest {\n \t\t\t\tEObject content = allContents.next();\n \t\t\t\tif (content instanceof XConstructorCall) {\n \t\t\t\t\tXConstructorCall constructorCall = (XConstructorCall) content;\n-\t\t\t\t\tObject _eGet = constructorCall.eGet(XbasePackage.Literals.XCONSTRUCTOR_CALL__CONSTRUCTOR, false);\n-\t\t\t\t\tInternalEObject constructor = (InternalEObject) _eGet;\n+\t\t\t\t\tInternalEObject constructor = (InternalEObject) constructorCall\n+\t\t\t\t\t\t\t.eGet(XbasePackage.Literals.XCONSTRUCTOR_CALL__CONSTRUCTOR, false);\n \t\t\t\t\tAssert.assertNotNull(constructorCall.toString(), constructor);\n \t\t\t\t\tAssert.assertFalse(constructorCall.toString(), constructor.eIsProxy());\n \t\t\t\t} else if (content instanceof XAbstractFeatureCall) {\n"}}, {"oid": "92a31940c0e75506e54845a8e4fa6ec2f3e30f29", "url": "https://github.com/eclipse/xtext-extras/commit/92a31940c0e75506e54845a8e4fa6ec2f3e30f29", "message": "[eclipse/xtext#1679]ported more test code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-05-06T08:26:38Z", "type": "forcePushed"}, {"oid": "38a2d691e3022fc7f58908db5d2a3e5a7370dbe6", "url": "https://github.com/eclipse/xtext-extras/commit/38a2d691e3022fc7f58908db5d2a3e5a7370dbe6", "message": "[eclipse/xtext#1679]ported more test code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-05-06T08:28:44Z", "type": "forcePushed"}, {"oid": "b6eda04a269c50fd9dfc6f79918bc3c9f2e7007f", "url": "https://github.com/eclipse/xtext-extras/commit/b6eda04a269c50fd9dfc6f79918bc3c9f2e7007f", "message": "[eclipse/xtext#1679]ported more test code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-05-08T06:56:56Z", "type": "forcePushed"}, {"oid": "0e4cd881bcd8812ffad79c13e094d227b86ab258", "url": "https://github.com/eclipse/xtext-extras/commit/0e4cd881bcd8812ffad79c13e094d227b86ab258", "message": "[eclipse/xtext#1679]ported more test code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-05-08T07:15:57Z", "type": "forcePushed"}, {"oid": "d5c9c749b3b66c66d379922979ac35b6413c0b3f", "url": "https://github.com/eclipse/xtext-extras/commit/d5c9c749b3b66c66d379922979ac35b6413c0b3f", "message": "[eclipse/xtext#1679]ported more test code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-05-08T07:37:22Z", "type": "forcePushed"}, {"oid": "be22fa842e64de01725aff2bb7ae95006b49b479", "url": "https://github.com/eclipse/xtext-extras/commit/be22fa842e64de01725aff2bb7ae95006b49b479", "message": "[eclipse/xtext#1679]ported more test code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-05-08T08:17:13Z", "type": "commit"}, {"oid": "be22fa842e64de01725aff2bb7ae95006b49b479", "url": "https://github.com/eclipse/xtext-extras/commit/be22fa842e64de01725aff2bb7ae95006b49b479", "message": "[eclipse/xtext#1679]ported more test code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-05-08T08:17:13Z", "type": "forcePushed"}]}