{"pr_number": 646, "pr_title": "[eclipse/xtext#1837] ported xtend code to java", "pr_createdAt": "2020-09-19T13:17:27Z", "pr_url": "https://github.com/eclipse/xtext-extras/pull/646", "timeline": [{"oid": "af8c0a4e3e8836b6dd5f8438ab170f8d9750dbbc", "url": "https://github.com/eclipse/xtext-extras/commit/af8c0a4e3e8836b6dd5f8438ab170f8d9750dbbc", "message": "[eclipse/xtext#1837] ported xtend code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-09-19T13:19:36Z", "type": "forcePushed"}, {"oid": "a4696fac5cc5e0cb9143acc0fc69b2f1111000a8", "url": "https://github.com/eclipse/xtext-extras/commit/a4696fac5cc5e0cb9143acc0fc69b2f1111000a8", "message": "[eclipse/xtext#1837] ported xtend code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-09-19T13:23:46Z", "type": "forcePushed"}, {"oid": "a3c3ae18a458a5952ac6c96fd856897c2ea4dc4f", "url": "https://github.com/eclipse/xtext-extras/commit/a3c3ae18a458a5952ac6c96fd856897c2ea4dc4f", "message": "[eclipse/xtext#1837] ported xtend code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-09-19T13:47:02Z", "type": "forcePushed"}, {"oid": "7eb1899edf275b8d252d818b741bf1fcd8a269fd", "url": "https://github.com/eclipse/xtext-extras/commit/7eb1899edf275b8d252d818b741bf1fcd8a269fd", "message": "[eclipse/xtext#1837] ported xtend code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-09-19T14:08:16Z", "type": "forcePushed"}, {"oid": "6b64b58fc5c3f8bf169e06303c0459f1b7c444eb", "url": "https://github.com/eclipse/xtext-extras/commit/6b64b58fc5c3f8bf169e06303c0459f1b7c444eb", "message": "[eclipse/xtext#1837] ported xtend code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-09-19T14:25:55Z", "type": "forcePushed"}, {"oid": "e6073c860ddaa4cb2e2b330d380ffbc9dfaee15b", "url": "https://github.com/eclipse/xtext-extras/commit/e6073c860ddaa4cb2e2b330d380ffbc9dfaee15b", "message": "[eclipse/xtext#1837] ported xtend code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-09-20T06:51:06Z", "type": "commit"}, {"oid": "e6073c860ddaa4cb2e2b330d380ffbc9dfaee15b", "url": "https://github.com/eclipse/xtext-extras/commit/e6073c860ddaa4cb2e2b330d380ffbc9dfaee15b", "message": "[eclipse/xtext#1837] ported xtend code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-09-20T06:51:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg1OTE2OA==", "url": "https://github.com/eclipse/xtext-extras/pull/646#discussion_r491859168", "bodyText": "All the tricks, hey :)", "author": "szarnekow", "createdAt": "2020-09-21T08:10:08Z", "path": "org.eclipse.xtext.xbase.tests/longrunning/src/org/eclipse/xtext/xbase/tests/typesystem/AbstractReturnTypeTest.java", "diffHunk": "@@ -0,0 +1,461 @@\n+/**\n+ * Copyright (c) 2012, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xbase.tests.typesystem;\n+\n+import org.eclipse.xtext.xbase.tests.AbstractXbaseTestCase;\n+import org.junit.Test;\n+\n+/**\n+ * @author Sebastian Zarnekow - Initial contribution and API\n+ */\n+public abstract class AbstractReturnTypeTest<Reference extends Object> extends AbstractTypeResolverTest<Reference> {\n+\t@Test\n+\t@Override\n+\tpublic void testReturnExpression_01() throws Exception {\n+\t\tresolvesTo(\"return 'foo'\", \"String\");\n+\t}\n+\n+\t@Test\n+\t@Override\n+\tpublic void testReturnExpression_02() throws Exception {\n+\t\tresolvesTo(\"return try { if (true) 'foo' else 'bar' } finally { String::valueOf('zonk') }\", \"String\");\n+\t}\n+\n+\t@Test\n+\t@Override\n+\tpublic void testReturnExpression_03() throws Exception {\n+\t\tresolvesTo(\"{ val c = [ int i | return i ] c.apply(1) return null }\", \"null\");\n+\t}\n+\n+\t@Test\n+\t@Override\n+\tpublic void testReturnExpression_04() throws Exception {\n+\t\tresolvesTo(\"{ val c = [ int i | i ] c.apply(1) return null }\", \"null\");\n+\t}\n+\n+\t@Test\n+\t@Override\n+\tpublic void testReturnExpression_06() throws Exception {\n+\t\tresolvesTo(\"{ var closure = [| return 'literal'] return closure.apply }\", \"String\");\n+\t}\n+\n+\t@Test\n+\t@Override\n+\tpublic void testReturnExpression_08() throws Exception {\n+\t\tresolvesTo(\"return [| return 'literal'].apply\", \"String\");\n+\t}\n+\n+\t@Test\n+\t@Override\n+\tpublic void testReturnExpression_10() throws Exception {\n+\t\tresolvesTo(\"return if (true) while(false) ('foo'+'bar').length\", \"null\");\n+\t}\n+\n+\t@Test\n+\t@Override\n+\tpublic void testBooleanLiteral_02() throws Exception {\n+\t\tresolvesTo(\"return true\", \"boolean\");\n+\t}\n+\n+\t@Test\n+\t@Override\n+\tpublic void testIfExpression_03() throws Exception {\n+\t\tresolvesTo(\"if (true) return 'foo'\", \"String\");\n+\t}\n+\n+\t@Test\n+\t@Override\n+\tpublic void testIfExpression_04() throws Exception {\n+\t\tif (AbstractXbaseTestCase.isJava11OrLater()) {\n+\t\t\tresolvesTo(\"if (true) return '' else new StringBuilder\", \"Serializable & Comparable<?> & CharSequence\");\n+\t\t} else {\n+\t\t\tresolvesTo(\"if (true) return '' else new StringBuilder\", \"Serializable & CharSequence\");\n+\t\t}\n+\t}\n+\n+\t@Test\n+\t@Override\n+\tpublic void testIfExpression_17() throws Exception {\n+\t\tresolvesTo(\"if (true) return 1\", \"int\");\n+\t}\n+\n+\t@Test\n+\t@Override\n+\tpublic void testIfExpression_19() throws Exception {\n+\t\tresolvesTo(\"if (true) return else null\", \"void\");\n+\t}\n+\n+\t@Test\n+\t@Override\n+\tpublic void testIfExpression_23() throws Exception {\n+\t\tresolvesTo(\"{ val x = if (true) return 1 x }\", \"Integer\");\n+\t}\n+\n+\t@Test\n+\t@Override\n+\tpublic void testIfExpression_24() throws Exception {\n+\t\tresolvesTo(\"{ val x = if (true) return; x }\", \"void\");\n+\t}\n+\n+\t@Test\n+\t@Override\n+\tpublic void testIfExpression_25() throws Exception {\n+\t\tresolvesTo(\"{ val x = if (true) return else null x }\", \"void\");\n+\t}\n+\n+\t@Test\n+\t@Override\n+\tpublic void testIfExpression_28() throws Exception {\n+\t\tif (AbstractXbaseTestCase.isJava12OrLater()) {\n+\t\t\tresolvesTo(\"if (true) return '' else 1\", \"Comparable<?> & Constable & ConstantDesc & Serializable\");\n+\t\t} else {\n+\t\t\tresolvesTo(\"if (true) return '' else 1\", \"Comparable<?> & Serializable\");\n+\t\t}\n+\t}\n+\n+\t@Test\n+\t@Override\n+\tpublic void testSwitchExpression_1() throws Exception {\n+\t\tresolvesTo(\"switch true { case true : return 's' default: null}\", \"String\");\n+\t}\n+\n+\t@Test\n+\t@Override\n+\tpublic void testSwitchExpression_2() throws Exception {\n+\t\tresolvesTo(\"switch null { Object : return null }\", \"null\");\n+\t}\n+\n+\t@Test\n+\t@Override\n+\tpublic void testForExpression_05() throws Exception {\n+\t\tresolvesTo(\"for(String x : new java.util.ArrayList<String>()) return x.length\", \"Integer\");\n+\t\tresolvesTo(\"for(String x : newArrayList('foo')) return x.length\", \"Integer\");\n+\t\tresolvesTo(\"for(String x : <String>newArrayList()) return x.length\", \"Integer\");\n+\t}\n+\n+\t@Test\n+\t@Override\n+\tpublic void testForExpression_06() throws Exception {\n+\t\tresolvesTo(\"for(x : new java.util.ArrayList<String>()) return x.length\", \"Integer\");\n+\t\tresolvesTo(\"for(x : <String>newArrayList()) return x.length\", \"Integer\");\n+\t\tresolvesTo(\"for(x : newArrayList('foo')) return x.length\", \"Integer\");\n+\t}\n+\n+\t@Test\n+\t@Override\n+\tpublic void testForExpression_07() throws Exception {\n+\t\tresolvesTo(\"for(String x : null as String[]) return x.length\", \"Integer\");\n+\t}\n+\n+\t@Test\n+\t@Override\n+\tpublic void testForExpression_08() throws Exception {\n+\t\tresolvesTo(\"for(x : null as String[]) return x.length\", \"Integer\");\n+\t}\n+\n+\t@Test\n+\tpublic void testForExpression_10() throws Exception {\n+\t\tresolvesTo(\"{ for(x : null as String[]) return x.length 1 }\", \"int\");\n+\t}\n+\n+\t@Test\n+\tpublic void testForExpression_11() throws Exception {\n+\t\tresolvesTo(\"for(x : null as String[]) if (true) return 1\", \"Integer\");\n+\t}\n+\n+\t@Test\n+\tpublic void testForExpression_12() throws Exception {\n+\t\tresolvesTo(\"for(x : null as String[]) if (true) return 1 else return 2\", \"Integer\");\n+\t}\n+\n+\t@Test\n+\t@Override\n+\tpublic void testWhileExpression_02() throws Exception {\n+\t\tresolvesTo(\"while(true) return 1\", \"Integer\");\n+\t}\n+\n+\t@Test\n+\tpublic void testWhileExpression_03() throws Exception {\n+\t\tresolvesTo(\"while(if (true) return 1 else false) ''.length\", \"Integer\");\n+\t}\n+\n+\t@Test\n+\tpublic void testWhileExpression_04() throws Exception {\n+\t\tresolvesTo(\"while(null instanceof String) return ''\", \"String\");\n+\t}\n+\n+\t@Test\n+\tpublic void testWhileExpression_05() throws Exception {\n+\t\tresolvesTo(\"{ while(null instanceof String) return '' return '' }\", \"String\");\n+\t}\n+\n+\t@Test\n+\tpublic void testWhileExpression_EarlyExitWithSwitchCase() throws Exception {\n+\t\t// @formatter:off\n+\t\tresolvesTo(\n+\t\t\t\t\"while(true) {\\n\" +\n+\t\t\t\t\"\tswitch 'test' {\\n\" +\n+\t\t\t\t\"\t\tcase 'foo' : return 'result'\\n\" +\n+\t\t\t\t\"\t}\\n\" +\n+\t\t\t\t\"}\",\n+\t\t\t\t\"String\");\n+\t\t// @formatter:on\n+\t}\n+\n+\t@Test\n+\tpublic void testWhileExpression_EarlyExitWithSwitchDefault() throws Exception {\n+\t\t// @formatter:off\n+\t\tresolvesTo(\n+\t\t\t\t\"while(true) {\\n\" +\n+\t\t\t\t\"\tswitch 'test' {\\n\" +\n+\t\t\t\t\"\t\tcase 'foo' : {}\\n\" +\n+\t\t\t\t\"\t\tdefault : return 'result'\\n\" +\n+\t\t\t\t\"\t}\\n\" +\n+\t\t\t\t\"}\",\n+\t\t\t\t\"String\");\n+\t\t// @formatter:on\n+\t}\n+\n+\t@Test\n+\tpublic void testWhileExpression_EarlyExitWithSwitchAndIf() throws Exception {\n+\t\t// @formatter:off\n+\t\tresolvesTo(\n+\t\t\t\t\"while(true) {\\n\" +\n+\t\t\t\t\"\tif(false) {\\n\" +\n+\t\t\t\t\"\t\tswitch 'test' {\\n\" +\n+\t\t\t\t\"\t\t\tcase 'foo' : if(false) return 'result'\\n\" +\n+\t\t\t\t\"\t\t}\\n\" +\n+\t\t\t\t\"\t}\\n\" +\n+\t\t\t\t\"}\",\n+\t\t\t\t\"String\");\n+\t\t// @formatter:on\n+\t}\n+\n+\t@Test\n+\t@Override\n+\tpublic void testTryCatchFinallyExpression_08() throws Exception {\n+\t\tresolvesTo(\"try return 'foo' catch (Exception e) return 'bar'\", \"String\");\n+\t}\n+\n+\t@Test\n+\t@Override\n+\tpublic void testTryCatchFinallyExpression_09() throws Exception {\n+\t\tresolvesTo(\"try return 'foo' catch (Exception e) return 'bar' catch(RuntimeException e) return 'baz'\", \"String\");\n+\t}\n+\n+\t@Test\n+\t@Override\n+\tpublic void testTryCatchFinallyExpression_10() throws Exception {\n+\t\tresolvesTo(\"try return 'foo' catch (Exception e) return 'bar' catch(RuntimeException e) return 'baz' finally true\", \"String\");\n+\t}\n+\n+\t@Test\n+\t@Override\n+\tpublic void testTryCatchFinallyExpression_11() throws Exception {\n+\t\tresolvesTo(\"try { return 'literal' as Object as Boolean } catch(ClassCastException e) return 'caught'\",\n+\t\t\t\t\"Serializable & Comparable<?>\");\n+\t}\n+\n+\t@Test\n+\t@Override\n+\tpublic void testTryCatchFinallyExpression_12() throws Exception {\n+\t\tresolvesTo(\"try { return 'literal' as Object as Boolean } catch(ClassCastException e) {return 'caught'}\",\n+\t\t\t\t\"Serializable & Comparable<?>\");\n+\t}\n+\n+\t@Test\n+\t@Override\n+\tpublic void testTryCatchFinallyExpression_13() throws Exception {\n+\t\t// @formatter:off\n+\t\tresolvesTo(\n+\t\t\t\t\"try return 'literal' as Object as Boolean\\n\" +\n+\t\t\t\t\"catch(NullPointerException e) return 'second thing is thrown'\" +\n+\t\t\t\t\"catch(ClassCastException e) throw new NullPointerException()\",\n+\t\t\t\t\"Serializable & Comparable<?>\");\n+\t\t// @formatter:on\n+\t}\n+\n+\t@Test\n+\t@Override\n+\tpublic void testTryCatchFinallyExpression_14() throws Exception {\n+\t\t// @formatter:off\n+\t\tresolvesTo(\n+\t\t\t\t\"try return 'literal' as Object as Boolean\\n\"+\n+\t\t\t\t\"catch(ClassCastException e) throw new NullPointerException()\\n\" +\n+\t\t\t\t\"catch(NullPointerException e) return 'dont catch subsequent exceptions'\",\n+\t\t\t\t\"Serializable & Comparable<?>\");\n+\t\t// @formatter:on\n+\t}\n+\n+\t@Test\n+\t@Override\n+\tpublic void testTryCatchFinallyExpression_15() throws Exception {\n+\t\t// @formatter:off\n+\t\tresolvesTo(\n+\t\t\t\t\"try return 'literal' as Object as Boolean\\n\" +\n+\t\t\t\t\"catch(ClassCastException e) return null as Number\\n\" +\n+\t\t\t\t\"catch(NullPointerException e) return 'dont catch subsequent exceptions'\",\n+\t\t\t\t\"Serializable\");\n+\t\t// @formatter:on\n+\t}\n+\n+\t@Test\n+\t@Override\n+\tpublic void testTryCatchFinallyExpression_19() throws Exception {\n+\t\tresolvesTo(\"try { return 'literal' as Object as Boolean } catch(ClassCastException e) 'caught'\", \"Serializable & Comparable<?>\");\n+\t}\n+\n+\t@Test\n+\t@Override\n+\tpublic void testTryCatchFinallyExpression_20() throws Exception {\n+\t\tresolvesTo(\"try { return 'literal' as Object as Boolean } catch(ClassCastException e) {'caught'}\", \"Serializable & Comparable<?>\");\n+\t}\n+\n+\t@Test\n+\t@Override\n+\tpublic void testTryCatchFinallyExpression_21() throws Exception {\n+\t\t// @formatter:off\n+\t\tresolvesTo(\n+\t\t\t\t\"try return 'literal' as Object as Boolean\\n\" +\n+\t\t\t\t\"catch(NullPointerException e) 'second thing is thrown'\\n\" +\n+\t\t\t\t\"catch(ClassCastException e) throw new NullPointerException()\",\n+\t\t\t\t\"Serializable & Comparable<?>\");\n+\t\t// @formatter:on\n+\t}\n+\n+\t@Test\n+\t@Override\n+\tpublic void testTryCatchFinallyExpression_22() throws Exception {\n+\t\t// @formatter:off\n+\t\tresolvesTo(\n+\t\t\t\t\"try return 'literal' as Object as Boolean\\n\" +\n+\t\t\t\t\"catch(ClassCastException e) throw new NullPointerException()\\n\" +\n+\t\t\t\t\"catch(NullPointerException e) 'dont catch subsequent exceptions'\",\n+\t\t\t\t\"Serializable & Comparable<?>\");\n+\t\t// @formatter:on\n+\t}\n+\n+\t@Test\n+\t@Override\n+\tpublic void testTryCatchFinallyExpression_25() throws Exception {\n+\t\tresolvesTo(\"try true catch (Exception e) return 'bar' catch(RuntimeException e) return 'baz'\", \"Serializable & Comparable<?>\");\n+\t}\n+\n+\t@Test\n+\t@Override\n+\tpublic void testTryCatchFinallyExpression_26() throws Exception {\n+\t\tresolvesTo(\"try 'foo' catch (Exception e) 'bar' catch(RuntimeException e) return true finally true\",\n+\t\t\t\t\"Serializable & Comparable<?>\");\n+\t}\n+\n+\t@Test\n+\t@Override\n+\tpublic void testTryCatchFinallyExpression_27() throws Exception {\n+\t\tresolvesTo(\"try { 'literal' as Object as Boolean } catch(ClassCastException e) return 'caught'\", \"Serializable & Comparable<?>\");\n+\t}\n+\n+\t@Test\n+\t@Override\n+\tpublic void testTryCatchFinallyExpression_28() throws Exception {\n+\t\tresolvesTo(\"try { 'literal' as Object as Boolean } catch(ClassCastException e) {return 'caught'}\", \"Serializable & Comparable<?>\");\n+\t}\n+\n+\t@Test\n+\t@Override\n+\tpublic void testTryCatchFinallyExpression_29() throws Exception {\n+\t\t// @formatter:off\n+\t\tresolvesTo(\n+\t\t\t\t\"try 'literal' as Object as Boolean\\n\" +\n+\t\t\t\t\"catch(NullPointerException e) return 'second thing is thrown'\\n\" +\n+\t\t\t\t\"catch(ClassCastException e) throw new NullPointerException()\",\n+\t\t\t\t\"Serializable & Comparable<?>\");\n+\t\t// @formatter:on\n+\t}\n+\n+\t@Test\n+\t@Override\n+\tpublic void testTryCatchFinallyExpression_30() throws Exception {\n+\t\t// @formatter:off\n+\t\tresolvesTo(\n+\t\t\t\t\"try 'literal' as Object as Boolean\\n\" +\n+\t\t\t\t\"catch(ClassCastException e) throw new NullPointerException()\\n\" +\n+\t\t\t\t\"catch(NullPointerException e) return 'dont catch subsequent exceptions'\",\n+\t\t\t\t\"Serializable & Comparable<?>\");\n+\t\t// @formatter:on\n+\t}\n+\n+\t@Test\n+\t@Override\n+\tpublic void testTryCatchFinallyExpression_31() throws Exception {\n+\t\t// @formatter:off\n+\t\tresolvesTo(\n+\t\t\t\t\"try 'literal' as Object as Boolean\\n\" +\n+\t\t\t\t\"catch(ClassCastException e) return null as Number\\n\" +\n+\t\t\t\t\"catch(NullPointerException e) return 'dont catch subsequent exceptions'\",\n+\t\t\t\t\"Serializable\");\n+\t\t// @formatter:on\n+\t}\n+\n+\t@Test\n+\tpublic void testThrowExpressionAfterLoop_01() throws Exception {\n+\t\t// @formatter:off\n+\t\tresolvesTo(\n+\t\t\t\t\"{\\n\" +\n+\t\t\t\t\"\twhile(true) ''.toString\\n\" +\n+\t\t\t\t\"\t\tthrow new RuntimeException()\\n\" +\n+\t\t\t\t\"}\", \"void\");\n+\t\t// @formatter:on\n+\t}\n+\n+\t@Test\n+\tpublic void testThrowExpressionAfterLoop_02() throws Exception {\n+\t\t// @formatter:off\n+\t\tresolvesTo(\n+\t\t\t\t\"{\\n\" +\n+\t\t\t\t\"\twhile(true) return 1\\n\" +\n+\t\t\t\t\"\tthrow new RuntimeException()\\n\" +\n+\t\t\t\t\"}\", \"int\");\n+\t\t// @formatter:on\n+\t}\n+\n+\t@Test\n+\tpublic void testThrowExpressionAfterLoop_03() throws Exception {\n+\t\t// @formatter:off", "originalCommit": "e6073c860ddaa4cb2e2b330d380ffbc9dfaee15b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}