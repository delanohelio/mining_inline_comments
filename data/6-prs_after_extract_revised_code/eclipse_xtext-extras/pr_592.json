{"pr_number": 592, "pr_title": "[eclipse/xtext#1679]ported more code to java", "pr_createdAt": "2020-04-26T15:25:11Z", "pr_url": "https://github.com/eclipse/xtext-extras/pull/592", "timeline": [{"oid": "601fecd28c0280f02f75346e26a7c8f8b80d4a9c", "url": "https://github.com/eclipse/xtext-extras/commit/601fecd28c0280f02f75346e26a7c8f8b80d4a9c", "message": "[eclipse/xtext#1679]ported more code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-27T12:51:15Z", "type": "forcePushed"}, {"oid": "d67c96080bc7acb8c0de97f2d59ded647e15f9e1", "url": "https://github.com/eclipse/xtext-extras/commit/d67c96080bc7acb8c0de97f2d59ded647e15f9e1", "message": "[eclipse/xtext#1679]ported more code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-27T14:00:57Z", "type": "forcePushed"}, {"oid": "0409e16b287c2e624303f907d97223a1d94b8d0b", "url": "https://github.com/eclipse/xtext-extras/commit/0409e16b287c2e624303f907d97223a1d94b8d0b", "message": "[eclipse/xtext#1679]ported more code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-28T11:47:49Z", "type": "forcePushed"}, {"oid": "209b168fae29fcdc72b746ad0e879d11966c87b5", "url": "https://github.com/eclipse/xtext-extras/commit/209b168fae29fcdc72b746ad0e879d11966c87b5", "message": "[eclipse/xtext#1679]ported more code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-28T12:05:55Z", "type": "forcePushed"}, {"oid": "211ccb25c4c87c649aefb631e6f9504e2f413d23", "url": "https://github.com/eclipse/xtext-extras/commit/211ccb25c4c87c649aefb631e6f9504e2f413d23", "message": "[eclipse/xtext#1679]ported more code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-28T12:17:36Z", "type": "forcePushed"}, {"oid": "4954c20f7367794e453120cbf799c1194266562a", "url": "https://github.com/eclipse/xtext-extras/commit/4954c20f7367794e453120cbf799c1194266562a", "message": "[eclipse/xtext#1679]ported more code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-28T12:46:52Z", "type": "forcePushed"}, {"oid": "b15e0c22884ce7cef8bc0f040b2fe3c1b0660ead", "url": "https://github.com/eclipse/xtext-extras/commit/b15e0c22884ce7cef8bc0f040b2fe3c1b0660ead", "message": "[eclipse/xtext#1679]ported more code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-28T13:46:52Z", "type": "forcePushed"}, {"oid": "e6754d69e90c0558516ed83b6bb98dc68fa1793a", "url": "https://github.com/eclipse/xtext-extras/commit/e6754d69e90c0558516ed83b6bb98dc68fa1793a", "message": "[eclipse/xtext#1679]ported more code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-28T14:36:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEwOTMyNQ==", "url": "https://github.com/eclipse/xtext-extras/pull/592#discussion_r417109325", "bodyText": "ok", "author": "cdietrich", "createdAt": "2020-04-29T07:11:22Z", "path": "org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compiler/TreeAppendableUtil.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * Copyright (c) 2013, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xbase.compiler;\n+\n+import com.google.inject.Inject;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.xtext.generator.trace.LocationData;\n+import org.eclipse.xtext.resource.ILocationInFileProvider;\n+import org.eclipse.xtext.resource.ILocationInFileProviderExtension;\n+import org.eclipse.xtext.util.ITextRegion;\n+import org.eclipse.xtext.util.ITextRegionWithLineInformation;\n+import org.eclipse.xtext.xbase.compiler.output.ITreeAppendable;\n+import org.eclipse.xtext.xbase.compiler.output.TreeAppendable;\n+\n+public class TreeAppendableUtil {\n+\t@Inject\n+\tprivate ILocationInFileProvider locationProvider;\n+\n+\tpublic ITreeAppendable traceSignificant(ITreeAppendable appendable, EObject source) {\n+\t\treturn this.traceSignificant(appendable, source, false);\n+\t}\n+\n+\tpublic ITreeAppendable traceSignificant(ITreeAppendable appendable, EObject source, boolean useForDebugging) {\n+\t\tif (appendable instanceof TreeAppendable) {\n+\t\t\treturn ((TreeAppendable) appendable).trace(source,\n+\t\t\t\t\tILocationInFileProviderExtension.RegionDescription.SIGNIFICANT, useForDebugging);\n+\t\t} else {\n+\t\t\tITextRegionWithLineInformation it = (ITextRegionWithLineInformation) locationProvider\n+\t\t\t\t\t.getSignificantTextRegion(source);\n+\t\t\tif (it != null && it != ITextRegion.EMPTY_REGION) {\n+\t\t\t\treturn appendable.trace(new LocationData(it.getOffset(), it.getLength(), it.getLineNumber(),\n+\t\t\t\t\t\tit.getEndLineNumber(), null), useForDebugging);\n+\t\t\t} else {\n+\t\t\t\treturn appendable;\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic ITreeAppendable traceWithComments(ITreeAppendable appendable, EObject source) {\n+\t\tif (appendable instanceof TreeAppendable) {\n+\t\t\treturn ((TreeAppendable) appendable).trace(source,\n+\t\t\t\t\tILocationInFileProviderExtension.RegionDescription.INCLUDING_COMMENTS, false);\n+\t\t} else {\n+\t\t\tfinal ITextRegionWithLineInformation it;", "originalCommit": "e6754d69e90c0558516ed83b6bb98dc68fa1793a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "424410cf971634f664d2f451c4512bdef6cac6b1", "chunk": "diff --git a/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compiler/TreeAppendableUtil.java b/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compiler/TreeAppendableUtil.java\nindex 8a244e1e5..1686495b6 100644\n--- a/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compiler/TreeAppendableUtil.java\n+++ b/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compiler/TreeAppendableUtil.java\n\n@@ -23,7 +23,7 @@ public class TreeAppendableUtil {\n \tprivate ILocationInFileProvider locationProvider;\n \n \tpublic ITreeAppendable traceSignificant(ITreeAppendable appendable, EObject source) {\n-\t\treturn this.traceSignificant(appendable, source, false);\n+\t\treturn traceSignificant(appendable, source, false);\n \t}\n \n \tpublic ITreeAppendable traceSignificant(ITreeAppendable appendable, EObject source, boolean useForDebugging) {\n"}}, {"oid": "424410cf971634f664d2f451c4512bdef6cac6b1", "url": "https://github.com/eclipse/xtext-extras/commit/424410cf971634f664d2f451c4512bdef6cac6b1", "message": "[eclipse/xtext#1679]ported more code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-29T07:24:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEzMTIxNA==", "url": "https://github.com/eclipse/xtext-extras/pull/592#discussion_r417131214", "bodyText": "Not sure if it's really better: expression.getElements().stream().allMatch(this::isValidAnnotationValue)", "author": "szarnekow", "createdAt": "2020-04-29T07:55:41Z", "path": "org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/annotations/validation/AnnotationValueValidator.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/**\n+ * Copyright (c) 2013, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xbase.annotations.validation;\n+\n+import org.eclipse.xtext.validation.ValidationMessageAcceptor;\n+import org.eclipse.xtext.xbase.XAbstractFeatureCall;\n+import org.eclipse.xtext.xbase.XExpression;\n+import org.eclipse.xtext.xbase.XListLiteral;\n+import org.eclipse.xtext.xbase.annotations.xAnnotations.XAnnotation;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.eclipse.xtext.xbase.validation.ConstantExpressionValidator;\n+import org.eclipse.xtext.xbase.validation.IssueCodes;\n+import org.eclipse.xtext.xbase.validation.NotResolvedFeatureException;\n+\n+/**\n+ * @author Sebastian Zarnekow - Initial contribution and API\n+ */\n+public class AnnotationValueValidator extends ConstantExpressionValidator {\n+\tpublic void validateAnnotationValue(XExpression value, ValidationMessageAcceptor acceptor) {\n+\t\ttry {\n+\t\t\tif (!isValidAnnotationValue(value)) {\n+\t\t\t\tacceptor.acceptError(\"The value for an annotation attribute must be a constant expression\", value, null,\n+\t\t\t\t\t\tValidationMessageAcceptor.INSIGNIFICANT_INDEX, IssueCodes.ANNOTATIONS_ILLEGAL_ATTRIBUTE);\n+\t\t\t}\n+\t\t} catch (NotResolvedFeatureException e) {\n+\t\t\t// do nothing\n+\t\t}\n+\t}\n+\n+\tprotected boolean _isValidAnnotationValue(XExpression expression) {\n+\t\treturn super.isConstant(expression);\n+\t}\n+\n+\tprotected boolean _isValidAnnotationValue(Void nullValue) {\n+\t\treturn true;\n+\t}\n+\n+\tprotected boolean _isValidAnnotationValue(XListLiteral expression) {\n+\t\treturn expression.getElements().isEmpty()", "originalCommit": "424410cf971634f664d2f451c4512bdef6cac6b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f392befe011a033feedda059d9ca3f0b44f68b40", "chunk": "diff --git a/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/annotations/validation/AnnotationValueValidator.java b/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/annotations/validation/AnnotationValueValidator.java\nindex 122795ce0..d01a85cdb 100644\n--- a/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/annotations/validation/AnnotationValueValidator.java\n+++ b/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/annotations/validation/AnnotationValueValidator.java\n\n@@ -18,6 +18,8 @@ import org.eclipse.xtext.xbase.validation.ConstantExpressionValidator;\n import org.eclipse.xtext.xbase.validation.IssueCodes;\n import org.eclipse.xtext.xbase.validation.NotResolvedFeatureException;\n \n+import com.google.common.collect.Iterables;\n+\n /**\n  * @author Sebastian Zarnekow - Initial contribution and API\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEzMTc5NA==", "url": "https://github.com/eclipse/xtext-extras/pull/592#discussion_r417131794", "bodyText": "I'd like to avoid IterableExtensions and friends in production code", "author": "szarnekow", "createdAt": "2020-04-29T07:56:44Z", "path": "org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/annotations/validation/AnnotationValueValidator.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/**\n+ * Copyright (c) 2013, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xbase.annotations.validation;\n+\n+import org.eclipse.xtext.validation.ValidationMessageAcceptor;\n+import org.eclipse.xtext.xbase.XAbstractFeatureCall;\n+import org.eclipse.xtext.xbase.XExpression;\n+import org.eclipse.xtext.xbase.XListLiteral;\n+import org.eclipse.xtext.xbase.annotations.xAnnotations.XAnnotation;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;", "originalCommit": "424410cf971634f664d2f451c4512bdef6cac6b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f392befe011a033feedda059d9ca3f0b44f68b40", "chunk": "diff --git a/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/annotations/validation/AnnotationValueValidator.java b/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/annotations/validation/AnnotationValueValidator.java\nindex 122795ce0..d01a85cdb 100644\n--- a/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/annotations/validation/AnnotationValueValidator.java\n+++ b/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/annotations/validation/AnnotationValueValidator.java\n\n@@ -18,6 +18,8 @@ import org.eclipse.xtext.xbase.validation.ConstantExpressionValidator;\n import org.eclipse.xtext.xbase.validation.IssueCodes;\n import org.eclipse.xtext.xbase.validation.NotResolvedFeatureException;\n \n+import com.google.common.collect.Iterables;\n+\n /**\n  * @author Sebastian Zarnekow - Initial contribution and API\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEzMTk5Ng==", "url": "https://github.com/eclipse/xtext-extras/pull/592#discussion_r417131996", "bodyText": "it.getReferences().stream().anyMatch(..)", "author": "szarnekow", "createdAt": "2020-04-29T07:57:07Z", "path": "org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compiler/BrokenTypeRefDetector.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/**\n+ * Copyright (c) 2012, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xbase.compiler;\n+\n+import org.eclipse.xtext.common.types.JvmCompoundTypeReference;\n+import org.eclipse.xtext.common.types.JvmParameterizedTypeReference;\n+import org.eclipse.xtext.common.types.JvmTypeReference;\n+import org.eclipse.xtext.common.types.JvmWildcardTypeReference;\n+import org.eclipse.xtext.common.types.util.AbstractTypeReferenceVisitor;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+\n+/**\n+ * A visitor that detects broken type references. Returns <code>true</code> if a\n+ * broken reference was detected.\n+ */\n+public class BrokenTypeRefDetector extends AbstractTypeReferenceVisitor.InheritanceAware<Boolean> {\n+\t@Override\n+\tprotected Boolean handleNullReference() {\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tpublic Boolean doVisitTypeReference(JvmTypeReference it) {\n+\t\treturn it.getType() == null || it.getType().eIsProxy();\n+\t}\n+\n+\t@Override\n+\tpublic Boolean doVisitCompoundTypeReference(JvmCompoundTypeReference it) {\n+\t\treturn doVisitTypeReference(it) || IterableExtensions.exists(it.getReferences(), ref -> visit(ref));", "originalCommit": "424410cf971634f664d2f451c4512bdef6cac6b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f392befe011a033feedda059d9ca3f0b44f68b40", "chunk": "diff --git a/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compiler/BrokenTypeRefDetector.java b/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compiler/BrokenTypeRefDetector.java\nindex 93f5527e4..fd7b9c545 100644\n--- a/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compiler/BrokenTypeRefDetector.java\n+++ b/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compiler/BrokenTypeRefDetector.java\n\n@@ -32,16 +32,16 @@ public class BrokenTypeRefDetector extends AbstractTypeReferenceVisitor.Inherita\n \n \t@Override\n \tpublic Boolean doVisitCompoundTypeReference(JvmCompoundTypeReference it) {\n-\t\treturn doVisitTypeReference(it) || IterableExtensions.exists(it.getReferences(), ref -> visit(ref));\n+\t\treturn doVisitTypeReference(it) || it.getReferences().stream().anyMatch(ref -> visit(ref));\n \t}\n \n \t@Override\n \tpublic Boolean doVisitParameterizedTypeReference(JvmParameterizedTypeReference it) {\n-\t\treturn doVisitTypeReference(it) || IterableExtensions.exists(it.getArguments(), ref -> visit(ref));\n+\t\treturn doVisitTypeReference(it) || it.getArguments().stream().anyMatch(ref -> visit(ref));\n \t}\n \n \t@Override\n \tpublic Boolean doVisitWildcardTypeReference(JvmWildcardTypeReference it) {\n-\t\treturn IterableExtensions.exists(it.getConstraints(), constr -> visit(constr.getTypeReference()));\n+\t\treturn it.getConstraints().stream().anyMatch(constr -> visit(constr.getTypeReference()));\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEzMjM4NQ==", "url": "https://github.com/eclipse/xtext-extras/pull/592#discussion_r417132385", "bodyText": "T extends Object -> T is sufficient", "author": "szarnekow", "createdAt": "2020-04-29T07:57:49Z", "path": "org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compiler/LoopExtensions.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/**\n+ * Copyright (c) 2012 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xbase.compiler;\n+\n+import org.eclipse.xtext.xbase.compiler.output.ITreeAppendable;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;\n+\n+import com.google.common.collect.Iterables;\n+\n+/**\n+ * @author Jan Koehnlein\n+ */\n+public class LoopExtensions {\n+\t/**\n+\t * Iterates elements and execute the procedure. A prefix, a separator and a\n+\t * suffix can be initialized with the loopInitializer lambda.\n+\t */\n+\tpublic <T extends Object> void forEach(ITreeAppendable appendable, Iterable<T> elements,\n+\t\t\tProcedure1<? super LoopParams> loopInitializer, Procedure1<? super T> procedure) {\n+\t\tif (Iterables.isEmpty(elements)) {\n+\t\t\treturn;\n+\t\t}\n+\t\tLoopParams params = new LoopParams();\n+\t\tloopInitializer.apply(params);\n+\t\tparams.appendPrefix(appendable);\n+\t\tprocedure.apply(Iterables.getFirst(elements, null));\n+\t\tIterableExtensions.tail(elements).forEach((T it) -> {\n+\t\t\tparams.appendSeparator(appendable);\n+\t\t\tprocedure.apply(it);\n+\t\t});\n+\t\tparams.appendSuffix(appendable);\n+\t}\n+\n+\t/**\n+\t * Uses curly braces and comma as delimiters. Doesn't use them for single\n+\t * valued iterables.\n+\t */\n+\tpublic <T extends Object> void forEachWithShortcut(ITreeAppendable appendable, Iterable<T> elements,", "originalCommit": "424410cf971634f664d2f451c4512bdef6cac6b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f392befe011a033feedda059d9ca3f0b44f68b40", "chunk": "diff --git a/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compiler/LoopExtensions.java b/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compiler/LoopExtensions.java\nindex f2579754e..355b3aa26 100644\n--- a/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compiler/LoopExtensions.java\n+++ b/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compiler/LoopExtensions.java\n\n@@ -22,7 +22,7 @@ public class LoopExtensions {\n \t * Iterates elements and execute the procedure. A prefix, a separator and a\n \t * suffix can be initialized with the loopInitializer lambda.\n \t */\n-\tpublic <T extends Object> void forEach(ITreeAppendable appendable, Iterable<T> elements,\n+\tpublic <T> void forEach(ITreeAppendable appendable, Iterable<T> elements,\n \t\t\tProcedure1<? super LoopParams> loopInitializer, Procedure1<? super T> procedure) {\n \t\tif (Iterables.isEmpty(elements)) {\n \t\t\treturn;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEzMjkxMQ==", "url": "https://github.com/eclipse/xtext-extras/pull/592#discussion_r417132911", "bodyText": "<T> without upper bound is equivalent", "author": "szarnekow", "createdAt": "2020-04-29T07:58:46Z", "path": "org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compiler/LoopExtensions.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/**\n+ * Copyright (c) 2012 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xbase.compiler;\n+\n+import org.eclipse.xtext.xbase.compiler.output.ITreeAppendable;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;\n+\n+import com.google.common.collect.Iterables;\n+\n+/**\n+ * @author Jan Koehnlein\n+ */\n+public class LoopExtensions {\n+\t/**\n+\t * Iterates elements and execute the procedure. A prefix, a separator and a\n+\t * suffix can be initialized with the loopInitializer lambda.\n+\t */\n+\tpublic <T extends Object> void forEach(ITreeAppendable appendable, Iterable<T> elements,", "originalCommit": "424410cf971634f664d2f451c4512bdef6cac6b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f392befe011a033feedda059d9ca3f0b44f68b40", "chunk": "diff --git a/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compiler/LoopExtensions.java b/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compiler/LoopExtensions.java\nindex f2579754e..355b3aa26 100644\n--- a/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compiler/LoopExtensions.java\n+++ b/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compiler/LoopExtensions.java\n\n@@ -22,7 +22,7 @@ public class LoopExtensions {\n \t * Iterates elements and execute the procedure. A prefix, a separator and a\n \t * suffix can be initialized with the loopInitializer lambda.\n \t */\n-\tpublic <T extends Object> void forEach(ITreeAppendable appendable, Iterable<T> elements,\n+\tpublic <T> void forEach(ITreeAppendable appendable, Iterable<T> elements,\n \t\t\tProcedure1<? super LoopParams> loopInitializer, Procedure1<? super T> procedure) {\n \t\tif (Iterables.isEmpty(elements)) {\n \t\t\treturn;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEzOTk4Ng==", "url": "https://github.com/eclipse/xtext-extras/pull/592#discussion_r417139986", "bodyText": "A few unnecessary param types in the lambdas", "author": "szarnekow", "createdAt": "2020-04-29T08:12:00Z", "path": "org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compiler/LoopParams.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright (c) 2012, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xbase.compiler;\n+\n+import org.eclipse.xtext.xbase.compiler.output.ITreeAppendable;\n+import org.eclipse.xtext.xbase.lib.Functions.Function1;\n+\n+public class LoopParams {\n+\tprivate Function1<? super ITreeAppendable, ? extends ITreeAppendable> prefix;\n+\n+\tprivate Function1<? super ITreeAppendable, ? extends ITreeAppendable> separator;\n+\n+\tprivate Function1<? super ITreeAppendable, ? extends ITreeAppendable> suffix;\n+\n+\tpublic Function1<? super ITreeAppendable, ? extends ITreeAppendable> setPrefix(\n+\t\t\tFunction1<? super ITreeAppendable, ? extends ITreeAppendable> prefix) {\n+\t\treturn this.prefix = prefix;\n+\t}\n+\n+\tpublic Function1<? super ITreeAppendable, ? extends ITreeAppendable> setSeparator(\n+\t\t\tFunction1<? super ITreeAppendable, ? extends ITreeAppendable> separator) {\n+\t\treturn this.separator = separator;\n+\t}\n+\n+\tpublic Function1<? super ITreeAppendable, ? extends ITreeAppendable> setSuffix(\n+\t\t\tFunction1<? super ITreeAppendable, ? extends ITreeAppendable> suffix) {\n+\t\treturn this.suffix = suffix;\n+\t}\n+\n+\tpublic Function1<? super ITreeAppendable, ? extends ITreeAppendable> setPrefix(String prefix) {\n+\t\treturn this.prefix = (ITreeAppendable it) -> {", "originalCommit": "424410cf971634f664d2f451c4512bdef6cac6b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f392befe011a033feedda059d9ca3f0b44f68b40", "chunk": "diff --git a/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compiler/LoopParams.java b/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compiler/LoopParams.java\nindex 20a49c262..42eae3eff 100644\n--- a/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compiler/LoopParams.java\n+++ b/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compiler/LoopParams.java\n\n@@ -34,19 +34,19 @@ public class LoopParams {\n \t}\n \n \tpublic Function1<? super ITreeAppendable, ? extends ITreeAppendable> setPrefix(String prefix) {\n-\t\treturn this.prefix = (ITreeAppendable it) -> {\n+\t\treturn this.prefix = it -> {\n \t\t\treturn it.append(prefix);\n \t\t};\n \t}\n \n \tpublic Function1<? super ITreeAppendable, ? extends ITreeAppendable> setSeparator(String separator) {\n-\t\treturn this.separator = (ITreeAppendable it) -> {\n+\t\treturn this.separator = it -> {\n \t\t\treturn it.append(separator);\n \t\t};\n \t}\n \n \tpublic Function1<? super ITreeAppendable, ? extends ITreeAppendable> setSuffix(String suffix) {\n-\t\treturn this.suffix = (ITreeAppendable it) -> {\n+\t\treturn this.suffix = it -> {\n \t\t\treturn it.append(suffix);\n \t\t};\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE0MDU4NQ==", "url": "https://github.com/eclipse/xtext-extras/pull/592#discussion_r417140585", "bodyText": "Looks like we could extract a single protected method here", "author": "szarnekow", "createdAt": "2020-04-29T08:13:13Z", "path": "org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compiler/TreeAppendableUtil.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * Copyright (c) 2013, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xbase.compiler;\n+\n+import com.google.inject.Inject;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.xtext.generator.trace.LocationData;\n+import org.eclipse.xtext.resource.ILocationInFileProvider;\n+import org.eclipse.xtext.resource.ILocationInFileProviderExtension;\n+import org.eclipse.xtext.util.ITextRegion;\n+import org.eclipse.xtext.util.ITextRegionWithLineInformation;\n+import org.eclipse.xtext.xbase.compiler.output.ITreeAppendable;\n+import org.eclipse.xtext.xbase.compiler.output.TreeAppendable;\n+\n+public class TreeAppendableUtil {\n+\t@Inject\n+\tprivate ILocationInFileProvider locationProvider;\n+\n+\tpublic ITreeAppendable traceSignificant(ITreeAppendable appendable, EObject source) {\n+\t\treturn traceSignificant(appendable, source, false);\n+\t}\n+\n+\tpublic ITreeAppendable traceSignificant(ITreeAppendable appendable, EObject source, boolean useForDebugging) {\n+\t\tif (appendable instanceof TreeAppendable) {", "originalCommit": "424410cf971634f664d2f451c4512bdef6cac6b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE1MjY4MQ==", "url": "https://github.com/eclipse/xtext-extras/pull/592#discussion_r417152681", "bodyText": "elses are not the same", "author": "cdietrich", "createdAt": "2020-04-29T08:35:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE0MDU4NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE0MTIxOQ==", "url": "https://github.com/eclipse/xtext-extras/pull/592#discussion_r417141219", "bodyText": "Unnecessary @Accessors", "author": "szarnekow", "createdAt": "2020-04-29T08:14:33Z", "path": "org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/imports/ImportsAcceptor.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * Copyright (c) 2014, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xbase.imports;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.eclipse.xtend.lib.annotations.AccessorType;\n+import org.eclipse.xtend.lib.annotations.Accessors;\n+import org.eclipse.xtext.common.types.JvmIdentifiableElement;\n+import org.eclipse.xtext.common.types.JvmType;\n+import org.eclipse.xtext.xbase.XAbstractFeatureCall;\n+\n+/**\n+ * @author dhuebner - Initial contribution and API\n+ */\n+public interface ImportsAcceptor {\n+\t@Accessors(AccessorType.PUBLIC_GETTER)", "originalCommit": "424410cf971634f664d2f451c4512bdef6cac6b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f392befe011a033feedda059d9ca3f0b44f68b40", "chunk": "diff --git a/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/imports/ImportsAcceptor.java b/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/imports/ImportsAcceptor.java\nindex 87a1a572e..961f33121 100644\n--- a/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/imports/ImportsAcceptor.java\n+++ b/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/imports/ImportsAcceptor.java\n\n@@ -11,8 +11,6 @@ package org.eclipse.xtext.xbase.imports;\n import java.util.HashSet;\n import java.util.Set;\n \n-import org.eclipse.xtend.lib.annotations.AccessorType;\n-import org.eclipse.xtend.lib.annotations.Accessors;\n import org.eclipse.xtext.common.types.JvmIdentifiableElement;\n import org.eclipse.xtext.common.types.JvmType;\n import org.eclipse.xtext.xbase.XAbstractFeatureCall;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE0MTM0OQ==", "url": "https://github.com/eclipse/xtext-extras/pull/592#discussion_r417141349", "bodyText": "CollectionLiterals", "author": "szarnekow", "createdAt": "2020-04-29T08:14:47Z", "path": "org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/imports/StaticallyImportedMemberProvider.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/**\n+ * Copyright (c) 2014, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xbase.imports;\n+\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.xtext.common.types.JvmDeclaredType;\n+import org.eclipse.xtext.common.types.JvmFeature;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.xbase.lib.CollectionLiterals;\n+import org.eclipse.xtext.xbase.typesystem.override.IResolvedFeatures;\n+import org.eclipse.xtext.xbase.typesystem.util.ContextualVisibilityHelper;\n+import org.eclipse.xtext.xbase.typesystem.util.IVisibilityHelper;\n+import org.eclipse.xtext.xtype.XImportDeclaration;\n+\n+import com.google.common.collect.Iterables;\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author Anton Kosyakov - Initial contribution and API\n+ */\n+public class StaticallyImportedMemberProvider {\n+\t@Inject\n+\tprivate IImportsConfiguration importsConfiguration;\n+\n+\t@Inject\n+\tprivate IResolvedFeatures.Provider resolvedFeaturesProvider;\n+\n+\t@Inject\n+\tprivate IVisibilityHelper visibilityHelper;\n+\n+\tpublic Iterable<JvmFeature> findAllFeatures(XImportDeclaration it) {\n+\t\tJvmDeclaredType importedType = it.getImportedType();\n+\t\tif (!it.isStatic() || importedType == null) {\n+\t\t\treturn CollectionLiterals.<JvmFeature>emptyList();\n+\t\t}\n+\t\tIVisibilityHelper visibilityHelper = getVisibilityHelper(it.eResource());\n+\t\tIResolvedFeatures resolvedFeatures = resolvedFeaturesProvider.getResolvedFeatures(importedType);\n+\t\treturn Iterables.filter(resolvedFeatures.getAllFeatures(), (JvmFeature feature) -> {\n+\t\t\treturn feature.isStatic() && visibilityHelper.isVisible(feature)\n+\t\t\t\t\t&& (it.getMemberName() == null || feature.getSimpleName().startsWith(it.getMemberName()));\n+\t\t});\n+\t}\n+\n+\tpublic Iterable<JvmFeature> getAllFeatures(XImportDeclaration it) {\n+\t\treturn getAllFeatures(it.eResource(), it.getImportedType(), it.isStatic(), it.isExtension(),\n+\t\t\t\tit.getMemberName());\n+\t}\n+\n+\tpublic Iterable<JvmFeature> getAllFeatures(Resource resource, JvmDeclaredType importedType, boolean isStatic,\n+\t\t\tboolean extension, String memberName) {\n+\t\tif (!isStatic || importedType == null) {\n+\t\t\treturn CollectionLiterals.<JvmFeature>emptyList();", "originalCommit": "424410cf971634f664d2f451c4512bdef6cac6b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f392befe011a033feedda059d9ca3f0b44f68b40", "chunk": "diff --git a/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/imports/StaticallyImportedMemberProvider.java b/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/imports/StaticallyImportedMemberProvider.java\nindex 7c4cde539..5510ca5f3 100644\n--- a/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/imports/StaticallyImportedMemberProvider.java\n+++ b/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/imports/StaticallyImportedMemberProvider.java\n\n@@ -8,6 +8,8 @@\n  */\n package org.eclipse.xtext.xbase.imports;\n \n+import java.util.Collections;\n+\n import org.eclipse.emf.ecore.resource.Resource;\n import org.eclipse.xtext.common.types.JvmDeclaredType;\n import org.eclipse.xtext.common.types.JvmFeature;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE0MTc2OA==", "url": "https://github.com/eclipse/xtext-extras/pull/592#discussion_r417141768", "bodyText": "Accessors", "author": "szarnekow", "createdAt": "2020-04-29T08:15:42Z", "path": "org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/jvmmodel/JvmIdentifiableMetaData.java", "diffHunk": "@@ -20,22 +18,20 @@\n  * \n  * @since 2.7\n  */\n-@SuppressWarnings(\"all\")\n public class JvmIdentifiableMetaData extends AdapterImpl {\n-  @Accessors\n-  private boolean synthetic;\n-  \n-  @Override\n-  public boolean isAdapterForType(final Object type) {\n-    return Objects.equal(JvmIdentifiableMetaData.class, type);\n-  }\n-  \n-  @Pure\n-  public boolean isSynthetic() {\n-    return this.synthetic;\n-  }\n-  \n-  public void setSynthetic(final boolean synthetic) {\n-    this.synthetic = synthetic;\n-  }\n+\t@Accessors", "originalCommit": "424410cf971634f664d2f451c4512bdef6cac6b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f392befe011a033feedda059d9ca3f0b44f68b40", "chunk": "diff --git a/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/jvmmodel/JvmIdentifiableMetaData.java b/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/jvmmodel/JvmIdentifiableMetaData.java\nindex b48f1c0a9..19753f74e 100644\n--- a/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/jvmmodel/JvmIdentifiableMetaData.java\n+++ b/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/jvmmodel/JvmIdentifiableMetaData.java\n\n@@ -19,7 +18,6 @@ import org.eclipse.xtend.lib.annotations.Accessors;\n  * @since 2.7\n  */\n public class JvmIdentifiableMetaData extends AdapterImpl {\n-\t@Accessors\n \tprivate boolean synthetic;\n \n \t@Override\n"}}, {"oid": "f392befe011a033feedda059d9ca3f0b44f68b40", "url": "https://github.com/eclipse/xtext-extras/commit/f392befe011a033feedda059d9ca3f0b44f68b40", "message": "[eclipse/xtext#1679]ported more code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-29T08:39:21Z", "type": "forcePushed"}, {"oid": "8030cb2796db50af58cf9f5c055af95cbee373e9", "url": "https://github.com/eclipse/xtext-extras/commit/8030cb2796db50af58cf9f5c055af95cbee373e9", "message": "[eclipse/xtext#1679]ported more code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-29T08:53:11Z", "type": "forcePushed"}, {"oid": "5989288b0b64e37c43565587a2df37a270bbd298", "url": "https://github.com/eclipse/xtext-extras/commit/5989288b0b64e37c43565587a2df37a270bbd298", "message": "[eclipse/xtext#1679]ported more code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-29T10:03:06Z", "type": "forcePushed"}, {"oid": "5923e5725a4e08d62e90b87efa078bca6e04d73a", "url": "https://github.com/eclipse/xtext-extras/commit/5923e5725a4e08d62e90b87efa078bca6e04d73a", "message": "[eclipse/xtext#1679]ported more code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-29T11:19:13Z", "type": "commit"}, {"oid": "5923e5725a4e08d62e90b87efa078bca6e04d73a", "url": "https://github.com/eclipse/xtext-extras/commit/5923e5725a4e08d62e90b87efa078bca6e04d73a", "message": "[eclipse/xtext#1679]ported more code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-29T11:19:13Z", "type": "forcePushed"}]}