{"pr_number": 3812, "pr_title": "Forbidden float column in short key", "pr_createdAt": "2020-06-09T09:53:10Z", "pr_url": "https://github.com/apache/incubator-doris/pull/3812", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ2ODQ3NQ==", "url": "https://github.com/apache/incubator-doris/pull/3812#discussion_r437468475", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    throw new AnalysisException(\"Float or double can not used as a key, use decimal instead.\");\n          \n          \n            \n                                    throw new AnalysisException(\"Float or double can not used as a sort key, use decimal instead.\");", "author": "morningman", "createdAt": "2020-06-09T14:30:17Z", "path": "fe/src/main/java/org/apache/doris/analysis/CreateMaterializedViewStmt.java", "diffHunk": "@@ -235,6 +236,9 @@ private void analyzeOrderByClause() throws AnalysisException {\n                     if (mvColumnItem.getAggregationType() != null) {\n                         break;\n                     }\n+                    if (mvColumnItem.getType().isFloatingPointType()) {\n+                        throw new AnalysisException(\"Float or double can not used as a key, use decimal instead.\");", "originalCommit": "881a1c0bc9d844a2a584b3a5dd25298b54f58825", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3a32e578af3b7d1da216a30029e6411cc153b1e5", "chunk": "diff --git a/fe/src/main/java/org/apache/doris/analysis/CreateMaterializedViewStmt.java b/fe/src/main/java/org/apache/doris/analysis/CreateMaterializedViewStmt.java\nindex 9d66bf96c..4e75a080d 100644\n--- a/fe/src/main/java/org/apache/doris/analysis/CreateMaterializedViewStmt.java\n+++ b/fe/src/main/java/org/apache/doris/analysis/CreateMaterializedViewStmt.java\n\n@@ -237,7 +237,7 @@ public class CreateMaterializedViewStmt extends DdlStmt {\n                         break;\n                     }\n                     if (mvColumnItem.getType().isFloatingPointType()) {\n-                        throw new AnalysisException(\"Float or double can not used as a key, use decimal instead.\");\n+                        throw new AnalysisException(\"Float or double can not used as a sort key, use decimal instead.\");\n                     }\n                     mvColumnItem.setIsKey(true);\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ3MjQ1OA==", "url": "https://github.com/apache/incubator-doris/pull/3812#discussion_r437472458", "bodyText": "We should be break if we met a floating point type column. The following case will get wrong result in your logic:\nk1 int, k2 float, k3 int", "author": "morningman", "createdAt": "2020-06-09T14:35:31Z", "path": "fe/src/main/java/org/apache/doris/analysis/CreateMaterializedViewStmt.java", "diffHunk": "@@ -255,10 +259,15 @@ private void analyzeOrderByClause() throws AnalysisException {\n                 MVColumnItem mvColumnItem = mvColumnItemList.get(i);\n                 Expr resultColumn = selectStmt.getResultExprs().get(i);\n                 keyStorageLayoutBytes += resultColumn.getType().getStorageLayoutBytes();\n-                if ((i + 1) <= FeConstants.shortkey_max_column_count\n-                        || keyStorageLayoutBytes < FeConstants.shortkey_maxsize_bytes) {\n+                if ((!mvColumnItem.getType().isFloatingPointType())", "originalCommit": "881a1c0bc9d844a2a584b3a5dd25298b54f58825", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyMzk4Mg==", "url": "https://github.com/apache/incubator-doris/pull/3812#discussion_r437823982", "bodyText": "Why?", "author": "EmmyMiao87", "createdAt": "2020-06-10T02:25:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ3MjQ1OA=="}], "type": "inlineReview", "revised_code": {"commit": "a85fd5db48570b80393a00c0fc9e108158021ef0", "chunk": "diff --git a/fe/src/main/java/org/apache/doris/analysis/CreateMaterializedViewStmt.java b/fe/src/main/java/org/apache/doris/analysis/CreateMaterializedViewStmt.java\nindex 9d66bf96c..77b25a8be 100644\n--- a/fe/src/main/java/org/apache/doris/analysis/CreateMaterializedViewStmt.java\n+++ b/fe/src/main/java/org/apache/doris/analysis/CreateMaterializedViewStmt.java\n\n@@ -227,57 +216,14 @@ public class CreateMaterializedViewStmt extends DdlStmt {\n \n     private void analyzeOrderByClause() throws AnalysisException {\n         if (selectStmt.getOrderByElements() == null) {\n-            /**\n-             * The keys type of Materialized view is aggregation.\n-             * All of group by columns are keys of materialized view.\n-             */\n-            if (mvKeysType == KeysType.AGG_KEYS) {\n-                for (MVColumnItem mvColumnItem : mvColumnItemList) {\n-                    if (mvColumnItem.getAggregationType() != null) {\n-                        break;\n-                    }\n-                    if (mvColumnItem.getType().isFloatingPointType()) {\n-                        throw new AnalysisException(\"Float or double can not used as a key, use decimal instead.\");\n-                    }\n-                    mvColumnItem.setIsKey(true);\n-                }\n-                return;\n-            }\n-\n-            /**\n-             * There is no aggregation function in materialized view.\n-             * Supplement key of MV columns\n-             * For example: select k1, k2 ... kn from t1\n-             * The default key columns are first 36 bytes of the columns in define order.\n-             * If the number of columns in the first 36 is less than 3, the first 3 columns will be used.\n-             * column: k1, k2, k3... km. The key is true.\n-             * Supplement non-key of MV columns\n-             * column: km... kn. The key is false, aggregation type is none, isAggregationTypeImplicit is true.\n-             */\n-            int keyStorageLayoutBytes = 0;\n-            for (int i = 0; i < selectStmt.getResultExprs().size(); i++) {\n-                MVColumnItem mvColumnItem = mvColumnItemList.get(i);\n-                Expr resultColumn = selectStmt.getResultExprs().get(i);\n-                keyStorageLayoutBytes += resultColumn.getType().getStorageLayoutBytes();\n-                if ((!mvColumnItem.getType().isFloatingPointType())\n-                        && ((i + 1) <= FeConstants.shortkey_max_column_count\n-                        || keyStorageLayoutBytes < FeConstants.shortkey_maxsize_bytes)) {\n-                    mvColumnItem.setIsKey(true);\n-                } else {\n-                    if (i == 0) {\n-                        throw new AnalysisException(\"The first column could not be float or double, \"\n-                                + \"use decimal instead.\");\n-                    }\n-                    mvColumnItem.setAggregationType(AggregateType.NONE, true);\n-                }\n-            }\n+            supplyShortKey();\n             return;\n         }\n \n         List<OrderByElement> orderByElements = selectStmt.getOrderByElements();\n         if (orderByElements.size() > mvColumnItemList.size()) {\n-            throw new AnalysisException(\"The number of columns in order clause must be less then \"\n-                                                + \"the number of columns in select clause\");\n+            throw new AnalysisException(\"The number of columns in order clause must be less then \" + \"the number of \"\n+                    + \"columns in select clause\");\n         }\n         if (beginIndexOfAggregation != -1 && (orderByElements.size() != (beginIndexOfAggregation))) {\n             throw new AnalysisException(\"The key of columns in mv must be all of group by columns\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkyOTI1OA==", "url": "https://github.com/apache/incubator-doris/pull/3812#discussion_r437929258", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        && (keyStorageLayoutBytes > FeConstants.shortkey_maxsize_bytes)) {\n          \n          \n            \n                                        || (keyStorageLayoutBytes > FeConstants.shortkey_maxsize_bytes)) {", "author": "morningman", "createdAt": "2020-06-10T07:51:56Z", "path": "fe/src/main/java/org/apache/doris/alter/MaterializedViewHandler.java", "diffHunk": "@@ -554,28 +554,42 @@ private RollupJobV2 createMaterializedViewJob(String mvName, String baseIndexNam\n         } else if (KeysType.DUP_KEYS == keysType) {\n             // supplement the duplicate key\n             if (addRollupClause.getDupKeys() == null || addRollupClause.getDupKeys().isEmpty()) {\n-                int keyStorageLayoutBytes = 0;\n+                // check the column meta\n                 for (int i = 0; i < rollupColumnNames.size(); i++) {\n                     String columnName = rollupColumnNames.get(i);\n                     Column baseColumn = baseColumnNameToColumn.get(columnName);\n                     if (baseColumn == null) {\n                         throw new DdlException(\"Column[\" + columnName + \"] does not exist in base index\");\n                     }\n-                    keyStorageLayoutBytes += baseColumn.getType().getStorageLayoutBytes();\n                     Column rollupColumn = new Column(baseColumn);\n-                    if(changeStorageFormat) {\n-                        rollupColumn.setIsKey(baseColumn.isKey());\n-                        rollupColumn.setAggregationType(baseColumn.getAggregationType(), true);\n-                    } else if ((i + 1) <= FeConstants.shortkey_max_column_count\n-                            || keyStorageLayoutBytes < FeConstants.shortkey_maxsize_bytes) {\n-                        rollupColumn.setIsKey(true);\n-                        rollupColumn.setAggregationType(null, false);\n-                    } else {\n-                        rollupColumn.setIsKey(false);\n-                        rollupColumn.setAggregationType(AggregateType.NONE, true);\n-                    }\n                     rollupSchema.add(rollupColumn);\n                 }\n+                if (changeStorageFormat) {\n+                    return rollupSchema;\n+                }\n+                // Supplement short key of MV columns\n+                int theBeginIndexOfValue = 0;\n+                int keyStorageLayoutBytes = 0;\n+                for (; theBeginIndexOfValue < rollupSchema.size(); theBeginIndexOfValue++) {\n+                    Column rollupColumn = rollupSchema.get(theBeginIndexOfValue);\n+                    keyStorageLayoutBytes += rollupColumn.getType().getStorageLayoutBytes();\n+                    if (rollupColumn.getType().getPrimitiveType().isFloatingPointType()\n+                            || ((theBeginIndexOfValue + 1) > FeConstants.shortkey_max_column_count)\n+                            && (keyStorageLayoutBytes > FeConstants.shortkey_maxsize_bytes)) {", "originalCommit": "d63c9a83c59b44580154593cc79a1af24669cc9e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "606d17ea3d206e9febdd50b79df2e6710a9aa16a", "chunk": "diff --git a/fe/src/main/java/org/apache/doris/alter/MaterializedViewHandler.java b/fe/src/main/java/org/apache/doris/alter/MaterializedViewHandler.java\nindex b9296b78a..a13966aab 100644\n--- a/fe/src/main/java/org/apache/doris/alter/MaterializedViewHandler.java\n+++ b/fe/src/main/java/org/apache/doris/alter/MaterializedViewHandler.java\n\n@@ -554,41 +554,33 @@ public class MaterializedViewHandler extends AlterHandler {\n         } else if (KeysType.DUP_KEYS == keysType) {\n             // supplement the duplicate key\n             if (addRollupClause.getDupKeys() == null || addRollupClause.getDupKeys().isEmpty()) {\n-                // check the column meta\n+                int keyStorageLayoutBytes = 0;\n                 for (int i = 0; i < rollupColumnNames.size(); i++) {\n                     String columnName = rollupColumnNames.get(i);\n                     Column baseColumn = baseColumnNameToColumn.get(columnName);\n                     if (baseColumn == null) {\n                         throw new DdlException(\"Column[\" + columnName + \"] does not exist in base index\");\n                     }\n+                    // Supplement key of MV columns\n+                    if (baseColumn.getType().getPrimitiveType().isFloatingPointType() && i == 0) {\n+                        throw new DdlException(\"The first column could not be float or double, \"\n+                                + \"use decimal instead.\");\n+                    }\n+                    keyStorageLayoutBytes += baseColumn.getType().getStorageLayoutBytes();\n                     Column rollupColumn = new Column(baseColumn);\n-                    rollupSchema.add(rollupColumn);\n-                }\n-                if (changeStorageFormat) {\n-                    return rollupSchema;\n-                }\n-                // Supplement short key of MV columns\n-                int theBeginIndexOfValue = 0;\n-                int keyStorageLayoutBytes = 0;\n-                for (; theBeginIndexOfValue < rollupSchema.size(); theBeginIndexOfValue++) {\n-                    Column rollupColumn = rollupSchema.get(theBeginIndexOfValue);\n-                    keyStorageLayoutBytes += rollupColumn.getType().getStorageLayoutBytes();\n-                    if (rollupColumn.getType().getPrimitiveType().isFloatingPointType()\n-                            || ((theBeginIndexOfValue + 1) > FeConstants.shortkey_max_column_count)\n-                            && (keyStorageLayoutBytes > FeConstants.shortkey_maxsize_bytes)) {\n-                        break;\n+                    if(changeStorageFormat) {\n+                        rollupColumn.setIsKey(baseColumn.isKey());\n+                        rollupColumn.setAggregationType(baseColumn.getAggregationType(), true);\n+                    } else if (!rollupColumn.getType().getPrimitiveType()\n+                            .isFloatingPointType() && ((i + 1) <= FeConstants.shortkey_max_column_count ||\n+                            keyStorageLayoutBytes < FeConstants.shortkey_maxsize_bytes)) {\n+                        rollupColumn.setIsKey(true);\n+                        rollupColumn.setAggregationType(null, false);\n+                    } else {\n+                        rollupColumn.setIsKey(false);\n+                        rollupColumn.setAggregationType(AggregateType.NONE, true);\n                     }\n-                    rollupColumn.setIsKey(true);\n-                    rollupColumn.setAggregationType(null, false);\n-                }\n-                if (theBeginIndexOfValue == 0) {\n-                    throw new DdlException(\"The first column could not be float or double, use decimal instead.\");\n-                }\n-                // Supplement value of MV columns\n-                for (; theBeginIndexOfValue < rollupSchema.size(); theBeginIndexOfValue++) {\n-                    Column rollupColumn = rollupSchema.get(theBeginIndexOfValue);\n-                    rollupColumn.setIsKey(false);\n-                    rollupColumn.setAggregationType(AggregateType.NONE, true);\n+                    rollupSchema.add(rollupColumn);\n                 }\n             } else {\n                 /*\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkyOTgwNg==", "url": "https://github.com/apache/incubator-doris/pull/3812#discussion_r437929806", "bodyText": "use decimal instead can be removed. Because user has no choice.", "author": "morningman", "createdAt": "2020-06-10T07:52:54Z", "path": "fe/src/main/java/org/apache/doris/alter/MaterializedViewHandler.java", "diffHunk": "@@ -554,28 +554,42 @@ private RollupJobV2 createMaterializedViewJob(String mvName, String baseIndexNam\n         } else if (KeysType.DUP_KEYS == keysType) {\n             // supplement the duplicate key\n             if (addRollupClause.getDupKeys() == null || addRollupClause.getDupKeys().isEmpty()) {\n-                int keyStorageLayoutBytes = 0;\n+                // check the column meta\n                 for (int i = 0; i < rollupColumnNames.size(); i++) {\n                     String columnName = rollupColumnNames.get(i);\n                     Column baseColumn = baseColumnNameToColumn.get(columnName);\n                     if (baseColumn == null) {\n                         throw new DdlException(\"Column[\" + columnName + \"] does not exist in base index\");\n                     }\n-                    keyStorageLayoutBytes += baseColumn.getType().getStorageLayoutBytes();\n                     Column rollupColumn = new Column(baseColumn);\n-                    if(changeStorageFormat) {\n-                        rollupColumn.setIsKey(baseColumn.isKey());\n-                        rollupColumn.setAggregationType(baseColumn.getAggregationType(), true);\n-                    } else if ((i + 1) <= FeConstants.shortkey_max_column_count\n-                            || keyStorageLayoutBytes < FeConstants.shortkey_maxsize_bytes) {\n-                        rollupColumn.setIsKey(true);\n-                        rollupColumn.setAggregationType(null, false);\n-                    } else {\n-                        rollupColumn.setIsKey(false);\n-                        rollupColumn.setAggregationType(AggregateType.NONE, true);\n-                    }\n                     rollupSchema.add(rollupColumn);\n                 }\n+                if (changeStorageFormat) {\n+                    return rollupSchema;\n+                }\n+                // Supplement short key of MV columns\n+                int theBeginIndexOfValue = 0;\n+                int keyStorageLayoutBytes = 0;\n+                for (; theBeginIndexOfValue < rollupSchema.size(); theBeginIndexOfValue++) {\n+                    Column rollupColumn = rollupSchema.get(theBeginIndexOfValue);\n+                    keyStorageLayoutBytes += rollupColumn.getType().getStorageLayoutBytes();\n+                    if (rollupColumn.getType().getPrimitiveType().isFloatingPointType()\n+                            || ((theBeginIndexOfValue + 1) > FeConstants.shortkey_max_column_count)\n+                            && (keyStorageLayoutBytes > FeConstants.shortkey_maxsize_bytes)) {\n+                        break;\n+                    }\n+                    rollupColumn.setIsKey(true);\n+                    rollupColumn.setAggregationType(null, false);\n+                }\n+                if (theBeginIndexOfValue == 0) {\n+                    throw new DdlException(\"The first column could not be float or double, use decimal instead.\");", "originalCommit": "d63c9a83c59b44580154593cc79a1af24669cc9e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "606d17ea3d206e9febdd50b79df2e6710a9aa16a", "chunk": "diff --git a/fe/src/main/java/org/apache/doris/alter/MaterializedViewHandler.java b/fe/src/main/java/org/apache/doris/alter/MaterializedViewHandler.java\nindex b9296b78a..a13966aab 100644\n--- a/fe/src/main/java/org/apache/doris/alter/MaterializedViewHandler.java\n+++ b/fe/src/main/java/org/apache/doris/alter/MaterializedViewHandler.java\n\n@@ -554,41 +554,33 @@ public class MaterializedViewHandler extends AlterHandler {\n         } else if (KeysType.DUP_KEYS == keysType) {\n             // supplement the duplicate key\n             if (addRollupClause.getDupKeys() == null || addRollupClause.getDupKeys().isEmpty()) {\n-                // check the column meta\n+                int keyStorageLayoutBytes = 0;\n                 for (int i = 0; i < rollupColumnNames.size(); i++) {\n                     String columnName = rollupColumnNames.get(i);\n                     Column baseColumn = baseColumnNameToColumn.get(columnName);\n                     if (baseColumn == null) {\n                         throw new DdlException(\"Column[\" + columnName + \"] does not exist in base index\");\n                     }\n+                    // Supplement key of MV columns\n+                    if (baseColumn.getType().getPrimitiveType().isFloatingPointType() && i == 0) {\n+                        throw new DdlException(\"The first column could not be float or double, \"\n+                                + \"use decimal instead.\");\n+                    }\n+                    keyStorageLayoutBytes += baseColumn.getType().getStorageLayoutBytes();\n                     Column rollupColumn = new Column(baseColumn);\n-                    rollupSchema.add(rollupColumn);\n-                }\n-                if (changeStorageFormat) {\n-                    return rollupSchema;\n-                }\n-                // Supplement short key of MV columns\n-                int theBeginIndexOfValue = 0;\n-                int keyStorageLayoutBytes = 0;\n-                for (; theBeginIndexOfValue < rollupSchema.size(); theBeginIndexOfValue++) {\n-                    Column rollupColumn = rollupSchema.get(theBeginIndexOfValue);\n-                    keyStorageLayoutBytes += rollupColumn.getType().getStorageLayoutBytes();\n-                    if (rollupColumn.getType().getPrimitiveType().isFloatingPointType()\n-                            || ((theBeginIndexOfValue + 1) > FeConstants.shortkey_max_column_count)\n-                            && (keyStorageLayoutBytes > FeConstants.shortkey_maxsize_bytes)) {\n-                        break;\n+                    if(changeStorageFormat) {\n+                        rollupColumn.setIsKey(baseColumn.isKey());\n+                        rollupColumn.setAggregationType(baseColumn.getAggregationType(), true);\n+                    } else if (!rollupColumn.getType().getPrimitiveType()\n+                            .isFloatingPointType() && ((i + 1) <= FeConstants.shortkey_max_column_count ||\n+                            keyStorageLayoutBytes < FeConstants.shortkey_maxsize_bytes)) {\n+                        rollupColumn.setIsKey(true);\n+                        rollupColumn.setAggregationType(null, false);\n+                    } else {\n+                        rollupColumn.setIsKey(false);\n+                        rollupColumn.setAggregationType(AggregateType.NONE, true);\n                     }\n-                    rollupColumn.setIsKey(true);\n-                    rollupColumn.setAggregationType(null, false);\n-                }\n-                if (theBeginIndexOfValue == 0) {\n-                    throw new DdlException(\"The first column could not be float or double, use decimal instead.\");\n-                }\n-                // Supplement value of MV columns\n-                for (; theBeginIndexOfValue < rollupSchema.size(); theBeginIndexOfValue++) {\n-                    Column rollupColumn = rollupSchema.get(theBeginIndexOfValue);\n-                    rollupColumn.setIsKey(false);\n-                    rollupColumn.setAggregationType(AggregateType.NONE, true);\n+                    rollupSchema.add(rollupColumn);\n                 }\n             } else {\n                 /*\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkzMDQ5MA==", "url": "https://github.com/apache/incubator-doris/pull/3812#discussion_r437930490", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        supplyShortKey();\n          \n          \n            \n                        selectShortKey();", "author": "morningman", "createdAt": "2020-06-10T07:54:06Z", "path": "fe/src/main/java/org/apache/doris/analysis/CreateMaterializedViewStmt.java", "diffHunk": "@@ -226,49 +224,14 @@ private void analyzeFromClause() throws AnalysisException {\n \n     private void analyzeOrderByClause() throws AnalysisException {\n         if (selectStmt.getOrderByElements() == null) {\n-            /**\n-             * The keys type of Materialized view is aggregation.\n-             * All of group by columns are keys of materialized view.\n-             */\n-            if (mvKeysType == KeysType.AGG_KEYS) {\n-                for (MVColumnItem mvColumnItem : mvColumnItemList) {\n-                    if (mvColumnItem.getAggregationType() != null) {\n-                        break;\n-                    }\n-                    mvColumnItem.setIsKey(true);\n-                }\n-                return;\n-            }\n-\n-            /**\n-             * There is no aggregation function in materialized view.\n-             * Supplement key of MV columns\n-             * For example: select k1, k2 ... kn from t1\n-             * The default key columns are first 36 bytes of the columns in define order.\n-             * If the number of columns in the first 36 is less than 3, the first 3 columns will be used.\n-             * column: k1, k2, k3... km. The key is true.\n-             * Supplement non-key of MV columns\n-             * column: km... kn. The key is false, aggregation type is none, isAggregationTypeImplicit is true.\n-             */\n-            int keyStorageLayoutBytes = 0;\n-            for (int i = 0; i < selectStmt.getResultExprs().size(); i++) {\n-                MVColumnItem mvColumnItem = mvColumnItemList.get(i);\n-                Expr resultColumn = selectStmt.getResultExprs().get(i);\n-                keyStorageLayoutBytes += resultColumn.getType().getStorageLayoutBytes();\n-                if ((i + 1) <= FeConstants.shortkey_max_column_count\n-                        || keyStorageLayoutBytes < FeConstants.shortkey_maxsize_bytes) {\n-                    mvColumnItem.setIsKey(true);\n-                } else {\n-                    mvColumnItem.setAggregationType(AggregateType.NONE, true);\n-                }\n-            }\n+            supplyShortKey();", "originalCommit": "d63c9a83c59b44580154593cc79a1af24669cc9e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "606d17ea3d206e9febdd50b79df2e6710a9aa16a", "chunk": "diff --git a/fe/src/main/java/org/apache/doris/analysis/CreateMaterializedViewStmt.java b/fe/src/main/java/org/apache/doris/analysis/CreateMaterializedViewStmt.java\nindex 3723db095..9d66bf96c 100644\n--- a/fe/src/main/java/org/apache/doris/analysis/CreateMaterializedViewStmt.java\n+++ b/fe/src/main/java/org/apache/doris/analysis/CreateMaterializedViewStmt.java\n\n@@ -224,14 +227,57 @@ public class CreateMaterializedViewStmt extends DdlStmt {\n \n     private void analyzeOrderByClause() throws AnalysisException {\n         if (selectStmt.getOrderByElements() == null) {\n-            supplyShortKey();\n+            /**\n+             * The keys type of Materialized view is aggregation.\n+             * All of group by columns are keys of materialized view.\n+             */\n+            if (mvKeysType == KeysType.AGG_KEYS) {\n+                for (MVColumnItem mvColumnItem : mvColumnItemList) {\n+                    if (mvColumnItem.getAggregationType() != null) {\n+                        break;\n+                    }\n+                    if (mvColumnItem.getType().isFloatingPointType()) {\n+                        throw new AnalysisException(\"Float or double can not used as a key, use decimal instead.\");\n+                    }\n+                    mvColumnItem.setIsKey(true);\n+                }\n+                return;\n+            }\n+\n+            /**\n+             * There is no aggregation function in materialized view.\n+             * Supplement key of MV columns\n+             * For example: select k1, k2 ... kn from t1\n+             * The default key columns are first 36 bytes of the columns in define order.\n+             * If the number of columns in the first 36 is less than 3, the first 3 columns will be used.\n+             * column: k1, k2, k3... km. The key is true.\n+             * Supplement non-key of MV columns\n+             * column: km... kn. The key is false, aggregation type is none, isAggregationTypeImplicit is true.\n+             */\n+            int keyStorageLayoutBytes = 0;\n+            for (int i = 0; i < selectStmt.getResultExprs().size(); i++) {\n+                MVColumnItem mvColumnItem = mvColumnItemList.get(i);\n+                Expr resultColumn = selectStmt.getResultExprs().get(i);\n+                keyStorageLayoutBytes += resultColumn.getType().getStorageLayoutBytes();\n+                if ((!mvColumnItem.getType().isFloatingPointType())\n+                        && ((i + 1) <= FeConstants.shortkey_max_column_count\n+                        || keyStorageLayoutBytes < FeConstants.shortkey_maxsize_bytes)) {\n+                    mvColumnItem.setIsKey(true);\n+                } else {\n+                    if (i == 0) {\n+                        throw new AnalysisException(\"The first column could not be float or double, \"\n+                                + \"use decimal instead.\");\n+                    }\n+                    mvColumnItem.setAggregationType(AggregateType.NONE, true);\n+                }\n+            }\n             return;\n         }\n \n         List<OrderByElement> orderByElements = selectStmt.getOrderByElements();\n         if (orderByElements.size() > mvColumnItemList.size()) {\n-            throw new AnalysisException(\"The number of columns in order clause must be less then \" + \"the number of \"\n-                    + \"columns in select clause\");\n+            throw new AnalysisException(\"The number of columns in order clause must be less then \"\n+                                                + \"the number of columns in select clause\");\n         }\n         if (beginIndexOfAggregation != -1 && (orderByElements.size() != (beginIndexOfAggregation))) {\n             throw new AnalysisException(\"The key of columns in mv must be all of group by columns\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE5NjI3Nw==", "url": "https://github.com/apache/incubator-doris/pull/3812#discussion_r438196277", "bodyText": "Not use it?", "author": "morningman", "createdAt": "2020-06-10T15:06:40Z", "path": "fe/src/main/java/org/apache/doris/analysis/CreateMaterializedViewStmt.java", "diffHunk": "@@ -68,9 +69,9 @@\n     private String baseIndexName;\n     private String dbName;\n     private KeysType mvKeysType = KeysType.DUP_KEYS;\n+    private int shortKeyColumnCount;", "originalCommit": "0b0b13ca9ee44d5a11a8a3d96307b9f6f13d6b10", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "606d17ea3d206e9febdd50b79df2e6710a9aa16a", "chunk": "diff --git a/fe/src/main/java/org/apache/doris/analysis/CreateMaterializedViewStmt.java b/fe/src/main/java/org/apache/doris/analysis/CreateMaterializedViewStmt.java\nindex cb65fb835..9d66bf96c 100644\n--- a/fe/src/main/java/org/apache/doris/analysis/CreateMaterializedViewStmt.java\n+++ b/fe/src/main/java/org/apache/doris/analysis/CreateMaterializedViewStmt.java\n\n@@ -69,9 +68,9 @@ public class CreateMaterializedViewStmt extends DdlStmt {\n     private String baseIndexName;\n     private String dbName;\n     private KeysType mvKeysType = KeysType.DUP_KEYS;\n-    private int shortKeyColumnCount;\n \n-    public CreateMaterializedViewStmt(String mvName, SelectStmt selectStmt, Map<String, String> properties) {\n+    public CreateMaterializedViewStmt(String mvName, SelectStmt selectStmt,\n+                                      Map<String, String> properties) {\n         this.mvName = mvName;\n         this.selectStmt = selectStmt;\n         this.properties = properties;\n"}}, {"oid": "606d17ea3d206e9febdd50b79df2e6710a9aa16a", "url": "https://github.com/apache/incubator-doris/commit/606d17ea3d206e9febdd50b79df2e6710a9aa16a", "message": "Forbidden float column in short key\n\nWhen the user does not specify the key column, doris will automatically supplement the key column.\nHowever, doris does not support float or double as the key column, so when adding the key column, doris should avoid setting those column as the key column.\n\nThe CreateMaterailizedView, AddRollup and CreateDuplicateTable need to forbidden float column in short key.\nIf the float column is directly encountered during the supplement process, the subsequent columns are all value columns.\nIf the first column is float or double, Doris will throw the exception.\n\nFixed #3811\n\nChange-Id: Ib66d9355acefcd8f281906bcb7b4dd684319ff08", "committedDate": "2020-06-17T02:55:17Z", "type": "commit"}, {"oid": "3a32e578af3b7d1da216a30029e6411cc153b1e5", "url": "https://github.com/apache/incubator-doris/commit/3a32e578af3b7d1da216a30029e6411cc153b1e5", "message": "Update fe/src/main/java/org/apache/doris/analysis/CreateMaterializedViewStmt.java\n\nCo-authored-by: Mingyu Chen <morningman.cmy@gmail.com>", "committedDate": "2020-06-17T02:55:17Z", "type": "commit"}, {"oid": "a85fd5db48570b80393a00c0fc9e108158021ef0", "url": "https://github.com/apache/incubator-doris/commit/a85fd5db48570b80393a00c0fc9e108158021ef0", "message": "Fix bug\n\nChange-Id: Id5236ff7229fc1c1d35df579dd3c62e699392ba5", "committedDate": "2020-06-17T02:56:25Z", "type": "commit"}, {"oid": "8b8b5c5b7d1487d657679d58c3203e670b48bf3c", "url": "https://github.com/apache/incubator-doris/commit/8b8b5c5b7d1487d657679d58c3203e670b48bf3c", "message": "Change the error msg\n\nChange-Id: Ie1320d9af56083633c7634c1c3df485f3994da31", "committedDate": "2020-06-17T02:56:25Z", "type": "commit"}, {"oid": "6ec2aa18b5e3aba471456883b03ac8c6fb8698ba", "url": "https://github.com/apache/incubator-doris/commit/6ec2aa18b5e3aba471456883b03ac8c6fb8698ba", "message": "Change code style\n\nChange-Id: Ib4c4791847d522fa312efff4016787c9caeab785", "committedDate": "2020-06-17T02:56:25Z", "type": "commit"}, {"oid": "b935490808aea3ca97e8a1d221993c8c2690a506", "url": "https://github.com/apache/incubator-doris/commit/b935490808aea3ca97e8a1d221993c8c2690a506", "message": "Change the strategy of order by column(key column)\n\nFor duplicate table without order by columns, the order by columns are same as short key columns.\nIf the order by columns have been designated, the count of short key columns must be <= the count of order by columns.\nThe short key columns must be less then 3 columns and less then 36 bytes.\nAlso the float and double could not be the short key column. At the same time, doirs must be at least one short key column.\nSo the type of first column could not be float or double.\nIf the varchar is the short key column, it can only be the least one short key column.\n\nChange-Id: I46ec2c78e87d73c3f3aeeb815b9acc6dcfe280e0", "committedDate": "2020-06-17T02:57:16Z", "type": "commit"}, {"oid": "eaa8c7dee01a7ede52a78270c51aecffa7259685", "url": "https://github.com/apache/incubator-doris/commit/eaa8c7dee01a7ede52a78270c51aecffa7259685", "message": "Remove unused\n\nChange-Id: Ia4d2a9bfb1b4321dc3ed8e2dd243d9a4fd2dbf69", "committedDate": "2020-06-17T02:57:16Z", "type": "commit"}, {"oid": "269a501f872203800c916b924c1d75b4799c7389", "url": "https://github.com/apache/incubator-doris/commit/269a501f872203800c916b924c1d75b4799c7389", "message": "Change comment\n\nChange-Id: I1d13600a39d59cf93feb42df85c1089ca1029615", "committedDate": "2020-06-17T02:57:17Z", "type": "commit"}, {"oid": "9317574ab0042319b4ace0ec5f8006682f515e14", "url": "https://github.com/apache/incubator-doris/commit/9317574ab0042319b4ace0ec5f8006682f515e14", "message": "Remove unused import\n\nChange-Id: Id647f940b81ebfc27e18ef83e5275af7177bf926", "committedDate": "2020-06-17T02:57:17Z", "type": "commit"}, {"oid": "37d2b2a5c03d712a399b5b6c6ec9406f3236ace5", "url": "https://github.com/apache/incubator-doris/commit/37d2b2a5c03d712a399b5b6c6ec9406f3236ace5", "message": "Fix bug\n\nChange-Id: I4d560427156855f28598ed089048006ea8d685c4", "committedDate": "2020-06-17T02:57:17Z", "type": "commit"}, {"oid": "2d3babab4a34f99b9e7695831faf8c28d383ad18", "url": "https://github.com/apache/incubator-doris/commit/2d3babab4a34f99b9e7695831faf8c28d383ad18", "message": "Fix bug\n\nChange-Id: Iccfce893d120506667c55444a11841b91a1d322b", "committedDate": "2020-06-17T02:57:17Z", "type": "commit"}, {"oid": "7586565359b440cde0b0adbb3371aaa14d223374", "url": "https://github.com/apache/incubator-doris/commit/7586565359b440cde0b0adbb3371aaa14d223374", "message": "Fix bug\n\nChange-Id: Ia88fa8cfa70661328300864054962931a8c0e225", "committedDate": "2020-06-17T02:57:17Z", "type": "commit"}, {"oid": "c699c3ad822645015137d3c2649a8dc75b9e1dfc", "url": "https://github.com/apache/incubator-doris/commit/c699c3ad822645015137d3c2649a8dc75b9e1dfc", "message": "Fix ut\n\nChange-Id: I88e36a2379ae2e0659358bb5ba59d93bccfe37f1", "committedDate": "2020-06-17T02:58:04Z", "type": "commit"}, {"oid": "c699c3ad822645015137d3c2649a8dc75b9e1dfc", "url": "https://github.com/apache/incubator-doris/commit/c699c3ad822645015137d3c2649a8dc75b9e1dfc", "message": "Fix ut\n\nChange-Id: I88e36a2379ae2e0659358bb5ba59d93bccfe37f1", "committedDate": "2020-06-17T02:58:04Z", "type": "forcePushed"}]}