{"pr_number": 3511, "pr_title": "[Bug] Fix constant In Predicate result error", "pr_createdAt": "2020-05-07T13:25:08Z", "pr_url": "https://github.com/apache/incubator-doris/pull/3511", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYyNTg5OA==", "url": "https://github.com/apache/incubator-doris/pull/3511#discussion_r421625898", "bodyText": "Why use static variable?  I think local variable is enough.", "author": "kangkaisen", "createdAt": "2020-05-07T16:13:22Z", "path": "fe/src/main/java/org/apache/doris/analysis/InPredicate.java", "diffHunk": "@@ -54,6 +54,8 @@\n     private static final String IN = \"in\";\n     private static final String NOT_IN = \"not_in\";\n \n+    private static final NullLiteral NULL_LITERAL = new NullLiteral();", "originalCommit": "cd1290949d146c68f704975c5835a1df0fb3b35d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg5NTM3NA==", "url": "https://github.com/apache/incubator-doris/pull/3511#discussion_r421895374", "bodyText": "This object does not need to have one for every InPredicate instance.", "author": "morningman", "createdAt": "2020-05-08T02:05:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYyNTg5OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYyNjgwMA==", "url": "https://github.com/apache/incubator-doris/pull/3511#discussion_r421626800", "bodyText": "please move the test to ConstantExpressTest", "author": "kangkaisen", "createdAt": "2020-05-07T16:14:40Z", "path": "fe/src/test/java/org/apache/doris/planner/QueryPlanTest.java", "diffHunk": "@@ -725,4 +725,58 @@ public void testJoinPredicateTransitivityWithSubqueryInWhereClause() throws Exce\n         Assert.assertTrue(explainString.contains(\"CROSS JOIN\"));\n         Assert.assertTrue(!explainString.contains(\"PREDICATES\"));\n     }\n+\n+    @Test\n+    public void testConstantInPredicate() throws Exception {", "originalCommit": "cd1290949d146c68f704975c5835a1df0fb3b35d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg5NDM5MA==", "url": "https://github.com/apache/incubator-doris/pull/3511#discussion_r421894390", "bodyText": "OK", "author": "morningman", "createdAt": "2020-05-08T02:01:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYyNjgwMA=="}], "type": "inlineReview", "revised_code": {"commit": "da5225e9d18b832bb4f84255d7c10d8ea9bed57a", "chunk": "diff --git a/fe/src/test/java/org/apache/doris/planner/QueryPlanTest.java b/fe/src/test/java/org/apache/doris/planner/QueryPlanTest.java\nindex 2ccc8f91a..15c2de3bb 100644\n--- a/fe/src/test/java/org/apache/doris/planner/QueryPlanTest.java\n+++ b/fe/src/test/java/org/apache/doris/planner/QueryPlanTest.java\n\n@@ -711,72 +712,117 @@ public class QueryPlanTest {\n         Assert.assertTrue(explainString.contains(\"PREDICATES: `join1`.`id` > 1\"));\n         Assert.assertFalse(explainString.contains(\"PREDICATES: `join2`.`id` > 1\"));\n     }\n-    \n+\n+    @Test\n+    public void testConvertCaseWhenToConstant() throws Exception {\n+        // basic test\n+        String caseWhenSql = \"select \"\n+                + \"case when date_format(now(),'%H%i')  < 123 then 1 else 0 end as col \"\n+                + \"from test.test1 \"\n+                + \"where time = case when date_format(now(),'%H%i')  < 123 then date_format(date_sub(now(),2),'%Y%m%d') else date_format(date_sub(now(),1),'%Y%m%d') end\";\n+        Assert.assertTrue(!StringUtils.containsIgnoreCase(UtFrameUtils.getSQLPlanOrErrorMsg(connectContext, \"explain \" + caseWhenSql), \"CASE WHEN\"));\n+\n+        // test 1: case when then\n+        // 1.1 multi when in on `case when` and can be converted to constants\n+        String sql11 = \"select case when false then 2 when true then 3 else 0 end as col11;\";\n+        Assert.assertTrue(StringUtils.containsIgnoreCase(UtFrameUtils.getSQLPlanOrErrorMsg(connectContext, \"explain \" + sql11), \"constant exprs: \\n         3\"));\n+\n+        // 1.2 multi `when expr` in on `case when` ,`when expr` can not be converted to constants\n+        String sql121 = \"select case when false then 2 when substr(k7,2,1) then 3 else 0 end as col121 from test.baseall\";\n+        Assert.assertTrue(StringUtils.containsIgnoreCase(UtFrameUtils.getSQLPlanOrErrorMsg(connectContext, \"explain \" + sql121),\n+                \"OUTPUT EXPRS:CASE WHEN substr(`k7`, 2, 1) THEN 3 ELSE 0 END\"));\n+\n+        // 1.2.2 when expr which can not be converted to constants in the first\n+        String sql122 = \"select case when substr(k7,2,1) then 2 when false then 3 else 0 end as col122 from test.baseall\";\n+        Assert.assertTrue(StringUtils.containsIgnoreCase(UtFrameUtils.getSQLPlanOrErrorMsg(connectContext, \"explain \" + sql122),\n+                \"OUTPUT EXPRS:CASE WHEN substr(`k7`, 2, 1) THEN 2 WHEN FALSE THEN 3 ELSE 0 END\"));\n+\n+        // 1.2.3 test return `then expr` in the middle\n+        String sql124 = \"select case when false then 1 when true then 2 when false then 3 else 'other' end as col124\";\n+        Assert.assertTrue(StringUtils.containsIgnoreCase(UtFrameUtils.getSQLPlanOrErrorMsg(connectContext, \"explain \" + sql124), \"constant exprs: \\n         '2'\"));\n+\n+        // 1.3 test return null\n+        String sql3 = \"select case when false then 2 end as col3\";\n+        Assert.assertTrue(StringUtils.containsIgnoreCase(UtFrameUtils.getSQLPlanOrErrorMsg(connectContext, \"explain \" + sql3), \"constant exprs: \\n         NULL\"));\n+\n+        // 1.3.1 test return else expr\n+        String sql131 = \"select case when false then 2 when false then 3 else 4 end as col131\";\n+        Assert.assertTrue(StringUtils.containsIgnoreCase(UtFrameUtils.getSQLPlanOrErrorMsg(connectContext, \"explain \" + sql131), \"constant exprs: \\n         4\"));\n+\n+        // 1.4 nest `case when` and can be converted to constants\n+        String sql14 = \"select case when (case when true then true else false end) then 2 when false then 3 else 0 end as col\";\n+        Assert.assertTrue(StringUtils.containsIgnoreCase(UtFrameUtils.getSQLPlanOrErrorMsg(connectContext, \"explain \" + sql14), \"constant exprs: \\n         2\"));\n+\n+        // 1.5 nest `case when` and can not be converted to constants\n+        String sql15 = \"select case when case when substr(k7,2,1) then true else false end then 2 when false then 3 else 0 end as col from test.baseall\";\n+        Assert.assertTrue(StringUtils.containsIgnoreCase(UtFrameUtils.getSQLPlanOrErrorMsg(connectContext, \"explain \" + sql15),\n+                \"OUTPUT EXPRS:CASE WHEN CASE WHEN substr(`k7`, 2, 1) THEN TRUE ELSE FALSE END THEN 2 WHEN FALSE THEN 3 ELSE 0 END\"));\n+\n+        // 1.6 test when expr is null\n+        String sql16 = \"select case when null then 1 else 2 end as col16;\";\n+        Assert.assertTrue(StringUtils.containsIgnoreCase(UtFrameUtils.getSQLPlanOrErrorMsg(connectContext, \"explain \" + sql16), \"constant exprs: \\n         2\"));\n+\n+        // test 2: case xxx when then\n+        // 2.1 test equal\n+        String sql2 = \"select case 1 when 1 then 'a' when 2 then 'b' else 'other' end as col2;\";\n+        Assert.assertTrue(StringUtils.containsIgnoreCase(UtFrameUtils.getSQLPlanOrErrorMsg(connectContext, \"explain \" + sql2), \"constant exprs: \\n         'a'\"));\n+\n+        // 2.1.2 test not equal\n+        String sql212 = \"select case 'a' when 1 then 'a' when 'a' then 'b' else 'other' end as col212;\";\n+        Assert.assertTrue(StringUtils.containsIgnoreCase(UtFrameUtils.getSQLPlanOrErrorMsg(connectContext, \"explain \" + sql212), \"constant exprs: \\n         'b'\"));\n+\n+        // 2.2 test return null\n+        String sql22 = \"select case 'a' when 1 then 'a' when 'b' then 'b' end as col22;\";\n+        Assert.assertTrue(StringUtils.containsIgnoreCase(UtFrameUtils.getSQLPlanOrErrorMsg(connectContext, \"explain \" + sql22), \"constant exprs: \\n         NULL\"));\n+\n+        // 2.2.2 test return else\n+        String sql222 = \"select case 1 when 2 then 'a' when 3 then 'b' else 'other' end as col222;\";\n+        Assert.assertTrue(StringUtils.containsIgnoreCase(UtFrameUtils.getSQLPlanOrErrorMsg(connectContext, \"explain \" + sql222), \"constant exprs: \\n         'other'\"));\n+\n+        // 2.3 test can not convert to constant,middle when expr is not constant\n+        String sql23 = \"select case 'a' when 'b' then 'a' when substr(k7,2,1) then 2 when false then 3 else 0 end as col23 from test.baseall\";\n+        Assert.assertTrue(StringUtils.containsIgnoreCase(UtFrameUtils.getSQLPlanOrErrorMsg(connectContext, \"explain \" + sql23),\n+                \"OUTPUT EXPRS:CASE'a' WHEN substr(`k7`, 2, 1) THEN '2' WHEN '0' THEN '3' ELSE '0' END\"));\n+\n+        // 2.3.1  first when expr is not constant\n+        String sql231 = \"select case 'a' when substr(k7,2,1) then 2 when 1 then 'a' when false then 3 else 0 end as col231 from test.baseall\";\n+        Assert.assertTrue(StringUtils.containsIgnoreCase(UtFrameUtils.getSQLPlanOrErrorMsg(connectContext, \"explain \" + sql231),\n+                \"OUTPUT EXPRS:CASE'a' WHEN substr(`k7`, 2, 1) THEN '2' WHEN '1' THEN 'a' WHEN '0' THEN '3' ELSE '0' END\"));\n+\n+        // 2.3.2 case expr is not constant\n+        String sql232 = \"select case k1 when substr(k7,2,1) then 2 when 1 then 'a' when false then 3 else 0 end as col232 from test.baseall\";\n+        Assert.assertTrue(StringUtils.containsIgnoreCase(UtFrameUtils.getSQLPlanOrErrorMsg(connectContext, \"explain \" + sql232),\n+                \"OUTPUT EXPRS:CASE`k1` WHEN substr(`k7`, 2, 1) THEN '2' WHEN '1' THEN 'a' WHEN '0' THEN '3' ELSE '0' END\"));\n+\n+        // 3.1 test float,float in case expr\n+        String sql31 = \"select case cast(100 as float) when 1 then 'a' when 2 then 'b' else 'other' end as col31;\";\n+        Assert.assertTrue(StringUtils.containsIgnoreCase(UtFrameUtils.getSQLPlanOrErrorMsg(connectContext, \"explain \" + sql31),\n+                \"constant exprs: \\n         CASE100.0 WHEN 1.0 THEN 'a' WHEN 2.0 THEN 'b' ELSE 'other' END\"));\n+\n+        // 4.1 test null in case expr return else\n+        String sql41 = \"select case null when 1 then 'a' when 2 then 'b' else 'other' end as col41\";\n+        Assert.assertTrue(StringUtils.containsIgnoreCase(UtFrameUtils.getSQLPlanOrErrorMsg(connectContext, \"explain \" + sql41), \"constant exprs: \\n         'other'\"));\n+\n+        // 4.1.2 test null in case expr return null\n+        String sql412 = \"select case null when 1 then 'a' when 2 then 'b' end as col41\";\n+        Assert.assertTrue(StringUtils.containsIgnoreCase(UtFrameUtils.getSQLPlanOrErrorMsg(connectContext, \"explain \" + sql412), \"constant exprs: \\n         NULL\"));\n+\n+        // 4.2.1 test null in when expr\n+        String sql421 = \"select case 'a' when null then 'a' else 'other' end as col421\";\n+        Assert.assertTrue(StringUtils.containsIgnoreCase(UtFrameUtils.getSQLPlanOrErrorMsg(connectContext, \"explain \" + sql421), \"constant exprs: \\n         'other'\"));\n+    }\n+\n     @Test\n     public void testJoinPredicateTransitivityWithSubqueryInWhereClause() throws Exception {\n         connectContext.setDatabase(\"default_cluster:test\");\n-        String sql = \"SELECT *\\n\" + \n+        String sql = \"SELECT *\\n\" +\n                 \"FROM test.pushdown_test\\n\" +\n                 \"WHERE 0 < (\\n\" +\n-                \"    SELECT MAX(k9)\\n\" + \n+                \"    SELECT MAX(k9)\\n\" +\n                 \"    FROM test.pushdown_test);\";\n         String explainString = UtFrameUtils.getSQLPlanOrErrorMsg(connectContext, \"explain \" + sql);\n         Assert.assertTrue(explainString.contains(\"PLAN FRAGMENT\"));\n         Assert.assertTrue(explainString.contains(\"CROSS JOIN\"));\n         Assert.assertTrue(!explainString.contains(\"PREDICATES\"));\n     }\n-\n-    @Test\n-    public void testConstantInPredicate() throws Exception {\n-        connectContext.setDatabase(\"default_cluster:test\");\n-        // for constant NOT IN PREDICATE\n-        String sql = \"select 1 not in (1, 2);\";\n-        String explainString = UtFrameUtils.getSQLPlanOrErrorMsg(connectContext, \"explain \" + sql);\n-        Assert.assertTrue(explainString.contains(\"FALSE\"));\n-\n-        sql = \"select 1 not in (2, 3);\";\n-        explainString = UtFrameUtils.getSQLPlanOrErrorMsg(connectContext, \"explain \" + sql);\n-        Assert.assertTrue(explainString.contains(\"TRUE\"));\n-\n-        sql = \"select 1 not in (2, null);\";\n-        explainString = UtFrameUtils.getSQLPlanOrErrorMsg(connectContext, \"explain \" + sql);\n-        Assert.assertTrue(explainString.contains(\"NULL\"));\n-\n-        sql = \"select 1 not in (1, 2, null);\";\n-        explainString = UtFrameUtils.getSQLPlanOrErrorMsg(connectContext, \"explain \" + sql);\n-        Assert.assertTrue(explainString.contains(\"FALSE\"));\n-\n-        sql = \"select null not in (1, 2);\";\n-        explainString = UtFrameUtils.getSQLPlanOrErrorMsg(connectContext, \"explain \" + sql);\n-        Assert.assertTrue(explainString.contains(\"NULL\"));\n-\n-        sql = \"select null not in (null);\";\n-        explainString = UtFrameUtils.getSQLPlanOrErrorMsg(connectContext, \"explain \" + sql);\n-        Assert.assertTrue(explainString.contains(\"NULL\"));\n-\n-        // for constant IN PREDICATE\n-        sql = \"select 1 in (1, 2);\";\n-        explainString = UtFrameUtils.getSQLPlanOrErrorMsg(connectContext, \"explain \" + sql);\n-        Assert.assertTrue(explainString.contains(\"TRUE\"));\n-\n-        sql = \"select 1 in (2, 3);\";\n-        explainString = UtFrameUtils.getSQLPlanOrErrorMsg(connectContext, \"explain \" + sql);\n-        Assert.assertTrue(explainString.contains(\"FALSE\"));\n-\n-        sql = \"select 1 in (1, 2, NULL);\";\n-        explainString = UtFrameUtils.getSQLPlanOrErrorMsg(connectContext, \"explain \" + sql);\n-        Assert.assertTrue(explainString.contains(\"TRUE\"));\n-\n-        sql = \"select 1 in (2, NULL);\";\n-        explainString = UtFrameUtils.getSQLPlanOrErrorMsg(connectContext, \"explain \" + sql);\n-        Assert.assertTrue(explainString.contains(\"NULL\"));\n-\n-        sql = \"select null in (2);\";\n-        explainString = UtFrameUtils.getSQLPlanOrErrorMsg(connectContext, \"explain \" + sql);\n-        Assert.assertTrue(explainString.contains(\"NULL\"));\n-\n-        sql = \"select null in (null);\";\n-        explainString = UtFrameUtils.getSQLPlanOrErrorMsg(connectContext, \"explain \" + sql);\n-        Assert.assertTrue(explainString.contains(\"NULL\"));\n-    }\n }\n"}}, {"oid": "da5225e9d18b832bb4f84255d7c10d8ea9bed57a", "url": "https://github.com/apache/incubator-doris/commit/da5225e9d18b832bb4f84255d7c10d8ea9bed57a", "message": "[Bug] Fix constant In Predicate result error\n\n`select 1 not in (2, NULL, 1);` should return `0`", "committedDate": "2020-05-08T02:03:35Z", "type": "commit"}, {"oid": "7d49db31fbde26cbe14e95e5311321460476e61b", "url": "https://github.com/apache/incubator-doris/commit/7d49db31fbde26cbe14e95e5311321460476e61b", "message": "fix", "committedDate": "2020-05-08T02:05:39Z", "type": "commit"}, {"oid": "7d49db31fbde26cbe14e95e5311321460476e61b", "url": "https://github.com/apache/incubator-doris/commit/7d49db31fbde26cbe14e95e5311321460476e61b", "message": "fix", "committedDate": "2020-05-08T02:05:39Z", "type": "forcePushed"}]}