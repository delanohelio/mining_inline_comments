{"pr_number": 4482, "pr_title": "Do not add exchange when table's distributioin satisfy the distribution requirements", "pr_createdAt": "2020-08-28T16:11:58Z", "pr_url": "https://github.com/apache/incubator-doris/pull/4482", "timeline": [{"oid": "123dc155e122404b2a72ea56ee11c391028c0b7f", "url": "https://github.com/apache/incubator-doris/commit/123dc155e122404b2a72ea56ee11c391028c0b7f", "message": "Do not add exchange when table's distributioin satisfy the distribution requirements\n\nFor #4481.\nIn DistributedPlanner, do not add the unnecessary Exchanges.\nFor case 1, we only need to judge that the table's distribute hash keys is a subset of the aggregate keys.\nFor case 2, we should jude two conditions:\n - partition keys are also hash keys.\n - the table's distribute hash keys is a subset of the aggregate keys.", "committedDate": "2020-08-28T16:08:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTczMjUwOA==", "url": "https://github.com/apache/incubator-doris/pull/4482#discussion_r479732508", "bodyText": "partitionExprs is null has checked in  if (partitionExprs == null) partitionExprs = groupingExprs;, So I think we could remove this check.", "author": "kangkaisen", "createdAt": "2020-08-30T07:12:29Z", "path": "fe/fe-core/src/main/java/org/apache/doris/catalog/OlapTable.java", "diffHunk": "@@ -1577,4 +1580,31 @@ public TStorageFormat getStorageFormat() {\n         }\n         return tableProperty.getStorageFormat();\n     }\n+\n+    public boolean satisfyHashDistribution(List<Expr> hashExprs) {\n+        if (hashExprs == null) {", "originalCommit": "123dc155e122404b2a72ea56ee11c391028c0b7f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8adbd1356cf112894c7021ec850b4adb3525ea9c", "chunk": "diff --git a/fe/fe-core/src/main/java/org/apache/doris/catalog/OlapTable.java b/fe/fe-core/src/main/java/org/apache/doris/catalog/OlapTable.java\nindex 8ac0e82f9..748a8885e 100644\n--- a/fe/fe-core/src/main/java/org/apache/doris/catalog/OlapTable.java\n+++ b/fe/fe-core/src/main/java/org/apache/doris/catalog/OlapTable.java\n\n@@ -1581,23 +1582,32 @@ public class OlapTable extends Table {\n         return tableProperty.getStorageFormat();\n     }\n \n-    public boolean satisfyHashDistribution(List<Expr> hashExprs) {\n-        if (hashExprs == null) {\n+    // For non partitioned table:\n+    //   The table's distribute hash columns need to be a subset of the aggregate columns.\n+    //\n+    // For partitioned table:\n+    //   1. The table's partition columns need to be a subset of the table's hash columns.\n+    //   2. The table's distribute hash columns need to be a subset of the aggregate columns.\n+    public boolean meetAggDistributionRequirements(AggregateInfo aggregateInfo) {\n+        ArrayList<Expr> groupingExps = aggregateInfo.getGroupingExprs();\n+        if (groupingExps == null || groupingExps.isEmpty()) {\n             return false;\n         }\n+        List<Expr> partitionExps = aggregateInfo.getPartitionExprs() != null ?\n+                aggregateInfo.getPartitionExprs() : groupingExps;\n         DistributionInfo distribution = getDefaultDistributionInfo();\n         if(distribution instanceof HashDistributionInfo) {\n             List<Column> distributeColumns =\n                     ((HashDistributionInfo)distribution).getDistributionColumns();\n-            PartitionInfo childPartitionInfo = getPartitionInfo();\n-            if (childPartitionInfo instanceof RangePartitionInfo) {\n-                List<Column> rangeColumns = ((RangePartitionInfo)childPartitionInfo).getPartitionColumns();\n+            PartitionInfo partitionInfo = getPartitionInfo();\n+            if (partitionInfo instanceof RangePartitionInfo) {\n+                List<Column> rangeColumns = ((RangePartitionInfo)partitionInfo).getPartitionColumns();\n                 if (!distributeColumns.containsAll(rangeColumns)) {\n                     return false;\n                 }\n             }\n             List<SlotRef> partitionSlots =\n-                    hashExprs.stream().map(Expr::unwrapSlotRef).collect(Collectors.toList());\n+                    partitionExps.stream().map(Expr::unwrapSlotRef).collect(Collectors.toList());\n             if (partitionSlots.contains(null)) {\n                 return false;\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTczMjk4Mw==", "url": "https://github.com/apache/incubator-doris/pull/4482#discussion_r479732983", "bodyText": "Rename to couldLocalGorupBy or similar name?", "author": "kangkaisen", "createdAt": "2020-08-30T07:17:25Z", "path": "fe/fe-core/src/main/java/org/apache/doris/catalog/OlapTable.java", "diffHunk": "@@ -1577,4 +1580,31 @@ public TStorageFormat getStorageFormat() {\n         }\n         return tableProperty.getStorageFormat();\n     }\n+\n+    public boolean satisfyHashDistribution(List<Expr> hashExprs) {", "originalCommit": "123dc155e122404b2a72ea56ee11c391028c0b7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTczOTQ5MQ==", "url": "https://github.com/apache/incubator-doris/pull/4482#discussion_r479739491", "bodyText": "Rename to meetAggDistributionRequirements and change the param to AggregateInfo.", "author": "liutang123", "createdAt": "2020-08-30T08:26:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTczMjk4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "8adbd1356cf112894c7021ec850b4adb3525ea9c", "chunk": "diff --git a/fe/fe-core/src/main/java/org/apache/doris/catalog/OlapTable.java b/fe/fe-core/src/main/java/org/apache/doris/catalog/OlapTable.java\nindex 8ac0e82f9..748a8885e 100644\n--- a/fe/fe-core/src/main/java/org/apache/doris/catalog/OlapTable.java\n+++ b/fe/fe-core/src/main/java/org/apache/doris/catalog/OlapTable.java\n\n@@ -1581,23 +1582,32 @@ public class OlapTable extends Table {\n         return tableProperty.getStorageFormat();\n     }\n \n-    public boolean satisfyHashDistribution(List<Expr> hashExprs) {\n-        if (hashExprs == null) {\n+    // For non partitioned table:\n+    //   The table's distribute hash columns need to be a subset of the aggregate columns.\n+    //\n+    // For partitioned table:\n+    //   1. The table's partition columns need to be a subset of the table's hash columns.\n+    //   2. The table's distribute hash columns need to be a subset of the aggregate columns.\n+    public boolean meetAggDistributionRequirements(AggregateInfo aggregateInfo) {\n+        ArrayList<Expr> groupingExps = aggregateInfo.getGroupingExprs();\n+        if (groupingExps == null || groupingExps.isEmpty()) {\n             return false;\n         }\n+        List<Expr> partitionExps = aggregateInfo.getPartitionExprs() != null ?\n+                aggregateInfo.getPartitionExprs() : groupingExps;\n         DistributionInfo distribution = getDefaultDistributionInfo();\n         if(distribution instanceof HashDistributionInfo) {\n             List<Column> distributeColumns =\n                     ((HashDistributionInfo)distribution).getDistributionColumns();\n-            PartitionInfo childPartitionInfo = getPartitionInfo();\n-            if (childPartitionInfo instanceof RangePartitionInfo) {\n-                List<Column> rangeColumns = ((RangePartitionInfo)childPartitionInfo).getPartitionColumns();\n+            PartitionInfo partitionInfo = getPartitionInfo();\n+            if (partitionInfo instanceof RangePartitionInfo) {\n+                List<Column> rangeColumns = ((RangePartitionInfo)partitionInfo).getPartitionColumns();\n                 if (!distributeColumns.containsAll(rangeColumns)) {\n                     return false;\n                 }\n             }\n             List<SlotRef> partitionSlots =\n-                    hashExprs.stream().map(Expr::unwrapSlotRef).collect(Collectors.toList());\n+                    partitionExps.stream().map(Expr::unwrapSlotRef).collect(Collectors.toList());\n             if (partitionSlots.contains(null)) {\n                 return false;\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTczMzMxMA==", "url": "https://github.com/apache/incubator-doris/pull/4482#discussion_r479733310", "bodyText": "I think we move this check to createAggregationFragment 780 line is better?  Because createMergeAggregationFragment  should create a merge aggregate fragment.", "author": "kangkaisen", "createdAt": "2020-08-30T07:21:13Z", "path": "fe/fe-core/src/main/java/org/apache/doris/planner/DistributedPlanner.java", "diffHunk": "@@ -863,6 +863,14 @@ private PlanFragment createMergeAggregationFragment(AggregationNode node, PlanFr\n             //     childFragment.addPlanRoot(node);\n             //     return childFragment;\n             // }\n+\n+            PlanNode childPlan = childFragment.getPlanRoot();\n+            if (childPlan instanceof OlapScanNode &&\n+                    ((OlapScanNode)childPlan).getOlapTable().satisfyHashDistribution(partitionExprs)) {", "originalCommit": "123dc155e122404b2a72ea56ee11c391028c0b7f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8adbd1356cf112894c7021ec850b4adb3525ea9c", "chunk": "diff --git a/fe/fe-core/src/main/java/org/apache/doris/planner/DistributedPlanner.java b/fe/fe-core/src/main/java/org/apache/doris/planner/DistributedPlanner.java\nindex bb6c8323e..4eb9d709a 100644\n--- a/fe/fe-core/src/main/java/org/apache/doris/planner/DistributedPlanner.java\n+++ b/fe/fe-core/src/main/java/org/apache/doris/planner/DistributedPlanner.java\n\n@@ -863,14 +872,6 @@ public class DistributedPlanner {\n             //     childFragment.addPlanRoot(node);\n             //     return childFragment;\n             // }\n-\n-            PlanNode childPlan = childFragment.getPlanRoot();\n-            if (childPlan instanceof OlapScanNode &&\n-                    ((OlapScanNode)childPlan).getOlapTable().satisfyHashDistribution(partitionExprs)) {\n-                childFragment.addPlanRoot(node);\n-                return childFragment;\n-            }\n-\n             // the parent fragment is partitioned on the grouping exprs;\n             // substitute grouping exprs to reference the *output* of the agg, not the input\n             partitionExprs = Expr.substituteList(partitionExprs,\n"}}, {"oid": "8adbd1356cf112894c7021ec850b4adb3525ea9c", "url": "https://github.com/apache/incubator-doris/commit/8adbd1356cf112894c7021ec850b4adb3525ea9c", "message": "Code style optimize.", "committedDate": "2020-08-30T10:25:08Z", "type": "commit"}, {"oid": "8adbd1356cf112894c7021ec850b4adb3525ea9c", "url": "https://github.com/apache/incubator-doris/commit/8adbd1356cf112894c7021ec850b4adb3525ea9c", "message": "Code style optimize.", "committedDate": "2020-08-30T10:25:08Z", "type": "forcePushed"}]}