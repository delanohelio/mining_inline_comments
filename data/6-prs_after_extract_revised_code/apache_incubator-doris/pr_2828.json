{"pr_number": 2828, "pr_title": "[Temp Partition] Support add/drop/replace temp partitions", "pr_createdAt": "2020-02-04T01:56:11Z", "pr_url": "https://github.com/apache/incubator-doris/pull/2828", "timeline": [{"oid": "18c24dc35152aca6756db5910b19e49c1a1cb27a", "url": "https://github.com/apache/incubator-doris/commit/18c24dc35152aca6756db5910b19e49c1a1cb27a", "message": "add mising en doc", "committedDate": "2020-02-05T11:53:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTMzNjgyMw==", "url": "https://github.com/apache/incubator-doris/pull/2828#discussion_r375336823", "bodyText": "This check is strange. we could add a existTempPartition method to olapTable, and  add a isEmpty method to\nTempPartitions.", "author": "kangkaisen", "createdAt": "2020-02-05T15:45:50Z", "path": "fe/src/main/java/org/apache/doris/alter/MaterializedViewHandler.java", "diffHunk": "@@ -99,6 +99,11 @@ public MaterializedViewHandler() {\n      */\n     public void processCreateMaterializedView(CreateMaterializedViewStmt addMVClause, Database db, OlapTable olapTable)\n             throws DdlException, AnalysisException {\n+\n+        if (olapTable.hasTempPartition(null)) {", "originalCommit": "18c24dc35152aca6756db5910b19e49c1a1cb27a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f3d2d3b85afc5941f5843dceda29b154c5047c40", "chunk": "diff --git a/fe/src/main/java/org/apache/doris/alter/MaterializedViewHandler.java b/fe/src/main/java/org/apache/doris/alter/MaterializedViewHandler.java\nindex 457ca6cd6..ab8b4f08b 100644\n--- a/fe/src/main/java/org/apache/doris/alter/MaterializedViewHandler.java\n+++ b/fe/src/main/java/org/apache/doris/alter/MaterializedViewHandler.java\n\n@@ -100,7 +172,7 @@ public class MaterializedViewHandler extends AlterHandler {\n     public void processCreateMaterializedView(CreateMaterializedViewStmt addMVClause, Database db, OlapTable olapTable)\n             throws DdlException, AnalysisException {\n \n-        if (olapTable.hasTempPartition(null)) {\n+        if (olapTable.existTempPartitions()) {\n             throw new DdlException(\"Can not alter table when there are temp partitions in table\");\n         }\n \n"}}, {"oid": "7ffa15d68dad3c24d3ec1c41dd2ada462b4b9f31", "url": "https://github.com/apache/incubator-doris/commit/7ffa15d68dad3c24d3ec1c41dd2ada462b4b9f31", "message": "add mising en doc", "committedDate": "2020-02-18T08:24:44Z", "type": "forcePushed"}, {"oid": "0b1ee0533aaa5495977af90285e4bf2ad4143d5e", "url": "https://github.com/apache/incubator-doris/commit/0b1ee0533aaa5495977af90285e4bf2ad4143d5e", "message": "1", "committedDate": "2020-02-23T02:08:59Z", "type": "forcePushed"}, {"oid": "70cab8632cac531436c6bb45c68a04b9154b4d74", "url": "https://github.com/apache/incubator-doris/commit/70cab8632cac531436c6bb45c68a04b9154b4d74", "message": "3", "committedDate": "2020-02-27T07:08:58Z", "type": "forcePushed"}, {"oid": "f3d2d3b85afc5941f5843dceda29b154c5047c40", "url": "https://github.com/apache/incubator-doris/commit/f3d2d3b85afc5941f5843dceda29b154c5047c40", "message": "7", "committedDate": "2020-02-28T09:57:37Z", "type": "forcePushed"}, {"oid": "c6ada8916a5ae416297b130ab0debf2e8eb8dc74", "url": "https://github.com/apache/incubator-doris/commit/c6ada8916a5ae416297b130ab0debf2e8eb8dc74", "message": "Support add/drop/replace temp partition", "committedDate": "2020-02-28T14:28:47Z", "type": "commit"}, {"oid": "c6ada8916a5ae416297b130ab0debf2e8eb8dc74", "url": "https://github.com/apache/incubator-doris/commit/c6ada8916a5ae416297b130ab0debf2e8eb8dc74", "message": "Support add/drop/replace temp partition", "committedDate": "2020-02-28T14:28:47Z", "type": "forcePushed"}, {"oid": "611bfced15e77aca1b6ae4841f94d14b90529f58", "url": "https://github.com/apache/incubator-doris/commit/611bfced15e77aca1b6ae4841f94d14b90529f58", "message": "fix bug", "committedDate": "2020-02-28T15:15:08Z", "type": "commit"}, {"oid": "ce585b3a8c92e7bf24441aedf4591516fbecdf99", "url": "https://github.com/apache/incubator-doris/commit/ce585b3a8c92e7bf24441aedf4591516fbecdf99", "message": "remove en doc", "committedDate": "2020-02-28T15:18:30Z", "type": "commit"}, {"oid": "9483825f522b469d4544465fbfb251fe0df9bf3f", "url": "https://github.com/apache/incubator-doris/commit/9483825f522b469d4544465fbfb251fe0df9bf3f", "message": "fix typo", "committedDate": "2020-02-28T15:22:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAyODIxNw==", "url": "https://github.com/apache/incubator-doris/pull/2828#discussion_r386028217", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new DdlException(\"Can not alter table when there is temp partitions in table\");\n          \n          \n            \n                        throw new DdlException(\"Can not alter table when there are temp partitions in table\");", "author": "kangkaisen", "createdAt": "2020-02-29T13:25:00Z", "path": "fe/src/main/java/org/apache/doris/alter/MaterializedViewHandler.java", "diffHunk": "@@ -1019,6 +1024,11 @@ private void getOldAlterJobInfos(Database db, List<List<Comparable>> rollupJobIn\n     @Override\n     public void process(List<AlterClause> alterClauses, String clusterName, Database db, OlapTable olapTable)\n             throws DdlException, AnalysisException {\n+\n+        if (olapTable.existTempPartitions()) {\n+            throw new DdlException(\"Can not alter table when there is temp partitions in table\");", "originalCommit": "9483825f522b469d4544465fbfb251fe0df9bf3f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a74a67fcfcf2316bf954e0941adf56cb14b91907", "chunk": "diff --git a/fe/src/main/java/org/apache/doris/alter/MaterializedViewHandler.java b/fe/src/main/java/org/apache/doris/alter/MaterializedViewHandler.java\nindex ab8b4f08b..57e8e4249 100644\n--- a/fe/src/main/java/org/apache/doris/alter/MaterializedViewHandler.java\n+++ b/fe/src/main/java/org/apache/doris/alter/MaterializedViewHandler.java\n\n@@ -1026,7 +1026,7 @@ public class MaterializedViewHandler extends AlterHandler {\n             throws DdlException, AnalysisException {\n \n         if (olapTable.existTempPartitions()) {\n-            throw new DdlException(\"Can not alter table when there is temp partitions in table\");\n+            throw new DdlException(\"Can not alter table when there are temp partitions in table\");\n         }\n \n         Optional<AlterClause> alterClauseOptional = alterClauses.stream().findAny();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAyODgyMQ==", "url": "https://github.com/apache/incubator-doris/pull/2828#discussion_r386028821", "bodyText": "Split getPartition  method to getPartition and getTempPartition?", "author": "kangkaisen", "createdAt": "2020-02-29T13:35:48Z", "path": "fe/src/main/java/org/apache/doris/catalog/OlapTable.java", "diffHunk": "@@ -624,6 +632,14 @@ public Partition getPartition(String partitionName) {\n         return nameToPartition.get(partitionName);\n     }\n \n+    public Partition getPartition(String partitionName, boolean isTempPartition) {", "originalCommit": "9483825f522b469d4544465fbfb251fe0df9bf3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA2ODkyMw==", "url": "https://github.com/apache/incubator-doris/pull/2828#discussion_r386068923", "bodyText": "If split into 2 methods, we have to write if .. else .. every time we call getPartition(), which is not convenient.\nBut maybe I will change it when implementing loading into temp partition. It depends on how convenient it is to use in the loading process.", "author": "morningman", "createdAt": "2020-03-01T01:41:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAyODgyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA3NDU5Nw==", "url": "https://github.com/apache/incubator-doris/pull/2828#discussion_r386074597", "bodyText": "If split into 2 methods, we have to write if .. else .. every time we call getPartition(), which is not convenient.\n\nsplit to two methods is in order to avoid if .. else ...\n\nBut maybe I will change it when implementing loading into temp partition. It depends on how convenient it is to use in the loading process.\n\nOK", "author": "kangkaisen", "createdAt": "2020-03-01T03:57:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAyODgyMQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAyOTAwMg==", "url": "https://github.com/apache/incubator-doris/pull/2828#discussion_r386029002", "bodyText": "Split this method to checkNormalPartitionExist and checkTempPartitionExist, then, we don't need the long comment.", "author": "kangkaisen", "createdAt": "2020-02-29T13:39:35Z", "path": "fe/src/main/java/org/apache/doris/catalog/OlapTable.java", "diffHunk": "@@ -1241,4 +1264,141 @@ public void setIsInMemory(boolean isInMemory) {\n         tableProperty.modifyTableProperties(PropertyAnalyzer.PROPERTIES_INMEMORY, Boolean.valueOf(isInMemory).toString());\n         tableProperty.buildInMemory();\n     }\n+\n+    // return true if partition with given name already exist, both in partitions and temp partitions.\n+    // return false otherwise\n+    public boolean checkPartitionNameExist(String partitionName) {\n+        if (nameToPartition.containsKey(partitionName)) {\n+            return true;\n+        }\n+        return tempPartitions.hasPartition(partitionName);\n+    }\n+\n+    // if includeTempPartition is true, check if temp partition with given name exist,\n+    // if includeTempPartition is false, check if temp partition with given name exist.\n+    // return true if exist, otherwise, return false;\n+    public boolean checkPartitionNameExist(String partitionName, boolean isTempPartition) {", "originalCommit": "9483825f522b469d4544465fbfb251fe0df9bf3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA2OTA0Nw==", "url": "https://github.com/apache/incubator-doris/pull/2828#discussion_r386069047", "bodyText": "Same reason as getPartition.", "author": "morningman", "createdAt": "2020-03-01T01:44:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAyOTAwMg=="}], "type": "inlineReview", "revised_code": {"commit": "a74a67fcfcf2316bf954e0941adf56cb14b91907", "chunk": "diff --git a/fe/src/main/java/org/apache/doris/catalog/OlapTable.java b/fe/src/main/java/org/apache/doris/catalog/OlapTable.java\nindex 24b9df59e..3337ffd4b 100644\n--- a/fe/src/main/java/org/apache/doris/catalog/OlapTable.java\n+++ b/fe/src/main/java/org/apache/doris/catalog/OlapTable.java\n\n@@ -1275,7 +1275,7 @@ public class OlapTable extends Table {\n     }\n \n     // if includeTempPartition is true, check if temp partition with given name exist,\n-    // if includeTempPartition is false, check if temp partition with given name exist.\n+    // if includeTempPartition is false, check if normal partition with given name exist.\n     // return true if exist, otherwise, return false;\n     public boolean checkPartitionNameExist(String partitionName, boolean isTempPartition) {\n         if (isTempPartition) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAyOTM1NA==", "url": "https://github.com/apache/incubator-doris/pull/2828#discussion_r386029354", "bodyText": "return idToPartition.isEmpty(); ?", "author": "kangkaisen", "createdAt": "2020-02-29T13:46:13Z", "path": "fe/src/main/java/org/apache/doris/catalog/TempPartitions.java", "diffHunk": "@@ -0,0 +1,149 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.catalog;\n+\n+import org.apache.doris.catalog.MaterializedIndex.IndexExtState;\n+import org.apache.doris.common.io.Writable;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n+\n+import java.io.DataInput;\n+import java.io.DataOutput;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+// This class saved all temp partitions of a table.\n+// temp partition is used to implement the overwrite load.\n+// user can load data into some of the temp partitions,\n+// and then replace the formal partitions with these temp partitions\n+// to make a overwrite load.\n+public class TempPartitions implements Writable {\n+    private Map<Long, Partition> idToPartition = Maps.newHashMap();\n+    private Map<String, Partition> nameToPartition = Maps.newHashMap();\n+    private RangePartitionInfo partitionInfo;\n+\n+    public TempPartitions() {\n+    }\n+\n+    public TempPartitions(List<Column> partCols) {\n+        partitionInfo = new RangePartitionInfo(partCols);\n+    }\n+\n+    public RangePartitionInfo getPartitionInfo() {\n+        return partitionInfo;\n+    }\n+\n+    public void addPartition(Partition partition) {\n+        idToPartition.put(partition.getId(), partition);\n+        nameToPartition.put(partition.getName(), partition);\n+    }\n+\n+    /*\n+     * Drop temp partitions.\n+     * If needDropTablet is true, also drop the tablet from tablet inverted index.\n+     */\n+    public void dropPartition(String partitionName, boolean needDropTablet) {\n+        Partition partition = nameToPartition.get(partitionName);\n+        if (partition != null) {\n+            idToPartition.remove(partition.getId());\n+            nameToPartition.remove(partitionName);\n+\n+            Preconditions.checkState(partitionInfo.getType() == PartitionType.RANGE);\n+            RangePartitionInfo rangePartitionInfo = (RangePartitionInfo) partitionInfo;\n+            // drop partition info\n+            rangePartitionInfo.dropPartition(partition.getId());\n+\n+            if (!Catalog.isCheckpointThread() && needDropTablet) {\n+                TabletInvertedIndex invertedIndex = Catalog.getCurrentInvertedIndex();\n+                for (MaterializedIndex index : partition.getMaterializedIndices(IndexExtState.ALL)) {\n+                    for (Tablet tablet : index.getTablets()) {\n+                        invertedIndex.deleteTablet(tablet.getId());\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public Partition getPartition(long partitionId) {\n+        return idToPartition.get(partitionId);\n+    }\n+\n+    public Partition getPartition(String partitionName) {\n+        return nameToPartition.get(partitionName);\n+    }\n+\n+    public List<Partition> getAllPartitions() {\n+        return Lists.newArrayList(idToPartition.values());\n+    }\n+\n+    public boolean hasPartition(String partName) {\n+        if (partName == null) {\n+            return !idToPartition.isEmpty();", "originalCommit": "9483825f522b469d4544465fbfb251fe0df9bf3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA2OTE3MQ==", "url": "https://github.com/apache/incubator-doris/pull/2828#discussion_r386069171", "bodyText": "if (partName == null) is removed", "author": "morningman", "createdAt": "2020-03-01T01:47:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAyOTM1NA=="}], "type": "inlineReview", "revised_code": {"commit": "a74a67fcfcf2316bf954e0941adf56cb14b91907", "chunk": "diff --git a/fe/src/main/java/org/apache/doris/catalog/TempPartitions.java b/fe/src/main/java/org/apache/doris/catalog/TempPartitions.java\nindex 7d5e7c114..49948be4f 100644\n--- a/fe/src/main/java/org/apache/doris/catalog/TempPartitions.java\n+++ b/fe/src/main/java/org/apache/doris/catalog/TempPartitions.java\n\n@@ -95,11 +95,7 @@ public class TempPartitions implements Writable {\n     }\n \n     public boolean hasPartition(String partName) {\n-        if (partName == null) {\n-            return !idToPartition.isEmpty();\n-        } else {\n-            return nameToPartition.containsKey(partName);\n-        }\n+        return nameToPartition.containsKey(partName);\n     }\n \n     public boolean isEmpty() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAyOTQ5Nw==", "url": "https://github.com/apache/incubator-doris/pull/2828#discussion_r386029497", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String inMemory = properties.get(PROPERTIES_STRICT_RANGE);\n          \n          \n            \n                        String isStrictRange = properties.get(PROPERTIES_STRICT_RANGE);", "author": "kangkaisen", "createdAt": "2020-02-29T13:48:52Z", "path": "fe/src/main/java/org/apache/doris/common/util/PropertyAnalyzer.java", "diffHunk": "@@ -407,4 +410,22 @@ public static boolean analyzeInMemory(Map<String, String> properties, boolean de\n         }\n         return defaultInMemory;\n     }\n+\n+    public static boolean analyzeStrictRange(Map<String, String> properties, boolean defaultVal) {\n+        if (properties != null && properties.containsKey(PROPERTIES_STRICT_RANGE)) {\n+            String inMemory = properties.get(PROPERTIES_STRICT_RANGE);", "originalCommit": "9483825f522b469d4544465fbfb251fe0df9bf3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA2OTI1Mg==", "url": "https://github.com/apache/incubator-doris/pull/2828#discussion_r386069252", "bodyText": "I will merge analyze of inMemory, strictRange, useTempPartitionName into one common method analyzeBooleanProp. Because they looks just same.", "author": "morningman", "createdAt": "2020-03-01T01:50:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAyOTQ5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA3NDQ2Ng==", "url": "https://github.com/apache/incubator-doris/pull/2828#discussion_r386074466", "bodyText": "OK", "author": "kangkaisen", "createdAt": "2020-03-01T03:54:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAyOTQ5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "a74a67fcfcf2316bf954e0941adf56cb14b91907", "chunk": "diff --git a/fe/src/main/java/org/apache/doris/common/util/PropertyAnalyzer.java b/fe/src/main/java/org/apache/doris/common/util/PropertyAnalyzer.java\nindex 3edb80e83..34309abfc 100644\n--- a/fe/src/main/java/org/apache/doris/common/util/PropertyAnalyzer.java\n+++ b/fe/src/main/java/org/apache/doris/common/util/PropertyAnalyzer.java\n\n@@ -402,29 +402,12 @@ public class PropertyAnalyzer {\n         }\n     }\n \n-    public static boolean analyzeInMemory(Map<String, String> properties, boolean defaultInMemory) {\n-        if (properties != null && properties.containsKey(PROPERTIES_INMEMORY)) {\n-            String inMemory = properties.get(PROPERTIES_INMEMORY);\n-            properties.remove(PROPERTIES_INMEMORY);\n-            return Boolean.parseBoolean(inMemory);\n-        }\n-        return defaultInMemory;\n-    }\n-\n-    public static boolean analyzeStrictRange(Map<String, String> properties, boolean defaultVal) {\n-        if (properties != null && properties.containsKey(PROPERTIES_STRICT_RANGE)) {\n-            String inMemory = properties.get(PROPERTIES_STRICT_RANGE);\n-            properties.remove(PROPERTIES_STRICT_RANGE);\n-            return Boolean.parseBoolean(inMemory);\n-        }\n-        return defaultVal;\n-    }\n-\n-    public static boolean analyzeUseTempPartitionName(Map<String, String> properties, boolean defaultVal) {\n-        if (properties != null && properties.containsKey(PROPERTIES_USE_TEMP_PARTITION_NAME)) {\n-            String inMemory = properties.get(PROPERTIES_USE_TEMP_PARTITION_NAME);\n-            properties.remove(PROPERTIES_USE_TEMP_PARTITION_NAME);\n-            return Boolean.parseBoolean(inMemory);\n+    // analyze common boolean properties, such as \"in_memory\" = \"false\"\n+    public static boolean analyzeBooleanProp(Map<String, String> properties, String propKey, boolean defaultVal) {\n+        if (properties != null && properties.containsKey(propKey)) {\n+            String val = properties.get(propKey);\n+            properties.remove(propKey);\n+            return Boolean.parseBoolean(val);\n         }\n         return defaultVal;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAyOTUyMg==", "url": "https://github.com/apache/incubator-doris/pull/2828#discussion_r386029522", "bodyText": "idem", "author": "kangkaisen", "createdAt": "2020-02-29T13:49:35Z", "path": "fe/src/main/java/org/apache/doris/common/util/PropertyAnalyzer.java", "diffHunk": "@@ -407,4 +410,22 @@ public static boolean analyzeInMemory(Map<String, String> properties, boolean de\n         }\n         return defaultInMemory;\n     }\n+\n+    public static boolean analyzeStrictRange(Map<String, String> properties, boolean defaultVal) {\n+        if (properties != null && properties.containsKey(PROPERTIES_STRICT_RANGE)) {\n+            String inMemory = properties.get(PROPERTIES_STRICT_RANGE);\n+            properties.remove(PROPERTIES_STRICT_RANGE);\n+            return Boolean.parseBoolean(inMemory);\n+        }\n+        return defaultVal;\n+    }\n+\n+    public static boolean analyzeUseTempPartitionName(Map<String, String> properties, boolean defaultVal) {\n+        if (properties != null && properties.containsKey(PROPERTIES_USE_TEMP_PARTITION_NAME)) {\n+            String inMemory = properties.get(PROPERTIES_USE_TEMP_PARTITION_NAME);", "originalCommit": "9483825f522b469d4544465fbfb251fe0df9bf3f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a74a67fcfcf2316bf954e0941adf56cb14b91907", "chunk": "diff --git a/fe/src/main/java/org/apache/doris/common/util/PropertyAnalyzer.java b/fe/src/main/java/org/apache/doris/common/util/PropertyAnalyzer.java\nindex 3edb80e83..34309abfc 100644\n--- a/fe/src/main/java/org/apache/doris/common/util/PropertyAnalyzer.java\n+++ b/fe/src/main/java/org/apache/doris/common/util/PropertyAnalyzer.java\n\n@@ -402,29 +402,12 @@ public class PropertyAnalyzer {\n         }\n     }\n \n-    public static boolean analyzeInMemory(Map<String, String> properties, boolean defaultInMemory) {\n-        if (properties != null && properties.containsKey(PROPERTIES_INMEMORY)) {\n-            String inMemory = properties.get(PROPERTIES_INMEMORY);\n-            properties.remove(PROPERTIES_INMEMORY);\n-            return Boolean.parseBoolean(inMemory);\n-        }\n-        return defaultInMemory;\n-    }\n-\n-    public static boolean analyzeStrictRange(Map<String, String> properties, boolean defaultVal) {\n-        if (properties != null && properties.containsKey(PROPERTIES_STRICT_RANGE)) {\n-            String inMemory = properties.get(PROPERTIES_STRICT_RANGE);\n-            properties.remove(PROPERTIES_STRICT_RANGE);\n-            return Boolean.parseBoolean(inMemory);\n-        }\n-        return defaultVal;\n-    }\n-\n-    public static boolean analyzeUseTempPartitionName(Map<String, String> properties, boolean defaultVal) {\n-        if (properties != null && properties.containsKey(PROPERTIES_USE_TEMP_PARTITION_NAME)) {\n-            String inMemory = properties.get(PROPERTIES_USE_TEMP_PARTITION_NAME);\n-            properties.remove(PROPERTIES_USE_TEMP_PARTITION_NAME);\n-            return Boolean.parseBoolean(inMemory);\n+    // analyze common boolean properties, such as \"in_memory\" = \"false\"\n+    public static boolean analyzeBooleanProp(Map<String, String> properties, String propKey, boolean defaultVal) {\n+        if (properties != null && properties.containsKey(propKey)) {\n+            String val = properties.get(propKey);\n+            properties.remove(propKey);\n+            return Boolean.parseBoolean(val);\n         }\n         return defaultVal;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAyOTY4OQ==", "url": "https://github.com/apache/incubator-doris/pull/2828#discussion_r386029689", "bodyText": "Return bool instead of void. I think we shouldn't throw DdlException for util class.", "author": "kangkaisen", "createdAt": "2020-02-29T13:52:59Z", "path": "fe/src/main/java/org/apache/doris/common/util/RangeUtils.java", "diffHunk": "@@ -0,0 +1,210 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.common.util;\n+\n+import org.apache.doris.catalog.PartitionKey;\n+import org.apache.doris.common.DdlException;\n+\n+import com.google.common.collect.BoundType;\n+import com.google.common.collect.Range;\n+import com.google.common.collect.RangeMap;\n+import com.google.common.collect.TreeRangeMap;\n+\n+import java.io.DataInput;\n+import java.io.DataOutput;\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class RangeUtils {\n+    \n+    public static final Comparator<Map.Entry<Long, Range<PartitionKey>>> RANGE_MAP_ENTRY_COMPARATOR =\n+            Comparator.comparing(o -> o.getValue().lowerEndpoint());\n+\n+    public static final Comparator<Range<PartitionKey>> RANGE_COMPARATOR = \n+            Comparator.comparing(o -> o.lowerEndpoint());\n+\n+    public static void checkRangeIntersect(Range<PartitionKey> range1, Range<PartitionKey> range2) throws DdlException {\n+        if (range2.isConnected(range1)) {\n+            if (!range2.intersection(range1).isEmpty()) {\n+                throw new DdlException(\"Range \" + range1 + \" is intersected with range: \" + range2);\n+            }\n+        }\n+    }\n+\n+    /*\n+     * Pass only if the 2 range lists are exactly same\n+     * What is \"exactly same\"?\n+     *      1. {[0, 10), [10, 20)} exactly same as {[0, 20)}\n+     *      2. {[0, 10), [15, 20)} exactly same as {[0, 10), [15, 18), [18, 20)}\n+     *      3. {[0, 10), [15, 20)} exactly same as {[0, 10), [15, 20)}\n+     *      4. {[0, 10), [15, 20)} NOT exactly same as {[0, 20)}\n+     *      \n+     *  Here I will use an example to explain the algorithm:\n+     *      list1: {[0, 10), [15, 20)}\n+     *      list2: {[0, 10), [15, 18), [18, 20)}\n+     *  \n+     *  1. sort 2 lists first (the above 2 lists are already sorted)\n+     *  2. Begin to compare ranges from index 0: [0, 10) and [0, 10)\n+     *      2.1 lower bounds (0 and 0) are equal.\n+     *      2.2 upper bounds (10 and 10) are equal. \n+     *  3. Begin to compare next 2 ranges [15, 20) and [15, 18)\n+     *      3.1 lower bounds (15 and 15) are equal.\n+     *      3.2 upper bounds (20 and 18) are not equal. and 20 > 18\n+     *      3.3 Split range [15, 20) to [15, 18) and [18, 20)\n+     *  4. Begin to compare next 2 ranges [18, 20) and [18, 20), the first [18, 20) is the splitted range\n+     *      4.1 lower bounds (18 and 18) are equal.\n+     *      4.2 upper bounds (20 and 20) are equal.\n+     *  5. Not more next ranges, so 2 lists are equal.\n+     */\n+    public static void checkRangeListsMatch(List<Range<PartitionKey>> list1, List<Range<PartitionKey>> list2) throws DdlException {", "originalCommit": "9483825f522b469d4544465fbfb251fe0df9bf3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA2OTU2Nw==", "url": "https://github.com/apache/incubator-doris/pull/2828#discussion_r386069567", "bodyText": "An exception can bring some detail error msgs.", "author": "morningman", "createdAt": "2020-03-01T01:57:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAyOTY4OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAyOTk1Mg==", "url": "https://github.com/apache/incubator-doris/pull/2828#discussion_r386029952", "bodyText": "As comment above, I think we should split getPartition method, otherwise\uff0cthis logic is strange.", "author": "kangkaisen", "createdAt": "2020-02-29T13:58:05Z", "path": "fe/src/main/java/org/apache/doris/qe/ShowExecutor.java", "diffHunk": "@@ -1215,12 +1215,17 @@ private void handleShowTablet() throws AnalysisException {\n                 }\n                 boolean stop = false;\n                 Collection<Partition> partitions = new ArrayList<Partition>();\n-                List<String> partitionNames = showStmt.getPartitionNames();\n                 if (showStmt.hasPartition()) {\n-                    for (Partition partition : olapTable.getPartitions()) {\n-                        if (partitionNames.contains(partition.getName())) {\n-                            partitions.add(partition);\n+                    List<String> partitionNames = showStmt.getPartitionNames();\n+                    for (String partName : partitionNames) {\n+                        Partition partition = olapTable.getPartition(partName);\n+                        if (partition == null) {", "originalCommit": "9483825f522b469d4544465fbfb251fe0df9bf3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA2OTYyNQ==", "url": "https://github.com/apache/incubator-doris/pull/2828#discussion_r386069625", "bodyText": "I will reconsider this when implementing loading process of temp partition.\nIf I change the origin getPartition method, it may change lots of codes in this PR.", "author": "morningman", "createdAt": "2020-03-01T01:59:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAyOTk1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA3NDYxNw==", "url": "https://github.com/apache/incubator-doris/pull/2828#discussion_r386074617", "bodyText": "OK", "author": "kangkaisen", "createdAt": "2020-03-01T03:57:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAyOTk1Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAzMDA1Mg==", "url": "https://github.com/apache/incubator-doris/pull/2828#discussion_r386030052", "bodyText": "Add a UT?", "author": "kangkaisen", "createdAt": "2020-02-29T14:00:30Z", "path": "fe/src/main/java/org/apache/doris/common/util/RangeUtils.java", "diffHunk": "@@ -0,0 +1,210 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.common.util;\n+\n+import org.apache.doris.catalog.PartitionKey;\n+import org.apache.doris.common.DdlException;\n+\n+import com.google.common.collect.BoundType;\n+import com.google.common.collect.Range;\n+import com.google.common.collect.RangeMap;\n+import com.google.common.collect.TreeRangeMap;\n+\n+import java.io.DataInput;\n+import java.io.DataOutput;\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class RangeUtils {", "originalCommit": "9483825f522b469d4544465fbfb251fe0df9bf3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA2OTY2MA==", "url": "https://github.com/apache/incubator-doris/pull/2828#discussion_r386069660", "bodyText": "Actually, this utils has been test in TempPartitionsTest, both in testForStrictRangeCheck() and testForMultiPartitionTable().", "author": "morningman", "createdAt": "2020-03-01T02:00:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAzMDA1Mg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "01265954186651365ccd36ffaa6c41495d6698ec", "url": "https://github.com/apache/incubator-doris/commit/01265954186651365ccd36ffaa6c41495d6698ec", "message": "Update docs/documentation/cn/administrator-guide/alter-table/alter-table-temp-partition.md\n\nCo-Authored-By: kangkaisen  <kangkaisen@apache.org>", "committedDate": "2020-03-01T01:36:08Z", "type": "commit"}, {"oid": "a74a67fcfcf2316bf954e0941adf56cb14b91907", "url": "https://github.com/apache/incubator-doris/commit/a74a67fcfcf2316bf954e0941adf56cb14b91907", "message": "fix by review", "committedDate": "2020-03-01T02:01:11Z", "type": "commit"}]}