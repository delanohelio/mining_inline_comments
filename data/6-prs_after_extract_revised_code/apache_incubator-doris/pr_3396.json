{"pr_number": 3396, "pr_title": "(#3395)calculate 'case when expr' when possible", "pr_createdAt": "2020-04-25T07:30:02Z", "pr_url": "https://github.com/apache/incubator-doris/pull/3396", "timeline": [{"oid": "8190a6c69817d192573e0a857e403ed737ee39da", "url": "https://github.com/apache/incubator-doris/commit/8190a6c69817d192573e0a857e403ed737ee39da", "message": "(#3395)calculate 'case when expr' when possible", "committedDate": "2020-04-25T07:27:47Z", "type": "commit"}, {"oid": "595b5d46980b6d9a522d68f7c599f8a7ec181aa5", "url": "https://github.com/apache/incubator-doris/commit/595b5d46980b6d9a522d68f7c599f8a7ec181aa5", "message": "add ut", "committedDate": "2020-04-25T13:58:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc5MjU4NQ==", "url": "https://github.com/apache/incubator-doris/pull/3396#discussion_r415792585", "bodyText": "This is not right, the CaseExpr has multi child\n\noptional case expr\noptional list<when expr, then expr>\noptional else expr.\n\nThe following SQL will return wrong result after applying your rewrite rule:\nselect case when false then 2 when true then 3 else 0 end;\n\nExpect: 3, return 1.", "author": "morningman", "createdAt": "2020-04-27T13:02:09Z", "path": "fe/src/main/java/org/apache/doris/rewrite/FoldConstantsRule.java", "diffHunk": "@@ -48,6 +50,12 @@\n \n     @Override\n     public Expr apply(Expr expr, Analyzer analyzer) throws AnalysisException {\n+        // evaluate case when expr\n+        if (expr instanceof CaseExpr && expr.getChild(0) instanceof BoolLiteral) {", "originalCommit": "595b5d46980b6d9a522d68f7c599f8a7ec181aa5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "507bd161dbb30944a9fd3069b6e001e58c7274a3", "chunk": "diff --git a/fe/src/main/java/org/apache/doris/rewrite/FoldConstantsRule.java b/fe/src/main/java/org/apache/doris/rewrite/FoldConstantsRule.java\nindex 29b6ad65e..f69715040 100644\n--- a/fe/src/main/java/org/apache/doris/rewrite/FoldConstantsRule.java\n+++ b/fe/src/main/java/org/apache/doris/rewrite/FoldConstantsRule.java\n\n@@ -50,10 +49,9 @@ public class FoldConstantsRule implements ExprRewriteRule {\n \n     @Override\n     public Expr apply(Expr expr, Analyzer analyzer) throws AnalysisException {\n-        // evaluate case when expr\n-        if (expr instanceof CaseExpr && expr.getChild(0) instanceof BoolLiteral) {\n-            BoolLiteral boolLiteral = (BoolLiteral) expr.getChild(0);\n-            return boolLiteral.getValue() ? expr.getChild(1) : expr.getChild(2);\n+        // evaluate `case when expr` when possible\n+        if (expr instanceof CaseExpr) {\n+            return CaseExpr.computeCaseExpr((CaseExpr) expr);\n         }\n \n         // Avoid calling Expr.isConstant() because that would lead to repeated traversals\n"}}, {"oid": "507bd161dbb30944a9fd3069b6e001e58c7274a3", "url": "https://github.com/apache/incubator-doris/commit/507bd161dbb30944a9fd3069b6e001e58c7274a3", "message": "1 support case when and case xxx when\n2 add ut", "committedDate": "2020-04-29T05:24:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQwMjI0Mw==", "url": "https://github.com/apache/incubator-doris/pull/3396#discussion_r417402243", "bodyText": "you could use org.apache.commons.lang3.StringUtils.containsIgnoreCase", "author": "kangkaisen", "createdAt": "2020-04-29T15:23:31Z", "path": "fe/src/test/java/org/apache/doris/planner/QueryPlanTest.java", "diffHunk": "@@ -504,4 +504,106 @@ public void testDateTypeEquality() throws Exception {\n         Catalog.getCurrentCatalog().getLoadManager().createLoadJobV1FromStmt(loadStmt, EtlJobType.HADOOP,\n                 System.currentTimeMillis());\n     }\n+\n+    private SelectStmt getAnalyzedAndRewritedStmt(String sql) throws Exception {\n+        SelectStmt selectStmt =\n+                (SelectStmt) UtFrameUtils.parseAndAnalyzeStmt(sql, connectContext);\n+        selectStmt = (SelectStmt) UtFrameUtils.rewriteStmt(selectStmt, connectContext);\n+        selectStmt = (SelectStmt) UtFrameUtils.reAnalyze(selectStmt, connectContext);\n+        return selectStmt;\n+    }\n+\n+    @Test\n+    public void testConvertCaseWhenToConstant() throws Exception {\n+        // basic test\n+        String caseWhenSql = \"select \"\n+                + \"case when date_format(now(),'%H%i')  < 123 then 1 else 0 end as col \"\n+                + \"from test.test1 \"\n+                + \"where time = case when date_format(now(),'%H%i')  < 123 then date_format(date_sub(now(),2),'%Y%m%d') else date_format(date_sub(now(),1),'%Y%m%d') end\";\n+        SelectStmt selectStmt = getAnalyzedAndRewritedStmt(caseWhenSql);\n+        Assert.assertTrue(!selectStmt.toSql().contains(\"CASE WHEN\") && !selectStmt.toSql().contains(\"case when\"));", "originalCommit": "507bd161dbb30944a9fd3069b6e001e58c7274a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxNzA2Nw==", "url": "https://github.com/apache/incubator-doris/pull/3396#discussion_r417717067", "bodyText": "\ud83d\udc4c", "author": "wangbo", "createdAt": "2020-04-30T02:16:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQwMjI0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "cd9bedd5801e10b039cddcaaa241900750764777", "chunk": "diff --git a/fe/src/test/java/org/apache/doris/planner/QueryPlanTest.java b/fe/src/test/java/org/apache/doris/planner/QueryPlanTest.java\nindex c6f62cd2e..cd767f563 100644\n--- a/fe/src/test/java/org/apache/doris/planner/QueryPlanTest.java\n+++ b/fe/src/test/java/org/apache/doris/planner/QueryPlanTest.java\n\n@@ -521,89 +522,116 @@ public class QueryPlanTest {\n                 + \"from test.test1 \"\n                 + \"where time = case when date_format(now(),'%H%i')  < 123 then date_format(date_sub(now(),2),'%Y%m%d') else date_format(date_sub(now(),1),'%Y%m%d') end\";\n         SelectStmt selectStmt = getAnalyzedAndRewritedStmt(caseWhenSql);\n-        Assert.assertTrue(!selectStmt.toSql().contains(\"CASE WHEN\") && !selectStmt.toSql().contains(\"case when\"));\n+        Assert.assertTrue(!StringUtils.containsIgnoreCase(selectStmt.toSql(),\"CASE WHEN\") && !StringUtils.containsIgnoreCase(selectStmt.toSql(), \"case when\"));\n \n         // test 1: case when then\n         // 1.1 multi when in on `case when` and can be converted to constants\n         String sql11 = \"select case when false then 2 when true then 3 else 0 end as col11;\";\n         SelectStmt sql11Stmt = getAnalyzedAndRewritedStmt(sql11);\n-        Assert.assertTrue(sql11Stmt.toSql().equals(\"SELECT 3 AS `col11`\"));\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sql11Stmt.toSql(), \"SELECT 3 AS `col11`\"));\n \n-        // 1.2 multi when in on `case when` ,when expr can not be converted to constants\n+        // 1.2 multi `when expr` in on `case when` ,`when expr` can not be converted to constants\n         String sql121 = \"select case when false then 2 when substr(k7,2,1) then 3 else 0 end as col121 from test.baseall\";\n         SelectStmt sqlStmt121 = getAnalyzedAndRewritedStmt(sql121);\n-        Assert.assertTrue(sqlStmt121.toSql().equals(\"SELECT CASE WHEN substr(`k7`, 2, 1) THEN 3 ELSE 0 END AS `col121` FROM `default_cluster:test`.`baseall`\"));\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sqlStmt121.toSql(),\"SELECT CASE WHEN substr(`k7`, 2, 1) THEN 3 ELSE 0 END AS `col121` FROM `default_cluster:test`.`baseall`\"));\n \n         // 1.2.2 when expr which can not be converted to constants in the first\n         String sql122 = \"select case when substr(k7,2,1) then 2 when false then 3 else 0 end as col122 from test.baseall\";\n         SelectStmt sqlStmt122 = getAnalyzedAndRewritedStmt(sql122);\n-        Assert.assertTrue(sqlStmt122.toSql().equals(\"SELECT CASE WHEN substr(`k7`, 2, 1) THEN 2 WHEN FALSE THEN 3 ELSE 0 END AS `col122` FROM `default_cluster:test`.`baseall`\"));\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sqlStmt122.toSql(), \"SELECT CASE WHEN substr(`k7`, 2, 1) THEN 2 WHEN FALSE THEN 3 ELSE 0 END AS `col122` FROM `default_cluster:test`.`baseall`\"));\n \n         // 1.2.3 when expr which can not be converted to constants in the middle\n         String sql123 = \"select case when false then 2 when substr(k7,2,1) then 3 else 0 end as col123 from test.baseall\";\n         SelectStmt sqlStmt123 = getAnalyzedAndRewritedStmt(sql123);\n-        Assert.assertTrue(sqlStmt123.toSql().equals(\"SELECT CASE WHEN substr(`k7`, 2, 1) THEN 3 ELSE 0 END AS `col123` FROM `default_cluster:test`.`baseall`\"));\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sqlStmt123.toSql(), \"SELECT CASE WHEN substr(`k7`, 2, 1) THEN 3 ELSE 0 END AS `col123` FROM `default_cluster:test`.`baseall`\"));\n+\n+        // 1.2.4 test return `then expr` in the middle\n+        String sql124 = \"select case when false then 1 when true then 2 when false then 3 else 'other' end as col124\";\n+        SelectStmt sql124Stmt = getAnalyzedAndRewritedStmt(sql124);\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sql124Stmt.toSql(), \"SELECT '2' AS `col124`\"));\n \n         // 1.3 test return null\n         String sql3 = \"select case when false then 2 end as col3\";\n         SelectStmt sql3Stmt = getAnalyzedAndRewritedStmt(sql3);\n-        Assert.assertTrue(sql3Stmt.toSql().equals(\"SELECT NULL AS `col3`\"));\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sql3Stmt.toSql(), \"SELECT NULL AS `col3`\"));\n \n         // 1.3.1 test return else expr\n         String sql131 = \"select case when false then 2 when false then 3 else 4 end as col131\";\n         SelectStmt sql131Stmt = getAnalyzedAndRewritedStmt(sql131);\n-        Assert.assertTrue(sql131Stmt.toSql().equals(\"SELECT 4 AS `col131`\"));\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sql131Stmt.toSql(), \"SELECT 4 AS `col131`\"));\n \n         // 1.4 nest `case when` and can be converted to constants\n         String sql14 = \"select case when (case when true then true else false end) then 2 when false then 3 else 0 end as col\";\n         SelectStmt sql14Stmt = getAnalyzedAndRewritedStmt(sql14);\n-        Assert.assertTrue(sql14Stmt.toSql().equals(\"SELECT 2 AS `col`\"));\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sql14Stmt.toSql(), \"SELECT 2 AS `col`\"));\n \n         // 1.5 nest `case when` and can not be converted to constants\n         String sql15 = \"select case when case when substr(k7,2,1) then true else false end then 2 when false then 3 else 0 end as col from test.baseall\";\n         SelectStmt sql15Stmt = getAnalyzedAndRewritedStmt(sql15);\n-        Assert.assertTrue(sql15Stmt.toSql().equals(\"SELECT CASE WHEN CASE WHEN substr(`k7`, 2, 1) THEN TRUE ELSE FALSE END THEN 2 WHEN FALSE THEN 3 ELSE 0 END AS `col` FROM `default_cluster:test`.`baseall`\"));\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sql15Stmt.toSql(), \"SELECT CASE WHEN CASE WHEN substr(`k7`, 2, 1) THEN TRUE ELSE FALSE END THEN 2 WHEN FALSE THEN 3 ELSE 0 END AS `col` FROM `default_cluster:test`.`baseall`\"));\n+\n+        // 1.6 test when expr is null\n+        String sql16 = \"select case when null then 1 else 2 end as col16;\";\n+        SelectStmt sql16Stmt = getAnalyzedAndRewritedStmt(sql16);\n+        System.out.println(sql16Stmt.toSql());\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sql16Stmt.toSql(), \"select 2 AS `col16`\"));\n \n         // test 2: case xxx when then\n         // 2.1 test equal\n         String sql2 = \"select case 1 when 1 then 'a' when 2 then 'b' else 'other' end as col2;\";\n         SelectStmt sql2Stmt = getAnalyzedAndRewritedStmt(sql2);\n-        Assert.assertTrue(sql2Stmt.toSql().equals(\"SELECT 'a' AS `col2`\"));\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sql2Stmt.toSql(), (\"SELECT 'a' AS `col2`\")));\n \n         // 2.1.2 test not equal\n         String sql212 = \"select case 'a' when 1 then 'a' when 'a' then 'b' else 'other' end as col212;\";\n         SelectStmt sql212Stmt = getAnalyzedAndRewritedStmt(sql212);\n-        Assert.assertTrue(sql212Stmt.toSql().equals(\"SELECT 'other' AS `col212`\"));\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sql212Stmt.toSql(), \"SELECT 'b' AS `col212`\"));\n \n         // 2.2 test return null\n         String sql22 = \"select case 'a' when 1 then 'a' when 'b' then 'b' end as col22;\";\n         SelectStmt sql22Stmt = getAnalyzedAndRewritedStmt(sql22);\n-        Assert.assertTrue(sql22Stmt.toSql().equals(\"SELECT NULL AS `col22`\"));\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sql22Stmt.toSql(), \"SELECT NULL AS `col22`\"));\n \n         // 2.2.2 test return else\n         String sql222 = \"select case 1 when 2 then 'a' when 3 then 'b' else 'other' end as col222;\";\n         SelectStmt sql222Stmt = getAnalyzedAndRewritedStmt(sql222);\n-        Assert.assertTrue(sql222Stmt.toSql().equals(\"SELECT 'other' AS `col222`\"));\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sql222Stmt.toSql(), \"SELECT 'other' AS `col222`\"));\n \n         // 2.3 test can not convert to constant,middle when expr is not constant\n-        String sql23 = \"select case 'a' when 1 then 'a' when substr(k7,2,1) then 2 when false then 3 else 0 end as col23 from test.baseall\";\n+        String sql23 = \"select case 'a' when 'b' then 'a' when substr(k7,2,1) then 2 when false then 3 else 0 end as col23 from test.baseall\";\n         SelectStmt sql23Stmt = getAnalyzedAndRewritedStmt(sql23);\n-        Assert.assertTrue(sql23Stmt.toSql().equals(\"SELECT CASE'a' WHEN substr(`k7`, 2, 1) THEN '2' WHEN '0' THEN '3' ELSE '0' END AS `col23` FROM `default_cluster:test`.`baseall`\"));\n+        // here 1 is casted to string ,so 1 is evaluated\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sql23Stmt.toSql(), \"SELECT CASE'a' WHEN substr(`k7`, 2, 1) THEN '2' WHEN '0' THEN '3' ELSE '0' END AS `col23` FROM `default_cluster:test`.`baseall`\"));\n \n         // 2.3.1  first when expr is not constant\n         String sql231 = \"select case 'a' when substr(k7,2,1) then 2 when 1 then 'a' when false then 3 else 0 end as col231 from test.baseall\";\n         SelectStmt sql231Stmt = getAnalyzedAndRewritedStmt(sql231);\n-        Assert.assertTrue(sql231Stmt.toSql().equals(\"SELECT CASE'a' WHEN substr(`k7`, 2, 1) THEN '2' WHEN '1' THEN 'a' WHEN '0' THEN '3' ELSE '0' END AS `col231` FROM `default_cluster:test`.`baseall`\"));\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sql231Stmt.toSql(), \"SELECT CASE'a' WHEN substr(`k7`, 2, 1) THEN '2' WHEN '1' THEN 'a' WHEN '0' THEN '3' ELSE '0' END AS `col231` FROM `default_cluster:test`.`baseall`\"));\n \n         // 2.3.2 case expr is not constant\n         String sql232 = \"select case k1 when substr(k7,2,1) then 2 when 1 then 'a' when false then 3 else 0 end as col232 from test.baseall\";\n         SelectStmt sql232Stmt = getAnalyzedAndRewritedStmt(sql232);\n-        Assert.assertTrue(sql232Stmt.toSql().equals(\"SELECT CASE`k1` WHEN substr(`k7`, 2, 1) THEN '2' WHEN '1' THEN 'a' WHEN '0' THEN '3' ELSE '0' END AS `col232` FROM `default_cluster:test`.`baseall`\"));\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sql232Stmt.toSql(), \"SELECT CASE`k1` WHEN substr(`k7`, 2, 1) THEN '2' WHEN '1' THEN 'a' WHEN '0' THEN '3' ELSE '0' END AS `col232` FROM `default_cluster:test`.`baseall`\"));\n \n         // 3.1 test float,float in case expr\n         String sql31 = \"select case cast(100 as float) when 1 then 'a' when 2 then 'b' else 'other' end as col31;\";\n         SelectStmt sql31Stmt = getAnalyzedAndRewritedStmt(sql31);\n-        Assert.assertTrue(sql31Stmt.toSql().equals(\"SELECT CASE100.0 WHEN 1.0 THEN 'a' WHEN 2.0 THEN 'b' ELSE 'other' END AS `col31`\"));\n-\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sql31Stmt.toSql(), \"SELECT CASE100.0 WHEN 1.0 THEN 'a' WHEN 2.0 THEN 'b' ELSE 'other' END AS `col31`\"));\n+\n+        // 4.1 test null in case expr return else\n+        String sql41 = \"select case null when 1 then 'a' when 2 then 'b' else 'other' end as col41\";\n+        SelectStmt sql41Stmt = getAnalyzedAndRewritedStmt(sql41);\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sql41Stmt.toSql(), \"SELECT 'other' AS `col41`\"));\n+\n+        // 4.1.2 test null in case expr return null\n+        String sql412 = \"select case null when 1 then 'a' when 2 then 'b' end as col41\";\n+        SelectStmt sql412Stmt = getAnalyzedAndRewritedStmt(sql412);\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sql412Stmt.toSql(), \"SELECT NULL AS `col41`\"));\n+\n+        // 4.2.1 test null in when expr\n+        String sql421 = \"select case 'a' when null then 'a' else 'other' end as col421\";\n+        SelectStmt sql421Stmt = getAnalyzedAndRewritedStmt(sql421);\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sql421Stmt.toSql(), \"SELECT 'other' as `col421`\"));\n     }\n+\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQwNDU4MA==", "url": "https://github.com/apache/incubator-doris/pull/3396#discussion_r417404580", "bodyText": "Don't need to add this method. you could use getSQLPlanOrErrorMsg method.", "author": "kangkaisen", "createdAt": "2020-04-29T15:26:36Z", "path": "fe/src/test/java/org/apache/doris/planner/QueryPlanTest.java", "diffHunk": "@@ -504,4 +504,106 @@ public void testDateTypeEquality() throws Exception {\n         Catalog.getCurrentCatalog().getLoadManager().createLoadJobV1FromStmt(loadStmt, EtlJobType.HADOOP,\n                 System.currentTimeMillis());\n     }\n+\n+    private SelectStmt getAnalyzedAndRewritedStmt(String sql) throws Exception {", "originalCommit": "507bd161dbb30944a9fd3069b6e001e58c7274a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc0MTM5NQ==", "url": "https://github.com/apache/incubator-doris/pull/3396#discussion_r417741395", "bodyText": "getSQLPlanOrErrorMsg   is unable to meet demand.What we want is to check whether the plan changes as our wish,so we need a  tools not only retwrite the plan but alse contains the customized check logic.It's obviously that plain sql is directly,but not a common general method,because the print format may change.\nMaybe list a todo here?\nAnyway,I think the result of getSQLPlanOrErrorMsg   can't meet demand", "author": "wangbo", "createdAt": "2020-04-30T04:05:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQwNDU4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ5NTg4OQ==", "url": "https://github.com/apache/incubator-doris/pull/3396#discussion_r418495889", "bodyText": "I don't think so.\nDirectly check final FE sql plan is more accurate:\n\nFE send BE is the sql plan\nYour work do indeed is changing partial plan to constant.\n\n\nWhat we want is to check whether the plan changes as our wish\n\nSo you should use getSQLPlanOrErrorMsg \n\nI think the result of getSQLPlanOrErrorMsg can't meet demand\n\nWhy couldn't meet you demand? I think which could.", "author": "kangkaisen", "createdAt": "2020-05-01T10:42:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQwNDU4MA=="}], "type": "inlineReview", "revised_code": {"commit": "cd9bedd5801e10b039cddcaaa241900750764777", "chunk": "diff --git a/fe/src/test/java/org/apache/doris/planner/QueryPlanTest.java b/fe/src/test/java/org/apache/doris/planner/QueryPlanTest.java\nindex c6f62cd2e..cd767f563 100644\n--- a/fe/src/test/java/org/apache/doris/planner/QueryPlanTest.java\n+++ b/fe/src/test/java/org/apache/doris/planner/QueryPlanTest.java\n\n@@ -521,89 +522,116 @@ public class QueryPlanTest {\n                 + \"from test.test1 \"\n                 + \"where time = case when date_format(now(),'%H%i')  < 123 then date_format(date_sub(now(),2),'%Y%m%d') else date_format(date_sub(now(),1),'%Y%m%d') end\";\n         SelectStmt selectStmt = getAnalyzedAndRewritedStmt(caseWhenSql);\n-        Assert.assertTrue(!selectStmt.toSql().contains(\"CASE WHEN\") && !selectStmt.toSql().contains(\"case when\"));\n+        Assert.assertTrue(!StringUtils.containsIgnoreCase(selectStmt.toSql(),\"CASE WHEN\") && !StringUtils.containsIgnoreCase(selectStmt.toSql(), \"case when\"));\n \n         // test 1: case when then\n         // 1.1 multi when in on `case when` and can be converted to constants\n         String sql11 = \"select case when false then 2 when true then 3 else 0 end as col11;\";\n         SelectStmt sql11Stmt = getAnalyzedAndRewritedStmt(sql11);\n-        Assert.assertTrue(sql11Stmt.toSql().equals(\"SELECT 3 AS `col11`\"));\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sql11Stmt.toSql(), \"SELECT 3 AS `col11`\"));\n \n-        // 1.2 multi when in on `case when` ,when expr can not be converted to constants\n+        // 1.2 multi `when expr` in on `case when` ,`when expr` can not be converted to constants\n         String sql121 = \"select case when false then 2 when substr(k7,2,1) then 3 else 0 end as col121 from test.baseall\";\n         SelectStmt sqlStmt121 = getAnalyzedAndRewritedStmt(sql121);\n-        Assert.assertTrue(sqlStmt121.toSql().equals(\"SELECT CASE WHEN substr(`k7`, 2, 1) THEN 3 ELSE 0 END AS `col121` FROM `default_cluster:test`.`baseall`\"));\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sqlStmt121.toSql(),\"SELECT CASE WHEN substr(`k7`, 2, 1) THEN 3 ELSE 0 END AS `col121` FROM `default_cluster:test`.`baseall`\"));\n \n         // 1.2.2 when expr which can not be converted to constants in the first\n         String sql122 = \"select case when substr(k7,2,1) then 2 when false then 3 else 0 end as col122 from test.baseall\";\n         SelectStmt sqlStmt122 = getAnalyzedAndRewritedStmt(sql122);\n-        Assert.assertTrue(sqlStmt122.toSql().equals(\"SELECT CASE WHEN substr(`k7`, 2, 1) THEN 2 WHEN FALSE THEN 3 ELSE 0 END AS `col122` FROM `default_cluster:test`.`baseall`\"));\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sqlStmt122.toSql(), \"SELECT CASE WHEN substr(`k7`, 2, 1) THEN 2 WHEN FALSE THEN 3 ELSE 0 END AS `col122` FROM `default_cluster:test`.`baseall`\"));\n \n         // 1.2.3 when expr which can not be converted to constants in the middle\n         String sql123 = \"select case when false then 2 when substr(k7,2,1) then 3 else 0 end as col123 from test.baseall\";\n         SelectStmt sqlStmt123 = getAnalyzedAndRewritedStmt(sql123);\n-        Assert.assertTrue(sqlStmt123.toSql().equals(\"SELECT CASE WHEN substr(`k7`, 2, 1) THEN 3 ELSE 0 END AS `col123` FROM `default_cluster:test`.`baseall`\"));\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sqlStmt123.toSql(), \"SELECT CASE WHEN substr(`k7`, 2, 1) THEN 3 ELSE 0 END AS `col123` FROM `default_cluster:test`.`baseall`\"));\n+\n+        // 1.2.4 test return `then expr` in the middle\n+        String sql124 = \"select case when false then 1 when true then 2 when false then 3 else 'other' end as col124\";\n+        SelectStmt sql124Stmt = getAnalyzedAndRewritedStmt(sql124);\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sql124Stmt.toSql(), \"SELECT '2' AS `col124`\"));\n \n         // 1.3 test return null\n         String sql3 = \"select case when false then 2 end as col3\";\n         SelectStmt sql3Stmt = getAnalyzedAndRewritedStmt(sql3);\n-        Assert.assertTrue(sql3Stmt.toSql().equals(\"SELECT NULL AS `col3`\"));\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sql3Stmt.toSql(), \"SELECT NULL AS `col3`\"));\n \n         // 1.3.1 test return else expr\n         String sql131 = \"select case when false then 2 when false then 3 else 4 end as col131\";\n         SelectStmt sql131Stmt = getAnalyzedAndRewritedStmt(sql131);\n-        Assert.assertTrue(sql131Stmt.toSql().equals(\"SELECT 4 AS `col131`\"));\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sql131Stmt.toSql(), \"SELECT 4 AS `col131`\"));\n \n         // 1.4 nest `case when` and can be converted to constants\n         String sql14 = \"select case when (case when true then true else false end) then 2 when false then 3 else 0 end as col\";\n         SelectStmt sql14Stmt = getAnalyzedAndRewritedStmt(sql14);\n-        Assert.assertTrue(sql14Stmt.toSql().equals(\"SELECT 2 AS `col`\"));\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sql14Stmt.toSql(), \"SELECT 2 AS `col`\"));\n \n         // 1.5 nest `case when` and can not be converted to constants\n         String sql15 = \"select case when case when substr(k7,2,1) then true else false end then 2 when false then 3 else 0 end as col from test.baseall\";\n         SelectStmt sql15Stmt = getAnalyzedAndRewritedStmt(sql15);\n-        Assert.assertTrue(sql15Stmt.toSql().equals(\"SELECT CASE WHEN CASE WHEN substr(`k7`, 2, 1) THEN TRUE ELSE FALSE END THEN 2 WHEN FALSE THEN 3 ELSE 0 END AS `col` FROM `default_cluster:test`.`baseall`\"));\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sql15Stmt.toSql(), \"SELECT CASE WHEN CASE WHEN substr(`k7`, 2, 1) THEN TRUE ELSE FALSE END THEN 2 WHEN FALSE THEN 3 ELSE 0 END AS `col` FROM `default_cluster:test`.`baseall`\"));\n+\n+        // 1.6 test when expr is null\n+        String sql16 = \"select case when null then 1 else 2 end as col16;\";\n+        SelectStmt sql16Stmt = getAnalyzedAndRewritedStmt(sql16);\n+        System.out.println(sql16Stmt.toSql());\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sql16Stmt.toSql(), \"select 2 AS `col16`\"));\n \n         // test 2: case xxx when then\n         // 2.1 test equal\n         String sql2 = \"select case 1 when 1 then 'a' when 2 then 'b' else 'other' end as col2;\";\n         SelectStmt sql2Stmt = getAnalyzedAndRewritedStmt(sql2);\n-        Assert.assertTrue(sql2Stmt.toSql().equals(\"SELECT 'a' AS `col2`\"));\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sql2Stmt.toSql(), (\"SELECT 'a' AS `col2`\")));\n \n         // 2.1.2 test not equal\n         String sql212 = \"select case 'a' when 1 then 'a' when 'a' then 'b' else 'other' end as col212;\";\n         SelectStmt sql212Stmt = getAnalyzedAndRewritedStmt(sql212);\n-        Assert.assertTrue(sql212Stmt.toSql().equals(\"SELECT 'other' AS `col212`\"));\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sql212Stmt.toSql(), \"SELECT 'b' AS `col212`\"));\n \n         // 2.2 test return null\n         String sql22 = \"select case 'a' when 1 then 'a' when 'b' then 'b' end as col22;\";\n         SelectStmt sql22Stmt = getAnalyzedAndRewritedStmt(sql22);\n-        Assert.assertTrue(sql22Stmt.toSql().equals(\"SELECT NULL AS `col22`\"));\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sql22Stmt.toSql(), \"SELECT NULL AS `col22`\"));\n \n         // 2.2.2 test return else\n         String sql222 = \"select case 1 when 2 then 'a' when 3 then 'b' else 'other' end as col222;\";\n         SelectStmt sql222Stmt = getAnalyzedAndRewritedStmt(sql222);\n-        Assert.assertTrue(sql222Stmt.toSql().equals(\"SELECT 'other' AS `col222`\"));\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sql222Stmt.toSql(), \"SELECT 'other' AS `col222`\"));\n \n         // 2.3 test can not convert to constant,middle when expr is not constant\n-        String sql23 = \"select case 'a' when 1 then 'a' when substr(k7,2,1) then 2 when false then 3 else 0 end as col23 from test.baseall\";\n+        String sql23 = \"select case 'a' when 'b' then 'a' when substr(k7,2,1) then 2 when false then 3 else 0 end as col23 from test.baseall\";\n         SelectStmt sql23Stmt = getAnalyzedAndRewritedStmt(sql23);\n-        Assert.assertTrue(sql23Stmt.toSql().equals(\"SELECT CASE'a' WHEN substr(`k7`, 2, 1) THEN '2' WHEN '0' THEN '3' ELSE '0' END AS `col23` FROM `default_cluster:test`.`baseall`\"));\n+        // here 1 is casted to string ,so 1 is evaluated\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sql23Stmt.toSql(), \"SELECT CASE'a' WHEN substr(`k7`, 2, 1) THEN '2' WHEN '0' THEN '3' ELSE '0' END AS `col23` FROM `default_cluster:test`.`baseall`\"));\n \n         // 2.3.1  first when expr is not constant\n         String sql231 = \"select case 'a' when substr(k7,2,1) then 2 when 1 then 'a' when false then 3 else 0 end as col231 from test.baseall\";\n         SelectStmt sql231Stmt = getAnalyzedAndRewritedStmt(sql231);\n-        Assert.assertTrue(sql231Stmt.toSql().equals(\"SELECT CASE'a' WHEN substr(`k7`, 2, 1) THEN '2' WHEN '1' THEN 'a' WHEN '0' THEN '3' ELSE '0' END AS `col231` FROM `default_cluster:test`.`baseall`\"));\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sql231Stmt.toSql(), \"SELECT CASE'a' WHEN substr(`k7`, 2, 1) THEN '2' WHEN '1' THEN 'a' WHEN '0' THEN '3' ELSE '0' END AS `col231` FROM `default_cluster:test`.`baseall`\"));\n \n         // 2.3.2 case expr is not constant\n         String sql232 = \"select case k1 when substr(k7,2,1) then 2 when 1 then 'a' when false then 3 else 0 end as col232 from test.baseall\";\n         SelectStmt sql232Stmt = getAnalyzedAndRewritedStmt(sql232);\n-        Assert.assertTrue(sql232Stmt.toSql().equals(\"SELECT CASE`k1` WHEN substr(`k7`, 2, 1) THEN '2' WHEN '1' THEN 'a' WHEN '0' THEN '3' ELSE '0' END AS `col232` FROM `default_cluster:test`.`baseall`\"));\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sql232Stmt.toSql(), \"SELECT CASE`k1` WHEN substr(`k7`, 2, 1) THEN '2' WHEN '1' THEN 'a' WHEN '0' THEN '3' ELSE '0' END AS `col232` FROM `default_cluster:test`.`baseall`\"));\n \n         // 3.1 test float,float in case expr\n         String sql31 = \"select case cast(100 as float) when 1 then 'a' when 2 then 'b' else 'other' end as col31;\";\n         SelectStmt sql31Stmt = getAnalyzedAndRewritedStmt(sql31);\n-        Assert.assertTrue(sql31Stmt.toSql().equals(\"SELECT CASE100.0 WHEN 1.0 THEN 'a' WHEN 2.0 THEN 'b' ELSE 'other' END AS `col31`\"));\n-\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sql31Stmt.toSql(), \"SELECT CASE100.0 WHEN 1.0 THEN 'a' WHEN 2.0 THEN 'b' ELSE 'other' END AS `col31`\"));\n+\n+        // 4.1 test null in case expr return else\n+        String sql41 = \"select case null when 1 then 'a' when 2 then 'b' else 'other' end as col41\";\n+        SelectStmt sql41Stmt = getAnalyzedAndRewritedStmt(sql41);\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sql41Stmt.toSql(), \"SELECT 'other' AS `col41`\"));\n+\n+        // 4.1.2 test null in case expr return null\n+        String sql412 = \"select case null when 1 then 'a' when 2 then 'b' end as col41\";\n+        SelectStmt sql412Stmt = getAnalyzedAndRewritedStmt(sql412);\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sql412Stmt.toSql(), \"SELECT NULL AS `col41`\"));\n+\n+        // 4.2.1 test null in when expr\n+        String sql421 = \"select case 'a' when null then 'a' else 'other' end as col421\";\n+        SelectStmt sql421Stmt = getAnalyzedAndRewritedStmt(sql421);\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sql421Stmt.toSql(), \"SELECT 'other' as `col421`\"));\n     }\n+\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQwNDk5MA==", "url": "https://github.com/apache/incubator-doris/pull/3396#discussion_r417404990", "bodyText": "Please move this test to ConstantExpressTest", "author": "kangkaisen", "createdAt": "2020-04-29T15:27:06Z", "path": "fe/src/test/java/org/apache/doris/planner/QueryPlanTest.java", "diffHunk": "@@ -504,4 +504,106 @@ public void testDateTypeEquality() throws Exception {\n         Catalog.getCurrentCatalog().getLoadManager().createLoadJobV1FromStmt(loadStmt, EtlJobType.HADOOP,\n                 System.currentTimeMillis());\n     }\n+\n+    private SelectStmt getAnalyzedAndRewritedStmt(String sql) throws Exception {\n+        SelectStmt selectStmt =\n+                (SelectStmt) UtFrameUtils.parseAndAnalyzeStmt(sql, connectContext);\n+        selectStmt = (SelectStmt) UtFrameUtils.rewriteStmt(selectStmt, connectContext);\n+        selectStmt = (SelectStmt) UtFrameUtils.reAnalyze(selectStmt, connectContext);\n+        return selectStmt;\n+    }\n+\n+    @Test\n+    public void testConvertCaseWhenToConstant() throws Exception {", "originalCommit": "507bd161dbb30944a9fd3069b6e001e58c7274a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc1ODM1OQ==", "url": "https://github.com/apache/incubator-doris/pull/3396#discussion_r417758359", "bodyText": "case when expr rewrite more complicate than convert  a function to constants,it will change the query plan structure and dependency real doris table, so I think put UT in QueryPlanTest is better", "author": "wangbo", "createdAt": "2020-04-30T05:17:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQwNDk5MA=="}], "type": "inlineReview", "revised_code": {"commit": "cd9bedd5801e10b039cddcaaa241900750764777", "chunk": "diff --git a/fe/src/test/java/org/apache/doris/planner/QueryPlanTest.java b/fe/src/test/java/org/apache/doris/planner/QueryPlanTest.java\nindex c6f62cd2e..cd767f563 100644\n--- a/fe/src/test/java/org/apache/doris/planner/QueryPlanTest.java\n+++ b/fe/src/test/java/org/apache/doris/planner/QueryPlanTest.java\n\n@@ -521,89 +522,116 @@ public class QueryPlanTest {\n                 + \"from test.test1 \"\n                 + \"where time = case when date_format(now(),'%H%i')  < 123 then date_format(date_sub(now(),2),'%Y%m%d') else date_format(date_sub(now(),1),'%Y%m%d') end\";\n         SelectStmt selectStmt = getAnalyzedAndRewritedStmt(caseWhenSql);\n-        Assert.assertTrue(!selectStmt.toSql().contains(\"CASE WHEN\") && !selectStmt.toSql().contains(\"case when\"));\n+        Assert.assertTrue(!StringUtils.containsIgnoreCase(selectStmt.toSql(),\"CASE WHEN\") && !StringUtils.containsIgnoreCase(selectStmt.toSql(), \"case when\"));\n \n         // test 1: case when then\n         // 1.1 multi when in on `case when` and can be converted to constants\n         String sql11 = \"select case when false then 2 when true then 3 else 0 end as col11;\";\n         SelectStmt sql11Stmt = getAnalyzedAndRewritedStmt(sql11);\n-        Assert.assertTrue(sql11Stmt.toSql().equals(\"SELECT 3 AS `col11`\"));\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sql11Stmt.toSql(), \"SELECT 3 AS `col11`\"));\n \n-        // 1.2 multi when in on `case when` ,when expr can not be converted to constants\n+        // 1.2 multi `when expr` in on `case when` ,`when expr` can not be converted to constants\n         String sql121 = \"select case when false then 2 when substr(k7,2,1) then 3 else 0 end as col121 from test.baseall\";\n         SelectStmt sqlStmt121 = getAnalyzedAndRewritedStmt(sql121);\n-        Assert.assertTrue(sqlStmt121.toSql().equals(\"SELECT CASE WHEN substr(`k7`, 2, 1) THEN 3 ELSE 0 END AS `col121` FROM `default_cluster:test`.`baseall`\"));\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sqlStmt121.toSql(),\"SELECT CASE WHEN substr(`k7`, 2, 1) THEN 3 ELSE 0 END AS `col121` FROM `default_cluster:test`.`baseall`\"));\n \n         // 1.2.2 when expr which can not be converted to constants in the first\n         String sql122 = \"select case when substr(k7,2,1) then 2 when false then 3 else 0 end as col122 from test.baseall\";\n         SelectStmt sqlStmt122 = getAnalyzedAndRewritedStmt(sql122);\n-        Assert.assertTrue(sqlStmt122.toSql().equals(\"SELECT CASE WHEN substr(`k7`, 2, 1) THEN 2 WHEN FALSE THEN 3 ELSE 0 END AS `col122` FROM `default_cluster:test`.`baseall`\"));\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sqlStmt122.toSql(), \"SELECT CASE WHEN substr(`k7`, 2, 1) THEN 2 WHEN FALSE THEN 3 ELSE 0 END AS `col122` FROM `default_cluster:test`.`baseall`\"));\n \n         // 1.2.3 when expr which can not be converted to constants in the middle\n         String sql123 = \"select case when false then 2 when substr(k7,2,1) then 3 else 0 end as col123 from test.baseall\";\n         SelectStmt sqlStmt123 = getAnalyzedAndRewritedStmt(sql123);\n-        Assert.assertTrue(sqlStmt123.toSql().equals(\"SELECT CASE WHEN substr(`k7`, 2, 1) THEN 3 ELSE 0 END AS `col123` FROM `default_cluster:test`.`baseall`\"));\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sqlStmt123.toSql(), \"SELECT CASE WHEN substr(`k7`, 2, 1) THEN 3 ELSE 0 END AS `col123` FROM `default_cluster:test`.`baseall`\"));\n+\n+        // 1.2.4 test return `then expr` in the middle\n+        String sql124 = \"select case when false then 1 when true then 2 when false then 3 else 'other' end as col124\";\n+        SelectStmt sql124Stmt = getAnalyzedAndRewritedStmt(sql124);\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sql124Stmt.toSql(), \"SELECT '2' AS `col124`\"));\n \n         // 1.3 test return null\n         String sql3 = \"select case when false then 2 end as col3\";\n         SelectStmt sql3Stmt = getAnalyzedAndRewritedStmt(sql3);\n-        Assert.assertTrue(sql3Stmt.toSql().equals(\"SELECT NULL AS `col3`\"));\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sql3Stmt.toSql(), \"SELECT NULL AS `col3`\"));\n \n         // 1.3.1 test return else expr\n         String sql131 = \"select case when false then 2 when false then 3 else 4 end as col131\";\n         SelectStmt sql131Stmt = getAnalyzedAndRewritedStmt(sql131);\n-        Assert.assertTrue(sql131Stmt.toSql().equals(\"SELECT 4 AS `col131`\"));\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sql131Stmt.toSql(), \"SELECT 4 AS `col131`\"));\n \n         // 1.4 nest `case when` and can be converted to constants\n         String sql14 = \"select case when (case when true then true else false end) then 2 when false then 3 else 0 end as col\";\n         SelectStmt sql14Stmt = getAnalyzedAndRewritedStmt(sql14);\n-        Assert.assertTrue(sql14Stmt.toSql().equals(\"SELECT 2 AS `col`\"));\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sql14Stmt.toSql(), \"SELECT 2 AS `col`\"));\n \n         // 1.5 nest `case when` and can not be converted to constants\n         String sql15 = \"select case when case when substr(k7,2,1) then true else false end then 2 when false then 3 else 0 end as col from test.baseall\";\n         SelectStmt sql15Stmt = getAnalyzedAndRewritedStmt(sql15);\n-        Assert.assertTrue(sql15Stmt.toSql().equals(\"SELECT CASE WHEN CASE WHEN substr(`k7`, 2, 1) THEN TRUE ELSE FALSE END THEN 2 WHEN FALSE THEN 3 ELSE 0 END AS `col` FROM `default_cluster:test`.`baseall`\"));\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sql15Stmt.toSql(), \"SELECT CASE WHEN CASE WHEN substr(`k7`, 2, 1) THEN TRUE ELSE FALSE END THEN 2 WHEN FALSE THEN 3 ELSE 0 END AS `col` FROM `default_cluster:test`.`baseall`\"));\n+\n+        // 1.6 test when expr is null\n+        String sql16 = \"select case when null then 1 else 2 end as col16;\";\n+        SelectStmt sql16Stmt = getAnalyzedAndRewritedStmt(sql16);\n+        System.out.println(sql16Stmt.toSql());\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sql16Stmt.toSql(), \"select 2 AS `col16`\"));\n \n         // test 2: case xxx when then\n         // 2.1 test equal\n         String sql2 = \"select case 1 when 1 then 'a' when 2 then 'b' else 'other' end as col2;\";\n         SelectStmt sql2Stmt = getAnalyzedAndRewritedStmt(sql2);\n-        Assert.assertTrue(sql2Stmt.toSql().equals(\"SELECT 'a' AS `col2`\"));\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sql2Stmt.toSql(), (\"SELECT 'a' AS `col2`\")));\n \n         // 2.1.2 test not equal\n         String sql212 = \"select case 'a' when 1 then 'a' when 'a' then 'b' else 'other' end as col212;\";\n         SelectStmt sql212Stmt = getAnalyzedAndRewritedStmt(sql212);\n-        Assert.assertTrue(sql212Stmt.toSql().equals(\"SELECT 'other' AS `col212`\"));\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sql212Stmt.toSql(), \"SELECT 'b' AS `col212`\"));\n \n         // 2.2 test return null\n         String sql22 = \"select case 'a' when 1 then 'a' when 'b' then 'b' end as col22;\";\n         SelectStmt sql22Stmt = getAnalyzedAndRewritedStmt(sql22);\n-        Assert.assertTrue(sql22Stmt.toSql().equals(\"SELECT NULL AS `col22`\"));\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sql22Stmt.toSql(), \"SELECT NULL AS `col22`\"));\n \n         // 2.2.2 test return else\n         String sql222 = \"select case 1 when 2 then 'a' when 3 then 'b' else 'other' end as col222;\";\n         SelectStmt sql222Stmt = getAnalyzedAndRewritedStmt(sql222);\n-        Assert.assertTrue(sql222Stmt.toSql().equals(\"SELECT 'other' AS `col222`\"));\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sql222Stmt.toSql(), \"SELECT 'other' AS `col222`\"));\n \n         // 2.3 test can not convert to constant,middle when expr is not constant\n-        String sql23 = \"select case 'a' when 1 then 'a' when substr(k7,2,1) then 2 when false then 3 else 0 end as col23 from test.baseall\";\n+        String sql23 = \"select case 'a' when 'b' then 'a' when substr(k7,2,1) then 2 when false then 3 else 0 end as col23 from test.baseall\";\n         SelectStmt sql23Stmt = getAnalyzedAndRewritedStmt(sql23);\n-        Assert.assertTrue(sql23Stmt.toSql().equals(\"SELECT CASE'a' WHEN substr(`k7`, 2, 1) THEN '2' WHEN '0' THEN '3' ELSE '0' END AS `col23` FROM `default_cluster:test`.`baseall`\"));\n+        // here 1 is casted to string ,so 1 is evaluated\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sql23Stmt.toSql(), \"SELECT CASE'a' WHEN substr(`k7`, 2, 1) THEN '2' WHEN '0' THEN '3' ELSE '0' END AS `col23` FROM `default_cluster:test`.`baseall`\"));\n \n         // 2.3.1  first when expr is not constant\n         String sql231 = \"select case 'a' when substr(k7,2,1) then 2 when 1 then 'a' when false then 3 else 0 end as col231 from test.baseall\";\n         SelectStmt sql231Stmt = getAnalyzedAndRewritedStmt(sql231);\n-        Assert.assertTrue(sql231Stmt.toSql().equals(\"SELECT CASE'a' WHEN substr(`k7`, 2, 1) THEN '2' WHEN '1' THEN 'a' WHEN '0' THEN '3' ELSE '0' END AS `col231` FROM `default_cluster:test`.`baseall`\"));\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sql231Stmt.toSql(), \"SELECT CASE'a' WHEN substr(`k7`, 2, 1) THEN '2' WHEN '1' THEN 'a' WHEN '0' THEN '3' ELSE '0' END AS `col231` FROM `default_cluster:test`.`baseall`\"));\n \n         // 2.3.2 case expr is not constant\n         String sql232 = \"select case k1 when substr(k7,2,1) then 2 when 1 then 'a' when false then 3 else 0 end as col232 from test.baseall\";\n         SelectStmt sql232Stmt = getAnalyzedAndRewritedStmt(sql232);\n-        Assert.assertTrue(sql232Stmt.toSql().equals(\"SELECT CASE`k1` WHEN substr(`k7`, 2, 1) THEN '2' WHEN '1' THEN 'a' WHEN '0' THEN '3' ELSE '0' END AS `col232` FROM `default_cluster:test`.`baseall`\"));\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sql232Stmt.toSql(), \"SELECT CASE`k1` WHEN substr(`k7`, 2, 1) THEN '2' WHEN '1' THEN 'a' WHEN '0' THEN '3' ELSE '0' END AS `col232` FROM `default_cluster:test`.`baseall`\"));\n \n         // 3.1 test float,float in case expr\n         String sql31 = \"select case cast(100 as float) when 1 then 'a' when 2 then 'b' else 'other' end as col31;\";\n         SelectStmt sql31Stmt = getAnalyzedAndRewritedStmt(sql31);\n-        Assert.assertTrue(sql31Stmt.toSql().equals(\"SELECT CASE100.0 WHEN 1.0 THEN 'a' WHEN 2.0 THEN 'b' ELSE 'other' END AS `col31`\"));\n-\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sql31Stmt.toSql(), \"SELECT CASE100.0 WHEN 1.0 THEN 'a' WHEN 2.0 THEN 'b' ELSE 'other' END AS `col31`\"));\n+\n+        // 4.1 test null in case expr return else\n+        String sql41 = \"select case null when 1 then 'a' when 2 then 'b' else 'other' end as col41\";\n+        SelectStmt sql41Stmt = getAnalyzedAndRewritedStmt(sql41);\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sql41Stmt.toSql(), \"SELECT 'other' AS `col41`\"));\n+\n+        // 4.1.2 test null in case expr return null\n+        String sql412 = \"select case null when 1 then 'a' when 2 then 'b' end as col41\";\n+        SelectStmt sql412Stmt = getAnalyzedAndRewritedStmt(sql412);\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sql412Stmt.toSql(), \"SELECT NULL AS `col41`\"));\n+\n+        // 4.2.1 test null in when expr\n+        String sql421 = \"select case 'a' when null then 'a' else 'other' end as col421\";\n+        SelectStmt sql421Stmt = getAnalyzedAndRewritedStmt(sql421);\n+        Assert.assertTrue(StringUtils.equalsIgnoreCase(sql421Stmt.toSql(), \"SELECT 'other' as `col421`\"));\n     }\n+\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQxMDAwNA==", "url": "https://github.com/apache/incubator-doris/pull/3396#discussion_r417410004", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    //pre return when the `when expr` can't be converted to constants\n          \n          \n            \n                    // Early return when the `when expr` can't be converted to constants", "author": "kangkaisen", "createdAt": "2020-04-29T15:33:27Z", "path": "fe/src/main/java/org/apache/doris/analysis/CaseExpr.java", "diffHunk": "@@ -251,4 +257,72 @@ public void analyzeImpl(Analyzer analyzer) throws AnalysisException {\n         }\n         return exprs;\n     }\n+\n+    // this method just compare literal value and not completely consistent with be,for two cases\n+    // 1 not deal float\n+    // 2 just compare literal value with same type. for a example sql 'select case when 123 then '1' else '2' end as col'\n+    //      for be will return '1', because be only regard 0 as false\n+    //      but for current LiteralExpr.compareLiteral, `123`' won't be regard as true\n+    //  the case which two values has different type left to be\n+    public static Expr computeCaseExpr(CaseExpr expr) {\n+        LiteralExpr caseExpr;\n+        int startIndex = 0;\n+        int size = expr.getChildren().size() - 1;\n+        if (expr.hasCaseExpr()) {\n+            // just deal literal here\n+            // and avoid `float compute` in java,float should be dealt in be\n+            Expr caseChildExpr = expr.getChild(0);\n+            if (!caseChildExpr.isLiteral()\n+                    || caseChildExpr instanceof DecimalLiteral || caseChildExpr instanceof FloatLiteral) {\n+                return expr;\n+            }\n+            caseExpr = (LiteralExpr) expr.getChild(0);\n+            startIndex++;\n+            size--;\n+        } else {\n+            caseExpr = new BoolLiteral(true);\n+        }\n+\n+        if (expr.hasElseExpr) {\n+            size--;\n+        }\n+\n+        //pre return when the `when expr` can't be converted to constants", "originalCommit": "507bd161dbb30944a9fd3069b6e001e58c7274a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxNzE3MQ==", "url": "https://github.com/apache/incubator-doris/pull/3396#discussion_r417717171", "bodyText": "\ud83d\udc4c", "author": "wangbo", "createdAt": "2020-04-30T02:17:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQxMDAwNA=="}], "type": "inlineReview", "revised_code": {"commit": "cd9bedd5801e10b039cddcaaa241900750764777", "chunk": "diff --git a/fe/src/main/java/org/apache/doris/analysis/CaseExpr.java b/fe/src/main/java/org/apache/doris/analysis/CaseExpr.java\nindex 5a5b13bc7..27c4a438d 100644\n--- a/fe/src/main/java/org/apache/doris/analysis/CaseExpr.java\n+++ b/fe/src/main/java/org/apache/doris/analysis/CaseExpr.java\n\n@@ -267,7 +267,7 @@ public class CaseExpr extends Expr {\n     public static Expr computeCaseExpr(CaseExpr expr) {\n         LiteralExpr caseExpr;\n         int startIndex = 0;\n-        int size = expr.getChildren().size() - 1;\n+        int endIndex = expr.getChildren().size();\n         if (expr.hasCaseExpr()) {\n             // just deal literal here\n             // and avoid `float compute` in java,float should be dealt in be\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQxNTg1MA==", "url": "https://github.com/apache/incubator-doris/pull/3396#discussion_r417415850", "bodyText": "would better rename startIndex  and size .\nThe size compute logic seems not consistent with BE \uff1f\n        int loop_start = has_case_expr() ? 1 : 0; \\\n        int loop_end = (has_else_expr()) ? num_children - 1 : num_children; \\", "author": "kangkaisen", "createdAt": "2020-04-29T15:41:22Z", "path": "fe/src/main/java/org/apache/doris/analysis/CaseExpr.java", "diffHunk": "@@ -251,4 +257,72 @@ public void analyzeImpl(Analyzer analyzer) throws AnalysisException {\n         }\n         return exprs;\n     }\n+\n+    // this method just compare literal value and not completely consistent with be,for two cases\n+    // 1 not deal float\n+    // 2 just compare literal value with same type. for a example sql 'select case when 123 then '1' else '2' end as col'\n+    //      for be will return '1', because be only regard 0 as false\n+    //      but for current LiteralExpr.compareLiteral, `123`' won't be regard as true\n+    //  the case which two values has different type left to be\n+    public static Expr computeCaseExpr(CaseExpr expr) {\n+        LiteralExpr caseExpr;\n+        int startIndex = 0;", "originalCommit": "507bd161dbb30944a9fd3069b6e001e58c7274a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzczMDQ3Nw==", "url": "https://github.com/apache/incubator-doris/pull/3396#discussion_r417730477", "bodyText": "yes, be logic is right.I'll fix it", "author": "wangbo", "createdAt": "2020-04-30T03:15:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQxNTg1MA=="}], "type": "inlineReview", "revised_code": {"commit": "cd9bedd5801e10b039cddcaaa241900750764777", "chunk": "diff --git a/fe/src/main/java/org/apache/doris/analysis/CaseExpr.java b/fe/src/main/java/org/apache/doris/analysis/CaseExpr.java\nindex 5a5b13bc7..27c4a438d 100644\n--- a/fe/src/main/java/org/apache/doris/analysis/CaseExpr.java\n+++ b/fe/src/main/java/org/apache/doris/analysis/CaseExpr.java\n\n@@ -267,7 +267,7 @@ public class CaseExpr extends Expr {\n     public static Expr computeCaseExpr(CaseExpr expr) {\n         LiteralExpr caseExpr;\n         int startIndex = 0;\n-        int size = expr.getChildren().size() - 1;\n+        int endIndex = expr.getChildren().size();\n         if (expr.hasCaseExpr()) {\n             // just deal literal here\n             // and avoid `float compute` in java,float should be dealt in be\n"}}, {"oid": "cd9bedd5801e10b039cddcaaa241900750764777", "url": "https://github.com/apache/incubator-doris/commit/cd9bedd5801e10b039cddcaaa241900750764777", "message": "1 support skip null\n2 add more ut\n3 fix logic bug", "committedDate": "2020-04-30T05:31:00Z", "type": "commit"}, {"oid": "1d18a2f6c6248ef6c0282bb60a3daab3e113599a", "url": "https://github.com/apache/incubator-doris/commit/1d18a2f6c6248ef6c0282bb60a3daab3e113599a", "message": "1 use UtFrameUtils.getSQLPlanOrErrorMsg to check plan\n2 clone a new expr when return CaseExpr which has been changed", "committedDate": "2020-05-02T08:10:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk1NTM5MQ==", "url": "https://github.com/apache/incubator-doris/pull/3396#discussion_r418955391", "bodyText": "These two methods could also be removed?", "author": "kangkaisen", "createdAt": "2020-05-02T12:51:10Z", "path": "fe/src/test/java/org/apache/doris/utframe/UtFrameUtils.java", "diffHunk": "@@ -96,6 +100,34 @@ public static StatementBase parseAndAnalyzeStmt(String originStmt, ConnectContex\n         return statementBase;\n     }\n \n+    public static StatementBase rewriteStmt(StatementBase stmt, ConnectContext ctx) throws AnalysisException {", "originalCommit": "1d18a2f6c6248ef6c0282bb60a3daab3e113599a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4d3c68150326899cbe562a45ccb33b65ff6bbb05", "chunk": "diff --git a/fe/src/test/java/org/apache/doris/utframe/UtFrameUtils.java b/fe/src/test/java/org/apache/doris/utframe/UtFrameUtils.java\nindex 66f10aff2..ac538e732 100644\n--- a/fe/src/test/java/org/apache/doris/utframe/UtFrameUtils.java\n+++ b/fe/src/test/java/org/apache/doris/utframe/UtFrameUtils.java\n\n@@ -100,34 +96,6 @@ public class UtFrameUtils {\n         return statementBase;\n     }\n \n-    public static StatementBase rewriteStmt(StatementBase stmt, ConnectContext ctx) throws AnalysisException {\n-        Analyzer analyzer = new Analyzer(ctx.getCatalog(), ctx);\n-        ExprRewriter rewriter = analyzer.getExprRewriter();\n-        rewriter.reset();\n-        stmt.rewriteExprs(rewriter);\n-        return stmt;\n-    }\n-\n-    public static StatementBase reAnalyze(StatementBase stmt, ConnectContext ctx) throws UserException {\n-        Analyzer analyzer = new Analyzer(ctx.getCatalog(), ctx);\n-        List<Type> origResultTypes = Lists.newArrayList();\n-        for (Expr e: stmt.getResultExprs()) {\n-            origResultTypes.add(e.getType());\n-        }\n-        List<String> origColLabels =\n-                Lists.newArrayList(stmt.getColLabels());\n-\n-        // Re-analyze the stmt with a new analyzer.\n-        // query re-analyze\n-        stmt.reset();\n-        stmt.analyze(analyzer);\n-\n-        // Restore the original result types and column labels.\n-        stmt.castResultExprs(origResultTypes);\n-        stmt.setColLabels(origColLabels);\n-        return stmt;\n-    }\n-\n     // for analyzing multi statements\n     public static List<StatementBase> parseAndAnalyzeStmts(String originStmt, ConnectContext ctx) throws Exception {\n         System.out.println(\"begin to parse stmts: \" + originStmt);\n"}}, {"oid": "4d3c68150326899cbe562a45ccb33b65ff6bbb05", "url": "https://github.com/apache/incubator-doris/commit/4d3c68150326899cbe562a45ccb33b65ff6bbb05", "message": "remove useless method", "committedDate": "2020-05-03T05:39:32Z", "type": "commit"}, {"oid": "4d3c68150326899cbe562a45ccb33b65ff6bbb05", "url": "https://github.com/apache/incubator-doris/commit/4d3c68150326899cbe562a45ccb33b65ff6bbb05", "message": "remove useless method", "committedDate": "2020-05-03T05:39:32Z", "type": "forcePushed"}, {"oid": "44b7602417d3cd825caa356767f266352060339c", "url": "https://github.com/apache/incubator-doris/commit/44b7602417d3cd825caa356767f266352060339c", "message": "[UT] Fix UT bug (#3456)\n\nSSD cool downtime shouldn't be fix time in UT;", "committedDate": "2020-05-05T06:08:19Z", "type": "commit"}, {"oid": "b7e6aa7dd91d69adb27b4fc6aaa6dd0061272b22", "url": "https://github.com/apache/incubator-doris/commit/b7e6aa7dd91d69adb27b4fc6aaa6dd0061272b22", "message": "Merge branch 'upstream_master' into eval_case_when_expr", "committedDate": "2020-05-05T06:13:19Z", "type": "commit"}, {"oid": "bb256e9d73d2cbd142e811e07806bf9a92038b6e", "url": "https://github.com/apache/incubator-doris/commit/bb256e9d73d2cbd142e811e07806bf9a92038b6e", "message": "Merge branch 'upstream_master' into eval_case_when_expr", "committedDate": "2020-05-06T12:57:20Z", "type": "commit"}]}