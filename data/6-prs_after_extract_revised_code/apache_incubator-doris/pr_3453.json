{"pr_number": 3453, "pr_title": "Support simple transitivity on join predicate pushdown", "pr_createdAt": "2020-05-02T12:43:48Z", "pr_url": "https://github.com/apache/incubator-doris/pull/3453", "timeline": [{"oid": "b1d2d04563b8837d991148441a85e996abb64265", "url": "https://github.com/apache/incubator-doris/commit/b1d2d04563b8837d991148441a85e996abb64265", "message": "Support simple transitivity on join predicate pushdown", "committedDate": "2020-05-02T12:30:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA2NTA1OA==", "url": "https://github.com/apache/incubator-doris/pull/3453#discussion_r419065058", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            LOG.info(\"pushDownConjuncts: \" + pushDownConjuncts);\n          \n          \n            \n                            LOG.debug(\"pushDownConjuncts: {}\", pushDownConjuncts);", "author": "morningman", "createdAt": "2020-05-03T07:58:34Z", "path": "fe/src/main/java/org/apache/doris/planner/SingleNodePlanner.java", "diffHunk": "@@ -1347,6 +1349,45 @@ private PlanNode createScanNode(Analyzer analyzer, TableRef tblRef, SelectStmt s\n         if (scanNode instanceof OlapScanNode || scanNode instanceof EsScanNode) {\n             Map<String, PartitionColumnFilter> columnFilters = Maps.newHashMap();\n             List<Expr> conjuncts = analyzer.getUnassignedConjuncts(scanNode);\n+\n+            // push down join predicate\n+            List<Expr> pushDownConjuncts = Lists.newArrayList();\n+            TupleId tupleId = tblRef.getId();\n+            List<Expr> eqJoinPredicates = analyzer.getEqJoinConjuncts(tupleId);\n+            if (eqJoinPredicates != null) {\n+                // only inner and left outer join\n+                if ((tblRef.getJoinOp().isInnerJoin() || tblRef.getJoinOp().isLeftOuterJoin())) {\n+                    List<Expr> allConjuncts = analyzer.getConjuncts(analyzer.getAllTupleIds());\n+                    allConjuncts.removeAll(conjuncts);\n+                    for (Expr conjunct: allConjuncts) {\n+                        if (canPushDownPredicate(conjunct)) {\n+                            for (Expr eqJoinPredicate : eqJoinPredicates) {\n+                                // we can ensure slot is left node, because NormalizeBinaryPredicatesRule\n+                                SlotRef otherSlot = conjunct.getChild(0).unwrapSlotRef();\n+\n+                                // ensure the children for eqJoinPredicate both be SlotRef\n+                                if (eqJoinPredicate.getChild(0).unwrapSlotRef() == null || eqJoinPredicate.getChild(1).unwrapSlotRef() == null) {\n+                                    continue;\n+                                }\n+\n+                                SlotRef leftSlot = eqJoinPredicate.getChild(0).unwrapSlotRef();\n+                                SlotRef rightSlot = eqJoinPredicate.getChild(1).unwrapSlotRef();\n+\n+                                // example: t1.id = t2.id and t1.id = 1  => t2.id =1\n+                                if (otherSlot.isBound(leftSlot.getSlotId()) && rightSlot.isBound(tupleId)) {\n+                                    pushDownConjuncts.add(rewritePredicate(analyzer, conjunct, rightSlot));\n+                                } else if (otherSlot.isBound(rightSlot.getSlotId()) && leftSlot.isBound(tupleId)) {\n+                                    pushDownConjuncts.add(rewritePredicate(analyzer, conjunct, leftSlot));\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+\n+                LOG.info(\"pushDownConjuncts: \" + pushDownConjuncts);", "originalCommit": "b1d2d04563b8837d991148441a85e996abb64265", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5bafbdd599ec0aec1611987723165ca91d314698", "chunk": "diff --git a/fe/src/main/java/org/apache/doris/planner/SingleNodePlanner.java b/fe/src/main/java/org/apache/doris/planner/SingleNodePlanner.java\nindex d0c8ea837..8c0727d3e 100644\n--- a/fe/src/main/java/org/apache/doris/planner/SingleNodePlanner.java\n+++ b/fe/src/main/java/org/apache/doris/planner/SingleNodePlanner.java\n\n@@ -1360,7 +1358,7 @@ public class SingleNodePlanner {\n                     List<Expr> allConjuncts = analyzer.getConjuncts(analyzer.getAllTupleIds());\n                     allConjuncts.removeAll(conjuncts);\n                     for (Expr conjunct: allConjuncts) {\n-                        if (canPushDownPredicate(conjunct)) {\n+                        if (org.apache.doris.analysis.Predicate.canPushDownPredicate(conjunct)) {\n                             for (Expr eqJoinPredicate : eqJoinPredicates) {\n                                 // we can ensure slot is left node, because NormalizeBinaryPredicatesRule\n                                 SlotRef otherSlot = conjunct.getChild(0).unwrapSlotRef();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA2NTE3OQ==", "url": "https://github.com/apache/incubator-doris/pull/3453#discussion_r419065179", "bodyText": "Better not using static import", "author": "morningman", "createdAt": "2020-05-03T07:59:35Z", "path": "fe/src/main/java/org/apache/doris/planner/SingleNodePlanner.java", "diffHunk": "@@ -72,6 +72,8 @@\n import java.util.Map;\n import java.util.UUID;\n \n+import static org.apache.doris.analysis.Predicate.canPushDownPredicate;", "originalCommit": "b1d2d04563b8837d991148441a85e996abb64265", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE5MzUwMw==", "url": "https://github.com/apache/incubator-doris/pull/3453#discussion_r419193503", "bodyText": "OK", "author": "kangkaisen", "createdAt": "2020-05-04T02:31:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA2NTE3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "5bafbdd599ec0aec1611987723165ca91d314698", "chunk": "diff --git a/fe/src/main/java/org/apache/doris/planner/SingleNodePlanner.java b/fe/src/main/java/org/apache/doris/planner/SingleNodePlanner.java\nindex d0c8ea837..8c0727d3e 100644\n--- a/fe/src/main/java/org/apache/doris/planner/SingleNodePlanner.java\n+++ b/fe/src/main/java/org/apache/doris/planner/SingleNodePlanner.java\n\n@@ -72,8 +72,6 @@ import java.util.List;\n import java.util.Map;\n import java.util.UUID;\n \n-import static org.apache.doris.analysis.Predicate.canPushDownPredicate;\n-\n /**\n  * Constructs a non-executable single-node plan from an analyzed parse tree.\n  * The single-node plan does not contain data exchanges or data-reduction optimizations\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA2NTI5MA==", "url": "https://github.com/apache/incubator-doris/pull/3453#discussion_r419065290", "bodyText": "Add comment for this method?", "author": "morningman", "createdAt": "2020-05-03T08:00:45Z", "path": "fe/src/main/java/org/apache/doris/planner/SingleNodePlanner.java", "diffHunk": "@@ -1372,6 +1414,24 @@ private PlanNode createScanNode(Analyzer analyzer, TableRef tblRef, SelectStmt s\n         return scanNode;\n     }\n \n+    private Expr rewritePredicate(Analyzer analyzer, Expr oldPredicate, Expr leftChild) {", "originalCommit": "b1d2d04563b8837d991148441a85e996abb64265", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE5MzUyNg==", "url": "https://github.com/apache/incubator-doris/pull/3453#discussion_r419193526", "bodyText": "OK", "author": "kangkaisen", "createdAt": "2020-05-04T02:31:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA2NTI5MA=="}], "type": "inlineReview", "revised_code": {"commit": "5bafbdd599ec0aec1611987723165ca91d314698", "chunk": "diff --git a/fe/src/main/java/org/apache/doris/planner/SingleNodePlanner.java b/fe/src/main/java/org/apache/doris/planner/SingleNodePlanner.java\nindex d0c8ea837..8c0727d3e 100644\n--- a/fe/src/main/java/org/apache/doris/planner/SingleNodePlanner.java\n+++ b/fe/src/main/java/org/apache/doris/planner/SingleNodePlanner.java\n\n@@ -1414,6 +1412,8 @@ public class SingleNodePlanner {\n         return scanNode;\n     }\n \n+    // Rewrite the oldPredicate with new leftChild\n+    // For example: oldPredicate is t1.id = 1, leftChild is t2.id, will return t2.id = 1\n     private Expr rewritePredicate(Analyzer analyzer, Expr oldPredicate, Expr leftChild) {\n         if (oldPredicate instanceof BinaryPredicate) {\n             BinaryPredicate oldBP = (BinaryPredicate) oldPredicate;\n"}}, {"oid": "5bafbdd599ec0aec1611987723165ca91d314698", "url": "https://github.com/apache/incubator-doris/commit/5bafbdd599ec0aec1611987723165ca91d314698", "message": "Update for comment", "committedDate": "2020-05-04T02:30:10Z", "type": "commit"}]}