{"pr_number": 3679, "pr_title": "[DynamicPartition] Optimize the rule of creating dynamic partition", "pr_createdAt": "2020-05-25T06:51:14Z", "pr_url": "https://github.com/apache/incubator-doris/pull/3679", "timeline": [{"oid": "2c862e8b02a845bb4f51b589c714d381c12552be", "url": "https://github.com/apache/incubator-doris/commit/2c862e8b02a845bb4f51b589c714d381c12552be", "message": "first", "committedDate": "2020-05-25T06:31:31Z", "type": "commit"}, {"oid": "c78b750aaee376417b65afbc15eaed5d93169909", "url": "https://github.com/apache/incubator-doris/commit/c78b750aaee376417b65afbc15eaed5d93169909", "message": "add doc", "committedDate": "2020-05-25T06:31:31Z", "type": "commit"}, {"oid": "7545b5c2d425d4f78258f9f0f5155ecaedd9bf74", "url": "https://github.com/apache/incubator-doris/commit/7545b5c2d425d4f78258f9f0f5155ecaedd9bf74", "message": "add ut", "committedDate": "2020-05-25T06:31:31Z", "type": "commit"}, {"oid": "5dd07388bd77297700ba5916b264819adbf49220", "url": "https://github.com/apache/incubator-doris/commit/5dd07388bd77297700ba5916b264819adbf49220", "message": "add show info", "committedDate": "2020-05-25T06:31:31Z", "type": "commit"}, {"oid": "90faac2b361ab69034410d0dd0abf2136e657a6f", "url": "https://github.com/apache/incubator-doris/commit/90faac2b361ab69034410d0dd0abf2136e657a6f", "message": "modify doc", "committedDate": "2020-05-25T06:31:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTgwNTgzMA==", "url": "https://github.com/apache/incubator-doris/pull/3679#discussion_r429805830", "bodyText": "dayOfWeek", "author": "WingsGo", "createdAt": "2020-05-25T08:33:21Z", "path": "fe/src/main/java/org/apache/doris/common/util/DynamicPartitionUtil.java", "diffHunk": "@@ -114,6 +118,34 @@ private static void checkEnable(String enable) throws DdlException {\n         }\n     }\n \n+    private static void checkStartDayOfMonth(String val) throws DdlException {\n+        if (Strings.isNullOrEmpty(val)) {\n+            throw new DdlException(\"Invalid properties: \" + DynamicPartitionProperty.START_DAY_OF_MONTH);\n+        }\n+        try {\n+            int dayOfMonth = Integer.parseInt(val);\n+            if (dayOfMonth < 1 || dayOfMonth > 28) {\n+                throw new DdlException(DynamicPartitionProperty.START_DAY_OF_MONTH + \" should between 1 and 28\");\n+            }\n+        } catch (NumberFormatException e) {\n+            throw new DdlException(\"Invalid properties: \" + DynamicPartitionProperty.START_DAY_OF_MONTH);\n+        }\n+    }\n+\n+    private static void checkStartDayOfWeek(String val) throws DdlException {\n+        if (Strings.isNullOrEmpty(val)) {\n+            throw new DdlException(\"Invalid properties: \" + DynamicPartitionProperty.START_DAY_OF_WEEK);\n+        }\n+        try {\n+            int dayOfMonth = Integer.parseInt(val);", "originalCommit": "90faac2b361ab69034410d0dd0abf2136e657a6f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg1OTE5OQ==", "url": "https://github.com/apache/incubator-doris/pull/3679#discussion_r429859199", "bodyText": "OK", "author": "morningman", "createdAt": "2020-05-25T10:23:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTgwNTgzMA=="}], "type": "inlineReview", "revised_code": {"commit": "0d23693859c76cf0d195ed38da16288facacde3f", "chunk": "diff --git a/fe/src/main/java/org/apache/doris/common/util/DynamicPartitionUtil.java b/fe/src/main/java/org/apache/doris/common/util/DynamicPartitionUtil.java\nindex 24855a550..7e379d7e8 100644\n--- a/fe/src/main/java/org/apache/doris/common/util/DynamicPartitionUtil.java\n+++ b/fe/src/main/java/org/apache/doris/common/util/DynamicPartitionUtil.java\n\n@@ -137,8 +137,8 @@ public class DynamicPartitionUtil {\n             throw new DdlException(\"Invalid properties: \" + DynamicPartitionProperty.START_DAY_OF_WEEK);\n         }\n         try {\n-            int dayOfMonth = Integer.parseInt(val);\n-            if (dayOfMonth < 1 || dayOfMonth > 7) {\n+            int dayOfWeek= Integer.parseInt(val);\n+            if (dayOfWeek< 1 || dayOfWeek > 7) {\n                 throw new DdlException(DynamicPartitionProperty.START_DAY_OF_WEEK + \" should between 1 and 7\");\n             }\n         } catch (NumberFormatException e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTgwOTU0MQ==", "url": "https://github.com/apache/incubator-doris/pull/3679#discussion_r429809541", "bodyText": "you\u2018d better add Parentheses", "author": "wutiangan", "createdAt": "2020-05-25T08:40:54Z", "path": "fe/src/main/java/org/apache/doris/common/util/DynamicPartitionUtil.java", "diffHunk": "@@ -273,34 +321,110 @@ public static String getPartitionFormat(Column column) throws DdlException {\n         }\n     }\n \n-    public static String getFormattedPartitionName(String name, String timeUnit) {\n-        name = name.replace(\"-\", \"\").replace(\":\", \"\").replace(\" \", \"\");\n+    public static String getFormattedPartitionName(TimeZone tz, String formattedDateStr, String timeUnit) {\n+        formattedDateStr = formattedDateStr.replace(\"-\", \"\").replace(\":\", \"\").replace(\" \", \"\");\n         if (timeUnit.equalsIgnoreCase(TimeUnit.DAY.toString())) {\n-            return name.substring(0, 8);\n+            return formattedDateStr.substring(0, 8);\n         } else if (timeUnit.equalsIgnoreCase(TimeUnit.MONTH.toString())) {\n-            return name.substring(0, 6);\n+            return formattedDateStr.substring(0, 6);\n         } else {\n-            name = name.substring(0, 8);\n-            Calendar calendar = Calendar.getInstance();\n+            formattedDateStr = formattedDateStr.substring(0, 8);\n+            Calendar calendar = Calendar.getInstance(tz);\n             try {\n-                calendar.setTime(new SimpleDateFormat(\"yyyyMMdd\").parse(name));\n+                calendar.setTime(new SimpleDateFormat(\"yyyyMMdd\").parse(formattedDateStr));\n             } catch (ParseException e) {\n                 LOG.warn(\"Format dynamic partition name error. Error={}\", e.getMessage());\n-                return name;\n+                return formattedDateStr;\n+            }\n+            int weekOfYear = calendar.get(Calendar.WEEK_OF_YEAR);\n+            if (weekOfYear <= 1 && calendar.get(Calendar.MONTH) >= 11) {\n+                // eg: JDK think 2019-12-30 as the first week of year 2020, we need to handle this.\n+                // to make it as the 53rd week of year 2019.\n+                weekOfYear += 52;\n             }\n-            return String.format(\"%s_%02d\", calendar.get(Calendar.YEAR), calendar.get(Calendar.WEEK_OF_YEAR));\n+            return String.format(\"%s_%02d\", calendar.get(Calendar.YEAR), weekOfYear);\n         }\n     }\n \n-    public static String getPartitionRange(String timeUnit, int offset, Calendar calendar, String format) {\n+    // return the partition range date string formatted as yyyy-MM-dd[ HH:mm::ss]\n+    // TODO: support HOUR and YEAR\n+    public static String getPartitionRangeString(DynamicPartitionProperty property, Calendar current,\n+            int offset, String format) {\n+        String timeUnit = property.getTimeUnit();\n+        TimeZone tz = property.getTimeZone();\n         if (timeUnit.equalsIgnoreCase(TimeUnit.DAY.toString())) {\n-            calendar.add(Calendar.DAY_OF_MONTH, offset);\n+            return getPartitionRangeOfDay(current, offset, tz, format);\n         } else if (timeUnit.equalsIgnoreCase(TimeUnit.WEEK.toString())) {\n-            calendar.add(Calendar.WEEK_OF_MONTH, offset);\n-        } else {\n-            calendar.add(Calendar.MONTH, offset);\n+            return getPartitionRangeOfWeek(current, offset, property.getStartOfWeek(), tz, format);\n+        } else { // MONTH\n+            return getPartitionRangeOfMonth(current, offset, property.getStartOfMonth(), tz, format);\n+        }\n+    }\n+    \n+    /*\n+     * return formatted string of partition range in DAY granularity.\n+     * offset: The offset from the current day. 0 means current day, 1 means tomorrow, -1 means yesterday.\n+     * format: the format of the return date string.\n+     * \n+     * Eg:\n+     *  Today is 2020-05-24, offset = -1\n+     *  It will return 2020-05-23\n+     */\n+    private static String getPartitionRangeOfDay(Calendar current, int offset, TimeZone tz, String format) {\n+        current.add(Calendar.DATE, offset);\n+        return getFormattedTimeWithoutHourMinuteSecond(current, format);\n+    }\n+\n+    /*\n+     * return formatted string of partition range in WEEK granularity.\n+     * offset: The offset from the current week. 0 means current week, 1 means next week, -1 means last week.\n+     * startOf: Define the start day of each week. 1 means MONDAY, 7 means SUNDAY.\n+     * format: the format of the return date string.\n+     * \n+     * Eg:\n+     *  Today is 2020-05-24, offset = -1, startOf.dayOfWeek = 3\n+     *  It will return 2020-05-20  (Wednesday of last week)\n+     */\n+    private static String getPartitionRangeOfWeek(Calendar current, int offset, StartOfDate startOf, TimeZone tz,\n+            String format) {\n+        Preconditions.checkArgument(startOf.isStartOfWeek());\n+        // 1. get the offset week\n+        current.add(Calendar.WEEK_OF_YEAR, offset);\n+        // 2. get the date of `startOf` week\n+        int day = current.get(Calendar.DAY_OF_WEEK);\n+        // SUNDAY will return 1, we will set it to 7, and make MONDAY to 1, and so on\n+        day = day == 1 ? 7 : day - 1;", "originalCommit": "90faac2b361ab69034410d0dd0abf2136e657a6f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg1OTcwOA==", "url": "https://github.com/apache/incubator-doris/pull/3679#discussion_r429859708", "bodyText": "OK", "author": "morningman", "createdAt": "2020-05-25T10:24:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTgwOTU0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "0d23693859c76cf0d195ed38da16288facacde3f", "chunk": "diff --git a/fe/src/main/java/org/apache/doris/common/util/DynamicPartitionUtil.java b/fe/src/main/java/org/apache/doris/common/util/DynamicPartitionUtil.java\nindex 24855a550..7e379d7e8 100644\n--- a/fe/src/main/java/org/apache/doris/common/util/DynamicPartitionUtil.java\n+++ b/fe/src/main/java/org/apache/doris/common/util/DynamicPartitionUtil.java\n\n@@ -393,7 +393,7 @@ public class DynamicPartitionUtil {\n         // 2. get the date of `startOf` week\n         int day = current.get(Calendar.DAY_OF_WEEK);\n         // SUNDAY will return 1, we will set it to 7, and make MONDAY to 1, and so on\n-        day = day == 1 ? 7 : day - 1;\n+        day = (day == 1 ? 7 : day - 1);\n         current.add(Calendar.DATE, (startOf.dayOfWeek - day));\n         return getFormattedTimeWithoutHourMinuteSecond(current, format);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTgxMDM2Nw==", "url": "https://github.com/apache/incubator-doris/pull/3679#discussion_r429810367", "bodyText": "why tz is no use?", "author": "wutiangan", "createdAt": "2020-05-25T08:42:39Z", "path": "fe/src/main/java/org/apache/doris/common/util/DynamicPartitionUtil.java", "diffHunk": "@@ -273,34 +321,110 @@ public static String getPartitionFormat(Column column) throws DdlException {\n         }\n     }\n \n-    public static String getFormattedPartitionName(String name, String timeUnit) {\n-        name = name.replace(\"-\", \"\").replace(\":\", \"\").replace(\" \", \"\");\n+    public static String getFormattedPartitionName(TimeZone tz, String formattedDateStr, String timeUnit) {\n+        formattedDateStr = formattedDateStr.replace(\"-\", \"\").replace(\":\", \"\").replace(\" \", \"\");\n         if (timeUnit.equalsIgnoreCase(TimeUnit.DAY.toString())) {\n-            return name.substring(0, 8);\n+            return formattedDateStr.substring(0, 8);\n         } else if (timeUnit.equalsIgnoreCase(TimeUnit.MONTH.toString())) {\n-            return name.substring(0, 6);\n+            return formattedDateStr.substring(0, 6);\n         } else {\n-            name = name.substring(0, 8);\n-            Calendar calendar = Calendar.getInstance();\n+            formattedDateStr = formattedDateStr.substring(0, 8);\n+            Calendar calendar = Calendar.getInstance(tz);\n             try {\n-                calendar.setTime(new SimpleDateFormat(\"yyyyMMdd\").parse(name));\n+                calendar.setTime(new SimpleDateFormat(\"yyyyMMdd\").parse(formattedDateStr));\n             } catch (ParseException e) {\n                 LOG.warn(\"Format dynamic partition name error. Error={}\", e.getMessage());\n-                return name;\n+                return formattedDateStr;\n+            }\n+            int weekOfYear = calendar.get(Calendar.WEEK_OF_YEAR);\n+            if (weekOfYear <= 1 && calendar.get(Calendar.MONTH) >= 11) {\n+                // eg: JDK think 2019-12-30 as the first week of year 2020, we need to handle this.\n+                // to make it as the 53rd week of year 2019.\n+                weekOfYear += 52;\n             }\n-            return String.format(\"%s_%02d\", calendar.get(Calendar.YEAR), calendar.get(Calendar.WEEK_OF_YEAR));\n+            return String.format(\"%s_%02d\", calendar.get(Calendar.YEAR), weekOfYear);\n         }\n     }\n \n-    public static String getPartitionRange(String timeUnit, int offset, Calendar calendar, String format) {\n+    // return the partition range date string formatted as yyyy-MM-dd[ HH:mm::ss]\n+    // TODO: support HOUR and YEAR\n+    public static String getPartitionRangeString(DynamicPartitionProperty property, Calendar current,\n+            int offset, String format) {\n+        String timeUnit = property.getTimeUnit();\n+        TimeZone tz = property.getTimeZone();\n         if (timeUnit.equalsIgnoreCase(TimeUnit.DAY.toString())) {\n-            calendar.add(Calendar.DAY_OF_MONTH, offset);\n+            return getPartitionRangeOfDay(current, offset, tz, format);\n         } else if (timeUnit.equalsIgnoreCase(TimeUnit.WEEK.toString())) {\n-            calendar.add(Calendar.WEEK_OF_MONTH, offset);\n-        } else {\n-            calendar.add(Calendar.MONTH, offset);\n+            return getPartitionRangeOfWeek(current, offset, property.getStartOfWeek(), tz, format);\n+        } else { // MONTH\n+            return getPartitionRangeOfMonth(current, offset, property.getStartOfMonth(), tz, format);\n+        }\n+    }\n+    \n+    /*\n+     * return formatted string of partition range in DAY granularity.\n+     * offset: The offset from the current day. 0 means current day, 1 means tomorrow, -1 means yesterday.\n+     * format: the format of the return date string.\n+     * \n+     * Eg:\n+     *  Today is 2020-05-24, offset = -1\n+     *  It will return 2020-05-23\n+     */\n+    private static String getPartitionRangeOfDay(Calendar current, int offset, TimeZone tz, String format) {\n+        current.add(Calendar.DATE, offset);\n+        return getFormattedTimeWithoutHourMinuteSecond(current, format);\n+    }\n+\n+    /*\n+     * return formatted string of partition range in WEEK granularity.\n+     * offset: The offset from the current week. 0 means current week, 1 means next week, -1 means last week.\n+     * startOf: Define the start day of each week. 1 means MONDAY, 7 means SUNDAY.\n+     * format: the format of the return date string.\n+     * \n+     * Eg:\n+     *  Today is 2020-05-24, offset = -1, startOf.dayOfWeek = 3\n+     *  It will return 2020-05-20  (Wednesday of last week)\n+     */\n+    private static String getPartitionRangeOfWeek(Calendar current, int offset, StartOfDate startOf, TimeZone tz,\n+            String format) {\n+        Preconditions.checkArgument(startOf.isStartOfWeek());\n+        // 1. get the offset week\n+        current.add(Calendar.WEEK_OF_YEAR, offset);\n+        // 2. get the date of `startOf` week\n+        int day = current.get(Calendar.DAY_OF_WEEK);\n+        // SUNDAY will return 1, we will set it to 7, and make MONDAY to 1, and so on\n+        day = day == 1 ? 7 : day - 1;\n+        current.add(Calendar.DATE, (startOf.dayOfWeek - day));\n+        return getFormattedTimeWithoutHourMinuteSecond(current, format);\n+    }\n+\n+    /*\n+     * return formatted string of partition range in MONTH granularity.\n+     * offset: The offset from the current month. 0 means current month, 1 means next month, -1 means last month.\n+     * startOf: Define the start date of each month. 1 means start on the 1st of every month.\n+     * format: the format of the return date string.\n+     * \n+     * Eg:\n+     *  Today is 2020-05-24, offset = 1, startOf.month = 3\n+     *  It will return 2020-06-03 \n+     */\n+    private static String getPartitionRangeOfMonth(Calendar current, int offset, StartOfDate startOf, TimeZone tz,", "originalCommit": "90faac2b361ab69034410d0dd0abf2136e657a6f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg1MDM4NQ==", "url": "https://github.com/apache/incubator-doris/pull/3679#discussion_r429850385", "bodyText": "What about use LocalDateTime/ZonedDateTime to replace all Calendar? They are thread-safe, immutable and support timezone", "author": "WingsGo", "createdAt": "2020-05-25T10:03:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTgxMDM2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg1OTYzOA==", "url": "https://github.com/apache/incubator-doris/pull/3679#discussion_r429859638", "bodyText": "Maybe in next PR? This PR is already too big", "author": "morningman", "createdAt": "2020-05-25T10:24:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTgxMDM2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg4NTM4Nw==", "url": "https://github.com/apache/incubator-doris/pull/3679#discussion_r429885387", "bodyText": "OK, we can change it in next PR~", "author": "WingsGo", "createdAt": "2020-05-25T11:30:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTgxMDM2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "0d23693859c76cf0d195ed38da16288facacde3f", "chunk": "diff --git a/fe/src/main/java/org/apache/doris/common/util/DynamicPartitionUtil.java b/fe/src/main/java/org/apache/doris/common/util/DynamicPartitionUtil.java\nindex 24855a550..7e379d7e8 100644\n--- a/fe/src/main/java/org/apache/doris/common/util/DynamicPartitionUtil.java\n+++ b/fe/src/main/java/org/apache/doris/common/util/DynamicPartitionUtil.java\n\n@@ -393,7 +393,7 @@ public class DynamicPartitionUtil {\n         // 2. get the date of `startOf` week\n         int day = current.get(Calendar.DAY_OF_WEEK);\n         // SUNDAY will return 1, we will set it to 7, and make MONDAY to 1, and so on\n-        day = day == 1 ? 7 : day - 1;\n+        day = (day == 1 ? 7 : day - 1);\n         current.add(Calendar.DATE, (startOf.dayOfWeek - day));\n         return getFormattedTimeWithoutHourMinuteSecond(current, format);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg1MjQ4OQ==", "url": "https://github.com/apache/incubator-doris/pull/3679#discussion_r429852489", "bodyText": "Use LocalDateTime can avoid this trick", "author": "WingsGo", "createdAt": "2020-05-25T10:07:34Z", "path": "fe/src/main/java/org/apache/doris/common/util/DynamicPartitionUtil.java", "diffHunk": "@@ -273,34 +321,110 @@ public static String getPartitionFormat(Column column) throws DdlException {\n         }\n     }\n \n-    public static String getFormattedPartitionName(String name, String timeUnit) {\n-        name = name.replace(\"-\", \"\").replace(\":\", \"\").replace(\" \", \"\");\n+    public static String getFormattedPartitionName(TimeZone tz, String formattedDateStr, String timeUnit) {\n+        formattedDateStr = formattedDateStr.replace(\"-\", \"\").replace(\":\", \"\").replace(\" \", \"\");\n         if (timeUnit.equalsIgnoreCase(TimeUnit.DAY.toString())) {\n-            return name.substring(0, 8);\n+            return formattedDateStr.substring(0, 8);\n         } else if (timeUnit.equalsIgnoreCase(TimeUnit.MONTH.toString())) {\n-            return name.substring(0, 6);\n+            return formattedDateStr.substring(0, 6);\n         } else {\n-            name = name.substring(0, 8);\n-            Calendar calendar = Calendar.getInstance();\n+            formattedDateStr = formattedDateStr.substring(0, 8);\n+            Calendar calendar = Calendar.getInstance(tz);\n             try {\n-                calendar.setTime(new SimpleDateFormat(\"yyyyMMdd\").parse(name));\n+                calendar.setTime(new SimpleDateFormat(\"yyyyMMdd\").parse(formattedDateStr));\n             } catch (ParseException e) {\n                 LOG.warn(\"Format dynamic partition name error. Error={}\", e.getMessage());\n-                return name;\n+                return formattedDateStr;\n+            }\n+            int weekOfYear = calendar.get(Calendar.WEEK_OF_YEAR);\n+            if (weekOfYear <= 1 && calendar.get(Calendar.MONTH) >= 11) {\n+                // eg: JDK think 2019-12-30 as the first week of year 2020, we need to handle this.\n+                // to make it as the 53rd week of year 2019.\n+                weekOfYear += 52;\n             }\n-            return String.format(\"%s_%02d\", calendar.get(Calendar.YEAR), calendar.get(Calendar.WEEK_OF_YEAR));\n+            return String.format(\"%s_%02d\", calendar.get(Calendar.YEAR), weekOfYear);\n         }\n     }\n \n-    public static String getPartitionRange(String timeUnit, int offset, Calendar calendar, String format) {\n+    // return the partition range date string formatted as yyyy-MM-dd[ HH:mm::ss]\n+    // TODO: support HOUR and YEAR\n+    public static String getPartitionRangeString(DynamicPartitionProperty property, Calendar current,\n+            int offset, String format) {\n+        String timeUnit = property.getTimeUnit();\n+        TimeZone tz = property.getTimeZone();\n         if (timeUnit.equalsIgnoreCase(TimeUnit.DAY.toString())) {\n-            calendar.add(Calendar.DAY_OF_MONTH, offset);\n+            return getPartitionRangeOfDay(current, offset, tz, format);\n         } else if (timeUnit.equalsIgnoreCase(TimeUnit.WEEK.toString())) {\n-            calendar.add(Calendar.WEEK_OF_MONTH, offset);\n-        } else {\n-            calendar.add(Calendar.MONTH, offset);\n+            return getPartitionRangeOfWeek(current, offset, property.getStartOfWeek(), tz, format);\n+        } else { // MONTH\n+            return getPartitionRangeOfMonth(current, offset, property.getStartOfMonth(), tz, format);\n+        }\n+    }\n+    \n+    /*\n+     * return formatted string of partition range in DAY granularity.\n+     * offset: The offset from the current day. 0 means current day, 1 means tomorrow, -1 means yesterday.\n+     * format: the format of the return date string.\n+     * \n+     * Eg:\n+     *  Today is 2020-05-24, offset = -1\n+     *  It will return 2020-05-23\n+     */\n+    private static String getPartitionRangeOfDay(Calendar current, int offset, TimeZone tz, String format) {\n+        current.add(Calendar.DATE, offset);\n+        return getFormattedTimeWithoutHourMinuteSecond(current, format);\n+    }\n+\n+    /*\n+     * return formatted string of partition range in WEEK granularity.\n+     * offset: The offset from the current week. 0 means current week, 1 means next week, -1 means last week.\n+     * startOf: Define the start day of each week. 1 means MONDAY, 7 means SUNDAY.\n+     * format: the format of the return date string.\n+     * \n+     * Eg:\n+     *  Today is 2020-05-24, offset = -1, startOf.dayOfWeek = 3\n+     *  It will return 2020-05-20  (Wednesday of last week)\n+     */\n+    private static String getPartitionRangeOfWeek(Calendar current, int offset, StartOfDate startOf, TimeZone tz,\n+            String format) {\n+        Preconditions.checkArgument(startOf.isStartOfWeek());\n+        // 1. get the offset week\n+        current.add(Calendar.WEEK_OF_YEAR, offset);\n+        // 2. get the date of `startOf` week\n+        int day = current.get(Calendar.DAY_OF_WEEK);\n+        // SUNDAY will return 1, we will set it to 7, and make MONDAY to 1, and so on", "originalCommit": "90faac2b361ab69034410d0dd0abf2136e657a6f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0d23693859c76cf0d195ed38da16288facacde3f", "chunk": "diff --git a/fe/src/main/java/org/apache/doris/common/util/DynamicPartitionUtil.java b/fe/src/main/java/org/apache/doris/common/util/DynamicPartitionUtil.java\nindex 24855a550..7e379d7e8 100644\n--- a/fe/src/main/java/org/apache/doris/common/util/DynamicPartitionUtil.java\n+++ b/fe/src/main/java/org/apache/doris/common/util/DynamicPartitionUtil.java\n\n@@ -393,7 +393,7 @@ public class DynamicPartitionUtil {\n         // 2. get the date of `startOf` week\n         int day = current.get(Calendar.DAY_OF_WEEK);\n         // SUNDAY will return 1, we will set it to 7, and make MONDAY to 1, and so on\n-        day = day == 1 ? 7 : day - 1;\n+        day = (day == 1 ? 7 : day - 1);\n         current.add(Calendar.DATE, (startOf.dayOfWeek - day));\n         return getFormattedTimeWithoutHourMinuteSecond(current, format);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg1NDQzMw==", "url": "https://github.com/apache/incubator-doris/pull/3679#discussion_r429854433", "bodyText": "java doc comment is start with /** xx */ , maybe we can unify it?", "author": "WingsGo", "createdAt": "2020-05-25T10:12:02Z", "path": "fe/src/main/java/org/apache/doris/common/util/DynamicPartitionUtil.java", "diffHunk": "@@ -273,34 +321,110 @@ public static String getPartitionFormat(Column column) throws DdlException {\n         }\n     }\n \n-    public static String getFormattedPartitionName(String name, String timeUnit) {\n-        name = name.replace(\"-\", \"\").replace(\":\", \"\").replace(\" \", \"\");\n+    public static String getFormattedPartitionName(TimeZone tz, String formattedDateStr, String timeUnit) {\n+        formattedDateStr = formattedDateStr.replace(\"-\", \"\").replace(\":\", \"\").replace(\" \", \"\");\n         if (timeUnit.equalsIgnoreCase(TimeUnit.DAY.toString())) {\n-            return name.substring(0, 8);\n+            return formattedDateStr.substring(0, 8);\n         } else if (timeUnit.equalsIgnoreCase(TimeUnit.MONTH.toString())) {\n-            return name.substring(0, 6);\n+            return formattedDateStr.substring(0, 6);\n         } else {\n-            name = name.substring(0, 8);\n-            Calendar calendar = Calendar.getInstance();\n+            formattedDateStr = formattedDateStr.substring(0, 8);\n+            Calendar calendar = Calendar.getInstance(tz);\n             try {\n-                calendar.setTime(new SimpleDateFormat(\"yyyyMMdd\").parse(name));\n+                calendar.setTime(new SimpleDateFormat(\"yyyyMMdd\").parse(formattedDateStr));\n             } catch (ParseException e) {\n                 LOG.warn(\"Format dynamic partition name error. Error={}\", e.getMessage());\n-                return name;\n+                return formattedDateStr;\n+            }\n+            int weekOfYear = calendar.get(Calendar.WEEK_OF_YEAR);\n+            if (weekOfYear <= 1 && calendar.get(Calendar.MONTH) >= 11) {\n+                // eg: JDK think 2019-12-30 as the first week of year 2020, we need to handle this.\n+                // to make it as the 53rd week of year 2019.\n+                weekOfYear += 52;\n             }\n-            return String.format(\"%s_%02d\", calendar.get(Calendar.YEAR), calendar.get(Calendar.WEEK_OF_YEAR));\n+            return String.format(\"%s_%02d\", calendar.get(Calendar.YEAR), weekOfYear);\n         }\n     }\n \n-    public static String getPartitionRange(String timeUnit, int offset, Calendar calendar, String format) {\n+    // return the partition range date string formatted as yyyy-MM-dd[ HH:mm::ss]\n+    // TODO: support HOUR and YEAR\n+    public static String getPartitionRangeString(DynamicPartitionProperty property, Calendar current,\n+            int offset, String format) {\n+        String timeUnit = property.getTimeUnit();\n+        TimeZone tz = property.getTimeZone();\n         if (timeUnit.equalsIgnoreCase(TimeUnit.DAY.toString())) {\n-            calendar.add(Calendar.DAY_OF_MONTH, offset);\n+            return getPartitionRangeOfDay(current, offset, tz, format);\n         } else if (timeUnit.equalsIgnoreCase(TimeUnit.WEEK.toString())) {\n-            calendar.add(Calendar.WEEK_OF_MONTH, offset);\n-        } else {\n-            calendar.add(Calendar.MONTH, offset);\n+            return getPartitionRangeOfWeek(current, offset, property.getStartOfWeek(), tz, format);\n+        } else { // MONTH\n+            return getPartitionRangeOfMonth(current, offset, property.getStartOfMonth(), tz, format);\n+        }\n+    }\n+    \n+    /*", "originalCommit": "90faac2b361ab69034410d0dd0abf2136e657a6f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg2MDM3NQ==", "url": "https://github.com/apache/incubator-doris/pull/3679#discussion_r429860375", "bodyText": "Ok, I will change my IDE's setting. But there are lots of comment write like this. I can just make sure that newly added code can obey to rule.", "author": "morningman", "createdAt": "2020-05-25T10:26:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg1NDQzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg3ODMzOQ==", "url": "https://github.com/apache/incubator-doris/pull/3679#discussion_r429878339", "bodyText": "It looks good.", "author": "WingsGo", "createdAt": "2020-05-25T11:12:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg1NDQzMw=="}], "type": "inlineReview", "revised_code": {"commit": "0d23693859c76cf0d195ed38da16288facacde3f", "chunk": "diff --git a/fe/src/main/java/org/apache/doris/common/util/DynamicPartitionUtil.java b/fe/src/main/java/org/apache/doris/common/util/DynamicPartitionUtil.java\nindex 24855a550..7e379d7e8 100644\n--- a/fe/src/main/java/org/apache/doris/common/util/DynamicPartitionUtil.java\n+++ b/fe/src/main/java/org/apache/doris/common/util/DynamicPartitionUtil.java\n\n@@ -393,7 +393,7 @@ public class DynamicPartitionUtil {\n         // 2. get the date of `startOf` week\n         int day = current.get(Calendar.DAY_OF_WEEK);\n         // SUNDAY will return 1, we will set it to 7, and make MONDAY to 1, and so on\n-        day = day == 1 ? 7 : day - 1;\n+        day = (day == 1 ? 7 : day - 1);\n         current.add(Calendar.DATE, (startOf.dayOfWeek - day));\n         return getFormattedTimeWithoutHourMinuteSecond(current, format);\n     }\n"}}, {"oid": "0d23693859c76cf0d195ed38da16288facacde3f", "url": "https://github.com/apache/incubator-doris/commit/0d23693859c76cf0d195ed38da16288facacde3f", "message": "fix bug", "committedDate": "2020-05-25T10:26:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg2MjA1NQ==", "url": "https://github.com/apache/incubator-doris/pull/3679#discussion_r429862055", "bodyText": "maybe we should remove the warning, because dynamic_partition.start is default to Integer.MIN_VALUE, so we may got a AnalysisException like this Error=errCode = 2, detailMessage = date literal [5877471-07-26 00:00:00] is invalid", "author": "WingsGo", "createdAt": "2020-05-25T10:30:24Z", "path": "fe/src/main/java/org/apache/doris/clone/DynamicPartitionScheduler.java", "diffHunk": "@@ -210,7 +215,8 @@ public void createOrUpdateRuntimeInfo(String tableName, String key, String value\n             reservePartitionKeyRange = Range.closedOpen(lowerBound, upperBound);\n         } catch (AnalysisException e) {\n             // keys.size is always equal to column.size, cannot reach this exception\n-            LOG.warn(\"Keys size is not equal to column size. Error={}\", e.getMessage());\n+            LOG.warn(\"Keys size is not equal to column size. Error={}, db: {}, table: {}\", e.getMessage(),\n+                    db.getFullName(), olapTable.getName());", "originalCommit": "90faac2b361ab69034410d0dd0abf2136e657a6f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkzNzIyMQ==", "url": "https://github.com/apache/incubator-doris/pull/3679#discussion_r429937221", "bodyText": "OK, I will check this offset to make it reasonable.", "author": "morningman", "createdAt": "2020-05-25T13:33:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg2MjA1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk1MDQ1NQ==", "url": "https://github.com/apache/incubator-doris/pull/3679#discussion_r429950455", "bodyText": "I just make a check that if start offset == Integer.MIN_VALUE, it will not drop any partition.\nAnd for adding partition, I just leave it to user to make sure the value is reasonable.", "author": "morningman", "createdAt": "2020-05-25T14:00:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg2MjA1NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg5Njc3NQ==", "url": "https://github.com/apache/incubator-doris/pull/3679#discussion_r429896775", "bodyText": "same as following comment", "author": "WingsGo", "createdAt": "2020-05-25T11:59:02Z", "path": "fe/src/main/java/org/apache/doris/clone/DynamicPartitionScheduler.java", "diffHunk": "@@ -149,10 +148,11 @@ public void createOrUpdateRuntimeInfo(String tableName, String key, String value\n                 addPartitionKeyRange = Range.closedOpen(lowerBound, upperBound);\n             } catch (AnalysisException e) {\n                 // keys.size is always equal to column.size, cannot reach this exception\n-                LOG.warn(\"Keys size is not equal to column size. Error={}\", e.getMessage());\n+                LOG.warn(\"Keys size is not equal to column size. Error={}, db: {}, table: {}\", e.getMessage(),\n+                        db.getFullName(), olapTable.getName());", "originalCommit": "0d23693859c76cf0d195ed38da16288facacde3f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg5NzI3MQ==", "url": "https://github.com/apache/incubator-doris/pull/3679#discussion_r429897271", "bodyText": "The single column check work is done when create table, no need to check here", "author": "WingsGo", "createdAt": "2020-05-25T12:00:26Z", "path": "fe/src/main/java/org/apache/doris/clone/DynamicPartitionScheduler.java", "diffHunk": "@@ -275,19 +280,25 @@ private void executeDynamicPartition() {\n                 // scheduler time should be record even no partition added\n                 createOrUpdateRuntimeInfo(olapTable.getName(), LAST_SCHEDULER_TIME, TimeUtils.getCurrentFormatTime());\n                 RangePartitionInfo rangePartitionInfo = (RangePartitionInfo) olapTable.getPartitionInfo();\n+                if (rangePartitionInfo.getPartitionColumns().size() != 1) {\n+                    // currently only support partition with single column.\n+                    iterator.remove();\n+                    continue;\n+                }\n+", "originalCommit": "0d23693859c76cf0d195ed38da16288facacde3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkzNjYwNg==", "url": "https://github.com/apache/incubator-doris/pull/3679#discussion_r429936606", "bodyText": "It is just a self-defence~", "author": "morningman", "createdAt": "2020-05-25T13:31:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg5NzI3MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg5Nzk0Nw==", "url": "https://github.com/apache/incubator-doris/pull/3679#discussion_r429897947", "bodyText": "add a comment why less than 28, the reason in doc is for users?", "author": "WingsGo", "createdAt": "2020-05-25T12:01:52Z", "path": "fe/src/main/java/org/apache/doris/common/util/DynamicPartitionUtil.java", "diffHunk": "@@ -114,6 +118,34 @@ private static void checkEnable(String enable) throws DdlException {\n         }\n     }\n \n+    private static void checkStartDayOfMonth(String val) throws DdlException {\n+        if (Strings.isNullOrEmpty(val)) {\n+            throw new DdlException(\"Invalid properties: \" + DynamicPartitionProperty.START_DAY_OF_MONTH);\n+        }\n+        try {\n+            int dayOfMonth = Integer.parseInt(val);\n+            if (dayOfMonth < 1 || dayOfMonth > 28) {", "originalCommit": "0d23693859c76cf0d195ed38da16288facacde3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIyMDI3NQ==", "url": "https://github.com/apache/incubator-doris/pull/3679#discussion_r430220275", "bodyText": "I have already stated the reason in the document, I will add some comments here.", "author": "morningman", "createdAt": "2020-05-26T07:50:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg5Nzk0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "888d123d042a685afe7710591fc7e23dd2d557d6", "chunk": "diff --git a/fe/src/main/java/org/apache/doris/common/util/DynamicPartitionUtil.java b/fe/src/main/java/org/apache/doris/common/util/DynamicPartitionUtil.java\nindex 7e379d7e8..c39a33cae 100644\n--- a/fe/src/main/java/org/apache/doris/common/util/DynamicPartitionUtil.java\n+++ b/fe/src/main/java/org/apache/doris/common/util/DynamicPartitionUtil.java\n\n@@ -124,6 +124,8 @@ public class DynamicPartitionUtil {\n         }\n         try {\n             int dayOfMonth = Integer.parseInt(val);\n+            // only support from 1st to 28th, not allow 29th, 30th and 31th to avoid problems\n+            // caused by lunar year and lunar month\n             if (dayOfMonth < 1 || dayOfMonth > 28) {\n                 throw new DdlException(DynamicPartitionProperty.START_DAY_OF_MONTH + \" should between 1 and 28\");\n             }\n"}}, {"oid": "82a3cee61df8c51ddfdfba8a297c47974a7f322f", "url": "https://github.com/apache/incubator-doris/commit/82a3cee61df8c51ddfdfba8a297c47974a7f322f", "message": "fix by review", "committedDate": "2020-05-25T14:01:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyMjc2Mg==", "url": "https://github.com/apache/incubator-doris/pull/3679#discussion_r430122762", "bodyText": "why plus one? getNumberDaysOfMonth(2020, 1) will return 29, and the function name is confused", "author": "WingsGo", "createdAt": "2020-05-26T02:11:30Z", "path": "fe/src/main/java/org/apache/doris/common/util/TimeUtils.java", "diffHunk": "@@ -268,4 +269,11 @@ public static String checkTimeZoneValidAndStandardize(String value) throws DdlEx\n         }\n         throw new DdlException(\"Parse time zone \" + value + \" error\");\n     }\n+\n+    // return the number of days of give year.month\n+    public static int getNumberDaysOfMonth(int year, int month) {\n+        Calendar calendar = Calendar.getInstance();\n+        calendar.set(year, month + 1, 0);", "originalCommit": "82a3cee61df8c51ddfdfba8a297c47974a7f322f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIyMDYyMw==", "url": "https://github.com/apache/incubator-doris/pull/3679#discussion_r430220623", "bodyText": "This function is useless, i will remove it", "author": "morningman", "createdAt": "2020-05-26T07:50:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyMjc2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "888d123d042a685afe7710591fc7e23dd2d557d6", "chunk": "diff --git a/fe/src/main/java/org/apache/doris/common/util/TimeUtils.java b/fe/src/main/java/org/apache/doris/common/util/TimeUtils.java\nindex abbc1280e..f8c0c1db3 100644\n--- a/fe/src/main/java/org/apache/doris/common/util/TimeUtils.java\n+++ b/fe/src/main/java/org/apache/doris/common/util/TimeUtils.java\n\n@@ -269,11 +269,4 @@ public class TimeUtils {\n         }\n         throw new DdlException(\"Parse time zone \" + value + \" error\");\n     }\n-\n-    // return the number of days of give year.month\n-    public static int getNumberDaysOfMonth(int year, int month) {\n-        Calendar calendar = Calendar.getInstance();\n-        calendar.set(year, month + 1, 0);\n-        return calendar.get(Calendar.DAY_OF_MONTH);\n-    }\n }\n"}}, {"oid": "888d123d042a685afe7710591fc7e23dd2d557d6", "url": "https://github.com/apache/incubator-doris/commit/888d123d042a685afe7710591fc7e23dd2d557d6", "message": "fix by review", "committedDate": "2020-05-26T07:51:09Z", "type": "commit"}, {"oid": "2dc45ea5f0c6f421a04ac88361ef7c54bc91bf58", "url": "https://github.com/apache/incubator-doris/commit/2dc45ea5f0c6f421a04ac88361ef7c54bc91bf58", "message": "add transaction not found", "committedDate": "2020-05-27T08:09:11Z", "type": "commit"}]}