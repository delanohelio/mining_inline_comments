{"pr_number": 3418, "pr_title": "[Spark load] Add spark etl cluster and cluster manager", "pr_createdAt": "2020-04-28T17:40:38Z", "pr_url": "https://github.com/apache/incubator-doris/pull/3418", "timeline": [{"oid": "6791357fca0c2c647d34a9357df339b41324daa2", "url": "https://github.com/apache/incubator-doris/commit/6791357fca0c2c647d34a9357df339b41324daa2", "message": "Merge pull request #1 from apache/master\n\nmerge 0206", "committedDate": "2020-02-06T04:06:05Z", "type": "commit"}, {"oid": "612f47837d2785582910c4133027fc2dbb945eb2", "url": "https://github.com/apache/incubator-doris/commit/612f47837d2785582910c4133027fc2dbb945eb2", "message": "Merge branch 'master' of https://github.com/apache/incubator-doris", "committedDate": "2020-02-19T09:15:25Z", "type": "commit"}, {"oid": "caace61c55a726f08c4231765f0d58210d3fa2ac", "url": "https://github.com/apache/incubator-doris/commit/caace61c55a726f08c4231765f0d58210d3fa2ac", "message": "Merge branch 'master' of https://github.com/wyb/incubator-doris", "committedDate": "2020-04-28T14:52:23Z", "type": "commit"}, {"oid": "01bfd747d40a96785f4007850c6ed9595f1b9b48", "url": "https://github.com/apache/incubator-doris/commit/01bfd747d40a96785f4007850c6ed9595f1b9b48", "message": "Merge branch 'master' of https://github.com/wyb/incubator-doris", "committedDate": "2020-04-30T03:05:12Z", "type": "commit"}, {"oid": "3c5b2d2669108298e2ff47d8c545b3c54e53f431", "url": "https://github.com/apache/incubator-doris/commit/3c5b2d2669108298e2ff47d8c545b3c54e53f431", "message": "Fix update spark etl cluster bug", "committedDate": "2020-04-30T03:17:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIyMjgzMQ==", "url": "https://github.com/apache/incubator-doris/pull/3418#discussion_r426222831", "bodyText": "If there are properties which are not valid, better to throw exception to let users know", "author": "imay", "createdAt": "2020-05-17T06:24:05Z", "path": "fe/src/main/java/org/apache/doris/analysis/CreateResourceStmt.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.analysis;\n+\n+import org.apache.doris.catalog.Catalog;\n+import org.apache.doris.catalog.Resource.ResourceType;\n+import org.apache.doris.common.AnalysisException;\n+import org.apache.doris.common.ErrorCode;\n+import org.apache.doris.common.ErrorReport;\n+import org.apache.doris.common.FeNameFormat;\n+import org.apache.doris.common.UserException;\n+import org.apache.doris.common.util.PrintableMap;\n+import org.apache.doris.mysql.privilege.PrivPredicate;\n+import org.apache.doris.qe.ConnectContext;\n+\n+import java.util.Map;\n+\n+// CREATE [EXTERNAL] RESOURCE resource_name\n+// PROPERTIES (key1 = value1, ...)\n+public class CreateResourceStmt extends DdlStmt {\n+    private static final String TYPE = \"type\";\n+\n+    private final boolean isExternal;\n+    private final String resourceName;\n+    private final Map<String, String> properties;\n+\n+    public CreateResourceStmt(boolean isExternal, String resourceName, Map<String, String> properties) {\n+        this.isExternal = isExternal;\n+        this.resourceName = resourceName;\n+        this.properties = properties;\n+    }\n+\n+    public String getResourceName() {\n+        return resourceName;\n+    }\n+\n+    public Map<String, String> getProperties() {\n+        return properties;\n+    }\n+\n+    public ResourceType getResourceType() {\n+        return ResourceType.fromString(properties.get(TYPE));\n+    }\n+\n+    @Override\n+    public void analyze(Analyzer analyzer) throws UserException {\n+        super.analyze(analyzer);\n+\n+        // check auth\n+        if (!Catalog.getCurrentCatalog().getAuth().checkGlobalPriv(ConnectContext.get(), PrivPredicate.ADMIN)) {\n+            ErrorReport.reportAnalysisException(ErrorCode.ERR_SPECIFIC_ACCESS_DENIED_ERROR, \"ADMIN\");\n+        }\n+\n+        // check name\n+        FeNameFormat.checkResourceName(resourceName);\n+\n+        // check type in properties\n+        if (properties == null || properties.isEmpty()) {\n+            throw new AnalysisException(\"Resource properties can't be null\");\n+        }\n+        String type = properties.get(TYPE);\n+        if (type == null) {\n+            throw new AnalysisException(\"Resource type can't be null\");\n+        }\n+        ResourceType resourceType = ResourceType.fromString(type);\n+        if (resourceType == null) {\n+            throw new AnalysisException(\"Unsupported resource type: \" + type);\n+        }\n+        if (resourceType == ResourceType.SPARK && !isExternal) {\n+            throw new AnalysisException(\"Spark is external resource\");\n+        }", "originalCommit": "26facbf1f12221b2603ace89c8bba8cf824fba78", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM1ODMzMA==", "url": "https://github.com/apache/incubator-doris/pull/3418#discussion_r427358330", "bodyText": "already check in SparkResource", "author": "wyb", "createdAt": "2020-05-19T14:42:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIyMjgzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "acebbafa85e1de6d0ab27384ffa27e2224e1f0e1", "chunk": "diff --git a/fe/src/main/java/org/apache/doris/analysis/CreateResourceStmt.java b/fe/src/main/java/org/apache/doris/analysis/CreateResourceStmt.java\ndeleted file mode 100644\nindex 3cf968771..000000000\n--- a/fe/src/main/java/org/apache/doris/analysis/CreateResourceStmt.java\n+++ /dev/null\n\n@@ -1,100 +0,0 @@\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-\n-package org.apache.doris.analysis;\n-\n-import org.apache.doris.catalog.Catalog;\n-import org.apache.doris.catalog.Resource.ResourceType;\n-import org.apache.doris.common.AnalysisException;\n-import org.apache.doris.common.ErrorCode;\n-import org.apache.doris.common.ErrorReport;\n-import org.apache.doris.common.FeNameFormat;\n-import org.apache.doris.common.UserException;\n-import org.apache.doris.common.util.PrintableMap;\n-import org.apache.doris.mysql.privilege.PrivPredicate;\n-import org.apache.doris.qe.ConnectContext;\n-\n-import java.util.Map;\n-\n-// CREATE [EXTERNAL] RESOURCE resource_name\n-// PROPERTIES (key1 = value1, ...)\n-public class CreateResourceStmt extends DdlStmt {\n-    private static final String TYPE = \"type\";\n-\n-    private final boolean isExternal;\n-    private final String resourceName;\n-    private final Map<String, String> properties;\n-\n-    public CreateResourceStmt(boolean isExternal, String resourceName, Map<String, String> properties) {\n-        this.isExternal = isExternal;\n-        this.resourceName = resourceName;\n-        this.properties = properties;\n-    }\n-\n-    public String getResourceName() {\n-        return resourceName;\n-    }\n-\n-    public Map<String, String> getProperties() {\n-        return properties;\n-    }\n-\n-    public ResourceType getResourceType() {\n-        return ResourceType.fromString(properties.get(TYPE));\n-    }\n-\n-    @Override\n-    public void analyze(Analyzer analyzer) throws UserException {\n-        super.analyze(analyzer);\n-\n-        // check auth\n-        if (!Catalog.getCurrentCatalog().getAuth().checkGlobalPriv(ConnectContext.get(), PrivPredicate.ADMIN)) {\n-            ErrorReport.reportAnalysisException(ErrorCode.ERR_SPECIFIC_ACCESS_DENIED_ERROR, \"ADMIN\");\n-        }\n-\n-        // check name\n-        FeNameFormat.checkResourceName(resourceName);\n-\n-        // check type in properties\n-        if (properties == null || properties.isEmpty()) {\n-            throw new AnalysisException(\"Resource properties can't be null\");\n-        }\n-        String type = properties.get(TYPE);\n-        if (type == null) {\n-            throw new AnalysisException(\"Resource type can't be null\");\n-        }\n-        ResourceType resourceType = ResourceType.fromString(type);\n-        if (resourceType == null) {\n-            throw new AnalysisException(\"Unsupported resource type: \" + type);\n-        }\n-        if (resourceType == ResourceType.SPARK && !isExternal) {\n-            throw new AnalysisException(\"Spark is external resource\");\n-        }\n-    }\n-\n-    @Override\n-    public String toSql() {\n-        StringBuilder sb = new StringBuilder();\n-        sb.append(\"CREATE \");\n-        if (isExternal) {\n-            sb.append(\"EXTERNAL \");\n-        }\n-        sb.append(\"RESOURCE '\").append(resourceName).append(\"' \");\n-        sb.append(\"PROPERTIES(\").append(new PrintableMap<>(properties, \" = \", true, false)).append(\")\");\n-        return sb.toString();\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIyMjkxOA==", "url": "https://github.com/apache/incubator-doris/pull/3418#discussion_r426222918", "bodyText": "If the resource type has been resolved, better to save it as a class member.", "author": "imay", "createdAt": "2020-05-17T06:25:00Z", "path": "fe/src/main/java/org/apache/doris/analysis/CreateResourceStmt.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.analysis;\n+\n+import org.apache.doris.catalog.Catalog;\n+import org.apache.doris.catalog.Resource.ResourceType;\n+import org.apache.doris.common.AnalysisException;\n+import org.apache.doris.common.ErrorCode;\n+import org.apache.doris.common.ErrorReport;\n+import org.apache.doris.common.FeNameFormat;\n+import org.apache.doris.common.UserException;\n+import org.apache.doris.common.util.PrintableMap;\n+import org.apache.doris.mysql.privilege.PrivPredicate;\n+import org.apache.doris.qe.ConnectContext;\n+\n+import java.util.Map;\n+\n+// CREATE [EXTERNAL] RESOURCE resource_name\n+// PROPERTIES (key1 = value1, ...)\n+public class CreateResourceStmt extends DdlStmt {\n+    private static final String TYPE = \"type\";\n+\n+    private final boolean isExternal;\n+    private final String resourceName;\n+    private final Map<String, String> properties;\n+\n+    public CreateResourceStmt(boolean isExternal, String resourceName, Map<String, String> properties) {\n+        this.isExternal = isExternal;\n+        this.resourceName = resourceName;\n+        this.properties = properties;\n+    }\n+\n+    public String getResourceName() {\n+        return resourceName;\n+    }\n+\n+    public Map<String, String> getProperties() {\n+        return properties;\n+    }\n+\n+    public ResourceType getResourceType() {\n+        return ResourceType.fromString(properties.get(TYPE));\n+    }\n+\n+    @Override\n+    public void analyze(Analyzer analyzer) throws UserException {\n+        super.analyze(analyzer);\n+\n+        // check auth\n+        if (!Catalog.getCurrentCatalog().getAuth().checkGlobalPriv(ConnectContext.get(), PrivPredicate.ADMIN)) {\n+            ErrorReport.reportAnalysisException(ErrorCode.ERR_SPECIFIC_ACCESS_DENIED_ERROR, \"ADMIN\");\n+        }\n+\n+        // check name\n+        FeNameFormat.checkResourceName(resourceName);\n+\n+        // check type in properties\n+        if (properties == null || properties.isEmpty()) {\n+            throw new AnalysisException(\"Resource properties can't be null\");\n+        }\n+        String type = properties.get(TYPE);\n+        if (type == null) {\n+            throw new AnalysisException(\"Resource type can't be null\");\n+        }\n+        ResourceType resourceType = ResourceType.fromString(type);", "originalCommit": "26facbf1f12221b2603ace89c8bba8cf824fba78", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "acebbafa85e1de6d0ab27384ffa27e2224e1f0e1", "chunk": "diff --git a/fe/src/main/java/org/apache/doris/analysis/CreateResourceStmt.java b/fe/src/main/java/org/apache/doris/analysis/CreateResourceStmt.java\ndeleted file mode 100644\nindex 3cf968771..000000000\n--- a/fe/src/main/java/org/apache/doris/analysis/CreateResourceStmt.java\n+++ /dev/null\n\n@@ -1,100 +0,0 @@\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-\n-package org.apache.doris.analysis;\n-\n-import org.apache.doris.catalog.Catalog;\n-import org.apache.doris.catalog.Resource.ResourceType;\n-import org.apache.doris.common.AnalysisException;\n-import org.apache.doris.common.ErrorCode;\n-import org.apache.doris.common.ErrorReport;\n-import org.apache.doris.common.FeNameFormat;\n-import org.apache.doris.common.UserException;\n-import org.apache.doris.common.util.PrintableMap;\n-import org.apache.doris.mysql.privilege.PrivPredicate;\n-import org.apache.doris.qe.ConnectContext;\n-\n-import java.util.Map;\n-\n-// CREATE [EXTERNAL] RESOURCE resource_name\n-// PROPERTIES (key1 = value1, ...)\n-public class CreateResourceStmt extends DdlStmt {\n-    private static final String TYPE = \"type\";\n-\n-    private final boolean isExternal;\n-    private final String resourceName;\n-    private final Map<String, String> properties;\n-\n-    public CreateResourceStmt(boolean isExternal, String resourceName, Map<String, String> properties) {\n-        this.isExternal = isExternal;\n-        this.resourceName = resourceName;\n-        this.properties = properties;\n-    }\n-\n-    public String getResourceName() {\n-        return resourceName;\n-    }\n-\n-    public Map<String, String> getProperties() {\n-        return properties;\n-    }\n-\n-    public ResourceType getResourceType() {\n-        return ResourceType.fromString(properties.get(TYPE));\n-    }\n-\n-    @Override\n-    public void analyze(Analyzer analyzer) throws UserException {\n-        super.analyze(analyzer);\n-\n-        // check auth\n-        if (!Catalog.getCurrentCatalog().getAuth().checkGlobalPriv(ConnectContext.get(), PrivPredicate.ADMIN)) {\n-            ErrorReport.reportAnalysisException(ErrorCode.ERR_SPECIFIC_ACCESS_DENIED_ERROR, \"ADMIN\");\n-        }\n-\n-        // check name\n-        FeNameFormat.checkResourceName(resourceName);\n-\n-        // check type in properties\n-        if (properties == null || properties.isEmpty()) {\n-            throw new AnalysisException(\"Resource properties can't be null\");\n-        }\n-        String type = properties.get(TYPE);\n-        if (type == null) {\n-            throw new AnalysisException(\"Resource type can't be null\");\n-        }\n-        ResourceType resourceType = ResourceType.fromString(type);\n-        if (resourceType == null) {\n-            throw new AnalysisException(\"Unsupported resource type: \" + type);\n-        }\n-        if (resourceType == ResourceType.SPARK && !isExternal) {\n-            throw new AnalysisException(\"Spark is external resource\");\n-        }\n-    }\n-\n-    @Override\n-    public String toSql() {\n-        StringBuilder sb = new StringBuilder();\n-        sb.append(\"CREATE \");\n-        if (isExternal) {\n-            sb.append(\"EXTERNAL \");\n-        }\n-        sb.append(\"RESOURCE '\").append(resourceName).append(\"' \");\n-        sb.append(\"PROPERTIES(\").append(new PrintableMap<>(properties, \" = \", true, false)).append(\")\");\n-        return sb.toString();\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIyMzYwMw==", "url": "https://github.com/apache/incubator-doris/pull/3418#discussion_r426223603", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    SPARK;\n          \n          \n            \n                    UNKNOWN,\n          \n          \n            \n                    SPARK;", "author": "imay", "createdAt": "2020-05-17T06:33:29Z", "path": "fe/src/main/java/org/apache/doris/catalog/Resource.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.catalog;\n+\n+import org.apache.doris.analysis.CreateResourceStmt;\n+import org.apache.doris.common.DdlException;\n+import org.apache.doris.common.io.Text;\n+import org.apache.doris.common.io.Writable;\n+import org.apache.doris.common.proc.BaseProcResult;\n+import org.apache.doris.persist.gson.GsonUtils;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+import java.io.DataInput;\n+import java.io.DataOutput;\n+import java.io.IOException;\n+import java.util.Map;\n+\n+public abstract class Resource implements Writable {\n+    public enum ResourceType {\n+        SPARK;", "originalCommit": "26facbf1f12221b2603ace89c8bba8cf824fba78", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "acebbafa85e1de6d0ab27384ffa27e2224e1f0e1", "chunk": "diff --git a/fe/src/main/java/org/apache/doris/catalog/Resource.java b/fe/src/main/java/org/apache/doris/catalog/Resource.java\ndeleted file mode 100644\nindex aa2b00514..000000000\n--- a/fe/src/main/java/org/apache/doris/catalog/Resource.java\n+++ /dev/null\n\n@@ -1,100 +0,0 @@\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-\n-package org.apache.doris.catalog;\n-\n-import org.apache.doris.analysis.CreateResourceStmt;\n-import org.apache.doris.common.DdlException;\n-import org.apache.doris.common.io.Text;\n-import org.apache.doris.common.io.Writable;\n-import org.apache.doris.common.proc.BaseProcResult;\n-import org.apache.doris.persist.gson.GsonUtils;\n-\n-import com.google.gson.annotations.SerializedName;\n-\n-import java.io.DataInput;\n-import java.io.DataOutput;\n-import java.io.IOException;\n-import java.util.Map;\n-\n-public abstract class Resource implements Writable {\n-    public enum ResourceType {\n-        SPARK;\n-\n-        public static ResourceType fromString(String resourceType) {\n-            for (ResourceType type : ResourceType.values()) {\n-                if (type.name().equalsIgnoreCase(resourceType)) {\n-                    return type;\n-                }\n-            }\n-            return null;\n-        }\n-    }\n-\n-    @SerializedName(value = \"name\")\n-    protected String name;\n-    @SerializedName(value = \"type\")\n-    protected ResourceType type;\n-\n-    public Resource(String name, ResourceType type) {\n-        this.name = name;\n-        this.type = type;\n-    }\n-\n-    public static Resource fromStmt(CreateResourceStmt stmt) throws DdlException {\n-        Resource resource = null;\n-        ResourceType type = stmt.getResourceType();\n-        switch (type) {\n-            case SPARK:\n-                resource = new SparkResource(stmt.getResourceName());\n-                break;\n-            default:\n-                throw new DdlException(\"Only support Spark resource.\");\n-        }\n-\n-        resource.setProperties(stmt.getProperties());\n-        return resource;\n-    }\n-\n-    public String getName() {\n-        return name;\n-    }\n-\n-    public ResourceType getType() {\n-        return type;\n-    }\n-\n-    protected abstract void setProperties(Map<String, String> properties) throws DdlException;\n-    protected abstract void getProcNodeData(BaseProcResult result);\n-\n-    @Override\n-    public String toString() {\n-        return GsonUtils.GSON.toJson(this);\n-    }\n-\n-    @Override\n-    public void write(DataOutput out) throws IOException {\n-        String json = GsonUtils.GSON.toJson(this);\n-        Text.writeString(out, json);\n-    }\n-\n-    public static Resource read(DataInput in) throws IOException {\n-        String json = Text.readString(in);\n-        return GsonUtils.GSON.fromJson(json, Resource.class);\n-    }\n-}\n-\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIyMzYyMw==", "url": "https://github.com/apache/incubator-doris/pull/3418#discussion_r426223623", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        return null;\n          \n          \n            \n                        return UNKNOWN;", "author": "imay", "createdAt": "2020-05-17T06:33:59Z", "path": "fe/src/main/java/org/apache/doris/catalog/Resource.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.catalog;\n+\n+import org.apache.doris.analysis.CreateResourceStmt;\n+import org.apache.doris.common.DdlException;\n+import org.apache.doris.common.io.Text;\n+import org.apache.doris.common.io.Writable;\n+import org.apache.doris.common.proc.BaseProcResult;\n+import org.apache.doris.persist.gson.GsonUtils;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+import java.io.DataInput;\n+import java.io.DataOutput;\n+import java.io.IOException;\n+import java.util.Map;\n+\n+public abstract class Resource implements Writable {\n+    public enum ResourceType {\n+        SPARK;\n+\n+        public static ResourceType fromString(String resourceType) {\n+            for (ResourceType type : ResourceType.values()) {\n+                if (type.name().equalsIgnoreCase(resourceType)) {\n+                    return type;\n+                }\n+            }\n+            return null;", "originalCommit": "26facbf1f12221b2603ace89c8bba8cf824fba78", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "acebbafa85e1de6d0ab27384ffa27e2224e1f0e1", "chunk": "diff --git a/fe/src/main/java/org/apache/doris/catalog/Resource.java b/fe/src/main/java/org/apache/doris/catalog/Resource.java\ndeleted file mode 100644\nindex aa2b00514..000000000\n--- a/fe/src/main/java/org/apache/doris/catalog/Resource.java\n+++ /dev/null\n\n@@ -1,100 +0,0 @@\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-\n-package org.apache.doris.catalog;\n-\n-import org.apache.doris.analysis.CreateResourceStmt;\n-import org.apache.doris.common.DdlException;\n-import org.apache.doris.common.io.Text;\n-import org.apache.doris.common.io.Writable;\n-import org.apache.doris.common.proc.BaseProcResult;\n-import org.apache.doris.persist.gson.GsonUtils;\n-\n-import com.google.gson.annotations.SerializedName;\n-\n-import java.io.DataInput;\n-import java.io.DataOutput;\n-import java.io.IOException;\n-import java.util.Map;\n-\n-public abstract class Resource implements Writable {\n-    public enum ResourceType {\n-        SPARK;\n-\n-        public static ResourceType fromString(String resourceType) {\n-            for (ResourceType type : ResourceType.values()) {\n-                if (type.name().equalsIgnoreCase(resourceType)) {\n-                    return type;\n-                }\n-            }\n-            return null;\n-        }\n-    }\n-\n-    @SerializedName(value = \"name\")\n-    protected String name;\n-    @SerializedName(value = \"type\")\n-    protected ResourceType type;\n-\n-    public Resource(String name, ResourceType type) {\n-        this.name = name;\n-        this.type = type;\n-    }\n-\n-    public static Resource fromStmt(CreateResourceStmt stmt) throws DdlException {\n-        Resource resource = null;\n-        ResourceType type = stmt.getResourceType();\n-        switch (type) {\n-            case SPARK:\n-                resource = new SparkResource(stmt.getResourceName());\n-                break;\n-            default:\n-                throw new DdlException(\"Only support Spark resource.\");\n-        }\n-\n-        resource.setProperties(stmt.getProperties());\n-        return resource;\n-    }\n-\n-    public String getName() {\n-        return name;\n-    }\n-\n-    public ResourceType getType() {\n-        return type;\n-    }\n-\n-    protected abstract void setProperties(Map<String, String> properties) throws DdlException;\n-    protected abstract void getProcNodeData(BaseProcResult result);\n-\n-    @Override\n-    public String toString() {\n-        return GsonUtils.GSON.toJson(this);\n-    }\n-\n-    @Override\n-    public void write(DataOutput out) throws IOException {\n-        String json = GsonUtils.GSON.toJson(this);\n-        Text.writeString(out, json);\n-    }\n-\n-    public static Resource read(DataInput in) throws IOException {\n-        String json = Text.readString(in);\n-        return GsonUtils.GSON.fromJson(json, Resource.class);\n-    }\n-}\n-\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIyNDMyMQ==", "url": "https://github.com/apache/incubator-doris/pull/3418#discussion_r426224321", "bodyText": "should give comments for these functions to help others know how to implement them", "author": "imay", "createdAt": "2020-05-17T06:42:36Z", "path": "fe/src/main/java/org/apache/doris/catalog/Resource.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.catalog;\n+\n+import org.apache.doris.analysis.CreateResourceStmt;\n+import org.apache.doris.common.DdlException;\n+import org.apache.doris.common.io.Text;\n+import org.apache.doris.common.io.Writable;\n+import org.apache.doris.common.proc.BaseProcResult;\n+import org.apache.doris.persist.gson.GsonUtils;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+import java.io.DataInput;\n+import java.io.DataOutput;\n+import java.io.IOException;\n+import java.util.Map;\n+\n+public abstract class Resource implements Writable {\n+    public enum ResourceType {\n+        SPARK;\n+\n+        public static ResourceType fromString(String resourceType) {\n+            for (ResourceType type : ResourceType.values()) {\n+                if (type.name().equalsIgnoreCase(resourceType)) {\n+                    return type;\n+                }\n+            }\n+            return null;\n+        }\n+    }\n+\n+    @SerializedName(value = \"name\")\n+    protected String name;\n+    @SerializedName(value = \"type\")\n+    protected ResourceType type;\n+\n+    public Resource(String name, ResourceType type) {\n+        this.name = name;\n+        this.type = type;\n+    }\n+\n+    public static Resource fromStmt(CreateResourceStmt stmt) throws DdlException {\n+        Resource resource = null;\n+        ResourceType type = stmt.getResourceType();\n+        switch (type) {\n+            case SPARK:\n+                resource = new SparkResource(stmt.getResourceName());\n+                break;\n+            default:\n+                throw new DdlException(\"Only support Spark resource.\");\n+        }\n+\n+        resource.setProperties(stmt.getProperties());\n+        return resource;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public ResourceType getType() {\n+        return type;\n+    }\n+\n+    protected abstract void setProperties(Map<String, String> properties) throws DdlException;\n+    protected abstract void getProcNodeData(BaseProcResult result);", "originalCommit": "26facbf1f12221b2603ace89c8bba8cf824fba78", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "acebbafa85e1de6d0ab27384ffa27e2224e1f0e1", "chunk": "diff --git a/fe/src/main/java/org/apache/doris/catalog/Resource.java b/fe/src/main/java/org/apache/doris/catalog/Resource.java\ndeleted file mode 100644\nindex aa2b00514..000000000\n--- a/fe/src/main/java/org/apache/doris/catalog/Resource.java\n+++ /dev/null\n\n@@ -1,100 +0,0 @@\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-\n-package org.apache.doris.catalog;\n-\n-import org.apache.doris.analysis.CreateResourceStmt;\n-import org.apache.doris.common.DdlException;\n-import org.apache.doris.common.io.Text;\n-import org.apache.doris.common.io.Writable;\n-import org.apache.doris.common.proc.BaseProcResult;\n-import org.apache.doris.persist.gson.GsonUtils;\n-\n-import com.google.gson.annotations.SerializedName;\n-\n-import java.io.DataInput;\n-import java.io.DataOutput;\n-import java.io.IOException;\n-import java.util.Map;\n-\n-public abstract class Resource implements Writable {\n-    public enum ResourceType {\n-        SPARK;\n-\n-        public static ResourceType fromString(String resourceType) {\n-            for (ResourceType type : ResourceType.values()) {\n-                if (type.name().equalsIgnoreCase(resourceType)) {\n-                    return type;\n-                }\n-            }\n-            return null;\n-        }\n-    }\n-\n-    @SerializedName(value = \"name\")\n-    protected String name;\n-    @SerializedName(value = \"type\")\n-    protected ResourceType type;\n-\n-    public Resource(String name, ResourceType type) {\n-        this.name = name;\n-        this.type = type;\n-    }\n-\n-    public static Resource fromStmt(CreateResourceStmt stmt) throws DdlException {\n-        Resource resource = null;\n-        ResourceType type = stmt.getResourceType();\n-        switch (type) {\n-            case SPARK:\n-                resource = new SparkResource(stmt.getResourceName());\n-                break;\n-            default:\n-                throw new DdlException(\"Only support Spark resource.\");\n-        }\n-\n-        resource.setProperties(stmt.getProperties());\n-        return resource;\n-    }\n-\n-    public String getName() {\n-        return name;\n-    }\n-\n-    public ResourceType getType() {\n-        return type;\n-    }\n-\n-    protected abstract void setProperties(Map<String, String> properties) throws DdlException;\n-    protected abstract void getProcNodeData(BaseProcResult result);\n-\n-    @Override\n-    public String toString() {\n-        return GsonUtils.GSON.toJson(this);\n-    }\n-\n-    @Override\n-    public void write(DataOutput out) throws IOException {\n-        String json = GsonUtils.GSON.toJson(this);\n-        Text.writeString(out, json);\n-    }\n-\n-    public static Resource read(DataInput in) throws IOException {\n-        String json = Text.readString(in);\n-        return GsonUtils.GSON.fromJson(json, Resource.class);\n-    }\n-}\n-\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM2MzYwOQ==", "url": "https://github.com/apache/incubator-doris/pull/3418#discussion_r427363609", "bodyText": "Enum class has a method valueOf(String), which is same as this fromString()", "author": "morningman", "createdAt": "2020-05-19T14:49:13Z", "path": "fe/src/main/java/org/apache/doris/catalog/Resource.java", "diffHunk": "@@ -0,0 +1,110 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.catalog;\n+\n+import org.apache.doris.analysis.CreateResourceStmt;\n+import org.apache.doris.common.DdlException;\n+import org.apache.doris.common.io.Text;\n+import org.apache.doris.common.io.Writable;\n+import org.apache.doris.common.proc.BaseProcResult;\n+import org.apache.doris.persist.gson.GsonUtils;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+import java.io.DataInput;\n+import java.io.DataOutput;\n+import java.io.IOException;\n+import java.util.Map;\n+\n+public abstract class Resource implements Writable {\n+    public enum ResourceType {\n+        UNKNOWN,\n+        SPARK;\n+\n+        public static ResourceType fromString(String resourceType) {", "originalCommit": "6b59bc0cd9e4823a579d19133e50753db44c001b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEyOTAwOA==", "url": "https://github.com/apache/incubator-doris/pull/3418#discussion_r429129008", "bodyText": "CaseInsensitive in fromString function and return UNKNOWN if resourceType does not exist", "author": "wyb", "createdAt": "2020-05-22T09:01:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM2MzYwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "acebbafa85e1de6d0ab27384ffa27e2224e1f0e1", "chunk": "diff --git a/fe/src/main/java/org/apache/doris/catalog/Resource.java b/fe/src/main/java/org/apache/doris/catalog/Resource.java\ndeleted file mode 100644\nindex e140b9ff1..000000000\n--- a/fe/src/main/java/org/apache/doris/catalog/Resource.java\n+++ /dev/null\n\n@@ -1,110 +0,0 @@\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-\n-package org.apache.doris.catalog;\n-\n-import org.apache.doris.analysis.CreateResourceStmt;\n-import org.apache.doris.common.DdlException;\n-import org.apache.doris.common.io.Text;\n-import org.apache.doris.common.io.Writable;\n-import org.apache.doris.common.proc.BaseProcResult;\n-import org.apache.doris.persist.gson.GsonUtils;\n-\n-import com.google.gson.annotations.SerializedName;\n-\n-import java.io.DataInput;\n-import java.io.DataOutput;\n-import java.io.IOException;\n-import java.util.Map;\n-\n-public abstract class Resource implements Writable {\n-    public enum ResourceType {\n-        UNKNOWN,\n-        SPARK;\n-\n-        public static ResourceType fromString(String resourceType) {\n-            for (ResourceType type : ResourceType.values()) {\n-                if (type.name().equalsIgnoreCase(resourceType)) {\n-                    return type;\n-                }\n-            }\n-            return UNKNOWN;\n-        }\n-    }\n-\n-    @SerializedName(value = \"name\")\n-    protected String name;\n-    @SerializedName(value = \"type\")\n-    protected ResourceType type;\n-\n-    public Resource(String name, ResourceType type) {\n-        this.name = name;\n-        this.type = type;\n-    }\n-\n-    public static Resource fromStmt(CreateResourceStmt stmt) throws DdlException {\n-        Resource resource = null;\n-        ResourceType type = stmt.getResourceType();\n-        switch (type) {\n-            case SPARK:\n-                resource = new SparkResource(stmt.getResourceName());\n-                break;\n-            default:\n-                throw new DdlException(\"Only support Spark resource.\");\n-        }\n-\n-        resource.setProperties(stmt.getProperties());\n-        return resource;\n-    }\n-\n-    public String getName() {\n-        return name;\n-    }\n-\n-    public ResourceType getType() {\n-        return type;\n-    }\n-\n-    /**\n-     * Set and check the properties in child resources\n-     */\n-    protected abstract void setProperties(Map<String, String> properties) throws DdlException;\n-\n-    /**\n-     * Fill BaseProcResult with different properties in child resources\n-     * ResourceMgr.RESOURCE_PROC_NODE_TITLE_NAMES format:\n-     * | Name | ResourceType | Key | Value |\n-     */\n-    protected abstract void getProcNodeData(BaseProcResult result);\n-\n-    @Override\n-    public String toString() {\n-        return GsonUtils.GSON.toJson(this);\n-    }\n-\n-    @Override\n-    public void write(DataOutput out) throws IOException {\n-        String json = GsonUtils.GSON.toJson(this);\n-        Text.writeString(out, json);\n-    }\n-\n-    public static Resource read(DataInput in) throws IOException {\n-        String json = Text.readString(in);\n-        return GsonUtils.GSON.fromJson(json, Resource.class);\n-    }\n-}\n-\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM3NTI0Mw==", "url": "https://github.com/apache/incubator-doris/pull/3418#discussion_r427375243", "bodyText": "Why not just use resourceMgr.write()?", "author": "morningman", "createdAt": "2020-05-19T15:03:47Z", "path": "fe/src/main/java/org/apache/doris/catalog/Catalog.java", "diffHunk": "@@ -2155,6 +2176,18 @@ public long saveLoadJobsV2(DataOutputStream out, long checksum) throws IOExcepti\n         return checksum;\n     }\n \n+    public long saveResources(DataOutputStream dos, long checksum) throws IOException {\n+        Collection<Resource> resources = resourceMgr.getResources();", "originalCommit": "6b59bc0cd9e4823a579d19133e50753db44c001b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "acebbafa85e1de6d0ab27384ffa27e2224e1f0e1", "chunk": "diff --git a/fe/src/main/java/org/apache/doris/catalog/Catalog.java b/fe/src/main/java/org/apache/doris/catalog/Catalog.java\nold mode 100644\nnew mode 100755\nindex 0fccd0943..19578ea6b\n--- a/fe/src/main/java/org/apache/doris/catalog/Catalog.java\n+++ b/fe/src/main/java/org/apache/doris/catalog/Catalog.java\n\n@@ -2176,18 +2161,6 @@ public class Catalog {\n         return checksum;\n     }\n \n-    public long saveResources(DataOutputStream dos, long checksum) throws IOException {\n-        Collection<Resource> resources = resourceMgr.getResources();\n-        int size = resources.size();\n-        checksum ^= size;\n-        dos.writeInt(size);\n-\n-        for (Resource resource : resources) {\n-            resource.write(dos);\n-        }\n-        return checksum;\n-    }\n-\n     private long saveSmallFiles(DataOutputStream out, long checksum) throws IOException {\n         smallFileMgr.write(out);\n         return checksum;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM3NjIxOA==", "url": "https://github.com/apache/incubator-doris/pull/3418#discussion_r427376218", "bodyText": "I think this procNode can be created when constructing this class.", "author": "morningman", "createdAt": "2020-05-19T15:05:06Z", "path": "fe/src/main/java/org/apache/doris/catalog/ResourceMgr.java", "diffHunk": "@@ -0,0 +1,188 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.catalog;\n+\n+import org.apache.doris.analysis.CreateResourceStmt;\n+import org.apache.doris.analysis.DropResourceStmt;\n+import org.apache.doris.catalog.Resource.ResourceType;\n+import org.apache.doris.common.DdlException;\n+import org.apache.doris.common.proc.BaseProcResult;\n+import org.apache.doris.common.proc.ProcNodeInterface;\n+import org.apache.doris.common.proc.ProcResult;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Maps;\n+import org.apache.doris.mysql.privilege.PrivPredicate;\n+import org.apache.doris.qe.ConnectContext;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+/**\n+ * Resource manager is responsible for managing external resources used by Doris.\n+ * For example, Spark/MapReduce used for ETL, Spark/GPU used for queries, HDFS/S3 used for external storage.\n+ * Now only support Spark.\n+ */\n+public class ResourceMgr {\n+    private static final Logger LOG = LogManager.getLogger(ResourceMgr.class);\n+\n+    public static final ImmutableList<String> RESOURCE_PROC_NODE_TITLE_NAMES = new ImmutableList.Builder<String>()\n+            .add(\"Name\").add(\"ResourceType\").add(\"Key\").add(\"Value\")\n+            .build();\n+\n+    // { resourceName -> Resource}\n+    private final Map<String, Resource> nameToResource = Maps.newHashMap();\n+    private final ReentrantLock lock = new ReentrantLock();\n+    private ResourceProcNode procNode = null;\n+\n+    public ResourceMgr() {\n+    }\n+\n+    public void createResource(CreateResourceStmt stmt) throws DdlException {\n+        lock.lock();\n+        try {\n+            if (stmt.getResourceType() != ResourceType.SPARK) {\n+                throw new DdlException(\"Only support Spark resource.\");\n+            }\n+\n+            String resourceName = stmt.getResourceName();\n+            if (nameToResource.containsKey(resourceName)) {\n+                throw new DdlException(\"Resource(\" + resourceName + \") already exist\");\n+            }\n+\n+            Resource resource = Resource.fromStmt(stmt);\n+            nameToResource.put(resourceName, resource);\n+            // log add\n+            Catalog.getInstance().getEditLog().logCreateResource(resource);\n+            LOG.info(\"create resource success. resource: {}\", resource);\n+        } finally {\n+            lock.unlock();\n+        }\n+    }\n+\n+    public void replayCreateResource(Resource resource) {\n+        lock.lock();\n+        try {\n+            nameToResource.put(resource.getName(), resource);\n+        } finally {\n+            lock.unlock();\n+        }\n+    }\n+\n+    public void dropResource(DropResourceStmt stmt) throws DdlException {\n+        lock.lock();\n+        try {\n+            String name = stmt.getResourceName();\n+            if (!nameToResource.containsKey(name)) {\n+                throw new DdlException(\"Resource(\" + name + \") does not exist\");\n+            }\n+\n+            nameToResource.remove(name);\n+            // log drop\n+            Catalog.getInstance().getEditLog().logDropResource(name);\n+            LOG.info(\"drop resource success. resource name: {}\", name);\n+        } finally {\n+            lock.unlock();\n+        }\n+    }\n+\n+    public void replayDropResource(String name) {\n+        lock.lock();\n+        try {\n+            nameToResource.remove(name);\n+        } finally {\n+            lock.unlock();\n+        }\n+    }\n+\n+    public boolean containsResource(String name) {\n+        lock.lock();\n+        try {\n+            return nameToResource.containsKey(name);\n+        } finally {\n+            lock.unlock();\n+        }\n+    }\n+\n+    public Resource getResource(String name) {\n+        lock.lock();\n+        try {\n+            return nameToResource.get(name);\n+        } finally {\n+            lock.unlock();\n+        }\n+    }\n+\n+    // for catalog save image\n+    public Collection<Resource> getResources() {\n+        return nameToResource.values();\n+    }\n+\n+    public List<List<String>> getResourcesInfo() {\n+        lock.lock();\n+        try {\n+            if (procNode == null) {\n+                procNode = new ResourceProcNode();", "originalCommit": "6b59bc0cd9e4823a579d19133e50753db44c001b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "acebbafa85e1de6d0ab27384ffa27e2224e1f0e1", "chunk": "diff --git a/fe/src/main/java/org/apache/doris/catalog/ResourceMgr.java b/fe/src/main/java/org/apache/doris/catalog/ResourceMgr.java\ndeleted file mode 100644\nindex 88a22440a..000000000\n--- a/fe/src/main/java/org/apache/doris/catalog/ResourceMgr.java\n+++ /dev/null\n\n@@ -1,188 +0,0 @@\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-\n-package org.apache.doris.catalog;\n-\n-import org.apache.doris.analysis.CreateResourceStmt;\n-import org.apache.doris.analysis.DropResourceStmt;\n-import org.apache.doris.catalog.Resource.ResourceType;\n-import org.apache.doris.common.DdlException;\n-import org.apache.doris.common.proc.BaseProcResult;\n-import org.apache.doris.common.proc.ProcNodeInterface;\n-import org.apache.doris.common.proc.ProcResult;\n-\n-import com.google.common.collect.ImmutableList;\n-import com.google.common.collect.Maps;\n-import org.apache.doris.mysql.privilege.PrivPredicate;\n-import org.apache.doris.qe.ConnectContext;\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n-\n-import java.util.Collection;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.concurrent.locks.ReentrantLock;\n-\n-/**\n- * Resource manager is responsible for managing external resources used by Doris.\n- * For example, Spark/MapReduce used for ETL, Spark/GPU used for queries, HDFS/S3 used for external storage.\n- * Now only support Spark.\n- */\n-public class ResourceMgr {\n-    private static final Logger LOG = LogManager.getLogger(ResourceMgr.class);\n-\n-    public static final ImmutableList<String> RESOURCE_PROC_NODE_TITLE_NAMES = new ImmutableList.Builder<String>()\n-            .add(\"Name\").add(\"ResourceType\").add(\"Key\").add(\"Value\")\n-            .build();\n-\n-    // { resourceName -> Resource}\n-    private final Map<String, Resource> nameToResource = Maps.newHashMap();\n-    private final ReentrantLock lock = new ReentrantLock();\n-    private ResourceProcNode procNode = null;\n-\n-    public ResourceMgr() {\n-    }\n-\n-    public void createResource(CreateResourceStmt stmt) throws DdlException {\n-        lock.lock();\n-        try {\n-            if (stmt.getResourceType() != ResourceType.SPARK) {\n-                throw new DdlException(\"Only support Spark resource.\");\n-            }\n-\n-            String resourceName = stmt.getResourceName();\n-            if (nameToResource.containsKey(resourceName)) {\n-                throw new DdlException(\"Resource(\" + resourceName + \") already exist\");\n-            }\n-\n-            Resource resource = Resource.fromStmt(stmt);\n-            nameToResource.put(resourceName, resource);\n-            // log add\n-            Catalog.getInstance().getEditLog().logCreateResource(resource);\n-            LOG.info(\"create resource success. resource: {}\", resource);\n-        } finally {\n-            lock.unlock();\n-        }\n-    }\n-\n-    public void replayCreateResource(Resource resource) {\n-        lock.lock();\n-        try {\n-            nameToResource.put(resource.getName(), resource);\n-        } finally {\n-            lock.unlock();\n-        }\n-    }\n-\n-    public void dropResource(DropResourceStmt stmt) throws DdlException {\n-        lock.lock();\n-        try {\n-            String name = stmt.getResourceName();\n-            if (!nameToResource.containsKey(name)) {\n-                throw new DdlException(\"Resource(\" + name + \") does not exist\");\n-            }\n-\n-            nameToResource.remove(name);\n-            // log drop\n-            Catalog.getInstance().getEditLog().logDropResource(name);\n-            LOG.info(\"drop resource success. resource name: {}\", name);\n-        } finally {\n-            lock.unlock();\n-        }\n-    }\n-\n-    public void replayDropResource(String name) {\n-        lock.lock();\n-        try {\n-            nameToResource.remove(name);\n-        } finally {\n-            lock.unlock();\n-        }\n-    }\n-\n-    public boolean containsResource(String name) {\n-        lock.lock();\n-        try {\n-            return nameToResource.containsKey(name);\n-        } finally {\n-            lock.unlock();\n-        }\n-    }\n-\n-    public Resource getResource(String name) {\n-        lock.lock();\n-        try {\n-            return nameToResource.get(name);\n-        } finally {\n-            lock.unlock();\n-        }\n-    }\n-\n-    // for catalog save image\n-    public Collection<Resource> getResources() {\n-        return nameToResource.values();\n-    }\n-\n-    public List<List<String>> getResourcesInfo() {\n-        lock.lock();\n-        try {\n-            if (procNode == null) {\n-                procNode = new ResourceProcNode();\n-            }\n-            return procNode.fetchResult().getRows();\n-        } finally {\n-            lock.unlock();\n-        }\n-    }\n-\n-    public ResourceProcNode getProcNode() {\n-        lock.lock();\n-        try {\n-            if (procNode == null) {\n-                procNode = new ResourceProcNode();\n-            }\n-            return procNode;\n-        } finally {\n-            lock.unlock();\n-        }\n-    }\n-\n-    public class ResourceProcNode implements ProcNodeInterface {\n-        @Override\n-        public ProcResult fetchResult() {\n-            BaseProcResult result = new BaseProcResult();\n-            result.setNames(RESOURCE_PROC_NODE_TITLE_NAMES);\n-\n-            lock.lock();\n-            try {\n-                for (Map.Entry<String, Resource> entry : nameToResource.entrySet()) {\n-                    Resource resource = entry.getValue();\n-                    // check resource privs\n-                    if (!Catalog.getCurrentCatalog().getAuth().checkResourcePriv(ConnectContext.get(), resource.getName(),\n-                                                                                 PrivPredicate.SHOW)) {\n-                        continue;\n-                    }\n-                    resource.getProcNodeData(result);\n-                }\n-            } finally {\n-                lock.unlock();\n-            }\n-            return result;\n-        }\n-    }\n-}\n-\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM3Nzg0Ng==", "url": "https://github.com/apache/incubator-doris/pull/3418#discussion_r427377846", "bodyText": "I think a concurrentMap is enough. And the lock is only used when creating the resource,\nto make \"create resource\" and \"write edit log\" atomic.", "author": "morningman", "createdAt": "2020-05-19T15:07:15Z", "path": "fe/src/main/java/org/apache/doris/catalog/ResourceMgr.java", "diffHunk": "@@ -0,0 +1,188 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.catalog;\n+\n+import org.apache.doris.analysis.CreateResourceStmt;\n+import org.apache.doris.analysis.DropResourceStmt;\n+import org.apache.doris.catalog.Resource.ResourceType;\n+import org.apache.doris.common.DdlException;\n+import org.apache.doris.common.proc.BaseProcResult;\n+import org.apache.doris.common.proc.ProcNodeInterface;\n+import org.apache.doris.common.proc.ProcResult;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Maps;\n+import org.apache.doris.mysql.privilege.PrivPredicate;\n+import org.apache.doris.qe.ConnectContext;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+/**\n+ * Resource manager is responsible for managing external resources used by Doris.\n+ * For example, Spark/MapReduce used for ETL, Spark/GPU used for queries, HDFS/S3 used for external storage.\n+ * Now only support Spark.\n+ */\n+public class ResourceMgr {\n+    private static final Logger LOG = LogManager.getLogger(ResourceMgr.class);\n+\n+    public static final ImmutableList<String> RESOURCE_PROC_NODE_TITLE_NAMES = new ImmutableList.Builder<String>()\n+            .add(\"Name\").add(\"ResourceType\").add(\"Key\").add(\"Value\")\n+            .build();\n+\n+    // { resourceName -> Resource}\n+    private final Map<String, Resource> nameToResource = Maps.newHashMap();", "originalCommit": "6b59bc0cd9e4823a579d19133e50753db44c001b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "acebbafa85e1de6d0ab27384ffa27e2224e1f0e1", "chunk": "diff --git a/fe/src/main/java/org/apache/doris/catalog/ResourceMgr.java b/fe/src/main/java/org/apache/doris/catalog/ResourceMgr.java\ndeleted file mode 100644\nindex 88a22440a..000000000\n--- a/fe/src/main/java/org/apache/doris/catalog/ResourceMgr.java\n+++ /dev/null\n\n@@ -1,188 +0,0 @@\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-\n-package org.apache.doris.catalog;\n-\n-import org.apache.doris.analysis.CreateResourceStmt;\n-import org.apache.doris.analysis.DropResourceStmt;\n-import org.apache.doris.catalog.Resource.ResourceType;\n-import org.apache.doris.common.DdlException;\n-import org.apache.doris.common.proc.BaseProcResult;\n-import org.apache.doris.common.proc.ProcNodeInterface;\n-import org.apache.doris.common.proc.ProcResult;\n-\n-import com.google.common.collect.ImmutableList;\n-import com.google.common.collect.Maps;\n-import org.apache.doris.mysql.privilege.PrivPredicate;\n-import org.apache.doris.qe.ConnectContext;\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n-\n-import java.util.Collection;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.concurrent.locks.ReentrantLock;\n-\n-/**\n- * Resource manager is responsible for managing external resources used by Doris.\n- * For example, Spark/MapReduce used for ETL, Spark/GPU used for queries, HDFS/S3 used for external storage.\n- * Now only support Spark.\n- */\n-public class ResourceMgr {\n-    private static final Logger LOG = LogManager.getLogger(ResourceMgr.class);\n-\n-    public static final ImmutableList<String> RESOURCE_PROC_NODE_TITLE_NAMES = new ImmutableList.Builder<String>()\n-            .add(\"Name\").add(\"ResourceType\").add(\"Key\").add(\"Value\")\n-            .build();\n-\n-    // { resourceName -> Resource}\n-    private final Map<String, Resource> nameToResource = Maps.newHashMap();\n-    private final ReentrantLock lock = new ReentrantLock();\n-    private ResourceProcNode procNode = null;\n-\n-    public ResourceMgr() {\n-    }\n-\n-    public void createResource(CreateResourceStmt stmt) throws DdlException {\n-        lock.lock();\n-        try {\n-            if (stmt.getResourceType() != ResourceType.SPARK) {\n-                throw new DdlException(\"Only support Spark resource.\");\n-            }\n-\n-            String resourceName = stmt.getResourceName();\n-            if (nameToResource.containsKey(resourceName)) {\n-                throw new DdlException(\"Resource(\" + resourceName + \") already exist\");\n-            }\n-\n-            Resource resource = Resource.fromStmt(stmt);\n-            nameToResource.put(resourceName, resource);\n-            // log add\n-            Catalog.getInstance().getEditLog().logCreateResource(resource);\n-            LOG.info(\"create resource success. resource: {}\", resource);\n-        } finally {\n-            lock.unlock();\n-        }\n-    }\n-\n-    public void replayCreateResource(Resource resource) {\n-        lock.lock();\n-        try {\n-            nameToResource.put(resource.getName(), resource);\n-        } finally {\n-            lock.unlock();\n-        }\n-    }\n-\n-    public void dropResource(DropResourceStmt stmt) throws DdlException {\n-        lock.lock();\n-        try {\n-            String name = stmt.getResourceName();\n-            if (!nameToResource.containsKey(name)) {\n-                throw new DdlException(\"Resource(\" + name + \") does not exist\");\n-            }\n-\n-            nameToResource.remove(name);\n-            // log drop\n-            Catalog.getInstance().getEditLog().logDropResource(name);\n-            LOG.info(\"drop resource success. resource name: {}\", name);\n-        } finally {\n-            lock.unlock();\n-        }\n-    }\n-\n-    public void replayDropResource(String name) {\n-        lock.lock();\n-        try {\n-            nameToResource.remove(name);\n-        } finally {\n-            lock.unlock();\n-        }\n-    }\n-\n-    public boolean containsResource(String name) {\n-        lock.lock();\n-        try {\n-            return nameToResource.containsKey(name);\n-        } finally {\n-            lock.unlock();\n-        }\n-    }\n-\n-    public Resource getResource(String name) {\n-        lock.lock();\n-        try {\n-            return nameToResource.get(name);\n-        } finally {\n-            lock.unlock();\n-        }\n-    }\n-\n-    // for catalog save image\n-    public Collection<Resource> getResources() {\n-        return nameToResource.values();\n-    }\n-\n-    public List<List<String>> getResourcesInfo() {\n-        lock.lock();\n-        try {\n-            if (procNode == null) {\n-                procNode = new ResourceProcNode();\n-            }\n-            return procNode.fetchResult().getRows();\n-        } finally {\n-            lock.unlock();\n-        }\n-    }\n-\n-    public ResourceProcNode getProcNode() {\n-        lock.lock();\n-        try {\n-            if (procNode == null) {\n-                procNode = new ResourceProcNode();\n-            }\n-            return procNode;\n-        } finally {\n-            lock.unlock();\n-        }\n-    }\n-\n-    public class ResourceProcNode implements ProcNodeInterface {\n-        @Override\n-        public ProcResult fetchResult() {\n-            BaseProcResult result = new BaseProcResult();\n-            result.setNames(RESOURCE_PROC_NODE_TITLE_NAMES);\n-\n-            lock.lock();\n-            try {\n-                for (Map.Entry<String, Resource> entry : nameToResource.entrySet()) {\n-                    Resource resource = entry.getValue();\n-                    // check resource privs\n-                    if (!Catalog.getCurrentCatalog().getAuth().checkResourcePriv(ConnectContext.get(), resource.getName(),\n-                                                                                 PrivPredicate.SHOW)) {\n-                        continue;\n-                    }\n-                    resource.getProcNodeData(result);\n-                }\n-            } finally {\n-                lock.unlock();\n-            }\n-            return result;\n-        }\n-    }\n-}\n-\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM3OTIyNQ==", "url": "https://github.com/apache/incubator-doris/pull/3418#discussion_r427379225", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                USAGE_PRIV(\"Usage_priv\", 8, \"Privilege for use resource\");\n          \n          \n            \n                USAGE_PRIV(\"Usage_priv\", 8, \"Privilege for accessing resource\");", "author": "morningman", "createdAt": "2020-05-19T15:09:08Z", "path": "fe/src/main/java/org/apache/doris/mysql/privilege/PaloPrivilege.java", "diffHunk": "@@ -25,7 +25,8 @@\n     LOAD_PRIV(\"Load_priv\", 4, \"Privilege for loading data into tables\"),\n     ALTER_PRIV(\"Alter_priv\", 5, \"Privilege for alter database or table\"),\n     CREATE_PRIV(\"Create_priv\", 6, \"Privilege for createing database or table\"),\n-    DROP_PRIV(\"Drop_priv\", 7, \"Privilege for dropping database or table\");\n+    DROP_PRIV(\"Drop_priv\", 7, \"Privilege for dropping database or table\"),\n+    USAGE_PRIV(\"Usage_priv\", 8, \"Privilege for use resource\");", "originalCommit": "6b59bc0cd9e4823a579d19133e50753db44c001b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc0NTMxMQ==", "url": "https://github.com/apache/incubator-doris/pull/3418#discussion_r428745311", "bodyText": "using resource\uff1f\nreference snowflake usage privilege", "author": "wyb", "createdAt": "2020-05-21T15:51:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM3OTIyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA4MzEwMg==", "url": "https://github.com/apache/incubator-doris/pull/3418#discussion_r429083102", "bodyText": "ok", "author": "morningman", "createdAt": "2020-05-22T07:19:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM3OTIyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "acebbafa85e1de6d0ab27384ffa27e2224e1f0e1", "chunk": "diff --git a/fe/src/main/java/org/apache/doris/mysql/privilege/PaloPrivilege.java b/fe/src/main/java/org/apache/doris/mysql/privilege/PaloPrivilege.java\nindex 81428415c..25895c9e3 100644\n--- a/fe/src/main/java/org/apache/doris/mysql/privilege/PaloPrivilege.java\n+++ b/fe/src/main/java/org/apache/doris/mysql/privilege/PaloPrivilege.java\n\n@@ -25,8 +25,7 @@ public enum PaloPrivilege {\n     LOAD_PRIV(\"Load_priv\", 4, \"Privilege for loading data into tables\"),\n     ALTER_PRIV(\"Alter_priv\", 5, \"Privilege for alter database or table\"),\n     CREATE_PRIV(\"Create_priv\", 6, \"Privilege for createing database or table\"),\n-    DROP_PRIV(\"Drop_priv\", 7, \"Privilege for dropping database or table\"),\n-    USAGE_PRIV(\"Usage_priv\", 8, \"Privilege for use resource\");\n+    DROP_PRIV(\"Drop_priv\", 7, \"Privilege for dropping database or table\");\n \n     public static PaloPrivilege[] privileges = {\n             NODE_PRIV,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAxMjI1Nw==", "url": "https://github.com/apache/incubator-doris/pull/3418#discussion_r429012257", "bodyText": "Is this isAnalyzed needed?", "author": "imay", "createdAt": "2020-05-22T02:33:57Z", "path": "fe/src/main/java/org/apache/doris/analysis/ResourcePattern.java", "diffHunk": "@@ -0,0 +1,118 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.analysis;\n+\n+import org.apache.doris.common.AnalysisException;\n+import org.apache.doris.common.FeNameFormat;\n+import org.apache.doris.common.io.Text;\n+import org.apache.doris.common.io.Writable;\n+import org.apache.doris.mysql.privilege.PaloAuth.PrivLevel;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.base.Strings;\n+\n+import java.io.DataInput;\n+import java.io.DataOutput;\n+import java.io.IOException;\n+\n+// only the following 2 formats are allowed\n+// *\n+// resource\n+public class ResourcePattern implements Writable {\n+    private String resourceName;\n+    boolean isAnalyzed = false;", "originalCommit": "d33abcf208b193d52c5c24eca59ac48608b5d51c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEyNzQ1OQ==", "url": "https://github.com/apache/incubator-doris/pull/3418#discussion_r429127459", "bodyText": "removed", "author": "wyb", "createdAt": "2020-05-22T08:58:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAxMjI1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "acebbafa85e1de6d0ab27384ffa27e2224e1f0e1", "chunk": "diff --git a/fe/src/main/java/org/apache/doris/analysis/ResourcePattern.java b/fe/src/main/java/org/apache/doris/analysis/ResourcePattern.java\ndeleted file mode 100644\nindex 1555abfbb..000000000\n--- a/fe/src/main/java/org/apache/doris/analysis/ResourcePattern.java\n+++ /dev/null\n\n@@ -1,118 +0,0 @@\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-\n-package org.apache.doris.analysis;\n-\n-import org.apache.doris.common.AnalysisException;\n-import org.apache.doris.common.FeNameFormat;\n-import org.apache.doris.common.io.Text;\n-import org.apache.doris.common.io.Writable;\n-import org.apache.doris.mysql.privilege.PaloAuth.PrivLevel;\n-\n-import com.google.common.base.Preconditions;\n-import com.google.common.base.Strings;\n-\n-import java.io.DataInput;\n-import java.io.DataOutput;\n-import java.io.IOException;\n-\n-// only the following 2 formats are allowed\n-// *\n-// resource\n-public class ResourcePattern implements Writable {\n-    private String resourceName;\n-    boolean isAnalyzed = false;\n-\n-    public static ResourcePattern ALL;\n-    static {\n-        ALL = new ResourcePattern(\"*\");\n-        try {\n-            ALL.analyze();\n-        } catch (AnalysisException e) {\n-            // will not happen\n-        }\n-    }\n-\n-    private ResourcePattern() {\n-    }\n-\n-    public ResourcePattern(String resourceName) {\n-        this.resourceName = Strings.isNullOrEmpty(resourceName) ? \"*\" : resourceName;\n-    }\n-\n-    public String getResourceName() {\n-        Preconditions.checkState(isAnalyzed);\n-        return resourceName;\n-    }\n-\n-    public PrivLevel getPrivLevel() {\n-        Preconditions.checkState(isAnalyzed);\n-        if (resourceName.equals(\"*\")) {\n-            return PrivLevel.GLOBAL;\n-        } else {\n-            return PrivLevel.RESOURCE;\n-        }\n-    }\n-\n-    public void analyze() throws AnalysisException {\n-        if (isAnalyzed) {\n-            return;\n-        }\n-        if (!resourceName.equals(\"*\")) {\n-            FeNameFormat.checkResourceName(resourceName);\n-        }\n-        isAnalyzed = true;\n-    }\n-\n-    public static ResourcePattern read(DataInput in) throws IOException {\n-        ResourcePattern resourcePattern = new ResourcePattern();\n-        resourcePattern.readFields(in);\n-        return resourcePattern;\n-    }\n-\n-    @Override\n-    public boolean equals(Object obj) {\n-        if (!(obj instanceof ResourcePattern)) {\n-            return false;\n-        }\n-        ResourcePattern other = (ResourcePattern) obj;\n-        return resourceName.equals(other.getResourceName());\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        int result = 17;\n-        result = 31 * result + resourceName.hashCode();\n-        return result;\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return resourceName;\n-    }\n-\n-    @Override\n-    public void write(DataOutput out) throws IOException {\n-        Preconditions.checkState(isAnalyzed);\n-        Text.writeString(out, resourceName);\n-    }\n-\n-    public void readFields(DataInput in) throws IOException {\n-        resourceName = Text.readString(in);\n-        isAnalyzed = true;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAxMjM4OQ==", "url": "https://github.com/apache/incubator-doris/pull/3418#discussion_r429012389", "bodyText": "Please serialize in a json format, you can refer to other class usage.", "author": "imay", "createdAt": "2020-05-22T02:34:28Z", "path": "fe/src/main/java/org/apache/doris/analysis/ResourcePattern.java", "diffHunk": "@@ -0,0 +1,118 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.analysis;\n+\n+import org.apache.doris.common.AnalysisException;\n+import org.apache.doris.common.FeNameFormat;\n+import org.apache.doris.common.io.Text;\n+import org.apache.doris.common.io.Writable;\n+import org.apache.doris.mysql.privilege.PaloAuth.PrivLevel;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.base.Strings;\n+\n+import java.io.DataInput;\n+import java.io.DataOutput;\n+import java.io.IOException;\n+\n+// only the following 2 formats are allowed\n+// *\n+// resource\n+public class ResourcePattern implements Writable {\n+    private String resourceName;\n+    boolean isAnalyzed = false;\n+\n+    public static ResourcePattern ALL;\n+    static {\n+        ALL = new ResourcePattern(\"*\");\n+        try {\n+            ALL.analyze();\n+        } catch (AnalysisException e) {\n+            // will not happen\n+        }\n+    }\n+\n+    private ResourcePattern() {\n+    }\n+\n+    public ResourcePattern(String resourceName) {\n+        this.resourceName = Strings.isNullOrEmpty(resourceName) ? \"*\" : resourceName;\n+    }\n+\n+    public String getResourceName() {\n+        Preconditions.checkState(isAnalyzed);\n+        return resourceName;\n+    }\n+\n+    public PrivLevel getPrivLevel() {\n+        Preconditions.checkState(isAnalyzed);\n+        if (resourceName.equals(\"*\")) {\n+            return PrivLevel.GLOBAL;\n+        } else {\n+            return PrivLevel.RESOURCE;\n+        }\n+    }\n+\n+    public void analyze() throws AnalysisException {\n+        if (isAnalyzed) {\n+            return;\n+        }\n+        if (!resourceName.equals(\"*\")) {\n+            FeNameFormat.checkResourceName(resourceName);\n+        }\n+        isAnalyzed = true;\n+    }\n+\n+    public static ResourcePattern read(DataInput in) throws IOException {\n+        ResourcePattern resourcePattern = new ResourcePattern();\n+        resourcePattern.readFields(in);\n+        return resourcePattern;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (!(obj instanceof ResourcePattern)) {\n+            return false;\n+        }\n+        ResourcePattern other = (ResourcePattern) obj;\n+        return resourceName.equals(other.getResourceName());\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int result = 17;\n+        result = 31 * result + resourceName.hashCode();\n+        return result;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return resourceName;\n+    }\n+\n+    @Override\n+    public void write(DataOutput out) throws IOException {\n+        Preconditions.checkState(isAnalyzed);\n+        Text.writeString(out, resourceName);", "originalCommit": "d33abcf208b193d52c5c24eca59ac48608b5d51c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "acebbafa85e1de6d0ab27384ffa27e2224e1f0e1", "chunk": "diff --git a/fe/src/main/java/org/apache/doris/analysis/ResourcePattern.java b/fe/src/main/java/org/apache/doris/analysis/ResourcePattern.java\ndeleted file mode 100644\nindex 1555abfbb..000000000\n--- a/fe/src/main/java/org/apache/doris/analysis/ResourcePattern.java\n+++ /dev/null\n\n@@ -1,118 +0,0 @@\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-\n-package org.apache.doris.analysis;\n-\n-import org.apache.doris.common.AnalysisException;\n-import org.apache.doris.common.FeNameFormat;\n-import org.apache.doris.common.io.Text;\n-import org.apache.doris.common.io.Writable;\n-import org.apache.doris.mysql.privilege.PaloAuth.PrivLevel;\n-\n-import com.google.common.base.Preconditions;\n-import com.google.common.base.Strings;\n-\n-import java.io.DataInput;\n-import java.io.DataOutput;\n-import java.io.IOException;\n-\n-// only the following 2 formats are allowed\n-// *\n-// resource\n-public class ResourcePattern implements Writable {\n-    private String resourceName;\n-    boolean isAnalyzed = false;\n-\n-    public static ResourcePattern ALL;\n-    static {\n-        ALL = new ResourcePattern(\"*\");\n-        try {\n-            ALL.analyze();\n-        } catch (AnalysisException e) {\n-            // will not happen\n-        }\n-    }\n-\n-    private ResourcePattern() {\n-    }\n-\n-    public ResourcePattern(String resourceName) {\n-        this.resourceName = Strings.isNullOrEmpty(resourceName) ? \"*\" : resourceName;\n-    }\n-\n-    public String getResourceName() {\n-        Preconditions.checkState(isAnalyzed);\n-        return resourceName;\n-    }\n-\n-    public PrivLevel getPrivLevel() {\n-        Preconditions.checkState(isAnalyzed);\n-        if (resourceName.equals(\"*\")) {\n-            return PrivLevel.GLOBAL;\n-        } else {\n-            return PrivLevel.RESOURCE;\n-        }\n-    }\n-\n-    public void analyze() throws AnalysisException {\n-        if (isAnalyzed) {\n-            return;\n-        }\n-        if (!resourceName.equals(\"*\")) {\n-            FeNameFormat.checkResourceName(resourceName);\n-        }\n-        isAnalyzed = true;\n-    }\n-\n-    public static ResourcePattern read(DataInput in) throws IOException {\n-        ResourcePattern resourcePattern = new ResourcePattern();\n-        resourcePattern.readFields(in);\n-        return resourcePattern;\n-    }\n-\n-    @Override\n-    public boolean equals(Object obj) {\n-        if (!(obj instanceof ResourcePattern)) {\n-            return false;\n-        }\n-        ResourcePattern other = (ResourcePattern) obj;\n-        return resourceName.equals(other.getResourceName());\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        int result = 17;\n-        result = 31 * result + resourceName.hashCode();\n-        return result;\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return resourceName;\n-    }\n-\n-    @Override\n-    public void write(DataOutput out) throws IOException {\n-        Preconditions.checkState(isAnalyzed);\n-        Text.writeString(out, resourceName);\n-    }\n-\n-    public void readFields(DataInput in) throws IOException {\n-        resourceName = Text.readString(in);\n-        isAnalyzed = true;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAxMzUzOA==", "url": "https://github.com/apache/incubator-doris/pull/3418#discussion_r429013538", "bodyText": "Better to add \"TODO(wyb): spark-load\" to find it easily", "author": "imay", "createdAt": "2020-05-22T02:39:16Z", "path": "fe/src/main/java/org/apache/doris/mysql/privilege/PaloRole.java", "diffHunk": "@@ -129,6 +163,16 @@ public void readFields(DataInput in) throws IOException {\n             PrivBitSet privs = PrivBitSet.read(in);\n             tblPatternToPrivs.put(tblPattern, privs);\n         }\n+        /*", "originalCommit": "d33abcf208b193d52c5c24eca59ac48608b5d51c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "acebbafa85e1de6d0ab27384ffa27e2224e1f0e1", "chunk": "diff --git a/fe/src/main/java/org/apache/doris/mysql/privilege/PaloRole.java b/fe/src/main/java/org/apache/doris/mysql/privilege/PaloRole.java\nindex d5d19c371..e960c79e8 100644\n--- a/fe/src/main/java/org/apache/doris/mysql/privilege/PaloRole.java\n+++ b/fe/src/main/java/org/apache/doris/mysql/privilege/PaloRole.java\n\n@@ -163,16 +129,6 @@ public class PaloRole implements Writable {\n             PrivBitSet privs = PrivBitSet.read(in);\n             tblPatternToPrivs.put(tblPattern, privs);\n         }\n-        /*\n-        if (Catalog.getCurrentCatalogJournalVersion() >= FeMetaVersion.new_version_by_wyb) {\n-            size = in.readInt();\n-            for (int i = 0; i < size; i++) {\n-                ResourcePattern resourcePattern = ResourcePattern.read(in);\n-                PrivBitSet privs = PrivBitSet.read(in);\n-                resourcePatternToPrivs.put(resourcePattern, privs);\n-            }\n-        }\n-         */\n         size = in.readInt();\n         for (int i = 0; i < size; i++) {\n             UserIdentity userIdentity = UserIdentity.read(in);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA5NDE1Ng==", "url": "https://github.com/apache/incubator-doris/pull/3418#discussion_r429094156", "bodyText": "use Gson instead.", "author": "morningman", "createdAt": "2020-05-22T07:46:16Z", "path": "fe/src/main/java/org/apache/doris/catalog/ResourceMgr.java", "diffHunk": "@@ -0,0 +1,189 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.catalog;\n+\n+import org.apache.doris.analysis.CreateResourceStmt;\n+import org.apache.doris.analysis.DropResourceStmt;\n+import org.apache.doris.catalog.Resource.ResourceType;\n+import org.apache.doris.common.DdlException;\n+import org.apache.doris.common.io.Writable;\n+import org.apache.doris.common.proc.BaseProcResult;\n+import org.apache.doris.common.proc.ProcNodeInterface;\n+import org.apache.doris.common.proc.ProcResult;\n+import org.apache.doris.mysql.privilege.PrivPredicate;\n+import org.apache.doris.qe.ConnectContext;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Maps;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.io.DataInput;\n+import java.io.DataOutput;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+/**\n+ * Resource manager is responsible for managing external resources used by Doris.\n+ * For example, Spark/MapReduce used for ETL, Spark/GPU used for queries, HDFS/S3 used for external storage.\n+ * Now only support Spark.\n+ */\n+public class ResourceMgr implements Writable {\n+    private static final Logger LOG = LogManager.getLogger(ResourceMgr.class);\n+\n+    public static final ImmutableList<String> RESOURCE_PROC_NODE_TITLE_NAMES = new ImmutableList.Builder<String>()\n+            .add(\"Name\").add(\"ResourceType\").add(\"Key\").add(\"Value\")\n+            .build();\n+\n+    // { resourceName -> Resource}\n+    private final Map<String, Resource> nameToResource = Maps.newHashMap();\n+    private final ReentrantLock lock = new ReentrantLock();\n+    private final ResourceProcNode procNode = new ResourceProcNode();\n+\n+    public ResourceMgr() {\n+    }\n+\n+    public void createResource(CreateResourceStmt stmt) throws DdlException {\n+        lock.lock();\n+        try {\n+            if (stmt.getResourceType() != ResourceType.SPARK) {\n+                throw new DdlException(\"Only support Spark resource.\");\n+            }\n+\n+            String resourceName = stmt.getResourceName();\n+            if (nameToResource.containsKey(resourceName)) {\n+                throw new DdlException(\"Resource(\" + resourceName + \") already exist\");\n+            }\n+\n+            Resource resource = Resource.fromStmt(stmt);\n+            nameToResource.put(resourceName, resource);\n+            // log add\n+            Catalog.getInstance().getEditLog().logCreateResource(resource);\n+            LOG.info(\"create resource success. resource: {}\", resource);\n+        } finally {\n+            lock.unlock();\n+        }\n+    }\n+\n+    public void replayCreateResource(Resource resource) {\n+        lock.lock();\n+        try {\n+            nameToResource.put(resource.getName(), resource);\n+        } finally {\n+            lock.unlock();\n+        }\n+    }\n+\n+    public void dropResource(DropResourceStmt stmt) throws DdlException {\n+        lock.lock();\n+        try {\n+            String name = stmt.getResourceName();\n+            if (!nameToResource.containsKey(name)) {\n+                throw new DdlException(\"Resource(\" + name + \") does not exist\");\n+            }\n+\n+            nameToResource.remove(name);\n+            // log drop\n+            Catalog.getInstance().getEditLog().logDropResource(name);\n+            LOG.info(\"drop resource success. resource name: {}\", name);\n+        } finally {\n+            lock.unlock();\n+        }\n+    }\n+\n+    public void replayDropResource(String name) {\n+        lock.lock();\n+        try {\n+            nameToResource.remove(name);\n+        } finally {\n+            lock.unlock();\n+        }\n+    }\n+\n+    public boolean containsResource(String name) {\n+        lock.lock();\n+        try {\n+            return nameToResource.containsKey(name);\n+        } finally {\n+            lock.unlock();\n+        }\n+    }\n+\n+    public Resource getResource(String name) {\n+        lock.lock();\n+        try {\n+            return nameToResource.get(name);\n+        } finally {\n+            lock.unlock();\n+        }\n+    }\n+\n+    public int getResourceNum() {\n+        return nameToResource.size();\n+    }\n+\n+    public List<List<String>> getResourcesInfo() {\n+        return procNode.fetchResult().getRows();\n+    }\n+\n+    public ResourceProcNode getProcNode() {\n+        return procNode;\n+    }\n+\n+    @Override\n+    public void write(DataOutput out) throws IOException {\n+        out.writeInt(nameToResource.size());", "originalCommit": "d33abcf208b193d52c5c24eca59ac48608b5d51c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "acebbafa85e1de6d0ab27384ffa27e2224e1f0e1", "chunk": "diff --git a/fe/src/main/java/org/apache/doris/catalog/ResourceMgr.java b/fe/src/main/java/org/apache/doris/catalog/ResourceMgr.java\ndeleted file mode 100644\nindex 3371fbbac..000000000\n--- a/fe/src/main/java/org/apache/doris/catalog/ResourceMgr.java\n+++ /dev/null\n\n@@ -1,189 +0,0 @@\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-\n-package org.apache.doris.catalog;\n-\n-import org.apache.doris.analysis.CreateResourceStmt;\n-import org.apache.doris.analysis.DropResourceStmt;\n-import org.apache.doris.catalog.Resource.ResourceType;\n-import org.apache.doris.common.DdlException;\n-import org.apache.doris.common.io.Writable;\n-import org.apache.doris.common.proc.BaseProcResult;\n-import org.apache.doris.common.proc.ProcNodeInterface;\n-import org.apache.doris.common.proc.ProcResult;\n-import org.apache.doris.mysql.privilege.PrivPredicate;\n-import org.apache.doris.qe.ConnectContext;\n-\n-import com.google.common.collect.ImmutableList;\n-import com.google.common.collect.Maps;\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n-\n-import java.io.DataInput;\n-import java.io.DataOutput;\n-import java.io.IOException;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.concurrent.locks.ReentrantLock;\n-\n-/**\n- * Resource manager is responsible for managing external resources used by Doris.\n- * For example, Spark/MapReduce used for ETL, Spark/GPU used for queries, HDFS/S3 used for external storage.\n- * Now only support Spark.\n- */\n-public class ResourceMgr implements Writable {\n-    private static final Logger LOG = LogManager.getLogger(ResourceMgr.class);\n-\n-    public static final ImmutableList<String> RESOURCE_PROC_NODE_TITLE_NAMES = new ImmutableList.Builder<String>()\n-            .add(\"Name\").add(\"ResourceType\").add(\"Key\").add(\"Value\")\n-            .build();\n-\n-    // { resourceName -> Resource}\n-    private final Map<String, Resource> nameToResource = Maps.newHashMap();\n-    private final ReentrantLock lock = new ReentrantLock();\n-    private final ResourceProcNode procNode = new ResourceProcNode();\n-\n-    public ResourceMgr() {\n-    }\n-\n-    public void createResource(CreateResourceStmt stmt) throws DdlException {\n-        lock.lock();\n-        try {\n-            if (stmt.getResourceType() != ResourceType.SPARK) {\n-                throw new DdlException(\"Only support Spark resource.\");\n-            }\n-\n-            String resourceName = stmt.getResourceName();\n-            if (nameToResource.containsKey(resourceName)) {\n-                throw new DdlException(\"Resource(\" + resourceName + \") already exist\");\n-            }\n-\n-            Resource resource = Resource.fromStmt(stmt);\n-            nameToResource.put(resourceName, resource);\n-            // log add\n-            Catalog.getInstance().getEditLog().logCreateResource(resource);\n-            LOG.info(\"create resource success. resource: {}\", resource);\n-        } finally {\n-            lock.unlock();\n-        }\n-    }\n-\n-    public void replayCreateResource(Resource resource) {\n-        lock.lock();\n-        try {\n-            nameToResource.put(resource.getName(), resource);\n-        } finally {\n-            lock.unlock();\n-        }\n-    }\n-\n-    public void dropResource(DropResourceStmt stmt) throws DdlException {\n-        lock.lock();\n-        try {\n-            String name = stmt.getResourceName();\n-            if (!nameToResource.containsKey(name)) {\n-                throw new DdlException(\"Resource(\" + name + \") does not exist\");\n-            }\n-\n-            nameToResource.remove(name);\n-            // log drop\n-            Catalog.getInstance().getEditLog().logDropResource(name);\n-            LOG.info(\"drop resource success. resource name: {}\", name);\n-        } finally {\n-            lock.unlock();\n-        }\n-    }\n-\n-    public void replayDropResource(String name) {\n-        lock.lock();\n-        try {\n-            nameToResource.remove(name);\n-        } finally {\n-            lock.unlock();\n-        }\n-    }\n-\n-    public boolean containsResource(String name) {\n-        lock.lock();\n-        try {\n-            return nameToResource.containsKey(name);\n-        } finally {\n-            lock.unlock();\n-        }\n-    }\n-\n-    public Resource getResource(String name) {\n-        lock.lock();\n-        try {\n-            return nameToResource.get(name);\n-        } finally {\n-            lock.unlock();\n-        }\n-    }\n-\n-    public int getResourceNum() {\n-        return nameToResource.size();\n-    }\n-\n-    public List<List<String>> getResourcesInfo() {\n-        return procNode.fetchResult().getRows();\n-    }\n-\n-    public ResourceProcNode getProcNode() {\n-        return procNode;\n-    }\n-\n-    @Override\n-    public void write(DataOutput out) throws IOException {\n-        out.writeInt(nameToResource.size());\n-        for (Resource resource : nameToResource.values()) {\n-            resource.write(out);\n-        }\n-    }\n-\n-    public void readFields(DataInput in) throws IOException {\n-        int count = in.readInt();\n-        for (long i = 0; i < count; ++i) {\n-            Resource resource = Resource.read(in);\n-            replayCreateResource(resource);\n-        }\n-    }\n-\n-    public class ResourceProcNode implements ProcNodeInterface {\n-        @Override\n-        public ProcResult fetchResult() {\n-            BaseProcResult result = new BaseProcResult();\n-            result.setNames(RESOURCE_PROC_NODE_TITLE_NAMES);\n-\n-            lock.lock();\n-            try {\n-                for (Map.Entry<String, Resource> entry : nameToResource.entrySet()) {\n-                    Resource resource = entry.getValue();\n-                    // check resource privs\n-                    if (!Catalog.getCurrentCatalog().getAuth().checkResourcePriv(ConnectContext.get(), resource.getName(),\n-                                                                                 PrivPredicate.SHOW)) {\n-                        continue;\n-                    }\n-                    resource.getProcNodeData(result);\n-                }\n-            } finally {\n-                lock.unlock();\n-            }\n-            return result;\n-        }\n-    }\n-}\n"}}, {"oid": "acebbafa85e1de6d0ab27384ffa27e2224e1f0e1", "url": "https://github.com/apache/incubator-doris/commit/acebbafa85e1de6d0ab27384ffa27e2224e1f0e1", "message": "Merge branch 'master' of https://github.com/apache/incubator-doris", "committedDate": "2020-05-25T15:41:16Z", "type": "commit"}, {"oid": "5de3927bb3cf36099d7983067c146e4058bae900", "url": "https://github.com/apache/incubator-doris/commit/5de3927bb3cf36099d7983067c146e4058bae900", "message": "Add spark etl cluster and cluster manager", "committedDate": "2020-05-25T15:43:11Z", "type": "commit"}, {"oid": "8518bf99601ae94cd70dc7ce104e175d3c5cfb71", "url": "https://github.com/apache/incubator-doris/commit/8518bf99601ae94cd70dc7ce104e175d3c5cfb71", "message": "Add show load clusters", "committedDate": "2020-05-25T15:43:11Z", "type": "commit"}, {"oid": "9c1e56e9a0e7c72c5985da14c7b276882649e15c", "url": "https://github.com/apache/incubator-doris/commit/9c1e56e9a0e7c72c5985da14c7b276882649e15c", "message": "Fix update spark etl cluster bug", "committedDate": "2020-05-25T15:43:11Z", "type": "commit"}, {"oid": "7a2ad993cb15147bb26493aa73d78fb157dad29b", "url": "https://github.com/apache/incubator-doris/commit/7a2ad993cb15147bb26493aa73d78fb157dad29b", "message": "Add new spark load manual doc", "committedDate": "2020-05-25T15:43:11Z", "type": "commit"}, {"oid": "3389a205adf0f5c7d6bf0badff0f8468daa1ed3d", "url": "https://github.com/apache/incubator-doris/commit/3389a205adf0f5c7d6bf0badff0f8468daa1ed3d", "message": "Add new resource managment", "committedDate": "2020-05-25T15:43:12Z", "type": "commit"}, {"oid": "29fb4508559c017cc93ae15d26bf3dc2828099cf", "url": "https://github.com/apache/incubator-doris/commit/29fb4508559c017cc93ae15d26bf3dc2828099cf", "message": "Update doc", "committedDate": "2020-05-25T15:43:12Z", "type": "commit"}, {"oid": "1cd02ae3d777d5420048de720668d21f31793cc9", "url": "https://github.com/apache/incubator-doris/commit/1cd02ae3d777d5420048de720668d21f31793cc9", "message": "Fix ut bug", "committedDate": "2020-05-25T15:43:12Z", "type": "commit"}, {"oid": "d22920711fafbd51e0e3c898417957d939db6d22", "url": "https://github.com/apache/incubator-doris/commit/d22920711fafbd51e0e3c898417957d939db6d22", "message": "update according to review and remove resource persist log", "committedDate": "2020-05-25T15:43:12Z", "type": "commit"}, {"oid": "b7b8a668cea89196d311d4e191d1d96d743cd06f", "url": "https://github.com/apache/incubator-doris/commit/b7b8a668cea89196d311d4e191d1d96d743cd06f", "message": "Fix load resources from image", "committedDate": "2020-05-25T15:43:12Z", "type": "commit"}, {"oid": "f3aa3818f8278cbd129424596a85d865d0d91d5b", "url": "https://github.com/apache/incubator-doris/commit/f3aa3818f8278cbd129424596a85d865d0d91d5b", "message": "Add todo comment and use gson to persist ResourceMgr", "committedDate": "2020-05-25T15:43:12Z", "type": "commit"}, {"oid": "d725d71054c9c4d0cf8c1ac18757df33bd4a59c8", "url": "https://github.com/apache/incubator-doris/commit/d725d71054c9c4d0cf8c1ac18757df33bd4a59c8", "message": "Update spark load manual", "committedDate": "2020-05-25T15:43:12Z", "type": "commit"}, {"oid": "d725d71054c9c4d0cf8c1ac18757df33bd4a59c8", "url": "https://github.com/apache/incubator-doris/commit/d725d71054c9c4d0cf8c1ac18757df33bd4a59c8", "message": "Update spark load manual", "committedDate": "2020-05-25T15:43:12Z", "type": "forcePushed"}, {"oid": "dbcbc34c6d5186ddd3f8388be5d514fb1f0e4130", "url": "https://github.com/apache/incubator-doris/commit/dbcbc34c6d5186ddd3f8388be5d514fb1f0e4130", "message": "Update website sidebar", "committedDate": "2020-05-26T06:35:52Z", "type": "commit"}]}