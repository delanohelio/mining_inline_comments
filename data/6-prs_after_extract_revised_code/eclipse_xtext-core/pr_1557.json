{"pr_number": 1557, "pr_title": "made ContentAssistFragment2 better customizable", "pr_createdAt": "2020-08-19T08:19:15Z", "pr_url": "https://github.com/eclipse/xtext-core/pull/1557", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg0OTU4NQ==", "url": "https://github.com/eclipse/xtext-core/pull/1557#discussion_r472849585", "bodyText": "the current api here really is bad and i did not want to break. what do you think?", "author": "cdietrich", "createdAt": "2020-08-19T08:19:57Z", "path": "org.eclipse.xtext.xtext.generator/xtend-gen/org/eclipse/xtext/xtext/generator/ui/contentAssist/ContentAssistFragment2.java", "diffHunk": "@@ -241,6 +241,17 @@ protected GeneratedJavaFileAccess generateGenJavaProposalProvider() {\n         return _xblockexpression_1;\n       };\n       final ArrayList<AbstractRule> remainingRules = IterableExtensions.<AbstractRule, ArrayList<AbstractRule>>fold(this.getGrammar().getRules(), CollectionLiterals.<AbstractRule>newArrayList(), _function_1);\n+      _xblockexpression = this.generateGenJavaProposalProvider(assignments, remainingRules);\n+    }\n+    return _xblockexpression;\n+  }\n+  \n+  /**\n+   * @since 2.23\n+   */\n+  protected GeneratedJavaFileAccess generateGenJavaProposalProvider(final List<Assignment> assignments, final List<AbstractRule> remainingRules) {", "originalCommit": "e38a4e32e1ac81321e80a17a2d9013dba3bee517", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a894025d8b264b24f2e86c76d476f2fea1fa816", "chunk": "diff --git a/org.eclipse.xtext.xtext.generator/xtend-gen/org/eclipse/xtext/xtext/generator/ui/contentAssist/ContentAssistFragment2.java b/org.eclipse.xtext.xtext.generator/xtend-gen/org/eclipse/xtext/xtext/generator/ui/contentAssist/ContentAssistFragment2.java\nindex 94bac724c..190c0b574 100644\n--- a/org.eclipse.xtext.xtext.generator/xtend-gen/org/eclipse/xtext/xtext/generator/ui/contentAssist/ContentAssistFragment2.java\n+++ b/org.eclipse.xtext.xtext.generator/xtend-gen/org/eclipse/xtext/xtext/generator/ui/contentAssist/ContentAssistFragment2.java\n\n@@ -210,66 +210,72 @@ public class ContentAssistFragment2 extends AbstractInheritingFragment {\n     this.fileAccessFactory.createJavaFile(_proposalProviderClass, _client).writeTo(this.getProjectConfig().getEclipsePlugin().getSrc());\n   }\n   \n-  protected GeneratedJavaFileAccess generateGenJavaProposalProvider() {\n-    GeneratedJavaFileAccess _xblockexpression = null;\n-    {\n-      final Set<String> excludedFqnFeatureNames = this.getFQFeatureNamesToExclude(this.getGrammar());\n-      final HashSet<String> processedNames = CollectionLiterals.<String>newHashSet();\n-      final Function2<ArrayList<Assignment>, Assignment, ArrayList<Assignment>> _function = (ArrayList<Assignment> candidates, Assignment assignment) -> {\n-        ArrayList<Assignment> _xblockexpression_1 = null;\n-        {\n-          final String fqFeatureName = this.getFQFeatureName(assignment);\n-          if (((!processedNames.contains(fqFeatureName)) && (!excludedFqnFeatureNames.contains(fqFeatureName)))) {\n-            processedNames.add(fqFeatureName);\n-            candidates.add(assignment);\n-          }\n-          _xblockexpression_1 = candidates;\n-        }\n-        return _xblockexpression_1;\n-      };\n-      final ArrayList<Assignment> assignments = IterableExtensions.<Assignment, ArrayList<Assignment>>fold(GrammarUtil.containedAssignments(this.getGrammar()), CollectionLiterals.<Assignment>newArrayList(), _function);\n-      final Function2<ArrayList<AbstractRule>, AbstractRule, ArrayList<AbstractRule>> _function_1 = (ArrayList<AbstractRule> candidates, AbstractRule rule) -> {\n-        ArrayList<AbstractRule> _xblockexpression_1 = null;\n-        {\n-          final String fqnFeatureName = this.getFQFeatureName(rule);\n-          if (((!processedNames.contains(fqnFeatureName)) && (!excludedFqnFeatureNames.contains(fqnFeatureName)))) {\n-            processedNames.add(fqnFeatureName);\n-            candidates.add(rule);\n-          }\n-          _xblockexpression_1 = candidates;\n+  protected void generateGenJavaProposalProvider() {\n+    final Set<String> excludedFqnFeatureNames = this.getFQFeatureNamesToExclude(this.getGrammar());\n+    final HashSet<String> processedNames = CollectionLiterals.<String>newHashSet();\n+    final List<Assignment> assignments = this.getAssignments(processedNames, excludedFqnFeatureNames);\n+    final List<AbstractRule> remainingRules = this.getRules(processedNames, excludedFqnFeatureNames);\n+    this.generateGenJavaProposalProvider(assignments, remainingRules);\n+  }\n+  \n+  /**\n+   * @since 2.23\n+   */\n+  protected List<Assignment> getAssignments(final Set<String> processedNames, final Set<String> excludedFqnFeatureNames) {\n+    final Function2<ArrayList<Assignment>, Assignment, ArrayList<Assignment>> _function = (ArrayList<Assignment> candidates, Assignment assignment) -> {\n+      ArrayList<Assignment> _xblockexpression = null;\n+      {\n+        final String fqFeatureName = this.getFQFeatureName(assignment);\n+        if (((!processedNames.contains(fqFeatureName)) && (!excludedFqnFeatureNames.contains(fqFeatureName)))) {\n+          processedNames.add(fqFeatureName);\n+          candidates.add(assignment);\n         }\n-        return _xblockexpression_1;\n-      };\n-      final ArrayList<AbstractRule> remainingRules = IterableExtensions.<AbstractRule, ArrayList<AbstractRule>>fold(this.getGrammar().getRules(), CollectionLiterals.<AbstractRule>newArrayList(), _function_1);\n-      _xblockexpression = this.generateGenJavaProposalProvider(assignments, remainingRules);\n-    }\n-    return _xblockexpression;\n+        _xblockexpression = candidates;\n+      }\n+      return _xblockexpression;\n+    };\n+    return IterableExtensions.<Assignment, ArrayList<Assignment>>fold(GrammarUtil.containedAssignments(this.getGrammar()), CollectionLiterals.<Assignment>newArrayList(), _function);\n   }\n   \n   /**\n    * @since 2.23\n    */\n-  protected GeneratedJavaFileAccess generateGenJavaProposalProvider(final List<Assignment> assignments, final List<AbstractRule> remainingRules) {\n-    GeneratedJavaFileAccess _xblockexpression = null;\n-    {\n-      TypeReference _xifexpression = null;\n-      boolean _isGenerateStub = this.isGenerateStub();\n-      if (_isGenerateStub) {\n-        _xifexpression = this.getGenProposalProviderClass(this.getGrammar());\n-      } else {\n-        _xifexpression = this.getProposalProviderClass(this.getGrammar());\n+  protected List<AbstractRule> getRules(final Set<String> processedNames, final Set<String> excludedFqnFeatureNames) {\n+    final Function2<ArrayList<AbstractRule>, AbstractRule, ArrayList<AbstractRule>> _function = (ArrayList<AbstractRule> candidates, AbstractRule rule) -> {\n+      ArrayList<AbstractRule> _xblockexpression = null;\n+      {\n+        final String fqnFeatureName = this.getFQFeatureName(rule);\n+        if (((!processedNames.contains(fqnFeatureName)) && (!excludedFqnFeatureNames.contains(fqnFeatureName)))) {\n+          processedNames.add(fqnFeatureName);\n+          candidates.add(rule);\n+        }\n+        _xblockexpression = candidates;\n       }\n-      final TypeReference genClass = _xifexpression;\n-      final TypeReference superClass = this.getGenProposalProviderSuperClass(this.getGrammar());\n-      _xblockexpression = this.generateGenJavaProposalProvider(assignments, remainingRules, genClass, superClass);\n+      return _xblockexpression;\n+    };\n+    return IterableExtensions.<AbstractRule, ArrayList<AbstractRule>>fold(this.getGrammar().getRules(), CollectionLiterals.<AbstractRule>newArrayList(), _function);\n+  }\n+  \n+  /**\n+   * @since 2.23\n+   */\n+  protected void generateGenJavaProposalProvider(final List<Assignment> assignments, final List<AbstractRule> rules) {\n+    TypeReference _xifexpression = null;\n+    boolean _isGenerateStub = this.isGenerateStub();\n+    if (_isGenerateStub) {\n+      _xifexpression = this.getGenProposalProviderClass(this.getGrammar());\n+    } else {\n+      _xifexpression = this.getProposalProviderClass(this.getGrammar());\n     }\n-    return _xblockexpression;\n+    final TypeReference genClass = _xifexpression;\n+    final TypeReference superClass = this.getGenProposalProviderSuperClass(this.getGrammar());\n+    this.generateGenJavaProposalProvider(assignments, rules, genClass, superClass);\n   }\n   \n   /**\n    * @since 2.23\n    */\n-  protected GeneratedJavaFileAccess generateGenJavaProposalProvider(final List<Assignment> assignments, final List<AbstractRule> remainingRules, final TypeReference genClass, final TypeReference superClass) {\n+  protected void generateGenJavaProposalProvider(final List<Assignment> assignments, final List<AbstractRule> rules, final TypeReference genClass, final TypeReference superClass) {\n     GeneratedJavaFileAccess _createGeneratedJavaFile = this.fileAccessFactory.createGeneratedJavaFile(genClass);\n     final Procedure1<GeneratedJavaFileAccess> _function = (GeneratedJavaFileAccess it) -> {\n       StringConcatenationClient _client = new StringConcatenationClient() {\n"}}, {"oid": "4a894025d8b264b24f2e86c76d476f2fea1fa816", "url": "https://github.com/eclipse/xtext-core/commit/4a894025d8b264b24f2e86c76d476f2fea1fa816", "message": "made ContentAssistFragment2 better customizable\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-08-24T07:45:53Z", "type": "forcePushed"}, {"oid": "db33633f05cd201535d5e83866c8203388abaad1", "url": "https://github.com/eclipse/xtext-core/commit/db33633f05cd201535d5e83866c8203388abaad1", "message": "made ContentAssistFragment2 better customizable\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-08-24T07:51:17Z", "type": "commit"}, {"oid": "db33633f05cd201535d5e83866c8203388abaad1", "url": "https://github.com/eclipse/xtext-core/commit/db33633f05cd201535d5e83866c8203388abaad1", "message": "made ContentAssistFragment2 better customizable\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-08-24T07:51:17Z", "type": "forcePushed"}]}