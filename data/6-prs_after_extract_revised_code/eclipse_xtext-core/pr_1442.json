{"pr_number": 1442, "pr_title": "[eclipse/xtext#1679] ported xtend code to java", "pr_createdAt": "2020-04-11T18:27:59Z", "pr_url": "https://github.com/eclipse/xtext-core/pull/1442", "timeline": [{"oid": "ff0b84da44882674c323cc7359a3eb71f64b85a8", "url": "https://github.com/eclipse/xtext-core/commit/ff0b84da44882674c323cc7359a3eb71f64b85a8", "message": "[eclipse/xtext#1679] ported xtend code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-11T18:28:59Z", "type": "forcePushed"}, {"oid": "3fed43cf0a0498256c77d1c47be78ce34b408461", "url": "https://github.com/eclipse/xtext-core/commit/3fed43cf0a0498256c77d1c47be78ce34b408461", "message": "[eclipse/xtext#1679] ported xtend code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-11T18:44:58Z", "type": "forcePushed"}, {"oid": "a4db8e6ac4d870b48b0223ac1805f601620dfe46", "url": "https://github.com/eclipse/xtext-core/commit/a4db8e6ac4d870b48b0223ac1805f601620dfe46", "message": "[eclipse/xtext#1679] ported xtend code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-11T18:47:16Z", "type": "forcePushed"}, {"oid": "0f5e7a063a8c0cbaf8220c9615b0ee20b6897129", "url": "https://github.com/eclipse/xtext-core/commit/0f5e7a063a8c0cbaf8220c9615b0ee20b6897129", "message": "[eclipse/xtext#1679] ported xtend code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-11T18:50:45Z", "type": "forcePushed"}, {"oid": "b1b15c50716e15675fc391aaf233802584aa6866", "url": "https://github.com/eclipse/xtext-core/commit/b1b15c50716e15675fc391aaf233802584aa6866", "message": "[eclipse/xtext#1679] ported xtend code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-11T18:59:24Z", "type": "forcePushed"}, {"oid": "3b85dbbe48f3b4d8dc2aeeb854331f4189443e84", "url": "https://github.com/eclipse/xtext-core/commit/3b85dbbe48f3b4d8dc2aeeb854331f4189443e84", "message": "[eclipse/xtext#1679] ported xtend code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-11T19:31:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNDEyMA==", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407104120", "bodyText": "NL", "author": "nbhusare", "createdAt": "2020-04-11T19:53:32Z", "path": "org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/server/AbstractTestLangLanguageServerTest.java", "diffHunk": "@@ -1,21 +1,22 @@\n-/**\n- * Copyright (c) 2016 TypeFox GmbH (http://www.typefox.io) and others.\n+/*******************************************************************************\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n  * This program and the accompanying materials are made available under the\n  * terms of the Eclipse Public License 2.0 which is available at\n  * http://www.eclipse.org/legal/epl-2.0.\n- * \n+ *\n  * SPDX-License-Identifier: EPL-2.0\n- */\n+ *******************************************************************************/\n package org.eclipse.xtext.ide.tests.server;\n \n import org.eclipse.xtext.testing.AbstractLanguageServerTest;\n \n /**\n  * @author akosyakov - Initial contribution and API\n  */\n-@SuppressWarnings(\"all\")\n public abstract class AbstractTestLangLanguageServerTest extends AbstractLanguageServerTest {\n-  public AbstractTestLangLanguageServerTest() {\n-    super(\"testlang\");\n-  }\n-}\n+    \n+    public AbstractTestLangLanguageServerTest() {\n+        super(\"testlang\");\n+    }\n+    \n+}", "originalCommit": "3b85dbbe48f3b4d8dc2aeeb854331f4189443e84", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aed16fcd87bee2d2f27a8be37d355718284b71c3", "chunk": "diff --git a/org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/server/AbstractTestLangLanguageServerTest.java b/org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/server/AbstractTestLangLanguageServerTest.java\nindex b05419b83..6aeaf4318 100644\n--- a/org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/server/AbstractTestLangLanguageServerTest.java\n+++ b/org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/server/AbstractTestLangLanguageServerTest.java\n\n@@ -14,9 +14,9 @@ import org.eclipse.xtext.testing.AbstractLanguageServerTest;\n  * @author akosyakov - Initial contribution and API\n  */\n public abstract class AbstractTestLangLanguageServerTest extends AbstractLanguageServerTest {\n-    \n-    public AbstractTestLangLanguageServerTest() {\n-        super(\"testlang\");\n-    }\n-    \n-}\n\\ No newline at end of file\n+\n+\tpublic AbstractTestLangLanguageServerTest() {\n+\t\tsuper(\"testlang\");\n+\t}\n+\n+}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNDQ2NQ==", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407104465", "bodyText": "You could just do - private final Map<String, ExecutorService> instanceCache = new HashMap<>(3)", "author": "nbhusare", "createdAt": "2020-04-11T19:57:13Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/ExecutorServiceProvider.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide;\n+\n+import java.util.Map;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+import org.eclipse.xtext.util.DisposableRegistry;\n+import org.eclipse.xtext.util.IDisposable;\n+\n+import com.google.common.collect.Maps;\n+import com.google.inject.Inject;\n+import com.google.inject.Provider;\n+import com.google.inject.Singleton;\n+\n+/**\n+ * Provider for executor services. By calling {@link #dispose()} all created executor services are shut down.\n+ * <p>\n+ * In some situations it is necessary to use multiple instances of executor services in order to avoid deadlocks. That\n+ * can be achieved with the {@link #get(String)}\ufffdmethod, which will return a different instance for each key.\n+ */\n+@Singleton\n+public class ExecutorServiceProvider implements Provider<ExecutorService>, IDisposable {\n+\t@Inject\n+\tpublic void registerTo(DisposableRegistry disposableRegistry) {\n+\t\tdisposableRegistry.register(this);\n+\t}\n+\n+\tprivate final Map<String, ExecutorService> instanceCache = Maps", "originalCommit": "3b85dbbe48f3b4d8dc2aeeb854331f4189443e84", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aed16fcd87bee2d2f27a8be37d355718284b71c3", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/ExecutorServiceProvider.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/ExecutorServiceProvider.java\nindex 16f7ff220..6175cfd76 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/ExecutorServiceProvider.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/ExecutorServiceProvider.java\n\n@@ -33,8 +33,7 @@ public class ExecutorServiceProvider implements Provider<ExecutorService>, IDisp\n \t\tdisposableRegistry.register(this);\n \t}\n \n-\tprivate final Map<String, ExecutorService> instanceCache = Maps\n-\t\t\t.<String, ExecutorService>newHashMapWithExpectedSize(3);\n+\tprivate final Map<String, ExecutorService> instanceCache = Maps.newHashMapWithExpectedSize(3);\n \n \t@Override\n \tpublic ExecutorService get() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNDYyMQ==", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407104621", "bodyText": "instanceCache.clear()", "author": "nbhusare", "createdAt": "2020-04-11T19:58:48Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/ExecutorServiceProvider.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide;\n+\n+import java.util.Map;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+import org.eclipse.xtext.util.DisposableRegistry;\n+import org.eclipse.xtext.util.IDisposable;\n+\n+import com.google.common.collect.Maps;\n+import com.google.inject.Inject;\n+import com.google.inject.Provider;\n+import com.google.inject.Singleton;\n+\n+/**\n+ * Provider for executor services. By calling {@link #dispose()} all created executor services are shut down.\n+ * <p>\n+ * In some situations it is necessary to use multiple instances of executor services in order to avoid deadlocks. That\n+ * can be achieved with the {@link #get(String)}\ufffdmethod, which will return a different instance for each key.\n+ */\n+@Singleton\n+public class ExecutorServiceProvider implements Provider<ExecutorService>, IDisposable {\n+\t@Inject\n+\tpublic void registerTo(DisposableRegistry disposableRegistry) {\n+\t\tdisposableRegistry.register(this);\n+\t}\n+\n+\tprivate final Map<String, ExecutorService> instanceCache = Maps\n+\t\t\t.<String, ExecutorService>newHashMapWithExpectedSize(3);\n+\n+\t@Override\n+\tpublic ExecutorService get() {\n+\t\treturn get(null);\n+\t}\n+\n+\tpublic ExecutorService get(String key) {\n+\t\tExecutorService result = instanceCache.get(key);\n+\t\tif (result == null) {\n+\t\t\tsynchronized (instanceCache) {\n+\t\t\t\tresult = instanceCache.get(key);\n+\t\t\t\tif (result == null) {\n+\t\t\t\t\tresult = createInstance(key);\n+\t\t\t\t\tinstanceCache.put(key, result);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn result;\n+\t}\n+\n+\tprotected ExecutorService createInstance(String key) {\n+\t\treturn Executors.newCachedThreadPool();\n+\t}\n+\n+\t@Override\n+\tpublic void dispose() {\n+\t\tfor (ExecutorService executorService : instanceCache.values()) {\n+\t\t\texecutorService.shutdown();\n+\t\t}\n+\t\tthis.instanceCache.clear();", "originalCommit": "3b85dbbe48f3b4d8dc2aeeb854331f4189443e84", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aed16fcd87bee2d2f27a8be37d355718284b71c3", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/ExecutorServiceProvider.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/ExecutorServiceProvider.java\nindex 16f7ff220..6175cfd76 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/ExecutorServiceProvider.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/ExecutorServiceProvider.java\n\n@@ -33,8 +33,7 @@ public class ExecutorServiceProvider implements Provider<ExecutorService>, IDisp\n \t\tdisposableRegistry.register(this);\n \t}\n \n-\tprivate final Map<String, ExecutorService> instanceCache = Maps\n-\t\t\t.<String, ExecutorService>newHashMapWithExpectedSize(3);\n+\tprivate final Map<String, ExecutorService> instanceCache = Maps.newHashMapWithExpectedSize(3);\n \n \t@Override\n \tpublic ExecutorService get() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNTgxNg==", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407105816", "bodyText": "How about replacing the above code with something like  return \"imageID's :\" + imageIDs.toString(), so that we can remove the reference to the ToStringBuilder type?", "author": "nbhusare", "createdAt": "2020-04-11T20:11:33Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/labels/AlternativeImageDescription.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.labels;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.List;\n+import org.eclipse.xtext.ide.labels.IImageDescription;\n+import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;\n+\n+public class AlternativeImageDescription implements IImageDescription {\n+\tprivate final List<String> imageIDs;\n+\n+\tpublic AlternativeImageDescription(Iterable<String> imageIDs) {\n+\t\tthis.imageIDs = ImmutableList.<String>copyOf(imageIDs);\n+\t}\n+\n+\t@Override\n+\tpublic int hashCode() {\n+\t\tfinal int prime = 31;\n+\t\tint result = 1;\n+\t\tresult = prime * result + ((imageIDs == null) ? 0 : imageIDs.hashCode());\n+\t\treturn result;\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object obj) {\n+\t\tif (this == obj)\n+\t\t\treturn true;\n+\t\tif (obj == null)\n+\t\t\treturn false;\n+\t\tif (getClass() != obj.getClass())\n+\t\t\treturn false;\n+\t\tAlternativeImageDescription other = (AlternativeImageDescription) obj;\n+\t\tif (imageIDs == null) {\n+\t\t\tif (other.imageIDs != null)\n+\t\t\t\treturn false;\n+\t\t} else if (!imageIDs.equals(other.imageIDs))\n+\t\t\treturn false;\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\tToStringBuilder b = new ToStringBuilder(this);\n+\t\tb.add(\"imageIDs\", imageIDs);\n+\t\treturn b.toString();", "originalCommit": "3b85dbbe48f3b4d8dc2aeeb854331f4189443e84", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE1NTkzNg==", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407155936", "bodyText": "i wanted to keep the old impl for all of the toStrings", "author": "cdietrich", "createdAt": "2020-04-12T06:55:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNTgxNg=="}], "type": "inlineReview", "revised_code": {"commit": "188c0937b5be88bbc2e077e242002aae5db2a7f3", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/labels/AlternativeImageDescription.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/labels/AlternativeImageDescription.java\nindex 142a6b9aa..30cbc7ef4 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/labels/AlternativeImageDescription.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/labels/AlternativeImageDescription.java\n\n@@ -17,7 +17,7 @@ public class AlternativeImageDescription implements IImageDescription {\n \tprivate final List<String> imageIDs;\n \n \tpublic AlternativeImageDescription(Iterable<String> imageIDs) {\n-\t\tthis.imageIDs = ImmutableList.<String>copyOf(imageIDs);\n+\t\tthis.imageIDs = ImmutableList.copyOf(imageIDs);\n \t}\n \n \t@Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNTkyMA==", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407105920", "bodyText": "Can we remove the reference to the ToStringBuilder if possible ?", "author": "nbhusare", "createdAt": "2020-04-11T20:12:36Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/labels/DecoratedImageDescription.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.labels;\n+\n+import java.util.List;\n+\n+import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+public class DecoratedImageDescription implements IImageDescription {\n+\tprivate final IImageDescription baseImage;\n+\n+\tprivate final List<IImageDescription> decorators;\n+\n+\tpublic DecoratedImageDescription(IImageDescription baseImage, IImageDescription... decorators) {\n+\t\tthis.baseImage = baseImage;\n+\t\tthis.decorators = ImmutableList.<IImageDescription>copyOf(decorators);\n+\t}\n+\n+\t@Override\n+\tpublic int hashCode() {\n+\t\tfinal int prime = 31;\n+\t\tint result = 1;\n+\t\tresult = prime * result + ((baseImage == null) ? 0 : baseImage.hashCode());\n+\t\tresult = prime * result + ((decorators == null) ? 0 : decorators.hashCode());\n+\t\treturn result;\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object obj) {\n+\t\tif (this == obj)\n+\t\t\treturn true;\n+\t\tif (obj == null)\n+\t\t\treturn false;\n+\t\tif (getClass() != obj.getClass())\n+\t\t\treturn false;\n+\t\tDecoratedImageDescription other = (DecoratedImageDescription) obj;\n+\t\tif (baseImage == null) {\n+\t\t\tif (other.baseImage != null)\n+\t\t\t\treturn false;\n+\t\t} else if (!baseImage.equals(other.baseImage))\n+\t\t\treturn false;\n+\t\tif (decorators == null) {\n+\t\t\tif (other.decorators != null)\n+\t\t\t\treturn false;\n+\t\t} else if (!decorators.equals(other.decorators))\n+\t\t\treturn false;\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\tToStringBuilder b = new ToStringBuilder(this);", "originalCommit": "3b85dbbe48f3b4d8dc2aeeb854331f4189443e84", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE1NTk3Ng==", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407155976", "bodyText": "can be refactored lated. i want to keep the current behaviour", "author": "cdietrich", "createdAt": "2020-04-12T06:55:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNTkyMA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNjU2OA==", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407106568", "bodyText": "Please remove super()", "author": "nbhusare", "createdAt": "2020-04-11T20:18:58Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/labels/SimpleImageDescription.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.labels;\n+\n+import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;\n+\n+public class SimpleImageDescription implements IImageDescription {\n+\tprivate final String imageID;\n+\n+\tpublic SimpleImageDescription(String imageID) {\n+\t\tsuper();", "originalCommit": "3b85dbbe48f3b4d8dc2aeeb854331f4189443e84", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aed16fcd87bee2d2f27a8be37d355718284b71c3", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/labels/SimpleImageDescription.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/labels/SimpleImageDescription.java\nindex 06795a001..0d3e7a69f 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/labels/SimpleImageDescription.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/labels/SimpleImageDescription.java\n\n@@ -14,7 +14,6 @@ public class SimpleImageDescription implements IImageDescription {\n \tprivate final String imageID;\n \n \tpublic SimpleImageDescription(String imageID) {\n-\t\tsuper();\n \t\tthis.imageID = imageID;\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNjY2OA==", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407106668", "bodyText": "return imageID", "author": "nbhusare", "createdAt": "2020-04-11T20:19:54Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/labels/SimpleImageDescription.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.labels;\n+\n+import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;\n+\n+public class SimpleImageDescription implements IImageDescription {\n+\tprivate final String imageID;\n+\n+\tpublic SimpleImageDescription(String imageID) {\n+\t\tsuper();\n+\t\tthis.imageID = imageID;\n+\t}\n+\n+\t@Override\n+\tpublic int hashCode() {\n+\t\tfinal int prime = 31;\n+\t\tint result = 1;\n+\t\tresult = prime * result + ((imageID == null) ? 0 : imageID.hashCode());\n+\t\treturn result;\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object obj) {\n+\t\tif (this == obj)\n+\t\t\treturn true;\n+\t\tif (obj == null)\n+\t\t\treturn false;\n+\t\tif (getClass() != obj.getClass())\n+\t\t\treturn false;\n+\t\tSimpleImageDescription other = (SimpleImageDescription) obj;\n+\t\tif (imageID == null) {\n+\t\t\tif (other.imageID != null)\n+\t\t\t\treturn false;\n+\t\t} else if (!imageID.equals(other.imageID))\n+\t\t\treturn false;\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\tToStringBuilder b = new ToStringBuilder(this);", "originalCommit": "3b85dbbe48f3b4d8dc2aeeb854331f4189443e84", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE1NjA4Mw==", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407156083", "bodyText": "again i want to keep the behaviour of the old toString", "author": "cdietrich", "createdAt": "2020-04-12T06:56:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNjY2OA=="}], "type": "inlineReview", "revised_code": {"commit": "aed16fcd87bee2d2f27a8be37d355718284b71c3", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/labels/SimpleImageDescription.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/labels/SimpleImageDescription.java\nindex 06795a001..0d3e7a69f 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/labels/SimpleImageDescription.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/labels/SimpleImageDescription.java\n\n@@ -14,7 +14,6 @@ public class SimpleImageDescription implements IImageDescription {\n \tprivate final String imageID;\n \n \tpublic SimpleImageDescription(String imageID) {\n-\t\tsuper();\n \t\tthis.imageID = imageID;\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwODE4MQ==", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407108181", "bodyText": "How about adding some documentation to this method.\nCalculates the simple-name based on the type of the passed {@code element}.\nIf the {@code element} is an instance of {@code EObject}, the value of the {@code name} attribute is returned.\nIf the {@code element} is an instance of {@code IEObjectDescription}, the value of the {@link QualifiedName#getLastSegment()} is returned.\nA {@code null} value is returned otherwise.", "author": "nbhusare", "createdAt": "2020-04-11T20:35:52Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/labels/SimpleNameLabelProvider.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.labels;\n+\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.xtext.ide.labels.INameLabelProvider;\n+import org.eclipse.xtext.resource.IEObjectDescription;\n+import org.eclipse.xtext.util.SimpleAttributeResolver;\n+\n+public class SimpleNameLabelProvider implements INameLabelProvider {\n+\t@Override\n+\tpublic String getNameLabel(Object element) {", "originalCommit": "3b85dbbe48f3b4d8dc2aeeb854331f4189443e84", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aed16fcd87bee2d2f27a8be37d355718284b71c3", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/labels/SimpleNameLabelProvider.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/labels/SimpleNameLabelProvider.java\nindex 08200def6..13f8a4595 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/labels/SimpleNameLabelProvider.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/labels/SimpleNameLabelProvider.java\n\n@@ -14,6 +14,13 @@ import org.eclipse.xtext.resource.IEObjectDescription;\n import org.eclipse.xtext.util.SimpleAttributeResolver;\n \n public class SimpleNameLabelProvider implements INameLabelProvider {\n+\t\n+\t/**\n+\t * Calculates the simple-name based on the type of the passed {@code element}. If the {@code element} is an instance\n+\t * of {@code EObject}, the value of the {@code name} attribute is returned. If the {@code element} is an instance of\n+\t * {@code IEObjectDescription}, the value of the {@link QualifiedName#getLastSegment()} is returned. A {@code null}\n+\t * value is returned otherwise.\n+\t */\n \t@Override\n \tpublic String getNameLabel(Object element) {\n \t\tif (element instanceof EObject) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwODY3NQ==", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407108675", "bodyText": "Please use a simple for-loop so that we can get rid of the the reference to the IterableExtensions type.", "author": "nbhusare", "createdAt": "2020-04-11T20:41:06Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/IRenameStrategy2.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.refactoring;\n+\n+import org.eclipse.emf.ecore.EAttribute;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.xtext.ide.serializer.IChangeSerializer;\n+import org.eclipse.xtext.resource.IResourceServiceProvider;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * Called to rename an element in the {@link IChangeSerializer} based refactoring.\n+ * \n+ * Clients may extend the {@link DefaultImpl} to customize the behavior or implement this interface directly.\n+ * \n+ * Changes are usually performed in the The {@link RenameContext}\n+ * \n+ * @author koehnlein - Initial contribution and API\n+ * @since 2.13\n+ */\n+public interface IRenameStrategy2 {\n+\tclass DefaultImpl implements IRenameStrategy2 {\n+\t\t@Inject\n+\t\tprivate IResourceServiceProvider resourceServiceProvider;\n+\n+\t\tpublic boolean canHandle(RenameChange change) {\n+\t\t\treturn resourceServiceProvider.canHandle(change.getTargetURI());\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void applyRename(RenameContext context) {\n+\t\t\tIterableExtensions.filter(context.getChanges(), (c) -> canHandle(c)).forEach((change) -> {", "originalCommit": "3b85dbbe48f3b4d8dc2aeeb854331f4189443e84", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aed16fcd87bee2d2f27a8be37d355718284b71c3", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/IRenameStrategy2.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/IRenameStrategy2.java\nindex b6037b050..32d740fc7 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/IRenameStrategy2.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/IRenameStrategy2.java\n\n@@ -37,11 +37,11 @@ public interface IRenameStrategy2 {\n \n \t\t@Override\n \t\tpublic void applyRename(RenameContext context) {\n-\t\t\tIterableExtensions.filter(context.getChanges(), (c) -> canHandle(c)).forEach((change) -> {\n-\t\t\t\tcontext.addModification(change, (EObject o) -> {\n-\t\t\t\t\tdoRename(o, change, context);\n-\t\t\t\t});\n-\t\t\t});\n+\t\t\tfor (RenameChange change : context.getChanges()) {\n+\t\t\t\tif (canHandle(change)) {\n+\t\t\t\t\tcontext.addModification(change, (EObject o) -> doRename(o, change, context));\n+\t\t\t\t}\n+\t\t\t}\n \t\t}\n \n \t\tprotected void doRename(EObject target, RenameChange change, RenameContext context) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwODcxMw==", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407108713", "bodyText": "context.addModification(change, (EObject o) -> doRename(o, change, context));", "author": "nbhusare", "createdAt": "2020-04-11T20:41:41Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/IRenameStrategy2.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.refactoring;\n+\n+import org.eclipse.emf.ecore.EAttribute;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.xtext.ide.serializer.IChangeSerializer;\n+import org.eclipse.xtext.resource.IResourceServiceProvider;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * Called to rename an element in the {@link IChangeSerializer} based refactoring.\n+ * \n+ * Clients may extend the {@link DefaultImpl} to customize the behavior or implement this interface directly.\n+ * \n+ * Changes are usually performed in the The {@link RenameContext}\n+ * \n+ * @author koehnlein - Initial contribution and API\n+ * @since 2.13\n+ */\n+public interface IRenameStrategy2 {\n+\tclass DefaultImpl implements IRenameStrategy2 {\n+\t\t@Inject\n+\t\tprivate IResourceServiceProvider resourceServiceProvider;\n+\n+\t\tpublic boolean canHandle(RenameChange change) {\n+\t\t\treturn resourceServiceProvider.canHandle(change.getTargetURI());\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void applyRename(RenameContext context) {\n+\t\t\tIterableExtensions.filter(context.getChanges(), (c) -> canHandle(c)).forEach((change) -> {\n+\t\t\t\tcontext.addModification(change, (EObject o) -> {", "originalCommit": "3b85dbbe48f3b4d8dc2aeeb854331f4189443e84", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aed16fcd87bee2d2f27a8be37d355718284b71c3", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/IRenameStrategy2.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/IRenameStrategy2.java\nindex b6037b050..32d740fc7 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/IRenameStrategy2.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/IRenameStrategy2.java\n\n@@ -37,11 +37,11 @@ public interface IRenameStrategy2 {\n \n \t\t@Override\n \t\tpublic void applyRename(RenameContext context) {\n-\t\t\tIterableExtensions.filter(context.getChanges(), (c) -> canHandle(c)).forEach((change) -> {\n-\t\t\t\tcontext.addModification(change, (EObject o) -> {\n-\t\t\t\t\tdoRename(o, change, context);\n-\t\t\t\t});\n-\t\t\t});\n+\t\t\tfor (RenameChange change : context.getChanges()) {\n+\t\t\t\tif (canHandle(change)) {\n+\t\t\t\t\tcontext.addModification(change, (EObject o) -> doRename(o, change, context));\n+\t\t\t\t}\n+\t\t\t}\n \t\t}\n \n \t\tprotected void doRename(EObject target, RenameChange change, RenameContext context) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwODc2MA==", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407108760", "bodyText": "a -> attribute", "author": "nbhusare", "createdAt": "2020-04-11T20:42:17Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/IRenameStrategy2.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.refactoring;\n+\n+import org.eclipse.emf.ecore.EAttribute;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.xtext.ide.serializer.IChangeSerializer;\n+import org.eclipse.xtext.resource.IResourceServiceProvider;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * Called to rename an element in the {@link IChangeSerializer} based refactoring.\n+ * \n+ * Clients may extend the {@link DefaultImpl} to customize the behavior or implement this interface directly.\n+ * \n+ * Changes are usually performed in the The {@link RenameContext}\n+ * \n+ * @author koehnlein - Initial contribution and API\n+ * @since 2.13\n+ */\n+public interface IRenameStrategy2 {\n+\tclass DefaultImpl implements IRenameStrategy2 {\n+\t\t@Inject\n+\t\tprivate IResourceServiceProvider resourceServiceProvider;\n+\n+\t\tpublic boolean canHandle(RenameChange change) {\n+\t\t\treturn resourceServiceProvider.canHandle(change.getTargetURI());\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void applyRename(RenameContext context) {\n+\t\t\tIterableExtensions.filter(context.getChanges(), (c) -> canHandle(c)).forEach((change) -> {\n+\t\t\t\tcontext.addModification(change, (EObject o) -> {\n+\t\t\t\t\tdoRename(o, change, context);\n+\t\t\t\t});\n+\t\t\t});\n+\t\t}\n+\n+\t\tprotected void doRename(EObject target, RenameChange change, RenameContext context) {\n+\t\t\tEAttribute nameAttribute = getNameEAttribute(target);\n+\t\t\tif (nameAttribute != null) {\n+\t\t\t\ttarget.eSet(nameAttribute, change.getNewName());\n+\t\t\t} else {\n+\t\t\t\tcontext.getIssues().add(RefactoringIssueAcceptor.Severity.WARNING, \"Element of class \" + target.eClass().getName() + \" cannot be renamed.\");\n+\t\t\t}\n+\t\t}\n+\n+\t\tprotected EAttribute getNameEAttribute(EObject target) {\n+\t\t\tfor (EAttribute a : target.eClass().getEAllAttributes()) {", "originalCommit": "3b85dbbe48f3b4d8dc2aeeb854331f4189443e84", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aed16fcd87bee2d2f27a8be37d355718284b71c3", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/IRenameStrategy2.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/IRenameStrategy2.java\nindex b6037b050..32d740fc7 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/IRenameStrategy2.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/IRenameStrategy2.java\n\n@@ -37,11 +37,11 @@ public interface IRenameStrategy2 {\n \n \t\t@Override\n \t\tpublic void applyRename(RenameContext context) {\n-\t\t\tIterableExtensions.filter(context.getChanges(), (c) -> canHandle(c)).forEach((change) -> {\n-\t\t\t\tcontext.addModification(change, (EObject o) -> {\n-\t\t\t\t\tdoRename(o, change, context);\n-\t\t\t\t});\n-\t\t\t});\n+\t\t\tfor (RenameChange change : context.getChanges()) {\n+\t\t\t\tif (canHandle(change)) {\n+\t\t\t\t\tcontext.addModification(change, (EObject o) -> doRename(o, change, context));\n+\t\t\t\t}\n+\t\t\t}\n \t\t}\n \n \t\tprotected void doRename(EObject target, RenameChange change, RenameContext context) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwOTA3NA==", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407109074", "bodyText": "Can't we use SimpleAttributeResolver.NAME_RESOLVER.apply(target) here?", "author": "nbhusare", "createdAt": "2020-04-11T20:45:16Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/IRenameStrategy2.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.refactoring;\n+\n+import org.eclipse.emf.ecore.EAttribute;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.xtext.ide.serializer.IChangeSerializer;\n+import org.eclipse.xtext.resource.IResourceServiceProvider;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * Called to rename an element in the {@link IChangeSerializer} based refactoring.\n+ * \n+ * Clients may extend the {@link DefaultImpl} to customize the behavior or implement this interface directly.\n+ * \n+ * Changes are usually performed in the The {@link RenameContext}\n+ * \n+ * @author koehnlein - Initial contribution and API\n+ * @since 2.13\n+ */\n+public interface IRenameStrategy2 {\n+\tclass DefaultImpl implements IRenameStrategy2 {\n+\t\t@Inject\n+\t\tprivate IResourceServiceProvider resourceServiceProvider;\n+\n+\t\tpublic boolean canHandle(RenameChange change) {\n+\t\t\treturn resourceServiceProvider.canHandle(change.getTargetURI());\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void applyRename(RenameContext context) {\n+\t\t\tIterableExtensions.filter(context.getChanges(), (c) -> canHandle(c)).forEach((change) -> {\n+\t\t\t\tcontext.addModification(change, (EObject o) -> {\n+\t\t\t\t\tdoRename(o, change, context);\n+\t\t\t\t});\n+\t\t\t});\n+\t\t}\n+\n+\t\tprotected void doRename(EObject target, RenameChange change, RenameContext context) {\n+\t\t\tEAttribute nameAttribute = getNameEAttribute(target);\n+\t\t\tif (nameAttribute != null) {\n+\t\t\t\ttarget.eSet(nameAttribute, change.getNewName());\n+\t\t\t} else {\n+\t\t\t\tcontext.getIssues().add(RefactoringIssueAcceptor.Severity.WARNING, \"Element of class \" + target.eClass().getName() + \" cannot be renamed.\");\n+\t\t\t}\n+\t\t}\n+\n+\t\tprotected EAttribute getNameEAttribute(EObject target) {", "originalCommit": "3b85dbbe48f3b4d8dc2aeeb854331f4189443e84", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE1NjUzMQ==", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407156531", "bodyText": "dont now why this is done as its done. thus i keep the original impl.", "author": "cdietrich", "createdAt": "2020-04-12T07:00:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwOTA3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxNDk2MA==", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407214960", "bodyText": "Weird. It should really use org.eclipse.emf.ecore.impl.EClassImpl.getEStructuralFeature(String) and an instanceof EAttribute.", "author": "szarnekow", "createdAt": "2020-04-12T15:37:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwOTA3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxNTAwNA==", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407215004", "bodyText": "check for EType is missing, though.", "author": "szarnekow", "createdAt": "2020-04-12T15:37:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwOTA3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIyMDM3Ng==", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407220376", "bodyText": "i will keep it as is for now", "author": "cdietrich", "createdAt": "2020-04-12T16:21:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwOTA3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUyNDk4OA==", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407524988", "bodyText": "The original code scanned for EAttribute 'name' with eType 'EString' - do you want to drop the second condition?", "author": "szarnekow", "createdAt": "2020-04-13T15:03:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwOTA3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUzMjkxOA==", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407532918", "bodyText": "sry will double check", "author": "cdietrich", "createdAt": "2020-04-13T15:17:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwOTA3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUzNDE0MQ==", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407534141", "bodyText": "fixed", "author": "cdietrich", "createdAt": "2020-04-13T15:20:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwOTA3NA=="}], "type": "inlineReview", "revised_code": {"commit": "aed16fcd87bee2d2f27a8be37d355718284b71c3", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/IRenameStrategy2.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/IRenameStrategy2.java\nindex b6037b050..32d740fc7 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/IRenameStrategy2.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/IRenameStrategy2.java\n\n@@ -37,11 +37,11 @@ public interface IRenameStrategy2 {\n \n \t\t@Override\n \t\tpublic void applyRename(RenameContext context) {\n-\t\t\tIterableExtensions.filter(context.getChanges(), (c) -> canHandle(c)).forEach((change) -> {\n-\t\t\t\tcontext.addModification(change, (EObject o) -> {\n-\t\t\t\t\tdoRename(o, change, context);\n-\t\t\t\t});\n-\t\t\t});\n+\t\t\tfor (RenameChange change : context.getChanges()) {\n+\t\t\t\tif (canHandle(change)) {\n+\t\t\t\t\tcontext.addModification(change, (EObject o) -> doRename(o, change, context));\n+\t\t\t\t}\n+\t\t\t}\n \t\t}\n \n \t\tprotected void doRename(EObject target, RenameChange change, RenameContext context) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwOTI0NA==", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407109244", "bodyText": "Please remove super()", "author": "nbhusare", "createdAt": "2020-04-11T20:46:54Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/RenameContext.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.refactoring;\n+\n+import java.util.List;\n+\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.emf.ecore.util.EcoreUtil;\n+import org.eclipse.xtext.ide.serializer.IChangeSerializer;\n+\n+/**\n+ * @author koehnlein - Initial contribution and API\n+ * @since 2.13\n+ */\n+public class RenameContext {\n+\tprivate final List<? extends RenameChange> changes;\n+\n+\tprivate final ResourceSet resourceSet;\n+\n+\tprivate final IChangeSerializer changeSerializer;\n+\n+\tprivate final RefactoringIssueAcceptor issues;\n+\n+\tpublic RenameContext(List<? extends RenameChange> changes, ResourceSet resourceSet,\n+\t\t\tIChangeSerializer changeSerializer, RefactoringIssueAcceptor issues) {\n+\t\tsuper();", "originalCommit": "3b85dbbe48f3b4d8dc2aeeb854331f4189443e84", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aed16fcd87bee2d2f27a8be37d355718284b71c3", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/RenameContext.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/RenameContext.java\nindex 768887249..64a3b417d 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/RenameContext.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/RenameContext.java\n\n@@ -30,7 +30,6 @@ public class RenameContext {\n \n \tpublic RenameContext(List<? extends RenameChange> changes, ResourceSet resourceSet,\n \t\t\tIChangeSerializer changeSerializer, RefactoringIssueAcceptor issues) {\n-\t\tsuper();\n \t\tthis.changes = changes;\n \t\tthis.resourceSet = resourceSet;\n \t\tthis.changeSerializer = changeSerializer;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwOTMxNw==", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407109317", "bodyText": "Please remove super()", "author": "nbhusare", "createdAt": "2020-04-11T20:47:50Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/ResourceRelocationChange.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.refactoring;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;\n+\n+/**\n+ * URIs can also refer to folders and non-Xtext resources.\n+ * \n+ * @author koehnlein - Initial contribution and API\n+ * @since 2.13\n+ */\n+public class ResourceRelocationChange {\n+\tprivate final URI fromURI;\n+\n+\tprivate final URI toURI;\n+\n+\tprivate final boolean isFile;\n+\n+\tpublic ResourceRelocationChange(final URI fromURI, final URI toURI, final boolean isFile) {\n+\t\tsuper();", "originalCommit": "3b85dbbe48f3b4d8dc2aeeb854331f4189443e84", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aed16fcd87bee2d2f27a8be37d355718284b71c3", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/ResourceRelocationChange.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/ResourceRelocationChange.java\nindex ee2c14dc1..a06248b7d 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/ResourceRelocationChange.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/ResourceRelocationChange.java\n\n@@ -25,7 +25,6 @@ public class ResourceRelocationChange {\n \tprivate final boolean isFile;\n \n \tpublic ResourceRelocationChange(final URI fromURI, final URI toURI, final boolean isFile) {\n-\t\tsuper();\n \t\tthis.fromURI = fromURI;\n \t\tthis.toURI = toURI;\n \t\tthis.isFile = isFile;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwOTM2MQ==", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407109361", "bodyText": "Remove reference to ToStringBuilder if possible.", "author": "nbhusare", "createdAt": "2020-04-11T20:48:14Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/ResourceRelocationChange.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.refactoring;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;\n+\n+/**\n+ * URIs can also refer to folders and non-Xtext resources.\n+ * \n+ * @author koehnlein - Initial contribution and API\n+ * @since 2.13\n+ */\n+public class ResourceRelocationChange {\n+\tprivate final URI fromURI;\n+\n+\tprivate final URI toURI;\n+\n+\tprivate final boolean isFile;\n+\n+\tpublic ResourceRelocationChange(final URI fromURI, final URI toURI, final boolean isFile) {\n+\t\tsuper();\n+\t\tthis.fromURI = fromURI;\n+\t\tthis.toURI = toURI;\n+\t\tthis.isFile = isFile;\n+\t}\n+\n+\t@Override\n+\tpublic int hashCode() {\n+\t\tfinal int prime = 31;\n+\t\tint result = 1;\n+\t\tresult = prime * result + ((fromURI == null) ? 0 : fromURI.hashCode());\n+\t\tresult = prime * result + (isFile ? 1231 : 1237);\n+\t\tresult = prime * result + ((toURI == null) ? 0 : toURI.hashCode());\n+\t\treturn result;\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object obj) {\n+\t\tif (this == obj)\n+\t\t\treturn true;\n+\t\tif (obj == null)\n+\t\t\treturn false;\n+\t\tif (getClass() != obj.getClass())\n+\t\t\treturn false;\n+\t\tResourceRelocationChange other = (ResourceRelocationChange) obj;\n+\t\tif (fromURI == null) {\n+\t\t\tif (other.fromURI != null)\n+\t\t\t\treturn false;\n+\t\t} else if (!fromURI.equals(other.fromURI))\n+\t\t\treturn false;\n+\t\tif (isFile != other.isFile)\n+\t\t\treturn false;\n+\t\tif (toURI == null) {\n+\t\t\tif (other.toURI != null)\n+\t\t\t\treturn false;\n+\t\t} else if (!toURI.equals(other.toURI))\n+\t\t\treturn false;\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\tToStringBuilder b = new ToStringBuilder(this);", "originalCommit": "3b85dbbe48f3b4d8dc2aeeb854331f4189443e84", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE1NjcwMw==", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407156703", "bodyText": "wanted to keep it as i want to keep the behaviour", "author": "cdietrich", "createdAt": "2020-04-12T07:02:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwOTM2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "aed16fcd87bee2d2f27a8be37d355718284b71c3", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/ResourceRelocationChange.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/ResourceRelocationChange.java\nindex ee2c14dc1..a06248b7d 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/ResourceRelocationChange.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/ResourceRelocationChange.java\n\n@@ -25,7 +25,6 @@ public class ResourceRelocationChange {\n \tprivate final boolean isFile;\n \n \tpublic ResourceRelocationChange(final URI fromURI, final URI toURI, final boolean isFile) {\n-\t\tsuper();\n \t\tthis.fromURI = fromURI;\n \t\tthis.toURI = toURI;\n \t\tthis.isFile = isFile;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwOTM3Ng==", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407109376", "bodyText": "NL", "author": "nbhusare", "createdAt": "2020-04-11T20:48:26Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/BuildListener.java", "diffHunk": "@@ -1,21 +1,21 @@\n /*******************************************************************************\n- * Copyright (c) 2016 TypeFox GmbH (http://www.typefox.io) and others.\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n  * This program and the accompanying materials are made available under the\n  * terms of the Eclipse Public License 2.0 which is available at\n  * http://www.eclipse.org/legal/epl-2.0.\n  *\n  * SPDX-License-Identifier: EPL-2.0\n  *******************************************************************************/\n-package org.eclipse.xtext.ide.server\n+package org.eclipse.xtext.ide.server;\n \n-import org.eclipse.xtext.resource.IResourceDescription\n-import java.util.List\n+import org.eclipse.xtext.resource.IResourceDescription;\n+import java.util.List;\n \n /**\n  * @author Sven Efftinge - Initial contribution and API\n  */\n-interface BuildListener {\n+public interface BuildListener {\n \t\n-\tdef void afterBuild(List<IResourceDescription.Delta> deltas)\n+\tvoid afterBuild(List<IResourceDescription.Delta> deltas);\n \t\n }", "originalCommit": "3b85dbbe48f3b4d8dc2aeeb854331f4189443e84", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aed16fcd87bee2d2f27a8be37d355718284b71c3", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/BuildListener.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/BuildListener.java\nindex cdd309617..dca814cb1 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/BuildListener.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/BuildListener.java\n\n@@ -15,7 +15,7 @@ import java.util.List;\n  * @author Sven Efftinge - Initial contribution and API\n  */\n public interface BuildListener {\n-\t\n+\n \tvoid afterBuild(List<IResourceDescription.Delta> deltas);\n-\t\n-}\n\\ No newline at end of file\n+\n+}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzExMDUxMA==", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407110510", "bodyText": "I believe, we don't need this check here. The call to resolveCrossReferencedElementAt(...) on line 59 would return a null value if the XtextResource#getParseResult() is null.", "author": "nbhusare", "createdAt": "2020-04-11T20:59:54Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/hover/HoverService.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.server.hover;\n+\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.lsp4j.Hover;\n+import org.eclipse.lsp4j.HoverParams;\n+import org.eclipse.lsp4j.MarkupContent;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.xtext.documentation.IEObjectDocumentationProvider;\n+import org.eclipse.xtext.ide.server.Document;\n+import org.eclipse.xtext.ide.server.DocumentExtensions;\n+import org.eclipse.xtext.nodemodel.ILeafNode;\n+import org.eclipse.xtext.nodemodel.util.NodeModelUtils;\n+import org.eclipse.xtext.parser.IParseResult;\n+import org.eclipse.xtext.resource.EObjectAtOffsetHelper;\n+import org.eclipse.xtext.resource.ILocationInFileProvider;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.util.CancelIndicator;\n+import org.eclipse.xtext.util.ITextRegion;\n+\n+import com.google.common.annotations.Beta;\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+\n+/**\n+ * @author kosyakov - Initial contribution and API\n+ * @since 2.11\n+ */\n+@Singleton\n+@Beta\n+public class HoverService implements IHoverService {\n+\t@Inject\n+\tprivate DocumentExtensions documentExtensions;\n+\n+\t@Inject\n+\tprivate EObjectAtOffsetHelper eObjectAtOffsetHelper;\n+\n+\t@Inject\n+\tprivate ILocationInFileProvider locationInFileProvider;\n+\n+\t@Inject\n+\tprivate IEObjectDocumentationProvider eObjectDocumentationProvider;\n+\n+\t@Override\n+\tpublic Hover hover(Document document, XtextResource resource, HoverParams params, CancelIndicator cancelIndicator) {\n+\t\tint offset = document.getOffSet(params.getPosition());\n+\t\tHoverContext context = createContext(document, resource, offset);\n+\t\treturn hover(context);\n+\t}\n+\n+\tprotected HoverContext createContext(Document document, XtextResource resource, int offset) {\n+\t\tEObject crossLinkedEObject = eObjectAtOffsetHelper.resolveCrossReferencedElementAt(resource, offset);\n+\t\tif (crossLinkedEObject != null) {\n+\t\t\tif (crossLinkedEObject.eIsProxy()) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\tIParseResult parseResult = resource.getParseResult();", "originalCommit": "3b85dbbe48f3b4d8dc2aeeb854331f4189443e84", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "aed16fcd87bee2d2f27a8be37d355718284b71c3", "url": "https://github.com/eclipse/xtext-core/commit/aed16fcd87bee2d2f27a8be37d355718284b71c3", "message": "[eclipse/xtext#1679] ported xtend code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-12T07:05:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxNDMwMA==", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407214300", "bodyText": "Should be a ConcurrentHashMap, otherwise the synchronization attempt in get(String) is completely flawed", "author": "szarnekow", "createdAt": "2020-04-12T15:31:14Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/ExecutorServiceProvider.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide;\n+\n+import java.util.Map;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+import org.eclipse.xtext.util.DisposableRegistry;\n+import org.eclipse.xtext.util.IDisposable;\n+\n+import com.google.common.collect.Maps;\n+import com.google.inject.Inject;\n+import com.google.inject.Provider;\n+import com.google.inject.Singleton;\n+\n+/**\n+ * Provider for executor services. By calling {@link #dispose()} all created executor services are shut down.\n+ * <p>\n+ * In some situations it is necessary to use multiple instances of executor services in order to avoid deadlocks. That\n+ * can be achieved with the {@link #get(String)}\ufffdmethod, which will return a different instance for each key.\n+ */\n+@Singleton\n+public class ExecutorServiceProvider implements Provider<ExecutorService>, IDisposable {\n+\t@Inject\n+\tpublic void registerTo(DisposableRegistry disposableRegistry) {\n+\t\tdisposableRegistry.register(this);\n+\t}\n+\n+\tprivate final Map<String, ExecutorService> instanceCache = Maps.newHashMapWithExpectedSize(3);", "originalCommit": "aed16fcd87bee2d2f27a8be37d355718284b71c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIyMDMwNw==", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407220307", "bodyText": "why? there is a second read in the synchronized", "author": "cdietrich", "createdAt": "2020-04-12T16:20:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxNDMwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUyNjQ3OA==", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407526478", "bodyText": "Thread A calls get, sees nothing and enters the synchronize block, calls get again, sees still nothing and starts to put things into the map (this is not an atomic operation). While the map is being modified, Thread B calls get and sees an inconsistent map state. This can be avoided by using a ConcurrentHashMap + computeIfAbsent", "author": "szarnekow", "createdAt": "2020-04-13T15:06:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxNDMwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUzMDcyOQ==", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407530729", "bodyText": "sry. can we do this in a separate PR. i am not able to think this properly through right now", "author": "cdietrich", "createdAt": "2020-04-13T15:13:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxNDMwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUzMTQ4NA==", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407531484", "bodyText": "Agreed.", "author": "szarnekow", "createdAt": "2020-04-13T15:15:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxNDMwMA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxNDMyNQ==", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407214325", "bodyText": "instanceCache.computeIfAbsent(..)", "author": "szarnekow", "createdAt": "2020-04-12T15:31:32Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/ExecutorServiceProvider.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide;\n+\n+import java.util.Map;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+import org.eclipse.xtext.util.DisposableRegistry;\n+import org.eclipse.xtext.util.IDisposable;\n+\n+import com.google.common.collect.Maps;\n+import com.google.inject.Inject;\n+import com.google.inject.Provider;\n+import com.google.inject.Singleton;\n+\n+/**\n+ * Provider for executor services. By calling {@link #dispose()} all created executor services are shut down.\n+ * <p>\n+ * In some situations it is necessary to use multiple instances of executor services in order to avoid deadlocks. That\n+ * can be achieved with the {@link #get(String)}\ufffdmethod, which will return a different instance for each key.\n+ */\n+@Singleton\n+public class ExecutorServiceProvider implements Provider<ExecutorService>, IDisposable {\n+\t@Inject\n+\tpublic void registerTo(DisposableRegistry disposableRegistry) {\n+\t\tdisposableRegistry.register(this);\n+\t}\n+\n+\tprivate final Map<String, ExecutorService> instanceCache = Maps.newHashMapWithExpectedSize(3);\n+\n+\t@Override\n+\tpublic ExecutorService get() {\n+\t\treturn get(null);\n+\t}\n+\n+\tpublic ExecutorService get(String key) {\n+\t\tExecutorService result = instanceCache.get(key);", "originalCommit": "aed16fcd87bee2d2f27a8be37d355718284b71c3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxNDM5NQ==", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407214395", "bodyText": "Unnecessary type argument", "author": "szarnekow", "createdAt": "2020-04-12T15:32:01Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/labels/AlternativeImageDescription.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.labels;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.List;\n+import org.eclipse.xtext.ide.labels.IImageDescription;\n+import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;\n+\n+public class AlternativeImageDescription implements IImageDescription {\n+\tprivate final List<String> imageIDs;\n+\n+\tpublic AlternativeImageDescription(Iterable<String> imageIDs) {\n+\t\tthis.imageIDs = ImmutableList.<String>copyOf(imageIDs);", "originalCommit": "aed16fcd87bee2d2f27a8be37d355718284b71c3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "188c0937b5be88bbc2e077e242002aae5db2a7f3", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/labels/AlternativeImageDescription.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/labels/AlternativeImageDescription.java\nindex 142a6b9aa..30cbc7ef4 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/labels/AlternativeImageDescription.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/labels/AlternativeImageDescription.java\n\n@@ -17,7 +17,7 @@ public class AlternativeImageDescription implements IImageDescription {\n \tprivate final List<String> imageIDs;\n \n \tpublic AlternativeImageDescription(Iterable<String> imageIDs) {\n-\t\tthis.imageIDs = ImmutableList.<String>copyOf(imageIDs);\n+\t\tthis.imageIDs = ImmutableList.copyOf(imageIDs);\n \t}\n \n \t@Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxNTExNw==", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407215117", "bodyText": "Unnecessary qualification. Can be Severity", "author": "szarnekow", "createdAt": "2020-04-12T15:38:24Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/RefactoringIssueAcceptor.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.refactoring;\n+\n+import org.apache.log4j.Logger;\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.xtext.util.ITextRegion;\n+\n+/**\n+ * @author koehnlein - Initial contribution and API\n+ * @since 2.13\n+ */\n+public interface RefactoringIssueAcceptor {\n+\tenum Severity {\n+\t\tFATAL, ERROR, WARNING, INFO, OK;\n+\t}\n+\n+\tvoid add(RefactoringIssueAcceptor.Severity severity, String message, URI uri, ResourceSet resourceSet);", "originalCommit": "aed16fcd87bee2d2f27a8be37d355718284b71c3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "188c0937b5be88bbc2e077e242002aae5db2a7f3", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/RefactoringIssueAcceptor.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/RefactoringIssueAcceptor.java\nindex 6d72927b4..5b32ff692 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/RefactoringIssueAcceptor.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/RefactoringIssueAcceptor.java\n\n@@ -23,15 +23,15 @@ public interface RefactoringIssueAcceptor {\n \t\tFATAL, ERROR, WARNING, INFO, OK;\n \t}\n \n-\tvoid add(RefactoringIssueAcceptor.Severity severity, String message, URI uri, ResourceSet resourceSet);\n+\tvoid add(Severity severity, String message, URI uri, ResourceSet resourceSet);\n \n-\tvoid add(RefactoringIssueAcceptor.Severity severity, String message, URI resourceUri);\n+\tvoid add(Severity severity, String message, URI resourceUri);\n \n-\tvoid add(RefactoringIssueAcceptor.Severity severity, String message, EObject element);\n+\tvoid add(Severity severity, String message, EObject element);\n \n-\tvoid add(RefactoringIssueAcceptor.Severity severity, String message, EObject element, ITextRegion region);\n+\tvoid add(Severity severity, String message, EObject element, ITextRegion region);\n \n-\tvoid add(RefactoringIssueAcceptor.Severity severity, String message, Exception exc, Logger log);\n+\tvoid add(Severity severity, String message, Exception exc, Logger log);\n \n-\tvoid add(RefactoringIssueAcceptor.Severity severity, String message, Object... params);\n+\tvoid add(Severity severity, String message, Object... params);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxNTQzMw==", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407215433", "bodyText": "region is potentially an ITextRegionWithLineInformation. Maybe worthwhile to use the information rather than computing it again.", "author": "szarnekow", "createdAt": "2020-04-12T15:41:07Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/DocumentExtensions.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*******************************************************************************\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.ide.server;\n+\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.EStructuralFeature;\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.lsp4j.Location;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.xtext.resource.ILocationInFileProvider;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.util.ITextRegion;\n+import org.eclipse.xtext.util.LineAndColumn;\n+\n+import static org.eclipse.xtext.nodemodel.util.NodeModelUtils.*;\n+import org.eclipse.xtext.nodemodel.ICompositeNode;\n+\n+/**\n+ * @author kosyakov - Initial contribution and API\n+ * @since 2.11\n+ */\n+@Singleton\n+public class DocumentExtensions {\n+\n+\t@Inject\n+\tprivate UriExtensions uriExtensions;\n+\n+\t@Inject\n+\tprivate ILocationInFileProvider locationInFileProvider;\n+\n+\tpublic Position newPosition(Resource resource, int offset) {\n+\t\tif (resource instanceof XtextResource) {\n+\t\t\tICompositeNode rootNode = ((XtextResource) resource).getParseResult().getRootNode();\n+\t\t\tLineAndColumn lineAndColumn = getLineAndColumn(rootNode, offset);\n+\t\t\treturn new Position(lineAndColumn.getLine() - 1, lineAndColumn.getColumn() - 1);\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n+\tpublic Range newRange(Resource resource, int startOffset, int endOffset) {\n+\t\tPosition startPosition = newPosition(resource, startOffset);\n+\t\tif (startPosition == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tPosition endPosition = newPosition(resource, endOffset);\n+\t\tif (endPosition == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn new Range(startPosition, endPosition);\n+\t}\n+\n+\tpublic Range newRange(Resource resource, ITextRegion region) {", "originalCommit": "aed16fcd87bee2d2f27a8be37d355718284b71c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIyMDU2NQ==", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407220565", "bodyText": "dont get this one. can you elaborate?", "author": "cdietrich", "createdAt": "2020-04-12T16:22:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxNTQzMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxNTczOQ==", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407215739", "bodyText": "Indentation?", "author": "szarnekow", "createdAt": "2020-04-12T15:43:31Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/rename/ServerRefactoringIssueAcceptor.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.server.rename;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.log4j.Logger;\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.lsp4j.jsonrpc.ResponseErrorException;\n+import org.eclipse.lsp4j.jsonrpc.messages.ResponseError;\n+import org.eclipse.lsp4j.jsonrpc.messages.ResponseErrorCode;\n+import org.eclipse.xtext.ide.refactoring.RefactoringIssueAcceptor;\n+import org.eclipse.xtext.util.ITextRegion;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.eclipse.xtext.xbase.lib.ListExtensions;\n+\n+/**\n+ * @author koehnlein - Initial contribution and API\n+ * @since 2.13\n+ */\n+public class ServerRefactoringIssueAcceptor implements RefactoringIssueAcceptor {\n+\tpublic static class Issue {\n+\t\tprivate RefactoringIssueAcceptor.Severity severity;\n+\n+\t\tprivate String message;\n+\t}\n+\n+\tprivate List<ServerRefactoringIssueAcceptor.Issue> issues = new ArrayList<>();\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, URI uri, ResourceSet resourceSet) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, URI resourceUri) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, final EObject element) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, EObject element, ITextRegion region) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, Exception exc, Logger log) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, Object... params) {\n+\t\tServerRefactoringIssueAcceptor.Issue issue = new ServerRefactoringIssueAcceptor.Issue();\n+\t\tissue.severity = severity;\n+\t\tissue.message = message;\n+\t\tissues.add(issue);\n+\t}\n+\n+\tprotected boolean addIssue(RefactoringIssueAcceptor.Severity severity, String message) {\n+\t\tServerRefactoringIssueAcceptor.Issue issue = new ServerRefactoringIssueAcceptor.Issue();\n+\t\tissue.severity = severity;\n+\t\tissue.message = message;\n+\t\treturn issues.add(issue);\n+\t}\n+\n+\tpublic RefactoringIssueAcceptor.Severity getMaximumSeverity() {\n+\t\tif (issues.size() > 0) {\n+\t\t\tServerRefactoringIssueAcceptor.Issue minBySeverity = IterableExtensions.minBy(issues, (i) -> i.severity);\n+\t\t\tRefactoringIssueAcceptor.Severity severity = null;\n+\t\t\tif (minBySeverity != null) {\n+\t\t\t\tseverity = minBySeverity.severity;\n+\t\t\t}\n+\t\t\treturn severity;\n+\t\t} else {\n+\t\t\treturn RefactoringIssueAcceptor.Severity.OK;\n+\t\t}\n+\t}\n+\n+\tpublic ResponseError toResponseError() {\n+\t\t\tfinal RefactoringIssueAcceptor.Severity maxSeverity = getMaximumSeverity();", "originalCommit": "aed16fcd87bee2d2f27a8be37d355718284b71c3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "188c0937b5be88bbc2e077e242002aae5db2a7f3", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/rename/ServerRefactoringIssueAcceptor.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/rename/ServerRefactoringIssueAcceptor.java\nindex 623d6f335..88374af19 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/rename/ServerRefactoringIssueAcceptor.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/rename/ServerRefactoringIssueAcceptor.java\n\n@@ -29,81 +29,81 @@ import org.eclipse.xtext.xbase.lib.ListExtensions;\n  */\n public class ServerRefactoringIssueAcceptor implements RefactoringIssueAcceptor {\n \tpublic static class Issue {\n-\t\tprivate RefactoringIssueAcceptor.Severity severity;\n+\t\tprivate Severity severity;\n \n \t\tprivate String message;\n \t}\n \n-\tprivate List<ServerRefactoringIssueAcceptor.Issue> issues = new ArrayList<>();\n+\tprivate List<Issue> issues = new ArrayList<>();\n \n \t@Override\n-\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, URI uri, ResourceSet resourceSet) {\n+\tpublic void add(Severity severity, String message, URI uri, ResourceSet resourceSet) {\n \t\taddIssue(severity, message);\n \t}\n \n \t@Override\n-\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, URI resourceUri) {\n+\tpublic void add(Severity severity, String message, URI resourceUri) {\n \t\taddIssue(severity, message);\n \t}\n \n \t@Override\n-\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, final EObject element) {\n+\tpublic void add(Severity severity, String message, EObject element) {\n \t\taddIssue(severity, message);\n \t}\n \n \t@Override\n-\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, EObject element, ITextRegion region) {\n+\tpublic void add(Severity severity, String message, EObject element, ITextRegion region) {\n \t\taddIssue(severity, message);\n \t}\n \n \t@Override\n-\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, Exception exc, Logger log) {\n+\tpublic void add(Severity severity, String message, Exception exc, Logger log) {\n \t\taddIssue(severity, message);\n \t}\n \n \t@Override\n-\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, Object... params) {\n-\t\tServerRefactoringIssueAcceptor.Issue issue = new ServerRefactoringIssueAcceptor.Issue();\n+\tpublic void add(Severity severity, String message, Object... params) {\n+\t\tIssue issue = new Issue();\n \t\tissue.severity = severity;\n \t\tissue.message = message;\n \t\tissues.add(issue);\n \t}\n \n-\tprotected boolean addIssue(RefactoringIssueAcceptor.Severity severity, String message) {\n-\t\tServerRefactoringIssueAcceptor.Issue issue = new ServerRefactoringIssueAcceptor.Issue();\n+\tprotected boolean addIssue(Severity severity, String message) {\n+\t\tIssue issue = new Issue();\n \t\tissue.severity = severity;\n \t\tissue.message = message;\n \t\treturn issues.add(issue);\n \t}\n \n-\tpublic RefactoringIssueAcceptor.Severity getMaximumSeverity() {\n+\tpublic Severity getMaximumSeverity() {\n \t\tif (issues.size() > 0) {\n-\t\t\tServerRefactoringIssueAcceptor.Issue minBySeverity = IterableExtensions.minBy(issues, (i) -> i.severity);\n-\t\t\tRefactoringIssueAcceptor.Severity severity = null;\n+\t\t\tIssue minBySeverity = IterableExtensions.minBy(issues, (i) -> i.severity);\n+\t\t\tSeverity severity = null;\n \t\t\tif (minBySeverity != null) {\n \t\t\t\tseverity = minBySeverity.severity;\n \t\t\t}\n \t\t\treturn severity;\n \t\t} else {\n-\t\t\treturn RefactoringIssueAcceptor.Severity.OK;\n+\t\t\treturn Severity.OK;\n \t\t}\n \t}\n \n \tpublic ResponseError toResponseError() {\n-\t\t\tfinal RefactoringIssueAcceptor.Severity maxSeverity = getMaximumSeverity();\n-\t\t\tResponseError responseError = new ResponseError();\n-\t\t\tresponseError.setMessage(getMessageBySeverity(maxSeverity));\n-\t\t\tresponseError.setCode(getCodeBySeverity(maxSeverity));\n-\t\t\tList<Issue> bySeverity = IterableExtensions.sortBy(issues, (i) -> i.severity);\n-\t\t\tList<String> messages = ListExtensions.map(ListExtensions.reverse(bySeverity), (i) -> i.message);\n-\t\t\tresponseError.setData(IterableExtensions.join(messages, \"\\n\"));\n-\t\t\treturn responseError;\n+\t\tSeverity maxSeverity = getMaximumSeverity();\n+\t\tResponseError responseError = new ResponseError();\n+\t\tresponseError.setMessage(getMessageBySeverity(maxSeverity));\n+\t\tresponseError.setCode(getCodeBySeverity(maxSeverity));\n+\t\tList<Issue> bySeverity = IterableExtensions.sortBy(issues, (i) -> i.severity);\n+\t\tList<String> messages = ListExtensions.map(ListExtensions.reverse(bySeverity), (i) -> i.message);\n+\t\tresponseError.setData(IterableExtensions.join(messages, \"\\n\"));\n+\t\treturn responseError;\n \t}\n \n \t/**\n \t * @since 2.22\n \t */\n-\tprotected int getCodeBySeverity(final RefactoringIssueAcceptor.Severity maxSeverity) {\n+\tprotected int getCodeBySeverity(Severity maxSeverity) {\n \t\tif (maxSeverity != null) {\n \t\t\tswitch (maxSeverity) {\n \t\t\tcase OK:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxNTgyNg==", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407215826", "bodyText": "Unnecessary final param", "author": "szarnekow", "createdAt": "2020-04-12T15:44:01Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/rename/ServerRefactoringIssueAcceptor.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.server.rename;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.log4j.Logger;\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.lsp4j.jsonrpc.ResponseErrorException;\n+import org.eclipse.lsp4j.jsonrpc.messages.ResponseError;\n+import org.eclipse.lsp4j.jsonrpc.messages.ResponseErrorCode;\n+import org.eclipse.xtext.ide.refactoring.RefactoringIssueAcceptor;\n+import org.eclipse.xtext.util.ITextRegion;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.eclipse.xtext.xbase.lib.ListExtensions;\n+\n+/**\n+ * @author koehnlein - Initial contribution and API\n+ * @since 2.13\n+ */\n+public class ServerRefactoringIssueAcceptor implements RefactoringIssueAcceptor {\n+\tpublic static class Issue {\n+\t\tprivate RefactoringIssueAcceptor.Severity severity;\n+\n+\t\tprivate String message;\n+\t}\n+\n+\tprivate List<ServerRefactoringIssueAcceptor.Issue> issues = new ArrayList<>();\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, URI uri, ResourceSet resourceSet) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, URI resourceUri) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, final EObject element) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, EObject element, ITextRegion region) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, Exception exc, Logger log) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, Object... params) {\n+\t\tServerRefactoringIssueAcceptor.Issue issue = new ServerRefactoringIssueAcceptor.Issue();\n+\t\tissue.severity = severity;\n+\t\tissue.message = message;\n+\t\tissues.add(issue);\n+\t}\n+\n+\tprotected boolean addIssue(RefactoringIssueAcceptor.Severity severity, String message) {\n+\t\tServerRefactoringIssueAcceptor.Issue issue = new ServerRefactoringIssueAcceptor.Issue();\n+\t\tissue.severity = severity;\n+\t\tissue.message = message;\n+\t\treturn issues.add(issue);\n+\t}\n+\n+\tpublic RefactoringIssueAcceptor.Severity getMaximumSeverity() {\n+\t\tif (issues.size() > 0) {\n+\t\t\tServerRefactoringIssueAcceptor.Issue minBySeverity = IterableExtensions.minBy(issues, (i) -> i.severity);\n+\t\t\tRefactoringIssueAcceptor.Severity severity = null;\n+\t\t\tif (minBySeverity != null) {\n+\t\t\t\tseverity = minBySeverity.severity;\n+\t\t\t}\n+\t\t\treturn severity;\n+\t\t} else {\n+\t\t\treturn RefactoringIssueAcceptor.Severity.OK;\n+\t\t}\n+\t}\n+\n+\tpublic ResponseError toResponseError() {\n+\t\t\tfinal RefactoringIssueAcceptor.Severity maxSeverity = getMaximumSeverity();\n+\t\t\tResponseError responseError = new ResponseError();\n+\t\t\tresponseError.setMessage(getMessageBySeverity(maxSeverity));\n+\t\t\tresponseError.setCode(getCodeBySeverity(maxSeverity));\n+\t\t\tList<Issue> bySeverity = IterableExtensions.sortBy(issues, (i) -> i.severity);\n+\t\t\tList<String> messages = ListExtensions.map(ListExtensions.reverse(bySeverity), (i) -> i.message);\n+\t\t\tresponseError.setData(IterableExtensions.join(messages, \"\\n\"));\n+\t\t\treturn responseError;\n+\t}\n+\n+\t/**\n+\t * @since 2.22\n+\t */\n+\tprotected int getCodeBySeverity(final RefactoringIssueAcceptor.Severity maxSeverity) {", "originalCommit": "aed16fcd87bee2d2f27a8be37d355718284b71c3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "188c0937b5be88bbc2e077e242002aae5db2a7f3", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/rename/ServerRefactoringIssueAcceptor.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/rename/ServerRefactoringIssueAcceptor.java\nindex 623d6f335..88374af19 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/rename/ServerRefactoringIssueAcceptor.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/rename/ServerRefactoringIssueAcceptor.java\n\n@@ -29,81 +29,81 @@ import org.eclipse.xtext.xbase.lib.ListExtensions;\n  */\n public class ServerRefactoringIssueAcceptor implements RefactoringIssueAcceptor {\n \tpublic static class Issue {\n-\t\tprivate RefactoringIssueAcceptor.Severity severity;\n+\t\tprivate Severity severity;\n \n \t\tprivate String message;\n \t}\n \n-\tprivate List<ServerRefactoringIssueAcceptor.Issue> issues = new ArrayList<>();\n+\tprivate List<Issue> issues = new ArrayList<>();\n \n \t@Override\n-\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, URI uri, ResourceSet resourceSet) {\n+\tpublic void add(Severity severity, String message, URI uri, ResourceSet resourceSet) {\n \t\taddIssue(severity, message);\n \t}\n \n \t@Override\n-\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, URI resourceUri) {\n+\tpublic void add(Severity severity, String message, URI resourceUri) {\n \t\taddIssue(severity, message);\n \t}\n \n \t@Override\n-\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, final EObject element) {\n+\tpublic void add(Severity severity, String message, EObject element) {\n \t\taddIssue(severity, message);\n \t}\n \n \t@Override\n-\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, EObject element, ITextRegion region) {\n+\tpublic void add(Severity severity, String message, EObject element, ITextRegion region) {\n \t\taddIssue(severity, message);\n \t}\n \n \t@Override\n-\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, Exception exc, Logger log) {\n+\tpublic void add(Severity severity, String message, Exception exc, Logger log) {\n \t\taddIssue(severity, message);\n \t}\n \n \t@Override\n-\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, Object... params) {\n-\t\tServerRefactoringIssueAcceptor.Issue issue = new ServerRefactoringIssueAcceptor.Issue();\n+\tpublic void add(Severity severity, String message, Object... params) {\n+\t\tIssue issue = new Issue();\n \t\tissue.severity = severity;\n \t\tissue.message = message;\n \t\tissues.add(issue);\n \t}\n \n-\tprotected boolean addIssue(RefactoringIssueAcceptor.Severity severity, String message) {\n-\t\tServerRefactoringIssueAcceptor.Issue issue = new ServerRefactoringIssueAcceptor.Issue();\n+\tprotected boolean addIssue(Severity severity, String message) {\n+\t\tIssue issue = new Issue();\n \t\tissue.severity = severity;\n \t\tissue.message = message;\n \t\treturn issues.add(issue);\n \t}\n \n-\tpublic RefactoringIssueAcceptor.Severity getMaximumSeverity() {\n+\tpublic Severity getMaximumSeverity() {\n \t\tif (issues.size() > 0) {\n-\t\t\tServerRefactoringIssueAcceptor.Issue minBySeverity = IterableExtensions.minBy(issues, (i) -> i.severity);\n-\t\t\tRefactoringIssueAcceptor.Severity severity = null;\n+\t\t\tIssue minBySeverity = IterableExtensions.minBy(issues, (i) -> i.severity);\n+\t\t\tSeverity severity = null;\n \t\t\tif (minBySeverity != null) {\n \t\t\t\tseverity = minBySeverity.severity;\n \t\t\t}\n \t\t\treturn severity;\n \t\t} else {\n-\t\t\treturn RefactoringIssueAcceptor.Severity.OK;\n+\t\t\treturn Severity.OK;\n \t\t}\n \t}\n \n \tpublic ResponseError toResponseError() {\n-\t\t\tfinal RefactoringIssueAcceptor.Severity maxSeverity = getMaximumSeverity();\n-\t\t\tResponseError responseError = new ResponseError();\n-\t\t\tresponseError.setMessage(getMessageBySeverity(maxSeverity));\n-\t\t\tresponseError.setCode(getCodeBySeverity(maxSeverity));\n-\t\t\tList<Issue> bySeverity = IterableExtensions.sortBy(issues, (i) -> i.severity);\n-\t\t\tList<String> messages = ListExtensions.map(ListExtensions.reverse(bySeverity), (i) -> i.message);\n-\t\t\tresponseError.setData(IterableExtensions.join(messages, \"\\n\"));\n-\t\t\treturn responseError;\n+\t\tSeverity maxSeverity = getMaximumSeverity();\n+\t\tResponseError responseError = new ResponseError();\n+\t\tresponseError.setMessage(getMessageBySeverity(maxSeverity));\n+\t\tresponseError.setCode(getCodeBySeverity(maxSeverity));\n+\t\tList<Issue> bySeverity = IterableExtensions.sortBy(issues, (i) -> i.severity);\n+\t\tList<String> messages = ListExtensions.map(ListExtensions.reverse(bySeverity), (i) -> i.message);\n+\t\tresponseError.setData(IterableExtensions.join(messages, \"\\n\"));\n+\t\treturn responseError;\n \t}\n \n \t/**\n \t * @since 2.22\n \t */\n-\tprotected int getCodeBySeverity(final RefactoringIssueAcceptor.Severity maxSeverity) {\n+\tprotected int getCodeBySeverity(Severity maxSeverity) {\n \t\tif (maxSeverity != null) {\n \t\t\tswitch (maxSeverity) {\n \t\t\tcase OK:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxNTg3Mg==", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407215872", "bodyText": "Unnecessary qualification I guess.", "author": "szarnekow", "createdAt": "2020-04-12T15:44:24Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/rename/ServerRefactoringIssueAcceptor.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.server.rename;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.log4j.Logger;\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.lsp4j.jsonrpc.ResponseErrorException;\n+import org.eclipse.lsp4j.jsonrpc.messages.ResponseError;\n+import org.eclipse.lsp4j.jsonrpc.messages.ResponseErrorCode;\n+import org.eclipse.xtext.ide.refactoring.RefactoringIssueAcceptor;\n+import org.eclipse.xtext.util.ITextRegion;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.eclipse.xtext.xbase.lib.ListExtensions;\n+\n+/**\n+ * @author koehnlein - Initial contribution and API\n+ * @since 2.13\n+ */\n+public class ServerRefactoringIssueAcceptor implements RefactoringIssueAcceptor {\n+\tpublic static class Issue {\n+\t\tprivate RefactoringIssueAcceptor.Severity severity;", "originalCommit": "aed16fcd87bee2d2f27a8be37d355718284b71c3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "188c0937b5be88bbc2e077e242002aae5db2a7f3", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/rename/ServerRefactoringIssueAcceptor.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/rename/ServerRefactoringIssueAcceptor.java\nindex 623d6f335..88374af19 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/rename/ServerRefactoringIssueAcceptor.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/rename/ServerRefactoringIssueAcceptor.java\n\n@@ -29,81 +29,81 @@ import org.eclipse.xtext.xbase.lib.ListExtensions;\n  */\n public class ServerRefactoringIssueAcceptor implements RefactoringIssueAcceptor {\n \tpublic static class Issue {\n-\t\tprivate RefactoringIssueAcceptor.Severity severity;\n+\t\tprivate Severity severity;\n \n \t\tprivate String message;\n \t}\n \n-\tprivate List<ServerRefactoringIssueAcceptor.Issue> issues = new ArrayList<>();\n+\tprivate List<Issue> issues = new ArrayList<>();\n \n \t@Override\n-\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, URI uri, ResourceSet resourceSet) {\n+\tpublic void add(Severity severity, String message, URI uri, ResourceSet resourceSet) {\n \t\taddIssue(severity, message);\n \t}\n \n \t@Override\n-\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, URI resourceUri) {\n+\tpublic void add(Severity severity, String message, URI resourceUri) {\n \t\taddIssue(severity, message);\n \t}\n \n \t@Override\n-\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, final EObject element) {\n+\tpublic void add(Severity severity, String message, EObject element) {\n \t\taddIssue(severity, message);\n \t}\n \n \t@Override\n-\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, EObject element, ITextRegion region) {\n+\tpublic void add(Severity severity, String message, EObject element, ITextRegion region) {\n \t\taddIssue(severity, message);\n \t}\n \n \t@Override\n-\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, Exception exc, Logger log) {\n+\tpublic void add(Severity severity, String message, Exception exc, Logger log) {\n \t\taddIssue(severity, message);\n \t}\n \n \t@Override\n-\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, Object... params) {\n-\t\tServerRefactoringIssueAcceptor.Issue issue = new ServerRefactoringIssueAcceptor.Issue();\n+\tpublic void add(Severity severity, String message, Object... params) {\n+\t\tIssue issue = new Issue();\n \t\tissue.severity = severity;\n \t\tissue.message = message;\n \t\tissues.add(issue);\n \t}\n \n-\tprotected boolean addIssue(RefactoringIssueAcceptor.Severity severity, String message) {\n-\t\tServerRefactoringIssueAcceptor.Issue issue = new ServerRefactoringIssueAcceptor.Issue();\n+\tprotected boolean addIssue(Severity severity, String message) {\n+\t\tIssue issue = new Issue();\n \t\tissue.severity = severity;\n \t\tissue.message = message;\n \t\treturn issues.add(issue);\n \t}\n \n-\tpublic RefactoringIssueAcceptor.Severity getMaximumSeverity() {\n+\tpublic Severity getMaximumSeverity() {\n \t\tif (issues.size() > 0) {\n-\t\t\tServerRefactoringIssueAcceptor.Issue minBySeverity = IterableExtensions.minBy(issues, (i) -> i.severity);\n-\t\t\tRefactoringIssueAcceptor.Severity severity = null;\n+\t\t\tIssue minBySeverity = IterableExtensions.minBy(issues, (i) -> i.severity);\n+\t\t\tSeverity severity = null;\n \t\t\tif (minBySeverity != null) {\n \t\t\t\tseverity = minBySeverity.severity;\n \t\t\t}\n \t\t\treturn severity;\n \t\t} else {\n-\t\t\treturn RefactoringIssueAcceptor.Severity.OK;\n+\t\t\treturn Severity.OK;\n \t\t}\n \t}\n \n \tpublic ResponseError toResponseError() {\n-\t\t\tfinal RefactoringIssueAcceptor.Severity maxSeverity = getMaximumSeverity();\n-\t\t\tResponseError responseError = new ResponseError();\n-\t\t\tresponseError.setMessage(getMessageBySeverity(maxSeverity));\n-\t\t\tresponseError.setCode(getCodeBySeverity(maxSeverity));\n-\t\t\tList<Issue> bySeverity = IterableExtensions.sortBy(issues, (i) -> i.severity);\n-\t\t\tList<String> messages = ListExtensions.map(ListExtensions.reverse(bySeverity), (i) -> i.message);\n-\t\t\tresponseError.setData(IterableExtensions.join(messages, \"\\n\"));\n-\t\t\treturn responseError;\n+\t\tSeverity maxSeverity = getMaximumSeverity();\n+\t\tResponseError responseError = new ResponseError();\n+\t\tresponseError.setMessage(getMessageBySeverity(maxSeverity));\n+\t\tresponseError.setCode(getCodeBySeverity(maxSeverity));\n+\t\tList<Issue> bySeverity = IterableExtensions.sortBy(issues, (i) -> i.severity);\n+\t\tList<String> messages = ListExtensions.map(ListExtensions.reverse(bySeverity), (i) -> i.message);\n+\t\tresponseError.setData(IterableExtensions.join(messages, \"\\n\"));\n+\t\treturn responseError;\n \t}\n \n \t/**\n \t * @since 2.22\n \t */\n-\tprotected int getCodeBySeverity(final RefactoringIssueAcceptor.Severity maxSeverity) {\n+\tprotected int getCodeBySeverity(Severity maxSeverity) {\n \t\tif (maxSeverity != null) {\n \t\t\tswitch (maxSeverity) {\n \t\t\tcase OK:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxNTkzOA==", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407215938", "bodyText": "unnecessary local var", "author": "szarnekow", "createdAt": "2020-04-12T15:45:00Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/rename/ServerRefactoringIssueAcceptor.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.server.rename;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.log4j.Logger;\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.lsp4j.jsonrpc.ResponseErrorException;\n+import org.eclipse.lsp4j.jsonrpc.messages.ResponseError;\n+import org.eclipse.lsp4j.jsonrpc.messages.ResponseErrorCode;\n+import org.eclipse.xtext.ide.refactoring.RefactoringIssueAcceptor;\n+import org.eclipse.xtext.util.ITextRegion;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.eclipse.xtext.xbase.lib.ListExtensions;\n+\n+/**\n+ * @author koehnlein - Initial contribution and API\n+ * @since 2.13\n+ */\n+public class ServerRefactoringIssueAcceptor implements RefactoringIssueAcceptor {\n+\tpublic static class Issue {\n+\t\tprivate RefactoringIssueAcceptor.Severity severity;\n+\n+\t\tprivate String message;\n+\t}\n+\n+\tprivate List<ServerRefactoringIssueAcceptor.Issue> issues = new ArrayList<>();\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, URI uri, ResourceSet resourceSet) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, URI resourceUri) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, final EObject element) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, EObject element, ITextRegion region) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, Exception exc, Logger log) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, Object... params) {\n+\t\tServerRefactoringIssueAcceptor.Issue issue = new ServerRefactoringIssueAcceptor.Issue();\n+\t\tissue.severity = severity;\n+\t\tissue.message = message;\n+\t\tissues.add(issue);\n+\t}\n+\n+\tprotected boolean addIssue(RefactoringIssueAcceptor.Severity severity, String message) {\n+\t\tServerRefactoringIssueAcceptor.Issue issue = new ServerRefactoringIssueAcceptor.Issue();\n+\t\tissue.severity = severity;\n+\t\tissue.message = message;\n+\t\treturn issues.add(issue);\n+\t}\n+\n+\tpublic RefactoringIssueAcceptor.Severity getMaximumSeverity() {\n+\t\tif (issues.size() > 0) {\n+\t\t\tServerRefactoringIssueAcceptor.Issue minBySeverity = IterableExtensions.minBy(issues, (i) -> i.severity);\n+\t\t\tRefactoringIssueAcceptor.Severity severity = null;", "originalCommit": "aed16fcd87bee2d2f27a8be37d355718284b71c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIyMTIxMw==", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407221213", "bodyText": "?", "author": "cdietrich", "createdAt": "2020-04-12T16:28:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxNTkzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUyODIwNA==", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407528204", "bodyText": "since the issues iterable is not empty, minBySeverity cannot be null.\nCould be simplified to  return IterableExtensions.minBy(..).severity", "author": "szarnekow", "createdAt": "2020-04-13T15:09:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxNTkzOA=="}], "type": "inlineReview", "revised_code": {"commit": "188c0937b5be88bbc2e077e242002aae5db2a7f3", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/rename/ServerRefactoringIssueAcceptor.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/rename/ServerRefactoringIssueAcceptor.java\nindex 623d6f335..88374af19 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/rename/ServerRefactoringIssueAcceptor.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/rename/ServerRefactoringIssueAcceptor.java\n\n@@ -29,81 +29,81 @@ import org.eclipse.xtext.xbase.lib.ListExtensions;\n  */\n public class ServerRefactoringIssueAcceptor implements RefactoringIssueAcceptor {\n \tpublic static class Issue {\n-\t\tprivate RefactoringIssueAcceptor.Severity severity;\n+\t\tprivate Severity severity;\n \n \t\tprivate String message;\n \t}\n \n-\tprivate List<ServerRefactoringIssueAcceptor.Issue> issues = new ArrayList<>();\n+\tprivate List<Issue> issues = new ArrayList<>();\n \n \t@Override\n-\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, URI uri, ResourceSet resourceSet) {\n+\tpublic void add(Severity severity, String message, URI uri, ResourceSet resourceSet) {\n \t\taddIssue(severity, message);\n \t}\n \n \t@Override\n-\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, URI resourceUri) {\n+\tpublic void add(Severity severity, String message, URI resourceUri) {\n \t\taddIssue(severity, message);\n \t}\n \n \t@Override\n-\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, final EObject element) {\n+\tpublic void add(Severity severity, String message, EObject element) {\n \t\taddIssue(severity, message);\n \t}\n \n \t@Override\n-\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, EObject element, ITextRegion region) {\n+\tpublic void add(Severity severity, String message, EObject element, ITextRegion region) {\n \t\taddIssue(severity, message);\n \t}\n \n \t@Override\n-\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, Exception exc, Logger log) {\n+\tpublic void add(Severity severity, String message, Exception exc, Logger log) {\n \t\taddIssue(severity, message);\n \t}\n \n \t@Override\n-\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, Object... params) {\n-\t\tServerRefactoringIssueAcceptor.Issue issue = new ServerRefactoringIssueAcceptor.Issue();\n+\tpublic void add(Severity severity, String message, Object... params) {\n+\t\tIssue issue = new Issue();\n \t\tissue.severity = severity;\n \t\tissue.message = message;\n \t\tissues.add(issue);\n \t}\n \n-\tprotected boolean addIssue(RefactoringIssueAcceptor.Severity severity, String message) {\n-\t\tServerRefactoringIssueAcceptor.Issue issue = new ServerRefactoringIssueAcceptor.Issue();\n+\tprotected boolean addIssue(Severity severity, String message) {\n+\t\tIssue issue = new Issue();\n \t\tissue.severity = severity;\n \t\tissue.message = message;\n \t\treturn issues.add(issue);\n \t}\n \n-\tpublic RefactoringIssueAcceptor.Severity getMaximumSeverity() {\n+\tpublic Severity getMaximumSeverity() {\n \t\tif (issues.size() > 0) {\n-\t\t\tServerRefactoringIssueAcceptor.Issue minBySeverity = IterableExtensions.minBy(issues, (i) -> i.severity);\n-\t\t\tRefactoringIssueAcceptor.Severity severity = null;\n+\t\t\tIssue minBySeverity = IterableExtensions.minBy(issues, (i) -> i.severity);\n+\t\t\tSeverity severity = null;\n \t\t\tif (minBySeverity != null) {\n \t\t\t\tseverity = minBySeverity.severity;\n \t\t\t}\n \t\t\treturn severity;\n \t\t} else {\n-\t\t\treturn RefactoringIssueAcceptor.Severity.OK;\n+\t\t\treturn Severity.OK;\n \t\t}\n \t}\n \n \tpublic ResponseError toResponseError() {\n-\t\t\tfinal RefactoringIssueAcceptor.Severity maxSeverity = getMaximumSeverity();\n-\t\t\tResponseError responseError = new ResponseError();\n-\t\t\tresponseError.setMessage(getMessageBySeverity(maxSeverity));\n-\t\t\tresponseError.setCode(getCodeBySeverity(maxSeverity));\n-\t\t\tList<Issue> bySeverity = IterableExtensions.sortBy(issues, (i) -> i.severity);\n-\t\t\tList<String> messages = ListExtensions.map(ListExtensions.reverse(bySeverity), (i) -> i.message);\n-\t\t\tresponseError.setData(IterableExtensions.join(messages, \"\\n\"));\n-\t\t\treturn responseError;\n+\t\tSeverity maxSeverity = getMaximumSeverity();\n+\t\tResponseError responseError = new ResponseError();\n+\t\tresponseError.setMessage(getMessageBySeverity(maxSeverity));\n+\t\tresponseError.setCode(getCodeBySeverity(maxSeverity));\n+\t\tList<Issue> bySeverity = IterableExtensions.sortBy(issues, (i) -> i.severity);\n+\t\tList<String> messages = ListExtensions.map(ListExtensions.reverse(bySeverity), (i) -> i.message);\n+\t\tresponseError.setData(IterableExtensions.join(messages, \"\\n\"));\n+\t\treturn responseError;\n \t}\n \n \t/**\n \t * @since 2.22\n \t */\n-\tprotected int getCodeBySeverity(final RefactoringIssueAcceptor.Severity maxSeverity) {\n+\tprotected int getCodeBySeverity(Severity maxSeverity) {\n \t\tif (maxSeverity != null) {\n \t\t\tswitch (maxSeverity) {\n \t\t\tcase OK:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxNjAwNw==", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407216007", "bodyText": "Maybe use Ordering.min instead.", "author": "szarnekow", "createdAt": "2020-04-12T15:45:41Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/rename/ServerRefactoringIssueAcceptor.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.server.rename;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.log4j.Logger;\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.lsp4j.jsonrpc.ResponseErrorException;\n+import org.eclipse.lsp4j.jsonrpc.messages.ResponseError;\n+import org.eclipse.lsp4j.jsonrpc.messages.ResponseErrorCode;\n+import org.eclipse.xtext.ide.refactoring.RefactoringIssueAcceptor;\n+import org.eclipse.xtext.util.ITextRegion;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.eclipse.xtext.xbase.lib.ListExtensions;\n+\n+/**\n+ * @author koehnlein - Initial contribution and API\n+ * @since 2.13\n+ */\n+public class ServerRefactoringIssueAcceptor implements RefactoringIssueAcceptor {\n+\tpublic static class Issue {\n+\t\tprivate RefactoringIssueAcceptor.Severity severity;\n+\n+\t\tprivate String message;\n+\t}\n+\n+\tprivate List<ServerRefactoringIssueAcceptor.Issue> issues = new ArrayList<>();\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, URI uri, ResourceSet resourceSet) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, URI resourceUri) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, final EObject element) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, EObject element, ITextRegion region) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, Exception exc, Logger log) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, Object... params) {\n+\t\tServerRefactoringIssueAcceptor.Issue issue = new ServerRefactoringIssueAcceptor.Issue();\n+\t\tissue.severity = severity;\n+\t\tissue.message = message;\n+\t\tissues.add(issue);\n+\t}\n+\n+\tprotected boolean addIssue(RefactoringIssueAcceptor.Severity severity, String message) {\n+\t\tServerRefactoringIssueAcceptor.Issue issue = new ServerRefactoringIssueAcceptor.Issue();\n+\t\tissue.severity = severity;\n+\t\tissue.message = message;\n+\t\treturn issues.add(issue);\n+\t}\n+\n+\tpublic RefactoringIssueAcceptor.Severity getMaximumSeverity() {\n+\t\tif (issues.size() > 0) {\n+\t\t\tServerRefactoringIssueAcceptor.Issue minBySeverity = IterableExtensions.minBy(issues, (i) -> i.severity);", "originalCommit": "aed16fcd87bee2d2f27a8be37d355718284b71c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIyMTEyMQ==", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407221121", "bodyText": "?", "author": "cdietrich", "createdAt": "2020-04-12T16:27:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxNjAwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUyNjk3Mg==", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407526972", "bodyText": "Keep it as is :)", "author": "szarnekow", "createdAt": "2020-04-13T15:07:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxNjAwNw=="}], "type": "inlineReview", "revised_code": {"commit": "188c0937b5be88bbc2e077e242002aae5db2a7f3", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/rename/ServerRefactoringIssueAcceptor.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/rename/ServerRefactoringIssueAcceptor.java\nindex 623d6f335..88374af19 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/rename/ServerRefactoringIssueAcceptor.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/rename/ServerRefactoringIssueAcceptor.java\n\n@@ -29,81 +29,81 @@ import org.eclipse.xtext.xbase.lib.ListExtensions;\n  */\n public class ServerRefactoringIssueAcceptor implements RefactoringIssueAcceptor {\n \tpublic static class Issue {\n-\t\tprivate RefactoringIssueAcceptor.Severity severity;\n+\t\tprivate Severity severity;\n \n \t\tprivate String message;\n \t}\n \n-\tprivate List<ServerRefactoringIssueAcceptor.Issue> issues = new ArrayList<>();\n+\tprivate List<Issue> issues = new ArrayList<>();\n \n \t@Override\n-\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, URI uri, ResourceSet resourceSet) {\n+\tpublic void add(Severity severity, String message, URI uri, ResourceSet resourceSet) {\n \t\taddIssue(severity, message);\n \t}\n \n \t@Override\n-\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, URI resourceUri) {\n+\tpublic void add(Severity severity, String message, URI resourceUri) {\n \t\taddIssue(severity, message);\n \t}\n \n \t@Override\n-\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, final EObject element) {\n+\tpublic void add(Severity severity, String message, EObject element) {\n \t\taddIssue(severity, message);\n \t}\n \n \t@Override\n-\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, EObject element, ITextRegion region) {\n+\tpublic void add(Severity severity, String message, EObject element, ITextRegion region) {\n \t\taddIssue(severity, message);\n \t}\n \n \t@Override\n-\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, Exception exc, Logger log) {\n+\tpublic void add(Severity severity, String message, Exception exc, Logger log) {\n \t\taddIssue(severity, message);\n \t}\n \n \t@Override\n-\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, Object... params) {\n-\t\tServerRefactoringIssueAcceptor.Issue issue = new ServerRefactoringIssueAcceptor.Issue();\n+\tpublic void add(Severity severity, String message, Object... params) {\n+\t\tIssue issue = new Issue();\n \t\tissue.severity = severity;\n \t\tissue.message = message;\n \t\tissues.add(issue);\n \t}\n \n-\tprotected boolean addIssue(RefactoringIssueAcceptor.Severity severity, String message) {\n-\t\tServerRefactoringIssueAcceptor.Issue issue = new ServerRefactoringIssueAcceptor.Issue();\n+\tprotected boolean addIssue(Severity severity, String message) {\n+\t\tIssue issue = new Issue();\n \t\tissue.severity = severity;\n \t\tissue.message = message;\n \t\treturn issues.add(issue);\n \t}\n \n-\tpublic RefactoringIssueAcceptor.Severity getMaximumSeverity() {\n+\tpublic Severity getMaximumSeverity() {\n \t\tif (issues.size() > 0) {\n-\t\t\tServerRefactoringIssueAcceptor.Issue minBySeverity = IterableExtensions.minBy(issues, (i) -> i.severity);\n-\t\t\tRefactoringIssueAcceptor.Severity severity = null;\n+\t\t\tIssue minBySeverity = IterableExtensions.minBy(issues, (i) -> i.severity);\n+\t\t\tSeverity severity = null;\n \t\t\tif (minBySeverity != null) {\n \t\t\t\tseverity = minBySeverity.severity;\n \t\t\t}\n \t\t\treturn severity;\n \t\t} else {\n-\t\t\treturn RefactoringIssueAcceptor.Severity.OK;\n+\t\t\treturn Severity.OK;\n \t\t}\n \t}\n \n \tpublic ResponseError toResponseError() {\n-\t\t\tfinal RefactoringIssueAcceptor.Severity maxSeverity = getMaximumSeverity();\n-\t\t\tResponseError responseError = new ResponseError();\n-\t\t\tresponseError.setMessage(getMessageBySeverity(maxSeverity));\n-\t\t\tresponseError.setCode(getCodeBySeverity(maxSeverity));\n-\t\t\tList<Issue> bySeverity = IterableExtensions.sortBy(issues, (i) -> i.severity);\n-\t\t\tList<String> messages = ListExtensions.map(ListExtensions.reverse(bySeverity), (i) -> i.message);\n-\t\t\tresponseError.setData(IterableExtensions.join(messages, \"\\n\"));\n-\t\t\treturn responseError;\n+\t\tSeverity maxSeverity = getMaximumSeverity();\n+\t\tResponseError responseError = new ResponseError();\n+\t\tresponseError.setMessage(getMessageBySeverity(maxSeverity));\n+\t\tresponseError.setCode(getCodeBySeverity(maxSeverity));\n+\t\tList<Issue> bySeverity = IterableExtensions.sortBy(issues, (i) -> i.severity);\n+\t\tList<String> messages = ListExtensions.map(ListExtensions.reverse(bySeverity), (i) -> i.message);\n+\t\tresponseError.setData(IterableExtensions.join(messages, \"\\n\"));\n+\t\treturn responseError;\n \t}\n \n \t/**\n \t * @since 2.22\n \t */\n-\tprotected int getCodeBySeverity(final RefactoringIssueAcceptor.Severity maxSeverity) {\n+\tprotected int getCodeBySeverity(Severity maxSeverity) {\n \t\tif (maxSeverity != null) {\n \t\t\tswitch (maxSeverity) {\n \t\t\tcase OK:\n"}}, {"oid": "188c0937b5be88bbc2e077e242002aae5db2a7f3", "url": "https://github.com/eclipse/xtext-core/commit/188c0937b5be88bbc2e077e242002aae5db2a7f3", "message": "[eclipse/xtext#1679] ported xtend code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-12T16:29:35Z", "type": "forcePushed"}, {"oid": "3be63c54fb020b835ac64e8bba7f2f1ac4cecf4c", "url": "https://github.com/eclipse/xtext-core/commit/3be63c54fb020b835ac64e8bba7f2f1ac4cecf4c", "message": "[eclipse/xtext#1679] ported xtend code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-12T16:34:38Z", "type": "forcePushed"}, {"oid": "1f054c065d6e6be5b44a9b344623ac025734b3c0", "url": "https://github.com/eclipse/xtext-core/commit/1f054c065d6e6be5b44a9b344623ac025734b3c0", "message": "[eclipse/xtext#1679] ported xtend code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-12T16:46:09Z", "type": "forcePushed"}, {"oid": "9a055fd96929f9d22c6dee4cb264d66275c2370c", "url": "https://github.com/eclipse/xtext-core/commit/9a055fd96929f9d22c6dee4cb264d66275c2370c", "message": "[eclipse/xtext#1679] ported xtend code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-13T15:19:52Z", "type": "commit"}, {"oid": "9a055fd96929f9d22c6dee4cb264d66275c2370c", "url": "https://github.com/eclipse/xtext-core/commit/9a055fd96929f9d22c6dee4cb264d66275c2370c", "message": "[eclipse/xtext#1679] ported xtend code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-13T15:19:52Z", "type": "forcePushed"}]}