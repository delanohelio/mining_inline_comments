{"pr_number": 1450, "pr_title": "[eclipse/xtext#1679] converted Xtend code to Java", "pr_createdAt": "2020-04-20T08:46:49Z", "pr_url": "https://github.com/eclipse/xtext-core/pull/1450", "timeline": [{"oid": "d1d4cd72bbcb74a0a3501e8eda2111ae06257388", "url": "https://github.com/eclipse/xtext-core/commit/d1d4cd72bbcb74a0a3501e8eda2111ae06257388", "message": "[eclipse/xtext#1679] converted Xtend code to Java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-20T08:47:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkwMjIxOQ==", "url": "https://github.com/eclipse/xtext-core/pull/1450#discussion_r411902219", "bodyText": "Unnecessary final", "author": "szarnekow", "createdAt": "2020-04-21T06:22:15Z", "path": "org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/AbstractExternalFolderAwareFragment.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xtext.generator;\n+\n+import org.eclipse.emf.mwe2.runtime.Mandatory;\n+import org.eclipse.xtext.xtext.generator.model.IXtextGeneratorFileSystemAccess;\n+import org.eclipse.xtext.xtext.generator.model.XtextGeneratorFileSystemAccess;\n+\n+import com.google.inject.Injector;\n+\n+/**\n+ * Generator fragment that allows to write files to arbitrary, user configurable\n+ * locations.\n+ * \n+ * @author Sebastian Zarnekow - Initial contribution and API\n+ */\n+public abstract class AbstractExternalFolderAwareFragment extends AbstractXtextGeneratorFragment {\n+\tprivate String absolutePath;\n+\n+\tprivate boolean override = false;\n+\n+\tprivate IXtextGeneratorFileSystemAccess outputLocation;\n+\n+\tprotected IXtextGeneratorFileSystemAccess getOutputLocation() {\n+\t\treturn outputLocation;\n+\t}\n+\n+\t@Override\n+\tpublic void initialize(Injector injector) {\n+\t\tsuper.initialize(injector);\n+\t\toutputLocation = new XtextGeneratorFileSystemAccess(absolutePath, override);\n+\t\tinjector.injectMembers(outputLocation);\n+\t}\n+\n+\tprotected String getAbsolutePath() {\n+\t\treturn absolutePath;\n+\t}\n+\n+\t@Mandatory\n+\tpublic void setAbsolutePath(final String absolutePath) {", "originalCommit": "d1d4cd72bbcb74a0a3501e8eda2111ae06257388", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4370aab35e22df377820372f36837ab3a15f589e", "chunk": "diff --git a/org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/AbstractExternalFolderAwareFragment.java b/org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/AbstractExternalFolderAwareFragment.java\nindex 07a2995e9..cb724fb36 100644\n--- a/org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/AbstractExternalFolderAwareFragment.java\n+++ b/org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/AbstractExternalFolderAwareFragment.java\n\n@@ -43,7 +43,7 @@ public abstract class AbstractExternalFolderAwareFragment extends AbstractXtextG\n \t}\n \n \t@Mandatory\n-\tpublic void setAbsolutePath(final String absolutePath) {\n+\tpublic void setAbsolutePath(String absolutePath) {\n \t\tthis.absolutePath = absolutePath;\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkwMzA3OQ==", "url": "https://github.com/eclipse/xtext-core/pull/1450#discussion_r411903079", "bodyText": "!exceptions.isEmpty()", "author": "szarnekow", "createdAt": "2020-04-21T06:24:05Z", "path": "org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/CompositeGeneratorException.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xtext.generator;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+class CompositeGeneratorException extends RuntimeException {\n+\tprivate static final long serialVersionUID = 2875516656439737396L;\n+\tprivate final List<Exception> exceptions = new ArrayList<>();\n+\n+\tpublic boolean addException(Exception exception) {\n+\t\treturn exceptions.add(exception);\n+\t}\n+\n+\tpublic boolean hasExceptions() {\n+\t\treturn exceptions.size() > 0;", "originalCommit": "d1d4cd72bbcb74a0a3501e8eda2111ae06257388", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4370aab35e22df377820372f36837ab3a15f589e", "chunk": "diff --git a/org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/CompositeGeneratorException.java b/org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/CompositeGeneratorException.java\nindex db91405b1..5058fa192 100644\n--- a/org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/CompositeGeneratorException.java\n+++ b/org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/CompositeGeneratorException.java\n\n@@ -20,7 +20,7 @@ class CompositeGeneratorException extends RuntimeException {\n \t}\n \n \tpublic boolean hasExceptions() {\n-\t\treturn exceptions.size() > 0;\n+\t\treturn !exceptions.isEmpty();\n \t}\n \n \tpublic List<Exception> getExceptions() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkwMzQ4Nw==", "url": "https://github.com/eclipse/xtext-core/pull/1450#discussion_r411903487", "bodyText": "Maybe also do an addSuppressed(exeption) here to get a better result from printStacktrace()?", "author": "szarnekow", "createdAt": "2020-04-21T06:24:59Z", "path": "org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/CompositeGeneratorException.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xtext.generator;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+class CompositeGeneratorException extends RuntimeException {\n+\tprivate static final long serialVersionUID = 2875516656439737396L;\n+\tprivate final List<Exception> exceptions = new ArrayList<>();\n+\n+\tpublic boolean addException(Exception exception) {\n+\t\treturn exceptions.add(exception);", "originalCommit": "d1d4cd72bbcb74a0a3501e8eda2111ae06257388", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkyMTU0Mw==", "url": "https://github.com/eclipse/xtext-core/pull/1450#discussion_r411921543", "bodyText": "did not want to change semantics", "author": "cdietrich", "createdAt": "2020-04-21T06:58:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkwMzQ4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "4370aab35e22df377820372f36837ab3a15f589e", "chunk": "diff --git a/org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/CompositeGeneratorException.java b/org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/CompositeGeneratorException.java\nindex db91405b1..5058fa192 100644\n--- a/org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/CompositeGeneratorException.java\n+++ b/org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/CompositeGeneratorException.java\n\n@@ -20,7 +20,7 @@ class CompositeGeneratorException extends RuntimeException {\n \t}\n \n \tpublic boolean hasExceptions() {\n-\t\treturn exceptions.size() > 0;\n+\t\treturn !exceptions.isEmpty();\n \t}\n \n \tpublic List<Exception> getExceptions() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkwMzg3OA==", "url": "https://github.com/eclipse/xtext-core/pull/1450#discussion_r411903878", "bodyText": "Unnecessary escapes in the string", "author": "szarnekow", "createdAt": "2020-04-21T06:25:49Z", "path": "org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/ConditionalXtextGeneratorFragment.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ * Copyright (c) 2017, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xtext.generator;\n+\n+import com.google.inject.Injector;\n+\n+/**\n+ * Generator fragment that wraps another fragment and can be toggled via a\n+ * property\n+ * \n+ * @author Christian Dietrich - Initial contribution and API\n+ * \n+ * @since 2.13\n+ */\n+public class ConditionalXtextGeneratorFragment implements IXtextGeneratorFragment {\n+\tprivate IXtextGeneratorFragment fragment;\n+\n+\tprivate boolean enabled = true;\n+\n+\t@Override\n+\tpublic void checkConfiguration(Issues issues) {\n+\t\tif (fragment == null) {\n+\t\t\tissues.addError(\"The property \\'fragment\\' must be set.\", this);", "originalCommit": "d1d4cd72bbcb74a0a3501e8eda2111ae06257388", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4370aab35e22df377820372f36837ab3a15f589e", "chunk": "diff --git a/org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/ConditionalXtextGeneratorFragment.java b/org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/ConditionalXtextGeneratorFragment.java\nindex f2df38d87..0cc18511c 100644\n--- a/org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/ConditionalXtextGeneratorFragment.java\n+++ b/org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/ConditionalXtextGeneratorFragment.java\n\n@@ -26,7 +26,7 @@ public class ConditionalXtextGeneratorFragment implements IXtextGeneratorFragmen\n \t@Override\n \tpublic void checkConfiguration(Issues issues) {\n \t\tif (fragment == null) {\n-\t\t\tissues.addError(\"The property \\'fragment\\' must be set.\", this);\n+\t\t\tissues.addError(\"The property 'fragment' must be set.\", this);\n \t\t} else {\n \t\t\tfragment.checkConfiguration(issues);\n \t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkwNDI1NQ==", "url": "https://github.com/eclipse/xtext-core/pull/1450#discussion_r411904255", "bodyText": "Add @Mandatory to the setter?", "author": "szarnekow", "createdAt": "2020-04-21T06:26:25Z", "path": "org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/ConditionalXtextGeneratorFragment.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ * Copyright (c) 2017, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xtext.generator;\n+\n+import com.google.inject.Injector;\n+\n+/**\n+ * Generator fragment that wraps another fragment and can be toggled via a\n+ * property\n+ * \n+ * @author Christian Dietrich - Initial contribution and API\n+ * \n+ * @since 2.13\n+ */\n+public class ConditionalXtextGeneratorFragment implements IXtextGeneratorFragment {\n+\tprivate IXtextGeneratorFragment fragment;\n+\n+\tprivate boolean enabled = true;\n+\n+\t@Override\n+\tpublic void checkConfiguration(Issues issues) {\n+\t\tif (fragment == null) {\n+\t\t\tissues.addError(\"The property \\'fragment\\' must be set.\", this);\n+\t\t} else {\n+\t\t\tfragment.checkConfiguration(issues);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void generate() {\n+\t\tif (enabled) {\n+\t\t\tfragment.generate();\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void initialize(Injector injector) {\n+\t\tfragment.initialize(injector);\n+\t}\n+\n+\tpublic IXtextGeneratorFragment getFragment() {", "originalCommit": "d1d4cd72bbcb74a0a3501e8eda2111ae06257388", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkyMjU0NQ==", "url": "https://github.com/eclipse/xtext-core/pull/1450#discussion_r411922545", "bodyText": "did not want to break current semantics", "author": "cdietrich", "createdAt": "2020-04-21T07:00:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkwNDI1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "4370aab35e22df377820372f36837ab3a15f589e", "chunk": "diff --git a/org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/ConditionalXtextGeneratorFragment.java b/org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/ConditionalXtextGeneratorFragment.java\nindex f2df38d87..0cc18511c 100644\n--- a/org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/ConditionalXtextGeneratorFragment.java\n+++ b/org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/ConditionalXtextGeneratorFragment.java\n\n@@ -26,7 +26,7 @@ public class ConditionalXtextGeneratorFragment implements IXtextGeneratorFragmen\n \t@Override\n \tpublic void checkConfiguration(Issues issues) {\n \t\tif (fragment == null) {\n-\t\t\tissues.addError(\"The property \\'fragment\\' must be set.\", this);\n+\t\t\tissues.addError(\"The property 'fragment' must be set.\", this);\n \t\t} else {\n \t\t\tfragment.checkConfiguration(issues);\n \t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkwNTg0OQ==", "url": "https://github.com/eclipse/xtext-core/pull/1450#discussion_r411905849", "bodyText": "We should probably add more overloads to the BindingFactory - overloads that accept String or Class arguments.", "author": "szarnekow", "createdAt": "2020-04-21T06:29:36Z", "path": "org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/exporting/QualifiedNamesFragment2.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xtext.generator.exporting;\n+\n+import org.eclipse.xtext.naming.DefaultDeclarativeQualifiedNameProvider;\n+import org.eclipse.xtext.naming.IQualifiedNameProvider;\n+import org.eclipse.xtext.xtext.generator.AbstractXtextGeneratorFragment;\n+import org.eclipse.xtext.xtext.generator.model.GuiceModuleAccess;\n+import org.eclipse.xtext.xtext.generator.model.TypeReference;\n+\n+public class QualifiedNamesFragment2 extends AbstractXtextGeneratorFragment {\n+\t@Override\n+\tpublic void generate() {\n+\t\tnew GuiceModuleAccess.BindingFactory()\n+\t\t\t\t.addTypeToType(TypeReference.typeRef(IQualifiedNameProvider.class),\n+\t\t\t\t\t\tTypeReference.typeRef(DefaultDeclarativeQualifiedNameProvider.class))\n+\t\t\t\t.contributeTo(getLanguage().getRuntimeGenModule());\n+\t\tnew GuiceModuleAccess.BindingFactory()", "originalCommit": "d1d4cd72bbcb74a0a3501e8eda2111ae06257388", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkyMjc2MA==", "url": "https://github.com/eclipse/xtext-core/pull/1450#discussion_r411922760", "bodyText": "nothing for now", "author": "cdietrich", "createdAt": "2020-04-21T07:00:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkwNTg0OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkwNjE3OQ==", "url": "https://github.com/eclipse/xtext-core/pull/1450#discussion_r411906179", "bodyText": "meh ... addfinal.. should be addFinal..", "author": "szarnekow", "createdAt": "2020-04-21T06:30:10Z", "path": "org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/exporting/SimpleNamesFragment2.java", "diffHunk": "@@ -14,12 +14,17 @@\n import org.eclipse.xtext.xtext.generator.model.GuiceModuleAccess;\n import org.eclipse.xtext.xtext.generator.model.TypeReference;\n \n-@SuppressWarnings(\"all\")\n public class SimpleNamesFragment2 extends AbstractXtextGeneratorFragment {\n-  @Override\n-  public void generate() {\n-    new GuiceModuleAccess.BindingFactory().addfinalTypeToType(TypeReference.typeRef(IQualifiedNameProvider.class), TypeReference.typeRef(SimpleNameProvider.class)).contributeTo(this.getLanguage().getRuntimeGenModule());\n-    new GuiceModuleAccess.BindingFactory().addTypeToType(TypeReference.typeRef(\"org.eclipse.xtext.ui.refactoring.IDependentElementsCalculator\"), \n-      TypeReference.typeRef(\"org.eclipse.xtext.ui.refactoring.impl.DefaultDependentElementsCalculator\")).contributeTo(this.getLanguage().getEclipsePluginGenModule());\n-  }\n+\t@Override\n+\tpublic void generate() {\n+\t\tnew GuiceModuleAccess.BindingFactory()\n+\t\t\t\t.addfinalTypeToType(TypeReference.typeRef(IQualifiedNameProvider.class),", "originalCommit": "d1d4cd72bbcb74a0a3501e8eda2111ae06257388", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkyMzAyOQ==", "url": "https://github.com/eclipse/xtext-core/pull/1450#discussion_r411923029", "bodyText": "no idea why ....", "author": "cdietrich", "createdAt": "2020-04-21T07:01:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkwNjE3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk0OTYyNg==", "url": "https://github.com/eclipse/xtext-core/pull/1450#discussion_r411949626", "bodyText": "The feedback was unrelated.", "author": "szarnekow", "createdAt": "2020-04-21T07:42:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkwNjE3OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkwNjUzNA==", "url": "https://github.com/eclipse/xtext-core/pull/1450#discussion_r411906534", "bodyText": "unnecessary final parameter", "author": "szarnekow", "createdAt": "2020-04-21T06:30:48Z", "path": "org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/model/BinaryFileAccess.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/**\n+ * Copyright (c) 2017, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xtext.generator.model;\n+\n+import java.io.ByteArrayInputStream;\n+import java.util.Arrays;\n+\n+import org.eclipse.xtext.generator.IFileSystemAccess2;\n+\n+/**\n+ * A utility class for generating binary files.\n+ */\n+public class BinaryFileAccess {\n+\tprivate String path;\n+\n+\tprotected byte[] internalContents;\n+\n+\tpublic void setContent(final byte[] content) {", "originalCommit": "d1d4cd72bbcb74a0a3501e8eda2111ae06257388", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4370aab35e22df377820372f36837ab3a15f589e", "chunk": "diff --git a/org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/model/BinaryFileAccess.java b/org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/model/BinaryFileAccess.java\nindex 87af1a2d0..9653b830b 100644\n--- a/org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/model/BinaryFileAccess.java\n+++ b/org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/model/BinaryFileAccess.java\n\n@@ -21,7 +21,7 @@ public class BinaryFileAccess {\n \n \tprotected byte[] internalContents;\n \n-\tpublic void setContent(final byte[] content) {\n+\tpublic void setContent(byte[] content) {\n \t\tthis.internalContents = content;\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkwNjg4Nw==", "url": "https://github.com/eclipse/xtext-core/pull/1450#discussion_r411906887", "bodyText": "Copy should probably happen on setContent, too.\nCan be simplified to return internalContents.clone", "author": "szarnekow", "createdAt": "2020-04-21T06:31:20Z", "path": "org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/model/BinaryFileAccess.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/**\n+ * Copyright (c) 2017, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xtext.generator.model;\n+\n+import java.io.ByteArrayInputStream;\n+import java.util.Arrays;\n+\n+import org.eclipse.xtext.generator.IFileSystemAccess2;\n+\n+/**\n+ * A utility class for generating binary files.\n+ */\n+public class BinaryFileAccess {\n+\tprivate String path;\n+\n+\tprotected byte[] internalContents;\n+\n+\tpublic void setContent(final byte[] content) {\n+\t\tthis.internalContents = content;\n+\t}\n+\n+\tpublic byte[] getContent() {\n+\t\treturn Arrays.copyOf(internalContents, internalContents.length);", "originalCommit": "d1d4cd72bbcb74a0a3501e8eda2111ae06257388", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkyMzY1Nw==", "url": "https://github.com/eclipse/xtext-core/pull/1450#discussion_r411923657", "bodyText": "?", "author": "cdietrich", "createdAt": "2020-04-21T07:02:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkwNjg4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk0OTIxNw==", "url": "https://github.com/eclipse/xtext-core/pull/1450#discussion_r411949217", "bodyText": "No worries :) It would only spare us a few characters in the source code but not improve much.", "author": "szarnekow", "createdAt": "2020-04-21T07:42:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkwNjg4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "4370aab35e22df377820372f36837ab3a15f589e", "chunk": "diff --git a/org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/model/BinaryFileAccess.java b/org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/model/BinaryFileAccess.java\nindex 87af1a2d0..9653b830b 100644\n--- a/org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/model/BinaryFileAccess.java\n+++ b/org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/model/BinaryFileAccess.java\n\n@@ -21,7 +21,7 @@ public class BinaryFileAccess {\n \n \tprotected byte[] internalContents;\n \n-\tpublic void setContent(final byte[] content) {\n+\tpublic void setContent(byte[] content) {\n \t\tthis.internalContents = content;\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkwNzM5OQ==", "url": "https://github.com/eclipse/xtext-core/pull/1450#discussion_r411907399", "bodyText": "Unnecessary @Pure", "author": "szarnekow", "createdAt": "2020-04-21T06:32:26Z", "path": "org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/model/StandaloneSetupAccess.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xtext.generator.model;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.eclipse.xtend2.lib.StringConcatenationClient;\n+import org.eclipse.xtext.xbase.lib.Pure;\n+\n+/**\n+ * Configuration object for the generated standalone setup class. This class is\n+ * responsible for adding required EMF packages to the global registries.\n+ */\n+public class StandaloneSetupAccess {\n+\tprivate final List<StringConcatenationClient> registrations = new ArrayList<>();\n+\n+\t@Deprecated\n+\tprivate final Set<TypeReference> imports = new HashSet<>();\n+\n+\t/**\n+\t * @deprecated this set is required for backwards-compatibility to Xpand\n+\t * templates included with\n+\t * {@code org.eclipse.xtext.generator.adapter.FragmentAdapter}.\n+\t */\n+\t@Deprecated\n+\tpublic Set<TypeReference> getImports() {\n+\t\treturn imports;\n+\t}\n+\n+\t@Pure", "originalCommit": "d1d4cd72bbcb74a0a3501e8eda2111ae06257388", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0f16e3b7e093e7e81e190fdf91772eb03d7cd326", "chunk": "diff --git a/org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/model/StandaloneSetupAccess.java b/org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/model/StandaloneSetupAccess.java\nindex e976a0c88..38b416a55 100644\n--- a/org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/model/StandaloneSetupAccess.java\n+++ b/org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/model/StandaloneSetupAccess.java\n\n@@ -14,7 +14,6 @@ import java.util.List;\n import java.util.Set;\n \n import org.eclipse.xtend2.lib.StringConcatenationClient;\n-import org.eclipse.xtext.xbase.lib.Pure;\n \n /**\n  * Configuration object for the generated standalone setup class. This class is\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkwODA2Nw==", "url": "https://github.com/eclipse/xtext-core/pull/1450#discussion_r411908067", "bodyText": "Does that work on windows? Can we add a  note to the path parameter of the constructor?", "author": "szarnekow", "createdAt": "2020-04-21T06:33:49Z", "path": "org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/model/XtextGeneratorFileSystemAccess.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xtext.generator.model;\n+\n+import com.google.inject.Injector;\n+import org.eclipse.xtext.generator.JavaIoFileSystemAccess;\n+import org.eclipse.xtext.generator.OutputConfiguration;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.eclipse.xtext.xtext.generator.model.IXtextGeneratorFileSystemAccess;\n+\n+public class XtextGeneratorFileSystemAccess extends JavaIoFileSystemAccess implements IXtextGeneratorFileSystemAccess {\n+\tpublic XtextGeneratorFileSystemAccess(String path, boolean overwrite) {\n+\t\tsetOutputPath(removeTrailingPathSeparator(path));\n+\t\tgetDefaultOutput().setOverrideExistingResources(overwrite);\n+\t}\n+\n+\tprivate String removeTrailingPathSeparator(String s) {\n+\t\tif (s.endsWith(\"/\")) {", "originalCommit": "d1d4cd72bbcb74a0a3501e8eda2111ae06257388", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkyNDQxNg==", "url": "https://github.com/eclipse/xtext-core/pull/1450#discussion_r411924416", "bodyText": "no idea. i assume the path has to be set in a os neutral way", "author": "cdietrich", "createdAt": "2020-04-21T07:03:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkwODA2Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkwODcwNg==", "url": "https://github.com/eclipse/xtext-core/pull/1450#discussion_r411908706", "bodyText": "This will break when there is a simple name clash.", "author": "szarnekow", "createdAt": "2020-04-21T06:34:59Z", "path": "org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/model/annotations/SingletonClassAnnotation.java", "diffHunk": "@@ -16,35 +16,34 @@\n /**\n  * A class annotation configuration for the <code>@Singleton</code> annotation.\n  */\n-@SuppressWarnings(\"all\")\n public class SingletonClassAnnotation implements IClassAnnotation {\n-  @Override\n-  public CharSequence generate() {\n-    return \"@Singleton\";\n-  }\n-  \n-  @Override\n-  public boolean appliesTo(final JavaFileAccess javaFile) {\n-    return true;\n-  }\n-  \n-  @Override\n-  public TypeReference getAnnotationImport() {\n-    return new TypeReference(Singleton.class);\n-  }\n-  \n-  @Override\n-  public String toString() {\n-    return this.generate().toString();\n-  }\n-  \n-  @Override\n-  public boolean equals(final Object obj) {\n-    return (obj instanceof SingletonClassAnnotation);\n-  }\n-  \n-  @Override\n-  public int hashCode() {\n-    return this.getClass().getName().hashCode();\n-  }\n+\t@Override\n+\tpublic CharSequence generate() {\n+\t\treturn \"@Singleton\";", "originalCommit": "d1d4cd72bbcb74a0a3501e8eda2111ae06257388", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkyNDY4Ng==", "url": "https://github.com/eclipse/xtext-core/pull/1450#discussion_r411924686", "bodyText": "yes but it always did", "author": "cdietrich", "createdAt": "2020-04-21T07:04:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkwODcwNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkwODg2OQ==", "url": "https://github.com/eclipse/xtext-core/pull/1450#discussion_r411908869", "bodyText": "Unnecessary char escapes in string literal", "author": "szarnekow", "createdAt": "2020-04-21T06:35:20Z", "path": "org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/model/project/BundleProjectConfig.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xtext.generator.model.project;\n+\n+import org.eclipse.xtext.xtext.generator.Issues;\n+import org.eclipse.xtext.xtext.generator.model.ManifestAccess;\n+import org.eclipse.xtext.xtext.generator.model.PluginXmlAccess;\n+\n+import com.google.inject.Injector;\n+\n+/**\n+ * Configuration of subprojects that can be used as Eclipse bundles.\n+ * \n+ * @noextend This class should not be extended by clients.\n+ */\n+public class BundleProjectConfig extends SubProjectConfig implements IBundleProjectConfig {\n+\tprivate ManifestAccess manifest;\n+\n+\tprivate PluginXmlAccess pluginXml;\n+\n+\t@Override\n+\tpublic void initialize(Injector injector) {\n+\t\tsuper.initialize(injector);\n+\t\tif (manifest != null) {\n+\t\t\tmanifest.initialize(injector);\n+\t\t}\n+\t\tif (pluginXml != null) {\n+\t\t\tpluginXml.initialize(injector);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void checkConfiguration(Issues issues) {\n+\t\tsuper.checkConfiguration(issues);\n+\t\tif (manifest != null && getMetaInf() == null) {\n+\t\t\tissues.addError(\"The \\'metaInf\\' outlet must be configured for projects with a manifest\", this);", "originalCommit": "d1d4cd72bbcb74a0a3501e8eda2111ae06257388", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4370aab35e22df377820372f36837ab3a15f589e", "chunk": "diff --git a/org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/model/project/BundleProjectConfig.java b/org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/model/project/BundleProjectConfig.java\nindex 073bdee6d..dcdf93c20 100644\n--- a/org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/model/project/BundleProjectConfig.java\n+++ b/org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/model/project/BundleProjectConfig.java\n\n@@ -39,10 +39,10 @@ public class BundleProjectConfig extends SubProjectConfig implements IBundleProj\n \tpublic void checkConfiguration(Issues issues) {\n \t\tsuper.checkConfiguration(issues);\n \t\tif (manifest != null && getMetaInf() == null) {\n-\t\t\tissues.addError(\"The \\'metaInf\\' outlet must be configured for projects with a manifest\", this);\n+\t\t\tissues.addError(\"The 'metaInf' outlet must be configured for projects with a manifest\", this);\n \t\t}\n \t\tif (pluginXml != null && getRoot() == null) {\n-\t\t\tissues.addError(\"The \\'root\\' outlet must be configured for projects with a plugin.xml\", this);\n+\t\t\tissues.addError(\"The 'root' outlet must be configured for projects with a plugin.xml\", this);\n \t\t}\n \t}\n \n"}}, {"oid": "4370aab35e22df377820372f36837ab3a15f589e", "url": "https://github.com/eclipse/xtext-core/commit/4370aab35e22df377820372f36837ab3a15f589e", "message": "[eclipse/xtext#1679] converted Xtend code to Java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-21T07:05:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIzOTE4MQ==", "url": "https://github.com/eclipse/xtext-core/pull/1450#discussion_r412239181", "bodyText": "Unneeded finals?", "author": "tivervac", "createdAt": "2020-04-21T14:33:37Z", "path": "org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/model/FileAccessFactory.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xtext.generator.model;\n+\n+import org.eclipse.xtend2.lib.StringConcatenationClient;\n+import org.eclipse.xtext.xtext.generator.CodeConfig;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * Factory for creating text files, Java files, and Xtend files.\n+ */\n+public class FileAccessFactory {\n+\t@Inject\n+\tprivate CodeConfig codeConfig;\n+\n+\tpublic TextFileAccess createTextFile() {\n+\t\treturn new TextFileAccess();\n+\t}\n+\n+\tpublic TextFileAccess createTextFile(String path) {\n+\t\tfinal TextFileAccess result = createTextFile();", "originalCommit": "4370aab35e22df377820372f36837ab3a15f589e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0f16e3b7e093e7e81e190fdf91772eb03d7cd326", "chunk": "diff --git a/org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/model/FileAccessFactory.java b/org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/model/FileAccessFactory.java\nindex 0f86f805d..3e78dbddd 100644\n--- a/org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/model/FileAccessFactory.java\n+++ b/org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/model/FileAccessFactory.java\n\n@@ -25,13 +25,13 @@ public class FileAccessFactory {\n \t}\n \n \tpublic TextFileAccess createTextFile(String path) {\n-\t\tfinal TextFileAccess result = createTextFile();\n+\t\tTextFileAccess result = createTextFile();\n \t\tresult.setPath(path);\n \t\treturn result;\n \t}\n \n \tpublic TextFileAccess createTextFile(String path, StringConcatenationClient content) {\n-\t\tfinal TextFileAccess result = createTextFile(path);\n+\t\tTextFileAccess result = createTextFile(path);\n \t\tresult.setContent(content);\n \t\treturn result;\n \t}\n"}}, {"oid": "0f16e3b7e093e7e81e190fdf91772eb03d7cd326", "url": "https://github.com/eclipse/xtext-core/commit/0f16e3b7e093e7e81e190fdf91772eb03d7cd326", "message": "[eclipse/xtext#1679] converted Xtend code to Java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-21T14:43:59Z", "type": "commit"}, {"oid": "0f16e3b7e093e7e81e190fdf91772eb03d7cd326", "url": "https://github.com/eclipse/xtext-core/commit/0f16e3b7e093e7e81e190fdf91772eb03d7cd326", "message": "[eclipse/xtext#1679] converted Xtend code to Java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-21T14:43:59Z", "type": "forcePushed"}]}