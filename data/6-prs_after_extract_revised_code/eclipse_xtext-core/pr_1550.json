{"pr_number": 1550, "pr_title": "predictable sorting in TracedAccessors", "pr_createdAt": "2020-08-06T07:53:30Z", "pr_url": "https://github.com/eclipse/xtext-core/pull/1550", "timeline": [{"oid": "b6f8fdb4b053f174e7b08bd745ffb7607a4c6b15", "url": "https://github.com/eclipse/xtext-core/commit/b6f8fdb4b053f174e7b08bd745ffb7607a4c6b15", "message": "predictable sorting in TracedAccessors\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-08-06T07:53:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIyODczMg==", "url": "https://github.com/eclipse/xtext-core/pull/1550#discussion_r466228732", "bodyText": "It's a little sad that it's a different terminology here and above (name vs signature). But it is how it is.\nI'd really prefer a small refactoring towards FluentIterable to have a better flow when reading the code.\nEvent though it does not save much space:\nIterableExtensions.map(\n\tIterableExtensions.sortBy(IterableExtensions.filter(f.getDeclaredMethods(),\n\t\tit -> it.getSimpleName().startsWith(\"create\")\n\t\t\t&& IterableExtensions.isEmpty(it.getParameters())), MethodDeclaration::getSimpleName)\n\nvs\nFluentIterable.from(f.getDeclaredMethods())\n\t.filter(it-> it.getSimpleName().startsWith(\"create\") && isEmpty(it.getParameters()))\n\t.map(MethodDeclaration::getReturnType)\n\t.toSortedList(Comparator.comparing(TypeReference::getSimpleName))", "author": "szarnekow", "createdAt": "2020-08-06T08:17:58Z", "path": "org.eclipse.xtext/src/org/eclipse/xtext/generator/trace/node/TracedAccessorsProcessor.java", "diffHunk": "@@ -49,14 +50,14 @@ public void doTransform(MutableClassDeclaration annotatedClass, @Extension Trans\n \t\tfor (InterfaceDeclaration f : Iterables.filter(ListExtensions.map(Arrays.asList(factories), it -> it.getType()),\n \t\t\t\tInterfaceDeclaration.class)) {\n \t\t\tfor (TypeReference t : IterableExtensions.map(\n-\t\t\t\t\tIterableExtensions\n+\t\t\t\t\tIterableExtensions.sortBy(IterableExtensions\n \t\t\t\t\t\t\t.filter(f.getDeclaredMethods(),\n \t\t\t\t\t\t\t\t\tit -> it.getSimpleName().startsWith(\"create\")\n-\t\t\t\t\t\t\t\t\t\t\t&& IterableExtensions.isEmpty(it.getParameters())),\n+\t\t\t\t\t\t\t\t\t\t\t&& IterableExtensions.isEmpty(it.getParameters())), MethodDeclaration::getSimpleName),\n \t\t\t\t\tit -> it.getReturnType())) {\n-\t\t\t\tfor (ResolvedMethod getter : IterableExtensions.filter(\n+\t\t\t\tfor (ResolvedMethod getter : IterableExtensions.sortBy(IterableExtensions.filter(\n \t\t\t\t\t\tIterableExtensions.filter(t.getAllResolvedMethods(), it -> isSupportedGetter(it)),\n-\t\t\t\t\t\tit -> !iterableType.isAssignableFrom(it.getDeclaration().getReturnType()))) {\n+\t\t\t\t\t\tit -> !iterableType.isAssignableFrom(it.getDeclaration().getReturnType())), ResolvedMethod::getSimpleSignature)) {", "originalCommit": "b6f8fdb4b053f174e7b08bd745ffb7607a4c6b15", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d1e19719fedd390e25dc4194b70535e0716fb09a", "chunk": "diff --git a/org.eclipse.xtext/src/org/eclipse/xtext/generator/trace/node/TracedAccessorsProcessor.java b/org.eclipse.xtext/src/org/eclipse/xtext/generator/trace/node/TracedAccessorsProcessor.java\nindex 7846c636a..f1423d18a 100644\n--- a/org.eclipse.xtext/src/org/eclipse/xtext/generator/trace/node/TracedAccessorsProcessor.java\n+++ b/org.eclipse.xtext/src/org/eclipse/xtext/generator/trace/node/TracedAccessorsProcessor.java\n\n@@ -49,15 +51,14 @@ public class TracedAccessorsProcessor extends AbstractClassProcessor {\n \t\t\treturn;\n \t\tfor (InterfaceDeclaration f : Iterables.filter(ListExtensions.map(Arrays.asList(factories), it -> it.getType()),\n \t\t\t\tInterfaceDeclaration.class)) {\n-\t\t\tfor (TypeReference t : IterableExtensions.map(\n-\t\t\t\t\tIterableExtensions.sortBy(IterableExtensions\n-\t\t\t\t\t\t\t.filter(f.getDeclaredMethods(),\n-\t\t\t\t\t\t\t\t\tit -> it.getSimpleName().startsWith(\"create\")\n-\t\t\t\t\t\t\t\t\t\t\t&& IterableExtensions.isEmpty(it.getParameters())), MethodDeclaration::getSimpleName),\n-\t\t\t\t\tit -> it.getReturnType())) {\n-\t\t\t\tfor (ResolvedMethod getter : IterableExtensions.sortBy(IterableExtensions.filter(\n-\t\t\t\t\t\tIterableExtensions.filter(t.getAllResolvedMethods(), it -> isSupportedGetter(it)),\n-\t\t\t\t\t\tit -> !iterableType.isAssignableFrom(it.getDeclaration().getReturnType())), ResolvedMethod::getSimpleSignature)) {\n+\t\t\tfor (TypeReference t : FluentIterable.from(f.getDeclaredMethods())\n+\t\t\t\t\t.filter(it -> it.getSimpleName().startsWith(\"create\") && Iterables.isEmpty(it.getParameters()))\n+\t\t\t\t\t.transform(MethodDeclaration::getReturnType)\n+\t\t\t\t\t.toSortedList(Comparator.comparing(TypeReference::getSimpleName))) {\n+\t\t\t\tfor (ResolvedMethod getter : FluentIterable.from(t.getAllResolvedMethods())\n+\t\t\t\t\t\t.filter(it -> isSupportedGetter(it))\n+\t\t\t\t\t\t.filter(it -> !iterableType.isAssignableFrom(it.getDeclaration().getReturnType()))\n+\t\t\t\t\t\t.toSortedList(Comparator.comparing(ResolvedMethod::getSimpleSignature))) {\n \t\t\t\t\tTypeReference rt = getter.getResolvedReturnType();\n \t\t\t\t\tif (TracedAccessorsProcessor.TYPES_WITH_GOOD_TO_STRING\n \t\t\t\t\t\t\t.contains(rt.getType().getSimpleName().toLowerCase())) {\n"}}, {"oid": "d1e19719fedd390e25dc4194b70535e0716fb09a", "url": "https://github.com/eclipse/xtext-core/commit/d1e19719fedd390e25dc4194b70535e0716fb09a", "message": "predictable sorting in TracedAccessors\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-08-06T08:34:55Z", "type": "commit"}, {"oid": "d1e19719fedd390e25dc4194b70535e0716fb09a", "url": "https://github.com/eclipse/xtext-core/commit/d1e19719fedd390e25dc4194b70535e0716fb09a", "message": "predictable sorting in TracedAccessors\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-08-06T08:34:55Z", "type": "forcePushed"}]}