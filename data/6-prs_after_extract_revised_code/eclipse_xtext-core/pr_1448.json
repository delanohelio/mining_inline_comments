{"pr_number": 1448, "pr_title": "[eclipse/xtext#1679] converted code to java", "pr_createdAt": "2020-04-17T14:33:01Z", "pr_url": "https://github.com/eclipse/xtext-core/pull/1448", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI2NDE2MA==", "url": "https://github.com/eclipse/xtext-core/pull/1448#discussion_r410264160", "bodyText": "in the old class type of field and getters was arraylist.\nok to change?", "author": "cdietrich", "createdAt": "2020-04-17T14:33:59Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/ContentAssistEntry.java", "diffHunk": "@@ -0,0 +1,289 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.editor.contentassist;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.xtext.util.ReplaceRegion;\n+import org.eclipse.xtext.util.TextRegion;\n+import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;\n+\n+/**\n+ * @noreference\n+ */\n+public class ContentAssistEntry {\n+\n+\tpublic static final String KIND_TEXT = \"TEXT\";\n+\n+\tpublic static final String KIND_METHOD = \"METHOD\";\n+\n+\tpublic static final String KIND_FUNCTION = \"FUNCTION\";\n+\n+\tpublic static final String KIND_CONSTRUCTOR = \"CONSTRUCTOR\";\n+\n+\tpublic static final String KIND_FIELD = \"FIELD\";\n+\n+\tpublic static final String KIND_VARIABLE = \"VARIABLE\";\n+\n+\tpublic static final String KIND_CLASS = \"CLASS\";\n+\n+\tpublic static final String KIND_INTERFACE = \"INTERFACE\";\n+\n+\tpublic static final String KIND_MODULE = \"MODULE\";\n+\n+\tpublic static final String KIND_PROPERTY = \"PROPERTY\";\n+\n+\tpublic static final String KIND_UNIT = \"UNIT\";\n+\n+\tpublic static final String KIND_VALUE = \"VALUE\";\n+\n+\tpublic static final String KIND_ENUM = \"ENUM\";\n+\n+\tpublic static final String KIND_KEYWORD = \"KEYWORD\";\n+\n+\tpublic static final String KIND_SNIPPET = \"SNIPPET\";\n+\n+\tpublic static final String KIND_COLOR = \"COLOR\";\n+\n+\tpublic static final String KIND_FILE = \"FILE\";\n+\n+\tpublic static final String KIND_REFERENCE = \"REFERENCE\";\n+\n+\tpublic static final String KIND_UNKNOWN = \"UNKNOWN\";\n+\n+\t/**\n+\t * The prefix that should be replaced with this proposal.\n+\t */\n+\tprivate String prefix;\n+\n+\t/**\n+\t * The proposed text to be inserted.\n+\t */\n+\tprivate String proposal;\n+\n+\t/**\n+\t * The text seen by the user in the list of proposals.\n+\t */\n+\tprivate String label;\n+\n+\t/**\n+\t * Additional description to include in the list of proposals.\n+\t * <p>\n+\t * This property may not be supported by all editor frameworks.\n+\t * </p>\n+\t */\n+\tprivate String description;\n+\n+\t/**\n+\t * Documentation for the proposal proposals.\n+\t * <p>\n+\t * This property may not be supported by all editor frameworks.\n+\t * </p>\n+\t */\n+\tprivate String documentation;\n+\n+\t/**\n+\t * The absolute cursor position to apply after the proposal has been inserted. If omitted, the cursor it set to the\n+\t * end of the inserted proposal.\n+\t * <p>\n+\t * This property may not be supported by all editor frameworks.\n+\t * </p>\n+\t */\n+\tprivate Integer escapePosition;\n+\n+\t/**\n+\t * Additional text replacements to apply when this proposal is selected.\n+\t * <p>\n+\t * This property may not be supported by all editor frameworks.\n+\t * </p>\n+\t */\n+\tprivate final List<ReplaceRegion> textReplacements = new ArrayList<ReplaceRegion>();", "originalCommit": "44858224710823524454b1152e5ac649e58e4d52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI4Njg5Ng==", "url": "https://github.com/eclipse/xtext-core/pull/1448#discussion_r410286896", "bodyText": "For the field it should be okay, for the getters it can break backwardscompatibility", "author": "tivervac", "createdAt": "2020-04-17T15:09:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI2NDE2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3NTQ4Mg==", "url": "https://github.com/eclipse/xtext-core/pull/1448#discussion_r410675482", "bodyText": "yes but there is a noreference on the class", "author": "cdietrich", "createdAt": "2020-04-18T09:40:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI2NDE2MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI3MTE2Mw==", "url": "https://github.com/eclipse/xtext-core/pull/1448#discussion_r410271163", "bodyText": "s/proposal/Proposal/", "author": "tivervac", "createdAt": "2020-04-17T14:44:46Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/IdeContentProposalAcceptor.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*******************************************************************************\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.ide.editor.contentassist;\n+\n+import java.util.Comparator;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+import org.eclipse.xtext.xbase.lib.Pair;\n+\n+import com.google.common.collect.Iterables;\n+\n+/**\n+ * @author Sven Efftinge - Initial contribution and API\n+ * \n+ * @since 2.11\n+ */\n+public class IdeContentProposalAcceptor\n+\t\timplements IIdeContentProposalAcceptor, Comparator<Pair<Integer, ContentAssistEntry>> {\n+\n+\tprotected final Set<Pair<Integer, ContentAssistEntry>> entries = new TreeSet<Pair<Integer, ContentAssistEntry>>(\n+\t\t\tthis);\n+\n+\t@Override\n+\tpublic void accept(ContentAssistEntry entry, int priority) {\n+\t\tif (entry != null) {\n+\t\t\tif (entry.getProposal() == null)\n+\t\t\t\tthrow new IllegalArgumentException(\"proposal must not be null.\");", "originalCommit": "44858224710823524454b1152e5ac649e58e4d52", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "04d232f1959f19e99f9e354326bff82732c452d9", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/IdeContentProposalAcceptor.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/IdeContentProposalAcceptor.java\nindex bfaece592..d34c04ebc 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/IdeContentProposalAcceptor.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/IdeContentProposalAcceptor.java\n\n@@ -31,7 +31,7 @@ public class IdeContentProposalAcceptor\n \tpublic void accept(ContentAssistEntry entry, int priority) {\n \t\tif (entry != null) {\n \t\t\tif (entry.getProposal() == null)\n-\t\t\t\tthrow new IllegalArgumentException(\"proposal must not be null.\");\n+\t\t\t\tthrow new IllegalArgumentException(\"Proposal must not be null.\");\n \t\t\tentries.add(Pair.of(priority, entry));\n \t\t}\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI3MjQ1Nw==", "url": "https://github.com/eclipse/xtext-core/pull/1448#discussion_r410272457", "bodyText": "Probably want to remove this", "author": "tivervac", "createdAt": "2020-04-17T14:46:48Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/IdeContentProposalCreator.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.editor.contentassist;\n+\n+import com.google.inject.Inject;\n+import org.eclipse.xtext.ide.editor.contentassist.ContentAssistContext;\n+import org.eclipse.xtext.ide.editor.contentassist.ContentAssistEntry;\n+import org.eclipse.xtext.ide.editor.contentassist.IPrefixMatcher;\n+import org.eclipse.xtext.ide.editor.contentassist.IProposalConflictHelper;\n+import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;\n+import org.eclipse.xtext.xbase.lib.StringExtensions;\n+\n+/**\n+ * Factory for content assist entries. Whenever possible, you should use this creator instead of building entries\n+ * directly, since prefix matching and conflict handling is done here.\n+ * \n+ * @since 2.10\n+ * @noreference\n+ */\n+@SuppressWarnings(\"all\")", "originalCommit": "44858224710823524454b1152e5ac649e58e4d52", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "04d232f1959f19e99f9e354326bff82732c452d9", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/IdeContentProposalCreator.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/IdeContentProposalCreator.java\nindex 29f554a53..e6cb10bea 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/IdeContentProposalCreator.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/IdeContentProposalCreator.java\n\n@@ -8,13 +8,10 @@\n  */\n package org.eclipse.xtext.ide.editor.contentassist;\n \n-import com.google.inject.Inject;\n-import org.eclipse.xtext.ide.editor.contentassist.ContentAssistContext;\n-import org.eclipse.xtext.ide.editor.contentassist.ContentAssistEntry;\n-import org.eclipse.xtext.ide.editor.contentassist.IPrefixMatcher;\n-import org.eclipse.xtext.ide.editor.contentassist.IProposalConflictHelper;\n import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;\n-import org.eclipse.xtext.xbase.lib.StringExtensions;\n+\n+import com.google.common.base.Strings;\n+import com.google.inject.Inject;\n \n /**\n  * Factory for content assist entries. Whenever possible, you should use this creator instead of building entries\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI3NDAwNA==", "url": "https://github.com/eclipse/xtext-core/pull/1448#discussion_r410274004", "bodyText": "You can just use Strings.isNullOrEmpty here", "author": "tivervac", "createdAt": "2020-04-17T14:49:26Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/IdeContentProposalCreator.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.editor.contentassist;\n+\n+import com.google.inject.Inject;\n+import org.eclipse.xtext.ide.editor.contentassist.ContentAssistContext;\n+import org.eclipse.xtext.ide.editor.contentassist.ContentAssistEntry;\n+import org.eclipse.xtext.ide.editor.contentassist.IPrefixMatcher;\n+import org.eclipse.xtext.ide.editor.contentassist.IProposalConflictHelper;\n+import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;\n+import org.eclipse.xtext.xbase.lib.StringExtensions;\n+\n+/**\n+ * Factory for content assist entries. Whenever possible, you should use this creator instead of building entries\n+ * directly, since prefix matching and conflict handling is done here.\n+ * \n+ * @since 2.10\n+ * @noreference\n+ */\n+@SuppressWarnings(\"all\")\n+public class IdeContentProposalCreator {\n+\t@Inject\n+\tprivate IPrefixMatcher prefixMatcher;\n+\n+\t@Inject\n+\tprivate IProposalConflictHelper conflictHelper;\n+\n+\t/**\n+\t * Returns an entry with the given proposal and the prefix from the context, or null if the proposal is not valid.\n+\t */\n+\tpublic ContentAssistEntry createProposal(String proposal, ContentAssistContext context) {\n+\t\treturn createProposal(proposal, context.getPrefix(), context, ContentAssistEntry.KIND_UNKNOWN, null);\n+\t}\n+\n+\t/**\n+\t * Returns an entry of kind snippet with the given proposal and label and the prefix from the context, or null if\n+\t * the proposal is not valid.\n+\t * \n+\t * @since 2.16\n+\t */\n+\tpublic ContentAssistEntry createSnippet(String proposal, String label, ContentAssistContext context) {\n+\t\treturn createProposal(proposal, context.getPrefix(), context, ContentAssistEntry.KIND_SNIPPET,\n+\t\t\t\t(it) -> it.setLabel(label));\n+\t}\n+\n+\t/**\n+\t * Returns an entry with the given proposal and the prefix from the context, or null if the proposal is not valid.\n+\t * If it is valid, the initializer function is applied to it.\n+\t */\n+\tpublic ContentAssistEntry createProposal(String proposal, ContentAssistContext context,\n+\t\t\tProcedure1<? super ContentAssistEntry> init) {\n+\t\treturn createProposal(proposal, context.getPrefix(), context, ContentAssistEntry.KIND_UNKNOWN, init);\n+\t}\n+\n+\t/**\n+\t * Returns an entry with the given proposal and the prefix from the context, or null if the proposal is not valid.\n+\t * If it is valid, the initializer function is applied to it.\n+\t */\n+\tpublic ContentAssistEntry createProposal(String proposal, ContentAssistContext context, String kind,\n+\t\t\tProcedure1<? super ContentAssistEntry> init) {\n+\t\treturn createProposal(proposal, context.getPrefix(), context, kind, init);\n+\t}\n+\n+\t/**\n+\t * Returns an entry with the given proposal and prefix, or null if the proposal is not valid. If it is valid, the\n+\t * initializer function is applied to it.\n+\t */\n+\tpublic ContentAssistEntry createProposal(String proposal, String prefix, ContentAssistContext context, String kind,\n+\t\t\tProcedure1<? super ContentAssistEntry> init) {\n+\t\tif (isValidProposal(proposal, prefix, context)) {\n+\t\t\tContentAssistEntry result = new ContentAssistEntry();\n+\t\t\tresult.setProposal(proposal);\n+\t\t\tresult.setPrefix(prefix);\n+\t\t\tif (kind != null) {\n+\t\t\t\tresult.setKind(kind);\n+\t\t\t}\n+\t\t\tif (init != null) {\n+\t\t\t\tinit.apply(result);\n+\t\t\t}\n+\t\t\treturn result;\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n+\tpublic boolean isValidProposal(String proposal, String prefix, ContentAssistContext context) {\n+\t\treturn !StringExtensions.isNullOrEmpty(proposal) && prefixMatcher.isCandidateMatchingPrefix(proposal, prefix)", "originalCommit": "44858224710823524454b1152e5ac649e58e4d52", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "04d232f1959f19e99f9e354326bff82732c452d9", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/IdeContentProposalCreator.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/IdeContentProposalCreator.java\nindex 29f554a53..e6cb10bea 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/IdeContentProposalCreator.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/IdeContentProposalCreator.java\n\n@@ -8,13 +8,10 @@\n  */\n package org.eclipse.xtext.ide.editor.contentassist;\n \n-import com.google.inject.Inject;\n-import org.eclipse.xtext.ide.editor.contentassist.ContentAssistContext;\n-import org.eclipse.xtext.ide.editor.contentassist.ContentAssistEntry;\n-import org.eclipse.xtext.ide.editor.contentassist.IPrefixMatcher;\n-import org.eclipse.xtext.ide.editor.contentassist.IProposalConflictHelper;\n import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;\n-import org.eclipse.xtext.xbase.lib.StringExtensions;\n+\n+import com.google.common.base.Strings;\n+import com.google.inject.Inject;\n \n /**\n  * Factory for content assist entries. Whenever possible, you should use this creator instead of building entries\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI3NDY5Mw==", "url": "https://github.com/eclipse/xtext-core/pull/1448#discussion_r410274693", "bodyText": "final?", "author": "tivervac", "createdAt": "2020-04-17T14:50:31Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/IdeCrossrefProposalProvider.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*******************************************************************************\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.ide.editor.contentassist;\n+\n+import org.apache.log4j.Logger;\n+import org.eclipse.xtext.CrossReference;\n+import org.eclipse.xtext.naming.IQualifiedNameConverter;\n+import org.eclipse.xtext.resource.IEObjectDescription;\n+import org.eclipse.xtext.scoping.IScope;\n+\n+import com.google.common.base.Predicate;\n+import com.google.inject.Inject;\n+\n+/**\n+ * Special content assist proposal provider for cross-references.\n+ * \n+ * @noreference\n+ */\n+public class IdeCrossrefProposalProvider {\n+\n+\tprivate static Logger LOG = Logger.getLogger(IdeCrossrefProposalProvider.class);", "originalCommit": "44858224710823524454b1152e5ac649e58e4d52", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "04d232f1959f19e99f9e354326bff82732c452d9", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/IdeCrossrefProposalProvider.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/IdeCrossrefProposalProvider.java\nindex 34256290f..dddf9a040 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/IdeCrossrefProposalProvider.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/IdeCrossrefProposalProvider.java\n\n@@ -24,7 +24,7 @@ import com.google.inject.Inject;\n  */\n public class IdeCrossrefProposalProvider {\n \n-\tprivate static Logger LOG = Logger.getLogger(IdeCrossrefProposalProvider.class);\n+\tprivate static final Logger LOG = Logger.getLogger(IdeCrossrefProposalProvider.class);\n \n \t@Inject\n \tprivate IQualifiedNameConverter qualifiedNameConverter;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI3NzI1Mg==", "url": "https://github.com/eclipse/xtext-core/pull/1448#discussion_r410277252", "bodyText": "Always returns an empty string by default*", "author": "tivervac", "createdAt": "2020-04-17T14:54:36Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/symbol/DocumentSymbolMapper.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/**\n+ * Copyright (c) 2018, 2020 TypeFox and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.server.symbol;\n+\n+import java.util.ArrayList;\n+\n+import org.eclipse.emf.ecore.EClass;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.lsp4j.DocumentSymbol;\n+import org.eclipse.lsp4j.Location;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.SymbolKind;\n+import org.eclipse.xtext.ide.server.DocumentExtensions;\n+import org.eclipse.xtext.naming.IQualifiedNameProvider;\n+import org.eclipse.xtext.naming.QualifiedName;\n+import org.eclipse.xtext.resource.IEObjectDescription;\n+\n+import com.google.common.annotations.Beta;\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+\n+/**\n+ * Maps an EObject to the corresponding {@link DocumentSymbol document symbol}.\n+ */\n+@Beta\n+@Singleton\n+public class DocumentSymbolMapper {\n+\t/**\n+\t * Provides {@link DocumentSymbol#detail detail} for a {@link DocumentSymbol document symbol}.\n+\t * <p>\n+\t * Always returns with an empty string by default.", "originalCommit": "44858224710823524454b1152e5ac649e58e4d52", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "04d232f1959f19e99f9e354326bff82732c452d9", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/symbol/DocumentSymbolMapper.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/symbol/DocumentSymbolMapper.java\nindex 71ed9b5d4..7f0d52ec5 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/symbol/DocumentSymbolMapper.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/symbol/DocumentSymbolMapper.java\n\n@@ -34,7 +34,7 @@ public class DocumentSymbolMapper {\n \t/**\n \t * Provides {@link DocumentSymbol#detail detail} for a {@link DocumentSymbol document symbol}.\n \t * <p>\n-\t * Always returns with an empty string by default.\n+\t * Always returns an empty string by default.\n \t * \n \t * @see DocumentSymbol#detail\n \t */\n"}}, {"oid": "937baeb78cf9ae9d29a73552585f15bf6674b467", "url": "https://github.com/eclipse/xtext-core/commit/937baeb78cf9ae9d29a73552585f15bf6674b467", "message": "[eclipse/xtext#1679] converted code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-17T15:00:03Z", "type": "forcePushed"}, {"oid": "04d232f1959f19e99f9e354326bff82732c452d9", "url": "https://github.com/eclipse/xtext-core/commit/04d232f1959f19e99f9e354326bff82732c452d9", "message": "[eclipse/xtext#1679] converted code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-17T15:05:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDYzNzY0Ng==", "url": "https://github.com/eclipse/xtext-core/pull/1448#discussion_r410637646", "bodyText": "The class extends from Assert, you can just use assertEquals.", "author": "nbhusare", "createdAt": "2020-04-18T05:28:48Z", "path": "org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/util/DocumentHighlightComparatorTest.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.tests.util;\n+\n+import java.util.List;\n+\n+import org.eclipse.lsp4j.DocumentHighlight;\n+import org.eclipse.lsp4j.DocumentHighlightKind;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.xtext.ide.tests.testlanguage.TestLanguageIdeInjectorProvider;\n+import org.eclipse.xtext.ide.util.DocumentHighlightComparator;\n+import org.eclipse.xtext.testing.InjectWith;\n+import org.eclipse.xtext.testing.XtextRunner;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.google.common.collect.Lists;\n+import com.google.inject.Inject;\n+\n+/**\n+ * Test for the null-safe {@link DocumentHighlightComparator}.\n+ * \n+ * <p>\n+ * This test focuses on the {@link DocumentHighlightKind} and the null-safety\n+ * other orderings are checked via the {@link RangeComparatorTest}.\n+ * \n+ * @author akos.kitta - Initial contribution and API\n+ */\n+@RunWith(XtextRunner.class)\n+@InjectWith(TestLanguageIdeInjectorProvider.class)\n+public class DocumentHighlightComparatorTest extends Assert {\n+\t@Inject\n+\tprivate DocumentHighlightComparator comparator;\n+\n+\t@Test\n+\tpublic void withoutNull() {\n+\t\tfinal List<? extends DocumentHighlight> input = sort(\n+\t\t\t\tLists.newArrayList(newHighlight(DocumentHighlightKind.Text, newRange(2, 2, 2, 2)),\n+\t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Text, newRange(1, 1, 1, 1)),\n+\t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Write, newRange(2, 2, 2, 2)),\n+\t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Write, newRange(1, 1, 1, 1)),\n+\t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Read, newRange(2, 2, 2, 2)),\n+\t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Read, newRange(1, 1, 1, 1))));\n+\t\tAssert.assertEquals(1, input.get(0).getRange().getStart().getLine());", "originalCommit": "04d232f1959f19e99f9e354326bff82732c452d9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f42c5148816f793c86a0994bf9644deb589c2ca", "chunk": "diff --git a/org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/util/DocumentHighlightComparatorTest.java b/org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/util/DocumentHighlightComparatorTest.java\nindex e4960e2bc..736ec1c1b 100644\n--- a/org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/util/DocumentHighlightComparatorTest.java\n+++ b/org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/util/DocumentHighlightComparatorTest.java\n\n@@ -43,78 +43,78 @@ public class DocumentHighlightComparatorTest extends Assert {\n \n \t@Test\n \tpublic void withoutNull() {\n-\t\tfinal List<? extends DocumentHighlight> input = sort(\n+\t\tList<? extends DocumentHighlight> input = sort(\n \t\t\t\tLists.newArrayList(newHighlight(DocumentHighlightKind.Text, newRange(2, 2, 2, 2)),\n \t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Text, newRange(1, 1, 1, 1)),\n \t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Write, newRange(2, 2, 2, 2)),\n \t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Write, newRange(1, 1, 1, 1)),\n \t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Read, newRange(2, 2, 2, 2)),\n \t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Read, newRange(1, 1, 1, 1))));\n-\t\tAssert.assertEquals(1, input.get(0).getRange().getStart().getLine());\n-\t\tAssert.assertEquals(1, input.get(0).getRange().getStart().getCharacter());\n-\t\tAssert.assertEquals(1, input.get(0).getRange().getEnd().getLine());\n-\t\tAssert.assertEquals(1, input.get(0).getRange().getEnd().getCharacter());\n-\t\tAssert.assertEquals(DocumentHighlightKind.Text, input.get(0).getKind());\n-\t\tAssert.assertEquals(1, input.get(1).getRange().getStart().getLine());\n-\t\tAssert.assertEquals(1, input.get(1).getRange().getStart().getCharacter());\n-\t\tAssert.assertEquals(1, input.get(1).getRange().getEnd().getLine());\n-\t\tAssert.assertEquals(1, input.get(1).getRange().getEnd().getCharacter());\n-\t\tAssert.assertEquals(DocumentHighlightKind.Read, input.get(1).getKind());\n-\t\tAssert.assertEquals(1, input.get(2).getRange().getStart().getLine());\n-\t\tAssert.assertEquals(1, input.get(2).getRange().getStart().getCharacter());\n-\t\tAssert.assertEquals(1, input.get(2).getRange().getEnd().getLine());\n-\t\tAssert.assertEquals(1, input.get(2).getRange().getEnd().getCharacter());\n-\t\tAssert.assertEquals(DocumentHighlightKind.Write, input.get(2).getKind());\n-\t\tAssert.assertEquals(2, input.get(3).getRange().getStart().getLine());\n-\t\tAssert.assertEquals(2, input.get(3).getRange().getStart().getCharacter());\n-\t\tAssert.assertEquals(2, input.get(3).getRange().getEnd().getLine());\n-\t\tAssert.assertEquals(2, input.get(3).getRange().getEnd().getCharacter());\n-\t\tAssert.assertEquals(DocumentHighlightKind.Text, input.get(3).getKind());\n-\t\tAssert.assertEquals(2, input.get(4).getRange().getStart().getLine());\n-\t\tAssert.assertEquals(2, input.get(4).getRange().getStart().getCharacter());\n-\t\tAssert.assertEquals(2, input.get(4).getRange().getEnd().getLine());\n-\t\tAssert.assertEquals(2, input.get(4).getRange().getEnd().getCharacter());\n-\t\tAssert.assertEquals(DocumentHighlightKind.Read, input.get(4).getKind());\n-\t\tAssert.assertEquals(2, input.get(5).getRange().getStart().getLine());\n-\t\tAssert.assertEquals(2, input.get(5).getRange().getStart().getCharacter());\n-\t\tAssert.assertEquals(2, input.get(5).getRange().getEnd().getLine());\n-\t\tAssert.assertEquals(2, input.get(5).getRange().getEnd().getCharacter());\n-\t\tAssert.assertEquals(DocumentHighlightKind.Write, input.get(5).getKind());\n+\t\tassertEquals(1, input.get(0).getRange().getStart().getLine());\n+\t\tassertEquals(1, input.get(0).getRange().getStart().getCharacter());\n+\t\tassertEquals(1, input.get(0).getRange().getEnd().getLine());\n+\t\tassertEquals(1, input.get(0).getRange().getEnd().getCharacter());\n+\t\tassertEquals(DocumentHighlightKind.Text, input.get(0).getKind());\n+\t\tassertEquals(1, input.get(1).getRange().getStart().getLine());\n+\t\tassertEquals(1, input.get(1).getRange().getStart().getCharacter());\n+\t\tassertEquals(1, input.get(1).getRange().getEnd().getLine());\n+\t\tassertEquals(1, input.get(1).getRange().getEnd().getCharacter());\n+\t\tassertEquals(DocumentHighlightKind.Read, input.get(1).getKind());\n+\t\tassertEquals(1, input.get(2).getRange().getStart().getLine());\n+\t\tassertEquals(1, input.get(2).getRange().getStart().getCharacter());\n+\t\tassertEquals(1, input.get(2).getRange().getEnd().getLine());\n+\t\tassertEquals(1, input.get(2).getRange().getEnd().getCharacter());\n+\t\tassertEquals(DocumentHighlightKind.Write, input.get(2).getKind());\n+\t\tassertEquals(2, input.get(3).getRange().getStart().getLine());\n+\t\tassertEquals(2, input.get(3).getRange().getStart().getCharacter());\n+\t\tassertEquals(2, input.get(3).getRange().getEnd().getLine());\n+\t\tassertEquals(2, input.get(3).getRange().getEnd().getCharacter());\n+\t\tassertEquals(DocumentHighlightKind.Text, input.get(3).getKind());\n+\t\tassertEquals(2, input.get(4).getRange().getStart().getLine());\n+\t\tassertEquals(2, input.get(4).getRange().getStart().getCharacter());\n+\t\tassertEquals(2, input.get(4).getRange().getEnd().getLine());\n+\t\tassertEquals(2, input.get(4).getRange().getEnd().getCharacter());\n+\t\tassertEquals(DocumentHighlightKind.Read, input.get(4).getKind());\n+\t\tassertEquals(2, input.get(5).getRange().getStart().getLine());\n+\t\tassertEquals(2, input.get(5).getRange().getStart().getCharacter());\n+\t\tassertEquals(2, input.get(5).getRange().getEnd().getLine());\n+\t\tassertEquals(2, input.get(5).getRange().getEnd().getCharacter());\n+\t\tassertEquals(DocumentHighlightKind.Write, input.get(5).getKind());\n \t}\n \n \t@Test\n \tpublic void withNull() {\n-\t\tfinal List<? extends DocumentHighlight> input = sort(\n+\t\tList<? extends DocumentHighlight> input = sort(\n \t\t\t\tLists.newArrayList(null, newHighlight(DocumentHighlightKind.Text, newRange(1, 1, 1, 1)),\n \t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Write, newRange(1, 1, 1, 1)),\n \t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Read, newRange(1, 1, 1, 1))));\n-\t\tAssert.assertEquals(1, input.get(0).getRange().getStart().getLine());\n-\t\tAssert.assertEquals(1, input.get(0).getRange().getStart().getCharacter());\n-\t\tAssert.assertEquals(1, input.get(0).getRange().getEnd().getLine());\n-\t\tAssert.assertEquals(1, input.get(0).getRange().getEnd().getCharacter());\n-\t\tAssert.assertEquals(DocumentHighlightKind.Text, input.get(0).getKind());\n-\t\tAssert.assertEquals(1, input.get(1).getRange().getStart().getLine());\n-\t\tAssert.assertEquals(1, input.get(1).getRange().getStart().getCharacter());\n-\t\tAssert.assertEquals(1, input.get(1).getRange().getEnd().getLine());\n-\t\tAssert.assertEquals(1, input.get(1).getRange().getEnd().getCharacter());\n-\t\tAssert.assertEquals(DocumentHighlightKind.Read, input.get(1).getKind());\n-\t\tAssert.assertEquals(1, input.get(2).getRange().getStart().getLine());\n-\t\tAssert.assertEquals(1, input.get(2).getRange().getStart().getCharacter());\n-\t\tAssert.assertEquals(1, input.get(2).getRange().getEnd().getLine());\n-\t\tAssert.assertEquals(1, input.get(2).getRange().getEnd().getCharacter());\n-\t\tAssert.assertEquals(DocumentHighlightKind.Write, input.get(2).getKind());\n-\t\tAssert.assertNull(IterableExtensions.last(input));\n+\t\tassertEquals(1, input.get(0).getRange().getStart().getLine());\n+\t\tassertEquals(1, input.get(0).getRange().getStart().getCharacter());\n+\t\tassertEquals(1, input.get(0).getRange().getEnd().getLine());\n+\t\tassertEquals(1, input.get(0).getRange().getEnd().getCharacter());\n+\t\tassertEquals(DocumentHighlightKind.Text, input.get(0).getKind());\n+\t\tassertEquals(1, input.get(1).getRange().getStart().getLine());\n+\t\tassertEquals(1, input.get(1).getRange().getStart().getCharacter());\n+\t\tassertEquals(1, input.get(1).getRange().getEnd().getLine());\n+\t\tassertEquals(1, input.get(1).getRange().getEnd().getCharacter());\n+\t\tassertEquals(DocumentHighlightKind.Read, input.get(1).getKind());\n+\t\tassertEquals(1, input.get(2).getRange().getStart().getLine());\n+\t\tassertEquals(1, input.get(2).getRange().getStart().getCharacter());\n+\t\tassertEquals(1, input.get(2).getRange().getEnd().getLine());\n+\t\tassertEquals(1, input.get(2).getRange().getEnd().getCharacter());\n+\t\tassertEquals(DocumentHighlightKind.Write, input.get(2).getKind());\n+\t\tassertNull(IterableExtensions.last(input));\n \t}\n \n-\tprivate DocumentHighlight newHighlight(final DocumentHighlightKind kind, final Range range) {\n+\tprivate DocumentHighlight newHighlight(DocumentHighlightKind kind, Range range) {\n \t\treturn new DocumentHighlight(range, kind);\n \t}\n \n-\tprivate Range newRange(final int startLine, final int startChar, final int endLine, final int endChar) {\n+\tprivate Range newRange(int startLine, int startChar, int endLine, int endChar) {\n \t\treturn new Range(new Position(startLine, startChar), new Position(endLine, endChar));\n \t}\n \n-\tprivate List<? extends DocumentHighlight> sort(final List<? extends DocumentHighlight> toSort) {\n+\tprivate List<? extends DocumentHighlight> sort(List<? extends DocumentHighlight> toSort) {\n \t\ttoSort.sort(comparator);\n \t\treturn toSort;\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDYzNzc2Nw==", "url": "https://github.com/eclipse/xtext-core/pull/1448#discussion_r410637767", "bodyText": "PS comment above.", "author": "nbhusare", "createdAt": "2020-04-18T05:29:05Z", "path": "org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/util/DocumentHighlightComparatorTest.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.tests.util;\n+\n+import java.util.List;\n+\n+import org.eclipse.lsp4j.DocumentHighlight;\n+import org.eclipse.lsp4j.DocumentHighlightKind;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.xtext.ide.tests.testlanguage.TestLanguageIdeInjectorProvider;\n+import org.eclipse.xtext.ide.util.DocumentHighlightComparator;\n+import org.eclipse.xtext.testing.InjectWith;\n+import org.eclipse.xtext.testing.XtextRunner;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.google.common.collect.Lists;\n+import com.google.inject.Inject;\n+\n+/**\n+ * Test for the null-safe {@link DocumentHighlightComparator}.\n+ * \n+ * <p>\n+ * This test focuses on the {@link DocumentHighlightKind} and the null-safety\n+ * other orderings are checked via the {@link RangeComparatorTest}.\n+ * \n+ * @author akos.kitta - Initial contribution and API\n+ */\n+@RunWith(XtextRunner.class)\n+@InjectWith(TestLanguageIdeInjectorProvider.class)\n+public class DocumentHighlightComparatorTest extends Assert {\n+\t@Inject\n+\tprivate DocumentHighlightComparator comparator;\n+\n+\t@Test\n+\tpublic void withoutNull() {\n+\t\tfinal List<? extends DocumentHighlight> input = sort(\n+\t\t\t\tLists.newArrayList(newHighlight(DocumentHighlightKind.Text, newRange(2, 2, 2, 2)),\n+\t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Text, newRange(1, 1, 1, 1)),\n+\t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Write, newRange(2, 2, 2, 2)),\n+\t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Write, newRange(1, 1, 1, 1)),\n+\t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Read, newRange(2, 2, 2, 2)),\n+\t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Read, newRange(1, 1, 1, 1))));\n+\t\tAssert.assertEquals(1, input.get(0).getRange().getStart().getLine());\n+\t\tAssert.assertEquals(1, input.get(0).getRange().getStart().getCharacter());\n+\t\tAssert.assertEquals(1, input.get(0).getRange().getEnd().getLine());\n+\t\tAssert.assertEquals(1, input.get(0).getRange().getEnd().getCharacter());\n+\t\tAssert.assertEquals(DocumentHighlightKind.Text, input.get(0).getKind());\n+\t\tAssert.assertEquals(1, input.get(1).getRange().getStart().getLine());\n+\t\tAssert.assertEquals(1, input.get(1).getRange().getStart().getCharacter());\n+\t\tAssert.assertEquals(1, input.get(1).getRange().getEnd().getLine());\n+\t\tAssert.assertEquals(1, input.get(1).getRange().getEnd().getCharacter());\n+\t\tAssert.assertEquals(DocumentHighlightKind.Read, input.get(1).getKind());\n+\t\tAssert.assertEquals(1, input.get(2).getRange().getStart().getLine());\n+\t\tAssert.assertEquals(1, input.get(2).getRange().getStart().getCharacter());\n+\t\tAssert.assertEquals(1, input.get(2).getRange().getEnd().getLine());\n+\t\tAssert.assertEquals(1, input.get(2).getRange().getEnd().getCharacter());\n+\t\tAssert.assertEquals(DocumentHighlightKind.Write, input.get(2).getKind());\n+\t\tAssert.assertEquals(2, input.get(3).getRange().getStart().getLine());\n+\t\tAssert.assertEquals(2, input.get(3).getRange().getStart().getCharacter());\n+\t\tAssert.assertEquals(2, input.get(3).getRange().getEnd().getLine());\n+\t\tAssert.assertEquals(2, input.get(3).getRange().getEnd().getCharacter());\n+\t\tAssert.assertEquals(DocumentHighlightKind.Text, input.get(3).getKind());\n+\t\tAssert.assertEquals(2, input.get(4).getRange().getStart().getLine());\n+\t\tAssert.assertEquals(2, input.get(4).getRange().getStart().getCharacter());\n+\t\tAssert.assertEquals(2, input.get(4).getRange().getEnd().getLine());\n+\t\tAssert.assertEquals(2, input.get(4).getRange().getEnd().getCharacter());\n+\t\tAssert.assertEquals(DocumentHighlightKind.Read, input.get(4).getKind());\n+\t\tAssert.assertEquals(2, input.get(5).getRange().getStart().getLine());\n+\t\tAssert.assertEquals(2, input.get(5).getRange().getStart().getCharacter());\n+\t\tAssert.assertEquals(2, input.get(5).getRange().getEnd().getLine());\n+\t\tAssert.assertEquals(2, input.get(5).getRange().getEnd().getCharacter());\n+\t\tAssert.assertEquals(DocumentHighlightKind.Write, input.get(5).getKind());\n+\t}\n+\n+\t@Test\n+\tpublic void withNull() {\n+\t\tfinal List<? extends DocumentHighlight> input = sort(\n+\t\t\t\tLists.newArrayList(null, newHighlight(DocumentHighlightKind.Text, newRange(1, 1, 1, 1)),\n+\t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Write, newRange(1, 1, 1, 1)),\n+\t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Read, newRange(1, 1, 1, 1))));\n+\t\tAssert.assertEquals(1, input.get(0).getRange().getStart().getLine());", "originalCommit": "04d232f1959f19e99f9e354326bff82732c452d9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f42c5148816f793c86a0994bf9644deb589c2ca", "chunk": "diff --git a/org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/util/DocumentHighlightComparatorTest.java b/org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/util/DocumentHighlightComparatorTest.java\nindex e4960e2bc..736ec1c1b 100644\n--- a/org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/util/DocumentHighlightComparatorTest.java\n+++ b/org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/util/DocumentHighlightComparatorTest.java\n\n@@ -43,78 +43,78 @@ public class DocumentHighlightComparatorTest extends Assert {\n \n \t@Test\n \tpublic void withoutNull() {\n-\t\tfinal List<? extends DocumentHighlight> input = sort(\n+\t\tList<? extends DocumentHighlight> input = sort(\n \t\t\t\tLists.newArrayList(newHighlight(DocumentHighlightKind.Text, newRange(2, 2, 2, 2)),\n \t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Text, newRange(1, 1, 1, 1)),\n \t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Write, newRange(2, 2, 2, 2)),\n \t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Write, newRange(1, 1, 1, 1)),\n \t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Read, newRange(2, 2, 2, 2)),\n \t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Read, newRange(1, 1, 1, 1))));\n-\t\tAssert.assertEquals(1, input.get(0).getRange().getStart().getLine());\n-\t\tAssert.assertEquals(1, input.get(0).getRange().getStart().getCharacter());\n-\t\tAssert.assertEquals(1, input.get(0).getRange().getEnd().getLine());\n-\t\tAssert.assertEquals(1, input.get(0).getRange().getEnd().getCharacter());\n-\t\tAssert.assertEquals(DocumentHighlightKind.Text, input.get(0).getKind());\n-\t\tAssert.assertEquals(1, input.get(1).getRange().getStart().getLine());\n-\t\tAssert.assertEquals(1, input.get(1).getRange().getStart().getCharacter());\n-\t\tAssert.assertEquals(1, input.get(1).getRange().getEnd().getLine());\n-\t\tAssert.assertEquals(1, input.get(1).getRange().getEnd().getCharacter());\n-\t\tAssert.assertEquals(DocumentHighlightKind.Read, input.get(1).getKind());\n-\t\tAssert.assertEquals(1, input.get(2).getRange().getStart().getLine());\n-\t\tAssert.assertEquals(1, input.get(2).getRange().getStart().getCharacter());\n-\t\tAssert.assertEquals(1, input.get(2).getRange().getEnd().getLine());\n-\t\tAssert.assertEquals(1, input.get(2).getRange().getEnd().getCharacter());\n-\t\tAssert.assertEquals(DocumentHighlightKind.Write, input.get(2).getKind());\n-\t\tAssert.assertEquals(2, input.get(3).getRange().getStart().getLine());\n-\t\tAssert.assertEquals(2, input.get(3).getRange().getStart().getCharacter());\n-\t\tAssert.assertEquals(2, input.get(3).getRange().getEnd().getLine());\n-\t\tAssert.assertEquals(2, input.get(3).getRange().getEnd().getCharacter());\n-\t\tAssert.assertEquals(DocumentHighlightKind.Text, input.get(3).getKind());\n-\t\tAssert.assertEquals(2, input.get(4).getRange().getStart().getLine());\n-\t\tAssert.assertEquals(2, input.get(4).getRange().getStart().getCharacter());\n-\t\tAssert.assertEquals(2, input.get(4).getRange().getEnd().getLine());\n-\t\tAssert.assertEquals(2, input.get(4).getRange().getEnd().getCharacter());\n-\t\tAssert.assertEquals(DocumentHighlightKind.Read, input.get(4).getKind());\n-\t\tAssert.assertEquals(2, input.get(5).getRange().getStart().getLine());\n-\t\tAssert.assertEquals(2, input.get(5).getRange().getStart().getCharacter());\n-\t\tAssert.assertEquals(2, input.get(5).getRange().getEnd().getLine());\n-\t\tAssert.assertEquals(2, input.get(5).getRange().getEnd().getCharacter());\n-\t\tAssert.assertEquals(DocumentHighlightKind.Write, input.get(5).getKind());\n+\t\tassertEquals(1, input.get(0).getRange().getStart().getLine());\n+\t\tassertEquals(1, input.get(0).getRange().getStart().getCharacter());\n+\t\tassertEquals(1, input.get(0).getRange().getEnd().getLine());\n+\t\tassertEquals(1, input.get(0).getRange().getEnd().getCharacter());\n+\t\tassertEquals(DocumentHighlightKind.Text, input.get(0).getKind());\n+\t\tassertEquals(1, input.get(1).getRange().getStart().getLine());\n+\t\tassertEquals(1, input.get(1).getRange().getStart().getCharacter());\n+\t\tassertEquals(1, input.get(1).getRange().getEnd().getLine());\n+\t\tassertEquals(1, input.get(1).getRange().getEnd().getCharacter());\n+\t\tassertEquals(DocumentHighlightKind.Read, input.get(1).getKind());\n+\t\tassertEquals(1, input.get(2).getRange().getStart().getLine());\n+\t\tassertEquals(1, input.get(2).getRange().getStart().getCharacter());\n+\t\tassertEquals(1, input.get(2).getRange().getEnd().getLine());\n+\t\tassertEquals(1, input.get(2).getRange().getEnd().getCharacter());\n+\t\tassertEquals(DocumentHighlightKind.Write, input.get(2).getKind());\n+\t\tassertEquals(2, input.get(3).getRange().getStart().getLine());\n+\t\tassertEquals(2, input.get(3).getRange().getStart().getCharacter());\n+\t\tassertEquals(2, input.get(3).getRange().getEnd().getLine());\n+\t\tassertEquals(2, input.get(3).getRange().getEnd().getCharacter());\n+\t\tassertEquals(DocumentHighlightKind.Text, input.get(3).getKind());\n+\t\tassertEquals(2, input.get(4).getRange().getStart().getLine());\n+\t\tassertEquals(2, input.get(4).getRange().getStart().getCharacter());\n+\t\tassertEquals(2, input.get(4).getRange().getEnd().getLine());\n+\t\tassertEquals(2, input.get(4).getRange().getEnd().getCharacter());\n+\t\tassertEquals(DocumentHighlightKind.Read, input.get(4).getKind());\n+\t\tassertEquals(2, input.get(5).getRange().getStart().getLine());\n+\t\tassertEquals(2, input.get(5).getRange().getStart().getCharacter());\n+\t\tassertEquals(2, input.get(5).getRange().getEnd().getLine());\n+\t\tassertEquals(2, input.get(5).getRange().getEnd().getCharacter());\n+\t\tassertEquals(DocumentHighlightKind.Write, input.get(5).getKind());\n \t}\n \n \t@Test\n \tpublic void withNull() {\n-\t\tfinal List<? extends DocumentHighlight> input = sort(\n+\t\tList<? extends DocumentHighlight> input = sort(\n \t\t\t\tLists.newArrayList(null, newHighlight(DocumentHighlightKind.Text, newRange(1, 1, 1, 1)),\n \t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Write, newRange(1, 1, 1, 1)),\n \t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Read, newRange(1, 1, 1, 1))));\n-\t\tAssert.assertEquals(1, input.get(0).getRange().getStart().getLine());\n-\t\tAssert.assertEquals(1, input.get(0).getRange().getStart().getCharacter());\n-\t\tAssert.assertEquals(1, input.get(0).getRange().getEnd().getLine());\n-\t\tAssert.assertEquals(1, input.get(0).getRange().getEnd().getCharacter());\n-\t\tAssert.assertEquals(DocumentHighlightKind.Text, input.get(0).getKind());\n-\t\tAssert.assertEquals(1, input.get(1).getRange().getStart().getLine());\n-\t\tAssert.assertEquals(1, input.get(1).getRange().getStart().getCharacter());\n-\t\tAssert.assertEquals(1, input.get(1).getRange().getEnd().getLine());\n-\t\tAssert.assertEquals(1, input.get(1).getRange().getEnd().getCharacter());\n-\t\tAssert.assertEquals(DocumentHighlightKind.Read, input.get(1).getKind());\n-\t\tAssert.assertEquals(1, input.get(2).getRange().getStart().getLine());\n-\t\tAssert.assertEquals(1, input.get(2).getRange().getStart().getCharacter());\n-\t\tAssert.assertEquals(1, input.get(2).getRange().getEnd().getLine());\n-\t\tAssert.assertEquals(1, input.get(2).getRange().getEnd().getCharacter());\n-\t\tAssert.assertEquals(DocumentHighlightKind.Write, input.get(2).getKind());\n-\t\tAssert.assertNull(IterableExtensions.last(input));\n+\t\tassertEquals(1, input.get(0).getRange().getStart().getLine());\n+\t\tassertEquals(1, input.get(0).getRange().getStart().getCharacter());\n+\t\tassertEquals(1, input.get(0).getRange().getEnd().getLine());\n+\t\tassertEquals(1, input.get(0).getRange().getEnd().getCharacter());\n+\t\tassertEquals(DocumentHighlightKind.Text, input.get(0).getKind());\n+\t\tassertEquals(1, input.get(1).getRange().getStart().getLine());\n+\t\tassertEquals(1, input.get(1).getRange().getStart().getCharacter());\n+\t\tassertEquals(1, input.get(1).getRange().getEnd().getLine());\n+\t\tassertEquals(1, input.get(1).getRange().getEnd().getCharacter());\n+\t\tassertEquals(DocumentHighlightKind.Read, input.get(1).getKind());\n+\t\tassertEquals(1, input.get(2).getRange().getStart().getLine());\n+\t\tassertEquals(1, input.get(2).getRange().getStart().getCharacter());\n+\t\tassertEquals(1, input.get(2).getRange().getEnd().getLine());\n+\t\tassertEquals(1, input.get(2).getRange().getEnd().getCharacter());\n+\t\tassertEquals(DocumentHighlightKind.Write, input.get(2).getKind());\n+\t\tassertNull(IterableExtensions.last(input));\n \t}\n \n-\tprivate DocumentHighlight newHighlight(final DocumentHighlightKind kind, final Range range) {\n+\tprivate DocumentHighlight newHighlight(DocumentHighlightKind kind, Range range) {\n \t\treturn new DocumentHighlight(range, kind);\n \t}\n \n-\tprivate Range newRange(final int startLine, final int startChar, final int endLine, final int endChar) {\n+\tprivate Range newRange(int startLine, int startChar, int endLine, int endChar) {\n \t\treturn new Range(new Position(startLine, startChar), new Position(endLine, endChar));\n \t}\n \n-\tprivate List<? extends DocumentHighlight> sort(final List<? extends DocumentHighlight> toSort) {\n+\tprivate List<? extends DocumentHighlight> sort(List<? extends DocumentHighlight> toSort) {\n \t\ttoSort.sort(comparator);\n \t\treturn toSort;\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDYzODMxOA==", "url": "https://github.com/eclipse/xtext-core/pull/1448#discussion_r410638318", "bodyText": "Please remove final. Kindly do the same on lines 113, 118 too.", "author": "nbhusare", "createdAt": "2020-04-18T05:30:33Z", "path": "org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/util/DocumentHighlightComparatorTest.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.tests.util;\n+\n+import java.util.List;\n+\n+import org.eclipse.lsp4j.DocumentHighlight;\n+import org.eclipse.lsp4j.DocumentHighlightKind;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.xtext.ide.tests.testlanguage.TestLanguageIdeInjectorProvider;\n+import org.eclipse.xtext.ide.util.DocumentHighlightComparator;\n+import org.eclipse.xtext.testing.InjectWith;\n+import org.eclipse.xtext.testing.XtextRunner;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.google.common.collect.Lists;\n+import com.google.inject.Inject;\n+\n+/**\n+ * Test for the null-safe {@link DocumentHighlightComparator}.\n+ * \n+ * <p>\n+ * This test focuses on the {@link DocumentHighlightKind} and the null-safety\n+ * other orderings are checked via the {@link RangeComparatorTest}.\n+ * \n+ * @author akos.kitta - Initial contribution and API\n+ */\n+@RunWith(XtextRunner.class)\n+@InjectWith(TestLanguageIdeInjectorProvider.class)\n+public class DocumentHighlightComparatorTest extends Assert {\n+\t@Inject\n+\tprivate DocumentHighlightComparator comparator;\n+\n+\t@Test\n+\tpublic void withoutNull() {\n+\t\tfinal List<? extends DocumentHighlight> input = sort(\n+\t\t\t\tLists.newArrayList(newHighlight(DocumentHighlightKind.Text, newRange(2, 2, 2, 2)),\n+\t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Text, newRange(1, 1, 1, 1)),\n+\t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Write, newRange(2, 2, 2, 2)),\n+\t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Write, newRange(1, 1, 1, 1)),\n+\t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Read, newRange(2, 2, 2, 2)),\n+\t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Read, newRange(1, 1, 1, 1))));\n+\t\tAssert.assertEquals(1, input.get(0).getRange().getStart().getLine());\n+\t\tAssert.assertEquals(1, input.get(0).getRange().getStart().getCharacter());\n+\t\tAssert.assertEquals(1, input.get(0).getRange().getEnd().getLine());\n+\t\tAssert.assertEquals(1, input.get(0).getRange().getEnd().getCharacter());\n+\t\tAssert.assertEquals(DocumentHighlightKind.Text, input.get(0).getKind());\n+\t\tAssert.assertEquals(1, input.get(1).getRange().getStart().getLine());\n+\t\tAssert.assertEquals(1, input.get(1).getRange().getStart().getCharacter());\n+\t\tAssert.assertEquals(1, input.get(1).getRange().getEnd().getLine());\n+\t\tAssert.assertEquals(1, input.get(1).getRange().getEnd().getCharacter());\n+\t\tAssert.assertEquals(DocumentHighlightKind.Read, input.get(1).getKind());\n+\t\tAssert.assertEquals(1, input.get(2).getRange().getStart().getLine());\n+\t\tAssert.assertEquals(1, input.get(2).getRange().getStart().getCharacter());\n+\t\tAssert.assertEquals(1, input.get(2).getRange().getEnd().getLine());\n+\t\tAssert.assertEquals(1, input.get(2).getRange().getEnd().getCharacter());\n+\t\tAssert.assertEquals(DocumentHighlightKind.Write, input.get(2).getKind());\n+\t\tAssert.assertEquals(2, input.get(3).getRange().getStart().getLine());\n+\t\tAssert.assertEquals(2, input.get(3).getRange().getStart().getCharacter());\n+\t\tAssert.assertEquals(2, input.get(3).getRange().getEnd().getLine());\n+\t\tAssert.assertEquals(2, input.get(3).getRange().getEnd().getCharacter());\n+\t\tAssert.assertEquals(DocumentHighlightKind.Text, input.get(3).getKind());\n+\t\tAssert.assertEquals(2, input.get(4).getRange().getStart().getLine());\n+\t\tAssert.assertEquals(2, input.get(4).getRange().getStart().getCharacter());\n+\t\tAssert.assertEquals(2, input.get(4).getRange().getEnd().getLine());\n+\t\tAssert.assertEquals(2, input.get(4).getRange().getEnd().getCharacter());\n+\t\tAssert.assertEquals(DocumentHighlightKind.Read, input.get(4).getKind());\n+\t\tAssert.assertEquals(2, input.get(5).getRange().getStart().getLine());\n+\t\tAssert.assertEquals(2, input.get(5).getRange().getStart().getCharacter());\n+\t\tAssert.assertEquals(2, input.get(5).getRange().getEnd().getLine());\n+\t\tAssert.assertEquals(2, input.get(5).getRange().getEnd().getCharacter());\n+\t\tAssert.assertEquals(DocumentHighlightKind.Write, input.get(5).getKind());\n+\t}\n+\n+\t@Test\n+\tpublic void withNull() {\n+\t\tfinal List<? extends DocumentHighlight> input = sort(\n+\t\t\t\tLists.newArrayList(null, newHighlight(DocumentHighlightKind.Text, newRange(1, 1, 1, 1)),\n+\t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Write, newRange(1, 1, 1, 1)),\n+\t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Read, newRange(1, 1, 1, 1))));\n+\t\tAssert.assertEquals(1, input.get(0).getRange().getStart().getLine());\n+\t\tAssert.assertEquals(1, input.get(0).getRange().getStart().getCharacter());\n+\t\tAssert.assertEquals(1, input.get(0).getRange().getEnd().getLine());\n+\t\tAssert.assertEquals(1, input.get(0).getRange().getEnd().getCharacter());\n+\t\tAssert.assertEquals(DocumentHighlightKind.Text, input.get(0).getKind());\n+\t\tAssert.assertEquals(1, input.get(1).getRange().getStart().getLine());\n+\t\tAssert.assertEquals(1, input.get(1).getRange().getStart().getCharacter());\n+\t\tAssert.assertEquals(1, input.get(1).getRange().getEnd().getLine());\n+\t\tAssert.assertEquals(1, input.get(1).getRange().getEnd().getCharacter());\n+\t\tAssert.assertEquals(DocumentHighlightKind.Read, input.get(1).getKind());\n+\t\tAssert.assertEquals(1, input.get(2).getRange().getStart().getLine());\n+\t\tAssert.assertEquals(1, input.get(2).getRange().getStart().getCharacter());\n+\t\tAssert.assertEquals(1, input.get(2).getRange().getEnd().getLine());\n+\t\tAssert.assertEquals(1, input.get(2).getRange().getEnd().getCharacter());\n+\t\tAssert.assertEquals(DocumentHighlightKind.Write, input.get(2).getKind());\n+\t\tAssert.assertNull(IterableExtensions.last(input));\n+\t}\n+\n+\tprivate DocumentHighlight newHighlight(final DocumentHighlightKind kind, final Range range) {", "originalCommit": "04d232f1959f19e99f9e354326bff82732c452d9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f42c5148816f793c86a0994bf9644deb589c2ca", "chunk": "diff --git a/org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/util/DocumentHighlightComparatorTest.java b/org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/util/DocumentHighlightComparatorTest.java\nindex e4960e2bc..736ec1c1b 100644\n--- a/org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/util/DocumentHighlightComparatorTest.java\n+++ b/org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/util/DocumentHighlightComparatorTest.java\n\n@@ -43,78 +43,78 @@ public class DocumentHighlightComparatorTest extends Assert {\n \n \t@Test\n \tpublic void withoutNull() {\n-\t\tfinal List<? extends DocumentHighlight> input = sort(\n+\t\tList<? extends DocumentHighlight> input = sort(\n \t\t\t\tLists.newArrayList(newHighlight(DocumentHighlightKind.Text, newRange(2, 2, 2, 2)),\n \t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Text, newRange(1, 1, 1, 1)),\n \t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Write, newRange(2, 2, 2, 2)),\n \t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Write, newRange(1, 1, 1, 1)),\n \t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Read, newRange(2, 2, 2, 2)),\n \t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Read, newRange(1, 1, 1, 1))));\n-\t\tAssert.assertEquals(1, input.get(0).getRange().getStart().getLine());\n-\t\tAssert.assertEquals(1, input.get(0).getRange().getStart().getCharacter());\n-\t\tAssert.assertEquals(1, input.get(0).getRange().getEnd().getLine());\n-\t\tAssert.assertEquals(1, input.get(0).getRange().getEnd().getCharacter());\n-\t\tAssert.assertEquals(DocumentHighlightKind.Text, input.get(0).getKind());\n-\t\tAssert.assertEquals(1, input.get(1).getRange().getStart().getLine());\n-\t\tAssert.assertEquals(1, input.get(1).getRange().getStart().getCharacter());\n-\t\tAssert.assertEquals(1, input.get(1).getRange().getEnd().getLine());\n-\t\tAssert.assertEquals(1, input.get(1).getRange().getEnd().getCharacter());\n-\t\tAssert.assertEquals(DocumentHighlightKind.Read, input.get(1).getKind());\n-\t\tAssert.assertEquals(1, input.get(2).getRange().getStart().getLine());\n-\t\tAssert.assertEquals(1, input.get(2).getRange().getStart().getCharacter());\n-\t\tAssert.assertEquals(1, input.get(2).getRange().getEnd().getLine());\n-\t\tAssert.assertEquals(1, input.get(2).getRange().getEnd().getCharacter());\n-\t\tAssert.assertEquals(DocumentHighlightKind.Write, input.get(2).getKind());\n-\t\tAssert.assertEquals(2, input.get(3).getRange().getStart().getLine());\n-\t\tAssert.assertEquals(2, input.get(3).getRange().getStart().getCharacter());\n-\t\tAssert.assertEquals(2, input.get(3).getRange().getEnd().getLine());\n-\t\tAssert.assertEquals(2, input.get(3).getRange().getEnd().getCharacter());\n-\t\tAssert.assertEquals(DocumentHighlightKind.Text, input.get(3).getKind());\n-\t\tAssert.assertEquals(2, input.get(4).getRange().getStart().getLine());\n-\t\tAssert.assertEquals(2, input.get(4).getRange().getStart().getCharacter());\n-\t\tAssert.assertEquals(2, input.get(4).getRange().getEnd().getLine());\n-\t\tAssert.assertEquals(2, input.get(4).getRange().getEnd().getCharacter());\n-\t\tAssert.assertEquals(DocumentHighlightKind.Read, input.get(4).getKind());\n-\t\tAssert.assertEquals(2, input.get(5).getRange().getStart().getLine());\n-\t\tAssert.assertEquals(2, input.get(5).getRange().getStart().getCharacter());\n-\t\tAssert.assertEquals(2, input.get(5).getRange().getEnd().getLine());\n-\t\tAssert.assertEquals(2, input.get(5).getRange().getEnd().getCharacter());\n-\t\tAssert.assertEquals(DocumentHighlightKind.Write, input.get(5).getKind());\n+\t\tassertEquals(1, input.get(0).getRange().getStart().getLine());\n+\t\tassertEquals(1, input.get(0).getRange().getStart().getCharacter());\n+\t\tassertEquals(1, input.get(0).getRange().getEnd().getLine());\n+\t\tassertEquals(1, input.get(0).getRange().getEnd().getCharacter());\n+\t\tassertEquals(DocumentHighlightKind.Text, input.get(0).getKind());\n+\t\tassertEquals(1, input.get(1).getRange().getStart().getLine());\n+\t\tassertEquals(1, input.get(1).getRange().getStart().getCharacter());\n+\t\tassertEquals(1, input.get(1).getRange().getEnd().getLine());\n+\t\tassertEquals(1, input.get(1).getRange().getEnd().getCharacter());\n+\t\tassertEquals(DocumentHighlightKind.Read, input.get(1).getKind());\n+\t\tassertEquals(1, input.get(2).getRange().getStart().getLine());\n+\t\tassertEquals(1, input.get(2).getRange().getStart().getCharacter());\n+\t\tassertEquals(1, input.get(2).getRange().getEnd().getLine());\n+\t\tassertEquals(1, input.get(2).getRange().getEnd().getCharacter());\n+\t\tassertEquals(DocumentHighlightKind.Write, input.get(2).getKind());\n+\t\tassertEquals(2, input.get(3).getRange().getStart().getLine());\n+\t\tassertEquals(2, input.get(3).getRange().getStart().getCharacter());\n+\t\tassertEquals(2, input.get(3).getRange().getEnd().getLine());\n+\t\tassertEquals(2, input.get(3).getRange().getEnd().getCharacter());\n+\t\tassertEquals(DocumentHighlightKind.Text, input.get(3).getKind());\n+\t\tassertEquals(2, input.get(4).getRange().getStart().getLine());\n+\t\tassertEquals(2, input.get(4).getRange().getStart().getCharacter());\n+\t\tassertEquals(2, input.get(4).getRange().getEnd().getLine());\n+\t\tassertEquals(2, input.get(4).getRange().getEnd().getCharacter());\n+\t\tassertEquals(DocumentHighlightKind.Read, input.get(4).getKind());\n+\t\tassertEquals(2, input.get(5).getRange().getStart().getLine());\n+\t\tassertEquals(2, input.get(5).getRange().getStart().getCharacter());\n+\t\tassertEquals(2, input.get(5).getRange().getEnd().getLine());\n+\t\tassertEquals(2, input.get(5).getRange().getEnd().getCharacter());\n+\t\tassertEquals(DocumentHighlightKind.Write, input.get(5).getKind());\n \t}\n \n \t@Test\n \tpublic void withNull() {\n-\t\tfinal List<? extends DocumentHighlight> input = sort(\n+\t\tList<? extends DocumentHighlight> input = sort(\n \t\t\t\tLists.newArrayList(null, newHighlight(DocumentHighlightKind.Text, newRange(1, 1, 1, 1)),\n \t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Write, newRange(1, 1, 1, 1)),\n \t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Read, newRange(1, 1, 1, 1))));\n-\t\tAssert.assertEquals(1, input.get(0).getRange().getStart().getLine());\n-\t\tAssert.assertEquals(1, input.get(0).getRange().getStart().getCharacter());\n-\t\tAssert.assertEquals(1, input.get(0).getRange().getEnd().getLine());\n-\t\tAssert.assertEquals(1, input.get(0).getRange().getEnd().getCharacter());\n-\t\tAssert.assertEquals(DocumentHighlightKind.Text, input.get(0).getKind());\n-\t\tAssert.assertEquals(1, input.get(1).getRange().getStart().getLine());\n-\t\tAssert.assertEquals(1, input.get(1).getRange().getStart().getCharacter());\n-\t\tAssert.assertEquals(1, input.get(1).getRange().getEnd().getLine());\n-\t\tAssert.assertEquals(1, input.get(1).getRange().getEnd().getCharacter());\n-\t\tAssert.assertEquals(DocumentHighlightKind.Read, input.get(1).getKind());\n-\t\tAssert.assertEquals(1, input.get(2).getRange().getStart().getLine());\n-\t\tAssert.assertEquals(1, input.get(2).getRange().getStart().getCharacter());\n-\t\tAssert.assertEquals(1, input.get(2).getRange().getEnd().getLine());\n-\t\tAssert.assertEquals(1, input.get(2).getRange().getEnd().getCharacter());\n-\t\tAssert.assertEquals(DocumentHighlightKind.Write, input.get(2).getKind());\n-\t\tAssert.assertNull(IterableExtensions.last(input));\n+\t\tassertEquals(1, input.get(0).getRange().getStart().getLine());\n+\t\tassertEquals(1, input.get(0).getRange().getStart().getCharacter());\n+\t\tassertEquals(1, input.get(0).getRange().getEnd().getLine());\n+\t\tassertEquals(1, input.get(0).getRange().getEnd().getCharacter());\n+\t\tassertEquals(DocumentHighlightKind.Text, input.get(0).getKind());\n+\t\tassertEquals(1, input.get(1).getRange().getStart().getLine());\n+\t\tassertEquals(1, input.get(1).getRange().getStart().getCharacter());\n+\t\tassertEquals(1, input.get(1).getRange().getEnd().getLine());\n+\t\tassertEquals(1, input.get(1).getRange().getEnd().getCharacter());\n+\t\tassertEquals(DocumentHighlightKind.Read, input.get(1).getKind());\n+\t\tassertEquals(1, input.get(2).getRange().getStart().getLine());\n+\t\tassertEquals(1, input.get(2).getRange().getStart().getCharacter());\n+\t\tassertEquals(1, input.get(2).getRange().getEnd().getLine());\n+\t\tassertEquals(1, input.get(2).getRange().getEnd().getCharacter());\n+\t\tassertEquals(DocumentHighlightKind.Write, input.get(2).getKind());\n+\t\tassertNull(IterableExtensions.last(input));\n \t}\n \n-\tprivate DocumentHighlight newHighlight(final DocumentHighlightKind kind, final Range range) {\n+\tprivate DocumentHighlight newHighlight(DocumentHighlightKind kind, Range range) {\n \t\treturn new DocumentHighlight(range, kind);\n \t}\n \n-\tprivate Range newRange(final int startLine, final int startChar, final int endLine, final int endChar) {\n+\tprivate Range newRange(int startLine, int startChar, int endLine, int endChar) {\n \t\treturn new Range(new Position(startLine, startChar), new Position(endLine, endChar));\n \t}\n \n-\tprivate List<? extends DocumentHighlight> sort(final List<? extends DocumentHighlight> toSort) {\n+\tprivate List<? extends DocumentHighlight> sort(List<? extends DocumentHighlight> toSort) {\n \t\ttoSort.sort(comparator);\n \t\treturn toSort;\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDYzODU5OA==", "url": "https://github.com/eclipse/xtext-core/pull/1448#discussion_r410638598", "bodyText": "Assert.assertEquals(...) -> assertEquals(...)", "author": "nbhusare", "createdAt": "2020-04-18T05:31:16Z", "path": "org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/util/RangeComparatorTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.tests.util;\n+\n+import com.google.common.collect.Lists;\n+import com.google.inject.Inject;\n+import java.util.List;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.xtext.ide.tests.testlanguage.TestLanguageIdeInjectorProvider;\n+import org.eclipse.xtext.ide.util.RangeComparator;\n+import org.eclipse.xtext.testing.InjectWith;\n+import org.eclipse.xtext.testing.XtextRunner;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+/**\n+ * Test for the null-safe {@link RangeComparator}.\n+ * \n+ * @author akos.kitta - Initial contribution and API\n+ */\n+@RunWith(XtextRunner.class)\n+@InjectWith(TestLanguageIdeInjectorProvider.class)\n+public class RangeComparatorTest extends Assert {\n+\t@Inject\n+\tprivate RangeComparator comparator;\n+\n+\t@Test\n+\tpublic void withoutNull() {\n+\t\tList<? extends Range> input = sort(Lists.newArrayList(newRange(1, 2, 1, 2), newRange(1, 1, 2, 1),\n+\t\t\t\tnewRange(1, 1, 1, 2), newRange(1, 1, 1, 1), newRange(2, 2, 2, 3)));\n+\t\tAssert.assertEquals(1, input.get(0).getStart().getLine());", "originalCommit": "04d232f1959f19e99f9e354326bff82732c452d9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f42c5148816f793c86a0994bf9644deb589c2ca", "chunk": "diff --git a/org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/util/RangeComparatorTest.java b/org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/util/RangeComparatorTest.java\nindex e1ddb06ba..f60b95633 100644\n--- a/org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/util/RangeComparatorTest.java\n+++ b/org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/util/RangeComparatorTest.java\n\n@@ -37,40 +37,40 @@ public class RangeComparatorTest extends Assert {\n \tpublic void withoutNull() {\n \t\tList<? extends Range> input = sort(Lists.newArrayList(newRange(1, 2, 1, 2), newRange(1, 1, 2, 1),\n \t\t\t\tnewRange(1, 1, 1, 2), newRange(1, 1, 1, 1), newRange(2, 2, 2, 3)));\n-\t\tAssert.assertEquals(1, input.get(0).getStart().getLine());\n-\t\tAssert.assertEquals(1, input.get(0).getStart().getCharacter());\n-\t\tAssert.assertEquals(1, input.get(0).getEnd().getLine());\n-\t\tAssert.assertEquals(1, input.get(0).getEnd().getCharacter());\n-\t\tAssert.assertEquals(1, input.get(1).getStart().getLine());\n-\t\tAssert.assertEquals(1, input.get(1).getStart().getCharacter());\n-\t\tAssert.assertEquals(1, input.get(1).getEnd().getLine());\n-\t\tAssert.assertEquals(2, input.get(1).getEnd().getCharacter());\n-\t\tAssert.assertEquals(1, input.get(2).getStart().getLine());\n-\t\tAssert.assertEquals(1, input.get(2).getStart().getCharacter());\n-\t\tAssert.assertEquals(2, input.get(2).getEnd().getLine());\n-\t\tAssert.assertEquals(1, input.get(2).getEnd().getCharacter());\n-\t\tAssert.assertEquals(1, input.get(3).getStart().getLine());\n-\t\tAssert.assertEquals(2, input.get(3).getStart().getCharacter());\n-\t\tAssert.assertEquals(1, input.get(3).getEnd().getLine());\n-\t\tAssert.assertEquals(2, input.get(3).getEnd().getCharacter());\n-\t\tAssert.assertEquals(2, input.get(4).getStart().getLine());\n-\t\tAssert.assertEquals(2, input.get(4).getStart().getCharacter());\n-\t\tAssert.assertEquals(2, input.get(4).getEnd().getLine());\n-\t\tAssert.assertEquals(3, input.get(4).getEnd().getCharacter());\n+\t\tassertEquals(1, input.get(0).getStart().getLine());\n+\t\tassertEquals(1, input.get(0).getStart().getCharacter());\n+\t\tassertEquals(1, input.get(0).getEnd().getLine());\n+\t\tassertEquals(1, input.get(0).getEnd().getCharacter());\n+\t\tassertEquals(1, input.get(1).getStart().getLine());\n+\t\tassertEquals(1, input.get(1).getStart().getCharacter());\n+\t\tassertEquals(1, input.get(1).getEnd().getLine());\n+\t\tassertEquals(2, input.get(1).getEnd().getCharacter());\n+\t\tassertEquals(1, input.get(2).getStart().getLine());\n+\t\tassertEquals(1, input.get(2).getStart().getCharacter());\n+\t\tassertEquals(2, input.get(2).getEnd().getLine());\n+\t\tassertEquals(1, input.get(2).getEnd().getCharacter());\n+\t\tassertEquals(1, input.get(3).getStart().getLine());\n+\t\tassertEquals(2, input.get(3).getStart().getCharacter());\n+\t\tassertEquals(1, input.get(3).getEnd().getLine());\n+\t\tassertEquals(2, input.get(3).getEnd().getCharacter());\n+\t\tassertEquals(2, input.get(4).getStart().getLine());\n+\t\tassertEquals(2, input.get(4).getStart().getCharacter());\n+\t\tassertEquals(2, input.get(4).getEnd().getLine());\n+\t\tassertEquals(3, input.get(4).getEnd().getCharacter());\n \t}\n \n \t@Test\n \tpublic void withNull() {\n \t\tList<? extends Range> input = sort(Lists.newArrayList(newRange(2, 2, 2, 3), null, newRange(1, 1, 1, 1)));\n-\t\tAssert.assertEquals(1, input.get(0).getStart().getLine());\n-\t\tAssert.assertEquals(1, input.get(0).getStart().getCharacter());\n-\t\tAssert.assertEquals(1, input.get(0).getEnd().getLine());\n-\t\tAssert.assertEquals(1, input.get(0).getEnd().getCharacter());\n-\t\tAssert.assertEquals(2, input.get(1).getStart().getLine());\n-\t\tAssert.assertEquals(2, input.get(1).getStart().getCharacter());\n-\t\tAssert.assertEquals(2, input.get(1).getEnd().getLine());\n-\t\tAssert.assertEquals(3, input.get(1).getEnd().getCharacter());\n-\t\tAssert.assertNull(IterableExtensions.last(input));\n+\t\tassertEquals(1, input.get(0).getStart().getLine());\n+\t\tassertEquals(1, input.get(0).getStart().getCharacter());\n+\t\tassertEquals(1, input.get(0).getEnd().getLine());\n+\t\tassertEquals(1, input.get(0).getEnd().getCharacter());\n+\t\tassertEquals(2, input.get(1).getStart().getLine());\n+\t\tassertEquals(2, input.get(1).getStart().getCharacter());\n+\t\tassertEquals(2, input.get(1).getEnd().getLine());\n+\t\tassertEquals(3, input.get(1).getEnd().getCharacter());\n+\t\tassertNull(IterableExtensions.last(input));\n \t}\n \n \tprivate Range newRange(int startLine, int startChar, int endLine, int endChar) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDYzODY4Nw==", "url": "https://github.com/eclipse/xtext-core/pull/1448#discussion_r410638687", "bodyText": "PS above comment.", "author": "nbhusare", "createdAt": "2020-04-18T05:31:30Z", "path": "org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/util/RangeComparatorTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.tests.util;\n+\n+import com.google.common.collect.Lists;\n+import com.google.inject.Inject;\n+import java.util.List;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.xtext.ide.tests.testlanguage.TestLanguageIdeInjectorProvider;\n+import org.eclipse.xtext.ide.util.RangeComparator;\n+import org.eclipse.xtext.testing.InjectWith;\n+import org.eclipse.xtext.testing.XtextRunner;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+/**\n+ * Test for the null-safe {@link RangeComparator}.\n+ * \n+ * @author akos.kitta - Initial contribution and API\n+ */\n+@RunWith(XtextRunner.class)\n+@InjectWith(TestLanguageIdeInjectorProvider.class)\n+public class RangeComparatorTest extends Assert {\n+\t@Inject\n+\tprivate RangeComparator comparator;\n+\n+\t@Test\n+\tpublic void withoutNull() {\n+\t\tList<? extends Range> input = sort(Lists.newArrayList(newRange(1, 2, 1, 2), newRange(1, 1, 2, 1),\n+\t\t\t\tnewRange(1, 1, 1, 2), newRange(1, 1, 1, 1), newRange(2, 2, 2, 3)));\n+\t\tAssert.assertEquals(1, input.get(0).getStart().getLine());\n+\t\tAssert.assertEquals(1, input.get(0).getStart().getCharacter());\n+\t\tAssert.assertEquals(1, input.get(0).getEnd().getLine());\n+\t\tAssert.assertEquals(1, input.get(0).getEnd().getCharacter());\n+\t\tAssert.assertEquals(1, input.get(1).getStart().getLine());\n+\t\tAssert.assertEquals(1, input.get(1).getStart().getCharacter());\n+\t\tAssert.assertEquals(1, input.get(1).getEnd().getLine());\n+\t\tAssert.assertEquals(2, input.get(1).getEnd().getCharacter());\n+\t\tAssert.assertEquals(1, input.get(2).getStart().getLine());\n+\t\tAssert.assertEquals(1, input.get(2).getStart().getCharacter());\n+\t\tAssert.assertEquals(2, input.get(2).getEnd().getLine());\n+\t\tAssert.assertEquals(1, input.get(2).getEnd().getCharacter());\n+\t\tAssert.assertEquals(1, input.get(3).getStart().getLine());\n+\t\tAssert.assertEquals(2, input.get(3).getStart().getCharacter());\n+\t\tAssert.assertEquals(1, input.get(3).getEnd().getLine());\n+\t\tAssert.assertEquals(2, input.get(3).getEnd().getCharacter());\n+\t\tAssert.assertEquals(2, input.get(4).getStart().getLine());\n+\t\tAssert.assertEquals(2, input.get(4).getStart().getCharacter());\n+\t\tAssert.assertEquals(2, input.get(4).getEnd().getLine());\n+\t\tAssert.assertEquals(3, input.get(4).getEnd().getCharacter());\n+\t}\n+\n+\t@Test\n+\tpublic void withNull() {\n+\t\tList<? extends Range> input = sort(Lists.newArrayList(newRange(2, 2, 2, 3), null, newRange(1, 1, 1, 1)));\n+\t\tAssert.assertEquals(1, input.get(0).getStart().getLine());", "originalCommit": "04d232f1959f19e99f9e354326bff82732c452d9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f42c5148816f793c86a0994bf9644deb589c2ca", "chunk": "diff --git a/org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/util/RangeComparatorTest.java b/org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/util/RangeComparatorTest.java\nindex e1ddb06ba..f60b95633 100644\n--- a/org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/util/RangeComparatorTest.java\n+++ b/org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/util/RangeComparatorTest.java\n\n@@ -37,40 +37,40 @@ public class RangeComparatorTest extends Assert {\n \tpublic void withoutNull() {\n \t\tList<? extends Range> input = sort(Lists.newArrayList(newRange(1, 2, 1, 2), newRange(1, 1, 2, 1),\n \t\t\t\tnewRange(1, 1, 1, 2), newRange(1, 1, 1, 1), newRange(2, 2, 2, 3)));\n-\t\tAssert.assertEquals(1, input.get(0).getStart().getLine());\n-\t\tAssert.assertEquals(1, input.get(0).getStart().getCharacter());\n-\t\tAssert.assertEquals(1, input.get(0).getEnd().getLine());\n-\t\tAssert.assertEquals(1, input.get(0).getEnd().getCharacter());\n-\t\tAssert.assertEquals(1, input.get(1).getStart().getLine());\n-\t\tAssert.assertEquals(1, input.get(1).getStart().getCharacter());\n-\t\tAssert.assertEquals(1, input.get(1).getEnd().getLine());\n-\t\tAssert.assertEquals(2, input.get(1).getEnd().getCharacter());\n-\t\tAssert.assertEquals(1, input.get(2).getStart().getLine());\n-\t\tAssert.assertEquals(1, input.get(2).getStart().getCharacter());\n-\t\tAssert.assertEquals(2, input.get(2).getEnd().getLine());\n-\t\tAssert.assertEquals(1, input.get(2).getEnd().getCharacter());\n-\t\tAssert.assertEquals(1, input.get(3).getStart().getLine());\n-\t\tAssert.assertEquals(2, input.get(3).getStart().getCharacter());\n-\t\tAssert.assertEquals(1, input.get(3).getEnd().getLine());\n-\t\tAssert.assertEquals(2, input.get(3).getEnd().getCharacter());\n-\t\tAssert.assertEquals(2, input.get(4).getStart().getLine());\n-\t\tAssert.assertEquals(2, input.get(4).getStart().getCharacter());\n-\t\tAssert.assertEquals(2, input.get(4).getEnd().getLine());\n-\t\tAssert.assertEquals(3, input.get(4).getEnd().getCharacter());\n+\t\tassertEquals(1, input.get(0).getStart().getLine());\n+\t\tassertEquals(1, input.get(0).getStart().getCharacter());\n+\t\tassertEquals(1, input.get(0).getEnd().getLine());\n+\t\tassertEquals(1, input.get(0).getEnd().getCharacter());\n+\t\tassertEquals(1, input.get(1).getStart().getLine());\n+\t\tassertEquals(1, input.get(1).getStart().getCharacter());\n+\t\tassertEquals(1, input.get(1).getEnd().getLine());\n+\t\tassertEquals(2, input.get(1).getEnd().getCharacter());\n+\t\tassertEquals(1, input.get(2).getStart().getLine());\n+\t\tassertEquals(1, input.get(2).getStart().getCharacter());\n+\t\tassertEquals(2, input.get(2).getEnd().getLine());\n+\t\tassertEquals(1, input.get(2).getEnd().getCharacter());\n+\t\tassertEquals(1, input.get(3).getStart().getLine());\n+\t\tassertEquals(2, input.get(3).getStart().getCharacter());\n+\t\tassertEquals(1, input.get(3).getEnd().getLine());\n+\t\tassertEquals(2, input.get(3).getEnd().getCharacter());\n+\t\tassertEquals(2, input.get(4).getStart().getLine());\n+\t\tassertEquals(2, input.get(4).getStart().getCharacter());\n+\t\tassertEquals(2, input.get(4).getEnd().getLine());\n+\t\tassertEquals(3, input.get(4).getEnd().getCharacter());\n \t}\n \n \t@Test\n \tpublic void withNull() {\n \t\tList<? extends Range> input = sort(Lists.newArrayList(newRange(2, 2, 2, 3), null, newRange(1, 1, 1, 1)));\n-\t\tAssert.assertEquals(1, input.get(0).getStart().getLine());\n-\t\tAssert.assertEquals(1, input.get(0).getStart().getCharacter());\n-\t\tAssert.assertEquals(1, input.get(0).getEnd().getLine());\n-\t\tAssert.assertEquals(1, input.get(0).getEnd().getCharacter());\n-\t\tAssert.assertEquals(2, input.get(1).getStart().getLine());\n-\t\tAssert.assertEquals(2, input.get(1).getStart().getCharacter());\n-\t\tAssert.assertEquals(2, input.get(1).getEnd().getLine());\n-\t\tAssert.assertEquals(3, input.get(1).getEnd().getCharacter());\n-\t\tAssert.assertNull(IterableExtensions.last(input));\n+\t\tassertEquals(1, input.get(0).getStart().getLine());\n+\t\tassertEquals(1, input.get(0).getStart().getCharacter());\n+\t\tassertEquals(1, input.get(0).getEnd().getLine());\n+\t\tassertEquals(1, input.get(0).getEnd().getCharacter());\n+\t\tassertEquals(2, input.get(1).getStart().getLine());\n+\t\tassertEquals(2, input.get(1).getStart().getCharacter());\n+\t\tassertEquals(2, input.get(1).getEnd().getLine());\n+\t\tassertEquals(3, input.get(1).getEnd().getCharacter());\n+\t\tassertNull(IterableExtensions.last(input));\n \t}\n \n \tprivate Range newRange(int startLine, int startChar, int endLine, int endChar) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY0OTcxMg==", "url": "https://github.com/eclipse/xtext-core/pull/1448#discussion_r410649712", "bodyText": "NL", "author": "nbhusare", "createdAt": "2020-04-18T05:59:33Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/IdeContentProposalAcceptor.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*******************************************************************************\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.ide.editor.contentassist;\n+\n+import java.util.Comparator;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+import org.eclipse.xtext.xbase.lib.Pair;\n+\n+import com.google.common.collect.Iterables;\n+\n+/**\n+ * @author Sven Efftinge - Initial contribution and API\n+ * \n+ * @since 2.11\n+ */\n+public class IdeContentProposalAcceptor\n+\t\timplements IIdeContentProposalAcceptor, Comparator<Pair<Integer, ContentAssistEntry>> {\n+\n+\tprotected final Set<Pair<Integer, ContentAssistEntry>> entries = new TreeSet<Pair<Integer, ContentAssistEntry>>(\n+\t\t\tthis);\n+\n+\t@Override\n+\tpublic void accept(ContentAssistEntry entry, int priority) {\n+\t\tif (entry != null) {\n+\t\t\tif (entry.getProposal() == null)\n+\t\t\t\tthrow new IllegalArgumentException(\"Proposal must not be null.\");\n+\t\t\tentries.add(Pair.of(priority, entry));\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic boolean canAcceptMoreProposals() {\n+\t\treturn entries.size() < 100;\n+\t}\n+\n+\t@Override\n+\tpublic int compare(Pair<Integer, ContentAssistEntry> p1, Pair<Integer, ContentAssistEntry> p2) {\n+\t\tint prioResult = p2.getKey().compareTo(p1.getKey());\n+\t\tif (prioResult != 0)\n+\t\t\treturn prioResult;\n+\t\tString s1 = p1.getValue().getLabel() != null ? p1.getValue().getLabel() : p1.getValue().getProposal();\n+\t\tString s2 = p2.getValue().getLabel() != null ? p2.getValue().getLabel() : p2.getValue().getProposal();\n+\t\tint ignoreCase = s1.compareToIgnoreCase(s2);\n+\t\tif (ignoreCase == 0) {\n+\t\t\treturn s1.compareTo(s2);\n+\t\t}\n+\t\treturn ignoreCase;\n+\t}\n+\n+\tpublic Iterable<ContentAssistEntry> getEntries() {\n+\t\treturn Iterables.transform(entries, e -> e.getValue());\n+\t}\n+\n+}", "originalCommit": "04d232f1959f19e99f9e354326bff82732c452d9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1324f2f7a0f1df18dff813ad1e6cb2cd0eea12b8", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/IdeContentProposalAcceptor.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/IdeContentProposalAcceptor.java\nindex d34c04ebc..ec8f5d05d 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/IdeContentProposalAcceptor.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/IdeContentProposalAcceptor.java\n\n@@ -59,4 +59,4 @@ public class IdeContentProposalAcceptor\n \t\treturn Iterables.transform(entries, e -> e.getValue());\n \t}\n \n-}\n\\ No newline at end of file\n+}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY1MDg4OA==", "url": "https://github.com/eclipse/xtext-core/pull/1448#discussion_r410650888", "bodyText": "return this.qualifiedNameConverter -> return qualifiedNameConverter", "author": "nbhusare", "createdAt": "2020-04-18T06:02:49Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/IdeCrossrefProposalProvider.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*******************************************************************************\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.ide.editor.contentassist;\n+\n+import org.apache.log4j.Logger;\n+import org.eclipse.xtext.CrossReference;\n+import org.eclipse.xtext.naming.IQualifiedNameConverter;\n+import org.eclipse.xtext.resource.IEObjectDescription;\n+import org.eclipse.xtext.scoping.IScope;\n+\n+import com.google.common.base.Predicate;\n+import com.google.inject.Inject;\n+\n+/**\n+ * Special content assist proposal provider for cross-references.\n+ * \n+ * @noreference\n+ */\n+public class IdeCrossrefProposalProvider {\n+\n+\tprivate static final Logger LOG = Logger.getLogger(IdeCrossrefProposalProvider.class);\n+\n+\t@Inject\n+\tprivate IQualifiedNameConverter qualifiedNameConverter;\n+\n+\t@Inject\n+\tprivate IdeContentProposalCreator proposalCreator;\n+\n+\t@Inject\n+\tprivate IdeContentProposalPriorities proposalPriorities;\n+\n+\tpublic void lookupCrossReference(IScope scope, CrossReference crossReference, ContentAssistContext context,\n+\t\t\tIIdeContentProposalAcceptor acceptor, Predicate<IEObjectDescription> filter) {\n+\t\ttry {\n+\t\t\tfor (IEObjectDescription candidate : queryScope(scope, crossReference, context)) {\n+\t\t\t\tif (!acceptor.canAcceptMoreProposals()) {\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t\tif (filter.apply(candidate)) {\n+\t\t\t\t\tContentAssistEntry entry = createProposal(candidate, crossReference, context);\n+\t\t\t\t\tacceptor.accept(entry, proposalPriorities.getCrossRefPriority(candidate, entry));\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} catch (UnsupportedOperationException uoe) {\n+\t\t\tLOG.error(\"Failed to create content assist proposals for cross-reference.\", uoe);\n+\t\t}\n+\t}\n+\n+\tprotected Iterable<IEObjectDescription> queryScope(IScope scope, CrossReference crossReference,\n+\t\t\tContentAssistContext context) {\n+\t\treturn scope.getAllElements();\n+\t}\n+\n+\tprotected ContentAssistEntry createProposal(IEObjectDescription candidate, CrossReference crossRef,\n+\t\t\tContentAssistContext context) {\n+\t\treturn proposalCreator.createProposal(qualifiedNameConverter.toString(candidate.getName()), context, (e) -> {\n+\t\t\te.setSource(candidate);\n+\t\t\te.setDescription(candidate.getEClass() != null ? candidate.getEClass().getName() : null);\n+\t\t\te.setKind(ContentAssistEntry.KIND_REFERENCE);\n+\t\t});\n+\t}\n+\n+\tprotected IQualifiedNameConverter getQualifiedNameConverter() {\n+\t\treturn this.qualifiedNameConverter;", "originalCommit": "04d232f1959f19e99f9e354326bff82732c452d9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1324f2f7a0f1df18dff813ad1e6cb2cd0eea12b8", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/IdeCrossrefProposalProvider.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/IdeCrossrefProposalProvider.java\nindex dddf9a040..a24a4939b 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/IdeCrossrefProposalProvider.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/IdeCrossrefProposalProvider.java\n\n@@ -67,11 +67,11 @@ public class IdeCrossrefProposalProvider {\n \t}\n \n \tprotected IQualifiedNameConverter getQualifiedNameConverter() {\n-\t\treturn this.qualifiedNameConverter;\n+\t\treturn qualifiedNameConverter;\n \t}\n \n \tprotected IdeContentProposalCreator getProposalCreator() {\n-\t\treturn this.proposalCreator;\n+\t\treturn proposalCreator;\n \t}\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY1MTA0NA==", "url": "https://github.com/eclipse/xtext-core/pull/1448#discussion_r410651044", "bodyText": "return this.proposalCreator -> return proposalCreator", "author": "nbhusare", "createdAt": "2020-04-18T06:03:11Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/IdeCrossrefProposalProvider.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*******************************************************************************\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.ide.editor.contentassist;\n+\n+import org.apache.log4j.Logger;\n+import org.eclipse.xtext.CrossReference;\n+import org.eclipse.xtext.naming.IQualifiedNameConverter;\n+import org.eclipse.xtext.resource.IEObjectDescription;\n+import org.eclipse.xtext.scoping.IScope;\n+\n+import com.google.common.base.Predicate;\n+import com.google.inject.Inject;\n+\n+/**\n+ * Special content assist proposal provider for cross-references.\n+ * \n+ * @noreference\n+ */\n+public class IdeCrossrefProposalProvider {\n+\n+\tprivate static final Logger LOG = Logger.getLogger(IdeCrossrefProposalProvider.class);\n+\n+\t@Inject\n+\tprivate IQualifiedNameConverter qualifiedNameConverter;\n+\n+\t@Inject\n+\tprivate IdeContentProposalCreator proposalCreator;\n+\n+\t@Inject\n+\tprivate IdeContentProposalPriorities proposalPriorities;\n+\n+\tpublic void lookupCrossReference(IScope scope, CrossReference crossReference, ContentAssistContext context,\n+\t\t\tIIdeContentProposalAcceptor acceptor, Predicate<IEObjectDescription> filter) {\n+\t\ttry {\n+\t\t\tfor (IEObjectDescription candidate : queryScope(scope, crossReference, context)) {\n+\t\t\t\tif (!acceptor.canAcceptMoreProposals()) {\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t\tif (filter.apply(candidate)) {\n+\t\t\t\t\tContentAssistEntry entry = createProposal(candidate, crossReference, context);\n+\t\t\t\t\tacceptor.accept(entry, proposalPriorities.getCrossRefPriority(candidate, entry));\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} catch (UnsupportedOperationException uoe) {\n+\t\t\tLOG.error(\"Failed to create content assist proposals for cross-reference.\", uoe);\n+\t\t}\n+\t}\n+\n+\tprotected Iterable<IEObjectDescription> queryScope(IScope scope, CrossReference crossReference,\n+\t\t\tContentAssistContext context) {\n+\t\treturn scope.getAllElements();\n+\t}\n+\n+\tprotected ContentAssistEntry createProposal(IEObjectDescription candidate, CrossReference crossRef,\n+\t\t\tContentAssistContext context) {\n+\t\treturn proposalCreator.createProposal(qualifiedNameConverter.toString(candidate.getName()), context, (e) -> {\n+\t\t\te.setSource(candidate);\n+\t\t\te.setDescription(candidate.getEClass() != null ? candidate.getEClass().getName() : null);\n+\t\t\te.setKind(ContentAssistEntry.KIND_REFERENCE);\n+\t\t});\n+\t}\n+\n+\tprotected IQualifiedNameConverter getQualifiedNameConverter() {\n+\t\treturn this.qualifiedNameConverter;\n+\t}\n+\n+\tprotected IdeContentProposalCreator getProposalCreator() {\n+\t\treturn this.proposalCreator;", "originalCommit": "04d232f1959f19e99f9e354326bff82732c452d9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1324f2f7a0f1df18dff813ad1e6cb2cd0eea12b8", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/IdeCrossrefProposalProvider.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/IdeCrossrefProposalProvider.java\nindex dddf9a040..a24a4939b 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/IdeCrossrefProposalProvider.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/IdeCrossrefProposalProvider.java\n\n@@ -67,11 +67,11 @@ public class IdeCrossrefProposalProvider {\n \t}\n \n \tprotected IQualifiedNameConverter getQualifiedNameConverter() {\n-\t\treturn this.qualifiedNameConverter;\n+\t\treturn qualifiedNameConverter;\n \t}\n \n \tprotected IdeContentProposalCreator getProposalCreator() {\n-\t\treturn this.proposalCreator;\n+\t\treturn proposalCreator;\n \t}\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY1MTYyOQ==", "url": "https://github.com/eclipse/xtext-core/pull/1448#discussion_r410651629", "bodyText": "The indentation of the code inside the while-loop looks incorrect. Please confirm.", "author": "nbhusare", "createdAt": "2020-04-18T06:04:41Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/hierarchy/DefaultHierarchyNode.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.editor.hierarchy;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.xtext.resource.IEObjectDescription;\n+import org.eclipse.xtext.util.Wrapper;\n+\n+import com.google.common.base.Objects;\n+\n+/**\n+ * @author kosyakov - Initial contribution and API\n+ * @since 2.10\n+ */\n+public class DefaultHierarchyNode implements IHierarchyNode {\n+\tprivate IHierarchyNode parent;\n+\n+\tprivate boolean mayHaveChildren;\n+\n+\tprivate IEObjectDescription element;\n+\n+\tprivate final List<IHierarchyNodeReference> references = new ArrayList<>();\n+\n+\tprivate Wrapper<Boolean> recursive;\n+\n+\t@Override\n+\tpublic Object getNavigationElement() {\n+\t\tif (!references.isEmpty()) {\n+\t\t\treturn references.get(0);\n+\t\t} else {\n+\t\t\treturn element;\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic boolean isRecursive() {\n+\t\tif (recursive == null) {\n+\t\t\trecursive = Wrapper.wrap(internalIsRecursive());\n+\t\t}\n+\t\treturn recursive.get().booleanValue();\n+\t}\n+\n+\tprotected boolean internalIsRecursive() {\n+\t\tIHierarchyNode node = parent;\n+\t\twhile (node != null) {", "originalCommit": "04d232f1959f19e99f9e354326bff82732c452d9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1324f2f7a0f1df18dff813ad1e6cb2cd0eea12b8", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/hierarchy/DefaultHierarchyNode.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/hierarchy/DefaultHierarchyNode.java\nindex b668e1392..6e14ccd4d 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/hierarchy/DefaultHierarchyNode.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/hierarchy/DefaultHierarchyNode.java\n\n@@ -52,19 +52,19 @@ public class DefaultHierarchyNode implements IHierarchyNode {\n \tprotected boolean internalIsRecursive() {\n \t\tIHierarchyNode node = parent;\n \t\twhile (node != null) {\n-\t\t\t\tURI nodeElementUri = node.getElement().getEObjectURI();\n-\t\t\t\tURI elementUri = this.element.getEObjectURI();\n-\t\t\t\tif (Objects.equal(nodeElementUri, elementUri)) {\n-\t\t\t\t\treturn true;\n-\t\t\t\t}\n-\t\t\t\tnode = node.getParent();\n+\t\t\tURI nodeElementUri = node.getElement().getEObjectURI();\n+\t\t\tURI elementUri = this.element.getEObjectURI();\n+\t\t\tif (Objects.equal(nodeElementUri, elementUri)) {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t\tnode = node.getParent();\n \t\t}\n \t\treturn false;\n \t}\n \n \t@Override\n \tpublic boolean mayHaveChildren() {\n-\t\treturn this.mayHaveChildren;\n+\t\treturn mayHaveChildren;\n \t}\n \n \tpublic IHierarchyNode getParent() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY1MTc3Mg==", "url": "https://github.com/eclipse/xtext-core/pull/1448#discussion_r410651772", "bodyText": "this.mayHaveChildren -> mayHaveChildren", "author": "nbhusare", "createdAt": "2020-04-18T06:05:04Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/hierarchy/DefaultHierarchyNode.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.editor.hierarchy;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.xtext.resource.IEObjectDescription;\n+import org.eclipse.xtext.util.Wrapper;\n+\n+import com.google.common.base.Objects;\n+\n+/**\n+ * @author kosyakov - Initial contribution and API\n+ * @since 2.10\n+ */\n+public class DefaultHierarchyNode implements IHierarchyNode {\n+\tprivate IHierarchyNode parent;\n+\n+\tprivate boolean mayHaveChildren;\n+\n+\tprivate IEObjectDescription element;\n+\n+\tprivate final List<IHierarchyNodeReference> references = new ArrayList<>();\n+\n+\tprivate Wrapper<Boolean> recursive;\n+\n+\t@Override\n+\tpublic Object getNavigationElement() {\n+\t\tif (!references.isEmpty()) {\n+\t\t\treturn references.get(0);\n+\t\t} else {\n+\t\t\treturn element;\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic boolean isRecursive() {\n+\t\tif (recursive == null) {\n+\t\t\trecursive = Wrapper.wrap(internalIsRecursive());\n+\t\t}\n+\t\treturn recursive.get().booleanValue();\n+\t}\n+\n+\tprotected boolean internalIsRecursive() {\n+\t\tIHierarchyNode node = parent;\n+\t\twhile (node != null) {\n+\t\t\t\tURI nodeElementUri = node.getElement().getEObjectURI();\n+\t\t\t\tURI elementUri = this.element.getEObjectURI();\n+\t\t\t\tif (Objects.equal(nodeElementUri, elementUri)) {\n+\t\t\t\t\treturn true;\n+\t\t\t\t}\n+\t\t\t\tnode = node.getParent();\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n+\t@Override\n+\tpublic boolean mayHaveChildren() {\n+\t\treturn this.mayHaveChildren;", "originalCommit": "04d232f1959f19e99f9e354326bff82732c452d9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1324f2f7a0f1df18dff813ad1e6cb2cd0eea12b8", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/hierarchy/DefaultHierarchyNode.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/hierarchy/DefaultHierarchyNode.java\nindex b668e1392..6e14ccd4d 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/hierarchy/DefaultHierarchyNode.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/hierarchy/DefaultHierarchyNode.java\n\n@@ -52,19 +52,19 @@ public class DefaultHierarchyNode implements IHierarchyNode {\n \tprotected boolean internalIsRecursive() {\n \t\tIHierarchyNode node = parent;\n \t\twhile (node != null) {\n-\t\t\t\tURI nodeElementUri = node.getElement().getEObjectURI();\n-\t\t\t\tURI elementUri = this.element.getEObjectURI();\n-\t\t\t\tif (Objects.equal(nodeElementUri, elementUri)) {\n-\t\t\t\t\treturn true;\n-\t\t\t\t}\n-\t\t\t\tnode = node.getParent();\n+\t\t\tURI nodeElementUri = node.getElement().getEObjectURI();\n+\t\t\tURI elementUri = this.element.getEObjectURI();\n+\t\t\tif (Objects.equal(nodeElementUri, elementUri)) {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t\tnode = node.getParent();\n \t\t}\n \t\treturn false;\n \t}\n \n \t@Override\n \tpublic boolean mayHaveChildren() {\n-\t\treturn this.mayHaveChildren;\n+\t\treturn mayHaveChildren;\n \t}\n \n \tpublic IHierarchyNode getParent() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY1MjEzMQ==", "url": "https://github.com/eclipse/xtext-core/pull/1448#discussion_r410652131", "bodyText": "this.roots -> roots", "author": "nbhusare", "createdAt": "2020-04-18T06:06:03Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/hierarchy/DefaultHierarchyRoot.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.editor.hierarchy;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * @author kosyakov - Initial contribution and API\n+ * @since 2.10\n+ */\n+public class DefaultHierarchyRoot implements IHierarchyRoot {\n+\tprivate final List<IHierarchyNode> roots = new ArrayList<>();\n+\n+\tpublic List<IHierarchyNode> getRoots() {\n+\t\treturn this.roots;", "originalCommit": "04d232f1959f19e99f9e354326bff82732c452d9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1324f2f7a0f1df18dff813ad1e6cb2cd0eea12b8", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/hierarchy/DefaultHierarchyRoot.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/hierarchy/DefaultHierarchyRoot.java\nindex 4af0a92e0..e1b527c54 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/hierarchy/DefaultHierarchyRoot.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/hierarchy/DefaultHierarchyRoot.java\n\n@@ -19,6 +19,6 @@ public class DefaultHierarchyRoot implements IHierarchyRoot {\n \tprivate final List<IHierarchyNode> roots = new ArrayList<>();\n \n \tpublic List<IHierarchyNode> getRoots() {\n-\t\treturn this.roots;\n+\t\treturn roots;\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY1MzAwOQ==", "url": "https://github.com/eclipse/xtext-core/pull/1448#discussion_r410653009", "bodyText": "new ArrayList<>() -> Collections.emptyList()", "author": "nbhusare", "createdAt": "2020-04-18T06:08:16Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/symbol/DocumentSymbolMapper.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/**\n+ * Copyright (c) 2018, 2020 TypeFox and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.server.symbol;\n+\n+import java.util.ArrayList;\n+\n+import org.eclipse.emf.ecore.EClass;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.lsp4j.DocumentSymbol;\n+import org.eclipse.lsp4j.Location;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.SymbolKind;\n+import org.eclipse.xtext.ide.server.DocumentExtensions;\n+import org.eclipse.xtext.naming.IQualifiedNameProvider;\n+import org.eclipse.xtext.naming.QualifiedName;\n+import org.eclipse.xtext.resource.IEObjectDescription;\n+\n+import com.google.common.annotations.Beta;\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+\n+/**\n+ * Maps an EObject to the corresponding {@link DocumentSymbol document symbol}.\n+ */\n+@Beta\n+@Singleton\n+public class DocumentSymbolMapper {\n+\t/**\n+\t * Provides {@link DocumentSymbol#detail detail} for a {@link DocumentSymbol document symbol}.\n+\t * <p>\n+\t * Always returns an empty string by default.\n+\t * \n+\t * @see DocumentSymbol#detail\n+\t */\n+\t@Beta\n+\t@Singleton\n+\tpublic static class DocumentSymbolDetailsProvider {\n+\t\tpublic String getDetails(EObject object) {\n+\t\t\treturn \"\";\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Provides a human-readable name for the document symbol.\n+\t * \n+\t * @see DocumentSymbol#name\n+\t */\n+\t@Beta\n+\t@Singleton\n+\tpublic static class DocumentSymbolNameProvider {\n+\t\t@Inject\n+\t\tprivate IQualifiedNameProvider qualifiedNameProvider;\n+\n+\t\tpublic String getName(EObject object) {\n+\t\t\treturn getName(object != null ? qualifiedNameProvider.getFullyQualifiedName(object) : null);\n+\t\t}\n+\n+\t\tpublic String getName(IEObjectDescription description) {\n+\t\t\treturn getName(description != null ? description.getName() : null);\n+\t\t}\n+\n+\t\tprotected String getName(QualifiedName qualifiedName) {\n+\t\t\tif (qualifiedName != null) {\n+\t\t\t\treturn qualifiedName.toString();\n+\t\t\t}\n+\t\t\treturn null;\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Provides the {@link SymbolKind symbol kind} information for the document symbol.\n+\t * \n+\t * @see DocumentSymbol#kind\n+\t */\n+\t@Beta\n+\t@Singleton\n+\tpublic static class DocumentSymbolKindProvider {\n+\t\tpublic SymbolKind getSymbolKind(EObject object) {\n+\t\t\treturn getSymbolKind(object != null ? object.eClass() : null);\n+\t\t}\n+\n+\t\tpublic SymbolKind getSymbolKind(IEObjectDescription description) {\n+\t\t\treturn this.getSymbolKind(description != null ? description.getEClass() : null);\n+\t\t}\n+\n+\t\tprotected SymbolKind getSymbolKind(EClass clazz) {\n+\t\t\treturn SymbolKind.Property;\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Provides {@link DocumentSymbol#range range} and {@link DocumentSymbol#selectionRange selection range} for a\n+\t * document symbol.\n+\t * \n+\t * @see DocumentSymbol#range\n+\t * @see DocumentSymbol#selectionRange\n+\t */\n+\t@Beta\n+\t@Singleton\n+\tpublic static class DocumentSymbolRangeProvider {\n+\t\t@Inject\n+\t\tprivate DocumentExtensions documentExtensions;\n+\n+\t\t/**\n+\t\t * The range enclosing this symbol not including leading/trailing whitespace but everything else like comments.\n+\t\t */\n+\t\tpublic Range getRange(EObject object) {\n+\t\t\tLocation newFullLocation = documentExtensions.newFullLocation(object);\n+\t\t\tif (newFullLocation != null) {\n+\t\t\t\treturn newFullLocation.getRange();\n+\t\t\t}\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\t/**\n+\t\t * The range that should be selected and revealed when this symbol is being picked, e.g the name of a function.\n+\t\t */\n+\t\tpublic Range getSelectionRange(EObject object) {\n+\t\t\tLocation newLocation = documentExtensions.newLocation(object);\n+\t\t\tif (newLocation != null) {\n+\t\t\t\treturn newLocation.getRange();\n+\t\t\t}\n+\t\t\treturn null;\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Determines whether a document symbol can be marked as {@link DocumentSymbol#deprecated deprecated}.\n+\t * \n+\t * @see DocumentSymbol#deprecated\n+\t */\n+\t@Beta\n+\t@Singleton\n+\tpublic static class DocumentSymbolDeprecationInfoProvider {\n+\t\tpublic boolean isDeprecated(EObject object) {\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tpublic boolean isDeprecated(IEObjectDescription description) {\n+\t\t\treturn false;\n+\t\t}\n+\t}\n+\n+\t@Inject\n+\tprivate DocumentSymbolMapper.DocumentSymbolNameProvider nameProvider;\n+\n+\t@Inject\n+\tprivate DocumentSymbolMapper.DocumentSymbolKindProvider kindProvider;\n+\n+\t@Inject\n+\tprivate DocumentSymbolMapper.DocumentSymbolRangeProvider rangeProvider;\n+\n+\t@Inject\n+\tprivate DocumentSymbolMapper.DocumentSymbolDetailsProvider detailsProvider;\n+\n+\t@Inject\n+\tprivate DocumentSymbolMapper.DocumentSymbolDeprecationInfoProvider deprecationInfoProvider;\n+\n+\t/**\n+\t * Converts the {@code EObject} argument into a {@link DocumentSymbol document symbol} without the\n+\t * {@link DocumentSymbol#children children} information filled in.\n+\t */\n+\tpublic DocumentSymbol toDocumentSymbol(EObject object) {\n+\t\tDocumentSymbol documentSymbol = new DocumentSymbol();\n+\t\tString objectName = nameProvider.getName(object);\n+\t\tif (objectName != null) {\n+\t\t\tdocumentSymbol.setName(objectName);\n+\t\t}\n+\t\tSymbolKind objectKind = kindProvider.getSymbolKind(object);\n+\t\tif (objectKind != null) {\n+\t\t\tdocumentSymbol.setKind(objectKind);\n+\t\t}\n+\t\tRange objectRange = rangeProvider.getRange(object);\n+\t\tif (objectRange != null) {\n+\t\t\tdocumentSymbol.setRange(objectRange);\n+\t\t}\n+\t\tRange objectSelectionRange = rangeProvider.getSelectionRange(object);\n+\t\tif (objectSelectionRange != null) {\n+\t\t\tdocumentSymbol.setSelectionRange(objectSelectionRange);\n+\t\t}\n+\t\tdocumentSymbol.setDetail(detailsProvider.getDetails(object));\n+\t\tdocumentSymbol.setDeprecated(deprecationInfoProvider.isDeprecated(object));\n+\t\tdocumentSymbol.setChildren(new ArrayList<>());", "originalCommit": "04d232f1959f19e99f9e354326bff82732c452d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY5OTc5Mg==", "url": "https://github.com/eclipse/xtext-core/pull/1448#discussion_r410699792", "bodyText": "I think elements are added to it later on which will cause exceptions if it's the empty list", "author": "tivervac", "createdAt": "2020-04-18T13:38:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY1MzAwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcwMzA3OQ==", "url": "https://github.com/eclipse/xtext-core/pull/1448#discussion_r410703079", "bodyText": "i did not want to change the semantics here thus kept the list", "author": "cdietrich", "createdAt": "2020-04-18T14:14:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY1MzAwOQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "7f42c5148816f793c86a0994bf9644deb589c2ca", "url": "https://github.com/eclipse/xtext-core/commit/7f42c5148816f793c86a0994bf9644deb589c2ca", "message": "[eclipse/xtext#1679] converted code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-18T09:44:22Z", "type": "forcePushed"}, {"oid": "1324f2f7a0f1df18dff813ad1e6cb2cd0eea12b8", "url": "https://github.com/eclipse/xtext-core/commit/1324f2f7a0f1df18dff813ad1e6cb2cd0eea12b8", "message": "[eclipse/xtext#1679] converted code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-18T15:03:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjAzNjUyMw==", "url": "https://github.com/eclipse/xtext-core/pull/1448#discussion_r412036523", "bodyText": "safety.", "author": "tivervac", "createdAt": "2020-04-21T09:44:00Z", "path": "org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/util/DocumentHighlightComparatorTest.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.tests.util;\n+\n+import java.util.List;\n+\n+import org.eclipse.lsp4j.DocumentHighlight;\n+import org.eclipse.lsp4j.DocumentHighlightKind;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.xtext.ide.tests.testlanguage.TestLanguageIdeInjectorProvider;\n+import org.eclipse.xtext.ide.util.DocumentHighlightComparator;\n+import org.eclipse.xtext.testing.InjectWith;\n+import org.eclipse.xtext.testing.XtextRunner;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.google.common.collect.Lists;\n+import com.google.inject.Inject;\n+\n+/**\n+ * Test for the null-safe {@link DocumentHighlightComparator}.\n+ * \n+ * <p>\n+ * This test focuses on the {@link DocumentHighlightKind} and the null-safety", "originalCommit": "1324f2f7a0f1df18dff813ad1e6cb2cd0eea12b8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8fe502ea95e1d266803d20584ce9d52d1b99891a", "chunk": "diff --git a/org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/util/DocumentHighlightComparatorTest.java b/org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/util/DocumentHighlightComparatorTest.java\nindex 736ec1c1b..708ff5501 100644\n--- a/org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/util/DocumentHighlightComparatorTest.java\n+++ b/org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/util/DocumentHighlightComparatorTest.java\n\n@@ -30,8 +30,8 @@ import com.google.inject.Inject;\n  * Test for the null-safe {@link DocumentHighlightComparator}.\n  * \n  * <p>\n- * This test focuses on the {@link DocumentHighlightKind} and the null-safety\n- * other orderings are checked via the {@link RangeComparatorTest}.\n+ * This test focuses on the {@link DocumentHighlightKind} and the null-safety.\n+ * Other orderings are checked via the {@link RangeComparatorTest}.\n  * \n  * @author akos.kitta - Initial contribution and API\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjAzNjU4Ng==", "url": "https://github.com/eclipse/xtext-core/pull/1448#discussion_r412036586", "bodyText": "Other", "author": "tivervac", "createdAt": "2020-04-21T09:44:06Z", "path": "org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/util/DocumentHighlightComparatorTest.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.tests.util;\n+\n+import java.util.List;\n+\n+import org.eclipse.lsp4j.DocumentHighlight;\n+import org.eclipse.lsp4j.DocumentHighlightKind;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.xtext.ide.tests.testlanguage.TestLanguageIdeInjectorProvider;\n+import org.eclipse.xtext.ide.util.DocumentHighlightComparator;\n+import org.eclipse.xtext.testing.InjectWith;\n+import org.eclipse.xtext.testing.XtextRunner;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.google.common.collect.Lists;\n+import com.google.inject.Inject;\n+\n+/**\n+ * Test for the null-safe {@link DocumentHighlightComparator}.\n+ * \n+ * <p>\n+ * This test focuses on the {@link DocumentHighlightKind} and the null-safety\n+ * other orderings are checked via the {@link RangeComparatorTest}.", "originalCommit": "1324f2f7a0f1df18dff813ad1e6cb2cd0eea12b8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8fe502ea95e1d266803d20584ce9d52d1b99891a", "chunk": "diff --git a/org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/util/DocumentHighlightComparatorTest.java b/org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/util/DocumentHighlightComparatorTest.java\nindex 736ec1c1b..708ff5501 100644\n--- a/org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/util/DocumentHighlightComparatorTest.java\n+++ b/org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/util/DocumentHighlightComparatorTest.java\n\n@@ -30,8 +30,8 @@ import com.google.inject.Inject;\n  * Test for the null-safe {@link DocumentHighlightComparator}.\n  * \n  * <p>\n- * This test focuses on the {@link DocumentHighlightKind} and the null-safety\n- * other orderings are checked via the {@link RangeComparatorTest}.\n+ * This test focuses on the {@link DocumentHighlightKind} and the null-safety.\n+ * Other orderings are checked via the {@link RangeComparatorTest}.\n  * \n  * @author akos.kitta - Initial contribution and API\n  */\n"}}, {"oid": "8fe502ea95e1d266803d20584ce9d52d1b99891a", "url": "https://github.com/eclipse/xtext-core/commit/8fe502ea95e1d266803d20584ce9d52d1b99891a", "message": "[eclipse/xtext#1679] converted code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-21T10:19:18Z", "type": "commit"}, {"oid": "8fe502ea95e1d266803d20584ce9d52d1b99891a", "url": "https://github.com/eclipse/xtext-core/commit/8fe502ea95e1d266803d20584ce9d52d1b99891a", "message": "[eclipse/xtext#1679] converted code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-21T10:19:18Z", "type": "forcePushed"}]}