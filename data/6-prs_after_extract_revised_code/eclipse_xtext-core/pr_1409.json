{"pr_number": 1409, "pr_title": "[eclipse/xtext#1679]  converted more Xtend code to Java", "pr_createdAt": "2020-03-04T18:22:38Z", "pr_url": "https://github.com/eclipse/xtext-core/pull/1409", "timeline": [{"oid": "8c0f859aa03a4a8de6b8a67a1846aa20a8b5bf5f", "url": "https://github.com/eclipse/xtext-core/commit/8c0f859aa03a4a8de6b8a67a1846aa20a8b5bf5f", "message": "converted more Xtend code to Java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-03-04T18:30:02Z", "type": "forcePushed"}, {"oid": "bea2f1edfd7b59f3f82179875c84ecbc1d81a944", "url": "https://github.com/eclipse/xtext-core/commit/bea2f1edfd7b59f3f82179875c84ecbc1d81a944", "message": "[eclipse/xtext#1679] converted more Xtend code to Java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-03-04T18:47:30Z", "type": "forcePushed"}, {"oid": "8ffc12ef7b36e0d93a78965573aea218f0c1060d", "url": "https://github.com/eclipse/xtext-core/commit/8ffc12ef7b36e0d93a78965573aea218f0c1060d", "message": "[eclipse/xtext#1679] converted more Xtend code to Java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-03-04T18:49:25Z", "type": "forcePushed"}, {"oid": "afece5f70040dce53168aeb22617ce75d75a4674", "url": "https://github.com/eclipse/xtext-core/commit/afece5f70040dce53168aeb22617ce75d75a4674", "message": "[eclipse/xtext#1679] converted more Xtend code to Java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-03-04T18:51:22Z", "type": "forcePushed"}, {"oid": "d1bad0e5d09d5362c680ef2ad3d79cc2bf30425d", "url": "https://github.com/eclipse/xtext-core/commit/d1bad0e5d09d5362c680ef2ad3d79cc2bf30425d", "message": "[eclipse/xtext#1679] converted more Xtend code to Java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-03-04T18:54:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE1NDA2Mg==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388154062", "bodyText": "Not a big fan of these here.\nImmutableSet.of(..) may be the better choice.", "author": "szarnekow", "createdAt": "2020-03-05T08:57:24Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/bracketmatching/DefaultBracePairProvider.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.editor.bracketmatching;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import org.eclipse.xtext.xbase.lib.CollectionLiterals;", "originalCommit": "d1bad0e5d09d5362c680ef2ad3d79cc2bf30425d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE1NDk2Mg==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388154962", "bodyText": "Is there an implicit assumption that these are strings of the length 1?", "author": "szarnekow", "createdAt": "2020-03-05T08:59:06Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/bracketmatching/BracePair.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.editor.bracketmatching;\n+\n+import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;\n+\n+/**\n+ * Defines a single pair of braces which need to be matched when editing code.\n+ * \n+ * @author kosyakov - Initial contribution and API\n+ */\n+public class BracePair {\n+\t/**\n+\t * The length of a left brace should be one character for Eclipse.\n+\t */\n+\tprivate final String leftBrace;\n+\n+\t/**\n+\t * The length of a right brace should be one character for Eclipse.\n+\t */\n+\tprivate final String rightBrace;\n+\n+\t/**\n+\t * True if the brace is structural. Structural braces have higher priority than regular braces: they are matched\n+\t * with each other even if there are unmatched braces of other types between them, and an opening non-structural\n+\t * brace is not matched with a closing one if one of them is outside a pair of matched structural braces and another\n+\t * is outside. In Java code, the curly braces are structural.\n+\t * \n+\t * It is ignored by Eclipse.\n+\t */\n+\tprivate final boolean structural;\n+\n+\tpublic BracePair(String leftBrace, String rightBrace, boolean structural) {\n+\t\tthis.leftBrace = leftBrace;", "originalCommit": "d1bad0e5d09d5362c680ef2ad3d79cc2bf30425d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE3MTM4Ng==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388171386", "bodyText": "no idea. did not look into.", "author": "cdietrich", "createdAt": "2020-03-05T09:29:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE1NDk2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3NDE4MQ==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388274181", "bodyText": "You could do a Preconditions.checkArgument(leftBrace.length() == 1);. At least the javadoc of the fields assumes these are length 1.", "author": "tivervac", "createdAt": "2020-03-05T12:53:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE1NDk2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "c239316d1940ff718c1a17841bc9855bbf228a34", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/bracketmatching/BracePair.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/bracketmatching/BracePair.java\nindex 4caf54bf0..f729d1348 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/bracketmatching/BracePair.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/bracketmatching/BracePair.java\n\n@@ -10,6 +10,8 @@ package org.eclipse.xtext.ide.editor.bracketmatching;\n \n import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;\n \n+import com.google.common.base.Preconditions;\n+\n /**\n  * Defines a single pair of braces which need to be matched when editing code.\n  * \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE1OTE2NA==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388159164", "bodyText": "Stylistic: T extends Object is redundant.\nAlso: this should probably be Function<? super ILSA.Context, ? extends T>", "author": "szarnekow", "createdAt": "2020-03-05T09:07:30Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerAccess.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.server;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Function;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.lsp4j.InitializeParams;\n+import org.eclipse.lsp4j.InitializeResult;\n+import org.eclipse.lsp4j.services.LanguageClient;\n+import org.eclipse.xtext.ide.serializer.IChangeSerializer;\n+import org.eclipse.xtext.resource.IResourceDescription;\n+import org.eclipse.xtext.resource.IResourceDescriptions;\n+import org.eclipse.xtext.resource.impl.ResourceDescriptionsProvider;\n+import org.eclipse.xtext.util.CancelIndicator;\n+import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;\n+\n+/**\n+ * API for interacting with a running language server.\n+ * \n+ * @author Sven Efftinge - Initial contribution and API\n+ */\n+public interface ILanguageServerAccess {\n+\tclass Context {\n+\t\tprivate final Resource resource;\n+\n+\t\tprivate final Document document;\n+\n+\t\tprivate final boolean isDocumentOpen;\n+\n+\t\tprivate final CancelIndicator cancelChecker;\n+\n+\t\tpublic Context(Resource resource, Document document, boolean isDocumentOpen, CancelIndicator cancelChecker) {\n+\t\t\tthis.resource = resource;\n+\t\t\tthis.document = document;\n+\t\t\tthis.isDocumentOpen = isDocumentOpen;\n+\t\t\tthis.cancelChecker = cancelChecker;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String toString() {\n+\t\t\tToStringBuilder b = new ToStringBuilder(this);\n+\t\t\tb.add(\"resource\", resource);\n+\t\t\tb.add(\"document\", document);\n+\t\t\tb.add(\"isDocumentOpen\", isDocumentOpen);\n+\t\t\tb.add(\"cancelChecker\", cancelChecker);\n+\t\t\treturn b.toString();\n+\t\t}\n+\n+\t\tpublic Resource getResource() {\n+\t\t\treturn resource;\n+\t\t}\n+\n+\t\tpublic Document getDocument() {\n+\t\t\treturn document;\n+\t\t}\n+\n+\t\tpublic boolean isDocumentOpen() {\n+\t\t\treturn isDocumentOpen;\n+\t\t}\n+\n+\t\tpublic CancelIndicator getCancelChecker() {\n+\t\t\treturn cancelChecker;\n+\t\t}\n+\t}\n+\n+\tclass IndexContext {\n+\t\tprivate final IResourceDescriptions index;\n+\n+\t\tprivate final CancelIndicator cancelChecker;\n+\n+\t\tpublic IndexContext(IResourceDescriptions index, CancelIndicator cancelChecker) {\n+\t\t\tthis.index = index;\n+\t\t\tthis.cancelChecker = cancelChecker;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String toString() {\n+\t\t\tToStringBuilder b = new ToStringBuilder(this);\n+\t\t\tb.add(\"index\", index);\n+\t\t\tb.add(\"cancelChecker\", cancelChecker);\n+\t\t\treturn b.toString();\n+\t\t}\n+\n+\t\tpublic IResourceDescriptions getIndex() {\n+\t\t\treturn index;\n+\t\t}\n+\n+\t\tpublic CancelIndicator getCancelChecker() {\n+\t\t\treturn cancelChecker;\n+\t\t}\n+\t}\n+\n+\tinterface IBuildListener {\n+\t\tvoid afterBuild(List<IResourceDescription.Delta> deltas);\n+\t}\n+\n+\t/**\n+\t * provides read access to a fully resolved resource and Document.\n+\t */\n+\t<T extends Object> CompletableFuture<T> doRead(String uri, Function<ILanguageServerAccess.Context, T> function);", "originalCommit": "d1bad0e5d09d5362c680ef2ad3d79cc2bf30425d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE3MjE1Nw==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388172157", "bodyText": "will have a look", "author": "cdietrich", "createdAt": "2020-03-05T09:30:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE1OTE2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE3ODg0MQ==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388178841", "bodyText": "this would break clients like LanguageServerImpl", "author": "cdietrich", "createdAt": "2020-03-05T09:42:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE1OTE2NA=="}], "type": "inlineReview", "revised_code": {"commit": "131a1b6d4035768c006adba5c571d45538f722ae", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerAccess.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerAccess.java\nindex 33948362e..a800cde2a 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerAccess.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerAccess.java\n\n@@ -141,7 +141,7 @@ public interface ILanguageServerAccess {\n \t *         {@link ResourceDescriptionsProvider#LIVE_SCOPE} in order to reflect model changes immediately.\n \t * @since 2.18\n \t */\n-\tResourceSet newLiveScopeResourceSet(final URI uri);\n+\tResourceSet newLiveScopeResourceSet(URI uri);\n \n \t/**\n \t * @return the parameters as negotiated during client and server on initialization.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE1OTkyOQ==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388159929", "bodyText": "Not strictly related: There is no removeBuildListener.\nShould we add an empty default method + impl in our code?", "author": "szarnekow", "createdAt": "2020-03-05T09:09:02Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerAccess.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.server;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Function;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.lsp4j.InitializeParams;\n+import org.eclipse.lsp4j.InitializeResult;\n+import org.eclipse.lsp4j.services.LanguageClient;\n+import org.eclipse.xtext.ide.serializer.IChangeSerializer;\n+import org.eclipse.xtext.resource.IResourceDescription;\n+import org.eclipse.xtext.resource.IResourceDescriptions;\n+import org.eclipse.xtext.resource.impl.ResourceDescriptionsProvider;\n+import org.eclipse.xtext.util.CancelIndicator;\n+import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;\n+\n+/**\n+ * API for interacting with a running language server.\n+ * \n+ * @author Sven Efftinge - Initial contribution and API\n+ */\n+public interface ILanguageServerAccess {\n+\tclass Context {\n+\t\tprivate final Resource resource;\n+\n+\t\tprivate final Document document;\n+\n+\t\tprivate final boolean isDocumentOpen;\n+\n+\t\tprivate final CancelIndicator cancelChecker;\n+\n+\t\tpublic Context(Resource resource, Document document, boolean isDocumentOpen, CancelIndicator cancelChecker) {\n+\t\t\tthis.resource = resource;\n+\t\t\tthis.document = document;\n+\t\t\tthis.isDocumentOpen = isDocumentOpen;\n+\t\t\tthis.cancelChecker = cancelChecker;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String toString() {\n+\t\t\tToStringBuilder b = new ToStringBuilder(this);\n+\t\t\tb.add(\"resource\", resource);\n+\t\t\tb.add(\"document\", document);\n+\t\t\tb.add(\"isDocumentOpen\", isDocumentOpen);\n+\t\t\tb.add(\"cancelChecker\", cancelChecker);\n+\t\t\treturn b.toString();\n+\t\t}\n+\n+\t\tpublic Resource getResource() {\n+\t\t\treturn resource;\n+\t\t}\n+\n+\t\tpublic Document getDocument() {\n+\t\t\treturn document;\n+\t\t}\n+\n+\t\tpublic boolean isDocumentOpen() {\n+\t\t\treturn isDocumentOpen;\n+\t\t}\n+\n+\t\tpublic CancelIndicator getCancelChecker() {\n+\t\t\treturn cancelChecker;\n+\t\t}\n+\t}\n+\n+\tclass IndexContext {\n+\t\tprivate final IResourceDescriptions index;\n+\n+\t\tprivate final CancelIndicator cancelChecker;\n+\n+\t\tpublic IndexContext(IResourceDescriptions index, CancelIndicator cancelChecker) {\n+\t\t\tthis.index = index;\n+\t\t\tthis.cancelChecker = cancelChecker;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String toString() {\n+\t\t\tToStringBuilder b = new ToStringBuilder(this);\n+\t\t\tb.add(\"index\", index);\n+\t\t\tb.add(\"cancelChecker\", cancelChecker);\n+\t\t\treturn b.toString();\n+\t\t}\n+\n+\t\tpublic IResourceDescriptions getIndex() {\n+\t\t\treturn index;\n+\t\t}\n+\n+\t\tpublic CancelIndicator getCancelChecker() {\n+\t\t\treturn cancelChecker;\n+\t\t}\n+\t}\n+\n+\tinterface IBuildListener {\n+\t\tvoid afterBuild(List<IResourceDescription.Delta> deltas);\n+\t}\n+\n+\t/**\n+\t * provides read access to a fully resolved resource and Document.\n+\t */\n+\t<T extends Object> CompletableFuture<T> doRead(String uri, Function<ILanguageServerAccess.Context, T> function);\n+\n+\t/**\n+\t * Provides read access to the Xtext index.\n+\t * \n+\t * @since 2.18\n+\t */\n+\t<T extends Object> CompletableFuture<T> doReadIndex(\n+\t\t\tFunction<? super ILanguageServerAccess.IndexContext, ? extends T> function);\n+\n+\t/**\n+\t * registers a build listener on the this language server\n+\t */\n+\tvoid addBuildListener(ILanguageServerAccess.IBuildListener listener);", "originalCommit": "d1bad0e5d09d5362c680ef2ad3d79cc2bf30425d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE3NTk1OQ==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388175959", "bodyText": "we would but noone would call", "author": "cdietrich", "createdAt": "2020-03-05T09:37:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE1OTkyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwMTE0NA==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388201144", "bodyText": "I think that's because we don't have any meaningful execute commands in our code base.", "author": "szarnekow", "createdAt": "2020-03-05T10:22:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE1OTkyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3ODI5Mw==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388278293", "bodyText": "I would very much prefer this. I've had to remove calls like this before when working on LSP.\nPeople don't call the methods just because they're not there.", "author": "tivervac", "createdAt": "2020-03-05T13:01:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE1OTkyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "131a1b6d4035768c006adba5c571d45538f722ae", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerAccess.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerAccess.java\nindex 33948362e..a800cde2a 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerAccess.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerAccess.java\n\n@@ -141,7 +141,7 @@ public interface ILanguageServerAccess {\n \t *         {@link ResourceDescriptionsProvider#LIVE_SCOPE} in order to reflect model changes immediately.\n \t * @since 2.18\n \t */\n-\tResourceSet newLiveScopeResourceSet(final URI uri);\n+\tResourceSet newLiveScopeResourceSet(URI uri);\n \n \t/**\n \t * @return the parameters as negotiated during client and server on initialization.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE2MDI2OQ==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388160269", "bodyText": "Unnecessary final", "author": "szarnekow", "createdAt": "2020-03-05T09:09:41Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerAccess.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.server;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Function;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.lsp4j.InitializeParams;\n+import org.eclipse.lsp4j.InitializeResult;\n+import org.eclipse.lsp4j.services.LanguageClient;\n+import org.eclipse.xtext.ide.serializer.IChangeSerializer;\n+import org.eclipse.xtext.resource.IResourceDescription;\n+import org.eclipse.xtext.resource.IResourceDescriptions;\n+import org.eclipse.xtext.resource.impl.ResourceDescriptionsProvider;\n+import org.eclipse.xtext.util.CancelIndicator;\n+import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;\n+\n+/**\n+ * API for interacting with a running language server.\n+ * \n+ * @author Sven Efftinge - Initial contribution and API\n+ */\n+public interface ILanguageServerAccess {\n+\tclass Context {\n+\t\tprivate final Resource resource;\n+\n+\t\tprivate final Document document;\n+\n+\t\tprivate final boolean isDocumentOpen;\n+\n+\t\tprivate final CancelIndicator cancelChecker;\n+\n+\t\tpublic Context(Resource resource, Document document, boolean isDocumentOpen, CancelIndicator cancelChecker) {\n+\t\t\tthis.resource = resource;\n+\t\t\tthis.document = document;\n+\t\t\tthis.isDocumentOpen = isDocumentOpen;\n+\t\t\tthis.cancelChecker = cancelChecker;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String toString() {\n+\t\t\tToStringBuilder b = new ToStringBuilder(this);\n+\t\t\tb.add(\"resource\", resource);\n+\t\t\tb.add(\"document\", document);\n+\t\t\tb.add(\"isDocumentOpen\", isDocumentOpen);\n+\t\t\tb.add(\"cancelChecker\", cancelChecker);\n+\t\t\treturn b.toString();\n+\t\t}\n+\n+\t\tpublic Resource getResource() {\n+\t\t\treturn resource;\n+\t\t}\n+\n+\t\tpublic Document getDocument() {\n+\t\t\treturn document;\n+\t\t}\n+\n+\t\tpublic boolean isDocumentOpen() {\n+\t\t\treturn isDocumentOpen;\n+\t\t}\n+\n+\t\tpublic CancelIndicator getCancelChecker() {\n+\t\t\treturn cancelChecker;\n+\t\t}\n+\t}\n+\n+\tclass IndexContext {\n+\t\tprivate final IResourceDescriptions index;\n+\n+\t\tprivate final CancelIndicator cancelChecker;\n+\n+\t\tpublic IndexContext(IResourceDescriptions index, CancelIndicator cancelChecker) {\n+\t\t\tthis.index = index;\n+\t\t\tthis.cancelChecker = cancelChecker;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String toString() {\n+\t\t\tToStringBuilder b = new ToStringBuilder(this);\n+\t\t\tb.add(\"index\", index);\n+\t\t\tb.add(\"cancelChecker\", cancelChecker);\n+\t\t\treturn b.toString();\n+\t\t}\n+\n+\t\tpublic IResourceDescriptions getIndex() {\n+\t\t\treturn index;\n+\t\t}\n+\n+\t\tpublic CancelIndicator getCancelChecker() {\n+\t\t\treturn cancelChecker;\n+\t\t}\n+\t}\n+\n+\tinterface IBuildListener {\n+\t\tvoid afterBuild(List<IResourceDescription.Delta> deltas);\n+\t}\n+\n+\t/**\n+\t * provides read access to a fully resolved resource and Document.\n+\t */\n+\t<T extends Object> CompletableFuture<T> doRead(String uri, Function<ILanguageServerAccess.Context, T> function);\n+\n+\t/**\n+\t * Provides read access to the Xtext index.\n+\t * \n+\t * @since 2.18\n+\t */\n+\t<T extends Object> CompletableFuture<T> doReadIndex(\n+\t\t\tFunction<? super ILanguageServerAccess.IndexContext, ? extends T> function);\n+\n+\t/**\n+\t * registers a build listener on the this language server\n+\t */\n+\tvoid addBuildListener(ILanguageServerAccess.IBuildListener listener);\n+\n+\t/**\n+\t * @return the language client facade. It usually also implements Endpoint, which can be used to call non-standard\n+\t *         extensions to the LSP.\n+\t */\n+\tLanguageClient getLanguageClient();\n+\n+\t/**\n+\t * Creates a new {@link ResourceSet} to be used with the {@link IChangeSerializer} API.\n+\t * \n+\t * The {@link IChangeSerializer} allows to calculate text edits from model changes. In order not to mess up the\n+\t * originals, the resp. models should be loaded into a new resource set which this method provides.\n+\t * \n+\t * @param uri\n+\t *            a file URI used to detect the project to configure the scope of the resource set.\n+\t * @return a new empty resource set, configured with the project the <code>uri</code> belongs to and the\n+\t *         {@link ResourceDescriptionsProvider#LIVE_SCOPE} in order to reflect model changes immediately.\n+\t * @since 2.18\n+\t */\n+\tResourceSet newLiveScopeResourceSet(final URI uri);", "originalCommit": "d1bad0e5d09d5362c680ef2ad3d79cc2bf30425d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "131a1b6d4035768c006adba5c571d45538f722ae", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerAccess.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerAccess.java\nindex 33948362e..a800cde2a 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerAccess.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerAccess.java\n\n@@ -141,7 +141,7 @@ public interface ILanguageServerAccess {\n \t *         {@link ResourceDescriptionsProvider#LIVE_SCOPE} in order to reflect model changes immediately.\n \t * @since 2.18\n \t */\n-\tResourceSet newLiveScopeResourceSet(final URI uri);\n+\tResourceSet newLiveScopeResourceSet(URI uri);\n \n \t/**\n \t * @return the parameters as negotiated during client and server on initialization.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE2MDU1MA==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388160550", "bodyText": "Unnecessary @Accessors", "author": "szarnekow", "createdAt": "2020-03-05T09:10:17Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/codeActions/ICodeActionService2.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.server.codeActions;\n+\n+import java.util.List;\n+\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Command;\n+import org.eclipse.lsp4j.jsonrpc.messages.Either;\n+import org.eclipse.xtend.lib.annotations.Accessors;\n+import org.eclipse.xtext.ide.server.Document;\n+import org.eclipse.xtext.ide.server.ILanguageServerAccess;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.util.CancelIndicator;\n+\n+/**\n+ * @author Jan Koehnlein\n+ * @since 2.18\n+ */\n+public interface ICodeActionService2 {\n+\t@Accessors", "originalCommit": "d1bad0e5d09d5362c680ef2ad3d79cc2bf30425d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "131a1b6d4035768c006adba5c571d45538f722ae", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/codeActions/ICodeActionService2.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/codeActions/ICodeActionService2.java\nindex cc62fda48..1df7dfbc2 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/codeActions/ICodeActionService2.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/codeActions/ICodeActionService2.java\n\n@@ -14,7 +14,6 @@ import org.eclipse.lsp4j.CodeAction;\n import org.eclipse.lsp4j.CodeActionParams;\n import org.eclipse.lsp4j.Command;\n import org.eclipse.lsp4j.jsonrpc.messages.Either;\n-import org.eclipse.xtend.lib.annotations.Accessors;\n import org.eclipse.xtext.ide.server.Document;\n import org.eclipse.xtext.ide.server.ILanguageServerAccess;\n import org.eclipse.xtext.resource.XtextResource;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE2MTA1NA==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388161054", "bodyText": "A generated toString may be handy for debugging", "author": "szarnekow", "createdAt": "2020-03-05T09:11:13Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/hover/HoverContext.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.server.hover;\n+\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.xtext.ide.server.Document;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.util.ITextRegion;\n+\n+public class HoverContext {", "originalCommit": "d1bad0e5d09d5362c680ef2ad3d79cc2bf30425d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE4NzgyNg==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388187826", "bodyText": "am not sure if toString on the resource and element would be good", "author": "cdietrich", "createdAt": "2020-03-05T09:58:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE2MTA1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwMDY4Ng==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388200686", "bodyText": "Maybe resource.getURI is already helpful?", "author": "szarnekow", "createdAt": "2020-03-05T10:21:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE2MTA1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIyNzU1NA==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388227554", "bodyText": "done", "author": "cdietrich", "createdAt": "2020-03-05T11:12:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE2MTA1NA=="}], "type": "inlineReview", "revised_code": {"commit": "1981f57b1e52a5d88bb3c01bea39ecddb5a88500", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/hover/HoverContext.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/hover/HoverContext.java\nindex ebdcaef38..6150ad28d 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/hover/HoverContext.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/hover/HoverContext.java\n\n@@ -9,9 +9,11 @@\n package org.eclipse.xtext.ide.server.hover;\n \n import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.util.EcoreUtil;\n import org.eclipse.xtext.ide.server.Document;\n import org.eclipse.xtext.resource.XtextResource;\n import org.eclipse.xtext.util.ITextRegion;\n+import org.eclipse.xtext.util.Strings;\n \n public class HoverContext {\n \tprivate final Document document;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE2MTQ4OQ==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388161489", "bodyText": "volatile?", "author": "szarnekow", "createdAt": "2020-03-05T09:12:01Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/util/CancelIndicatorProgressMonitor.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.util;\n+\n+import org.eclipse.core.runtime.IProgressMonitor;\n+import org.eclipse.xtext.util.CancelIndicator;\n+\n+/**\n+ * @author kosyakov - Initial contribution and API\n+ * @since 2.11\n+ */\n+public class CancelIndicatorProgressMonitor implements IProgressMonitor {\n+\tprivate final CancelIndicator delegate;\n+\n+\tprivate boolean canceled;", "originalCommit": "d1bad0e5d09d5362c680ef2ad3d79cc2bf30425d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE3NzA3Nw==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388177077", "bodyText": "to make sure works multithreaded?", "author": "cdietrich", "createdAt": "2020-03-05T09:39:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE2MTQ4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE4MDk0NA==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388180944", "bodyText": "Yes. I'd assume that the canceled flag will be set by a thread different from the current worker thread. Otherwise the worker would just bail out.", "author": "szarnekow", "createdAt": "2020-03-05T09:46:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE2MTQ4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "70d18fd744a5e12545c718773a0ccc7cc61725c1", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/util/CancelIndicatorProgressMonitor.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/util/CancelIndicatorProgressMonitor.java\nindex ae46ddc47..b623fbe6c 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/util/CancelIndicatorProgressMonitor.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/util/CancelIndicatorProgressMonitor.java\n\n@@ -18,7 +18,7 @@ import org.eclipse.xtext.util.CancelIndicator;\n public class CancelIndicatorProgressMonitor implements IProgressMonitor {\n \tprivate final CancelIndicator delegate;\n \n-\tprivate boolean canceled;\n+\tprivate volatile boolean canceled;\n \n \t@Override\n \tpublic boolean isCanceled() {\n"}}, {"oid": "131a1b6d4035768c006adba5c571d45538f722ae", "url": "https://github.com/eclipse/xtext-core/commit/131a1b6d4035768c006adba5c571d45538f722ae", "message": "[eclipse/xtext#1679] converted more Xtend code to Java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-03-05T09:44:22Z", "type": "forcePushed"}, {"oid": "70d18fd744a5e12545c718773a0ccc7cc61725c1", "url": "https://github.com/eclipse/xtext-core/commit/70d18fd744a5e12545c718773a0ccc7cc61725c1", "message": "[eclipse/xtext#1679] converted more Xtend code to Java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-03-05T09:55:55Z", "type": "forcePushed"}, {"oid": "1981f57b1e52a5d88bb3c01bea39ecddb5a88500", "url": "https://github.com/eclipse/xtext-core/commit/1981f57b1e52a5d88bb3c01bea39ecddb5a88500", "message": "[eclipse/xtext#1679] converted more Xtend code to Java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-03-05T11:11:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3MjQwNA==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388272404", "bodyText": "Definitely not a fan of these names starting with a _", "author": "tivervac", "createdAt": "2020-03-05T12:49:48Z", "path": "org.eclipse.xtext.ide.tests/xtend-gen/org/eclipse/xtext/ide/tests/testlanguage/ide/TestLangLSPExtension.java", "diffHunk": "@@ -82,10 +83,12 @@ public String toString() {\n     @Override\n     public CompletableFuture<TestLangLSPExtension.TextOfLineResult> getTextOfLine(final TestLangLSPExtension.TextOfLineParam param) {\n       final Function<ILanguageServerAccess.Context, TestLangLSPExtension.TextOfLineResult> _function = (ILanguageServerAccess.Context ctx) -> {\n+        Document _document = ctx.getDocument();", "originalCommit": "1981f57b1e52a5d88bb3c01bea39ecddb5a88500", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMyMDUwNg==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388320506", "bodyText": "generator ....", "author": "cdietrich", "createdAt": "2020-03-05T14:17:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3MjQwNA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3MzIxMQ==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388273211", "bodyText": "\", and an\" -> \". An\"", "author": "tivervac", "createdAt": "2020-03-05T12:51:30Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/bracketmatching/BracePair.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.editor.bracketmatching;\n+\n+import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;\n+\n+/**\n+ * Defines a single pair of braces which need to be matched when editing code.\n+ * \n+ * @author kosyakov - Initial contribution and API\n+ */\n+public class BracePair {\n+\t/**\n+\t * The length of a left brace should be one character for Eclipse.\n+\t */\n+\tprivate final String leftBrace;\n+\n+\t/**\n+\t * The length of a right brace should be one character for Eclipse.\n+\t */\n+\tprivate final String rightBrace;\n+\n+\t/**\n+\t * True if the brace is structural. Structural braces have higher priority than regular braces: they are matched\n+\t * with each other even if there are unmatched braces of other types between them, and an opening non-structural", "originalCommit": "1981f57b1e52a5d88bb3c01bea39ecddb5a88500", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM0NTY0OA==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388345648", "bodyText": "ahh missed this one", "author": "cdietrich", "createdAt": "2020-03-05T14:56:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3MzIxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM0NTgxMA==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388345810", "bodyText": "@cdietrich This one for example", "author": "tivervac", "createdAt": "2020-03-05T14:56:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3MzIxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "c239316d1940ff718c1a17841bc9855bbf228a34", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/bracketmatching/BracePair.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/bracketmatching/BracePair.java\nindex 4caf54bf0..f729d1348 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/bracketmatching/BracePair.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/bracketmatching/BracePair.java\n\n@@ -10,6 +10,8 @@ package org.eclipse.xtext.ide.editor.bracketmatching;\n \n import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;\n \n+import com.google.common.base.Preconditions;\n+\n /**\n  * Defines a single pair of braces which need to be matched when editing code.\n  * \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3MzQ1Mw==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388273453", "bodyText": "s/outside/inside/", "author": "tivervac", "createdAt": "2020-03-05T12:52:01Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/bracketmatching/BracePair.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.editor.bracketmatching;\n+\n+import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;\n+\n+/**\n+ * Defines a single pair of braces which need to be matched when editing code.\n+ * \n+ * @author kosyakov - Initial contribution and API\n+ */\n+public class BracePair {\n+\t/**\n+\t * The length of a left brace should be one character for Eclipse.\n+\t */\n+\tprivate final String leftBrace;\n+\n+\t/**\n+\t * The length of a right brace should be one character for Eclipse.\n+\t */\n+\tprivate final String rightBrace;\n+\n+\t/**\n+\t * True if the brace is structural. Structural braces have higher priority than regular braces: they are matched\n+\t * with each other even if there are unmatched braces of other types between them, and an opening non-structural\n+\t * brace is not matched with a closing one if one of them is outside a pair of matched structural braces and another", "originalCommit": "1981f57b1e52a5d88bb3c01bea39ecddb5a88500", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM0NTk2NA==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388345964", "bodyText": "@cdietrich This one for example", "author": "tivervac", "createdAt": "2020-03-05T14:56:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3MzQ1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "c239316d1940ff718c1a17841bc9855bbf228a34", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/bracketmatching/BracePair.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/bracketmatching/BracePair.java\nindex 4caf54bf0..f729d1348 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/bracketmatching/BracePair.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/bracketmatching/BracePair.java\n\n@@ -10,6 +10,8 @@ package org.eclipse.xtext.ide.editor.bracketmatching;\n \n import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;\n \n+import com.google.common.base.Preconditions;\n+\n /**\n  * Defines a single pair of braces which need to be matched when editing code.\n  * \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3NDY0Mw==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388274643", "bodyText": "I'd prefer return prime * result + (structural ? 1231 : 1237);", "author": "tivervac", "createdAt": "2020-03-05T12:54:29Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/bracketmatching/BracePair.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.editor.bracketmatching;\n+\n+import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;\n+\n+/**\n+ * Defines a single pair of braces which need to be matched when editing code.\n+ * \n+ * @author kosyakov - Initial contribution and API\n+ */\n+public class BracePair {\n+\t/**\n+\t * The length of a left brace should be one character for Eclipse.\n+\t */\n+\tprivate final String leftBrace;\n+\n+\t/**\n+\t * The length of a right brace should be one character for Eclipse.\n+\t */\n+\tprivate final String rightBrace;\n+\n+\t/**\n+\t * True if the brace is structural. Structural braces have higher priority than regular braces: they are matched\n+\t * with each other even if there are unmatched braces of other types between them, and an opening non-structural\n+\t * brace is not matched with a closing one if one of them is outside a pair of matched structural braces and another\n+\t * is outside. In Java code, the curly braces are structural.\n+\t * \n+\t * It is ignored by Eclipse.\n+\t */\n+\tprivate final boolean structural;\n+\n+\tpublic BracePair(String leftBrace, String rightBrace, boolean structural) {\n+\t\tthis.leftBrace = leftBrace;\n+\t\tthis.rightBrace = rightBrace;\n+\t\tthis.structural = structural;\n+\t}\n+\n+\t@Override\n+\tpublic int hashCode() {\n+\t\tfinal int prime = 31;\n+\t\tint result = 1;\n+\t\tresult = prime * result + ((leftBrace == null) ? 0 : leftBrace.hashCode());\n+\t\tresult = prime * result + ((rightBrace == null) ? 0 : rightBrace.hashCode());\n+\t\tresult = prime * result + (structural ? 1231 : 1237);", "originalCommit": "1981f57b1e52a5d88bb3c01bea39ecddb5a88500", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c239316d1940ff718c1a17841bc9855bbf228a34", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/bracketmatching/BracePair.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/bracketmatching/BracePair.java\nindex 4caf54bf0..f729d1348 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/bracketmatching/BracePair.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/bracketmatching/BracePair.java\n\n@@ -10,6 +10,8 @@ package org.eclipse.xtext.ide.editor.bracketmatching;\n \n import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;\n \n+import com.google.common.base.Preconditions;\n+\n /**\n  * Defines a single pair of braces which need to be matched when editing code.\n  * \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3NTc0MQ==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388275741", "bodyText": "As Sebastian said earlier, ImmutableSet.of(..) might be better here", "author": "tivervac", "createdAt": "2020-03-05T12:56:34Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/bracketmatching/XtextBracePairProvider.java", "diffHunk": "@@ -18,10 +18,9 @@\n  * @author kosyakov - Initial contribution and API\n  */\n @Singleton\n-@SuppressWarnings(\"all\")\n public class XtextBracePairProvider extends DefaultBracePairProvider {\n-  public XtextBracePairProvider() {\n-    super(\n-      Collections.<BracePair>unmodifiableSet(CollectionLiterals.<BracePair>newHashSet(new BracePair(\":\", \";\", true), new BracePair(\"(\", \")\", false), new BracePair(\"{\", \"}\", true), new BracePair(\"[\", \"]\", false))));\n-  }\n+\tpublic XtextBracePairProvider() {\n+\t\tsuper(Collections.unmodifiableSet(CollectionLiterals.newHashSet(new BracePair(\":\", \";\", true),", "originalCommit": "1981f57b1e52a5d88bb3c01bea39ecddb5a88500", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM0NjIwNA==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388346204", "bodyText": "@cdietrich This one for example", "author": "tivervac", "createdAt": "2020-03-05T14:56:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3NTc0MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3Njg3Ng==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388276876", "bodyText": "\"as well as another navigatable element.\"\nI would remove this, the sentence sounds like this atm: \"Typical choices are A, B or C as well as anything else\"", "author": "tivervac", "createdAt": "2020-03-05T12:58:50Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/navigation/INavigatable.java", "diffHunk": "@@ -1,31 +1,32 @@\n-/*******************************************************************************\n- * Copyright (c) 2016 TypeFox GmbH (http://www.typefox.io) and others.\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n  * This program and the accompanying materials are made available under the\n  * terms of the Eclipse Public License 2.0 which is available at\n  * http://www.eclipse.org/legal/epl-2.0.\n- *\n+ * \n  * SPDX-License-Identifier: EPL-2.0\n- *******************************************************************************/\n-package org.eclipse.xtext.ide.editor.navigation\n+ */\n+package org.eclipse.xtext.ide.editor.navigation;\n \n /**\n  * Represents an instance that can be opened in an editor.\n  * \n  * @author kosyakov - Initial contribution and API\n  * @since 2.10\n  */\n-interface INavigatable {\n-\n+public interface INavigatable {\n \t/**\n \t * <p>\n-\t * Returns an instance containing enough information to identify an editor that should be opened and a region that should be revealed.\n+\t * Returns an instance containing enough information to identify an editor that should be opened and a region that\n+\t * should be revealed.\n \t * </p>\n \t * <p>\n-\t * Typical navigation elements are resource, object and reference descriptions as well as another navigatable element.\n+\t * Typical navigation elements are resource, object and reference descriptions as well as another navigatable", "originalCommit": "1981f57b1e52a5d88bb3c01bea39ecddb5a88500", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM0NjI3OA==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388346278", "bodyText": "@cdietrich This one for example", "author": "tivervac", "createdAt": "2020-03-05T14:56:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3Njg3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "5fabe640238c8482311bbdbf30c9c346e91539c7", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/navigation/INavigatable.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/navigation/INavigatable.java\nindex 53c1cb02f..46a04f821 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/navigation/INavigatable.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/navigation/INavigatable.java\n\n@@ -21,8 +21,7 @@ public interface INavigatable {\n \t * should be revealed.\n \t * </p>\n \t * <p>\n-\t * Typical navigation elements are resource, object and reference descriptions as well as another navigatable\n-\t * element.\n+\t * Typical navigation elements are resource, object and reference descriptions.\n \t * </p>\n \t * <p>\n \t * Avoid usage of resource sets, resources and eobjects as navigation elements, since it can lead to memory leaks.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3NzM5MA==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388277390", "bodyText": "s/provides/Provides/\ns/Document/document/", "author": "tivervac", "createdAt": "2020-03-05T13:00:00Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerAccess.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.server;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Function;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.lsp4j.InitializeParams;\n+import org.eclipse.lsp4j.InitializeResult;\n+import org.eclipse.lsp4j.services.LanguageClient;\n+import org.eclipse.xtext.ide.serializer.IChangeSerializer;\n+import org.eclipse.xtext.resource.IResourceDescription;\n+import org.eclipse.xtext.resource.IResourceDescriptions;\n+import org.eclipse.xtext.resource.impl.ResourceDescriptionsProvider;\n+import org.eclipse.xtext.util.CancelIndicator;\n+import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;\n+\n+/**\n+ * API for interacting with a running language server.\n+ * \n+ * @author Sven Efftinge - Initial contribution and API\n+ */\n+public interface ILanguageServerAccess {\n+\tclass Context {\n+\t\tprivate final Resource resource;\n+\n+\t\tprivate final Document document;\n+\n+\t\tprivate final boolean isDocumentOpen;\n+\n+\t\tprivate final CancelIndicator cancelChecker;\n+\n+\t\tpublic Context(Resource resource, Document document, boolean isDocumentOpen, CancelIndicator cancelChecker) {\n+\t\t\tthis.resource = resource;\n+\t\t\tthis.document = document;\n+\t\t\tthis.isDocumentOpen = isDocumentOpen;\n+\t\t\tthis.cancelChecker = cancelChecker;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String toString() {\n+\t\t\tToStringBuilder b = new ToStringBuilder(this);\n+\t\t\tb.add(\"resource\", resource);\n+\t\t\tb.add(\"document\", document);\n+\t\t\tb.add(\"isDocumentOpen\", isDocumentOpen);\n+\t\t\tb.add(\"cancelChecker\", cancelChecker);\n+\t\t\treturn b.toString();\n+\t\t}\n+\n+\t\tpublic Resource getResource() {\n+\t\t\treturn resource;\n+\t\t}\n+\n+\t\tpublic Document getDocument() {\n+\t\t\treturn document;\n+\t\t}\n+\n+\t\tpublic boolean isDocumentOpen() {\n+\t\t\treturn isDocumentOpen;\n+\t\t}\n+\n+\t\tpublic CancelIndicator getCancelChecker() {\n+\t\t\treturn cancelChecker;\n+\t\t}\n+\t}\n+\n+\tclass IndexContext {\n+\t\tprivate final IResourceDescriptions index;\n+\n+\t\tprivate final CancelIndicator cancelChecker;\n+\n+\t\tpublic IndexContext(IResourceDescriptions index, CancelIndicator cancelChecker) {\n+\t\t\tthis.index = index;\n+\t\t\tthis.cancelChecker = cancelChecker;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String toString() {\n+\t\t\tToStringBuilder b = new ToStringBuilder(this);\n+\t\t\tb.add(\"index\", index);\n+\t\t\tb.add(\"cancelChecker\", cancelChecker);\n+\t\t\treturn b.toString();\n+\t\t}\n+\n+\t\tpublic IResourceDescriptions getIndex() {\n+\t\t\treturn index;\n+\t\t}\n+\n+\t\tpublic CancelIndicator getCancelChecker() {\n+\t\t\treturn cancelChecker;\n+\t\t}\n+\t}\n+\n+\tinterface IBuildListener {\n+\t\tvoid afterBuild(List<IResourceDescription.Delta> deltas);\n+\t}\n+\n+\t/**\n+\t * provides read access to a fully resolved resource and Document.", "originalCommit": "1981f57b1e52a5d88bb3c01bea39ecddb5a88500", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM0NjM2NA==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388346364", "bodyText": "@cdietrich This one for example", "author": "tivervac", "createdAt": "2020-03-05T14:57:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3NzM5MA=="}], "type": "inlineReview", "revised_code": {"commit": "5fabe640238c8482311bbdbf30c9c346e91539c7", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerAccess.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerAccess.java\nindex a800cde2a..b7278dcca 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerAccess.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerAccess.java\n\n@@ -17,6 +17,7 @@ import org.eclipse.emf.ecore.resource.Resource;\n import org.eclipse.emf.ecore.resource.ResourceSet;\n import org.eclipse.lsp4j.InitializeParams;\n import org.eclipse.lsp4j.InitializeResult;\n+import org.eclipse.lsp4j.jsonrpc.Endpoint;\n import org.eclipse.lsp4j.services.LanguageClient;\n import org.eclipse.xtext.ide.serializer.IChangeSerializer;\n import org.eclipse.xtext.resource.IResourceDescription;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3Nzg4NQ==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388277885", "bodyText": "s/registers/Registers/\ns/the this/this/", "author": "tivervac", "createdAt": "2020-03-05T13:01:03Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerAccess.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.server;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Function;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.lsp4j.InitializeParams;\n+import org.eclipse.lsp4j.InitializeResult;\n+import org.eclipse.lsp4j.services.LanguageClient;\n+import org.eclipse.xtext.ide.serializer.IChangeSerializer;\n+import org.eclipse.xtext.resource.IResourceDescription;\n+import org.eclipse.xtext.resource.IResourceDescriptions;\n+import org.eclipse.xtext.resource.impl.ResourceDescriptionsProvider;\n+import org.eclipse.xtext.util.CancelIndicator;\n+import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;\n+\n+/**\n+ * API for interacting with a running language server.\n+ * \n+ * @author Sven Efftinge - Initial contribution and API\n+ */\n+public interface ILanguageServerAccess {\n+\tclass Context {\n+\t\tprivate final Resource resource;\n+\n+\t\tprivate final Document document;\n+\n+\t\tprivate final boolean isDocumentOpen;\n+\n+\t\tprivate final CancelIndicator cancelChecker;\n+\n+\t\tpublic Context(Resource resource, Document document, boolean isDocumentOpen, CancelIndicator cancelChecker) {\n+\t\t\tthis.resource = resource;\n+\t\t\tthis.document = document;\n+\t\t\tthis.isDocumentOpen = isDocumentOpen;\n+\t\t\tthis.cancelChecker = cancelChecker;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String toString() {\n+\t\t\tToStringBuilder b = new ToStringBuilder(this);\n+\t\t\tb.add(\"resource\", resource);\n+\t\t\tb.add(\"document\", document);\n+\t\t\tb.add(\"isDocumentOpen\", isDocumentOpen);\n+\t\t\tb.add(\"cancelChecker\", cancelChecker);\n+\t\t\treturn b.toString();\n+\t\t}\n+\n+\t\tpublic Resource getResource() {\n+\t\t\treturn resource;\n+\t\t}\n+\n+\t\tpublic Document getDocument() {\n+\t\t\treturn document;\n+\t\t}\n+\n+\t\tpublic boolean isDocumentOpen() {\n+\t\t\treturn isDocumentOpen;\n+\t\t}\n+\n+\t\tpublic CancelIndicator getCancelChecker() {\n+\t\t\treturn cancelChecker;\n+\t\t}\n+\t}\n+\n+\tclass IndexContext {\n+\t\tprivate final IResourceDescriptions index;\n+\n+\t\tprivate final CancelIndicator cancelChecker;\n+\n+\t\tpublic IndexContext(IResourceDescriptions index, CancelIndicator cancelChecker) {\n+\t\t\tthis.index = index;\n+\t\t\tthis.cancelChecker = cancelChecker;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String toString() {\n+\t\t\tToStringBuilder b = new ToStringBuilder(this);\n+\t\t\tb.add(\"index\", index);\n+\t\t\tb.add(\"cancelChecker\", cancelChecker);\n+\t\t\treturn b.toString();\n+\t\t}\n+\n+\t\tpublic IResourceDescriptions getIndex() {\n+\t\t\treturn index;\n+\t\t}\n+\n+\t\tpublic CancelIndicator getCancelChecker() {\n+\t\t\treturn cancelChecker;\n+\t\t}\n+\t}\n+\n+\tinterface IBuildListener {\n+\t\tvoid afterBuild(List<IResourceDescription.Delta> deltas);\n+\t}\n+\n+\t/**\n+\t * provides read access to a fully resolved resource and Document.\n+\t */\n+\t<T extends Object> CompletableFuture<T> doRead(String uri, Function<ILanguageServerAccess.Context, T> function);\n+\n+\t/**\n+\t * Provides read access to the Xtext index.\n+\t * \n+\t * @since 2.18\n+\t */\n+\t<T extends Object> CompletableFuture<T> doReadIndex(\n+\t\t\tFunction<? super ILanguageServerAccess.IndexContext, ? extends T> function);\n+\n+\t/**\n+\t * registers a build listener on the this language server", "originalCommit": "1981f57b1e52a5d88bb3c01bea39ecddb5a88500", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5fabe640238c8482311bbdbf30c9c346e91539c7", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerAccess.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerAccess.java\nindex a800cde2a..b7278dcca 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerAccess.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerAccess.java\n\n@@ -17,6 +17,7 @@ import org.eclipse.emf.ecore.resource.Resource;\n import org.eclipse.emf.ecore.resource.ResourceSet;\n import org.eclipse.lsp4j.InitializeParams;\n import org.eclipse.lsp4j.InitializeResult;\n+import org.eclipse.lsp4j.jsonrpc.Endpoint;\n import org.eclipse.lsp4j.services.LanguageClient;\n import org.eclipse.xtext.ide.serializer.IChangeSerializer;\n import org.eclipse.xtext.resource.IResourceDescription;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3ODU3Nw==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388278577", "bodyText": "{@link Endpoint}?", "author": "tivervac", "createdAt": "2020-03-05T13:02:30Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerAccess.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.server;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Function;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.lsp4j.InitializeParams;\n+import org.eclipse.lsp4j.InitializeResult;\n+import org.eclipse.lsp4j.services.LanguageClient;\n+import org.eclipse.xtext.ide.serializer.IChangeSerializer;\n+import org.eclipse.xtext.resource.IResourceDescription;\n+import org.eclipse.xtext.resource.IResourceDescriptions;\n+import org.eclipse.xtext.resource.impl.ResourceDescriptionsProvider;\n+import org.eclipse.xtext.util.CancelIndicator;\n+import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;\n+\n+/**\n+ * API for interacting with a running language server.\n+ * \n+ * @author Sven Efftinge - Initial contribution and API\n+ */\n+public interface ILanguageServerAccess {\n+\tclass Context {\n+\t\tprivate final Resource resource;\n+\n+\t\tprivate final Document document;\n+\n+\t\tprivate final boolean isDocumentOpen;\n+\n+\t\tprivate final CancelIndicator cancelChecker;\n+\n+\t\tpublic Context(Resource resource, Document document, boolean isDocumentOpen, CancelIndicator cancelChecker) {\n+\t\t\tthis.resource = resource;\n+\t\t\tthis.document = document;\n+\t\t\tthis.isDocumentOpen = isDocumentOpen;\n+\t\t\tthis.cancelChecker = cancelChecker;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String toString() {\n+\t\t\tToStringBuilder b = new ToStringBuilder(this);\n+\t\t\tb.add(\"resource\", resource);\n+\t\t\tb.add(\"document\", document);\n+\t\t\tb.add(\"isDocumentOpen\", isDocumentOpen);\n+\t\t\tb.add(\"cancelChecker\", cancelChecker);\n+\t\t\treturn b.toString();\n+\t\t}\n+\n+\t\tpublic Resource getResource() {\n+\t\t\treturn resource;\n+\t\t}\n+\n+\t\tpublic Document getDocument() {\n+\t\t\treturn document;\n+\t\t}\n+\n+\t\tpublic boolean isDocumentOpen() {\n+\t\t\treturn isDocumentOpen;\n+\t\t}\n+\n+\t\tpublic CancelIndicator getCancelChecker() {\n+\t\t\treturn cancelChecker;\n+\t\t}\n+\t}\n+\n+\tclass IndexContext {\n+\t\tprivate final IResourceDescriptions index;\n+\n+\t\tprivate final CancelIndicator cancelChecker;\n+\n+\t\tpublic IndexContext(IResourceDescriptions index, CancelIndicator cancelChecker) {\n+\t\t\tthis.index = index;\n+\t\t\tthis.cancelChecker = cancelChecker;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String toString() {\n+\t\t\tToStringBuilder b = new ToStringBuilder(this);\n+\t\t\tb.add(\"index\", index);\n+\t\t\tb.add(\"cancelChecker\", cancelChecker);\n+\t\t\treturn b.toString();\n+\t\t}\n+\n+\t\tpublic IResourceDescriptions getIndex() {\n+\t\t\treturn index;\n+\t\t}\n+\n+\t\tpublic CancelIndicator getCancelChecker() {\n+\t\t\treturn cancelChecker;\n+\t\t}\n+\t}\n+\n+\tinterface IBuildListener {\n+\t\tvoid afterBuild(List<IResourceDescription.Delta> deltas);\n+\t}\n+\n+\t/**\n+\t * provides read access to a fully resolved resource and Document.\n+\t */\n+\t<T extends Object> CompletableFuture<T> doRead(String uri, Function<ILanguageServerAccess.Context, T> function);\n+\n+\t/**\n+\t * Provides read access to the Xtext index.\n+\t * \n+\t * @since 2.18\n+\t */\n+\t<T extends Object> CompletableFuture<T> doReadIndex(\n+\t\t\tFunction<? super ILanguageServerAccess.IndexContext, ? extends T> function);\n+\n+\t/**\n+\t * registers a build listener on the this language server\n+\t */\n+\tvoid addBuildListener(ILanguageServerAccess.IBuildListener listener);\n+\n+\t/**\n+\t * @return the language client facade. It usually also implements Endpoint, which can be used to call non-standard", "originalCommit": "1981f57b1e52a5d88bb3c01bea39ecddb5a88500", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5fabe640238c8482311bbdbf30c9c346e91539c7", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerAccess.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerAccess.java\nindex a800cde2a..b7278dcca 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerAccess.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerAccess.java\n\n@@ -17,6 +17,7 @@ import org.eclipse.emf.ecore.resource.Resource;\n import org.eclipse.emf.ecore.resource.ResourceSet;\n import org.eclipse.lsp4j.InitializeParams;\n import org.eclipse.lsp4j.InitializeResult;\n+import org.eclipse.lsp4j.jsonrpc.Endpoint;\n import org.eclipse.lsp4j.services.LanguageClient;\n import org.eclipse.xtext.ide.serializer.IChangeSerializer;\n import org.eclipse.xtext.resource.IResourceDescription;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3ODY2Nw==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388278667", "bodyText": "s/the LSP/LSP/", "author": "tivervac", "createdAt": "2020-03-05T13:02:42Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerAccess.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.server;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Function;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.lsp4j.InitializeParams;\n+import org.eclipse.lsp4j.InitializeResult;\n+import org.eclipse.lsp4j.services.LanguageClient;\n+import org.eclipse.xtext.ide.serializer.IChangeSerializer;\n+import org.eclipse.xtext.resource.IResourceDescription;\n+import org.eclipse.xtext.resource.IResourceDescriptions;\n+import org.eclipse.xtext.resource.impl.ResourceDescriptionsProvider;\n+import org.eclipse.xtext.util.CancelIndicator;\n+import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;\n+\n+/**\n+ * API for interacting with a running language server.\n+ * \n+ * @author Sven Efftinge - Initial contribution and API\n+ */\n+public interface ILanguageServerAccess {\n+\tclass Context {\n+\t\tprivate final Resource resource;\n+\n+\t\tprivate final Document document;\n+\n+\t\tprivate final boolean isDocumentOpen;\n+\n+\t\tprivate final CancelIndicator cancelChecker;\n+\n+\t\tpublic Context(Resource resource, Document document, boolean isDocumentOpen, CancelIndicator cancelChecker) {\n+\t\t\tthis.resource = resource;\n+\t\t\tthis.document = document;\n+\t\t\tthis.isDocumentOpen = isDocumentOpen;\n+\t\t\tthis.cancelChecker = cancelChecker;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String toString() {\n+\t\t\tToStringBuilder b = new ToStringBuilder(this);\n+\t\t\tb.add(\"resource\", resource);\n+\t\t\tb.add(\"document\", document);\n+\t\t\tb.add(\"isDocumentOpen\", isDocumentOpen);\n+\t\t\tb.add(\"cancelChecker\", cancelChecker);\n+\t\t\treturn b.toString();\n+\t\t}\n+\n+\t\tpublic Resource getResource() {\n+\t\t\treturn resource;\n+\t\t}\n+\n+\t\tpublic Document getDocument() {\n+\t\t\treturn document;\n+\t\t}\n+\n+\t\tpublic boolean isDocumentOpen() {\n+\t\t\treturn isDocumentOpen;\n+\t\t}\n+\n+\t\tpublic CancelIndicator getCancelChecker() {\n+\t\t\treturn cancelChecker;\n+\t\t}\n+\t}\n+\n+\tclass IndexContext {\n+\t\tprivate final IResourceDescriptions index;\n+\n+\t\tprivate final CancelIndicator cancelChecker;\n+\n+\t\tpublic IndexContext(IResourceDescriptions index, CancelIndicator cancelChecker) {\n+\t\t\tthis.index = index;\n+\t\t\tthis.cancelChecker = cancelChecker;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String toString() {\n+\t\t\tToStringBuilder b = new ToStringBuilder(this);\n+\t\t\tb.add(\"index\", index);\n+\t\t\tb.add(\"cancelChecker\", cancelChecker);\n+\t\t\treturn b.toString();\n+\t\t}\n+\n+\t\tpublic IResourceDescriptions getIndex() {\n+\t\t\treturn index;\n+\t\t}\n+\n+\t\tpublic CancelIndicator getCancelChecker() {\n+\t\t\treturn cancelChecker;\n+\t\t}\n+\t}\n+\n+\tinterface IBuildListener {\n+\t\tvoid afterBuild(List<IResourceDescription.Delta> deltas);\n+\t}\n+\n+\t/**\n+\t * provides read access to a fully resolved resource and Document.\n+\t */\n+\t<T extends Object> CompletableFuture<T> doRead(String uri, Function<ILanguageServerAccess.Context, T> function);\n+\n+\t/**\n+\t * Provides read access to the Xtext index.\n+\t * \n+\t * @since 2.18\n+\t */\n+\t<T extends Object> CompletableFuture<T> doReadIndex(\n+\t\t\tFunction<? super ILanguageServerAccess.IndexContext, ? extends T> function);\n+\n+\t/**\n+\t * registers a build listener on the this language server\n+\t */\n+\tvoid addBuildListener(ILanguageServerAccess.IBuildListener listener);\n+\n+\t/**\n+\t * @return the language client facade. It usually also implements Endpoint, which can be used to call non-standard\n+\t *         extensions to the LSP.", "originalCommit": "1981f57b1e52a5d88bb3c01bea39ecddb5a88500", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5fabe640238c8482311bbdbf30c9c346e91539c7", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerAccess.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerAccess.java\nindex a800cde2a..b7278dcca 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerAccess.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerAccess.java\n\n@@ -17,6 +17,7 @@ import org.eclipse.emf.ecore.resource.Resource;\n import org.eclipse.emf.ecore.resource.ResourceSet;\n import org.eclipse.lsp4j.InitializeParams;\n import org.eclipse.lsp4j.InitializeResult;\n+import org.eclipse.lsp4j.jsonrpc.Endpoint;\n import org.eclipse.lsp4j.services.LanguageClient;\n import org.eclipse.xtext.ide.serializer.IChangeSerializer;\n import org.eclipse.xtext.resource.IResourceDescription;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3OTMzOA==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388279338", "bodyText": "Not very useful to have abbreviations here\nresp = respective?\nresp = responsive?\nresp = RESt in Pepperonis?", "author": "tivervac", "createdAt": "2020-03-05T13:04:04Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerAccess.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.server;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Function;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.lsp4j.InitializeParams;\n+import org.eclipse.lsp4j.InitializeResult;\n+import org.eclipse.lsp4j.services.LanguageClient;\n+import org.eclipse.xtext.ide.serializer.IChangeSerializer;\n+import org.eclipse.xtext.resource.IResourceDescription;\n+import org.eclipse.xtext.resource.IResourceDescriptions;\n+import org.eclipse.xtext.resource.impl.ResourceDescriptionsProvider;\n+import org.eclipse.xtext.util.CancelIndicator;\n+import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;\n+\n+/**\n+ * API for interacting with a running language server.\n+ * \n+ * @author Sven Efftinge - Initial contribution and API\n+ */\n+public interface ILanguageServerAccess {\n+\tclass Context {\n+\t\tprivate final Resource resource;\n+\n+\t\tprivate final Document document;\n+\n+\t\tprivate final boolean isDocumentOpen;\n+\n+\t\tprivate final CancelIndicator cancelChecker;\n+\n+\t\tpublic Context(Resource resource, Document document, boolean isDocumentOpen, CancelIndicator cancelChecker) {\n+\t\t\tthis.resource = resource;\n+\t\t\tthis.document = document;\n+\t\t\tthis.isDocumentOpen = isDocumentOpen;\n+\t\t\tthis.cancelChecker = cancelChecker;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String toString() {\n+\t\t\tToStringBuilder b = new ToStringBuilder(this);\n+\t\t\tb.add(\"resource\", resource);\n+\t\t\tb.add(\"document\", document);\n+\t\t\tb.add(\"isDocumentOpen\", isDocumentOpen);\n+\t\t\tb.add(\"cancelChecker\", cancelChecker);\n+\t\t\treturn b.toString();\n+\t\t}\n+\n+\t\tpublic Resource getResource() {\n+\t\t\treturn resource;\n+\t\t}\n+\n+\t\tpublic Document getDocument() {\n+\t\t\treturn document;\n+\t\t}\n+\n+\t\tpublic boolean isDocumentOpen() {\n+\t\t\treturn isDocumentOpen;\n+\t\t}\n+\n+\t\tpublic CancelIndicator getCancelChecker() {\n+\t\t\treturn cancelChecker;\n+\t\t}\n+\t}\n+\n+\tclass IndexContext {\n+\t\tprivate final IResourceDescriptions index;\n+\n+\t\tprivate final CancelIndicator cancelChecker;\n+\n+\t\tpublic IndexContext(IResourceDescriptions index, CancelIndicator cancelChecker) {\n+\t\t\tthis.index = index;\n+\t\t\tthis.cancelChecker = cancelChecker;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String toString() {\n+\t\t\tToStringBuilder b = new ToStringBuilder(this);\n+\t\t\tb.add(\"index\", index);\n+\t\t\tb.add(\"cancelChecker\", cancelChecker);\n+\t\t\treturn b.toString();\n+\t\t}\n+\n+\t\tpublic IResourceDescriptions getIndex() {\n+\t\t\treturn index;\n+\t\t}\n+\n+\t\tpublic CancelIndicator getCancelChecker() {\n+\t\t\treturn cancelChecker;\n+\t\t}\n+\t}\n+\n+\tinterface IBuildListener {\n+\t\tvoid afterBuild(List<IResourceDescription.Delta> deltas);\n+\t}\n+\n+\t/**\n+\t * provides read access to a fully resolved resource and Document.\n+\t */\n+\t<T extends Object> CompletableFuture<T> doRead(String uri, Function<ILanguageServerAccess.Context, T> function);\n+\n+\t/**\n+\t * Provides read access to the Xtext index.\n+\t * \n+\t * @since 2.18\n+\t */\n+\t<T extends Object> CompletableFuture<T> doReadIndex(\n+\t\t\tFunction<? super ILanguageServerAccess.IndexContext, ? extends T> function);\n+\n+\t/**\n+\t * registers a build listener on the this language server\n+\t */\n+\tvoid addBuildListener(ILanguageServerAccess.IBuildListener listener);\n+\n+\t/**\n+\t * @return the language client facade. It usually also implements Endpoint, which can be used to call non-standard\n+\t *         extensions to the LSP.\n+\t */\n+\tLanguageClient getLanguageClient();\n+\n+\t/**\n+\t * Creates a new {@link ResourceSet} to be used with the {@link IChangeSerializer} API.\n+\t * \n+\t * The {@link IChangeSerializer} allows to calculate text edits from model changes. In order not to mess up the\n+\t * originals, the resp. models should be loaded into a new resource set which this method provides.", "originalCommit": "1981f57b1e52a5d88bb3c01bea39ecddb5a88500", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5fabe640238c8482311bbdbf30c9c346e91539c7", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerAccess.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerAccess.java\nindex a800cde2a..b7278dcca 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerAccess.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerAccess.java\n\n@@ -17,6 +17,7 @@ import org.eclipse.emf.ecore.resource.Resource;\n import org.eclipse.emf.ecore.resource.ResourceSet;\n import org.eclipse.lsp4j.InitializeParams;\n import org.eclipse.lsp4j.InitializeResult;\n+import org.eclipse.lsp4j.jsonrpc.Endpoint;\n import org.eclipse.lsp4j.services.LanguageClient;\n import org.eclipse.xtext.ide.serializer.IChangeSerializer;\n import org.eclipse.xtext.resource.IResourceDescription;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3OTUwMA==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388279500", "bodyText": "{@link URI}", "author": "tivervac", "createdAt": "2020-03-05T13:04:26Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerAccess.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.server;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Function;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.lsp4j.InitializeParams;\n+import org.eclipse.lsp4j.InitializeResult;\n+import org.eclipse.lsp4j.services.LanguageClient;\n+import org.eclipse.xtext.ide.serializer.IChangeSerializer;\n+import org.eclipse.xtext.resource.IResourceDescription;\n+import org.eclipse.xtext.resource.IResourceDescriptions;\n+import org.eclipse.xtext.resource.impl.ResourceDescriptionsProvider;\n+import org.eclipse.xtext.util.CancelIndicator;\n+import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;\n+\n+/**\n+ * API for interacting with a running language server.\n+ * \n+ * @author Sven Efftinge - Initial contribution and API\n+ */\n+public interface ILanguageServerAccess {\n+\tclass Context {\n+\t\tprivate final Resource resource;\n+\n+\t\tprivate final Document document;\n+\n+\t\tprivate final boolean isDocumentOpen;\n+\n+\t\tprivate final CancelIndicator cancelChecker;\n+\n+\t\tpublic Context(Resource resource, Document document, boolean isDocumentOpen, CancelIndicator cancelChecker) {\n+\t\t\tthis.resource = resource;\n+\t\t\tthis.document = document;\n+\t\t\tthis.isDocumentOpen = isDocumentOpen;\n+\t\t\tthis.cancelChecker = cancelChecker;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String toString() {\n+\t\t\tToStringBuilder b = new ToStringBuilder(this);\n+\t\t\tb.add(\"resource\", resource);\n+\t\t\tb.add(\"document\", document);\n+\t\t\tb.add(\"isDocumentOpen\", isDocumentOpen);\n+\t\t\tb.add(\"cancelChecker\", cancelChecker);\n+\t\t\treturn b.toString();\n+\t\t}\n+\n+\t\tpublic Resource getResource() {\n+\t\t\treturn resource;\n+\t\t}\n+\n+\t\tpublic Document getDocument() {\n+\t\t\treturn document;\n+\t\t}\n+\n+\t\tpublic boolean isDocumentOpen() {\n+\t\t\treturn isDocumentOpen;\n+\t\t}\n+\n+\t\tpublic CancelIndicator getCancelChecker() {\n+\t\t\treturn cancelChecker;\n+\t\t}\n+\t}\n+\n+\tclass IndexContext {\n+\t\tprivate final IResourceDescriptions index;\n+\n+\t\tprivate final CancelIndicator cancelChecker;\n+\n+\t\tpublic IndexContext(IResourceDescriptions index, CancelIndicator cancelChecker) {\n+\t\t\tthis.index = index;\n+\t\t\tthis.cancelChecker = cancelChecker;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String toString() {\n+\t\t\tToStringBuilder b = new ToStringBuilder(this);\n+\t\t\tb.add(\"index\", index);\n+\t\t\tb.add(\"cancelChecker\", cancelChecker);\n+\t\t\treturn b.toString();\n+\t\t}\n+\n+\t\tpublic IResourceDescriptions getIndex() {\n+\t\t\treturn index;\n+\t\t}\n+\n+\t\tpublic CancelIndicator getCancelChecker() {\n+\t\t\treturn cancelChecker;\n+\t\t}\n+\t}\n+\n+\tinterface IBuildListener {\n+\t\tvoid afterBuild(List<IResourceDescription.Delta> deltas);\n+\t}\n+\n+\t/**\n+\t * provides read access to a fully resolved resource and Document.\n+\t */\n+\t<T extends Object> CompletableFuture<T> doRead(String uri, Function<ILanguageServerAccess.Context, T> function);\n+\n+\t/**\n+\t * Provides read access to the Xtext index.\n+\t * \n+\t * @since 2.18\n+\t */\n+\t<T extends Object> CompletableFuture<T> doReadIndex(\n+\t\t\tFunction<? super ILanguageServerAccess.IndexContext, ? extends T> function);\n+\n+\t/**\n+\t * registers a build listener on the this language server\n+\t */\n+\tvoid addBuildListener(ILanguageServerAccess.IBuildListener listener);\n+\n+\t/**\n+\t * @return the language client facade. It usually also implements Endpoint, which can be used to call non-standard\n+\t *         extensions to the LSP.\n+\t */\n+\tLanguageClient getLanguageClient();\n+\n+\t/**\n+\t * Creates a new {@link ResourceSet} to be used with the {@link IChangeSerializer} API.\n+\t * \n+\t * The {@link IChangeSerializer} allows to calculate text edits from model changes. In order not to mess up the\n+\t * originals, the resp. models should be loaded into a new resource set which this method provides.\n+\t * \n+\t * @param uri\n+\t *            a file URI used to detect the project to configure the scope of the resource set.", "originalCommit": "1981f57b1e52a5d88bb3c01bea39ecddb5a88500", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5fabe640238c8482311bbdbf30c9c346e91539c7", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerAccess.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerAccess.java\nindex a800cde2a..b7278dcca 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerAccess.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerAccess.java\n\n@@ -17,6 +17,7 @@ import org.eclipse.emf.ecore.resource.Resource;\n import org.eclipse.emf.ecore.resource.ResourceSet;\n import org.eclipse.lsp4j.InitializeParams;\n import org.eclipse.lsp4j.InitializeResult;\n+import org.eclipse.lsp4j.jsonrpc.Endpoint;\n import org.eclipse.lsp4j.services.LanguageClient;\n import org.eclipse.xtext.ide.serializer.IChangeSerializer;\n import org.eclipse.xtext.resource.IResourceDescription;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3OTkwNA==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388279904", "bodyText": "s/with the/the/\ns/LS/language server/", "author": "tivervac", "createdAt": "2020-03-05T13:05:19Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerAccess.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.server;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Function;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.lsp4j.InitializeParams;\n+import org.eclipse.lsp4j.InitializeResult;\n+import org.eclipse.lsp4j.services.LanguageClient;\n+import org.eclipse.xtext.ide.serializer.IChangeSerializer;\n+import org.eclipse.xtext.resource.IResourceDescription;\n+import org.eclipse.xtext.resource.IResourceDescriptions;\n+import org.eclipse.xtext.resource.impl.ResourceDescriptionsProvider;\n+import org.eclipse.xtext.util.CancelIndicator;\n+import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;\n+\n+/**\n+ * API for interacting with a running language server.\n+ * \n+ * @author Sven Efftinge - Initial contribution and API\n+ */\n+public interface ILanguageServerAccess {\n+\tclass Context {\n+\t\tprivate final Resource resource;\n+\n+\t\tprivate final Document document;\n+\n+\t\tprivate final boolean isDocumentOpen;\n+\n+\t\tprivate final CancelIndicator cancelChecker;\n+\n+\t\tpublic Context(Resource resource, Document document, boolean isDocumentOpen, CancelIndicator cancelChecker) {\n+\t\t\tthis.resource = resource;\n+\t\t\tthis.document = document;\n+\t\t\tthis.isDocumentOpen = isDocumentOpen;\n+\t\t\tthis.cancelChecker = cancelChecker;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String toString() {\n+\t\t\tToStringBuilder b = new ToStringBuilder(this);\n+\t\t\tb.add(\"resource\", resource);\n+\t\t\tb.add(\"document\", document);\n+\t\t\tb.add(\"isDocumentOpen\", isDocumentOpen);\n+\t\t\tb.add(\"cancelChecker\", cancelChecker);\n+\t\t\treturn b.toString();\n+\t\t}\n+\n+\t\tpublic Resource getResource() {\n+\t\t\treturn resource;\n+\t\t}\n+\n+\t\tpublic Document getDocument() {\n+\t\t\treturn document;\n+\t\t}\n+\n+\t\tpublic boolean isDocumentOpen() {\n+\t\t\treturn isDocumentOpen;\n+\t\t}\n+\n+\t\tpublic CancelIndicator getCancelChecker() {\n+\t\t\treturn cancelChecker;\n+\t\t}\n+\t}\n+\n+\tclass IndexContext {\n+\t\tprivate final IResourceDescriptions index;\n+\n+\t\tprivate final CancelIndicator cancelChecker;\n+\n+\t\tpublic IndexContext(IResourceDescriptions index, CancelIndicator cancelChecker) {\n+\t\t\tthis.index = index;\n+\t\t\tthis.cancelChecker = cancelChecker;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String toString() {\n+\t\t\tToStringBuilder b = new ToStringBuilder(this);\n+\t\t\tb.add(\"index\", index);\n+\t\t\tb.add(\"cancelChecker\", cancelChecker);\n+\t\t\treturn b.toString();\n+\t\t}\n+\n+\t\tpublic IResourceDescriptions getIndex() {\n+\t\t\treturn index;\n+\t\t}\n+\n+\t\tpublic CancelIndicator getCancelChecker() {\n+\t\t\treturn cancelChecker;\n+\t\t}\n+\t}\n+\n+\tinterface IBuildListener {\n+\t\tvoid afterBuild(List<IResourceDescription.Delta> deltas);\n+\t}\n+\n+\t/**\n+\t * provides read access to a fully resolved resource and Document.\n+\t */\n+\t<T extends Object> CompletableFuture<T> doRead(String uri, Function<ILanguageServerAccess.Context, T> function);\n+\n+\t/**\n+\t * Provides read access to the Xtext index.\n+\t * \n+\t * @since 2.18\n+\t */\n+\t<T extends Object> CompletableFuture<T> doReadIndex(\n+\t\t\tFunction<? super ILanguageServerAccess.IndexContext, ? extends T> function);\n+\n+\t/**\n+\t * registers a build listener on the this language server\n+\t */\n+\tvoid addBuildListener(ILanguageServerAccess.IBuildListener listener);\n+\n+\t/**\n+\t * @return the language client facade. It usually also implements Endpoint, which can be used to call non-standard\n+\t *         extensions to the LSP.\n+\t */\n+\tLanguageClient getLanguageClient();\n+\n+\t/**\n+\t * Creates a new {@link ResourceSet} to be used with the {@link IChangeSerializer} API.\n+\t * \n+\t * The {@link IChangeSerializer} allows to calculate text edits from model changes. In order not to mess up the\n+\t * originals, the resp. models should be loaded into a new resource set which this method provides.\n+\t * \n+\t * @param uri\n+\t *            a file URI used to detect the project to configure the scope of the resource set.\n+\t * @return a new empty resource set, configured with the project the <code>uri</code> belongs to and the\n+\t *         {@link ResourceDescriptionsProvider#LIVE_SCOPE} in order to reflect model changes immediately.\n+\t * @since 2.18\n+\t */\n+\tResourceSet newLiveScopeResourceSet(URI uri);\n+\n+\t/**\n+\t * @return the parameters as negotiated during client and server on initialization.\n+\t * @since 2.18\n+\t */\n+\tInitializeParams getInitializeParams();\n+\n+\t/**\n+\t * Returns with the {@link InitializeResult} of the LS.", "originalCommit": "1981f57b1e52a5d88bb3c01bea39ecddb5a88500", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5fabe640238c8482311bbdbf30c9c346e91539c7", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerAccess.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerAccess.java\nindex a800cde2a..b7278dcca 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerAccess.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerAccess.java\n\n@@ -17,6 +17,7 @@ import org.eclipse.emf.ecore.resource.Resource;\n import org.eclipse.emf.ecore.resource.ResourceSet;\n import org.eclipse.lsp4j.InitializeParams;\n import org.eclipse.lsp4j.InitializeResult;\n+import org.eclipse.lsp4j.jsonrpc.Endpoint;\n import org.eclipse.lsp4j.services.LanguageClient;\n import org.eclipse.xtext.ide.serializer.IChangeSerializer;\n import org.eclipse.xtext.resource.IResourceDescription;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI4MDMzMA==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388280330", "bodyText": "s/the LSP/LSP/\n{link} instead of {@link}?", "author": "tivervac", "createdAt": "2020-03-05T13:06:15Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerExtension.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/**\n+ * Copyright (c) 2016 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.server;\n+\n+import org.eclipse.xtext.ide.server.ILanguageServerAccess;\n+\n+/**\n+ * Interface for language specific extensions to the LSP. Implementors should use {link JsonRpcNotification} and {link", "originalCommit": "1981f57b1e52a5d88bb3c01bea39ecddb5a88500", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5fabe640238c8482311bbdbf30c9c346e91539c7", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerExtension.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerExtension.java\nindex 9ca6fa445..24b33898e 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerExtension.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerExtension.java\n\n@@ -11,7 +11,7 @@ package org.eclipse.xtext.ide.server;\n import org.eclipse.xtext.ide.server.ILanguageServerAccess;\n \n /**\n- * Interface for language specific extensions to the LSP. Implementors should use {link JsonRpcNotification} and {link\n+ * Interface for language specific extensions to LSP. Implementors should use {@link JsonRpcNotification} and {@link\n  * JsonRpcRequest} annotations.\n  * \n  * @author Sven Efftinge - Initial contribution and API\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI4MTM4MA==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388281380", "bodyText": "This comment doesn't make sense at all.\nHow about:\n/**\n * Initialize the extension\n * @param access Provides access to language server documents, resources and build events\n */", "author": "tivervac", "createdAt": "2020-03-05T13:08:26Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerExtension.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/**\n+ * Copyright (c) 2016 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.server;\n+\n+import org.eclipse.xtext.ide.server.ILanguageServerAccess;\n+\n+/**\n+ * Interface for language specific extensions to the LSP. Implementors should use {link JsonRpcNotification} and {link\n+ * JsonRpcRequest} annotations.\n+ * \n+ * @author Sven Efftinge - Initial contribution and API\n+ */\n+public interface ILanguageServerExtension {\n+\t/**\n+\t * The same jsonrpc method might be supported by multiple languages and only the actual invocation might reveal is a\n+\t * language wants to handle it, based on e.g. a uri in the parameter.\n+\t * \n+\t * To indicate that a request is not handled, this exception should be thrown by the service.\n+\t */\n+\tstatic final RuntimeException NOT_HANDLED_EXCEPTION = new UnsupportedOperationException(\"not handled\");\n+\n+\t/**\n+\t * the language server provides a access to language server documents, resources and build events.", "originalCommit": "1981f57b1e52a5d88bb3c01bea39ecddb5a88500", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5fabe640238c8482311bbdbf30c9c346e91539c7", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerExtension.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerExtension.java\nindex 9ca6fa445..24b33898e 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerExtension.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ILanguageServerExtension.java\n\n@@ -11,7 +11,7 @@ package org.eclipse.xtext.ide.server;\n import org.eclipse.xtext.ide.server.ILanguageServerAccess;\n \n /**\n- * Interface for language specific extensions to the LSP. Implementors should use {link JsonRpcNotification} and {link\n+ * Interface for language specific extensions to LSP. Implementors should use {@link JsonRpcNotification} and {@link\n  * JsonRpcRequest} annotations.\n  * \n  * @author Sven Efftinge - Initial contribution and API\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI4MTk4MA==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388281980", "bodyText": "Not sure how Xtext feels about this but I very much like a newline at the end of the file", "author": "tivervac", "createdAt": "2020-03-05T13:09:44Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/codelens/ICodeLensResolver.java", "diffHunk": "@@ -16,10 +16,10 @@\n /**\n  * @author Sven Efftinge - Initial contribution and API\n  */\n-@SuppressWarnings(\"all\")\n public interface ICodeLensResolver {\n-  /**\n-   * Resolve the given code lens.\n-   */\n-  CodeLens resolveCodeLens(final Document document, final XtextResource resource, final CodeLens codeLens, final CancelIndicator indicator);\n-}\n+\t\n+\t/**\n+\t * Resolve the given code lens.\n+\t */\n+\tCodeLens resolveCodeLens(Document document, XtextResource resource, CodeLens codeLens, CancelIndicator indicator);\n+}", "originalCommit": "1981f57b1e52a5d88bb3c01bea39ecddb5a88500", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5fabe640238c8482311bbdbf30c9c346e91539c7", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/codelens/ICodeLensResolver.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/codelens/ICodeLensResolver.java\nindex 3bfd42311..17da0a54e 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/codelens/ICodeLensResolver.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/codelens/ICodeLensResolver.java\n\n@@ -22,4 +22,4 @@ public interface ICodeLensResolver {\n \t * Resolve the given code lens.\n \t */\n \tCodeLens resolveCodeLens(Document document, XtextResource resource, CodeLens codeLens, CancelIndicator indicator);\n-}\n\\ No newline at end of file\n+}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI4MjExMQ==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388282111", "bodyText": "s/compute/Compute/", "author": "tivervac", "createdAt": "2020-03-05T13:10:04Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/codelens/ICodeLensService.java", "diffHunk": "@@ -18,10 +18,11 @@\n /**\n  * @author Sven Efftinge - Initial contribution and API\n  */\n-@SuppressWarnings(\"all\")\n public interface ICodeLensService {\n-  /**\n-   * compute code lenses for the given context.\n-   */\n-  List<? extends CodeLens> computeCodeLenses(final Document document, final XtextResource resource, final CodeLensParams params, final CancelIndicator indicator);\n-}\n+\t\n+\t/**\n+\t * compute code lenses for the given context.", "originalCommit": "1981f57b1e52a5d88bb3c01bea39ecddb5a88500", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5fabe640238c8482311bbdbf30c9c346e91539c7", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/codelens/ICodeLensService.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/codelens/ICodeLensService.java\nindex 0c57cb119..e1a924bdf 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/codelens/ICodeLensService.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/codelens/ICodeLensService.java\n\n@@ -21,7 +21,7 @@ import org.eclipse.xtext.util.CancelIndicator;\n public interface ICodeLensService {\n \t\n \t/**\n-\t * compute code lenses for the given context.\n+\t * Compute code lenses for the given context.\n \t */\n \tList<? extends CodeLens> computeCodeLenses(Document document, XtextResource resource, CodeLensParams params, CancelIndicator indicator);\n \t\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI4Mjk2MA==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388282960", "bodyText": "Just checking but IIRC Function1 can't be replaced by java.util.Function without breaking backwards compatibility can't it?", "author": "tivervac", "createdAt": "2020-03-05T13:11:44Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/commands/IExecutableCommandService.java", "diffHunk": "@@ -29,11 +28,11 @@\n   /**\n    * Called on server initialize, only if the client supported dynamicRegistration of commands.\n    */\n-  default void initializeDynamicRegistration(final Function1<? super String, ? extends IDisposable> register) {\n+  default void initializeDynamicRegistration(Function1<? super String, ? extends IDisposable> register) {", "originalCommit": "1981f57b1e52a5d88bb3c01bea39ecddb5a88500", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM1NjE4Mg==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388356182", "bodyText": "yes there is no inheriance yet", "author": "cdietrich", "createdAt": "2020-03-05T15:11:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI4Mjk2MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI4MzI2NQ==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388283265", "bodyText": "Not needed", "author": "tivervac", "createdAt": "2020-03-05T13:12:20Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/hover/HoverContext.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.server.hover;\n+\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.util.EcoreUtil;\n+import org.eclipse.xtext.ide.server.Document;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.util.ITextRegion;\n+import org.eclipse.xtext.util.Strings;\n+\n+public class HoverContext {\n+\tprivate final Document document;\n+\n+\tprivate final XtextResource resource;\n+\n+\tprivate final int offset;\n+\n+\tprivate final ITextRegion region;\n+\n+\tprivate final EObject element;\n+\n+\tpublic HoverContext(Document document, XtextResource resource, int offset, ITextRegion region, EObject element) {\n+\t\tsuper();", "originalCommit": "1981f57b1e52a5d88bb3c01bea39ecddb5a88500", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5fabe640238c8482311bbdbf30c9c346e91539c7", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/hover/HoverContext.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/hover/HoverContext.java\nindex 6150ad28d..289f8ca4b 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/hover/HoverContext.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/hover/HoverContext.java\n\n@@ -27,7 +27,6 @@ public class HoverContext {\n \tprivate final EObject element;\n \n \tpublic HoverContext(Document document, XtextResource resource, int offset, ITextRegion region, EObject element) {\n-\t\tsuper();\n \t\tthis.document = document;\n \t\tthis.resource = resource;\n \t\tthis.offset = offset;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI4NDAzNw==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388284037", "bodyText": "s/with a set/a set/", "author": "tivervac", "createdAt": "2020-03-05T13:13:52Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/semanticHighlight/ISemanticHighlightingStyleToTokenMapper.java", "diffHunk": "@@ -1,59 +1,65 @@\n /*******************************************************************************\n- * Copyright (c) 2018 TypeFox and others.\n+ * Copyright (c) 2018, 2020 TypeFox and others.\n  * This program and the accompanying materials are made available under the\n  * terms of the Eclipse Public License 2.0 which is available at\n  * http://www.eclipse.org/legal/epl-2.0.\n  *\n  * SPDX-License-Identifier: EPL-2.0\n  *******************************************************************************/\n-package org.eclipse.xtext.ide.server.semanticHighlight\n+package org.eclipse.xtext.ide.server.semanticHighlight;\n \n-import com.google.inject.ImplementedBy\n-import com.google.inject.Singleton\n-import java.util.List\n-import java.util.Set\n-import org.eclipse.xtext.ide.editor.syntaxcoloring.IHighlightedPositionAcceptor\n-import org.eclipse.xtext.ide.editor.syntaxcoloring.ISemanticHighlightingCalculator\n-import org.eclipse.xtext.ide.editor.syntaxcoloring.LightweightPosition\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.eclipse.xtext.ide.editor.syntaxcoloring.IHighlightedPositionAcceptor;\n+import org.eclipse.xtext.ide.editor.syntaxcoloring.ISemanticHighlightingCalculator;\n+import org.eclipse.xtext.ide.editor.syntaxcoloring.LightweightPosition;\n+\n+import com.google.inject.ImplementedBy;\n+import com.google.inject.Singleton;\n \n /**\n- * Service for mapping the IDs of the highlighting styles to a list of <a href=\"https://manual.macromates.com/en/language_grammars\">TextMate scopes</a>.\n+ * Service for mapping the IDs of the highlighting styles to a list of\n+ * <a href=\"https://manual.macromates.com/en/language_grammars\">TextMate scopes</a>.\n  * \n  * @see IHighlightedPositionAcceptor#addPosition\n  * @see LightweightPosition#getIds\n  * \n  */\n-@ImplementedBy(Noop)\n-interface ISemanticHighlightingStyleToTokenMapper {\n+@ImplementedBy(ISemanticHighlightingStyleToTokenMapper.Noop.class)\n+public interface ISemanticHighlightingStyleToTokenMapper {\n \n \t/**\n \t * Maps the highlighting style ID to the corresponding TextMate scopes.\n \t */\n-\tdef List<String> toScopes(String styleId);\n+\tList<String> toScopes(String styleId);\n \n \t/**\n-\t * Returns with a set of distinct style identifiers that are used by the {@link IHighlightedPositionAcceptor} when calculating\n-\t * the highlighted positions with the {@link ISemanticHighlightingCalculator}.\n+\t * Returns with a set of distinct style identifiers that are used by the {@link IHighlightedPositionAcceptor} when", "originalCommit": "1981f57b1e52a5d88bb3c01bea39ecddb5a88500", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c239316d1940ff718c1a17841bc9855bbf228a34", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/semanticHighlight/ISemanticHighlightingStyleToTokenMapper.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/semanticHighlight/ISemanticHighlightingStyleToTokenMapper.java\nindex d21878a0d..bffcf3ac9 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/semanticHighlight/ISemanticHighlightingStyleToTokenMapper.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/semanticHighlight/ISemanticHighlightingStyleToTokenMapper.java\n\n@@ -36,7 +36,7 @@ public interface ISemanticHighlightingStyleToTokenMapper {\n \tList<String> toScopes(String styleId);\n \n \t/**\n-\t * Returns with a set of distinct style identifiers that are used by the {@link IHighlightedPositionAcceptor} when\n+\t * Returns a set of distinct style identifiers that are used by the {@link IHighlightedPositionAcceptor} when\n \t * calculating the highlighted positions with the {@link ISemanticHighlightingCalculator}.\n \t * \n \t * <p>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI4NDE4Nw==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388284187", "bodyText": "s/with //", "author": "tivervac", "createdAt": "2020-03-05T13:14:10Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/semanticHighlight/ISemanticHighlightingStyleToTokenMapper.java", "diffHunk": "@@ -1,59 +1,65 @@\n /*******************************************************************************\n- * Copyright (c) 2018 TypeFox and others.\n+ * Copyright (c) 2018, 2020 TypeFox and others.\n  * This program and the accompanying materials are made available under the\n  * terms of the Eclipse Public License 2.0 which is available at\n  * http://www.eclipse.org/legal/epl-2.0.\n  *\n  * SPDX-License-Identifier: EPL-2.0\n  *******************************************************************************/\n-package org.eclipse.xtext.ide.server.semanticHighlight\n+package org.eclipse.xtext.ide.server.semanticHighlight;\n \n-import com.google.inject.ImplementedBy\n-import com.google.inject.Singleton\n-import java.util.List\n-import java.util.Set\n-import org.eclipse.xtext.ide.editor.syntaxcoloring.IHighlightedPositionAcceptor\n-import org.eclipse.xtext.ide.editor.syntaxcoloring.ISemanticHighlightingCalculator\n-import org.eclipse.xtext.ide.editor.syntaxcoloring.LightweightPosition\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.eclipse.xtext.ide.editor.syntaxcoloring.IHighlightedPositionAcceptor;\n+import org.eclipse.xtext.ide.editor.syntaxcoloring.ISemanticHighlightingCalculator;\n+import org.eclipse.xtext.ide.editor.syntaxcoloring.LightweightPosition;\n+\n+import com.google.inject.ImplementedBy;\n+import com.google.inject.Singleton;\n \n /**\n- * Service for mapping the IDs of the highlighting styles to a list of <a href=\"https://manual.macromates.com/en/language_grammars\">TextMate scopes</a>.\n+ * Service for mapping the IDs of the highlighting styles to a list of\n+ * <a href=\"https://manual.macromates.com/en/language_grammars\">TextMate scopes</a>.\n  * \n  * @see IHighlightedPositionAcceptor#addPosition\n  * @see LightweightPosition#getIds\n  * \n  */\n-@ImplementedBy(Noop)\n-interface ISemanticHighlightingStyleToTokenMapper {\n+@ImplementedBy(ISemanticHighlightingStyleToTokenMapper.Noop.class)\n+public interface ISemanticHighlightingStyleToTokenMapper {\n \n \t/**\n \t * Maps the highlighting style ID to the corresponding TextMate scopes.\n \t */\n-\tdef List<String> toScopes(String styleId);\n+\tList<String> toScopes(String styleId);\n \n \t/**\n-\t * Returns with a set of distinct style identifiers that are used by the {@link IHighlightedPositionAcceptor} when calculating\n-\t * the highlighted positions with the {@link ISemanticHighlightingCalculator}.\n+\t * Returns with a set of distinct style identifiers that are used by the {@link IHighlightedPositionAcceptor} when\n+\t * calculating the highlighted positions with the {@link ISemanticHighlightingCalculator}.\n \t * \n \t * <p>\n \t * Must not return with {@code null} but an empty set instead.", "originalCommit": "1981f57b1e52a5d88bb3c01bea39ecddb5a88500", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM0NjkzMg==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388346932", "bodyText": "@cdietrich This one for example", "author": "tivervac", "createdAt": "2020-03-05T14:57:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI4NDE4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM3MjIzMg==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388372232", "bodyText": "@cdietrich this one survived", "author": "tivervac", "createdAt": "2020-03-05T15:34:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI4NDE4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM3Mjk4OA==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388372988", "bodyText": "i dont understand this one", "author": "cdietrich", "createdAt": "2020-03-05T15:35:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI4NDE4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM3Mzc5MA==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388373790", "bodyText": "calculating the highlighted postions the {@link .....} ?", "author": "cdietrich", "createdAt": "2020-03-05T15:36:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI4NDE4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "c239316d1940ff718c1a17841bc9855bbf228a34", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/semanticHighlight/ISemanticHighlightingStyleToTokenMapper.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/semanticHighlight/ISemanticHighlightingStyleToTokenMapper.java\nindex d21878a0d..bffcf3ac9 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/semanticHighlight/ISemanticHighlightingStyleToTokenMapper.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/semanticHighlight/ISemanticHighlightingStyleToTokenMapper.java\n\n@@ -36,7 +36,7 @@ public interface ISemanticHighlightingStyleToTokenMapper {\n \tList<String> toScopes(String styleId);\n \n \t/**\n-\t * Returns with a set of distinct style identifiers that are used by the {@link IHighlightedPositionAcceptor} when\n+\t * Returns a set of distinct style identifiers that are used by the {@link IHighlightedPositionAcceptor} when\n \t * calculating the highlighted positions with the {@link ISemanticHighlightingCalculator}.\n \t * \n \t * <p>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI4NDg3Mg==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388284872", "bodyText": "No parentheses needed", "author": "tivervac", "createdAt": "2020-03-05T13:15:28Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/util/CancelIndicatorProgressMonitor.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.util;\n+\n+import org.eclipse.core.runtime.IProgressMonitor;\n+import org.eclipse.xtext.util.CancelIndicator;\n+\n+/**\n+ * @author kosyakov - Initial contribution and API\n+ * @since 2.11\n+ */\n+public class CancelIndicatorProgressMonitor implements IProgressMonitor {\n+\tprivate final CancelIndicator delegate;\n+\n+\tprivate volatile boolean canceled;\n+\n+\t@Override\n+\tpublic boolean isCanceled() {\n+\t\treturn (canceled || delegate.isCanceled());", "originalCommit": "1981f57b1e52a5d88bb3c01bea39ecddb5a88500", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c239316d1940ff718c1a17841bc9855bbf228a34", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/util/CancelIndicatorProgressMonitor.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/util/CancelIndicatorProgressMonitor.java\nindex b623fbe6c..da9b938c4 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/util/CancelIndicatorProgressMonitor.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/util/CancelIndicatorProgressMonitor.java\n\n@@ -22,7 +22,7 @@ public class CancelIndicatorProgressMonitor implements IProgressMonitor {\n \n \t@Override\n \tpublic boolean isCanceled() {\n-\t\treturn (canceled || delegate.isCanceled());\n+\t\treturn canceled || delegate.isCanceled();\n \t}\n \n \t@Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI4NDk5Ng==", "url": "https://github.com/eclipse/xtext-core/pull/1409#discussion_r388284996", "bodyText": "Not needed", "author": "tivervac", "createdAt": "2020-03-05T13:15:43Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/util/CancelIndicatorProgressMonitor.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.util;\n+\n+import org.eclipse.core.runtime.IProgressMonitor;\n+import org.eclipse.xtext.util.CancelIndicator;\n+\n+/**\n+ * @author kosyakov - Initial contribution and API\n+ * @since 2.11\n+ */\n+public class CancelIndicatorProgressMonitor implements IProgressMonitor {\n+\tprivate final CancelIndicator delegate;\n+\n+\tprivate volatile boolean canceled;\n+\n+\t@Override\n+\tpublic boolean isCanceled() {\n+\t\treturn (canceled || delegate.isCanceled());\n+\t}\n+\n+\t@Override\n+\tpublic void setCanceled(boolean value) {\n+\t\tthis.canceled = value;\n+\t}\n+\n+\t@Override\n+\tpublic void beginTask(String name, int totalWork) {\n+\t}\n+\n+\t@Override\n+\tpublic void setTaskName(String name) {\n+\t}\n+\n+\t@Override\n+\tpublic void subTask(String name) {\n+\t}\n+\n+\t@Override\n+\tpublic void internalWorked(double work) {\n+\t}\n+\n+\t@Override\n+\tpublic void worked(int work) {\n+\t}\n+\n+\t@Override\n+\tpublic void done() {\n+\t}\n+\n+\tpublic CancelIndicatorProgressMonitor(CancelIndicator delegate) {\n+\t\tsuper();", "originalCommit": "1981f57b1e52a5d88bb3c01bea39ecddb5a88500", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c239316d1940ff718c1a17841bc9855bbf228a34", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/util/CancelIndicatorProgressMonitor.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/util/CancelIndicatorProgressMonitor.java\nindex b623fbe6c..da9b938c4 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/util/CancelIndicatorProgressMonitor.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/util/CancelIndicatorProgressMonitor.java\n\n@@ -22,7 +22,7 @@ public class CancelIndicatorProgressMonitor implements IProgressMonitor {\n \n \t@Override\n \tpublic boolean isCanceled() {\n-\t\treturn (canceled || delegate.isCanceled());\n+\t\treturn canceled || delegate.isCanceled();\n \t}\n \n \t@Override\n"}}, {"oid": "c239316d1940ff718c1a17841bc9855bbf228a34", "url": "https://github.com/eclipse/xtext-core/commit/c239316d1940ff718c1a17841bc9855bbf228a34", "message": "[eclipse/xtext#1679] converted more Xtend code to Java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-03-05T14:18:37Z", "type": "forcePushed"}, {"oid": "5fabe640238c8482311bbdbf30c9c346e91539c7", "url": "https://github.com/eclipse/xtext-core/commit/5fabe640238c8482311bbdbf30c9c346e91539c7", "message": "[eclipse/xtext#1679] converted more Xtend code to Java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-03-05T15:12:17Z", "type": "forcePushed"}, {"oid": "2b7845c10c7ce3a0832f223316588613e2a9d8ea", "url": "https://github.com/eclipse/xtext-core/commit/2b7845c10c7ce3a0832f223316588613e2a9d8ea", "message": "[eclipse/xtext#1679] converted more Xtend code to Java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-03-05T15:15:40Z", "type": "forcePushed"}, {"oid": "78a10a440c006c5f8b7db8a54654ccc1bac4ae4f", "url": "https://github.com/eclipse/xtext-core/commit/78a10a440c006c5f8b7db8a54654ccc1bac4ae4f", "message": "[eclipse/xtext#1679] converted more Xtend code to Java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-03-05T15:16:41Z", "type": "commit"}, {"oid": "78a10a440c006c5f8b7db8a54654ccc1bac4ae4f", "url": "https://github.com/eclipse/xtext-core/commit/78a10a440c006c5f8b7db8a54654ccc1bac4ae4f", "message": "[eclipse/xtext#1679] converted more Xtend code to Java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-03-05T15:16:41Z", "type": "forcePushed"}]}