{"pr_number": 1461, "pr_title": "[eclipse/xtext#1679]ported more code to java", "pr_createdAt": "2020-04-29T14:01:26Z", "pr_url": "https://github.com/eclipse/xtext-core/pull/1461", "timeline": [{"oid": "d9e602ee12b0fbbe4e2d06def2b4c7d08689f556", "url": "https://github.com/eclipse/xtext-core/commit/d9e602ee12b0fbbe4e2d06def2b4c7d08689f556", "message": "[eclipse/xtext#1679]ported more code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-29T14:01:49Z", "type": "forcePushed"}, {"oid": "7687d6d6996a488cf1c3a0b157535d97a57c618a", "url": "https://github.com/eclipse/xtext-core/commit/7687d6d6996a488cf1c3a0b157535d97a57c618a", "message": "[eclipse/xtext#1679]ported more code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-29T14:08:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc5NDY1NQ==", "url": "https://github.com/eclipse/xtext-core/pull/1461#discussion_r417794655", "bodyText": "SocketServerLauncher.LOG.info(\"Started server socket at \" + getSocketAddress(args));", "author": "nbhusare", "createdAt": "2020-04-30T06:58:17Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/SocketServerLauncher.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/**\n+ * Copyright (c) 2019, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.server;\n+\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.nio.channels.AsynchronousServerSocketChannel;\n+import java.nio.channels.AsynchronousSocketChannel;\n+import java.nio.channels.Channels;\n+\n+import org.apache.log4j.Logger;\n+import org.eclipse.lsp4j.jsonrpc.Launcher;\n+import org.eclipse.lsp4j.services.LanguageClient;\n+import org.eclipse.xtext.xbase.lib.ArrayExtensions;\n+\n+import com.google.common.base.Objects;\n+import com.google.inject.Guice;\n+import com.google.inject.Injector;\n+\n+/**\n+ * Allows to launch a language server vie a server socket.\n+ * \n+ * Useful for debugging live language servers.\n+ * \n+ * @author Jan K&ouml;hnlein - Initial contribution and API\n+ * @since 2.18\n+ */\n+public class SocketServerLauncher {\n+\n+\tprivate static final Logger LOG = Logger.getLogger(SocketServerLauncher.class);\n+\tpublic static final String HOST = \"-host\";\n+\n+\tpublic static final String PORT = \"-port\";\n+\n+\tpublic static final String TRACE = \"-trace\";\n+\n+\tpublic static final String NO_VALIDATE = \"-noValidate\";\n+\n+\tpublic static final int DEFAULT_PORT = 5008;\n+\n+\tpublic static final String DEFAULT_HOST = \"0.0.0.0\";\n+\n+\tpublic static void main(String[] args) {\n+\t\tnew SocketServerLauncher().launch(args);\n+\t}\n+\n+\tpublic void launch(String[] args) {\n+\t\tInjector injector = Guice.createInjector(getServerModule());\n+\t\ttry (AsynchronousServerSocketChannel serverSocket = AsynchronousServerSocketChannel.open()\n+\t\t\t\t.bind(getSocketAddress(args))) {\n+\t\t\tString _plus = (\"Started server socket at \" + getSocketAddress(args));\n+\t\t\tSocketServerLauncher.LOG.info(_plus);", "originalCommit": "7687d6d6996a488cf1c3a0b157535d97a57c618a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f4803d68dc3b29c49a734e27ea9b6fc5bb527e23", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/SocketServerLauncher.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/SocketServerLauncher.java\nindex 6fd2cad7d..347795116 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/SocketServerLauncher.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/SocketServerLauncher.java\n\n@@ -56,8 +56,7 @@ public class SocketServerLauncher {\n \t\tInjector injector = Guice.createInjector(getServerModule());\n \t\ttry (AsynchronousServerSocketChannel serverSocket = AsynchronousServerSocketChannel.open()\n \t\t\t\t.bind(getSocketAddress(args))) {\n-\t\t\tString _plus = (\"Started server socket at \" + getSocketAddress(args));\n-\t\t\tSocketServerLauncher.LOG.info(_plus);\n+\t\t\tSocketServerLauncher.LOG.info(\"Started server socket at \" + getSocketAddress(args));\n \t\t\twhile (true) {\n \t\t\t\tAsynchronousSocketChannel socketChannel = serverSocket.accept().get();\n \t\t\t\tInputStream in = Channels.newInputStream(socketChannel);\n"}}, {"oid": "f4803d68dc3b29c49a734e27ea9b6fc5bb527e23", "url": "https://github.com/eclipse/xtext-core/commit/f4803d68dc3b29c49a734e27ea9b6fc5bb527e23", "message": "[eclipse/xtext#1679]ported more code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-30T07:06:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg0Mzk0Mg==", "url": "https://github.com/eclipse/xtext-core/pull/1461#discussion_r417843942", "bodyText": "I suppose we want to rewrite this example to java as well?", "author": "tivervac", "createdAt": "2020-04-30T08:30:40Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/AbstractIdeTemplateProposalProvider.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/**\n+ * Copyright (c) 2016, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.editor.contentassist;\n+\n+import org.eclipse.xtend2.lib.StringConcatenation;\n+import org.eclipse.xtend2.lib.StringConcatenationClient;\n+import org.eclipse.xtext.util.TextRegion;\n+import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * Base class for adding template proposals from an {@link IdeContentProposalProvider} implementation. Use\n+ * {@link #variable(String)} and {@link #cursor()} to generate edit positions and an exit position into the proposal,\n+ * e.g.\n+ * \n+ * <pre>\n+ * val StringConcatenationClient template = '''", "originalCommit": "f4803d68dc3b29c49a734e27ea9b6fc5bb527e23", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0cd7d04e0b607fe3977b99c363e8b0ff22e9654f", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/AbstractIdeTemplateProposalProvider.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/AbstractIdeTemplateProposalProvider.java\nindex b712bf458..c12d94771 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/AbstractIdeTemplateProposalProvider.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/AbstractIdeTemplateProposalProvider.java\n\n@@ -19,14 +19,21 @@ import com.google.inject.Inject;\n  * Base class for adding template proposals from an {@link IdeContentProposalProvider} implementation. Use\n  * {@link #variable(String)} and {@link #cursor()} to generate edit positions and an exit position into the proposal,\n  * e.g.\n- * \n  * <pre>\n- * val StringConcatenationClient template = '''\n- *     state variable('name')\n- *         cursor\n- *     end\n- * '''\n- * acceptProposal('state', 'Create a new state', template, context, acceptor)\n+ * StringConcatenationClient template = new StringConcatenationClient() {\n+ *      {@literal @}Override\n+ *      protected void appendTo(StringConcatenationClient.TargetStringConcatenation target) {\n+ *          target.append(\"state \");\n+ *          target.append(variable(\"name\"));\n+ *          target.newLineIfNotEmpty();\n+ *          target.append(\"\\t\");\n+ *          target.append(cursor(), \"\\t\");\n+ *          target.newLineIfNotEmpty();\n+ *          target.append(\"end\");\n+ *          target.newLine();\n+ *      }\n+ * };\n+ * acceptProposal(\"state\", \"Create a new state\", template, context, acceptor);\n  * </pre>\n  * \n  * @since 2.10\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg0NDE1MA==", "url": "https://github.com/eclipse/xtext-core/pull/1461#discussion_r417844150", "bodyText": "This line as well (double quotes instead of single and a semicolon)", "author": "tivervac", "createdAt": "2020-04-30T08:31:03Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/AbstractIdeTemplateProposalProvider.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/**\n+ * Copyright (c) 2016, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.editor.contentassist;\n+\n+import org.eclipse.xtend2.lib.StringConcatenation;\n+import org.eclipse.xtend2.lib.StringConcatenationClient;\n+import org.eclipse.xtext.util.TextRegion;\n+import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * Base class for adding template proposals from an {@link IdeContentProposalProvider} implementation. Use\n+ * {@link #variable(String)} and {@link #cursor()} to generate edit positions and an exit position into the proposal,\n+ * e.g.\n+ * \n+ * <pre>\n+ * val StringConcatenationClient template = '''\n+ *     state \ufffdvariable('name')\ufffd\n+ *         \ufffdcursor\ufffd\n+ *     end\n+ * '''\n+ * acceptProposal('state', 'Create a new state', template, context, acceptor)", "originalCommit": "f4803d68dc3b29c49a734e27ea9b6fc5bb527e23", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0cd7d04e0b607fe3977b99c363e8b0ff22e9654f", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/AbstractIdeTemplateProposalProvider.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/AbstractIdeTemplateProposalProvider.java\nindex b712bf458..c12d94771 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/AbstractIdeTemplateProposalProvider.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/AbstractIdeTemplateProposalProvider.java\n\n@@ -19,14 +19,21 @@ import com.google.inject.Inject;\n  * Base class for adding template proposals from an {@link IdeContentProposalProvider} implementation. Use\n  * {@link #variable(String)} and {@link #cursor()} to generate edit positions and an exit position into the proposal,\n  * e.g.\n- * \n  * <pre>\n- * val StringConcatenationClient template = '''\n- *     state variable('name')\n- *         cursor\n- *     end\n- * '''\n- * acceptProposal('state', 'Create a new state', template, context, acceptor)\n+ * StringConcatenationClient template = new StringConcatenationClient() {\n+ *      {@literal @}Override\n+ *      protected void appendTo(StringConcatenationClient.TargetStringConcatenation target) {\n+ *          target.append(\"state \");\n+ *          target.append(variable(\"name\"));\n+ *          target.newLineIfNotEmpty();\n+ *          target.append(\"\\t\");\n+ *          target.append(cursor(), \"\\t\");\n+ *          target.newLineIfNotEmpty();\n+ *          target.append(\"end\");\n+ *          target.newLine();\n+ *      }\n+ * };\n+ * acceptProposal(\"state\", \"Create a new state\", template, context, acceptor);\n  * </pre>\n  * \n  * @since 2.10\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg0NTEyNw==", "url": "https://github.com/eclipse/xtext-core/pull/1461#discussion_r417845127", "bodyText": "'\\n'", "author": "tivervac", "createdAt": "2020-04-30T08:32:44Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/AbstractIdeTemplateProposalProvider.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/**\n+ * Copyright (c) 2016, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.editor.contentassist;\n+\n+import org.eclipse.xtend2.lib.StringConcatenation;\n+import org.eclipse.xtend2.lib.StringConcatenationClient;\n+import org.eclipse.xtext.util.TextRegion;\n+import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * Base class for adding template proposals from an {@link IdeContentProposalProvider} implementation. Use\n+ * {@link #variable(String)} and {@link #cursor()} to generate edit positions and an exit position into the proposal,\n+ * e.g.\n+ * \n+ * <pre>\n+ * val StringConcatenationClient template = '''\n+ *     state \ufffdvariable('name')\ufffd\n+ *         \ufffdcursor\ufffd\n+ *     end\n+ * '''\n+ * acceptProposal('state', 'Create a new state', template, context, acceptor)\n+ * </pre>\n+ * \n+ * @since 2.10\n+ */\n+public abstract class AbstractIdeTemplateProposalProvider {\n+\t/**\n+\t * Placeholder for a variable (edit position) in a template.\n+\t */\n+\tprotected static class Variable {\n+\t\tprivate final String name;\n+\n+\t\tpublic Variable(String name) {\n+\t\t\tthis.name = name;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic int hashCode() {\n+\t\t\tfinal int prime = 31;\n+\t\t\tint result = 1;\n+\t\t\tresult = prime * result + ((name == null) ? 0 : name.hashCode());\n+\t\t\treturn result;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic boolean equals(Object obj) {\n+\t\t\tif (this == obj)\n+\t\t\t\treturn true;\n+\t\t\tif (obj == null)\n+\t\t\t\treturn false;\n+\t\t\tif (getClass() != obj.getClass())\n+\t\t\t\treturn false;\n+\t\t\tVariable other = (Variable) obj;\n+\t\t\tif (name == null) {\n+\t\t\t\tif (other.name != null)\n+\t\t\t\t\treturn false;\n+\t\t\t} else if (!name.equals(other.name))\n+\t\t\t\treturn false;\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String toString() {\n+\t\t\tToStringBuilder b = new ToStringBuilder(this);\n+\t\t\tb.add(\"name\", name);\n+\t\t\treturn b.toString();\n+\t\t}\n+\n+\t\tpublic String getName() {\n+\t\t\treturn name;\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Placeholder for the cursor (exit position) in a template.\n+\t */\n+\tprotected static class Cursor {\n+\t}\n+\n+\tprivate static class TemplateStringConcatenation extends StringConcatenation {\n+\t\tprivate final ContentAssistContext context;\n+\n+\t\tprivate final ContentAssistEntry entry;\n+\n+\t\tpublic TemplateStringConcatenation(ContentAssistContext context, ContentAssistEntry entry,\n+\t\t\t\tString lineDelimiter) {\n+\t\t\tsuper(lineDelimiter);\n+\t\t\tthis.context = context;\n+\t\t\tthis.entry = entry;\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected String getStringRepresentation(Object object) {\n+\t\t\tif (object instanceof Variable) {\n+\t\t\t\tString varName = ((Variable) object).name;\n+\t\t\t\tint offset = context.getReplaceRegion().getOffset() + getCurrentOffset();\n+\t\t\t\tentry.getEditPositions().add(new TextRegion(offset, varName.length()));\n+\t\t\t\treturn varName;\n+\t\t\t} else {\n+\t\t\t\tif (object instanceof Cursor) {\n+\t\t\t\t\tentry.setEscapePosition(\n+\t\t\t\t\t\t\tInteger.valueOf(context.getReplaceRegion().getOffset() + getCurrentOffset()));\n+\t\t\t\t\treturn null;\n+\t\t\t\t} else {\n+\t\t\t\t\treturn object.toString();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\tprotected int getCurrentOffset() {\n+\t\t\tint result = 0;\n+\t\t\tfor (String segment : getContent()) {\n+\t\t\t\tresult = result + segment.length();\n+\t\t\t}\n+\t\t\treturn result;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void newLineIfNotEmpty() {\n+\t\t\tnewLine();\n+\t\t}\n+\t}\n+\n+\t@Inject\n+\tprivate IdeContentProposalCreator proposalCreator;\n+\n+\t@Inject\n+\tprivate IdeContentProposalPriorities proposalPriorities;\n+\n+\tprotected Variable variable(String name) {\n+\t\treturn new Variable(name);\n+\t}\n+\n+\tprotected Cursor cursor() {\n+\t\treturn new Cursor();\n+\t}\n+\n+\tprotected void acceptProposal(String name, String description, StringConcatenationClient template,\n+\t\t\tContentAssistContext context, IIdeContentProposalAcceptor acceptor) {\n+\t\tacceptProposal(name, description, template, context, acceptor, true);\n+\t}\n+\n+\tprotected void acceptProposal(String name, String description, StringConcatenationClient template,\n+\t\t\tContentAssistContext context, IIdeContentProposalAcceptor acceptor, boolean adaptIndentation) {\n+\t\tContentAssistEntry entry = createProposal(template, context, adaptIndentation);\n+\t\tif (canAcceptProposal(entry, context)) {\n+\t\t\tentry.setLabel(name);\n+\t\t\tentry.setDescription(description);\n+\t\t\tacceptor.accept(entry, proposalPriorities.getDefaultPriority(entry));\n+\t\t}\n+\t}\n+\n+\tprotected boolean canAcceptProposal(ContentAssistEntry entry, ContentAssistContext context) {\n+\t\treturn proposalCreator.isValidProposal(entry.getProposal(), entry.getPrefix(), context);\n+\t}\n+\n+\tprotected ContentAssistEntry createProposal(StringConcatenationClient template, ContentAssistContext context,\n+\t\t\tboolean adaptIndentation) {\n+\t\tContentAssistEntry entry = new ContentAssistEntry();\n+\t\tentry.setPrefix(context.getPrefix());\n+\t\tTemplateStringConcatenation stringConcat = new TemplateStringConcatenation(context, entry, getLineDelimiter());\n+\t\tString indentation = null;\n+\t\tif (adaptIndentation) {\n+\t\t\tindentation = getIndentation(context);\n+\t\t}\n+\t\tif (indentation == null) {\n+\t\t\tstringConcat.append(template);\n+\t\t} else {\n+\t\t\tstringConcat.append(template, indentation);\n+\t\t}\n+\t\tentry.setProposal(stringConcat.toString());\n+\t\treturn entry;\n+\t}\n+\n+\tprotected String getLineDelimiter() {\n+\t\treturn StringConcatenation.DEFAULT_LINE_DELIMITER;\n+\t}\n+\n+\tprotected String getIndentation(ContentAssistContext context) {\n+\t\tString text = null;\n+\t\tif (context.getRootNode() != null) {\n+\t\t\ttext = context.getRootNode().getText();\n+\t\t}\n+\t\tif (text != null && text.length() >= context.getOffset()) {\n+\t\t\tint lineStart = context.getReplaceRegion().getOffset();\n+\t\t\tint indentEnd = lineStart;\n+\t\t\twhile (lineStart > 0 && text.charAt(lineStart - 1) != \"\\n\".charAt(0)) {", "originalCommit": "f4803d68dc3b29c49a734e27ea9b6fc5bb527e23", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0cd7d04e0b607fe3977b99c363e8b0ff22e9654f", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/AbstractIdeTemplateProposalProvider.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/AbstractIdeTemplateProposalProvider.java\nindex b712bf458..c12d94771 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/AbstractIdeTemplateProposalProvider.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/AbstractIdeTemplateProposalProvider.java\n\n@@ -19,14 +19,21 @@ import com.google.inject.Inject;\n  * Base class for adding template proposals from an {@link IdeContentProposalProvider} implementation. Use\n  * {@link #variable(String)} and {@link #cursor()} to generate edit positions and an exit position into the proposal,\n  * e.g.\n- * \n  * <pre>\n- * val StringConcatenationClient template = '''\n- *     state variable('name')\n- *         cursor\n- *     end\n- * '''\n- * acceptProposal('state', 'Create a new state', template, context, acceptor)\n+ * StringConcatenationClient template = new StringConcatenationClient() {\n+ *      {@literal @}Override\n+ *      protected void appendTo(StringConcatenationClient.TargetStringConcatenation target) {\n+ *          target.append(\"state \");\n+ *          target.append(variable(\"name\"));\n+ *          target.newLineIfNotEmpty();\n+ *          target.append(\"\\t\");\n+ *          target.append(cursor(), \"\\t\");\n+ *          target.newLineIfNotEmpty();\n+ *          target.append(\"end\");\n+ *          target.newLine();\n+ *      }\n+ * };\n+ * acceptProposal(\"state\", \"Create a new state\", template, context, acceptor);\n  * </pre>\n  * \n  * @since 2.10\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg0NTc4Ng==", "url": "https://github.com/eclipse/xtext-core/pull/1461#discussion_r417845786", "bodyText": "Is there another module in this package that requires the qualified name? I see no conflicts in the imports", "author": "tivervac", "createdAt": "2020-04-30T08:33:55Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ServerLauncher.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.server;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n+import java.util.concurrent.Future;\n+\n+import org.eclipse.lsp4j.jsonrpc.Launcher;\n+import org.eclipse.lsp4j.services.LanguageClient;\n+import org.eclipse.xtext.xbase.lib.Exceptions;\n+import org.eclipse.xtext.xbase.lib.InputOutput;\n+\n+import com.google.common.base.Objects;\n+import com.google.common.io.ByteStreams;\n+import com.google.inject.Guice;\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author Sven Efftinge - Initial contribution and API\n+ * @since 2.11\n+ */\n+public class ServerLauncher {\n+\tpublic static final String LOG = \"-log\";\n+\n+\tpublic static final String TRACE = \"-trace\";\n+\n+\tpublic static final String NO_VALIDATE = \"-noValidate\";\n+\n+\tpublic static void main(String[] args) {\n+\t\tServerLauncher.launch(ServerLauncher.class.getName(), args, new ServerModule());\n+\t}\n+\n+\tpublic static void launch(String prefix, String[] args, com.google.inject.Module... modules) {", "originalCommit": "f4803d68dc3b29c49a734e27ea9b6fc5bb527e23", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg2Mjc3NA==", "url": "https://github.com/eclipse/xtext-core/pull/1461#discussion_r417862774", "bodyText": "this is preemptive java 9 compatible code", "author": "cdietrich", "createdAt": "2020-04-30T09:02:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg0NTc4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "0cd7d04e0b607fe3977b99c363e8b0ff22e9654f", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ServerLauncher.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ServerLauncher.java\nindex cd1e81c9c..3687a2d72 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ServerLauncher.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ServerLauncher.java\n\n@@ -51,16 +51,16 @@ public class ServerLauncher {\n \t@Inject\n \tprivate LanguageServerImpl languageServer;\n \n-\tpublic void start(LaunchArgs it) {\n+\tpublic void start(LaunchArgs args) {\n \t\ttry {\n \t\t\tInputOutput.println(\"Xtext Language Server is starting.\");\n \t\t\tLauncher<LanguageClient> launcher = Launcher.createLauncher(languageServer,\n-\t\t\t\t\tLanguageClient.class, it.getIn(), it.getOut(), it.isValidate(), it.getTrace());\n+\t\t\t\t\tLanguageClient.class, args.getIn(), args.getOut(), args.isValidate(), args.getTrace());\n \t\t\tlanguageServer.connect(launcher.getRemoteProxy());\n \t\t\tFuture<Void> future = launcher.startListening();\n \t\t\tInputOutput.println(\"Xtext Language Server has been started.\");\n \t\t\twhile (!future.isDone()) {\n-\t\t\t\tThread.sleep(10_000l);\n+\t\t\t\tThread.sleep(10_000L);\n \t\t\t}\n \t\t} catch (InterruptedException e) {\n \t\t\tthrow Exceptions.sneakyThrow(e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg0NjE0Nw==", "url": "https://github.com/eclipse/xtext-core/pull/1461#discussion_r417846147", "bodyText": "I'd prefer a better var name e.g. args", "author": "tivervac", "createdAt": "2020-04-30T08:34:34Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ServerLauncher.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.server;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n+import java.util.concurrent.Future;\n+\n+import org.eclipse.lsp4j.jsonrpc.Launcher;\n+import org.eclipse.lsp4j.services.LanguageClient;\n+import org.eclipse.xtext.xbase.lib.Exceptions;\n+import org.eclipse.xtext.xbase.lib.InputOutput;\n+\n+import com.google.common.base.Objects;\n+import com.google.common.io.ByteStreams;\n+import com.google.inject.Guice;\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author Sven Efftinge - Initial contribution and API\n+ * @since 2.11\n+ */\n+public class ServerLauncher {\n+\tpublic static final String LOG = \"-log\";\n+\n+\tpublic static final String TRACE = \"-trace\";\n+\n+\tpublic static final String NO_VALIDATE = \"-noValidate\";\n+\n+\tpublic static void main(String[] args) {\n+\t\tServerLauncher.launch(ServerLauncher.class.getName(), args, new ServerModule());\n+\t}\n+\n+\tpublic static void launch(String prefix, String[] args, com.google.inject.Module... modules) {\n+\t\tLaunchArgs launchArgs = ServerLauncher.createLaunchArgs(prefix, args);\n+\t\tServerLauncher launcher = Guice.createInjector(modules).<ServerLauncher>getInstance(ServerLauncher.class);\n+\t\tlauncher.start(launchArgs);\n+\t}\n+\n+\t@Inject\n+\tprivate LanguageServerImpl languageServer;\n+\n+\tpublic void start(LaunchArgs it) {", "originalCommit": "f4803d68dc3b29c49a734e27ea9b6fc5bb527e23", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0cd7d04e0b607fe3977b99c363e8b0ff22e9654f", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ServerLauncher.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ServerLauncher.java\nindex cd1e81c9c..3687a2d72 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ServerLauncher.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ServerLauncher.java\n\n@@ -51,16 +51,16 @@ public class ServerLauncher {\n \t@Inject\n \tprivate LanguageServerImpl languageServer;\n \n-\tpublic void start(LaunchArgs it) {\n+\tpublic void start(LaunchArgs args) {\n \t\ttry {\n \t\t\tInputOutput.println(\"Xtext Language Server is starting.\");\n \t\t\tLauncher<LanguageClient> launcher = Launcher.createLauncher(languageServer,\n-\t\t\t\t\tLanguageClient.class, it.getIn(), it.getOut(), it.isValidate(), it.getTrace());\n+\t\t\t\t\tLanguageClient.class, args.getIn(), args.getOut(), args.isValidate(), args.getTrace());\n \t\t\tlanguageServer.connect(launcher.getRemoteProxy());\n \t\t\tFuture<Void> future = launcher.startListening();\n \t\t\tInputOutput.println(\"Xtext Language Server has been started.\");\n \t\t\twhile (!future.isDone()) {\n-\t\t\t\tThread.sleep(10_000l);\n+\t\t\t\tThread.sleep(10_000L);\n \t\t\t}\n \t\t} catch (InterruptedException e) {\n \t\t\tthrow Exceptions.sneakyThrow(e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg0NjIzMQ==", "url": "https://github.com/eclipse/xtext-core/pull/1461#discussion_r417846231", "bodyText": "Capital L", "author": "tivervac", "createdAt": "2020-04-30T08:34:42Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ServerLauncher.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.server;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n+import java.util.concurrent.Future;\n+\n+import org.eclipse.lsp4j.jsonrpc.Launcher;\n+import org.eclipse.lsp4j.services.LanguageClient;\n+import org.eclipse.xtext.xbase.lib.Exceptions;\n+import org.eclipse.xtext.xbase.lib.InputOutput;\n+\n+import com.google.common.base.Objects;\n+import com.google.common.io.ByteStreams;\n+import com.google.inject.Guice;\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author Sven Efftinge - Initial contribution and API\n+ * @since 2.11\n+ */\n+public class ServerLauncher {\n+\tpublic static final String LOG = \"-log\";\n+\n+\tpublic static final String TRACE = \"-trace\";\n+\n+\tpublic static final String NO_VALIDATE = \"-noValidate\";\n+\n+\tpublic static void main(String[] args) {\n+\t\tServerLauncher.launch(ServerLauncher.class.getName(), args, new ServerModule());\n+\t}\n+\n+\tpublic static void launch(String prefix, String[] args, com.google.inject.Module... modules) {\n+\t\tLaunchArgs launchArgs = ServerLauncher.createLaunchArgs(prefix, args);\n+\t\tServerLauncher launcher = Guice.createInjector(modules).<ServerLauncher>getInstance(ServerLauncher.class);\n+\t\tlauncher.start(launchArgs);\n+\t}\n+\n+\t@Inject\n+\tprivate LanguageServerImpl languageServer;\n+\n+\tpublic void start(LaunchArgs it) {\n+\t\ttry {\n+\t\t\tInputOutput.println(\"Xtext Language Server is starting.\");\n+\t\t\tLauncher<LanguageClient> launcher = Launcher.createLauncher(languageServer,\n+\t\t\t\t\tLanguageClient.class, it.getIn(), it.getOut(), it.isValidate(), it.getTrace());\n+\t\t\tlanguageServer.connect(launcher.getRemoteProxy());\n+\t\t\tFuture<Void> future = launcher.startListening();\n+\t\t\tInputOutput.println(\"Xtext Language Server has been started.\");\n+\t\t\twhile (!future.isDone()) {\n+\t\t\t\tThread.sleep(10_000l);", "originalCommit": "f4803d68dc3b29c49a734e27ea9b6fc5bb527e23", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0cd7d04e0b607fe3977b99c363e8b0ff22e9654f", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ServerLauncher.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ServerLauncher.java\nindex cd1e81c9c..3687a2d72 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ServerLauncher.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ServerLauncher.java\n\n@@ -51,16 +51,16 @@ public class ServerLauncher {\n \t@Inject\n \tprivate LanguageServerImpl languageServer;\n \n-\tpublic void start(LaunchArgs it) {\n+\tpublic void start(LaunchArgs args) {\n \t\ttry {\n \t\t\tInputOutput.println(\"Xtext Language Server is starting.\");\n \t\t\tLauncher<LanguageClient> launcher = Launcher.createLauncher(languageServer,\n-\t\t\t\t\tLanguageClient.class, it.getIn(), it.getOut(), it.isValidate(), it.getTrace());\n+\t\t\t\t\tLanguageClient.class, args.getIn(), args.getOut(), args.isValidate(), args.getTrace());\n \t\t\tlanguageServer.connect(launcher.getRemoteProxy());\n \t\t\tFuture<Void> future = launcher.startListening();\n \t\t\tInputOutput.println(\"Xtext Language Server has been started.\");\n \t\t\twhile (!future.isDone()) {\n-\t\t\t\tThread.sleep(10_000l);\n+\t\t\t\tThread.sleep(10_000L);\n \t\t\t}\n \t\t} catch (InterruptedException e) {\n \t\t\tthrow Exceptions.sneakyThrow(e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg0NjYzOA==", "url": "https://github.com/eclipse/xtext-core/pull/1461#discussion_r417846638", "bodyText": "s/vie/via/", "author": "tivervac", "createdAt": "2020-04-30T08:35:22Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/SocketServerLauncher.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/**\n+ * Copyright (c) 2019, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.server;\n+\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.nio.channels.AsynchronousServerSocketChannel;\n+import java.nio.channels.AsynchronousSocketChannel;\n+import java.nio.channels.Channels;\n+\n+import org.apache.log4j.Logger;\n+import org.eclipse.lsp4j.jsonrpc.Launcher;\n+import org.eclipse.lsp4j.services.LanguageClient;\n+import org.eclipse.xtext.xbase.lib.ArrayExtensions;\n+\n+import com.google.common.base.Objects;\n+import com.google.inject.Guice;\n+import com.google.inject.Injector;\n+\n+/**\n+ * Allows to launch a language server vie a server socket.", "originalCommit": "f4803d68dc3b29c49a734e27ea9b6fc5bb527e23", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0cd7d04e0b607fe3977b99c363e8b0ff22e9654f", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/SocketServerLauncher.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/SocketServerLauncher.java\nindex 347795116..de8dd0d9d 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/SocketServerLauncher.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/SocketServerLauncher.java\n\n@@ -26,7 +26,7 @@ import com.google.inject.Guice;\n import com.google.inject.Injector;\n \n /**\n- * Allows to launch a language server vie a server socket.\n+ * Allows to launch a language server via a server socket.\n  * \n  * Useful for debugging live language servers.\n  * \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg0Njk2Nw==", "url": "https://github.com/eclipse/xtext-core/pull/1461#discussion_r417846967", "bodyText": "No need for the qualified name, this happens a few time in the file.", "author": "tivervac", "createdAt": "2020-04-30T08:35:57Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/SocketServerLauncher.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/**\n+ * Copyright (c) 2019, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.server;\n+\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.nio.channels.AsynchronousServerSocketChannel;\n+import java.nio.channels.AsynchronousSocketChannel;\n+import java.nio.channels.Channels;\n+\n+import org.apache.log4j.Logger;\n+import org.eclipse.lsp4j.jsonrpc.Launcher;\n+import org.eclipse.lsp4j.services.LanguageClient;\n+import org.eclipse.xtext.xbase.lib.ArrayExtensions;\n+\n+import com.google.common.base.Objects;\n+import com.google.inject.Guice;\n+import com.google.inject.Injector;\n+\n+/**\n+ * Allows to launch a language server vie a server socket.\n+ * \n+ * Useful for debugging live language servers.\n+ * \n+ * @author Jan K&ouml;hnlein - Initial contribution and API\n+ * @since 2.18\n+ */\n+public class SocketServerLauncher {\n+\n+\tprivate static final Logger LOG = Logger.getLogger(SocketServerLauncher.class);\n+\tpublic static final String HOST = \"-host\";\n+\n+\tpublic static final String PORT = \"-port\";\n+\n+\tpublic static final String TRACE = \"-trace\";\n+\n+\tpublic static final String NO_VALIDATE = \"-noValidate\";\n+\n+\tpublic static final int DEFAULT_PORT = 5008;\n+\n+\tpublic static final String DEFAULT_HOST = \"0.0.0.0\";\n+\n+\tpublic static void main(String[] args) {\n+\t\tnew SocketServerLauncher().launch(args);\n+\t}\n+\n+\tpublic void launch(String[] args) {\n+\t\tInjector injector = Guice.createInjector(getServerModule());\n+\t\ttry (AsynchronousServerSocketChannel serverSocket = AsynchronousServerSocketChannel.open()\n+\t\t\t\t.bind(getSocketAddress(args))) {\n+\t\t\tSocketServerLauncher.LOG.info(\"Started server socket at \" + getSocketAddress(args));", "originalCommit": "f4803d68dc3b29c49a734e27ea9b6fc5bb527e23", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0cd7d04e0b607fe3977b99c363e8b0ff22e9654f", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/SocketServerLauncher.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/SocketServerLauncher.java\nindex 347795116..de8dd0d9d 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/SocketServerLauncher.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/SocketServerLauncher.java\n\n@@ -26,7 +26,7 @@ import com.google.inject.Guice;\n import com.google.inject.Injector;\n \n /**\n- * Allows to launch a language server vie a server socket.\n+ * Allows to launch a language server via a server socket.\n  * \n  * Useful for debugging live language servers.\n  * \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg0NzE4Mg==", "url": "https://github.com/eclipse/xtext-core/pull/1461#discussion_r417847182", "bodyText": "Is this really a name conflict?", "author": "tivervac", "createdAt": "2020-04-30T08:36:20Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/SocketServerLauncher.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/**\n+ * Copyright (c) 2019, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.server;\n+\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.nio.channels.AsynchronousServerSocketChannel;\n+import java.nio.channels.AsynchronousSocketChannel;\n+import java.nio.channels.Channels;\n+\n+import org.apache.log4j.Logger;\n+import org.eclipse.lsp4j.jsonrpc.Launcher;\n+import org.eclipse.lsp4j.services.LanguageClient;\n+import org.eclipse.xtext.xbase.lib.ArrayExtensions;\n+\n+import com.google.common.base.Objects;\n+import com.google.inject.Guice;\n+import com.google.inject.Injector;\n+\n+/**\n+ * Allows to launch a language server vie a server socket.\n+ * \n+ * Useful for debugging live language servers.\n+ * \n+ * @author Jan K&ouml;hnlein - Initial contribution and API\n+ * @since 2.18\n+ */\n+public class SocketServerLauncher {\n+\n+\tprivate static final Logger LOG = Logger.getLogger(SocketServerLauncher.class);\n+\tpublic static final String HOST = \"-host\";\n+\n+\tpublic static final String PORT = \"-port\";\n+\n+\tpublic static final String TRACE = \"-trace\";\n+\n+\tpublic static final String NO_VALIDATE = \"-noValidate\";\n+\n+\tpublic static final int DEFAULT_PORT = 5008;\n+\n+\tpublic static final String DEFAULT_HOST = \"0.0.0.0\";\n+\n+\tpublic static void main(String[] args) {\n+\t\tnew SocketServerLauncher().launch(args);\n+\t}\n+\n+\tpublic void launch(String[] args) {\n+\t\tInjector injector = Guice.createInjector(getServerModule());\n+\t\ttry (AsynchronousServerSocketChannel serverSocket = AsynchronousServerSocketChannel.open()\n+\t\t\t\t.bind(getSocketAddress(args))) {\n+\t\t\tSocketServerLauncher.LOG.info(\"Started server socket at \" + getSocketAddress(args));\n+\t\t\twhile (true) {\n+\t\t\t\tAsynchronousSocketChannel socketChannel = serverSocket.accept().get();\n+\t\t\t\tInputStream in = Channels.newInputStream(socketChannel);\n+\t\t\t\tOutputStream out = Channels.newOutputStream(socketChannel);\n+\t\t\t\tPrintWriter trace = getTrace(args);\n+\t\t\t\tboolean validate = shouldValidate(args);\n+\t\t\t\tLanguageServerImpl languageServer = injector.getInstance(LanguageServerImpl.class);\n+\t\t\t\tSocketServerLauncher.LOG\n+\t\t\t\t\t\t.info(\"Starting Xtext Language Server for client \" + socketChannel.getRemoteAddress());\n+\t\t\t\tLauncher<LanguageClient> launcher = Launcher.createLauncher(languageServer, LanguageClient.class, in,\n+\t\t\t\t\t\tout, validate, trace);\n+\t\t\t\tlanguageServer.connect(launcher.getRemoteProxy());\n+\t\t\t\tlauncher.startListening();\n+\t\t\t\tSocketServerLauncher.LOG.info(\"Xtext Language Server has been started.\");\n+\t\t\t}\n+\t\t} catch (Throwable t) {\n+\t\t\tt.printStackTrace();\n+\t\t}\n+\t}\n+\n+\tprotected com.google.inject.Module getServerModule() {", "originalCommit": "f4803d68dc3b29c49a734e27ea9b6fc5bb527e23", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg3Mzg0MA==", "url": "https://github.com/eclipse/xtext-core/pull/1461#discussion_r417873840", "bodyText": "see java 9 readiness", "author": "cdietrich", "createdAt": "2020-04-30T09:21:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg0NzE4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "0cd7d04e0b607fe3977b99c363e8b0ff22e9654f", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/SocketServerLauncher.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/SocketServerLauncher.java\nindex 347795116..de8dd0d9d 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/SocketServerLauncher.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/SocketServerLauncher.java\n\n@@ -26,7 +26,7 @@ import com.google.inject.Guice;\n import com.google.inject.Injector;\n \n /**\n- * Allows to launch a language server vie a server socket.\n+ * Allows to launch a language server via a server socket.\n  * \n  * Useful for debugging live language servers.\n  * \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg0Nzc4Ng==", "url": "https://github.com/eclipse/xtext-core/pull/1461#discussion_r417847786", "bodyText": "Copyright", "author": "tivervac", "createdAt": "2020-04-30T08:37:20Z", "path": "org.eclipse.xtext.testing/src/org/eclipse/xtext/testing/TextDocumentConfiguration.java", "diffHunk": "@@ -12,7 +12,6 @@\n import java.util.Map;\n \n import org.eclipse.lsp4j.InitializeParams;\n-import org.eclipse.xtext.xbase.lib.CollectionLiterals;\n import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;", "originalCommit": "f4803d68dc3b29c49a734e27ea9b6fc5bb527e23", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg0OTM2Mg==", "url": "https://github.com/eclipse/xtext-core/pull/1461#discussion_r417849362", "bodyText": "This does nothing in Java", "author": "tivervac", "createdAt": "2020-04-30T08:40:10Z", "path": "org.eclipse.xtext.xtext.wizard/src/org/eclipse/xtext/xtext/wizard/cli/CliProjectsCreator.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xtext.wizard.cli;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.eclipse.xtend.lib.annotations.Accessors;\n+import org.eclipse.xtext.util.Strings;\n+import org.eclipse.xtext.xbase.lib.Exceptions;\n+import org.eclipse.xtext.xtext.wizard.AbstractFile;\n+import org.eclipse.xtext.xtext.wizard.BinaryFile;\n+import org.eclipse.xtext.xtext.wizard.ProjectDescriptor;\n+import org.eclipse.xtext.xtext.wizard.ProjectsCreator;\n+import org.eclipse.xtext.xtext.wizard.SourceFolderDescriptor;\n+import org.eclipse.xtext.xtext.wizard.TextFile;\n+import org.eclipse.xtext.xtext.wizard.WizardConfiguration;\n+\n+import com.google.common.io.Files;\n+import com.google.common.io.Resources;\n+\n+public class CliProjectsCreator implements ProjectsCreator {\n+\t@Accessors", "originalCommit": "f4803d68dc3b29c49a734e27ea9b6fc5bb527e23", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0cd7d04e0b607fe3977b99c363e8b0ff22e9654f", "chunk": "diff --git a/org.eclipse.xtext.xtext.wizard/src/org/eclipse/xtext/xtext/wizard/cli/CliProjectsCreator.java b/org.eclipse.xtext.xtext.wizard/src/org/eclipse/xtext/xtext/wizard/cli/CliProjectsCreator.java\nindex a53286fa3..edf43d0b4 100644\n--- a/org.eclipse.xtext.xtext.wizard/src/org/eclipse/xtext/xtext/wizard/cli/CliProjectsCreator.java\n+++ b/org.eclipse.xtext.xtext.wizard/src/org/eclipse/xtext/xtext/wizard/cli/CliProjectsCreator.java\n\n@@ -11,7 +11,6 @@ package org.eclipse.xtext.xtext.wizard.cli;\n import java.io.File;\n import java.io.IOException;\n \n-import org.eclipse.xtend.lib.annotations.Accessors;\n import org.eclipse.xtext.util.Strings;\n import org.eclipse.xtext.xbase.lib.Exceptions;\n import org.eclipse.xtext.xtext.wizard.AbstractFile;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg0OTY5MA==", "url": "https://github.com/eclipse/xtext-core/pull/1461#discussion_r417849690", "bodyText": "Preconditions that lineDelimiter is set would be nice.", "author": "tivervac", "createdAt": "2020-04-30T08:40:50Z", "path": "org.eclipse.xtext.xtext.wizard/src/org/eclipse/xtext/xtext/wizard/cli/CliProjectsCreator.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xtext.wizard.cli;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.eclipse.xtend.lib.annotations.Accessors;\n+import org.eclipse.xtext.util.Strings;\n+import org.eclipse.xtext.xbase.lib.Exceptions;\n+import org.eclipse.xtext.xtext.wizard.AbstractFile;\n+import org.eclipse.xtext.xtext.wizard.BinaryFile;\n+import org.eclipse.xtext.xtext.wizard.ProjectDescriptor;\n+import org.eclipse.xtext.xtext.wizard.ProjectsCreator;\n+import org.eclipse.xtext.xtext.wizard.SourceFolderDescriptor;\n+import org.eclipse.xtext.xtext.wizard.TextFile;\n+import org.eclipse.xtext.xtext.wizard.WizardConfiguration;\n+\n+import com.google.common.io.Files;\n+import com.google.common.io.Resources;\n+\n+public class CliProjectsCreator implements ProjectsCreator {\n+\t@Accessors\n+\tprivate String lineDelimiter;\n+\n+\t@Override\n+\tpublic void createProjects(WizardConfiguration config) {\n+\t\tfor (ProjectDescriptor p : config.getEnabledProjects()) {\n+\t\t\tcreateProject(p);\n+\t\t}\n+\t}\n+\n+\tpublic void createProject(ProjectDescriptor project) {\n+\t\ttry {\n+\t\t\tFile projectRoot = new File(project.getLocation());", "originalCommit": "f4803d68dc3b29c49a734e27ea9b6fc5bb527e23", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0cd7d04e0b607fe3977b99c363e8b0ff22e9654f", "chunk": "diff --git a/org.eclipse.xtext.xtext.wizard/src/org/eclipse/xtext/xtext/wizard/cli/CliProjectsCreator.java b/org.eclipse.xtext.xtext.wizard/src/org/eclipse/xtext/xtext/wizard/cli/CliProjectsCreator.java\nindex a53286fa3..edf43d0b4 100644\n--- a/org.eclipse.xtext.xtext.wizard/src/org/eclipse/xtext/xtext/wizard/cli/CliProjectsCreator.java\n+++ b/org.eclipse.xtext.xtext.wizard/src/org/eclipse/xtext/xtext/wizard/cli/CliProjectsCreator.java\n\n@@ -11,7 +11,6 @@ package org.eclipse.xtext.xtext.wizard.cli;\n import java.io.File;\n import java.io.IOException;\n \n-import org.eclipse.xtend.lib.annotations.Accessors;\n import org.eclipse.xtext.util.Strings;\n import org.eclipse.xtext.xbase.lib.Exceptions;\n import org.eclipse.xtext.xtext.wizard.AbstractFile;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg1MDk5NQ==", "url": "https://github.com/eclipse/xtext-core/pull/1461#discussion_r417850995", "bodyText": "I remember discussing before to wrap this in a regular RuntimeException.\nDon't remember if this had the same behaviour.", "author": "tivervac", "createdAt": "2020-04-30T08:42:58Z", "path": "org.eclipse.xtext.xtext.wizard/src/org/eclipse/xtext/xtext/wizard/cli/CliProjectsCreator.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xtext.wizard.cli;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.eclipse.xtend.lib.annotations.Accessors;\n+import org.eclipse.xtext.util.Strings;\n+import org.eclipse.xtext.xbase.lib.Exceptions;\n+import org.eclipse.xtext.xtext.wizard.AbstractFile;\n+import org.eclipse.xtext.xtext.wizard.BinaryFile;\n+import org.eclipse.xtext.xtext.wizard.ProjectDescriptor;\n+import org.eclipse.xtext.xtext.wizard.ProjectsCreator;\n+import org.eclipse.xtext.xtext.wizard.SourceFolderDescriptor;\n+import org.eclipse.xtext.xtext.wizard.TextFile;\n+import org.eclipse.xtext.xtext.wizard.WizardConfiguration;\n+\n+import com.google.common.io.Files;\n+import com.google.common.io.Resources;\n+\n+public class CliProjectsCreator implements ProjectsCreator {\n+\t@Accessors\n+\tprivate String lineDelimiter;\n+\n+\t@Override\n+\tpublic void createProjects(WizardConfiguration config) {\n+\t\tfor (ProjectDescriptor p : config.getEnabledProjects()) {\n+\t\t\tcreateProject(p);\n+\t\t}\n+\t}\n+\n+\tpublic void createProject(ProjectDescriptor project) {\n+\t\ttry {\n+\t\t\tFile projectRoot = new File(project.getLocation());\n+\t\t\tprojectRoot.mkdirs();\n+\t\t\tfor (AbstractFile f : project.getFiles()) {\n+\t\t\t\tString outletPath = project.getConfig().getSourceLayout().getPathFor(f.getOutlet());\n+\t\t\t\tString projectRelativePath = outletPath + \"/\" + f.getRelativePath();\n+\t\t\t\tFile file = new File(projectRoot, projectRelativePath);\n+\t\t\t\tfile.getParentFile().mkdirs();\n+\t\t\t\tif (f instanceof TextFile) {\n+\t\t\t\t\tString normalizedContent = ((TextFile) f).getContent().replace(Strings.newLine(),\n+\t\t\t\t\t\t\tlineDelimiter);\n+\t\t\t\t\tFiles.asCharSink(file, project.getConfig().getEncoding()).write(normalizedContent);\n+\t\t\t\t} else if (f instanceof BinaryFile) {\n+\t\t\t\t\tFiles.write(Resources.toByteArray(((BinaryFile) f).getContent()), file);\n+\t\t\t\t}\n+\t\t\t\tif (f.isExecutable()) {\n+\t\t\t\t\tfile.setExecutable(true);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tfor (SourceFolderDescriptor folder : project.getSourceFolders()) {\n+\t\t\t\tnew File(projectRoot, folder.getPath()).mkdirs();\n+\t\t\t}\n+\t\t} catch (IOException e) {\n+\t\t\tthrow Exceptions.sneakyThrow(e);", "originalCommit": "f4803d68dc3b29c49a734e27ea9b6fc5bb527e23", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg5MDM5MQ==", "url": "https://github.com/eclipse/xtext-core/pull/1461#discussion_r417890391", "bodyText": "now it just casts. did not want to change behaviour", "author": "cdietrich", "createdAt": "2020-04-30T09:50:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg1MDk5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "0cd7d04e0b607fe3977b99c363e8b0ff22e9654f", "chunk": "diff --git a/org.eclipse.xtext.xtext.wizard/src/org/eclipse/xtext/xtext/wizard/cli/CliProjectsCreator.java b/org.eclipse.xtext.xtext.wizard/src/org/eclipse/xtext/xtext/wizard/cli/CliProjectsCreator.java\nindex a53286fa3..edf43d0b4 100644\n--- a/org.eclipse.xtext.xtext.wizard/src/org/eclipse/xtext/xtext/wizard/cli/CliProjectsCreator.java\n+++ b/org.eclipse.xtext.xtext.wizard/src/org/eclipse/xtext/xtext/wizard/cli/CliProjectsCreator.java\n\n@@ -11,7 +11,6 @@ package org.eclipse.xtext.xtext.wizard.cli;\n import java.io.File;\n import java.io.IOException;\n \n-import org.eclipse.xtend.lib.annotations.Accessors;\n import org.eclipse.xtext.util.Strings;\n import org.eclipse.xtext.xbase.lib.Exceptions;\n import org.eclipse.xtext.xtext.wizard.AbstractFile;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg3NjY2Mw==", "url": "https://github.com/eclipse/xtext-core/pull/1461#discussion_r417876663", "bodyText": "Unnecessary qualified invocation of local method", "author": "szarnekow", "createdAt": "2020-04-30T09:26:11Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ServerLauncher.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.server;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n+import java.util.concurrent.Future;\n+\n+import org.eclipse.lsp4j.jsonrpc.Launcher;\n+import org.eclipse.lsp4j.services.LanguageClient;\n+import org.eclipse.xtext.xbase.lib.Exceptions;\n+import org.eclipse.xtext.xbase.lib.InputOutput;\n+\n+import com.google.common.base.Objects;\n+import com.google.common.io.ByteStreams;\n+import com.google.inject.Guice;\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author Sven Efftinge - Initial contribution and API\n+ * @since 2.11\n+ */\n+public class ServerLauncher {\n+\tpublic static final String LOG = \"-log\";\n+\n+\tpublic static final String TRACE = \"-trace\";\n+\n+\tpublic static final String NO_VALIDATE = \"-noValidate\";\n+\n+\tpublic static void main(String[] args) {\n+\t\tServerLauncher.launch(ServerLauncher.class.getName(), args, new ServerModule());\n+\t}\n+\n+\tpublic static void launch(String prefix, String[] args, com.google.inject.Module... modules) {\n+\t\tLaunchArgs launchArgs = ServerLauncher.createLaunchArgs(prefix, args);\n+\t\tServerLauncher launcher = Guice.createInjector(modules).<ServerLauncher>getInstance(ServerLauncher.class);\n+\t\tlauncher.start(launchArgs);\n+\t}\n+\n+\t@Inject\n+\tprivate LanguageServerImpl languageServer;\n+\n+\tpublic void start(LaunchArgs it) {\n+\t\ttry {\n+\t\t\tInputOutput.println(\"Xtext Language Server is starting.\");\n+\t\t\tLauncher<LanguageClient> launcher = Launcher.createLauncher(languageServer,\n+\t\t\t\t\tLanguageClient.class, it.getIn(), it.getOut(), it.isValidate(), it.getTrace());\n+\t\t\tlanguageServer.connect(launcher.getRemoteProxy());\n+\t\t\tFuture<Void> future = launcher.startListening();\n+\t\t\tInputOutput.println(\"Xtext Language Server has been started.\");\n+\t\t\twhile (!future.isDone()) {\n+\t\t\t\tThread.sleep(10_000l);\n+\t\t\t}\n+\t\t} catch (InterruptedException e) {\n+\t\t\tthrow Exceptions.sneakyThrow(e);\n+\t\t}\n+\t}\n+\n+\tpublic static LaunchArgs createLaunchArgs(String prefix, String[] args) {\n+\t\tLaunchArgs launchArgs = new LaunchArgs();\n+\t\tlaunchArgs.setIn(System.in);\n+\t\tlaunchArgs.setOut(System.out);\n+\t\tServerLauncher.redirectStandardStreams(prefix, args);\n+\t\tlaunchArgs.setTrace(ServerLauncher.getTrace(args));\n+\t\tlaunchArgs.setValidate(ServerLauncher.shouldValidate(args));\n+\t\treturn launchArgs;\n+\t}\n+\n+\tpublic static PrintWriter getTrace(String[] args) {\n+\t\tif (ServerLauncher.shouldTrace(args)) {\n+\t\t\treturn ServerLauncher.createTrace();\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n+\tpublic static PrintWriter createTrace() {\n+\t\treturn new PrintWriter(System.out);\n+\t}\n+\n+\tpublic static void redirectStandardStreams(String prefix, String[] args) {\n+\t\tif (ServerLauncher.shouldLogStandardStreams(args)) {\n+\t\t\tServerLauncher.logStandardStreams(prefix);\n+\t\t} else {\n+\t\t\tServerLauncher.silentStandardStreams();\n+\t\t}\n+\t}\n+\n+\tpublic static boolean shouldValidate(String[] args) {\n+\t\treturn !ServerLauncher.testArg(args, ServerLauncher.NO_VALIDATE);\n+\t}\n+\n+\tpublic static boolean shouldTrace(String[] args) {\n+\t\treturn ServerLauncher.testArg(args, ServerLauncher.TRACE);\n+\t}\n+\n+\tpublic static boolean shouldLogStandardStreams(String[] args) {\n+\t\treturn ServerLauncher.testArg(args, ServerLauncher.LOG, \"debug\");\n+\t}\n+\n+\tpublic static boolean testArg(String[] args, String... values) {\n+\t\tfor (String arg : args) {\n+\t\t\tif (ServerLauncher.testArg(arg, values)) {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n+\tpublic static boolean testArg(String arg, String... values) {\n+\t\tfor(String value : values) {\n+\t\t\tif (Objects.equal(value, arg)) {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n+\tpublic static void logStandardStreams(String prefix) {\n+\t\ttry {\n+\t\t\tFileOutputStream stdFileOut = new FileOutputStream(prefix + \"-debug.log\");\n+\t\t\tServerLauncher.redirectStandardStreams(stdFileOut);\n+\t\t} catch (IOException e) {\n+\t\t\tthrow Exceptions.sneakyThrow(e);\n+\t\t}\n+\t}\n+\n+\tpublic static void silentStandardStreams() {\n+\t\tServerLauncher.redirectStandardStreams(ServerLauncher.silentOut());\n+\t}\n+\n+\tpublic static void redirectStandardStreams(OutputStream out) {\n+\t\tServerLauncher.redirectStandardStreams(ServerLauncher.silentIn(), out);", "originalCommit": "f4803d68dc3b29c49a734e27ea9b6fc5bb527e23", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0cd7d04e0b607fe3977b99c363e8b0ff22e9654f", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ServerLauncher.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ServerLauncher.java\nindex cd1e81c9c..3687a2d72 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ServerLauncher.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ServerLauncher.java\n\n@@ -51,16 +51,16 @@ public class ServerLauncher {\n \t@Inject\n \tprivate LanguageServerImpl languageServer;\n \n-\tpublic void start(LaunchArgs it) {\n+\tpublic void start(LaunchArgs args) {\n \t\ttry {\n \t\t\tInputOutput.println(\"Xtext Language Server is starting.\");\n \t\t\tLauncher<LanguageClient> launcher = Launcher.createLauncher(languageServer,\n-\t\t\t\t\tLanguageClient.class, it.getIn(), it.getOut(), it.isValidate(), it.getTrace());\n+\t\t\t\t\tLanguageClient.class, args.getIn(), args.getOut(), args.isValidate(), args.getTrace());\n \t\t\tlanguageServer.connect(launcher.getRemoteProxy());\n \t\t\tFuture<Void> future = launcher.startListening();\n \t\t\tInputOutput.println(\"Xtext Language Server has been started.\");\n \t\t\twhile (!future.isDone()) {\n-\t\t\t\tThread.sleep(10_000l);\n+\t\t\t\tThread.sleep(10_000L);\n \t\t\t}\n \t\t} catch (InterruptedException e) {\n \t\t\tthrow Exceptions.sneakyThrow(e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg3NzU3Mg==", "url": "https://github.com/eclipse/xtext-core/pull/1461#discussion_r417877572", "bodyText": "The SocketServerLauncher prints the stacktrace instead.", "author": "szarnekow", "createdAt": "2020-04-30T09:27:45Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ServerLauncher.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.server;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n+import java.util.concurrent.Future;\n+\n+import org.eclipse.lsp4j.jsonrpc.Launcher;\n+import org.eclipse.lsp4j.services.LanguageClient;\n+import org.eclipse.xtext.xbase.lib.Exceptions;\n+import org.eclipse.xtext.xbase.lib.InputOutput;\n+\n+import com.google.common.base.Objects;\n+import com.google.common.io.ByteStreams;\n+import com.google.inject.Guice;\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author Sven Efftinge - Initial contribution and API\n+ * @since 2.11\n+ */\n+public class ServerLauncher {\n+\tpublic static final String LOG = \"-log\";\n+\n+\tpublic static final String TRACE = \"-trace\";\n+\n+\tpublic static final String NO_VALIDATE = \"-noValidate\";\n+\n+\tpublic static void main(String[] args) {\n+\t\tServerLauncher.launch(ServerLauncher.class.getName(), args, new ServerModule());\n+\t}\n+\n+\tpublic static void launch(String prefix, String[] args, com.google.inject.Module... modules) {\n+\t\tLaunchArgs launchArgs = ServerLauncher.createLaunchArgs(prefix, args);\n+\t\tServerLauncher launcher = Guice.createInjector(modules).<ServerLauncher>getInstance(ServerLauncher.class);\n+\t\tlauncher.start(launchArgs);\n+\t}\n+\n+\t@Inject\n+\tprivate LanguageServerImpl languageServer;\n+\n+\tpublic void start(LaunchArgs it) {\n+\t\ttry {\n+\t\t\tInputOutput.println(\"Xtext Language Server is starting.\");\n+\t\t\tLauncher<LanguageClient> launcher = Launcher.createLauncher(languageServer,\n+\t\t\t\t\tLanguageClient.class, it.getIn(), it.getOut(), it.isValidate(), it.getTrace());\n+\t\t\tlanguageServer.connect(launcher.getRemoteProxy());\n+\t\t\tFuture<Void> future = launcher.startListening();\n+\t\t\tInputOutput.println(\"Xtext Language Server has been started.\");\n+\t\t\twhile (!future.isDone()) {\n+\t\t\t\tThread.sleep(10_000l);\n+\t\t\t}\n+\t\t} catch (InterruptedException e) {\n+\t\t\tthrow Exceptions.sneakyThrow(e);", "originalCommit": "f4803d68dc3b29c49a734e27ea9b6fc5bb527e23", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk0NDkwNw==", "url": "https://github.com/eclipse/xtext-core/pull/1461#discussion_r417944907", "bodyText": "yes but that one does not stream redirect and craps\n=> want to keep as was for now", "author": "cdietrich", "createdAt": "2020-04-30T11:35:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg3NzU3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "0cd7d04e0b607fe3977b99c363e8b0ff22e9654f", "chunk": "diff --git a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ServerLauncher.java b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ServerLauncher.java\nindex cd1e81c9c..3687a2d72 100644\n--- a/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ServerLauncher.java\n+++ b/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ServerLauncher.java\n\n@@ -51,16 +51,16 @@ public class ServerLauncher {\n \t@Inject\n \tprivate LanguageServerImpl languageServer;\n \n-\tpublic void start(LaunchArgs it) {\n+\tpublic void start(LaunchArgs args) {\n \t\ttry {\n \t\t\tInputOutput.println(\"Xtext Language Server is starting.\");\n \t\t\tLauncher<LanguageClient> launcher = Launcher.createLauncher(languageServer,\n-\t\t\t\t\tLanguageClient.class, it.getIn(), it.getOut(), it.isValidate(), it.getTrace());\n+\t\t\t\t\tLanguageClient.class, args.getIn(), args.getOut(), args.isValidate(), args.getTrace());\n \t\t\tlanguageServer.connect(launcher.getRemoteProxy());\n \t\t\tFuture<Void> future = launcher.startListening();\n \t\t\tInputOutput.println(\"Xtext Language Server has been started.\");\n \t\t\twhile (!future.isDone()) {\n-\t\t\t\tThread.sleep(10_000l);\n+\t\t\t\tThread.sleep(10_000L);\n \t\t\t}\n \t\t} catch (InterruptedException e) {\n \t\t\tthrow Exceptions.sneakyThrow(e);\n"}}, {"oid": "0cd7d04e0b607fe3977b99c363e8b0ff22e9654f", "url": "https://github.com/eclipse/xtext-core/commit/0cd7d04e0b607fe3977b99c363e8b0ff22e9654f", "message": "[eclipse/xtext#1679]ported more code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-30T09:50:24Z", "type": "forcePushed"}, {"oid": "7b0d63dbd3f1e2eefa775b5cd3d18b8df5c51ff9", "url": "https://github.com/eclipse/xtext-core/commit/7b0d63dbd3f1e2eefa775b5cd3d18b8df5c51ff9", "message": "[eclipse/xtext#1679]ported more code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-30T11:41:11Z", "type": "commit"}, {"oid": "7b0d63dbd3f1e2eefa775b5cd3d18b8df5c51ff9", "url": "https://github.com/eclipse/xtext-core/commit/7b0d63dbd3f1e2eefa775b5cd3d18b8df5c51ff9", "message": "[eclipse/xtext#1679]ported more code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-30T11:41:11Z", "type": "forcePushed"}]}