{"pr_number": 249, "pr_title": "BLUEBUTTON-1948 PartD cursor paging", "pr_createdAt": "2020-04-06T04:12:04Z", "pr_url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/249", "timeline": [{"oid": "37b4214646bdd892fb6d20f5855367cf78f04f3a", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/37b4214646bdd892fb6d20f5855367cf78f04f3a", "message": "Rename PageLinkBuilder to OffsetLinkBuilder", "committedDate": "2020-04-03T17:50:12Z", "type": "commit"}, {"oid": "b7cf2bcc5469684e37427ed9529f681c28de8385", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/b7cf2bcc5469684e37427ed9529f681c28de8385", "message": "Create LinkBuilder base interface", "committedDate": "2020-04-03T18:24:25Z", "type": "commit"}, {"oid": "bd945da4cbc35bb1f2f2a5cfad59bb524217d8e4", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/bd945da4cbc35bb1f2f2a5cfad59bb524217d8e4", "message": "PatientLinkBuilder\n\n- No paging support\n- All tests passing", "committedDate": "2020-04-04T21:58:48Z", "type": "commit"}, {"oid": "de773ec82bdd0848ba16a35cce9deeadc741c907", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/de773ec82bdd0848ba16a35cce9deeadc741c907", "message": "Finish PatientLinkBuilder", "committedDate": "2020-04-05T22:33:25Z", "type": "commit"}, {"oid": "49639a7889a730517350fcbe9890ac0e71d4ab8f", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/49639a7889a730517350fcbe9890ac0e71d4ab8f", "message": "Fix total\n\n- Work around HAPI 1985 issue\n- Add QueryLogListener", "committedDate": "2020-04-06T04:09:47Z", "type": "commit"}, {"oid": "20c2bc427e067f824c2f165bc793a1d3399d2097", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/20c2bc427e067f824c2f165bc793a1d3399d2097", "message": "Disable debug SQL statement logging", "committedDate": "2020-04-06T04:11:14Z", "type": "commit"}, {"oid": "64ca474b15590b972d55940ad3438adb9ad36e61", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/64ca474b15590b972d55940ad3438adb9ad36e61", "message": "Moved setTotal to createBundle", "committedDate": "2020-04-06T04:30:52Z", "type": "commit"}, {"oid": "0d08b186b8fe1c2d58574cc1b2bea602345e531f", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/0d08b186b8fe1c2d58574cc1b2bea602345e531f", "message": "Improve testing", "committedDate": "2020-04-06T13:09:04Z", "type": "commit"}, {"oid": "952659094a3626b06ff6c4345669f8c76e7161ea", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/952659094a3626b06ff6c4345669f8c76e7161ea", "message": "Documented HAPI bug better", "committedDate": "2020-04-06T14:01:38Z", "type": "commit"}, {"oid": "d61f49860cc6f705797ad4221049e023f72b453c", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/d61f49860cc6f705797ad4221049e023f72b453c", "message": "Added an operation to seach by coverage contract", "committedDate": "2020-04-06T14:16:25Z", "type": "commit"}, {"oid": "95c4e3cfa0d139010d0e28bc488710761b450e5d", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/95c4e3cfa0d139010d0e28bc488710761b450e5d", "message": "Improve tests", "committedDate": "2020-04-06T14:27:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDEyNzE1Mg==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/249#discussion_r404127152", "bodyText": "New type of DB query for our logs.", "author": "RickHawesUSDS", "createdAt": "2020-04-06T14:17:55Z", "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/QueryLoggingListener.java", "diffHunk": "@@ -149,6 +149,12 @@ public void beforeQuery(ExecutionInfo execInfo, List<QueryInfo> queryInfoList) {\n                 && s.contains(\" join \")\n                 && s.contains(\"\\\"hicn\\\"=\"))),\n \n+    BENE_BY_COVERAGE(\n+        \"bene_by_coverage\",\n+        (s ->\n+            s.contains(\"from \\\"Beneficiaries\\\"\")\n+                && s.contains(\"where beneficiar0_.\\\"partDContractNumber\"))),\n+\n     EOBS_BY_BENE_ID_CARRIER(", "originalCommit": "0d08b186b8fe1c2d58574cc1b2bea602345e531f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDEyNzU2Nw==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/249#discussion_r404127567", "bodyText": "Renamed PageLinkBuilder but otherwise, it works the same as before.", "author": "RickHawesUSDS", "createdAt": "2020-04-06T14:18:25Z", "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/stu3/providers/CoverageResourceProvider.java", "diffHunk": "@@ -165,7 +165,7 @@ public Bundle searchByBeneficiary(\n       coverages = new LinkedList<IBaseResource>();\n     }\n \n-    PageLinkBuilder paging = new PageLinkBuilder(requestDetails, \"/Coverage?\");\n+    OffsetLinkBuilder paging = new OffsetLinkBuilder(requestDetails, \"/Coverage?\");\n ", "originalCommit": "0d08b186b8fe1c2d58574cc1b2bea602345e531f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDEzNTY3MQ==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/249#discussion_r404135671", "bodyText": "I'm initializing with a string vs RequestDetail because it makes it easier to test the class.", "author": "RickHawesUSDS", "createdAt": "2020-04-06T14:28:38Z", "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/stu3/providers/PatientLinkBuilder.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package gov.cms.bfd.server.war.stu3.providers;\n+\n+import ca.uhn.fhir.rest.api.Constants;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import java.util.List;\n+import org.hl7.fhir.dstu3.model.Bundle;\n+import org.hl7.fhir.dstu3.model.Bundle.BundleEntryComponent;\n+import org.hl7.fhir.dstu3.model.Patient;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.util.UriComponents;\n+import org.springframework.web.util.UriComponentsBuilder;\n+\n+/** A link builder for Patient resources using bene-id cursors */\n+public final class PatientLinkBuilder implements LinkBuilder {\n+  private final UriComponents components;\n+  private final Integer count;\n+  private final String cursor;\n+\n+  public static final String PARAM_CURSOR = \"cursor\";\n+\n+  public PatientLinkBuilder(String requestString) {\n+    components = UriComponentsBuilder.fromUriString(requestString).build();", "originalCommit": "0d08b186b8fe1c2d58574cc1b2bea602345e531f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDEzNjc1MA==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/249#discussion_r404136750", "bodyText": "This has been rearranged for clarity.", "author": "RickHawesUSDS", "createdAt": "2020-04-06T14:30:02Z", "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/stu3/providers/PatientResourceProvider.java", "diffHunk": "@@ -240,39 +239,17 @@ public Bundle searchByCoverageContract(\n       @RequiredParam(name = \"_has:Coverage.extension\")\n           @Description(shortDefinition = \"Part D coverage type\")\n           TokenParam coverageId,\n-      @OptionalParam(name = \"startIndex\")\n-          @Description(shortDefinition = \"The offset used for result pagination\")\n-          String startIndex,\n+      @OptionalParam(name = \"cursor\")\n+          @Description(shortDefinition = \"The cursor used for result pagination\")\n+          String cursor,\n       RequestDetails requestDetails) {\n-\n-    if (coverageId.getQueryParameterQualifier() != null)\n-      throw new InvalidRequestException(\n-          \"Unsupported query parameter qualifier: \" + coverageId.getQueryParameterQualifier());\n-\n-    String contractCode = coverageId.getValueNotNull();\n-    if (contractCode.length() != 5)\n-      throw new InvalidRequestException(\"Unsupported query parameter value: \" + contractCode);\n-\n-    String contractMonth =\n-        coverageId.getSystem().substring(coverageId.getSystem().lastIndexOf('/') + 1);\n-    CcwCodebookVariable partDContractMonth = partDCwVariableFor(contractMonth);\n-    SingularAttribute<Beneficiary, String> contractMonthField = partDFieldFor(partDContractMonth);\n-\n+    checkCoverageId(coverageId);", "originalCommit": "0d08b186b8fe1c2d58574cc1b2bea602345e531f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDEzOTA4Nw==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/249#discussion_r404139087", "bodyText": "For readability, I'm trying make this code follow SQL somewhat. b is used as a table alias would be used in a SQL statement.", "author": "RickHawesUSDS", "createdAt": "2020-04-06T14:32:49Z", "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/stu3/providers/PatientResourceProvider.java", "diffHunk": "@@ -337,51 +314,65 @@ private CcwCodebookVariable partDCwVariableFor(String system) {\n         \"Unsupported extension system: \" + cntrctMonth.getVariable().getId().toLowerCase());\n   }\n \n-  private Long fetchResultCount(CriteriaQuery criteria) {\n-    Predicate restriction = criteria.getRestriction();\n-    CriteriaBuilder builder = entityManager.getCriteriaBuilder();\n-    CriteriaQuery<Long> countQuery = builder.createQuery(Long.class);\n-    countQuery.where(restriction);\n-    return entityManager\n-        .createQuery(countQuery.select(builder.count(countQuery.from(Beneficiary.class))))\n-        .getSingleResult();\n-  }\n-\n-  private List<Beneficiary> fetchBeneficiaries(CriteriaQuery criteria, PageLinkBuilder pagingArgs) {\n-    Query query = entityManager.createQuery(criteria);\n-\n-    if (pagingArgs.isPagingRequested()) {\n-      query.setFirstResult(pagingArgs.getStartIndex());\n-      query.setMaxResults(pagingArgs.getPageSize());\n-    }\n+  /**\n+   * Fetch beneficiaries for the PartD coverage parameter\n+   *\n+   * @param coverageId coverage type\n+   * @param includedIdentifiers list from the includeIdentifier header\n+   * @param paging specified\n+   * @return the beneficiaries\n+   */\n+  private List<Beneficiary> fetchBeneficiaries(\n+      TokenParam coverageId, List<String> includedIdentifiers, PatientLinkBuilder paging) {\n+    List<SetAttribute<Beneficiary, ?>> withRelations = new LinkedList<>();\n+    if (hasHICN(includedIdentifiers)) withRelations.add(Beneficiary_.beneficiaryHistories);\n+    if (hasMBI(includedIdentifiers)) withRelations.add(Beneficiary_.medicareBeneficiaryIdHistories);\n \n-    return query.getResultList();\n-  }\n+    String contractMonth =\n+        coverageId.getSystem().substring(coverageId.getSystem().lastIndexOf('/') + 1);\n+    CcwCodebookVariable partDContractMonth = partDCwVariableFor(contractMonth);\n+    SingularAttribute<Beneficiary, String> contractMonthField = partDFieldFor(partDContractMonth);\n+    String contractCode = coverageId.getValueNotNull();\n \n-  private CriteriaQuery queryBeneficiariesBy(\n-      SingularAttribute<Beneficiary, String> field, String value) {\n-    List<SetAttribute<Beneficiary, ?>> withRelations =\n-        new LinkedList<SetAttribute<Beneficiary, ?>>();\n-    return queryBeneficiariesBy(field, value, withRelations);\n+    CriteriaQuery<Beneficiary> criteria =\n+        queryBeneficiariesBy(contractMonthField, contractCode, paging, withRelations);\n+    return entityManager.createQuery(criteria).setMaxResults(paging.getPageSize()).getResultList();\n   }\n \n-  private CriteriaQuery queryBeneficiariesBy(\n+  /**\n+   * Build a criteria for a general Beneficiary query\n+   *\n+   * @param field to match on\n+   * @param value to match on\n+   * @param paging to use for the result set\n+   * @param joins to add for many-to-one relations\n+   * @return the criteria\n+   */\n+  private CriteriaQuery<Beneficiary> queryBeneficiariesBy(\n       SingularAttribute<Beneficiary, String> field,\n       String value,\n-      List<SetAttribute<Beneficiary, ?>> relations) {\n-\n-    CriteriaBuilder builder = entityManager.getCriteriaBuilder();\n-    CriteriaQuery<Beneficiary> beneMatches = builder.createQuery(Beneficiary.class);\n-    Root<Beneficiary> beneMatchesRoot = beneMatches.from(Beneficiary.class);\n-    relations.stream()\n-        .forEach(\n-            f -> {\n-              beneMatchesRoot.fetch(f, JoinType.LEFT);\n-            });\n-    beneMatches.select(beneMatchesRoot);\n-    beneMatches.where(builder.equal(beneMatchesRoot.get(field), value));\n-\n-    return beneMatches;\n+      PatientLinkBuilder paging,\n+      List<SetAttribute<Beneficiary, ?>> joins) {\n+\n+    CriteriaBuilder cb = entityManager.getCriteriaBuilder();\n+    CriteriaQuery<Beneficiary> criteria = cb.createQuery(Beneficiary.class);\n+    Root<Beneficiary> b = criteria.from(Beneficiary.class);", "originalCommit": "0d08b186b8fe1c2d58574cc1b2bea602345e531f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE1Njg4Mg==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/249#discussion_r404156882", "bodyText": "ty this is much cleaner", "author": "whytheplatypus", "createdAt": "2020-04-06T14:55:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDEzOTA4Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE0MDkxMg==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/249#discussion_r404140912", "bodyText": "No total value when paging is requested.", "author": "RickHawesUSDS", "createdAt": "2020-04-06T14:35:07Z", "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/stu3/providers/TransformerUtils.java", "diffHunk": "@@ -2955,25 +2957,22 @@ public static Bundle createBundle(\n   }\n \n   /**\n-   * Create a bundle from one page of resources\n+   * Create a bundle from the entire search result\n    *\n-   * @param paging a {@link PageLinkBuilder} used to determine if paging is requested and the\n-   *     parameters for doing so. The resources list is trimmed to fit the requested page.\n    * @param resources a list of {@link ExplanationOfBenefit}s, {@link Coverage}s, or {@link\n-   *     Patient}s, of which a portion or all will be added to the bundle based on the paging values\n-   * @param total number of resources in the entire search result\n+   *     Patient}s, all of which will be added to the bundle\n+   * @param paging contains the {@link LinkBuilder} information to add to the bundle\n+   * @param transactionTime date for the bundle\n    * @return Returns a {@link Bundle} of either {@link ExplanationOfBenefit}s, {@link Coverage}s, or\n    *     {@link Patient}s, which may contain multiple matching resources, or may also be empty.\n    */\n   public static Bundle createBundle(\n-      PageLinkBuilder paging, List<IBaseResource> resources, int total, Date transactionTime) {\n+      List<IBaseResource> resources, LinkBuilder paging, Date transactionTime) {\n     Bundle bundle = new Bundle();\n-\n-    if (paging.isPagingRequested()) {\n-      paging.addPageLinks(bundle, total);\n-    }\n-\n-    bundle = TransformerUtils.addResourcesToBundle(bundle, resources);\n+    TransformerUtils.addResourcesToBundle(bundle, resources);\n+    paging.addLinks(bundle);\n+    bundle.setTotalElement(\n+        paging.isPagingRequested() ? new UnsignedIntType() : new UnsignedIntType(resources.size()));", "originalCommit": "0d08b186b8fe1c2d58574cc1b2bea602345e531f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}