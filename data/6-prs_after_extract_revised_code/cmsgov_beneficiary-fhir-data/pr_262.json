{"pr_number": 262, "pr_title": "BLUEBUTTON 2001: Slow Coverage search with paging and identifiers", "pr_createdAt": "2020-04-23T22:49:11Z", "pr_url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/262", "timeline": [{"oid": "6e37c19603da6c7b2057de215a17565da39c9cdd", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/6e37c19603da6c7b2057de215a17565da39c9cdd", "message": "A fix", "committedDate": "2020-04-23T21:14:54Z", "type": "commit"}, {"oid": "491c760061e4587091e40e10550dff67acfce697", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/491c760061e4587091e40e10550dff67acfce697", "message": "Refactor", "committedDate": "2020-04-23T22:22:23Z", "type": "commit"}, {"oid": "4f7f5d191017185cec534157346b09465dc7d33a", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/4f7f5d191017185cec534157346b09465dc7d33a", "message": "Update comment", "committedDate": "2020-04-23T22:47:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE3NTIzNg==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/262#discussion_r414175236", "bodyText": "All the changes happened in this method and the methods it calls.", "author": "RickHawesUSDS", "createdAt": "2020-04-23T22:50:20Z", "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/stu3/providers/PatientResourceProvider.java", "diffHunk": "@@ -329,19 +332,38 @@ private CcwCodebookVariable partDCwVariableFor(String system) {\n    */\n   private List<Beneficiary> fetchBeneficiaries(", "originalCommit": "4f7f5d191017185cec534157346b09465dc7d33a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eab516819b7d5e4f1b74633604c8d9511c350063", "chunk": "diff --git a/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/stu3/providers/PatientResourceProvider.java b/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/stu3/providers/PatientResourceProvider.java\nindex 7e847721e..fa8689e78 100644\n--- a/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/stu3/providers/PatientResourceProvider.java\n+++ b/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/stu3/providers/PatientResourceProvider.java\n\n@@ -335,18 +321,13 @@ public final class PatientResourceProvider implements IResourceProvider {\n     String contractMonth =\n         coverageId.getSystem().substring(coverageId.getSystem().lastIndexOf('/') + 1);\n     CcwCodebookVariable partDContractMonth = partDCwVariableFor(contractMonth);\n-    SingularAttribute<Beneficiary, String> contractMonthField = partDFieldFor(partDContractMonth);\n+    String contractMonthField = partDFieldFor(partDContractMonth);\n     String contractCode = coverageId.getValueNotNull();\n \n-    // Use joins to fetch the mbi and hicn histories\n-    List<SetAttribute<Beneficiary, ?>> joins = new ArrayList<>();\n-    if (hasHICN(includedIdentifiers)) joins.add(Beneficiary_.beneficiaryHistories);\n-    if (hasMBI(includedIdentifiers)) joins.add(Beneficiary_.medicareBeneficiaryIdHistories);\n-\n     // Fetching with joins is not compatible with setMaxResults as explained in this post:\n     // https://stackoverflow.com/questions/53569908/jpa-eager-fetching-and-pagination-best-practices\n     // So, in cases where there are joins and paging, we query in two steps: first fetch bene-ids\n-    // with paging and the fetch full benes with joins.\n+    // with paging and then fetch full benes with joins.\n     boolean useTwoSteps =\n         (hasHICN(includedIdentifiers) || hasMBI(includedIdentifiers)) && paging.isPagingRequested();\n     if (useTwoSteps) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE3NTUyNA==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/262#discussion_r414175524", "bodyText": "Moving to TypedQuery return type improves the readability of the caller.", "author": "RickHawesUSDS", "createdAt": "2020-04-23T22:51:04Z", "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/stu3/providers/PatientResourceProvider.java", "diffHunk": "@@ -353,31 +375,74 @@ private CcwCodebookVariable partDCwVariableFor(String system) {\n    * @param joins to add for many-to-one relations\n    * @return the criteria\n    */\n-  private CriteriaQuery<Beneficiary> queryBeneficiariesBy(\n+  private TypedQuery<Beneficiary> queryBeneficiariesBy(\n       SingularAttribute<Beneficiary, String> field,", "originalCommit": "4f7f5d191017185cec534157346b09465dc7d33a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eab516819b7d5e4f1b74633604c8d9511c350063", "chunk": "diff --git a/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/stu3/providers/PatientResourceProvider.java b/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/stu3/providers/PatientResourceProvider.java\nindex 7e847721e..fa8689e78 100644\n--- a/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/stu3/providers/PatientResourceProvider.java\n+++ b/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/stu3/providers/PatientResourceProvider.java\n\n@@ -372,29 +353,39 @@ public final class PatientResourceProvider implements IResourceProvider {\n    * @param field to match on\n    * @param value to match on\n    * @param paging to use for the result set\n-   * @param joins to add for many-to-one relations\n+   * @param identifiers to add for many-to-one relations\n    * @return the criteria\n    */\n   private TypedQuery<Beneficiary> queryBeneficiariesBy(\n-      SingularAttribute<Beneficiary, String> field,\n-      String value,\n-      PatientLinkBuilder paging,\n-      List<SetAttribute<Beneficiary, ?>> joins) {\n-    CriteriaBuilder cb = entityManager.getCriteriaBuilder();\n-    CriteriaQuery<Beneficiary> criteria = cb.createQuery(Beneficiary.class);\n-    Root<Beneficiary> b = criteria.from(Beneficiary.class);\n-\n-    joins.forEach(f -> b.fetch(f, JoinType.LEFT));\n-\n-    Predicate whereClause =\n-        paging.isPagingRequested() && !paging.isFirstPage()\n-            ? cb.and(\n-                cb.equal(b.get(field), value),\n-                cb.greaterThan(b.get(\"beneficiaryId\"), paging.getCursor()))\n-            : cb.equal(b.get(field), value);\n-\n-    return entityManager.createQuery(\n-        criteria.select(b).where(whereClause).orderBy(cb.asc(b.get(\"beneficiaryId\"))));\n+      String field, String value, PatientLinkBuilder paging, List<String> identifiers) {\n+    String joinsClause = \"\";\n+    if (hasMBI(identifiers)) joinsClause += \"left join fetch b.medicareBeneficiaryIdHistories \";\n+    if (hasHICN(identifiers)) joinsClause += \"left join fetch b.beneficiaryHistories \";\n+\n+    if (paging.isPagingRequested() && !paging.isFirstPage()) {\n+      String query =\n+          \"select b from Beneficiary b \"\n+              + joinsClause\n+              + \"where b.\"\n+              + field\n+              + \" = :value and b.beneficiaryId > :cursor \"\n+              + \"order by b.beneficiaryId asc\";\n+\n+      return entityManager\n+          .createQuery(query, Beneficiary.class)\n+          .setParameter(\"value\", value)\n+          .setParameter(\"cursor\", paging.getCursor());\n+    } else {\n+      String query =\n+          \"select b from Beneficiary b \"\n+              + joinsClause\n+              + \"where b.\"\n+              + field\n+              + \" = :value \"\n+              + \"order by b.beneficiaryId asc\";\n+\n+      return entityManager.createQuery(query, Beneficiary.class).setParameter(\"value\", value);\n+    }\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE3NjAyNA==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/262#discussion_r414176024", "bodyText": "Refactoring the whereClause for readability. The select statement is now the same for both paging and non-paging cases.", "author": "RickHawesUSDS", "createdAt": "2020-04-23T22:52:07Z", "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/stu3/providers/PatientResourceProvider.java", "diffHunk": "@@ -353,31 +375,74 @@ private CcwCodebookVariable partDCwVariableFor(String system) {\n    * @param joins to add for many-to-one relations\n    * @return the criteria\n    */\n-  private CriteriaQuery<Beneficiary> queryBeneficiariesBy(\n+  private TypedQuery<Beneficiary> queryBeneficiariesBy(\n       SingularAttribute<Beneficiary, String> field,\n       String value,\n       PatientLinkBuilder paging,\n       List<SetAttribute<Beneficiary, ?>> joins) {\n-\n     CriteriaBuilder cb = entityManager.getCriteriaBuilder();\n     CriteriaQuery<Beneficiary> criteria = cb.createQuery(Beneficiary.class);\n     Root<Beneficiary> b = criteria.from(Beneficiary.class);\n+\n     joins.forEach(f -> b.fetch(f, JoinType.LEFT));\n \n-    if (paging.isPagingRequested() && !paging.isFirstPage()) {\n-      return criteria\n-          .select(b)\n-          .where(\n-              cb.and(\n-                  cb.equal(b.get(field), value),\n-                  cb.greaterThan(b.get(\"beneficiaryId\"), paging.getCursor())))\n-          .orderBy(cb.asc(b.get(\"beneficiaryId\")));\n-    } else {\n-      return criteria\n-          .select(b)\n-          .where(cb.equal(b.get(field), value))\n-          .orderBy(cb.asc(b.get(\"beneficiaryId\")));\n-    }\n+    Predicate whereClause =", "originalCommit": "4f7f5d191017185cec534157346b09465dc7d33a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eab516819b7d5e4f1b74633604c8d9511c350063", "chunk": "diff --git a/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/stu3/providers/PatientResourceProvider.java b/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/stu3/providers/PatientResourceProvider.java\nindex 7e847721e..fa8689e78 100644\n--- a/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/stu3/providers/PatientResourceProvider.java\n+++ b/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/stu3/providers/PatientResourceProvider.java\n\n@@ -372,29 +353,39 @@ public final class PatientResourceProvider implements IResourceProvider {\n    * @param field to match on\n    * @param value to match on\n    * @param paging to use for the result set\n-   * @param joins to add for many-to-one relations\n+   * @param identifiers to add for many-to-one relations\n    * @return the criteria\n    */\n   private TypedQuery<Beneficiary> queryBeneficiariesBy(\n-      SingularAttribute<Beneficiary, String> field,\n-      String value,\n-      PatientLinkBuilder paging,\n-      List<SetAttribute<Beneficiary, ?>> joins) {\n-    CriteriaBuilder cb = entityManager.getCriteriaBuilder();\n-    CriteriaQuery<Beneficiary> criteria = cb.createQuery(Beneficiary.class);\n-    Root<Beneficiary> b = criteria.from(Beneficiary.class);\n-\n-    joins.forEach(f -> b.fetch(f, JoinType.LEFT));\n-\n-    Predicate whereClause =\n-        paging.isPagingRequested() && !paging.isFirstPage()\n-            ? cb.and(\n-                cb.equal(b.get(field), value),\n-                cb.greaterThan(b.get(\"beneficiaryId\"), paging.getCursor()))\n-            : cb.equal(b.get(field), value);\n-\n-    return entityManager.createQuery(\n-        criteria.select(b).where(whereClause).orderBy(cb.asc(b.get(\"beneficiaryId\"))));\n+      String field, String value, PatientLinkBuilder paging, List<String> identifiers) {\n+    String joinsClause = \"\";\n+    if (hasMBI(identifiers)) joinsClause += \"left join fetch b.medicareBeneficiaryIdHistories \";\n+    if (hasHICN(identifiers)) joinsClause += \"left join fetch b.beneficiaryHistories \";\n+\n+    if (paging.isPagingRequested() && !paging.isFirstPage()) {\n+      String query =\n+          \"select b from Beneficiary b \"\n+              + joinsClause\n+              + \"where b.\"\n+              + field\n+              + \" = :value and b.beneficiaryId > :cursor \"\n+              + \"order by b.beneficiaryId asc\";\n+\n+      return entityManager\n+          .createQuery(query, Beneficiary.class)\n+          .setParameter(\"value\", value)\n+          .setParameter(\"cursor\", paging.getCursor());\n+    } else {\n+      String query =\n+          \"select b from Beneficiary b \"\n+              + joinsClause\n+              + \"where b.\"\n+              + field\n+              + \" = :value \"\n+              + \"order by b.beneficiaryId asc\";\n+\n+      return entityManager.createQuery(query, Beneficiary.class).setParameter(\"value\", value);\n+    }\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE3NjY4Ng==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/262#discussion_r414176686", "bodyText": "Although this whereClause is similar to the previous whereClause in the previous method. It is not. I tried to build a common function and it didn't work.", "author": "RickHawesUSDS", "createdAt": "2020-04-23T22:53:46Z", "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/stu3/providers/PatientResourceProvider.java", "diffHunk": "@@ -353,31 +375,74 @@ private CcwCodebookVariable partDCwVariableFor(String system) {\n    * @param joins to add for many-to-one relations\n    * @return the criteria\n    */\n-  private CriteriaQuery<Beneficiary> queryBeneficiariesBy(\n+  private TypedQuery<Beneficiary> queryBeneficiariesBy(\n       SingularAttribute<Beneficiary, String> field,\n       String value,\n       PatientLinkBuilder paging,\n       List<SetAttribute<Beneficiary, ?>> joins) {\n-\n     CriteriaBuilder cb = entityManager.getCriteriaBuilder();\n     CriteriaQuery<Beneficiary> criteria = cb.createQuery(Beneficiary.class);\n     Root<Beneficiary> b = criteria.from(Beneficiary.class);\n+\n     joins.forEach(f -> b.fetch(f, JoinType.LEFT));\n \n-    if (paging.isPagingRequested() && !paging.isFirstPage()) {\n-      return criteria\n-          .select(b)\n-          .where(\n-              cb.and(\n-                  cb.equal(b.get(field), value),\n-                  cb.greaterThan(b.get(\"beneficiaryId\"), paging.getCursor())))\n-          .orderBy(cb.asc(b.get(\"beneficiaryId\")));\n-    } else {\n-      return criteria\n-          .select(b)\n-          .where(cb.equal(b.get(field), value))\n-          .orderBy(cb.asc(b.get(\"beneficiaryId\")));\n-    }\n+    Predicate whereClause =\n+        paging.isPagingRequested() && !paging.isFirstPage()\n+            ? cb.and(\n+                cb.equal(b.get(field), value),\n+                cb.greaterThan(b.get(\"beneficiaryId\"), paging.getCursor()))\n+            : cb.equal(b.get(field), value);\n+\n+    return entityManager.createQuery(\n+        criteria.select(b).where(whereClause).orderBy(cb.asc(b.get(\"beneficiaryId\"))));\n+  }\n+\n+  /**\n+   * Build a criteria for a general beneficiaryId query\n+   *\n+   * @param field to match on\n+   * @param value to match on\n+   * @param paging to use for the result set\n+   * @return the criteria\n+   */\n+  private TypedQuery<String> queryBeneficiaryIds(\n+      SingularAttribute<Beneficiary, String> field, String value, PatientLinkBuilder paging) {\n+    CriteriaBuilder cb = entityManager.getCriteriaBuilder();\n+    CriteriaQuery<String> criteria = cb.createQuery(String.class);\n+    Root<Beneficiary> b = criteria.from(Beneficiary.class);\n+\n+    Predicate whereClause =", "originalCommit": "4f7f5d191017185cec534157346b09465dc7d33a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eab516819b7d5e4f1b74633604c8d9511c350063", "chunk": "diff --git a/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/stu3/providers/PatientResourceProvider.java b/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/stu3/providers/PatientResourceProvider.java\nindex 7e847721e..fa8689e78 100644\n--- a/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/stu3/providers/PatientResourceProvider.java\n+++ b/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/stu3/providers/PatientResourceProvider.java\n\n@@ -372,29 +353,39 @@ public final class PatientResourceProvider implements IResourceProvider {\n    * @param field to match on\n    * @param value to match on\n    * @param paging to use for the result set\n-   * @param joins to add for many-to-one relations\n+   * @param identifiers to add for many-to-one relations\n    * @return the criteria\n    */\n   private TypedQuery<Beneficiary> queryBeneficiariesBy(\n-      SingularAttribute<Beneficiary, String> field,\n-      String value,\n-      PatientLinkBuilder paging,\n-      List<SetAttribute<Beneficiary, ?>> joins) {\n-    CriteriaBuilder cb = entityManager.getCriteriaBuilder();\n-    CriteriaQuery<Beneficiary> criteria = cb.createQuery(Beneficiary.class);\n-    Root<Beneficiary> b = criteria.from(Beneficiary.class);\n-\n-    joins.forEach(f -> b.fetch(f, JoinType.LEFT));\n-\n-    Predicate whereClause =\n-        paging.isPagingRequested() && !paging.isFirstPage()\n-            ? cb.and(\n-                cb.equal(b.get(field), value),\n-                cb.greaterThan(b.get(\"beneficiaryId\"), paging.getCursor()))\n-            : cb.equal(b.get(field), value);\n-\n-    return entityManager.createQuery(\n-        criteria.select(b).where(whereClause).orderBy(cb.asc(b.get(\"beneficiaryId\"))));\n+      String field, String value, PatientLinkBuilder paging, List<String> identifiers) {\n+    String joinsClause = \"\";\n+    if (hasMBI(identifiers)) joinsClause += \"left join fetch b.medicareBeneficiaryIdHistories \";\n+    if (hasHICN(identifiers)) joinsClause += \"left join fetch b.beneficiaryHistories \";\n+\n+    if (paging.isPagingRequested() && !paging.isFirstPage()) {\n+      String query =\n+          \"select b from Beneficiary b \"\n+              + joinsClause\n+              + \"where b.\"\n+              + field\n+              + \" = :value and b.beneficiaryId > :cursor \"\n+              + \"order by b.beneficiaryId asc\";\n+\n+      return entityManager\n+          .createQuery(query, Beneficiary.class)\n+          .setParameter(\"value\", value)\n+          .setParameter(\"cursor\", paging.getCursor());\n+    } else {\n+      String query =\n+          \"select b from Beneficiary b \"\n+              + joinsClause\n+              + \"where b.\"\n+              + field\n+              + \" = :value \"\n+              + \"order by b.beneficiaryId asc\";\n+\n+      return entityManager.createQuery(query, Beneficiary.class).setParameter(\"value\", value);\n+    }\n   }\n \n   /**\n"}}, {"oid": "eab516819b7d5e4f1b74633604c8d9511c350063", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/eab516819b7d5e4f1b74633604c8d9511c350063", "message": "Moved to using JPQL for the queries.\n\nEasier to read because the java form has much more boilerplate.", "committedDate": "2020-04-24T15:00:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY1MzM0Mw==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/262#discussion_r414653343", "bodyText": "Switching over to the JPQL style for these queries. Easier to understand and read to my eyes. Simpler code as well.", "author": "RickHawesUSDS", "createdAt": "2020-04-24T15:12:42Z", "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/stu3/providers/PatientResourceProvider.java", "diffHunk": "@@ -350,36 +353,96 @@ private CcwCodebookVariable partDCwVariableFor(String system) {\n    * @param field to match on\n    * @param value to match on\n    * @param paging to use for the result set\n-   * @param joins to add for many-to-one relations\n+   * @param identifiers to add for many-to-one relations\n    * @return the criteria\n    */\n-  private CriteriaQuery<Beneficiary> queryBeneficiariesBy(\n-      SingularAttribute<Beneficiary, String> field,\n-      String value,\n-      PatientLinkBuilder paging,\n-      List<SetAttribute<Beneficiary, ?>> joins) {\n+  private TypedQuery<Beneficiary> queryBeneficiariesBy(\n+      String field, String value, PatientLinkBuilder paging, List<String> identifiers) {\n+    String joinsClause = \"\";\n+    if (hasMBI(identifiers)) joinsClause += \"left join fetch b.medicareBeneficiaryIdHistories \";\n+    if (hasHICN(identifiers)) joinsClause += \"left join fetch b.beneficiaryHistories \";\n \n-    CriteriaBuilder cb = entityManager.getCriteriaBuilder();\n-    CriteriaQuery<Beneficiary> criteria = cb.createQuery(Beneficiary.class);\n-    Root<Beneficiary> b = criteria.from(Beneficiary.class);\n-    joins.forEach(f -> b.fetch(f, JoinType.LEFT));\n+    if (paging.isPagingRequested() && !paging.isFirstPage()) {\n+      String query =\n+          \"select b from Beneficiary b \"\n+              + joinsClause\n+              + \"where b.\"\n+              + field\n+              + \" = :value and b.beneficiaryId > :cursor \"\n+              + \"order by b.beneficiaryId asc\";\n+\n+      return entityManager\n+          .createQuery(query, Beneficiary.class)\n+          .setParameter(\"value\", value)\n+          .setParameter(\"cursor\", paging.getCursor());\n+    } else {\n+      String query =\n+          \"select b from Beneficiary b \"\n+              + joinsClause\n+              + \"where b.\"\n+              + field\n+              + \" = :value \"\n+              + \"order by b.beneficiaryId asc\";\n+\n+      return entityManager.createQuery(query, Beneficiary.class).setParameter(\"value\", value);\n+    }\n+  }\n ", "originalCommit": "eab516819b7d5e4f1b74633604c8d9511c350063", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk1MDYwMg==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/262#discussion_r415950602", "bodyText": "I like this and is easier to read for me too!", "author": "dtisza1", "createdAt": "2020-04-27T16:12:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY1MzM0Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTExMzEzNw==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/262#discussion_r415113137", "bodyText": "Much easier on the eyes.", "author": "jzulim", "createdAt": "2020-04-25T18:06:49Z", "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/stu3/providers/PatientResourceProvider.java", "diffHunk": "@@ -290,37 +290,26 @@ private CcwCodebookVariable partDCwVariableFor(String system) {\n     }\n   }\n \n-  private SingularAttribute<Beneficiary, String> partDFieldFor(CcwCodebookVariable cntrctMonth) {\n-    if (cntrctMonth == CcwCodebookVariable.PTDCNTRCT01)\n-      return Beneficiary_.partDContractNumberJanId;\n-    if (cntrctMonth == CcwCodebookVariable.PTDCNTRCT02)\n-      return Beneficiary_.partDContractNumberFebId;\n-    if (cntrctMonth == CcwCodebookVariable.PTDCNTRCT03)\n-      return Beneficiary_.partDContractNumberMarId;\n-    if (cntrctMonth == CcwCodebookVariable.PTDCNTRCT04)\n-      return Beneficiary_.partDContractNumberAprId;\n-    if (cntrctMonth == CcwCodebookVariable.PTDCNTRCT05)\n-      return Beneficiary_.partDContractNumberMayId;\n-    if (cntrctMonth == CcwCodebookVariable.PTDCNTRCT06)\n-      return Beneficiary_.partDContractNumberJunId;\n-    if (cntrctMonth == CcwCodebookVariable.PTDCNTRCT07)\n-      return Beneficiary_.partDContractNumberJulId;\n-    if (cntrctMonth == CcwCodebookVariable.PTDCNTRCT08)\n-      return Beneficiary_.partDContractNumberAugId;\n-    if (cntrctMonth == CcwCodebookVariable.PTDCNTRCT09)\n-      return Beneficiary_.partDContractNumberSeptId;\n-    if (cntrctMonth == CcwCodebookVariable.PTDCNTRCT10)\n-      return Beneficiary_.partDContractNumberOctId;\n-    if (cntrctMonth == CcwCodebookVariable.PTDCNTRCT11)\n-      return Beneficiary_.partDContractNumberNovId;\n-    if (cntrctMonth == CcwCodebookVariable.PTDCNTRCT12)\n-      return Beneficiary_.partDContractNumberDecId;\n+  private String partDFieldFor(CcwCodebookVariable month) {\n+    if (month == CcwCodebookVariable.PTDCNTRCT01) return \"partDContractNumberJanId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT02) return \"partDContractNumberFebId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT03) return \"partDContractNumberMarId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT04) return \"partDContractNumberAprId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT05) return \"partDContractNumberMayId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT06) return \"partDContractNumberJunId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT07) return \"partDContractNumberJulId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT08) return \"partDContractNumberAugId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT09) return \"partDContractNumberSeptId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT10) return \"partDContractNumberOctId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT11) return \"partDContractNumberNovId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT12) return \"partDContractNumberDecId\";", "originalCommit": "eab516819b7d5e4f1b74633604c8d9511c350063", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}