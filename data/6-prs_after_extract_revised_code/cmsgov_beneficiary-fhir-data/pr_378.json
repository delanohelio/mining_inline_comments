{"pr_number": 378, "pr_title": "Dshekhar/bfd 293 v2 patient poc", "pr_createdAt": "2020-10-16T02:36:28Z", "pr_url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378", "timeline": [{"oid": "aa048fb514be95a01d27f66c2968fefaacb2f578", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/aa048fb514be95a01d27f66c2968fefaacb2f578", "message": "Patient V2 POC", "committedDate": "2020-10-15T22:24:00Z", "type": "commit"}, {"oid": "f4c2829391a24014984d9f9674abfd84c6164129", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/f4c2829391a24014984d9f9674abfd84c6164129", "message": "V2 ENBALED ENV FLAG", "committedDate": "2020-10-16T00:19:56Z", "type": "commit"}, {"oid": "954244e00f9d1dec9812b23ca07827e65af3ee31", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/954244e00f9d1dec9812b23ca07827e65af3ee31", "message": "Update env_specific.yml\n\nEnabling BFD V2 ENV FLAG in BFD-TEST", "committedDate": "2020-10-16T00:24:37Z", "type": "commit"}, {"oid": "e316b2bb0753ecc4e7cd534b66e9fa7cc05635b6", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/e316b2bb0753ecc4e7cd534b66e9fa7cc05635b6", "message": "Update env_specific.yml\n\nBFD V2 ENABLED FOR PROD-SBX", "committedDate": "2020-10-16T01:47:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU3OTcwNw==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#discussion_r506579707", "bodyText": "I would use !Strings.isNullOrEmpty(v2EnabledText) here", "author": "cbrunefearless", "createdAt": "2020-10-16T16:15:08Z", "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/FhirAppConfiguration.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package gov.cms.bfd.server.war;\n+\n+import java.io.Serializable;\n+import java.util.Optional;\n+\n+/** Models the configuration options for the application. */\n+public final class FhirAppConfiguration implements Serializable {\n+  private static final long serialVersionUID = -6845504165285244536L;\n+\n+  /**\n+   * The name of the environment variable that should be used to provide the {@link\n+   * #getLoadOptions()} {@link LoadFhirAppOptions#isV2Enabled()} value.\n+   */\n+  public static final String ENV_VAR_KEY_V2_ENABLED = \"V2_ENABLED\";\n+\n+  private final LoadFhirAppOptions loadOptions;\n+\n+  /**\n+   * Constructs a new {@link FhirAppConfiguration} instance.\n+   *\n+   * @param loadOptions the value to use for {@link #getLoadOptions()}\n+   */\n+  public FhirAppConfiguration(LoadFhirAppOptions loadOptions) {\n+\n+    this.loadOptions = loadOptions;\n+  }\n+\n+  /** @return the {@link LoadFhirAppOptions} that the application will use */\n+  public LoadFhirAppOptions getLoadOptions() {\n+    return loadOptions;\n+  }\n+\n+  /** @see java.lang.Object#toString() */\n+  @Override\n+  public String toString() {\n+    StringBuilder builder = new StringBuilder();\n+    builder.append(\"FhirAppConfiguration [=\");\n+    builder.append(\", loadOptions=\");\n+    builder.append(loadOptions);\n+    builder.append(\"]\");\n+    return builder.toString();\n+  }\n+\n+  /**\n+   * Per <code>/dev/design-decisions-readme.md</code>, this application accepts its configuration\n+   * via environment variables. Read those in, and build an {@link FhirAppConfiguration} instance\n+   * from them.\n+   *\n+   * @return the {@link FhirAppConfiguration} instance represented by the configuration provided to\n+   *     this application via the environment variables\n+   */\n+  static FhirAppConfiguration readConfigFromEnvironmentVariables() {\n+\n+    String v2EnabledText = System.getenv(ENV_VAR_KEY_V2_ENABLED);\n+    boolean v2Enabled = false;\n+    if (v2EnabledText != null && !v2EnabledText.isEmpty()) {", "originalCommit": "e316b2bb0753ecc4e7cd534b66e9fa7cc05635b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYxOTQwMA==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#discussion_r506619400", "bodyText": "This is consistent with how we are checking all the environment flags across all of BFD modules.", "author": "dshekhar18", "createdAt": "2020-10-16T17:27:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU3OTcwNw=="}], "type": "inlineReview", "revised_code": {"commit": "265ea9672c7f3b8a04c70e2c78fc3b2ff1fb2c60", "chunk": "diff --git a/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/FhirAppConfiguration.java b/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/FhirAppConfiguration.java\ndeleted file mode 100644\nindex f0ef00554..000000000\n--- a/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/FhirAppConfiguration.java\n+++ /dev/null\n\n@@ -1,75 +0,0 @@\n-package gov.cms.bfd.server.war;\n-\n-import java.io.Serializable;\n-import java.util.Optional;\n-\n-/** Models the configuration options for the application. */\n-public final class FhirAppConfiguration implements Serializable {\n-  private static final long serialVersionUID = -6845504165285244536L;\n-\n-  /**\n-   * The name of the environment variable that should be used to provide the {@link\n-   * #getLoadOptions()} {@link LoadFhirAppOptions#isV2Enabled()} value.\n-   */\n-  public static final String ENV_VAR_KEY_V2_ENABLED = \"V2_ENABLED\";\n-\n-  private final LoadFhirAppOptions loadOptions;\n-\n-  /**\n-   * Constructs a new {@link FhirAppConfiguration} instance.\n-   *\n-   * @param loadOptions the value to use for {@link #getLoadOptions()}\n-   */\n-  public FhirAppConfiguration(LoadFhirAppOptions loadOptions) {\n-\n-    this.loadOptions = loadOptions;\n-  }\n-\n-  /** @return the {@link LoadFhirAppOptions} that the application will use */\n-  public LoadFhirAppOptions getLoadOptions() {\n-    return loadOptions;\n-  }\n-\n-  /** @see java.lang.Object#toString() */\n-  @Override\n-  public String toString() {\n-    StringBuilder builder = new StringBuilder();\n-    builder.append(\"FhirAppConfiguration [=\");\n-    builder.append(\", loadOptions=\");\n-    builder.append(loadOptions);\n-    builder.append(\"]\");\n-    return builder.toString();\n-  }\n-\n-  /**\n-   * Per <code>/dev/design-decisions-readme.md</code>, this application accepts its configuration\n-   * via environment variables. Read those in, and build an {@link FhirAppConfiguration} instance\n-   * from them.\n-   *\n-   * @return the {@link FhirAppConfiguration} instance represented by the configuration provided to\n-   *     this application via the environment variables\n-   */\n-  static FhirAppConfiguration readConfigFromEnvironmentVariables() {\n-\n-    String v2EnabledText = System.getenv(ENV_VAR_KEY_V2_ENABLED);\n-    boolean v2Enabled = false;\n-    if (v2EnabledText != null && !v2EnabledText.isEmpty()) {\n-      v2Enabled = Boolean.parseBoolean(v2EnabledText);\n-    }\n-\n-    return new FhirAppConfiguration(new LoadFhirAppOptions(v2Enabled));\n-  }\n-\n-  /**\n-   * Design note: want better parsing than what {@link Boolean#parseBoolean(String)} provides.\n-   *\n-   * @param booleanText the text to try and parse a <code>boolean</code> from\n-   * @return the parsed <code>boolean</code>, or {@link Optional#empty()} if nothing valid could be\n-   *     parsed\n-   */\n-  static Optional<Boolean> parseBoolean(String booleanText) {\n-    if (\"true\".equalsIgnoreCase(booleanText)) return Optional.of(true);\n-    else if (\"false\".equalsIgnoreCase(booleanText)) return Optional.of(false);\n-    else return Optional.empty();\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU4NzIzOA==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#discussion_r506587238", "bodyText": "is this our default now?", "author": "cbrunefearless", "createdAt": "2020-10-16T16:28:03Z", "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/R4Server.java", "diffHunk": "@@ -0,0 +1,131 @@\n+package gov.cms.bfd.server.war;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.rest.api.EncodingEnum;\n+import ca.uhn.fhir.rest.server.ApacheProxyAddressStrategy;\n+import ca.uhn.fhir.rest.server.ETagSupportEnum;\n+import ca.uhn.fhir.rest.server.IResourceProvider;\n+import ca.uhn.fhir.rest.server.RestfulServer;\n+import ca.uhn.fhir.rest.server.interceptor.CorsInterceptor;\n+import ca.uhn.fhir.rest.server.interceptor.IServerInterceptor;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Properties;\n+import javax.servlet.Servlet;\n+import javax.servlet.ServletException;\n+import org.hl7.fhir.r4.hapi.rest.server.ServerCapabilityStatementProvider;\n+import org.hl7.fhir.r4.model.CapabilityStatement;\n+import org.springframework.web.context.ContextLoaderListener;\n+import org.springframework.web.context.WebApplicationContext;\n+import org.springframework.web.cors.CorsConfiguration;\n+\n+/**\n+ * The primary {@link Servlet} for this web application. Uses the <a href=\"http://hapifhir.io/\">HAPI\n+ * FHIR</a> framework to provide a fully functional FHIR API server that queries stored RIF data\n+ * from the CCW and converts it to the proper FHIR format \"on the fly\".\n+ */\n+public class R4Server extends RestfulServer {\n+\n+  private static final long serialVersionUID = 1L;\n+\n+  static final String CAPABILITIES_PUBLISHER = \"Centers for Medicare & Medicaid Services\";\n+  static final String CAPABILITIES_SERVER_NAME = \"Blue Button API: Direct\";\n+\n+  /** Constructs a new {@link R4Server} instance. */\n+  public R4Server() {\n+    super(FhirContext.forR4());\n+    setServerAddressStrategy(ApacheProxyAddressStrategy.forHttp());\n+    configureServerInfoMetadata();\n+  }\n+\n+  /**\n+   * Configures various metadata fields that will be included in this server's {@link\n+   * CapabilityStatement}.\n+   */\n+  private void configureServerInfoMetadata() {\n+    setServerName(CAPABILITIES_SERVER_NAME);\n+\n+    /*\n+     * Read in some of the project metadata from a Maven-filtered properties\n+     * file, which ensures that it's always up to date.\n+     */\n+    Properties projectProps = new Properties();\n+    try (InputStream projectPropsStream =\n+        Thread.currentThread()\n+            .getContextClassLoader()\n+            .getResourceAsStream(\"project.properties\"); ) {\n+      projectProps.load(projectPropsStream);\n+\n+      setImplementationDescription(projectProps.getProperty(\"project.id\"));\n+      setServerVersion(projectProps.getProperty(\"project.version\"));\n+    } catch (IOException e) {\n+      throw new UncheckedIOException(e);\n+    }\n+\n+    // Lightly customize the capability provider to set publisher name.\n+    ServerCapabilityStatementProvider capabilityStatementProvider =\n+        new ServerCapabilityStatementProvider(this);\n+    capabilityStatementProvider.setPublisher(CAPABILITIES_PUBLISHER);\n+    setServerConformanceProvider(capabilityStatementProvider);\n+  }\n+\n+  /** @see ca.uhn.fhir.rest.server.RestfulServer#initialize() */\n+  @SuppressWarnings(\"unchecked\")\n+  @Override\n+  protected void initialize() throws ServletException {\n+    /*\n+     * Grab the application's Spring WebApplicationContext from the web\n+     * container. We can use this to retrieve beans (and anything that needs\n+     * Spring injection/autowiring, e.g. anything that accesses the DB, must\n+     * be a bean).\n+     */\n+    WebApplicationContext springContext = ContextLoaderListener.getCurrentWebApplicationContext();\n+\n+    // Each IResourceProvider adds support for a specific FHIR resource.\n+    List<IResourceProvider> resourceProviders =\n+        springContext.getBean(SpringConfiguration.BLUEBUTTON_R4_RESOURCE_PROVIDERS, List.class);\n+    setResourceProviders(resourceProviders);\n+\n+    /*\n+     * Each \"plain\" provider has one or more annotated methods that provides\n+     * support for non-resource-type methods, such as transaction, and\n+     * global history.\n+     */\n+    List<Object> plainProviders = new ArrayList<>();\n+    setPlainProviders(plainProviders);\n+\n+    /*\n+     * Register the HAPI server interceptors that have been configured in\n+     * Spring.\n+     */\n+    Collection<IServerInterceptor> hapiInterceptors =\n+        springContext.getBeansOfType(IServerInterceptor.class).values();\n+    for (IServerInterceptor hapiInterceptor : hapiInterceptors) {\n+      this.registerInterceptor(hapiInterceptor);\n+    }\n+    /*\n+     * Enable CORS.\n+     */\n+    CorsConfiguration config = new CorsConfiguration();\n+    CorsInterceptor corsInterceptor = new CorsInterceptor(config);\n+    config.addAllowedHeader(\"Accept\");\n+    config.addAllowedHeader(\"Content-Type\");\n+    config.addAllowedOrigin(\"*\");\n+    config.addExposedHeader(\"Location\");\n+    config.addExposedHeader(\"Content-Location\");\n+    config.setAllowedMethods(Arrays.asList(\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\"));\n+    registerInterceptor(corsInterceptor);\n+\n+    // Enable ETag Support (this is already the default)\n+    setETagSupport(ETagSupportEnum.ENABLED);\n+\n+    // Default to XML and pretty printing.\n+    setDefaultResponseEncoding(EncodingEnum.XML);", "originalCommit": "e316b2bb0753ecc4e7cd534b66e9fa7cc05635b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYxOTk2OQ==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#discussion_r506619969", "bodyText": "No change made here as part of Patient V2. I think one of our partner may have made that changes through a different PR.", "author": "dshekhar18", "createdAt": "2020-10-16T17:28:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU4NzIzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg4MDMxMQ==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#discussion_r507880311", "bodyText": "Confirmed.", "author": "jzulim", "createdAt": "2020-10-19T16:15:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU4NzIzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg5NTMwNA==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#discussion_r507895304", "bodyText": "On second thought, I'd recommend we switch this to JSON for BOTH stu3 and r4 as well as switching pretty to default 'false'", "author": "jzulim", "createdAt": "2020-10-19T16:37:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU4NzIzOA=="}], "type": "inlineReview", "revised_code": {"commit": "265ea9672c7f3b8a04c70e2c78fc3b2ff1fb2c60", "chunk": "diff --git a/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/R4Server.java b/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/V2Server.java\nsimilarity index 83%\nrename from apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/R4Server.java\nrename to apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/V2Server.java\nindex 53fc51829..1512bbfaa 100644\n--- a/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/R4Server.java\n+++ b/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/V2Server.java\n\n@@ -6,13 +6,11 @@ import ca.uhn.fhir.rest.server.ApacheProxyAddressStrategy;\n import ca.uhn.fhir.rest.server.ETagSupportEnum;\n import ca.uhn.fhir.rest.server.IResourceProvider;\n import ca.uhn.fhir.rest.server.RestfulServer;\n-import ca.uhn.fhir.rest.server.interceptor.CorsInterceptor;\n import ca.uhn.fhir.rest.server.interceptor.IServerInterceptor;\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.UncheckedIOException;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collection;\n import java.util.List;\n import java.util.Properties;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU4Nzc0MA==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#discussion_r506587740", "bodyText": "should we check to see if this is set or default to something if it isnt?", "author": "cbrunefearless", "createdAt": "2020-10-16T16:28:55Z", "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/ServerInitializer.java", "diffHunk": "@@ -36,6 +38,8 @@\n   public void onStartup(ServletContext servletContext) throws ServletException {\n     LOGGER.info(\"Initializing Blue Button API backend server...\");\n \n+    appConfig = FhirAppConfiguration.readConfigFromEnvironmentVariables();", "originalCommit": "e316b2bb0753ecc4e7cd534b66e9fa7cc05635b6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "265ea9672c7f3b8a04c70e2c78fc3b2ff1fb2c60", "chunk": "diff --git a/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/ServerInitializer.java b/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/ServerInitializer.java\nindex 027a27df1..b4c218e81 100644\n--- a/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/ServerInitializer.java\n+++ b/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/ServerInitializer.java\n\n@@ -38,8 +36,6 @@ public final class ServerInitializer implements WebApplicationInitializer {\n   public void onStartup(ServletContext servletContext) throws ServletException {\n     LOGGER.info(\"Initializing Blue Button API backend server...\");\n \n-    appConfig = FhirAppConfiguration.readConfigFromEnvironmentVariables();\n-\n     // Create the Spring application context.\n     AnnotationConfigWebApplicationContext springContext =\n         new AnnotationConfigWebApplicationContext();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYwMTg1OQ==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#discussion_r506601859", "bodyText": "Strings.isNullOrEmpty", "author": "cbrunefearless", "createdAt": "2020-10-16T16:55:20Z", "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/R4PatientResourceProvider.java", "diffHunk": "@@ -0,0 +1,838 @@\n+package gov.cms.bfd.server.war.r4.providers;\n+\n+import ca.uhn.fhir.model.api.annotation.Description;\n+import ca.uhn.fhir.model.primitive.IdDt;\n+import ca.uhn.fhir.rest.annotation.IdParam;\n+import ca.uhn.fhir.rest.annotation.OptionalParam;\n+import ca.uhn.fhir.rest.annotation.Read;\n+import ca.uhn.fhir.rest.annotation.RequiredParam;\n+import ca.uhn.fhir.rest.annotation.Search;\n+import ca.uhn.fhir.rest.api.server.RequestDetails;\n+import ca.uhn.fhir.rest.param.DateRangeParam;\n+import ca.uhn.fhir.rest.param.TokenParam;\n+import ca.uhn.fhir.rest.server.IResourceProvider;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.exceptions.ResourceNotFoundException;\n+import com.codahale.metrics.MetricRegistry;\n+import com.codahale.metrics.Timer;\n+import com.newrelic.api.agent.Trace;\n+import gov.cms.bfd.model.codebook.data.CcwCodebookVariable;\n+import gov.cms.bfd.model.rif.Beneficiary;\n+import gov.cms.bfd.model.rif.BeneficiaryHistory;\n+import gov.cms.bfd.model.rif.BeneficiaryHistory_;\n+import gov.cms.bfd.model.rif.Beneficiary_;\n+import gov.cms.bfd.server.war.Operation;\n+import gov.cms.bfd.server.war.commons.LinkBuilder;\n+import gov.cms.bfd.server.war.commons.LoadedFilterManager;\n+import gov.cms.bfd.server.war.commons.OffsetLinkBuilder;\n+import gov.cms.bfd.server.war.commons.PatientLinkBuilder;\n+import gov.cms.bfd.server.war.commons.QueryUtils;\n+import gov.cms.bfd.server.war.commons.TransformerConstants;\n+import java.math.BigDecimal;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+import javax.persistence.EntityManager;\n+import javax.persistence.NoResultException;\n+import javax.persistence.PersistenceContext;\n+import javax.persistence.TypedQuery;\n+import javax.persistence.criteria.CriteriaBuilder;\n+import javax.persistence.criteria.CriteriaQuery;\n+import javax.persistence.criteria.JoinType;\n+import javax.persistence.criteria.Predicate;\n+import javax.persistence.criteria.Root;\n+import javax.persistence.metamodel.SingularAttribute;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.r4.model.Bundle;\n+import org.hl7.fhir.r4.model.IdType;\n+import org.hl7.fhir.r4.model.Identifier;\n+import org.hl7.fhir.r4.model.Patient;\n+import org.slf4j.MDC;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * This FHIR {@link IResourceProvider} adds support for STU3 {@link Patient} resources, derived from\n+ * the CCW beneficiaries.\n+ */\n+@Component\n+public final class R4PatientResourceProvider implements IResourceProvider {\n+  /**\n+   * The {@link Identifier#getSystem()} values that are supported by {@link #searchByIdentifier}.\n+   */\n+  private static final List<String> SUPPORTED_HASH_IDENTIFIER_SYSTEMS =\n+      Arrays.asList(\n+          TransformerConstants.CODING_BBAPI_BENE_MBI_HASH,\n+          TransformerConstants.CODING_BBAPI_BENE_HICN_HASH,\n+          TransformerConstants.CODING_BBAPI_BENE_HICN_HASH_OLD);\n+\n+  private EntityManager entityManager;\n+  private MetricRegistry metricRegistry;\n+  private LoadedFilterManager loadedFilterManager;\n+\n+  /** @param entityManager a JPA {@link EntityManager} connected to the application's database */\n+  @PersistenceContext\n+  public void setEntityManager(EntityManager entityManager) {\n+    this.entityManager = entityManager;\n+  }\n+\n+  /** @param metricRegistry the {@link MetricRegistry} to use */\n+  @Inject\n+  public void setMetricRegistry(MetricRegistry metricRegistry) {\n+    this.metricRegistry = metricRegistry;\n+  }\n+\n+  /** @param loadedFilterManager the {@link R4LoadedFilterManager} to use */\n+  @Inject\n+  public void setLoadedFilterManager(LoadedFilterManager loadedFilterManager) {\n+    this.loadedFilterManager = loadedFilterManager;\n+  }\n+\n+  /** @see ca.uhn.fhir.rest.server.IResourceProvider#getResourceType() */\n+  @Override\n+  public Class<? extends IBaseResource> getResourceType() {\n+    return Patient.class;\n+  }\n+\n+  /**\n+   * Adds support for the FHIR \"read\" operation, for {@link Patient}s. The {@link Read} annotation\n+   * indicates that this method supports the read operation.\n+   *\n+   * <p>Read operations take a single parameter annotated with {@link IdParam}, and should return a\n+   * single resource instance.\n+   *\n+   * @param patientId The read operation takes one parameter, which must be of type {@link IdType}\n+   *     and must be annotated with the {@link IdParam} annotation.\n+   * @param requestDetails a {@link RequestDetails} containing the details of the request URL, used\n+   *     to parse out pagination values\n+   * @return Returns a resource matching the specified {@link IdDt}, or <code>null</code> if none\n+   *     exists.\n+   */\n+  @Read(version = false)\n+  @Trace\n+  public Patient read(@IdParam IdType patientId, RequestDetails requestDetails) {\n+    if (patientId == null) throw new IllegalArgumentException();\n+    if (patientId.getVersionIdPartAsLong() != null) throw new IllegalArgumentException();\n+\n+    String beneIdText = patientId.getIdPart();\n+    if (beneIdText == null || beneIdText.trim().isEmpty()) throw new IllegalArgumentException();\n+\n+    List<String> includeIdentifiersValues = returnIncludeIdentifiersValues(requestDetails);\n+\n+    Operation operation = new Operation(Operation.Endpoint.V2_PATIENT);\n+    operation.setOption(\"by\", \"id\");\n+    operation.setOption(\"IncludeIdentifiers\", includeIdentifiersValues.toString());\n+    operation.publishOperationName();\n+\n+    CriteriaBuilder builder = entityManager.getCriteriaBuilder();\n+    CriteriaQuery<Beneficiary> criteria = builder.createQuery(Beneficiary.class);\n+    Root<Beneficiary> root = criteria.from(Beneficiary.class);\n+\n+    if (hasHICN(includeIdentifiersValues))\n+      root.fetch(Beneficiary_.beneficiaryHistories, JoinType.LEFT);\n+\n+    // if (hasMBI(includeIdentifiersValues))\n+    root.fetch(Beneficiary_.medicareBeneficiaryIdHistories, JoinType.LEFT);\n+\n+    criteria.select(root);\n+    criteria.where(builder.equal(root.get(Beneficiary_.beneficiaryId), beneIdText));\n+\n+    Beneficiary beneficiary = null;\n+    Long beneByIdQueryNanoSeconds = null;\n+    Timer.Context timerBeneQuery =\n+        metricRegistry\n+            .timer(MetricRegistry.name(getClass().getSimpleName(), \"query\", \"bene_by_id\"))\n+            .time();\n+    try {\n+      beneficiary = entityManager.createQuery(criteria).getSingleResult();\n+    } catch (NoResultException e) {\n+      throw new ResourceNotFoundException(patientId);\n+    } finally {\n+      beneByIdQueryNanoSeconds = timerBeneQuery.stop();\n+\n+      TransformerUtilsV2.recordQueryInMdc(\n+          String.format(\"bene_by_id.include_%s\", String.join(\"_\", includeIdentifiersValues)),\n+          beneByIdQueryNanoSeconds,\n+          beneficiary == null ? 0 : 1);\n+    }\n+\n+    // Null out the unhashed HICNs if we're not supposed to be returning them\n+    if (!hasHICN(includeIdentifiersValues)) {\n+      beneficiary.setHicnUnhashed(Optional.empty());\n+    }\n+\n+    Patient patient =\n+        BeneficiaryTransformerV2.transform(metricRegistry, beneficiary, includeIdentifiersValues);\n+    return patient;\n+  }\n+\n+  /**\n+   * Adds support for the FHIR \"search\" operation for {@link Patient}s, allowing users to search by\n+   * {@link Patient#getId()}.\n+   *\n+   * <p>The {@link Search} annotation indicates that this method supports the search operation.\n+   * There may be many different methods annotated with this {@link Search} annotation, to support\n+   * many different search criteria.\n+   *\n+   * @param logicalId a {@link TokenParam} (with no system, per the spec) for the {@link\n+   *     Patient#getId()} to try and find a matching {@link Patient} for\n+   * @param startIndex an {@link OptionalParam} for the startIndex (or offset) used to determine\n+   *     pagination\n+   * @param lastUpdated an {@link OptionalParam} to filter the results based on the passed date\n+   *     range\n+   * @param requestDetails a {@link RequestDetails} containing the details of the request URL, used\n+   *     to parse out pagination values\n+   * @return Returns a {@link List} of {@link Patient}s, which may contain multiple matching\n+   *     resources, or may also be empty.\n+   */\n+  @Search\n+  @Trace\n+  public Bundle searchByLogicalId(\n+      @RequiredParam(name = Patient.SP_RES_ID)\n+          @Description(shortDefinition = \"The patient identifier to search for\")\n+          TokenParam logicalId,\n+      @OptionalParam(name = \"startIndex\")\n+          @Description(shortDefinition = \"The offset used for result pagination\")\n+          String startIndex,\n+      @OptionalParam(name = \"_lastUpdated\")\n+          @Description(shortDefinition = \"Include resources last updated in the given range\")\n+          DateRangeParam lastUpdated,\n+      RequestDetails requestDetails) {\n+    if (logicalId.getQueryParameterQualifier() != null)\n+      throw new InvalidRequestException(\n+          \"Unsupported query parameter qualifier: \" + logicalId.getQueryParameterQualifier());\n+    if (logicalId.getSystem() != null && !logicalId.getSystem().isEmpty())", "originalCommit": "e316b2bb0753ecc4e7cd534b66e9fa7cc05635b6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "265ea9672c7f3b8a04c70e2c78fc3b2ff1fb2c60", "chunk": "diff --git a/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/R4PatientResourceProvider.java b/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/R4PatientResourceProvider.java\nindex 276ae07d0..67450ab9d 100644\n--- a/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/R4PatientResourceProvider.java\n+++ b/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/R4PatientResourceProvider.java\n\n@@ -56,7 +56,7 @@ import org.slf4j.MDC;\n import org.springframework.stereotype.Component;\n \n /**\n- * This FHIR {@link IResourceProvider} adds support for STU3 {@link Patient} resources, derived from\n+ * This FHIR {@link IResourceProvider} adds support for R4 {@link Patient} resources, derived from\n  * the CCW beneficiaries.\n  */\n @Component\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYwMjQ1OQ==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#discussion_r506602459", "bodyText": "might be better to do a switch statement here", "author": "cbrunefearless", "createdAt": "2020-10-16T16:56:30Z", "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/R4PatientResourceProvider.java", "diffHunk": "@@ -0,0 +1,838 @@\n+package gov.cms.bfd.server.war.r4.providers;\n+\n+import ca.uhn.fhir.model.api.annotation.Description;\n+import ca.uhn.fhir.model.primitive.IdDt;\n+import ca.uhn.fhir.rest.annotation.IdParam;\n+import ca.uhn.fhir.rest.annotation.OptionalParam;\n+import ca.uhn.fhir.rest.annotation.Read;\n+import ca.uhn.fhir.rest.annotation.RequiredParam;\n+import ca.uhn.fhir.rest.annotation.Search;\n+import ca.uhn.fhir.rest.api.server.RequestDetails;\n+import ca.uhn.fhir.rest.param.DateRangeParam;\n+import ca.uhn.fhir.rest.param.TokenParam;\n+import ca.uhn.fhir.rest.server.IResourceProvider;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.exceptions.ResourceNotFoundException;\n+import com.codahale.metrics.MetricRegistry;\n+import com.codahale.metrics.Timer;\n+import com.newrelic.api.agent.Trace;\n+import gov.cms.bfd.model.codebook.data.CcwCodebookVariable;\n+import gov.cms.bfd.model.rif.Beneficiary;\n+import gov.cms.bfd.model.rif.BeneficiaryHistory;\n+import gov.cms.bfd.model.rif.BeneficiaryHistory_;\n+import gov.cms.bfd.model.rif.Beneficiary_;\n+import gov.cms.bfd.server.war.Operation;\n+import gov.cms.bfd.server.war.commons.LinkBuilder;\n+import gov.cms.bfd.server.war.commons.LoadedFilterManager;\n+import gov.cms.bfd.server.war.commons.OffsetLinkBuilder;\n+import gov.cms.bfd.server.war.commons.PatientLinkBuilder;\n+import gov.cms.bfd.server.war.commons.QueryUtils;\n+import gov.cms.bfd.server.war.commons.TransformerConstants;\n+import java.math.BigDecimal;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+import javax.persistence.EntityManager;\n+import javax.persistence.NoResultException;\n+import javax.persistence.PersistenceContext;\n+import javax.persistence.TypedQuery;\n+import javax.persistence.criteria.CriteriaBuilder;\n+import javax.persistence.criteria.CriteriaQuery;\n+import javax.persistence.criteria.JoinType;\n+import javax.persistence.criteria.Predicate;\n+import javax.persistence.criteria.Root;\n+import javax.persistence.metamodel.SingularAttribute;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.r4.model.Bundle;\n+import org.hl7.fhir.r4.model.IdType;\n+import org.hl7.fhir.r4.model.Identifier;\n+import org.hl7.fhir.r4.model.Patient;\n+import org.slf4j.MDC;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * This FHIR {@link IResourceProvider} adds support for STU3 {@link Patient} resources, derived from\n+ * the CCW beneficiaries.\n+ */\n+@Component\n+public final class R4PatientResourceProvider implements IResourceProvider {\n+  /**\n+   * The {@link Identifier#getSystem()} values that are supported by {@link #searchByIdentifier}.\n+   */\n+  private static final List<String> SUPPORTED_HASH_IDENTIFIER_SYSTEMS =\n+      Arrays.asList(\n+          TransformerConstants.CODING_BBAPI_BENE_MBI_HASH,\n+          TransformerConstants.CODING_BBAPI_BENE_HICN_HASH,\n+          TransformerConstants.CODING_BBAPI_BENE_HICN_HASH_OLD);\n+\n+  private EntityManager entityManager;\n+  private MetricRegistry metricRegistry;\n+  private LoadedFilterManager loadedFilterManager;\n+\n+  /** @param entityManager a JPA {@link EntityManager} connected to the application's database */\n+  @PersistenceContext\n+  public void setEntityManager(EntityManager entityManager) {\n+    this.entityManager = entityManager;\n+  }\n+\n+  /** @param metricRegistry the {@link MetricRegistry} to use */\n+  @Inject\n+  public void setMetricRegistry(MetricRegistry metricRegistry) {\n+    this.metricRegistry = metricRegistry;\n+  }\n+\n+  /** @param loadedFilterManager the {@link R4LoadedFilterManager} to use */\n+  @Inject\n+  public void setLoadedFilterManager(LoadedFilterManager loadedFilterManager) {\n+    this.loadedFilterManager = loadedFilterManager;\n+  }\n+\n+  /** @see ca.uhn.fhir.rest.server.IResourceProvider#getResourceType() */\n+  @Override\n+  public Class<? extends IBaseResource> getResourceType() {\n+    return Patient.class;\n+  }\n+\n+  /**\n+   * Adds support for the FHIR \"read\" operation, for {@link Patient}s. The {@link Read} annotation\n+   * indicates that this method supports the read operation.\n+   *\n+   * <p>Read operations take a single parameter annotated with {@link IdParam}, and should return a\n+   * single resource instance.\n+   *\n+   * @param patientId The read operation takes one parameter, which must be of type {@link IdType}\n+   *     and must be annotated with the {@link IdParam} annotation.\n+   * @param requestDetails a {@link RequestDetails} containing the details of the request URL, used\n+   *     to parse out pagination values\n+   * @return Returns a resource matching the specified {@link IdDt}, or <code>null</code> if none\n+   *     exists.\n+   */\n+  @Read(version = false)\n+  @Trace\n+  public Patient read(@IdParam IdType patientId, RequestDetails requestDetails) {\n+    if (patientId == null) throw new IllegalArgumentException();\n+    if (patientId.getVersionIdPartAsLong() != null) throw new IllegalArgumentException();\n+\n+    String beneIdText = patientId.getIdPart();\n+    if (beneIdText == null || beneIdText.trim().isEmpty()) throw new IllegalArgumentException();\n+\n+    List<String> includeIdentifiersValues = returnIncludeIdentifiersValues(requestDetails);\n+\n+    Operation operation = new Operation(Operation.Endpoint.V2_PATIENT);\n+    operation.setOption(\"by\", \"id\");\n+    operation.setOption(\"IncludeIdentifiers\", includeIdentifiersValues.toString());\n+    operation.publishOperationName();\n+\n+    CriteriaBuilder builder = entityManager.getCriteriaBuilder();\n+    CriteriaQuery<Beneficiary> criteria = builder.createQuery(Beneficiary.class);\n+    Root<Beneficiary> root = criteria.from(Beneficiary.class);\n+\n+    if (hasHICN(includeIdentifiersValues))\n+      root.fetch(Beneficiary_.beneficiaryHistories, JoinType.LEFT);\n+\n+    // if (hasMBI(includeIdentifiersValues))\n+    root.fetch(Beneficiary_.medicareBeneficiaryIdHistories, JoinType.LEFT);\n+\n+    criteria.select(root);\n+    criteria.where(builder.equal(root.get(Beneficiary_.beneficiaryId), beneIdText));\n+\n+    Beneficiary beneficiary = null;\n+    Long beneByIdQueryNanoSeconds = null;\n+    Timer.Context timerBeneQuery =\n+        metricRegistry\n+            .timer(MetricRegistry.name(getClass().getSimpleName(), \"query\", \"bene_by_id\"))\n+            .time();\n+    try {\n+      beneficiary = entityManager.createQuery(criteria).getSingleResult();\n+    } catch (NoResultException e) {\n+      throw new ResourceNotFoundException(patientId);\n+    } finally {\n+      beneByIdQueryNanoSeconds = timerBeneQuery.stop();\n+\n+      TransformerUtilsV2.recordQueryInMdc(\n+          String.format(\"bene_by_id.include_%s\", String.join(\"_\", includeIdentifiersValues)),\n+          beneByIdQueryNanoSeconds,\n+          beneficiary == null ? 0 : 1);\n+    }\n+\n+    // Null out the unhashed HICNs if we're not supposed to be returning them\n+    if (!hasHICN(includeIdentifiersValues)) {\n+      beneficiary.setHicnUnhashed(Optional.empty());\n+    }\n+\n+    Patient patient =\n+        BeneficiaryTransformerV2.transform(metricRegistry, beneficiary, includeIdentifiersValues);\n+    return patient;\n+  }\n+\n+  /**\n+   * Adds support for the FHIR \"search\" operation for {@link Patient}s, allowing users to search by\n+   * {@link Patient#getId()}.\n+   *\n+   * <p>The {@link Search} annotation indicates that this method supports the search operation.\n+   * There may be many different methods annotated with this {@link Search} annotation, to support\n+   * many different search criteria.\n+   *\n+   * @param logicalId a {@link TokenParam} (with no system, per the spec) for the {@link\n+   *     Patient#getId()} to try and find a matching {@link Patient} for\n+   * @param startIndex an {@link OptionalParam} for the startIndex (or offset) used to determine\n+   *     pagination\n+   * @param lastUpdated an {@link OptionalParam} to filter the results based on the passed date\n+   *     range\n+   * @param requestDetails a {@link RequestDetails} containing the details of the request URL, used\n+   *     to parse out pagination values\n+   * @return Returns a {@link List} of {@link Patient}s, which may contain multiple matching\n+   *     resources, or may also be empty.\n+   */\n+  @Search\n+  @Trace\n+  public Bundle searchByLogicalId(\n+      @RequiredParam(name = Patient.SP_RES_ID)\n+          @Description(shortDefinition = \"The patient identifier to search for\")\n+          TokenParam logicalId,\n+      @OptionalParam(name = \"startIndex\")\n+          @Description(shortDefinition = \"The offset used for result pagination\")\n+          String startIndex,\n+      @OptionalParam(name = \"_lastUpdated\")\n+          @Description(shortDefinition = \"Include resources last updated in the given range\")\n+          DateRangeParam lastUpdated,\n+      RequestDetails requestDetails) {\n+    if (logicalId.getQueryParameterQualifier() != null)\n+      throw new InvalidRequestException(\n+          \"Unsupported query parameter qualifier: \" + logicalId.getQueryParameterQualifier());\n+    if (logicalId.getSystem() != null && !logicalId.getSystem().isEmpty())\n+      throw new InvalidRequestException(\n+          \"Unsupported query parameter system: \" + logicalId.getSystem());\n+    if (logicalId.getValueNotNull().isEmpty())\n+      throw new InvalidRequestException(\n+          \"Unsupported query parameter value: \" + logicalId.getValue());\n+\n+    List<IBaseResource> patients;\n+    if (loadedFilterManager.isResultSetEmpty(logicalId.getValue(), lastUpdated)) {\n+      patients = Collections.emptyList();\n+    } else {\n+      try {\n+        patients =\n+            Optional.of(read(new IdType(logicalId.getValue()), requestDetails))\n+                .filter(p -> QueryUtils.isInRange(p.getMeta().getLastUpdated(), lastUpdated))\n+                .map(p -> Collections.singletonList((IBaseResource) p))\n+                .orElse(Collections.emptyList());\n+      } catch (ResourceNotFoundException e) {\n+        patients = Collections.emptyList();\n+      }\n+    }\n+\n+    OffsetLinkBuilder paging = new OffsetLinkBuilder(requestDetails, \"/Patient?\");\n+    Bundle bundle =\n+        TransformerUtilsV2.createBundle(paging, patients, loadedFilterManager.getTransactionTime());\n+    return bundle;\n+  }\n+\n+  @Search\n+  public Bundle searchByCoverageContract(\n+      // This is very explicit as a place holder until this kind\n+      // of relational search is more common.\n+      @RequiredParam(name = \"_has:Coverage.extension\")\n+          @Description(shortDefinition = \"Part D coverage type\")\n+          TokenParam coverageId,\n+      @OptionalParam(name = \"cursor\")\n+          @Description(shortDefinition = \"The cursor used for result pagination\")\n+          String cursor,\n+      RequestDetails requestDetails) {\n+    checkCoverageId(coverageId);\n+    List<String> includeIdentifiersValues = returnIncludeIdentifiersValues(requestDetails);\n+    PatientLinkBuilder paging = new PatientLinkBuilder(requestDetails.getCompleteUrl());\n+    checkPageSize(paging);\n+\n+    Operation operation = new Operation(Operation.Endpoint.V2_PATIENT);\n+    operation.setOption(\"by\", \"coverageContract\");\n+    operation.setOption(\"IncludeIdentifiers\", includeIdentifiersValues.toString());\n+    operation.publishOperationName();\n+\n+    List<Beneficiary> matchingBeneficiaries =\n+        fetchBeneficiaries(coverageId, includeIdentifiersValues, paging);\n+\n+    List<IBaseResource> patients =\n+        matchingBeneficiaries.stream()\n+            .map(\n+                beneficiary -> {\n+                  // Null out the unhashed HICNs if we're not supposed to be returning them\n+                  if (!hasHICN(includeIdentifiersValues)) {\n+                    beneficiary.setHicnUnhashed(Optional.empty());\n+                  }\n+\n+                  Patient patient =\n+                      BeneficiaryTransformerV2.transform(\n+                          metricRegistry, beneficiary, includeIdentifiersValues);\n+                  return patient;\n+                })\n+            .collect(Collectors.toList());\n+\n+    Bundle bundle =\n+        TransformerUtilsV2.createBundle(patients, paging, loadedFilterManager.getTransactionTime());\n+    TransformerUtilsV2.workAroundHAPIIssue1585(requestDetails);\n+    return bundle;\n+  }\n+\n+  private CcwCodebookVariable partDCwVariableFor(String system) {\n+    try {\n+      return CcwCodebookVariable.valueOf(system.toUpperCase());\n+    } catch (IllegalArgumentException e) {\n+      throw new InvalidRequestException(\"Unsupported extension system: \" + system);\n+    }\n+  }\n+\n+  private String partDFieldFor(CcwCodebookVariable month) {\n+    if (month == CcwCodebookVariable.PTDCNTRCT01) return \"partDContractNumberJanId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT02) return \"partDContractNumberFebId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT03) return \"partDContractNumberMarId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT04) return \"partDContractNumberAprId\";", "originalCommit": "e316b2bb0753ecc4e7cd534b66e9fa7cc05635b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYyMDk2OQ==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#discussion_r506620969", "bodyText": "No change made here as part of V2 POC. This is same for V1. We can look at existing code redesign through a different effort.", "author": "dshekhar18", "createdAt": "2020-10-16T17:30:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYwMjQ1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "265ea9672c7f3b8a04c70e2c78fc3b2ff1fb2c60", "chunk": "diff --git a/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/R4PatientResourceProvider.java b/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/R4PatientResourceProvider.java\nindex 276ae07d0..67450ab9d 100644\n--- a/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/R4PatientResourceProvider.java\n+++ b/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/R4PatientResourceProvider.java\n\n@@ -56,7 +56,7 @@ import org.slf4j.MDC;\n import org.springframework.stereotype.Component;\n \n /**\n- * This FHIR {@link IResourceProvider} adds support for STU3 {@link Patient} resources, derived from\n+ * This FHIR {@link IResourceProvider} adds support for R4 {@link Patient} resources, derived from\n  * the CCW beneficiaries.\n  */\n @Component\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYwMzg4NA==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#discussion_r506603884", "bodyText": "As long as sql injection is prevented i am fine with this", "author": "cbrunefearless", "createdAt": "2020-10-16T16:59:05Z", "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/R4PatientResourceProvider.java", "diffHunk": "@@ -0,0 +1,838 @@\n+package gov.cms.bfd.server.war.r4.providers;\n+\n+import ca.uhn.fhir.model.api.annotation.Description;\n+import ca.uhn.fhir.model.primitive.IdDt;\n+import ca.uhn.fhir.rest.annotation.IdParam;\n+import ca.uhn.fhir.rest.annotation.OptionalParam;\n+import ca.uhn.fhir.rest.annotation.Read;\n+import ca.uhn.fhir.rest.annotation.RequiredParam;\n+import ca.uhn.fhir.rest.annotation.Search;\n+import ca.uhn.fhir.rest.api.server.RequestDetails;\n+import ca.uhn.fhir.rest.param.DateRangeParam;\n+import ca.uhn.fhir.rest.param.TokenParam;\n+import ca.uhn.fhir.rest.server.IResourceProvider;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.exceptions.ResourceNotFoundException;\n+import com.codahale.metrics.MetricRegistry;\n+import com.codahale.metrics.Timer;\n+import com.newrelic.api.agent.Trace;\n+import gov.cms.bfd.model.codebook.data.CcwCodebookVariable;\n+import gov.cms.bfd.model.rif.Beneficiary;\n+import gov.cms.bfd.model.rif.BeneficiaryHistory;\n+import gov.cms.bfd.model.rif.BeneficiaryHistory_;\n+import gov.cms.bfd.model.rif.Beneficiary_;\n+import gov.cms.bfd.server.war.Operation;\n+import gov.cms.bfd.server.war.commons.LinkBuilder;\n+import gov.cms.bfd.server.war.commons.LoadedFilterManager;\n+import gov.cms.bfd.server.war.commons.OffsetLinkBuilder;\n+import gov.cms.bfd.server.war.commons.PatientLinkBuilder;\n+import gov.cms.bfd.server.war.commons.QueryUtils;\n+import gov.cms.bfd.server.war.commons.TransformerConstants;\n+import java.math.BigDecimal;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+import javax.persistence.EntityManager;\n+import javax.persistence.NoResultException;\n+import javax.persistence.PersistenceContext;\n+import javax.persistence.TypedQuery;\n+import javax.persistence.criteria.CriteriaBuilder;\n+import javax.persistence.criteria.CriteriaQuery;\n+import javax.persistence.criteria.JoinType;\n+import javax.persistence.criteria.Predicate;\n+import javax.persistence.criteria.Root;\n+import javax.persistence.metamodel.SingularAttribute;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.r4.model.Bundle;\n+import org.hl7.fhir.r4.model.IdType;\n+import org.hl7.fhir.r4.model.Identifier;\n+import org.hl7.fhir.r4.model.Patient;\n+import org.slf4j.MDC;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * This FHIR {@link IResourceProvider} adds support for STU3 {@link Patient} resources, derived from\n+ * the CCW beneficiaries.\n+ */\n+@Component\n+public final class R4PatientResourceProvider implements IResourceProvider {\n+  /**\n+   * The {@link Identifier#getSystem()} values that are supported by {@link #searchByIdentifier}.\n+   */\n+  private static final List<String> SUPPORTED_HASH_IDENTIFIER_SYSTEMS =\n+      Arrays.asList(\n+          TransformerConstants.CODING_BBAPI_BENE_MBI_HASH,\n+          TransformerConstants.CODING_BBAPI_BENE_HICN_HASH,\n+          TransformerConstants.CODING_BBAPI_BENE_HICN_HASH_OLD);\n+\n+  private EntityManager entityManager;\n+  private MetricRegistry metricRegistry;\n+  private LoadedFilterManager loadedFilterManager;\n+\n+  /** @param entityManager a JPA {@link EntityManager} connected to the application's database */\n+  @PersistenceContext\n+  public void setEntityManager(EntityManager entityManager) {\n+    this.entityManager = entityManager;\n+  }\n+\n+  /** @param metricRegistry the {@link MetricRegistry} to use */\n+  @Inject\n+  public void setMetricRegistry(MetricRegistry metricRegistry) {\n+    this.metricRegistry = metricRegistry;\n+  }\n+\n+  /** @param loadedFilterManager the {@link R4LoadedFilterManager} to use */\n+  @Inject\n+  public void setLoadedFilterManager(LoadedFilterManager loadedFilterManager) {\n+    this.loadedFilterManager = loadedFilterManager;\n+  }\n+\n+  /** @see ca.uhn.fhir.rest.server.IResourceProvider#getResourceType() */\n+  @Override\n+  public Class<? extends IBaseResource> getResourceType() {\n+    return Patient.class;\n+  }\n+\n+  /**\n+   * Adds support for the FHIR \"read\" operation, for {@link Patient}s. The {@link Read} annotation\n+   * indicates that this method supports the read operation.\n+   *\n+   * <p>Read operations take a single parameter annotated with {@link IdParam}, and should return a\n+   * single resource instance.\n+   *\n+   * @param patientId The read operation takes one parameter, which must be of type {@link IdType}\n+   *     and must be annotated with the {@link IdParam} annotation.\n+   * @param requestDetails a {@link RequestDetails} containing the details of the request URL, used\n+   *     to parse out pagination values\n+   * @return Returns a resource matching the specified {@link IdDt}, or <code>null</code> if none\n+   *     exists.\n+   */\n+  @Read(version = false)\n+  @Trace\n+  public Patient read(@IdParam IdType patientId, RequestDetails requestDetails) {\n+    if (patientId == null) throw new IllegalArgumentException();\n+    if (patientId.getVersionIdPartAsLong() != null) throw new IllegalArgumentException();\n+\n+    String beneIdText = patientId.getIdPart();\n+    if (beneIdText == null || beneIdText.trim().isEmpty()) throw new IllegalArgumentException();\n+\n+    List<String> includeIdentifiersValues = returnIncludeIdentifiersValues(requestDetails);\n+\n+    Operation operation = new Operation(Operation.Endpoint.V2_PATIENT);\n+    operation.setOption(\"by\", \"id\");\n+    operation.setOption(\"IncludeIdentifiers\", includeIdentifiersValues.toString());\n+    operation.publishOperationName();\n+\n+    CriteriaBuilder builder = entityManager.getCriteriaBuilder();\n+    CriteriaQuery<Beneficiary> criteria = builder.createQuery(Beneficiary.class);\n+    Root<Beneficiary> root = criteria.from(Beneficiary.class);\n+\n+    if (hasHICN(includeIdentifiersValues))\n+      root.fetch(Beneficiary_.beneficiaryHistories, JoinType.LEFT);\n+\n+    // if (hasMBI(includeIdentifiersValues))\n+    root.fetch(Beneficiary_.medicareBeneficiaryIdHistories, JoinType.LEFT);\n+\n+    criteria.select(root);\n+    criteria.where(builder.equal(root.get(Beneficiary_.beneficiaryId), beneIdText));\n+\n+    Beneficiary beneficiary = null;\n+    Long beneByIdQueryNanoSeconds = null;\n+    Timer.Context timerBeneQuery =\n+        metricRegistry\n+            .timer(MetricRegistry.name(getClass().getSimpleName(), \"query\", \"bene_by_id\"))\n+            .time();\n+    try {\n+      beneficiary = entityManager.createQuery(criteria).getSingleResult();\n+    } catch (NoResultException e) {\n+      throw new ResourceNotFoundException(patientId);\n+    } finally {\n+      beneByIdQueryNanoSeconds = timerBeneQuery.stop();\n+\n+      TransformerUtilsV2.recordQueryInMdc(\n+          String.format(\"bene_by_id.include_%s\", String.join(\"_\", includeIdentifiersValues)),\n+          beneByIdQueryNanoSeconds,\n+          beneficiary == null ? 0 : 1);\n+    }\n+\n+    // Null out the unhashed HICNs if we're not supposed to be returning them\n+    if (!hasHICN(includeIdentifiersValues)) {\n+      beneficiary.setHicnUnhashed(Optional.empty());\n+    }\n+\n+    Patient patient =\n+        BeneficiaryTransformerV2.transform(metricRegistry, beneficiary, includeIdentifiersValues);\n+    return patient;\n+  }\n+\n+  /**\n+   * Adds support for the FHIR \"search\" operation for {@link Patient}s, allowing users to search by\n+   * {@link Patient#getId()}.\n+   *\n+   * <p>The {@link Search} annotation indicates that this method supports the search operation.\n+   * There may be many different methods annotated with this {@link Search} annotation, to support\n+   * many different search criteria.\n+   *\n+   * @param logicalId a {@link TokenParam} (with no system, per the spec) for the {@link\n+   *     Patient#getId()} to try and find a matching {@link Patient} for\n+   * @param startIndex an {@link OptionalParam} for the startIndex (or offset) used to determine\n+   *     pagination\n+   * @param lastUpdated an {@link OptionalParam} to filter the results based on the passed date\n+   *     range\n+   * @param requestDetails a {@link RequestDetails} containing the details of the request URL, used\n+   *     to parse out pagination values\n+   * @return Returns a {@link List} of {@link Patient}s, which may contain multiple matching\n+   *     resources, or may also be empty.\n+   */\n+  @Search\n+  @Trace\n+  public Bundle searchByLogicalId(\n+      @RequiredParam(name = Patient.SP_RES_ID)\n+          @Description(shortDefinition = \"The patient identifier to search for\")\n+          TokenParam logicalId,\n+      @OptionalParam(name = \"startIndex\")\n+          @Description(shortDefinition = \"The offset used for result pagination\")\n+          String startIndex,\n+      @OptionalParam(name = \"_lastUpdated\")\n+          @Description(shortDefinition = \"Include resources last updated in the given range\")\n+          DateRangeParam lastUpdated,\n+      RequestDetails requestDetails) {\n+    if (logicalId.getQueryParameterQualifier() != null)\n+      throw new InvalidRequestException(\n+          \"Unsupported query parameter qualifier: \" + logicalId.getQueryParameterQualifier());\n+    if (logicalId.getSystem() != null && !logicalId.getSystem().isEmpty())\n+      throw new InvalidRequestException(\n+          \"Unsupported query parameter system: \" + logicalId.getSystem());\n+    if (logicalId.getValueNotNull().isEmpty())\n+      throw new InvalidRequestException(\n+          \"Unsupported query parameter value: \" + logicalId.getValue());\n+\n+    List<IBaseResource> patients;\n+    if (loadedFilterManager.isResultSetEmpty(logicalId.getValue(), lastUpdated)) {\n+      patients = Collections.emptyList();\n+    } else {\n+      try {\n+        patients =\n+            Optional.of(read(new IdType(logicalId.getValue()), requestDetails))\n+                .filter(p -> QueryUtils.isInRange(p.getMeta().getLastUpdated(), lastUpdated))\n+                .map(p -> Collections.singletonList((IBaseResource) p))\n+                .orElse(Collections.emptyList());\n+      } catch (ResourceNotFoundException e) {\n+        patients = Collections.emptyList();\n+      }\n+    }\n+\n+    OffsetLinkBuilder paging = new OffsetLinkBuilder(requestDetails, \"/Patient?\");\n+    Bundle bundle =\n+        TransformerUtilsV2.createBundle(paging, patients, loadedFilterManager.getTransactionTime());\n+    return bundle;\n+  }\n+\n+  @Search\n+  public Bundle searchByCoverageContract(\n+      // This is very explicit as a place holder until this kind\n+      // of relational search is more common.\n+      @RequiredParam(name = \"_has:Coverage.extension\")\n+          @Description(shortDefinition = \"Part D coverage type\")\n+          TokenParam coverageId,\n+      @OptionalParam(name = \"cursor\")\n+          @Description(shortDefinition = \"The cursor used for result pagination\")\n+          String cursor,\n+      RequestDetails requestDetails) {\n+    checkCoverageId(coverageId);\n+    List<String> includeIdentifiersValues = returnIncludeIdentifiersValues(requestDetails);\n+    PatientLinkBuilder paging = new PatientLinkBuilder(requestDetails.getCompleteUrl());\n+    checkPageSize(paging);\n+\n+    Operation operation = new Operation(Operation.Endpoint.V2_PATIENT);\n+    operation.setOption(\"by\", \"coverageContract\");\n+    operation.setOption(\"IncludeIdentifiers\", includeIdentifiersValues.toString());\n+    operation.publishOperationName();\n+\n+    List<Beneficiary> matchingBeneficiaries =\n+        fetchBeneficiaries(coverageId, includeIdentifiersValues, paging);\n+\n+    List<IBaseResource> patients =\n+        matchingBeneficiaries.stream()\n+            .map(\n+                beneficiary -> {\n+                  // Null out the unhashed HICNs if we're not supposed to be returning them\n+                  if (!hasHICN(includeIdentifiersValues)) {\n+                    beneficiary.setHicnUnhashed(Optional.empty());\n+                  }\n+\n+                  Patient patient =\n+                      BeneficiaryTransformerV2.transform(\n+                          metricRegistry, beneficiary, includeIdentifiersValues);\n+                  return patient;\n+                })\n+            .collect(Collectors.toList());\n+\n+    Bundle bundle =\n+        TransformerUtilsV2.createBundle(patients, paging, loadedFilterManager.getTransactionTime());\n+    TransformerUtilsV2.workAroundHAPIIssue1585(requestDetails);\n+    return bundle;\n+  }\n+\n+  private CcwCodebookVariable partDCwVariableFor(String system) {\n+    try {\n+      return CcwCodebookVariable.valueOf(system.toUpperCase());\n+    } catch (IllegalArgumentException e) {\n+      throw new InvalidRequestException(\"Unsupported extension system: \" + system);\n+    }\n+  }\n+\n+  private String partDFieldFor(CcwCodebookVariable month) {\n+    if (month == CcwCodebookVariable.PTDCNTRCT01) return \"partDContractNumberJanId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT02) return \"partDContractNumberFebId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT03) return \"partDContractNumberMarId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT04) return \"partDContractNumberAprId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT05) return \"partDContractNumberMayId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT06) return \"partDContractNumberJunId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT07) return \"partDContractNumberJulId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT08) return \"partDContractNumberAugId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT09) return \"partDContractNumberSeptId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT10) return \"partDContractNumberOctId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT11) return \"partDContractNumberNovId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT12) return \"partDContractNumberDecId\";\n+    throw new InvalidRequestException(\n+        \"Unsupported extension system: \" + month.getVariable().getId().toLowerCase());\n+  }\n+\n+  /**\n+   * Fetch beneficiaries for the PartD coverage parameter. If includeIdentiers are present then the\n+   * entity mappings are fetched as well\n+   *\n+   * @param coverageId coverage type\n+   * @param includedIdentifiers list from the includeIdentifier header\n+   * @param paging specified\n+   * @return the beneficiaries\n+   */\n+  private List<Beneficiary> fetchBeneficiaries(\n+      TokenParam coverageId, List<String> includedIdentifiers, PatientLinkBuilder paging) {\n+    String contractMonth =\n+        coverageId.getSystem().substring(coverageId.getSystem().lastIndexOf('/') + 1);\n+    CcwCodebookVariable partDContractMonth = partDCwVariableFor(contractMonth);\n+    String contractMonthField = partDFieldFor(partDContractMonth);\n+    String contractCode = coverageId.getValueNotNull();\n+\n+    // Fetching with joins is not compatible with setMaxResults as explained in this post:\n+    // https://stackoverflow.com/questions/53569908/jpa-eager-fetching-and-pagination-best-practices\n+    // So, in cases where there are joins and paging, we query in two steps: first fetch bene-ids\n+    // with paging and then fetch full benes with joins.\n+    boolean useTwoSteps =\n+        (hasHICN(includedIdentifiers) || hasMBI(includedIdentifiers)) && paging.isPagingRequested();\n+    if (useTwoSteps) {\n+      // Fetch ids\n+      List<String> ids =\n+          queryBeneficiaryIds(contractMonthField, contractCode, paging)\n+              .setMaxResults(paging.getPageSize())\n+              .getResultList();\n+\n+      // Fetch the benes using the ids\n+      return queryBeneficiariesByIds(ids, includedIdentifiers).getResultList();\n+    } else {\n+      // Fetch benes and their histories in one query\n+      return queryBeneficiariesBy(contractMonthField, contractCode, paging, includedIdentifiers)\n+          .setMaxResults(paging.getPageSize())\n+          .getResultList();\n+    }\n+  }\n+\n+  /**\n+   * Build a criteria for a general Beneficiary query\n+   *\n+   * @param field to match on\n+   * @param value to match on\n+   * @param paging to use for the result set\n+   * @param identifiers to add for many-to-one relations\n+   * @return the criteria\n+   */\n+  private TypedQuery<Beneficiary> queryBeneficiariesBy(\n+      String field, String value, PatientLinkBuilder paging, List<String> identifiers) {\n+    String joinsClause = \"\";\n+    joinsClause += \"left join fetch b.medicareBeneficiaryIdHistories \";\n+    if (hasHICN(identifiers)) joinsClause += \"left join fetch b.beneficiaryHistories \";\n+\n+    if (paging.isPagingRequested() && !paging.isFirstPage()) {\n+      String query =\n+          \"select b from Beneficiary b \"\n+              + joinsClause\n+              + \"where b.\"\n+              + field", "originalCommit": "e316b2bb0753ecc4e7cd534b66e9fa7cc05635b6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "265ea9672c7f3b8a04c70e2c78fc3b2ff1fb2c60", "chunk": "diff --git a/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/R4PatientResourceProvider.java b/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/R4PatientResourceProvider.java\nindex 276ae07d0..67450ab9d 100644\n--- a/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/R4PatientResourceProvider.java\n+++ b/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/R4PatientResourceProvider.java\n\n@@ -56,7 +56,7 @@ import org.slf4j.MDC;\n import org.springframework.stereotype.Component;\n \n /**\n- * This FHIR {@link IResourceProvider} adds support for STU3 {@link Patient} resources, derived from\n+ * This FHIR {@link IResourceProvider} adds support for R4 {@link Patient} resources, derived from\n  * the CCW beneficiaries.\n  */\n @Component\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYwNDk1Mw==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#discussion_r506604953", "bodyText": "Strings.isNullOrEmpty", "author": "cbrunefearless", "createdAt": "2020-10-16T17:01:06Z", "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/R4PatientResourceProvider.java", "diffHunk": "@@ -0,0 +1,838 @@\n+package gov.cms.bfd.server.war.r4.providers;\n+\n+import ca.uhn.fhir.model.api.annotation.Description;\n+import ca.uhn.fhir.model.primitive.IdDt;\n+import ca.uhn.fhir.rest.annotation.IdParam;\n+import ca.uhn.fhir.rest.annotation.OptionalParam;\n+import ca.uhn.fhir.rest.annotation.Read;\n+import ca.uhn.fhir.rest.annotation.RequiredParam;\n+import ca.uhn.fhir.rest.annotation.Search;\n+import ca.uhn.fhir.rest.api.server.RequestDetails;\n+import ca.uhn.fhir.rest.param.DateRangeParam;\n+import ca.uhn.fhir.rest.param.TokenParam;\n+import ca.uhn.fhir.rest.server.IResourceProvider;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.exceptions.ResourceNotFoundException;\n+import com.codahale.metrics.MetricRegistry;\n+import com.codahale.metrics.Timer;\n+import com.newrelic.api.agent.Trace;\n+import gov.cms.bfd.model.codebook.data.CcwCodebookVariable;\n+import gov.cms.bfd.model.rif.Beneficiary;\n+import gov.cms.bfd.model.rif.BeneficiaryHistory;\n+import gov.cms.bfd.model.rif.BeneficiaryHistory_;\n+import gov.cms.bfd.model.rif.Beneficiary_;\n+import gov.cms.bfd.server.war.Operation;\n+import gov.cms.bfd.server.war.commons.LinkBuilder;\n+import gov.cms.bfd.server.war.commons.LoadedFilterManager;\n+import gov.cms.bfd.server.war.commons.OffsetLinkBuilder;\n+import gov.cms.bfd.server.war.commons.PatientLinkBuilder;\n+import gov.cms.bfd.server.war.commons.QueryUtils;\n+import gov.cms.bfd.server.war.commons.TransformerConstants;\n+import java.math.BigDecimal;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+import javax.persistence.EntityManager;\n+import javax.persistence.NoResultException;\n+import javax.persistence.PersistenceContext;\n+import javax.persistence.TypedQuery;\n+import javax.persistence.criteria.CriteriaBuilder;\n+import javax.persistence.criteria.CriteriaQuery;\n+import javax.persistence.criteria.JoinType;\n+import javax.persistence.criteria.Predicate;\n+import javax.persistence.criteria.Root;\n+import javax.persistence.metamodel.SingularAttribute;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.r4.model.Bundle;\n+import org.hl7.fhir.r4.model.IdType;\n+import org.hl7.fhir.r4.model.Identifier;\n+import org.hl7.fhir.r4.model.Patient;\n+import org.slf4j.MDC;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * This FHIR {@link IResourceProvider} adds support for STU3 {@link Patient} resources, derived from\n+ * the CCW beneficiaries.\n+ */\n+@Component\n+public final class R4PatientResourceProvider implements IResourceProvider {\n+  /**\n+   * The {@link Identifier#getSystem()} values that are supported by {@link #searchByIdentifier}.\n+   */\n+  private static final List<String> SUPPORTED_HASH_IDENTIFIER_SYSTEMS =\n+      Arrays.asList(\n+          TransformerConstants.CODING_BBAPI_BENE_MBI_HASH,\n+          TransformerConstants.CODING_BBAPI_BENE_HICN_HASH,\n+          TransformerConstants.CODING_BBAPI_BENE_HICN_HASH_OLD);\n+\n+  private EntityManager entityManager;\n+  private MetricRegistry metricRegistry;\n+  private LoadedFilterManager loadedFilterManager;\n+\n+  /** @param entityManager a JPA {@link EntityManager} connected to the application's database */\n+  @PersistenceContext\n+  public void setEntityManager(EntityManager entityManager) {\n+    this.entityManager = entityManager;\n+  }\n+\n+  /** @param metricRegistry the {@link MetricRegistry} to use */\n+  @Inject\n+  public void setMetricRegistry(MetricRegistry metricRegistry) {\n+    this.metricRegistry = metricRegistry;\n+  }\n+\n+  /** @param loadedFilterManager the {@link R4LoadedFilterManager} to use */\n+  @Inject\n+  public void setLoadedFilterManager(LoadedFilterManager loadedFilterManager) {\n+    this.loadedFilterManager = loadedFilterManager;\n+  }\n+\n+  /** @see ca.uhn.fhir.rest.server.IResourceProvider#getResourceType() */\n+  @Override\n+  public Class<? extends IBaseResource> getResourceType() {\n+    return Patient.class;\n+  }\n+\n+  /**\n+   * Adds support for the FHIR \"read\" operation, for {@link Patient}s. The {@link Read} annotation\n+   * indicates that this method supports the read operation.\n+   *\n+   * <p>Read operations take a single parameter annotated with {@link IdParam}, and should return a\n+   * single resource instance.\n+   *\n+   * @param patientId The read operation takes one parameter, which must be of type {@link IdType}\n+   *     and must be annotated with the {@link IdParam} annotation.\n+   * @param requestDetails a {@link RequestDetails} containing the details of the request URL, used\n+   *     to parse out pagination values\n+   * @return Returns a resource matching the specified {@link IdDt}, or <code>null</code> if none\n+   *     exists.\n+   */\n+  @Read(version = false)\n+  @Trace\n+  public Patient read(@IdParam IdType patientId, RequestDetails requestDetails) {\n+    if (patientId == null) throw new IllegalArgumentException();\n+    if (patientId.getVersionIdPartAsLong() != null) throw new IllegalArgumentException();\n+\n+    String beneIdText = patientId.getIdPart();\n+    if (beneIdText == null || beneIdText.trim().isEmpty()) throw new IllegalArgumentException();\n+\n+    List<String> includeIdentifiersValues = returnIncludeIdentifiersValues(requestDetails);\n+\n+    Operation operation = new Operation(Operation.Endpoint.V2_PATIENT);\n+    operation.setOption(\"by\", \"id\");\n+    operation.setOption(\"IncludeIdentifiers\", includeIdentifiersValues.toString());\n+    operation.publishOperationName();\n+\n+    CriteriaBuilder builder = entityManager.getCriteriaBuilder();\n+    CriteriaQuery<Beneficiary> criteria = builder.createQuery(Beneficiary.class);\n+    Root<Beneficiary> root = criteria.from(Beneficiary.class);\n+\n+    if (hasHICN(includeIdentifiersValues))\n+      root.fetch(Beneficiary_.beneficiaryHistories, JoinType.LEFT);\n+\n+    // if (hasMBI(includeIdentifiersValues))\n+    root.fetch(Beneficiary_.medicareBeneficiaryIdHistories, JoinType.LEFT);\n+\n+    criteria.select(root);\n+    criteria.where(builder.equal(root.get(Beneficiary_.beneficiaryId), beneIdText));\n+\n+    Beneficiary beneficiary = null;\n+    Long beneByIdQueryNanoSeconds = null;\n+    Timer.Context timerBeneQuery =\n+        metricRegistry\n+            .timer(MetricRegistry.name(getClass().getSimpleName(), \"query\", \"bene_by_id\"))\n+            .time();\n+    try {\n+      beneficiary = entityManager.createQuery(criteria).getSingleResult();\n+    } catch (NoResultException e) {\n+      throw new ResourceNotFoundException(patientId);\n+    } finally {\n+      beneByIdQueryNanoSeconds = timerBeneQuery.stop();\n+\n+      TransformerUtilsV2.recordQueryInMdc(\n+          String.format(\"bene_by_id.include_%s\", String.join(\"_\", includeIdentifiersValues)),\n+          beneByIdQueryNanoSeconds,\n+          beneficiary == null ? 0 : 1);\n+    }\n+\n+    // Null out the unhashed HICNs if we're not supposed to be returning them\n+    if (!hasHICN(includeIdentifiersValues)) {\n+      beneficiary.setHicnUnhashed(Optional.empty());\n+    }\n+\n+    Patient patient =\n+        BeneficiaryTransformerV2.transform(metricRegistry, beneficiary, includeIdentifiersValues);\n+    return patient;\n+  }\n+\n+  /**\n+   * Adds support for the FHIR \"search\" operation for {@link Patient}s, allowing users to search by\n+   * {@link Patient#getId()}.\n+   *\n+   * <p>The {@link Search} annotation indicates that this method supports the search operation.\n+   * There may be many different methods annotated with this {@link Search} annotation, to support\n+   * many different search criteria.\n+   *\n+   * @param logicalId a {@link TokenParam} (with no system, per the spec) for the {@link\n+   *     Patient#getId()} to try and find a matching {@link Patient} for\n+   * @param startIndex an {@link OptionalParam} for the startIndex (or offset) used to determine\n+   *     pagination\n+   * @param lastUpdated an {@link OptionalParam} to filter the results based on the passed date\n+   *     range\n+   * @param requestDetails a {@link RequestDetails} containing the details of the request URL, used\n+   *     to parse out pagination values\n+   * @return Returns a {@link List} of {@link Patient}s, which may contain multiple matching\n+   *     resources, or may also be empty.\n+   */\n+  @Search\n+  @Trace\n+  public Bundle searchByLogicalId(\n+      @RequiredParam(name = Patient.SP_RES_ID)\n+          @Description(shortDefinition = \"The patient identifier to search for\")\n+          TokenParam logicalId,\n+      @OptionalParam(name = \"startIndex\")\n+          @Description(shortDefinition = \"The offset used for result pagination\")\n+          String startIndex,\n+      @OptionalParam(name = \"_lastUpdated\")\n+          @Description(shortDefinition = \"Include resources last updated in the given range\")\n+          DateRangeParam lastUpdated,\n+      RequestDetails requestDetails) {\n+    if (logicalId.getQueryParameterQualifier() != null)\n+      throw new InvalidRequestException(\n+          \"Unsupported query parameter qualifier: \" + logicalId.getQueryParameterQualifier());\n+    if (logicalId.getSystem() != null && !logicalId.getSystem().isEmpty())\n+      throw new InvalidRequestException(\n+          \"Unsupported query parameter system: \" + logicalId.getSystem());\n+    if (logicalId.getValueNotNull().isEmpty())\n+      throw new InvalidRequestException(\n+          \"Unsupported query parameter value: \" + logicalId.getValue());\n+\n+    List<IBaseResource> patients;\n+    if (loadedFilterManager.isResultSetEmpty(logicalId.getValue(), lastUpdated)) {\n+      patients = Collections.emptyList();\n+    } else {\n+      try {\n+        patients =\n+            Optional.of(read(new IdType(logicalId.getValue()), requestDetails))\n+                .filter(p -> QueryUtils.isInRange(p.getMeta().getLastUpdated(), lastUpdated))\n+                .map(p -> Collections.singletonList((IBaseResource) p))\n+                .orElse(Collections.emptyList());\n+      } catch (ResourceNotFoundException e) {\n+        patients = Collections.emptyList();\n+      }\n+    }\n+\n+    OffsetLinkBuilder paging = new OffsetLinkBuilder(requestDetails, \"/Patient?\");\n+    Bundle bundle =\n+        TransformerUtilsV2.createBundle(paging, patients, loadedFilterManager.getTransactionTime());\n+    return bundle;\n+  }\n+\n+  @Search\n+  public Bundle searchByCoverageContract(\n+      // This is very explicit as a place holder until this kind\n+      // of relational search is more common.\n+      @RequiredParam(name = \"_has:Coverage.extension\")\n+          @Description(shortDefinition = \"Part D coverage type\")\n+          TokenParam coverageId,\n+      @OptionalParam(name = \"cursor\")\n+          @Description(shortDefinition = \"The cursor used for result pagination\")\n+          String cursor,\n+      RequestDetails requestDetails) {\n+    checkCoverageId(coverageId);\n+    List<String> includeIdentifiersValues = returnIncludeIdentifiersValues(requestDetails);\n+    PatientLinkBuilder paging = new PatientLinkBuilder(requestDetails.getCompleteUrl());\n+    checkPageSize(paging);\n+\n+    Operation operation = new Operation(Operation.Endpoint.V2_PATIENT);\n+    operation.setOption(\"by\", \"coverageContract\");\n+    operation.setOption(\"IncludeIdentifiers\", includeIdentifiersValues.toString());\n+    operation.publishOperationName();\n+\n+    List<Beneficiary> matchingBeneficiaries =\n+        fetchBeneficiaries(coverageId, includeIdentifiersValues, paging);\n+\n+    List<IBaseResource> patients =\n+        matchingBeneficiaries.stream()\n+            .map(\n+                beneficiary -> {\n+                  // Null out the unhashed HICNs if we're not supposed to be returning them\n+                  if (!hasHICN(includeIdentifiersValues)) {\n+                    beneficiary.setHicnUnhashed(Optional.empty());\n+                  }\n+\n+                  Patient patient =\n+                      BeneficiaryTransformerV2.transform(\n+                          metricRegistry, beneficiary, includeIdentifiersValues);\n+                  return patient;\n+                })\n+            .collect(Collectors.toList());\n+\n+    Bundle bundle =\n+        TransformerUtilsV2.createBundle(patients, paging, loadedFilterManager.getTransactionTime());\n+    TransformerUtilsV2.workAroundHAPIIssue1585(requestDetails);\n+    return bundle;\n+  }\n+\n+  private CcwCodebookVariable partDCwVariableFor(String system) {\n+    try {\n+      return CcwCodebookVariable.valueOf(system.toUpperCase());\n+    } catch (IllegalArgumentException e) {\n+      throw new InvalidRequestException(\"Unsupported extension system: \" + system);\n+    }\n+  }\n+\n+  private String partDFieldFor(CcwCodebookVariable month) {\n+    if (month == CcwCodebookVariable.PTDCNTRCT01) return \"partDContractNumberJanId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT02) return \"partDContractNumberFebId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT03) return \"partDContractNumberMarId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT04) return \"partDContractNumberAprId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT05) return \"partDContractNumberMayId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT06) return \"partDContractNumberJunId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT07) return \"partDContractNumberJulId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT08) return \"partDContractNumberAugId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT09) return \"partDContractNumberSeptId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT10) return \"partDContractNumberOctId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT11) return \"partDContractNumberNovId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT12) return \"partDContractNumberDecId\";\n+    throw new InvalidRequestException(\n+        \"Unsupported extension system: \" + month.getVariable().getId().toLowerCase());\n+  }\n+\n+  /**\n+   * Fetch beneficiaries for the PartD coverage parameter. If includeIdentiers are present then the\n+   * entity mappings are fetched as well\n+   *\n+   * @param coverageId coverage type\n+   * @param includedIdentifiers list from the includeIdentifier header\n+   * @param paging specified\n+   * @return the beneficiaries\n+   */\n+  private List<Beneficiary> fetchBeneficiaries(\n+      TokenParam coverageId, List<String> includedIdentifiers, PatientLinkBuilder paging) {\n+    String contractMonth =\n+        coverageId.getSystem().substring(coverageId.getSystem().lastIndexOf('/') + 1);\n+    CcwCodebookVariable partDContractMonth = partDCwVariableFor(contractMonth);\n+    String contractMonthField = partDFieldFor(partDContractMonth);\n+    String contractCode = coverageId.getValueNotNull();\n+\n+    // Fetching with joins is not compatible with setMaxResults as explained in this post:\n+    // https://stackoverflow.com/questions/53569908/jpa-eager-fetching-and-pagination-best-practices\n+    // So, in cases where there are joins and paging, we query in two steps: first fetch bene-ids\n+    // with paging and then fetch full benes with joins.\n+    boolean useTwoSteps =\n+        (hasHICN(includedIdentifiers) || hasMBI(includedIdentifiers)) && paging.isPagingRequested();\n+    if (useTwoSteps) {\n+      // Fetch ids\n+      List<String> ids =\n+          queryBeneficiaryIds(contractMonthField, contractCode, paging)\n+              .setMaxResults(paging.getPageSize())\n+              .getResultList();\n+\n+      // Fetch the benes using the ids\n+      return queryBeneficiariesByIds(ids, includedIdentifiers).getResultList();\n+    } else {\n+      // Fetch benes and their histories in one query\n+      return queryBeneficiariesBy(contractMonthField, contractCode, paging, includedIdentifiers)\n+          .setMaxResults(paging.getPageSize())\n+          .getResultList();\n+    }\n+  }\n+\n+  /**\n+   * Build a criteria for a general Beneficiary query\n+   *\n+   * @param field to match on\n+   * @param value to match on\n+   * @param paging to use for the result set\n+   * @param identifiers to add for many-to-one relations\n+   * @return the criteria\n+   */\n+  private TypedQuery<Beneficiary> queryBeneficiariesBy(\n+      String field, String value, PatientLinkBuilder paging, List<String> identifiers) {\n+    String joinsClause = \"\";\n+    joinsClause += \"left join fetch b.medicareBeneficiaryIdHistories \";\n+    if (hasHICN(identifiers)) joinsClause += \"left join fetch b.beneficiaryHistories \";\n+\n+    if (paging.isPagingRequested() && !paging.isFirstPage()) {\n+      String query =\n+          \"select b from Beneficiary b \"\n+              + joinsClause\n+              + \"where b.\"\n+              + field\n+              + \" = :value and b.beneficiaryId > :cursor \"\n+              + \"order by b.beneficiaryId asc\";\n+\n+      return entityManager\n+          .createQuery(query, Beneficiary.class)\n+          .setParameter(\"value\", value)\n+          .setParameter(\"cursor\", paging.getCursor());\n+    } else {\n+      String query =\n+          \"select b from Beneficiary b \"\n+              + joinsClause\n+              + \"where b.\"\n+              + field\n+              + \" = :value \"\n+              + \"order by b.beneficiaryId asc\";\n+\n+      return entityManager.createQuery(query, Beneficiary.class).setParameter(\"value\", value);\n+    }\n+  }\n+\n+  /**\n+   * Build a criteria for a general beneficiaryId query\n+   *\n+   * @param field to match on\n+   * @param value to match on\n+   * @param paging to use for the result set\n+   * @return the criteria\n+   */\n+  private TypedQuery<String> queryBeneficiaryIds(\n+      String field, String value, PatientLinkBuilder paging) {\n+    if (paging.isPagingRequested() && !paging.isFirstPage()) {\n+      String query =\n+          \"select b.beneficiaryId from Beneficiary b \"\n+              + \"where b.\"\n+              + field\n+              + \" = :value and b.beneficiaryId > :cursor \"\n+              + \"order by b.beneficiaryId asc\";\n+\n+      return entityManager\n+          .createQuery(query, String.class)\n+          .setParameter(\"value\", value)\n+          .setParameter(\"cursor\", paging.getCursor());\n+    } else {\n+      String query =\n+          \"select b.beneficiaryId from Beneficiary b \"\n+              + \"where b.\"\n+              + field\n+              + \" = :value \"\n+              + \"order by b.beneficiaryId asc\";\n+\n+      return entityManager.createQuery(query, String.class).setParameter(\"value\", value);\n+    }\n+  }\n+\n+  /**\n+   * Build a criteria for a beneficiary query using the passed in list of ids\n+   *\n+   * @param ids to use\n+   * @param identifiers to add for many-to-one relations\n+   * @return the criteria\n+   */\n+  private TypedQuery<Beneficiary> queryBeneficiariesByIds(\n+      List<String> ids, List<String> identifiers) {\n+    String joinsClause = \"\";\n+    joinsClause += \"left join fetch b.medicareBeneficiaryIdHistories \";\n+    if (hasHICN(identifiers)) joinsClause += \"left join fetch b.beneficiaryHistories \";\n+\n+    String query =\n+        \"select b from Beneficiary b \"\n+            + joinsClause\n+            + \"where b.beneficiaryId in :ids \"\n+            + \"order by b.beneficiaryId asc\";\n+    return entityManager.createQuery(query, Beneficiary.class).setParameter(\"ids\", ids);\n+  }\n+\n+  /**\n+   * Adds support for the FHIR \"search\" operation for {@link Patient}s, allowing users to search by\n+   * {@link Patient#getIdentifier()}. Specifically, the following criteria are supported:\n+   *\n+   * <ul>\n+   *   <li>Matching a {@link Beneficiary#getHicn()} hash value: when {@link TokenParam#getSystem()}\n+   *       matches one of the {@link #SUPPORTED_HASH_IDENTIFIER_SYSTEMS} entries.\n+   * </ul>\n+   *\n+   * <p>Searches that don't match one of the above forms are not supported.\n+   *\n+   * <p>The {@link Search} annotation indicates that this method supports the search operation.\n+   * There may be many different methods annotated with this {@link Search} annotation, to support\n+   * many different search criteria.\n+   *\n+   * @param identifier an {@link Identifier} {@link TokenParam} for the {@link\n+   *     Patient#getIdentifier()} to try and find a matching {@link Patient} for\n+   * @param startIndex an {@link OptionalParam} for the startIndex (or offset) used to determine\n+   *     pagination\n+   * @param lastUpdated an {@link OptionalParam} to filter the results based on the passed date\n+   *     range\n+   * @param requestDetails a {@link RequestDetails} containing the details of the request URL, used\n+   *     to parse out pagination values\n+   * @return Returns a {@link List} of {@link Patient}s, which may contain multiple matching\n+   *     resources, or may also be empty.\n+   */\n+  @Search\n+  @Trace\n+  public Bundle searchByIdentifier(\n+      @RequiredParam(name = Patient.SP_IDENTIFIER)\n+          @Description(shortDefinition = \"The patient identifier to search for\")\n+          TokenParam identifier,\n+      @OptionalParam(name = \"startIndex\")\n+          @Description(shortDefinition = \"The offset used for result pagination\")\n+          String startIndex,\n+      @OptionalParam(name = \"_lastUpdated\")\n+          @Description(shortDefinition = \"Include resources last updated in the given range\")\n+          DateRangeParam lastUpdated,\n+      RequestDetails requestDetails) {\n+    if (identifier.getQueryParameterQualifier() != null)\n+      throw new InvalidRequestException(\n+          \"Unsupported query parameter qualifier: \" + identifier.getQueryParameterQualifier());\n+\n+    if (!SUPPORTED_HASH_IDENTIFIER_SYSTEMS.contains(identifier.getSystem()))\n+      throw new InvalidRequestException(\"Unsupported identifier system: \" + identifier.getSystem());\n+\n+    List<String> includeIdentifiersValues = returnIncludeIdentifiersValues(requestDetails);\n+\n+    Operation operation = new Operation(Operation.Endpoint.V2_PATIENT);\n+    operation.setOption(\"by\", \"identifier\");\n+    operation.setOption(\"IncludeIdentifiers\", includeIdentifiersValues.toString());\n+    operation.publishOperationName();\n+\n+    List<IBaseResource> patients;\n+    try {\n+      Patient patient;\n+      switch (identifier.getSystem()) {\n+        case TransformerConstants.CODING_BBAPI_BENE_HICN_HASH:\n+        case TransformerConstants.CODING_BBAPI_BENE_HICN_HASH_OLD:\n+          patient = queryDatabaseByHicnHash(identifier.getValue(), includeIdentifiersValues);\n+          break;\n+        case TransformerConstants.CODING_BBAPI_BENE_MBI_HASH:\n+          patient = queryDatabaseByMbiHash(identifier.getValue(), includeIdentifiersValues);\n+          break;\n+        default:\n+          throw new InvalidRequestException(\n+              \"Unsupported identifier system: \" + identifier.getSystem());\n+      }\n+\n+      patients =\n+          QueryUtils.isInRange(patient.getMeta().getLastUpdated(), lastUpdated)\n+              ? Collections.singletonList(patient)\n+              : Collections.emptyList();\n+    } catch (NoResultException e) {\n+      patients = new LinkedList<>();\n+    }\n+\n+    OffsetLinkBuilder paging = new OffsetLinkBuilder(requestDetails, \"/Patient?\");\n+    Bundle bundle =\n+        TransformerUtilsV2.createBundle(paging, patients, loadedFilterManager.getTransactionTime());\n+    return bundle;\n+  }\n+\n+  /**\n+   * @param hicnHash the {@link Beneficiary#getHicn()} hash value to match\n+   * @param includeIdentifiersValues the {@link #returnIncludeIdentifiersValues(RequestDetails)}\n+   *     value to use\n+   * @return a FHIR {@link Patient} for the CCW {@link Beneficiary} that matches the specified\n+   *     {@link Beneficiary#getHicn()} hash value\n+   * @throws NoResultException A {@link NoResultException} will be thrown if no matching {@link\n+   *     Beneficiary} can be found\n+   */\n+  @Trace\n+  private Patient queryDatabaseByHicnHash(String hicnHash, List<String> includeIdentifiersValues) {\n+    return queryDatabaseByHash(\n+        hicnHash, \"hicn\", includeIdentifiersValues, Beneficiary_.hicn, BeneficiaryHistory_.hicn);\n+  }\n+\n+  /**\n+   * @param mbiHash the {@link Beneficiary#getMbiHash()} ()} hash value to match\n+   * @param includeIdentifiersValues the {@link #returnIncludeIdentifiersValues(RequestDetails)}\n+   *     value to use\n+   * @return a FHIR {@link Patient} for the CCW {@link Beneficiary} that matches the specified\n+   *     {@link Beneficiary#getMbiHash()} ()} hash value\n+   * @throws NoResultException A {@link NoResultException} will be thrown if no matching {@link\n+   *     Beneficiary} can be found\n+   */\n+  @Trace\n+  private Patient queryDatabaseByMbiHash(String mbiHash, List<String> includeIdentifiersValues) {\n+    return queryDatabaseByHash(\n+        mbiHash,\n+        \"mbi\",\n+        includeIdentifiersValues,\n+        Beneficiary_.mbiHash,\n+        BeneficiaryHistory_.mbiHash);\n+  }\n+\n+  /**\n+   * @param hash the {@link Beneficiary} hash value to match\n+   * @param hashType a string to represent the hash type (used for logging purposes)\n+   * @param includeIdentifiersValues the {@link #returnIncludeIdentifiersValues(RequestDetails)}\n+   *     value to use\n+   * @param beneficiaryHashField the JPA location of the beneficiary hash field\n+   * @param beneficiaryHistoryHashField the JPA location of the beneficiary history hash field\n+   * @return a FHIR {@link Patient} for the CCW {@link Beneficiary} that matches the specified\n+   *     {@link Beneficiary} hash value\n+   * @throws NoResultException A {@link NoResultException} will be thrown if no matching {@link\n+   *     Beneficiary} can be found\n+   */\n+  @Trace\n+  private Patient queryDatabaseByHash(\n+      String hash,\n+      String hashType,\n+      List<String> includeIdentifiersValues,\n+      SingularAttribute<Beneficiary, String> beneficiaryHashField,\n+      SingularAttribute<BeneficiaryHistory, String> beneficiaryHistoryHashField) {\n+    if (hash == null || hash.trim().isEmpty()) throw new IllegalArgumentException();", "originalCommit": "e316b2bb0753ecc4e7cd534b66e9fa7cc05635b6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "265ea9672c7f3b8a04c70e2c78fc3b2ff1fb2c60", "chunk": "diff --git a/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/R4PatientResourceProvider.java b/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/R4PatientResourceProvider.java\nindex 276ae07d0..67450ab9d 100644\n--- a/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/R4PatientResourceProvider.java\n+++ b/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/R4PatientResourceProvider.java\n\n@@ -56,7 +56,7 @@ import org.slf4j.MDC;\n import org.springframework.stereotype.Component;\n \n /**\n- * This FHIR {@link IResourceProvider} adds support for STU3 {@link Patient} resources, derived from\n+ * This FHIR {@link IResourceProvider} adds support for R4 {@link Patient} resources, derived from\n  * the CCW beneficiaries.\n  */\n @Component\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYwODIyMA==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#discussion_r506608220", "bodyText": "can it be empty?", "author": "cbrunefearless", "createdAt": "2020-10-16T17:07:45Z", "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/TransformerUtilsV2.java", "diffHunk": "@@ -0,0 +1,1332 @@\n+package gov.cms.bfd.server.war.r4.providers;\n+\n+import ca.uhn.fhir.model.api.TemporalPrecisionEnum;\n+import ca.uhn.fhir.model.primitive.IdDt;\n+import ca.uhn.fhir.rest.api.Constants;\n+import ca.uhn.fhir.rest.api.server.RequestDetails;\n+import com.justdavis.karl.misc.exceptions.BadCodeMonkeyException;\n+import gov.cms.bfd.model.codebook.data.CcwCodebookVariable;\n+import gov.cms.bfd.model.codebook.model.Value;\n+import gov.cms.bfd.model.codebook.model.Variable;\n+import gov.cms.bfd.model.rif.Beneficiary;\n+import gov.cms.bfd.model.rif.parse.InvalidRifValueException;\n+import gov.cms.bfd.server.war.FDADrugDataUtilityApp;\n+import gov.cms.bfd.server.war.commons.LinkBuilder;\n+import gov.cms.bfd.server.war.commons.OffsetLinkBuilder;\n+import gov.cms.bfd.server.war.commons.TransformerConstants;\n+import gov.cms.bfd.server.war.r4.providers.BeneficiaryTransformerV2.CurrencyIdentifier;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.UncheckedIOException;\n+import java.io.UnsupportedEncodingException;\n+import java.math.BigDecimal;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.time.LocalDate;\n+import java.time.ZoneId;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.apache.commons.lang3.StringUtils;\n+import org.hl7.fhir.instance.model.api.IAnyResource;\n+import org.hl7.fhir.instance.model.api.IBaseExtension;\n+import org.hl7.fhir.instance.model.api.IBaseHasExtensions;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.r4.model.Bundle;\n+import org.hl7.fhir.r4.model.Bundle.BundleEntryComponent;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.hl7.fhir.r4.model.Coverage;\n+import org.hl7.fhir.r4.model.DateType;\n+import org.hl7.fhir.r4.model.DomainResource;\n+import org.hl7.fhir.r4.model.ExplanationOfBenefit;\n+import org.hl7.fhir.r4.model.ExplanationOfBenefit.AdjudicationComponent;\n+import org.hl7.fhir.r4.model.ExplanationOfBenefit.ItemComponent;\n+import org.hl7.fhir.r4.model.Extension;\n+import org.hl7.fhir.r4.model.Identifier;\n+import org.hl7.fhir.r4.model.Organization;\n+import org.hl7.fhir.r4.model.Patient;\n+import org.hl7.fhir.r4.model.Period;\n+import org.hl7.fhir.r4.model.Practitioner;\n+import org.hl7.fhir.r4.model.Quantity;\n+import org.hl7.fhir.r4.model.Reference;\n+import org.hl7.fhir.r4.model.Resource;\n+import org.hl7.fhir.r4.model.UnsignedIntType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.slf4j.MDC;\n+\n+/**\n+ * Contains shared methods used to transform CCW JPA entities (e.g. {@link Beneficiary}) into FHIR\n+ * resources (e.g. {@link Patient}).\n+ */\n+public final class TransformerUtilsV2 {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(TransformerUtilsV2.class);\n+\n+  /**\n+   * Tracks the {@link CcwCodebookVariable}s that have already had code lookup failures due to\n+   * missing {@link Value} matches. Why track this? To ensure that we don't spam log events for\n+   * failed lookups over and over and over. This was needed to fix CBBF-162, where those log events\n+   * were flooding our logs and filling up the drive.\n+   *\n+   * @see #calculateCodingDisplay(IAnyResource, CcwCodebookVariable, String)\n+   */\n+  private static final Set<CcwCodebookVariable> codebookLookupMissingFailures = new HashSet<>();\n+\n+  /**\n+   * Tracks the {@link CcwCodebookVariable}s that have already had code lookup failures due to\n+   * duplicate {@link Value} matches. Why track this? To ensure that we don't spam log events for\n+   * failed lookups over and over and over. This was needed to fix CBBF-162, where those log events\n+   * were flooding our logs and filling up the drive.\n+   *\n+   * @see #calculateCodingDisplay(IAnyResource, CcwCodebookVariable, String)\n+   */\n+  private static final Set<CcwCodebookVariable> codebookLookupDuplicateFailures = new HashSet<>();\n+\n+  /** Stores the PRODUCTNDC and SUBSTANCENAME from the downloaded NDC file. */\n+  private static Map<String, String> ndcProductMap = null;\n+\n+  /** Tracks the national drug codes that have already had code lookup failures. */\n+  private static final Set<String> drugCodeLookupMissingFailures = new HashSet<>();\n+\n+  /** Stores the diagnosis ICD codes and their display values */\n+  private static Map<String, String> icdMap = null;\n+\n+  /** Stores the procedure codes and their display values */\n+  private static Map<String, String> procedureMap = null;\n+\n+  /** Tracks the procedure codes that have already had code lookup failures. */\n+  private static final Set<String> procedureLookupMissingFailures = new HashSet<>();\n+\n+  /** Stores the NPI codes and their display values */\n+  private static Map<String, String> npiMap = null;\n+\n+  /** Tracks the NPI codes that have already had code lookup failures. */\n+  private static final Set<String> npiCodeLookupMissingFailures = new HashSet<>();\n+\n+  /**\n+   * Adds an {@link Extension} to the specified {@link DomainResource}. {@link Extension#getValue()}\n+   * will be set to a {@link CodeableConcept} containing a single {@link Coding}, with the specified\n+   * system and code.\n+   *\n+   * <p>Data Architecture Note: The {@link CodeableConcept} might seem extraneous -- why not just\n+   * add the {@link Coding} directly to the {@link Extension}? The main reason for doing it this way\n+   * is consistency: this is what FHIR seems to do everywhere.\n+   *\n+   * @param fhirElement the FHIR element to add the {@link Extension} to\n+   * @param extensionUrl the {@link Extension#getUrl()} to use\n+   * @param codingSystem the {@link Coding#getSystem()} to use\n+   * @param codingDisplay the {@link Coding#getDisplay()} to use\n+   * @param codingCode the {@link Coding#getCode()} to use\n+   */\n+  static void addExtensionCoding(\n+      IBaseHasExtensions fhirElement,\n+      String extensionUrl,\n+      String codingSystem,\n+      String codingDisplay,\n+      String codingCode) {\n+    IBaseExtension<?, ?> extension = fhirElement.addExtension();\n+    extension.setUrl(extensionUrl);\n+    if (codingDisplay == null)\n+      extension.setValue(new Coding().setSystem(codingSystem).setCode(codingCode));\n+    else\n+      extension.setValue(\n+          new Coding().setSystem(codingSystem).setCode(codingCode).setDisplay(codingDisplay));\n+  }\n+\n+  /**\n+   * Adds an {@link Extension} to the specified {@link DomainResource}. {@link Extension#getValue()}\n+   * will be set to a {@link Quantity} with the specified system and value.\n+   *\n+   * @param fhirElement the FHIR element to add the {@link Extension} to\n+   * @param extensionUrl the {@link Extension#getUrl()} to use\n+   * @param quantitySystem the {@link Quantity#getSystem()} to use\n+   * @param quantityValue the {@link Quantity#getValue()} to use\n+   */\n+  static void addExtensionValueQuantity(\n+      IBaseHasExtensions fhirElement,\n+      String extensionUrl,\n+      String quantitySystem,\n+      BigDecimal quantityValue) {\n+    IBaseExtension<?, ?> extension = fhirElement.addExtension();\n+    extension.setUrl(extensionUrl);\n+    extension.setValue(new Quantity().setSystem(extensionUrl).setValue(quantityValue));\n+\n+    // CodeableConcept codeableConcept = new CodeableConcept();\n+    // extension.setValue(codeableConcept);\n+    //\n+    // Coding coding = codeableConcept.addCoding();\n+    // coding.setSystem(codingSystem).setCode(codingCode);\n+  }\n+\n+  /**\n+   * Adds an {@link Extension} to the specified {@link DomainResource}. {@link Extension#getValue()}\n+   * will be set to a {@link Identifier} with the specified url, system, and value.\n+   *\n+   * @param fhirElement the FHIR element to add the {@link Extension} to\n+   * @param extensionUrl the {@link Extension#getUrl()} to use\n+   * @param extensionSystem the {@link Identifier#getSystem()} to use\n+   * @param extensionValue the {@link Identifier#getValue()} to use\n+   */\n+  static void addExtensionValueIdentifier(\n+      IBaseHasExtensions fhirElement,\n+      String extensionUrl,\n+      String extensionSystem,\n+      String extensionValue) {\n+    IBaseExtension<?, ?> extension = fhirElement.addExtension();\n+    extension.setUrl(extensionUrl);\n+\n+    Identifier valueIdentifier = new Identifier();\n+    valueIdentifier.setSystem(extensionSystem).setValue(extensionValue);\n+\n+    extension.setValue(valueIdentifier);\n+  }\n+\n+  /**\n+   * @param beneficiary the {@link Beneficiary} to calculate the {@link Patient#getId()} value for\n+   * @return the {@link Patient#getId()} value that will be used for the specified {@link\n+   *     Beneficiary}\n+   */\n+  public static IdDt buildPatientId(Beneficiary beneficiary) {\n+    return buildPatientId(beneficiary.getBeneficiaryId());\n+  }\n+\n+  /**\n+   * @param beneficiaryId the {@link Beneficiary#getBeneficiaryId()} to calculate the {@link\n+   *     Patient#getId()} value for\n+   * @return the {@link Patient#getId()} value that will be used for the specified {@link\n+   *     Beneficiary}\n+   */\n+  public static IdDt buildPatientId(String beneficiaryId) {\n+    return new IdDt(Patient.class.getSimpleName(), beneficiaryId);\n+  }\n+\n+  /**\n+   * @param localDate the {@link LocalDate} to convert\n+   * @return a {@link Date} version of the specified {@link LocalDate}\n+   */\n+  static Date convertToDate(LocalDate localDate) {\n+    /*\n+     * We use the system TZ here to ensure that the date doesn't shift at all, as FHIR will just use\n+     * this as an unzoned Date (I think, and if not, it's almost certainly using the same TZ as this\n+     * system).\n+     */\n+    return Date.from(localDate.atStartOfDay(ZoneId.systemDefault()).toInstant());\n+  }\n+\n+  /**\n+   * @param codingSystem the {@link Coding#getSystem()} to use\n+   * @param codingCode the {@link Coding#getCode()} to use\n+   * @return a {@link CodeableConcept} with the specified {@link Coding}\n+   */\n+  static CodeableConcept createCodeableConcept(String codingSystem, String codingCode) {\n+    return createCodeableConcept(codingSystem, null, null, codingCode);\n+  }\n+\n+  /**\n+   * @param codingSystem the {@link Coding#getSystem()} to use\n+   * @param codingVersion the {@link Coding#getVersion()} to use\n+   * @param codingDisplay the {@link Coding#getDisplay()} to use\n+   * @param codingCode the {@link Coding#getCode()} to use\n+   * @return a {@link CodeableConcept} with the specified {@link Coding}\n+   */\n+  static CodeableConcept createCodeableConcept(\n+      String codingSystem, String codingVersion, String codingDisplay, String codingCode) {\n+    CodeableConcept codeableConcept = new CodeableConcept();\n+    Coding coding = codeableConcept.addCoding().setSystem(codingSystem).setCode(codingCode);\n+    if (codingVersion != null) coding.setVersion(codingVersion);", "originalCommit": "e316b2bb0753ecc4e7cd534b66e9fa7cc05635b6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg3Mjk1Nw==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#discussion_r507872957", "bodyText": "From previous PR, notes from @karlmdavis\n\nThe application's configuration is all currently handled by the SpringConfiguration class. If you look, you can note that several of the properties in there are injected via environment variables.\nI think you should probably remove this class, and just use something new in SpringConfiguration, instead.\n\nFeels like a great suggestion, so we don't duplicate how / where we are supplying app configuration. I was previously unaware of this piece of the code. Here's a link to the relevant code: \n  \n    \n      beneficiary-fhir-data/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/SpringConfiguration.java\n    \n    \n         Line 50\n      in\n      af23b39\n    \n    \n    \n    \n\n        \n          \n           public class SpringConfiguration {", "author": "jzulim", "createdAt": "2020-10-19T16:04:10Z", "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/FhirAppConfiguration.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package gov.cms.bfd.server.war;\n+\n+import java.io.Serializable;\n+import java.util.Optional;\n+\n+/** Models the configuration options for the application. */\n+public final class FhirAppConfiguration implements Serializable {", "originalCommit": "e316b2bb0753ecc4e7cd534b66e9fa7cc05635b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzczOTEzOA==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#discussion_r513739138", "bodyText": "DONE", "author": "dshekhar18", "createdAt": "2020-10-28T20:27:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg3Mjk1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "265ea9672c7f3b8a04c70e2c78fc3b2ff1fb2c60", "chunk": "diff --git a/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/FhirAppConfiguration.java b/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/FhirAppConfiguration.java\ndeleted file mode 100644\nindex f0ef00554..000000000\n--- a/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/FhirAppConfiguration.java\n+++ /dev/null\n\n@@ -1,75 +0,0 @@\n-package gov.cms.bfd.server.war;\n-\n-import java.io.Serializable;\n-import java.util.Optional;\n-\n-/** Models the configuration options for the application. */\n-public final class FhirAppConfiguration implements Serializable {\n-  private static final long serialVersionUID = -6845504165285244536L;\n-\n-  /**\n-   * The name of the environment variable that should be used to provide the {@link\n-   * #getLoadOptions()} {@link LoadFhirAppOptions#isV2Enabled()} value.\n-   */\n-  public static final String ENV_VAR_KEY_V2_ENABLED = \"V2_ENABLED\";\n-\n-  private final LoadFhirAppOptions loadOptions;\n-\n-  /**\n-   * Constructs a new {@link FhirAppConfiguration} instance.\n-   *\n-   * @param loadOptions the value to use for {@link #getLoadOptions()}\n-   */\n-  public FhirAppConfiguration(LoadFhirAppOptions loadOptions) {\n-\n-    this.loadOptions = loadOptions;\n-  }\n-\n-  /** @return the {@link LoadFhirAppOptions} that the application will use */\n-  public LoadFhirAppOptions getLoadOptions() {\n-    return loadOptions;\n-  }\n-\n-  /** @see java.lang.Object#toString() */\n-  @Override\n-  public String toString() {\n-    StringBuilder builder = new StringBuilder();\n-    builder.append(\"FhirAppConfiguration [=\");\n-    builder.append(\", loadOptions=\");\n-    builder.append(loadOptions);\n-    builder.append(\"]\");\n-    return builder.toString();\n-  }\n-\n-  /**\n-   * Per <code>/dev/design-decisions-readme.md</code>, this application accepts its configuration\n-   * via environment variables. Read those in, and build an {@link FhirAppConfiguration} instance\n-   * from them.\n-   *\n-   * @return the {@link FhirAppConfiguration} instance represented by the configuration provided to\n-   *     this application via the environment variables\n-   */\n-  static FhirAppConfiguration readConfigFromEnvironmentVariables() {\n-\n-    String v2EnabledText = System.getenv(ENV_VAR_KEY_V2_ENABLED);\n-    boolean v2Enabled = false;\n-    if (v2EnabledText != null && !v2EnabledText.isEmpty()) {\n-      v2Enabled = Boolean.parseBoolean(v2EnabledText);\n-    }\n-\n-    return new FhirAppConfiguration(new LoadFhirAppOptions(v2Enabled));\n-  }\n-\n-  /**\n-   * Design note: want better parsing than what {@link Boolean#parseBoolean(String)} provides.\n-   *\n-   * @param booleanText the text to try and parse a <code>boolean</code> from\n-   * @return the parsed <code>boolean</code>, or {@link Optional#empty()} if nothing valid could be\n-   *     parsed\n-   */\n-  static Optional<Boolean> parseBoolean(String booleanText) {\n-    if (\"true\".equalsIgnoreCase(booleanText)) return Optional.of(true);\n-    else if (\"false\".equalsIgnoreCase(booleanText)) return Optional.of(false);\n-    else return Optional.empty();\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg3MzM5OA==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#discussion_r507873398", "bodyText": "From previous PR, notes from @karlmdavis\n\nThe application's configuration is all currently handled by the SpringConfiguration class. If you look, you can note that several of the properties in there are injected via environment variables.\nI think you should probably remove this class, and just use something new in SpringConfiguration, instead.\n\nFeels like a great suggestion, so we don't duplicate how / where we are supplying app configuration. I was previously unaware of this piece of the code. Here's a link to the relevant code: \n  \n    \n      beneficiary-fhir-data/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/SpringConfiguration.java\n    \n    \n         Line 50\n      in\n      af23b39\n    \n    \n    \n    \n\n        \n          \n           public class SpringConfiguration {", "author": "jzulim", "createdAt": "2020-10-19T16:04:52Z", "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/LoadFhirAppOptions.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package gov.cms.bfd.server.war;\n+\n+import java.io.Serializable;\n+\n+/** Models the user-configurable application options. */\n+public class LoadFhirAppOptions implements Serializable {", "originalCommit": "e316b2bb0753ecc4e7cd534b66e9fa7cc05635b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzczOTI2Mw==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#discussion_r513739263", "bodyText": "DONE", "author": "dshekhar18", "createdAt": "2020-10-28T20:27:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg3MzM5OA=="}], "type": "inlineReview", "revised_code": {"commit": "265ea9672c7f3b8a04c70e2c78fc3b2ff1fb2c60", "chunk": "diff --git a/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/LoadFhirAppOptions.java b/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/LoadFhirAppOptions.java\ndeleted file mode 100644\nindex 0e4175c4e..000000000\n--- a/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/LoadFhirAppOptions.java\n+++ /dev/null\n\n@@ -1,43 +0,0 @@\n-package gov.cms.bfd.server.war;\n-\n-import java.io.Serializable;\n-\n-/** Models the user-configurable application options. */\n-public class LoadFhirAppOptions implements Serializable {\n-\n-  private static final long serialVersionUID = 2884121140016566847L;\n-\n-  private final boolean v2Enabled;\n-\n-  /**\n-   * Constructs a new {@link LoadFhirAppOptions} instance.\n-   *\n-   * @param v2Enabled the value to use for {@link #isV2Enabled()}\n-   */\n-  public LoadFhirAppOptions(boolean v2Enabled) {\n-\n-    this.v2Enabled = v2Enabled;\n-  }\n-\n-  /**\n-   * Feature flag for BFD v2\n-   *\n-   * @return is V2 enabled\n-   */\n-  public boolean isV2Enabled() {\n-    return v2Enabled;\n-  }\n-\n-  /** @see java.lang.Object#toString() */\n-  @Override\n-  public String toString() {\n-    StringBuilder builder = new StringBuilder();\n-    builder.append(\"LoadFhirAppOptions =\");\n-\n-    builder.append(\", v2Enabled=\");\n-    builder.append(v2Enabled);\n-\n-    builder.append(\"]\");\n-    return builder.toString();\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg4MzQ2NQ==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#discussion_r507883465", "bodyText": "I would consider naming this file simply BeneficiaryTransformer.java - as it already resides in the r4 folder.", "author": "jzulim", "createdAt": "2020-10-19T16:19:49Z", "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/BeneficiaryTransformerV2.java", "diffHunk": "@@ -0,0 +1,340 @@\n+package gov.cms.bfd.server.war.r4.providers;", "originalCommit": "e316b2bb0753ecc4e7cd534b66e9fa7cc05635b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkwODExOA==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#discussion_r507908118", "bodyText": "Based on BFD v2 RFC, we have decided to have FHIR/HAPI version specific Resource providers and Transformers.", "author": "dshekhar18", "createdAt": "2020-10-19T16:57:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg4MzQ2NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg4NDMyMg==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#discussion_r507884322", "bodyText": "Same as above, I would consider removing version indicators from the filenames.", "author": "jzulim", "createdAt": "2020-10-19T16:21:04Z", "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/R4PatientResourceProvider.java", "diffHunk": "@@ -0,0 +1,838 @@\n+package gov.cms.bfd.server.war.r4.providers;", "originalCommit": "e316b2bb0753ecc4e7cd534b66e9fa7cc05635b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkwODI2Ng==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#discussion_r507908266", "bodyText": "See above.", "author": "dshekhar18", "createdAt": "2020-10-19T16:58:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg4NDMyMg=="}], "type": "inlineReview", "revised_code": {"commit": "265ea9672c7f3b8a04c70e2c78fc3b2ff1fb2c60", "chunk": "diff --git a/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/R4PatientResourceProvider.java b/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/R4PatientResourceProvider.java\nindex 276ae07d0..67450ab9d 100644\n--- a/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/R4PatientResourceProvider.java\n+++ b/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/R4PatientResourceProvider.java\n\n@@ -56,7 +56,7 @@ import org.slf4j.MDC;\n import org.springframework.stereotype.Component;\n \n /**\n- * This FHIR {@link IResourceProvider} adds support for STU3 {@link Patient} resources, derived from\n+ * This FHIR {@link IResourceProvider} adds support for R4 {@link Patient} resources, derived from\n  * the CCW beneficiaries.\n  */\n @Component\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg4NDY4Ng==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#discussion_r507884686", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * This FHIR {@link IResourceProvider} adds support for STU3 {@link Patient} resources, derived from\n          \n          \n            \n             * This FHIR {@link IResourceProvider} adds support for R4 {@link Patient} resources, derived from", "author": "jzulim", "createdAt": "2020-10-19T16:21:38Z", "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/R4PatientResourceProvider.java", "diffHunk": "@@ -0,0 +1,838 @@\n+package gov.cms.bfd.server.war.r4.providers;\n+\n+import ca.uhn.fhir.model.api.annotation.Description;\n+import ca.uhn.fhir.model.primitive.IdDt;\n+import ca.uhn.fhir.rest.annotation.IdParam;\n+import ca.uhn.fhir.rest.annotation.OptionalParam;\n+import ca.uhn.fhir.rest.annotation.Read;\n+import ca.uhn.fhir.rest.annotation.RequiredParam;\n+import ca.uhn.fhir.rest.annotation.Search;\n+import ca.uhn.fhir.rest.api.server.RequestDetails;\n+import ca.uhn.fhir.rest.param.DateRangeParam;\n+import ca.uhn.fhir.rest.param.TokenParam;\n+import ca.uhn.fhir.rest.server.IResourceProvider;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.exceptions.ResourceNotFoundException;\n+import com.codahale.metrics.MetricRegistry;\n+import com.codahale.metrics.Timer;\n+import com.newrelic.api.agent.Trace;\n+import gov.cms.bfd.model.codebook.data.CcwCodebookVariable;\n+import gov.cms.bfd.model.rif.Beneficiary;\n+import gov.cms.bfd.model.rif.BeneficiaryHistory;\n+import gov.cms.bfd.model.rif.BeneficiaryHistory_;\n+import gov.cms.bfd.model.rif.Beneficiary_;\n+import gov.cms.bfd.server.war.Operation;\n+import gov.cms.bfd.server.war.commons.LinkBuilder;\n+import gov.cms.bfd.server.war.commons.LoadedFilterManager;\n+import gov.cms.bfd.server.war.commons.OffsetLinkBuilder;\n+import gov.cms.bfd.server.war.commons.PatientLinkBuilder;\n+import gov.cms.bfd.server.war.commons.QueryUtils;\n+import gov.cms.bfd.server.war.commons.TransformerConstants;\n+import java.math.BigDecimal;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+import javax.persistence.EntityManager;\n+import javax.persistence.NoResultException;\n+import javax.persistence.PersistenceContext;\n+import javax.persistence.TypedQuery;\n+import javax.persistence.criteria.CriteriaBuilder;\n+import javax.persistence.criteria.CriteriaQuery;\n+import javax.persistence.criteria.JoinType;\n+import javax.persistence.criteria.Predicate;\n+import javax.persistence.criteria.Root;\n+import javax.persistence.metamodel.SingularAttribute;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.r4.model.Bundle;\n+import org.hl7.fhir.r4.model.IdType;\n+import org.hl7.fhir.r4.model.Identifier;\n+import org.hl7.fhir.r4.model.Patient;\n+import org.slf4j.MDC;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * This FHIR {@link IResourceProvider} adds support for STU3 {@link Patient} resources, derived from", "originalCommit": "e316b2bb0753ecc4e7cd534b66e9fa7cc05635b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkxOTUyNA==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#discussion_r507919524", "bodyText": "Done, thank you!", "author": "dshekhar18", "createdAt": "2020-10-19T17:16:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg4NDY4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "265ea9672c7f3b8a04c70e2c78fc3b2ff1fb2c60", "chunk": "diff --git a/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/R4PatientResourceProvider.java b/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/R4PatientResourceProvider.java\nindex 276ae07d0..67450ab9d 100644\n--- a/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/R4PatientResourceProvider.java\n+++ b/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/R4PatientResourceProvider.java\n\n@@ -56,7 +56,7 @@ import org.slf4j.MDC;\n import org.springframework.stereotype.Component;\n \n /**\n- * This FHIR {@link IResourceProvider} adds support for STU3 {@link Patient} resources, derived from\n+ * This FHIR {@link IResourceProvider} adds support for R4 {@link Patient} resources, derived from\n  * the CCW beneficiaries.\n  */\n @Component\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg5NjM0Mg==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#discussion_r507896342", "bodyText": "Another useful suggestion from @karlmdavis , pulled from previous PR:\n\nPersonally, I'd disagree: this should be modified in both RestfulServer implementations. It's entirely possible that we will never touch this code again: if we don't clean things up as we encounter them, who will? We should always strive to leave things a little better than we found them.\nIn this specific case, I don't see why a backend API like BFD needs CORS headers at all? I'd ask in #bfd-users and see if anyone objects to us removing it.", "author": "jzulim", "createdAt": "2020-10-19T16:39:17Z", "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/R4Server.java", "diffHunk": "@@ -0,0 +1,131 @@\n+package gov.cms.bfd.server.war;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.rest.api.EncodingEnum;\n+import ca.uhn.fhir.rest.server.ApacheProxyAddressStrategy;\n+import ca.uhn.fhir.rest.server.ETagSupportEnum;\n+import ca.uhn.fhir.rest.server.IResourceProvider;\n+import ca.uhn.fhir.rest.server.RestfulServer;\n+import ca.uhn.fhir.rest.server.interceptor.CorsInterceptor;\n+import ca.uhn.fhir.rest.server.interceptor.IServerInterceptor;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Properties;\n+import javax.servlet.Servlet;\n+import javax.servlet.ServletException;\n+import org.hl7.fhir.r4.hapi.rest.server.ServerCapabilityStatementProvider;\n+import org.hl7.fhir.r4.model.CapabilityStatement;\n+import org.springframework.web.context.ContextLoaderListener;\n+import org.springframework.web.context.WebApplicationContext;\n+import org.springframework.web.cors.CorsConfiguration;\n+\n+/**\n+ * The primary {@link Servlet} for this web application. Uses the <a href=\"http://hapifhir.io/\">HAPI\n+ * FHIR</a> framework to provide a fully functional FHIR API server that queries stored RIF data\n+ * from the CCW and converts it to the proper FHIR format \"on the fly\".\n+ */\n+public class R4Server extends RestfulServer {\n+\n+  private static final long serialVersionUID = 1L;\n+\n+  static final String CAPABILITIES_PUBLISHER = \"Centers for Medicare & Medicaid Services\";\n+  static final String CAPABILITIES_SERVER_NAME = \"Blue Button API: Direct\";\n+\n+  /** Constructs a new {@link R4Server} instance. */\n+  public R4Server() {\n+    super(FhirContext.forR4());\n+    setServerAddressStrategy(ApacheProxyAddressStrategy.forHttp());\n+    configureServerInfoMetadata();\n+  }\n+\n+  /**\n+   * Configures various metadata fields that will be included in this server's {@link\n+   * CapabilityStatement}.\n+   */\n+  private void configureServerInfoMetadata() {\n+    setServerName(CAPABILITIES_SERVER_NAME);\n+\n+    /*\n+     * Read in some of the project metadata from a Maven-filtered properties\n+     * file, which ensures that it's always up to date.\n+     */\n+    Properties projectProps = new Properties();\n+    try (InputStream projectPropsStream =\n+        Thread.currentThread()\n+            .getContextClassLoader()\n+            .getResourceAsStream(\"project.properties\"); ) {\n+      projectProps.load(projectPropsStream);\n+\n+      setImplementationDescription(projectProps.getProperty(\"project.id\"));\n+      setServerVersion(projectProps.getProperty(\"project.version\"));\n+    } catch (IOException e) {\n+      throw new UncheckedIOException(e);\n+    }\n+\n+    // Lightly customize the capability provider to set publisher name.\n+    ServerCapabilityStatementProvider capabilityStatementProvider =\n+        new ServerCapabilityStatementProvider(this);\n+    capabilityStatementProvider.setPublisher(CAPABILITIES_PUBLISHER);\n+    setServerConformanceProvider(capabilityStatementProvider);\n+  }\n+\n+  /** @see ca.uhn.fhir.rest.server.RestfulServer#initialize() */\n+  @SuppressWarnings(\"unchecked\")\n+  @Override\n+  protected void initialize() throws ServletException {\n+    /*\n+     * Grab the application's Spring WebApplicationContext from the web\n+     * container. We can use this to retrieve beans (and anything that needs\n+     * Spring injection/autowiring, e.g. anything that accesses the DB, must\n+     * be a bean).\n+     */\n+    WebApplicationContext springContext = ContextLoaderListener.getCurrentWebApplicationContext();\n+\n+    // Each IResourceProvider adds support for a specific FHIR resource.\n+    List<IResourceProvider> resourceProviders =\n+        springContext.getBean(SpringConfiguration.BLUEBUTTON_R4_RESOURCE_PROVIDERS, List.class);\n+    setResourceProviders(resourceProviders);\n+\n+    /*\n+     * Each \"plain\" provider has one or more annotated methods that provides\n+     * support for non-resource-type methods, such as transaction, and\n+     * global history.\n+     */\n+    List<Object> plainProviders = new ArrayList<>();\n+    setPlainProviders(plainProviders);\n+\n+    /*\n+     * Register the HAPI server interceptors that have been configured in\n+     * Spring.\n+     */\n+    Collection<IServerInterceptor> hapiInterceptors =\n+        springContext.getBeansOfType(IServerInterceptor.class).values();\n+    for (IServerInterceptor hapiInterceptor : hapiInterceptors) {\n+      this.registerInterceptor(hapiInterceptor);\n+    }\n+    /*\n+     * Enable CORS.\n+     */\n+    CorsConfiguration config = new CorsConfiguration();\n+    CorsInterceptor corsInterceptor = new CorsInterceptor(config);\n+    config.addAllowedHeader(\"Accept\");\n+    config.addAllowedHeader(\"Content-Type\");\n+    config.addAllowedOrigin(\"*\");\n+    config.addExposedHeader(\"Location\");\n+    config.addExposedHeader(\"Content-Location\");\n+    config.setAllowedMethods(Arrays.asList(\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\"));", "originalCommit": "e316b2bb0753ecc4e7cd534b66e9fa7cc05635b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAyODQ0MA==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#discussion_r508028440", "bodyText": "CORS Headers removed since BFD is a backend API.", "author": "dshekhar18", "createdAt": "2020-10-19T20:03:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg5NjM0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "265ea9672c7f3b8a04c70e2c78fc3b2ff1fb2c60", "chunk": "diff --git a/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/R4Server.java b/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/V2Server.java\nsimilarity index 83%\nrename from apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/R4Server.java\nrename to apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/V2Server.java\nindex 53fc51829..1512bbfaa 100644\n--- a/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/R4Server.java\n+++ b/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/V2Server.java\n\n@@ -6,13 +6,11 @@ import ca.uhn.fhir.rest.server.ApacheProxyAddressStrategy;\n import ca.uhn.fhir.rest.server.ETagSupportEnum;\n import ca.uhn.fhir.rest.server.IResourceProvider;\n import ca.uhn.fhir.rest.server.RestfulServer;\n-import ca.uhn.fhir.rest.server.interceptor.CorsInterceptor;\n import ca.uhn.fhir.rest.server.interceptor.IServerInterceptor;\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.UncheckedIOException;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collection;\n import java.util.List;\n import java.util.Properties;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg5Njg5OA==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#discussion_r507896898", "bodyText": "I'd stick with the \"v1\" and \"v2\" naming here, too.", "author": "jzulim", "createdAt": "2020-10-19T16:40:09Z", "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/SpringConfiguration.java", "diffHunk": "@@ -61,6 +62,8 @@\n    */\n   static final String BLUEBUTTON_STU3_RESOURCE_PROVIDERS = \"bluebuttonStu3ResourceProviders\";\n \n+  static final String BLUEBUTTON_R4_RESOURCE_PROVIDERS = \"bluebuttonR4ResourceProviders\";", "originalCommit": "e316b2bb0753ecc4e7cd534b66e9fa7cc05635b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkxMTE2MA==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#discussion_r507911160", "bodyText": "We are talking of FHIR resources, so STU3, R4, R5 etc. V1, V2, V3 etc will facade the specific FHIR and HAPI version (or any other FHIR framework) for external partners.", "author": "dshekhar18", "createdAt": "2020-10-19T17:02:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg5Njg5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkzMzI0NA==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#discussion_r507933244", "bodyText": "I have renamed the FHIR servers as v1 and v2 from STU3 and R4.", "author": "dshekhar18", "createdAt": "2020-10-19T17:37:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg5Njg5OA=="}], "type": "inlineReview", "revised_code": {"commit": "8736126d279cbf2658589b69e36ddaf4905ed133", "chunk": "diff --git a/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/SpringConfiguration.java b/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/SpringConfiguration.java\nindex 2fd755af5..ee01a7e6e 100644\n--- a/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/SpringConfiguration.java\n+++ b/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/SpringConfiguration.java\n\n@@ -56,6 +56,9 @@ public class SpringConfiguration {\n   public static final String PROP_DB_SCHEMA_APPLY = \"bfdServer.db.schema.apply\";\n   public static final int TRANSACTION_TIMEOUT = 30;\n \n+  @Value(\"${bfdServer.v2.enabled}\")\n+  public static final String PROP_BFD_V2_ENABLED = \"bfdServer.v2.enabled\";\n+\n   /**\n    * The {@link Bean#name()} for the {@link List} of STU3 {@link IResourceProvider} beans for the\n    * application.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg5NzM1NA==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#discussion_r507897354", "bodyText": "Naming here, too: \"v1\" and \"v2\".", "author": "jzulim", "createdAt": "2020-10-19T16:40:56Z", "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/SpringConfiguration.java", "diffHunk": "@@ -324,6 +327,19 @@ public PersistenceAnnotationBeanPostProcessor persistenceAnnotationProcessor() {\n     return stu3ResourceProviders;\n   }\n \n+  /**\n+   * @param r4PatientResourceProvider the application's {@link R4PatientResourceProvider} bean\n+   * @return the {@link List} of R4 {@link IResourceProvider} beans for the application\n+   */\n+  @Bean(name = BLUEBUTTON_R4_RESOURCE_PROVIDERS)", "originalCommit": "e316b2bb0753ecc4e7cd534b66e9fa7cc05635b6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "265ea9672c7f3b8a04c70e2c78fc3b2ff1fb2c60", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/265ea9672c7f3b8a04c70e2c78fc3b2ff1fb2c60", "message": "PR Comments for Patient V2", "committedDate": "2020-10-20T00:58:20Z", "type": "commit"}, {"oid": "c7b75e5997e97201302453fe4a138ff3cc4db36c", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/c7b75e5997e97201302453fe4a138ff3cc4db36c", "message": "Merge branch 'dshekhar/BFD-293-v2_Patient_POC' of https://github.com/CMSgov/beneficiary-fhir-data into dshekhar/BFD-293-v2_Patient_POC", "committedDate": "2020-10-20T00:59:16Z", "type": "commit"}, {"oid": "623e51af94b16c2bae6840531ab266b91a949ee3", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/623e51af94b16c2bae6840531ab266b91a949ee3", "message": "Update bfd-server.sh.j2\n\nV2 ENABLED Flag", "committedDate": "2020-10-20T02:05:48Z", "type": "commit"}, {"oid": "696841c6217f1ca6b70fb23a03688905eea05f74", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/696841c6217f1ca6b70fb23a03688905eea05f74", "message": "Update bfd-server.sh.j2\n\nV2 Flag", "committedDate": "2020-10-20T04:17:34Z", "type": "commit"}, {"oid": "0c303090fc57e1db4b53b5a4e186a02519a65b03", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/0c303090fc57e1db4b53b5a4e186a02519a65b03", "message": "Update bfd-server.sh.j2\n\nV2 flag", "committedDate": "2020-10-20T13:33:13Z", "type": "commit"}, {"oid": "8736126d279cbf2658589b69e36ddaf4905ed133", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/8736126d279cbf2658589b69e36ddaf4905ed133", "message": "v2 flah injection", "committedDate": "2020-10-20T14:05:55Z", "type": "commit"}, {"oid": "e1273bc88ef8c3d709acef6e9b3f6836b7585a16", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/e1273bc88ef8c3d709acef6e9b3f6836b7585a16", "message": "V2 Flag changes", "committedDate": "2020-10-20T16:17:26Z", "type": "commit"}, {"oid": "7ecd2dc805bfa1d8d7993880cd5c9db4a68eca15", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/7ecd2dc805bfa1d8d7993880cd5c9db4a68eca15", "message": "V2 flag enhancement", "committedDate": "2020-10-20T19:34:17Z", "type": "commit"}, {"oid": "6d0b7868974daedd3416ad337f6331e759526582", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/6d0b7868974daedd3416ad337f6331e759526582", "message": "V2 Flag fix", "committedDate": "2020-10-28T17:12:41Z", "type": "commit"}]}