{"pr_number": 4092, "pr_title": "fix-NXP-28634-faulty-infinite-scroll-in-HISTORY-tab", "pr_createdAt": "2020-05-28T19:14:23Z", "pr_url": "https://github.com/nuxeo/nuxeo/pull/4092", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE1Mjg0OA==", "url": "https://github.com/nuxeo/nuxeo/pull/4092#discussion_r433152848", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logEntries.add(buildLogEntry(doc, \"One\", \"secondEvent\", \"leela\", secondDate));\n          \n          \n            \n                    logEntries.add(buildLogEntry(doc, \"One\", \"secondEvent\", \"leela\", firstDate));", "author": "ataillefer", "createdAt": "2020-06-01T10:16:56Z", "path": "modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/AuditTest.java", "diffHunk": "@@ -304,38 +277,13 @@ public void shouldFilterLogEntriesOnMultipleCriteria() throws Exception {\n         ZonedDateTime secondDate = firstDate.plusDays(10);\n \n         List<LogEntry> logEntries = new ArrayList<>();\n-        LogEntry logEntry = auditLogger.newLogEntry();\n-        logEntry.setDocUUID(doc.getRef());\n-        logEntry.setCategory(\"One\");\n-        logEntry.setEventId(\"firstEvent\");\n-        logEntry.setPrincipalName(\"bender\");\n-        logEntry.setEventDate(DateUtils.toDate(firstDate));\n-        logEntries.add(logEntry);\n-        logEntry = auditLogger.newLogEntry();\n-        logEntry.setDocUUID(doc.getRef());\n-        logEntry.setCategory(\"One\");\n-        logEntry.setEventId(\"secondEvent\");\n-        logEntry.setPrincipalName(\"leela\");\n-        logEntry.setEventDate(DateUtils.toDate(firstDate));\n-        logEntries.add(logEntry);\n-        logEntry = auditLogger.newLogEntry();\n-        logEntry.setDocUUID(doc.getRef());\n-        logEntry.setCategory(\"One\");\n-        logEntry.setEventId(\"firstEvent\");\n-        logEntry.setPrincipalName(\"leela\");\n-        logEntry.setEventDate(DateUtils.toDate(secondDate));\n-        logEntries.add(logEntry);\n-        logEntry = auditLogger.newLogEntry();\n-        logEntry.setDocUUID(doc.getRef());\n-        logEntry.setCategory(\"One\");\n-        logEntry.setEventId(\"thirdEvent\");\n-        logEntry.setPrincipalName(\"leela\");\n-        logEntry.setEventDate(DateUtils.toDate(secondDate));\n-        logEntries.add(logEntry);\n+        logEntries.add(buildLogEntry(doc, \"One\", \"firstEvent\", \"bender\", firstDate));\n+        logEntries.add(buildLogEntry(doc, \"One\", \"secondEvent\", \"leela\", secondDate));", "originalCommit": "7f0d78d24c2649da49df4d800a4a78bffc9b6ebc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a167a1ce52596575ff3a4900dec5af681d562fe5", "chunk": "diff --git a/modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/AuditTest.java b/modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/AuditTest.java\nindex 08c1aec2df4..75bc7e9ea16 100644\n--- a/modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/AuditTest.java\n+++ b/modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/AuditTest.java\n\n@@ -278,7 +279,7 @@ public class AuditTest extends BaseTest {\n \n         List<LogEntry> logEntries = new ArrayList<>();\n         logEntries.add(buildLogEntry(doc, \"One\", \"firstEvent\", \"bender\", firstDate));\n-        logEntries.add(buildLogEntry(doc, \"One\", \"secondEvent\", \"leela\", secondDate));\n+        logEntries.add(buildLogEntry(doc, \"One\", \"secondEvent\", \"leela\", firstDate));\n         logEntries.add(buildLogEntry(doc, \"One\", \"firstEvent\", \"leela\", secondDate));\n         logEntries.add(buildLogEntry(doc, \"One\", \"thirdEvent\", \"leela\", secondDate));\n         auditLogger.addLogEntries(logEntries);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE1NTU1OA==", "url": "https://github.com/nuxeo/nuxeo/pull/4092#discussion_r433155558", "bodyText": "Are we sure of the impacts other than related to the PaginableAdapter?", "author": "ataillefer", "createdAt": "2020-06-01T10:23:48Z", "path": "modules/platform/nuxeo-platform-query-api/src/main/java/org/nuxeo/ecm/platform/query/api/AbstractPageProvider.java", "diffHunk": "@@ -355,7 +355,6 @@ public void addQuickFilter(QuickFilter quickFilter) {\n     public void setSortInfos(List<SortInfo> sortInfo) {\n         if (sortInfoChanged(this.sortInfos, sortInfo)) {\n             this.sortInfos = sortInfo;\n-            refresh();", "originalCommit": "b9fd9a68fd676f201e30622267a3a3db2e69f9ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE5OTc1Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/4092#discussion_r433199757", "bodyText": "I asked my self the same question,\nAt the beginning To minimise this impact, I created a new method that use a boolean param, to refresh at demande. But after that some tests fails on my local machine (test where  index = 1). Because the tests was a false positive, as each set of sort reset the index and I had some Page Provider Cache issue...\nTo be honest, the TP passe on default and mongoDB. But perhpas it will impact others things. But I don't know why we call refresh when set the sorter because this method will reset index and do other things.\nTo avoid any breaking changes if any. We can override the setSorter for the AuditPageProvider to avoid refresh only for this provider.", "author": "RSalem07", "createdAt": "2020-06-01T12:15:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE1NTU1OA=="}], "type": "inlineReview", "revised_code": {"commit": "40e2141fd3be83c4bc6f72de1165de0860617d0f", "chunk": "diff --git a/modules/platform/nuxeo-platform-query-api/src/main/java/org/nuxeo/ecm/platform/query/api/AbstractPageProvider.java b/modules/platform/nuxeo-platform-query-api/src/main/java/org/nuxeo/ecm/platform/query/api/AbstractPageProvider.java\nindex ee79226de35..9a666d6c553 100644\n--- a/modules/platform/nuxeo-platform-query-api/src/main/java/org/nuxeo/ecm/platform/query/api/AbstractPageProvider.java\n+++ b/modules/platform/nuxeo-platform-query-api/src/main/java/org/nuxeo/ecm/platform/query/api/AbstractPageProvider.java\n\n@@ -355,6 +355,7 @@ public abstract class AbstractPageProvider<T> implements PageProvider<T> {\n     public void setSortInfos(List<SortInfo> sortInfo) {\n         if (sortInfoChanged(this.sortInfos, sortInfo)) {\n             this.sortInfos = sortInfo;\n+            refresh();\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE1NzM4OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4092#discussion_r433157389", "bodyText": "Is this really useful? If sortBy isn't blank, then sortBy.split(\",\") should always return a non empty array no?", "author": "ataillefer", "createdAt": "2020-06-01T10:28:20Z", "path": "modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/adapters/PaginableAdapter.java", "diffHunk": "@@ -114,22 +118,27 @@ protected DocumentModel getSearchDocument() {\n         PageProviderService pps = Framework.getService(PageProviderService.class);\n         Map<String, Serializable> props = new HashMap<>();\n         props.put(CoreQueryDocumentPageProvider.CORE_SESSION_PROPERTY, (Serializable) ctx.getCoreSession());\n-        PageProvider<T> pp = (PageProvider<T>) pps.getPageProvider(\"\", ppDefinition, getSearchDocument(), null,\n-                pageSize, currentPageIndex, props, getParams());\n+        List<SortInfo> sortersInfos = null;\n         if (!StringUtils.isBlank(sortBy)) {\n             String[] sorts = sortBy.split(\",\");\n             String[] orders = null;\n             if (!StringUtils.isBlank(sortOrder)) {\n                 orders = sortOrder.split(\",\");\n             }\n-            // clear potential default sort infos first\n-            pp.setSortInfos(null);\n-            for (int i = 0; i < sorts.length; i++) {\n-                String sort = sorts[i];\n-                boolean sortAscending = orders != null && orders.length > i && \"asc\".equals(orders[i].toLowerCase());\n-                pp.addSortInfo(sort, sortAscending);\n+\n+            if (ArrayUtils.isNotEmpty(sorts)) {", "originalCommit": "b9fd9a68fd676f201e30622267a3a3db2e69f9ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIwMzc1OA==", "url": "https://github.com/nuxeo/nuxeo/pull/4092#discussion_r433203758", "bodyText": "Yep, I added the check to avoid passing an empty sorters to underline provide have a look at here From what I saw is if we pass empty array it will consider it as an empty sorter and it will end by not sorting (will not use the default ones).", "author": "RSalem07", "createdAt": "2020-06-01T12:25:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE1NzM4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIwNDcyNQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4092#discussion_r433204725", "bodyText": "But I re-check  a second time we can remove it, thx", "author": "RSalem07", "createdAt": "2020-06-01T12:28:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE1NzM4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "a167a1ce52596575ff3a4900dec5af681d562fe5", "chunk": "diff --git a/modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/adapters/PaginableAdapter.java b/modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/adapters/PaginableAdapter.java\nindex 7527b7e6803..2e14b5a8b85 100644\n--- a/modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/adapters/PaginableAdapter.java\n+++ b/modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/adapters/PaginableAdapter.java\n\n@@ -126,14 +125,11 @@ public abstract class PaginableAdapter<T> extends DefaultAdapter {\n                 orders = sortOrder.split(\",\");\n             }\n \n-            if (ArrayUtils.isNotEmpty(sorts)) {\n-                sortersInfos = new ArrayList<>(sorts.length);\n-                for (int i = 0; i < sorts.length; i++) {\n-                    String sort = sorts[i];\n-                    boolean sortAscending = orders != null && orders.length > i\n-                            && \"asc\".equals(orders[i].toLowerCase());\n-                    sortersInfos.add(new SortInfo(sort, sortAscending));\n-                }\n+            sortersInfos = new ArrayList<>(sorts.length);\n+            for (int i = 0; i < sorts.length; i++) {\n+                String sort = sorts[i];\n+                boolean sortAscending = orders != null && orders.length > i && \"asc\".equals(orders[i].toLowerCase());\n+                sortersInfos.add(new SortInfo(sort, sortAscending));\n             }\n         }\n         PageProvider<T> pp = (PageProvider<T>) pps.getPageProvider(\"\", ppDefinition, getSearchDocument(), sortersInfos,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE2MjkyMw==", "url": "https://github.com/nuxeo/nuxeo/pull/4092#discussion_r433162923", "bodyText": "Sounds weird to have \"firstEvent\" or \"thirdEvent\" occur several times.\nMaybe call them \"eventA\", \"eventB\", ...", "author": "ataillefer", "createdAt": "2020-06-01T10:41:53Z", "path": "modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/AuditTest.java", "diffHunk": "@@ -420,6 +421,64 @@ public void shouldEnrichWithLatestDocumentLogEntries() throws IOException {\n         }\n     }\n \n+    @Test\n+    public void shouldHandleSortingAndPagination() throws Exception {\n+        DocumentModel doc = RestServerInit.getFile(1, session);\n+\n+        List<LogEntry> logEntries = new ArrayList<>();\n+        logEntries.add(buildLogEntry(doc, \"Two\", \"secondEvent\", \"james\", null));\n+        logEntries.add(buildLogEntry(doc, \"Two\", \"firstEvent\", \"james\", null));\n+        logEntries.add(buildLogEntry(doc, \"Two\", \"thirdEvent\", \"james\", null));\n+        logEntries.add(buildLogEntry(doc, \"Two\", \"thirdEvent\", \"james\", null));\n+        logEntries.add(buildLogEntry(doc, \"Two\", \"thirdEvent\", \"james\", null));\n+        logEntries.add(buildLogEntry(doc, \"Two\", \"thirdEvent\", \"james\", null));\n+        logEntries.add(buildLogEntry(doc, \"One\", \"secondEvent\", \"james\", null));\n+        logEntries.add(buildLogEntry(doc, \"One\", \"thirdEvent\", \"james\", null));\n+        logEntries.add(buildLogEntry(doc, \"One\", \"firstEvent\", \"james\", null));\n+        logEntries.add(buildLogEntry(doc, \"One\", \"thirdEvent\", \"james\", null));\n+        logEntries.add(buildLogEntry(doc, \"One\", \"firstEvent\", \"james\", null));", "originalCommit": "b9fd9a68fd676f201e30622267a3a3db2e69f9ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE5NTI4MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4092#discussion_r433195281", "bodyText": "Yes, It was my first idea, but I tried to be consistent with the exiting tests where the pattern is to have this kind of name. But I can change them", "author": "RSalem07", "createdAt": "2020-06-01T12:04:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE2MjkyMw=="}], "type": "inlineReview", "revised_code": {"commit": "40e2141fd3be83c4bc6f72de1165de0860617d0f", "chunk": "diff --git a/modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/AuditTest.java b/modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/AuditTest.java\nindex 1c1c18f5eba..175f9f50413 100644\n--- a/modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/AuditTest.java\n+++ b/modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/AuditTest.java\n\n@@ -421,64 +420,6 @@ public class AuditTest extends BaseTest {\n         }\n     }\n \n-    @Test\n-    public void shouldHandleSortingAndPagination() throws Exception {\n-        DocumentModel doc = RestServerInit.getFile(1, session);\n-\n-        List<LogEntry> logEntries = new ArrayList<>();\n-        logEntries.add(buildLogEntry(doc, \"Two\", \"secondEvent\", \"james\", null));\n-        logEntries.add(buildLogEntry(doc, \"Two\", \"firstEvent\", \"james\", null));\n-        logEntries.add(buildLogEntry(doc, \"Two\", \"thirdEvent\", \"james\", null));\n-        logEntries.add(buildLogEntry(doc, \"Two\", \"thirdEvent\", \"james\", null));\n-        logEntries.add(buildLogEntry(doc, \"Two\", \"thirdEvent\", \"james\", null));\n-        logEntries.add(buildLogEntry(doc, \"Two\", \"thirdEvent\", \"james\", null));\n-        logEntries.add(buildLogEntry(doc, \"One\", \"secondEvent\", \"james\", null));\n-        logEntries.add(buildLogEntry(doc, \"One\", \"thirdEvent\", \"james\", null));\n-        logEntries.add(buildLogEntry(doc, \"One\", \"firstEvent\", \"james\", null));\n-        logEntries.add(buildLogEntry(doc, \"One\", \"thirdEvent\", \"james\", null));\n-        logEntries.add(buildLogEntry(doc, \"One\", \"firstEvent\", \"james\", null));\n-        auditLogger.addLogEntries(logEntries);\n-\n-        transactionalFeature.nextTransaction();\n-\n-        MultivaluedMap<String, String> queryParams = new MultivaluedMapImpl();\n-        queryParams.putSingle(\"principalName\", \"james\");\n-        queryParams.putSingle(\"sortBy\", \"category,eventId\");\n-        queryParams.putSingle(\"sortOrder\", \"asc,desc\");\n-        queryParams.putSingle(\"pageSize\", \"5\");\n-\n-        queryParams.putSingle(\"currentPageIndex\", \"0\");\n-        makeSortAndPaginationCallAndVerify(doc, queryParams, //\n-                List.of(\"One\", \"One\", \"One\", \"One\", \"One\"), //\n-                List.of(\"thirdEvent\", \"thirdEvent\", \"secondEvent\", \"firstEvent\", \"firstEvent\"));\n-\n-        queryParams.putSingle(\"currentPageIndex\", \"1\");\n-        makeSortAndPaginationCallAndVerify(doc, queryParams, //\n-                List.of(\"Two\", \"Two\", \"Two\", \"Two\", \"Two\"), //\n-                List.of(\"thirdEvent\", \"thirdEvent\", \"thirdEvent\", \"thirdEvent\", \"secondEvent\"));\n-\n-        queryParams.putSingle(\"currentPageIndex\", \"2\");\n-        makeSortAndPaginationCallAndVerify(doc, queryParams, //\n-                List.of(\"Two\"), //\n-                List.of(\"firstEvent\"));\n-    }\n-\n-    protected void makeSortAndPaginationCallAndVerify(DocumentModel doc, MultivaluedMap<String, String> queryParams,\n-            List<String> expectedCategories, List<String> expectedEvents) throws Exception {\n-        try (CloseableClientResponse response = getResponse(BaseTest.RequestType.GET,\n-                \"id/\" + doc.getId() + \"/@\" + AuditAdapter.NAME, queryParams)) {\n-            assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n-            JsonNode node = mapper.readTree(response.getEntityInputStream());\n-            List<JsonNode> nodes = getLogEntries(node);\n-\n-            List<String> categories = nodes.stream().map(n -> n.get(\"category\").asText()).collect(Collectors.toList());\n-            assertEquals(expectedCategories, categories);\n-\n-            List<String> events = nodes.stream().map(n -> n.get(\"eventId\").asText()).collect(Collectors.toList());\n-            assertEquals(expectedEvents, events);\n-        }\n-    }\n-\n     @Override\n     protected List<JsonNode> getLogEntries(JsonNode node) {\n         assertEquals(\"logEntries\", node.get(\"entity-type\").asText());\n"}}, {"oid": "a167a1ce52596575ff3a4900dec5af681d562fe5", "url": "https://github.com/nuxeo/nuxeo/commit/a167a1ce52596575ff3a4900dec5af681d562fe5", "message": "NXP-28634: Fix sorting and pagination (infinit scroll) in page provider", "committedDate": "2020-06-01T14:10:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMxNjYxOA==", "url": "https://github.com/nuxeo/nuxeo/pull/4092#discussion_r433316618", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<SortInfo> sortersInfos = null;\n          \n          \n            \n                    List<SortInfo> sortInfos = null;\n          \n      \n    \n    \n  \n\n?", "author": "troger", "createdAt": "2020-06-01T15:41:52Z", "path": "modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/adapters/PaginableAdapter.java", "diffHunk": "@@ -114,25 +117,24 @@ protected DocumentModel getSearchDocument() {\n         PageProviderService pps = Framework.getService(PageProviderService.class);\n         Map<String, Serializable> props = new HashMap<>();\n         props.put(CoreQueryDocumentPageProvider.CORE_SESSION_PROPERTY, (Serializable) ctx.getCoreSession());\n-        PageProvider<T> pp = (PageProvider<T>) pps.getPageProvider(\"\", ppDefinition, getSearchDocument(), null,\n-                pageSize, currentPageIndex, props, getParams());\n+        List<SortInfo> sortersInfos = null;", "originalCommit": "a167a1ce52596575ff3a4900dec5af681d562fe5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "40e2141fd3be83c4bc6f72de1165de0860617d0f", "chunk": "diff --git a/modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/adapters/PaginableAdapter.java b/modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/adapters/PaginableAdapter.java\nindex 2e14b5a8b85..384f552083c 100644\n--- a/modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/adapters/PaginableAdapter.java\n+++ b/modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/adapters/PaginableAdapter.java\n\n@@ -117,24 +114,22 @@ public abstract class PaginableAdapter<T> extends DefaultAdapter {\n         PageProviderService pps = Framework.getService(PageProviderService.class);\n         Map<String, Serializable> props = new HashMap<>();\n         props.put(CoreQueryDocumentPageProvider.CORE_SESSION_PROPERTY, (Serializable) ctx.getCoreSession());\n-        List<SortInfo> sortersInfos = null;\n+        PageProvider<T> pp = (PageProvider<T>) pps.getPageProvider(\"\", ppDefinition, getSearchDocument(), null,\n+                pageSize, currentPageIndex, props, getParams());\n         if (!StringUtils.isBlank(sortBy)) {\n             String[] sorts = sortBy.split(\",\");\n             String[] orders = null;\n             if (!StringUtils.isBlank(sortOrder)) {\n                 orders = sortOrder.split(\",\");\n             }\n-\n-            sortersInfos = new ArrayList<>(sorts.length);\n+            // clear potential default sort infos first\n+            pp.setSortInfos(null);\n             for (int i = 0; i < sorts.length; i++) {\n                 String sort = sorts[i];\n                 boolean sortAscending = orders != null && orders.length > i && \"asc\".equals(orders[i].toLowerCase());\n-                sortersInfos.add(new SortInfo(sort, sortAscending));\n+                pp.addSortInfo(sort, sortAscending);\n             }\n         }\n-        PageProvider<T> pp = (PageProvider<T>) pps.getPageProvider(\"\", ppDefinition, getSearchDocument(), sortersInfos,\n-                pageSize, currentPageIndex, props, getParams());\n-\n         return getPaginableEntries(pp);\n     }\n \n"}}, {"oid": "40e2141fd3be83c4bc6f72de1165de0860617d0f", "url": "https://github.com/nuxeo/nuxeo/commit/40e2141fd3be83c4bc6f72de1165de0860617d0f", "message": "NXP-28634: Cleanup / Format", "committedDate": "2020-06-01T16:59:32Z", "type": "commit"}, {"oid": "5293f4163a7531a3d9d659b4047fc8c68ba88be7", "url": "https://github.com/nuxeo/nuxeo/commit/5293f4163a7531a3d9d659b4047fc8c68ba88be7", "message": "NXP-28634: Fix sorting and pagination (infinit scroll) in page provider", "committedDate": "2020-06-01T16:59:32Z", "type": "forcePushed"}, {"oid": "90f5ba434ed20bd0e093121794c4b177c0b360c1", "url": "https://github.com/nuxeo/nuxeo/commit/90f5ba434ed20bd0e093121794c4b177c0b360c1", "message": "NXP-28634: Fix sorting and pagination (infinit scroll) in page provider", "committedDate": "2020-06-01T17:05:43Z", "type": "commit"}, {"oid": "90f5ba434ed20bd0e093121794c4b177c0b360c1", "url": "https://github.com/nuxeo/nuxeo/commit/90f5ba434ed20bd0e093121794c4b177c0b360c1", "message": "NXP-28634: Fix sorting and pagination (infinit scroll) in page provider", "committedDate": "2020-06-01T17:05:43Z", "type": "forcePushed"}]}