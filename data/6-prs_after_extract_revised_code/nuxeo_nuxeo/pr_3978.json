{"pr_number": 3978, "pr_title": "NXP-28939-improvement-split-retention-starting-point-prop", "pr_createdAt": "2020-04-27T13:51:00Z", "pr_url": "https://github.com/nuxeo/nuxeo/pull/3978", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg1MTAzMQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3978#discussion_r415851031", "bodyText": "Isn't this dangerous ? The name didn't change and this is not called in this pr and I have no clue to explain why the change. This put asside I'm okay with an \"evaluate\" method to return false on empty strings", "author": "NourNuxeo", "createdAt": "2020-04-27T14:16:56Z", "path": "modules/platform/nuxeo-retention-core/src/main/java/org/nuxeo/retention/service/RetentionManagerImpl.java", "diffHunk": "@@ -255,7 +255,7 @@ protected ELActionContext initActionContext(DocumentModel doc, CoreSession sessi\n     protected boolean evaluateConditionExpression(ELActionContext ctx, String expression) {\n         Calendar now = Calendar.getInstance();\n         if (StringUtils.isEmpty(expression)) {\n-            return true;\n+            return false;", "originalCommit": "3b9e0d5ae01cb24c26738b650a8f2225685fa6a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQyODY3NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3978#discussion_r416428675", "bodyText": "no, if we return the true as it was before the modification. The expression will be evaluated as true even the expression is empty see here which it means we put a retainUntil date where we shouldn't which is dangerous.", "author": "RSalem07", "createdAt": "2020-04-28T08:29:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg1MTAzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ0ODcxOQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3978#discussion_r416448719", "bodyText": "Yes I get that and agree.\nI'm just surprised it was wrong and it's just switched without comment.", "author": "NourNuxeo", "createdAt": "2020-04-28T08:59:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg1MTAzMQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg1NTgxMg==", "url": "https://github.com/nuxeo/nuxeo/pull/3978#discussion_r415855812", "bodyText": "Extra empty line (not in 10.10).", "author": "efge", "createdAt": "2020-04-27T14:22:48Z", "path": "modules/platform/nuxeo-retention-core/src/main/java/org/nuxeo/retention/adapters/RetentionRule.java", "diffHunk": "@@ -241,6 +245,11 @@ public void setStartingPointExpression(String expression) {\n         document.setPropertyValue(RetentionConstants.STARTING_POINT_EXPRESSION_PROP, expression);\n     }\n \n+", "originalCommit": "3b9e0d5ae01cb24c26738b650a8f2225685fa6a9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "618e737cd8418d07eac0c7d375de2e300f8190ec", "chunk": "diff --git a/modules/platform/nuxeo-retention-core/src/main/java/org/nuxeo/retention/adapters/RetentionRule.java b/modules/platform/nuxeo-retention-core/src/main/java/org/nuxeo/retention/adapters/RetentionRule.java\nindex c473d44caff..e9163f2c582 100644\n--- a/modules/platform/nuxeo-retention-core/src/main/java/org/nuxeo/retention/adapters/RetentionRule.java\n+++ b/modules/platform/nuxeo-retention-core/src/main/java/org/nuxeo/retention/adapters/RetentionRule.java\n\n@@ -245,7 +245,6 @@ public class RetentionRule {\n         document.setPropertyValue(RetentionConstants.STARTING_POINT_EXPRESSION_PROP, expression);\n     }\n \n-\n     public void setStartingPointValue(String eventInput) {\n         document.setPropertyValue(RetentionConstants.STARTING_POINT_VALUE_PROP, eventInput);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg1ODc3OA==", "url": "https://github.com/nuxeo/nuxeo/pull/3978#discussion_r415858778", "bodyText": "Extra empty line (not in 10.10).", "author": "efge", "createdAt": "2020-04-27T14:26:19Z", "path": "modules/platform/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionManager.java", "diffHunk": "@@ -147,6 +155,48 @@ public void testManualDocumentMovedToFolderRule() throws InterruptedException {\n         assertTrue(record.isRetentionExpired());\n     }\n \n+    @Test\n+    @Deploy(\"org.nuxeo.retention.core.test:OSGI-INF/retention-vocabularies-test.xml\")\n+    public void testManualDocumentMovedToFolderUsingEventValueRule() throws InterruptedException {\n+        String retentionEventId = \"myRetentionEvent\";\n+        String myRetentionEventInput = \"myEventInput\";\n+        RetentionRule testRule = createManualEventBasedRuleMillisWithEventValue(retentionEventId, myRetentionEventInput,\n+                1000);\n+\n+        file = service.attachRule(file, testRule, session);\n+        assertTrue(file.isRecord());\n+        assertTrue(session.isUnderRetentionOrLegalHold(file.getRef()));\n+\n+        awaitRetentionExpiration(500);\n+\n+        file = session.getDocument(file.getRef());\n+        Record record = file.getAdapter(Record.class);\n+        assertTrue(session.isUnderRetentionOrLegalHold(file.getRef()));\n+        assertTrue(record.isRetentionIndeterminate());\n+\n+        RetentionEventContext evctx = new RetentionEventContext(session.getPrincipal());\n+        evctx.setInput(myRetentionEventInput);\n+        Event event = evctx.newEvent(retentionEventId);\n+        eventProducer.fireEvent(event);\n+\n+        awaitRetentionExpiration(500);\n+\n+        file = session.getDocument(file.getRef());\n+        record = file.getAdapter(Record.class);\n+        assertTrue(session.isUnderRetentionOrLegalHold(file.getRef()));\n+        assertTrue(file.isRecord());\n+        assertFalse(record.isRetentionIndeterminate());\n+\n+        awaitRetentionExpiration(500);\n+\n+        // it has no retention anymore\n+        file = session.getDocument(file.getRef());\n+        record = file.getAdapter(Record.class);\n+        assertFalse(session.isUnderRetentionOrLegalHold(file.getRef()));\n+        assertTrue(record.isRetentionExpired());\n+    }\n+\n+", "originalCommit": "3b9e0d5ae01cb24c26738b650a8f2225685fa6a9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "618e737cd8418d07eac0c7d375de2e300f8190ec", "chunk": "diff --git a/modules/platform/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionManager.java b/modules/platform/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionManager.java\nindex 7e7440e0151..922b11b3e4b 100644\n--- a/modules/platform/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionManager.java\n+++ b/modules/platform/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionManager.java\n\n@@ -196,7 +196,6 @@ public class TestRetentionManager extends RetentionTestCase {\n         assertTrue(record.isRetentionExpired());\n     }\n \n-\n     @Test\n     public void testManualMetadataBasedRule() throws InterruptedException {\n         RetentionRule testRule = createManualMetadataBasedRuleMillis(\"dc:expired\", 1000);\n"}}, {"oid": "618e737cd8418d07eac0c7d375de2e300f8190ec", "url": "https://github.com/nuxeo/nuxeo/commit/618e737cd8418d07eac0c7d375de2e300f8190ec", "message": "NXP-28939: split the retention based event rule properties", "committedDate": "2020-04-28T08:40:04Z", "type": "forcePushed"}, {"oid": "f3f9a97c569b84e73fee3f0011b11ec6cf9d42cc", "url": "https://github.com/nuxeo/nuxeo/commit/f3f9a97c569b84e73fee3f0011b11ec6cf9d42cc", "message": "NXP-28939: split the retention based event rule properties", "committedDate": "2020-04-28T08:53:18Z", "type": "commit"}, {"oid": "f3f9a97c569b84e73fee3f0011b11ec6cf9d42cc", "url": "https://github.com/nuxeo/nuxeo/commit/f3f9a97c569b84e73fee3f0011b11ec6cf9d42cc", "message": "NXP-28939: split the retention based event rule properties", "committedDate": "2020-04-28T08:53:18Z", "type": "forcePushed"}]}