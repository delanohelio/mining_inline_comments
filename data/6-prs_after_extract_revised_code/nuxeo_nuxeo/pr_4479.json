{"pr_number": 4479, "pr_title": "NXP-29585: Add Bulk command queryLimit", "pr_createdAt": "2020-11-19T12:07:47Z", "pr_url": "https://github.com/nuxeo/nuxeo/pull/4479", "timeline": [{"oid": "7b1c824864cbae7a83ff1dacc4be227f00e4f37a", "url": "https://github.com/nuxeo/nuxeo/commit/7b1c824864cbae7a83ff1dacc4be227f00e4f37a", "message": "NXP-29677: Bump default partitions for async processing", "committedDate": "2020-11-20T15:54:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU4NDMxNQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4479#discussion_r530584315", "bodyText": "Can you use <= 0 to be stylistically consistent with other checks of this limit?", "author": "efge", "createdAt": "2020-11-25T18:56:02Z", "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/computation/BulkScrollerComputation.java", "diffHunk": "@@ -199,6 +218,14 @@ protected void processRecord(ComputationContext context, Record record) {\n         context.askForCheckpoint();\n     }\n \n+    private long getQueryLimit(BulkCommand command) {\n+        Long limit = command.getQueryLimit();\n+        if (limit == null || limit < 1) {", "originalCommit": "9afea36201f533daf40e2cf9ce820a61671c321c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "571c84b8056007ca70b2d925a0738d1dfcb7c653", "chunk": "diff --git a/modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/computation/BulkScrollerComputation.java b/modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/computation/BulkScrollerComputation.java\nindex ed8e018c826..e1ce7ebf8af 100644\n--- a/modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/computation/BulkScrollerComputation.java\n+++ b/modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/computation/BulkScrollerComputation.java\n\n@@ -220,7 +220,7 @@ public class BulkScrollerComputation extends AbstractComputation {\n \n     private long getQueryLimit(BulkCommand command) {\n         Long limit = command.getQueryLimit();\n-        if (limit == null || limit < 1) {\n+        if (limit == null || limit <= 0) {\n             return Long.MAX_VALUE;\n         }\n         return limit;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU4NDUyMw==", "url": "https://github.com/nuxeo/nuxeo/pull/4479#discussion_r530584523", "bodyText": "Maybe log the value in the exception message too?", "author": "efge", "createdAt": "2020-11-25T18:56:31Z", "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/message/BulkCommand.java", "diffHunk": "@@ -254,6 +274,29 @@ public Builder repository(String name) {\n             return this;\n         }\n \n+        /**\n+         * Limits the query result.\n+         *\n+         * @since 11.4\n+         */\n+        public Builder queryLimit(long limit) {\n+            if (limit <= 0) {\n+                throw new IllegalArgumentException(\"Limit must be > 0\");", "originalCommit": "9afea36201f533daf40e2cf9ce820a61671c321c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "571c84b8056007ca70b2d925a0738d1dfcb7c653", "chunk": "diff --git a/modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/message/BulkCommand.java b/modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/message/BulkCommand.java\nindex f9826ea1811..b48a0519465 100644\n--- a/modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/message/BulkCommand.java\n+++ b/modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/message/BulkCommand.java\n\n@@ -281,7 +281,7 @@ public class BulkCommand implements Serializable {\n          */\n         public Builder queryLimit(long limit) {\n             if (limit <= 0) {\n-                throw new IllegalArgumentException(\"Limit must be > 0\");\n+                throw new IllegalArgumentException(String.format(\"Invalid limit: %d, must be > 0\", limit));\n             }\n             this.queryLimit = limit;\n             return this;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU4ODk3OA==", "url": "https://github.com/nuxeo/nuxeo/pull/4479#discussion_r530588978", "bodyText": "It's not clear to me what his means when it's true. Is it that there was a limit passed when doing the query? Or that the query is incomplete in its results returned.\nA useful flag would be more about \"limitReached\", which I would call \"resultsTruncated\" or \"resultsIncomplete\", or \"moreResults\".", "author": "efge", "createdAt": "2020-11-25T19:06:02Z", "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/message/BulkStatus.java", "diffHunk": "@@ -111,6 +112,9 @@\n     @Nullable\n     protected Long processingDurationMillis;\n \n+    @AvroDefault(\"false\")\n+    protected boolean limitedQuery;", "originalCommit": "9afea36201f533daf40e2cf9ce820a61671c321c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk1NTc4Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/4479#discussion_r530955783", "bodyText": "limitedQuery is true if the query has a limit and it has been reached which makes sense in the context of the status, the query itself and its attributes (like the limit) are part of the command. limitReached or queryLimitReached could be an alternative.", "author": "bdelbosc", "createdAt": "2020-11-26T11:15:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU4ODk3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk3NTM0Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/4479#discussion_r530975342", "bodyText": "will use queryLimitReached", "author": "bdelbosc", "createdAt": "2020-11-26T11:50:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU4ODk3OA=="}], "type": "inlineReview", "revised_code": {"commit": "571c84b8056007ca70b2d925a0738d1dfcb7c653", "chunk": "diff --git a/modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/message/BulkStatus.java b/modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/message/BulkStatus.java\nindex bbe68bf3d18..757b2cd4d9b 100644\n--- a/modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/message/BulkStatus.java\n+++ b/modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/message/BulkStatus.java\n\n@@ -113,7 +113,7 @@ public class BulkStatus implements AsyncStatus<String> {\n     protected Long processingDurationMillis;\n \n     @AvroDefault(\"false\")\n-    protected boolean limitedQuery;\n+    protected boolean queryLimitReached;\n \n     @Nullable\n     @AvroEncode(using = MapAsJsonAsStringEncoding.class)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU4OTQ5NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4479#discussion_r530589495", "bodyText": "What about if we get exactly to the queryLimit value? Then we flag limitReached=true but there's no additional documents. The use of this for paging is not clear.", "author": "efge", "createdAt": "2020-11-25T19:07:11Z", "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/computation/BulkScrollerComputation.java", "diffHunk": "@@ -169,21 +176,33 @@ protected void processRecord(ComputationContext context, Record record) {\n                         return;\n                     }\n                     List<String> docIds = scroll.next();\n-                    documentIds.addAll(docIds);\n+                    int scrollCount = docIds.size();\n+                    if (documentCount + scrollCount < queryLimit) {\n+                        documentIds.addAll(docIds);\n+                    } else {\n+                        scrollCount = Math.toIntExact(queryLimit - documentCount);\n+                        documentIds.addAll(docIds.subList(0, scrollCount));\n+                        limitReached = true;\n+                    }", "originalCommit": "9afea36201f533daf40e2cf9ce820a61671c321c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk1ODk5OA==", "url": "https://github.com/nuxeo/nuxeo/pull/4479#discussion_r530958998", "bodyText": "the limit should be taken as LIMIT in SQL, the bulk service is not done for paging and we don't have to go into an off-by-one problem here.", "author": "bdelbosc", "createdAt": "2020-11-26T11:21:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU4OTQ5NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU5MDcxOA==", "url": "https://github.com/nuxeo/nuxeo/pull/4479#discussion_r530590718", "bodyText": "Please add tests for the behavior where the .queryLimit() is wordCount-1, exactly wordCount, and wordCount+1 to test edge cases.", "author": "efge", "createdAt": "2020-11-25T19:10:01Z", "path": "modules/core/nuxeo-core-bulk/src/test/java/org/nuxeo/ecm/core/bulk/action/TestWordCountAction.java", "diffHunk": "@@ -70,9 +71,57 @@ public void testWordCount() throws Exception {\n         assertTrue(bulkService.await(commandId, Duration.ofSeconds(20)));\n         BulkStatus status = bulkService.getStatus(commandId);\n         assertEquals(COMPLETED, status.getState());\n+        assertFalse(status.isLimitedQuery());\n         assertEquals(wordCount, status.getResult().get(\"wordCount\"));\n     }\n \n+    @Test\n+    public void testWordCountWithLimitedQery() throws Exception {\n+        int wordCount = 2732;\n+        String myFile = createFile(wordCount);\n+        // Use an action limited by default to the first 100 first lines\n+        BulkCommand command = new BulkCommand.Builder(\"testWordCountLimited\", myFile, \"system\")\n+                .useGenericScroller()\n+                .build();\n+        String commandId = bulkService.submit(command);\n+        assertTrue(bulkService.await(commandId, Duration.ofSeconds(20)));\n+        BulkStatus status = bulkService.getStatus(commandId);\n+        assertEquals(COMPLETED, status.getState());\n+        assertTrue(status.isLimitedQuery());\n+        int result100 = (Integer) status.getResult().get(\"wordCount\");\n+        assertTrue(result100 > 0);\n+        // the number of word for the first 100 lines is inferior to the total number of words in the file\n+        assertTrue(wordCount > result100);\n+\n+        // Now set an explicit limit to a lower number of lines\n+        command = new BulkCommand.Builder(\"testWordCountLimited\",  myFile, \"system\")\n+                .useGenericScroller()\n+                .queryLimit(10)\n+                .build();\n+        commandId = bulkService.submit(command);\n+        assertTrue(bulkService.await(commandId, Duration.ofSeconds(20)));\n+        status = bulkService.getStatus(commandId);\n+        assertTrue(status.isLimitedQuery());\n+        assertEquals(COMPLETED, status.getState());\n+        int result10 = (Integer) status.getResult().get(\"wordCount\");\n+        assertTrue(result10 > 0);\n+        // there is less words in 10 lines than 100\n+        assertTrue(result100 > result10);\n+\n+        // Now request explicit unlimited number of lines\n+        command = new BulkCommand.Builder(\"testWordCountLimited\",  myFile, \"system\")\n+                .useGenericScroller()\n+                .queryUnlimited()\n+                .build();\n+        commandId = bulkService.submit(command);\n+        assertTrue(bulkService.await(commandId, Duration.ofSeconds(20)));\n+        status = bulkService.getStatus(commandId);\n+        assertEquals(COMPLETED, status.getState());\n+        assertFalse(status.isLimitedQuery());\n+        long resultUnlimited = (Integer) status.getResult().get(\"wordCount\");\n+        assertEquals(wordCount, resultUnlimited);\n+    }", "originalCommit": "9afea36201f533daf40e2cf9ce820a61671c321c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "571c84b8056007ca70b2d925a0738d1dfcb7c653", "chunk": "diff --git a/modules/core/nuxeo-core-bulk/src/test/java/org/nuxeo/ecm/core/bulk/action/TestWordCountAction.java b/modules/core/nuxeo-core-bulk/src/test/java/org/nuxeo/ecm/core/bulk/action/TestWordCountAction.java\nindex 21339ba4c8f..9b5270a2da4 100644\n--- a/modules/core/nuxeo-core-bulk/src/test/java/org/nuxeo/ecm/core/bulk/action/TestWordCountAction.java\n+++ b/modules/core/nuxeo-core-bulk/src/test/java/org/nuxeo/ecm/core/bulk/action/TestWordCountAction.java\n\n@@ -71,14 +75,16 @@ public class TestWordCountAction {\n         assertTrue(bulkService.await(commandId, Duration.ofSeconds(20)));\n         BulkStatus status = bulkService.getStatus(commandId);\n         assertEquals(COMPLETED, status.getState());\n-        assertFalse(status.isLimitedQuery());\n+        assertFalse(status.isQueryLimitReached());\n         assertEquals(wordCount, status.getResult().get(\"wordCount\"));\n     }\n \n     @Test\n-    public void testWordCountWithLimitedQery() throws Exception {\n+    public void testWordCountWithLimitedQuery() throws Exception {\n         int wordCount = 2732;\n         String myFile = createFile(wordCount);\n+        int lines = countLines(myFile);\n+\n         // Use an action limited by default to the first 100 first lines\n         BulkCommand command = new BulkCommand.Builder(\"testWordCountLimited\", myFile, \"system\")\n                 .useGenericScroller()\n"}}, {"oid": "571c84b8056007ca70b2d925a0738d1dfcb7c653", "url": "https://github.com/nuxeo/nuxeo/commit/571c84b8056007ca70b2d925a0738d1dfcb7c653", "message": "NXP-29585: Add Bulk command queryLimit\n\nA default limit can be set on action and overriden when building command,\na flag in the status indicate if the limit has been reached for a command.", "committedDate": "2020-11-26T13:31:13Z", "type": "commit"}, {"oid": "5500aa62f1852ad8e04f10493152bdf578174257", "url": "https://github.com/nuxeo/nuxeo/commit/5500aa62f1852ad8e04f10493152bdf578174257", "message": "NXP-29585: Limit csvExport to 100k documents by default", "committedDate": "2020-11-26T13:31:13Z", "type": "commit"}, {"oid": "b5f5f3088925369e494de4c6afa975841f98101b", "url": "https://github.com/nuxeo/nuxeo/commit/b5f5f3088925369e494de4c6afa975841f98101b", "message": "NXP-29677: Bump default partitions for async processing", "committedDate": "2020-11-26T13:31:13Z", "type": "commit"}, {"oid": "b5f5f3088925369e494de4c6afa975841f98101b", "url": "https://github.com/nuxeo/nuxeo/commit/b5f5f3088925369e494de4c6afa975841f98101b", "message": "NXP-29677: Bump default partitions for async processing", "committedDate": "2020-11-26T13:31:13Z", "type": "forcePushed"}]}