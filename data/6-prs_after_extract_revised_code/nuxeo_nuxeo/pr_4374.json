{"pr_number": 4374, "pr_title": "NXP-29564 : Add use of FSExporter with collections", "pr_createdAt": "2020-10-12T09:18:07Z", "pr_url": "https://github.com/nuxeo/nuxeo/pull/4374", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMwMTQ4OA==", "url": "https://github.com/nuxeo/nuxeo/pull/4374#discussion_r503301488", "bodyText": "You could use the functional API there.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<String> collectedDocumentIds = collectionAdapter.getCollectedDocumentIds();\n          \n          \n            \n                    List<DocumentModel> collectedDocumentsList = new ArrayList<DocumentModel>();\n          \n          \n            \n                    for (int i = 0; i < collectedDocumentIds.size(); i++) {\n          \n          \n            \n                        collectedDocumentsList.add(session.getDocument(new IdRef(collectedDocumentIds.get(i))));\n          \n          \n            \n                    }\n          \n          \n            \n                    DocumentModelList collected = new DocumentModelListImpl(collectedDocumentsList);\n          \n          \n            \n                    return collected;\n          \n          \n            \n                    return collectionAdapter.getCollectedDocumentIds()\n          \n          \n            \n                                            .stream()\n          \n          \n            \n                                            .map(IdRef::new)\n          \n          \n            \n                                            .map(session::getDocument)\n          \n          \n            \n                                            .collect(Collectors.collectingAndThen(Collectors.toList(), DocumentModelListImpl::new));\n          \n      \n    \n    \n  \n\nNote: the two methods from Collectors could be imported statically.", "author": "kevinleturc", "createdAt": "2020-10-12T13:37:05Z", "path": "modules/platform/nuxeo-fsexporter/src/main/java/org/nuxeo/io/fsexporter/DefaultExporterPlugin.java", "diffHunk": "@@ -138,4 +142,16 @@ protected String getFileName(Blob blob, DocumentModel docfrom, File folder, int\n \n         return prefix + blob.getFilename();\n     }\n+\n+    @Override\n+    public DocumentModelList getCollectedDocuments(CoreSession session, DocumentModel collection) {\n+        Collection collectionAdapter = collection.getAdapter(Collection.class);\n+        List<String> collectedDocumentIds = collectionAdapter.getCollectedDocumentIds();\n+        List<DocumentModel> collectedDocumentsList = new ArrayList<DocumentModel>();\n+        for (int i = 0; i < collectedDocumentIds.size(); i++) {\n+            collectedDocumentsList.add(session.getDocument(new IdRef(collectedDocumentIds.get(i))));\n+        }\n+        DocumentModelList collected = new DocumentModelListImpl(collectedDocumentsList);\n+        return collected;", "originalCommit": "998b0688af19cb165ff95bd33b461e55dd2eb0d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f45c363a5857a0d7ad47658ee927519428ce3eac", "chunk": "diff --git a/modules/platform/nuxeo-fsexporter/src/main/java/org/nuxeo/io/fsexporter/DefaultExporterPlugin.java b/modules/platform/nuxeo-fsexporter/src/main/java/org/nuxeo/io/fsexporter/DefaultExporterPlugin.java\nindex 383072a3692..f6bada67e77 100644\n--- a/modules/platform/nuxeo-fsexporter/src/main/java/org/nuxeo/io/fsexporter/DefaultExporterPlugin.java\n+++ b/modules/platform/nuxeo-fsexporter/src/main/java/org/nuxeo/io/fsexporter/DefaultExporterPlugin.java\n\n@@ -146,12 +146,10 @@ public class DefaultExporterPlugin implements FSExporterPlugin {\n     @Override\n     public DocumentModelList getCollectedDocuments(CoreSession session, DocumentModel collection) {\n         Collection collectionAdapter = collection.getAdapter(Collection.class);\n-        List<String> collectedDocumentIds = collectionAdapter.getCollectedDocumentIds();\n-        List<DocumentModel> collectedDocumentsList = new ArrayList<DocumentModel>();\n-        for (int i = 0; i < collectedDocumentIds.size(); i++) {\n-            collectedDocumentsList.add(session.getDocument(new IdRef(collectedDocumentIds.get(i))));\n-        }\n-        DocumentModelList collected = new DocumentModelListImpl(collectedDocumentsList);\n-        return collected;\n+        return collectionAdapter.getCollectedDocumentIds()\n+                                .stream()\n+                                .map(IdRef::new)\n+                                .map(session::getDocument)\n+                                .collect(Collectors.collectingAndThen(Collectors.toList(), DocumentModelListImpl::new));\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMwMjE5MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4374#discussion_r503302191", "bodyText": "Could you add a javadoc with a @since 11.4 line?", "author": "kevinleturc", "createdAt": "2020-10-12T13:38:11Z", "path": "modules/platform/nuxeo-fsexporter/src/main/java/org/nuxeo/io/fsexporter/FSExporterPlugin.java", "diffHunk": "@@ -32,4 +32,6 @@\n \n     File serialize(CoreSession session, DocumentModel docfrom, String fsPath) throws IOException;\n \n+    DocumentModelList getCollectedDocuments(CoreSession session, DocumentModel doc);", "originalCommit": "998b0688af19cb165ff95bd33b461e55dd2eb0d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f45c363a5857a0d7ad47658ee927519428ce3eac", "chunk": "diff --git a/modules/platform/nuxeo-fsexporter/src/main/java/org/nuxeo/io/fsexporter/FSExporterPlugin.java b/modules/platform/nuxeo-fsexporter/src/main/java/org/nuxeo/io/fsexporter/FSExporterPlugin.java\nindex 195174db8f6..64ce1aff12e 100644\n--- a/modules/platform/nuxeo-fsexporter/src/main/java/org/nuxeo/io/fsexporter/FSExporterPlugin.java\n+++ b/modules/platform/nuxeo-fsexporter/src/main/java/org/nuxeo/io/fsexporter/FSExporterPlugin.java\n\n@@ -32,6 +32,9 @@ public interface FSExporterPlugin {\n \n     File serialize(CoreSession session, DocumentModel docfrom, String fsPath) throws IOException;\n \n+    /**\n+     * @since 11.4\n+     */\n     DocumentModelList getCollectedDocuments(CoreSession session, DocumentModel doc);\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMwMjMwMg==", "url": "https://github.com/nuxeo/nuxeo/pull/4374#discussion_r503302302", "bodyText": "This file is missing its Copyright header.", "author": "kevinleturc", "createdAt": "2020-10-12T13:38:22Z", "path": "modules/platform/nuxeo-fsexporter/src/test/java/org/nuxeo/io/fsexporter/test/TestFSExporterCollection.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package org.nuxeo.io.fsexporter.test;", "originalCommit": "998b0688af19cb165ff95bd33b461e55dd2eb0d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f45c363a5857a0d7ad47658ee927519428ce3eac", "chunk": "diff --git a/modules/platform/nuxeo-fsexporter/src/test/java/org/nuxeo/io/fsexporter/test/TestFSExporterCollection.java b/modules/platform/nuxeo-fsexporter/src/test/java/org/nuxeo/io/fsexporter/test/TestFSExporterCollection.java\nindex 13a6a90b19f..40beccf6f7e 100644\n--- a/modules/platform/nuxeo-fsexporter/src/test/java/org/nuxeo/io/fsexporter/test/TestFSExporterCollection.java\n+++ b/modules/platform/nuxeo-fsexporter/src/test/java/org/nuxeo/io/fsexporter/test/TestFSExporterCollection.java\n\n@@ -1,3 +1,21 @@\n+/*\n+ * (C) Copyright 2014-2018 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n package org.nuxeo.io.fsexporter.test;\n \n import static org.junit.Assert.assertTrue;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMwMjc1MA==", "url": "https://github.com/nuxeo/nuxeo/pull/4374#discussion_r503302750", "bodyText": "Could you make your fields protected?\nNote: we're used to only use protected and public visibilities.", "author": "kevinleturc", "createdAt": "2020-10-12T13:39:07Z", "path": "modules/platform/nuxeo-fsexporter/src/test/java/org/nuxeo/io/fsexporter/test/TestFSExporterCollection.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package org.nuxeo.io.fsexporter.test;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.File;\n+import java.io.Serializable;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.common.Environment;\n+import org.nuxeo.ecm.collections.api.CollectionManager;\n+import org.nuxeo.ecm.collections.core.test.CollectionFeature;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.PathRef;\n+import org.nuxeo.ecm.core.api.impl.blob.StringBlob;\n+import org.nuxeo.io.fsexporter.FSExporter;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features(CollectionFeature.class)\n+@Deploy(\"nuxeo-fsexporter\")\n+public class TestFSExporterCollection {\n+\n+    @Inject\n+    CoreSession session;", "originalCommit": "998b0688af19cb165ff95bd33b461e55dd2eb0d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f45c363a5857a0d7ad47658ee927519428ce3eac", "chunk": "diff --git a/modules/platform/nuxeo-fsexporter/src/test/java/org/nuxeo/io/fsexporter/test/TestFSExporterCollection.java b/modules/platform/nuxeo-fsexporter/src/test/java/org/nuxeo/io/fsexporter/test/TestFSExporterCollection.java\nindex 13a6a90b19f..40beccf6f7e 100644\n--- a/modules/platform/nuxeo-fsexporter/src/test/java/org/nuxeo/io/fsexporter/test/TestFSExporterCollection.java\n+++ b/modules/platform/nuxeo-fsexporter/src/test/java/org/nuxeo/io/fsexporter/test/TestFSExporterCollection.java\n\n@@ -1,3 +1,21 @@\n+/*\n+ * (C) Copyright 2014-2018 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n package org.nuxeo.io.fsexporter.test;\n \n import static org.junit.Assert.assertTrue;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMwMjg2Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/4374#discussion_r503302867", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void ShouldExportCollection() throws Exception {\n          \n          \n            \n                public void shouldExportCollection() throws Exception {", "author": "kevinleturc", "createdAt": "2020-10-12T13:39:16Z", "path": "modules/platform/nuxeo-fsexporter/src/test/java/org/nuxeo/io/fsexporter/test/TestFSExporterCollection.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package org.nuxeo.io.fsexporter.test;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.File;\n+import java.io.Serializable;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.common.Environment;\n+import org.nuxeo.ecm.collections.api.CollectionManager;\n+import org.nuxeo.ecm.collections.core.test.CollectionFeature;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.PathRef;\n+import org.nuxeo.ecm.core.api.impl.blob.StringBlob;\n+import org.nuxeo.io.fsexporter.FSExporter;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features(CollectionFeature.class)\n+@Deploy(\"nuxeo-fsexporter\")\n+public class TestFSExporterCollection {\n+\n+    @Inject\n+    CoreSession session;\n+\n+    @Inject\n+    CollectionManager collectionManager;\n+\n+    @Inject\n+    FSExporter service;\n+\n+    @Test\n+    public void ShouldExportCollection() throws Exception {", "originalCommit": "998b0688af19cb165ff95bd33b461e55dd2eb0d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f45c363a5857a0d7ad47658ee927519428ce3eac", "chunk": "diff --git a/modules/platform/nuxeo-fsexporter/src/test/java/org/nuxeo/io/fsexporter/test/TestFSExporterCollection.java b/modules/platform/nuxeo-fsexporter/src/test/java/org/nuxeo/io/fsexporter/test/TestFSExporterCollection.java\nindex 13a6a90b19f..40beccf6f7e 100644\n--- a/modules/platform/nuxeo-fsexporter/src/test/java/org/nuxeo/io/fsexporter/test/TestFSExporterCollection.java\n+++ b/modules/platform/nuxeo-fsexporter/src/test/java/org/nuxeo/io/fsexporter/test/TestFSExporterCollection.java\n\n@@ -1,3 +1,21 @@\n+/*\n+ * (C) Copyright 2014-2018 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n package org.nuxeo.io.fsexporter.test;\n \n import static org.junit.Assert.assertTrue;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMwNDAzNw==", "url": "https://github.com/nuxeo/nuxeo/pull/4374#discussion_r503304037", "bodyText": "According to the java convention naming, names such as these ones are for constants and not for inside method variable.", "author": "kevinleturc", "createdAt": "2020-10-12T13:41:06Z", "path": "modules/platform/nuxeo-fsexporter/src/test/java/org/nuxeo/io/fsexporter/test/TestFSExporterCollection.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package org.nuxeo.io.fsexporter.test;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.File;\n+import java.io.Serializable;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.common.Environment;\n+import org.nuxeo.ecm.collections.api.CollectionManager;\n+import org.nuxeo.ecm.collections.core.test.CollectionFeature;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.PathRef;\n+import org.nuxeo.ecm.core.api.impl.blob.StringBlob;\n+import org.nuxeo.io.fsexporter.FSExporter;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features(CollectionFeature.class)\n+@Deploy(\"nuxeo-fsexporter\")\n+public class TestFSExporterCollection {\n+\n+    @Inject\n+    CoreSession session;\n+\n+    @Inject\n+    CollectionManager collectionManager;\n+\n+    @Inject\n+    FSExporter service;\n+\n+    @Test\n+    public void ShouldExportCollection() throws Exception {\n+\n+        String COLLECTION_NAME = \"CollectionNameTest\";\n+        String COLLECTION_DESCRIPTION = \"dummy\";", "originalCommit": "998b0688af19cb165ff95bd33b461e55dd2eb0d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f45c363a5857a0d7ad47658ee927519428ce3eac", "chunk": "diff --git a/modules/platform/nuxeo-fsexporter/src/test/java/org/nuxeo/io/fsexporter/test/TestFSExporterCollection.java b/modules/platform/nuxeo-fsexporter/src/test/java/org/nuxeo/io/fsexporter/test/TestFSExporterCollection.java\nindex 13a6a90b19f..40beccf6f7e 100644\n--- a/modules/platform/nuxeo-fsexporter/src/test/java/org/nuxeo/io/fsexporter/test/TestFSExporterCollection.java\n+++ b/modules/platform/nuxeo-fsexporter/src/test/java/org/nuxeo/io/fsexporter/test/TestFSExporterCollection.java\n\n@@ -1,3 +1,21 @@\n+/*\n+ * (C) Copyright 2014-2018 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n package org.nuxeo.io.fsexporter.test;\n \n import static org.junit.Assert.assertTrue;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMwNDQxMg==", "url": "https://github.com/nuxeo/nuxeo/pull/4374#discussion_r503304412", "bodyText": "Not needed and not accurate, the document path is /default-domain/workspaces/testWorkspace.", "author": "kevinleturc", "createdAt": "2020-10-12T13:41:46Z", "path": "modules/platform/nuxeo-fsexporter/src/test/java/org/nuxeo/io/fsexporter/test/TestFSExporterCollection.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package org.nuxeo.io.fsexporter.test;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.File;\n+import java.io.Serializable;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.common.Environment;\n+import org.nuxeo.ecm.collections.api.CollectionManager;\n+import org.nuxeo.ecm.collections.core.test.CollectionFeature;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.PathRef;\n+import org.nuxeo.ecm.core.api.impl.blob.StringBlob;\n+import org.nuxeo.io.fsexporter.FSExporter;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features(CollectionFeature.class)\n+@Deploy(\"nuxeo-fsexporter\")\n+public class TestFSExporterCollection {\n+\n+    @Inject\n+    CoreSession session;\n+\n+    @Inject\n+    CollectionManager collectionManager;\n+\n+    @Inject\n+    FSExporter service;\n+\n+    @Test\n+    public void ShouldExportCollection() throws Exception {\n+\n+        String COLLECTION_NAME = \"CollectionNameTest\";\n+        String COLLECTION_DESCRIPTION = \"dummy\";\n+\n+        // path : testWorkspace", "originalCommit": "998b0688af19cb165ff95bd33b461e55dd2eb0d2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMwNTI0MA==", "url": "https://github.com/nuxeo/nuxeo/pull/4374#discussion_r503305240", "bodyText": "Same for others.", "author": "kevinleturc", "createdAt": "2020-10-12T13:42:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMwNDQxMg=="}], "type": "inlineReview", "revised_code": {"commit": "f45c363a5857a0d7ad47658ee927519428ce3eac", "chunk": "diff --git a/modules/platform/nuxeo-fsexporter/src/test/java/org/nuxeo/io/fsexporter/test/TestFSExporterCollection.java b/modules/platform/nuxeo-fsexporter/src/test/java/org/nuxeo/io/fsexporter/test/TestFSExporterCollection.java\nindex 13a6a90b19f..40beccf6f7e 100644\n--- a/modules/platform/nuxeo-fsexporter/src/test/java/org/nuxeo/io/fsexporter/test/TestFSExporterCollection.java\n+++ b/modules/platform/nuxeo-fsexporter/src/test/java/org/nuxeo/io/fsexporter/test/TestFSExporterCollection.java\n\n@@ -1,3 +1,21 @@\n+/*\n+ * (C) Copyright 2014-2018 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n package org.nuxeo.io.fsexporter.test;\n \n import static org.junit.Assert.assertTrue;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMwNjgwMA==", "url": "https://github.com/nuxeo/nuxeo/pull/4374#discussion_r503306800", "bodyText": "You could use the Blobs helper:\nBlobs.createBlob(\"some content\", \"text/plain\", \"UTF-8\", \"My_File_In_Section.txt\");", "author": "kevinleturc", "createdAt": "2020-10-12T13:45:22Z", "path": "modules/platform/nuxeo-fsexporter/src/test/java/org/nuxeo/io/fsexporter/test/TestFSExporterCollection.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package org.nuxeo.io.fsexporter.test;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.File;\n+import java.io.Serializable;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.common.Environment;\n+import org.nuxeo.ecm.collections.api.CollectionManager;\n+import org.nuxeo.ecm.collections.core.test.CollectionFeature;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.PathRef;\n+import org.nuxeo.ecm.core.api.impl.blob.StringBlob;\n+import org.nuxeo.io.fsexporter.FSExporter;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features(CollectionFeature.class)\n+@Deploy(\"nuxeo-fsexporter\")\n+public class TestFSExporterCollection {\n+\n+    @Inject\n+    CoreSession session;\n+\n+    @Inject\n+    CollectionManager collectionManager;\n+\n+    @Inject\n+    FSExporter service;\n+\n+    @Test\n+    public void ShouldExportCollection() throws Exception {\n+\n+        String COLLECTION_NAME = \"CollectionNameTest\";\n+        String COLLECTION_DESCRIPTION = \"dummy\";\n+\n+        // path : testWorkspace\n+        DocumentModel testWorkspace = session.createDocumentModel(\"/default-domain/workspaces\", \"testWorkspace\",\n+                \"Workspace\");\n+        testWorkspace = session.createDocument(testWorkspace);\n+\n+        // path : testFile\n+        DocumentModel testFile = session.createDocumentModel(\"\", \"testFileName\", \"File\");\n+        Blob blobTestFile = new StringBlob(\"some content\");\n+        blobTestFile.setFilename(\"My_File_In_Section.txt\");\n+        blobTestFile.setMimeType(\"text/plain\");", "originalCommit": "998b0688af19cb165ff95bd33b461e55dd2eb0d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f45c363a5857a0d7ad47658ee927519428ce3eac", "chunk": "diff --git a/modules/platform/nuxeo-fsexporter/src/test/java/org/nuxeo/io/fsexporter/test/TestFSExporterCollection.java b/modules/platform/nuxeo-fsexporter/src/test/java/org/nuxeo/io/fsexporter/test/TestFSExporterCollection.java\nindex 13a6a90b19f..40beccf6f7e 100644\n--- a/modules/platform/nuxeo-fsexporter/src/test/java/org/nuxeo/io/fsexporter/test/TestFSExporterCollection.java\n+++ b/modules/platform/nuxeo-fsexporter/src/test/java/org/nuxeo/io/fsexporter/test/TestFSExporterCollection.java\n\n@@ -1,3 +1,21 @@\n+/*\n+ * (C) Copyright 2014-2018 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n package org.nuxeo.io.fsexporter.test;\n \n import static org.junit.Assert.assertTrue;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMwODM4OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4374#discussion_r503308389", "bodyText": "You should import assertTrue statically.", "author": "kevinleturc", "createdAt": "2020-10-12T13:47:57Z", "path": "modules/platform/nuxeo-fsexporter/src/test/java/org/nuxeo/io/fsexporter/test/TestFSExporterCollection.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package org.nuxeo.io.fsexporter.test;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.File;\n+import java.io.Serializable;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.common.Environment;\n+import org.nuxeo.ecm.collections.api.CollectionManager;\n+import org.nuxeo.ecm.collections.core.test.CollectionFeature;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.PathRef;\n+import org.nuxeo.ecm.core.api.impl.blob.StringBlob;\n+import org.nuxeo.io.fsexporter.FSExporter;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features(CollectionFeature.class)\n+@Deploy(\"nuxeo-fsexporter\")\n+public class TestFSExporterCollection {\n+\n+    @Inject\n+    CoreSession session;\n+\n+    @Inject\n+    CollectionManager collectionManager;\n+\n+    @Inject\n+    FSExporter service;\n+\n+    @Test\n+    public void ShouldExportCollection() throws Exception {\n+\n+        String COLLECTION_NAME = \"CollectionNameTest\";\n+        String COLLECTION_DESCRIPTION = \"dummy\";\n+\n+        // path : testWorkspace\n+        DocumentModel testWorkspace = session.createDocumentModel(\"/default-domain/workspaces\", \"testWorkspace\",\n+                \"Workspace\");\n+        testWorkspace = session.createDocument(testWorkspace);\n+\n+        // path : testFile\n+        DocumentModel testFile = session.createDocumentModel(\"\", \"testFileName\", \"File\");\n+        Blob blobTestFile = new StringBlob(\"some content\");\n+        blobTestFile.setFilename(\"My_File_In_Section.txt\");\n+        blobTestFile.setMimeType(\"text/plain\");\n+        testFile.setPropertyValue(\"file:content\", (Serializable) blobTestFile);\n+        testFile = session.createDocument(testFile);\n+\n+        // path : testWorkspace/testFolder\n+        DocumentModel testFolder = session.createDocumentModel(testWorkspace.getPathAsString(), \"testFolderName\",\n+                \"Folder\");\n+        testFolder = session.createDocument(testFolder);\n+\n+        // path : testWorkspace/testFolder/testFolderFile\n+        DocumentModel testFolderFile = session.createDocumentModel(testFolder.getPathAsString(), \"testFolderFileName\",\n+                \"File\");\n+        Blob blobTestFolderFile = new StringBlob(\"some content\");\n+        blobTestFolderFile.setFilename(\"My_File_In_Section.txt\");\n+        blobTestFolderFile.setMimeType(\"text/plain\");\n+        testFolderFile.setPropertyValue(\"file:content\", (Serializable) blobTestFolderFile);\n+        testFolderFile = session.createDocument(testFolderFile);\n+\n+        collectionManager.addToNewCollection(COLLECTION_NAME, COLLECTION_DESCRIPTION, testWorkspace, session);\n+        String COLLECTION_FULL_PATH = collectionManager.getUserDefaultCollections(session).getPathAsString() + \"/\"\n+                + COLLECTION_NAME;\n+\n+        assertTrue(session.exists(new PathRef(COLLECTION_FULL_PATH)));\n+        DocumentModel collection = session.getDocument(new PathRef(COLLECTION_FULL_PATH));\n+\n+        collectionManager.addToCollection(collection, testFile, session);\n+\n+        String tmp = Environment.getDefault().getTemp().getPath();\n+        service.export(session, collection.getPathAsString(), tmp, \"\");\n+\n+        String pathPrefix = StringUtils.removeEnd(tmp, \"/\");\n+\n+        String pathCollection = pathPrefix + \"/\" + COLLECTION_NAME;\n+        String pathWorkspace = pathCollection + \"/\" + testWorkspace.getName();\n+        String pathTestFile = pathCollection + \"/\" + blobTestFile.getFilename();\n+        String pathTestFolder = pathWorkspace + \"/\" + testFolder.getName();\n+        String pathTestFolderFile = pathTestFolder + \"/\" + blobTestFolderFile.getFilename();\n+\n+        Assert.assertTrue(\"Collection must exist\", new File(pathCollection).exists());\n+        Assert.assertTrue(\"Workspace must exist\", new File(pathWorkspace).exists());\n+        Assert.assertTrue(\"TestFile must exist\", new File(pathTestFile).exists());\n+        Assert.assertTrue(\"TestFolder must exist\", new File(pathTestFolder).exists());\n+        Assert.assertTrue(\"TestFolderFile must exist\", new File(pathTestFolderFile).exists());", "originalCommit": "998b0688af19cb165ff95bd33b461e55dd2eb0d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f45c363a5857a0d7ad47658ee927519428ce3eac", "chunk": "diff --git a/modules/platform/nuxeo-fsexporter/src/test/java/org/nuxeo/io/fsexporter/test/TestFSExporterCollection.java b/modules/platform/nuxeo-fsexporter/src/test/java/org/nuxeo/io/fsexporter/test/TestFSExporterCollection.java\nindex 13a6a90b19f..40beccf6f7e 100644\n--- a/modules/platform/nuxeo-fsexporter/src/test/java/org/nuxeo/io/fsexporter/test/TestFSExporterCollection.java\n+++ b/modules/platform/nuxeo-fsexporter/src/test/java/org/nuxeo/io/fsexporter/test/TestFSExporterCollection.java\n\n@@ -1,3 +1,21 @@\n+/*\n+ * (C) Copyright 2014-2018 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n package org.nuxeo.io.fsexporter.test;\n \n import static org.junit.Assert.assertTrue;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMxMDM0OA==", "url": "https://github.com/nuxeo/nuxeo/pull/4374#discussion_r503310348", "bodyText": "Can you add a new line at the end of the file?", "author": "kevinleturc", "createdAt": "2020-10-12T13:50:58Z", "path": "modules/platform/nuxeo-fsexporter/src/test/java/org/nuxeo/io/fsexporter/test/TestFSExporterCollection.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package org.nuxeo.io.fsexporter.test;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.File;\n+import java.io.Serializable;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.common.Environment;\n+import org.nuxeo.ecm.collections.api.CollectionManager;\n+import org.nuxeo.ecm.collections.core.test.CollectionFeature;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.PathRef;\n+import org.nuxeo.ecm.core.api.impl.blob.StringBlob;\n+import org.nuxeo.io.fsexporter.FSExporter;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features(CollectionFeature.class)\n+@Deploy(\"nuxeo-fsexporter\")\n+public class TestFSExporterCollection {\n+\n+    @Inject\n+    CoreSession session;\n+\n+    @Inject\n+    CollectionManager collectionManager;\n+\n+    @Inject\n+    FSExporter service;\n+\n+    @Test\n+    public void ShouldExportCollection() throws Exception {\n+\n+        String COLLECTION_NAME = \"CollectionNameTest\";\n+        String COLLECTION_DESCRIPTION = \"dummy\";\n+\n+        // path : testWorkspace\n+        DocumentModel testWorkspace = session.createDocumentModel(\"/default-domain/workspaces\", \"testWorkspace\",\n+                \"Workspace\");\n+        testWorkspace = session.createDocument(testWorkspace);\n+\n+        // path : testFile\n+        DocumentModel testFile = session.createDocumentModel(\"\", \"testFileName\", \"File\");\n+        Blob blobTestFile = new StringBlob(\"some content\");\n+        blobTestFile.setFilename(\"My_File_In_Section.txt\");\n+        blobTestFile.setMimeType(\"text/plain\");\n+        testFile.setPropertyValue(\"file:content\", (Serializable) blobTestFile);\n+        testFile = session.createDocument(testFile);\n+\n+        // path : testWorkspace/testFolder\n+        DocumentModel testFolder = session.createDocumentModel(testWorkspace.getPathAsString(), \"testFolderName\",\n+                \"Folder\");\n+        testFolder = session.createDocument(testFolder);\n+\n+        // path : testWorkspace/testFolder/testFolderFile\n+        DocumentModel testFolderFile = session.createDocumentModel(testFolder.getPathAsString(), \"testFolderFileName\",\n+                \"File\");\n+        Blob blobTestFolderFile = new StringBlob(\"some content\");\n+        blobTestFolderFile.setFilename(\"My_File_In_Section.txt\");\n+        blobTestFolderFile.setMimeType(\"text/plain\");\n+        testFolderFile.setPropertyValue(\"file:content\", (Serializable) blobTestFolderFile);\n+        testFolderFile = session.createDocument(testFolderFile);\n+\n+        collectionManager.addToNewCollection(COLLECTION_NAME, COLLECTION_DESCRIPTION, testWorkspace, session);\n+        String COLLECTION_FULL_PATH = collectionManager.getUserDefaultCollections(session).getPathAsString() + \"/\"\n+                + COLLECTION_NAME;\n+\n+        assertTrue(session.exists(new PathRef(COLLECTION_FULL_PATH)));\n+        DocumentModel collection = session.getDocument(new PathRef(COLLECTION_FULL_PATH));\n+\n+        collectionManager.addToCollection(collection, testFile, session);\n+\n+        String tmp = Environment.getDefault().getTemp().getPath();\n+        service.export(session, collection.getPathAsString(), tmp, \"\");\n+\n+        String pathPrefix = StringUtils.removeEnd(tmp, \"/\");\n+\n+        String pathCollection = pathPrefix + \"/\" + COLLECTION_NAME;\n+        String pathWorkspace = pathCollection + \"/\" + testWorkspace.getName();\n+        String pathTestFile = pathCollection + \"/\" + blobTestFile.getFilename();\n+        String pathTestFolder = pathWorkspace + \"/\" + testFolder.getName();\n+        String pathTestFolderFile = pathTestFolder + \"/\" + blobTestFolderFile.getFilename();\n+\n+        Assert.assertTrue(\"Collection must exist\", new File(pathCollection).exists());\n+        Assert.assertTrue(\"Workspace must exist\", new File(pathWorkspace).exists());\n+        Assert.assertTrue(\"TestFile must exist\", new File(pathTestFile).exists());\n+        Assert.assertTrue(\"TestFolder must exist\", new File(pathTestFolder).exists());\n+        Assert.assertTrue(\"TestFolderFile must exist\", new File(pathTestFolderFile).exists());\n+\n+    }\n+\n+}", "originalCommit": "998b0688af19cb165ff95bd33b461e55dd2eb0d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f45c363a5857a0d7ad47658ee927519428ce3eac", "chunk": "diff --git a/modules/platform/nuxeo-fsexporter/src/test/java/org/nuxeo/io/fsexporter/test/TestFSExporterCollection.java b/modules/platform/nuxeo-fsexporter/src/test/java/org/nuxeo/io/fsexporter/test/TestFSExporterCollection.java\nindex 13a6a90b19f..40beccf6f7e 100644\n--- a/modules/platform/nuxeo-fsexporter/src/test/java/org/nuxeo/io/fsexporter/test/TestFSExporterCollection.java\n+++ b/modules/platform/nuxeo-fsexporter/src/test/java/org/nuxeo/io/fsexporter/test/TestFSExporterCollection.java\n\n@@ -1,3 +1,21 @@\n+/*\n+ * (C) Copyright 2014-2018 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n package org.nuxeo.io.fsexporter.test;\n \n import static org.junit.Assert.assertTrue;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMxMzE0OA==", "url": "https://github.com/nuxeo/nuxeo/pull/4374#discussion_r503313148", "bodyText": "In order to work correctly in the CI you should use FeaturesRunner.getBuildDirectory() method and then gives this folder to a TemporaryFolder rule such as below:\n    @Rule\n    public TemporaryFolder folder = new TemporaryFolder(new File(FeaturesRunner.getBuildDirectory()));\n\nThen in your test code:\nfolder.newFolder(\"fs-exporter\").getAbsolutePath()\n\nNote: fs-exporter is there to add isolation between tests.", "author": "kevinleturc", "createdAt": "2020-10-12T13:55:08Z", "path": "modules/platform/nuxeo-fsexporter/src/test/java/org/nuxeo/io/fsexporter/test/TestFSExporterCollection.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package org.nuxeo.io.fsexporter.test;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.File;\n+import java.io.Serializable;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.common.Environment;\n+import org.nuxeo.ecm.collections.api.CollectionManager;\n+import org.nuxeo.ecm.collections.core.test.CollectionFeature;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.PathRef;\n+import org.nuxeo.ecm.core.api.impl.blob.StringBlob;\n+import org.nuxeo.io.fsexporter.FSExporter;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features(CollectionFeature.class)\n+@Deploy(\"nuxeo-fsexporter\")\n+public class TestFSExporterCollection {\n+\n+    @Inject\n+    CoreSession session;\n+\n+    @Inject\n+    CollectionManager collectionManager;\n+\n+    @Inject\n+    FSExporter service;\n+\n+    @Test\n+    public void ShouldExportCollection() throws Exception {\n+\n+        String COLLECTION_NAME = \"CollectionNameTest\";\n+        String COLLECTION_DESCRIPTION = \"dummy\";\n+\n+        // path : testWorkspace\n+        DocumentModel testWorkspace = session.createDocumentModel(\"/default-domain/workspaces\", \"testWorkspace\",\n+                \"Workspace\");\n+        testWorkspace = session.createDocument(testWorkspace);\n+\n+        // path : testFile\n+        DocumentModel testFile = session.createDocumentModel(\"\", \"testFileName\", \"File\");\n+        Blob blobTestFile = new StringBlob(\"some content\");\n+        blobTestFile.setFilename(\"My_File_In_Section.txt\");\n+        blobTestFile.setMimeType(\"text/plain\");\n+        testFile.setPropertyValue(\"file:content\", (Serializable) blobTestFile);\n+        testFile = session.createDocument(testFile);\n+\n+        // path : testWorkspace/testFolder\n+        DocumentModel testFolder = session.createDocumentModel(testWorkspace.getPathAsString(), \"testFolderName\",\n+                \"Folder\");\n+        testFolder = session.createDocument(testFolder);\n+\n+        // path : testWorkspace/testFolder/testFolderFile\n+        DocumentModel testFolderFile = session.createDocumentModel(testFolder.getPathAsString(), \"testFolderFileName\",\n+                \"File\");\n+        Blob blobTestFolderFile = new StringBlob(\"some content\");\n+        blobTestFolderFile.setFilename(\"My_File_In_Section.txt\");\n+        blobTestFolderFile.setMimeType(\"text/plain\");\n+        testFolderFile.setPropertyValue(\"file:content\", (Serializable) blobTestFolderFile);\n+        testFolderFile = session.createDocument(testFolderFile);\n+\n+        collectionManager.addToNewCollection(COLLECTION_NAME, COLLECTION_DESCRIPTION, testWorkspace, session);\n+        String COLLECTION_FULL_PATH = collectionManager.getUserDefaultCollections(session).getPathAsString() + \"/\"\n+                + COLLECTION_NAME;\n+\n+        assertTrue(session.exists(new PathRef(COLLECTION_FULL_PATH)));\n+        DocumentModel collection = session.getDocument(new PathRef(COLLECTION_FULL_PATH));\n+\n+        collectionManager.addToCollection(collection, testFile, session);\n+\n+        String tmp = Environment.getDefault().getTemp().getPath();", "originalCommit": "998b0688af19cb165ff95bd33b461e55dd2eb0d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f45c363a5857a0d7ad47658ee927519428ce3eac", "chunk": "diff --git a/modules/platform/nuxeo-fsexporter/src/test/java/org/nuxeo/io/fsexporter/test/TestFSExporterCollection.java b/modules/platform/nuxeo-fsexporter/src/test/java/org/nuxeo/io/fsexporter/test/TestFSExporterCollection.java\nindex 13a6a90b19f..40beccf6f7e 100644\n--- a/modules/platform/nuxeo-fsexporter/src/test/java/org/nuxeo/io/fsexporter/test/TestFSExporterCollection.java\n+++ b/modules/platform/nuxeo-fsexporter/src/test/java/org/nuxeo/io/fsexporter/test/TestFSExporterCollection.java\n\n@@ -1,3 +1,21 @@\n+/*\n+ * (C) Copyright 2014-2018 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n package org.nuxeo.io.fsexporter.test;\n \n import static org.junit.Assert.assertTrue;\n"}}, {"oid": "f45c363a5857a0d7ad47658ee927519428ce3eac", "url": "https://github.com/nuxeo/nuxeo/commit/f45c363a5857a0d7ad47658ee927519428ce3eac", "message": "NXP-29564 : Add use of FSExporter with collections", "committedDate": "2020-10-13T08:54:18Z", "type": "forcePushed"}, {"oid": "dacfa52e4bae5db27a60d00484ba31798af0505e", "url": "https://github.com/nuxeo/nuxeo/commit/dacfa52e4bae5db27a60d00484ba31798af0505e", "message": "NXP-29564 : Add use of FSExporter with collections", "committedDate": "2020-10-13T08:57:26Z", "type": "forcePushed"}, {"oid": "eeb60a4c0304c6be70d9382977e53bd4599ec45b", "url": "https://github.com/nuxeo/nuxeo/commit/eeb60a4c0304c6be70d9382977e53bd4599ec45b", "message": "NXP-29564 : Add use of FSExporter with collections", "committedDate": "2020-10-13T09:10:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzkzOTcxNw==", "url": "https://github.com/nuxeo/nuxeo/pull/4374#discussion_r503939717", "bodyText": "I'm not a fan of collectingAndThen here @kevinleturc. I find it more readable to write\nList<DocumentModel> docs = collection.getAdapter(Collection.class)\n                                     .getCollectedDocumentIds()\n                                     .stream()\n                                     .map(IdRef::new)\n                                     .map(session::getDocument)\n                                     .collect(Collectors.toList());\nreturn new DocumentModelListImpl(docs);\n\nBut if we inline this in the caller we don't even need the DocumentModelListImpl or the Collectors.toList.", "author": "efge", "createdAt": "2020-10-13T13:14:33Z", "path": "modules/platform/nuxeo-fsexporter/src/main/java/org/nuxeo/io/fsexporter/DefaultExporterPlugin.java", "diffHunk": "@@ -138,4 +142,14 @@ protected String getFileName(Blob blob, DocumentModel docfrom, File folder, int\n \n         return prefix + blob.getFilename();\n     }\n+\n+    @Override\n+    public DocumentModelList getCollectedDocuments(CoreSession session, DocumentModel collection) {\n+        Collection collectionAdapter = collection.getAdapter(Collection.class);\n+        return collectionAdapter.getCollectedDocumentIds()\n+                                .stream()\n+                                .map(IdRef::new)\n+                                .map(session::getDocument)\n+                                .collect(Collectors.collectingAndThen(Collectors.toList(), DocumentModelListImpl::new));", "originalCommit": "eeb60a4c0304c6be70d9382977e53bd4599ec45b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fcde8ce84580b534db37d6ce76f2dd0538d9a62e", "chunk": "diff --git a/modules/platform/nuxeo-fsexporter/src/main/java/org/nuxeo/io/fsexporter/DefaultExporterPlugin.java b/modules/platform/nuxeo-fsexporter/src/main/java/org/nuxeo/io/fsexporter/DefaultExporterPlugin.java\nindex f6bada67e77..af77bdea959 100644\n--- a/modules/platform/nuxeo-fsexporter/src/main/java/org/nuxeo/io/fsexporter/DefaultExporterPlugin.java\n+++ b/modules/platform/nuxeo-fsexporter/src/main/java/org/nuxeo/io/fsexporter/DefaultExporterPlugin.java\n\n@@ -143,13 +140,4 @@ public class DefaultExporterPlugin implements FSExporterPlugin {\n         return prefix + blob.getFilename();\n     }\n \n-    @Override\n-    public DocumentModelList getCollectedDocuments(CoreSession session, DocumentModel collection) {\n-        Collection collectionAdapter = collection.getAdapter(Collection.class);\n-        return collectionAdapter.getCollectedDocumentIds()\n-                                .stream()\n-                                .map(IdRef::new)\n-                                .map(session::getDocument)\n-                                .collect(Collectors.collectingAndThen(Collectors.toList(), DocumentModelListImpl::new));\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk0NTE1OA==", "url": "https://github.com/nuxeo/nuxeo/pull/4374#discussion_r503945158", "bodyText": "For new code we often write functionally:\nString path = serialized.getAbsolutePath();\nexporter.getCollectedDocuments(session, doc)\n        .forEach(collected -> serializeStructure(session, path, collected, PageProvider));\n\nAlthough with my other suggestion to get rid of the exporter.getCollectedDocuments method it'll look a bit different.", "author": "efge", "createdAt": "2020-10-13T13:20:37Z", "path": "modules/platform/nuxeo-fsexporter/src/main/java/org/nuxeo/io/fsexporter/FSExporter.java", "diffHunk": "@@ -64,6 +65,11 @@ private void serializeStructure(CoreSession session, String fsPath, DocumentMode\n             for (DocumentModel child : children) {\n                 serializeStructure(session, serialized.getAbsolutePath(), child, PageProvider);\n             }\n+        } else if (doc.hasFacet(CollectionConstants.COLLECTION_FACET)) {\n+            DocumentModelList collectedDocuments = exporter.getCollectedDocuments(session, doc);\n+            for (DocumentModel collected : collectedDocuments) {\n+                serializeStructure(session, serialized.getAbsolutePath(), collected, PageProvider);\n+            }", "originalCommit": "eeb60a4c0304c6be70d9382977e53bd4599ec45b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fcde8ce84580b534db37d6ce76f2dd0538d9a62e", "chunk": "diff --git a/modules/platform/nuxeo-fsexporter/src/main/java/org/nuxeo/io/fsexporter/FSExporter.java b/modules/platform/nuxeo-fsexporter/src/main/java/org/nuxeo/io/fsexporter/FSExporter.java\nindex f9ce805dc9a..1745da20426 100644\n--- a/modules/platform/nuxeo-fsexporter/src/main/java/org/nuxeo/io/fsexporter/FSExporter.java\n+++ b/modules/platform/nuxeo-fsexporter/src/main/java/org/nuxeo/io/fsexporter/FSExporter.java\n\n@@ -66,8 +70,13 @@ public class FSExporter extends DefaultComponent implements FSExporterService {\n                 serializeStructure(session, serialized.getAbsolutePath(), child, PageProvider);\n             }\n         } else if (doc.hasFacet(CollectionConstants.COLLECTION_FACET)) {\n-            DocumentModelList collectedDocuments = exporter.getCollectedDocuments(session, doc);\n-            for (DocumentModel collected : collectedDocuments) {\n+            List<DocumentModel> collectedDocs = doc.getAdapter(Collection.class)\n+                                                   .getCollectedDocumentIds()\n+                                                   .stream()\n+                                                   .map(IdRef::new)\n+                                                   .map(session::getDocument)\n+                                                   .collect(Collectors.toList());\n+            for (DocumentModel collected : collectedDocs) {\n                 serializeStructure(session, serialized.getAbsolutePath(), collected, PageProvider);\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk0NTg3Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/4374#discussion_r503945876", "bodyText": "2014-2018 -> 2020", "author": "efge", "createdAt": "2020-10-13T13:21:15Z", "path": "modules/platform/nuxeo-fsexporter/src/test/java/org/nuxeo/io/fsexporter/test/TestFSExporterCollection.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * (C) Copyright 2014-2018 Nuxeo (http://nuxeo.com/) and others.", "originalCommit": "eeb60a4c0304c6be70d9382977e53bd4599ec45b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fcde8ce84580b534db37d6ce76f2dd0538d9a62e", "chunk": "diff --git a/modules/platform/nuxeo-fsexporter/src/test/java/org/nuxeo/io/fsexporter/test/TestFSExporterCollection.java b/modules/platform/nuxeo-fsexporter/src/test/java/org/nuxeo/io/fsexporter/test/TestFSExporterCollection.java\nindex 909554894b5..a5581c96941 100644\n--- a/modules/platform/nuxeo-fsexporter/src/test/java/org/nuxeo/io/fsexporter/test/TestFSExporterCollection.java\n+++ b/modules/platform/nuxeo-fsexporter/src/test/java/org/nuxeo/io/fsexporter/test/TestFSExporterCollection.java\n\n@@ -1,5 +1,5 @@\n /*\n- * (C) Copyright 2014-2018 Nuxeo (http://nuxeo.com/) and others.\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk1MTk5OA==", "url": "https://github.com/nuxeo/nuxeo/pull/4374#discussion_r503951998", "bodyText": "This doesn't need to be a method in the FSExporterPlugin interface. Just inline the actual implementation into its caller, in FSExporter.export in the if statement.", "author": "efge", "createdAt": "2020-10-13T13:29:24Z", "path": "modules/platform/nuxeo-fsexporter/src/main/java/org/nuxeo/io/fsexporter/FSExporterPlugin.java", "diffHunk": "@@ -32,4 +32,9 @@\n \n     File serialize(CoreSession session, DocumentModel docfrom, String fsPath) throws IOException;\n \n+    /**\n+     * @since 11.4\n+     */\n+    DocumentModelList getCollectedDocuments(CoreSession session, DocumentModel doc);", "originalCommit": "eeb60a4c0304c6be70d9382977e53bd4599ec45b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fcde8ce84580b534db37d6ce76f2dd0538d9a62e", "chunk": "diff --git a/modules/platform/nuxeo-fsexporter/src/main/java/org/nuxeo/io/fsexporter/FSExporterPlugin.java b/modules/platform/nuxeo-fsexporter/src/main/java/org/nuxeo/io/fsexporter/FSExporterPlugin.java\nindex 64ce1aff12e..f3255697cff 100644\n--- a/modules/platform/nuxeo-fsexporter/src/main/java/org/nuxeo/io/fsexporter/FSExporterPlugin.java\n+++ b/modules/platform/nuxeo-fsexporter/src/main/java/org/nuxeo/io/fsexporter/FSExporterPlugin.java\n\n@@ -32,9 +32,4 @@ public interface FSExporterPlugin {\n \n     File serialize(CoreSession session, DocumentModel docfrom, String fsPath) throws IOException;\n \n-    /**\n-     * @since 11.4\n-     */\n-    DocumentModelList getCollectedDocuments(CoreSession session, DocumentModel doc);\n-\n }\n"}}, {"oid": "fcde8ce84580b534db37d6ce76f2dd0538d9a62e", "url": "https://github.com/nuxeo/nuxeo/commit/fcde8ce84580b534db37d6ce76f2dd0538d9a62e", "message": "NXP-29564 : Add use of FSExporter with collections", "committedDate": "2020-10-13T14:32:32Z", "type": "forcePushed"}, {"oid": "f094bef628d3c02328222d19d28b34c1a1b0aea8", "url": "https://github.com/nuxeo/nuxeo/commit/f094bef628d3c02328222d19d28b34c1a1b0aea8", "message": "NXP-29564 : Add use of FSExporter with collections", "committedDate": "2020-10-13T14:36:21Z", "type": "commit"}, {"oid": "f094bef628d3c02328222d19d28b34c1a1b0aea8", "url": "https://github.com/nuxeo/nuxeo/commit/f094bef628d3c02328222d19d28b34c1a1b0aea8", "message": "NXP-29564 : Add use of FSExporter with collections", "committedDate": "2020-10-13T14:36:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAxOTg0OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4374#discussion_r504019849", "bodyText": "Let's be fully functional:\nString path = serialized.getAbsolutePath();\ndoc.getAdapter(Collection.class)\n   .getCollectedDocumentIds()\n   .stream()\n   .map(IdRef::new)\n   .map(session::getDocument)\n   .forEach(collected -> serializeStructure(session, path, collected, PageProvider));\n\nAnd remove unneeded imports.", "author": "efge", "createdAt": "2020-10-13T14:54:35Z", "path": "modules/platform/nuxeo-fsexporter/src/main/java/org/nuxeo/io/fsexporter/FSExporter.java", "diffHunk": "@@ -64,6 +69,16 @@ private void serializeStructure(CoreSession session, String fsPath, DocumentMode\n             for (DocumentModel child : children) {\n                 serializeStructure(session, serialized.getAbsolutePath(), child, PageProvider);\n             }\n+        } else if (doc.hasFacet(CollectionConstants.COLLECTION_FACET)) {\n+            List<DocumentModel> collectedDocs = doc.getAdapter(Collection.class)\n+                                                   .getCollectedDocumentIds()\n+                                                   .stream()\n+                                                   .map(IdRef::new)\n+                                                   .map(session::getDocument)\n+                                                   .collect(Collectors.toList());\n+            for (DocumentModel collected : collectedDocs) {\n+                serializeStructure(session, serialized.getAbsolutePath(), collected, PageProvider);\n+            }", "originalCommit": "f094bef628d3c02328222d19d28b34c1a1b0aea8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAyNzI1OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4374#discussion_r504027259", "bodyText": "By using this I have to surround\n\nserializeStructure(session, path, collected, PageProvider));\n\nwith a try/catch block", "author": "charlesboidot", "createdAt": "2020-10-13T15:03:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAxOTg0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAyNzY1Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/4374#discussion_r504027653", "bodyText": "Is it really better than a for loop?", "author": "charlesboidot", "createdAt": "2020-10-13T15:04:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAxOTg0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAzMzM4Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/4374#discussion_r504033383", "bodyText": "Ah indeed if serializeStructure can throw IOException then we reach the limitations of lambdas...\nOk as it is then.", "author": "efge", "createdAt": "2020-10-13T15:11:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAxOTg0OQ=="}], "type": "inlineReview", "revised_code": null}]}