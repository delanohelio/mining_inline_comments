{"pr_number": 3900, "pr_title": "NXP-28900: allow blob provider to access document when reading blob", "pr_createdAt": "2020-04-08T16:10:53Z", "pr_url": "https://github.com/nuxeo/nuxeo/pull/3900", "timeline": [{"oid": "65e8364875a06597c87de0e9a3caab7e9ab32dfe", "url": "https://github.com/nuxeo/nuxeo/commit/65e8364875a06597c87de0e9a3caab7e9ab32dfe", "message": "NXP-28919: allow blob provider to do optimized byte range requests", "committedDate": "2020-04-13T17:58:18Z", "type": "forcePushed"}, {"oid": "8de5454a7317a08c81a1edd6f0a395eb74beb676", "url": "https://github.com/nuxeo/nuxeo/commit/8de5454a7317a08c81a1edd6f0a395eb74beb676", "message": "NXP-28900: allow blob provider to access document when reading blob", "committedDate": "2020-04-13T18:28:16Z", "type": "commit"}, {"oid": "f8ab2d2cf6cb4ecc6d5f4ac8ac167b34db47ee2e", "url": "https://github.com/nuxeo/nuxeo/commit/f8ab2d2cf6cb4ecc6d5f4ac8ac167b34db47ee2e", "message": "NXP-28919: allow blob provider to do optimized byte range requests", "committedDate": "2020-04-13T18:33:43Z", "type": "forcePushed"}, {"oid": "4c9a16dafd125a6964c3b25206303c9ade1757d4", "url": "https://github.com/nuxeo/nuxeo/commit/4c9a16dafd125a6964c3b25206303c9ade1757d4", "message": "NXP-28919: allow blob provider to do optimized byte range requests", "committedDate": "2020-04-13T19:05:02Z", "type": "forcePushed"}, {"oid": "1a524ee3c57f11ba2e0134e0b6a972b7a66604ab", "url": "https://github.com/nuxeo/nuxeo/commit/1a524ee3c57f11ba2e0134e0b6a972b7a66604ab", "message": "NXP-28919: allow blob provider to do optimized byte range requests", "committedDate": "2020-04-14T01:16:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY3MTQzMg==", "url": "https://github.com/nuxeo/nuxeo/pull/3900#discussion_r408671432", "bodyText": "Is there any replacement to mention?", "author": "troger", "createdAt": "2020-04-15T08:31:41Z", "path": "modules/core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/blob/BlobManager.java", "diffHunk": "@@ -95,22 +95,28 @@ default BlobProvider getBlobProviderWithNamespace(String id) {\n     BlobProvider getBlobProvider(Blob blob);\n \n     /**\n-     * INTERNAL - Gets an {@link InputStream} for the data of a managed blob. Used by internal implementations, regular\n-     * callers should call {@link Blob#getStream}.\n+     * Gets an {@link InputStream} for the data of a managed blob.\n+     * <p>\n+     * If the blob is managed this is equivalent to {@link ManagedBlob#getStream()}, otherwise returns {@code null}.\n      *\n      * @param blob the blob\n-     * @return the stream\n+     * @return the stream, or {@code null} if the blob is not managed\n+     * @deprecated since 11.1", "originalCommit": "1a524ee3c57f11ba2e0134e0b6a972b7a66604ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc3Mjc2Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/3900#discussion_r408772767", "bodyText": "The Javadoc says If the blob is managed this is equivalent to {@link ManagedBlob#getStream()}, otherwise returns {@code null} so I think it's enough?", "author": "efge", "createdAt": "2020-04-15T11:31:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY3MTQzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc3MzM2Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/3900#discussion_r408773363", "bodyText": "But I'll add something anyway ok.", "author": "efge", "createdAt": "2020-04-15T11:32:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY3MTQzMg=="}], "type": "inlineReview", "revised_code": {"commit": "ac3275a535af64993a8c74f49b54e14f0d46f422", "chunk": "diff --git a/modules/core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/blob/BlobManager.java b/modules/core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/blob/BlobManager.java\nindex 6bd40b25b7f..9951c4a416c 100644\n--- a/modules/core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/blob/BlobManager.java\n+++ b/modules/core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/blob/BlobManager.java\n\n@@ -101,7 +101,7 @@ public interface BlobManager {\n      *\n      * @param blob the blob\n      * @return the stream, or {@code null} if the blob is not managed\n-     * @deprecated since 11.1\n+     * @deprecated since 11.1, use {@link Blob#getStream()} instead\n      */\n     @Deprecated\n     InputStream getStream(Blob blob) throws IOException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2MDk4OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3900#discussion_r408660989", "bodyText": "Is putting the key in the log message could help debugging?", "author": "kevinleturc", "createdAt": "2020-04-15T08:14:13Z", "path": "modules/core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/blob/AbstractBlobStore.java", "diffHunk": "@@ -126,6 +134,28 @@ protected String stripBlobKeyPrefix(String key) {\n         return key;\n     }\n \n+    public static String setByteRangeInKey(String key, ByteRange byteRange) {\n+        return key + String.valueOf(BYTE_RANGE_SEP) + byteRange.getStart() + String.valueOf(BYTE_RANGE_SEP)\n+                + byteRange.getEnd();\n+    }\n+\n+    public static ByteRange getByteRangeFromKey(MutableObject<String> keyHolder) {\n+        String key = keyHolder.getValue();\n+        int j = key.lastIndexOf(BYTE_RANGE_SEP);\n+        int i = key.lastIndexOf(BYTE_RANGE_SEP, j - 1);\n+        if (j > 0) {\n+            try {\n+                long start = Long.parseLong(key.substring(i + 1, j));\n+                long end = Long.parseLong(key.substring(j + 1));\n+                keyHolder.setValue(key.substring(0, i));\n+                return ByteRange.inclusive(start, end);\n+            } catch (NumberFormatException e) {\n+                log.debug(e, e);", "originalCommit": "1a524ee3c57f11ba2e0134e0b6a972b7a66604ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ac3275a535af64993a8c74f49b54e14f0d46f422", "chunk": "diff --git a/modules/core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/blob/AbstractBlobStore.java b/modules/core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/blob/AbstractBlobStore.java\nindex 65e85fba3cf..9b43537aa1e 100644\n--- a/modules/core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/blob/AbstractBlobStore.java\n+++ b/modules/core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/blob/AbstractBlobStore.java\n\n@@ -134,28 +126,6 @@ public abstract class AbstractBlobStore implements BlobStore {\n         return key;\n     }\n \n-    public static String setByteRangeInKey(String key, ByteRange byteRange) {\n-        return key + String.valueOf(BYTE_RANGE_SEP) + byteRange.getStart() + String.valueOf(BYTE_RANGE_SEP)\n-                + byteRange.getEnd();\n-    }\n-\n-    public static ByteRange getByteRangeFromKey(MutableObject<String> keyHolder) {\n-        String key = keyHolder.getValue();\n-        int j = key.lastIndexOf(BYTE_RANGE_SEP);\n-        int i = key.lastIndexOf(BYTE_RANGE_SEP, j - 1);\n-        if (j > 0) {\n-            try {\n-                long start = Long.parseLong(key.substring(i + 1, j));\n-                long end = Long.parseLong(key.substring(j + 1));\n-                keyHolder.setValue(key.substring(0, i));\n-                return ByteRange.inclusive(start, end);\n-            } catch (NumberFormatException e) {\n-                log.debug(e, e);\n-            }\n-        }\n-        return null;\n-    }\n-\n     /** Returns a random string suitable as a key. */\n     protected String randomString() {\n         return String.valueOf(randomLong());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2MTYwNg==", "url": "https://github.com/nuxeo/nuxeo/pull/3900#discussion_r408661606", "bodyText": "The deprecation is for the internal API? Is BlobProvide#getStream the replacement of this one?", "author": "kevinleturc", "createdAt": "2020-04-15T08:15:15Z", "path": "modules/core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/blob/BlobManager.java", "diffHunk": "@@ -95,22 +95,28 @@ default BlobProvider getBlobProviderWithNamespace(String id) {\n     BlobProvider getBlobProvider(Blob blob);\n \n     /**\n-     * INTERNAL - Gets an {@link InputStream} for the data of a managed blob. Used by internal implementations, regular\n-     * callers should call {@link Blob#getStream}.\n+     * Gets an {@link InputStream} for the data of a managed blob.\n+     * <p>\n+     * If the blob is managed this is equivalent to {@link ManagedBlob#getStream()}, otherwise returns {@code null}.\n      *\n      * @param blob the blob\n-     * @return the stream\n+     * @return the stream, or {@code null} if the blob is not managed\n+     * @deprecated since 11.1", "originalCommit": "1a524ee3c57f11ba2e0134e0b6a972b7a66604ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc3NjQzMA==", "url": "https://github.com/nuxeo/nuxeo/pull/3900#discussion_r408776430", "bodyText": "Doing Blob#getStream directly is the replacement. I'll add details.", "author": "efge", "createdAt": "2020-04-15T11:38:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2MTYwNg=="}], "type": "inlineReview", "revised_code": {"commit": "ac3275a535af64993a8c74f49b54e14f0d46f422", "chunk": "diff --git a/modules/core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/blob/BlobManager.java b/modules/core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/blob/BlobManager.java\nindex 6bd40b25b7f..9951c4a416c 100644\n--- a/modules/core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/blob/BlobManager.java\n+++ b/modules/core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/blob/BlobManager.java\n\n@@ -101,7 +101,7 @@ public interface BlobManager {\n      *\n      * @param blob the blob\n      * @return the stream, or {@code null} if the blob is not managed\n-     * @deprecated since 11.1\n+     * @deprecated since 11.1, use {@link Blob#getStream()} instead\n      */\n     @Deprecated\n     InputStream getStream(Blob blob) throws IOException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5MzY3Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/3900#discussion_r408693677", "bodyText": "What do you think about introducing an object for key which does all the needed parsing (byte range and version) and holds methods such as containsRange.", "author": "kevinleturc", "createdAt": "2020-04-15T09:08:19Z", "path": "modules/core/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/blob/s3/S3BlobStore.java", "diffHunk": "@@ -367,15 +373,23 @@ protected void clearBucket() {\n \n     @Override\n     public boolean readBlob(String key, Path dest) throws IOException {\n+        ByteRange byteRange;\n+        if (allowByteRange) {\n+            MutableObject<String> keyHolder = new MutableObject<>(key);\n+            byteRange = getByteRangeFromKey(keyHolder);\n+            key = keyHolder.getValue();\n+        } else {\n+            byteRange = null;\n+        }\n         String objectKey;\n         String versionId;\n-        int seppos = key.indexOf(VER_SEP);\n-        if (seppos < 0) {\n-            objectKey = key;\n-            versionId = null;\n-        } else {\n+        int seppos;\n+        if (useVersion && (seppos = key.indexOf(VER_SEP)) > 0) {", "originalCommit": "1a524ee3c57f11ba2e0134e0b6a972b7a66604ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc3Nzk4Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/3900#discussion_r408777982", "bodyText": "You mean a helper? In the vast majority of cases the key is just a string without structure. It's only for S3 versions and byte ranges that we need additional semantics but I don't want to overhaul the whole BlobStore API to add an abstraction here, which is why I did this string parsing.", "author": "efge", "createdAt": "2020-04-15T11:41:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5MzY3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc4NDQxMQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3900#discussion_r408784411", "bodyText": "I meant a helper, more a data object with convenient methods and a static parse method (for instance). We would use only here and where we need to read range and not to use in a method signature as the change would be very big and not relevant in all cases (as you said).\nVER_SEP could be a blocker for such helper as it is only for S3 and we don't want it in a \"generic\" thing.", "author": "kevinleturc", "createdAt": "2020-04-15T11:53:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5MzY3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "ac3275a535af64993a8c74f49b54e14f0d46f422", "chunk": "diff --git a/modules/core/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/blob/s3/S3BlobStore.java b/modules/core/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/blob/s3/S3BlobStore.java\nindex 6c6c491494d..ebb380be626 100644\n--- a/modules/core/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/blob/s3/S3BlobStore.java\n+++ b/modules/core/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/blob/s3/S3BlobStore.java\n\n@@ -373,23 +367,15 @@ public class S3BlobStore extends AbstractBlobStore {\n \n     @Override\n     public boolean readBlob(String key, Path dest) throws IOException {\n-        ByteRange byteRange;\n-        if (allowByteRange) {\n-            MutableObject<String> keyHolder = new MutableObject<>(key);\n-            byteRange = getByteRangeFromKey(keyHolder);\n-            key = keyHolder.getValue();\n-        } else {\n-            byteRange = null;\n-        }\n         String objectKey;\n         String versionId;\n-        int seppos;\n-        if (useVersion && (seppos = key.indexOf(VER_SEP)) > 0) {\n-            objectKey = key.substring(0, seppos);\n-            versionId = key.substring(seppos + 1);\n-        } else {\n+        int seppos = key.indexOf(VER_SEP);\n+        if (seppos < 0) {\n             objectKey = key;\n             versionId = null;\n+        } else {\n+            objectKey = key.substring(0, seppos);\n+            versionId = key.substring(seppos + 1);\n         }\n         String bucketKey = bucketPrefix + objectKey;\n         long t0 = 0;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5OTIzMg==", "url": "https://github.com/nuxeo/nuxeo/pull/3900#discussion_r408699232", "bodyText": "It can happen if fulltext is not stored in blob, no?", "author": "kevinleturc", "createdAt": "2020-04-15T09:17:47Z", "path": "modules/core/nuxeo-core-storage-sql/nuxeo-core-storage-sql/src/main/java/org/nuxeo/ecm/core/storage/sql/SessionImpl.java", "diffHunk": "@@ -1491,26 +1493,32 @@ public boolean isFulltextStoredInBlob() {\n     }\n \n     @Override\n-    public Map<String, String> getBinaryFulltext(Serializable id) {\n+    public Map<String, String> getBinaryFulltext(Serializable id, Document doc) {\n         if (fulltextDescriptor.getFulltextDisabled()) {\n             return null;\n         }\n         RowId rowId = new RowId(Model.FULLTEXT_TABLE_NAME, id);\n         Map<String, String> map = mapper.getBinaryFulltext(rowId);\n         String fulltext = map.get(BINARY_FULLTEXT_MAIN_KEY);\n         if (fulltextDescriptor.getFulltextStoredInBlob() && fulltext != null) {\n-            // fulltext is actually the blob  key\n-            // now retrieve the actual fulltext from the blob content\n-            DocumentBlobManager blobManager = Framework.getService(DocumentBlobManager.class);\n-            try {\n-                BlobInfo blobInfo = new BlobInfo();\n-                blobInfo.key = fulltext;\n-                Blob blob = blobManager.readBlob(blobInfo, getRepositoryName());\n-                fulltext = blob.getString();\n-                map.put(BINARY_FULLTEXT_MAIN_KEY, fulltext);\n-            } catch (IOException e) {\n-                throw new PropertyException(\"Cannot read fulltext blob for doc: \" + id, e);\n+            if (doc == null) {\n+                // could not find doc (shouldn't happen)\n+                fulltext = null;", "originalCommit": "1a524ee3c57f11ba2e0134e0b6a972b7a66604ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc3OTAyMA==", "url": "https://github.com/nuxeo/nuxeo/pull/3900#discussion_r408779020", "bodyText": "No, there's a if (fulltextDescriptor.getFulltextStoredInBlob() just before.", "author": "efge", "createdAt": "2020-04-15T11:43:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5OTIzMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwMjIwNg==", "url": "https://github.com/nuxeo/nuxeo/pull/3900#discussion_r408702206", "bodyText": "Why not using BlobInfoContext for the signature?", "author": "kevinleturc", "createdAt": "2020-04-15T09:22:45Z", "path": "modules/core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/DocumentBlobManager.java", "diffHunk": "@@ -35,14 +35,27 @@\n  */\n public interface DocumentBlobManager {\n \n+    /**\n+     * Reads a {@link Blob} from storage.\n+     *\n+     * @param blobInfo the blob information\n+     * @param doc the document to which this blob belongs\n+     * @param xpath the xpath of the blob in the document\n+     * @return a managed blob\n+     * @since 11.1\n+     */\n+    Blob readBlob(BlobInfo blobInfo, Document doc, String xpath) throws IOException;", "originalCommit": "1a524ee3c57f11ba2e0134e0b6a972b7a66604ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc4MTY5Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/3900#discussion_r408781692", "bodyText": "For the DocumentBlobManager I kept simple explicit APIs. BlobInfoContext is currently used at lower level in BlobProvider to pass info around, but here I kept something symmetric with the existing writeBlob(Blob blob, Document doc, String xpath). We could refactor this to use BlobInfoContext / BlobContext yes (although BlobContext doesn't currently keep the full doc, just its id). I'll keep that for later.", "author": "efge", "createdAt": "2020-04-15T11:48:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwMjIwNg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "ac3275a535af64993a8c74f49b54e14f0d46f422", "url": "https://github.com/nuxeo/nuxeo/commit/ac3275a535af64993a8c74f49b54e14f0d46f422", "message": "NXP-28919: simplify ManagedBlob logic", "committedDate": "2020-04-15T11:52:47Z", "type": "commit"}, {"oid": "95114fbc6e740f1a0b21cd715b9427d1a92b5b62", "url": "https://github.com/nuxeo/nuxeo/commit/95114fbc6e740f1a0b21cd715b9427d1a92b5b62", "message": "NXP-28919: move ByteRange to nuxeo-core-api", "committedDate": "2020-04-15T11:52:47Z", "type": "commit"}, {"oid": "ff9cd188872bdc28872d57ec194cb3f4676d573d", "url": "https://github.com/nuxeo/nuxeo/commit/ff9cd188872bdc28872d57ec194cb3f4676d573d", "message": "NXP-28919: allow blob provider to do optimized byte range requests", "committedDate": "2020-04-15T11:52:47Z", "type": "commit"}, {"oid": "ff9cd188872bdc28872d57ec194cb3f4676d573d", "url": "https://github.com/nuxeo/nuxeo/commit/ff9cd188872bdc28872d57ec194cb3f4676d573d", "message": "NXP-28919: allow blob provider to do optimized byte range requests", "committedDate": "2020-04-15T11:52:47Z", "type": "forcePushed"}]}