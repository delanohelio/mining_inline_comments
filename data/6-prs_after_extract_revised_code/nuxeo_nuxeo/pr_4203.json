{"pr_number": 4203, "pr_title": "fix-NXP-29246-import-MHTLM-in-chrome", "pr_createdAt": "2020-07-06T13:56:16Z", "pr_url": "https://github.com/nuxeo/nuxeo/pull/4203", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3MjE1Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/4203#discussion_r450672152", "bodyText": "is this required for the fix?", "author": "bdelbosc", "createdAt": "2020-07-07T07:45:42Z", "path": "modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/BatchUploadObject.java", "diffHunk": "@@ -232,7 +232,7 @@ protected Response uploadNoTransaction(@Context HttpServletRequest request,\n         // TODO NXP-18247: should be set to the actual number of bytes uploaded instead of relying on the Content-Length\n         // header which is not necessarily set\n         long uploadedSize = getUploadedSize(request);\n-        boolean isMultipart = contentType != null && contentType.contains(\"multipart\");\n+        boolean isMultipart = contentType != null && contentType.contains(\"multipart/form-data\");", "originalCommit": "3124739a3bf6bb319aefa39f6ef9066724587958", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY4MDEwOA==", "url": "https://github.com/nuxeo/nuxeo/pull/4203#discussion_r450680108", "bodyText": "Yes. This is half the fix actually.\nOtherwise multipart/related will evaluate to true true and the FormData#getMultiPartItems will be called and fail", "author": "NourNuxeo", "createdAt": "2020-07-07T08:00:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3MjE1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA0MTQzMg==", "url": "https://github.com/nuxeo/nuxeo/pull/4203#discussion_r451041432", "bodyText": "We changed the approach. Now multipart is completely unsupported on master.\nIt still fails on 10 and 9 but is disablable", "author": "NourNuxeo", "createdAt": "2020-07-07T17:51:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3MjE1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "1eea115fccb318dadaabb54a514bb84d36eb771e", "chunk": "diff --git a/modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/BatchUploadObject.java b/modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/BatchUploadObject.java\nindex 45c8fef9fe6..1d1dc1df2e3 100644\n--- a/modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/BatchUploadObject.java\n+++ b/modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/BatchUploadObject.java\n\n@@ -232,26 +232,9 @@ public class BatchUploadObject extends AbstractResource<ResourceTypeImpl> {\n         // TODO NXP-18247: should be set to the actual number of bytes uploaded instead of relying on the Content-Length\n         // header which is not necessarily set\n         long uploadedSize = getUploadedSize(request);\n-        boolean isMultipart = contentType != null && contentType.contains(\"multipart/form-data\");\n-\n-        // Handle multipart case: mainly MSIE with jQueryFileupload\n-        if (isMultipart) {\n-            FormData formData = new FormData(request);\n-            Blob blob = formData.getFirstBlob();\n-            if (blob == null) {\n-                throw new NuxeoException(\"Cannot upload in multipart with no blobs\");\n-            }\n-            if (!UPLOAD_TYPE_CHUNKED.equals(uploadType)) {\n-                fileName = blob.getFilename();\n-            }\n-            // Don't change the mime-type if it was forced via the X-File-Type header\n-            if (StringUtils.isBlank(mimeType)) {\n-                mimeType = blob.getMimeType();\n-            }\n-            uploadedSize = blob.getLength();\n-            addBlob(uploadType, batchId, fileIdx, blob, fileName, mimeType, uploadedSize, chunkCount, uploadChunkIndex,\n-                    fileSize);\n-        } else if (Framework.isBooleanPropertyTrue(NginxConstants.X_ACCEL_ENABLED)\n+        boolean isMultipart = contentType != null && contentType.contains(\"multipart\");\n+\n+        if (Framework.isBooleanPropertyTrue(NginxConstants.X_ACCEL_ENABLED)\n                 && StringUtils.isNotEmpty(requestBodyFile)) {\n             if (StringUtils.isNotEmpty(fileName)) {\n                 fileName = URLDecoder.decode(fileName, \"UTF-8\");\n"}}, {"oid": "1eea115fccb318dadaabb54a514bb84d36eb771e", "url": "https://github.com/nuxeo/nuxeo/commit/1eea115fccb318dadaabb54a514bb84d36eb771e", "message": "NXP-29246: add MHTML mime-type support", "committedDate": "2020-07-07T17:47:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA0NTEyMw==", "url": "https://github.com/nuxeo/nuxeo/pull/4203#discussion_r451045123", "bodyText": "these are still used. So I keep them.", "author": "NourNuxeo", "createdAt": "2020-07-07T17:57:34Z", "path": "modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/BatchUploadObject.java", "diffHunk": "@@ -234,24 +234,7 @@ protected Response uploadNoTransaction(@Context HttpServletRequest request,\n         long uploadedSize = getUploadedSize(request);\n         boolean isMultipart = contentType != null && contentType.contains(\"multipart\");", "originalCommit": "1eea115fccb318dadaabb54a514bb84d36eb771e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA0OTM2OA==", "url": "https://github.com/nuxeo/nuxeo/pull/4203#discussion_r451049368", "bodyText": "I think it can be removed, and just give false to the buildResponse method, as there is no more multipart?", "author": "troger", "createdAt": "2020-07-07T18:05:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA0NTEyMw=="}], "type": "inlineReview", "revised_code": {"commit": "1c0dbe02b67469d87468d5f3d97229882476b8ec", "chunk": "diff --git a/modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/BatchUploadObject.java b/modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/BatchUploadObject.java\nindex 1d1dc1df2e3..6123d97f579 100644\n--- a/modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/BatchUploadObject.java\n+++ b/modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/BatchUploadObject.java\n\n@@ -232,7 +230,6 @@ public class BatchUploadObject extends AbstractResource<ResourceTypeImpl> {\n         // TODO NXP-18247: should be set to the actual number of bytes uploaded instead of relying on the Content-Length\n         // header which is not necessarily set\n         long uploadedSize = getUploadedSize(request);\n-        boolean isMultipart = contentType != null && contentType.contains(\"multipart\");\n \n         if (Framework.isBooleanPropertyTrue(NginxConstants.X_ACCEL_ENABLED)\n                 && StringUtils.isNotEmpty(requestBodyFile)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA0Nzg4OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4203#discussion_r451047889", "bodyText": "comment removed in next push", "author": "NourNuxeo", "createdAt": "2020-07-07T18:02:11Z", "path": "modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/BatchUploadFixture.java", "diffHunk": "@@ -1053,6 +1053,21 @@ public void testErrorOnRefreshedTokenError() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void testUploadMHTML() throws Exception {\n+        String batchId = initializeNewBatch();\n+        // typed via mime-type", "originalCommit": "1eea115fccb318dadaabb54a514bb84d36eb771e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1c0dbe02b67469d87468d5f3d97229882476b8ec", "chunk": "diff --git a/modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/BatchUploadFixture.java b/modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/BatchUploadFixture.java\nindex 93d2457d802..2007aaefaf5 100644\n--- a/modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/BatchUploadFixture.java\n+++ b/modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/BatchUploadFixture.java\n\n@@ -1056,7 +1056,6 @@ public class BatchUploadFixture extends BaseTest {\n     @Test\n     public void testUploadMHTML() throws Exception {\n         String batchId = initializeNewBatch();\n-        // typed via mime-type\n         try (CloseableClientResponse response = getResponse(RequestType.POST, \"upload/\" + batchId + \"/0\",\n                 \"dummy\", Map.of(\"Content-Type\", \"multipart/related\", \"X-File-Name\", \"dummy.mhtml\"))) {\n             assertEquals(Status.CREATED.getStatusCode(), response.getStatus());\n"}}, {"oid": "1c0dbe02b67469d87468d5f3d97229882476b8ec", "url": "https://github.com/nuxeo/nuxeo/commit/1c0dbe02b67469d87468d5f3d97229882476b8ec", "message": "NXP-29246: add MHTML mime-type support", "committedDate": "2020-07-07T18:36:54Z", "type": "forcePushed"}, {"oid": "5964bb93e423c991e800c0678dfc8f11ce91d070", "url": "https://github.com/nuxeo/nuxeo/commit/5964bb93e423c991e800c0678dfc8f11ce91d070", "message": "NXP-29246: add MHTML mime-type support", "committedDate": "2020-07-08T10:28:38Z", "type": "forcePushed"}, {"oid": "3c0e080adde6a270f28c8b6bed233fc2d91961b5", "url": "https://github.com/nuxeo/nuxeo/commit/3c0e080adde6a270f28c8b6bed233fc2d91961b5", "message": "NXP-29246: add MHTML mime-type support", "committedDate": "2020-07-09T07:40:59Z", "type": "forcePushed"}, {"oid": "de5f3503e9eb7ba05b405aaea2da1b3b804c6323", "url": "https://github.com/nuxeo/nuxeo/commit/de5f3503e9eb7ba05b405aaea2da1b3b804c6323", "message": "NXP-29246: add MHTML mime-type support", "committedDate": "2020-07-09T08:41:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA2MjE5NA==", "url": "https://github.com/nuxeo/nuxeo/pull/4203#discussion_r452062194", "bodyText": "restored in next push. Test works in local", "author": "NourNuxeo", "createdAt": "2020-07-09T08:47:18Z", "path": "modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/BatchUploadFixture.java", "diffHunk": "@@ -224,11 +211,6 @@ private void itCanUseBatchUpload(boolean noDrop) throws IOException {\n         assertEquals(\"Fichier accentu\u00e9 1.txt\", blob.getFilename());\n         assertEquals(\"text/plain\", blob.getMimeType());\n         assertEquals(data1, blob.getString());\n-        blob = (Blob) doc.getPropertyValue(\"mb:blobs/1/content\");\n-        assertNotNull(blob);\n-        assertEquals(\"Fichier accentu\u00e9 2.txt\", blob.getFilename());\n-        assertEquals(mimeType, blob.getMimeType());\n-        assertEquals(data2, blob.getString());", "originalCommit": "de5f3503e9eb7ba05b405aaea2da1b3b804c6323", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7c70054a517a20394d577361f1bdf31a3efa62c4", "chunk": "diff --git a/modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/BatchUploadFixture.java b/modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/BatchUploadFixture.java\nindex df081007a30..aff05db0b38 100644\n--- a/modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/BatchUploadFixture.java\n+++ b/modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/BatchUploadFixture.java\n\n@@ -211,6 +211,11 @@ public class BatchUploadFixture extends BaseTest {\n         assertEquals(\"Fichier accentu\u00e9 1.txt\", blob.getFilename());\n         assertEquals(\"text/plain\", blob.getMimeType());\n         assertEquals(data1, blob.getString());\n+        blob = (Blob) doc.getPropertyValue(\"mb:blobs/1/content\");\n+        assertNotNull(blob);\n+        assertEquals(\"Fichier accentu\u00e9 2.txt\", blob.getFilename());\n+        assertEquals(mimeType, blob.getMimeType());\n+        assertEquals(data2, blob.getString());\n \n         if (noDrop) {\n             assertBatchExists(batchId);\n"}}, {"oid": "7c70054a517a20394d577361f1bdf31a3efa62c4", "url": "https://github.com/nuxeo/nuxeo/commit/7c70054a517a20394d577361f1bdf31a3efa62c4", "message": "NXP-29246: add MHTML mime-type support", "committedDate": "2020-07-09T08:48:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA3ODUxNQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4203#discussion_r452078515", "bodyText": "to be removed in next push", "author": "NourNuxeo", "createdAt": "2020-07-09T09:14:36Z", "path": "modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/BatchUploadObject.java", "diffHunk": "@@ -232,26 +230,8 @@ protected Response uploadNoTransaction(@Context HttpServletRequest request,\n         // TODO NXP-18247: should be set to the actual number of bytes uploaded instead of relying on the Content-Length\n         // header which is not necessarily set\n         long uploadedSize = getUploadedSize(request);\n-        boolean isMultipart = contentType != null && contentType.contains(\"multipart\");\n-\n-        // Handle multipart case: mainly MSIE with jQueryFileupload\n-        if (isMultipart) {\n-            FormData formData = new FormData(request);\n-            Blob blob = formData.getFirstBlob();\n-            if (blob == null) {\n-                throw new NuxeoException(\"Cannot upload in multipart with no blobs\");\n-            }\n-            if (!UPLOAD_TYPE_CHUNKED.equals(uploadType)) {\n-                fileName = blob.getFilename();\n-            }\n-            // Don't change the mime-type if it was forced via the X-File-Type header\n-            if (StringUtils.isBlank(mimeType)) {\n-                mimeType = blob.getMimeType();\n-            }\n-            uploadedSize = blob.getLength();\n-            addBlob(uploadType, batchId, fileIdx, blob, fileName, mimeType, uploadedSize, chunkCount, uploadChunkIndex,\n-                    fileSize);\n-        } else if (Framework.isBooleanPropertyTrue(NginxConstants.X_ACCEL_ENABLED)\n+", "originalCommit": "7c70054a517a20394d577361f1bdf31a3efa62c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b5cc9b3e1a35680fb05e600a8c2f4a52113af3f7", "chunk": "diff --git a/modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/BatchUploadObject.java b/modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/BatchUploadObject.java\nindex 6123d97f579..2c9d98eed69 100644\n--- a/modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/BatchUploadObject.java\n+++ b/modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/BatchUploadObject.java\n\n@@ -230,7 +230,6 @@ public class BatchUploadObject extends AbstractResource<ResourceTypeImpl> {\n         // TODO NXP-18247: should be set to the actual number of bytes uploaded instead of relying on the Content-Length\n         // header which is not necessarily set\n         long uploadedSize = getUploadedSize(request);\n-\n         if (Framework.isBooleanPropertyTrue(NginxConstants.X_ACCEL_ENABLED)\n                 && StringUtils.isNotEmpty(requestBodyFile)) {\n             if (StringUtils.isNotEmpty(fileName)) {\n"}}, {"oid": "b5cc9b3e1a35680fb05e600a8c2f4a52113af3f7", "url": "https://github.com/nuxeo/nuxeo/commit/b5cc9b3e1a35680fb05e600a8c2f4a52113af3f7", "message": "NXP-29246: add MHTML mime-type support", "committedDate": "2020-07-15T11:09:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE1NDQ2Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/4203#discussion_r455154463", "bodyText": "Javadoc always above the annotations.\nNote sure the JIRA title is needed as the test method explicitly state that it tests a MHTLM upload.", "author": "troger", "createdAt": "2020-07-15T15:49:21Z", "path": "modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/BatchUploadFixture.java", "diffHunk": "@@ -1053,6 +1023,21 @@ public void testErrorOnRefreshedTokenError() throws Exception {\n         }\n     }\n \n+    @Test\n+    /** NXP-29246: Fix import of MHTML file using Chrome */", "originalCommit": "b5cc9b3e1a35680fb05e600a8c2f4a52113af3f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9e5229f8076fd4d068a86ce0658dd57a0e460057", "chunk": "diff --git a/modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/BatchUploadFixture.java b/modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/BatchUploadFixture.java\nindex e8d4649e89f..dfbc6bf4371 100644\n--- a/modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/BatchUploadFixture.java\n+++ b/modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/BatchUploadFixture.java\n\n@@ -1023,8 +1023,8 @@ public class BatchUploadFixture extends BaseTest {\n         }\n     }\n \n-    @Test\n     /** NXP-29246: Fix import of MHTML file using Chrome */\n+    @Test\n     public void testUploadMHTML() throws Exception {\n         String batchId = initializeNewBatch();\n         try (CloseableClientResponse response = getResponse(RequestType.POST, \"upload/\" + batchId + \"/0\", \"dummy\",\n"}}, {"oid": "9e5229f8076fd4d068a86ce0658dd57a0e460057", "url": "https://github.com/nuxeo/nuxeo/commit/9e5229f8076fd4d068a86ce0658dd57a0e460057", "message": "NXP-29246: add MHTML mime-type support", "committedDate": "2020-07-15T17:06:58Z", "type": "forcePushed"}, {"oid": "cfca8399bb2c4f85a0f320a8dc8e15aed984fbf8", "url": "https://github.com/nuxeo/nuxeo/commit/cfca8399bb2c4f85a0f320a8dc8e15aed984fbf8", "message": "NXP-29246: add MHTML mime-type support", "committedDate": "2020-07-15T17:12:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyOTE4NA==", "url": "https://github.com/nuxeo/nuxeo/pull/4203#discussion_r458829184", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return buildResponse(status, result, false);\n          \n          \n            \n                    return buildResponse(status, result);\n          \n      \n    \n    \n  \n\nWe may probably. want to deprecate buildResponse(StatusType, Object, boolean) and buildHTMLResponse(StatusType, String) as they won't be used anymore.", "author": "kevinleturc", "createdAt": "2020-07-22T14:20:54Z", "path": "modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/BatchUploadObject.java", "diffHunk": "@@ -294,7 +273,7 @@ protected Response uploadNoTransaction(@Context HttpServletRequest request,\n                 }\n             }\n         }\n-        return buildResponse(status, result, isMultipart);\n+        return buildResponse(status, result, false);", "originalCommit": "cfca8399bb2c4f85a0f320a8dc8e15aed984fbf8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkwMDUzMg==", "url": "https://github.com/nuxeo/nuxeo/pull/4203#discussion_r458900532", "bodyText": "Deprecated with the annotation only as these methods are protected.", "author": "NourNuxeo", "createdAt": "2020-07-22T15:57:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyOTE4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE1NTk4Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/4203#discussion_r462155987", "bodyText": "Deprecated with the annotation only as these methods are protected.\n\nThis change doesn't appear currently in the branch, maybe not pushed yet?", "author": "ataillefer", "createdAt": "2020-07-29T09:13:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyOTE4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMyNjg5Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/4203#discussion_r464326892", "bodyText": "Yes will be updated in next push", "author": "NourNuxeo", "createdAt": "2020-08-03T10:23:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyOTE4NA=="}], "type": "inlineReview", "revised_code": {"commit": "6add47fcd44f3eb4dd51d2b8e4402006a09d7cec", "chunk": "diff --git a/modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/BatchUploadObject.java b/modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/BatchUploadObject.java\nindex 2c9d98eed69..d7ffebfe5d8 100644\n--- a/modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/BatchUploadObject.java\n+++ b/modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/BatchUploadObject.java\n\n@@ -273,7 +273,7 @@ public class BatchUploadObject extends AbstractResource<ResourceTypeImpl> {\n                 }\n             }\n         }\n-        return buildResponse(status, result, false);\n+        return buildResponse(status, result);\n     }\n \n     protected long getUploadedSize(HttpServletRequest request) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE2MDY2Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/4203#discussion_r462160667", "bodyText": "I think we can keep this comment.\nIt's interesting to know that the uploaded size could be checked if implemented.", "author": "ataillefer", "createdAt": "2020-07-29T09:21:05Z", "path": "modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/BatchUploadFixture.java", "diffHunk": "@@ -132,34 +128,25 @@ private void itCanUseBatchUpload(boolean noDrop) throws IOException {\n             assertEquals(batchId, node.get(\"batchId\").asText());\n             assertEquals(\"0\", node.get(\"fileIdx\").asText());\n             assertEquals(\"normal\", node.get(\"uploadType\").asText());\n-            // TODO NXP-18247 when the actual uploaded size is returned\n-            // assertEquals(fileSize1, node.get(\"uploadedSize\").asText());", "originalCommit": "cfca8399bb2c4f85a0f320a8dc8e15aed984fbf8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMyNjY5MA==", "url": "https://github.com/nuxeo/nuxeo/pull/4203#discussion_r464326690", "bodyText": "I got it wrong and thought uploadedSize was only filled when isMultipart was true.", "author": "NourNuxeo", "createdAt": "2020-08-03T10:23:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE2MDY2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "6add47fcd44f3eb4dd51d2b8e4402006a09d7cec", "chunk": "diff --git a/modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/BatchUploadFixture.java b/modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/BatchUploadFixture.java\nindex dfbc6bf4371..a5bcb863fa7 100644\n--- a/modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/BatchUploadFixture.java\n+++ b/modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/BatchUploadFixture.java\n\n@@ -128,6 +128,8 @@ public class BatchUploadFixture extends BaseTest {\n             assertEquals(batchId, node.get(\"batchId\").asText());\n             assertEquals(\"0\", node.get(\"fileIdx\").asText());\n             assertEquals(\"normal\", node.get(\"uploadType\").asText());\n+            // TODO NXP-18247 when the actual uploaded size is returned\n+            // assertEquals(fileSize1, node.get(\"uploadedSize\").asText());\n         }\n \n         // Upload another file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE2NTc0OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4203#discussion_r462165749", "bodyText": "Why not passing the file size header anymore?", "author": "ataillefer", "createdAt": "2020-07-29T09:29:28Z", "path": "modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/BatchUploadFixture.java", "diffHunk": "@@ -240,42 +227,32 @@ private void itCanUseBatchUpload(boolean noDrop) throws IOException {\n      */\n     @Test\n     public void testObeyFileTypeHeader() throws IOException {\n-        Map<String, String> headers;\n-\n         // Get batch id, used as a session id\n         String batchId = initializeDeprecatedNewBatch();\n \n-        // Upload a file in multipart, first without the X-File-Type header, the second with\n-        String fileName1 = \"No header.txt\";\n+        // Upload a file without the X-File-Type header\n         String data1 = \"File without explicit file type\";\n-        String fileSize1 = String.valueOf(getUTF8Bytes(data1).length);\n-        headers = new HashMap<>();\n-        headers.put(\"X-File-Size\", fileSize1);", "originalCommit": "cfca8399bb2c4f85a0f320a8dc8e15aed984fbf8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMyNTk5NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4203#discussion_r464325995", "bodyText": "Because it's not checked or mandatory.\nIf I didn't miss anything the only assertion made on the response is:\ncfca839#diff-a0e2882aaae16530623a620986daadc3L260", "author": "NourNuxeo", "createdAt": "2020-08-03T10:21:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE2NTc0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMyOTI0MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4203#discussion_r464329241", "bodyText": "Fair enough \ud83d\udc4d", "author": "ataillefer", "createdAt": "2020-08-03T10:29:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE2NTc0OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE2NjgzMg==", "url": "https://github.com/nuxeo/nuxeo/pull/4203#discussion_r462166832", "bodyText": "Why not passing the file size header anymore?", "author": "ataillefer", "createdAt": "2020-07-29T09:31:13Z", "path": "modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/BatchUploadFixture.java", "diffHunk": "@@ -240,42 +227,32 @@ private void itCanUseBatchUpload(boolean noDrop) throws IOException {\n      */\n     @Test\n     public void testObeyFileTypeHeader() throws IOException {\n-        Map<String, String> headers;\n-\n         // Get batch id, used as a session id\n         String batchId = initializeDeprecatedNewBatch();\n \n-        // Upload a file in multipart, first without the X-File-Type header, the second with\n-        String fileName1 = \"No header.txt\";\n+        // Upload a file without the X-File-Type header\n         String data1 = \"File without explicit file type\";\n-        String fileSize1 = String.valueOf(getUTF8Bytes(data1).length);\n-        headers = new HashMap<>();\n-        headers.put(\"X-File-Size\", fileSize1);\n-\n-        try (FormDataMultiPart form = new FormDataMultiPart()) {\n-            BodyPart fdp = new StreamDataBodyPart(fileName1, new ByteArrayInputStream(getUTF8Bytes(data1)));\n-            form.bodyPart(fdp);\n-            try (CloseableClientResponse response = getResponse(RequestType.POST, \"upload/\" + batchId + \"/0\", form,\n-                    headers)) {\n-                assertEquals(Status.CREATED.getStatusCode(), response.getStatus());\n-            }\n+        try (CloseableClientResponse response = getResponse(RequestType.POST, \"upload/\" + batchId + \"/0\", data1,\n+                Map.of(\"X-File-Name\", \"No header.txt\"))) {\n+            assertEquals(Status.CREATED.getStatusCode(), response.getStatus());\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            assertEquals(\"true\", node.get(\"uploaded\").asText());\n+            assertEquals(batchId, node.get(\"batchId\").asText());\n+            assertEquals(\"0\", node.get(\"fileIdx\").asText());\n+            assertEquals(\"normal\", node.get(\"uploadType\").asText());\n         }\n \n-        String mimeType = \"text/plain\";\n-        String fileName2 = \"With header.txt\";\n+        // Upload a file with the X-File-Type header\n         String data2 = \"File with explicit X-File-Type header\";\n-        String fileSize2 = String.valueOf(getUTF8Bytes(data2).length);\n-        headers = new HashMap<>();\n-        headers.put(\"X-File-Size\", fileSize2);", "originalCommit": "cfca8399bb2c4f85a0f320a8dc8e15aed984fbf8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMyNjE3MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4203#discussion_r464326171", "bodyText": "Because it's not checked or mandatory.\nIf I didn't miss anything the only assertion made on the response is:\ncfca839#diff-a0e2882aaae16530623a620986daadc3L277", "author": "NourNuxeo", "createdAt": "2020-08-03T10:22:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE2NjgzMg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "6add47fcd44f3eb4dd51d2b8e4402006a09d7cec", "url": "https://github.com/nuxeo/nuxeo/commit/6add47fcd44f3eb4dd51d2b8e4402006a09d7cec", "message": "NXP-29246: add MHTML mime-type support", "committedDate": "2020-08-03T10:25:47Z", "type": "forcePushed"}, {"oid": "33b802ca2a6ba937c3f2d064ae7bedf87ef6e89e", "url": "https://github.com/nuxeo/nuxeo/commit/33b802ca2a6ba937c3f2d064ae7bedf87ef6e89e", "message": "NXP-29246: add MHTML mime-type support", "committedDate": "2020-08-03T12:56:56Z", "type": "forcePushed"}, {"oid": "f272b9a89563d46eff43d52f049113fd399a01df", "url": "https://github.com/nuxeo/nuxeo/commit/f272b9a89563d46eff43d52f049113fd399a01df", "message": "NXP-29246: add MHTML mime-type support", "committedDate": "2020-08-03T12:59:19Z", "type": "forcePushed"}, {"oid": "aba3765c12768d113fd3b48ca33effbe668559a2", "url": "https://github.com/nuxeo/nuxeo/commit/aba3765c12768d113fd3b48ca33effbe668559a2", "message": "NXP-29246: add MHTML mime-type support", "committedDate": "2020-08-03T13:14:52Z", "type": "forcePushed"}, {"oid": "6ba4acfbb078b906c27e2bcf93abd3c2a7616658", "url": "https://github.com/nuxeo/nuxeo/commit/6ba4acfbb078b906c27e2bcf93abd3c2a7616658", "message": "NXP-29246: add MHTML mime-type support", "committedDate": "2020-08-03T13:20:48Z", "type": "commit"}, {"oid": "6ba4acfbb078b906c27e2bcf93abd3c2a7616658", "url": "https://github.com/nuxeo/nuxeo/commit/6ba4acfbb078b906c27e2bcf93abd3c2a7616658", "message": "NXP-29246: add MHTML mime-type support", "committedDate": "2020-08-03T13:20:48Z", "type": "forcePushed"}]}