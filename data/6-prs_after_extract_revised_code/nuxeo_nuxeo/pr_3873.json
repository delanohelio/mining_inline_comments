{"pr_number": 3873, "pr_title": "NXP-28825: upgrade to Apache PDFBox 2.0.19", "pr_createdAt": "2020-03-28T14:44:09Z", "pr_url": "https://github.com/nuxeo/nuxeo/pull/3873", "timeline": [{"oid": "356ac3a91b17ecf459f0f9ddfee3815c4e22952d", "url": "https://github.com/nuxeo/nuxeo/commit/356ac3a91b17ecf459f0f9ddfee3815c4e22952d", "message": "NXP-28825: upgrade to Apache PDFBox 2.0.19", "committedDate": "2020-04-01T11:24:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ4MTM0MA==", "url": "https://github.com/nuxeo/nuxeo/pull/3873#discussion_r401481340", "bodyText": "Shouldn't it be ownerPwd here? Like you have password for removeEncryption method.", "author": "troger", "createdAt": "2020-04-01T09:33:39Z", "path": "addons/nuxeo-platform-pdf-utils/src/main/java/org/nuxeo/ecm/platform/pdf/PDFEncryption.java", "diffHunk": "@@ -142,7 +141,7 @@ public Blob encrypt(AccessPermission inPerm) {\n         try {\n             StandardProtectionPolicy spp = new StandardProtectionPolicy(ownerPwd, userPwd, inPerm);\n             spp.setEncryptionKeyLength(keyLength);\n-            pdfDoc = PDDocument.load(pdfBlob.getFile());\n+            pdfDoc = PDDocument.load(pdfBlob.getFile(), originalOwnerPwd);", "originalCommit": "218e599f45aa4fcaa56462f27f6634cf66cf8a7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYzNzA3NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3873#discussion_r401637075", "bodyText": "Unit tests were failing when I used ownerPwd...", "author": "efge", "createdAt": "2020-04-01T13:58:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ4MTM0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYzOTA2OA==", "url": "https://github.com/nuxeo/nuxeo/pull/3873#discussion_r401639068", "bodyText": "I'll double-check", "author": "efge", "createdAt": "2020-04-01T14:01:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ4MTM0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY3MTc4Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/3873#discussion_r401671786", "bodyText": "Yes confirmed ownerPwd really doesn't work", "author": "efge", "createdAt": "2020-04-01T14:45:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ4MTM0MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ4OTY1Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/3873#discussion_r401489652", "bodyText": "Why using com.google.common.collect.Lists and not standard JDK stuff?", "author": "troger", "createdAt": "2020-04-01T09:47:29Z", "path": "addons/nuxeo-platform-pdf-utils/src/main/java/org/nuxeo/ecm/platform/pdf/PDFPageNumbering.java", "diffHunk": "@@ -105,12 +106,12 @@ public Blob addPageNumbers(int inStartAtPage, int inStartAtNumber, String inFont\n             if (StringUtils.isBlank(inFontName)) {\n                 font = PDType1Font.HELVETICA;\n             } else {\n-                font = PDType1Font.getStandardFont(inFontName);\n+                font = PDFUtils.getStandardType1Font(inFontName);\n                 if (font == null) {\n-                    font = new PDType1Font(inFontName);\n+                    throw new NuxeoException(\"Not a standard font: \" + inFontName);\n                 }\n             }\n-            allPages = doc.getDocumentCatalog().getAllPages();\n+            allPages = Lists.newArrayList(doc.getDocumentCatalog().getPages());", "originalCommit": "218e599f45aa4fcaa56462f27f6634cf66cf8a7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY0MDIzOA==", "url": "https://github.com/nuxeo/nuxeo/pull/3873#discussion_r401640238", "bodyText": "getPages() returns an iterable, and there's no one-method way of doing the conversion to a list in pure Java. But I could use Apache Commons Collections instead of Guava here.\nNote that in this patch I wanted to do the minimum changes possible to separate migration tasks from refactorings/cleanups.", "author": "efge", "createdAt": "2020-04-01T14:03:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ4OTY1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY1MDMyOQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3873#discussion_r401650329", "bodyText": "Understood, \ud83d\udc4d", "author": "troger", "createdAt": "2020-04-01T14:17:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ4OTY1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY3NDA3OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3873#discussion_r401674079", "bodyText": "Updated", "author": "efge", "createdAt": "2020-04-01T14:48:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ4OTY1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "75dd75cfb9ed36807f25bf38fb837f598f44a477", "chunk": "diff --git a/addons/nuxeo-platform-pdf-utils/src/main/java/org/nuxeo/ecm/platform/pdf/PDFPageNumbering.java b/addons/nuxeo-platform-pdf-utils/src/main/java/org/nuxeo/ecm/platform/pdf/PDFPageNumbering.java\ndeleted file mode 100644\nindex ba5613faa4d..00000000000\n--- a/addons/nuxeo-platform-pdf-utils/src/main/java/org/nuxeo/ecm/platform/pdf/PDFPageNumbering.java\n+++ /dev/null\n\n@@ -1,178 +0,0 @@\n-/*\n- * (C) Copyright 2016-2018 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Thibaud Arguillere\n- *     Miguel Nixo\n- */\n-package org.nuxeo.ecm.platform.pdf;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.util.List;\n-\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.pdfbox.pdmodel.PDDocument;\n-import org.apache.pdfbox.pdmodel.PDPage;\n-import org.apache.pdfbox.pdmodel.PDPageContentStream;\n-import org.apache.pdfbox.pdmodel.common.PDRectangle;\n-import org.apache.pdfbox.pdmodel.font.PDFont;\n-import org.apache.pdfbox.pdmodel.font.PDType1Font;\n-import org.nuxeo.ecm.core.api.Blob;\n-import org.nuxeo.ecm.core.api.DocumentModel;\n-import org.nuxeo.ecm.core.api.NuxeoException;\n-import org.nuxeo.ecm.core.api.impl.blob.FileBlob;\n-import org.nuxeo.runtime.api.Framework;\n-\n-import com.google.common.collect.Lists;\n-\n-/**\n- * Add page numbers to a PDF, with misc parameters (font, size, color, position).\n- *\n- * @since 8.10\n- */\n-public class PDFPageNumbering {\n-\n-    public static final float DEFAULT_FONT_SIZE = 16.0f;\n-\n-    private Blob blob;\n-\n-    private String password;\n-\n-    public enum PAGE_NUMBER_POSITION {\n-        BOTTOM_LEFT, BOTTOM_CENTER, BOTTOM_RIGHT, TOP_LEFT, TOP_CENTER, TOP_RIGHT\n-    }\n-\n-    public PDFPageNumbering(Blob inBlob) {\n-        blob = inBlob;\n-    }\n-\n-    public PDFPageNumbering(DocumentModel inDoc, String inXPath) {\n-        if (StringUtils.isBlank(inXPath)) {\n-            inXPath = \"file:content\";\n-        }\n-        blob = (Blob) inDoc.getPropertyValue(inXPath);\n-    }\n-\n-    /**\n-     * Adds page numbers and returns a <i>new</i> Blob. Original blob is not modified. This code assumes:\n-     * <ul>\n-     * <li>There is no page numbers already (it will always draw the numbers).</li>\n-     * <li>The PDF is not rotated.</li>\n-     * <li>Default values apply:\n-     * <ul>\n-     * <li><code>inStartAtPage</code> and <code>inStartAtNumber</code> are set to 1 if they are passed as < 1.</li>\n-     * <li><code>inStartAtPage</code> is set to 1 if it is > number of pages.</li>\n-     * <li><code>inFontName</code> is set to \"Helvetica\" if \"\" or null.</li>\n-     * <li><code>inFontSize</code> is set to 16 if it is <= 0.</li>\n-     * <li><code>inHex255Color</code> is set to black if \"\", null or if its length is < 6. Expected format is\n-     * <code>0xrrggbb</code>, <code>#rrggbb</code> or just <code>rrggbb</code>.</li>\n-     * <li><code>inPosition</code> is set to <code>BOTTOM_RIGHT</code> if null.</li>\n-     * </ul>\n-     * </li>\n-     * </ul>\n-     *\n-     * @param inStartAtPage Number of the first page to be numbered.\n-     * @param inStartAtNumber Starting number for the page numbering.\n-     * @param inFontName Name of the font to be used in the numbering.\n-     * @param inFontSize Size of the font to be used in the numbering.\n-     * @param inHex255Color Color of the font to be used in the numbering.\n-     * @param inPosition Page positioning of the numbering.\n-     * @return Blob\n-     */\n-    public Blob addPageNumbers(int inStartAtPage, int inStartAtNumber, String inFontName, float inFontSize,\n-            String inHex255Color, PAGE_NUMBER_POSITION inPosition) throws NuxeoException {\n-        Blob result;\n-        inStartAtPage = inStartAtPage < 1 ? 1 : inStartAtPage;\n-        int pageNumber = inStartAtNumber < 1 ? 1 : inStartAtNumber;\n-        inFontSize = inFontSize <= 0 ? DEFAULT_FONT_SIZE : inFontSize;\n-        int[] rgb = PDFUtils.hex255ToRGB(inHex255Color);\n-        try (PDDocument doc = PDFUtils.load(blob, password)) {\n-            List<?> allPages;\n-            PDFont font;\n-            int max;\n-            if (StringUtils.isBlank(inFontName)) {\n-                font = PDType1Font.HELVETICA;\n-            } else {\n-                font = PDFUtils.getStandardType1Font(inFontName);\n-                if (font == null) {\n-                    throw new NuxeoException(\"Not a standard font: \" + inFontName);\n-                }\n-            }\n-            allPages = Lists.newArrayList(doc.getDocumentCatalog().getPages());\n-            max = allPages.size();\n-            inStartAtPage = inStartAtPage > max ? 1 : inStartAtPage;\n-            for (int i = inStartAtPage; i <= max; i++) {\n-                String pageNumAsStr = Integer.toString(pageNumber);\n-                pageNumber += 1;\n-                PDPage page = (PDPage) allPages.get(i - 1);\n-                PDPageContentStream footercontentStream = new PDPageContentStream(doc, page, true, true);\n-                float stringWidth = font.getStringWidth(pageNumAsStr) * inFontSize / 1000f;\n-                float stringHeight = font.getFontDescriptor().getFontBoundingBox().getHeight() * inFontSize / 1000;\n-                PDRectangle pageRect = page.getMediaBox();\n-                float xMoveAmount, yMoveAmount;\n-                if (inPosition == null) {\n-                    inPosition = PAGE_NUMBER_POSITION.BOTTOM_RIGHT;\n-                }\n-                switch (inPosition) {\n-                case BOTTOM_LEFT:\n-                    xMoveAmount = 10;\n-                    yMoveAmount = pageRect.getLowerLeftY() + 10;\n-                    break;\n-                case BOTTOM_CENTER:\n-                    xMoveAmount = (pageRect.getUpperRightX() / 2) - (stringWidth / 2);\n-                    yMoveAmount = pageRect.getLowerLeftY() + 10;\n-                    break;\n-                case TOP_LEFT:\n-                    xMoveAmount = 10;\n-                    yMoveAmount = pageRect.getHeight() - stringHeight - 10;\n-                    break;\n-                case TOP_CENTER:\n-                    xMoveAmount = (pageRect.getUpperRightX() / 2) - (stringWidth / 2);\n-                    yMoveAmount = pageRect.getHeight() - stringHeight - 10;\n-                    break;\n-                case TOP_RIGHT:\n-                    xMoveAmount = pageRect.getUpperRightX() - 10 - stringWidth;\n-                    yMoveAmount = pageRect.getHeight() - stringHeight - 10;\n-                    break;\n-                // Bottom-right is the default\n-                default:\n-                    xMoveAmount = pageRect.getUpperRightX() - 10 - stringWidth;\n-                    yMoveAmount = pageRect.getLowerLeftY() + 10;\n-                    break;\n-                }\n-                footercontentStream.beginText();\n-                footercontentStream.setFont(font, inFontSize);\n-                footercontentStream.moveTextPositionByAmount(xMoveAmount, yMoveAmount);\n-                footercontentStream.setNonStrokingColor(rgb[0], rgb[1], rgb[2]);\n-                footercontentStream.drawString(pageNumAsStr);\n-                footercontentStream.endText();\n-                footercontentStream.close();\n-            }\n-            File tempFile = File.createTempFile(\"pdfutils-\", \".pdf\");\n-            doc.save(tempFile);\n-            result = new FileBlob(tempFile);\n-            Framework.trackFile(tempFile, result);\n-        } catch (IOException e) {\n-            throw new NuxeoException(\"Failed to handle the pdf\", e);\n-        }\n-        return result;\n-    }\n-\n-    public void setPassword(String password) {\n-        this.password = password;\n-    }\n-\n-}\n"}}, {"oid": "75dd75cfb9ed36807f25bf38fb837f598f44a477", "url": "https://github.com/nuxeo/nuxeo/commit/75dd75cfb9ed36807f25bf38fb837f598f44a477", "message": "NXP-28825: upgrade to Apache PDFBox 2.0.19", "committedDate": "2020-04-01T14:47:14Z", "type": "commit"}, {"oid": "75dd75cfb9ed36807f25bf38fb837f598f44a477", "url": "https://github.com/nuxeo/nuxeo/commit/75dd75cfb9ed36807f25bf38fb837f598f44a477", "message": "NXP-28825: upgrade to Apache PDFBox 2.0.19", "committedDate": "2020-04-01T14:47:14Z", "type": "forcePushed"}]}