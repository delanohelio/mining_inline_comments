{"pr_number": 3693, "pr_title": "NXP-28502: Fix permanent deletion of folder containing a large number\u2026", "pr_createdAt": "2020-01-23T17:59:27Z", "pr_url": "https://github.com/nuxeo/nuxeo/pull/3693", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUzMDg2Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/3693#discussion_r370530866", "bodyText": "Checks if child document for a given document are  \"purgeable/untrashable\".\nfor the second line Documents need to be i....you can link the second method directly {@link #canPurgeOrUntrash(DocumentModel, NuxeoPrincipal)}", "author": "RSalem07", "createdAt": "2020-01-24T09:06:57Z", "path": "nuxeo-core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/api/trash/TrashService.java", "diffHunk": "@@ -84,6 +84,17 @@ default boolean canPurgeOrUntrash(DocumentModel doc, NuxeoPrincipal principal) {\n         return canPurgeOrUntrash(Collections.singletonList(doc), principal);\n     }\n \n+    /**\n+     * Check if trashed child documents from a given parent document are \"purgeable/untrashable\".\n+     * Documents need to be in the trash for this to be true, in addition to the standard permission checks.", "originalCommit": "48c62d0e6e904561781b271ae17ba1c68f67712e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d61fa8ff5b9e46aa598002900f0e794c635bc76b", "chunk": "diff --git a/nuxeo-core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/api/trash/TrashService.java b/nuxeo-core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/api/trash/TrashService.java\nindex 61be9df9540..a063ec59d79 100644\n--- a/nuxeo-core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/api/trash/TrashService.java\n+++ b/nuxeo-core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/api/trash/TrashService.java\n\n@@ -84,17 +84,6 @@ public interface TrashService {\n         return canPurgeOrUntrash(Collections.singletonList(doc), principal);\n     }\n \n-    /**\n-     * Check if trashed child documents from a given parent document are \"purgeable/untrashable\".\n-     * Documents need to be in the trash for this to be true, in addition to the standard permission checks.\n-     * @param parent the parent document.\n-     * @param principal the user.\n-     * @return <code>true</code> if child Document are all \"purgeable/untrashable\", <code>false</code> otherwise\n-     * @see #canPurgeOrUntrash(List, NuxeoPrincipal)\n-     * @since 11.1\n-     */\n-    boolean getCanEmptyTrash(DocumentModel parent, NuxeoPrincipal principal);\n-\n     /**\n      * Gets the first non trashed ancestor.\n      * <p>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUzMTQzMg==", "url": "https://github.com/nuxeo/nuxeo/pull/3693#discussion_r370531432", "bodyText": "don't add dot at the end of @param\nfor the return tag you can use:\n @return {@code true} if .......\n<code>true</code> -> {@code}", "author": "RSalem07", "createdAt": "2020-01-24T09:08:36Z", "path": "nuxeo-core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/api/trash/TrashService.java", "diffHunk": "@@ -84,6 +84,17 @@ default boolean canPurgeOrUntrash(DocumentModel doc, NuxeoPrincipal principal) {\n         return canPurgeOrUntrash(Collections.singletonList(doc), principal);\n     }\n \n+    /**\n+     * Check if trashed child documents from a given parent document are \"purgeable/untrashable\".\n+     * Documents need to be in the trash for this to be true, in addition to the standard permission checks.\n+     * @param parent the parent document.\n+     * @param principal the user.", "originalCommit": "48c62d0e6e904561781b271ae17ba1c68f67712e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d61fa8ff5b9e46aa598002900f0e794c635bc76b", "chunk": "diff --git a/nuxeo-core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/api/trash/TrashService.java b/nuxeo-core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/api/trash/TrashService.java\nindex 61be9df9540..a063ec59d79 100644\n--- a/nuxeo-core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/api/trash/TrashService.java\n+++ b/nuxeo-core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/api/trash/TrashService.java\n\n@@ -84,17 +84,6 @@ public interface TrashService {\n         return canPurgeOrUntrash(Collections.singletonList(doc), principal);\n     }\n \n-    /**\n-     * Check if trashed child documents from a given parent document are \"purgeable/untrashable\".\n-     * Documents need to be in the trash for this to be true, in addition to the standard permission checks.\n-     * @param parent the parent document.\n-     * @param principal the user.\n-     * @return <code>true</code> if child Document are all \"purgeable/untrashable\", <code>false</code> otherwise\n-     * @see #canPurgeOrUntrash(List, NuxeoPrincipal)\n-     * @since 11.1\n-     */\n-    boolean getCanEmptyTrash(DocumentModel parent, NuxeoPrincipal principal);\n-\n     /**\n      * Gets the first non trashed ancestor.\n      * <p>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUzMzYxNg==", "url": "https://github.com/nuxeo/nuxeo/pull/3693#discussion_r370533616", "bodyText": "here you don't give enough informations, which method will replace the deprecated once,  CoreSession#query(String) with a limit its not enough because perhaps the called want the total document without using limit. Perhaps just @deprecated since 11.1, not scalable or not used anymore or at least you can propose to replace it by BAF", "author": "RSalem07", "createdAt": "2020-01-24T09:14:25Z", "path": "nuxeo-core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/api/trash/TrashService.java", "diffHunk": "@@ -167,7 +178,9 @@ default void untrashDocument(DocumentModel doc) {\n      * @param parent The parent document of trash document.\n      * @return All documents in the trash of the current document.\n      * @since 7.1\n+     * @deprecated since 11.1 not scalable (prefer to use directly {@link CoreSession#query(String)} with a limit\n      */", "originalCommit": "48c62d0e6e904561781b271ae17ba1c68f67712e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d61fa8ff5b9e46aa598002900f0e794c635bc76b", "chunk": "diff --git a/nuxeo-core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/api/trash/TrashService.java b/nuxeo-core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/api/trash/TrashService.java\nindex 61be9df9540..a063ec59d79 100644\n--- a/nuxeo-core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/api/trash/TrashService.java\n+++ b/nuxeo-core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/api/trash/TrashService.java\n\n@@ -178,9 +167,9 @@ public interface TrashService {\n      * @param parent The parent document of trash document.\n      * @return All documents in the trash of the current document.\n      * @since 7.1\n-     * @deprecated since 11.1 not scalable (prefer to use directly {@link CoreSession#query(String)} with a limit\n+     * @deprecated since 11.1 not scalable\n      */\n-    @Deprecated(since = \"11.1\")\n+    @Deprecated(since = \"11.1\", forRemoval = true )\n     DocumentModelList getDocuments(DocumentModel parent);\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUzMzgyOQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3693#discussion_r370533829", "bodyText": "you can replace it @Deprecated(since = \"11.1\", forRemoval = true)", "author": "RSalem07", "createdAt": "2020-01-24T09:15:00Z", "path": "nuxeo-core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/api/trash/TrashService.java", "diffHunk": "@@ -167,7 +178,9 @@ default void untrashDocument(DocumentModel doc) {\n      * @param parent The parent document of trash document.\n      * @return All documents in the trash of the current document.\n      * @since 7.1\n+     * @deprecated since 11.1 not scalable (prefer to use directly {@link CoreSession#query(String)} with a limit\n      */\n+    @Deprecated(since = \"11.1\")", "originalCommit": "48c62d0e6e904561781b271ae17ba1c68f67712e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d61fa8ff5b9e46aa598002900f0e794c635bc76b", "chunk": "diff --git a/nuxeo-core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/api/trash/TrashService.java b/nuxeo-core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/api/trash/TrashService.java\nindex 61be9df9540..a063ec59d79 100644\n--- a/nuxeo-core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/api/trash/TrashService.java\n+++ b/nuxeo-core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/api/trash/TrashService.java\n\n@@ -178,9 +167,9 @@ public interface TrashService {\n      * @param parent The parent document of trash document.\n      * @return All documents in the trash of the current document.\n      * @since 7.1\n-     * @deprecated since 11.1 not scalable (prefer to use directly {@link CoreSession#query(String)} with a limit\n+     * @deprecated since 11.1 not scalable\n      */\n-    @Deprecated(since = \"11.1\")\n+    @Deprecated(since = \"11.1\", forRemoval = true )\n     DocumentModelList getDocuments(DocumentModel parent);\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUzNzIwMQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3693#discussion_r370537201", "bodyText": "do we need Document and Relation ? as there is no joins, i am not sure how this query will be interpreted.\nfurthermore  can you please give a name field with more context GET_DOCUMENTS_BY_UUID_QUERY or something else", "author": "RSalem07", "createdAt": "2020-01-24T09:23:19Z", "path": "nuxeo-core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/scroll/RepositoryScroll.java", "diffHunk": "@@ -41,6 +44,8 @@\n  */\n public class RepositoryScroll implements Scroll {\n \n+    public static final String SELECT_DOCUMENTS_IN = \"SELECT * FROM Document, Relation WHERE ecm:uuid IN ('%s')\";\n+", "originalCommit": "48c62d0e6e904561781b271ae17ba1c68f67712e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUzODMwOA==", "url": "https://github.com/nuxeo/nuxeo/pull/3693#discussion_r370538308", "bodyText": "In other hand we shouldn't given a specific methods on this Repo scroller, just call it from outside using the builder and give you query see org.nuxeo.ecm.core.scroll.TestRepositoryScroll for examples", "author": "RSalem07", "createdAt": "2020-01-24T09:26:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUzNzIwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "d61fa8ff5b9e46aa598002900f0e794c635bc76b", "chunk": "diff --git a/nuxeo-core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/scroll/RepositoryScroll.java b/nuxeo-core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/scroll/RepositoryScroll.java\nindex 96ab43ca344..dcccfbbd2c2 100644\n--- a/nuxeo-core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/scroll/RepositoryScroll.java\n+++ b/nuxeo-core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/scroll/RepositoryScroll.java\n\n@@ -44,8 +41,6 @@ import org.nuxeo.runtime.api.login.NuxeoLoginContext;\n  */\n public class RepositoryScroll implements Scroll {\n \n-    public static final String SELECT_DOCUMENTS_IN = \"SELECT * FROM Document, Relation WHERE ecm:uuid IN ('%s')\";\n-\n     protected DocumentScrollRequest request;\n \n     protected NuxeoLoginContext loginContext;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUzOTkxMA==", "url": "https://github.com/nuxeo/nuxeo/pull/3693#discussion_r370539910", "bodyText": "see my comment on 48c62d0#r370538308\nfurthermore i think you can use StaticScroll as you have the list of ids .... you can ask Benoit for more context\nand for more context, you can rewrite this method as below:\n  String inClause = documentIds.stream().collect(Collectors.joining(\"', '\", \"'\", \"'\"))\n        String query = String.format(SELECT_DOCUMENTS_IN, NXQL.ECM_UUID, inClause);\n        return session.query(query);\n\nwhere  SELECT_DOCUMENTS_IN = \"SELECT * FROM Document, Relation WHERE %s IN (%s)\";", "author": "RSalem07", "createdAt": "2020-01-24T09:29:52Z", "path": "nuxeo-core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/scroll/RepositoryScroll.java", "diffHunk": "@@ -117,6 +122,19 @@ public void close() {\n         }\n     }\n \n+    /**\n+     * Helper to load a list of documents. Documents without read access or that does not exist are not returned.\n+     * @param session the Core session\n+     * @param documentIds the document Ids' list.\n+     * @return the corresponding DocumentModelList.\n+     */\n+    public static DocumentModelList loadDocuments(CoreSession session, List<String> documentIds) {\n+        if (documentIds == null || documentIds.isEmpty()) {\n+            return new DocumentModelListImpl(0);\n+        }\n+        return session.query(String.format(SELECT_DOCUMENTS_IN, String.join(\"', '\", documentIds)));\n+    }", "originalCommit": "48c62d0e6e904561781b271ae17ba1c68f67712e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d61fa8ff5b9e46aa598002900f0e794c635bc76b", "chunk": "diff --git a/nuxeo-core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/scroll/RepositoryScroll.java b/nuxeo-core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/scroll/RepositoryScroll.java\nindex 96ab43ca344..dcccfbbd2c2 100644\n--- a/nuxeo-core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/scroll/RepositoryScroll.java\n+++ b/nuxeo-core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/scroll/RepositoryScroll.java\n\n@@ -122,19 +117,6 @@ public class RepositoryScroll implements Scroll {\n         }\n     }\n \n-    /**\n-     * Helper to load a list of documents. Documents without read access or that does not exist are not returned.\n-     * @param session the Core session\n-     * @param documentIds the document Ids' list.\n-     * @return the corresponding DocumentModelList.\n-     */\n-    public static DocumentModelList loadDocuments(CoreSession session, List<String> documentIds) {\n-        if (documentIds == null || documentIds.isEmpty()) {\n-            return new DocumentModelListImpl(0);\n-        }\n-        return session.query(String.format(SELECT_DOCUMENTS_IN, String.join(\"', '\", documentIds)));\n-    }\n-\n     @Override\n     public String toString() {\n         return \"RepositoryScroll{\" + \"request=\" + request + '}';\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU0Mjc2NA==", "url": "https://github.com/nuxeo/nuxeo/pull/3693#discussion_r370542764", "bodyText": "what do you want to test here:\n\nthat you can purge the folder children\nor purge folder and children\n\ni ask this question depending on you answer the java doc should be update / reworked on getCanEmptyTrash method ...", "author": "RSalem07", "createdAt": "2020-01-24T09:36:49Z", "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/trash/test/AbstractTestTrashService.java", "diffHunk": "@@ -417,4 +418,18 @@ public void testFollowTransitionBackwardCompatibility() {\n \n     }\n \n+    @Test\n+    public void getCanEmptyTrash() {\n+        createDocuments();\n+        trashService.trashDocument(doc1);\n+        transactionalFeature.nextTransaction();\n+\n+        assertTrue(trashService.getCanEmptyTrash(fold, principal));\n+\n+        trashService.trashDocument(fold);\n+        transactionalFeature.nextTransaction();\n+\n+        assertTrue(trashService.getCanEmptyTrash(fold, principal));", "originalCommit": "48c62d0e6e904561781b271ae17ba1c68f67712e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d61fa8ff5b9e46aa598002900f0e794c635bc76b", "chunk": "diff --git a/nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/trash/test/AbstractTestTrashService.java b/nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/trash/test/AbstractTestTrashService.java\nindex a8cf23d9816..69e49765aa6 100644\n--- a/nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/trash/test/AbstractTestTrashService.java\n+++ b/nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/trash/test/AbstractTestTrashService.java\n\n@@ -418,18 +417,4 @@ public abstract class AbstractTestTrashService {\n \n     }\n \n-    @Test\n-    public void getCanEmptyTrash() {\n-        createDocuments();\n-        trashService.trashDocument(doc1);\n-        transactionalFeature.nextTransaction();\n-\n-        assertTrue(trashService.getCanEmptyTrash(fold, principal));\n-\n-        trashService.trashDocument(fold);\n-        transactionalFeature.nextTransaction();\n-\n-        assertTrue(trashService.getCanEmptyTrash(fold, principal));\n-    }\n-\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU1ODA0OA==", "url": "https://github.com/nuxeo/nuxeo/pull/3693#discussion_r370558048", "bodyText": "here  calling RespositoryScroll#loadDocuments,  you will not scroll a second time ? is it right\njust make query on the CoreSession#query or extract a method in the TrashService but we should care about what scroll.next() returns i means how the size of the documents list will be, because in some SQL DB there is some limitation when you make IN for example Oracle don't accepts more then 1000 with IN clause , Florent / Benoit can give more feedbacks", "author": "RSalem07", "createdAt": "2020-01-24T10:11:22Z", "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/trash/AbstractTrashService.java", "diffHunk": "@@ -112,19 +117,60 @@ public boolean canPurgeOrUntrash(List<DocumentModel> docs, NuxeoPrincipal princi\n             return false;\n         }\n         // used to do only check on parent perm\n-        TrashInfo info = getInfo(docs, principal, false, true);\n+        TrashInfo info = getInfo(docs, principal, false, true, true);\n         return info.docs.size() == docs.size();\n     }\n \n     protected TrashInfo getInfo(List<DocumentModel> docs, NuxeoPrincipal principal, boolean checkProxies,\n             boolean checkDeleted) {\n+        return getInfo(docs, principal, checkProxies, checkDeleted, false);\n+    }\n+\n+    @Override\n+    public boolean getCanEmptyTrash(DocumentModel parent, NuxeoPrincipal principal) {\n+        String nxql = String.format(TRASHED_QUERY, parent.getId());\n+        ScrollRequest request = DocumentScrollRequest.builder(nxql)\n+                                                     .username(principal.getName())\n+                                                     .repository(parent.getRepositoryName())\n+                                                     .build();\n+        ScrollService service = Framework.getService(ScrollService.class);\n+        boolean canPurge = true;\n+        try (Scroll scroll = service.scroll(request)) {\n+            if (!scroll.hasNext()) {\n+                return false;\n+            }\n+            while (scroll.hasNext() && canPurge) {\n+                DocumentModelList documents = RepositoryScroll.loadDocuments(parent.getCoreSession(), scroll.next());\n+                canPurge = canPurgeOrUntrash(documents, principal);", "originalCommit": "48c62d0e6e904561781b271ae17ba1c68f67712e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM0NzI1Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/3693#discussion_r371347257", "bodyText": "default scroll size is 50", "author": "ThierryCasanova", "createdAt": "2020-01-27T16:33:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU1ODA0OA=="}], "type": "inlineReview", "revised_code": {"commit": "d61fa8ff5b9e46aa598002900f0e794c635bc76b", "chunk": "diff --git a/nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/trash/AbstractTrashService.java b/nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/trash/AbstractTrashService.java\nindex 826d9dedf1f..c51ded8b475 100644\n--- a/nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/trash/AbstractTrashService.java\n+++ b/nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/trash/AbstractTrashService.java\n\n@@ -117,50 +112,19 @@ public abstract class AbstractTrashService implements TrashService {\n             return false;\n         }\n         // used to do only check on parent perm\n-        TrashInfo info = getInfo(docs, principal, false, true, true);\n+        TrashInfo info = getInfoWithExitLoopCondition(docs, principal, false, true, true);\n         return info.docs.size() == docs.size();\n     }\n \n     protected TrashInfo getInfo(List<DocumentModel> docs, NuxeoPrincipal principal, boolean checkProxies,\n             boolean checkDeleted) {\n-        return getInfo(docs, principal, checkProxies, checkDeleted, false);\n+        \n+        return getInfoWithExitLoopCondition(docs, principal, checkProxies, checkDeleted, false);\n     }\n \n-    @Override\n-    public boolean getCanEmptyTrash(DocumentModel parent, NuxeoPrincipal principal) {\n-        String nxql = String.format(TRASHED_QUERY, parent.getId());\n-        ScrollRequest request = DocumentScrollRequest.builder(nxql)\n-                                                     .username(principal.getName())\n-                                                     .repository(parent.getRepositoryName())\n-                                                     .build();\n-        ScrollService service = Framework.getService(ScrollService.class);\n-        boolean canPurge = true;\n-        try (Scroll scroll = service.scroll(request)) {\n-            if (!scroll.hasNext()) {\n-                return false;\n-            }\n-            while (scroll.hasNext() && canPurge) {\n-                DocumentModelList documents = RepositoryScroll.loadDocuments(parent.getCoreSession(), scroll.next());\n-                canPurge = canPurgeOrUntrash(documents, principal);\n-            }\n-        }\n-        return canPurge;\n-    }\n+    protected TrashInfo getInfoWithExitLoopCondition(List<DocumentModel> docs, NuxeoPrincipal principal,\n+            boolean checkProxies, boolean checkDeleted, boolean exitOnFirstDelta) {\n \n-    /**\n-     * Return the {@link TrashInfo} of a document list with potentially some documents not ok for 'purge' or unTrash\n-     * (forbidden, locked ...)\n-     *\n-     * @param docs the documents List to trash\n-     * @param principal the user principal\n-     * @param checkProxies <code>true</code> to check proxies.\n-     * @param checkDeleted <code>true</code> to check if doc is trashed.\n-     * @param exitOnFirstDelta <code>true</code> to avoid looping in the whole documents List and exist on first\n-     *            document with TrashInfo \"forbidden\", \"proxies\" or \"locked\".\n-     * @return the TrashInfo for the documents List.\n-     */\n-    protected TrashInfo getInfo(List<DocumentModel> docs, NuxeoPrincipal principal, boolean checkProxies,\n-            boolean checkDeleted, boolean exitOnFirstDelta) {\n         TrashInfo info = new TrashInfo();\n         info.docs = new ArrayList<>(docs.size());\n         if (docs.isEmpty()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2MDE5NA==", "url": "https://github.com/nuxeo/nuxeo/pull/3693#discussion_r370560194", "bodyText": "Return -> replace it by Gets  and\nfor the javadoc on protected method  we can ask the team because i am not sure about the rule, from my point of view it will help us to have the javadoc on protected for nuxeo usage....", "author": "RSalem07", "createdAt": "2020-01-24T10:15:38Z", "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/trash/AbstractTrashService.java", "diffHunk": "@@ -112,19 +117,60 @@ public boolean canPurgeOrUntrash(List<DocumentModel> docs, NuxeoPrincipal princi\n             return false;\n         }\n         // used to do only check on parent perm\n-        TrashInfo info = getInfo(docs, principal, false, true);\n+        TrashInfo info = getInfo(docs, principal, false, true, true);\n         return info.docs.size() == docs.size();\n     }\n \n     protected TrashInfo getInfo(List<DocumentModel> docs, NuxeoPrincipal principal, boolean checkProxies,\n             boolean checkDeleted) {\n+        return getInfo(docs, principal, checkProxies, checkDeleted, false);\n+    }\n+\n+    @Override\n+    public boolean getCanEmptyTrash(DocumentModel parent, NuxeoPrincipal principal) {\n+        String nxql = String.format(TRASHED_QUERY, parent.getId());\n+        ScrollRequest request = DocumentScrollRequest.builder(nxql)\n+                                                     .username(principal.getName())\n+                                                     .repository(parent.getRepositoryName())\n+                                                     .build();\n+        ScrollService service = Framework.getService(ScrollService.class);\n+        boolean canPurge = true;\n+        try (Scroll scroll = service.scroll(request)) {\n+            if (!scroll.hasNext()) {\n+                return false;\n+            }\n+            while (scroll.hasNext() && canPurge) {\n+                DocumentModelList documents = RepositoryScroll.loadDocuments(parent.getCoreSession(), scroll.next());\n+                canPurge = canPurgeOrUntrash(documents, principal);\n+            }\n+        }\n+        return canPurge;\n+    }\n+\n+    /**\n+     * Return the {@link TrashInfo} of a document list with potentially some documents not ok for 'purge' or unTrash\n+     * (forbidden, locked ...)", "originalCommit": "48c62d0e6e904561781b271ae17ba1c68f67712e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d61fa8ff5b9e46aa598002900f0e794c635bc76b", "chunk": "diff --git a/nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/trash/AbstractTrashService.java b/nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/trash/AbstractTrashService.java\nindex 826d9dedf1f..c51ded8b475 100644\n--- a/nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/trash/AbstractTrashService.java\n+++ b/nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/trash/AbstractTrashService.java\n\n@@ -117,50 +112,19 @@ public abstract class AbstractTrashService implements TrashService {\n             return false;\n         }\n         // used to do only check on parent perm\n-        TrashInfo info = getInfo(docs, principal, false, true, true);\n+        TrashInfo info = getInfoWithExitLoopCondition(docs, principal, false, true, true);\n         return info.docs.size() == docs.size();\n     }\n \n     protected TrashInfo getInfo(List<DocumentModel> docs, NuxeoPrincipal principal, boolean checkProxies,\n             boolean checkDeleted) {\n-        return getInfo(docs, principal, checkProxies, checkDeleted, false);\n+        \n+        return getInfoWithExitLoopCondition(docs, principal, checkProxies, checkDeleted, false);\n     }\n \n-    @Override\n-    public boolean getCanEmptyTrash(DocumentModel parent, NuxeoPrincipal principal) {\n-        String nxql = String.format(TRASHED_QUERY, parent.getId());\n-        ScrollRequest request = DocumentScrollRequest.builder(nxql)\n-                                                     .username(principal.getName())\n-                                                     .repository(parent.getRepositoryName())\n-                                                     .build();\n-        ScrollService service = Framework.getService(ScrollService.class);\n-        boolean canPurge = true;\n-        try (Scroll scroll = service.scroll(request)) {\n-            if (!scroll.hasNext()) {\n-                return false;\n-            }\n-            while (scroll.hasNext() && canPurge) {\n-                DocumentModelList documents = RepositoryScroll.loadDocuments(parent.getCoreSession(), scroll.next());\n-                canPurge = canPurgeOrUntrash(documents, principal);\n-            }\n-        }\n-        return canPurge;\n-    }\n+    protected TrashInfo getInfoWithExitLoopCondition(List<DocumentModel> docs, NuxeoPrincipal principal,\n+            boolean checkProxies, boolean checkDeleted, boolean exitOnFirstDelta) {\n \n-    /**\n-     * Return the {@link TrashInfo} of a document list with potentially some documents not ok for 'purge' or unTrash\n-     * (forbidden, locked ...)\n-     *\n-     * @param docs the documents List to trash\n-     * @param principal the user principal\n-     * @param checkProxies <code>true</code> to check proxies.\n-     * @param checkDeleted <code>true</code> to check if doc is trashed.\n-     * @param exitOnFirstDelta <code>true</code> to avoid looping in the whole documents List and exist on first\n-     *            document with TrashInfo \"forbidden\", \"proxies\" or \"locked\".\n-     * @return the TrashInfo for the documents List.\n-     */\n-    protected TrashInfo getInfo(List<DocumentModel> docs, NuxeoPrincipal principal, boolean checkProxies,\n-            boolean checkDeleted, boolean exitOnFirstDelta) {\n         TrashInfo info = new TrashInfo();\n         info.docs = new ArrayList<>(docs.size());\n         if (docs.isEmpty()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2MTExNw==", "url": "https://github.com/nuxeo/nuxeo/pull/3693#discussion_r370561117", "bodyText": "we dont change the protected/public methods signature for backward compatibility just create a new once and call it from the exiting once", "author": "RSalem07", "createdAt": "2020-01-24T10:17:43Z", "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/trash/AbstractTrashService.java", "diffHunk": "@@ -112,19 +117,60 @@ public boolean canPurgeOrUntrash(List<DocumentModel> docs, NuxeoPrincipal princi\n             return false;\n         }\n         // used to do only check on parent perm\n-        TrashInfo info = getInfo(docs, principal, false, true);\n+        TrashInfo info = getInfo(docs, principal, false, true, true);\n         return info.docs.size() == docs.size();\n     }\n \n     protected TrashInfo getInfo(List<DocumentModel> docs, NuxeoPrincipal principal, boolean checkProxies,\n             boolean checkDeleted) {\n+        return getInfo(docs, principal, checkProxies, checkDeleted, false);\n+    }\n+\n+    @Override\n+    public boolean getCanEmptyTrash(DocumentModel parent, NuxeoPrincipal principal) {\n+        String nxql = String.format(TRASHED_QUERY, parent.getId());\n+        ScrollRequest request = DocumentScrollRequest.builder(nxql)\n+                                                     .username(principal.getName())\n+                                                     .repository(parent.getRepositoryName())\n+                                                     .build();\n+        ScrollService service = Framework.getService(ScrollService.class);\n+        boolean canPurge = true;\n+        try (Scroll scroll = service.scroll(request)) {\n+            if (!scroll.hasNext()) {\n+                return false;\n+            }\n+            while (scroll.hasNext() && canPurge) {\n+                DocumentModelList documents = RepositoryScroll.loadDocuments(parent.getCoreSession(), scroll.next());\n+                canPurge = canPurgeOrUntrash(documents, principal);\n+            }\n+        }\n+        return canPurge;\n+    }\n+\n+    /**\n+     * Return the {@link TrashInfo} of a document list with potentially some documents not ok for 'purge' or unTrash\n+     * (forbidden, locked ...)\n+     *\n+     * @param docs the documents List to trash\n+     * @param principal the user principal\n+     * @param checkProxies <code>true</code> to check proxies.\n+     * @param checkDeleted <code>true</code> to check if doc is trashed.\n+     * @param exitOnFirstDelta <code>true</code> to avoid looping in the whole documents List and exist on first\n+     *            document with TrashInfo \"forbidden\", \"proxies\" or \"locked\".\n+     * @return the TrashInfo for the documents List.\n+     */\n+    protected TrashInfo getInfo(List<DocumentModel> docs, NuxeoPrincipal principal, boolean checkProxies,\n+            boolean checkDeleted, boolean exitOnFirstDelta) {", "originalCommit": "48c62d0e6e904561781b271ae17ba1c68f67712e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d61fa8ff5b9e46aa598002900f0e794c635bc76b", "chunk": "diff --git a/nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/trash/AbstractTrashService.java b/nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/trash/AbstractTrashService.java\nindex 826d9dedf1f..c51ded8b475 100644\n--- a/nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/trash/AbstractTrashService.java\n+++ b/nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/trash/AbstractTrashService.java\n\n@@ -117,50 +112,19 @@ public abstract class AbstractTrashService implements TrashService {\n             return false;\n         }\n         // used to do only check on parent perm\n-        TrashInfo info = getInfo(docs, principal, false, true, true);\n+        TrashInfo info = getInfoWithExitLoopCondition(docs, principal, false, true, true);\n         return info.docs.size() == docs.size();\n     }\n \n     protected TrashInfo getInfo(List<DocumentModel> docs, NuxeoPrincipal principal, boolean checkProxies,\n             boolean checkDeleted) {\n-        return getInfo(docs, principal, checkProxies, checkDeleted, false);\n+        \n+        return getInfoWithExitLoopCondition(docs, principal, checkProxies, checkDeleted, false);\n     }\n \n-    @Override\n-    public boolean getCanEmptyTrash(DocumentModel parent, NuxeoPrincipal principal) {\n-        String nxql = String.format(TRASHED_QUERY, parent.getId());\n-        ScrollRequest request = DocumentScrollRequest.builder(nxql)\n-                                                     .username(principal.getName())\n-                                                     .repository(parent.getRepositoryName())\n-                                                     .build();\n-        ScrollService service = Framework.getService(ScrollService.class);\n-        boolean canPurge = true;\n-        try (Scroll scroll = service.scroll(request)) {\n-            if (!scroll.hasNext()) {\n-                return false;\n-            }\n-            while (scroll.hasNext() && canPurge) {\n-                DocumentModelList documents = RepositoryScroll.loadDocuments(parent.getCoreSession(), scroll.next());\n-                canPurge = canPurgeOrUntrash(documents, principal);\n-            }\n-        }\n-        return canPurge;\n-    }\n+    protected TrashInfo getInfoWithExitLoopCondition(List<DocumentModel> docs, NuxeoPrincipal principal,\n+            boolean checkProxies, boolean checkDeleted, boolean exitOnFirstDelta) {\n \n-    /**\n-     * Return the {@link TrashInfo} of a document list with potentially some documents not ok for 'purge' or unTrash\n-     * (forbidden, locked ...)\n-     *\n-     * @param docs the documents List to trash\n-     * @param principal the user principal\n-     * @param checkProxies <code>true</code> to check proxies.\n-     * @param checkDeleted <code>true</code> to check if doc is trashed.\n-     * @param exitOnFirstDelta <code>true</code> to avoid looping in the whole documents List and exist on first\n-     *            document with TrashInfo \"forbidden\", \"proxies\" or \"locked\".\n-     * @return the TrashInfo for the documents List.\n-     */\n-    protected TrashInfo getInfo(List<DocumentModel> docs, NuxeoPrincipal principal, boolean checkProxies,\n-            boolean checkDeleted, boolean exitOnFirstDelta) {\n         TrashInfo info = new TrashInfo();\n         info.docs = new ArrayList<>(docs.size());\n         if (docs.isEmpty()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2MTg5Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/3693#discussion_r370561897", "bodyText": "need to be formatted, extra space needed on the", "author": "RSalem07", "createdAt": "2020-01-24T10:19:29Z", "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/trash/AbstractTrashService.java", "diffHunk": "@@ -112,19 +117,60 @@ public boolean canPurgeOrUntrash(List<DocumentModel> docs, NuxeoPrincipal princi\n             return false;\n         }\n         // used to do only check on parent perm\n-        TrashInfo info = getInfo(docs, principal, false, true);\n+        TrashInfo info = getInfo(docs, principal, false, true, true);\n         return info.docs.size() == docs.size();\n     }\n \n     protected TrashInfo getInfo(List<DocumentModel> docs, NuxeoPrincipal principal, boolean checkProxies,\n             boolean checkDeleted) {\n+        return getInfo(docs, principal, checkProxies, checkDeleted, false);\n+    }\n+\n+    @Override\n+    public boolean getCanEmptyTrash(DocumentModel parent, NuxeoPrincipal principal) {\n+        String nxql = String.format(TRASHED_QUERY, parent.getId());\n+        ScrollRequest request = DocumentScrollRequest.builder(nxql)\n+                                                     .username(principal.getName())\n+                                                     .repository(parent.getRepositoryName())\n+                                                     .build();\n+        ScrollService service = Framework.getService(ScrollService.class);\n+        boolean canPurge = true;\n+        try (Scroll scroll = service.scroll(request)) {\n+            if (!scroll.hasNext()) {\n+                return false;\n+            }\n+            while (scroll.hasNext() && canPurge) {\n+                DocumentModelList documents = RepositoryScroll.loadDocuments(parent.getCoreSession(), scroll.next());\n+                canPurge = canPurgeOrUntrash(documents, principal);\n+            }\n+        }\n+        return canPurge;\n+    }\n+\n+    /**\n+     * Return the {@link TrashInfo} of a document list with potentially some documents not ok for 'purge' or unTrash\n+     * (forbidden, locked ...)\n+     *\n+     * @param docs the documents List to trash\n+     * @param principal the user principal\n+     * @param checkProxies <code>true</code> to check proxies.\n+     * @param checkDeleted <code>true</code> to check if doc is trashed.\n+     * @param exitOnFirstDelta <code>true</code> to avoid looping in the whole documents List and exist on first\n+     *            document with TrashInfo \"forbidden\", \"proxies\" or \"locked\".\n+     * @return the TrashInfo for the documents List.\n+     */\n+    protected TrashInfo getInfo(List<DocumentModel> docs, NuxeoPrincipal principal, boolean checkProxies,\n+            boolean checkDeleted, boolean exitOnFirstDelta) {\n         TrashInfo info = new TrashInfo();\n         info.docs = new ArrayList<>(docs.size());\n         if (docs.isEmpty()) {\n             return info;\n         }\n         CoreSession session = docs.get(0).getCoreSession();\n         for (DocumentModel doc : docs) {\n+            if (exitOnFirstDelta && (info.forbidden > 0 || info.locked >0 || info.proxies >0)){\n+                return info;", "originalCommit": "48c62d0e6e904561781b271ae17ba1c68f67712e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d61fa8ff5b9e46aa598002900f0e794c635bc76b", "chunk": "diff --git a/nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/trash/AbstractTrashService.java b/nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/trash/AbstractTrashService.java\nindex 826d9dedf1f..c51ded8b475 100644\n--- a/nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/trash/AbstractTrashService.java\n+++ b/nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/trash/AbstractTrashService.java\n\n@@ -117,50 +112,19 @@ public abstract class AbstractTrashService implements TrashService {\n             return false;\n         }\n         // used to do only check on parent perm\n-        TrashInfo info = getInfo(docs, principal, false, true, true);\n+        TrashInfo info = getInfoWithExitLoopCondition(docs, principal, false, true, true);\n         return info.docs.size() == docs.size();\n     }\n \n     protected TrashInfo getInfo(List<DocumentModel> docs, NuxeoPrincipal principal, boolean checkProxies,\n             boolean checkDeleted) {\n-        return getInfo(docs, principal, checkProxies, checkDeleted, false);\n+        \n+        return getInfoWithExitLoopCondition(docs, principal, checkProxies, checkDeleted, false);\n     }\n \n-    @Override\n-    public boolean getCanEmptyTrash(DocumentModel parent, NuxeoPrincipal principal) {\n-        String nxql = String.format(TRASHED_QUERY, parent.getId());\n-        ScrollRequest request = DocumentScrollRequest.builder(nxql)\n-                                                     .username(principal.getName())\n-                                                     .repository(parent.getRepositoryName())\n-                                                     .build();\n-        ScrollService service = Framework.getService(ScrollService.class);\n-        boolean canPurge = true;\n-        try (Scroll scroll = service.scroll(request)) {\n-            if (!scroll.hasNext()) {\n-                return false;\n-            }\n-            while (scroll.hasNext() && canPurge) {\n-                DocumentModelList documents = RepositoryScroll.loadDocuments(parent.getCoreSession(), scroll.next());\n-                canPurge = canPurgeOrUntrash(documents, principal);\n-            }\n-        }\n-        return canPurge;\n-    }\n+    protected TrashInfo getInfoWithExitLoopCondition(List<DocumentModel> docs, NuxeoPrincipal principal,\n+            boolean checkProxies, boolean checkDeleted, boolean exitOnFirstDelta) {\n \n-    /**\n-     * Return the {@link TrashInfo} of a document list with potentially some documents not ok for 'purge' or unTrash\n-     * (forbidden, locked ...)\n-     *\n-     * @param docs the documents List to trash\n-     * @param principal the user principal\n-     * @param checkProxies <code>true</code> to check proxies.\n-     * @param checkDeleted <code>true</code> to check if doc is trashed.\n-     * @param exitOnFirstDelta <code>true</code> to avoid looping in the whole documents List and exist on first\n-     *            document with TrashInfo \"forbidden\", \"proxies\" or \"locked\".\n-     * @return the TrashInfo for the documents List.\n-     */\n-    protected TrashInfo getInfo(List<DocumentModel> docs, NuxeoPrincipal principal, boolean checkProxies,\n-            boolean checkDeleted, boolean exitOnFirstDelta) {\n         TrashInfo info = new TrashInfo();\n         info.docs = new ArrayList<>(docs.size());\n         if (docs.isEmpty()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2MzMzOQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3693#discussion_r370563339", "bodyText": "With this premature exit you change/break the exiting behaviour of this method as before you changed it, it main purpose was to give more informations about the trash state, and now you exit the method if your check is true  i think we should rework it depending on the need", "author": "RSalem07", "createdAt": "2020-01-24T10:22:32Z", "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/trash/AbstractTrashService.java", "diffHunk": "@@ -112,19 +117,60 @@ public boolean canPurgeOrUntrash(List<DocumentModel> docs, NuxeoPrincipal princi\n             return false;\n         }\n         // used to do only check on parent perm\n-        TrashInfo info = getInfo(docs, principal, false, true);\n+        TrashInfo info = getInfo(docs, principal, false, true, true);\n         return info.docs.size() == docs.size();\n     }\n \n     protected TrashInfo getInfo(List<DocumentModel> docs, NuxeoPrincipal principal, boolean checkProxies,\n             boolean checkDeleted) {\n+        return getInfo(docs, principal, checkProxies, checkDeleted, false);\n+    }\n+\n+    @Override\n+    public boolean getCanEmptyTrash(DocumentModel parent, NuxeoPrincipal principal) {\n+        String nxql = String.format(TRASHED_QUERY, parent.getId());\n+        ScrollRequest request = DocumentScrollRequest.builder(nxql)\n+                                                     .username(principal.getName())\n+                                                     .repository(parent.getRepositoryName())\n+                                                     .build();\n+        ScrollService service = Framework.getService(ScrollService.class);\n+        boolean canPurge = true;\n+        try (Scroll scroll = service.scroll(request)) {\n+            if (!scroll.hasNext()) {\n+                return false;\n+            }\n+            while (scroll.hasNext() && canPurge) {\n+                DocumentModelList documents = RepositoryScroll.loadDocuments(parent.getCoreSession(), scroll.next());\n+                canPurge = canPurgeOrUntrash(documents, principal);\n+            }\n+        }\n+        return canPurge;\n+    }\n+\n+    /**\n+     * Return the {@link TrashInfo} of a document list with potentially some documents not ok for 'purge' or unTrash\n+     * (forbidden, locked ...)\n+     *\n+     * @param docs the documents List to trash\n+     * @param principal the user principal\n+     * @param checkProxies <code>true</code> to check proxies.\n+     * @param checkDeleted <code>true</code> to check if doc is trashed.\n+     * @param exitOnFirstDelta <code>true</code> to avoid looping in the whole documents List and exist on first\n+     *            document with TrashInfo \"forbidden\", \"proxies\" or \"locked\".\n+     * @return the TrashInfo for the documents List.\n+     */\n+    protected TrashInfo getInfo(List<DocumentModel> docs, NuxeoPrincipal principal, boolean checkProxies,\n+            boolean checkDeleted, boolean exitOnFirstDelta) {\n         TrashInfo info = new TrashInfo();\n         info.docs = new ArrayList<>(docs.size());\n         if (docs.isEmpty()) {\n             return info;\n         }\n         CoreSession session = docs.get(0).getCoreSession();\n         for (DocumentModel doc : docs) {\n+            if (exitOnFirstDelta && (info.forbidden > 0 || info.locked >0 || info.proxies >0)){\n+                return info;", "originalCommit": "48c62d0e6e904561781b271ae17ba1c68f67712e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk4ODQyNA==", "url": "https://github.com/nuxeo/nuxeo/pull/3693#discussion_r372988424", "bodyText": "The behavior is only changed if the exitOnFirstDelta is true, which by default is false in the new internal call so the behavior is still the same:\nd61fa8f#diff-7c7663426b7649bd97453eaa63571db0R122\nNot advocating for a way or another though", "author": "NourNuxeo", "createdAt": "2020-01-30T14:43:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2MzMzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzAzMTM3Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/3693#discussion_r373031377", "bodyText": "finally roll-backed to reduice commit impact to jsf bean only", "author": "ThierryCasanova", "createdAt": "2020-01-30T15:50:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2MzMzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzAzNjE5MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3693#discussion_r373036191", "bodyText": "@NourNuxeo about #3693 (comment) here the method is changed on its behaviour, before adding parameters the method will take each parameter as a filter for the process but the new once will exit the loop which is different.\nas discussed with thierry this change is not required and it's why he rollback it", "author": "RSalem07", "createdAt": "2020-01-30T15:58:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2MzMzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA0MTE4NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3693#discussion_r373041185", "bodyText": "Of course it does extra stuff, that's why he changes it. But it still behaves the same way in the places it was called before.\nYes I followed up with the discussion about the rollback \ud83d\udc4d", "author": "NourNuxeo", "createdAt": "2020-01-30T16:06:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2MzMzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA0NDcxOQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3693#discussion_r373044719", "bodyText": "Of course it does extra stuff, that's why he changes it. But it still behaves the same way in the places it was called before.\n\ni know why he changed it,  but i don't agree with this modification as the new method now can do more then just filter and any one can called it without knowing exactly what means the new parameter", "author": "RSalem07", "createdAt": "2020-01-30T16:12:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2MzMzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA1NDc0MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3693#discussion_r373054741", "bodyText": "The method was protected and the param was named. But I like method who do only one thing better than the multi behavioral ones for sure.", "author": "NourNuxeo", "createdAt": "2020-01-30T16:28:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2MzMzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "d61fa8ff5b9e46aa598002900f0e794c635bc76b", "chunk": "diff --git a/nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/trash/AbstractTrashService.java b/nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/trash/AbstractTrashService.java\nindex 826d9dedf1f..c51ded8b475 100644\n--- a/nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/trash/AbstractTrashService.java\n+++ b/nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/trash/AbstractTrashService.java\n\n@@ -117,50 +112,19 @@ public abstract class AbstractTrashService implements TrashService {\n             return false;\n         }\n         // used to do only check on parent perm\n-        TrashInfo info = getInfo(docs, principal, false, true, true);\n+        TrashInfo info = getInfoWithExitLoopCondition(docs, principal, false, true, true);\n         return info.docs.size() == docs.size();\n     }\n \n     protected TrashInfo getInfo(List<DocumentModel> docs, NuxeoPrincipal principal, boolean checkProxies,\n             boolean checkDeleted) {\n-        return getInfo(docs, principal, checkProxies, checkDeleted, false);\n+        \n+        return getInfoWithExitLoopCondition(docs, principal, checkProxies, checkDeleted, false);\n     }\n \n-    @Override\n-    public boolean getCanEmptyTrash(DocumentModel parent, NuxeoPrincipal principal) {\n-        String nxql = String.format(TRASHED_QUERY, parent.getId());\n-        ScrollRequest request = DocumentScrollRequest.builder(nxql)\n-                                                     .username(principal.getName())\n-                                                     .repository(parent.getRepositoryName())\n-                                                     .build();\n-        ScrollService service = Framework.getService(ScrollService.class);\n-        boolean canPurge = true;\n-        try (Scroll scroll = service.scroll(request)) {\n-            if (!scroll.hasNext()) {\n-                return false;\n-            }\n-            while (scroll.hasNext() && canPurge) {\n-                DocumentModelList documents = RepositoryScroll.loadDocuments(parent.getCoreSession(), scroll.next());\n-                canPurge = canPurgeOrUntrash(documents, principal);\n-            }\n-        }\n-        return canPurge;\n-    }\n+    protected TrashInfo getInfoWithExitLoopCondition(List<DocumentModel> docs, NuxeoPrincipal principal,\n+            boolean checkProxies, boolean checkDeleted, boolean exitOnFirstDelta) {\n \n-    /**\n-     * Return the {@link TrashInfo} of a document list with potentially some documents not ok for 'purge' or unTrash\n-     * (forbidden, locked ...)\n-     *\n-     * @param docs the documents List to trash\n-     * @param principal the user principal\n-     * @param checkProxies <code>true</code> to check proxies.\n-     * @param checkDeleted <code>true</code> to check if doc is trashed.\n-     * @param exitOnFirstDelta <code>true</code> to avoid looping in the whole documents List and exist on first\n-     *            document with TrashInfo \"forbidden\", \"proxies\" or \"locked\".\n-     * @return the TrashInfo for the documents List.\n-     */\n-    protected TrashInfo getInfo(List<DocumentModel> docs, NuxeoPrincipal principal, boolean checkProxies,\n-            boolean checkDeleted, boolean exitOnFirstDelta) {\n         TrashInfo info = new TrashInfo();\n         info.docs = new ArrayList<>(docs.size());\n         if (docs.isEmpty()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2MzY1OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3693#discussion_r370563659", "bodyText": "no need for deprecated on Override method as you did it on the interface one", "author": "RSalem07", "createdAt": "2020-01-24T10:23:25Z", "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/trash/AbstractTrashService.java", "diffHunk": "@@ -299,6 +345,7 @@ protected void notifyEvent(CoreSession session, String eventId, DocumentModel do\n         eventService.fireEvent(event);\n     }\n \n+    @Deprecated(since = \"11.1\")", "originalCommit": "48c62d0e6e904561781b271ae17ba1c68f67712e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d61fa8ff5b9e46aa598002900f0e794c635bc76b", "chunk": "diff --git a/nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/trash/AbstractTrashService.java b/nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/trash/AbstractTrashService.java\nindex 826d9dedf1f..c51ded8b475 100644\n--- a/nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/trash/AbstractTrashService.java\n+++ b/nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/trash/AbstractTrashService.java\n\n@@ -345,7 +309,6 @@ public abstract class AbstractTrashService implements TrashService {\n         eventService.fireEvent(event);\n     }\n \n-    @Deprecated(since = \"11.1\")\n     @Override\n     public DocumentModelList getDocuments(DocumentModel parent) {\n         CoreSession session = parent.getCoreSession();\n"}}, {"oid": "d61fa8ff5b9e46aa598002900f0e794c635bc76b", "url": "https://github.com/nuxeo/nuxeo/commit/d61fa8ff5b9e46aa598002900f0e794c635bc76b", "message": "NXP-28502: Fix permanent deletion of folder containing a large number of documents", "committedDate": "2020-01-27T17:16:44Z", "type": "forcePushed"}, {"oid": "7594cec14f2498b850c841eaca8188d59cc367cb", "url": "https://github.com/nuxeo/nuxeo/commit/7594cec14f2498b850c841eaca8188d59cc367cb", "message": "NXP-28502: Fix permanent deletion of folder containing a large number of documents", "committedDate": "2020-01-30T15:47:09Z", "type": "forcePushed"}, {"oid": "532c2aec7f03e00434eef1563ce021fa5b83ded4", "url": "https://github.com/nuxeo/nuxeo/commit/532c2aec7f03e00434eef1563ce021fa5b83ded4", "message": "NXP-28502: deprecate TrashService#getDocuments", "committedDate": "2020-02-14T16:33:20Z", "type": "forcePushed"}, {"oid": "50316b45539a2bbb0f2a443f55134b157c0f6c11", "url": "https://github.com/nuxeo/nuxeo/commit/50316b45539a2bbb0f2a443f55134b157c0f6c11", "message": "NXP-28502: deprecate TrashService#getDocuments", "committedDate": "2020-02-17T11:16:56Z", "type": "commit"}, {"oid": "50316b45539a2bbb0f2a443f55134b157c0f6c11", "url": "https://github.com/nuxeo/nuxeo/commit/50316b45539a2bbb0f2a443f55134b157c0f6c11", "message": "NXP-28502: deprecate TrashService#getDocuments", "committedDate": "2020-02-17T11:16:56Z", "type": "forcePushed"}]}