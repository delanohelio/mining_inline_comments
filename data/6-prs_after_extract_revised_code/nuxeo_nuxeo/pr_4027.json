{"pr_number": 4027, "pr_title": "NXP-29098: new migration object", "pr_createdAt": "2020-05-14T10:05:30Z", "pr_url": "https://github.com/nuxeo/nuxeo/pull/4027", "timeline": [{"oid": "8c5c5a8c09ad0faa0162142c5e199cb3243f9b8f", "url": "https://github.com/nuxeo/nuxeo/commit/8c5c5a8c09ad0faa0162142c5e199cb3243f9b8f", "message": "NXP-29098: new migration object", "committedDate": "2020-05-14T10:29:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA1OTI4Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r425059283", "bodyText": "You shouldn't use this exception from javax.resource.spi.", "author": "efge", "createdAt": "2020-05-14T11:16:08Z", "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationService.java", "diffHunk": "@@ -18,6 +18,10 @@\n  */\n package org.nuxeo.runtime.migration;\n \n+import java.util.List;\n+\n+import javax.resource.spi.IllegalStateException;", "originalCommit": "8c5c5a8c09ad0faa0162142c5e199cb3243f9b8f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMwMjE1Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r425302157", "bodyText": "I'm a bit lost about what to use as I can't access NuxeoException. I put RuntimeException wdyt ?", "author": "NourNuxeo", "createdAt": "2020-05-14T17:15:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA1OTI4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMyMjAxNA==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r425322014", "bodyText": "java.lang.IllegalStateException would be ok. Or use org.nuxeo.runtime.RuntimeServiceException if you want a nuxeo-specific exception but not for the signature as it's too generic.", "author": "efge", "createdAt": "2020-05-14T17:46:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA1OTI4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMyMzEzNw==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r425323137", "bodyText": "If no caller is really expected to catch the exception and do special treatment, don't do anything in the signature and just throw RuntimeServiceException or IllegalStateException from the code in question.", "author": "efge", "createdAt": "2020-05-14T17:48:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA1OTI4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMyOTU0NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r425329545", "bodyText": "Thanks!", "author": "NourNuxeo", "createdAt": "2020-05-14T17:58:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA1OTI4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "55b817a7ec69ca09836a971ef4a14fb637a7e594", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationService.java b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationService.java\nindex e9308cb5ae5..192220d6271 100644\n--- a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationService.java\n+++ b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationService.java\n\n@@ -20,8 +20,6 @@ package org.nuxeo.runtime.migration;\n \n import java.util.List;\n \n-import javax.resource.spi.IllegalStateException;\n-\n /**\n  * Migration Service.\n  *\n"}}, {"oid": "df64c9313a5817b7cbc4fa88279a7db327c2e4a3", "url": "https://github.com/nuxeo/nuxeo/commit/df64c9313a5817b7cbc4fa88279a7db327c2e4a3", "message": "TEMP", "committedDate": "2020-05-14T17:14:40Z", "type": "forcePushed"}, {"oid": "f870430636cd49ac55c7569c188bb5bd77602b24", "url": "https://github.com/nuxeo/nuxeo/commit/f870430636cd49ac55c7569c188bb5bd77602b24", "message": "NXP-29098: new migration object", "committedDate": "2020-05-14T18:57:44Z", "type": "forcePushed"}, {"oid": "9a1ba7ec4b868152c4d193842eb520c2dfbb795f", "url": "https://github.com/nuxeo/nuxeo/commit/9a1ba7ec4b868152c4d193842eb520c2dfbb795f", "message": "NXP-29098: new migration object", "committedDate": "2020-05-14T19:00:42Z", "type": "forcePushed"}, {"oid": "ce034af249b47d0cd8a3afb799b8a85fcdec110a", "url": "https://github.com/nuxeo/nuxeo/commit/ce034af249b47d0cd8a3afb799b8a85fcdec110a", "message": "NXP-29098: new migration object", "committedDate": "2020-05-15T12:39:57Z", "type": "forcePushed"}, {"oid": "baccfa9c38ec1a5476cd1615d79eba307574bec3", "url": "https://github.com/nuxeo/nuxeo/commit/baccfa9c38ec1a5476cd1615d79eba307574bec3", "message": "NXP-29098: new migration object", "committedDate": "2020-05-15T12:43:56Z", "type": "forcePushed"}, {"oid": "4e284588675c14fa0ffaa0ec6b7708a9d19fdf11", "url": "https://github.com/nuxeo/nuxeo/commit/4e284588675c14fa0ffaa0ec6b7708a9d19fdf11", "message": "NXP-29098: new migration object", "committedDate": "2020-05-15T12:44:51Z", "type": "forcePushed"}, {"oid": "719a30addcb88122aa5fb1f939f1f73ce6f48050", "url": "https://github.com/nuxeo/nuxeo/commit/719a30addcb88122aa5fb1f939f1f73ce6f48050", "message": "NXP-29098: new migration object", "committedDate": "2020-05-15T12:45:55Z", "type": "forcePushed"}, {"oid": "77dda1c76278af73dd4fa6e2de893b1b8728c0d0", "url": "https://github.com/nuxeo/nuxeo/commit/77dda1c76278af73dd4fa6e2de893b1b8728c0d0", "message": "NXP-29098: new migration object", "committedDate": "2020-05-15T12:51:16Z", "type": "forcePushed"}, {"oid": "2204f1bfa8467700aceced2a6533d672a7583914", "url": "https://github.com/nuxeo/nuxeo/commit/2204f1bfa8467700aceced2a6533d672a7583914", "message": "NXP-29098: new migration object", "committedDate": "2020-05-15T12:56:19Z", "type": "forcePushed"}, {"oid": "55b817a7ec69ca09836a971ef4a14fb637a7e594", "url": "https://github.com/nuxeo/nuxeo/commit/55b817a7ec69ca09836a971ef4a14fb637a7e594", "message": "NXP-29098: new migration object", "committedDate": "2020-05-15T13:06:01Z", "type": "forcePushed"}, {"oid": "92c2ae3cea867a337645abaab21655d9a8ada3f8", "url": "https://github.com/nuxeo/nuxeo/commit/92c2ae3cea867a337645abaab21655d9a8ada3f8", "message": "NXP-29098: new migration object", "committedDate": "2020-05-15T13:13:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEyNDEzOQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428124139", "bodyText": "I would have put this in nuxeo-runtime-migration, what's preventing this?", "author": "kevinleturc", "createdAt": "2020-05-20T15:54:48Z", "path": "modules/core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/migration/test/TestMigrationService.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+\n+package org.nuxeo.ecm.core.migration.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.ecm.core.test.MigrationFeature;\n+import org.nuxeo.runtime.migration.Migration;\n+import org.nuxeo.runtime.migration.MigrationService;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features({ CoreFeature.class, MigrationFeature.class, TransactionalFeature.class })\n+public class TestMigrationService {", "originalCommit": "c0c77d054898ec7a59bc35b08a50abf06822c8b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIxODUzMA==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428218530", "bodyText": "Because you added MigrationFeature to nuxeo-core-test probably :p", "author": "troger", "createdAt": "2020-05-20T18:25:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEyNDEzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM4Njc4MA==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r430386780", "bodyText": "Because I wanted to test a real migration, is it the case there?", "author": "kevinleturc", "createdAt": "2020-05-26T12:50:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEyNDEzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE1NjUyMw==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r431156523", "bodyText": "Works fine now in nuxeo-runtime-migration (no more MigrationFeature#await)", "author": "NourNuxeo", "createdAt": "2020-05-27T14:03:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEyNDEzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "35f9785a182e5e6f3269a591216fb96696501171", "chunk": "diff --git a/modules/core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/migration/test/TestMigrationService.java b/modules/core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/migration/test/TestMigrationService.java\nindex 609a3d0c1e8..ba36627e086 100644\n--- a/modules/core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/migration/test/TestMigrationService.java\n+++ b/modules/core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/migration/test/TestMigrationService.java\n\n@@ -20,6 +20,7 @@\n package org.nuxeo.ecm.core.migration.test;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.fail;\n \n import javax.inject.Inject;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEyNjIzNQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428126235", "bodyText": "You shouldn't leverage external things. Declare your own migration, deploy it, and use it.", "author": "kevinleturc", "createdAt": "2020-05-20T15:57:43Z", "path": "modules/core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/migration/test/TestMigrationService.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+\n+package org.nuxeo.ecm.core.migration.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.ecm.core.test.MigrationFeature;\n+import org.nuxeo.runtime.migration.Migration;\n+import org.nuxeo.runtime.migration.MigrationService;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features({ CoreFeature.class, MigrationFeature.class, TransactionalFeature.class })\n+public class TestMigrationService {\n+\n+    @Inject\n+    protected TransactionalFeature txFeature;\n+\n+    @Inject\n+    protected MigrationService migrationService;\n+\n+    @Test\n+    public void testGetMigrations() {\n+        var migrations = migrationService.getMigrations();\n+        assertEquals(2, migrations.size());\n+    }\n+\n+    @Test\n+    public void testGetMigration() {\n+        Migration migration = migrationService.getMigration(\"trash-storage\");\n+        assertEquals(migration.getId(), \"trash-storage\");\n+        assertEquals(migration.getDescription(), \"Migration of in the trash storage model\");\n+        assertEquals(migration.getLabel(), \"migration.trash-storage\");\n+        assertEquals(migration.getStatus().getState(), \"property\");\n+        assertEquals(migration.getSteps().get(\"lifecycle-to-property\").getDescription(),\n+                \"Migrate trashed state from lifecycle to property\");\n+\n+    }", "originalCommit": "c0c77d054898ec7a59bc35b08a50abf06822c8b5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "35f9785a182e5e6f3269a591216fb96696501171", "chunk": "diff --git a/modules/core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/migration/test/TestMigrationService.java b/modules/core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/migration/test/TestMigrationService.java\nindex 609a3d0c1e8..ba36627e086 100644\n--- a/modules/core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/migration/test/TestMigrationService.java\n+++ b/modules/core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/migration/test/TestMigrationService.java\n\n@@ -20,6 +20,7 @@\n package org.nuxeo.ecm.core.migration.test;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.fail;\n \n import javax.inject.Inject;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEyNzIzMw==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428127233", "bodyText": "testGetMigrations should be sandboxed and it should declare its own migration and assert it fully (not just the size).", "author": "kevinleturc", "createdAt": "2020-05-20T15:59:07Z", "path": "modules/core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/migration/test/TestMigrationService.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+\n+package org.nuxeo.ecm.core.migration.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.ecm.core.test.MigrationFeature;\n+import org.nuxeo.runtime.migration.Migration;\n+import org.nuxeo.runtime.migration.MigrationService;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features({ CoreFeature.class, MigrationFeature.class, TransactionalFeature.class })\n+public class TestMigrationService {\n+\n+    @Inject\n+    protected TransactionalFeature txFeature;\n+\n+    @Inject\n+    protected MigrationService migrationService;\n+\n+    @Test\n+    public void testGetMigrations() {\n+        var migrations = migrationService.getMigrations();\n+        assertEquals(2, migrations.size());\n+    }", "originalCommit": "c0c77d054898ec7a59bc35b08a50abf06822c8b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIxOTUyMw==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428219523", "bodyText": "Agree, the dummy one is here for that.", "author": "troger", "createdAt": "2020-05-20T18:26:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEyNzIzMw=="}], "type": "inlineReview", "revised_code": {"commit": "35f9785a182e5e6f3269a591216fb96696501171", "chunk": "diff --git a/modules/core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/migration/test/TestMigrationService.java b/modules/core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/migration/test/TestMigrationService.java\nindex 609a3d0c1e8..ba36627e086 100644\n--- a/modules/core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/migration/test/TestMigrationService.java\n+++ b/modules/core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/migration/test/TestMigrationService.java\n\n@@ -20,6 +20,7 @@\n package org.nuxeo.ecm.core.migration.test;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.fail;\n \n import javax.inject.Inject;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEyNzk3Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428127977", "bodyText": "Too expensive for a toString imho.", "author": "kevinleturc", "createdAt": "2020-05-20T16:00:08Z", "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/Migration.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+package org.nuxeo.runtime.migration;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import org.nuxeo.runtime.migration.MigrationDescriptor.MigrationStepDescriptor;\n+import org.nuxeo.runtime.migration.MigrationService.MigrationStatus;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class Migration {\n+\n+    protected String id;\n+\n+    protected String description;\n+\n+    protected String label;\n+\n+    protected MigrationStatus status;\n+\n+    protected Map<String, MigrationStepDescriptor> steps;\n+\n+    public Migration(String id, String description, String label, MigrationStatus status,\n+            Map<String, MigrationStepDescriptor> steps) {\n+        this.id = id;\n+        this.description = description;\n+        this.label = label;\n+        this.steps = steps;\n+        this.status = status;\n+    }\n+\n+    public String getId() {\n+        return id;\n+    }\n+\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    public String getLabel() {\n+        return label;\n+    }\n+\n+    public MigrationStatus getStatus() {\n+        return status;\n+    }\n+\n+    public Map<String, MigrationStepDescriptor> getSteps() {\n+        return steps;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        String[] stepsArray = steps.entrySet()\n+                                   .stream()\n+                                   .map(e -> \"'\" + e.getKey() + \"' : \" + \"'\" + e.getValue().getDescription() + \"'\")\n+                                   .toArray(String[]::new);\n+        return \"Migration: [id: '\" + id + \"', description: '\" + description + \"', label: '\" + label + \"', status: '\"\n+                + status.getState() + \"', steps: \" + Arrays.toString(stepsArray) + \"]\";\n+    }", "originalCommit": "c0c77d054898ec7a59bc35b08a50abf06822c8b5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "35f9785a182e5e6f3269a591216fb96696501171", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/Migration.java b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/Migration.java\nindex 644fe246ce1..5a354fd43b1 100644\n--- a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/Migration.java\n+++ b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/Migration.java\n\n@@ -18,7 +18,6 @@\n  */\n package org.nuxeo.runtime.migration;\n \n-import java.util.Arrays;\n import java.util.Map;\n \n import org.nuxeo.runtime.migration.MigrationDescriptor.MigrationStepDescriptor;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEyODEwNA==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428128104", "bodyText": "Missing final", "author": "kevinleturc", "createdAt": "2020-05-20T16:00:19Z", "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationConstants.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+package org.nuxeo.runtime.migration;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class MigrationConstants {", "originalCommit": "c0c77d054898ec7a59bc35b08a50abf06822c8b5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "35f9785a182e5e6f3269a591216fb96696501171", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationConstants.java b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationConstants.java\ndeleted file mode 100644\nindex 039337e9bb1..00000000000\n--- a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationConstants.java\n+++ /dev/null\n\n@@ -1,42 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Nour AL KOTOB\n- */\n-package org.nuxeo.runtime.migration;\n-\n-/**\n- * @since 11.1\n- */\n-public class MigrationConstants {\n-\n-    public static final String MIGRATION_ENTITY_TYPE = \"migration\";\n-\n-    public static final String MIGRATION_ID = \"id\";\n-\n-    public static final String MIGRATION_DESCRIPTION = \"description\";\n-\n-    public static final String MIGRATION_DESCRIPTION_LABEL = \"description.label\";\n-\n-    public static final String MIGRATION_STATUS = \"status\";\n-\n-    public static final String MIGRATION_STEPS = \"steps\";\n-\n-    private MigrationConstants() {\n-        // constants class\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEyOTU5MA==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428129590", "bodyText": "Isn't a problem for javascript when it comes to reading this property (due to .)?", "author": "kevinleturc", "createdAt": "2020-05-20T16:02:26Z", "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationConstants.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+package org.nuxeo.runtime.migration;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class MigrationConstants {\n+\n+    public static final String MIGRATION_ENTITY_TYPE = \"migration\";\n+\n+    public static final String MIGRATION_ID = \"id\";\n+\n+    public static final String MIGRATION_DESCRIPTION = \"description\";\n+\n+    public static final String MIGRATION_DESCRIPTION_LABEL = \"description.label\";", "originalCommit": "c0c77d054898ec7a59bc35b08a50abf06822c8b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIyMDYwMg==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428220602", "bodyText": "\ud83d\udc4d should be descriptionLabel as what we do on other writers.", "author": "troger", "createdAt": "2020-05-20T18:28:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEyOTU5MA=="}], "type": "inlineReview", "revised_code": {"commit": "35f9785a182e5e6f3269a591216fb96696501171", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationConstants.java b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationConstants.java\ndeleted file mode 100644\nindex 039337e9bb1..00000000000\n--- a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationConstants.java\n+++ /dev/null\n\n@@ -1,42 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Nour AL KOTOB\n- */\n-package org.nuxeo.runtime.migration;\n-\n-/**\n- * @since 11.1\n- */\n-public class MigrationConstants {\n-\n-    public static final String MIGRATION_ENTITY_TYPE = \"migration\";\n-\n-    public static final String MIGRATION_ID = \"id\";\n-\n-    public static final String MIGRATION_DESCRIPTION = \"description\";\n-\n-    public static final String MIGRATION_DESCRIPTION_LABEL = \"description.label\";\n-\n-    public static final String MIGRATION_STATUS = \"status\";\n-\n-    public static final String MIGRATION_STEPS = \"steps\";\n-\n-    private MigrationConstants() {\n-        // constants class\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEzMjMyNw==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428132327", "bodyText": "Is it possible to move it next to runStep, ideally before it, in order to gather related methods.", "author": "kevinleturc", "createdAt": "2020-05-20T16:06:26Z", "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationService.java", "diffHunk": "@@ -234,4 +237,28 @@ public long getProgressTotal() {\n      */\n     void runStep(String id, String step);\n \n+    /**\n+     * @since 11.1\n+     */\n+    Migration getMigration(String id);\n+\n+    /**\n+     * @since 11.1\n+     */\n+    List<Migration> getMigrations();\n+\n+    /**\n+     * @throws IllegalStateException if the migration doesn't have exactly one available step to run.\n+     * @since 11.1\n+     */\n+    void run(String migrationId) throws IllegalArgumentException;", "originalCommit": "c0c77d054898ec7a59bc35b08a50abf06822c8b5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "35f9785a182e5e6f3269a591216fb96696501171", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationService.java b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationService.java\nindex 933700aa6d6..84617c7b942 100644\n--- a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationService.java\n+++ b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationService.java\n\n@@ -237,28 +261,4 @@ public interface MigrationService {\n      */\n     void runStep(String id, String step);\n \n-    /**\n-     * @since 11.1\n-     */\n-    Migration getMigration(String id);\n-\n-    /**\n-     * @since 11.1\n-     */\n-    List<Migration> getMigrations();\n-\n-    /**\n-     * @throws IllegalStateException if the migration doesn't have exactly one available step to run.\n-     * @since 11.1\n-     */\n-    void run(String migrationId) throws IllegalArgumentException;\n-\n-    /**\n-     * Waits for completion of all migration steps.\n-     *\n-     * @return {@code true} if the migration executor has no more threads running {@code false} otherwise\n-     * @since 11.1\n-     */\n-    boolean await(Duration duration) throws InterruptedException;\n-\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEzNjk4OA==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428136988", "bodyText": "Not sure we want this API, we don't have migration to wait during tests, and current migration tests don't need it.\nSuch APIs are a pain when they become available to the world. Here you may want it for tests, but later someone will ask you to make it work in a Nuxeo Cluster... Because it's public on an interface.", "author": "kevinleturc", "createdAt": "2020-05-20T16:13:24Z", "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationService.java", "diffHunk": "@@ -234,4 +237,28 @@ public long getProgressTotal() {\n      */\n     void runStep(String id, String step);\n \n+    /**\n+     * @since 11.1\n+     */\n+    Migration getMigration(String id);\n+\n+    /**\n+     * @since 11.1\n+     */\n+    List<Migration> getMigrations();\n+\n+    /**\n+     * @throws IllegalStateException if the migration doesn't have exactly one available step to run.\n+     * @since 11.1\n+     */\n+    void run(String migrationId) throws IllegalArgumentException;\n+\n+    /**\n+     * Waits for completion of all migration steps.\n+     *\n+     * @return {@code true} if the migration executor has no more threads running {@code false} otherwise\n+     * @since 11.1\n+     */\n+    boolean await(Duration duration) throws InterruptedException;", "originalCommit": "c0c77d054898ec7a59bc35b08a50abf06822c8b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIwMzUzMA==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428203530", "bodyText": "I implemented it because in this new test I need to wait \n  \n    \n      nuxeo/modules/core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/migration/test/TestMigrationService.java\n    \n    \n         Line 72\n      in\n      c0c77d0\n    \n    \n    \n    \n\n        \n          \n           txFeature.nextTransaction(); \n        \n    \n  \n\n\nFirst when I saw nextTransaction() was not helping I did Thread.sleep(1000) for the test to pass. Otherwise it will fail. Shall I get back to this solution ?", "author": "NourNuxeo", "createdAt": "2020-05-20T17:58:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEzNjk4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIyMzI5Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428223297", "bodyText": "If we don't want to expose it publicly, I would put that method only on the implementation class stating it's for test purposes, and use it in the test.\nDoes that sound good @kevinleturc ?", "author": "troger", "createdAt": "2020-05-20T18:32:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEzNjk4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM5MTM5NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r430391395", "bodyText": "Sounds good to have a protected method on the implementation only.\nNot sure I, the end if we want the waiter, we control the migration start/stop, to discuss.", "author": "kevinleturc", "createdAt": "2020-05-26T12:57:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEzNjk4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU0ODczMQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r430548731", "bodyText": "if it is protected we can't call it in the MigrationFeature#initialize\nThis is not used anymore", "author": "NourNuxeo", "createdAt": "2020-05-26T16:32:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEzNjk4OA=="}], "type": "inlineReview", "revised_code": {"commit": "35f9785a182e5e6f3269a591216fb96696501171", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationService.java b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationService.java\nindex 933700aa6d6..84617c7b942 100644\n--- a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationService.java\n+++ b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationService.java\n\n@@ -237,28 +261,4 @@ public interface MigrationService {\n      */\n     void runStep(String id, String step);\n \n-    /**\n-     * @since 11.1\n-     */\n-    Migration getMigration(String id);\n-\n-    /**\n-     * @since 11.1\n-     */\n-    List<Migration> getMigrations();\n-\n-    /**\n-     * @throws IllegalStateException if the migration doesn't have exactly one available step to run.\n-     * @since 11.1\n-     */\n-    void run(String migrationId) throws IllegalArgumentException;\n-\n-    /**\n-     * Waits for completion of all migration steps.\n-     *\n-     * @return {@code true} if the migration executor has no more threads running {@code false} otherwise\n-     * @since 11.1\n-     */\n-    boolean await(Duration duration) throws InterruptedException;\n-\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEzNzUzNQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428137535", "bodyText": "Format", "author": "kevinleturc", "createdAt": "2020-05-20T16:14:15Z", "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java", "diffHunk": "@@ -529,4 +533,55 @@ protected void atomic(String id, Consumer<KeyValueStore> consumer) {\n         throw new RuntimeException(\"Cannot lock for write migration: \" + id + \", already locked: \" + currentLock);\n     }\n \n+    @Override\n+    public Migration getMigration(String id) {\n+        MigrationDescriptor descriptor = getDescriptor(XP_CONFIG, id);\n+        return new Migration(id, descriptor.getDescription(), descriptor.getDescriptionLabel(), getStatus(id),\n+                descriptor.getSteps());\n+    }\n+\n+    @Override\n+    public List<Migration> getMigrations() {\n+        var descriptors = getDescriptors(XP_CONFIG);\n+        return descriptors.stream().map(d -> getMigration(d.getId())).collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public void run(String migrationId) {\n+        if(getStatus(migrationId) == null) {", "originalCommit": "c0c77d054898ec7a59bc35b08a50abf06822c8b5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "35f9785a182e5e6f3269a591216fb96696501171", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java\nindex 140e02614f6..bf5826b2774 100644\n--- a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java\n+++ b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java\n\n@@ -536,8 +536,11 @@ public class MigrationServiceImpl extends DefaultComponent implements MigrationS\n     @Override\n     public Migration getMigration(String id) {\n         MigrationDescriptor descriptor = getDescriptor(XP_CONFIG, id);\n+        if (descriptor == null) {\n+            return null;\n+        }\n         return new Migration(id, descriptor.getDescription(), descriptor.getDescriptionLabel(), getStatus(id),\n-                descriptor.getSteps());\n+                getAvailableSteps(descriptor));\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEzODAxMA==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428138010", "bodyText": "Format", "author": "kevinleturc", "createdAt": "2020-05-20T16:14:59Z", "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java", "diffHunk": "@@ -529,4 +533,55 @@ protected void atomic(String id, Consumer<KeyValueStore> consumer) {\n         throw new RuntimeException(\"Cannot lock for write migration: \" + id + \", already locked: \" + currentLock);\n     }\n \n+    @Override\n+    public Migration getMigration(String id) {\n+        MigrationDescriptor descriptor = getDescriptor(XP_CONFIG, id);\n+        return new Migration(id, descriptor.getDescription(), descriptor.getDescriptionLabel(), getStatus(id),\n+                descriptor.getSteps());\n+    }\n+\n+    @Override\n+    public List<Migration> getMigrations() {\n+        var descriptors = getDescriptors(XP_CONFIG);\n+        return descriptors.stream().map(d -> getMigration(d.getId())).collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public void run(String migrationId) {\n+        if(getStatus(migrationId) == null) {\n+            probeAndSetState(migrationId);\n+        }\n+        MigrationDescriptor descriptor = getDescriptor(XP_CONFIG, migrationId);\n+        Set<MigrationStepDescriptor> availableSteps = getAvailableSteps(descriptor);\n+        if(availableSteps.size() != 1) {", "originalCommit": "c0c77d054898ec7a59bc35b08a50abf06822c8b5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "35f9785a182e5e6f3269a591216fb96696501171", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java\nindex 140e02614f6..bf5826b2774 100644\n--- a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java\n+++ b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java\n\n@@ -536,8 +536,11 @@ public class MigrationServiceImpl extends DefaultComponent implements MigrationS\n     @Override\n     public Migration getMigration(String id) {\n         MigrationDescriptor descriptor = getDescriptor(XP_CONFIG, id);\n+        if (descriptor == null) {\n+            return null;\n+        }\n         return new Migration(id, descriptor.getDescription(), descriptor.getDescriptionLabel(), getStatus(id),\n-                descriptor.getSteps());\n+                getAvailableSteps(descriptor));\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEzOTkzMQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428139931", "bodyText": "Is it possible to add javadoc to explain what this method does?", "author": "kevinleturc", "createdAt": "2020-05-20T16:17:50Z", "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationService.java", "diffHunk": "@@ -234,4 +237,28 @@ public long getProgressTotal() {\n      */\n     void runStep(String id, String step);\n \n+    /**\n+     * @since 11.1\n+     */\n+    Migration getMigration(String id);\n+\n+    /**\n+     * @since 11.1\n+     */\n+    List<Migration> getMigrations();\n+\n+    /**", "originalCommit": "c0c77d054898ec7a59bc35b08a50abf06822c8b5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "35f9785a182e5e6f3269a591216fb96696501171", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationService.java b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationService.java\nindex 933700aa6d6..84617c7b942 100644\n--- a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationService.java\n+++ b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationService.java\n\n@@ -237,28 +261,4 @@ public interface MigrationService {\n      */\n     void runStep(String id, String step);\n \n-    /**\n-     * @since 11.1\n-     */\n-    Migration getMigration(String id);\n-\n-    /**\n-     * @since 11.1\n-     */\n-    List<Migration> getMigrations();\n-\n-    /**\n-     * @throws IllegalStateException if the migration doesn't have exactly one available step to run.\n-     * @since 11.1\n-     */\n-    void run(String migrationId) throws IllegalArgumentException;\n-\n-    /**\n-     * Waits for completion of all migration steps.\n-     *\n-     * @return {@code true} if the migration executor has no more threads running {@code false} otherwise\n-     * @since 11.1\n-     */\n-    boolean await(Duration duration) throws InterruptedException;\n-\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE0MjIxOA==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428142218", "bodyText": "This method is synchronous and could take a lot of time as explained in its Javadoc. This could be problematic when using it through REST.", "author": "kevinleturc", "createdAt": "2020-05-20T16:21:16Z", "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java", "diffHunk": "@@ -529,4 +533,55 @@ protected void atomic(String id, Consumer<KeyValueStore> consumer) {\n         throw new RuntimeException(\"Cannot lock for write migration: \" + id + \", already locked: \" + currentLock);\n     }\n \n+    @Override\n+    public Migration getMigration(String id) {\n+        MigrationDescriptor descriptor = getDescriptor(XP_CONFIG, id);\n+        return new Migration(id, descriptor.getDescription(), descriptor.getDescriptionLabel(), getStatus(id),\n+                descriptor.getSteps());\n+    }\n+\n+    @Override\n+    public List<Migration> getMigrations() {\n+        var descriptors = getDescriptors(XP_CONFIG);\n+        return descriptors.stream().map(d -> getMigration(d.getId())).collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public void run(String migrationId) {\n+        if(getStatus(migrationId) == null) {\n+            probeAndSetState(migrationId);", "originalCommit": "c0c77d054898ec7a59bc35b08a50abf06822c8b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIwNDUwMA==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428204500", "bodyText": "Yes that may be why when I run and directly probe, I get an old result if I don't manually wait", "author": "NourNuxeo", "createdAt": "2020-05-20T18:00:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE0MjIxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIyNDg0OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428224849", "bodyText": "We agreed to have the #run method probing the migration to have only one call to do from the outside. However, like in the #probeAndSetState method Javadoc, it should be stated clearly in the #run method Javadoc.", "author": "troger", "createdAt": "2020-05-20T18:33:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE0MjIxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA2Nzg0NA==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r431067844", "bodyText": "now probeAndRun with javadoc in the API:\n     /**\n     * Probes the migration state if necessary and runs a migration.\n     * THIS METHOD MAY TAKE A WHILE as it may call {@link #probeAndSetState(String)}.\n     *\n     * @since 11.1\n     */", "author": "NourNuxeo", "createdAt": "2020-05-27T12:10:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE0MjIxOA=="}], "type": "inlineReview", "revised_code": {"commit": "35f9785a182e5e6f3269a591216fb96696501171", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java\nindex 140e02614f6..bf5826b2774 100644\n--- a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java\n+++ b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java\n\n@@ -536,8 +536,11 @@ public class MigrationServiceImpl extends DefaultComponent implements MigrationS\n     @Override\n     public Migration getMigration(String id) {\n         MigrationDescriptor descriptor = getDescriptor(XP_CONFIG, id);\n+        if (descriptor == null) {\n+            return null;\n+        }\n         return new Migration(id, descriptor.getDescription(), descriptor.getDescriptionLabel(), getStatus(id),\n-                descriptor.getSteps());\n+                getAvailableSteps(descriptor));\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE0NjI4MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428146281", "bodyText": "MigrationStepDescriptor step = descriptor.getSteps().values().stream().filter(v -> status.getState().equals(v.getFromState())).collect(Collectors.reducing((a, b) -> null)).orElseThrow(() -> new IllegalStateException(String.format(\"Migration %s needs to have exactly one step to run\", migrationId)));", "author": "kevinleturc", "createdAt": "2020-05-20T16:27:49Z", "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java", "diffHunk": "@@ -529,4 +533,55 @@ protected void atomic(String id, Consumer<KeyValueStore> consumer) {\n         throw new RuntimeException(\"Cannot lock for write migration: \" + id + \", already locked: \" + currentLock);\n     }\n \n+    @Override\n+    public Migration getMigration(String id) {\n+        MigrationDescriptor descriptor = getDescriptor(XP_CONFIG, id);\n+        return new Migration(id, descriptor.getDescription(), descriptor.getDescriptionLabel(), getStatus(id),\n+                descriptor.getSteps());\n+    }\n+\n+    @Override\n+    public List<Migration> getMigrations() {\n+        var descriptors = getDescriptors(XP_CONFIG);\n+        return descriptors.stream().map(d -> getMigration(d.getId())).collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public void run(String migrationId) {\n+        if(getStatus(migrationId) == null) {\n+            probeAndSetState(migrationId);\n+        }\n+        MigrationDescriptor descriptor = getDescriptor(XP_CONFIG, migrationId);\n+        Set<MigrationStepDescriptor> availableSteps = getAvailableSteps(descriptor);\n+        if(availableSteps.size() != 1) {\n+            throw new IllegalStateException(String.format(\"Migration %s needs to have exactly one step to run\", migrationId));\n+        } else {\n+            runStep(migrationId, availableSteps.iterator().next().getId());\n+        }\n+    }\n+\n+    protected Set<MigrationStepDescriptor> getAvailableSteps(MigrationDescriptor descriptor) {\n+        MigrationStatus status = getStatus(descriptor.getId());\n+        return descriptor.getSteps()\n+                         .entrySet()\n+                         .stream()\n+                         .filter(e -> e.getValue().getFromState().equals(status.getState()))\n+                         .map(Entry::getValue)\n+                         .collect(Collectors.toSet());\n+    }", "originalCommit": "c0c77d054898ec7a59bc35b08a50abf06822c8b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMxMDYzNQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r430310635", "bodyText": "Then I would call the method get{Only | Single}AvailableStep ?", "author": "NourNuxeo", "createdAt": "2020-05-26T10:25:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE0NjI4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM0NzA5Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r430347092", "bodyText": "there is actually another case where we need to get all available steps: #4027 (comment)\nI think staying in a method that doesn't fail if it finds several steps is more flexible. What do you think", "author": "NourNuxeo", "createdAt": "2020-05-26T11:37:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE0NjI4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM5Njc5OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r430396799", "bodyText": "Don't we want to fail if there'are several steps in this case? I'm not sure the returned Set will be useful for the other case.", "author": "kevinleturc", "createdAt": "2020-05-26T13:06:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE0NjI4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU1MDc3OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r430550779", "bodyText": "This method is no longer here. The logic is encapsulated in Migration and gets a List<MigrationStep>\nPlease disregard the quoted answer\n\nYes we want to fail.\nI changed to a map for the other case, then it can fit the argument.\nOtherwise I would have to make 2 methods, 1 to get a single step and fail otherwise and another 1 to get all available steps", "author": "NourNuxeo", "createdAt": "2020-05-26T16:35:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE0NjI4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "35f9785a182e5e6f3269a591216fb96696501171", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java\nindex 140e02614f6..bf5826b2774 100644\n--- a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java\n+++ b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java\n\n@@ -536,8 +536,11 @@ public class MigrationServiceImpl extends DefaultComponent implements MigrationS\n     @Override\n     public Migration getMigration(String id) {\n         MigrationDescriptor descriptor = getDescriptor(XP_CONFIG, id);\n+        if (descriptor == null) {\n+            return null;\n+        }\n         return new Migration(id, descriptor.getDescription(), descriptor.getDescriptionLabel(), getStatus(id),\n-                descriptor.getSteps());\n+                getAvailableSteps(descriptor));\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE0ODA4MA==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428148080", "bodyText": "See my comment on the interface.\nFor the cluster aspect, if you don't reach the node doing the migration, you won't await I think.", "author": "kevinleturc", "createdAt": "2020-05-20T16:30:37Z", "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java", "diffHunk": "@@ -529,4 +533,55 @@ protected void atomic(String id, Consumer<KeyValueStore> consumer) {\n         throw new RuntimeException(\"Cannot lock for write migration: \" + id + \", already locked: \" + currentLock);\n     }\n \n+    @Override\n+    public Migration getMigration(String id) {\n+        MigrationDescriptor descriptor = getDescriptor(XP_CONFIG, id);\n+        return new Migration(id, descriptor.getDescription(), descriptor.getDescriptionLabel(), getStatus(id),\n+                descriptor.getSteps());\n+    }\n+\n+    @Override\n+    public List<Migration> getMigrations() {\n+        var descriptors = getDescriptors(XP_CONFIG);\n+        return descriptors.stream().map(d -> getMigration(d.getId())).collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public void run(String migrationId) {\n+        if(getStatus(migrationId) == null) {\n+            probeAndSetState(migrationId);\n+        }\n+        MigrationDescriptor descriptor = getDescriptor(XP_CONFIG, migrationId);\n+        Set<MigrationStepDescriptor> availableSteps = getAvailableSteps(descriptor);\n+        if(availableSteps.size() != 1) {\n+            throw new IllegalStateException(String.format(\"Migration %s needs to have exactly one step to run\", migrationId));\n+        } else {\n+            runStep(migrationId, availableSteps.iterator().next().getId());\n+        }\n+    }\n+\n+    protected Set<MigrationStepDescriptor> getAvailableSteps(MigrationDescriptor descriptor) {\n+        MigrationStatus status = getStatus(descriptor.getId());\n+        return descriptor.getSteps()\n+                         .entrySet()\n+                         .stream()\n+                         .filter(e -> e.getValue().getFromState().equals(status.getState()))\n+                         .map(Entry::getValue)\n+                         .collect(Collectors.toSet());\n+    }\n+\n+    @Override\n+    public boolean await(Duration duration) throws InterruptedException {\n+        long deadline = System.nanoTime() + duration.toNanos();\n+        for (;;) {\n+            if (executor.getActiveCount() == 0) {\n+                return true;\n+            }\n+            Thread.sleep(100);\n+            if (deadline < System.nanoTime()) {\n+                return false;\n+            }\n+        }\n+    }", "originalCommit": "c0c77d054898ec7a59bc35b08a50abf06822c8b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMzMTQ5OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r430331499", "bodyText": "followed #4027 (comment)\nAdded in the javadoc the incompatible cluster aspect: #4027 (comment)\nThis is not used anymore", "author": "NourNuxeo", "createdAt": "2020-05-26T11:05:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE0ODA4MA=="}], "type": "inlineReview", "revised_code": {"commit": "35f9785a182e5e6f3269a591216fb96696501171", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java\nindex 140e02614f6..bf5826b2774 100644\n--- a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java\n+++ b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java\n\n@@ -536,8 +536,11 @@ public class MigrationServiceImpl extends DefaultComponent implements MigrationS\n     @Override\n     public Migration getMigration(String id) {\n         MigrationDescriptor descriptor = getDescriptor(XP_CONFIG, id);\n+        if (descriptor == null) {\n+            return null;\n+        }\n         return new Migration(id, descriptor.getDescription(), descriptor.getDescriptionLabel(), getStatus(id),\n-                descriptor.getSteps());\n+                getAvailableSteps(descriptor));\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEwNzQ0MA==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428107440", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @Features({ TransactionalFeature.class })\n          \n          \n            \n            @Features(TransactionalFeature.class)", "author": "troger", "createdAt": "2020-05-20T15:31:47Z", "path": "modules/core/nuxeo-core-test/src/main/java/org/nuxeo/ecm/core/test/MigrationFeature.java", "diffHunk": "@@ -45,6 +48,7 @@\n  */\n @Deploy(\"org.nuxeo.runtime.kv\")\n @Deploy(\"org.nuxeo.runtime.migration\")\n+@Features({ TransactionalFeature.class })", "originalCommit": "c0c77d054898ec7a59bc35b08a50abf06822c8b5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "35f9785a182e5e6f3269a591216fb96696501171", "chunk": "diff --git a/modules/core/nuxeo-core-test/src/main/java/org/nuxeo/ecm/core/test/MigrationFeature.java b/modules/core/nuxeo-core-test/src/main/java/org/nuxeo/ecm/core/test/MigrationFeature.java\nindex 8ca860686ee..d70208edaf1 100644\n--- a/modules/core/nuxeo-core-test/src/main/java/org/nuxeo/ecm/core/test/MigrationFeature.java\n+++ b/modules/core/nuxeo-core-test/src/main/java/org/nuxeo/ecm/core/test/MigrationFeature.java\n\n@@ -48,7 +49,7 @@ import org.nuxeo.runtime.test.runner.TransactionalFeature;\n  */\n @Deploy(\"org.nuxeo.runtime.kv\")\n @Deploy(\"org.nuxeo.runtime.migration\")\n-@Features({ TransactionalFeature.class })\n+@Features(TransactionalFeature.class)\n public class MigrationFeature implements RunnerFeature {\n \n     protected static final String[] KEYS = { STEP, START_TIME, PING_TIME, PROGRESS_MESSAGE, PROGRESS_NUM,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODExMDM2Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428110367", "bodyText": "Take care of the assertEquals Javadoc... it's always expected, actual.", "author": "troger", "createdAt": "2020-05-20T15:35:42Z", "path": "modules/core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/migration/test/TestMigrationService.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+\n+package org.nuxeo.ecm.core.migration.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.ecm.core.test.MigrationFeature;\n+import org.nuxeo.runtime.migration.Migration;\n+import org.nuxeo.runtime.migration.MigrationService;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features({ CoreFeature.class, MigrationFeature.class, TransactionalFeature.class })\n+public class TestMigrationService {\n+\n+    @Inject\n+    protected TransactionalFeature txFeature;\n+\n+    @Inject\n+    protected MigrationService migrationService;\n+\n+    @Test\n+    public void testGetMigrations() {\n+        var migrations = migrationService.getMigrations();\n+        assertEquals(2, migrations.size());\n+    }\n+\n+    @Test\n+    public void testGetMigration() {\n+        Migration migration = migrationService.getMigration(\"trash-storage\");\n+        assertEquals(migration.getId(), \"trash-storage\");\n+        assertEquals(migration.getDescription(), \"Migration of in the trash storage model\");\n+        assertEquals(migration.getLabel(), \"migration.trash-storage\");\n+        assertEquals(migration.getStatus().getState(), \"property\");\n+        assertEquals(migration.getSteps().get(\"lifecycle-to-property\").getDescription(),", "originalCommit": "c0c77d054898ec7a59bc35b08a50abf06822c8b5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "35f9785a182e5e6f3269a591216fb96696501171", "chunk": "diff --git a/modules/core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/migration/test/TestMigrationService.java b/modules/core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/migration/test/TestMigrationService.java\nindex 609a3d0c1e8..ba36627e086 100644\n--- a/modules/core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/migration/test/TestMigrationService.java\n+++ b/modules/core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/migration/test/TestMigrationService.java\n\n@@ -20,6 +20,7 @@\n package org.nuxeo.ecm.core.migration.test;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.fail;\n \n import javax.inject.Inject;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODExNDEyOQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428114129", "bodyText": "Not used, so it should probably go with the writers?", "author": "troger", "createdAt": "2020-05-20T15:40:45Z", "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationConstants.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+package org.nuxeo.runtime.migration;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class MigrationConstants {", "originalCommit": "c0c77d054898ec7a59bc35b08a50abf06822c8b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM0Mjk0MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r430342941", "bodyText": "Moving it in the Management REST API project", "author": "NourNuxeo", "createdAt": "2020-05-26T11:28:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODExNDEyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "35f9785a182e5e6f3269a591216fb96696501171", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationConstants.java b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationConstants.java\ndeleted file mode 100644\nindex 039337e9bb1..00000000000\n--- a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationConstants.java\n+++ /dev/null\n\n@@ -1,42 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Nour AL KOTOB\n- */\n-package org.nuxeo.runtime.migration;\n-\n-/**\n- * @since 11.1\n- */\n-public class MigrationConstants {\n-\n-    public static final String MIGRATION_ENTITY_TYPE = \"migration\";\n-\n-    public static final String MIGRATION_ID = \"id\";\n-\n-    public static final String MIGRATION_DESCRIPTION = \"description\";\n-\n-    public static final String MIGRATION_DESCRIPTION_LABEL = \"description.label\";\n-\n-    public static final String MIGRATION_STATUS = \"status\";\n-\n-    public static final String MIGRATION_STEPS = \"steps\";\n-\n-    private MigrationConstants() {\n-        // constants class\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODExNDY3MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428114671", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                void run(String migrationId) throws IllegalArgumentException;\n          \n          \n            \n                void run(String id) throws IllegalArgumentException;\n          \n      \n    \n    \n  \n\nConsistency with other methods...", "author": "troger", "createdAt": "2020-05-20T15:41:30Z", "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationService.java", "diffHunk": "@@ -234,4 +237,28 @@ public long getProgressTotal() {\n      */\n     void runStep(String id, String step);\n \n+    /**\n+     * @since 11.1\n+     */\n+    Migration getMigration(String id);\n+\n+    /**\n+     * @since 11.1\n+     */\n+    List<Migration> getMigrations();\n+\n+    /**\n+     * @throws IllegalStateException if the migration doesn't have exactly one available step to run.\n+     * @since 11.1\n+     */\n+    void run(String migrationId) throws IllegalArgumentException;", "originalCommit": "c0c77d054898ec7a59bc35b08a50abf06822c8b5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "35f9785a182e5e6f3269a591216fb96696501171", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationService.java b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationService.java\nindex 933700aa6d6..84617c7b942 100644\n--- a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationService.java\n+++ b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationService.java\n\n@@ -237,28 +261,4 @@ public interface MigrationService {\n      */\n     void runStep(String id, String step);\n \n-    /**\n-     * @since 11.1\n-     */\n-    Migration getMigration(String id);\n-\n-    /**\n-     * @since 11.1\n-     */\n-    List<Migration> getMigrations();\n-\n-    /**\n-     * @throws IllegalStateException if the migration doesn't have exactly one available step to run.\n-     * @since 11.1\n-     */\n-    void run(String migrationId) throws IllegalArgumentException;\n-\n-    /**\n-     * Waits for completion of all migration steps.\n-     *\n-     * @return {@code true} if the migration executor has no more threads running {@code false} otherwise\n-     * @since 11.1\n-     */\n-    boolean await(Duration duration) throws InterruptedException;\n-\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODExNDkwNQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428114905", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return {@code true} if the migration executor has no more threads running {@code false} otherwise\n          \n          \n            \n                 * @return {@code true} if the migration executor has no more threads running, {@code false} otherwise", "author": "troger", "createdAt": "2020-05-20T15:41:48Z", "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationService.java", "diffHunk": "@@ -234,4 +237,28 @@ public long getProgressTotal() {\n      */\n     void runStep(String id, String step);\n \n+    /**\n+     * @since 11.1\n+     */\n+    Migration getMigration(String id);\n+\n+    /**\n+     * @since 11.1\n+     */\n+    List<Migration> getMigrations();\n+\n+    /**\n+     * @throws IllegalStateException if the migration doesn't have exactly one available step to run.\n+     * @since 11.1\n+     */\n+    void run(String migrationId) throws IllegalArgumentException;\n+\n+    /**\n+     * Waits for completion of all migration steps.\n+     *\n+     * @return {@code true} if the migration executor has no more threads running {@code false} otherwise", "originalCommit": "c0c77d054898ec7a59bc35b08a50abf06822c8b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM4MzMxMg==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r430383312", "bodyText": "added some html tags and extra infos:\n     /**\n     * Waits for completion of all migration steps.<br/>\n     * <b>ONLY FOR TEST PURPOSE</b>\n     * <ul>\n     * <li>Not suitable for use in a cluster environment.</li>\n     * <li>Not declared in the API.</li>\n     * </ul>\n     *\n     * @return {@code true} if the migration executor has no more threads running, {@code false} otherwise\n     * @since 11.1\n     */", "author": "NourNuxeo", "createdAt": "2020-05-26T12:44:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODExNDkwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "35f9785a182e5e6f3269a591216fb96696501171", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationService.java b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationService.java\nindex 933700aa6d6..84617c7b942 100644\n--- a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationService.java\n+++ b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationService.java\n\n@@ -237,28 +261,4 @@ public interface MigrationService {\n      */\n     void runStep(String id, String step);\n \n-    /**\n-     * @since 11.1\n-     */\n-    Migration getMigration(String id);\n-\n-    /**\n-     * @since 11.1\n-     */\n-    List<Migration> getMigrations();\n-\n-    /**\n-     * @throws IllegalStateException if the migration doesn't have exactly one available step to run.\n-     * @since 11.1\n-     */\n-    void run(String migrationId) throws IllegalArgumentException;\n-\n-    /**\n-     * Waits for completion of all migration steps.\n-     *\n-     * @return {@code true} if the migration executor has no more threads running {@code false} otherwise\n-     * @since 11.1\n-     */\n-    boolean await(Duration duration) throws InterruptedException;\n-\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIyMTY5Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428221696", "bodyText": "Missing javadoc, and worth moving them before MigrationStatus getStatus(String id);", "author": "troger", "createdAt": "2020-05-20T18:30:26Z", "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationService.java", "diffHunk": "@@ -234,4 +237,28 @@ public long getProgressTotal() {\n      */\n     void runStep(String id, String step);\n \n+    /**\n+     * @since 11.1\n+     */\n+    Migration getMigration(String id);\n+\n+    /**\n+     * @since 11.1\n+     */\n+    List<Migration> getMigrations();", "originalCommit": "c0c77d054898ec7a59bc35b08a50abf06822c8b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ5MTg3OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r430491879", "bodyText": "Now we also return null when the id is not found", "author": "NourNuxeo", "createdAt": "2020-05-26T15:16:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIyMTY5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "35f9785a182e5e6f3269a591216fb96696501171", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationService.java b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationService.java\nindex 933700aa6d6..84617c7b942 100644\n--- a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationService.java\n+++ b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationService.java\n\n@@ -237,28 +261,4 @@ public interface MigrationService {\n      */\n     void runStep(String id, String step);\n \n-    /**\n-     * @since 11.1\n-     */\n-    Migration getMigration(String id);\n-\n-    /**\n-     * @since 11.1\n-     */\n-    List<Migration> getMigrations();\n-\n-    /**\n-     * @throws IllegalStateException if the migration doesn't have exactly one available step to run.\n-     * @since 11.1\n-     */\n-    void run(String migrationId) throws IllegalArgumentException;\n-\n-    /**\n-     * Waits for completion of all migration steps.\n-     *\n-     * @return {@code true} if the migration executor has no more threads running {@code false} otherwise\n-     * @since 11.1\n-     */\n-    boolean await(Duration duration) throws InterruptedException;\n-\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIzMjk3Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428232972", "bodyText": "The steps should be filtered to only return the available steps for the given migration, like what is done on the JSF UI (see https://github.com/nuxeo/nuxeo-jsf-ui/blob/master/code/nuxeo-admin-center-jsf/src/main/java/org/nuxeo/ecm/admin/MigrationAdminBean.java#L49 for instance).", "author": "troger", "createdAt": "2020-05-20T18:44:27Z", "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java", "diffHunk": "@@ -529,4 +533,55 @@ protected void atomic(String id, Consumer<KeyValueStore> consumer) {\n         throw new RuntimeException(\"Cannot lock for write migration: \" + id + \", already locked: \" + currentLock);\n     }\n \n+    @Override\n+    public Migration getMigration(String id) {\n+        MigrationDescriptor descriptor = getDescriptor(XP_CONFIG, id);\n+        return new Migration(id, descriptor.getDescription(), descriptor.getDescriptionLabel(), getStatus(id),\n+                descriptor.getSteps());", "originalCommit": "c0c77d054898ec7a59bc35b08a50abf06822c8b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ0OTY5Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r430449692", "bodyText": "The following answer is outdated:\n\nI made the getAvailableSteps return a map so I can give it here in the constructor and leverage getAvailableSteps", "author": "NourNuxeo", "createdAt": "2020-05-26T14:20:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIzMjk3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "35f9785a182e5e6f3269a591216fb96696501171", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java\nindex 140e02614f6..bf5826b2774 100644\n--- a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java\n+++ b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java\n\n@@ -536,8 +536,11 @@ public class MigrationServiceImpl extends DefaultComponent implements MigrationS\n     @Override\n     public Migration getMigration(String id) {\n         MigrationDescriptor descriptor = getDescriptor(XP_CONFIG, id);\n+        if (descriptor == null) {\n+            return null;\n+        }\n         return new Migration(id, descriptor.getDescription(), descriptor.getDescriptionLabel(), getStatus(id),\n-                descriptor.getSteps());\n+                getAvailableSteps(descriptor));\n     }\n \n     @Override\n"}}, {"oid": "35f9785a182e5e6f3269a591216fb96696501171", "url": "https://github.com/nuxeo/nuxeo/commit/35f9785a182e5e6f3269a591216fb96696501171", "message": "NXP-29098: add a MigrationService Waiter", "committedDate": "2020-05-26T16:25:45Z", "type": "forcePushed"}, {"oid": "ca533de464f2fde1737c0c582f1bce82fffdb311", "url": "https://github.com/nuxeo/nuxeo/commit/ca533de464f2fde1737c0c582f1bce82fffdb311", "message": "NXP-29098: add a MigrationService Waiter", "committedDate": "2020-05-26T16:29:53Z", "type": "forcePushed"}, {"oid": "8e845916f5dc755b6672458b1df4544e4479caca", "url": "https://github.com/nuxeo/nuxeo/commit/8e845916f5dc755b6672458b1df4544e4479caca", "message": "NXP-29098: add a MigrationService Waiter", "committedDate": "2020-05-26T16:32:53Z", "type": "forcePushed"}, {"oid": "bb1fd4cd000b6ed9c164ea31fd71658a6a675b3c", "url": "https://github.com/nuxeo/nuxeo/commit/bb1fd4cd000b6ed9c164ea31fd71658a6a675b3c", "message": "NXP-29098: add a MigrationService Waiter", "committedDate": "2020-05-26T16:36:15Z", "type": "forcePushed"}, {"oid": "39728551e82c683a0ca1e7e613867b644cdfa13a", "url": "https://github.com/nuxeo/nuxeo/commit/39728551e82c683a0ca1e7e613867b644cdfa13a", "message": "NXP-29098: add a MigrationService Waiter", "committedDate": "2020-05-27T12:19:36Z", "type": "forcePushed"}, {"oid": "57f12a472e97f35c4306bbeb8c6a1370ec297e46", "url": "https://github.com/nuxeo/nuxeo/commit/57f12a472e97f35c4306bbeb8c6a1370ec297e46", "message": "NXP-29098: new migration object", "committedDate": "2020-05-27T14:04:57Z", "type": "forcePushed"}, {"oid": "5f8d86b85ec9ddf82359b32c41b7584734327cf9", "url": "https://github.com/nuxeo/nuxeo/commit/5f8d86b85ec9ddf82359b32c41b7584734327cf9", "message": "NXP-29098: new migration object", "committedDate": "2020-05-27T14:07:24Z", "type": "forcePushed"}, {"oid": "2853685cbb4c9138dc1d87d496c339987500609c", "url": "https://github.com/nuxeo/nuxeo/commit/2853685cbb4c9138dc1d87d496c339987500609c", "message": "NXP-29098: new migration object", "committedDate": "2020-05-27T14:22:45Z", "type": "forcePushed"}, {"oid": "0df4406a3b5f52cf5429d5cc2939efcb2f26fc27", "url": "https://github.com/nuxeo/nuxeo/commit/0df4406a3b5f52cf5429d5cc2939efcb2f26fc27", "message": "NXP-29098: new migration object", "committedDate": "2020-05-27T15:19:52Z", "type": "forcePushed"}, {"oid": "886898ea4bf4b26c5affc6dc6063337752b6c9e9", "url": "https://github.com/nuxeo/nuxeo/commit/886898ea4bf4b26c5affc6dc6063337752b6c9e9", "message": "NXP-29098: new migration object", "committedDate": "2020-05-27T15:21:40Z", "type": "forcePushed"}, {"oid": "58ece6666ded9f22ab707cf97aacea3b0122d260", "url": "https://github.com/nuxeo/nuxeo/commit/58ece6666ded9f22ab707cf97aacea3b0122d260", "message": "NXP-29098: new migration object", "committedDate": "2020-05-27T15:22:52Z", "type": "forcePushed"}, {"oid": "9228df21dc5abc9a629bb08ea1dd6fd2d33ce4f3", "url": "https://github.com/nuxeo/nuxeo/commit/9228df21dc5abc9a629bb08ea1dd6fd2d33ce4f3", "message": "NXP-29098: new migration object", "committedDate": "2020-05-27T15:51:29Z", "type": "forcePushed"}, {"oid": "5b623bc015c6af769f77012f1aa02787ac379278", "url": "https://github.com/nuxeo/nuxeo/commit/5b623bc015c6af769f77012f1aa02787ac379278", "message": "NXP-29098: new migration object", "committedDate": "2020-05-29T10:11:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg0NzkxOA==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r431847918", "bodyText": "<p>", "author": "troger", "createdAt": "2020-05-28T13:47:44Z", "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationService.java", "diffHunk": "@@ -224,6 +243,15 @@ public long getProgressTotal() {\n      */\n     String probeAndSetState(String id);\n \n+    /**\n+     * Probes the migration state if necessary and runs a migration.\n+     * THIS METHOD MAY TAKE A WHILE as it may call {@link #probeAndSetState(String)}.", "originalCommit": "9228df21dc5abc9a629bb08ea1dd6fd2d33ce4f3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0f23e35c626aef5338ae6a8fcb21a3196a68e5ac", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationService.java b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationService.java\nindex bbbeafb3a35..1f420b3ce7d 100644\n--- a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationService.java\n+++ b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationService.java\n\n@@ -245,6 +245,7 @@ public interface MigrationService {\n \n     /**\n      * Probes the migration state if necessary and runs a migration.\n+     * <p>\n      * THIS METHOD MAY TAKE A WHILE as it may call {@link #probeAndSetState(String)}.\n      *\n      * @param id the migration id\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcwNDUxNA==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r436704514", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    var descriptors = getDescriptors(XP_CONFIG);\n          \n          \n            \n                    return descriptors.stream().map(d -> getMigration(d.getId())).collect(Collectors.toList());\n          \n          \n            \n                    return getDescriptors(XP_CONFIG).stream().map(Descriptor::getId).map(this::getMigration).collect(toList());", "author": "troger", "createdAt": "2020-06-08T13:33:57Z", "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java", "diffHunk": "@@ -529,4 +532,47 @@ protected void atomic(String id, Consumer<KeyValueStore> consumer) {\n         throw new RuntimeException(\"Cannot lock for write migration: \" + id + \", already locked: \" + currentLock);\n     }\n \n+    @Override\n+    public Migration getMigration(String id) {\n+        MigrationDescriptor descriptor = getDescriptor(XP_CONFIG, id);\n+        if (descriptor == null) {\n+            return null;\n+        }\n+        return new Migration(id, descriptor.getDescription(), descriptor.getDescriptionLabel(), getStatus(id),\n+                getAvailableSteps(descriptor));\n+    }\n+\n+    @Override\n+    public List<Migration> getMigrations() {\n+        var descriptors = getDescriptors(XP_CONFIG);\n+        return descriptors.stream().map(d -> getMigration(d.getId())).collect(Collectors.toList());", "originalCommit": "5b623bc015c6af769f77012f1aa02787ac379278", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI2MDY0Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r439260647", "bodyText": "This change has not been pushed.", "author": "kevinleturc", "createdAt": "2020-06-12T07:44:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcwNDUxNA=="}], "type": "inlineReview", "revised_code": {"commit": "0f23e35c626aef5338ae6a8fcb21a3196a68e5ac", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java\nindex a6c3149f0be..b368d250ace 100644\n--- a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java\n+++ b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java\n\n@@ -538,41 +535,29 @@ public class MigrationServiceImpl extends DefaultComponent implements MigrationS\n         if (descriptor == null) {\n             return null;\n         }\n-        return new Migration(id, descriptor.getDescription(), descriptor.getDescriptionLabel(), getStatus(id),\n-                getAvailableSteps(descriptor));\n+        return Migration.from(descriptor, getStatus(id));\n     }\n \n     @Override\n     public List<Migration> getMigrations() {\n-        var descriptors = getDescriptors(XP_CONFIG);\n-        return descriptors.stream().map(d -> getMigration(d.getId())).collect(Collectors.toList());\n+        return getDescriptors(XP_CONFIG).stream().map(d -> getMigration(d.getId())).collect(Collectors.toList());\n     }\n \n     /**\n-     * @implnote Runs a migration if it has exactly one available step to run.\n+     * @implNote Runs a migration if it has exactly one available step to run.\n      */\n     @Override\n-    public void probeAndRun(String migrationId) {\n-        if (getStatus(migrationId) == null) {\n-            probeAndSetState(migrationId);\n-        }\n-        MigrationDescriptor descriptor = getDescriptor(XP_CONFIG, migrationId);\n-        var availableSteps = getAvailableSteps(descriptor);\n-        if (availableSteps.size() != 1) {\n-            throw new IllegalStateException(\n-                    String.format(\"Migration %s needs to have exactly one step to run\", migrationId));\n-        } else {\n-            runStep(migrationId, availableSteps.values().iterator().next().getId());\n+    public void probeAndRun(String id) {\n+        MigrationStatus status = getStatus(id);\n+        if (status == null) {\n+            probeAndSetState(id);\n         }\n-    }\n-\n-    protected Map<String, MigrationStepDescriptor> getAvailableSteps(MigrationDescriptor descriptor) {\n-        MigrationStatus status = getStatus(descriptor.getId());\n-        return descriptor.getSteps()\n-                         .entrySet()\n-                         .stream()\n-                         .filter(e -> e.getValue().getFromState().equals(status.getState()))\n-                         .collect(Collectors.toMap(Entry::getKey, Entry::getValue));\n+        var steps = Migration.from(getDescriptor(XP_CONFIG, id), status).getSteps();\n+        if (steps.size() != 1) {\n+            throw new IllegalStateException(String.format(\n+                    \"Migration %s must have only one runnable step from state: %s\", id, status.getState())); // NOSONAR\n+        }\n+        runStep(id, steps.get(0).getId());\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcwNzU4Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r436707582", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @implnote Runs a migration if it has exactly one available step to run.\n          \n          \n            \n                 * @implNote Runs a migration if it has exactly one available step to run.", "author": "troger", "createdAt": "2020-06-08T13:38:44Z", "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java", "diffHunk": "@@ -529,4 +532,47 @@ protected void atomic(String id, Consumer<KeyValueStore> consumer) {\n         throw new RuntimeException(\"Cannot lock for write migration: \" + id + \", already locked: \" + currentLock);\n     }\n \n+    @Override\n+    public Migration getMigration(String id) {\n+        MigrationDescriptor descriptor = getDescriptor(XP_CONFIG, id);\n+        if (descriptor == null) {\n+            return null;\n+        }\n+        return new Migration(id, descriptor.getDescription(), descriptor.getDescriptionLabel(), getStatus(id),\n+                getAvailableSteps(descriptor));\n+    }\n+\n+    @Override\n+    public List<Migration> getMigrations() {\n+        var descriptors = getDescriptors(XP_CONFIG);\n+        return descriptors.stream().map(d -> getMigration(d.getId())).collect(Collectors.toList());\n+    }\n+\n+    /**\n+     * @implnote Runs a migration if it has exactly one available step to run.", "originalCommit": "5b623bc015c6af769f77012f1aa02787ac379278", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0f23e35c626aef5338ae6a8fcb21a3196a68e5ac", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java\nindex a6c3149f0be..b368d250ace 100644\n--- a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java\n+++ b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java\n\n@@ -538,41 +535,29 @@ public class MigrationServiceImpl extends DefaultComponent implements MigrationS\n         if (descriptor == null) {\n             return null;\n         }\n-        return new Migration(id, descriptor.getDescription(), descriptor.getDescriptionLabel(), getStatus(id),\n-                getAvailableSteps(descriptor));\n+        return Migration.from(descriptor, getStatus(id));\n     }\n \n     @Override\n     public List<Migration> getMigrations() {\n-        var descriptors = getDescriptors(XP_CONFIG);\n-        return descriptors.stream().map(d -> getMigration(d.getId())).collect(Collectors.toList());\n+        return getDescriptors(XP_CONFIG).stream().map(d -> getMigration(d.getId())).collect(Collectors.toList());\n     }\n \n     /**\n-     * @implnote Runs a migration if it has exactly one available step to run.\n+     * @implNote Runs a migration if it has exactly one available step to run.\n      */\n     @Override\n-    public void probeAndRun(String migrationId) {\n-        if (getStatus(migrationId) == null) {\n-            probeAndSetState(migrationId);\n-        }\n-        MigrationDescriptor descriptor = getDescriptor(XP_CONFIG, migrationId);\n-        var availableSteps = getAvailableSteps(descriptor);\n-        if (availableSteps.size() != 1) {\n-            throw new IllegalStateException(\n-                    String.format(\"Migration %s needs to have exactly one step to run\", migrationId));\n-        } else {\n-            runStep(migrationId, availableSteps.values().iterator().next().getId());\n+    public void probeAndRun(String id) {\n+        MigrationStatus status = getStatus(id);\n+        if (status == null) {\n+            probeAndSetState(id);\n         }\n-    }\n-\n-    protected Map<String, MigrationStepDescriptor> getAvailableSteps(MigrationDescriptor descriptor) {\n-        MigrationStatus status = getStatus(descriptor.getId());\n-        return descriptor.getSteps()\n-                         .entrySet()\n-                         .stream()\n-                         .filter(e -> e.getValue().getFromState().equals(status.getState()))\n-                         .collect(Collectors.toMap(Entry::getKey, Entry::getValue));\n+        var steps = Migration.from(getDescriptor(XP_CONFIG, id), status).getSteps();\n+        if (steps.size() != 1) {\n+            throw new IllegalStateException(String.format(\n+                    \"Migration %s must have only one runnable step from state: %s\", id, status.getState())); // NOSONAR\n+        }\n+        runStep(id, steps.get(0).getId());\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcxMjg3NA==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r436712874", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void probeAndRun(String migrationId) {\n          \n          \n            \n                public void probeAndRun(String id) {", "author": "troger", "createdAt": "2020-06-08T13:44:53Z", "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java", "diffHunk": "@@ -529,4 +532,47 @@ protected void atomic(String id, Consumer<KeyValueStore> consumer) {\n         throw new RuntimeException(\"Cannot lock for write migration: \" + id + \", already locked: \" + currentLock);\n     }\n \n+    @Override\n+    public Migration getMigration(String id) {\n+        MigrationDescriptor descriptor = getDescriptor(XP_CONFIG, id);\n+        if (descriptor == null) {\n+            return null;\n+        }\n+        return new Migration(id, descriptor.getDescription(), descriptor.getDescriptionLabel(), getStatus(id),\n+                getAvailableSteps(descriptor));\n+    }\n+\n+    @Override\n+    public List<Migration> getMigrations() {\n+        var descriptors = getDescriptors(XP_CONFIG);\n+        return descriptors.stream().map(d -> getMigration(d.getId())).collect(Collectors.toList());\n+    }\n+\n+    /**\n+     * @implnote Runs a migration if it has exactly one available step to run.\n+     */\n+    @Override\n+    public void probeAndRun(String migrationId) {", "originalCommit": "5b623bc015c6af769f77012f1aa02787ac379278", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0f23e35c626aef5338ae6a8fcb21a3196a68e5ac", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java\nindex a6c3149f0be..b368d250ace 100644\n--- a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java\n+++ b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java\n\n@@ -538,41 +535,29 @@ public class MigrationServiceImpl extends DefaultComponent implements MigrationS\n         if (descriptor == null) {\n             return null;\n         }\n-        return new Migration(id, descriptor.getDescription(), descriptor.getDescriptionLabel(), getStatus(id),\n-                getAvailableSteps(descriptor));\n+        return Migration.from(descriptor, getStatus(id));\n     }\n \n     @Override\n     public List<Migration> getMigrations() {\n-        var descriptors = getDescriptors(XP_CONFIG);\n-        return descriptors.stream().map(d -> getMigration(d.getId())).collect(Collectors.toList());\n+        return getDescriptors(XP_CONFIG).stream().map(d -> getMigration(d.getId())).collect(Collectors.toList());\n     }\n \n     /**\n-     * @implnote Runs a migration if it has exactly one available step to run.\n+     * @implNote Runs a migration if it has exactly one available step to run.\n      */\n     @Override\n-    public void probeAndRun(String migrationId) {\n-        if (getStatus(migrationId) == null) {\n-            probeAndSetState(migrationId);\n-        }\n-        MigrationDescriptor descriptor = getDescriptor(XP_CONFIG, migrationId);\n-        var availableSteps = getAvailableSteps(descriptor);\n-        if (availableSteps.size() != 1) {\n-            throw new IllegalStateException(\n-                    String.format(\"Migration %s needs to have exactly one step to run\", migrationId));\n-        } else {\n-            runStep(migrationId, availableSteps.values().iterator().next().getId());\n+    public void probeAndRun(String id) {\n+        MigrationStatus status = getStatus(id);\n+        if (status == null) {\n+            probeAndSetState(id);\n         }\n-    }\n-\n-    protected Map<String, MigrationStepDescriptor> getAvailableSteps(MigrationDescriptor descriptor) {\n-        MigrationStatus status = getStatus(descriptor.getId());\n-        return descriptor.getSteps()\n-                         .entrySet()\n-                         .stream()\n-                         .filter(e -> e.getValue().getFromState().equals(status.getState()))\n-                         .collect(Collectors.toMap(Entry::getKey, Entry::getValue));\n+        var steps = Migration.from(getDescriptor(XP_CONFIG, id), status).getSteps();\n+        if (steps.size() != 1) {\n+            throw new IllegalStateException(String.format(\n+                    \"Migration %s must have only one runnable step from state: %s\", id, status.getState())); // NOSONAR\n+        }\n+        runStep(id, steps.get(0).getId());\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcyMDEwNQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r436720105", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                String.format(\"Migration %s needs to have exactly one step to run\", migrationId));\n          \n          \n            \n                                String.format(\"Migration: %s must have only one runnable step from state: %s\", migrationId, state));\n          \n      \n    \n    \n  \n\nNeed to get the state before.", "author": "troger", "createdAt": "2020-06-08T13:51:45Z", "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java", "diffHunk": "@@ -529,4 +532,47 @@ protected void atomic(String id, Consumer<KeyValueStore> consumer) {\n         throw new RuntimeException(\"Cannot lock for write migration: \" + id + \", already locked: \" + currentLock);\n     }\n \n+    @Override\n+    public Migration getMigration(String id) {\n+        MigrationDescriptor descriptor = getDescriptor(XP_CONFIG, id);\n+        if (descriptor == null) {\n+            return null;\n+        }\n+        return new Migration(id, descriptor.getDescription(), descriptor.getDescriptionLabel(), getStatus(id),\n+                getAvailableSteps(descriptor));\n+    }\n+\n+    @Override\n+    public List<Migration> getMigrations() {\n+        var descriptors = getDescriptors(XP_CONFIG);\n+        return descriptors.stream().map(d -> getMigration(d.getId())).collect(Collectors.toList());\n+    }\n+\n+    /**\n+     * @implnote Runs a migration if it has exactly one available step to run.\n+     */\n+    @Override\n+    public void probeAndRun(String migrationId) {\n+        if (getStatus(migrationId) == null) {\n+            probeAndSetState(migrationId);\n+        }\n+        MigrationDescriptor descriptor = getDescriptor(XP_CONFIG, migrationId);\n+        var availableSteps = getAvailableSteps(descriptor);\n+        if (availableSteps.size() != 1) {\n+            throw new IllegalStateException(\n+                    String.format(\"Migration %s needs to have exactly one step to run\", migrationId));", "originalCommit": "5b623bc015c6af769f77012f1aa02787ac379278", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0f23e35c626aef5338ae6a8fcb21a3196a68e5ac", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java\nindex a6c3149f0be..b368d250ace 100644\n--- a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java\n+++ b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java\n\n@@ -538,41 +535,29 @@ public class MigrationServiceImpl extends DefaultComponent implements MigrationS\n         if (descriptor == null) {\n             return null;\n         }\n-        return new Migration(id, descriptor.getDescription(), descriptor.getDescriptionLabel(), getStatus(id),\n-                getAvailableSteps(descriptor));\n+        return Migration.from(descriptor, getStatus(id));\n     }\n \n     @Override\n     public List<Migration> getMigrations() {\n-        var descriptors = getDescriptors(XP_CONFIG);\n-        return descriptors.stream().map(d -> getMigration(d.getId())).collect(Collectors.toList());\n+        return getDescriptors(XP_CONFIG).stream().map(d -> getMigration(d.getId())).collect(Collectors.toList());\n     }\n \n     /**\n-     * @implnote Runs a migration if it has exactly one available step to run.\n+     * @implNote Runs a migration if it has exactly one available step to run.\n      */\n     @Override\n-    public void probeAndRun(String migrationId) {\n-        if (getStatus(migrationId) == null) {\n-            probeAndSetState(migrationId);\n-        }\n-        MigrationDescriptor descriptor = getDescriptor(XP_CONFIG, migrationId);\n-        var availableSteps = getAvailableSteps(descriptor);\n-        if (availableSteps.size() != 1) {\n-            throw new IllegalStateException(\n-                    String.format(\"Migration %s needs to have exactly one step to run\", migrationId));\n-        } else {\n-            runStep(migrationId, availableSteps.values().iterator().next().getId());\n+    public void probeAndRun(String id) {\n+        MigrationStatus status = getStatus(id);\n+        if (status == null) {\n+            probeAndSetState(id);\n         }\n-    }\n-\n-    protected Map<String, MigrationStepDescriptor> getAvailableSteps(MigrationDescriptor descriptor) {\n-        MigrationStatus status = getStatus(descriptor.getId());\n-        return descriptor.getSteps()\n-                         .entrySet()\n-                         .stream()\n-                         .filter(e -> e.getValue().getFromState().equals(status.getState()))\n-                         .collect(Collectors.toMap(Entry::getKey, Entry::getValue));\n+        var steps = Migration.from(getDescriptor(XP_CONFIG, id), status).getSteps();\n+        if (steps.size() != 1) {\n+            throw new IllegalStateException(String.format(\n+                    \"Migration %s must have only one runnable step from state: %s\", id, status.getState())); // NOSONAR\n+        }\n+        runStep(id, steps.get(0).getId());\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcyMTc3MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r436721771", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } else {\n          \n          \n            \n                        runStep(migrationId, availableSteps.values().iterator().next().getId());\n          \n          \n            \n                    }\n          \n          \n            \n                    }\n          \n          \n            \n                    runStep(migrationId, availableSteps.values().iterator().next().getId());", "author": "troger", "createdAt": "2020-06-08T13:53:21Z", "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java", "diffHunk": "@@ -529,4 +532,47 @@ protected void atomic(String id, Consumer<KeyValueStore> consumer) {\n         throw new RuntimeException(\"Cannot lock for write migration: \" + id + \", already locked: \" + currentLock);\n     }\n \n+    @Override\n+    public Migration getMigration(String id) {\n+        MigrationDescriptor descriptor = getDescriptor(XP_CONFIG, id);\n+        if (descriptor == null) {\n+            return null;\n+        }\n+        return new Migration(id, descriptor.getDescription(), descriptor.getDescriptionLabel(), getStatus(id),\n+                getAvailableSteps(descriptor));\n+    }\n+\n+    @Override\n+    public List<Migration> getMigrations() {\n+        var descriptors = getDescriptors(XP_CONFIG);\n+        return descriptors.stream().map(d -> getMigration(d.getId())).collect(Collectors.toList());\n+    }\n+\n+    /**\n+     * @implnote Runs a migration if it has exactly one available step to run.\n+     */\n+    @Override\n+    public void probeAndRun(String migrationId) {\n+        if (getStatus(migrationId) == null) {\n+            probeAndSetState(migrationId);\n+        }\n+        MigrationDescriptor descriptor = getDescriptor(XP_CONFIG, migrationId);\n+        var availableSteps = getAvailableSteps(descriptor);\n+        if (availableSteps.size() != 1) {\n+            throw new IllegalStateException(\n+                    String.format(\"Migration %s needs to have exactly one step to run\", migrationId));\n+        } else {\n+            runStep(migrationId, availableSteps.values().iterator().next().getId());\n+        }", "originalCommit": "5b623bc015c6af769f77012f1aa02787ac379278", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0f23e35c626aef5338ae6a8fcb21a3196a68e5ac", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java\nindex a6c3149f0be..b368d250ace 100644\n--- a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java\n+++ b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java\n\n@@ -538,41 +535,29 @@ public class MigrationServiceImpl extends DefaultComponent implements MigrationS\n         if (descriptor == null) {\n             return null;\n         }\n-        return new Migration(id, descriptor.getDescription(), descriptor.getDescriptionLabel(), getStatus(id),\n-                getAvailableSteps(descriptor));\n+        return Migration.from(descriptor, getStatus(id));\n     }\n \n     @Override\n     public List<Migration> getMigrations() {\n-        var descriptors = getDescriptors(XP_CONFIG);\n-        return descriptors.stream().map(d -> getMigration(d.getId())).collect(Collectors.toList());\n+        return getDescriptors(XP_CONFIG).stream().map(d -> getMigration(d.getId())).collect(Collectors.toList());\n     }\n \n     /**\n-     * @implnote Runs a migration if it has exactly one available step to run.\n+     * @implNote Runs a migration if it has exactly one available step to run.\n      */\n     @Override\n-    public void probeAndRun(String migrationId) {\n-        if (getStatus(migrationId) == null) {\n-            probeAndSetState(migrationId);\n-        }\n-        MigrationDescriptor descriptor = getDescriptor(XP_CONFIG, migrationId);\n-        var availableSteps = getAvailableSteps(descriptor);\n-        if (availableSteps.size() != 1) {\n-            throw new IllegalStateException(\n-                    String.format(\"Migration %s needs to have exactly one step to run\", migrationId));\n-        } else {\n-            runStep(migrationId, availableSteps.values().iterator().next().getId());\n+    public void probeAndRun(String id) {\n+        MigrationStatus status = getStatus(id);\n+        if (status == null) {\n+            probeAndSetState(id);\n         }\n-    }\n-\n-    protected Map<String, MigrationStepDescriptor> getAvailableSteps(MigrationDescriptor descriptor) {\n-        MigrationStatus status = getStatus(descriptor.getId());\n-        return descriptor.getSteps()\n-                         .entrySet()\n-                         .stream()\n-                         .filter(e -> e.getValue().getFromState().equals(status.getState()))\n-                         .collect(Collectors.toMap(Entry::getKey, Entry::getValue));\n+        var steps = Migration.from(getDescriptor(XP_CONFIG, id), status).getSteps();\n+        if (steps.size() != 1) {\n+            throw new IllegalStateException(String.format(\n+                    \"Migration %s must have only one runnable step from state: %s\", id, status.getState())); // NOSONAR\n+        }\n+        runStep(id, steps.get(0).getId());\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0MTk2NA==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r436741964", "bodyText": "Should be a simple List.", "author": "troger", "createdAt": "2020-06-08T14:13:49Z", "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/Migration.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+package org.nuxeo.runtime.migration;\n+\n+import java.util.Map;\n+\n+import org.nuxeo.runtime.migration.MigrationDescriptor.MigrationStepDescriptor;\n+import org.nuxeo.runtime.migration.MigrationService.MigrationStatus;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class Migration {\n+\n+    protected String id;\n+\n+    protected String description;\n+\n+    protected String label;\n+\n+    protected MigrationStatus status;\n+\n+    protected Map<String, MigrationStepDescriptor> steps;", "originalCommit": "5b623bc015c6af769f77012f1aa02787ac379278", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0f23e35c626aef5338ae6a8fcb21a3196a68e5ac", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/Migration.java b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/Migration.java\nindex 5a354fd43b1..be31e945131 100644\n--- a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/Migration.java\n+++ b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/Migration.java\n\n@@ -18,9 +18,9 @@\n  */\n package org.nuxeo.runtime.migration;\n \n-import java.util.Map;\n+import java.util.List;\n+import java.util.stream.Collectors;\n \n-import org.nuxeo.runtime.migration.MigrationDescriptor.MigrationStepDescriptor;\n import org.nuxeo.runtime.migration.MigrationService.MigrationStatus;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0MzMwOQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r436743309", "bodyText": "Missing @Override.", "author": "troger", "createdAt": "2020-06-08T14:15:43Z", "path": "modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/DummyMigrator.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+package org.nuxeo.runtime.migration;\n+\n+import org.nuxeo.runtime.migration.MigrationService.MigrationContext;\n+import org.nuxeo.runtime.migration.MigrationService.Migrator;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class DummyMigrator implements Migrator {\n+\n+    protected String state;\n+\n+    public void run(String step, MigrationContext migrationContext) {", "originalCommit": "5b623bc015c6af769f77012f1aa02787ac379278", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0f23e35c626aef5338ae6a8fcb21a3196a68e5ac", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/DummyMigrator.java b/modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/DummyMigrator.java\nindex 1011d7da9b2..df35a8f17e0 100644\n--- a/modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/DummyMigrator.java\n+++ b/modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/DummyMigrator.java\n\n@@ -20,7 +20,6 @@ package org.nuxeo.runtime.migration;\n \n import org.nuxeo.runtime.migration.MigrationService.MigrationContext;\n import org.nuxeo.runtime.migration.MigrationService.Migrator;\n-import org.nuxeo.runtime.transaction.TransactionHelper;\n \n /**\n  * @since 11.1\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0MzcxMw==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r436743713", "bodyText": "Why is it needed?", "author": "troger", "createdAt": "2020-06-08T14:16:16Z", "path": "modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/DummyMigrator.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+package org.nuxeo.runtime.migration;\n+\n+import org.nuxeo.runtime.migration.MigrationService.MigrationContext;\n+import org.nuxeo.runtime.migration.MigrationService.Migrator;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class DummyMigrator implements Migrator {\n+\n+    protected String state;\n+\n+    public void run(String step, MigrationContext migrationContext) {\n+        TransactionHelper.commitOrRollbackTransaction();\n+        TransactionHelper.startTransaction();", "originalCommit": "5b623bc015c6af769f77012f1aa02787ac379278", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODAxNjg5OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r438016899", "bodyText": "remanence of me trying to synch things", "author": "NourNuxeo", "createdAt": "2020-06-10T10:17:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0MzcxMw=="}], "type": "inlineReview", "revised_code": {"commit": "0f23e35c626aef5338ae6a8fcb21a3196a68e5ac", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/DummyMigrator.java b/modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/DummyMigrator.java\nindex 1011d7da9b2..df35a8f17e0 100644\n--- a/modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/DummyMigrator.java\n+++ b/modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/DummyMigrator.java\n\n@@ -20,7 +20,6 @@ package org.nuxeo.runtime.migration;\n \n import org.nuxeo.runtime.migration.MigrationService.MigrationContext;\n import org.nuxeo.runtime.migration.MigrationService.Migrator;\n-import org.nuxeo.runtime.transaction.TransactionHelper;\n \n /**\n  * @since 11.1\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0NDYxMw==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r436744613", "bodyText": "You could just deploy org.nuxeo.runtime.migration.", "author": "troger", "createdAt": "2020-06-08T14:17:36Z", "path": "modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/TestMigrationService.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+\n+package org.nuxeo.runtime.migration;\n+\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.awaitility.Awaitility.await;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.RuntimeFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(RuntimeFeature.class)\n+@Deploy(\"org.nuxeo.runtime.kv\")\n+@Deploy(\"org.nuxeo.runtime.cluster\")\n+@Deploy(\"org.nuxeo.runtime.migration:OSGI-INF/migration-service.xml\")", "originalCommit": "5b623bc015c6af769f77012f1aa02787ac379278", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0f23e35c626aef5338ae6a8fcb21a3196a68e5ac", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/TestMigrationService.java b/modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/TestMigrationService.java\nindex bdd00dc5b6a..19849757d68 100644\n--- a/modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/TestMigrationService.java\n+++ b/modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/TestMigrationService.java\n\n@@ -22,10 +22,9 @@ package org.nuxeo.runtime.migration;\n import static java.util.concurrent.TimeUnit.SECONDS;\n import static org.awaitility.Awaitility.await;\n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n import static org.junit.Assert.fail;\n \n-import java.util.concurrent.atomic.AtomicBoolean;\n-\n import javax.inject.Inject;\n \n import org.junit.Test;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0NTI1Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r436745253", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected void checkMigration(Migration migration) {\n          \n          \n            \n                protected void assertDummyMigration(Migration actual) {", "author": "troger", "createdAt": "2020-06-08T14:18:34Z", "path": "modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/TestMigrationService.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+\n+package org.nuxeo.runtime.migration;\n+\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.awaitility.Awaitility.await;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.RuntimeFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(RuntimeFeature.class)\n+@Deploy(\"org.nuxeo.runtime.kv\")\n+@Deploy(\"org.nuxeo.runtime.cluster\")\n+@Deploy(\"org.nuxeo.runtime.migration:OSGI-INF/migration-service.xml\")\n+@Deploy(\"org.nuxeo.runtime.migration.tests:OSGI-INF/dummy-migration.xml\")\n+public class TestMigrationService {\n+\n+    @Inject\n+    protected MigrationService migrationService;\n+\n+    @Test\n+    public void testGetMigration() {\n+        checkMigration(migrationService.getMigration(\"dummy-migration\"));\n+    }\n+\n+    @Test\n+    public void testGetMigrations() {\n+        var migrations = migrationService.getMigrations();\n+        assertEquals(1, migrations.size());\n+        checkMigration(migrations.get(0));\n+    }\n+\n+    @Test\n+    public void testUnknownMigration() {\n+        assertEquals(null, migrationService.getMigration(\"fake\"));\n+    }\n+\n+    @Test\n+    public void testRunMigration() {\n+        String dummy = \"dummy-migration\";\n+        assertEquals(\"before\", migrationService.getMigration(dummy).getStatus().getState());\n+        migrationService.probeAndRun(dummy);\n+        await().atMost(1, SECONDS)\n+               .until(() -> migrationService.getMigration(dummy).getStatus().getState().equals(\"after\"));\n+        try {\n+            migrationService.probeAndRun(dummy);\n+            fail(\"should fail\");\n+        } catch (java.lang.IllegalStateException e) {\n+            assertEquals(\"Migration dummy-migration needs to have exactly one step to run\", e.getMessage());\n+        }\n+    }\n+\n+    protected void checkMigration(Migration migration) {", "originalCommit": "5b623bc015c6af769f77012f1aa02787ac379278", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0f23e35c626aef5338ae6a8fcb21a3196a68e5ac", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/TestMigrationService.java b/modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/TestMigrationService.java\nindex bdd00dc5b6a..19849757d68 100644\n--- a/modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/TestMigrationService.java\n+++ b/modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/TestMigrationService.java\n\n@@ -22,10 +22,9 @@ package org.nuxeo.runtime.migration;\n import static java.util.concurrent.TimeUnit.SECONDS;\n import static org.awaitility.Awaitility.await;\n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n import static org.junit.Assert.fail;\n \n-import java.util.concurrent.atomic.AtomicBoolean;\n-\n import javax.inject.Inject;\n \n import org.junit.Test;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0NTY3MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r436745671", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertEquals(null, migrationService.getMigration(\"fake\"));\n          \n          \n            \n                    assertNull(migrationService.getMigration(\"fake\"));", "author": "troger", "createdAt": "2020-06-08T14:19:11Z", "path": "modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/TestMigrationService.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+\n+package org.nuxeo.runtime.migration;\n+\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.awaitility.Awaitility.await;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.RuntimeFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(RuntimeFeature.class)\n+@Deploy(\"org.nuxeo.runtime.kv\")\n+@Deploy(\"org.nuxeo.runtime.cluster\")\n+@Deploy(\"org.nuxeo.runtime.migration:OSGI-INF/migration-service.xml\")\n+@Deploy(\"org.nuxeo.runtime.migration.tests:OSGI-INF/dummy-migration.xml\")\n+public class TestMigrationService {\n+\n+    @Inject\n+    protected MigrationService migrationService;\n+\n+    @Test\n+    public void testGetMigration() {\n+        checkMigration(migrationService.getMigration(\"dummy-migration\"));\n+    }\n+\n+    @Test\n+    public void testGetMigrations() {\n+        var migrations = migrationService.getMigrations();\n+        assertEquals(1, migrations.size());\n+        checkMigration(migrations.get(0));\n+    }\n+\n+    @Test\n+    public void testUnknownMigration() {\n+        assertEquals(null, migrationService.getMigration(\"fake\"));", "originalCommit": "5b623bc015c6af769f77012f1aa02787ac379278", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0f23e35c626aef5338ae6a8fcb21a3196a68e5ac", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/TestMigrationService.java b/modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/TestMigrationService.java\nindex bdd00dc5b6a..19849757d68 100644\n--- a/modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/TestMigrationService.java\n+++ b/modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/TestMigrationService.java\n\n@@ -22,10 +22,9 @@ package org.nuxeo.runtime.migration;\n import static java.util.concurrent.TimeUnit.SECONDS;\n import static org.awaitility.Awaitility.await;\n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n import static org.junit.Assert.fail;\n \n-import java.util.concurrent.atomic.AtomicBoolean;\n-\n import javax.inject.Inject;\n \n import org.junit.Test;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0NjI2NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r436746265", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testRunMigration() {\n          \n          \n            \n                public void testProbeAndRunMigration() {", "author": "troger", "createdAt": "2020-06-08T14:20:05Z", "path": "modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/TestMigrationService.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+\n+package org.nuxeo.runtime.migration;\n+\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.awaitility.Awaitility.await;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.RuntimeFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(RuntimeFeature.class)\n+@Deploy(\"org.nuxeo.runtime.kv\")\n+@Deploy(\"org.nuxeo.runtime.cluster\")\n+@Deploy(\"org.nuxeo.runtime.migration:OSGI-INF/migration-service.xml\")\n+@Deploy(\"org.nuxeo.runtime.migration.tests:OSGI-INF/dummy-migration.xml\")\n+public class TestMigrationService {\n+\n+    @Inject\n+    protected MigrationService migrationService;\n+\n+    @Test\n+    public void testGetMigration() {\n+        checkMigration(migrationService.getMigration(\"dummy-migration\"));\n+    }\n+\n+    @Test\n+    public void testGetMigrations() {\n+        var migrations = migrationService.getMigrations();\n+        assertEquals(1, migrations.size());\n+        checkMigration(migrations.get(0));\n+    }\n+\n+    @Test\n+    public void testUnknownMigration() {\n+        assertEquals(null, migrationService.getMigration(\"fake\"));\n+    }\n+\n+    @Test\n+    public void testRunMigration() {", "originalCommit": "5b623bc015c6af769f77012f1aa02787ac379278", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0f23e35c626aef5338ae6a8fcb21a3196a68e5ac", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/TestMigrationService.java b/modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/TestMigrationService.java\nindex bdd00dc5b6a..19849757d68 100644\n--- a/modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/TestMigrationService.java\n+++ b/modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/TestMigrationService.java\n\n@@ -22,10 +22,9 @@ package org.nuxeo.runtime.migration;\n import static java.util.concurrent.TimeUnit.SECONDS;\n import static org.awaitility.Awaitility.await;\n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n import static org.junit.Assert.fail;\n \n-import java.util.concurrent.atomic.AtomicBoolean;\n-\n import javax.inject.Inject;\n \n import org.junit.Test;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0NzIwNg==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r436747206", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                           .until(() -> migrationService.getMigration(dummy).getStatus().getState().equals(\"after\"));\n          \n          \n            \n                           .until(() -> \"after\".equals(migrationService.getMigration(dummy).getStatus().getState()));", "author": "troger", "createdAt": "2020-06-08T14:21:32Z", "path": "modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/TestMigrationService.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+\n+package org.nuxeo.runtime.migration;\n+\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.awaitility.Awaitility.await;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.RuntimeFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(RuntimeFeature.class)\n+@Deploy(\"org.nuxeo.runtime.kv\")\n+@Deploy(\"org.nuxeo.runtime.cluster\")\n+@Deploy(\"org.nuxeo.runtime.migration:OSGI-INF/migration-service.xml\")\n+@Deploy(\"org.nuxeo.runtime.migration.tests:OSGI-INF/dummy-migration.xml\")\n+public class TestMigrationService {\n+\n+    @Inject\n+    protected MigrationService migrationService;\n+\n+    @Test\n+    public void testGetMigration() {\n+        checkMigration(migrationService.getMigration(\"dummy-migration\"));\n+    }\n+\n+    @Test\n+    public void testGetMigrations() {\n+        var migrations = migrationService.getMigrations();\n+        assertEquals(1, migrations.size());\n+        checkMigration(migrations.get(0));\n+    }\n+\n+    @Test\n+    public void testUnknownMigration() {\n+        assertEquals(null, migrationService.getMigration(\"fake\"));\n+    }\n+\n+    @Test\n+    public void testRunMigration() {\n+        String dummy = \"dummy-migration\";\n+        assertEquals(\"before\", migrationService.getMigration(dummy).getStatus().getState());\n+        migrationService.probeAndRun(dummy);\n+        await().atMost(1, SECONDS)\n+               .until(() -> migrationService.getMigration(dummy).getStatus().getState().equals(\"after\"));", "originalCommit": "5b623bc015c6af769f77012f1aa02787ac379278", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0f23e35c626aef5338ae6a8fcb21a3196a68e5ac", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/TestMigrationService.java b/modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/TestMigrationService.java\nindex bdd00dc5b6a..19849757d68 100644\n--- a/modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/TestMigrationService.java\n+++ b/modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/TestMigrationService.java\n\n@@ -22,10 +22,9 @@ package org.nuxeo.runtime.migration;\n import static java.util.concurrent.TimeUnit.SECONDS;\n import static org.awaitility.Awaitility.await;\n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n import static org.junit.Assert.fail;\n \n-import java.util.concurrent.atomic.AtomicBoolean;\n-\n import javax.inject.Inject;\n \n import org.junit.Test;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0ODI0OA==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r436748248", "bodyText": "New line to separate both tests (improve the readability :)).", "author": "troger", "createdAt": "2020-06-08T14:23:01Z", "path": "modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/TestMigrationService.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+\n+package org.nuxeo.runtime.migration;\n+\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.awaitility.Awaitility.await;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.RuntimeFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(RuntimeFeature.class)\n+@Deploy(\"org.nuxeo.runtime.kv\")\n+@Deploy(\"org.nuxeo.runtime.cluster\")\n+@Deploy(\"org.nuxeo.runtime.migration:OSGI-INF/migration-service.xml\")\n+@Deploy(\"org.nuxeo.runtime.migration.tests:OSGI-INF/dummy-migration.xml\")\n+public class TestMigrationService {\n+\n+    @Inject\n+    protected MigrationService migrationService;\n+\n+    @Test\n+    public void testGetMigration() {\n+        checkMigration(migrationService.getMigration(\"dummy-migration\"));\n+    }\n+\n+    @Test\n+    public void testGetMigrations() {\n+        var migrations = migrationService.getMigrations();\n+        assertEquals(1, migrations.size());\n+        checkMigration(migrations.get(0));\n+    }\n+\n+    @Test\n+    public void testUnknownMigration() {\n+        assertEquals(null, migrationService.getMigration(\"fake\"));\n+    }\n+\n+    @Test\n+    public void testRunMigration() {\n+        String dummy = \"dummy-migration\";\n+        assertEquals(\"before\", migrationService.getMigration(dummy).getStatus().getState());\n+        migrationService.probeAndRun(dummy);\n+        await().atMost(1, SECONDS)\n+               .until(() -> migrationService.getMigration(dummy).getStatus().getState().equals(\"after\"));\n+        try {", "originalCommit": "5b623bc015c6af769f77012f1aa02787ac379278", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc3NDk3MA==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r436774970", "bodyText": "adding a new line is a rare request from you !", "author": "NourNuxeo", "createdAt": "2020-06-08T14:58:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0ODI0OA=="}], "type": "inlineReview", "revised_code": {"commit": "0f23e35c626aef5338ae6a8fcb21a3196a68e5ac", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/TestMigrationService.java b/modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/TestMigrationService.java\nindex bdd00dc5b6a..19849757d68 100644\n--- a/modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/TestMigrationService.java\n+++ b/modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/TestMigrationService.java\n\n@@ -22,10 +22,9 @@ package org.nuxeo.runtime.migration;\n import static java.util.concurrent.TimeUnit.SECONDS;\n import static org.awaitility.Awaitility.await;\n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n import static org.junit.Assert.fail;\n \n-import java.util.concurrent.atomic.AtomicBoolean;\n-\n import javax.inject.Inject;\n \n import org.junit.Test;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0ODU0OA==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r436748548", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } catch (java.lang.IllegalStateException e) {\n          \n          \n            \n                    } catch (IllegalStateException e) {", "author": "troger", "createdAt": "2020-06-08T14:23:24Z", "path": "modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/TestMigrationService.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+\n+package org.nuxeo.runtime.migration;\n+\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.awaitility.Awaitility.await;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.RuntimeFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(RuntimeFeature.class)\n+@Deploy(\"org.nuxeo.runtime.kv\")\n+@Deploy(\"org.nuxeo.runtime.cluster\")\n+@Deploy(\"org.nuxeo.runtime.migration:OSGI-INF/migration-service.xml\")\n+@Deploy(\"org.nuxeo.runtime.migration.tests:OSGI-INF/dummy-migration.xml\")\n+public class TestMigrationService {\n+\n+    @Inject\n+    protected MigrationService migrationService;\n+\n+    @Test\n+    public void testGetMigration() {\n+        checkMigration(migrationService.getMigration(\"dummy-migration\"));\n+    }\n+\n+    @Test\n+    public void testGetMigrations() {\n+        var migrations = migrationService.getMigrations();\n+        assertEquals(1, migrations.size());\n+        checkMigration(migrations.get(0));\n+    }\n+\n+    @Test\n+    public void testUnknownMigration() {\n+        assertEquals(null, migrationService.getMigration(\"fake\"));\n+    }\n+\n+    @Test\n+    public void testRunMigration() {\n+        String dummy = \"dummy-migration\";\n+        assertEquals(\"before\", migrationService.getMigration(dummy).getStatus().getState());\n+        migrationService.probeAndRun(dummy);\n+        await().atMost(1, SECONDS)\n+               .until(() -> migrationService.getMigration(dummy).getStatus().getState().equals(\"after\"));\n+        try {\n+            migrationService.probeAndRun(dummy);\n+            fail(\"should fail\");\n+        } catch (java.lang.IllegalStateException e) {", "originalCommit": "5b623bc015c6af769f77012f1aa02787ac379278", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0f23e35c626aef5338ae6a8fcb21a3196a68e5ac", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/TestMigrationService.java b/modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/TestMigrationService.java\nindex bdd00dc5b6a..19849757d68 100644\n--- a/modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/TestMigrationService.java\n+++ b/modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/TestMigrationService.java\n\n@@ -22,10 +22,9 @@ package org.nuxeo.runtime.migration;\n import static java.util.concurrent.TimeUnit.SECONDS;\n import static org.awaitility.Awaitility.await;\n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n import static org.junit.Assert.fail;\n \n-import java.util.concurrent.atomic.AtomicBoolean;\n-\n import javax.inject.Inject;\n \n import org.junit.Test;\n"}}, {"oid": "0f23e35c626aef5338ae6a8fcb21a3196a68e5ac", "url": "https://github.com/nuxeo/nuxeo/commit/0f23e35c626aef5338ae6a8fcb21a3196a68e5ac", "message": "NXP-29098: new migration object", "committedDate": "2020-06-10T10:26:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODAyMjQzNg==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r438022436", "bodyText": "didn't feel worth a separate commit. Unless ?...", "author": "NourNuxeo", "createdAt": "2020-06-10T10:28:15Z", "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java", "diffHunk": "@@ -470,8 +471,7 @@ public void runStep(String id, String step) {\n                 log.error(\"Exception during execution of step: {} for migration: {}\", step, id, t);\n             }\n             // after the migrator is finished, change state, except if shutdown is requested or exception\n-            String state = t != null || migrationContext.isShutdownRequested()\n-                    ? stepDescr.fromState\n+            String state = t != null || migrationContext.isShutdownRequested() ? stepDescr.fromState", "originalCommit": "0f23e35c626aef5338ae6a8fcb21a3196a68e5ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI2MDUxOQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r439260519", "bodyText": "It's OK to me, no need for a cleanup commit.", "author": "kevinleturc", "createdAt": "2020-06-12T07:44:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODAyMjQzNg=="}], "type": "inlineReview", "revised_code": {"commit": "12676c10cdb749dfd4646ef00e7a928cdba2ee6c", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java\nindex b368d250ace..43cc0b5d247 100644\n--- a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java\n+++ b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java\n\n@@ -471,7 +470,8 @@ public class MigrationServiceImpl extends DefaultComponent implements MigrationS\n                 log.error(\"Exception during execution of step: {} for migration: {}\", step, id, t);\n             }\n             // after the migrator is finished, change state, except if shutdown is requested or exception\n-            String state = t != null || migrationContext.isShutdownRequested() ? stepDescr.fromState\n+            String state = t != null || migrationContext.isShutdownRequested()\n+                    ? stepDescr.fromState\n                     : stepDescr.toState;\n             atomic(id, kv -> setState(id, state, progressReporter, kv));\n             // allow notification of new state\n"}}, {"oid": "38b158875f753ff8890f6c3fc89a5f3520897c1f", "url": "https://github.com/nuxeo/nuxeo/commit/38b158875f753ff8890f6c3fc89a5f3520897c1f", "message": "NXP-29098: new migration object", "committedDate": "2020-06-10T10:30:16Z", "type": "forcePushed"}, {"oid": "215aca93ab9716492aae69ae31b4bba7212150da", "url": "https://github.com/nuxeo/nuxeo/commit/215aca93ab9716492aae69ae31b4bba7212150da", "message": "NXP-29098: new migration object", "committedDate": "2020-06-10T13:34:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI2MTY3MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r439261671", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                \"Migration %s must have only one runnable step from state: %s\", id, status.getState())); // NOSONAR\n          \n          \n            \n                                \"Migration: %s must have only one runnable step from state: %s\", id, status.getState())); // NOSONAR", "author": "kevinleturc", "createdAt": "2020-06-12T07:46:41Z", "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java", "diffHunk": "@@ -529,4 +529,35 @@ protected void atomic(String id, Consumer<KeyValueStore> consumer) {\n         throw new RuntimeException(\"Cannot lock for write migration: \" + id + \", already locked: \" + currentLock);\n     }\n \n+    @Override\n+    public Migration getMigration(String id) {\n+        MigrationDescriptor descriptor = getDescriptor(XP_CONFIG, id);\n+        if (descriptor == null) {\n+            return null;\n+        }\n+        return Migration.from(descriptor, getStatus(id));\n+    }\n+\n+    @Override\n+    public List<Migration> getMigrations() {\n+        return getDescriptors(XP_CONFIG).stream().map(d -> getMigration(d.getId())).collect(Collectors.toList());\n+    }\n+\n+    /**\n+     * @implNote Runs a migration if it has exactly one available step to run.\n+     */\n+    @Override\n+    public void probeAndRun(String id) {\n+        MigrationStatus status = getStatus(id);\n+        if (status == null) {\n+            probeAndSetState(id);\n+        }\n+        var steps = Migration.from(getDescriptor(XP_CONFIG, id), status).getSteps();\n+        if (steps.size() != 1) {\n+            throw new IllegalStateException(String.format(\n+                    \"Migration %s must have only one runnable step from state: %s\", id, status.getState())); // NOSONAR", "originalCommit": "215aca93ab9716492aae69ae31b4bba7212150da", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9e0c4b067f17e887e85bfce60016478a91626561", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java\nindex b368d250ace..a376bbb7801 100644\n--- a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java\n+++ b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java\n\n@@ -540,7 +541,7 @@ public class MigrationServiceImpl extends DefaultComponent implements MigrationS\n \n     @Override\n     public List<Migration> getMigrations() {\n-        return getDescriptors(XP_CONFIG).stream().map(d -> getMigration(d.getId())).collect(Collectors.toList());\n+        return getDescriptors(XP_CONFIG).stream().map(Descriptor::getId).map(this::getMigration).collect(toList());\n     }\n \n     /**\n"}}, {"oid": "9e0c4b067f17e887e85bfce60016478a91626561", "url": "https://github.com/nuxeo/nuxeo/commit/9e0c4b067f17e887e85bfce60016478a91626561", "message": "NXP-29098: new migration object", "committedDate": "2020-06-12T09:28:54Z", "type": "forcePushed"}, {"oid": "9b489b78c334471de458ec0491233cfb54d406a6", "url": "https://github.com/nuxeo/nuxeo/commit/9b489b78c334471de458ec0491233cfb54d406a6", "message": "NXP-29098: new migration object", "committedDate": "2020-06-12T11:25:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDIzOTY5Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r440239693", "bodyText": "Maybe worth doing the same thing as for Migration, a static from and only simple params in the constructor.", "author": "troger", "createdAt": "2020-06-15T14:59:52Z", "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationStep.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+package org.nuxeo.runtime.migration;\n+\n+import org.nuxeo.runtime.migration.MigrationDescriptor.MigrationStepDescriptor;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class MigrationStep {\n+\n+    protected final String id;\n+\n+    protected final String description;\n+\n+    protected final String descriptionLabel;\n+\n+    protected final String fromState;\n+\n+    protected final String toState;\n+\n+    public final String getId() {\n+        return id;\n+    }\n+\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    public String getDescriptionLabel() {\n+        return descriptionLabel;\n+    }\n+\n+    public String getFromState() {\n+        return fromState;\n+    }\n+\n+    public String getToState() {\n+        return toState;\n+    }\n+\n+    public MigrationStep(MigrationStepDescriptor descriptor) {\n+        this.id = descriptor.getId();\n+        this.description = descriptor.getDescription();\n+        this.descriptionLabel = descriptor.getDescriptionLabel();\n+        this.fromState = descriptor.getFromState();\n+        this.toState = descriptor.getToState();\n+    }", "originalCommit": "9b489b78c334471de458ec0491233cfb54d406a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI2NjQwOQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r440266409", "bodyText": "here you go!", "author": "NourNuxeo", "createdAt": "2020-06-15T15:37:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDIzOTY5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "42f1feab153f3df43ff1230a183eb71ee3274861", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationStep.java b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationStep.java\nindex 61638b66bd0..9405fd397d9 100644\n--- a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationStep.java\n+++ b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationStep.java\n\n@@ -55,11 +55,16 @@ public class MigrationStep {\n         return toState;\n     }\n \n-    public MigrationStep(MigrationStepDescriptor descriptor) {\n-        this.id = descriptor.getId();\n-        this.description = descriptor.getDescription();\n-        this.descriptionLabel = descriptor.getDescriptionLabel();\n-        this.fromState = descriptor.getFromState();\n-        this.toState = descriptor.getToState();\n+    protected MigrationStep(String id, String description, String descriptionLabel, String fromState, String toState) {\n+        this.id = id;\n+        this.description = description;\n+        this.descriptionLabel = descriptionLabel;\n+        this.fromState = fromState;\n+        this.toState = toState;\n+    }\n+\n+    public static MigrationStep from(MigrationStepDescriptor descriptor) {\n+        return new MigrationStep(descriptor.getId(), descriptor.getDescription(), descriptor.getDescriptionLabel(),\n+                descriptor.getFromState(), descriptor.getToState());\n     }\n }\n"}}, {"oid": "42f1feab153f3df43ff1230a183eb71ee3274861", "url": "https://github.com/nuxeo/nuxeo/commit/42f1feab153f3df43ff1230a183eb71ee3274861", "message": "NXP-29098: new migration object", "committedDate": "2020-06-15T15:34:55Z", "type": "forcePushed"}, {"oid": "abca2eb4122b13acdd8dbf9f78808038ca096817", "url": "https://github.com/nuxeo/nuxeo/commit/abca2eb4122b13acdd8dbf9f78808038ca096817", "message": "NXP-29098: new migration object", "committedDate": "2020-06-18T14:48:16Z", "type": "forcePushed"}, {"oid": "f982e60aa2bfd222f5d6eb35ffaae48d1a68d676", "url": "https://github.com/nuxeo/nuxeo/commit/f982e60aa2bfd222f5d6eb35ffaae48d1a68d676", "message": "NXP-29098: new migration object", "committedDate": "2020-06-24T09:02:01Z", "type": "forcePushed"}, {"oid": "4c4a622a05aa636f79f48290e96454dbbe72e0cf", "url": "https://github.com/nuxeo/nuxeo/commit/4c4a622a05aa636f79f48290e96454dbbe72e0cf", "message": "NXP-29098: new migration object", "committedDate": "2020-06-24T09:06:34Z", "type": "forcePushed"}, {"oid": "5562cc19a487a93dd2aa752018874632dd919474", "url": "https://github.com/nuxeo/nuxeo/commit/5562cc19a487a93dd2aa752018874632dd919474", "message": "NXP-29098: new migration object", "committedDate": "2020-06-29T14:39:35Z", "type": "forcePushed"}, {"oid": "12676c10cdb749dfd4646ef00e7a928cdba2ee6c", "url": "https://github.com/nuxeo/nuxeo/commit/12676c10cdb749dfd4646ef00e7a928cdba2ee6c", "message": "NXP-29098: add bad request exception mapping to webengine", "committedDate": "2020-06-29T14:47:44Z", "type": "commit"}, {"oid": "812554aa77cfec284417bebcbd12bba5df0f44a7", "url": "https://github.com/nuxeo/nuxeo/commit/812554aa77cfec284417bebcbd12bba5df0f44a7", "message": "NXP-29098: new migration object", "committedDate": "2020-06-29T14:47:52Z", "type": "forcePushed"}, {"oid": "f0fc21c8d2fdcf52d3f5d17f5ca77f3558d8907f", "url": "https://github.com/nuxeo/nuxeo/commit/f0fc21c8d2fdcf52d3f5d17f5ca77f3558d8907f", "message": "NXP-29098: new migration object", "committedDate": "2020-06-29T15:08:43Z", "type": "forcePushed"}, {"oid": "beafe03c777f339c08fc69994173e4e532cbca18", "url": "https://github.com/nuxeo/nuxeo/commit/beafe03c777f339c08fc69994173e4e532cbca18", "message": "NXP-29098: new migration object", "committedDate": "2020-06-29T15:15:22Z", "type": "forcePushed"}, {"oid": "6023eb1654d495087106ca85a38e1413b8d38e17", "url": "https://github.com/nuxeo/nuxeo/commit/6023eb1654d495087106ca85a38e1413b8d38e17", "message": "NXP-29098: new migration object", "committedDate": "2020-06-29T15:49:18Z", "type": "forcePushed"}, {"oid": "d7298c2f9e2ad2df310db4b3c302e4986f2701e7", "url": "https://github.com/nuxeo/nuxeo/commit/d7298c2f9e2ad2df310db4b3c302e4986f2701e7", "message": "NXP-29098: new migration object", "committedDate": "2020-06-29T15:56:26Z", "type": "forcePushed"}, {"oid": "062ad76d0bc2cc0adc6da73a0ee42fcfa5fd80cb", "url": "https://github.com/nuxeo/nuxeo/commit/062ad76d0bc2cc0adc6da73a0ee42fcfa5fd80cb", "message": "NXP-29098: new migration object", "committedDate": "2020-06-29T16:43:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzczMjAzNQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r447732035", "bodyText": "Shouldn't you get status in case you probe the state?", "author": "kevinleturc", "createdAt": "2020-06-30T14:34:06Z", "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java", "diffHunk": "@@ -529,4 +530,36 @@ protected void atomic(String id, Consumer<KeyValueStore> consumer) {\n         throw new RuntimeException(\"Cannot lock for write migration: \" + id + \", already locked: \" + currentLock);\n     }\n \n+    @Override\n+    public Migration getMigration(String id) {\n+        MigrationDescriptor descriptor = getDescriptor(XP_CONFIG, id);\n+        MigrationStatus status = getStatus(id);\n+        if (descriptor == null || status == null) {\n+            return null;\n+        }\n+        return Migration.from(descriptor, status);\n+    }\n+\n+    @Override\n+    public List<Migration> getMigrations() {\n+        return getDescriptors(XP_CONFIG).stream().map(Descriptor::getId).map(this::getMigration).collect(toList());\n+    }\n+\n+    /**\n+     * @implNote Runs a migration if it has exactly one available step to run.\n+     */\n+    @Override\n+    public void probeAndRun(String id) {\n+        MigrationStatus status = getStatus(id);\n+        if (status == null) {\n+            probeAndSetState(id);\n+        }\n+        var steps = Migration.from(getDescriptor(XP_CONFIG, id), status).getSteps();", "originalCommit": "062ad76d0bc2cc0adc6da73a0ee42fcfa5fd80cb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc2NTA1Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r447765053", "bodyText": "The name was changed to probeAndRun later but it was just defined as run and meant to do so even if the state is unknown (so we probe then).\nI think it was renamed probeAndRun to make the call to probeAndSetState more explicit as it has this warning:\n\n\nTHIS METHOD MAY TAKE A WHILE as it needs to get information from persistent storage.\n\n\n@troger might remember better than me", "author": "NourNuxeo", "createdAt": "2020-06-30T15:16:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzczMjAzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc3Mjc5OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r447772799", "bodyText": "@kevinleturc is pointing that if status is null, you call probeAndSetState(id); but never get back the updated status, so status is still null.", "author": "troger", "createdAt": "2020-06-30T15:26:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzczMjAzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc3MzIzMA==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r447773230", "bodyText": "Exactly", "author": "kevinleturc", "createdAt": "2020-06-30T15:26:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzczMjAzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc4OTM0NA==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r447789344", "bodyText": "I made a systematic call to probeAndSetState then affect getStatus", "author": "NourNuxeo", "createdAt": "2020-06-30T15:49:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzczMjAzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc5Mzk0MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r447793941", "bodyText": "No no... why probing if there is no need to probe?\nMigrationStatus status = getStatus(id);\nif (status == null) {\n    probeAndSetState(id);\n    status = getStatus(id);\n}\n...\nIt is stated in your method's Javadoc:\n\nProbes the migration state if necessary and runs a migration.", "author": "troger", "createdAt": "2020-06-30T15:54:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzczMjAzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgxMDcwNg==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r447810706", "bodyText": "alright", "author": "NourNuxeo", "createdAt": "2020-06-30T16:18:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzczMjAzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "2ca38ad22070400175e9e34b8d7f53dbffb66c8f", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java\nindex c0c258a4065..5ac0a361b5d 100644\n--- a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java\n+++ b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java\n\n@@ -550,10 +550,8 @@ public class MigrationServiceImpl extends DefaultComponent implements MigrationS\n      */\n     @Override\n     public void probeAndRun(String id) {\n+        probeAndSetState(id);\n         MigrationStatus status = getStatus(id);\n-        if (status == null) {\n-            probeAndSetState(id);\n-        }\n         var steps = Migration.from(getDescriptor(XP_CONFIG, id), status).getSteps();\n         if (steps.size() != 1) {\n             throw new IllegalArgumentException(String.format(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzczMjUxNA==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r447732514", "bodyText": "Format", "author": "kevinleturc", "createdAt": "2020-06-30T14:34:45Z", "path": "modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/TestMigrationService.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+\n+package org.nuxeo.runtime.migration;\n+\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.awaitility.Awaitility.await;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.fail;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.RuntimeFeature;\n+\n+/**\n+ * @since 11.2\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(RuntimeFeature.class)\n+@Deploy(\"org.nuxeo.runtime.kv\")\n+@Deploy(\"org.nuxeo.runtime.cluster\")\n+@Deploy(\"org.nuxeo.runtime.migration\")\n+@Deploy(\"org.nuxeo.runtime.migration.tests:OSGI-INF/dummy-migration.xml\")\n+public class TestMigrationService {\n+\n+    @Inject\n+    protected MigrationService migrationService;\n+\n+    @Test\n+    public void testGetMigration() {\n+        assertDummyMigration(migrationService.getMigration(\"dummy-migration\"));\n+    }\n+\n+    @Test\n+    public void testGetMigrations() {\n+        var migrations = migrationService.getMigrations();\n+        assertEquals(2, migrations.size());\n+        assertDummyMigration(migrations.get(0));\n+        assertDummyMultiMigration(migrations.get(1));\n+    }\n+\n+    @Test\n+    public void testUnknownMigration() {\n+        assertNull(migrationService.getMigration(\"fake\"));\n+    }\n+\n+    @Test\n+    public void testProbeAndRunMigration() {\n+        // Migration with 2 sequential steps: before to after, after to reallyAfter\n+        String dummyMigration = \"dummy-migration\";\n+        assertEquals(\"before\", migrationService.getMigration(dummyMigration).getStatus().getState());\n+        migrationService.probeAndRun(dummyMigration);\n+        await().atMost(1, SECONDS)\n+               .until(() -> \"after\".equals(migrationService.getMigration(dummyMigration).getStatus().getState()));\n+        migrationService.probeAndRun(dummyMigration);\n+        await().atMost(1, SECONDS)\n+        .until(() -> \"reallyAfter\".equals(migrationService.getMigration(dummyMigration).getStatus().getState()));", "originalCommit": "062ad76d0bc2cc0adc6da73a0ee42fcfa5fd80cb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98c89ff4c23114d012b3d08a9faefb5c30d4bed0", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/TestMigrationService.java b/modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/TestMigrationService.java\nindex af5732ae5e4..30b5b88ee61 100644\n--- a/modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/TestMigrationService.java\n+++ b/modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/TestMigrationService.java\n\n@@ -76,10 +76,10 @@ public class TestMigrationService {\n                .until(() -> \"after\".equals(migrationService.getMigration(dummyMigration).getStatus().getState()));\n         migrationService.probeAndRun(dummyMigration);\n         await().atMost(1, SECONDS)\n-        .until(() -> \"reallyAfter\".equals(migrationService.getMigration(dummyMigration).getStatus().getState()));\n+               .until(() -> \"reallyAfter\".equals(migrationService.getMigration(dummyMigration).getStatus().getState()));\n         try {\n             migrationService.probeAndRun(dummyMigration);\n-            fail(\"should fail\");\n+            fail();\n         } catch (IllegalArgumentException e) {\n             assertEquals(\"Migration: dummy-migration must have only one runnable step from state: reallyAfter\",\n                     e.getMessage());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzczNDEwNg==", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r447734106", "bodyText": "Please a meaningful comment or leave it empty.", "author": "kevinleturc", "createdAt": "2020-06-30T14:36:48Z", "path": "modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/TestMigrationService.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+\n+package org.nuxeo.runtime.migration;\n+\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.awaitility.Awaitility.await;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.fail;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.RuntimeFeature;\n+\n+/**\n+ * @since 11.2\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(RuntimeFeature.class)\n+@Deploy(\"org.nuxeo.runtime.kv\")\n+@Deploy(\"org.nuxeo.runtime.cluster\")\n+@Deploy(\"org.nuxeo.runtime.migration\")\n+@Deploy(\"org.nuxeo.runtime.migration.tests:OSGI-INF/dummy-migration.xml\")\n+public class TestMigrationService {\n+\n+    @Inject\n+    protected MigrationService migrationService;\n+\n+    @Test\n+    public void testGetMigration() {\n+        assertDummyMigration(migrationService.getMigration(\"dummy-migration\"));\n+    }\n+\n+    @Test\n+    public void testGetMigrations() {\n+        var migrations = migrationService.getMigrations();\n+        assertEquals(2, migrations.size());\n+        assertDummyMigration(migrations.get(0));\n+        assertDummyMultiMigration(migrations.get(1));\n+    }\n+\n+    @Test\n+    public void testUnknownMigration() {\n+        assertNull(migrationService.getMigration(\"fake\"));\n+    }\n+\n+    @Test\n+    public void testProbeAndRunMigration() {\n+        // Migration with 2 sequential steps: before to after, after to reallyAfter\n+        String dummyMigration = \"dummy-migration\";\n+        assertEquals(\"before\", migrationService.getMigration(dummyMigration).getStatus().getState());\n+        migrationService.probeAndRun(dummyMigration);\n+        await().atMost(1, SECONDS)\n+               .until(() -> \"after\".equals(migrationService.getMigration(dummyMigration).getStatus().getState()));\n+        migrationService.probeAndRun(dummyMigration);\n+        await().atMost(1, SECONDS)\n+        .until(() -> \"reallyAfter\".equals(migrationService.getMigration(dummyMigration).getStatus().getState()));\n+        try {\n+            migrationService.probeAndRun(dummyMigration);\n+            fail(\"should fail\");", "originalCommit": "062ad76d0bc2cc0adc6da73a0ee42fcfa5fd80cb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98c89ff4c23114d012b3d08a9faefb5c30d4bed0", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/TestMigrationService.java b/modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/TestMigrationService.java\nindex af5732ae5e4..30b5b88ee61 100644\n--- a/modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/TestMigrationService.java\n+++ b/modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/TestMigrationService.java\n\n@@ -76,10 +76,10 @@ public class TestMigrationService {\n                .until(() -> \"after\".equals(migrationService.getMigration(dummyMigration).getStatus().getState()));\n         migrationService.probeAndRun(dummyMigration);\n         await().atMost(1, SECONDS)\n-        .until(() -> \"reallyAfter\".equals(migrationService.getMigration(dummyMigration).getStatus().getState()));\n+               .until(() -> \"reallyAfter\".equals(migrationService.getMigration(dummyMigration).getStatus().getState()));\n         try {\n             migrationService.probeAndRun(dummyMigration);\n-            fail(\"should fail\");\n+            fail();\n         } catch (IllegalArgumentException e) {\n             assertEquals(\"Migration: dummy-migration must have only one runnable step from state: reallyAfter\",\n                     e.getMessage());\n"}}, {"oid": "98c89ff4c23114d012b3d08a9faefb5c30d4bed0", "url": "https://github.com/nuxeo/nuxeo/commit/98c89ff4c23114d012b3d08a9faefb5c30d4bed0", "message": "NXP-29098: new migration object", "committedDate": "2020-06-30T15:18:14Z", "type": "forcePushed"}, {"oid": "2ca38ad22070400175e9e34b8d7f53dbffb66c8f", "url": "https://github.com/nuxeo/nuxeo/commit/2ca38ad22070400175e9e34b8d7f53dbffb66c8f", "message": "NXP-29098: new migration object", "committedDate": "2020-06-30T15:47:46Z", "type": "forcePushed"}, {"oid": "1f8341555b645327669f87dab47a26f48dabbd88", "url": "https://github.com/nuxeo/nuxeo/commit/1f8341555b645327669f87dab47a26f48dabbd88", "message": "NXP-29098: new migration object", "committedDate": "2020-06-30T16:19:16Z", "type": "forcePushed"}, {"oid": "3854d39e6c587f9683f5c6c5685e4c4447458648", "url": "https://github.com/nuxeo/nuxeo/commit/3854d39e6c587f9683f5c6c5685e4c4447458648", "message": "NXP-29098: new migration object", "committedDate": "2020-07-01T08:22:08Z", "type": "forcePushed"}, {"oid": "f189ad225350879feece895c1155da8756299f24", "url": "https://github.com/nuxeo/nuxeo/commit/f189ad225350879feece895c1155da8756299f24", "message": "NXP-29098: new migration object", "committedDate": "2020-07-01T13:02:47Z", "type": "forcePushed"}, {"oid": "6ed592a364c21de12c571c02027726df0c313140", "url": "https://github.com/nuxeo/nuxeo/commit/6ed592a364c21de12c571c02027726df0c313140", "message": "NXP-29098: new migration object", "committedDate": "2020-07-02T08:43:44Z", "type": "commit"}, {"oid": "6ed592a364c21de12c571c02027726df0c313140", "url": "https://github.com/nuxeo/nuxeo/commit/6ed592a364c21de12c571c02027726df0c313140", "message": "NXP-29098: new migration object", "committedDate": "2020-07-02T08:43:44Z", "type": "forcePushed"}]}