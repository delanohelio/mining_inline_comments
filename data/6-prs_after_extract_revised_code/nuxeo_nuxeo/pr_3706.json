{"pr_number": 3706, "pr_title": "fix-NXP-28560-catch-enrichers-exceptions", "pr_createdAt": "2020-01-28T23:02:26Z", "pr_url": "https://github.com/nuxeo/nuxeo/pull/3706", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEzMjUzNg==", "url": "https://github.com/nuxeo/nuxeo/pull/3706#discussion_r372132536", "bodyText": "We format constants before fields.", "author": "efge", "createdAt": "2020-01-29T00:25:12Z", "path": "nuxeo-core/nuxeo-core-io/src/main/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/AbstractJsonEnricher.java", "diffHunk": "@@ -37,10 +37,10 @@\n  */\n public abstract class AbstractJsonEnricher<EntityType> extends AbstractJsonWriter<Enriched<EntityType>> {\n \n-    public static final String ENTITY_ENRICHER_NAME = \"_EntityEnricherName\";\n-\n     private final String name;\n \n+    public static final String ENTITY_ENRICHER_NAME = \"_EntityEnricherName\";", "originalCommit": "2224bcc5e6c1e708fad241070a1bd7dc62fb6dc6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "38db46c742bff93450e49f193783a15fac1dfe90", "chunk": "diff --git a/nuxeo-core/nuxeo-core-io/src/main/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/AbstractJsonEnricher.java b/nuxeo-core/nuxeo-core-io/src/main/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/AbstractJsonEnricher.java\nindex 606cb0d9741..61f8443d94a 100644\n--- a/nuxeo-core/nuxeo-core-io/src/main/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/AbstractJsonEnricher.java\n+++ b/nuxeo-core/nuxeo-core-io/src/main/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/AbstractJsonEnricher.java\n\n@@ -37,6 +39,8 @@ import com.fasterxml.jackson.core.JsonGenerator;\n  */\n public abstract class AbstractJsonEnricher<EntityType> extends AbstractJsonWriter<Enriched<EntityType>> {\n \n+    private static final Logger log = LogManager.getLogger(AbstractJsonEnricher.class);\n+\n     private final String name;\n \n     public static final String ENTITY_ENRICHER_NAME = \"_EntityEnricherName\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEzMjc5NA==", "url": "https://github.com/nuxeo/nuxeo/pull/3706#discussion_r372132794", "bodyText": "log.error(e, e) otherwise with what you wrote the stacktrace is not logged.\nAlso worth adding a // TODO collect exception and return it to the caller", "author": "efge", "createdAt": "2020-01-29T00:26:05Z", "path": "nuxeo-core/nuxeo-core-io/src/main/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/AbstractJsonEnricher.java", "diffHunk": "@@ -51,8 +55,12 @@ public boolean accept(Class<?> clazz, Type genericType, MediaType mediatype) {\n     }\n \n     @Override\n-    public void write(Enriched<EntityType> enrichable, JsonGenerator jg) throws IOException {\n-        write(jg, enrichable.getEntity());\n+    public void write(Enriched<EntityType> enrichable, JsonGenerator jg) {\n+        try {\n+            write(jg, enrichable.getEntity());\n+        } catch (IOException e) {\n+            log.error(e);", "originalCommit": "3ac5af9861f850c8bd10b20a20f557654c7dd6d1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "38db46c742bff93450e49f193783a15fac1dfe90", "chunk": "diff --git a/nuxeo-core/nuxeo-core-io/src/main/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/AbstractJsonEnricher.java b/nuxeo-core/nuxeo-core-io/src/main/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/AbstractJsonEnricher.java\nindex b4d34a82869..61f8443d94a 100644\n--- a/nuxeo-core/nuxeo-core-io/src/main/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/AbstractJsonEnricher.java\n+++ b/nuxeo-core/nuxeo-core-io/src/main/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/AbstractJsonEnricher.java\n\n@@ -59,7 +59,7 @@ public abstract class AbstractJsonEnricher<EntityType> extends AbstractJsonWrite\n         try {\n             write(jg, enrichable.getEntity());\n         } catch (IOException e) {\n-            log.error(e);\n+            log.error(e, e);\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEzMzA4OA==", "url": "https://github.com/nuxeo/nuxeo/pull/3706#discussion_r372133088", "bodyText": "No need for try/catch, the test itself failing is enough (and more informative with respect to the exception).", "author": "efge", "createdAt": "2020-01-29T00:27:22Z", "path": "nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/enrichers/FailingEnricherTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour \"AIR\" AL KOTOB\n+ */\n+\n+package org.nuxeo.ecm.restapi.test.enrichers;\n+\n+import static org.junit.Assert.fail;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.PathRef;\n+import org.nuxeo.ecm.core.io.marshallers.json.AbstractJsonWriterTest;\n+import org.nuxeo.ecm.core.io.marshallers.json.document.DocumentModelJsonWriter;\n+import org.nuxeo.ecm.core.io.registry.context.RenderingContext.CtxBuilder;\n+import org.nuxeo.ecm.core.test.annotations.Granularity;\n+import org.nuxeo.ecm.core.test.annotations.RepositoryConfig;\n+import org.nuxeo.ecm.restapi.test.RestServerFeature;\n+import org.nuxeo.ecm.restapi.test.RestServerInit;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features({ RestServerFeature.class })\n+@RepositoryConfig(cleanup = Granularity.METHOD, init = RestServerInit.class)\n+@Deploy(\"org.nuxeo.ecm.platform.restapi.test.test:enrichers-contrib.xml\")\n+public class FailingEnricherTest\n+        extends AbstractJsonWriterTest.External<DocumentModelJsonWriter, DocumentModel> {\n+\n+    public FailingEnricherTest() {\n+        super(DocumentModelJsonWriter.class, DocumentModel.class);\n+    }\n+\n+    @Inject\n+    private CoreSession session;\n+\n+    @Test\n+    public void test() {\n+        DocumentModel root = session.getDocument(new PathRef(\"/\"));\n+        // Use the given URL codec name\n+        try {\n+            jsonAssert(root, CtxBuilder.enrichDoc(\"failingEnricher\").get());\n+        } catch (Exception e) {", "originalCommit": "3ac5af9861f850c8bd10b20a20f557654c7dd6d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE5MjQwOQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3706#discussion_r372192409", "bodyText": "\ud83d\udc4d I also added a logCatcher as it is requested explicitly to log the error.", "author": "NourNuxeo", "createdAt": "2020-01-29T05:18:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEzMzA4OA=="}], "type": "inlineReview", "revised_code": {"commit": "38db46c742bff93450e49f193783a15fac1dfe90", "chunk": "diff --git a/nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/enrichers/FailingEnricherTest.java b/nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/enrichers/FailingEnricherTest.java\nindex 7b017f67405..d839ec83994 100644\n--- a/nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/enrichers/FailingEnricherTest.java\n+++ b/nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/enrichers/FailingEnricherTest.java\n\n@@ -19,10 +19,14 @@\n \n package org.nuxeo.ecm.restapi.test.enrichers;\n \n-import static org.junit.Assert.fail;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import java.util.List;\n \n import javax.inject.Inject;\n \n+import org.apache.logging.log4j.core.LogEvent;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.nuxeo.ecm.core.api.CoreSession;\n"}}, {"oid": "38db46c742bff93450e49f193783a15fac1dfe90", "url": "https://github.com/nuxeo/nuxeo/commit/38db46c742bff93450e49f193783a15fac1dfe90", "message": "NXP-28560: Catch AbstractJsonEnrichers IOException", "committedDate": "2020-01-29T05:10:49Z", "type": "forcePushed"}, {"oid": "ec3ef27dd142f340e299f30fd7606ea5bf5a1348", "url": "https://github.com/nuxeo/nuxeo/commit/ec3ef27dd142f340e299f30fd7606ea5bf5a1348", "message": "NXP-28560: Cleanup / Format", "committedDate": "2020-01-29T05:29:04Z", "type": "commit"}, {"oid": "56b7b2f521ec93011387a952fd1f4b24a2638693", "url": "https://github.com/nuxeo/nuxeo/commit/56b7b2f521ec93011387a952fd1f4b24a2638693", "message": "NXP-28560: catch AbstractJsonEnrichers IOException", "committedDate": "2020-01-29T05:32:55Z", "type": "forcePushed"}, {"oid": "abb0fccaa54d5b16afbb32d2d930410f39a3cc90", "url": "https://github.com/nuxeo/nuxeo/commit/abb0fccaa54d5b16afbb32d2d930410f39a3cc90", "message": "NXP-28560: catch AbstractJsonEnrichers IOException", "committedDate": "2020-01-29T05:35:03Z", "type": "forcePushed"}, {"oid": "f49760ab1d2175bb579eeb75706aba76b272a304", "url": "https://github.com/nuxeo/nuxeo/commit/f49760ab1d2175bb579eeb75706aba76b272a304", "message": "NXP-28560: catch AbstractJsonEnrichers IOException", "committedDate": "2020-01-29T05:37:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI4MDE3NA==", "url": "https://github.com/nuxeo/nuxeo/pull/3706#discussion_r372280174", "bodyText": "protected", "author": "efge", "createdAt": "2020-01-29T09:45:48Z", "path": "nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/enrichers/FailingEnricherTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour \"AIR\" AL KOTOB\n+ */\n+\n+package org.nuxeo.ecm.restapi.test.enrichers;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.PathRef;\n+import org.nuxeo.ecm.core.io.marshallers.json.AbstractJsonWriterTest;\n+import org.nuxeo.ecm.core.io.marshallers.json.document.DocumentModelJsonWriter;\n+import org.nuxeo.ecm.core.io.registry.context.RenderingContext.CtxBuilder;\n+import org.nuxeo.ecm.core.test.annotations.Granularity;\n+import org.nuxeo.ecm.core.test.annotations.RepositoryConfig;\n+import org.nuxeo.ecm.restapi.test.RestServerFeature;\n+import org.nuxeo.ecm.restapi.test.RestServerInit;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.LogCaptureFeature;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features({ LogCaptureFeature.class, RestServerFeature.class })\n+@RepositoryConfig(cleanup = Granularity.METHOD, init = RestServerInit.class)\n+@Deploy(\"org.nuxeo.ecm.platform.restapi.test.test:enrichers-contrib.xml\")\n+public class FailingEnricherTest\n+        extends AbstractJsonWriterTest.External<DocumentModelJsonWriter, DocumentModel> {\n+\n+    @Inject\n+    protected LogCaptureFeature.Result logCaptureResult;\n+\n+    public FailingEnricherTest() {\n+        super(DocumentModelJsonWriter.class, DocumentModel.class);\n+    }\n+\n+    @Inject\n+    private CoreSession session;", "originalCommit": "f49760ab1d2175bb579eeb75706aba76b272a304", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e11acf0e6cbf9336c495cfa6fe28431aa976ae07", "chunk": "diff --git a/nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/enrichers/FailingEnricherTest.java b/nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/enrichers/FailingEnricherTest.java\nindex d839ec83994..32ceb90dc5c 100644\n--- a/nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/enrichers/FailingEnricherTest.java\n+++ b/nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/enrichers/FailingEnricherTest.java\n\n@@ -59,12 +59,12 @@ public class FailingEnricherTest\n     }\n \n     @Inject\n-    private CoreSession session;\n+    protected CoreSession session;\n \n     @LogCaptureFeature.FilterOn(logLevel = \"ERROR\")\n     @Test\n     public void test() throws IOException {\n-        DocumentModel root = session.getDocument(new PathRef(\"/\"));\n+        DocumentModel root = session.getRootDocument();\n         // shouldn't throw\n         jsonAssert(root, CtxBuilder.enrichDoc(\"failingEnricher\").get());\n         List<LogEvent> caughtEvents = logCaptureResult.getCaughtEvents();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI4MTI0NA==", "url": "https://github.com/nuxeo/nuxeo/pull/3706#discussion_r372281244", "bodyText": "session.getRootDocument()", "author": "efge", "createdAt": "2020-01-29T09:47:50Z", "path": "nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/enrichers/FailingEnricherTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour \"AIR\" AL KOTOB\n+ */\n+\n+package org.nuxeo.ecm.restapi.test.enrichers;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.PathRef;\n+import org.nuxeo.ecm.core.io.marshallers.json.AbstractJsonWriterTest;\n+import org.nuxeo.ecm.core.io.marshallers.json.document.DocumentModelJsonWriter;\n+import org.nuxeo.ecm.core.io.registry.context.RenderingContext.CtxBuilder;\n+import org.nuxeo.ecm.core.test.annotations.Granularity;\n+import org.nuxeo.ecm.core.test.annotations.RepositoryConfig;\n+import org.nuxeo.ecm.restapi.test.RestServerFeature;\n+import org.nuxeo.ecm.restapi.test.RestServerInit;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.LogCaptureFeature;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features({ LogCaptureFeature.class, RestServerFeature.class })\n+@RepositoryConfig(cleanup = Granularity.METHOD, init = RestServerInit.class)\n+@Deploy(\"org.nuxeo.ecm.platform.restapi.test.test:enrichers-contrib.xml\")\n+public class FailingEnricherTest\n+        extends AbstractJsonWriterTest.External<DocumentModelJsonWriter, DocumentModel> {\n+\n+    @Inject\n+    protected LogCaptureFeature.Result logCaptureResult;\n+\n+    public FailingEnricherTest() {\n+        super(DocumentModelJsonWriter.class, DocumentModel.class);\n+    }\n+\n+    @Inject\n+    private CoreSession session;\n+\n+    @LogCaptureFeature.FilterOn(logLevel = \"ERROR\")\n+    @Test\n+    public void test() throws IOException {\n+        DocumentModel root = session.getDocument(new PathRef(\"/\"));", "originalCommit": "f49760ab1d2175bb579eeb75706aba76b272a304", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e11acf0e6cbf9336c495cfa6fe28431aa976ae07", "chunk": "diff --git a/nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/enrichers/FailingEnricherTest.java b/nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/enrichers/FailingEnricherTest.java\nindex d839ec83994..32ceb90dc5c 100644\n--- a/nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/enrichers/FailingEnricherTest.java\n+++ b/nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/enrichers/FailingEnricherTest.java\n\n@@ -59,12 +59,12 @@ public class FailingEnricherTest\n     }\n \n     @Inject\n-    private CoreSession session;\n+    protected CoreSession session;\n \n     @LogCaptureFeature.FilterOn(logLevel = \"ERROR\")\n     @Test\n     public void test() throws IOException {\n-        DocumentModel root = session.getDocument(new PathRef(\"/\"));\n+        DocumentModel root = session.getRootDocument();\n         // shouldn't throw\n         jsonAssert(root, CtxBuilder.enrichDoc(\"failingEnricher\").get());\n         List<LogEvent> caughtEvents = logCaptureResult.getCaughtEvents();\n"}}, {"oid": "e11acf0e6cbf9336c495cfa6fe28431aa976ae07", "url": "https://github.com/nuxeo/nuxeo/commit/e11acf0e6cbf9336c495cfa6fe28431aa976ae07", "message": "NXP-28560: catch AbstractJsonEnrichers IOException", "committedDate": "2020-01-29T09:58:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI4NTcyMw==", "url": "https://github.com/nuxeo/nuxeo/pull/3706#discussion_r372285723", "bodyText": "What if the enricher throws another exception than IOException? For instance a NuxeoException?\nI think you need to deal with catching Exception and follows https://doc.nuxeo.com/corg/catching-exceptions/#calling-something-declared-as-throws-exception about InterruptedException.\nI don't think catching IOException and NuxeoException only is enough here, WDYT @efge ?", "author": "troger", "createdAt": "2020-01-29T09:56:14Z", "path": "nuxeo-core/nuxeo-core-io/src/main/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/AbstractJsonEnricher.java", "diffHunk": "@@ -51,8 +55,13 @@ public boolean accept(Class<?> clazz, Type genericType, MediaType mediatype) {\n     }\n \n     @Override\n-    public void write(Enriched<EntityType> enrichable, JsonGenerator jg) throws IOException {\n-        write(jg, enrichable.getEntity());\n+    public void write(Enriched<EntityType> enrichable, JsonGenerator jg) {\n+        try {\n+            write(jg, enrichable.getEntity());\n+        } catch (IOException e) {", "originalCommit": "f49760ab1d2175bb579eeb75706aba76b272a304", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMxODc2Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/3706#discussion_r372318763", "bodyText": "Yes it's very likely we'll want to catch a more general set of errors. Typically we'll want to catch NuxeoException, NullPointerException, IllegalArgumentException, etc. So yes catch Exception and follow the guidelines to deal with InterruptedException correctly.", "author": "efge", "createdAt": "2020-01-29T11:04:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI4NTcyMw=="}], "type": "inlineReview", "revised_code": {"commit": "63087b912b4ca85ebb6303a09bce43e25aac00bb", "chunk": "diff --git a/nuxeo-core/nuxeo-core-io/src/main/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/AbstractJsonEnricher.java b/nuxeo-core/nuxeo-core-io/src/main/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/AbstractJsonEnricher.java\nindex 11ec23dd628..febfe5c5e74 100644\n--- a/nuxeo-core/nuxeo-core-io/src/main/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/AbstractJsonEnricher.java\n+++ b/nuxeo-core/nuxeo-core-io/src/main/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/AbstractJsonEnricher.java\n\n@@ -58,7 +58,7 @@ public abstract class AbstractJsonEnricher<EntityType> extends AbstractJsonWrite\n     public void write(Enriched<EntityType> enrichable, JsonGenerator jg) {\n         try {\n             write(jg, enrichable.getEntity());\n-        } catch (IOException e) {\n+        } catch (Exception e) {\n             // TODO collect exception and return it to the caller\n             log.error(e, e);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI4NzM3Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/3706#discussion_r372287376", "bodyText": "Use FailingEnricher.NAME.", "author": "troger", "createdAt": "2020-01-29T09:59:21Z", "path": "nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/enrichers/FailingEnricherTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour \"AIR\" AL KOTOB\n+ */\n+\n+package org.nuxeo.ecm.restapi.test.enrichers;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.PathRef;\n+import org.nuxeo.ecm.core.io.marshallers.json.AbstractJsonWriterTest;\n+import org.nuxeo.ecm.core.io.marshallers.json.document.DocumentModelJsonWriter;\n+import org.nuxeo.ecm.core.io.registry.context.RenderingContext.CtxBuilder;\n+import org.nuxeo.ecm.core.test.annotations.Granularity;\n+import org.nuxeo.ecm.core.test.annotations.RepositoryConfig;\n+import org.nuxeo.ecm.restapi.test.RestServerFeature;\n+import org.nuxeo.ecm.restapi.test.RestServerInit;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.LogCaptureFeature;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features({ LogCaptureFeature.class, RestServerFeature.class })\n+@RepositoryConfig(cleanup = Granularity.METHOD, init = RestServerInit.class)\n+@Deploy(\"org.nuxeo.ecm.platform.restapi.test.test:enrichers-contrib.xml\")\n+public class FailingEnricherTest\n+        extends AbstractJsonWriterTest.External<DocumentModelJsonWriter, DocumentModel> {\n+\n+    @Inject\n+    protected LogCaptureFeature.Result logCaptureResult;\n+\n+    public FailingEnricherTest() {\n+        super(DocumentModelJsonWriter.class, DocumentModel.class);\n+    }\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @LogCaptureFeature.FilterOn(logLevel = \"ERROR\")\n+    @Test\n+    public void test() throws IOException {\n+        DocumentModel root = session.getRootDocument();\n+        // shouldn't throw\n+        jsonAssert(root, CtxBuilder.enrichDoc(\"failingEnricher\").get());", "originalCommit": "e11acf0e6cbf9336c495cfa6fe28431aa976ae07", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "63087b912b4ca85ebb6303a09bce43e25aac00bb", "chunk": "diff --git a/nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/enrichers/FailingEnricherTest.java b/nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/FailingEnricherTest.java\nsimilarity index 74%\nrename from nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/enrichers/FailingEnricherTest.java\nrename to nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/FailingEnricherTest.java\nindex 32ceb90dc5c..abfdf0a8640 100644\n--- a/nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/enrichers/FailingEnricherTest.java\n+++ b/nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/FailingEnricherTest.java\n\n@@ -14,10 +14,10 @@\n  * limitations under the License.\n  *\n  * Contributors:\n- *     Nour \"AIR\" AL KOTOB\n+ *     Nour AL KOTOB\n  */\n \n-package org.nuxeo.ecm.restapi.test.enrichers;\n+package org.nuxeo.ecm.core.io.marshallers.json.enrichers;\n \n import static org.junit.Assert.assertEquals;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI4ODY2MA==", "url": "https://github.com/nuxeo/nuxeo/pull/3706#discussion_r372288660", "bodyText": "This test should go to nuxeo-core-test module with other enricher tests.", "author": "troger", "createdAt": "2020-01-29T10:01:50Z", "path": "nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/enrichers/FailingEnricherTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour \"AIR\" AL KOTOB\n+ */\n+\n+package org.nuxeo.ecm.restapi.test.enrichers;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.PathRef;\n+import org.nuxeo.ecm.core.io.marshallers.json.AbstractJsonWriterTest;\n+import org.nuxeo.ecm.core.io.marshallers.json.document.DocumentModelJsonWriter;\n+import org.nuxeo.ecm.core.io.registry.context.RenderingContext.CtxBuilder;\n+import org.nuxeo.ecm.core.test.annotations.Granularity;\n+import org.nuxeo.ecm.core.test.annotations.RepositoryConfig;\n+import org.nuxeo.ecm.restapi.test.RestServerFeature;\n+import org.nuxeo.ecm.restapi.test.RestServerInit;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.LogCaptureFeature;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features({ LogCaptureFeature.class, RestServerFeature.class })\n+@RepositoryConfig(cleanup = Granularity.METHOD, init = RestServerInit.class)\n+@Deploy(\"org.nuxeo.ecm.platform.restapi.test.test:enrichers-contrib.xml\")\n+public class FailingEnricherTest", "originalCommit": "e11acf0e6cbf9336c495cfa6fe28431aa976ae07", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMxNDE3NA==", "url": "https://github.com/nuxeo/nuxeo/pull/3706#discussion_r372314174", "bodyText": "Then I'll move the FailingEnricher with it as it is", "author": "NourNuxeo", "createdAt": "2020-01-29T10:54:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI4ODY2MA=="}], "type": "inlineReview", "revised_code": {"commit": "63087b912b4ca85ebb6303a09bce43e25aac00bb", "chunk": "diff --git a/nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/enrichers/FailingEnricherTest.java b/nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/FailingEnricherTest.java\nsimilarity index 74%\nrename from nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/enrichers/FailingEnricherTest.java\nrename to nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/FailingEnricherTest.java\nindex 32ceb90dc5c..abfdf0a8640 100644\n--- a/nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/enrichers/FailingEnricherTest.java\n+++ b/nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/FailingEnricherTest.java\n\n@@ -14,10 +14,10 @@\n  * limitations under the License.\n  *\n  * Contributors:\n- *     Nour \"AIR\" AL KOTOB\n+ *     Nour AL KOTOB\n  */\n \n-package org.nuxeo.ecm.restapi.test.enrichers;\n+package org.nuxeo.ecm.core.io.marshallers.json.enrichers;\n \n import static org.junit.Assert.assertEquals;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI5NTIzOA==", "url": "https://github.com/nuxeo/nuxeo/pull/3706#discussion_r372295238", "bodyText": "I would have put a more meaningful message here, such as \"Simulated exception for test purpose\".", "author": "troger", "createdAt": "2020-01-29T10:14:54Z", "path": "nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/enrichers/FailingEnricher.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+\n+package org.nuxeo.ecm.restapi.test.enrichers;\n+\n+import static org.nuxeo.ecm.core.io.registry.reflect.Instantiations.SINGLETON;\n+import static org.nuxeo.ecm.core.io.registry.reflect.Priorities.REFERENCE;\n+\n+import java.io.IOException;\n+\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.io.marshallers.json.enrichers.AbstractJsonEnricher;\n+import org.nuxeo.ecm.core.io.registry.reflect.Setup;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+\n+@Setup(mode = SINGLETON, priority = REFERENCE)\n+public class FailingEnricher extends AbstractJsonEnricher<DocumentModel> {\n+\n+    public static final String NAME = \"failingEnricher\";\n+\n+    public FailingEnricher() {\n+        super(NAME);\n+    }\n+\n+    @Override\n+    public void write(JsonGenerator jg, DocumentModel enriched) throws IOException {\n+        throw new IOException(\"oh yeah!\");", "originalCommit": "e11acf0e6cbf9336c495cfa6fe28431aa976ae07", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "63087b912b4ca85ebb6303a09bce43e25aac00bb", "chunk": "diff --git a/nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/enrichers/FailingEnricher.java b/nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/FailingEnricher.java\nsimilarity index 91%\nrename from nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/enrichers/FailingEnricher.java\nrename to nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/FailingEnricher.java\nindex ea59a3196b3..a5dbf9f4d0e 100644\n--- a/nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/enrichers/FailingEnricher.java\n+++ b/nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/FailingEnricher.java\n\n@@ -17,7 +17,7 @@\n  *     Nour AL KOTOB\n  */\n \n-package org.nuxeo.ecm.restapi.test.enrichers;\n+package org.nuxeo.ecm.core.io.marshallers.json.enrichers;\n \n import static org.nuxeo.ecm.core.io.registry.reflect.Instantiations.SINGLETON;\n import static org.nuxeo.ecm.core.io.registry.reflect.Priorities.REFERENCE;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI5NTUxNA==", "url": "https://github.com/nuxeo/nuxeo/pull/3706#discussion_r372295514", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *     Nour \"AIR\" AL KOTOB\n          \n          \n            \n             *     Nour AL KOTOB\n          \n      \n    \n    \n  \n\n? \ud83d\ude04", "author": "troger", "createdAt": "2020-01-29T10:15:21Z", "path": "nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/enrichers/FailingEnricherTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour \"AIR\" AL KOTOB", "originalCommit": "e11acf0e6cbf9336c495cfa6fe28431aa976ae07", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMxMDU4Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/3706#discussion_r372310582", "bodyText": "Grilled \ud83d\ude2c", "author": "NourNuxeo", "createdAt": "2020-01-29T10:46:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI5NTUxNA=="}], "type": "inlineReview", "revised_code": {"commit": "63087b912b4ca85ebb6303a09bce43e25aac00bb", "chunk": "diff --git a/nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/enrichers/FailingEnricherTest.java b/nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/FailingEnricherTest.java\nsimilarity index 74%\nrename from nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/enrichers/FailingEnricherTest.java\nrename to nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/FailingEnricherTest.java\nindex 32ceb90dc5c..abfdf0a8640 100644\n--- a/nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/enrichers/FailingEnricherTest.java\n+++ b/nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/FailingEnricherTest.java\n\n@@ -14,10 +14,10 @@\n  * limitations under the License.\n  *\n  * Contributors:\n- *     Nour \"AIR\" AL KOTOB\n+ *     Nour AL KOTOB\n  */\n \n-package org.nuxeo.ecm.restapi.test.enrichers;\n+package org.nuxeo.ecm.core.io.marshallers.json.enrichers;\n \n import static org.junit.Assert.assertEquals;\n \n"}}, {"oid": "63087b912b4ca85ebb6303a09bce43e25aac00bb", "url": "https://github.com/nuxeo/nuxeo/commit/63087b912b4ca85ebb6303a09bce43e25aac00bb", "message": "NXP-28560: catch AbstractJsonEnrichers IOException", "committedDate": "2020-01-29T11:03:39Z", "type": "forcePushed"}, {"oid": "5dee2faaad120cfc6ff22b6c80320755a4e1313a", "url": "https://github.com/nuxeo/nuxeo/commit/5dee2faaad120cfc6ff22b6c80320755a4e1313a", "message": "NXP-28560: catch AbstractJsonEnrichers Exception", "committedDate": "2020-01-29T11:04:39Z", "type": "forcePushed"}, {"oid": "7ccf3bf835ec45a24f3d0b3f3d5d8a71395d3fdc", "url": "https://github.com/nuxeo/nuxeo/commit/7ccf3bf835ec45a24f3d0b3f3d5d8a71395d3fdc", "message": "NXP-28560: catch AbstractJsonEnrichers Exception", "committedDate": "2020-01-29T11:12:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMyNDQyMA==", "url": "https://github.com/nuxeo/nuxeo/pull/3706#discussion_r372324420", "bodyText": "If you receive an InterruptedException you must stop processing immediately, so throw new RuntimeException(\"interrupted\", e). Again, please read the doc https://doc.nuxeo.com/corg/catching-exceptions/#calling-something-declared-as-throws-exception", "author": "efge", "createdAt": "2020-01-29T11:17:21Z", "path": "nuxeo-core/nuxeo-core-io/src/main/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/AbstractJsonEnricher.java", "diffHunk": "@@ -51,8 +55,16 @@ public boolean accept(Class<?> clazz, Type genericType, MediaType mediatype) {\n     }\n \n     @Override\n-    public void write(Enriched<EntityType> enrichable, JsonGenerator jg) throws IOException {\n-        write(jg, enrichable.getEntity());\n+    public void write(Enriched<EntityType> enrichable, JsonGenerator jg) {\n+        try {\n+            write(jg, enrichable.getEntity());\n+        } catch (Exception e) {\n+            if (e instanceof InterruptedException) {\n+                Thread.currentThread().interrupt();\n+            }", "originalCommit": "7ccf3bf835ec45a24f3d0b3f3d5d8a71395d3fdc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMyNzEwMQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3706#discussion_r372327101", "bodyText": "I read it but then we defeat the purpose of the ticket which is for the response not to fail because of an enricher failure.\nAlright ! Thanks for F2F extra explenations", "author": "NourNuxeo", "createdAt": "2020-01-29T11:23:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMyNDQyMA=="}], "type": "inlineReview", "revised_code": {"commit": "d3a7672b45d0ec91e1e802dd8cab54aaa7b37581", "chunk": "diff --git a/nuxeo-core/nuxeo-core-io/src/main/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/AbstractJsonEnricher.java b/nuxeo-core/nuxeo-core-io/src/main/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/AbstractJsonEnricher.java\nindex 79e66e017b8..27fe671b07f 100644\n--- a/nuxeo-core/nuxeo-core-io/src/main/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/AbstractJsonEnricher.java\n+++ b/nuxeo-core/nuxeo-core-io/src/main/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/AbstractJsonEnricher.java\n\n@@ -61,9 +61,12 @@ public abstract class AbstractJsonEnricher<EntityType> extends AbstractJsonWrite\n         } catch (Exception e) {\n             if (e instanceof InterruptedException) {\n                 Thread.currentThread().interrupt();\n+                log.error(\"interrupted\", e);\n+                throw new RuntimeException(\"interrupted\", e); // NOSONAR\n+            } else {\n+                // TODO collect exception and return it to the caller\n+                log.error(e, e);\n             }\n-            // TODO collect exception and return it to the caller\n-            log.error(e, e);\n         }\n     }\n \n"}}, {"oid": "d3a7672b45d0ec91e1e802dd8cab54aaa7b37581", "url": "https://github.com/nuxeo/nuxeo/commit/d3a7672b45d0ec91e1e802dd8cab54aaa7b37581", "message": "NXP-28560: catch AbstractJsonEnrichers Exception", "committedDate": "2020-01-29T11:49:03Z", "type": "forcePushed"}, {"oid": "a8a4c60f39a3ce9b4d18b3e3bff5dd489d97f4f5", "url": "https://github.com/nuxeo/nuxeo/commit/a8a4c60f39a3ce9b4d18b3e3bff5dd489d97f4f5", "message": "NXP-28560: catch AbstractJsonEnrichers Exception", "committedDate": "2020-01-29T12:10:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM4Nzk1Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/3706#discussion_r372387956", "bodyText": "This class seems not formatted correctly.", "author": "troger", "createdAt": "2020-01-29T13:42:33Z", "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/FailingEnricherTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+\n+package org.nuxeo.ecm.core.io.marshallers.json.enrichers;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.io.marshallers.json.AbstractJsonWriterTest;\n+import org.nuxeo.ecm.core.io.marshallers.json.document.DocumentModelJsonWriter;\n+import org.nuxeo.ecm.core.io.registry.context.RenderingContext.CtxBuilder;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.LogCaptureFeature;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features({ LogCaptureFeature.class, CoreFeature.class })\n+@Deploy(\"org.nuxeo.ecm.core.test.tests:enrichers-contrib.xml\")\n+public class FailingEnricherTest", "originalCommit": "a8a4c60f39a3ce9b4d18b3e3bff5dd489d97f4f5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0db60b2cd5acb9e4e7ce788f1b55e8d6683441d2", "chunk": "diff --git a/nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/FailingEnricherTest.java b/nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/FailingEnricherTest.java\nindex abfdf0a8640..e1084bfaea5 100644\n--- a/nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/FailingEnricherTest.java\n+++ b/nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/FailingEnricherTest.java\n\n@@ -43,8 +43,7 @@ import org.nuxeo.runtime.test.runner.LogCaptureFeature;\n @RunWith(FeaturesRunner.class)\n @Features({ LogCaptureFeature.class, CoreFeature.class })\n @Deploy(\"org.nuxeo.ecm.core.test.tests:enrichers-contrib.xml\")\n-public class FailingEnricherTest\n-        extends AbstractJsonWriterTest.External<DocumentModelJsonWriter, DocumentModel> {\n+public class FailingEnricherTest extends AbstractJsonWriterTest.External<DocumentModelJsonWriter, DocumentModel> {\n \n     @Inject\n     protected LogCaptureFeature.Result logCaptureResult;\n"}}, {"oid": "0db60b2cd5acb9e4e7ce788f1b55e8d6683441d2", "url": "https://github.com/nuxeo/nuxeo/commit/0db60b2cd5acb9e4e7ce788f1b55e8d6683441d2", "message": "NXP-28560: catch AbstractJsonEnrichers Exception", "committedDate": "2020-01-29T13:45:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg2MjY2MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3706#discussion_r372862661", "bodyText": "Thinking of it, I would log it at INFO or DEBUG level. Not sure it's a good idea to fill the server logs with errors when doing calls asking for an enricher that fails.\nLooking at the initial issue NXP-28047, it seems legitimate to me to define a set of enrichers used for all calls of an application, even if they should not be applicable for all calls.\nWDYT @kevinleturc @efge ?", "author": "troger", "createdAt": "2020-01-30T10:15:23Z", "path": "nuxeo-core/nuxeo-core-io/src/main/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/AbstractJsonEnricher.java", "diffHunk": "@@ -51,8 +55,18 @@ public boolean accept(Class<?> clazz, Type genericType, MediaType mediatype) {\n     }\n \n     @Override\n-    public void write(Enriched<EntityType> enrichable, JsonGenerator jg) throws IOException {\n-        write(jg, enrichable.getEntity());\n+    public void write(Enriched<EntityType> enrichable, JsonGenerator jg) {\n+        try {\n+            write(jg, enrichable.getEntity());\n+        } catch (Exception e) {\n+            if (e instanceof InterruptedException) {\n+                Thread.currentThread().interrupt();\n+                throw new RuntimeException(\"interrupted\", e); // NOSONAR\n+            } else {\n+                // TODO collect exception and return it to the caller\n+                log.error(e, e);", "originalCommit": "0db60b2cd5acb9e4e7ce788f1b55e8d6683441d2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk0MDQ2Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/3706#discussion_r372940467", "bodyText": "But even then these enrichers shouldn't fail with an exception, they should gracefully return nothing. I really don't see a good reason to hide an exception here.", "author": "efge", "createdAt": "2020-01-30T13:16:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg2MjY2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk0MTkyMQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3706#discussion_r372941921", "bodyText": "I'm in favor of an info log with a specific message, not the exception, and keep the exception as 2nd argument for the stack.\nAlso, we can have something like this (but overkill IMHO):\nif (log.isInfoEnabled()) {\n    log.info(\"message\", e);\n} else {\n    log.warn(\"message\");\n}", "author": "kevinleturc", "createdAt": "2020-01-30T13:19:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg2MjY2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk1NTU0NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3706#discussion_r372955545", "bodyText": "Since I can't make sure how each writer does handle  failure and some may return exceptions when they should just fail gracefully, log.info seems to be a workaround to make them fail silently if not gracefully.\nAbout the conditional structure, I don't think it is overkill. Because in the case info is not enabled then people might search why enrichment is not done in the requests rather than in the writer. But I went for a simple log.info(\"enrichment failed\", e);", "author": "NourNuxeo", "createdAt": "2020-01-30T13:46:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg2MjY2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk4NDQ2OA==", "url": "https://github.com/nuxeo/nuxeo/pull/3706#discussion_r372984468", "bodyText": "There's still not the message in the code \ud83e\udd14did you push?", "author": "kevinleturc", "createdAt": "2020-01-30T14:36:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg2MjY2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzAwMDQwMg==", "url": "https://github.com/nuxeo/nuxeo/pull/3706#discussion_r373000402", "bodyText": "I did, but that would override the message in the exception thrown by the writer implementation.\nI found the message thrown by FailingEnricher to be more specific than a static one I would put in the abstract.\nSo I reverted it when complying to #3706 (comment)", "author": "NourNuxeo", "createdAt": "2020-01-30T15:01:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg2MjY2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "0b2329c34aaabdb3e1be302126563a5db0533d63", "chunk": "diff --git a/nuxeo-core/nuxeo-core-io/src/main/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/AbstractJsonEnricher.java b/nuxeo-core/nuxeo-core-io/src/main/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/AbstractJsonEnricher.java\nindex 4a225150cfd..ec928d45d11 100644\n--- a/nuxeo-core/nuxeo-core-io/src/main/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/AbstractJsonEnricher.java\n+++ b/nuxeo-core/nuxeo-core-io/src/main/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/AbstractJsonEnricher.java\n\n@@ -64,7 +64,7 @@ public abstract class AbstractJsonEnricher<EntityType> extends AbstractJsonWrite\n                 throw new RuntimeException(\"interrupted\", e); // NOSONAR\n             } else {\n                 // TODO collect exception and return it to the caller\n-                log.error(e, e);\n+                log.info(\"enrichment failed\", e);\n             }\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk1MDgxNg==", "url": "https://github.com/nuxeo/nuxeo/pull/3706#discussion_r372950816", "bodyText": "You could use this:\norg.nuxeo.common.utils.ExceptionUtils.checkInterrupt(e);\nand get rid of these three lines + if / else.", "author": "kevinleturc", "createdAt": "2020-01-30T13:37:43Z", "path": "nuxeo-core/nuxeo-core-io/src/main/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/AbstractJsonEnricher.java", "diffHunk": "@@ -51,8 +55,18 @@ public boolean accept(Class<?> clazz, Type genericType, MediaType mediatype) {\n     }\n \n     @Override\n-    public void write(Enriched<EntityType> enrichable, JsonGenerator jg) throws IOException {\n-        write(jg, enrichable.getEntity());\n+    public void write(Enriched<EntityType> enrichable, JsonGenerator jg) {\n+        try {\n+            write(jg, enrichable.getEntity());\n+        } catch (Exception e) {\n+            if (e instanceof InterruptedException) {\n+                Thread.currentThread().interrupt();\n+                throw new RuntimeException(\"interrupted\", e); // NOSONAR", "originalCommit": "0db60b2cd5acb9e4e7ce788f1b55e8d6683441d2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk1Njc4OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3706#discussion_r372956789", "bodyText": "Actually I prefer that we don't call checkInterrupt anymore, as it confuses tools that look for specific InterruptedException management.", "author": "efge", "createdAt": "2020-01-30T13:48:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk1MDgxNg=="}], "type": "inlineReview", "revised_code": {"commit": "0b2329c34aaabdb3e1be302126563a5db0533d63", "chunk": "diff --git a/nuxeo-core/nuxeo-core-io/src/main/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/AbstractJsonEnricher.java b/nuxeo-core/nuxeo-core-io/src/main/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/AbstractJsonEnricher.java\nindex 4a225150cfd..ec928d45d11 100644\n--- a/nuxeo-core/nuxeo-core-io/src/main/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/AbstractJsonEnricher.java\n+++ b/nuxeo-core/nuxeo-core-io/src/main/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/AbstractJsonEnricher.java\n\n@@ -64,7 +64,7 @@ public abstract class AbstractJsonEnricher<EntityType> extends AbstractJsonWrite\n                 throw new RuntimeException(\"interrupted\", e); // NOSONAR\n             } else {\n                 // TODO collect exception and return it to the caller\n-                log.error(e, e);\n+                log.info(\"enrichment failed\", e);\n             }\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk1Mjg1MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3706#discussion_r372952851", "bodyText": "Could you re-organise the fields, methods and constructor? We're currently having a field, then the constructor then another field.\nFurthermore, for a reading aspect, I would put @Test before @LogCaptureFeature.FilterOn.", "author": "kevinleturc", "createdAt": "2020-01-30T13:41:40Z", "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/FailingEnricherTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+\n+package org.nuxeo.ecm.core.io.marshallers.json.enrichers;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.io.marshallers.json.AbstractJsonWriterTest;\n+import org.nuxeo.ecm.core.io.marshallers.json.document.DocumentModelJsonWriter;\n+import org.nuxeo.ecm.core.io.registry.context.RenderingContext.CtxBuilder;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.LogCaptureFeature;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features({ LogCaptureFeature.class, CoreFeature.class })\n+@Deploy(\"org.nuxeo.ecm.core.test.tests:enrichers-contrib.xml\")\n+public class FailingEnricherTest extends AbstractJsonWriterTest.External<DocumentModelJsonWriter, DocumentModel> {\n+\n+    @Inject\n+    protected LogCaptureFeature.Result logCaptureResult;\n+\n+    public FailingEnricherTest() {\n+        super(DocumentModelJsonWriter.class, DocumentModel.class);\n+    }\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @LogCaptureFeature.FilterOn(logLevel = \"ERROR\")\n+    @Test\n+    public void test() throws IOException {\n+        DocumentModel root = session.getRootDocument();\n+        // shouldn't throw\n+        jsonAssert(root, CtxBuilder.enrichDoc(FailingEnricher.NAME).get());\n+        List<LogEvent> caughtEvents = logCaptureResult.getCaughtEvents();\n+        // should log an error\n+        assertEquals(1, caughtEvents.size());\n+        assertEquals(\"java.io.IOException: Simulated exception for test purpose\",\n+                caughtEvents.get(0).getMessage().toString());\n+    }\n+\n+}", "originalCommit": "0db60b2cd5acb9e4e7ce788f1b55e8d6683441d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0b2329c34aaabdb3e1be302126563a5db0533d63", "chunk": "diff --git a/nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/FailingEnricherTest.java b/nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/FailingEnricherTest.java\nindex e1084bfaea5..a717735abc6 100644\n--- a/nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/FailingEnricherTest.java\n+++ b/nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/FailingEnricherTest.java\n\n@@ -40,6 +40,9 @@ import org.nuxeo.runtime.test.runner.Features;\n import org.nuxeo.runtime.test.runner.FeaturesRunner;\n import org.nuxeo.runtime.test.runner.LogCaptureFeature;\n \n+/**\n+ * @since 11.1\n+ */\n @RunWith(FeaturesRunner.class)\n @Features({ LogCaptureFeature.class, CoreFeature.class })\n @Deploy(\"org.nuxeo.ecm.core.test.tests:enrichers-contrib.xml\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk1MzUwNw==", "url": "https://github.com/nuxeo/nuxeo/pull/3706#discussion_r372953507", "bodyText": "Could you use LogCaptureFeature.Result#getCaughtEventMessages for these assertions?", "author": "kevinleturc", "createdAt": "2020-01-30T13:42:54Z", "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/FailingEnricherTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+\n+package org.nuxeo.ecm.core.io.marshallers.json.enrichers;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.io.marshallers.json.AbstractJsonWriterTest;\n+import org.nuxeo.ecm.core.io.marshallers.json.document.DocumentModelJsonWriter;\n+import org.nuxeo.ecm.core.io.registry.context.RenderingContext.CtxBuilder;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.LogCaptureFeature;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features({ LogCaptureFeature.class, CoreFeature.class })\n+@Deploy(\"org.nuxeo.ecm.core.test.tests:enrichers-contrib.xml\")\n+public class FailingEnricherTest extends AbstractJsonWriterTest.External<DocumentModelJsonWriter, DocumentModel> {\n+\n+    @Inject\n+    protected LogCaptureFeature.Result logCaptureResult;\n+\n+    public FailingEnricherTest() {\n+        super(DocumentModelJsonWriter.class, DocumentModel.class);\n+    }\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @LogCaptureFeature.FilterOn(logLevel = \"ERROR\")\n+    @Test\n+    public void test() throws IOException {\n+        DocumentModel root = session.getRootDocument();\n+        // shouldn't throw\n+        jsonAssert(root, CtxBuilder.enrichDoc(FailingEnricher.NAME).get());\n+        List<LogEvent> caughtEvents = logCaptureResult.getCaughtEvents();\n+        // should log an error\n+        assertEquals(1, caughtEvents.size());\n+        assertEquals(\"java.io.IOException: Simulated exception for test purpose\",\n+                caughtEvents.get(0).getMessage().toString());", "originalCommit": "0db60b2cd5acb9e4e7ce788f1b55e8d6683441d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0b2329c34aaabdb3e1be302126563a5db0533d63", "chunk": "diff --git a/nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/FailingEnricherTest.java b/nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/FailingEnricherTest.java\nindex e1084bfaea5..a717735abc6 100644\n--- a/nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/FailingEnricherTest.java\n+++ b/nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/FailingEnricherTest.java\n\n@@ -40,6 +40,9 @@ import org.nuxeo.runtime.test.runner.Features;\n import org.nuxeo.runtime.test.runner.FeaturesRunner;\n import org.nuxeo.runtime.test.runner.LogCaptureFeature;\n \n+/**\n+ * @since 11.1\n+ */\n @RunWith(FeaturesRunner.class)\n @Features({ LogCaptureFeature.class, CoreFeature.class })\n @Deploy(\"org.nuxeo.ecm.core.test.tests:enrichers-contrib.xml\")\n"}}, {"oid": "0b2329c34aaabdb3e1be302126563a5db0533d63", "url": "https://github.com/nuxeo/nuxeo/commit/0b2329c34aaabdb3e1be302126563a5db0533d63", "message": "NXP-28560: catch AbstractJsonEnrichers Exception", "committedDate": "2020-01-30T13:43:52Z", "type": "forcePushed"}, {"oid": "8ee9ecf8e96c020f836d6f74c5e9c229fbf14125", "url": "https://github.com/nuxeo/nuxeo/commit/8ee9ecf8e96c020f836d6f74c5e9c229fbf14125", "message": "NXP-28560: catch AbstractJsonEnrichers Exception", "committedDate": "2020-01-30T13:57:37Z", "type": "forcePushed"}, {"oid": "55974721e30af5a7e2899e441822bd856b18ac88", "url": "https://github.com/nuxeo/nuxeo/commit/55974721e30af5a7e2899e441822bd856b18ac88", "message": "NXP-28560: catch AbstractJsonEnrichers Exception", "committedDate": "2020-01-30T14:01:15Z", "type": "forcePushed"}, {"oid": "658625922e1281e220cedb3108a7a086063c81be", "url": "https://github.com/nuxeo/nuxeo/commit/658625922e1281e220cedb3108a7a086063c81be", "message": "NXP-28560: catch AbstractJsonEnrichers Exception", "committedDate": "2020-01-30T15:16:04Z", "type": "forcePushed"}, {"oid": "c14cd06c346b7de76222d0a525f0658d52510d30", "url": "https://github.com/nuxeo/nuxeo/commit/c14cd06c346b7de76222d0a525f0658d52510d30", "message": "NXP-28560: catch AbstractJsonEnrichers Exception", "committedDate": "2020-01-30T15:19:48Z", "type": "commit"}, {"oid": "c14cd06c346b7de76222d0a525f0658d52510d30", "url": "https://github.com/nuxeo/nuxeo/commit/c14cd06c346b7de76222d0a525f0658d52510d30", "message": "NXP-28560: catch AbstractJsonEnrichers Exception", "committedDate": "2020-01-30T15:19:48Z", "type": "forcePushed"}]}