{"pr_number": 3869, "pr_title": "fix-NXP-28784-Record-management-Missing-abels-in-the-audit-for-retention-events", "pr_createdAt": "2020-03-26T16:52:43Z", "pr_url": "https://github.com/nuxeo/nuxeo/pull/3869", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODczNTk3Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/3869#discussion_r398735976", "bodyText": "Formatting issue?", "author": "kevinleturc", "createdAt": "2020-03-26T16:59:41Z", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionEvents.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.retention.test;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.nuxeo.ecm.core.api.CoreSession.RETAIN_UNTIL_INDETERMINATE;\n+\n+import java.util.Calendar;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.nuxeo.ecm.core.api.event.DocumentEventTypes;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.test.CapturingEventListener;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class TestRetentionEvents extends RetentionTestCase {\n+\n+    @Inject\n+    protected TransactionalFeature transactionalFeature;\n+\n+    @Test\n+    public void shouldNotifyEventsWhenModifyLegalHold() {\n+        session.makeRecord(file.getRef());\n+\n+        checkLegalHoldEvents(true, \"I put the legal hold\", DocumentEventTypes.BEFORE_SET_LEGAL_HOLD,\n+                DocumentEventTypes.AFTER_SET_LEGAL_HOLD);\n+\n+        checkLegalHoldEvents(false, \"I remove the legal hold\", DocumentEventTypes.BEFORE_REMOVE_LEGAL_HOLD,\n+                DocumentEventTypes.AFTER_REMOVE_LEGAL_HOLD);\n+\n+    }\n+\n+    protected void checkLegalHoldEvents(boolean hold, String comment, String... expectedEvents) {\n+        try (CapturingEventListener listener = new CapturingEventListener(expectedEvents)) {\n+            session.setLegalHold(file.getRef(), hold, comment);\n+            transactionalFeature.nextTransaction();\n+\n+            String[] eventsNames = listener.streamCapturedEvents().map(Event::getName).toArray(String[]::new);\n+            assertArrayEquals(expectedEvents, eventsNames);\n+            listener.streamCapturedEvents()\n+                    .forEach(ev -> assertEquals(\"Event: \" + ev.getName(), //\n+                            comment, ev.getContext().getProperties().get(\"comment\")));", "originalCommit": "2edbcfe0ed7181c3572124f1261f302a38a909db", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3c47a83b2961baad63c52c018db3f3d7bf95127a", "chunk": "diff --git a/addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionEvents.java b/addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionEvents.java\nindex 9ba26203784..6ba6408164d 100644\n--- a/addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionEvents.java\n+++ b/addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionEvents.java\n\n@@ -28,6 +28,7 @@ import java.util.Calendar;\n import javax.inject.Inject;\n \n import org.junit.Test;\n+import org.nuxeo.ecm.core.api.CoreSession;\n import org.nuxeo.ecm.core.api.event.DocumentEventTypes;\n import org.nuxeo.ecm.core.event.Event;\n import org.nuxeo.ecm.core.event.test.CapturingEventListener;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODczOTYwNA==", "url": "https://github.com/nuxeo/nuxeo/pull/3869#discussion_r398739604", "bodyText": "retainUntil doesn't seem to be null which can simplify this expression.", "author": "kevinleturc", "createdAt": "2020-03-26T17:04:42Z", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionEvents.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.retention.test;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.nuxeo.ecm.core.api.CoreSession.RETAIN_UNTIL_INDETERMINATE;\n+\n+import java.util.Calendar;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.nuxeo.ecm.core.api.event.DocumentEventTypes;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.test.CapturingEventListener;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class TestRetentionEvents extends RetentionTestCase {\n+\n+    @Inject\n+    protected TransactionalFeature transactionalFeature;\n+\n+    @Test\n+    public void shouldNotifyEventsWhenModifyLegalHold() {\n+        session.makeRecord(file.getRef());\n+\n+        checkLegalHoldEvents(true, \"I put the legal hold\", DocumentEventTypes.BEFORE_SET_LEGAL_HOLD,\n+                DocumentEventTypes.AFTER_SET_LEGAL_HOLD);\n+\n+        checkLegalHoldEvents(false, \"I remove the legal hold\", DocumentEventTypes.BEFORE_REMOVE_LEGAL_HOLD,\n+                DocumentEventTypes.AFTER_REMOVE_LEGAL_HOLD);\n+\n+    }\n+\n+    protected void checkLegalHoldEvents(boolean hold, String comment, String... expectedEvents) {\n+        try (CapturingEventListener listener = new CapturingEventListener(expectedEvents)) {\n+            session.setLegalHold(file.getRef(), hold, comment);\n+            transactionalFeature.nextTransaction();\n+\n+            String[] eventsNames = listener.streamCapturedEvents().map(Event::getName).toArray(String[]::new);\n+            assertArrayEquals(expectedEvents, eventsNames);\n+            listener.streamCapturedEvents()\n+                    .forEach(ev -> assertEquals(\"Event: \" + ev.getName(), //\n+                            comment, ev.getContext().getProperties().get(\"comment\")));\n+        }\n+    }\n+\n+    @Test\n+    public void shouldNotifyEventsWhenModifyRetention() {\n+        session.makeRecord(file.getRef());\n+        Calendar retainUntil = Calendar.getInstance();\n+        retainUntil.add(Calendar.DAY_OF_MONTH, 5);\n+\n+        // current retention is null\n+        checkRetentionEvents(retainUntil, DocumentEventTypes.BEFORE_SET_RETENTION,\n+                DocumentEventTypes.AFTER_SET_RETENTION);\n+\n+        // extend the retention\n+        retainUntil = Calendar.getInstance();\n+        retainUntil.add(Calendar.DAY_OF_MONTH, 25);\n+        checkRetentionEvents(retainUntil, DocumentEventTypes.BEFORE_EXTEND_RETENTION,\n+                DocumentEventTypes.AFTER_EXTEND_RETENTION);\n+\n+        // current retention is indeterminate\n+        checkRetentionEvents(RETAIN_UNTIL_INDETERMINATE, DocumentEventTypes.BEFORE_EXTEND_RETENTION,\n+                DocumentEventTypes.AFTER_EXTEND_RETENTION);\n+\n+        // modify an indeterminate once\n+        retainUntil = Calendar.getInstance();\n+        retainUntil.add(Calendar.DAY_OF_MONTH, 10);\n+        checkRetentionEvents(retainUntil, DocumentEventTypes.BEFORE_SET_RETENTION,\n+                DocumentEventTypes.AFTER_SET_RETENTION);\n+    }\n+\n+    protected void checkRetentionEvents(Calendar retainUntil, String... expectedEvents) {\n+        try (CapturingEventListener listener = new CapturingEventListener(expectedEvents)) {\n+            session.setRetainUntil(file.getRef(), retainUntil, null);\n+            transactionalFeature.nextTransaction();\n+\n+            String[] eventsNames = listener.streamCapturedEvents().map(Event::getName).toArray(String[]::new);\n+            assertArrayEquals(expectedEvents, eventsNames);\n+            boolean retainUntilIndeterminate = retainUntil == null\n+                    || RETAIN_UNTIL_INDETERMINATE.compareTo(retainUntil) == 0;", "originalCommit": "2edbcfe0ed7181c3572124f1261f302a38a909db", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3c47a83b2961baad63c52c018db3f3d7bf95127a", "chunk": "diff --git a/addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionEvents.java b/addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionEvents.java\nindex 9ba26203784..6ba6408164d 100644\n--- a/addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionEvents.java\n+++ b/addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionEvents.java\n\n@@ -28,6 +28,7 @@ import java.util.Calendar;\n import javax.inject.Inject;\n \n import org.junit.Test;\n+import org.nuxeo.ecm.core.api.CoreSession;\n import org.nuxeo.ecm.core.api.event.DocumentEventTypes;\n import org.nuxeo.ecm.core.event.Event;\n import org.nuxeo.ecm.core.event.test.CapturingEventListener;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc0MDIzOQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3869#discussion_r398740239", "bodyText": "I would go for setRetentionAndCheckEvents because this method doesn't just check events.", "author": "kevinleturc", "createdAt": "2020-03-26T17:05:36Z", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionEvents.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.retention.test;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.nuxeo.ecm.core.api.CoreSession.RETAIN_UNTIL_INDETERMINATE;\n+\n+import java.util.Calendar;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.nuxeo.ecm.core.api.event.DocumentEventTypes;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.test.CapturingEventListener;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class TestRetentionEvents extends RetentionTestCase {\n+\n+    @Inject\n+    protected TransactionalFeature transactionalFeature;\n+\n+    @Test\n+    public void shouldNotifyEventsWhenModifyLegalHold() {\n+        session.makeRecord(file.getRef());\n+\n+        checkLegalHoldEvents(true, \"I put the legal hold\", DocumentEventTypes.BEFORE_SET_LEGAL_HOLD,\n+                DocumentEventTypes.AFTER_SET_LEGAL_HOLD);\n+\n+        checkLegalHoldEvents(false, \"I remove the legal hold\", DocumentEventTypes.BEFORE_REMOVE_LEGAL_HOLD,\n+                DocumentEventTypes.AFTER_REMOVE_LEGAL_HOLD);\n+\n+    }\n+\n+    protected void checkLegalHoldEvents(boolean hold, String comment, String... expectedEvents) {\n+        try (CapturingEventListener listener = new CapturingEventListener(expectedEvents)) {\n+            session.setLegalHold(file.getRef(), hold, comment);\n+            transactionalFeature.nextTransaction();\n+\n+            String[] eventsNames = listener.streamCapturedEvents().map(Event::getName).toArray(String[]::new);\n+            assertArrayEquals(expectedEvents, eventsNames);\n+            listener.streamCapturedEvents()\n+                    .forEach(ev -> assertEquals(\"Event: \" + ev.getName(), //\n+                            comment, ev.getContext().getProperties().get(\"comment\")));\n+        }\n+    }\n+\n+    @Test\n+    public void shouldNotifyEventsWhenModifyRetention() {\n+        session.makeRecord(file.getRef());\n+        Calendar retainUntil = Calendar.getInstance();\n+        retainUntil.add(Calendar.DAY_OF_MONTH, 5);\n+\n+        // current retention is null\n+        checkRetentionEvents(retainUntil, DocumentEventTypes.BEFORE_SET_RETENTION,\n+                DocumentEventTypes.AFTER_SET_RETENTION);\n+\n+        // extend the retention\n+        retainUntil = Calendar.getInstance();\n+        retainUntil.add(Calendar.DAY_OF_MONTH, 25);\n+        checkRetentionEvents(retainUntil, DocumentEventTypes.BEFORE_EXTEND_RETENTION,\n+                DocumentEventTypes.AFTER_EXTEND_RETENTION);\n+\n+        // current retention is indeterminate\n+        checkRetentionEvents(RETAIN_UNTIL_INDETERMINATE, DocumentEventTypes.BEFORE_EXTEND_RETENTION,\n+                DocumentEventTypes.AFTER_EXTEND_RETENTION);\n+\n+        // modify an indeterminate once\n+        retainUntil = Calendar.getInstance();\n+        retainUntil.add(Calendar.DAY_OF_MONTH, 10);\n+        checkRetentionEvents(retainUntil, DocumentEventTypes.BEFORE_SET_RETENTION,\n+                DocumentEventTypes.AFTER_SET_RETENTION);\n+    }\n+\n+    protected void checkRetentionEvents(Calendar retainUntil, String... expectedEvents) {", "originalCommit": "2edbcfe0ed7181c3572124f1261f302a38a909db", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3c47a83b2961baad63c52c018db3f3d7bf95127a", "chunk": "diff --git a/addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionEvents.java b/addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionEvents.java\nindex 9ba26203784..6ba6408164d 100644\n--- a/addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionEvents.java\n+++ b/addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionEvents.java\n\n@@ -28,6 +28,7 @@ import java.util.Calendar;\n import javax.inject.Inject;\n \n import org.junit.Test;\n+import org.nuxeo.ecm.core.api.CoreSession;\n import org.nuxeo.ecm.core.api.event.DocumentEventTypes;\n import org.nuxeo.ecm.core.event.Event;\n import org.nuxeo.ecm.core.event.test.CapturingEventListener;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc0MDcyNA==", "url": "https://github.com/nuxeo/nuxeo/pull/3869#discussion_r398740724", "bodyText": "I would go for setLegalHoldAndCheckEvents because this method doesn't just check events.", "author": "kevinleturc", "createdAt": "2020-03-26T17:06:22Z", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionEvents.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.retention.test;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.nuxeo.ecm.core.api.CoreSession.RETAIN_UNTIL_INDETERMINATE;\n+\n+import java.util.Calendar;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.nuxeo.ecm.core.api.event.DocumentEventTypes;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.test.CapturingEventListener;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class TestRetentionEvents extends RetentionTestCase {\n+\n+    @Inject\n+    protected TransactionalFeature transactionalFeature;\n+\n+    @Test\n+    public void shouldNotifyEventsWhenModifyLegalHold() {\n+        session.makeRecord(file.getRef());\n+\n+        checkLegalHoldEvents(true, \"I put the legal hold\", DocumentEventTypes.BEFORE_SET_LEGAL_HOLD,\n+                DocumentEventTypes.AFTER_SET_LEGAL_HOLD);\n+\n+        checkLegalHoldEvents(false, \"I remove the legal hold\", DocumentEventTypes.BEFORE_REMOVE_LEGAL_HOLD,\n+                DocumentEventTypes.AFTER_REMOVE_LEGAL_HOLD);\n+\n+    }\n+\n+    protected void checkLegalHoldEvents(boolean hold, String comment, String... expectedEvents) {", "originalCommit": "2edbcfe0ed7181c3572124f1261f302a38a909db", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3c47a83b2961baad63c52c018db3f3d7bf95127a", "chunk": "diff --git a/addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionEvents.java b/addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionEvents.java\nindex 9ba26203784..6ba6408164d 100644\n--- a/addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionEvents.java\n+++ b/addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionEvents.java\n\n@@ -28,6 +28,7 @@ import java.util.Calendar;\n import javax.inject.Inject;\n \n import org.junit.Test;\n+import org.nuxeo.ecm.core.api.CoreSession;\n import org.nuxeo.ecm.core.api.event.DocumentEventTypes;\n import org.nuxeo.ecm.core.event.Event;\n import org.nuxeo.ecm.core.event.test.CapturingEventListener;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc0NDcxNg==", "url": "https://github.com/nuxeo/nuxeo/pull/3869#discussion_r398744716", "bodyText": "Shouldn't we do the same thing than above in the code (ie: using Objects.equals)?", "author": "kevinleturc", "createdAt": "2020-03-26T17:11:49Z", "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/api/AbstractSession.java", "diffHunk": "@@ -2077,18 +2078,19 @@ public void setRetainUntil(DocumentRef docRef, Calendar retainUntil, String comm\n         checkPermission(doc, SET_RETENTION);\n         Map<String, Serializable> options = new HashMap<>();\n         options.put(CoreEventConstants.RETAIN_UNTIL, retainUntil);\n-        String commentStart = retainUntil == null ? null : retainUntil.toInstant().toString();\n-        if (comment == null) {\n-            comment = commentStart;\n-        } else if (commentStart != null) {\n-            comment = commentStart + \" \" + comment;\n-        }\n-        options.put(\"comment\", comment);\n+        boolean retainUntilIndeterminate = retainUntil == null\n+                || RETAIN_UNTIL_INDETERMINATE.compareTo(retainUntil) == 0;", "originalCommit": "2edbcfe0ed7181c3572124f1261f302a38a909db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE1OTMyNQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3869#discussion_r399159325", "bodyText": "I used compareTo instead of equals (Calendar.equals or Object.equals) because this last one (equals) uses the time zone to check equality: have look at java.util.Calendar#equals -> from my test  the declared  RETAIN_UNTIL_INDETERMINATE will have the UTC Time zone and the retrieved Calendar from Calendar current = doc.getRetainUntil(); current will have \"Europe/Paris\" and the equality fails. I think before my fix and the adding test it's wasn't a problem because even the:\n if (Objects.equals(current, retainUntil)) {\n            // unchanged, don't do anything\n            return;\n        }\n\nwill return false and the date are set for a second time even if the calendars are the same.\nfor more informations have a look at the exiting check: org.nuxeo.ecm.core.storage.BaseDocument#allowNewRetention\nand I don\"t know how we deal with time zone in Nuxeo for Date type\n@efge", "author": "RSalem07", "createdAt": "2020-03-27T10:12:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc0NDcxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE1OTc0Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/3869#discussion_r399159746", "bodyText": "Ok,\nShouldn't we use compare in the equals then?", "author": "kevinleturc", "createdAt": "2020-03-27T10:13:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc0NDcxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE2MTE2NA==", "url": "https://github.com/nuxeo/nuxeo/pull/3869#discussion_r399161164", "bodyText": "Perhaps yes, I should confess that I didn't to want to change the  exiting code not related directly to this ticket", "author": "RSalem07", "createdAt": "2020-03-27T10:15:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc0NDcxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE2MjQwNA==", "url": "https://github.com/nuxeo/nuxeo/pull/3869#discussion_r399162404", "bodyText": "Hum, I would say more or less because you don't use the same way to compare the dates. I would say we should use the same way to compare them or if there's a reason, let's put it in a comment, wdyt?", "author": "kevinleturc", "createdAt": "2020-03-27T10:17:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc0NDcxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE2NTQ1Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/3869#discussion_r399165452", "bodyText": "to do the correct thing, let aligne the equals to use the compare like i did and like it's done on low level. I think i will use the same commit, i mean it's really a minor change to separate it into a specific commit wdyt ?", "author": "RSalem07", "createdAt": "2020-03-27T10:23:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc0NDcxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE2Njk5MA==", "url": "https://github.com/nuxeo/nuxeo/pull/3869#discussion_r399166990", "bodyText": "I think you can use the same commit, it would make sense to have it next to compare introduction you're doing \ud83d\udc4d.", "author": "kevinleturc", "createdAt": "2020-03-27T10:25:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc0NDcxNg=="}], "type": "inlineReview", "revised_code": {"commit": "3c47a83b2961baad63c52c018db3f3d7bf95127a", "chunk": "diff --git a/nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/api/AbstractSession.java b/nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/api/AbstractSession.java\nindex ad5470ff1ce..a2b7dbebfe4 100644\n--- a/nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/api/AbstractSession.java\n+++ b/nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/api/AbstractSession.java\n\n@@ -2071,7 +2070,7 @@ public abstract class AbstractSession implements CoreSession, Serializable {\n             throw new PropertyException(\"Document is not a record\");\n         }\n         Calendar current = doc.getRetainUntil();\n-        if (Objects.equals(current, retainUntil)) {\n+        if (current!=null && retainUntil!=null && current.compareTo(retainUntil) == 0) {\n             // unchanged, don't do anything\n             return;\n         }\n"}}, {"oid": "3c47a83b2961baad63c52c018db3f3d7bf95127a", "url": "https://github.com/nuxeo/nuxeo/commit/3c47a83b2961baad63c52c018db3f3d7bf95127a", "message": "NXP-28786: Record management - Expiration date displayed for undeterminate retention", "committedDate": "2020-03-27T10:47:11Z", "type": "forcePushed"}, {"oid": "8731b78ab780d66bdca6f80bd54f97eb27692f5b", "url": "https://github.com/nuxeo/nuxeo/commit/8731b78ab780d66bdca6f80bd54f97eb27692f5b", "message": "NXP-28784: Record management - Missing labels in the audit for retention events", "committedDate": "2020-03-27T10:50:21Z", "type": "commit"}, {"oid": "1e56ef363bc14f15ca351f3920f2c7431d269722", "url": "https://github.com/nuxeo/nuxeo/commit/1e56ef363bc14f15ca351f3920f2c7431d269722", "message": "NXP-28786: Record management - Expiration date displayed for undeterminate retention", "committedDate": "2020-03-27T10:50:21Z", "type": "commit"}, {"oid": "1e56ef363bc14f15ca351f3920f2c7431d269722", "url": "https://github.com/nuxeo/nuxeo/commit/1e56ef363bc14f15ca351f3920f2c7431d269722", "message": "NXP-28786: Record management - Expiration date displayed for undeterminate retention", "committedDate": "2020-03-27T10:50:21Z", "type": "forcePushed"}]}