{"pr_number": 4159, "pr_title": "NXP-28918: add a 'nx:arrayContains' function in the EL context", "pr_createdAt": "2020-06-17T08:15:41Z", "pr_url": "https://github.com/nuxeo/nuxeo/pull/4159", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQzMzAwOA==", "url": "https://github.com/nuxeo/nuxeo/pull/4159#discussion_r441433008", "bodyText": "For consistency:\nReturns {@code true} if the given {@code arr} contains the given {@code o}.\nor\nReturns {@code true} if the given array contains the given object.", "author": "ataillefer", "createdAt": "2020-06-17T10:04:51Z", "path": "modules/core/nuxeo-core-el/src/main/java/org/nuxeo/ecm/platform/el/Functions.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Thomas Roger <troger@nuxeo.com>\n+ */\n+\n+package org.nuxeo.ecm.platform.el;\n+\n+import java.util.Arrays;\n+\n+/**\n+ * Helper functions injected in the {@link ExpressionContext} instance.\n+ *\n+ * @since 11.2\n+ */\n+public class Functions {\n+\n+    /**\n+     * Returns {@code true} if the given {@code arr} contains the specified element.", "originalCommit": "6343aab04c2685b267fb481a8f97b6ec0a95647f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU0NDk1NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4159#discussion_r441544955", "bodyText": "You should specify in the Javadoc what happens for a null array (it's fine to make it behave like an empty one).", "author": "efge", "createdAt": "2020-06-17T13:29:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQzMzAwOA=="}], "type": "inlineReview", "revised_code": {"commit": "217b8a2d34c6b0d2378f8dd7a855ece34dc6293c", "chunk": "diff --git a/modules/core/nuxeo-core-el/src/main/java/org/nuxeo/ecm/platform/el/Functions.java b/modules/core/nuxeo-core-el/src/main/java/org/nuxeo/ecm/platform/el/Functions.java\nindex b0e815b9dcd..dc1ad2397c2 100644\n--- a/modules/core/nuxeo-core-el/src/main/java/org/nuxeo/ecm/platform/el/Functions.java\n+++ b/modules/core/nuxeo-core-el/src/main/java/org/nuxeo/ecm/platform/el/Functions.java\n\n@@ -19,7 +19,11 @@\n \n package org.nuxeo.ecm.platform.el;\n \n+import org.apache.commons.collections.CollectionUtils;\n+\n import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Stream;\n \n /**\n  * Helper functions injected in the {@link ExpressionContext} instance.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ0NTI0Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/4159#discussion_r441445246", "bodyText": "Could add @since 11.2", "author": "ataillefer", "createdAt": "2020-06-17T10:27:05Z", "path": "modules/core/nuxeo-core-el/src/test/java/org/nuxeo/platform/el/TestExpressionEvaluator.java", "diffHunk": "@@ -106,4 +107,21 @@ public void testList() {\n         assertNotNull(value);\n     }\n \n+    /**\n+     * NXP-28918\n+     */", "originalCommit": "6343aab04c2685b267fb481a8f97b6ec0a95647f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "217b8a2d34c6b0d2378f8dd7a855ece34dc6293c", "chunk": "diff --git a/modules/core/nuxeo-core-el/src/test/java/org/nuxeo/platform/el/TestExpressionEvaluator.java b/modules/core/nuxeo-core-el/src/test/java/org/nuxeo/platform/el/TestExpressionEvaluator.java\nindex f2a5655f36e..54abf62afa2 100644\n--- a/modules/core/nuxeo-core-el/src/test/java/org/nuxeo/platform/el/TestExpressionEvaluator.java\n+++ b/modules/core/nuxeo-core-el/src/test/java/org/nuxeo/platform/el/TestExpressionEvaluator.java\n\n@@ -112,7 +112,8 @@ public class TestExpressionEvaluator {\n      */\n     @Test\n     public void testArrayContainsFunction() {\n-        Boolean res = evaluatorUnderTest.evaluateExpression(context, \"${nx:arrayContains(array, 'foo')}\", Boolean.class);\n+        Boolean res = evaluatorUnderTest.evaluateExpression(context, \"${nx:arrayContains(array, 'foo')}\",\n+                Boolean.class);\n         assertFalse(res);\n \n         String[] arr = new String[] { \"bar\" };\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ0NTQ3NA==", "url": "https://github.com/nuxeo/nuxeo/pull/4159#discussion_r441445474", "bodyText": "@since 11.2", "author": "ataillefer", "createdAt": "2020-06-17T10:27:31Z", "path": "modules/platform/nuxeo-platform-imaging/nuxeo-platform-imaging-core/src/test/java/org/nuxeo/ecm/platform/picture/core/test/TestPictureConversions.java", "diffHunk": "@@ -194,6 +194,32 @@ public void shouldFilterPictureConversions() throws Exception {\n         assertNull(multiviewPicture.getView(\"anotherSmallConversion\"));\n     }\n \n+    /**\n+     * NXP-28918\n+     */", "originalCommit": "6343aab04c2685b267fb481a8f97b6ec0a95647f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU0NTQ2NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4159#discussion_r441545465", "bodyText": "Please also test the null case.", "author": "efge", "createdAt": "2020-06-17T13:29:49Z", "path": "modules/core/nuxeo-core-el/src/test/java/org/nuxeo/platform/el/TestExpressionEvaluator.java", "diffHunk": "@@ -106,4 +107,21 @@ public void testList() {\n         assertNotNull(value);\n     }\n \n+    /**\n+     * NXP-28918\n+     */\n+    @Test\n+    public void testArrayContainsFunction() {", "originalCommit": "6343aab04c2685b267fb481a8f97b6ec0a95647f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU0ODYxNg==", "url": "https://github.com/nuxeo/nuxeo/pull/4159#discussion_r441548616", "bodyText": "WDYM? The array to null or the element? (or both maybe?)", "author": "troger", "createdAt": "2020-06-17T13:34:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU0NTQ2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU1NjU0NA==", "url": "https://github.com/nuxeo/nuxeo/pull/4159#discussion_r441556544", "bodyText": "I meant the array.", "author": "efge", "createdAt": "2020-06-17T13:45:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU0NTQ2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU5MjAxMw==", "url": "https://github.com/nuxeo/nuxeo/pull/4159#discussion_r441592013", "bodyText": "First test is testing  a null (non-existent) array in the context.\nI can't explicitly set a null value with evaluatorUnderTest#bindValue anyway.", "author": "troger", "createdAt": "2020-06-17T14:32:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU0NTQ2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2NjExNQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4159#discussion_r441666115", "bodyText": "Ah yes sorry", "author": "efge", "createdAt": "2020-06-17T16:16:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU0NTQ2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "217b8a2d34c6b0d2378f8dd7a855ece34dc6293c", "chunk": "diff --git a/modules/core/nuxeo-core-el/src/test/java/org/nuxeo/platform/el/TestExpressionEvaluator.java b/modules/core/nuxeo-core-el/src/test/java/org/nuxeo/platform/el/TestExpressionEvaluator.java\nindex f2a5655f36e..54abf62afa2 100644\n--- a/modules/core/nuxeo-core-el/src/test/java/org/nuxeo/platform/el/TestExpressionEvaluator.java\n+++ b/modules/core/nuxeo-core-el/src/test/java/org/nuxeo/platform/el/TestExpressionEvaluator.java\n\n@@ -112,7 +112,8 @@ public class TestExpressionEvaluator {\n      */\n     @Test\n     public void testArrayContainsFunction() {\n-        Boolean res = evaluatorUnderTest.evaluateExpression(context, \"${nx:arrayContains(array, 'foo')}\", Boolean.class);\n+        Boolean res = evaluatorUnderTest.evaluateExpression(context, \"${nx:arrayContains(array, 'foo')}\",\n+                Boolean.class);\n         assertFalse(res);\n \n         String[] arr = new String[] { \"bar\" };\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU0NjMyOA==", "url": "https://github.com/nuxeo/nuxeo/pull/4159#discussion_r441546328", "bodyText": "While we're at it wouldn't it be useful to also code now an arrayContainsAll and arrayContainsAny? And maybe arrayContainsNone?", "author": "efge", "createdAt": "2020-06-17T13:30:59Z", "path": "modules/core/nuxeo-core-el/src/main/java/org/nuxeo/ecm/platform/el/Functions.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Thomas Roger <troger@nuxeo.com>\n+ */\n+\n+package org.nuxeo.ecm.platform.el;\n+\n+import java.util.Arrays;\n+\n+/**\n+ * Helper functions injected in the {@link ExpressionContext} instance.\n+ *\n+ * @since 11.2\n+ */\n+public class Functions {\n+\n+    /**\n+     * Returns {@code true} if the given {@code arr} contains the specified element.\n+     */\n+    public static boolean arrayContains(Object[] arr, Object o) {", "originalCommit": "6343aab04c2685b267fb481a8f97b6ec0a95647f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU0Nzg2MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4159#discussion_r441547861", "bodyText": "I'm not always a fan of adding methods that are not needed but could be a good idea here.", "author": "troger", "createdAt": "2020-06-17T13:33:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU0NjMyOA=="}], "type": "inlineReview", "revised_code": {"commit": "217b8a2d34c6b0d2378f8dd7a855ece34dc6293c", "chunk": "diff --git a/modules/core/nuxeo-core-el/src/main/java/org/nuxeo/ecm/platform/el/Functions.java b/modules/core/nuxeo-core-el/src/main/java/org/nuxeo/ecm/platform/el/Functions.java\nindex b0e815b9dcd..dc1ad2397c2 100644\n--- a/modules/core/nuxeo-core-el/src/main/java/org/nuxeo/ecm/platform/el/Functions.java\n+++ b/modules/core/nuxeo-core-el/src/main/java/org/nuxeo/ecm/platform/el/Functions.java\n\n@@ -19,7 +19,11 @@\n \n package org.nuxeo.ecm.platform.el;\n \n+import org.apache.commons.collections.CollectionUtils;\n+\n import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Stream;\n \n /**\n  * Helper functions injected in the {@link ExpressionContext} instance.\n"}}, {"oid": "217b8a2d34c6b0d2378f8dd7a855ece34dc6293c", "url": "https://github.com/nuxeo/nuxeo/commit/217b8a2d34c6b0d2378f8dd7a855ece34dc6293c", "message": "NXP-28918: add 'nx:arrayContains*' functions in the EL context\n\nFunctions added:\n- nx:arrayContains\n- nx:arrayContainsAll\n- nx:arrayContainsAny\n- nx:arrayContainsNone", "committedDate": "2020-06-19T14:09:06Z", "type": "forcePushed"}, {"oid": "7b4f19491d2f0c4a0036058d114939fcb3683471", "url": "https://github.com/nuxeo/nuxeo/commit/7b4f19491d2f0c4a0036058d114939fcb3683471", "message": "NXP-28918: add 'nx:arrayContains*' functions in the EL context\n\nFunctions added:\n- nx:arrayContains\n- nx:arrayContainsAll\n- nx:arrayContainsAny\n- nx:arrayContainsNone", "committedDate": "2020-06-19T14:36:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg4MTA5Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/4159#discussion_r442881097", "bodyText": "No need for isPublic, as getMethods only returns public methods", "author": "efge", "createdAt": "2020-06-19T14:43:31Z", "path": "modules/core/nuxeo-core-el/src/main/java/org/nuxeo/ecm/platform/el/ExpressionContext.java", "diffHunk": "@@ -30,6 +35,12 @@\n \n public class ExpressionContext extends ELContext {\n \n+    private static final Map<String, Method> DEFAULT_FUNCTIONS = //\n+            Stream.of(Functions.class.getMethods())\n+                  .filter(m -> Modifier.isStatic(m.getModifiers()))\n+                  .filter(m -> Modifier.isPublic(m.getModifiers()))", "originalCommit": "7b4f19491d2f0c4a0036058d114939fcb3683471", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3d3aee5d7ace39f9e320854bc0e065fa60509d08", "chunk": "diff --git a/modules/core/nuxeo-core-el/src/main/java/org/nuxeo/ecm/platform/el/ExpressionContext.java b/modules/core/nuxeo-core-el/src/main/java/org/nuxeo/ecm/platform/el/ExpressionContext.java\nindex 2ab7539c184..fdfee089659 100644\n--- a/modules/core/nuxeo-core-el/src/main/java/org/nuxeo/ecm/platform/el/ExpressionContext.java\n+++ b/modules/core/nuxeo-core-el/src/main/java/org/nuxeo/ecm/platform/el/ExpressionContext.java\n\n@@ -38,7 +38,6 @@ public class ExpressionContext extends ELContext {\n     private static final Map<String, Method> DEFAULT_FUNCTIONS = //\n             Stream.of(Functions.class.getMethods())\n                   .filter(m -> Modifier.isStatic(m.getModifiers()))\n-                  .filter(m -> Modifier.isPublic(m.getModifiers()))\n                   .collect(toUnmodifiableMap(m -> \"nx:\" + m.getName(), Function.identity()));\n \n     private static class MyVariableMapper extends VariableMapper {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg5ODUwNQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4159#discussion_r442898505", "bodyText": "String.format is overkill and costly (and you don't use it in mapFunction anyway).", "author": "efge", "createdAt": "2020-06-19T15:15:06Z", "path": "modules/core/nuxeo-core-el/src/main/java/org/nuxeo/ecm/platform/el/ExpressionContext.java", "diffHunk": "@@ -51,7 +62,13 @@ public ValueExpression setVariable(String variable, ValueExpression expression)\n \n         @Override\n         public Method resolveFunction(String prefix, String localName) {\n-            return map.get(prefix + \":\" + localName);\n+            String key = String.format(\"%s:%s\", prefix, localName);", "originalCommit": "7b4f19491d2f0c4a0036058d114939fcb3683471", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3d3aee5d7ace39f9e320854bc0e065fa60509d08", "chunk": "diff --git a/modules/core/nuxeo-core-el/src/main/java/org/nuxeo/ecm/platform/el/ExpressionContext.java b/modules/core/nuxeo-core-el/src/main/java/org/nuxeo/ecm/platform/el/ExpressionContext.java\nindex 2ab7539c184..fdfee089659 100644\n--- a/modules/core/nuxeo-core-el/src/main/java/org/nuxeo/ecm/platform/el/ExpressionContext.java\n+++ b/modules/core/nuxeo-core-el/src/main/java/org/nuxeo/ecm/platform/el/ExpressionContext.java\n\n@@ -62,7 +61,7 @@ public class ExpressionContext extends ELContext {\n \n         @Override\n         public Method resolveFunction(String prefix, String localName) {\n-            String key = String.format(\"%s:%s\", prefix, localName);\n+            String key = prefix + \":\" + localName;\n             return map.getOrDefault(key, DEFAULT_FUNCTIONS.get(key));\n         }\n \n"}}, {"oid": "3d3aee5d7ace39f9e320854bc0e065fa60509d08", "url": "https://github.com/nuxeo/nuxeo/commit/3d3aee5d7ace39f9e320854bc0e065fa60509d08", "message": "NXP-28918: add 'nx:arrayContains*' functions in the EL context\n\nFunctions added:\n- nx:arrayContains\n- nx:arrayContainsAll\n- nx:arrayContainsAny\n- nx:arrayContainsNone", "committedDate": "2020-06-19T15:31:52Z", "type": "commit"}, {"oid": "3d3aee5d7ace39f9e320854bc0e065fa60509d08", "url": "https://github.com/nuxeo/nuxeo/commit/3d3aee5d7ace39f9e320854bc0e065fa60509d08", "message": "NXP-28918: add 'nx:arrayContains*' functions in the EL context\n\nFunctions added:\n- nx:arrayContains\n- nx:arrayContainsAll\n- nx:arrayContainsAny\n- nx:arrayContainsNone", "committedDate": "2020-06-19T15:31:52Z", "type": "forcePushed"}]}