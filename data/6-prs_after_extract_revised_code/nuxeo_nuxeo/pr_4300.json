{"pr_number": 4300, "pr_title": "NXP-29620: Add an external scroller mechanism to BAF", "pr_createdAt": "2020-09-04T10:57:50Z", "pr_url": "https://github.com/nuxeo/nuxeo/pull/4300", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU4MzU1OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4300#discussion_r483583559", "bodyText": "the total number of elements produced by the external scroller", "author": "bdelbosc", "createdAt": "2020-09-04T12:27:13Z", "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkService.java", "diffHunk": "@@ -80,4 +81,23 @@\n      */\n     List<BulkStatus> getStatuses(String username);\n \n+    /**\n+     * Sends a {@link BulkBucket} to the right bulk action.\n+     * <p/>\n+     * This method is useful to produce bucket externally when using an external scroller.\n+     *\n+     * @param bucket the bucket to send to a bulk action\n+     * @since 11.3\n+     */\n+    void appendExternalBucket(BulkBucket bucket);\n+\n+    /**\n+     * Completes a running bulk computation having an external scroller.\n+     *\n+     * @param commandId the command id\n+     * @param count the number of elements produced by the scroller", "originalCommit": "926ab4d37cb15f81a29be8beef264be8587d49eb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9db914c77f63a669ab79a49a9224b850107a1383", "chunk": "diff --git a/modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkService.java b/modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkService.java\nindex 5a1259666c5..ebed3d8c444 100644\n--- a/modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkService.java\n+++ b/modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkService.java\n\n@@ -95,7 +95,7 @@ public interface BulkService extends AsyncService<String, BulkStatus, Map<String\n      * Completes a running bulk computation having an external scroller.\n      *\n      * @param commandId the command id\n-     * @param count the number of elements produced by the scroller\n+     * @param count the total number of elements produced by the external scroller\n      * @since 11.3\n      */\n     void completeExternalScroll(String commandId, long count);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU4NjIwNA==", "url": "https://github.com/nuxeo/nuxeo/pull/4300#discussion_r483586204", "bodyText": "here we want to load balance processing so better commandId:counter counter can be a global atomic long", "author": "bdelbosc", "createdAt": "2020-09-04T12:32:53Z", "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkServiceImpl.java", "diffHunk": "@@ -328,4 +332,36 @@ public boolean await(Duration duration) throws InterruptedException {\n                  .collect(Collectors.toList());\n     }\n \n+    @Override\n+    public void appendExternalBucket(BulkBucket bucket) {\n+        String commandId = bucket.getCommandId();\n+\n+        BulkCommand command = getCommand(commandId);\n+        String stream = Framework.getService(BulkAdminService.class).getInputStream(command.getAction());\n+\n+        String key = commandId; // TODO do we keep a bucket number in the K/V to build this key?", "originalCommit": "926ab4d37cb15f81a29be8beef264be8587d49eb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9db914c77f63a669ab79a49a9224b850107a1383", "chunk": "diff --git a/modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkServiceImpl.java b/modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkServiceImpl.java\nindex 3762173ed3b..3911444c3f5 100644\n--- a/modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkServiceImpl.java\n+++ b/modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkServiceImpl.java\n\n@@ -339,14 +336,11 @@ public class BulkServiceImpl implements BulkService {\n         BulkCommand command = getCommand(commandId);\n         String stream = Framework.getService(BulkAdminService.class).getInputStream(command.getAction());\n \n-        String key = commandId; // TODO do we keep a bucket number in the K/V to build this key?\n+        String key = commandId + \":\" + EXTERNAL_SCROLLER_COUNTER.incrementAndGet();\n         Record record = Record.of(key, BulkCodecs.getBucketCodec().encode(bucket));\n \n-        LogManager logManager = Framework.getService(StreamService.class).getLogManager();\n-        LogAppender<Record> logAppender = logManager.getAppender(Name.ofUrn(stream),\n-                Framework.getService(CodecService.class).getCodec(RECORD_CODEC, Record.class));\n         log.debug(\"Append key: {}, record: {}\", key, record);\n-        logAppender.append(key, record);\n+        Framework.getService(StreamService.class).getStreamManager().append(stream, record);\n     }\n \n     @Override\n"}}, {"oid": "9db914c77f63a669ab79a49a9224b850107a1383", "url": "https://github.com/nuxeo/nuxeo/commit/9db914c77f63a669ab79a49a9224b850107a1383", "message": "NXP-29620: Add an external scroller mechanism to BAF", "committedDate": "2020-09-04T13:03:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUwMTg0NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4300#discussion_r485501845", "bodyText": "protected is enough", "author": "bdelbosc", "createdAt": "2020-09-09T10:18:31Z", "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkServiceImpl.java", "diffHunk": "@@ -95,6 +98,9 @@\n     // How long we keep the command and its status in the kv store once aborted\n     public static final long ABORTED_TTL_SECONDS = 7_200;\n \n+    // @since 11.3\n+    public static final AtomicLong EXTERNAL_SCROLLER_COUNTER = new AtomicLong();", "originalCommit": "9db914c77f63a669ab79a49a9224b850107a1383", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "af06f6b513e26fb3d7b0d14ae9c466e847fcbd55", "chunk": "diff --git a/modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkServiceImpl.java b/modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkServiceImpl.java\nindex 3911444c3f5..f29746c7d49 100644\n--- a/modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkServiceImpl.java\n+++ b/modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkServiceImpl.java\n\n@@ -99,7 +101,10 @@ public class BulkServiceImpl implements BulkService {\n     public static final long ABORTED_TTL_SECONDS = 7_200;\n \n     // @since 11.3\n-    public static final AtomicLong EXTERNAL_SCROLLER_COUNTER = new AtomicLong();\n+    protected final AtomicLong externalScrollerCounter = new AtomicLong();\n+\n+    // @since 11.3\n+    protected final Map<String, BulkCommand> externalCommands = new PassiveExpiringMap<>(60, TimeUnit.SECONDS);\n \n     @Override\n     public String submit(BulkCommand command) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUwNDIzOQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4300#discussion_r485504239", "bodyText": "maybe easier to understand with a dedicated check like if(command.useExternalScroller()) {return;}", "author": "bdelbosc", "createdAt": "2020-09-09T10:22:58Z", "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkServiceImpl.java", "diffHunk": "@@ -162,9 +168,11 @@ protected void checkIfScrollerExists(BulkCommand command) {\n                     GenericScrollRequest.builder(command.getScroller(), command.getQuery()).build())) {\n                 throw new IllegalArgumentException(\"Unknown Generic Scroller for command: \" + command);\n             }\n-        } else if (!scrollService.exists(\n-                DocumentScrollRequest.builder(command.getQuery()).name(command.getScroller()).build())) {\n-            throw new IllegalArgumentException(\"Unknown Document Scroller for command: \" + command);\n+        } else if (!command.useExternalScroller()) {", "originalCommit": "9db914c77f63a669ab79a49a9224b850107a1383", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "af06f6b513e26fb3d7b0d14ae9c466e847fcbd55", "chunk": "diff --git a/modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkServiceImpl.java b/modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkServiceImpl.java\nindex 3911444c3f5..f29746c7d49 100644\n--- a/modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkServiceImpl.java\n+++ b/modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkServiceImpl.java\n\n@@ -163,12 +168,14 @@ public class BulkServiceImpl implements BulkService {\n \n     protected void checkIfScrollerExists(BulkCommand command) {\n         ScrollService scrollService = Framework.getService(ScrollService.class);\n-        if (command.useGenericScroller()) {\n+        if (command.useExternalScroller()) {\n+            // nothing to do\n+        } else if (command.useGenericScroller()) {\n             if (!scrollService.exists(\n                     GenericScrollRequest.builder(command.getScroller(), command.getQuery()).build())) {\n                 throw new IllegalArgumentException(\"Unknown Generic Scroller for command: \" + command);\n             }\n-        } else if (!command.useExternalScroller()) {\n+        } else {\n             if (!scrollService.exists(\n                     DocumentScrollRequest.builder(command.getQuery()).name(command.getScroller()).build())) {\n                 throw new IllegalArgumentException(\"Unknown Document Scroller for command: \" + command);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUwODE1Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/4300#discussion_r485508153", "bodyText": "This means a KV store roundtrip for each bucket to get the action name which is a potential perf problem.\nA possible solution is to have a very basic cache on getCommand (just keep the last entry),\nor to provide a different method signature appendExternalBucket(String action, BulkBucket bucket), because the scroller should have the knowledge of the action.", "author": "bdelbosc", "createdAt": "2020-09-09T10:30:24Z", "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkServiceImpl.java", "diffHunk": "@@ -328,4 +329,30 @@ public boolean await(Duration duration) throws InterruptedException {\n                  .collect(Collectors.toList());\n     }\n \n+    @Override\n+    public void appendExternalBucket(BulkBucket bucket) {\n+        String commandId = bucket.getCommandId();\n+\n+        BulkCommand command = getCommand(commandId);", "originalCommit": "9db914c77f63a669ab79a49a9224b850107a1383", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYxOTE5Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/4300#discussion_r485619196", "bodyText": "I chose to use a PassiveExpiringMap with a TTL of 1 minute because, in the context of the 10B benchmark, we may have two commands at the same time, one for each repository.", "author": "kevinleturc", "createdAt": "2020-09-09T13:39:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUwODE1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "af06f6b513e26fb3d7b0d14ae9c466e847fcbd55", "chunk": "diff --git a/modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkServiceImpl.java b/modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkServiceImpl.java\nindex 3911444c3f5..f29746c7d49 100644\n--- a/modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkServiceImpl.java\n+++ b/modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkServiceImpl.java\n\n@@ -333,10 +340,10 @@ public class BulkServiceImpl implements BulkService {\n     public void appendExternalBucket(BulkBucket bucket) {\n         String commandId = bucket.getCommandId();\n \n-        BulkCommand command = getCommand(commandId);\n+        BulkCommand command = externalCommands.computeIfAbsent(commandId, this::getCommand);\n         String stream = Framework.getService(BulkAdminService.class).getInputStream(command.getAction());\n \n-        String key = commandId + \":\" + EXTERNAL_SCROLLER_COUNTER.incrementAndGet();\n+        String key = commandId + \":\" + externalScrollerCounter.incrementAndGet();\n         Record record = Record.of(key, BulkCodecs.getBucketCodec().encode(bucket));\n \n         log.debug(\"Append key: {}, record: {}\", key, record);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUwOTI2OA==", "url": "https://github.com/nuxeo/nuxeo/pull/4300#discussion_r485509268", "bodyText": "the total count is interesting information to trace", "author": "bdelbosc", "createdAt": "2020-09-09T10:32:39Z", "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkServiceImpl.java", "diffHunk": "@@ -328,4 +329,30 @@ public boolean await(Duration duration) throws InterruptedException {\n                  .collect(Collectors.toList());\n     }\n \n+    @Override\n+    public void appendExternalBucket(BulkBucket bucket) {\n+        String commandId = bucket.getCommandId();\n+\n+        BulkCommand command = getCommand(commandId);\n+        String stream = Framework.getService(BulkAdminService.class).getInputStream(command.getAction());\n+\n+        String key = commandId + \":\" + EXTERNAL_SCROLLER_COUNTER.incrementAndGet();\n+        Record record = Record.of(key, BulkCodecs.getBucketCodec().encode(bucket));\n+\n+        log.debug(\"Append key: {}, record: {}\", key, record);\n+        Framework.getService(StreamService.class).getStreamManager().append(stream, record);\n+    }\n+\n+    @Override\n+    public void completeExternalScroll(String commandId, long count) {\n+        BulkStatus delta = BulkStatus.deltaOf(commandId);\n+        delta.setState(RUNNING);\n+        delta.setScrollEndTime(Instant.now());\n+        delta.setTotal(count);\n+\n+        Record record = Record.of(commandId, BulkCodecs.getStatusCodec().encode(delta));\n+\n+        log.debug(\"Complete external scroll with key: {}, record: {}\", commandId, record);", "originalCommit": "9db914c77f63a669ab79a49a9224b850107a1383", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "af06f6b513e26fb3d7b0d14ae9c466e847fcbd55", "chunk": "diff --git a/modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkServiceImpl.java b/modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkServiceImpl.java\nindex 3911444c3f5..f29746c7d49 100644\n--- a/modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkServiceImpl.java\n+++ b/modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkServiceImpl.java\n\n@@ -333,10 +340,10 @@ public class BulkServiceImpl implements BulkService {\n     public void appendExternalBucket(BulkBucket bucket) {\n         String commandId = bucket.getCommandId();\n \n-        BulkCommand command = getCommand(commandId);\n+        BulkCommand command = externalCommands.computeIfAbsent(commandId, this::getCommand);\n         String stream = Framework.getService(BulkAdminService.class).getInputStream(command.getAction());\n \n-        String key = commandId + \":\" + EXTERNAL_SCROLLER_COUNTER.incrementAndGet();\n+        String key = commandId + \":\" + externalScrollerCounter.incrementAndGet();\n         Record record = Record.of(key, BulkCodecs.getBucketCodec().encode(bucket));\n \n         log.debug(\"Append key: {}, record: {}\", key, record);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUxMjMyMA==", "url": "https://github.com/nuxeo/nuxeo/pull/4300#discussion_r485512320", "bodyText": "we need to rename nxqlQuery into query, but I don't see how the total number of elements for an external scroller is implemented", "author": "bdelbosc", "createdAt": "2020-09-09T10:38:35Z", "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/message/BulkCommand.java", "diffHunk": "@@ -188,7 +204,8 @@ public void setScroller(String scrollerName) {\n          *\n          * @param action the registered bulk action name\n          * @param nxqlQuery by default an NXQL query that represents the document set to apply the action. When using a\n-         *            generic scroller the query syntax is a convention with the scroller implementation.\n+         *            generic scroller the query syntax is a convention with the scroller implementation. When using an\n+         *            external scroller the field is the total number of elements if known.", "originalCommit": "9db914c77f63a669ab79a49a9224b850107a1383", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU5MTQ2Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/4300#discussion_r485591463", "bodyText": "It is not currently, and I will remove this part from the comment as the count is not known at the beginning of our scroller.", "author": "kevinleturc", "createdAt": "2020-09-09T13:00:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUxMjMyMA=="}], "type": "inlineReview", "revised_code": {"commit": "af06f6b513e26fb3d7b0d14ae9c466e847fcbd55", "chunk": "diff --git a/modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/message/BulkCommand.java b/modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/message/BulkCommand.java\nindex bc90308948b..724ba3a6bb9 100644\n--- a/modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/message/BulkCommand.java\n+++ b/modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/message/BulkCommand.java\n\n@@ -203,21 +203,21 @@ public class BulkCommand implements Serializable {\n          * BulkCommand builder\n          *\n          * @param action the registered bulk action name\n-         * @param nxqlQuery by default an NXQL query that represents the document set to apply the action. When using a\n+         * @param query by default an NXQL query that represents the document set to apply the action. When using a\n          *            generic scroller the query syntax is a convention with the scroller implementation. When using an\n-         *            external scroller the field is the total number of elements if known.\n+         *            external scroller the field is null.\n          * @param username the user with whose rights the computation will be executed\n          * @since 11.1\n          */\n-        public Builder(String action, String nxqlQuery, String username) {\n+        public Builder(String action, String query, String username) {\n             if (isEmpty(action)) {\n                 throw new IllegalArgumentException(\"Action cannot be empty\");\n             }\n             this.action = action;\n-            if (isEmpty(nxqlQuery)) {\n+            if (isEmpty(query)) {\n                 throw new IllegalArgumentException(\"Query cannot be empty\");\n             }\n-            this.query = nxqlQuery;\n+            this.query = query;\n             if (isEmpty(username)) {\n                 throw new IllegalArgumentException(\"Username cannot be empty\");\n             }\n"}}, {"oid": "af06f6b513e26fb3d7b0d14ae9c466e847fcbd55", "url": "https://github.com/nuxeo/nuxeo/commit/af06f6b513e26fb3d7b0d14ae9c466e847fcbd55", "message": "NXP-29620: Add an external scroller mechanism to BAF", "committedDate": "2020-09-09T13:40:38Z", "type": "forcePushed"}, {"oid": "671cb18859aa27e7e20b2a243918150d16a062d8", "url": "https://github.com/nuxeo/nuxeo/commit/671cb18859aa27e7e20b2a243918150d16a062d8", "message": "NXP-29620: Add an external scroller mechanism to BAF", "committedDate": "2020-09-09T13:41:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY2ODc1MA==", "url": "https://github.com/nuxeo/nuxeo/pull/4300#discussion_r485668750", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Execute the scroll on empty result set, useful for external scroller.\n          \n          \n            \n             * Executes the scroll on an empty result set, useful for external scrollers.", "author": "ataillefer", "createdAt": "2020-09-09T14:43:43Z", "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/scroll/EmptyScroll.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ *  Contributors:\n+ *      Kevin Leturc <kleturc@nuxeo.com>\n+ */\n+\n+package org.nuxeo.ecm.core.scroll;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+\n+import org.nuxeo.ecm.core.api.scroll.Scroll;\n+import org.nuxeo.ecm.core.api.scroll.ScrollRequest;\n+\n+/**\n+ * Execute the scroll on empty result set, useful for external scroller.", "originalCommit": "671cb18859aa27e7e20b2a243918150d16a062d8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1eec3bd99f90f5ab8681415404634dc4fc4e834d", "chunk": "diff --git a/modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/scroll/EmptyScroll.java b/modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/scroll/EmptyScroll.java\nindex bb159600dbd..6b6d45f47c0 100644\n--- a/modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/scroll/EmptyScroll.java\n+++ b/modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/scroll/EmptyScroll.java\n\n@@ -27,7 +27,7 @@ import org.nuxeo.ecm.core.api.scroll.Scroll;\n import org.nuxeo.ecm.core.api.scroll.ScrollRequest;\n \n /**\n- * Execute the scroll on empty result set, useful for external scroller.\n+ * Executes the scroll on an empty result set, useful for external scrollers.\n  *\n  * @since 11.3\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY3MzkyNQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4300#discussion_r485673925", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // wait the scroller\n          \n          \n            \n                    // wait for the scroller", "author": "ataillefer", "createdAt": "2020-09-09T14:50:09Z", "path": "modules/core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/bulk/TestBulkProcessor.java", "diffHunk": "@@ -293,6 +296,110 @@ public void testScroller() throws InterruptedException {\n         }\n     }\n \n+    /**\n+     * Tests the external scroller in the case it completes its scrolling after the processing.\n+     */\n+    @Test\n+    public void testExternalScrollerCompleteAtEnd() {\n+        final int nbDocs = 10;\n+        // create some docs\n+        List<String> docs = new ArrayList<>(nbDocs);\n+        for (int i = 0; i < nbDocs; i++) {\n+            DocumentModel doc = session.createDocumentModel(\"/\", \"doc\" + i, \"File\");\n+            doc = session.createDocument(doc);\n+            docs.add(doc.getId());\n+        }\n+\n+        // prepare and submit the command with an external scroller and submit it\n+        String commandId = service.submit(\n+                new BulkCommand.Builder(SetPropertiesAction.ACTION_NAME, \"ignored\", \"system\").useExternalScroller()\n+                                                                                             .build());\n+        // wait the scroller", "originalCommit": "671cb18859aa27e7e20b2a243918150d16a062d8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1eec3bd99f90f5ab8681415404634dc4fc4e834d", "chunk": "diff --git a/modules/core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/bulk/TestBulkProcessor.java b/modules/core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/bulk/TestBulkProcessor.java\nindex 4dbc1fb0143..9486e2553ce 100644\n--- a/modules/core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/bulk/TestBulkProcessor.java\n+++ b/modules/core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/bulk/TestBulkProcessor.java\n\n@@ -314,7 +314,7 @@ public class TestBulkProcessor {\n         String commandId = service.submit(\n                 new BulkCommand.Builder(SetPropertiesAction.ACTION_NAME, \"ignored\", \"system\").useExternalScroller()\n                                                                                              .build());\n-        // wait the scroller\n+        // wait for the scroller\n         await().atMost(ONE_MINUTE).until(() -> service.getStatus(commandId).getState() == SCROLLING_RUNNING);\n         BulkStatus status = service.getStatus(commandId);\n         assertEquals(0, status.getTotal());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY3NDA3Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/4300#discussion_r485674073", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // wait the status\n          \n          \n            \n                    // wait for the status", "author": "ataillefer", "createdAt": "2020-09-09T14:50:17Z", "path": "modules/core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/bulk/TestBulkProcessor.java", "diffHunk": "@@ -293,6 +296,110 @@ public void testScroller() throws InterruptedException {\n         }\n     }\n \n+    /**\n+     * Tests the external scroller in the case it completes its scrolling after the processing.\n+     */\n+    @Test\n+    public void testExternalScrollerCompleteAtEnd() {\n+        final int nbDocs = 10;\n+        // create some docs\n+        List<String> docs = new ArrayList<>(nbDocs);\n+        for (int i = 0; i < nbDocs; i++) {\n+            DocumentModel doc = session.createDocumentModel(\"/\", \"doc\" + i, \"File\");\n+            doc = session.createDocument(doc);\n+            docs.add(doc.getId());\n+        }\n+\n+        // prepare and submit the command with an external scroller and submit it\n+        String commandId = service.submit(\n+                new BulkCommand.Builder(SetPropertiesAction.ACTION_NAME, \"ignored\", \"system\").useExternalScroller()\n+                                                                                             .build());\n+        // wait the scroller\n+        await().atMost(ONE_MINUTE).until(() -> service.getStatus(commandId).getState() == SCROLLING_RUNNING);\n+        BulkStatus status = service.getStatus(commandId);\n+        assertEquals(0, status.getTotal());\n+        assertEquals(0, status.getProcessed());\n+        assertFalse(status.hasError());\n+\n+        // now append first bucket\n+        service.appendExternalBucket(new BulkBucket(commandId, docs.subList(0, nbDocs / 2)));\n+        // wait the status", "originalCommit": "671cb18859aa27e7e20b2a243918150d16a062d8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1eec3bd99f90f5ab8681415404634dc4fc4e834d", "chunk": "diff --git a/modules/core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/bulk/TestBulkProcessor.java b/modules/core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/bulk/TestBulkProcessor.java\nindex 4dbc1fb0143..9486e2553ce 100644\n--- a/modules/core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/bulk/TestBulkProcessor.java\n+++ b/modules/core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/bulk/TestBulkProcessor.java\n\n@@ -314,7 +314,7 @@ public class TestBulkProcessor {\n         String commandId = service.submit(\n                 new BulkCommand.Builder(SetPropertiesAction.ACTION_NAME, \"ignored\", \"system\").useExternalScroller()\n                                                                                              .build());\n-        // wait the scroller\n+        // wait for the scroller\n         await().atMost(ONE_MINUTE).until(() -> service.getStatus(commandId).getState() == SCROLLING_RUNNING);\n         BulkStatus status = service.getStatus(commandId);\n         assertEquals(0, status.getTotal());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY3NDIyOA==", "url": "https://github.com/nuxeo/nuxeo/pull/4300#discussion_r485674228", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // wait the status\n          \n          \n            \n                    // wait for the status", "author": "ataillefer", "createdAt": "2020-09-09T14:50:28Z", "path": "modules/core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/bulk/TestBulkProcessor.java", "diffHunk": "@@ -293,6 +296,110 @@ public void testScroller() throws InterruptedException {\n         }\n     }\n \n+    /**\n+     * Tests the external scroller in the case it completes its scrolling after the processing.\n+     */\n+    @Test\n+    public void testExternalScrollerCompleteAtEnd() {\n+        final int nbDocs = 10;\n+        // create some docs\n+        List<String> docs = new ArrayList<>(nbDocs);\n+        for (int i = 0; i < nbDocs; i++) {\n+            DocumentModel doc = session.createDocumentModel(\"/\", \"doc\" + i, \"File\");\n+            doc = session.createDocument(doc);\n+            docs.add(doc.getId());\n+        }\n+\n+        // prepare and submit the command with an external scroller and submit it\n+        String commandId = service.submit(\n+                new BulkCommand.Builder(SetPropertiesAction.ACTION_NAME, \"ignored\", \"system\").useExternalScroller()\n+                                                                                             .build());\n+        // wait the scroller\n+        await().atMost(ONE_MINUTE).until(() -> service.getStatus(commandId).getState() == SCROLLING_RUNNING);\n+        BulkStatus status = service.getStatus(commandId);\n+        assertEquals(0, status.getTotal());\n+        assertEquals(0, status.getProcessed());\n+        assertFalse(status.hasError());\n+\n+        // now append first bucket\n+        service.appendExternalBucket(new BulkBucket(commandId, docs.subList(0, nbDocs / 2)));\n+        // wait the status\n+        await().atMost(ONE_MINUTE) .until(() -> service.getStatus(commandId).getProcessed() == nbDocs / 2);\n+        status = service.getStatus(commandId);\n+        assertEquals(SCROLLING_RUNNING, status.getState());\n+        assertEquals(0, status.getTotal());\n+        assertFalse(status.hasError());\n+\n+        // now append second bucket\n+        service.appendExternalBucket(new BulkBucket(commandId, docs.subList(nbDocs / 2, nbDocs)));\n+        // wait the status\n+        await().atMost(ONE_MINUTE).until(() -> service.getStatus(commandId).getProcessed() == nbDocs);\n+        status = service.getStatus(commandId);\n+        assertEquals(SCROLLING_RUNNING, status.getState());\n+        assertEquals(0, status.getTotal());\n+        assertFalse(status.hasError());\n+\n+        service.completeExternalScroll(commandId, nbDocs);\n+        // wait the status", "originalCommit": "671cb18859aa27e7e20b2a243918150d16a062d8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1eec3bd99f90f5ab8681415404634dc4fc4e834d", "chunk": "diff --git a/modules/core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/bulk/TestBulkProcessor.java b/modules/core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/bulk/TestBulkProcessor.java\nindex 4dbc1fb0143..9486e2553ce 100644\n--- a/modules/core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/bulk/TestBulkProcessor.java\n+++ b/modules/core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/bulk/TestBulkProcessor.java\n\n@@ -314,7 +314,7 @@ public class TestBulkProcessor {\n         String commandId = service.submit(\n                 new BulkCommand.Builder(SetPropertiesAction.ACTION_NAME, \"ignored\", \"system\").useExternalScroller()\n                                                                                              .build());\n-        // wait the scroller\n+        // wait for the scroller\n         await().atMost(ONE_MINUTE).until(() -> service.getStatus(commandId).getState() == SCROLLING_RUNNING);\n         BulkStatus status = service.getStatus(commandId);\n         assertEquals(0, status.getTotal());\n"}}, {"oid": "1eec3bd99f90f5ab8681415404634dc4fc4e834d", "url": "https://github.com/nuxeo/nuxeo/commit/1eec3bd99f90f5ab8681415404634dc4fc4e834d", "message": "NXP-29620: Add an external scroller mechanism to BAF", "committedDate": "2020-09-09T15:27:33Z", "type": "commit"}, {"oid": "1eec3bd99f90f5ab8681415404634dc4fc4e834d", "url": "https://github.com/nuxeo/nuxeo/commit/1eec3bd99f90f5ab8681415404634dc4fc4e834d", "message": "NXP-29620: Add an external scroller mechanism to BAF", "committedDate": "2020-09-09T15:27:33Z", "type": "forcePushed"}]}