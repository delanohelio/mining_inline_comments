{"pr_number": 3732, "pr_title": "feature-NXP-28508-stream-metrics-datadog", "pr_createdAt": "2020-02-07T22:39:18Z", "pr_url": "https://github.com/nuxeo/nuxeo/pull/3732", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkzMjI3MA==", "url": "https://github.com/nuxeo/nuxeo/pull/3732#discussion_r376932270", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                            .desc(\"number of time to send the latency information\")\n          \n          \n            \n                                            .desc(\"number of times the latency information is sent\")", "author": "ataillefer", "createdAt": "2020-02-10T08:59:16Z", "path": "nuxeo-runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/tools/command/DatadogCommand.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.lib.stream.tools.command;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.lib.stream.log.LogManager;\n+\n+/**\n+ * Monitor consumer latencies to datadog\n+ *\n+ * @since 11.1\n+ */\n+public class DatadogCommand extends MonitorCommand {\n+\n+    public static final String COMPUTATION_NAME = \"LatencyMonitorDatadog\";\n+\n+    protected static final String NAME = \"datadog\";\n+\n+    private static final String DEFAULT_PREFIX = \"nuxeo.streams\";\n+\n+    protected String apiKey;\n+\n+    protected List<String> tags;\n+\n+    protected boolean partition;\n+\n+    @Override\n+    public String name() {\n+        return NAME;\n+    }\n+\n+    @Override\n+    public void updateOptions(Options options) {\n+        options.addOption(Option.builder(\"l\")\n+                                .longOpt(\"log-name\")\n+                                .desc(\"Monitor consumers latency for this LOG, must be a computation Record, \"\n+                                        + \"can be a comma separated list of log names or ALL\")\n+                                .required()\n+                                .hasArg()\n+                                .argName(\"LOG_NAME\")\n+                                .build());\n+        options.addOption(Option.builder()\n+                                .longOpt(\"api-key\")\n+                                .desc(\"Datadog API KEY\")\n+                                .required()\n+                                .hasArg()\n+                                .argName(\"API_KEY\")\n+                                .build());\n+        options.addOption(Option.builder()\n+                                .longOpt(\"tags\")\n+                                .desc(\"A comma separated list of Datadog tags, for instance: project:foo,staging:bar\")\n+                                .hasArg()\n+                                .argName(\"TAGS\")\n+                                .build());\n+        options.addOption(Option.builder().longOpt(\"partition\").desc(\"Report metrics for each partition\").build());\n+        options.addOption(Option.builder(\"i\")\n+                                .longOpt(\"interval\")\n+                                .desc(\"send latency spaced at the specified interval in seconds\")\n+                                .hasArg()\n+                                .argName(\"INTERVAL\")\n+                                .build());\n+        options.addOption(Option.builder(\"c\")\n+                                .longOpt(\"count\")\n+                                .desc(\"number of time to send the latency information\")", "originalCommit": "bbd5f2100e2f30ebac893ba7a4f875171472cf17", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7c331e50a3ac5a33a8ee9abe58157096f9349fa8", "chunk": "diff --git a/nuxeo-runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/tools/command/DatadogCommand.java b/nuxeo-runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/tools/command/DatadogCommand.java\nindex 3eb3f699d66..10538d8b7f3 100644\n--- a/nuxeo-runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/tools/command/DatadogCommand.java\n+++ b/nuxeo-runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/tools/command/DatadogCommand.java\n\n@@ -30,7 +30,7 @@ import org.nuxeo.lib.stream.computation.Topology;\n import org.nuxeo.lib.stream.log.LogManager;\n \n /**\n- * Monitor consumer latencies to datadog\n+ * Monitors consumer latencies to Datadog.\n  *\n  * @since 11.1\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkzMjY4MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3732#discussion_r376932681", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Monitor consumer latencies to datadog\n          \n          \n            \n             * Monitors consumer latencies to Datadog.", "author": "ataillefer", "createdAt": "2020-02-10T09:00:12Z", "path": "nuxeo-runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/tools/command/DatadogCommand.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.lib.stream.tools.command;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.lib.stream.log.LogManager;\n+\n+/**\n+ * Monitor consumer latencies to datadog", "originalCommit": "bbd5f2100e2f30ebac893ba7a4f875171472cf17", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7c331e50a3ac5a33a8ee9abe58157096f9349fa8", "chunk": "diff --git a/nuxeo-runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/tools/command/DatadogCommand.java b/nuxeo-runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/tools/command/DatadogCommand.java\nindex 3eb3f699d66..10538d8b7f3 100644\n--- a/nuxeo-runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/tools/command/DatadogCommand.java\n+++ b/nuxeo-runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/tools/command/DatadogCommand.java\n\n@@ -30,7 +30,7 @@ import org.nuxeo.lib.stream.computation.Topology;\n import org.nuxeo.lib.stream.log.LogManager;\n \n /**\n- * Monitor consumer latencies to datadog\n+ * Monitors consumer latencies to Datadog.\n  *\n  * @since 11.1\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkzMzQ2Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/3732#discussion_r376933462", "bodyText": "missing blank line", "author": "ataillefer", "createdAt": "2020-02-10T09:02:03Z", "path": "nuxeo-runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/tools/command/LatencyDatadogComputation.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.lib.stream.tools.command;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.coursera.metrics.datadog.model.DatadogGauge;\n+import org.coursera.metrics.datadog.transport.HttpTransport;\n+import org.coursera.metrics.datadog.transport.Transport;\n+import org.nuxeo.lib.stream.codec.Codec;\n+import org.nuxeo.lib.stream.computation.ComputationContext;\n+import org.nuxeo.lib.stream.computation.Record;\n+import org.nuxeo.lib.stream.log.Latency;\n+import org.nuxeo.lib.stream.log.LogManager;\n+import org.nuxeo.lib.stream.log.internals.LogPartitionGroup;\n+\n+/**\n+ * A computation that sends periodically latencies to Datadog.\n+ *\n+ * @since 11.1\n+ */\n+public class LatencyDatadogComputation extends LatencyTrackerComputation {\n+    private static final Log log = LogFactory.getLog(LatencyDatadogComputation.class);", "originalCommit": "bbd5f2100e2f30ebac893ba7a4f875171472cf17", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7c331e50a3ac5a33a8ee9abe58157096f9349fa8", "chunk": "diff --git a/nuxeo-runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/tools/command/LatencyDatadogComputation.java b/nuxeo-runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/tools/command/LatencyDatadogComputation.java\nindex 3661a3a43a5..98f0daca238 100644\n--- a/nuxeo-runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/tools/command/LatencyDatadogComputation.java\n+++ b/nuxeo-runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/tools/command/LatencyDatadogComputation.java\n\n@@ -40,6 +40,7 @@ import org.nuxeo.lib.stream.log.internals.LogPartitionGroup;\n  * @since 11.1\n  */\n public class LatencyDatadogComputation extends LatencyTrackerComputation {\n+\n     private static final Log log = LogFactory.getLog(LatencyDatadogComputation.class);\n \n     protected final String apiKey;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkzNDU2Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/3732#discussion_r376934563", "bodyText": "I guess it can be moved into the if statement", "author": "ataillefer", "createdAt": "2020-02-10T09:04:36Z", "path": "nuxeo-runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/tools/command/LatencyDatadogComputation.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.lib.stream.tools.command;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.coursera.metrics.datadog.model.DatadogGauge;\n+import org.coursera.metrics.datadog.transport.HttpTransport;\n+import org.coursera.metrics.datadog.transport.Transport;\n+import org.nuxeo.lib.stream.codec.Codec;\n+import org.nuxeo.lib.stream.computation.ComputationContext;\n+import org.nuxeo.lib.stream.computation.Record;\n+import org.nuxeo.lib.stream.log.Latency;\n+import org.nuxeo.lib.stream.log.LogManager;\n+import org.nuxeo.lib.stream.log.internals.LogPartitionGroup;\n+\n+/**\n+ * A computation that sends periodically latencies to Datadog.\n+ *\n+ * @since 11.1\n+ */\n+public class LatencyDatadogComputation extends LatencyTrackerComputation {\n+    private static final Log log = LogFactory.getLog(LatencyDatadogComputation.class);\n+\n+    protected final String apiKey;\n+\n+    protected final List<String> tags;\n+\n+    protected final String basePrefix;\n+\n+    protected final boolean partition;\n+\n+    protected HttpTransport transport;\n+\n+    public LatencyDatadogComputation(LogManager manager, List<String> logNames, String apiKey, List<String> tags,\n+            String basePrefix, String computationName, int intervalSecond, int count, boolean partition,\n+            boolean verbose, Codec<Record> codec) {\n+        super(manager, logNames, computationName, intervalSecond, count, verbose, codec, 0);\n+        this.apiKey = apiKey;\n+        this.tags = tags;\n+        this.basePrefix = basePrefix;\n+        this.partition = partition;\n+    }\n+\n+    @Override\n+    public void init(ComputationContext context) {\n+        super.init(context);\n+        transport = new HttpTransport.Builder().withApiKey(apiKey).build();\n+    }\n+\n+    @Override\n+    protected void processLatencies(ComputationContext context, LogPartitionGroup logGroup, List<Latency> latencies) {\n+        Latency groupLatency = Latency.of(latencies);\n+        publishMetrics(groupLatency, basePrefix, \"all\", logGroup.name, logGroup.group);\n+        if (!partition) {\n+            return;\n+        }\n+        for (int partition = 0; partition < latencies.size(); partition++) {\n+            publishMetrics(groupLatency, basePrefix, String.format(\"%02d\", partition), logGroup.name, logGroup.group);\n+        }\n+    }\n+\n+    protected void publishMetrics(Latency latency, String prefix, String partition, String stream, String group) {\n+        if (verbose) {\n+            log.info(latency.toString());\n+        }\n+        // upper is the time when the latency has been measured\n+        long metricTime = latency.upper() / 1000;\n+        String host = \"\";\n+        List<String> mTags = new ArrayList<>(tags.size() + 3);\n+        mTags.addAll(tags);\n+        mTags.add(\"stream:\" + stream);\n+        mTags.add(\"consumer:\" + group);\n+        mTags.add(\"partition:\" + partition);\n+        try {\n+            Transport.Request request = transport.prepare();\n+            request.addGauge(new DatadogGauge(prefix + \".lag\", latency.lag().lag(), metricTime, host, mTags));\n+            request.addGauge(new DatadogGauge(prefix + \".end\", latency.lag().upper(), metricTime, host, mTags));\n+            request.addGauge(new DatadogGauge(prefix + \".pos\", latency.lag().lower(), metricTime, host, mTags));\n+            request.addGauge(new DatadogGauge(prefix + \".latency\", latency.latency(), metricTime, host, mTags));\n+            request.send();\n+        } catch (IOException e) {\n+            log.error(\"Fail to prepare metric to datadog \" + prefix + \" \" + latency, e);\n+        } catch (Exception e) {\n+            log.error(\"Fail to send metric to datadog \" + prefix + \" \" + latency, e);\n+        }\n+    }\n+\n+    @Override\n+    public void destroy() {\n+        super.destroy();\n+        if (transport != null) {\n+            try {\n+                transport.close();\n+            } catch (IOException e) {\n+                log.debug(\"Error when closing graphite socket: \", e);\n+            }\n+        }\n+        transport = null;", "originalCommit": "bbd5f2100e2f30ebac893ba7a4f875171472cf17", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7c331e50a3ac5a33a8ee9abe58157096f9349fa8", "chunk": "diff --git a/nuxeo-runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/tools/command/LatencyDatadogComputation.java b/nuxeo-runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/tools/command/LatencyDatadogComputation.java\nindex 3661a3a43a5..98f0daca238 100644\n--- a/nuxeo-runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/tools/command/LatencyDatadogComputation.java\n+++ b/nuxeo-runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/tools/command/LatencyDatadogComputation.java\n\n@@ -40,6 +40,7 @@ import org.nuxeo.lib.stream.log.internals.LogPartitionGroup;\n  * @since 11.1\n  */\n public class LatencyDatadogComputation extends LatencyTrackerComputation {\n+\n     private static final Log log = LogFactory.getLog(LatencyDatadogComputation.class);\n \n     protected final String apiKey;\n"}}, {"oid": "7c331e50a3ac5a33a8ee9abe58157096f9349fa8", "url": "https://github.com/nuxeo/nuxeo/commit/7c331e50a3ac5a33a8ee9abe58157096f9349fa8", "message": "NXP-28508: Add stream.sh datadog commmand to publish stream metrics", "committedDate": "2020-02-10T09:24:20Z", "type": "forcePushed"}, {"oid": "558f65bb0f295e6e32645e4918613bb786b139d9", "url": "https://github.com/nuxeo/nuxeo/commit/558f65bb0f295e6e32645e4918613bb786b139d9", "message": "NXP-28508: Add stream.sh datadog commmand to publish stream metrics", "committedDate": "2020-02-10T09:28:48Z", "type": "forcePushed"}, {"oid": "186ddba387ca27478c7696e9980fb0fe95962f32", "url": "https://github.com/nuxeo/nuxeo/commit/186ddba387ca27478c7696e9980fb0fe95962f32", "message": "NXP-28508: Add stream.sh datadog commmand to publish stream metrics", "committedDate": "2020-02-10T11:18:21Z", "type": "commit"}, {"oid": "186ddba387ca27478c7696e9980fb0fe95962f32", "url": "https://github.com/nuxeo/nuxeo/commit/186ddba387ca27478c7696e9980fb0fe95962f32", "message": "NXP-28508: Add stream.sh datadog commmand to publish stream metrics", "committedDate": "2020-02-10T11:18:21Z", "type": "forcePushed"}]}