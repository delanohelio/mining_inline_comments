{"pr_number": 4168, "pr_title": "Feature nxp 29220 explorer xml secure content", "pr_createdAt": "2020-06-19T08:58:48Z", "pr_url": "https://github.com/nuxeo/nuxeo/pull/4168", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc0OTkzNA==", "url": "https://github.com/nuxeo/nuxeo/pull/4168#discussion_r442749934", "bodyText": "I would have done the rewriting using StAX instead of ad hoc regexps...", "author": "efge", "createdAt": "2020-06-19T10:03:01Z", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/documentation/DocumentationHelper.java", "diffHunk": "@@ -134,15 +148,54 @@ public static String getHtml(String doc) {\n      * Makes sure no passwords are embedded in the XML.\n      */\n     public static String secureXML(String xml) {\n-        if (xml == null || !xml.contains(\"assword\")) {\n+        if (StringUtils.isBlank(xml)) {\n             return xml;\n         }\n-        xml = xml.replaceAll(\"<([a-zA-Z]*[pP])assword>[^<]*</([a-zA-Z]*)assword>\", \"<$1assword>********</$2assword>\");\n-        // attributes: nuxeo-core-auth\n-        xml = xml.replaceAll(\"([a-zA-Z]*[pP])assword=\\\"[^\\\"]*\\\"\", \"$1assword=\\\"********\\\"\");\n-        // property: default-repository-config\n-        xml = xml.replaceAll(\"([a-zA-Z]*[pP])assword\\\">[^<]*<\", \"$1assword\\\">********<\");\n-        return xml;\n+        String res = xml;\n+        List<String> keywords = getKeywordList(SECURE_KEYWORDS_PROPERTY, DEFAULT_SECURE_KEYWORDS);\n+        List<String> whitelist = getKeywordList(WHITELISTED_KEYWORDS_PROPERTY, DEFAULT_WHITELISTED_KEYWORDS);\n+        for (String kw : keywords) {\n+            if (res.contains(kw)) {\n+                for (String pattern : List.of(\n+                        // node startswith\n+                        String.format(\"(?<start><(?<key>\\\\w*%s)\\\\s*>)[^<]*(?<end></\\\\w*%s>)\", kw, kw),", "originalCommit": "b66213f1d1b0d82b3517f3b02da82aa4acb6b435", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc1MTQwMQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4168#discussion_r442751401", "bodyText": "As discussed, i hesitated, and then changed my mind. I will see that again with https://jira.nuxeo.com/browse/NXP-28948 if you're ok with it as i will need to handle cases where XML would not be valid (while regexps would still work)", "author": "atchertchian", "createdAt": "2020-06-19T10:06:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc0OTkzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzMzk4Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/4168#discussion_r442833986", "bodyText": "After more discussion, will use StAX as primary parser, to handle more use cases, and fallback on regexps in case of invalid XML", "author": "atchertchian", "createdAt": "2020-06-19T13:16:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc0OTkzNA=="}], "type": "inlineReview", "revised_code": {"commit": "8e3bd9be6a1d01ece6be88f85fc11348ee7f6832", "chunk": "diff --git a/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/documentation/DocumentationHelper.java b/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/documentation/DocumentationHelper.java\nindex 0a9ca6d1b20..737232799b5 100644\n--- a/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/documentation/DocumentationHelper.java\n+++ b/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/documentation/DocumentationHelper.java\n\n@@ -141,61 +127,7 @@ public class DocumentationHelper {\n         if (sanitizer != null) {\n             html = sanitizer.sanitizeString(html, null);\n         }\n-        return secureXML(html);\n-    }\n-\n-    /**\n-     * Makes sure no passwords are embedded in the XML.\n-     */\n-    public static String secureXML(String xml) {\n-        if (StringUtils.isBlank(xml)) {\n-            return xml;\n-        }\n-        String res = xml;\n-        List<String> keywords = getKeywordList(SECURE_KEYWORDS_PROPERTY, DEFAULT_SECURE_KEYWORDS);\n-        List<String> whitelist = getKeywordList(WHITELISTED_KEYWORDS_PROPERTY, DEFAULT_WHITELISTED_KEYWORDS);\n-        for (String kw : keywords) {\n-            if (res.contains(kw)) {\n-                for (String pattern : List.of(\n-                        // node startswith\n-                        String.format(\"(?<start><(?<key>\\\\w*%s)\\\\s*>)[^<]*(?<end></\\\\w*%s>)\", kw, kw),\n-                        // node endswith\n-                        String.format(\"(?<start><(?<key>%s\\\\w*)\\\\s*>)[^<]*(?<end></%s\\\\w*>)\", kw, kw),\n-                        // attributes startswith\n-                        String.format(\"(?<start>(?<key>\\\\w*%s)=\\\")[^\\\"]*(?<end>\\\")\", kw),\n-                        String.format(\"(?<start>(?<key>\\\\w*%s)\\\"\\\\s*>)[^<]*(?<end><)\", kw),\n-                        // attributes endswith\n-                        String.format(\"(?<start>(?<key>%s\\\\w*)=\\\")[^\\\"]*(?<end>\\\")\", kw),\n-                        String.format(\"(?<start>(?<key>%s\\\\w*)\\\"\\\\s*>)[^<]*(?<end><)\", kw))) {\n-                    res = secureXML(res, pattern, whitelist);\n-                }\n-            }\n-        }\n-        return res;\n-    }\n-\n-    protected static String secureXML(String xml, String pattern, List<String> whitelist) {\n-        StringBuffer result = new StringBuffer();\n-        Matcher m = Pattern.compile(pattern).matcher(xml);\n-        while (m.find()) {\n-            String replacement;\n-            if (whitelist.contains(m.group(\"key\"))) {\n-                replacement = m.group();\n-            } else {\n-                replacement = m.group(\"start\") + SECRET_VALUE + m.group(\"end\");\n-            }\n-            m.appendReplacement(result, replacement);\n-        }\n-        return m.appendTail(result).toString();\n-    }\n-\n-    protected static List<String> getKeywordList(String property, List<String> defaultValue) {\n-        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n-        String value = cs.getString(property, null);\n-        if (value == null) {\n-            return defaultValue;\n-        }\n-        return List.of(value.split(\"\\\\s*,[,\\\\s]*\"));\n+        return SecureXMLHelper.secure(html);\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgwNDY0NA==", "url": "https://github.com/nuxeo/nuxeo/pull/4168#discussion_r442804644", "bodyText": "Something like below should be used as the ConfigurationService APIs with default value are not designed to pass null.\nreturn cs.getString(property).map(v -> v.split(\"\\\\s*,[,\\\\s]*\")).map(List::of).orElse(defaultValue);", "author": "kevinleturc", "createdAt": "2020-06-19T12:13:31Z", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/documentation/DocumentationHelper.java", "diffHunk": "@@ -134,15 +148,54 @@ public static String getHtml(String doc) {\n      * Makes sure no passwords are embedded in the XML.\n      */\n     public static String secureXML(String xml) {\n-        if (xml == null || !xml.contains(\"assword\")) {\n+        if (StringUtils.isBlank(xml)) {\n             return xml;\n         }\n-        xml = xml.replaceAll(\"<([a-zA-Z]*[pP])assword>[^<]*</([a-zA-Z]*)assword>\", \"<$1assword>********</$2assword>\");\n-        // attributes: nuxeo-core-auth\n-        xml = xml.replaceAll(\"([a-zA-Z]*[pP])assword=\\\"[^\\\"]*\\\"\", \"$1assword=\\\"********\\\"\");\n-        // property: default-repository-config\n-        xml = xml.replaceAll(\"([a-zA-Z]*[pP])assword\\\">[^<]*<\", \"$1assword\\\">********<\");\n-        return xml;\n+        String res = xml;\n+        List<String> keywords = getKeywordList(SECURE_KEYWORDS_PROPERTY, DEFAULT_SECURE_KEYWORDS);\n+        List<String> whitelist = getKeywordList(WHITELISTED_KEYWORDS_PROPERTY, DEFAULT_WHITELISTED_KEYWORDS);\n+        for (String kw : keywords) {\n+            if (res.contains(kw)) {\n+                for (String pattern : List.of(\n+                        // node startswith\n+                        String.format(\"(?<start><(?<key>\\\\w*%s)\\\\s*>)[^<]*(?<end></\\\\w*%s>)\", kw, kw),\n+                        // node endswith\n+                        String.format(\"(?<start><(?<key>%s\\\\w*)\\\\s*>)[^<]*(?<end></%s\\\\w*>)\", kw, kw),\n+                        // attributes startswith\n+                        String.format(\"(?<start>(?<key>\\\\w*%s)=\\\")[^\\\"]*(?<end>\\\")\", kw),\n+                        String.format(\"(?<start>(?<key>\\\\w*%s)\\\"\\\\s*>)[^<]*(?<end><)\", kw),\n+                        // attributes endswith\n+                        String.format(\"(?<start>(?<key>%s\\\\w*)=\\\")[^\\\"]*(?<end>\\\")\", kw),\n+                        String.format(\"(?<start>(?<key>%s\\\\w*)\\\"\\\\s*>)[^<]*(?<end><)\", kw))) {\n+                    res = secureXML(res, pattern, whitelist);\n+                }\n+            }\n+        }\n+        return res;\n+    }\n+\n+    protected static String secureXML(String xml, String pattern, List<String> whitelist) {\n+        StringBuffer result = new StringBuffer();\n+        Matcher m = Pattern.compile(pattern).matcher(xml);\n+        while (m.find()) {\n+            String replacement;\n+            if (whitelist.contains(m.group(\"key\"))) {\n+                replacement = m.group();\n+            } else {\n+                replacement = m.group(\"start\") + SECRET_VALUE + m.group(\"end\");\n+            }\n+            m.appendReplacement(result, replacement);\n+        }\n+        return m.appendTail(result).toString();\n+    }\n+\n+    protected static List<String> getKeywordList(String property, List<String> defaultValue) {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        String value = cs.getString(property, null);\n+        if (value == null) {\n+            return defaultValue;\n+        }\n+        return List.of(value.split(\"\\\\s*,[,\\\\s]*\"));", "originalCommit": "b66213f1d1b0d82b3517f3b02da82aa4acb6b435", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8e3bd9be6a1d01ece6be88f85fc11348ee7f6832", "chunk": "diff --git a/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/documentation/DocumentationHelper.java b/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/documentation/DocumentationHelper.java\nindex 0a9ca6d1b20..737232799b5 100644\n--- a/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/documentation/DocumentationHelper.java\n+++ b/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/documentation/DocumentationHelper.java\n\n@@ -141,61 +127,7 @@ public class DocumentationHelper {\n         if (sanitizer != null) {\n             html = sanitizer.sanitizeString(html, null);\n         }\n-        return secureXML(html);\n-    }\n-\n-    /**\n-     * Makes sure no passwords are embedded in the XML.\n-     */\n-    public static String secureXML(String xml) {\n-        if (StringUtils.isBlank(xml)) {\n-            return xml;\n-        }\n-        String res = xml;\n-        List<String> keywords = getKeywordList(SECURE_KEYWORDS_PROPERTY, DEFAULT_SECURE_KEYWORDS);\n-        List<String> whitelist = getKeywordList(WHITELISTED_KEYWORDS_PROPERTY, DEFAULT_WHITELISTED_KEYWORDS);\n-        for (String kw : keywords) {\n-            if (res.contains(kw)) {\n-                for (String pattern : List.of(\n-                        // node startswith\n-                        String.format(\"(?<start><(?<key>\\\\w*%s)\\\\s*>)[^<]*(?<end></\\\\w*%s>)\", kw, kw),\n-                        // node endswith\n-                        String.format(\"(?<start><(?<key>%s\\\\w*)\\\\s*>)[^<]*(?<end></%s\\\\w*>)\", kw, kw),\n-                        // attributes startswith\n-                        String.format(\"(?<start>(?<key>\\\\w*%s)=\\\")[^\\\"]*(?<end>\\\")\", kw),\n-                        String.format(\"(?<start>(?<key>\\\\w*%s)\\\"\\\\s*>)[^<]*(?<end><)\", kw),\n-                        // attributes endswith\n-                        String.format(\"(?<start>(?<key>%s\\\\w*)=\\\")[^\\\"]*(?<end>\\\")\", kw),\n-                        String.format(\"(?<start>(?<key>%s\\\\w*)\\\"\\\\s*>)[^<]*(?<end><)\", kw))) {\n-                    res = secureXML(res, pattern, whitelist);\n-                }\n-            }\n-        }\n-        return res;\n-    }\n-\n-    protected static String secureXML(String xml, String pattern, List<String> whitelist) {\n-        StringBuffer result = new StringBuffer();\n-        Matcher m = Pattern.compile(pattern).matcher(xml);\n-        while (m.find()) {\n-            String replacement;\n-            if (whitelist.contains(m.group(\"key\"))) {\n-                replacement = m.group();\n-            } else {\n-                replacement = m.group(\"start\") + SECRET_VALUE + m.group(\"end\");\n-            }\n-            m.appendReplacement(result, replacement);\n-        }\n-        return m.appendTail(result).toString();\n-    }\n-\n-    protected static List<String> getKeywordList(String property, List<String> defaultValue) {\n-        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n-        String value = cs.getString(property, null);\n-        if (value == null) {\n-            return defaultValue;\n-        }\n-        return List.of(value.split(\"\\\\s*,[,\\\\s]*\"));\n+        return SecureXMLHelper.secure(html);\n     }\n \n }\n"}}, {"oid": "8e3bd9be6a1d01ece6be88f85fc11348ee7f6832", "url": "https://github.com/nuxeo/nuxeo/commit/8e3bd9be6a1d01ece6be88f85fc11348ee7f6832", "message": "NXP-29220: use StAX parser for explorer XML secure content", "committedDate": "2020-06-22T08:23:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQyMTQ1OA==", "url": "https://github.com/nuxeo/nuxeo/pull/4168#discussion_r443421458", "bodyText": "Wanted?", "author": "kevinleturc", "createdAt": "2020-06-22T09:11:28Z", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/documentation/SecureXMLHelper.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.apidoc.documentation;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.xml.stream.XMLEventFactory;\n+import javax.xml.stream.XMLEventReader;\n+import javax.xml.stream.XMLEventWriter;\n+import javax.xml.stream.XMLInputFactory;\n+import javax.xml.stream.XMLOutputFactory;\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.events.Attribute;\n+import javax.xml.stream.events.StartDocument;\n+import javax.xml.stream.events.StartElement;\n+import javax.xml.stream.events.XMLEvent;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.services.config.ConfigurationService;\n+\n+/**\n+ * Helper for XML secure content management.\n+ *\n+ * @since 11.2\n+ */\n+public class SecureXMLHelper {\n+\n+    private static final Logger log = LogManager.getLogger(SecureXMLHelper.class);\n+\n+    protected static final String KEYWORDS_PROPERTY = \"org.nuxeo.apidoc.secure.xml.keywords\";\n+\n+    public static final List<String> DEFAULT_KEYWORDS = List.of(\"password\", \"Password\", \"secret\", \"apiKey\");\n+\n+    protected static final String WHITELISTED_KEYWORDS_PROPERTY = \"org.nuxeo.apidoc.secure.xml.keywords.whitelisted\";\n+\n+    public static final List<String> DEFAULT_WHITELISTED_KEYWORDS = List.of(\"passwordField\", \"passwordHashAlgorithm\");\n+\n+    protected static final String SECRET_VALUE = \"********\";\n+\n+    protected static final XMLInputFactory inputFactory = XMLInputFactory.newInstance();\n+\n+    protected static final XMLOutputFactory outputFactory = XMLOutputFactory.newInstance();\n+\n+    protected static final XMLEventFactory eventFactory = XMLEventFactory.newInstance();\n+\n+    /**\n+     * Makes sure no passwords and similar sensitive data are embedded in the XML.\n+     */\n+    public static String secure(String xml) {\n+        if (StringUtils.isBlank(xml)) {\n+            return xml;\n+        }\n+        List<String> keywords = getKeywords();\n+        List<String> whitelist = getWhitelistedKeywords();\n+        try {\n+            return secureStAX(xml, keywords, whitelist);\n+        } catch (XMLStreamException e) {\n+            log.error(e, e);\n+            return secureRegexp(xml, keywords, whitelist);\n+        }\n+    }\n+\n+    public static List<String> getKeywords() {\n+        return getKeywordList(KEYWORDS_PROPERTY, DEFAULT_KEYWORDS);\n+    }\n+\n+    public static List<String> getWhitelistedKeywords() {\n+        return getKeywordList(WHITELISTED_KEYWORDS_PROPERTY, DEFAULT_WHITELISTED_KEYWORDS);\n+    }\n+\n+    protected static List<String> getKeywordList(String property, List<String> defaultValue) {\n+        return Framework.getService(ConfigurationService.class)\n+                        .getString(property)\n+                        .map(v -> v.split(\"\\\\s*,[,\\\\s]*\"))\n+                        .map(List::of)\n+                        .orElse(defaultValue);\n+    }\n+\n+    public static String secureStAX(String xml, List<String> keywords, List<String> whitelist)\n+            throws XMLStreamException {\n+        // System.out.println(\"xml = \" + xml);", "originalCommit": "8e3bd9be6a1d01ece6be88f85fc11348ee7f6832", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQyNTA3NA==", "url": "https://github.com/nuxeo/nuxeo/pull/4168#discussion_r443425074", "bodyText": "No, thanks", "author": "atchertchian", "createdAt": "2020-06-22T09:17:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQyMTQ1OA=="}], "type": "inlineReview", "revised_code": {"commit": "cea10091ef49275b036851fb9e218f13236bba5e", "chunk": "diff --git a/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/documentation/SecureXMLHelper.java b/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/documentation/SecureXMLHelper.java\nindex 26d65bf7b21..21b2c599cd1 100644\n--- a/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/documentation/SecureXMLHelper.java\n+++ b/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/documentation/SecureXMLHelper.java\n\n@@ -18,31 +18,11 @@\n  */\n package org.nuxeo.apidoc.documentation;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n-import java.io.InputStream;\n-import java.io.OutputStream;\n-import java.util.Iterator;\n import java.util.List;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n-import javax.xml.stream.XMLEventFactory;\n-import javax.xml.stream.XMLEventReader;\n-import javax.xml.stream.XMLEventWriter;\n-import javax.xml.stream.XMLInputFactory;\n-import javax.xml.stream.XMLOutputFactory;\n-import javax.xml.stream.XMLStreamException;\n-import javax.xml.stream.events.Attribute;\n-import javax.xml.stream.events.StartDocument;\n-import javax.xml.stream.events.StartElement;\n-import javax.xml.stream.events.XMLEvent;\n-\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n-import org.nuxeo.runtime.api.Framework;\n-import org.nuxeo.runtime.services.config.ConfigurationService;\n \n /**\n  * Helper for XML secure content management.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQyMjE2Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/4168#discussion_r443422167", "bodyText": "The stream InputStream doesn't seem to be closed, could we use try-with-resources to do that?", "author": "kevinleturc", "createdAt": "2020-06-22T09:12:46Z", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/documentation/SecureXMLHelper.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.apidoc.documentation;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.xml.stream.XMLEventFactory;\n+import javax.xml.stream.XMLEventReader;\n+import javax.xml.stream.XMLEventWriter;\n+import javax.xml.stream.XMLInputFactory;\n+import javax.xml.stream.XMLOutputFactory;\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.events.Attribute;\n+import javax.xml.stream.events.StartDocument;\n+import javax.xml.stream.events.StartElement;\n+import javax.xml.stream.events.XMLEvent;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.services.config.ConfigurationService;\n+\n+/**\n+ * Helper for XML secure content management.\n+ *\n+ * @since 11.2\n+ */\n+public class SecureXMLHelper {\n+\n+    private static final Logger log = LogManager.getLogger(SecureXMLHelper.class);\n+\n+    protected static final String KEYWORDS_PROPERTY = \"org.nuxeo.apidoc.secure.xml.keywords\";\n+\n+    public static final List<String> DEFAULT_KEYWORDS = List.of(\"password\", \"Password\", \"secret\", \"apiKey\");\n+\n+    protected static final String WHITELISTED_KEYWORDS_PROPERTY = \"org.nuxeo.apidoc.secure.xml.keywords.whitelisted\";\n+\n+    public static final List<String> DEFAULT_WHITELISTED_KEYWORDS = List.of(\"passwordField\", \"passwordHashAlgorithm\");\n+\n+    protected static final String SECRET_VALUE = \"********\";\n+\n+    protected static final XMLInputFactory inputFactory = XMLInputFactory.newInstance();\n+\n+    protected static final XMLOutputFactory outputFactory = XMLOutputFactory.newInstance();\n+\n+    protected static final XMLEventFactory eventFactory = XMLEventFactory.newInstance();\n+\n+    /**\n+     * Makes sure no passwords and similar sensitive data are embedded in the XML.\n+     */\n+    public static String secure(String xml) {\n+        if (StringUtils.isBlank(xml)) {\n+            return xml;\n+        }\n+        List<String> keywords = getKeywords();\n+        List<String> whitelist = getWhitelistedKeywords();\n+        try {\n+            return secureStAX(xml, keywords, whitelist);\n+        } catch (XMLStreamException e) {\n+            log.error(e, e);\n+            return secureRegexp(xml, keywords, whitelist);\n+        }\n+    }\n+\n+    public static List<String> getKeywords() {\n+        return getKeywordList(KEYWORDS_PROPERTY, DEFAULT_KEYWORDS);\n+    }\n+\n+    public static List<String> getWhitelistedKeywords() {\n+        return getKeywordList(WHITELISTED_KEYWORDS_PROPERTY, DEFAULT_WHITELISTED_KEYWORDS);\n+    }\n+\n+    protected static List<String> getKeywordList(String property, List<String> defaultValue) {\n+        return Framework.getService(ConfigurationService.class)\n+                        .getString(property)\n+                        .map(v -> v.split(\"\\\\s*,[,\\\\s]*\"))\n+                        .map(List::of)\n+                        .orElse(defaultValue);\n+    }\n+\n+    public static String secureStAX(String xml, List<String> keywords, List<String> whitelist)\n+            throws XMLStreamException {\n+        // System.out.println(\"xml = \" + xml);\n+\n+        InputStream stream = new ByteArrayInputStream(xml.getBytes());\n+        XMLEventReader reader = inputFactory.createXMLEventReader(stream);\n+        OutputStream output = new ByteArrayOutputStream();\n+        XMLEventWriter writer = outputFactory.createXMLEventWriter(output);", "originalCommit": "8e3bd9be6a1d01ece6be88f85fc11348ee7f6832", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQzMDQ4Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/4168#discussion_r443430487", "bodyText": "As discussed, byte array input streams do not need to be closed, however could be a good practice, wdyt @efge please?", "author": "atchertchian", "createdAt": "2020-06-22T09:27:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQyMjE2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU4NjA1OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4168#discussion_r443586059", "bodyText": "@atchertchian indeed ByteArrayInputStream doesn't need to be closed, the GC will deal with it, however most tools and IDEs won't recognize that the InputStream you use later on comes from a ByteArrayInputStream and will flag it as a leaked resource. So you might as well use try-with-resources there too.", "author": "efge", "createdAt": "2020-06-22T14:10:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQyMjE2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "cea10091ef49275b036851fb9e218f13236bba5e", "chunk": "diff --git a/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/documentation/SecureXMLHelper.java b/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/documentation/SecureXMLHelper.java\nindex 26d65bf7b21..21b2c599cd1 100644\n--- a/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/documentation/SecureXMLHelper.java\n+++ b/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/documentation/SecureXMLHelper.java\n\n@@ -18,31 +18,11 @@\n  */\n package org.nuxeo.apidoc.documentation;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n-import java.io.InputStream;\n-import java.io.OutputStream;\n-import java.util.Iterator;\n import java.util.List;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n-import javax.xml.stream.XMLEventFactory;\n-import javax.xml.stream.XMLEventReader;\n-import javax.xml.stream.XMLEventWriter;\n-import javax.xml.stream.XMLInputFactory;\n-import javax.xml.stream.XMLOutputFactory;\n-import javax.xml.stream.XMLStreamException;\n-import javax.xml.stream.events.Attribute;\n-import javax.xml.stream.events.StartDocument;\n-import javax.xml.stream.events.StartElement;\n-import javax.xml.stream.events.XMLEvent;\n-\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n-import org.nuxeo.runtime.api.Framework;\n-import org.nuxeo.runtime.services.config.ConfigurationService;\n \n /**\n  * Helper for XML secure content management.\n"}}, {"oid": "cea10091ef49275b036851fb9e218f13236bba5e", "url": "https://github.com/nuxeo/nuxeo/commit/cea10091ef49275b036851fb9e218f13236bba5e", "message": "NXP-29220: improve Explorer secure XML logics", "committedDate": "2020-06-22T17:41:55Z", "type": "commit"}, {"oid": "cf83db9dcb1ce0efe92406536a489adb99ee53d6", "url": "https://github.com/nuxeo/nuxeo/commit/cf83db9dcb1ce0efe92406536a489adb99ee53d6", "message": "NXP-29220: make explorer secure keywords configurable", "committedDate": "2020-06-22T17:41:55Z", "type": "commit"}, {"oid": "68e6cf1fb7dcb5382601dc5b7bdd53578d300efd", "url": "https://github.com/nuxeo/nuxeo/commit/68e6cf1fb7dcb5382601dc5b7bdd53578d300efd", "message": "NXP-29220: add pristine explorer component to show diff after XML processing", "committedDate": "2020-06-22T17:52:00Z", "type": "commit"}, {"oid": "b1e184234f58579419df8587fd64f73a0b31e8b8", "url": "https://github.com/nuxeo/nuxeo/commit/b1e184234f58579419df8587fd64f73a0b31e8b8", "message": "NXP-29220: use StAX parser for explorer XML secure content", "committedDate": "2020-06-22T17:53:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgxMDIzNQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4168#discussion_r443810235", "bodyText": "getBytes(UTF_8)", "author": "efge", "createdAt": "2020-06-22T20:34:34Z", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/documentation/SecureXMLHelper.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.apidoc.documentation;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.xml.stream.XMLEventFactory;\n+import javax.xml.stream.XMLEventReader;\n+import javax.xml.stream.XMLEventWriter;\n+import javax.xml.stream.XMLInputFactory;\n+import javax.xml.stream.XMLOutputFactory;\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.events.Attribute;\n+import javax.xml.stream.events.StartDocument;\n+import javax.xml.stream.events.StartElement;\n+import javax.xml.stream.events.XMLEvent;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.services.config.ConfigurationService;\n+\n+/**\n+ * Helper for XML secure content management.\n+ *\n+ * @since 11.2\n+ */\n+public class SecureXMLHelper {\n+\n+    protected static final String KEYWORDS_PROPERTY = \"org.nuxeo.apidoc.secure.xml.keywords\";\n+\n+    public static final List<String> DEFAULT_KEYWORDS = List.of(\"password\", \"Password\", \"secret\", \"apiKey\");\n+\n+    protected static final String WHITELISTED_KEYWORDS_PROPERTY = \"org.nuxeo.apidoc.secure.xml.keywords.whitelisted\";\n+\n+    public static final List<String> DEFAULT_WHITELISTED_KEYWORDS = List.of(\"passwordField\", \"passwordHashAlgorithm\");\n+\n+    protected static final String SECRET_VALUE = \"********\";\n+\n+    protected static final XMLInputFactory inputFactory = XMLInputFactory.newInstance();\n+\n+    protected static final XMLOutputFactory outputFactory = XMLOutputFactory.newInstance();\n+\n+    protected static final XMLEventFactory eventFactory = XMLEventFactory.newInstance();\n+\n+    /**\n+     * Makes sure no passwords and similar sensitive data are embedded in the XML.\n+     */\n+    public static String secure(String xml) {\n+        List<String> keywords = getKeywords();\n+        if (!isChangeNeeded(xml, keywords)) {\n+            return xml;\n+        }\n+        List<String> whitelist = getWhitelistedKeywords();\n+        try {\n+            return secureStAX(xml, keywords, whitelist);\n+        } catch (XMLStreamException e) {\n+            return secureRegexp(xml, keywords, whitelist);\n+        }\n+    }\n+\n+    protected static boolean isChangeNeeded(String xml, List<String> keywords) {\n+        if (StringUtils.isBlank(xml) || keywords.stream().noneMatch(xml::contains)) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    public static List<String> getKeywords() {\n+        return getKeywordList(KEYWORDS_PROPERTY, DEFAULT_KEYWORDS);\n+    }\n+\n+    public static List<String> getWhitelistedKeywords() {\n+        return getKeywordList(WHITELISTED_KEYWORDS_PROPERTY, DEFAULT_WHITELISTED_KEYWORDS);\n+    }\n+\n+    protected static List<String> getKeywordList(String property, List<String> defaultValue) {\n+        return Framework.getService(ConfigurationService.class)\n+                        .getString(property)\n+                        .map(v -> v.split(\"\\\\s*,[,\\\\s]*\"))\n+                        .map(List::of)\n+                        .orElse(defaultValue);\n+    }\n+\n+    public static String secureStAX(String xml, List<String> keywords, List<String> whitelist)\n+            throws XMLStreamException {\n+        if (!isChangeNeeded(xml, keywords)) {\n+            return xml;\n+        }\n+        try (InputStream stream = new ByteArrayInputStream(xml.getBytes());", "originalCommit": "b1e184234f58579419df8587fd64f73a0b31e8b8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6791a746660019749245b6c7362fecd8a48a8373", "chunk": "diff --git a/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/documentation/SecureXMLHelper.java b/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/documentation/SecureXMLHelper.java\nindex acd37499ec6..84554ae37a9 100644\n--- a/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/documentation/SecureXMLHelper.java\n+++ b/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/documentation/SecureXMLHelper.java\n\n@@ -22,7 +22,8 @@ import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n import java.io.InputStream;\n-import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n import java.util.regex.Matcher;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgxMTMxMg==", "url": "https://github.com/nuxeo/nuxeo/pull/4168#discussion_r443811312", "bodyText": "constants -> all caps", "author": "efge", "createdAt": "2020-06-22T20:36:35Z", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/documentation/SecureXMLHelper.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.apidoc.documentation;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.xml.stream.XMLEventFactory;\n+import javax.xml.stream.XMLEventReader;\n+import javax.xml.stream.XMLEventWriter;\n+import javax.xml.stream.XMLInputFactory;\n+import javax.xml.stream.XMLOutputFactory;\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.events.Attribute;\n+import javax.xml.stream.events.StartDocument;\n+import javax.xml.stream.events.StartElement;\n+import javax.xml.stream.events.XMLEvent;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.services.config.ConfigurationService;\n+\n+/**\n+ * Helper for XML secure content management.\n+ *\n+ * @since 11.2\n+ */\n+public class SecureXMLHelper {\n+\n+    protected static final String KEYWORDS_PROPERTY = \"org.nuxeo.apidoc.secure.xml.keywords\";\n+\n+    public static final List<String> DEFAULT_KEYWORDS = List.of(\"password\", \"Password\", \"secret\", \"apiKey\");\n+\n+    protected static final String WHITELISTED_KEYWORDS_PROPERTY = \"org.nuxeo.apidoc.secure.xml.keywords.whitelisted\";\n+\n+    public static final List<String> DEFAULT_WHITELISTED_KEYWORDS = List.of(\"passwordField\", \"passwordHashAlgorithm\");\n+\n+    protected static final String SECRET_VALUE = \"********\";\n+\n+    protected static final XMLInputFactory inputFactory = XMLInputFactory.newInstance();", "originalCommit": "b1e184234f58579419df8587fd64f73a0b31e8b8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6791a746660019749245b6c7362fecd8a48a8373", "chunk": "diff --git a/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/documentation/SecureXMLHelper.java b/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/documentation/SecureXMLHelper.java\nindex acd37499ec6..84554ae37a9 100644\n--- a/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/documentation/SecureXMLHelper.java\n+++ b/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/documentation/SecureXMLHelper.java\n\n@@ -22,7 +22,8 @@ import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n import java.io.InputStream;\n-import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n import java.util.regex.Matcher;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgxMzIzMA==", "url": "https://github.com/nuxeo/nuxeo/pull/4168#discussion_r443813230", "bodyText": "Could be just one line", "author": "efge", "createdAt": "2020-06-22T20:40:17Z", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/documentation/SecureXMLHelper.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.apidoc.documentation;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.xml.stream.XMLEventFactory;\n+import javax.xml.stream.XMLEventReader;\n+import javax.xml.stream.XMLEventWriter;\n+import javax.xml.stream.XMLInputFactory;\n+import javax.xml.stream.XMLOutputFactory;\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.events.Attribute;\n+import javax.xml.stream.events.StartDocument;\n+import javax.xml.stream.events.StartElement;\n+import javax.xml.stream.events.XMLEvent;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.services.config.ConfigurationService;\n+\n+/**\n+ * Helper for XML secure content management.\n+ *\n+ * @since 11.2\n+ */\n+public class SecureXMLHelper {\n+\n+    protected static final String KEYWORDS_PROPERTY = \"org.nuxeo.apidoc.secure.xml.keywords\";\n+\n+    public static final List<String> DEFAULT_KEYWORDS = List.of(\"password\", \"Password\", \"secret\", \"apiKey\");\n+\n+    protected static final String WHITELISTED_KEYWORDS_PROPERTY = \"org.nuxeo.apidoc.secure.xml.keywords.whitelisted\";\n+\n+    public static final List<String> DEFAULT_WHITELISTED_KEYWORDS = List.of(\"passwordField\", \"passwordHashAlgorithm\");\n+\n+    protected static final String SECRET_VALUE = \"********\";\n+\n+    protected static final XMLInputFactory inputFactory = XMLInputFactory.newInstance();\n+\n+    protected static final XMLOutputFactory outputFactory = XMLOutputFactory.newInstance();\n+\n+    protected static final XMLEventFactory eventFactory = XMLEventFactory.newInstance();\n+\n+    /**\n+     * Makes sure no passwords and similar sensitive data are embedded in the XML.\n+     */\n+    public static String secure(String xml) {\n+        List<String> keywords = getKeywords();\n+        if (!isChangeNeeded(xml, keywords)) {\n+            return xml;\n+        }\n+        List<String> whitelist = getWhitelistedKeywords();\n+        try {\n+            return secureStAX(xml, keywords, whitelist);\n+        } catch (XMLStreamException e) {\n+            return secureRegexp(xml, keywords, whitelist);\n+        }\n+    }\n+\n+    protected static boolean isChangeNeeded(String xml, List<String> keywords) {\n+        if (StringUtils.isBlank(xml) || keywords.stream().noneMatch(xml::contains)) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    public static List<String> getKeywords() {\n+        return getKeywordList(KEYWORDS_PROPERTY, DEFAULT_KEYWORDS);\n+    }\n+\n+    public static List<String> getWhitelistedKeywords() {\n+        return getKeywordList(WHITELISTED_KEYWORDS_PROPERTY, DEFAULT_WHITELISTED_KEYWORDS);\n+    }\n+\n+    protected static List<String> getKeywordList(String property, List<String> defaultValue) {\n+        return Framework.getService(ConfigurationService.class)\n+                        .getString(property)\n+                        .map(v -> v.split(\"\\\\s*,[,\\\\s]*\"))\n+                        .map(List::of)\n+                        .orElse(defaultValue);\n+    }\n+\n+    public static String secureStAX(String xml, List<String> keywords, List<String> whitelist)\n+            throws XMLStreamException {\n+        if (!isChangeNeeded(xml, keywords)) {\n+            return xml;\n+        }\n+        try (InputStream stream = new ByteArrayInputStream(xml.getBytes());\n+                OutputStream output = new ByteArrayOutputStream()) {\n+\n+            XMLEventReader reader = inputFactory.createXMLEventReader(stream);\n+            XMLEventWriter writer = outputFactory.createXMLEventWriter(output);\n+\n+            boolean skipContent = false;\n+            while (reader.hasNext()) {\n+                XMLEvent event = reader.nextEvent();\n+                if (skipContent && event.isCharacters()) {\n+                    writer.add(eventFactory.createCharacters(SECRET_VALUE));\n+                    skipContent = false;\n+                    continue;\n+                }\n+                if (event.isStartElement()) {\n+                    StartElement el = event.asStartElement();\n+                    String name = el.getName().getLocalPart();\n+                    if (matches(name, keywords, whitelist)) {\n+                        skipContent = true;\n+                    }\n+                    writer.add(eventFactory.createStartElement(el.getName(), null, null));\n+                    Iterator<Attribute> attrIt = el.getAttributes();\n+                    while (attrIt.hasNext()) {\n+                        Attribute attr = attrIt.next();\n+                        String attrName = attr.getName().getLocalPart();\n+                        String value = attr.getValue();\n+                        if (matches(attrName, keywords, whitelist)) {\n+                            // replace attribute value\n+                            writer.add(eventFactory.createAttribute(attrName, SECRET_VALUE));\n+                        } else {\n+                            writer.add(eventFactory.createAttribute(attrName, value));\n+                            if (matches(value, keywords, whitelist)) {\n+                                // replace node content\n+                                skipContent = true;\n+                            }\n+                        }\n+                    }\n+                } else if (event.isStartDocument()) {\n+                    if (((StartDocument) event).getVersion() == null) {\n+                        // skip it, it's been added by the reader processing\n+                        continue;\n+                    } else {\n+                        writer.add(event);\n+                        writer.add(eventFactory.createCharacters(\"\\n\"));\n+                    }\n+                } else {\n+                    writer.add(event);\n+                }\n+\n+                if (event.isEndElement()) {\n+                    skipContent = false;\n+                }\n+            }\n+            writer.flush();\n+            writer.close();\n+\n+            String all = output.toString();\n+            return all;", "originalCommit": "b1e184234f58579419df8587fd64f73a0b31e8b8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6791a746660019749245b6c7362fecd8a48a8373", "chunk": "diff --git a/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/documentation/SecureXMLHelper.java b/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/documentation/SecureXMLHelper.java\nindex acd37499ec6..84554ae37a9 100644\n--- a/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/documentation/SecureXMLHelper.java\n+++ b/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/documentation/SecureXMLHelper.java\n\n@@ -22,7 +22,8 @@ import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n import java.io.InputStream;\n-import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n import java.util.regex.Matcher;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgxMzY0NA==", "url": "https://github.com/nuxeo/nuxeo/pull/4168#discussion_r443813644", "bodyText": "Define ByteArrayOutputStream output above, and use output.toString(UTF_8) to convert to string. Charset is important.", "author": "efge", "createdAt": "2020-06-22T20:41:03Z", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/documentation/SecureXMLHelper.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.apidoc.documentation;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.xml.stream.XMLEventFactory;\n+import javax.xml.stream.XMLEventReader;\n+import javax.xml.stream.XMLEventWriter;\n+import javax.xml.stream.XMLInputFactory;\n+import javax.xml.stream.XMLOutputFactory;\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.events.Attribute;\n+import javax.xml.stream.events.StartDocument;\n+import javax.xml.stream.events.StartElement;\n+import javax.xml.stream.events.XMLEvent;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.services.config.ConfigurationService;\n+\n+/**\n+ * Helper for XML secure content management.\n+ *\n+ * @since 11.2\n+ */\n+public class SecureXMLHelper {\n+\n+    protected static final String KEYWORDS_PROPERTY = \"org.nuxeo.apidoc.secure.xml.keywords\";\n+\n+    public static final List<String> DEFAULT_KEYWORDS = List.of(\"password\", \"Password\", \"secret\", \"apiKey\");\n+\n+    protected static final String WHITELISTED_KEYWORDS_PROPERTY = \"org.nuxeo.apidoc.secure.xml.keywords.whitelisted\";\n+\n+    public static final List<String> DEFAULT_WHITELISTED_KEYWORDS = List.of(\"passwordField\", \"passwordHashAlgorithm\");\n+\n+    protected static final String SECRET_VALUE = \"********\";\n+\n+    protected static final XMLInputFactory inputFactory = XMLInputFactory.newInstance();\n+\n+    protected static final XMLOutputFactory outputFactory = XMLOutputFactory.newInstance();\n+\n+    protected static final XMLEventFactory eventFactory = XMLEventFactory.newInstance();\n+\n+    /**\n+     * Makes sure no passwords and similar sensitive data are embedded in the XML.\n+     */\n+    public static String secure(String xml) {\n+        List<String> keywords = getKeywords();\n+        if (!isChangeNeeded(xml, keywords)) {\n+            return xml;\n+        }\n+        List<String> whitelist = getWhitelistedKeywords();\n+        try {\n+            return secureStAX(xml, keywords, whitelist);\n+        } catch (XMLStreamException e) {\n+            return secureRegexp(xml, keywords, whitelist);\n+        }\n+    }\n+\n+    protected static boolean isChangeNeeded(String xml, List<String> keywords) {\n+        if (StringUtils.isBlank(xml) || keywords.stream().noneMatch(xml::contains)) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    public static List<String> getKeywords() {\n+        return getKeywordList(KEYWORDS_PROPERTY, DEFAULT_KEYWORDS);\n+    }\n+\n+    public static List<String> getWhitelistedKeywords() {\n+        return getKeywordList(WHITELISTED_KEYWORDS_PROPERTY, DEFAULT_WHITELISTED_KEYWORDS);\n+    }\n+\n+    protected static List<String> getKeywordList(String property, List<String> defaultValue) {\n+        return Framework.getService(ConfigurationService.class)\n+                        .getString(property)\n+                        .map(v -> v.split(\"\\\\s*,[,\\\\s]*\"))\n+                        .map(List::of)\n+                        .orElse(defaultValue);\n+    }\n+\n+    public static String secureStAX(String xml, List<String> keywords, List<String> whitelist)\n+            throws XMLStreamException {\n+        if (!isChangeNeeded(xml, keywords)) {\n+            return xml;\n+        }\n+        try (InputStream stream = new ByteArrayInputStream(xml.getBytes());\n+                OutputStream output = new ByteArrayOutputStream()) {\n+\n+            XMLEventReader reader = inputFactory.createXMLEventReader(stream);\n+            XMLEventWriter writer = outputFactory.createXMLEventWriter(output);\n+\n+            boolean skipContent = false;\n+            while (reader.hasNext()) {\n+                XMLEvent event = reader.nextEvent();\n+                if (skipContent && event.isCharacters()) {\n+                    writer.add(eventFactory.createCharacters(SECRET_VALUE));\n+                    skipContent = false;\n+                    continue;\n+                }\n+                if (event.isStartElement()) {\n+                    StartElement el = event.asStartElement();\n+                    String name = el.getName().getLocalPart();\n+                    if (matches(name, keywords, whitelist)) {\n+                        skipContent = true;\n+                    }\n+                    writer.add(eventFactory.createStartElement(el.getName(), null, null));\n+                    Iterator<Attribute> attrIt = el.getAttributes();\n+                    while (attrIt.hasNext()) {\n+                        Attribute attr = attrIt.next();\n+                        String attrName = attr.getName().getLocalPart();\n+                        String value = attr.getValue();\n+                        if (matches(attrName, keywords, whitelist)) {\n+                            // replace attribute value\n+                            writer.add(eventFactory.createAttribute(attrName, SECRET_VALUE));\n+                        } else {\n+                            writer.add(eventFactory.createAttribute(attrName, value));\n+                            if (matches(value, keywords, whitelist)) {\n+                                // replace node content\n+                                skipContent = true;\n+                            }\n+                        }\n+                    }\n+                } else if (event.isStartDocument()) {\n+                    if (((StartDocument) event).getVersion() == null) {\n+                        // skip it, it's been added by the reader processing\n+                        continue;\n+                    } else {\n+                        writer.add(event);\n+                        writer.add(eventFactory.createCharacters(\"\\n\"));\n+                    }\n+                } else {\n+                    writer.add(event);\n+                }\n+\n+                if (event.isEndElement()) {\n+                    skipContent = false;\n+                }\n+            }\n+            writer.flush();\n+            writer.close();\n+\n+            String all = output.toString();", "originalCommit": "b1e184234f58579419df8587fd64f73a0b31e8b8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6791a746660019749245b6c7362fecd8a48a8373", "chunk": "diff --git a/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/documentation/SecureXMLHelper.java b/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/documentation/SecureXMLHelper.java\nindex acd37499ec6..84554ae37a9 100644\n--- a/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/documentation/SecureXMLHelper.java\n+++ b/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/documentation/SecureXMLHelper.java\n\n@@ -22,7 +22,8 @@ import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n import java.io.InputStream;\n-import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n import java.util.regex.Matcher;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgxNDQyMg==", "url": "https://github.com/nuxeo/nuxeo/pull/4168#discussion_r443814422", "bodyText": "Could you also add the variants with a ' to delimit attribute values?", "author": "efge", "createdAt": "2020-06-22T20:42:34Z", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/documentation/SecureXMLHelper.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.apidoc.documentation;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.xml.stream.XMLEventFactory;\n+import javax.xml.stream.XMLEventReader;\n+import javax.xml.stream.XMLEventWriter;\n+import javax.xml.stream.XMLInputFactory;\n+import javax.xml.stream.XMLOutputFactory;\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.events.Attribute;\n+import javax.xml.stream.events.StartDocument;\n+import javax.xml.stream.events.StartElement;\n+import javax.xml.stream.events.XMLEvent;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.services.config.ConfigurationService;\n+\n+/**\n+ * Helper for XML secure content management.\n+ *\n+ * @since 11.2\n+ */\n+public class SecureXMLHelper {\n+\n+    protected static final String KEYWORDS_PROPERTY = \"org.nuxeo.apidoc.secure.xml.keywords\";\n+\n+    public static final List<String> DEFAULT_KEYWORDS = List.of(\"password\", \"Password\", \"secret\", \"apiKey\");\n+\n+    protected static final String WHITELISTED_KEYWORDS_PROPERTY = \"org.nuxeo.apidoc.secure.xml.keywords.whitelisted\";\n+\n+    public static final List<String> DEFAULT_WHITELISTED_KEYWORDS = List.of(\"passwordField\", \"passwordHashAlgorithm\");\n+\n+    protected static final String SECRET_VALUE = \"********\";\n+\n+    protected static final XMLInputFactory inputFactory = XMLInputFactory.newInstance();\n+\n+    protected static final XMLOutputFactory outputFactory = XMLOutputFactory.newInstance();\n+\n+    protected static final XMLEventFactory eventFactory = XMLEventFactory.newInstance();\n+\n+    /**\n+     * Makes sure no passwords and similar sensitive data are embedded in the XML.\n+     */\n+    public static String secure(String xml) {\n+        List<String> keywords = getKeywords();\n+        if (!isChangeNeeded(xml, keywords)) {\n+            return xml;\n+        }\n+        List<String> whitelist = getWhitelistedKeywords();\n+        try {\n+            return secureStAX(xml, keywords, whitelist);\n+        } catch (XMLStreamException e) {\n+            return secureRegexp(xml, keywords, whitelist);\n+        }\n+    }\n+\n+    protected static boolean isChangeNeeded(String xml, List<String> keywords) {\n+        if (StringUtils.isBlank(xml) || keywords.stream().noneMatch(xml::contains)) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    public static List<String> getKeywords() {\n+        return getKeywordList(KEYWORDS_PROPERTY, DEFAULT_KEYWORDS);\n+    }\n+\n+    public static List<String> getWhitelistedKeywords() {\n+        return getKeywordList(WHITELISTED_KEYWORDS_PROPERTY, DEFAULT_WHITELISTED_KEYWORDS);\n+    }\n+\n+    protected static List<String> getKeywordList(String property, List<String> defaultValue) {\n+        return Framework.getService(ConfigurationService.class)\n+                        .getString(property)\n+                        .map(v -> v.split(\"\\\\s*,[,\\\\s]*\"))\n+                        .map(List::of)\n+                        .orElse(defaultValue);\n+    }\n+\n+    public static String secureStAX(String xml, List<String> keywords, List<String> whitelist)\n+            throws XMLStreamException {\n+        if (!isChangeNeeded(xml, keywords)) {\n+            return xml;\n+        }\n+        try (InputStream stream = new ByteArrayInputStream(xml.getBytes());\n+                OutputStream output = new ByteArrayOutputStream()) {\n+\n+            XMLEventReader reader = inputFactory.createXMLEventReader(stream);\n+            XMLEventWriter writer = outputFactory.createXMLEventWriter(output);\n+\n+            boolean skipContent = false;\n+            while (reader.hasNext()) {\n+                XMLEvent event = reader.nextEvent();\n+                if (skipContent && event.isCharacters()) {\n+                    writer.add(eventFactory.createCharacters(SECRET_VALUE));\n+                    skipContent = false;\n+                    continue;\n+                }\n+                if (event.isStartElement()) {\n+                    StartElement el = event.asStartElement();\n+                    String name = el.getName().getLocalPart();\n+                    if (matches(name, keywords, whitelist)) {\n+                        skipContent = true;\n+                    }\n+                    writer.add(eventFactory.createStartElement(el.getName(), null, null));\n+                    Iterator<Attribute> attrIt = el.getAttributes();\n+                    while (attrIt.hasNext()) {\n+                        Attribute attr = attrIt.next();\n+                        String attrName = attr.getName().getLocalPart();\n+                        String value = attr.getValue();\n+                        if (matches(attrName, keywords, whitelist)) {\n+                            // replace attribute value\n+                            writer.add(eventFactory.createAttribute(attrName, SECRET_VALUE));\n+                        } else {\n+                            writer.add(eventFactory.createAttribute(attrName, value));\n+                            if (matches(value, keywords, whitelist)) {\n+                                // replace node content\n+                                skipContent = true;\n+                            }\n+                        }\n+                    }\n+                } else if (event.isStartDocument()) {\n+                    if (((StartDocument) event).getVersion() == null) {\n+                        // skip it, it's been added by the reader processing\n+                        continue;\n+                    } else {\n+                        writer.add(event);\n+                        writer.add(eventFactory.createCharacters(\"\\n\"));\n+                    }\n+                } else {\n+                    writer.add(event);\n+                }\n+\n+                if (event.isEndElement()) {\n+                    skipContent = false;\n+                }\n+            }\n+            writer.flush();\n+            writer.close();\n+\n+            String all = output.toString();\n+            return all;\n+        } catch (IOException e) {\n+            throw new XMLStreamException(e);\n+        }\n+    }\n+\n+    protected static boolean matches(String name, List<String> keywords, List<String> whitelist) {\n+        if (!whitelist.contains(name) && (keywords.stream().anyMatch(kw -> name.startsWith(kw))\n+                || keywords.stream().anyMatch(kw -> name.endsWith(kw)))) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    public static String secureRegexp(String xml, List<String> keywords, List<String> whitelist) {\n+        if (!isChangeNeeded(xml, keywords)) {\n+            return xml;\n+        }\n+        String res = xml;\n+        for (String kw : keywords) {\n+            if (res.contains(kw)) {\n+                for (String pattern : List.of(\n+                        // node startswith\n+                        String.format(\"(?<start><(?<key>\\\\w*%s)\\\\s*>)[^<]*(?<end></\\\\w*%s>)\", kw, kw),\n+                        // node endswith\n+                        String.format(\"(?<start><(?<key>%s\\\\w*)\\\\s*>)[^<]*(?<end></%s\\\\w*>)\", kw, kw),\n+                        // attributes startswith\n+                        String.format(\"(?<start>(?<key>\\\\w*%s)=\\\")[^\\\"]*(?<end>\\\")\", kw),", "originalCommit": "b1e184234f58579419df8587fd64f73a0b31e8b8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6791a746660019749245b6c7362fecd8a48a8373", "chunk": "diff --git a/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/documentation/SecureXMLHelper.java b/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/documentation/SecureXMLHelper.java\nindex acd37499ec6..84554ae37a9 100644\n--- a/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/documentation/SecureXMLHelper.java\n+++ b/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/documentation/SecureXMLHelper.java\n\n@@ -22,7 +22,8 @@ import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n import java.io.InputStream;\n-import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n import java.util.regex.Matcher;\n"}}, {"oid": "6791a746660019749245b6c7362fecd8a48a8373", "url": "https://github.com/nuxeo/nuxeo/commit/6791a746660019749245b6c7362fecd8a48a8373", "message": "NXP-29220: use StAX parser for explorer XML secure content", "committedDate": "2020-06-23T09:36:52Z", "type": "forcePushed"}, {"oid": "ee3f00ccd1519b8dc0041c65f9fe91fabd322a17", "url": "https://github.com/nuxeo/nuxeo/commit/ee3f00ccd1519b8dc0041c65f9fe91fabd322a17", "message": "NXP-29220: use StAX parser for explorer XML secure content", "committedDate": "2020-06-23T09:39:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDExOTQ2Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/4168#discussion_r444119462", "bodyText": "It seems to me there is a case that is not tested ?\n<password></password>\nshould also be replaced with\n<password>********</password>as you do have [^<]* in your regex.\nAn empty password wouldn't be hard to find anyway", "author": "NourNuxeo", "createdAt": "2020-06-23T10:20:55Z", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-repo/src/test/java/org/nuxeo/apidoc/test/TestSecureXML.java", "diffHunk": "@@ -15,32 +15,174 @@\n  *\n  * Contributors:\n  *     Florent Guillaume\n+ *     Anahide Tchertchian\n  */\n package org.nuxeo.apidoc.test;\n \n import static org.junit.Assert.assertEquals;\n \n import org.junit.Test;\n-import org.nuxeo.apidoc.documentation.DocumentationHelper;\n+import org.nuxeo.apidoc.documentation.SecureXMLHelper;\n \n public class TestSecureXML {\n \n+    @Test\n+    public void testSecureXMLNode() throws Exception {\n+        assertEquals(\"<password>********</password>\", SecureXMLHelper.secure(\"<password>p1</password>\"));\n+    }\n+\n+    @Test\n+    public void testSecureXMLNodeSpace() throws Exception {\n+        assertEquals(\"<password >********</password>\", SecureXMLHelper.secure(\"<password >p1</password>\"));\n+    }\n+\n+    @Test\n+    public void testSecureXMLStartNode() throws Exception {\n+        assertEquals(\"<passwordExample>********</passwordExample>\",\n+                SecureXMLHelper.secure(\"<passwordExample>password</passwordExample>\"));\n+    }\n+\n+    @Test\n+    public void testSecureXMLEndNode() throws Exception {\n+        assertEquals(\"<examplePassword>********</examplePassword>\",\n+                SecureXMLHelper.secure(\"<examplePassword>password</examplePassword>\"));\n+    }\n+\n+    @Test\n+    public void testSecureXMLWhitelistedNode() throws Exception {\n+        assertEquals(\"<passwordField>password</passwordField>\",\n+                SecureXMLHelper.secure(\"<passwordField>password</passwordField>\"));\n+    }\n+\n+    @Test\n+    public void testSecureXMLAttribute() throws Exception {\n+        assertEquals(\"<prop name=\\\"password\\\">********</prop>\",\n+                SecureXMLHelper.secure(\"<prop name=\\\"password\\\">password</prop>\"));\n+    }\n+\n+    @Test\n+    public void testSecureXMLAttributSpace() throws Exception {\n+        assertEquals(\"<prop name=\\\"password\\\" >********</prop>\",\n+                SecureXMLHelper.secure(\"<prop name=\\\"password\\\" >password</prop>\"));\n+    }\n+\n+    @Test\n+    public void testSecureXMLAttribute2() throws Exception {\n+        assertEquals(\"<prop password=\\\"********\\\">foo</prop>\",\n+                SecureXMLHelper.secure(\"<prop password=\\\"password\\\">foo</prop>\"));\n+    }\n+\n+    @Test\n+    public void testSecureXMLAttribute3() throws Exception {\n+        assertEquals(\"<prop password=\\\"********\\\" foo=\\\"bar\\\" />\",\n+                SecureXMLHelper.secure(\"<prop password=\\\"password\\\" foo=\\\"bar\\\" />\"));\n+    }\n+\n+    @Test\n+    public void testSecureXMLStartAttribute() throws Exception {\n+        assertEquals(\"<prop name=\\\"passwordExample\\\">********</prop>\",\n+                SecureXMLHelper.secure(\"<prop name=\\\"passwordExample\\\">password</prop>\"));\n+    }\n+\n+    @Test\n+    public void testSecureXMLStartAttributeSpace() throws Exception {\n+        assertEquals(\"<prop name=\\\"passwordExample\\\" >********</prop>\",\n+                SecureXMLHelper.secure(\"<prop name=\\\"passwordExample\\\" >password</prop>\"));\n+    }\n+\n+    @Test\n+    public void testSecureXMLStartAttribute2() throws Exception {\n+        assertEquals(\"<prop passwordExample=\\\"********\\\">********</prop>\",\n+                SecureXMLHelper.secure(\"<prop passwordExample=\\\"password\\\">foo</prop>\"));\n+    }\n+\n+    @Test\n+    public void testSecureXMLStartAttribute3() throws Exception {\n+        assertEquals(\"<prop passwordExample=\\\"********\\\" foo=\\\"bar\\\">baz</prop>\",\n+                SecureXMLHelper.secure(\"<prop passwordExample=\\\"password\\\" foo=\\\"bar\\\">baz</prop>\"));\n+    }\n+\n+    @Test\n+    public void testSecureXMLEndAttribute() throws Exception {\n+        assertEquals(\"<prop name=\\\"passwordExample\\\">********</prop>\",\n+                SecureXMLHelper.secure(\"<prop name=\\\"passwordExample\\\">password</prop>\"));\n+    }\n+\n+    @Test\n+    public void testSecureXMLEndAttributeSpace() throws Exception {\n+        assertEquals(\"<prop name=\\\"passwordExample\\\" >********</prop>\",\n+                SecureXMLHelper.secure(\"<prop name=\\\"passwordExample\\\" >password</prop>\"));\n+    }\n+\n+    @Test\n+    public void testSecureXMLEndAttribute2() throws Exception {\n+        assertEquals(\"<prop passwordExample=\\\"********\\\">********</prop>\",\n+                SecureXMLHelper.secure(\"<prop passwordExample=\\\"password\\\">foo</prop>\"));\n+    }\n+\n+    @Test\n+    public void testSecureXMLEndAttribute3() throws Exception {\n+        assertEquals(\"<prop passwordExample=\\\"********\\\" foo=\\\"bar\\\" />\",\n+                SecureXMLHelper.secure(\"<prop passwordExample=\\\"password\\\" foo=\\\"bar\\\" />\"));\n+    }\n+\n+    @Test\n+    public void testSecureXMLWhitelistedAttribute() throws Exception {\n+        assertEquals(\"<prop name=\\\"passwordField\\\">password</prop>\",\n+                SecureXMLHelper.secure(\"<prop name=\\\"passwordField\\\">password</prop>\"));\n+    }\n+\n+    @Test\n+    public void testSecureXMLWhitelistedAttributeSpace() throws Exception {\n+        assertEquals(\"<prop name=\\\"passwordField\\\" >password</prop>\",\n+                SecureXMLHelper.secure(\"<prop name=\\\"passwordField\\\" >password</prop>\"));\n+    }\n+\n+    @Test\n+    public void testSecureXMLWhitelistedAttribute2() throws Exception {\n+        assertEquals(\"<prop passwordField=\\\"password\\\">********</prop>\",\n+                SecureXMLHelper.secure(\"<prop passwordField=\\\"password\\\">foo</prop>\"));\n+    }\n+\n+    @Test\n+    public void testSecureXMLWhitelistedAttribute3() throws Exception {\n+        assertEquals(\"<prop passwordField=\\\"password\\\" foo=\\\"bar\\\"/>\",\n+                SecureXMLHelper.secure(\"<prop passwordField=\\\"password\\\" foo=\\\"bar\\\"/>\"));\n+    }\n+\n     @Test\n     public void testSecureXML() throws Exception {\n-        String xml = \"foo <password>p1</password> \" //\n-                + \" <myPassword>p2</myPassword>\" //\n-                + \" <yo password=\\\"p3\\\" name=\\\"bla\\\">\" //\n-                + \" <yo otherPassword=\\\"p4\\\" name=\\\"bla\\\">\" //\n-                + \" <prop name=\\\"password\\\">p5</prop>\" //\n-                + \" <prop name=\\\"realPassword\\\">p6</prop>\";\n-        String expected = \"foo <password>********</password> \" //\n-                + \" <myPassword>********</myPassword>\" //\n-                + \" <yo password=\\\"********\\\" name=\\\"bla\\\">\" //\n-                + \" <yo otherPassword=\\\"********\\\" name=\\\"bla\\\">\" //\n-                + \" <prop name=\\\"password\\\">********</prop>\" //\n-                + \" <prop name=\\\"realPassword\\\">********</prop>\";\n-        String res = DocumentationHelper.secureXML(xml);\n-        assertEquals(expected, res);\n+        String xml = \"foo <password>p1</password>\\n\" //\n+                + \" <myPassword>p2</myPassword>\\n\" //\n+                + \" <myPassword >p2</myPassword>\\n\" //\n+                + \" <yo password=\\\"p3\\\" other=\\\"bla\\\">\\n\" //\n+                + \" <yo otherPassword=\\\"p4\\\" other=\\\"bla\\\">\\n\" //\n+                + \" <prop name=\\\"password\\\">p5</prop>\\n\" //\n+                + \" <prop name=\\\"realPassword\\\">p6</prop>\\n\" //\n+                + \" <prop name=\\\"realPassword\\\" >p6</prop>\\n\" //\n+                + \" <prop name=\\\"passwordNotWhitelisted\\\">p7</prop>\\n\" //\n+                + \" <prop name=\\\"passwordField\\\">ok</prop>\\n\" //\n+                + \" <secret>${nuxeo.jwt.secret}</secret>\\n\" //\n+                + \" <secretKey>${nuxeo.aws.secretKey}</secretKey>\\n\" //\n+                + \" <option name=\\\"apiKey\\\">${metrics.datadog.apiKey}</option>\\n\" //\n+                + \" <passwordField>password</passwordField>\\n\" //\n+                + \" <passwordHashAlgorithm>SSHA</passwordHashAlgorithm>\";", "originalCommit": "cea10091ef49275b036851fb9e218f13236bba5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEyMTM4Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/4168#discussion_r444121383", "bodyText": "It's tested here: https://github.com/nuxeo/nuxeo/pull/4168/files#diff-172201976b34d3f53d4238f8bd458f38R208\nI assumed an empty password did not need to be replaced, but indeed, maybe better to make it a complete mystery (?)", "author": "atchertchian", "createdAt": "2020-06-23T10:24:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDExOTQ2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEzMjc0Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/4168#discussion_r444132743", "bodyText": "Sorry but the anchor doesn't seem to get me to the right place ?\nAbout misteries, I think putting stars doesn't give away the password is empty", "author": "NourNuxeo", "createdAt": "2020-06-23T10:46:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDExOTQ2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEzNjk0NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4168#discussion_r444136945", "bodyText": "Anchor seems broken because it's a large diff ee3f00c#diff-172201976b34d3f53d4238f8bd458f38R215\nAnyway i'll do the change", "author": "atchertchian", "createdAt": "2020-06-23T10:54:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDExOTQ2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "f15fab3a00c669e1ad5129fccd6d820dc316793f", "chunk": "diff --git a/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-repo/src/test/java/org/nuxeo/apidoc/test/TestSecureXML.java b/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-repo/src/test/java/org/nuxeo/apidoc/test/TestSecureXML.java\nindex c419b158a81..bb015d8bf50 100644\n--- a/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-repo/src/test/java/org/nuxeo/apidoc/test/TestSecureXML.java\n+++ b/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-repo/src/test/java/org/nuxeo/apidoc/test/TestSecureXML.java\n\n@@ -20,143 +20,276 @@\n package org.nuxeo.apidoc.test;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import java.util.List;\n+\n+import javax.xml.stream.XMLStreamException;\n \n import org.junit.Test;\n+import org.junit.runner.RunWith;\n import org.nuxeo.apidoc.documentation.SecureXMLHelper;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.RuntimeFeature;\n \n+@RunWith(FeaturesRunner.class)\n+@Features(RuntimeFeature.class)\n+@Deploy(\"org.nuxeo.apidoc.repo:OSGI-INF/snapshot-service-framework.xml\")\n public class TestSecureXML {\n \n+    protected void check(String expected, String xml) {\n+        checkStAX(expected, xml);\n+        checkRegexp(expected, xml);\n+        // check fallback\n+        assertEquals(expected, SecureXMLHelper.secure(xml));\n+    }\n+\n+    protected void checkStAX(String expected, String xml) {\n+        try {\n+            assertEquals(expected, SecureXMLHelper.secureStAX(xml, SecureXMLHelper.getKeywords(),\n+                    SecureXMLHelper.getWhitelistedKeywords()));\n+        } catch (XMLStreamException e) {\n+            fail(e.getMessage());\n+        }\n+    }\n+\n+    protected void checkRegexp(String expected, String xml) {\n+        assertEquals(expected, SecureXMLHelper.secureRegexp(xml, SecureXMLHelper.getKeywords(),\n+                SecureXMLHelper.getWhitelistedKeywords()));\n+    }\n+\n     @Test\n     public void testSecureXMLNode() throws Exception {\n-        assertEquals(\"<password>********</password>\", SecureXMLHelper.secure(\"<password>p1</password>\"));\n+        check(\"<password>********</password>\", \"<password>p1</password>\");\n+    }\n+\n+    @Test\n+    public void testSecureXMLNodeDeclaration() throws Exception {\n+        check(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"no\\\"?>\\n<password>********</password>\",\n+                \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"no\\\"?>\\n<password>p1</password>\");\n     }\n \n     @Test\n     public void testSecureXMLNodeSpace() throws Exception {\n-        assertEquals(\"<password >********</password>\", SecureXMLHelper.secure(\"<password >p1</password>\"));\n+        String xml = \"<password >p1</password>\";\n+        checkStAX(\"<password>********</password>\", xml);\n+        checkRegexp(\"<password >********</password>\", xml);\n     }\n \n     @Test\n     public void testSecureXMLStartNode() throws Exception {\n-        assertEquals(\"<passwordExample>********</passwordExample>\",\n-                SecureXMLHelper.secure(\"<passwordExample>password</passwordExample>\"));\n+        check(\"<passwordExample>********</passwordExample>\", \"<passwordExample>password</passwordExample>\");\n     }\n \n     @Test\n     public void testSecureXMLEndNode() throws Exception {\n-        assertEquals(\"<examplePassword>********</examplePassword>\",\n-                SecureXMLHelper.secure(\"<examplePassword>password</examplePassword>\"));\n+        check(\"<examplePassword>********</examplePassword>\", \"<examplePassword>password</examplePassword>\");\n     }\n \n     @Test\n     public void testSecureXMLWhitelistedNode() throws Exception {\n-        assertEquals(\"<passwordField>password</passwordField>\",\n-                SecureXMLHelper.secure(\"<passwordField>password</passwordField>\"));\n+        check(\"<passwordField>password</passwordField>\", \"<passwordField>password</passwordField>\");\n     }\n \n     @Test\n     public void testSecureXMLAttribute() throws Exception {\n-        assertEquals(\"<prop name=\\\"password\\\">********</prop>\",\n-                SecureXMLHelper.secure(\"<prop name=\\\"password\\\">password</prop>\"));\n+        check(\"<prop name=\\\"password\\\">********</prop>\", \"<prop name=\\\"password\\\">password</prop>\");\n     }\n \n     @Test\n     public void testSecureXMLAttributSpace() throws Exception {\n-        assertEquals(\"<prop name=\\\"password\\\" >********</prop>\",\n-                SecureXMLHelper.secure(\"<prop name=\\\"password\\\" >password</prop>\"));\n+        String xml = \"<prop name=\\\"password\\\" >password</prop>\";\n+        checkStAX(\"<prop name=\\\"password\\\">********</prop>\", xml);\n+        checkRegexp(\"<prop name=\\\"password\\\" >********</prop>\", xml);\n     }\n \n     @Test\n     public void testSecureXMLAttribute2() throws Exception {\n-        assertEquals(\"<prop password=\\\"********\\\">foo</prop>\",\n-                SecureXMLHelper.secure(\"<prop password=\\\"password\\\">foo</prop>\"));\n+        String xml = \"<prop password=\\\"password\\\">foo</prop>\";\n+        checkStAX(\"<prop password=\\\"********\\\">********</prop>\", xml);\n+        checkRegexp(\"<prop password=\\\"********\\\">foo</prop>\", xml);\n+    }\n+\n+    @Test\n+    public void testSecureXMLAttribute2SpaceAndTabs() throws Exception {\n+        String xml = \"<prop password = \\t\\t \\\"password\\\"    >foo</prop>\";\n+        checkStAX(\"<prop password=\\\"********\\\">********</prop>\", xml);\n+        checkRegexp(\"<prop password = \\t\\t \\\"password\\\"    >********</prop>\", xml);\n     }\n \n     @Test\n     public void testSecureXMLAttribute3() throws Exception {\n-        assertEquals(\"<prop password=\\\"********\\\" foo=\\\"bar\\\" />\",\n-                SecureXMLHelper.secure(\"<prop password=\\\"password\\\" foo=\\\"bar\\\" />\"));\n+        String xml = \"<prop password=\\\"password\\\" foo=\\\"bar\\\" />\";\n+        checkStAX(\"<prop password=\\\"********\\\" foo=\\\"bar\\\"></prop>\", xml);\n+        checkRegexp(\"<prop password=\\\"********\\\" foo=\\\"bar\\\" />\", xml);\n+    }\n+\n+    @Test\n+    public void testSecureXMLAttribute4() throws Exception {\n+        String xml = \"<prop what=\\\"baz\\\" foo=\\\"bar\\\" />\";\n+        check(xml, xml);\n     }\n \n     @Test\n     public void testSecureXMLStartAttribute() throws Exception {\n-        assertEquals(\"<prop name=\\\"passwordExample\\\">********</prop>\",\n-                SecureXMLHelper.secure(\"<prop name=\\\"passwordExample\\\">password</prop>\"));\n+        check(\"<prop name=\\\"passwordExample\\\">********</prop>\", \"<prop name=\\\"passwordExample\\\">password</prop>\");\n     }\n \n     @Test\n     public void testSecureXMLStartAttributeSpace() throws Exception {\n-        assertEquals(\"<prop name=\\\"passwordExample\\\" >********</prop>\",\n-                SecureXMLHelper.secure(\"<prop name=\\\"passwordExample\\\" >password</prop>\"));\n+        String xml = \"<prop name=\\\"passwordExample\\\" >password</prop>\";\n+        checkStAX(\"<prop name=\\\"passwordExample\\\">********</prop>\", xml);\n+        checkRegexp(\"<prop name=\\\"passwordExample\\\" >********</prop>\", xml);\n     }\n \n     @Test\n     public void testSecureXMLStartAttribute2() throws Exception {\n-        assertEquals(\"<prop passwordExample=\\\"********\\\">********</prop>\",\n-                SecureXMLHelper.secure(\"<prop passwordExample=\\\"password\\\">foo</prop>\"));\n+        check(\"<prop passwordExample=\\\"********\\\">********</prop>\", \"<prop passwordExample=\\\"password\\\">foo</prop>\");\n     }\n \n     @Test\n     public void testSecureXMLStartAttribute3() throws Exception {\n-        assertEquals(\"<prop passwordExample=\\\"********\\\" foo=\\\"bar\\\">baz</prop>\",\n-                SecureXMLHelper.secure(\"<prop passwordExample=\\\"password\\\" foo=\\\"bar\\\">baz</prop>\"));\n+        String xml = \"<prop passwordExample=\\\"password\\\" foo=\\\"bar\\\">baz</prop>\";\n+        checkStAX(\"<prop foo=\\\"bar\\\" passwordExample=\\\"********\\\">********</prop>\", xml);\n+        checkRegexp(\"<prop passwordExample=\\\"********\\\" foo=\\\"bar\\\">baz</prop>\", xml);\n     }\n \n     @Test\n     public void testSecureXMLEndAttribute() throws Exception {\n-        assertEquals(\"<prop name=\\\"passwordExample\\\">********</prop>\",\n-                SecureXMLHelper.secure(\"<prop name=\\\"passwordExample\\\">password</prop>\"));\n+        check(\"<prop name=\\\"passwordExample\\\">********</prop>\", \"<prop name=\\\"passwordExample\\\">password</prop>\");\n     }\n \n     @Test\n     public void testSecureXMLEndAttributeSpace() throws Exception {\n-        assertEquals(\"<prop name=\\\"passwordExample\\\" >********</prop>\",\n-                SecureXMLHelper.secure(\"<prop name=\\\"passwordExample\\\" >password</prop>\"));\n+        String xml = \"<prop name=\\\"passwordExample\\\" >password</prop>\";\n+        checkStAX(\"<prop name=\\\"passwordExample\\\">********</prop>\", xml);\n+        checkRegexp(\"<prop name=\\\"passwordExample\\\" >********</prop>\", xml);\n     }\n \n     @Test\n     public void testSecureXMLEndAttribute2() throws Exception {\n-        assertEquals(\"<prop passwordExample=\\\"********\\\">********</prop>\",\n-                SecureXMLHelper.secure(\"<prop passwordExample=\\\"password\\\">foo</prop>\"));\n+        check(\"<prop passwordExample=\\\"********\\\">********</prop>\", \"<prop passwordExample=\\\"password\\\">foo</prop>\");\n     }\n \n     @Test\n     public void testSecureXMLEndAttribute3() throws Exception {\n-        assertEquals(\"<prop passwordExample=\\\"********\\\" foo=\\\"bar\\\" />\",\n-                SecureXMLHelper.secure(\"<prop passwordExample=\\\"password\\\" foo=\\\"bar\\\" />\"));\n+        String xml = \"<prop passwordExample=\\\"password\\\" foo=\\\"bar\\\" />\";\n+        checkStAX(\"<prop foo=\\\"bar\\\" passwordExample=\\\"********\\\"></prop>\", xml);\n+        checkRegexp(\"<prop passwordExample=\\\"********\\\" foo=\\\"bar\\\" />\", xml);\n     }\n \n     @Test\n     public void testSecureXMLWhitelistedAttribute() throws Exception {\n-        assertEquals(\"<prop name=\\\"passwordField\\\">password</prop>\",\n-                SecureXMLHelper.secure(\"<prop name=\\\"passwordField\\\">password</prop>\"));\n+        check(\"<prop name=\\\"passwordField\\\">password</prop>\", \"<prop name=\\\"passwordField\\\">password</prop>\");\n     }\n \n     @Test\n     public void testSecureXMLWhitelistedAttributeSpace() throws Exception {\n-        assertEquals(\"<prop name=\\\"passwordField\\\" >password</prop>\",\n-                SecureXMLHelper.secure(\"<prop name=\\\"passwordField\\\" >password</prop>\"));\n+        String xml = \"<prop name=\\\"passwordField\\\" >password</prop>\";\n+        checkStAX(\"<prop name=\\\"passwordField\\\">password</prop>\", xml);\n+        checkRegexp(\"<prop name=\\\"passwordField\\\" >password</prop>\", xml);\n     }\n \n     @Test\n     public void testSecureXMLWhitelistedAttribute2() throws Exception {\n-        assertEquals(\"<prop passwordField=\\\"password\\\">********</prop>\",\n-                SecureXMLHelper.secure(\"<prop passwordField=\\\"password\\\">foo</prop>\"));\n+        check(\"<prop passwordField=\\\"password\\\">********</prop>\", \"<prop passwordField=\\\"password\\\">foo</prop>\");\n     }\n \n     @Test\n     public void testSecureXMLWhitelistedAttribute3() throws Exception {\n-        assertEquals(\"<prop passwordField=\\\"password\\\" foo=\\\"bar\\\"/>\",\n-                SecureXMLHelper.secure(\"<prop passwordField=\\\"password\\\" foo=\\\"bar\\\"/>\"));\n+        String xml = \"<prop passwordField=\\\"password\\\" foo=\\\"bar\\\"/>\";\n+        checkStAX(\"<prop foo=\\\"********\\\" passwordField=\\\"password\\\"></prop>\", xml);\n+        checkRegexp(\"<prop passwordField=\\\"password\\\" foo=\\\"bar\\\"/>\", xml);\n+    }\n+\n+    @Test\n+    public void testClosedTagsUseCases() throws Exception {\n+        String xml = \"<root>\\n\" //\n+                + \"<password1>p1</password1>\\n\" //\n+                + \"<password2>\\n\" //\n+                + \"p1</password2>\\n\" //\n+                + \"<password3>\\n\" //\n+                + \"<!-- password3 -->p1</password3>\\n\" //\n+                + \"<password4 />\\n\" //\n+                + \"<prop5 name=\\\"password\\\">p1</prop5>\\n\" //\n+                + \"<prop6 name='password'>p1</prop6>\\n\" //\n+                + \"<prop7 name=\\\"password\\\" value=\\\"p1\\\" />\\n\" //\n+                + \"<prop8 name='password' value='p1' />\\n\" //\n+                + \"</root>\";\n+        checkStAX(\"<root>\\n\" //\n+                + \"<password1>********</password1>\\n\" //\n+                + \"<password2>********</password2>\\n\" //\n+                + \"<password3>\\n\" //\n+                + \"  <!-- password3 -->\\n\" //\n+                + \"  ********\\n\" //\n+                + \"</password3>\\n\" //\n+                + \"<password4></password4>\\n\" //\n+                + \"<prop5 name=\\\"password\\\">********</prop5>\\n\" //\n+                + \"<prop6 name=\\\"password\\\">********</prop6>\\n\" //\n+                + \"<prop7 name=\\\"password\\\" value=\\\"********\\\"></prop7>\\n\" //\n+                + \"<prop8 name=\\\"password\\\" value=\\\"********\\\"></prop8>\\n\" //\n+                + \"</root>\", xml);\n+        checkRegexp(\"<root>\\n\" //\n+                + \"<password1>********</password1>\\n\" //\n+                + \"<password2>********</password2>\\n\" //\n+                + \"<password3>\\n\" //\n+                + \"<!-- password3 -->p1</password3>\\n\" //\n+                + \"<password4 />\\n\" //\n+                + \"<prop5 name=\\\"password\\\">********</prop5>\\n\" //\n+                + \"<prop6 name='password'>********</prop6>\\n\" //\n+                + \"<prop7 name=\\\"password\\\" value=\\\"p1\\\" />\\n\" //\n+                + \"<prop8 name='password' value='p1' />\\n\" //\n+                + \"</root>\", xml);\n     }\n \n     @Test\n     public void testSecureXML() throws Exception {\n+        assertEquals(SecureXMLHelper.DEFAULT_KEYWORDS, SecureXMLHelper.getKeywords());\n+        assertEquals(SecureXMLHelper.DEFAULT_WHITELISTED_KEYWORDS, SecureXMLHelper.getWhitelistedKeywords());\n+        String xml = \"<root>\\n\" //\n+                + \"<password>p1</password>\\n\" //\n+                + \" <myPassword>p2</myPassword>\\n\" //\n+                + \" <yo password=\\\"p3\\\" other=\\\"bla\\\" />\\n\" //\n+                + \" <yo otherPassword=\\\"p4\\\" other=\\\"bla\\\" />\\n\" //\n+                + \" <prop name=\\\"password\\\">p5</prop>\\n\" //\n+                + \" <prop name=\\\"realPassword\\\">p6</prop>\\n\" //\n+                + \" <prop name=\\\"realPassword\\\" >p6</prop>\\n\" //\n+                + \" <prop name=\\\"passwordNotWhitelisted\\\">p7</prop>\\n\" //\n+                + \" <prop name=\\\"passwordField\\\">ok</prop>\\n\" //\n+                + \" <secret>${nuxeo.jwt.secret}</secret>\\n\" //\n+                + \" <secretKey>${nuxeo.aws.secretKey}</secretKey>\\n\" //\n+                + \" <option name=\\\"apiKey\\\">${metrics.datadog.apiKey}</option>\\n\" //\n+                + \" <passwordField>password</passwordField>\\n\" //\n+                + \" <passwordHashAlgorithm>SSHA</passwordHashAlgorithm>\\n\" //\n+                + \"</root>\";\n+        String expected = \"<root>\\n\" //\n+                + \"<password>********</password>\\n\" //\n+                + \" <myPassword>********</myPassword>\\n\" //\n+                + \" <yo password=\\\"********\\\" other=\\\"bla\\\"></yo>\\n\" //\n+                + \" <yo other=\\\"bla\\\" otherPassword=\\\"********\\\"></yo>\\n\" //\n+                + \" <prop name=\\\"password\\\">********</prop>\\n\" //\n+                + \" <prop name=\\\"realPassword\\\">********</prop>\\n\" //\n+                + \" <prop name=\\\"realPassword\\\">********</prop>\\n\" //\n+                + \" <prop name=\\\"passwordNotWhitelisted\\\">********</prop>\\n\" //\n+                + \" <prop name=\\\"passwordField\\\">ok</prop>\\n\" //\n+                + \" <secret>********</secret>\\n\" //\n+                + \" <secretKey>********</secretKey>\\n\" //\n+                + \" <option name=\\\"apiKey\\\">********</option>\\n\" //\n+                + \" <passwordField>password</passwordField>\\n\" //\n+                + \" <passwordHashAlgorithm>SSHA</passwordHashAlgorithm>\\n\" //\n+                + \"</root>\";\n+        checkStAX(expected, xml);\n+    }\n+\n+    @Test\n+    public void testSecureXMLInvalid() throws Exception {\n         String xml = \"foo <password>p1</password>\\n\" //\n                 + \" <myPassword>p2</myPassword>\\n\" //\n                 + \" <myPassword >p2</myPassword>\\n\" //\n-                + \" <yo password=\\\"p3\\\" other=\\\"bla\\\">\\n\" //\n-                + \" <yo otherPassword=\\\"p4\\\" other=\\\"bla\\\">\\n\" //\n+                + \" <yo password=\\\"p3\\\" other=\\\"bla\\\">\\n\" // not closed\n+                + \" <yo otherPassword=\\\"p4\\\" other=\\\"bla\\\">content</yo>\\n\" //\n                 + \" <prop name=\\\"password\\\">p5</prop>\\n\" //\n                 + \" <prop name=\\\"realPassword\\\">p6</prop>\\n\" //\n                 + \" <prop name=\\\"realPassword\\\" >p6</prop>\\n\" //\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE5MTE0Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/4168#discussion_r444191147", "bodyText": "Weird indent here", "author": "efge", "createdAt": "2020-06-23T12:40:23Z", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/documentation/SecureXMLHelper.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.apidoc.documentation;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.xml.stream.XMLEventFactory;\n+import javax.xml.stream.XMLEventReader;\n+import javax.xml.stream.XMLEventWriter;\n+import javax.xml.stream.XMLInputFactory;\n+import javax.xml.stream.XMLOutputFactory;\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.events.Attribute;\n+import javax.xml.stream.events.StartDocument;\n+import javax.xml.stream.events.StartElement;\n+import javax.xml.stream.events.XMLEvent;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.services.config.ConfigurationService;\n+\n+/**\n+ * Helper for XML secure content management.\n+ *\n+ * @since 11.2\n+ */\n+public class SecureXMLHelper {\n+\n+    protected static final String KEYWORDS_PROPERTY = \"org.nuxeo.apidoc.secure.xml.keywords\";\n+\n+    public static final List<String> DEFAULT_KEYWORDS = List.of(\"password\", \"Password\", \"secret\", \"apiKey\");\n+\n+    protected static final String WHITELISTED_KEYWORDS_PROPERTY = \"org.nuxeo.apidoc.secure.xml.keywords.whitelisted\";\n+\n+    public static final List<String> DEFAULT_WHITELISTED_KEYWORDS = List.of(\"passwordField\", \"passwordHashAlgorithm\");\n+\n+    protected static final String SECRET_VALUE = \"********\";\n+\n+    protected static final XMLInputFactory INPUT_FACTORY = XMLInputFactory.newInstance();\n+\n+    protected static final XMLOutputFactory OUTPUT_FACTORY = XMLOutputFactory.newInstance();\n+\n+    protected static final XMLEventFactory EVENT_FACTORY = XMLEventFactory.newInstance();\n+\n+    /**\n+     * Makes sure no passwords and similar sensitive data are embedded in the XML.\n+     */\n+    public static String secure(String xml) {\n+        List<String> keywords = getKeywords();\n+        if (!isChangeNeeded(xml, keywords)) {\n+            return xml;\n+        }\n+        List<String> whitelist = getWhitelistedKeywords();\n+        try {\n+            return secureStAX(xml, keywords, whitelist);\n+        } catch (XMLStreamException e) {\n+            return secureRegexp(xml, keywords, whitelist);\n+        }\n+    }\n+\n+    protected static boolean isChangeNeeded(String xml, List<String> keywords) {\n+        if (StringUtils.isBlank(xml) || keywords.stream().noneMatch(xml::contains)) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    public static List<String> getKeywords() {\n+        return getKeywordList(KEYWORDS_PROPERTY, DEFAULT_KEYWORDS);\n+    }\n+\n+    public static List<String> getWhitelistedKeywords() {\n+        return getKeywordList(WHITELISTED_KEYWORDS_PROPERTY, DEFAULT_WHITELISTED_KEYWORDS);\n+    }\n+\n+    protected static List<String> getKeywordList(String property, List<String> defaultValue) {\n+        return Framework.getService(ConfigurationService.class)\n+                        .getString(property)\n+                        .map(v -> v.split(\"\\\\s*,[,\\\\s]*\"))\n+                        .map(List::of)\n+                        .orElse(defaultValue);\n+    }\n+\n+    public static String secureStAX(String xml, List<String> keywords, List<String> whitelist)\n+            throws XMLStreamException {\n+        if (!isChangeNeeded(xml, keywords)) {\n+            return xml;\n+        }\n+        try (InputStream stream = new ByteArrayInputStream(xml.getBytes(StandardCharsets.UTF_8));\n+                ByteArrayOutputStream output = new ByteArrayOutputStream()) {\n+\n+            XMLEventReader reader = INPUT_FACTORY.createXMLEventReader(stream);\n+            XMLEventWriter writer = OUTPUT_FACTORY.createXMLEventWriter(output);\n+\n+            boolean skipContent = false;\n+            while (reader.hasNext()) {\n+                XMLEvent event = reader.nextEvent();\n+                if (event.isEndElement() && skipContent) {\n+                    skipContent = false;\n+                    continue;\n+                }\n+                if (skipContent) {\n+                    continue;\n+                }\n+                if (event.isStartElement()) {\n+                    StartElement el = event.asStartElement();\n+                    String name = el.getName().getLocalPart();\n+                    if (matches(name, keywords, whitelist)) {\n+                        // skip attributes\n+                        writer.add(EVENT_FACTORY.createStartElement(el.getName(), null, null));\n+                        // replace content if any\n+                        replaceTagContent(reader, writer);\n+                        writer.add(EVENT_FACTORY.createEndElement(el.getName(), null));\n+                        skipContent = true;\n+                        continue;\n+                    }\n+                    // first pass on attributes to assess content\n+                    List<String> attrNameMatches = new ArrayList<>();\n+                    List<String> attrValueMatches = new ArrayList<>();\n+                    Iterator<Attribute> attrIt = el.getAttributes();\n+                    while (attrIt.hasNext()) {\n+                        Attribute attr = attrIt.next();\n+                        String attrName = attr.getName().getLocalPart();\n+                        String value = attr.getValue();\n+                        if (matches(attrName, keywords, whitelist)) {\n+                            attrNameMatches.add(attrName);\n+                        } else if (matches(value, keywords, whitelist)) {\n+                            attrValueMatches.add(attrName);\n+                        }\n+                    }\n+                    if (attrNameMatches.isEmpty() && attrValueMatches.isEmpty()) {\n+                        writer.add(event);\n+                        continue;\n+                    }\n+                    // second pass to replace content\n+                    writer.add(EVENT_FACTORY.createStartElement(el.getName(), null, null));\n+                    attrIt = el.getAttributes();\n+                    while (attrIt.hasNext()) {\n+                        Attribute attr = attrIt.next();\n+                        String attrName = attr.getName().getLocalPart();\n+                        String value = attr.getValue();\n+                        if (!attrValueMatches.isEmpty()) {\n+                            // replace all attributes value except the one matching\n+                            if (attrValueMatches.contains(attrName)) {\n+                                writer.add(EVENT_FACTORY.createAttribute(attrName, value));\n+                            } else {\n+                                writer.add(EVENT_FACTORY.createAttribute(attrName, SECRET_VALUE));\n+                            }\n+                        } else if (attrNameMatches.contains(attrName)) {\n+                            writer.add(EVENT_FACTORY.createAttribute(attrName, SECRET_VALUE));\n+                        } else {\n+                            writer.add(EVENT_FACTORY.createAttribute(attrName, value));\n+                        }\n+                    }\n+                    // replace content if any\n+                    replaceTagContent(reader, writer);\n+                    writer.add(EVENT_FACTORY.createEndElement(el.getName(), null));\n+                    skipContent = true;\n+                } else if (event.isStartDocument()) {\n+                    if (((StartDocument) event).getVersion() == null) {\n+                        // skip it, it's been added by the reader processing\n+                        continue;\n+                    } else {\n+                        writer.add(event);\n+                        writer.add(EVENT_FACTORY.createCharacters(\"\\n\"));\n+                    }\n+                } else {\n+                    writer.add(event);\n+                }\n+            }\n+            writer.flush();\n+            writer.close();\n+\n+            return output.toString(StandardCharsets.UTF_8);\n+        } catch (\n+\n+        IOException e) {", "originalCommit": "843b5e72eff398534727d24141b24960ac89bd2a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f15fab3a00c669e1ad5129fccd6d820dc316793f", "chunk": "diff --git a/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/documentation/SecureXMLHelper.java b/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/documentation/SecureXMLHelper.java\nindex 69d4eb9c3a1..48624ad9723 100644\n--- a/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/documentation/SecureXMLHelper.java\n+++ b/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/documentation/SecureXMLHelper.java\n\n@@ -197,31 +197,35 @@ public class SecureXMLHelper {\n             writer.close();\n \n             return output.toString(StandardCharsets.UTF_8);\n-        } catch (\n-\n-        IOException e) {\n+        } catch (IOException e) {\n             throw new XMLStreamException(e);\n         }\n     }\n \n     protected static void replaceTagContent(XMLEventReader reader, XMLEventWriter writer) throws XMLStreamException {\n+        String data = \"\";\n         String comments = \"\";\n         XMLEvent peek = reader.peek();\n         while (peek != null\n                 && (XMLEvent.CHARACTERS == peek.getEventType() || XMLEvent.COMMENT == peek.getEventType())) {\n             XMLEvent nextEvent = reader.nextEvent();\n+            if (XMLEvent.CHARACTERS == nextEvent.getEventType()) {\n+                data += nextEvent.asCharacters().getData();\n+            }\n             if (XMLEvent.COMMENT == nextEvent.getEventType()) {\n                 String c = nextEvent.toString();\n                 comments += c.substring(4, c.length() - 3);\n             }\n             peek = reader.peek();\n         }\n-        if (StringUtils.isNotBlank(comments)) {\n-            writer.add(EVENT_FACTORY.createCharacters(\"\\n  \"));\n-            writer.add(EVENT_FACTORY.createComment(comments));\n-            writer.add(EVENT_FACTORY.createCharacters(\"\\n  \" + SECRET_VALUE + \"\\n\"));\n-        } else {\n-            writer.add(EVENT_FACTORY.createCharacters(SECRET_VALUE));\n+        if (StringUtils.isNotBlank(data) || StringUtils.isNotBlank(comments)) {\n+            if (StringUtils.isNotBlank(comments)) {\n+                writer.add(EVENT_FACTORY.createCharacters(\"\\n  \"));\n+                writer.add(EVENT_FACTORY.createComment(comments));\n+                writer.add(EVENT_FACTORY.createCharacters(\"\\n  \" + SECRET_VALUE + \"\\n\"));\n+            } else {\n+                writer.add(EVENT_FACTORY.createCharacters(SECRET_VALUE));\n+            }\n         }\n     }\n \n"}}, {"oid": "f15fab3a00c669e1ad5129fccd6d820dc316793f", "url": "https://github.com/nuxeo/nuxeo/commit/f15fab3a00c669e1ad5129fccd6d820dc316793f", "message": "NXP-29220: use StAX parser for explorer XML secure content", "committedDate": "2020-06-23T12:41:44Z", "type": "commit"}, {"oid": "7543642282072c62ffcccaaff865e06155cfb80f", "url": "https://github.com/nuxeo/nuxeo/commit/7543642282072c62ffcccaaff865e06155cfb80f", "message": "NXP-29220: also replace empty secure keywords", "committedDate": "2020-06-23T12:41:44Z", "type": "commit"}, {"oid": "7543642282072c62ffcccaaff865e06155cfb80f", "url": "https://github.com/nuxeo/nuxeo/commit/7543642282072c62ffcccaaff865e06155cfb80f", "message": "NXP-29220: also replace empty secure keywords", "committedDate": "2020-06-23T12:41:44Z", "type": "forcePushed"}]}