{"pr_number": 3981, "pr_title": "Simplify core internals", "pr_createdAt": "2020-04-27T16:54:50Z", "pr_url": "https://github.com/nuxeo/nuxeo/pull/3981", "timeline": [{"oid": "66539c6c1d8a141e78cf7509021b5b7b85ae0fe2", "url": "https://github.com/nuxeo/nuxeo/commit/66539c6c1d8a141e78cf7509021b5b7b85ae0fe2", "message": "NXP-29010: remove JCA dependencies (Apache Geronimo Connector + Tranql)", "committedDate": "2020-04-28T17:45:27Z", "type": "forcePushed"}, {"oid": "70e30d7627e5c7e457161cd17ab851ba422beb3e", "url": "https://github.com/nuxeo/nuxeo/commit/70e30d7627e5c7e457161cd17ab851ba422beb3e", "message": "NXP-29010: remove JCA dependencies (Apache Geronimo Connector + Tranql)", "committedDate": "2020-04-28T17:59:47Z", "type": "forcePushed"}, {"oid": "54cb52c8df49123fb578067915540a811bf2ec76", "url": "https://github.com/nuxeo/nuxeo/commit/54cb52c8df49123fb578067915540a811bf2ec76", "message": "NXP-29009: simpler VCS connections; VCS/DBS pooling doesn't need XA", "committedDate": "2020-05-04T00:58:59Z", "type": "forcePushed"}, {"oid": "59be2a29963b7ec3fe41f2bb4ca954492b824f41", "url": "https://github.com/nuxeo/nuxeo/commit/59be2a29963b7ec3fe41f2bb4ca954492b824f41", "message": "NXP-29009: simpler VCS connections; VCS/DBS pooling doesn't need XA", "committedDate": "2020-05-04T02:35:17Z", "type": "forcePushed"}, {"oid": "eb5b4fc07207f4a9e7dd5110b6d5bfe9e24cf4b4", "url": "https://github.com/nuxeo/nuxeo/commit/eb5b4fc07207f4a9e7dd5110b6d5bfe9e24cf4b4", "message": "NXP-28865: use connection in noSharing mode for SQLKeyValueStore\n\nThis is much simpler than running outside a transaction with a standard connection.", "committedDate": "2020-05-06T17:43:18Z", "type": "forcePushed"}, {"oid": "decc99f98caa86885d3022fff095ee45391ee23c", "url": "https://github.com/nuxeo/nuxeo/commit/decc99f98caa86885d3022fff095ee45391ee23c", "message": "NXP-29009: VCS/DBS pooling cleanup", "committedDate": "2020-05-07T15:46:36Z", "type": "forcePushed"}, {"oid": "23b87fa0a0bacfc4aee0da50cc275e115d21efbd", "url": "https://github.com/nuxeo/nuxeo/commit/23b87fa0a0bacfc4aee0da50cc275e115d21efbd", "message": "NXP-29010: fix DBCP bug when acquiring a connection when transaction is rollback-only", "committedDate": "2020-05-12T21:09:57Z", "type": "forcePushed"}, {"oid": "f7267aeaae6f75a79d4986e7fe348e2f40f37171", "url": "https://github.com/nuxeo/nuxeo/commit/f7267aeaae6f75a79d4986e7fe348e2f40f37171", "message": "NXP-29010: fix DBCP bug when acquiring a connection when transaction is rollback-only", "committedDate": "2020-05-13T03:08:17Z", "type": "forcePushed"}, {"oid": "68de17c2385e57d9fd254bad7cd7b43393bd3532", "url": "https://github.com/nuxeo/nuxeo/commit/68de17c2385e57d9fd254bad7cd7b43393bd3532", "message": "NXP-29010: fix DBCP bug when acquiring a connection when transaction is rollback-only", "committedDate": "2020-05-13T18:09:26Z", "type": "forcePushed"}, {"oid": "8d7adf76e8337076b0ff2c661508da5604e53fe7", "url": "https://github.com/nuxeo/nuxeo/commit/8d7adf76e8337076b0ff2c661508da5604e53fe7", "message": "NXP-29010: fix DBCP bug when acquiring a connection when transaction is rollback-only", "committedDate": "2020-05-14T00:59:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAwNTQ1OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3981#discussion_r425005459", "bodyText": "is the method idempotent?", "author": "bdelbosc", "createdAt": "2020-05-14T09:40:16Z", "path": "modules/runtime/nuxeo-runtime-jtajca/src/main/java/org/nuxeo/runtime/transaction/TransactionHelper.java", "diffHunk": "@@ -533,6 +534,23 @@ public static void registerSynchronization(Synchronization handler) {\n         }\n     }\n \n+    /**\n+     * Enlists a XA resource in the current transaction.\n+     *", "originalCommit": "cd86c005bccbce4675b037428f2a66fb53787227", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA1NjUzOQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3981#discussion_r425056539", "bodyText": "No it's a direct link to the TransactionManager's identical method. In a previous version of the code it was used in many more places but now only one test (in WorkManagerTXTest) uses it... I think I'll keep it though as it doesn't do harm.", "author": "efge", "createdAt": "2020-05-14T11:10:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAwNTQ1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "04348c3de4f110df78f70a484bbfbc60766c5151", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-jtajca/src/main/java/org/nuxeo/runtime/transaction/TransactionHelper.java b/modules/runtime/nuxeo-runtime-jtajca/src/main/java/org/nuxeo/runtime/transaction/TransactionHelper.java\nindex aff9bc88985..7c491ff6a35 100644\n--- a/modules/runtime/nuxeo-runtime-jtajca/src/main/java/org/nuxeo/runtime/transaction/TransactionHelper.java\n+++ b/modules/runtime/nuxeo-runtime-jtajca/src/main/java/org/nuxeo/runtime/transaction/TransactionHelper.java\n\n@@ -534,23 +526,6 @@ public class TransactionHelper {\n         }\n     }\n \n-    /**\n-     * Enlists a XA resource in the current transaction.\n-     *\n-     * @param xaRes the XA resource\n-     * @since 11.1\n-     */\n-    public static void enlistResource(XAResource xaRes) {\n-        if (!isTransactionActiveOrMarkedRollback()) {\n-            throw new TransactionRuntimeException(\"Cannot enlist XA resource if transaction is not active\");\n-        }\n-        try {\n-            NuxeoContainer.getTransactionManager().getTransaction().enlistResource(xaRes);\n-        } catch (IllegalStateException | RollbackException | SystemException cause) {\n-            throw new RuntimeException(\"Cannot enlist XA resource in current tx\", cause);\n-        }\n-    }\n-\n     /**\n      * Runs the given {@link Runnable} without a transactional context.\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAwNzQwMw==", "url": "https://github.com/nuxeo/nuxeo/pull/3981#discussion_r425007403", "bodyText": "is this required for test purpose?", "author": "bdelbosc", "createdAt": "2020-05-14T09:43:13Z", "path": "modules/core/nuxeo-core-storage-sql/nuxeo-core-storage-sql/src/main/java/org/nuxeo/ecm/core/storage/sql/jdbc/SQLInfo.java", "diffHunk": "@@ -114,7 +114,7 @@\n \n     private final Map<String, Column> copyIdColumnMap;\n \n-    protected final Map<String, SQLInfoSelect> selectFragmentById;\n+    public final Map<String, SQLInfoSelect> selectFragmentById;", "originalCommit": "9840a6aea9bc3efb9fd5bca4f9faa96c554a0b01", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA1NTU2MA==", "url": "https://github.com/nuxeo/nuxeo/pull/3981#discussion_r425055560", "bodyText": "No it's for VCSLockManager which is in a different package.", "author": "efge", "createdAt": "2020-05-14T11:08:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAwNzQwMw=="}], "type": "inlineReview", "revised_code": {"commit": "04348c3de4f110df78f70a484bbfbc60766c5151", "chunk": "diff --git a/modules/core/nuxeo-core-storage-sql/nuxeo-core-storage-sql/src/main/java/org/nuxeo/ecm/core/storage/sql/jdbc/SQLInfo.java b/modules/core/nuxeo-core-storage-sql/nuxeo-core-storage-sql/src/main/java/org/nuxeo/ecm/core/storage/sql/jdbc/SQLInfo.java\nindex 4fecfe97d31..4fa40636deb 100644\n--- a/modules/core/nuxeo-core-storage-sql/nuxeo-core-storage-sql/src/main/java/org/nuxeo/ecm/core/storage/sql/jdbc/SQLInfo.java\n+++ b/modules/core/nuxeo-core-storage-sql/nuxeo-core-storage-sql/src/main/java/org/nuxeo/ecm/core/storage/sql/jdbc/SQLInfo.java\n\n@@ -114,7 +114,7 @@ public class SQLInfo {\n \n     private final Map<String, Column> copyIdColumnMap;\n \n-    public final Map<String, SQLInfoSelect> selectFragmentById;\n+    protected final Map<String, SQLInfoSelect> selectFragmentById;\n \n     protected String createClusterNodeSql;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY1NDI3Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/3981#discussion_r425654276", "bodyText": "Wrong log message stating about geronimo which is removed in this PR.", "author": "kevinleturc", "createdAt": "2020-05-15T08:42:32Z", "path": "modules/core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/api/repository/PoolConfiguration.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * (C) Copyright 2006-2012 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Florent Guillaume\n+ *     Julien Carsique\n+ */\n+package org.nuxeo.ecm.core.api.repository;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.common.xmap.annotation.XNode;\n+import org.nuxeo.common.xmap.annotation.XObject;\n+\n+/**\n+ * Descriptor of the pool of low-level Nuxeo Sessions.\n+ *\n+ * @since 5.6\n+ */\n+@XObject(\"pool\")\n+public class PoolConfiguration {\n+\n+    private static final Logger log = LogManager.getLogger(PoolConfiguration.class);\n+\n+    public static final int DEFAULT_MAX_POOL_SIZE = 20;\n+\n+    public static final int DEFAULT_MIN_POOL_SIZE = 0;\n+\n+    public static final int DEFAULT_BLOCKING_TIMEOUT_MILLIS = 100;\n+\n+    @XNode(\"@maxPoolSize\")\n+    private Integer maxPoolSize;\n+\n+    @XNode(\"@minPoolSize\")\n+    private Integer minPoolSize;\n+\n+    @XNode(\"@blockingTimeoutMillis\")\n+    private Integer blockingTimeoutMillis;\n+\n+    public PoolConfiguration() {\n+    }\n+\n+    /** Copy constructor. */\n+    public PoolConfiguration(PoolConfiguration other) {\n+        maxPoolSize = other.maxPoolSize;\n+        minPoolSize = other.minPoolSize;\n+        blockingTimeoutMillis = other.blockingTimeoutMillis;\n+    }\n+\n+    public void merge(PoolConfiguration other) {\n+        if (other.maxPoolSize != null) {\n+            maxPoolSize = other.maxPoolSize;\n+        }\n+        if (other.minPoolSize != null) {\n+            minPoolSize = other.minPoolSize;\n+        }\n+        if (other.blockingTimeoutMillis != null) {\n+            blockingTimeoutMillis = other.blockingTimeoutMillis;\n+        }\n+    }\n+\n+    private static int defaultInt(Integer value, int def) {\n+        return value == null ? def : value.intValue();\n+    }\n+\n+    public int getMaxPoolSize() {\n+        return defaultInt(maxPoolSize, DEFAULT_MAX_POOL_SIZE);\n+    }\n+\n+    public int getMinPoolSize() {\n+        return defaultInt(minPoolSize, DEFAULT_MIN_POOL_SIZE);\n+    }\n+\n+    public int getBlockingTimeoutMillis() {\n+        return defaultInt(blockingTimeoutMillis, DEFAULT_BLOCKING_TIMEOUT_MILLIS);\n+    }\n+\n+    public void setMaxPoolSize(int maxPoolSize) {\n+        this.maxPoolSize = Integer.valueOf(maxPoolSize);\n+    }\n+\n+    public void setMinPoolSize(int minPoolSize) {\n+        this.minPoolSize = Integer.valueOf(minPoolSize);\n+    }\n+\n+    public void setBlockingTimeoutMillis(int blockingTimeoutMillis) {\n+        this.blockingTimeoutMillis = Integer.valueOf(blockingTimeoutMillis);\n+    }\n+\n+    @XNode(\"@maxActive\")\n+    public void setMaxActive(int num) {\n+        maxPoolSize = num;\n+        log.warn(\n+                \"maxActive deprecated dbcp pool attribute usage, should use maxPoolSize geronimo pool attribute instead\");\n+    }\n+\n+    @XNode(\"@maxIdle\")\n+    public void setMaxIdle(int num) {\n+        minPoolSize = num;\n+        log.warn(\n+                \"maxIdle deprecated dbcp pool attribute usage, should use minPoolSize geronimo pool attribute instead\");\n+    }\n+\n+    @XNode(\"@maxWait\")\n+    public void setMaxWait(int num) {\n+        blockingTimeoutMillis = num;\n+        log.warn(\n+                \"maxWait deprecated dbcp pool attribute usage, should use blockingTimeoutMillis geronimo pool attribute instead\");", "originalCommit": "8d7adf76e8337076b0ff2c661508da5604e53fe7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE2NjkxOQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3981#discussion_r426166919", "bodyText": "I'm removing the warn completely, as we have no intention of removing the old name", "author": "efge", "createdAt": "2020-05-16T16:10:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY1NDI3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "c3e86c8bb234d8e8d337edeae1b0ba2bba11ad79", "chunk": "diff --git a/modules/core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/api/repository/PoolConfiguration.java b/modules/core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/api/repository/PoolConfiguration.java\nindex 6a46d0ab3d3..f040b92c61c 100644\n--- a/modules/core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/api/repository/PoolConfiguration.java\n+++ b/modules/core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/api/repository/PoolConfiguration.java\n\n@@ -19,8 +19,6 @@\n  */\n package org.nuxeo.ecm.core.api.repository;\n \n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n import org.nuxeo.common.xmap.annotation.XNode;\n import org.nuxeo.common.xmap.annotation.XObject;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY4NTk1OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3981#discussion_r425685959", "bodyText": "The ignore now applies to testOptimisticLockingWithExplicitChangeToken which wasn't the case before, is it wanted?", "author": "kevinleturc", "createdAt": "2020-05-15T09:39:31Z", "path": "modules/core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestSQLRepositoryAPI.java", "diffHunk": "@@ -5101,109 +5053,6 @@ public void testChangeTokenForProxy() {\n     }\n \n     @ConditionalIgnoreRule.Ignore(condition = IgnorePostgreSQL.class, cause = \"NXP-29039\")", "originalCommit": "8d7adf76e8337076b0ff2c661508da5604e53fe7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE2NzAzOA==", "url": "https://github.com/nuxeo/nuxeo/pull/3981#discussion_r426167038", "bodyText": "Thanks, well spotted.", "author": "efge", "createdAt": "2020-05-16T16:11:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY4NTk1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "c3e86c8bb234d8e8d337edeae1b0ba2bba11ad79", "chunk": "diff --git a/modules/core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestSQLRepositoryAPI.java b/modules/core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestSQLRepositoryAPI.java\nindex e9d8c9027ac..82d0b32c23e 100644\n--- a/modules/core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestSQLRepositoryAPI.java\n+++ b/modules/core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestSQLRepositoryAPI.java\n\n@@ -5052,7 +5052,6 @@ public class TestSQLRepositoryAPI {\n         }\n     }\n \n-    @ConditionalIgnoreRule.Ignore(condition = IgnorePostgreSQL.class, cause = \"NXP-29039\")\n     @Test\n     public void testOptimisticLockingWithExplicitChangeToken() {\n         DocumentModel doc = session.createDocumentModel(\"/\", \"doc\", \"File\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY5MTYzNg==", "url": "https://github.com/nuxeo/nuxeo/pull/3981#discussion_r425691636", "bodyText": "Are such overrides needed?", "author": "kevinleturc", "createdAt": "2020-05-15T09:50:18Z", "path": "modules/core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/repository/RepositoryService.java", "diffHunk": "@@ -196,7 +261,155 @@ protected RepositoryFactory getFactory(String repositoryName) {\n     }\n \n     public int getActiveSessionsCount() {\n-        return repositories.values().stream().mapToInt(Repository::getActiveSessionsCount).sum();\n+        return pool.getNumActive();\n+    }\n+\n+    public int getActiveSessionsCount(String repositoryName) {\n+        return pool.getNumActive(repositoryName);\n+    }\n+\n+    /**\n+     * Thread-local sessions allocated, per repository.\n+     */\n+    protected static final Map<String, ThreadLocal<Session>> SESSIONS = new ConcurrentHashMap<>(1);\n+\n+    /**\n+     * Gets a session.\n+     * <p>\n+     * The session is first looked up in the current transaction, otherwise fetched from a pool.\n+     *\n+     * @param repositoryName the repository name\n+     * @return the session\n+     * @since 11.1\n+     */\n+    public Session getSession(String repositoryName) {\n+        if (!TransactionHelper.isTransactionActiveOrMarkedRollback()) {\n+            throw new NuxeoException(\"Cannot use a session outside a transaction\");\n+        }\n+        TransactionHelper.checkTransactionTimeout();\n+        ThreadLocal<Session> threadSessions = SESSIONS.computeIfAbsent(repositoryName, r -> new ThreadLocal<>());\n+        Session session = threadSessions.get();\n+        if (session == null) {\n+            if (!TransactionHelper.isTransactionActive()) {\n+                throw new NuxeoException(\"Cannot use a session when transaction is marked rollback-only\");\n+            }\n+            session = getSessionFromPool(repositoryName, threadSessions::remove);\n+            threadSessions.set(session);\n+        }\n+        return session;\n+    }\n+\n+    protected Session getSessionFromPool(String repositoryName, Runnable cleanup) {\n+        Session session;\n+        try {\n+            session = pool.borrowObject(repositoryName);\n+        } catch (NoSuchElementException e) {\n+            String err = String.format(\n+                    \"Connection pool is fully used,\"\n+                            + \" consider increasing nuxeo.vcs.blocking-timeout-millis (currently %s)\"\n+                            + \" or nuxeo.vcs.max-pool-size (currently %s)\",\n+                    poolConfig.getBlockingTimeoutMillis(), poolConfig.getMaxPoolSize());\n+            throw new NuxeoException(err, e);\n+        } catch (RuntimeException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            if (e instanceof InterruptedException) { // NOSONAR\n+                Thread.currentThread().interrupt();\n+            }\n+            throw new NuxeoException(e);\n+        }\n+        // register synchronization for transaction commit/rollback\n+        // and to return to pool and remove from thread-local at end of transaction\n+        TransactionHelper.registerSynchronization(new SessionSynchronization(session, cleanup));\n+        session.start();\n+        return session;\n+    }\n+\n+    /** @since 11.1 */\n+    protected class SessionSynchronization implements Synchronization {\n+\n+        protected final Session session;\n+\n+        protected final Runnable cleanup;\n+\n+        protected SessionSynchronization(Session session, Runnable cleanup) {\n+            this.session = session;\n+            this.cleanup = cleanup;\n+        }\n+\n+        @Override\n+        public void beforeCompletion() {\n+            session.end();\n+        }\n+\n+        @Override\n+        public void afterCompletion(int status) {\n+            boolean completedAbruptly = true;\n+            try {\n+                if (status == STATUS_COMMITTED) {\n+                    session.commit();\n+                } else if (status == STATUS_ROLLEDBACK) {\n+                    session.rollback();\n+                } else {\n+                    log.error(\"Unexpected afterCompletion status: \" + status);\n+                }\n+                completedAbruptly = false;\n+            } finally {\n+                try {\n+                    String repositoryName = session.getRepositoryName();\n+                    if (status == STATUS_COMMITTED && !completedAbruptly) {\n+                        pool.returnObject(repositoryName, session);\n+                    } else {\n+                        pool.invalidateObject(repositoryName, session);\n+                    }\n+                } catch (Exception e) {\n+                    if (e instanceof InterruptedException) { // NOSONAR\n+                        Thread.currentThread().interrupt();\n+                    }\n+                    log.error(e, e);\n+                } finally {\n+                    cleanup.run();\n+                }\n+            }\n+        }\n+    }\n+\n+    /** @since 11.1 */\n+    protected class SessionFactory extends BaseKeyedPooledObjectFactory<String, Session> {\n+\n+        @Override\n+        public Session create(String repositoryName) throws Exception {\n+            Repository repository = getRepository(repositoryName);\n+            if (repository == null) {\n+                throw new DocumentNotFoundException(\"No such repository: \" + repositoryName);\n+            }\n+            return repository.getSession();\n+        }\n+\n+        @Override\n+        public PooledObject<Session> wrap(Session session) {\n+            return new DefaultPooledObject<>(session);\n+        }\n+\n+        @Override\n+        public void activateObject(String repositoryName, PooledObject<Session> p) throws Exception {\n+            super.activateObject(repositoryName, p);\n+        }\n+\n+        @Override\n+        public boolean validateObject(String repositoryName, PooledObject<Session> p) {\n+            return super.validateObject(repositoryName, p);\n+        }\n+\n+        @Override\n+        public void passivateObject(String repositoryName, PooledObject<Session> p) throws Exception {\n+            super.passivateObject(repositoryName, p);\n+        }", "originalCommit": "8d7adf76e8337076b0ff2c661508da5604e53fe7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE2NzQ0OA==", "url": "https://github.com/nuxeo/nuxeo/pull/3981#discussion_r426167448", "bodyText": "No, I'll remove them.", "author": "efge", "createdAt": "2020-05-16T16:16:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY5MTYzNg=="}], "type": "inlineReview", "revised_code": {"commit": "c3e86c8bb234d8e8d337edeae1b0ba2bba11ad79", "chunk": "diff --git a/modules/core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/repository/RepositoryService.java b/modules/core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/repository/RepositoryService.java\nindex 513f7a5d940..02fb87f5238 100644\n--- a/modules/core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/repository/RepositoryService.java\n+++ b/modules/core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/repository/RepositoryService.java\n\n@@ -391,21 +391,6 @@ public class RepositoryService extends DefaultComponent {\n             return new DefaultPooledObject<>(session);\n         }\n \n-        @Override\n-        public void activateObject(String repositoryName, PooledObject<Session> p) throws Exception {\n-            super.activateObject(repositoryName, p);\n-        }\n-\n-        @Override\n-        public boolean validateObject(String repositoryName, PooledObject<Session> p) {\n-            return super.validateObject(repositoryName, p);\n-        }\n-\n-        @Override\n-        public void passivateObject(String repositoryName, PooledObject<Session> p) throws Exception {\n-            super.passivateObject(repositoryName, p);\n-        }\n-\n         @Override\n         public void destroyObject(String repositoryName, PooledObject<Session> p) throws Exception {\n             p.getObject().destroy();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY5NDcwMA==", "url": "https://github.com/nuxeo/nuxeo/pull/3981#discussion_r425694700", "bodyText": "Extra line.", "author": "kevinleturc", "createdAt": "2020-05-15T09:56:11Z", "path": "modules/runtime/nuxeo-runtime-datasource/src/main/java/org/nuxeo/runtime/datasource/PooledDataSourceRegistry.java", "diffHunk": "@@ -13,74 +13,223 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  *\n+ * Contributors:\n+ *     Florent Guillaume\n  */\n package org.nuxeo.runtime.datasource;\n \n-import java.sql.Connection;\n+import static org.apache.commons.lang3.StringUtils.defaultString;\n+\n+import java.lang.reflect.InvocationTargetException;\n import java.sql.SQLException;\n-import java.util.HashMap;\n-import java.util.Hashtable;\n import java.util.Map;\n-import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ConcurrentHashMap;\n \n-import javax.naming.Context;\n-import javax.naming.Name;\n-import javax.naming.Reference;\n+import javax.naming.NamingException;\n import javax.sql.DataSource;\n+import javax.sql.XADataSource;\n+import javax.transaction.Status;\n+import javax.transaction.Transaction;\n+import javax.transaction.TransactionManager;\n+import javax.transaction.TransactionSynchronizationRegistry;\n+\n+import org.apache.commons.beanutils.BeanUtils;\n+import org.apache.commons.dbcp2.ConnectionFactory;\n+import org.apache.commons.dbcp2.managed.BasicManagedDataSource;\n+import org.apache.commons.dbcp2.managed.TransactionRegistry;\n+import org.apache.commons.lang3.reflect.FieldUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.RuntimeServiceException;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n \n-public class PooledDataSourceRegistry extends ReentrantReadWriteLock {\n+public class PooledDataSourceRegistry {\n \n-    private static final long serialVersionUID = 1L;\n+    protected final Map<String, DataSource> dataSources = new ConcurrentHashMap<>();\n \n-    public interface PooledDataSource extends DataSource {\n-        void dispose();\n+    protected final Map<String, DataSource> dataSourcesNoSharing = new ConcurrentHashMap<>();\n \n-        Connection getConnection(boolean noSharing) throws SQLException;\n+    public <T> T getDataSource(String name, Class<T> type, boolean noSharing) {\n+        Map<String, DataSource> map = noSharing ? dataSourcesNoSharing : dataSources;\n+        return type.cast(map.get(name));\n     }\n \n-    protected final Map<String, PooledDataSource> pools = new HashMap<>();\n+    public void registerPooledDataSource(String name, Map<String, String> properties) {\n+        dataSources.computeIfAbsent(name, k -> createPooledDataSource(properties, false));\n+        dataSourcesNoSharing.computeIfAbsent(name, k -> createPooledDataSource(properties, true));\n+    }\n \n-    protected final PooledDataSourceFactory poolFactory = new org.nuxeo.runtime.datasource.PooledDataSourceFactory();\n+    /**\n+     * A {@link BasicManagedDataSource} that can configure its internal {@link XADataSource}.\n+     *\n+     * @since 11.1\n+     */\n+    public static class ConfigurableManagedDataSource extends BasicManagedDataSource {\n \n-    public <T> T getPool(String name, Class<T> type) {\n-        return type.cast(pools.get(name));\n-    }\n+        private static final Logger log = LogManager.getLogger(ConfigurableManagedDataSource.class);\n+\n+        protected final Map<String, String> properties;\n+\n+        public ConfigurableManagedDataSource(Map<String, String> properties) {\n+            this.properties = properties;\n+        }\n+        @Override\n+", "originalCommit": "8d7adf76e8337076b0ff2c661508da5604e53fe7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c3e86c8bb234d8e8d337edeae1b0ba2bba11ad79", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-datasource/src/main/java/org/nuxeo/runtime/datasource/PooledDataSourceRegistry.java b/modules/runtime/nuxeo-runtime-datasource/src/main/java/org/nuxeo/runtime/datasource/PooledDataSourceRegistry.java\nindex 5c1d322dd3b..bc51a02c2da 100644\n--- a/modules/runtime/nuxeo-runtime-datasource/src/main/java/org/nuxeo/runtime/datasource/PooledDataSourceRegistry.java\n+++ b/modules/runtime/nuxeo-runtime-datasource/src/main/java/org/nuxeo/runtime/datasource/PooledDataSourceRegistry.java\n\n@@ -74,8 +74,8 @@ public class PooledDataSourceRegistry {\n         public ConfigurableManagedDataSource(Map<String, String> properties) {\n             this.properties = properties;\n         }\n-        @Override\n \n+        @Override\n         protected ConnectionFactory createConnectionFactory() throws SQLException {\n             ConnectionFactory connectionFactory = super.createConnectionFactory();\n             if (getXADataSource() == null) {\n"}}, {"oid": "c3e86c8bb234d8e8d337edeae1b0ba2bba11ad79", "url": "https://github.com/nuxeo/nuxeo/commit/c3e86c8bb234d8e8d337edeae1b0ba2bba11ad79", "message": "NXP-29010: fix DBCP bug when acquiring a connection when transaction is rollback-only", "committedDate": "2020-05-16T16:18:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAyOTU2OA==", "url": "https://github.com/nuxeo/nuxeo/pull/3981#discussion_r428029568", "bodyText": "Since 11.1?", "author": "troger", "createdAt": "2020-05-20T13:53:13Z", "path": "modules/core/nuxeo-core-management-jtajca/src/main/java/org/nuxeo/ecm/core/management/jtajca/ConnectionPoolMonitor.java", "diffHunk": "@@ -37,6 +35,14 @@\n      */\n     String getName();\n \n+    int getConnectionCount();\n+\n+    int getIdleConnectionCount();\n+\n+    int getBlockingTimeoutMilliseconds();\n+\n+    int getIdleTimeoutMinutes();", "originalCommit": "c3e86c8bb234d8e8d337edeae1b0ba2bba11ad79", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI5NTE2MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3981#discussion_r430295161", "bodyText": "They were already in the PoolingAttributes class which we used to extend.", "author": "efge", "createdAt": "2020-05-26T09:56:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAyOTU2OA=="}], "type": "inlineReview", "revised_code": {"commit": "04348c3de4f110df78f70a484bbfbc60766c5151", "chunk": "diff --git a/modules/core/nuxeo-core-management-jtajca/src/main/java/org/nuxeo/ecm/core/management/jtajca/ConnectionPoolMonitor.java b/modules/core/nuxeo-core-management-jtajca/src/main/java/org/nuxeo/ecm/core/management/jtajca/ConnectionPoolMonitor.java\nindex cac73bfd680..d8c9437f5d6 100644\n--- a/modules/core/nuxeo-core-management-jtajca/src/main/java/org/nuxeo/ecm/core/management/jtajca/ConnectionPoolMonitor.java\n+++ b/modules/core/nuxeo-core-management-jtajca/src/main/java/org/nuxeo/ecm/core/management/jtajca/ConnectionPoolMonitor.java\n\n@@ -35,14 +37,6 @@ public interface ConnectionPoolMonitor extends Monitor {\n      */\n     String getName();\n \n-    int getConnectionCount();\n-\n-    int getIdleConnectionCount();\n-\n-    int getBlockingTimeoutMilliseconds();\n-\n-    int getIdleTimeoutMinutes();\n-\n     /**\n      *\n      * Returns the active timeout before the connection being killed.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA1MzU4MA==", "url": "https://github.com/nuxeo/nuxeo/pull/3981#discussion_r428053580", "bodyText": "Since 11.1?", "author": "troger", "createdAt": "2020-05-20T14:22:27Z", "path": "modules/core/nuxeo-core-storage-sql/nuxeo-core-storage-sql/src/main/java/org/nuxeo/ecm/core/storage/sql/VCSRepositoryFactory.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * (C) Copyright 2006-2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Florent Guillaume\n+ */\n+package org.nuxeo.ecm.core.storage.sql;\n+\n+import org.nuxeo.ecm.core.repository.RepositoryFactory;\n+import org.nuxeo.ecm.core.storage.sql.coremodel.SQLRepositoryService;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Repository factory for VCS, the repository implements internal pooling of sessions.", "originalCommit": "c3e86c8bb234d8e8d337edeae1b0ba2bba11ad79", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "05585b09565cf30d555b0686c4401c17d2862dbb", "chunk": "diff --git a/modules/core/nuxeo-core-storage-sql/nuxeo-core-storage-sql/src/main/java/org/nuxeo/ecm/core/storage/sql/VCSRepositoryFactory.java b/modules/core/nuxeo-core-storage-sql/nuxeo-core-storage-sql/src/main/java/org/nuxeo/ecm/core/storage/sql/VCSRepositoryFactory.java\nindex 28d2d380445..d767d980ace 100644\n--- a/modules/core/nuxeo-core-storage-sql/nuxeo-core-storage-sql/src/main/java/org/nuxeo/ecm/core/storage/sql/VCSRepositoryFactory.java\n+++ b/modules/core/nuxeo-core-storage-sql/nuxeo-core-storage-sql/src/main/java/org/nuxeo/ecm/core/storage/sql/VCSRepositoryFactory.java\n\n@@ -24,6 +24,8 @@ import org.nuxeo.runtime.api.Framework;\n \n /**\n  * Repository factory for VCS, the repository implements internal pooling of sessions.\n+ *\n+ * @since 11.1\n  */\n public class VCSRepositoryFactory implements RepositoryFactory {\n \n"}}, {"oid": "b36ef575a45c7ee0cd3e58c3688cad09217d74f4", "url": "https://github.com/nuxeo/nuxeo/commit/b36ef575a45c7ee0cd3e58c3688cad09217d74f4", "message": "NXP-29010: fix DBCP bug when acquiring a connection when transaction is rollback-only", "committedDate": "2020-05-26T09:38:37Z", "type": "forcePushed"}, {"oid": "05585b09565cf30d555b0686c4401c17d2862dbb", "url": "https://github.com/nuxeo/nuxeo/commit/05585b09565cf30d555b0686c4401c17d2862dbb", "message": "NXP-29010: fix DBCP bug when acquiring a connection when transaction is rollback-only", "committedDate": "2020-05-26T09:59:22Z", "type": "forcePushed"}, {"oid": "d9852a9df8b97b58de8762e8be0fc2b74064cf63", "url": "https://github.com/nuxeo/nuxeo/commit/d9852a9df8b97b58de8762e8be0fc2b74064cf63", "message": "NXP-29159: upgrade to Geronimo Transaction 3.1.4", "committedDate": "2020-05-26T11:48:33Z", "type": "forcePushed"}, {"oid": "d4bcef13944577a498b8eb7da9ecdb2808631fae", "url": "https://github.com/nuxeo/nuxeo/commit/d4bcef13944577a498b8eb7da9ecdb2808631fae", "message": "NXP-29159: upgrade to Geronimo Transaction 3.1.4", "committedDate": "2020-09-04T15:26:35Z", "type": "forcePushed"}, {"oid": "54c16d5432da3ea4be23ed4e7a03896d09fec215", "url": "https://github.com/nuxeo/nuxeo/commit/54c16d5432da3ea4be23ed4e7a03896d09fec215", "message": "NXP-29159: upgrade to Geronimo Transaction 3.1.4", "committedDate": "2020-09-15T12:25:51Z", "type": "forcePushed"}, {"oid": "04348c3de4f110df78f70a484bbfbc60766c5151", "url": "https://github.com/nuxeo/nuxeo/commit/04348c3de4f110df78f70a484bbfbc60766c5151", "message": "NXP-28865: remove useless DBS internal session proxying", "committedDate": "2020-09-17T17:06:24Z", "type": "commit"}, {"oid": "0f1a6dd358a65b264ff92ef50bf71f413ea5400e", "url": "https://github.com/nuxeo/nuxeo/commit/0f1a6dd358a65b264ff92ef50bf71f413ea5400e", "message": "NXP-29009: use Apache Commons DBCP instead of JCA (Apache Geronimo Connector + Tranql) for VCS/DBS pooling", "committedDate": "2020-09-17T17:06:24Z", "type": "commit"}, {"oid": "f25021cec7b92d1677bd90fdb2961a216dc46d16", "url": "https://github.com/nuxeo/nuxeo/commit/f25021cec7b92d1677bd90fdb2961a216dc46d16", "message": "NXP-29009: compute active session count through pool", "committedDate": "2020-09-17T17:06:24Z", "type": "commit"}, {"oid": "2d1037aa834e164ada9417ac85d32d4ee5cd66b3", "url": "https://github.com/nuxeo/nuxeo/commit/2d1037aa834e164ada9417ac85d32d4ee5cd66b3", "message": "NXP-28865: add TransactionHelper.enlistResource", "committedDate": "2020-09-17T17:06:24Z", "type": "commit"}, {"oid": "1b85f5ab5eceda78acd5273d1dd2aaa9dc143f10", "url": "https://github.com/nuxeo/nuxeo/commit/1b85f5ab5eceda78acd5273d1dd2aaa9dc143f10", "message": "NXP-28865: make VCSLockManager use its own connection", "committedDate": "2020-09-17T17:06:24Z", "type": "commit"}, {"oid": "c6f31cdca84c6c0f746423de8bdb4788d6cf0988", "url": "https://github.com/nuxeo/nuxeo/commit/c6f31cdca84c6c0f746423de8bdb4788d6cf0988", "message": "NXP-28865: merge JDBCBackend into RepositoryImpl", "committedDate": "2020-09-17T17:06:24Z", "type": "commit"}, {"oid": "7b9452ac4d26c8ee1e0321b19d9ca665c344b189", "url": "https://github.com/nuxeo/nuxeo/commit/7b9452ac4d26c8ee1e0321b19d9ca665c344b189", "message": "NXP-28865: move createDatabase from JDBCMapper to RepositoryImpl", "committedDate": "2020-09-17T17:06:24Z", "type": "commit"}, {"oid": "1d2b861dc48e7eb8689abda9f1b478f6dc53a9a4", "url": "https://github.com/nuxeo/nuxeo/commit/1d2b861dc48e7eb8689abda9f1b478f6dc53a9a4", "message": "NXP-29011: don't go through JNDI for Nuxeo datasources", "committedDate": "2020-09-17T17:06:24Z", "type": "commit"}, {"oid": "19842c9d6d378a6ceeb62879e8cdc8f8bcbb1c95", "url": "https://github.com/nuxeo/nuxeo/commit/19842c9d6d378a6ceeb62879e8cdc8f8bcbb1c95", "message": "NXP-29010: use Apache Commons DBCP instead of JCA (Apache Geronimo Connector + Tranql) for JDBC pooling", "committedDate": "2020-09-17T17:06:24Z", "type": "commit"}, {"oid": "269ebcd081cfe19204bf9c9ecda934535e0ea915", "url": "https://github.com/nuxeo/nuxeo/commit/269ebcd081cfe19204bf9c9ecda934535e0ea915", "message": "NXP-29010: remove JCA dependencies (Apache Geronimo Connector + Tranql)", "committedDate": "2020-09-17T17:06:25Z", "type": "commit"}, {"oid": "ee26d4553e3e94bf574657929ba177da0beb3970", "url": "https://github.com/nuxeo/nuxeo/commit/ee26d4553e3e94bf574657929ba177da0beb3970", "message": "NXP-29009: simpler VCS connections; VCS/DBS pooling doesn't need XA", "committedDate": "2020-09-17T17:06:25Z", "type": "commit"}, {"oid": "554fc4f3e412312bf39d89d127d0e9c380fdf8da", "url": "https://github.com/nuxeo/nuxeo/commit/554fc4f3e412312bf39d89d127d0e9c380fdf8da", "message": "NXP-28865: use connection in noSharing mode for SQLKeyValueStore\n\nThis is much simpler than running outside a transaction with a standard connection.", "committedDate": "2020-09-17T17:06:25Z", "type": "commit"}, {"oid": "7aea54a853b7ac12a9efa1639ab9e8400f6d9182", "url": "https://github.com/nuxeo/nuxeo/commit/7aea54a853b7ac12a9efa1639ab9e8400f6d9182", "message": "NXP-29009: VCS/DBS pooling cleanup", "committedDate": "2020-09-17T17:06:25Z", "type": "commit"}, {"oid": "6afa4194df0f7644ef3c3ad5c3e31cea099c76fc", "url": "https://github.com/nuxeo/nuxeo/commit/6afa4194df0f7644ef3c3ad5c3e31cea099c76fc", "message": "NXP-29010: fix DBCP bug when acquiring a connection when transaction is rollback-only", "committedDate": "2020-09-17T17:06:25Z", "type": "commit"}, {"oid": "760bfa8c60e1ad0ddcb6a332b0bf3891b73be015", "url": "https://github.com/nuxeo/nuxeo/commit/760bfa8c60e1ad0ddcb6a332b0bf3891b73be015", "message": "NXP-29159: upgrade to Geronimo Transaction 3.1.4", "committedDate": "2020-09-17T17:06:25Z", "type": "commit"}, {"oid": "513925d251aff5bad1215156cb151abf80661f90", "url": "https://github.com/nuxeo/nuxeo/commit/513925d251aff5bad1215156cb151abf80661f90", "message": "NXP-29654: remove deprecated org.nuxeo.ecm.core.model.LockManager", "committedDate": "2020-09-17T17:06:25Z", "type": "commit"}, {"oid": "513925d251aff5bad1215156cb151abf80661f90", "url": "https://github.com/nuxeo/nuxeo/commit/513925d251aff5bad1215156cb151abf80661f90", "message": "NXP-29654: remove deprecated org.nuxeo.ecm.core.model.LockManager", "committedDate": "2020-09-17T17:06:25Z", "type": "forcePushed"}]}